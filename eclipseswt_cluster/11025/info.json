{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b64cd45922fa70bc80fb6a9d514ffe6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67976559128daa899dd785e21b2f4155", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/PromptService.java", "commitBeforeChange": "7cf3772778f97ec4ca9f0b569299f170a7e8057b", "commitAfterChange": "54e8da872bf5cc2a10b70e58c071377dd137c9ea", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public int PromptUsernameAndPassword(int parent, int dialogTitle, int text, int username, int password, int checkMsg, int checkValue, int _retval)", "signatureAfterChange": "  public int PromptUsernameAndPassword(int parent, int dialogTitle, int text, int username, int password, int checkMsg, int checkValue, int _retval)", "diff": ["-\treturn XPCOM.NS_ERROR_NOT_IMPLEMENTED;", "+\tBrowser browser = getBrowser(parent);", "+\tString titleLabel = null, textLabel, checkLabel = null;", "+\tString[] userLabel = new String[1], passLabel = new String[1];", "+\tchar[] dest;", "+\tint length;", "+\tif (dialogTitle != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(dialogTitle);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, dialogTitle, length * 2);", "+\t\ttitleLabel = new String(dest);", "+\t} else {", "+\t\ttitleLabel = SWT.getMessage(\"SWT_Prompt\"); //$NON-NLS-1$", "+\t}", "+\t", "+\tlength = XPCOM.nsCRT_strlen_PRUnichar(text);", "+\tdest = new char[length];", "+\tXPCOM.memmove(dest, text, length * 2);", "+\ttextLabel = new String(dest);", "+\t", "+\tint[] userAddr = new int[1];", "+\tXPCOM.memmove(userAddr, username, 4);", "+\tif (userAddr[0] != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(userAddr[0]);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, userAddr[0], length * 2);", "+\t\tuserLabel[0] = new String(dest);\t\t", "+\t}", "+\t", "+\tint[] passAddr = new int[1];", "+\tXPCOM.memmove(passAddr, password, 4);", "+\tif (passAddr[0] != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(passAddr[0]);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, passAddr[0], length * 2);", "+\t\tpassLabel[0] = new String(dest);\t\t", "+\t}", "+\t", "+\tif (checkMsg != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(checkMsg);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, checkMsg, length * 2);", "+\t\tcheckLabel = new String(dest);", "+\t}", "+\t", "+\tPromptDialog dialog = new PromptDialog(browser.getShell());", "+\tint[] check = new int[1], result = new int[1];", "+\tif (checkValue != 0) XPCOM.memmove(check, checkValue, 4);", "+\tdialog.promptUsernameAndPassword(titleLabel, textLabel, checkLabel, userLabel, passLabel, check, result);", "+", "+\tXPCOM.memmove(_retval, result, 4);", "+\tif (result[0] == 1) {", "+\t\t/* ", "+\t\t* User selected OK. User name and password are returned as PRUnichar values. Any default", "+\t\t* value that we override must be freed using the nsIMemory service.", "+\t\t*/", "+\t\tint cnt, size, ptr;", "+\t\tchar[] buffer;", "+\t\tif (userLabel[0] != null) {", "+\t\t\tcnt = userLabel[0].length();", "+\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tuserLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tsize = buffer.length * 2;", "+\t\t\tptr = XPCOM.PR_Malloc(size);", "+\t\t\tXPCOM.memmove(ptr, buffer, size);", "+\t\t\tXPCOM.memmove(username, new int[] {ptr}, 4);", "+", "+\t\t\tif (userAddr[0] != 0) {", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] tmp = XPCOM.NS_MEMORY_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[tmp.length + 1];", "+\t\t\t\tSystem.arraycopy(tmp, 0, aContractID, 0, tmp.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIMemory memory = new nsIMemory(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tmemory.Free(userAddr[0]);", "+\t\t\t\tmemory.Release();", "+\t\t\t}", "+\t\t}", "+\t\tif (passLabel[0] != null) {", "+\t\t\tcnt = passLabel[0].length();", "+\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tpassLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tsize = buffer.length * 2;", "+\t\t\tptr = XPCOM.PR_Malloc(size);", "+\t\t\tXPCOM.memmove(ptr, buffer, size);", "+\t\t\tXPCOM.memmove(password, new int[] {ptr}, 4);", "+\t\t\t", "+\t\t\tif (passAddr[0] != 0) {", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] tmp = XPCOM.NS_MEMORY_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[tmp.length + 1];", "+\t\t\t\tSystem.arraycopy(tmp, 0, aContractID, 0, tmp.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIMemory memory = new nsIMemory(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tmemory.Free(passAddr[0]);", "+\t\t\t\tmemory.Release();", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (checkValue != 0) XPCOM.memmove(checkValue, check, 4);", "+\treturn XPCOM.NS_OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "716387b67f84ed4ec0ba22aeaa5d6c69", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/PromptService.java", "commitBeforeChange": "d948e31334802b91d52f31c690b6477b906d1132", "commitAfterChange": "3b1d004d4abc583d9591cd3ea8e017b781daf0ee", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public int PromptUsernameAndPassword(int parent, int dialogTitle, int text, int username, int password, int checkMsg, int checkValue, int _retval)", "signatureAfterChange": "  public int PromptUsernameAndPassword(int parent, int dialogTitle, int text, int username, int password, int checkMsg, int checkValue, int _retval)", "diff": ["-\treturn XPCOM.NS_ERROR_NOT_IMPLEMENTED;", "+\tBrowser browser = getBrowser(parent);", "+\tString titleLabel = null, textLabel, checkLabel = null;", "+\tString[] userLabel = new String[1], passLabel = new String[1];", "+\tchar[] dest;", "+\tint length;", "+\tif (dialogTitle != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(dialogTitle);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, dialogTitle, length * 2);", "+\t\ttitleLabel = new String(dest);", "+\t} else {", "+\t\ttitleLabel = SWT.getMessage(\"SWT_Prompt\"); //$NON-NLS-1$", "+\t}", "+\t", "+\tlength = XPCOM.nsCRT_strlen_PRUnichar(text);", "+\tdest = new char[length];", "+\tXPCOM.memmove(dest, text, length * 2);", "+\ttextLabel = new String(dest);", "+\t", "+\tint[] userAddr = new int[1];", "+\tXPCOM.memmove(userAddr, username, 4);", "+\tif (userAddr[0] != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(userAddr[0]);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, userAddr[0], length * 2);", "+\t\tuserLabel[0] = new String(dest);\t\t", "+\t}", "+\t", "+\tint[] passAddr = new int[1];", "+\tXPCOM.memmove(passAddr, password, 4);", "+\tif (passAddr[0] != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(passAddr[0]);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, passAddr[0], length * 2);", "+\t\tpassLabel[0] = new String(dest);\t\t", "+\t}", "+\t", "+\tif (checkMsg != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(checkMsg);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, checkMsg, length * 2);", "+\t\tcheckLabel = new String(dest);", "+\t}", "+\t", "+\tPromptDialog dialog = new PromptDialog(browser.getShell());", "+\tint[] check = new int[1], result = new int[1];", "+\tif (checkValue != 0) XPCOM.memmove(check, checkValue, 4);", "+\tdialog.promptUsernameAndPassword(titleLabel, textLabel, checkLabel, userLabel, passLabel, check, result);", "+", "+\tXPCOM.memmove(_retval, result, 4);", "+\tif (result[0] == 1) {", "+\t\t/* ", "+\t\t* User selected OK. User name and password are returned as PRUnichar values. Any default", "+\t\t* value that we override must be freed using the nsIMemory service.", "+\t\t*/", "+\t\tint cnt, size, ptr;", "+\t\tchar[] buffer;", "+\t\tif (userLabel[0] != null) {", "+\t\t\tcnt = userLabel[0].length();", "+\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tuserLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tsize = buffer.length * 2;", "+\t\t\tptr = XPCOM.PR_Malloc(size);", "+\t\t\tXPCOM.memmove(ptr, buffer, size);", "+\t\t\tXPCOM.memmove(username, new int[] {ptr}, 4);", "+", "+\t\t\tif (userAddr[0] != 0) {", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] tmp = XPCOM.NS_MEMORY_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[tmp.length + 1];", "+\t\t\t\tSystem.arraycopy(tmp, 0, aContractID, 0, tmp.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIMemory memory = new nsIMemory(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tmemory.Free(userAddr[0]);", "+\t\t\t\tmemory.Release();", "+\t\t\t}", "+\t\t}", "+\t\tif (passLabel[0] != null) {", "+\t\t\tcnt = passLabel[0].length();", "+\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tpassLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tsize = buffer.length * 2;", "+\t\t\tptr = XPCOM.PR_Malloc(size);", "+\t\t\tXPCOM.memmove(ptr, buffer, size);", "+\t\t\tXPCOM.memmove(password, new int[] {ptr}, 4);", "+\t\t\t", "+\t\t\tif (passAddr[0] != 0) {", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] tmp = XPCOM.NS_MEMORY_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[tmp.length + 1];", "+\t\t\t\tSystem.arraycopy(tmp, 0, aContractID, 0, tmp.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIMemory memory = new nsIMemory(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tmemory.Free(passAddr[0]);", "+\t\t\t\tmemory.Release();", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (checkValue != 0) XPCOM.memmove(checkValue, check, 4);", "+\treturn XPCOM.NS_OK;"]}], "num": 11025}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95a2d9255ecfbaeb62436de537241e40", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6b54ef10771898dc5e012e81ed2c498", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "7171ce75440e1c2f381de2d9486e536f525ae21d", "commitAfterChange": "1ff9f8c8caac6f13183a5c8b16956fa33502e9e0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["-\tint foreground = gc.data.foreground;", "-\tint gdipGraphics = gc.data.gdipGraphics;", "+\tGCData data = gc.data;", "+\tint gdipGraphics = data.gdipGraphics;", "+\tint foreground = data.foreground;", "+\tint alpha = data.alpha;", "+\tboolean gdip = gdipGraphics != 0 && (alpha != 0xFF || data.foregroundPattern != null);", "+\tint foregroundBrush = 0;", "+\tif (gdip) {", "+\t\tgc.checkGC(GC.FOREGROUND);", "+\t\tforegroundBrush = gc.getFgBrush();", "+\t}", "+\tint clipRgn = 0;", "-\tif (gdipGraphics != 0) {", "+\tRect gdipRect = new Rect();", "+\tif (gdipGraphics != 0 && !gdip) {", "+\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "+\t\tint rgn = Gdip.Region_new();", "+\t\tGdip.Graphics_GetClip(gdipGraphics, rgn);", "+\t\tif (!Gdip.Region_IsInfinite(rgn, gdipGraphics)) {", "+\t\t\tclipRgn = Gdip.Region_GetHRGN(rgn, gdipGraphics);", "+\t\t}", "+\t\tGdip.Region_delete(rgn);", "+\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "+\tif (clipRgn != 0) {", "+\t\tOS.SelectClipRgn(hdc, clipRgn);", "+\t\tOS.DeleteObject(clipRgn);", "+\t}", "-\tint selBrush = 0, selPen = 0;", "+\tint selBrush = 0, selPen = 0, selBrushFg = 0;", "-\t\tselBrush = OS.CreateSolidBrush(selectionBackground.handle);", "-\t\tselPen = OS.CreatePen(OS.BS_SOLID, 1, selectionForeground.handle);", "+\t\tif (gdip) {", "+\t\t\tint bg = selectionBackground.handle;", "+\t\t\tint argb = ((alpha & 0xFF) << 24) | ((bg >> 16) & 0xFF) | (bg & 0xFF00) | ((bg & 0xFF) << 16);", "+\t\t\tint color = Gdip.Color_new(argb); ", "+\t\t\tselBrush = Gdip.SolidBrush_new(color);", "+\t\t\tGdip.Color_delete(color);", "+\t\t\tint fg = selectionForeground.handle;", "+\t\t\targb = ((alpha & 0xFF) << 24) | ((fg >> 16) & 0xFF) | (fg & 0xFF00) | ((fg & 0xFF) << 16);", "+\t\t\tcolor = Gdip.Color_new(argb); ", "+\t\t\tselBrushFg = Gdip.SolidBrush_new(color);", "+\t\t\tselPen = Gdip.Pen_new(selBrushFg, 1);", "+\t\t\tGdip.Color_delete(color);", "+\t\t} else {", "+\t\t\tselBrush = OS.CreateSolidBrush(selectionBackground.handle);", "+\t\t\tselPen = OS.CreatePen(OS.BS_SOLID, 1, selectionForeground.handle);", "+\t\t}", "-\tint rop2 = 0;", "-\tif (OS.IsWinCE) {", "-\t\trop2 = OS.SetROP2(hdc, OS.R2_COPYPEN);", "-\t\tOS.SetROP2(hdc, rop2);", "-\t} else {", "-\t\trop2 = OS.GetROP2(hdc);", "-\t}", "-\tint dwRop = rop2 == OS.R2_XORPEN ? OS.PATINVERT : OS.PATCOPY;", "-\t\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "-\t\t\t\t\t\tOS.PatBlt(hdc, drawX, drawY, run.width, lineHeight - lineSpacing, dwRop);", "+\t\t\t\t\t\tif (gdip) {", "+\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, selBrush, drawX, drawY, run.width, lineHeight - lineSpacing);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "+\t\t\t\t\t\t\tOS.PatBlt(hdc, drawX, drawY, run.width, lineHeight - lineSpacing, OS.PATCOPY);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tint hBrush = OS.CreateSolidBrush (bg);", "-\t\t\t\t\t\t\tint oldBrush = OS.SelectObject(hdc, hBrush);", "-\t\t\t\t\t\t\tOS.PatBlt(hdc, drawX, drawRunY, run.width, run.ascent + run.descent, dwRop);", "-\t\t\t\t\t\t\tOS.SelectObject(hdc, oldBrush);", "-\t\t\t\t\t\t\tOS.DeleteObject(hBrush);", "+\t\t\t\t\t\t\tif (gdip) {", "+\t\t\t\t\t\t\t\tint argb = ((alpha & 0xFF) << 24) | ((bg >> 16) & 0xFF) | (bg & 0xFF00) | ((bg & 0xFF) << 16);", "+\t\t\t\t\t\t\t\tint color = Gdip.Color_new(argb); ", "+\t\t\t\t\t\t\t\tint brush = Gdip.SolidBrush_new(color);", "+\t\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, brush, drawX, drawRunY, run.width, run.ascent + run.descent);", "+\t\t\t\t\t\t\t\tGdip.Color_delete(color);", "+\t\t\t\t\t\t\t\tGdip.SolidBrush_delete(brush);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint hBrush = OS.CreateSolidBrush (bg);", "+\t\t\t\t\t\t\t\tint oldBrush = OS.SelectObject(hdc, hBrush);", "+\t\t\t\t\t\t\t\tOS.PatBlt(hdc, drawX, drawRunY, run.width, run.ascent + run.descent, OS.PATCOPY);", "+\t\t\t\t\t\t\t\tOS.SelectObject(hdc, oldBrush);", "+\t\t\t\t\t\t\t\tOS.DeleteObject(hBrush);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "-\t\t\t\t\t\t\tOS.PatBlt(hdc, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, dwRop);", "+\t\t\t\t\t\t\tif (gdip) {", "+\t\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, selBrush, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "+\t\t\t\t\t\t\t\tOS.PatBlt(hdc, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, OS.PATCOPY);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tint fg = foreground;", "-\t\t\t\t\tif (fullSelection) {", "-\t\t\t\t\t\tfg = selectionForeground.handle;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground.handle;", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.SetTextColor(hdc, fg);", "+\t\t\t\t\tboolean partialSelection = hasSelection && !fullSelection && !(selectionStart > end || run.start > selectionEnd);", "-\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, 0, null, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "-\t\t\t\t\tif ((run.style != null) && (run.style.underline || run.style.strikeout)) {", "-\t\t\t\t\t\tint newPen = hasSelection && fg == selectionForeground.handle ? selPen : OS.CreatePen(OS.BS_SOLID, 1, fg);", "-\t\t\t\t\t\tint oldPen = OS.SelectObject(hdc, newPen);", "-\t\t\t\t\t\tif (run.style.underline) {", "-\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, underlineY, 0);", "-\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, underlineY);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (run.style.strikeout) {", "-\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "-\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, strikeoutY, 0);", "-\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, strikeoutY);\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.SelectObject(hdc, oldPen);", "-\t\t\t\t\t\tif (!hasSelection || fg != selectionForeground.handle) OS.DeleteObject(newPen);", "-\t\t\t\t\t}", "-\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "-\t\t\t\t\tif (!fullSelection && partialSelection && fg != selectionForeground.handle) {", "-\t\t\t\t\t\tOS.SetTextColor(hdc, selectionForeground.handle);", "+\t\t\t\t\tif (partialSelection) {", "-\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, OS.ETO_CLIPPED, rect, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "-\t\t\t\t\t\tif ((run.style != null) && (run.style.underline || run.style.strikeout)) {\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tint oldPen = OS.SelectObject(hdc, selPen);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (gdip) {", "+\t\t\t\t\t\tOS.BeginPath(hdc);", "+\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, 0, null, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "+\t\t\t\t\t\tOS.EndPath(hdc);", "+\t\t\t\t\t\tint count = OS.GetPath(hdc, null, null, 0);", "+\t\t\t\t\t\tint[] points = new int[count*2];", "+\t\t\t\t\t\tbyte[] types = new byte[count];", "+\t\t\t\t\t\tOS.GetPath(hdc, points, types, count);", "+\t\t\t\t\t\tfor (int typeIndex = 0; typeIndex < types.length; typeIndex++) {", "+\t\t\t\t\t\t\tint newType = 0;", "+\t\t\t\t\t\t\tint type = types[typeIndex] & 0xFF;", "+\t\t\t\t\t\t\tswitch (type & ~OS.PT_CLOSEFIGURE) {", "+\t\t\t\t\t\t\t\tcase OS.PT_MOVETO: newType = Gdip.PathPointTypeStart; break;", "+\t\t\t\t\t\t\t\tcase OS.PT_LINETO: newType = Gdip.PathPointTypeLine; break;", "+\t\t\t\t\t\t\t\tcase OS.PT_BEZIERTO: newType = Gdip.PathPointTypeBezier; break;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif ((type & OS.PT_CLOSEFIGURE) != 0) newType |= Gdip.PathPointTypeCloseSubpath;", "+\t\t\t\t\t\t\ttypes[typeIndex] = (byte)newType;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint path = Gdip.GraphicsPath_new(points, types, count, Gdip.FillModeAlternate);", "+\t\t\t\t\t\tif (path == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\t\tint brush = foregroundBrush;", "+\t\t\t\t\t\tif (fullSelection) {", "+\t\t\t\t\t\t\tbrush = selBrushFg;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) {", "+\t\t\t\t\t\t\t\tint fg = run.style.foreground.handle;", "+\t\t\t\t\t\t\t\tint argb = ((alpha & 0xFF) << 24) | ((fg >> 16) & 0xFF) | (fg & 0xFF00) | ((fg & 0xFF) << 16);", "+\t\t\t\t\t\t\t\tint color = Gdip.Color_new(argb); ", "+\t\t\t\t\t\t\t\tbrush = Gdip.SolidBrush_new(color);", "+\t\t\t\t\t\t\t\tGdip.Color_delete(color);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint gstate = 0;", "+\t\t\t\t\t\tif (partialSelection) {", "+\t\t\t\t\t\t\tgdipRect.X = rect.left;", "+\t\t\t\t\t\t\tgdipRect.Y = rect.top;", "+\t\t\t\t\t\t\tgdipRect.Width = rect.right - rect.left;", "+\t\t\t\t\t\t\tgdipRect.Height = rect.bottom - rect.top;", "+\t\t\t\t\t\t\tgstate = Gdip.Graphics_Save(gdipGraphics);", "+\t\t\t\t\t\t\tGdip.Graphics_SetClip(gdipGraphics, gdipRect, Gdip.CombineModeExclude);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint antialias = Gdip.Graphics_GetSmoothingMode(gdipGraphics), textAntialias = 0;", "+\t\t\t\t\t\tint mode = Gdip.Graphics_GetTextRenderingHint(data.gdipGraphics);", "+\t\t\t\t\t\tswitch (mode) {", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSystemDefault: textAntialias = Gdip.SmoothingModeAntiAlias; break;", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSingleBitPerPixel:", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSingleBitPerPixelGridFit: textAntialias = Gdip.SmoothingModeNone; break;", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintAntiAlias:", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintAntiAliasGridFit:", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintClearTypeGridFit: textAntialias = Gdip.SmoothingModeAntiAlias; break;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, textAntialias);", "+\t\t\t\t\t\tGdip.Graphics_FillPath(gdipGraphics, brush, path);", "+\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, antialias);", "+\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "+\t\t\t\t\t\t\tint newPen = hasSelection ? selPen : Gdip.Pen_new(brush, 1);", "+\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "-\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, underlineY, 0);", "-\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, underlineY);", "+\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, newPen, drawX, underlineY, drawX + run.width, underlineY);", "-\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, strikeoutY, 0);", "-\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, strikeoutY);\t", "+\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, newPen, drawX, strikeoutY, drawX + run.width, strikeoutY);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (newPen != selPen) Gdip.Pen_delete(newPen);", "+\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (partialSelection) {", "+\t\t\t\t\t\t\tGdip.Graphics_Restore(gdipGraphics, gstate);", "+\t\t\t\t\t\t\tgstate = Gdip.Graphics_Save(gdipGraphics);", "+\t\t\t\t\t\t\tGdip.Graphics_SetClip(gdipGraphics, gdipRect, Gdip.CombineModeIntersect);", "+\t\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, textAntialias);", "+\t\t\t\t\t\t\tGdip.Graphics_FillPath(gdipGraphics, selBrushFg, path);", "+\t\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, antialias);", "+\t\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "+\t\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "+\t\t\t\t\t\t\t\tif (run.style.underline) {", "+\t\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "+\t\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, selPen, rect.left, underlineY, rect.right, underlineY);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (run.style.strikeout) {", "+\t\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "+\t\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, selPen, rect.left, strikeoutY, rect.right, strikeoutY);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tGdip.Graphics_Restore(gdipGraphics, gstate);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tGdip.GraphicsPath_delete(path);", "+\t\t\t\t\t\tif (brush != selBrushFg && brush != foregroundBrush) Gdip.SolidBrush_delete(brush);", "+\t\t\t\t\t}  else {", "+\t\t\t\t\t\tint fg = foreground;", "+\t\t\t\t\t\tif (fullSelection) {", "+\t\t\t\t\t\t\tfg = selectionForeground.handle;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground.handle;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.SetTextColor(hdc, fg);", "+\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, 0, null, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "+\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "+\t\t\t\t\t\t\tint newPen = hasSelection && fg == selectionForeground.handle ? selPen : OS.CreatePen(OS.BS_SOLID, 1, fg);", "+\t\t\t\t\t\t\tint oldPen = OS.SelectObject(hdc, newPen);", "+\t\t\t\t\t\t\tif (run.style.underline) {", "+\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "+\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, underlineY, 0);", "+\t\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, underlineY);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (run.style.strikeout) {", "+\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "+\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, strikeoutY, 0);", "+\t\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, strikeoutY);\t", "+\t\t\t\t\t\t\tif (!hasSelection || fg != selectionForeground.handle) OS.DeleteObject(newPen);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (partialSelection && fg != selectionForeground.handle) {", "+\t\t\t\t\t\t\tOS.SetTextColor(hdc, selectionForeground.handle);", "+\t\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, OS.ETO_CLIPPED, rect, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "+\t\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tint oldPen = OS.SelectObject(hdc, selPen);", "+\t\t\t\t\t\t\t\tif (run.style.underline) {", "+\t\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "+\t\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, underlineY, 0);", "+\t\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, underlineY);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (run.style.strikeout) {", "+\t\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "+\t\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, strikeoutY, 0);", "+\t\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, strikeoutY);\t", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tOS.SelectObject(hdc, oldPen);", "+\t\t\t\t\t\t\t}", "-\tif (gdipGraphics != 0) {", "-\t\tGdip.Graphics_ReleaseHDC(gdipGraphics, hdc);", "+\tif (gdip) {", "+\t\tif (selBrush != 0) Gdip.SolidBrush_delete(selBrush);", "+\t\tif (selBrushFg != 0) Gdip.SolidBrush_delete(selBrushFg);", "+\t\tif (selPen != 0) Gdip.Pen_delete(selPen);", "+\t} else {", "+\t\tif (gdipGraphics != 0) Gdip.Graphics_ReleaseHDC(gdipGraphics, hdc);", "+\t\tif (selBrush != 0) OS.DeleteObject (selBrush);", "+\t\tif (selPen != 0) OS.DeleteObject (selPen);", "-\tif (selBrush != 0) OS.DeleteObject (selBrush);", "-\tif (selPen != 0) OS.DeleteObject (selPen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd7c75b0fe27cb01eba7223e8ecc911f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java", "commitBeforeChange": "dca081370d5224f1cd2e70bba1975a4902add83c", "commitAfterChange": "61d2d6593ac92fd12ac831d8c082ce8dff8165a6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 10, "signatureBeforeChange": " static String getResourceString(String key, Object[] args)", "signatureAfterChange": " \t \tvoid show(boolean owned, Point location, Point size, boolean addressBar, boolean menuBar, boolean statusBar, boolean toolBar)", "diff": ["+\t", "+\tvoid show(boolean owned, Point location, Point size, boolean addressBar, boolean menuBar, boolean statusBar, boolean toolBar) {", "+\t\tfinal Shell shell = browser.getShell();", "+\t\tif (owned) {", "+\t\t\tif (location != null) shell.setLocation(location);", "+\t\t\tif (size != null) shell.setSize(shell.computeSize(size.x, size.y));", "+\t\t}", "+\t\tFormData data = null;", "+\t\tif (toolBar) {", "+\t\t\ttoolbar = new ToolBar(parent, SWT.NONE);", "+\t\t\tdata = new FormData();", "+\t\t\tdata.top = new FormAttachment(0, 5);", "+\t\t\ttoolbar.setLayoutData(data);", "+\t\t\titemBack = new ToolItem(toolbar, SWT.PUSH);", "+\t\t\titemBack.setText(getResourceString(\"Back\"));", "+\t\t\titemForward = new ToolItem(toolbar, SWT.PUSH);", "+\t\t\titemForward.setText(getResourceString(\"Forward\"));", "+\t\t\tfinal ToolItem itemStop = new ToolItem(toolbar, SWT.PUSH);", "+\t\t\titemStop.setText(getResourceString(\"Stop\"));", "+\t\t\tfinal ToolItem itemRefresh = new ToolItem(toolbar, SWT.PUSH);", "+\t\t\titemRefresh.setText(getResourceString(\"Refresh\"));", "+\t\t\tfinal ToolItem itemGo = new ToolItem(toolbar, SWT.PUSH);", "+\t\t\titemGo.setText(getResourceString(\"Go\"));", "+\t\t\t", "+\t\t\titemBack.setEnabled(browser.isBackEnabled());", "+\t\t\titemForward.setEnabled(browser.isForwardEnabled());", "+\t\t\tListener listener = new Listener() {", "+\t\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\t\tToolItem item = (ToolItem)event.widget;", "+\t\t\t\t\tif (item == itemBack) browser.back(); ", "+\t\t\t\t\telse if (item == itemForward) browser.forward();", "+\t\t\t\t\telse if (item == itemStop) browser.stop();", "+\t\t\t\t\telse if (item == itemRefresh) browser.refresh();", "+\t\t\t\t\telse if (item == itemGo) browser.setUrl(locationBar.getText());", "+\t\t\t};", "+\t\t\titemBack.addListener(SWT.Selection, listener);", "+\t\t\titemForward.addListener(SWT.Selection, listener);", "+\t\t\titemStop.addListener(SWT.Selection, listener);", "+\t\t\titemRefresh.addListener(SWT.Selection, listener);", "+\t\t\titemGo.addListener(SWT.Selection, listener);", "+", "+\t\t\tcanvas = new Canvas(parent, SWT.NO_BACKGROUND);", "+\t\t\tdata = new FormData();", "+\t\t\tdata.width = 24;", "+\t\t\tdata.height = 24;", "+\t\t\tdata.top = new FormAttachment(0, 5);", "+\t\t\tdata.right = new FormAttachment(100, -5);", "+\t\t\tcanvas.setLayoutData(data);", "+\t\t\t", "+\t\t\tfinal Rectangle rect = images[0].getBounds();", "+\t\t\tcanvas.addListener(SWT.Paint, new Listener() {", "+\t\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\t\tPoint pt = ((Canvas)e.widget).getSize();", "+\t\t\t\t\te.gc.drawImage(images[index], 0, 0, rect.width, rect.height, 0, 0, pt.x, pt.y);\t\t\t", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\tcanvas.addListener(SWT.MouseDown, new Listener() {", "+\t\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\t\tbrowser.setUrl(getResourceString(\"Startup\"));", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\t", "+\t\t\tfinal Display display = parent.getDisplay();", "+\t\t\tdisplay.asyncExec(new Runnable() {", "+\t\t\t\tpublic void run() {", "+\t\t\t\t\tif (canvas.isDisposed()) return;", "+\t\t\t\t\tif (busy) {", "+\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\tif (index == images.length) index = 0;", "+\t\t\t\t\t\tcanvas.redraw();", "+\t\t\t\t\t}", "+\t\t\t\t\tdisplay.timerExec(150, this);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\tif (addressBar) {", "+\t\t\tlocationBar = new Text(parent, SWT.BORDER);", "+\t\t\tdata = new FormData();", "+\t\t\tif (toolbar != null) {", "+\t\t\t\tdata.top = new FormAttachment(toolbar, 0, SWT.TOP);", "+\t\t\t\tdata.left = new FormAttachment(toolbar, 5, SWT.RIGHT);", "+\t\t\t\tdata.right = new FormAttachment(canvas, -5, SWT.DEFAULT);\t\t\t", "+\t\t\t} else {", "+\t\t\t\tdata.top = new FormAttachment(0, 0);", "+\t\t\t\tdata.left = new FormAttachment(0, 0);", "+\t\t\t\tdata.right = new FormAttachment(100, 0);\t\t\t", "+\t\t\tlocationBar.setLayoutData(data);", "+\t\t\tlocationBar.addListener(SWT.DefaultSelection, new Listener() {", "+\t\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\t\tbrowser.setUrl(locationBar.getText());", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\tif (statusBar) {", "+\t\t\tstatus = new Label(parent, SWT.NONE);", "+\t\t\tprogressBar = new ProgressBar(parent, SWT.NONE);", "+\t\t\t", "+\t\t\tdata = new FormData();", "+\t\t\tdata.left = new FormAttachment(0, 5);", "+\t\t\tdata.right = new FormAttachment(progressBar, 0, SWT.DEFAULT);", "+\t\t\tdata.bottom = new FormAttachment(100, -5);", "+\t\t\tstatus.setLayoutData(data);", "+\t\t\t", "+\t\t\tdata = new FormData();", "+\t\t\tdata.right = new FormAttachment(100, -5);", "+\t\t\tdata.bottom = new FormAttachment(100, -5);", "+\t\t\tprogressBar.setLayoutData(data);", "+\t\t\t", "+\t\t\tbrowser.addStatusTextListener(new StatusTextListener() {", "+\t\t\t\tpublic void changed(StatusTextEvent event) {", "+\t\t\t\t\tstatus.setText(event.text);\t", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\tparent.setLayout(new FormLayout());", "+", "+\t\tControl aboveBrowser = toolBar ? (Control)canvas : (addressBar ? (Control)locationBar : null);", "+\t\tdata = new FormData();", "+\t\tdata.left = new FormAttachment(0, 0);", "+\t\tdata.top = aboveBrowser != null ? new FormAttachment(aboveBrowser, 5, SWT.DEFAULT) : new FormAttachment(0, 0);", "+\t\tdata.right = new FormAttachment(100, 0);", "+\t\tdata.bottom = status != null ? new FormAttachment(status, -5, SWT.DEFAULT) : new FormAttachment(100, 0);", "+\t\tbrowser.setLayoutData(data);", "+\t\t\t", "+\t\tif (statusBar || toolBar) {", "+\t\t\tbrowser.addProgressListener(new ProgressListener() {", "+\t\t\t\tpublic void changed(ProgressEvent event) {", "+\t\t\t\t\tif (event.total == 0) return;                            ", "+\t\t\t\t\tint ratio = event.current * 100 / event.total;", "+\t\t\t\t\tif (progressBar != null) progressBar.setSelection(ratio);", "+\t\t\t\t\tbusy = event.current != event.total;", "+\t\t\t\t\tif (!busy) {", "+\t\t\t\t\t\tindex = 0;", "+\t\t\t\t\t\tif (canvas != null) canvas.redraw();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tpublic void completed(ProgressEvent event) {", "+\t\t\t\t\tif (progressBar != null) progressBar.setSelection(0);", "+\t\t\t\t\tbusy = false;", "+\t\t\t\t\tindex = 0;", "+\t\t\t\t\tif (canvas != null) {", "+\t\t\t\t\t\titemBack.setEnabled(browser.isBackEnabled());", "+\t\t\t\t\t\titemForward.setEnabled(browser.isForwardEnabled());", "+\t\t\t\t\t\tcanvas.redraw();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\tif (addressBar || statusBar || toolBar) {", "+\t\t\tbrowser.addLocationListener(new LocationListener() {", "+\t\t\t\tpublic void changed(LocationEvent event) {", "+\t\t\t\t\tbusy = true;", "+\t\t\t\t\tif (event.top && locationBar != null) locationBar.setText(event.location);", "+\t\t\t\t}", "+\t\t\t\tpublic void changing(LocationEvent event) {", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+\t\tif (title) {", "+\t\tparent.layout(true);", "+\t\tif (size != null) parent.pack();", "+\t\tif (owned) shell.open();", "+\t}", "- */", "-static String getResourceString(String key, Object[] args) {", "-\ttry {", "-\t\treturn MessageFormat.format(getResourceString(key), args);", "-\t} catch (MissingResourceException e) {", "-\t\treturn key;", "-\t} catch (NullPointerException e) {", "-\t\treturn \"!\" + key + \"!\";", "-\t}", "-}"]}], "num": 32511}
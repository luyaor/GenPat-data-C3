{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66e9e849d798e749bc734e2e67b35aeb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24628a71d733ad5c7d2c9a0583cf79e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 131, "signatureBeforeChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "signatureAfterChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "diff": ["-\t/* Compute the old bounds */", "-\tRect oldBounds = new Rect ();", "-\tOS.GetControlBounds (control, oldBounds);", "-\tint [] theRoot = new int [1];", "-\tint window = OS.GetControlOwner (control);", "-\tOS.GetRootControl (window, theRoot);", "-\tint [] parentHandle = new int [1];", "-\tOS.GetSuperControl (control, parentHandle);", "-\tRect parentRect = new Rect ();", "-\tif (parentHandle [0] != theRoot [0]) {", "-\t\tOS.GetControlBounds (parentHandle [0], parentRect);", "-\t\tOS.OffsetRect (oldBounds, (short) -parentRect.left, (short) -parentRect.top);", "-\t}", "-\tRect inset = getInset ();", "-\toldBounds.left -= inset.left;", "-\toldBounds.top -= inset.top;", "-\toldBounds.right += inset.right;", "-\toldBounds.bottom += inset.bottom;", "+\tboolean sameOrigin = true, sameExtent = true;", "+\tif (OS.HIVIEW) {", "+\t\tCGRect oldBounds = new CGRect ();", "+\t\tOS.HIViewGetFrame (control, oldBounds);", "+\t\tRect inset = getInset ();", "+\t\toldBounds.x -= inset.left;", "+\t\toldBounds.y -= inset.top;", "+\t\toldBounds.width += inset.left + inset.right;", "+\t\toldBounds.height += inset.top + inset.bottom;", "+\t\tif (!move) {", "+\t\t\tx = (int) oldBounds.x;", "+\t\t\ty = (int) oldBounds.y;", "+\t\t}", "+\t\tif (!resize) {", "+\t\t\twidth = (int) oldBounds.width;", "+\t\t\theight = (int) oldBounds.height;", "+\t\t}", "+\t\tCGRect newBounds = new CGRect ();", "+\t\tnewBounds.x = x + inset.left;", "+\t\tnewBounds.y = y + inset.top;", "+\t\tnewBounds.width = width - inset.right - inset.left;", "+\t\tnewBounds.height = height - inset.bottom - inset.top;", "+\t\tsameOrigin = newBounds.x == oldBounds.x && newBounds.y == oldBounds.y;", "+\t\tsameExtent = newBounds.width == oldBounds.width && newBounds.height == oldBounds.height;", "+\t\tif (sameOrigin && sameExtent) return 0;", "+\t\tOS.HIViewSetFrame (control, newBounds);", "+\t\tinvalidateVisibleRegion (control);", "+\t} else {", "+\t\t/* Compute the old bounds */", "+\t\tRect oldBounds = new Rect ();", "+\t\tOS.GetControlBounds (control, oldBounds);", "+\t\tint [] theRoot = new int [1];", "+\t\tint window = OS.GetControlOwner (control);", "+\t\tOS.GetRootControl (window, theRoot);", "+\t\tint [] parentHandle = new int [1];", "+\t\tOS.GetSuperControl (control, parentHandle);", "+\t\tRect parentRect = new Rect ();", "+\t\tif (parentHandle [0] != theRoot [0]) {", "+\t\t\tOS.GetControlBounds (parentHandle [0], parentRect);", "+\t\t\tOS.OffsetRect (oldBounds, (short) -parentRect.left, (short) -parentRect.top);", "+\t\t}", "+\t\tRect inset = getInset ();", "+\t\toldBounds.left -= inset.left;", "+\t\toldBounds.top -= inset.top;", "+\t\toldBounds.right += inset.right;", "+\t\toldBounds.bottom += inset.bottom;", "+\t\t", "+\t\t/* Compute the new bounds */", "+\t\tif (!move) {", "+\t\t\tx = oldBounds.left;", "+\t\t\ty = oldBounds.top;", "+\t\t}", "+\t\tif (!resize) {", "+\t\t\twidth = oldBounds.right - oldBounds.left;", "+\t\t\theight = oldBounds.bottom - oldBounds.top;", "+\t\t}\t", "+\t\tRect newBounds = new Rect ();", "+\t\tnewBounds.left = (short) (parentRect.left + x + inset.left);", "+\t\tnewBounds.top = (short) (parentRect.top + y + inset.top);", "+\t\tnewBounds.right = (short) (newBounds.left + width - inset.right - inset.left);", "+\t\tnewBounds.bottom = (short) (newBounds.top + height - inset.bottom - inset.top);\t", "+\t\tif (newBounds.bottom < newBounds.top) newBounds.bottom = newBounds.top;", "+\t\tif (newBounds.right < newBounds.left) newBounds.right = newBounds.left;", "-\t/* Compute the new bounds */", "-\tif (!move) {", "-\t\tx = oldBounds.left;", "-\t\ty = oldBounds.top;", "-\t}", "-\tif (!resize) {", "-\t\twidth = oldBounds.right - oldBounds.left;", "-\t\theight = oldBounds.bottom - oldBounds.top;", "-\t}\t", "-\tRect newBounds = new Rect ();", "-\tnewBounds.left = (short) (parentRect.left + x + inset.left);", "-\tnewBounds.top = (short) (parentRect.top + y + inset.top);", "-\tnewBounds.right = (short) (newBounds.left + width - inset.right - inset.left);", "-\tnewBounds.bottom = (short) (newBounds.top + height - inset.bottom - inset.top);\t", "-\tif (newBounds.bottom < newBounds.top) newBounds.bottom = newBounds.top;", "-\tif (newBounds.right < newBounds.left) newBounds.right = newBounds.left;", "-", "-\t/* Get bounds again, since the one above is in SWT coordinates */", "-\tOS.GetControlBounds (control, oldBounds);", "+\t\t/* Get bounds again, since the one above is in SWT coordinates */", "+\t\tOS.GetControlBounds (control, oldBounds);", "+\t\t", "+\t\t/* Check if anything changed */", "+\t\tsameOrigin = newBounds.left == oldBounds.left && newBounds.top == oldBounds.top;", "+\t\tsameExtent = (newBounds.right - newBounds.left) == (oldBounds.right - oldBounds.left) && (newBounds.bottom - newBounds.top) == (oldBounds.bottom - oldBounds.top);", "+\t\tif (sameOrigin && sameExtent) return 0;", "-\t/* Check if anything changed */", "-\tboolean sameOrigin = newBounds.left == oldBounds.left && newBounds.top == oldBounds.top;", "-\tboolean sameExtent = (newBounds.right - newBounds.left) == (oldBounds.right - oldBounds.left) && (newBounds.bottom - newBounds.top) == (oldBounds.bottom - oldBounds.top);", "-\tif (sameOrigin && sameExtent) return 0;", "-", "-\t/* Apply changes and invalidate appropriate rectangles */", "-\tint tempRgn = 0;", "-\tboolean visible = OS.IsControlVisible (control);", "-\tif (visible) {", "-\t\ttempRgn = OS.NewRgn ();", "-\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "-\t\tinvalWindowRgn (window, tempRgn);", "-\t}", "-\tOS.SetControlBounds (control, newBounds);", "-\tinvalidateVisibleRegion (control);", "-\tif (visible) {", "-\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "-\t\tinvalWindowRgn (window, tempRgn);", "-\t\tOS.DisposeRgn(tempRgn);", "+\t\t/* Apply changes and invalidate appropriate rectangles */", "+\t\tint tempRgn = 0;", "+\t\tboolean visible = OS.IsControlVisible (control);", "+\t\tif (visible) {", "+\t\t\ttempRgn = OS.NewRgn ();", "+\t\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "+\t\t\tinvalWindowRgn (window, tempRgn);", "+\t\t}", "+\t\tOS.SetControlBounds (control, newBounds);", "+\t\tinvalidateVisibleRegion (control);", "+\t\tif (visible) {", "+\t\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "+\t\t\tinvalWindowRgn (window, tempRgn);", "+\t\t\tOS.DisposeRgn(tempRgn);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f1018929e62a001c0da03486fe4e6f3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "signatureAfterChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tCGRect oldBounds = new CGRect ();", "-\t\tOS.HIViewGetFrame (control, oldBounds);", "-\t\tRect inset = getInset ();", "-\t\toldBounds.x -= inset.left;", "-\t\toldBounds.y -= inset.top;", "-\t\toldBounds.width += inset.left + inset.right;", "-\t\toldBounds.height += inset.top + inset.bottom;", "-\t\tif (!move) {", "-\t\t\tx = (int) oldBounds.x;", "-\t\t\ty = (int) oldBounds.y;", "-\t\t}", "-\t\tif (!resize) {", "-\t\t\twidth = (int) oldBounds.width;", "-\t\t\theight = (int) oldBounds.height;", "-\t\t}", "-\t\tCGRect newBounds = new CGRect ();", "-\t\tnewBounds.x = x + inset.left;", "-\t\tnewBounds.y = y + inset.top;", "-\t\tnewBounds.width = width - inset.right - inset.left;", "-\t\tnewBounds.height = height - inset.bottom - inset.top;", "-\t\tsameOrigin = newBounds.x == oldBounds.x && newBounds.y == oldBounds.y;", "-\t\tsameExtent = newBounds.width == oldBounds.width && newBounds.height == oldBounds.height;", "-\t\tif (sameOrigin && sameExtent) return 0;", "-\t\tOS.HIViewSetFrame (control, newBounds);", "-\t\tinvalidateVisibleRegion (control);", "-\t} else {", "-\t\t/* Compute the old bounds */", "-\t\tRect oldBounds = new Rect ();", "-\t\tOS.GetControlBounds (control, oldBounds);", "-\t\tint [] theRoot = new int [1];", "-\t\tint window = OS.GetControlOwner (control);", "-\t\tOS.GetRootControl (window, theRoot);", "-\t\tint [] parentHandle = new int [1];", "-\t\tOS.GetSuperControl (control, parentHandle);", "-\t\tRect parentRect = new Rect ();", "-\t\tif (parentHandle [0] != theRoot [0]) {", "-\t\t\tOS.GetControlBounds (parentHandle [0], parentRect);", "-\t\t\tOS.OffsetRect (oldBounds, (short) -parentRect.left, (short) -parentRect.top);", "-\t\t}", "-\t\tRect inset = getInset ();", "-\t\toldBounds.left -= inset.left;", "-\t\toldBounds.top -= inset.top;", "-\t\toldBounds.right += inset.right;", "-\t\toldBounds.bottom += inset.bottom;", "-\t\t", "-\t\t/* Compute the new bounds */", "-\t\tif (!move) {", "-\t\t\tx = oldBounds.left;", "-\t\t\ty = oldBounds.top;", "-\t\t}", "-\t\tif (!resize) {", "-\t\t\twidth = oldBounds.right - oldBounds.left;", "-\t\t\theight = oldBounds.bottom - oldBounds.top;", "-\t\t}\t", "-\t\tRect newBounds = new Rect ();", "-\t\tnewBounds.left = (short) (parentRect.left + x + inset.left);", "-\t\tnewBounds.top = (short) (parentRect.top + y + inset.top);", "-\t\tnewBounds.right = (short) (newBounds.left + width - inset.right - inset.left);", "-\t\tnewBounds.bottom = (short) (newBounds.top + height - inset.bottom - inset.top);\t", "-\t\tif (newBounds.bottom < newBounds.top) newBounds.bottom = newBounds.top;", "-\t\tif (newBounds.right < newBounds.left) newBounds.right = newBounds.left;", "-\t", "-\t\t/* Get bounds again, since the one above is in SWT coordinates */", "-\t\tOS.GetControlBounds (control, oldBounds);", "-\t\t", "-\t\t/* Check if anything changed */", "-\t\tsameOrigin = newBounds.left == oldBounds.left && newBounds.top == oldBounds.top;", "-\t\tsameExtent = (newBounds.right - newBounds.left) == (oldBounds.right - oldBounds.left) && (newBounds.bottom - newBounds.top) == (oldBounds.bottom - oldBounds.top);", "-\t\tif (sameOrigin && sameExtent) return 0;", "-\t", "-\t\t/* Apply changes and invalidate appropriate rectangles */", "-\t\tint tempRgn = 0;", "-\t\tboolean visible = OS.IsControlVisible (control);", "-\t\tif (visible) {", "-\t\t\ttempRgn = OS.NewRgn ();", "-\t\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "-\t\t\tinvalWindowRgn (window, tempRgn);", "-\t\t}", "-\t\tOS.SetControlBounds (control, newBounds);", "-\t\tinvalidateVisibleRegion (control);", "-\t\tif (visible) {", "-\t\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "-\t\t\tinvalWindowRgn (window, tempRgn);", "-\t\t\tOS.DisposeRgn(tempRgn);", "-\t\t}", "+\tCGRect oldBounds = new CGRect ();", "+\tOS.HIViewGetFrame (control, oldBounds);", "+\tRect inset = getInset ();", "+\toldBounds.x -= inset.left;", "+\toldBounds.y -= inset.top;", "+\toldBounds.width += inset.left + inset.right;", "+\toldBounds.height += inset.top + inset.bottom;", "+\tif (!move) {", "+\t\tx = (int) oldBounds.x;", "+\t\ty = (int) oldBounds.y;", "+\tif (!resize) {", "+\t\twidth = (int) oldBounds.width;", "+\t\theight = (int) oldBounds.height;", "+\t}", "+\tCGRect newBounds = new CGRect ();", "+\tnewBounds.x = x + inset.left;", "+\tnewBounds.y = y + inset.top;", "+\tnewBounds.width = width - inset.right - inset.left;", "+\tnewBounds.height = height - inset.bottom - inset.top;", "+\tsameOrigin = newBounds.x == oldBounds.x && newBounds.y == oldBounds.y;", "+\tsameExtent = newBounds.width == oldBounds.width && newBounds.height == oldBounds.height;", "+\tif (sameOrigin && sameExtent) return 0;", "+\tOS.HIViewSetFrame (control, newBounds);", "+\tinvalidateVisibleRegion (control);"]}], "num": 50498}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bda153fa0827ff22350bed63dbbee738", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "585c4bf2c56ca83928a5200ec3008735", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "6268623a1aefd83248566a5b16698cb19ee6b719", "commitAfterChange": "8f69618fc3b877d652c7fe2fd695fbdc73e7c8ea", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 298, "signatureBeforeChange": "  LRESULT WM_TOUCH (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_TOUCH (int wParam, int lParam)", "diff": ["-\t", "-\tif (hooks(SWT.Touch) || filters(SWT.Touch)) {", "-\t\tint cInputs = OS.LOWORD(wParam);", "+\tif (hooks (SWT.Touch) || filters (SWT.Touch)) {", "+\t\tint cInputs = OS.LOWORD (wParam);", "-", "-\t\tif (pInputs != 0){", "-\t\t\tif (OS.GetTouchInputInfo(lParam, cInputs, pInputs, OS.TOUCHINPUT_sizeof())) {", "-\t\t\t\tTOUCHINPUT ti[] = new TOUCHINPUT[cInputs];", "+\t\tif (pInputs != 0) {", "+\t\t\tif (OS.GetTouchInputInfo (lParam, cInputs, pInputs, TOUCHINPUT.sizeof)) {", "+\t\t\t\tTOUCHINPUT ti [] = new TOUCHINPUT [cInputs];", "-\t\t\t\t\tti[i] = new TOUCHINPUT();", "-\t\t\t\t\tOS.MoveMemory(ti[i], pInputs + i * OS.TOUCHINPUT_sizeof(), OS.TOUCHINPUT_sizeof());", "-\t\t\t\t}            ", "-\t\t\t\tif (!sendTouchEvent(handle, ti))", "-\t\t\t\tOS.HeapFree(hHeap, 0, pInputs);", "-\t\t\t\tresult = LRESULT.ZERO;\t\t\t\t\t", "+\t\t\t\t\tti [i] = new TOUCHINPUT ();", "+\t\t\t\t\tOS.MoveMemory (ti [i], pInputs + i * TOUCHINPUT.sizeof, TOUCHINPUT.sizeof);", "+\t\t\t\t}", "+\t\t\t\tif (!sendTouchEvent (ti)) {", "+\t\t\t\t\tOS.CloseTouchInputHandle (lParam); ", "+\t\t\t\t\tresult = LRESULT.ZERO;", "+\t\t\t\t}", "+\t\t\tOS.HeapFree (hHeap, 0, pInputs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79cc3c1af430a453b234296d1f3d8e09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "1034efdda128f80759c28bd972b3a2faf7fa970a", "commitAfterChange": "7c255c33f088ef04ac6271863f814fd0cde593d4", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void checkGesture ()", "signatureAfterChange": "  void checkGesture ()", "diff": ["+\t\t\t/*", "+\t\t\t * Feature in Windows 7: All gestures are enabled by default except GID_ROTATE.", "+\t\t\t * Enable it explicitly by calling SetGestureConfig.", "+\t\t\t */", "-\t\t\tint /*long*/ pConfigs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY,  GESTURE_COUNT * GESTURECONFIG.sizeof);", "+\t\t\tint /*long*/ pConfigs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY,  GESTURECONFIG.sizeof);", "-\t\t\t\tfor (int i = 0; i < GESTURE_COUNT; i++) {", "-\t\t\t\t\tconfig.dwID = i + OS.GID_ZOOM;", "-\t\t\t\t\tconfig.dwWant = 1;", "-\t\t\t\t\tconfig.dwBlock = 0;", "-\t\t\t\t\tOS.MoveMemory (pConfigs + i * GESTURECONFIG.sizeof, config, GESTURECONFIG.sizeof);", "-\t\t\t\t}", "-\t\t\t\tOS.SetGestureConfig (handle, 0, GESTURE_COUNT, pConfigs, GESTURECONFIG.sizeof);", "+\t\t\t\tconfig.dwID = OS.GID_ROTATE;", "+\t\t\t\tconfig.dwWant = 1;", "+\t\t\t\tconfig.dwBlock = 0;", "+\t\t\t\tOS.MoveMemory (pConfigs, config, GESTURECONFIG.sizeof);", "+\t\t\t\tOS.SetGestureConfig (handle, 0, 1, pConfigs, GESTURECONFIG.sizeof);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e2c642cb6ed4049e401f6a1fb9b87b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "751399cd435ff7ae4f611108a25dd9577f78e768", "commitAfterChange": "2aa842a0d510140da28edb5b7f888217965555a3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " void computeRuns (GC gc)", "signatureAfterChange": " void computeRuns (GC gc)", "diff": ["-\tStyleItem[] allRuns = itemize();", "+\tallRuns = itemize();", "-\t\t\t\t", "-\t\t\t\t\tchar[] chars = new char[run.length];", "-\t\t\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "-\t\t\t\t\tint hHeap = OS.GetProcessHeap();", "-\t\t\t\t\tint psla = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, SCRIPT_LOGATTR.sizeof * chars.length); ", "-\t\t\t\t\tOS.ScriptBreak(chars, chars.length, run.analysis, psla);", "+\t\t\t\t\tbreakRun(run);", "-\t\t\t\t\t\tOS.MoveMemory(logAttr, psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "+\t\t\t\t\t\tOS.MoveMemory(logAttr, run.psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "-\t\t\t\t\tOS.HeapFree(hHeap, 0, psla);", "-\t\t\t\t\tchar[] chars = new char[run.length];", "-\t\t\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "-\t\t\t\t\tint hHeap = OS.GetProcessHeap();", "-\t\t\t\t\tint psla = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, SCRIPT_LOGATTR.sizeof * chars.length);", "-\t\t\t\t\tOS.ScriptBreak(chars, chars.length, run.analysis, psla);", "+\t\t\t\t\tbreakRun(run);", "-\t\t\t\t\t\tOS.MoveMemory(logAttr, psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "+\t\t\t\t\t\tOS.MoveMemory(logAttr, run.psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "-\t\t\t\t\tOS.HeapFree(hHeap, 0, psla);\t\t"]}], "num": 42704}
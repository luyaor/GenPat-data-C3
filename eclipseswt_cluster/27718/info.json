{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bebb0175382ac22d42afd4d919a0ab09", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9822c85684ae477f4432b462fd5f43b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "f4bb8ef7d86d4b06d34d232ac624ae216be4183a", "commitAfterChange": "358e077459326bfde3a675b949aa20349d21bc3d", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 106, "signatureBeforeChange": "  void onTextVerify(Event event)", "signatureAfterChange": "  private String keyToString (int key)", "diff": ["-void onTextVerify(Event event) {", "-\tif (ignoreVerify) return;", "-\tevent.doit = false;", "-\tString newText = event.text;", "-\t\tString[] ampm = formatSymbols.getAmPmStrings();", "-\t\tif (newText.equalsIgnoreCase(ampm[Calendar.AM].substring(0, 1)) || newText.equalsIgnoreCase(ampm[Calendar.AM])) {", "-\t\t\tsetTextField(fieldName, Calendar.AM, true, false);", "-\t\t} else if (newText.equalsIgnoreCase(ampm[Calendar.PM].substring(0, 1)) || newText.equalsIgnoreCase(ampm[Calendar.PM])) {", "-\t\t\tsetTextField(fieldName, Calendar.PM, true, false);", "-\t\treturn;", "-\t\t\tInteger.parseInt(newText);", "-\t\t\treturn;", "-\t\tString value = text.getText(start, end - 1);", "-\t\tint s = value.lastIndexOf(' ');", "-\t\tif (s != -1) value = value.substring(s + 1);", "-\tint newTextLength = newText.length();", "-\tint max = calendar.getActualMaximum(fieldName);", "-\tint min = calendar.getActualMinimum(fieldName);", "-\tint newValue = unformattedIntValue(fieldName, newText, characterCount == 0, max);", "-\t\treturn;", "-\t\tsetTextField(fieldName, newValue, false, false);", "-\t\tsetTextField(fieldName, newValue, characterCount == 0, characterCount == 0);", "-\t\t\tnewText = newText.substring(newTextLength - length + 1);", "-\t\t\tnewValue = unformattedIntValue(fieldName, newText, characterCount == 0, max);", "-\t\t\t\t\tsetTextField(fieldName, newValue, characterCount == 0, true);", "+private String keyToString (int key) {", "+\t//If numberpad keys were pressed.", "+\tif (key >= OS.GDK_KP_0 && key <= OS.GDK_KP_9) {", "+\t\t //convert numberpad button to regular key;", "+\t\tkey -= 65408;", "+\t}", "+\tchar keyChar = (char) key;", "+\treturn \"\"+ keyChar;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4417c2af0fd157d61adb64494740454", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "942550e839861bd174b4700244a01daf806cc563", "commitAfterChange": "4ba9417e6db22a8726937adb28ec831a0cdfc1eb", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 154, "signatureBeforeChange": "  static int applicationDelegateProc(int id, int sel, int arg0)", "signatureAfterChange": "  static int applicationProc(int id, int sel, int arg0)", "diff": ["+static int /*long*/ applicationProc(int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "-", "-static int /*long*/ applicationDelegateProc(int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "-\t//TODO optimize getting the display", "-\tDisplay display = getCurrent ();", "-\tif (display == null) return 0;", "-\tid applicationDelegate = display.applicationDelegate;", "-\tif (sel == OS.sel_applicationWillFinishLaunching_) {", "-\t\tboolean loaded = false;", "-\t\tNSBundle bundle = NSBundle.bundleWithIdentifier(NSString.stringWith(\"com.apple.JavaVM\"));", "-\t\tNSDictionary dict = NSDictionary.dictionaryWithObject(applicationDelegate, NSString.stringWith(\"NSOwner\"));", "-\t\tNSString path = bundle.pathForResource(NSString.stringWith(\"DefaultApp\"), NSString.stringWith(\"nib\"));", "-\t\tif (!loaded) loaded = path != null && NSBundle.loadNibFile(path, dict, 0);", "-\t\tif (!loaded) {", "-\t\t\tNSString resourcePath = bundle.resourcePath();", "-\t\t\tpath = resourcePath != null ? resourcePath.stringByAppendingString(NSString.stringWith(\"/English.lproj/DefaultApp.nib\")) : null;", "-\t\t\tloaded = path != null && NSBundle.loadNibFile(path, dict, 0);", "-\t\t}", "-\t\tif (!loaded) {", "-\t\t\tpath = NSString.stringWith(System.getProperty(\"java.home\") + \"/../Resources/English.lproj/DefaultApp.nib\");", "-\t\t\tloaded = path != null && NSBundle.loadNibFile(path, dict, 0);", "-\t\t}", "-\t\tif (!loaded) {", "-\t\t\tdisplay.createMainMenu();", "-\t\t\treturn 0;", "-\t\t}", "-\t\t//replace %@ with application name", "-\t\tNSMenu mainmenu = application.mainMenu();", "-\t\tNSMenuItem appitem = mainmenu.itemAtIndex(0);", "-\t\tif (appitem != null) {", "-\t\t\tNSString name = getAppName();", "-\t\t\tNSString match = NSString.stringWith(\"%@\");", "-\t\t\tappitem.setTitle(name);", "-\t\t\tNSMenu sm = appitem.submenu();", "-\t\t\tNSArray ia = sm.itemArray();", "-\t\t\tfor(int i = 0; i < ia.count(); i++) {", "-\t\t\t\tNSMenuItem ni = new NSMenuItem(ia.objectAtIndex(i));", "-\t\t\t\tNSString title = ni.title().stringByReplacingOccurrencesOfString(match, name);", "-\t\t\t\tni.setTitle(title);", "-\t\t\t}", "-", "-\t\t\tint /*long*/ quitIndex = sm.indexOfItemWithTarget(applicationDelegate, OS.sel_terminate_);", "-\t\t\t", "-\t\t\tif (quitIndex != -1) {", "-\t\t\t\tNSMenuItem quitItem = sm.itemAtIndex(quitIndex);", "-\t\t\t\tquitItem.setAction(OS.sel_quitRequested_);", "-\t\t\t}", "-\t\t}", "+\tif (sel == OS.sel_sendEvent_) {", "+\t\tdisplay.applicationSendEvent (id, sel, arg0);", "+\t} else if (sel == OS.sel_applicationWillFinishLaunching_) {", "+\t\tdisplay.applicationWillFinishLaunching(id, sel, arg0);", "-\t\tControl control = display.getFocusControl();", "-\t\tif (control != null && !control.isDisposed()) {", "-\t\t\tdisplay.focusControl = control;", "-\t\t\tcontrol.sendFocusEvent(SWT.FocusIn, false);", "-\t\t}", "-\t\tdisplay.checkEnterExit(display.findControl(true), null, false);", "+\t\tdisplay.applicationDidBecomeActive(id, sel, arg0);", "-\t\tControl control = display.focusControl;", "-\t\tif (control != null && !control.isDisposed()) {", "-\t\t\tdisplay.focusControl = null;", "-\t\t\tcontrol.sendFocusEvent(SWT.FocusOut, false);", "-\t\t}", "-\t\tdisplay.checkEnterExit(null, null, false);", "+\t\tdisplay.applicationDidResignActive(id, sel, arg0);", "- \treturn 0;", "+\treturn 0;", "+}"]}], "num": 27718}
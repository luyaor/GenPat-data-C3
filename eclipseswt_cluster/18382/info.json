{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c48463d48c376d9560adbb1512d9c61", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fc589db8619e42430a0cfebf6e377b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "57e16b7b99eba5fe2e5104d125c685fb86330106", "commitAfterChange": "4100ba4ad00fb39125bdfc1a813e812b72175b67", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r void releaseDisplay ()", "signatureAfterChange": "\r void releaseDisplay ()", "diff": ["-\tif (buttonFont != 0) OS.XmFontListFree (buttonFont);\r", "-\tif (labelFont != 0) OS.XmFontListFree (labelFont);\r", "-\tif (textFont != 0) OS.XmFontListFree (textFont);\r", "-\tif (listFont != 0) OS.XmFontListFree (listFont);\r", "-\tlistFont = textFont = labelFont = buttonFont = 0;\r", "-\tdefaultFontList = defaultFont = 0;\r", "+\tif (buttonFont != null) {\r", "+\t\tOS.XmFontListFree (buttonFont.handle);\r", "+\t\tbuttonFont.handle = 0;\r", "+\t}\r", "+\tif (labelFont != null) {\r", "+\t\tOS.XmFontListFree (labelFont.handle);\r", "+\t\tlabelFont.handle = 0;\r", "+\t}\r", "+\tif (textFont != null) {\r", "+\t\tOS.XmFontListFree (textFont.handle);\r", "+\t\ttextFont.handle = 0;\r", "+\t}\r", "+\tif (listFont != null) {\r", "+\t\tOS.XmFontListFree (listFont.handle);\r", "+\t\tlistFont.handle = 0;\r", "+\t}\r", "+\tlistFont = textFont = labelFont = buttonFont = null;\r", "+\tdefaultFont = null;\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49718faba54b4e46746eacc3e13842e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolderLayout.java", "commitBeforeChange": "f72c857e9c5ef7f08cd69b3c2eb92b3aafb02d91", "commitAfterChange": "444917b413ab57ed5d6b6ade8c5b5c63d6e5c5c4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)", "signatureAfterChange": " protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)", "diff": ["-\t\t\ttabW = Math.max(tabW, renderer.computeSize(i, SWT.SELECTED, gc).x);", "+\t\t\ttabW = Math.max(tabW, renderer.computeSize(i, SWT.SELECTED, gc, SWT.DEFAULT, SWT.DEFAULT).x);", "-\t\t\ttabW += renderer.computeSize(i, state, gc).x;", "+\t\t\ttabW += renderer.computeSize(i, state, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\tif (folder.showMax) tabW += renderer.computeSize(CTabFolderRenderer.PART_MAX_BUTTON, SWT.NONE, gc).x;", "-\tif (folder.showMin) tabW += renderer.computeSize(CTabFolderRenderer.PART_MIN_BUTTON, SWT.NONE, gc).x;", "-\tif (folder.single) tabW += renderer.computeSize(CTabFolderRenderer.PART_CHEVRON_BUTTON, SWT.NONE, gc).x;", "+\tif (folder.showMax) tabW += renderer.computeSize(CTabFolderRenderer.PART_MAX_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "+\tif (folder.showMin) tabW += renderer.computeSize(CTabFolderRenderer.PART_MIN_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "+\tif (folder.single) tabW += renderer.computeSize(CTabFolderRenderer.PART_CHEVRON_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6618eeba9a69dd373d1464c689e35d9e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Control.java", "commitBeforeChange": "f8fac65ce95a55deac635bc30938e847ad93eba0", "commitAfterChange": "cdbe5456e3afafef3a4445c1ddb3c0cfe08c3c3a", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " @Test public void test_setBackgroundLorg_eclipse_swt_graphics_Color()", "signatureAfterChange": " @Test public void test_setBackgroundLorg_eclipse_swt_graphics_Color()", "diff": ["+\t// Skipping test run for GTK, already failing on GTK3. May be related to bug 421836", "+\tif (!\"gtk\".equals(SWT.getPlatform ())) {", "+\t\t// With alpha zero", "+\t\tcolor = new Color(control.getDisplay(), 255, 0, 0, 0);", "+\t\tcontrol.setBackground(color);", "+\t\tassertEquals(\"getBackground not equal color after setBackground(color) with 0 alpha\", color, control.getBackground());", "+\t\tcontrol.setBackground(null);", "+\t\tassertTrue(\"getBackground unchanged after setBackground(null)\", !control.getBackground().equals(color));", "+\t\tcolor.dispose();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2734f68f8d95b17760150d5136ee23dd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "52c70666c67573818da17f34fd1a3b38e8311391", "commitAfterChange": "c29e3da1101443f614033b985065b638c34419f3", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "  public boolean execute (String script)", "signatureAfterChange": "  public boolean execute (String script)", "diff": ["-\tif (IsPre_17) //TODO: temporarily disable execute() code for xulr17", "+\t//if (IsPre_17) //TODO: temporarily disable execute() code for xulr17", "-\t\t\t\t\trc = (int/*64*/)XPCOM.nsIScriptGlobalObject_EnsureScriptEnvironment (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "+\t\t\t\t\tif (IsPre_17) {", "+\t\t\t\t\t\trc = (int/*64*/)XPCOM.nsIScriptGlobalObject_EnsureScriptEnvironment (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\trc = (int/*64*/)XPCOM.nsIScriptGlobalObject17_EnsureScriptEnvironment (scriptGlobalObject);", "+\t\t\t\t\t}", "-\t\t\t\t\t\tlong /*int*/ scriptContext = XPCOM.nsIScriptGlobalObject_GetScriptContext (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "+\t\t\t\t\t\tlong /*int*/ scriptContext;", "+\t\t\t\t\t\tif (IsPre_17) {", "+\t\t\t\t\t\t\tscriptContext = XPCOM.nsIScriptGlobalObject_GetScriptContext (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscriptContext = XPCOM.nsIScriptGlobalObject17_GetScriptContext (scriptGlobalObject);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tlong /*int*/ nativeContext = XPCOM.nsIScriptContext_GetNativeContext (scriptContext);", "+\t\t\t\t\t\t\t\tlong /*int*/ nativeContext;", "+\t\t\t\t\t\t\t\tif (IsPre_17) {", "+\t\t\t\t\t\t\t\t\tnativeContext = XPCOM.nsIScriptContext_GetNativeContext (scriptContext);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tnativeContext = XPCOM.nsIScriptContext17_GetNativeContext (scriptContext);", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ede4855574e41c9fa6007b03f00329c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "7867f4333df3401f2d9ceb7dab2dbc0c4b8c2343", "commitAfterChange": "d2e5dcd7efd5667e08cacd2f0a4973952e5a602f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\thandle = OS.gtk_plug_new (0);", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\timageHandle = OS.gtk_image_new ();", "-\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tOS.gtk_container_add (handle, imageHandle);", "-\tOS.gtk_widget_show (handle);", "-\tOS.gtk_widget_show (imageHandle);", "-\tint /*long*/ id = OS.gtk_plug_get_id (handle);", "-\tint monitor = 0;", "-\tint /*long*/ screen = OS.gdk_screen_get_default ();", "-\tif (screen != 0) {", "-\t\tmonitor = OS.gdk_screen_get_number (screen);", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {", "+\t\thandle = OS.gtk_status_icon_new ();", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\timageHandle = OS.gtk_image_new ();", "+\t\tOS.gtk_status_icon_set_visible (handle,true);", "+\t} else {", "+\t\thandle = OS.gtk_plug_new (0);", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\timageHandle = OS.gtk_image_new ();", "+\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.gtk_container_add (handle, imageHandle);", "+\t\tOS.gtk_widget_show (handle);", "+\t\tOS.gtk_widget_show (imageHandle);", "+\t\tint /*long*/ id = OS.gtk_plug_get_id (handle);", "+\t\tint monitor = 0;", "+\t\tint /*long*/ screen = OS.gdk_screen_get_default ();", "+\t\tif (screen != 0) {", "+\t\t\tmonitor = OS.gdk_screen_get_number (screen);", "+\t\t}", "+\t\tbyte [] trayBuffer = Converter.wcsToMbcs (null, \"_NET_SYSTEM_TRAY_S\" + monitor, true);", "+\t\tint /*long*/ trayAtom = OS.gdk_atom_intern (trayBuffer, true);", "+\t\tint /*long*/ xTrayAtom = OS.gdk_x11_atom_to_xatom (trayAtom);", "+\t\tint /*long*/ xDisplay = OS.GDK_DISPLAY ();", "+\t\tint /*long*/ trayWindow = OS.XGetSelectionOwner (xDisplay, xTrayAtom);", "+\t\tbyte [] messageBuffer = Converter.wcsToMbcs (null, \"_NET_SYSTEM_TRAY_OPCODE\", true);", "+\t\tint /*long*/ messageAtom = OS.gdk_atom_intern (messageBuffer, true);", "+\t\tint /*long*/ xMessageAtom = OS.gdk_x11_atom_to_xatom (messageAtom);", "+\t\tXClientMessageEvent event = new XClientMessageEvent ();", "+\t\tevent.type = OS.ClientMessage;", "+\t\tevent.window = trayWindow;", "+\t\tevent.message_type = xMessageAtom;", "+\t\tevent.format = 32;", "+\t\tevent.data [0] = OS.GDK_CURRENT_TIME;", "+\t\tevent.data [1] = OS.SYSTEM_TRAY_REQUEST_DOCK;", "+\t\tevent.data [2] = id;", "+\t\tint /*long*/ clientEvent = OS.g_malloc (XClientMessageEvent.sizeof);", "+\t\tOS.memmove (clientEvent, event, XClientMessageEvent.sizeof);", "+\t\tOS.XSendEvent (xDisplay, trayWindow, false, OS.NoEventMask, clientEvent);", "+\t\tOS.g_free (clientEvent);", "-\tbyte [] trayBuffer = Converter.wcsToMbcs (null, \"_NET_SYSTEM_TRAY_S\" + monitor, true);", "-\tint /*long*/ trayAtom = OS.gdk_atom_intern (trayBuffer, true);", "-\tint /*long*/ xTrayAtom = OS.gdk_x11_atom_to_xatom (trayAtom);", "-\tint /*long*/ xDisplay = OS.GDK_DISPLAY ();", "-\tint /*long*/ trayWindow = OS.XGetSelectionOwner (xDisplay, xTrayAtom);", "-\tbyte [] messageBuffer = Converter.wcsToMbcs (null, \"_NET_SYSTEM_TRAY_OPCODE\", true);", "-\tint /*long*/ messageAtom = OS.gdk_atom_intern (messageBuffer, true);", "-\tint /*long*/ xMessageAtom = OS.gdk_x11_atom_to_xatom (messageAtom);", "-\tXClientMessageEvent event = new XClientMessageEvent ();", "-\tevent.type = OS.ClientMessage;", "-\tevent.window = trayWindow;", "-\tevent.message_type = xMessageAtom;", "-\tevent.format = 32;", "-\tevent.data [0] = OS.GDK_CURRENT_TIME;", "-\tevent.data [1] = OS.SYSTEM_TRAY_REQUEST_DOCK;", "-\tevent.data [2] = id;", "-\tint /*long*/ clientEvent = OS.g_malloc (XClientMessageEvent.sizeof);", "-\tOS.memmove (clientEvent, event, XClientMessageEvent.sizeof);", "-\tOS.XSendEvent (xDisplay, trayWindow, false, OS.NoEventMask, clientEvent);", "-\tOS.g_free (clientEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "595b0e1c6d0c1cb96c9af1f312cfc6ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TrayIcon.java", "commitBeforeChange": "0f133dc5102fb9c2d0d7834ee2a4677173fa6b77", "commitAfterChange": "c0ac2a19d4040abb2bd70a20787ca1327ff0a2b0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void setVisible (boolean visible)", "signatureAfterChange": " public void setVisible (boolean visible)", "diff": ["-\ticonData.uFlags = OS.NIF_STATE;", "-\ticonData.dwState = visible ? 0 : OS.NIS_HIDDEN;", "-\ticonData.dwStateMask = OS.NIS_HIDDEN;", "-\tOS.Shell_NotifyIcon (OS.NIM_MODIFY, iconData);", "+\tif (OS.SHELL32_MAJOR < 5) {", "+\t\tif (visible) {", "+\t\t\ticonData.uFlags = OS.NIF_MESSAGE;", "+\t\t\ticonData.uCallbackMessage = Display.SWT_TRAYICONMSG;", "+\t\t\tOS.Shell_NotifyIcon (OS.NIM_ADD, iconData);", "+\t\t\tsetImage (image);", "+\t\t\tsetToolTipText (toolTipText);", "+\t\t} else {", "+\t\t\tOS.Shell_NotifyIcon (OS.NIM_DELETE, iconData);", "+\t\t}", "+\t} else {", "+\t\ticonData.uFlags = OS.NIF_STATE;", "+\t\ticonData.dwState = visible ? 0 : OS.NIS_HIDDEN;", "+\t\ticonData.dwStateMask = OS.NIS_HIDDEN;", "+\t\tOS.Shell_NotifyIcon (OS.NIM_MODIFY, iconData);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "308be4c43193d3ce2615e7a1d874d09c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "2a6e0c9b702b0b502452265cc844e28c66b4245c", "commitAfterChange": "9500727710c9626dc536a0475cdc8a8842b13b33", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Object getContents(Transfer transfer, int clipboards)", "signatureAfterChange": " public Object getContents(Transfer transfer, int clipboards)", "diff": ["-\tGtkSelectionData gtkSelectionData = new GtkSelectionData();", "-\tOS.memmove(gtkSelectionData, selection_data, GtkSelectionData.sizeof);", "-\ttdata.type = gtkSelectionData.type;", "-\ttdata.pValue = gtkSelectionData.data;", "-\ttdata.length = gtkSelectionData.length;", "-\ttdata.format = gtkSelectionData.format;", "+\tif (OS.GTK_VERSION >= OS.VERSION(2, 14, 0)) {", "+\t\ttdata.type = OS.gtk_selection_data_get_data_type(selection_data);", "+\t\ttdata.pValue = OS.gtk_selection_data_get_data(selection_data);", "+\t\ttdata.length = OS.gtk_selection_data_get_length(selection_data);", "+\t\ttdata.format = OS.gtk_selection_data_get_format(selection_data);", "+\t} else {", "+\t\tGtkSelectionData gtkSelectionData = new GtkSelectionData();", "+\t\tOS.memmove(gtkSelectionData, selection_data, GtkSelectionData.sizeof);", "+\t\ttdata.type = gtkSelectionData.type;", "+\t\ttdata.pValue = gtkSelectionData.data;", "+\t\ttdata.length = gtkSelectionData.length;", "+\t\ttdata.format = gtkSelectionData.format;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "964af3384f60841252abc2faf1a0db12", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "d62ca75a93db110199fc4bd6eaf1279a676d827b", "commitAfterChange": "2f67efb12116378f6c4fe455aa16cedec07ec5d6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  ScrollBar createScrollBar (int style)", "signatureAfterChange": "  ScrollBar createScrollBar (int style)", "diff": ["-\t\tbar.handle = OS.GTK_SCROLLED_WINDOW_HSCROLLBAR (scrolledHandle);", "+\t\tif (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {", "+\t\t\tbar.handle = OS.GTK_SCROLLED_WINDOW_HSCROLLBAR (scrolledHandle);", "+\t\t} else {", "+\t\t\tbar.handle = OS.gtk_scrolled_window_get_hscrollbar (scrolledHandle);", "+\t\t}", "-\t\tbar.handle = OS.GTK_SCROLLED_WINDOW_VSCROLLBAR (scrolledHandle);", "+\t\tif (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {", "+\t\t\tbar.handle = OS.GTK_SCROLLED_WINDOW_VSCROLLBAR (scrolledHandle);", "+\t\t} else {", "+\t\t\tbar.handle = OS.gtk_scrolled_window_get_vscrollbar (scrolledHandle);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f373a451900e81202d542721377b39fc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 33, "signatureBeforeChange": " public Point getSelection ()", "signatureAfterChange": " public Point getSelection ()", "diff": ["-\tint [] oStartOffset = new int [1], oEndOffset = new int [1];", "-\tOS.TXNGetSelection (txnObject, oStartOffset, oEndOffset);", "-\treturn new Point (oStartOffset [0], oEndOffset [0]);", "+\tif (txnObject == 0) {", "+\t\tControlEditTextSelectionRec selection;", "+\t\tif (this.selection != null) {", "+\t\t\tselection = this.selection;", "+\t\t} else {", "+\t\t\tselection = new ControlEditTextSelectionRec ();", "+\t\t\tOS.GetControlData (handle, (short) OS.kControlEntireControl, OS.kControlEditTextSelectionTag, 4, selection, null);", "+\t\t}", "+\t\treturn new Point (selection.selStart, selection.selEnd);", "+\t} else {", "+\t\tint [] oStartOffset = new int [1], oEndOffset = new int [1];", "+\t\tOS.TXNGetSelection (txnObject, oStartOffset, oEndOffset);", "+\t\treturn new Point (oStartOffset [0], oEndOffset [0]);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "533e3852b701dd17f485714d054a6bd4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "d8955edbe9f5c9464b222d0331748137a5a534b7", "commitAfterChange": "b533c1ac7667bcd66286ef15cde6bafc62a4cf97", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": "  void initFactories (nsIServiceManager serviceManager, nsIComponentManager componentManager, boolean isXULRunner)", "signatureAfterChange": "  void initFactories (nsIServiceManager serviceManager, nsIComponentManager componentManager, boolean isXULRunner)", "diff": ["-\tint rc = componentManager.QueryInterface (nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result);", "+\tint rc = componentManager.QueryInterface (IIDStore.GetIID (nsIComponentRegistrar.class), result);", "-\tif (IsPre_24) {", "+\tif (!MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24)) {", "-\tif (!IsPre_4) {", "+\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR10)) { /* > 10.x */", "-\trc = serviceManager.GetService (XPCOM.NS_CATEGORYMANAGER_CID, nsICategoryManager.NS_ICATEGORYMANAGER_IID, result);", "+\trc = serviceManager.GetService (XPCOM.NS_CATEGORYMANAGER_CID, IIDStore.GetIID (nsICategoryManager.class), result);", "-\t/*", "-\t* This Download factory will be used if the GRE version is < 1.8.", "-\t* If the GRE version is 1.8.x then the Download factory that is registered later for", "-\t*   contract \"Transfer\" will be used.", "-\t* If the GRE version is >= 1.9 then no Download factory is registered because this", "-\t*   functionality is provided by the GRE.", "-\t*/", "-\tif (IsPre_4) {", "+\tif (!MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR10)) { /* 1.4.x - 3.6.x */", "-\tif (!nsISupports.IsXULRunner24) {", "+\tif (!MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24)) { /* 1.4.x - 10.x */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88016d5bfe7cf367a9a143203723b91c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OpenGL/gtk/org/eclipse/swt/opengl/GLCanvas.java", "commitBeforeChange": "2c810dc09ebe584d949d1446e7fe61dd64fa3e80", "commitAfterChange": "31b7a613958123368d896ee9b0a636412f2a598b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public GLCanvas (Composite parent, int style, GLData data)", "signatureAfterChange": " public GLCanvas (Composite parent, int style, GLData data)", "diff": ["-\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);", "+\tint /*long*/ window;", "+\tif (OS.GTK_VERSION >= OS.VERSION(2, 14, 0)){", "+\t\twindow = OS.gtk_widget_get_window (handle);", "+\t} else {", "+\t\twindow = OS.GTK_WIDGET_WINDOW (handle);", "+\t}", "-\t\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);", "+\t\t\t\tint /*long*/ window;", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(2, 14, 0)){", "+\t\t\t\t\twindow = OS.gtk_widget_get_window (handle);", "+\t\t\t\t} else {", "+\t\t\t\t\twindow = OS.GTK_WIDGET_WINDOW (handle);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "065a71961bfd8a03cdf4a9b9930b4649", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "ad7a9e5b3b139f6b5bd4c2f25f8cf8b336105a91", "commitAfterChange": "52d678e47ee00e0c9d7473cd6841b89c8499131e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void hookEvents ()", "signatureAfterChange": "  void hookEvents ()", "diff": ["-\t//TODO - fix multiple enter/exit", "-\tOS.g_signal_connect_closure (entryHandle, OS.changed, display.closures [CHANGED], true);", "-\tOS.g_signal_connect_closure (entryHandle, OS.insert_text, display.closures [INSERT_TEXT], false);", "-\tOS.g_signal_connect_closure (entryHandle, OS.delete_text, display.closures [DELETE_TEXT], false);", "-\tOS.g_signal_connect_closure (entryHandle, OS.activate, display.closures [ACTIVATE], false);", "+\tif (OS.GTK_VERSION >= OS.VERSION(2, 4, 0)) {", "+\t\tOS.g_signal_connect_closure (handle, OS.changed, display.closures [CHANGED], true);", "+\t}", "+\t//TODO - fix multiple enter/exit", "+\tif (entryHandle != 0) {", "+\t\tOS.g_signal_connect_closure (entryHandle, OS.changed, display.closures [CHANGED], true);", "+\t\tOS.g_signal_connect_closure (entryHandle, OS.insert_text, display.closures [INSERT_TEXT], false);", "+\t\tOS.g_signal_connect_closure (entryHandle, OS.delete_text, display.closures [DELETE_TEXT], false);", "+\t\tOS.g_signal_connect_closure (entryHandle, OS.activate, display.closures [ACTIVATE], false);", "+\t}", "-\tint /*long*/ [] handles = new int /*long*/ [] {arrowHandle, entryHandle, listHandle};", "+\tint /*long*/ [] handles;", "+\tif (OS.GTK_VERSION >= OS.VERSION(2, 4, 0)) {", "+\t\tif (entryHandle != 0) {", "+\t\t\thandles = new int /*long*/ [] {entryHandle};", "+\t\t} else {", "+\t\t\thandles = new int /*long*/ [0];", "+\t\t}", "+\t} else {", "+\t\thandles = new int /*long*/ [] {arrowHandle, entryHandle, listHandle};", "+\t}", "-\t}\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5086d0b7ec26ac69186b4e9176f7d199", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "cc81619f9bb3266b4ad015825272dce98bc98771", "commitAfterChange": "03fdc4ce598a854ad5aca71d689e6a6135d4397b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " String computeResultChooserDialog ()", "signatureAfterChange": " String computeResultChooserDialog ()", "diff": ["-\t\tint /*long*/ list = OS.gtk_file_chooser_get_filenames (handle);", "+\t\tint /*long*/ list = 0;", "+\t\tif (uriMode) {", "+\t\t\tlist = OS.gtk_file_chooser_get_uris (handle);", "+\t\t} else {", "+\t\t\tlist = OS.gtk_file_chooser_get_filenames (handle);", "+\t\t}", "-\t\t\tint /*long*/ utf8Ptr = OS.g_filename_to_utf8 (name, -1, null, null, null);", "-\t\t\tOS.g_free (name);", "+\t\t\tint /*long*/ utf8Ptr = 0;", "+\t\t\tif (uriMode) {", "+\t\t\t\tutf8Ptr = name;", "+\t\t\t} else {", "+\t\t\t\tutf8Ptr = OS.g_filename_to_utf8 (name, -1, null, null, null);", "+\t\t\t\tOS.g_free (name);", "+\t\t\t}", "-\t\tint /*long*/ path = OS.gtk_file_chooser_get_filename (handle);", "-\t\tif (path != 0) {", "-\t\t\tint /*long*/ utf8Ptr = OS.g_filename_to_utf8 (path, -1, null, null, null);", "-\t\t\tOS.g_free (path);", "-\t\t\tif (utf8Ptr != 0) {", "-\t\t\t\tint /*long*/ [] items_written = new int /*long*/ [1];", "-\t\t\t\tint /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "-\t\t\t\tOS.g_free (utf8Ptr);", "-\t\t\t\tif (utf16Ptr != 0) {", "-\t\t\t\t\tint clength = (int)/*64*/items_written [0];", "-\t\t\t\t\tchar [] chars = new char [clength];", "-\t\t\t\t\tOS.memmove (chars, utf16Ptr, clength * 2);", "-\t\t\t\t\tOS.g_free (utf16Ptr);", "-\t\t\t\t\tfullPath = new String (chars);", "-\t\t\t\t\tfileNames = new String [1];", "-\t\t\t\t\tfileNames[0] = fullPath.substring (fullPath.lastIndexOf (SEPARATOR) + 1);", "-\t\t\t\t}", "+\t\tint /*long*/ utf8Ptr = 0;", "+\t\tif (uriMode) {", "+\t\t\tutf8Ptr = OS.gtk_file_chooser_get_uri (handle);", "+\t\t} else {", "+\t\t\tint /*long*/ path = OS.gtk_file_chooser_get_filename (handle);", "+\t\t\tif (path != 0) {", "+\t\t\t\tutf8Ptr = OS.g_filename_to_utf8 (path, -1, null, null, null);", "+\t\t\t\tOS.g_free (path);", "+\t\t\t}", "+\t\t}", "+\t\tif (utf8Ptr != 0) {", "+\t\t\tint /*long*/ [] items_written = new int /*long*/ [1];", "+\t\t\tint /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "+\t\t\tOS.g_free (utf8Ptr);", "+\t\t\tif (utf16Ptr != 0) {", "+\t\t\t\tint clength = (int)/*64*/items_written [0];", "+\t\t\t\tchar [] chars = new char [clength];", "+\t\t\t\tOS.memmove (chars, utf16Ptr, clength * 2);", "+\t\t\t\tOS.g_free (utf16Ptr);", "+\t\t\t\tfullPath = new String (chars);", "+\t\t\t\tfileNames = new String [1];", "+\t\t\t\tfileNames[0] = fullPath.substring (fullPath.lastIndexOf (SEPARATOR) + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e78955af41d84725c29e6bb2787d926", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "ad7a9e5b3b139f6b5bd4c2f25f8cf8b336105a91", "commitAfterChange": "52d678e47ee00e0c9d7473cd6841b89c8499131e", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " public String getText ()", "signatureAfterChange": " public String getText ()", "diff": ["-\tint /*long*/ address = OS.gtk_entry_get_text (entryHandle);", "-\tint length = OS.strlen (address);", "+\tint /*long*/ str = 0;", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\tstr = OS.gtk_combo_box_get_active_text (handle);", "+\t\tif (str == 0) return \"\";", "+\t} else {", "+\t\tstr = OS.gtk_entry_get_text (entryHandle);", "+\t}", "+\tint length = OS.strlen (str);", "-\tOS.memmove (buffer, address, length);", "+\tOS.memmove (buffer, str, length);", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) OS.g_free (str);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "955152877a51668d68dc80c009e2b5ac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "dcb5b6438c44256a7129a57371b071347a181363", "commitAfterChange": "b143d7b976c65e3f6942581f889b75845a4e7417", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " static void initImages (final Display display)", "signatureAfterChange": " static void initImages (final Display display)", "diff": ["-\tif (display.getData (ID_CHECKMARK) != null) return;", "-\t", "-\t\tnew RGB (0, 0, 255), new RGB (255, 0, 255), new RGB (0, 255, 255), new RGB (255, 255, 255)});\t", "-\tImageData collapsed = new ImageData (", "-\t\t9, 9, 4, \t\t\t\t\t\t\t\t\t\t/* width, height, depth */", "-\t\tfourBit, 4,", "-\t\tnew byte[] {", "-\t\t\t119, 119, 119, 119, 112, 0, 0, 0, 127, -1, -1, -1,", "-\t\t\t112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0,", "-\t\t\t127, -1, 15, -1, 112, 0, 0, 0, 127, 0, 0, 15,", "-\t\t\t112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0,", "-\t\t\t127, -1, 15, -1, 112, 0, 0, 0, 127, -1, -1, -1,", "-\t\t\t112, 0, 0, 0, 119, 119, 119, 119, 112, 0, 0, 0});", "-\tcollapsed.transparentPixel = 15;\t\t\t/* white for transparency */", "-\tImageData expanded = new ImageData (", "-\t\t9, 9, 4, \t\t\t\t\t\t\t\t\t\t/* width, height, depth */", "-\t\tfourBit, 4,", "-\t\tnew byte[] {", "-\t\t\t119, 119, 119, 119, 112, 0, 0, 0, 127, -1, -1, -1,", "-\t\t\t112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0,", "-\t\t\t127, -1, -1, -1, 112, 0, 0, 0, 127, 0, 0, 15,", "-\t\t\t112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0,", "-\t\t\t127, -1, -1, -1, 112, 0, 0, 0, 127, -1, -1, -1,", "-\t\t\t112, 0, 0, 0, 119, 119, 119, 119, 112, 0, 0, 0});", "-\texpanded.transparentPixel = 15;\t\t\t/* use white for transparency */", "-\t\t", "-\tPaletteData uncheckedPalette = new PaletteData (\t", "-\t\tnew RGB[] {new RGB (128, 128, 128), new RGB (255, 255, 255)});", "-\tPaletteData grayUncheckedPalette = new PaletteData (\t", "-\t\tnew RGB[] {new RGB (128, 128, 128), new RGB (192, 192, 192)});", "+\t\tnew RGB (0, 0, 255), new RGB (255, 0, 255), new RGB (0, 255, 255), new RGB (255, 255, 255)});", "+", "+\tif (display.getData (ID_EXPANDED) == null) {", "+\t\tImageData expanded = new ImageData (", "+\t\t\t9, 9, 4, \t\t\t\t\t\t\t\t\t\t/* width, height, depth */", "+\t\t\tfourBit, 4,", "+\t\t\tnew byte[] {", "+\t\t\t\t119, 119, 119, 119, 112, 0, 0, 0, 127, -1, -1, -1,", "+\t\t\t\t112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0,", "+\t\t\t\t127, -1, -1, -1, 112, 0, 0, 0, 127, 0, 0, 15,", "+\t\t\t\t112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0,", "+\t\t\t\t127, -1, -1, -1, 112, 0, 0, 0, 127, -1, -1, -1,", "+\t\t\t\t112, 0, 0, 0, 119, 119, 119, 119, 112, 0, 0, 0});", "+\t\texpanded.transparentPixel = 15;\t\t\t/* use white for transparency */", "+\t\tdisplay.setData (ID_EXPANDED, new Image (display, expanded));", "+\t}", "+", "+\tif (display.getData (ID_COLLAPSED) == null) {", "+\t\tImageData collapsed = new ImageData (", "+\t\t\t9, 9, 4, \t\t\t\t\t\t\t\t\t\t/* width, height, depth */", "+\t\t\tfourBit, 4,", "+\t\t\tnew byte[] {", "+\t\t\t\t119, 119, 119, 119, 112, 0, 0, 0, 127, -1, -1, -1,", "+\t\t\t\t112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0,", "+\t\t\t\t127, -1, 15, -1, 112, 0, 0, 0, 127, 0, 0, 15,", "+\t\t\t\t112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0,", "+\t\t\t\t127, -1, 15, -1, 112, 0, 0, 0, 127, -1, -1, -1,", "+\t\t\t\t112, 0, 0, 0, 119, 119, 119, 119, 112, 0, 0, 0});", "+\t\tcollapsed.transparentPixel = 15;\t\t/* use white for transparency */", "+\t\tdisplay.setData (ID_COLLAPSED, new Image (display, collapsed));", "+\t}", "+", "-\tImageData unchecked = new ImageData (11, 11, 1, uncheckedPalette, 2, checkbox);", "-\tImageData grayUnchecked = new ImageData (11, 11, 1, grayUncheckedPalette, 2, checkbox);", "-", "-\tdisplay.setData (ID_EXPANDED, new Image (display, expanded));", "-\tdisplay.setData (ID_COLLAPSED, new Image (display, collapsed));", "-\tdisplay.setData (ID_UNCHECKED, new Image (display, unchecked));", "-\tdisplay.setData (ID_GRAYUNCHECKED, new Image (display, grayUnchecked));", "-\tdisplay.setData (ID_CHECKMARK, new Image (display, checkmark));", "-\tdisplay.setData (ID_CONNECTOR_COLOR, new Color (display, 170, 170, 170));", "+\tif (display.getData (ID_CHECKMARK) == null) {", "+\t\tdisplay.setData (ID_CHECKMARK, new Image (display, checkmark));", "+\t}", "+\tif (display.getData (ID_UNCHECKED) == null) {", "+\t\tPaletteData uncheckedPalette = new PaletteData (\t", "+\t\t\tnew RGB[] {new RGB (128, 128, 128), new RGB (255, 255, 255)});", "+\t\tImageData unchecked = new ImageData (11, 11, 1, uncheckedPalette, 2, checkbox);", "+\t\tdisplay.setData (ID_UNCHECKED, new Image (display, unchecked));", "+\t}", "+\t", "+\tif (display.getData (ID_GRAYUNCHECKED) == null) {", "+\t\tPaletteData grayUncheckedPalette = new PaletteData (\t", "+\t\t\tnew RGB[] {new RGB (128, 128, 128), new RGB (192, 192, 192)});", "+\t\tImageData grayUnchecked = new ImageData (11, 11, 1, grayUncheckedPalette, 2, checkbox);", "+\t\tdisplay.setData (ID_GRAYUNCHECKED, new Image (display, grayUnchecked));", "+\t}", "+\t", "+\tif (display.getData (ID_CONNECTOR_COLOR) == null) {", "+\t\tdisplay.setData (ID_CONNECTOR_COLOR, new Color (display, 170, 170, 170));", "+\t}", "+", "+\t\t\tColor connectorColor = (Color) display.getData (ID_CONNECTOR_COLOR);", "+\t\t\tif (connectorColor != null) connectorColor.dispose ();", "-\t\t\tColor connectorColor = (Color) display.getData (ID_CONNECTOR_COLOR);", "-\t\t\tif (connectorColor != null) connectorColor.dispose ();", "+\t\t\tdisplay.setData (ID_CONNECTOR_COLOR, null);", "-\t\t\tdisplay.setData (ID_CONNECTOR_COLOR, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e00b74cf0e4b2a0480e79715eb221df2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/AppFileLocProvider.java", "commitBeforeChange": "3fa10aec500a4081c70ceb9a57998af702891944", "commitAfterChange": "a84c4f3464a5f713e18d5891323717c2051b011d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  int getFile(long prop, long persistent, long _retval)", "signatureAfterChange": "  int getFile(long prop, long persistent, long _retval)", "diff": ["-\t\tpropertyValue = profilePath + COMPONENTS_DIR;", "+\t\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24, false)) {", "+\t\t\tpropertyValue = mozillaPath + COMPONENTS_DIR;", "+\t\t} else {", "+\t\t\tpropertyValue = profilePath + COMPONENTS_DIR;", "+\t\t}", "-\t\tpropertyValue = mozillaPath + COMPONENTS_DIR;", "+\t\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24, false)) {", "+\t\t\tpropertyValue = profilePath + COMPONENTS_DIR;", "+\t\t} else {", "+\t\t\tpropertyValue = mozillaPath + COMPONENTS_DIR;", "+\t\t}", "-\t\tpropertyValue = mozillaPath;", "+\t\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24, false)) {", "+\t\t\tpropertyValue = profilePath;", "+\t\t} else {", "+\t\t\tpropertyValue = mozillaPath;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35e8ece07b4493a5939e6ef4731ad3ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "7867f4333df3401f2d9ceb7dab2dbc0c4b8c2343", "commitAfterChange": "d2e5dcd7efd5667e08cacd2f0a4973952e5a602f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void setImage (Image image)", "signatureAfterChange": " public void setImage (Image image)", "diff": ["-\t\tRectangle rect = image.getBounds ();", "-\t\tOS.gtk_widget_set_size_request (handle, rect.width, rect.height);", "-\t\tOS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);", "-\t\tOS.gtk_widget_show (imageHandle);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {", "+\t\t\tOS.gtk_status_icon_set_from_pixbuf (handle, pixbuf);", "+\t\t\tOS.gtk_status_icon_set_visible (handle, true);", "+\t\t} else {", "+\t\t\tRectangle rect = image.getBounds ();", "+\t\t\tOS.gtk_widget_set_size_request (handle, rect.width, rect.height);", "+\t\t\tOS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);", "+\t\t\tOS.gtk_widget_show (imageHandle);", "+\t\t}", "-\t\tOS.gtk_image_set_from_pixbuf (imageHandle, 0);", "-\t\tOS.gtk_widget_hide (imageHandle);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {", "+\t\t\tOS.gtk_status_icon_set_from_pixbuf (handle, 0);", "+\t\t\tOS.gtk_status_icon_set_visible (handle, false);", "+\t\t} else {", "+\t\t\tOS.gtk_image_set_from_pixbuf (imageHandle, 0);", "+\t\t\tOS.gtk_widget_hide (imageHandle);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f3278d983a32eed19df7d5ac6f547db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "24273594059294790c2b5d83c18e654fc097e404", "commitAfterChange": "fb0ed33d9069b9fd0107f7de2f81037302ea46d7", "methodNumberBeforeChange": 207, "methodNumberAfterChange": 207, "signatureBeforeChange": "\r void handleVerticalScroll(Event event)", "signatureAfterChange": "\r void handleVerticalScroll(Event event)", "diff": ["+\t//TEMPORARY CODE\t\t\r", "+\tif (event.detail == SWT.DRAG && !SWT.getPlatform().equals(\"win32\")) {\t\r", "+\t\tif (updater != null) return;\r", "+\t\tupdater = new Runnable(){\r", "+\t\t\tpublic void run(){\r", "+\t\t\t\tif (isDisposed()) return;\r", "+\t\t\t\tsetVerticalScrollOffset(getVerticalBar().getSelection(), false);\r", "+\t\t\t\tupdater = null;\r", "+\t\t\t}\r", "+\t\t};\t\r", "+\t\tgetDisplay().timerExec(100, updater); \r", "+\t\treturn;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ed0210ea6fa9f9ecf26b97e0b79398f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "9057c390e4e8d2bc9959f1076db1574f33890e7f", "commitAfterChange": "a47682382a191c3122d28ab4678c4b08e8e2c576", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " void onMouse(Event event)", "signatureAfterChange": " void onMouse(Event event)", "diff": ["-\t\t\t\t\tif (item.closeImageState != NORMAL) {", "-\t\t\t\t\t\titem.closeImageState = NORMAL;", "+\t\t\t\t\tif (item.closeImageState != NONE) {", "+\t\t\t\t\t\titem.closeImageState = NONE;", "-\t\t\t\t\t\tif (item.closeImageState != HOT) {", "-\t\t\t\t\t\t\titem.closeImageState = HOT;", "-\t\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\t\tif (item.closeRect.contains(x, y)) {", "+\t\t\t\t\t\t\tif (item.closeImageState != HOT) {", "+\t\t\t\t\t\t\t\titem.closeImageState = HOT;", "+\t\t\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (item.closeImageState != NORMAL) {", "+\t\t\t\t\t\t\t\titem.closeImageState = NORMAL;", "+\t\t\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tif (item.closeImageState == HOT && !close) {", "-\t\t\t\t\t\titem.closeImageState = NORMAL;", "+\t\t\t\t\tif (item.closeImageState != NONE && !close) {", "+\t\t\t\t\t\titem.closeImageState = NONE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57548bcb97f190dff80e8b07be476f3d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "df63744a83b6c4ccafd10c57535b24dd9458ba96", "commitAfterChange": "49d8ee915a6006746596a7d40978b42b50fa61b3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public CCombo (Composite parent, int style)", "signatureAfterChange": " public CCombo (Composite parent, int style)", "diff": ["-\tint [] textEvents = {SWT.DefaultSelection, SWT.KeyDown, SWT.KeyUp, SWT.MenuDetect, SWT.Modify, SWT.MouseDown, SWT.MouseUp, SWT.MouseDoubleClick, SWT.MouseWheel, SWT.Traverse, SWT.FocusIn, SWT.Verify};", "+\tint [] textEvents = {SWT.DefaultSelection, SWT.DragDetect, SWT.KeyDown, SWT.KeyUp, SWT.MenuDetect, SWT.Modify,", "+\t\tSWT.MouseDown, SWT.MouseUp, SWT.MouseDoubleClick, SWT.MouseEnter, SWT.MouseExit, SWT.MouseHover,", "+\t\tSWT.MouseMove, SWT.MouseWheel, SWT.Traverse, SWT.FocusIn, SWT.Verify};", "-\tint [] arrowEvents = {SWT.MouseDown, SWT.MouseUp, SWT.Selection, SWT.FocusIn};", "+\tint [] arrowEvents = {SWT.DragDetect, SWT.MouseDown, SWT.MouseEnter, SWT.MouseExit, SWT.MouseHover,", "+\t\tSWT.MouseMove, SWT.MouseUp, SWT.MouseWheel, SWT.Selection, SWT.FocusIn};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc976ffb540b58210a94d620e914c2e8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "5d6c8208629922fa8cd36b0d3a68c3e57119239e", "commitAfterChange": "a1c542b09812445de8fc8cfbf51c243877c46d09", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r \r void setBounds (int x, int y, int width, int height, int flags)", "signatureAfterChange": "\r \r void setBounds (int x, int y, int width, int height, int flags)", "diff": ["-\tif (!OS.IsWinCE) {\r", "+\tif (OS.IsWinCE) {\r", "+\t\tsuper.setBounds (x, y, width, height, flags);\r", "+\t}\r", "+\tif (OS.IsIconic (handle) || OS.IsZoomed (handle)) {\r", "+\t\tWINDOWPLACEMENT lpwndpl = new WINDOWPLACEMENT ();\r", "+\t\tlpwndpl.length = WINDOWPLACEMENT.sizeof;\r", "+\t\tOS.GetWindowPlacement (handle, lpwndpl);\r", "+\t\tlpwndpl.showCmd = OS.SW_SHOWNA;\r", "-\t\t\tWINDOWPLACEMENT lpwndpl = new WINDOWPLACEMENT ();\r", "-\t\t\tlpwndpl.length = WINDOWPLACEMENT.sizeof;\r", "-\t\t\tOS.GetWindowPlacement (handle, lpwndpl);\r", "-\t\t\tlpwndpl.showCmd = 0;\r", "-\t\t\tif ((flags & OS.SWP_NOMOVE) == 0) {\r", "-\t\t\t\tlpwndpl.left = x;\r", "-\t\t\t\tlpwndpl.top = y;\r", "+\t\t\tlpwndpl.showCmd = OS.SW_SHOWMINNOACTIVE;\r", "+\t\t} else {\r", "+\t\t\tif (OS.IsZoomed (handle)) {\r", "+\t\t\t\tlpwndpl.showCmd = OS.SW_SHOWMAXIMIZED;\r", "-\t\t\tif ((flags & OS.SWP_NOSIZE) == 0) {\r", "-\t\t\t\tlpwndpl.right = x + width;\r", "-\t\t\t\tlpwndpl.bottom = y + height;\r", "-\t\t\t}\r", "-\t\t\tOS.SetWindowPlacement (handle, lpwndpl);\r", "-\t\t\treturn;\r", "+\t\tif ((flags & OS.SWP_NOMOVE) == 0) {\r", "+\t\t\tlpwndpl.left = x;\r", "+\t\t\tlpwndpl.top = y;\r", "+\t\t}\r", "+\t\tif ((flags & OS.SWP_NOSIZE) == 0) {\r", "+\t\t\tlpwndpl.right = x + width;\r", "+\t\t\tlpwndpl.bottom = y + height;\r", "+\t\t}\r", "+\t\tOS.SetWindowPlacement (handle, lpwndpl);\r", "+\t\treturn;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6674dd110a3bbba71a51e7d29f872e81", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "53eaef42c85a19c6c024eb953b35f15c33827e05", "commitAfterChange": "e8c16f7f9f6a3f2c095dfd48e874b4e7a9e7e851", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 62, "signatureBeforeChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tcount = content.getLineCount();\r", "+\tif (singleLine) {\r", "+\t\tcount = 1;\r", "+\t}\r", "+\telse {\r", "+\t\tcount = content.getLineCount();\r", "+\t}\r", "+\tif (wordWrap) {\r", "+\t\tif (wHint != SWT.DEFAULT) {\r", "+\t\t\twidth = wHint;\r", "+\t\t} \r", "+\t\telse {\r", "+\t\t\twidth = DEFAULT_WIDTH;\r", "+\t\t}\r", "+\t\tif (singleLine == false) {\r", "+\t\t\t((WrappedContent) content).wrapLines(width);\r", "+\t\t\tcount = content.getLineCount();\r", "+\t\t}\r", "+\t}\r", "+\telse\r", "+\tif (wHint != SWT.DEFAULT) {\r", "+\t\twidth = wHint;\r", "+\t} \r", "+\telse {\r", "+\t\t// Only calculate what can actually be displayed.\r", "+\t\t// Do this because measuring each text line is a \r", "+\t\t// time-consuming process.\r", "+\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);\r", "+\t\tlineCache.calculate(0, visibleCount);\r", "+\t\twidth = lineCache.getWidth();\r", "+\t}\r", "-\t} else {\r", "-\t\tif (singleLine) count = 1;\r", "+\t} \r", "+\telse {\r", "-\tif (wHint != SWT.DEFAULT) {\r", "-\t\twidth = wHint;\r", "-\t} else {\r", "-\t\t// Only calculate what can actually be displayed.\r", "-\t\t// Do this because measuring each text line is a \r", "-\t\t// time-consuming process.\r", "-\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);\r", "-\t\tcontentWidth.calculate(0, visibleCount);\r", "-\t\twidth = contentWidth.getWidth();\r", "-\t}\r", "-\r", "-\tif (width == 0) width = DEFAULT_WIDTH;\r", "-\tif (height == 0) {\r", "-\t\tif (singleLine) height = lineHeight;\r", "-\t\telse height = DEFAULT_HEIGHT;\r", "+\tif (width == 0) {\r", "+\t\twidth = DEFAULT_WIDTH;\r", "-\r", "+\tif (height == 0) {\r", "+\t\tif (singleLine) {\r", "+\t\t\theight = lineHeight;\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\theight = DEFAULT_HEIGHT;\r", "+\t\t}\r", "+\t}\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc4382df2126667c12991422c8ff5c06", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_custom_StyledText.java", "commitBeforeChange": "d8145da26376e690090dc684322ff1adbf794a0e", "commitAfterChange": "d7aad3a22a716e50af5427be98a2808163e08e76", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public void test_setKeyBindingII()", "signatureAfterChange": "  public void test_setKeyBindingII()", "diff": ["+\ttext.setKeyBinding(SWT.KEYPAD_CR, ST.LINE_END);", "+\tassertTrue(\":e:\", text.getKeyBinding(SWT.KEYPAD_CR) == ST.LINE_END);", "+\ttext.setKeyBinding(SWT.KEYPAD_CR | SWT.MOD1, ST.LINE_START);", "+\tassertTrue(\":f:\", text.getKeyBinding(SWT.KEYPAD_CR | SWT.MOD1) == ST.LINE_START);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fdb4238169082f931d598712da3227c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "97d7bbf8cfdbb6f96f4719f1f7be7a03fa93a649", "commitAfterChange": "86e7cf5504ff5ce8b2c98ba1a25038a04c256d57", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "signatureAfterChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "diff": ["-\tint colorPixmap = srcImage.pixmap;", "-\tint maskPixmap = srcImage.mask;", "+\tint colorPixmap = 0, maskPixmap = 0;", "-\tif (!(simple || (srcWidth == destWidth && srcHeight == destHeight))) {", "+\tif (simple || (srcWidth == destWidth && srcHeight == destHeight)) {", "+\t\tcolorPixmap = srcImage.pixmap;", "+\t\tmaskPixmap = srcImage.mask;", "+\t} else {", "-\t\tint xImagePtr = scalePixmap(xDisplay, colorPixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "-\t\tint xMaskPtr = scalePixmap(xDisplay, maskPixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\tint xImagePtr = scalePixmap(xDisplay, srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\tif (xImagePtr != 0) {", "+\t\t\tint xMaskPtr = scalePixmap(xDisplay, srcImage.mask, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\t\tif (xMaskPtr != 0) {", "+\t\t\t\t/* Create color scaled pixmaps */", "+\t\t\t\tcolorPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, depth);", "+\t\t\t\tint tempGC = OS.XCreateGC(xDisplay, colorPixmap, 0, null);", "+\t\t\t\tOS.XPutImage(xDisplay, colorPixmap, tempGC, xImagePtr, 0, 0, 0, 0, destWidth, destHeight);", "+\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "+\t\t", "+\t\t\t\t/* Create mask scaled pixmaps */", "+\t\t\t\tmaskPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, 1);", "+\t\t\t\ttempGC = OS.XCreateGC(xDisplay, maskPixmap, 0, null);", "+\t\t\t\tOS.XPutImage(xDisplay, maskPixmap, tempGC, xMaskPtr, 0, 0, 0, 0, destWidth, destHeight);", "+\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "-\t\t/* Create color scaled pixmaps */", "-\t\tcolorPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, depth);", "-\t\tint tempGC = OS.XCreateGC(xDisplay, colorPixmap, 0, null);", "-\t\tOS.XPutImage(xDisplay, colorPixmap, tempGC, xImagePtr, 0, 0, 0, 0, destWidth, destHeight);", "-\t\tOS.XDestroyImage(xImagePtr);", "-\t\tOS.XFreeGC(xDisplay, tempGC);", "-", "-\t\t/* Create mask scaled pixmaps */", "-\t\tmaskPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, 1);", "-\t\ttempGC = OS.XCreateGC(xDisplay, maskPixmap, 0, null);", "-\t\tOS.XPutImage(xDisplay, maskPixmap, tempGC, xMaskPtr, 0, 0, 0, 0, destWidth, destHeight);", "-\t\tOS.XDestroyImage(xMaskPtr);", "-\t\tOS.XFreeGC(xDisplay, tempGC);", "+\t\t\t\tOS.XDestroyImage(xMaskPtr);", "+\t\t\t}", "+\t\t\tOS.XDestroyImage(xImagePtr);", "+\t\t}", "-\tXGCValues values = new XGCValues();", "-\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS. GCBackground | OS.GCFunction, values);", "-\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "-\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "-\tOS.XSetForeground(xDisplay, handle, foreground);", "-\tOS.XSetBackground(xDisplay, handle, ~foreground);", "-\tOS.XSetFunction(xDisplay, handle, OS.GXand);", "-\tOS.XCopyPlane(xDisplay, maskPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY, 1);", "-\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "-\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "-\tOS.XSetForeground(xDisplay, handle, values.foreground);", "-\tOS.XSetBackground(xDisplay, handle, values.background);", "-\tOS.XSetFunction(xDisplay, handle, values.function);", "+\tif (colorPixmap != 0 && maskPixmap != 0) {", "+\t\tXGCValues values = new XGCValues();", "+\t\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS. GCBackground | OS.GCFunction, values);", "+\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "+\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "+\t\tOS.XSetForeground(xDisplay, handle, foreground);", "+\t\tOS.XSetBackground(xDisplay, handle, ~foreground);", "+\t\tOS.XSetFunction(xDisplay, handle, OS.GXand);", "+\t\tOS.XCopyPlane(xDisplay, maskPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY, 1);", "+\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "+\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "+\t\tOS.XSetForeground(xDisplay, handle, values.foreground);", "+\t\tOS.XSetBackground(xDisplay, handle, values.background);", "+\t\tOS.XSetFunction(xDisplay, handle, values.function);", "+\t}", "-\tif (srcImage.pixmap != colorPixmap) OS.XFreePixmap(xDisplay, colorPixmap);", "-\tif (srcImage.mask != maskPixmap) OS.XFreePixmap(xDisplay, maskPixmap);", "+\tif (colorPixmap != 0 && srcImage.pixmap != colorPixmap) OS.XFreePixmap(xDisplay, colorPixmap);", "+\tif (maskPixmap != 0 && srcImage.mask != maskPixmap) OS.XFreePixmap(xDisplay, maskPixmap);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f30beb8145f632f779f40d46c4ef38b5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Theme/gtk/org/eclipse/swt/internal/theme/Theme.java", "commitBeforeChange": "df55805e4a74ab0fc8f545a1792d755c95a4e419", "commitAfterChange": "b178ded274cefa13fff8fc6fb8115ee14a844dc8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void transferClipping(GC gc, long style)", "signatureAfterChange": "  void transferClipping(GC gc, long style)", "diff": ["+\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {\t", "+\t\t\tclipping = Cairo.cairo_region_create ();", "+\t\t\tCairo.cairo_region_union (clipping, clipRgn);", "+\t\t\tCairo.cairo_region_intersect (clipping, damageRgn);", "+\t\t} else {", "-\t\t\tOS.gdk_region_union(clipping, clipRgn);", "-\t\t\tOS.gdk_region_intersect(clipping, damageRgn);", "+\t\t\tOS.gdk_region_union (clipping, clipRgn);", "+\t\t\tOS.gdk_region_intersect (clipping, damageRgn);", "+\t\t}", "-\t\tOS.gdk_region_destroy(clipping);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "+\t\t\tCairo.cairo_region_destroy ( clipping);", "+\t\t} else {", "+\t\t\tOS.gdk_region_destroy (clipping);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a724227134602c027046b041965f445", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5a83eff7ec24d270c869515e80cf37dbe30c0637", "commitAfterChange": "ea6bf58c55a1ccfba682400237d7c1f40ceeffab", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  LRESULT CDDS_POSTPAINT (NMTVCUSTOMDRAW nmcd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_POSTPAINT (NMTVCUSTOMDRAW nmcd, int wParam, int lParam)", "diff": ["-\t\t\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Bug in Windows.  For some reason, during a collapse,", "+\t\t\t\t\t\t* when TVM_GETNEXTITEM is sent with TVGN_LASTVISIBLE", "+\t\t\t\t\t\t* and the collapse causes the item being collapsed", "+\t\t\t\t\t\t* to become the last visible item in the tree, the", "+\t\t\t\t\t\t* message takes a long time to process.  In order for", "+\t\t\t\t\t\t* the slowness to happen, the children of the item", "+\t\t\t\t\t\t* must have children.  Times of up to 11 seconds have", "+\t\t\t\t\t\t* been observed with 23 children, each having one", "+\t\t\t\t\t\t* child.  The fix is to use the bottom partially", "+\t\t\t\t\t\t* visible item rather than the last possible item", "+\t\t\t\t\t\t* that could be visible.", "+\t\t\t\t\t\t* ", "+\t\t\t\t\t\t* NOTE: This problem only happens on Vista during", "+\t\t\t\t\t\t* WM_NOTIFY with NM_CUSTOMDRAW and CDDS_POSTPAINT.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tint hItem = 0;", "+\t\t\t\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\t\t\t\thItem = getBottomItem ();", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\thItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0);", "+\t\t\t\t\t\t}", "-\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0);", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  For some reason, during a collapse,", "+\t\t\t* when TVM_GETNEXTITEM is sent with TVGN_LASTVISIBLE", "+\t\t\t* and the collapse causes the item being collapsed", "+\t\t\t* to become the last visible item in the tree, the", "+\t\t\t* message takes a long time to process.  In order for", "+\t\t\t* the slowness to happen, the children of the item", "+\t\t\t* must have children.  Times of up to 11 seconds have", "+\t\t\t* been observed with 23 children, each having one", "+\t\t\t* child.  The fix is to use the bottom partially", "+\t\t\t* visible item rather than the last possible item", "+\t\t\t* that could be visible.", "+\t\t\t* ", "+\t\t\t* NOTE: This problem only happens on Vista during", "+\t\t\t* WM_NOTIFY with NM_CUSTOMDRAW and CDDS_POSTPAINT.", "+\t\t\t*/", "+\t\t\tint hItem = 0;", "+\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\thItem = getBottomItem ();", "+\t\t\t} else {", "+\t\t\t\thItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bb9710f678c189264b1944181ad041e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "6a989c04df16fff2ca094ee53b359a3493fa1919", "commitAfterChange": "95182ccd2908446c4a49064e442c7923c70e257f", "methodNumberBeforeChange": 185, "methodNumberAfterChange": 185, "signatureBeforeChange": "  long windowProc (long handle, long arg0, long user_data)", "signatureAfterChange": "  long windowProc (long handle, long arg0, long user_data)", "diff": ["-\t\t\tGdkEventExpose gdkEvent = new GdkEventExpose ();", "-\t\t\tOS.memmove (gdkEvent, arg0, GdkEventExpose.sizeof);", "-\t\t\tlong /*int*/ paintWindow = paintWindow();", "-\t\t\tlong /*int*/ window = gdkEvent.window;", "-\t\t\tif (window != paintWindow) return 0;", "-\t\t\treturn (state & OBSCURED) != 0 ? 1 : 0;", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0) && OS.GTK_IS_CONTAINER(handle)) {", "+\t\t\t\t\treturn gtk_draw(handle, arg0);", "+\t\t\t\t} ", "+\t\t\t} else {", "+\t\t\t\tGdkEventExpose gdkEvent = new GdkEventExpose ();", "+\t\t\t\tOS.memmove (gdkEvent, arg0, GdkEventExpose.sizeof);", "+\t\t\t\tlong /*int*/ paintWindow = paintWindow();", "+\t\t\t\tlong /*int*/ window = gdkEvent.window;", "+\t\t\t\tif (window != paintWindow) return 0;", "+\t\t\t\treturn (state & OBSCURED) != 0 ? 1 : 0;", "+\t\t\t}", "+\t\t\treturn 0;", "-\t\t\t\treturn gtk_draw (handle, arg0);", "+\t\t\t\tif (OS.GTK_VERSION < OS.VERSION(3, 9, 0) || !OS.GTK_IS_CONTAINER(handle)) {", "+\t\t\t\t\treturn gtk_draw(handle, arg0);", "+\t\t\t\t} ", "+\t\t\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15aac443812f983acbc9d3797846b940", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "f72c857e9c5ef7f08cd69b3c2eb92b3aafb02d91", "commitAfterChange": "444917b413ab57ed5d6b6ade8c5b5c63d6e5c5c4", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " boolean setItemSize(GC gc)", "signatureAfterChange": " boolean setItemSize(GC gc)", "diff": ["-\t\t\tint width = renderer.computeSize(selectedIndex, SWT.SELECTED, gc).x;", "+\t\t\tint width = renderer.computeSize(selectedIndex, SWT.SELECTED, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\t\t\t\tPoint closeSize = renderer.computeSize(selectedIndex, SWT.SELECTED, gc);", "+\t\t\t\t\tPoint closeSize = renderer.computeSize(selectedIndex, SWT.SELECTED, gc, SWT.DEFAULT, SWT.DEFAULT);", "-\tif (showMin) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_MIN_BUTTON, SWT.NONE, gc).x;", "-\tif (showMax) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_MAX_BUTTON, SWT.NONE, gc).x;", "+\tif (showMin) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_MIN_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "+\tif (showMax) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_MAX_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\tminWidths[index] = renderer.computeSize(index, state, gc).x;", "+\t\tminWidths[index] = renderer.computeSize(index, state, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\tif (showChevron) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_CHEVRON_BUTTON, SWT.NONE, gc).x;", "+\t\tif (showChevron) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_CHEVRON_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\t\tmaxWidths[i] = renderer.computeSize(i, state, gc).x;", "+\t\t\tmaxWidths[i] = renderer.computeSize(i, state, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\t\t\t\tPoint closeSize = renderer.computeSize(CTabFolderRenderer.PART_CLOSE_BUTTON, SWT.NONE, gc);", "+\t\t\t\t\tPoint closeSize = renderer.computeSize(CTabFolderRenderer.PART_CLOSE_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c2ffc446aeb932022d76bfbb394d0f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "7867f4333df3401f2d9ceb7dab2dbc0c4b8c2343", "commitAfterChange": "d2e5dcd7efd5667e08cacd2f0a4973952e5a602f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void setVisible (boolean visible)", "signatureAfterChange": " public void setVisible (boolean visible)", "diff": ["-\tif (OS.GTK_WIDGET_VISIBLE (handle) == visible) return;", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {", "+\t\tif(OS.gtk_status_icon_get_visible (handle) == visible) return;\t", "+\t} else {", "+\t\tif (OS.GTK_WIDGET_VISIBLE (handle) == visible) return;", "+\t}", "-\t\tOS.gtk_widget_show (handle);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {", "+\t\t\tOS.gtk_status_icon_set_visible (handle, visible);", "+\t\t} else", "+\t\t\tOS.gtk_widget_show (handle);", "-\t\tOS.gtk_widget_hide (handle);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {", "+\t\t\tOS.gtk_status_icon_set_visible (handle, visible);", "+\t\t} else", "+\t\t\tOS.gtk_widget_hide (handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e26175079d1fe8fb1814d8c9317873d1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "41e30dced730b0c60211b060233aa634fc3b6982", "commitAfterChange": "a29045f10d09b1f4af0f85b33334fb19fc82b3fd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "signatureAfterChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "diff": ["+\t\r", "+\tif (dataTypes == null || dataTypes.length == 0) {\r", "+\t\tcallbackData.dropSiteStatus = OS.XmDROP_SITE_INVALID;\r", "+\t\tcallbackData.operation = opToOsOp(DND.DROP_NONE);\r", "+\t\tOS.memmove(call_data, callbackData, XmDragProcCallback.sizeof);\r", "+\t\treturn 0;\r", "+\t}\r", "+\tif (selectedDataType == null) {\r", "+\t\tselectedDataType = dataTypes[0];\r", "+\t}\r", "+\t\r", "-\t\t\t\tif (dataTypes.length > 0) {\r", "-\t\t\t\t\tevent.dataType = dataTypes[0];\r", "-\t\t\t\t}\r", "+\t\t\t\t\t\t\tif (selectedDataType == null) {\r", "+\t\t\t\t\t\t\t\tselectedDataType = dragOverEvent.dataTypes[0];\r", "+\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tevent.dataType  = dragOverEvent.dataType;\r", "+\t\t\t\t\t\t\tevent.dataType  = selectedDataType;\r"]}], "num": 18382}
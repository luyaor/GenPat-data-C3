{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d81a6faee516d69ca6096da36dc4edd3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f7e5fd5e35f2d270a66e42b3499a932", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "25fb0cca69f4d72e15a967512c53b05f06bed688", "commitAfterChange": "67b77f899a146f36fba6d648971eea4ee205b66e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\tCallback callback = null;", "+\t\t\t\t\tOS.CGContextSaveGState(gc.handle);", "-\t\t\t\t\tOS.CGContextSaveGState(gc.handle);", "-\t\t\t\t\tif (callback == null) {", "-\t\t\t\t\t\tcallback = new Callback(this, \"regionToRects\", 4);", "-\t\t\t\t\t\tif (callback.getAddress() == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.QDRegionToRects(rgn, OS.kQDParseRegionFromTopLeft, callback.getAddress(), gc.handle);", "+\t\t\t\t\tint shape = OS.HIShapeCreateWithQDRgn(rgn);", "+\t\t\t\t\tOS.HIShapeReplacePathInCGContext(shape, gc.handle);", "+\t\t\t\t\tOS.DisposeControl(shape);", "-\tif (callback != null) callback.dispose();", "-\tcallback = null;", "-\tCallback borderCallback = null;", "+\t\t\t\t\t\tOS.CGContextSaveGState(gc.handle);", "-\t\t\t\t\t\tOS.CGContextSaveGState(gc.handle);", "+\t\t\t\t\t\tint[] count = new int[1];", "+\t\t\t\t\t\tOS.ATSUGetGlyphBounds(layout, OS.Long2Fix(x), OS.X2Fix(underlineY), highStart, highLen, (short)OS.kATSUseDeviceOrigins, 0, 0, count);", "+\t\t\t\t\t\tint trapezoidsPtr = OS.malloc(count[0] * ATSTrapezoid.sizeof);", "+\t\t\t\t\t\tOS.ATSUGetGlyphBounds(layout, OS.Long2Fix(x), OS.X2Fix(underlineY), highStart, highLen, (short)OS.kATSUseDeviceOrigins, count[0], trapezoidsPtr, count);", "+\t\t\t\t\t\tATSTrapezoid trapezoid = new ATSTrapezoid();", "+\t\t\t\t\t\tfor (int k = 0; k < count[0]; k++) {", "+\t\t\t\t\t\t\tOS.memmove(trapezoid, trapezoidsPtr + (k * ATSTrapezoid.sizeof), ATSTrapezoid.sizeof);", "+\t\t\t\t\t\t\tfloat ux, uy, lx, ly, a, b;", "+\t\t\t\t\t\t\tux = OS.Fix2Long(trapezoid.upperLeft_x);", "+\t\t\t\t\t\t\tuy = OS.Fix2Long(trapezoid.upperLeft_y);", "+\t\t\t\t\t\t\tlx = OS.Fix2Long(trapezoid.lowerLeft_x);", "+\t\t\t\t\t\t\tly = OS.Fix2Long(trapezoid.lowerLeft_y);", "+\t\t\t\t\t\t\ta = (uy - ly) / (ux - lx);", "+\t\t\t\t\t\t\tb = uy - ux * a;", "+\t\t\t\t\t\t\tfloat left = (underlineY - b) / a;", "+\t\t\t\t\t\t\tux = OS.Fix2Long(trapezoid.upperRight_x);", "+\t\t\t\t\t\t\tuy = OS.Fix2Long(trapezoid.upperRight_y);", "+\t\t\t\t\t\t\tlx = OS.Fix2Long(trapezoid.lowerRight_x);", "+\t\t\t\t\t\t\tly = OS.Fix2Long(trapezoid.lowerRight_y);", "+\t\t\t\t\t\t\ta = (uy - ly) / (ux - lx);", "+\t\t\t\t\t\t\tb = uy - ux * a;", "+\t\t\t\t\t\t\tfloat right = (underlineY - b) / a;", "+\t\t\t\t\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\t\t\t\t\tcase UNDERLINE_IME_TARGET_CONVERTED:", "+\t\t\t\t\t\t\t\tcase UNDERLINE_IME_CONVERTED:", "+\t\t\t\t\t\t\t\t\tleft += 1;", "+\t\t\t\t\t\t\t\t\tright -= 1;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.CGContextMoveToPoint(gc.handle, left, OS.Fix2Long(trapezoid.upperLeft_y));", "+\t\t\t\t\t\t\tOS.CGContextAddLineToPoint(gc.handle, right, OS.Fix2Long(trapezoid.upperRight_y));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.free(trapezoidsPtr);", "-\t\t\t\t\t\tOS.ATSUGetTextHighlight(layout, OS.Long2Fix(x), OS.X2Fix(underlineY), highStart, highLen, rgn);", "-\t\t\t\t\t\tif (callback == null) {", "-\t\t\t\t\t\t\tcallback = new Callback(this, \"drawUnderline\", 4);", "-\t\t\t\t\t\t\tif (callback.getAddress() == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tdrawStyle = run;", "-\t\t\t\t\t\tOS.CGContextTranslateCTM (gc.handle, 0.5f, 0.5f);", "-\t\t\t\t\t\tOS.QDRegionToRects(rgn, OS.kQDParseRegionFromTopLeft, callback.getAddress(), gc.handle);", "+\t\t\t\t\t\tOS.CGContextTranslateCTM(gc.handle, 0.5f, 0.5f);", "-\t\t\t\t\t\tOS.ATSUGetTextHighlight(layout, OS.Long2Fix(x), OS.Long2Fix(y + lineY + lineAscent[i]), highStart, highLen, rgn);", "-\t\t\t\t\t\tif (borderCallback == null) {", "-\t\t\t\t\t\t\tborderCallback = new Callback(this, \"drawBorder\", 4);", "-\t\t\t\t\t\t\tif (borderCallback.getAddress() == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\t\tint[] count = new int[1];", "+\t\t\t\t\t\tOS.ATSUGetGlyphBounds(layout, OS.Long2Fix(x), OS.Long2Fix(y + lineY + lineAscent[i]), highStart, highLen, (short)OS.kATSUseDeviceOrigins, 0, 0, count);", "+\t\t\t\t\t\tint trapezoidsPtr = OS.malloc(count[0] * ATSTrapezoid.sizeof);", "+\t\t\t\t\t\tOS.ATSUGetGlyphBounds(layout, OS.Long2Fix(x), OS.Long2Fix(y + lineY + lineAscent[i]), highStart, highLen, (short)OS.kATSUseDeviceOrigins, count[0], trapezoidsPtr, count);", "+\t\t\t\t\t\tATSTrapezoid trapezoid = new ATSTrapezoid();", "+\t\t\t\t\t\tfor (int k = 0; k < count[0]; k++) {", "+\t\t\t\t\t\t\tOS.memmove(trapezoid, trapezoidsPtr + (k * ATSTrapezoid.sizeof), ATSTrapezoid.sizeof);", "+\t\t\t\t\t\t\tint upperY = y + lineY + 1;", "+\t\t\t\t\t\t\tint lowerY = y + lineY + lineHeight[i];", "+\t\t\t\t\t\t\tOS.CGContextMoveToPoint(gc.handle, OS.Fix2Long(trapezoid.lowerLeft_x), lowerY);", "+\t\t\t\t\t\t\tOS.CGContextAddLineToPoint(gc.handle, OS.Fix2Long(trapezoid.upperLeft_x), upperY);", "+\t\t\t\t\t\t\tOS.CGContextAddLineToPoint(gc.handle, OS.Fix2Long(trapezoid.upperRight_x) - 1, upperY);", "+\t\t\t\t\t\t\tOS.CGContextAddLineToPoint(gc.handle, OS.Fix2Long(trapezoid.lowerRight_x) - 1, lowerY);", "+\t\t\t\t\t\t\tOS.CGContextClosePath(gc.handle);", "-\t\t\t\t\t\tOS.CGContextTranslateCTM(gc.handle, 0.5f, 0.5f);", "-\t\t\t\t\t\tOS.QDRegionToRects(rgn, OS.kQDParseRegionFromTopLeft, borderCallback.getAddress(), gc.handle);", "+\t\t\t\t\t\tOS.free(trapezoidsPtr);", "+\t\t\t\t\t\tOS.CGContextTranslateCTM (gc.handle, 0.5f, 0.5f);", "-\tif (callback != null) callback.dispose();", "-\tcallback = null;", "-\tif (borderCallback != null) borderCallback.dispose();", "-\tborderCallback = null;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4557985a919809792e2cddf7154c224", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "b1485e2673a8d445f26b5f678b1f17e3f2a01622", "commitAfterChange": "17d5bcbf142c35cae2dbd838d742b3d14d3d4742", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["+\tCallback borderCallback = null;", "-\t\tif (style == null || !style.underline) continue;", "-\t\tif (style.underlineStyle == SWT.UNDERLINE_SINGLE || style.underlineStyle == SWT.UNDERLINE_DOUBLE) continue;", "+\t\tif (style == null) continue;", "+\t\tboolean drawUnderline = style.underline && style.underlineStyle != SWT.UNDERLINE_SINGLE && style.underlineStyle != SWT.UNDERLINE_DOUBLE;", "+\t\tboolean drawBorder = style.borderStyle != SWT.NONE;", "+\t\tif (!drawUnderline && !drawBorder) continue;", "-\t\t\t\t\tfloat underlineY = y + lineY;", "-\t\t\t\t\tfloat[] foreground = gc.data.foreground;", "-\t\t\t\t\tfloat lineWidth = 0;", "-\t\t\t\t\tOS.CGContextSaveGState(gc.handle);", "-\t\t\t\t\tswitch (style.underlineStyle) {", "-\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "-\t\t\t\t\t\t\tlineWidth = 2;", "-\t\t\t\t\t\t\tunderlineY += 2 * lineAscent [i] + lineWidth;", "-\t\t\t\t\t\t\tif (style.underlineColor != null) {", "-\t\t\t\t\t\t\t\tforeground = style.underlineColor.handle;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (style.foreground != null) {", "-\t\t\t\t\t\t\t\t\tforeground = style.foreground.handle;", "+\t\t\t\t\tif (drawUnderline) {", "+\t\t\t\t\t\tfloat underlineY = y + lineY;", "+\t\t\t\t\t\tfloat[] foreground = gc.data.foreground;", "+\t\t\t\t\t\tfloat lineWidth = 0;", "+\t\t\t\t\t\tOS.CGContextSaveGState(gc.handle);", "+\t\t\t\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "+\t\t\t\t\t\t\t\tlineWidth = 2;", "+\t\t\t\t\t\t\t\tunderlineY += 2 * lineAscent [i] + lineWidth;", "+\t\t\t\t\t\t\t\tif (style.underlineColor != null) {", "+\t\t\t\t\t\t\t\t\tforeground = style.underlineColor.handle;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (style.foreground != null) {", "+\t\t\t\t\t\t\t\t\t\tforeground = style.foreground.handle;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tOS.CGContextSetLineDash(gc.handle, 0, new float[]{1f,3}, 2);", "+\t\t\t\t\t\t\t\tOS.CGContextSetLineCap(gc.handle, OS.kCGLineCapRound);", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tOS.CGContextSetLineDash(gc.handle, 0, new float[]{1f,3}, 2);", "-\t\t\t\t\t\t\tOS.CGContextSetLineCap(gc.handle, OS.kCGLineCapRound);", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase UNDERLINE_IME_INPUT:", "+\t\t\t\t\t\t\tcase UNDERLINE_IME_TARGET_CONVERTED:", "+\t\t\t\t\t\t\tcase UNDERLINE_IME_CONVERTED:", "+\t\t\t\t\t\t\t\tlineWidth = 1.5f;", "+\t\t\t\t\t\t\t\tforeground = style.underlineStyle == UNDERLINE_IME_CONVERTED ? new float[]{0.5f, 0.5f, 0.5f, 1} : new float[]{0, 0, 0, 1};", "+\t\t\t\t\t\t\t\tFont font = style.font;", "+\t\t\t\t\t\t\t\tif (font == null) font = this.font != null ? this.font : device.systemFont;", "+\t\t\t\t\t\t\t\tATSFontMetrics metrics = new ATSFontMetrics();", "+\t\t\t\t\t\t\t\tOS.ATSFontGetHorizontalMetrics(font.handle, OS.kATSOptionFlagsDefault, metrics);", "+\t\t\t\t\t\t\t\tunderlineY += lineAscent [i] + lineHeight [i] + (metrics.descent * font.size);", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase UNDERLINE_IME_INPUT:", "-\t\t\t\t\t\tcase UNDERLINE_IME_TARGET_CONVERTED:", "-\t\t\t\t\t\tcase UNDERLINE_IME_CONVERTED:", "-\t\t\t\t\t\t\tlineWidth = 1.5f;", "-\t\t\t\t\t\t\tforeground = style.underlineStyle == UNDERLINE_IME_CONVERTED ? new float[]{0.5f, 0.5f, 0.5f, 1} : new float[]{0, 0, 0, 1};", "-\t\t\t\t\t\t\tFont font = style.font;", "-\t\t\t\t\t\t\tif (font == null) font = this.font != null ? this.font : device.systemFont;", "-\t\t\t\t\t\t\tATSFontMetrics metrics = new ATSFontMetrics();", "-\t\t\t\t\t\t\tOS.ATSFontGetHorizontalMetrics(font.handle, OS.kATSOptionFlagsDefault, metrics);", "-\t\t\t\t\t\t\tunderlineY += lineAscent [i] + lineHeight [i] + (metrics.descent * font.size);", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tOS.CGContextSetStrokeColorSpace(gc.handle, device.colorspace);", "+\t\t\t\t\t\tOS.CGContextSetStrokeColor(gc.handle, foreground);", "+\t\t\t\t\t\tOS.CGContextSetLineCap(gc.handle, OS.kCGLineCapButt);", "+\t\t\t\t\t\tOS.CGContextSetLineJoin(gc.handle, OS.kCGLineJoinMiter);", "+\t\t\t\t\t\tOS.CGContextSetLineDash(gc.handle, 0, null, 0);", "+\t\t\t\t\t\tOS.CGContextSetLineWidth(gc.handle, lineWidth);", "+\t\t\t\t\t\tOS.ATSUGetTextHighlight(layout, OS.Long2Fix(x), OS.X2Fix(underlineY), highStart, highLen, rgn);", "+\t\t\t\t\t\tif (callback == null) {", "+\t\t\t\t\t\t\tcallback = new Callback(this, \"drawUnderline\", 4);", "+\t\t\t\t\t\t\tif (callback.getAddress() == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdrawStyle = run;", "+\t\t\t\t\t\tOS.CGContextTranslateCTM (gc.handle, 0.5f, 0.5f);", "+\t\t\t\t\t\tOS.QDRegionToRects(rgn, OS.kQDParseRegionFromTopLeft, callback.getAddress(), gc.handle);", "+\t\t\t\t\t\tOS.CGContextStrokePath(gc.handle);", "+\t\t\t\t\t\tOS.CGContextRestoreGState(gc.handle);", "-\t\t\t\t\tOS.CGContextSetStrokeColorSpace(gc.handle, device.colorspace);", "-\t\t\t\t\tOS.CGContextSetStrokeColor(gc.handle, foreground);", "-\t\t\t\t\tOS.CGContextSetLineWidth(gc.handle, lineWidth);", "-\t\t\t\t\tOS.ATSUGetTextHighlight(layout, OS.Long2Fix(x), OS.X2Fix(underlineY), highStart, highLen, rgn);", "-\t\t\t\t\tif (callback == null) {", "-\t\t\t\t\t\tcallback = new Callback(this, \"drawUnderline\", 4);", "-\t\t\t\t\t\tif (callback.getAddress() == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\tif (drawBorder) {", "+\t\t\t\t\t\tOS.ATSUGetTextHighlight(layout, OS.Long2Fix(x), OS.Long2Fix(y + lineY + lineAscent[i]), highStart, highLen, rgn);", "+\t\t\t\t\t\tOS.CGContextSaveGState(gc.handle);", "+\t\t\t\t\t\tif (borderCallback == null) {", "+\t\t\t\t\t\t\tborderCallback = new Callback(this, \"drawBorder\", 4);", "+\t\t\t\t\t\t\tif (borderCallback.getAddress() == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.CGContextTranslateCTM(gc.handle, 0.5f, 0.5f);", "+\t\t\t\t\t\tOS.QDRegionToRects(rgn, OS.kQDParseRegionFromTopLeft, borderCallback.getAddress(), gc.handle);", "+\t\t\t\t\t\tint width = 1;", "+\t\t\t\t\t\tOS.CGContextSetShouldAntialias(gc.handle, false);", "+\t\t\t\t\t\tOS.CGContextSetLineCap(gc.handle, OS.kCGLineCapButt);", "+\t\t\t\t\t\tOS.CGContextSetLineJoin(gc.handle, OS.kCGLineJoinMiter);", "+\t\t\t\t\t\tOS.CGContextSetLineWidth(gc.handle, width);", "+\t\t\t\t\t\tfloat[] dashes = null;", "+\t\t\t\t\t\tswitch (style.borderStyle) {", "+\t\t\t\t\t\t\tcase SWT.BORDER_SOLID:\tbreak;", "+\t\t\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "+\t\t\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.CGContextSetLineDash(gc.handle, 0, dashes, dashes != null ? dashes.length : 0);", "+\t\t\t\t\t\tfloat[] color = null;", "+\t\t\t\t\t\tif (style.borderColor != null) color = style.borderColor.handle;", "+\t\t\t\t\t\tif (color == null && style.foreground != null) color = style.foreground.handle;", "+\t\t\t\t\t\tif (color != null) {", "+\t\t\t\t\t\t\tOS.CGContextSetStrokeColorSpace(gc.handle, device.colorspace);", "+\t\t\t\t\t\t\tOS.CGContextSetStrokeColor(gc.handle, color);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.CGContextStrokePath(gc.handle);", "+\t\t\t\t\t\tOS.CGContextRestoreGState(gc.handle);", "-\t\t\t\t\tdrawStyle = run;", "-\t\t\t\t\tOS.CGContextTranslateCTM (gc.handle, 0.5f, 0.5f);", "-\t\t\t\t\tOS.QDRegionToRects(rgn, OS.kQDParseRegionFromTopLeft, callback.getAddress(), gc.handle);", "-\t\t\t\t\tOS.CGContextStrokePath(gc.handle);", "-\t\t\t\t\tOS.CGContextRestoreGState(gc.handle);", "+\tcallback = null;", "+\tif (borderCallback != null) borderCallback.dispose();", "+\tborderCallback = null;"]}], "num": 41554}
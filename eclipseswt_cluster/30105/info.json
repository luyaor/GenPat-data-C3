{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dbd39fe29f1fd54ce8fb76c983a565e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dea52fef83460dd19ed266a33d82e70d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "44be5983a5fff33f337bb260817cc50987bb398a", "commitAfterChange": "47bdf987fcc6a0c67f43a42299353f6d35603f81", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 28, "signatureBeforeChange": " int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc, FontData fontData)", "signatureAfterChange": " int getTextWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc, FontData fontData)", "diff": ["+ */", "+int getTextWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc, FontData fontData) {", "+\tint paintX = 0;", "+\tint endOffset = startOffset + length;", "+\tint textLength = text.length();", "+\t", "+\tif (startOffset < 0 || startOffset >= textLength || endOffset > textLength) {", "+\t\treturn paintX;", "+\t}", "+\tfor (int i = startOffset; i < endOffset; i++) {", "+\t\tint tabIndex = text.indexOf(StyledText.TAB, i);", "+\t\t// is tab not present or past the rendering range?", "+\t\tif (tabIndex == -1 || tabIndex > endOffset) {", "+\t\t\ttabIndex = endOffset;", "+\t\t}", "+\t\tif (tabIndex != i) {", "+\t\t\tString tabSegment = text.substring(i, tabIndex);", "+\t\t\tif (lineStyles != null) {", "+\t\t\t\tpaintX = getStyledTextWidth(tabSegment, lineOffset + i, lineStyles, paintX, gc, fontData);", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\tsetLineFont(gc, fontData, SWT.NORMAL);", "+\t\t\t\tpaintX += gc.stringExtent(tabSegment).x;", "+\t\t\t}", "+\t\t\tif (tabIndex != endOffset && tabWidth > 0) {", "+\t\t\t\tpaintX = getTabStop(startXOffset + paintX) - startXOffset;", "+\t\t\t}", "+\t\t\ti = tabIndex;", "+\t\t}", "+\t\telse \t\t", "+\t\tif (tabWidth > 0) {", "+\t\t\tpaintX = getTabStop(startXOffset + paintX) - startXOffset;", "+\t\t}", "+\t}", "+\treturn paintX;", "- */", "-int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc, FontData fontData) {", "-\tint paintX = 0;", "-\tint endOffset = startOffset + length;", "-\tint textLength = text.length();", "-\t", "-\tif (startOffset < 0 || startOffset >= textLength || endOffset > textLength) {", "-\t\treturn paintX;", "-\t}", "-\tfor (int i = startOffset; i < endOffset; i++) {", "-\t\tint tabIndex = text.indexOf(StyledText.TAB, i);", "-\t\t// is tab not present or past the rendering range?", "-\t\tif (tabIndex == -1 || tabIndex > endOffset) {", "-\t\t\ttabIndex = endOffset;", "-\t\t}", "-\t\tif (tabIndex != i) {", "-\t\t\tString tabSegment = text.substring(i, tabIndex);", "-\t\t\tif (lineStyles != null) {", "-\t\t\t\tpaintX = styledTextWidth(tabSegment, lineOffset + i, lineStyles, paintX, gc, fontData);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tsetLineFont(gc, fontData, SWT.NORMAL);", "-\t\t\t\tpaintX += gc.stringExtent(tabSegment).x;", "-\t\t\t}", "-\t\t\tif (tabIndex != endOffset && tabWidth > 0) {", "-\t\t\t\tpaintX = getTabStop(startXOffset + paintX) - startXOffset;", "-\t\t\t}", "-\t\t\ti = tabIndex;", "-\t\t}", "-\t\telse \t\t", "-\t\tif (tabWidth > 0) {", "-\t\t\tpaintX = getTabStop(startXOffset + paintX) - startXOffset;", "-\t\t}", "-\t}", "-\treturn paintX;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ab7ecfffeb0c2120784a98741d01dd6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 217, "methodNumberAfterChange": 242, "signatureBeforeChange": "\r int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc)", "signatureAfterChange": "\r int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc, StyledTextBidi bidi)", "diff": ["-int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc) {\r", "+int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc, StyledTextBidi bidi) {\r", "-\tfor (int i = startOffset; i < endOffset; i++) {\r", "-\t\tint tabIndex = text.indexOf(TAB, i);\r", "-\t\t// is tab not present or past the rendering range?\r", "-\t\tif (tabIndex == -1 || tabIndex > endOffset) {\r", "-\t\t\ttabIndex = endOffset;\r", "-\t\t}\r", "-\t\tif (tabIndex != i) {\r", "-\t\t\tString tabSegment = text.substring(i, tabIndex);\r", "-\t\t\tif (lineStyles != null) {\r", "-\t\t\t\tpaintX = styledTextWidth(tabSegment, lineOffset + i, lineStyles, paintX, 0, gc, false);\r", "+\tif (bidi != null) {\r", "+\t\tpaintX = bidi.getCaretPosition(endOffset) - startXOffset;\r", "+\t}\r", "+\telse {\r", "+\t\tfor (int i = startOffset; i < endOffset; i++) {\r", "+\t\t\tint tabIndex = text.indexOf(TAB, i);\r", "+\t\t\t// is tab not present or past the rendering range?\r", "+\t\t\tif (tabIndex == -1 || tabIndex > endOffset) {\r", "+\t\t\t\ttabIndex = endOffset;\r", "-\t\t\telse {\r", "-\t\t\t\tfontData = setLineFont(gc, fontData, SWT.NORMAL);\r", "-\t\t\t\tpaintX += gc.stringExtent(tabSegment).x;\r", "+\t\t\tif (tabIndex != i) {\r", "+\t\t\t\tString tabSegment = text.substring(i, tabIndex);\r", "+\t\t\t\tif (lineStyles != null) {\r", "+\t\t\t\t\tpaintX = styledTextWidth(tabSegment, lineOffset + i, lineStyles, paintX, 0, gc, fontData);\r", "+\t\t\t\t}\r", "+\t\t\t\telse {\r", "+\t\t\t\t\tsetLineFont(gc, fontData, SWT.NORMAL);\r", "+\t\t\t\t\tpaintX += gc.stringExtent(tabSegment).x;\r", "+\t\t\t\t}\r", "+\t\t\t\tif (tabIndex != endOffset && tabWidth > 0) {\r", "+\t\t\t\t\tpaintX += tabWidth;\r", "+\t\t\t\t\tpaintX -= (startXOffset + paintX) % tabWidth;\r", "+\t\t\t\t}\r", "+\t\t\t\ti = tabIndex;\r", "-\t\t\tif (tabIndex != endOffset && tabWidth > 0) {\r", "+\t\t\telse \t\t\r", "+\t\t\tif (tabWidth > 0) {\r", "-\t\t\ti = tabIndex;\r", "-\t\t}\r", "-\t\telse \t\t\r", "-\t\tif (tabWidth > 0) {\r", "-\t\t\tpaintX += tabWidth;\r", "-\t\t\tpaintX -= (startXOffset + paintX) % tabWidth;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90918b304fcf1be494efb2952df02b94", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "b8f9d45a80c733a8f5884af87c95e68f3463aaa7", "commitAfterChange": "e2ae18014fd9c71ab4dc0b52900b77c1d3a0f5b7", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 257, "signatureBeforeChange": "\r int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc, StyledTextBidi bidi)", "signatureAfterChange": "\r int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc)", "diff": ["-int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc, StyledTextBidi bidi) {\r", "+int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc) {\r", "+\tFontData fontData;\r", "-\tif (startOffset < 0 || startOffset >= textLength || startOffset + length > textLength) {\r", "+\tif (startOffset < 0 || startOffset >= textLength || endOffset > textLength) {\r", "-\tif (bidi != null) {\r", "-\t\t// Use lastCaretDirection in order to get same results as during\r", "-\t\t// caret positioning (setBidiCaretLocation). Fixes 1GKU4C5.\r", "-\t\tpaintX = bidi.getCaretPosition(endOffset, lastCaretDirection) - startXOffset;\r", "-\t}\r", "-\telse {\r", "-\t\tFontData fontData = gc.getFont().getFontData()[0];\r", "-\r", "-\t\tfor (int i = startOffset; i < endOffset; i++) {\r", "-\t\t\tint tabIndex = text.indexOf(TAB, i);\r", "-\t\t\t// is tab not present or past the rendering range?\r", "-\t\t\tif (tabIndex == -1 || tabIndex > endOffset) {\r", "-\t\t\t\ttabIndex = endOffset;\r", "+\tfontData = gc.getFont().getFontData()[0];\r", "+\tfor (int i = startOffset; i < endOffset; i++) {\r", "+\t\tint tabIndex = text.indexOf(TAB, i);\r", "+\t\t// is tab not present or past the rendering range?\r", "+\t\tif (tabIndex == -1 || tabIndex > endOffset) {\r", "+\t\t\ttabIndex = endOffset;\r", "+\t\t}\r", "+\t\tif (tabIndex != i) {\r", "+\t\t\tString tabSegment = text.substring(i, tabIndex);\r", "+\t\t\tif (lineStyles != null) {\r", "+\t\t\t\tpaintX = styledTextWidth(tabSegment, lineOffset + i, lineStyles, paintX, gc, fontData);\r", "-\t\t\tif (tabIndex != i) {\r", "-\t\t\t\tString tabSegment = text.substring(i, tabIndex);\r", "-\t\t\t\tif (lineStyles != null) {\r", "-\t\t\t\t\tpaintX = styledTextWidth(tabSegment, lineOffset + i, lineStyles, paintX, gc, fontData);\r", "-\t\t\t\t}\r", "-\t\t\t\telse {\r", "-\t\t\t\t\tsetLineFont(gc, fontData, SWT.NORMAL);\r", "-\t\t\t\t\tpaintX += gc.stringExtent(tabSegment).x;\r", "-\t\t\t\t}\r", "-\t\t\t\tif (tabIndex != endOffset && tabWidth > 0) {\r", "-\t\t\t\t\tpaintX = getTabStop(startXOffset + paintX) - startXOffset;\r", "-\t\t\t\t}\r", "-\t\t\t\ti = tabIndex;\r", "+\t\t\telse {\r", "+\t\t\t\tsetLineFont(gc, fontData, SWT.NORMAL);\r", "+\t\t\t\tpaintX += gc.stringExtent(tabSegment).x;\r", "-\t\t\telse \t\t\r", "-\t\t\tif (tabWidth > 0) {\r", "+\t\t\tif (tabIndex != endOffset && tabWidth > 0) {\r", "+\t\t\ti = tabIndex;\r", "+\t\t}\r", "+\t\telse \t\t\r", "+\t\tif (tabWidth > 0) {\r", "+\t\t\tpaintX = getTabStop(startXOffset + paintX) - startXOffset;\r"]}], "num": 30105}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc5fc12b7a91b4c7545efa5d3f514db9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23d003a601d7c9a322ac5cb7240760af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridLayout.java", "commitBeforeChange": "5f5d70af2a2b7b08f493fb21c45bc02a6deecc9c", "commitAfterChange": "b66e99f0077850b229d3c59791f0ef126c9c8660", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "signatureAfterChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "diff": ["+\t\tif (data.grabExcessHorizontalSpace && data.minimumWidth > 0) {", "+\t\t\tif (data.cacheWidth < data.minimumWidth) {", "+\t\t\t\tint trim = 0;", "+\t\t\t\tif (child instanceof Group) {", "+\t\t\t\t\tGroup g = (Group)child;", "+\t\t\t\t\ttrim = g.getSize ().x - g.getClientArea ().width;", "+\t\t\t\t} else if (child instanceof Scrollable) {", "+\t\t\t\t\tRectangle rect = ((Scrollable) child).computeTrim (0, 0, 0, 0);", "+\t\t\t\t\ttrim = rect.width;", "+\t\t\t\t} else {", "+\t\t\t\t\ttrim = child.getBorderWidth () * 2;", "+\t\t\t\t}", "+\t\t\t\tdata.cacheWidth = data.cacheHeight = SWT.DEFAULT;", "+\t\t\t\tdata.computeSize(child, Math.max (0, data.minimumWidth - trim), data.heightHint, false);", "+\t\t\t}", "+\t\t}", "+\t\tif (data.grabExcessVerticalSpace && data.minimumHeight > 0) {", "+\t\t\tdata.cacheHeight = Math.max(data.cacheHeight, data.minimumHeight);", "+\t\t}", "+\t\t\t\t\t\t\tif (data.grabExcessVerticalSpace && data.minimumHeight > 0) {", "+\t\t\t\t\t\t\t\tdata.cacheHeight = Math.max(data.cacheHeight, data.minimumHeight);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24628a71d733ad5c7d2c9a0583cf79e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 131, "signatureBeforeChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "signatureAfterChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "diff": ["-\t/* Compute the old bounds */", "-\tRect oldBounds = new Rect ();", "-\tOS.GetControlBounds (control, oldBounds);", "-\tint [] theRoot = new int [1];", "-\tint window = OS.GetControlOwner (control);", "-\tOS.GetRootControl (window, theRoot);", "-\tint [] parentHandle = new int [1];", "-\tOS.GetSuperControl (control, parentHandle);", "-\tRect parentRect = new Rect ();", "-\tif (parentHandle [0] != theRoot [0]) {", "-\t\tOS.GetControlBounds (parentHandle [0], parentRect);", "-\t\tOS.OffsetRect (oldBounds, (short) -parentRect.left, (short) -parentRect.top);", "-\t}", "-\tRect inset = getInset ();", "-\toldBounds.left -= inset.left;", "-\toldBounds.top -= inset.top;", "-\toldBounds.right += inset.right;", "-\toldBounds.bottom += inset.bottom;", "+\tboolean sameOrigin = true, sameExtent = true;", "+\tif (OS.HIVIEW) {", "+\t\tCGRect oldBounds = new CGRect ();", "+\t\tOS.HIViewGetFrame (control, oldBounds);", "+\t\tRect inset = getInset ();", "+\t\toldBounds.x -= inset.left;", "+\t\toldBounds.y -= inset.top;", "+\t\toldBounds.width += inset.left + inset.right;", "+\t\toldBounds.height += inset.top + inset.bottom;", "+\t\tif (!move) {", "+\t\t\tx = (int) oldBounds.x;", "+\t\t\ty = (int) oldBounds.y;", "+\t\t}", "+\t\tif (!resize) {", "+\t\t\twidth = (int) oldBounds.width;", "+\t\t\theight = (int) oldBounds.height;", "+\t\t}", "+\t\tCGRect newBounds = new CGRect ();", "+\t\tnewBounds.x = x + inset.left;", "+\t\tnewBounds.y = y + inset.top;", "+\t\tnewBounds.width = width - inset.right - inset.left;", "+\t\tnewBounds.height = height - inset.bottom - inset.top;", "+\t\tsameOrigin = newBounds.x == oldBounds.x && newBounds.y == oldBounds.y;", "+\t\tsameExtent = newBounds.width == oldBounds.width && newBounds.height == oldBounds.height;", "+\t\tif (sameOrigin && sameExtent) return 0;", "+\t\tOS.HIViewSetFrame (control, newBounds);", "+\t\tinvalidateVisibleRegion (control);", "+\t} else {", "+\t\t/* Compute the old bounds */", "+\t\tRect oldBounds = new Rect ();", "+\t\tOS.GetControlBounds (control, oldBounds);", "+\t\tint [] theRoot = new int [1];", "+\t\tint window = OS.GetControlOwner (control);", "+\t\tOS.GetRootControl (window, theRoot);", "+\t\tint [] parentHandle = new int [1];", "+\t\tOS.GetSuperControl (control, parentHandle);", "+\t\tRect parentRect = new Rect ();", "+\t\tif (parentHandle [0] != theRoot [0]) {", "+\t\t\tOS.GetControlBounds (parentHandle [0], parentRect);", "+\t\t\tOS.OffsetRect (oldBounds, (short) -parentRect.left, (short) -parentRect.top);", "+\t\t}", "+\t\tRect inset = getInset ();", "+\t\toldBounds.left -= inset.left;", "+\t\toldBounds.top -= inset.top;", "+\t\toldBounds.right += inset.right;", "+\t\toldBounds.bottom += inset.bottom;", "+\t\t", "+\t\t/* Compute the new bounds */", "+\t\tif (!move) {", "+\t\t\tx = oldBounds.left;", "+\t\t\ty = oldBounds.top;", "+\t\t}", "+\t\tif (!resize) {", "+\t\t\twidth = oldBounds.right - oldBounds.left;", "+\t\t\theight = oldBounds.bottom - oldBounds.top;", "+\t\t}\t", "+\t\tRect newBounds = new Rect ();", "+\t\tnewBounds.left = (short) (parentRect.left + x + inset.left);", "+\t\tnewBounds.top = (short) (parentRect.top + y + inset.top);", "+\t\tnewBounds.right = (short) (newBounds.left + width - inset.right - inset.left);", "+\t\tnewBounds.bottom = (short) (newBounds.top + height - inset.bottom - inset.top);\t", "+\t\tif (newBounds.bottom < newBounds.top) newBounds.bottom = newBounds.top;", "+\t\tif (newBounds.right < newBounds.left) newBounds.right = newBounds.left;", "-\t/* Compute the new bounds */", "-\tif (!move) {", "-\t\tx = oldBounds.left;", "-\t\ty = oldBounds.top;", "-\t}", "-\tif (!resize) {", "-\t\twidth = oldBounds.right - oldBounds.left;", "-\t\theight = oldBounds.bottom - oldBounds.top;", "-\t}\t", "-\tRect newBounds = new Rect ();", "-\tnewBounds.left = (short) (parentRect.left + x + inset.left);", "-\tnewBounds.top = (short) (parentRect.top + y + inset.top);", "-\tnewBounds.right = (short) (newBounds.left + width - inset.right - inset.left);", "-\tnewBounds.bottom = (short) (newBounds.top + height - inset.bottom - inset.top);\t", "-\tif (newBounds.bottom < newBounds.top) newBounds.bottom = newBounds.top;", "-\tif (newBounds.right < newBounds.left) newBounds.right = newBounds.left;", "-", "-\t/* Get bounds again, since the one above is in SWT coordinates */", "-\tOS.GetControlBounds (control, oldBounds);", "+\t\t/* Get bounds again, since the one above is in SWT coordinates */", "+\t\tOS.GetControlBounds (control, oldBounds);", "+\t\t", "+\t\t/* Check if anything changed */", "+\t\tsameOrigin = newBounds.left == oldBounds.left && newBounds.top == oldBounds.top;", "+\t\tsameExtent = (newBounds.right - newBounds.left) == (oldBounds.right - oldBounds.left) && (newBounds.bottom - newBounds.top) == (oldBounds.bottom - oldBounds.top);", "+\t\tif (sameOrigin && sameExtent) return 0;", "-\t/* Check if anything changed */", "-\tboolean sameOrigin = newBounds.left == oldBounds.left && newBounds.top == oldBounds.top;", "-\tboolean sameExtent = (newBounds.right - newBounds.left) == (oldBounds.right - oldBounds.left) && (newBounds.bottom - newBounds.top) == (oldBounds.bottom - oldBounds.top);", "-\tif (sameOrigin && sameExtent) return 0;", "-", "-\t/* Apply changes and invalidate appropriate rectangles */", "-\tint tempRgn = 0;", "-\tboolean visible = OS.IsControlVisible (control);", "-\tif (visible) {", "-\t\ttempRgn = OS.NewRgn ();", "-\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "-\t\tinvalWindowRgn (window, tempRgn);", "-\t}", "-\tOS.SetControlBounds (control, newBounds);", "-\tinvalidateVisibleRegion (control);", "-\tif (visible) {", "-\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "-\t\tinvalWindowRgn (window, tempRgn);", "-\t\tOS.DisposeRgn(tempRgn);", "+\t\t/* Apply changes and invalidate appropriate rectangles */", "+\t\tint tempRgn = 0;", "+\t\tboolean visible = OS.IsControlVisible (control);", "+\t\tif (visible) {", "+\t\t\ttempRgn = OS.NewRgn ();", "+\t\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "+\t\t\tinvalWindowRgn (window, tempRgn);", "+\t\t}", "+\t\tOS.SetControlBounds (control, newBounds);", "+\t\tinvalidateVisibleRegion (control);", "+\t\tif (visible) {", "+\t\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "+\t\t\tinvalWindowRgn (window, tempRgn);", "+\t\t\tOS.DisposeRgn(tempRgn);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87eca0d2630f23bbf4d6f37f379831ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "725ee2b7303752eb1e64c93649e634d4cdd6219b", "commitAfterChange": "99e696b1437056772b1235cbd9b6dda7dc15b1cc", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "  void showItem (TreeItem item, boolean scroll)", "signatureAfterChange": "  void showItem (TreeItem item, boolean scroll)", "diff": ["-\t\tint options = OS.kDataBrowserRevealWithoutSelecting | OS.kDataBrowserRevealAndCenterInView;", "+\t\tint options = OS.kDataBrowserRevealWithoutSelecting;", "+\t\t/*", "+\t\t* This code is intentionally commented, since kDataBrowserRevealAndCenterInView", "+\t\t* does not scroll the item to the center always (it seems to scroll to the", "+\t\t* end in some cases).", "+\t\t*/", "+\t\t//options |= OS.kDataBrowserRevealAndCenterInView;", "+\t\tint [] newTop = new int [1], newLeft = new int [1];", "+\t\tif (columnCount == 0) {", "+\t\t\tboolean fixScroll = false;", "+\t\t\tRect content = new Rect ();", "+\t\t\tif (OS.GetDataBrowserItemPartBounds (handle, item.id, columnId, OS.kDataBrowserPropertyContentPart, content) == OS.noErr) {", "+\t\t\t\tfixScroll = content.left < rect.x || content.left >= rect.x + rect.width;", "+\t\t\t\tif (!fixScroll) {", "+\t\t\t\t\tGC gc = new GC (this);", "+\t\t\t\t\tint contentWidth = calculateWidth (new int[]{item.id}, gc, false, 0, 0);", "+\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\tfixScroll =  content.left + contentWidth > rect.x + rect.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (fixScroll) {", "+\t\t\t\tint leftScroll = getLeftDisclosureInset (columnId);", "+\t\t\t\tint levelIndent = DISCLOSURE_COLUMN_LEVEL_INDENT;", "+\t\t\t\tif (OS.VERSION >= 0x1040) {", "+\t\t\t\t\tfloat [] metric = new float [1];", "+\t\t\t\t\tOS.DataBrowserGetMetric (handle, OS.kDataBrowserMetricDisclosureColumnPerDepthGap, null, metric);", "+\t\t\t\t\tlevelIndent = (int) metric [0];", "+\t\t\t\t}", "+\t\t\t\tTreeItem temp = item;", "+\t\t\t\twhile (temp.parentItem != null) {", "+\t\t\t\t\tleftScroll += levelIndent;", "+\t\t\t\t\ttemp = temp.parentItem;", "+\t\t\t\t}", "+\t\t\t\tOS.GetDataBrowserScrollPosition (handle, newTop, newLeft);", "+\t\t\t\tOS.SetDataBrowserScrollPosition (handle, newTop [0], leftScroll);", "+\t\t\t}", "+\t\t}", "-\t\tint [] newTop = new int [1], newLeft = new int [1];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff3eefdfebd3d01610aad9a61cecfb9c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "a58eb4a81b4e5691bc9999463d2239075c5e64e3", "commitAfterChange": "5b29a12fc8f54a16ee9d51ff6a6787120cdba944", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\twidget.init();", "-\twidget.setTitle(NSString.string());", "-\t\twidget.setBoxType(OS.NSBoxSeparator);", "+\t\t/*", "+\t\t * Feature in Cocoa: Separator control decides how to orient itself", "+\t\t * based on the width and height. If height > width it orients", "+\t\t * vertically, else it orients horizontally. ", "+\t\t * Fix is to have two native controls to implement the separator label.", "+\t\t * The top control (Custom NSBox) honors the bounds set by the", "+\t\t * user and the inner one (Separator NSBox) creates the separator", "+\t\t * with the correct orientation.", "+\t\t */", "+\t\tNSRect rect = new NSRect();", "+\t\trect.width = DEFAULT_WIDTH;", "+\t\trect.height = DEFAULT_HEIGHT;", "+\t\t", "+\t\twidget.initWithFrame(rect);", "+\t\twidget.setTitle(NSString.string());", "+\t\twidget.setBorderType(OS.NSNoBorder);", "+\t\twidget.setBoxType (OS.NSBoxCustom);", "+\t\twidget.setContentViewMargins (new NSSize());", "+", "+\t\tfloat /*double*/ lineWidth = widget.borderWidth ();", "+\t\tif ((style & SWT.HORIZONTAL) != 0) {", "+\t\t\trect.height = (int)Math.ceil (lineWidth * 2);", "+\t\t\trect.y = (DEFAULT_HEIGHT / 2) - (rect.height / 2);", "+\t\t} else {", "+\t\t\trect.width = (int)Math.ceil (lineWidth * 2);", "+\t\t\trect.x = (DEFAULT_WIDTH / 2) - (rect.width / 2);", "+\t\t}", "+\t\t", "+\t\tNSBox separator = (NSBox) new SWTBox().alloc();", "+\t\tseparator.initWithFrame(rect);", "+\t\tseparator.setBoxType(OS.NSBoxSeparator);", "+\t\tif ((style & SWT.HORIZONTAL) != 0) {", "+\t\t\tseparator.setAutoresizingMask(OS.NSViewWidthSizable | OS.NSViewMinYMargin | OS.NSViewMaxYMargin);", "+\t\t} else {", "+\t\t\tseparator.setAutoresizingMask(OS.NSViewHeightSizable| OS.NSViewMinXMargin | OS.NSViewMaxXMargin);", "+\t\t}", "+\t\t", "-\t\twidget.setContentView(child);", "+\t\tseparator.setContentView(child);", "-\t} else {", "+\t\t", "+\t\twidget.addSubview(separator);", "+\t\tthis.separator = separator;", "+\t} else {\t", "+\t\twidget.init();", "+\t\twidget.setTitle(NSString.string());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77ce6e606396ff2e11a66f99f32ea634", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public Cursor (Device device, int style)", "signatureAfterChange": " public Cursor(Device device, int style)", "diff": ["-public Cursor (Device device, int style) {", "+public Cursor(Device device, int style) {", "-\t", "-\thandle = OS.kThemeArrowCursor;\t\t// the default cursor", "-\t", "-\tcase SWT.CURSOR_ARROW:", "-\t\thandle= OS.kThemeArrowCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_WAIT:", "-\t\thandle= OS.kThemeSpinningCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_APPSTARTING:", "-\t\thandle= OS.kThemeWatchCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_HAND:", "-\t\thandle= OS.kThemeOpenHandCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_CROSS:", "-\t\thandle= OS.kThemeCrossCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_HELP: \t\t\t\tbreak;", "-\tcase SWT.CURSOR_SIZEALL: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZENESW: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZENS: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZENWSE: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZEWE: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZEN: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZES: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZEE: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZEW: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZENE: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZESE: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZESW: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZENW: \t\t\tbreak;", "-\tcase SWT.CURSOR_UPARROW: \t\t\tbreak;", "-\tcase SWT.CURSOR_IBEAM:", "-\t\thandle= OS.kThemeIBeamCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_NO:", "-\t\tif (NO_CURSOR == 0) {", "-\t\t\tshort[] data= new short[16];", "-\t\t\tNO_CURSOR= OS.NewCursor((short) 0, (short)0, data, data);", "+\t\tcase SWT.CURSOR_HAND: \t\t\thandle = OS.kThemePointingHandCursor; break;", "+\t\tcase SWT.CURSOR_ARROW: \t\thandle = OS.kThemeArrowCursor; break;", "+\t\tcase SWT.CURSOR_WAIT: \t\t\thandle = OS.kThemeSpinningCursor; break;", "+\t\tcase SWT.CURSOR_CROSS: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_APPSTARTING: \thandle = OS.kThemeWatchCursor; break;", "+\t\tcase SWT.CURSOR_HELP: \t\t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZEALL: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZENESW: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZENS: {", "+\t\t\torg.eclipse.swt.internal.carbon.Cursor cursor = new org.eclipse.swt.internal.carbon.Cursor();", "+\t\t\tcursor.data = SIZENS_SOURCE;", "+\t\t\tcursor.mask = SIZENS_MASK;", "+\t\t\tcursor.hotSpot_h = 7;", "+\t\t\tcursor.hotSpot_v = 7;", "+\t\t\thandle = OS.NewPtr(org.eclipse.swt.internal.carbon.Cursor.sizeof);", "+\t\t\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tOS.memcpy(handle, cursor, org.eclipse.swt.internal.carbon.Cursor.sizeof);\t", "+\t \t\tbreak;", "-\t\thandle = NO_CURSOR;", "-\t\tbreak;", "-\tdefault:", "-\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\tcase SWT.CURSOR_SIZENWSE: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZEWE: \t\thandle = OS.kThemeResizeLeftRightCursor; break;", "+\t\tcase SWT.CURSOR_SIZEN: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZES: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZEE: \t\thandle = OS.kThemeResizeRightCursor; break;", "+\t\tcase SWT.CURSOR_SIZEW: \t\thandle = OS.kThemeResizeLeftCursor; break;", "+\t\tcase SWT.CURSOR_SIZENE: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZESE: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZESW: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZENW: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_UPARROW: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_IBEAM: \t\thandle = OS.kThemeIBeamCursor; break;", "+\t\tcase SWT.CURSOR_NO: \t\t\thandle = OS.kThemeNotAllowedCursor; break;", "+\t\tdefault:", "+\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);"]}], "num": 1327}
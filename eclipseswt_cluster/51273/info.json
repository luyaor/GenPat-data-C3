{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9414e0619572b5f881b072932128378f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2db3b4ade1fae72d34324ded1511b66c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "483fa10c58617ef5c7747f0eb622f29ae07c8f30", "commitAfterChange": "65046fe56198703fc47a1bcc30243bde5e029379", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "  void setZOrder (Control sibling, boolean above, boolean fixChildren)", "signatureAfterChange": "  void setZOrder (Control sibling, boolean above, boolean fixChildren)", "diff": ["-\tif (above) {", "-\t\tif (window != 0) OS.gdk_window_raise (window);", "-\t\tif (fixChildren) parent.moveAbove (topHandle, siblingHandle);", "-\t} else {", "-\t\tif (window != 0) OS.gdk_window_lower (window);", "-\t\tif (fixChildren) parent.moveBelow (topHandle, siblingHandle);", "+\tif (window != 0) {", "+\t\tint siblingWindow = sibling != null ? OS.GTK_WIDGET_WINDOW (siblingHandle) : 0;", "+\t\tif (!OS.GDK_WINDOWING_X11 () || siblingWindow == 0) {", "+\t\t\t\tif (above) {", "+\t\t\t\t\tOS.gdk_window_raise (window);", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.gdk_window_lower (window);", "+\t\t\t\t}", "+\t\t} else {", "+\t\t\tXWindowChanges changes = new XWindowChanges ();", "+\t\t\tchanges.sibling = OS.gdk_x11_drawable_get_xid (siblingWindow);", "+\t\t\tchanges.stack_mode = above ? OS.Above : OS.Below;", "+\t\t\tint xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);", "+\t\t\tint xWindow = OS.gdk_x11_drawable_get_xid (window);", "+\t\t\tint xScreen = OS.XDefaultScreen (xDisplay);", "+\t\t\tint flags = OS.CWStackMode | OS.CWSibling;", "+\t\t\t/*", "+\t\t\t* Feature in X. If the receiver is a top level, XConfigureWindow ()", "+\t\t\t* will fail (with a BadMatch error) for top level shells because top", "+\t\t\t* level shells are reparented by the window manager and do not share", "+\t\t\t* the same X window parent.  This is the correct behavior but it is", "+\t\t\t* unexpected.  The fix is to use XReconfigureWMWindow () instead.", "+\t\t\t* When the receiver is not a top level shell, XReconfigureWMWindow ()", "+\t\t\t* behaves the same as XConfigureWindow ().", "+\t\t\t*/", "+\t\t\tOS.XReconfigureWMWindow (xDisplay, xWindow, xScreen, flags, changes);", "+\t\t}", "+\tif (fixChildren) {", "+\t\tif (above) {", "+\t\t\tparent.moveAbove (topHandle, siblingHandle);", "+\t\t} else {", "+\t\t\tparent.moveBelow (topHandle, siblingHandle);", "+\t\t}", "+\t}", "+\t/*", "+\t* Make sure that the parent handle is on the bottom of the stack", "+\t* when the parent children are siblings of the parent handle.", "+\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0d59b880e91b8caf03a3fd19c962300", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "e170fc54c6b4ebe87f5d0d3787b52ef7c74c6447", "commitAfterChange": "d569a8e4e3f708a454ad8d2b1a32242d0ad822fd", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 217, "signatureBeforeChange": "  void setZOrder (Control sibling, boolean above, boolean fixRelations, boolean fixChildren)", "signatureAfterChange": "  void setZOrder (Control sibling, boolean above, boolean fixRelations, boolean fixChildren)", "diff": ["-\t\t\tXWindowChanges changes = new XWindowChanges ();", "-\t\t\tchanges.sibling = OS.gdk_x11_drawable_get_xid (siblingWindow != 0 ? siblingWindow : redrawWindow);", "-\t\t\tchanges.stack_mode = above ? OS.Above : OS.Below;", "-\t\t\tif (redrawWindow != 0 && siblingWindow == 0) changes.stack_mode = OS.Below;", "-\t\t\tint /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);", "-\t\t\tint /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (window);", "-\t\t\tint xScreen = OS.XDefaultScreen (xDisplay);", "-\t\t\tint flags = OS.CWStackMode | OS.CWSibling;", "-\t\t\t/*", "-\t\t\t* Feature in X. If the receiver is a top level, XConfigureWindow ()", "-\t\t\t* will fail (with a BadMatch error) for top level shells because top", "-\t\t\t* level shells are reparented by the window manager and do not share", "-\t\t\t* the same X window parent.  This is the correct behavior but it is", "-\t\t\t* unexpected.  The fix is to use XReconfigureWMWindow () instead.", "-\t\t\t* When the receiver is not a top level shell, XReconfigureWMWindow ()", "-\t\t\t* behaves the same as XConfigureWindow ().", "-\t\t\t*/", "-\t\t\tOS.XReconfigureWMWindow (xDisplay, xWindow, xScreen, flags, changes);\t\t\t", "+\t\t\tint /*long*/ siblingW = siblingWindow != 0 ? siblingWindow : redrawWindow;", "+\t\t\tboolean stack_mode = above;", "+\t\t\tif (redrawWindow != 0 && siblingWindow == 0) stack_mode = false;", "+\t\t\trestackWindow (window, siblingW, stack_mode);", "-\t\t\t\tchanges.sibling = OS.gdk_x11_drawable_get_xid (window);", "-\t\t\t\tchanges.stack_mode = OS.Above;", "-\t\t\t\txWindow = OS.gdk_x11_drawable_get_xid (enableWindow);", "-\t\t\t\tOS.XReconfigureWMWindow (xDisplay, xWindow, xScreen, flags, changes);", "+\t\t\t\t restackWindow (enableWindow, window, true);"]}], "num": 51273}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93108dc937ff46e8fb39ce3e66a11c95", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfcad51a5f5f05b4e2b5e4c000bf2822", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "00ed21c8f8c77f61853a45cda676574d76d69e41", "commitAfterChange": "8e00f3751d53017bb47fe8df7b2fb0596267f9cb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Object getContents(Transfer transfer, int clipboards)", "signatureAfterChange": " public Object getContents(Transfer transfer, int clipboards)", "diff": ["-\tif ((clipboards & DND.CLIPBOARD) == 0) return null;", "-\tint xWindow = OS.XtWindow (shellHandle);", "-\tif (xWindow == 0) return null;", "-\t", "-\t// Open clipboard for retrieval", "-\tif (OS.XmClipboardStartRetrieve(xDisplay, xWindow, OS.XtLastTimestampProcessed(xDisplay)) != OS.XmClipboardSuccess) return null;", "-\tbyte[] data = null;", "-\tbyte[] type = null;", "-\ttry {", "-\t\t// Does Clipboard have data in required format?", "-\t\tint[] length = new int[1];", "-\t\tString[] supportedTypes = transfer.getTypeNames();", "-\t\tfor (int i = 0; i < supportedTypes.length; i++) {", "-\t\t\tbyte[] bName = Converter.wcsToMbcs(null, supportedTypes[i], true);", "-\t\t\tif (OS.XmClipboardInquireLength(xDisplay, xWindow, bName, length) == OS.XmClipboardSuccess) {", "-\t\t\t\ttype = bName;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t// Retrieve data from Clipboard", "-\t\tif (type == null) return null;", "-\t\tdata = new byte[length[0]];", "-\t\tif (OS.XmClipboardRetrieve(xDisplay, xWindow, type, data, length[0], new int[1], new int[1]) != OS.XmClipboardSuccess) {", "-\t\t\treturn null;", "-\t\t}", "-\t} finally {", "-\t\t// Close Clipboard", "-\t\tOS.XmClipboardEndRetrieve(xDisplay, xWindow);", "+\tObject result = null;", "+\tif ((clipboards & DND.CLIPBOARD) != 0) {", "+\t\t result = getContents(xDisplay, transfer, clipboardAtom);", "-\t", "-\t// Pass data to transfer agent for conversion to a Java Object", "-\t// Memory is allocated here to emulate the way Drag and Drop transfers data.", "-\tint pValue = OS.XtMalloc(data.length);", "-\tif (pValue == 0) return null;", "-\ttry {", "-\t\tOS.memmove(pValue, data, data.length);", "-\t\tTransferData transferData = new TransferData();", "-\t\ttransferData.type = OS.XmInternAtom (xDisplay, type, true);", "-\t\ttransferData.length = data.length;", "-\t\ttransferData.format = 8;", "-\t\ttransferData.pValue = pValue;", "-\t\ttransferData.result = 1;", "-\t\treturn transfer.nativeToJava(transferData);", "-\t} finally {", "-\t\t// Clean up allocated memory", "-\t\tOS.XtFree(pValue);", "+\tif (result != null) return result;", "+\tif ((clipboards & DND.SELECTION_CLIPBOARD) != 0) {", "+\t\tresult = getContents(xDisplay, transfer, primaryAtom);", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "530c4ad025df88c6da79b0fa8d7ea354", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "147d1615f621339f30d0227193f0b040907c9480", "commitAfterChange": "4f94a8e41c5f58fd8cc31f50891f992413c14d7f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getContents(Transfer transfer)", "signatureAfterChange": " public Object getContents(Transfer transfer)", "diff": ["-\tint retries = 0;", "-\tint status = OS.XmClipboardStartRetrieve(xDisplay, xWindow, OS.XtLastTimestampProcessed(xDisplay));", "-\twhile ( status == OS.XmClipboardLocked && retries < MAX_RETRIES) {", "-\t\tretries ++;", "-\t\tstatus = OS.XmClipboardStartRetrieve(xDisplay, xWindow, OS.XtLastTimestampProcessed(xDisplay));", "-\t};", "-\tif (status != OS.XmClipboardSuccess) return null;", "-\t", "-\t// Does Clipboard have data in required format?", "-\tbyte[] type = null;", "-\tint[] length = new int[1];", "-\tString[] supportedTypes = transfer.getTypeNames();", "-\tfor (int i = 0; i < supportedTypes.length; i++) {", "-\t\tbyte[] bName = Converter.wcsToMbcs(null, supportedTypes[i], true);", "-\t\tif (OS.XmClipboardInquireLength(xDisplay, xWindow, bName, length) == 1 /*OS.XmClipboardSuccess*/ ) {", "-\t\t\ttype = bName;", "-\t\t\tbreak;", "-\t\t}", "-\t}", "-\t", "-\t// Retrieve data from Clipboard", "+\tif (OS.XmClipboardStartRetrieve(xDisplay, xWindow, OS.XtLastTimestampProcessed(xDisplay)) != OS.XmClipboardSuccess) return null;", "-\tif (type != null) {", "-\t\tdata = new byte[length[0]];", "-\t\tstatus = OS.XmClipboardRetrieve(xDisplay, xWindow, type, data, length[0], new int[1], new int[1]);", "-\t\tif (status != OS.XmClipboardSuccess) {", "-\t\t\tdata = null;", "+\tbyte[] type = null;", "+\ttry {", "+\t\t// Does Clipboard have data in required format?", "+\t\tint[] length = new int[1];", "+\t\tString[] supportedTypes = transfer.getTypeNames();", "+\t\tfor (int i = 0; i < supportedTypes.length; i++) {", "+\t\t\tbyte[] bName = Converter.wcsToMbcs(null, supportedTypes[i], true);", "+\t\t\tif (OS.XmClipboardInquireLength(xDisplay, xWindow, bName, length) == OS.XmClipboardSuccess) {", "+\t\t\t\ttype = bName;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t// Retrieve data from Clipboard", "+\t\tif (type == null) return null;", "+\t\tdata = new byte[length[0]];", "+\t\tif (OS.XmClipboardRetrieve(xDisplay, xWindow, type, data, length[0], new int[1], new int[1]) != OS.XmClipboardSuccess) {", "+\t\t\treturn null;", "+\t\t}", "+\t} finally {", "+\t\t// Close Clipboard", "+\t\tOS.XmClipboardEndRetrieve(xDisplay, xWindow);", "-\t// Close Clipboard", "-\tstatus = OS.XmClipboardEndRetrieve(xDisplay, xWindow);", "-\t", "-\tif (data == null) return null;", "-", "-\tTransferData transferData = new TransferData();", "-\t/* Use the character encoding for the default locale */", "-\ttransferData.type = OS.XmInternAtom (xDisplay, type, true);", "-\ttransferData.pValue = OS.XtMalloc(data.length);", "-\tOS.memmove(transferData.pValue, data, data.length);", "-\ttransferData.length = data.length;", "-\ttransferData.format = 8;", "-\ttransferData.result = 1;", "-\t", "-\tObject result = transfer.nativeToJava(transferData);", "-\t", "-\t// Clean up allocated memory", "-\tOS.XtFree(transferData.pValue);", "-\t", "-\treturn result;", "+\tint pValue = OS.XtMalloc(data.length);", "+\tif (pValue == 0) return null;", "+\ttry {", "+\t\tOS.memmove(pValue, data, data.length);", "+\t\tTransferData transferData = new TransferData();", "+\t\ttransferData.type = OS.XmInternAtom (xDisplay, type, true);", "+\t\ttransferData.length = data.length;", "+\t\ttransferData.format = 8;", "+\t\ttransferData.pValue = pValue;", "+\t\ttransferData.result = 1;", "+\t\treturn transfer.nativeToJava(transferData);", "+\t} finally {", "+\t\t// Clean up allocated memory", "+\t\tOS.XtFree(pValue);", "+\t}"]}], "num": 44957}
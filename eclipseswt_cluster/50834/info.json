{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8905c9dd832f440787e232e8f26ecfd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d79b6e09c348cc2f4e88fb44f9a82b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageData.java", "commitBeforeChange": "881f889067c32dc9cc929042fa81de775a852ed3", "commitAfterChange": "3157b86f8a6b5c49725c9486eede898beaf8ba2d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r public ImageData scaledTo(int width, int height)", "signatureAfterChange": "\r public ImageData scaledTo(int width, int height)", "diff": ["-\t/* Create a destination image with no data,\r", "-\t * and then scale all of the data. */\r", "-\tImageData destImage = new ImageData(\r", "+\t/* Create a destination image with no data */\r", "+\tfinal boolean flipX = (width < 0);\r", "+\tif (flipX) width = - width;\r", "+\tfinal boolean flipY = (height < 0);\r", "+\tif (flipY) height = - height;\r", "+\r", "+\tImageData dest = new ImageData(\r", "-\tscaleImage(destImage, 0, 0, this.width, this.height, 0, 0, width, height);\r", "-\treturn destImage;\r", "-}\r", "+\t/* Scale the image contents */\r", "+\tif (palette.isDirect) blit(BLIT_SRC,\r", "+\t\tthis.data, this.depth, this.bytesPerLine, MSB_FIRST, 0, 0, this.width, this.height, 0, 0, 0,\r", "+\t\tALPHA_OPAQUE, null, 0,\r", "+\t\tdest.data, dest.depth, dest.bytesPerLine, MSB_FIRST, 0, 0, dest.width, dest.height, 0, 0, 0,\r", "+\t\tflipX, flipY);\r", "+\telse blit(BLIT_SRC,\r", "+\t\tthis.data, this.depth, this.bytesPerLine, MSB_FIRST, 0, 0, this.width, this.height, null, null, null,\r", "+\t\tALPHA_OPAQUE, null, 0,\r", "+\t\tdest.data, dest.depth, dest.bytesPerLine, MSB_FIRST, 0, 0, dest.width, dest.height, null, null, null,\r", "+\t\tflipX, flipY);\r", "+\t\r", "+\t/* Scale the image mask or alpha */\r", "+\t\tdest.maskPad = this.maskPad;\r", "+\t\tint destBpl = (dest.width + 7) / 8;\r", "+\t\tdestBpl = (destBpl + (dest.maskPad - 1)) / dest.maskPad * dest.maskPad;\r", "+\t\tdest.maskData = new byte[destBpl * dest.height];\r", "+\t\tint srcBpl = (this.width + 7) / 8;\r", "+\t\tsrcBpl = (srcBpl + (this.maskPad - 1)) / this.maskPad * this.maskPad;\r", "+\t\tblit(BLIT_SRC,\r", "+\t\t\tthis.maskData, 1, srcBpl, MSB_FIRST, 0, 0, this.width, this.height, null, null, null,\r", "+\t\t\tALPHA_OPAQUE, null, 0,\r", "+\t\t\tdest.maskData, 1, destBpl, MSB_FIRST, 0, 0, dest.width, dest.height, null, null, null,\r", "+\t\t\tflipX, flipY);\r", "+\t\tdest.alpha = this.alpha;\r", "+\t\tdest.alphaData = new byte[dest.width * dest.height];\r", "+\t\tblit(BLIT_SRC,\r", "+\t\t\tthis.alphaData, 8, this.width, MSB_FIRST, 0, 0, this.width, this.height, null, null, null,\r", "+\t\t\tALPHA_OPAQUE, null, 0,\r", "+\t\t\tdest.alphaData, 8, dest.width, MSB_FIRST, 0, 0, dest.width, dest.height, null, null, null,\r", "+\t\t\tflipX, flipY);\r", "+\treturn dest;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ebaad1c8e5dec12682132d527e98b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Text.java", "commitBeforeChange": "06cfb2472f7282169dadc570fa0ea5af36fdf8fd", "commitAfterChange": "958d022d9eb894b2a4d737dc59c9428f430b1c30", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test_addVerifyListenerLorg_eclipse_swt_events_VerifyListener()", "signatureAfterChange": "  public void test_addVerifyListenerLorg_eclipse_swt_events_VerifyListener()", "diff": ["-\twarnUnimpl(\"Test test_addVerifyListenerLorg_eclipse_swt_events_VerifyListener not written\");", "+\tfinal String line = \"Line1\";", "+\tfinal String newLine = \"NewLine1\";", "+\tboolean exceptionThrown = false;", "+\ttext.setText(\"\");", "+\t", "+\t// test null listener case", "+\ttry {", "+\t\ttext.addVerifyListener(null);", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t}", "+\tassertTrue(\"Expected exception not thrown\", exceptionThrown);", "+\t", "+\t// test append case", "+\tVerifyListener listener = new VerifyListener() {", "+\t\tpublic void verifyText(VerifyEvent event) {", "+\t\t\tlistenerCalled = true;", "+\t\t\tassertEquals(\"Verify event data invalid\", 0, event.start);", "+\t\t\tassertEquals(\"Verify event data invalid\", 0, event.end);", "+\t\t\tassertEquals(\"Verify event data invalid\", line, event.text);", "+\t\t\tevent.text = newLine;", "+\t\t}", "+\t};\t", "+\ttext.addVerifyListener(listener);", "+\tlistenerCalled = false;", "+\ttext.append(line);\t", "+\tassertTrue(\"append does not send event\", listenerCalled);", "+\tassertEquals(\"Listener failed\", newLine, text.getText());", "+\ttext.removeVerifyListener(listener);", "+", "+\t// test insert case", "+\tlistener = new VerifyListener() {", "+\t\tpublic void verifyText(VerifyEvent event) {", "+\t\t\tlistenerCalled = true;", "+\t\t\tassertEquals(\"Verify event data invalid\", 8, event.start);", "+\t\t\tassertEquals(\"Verify event data invalid\", 8, event.end);", "+\t\t\tassertEquals(\"Verify event data invalid\", line, event.text);", "+\t\t\tevent.text = newLine;", "+\t\t}", "+\t};\t", "+\ttext.addVerifyListener(listener);", "+\tlistenerCalled = false;", "+\ttext.insert(line);\t", "+\tassertTrue(\"insert does not send event\", listenerCalled);", "+\tassertEquals(\"Listener failed\", newLine + newLine, text.getText());", "+\ttext.removeVerifyListener(listener);", "+", "+\t// test setText case", "+\tlistener = new VerifyListener() {", "+\t\tpublic void verifyText(VerifyEvent event) {", "+\t\t\tlistenerCalled = true;", "+\t\t\tassertEquals(\"Verify event data invalid\", 0, event.start);", "+\t\t\tassertEquals(\"Verify event data invalid\", 16, event.end);", "+\t\t\tassertEquals(\"Verify event data invalid\", line, event.text);", "+\t\t\tevent.text = newLine;", "+\t\t}", "+\t};\t", "+\ttext.addVerifyListener(listener);", "+\ttext.setText(line);\t", "+\tassertTrue(\"setText does not send event\", listenerCalled);", "+\tassertEquals(\"Listener failed\", newLine, text.getText());", "+", "+\t// test remove case", "+\tlistenerCalled = false;\t", "+\ttext.removeVerifyListener(listener);", "+\ttext.setText(line);\t", "+\tassertTrue(\"Listener not removed\", listenerCalled == false);"]}], "num": 50834}
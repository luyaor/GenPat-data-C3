{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2eb4bc26ff74f379e78525119a05fa21", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e868da1682874ff97bec54ad08059a44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "5d484c6476bc4892c9825b0c805179fe47e751d4", "commitAfterChange": "2efd019c0428e46dfacf8317bc1b4ae9f271e166", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": " void drawBorder(GC gc)", "signatureAfterChange": " void drawBorder(GC gc)", "diff": ["-\t\tantialias(shape, ", "-\t\t\t\t  borderColor1.getRGB(),  ", "-\t\t\t\t  selectionBackground == null ? getBackground().getRGB() : selectionBackground.getRGB(), ", "-\t\t\t\t  single ? getBackground().getRGB() : getParent().getBackground().getRGB(),", "-\t\t\t\t  gc);", "+\t\tRGB inside = selectionBackground.getRGB();", "+\t\tif (backgroundImage != null || (gradientColors != null && gradientColors.length > 1)) inside = null;", "+\t\tRGB outside = single ? getBackground().getRGB() : getParent().getBackground().getRGB();", "+\t\tantialias(shape, borderColor1.getRGB(), inside, outside, gc);\t", "-\tif (borderLeft == 0) return;", "-\t\t\t", "+\t", "-\tif (borderLeft == 1) {", "-\t\tdrawFlatBorder(gc);", "-\t} else {", "-\t\tdraw3DBorder(gc);", "+\tif (borderLeft > 0) drawFlatBorder(gc);", "+\t", "+\t// fill in client area", "+\tif (!minimized){", "+\t\tint style = getStyle();", "+\t\tint width = size.x  - borderLeft - borderRight;", "+\t\tint height = size.y - borderTop - borderBottom - tabHeight - HIGHLIGHT_HEADER;", "+\t\tint x = xClient - marginWidth;", "+\t\tint y = yClient - marginHeight;", "+\t\tif (borderLeft > 0 && (style & SWT.FLAT) == 0) {", "+\t\t\twidth -= 2*HIGHLIGHT_MARGIN;", "+\t\t\theight -= HIGHLIGHT_MARGIN;", "+\t\t\tif (onBottom) {", "+\t\t\t\tint x1 = 1;", "+\t\t\t\tint x2 = size.x - 1;", "+\t\t\t\tint y1 = size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER;", "+\t\t\t\tgc.setForeground(selectedIndex == -1 ? getBackground() : selectionBackground);", "+\t\t\t\tfor (int i = 0; i < HIGHLIGHT_MARGIN; i++) {", "+\t\t\t\t\tgc.drawPolyline(new int[] {x1+i, y1-1, x1+i, 1+i, x2-1-i, 1+i, x2-1-i, y1});", "+\t\t\t\t}", "+\t\t\t} else {\t", "+\t\t\t\tint x1 = 1;", "+\t\t\t\tint x2 = size.x - 1;", "+\t\t\t\tint y2 = borderTop + tabHeight + HIGHLIGHT_HEADER;", "+\t\t\t\tgc.setForeground(selectedIndex == -1 ? getBackground() : selectionBackground);", "+\t\t\t\tfor (int i = 0; i < HIGHLIGHT_MARGIN; i++) {", "+\t\t\t\t\tgc.drawPolyline(new int[] {x1+i, y2, x1+i, size.y-2-i, x2-1-i, size.y-2-i, x2-1-i, y2-1});", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tgc.setBackground(getBackground());", "+\t\tgc.fillRectangle(x, y, width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e86f91581f2aaab3d9c2b7f06a6b3c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "8b437fb3842f95560dedea9ef4177462cda26613", "commitAfterChange": "548b08f4bee4c72ec1917d36850a817afc8e2973", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 61, "signatureBeforeChange": " void onPaint(Event event)", "signatureAfterChange": " void onPaint(Event event)", "diff": ["+\t\t\treturn;", "+\t", "+// Useful for debugging paint problems", "+//gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_GREEN));", "+//gc.fillRectangle(-10, -10, size.x + 20, size.y+20);", "+\t", "+\t// Fill in the empty spaces to the right and left of the tabs", "-\t\t// Fill in the empty spaces to the right and left of the tab", "-\t\t// with the background color", "-\t\tif (selectedIndex != -1) {", "-\t\t\tCTabItem2 item = items[selectedIndex];", "-\t\t\tint[] shapeLeft = null;", "-\t\t\tint[] shapeRight = null;", "-\t\t\tif (onBottom) {", "-\t\t\t\tint x = Math.max(0, borderLeft - 1);", "-\t\t\t\tint y = size.y - borderBottom - tabHeight;", "-\t\t\t\tint width = item.x - x;", "-\t\t\t\tint height = tabHeight;", "-\t\t\t\tif (borderRight > 0) height -= 1; // fill in behind border", "-\t\t\t\tshapeLeft = new int[BOTTOM_LEFT_OUTSIDE_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshapeLeft[index++] = x;", "-\t\t\t\tshapeLeft[index++] = y;", "-\t\t\t\tfor (int i = 0; i < BOTTOM_LEFT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshapeLeft[index++] = y+height+BOTTOM_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshapeLeft[index++] = x+width;", "-\t\t\t\tshapeLeft[index++] = y + height;", "-\t\t\t\tshapeLeft[index++] = x+width;", "-\t\t\t\tshapeLeft[index++] = y;", "-\t\t\t\t", "-\t\t\t\tx = item.x + item.width;", "-\t\t\t\twidth = size.x - borderRight - x;", "-\t\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\t\tshapeRight = new int[BOTTOM_RIGHT_OUTSIDE_CORNER.length+6];", "-\t\t\t\tindex = 0;", "-\t\t\t\tshapeRight[index++] = x;", "-\t\t\t\tshapeRight[index++] = y;", "-\t\t\t\tshapeRight[index++] = x;", "-\t\t\t\tshapeRight[index++] = y+height;", "-\t\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshapeRight[index++] = x+width+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshapeRight[index++] = y+height+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshapeRight[index++] = x+width;", "-\t\t\t\tshapeRight[index++] = y;", "-\t\t\t} else { // tabs on top", "-\t\t\t\tint x = Math.max(0, borderLeft - 1);", "-\t\t\t\tint y = borderTop;", "-\t\t\t\tint width = item.x - x;", "-\t\t\t\tint height = tabHeight;", "-\t\t\t\tshapeLeft = new int[TOP_LEFT_OUTSIDE_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshapeLeft[index++] = x;", "-\t\t\t\tshapeLeft[index++] = y+height;", "-\t\t\t\tfor (int i = 0; i < TOP_LEFT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshapeLeft[index++] = x+width;", "-\t\t\t\tshapeLeft[index++] = y;", "-\t\t\t\tshapeLeft[index++] = x+width;", "-\t\t\t\tshapeLeft[index++] = y+height;", "-\t\t\t\t", "-\t\t\t\tx = item.x + item.width;", "-\t\t\t\twidth = size.x - borderRight - x;", "-\t\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\t\tshapeRight = new int[TOP_RIGHT_OUTSIDE_CORNER.length+6];", "-\t\t\t\tindex = 0;", "-\t\t\t\tshapeRight[index++] = x;", "-\t\t\t\tshapeRight[index++] = y+height;", "-\t\t\t\tshapeRight[index++] = x;", "-\t\t\t\tshapeRight[index++] = y;", "-\t\t\t\tfor (int i = 0; i < TOP_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshapeRight[index++] = x+width+TOP_RIGHT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshapeRight[index++] = x+width;", "-\t\t\t\tshapeRight[index++] = y+height;", "-\t\t\t}", "-\t\t\t// Shape is non-rectangular, fill in gaps with parent colours\t", "-\t\t\tRegion r = new Region();", "+\t\tint[] shapeLeft = null;", "+\t\tint[] shapeRight = null;", "+\t\tif (onBottom) {", "-\t\t\tint y = onBottom ? size.y - borderBottom - tabHeight : borderTop;", "-\t\t\tint width = item.x - x;", "+\t\t\tint y = size.y - borderBottom - tabHeight;", "+\t\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "+\t\t\tif (borderRight > 0) height -= 1; // fill in behind border", "+\t\t\tshapeLeft = new int[BOTTOM_LEFT_OUTSIDE_CORNER.length+6];", "+\t\t\tint index = 0;", "+\t\t\tshapeLeft[index++] = x;", "+\t\t\tshapeLeft[index++] = y;", "+\t\t\tfor (int i = 0; i < BOTTOM_LEFT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_OUTSIDE_CORNER[2*i];", "+\t\t\t\tshapeLeft[index++] = y+height+BOTTOM_LEFT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeLeft[index++] = x+width;", "+\t\t\tshapeLeft[index++] = y + height;", "+\t\t\tshapeLeft[index++] = x+width;", "+\t\t\tshapeLeft[index++] = y;", "+\t\t\t", "+\t\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "+\t\t\twidth = size.x - borderRight - x;", "+\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "+\t\t\tshapeRight = new int[BOTTOM_RIGHT_OUTSIDE_CORNER.length+6];", "+\t\t\tindex = 0;", "+\t\t\tshapeRight[index++] = x;", "+\t\t\tshapeRight[index++] = y;", "+\t\t\tshapeRight[index++] = x;", "+\t\t\tshapeRight[index++] = y+height;", "+\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\tshapeRight[index++] = x+width+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i];", "+\t\t\t\tshapeRight[index++] = y+height+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeRight[index++] = x+width;", "+\t\t\tshapeRight[index++] = y;", "+\t\t} else { // tabs on top", "+\t\t\tint x = Math.max(0, borderLeft - 1);", "+\t\t\tint y = borderTop;", "+\t\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "+\t\t\tint height = tabHeight;", "+\t\t\tshapeLeft = new int[TOP_LEFT_OUTSIDE_CORNER.length+6];", "+\t\t\tint index = 0;", "+\t\t\tshapeLeft[index++] = x;", "+\t\t\tshapeLeft[index++] = y+height;", "+\t\t\tfor (int i = 0; i < TOP_LEFT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_OUTSIDE_CORNER[2*i];", "+\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeLeft[index++] = x+width;", "+\t\t\tshapeLeft[index++] = y;", "+\t\t\tshapeLeft[index++] = x+width;", "+\t\t\tshapeLeft[index++] = y+height;", "+\t\t\t", "+\t\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "+\t\t\twidth = size.x - borderRight - x;", "+\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "+\t\t\tshapeRight = new int[TOP_RIGHT_OUTSIDE_CORNER.length+6];", "+\t\t\tindex = 0;", "+\t\t\tshapeRight[index++] = x;", "+\t\t\tshapeRight[index++] = y+height;", "+\t\t\tshapeRight[index++] = x;", "+\t\t\tshapeRight[index++] = y;", "+\t\t\tfor (int i = 0; i < TOP_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\tshapeRight[index++] = x+width+TOP_RIGHT_OUTSIDE_CORNER[2*i];", "+\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeRight[index++] = x+width;", "+\t\t\tshapeRight[index++] = y+height;", "+\t\t}", "+\t\t// Shape is non-rectangular, fill in gaps with parent colours\t", "+\t\tRegion r = new Region();", "+\t\tint x = Math.max(0, borderLeft - 1);", "+\t\tint y = onBottom ? size.y - borderBottom - tabHeight : borderTop;", "+\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "+\t\tint height = tabHeight;", "+\t\tr.add(new Rectangle(x, y, width, height));", "+\t\tr.subtract(shapeLeft);", "+\t\tgc.setBackground(getParent().getBackground());", "+\t\tfillRegion(gc, r);", "+\t\tgc.setBackground(background);", "+\t\tgc.fillPolygon(shapeLeft);", "+\t\t", "+\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "+\t\twidth = size.x - borderRight - x;", "+\t\tif (width > 0) {", "+\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "+\t\t\tr.subtract(r); // clear region", "-\t\t\tr.subtract(shapeLeft);", "+\t\t\tr.subtract(shapeRight);", "-\t\t\tgc.fillPolygon(shapeLeft);", "-\t\t\t", "-\t\t\tx = item.x + item.width;", "-\t\t\twidth = size.x - borderRight - x;", "-\t\t\tif (width > 0) {", "-\t\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\t\tr.subtract(r); // clear region", "-\t\t\t\tr.add(new Rectangle(x, y, width, height));", "-\t\t\t\tr.subtract(shapeRight);", "-\t\t\t\tgc.setBackground(getParent().getBackground());", "-\t\t\t\tfillRegion(gc, r);", "-\t\t\t\tgc.setBackground(background);", "-\t\t\t\tgc.fillPolygon(shapeRight);", "-\t\t\t}", "-\t\t\tr.dispose();", "+\t\t\tgc.fillPolygon(shapeRight);", "+\t\tr.dispose();", "-\t\tRectangle rect = item.getBounds();", "-\t\tif (event.getBounds().intersects(rect.x, rect.y, rect.width + CURVE_WIDTH, rect.height)) {", "-\t\t\titem.onPaint(gc, true);", "-\t\t}", "+\t\titem.onPaint(gc, true);", "+\t} else {", "+\t\t// no selected tab - draw line across bottom of all tabs", "+\t\tint x = borderLeft;", "+\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "+\t\tint width = size.x - borderLeft - borderRight;", "+\t\tint height = HIGHLIGHT_HEADER - 1;", "+\t\tgc.setBackground(getBackground());", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t\tx = borderLeft;", "+\t\ty = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tgc.setForeground(borderColor1);", "+\t\tgc.drawLine(x, y, x + width, y);", "-", "+\t", "-\t"]}], "num": 18192}
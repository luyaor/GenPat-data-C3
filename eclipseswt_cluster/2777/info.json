{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "839289a409e755f9a687c44c719e5fd0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a74d560a218b8f5e35952665f87d3793", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "ca8e949258373f625fdcfbe9471eef04547d94a6", "commitAfterChange": "124d04b09d8a7b6f07bff234cf4e5188eb61e9cb", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "  boolean setKeyState (Event event, int type, int theEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, int theEvent)", "diff": ["-\t\t\t\tevent.keyCode = result & 0x7f;", "+\t\t\t\tif (result <= 0x7f) {", "+\t\t\t\t\tevent.keyCode = result & 0x7f;", "+\t\t\t\t} else {", "+\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "+\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "+\t\t\t\t\tint [] encoding = new int [1];", "+\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tint [] encodingInfo = new int [1];", "+\t\t\t\t\tOS.CreateTextToUnicodeInfoByEncoding (encoding [0], encodingInfo);", "+\t\t\t\t\tif (encodingInfo [0] != 0) {", "+\t\t\t\t\t\tchar [] chars = new char [1];", "+\t\t\t\t\t\tint [] nchars = new int [1];", "+\t\t\t\t\t\tbyte [] buffer = new byte [2];", "+\t\t\t\t\t\tbuffer [0] = 1;", "+\t\t\t\t\t\tbuffer [1] = (byte) (result & 0xFF);", "+\t\t\t\t\t\tOS.ConvertFromPStringToUnicode (encodingInfo [0], buffer, chars.length * 2, nchars, chars);", "+\t\t\t\t\t\tOS.DisposeTextToUnicodeInfo (encodingInfo);", "+\t\t\t\t\t\tevent.keyCode = chars [0];", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95ae860512e2dd41ad16a860867a5579", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "6180557aa3fada2bc7d0c8c5852d95f2f944e839", "commitAfterChange": "3cc117a084f09d9b31be6895a4f37988f03ca116", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  public boolean post (Event event)", "signatureAfterChange": "  public boolean post(Event event)", "diff": ["-public boolean post (Event event) {", "+public boolean post(Event event) {", "+\tint type = event.type;", "+\tswitch (type) {", "+\t\tcase SWT.KeyDown :", "+\t\tcase SWT.KeyUp : {", "+\t\t\tint vKey = Display.untranslateKey (event.keyCode);", "+\t\t\tif (vKey != 0) {", "+\t\t\t\treturn OS.CGPostKeyboardEvent (0, vKey, type == SWT.KeyDown) == 0;", "+\t\t\t} else {", "+\t\t\t\tvKey = -1;", "+\t\t\t\tint code = -1, kchrPtr = OS.GetScriptManagerVariable ((short) OS.smKCHRCache);", "+\t\t\t\tchar key = event.character;", "+\t\t\t\tint [] state = new int [1];", "+\t\t\t\tfor (int i = 0 ; i <= 0x7F ; i++) {", "+\t\t\t\t\tint result = OS.KeyTranslate (kchrPtr, (short) i, state);", "+\t\t\t\t\tif (result <= 0x7f) {", "+\t\t\t\t\t\tcode = result & 0x7f;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint [] encoding = new int [1];", "+\t\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "+\t\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "+\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint [] encodingInfo = new int [1];", "+\t\t\t\t\t\tOS.CreateTextToUnicodeInfoByEncoding (encoding [0], encodingInfo);", "+\t\t\t\t\t\tif (encodingInfo [0] != 0) {", "+\t\t\t\t\t\t\tchar [] chars = new char [1];", "+\t\t\t\t\t\t\tint [] nchars = new int [1];", "+\t\t\t\t\t\t\tbyte [] buffer = new byte [2];", "+\t\t\t\t\t\t\tbuffer [0] = 1;", "+\t\t\t\t\t\t\tbuffer [1] = (byte) (result & 0xFF);", "+\t\t\t\t\t\t\tOS.ConvertFromPStringToUnicode (encodingInfo [0], buffer, chars.length * 2, nchars, chars);", "+\t\t\t\t\t\t\tOS.DisposeTextToUnicodeInfo (encodingInfo);", "+\t\t\t\t\t\t\tcode = chars [0];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (code == key) {", "+\t\t\t\t\t\tvKey = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (vKey == -1) return false;", "+\t\t\t\treturn OS.CGPostKeyboardEvent (key, vKey, type == SWT.KeyDown) == 0;", "+\t\t\t}", "+\t\t}", "+\t\tcase SWT.MouseDown :", "+\t\tcase SWT.MouseMove : ", "+\t\tcase SWT.MouseUp : {", "+\t\t\tCGPoint mouseCursorPosition = new CGPoint ();", "+\t\t\tif (type == SWT.MouseMove) {", "+\t\t\t\tmouseCursorPosition.x = event.x;", "+\t\t\t\tmouseCursorPosition.y = event.y;", "+\t\t\t\tint chord = OS.GetCurrentEventButtonState ();", "+\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 1, ((chord & 0x1) != 0)) == 0;", "+\t\t\t} else {", "+\t\t\t\tif (event.button != 1) return false;", "+\t\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\tOS.GetGlobalMouse (pt);", "+\t\t\t\tmouseCursorPosition.x = pt.h;", "+\t\t\t\tmouseCursorPosition.y = pt.v;", "+\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 1, type == SWT.MouseDown) == 0;", "+\t\t\t}", "+\t\t}", "+\t} "]}], "num": 2777}
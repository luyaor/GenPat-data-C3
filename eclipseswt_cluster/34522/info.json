{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afd8905b7e39079297e2dbebda7d488a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea311de28d94e6f6f0e2ed54e18b99dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "de766ef242b8ebbad306657d3d5abb2d86c9b9e7", "commitAfterChange": "fcb03e79dde32a89759aa5430057cfbfb123e6d3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t * Feature in Motif. If a label's labelType is XmSTRING but it", "-\t * has no label set into it yet, recomputing the size will", "-\t * not take into account the height of the font, as we would", "-\t * like it to. Take care of this case.", "-\t */", "+\t* Feature in Motif. If a label's labelType is XmSTRING but ", "+\t* the label string is empty, recomputing the size will", "+\t* not take into account the height of the font, as we would", "+\t* like it to. Take care of this case.", "+\t* ", "+\t* Note:  When the label string is empty a single space is set", "+\t* into the widget. So the preferred height is computed properly.", "+\t* Just make sure the preferred width is zero.", "+\t*/", "-\t\theight += getFontHeight ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5be1c034c4667633f5f40043b2568a5e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "ff915b6fd2c7ce8700ffd3b748d1d9aa6cfbed47", "commitAfterChange": "3876ff531add8d32f9c402f543007eba72ce70f3", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " @Override Point getWindowOrigin ()", "signatureAfterChange": " @Override Point getWindowOrigin ()", "diff": ["-\t/*", "-\t * Need to overide this since the handle attribute will not be intialized", "-\t * if the shell is not made visible. So need to get the location from the shell handle", "-\t * getLocation() method in shell will provide us the location of the control", "-\t */", "-", "-\treturn getLocation();", "+\tif (!mapped) {", "+\t\t/*", "+\t\t * Special case: The handle attributes are not initialized until the", "+\t\t * shell is made visible, so gdk_window_get_origin () will return {0, 0}.", "+\t\t * ", "+\t\t * Once the shell is realized, gtk_window_get_position () includes", "+\t\t * window trims etc. from the window manager. That's why getLocation ()", "+\t\t * is not safe to use after the shell has been made visible.", "+\t\t */", "+\t\treturn getLocation ();", "+\t}", "+\treturn super.getWindowOrigin( );"]}], "num": 34522}
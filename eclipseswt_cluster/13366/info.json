{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e21f0f7d3590d2c6d972e8d73dca7ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "996665540fbe414ab95160a4c4ddb5af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "1265452bee8afa80211325ce57c825c332bf3b69", "commitAfterChange": "2fd6873ba6b589bfe796429ee32eb9fd672e966d", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void setImage (Image image)", "signatureAfterChange": " public void setImage (Image image)", "diff": ["-\t/*", "-\t* Feature in WinCE.  WM_SETICON and WM_GETICON set the icon", "-\t* for the window class, not the window instance.  This means", "-\t* that it is possible to set an icon into a window and then", "-\t* later free the icon, thus freeing the icon for every window.", "-\t* The fix is to avoid the API.", "-\t* ", "-\t* On WinCE PPC, icons in windows are not displayed anyways.", "-\t*/", "-\tif (OS.IsWinCE) {", "-\t\tthis.image = image;", "-\t\treturn;", "+\tthis.image = image;", "+\tsetImages (image, images);", "+}", "-\tint hImage = 0;", "-\tif (icon != null) icon.dispose ();", "-\ticon = null;", "-\t\tswitch (image.type) {", "-\t\t\tcase SWT.BITMAP:", "-\t\t\t\tImageData data = image.getImageData ();", "-\t\t\t\tImageData mask = data.getTransparencyMask ();", "-\t\t\t\ticon = new Image (display, data, mask);", "-\t\t\t\thImage = icon.handle;", "-\t\t\t\tbreak;", "-\t\t\tcase SWT.ICON:", "-\t\t\t\thImage = image.handle;", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\treturn;", "-\tthis.image = image;", "-\tOS.SendMessage (handle, OS.WM_SETICON, OS.ICON_BIG, hImage);", "-\t* Bug in Windows.  When WM_SETICON is used to remove an", "-\t* icon from the window trimmings for a window with the", "-\t* extended style bits WS_EX_DLGMODALFRAME, the window", "-\t* trimmings do not redraw to hide the previous icon.", "-\t* The fix is to force a redraw.", "-\t*/", "-\t\tif (icon == null && (style & SWT.BORDER) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3072223487bcf1beff43bc51ac539205", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "64b0d3886f858ae9ed75f9caba6de9cc0ef40524", "commitAfterChange": "0e65a271847da0a71c09af43153a1e755642fadd", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": "  LRESULT wmMouseWheel (int hwnd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmMouseWheel (int hwnd, int wParam, int lParam)", "diff": ["-LRESULT wmMouseWheel (int /*long*/ hwnd, int /*long*/ wParam, int /*long*/ lParam) {", "-\tint [] linesToScroll = new int [1];", "-\tint detail;", "-\tOS.SystemParametersInfo (OS.SPI_GETWHEELSCROLLLINES, 0, linesToScroll, 0);", "-\tif (linesToScroll [0] == OS.WHEEL_PAGESCROLL) {", "-\t\tdetail = SWT.SCROLL_PAGE;", "-\t\tdetail = SWT.SCROLL_LINE;", "-\t\tdelta *= linesToScroll [0];", "-\t/* Check if the delta and the remainder have the same direction (sign) */", "-\tif ((delta ^ display.scrollRemainder) >= 0) delta += display.scrollRemainder;", "-\tdisplay.scrollRemainder = delta % OS.WHEEL_DELTA; ", "-\tif (!hooks (SWT.MouseWheel) && !filters (SWT.MouseWheel)) return null;", "-\tif (!sendMouseEvent (SWT.MouseWheel, 0, count, detail, true, hwnd, OS.WM_MOUSEWHEEL, wParam, lParam)) {", "-\t\treturn LRESULT.ZERO;", "-\t}", "-\treturn null;", "+", "+LRESULT wmMouseWheel (int /*long*/ hwnd, int /*long*/ wParam, int /*long*/ lParam) {", "+\treturn sendMouseWheelEvent(SWT.MouseWheel, hwnd, wParam, lParam) ? null : LRESULT.ZERO;", "+}"]}], "num": 13366}
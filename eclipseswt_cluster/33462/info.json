{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e26b9cb8145a139276381534d33af946", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dac1c2efa49875c349feec2fb46c5b24", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "7eac2a1a696972a97690b41e33c09ba04850ae35", "commitAfterChange": "7c6ddb416fb1f0b0c28923c087230687635c222d", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "\r public boolean sleep ()", "signatureAfterChange": "\r public boolean sleep ()", "diff": ["-\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);\r", "-\t* Bug in Xt.  Under certain circumstances Xt waits\r", "-\t* forever looking for X events, ignoring alternate\r", "-\t* inputs.  The fix is to never sleep forever.\r", "+\t* This code is intentionally commented.\r", "-\tint sleepID = OS.XtAppAddTimeOut (xtContext, 100, 0, 0);\r", "-\tboolean result = OS.XtAppPeekEvent (xtContext, xEvent);\r", "-\tif (sleepID != 0) OS.XtRemoveTimeOut (sleepID);\r", "-\treturn result;\r", "+//\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);\r", "+//\t/*\r", "+//\t* Bug in Xt.  Under certain circumstances Xt waits\r", "+//\t* forever looking for X events, ignoring alternate\r", "+//\t* inputs.  The fix is to never sleep forever.\r", "+//\t*/\r", "+//\tint sleepID = OS.XtAppAddTimeOut (xtContext, 100, 0, 0);\r", "+//\tboolean result = OS.XtAppPeekEvent (xtContext, xEvent);\r", "+//\tif (sleepID != 0) OS.XtRemoveTimeOut (sleepID);\r", "+//\treturn result;\r", "+\t\r", "+\tint display_fd = OS.ConnectionNumber (xDisplay);\r", "+\tint max_fd = display_fd > read_fd ? display_fd : read_fd;\r", "+\tOS.FD_ZERO (fd_set);\r", "+\tOS.FD_SET (display_fd, fd_set);\r", "+\tOS.FD_SET (read_fd, fd_set);\r", "+\ttimeout [0] = 0;\r", "+\ttimeout [1] = 100;\r", "+\tOS.select (max_fd + 1, fd_set, null, null, timeout);\r", "+\treturn OS.FD_ISSET (display_fd, fd_set);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d2fcfeb1004a595a866f8c1e6bbb985", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "8dc10e489fc130b2c1925f90b31b21e7d55d153c", "commitAfterChange": "5b2c951e7c4ab1cad8672d53227193a151c54df6", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " public boolean sleep ()", "signatureAfterChange": " public boolean sleep ()", "diff": ["+//\tboolean result;", "-//\t/*", "-//\t* Bug in Xt.  Under certain circumstances Xt waits", "-//\t* forever looking for X events, ignoring alternate", "-//\t* inputs.  The fix is to never sleep forever.", "-//\t*/", "-//\tint sleepID = OS.XtAppAddTimeOut (xtContext, 100, 0, 0);", "-//\tboolean result = OS.XtAppPeekEvent (xtContext, xEvent);", "-//\tif (sleepID != 0) OS.XtRemoveTimeOut (sleepID);", "+//\tdo {", "+//\t\t/*", "+//\t\t* Bug in Xt.  Under certain circumstances Xt waits", "+//\t\t* forever looking for X events, ignoring alternate", "+//\t\t* inputs.  The fix is to never sleep forever.", "+//\t\t*/", "+//\t\t//int sleepID = OS.XtAppAddTimeOut (xtContext, 50, 0, 0);", "+//\t\tresult = OS.XtAppPeekEvent (xtContext, xEvent);", "+//\t\t//if (sleepID != 0) OS.XtRemoveTimeOut (sleepID);", "+//\t} while (!result && getMessageCount () == 0 && OS.XtAppPending (xtContext) == 0);", "-\t", "-\tint result;", "+", "+\t/* Wait for input */", "+\tint result, status;", "+\tboolean workProc = true;", "-\tint max_fd = display_fd > read_fd ? display_fd : read_fd;", "+\tint max_fd = display_fd > read_fd ? display_fd : read_fd;", "-\t} while (result == 0 && OS.XtAppPending (xtContext) == 0 && getMessageCount () == 0);", "+\t\t/*", "+\t\t* Force Xt work procs that were added by native", "+\t\t* widgets to run by calling XtAppProcessEvent().", "+\t\t* Ensure that XtAppProcessEvent() does not block", "+\t\t* by adding a time out.", "+\t\t*/", "+\t\tstatus = OS.XtAppPending (xtContext);", "+\t\tif (workProc && status == 0) {", "+\t\t\tworkProc = false;", "+\t\t\tOS.XtAppAddTimeOut (xtContext, 1, 0, 0);", "+\t\t\tOS.XtAppProcessEvent (xtContext, OS.XtIMTimer);", "+\t\t}", "+\t} while (result == 0 && getMessageCount () == 0 && status == 0);"]}], "num": 33462}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ded39737a44782b0e644904683fe247f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "173ba5a910c0494a2fc9b7ff10c2d8d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "fb1da3f03b1857a16fe11c426e420376a5d20e97", "commitAfterChange": "aef76dfd13cf214c26f3af2061d0fb9194e9264a", "methodNumberBeforeChange": 335, "methodNumberAfterChange": 335, "signatureBeforeChange": " \tint get_columnHeaderCells(int ppCellAccessibles, int pNColumnHeaderCells)", "signatureAfterChange": " \tint get_columnHeaderCells(int ppCellAccessibles, int pNColumnHeaderCells)", "diff": ["-\t\t// TODO: Handle array, not just first element. NOTE: NOT variant", "-\t\tAccessible accessible = event.accessibles[0];", "-\t\tif (accessible != null) {", "-\t\t\taccessible.AddRef();", "-\t\t\tsetPtrVARIANT(ppCellAccessibles, COM.VT_DISPATCH, accessible.getAddress());", "+\t\tif (DEBUG) print(\"IAccessibleTableCell::get_columnHeaderCells() returning \" + (event.accessibles == null ? \"null\" : \"accessibles[\" + event.accessibles.length + \"]\"));", "+\t\tif (event.accessibles == null || event.accessibles.length == 0) {", "+\t\t\tCOM.MoveMemory(ppCellAccessibles, new int /*long*/[] { 0 }, OS.PTR_SIZEOF);", "+\t\t\tCOM.MoveMemory(pNColumnHeaderCells, new int [] { 0 }, 4);", "+\t\t\treturn COM.S_FALSE;", "-\t\tCOM.MoveMemory(pNColumnHeaderCells, new int [] { event.count }, 4);", "+\t\tint length = event.accessibles.length;", "+\t\tint /*long*/ pv = COM.CoTaskMemAlloc(length * OS.PTR_SIZEOF);", "+\t\tint count = 0;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tAccessible accessible = event.accessibles[i];", "+\t\t\tif (accessible != null) {", "+\t\t\t\taccessible.AddRef();", "+\t\t\t\tCOM.MoveMemory(pv + i * OS.PTR_SIZEOF, new int /*long*/[] { accessible.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tcount++;", "+\t\t\t}", "+\t\t}", "+\t\tCOM.MoveMemory(ppCellAccessibles, new int /*long*/ [] { pv }, OS.PTR_SIZEOF);", "+\t\tCOM.MoveMemory(pNColumnHeaderCells, new int [] { count }, 4);", "-\t\t// TODO: @retval S_FALSE if there is no header, [out] values are NULL and 0 respectively"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9689828762e2d2403c1d34640b9f15b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "fb1da3f03b1857a16fe11c426e420376a5d20e97", "commitAfterChange": "aef76dfd13cf214c26f3af2061d0fb9194e9264a", "methodNumberBeforeChange": 338, "methodNumberAfterChange": 338, "signatureBeforeChange": " \tint get_rowHeaderCells(int ppCellAccessibles, int pNRowHeaderCells)", "signatureAfterChange": " \tint get_rowHeaderCells(int ppCellAccessibles, int pNRowHeaderCells)", "diff": ["-\t\t// TODO: Handle array, not just first element. NOTE: NOT variant", "-\t\tAccessible accessible = event.accessibles[0];", "-\t\tif (accessible != null) {", "-\t\t\taccessible.AddRef();", "-\t\t\tsetPtrVARIANT(ppCellAccessibles, COM.VT_DISPATCH, accessible.getAddress());", "+\t\tif (DEBUG) print(\"IAccessibleTableCell::get_rowHeaderCells() returning \" + (event.accessibles == null ? \"null\" : \"accessibles[\" + event.accessibles.length + \"]\"));", "+\t\tif (event.accessibles == null || event.accessibles.length == 0) {", "+\t\t\tCOM.MoveMemory(ppCellAccessibles, new int /*long*/[] { 0 }, OS.PTR_SIZEOF);", "+\t\t\tCOM.MoveMemory(pNRowHeaderCells, new int [] { 0 }, 4);", "+\t\t\treturn COM.S_FALSE;", "-\t\tCOM.MoveMemory(pNRowHeaderCells, new int [] { event.count }, 4);", "+\t\tint length = event.accessibles.length;", "+\t\tint /*long*/ pv = COM.CoTaskMemAlloc(length * OS.PTR_SIZEOF);", "+\t\tint count = 0;", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tAccessible accessible = event.accessibles[i];", "+\t\t\tif (accessible != null) {", "+\t\t\t\taccessible.AddRef();", "+\t\t\t\tCOM.MoveMemory(pv + i * OS.PTR_SIZEOF, new int /*long*/[] { accessible.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tcount++;", "+\t\t\t}", "+\t\t}", "+\t\tCOM.MoveMemory(ppCellAccessibles, new int /*long*/ [] { pv }, OS.PTR_SIZEOF);", "+\t\tCOM.MoveMemory(pNRowHeaderCells, new int [] { count }, 4);", "-\t\t// TODO: @retval S_FALSE if there is no header, [out] values are NULL and 0 respectively"]}], "num": 32122}
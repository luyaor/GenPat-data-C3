{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efb80ca8e0d0b9f67c5c5cb9b7b34c3e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33d05e44583e89143fc4792a26165e66", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "32519857d7ad2eb01dc0315f618d4bd0cd96d2c6", "commitAfterChange": "6687475724d9098125bacb1518a341736c8eafd3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "  static int browserProc(int id, int sel, int arg0, int arg1)", "signatureAfterChange": "  static int browserProc(int id, int sel, int arg0, int arg1)", "diff": ["-\tint jniRef = OS.objc_msgSend(id, OS.sel_tag);", "-\tif (jniRef == 0 || jniRef == -1) return 0;", "-\tSafari widget = (Safari)OS.JNIGetObject(jniRef);", "+\tWidget widget = Display.getCurrent().findWidget(id);", "+\tSafari safari = (Safari)((Browser)widget).webBrowser;", "-\t\twidget.webView_didChangeLocationWithinPageForFrame(arg0, arg1);", "+\t\tsafari.webView_didChangeLocationWithinPageForFrame(arg0, arg1);", "-\t\twidget.webView_didFinishLoadForFrame(arg0, arg1);", "+\t\tsafari.webView_didFinishLoadForFrame(arg0, arg1);", "-\t\twidget.webView_didStartProvisionalLoadForFrame(arg0, arg1);", "+\t\tsafari.webView_didStartProvisionalLoadForFrame(arg0, arg1);", "-\t\twidget.webView_didCommitLoadForFrame(arg0, arg1);", "+\t\tsafari.webView_didCommitLoadForFrame(arg0, arg1);", "-\t\twidget.webView_setFrame(arg0, arg1);", "+\t\tsafari.webView_setFrame(arg0, arg1);", "-\t\treturn widget.webView_createWebViewWithRequest(arg0, arg1);\t\t", "+\t\treturn safari.webView_createWebViewWithRequest(arg0, arg1);\t\t", "-\t\twidget.webView_setStatusBarVisible(arg0, arg1);", "+\t\tsafari.webView_setStatusBarVisible(arg0, arg1);", "-\t\twidget.webView_setResizable(arg0, arg1);", "+\t\tsafari.webView_setResizable(arg0, arg1);", "-\t\twidget.webView_setStatusText(arg0, arg1);", "+\t\tsafari.webView_setStatusText(arg0, arg1);", "-\t\twidget.webView_setToolbarsVisible(arg0, arg1);", "+\t\tsafari.webView_setToolbarsVisible(arg0, arg1);", "-\t\twidget.webView_runJavaScriptAlertPanelWithMessage(arg0, arg1);", "+\t\tsafari.webView_runJavaScriptAlertPanelWithMessage(arg0, arg1);", "-\t\treturn widget.webView_runJavaScriptConfirmPanelWithMessage(arg0, arg1);", "+\t\treturn safari.webView_runJavaScriptConfirmPanelWithMessage(arg0, arg1);", "-\t\twidget.webView_runOpenPanelForFileButtonWithResultListener(arg0, arg1);", "+\t\tsafari.webView_runOpenPanelForFileButtonWithResultListener(arg0, arg1);", "-\t\twidget.download_decideDestinationWithSuggestedFilename(arg0, arg1);", "+\t\tsafari.download_decideDestinationWithSuggestedFilename(arg0, arg1);", "-\t\twidget.webView_printFrameView(arg0, arg1);", "+\t\tsafari.webView_printFrameView(arg0, arg1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be99398e257cee05dc85c4fb4151d214", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 9, "signatureBeforeChange": " int handleCallback(int selector, int arg0, int arg1, int arg2, int arg3)", "signatureAfterChange": "  static int browserProc(int id, int sel, int arg0, int arg1, int arg2, int arg3, int arg4)", "diff": ["+", "+static int browserProc(int id, int sel, int arg0, int arg1, int arg2, int arg3, int arg4) {", "+\tint jniRef = OS.objc_msgSend(id, OS.sel_tag);", "+\tif (jniRef == 0 || jniRef == -1) return 0;", "+\tSafari widget = (Safari)OS.JNIGetObject(jniRef);", "+\tif (widget == null) return 0;", "+\tif (sel == OS.sel_webView_1resource_1willSendRequest_1redirectResponse_1fromDataSource_1) {", "+\t\treturn widget.webView_resource_willSendRequest_redirectResponse_fromDataSource(arg0, arg1, arg2, arg3, arg4);", "+\t} else if (sel == OS.sel_webView_1decidePolicyForMIMEType_1request_1frame_1decisionListener_1) {", "+\t\twidget.webView_decidePolicyForMIMEType_request_frame_decisionListener(arg0, arg1, arg2, arg3, arg4);", "+\t} else if (sel == OS.sel_webView_1decidePolicyForNavigationAction_1request_1frame_1decisionListener_1) {", "+\t\twidget.webView_decidePolicyForNavigationAction_request_frame_decisionListener(arg0, arg1, arg2, arg3, arg4);", "+\t} else if (sel == OS.sel_webView_1decidePolicyForNewWindowAction_1request_1newFrameName_1decisionListener_1) {", "+\t\twidget.webView_decidePolicyForNewWindowAction_request_newFrameName_decisionListener(arg0, arg1, arg2, arg3, arg4);", "+\t}", "+\treturn 0;", "-/* Here we dispatch all WebView upcalls. */", "-int handleCallback(int selector, int arg0, int arg1, int arg2, int arg3) {", "-\tint ret = 0;", "-\t// for meaning of selector see WebKitDelegate methods in webkit.c", "-\tswitch (selector) {", "-\t\tcase 1: didFailProvisionalLoadWithError(arg0, arg1); break;", "-\t\tcase 2: didFinishLoadForFrame(arg0); break;", "-\t\tcase 3: didReceiveTitle(arg0, arg1); break;", "-\t\tcase 4: didStartProvisionalLoadForFrame(arg0); break;", "-\t\tcase 5: didFinishLoadingFromDataSource(arg0, arg1); break;", "-\t\tcase 6: didFailLoadingWithError(arg0, arg1, arg2); break;", "-\t\tcase 7: ret = identifierForInitialRequest(arg0, arg1); break;", "-\t\tcase 8: ret = willSendRequest(arg0, arg1, arg2, arg3); break;", "-\t\tcase 9: handleNotification(arg0); break;", "-\t\tcase 10: didCommitLoadForFrame(arg0); break;", "-\t\tcase 11: ret = createWebViewWithRequest(arg0); break;", "-\t\tcase 12: webViewShow(arg0); break;", "-\t\tcase 13: setFrame(arg0); break;", "-\t\tcase 14: webViewClose(); break;", "-\t\tcase 15: ret = contextMenuItemsForElement(arg0, arg1); break;", "-\t\tcase 16: setStatusBarVisible(arg0); break;", "-\t\tcase 17: setResizable(arg0); break;", "-\t\tcase 18: setToolbarsVisible(arg0); break;", "-\t\tcase 19: decidePolicyForMIMEType(arg0, arg1, arg2, arg3); break;", "-\t\tcase 20: decidePolicyForNavigationAction(arg0, arg1, arg2, arg3); break;", "-\t\tcase 21: decidePolicyForNewWindowAction(arg0, arg1, arg2, arg3); break;", "-\t\tcase 22: unableToImplementPolicyWithError(arg0, arg1); break;", "-\t\tcase 23: setStatusText(arg0); break;", "-\t\tcase 24: webViewFocus(); break;", "-\t\tcase 25: webViewUnfocus(); break;", "-\t\tcase 26: runJavaScriptAlertPanelWithMessage(arg0); break;", "-\t\tcase 27: ret = runJavaScriptConfirmPanelWithMessage(arg0); break;", "-\t\tcase 28: runOpenPanelForFileButtonWithResultListener(arg0); break;", "-\t\tcase 29: decideDestinationWithSuggestedFilename(arg0, arg1); break;", "-\t\tcase 30: mouseDidMoveOverElement(arg0, arg1); break;", "-\t}", "-\treturn ret;", "-}"]}], "num": 845}
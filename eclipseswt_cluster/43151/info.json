{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "994cb3354e76a9309bd5a89563926d0d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f932a0e7fb56b2724e28a08bbb81d27", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java", "commitBeforeChange": "9d4bb5b4ce77a05ecc0d7640bf75e1befec445c7", "commitAfterChange": "dbea67a910389ee7d738866aa8ecd95dd99f2aa1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tvoid createMenuBar()", "signatureAfterChange": "  \tvoid createMenuBar()", "diff": ["-\t\t        dialog.setText(getResourceString(\"Open_fileitem\")); //$NON-NLS-1$", "-\t\t\t\tdialog.setFilterPath(\"c:\\\\\"); //$NON-NLS-1$", "-\t\t\t\tdialog.setFileName(\"*.txt\"); //$NON-NLS-1$", "-\t\t        FileReader file = null;", "+\t\t        FileInputStream file = null;", "-\t\t        \tfile = new FileReader(name);", "-\t\t        \tBufferedReader fileInput = new BufferedReader(file);", "-\t\t        \tString line = null;", "-\t\t        \tStringBuffer buffer = new StringBuffer();", "-\t\t        \twhile ((line = fileInput.readLine()) != null) {", "-\t\t        \t\tbuffer.append(line);", "-\t\t        \t\tif (fileInput.ready()) buffer.append(styledText.getLineDelimiter());", "-\t\t        \t}", "-\t\t        \tstyledText.setText(buffer.toString());", "+\t\t        \tfile = new FileInputStream(name);", "+\t\t        \tstyledText.setText(openFile(file));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277b4a70c4fe5d2b22730e1896c46b80", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "4def951fc85e643080de398e85c25cb30ec79f91", "commitAfterChange": "ea10febb5ae3b0d1b19a13c89b6c7b27ab367f3a", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  void initializeCallbacks ()", "signatureAfterChange": "  void initializeCallbacks ()", "diff": ["-\tkeyCallback = new Callback (this, \"keyProc\", 3);", "-\tkeyProc = keyCallback.getAddress ();", "-\tif (keyProc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t", "-\ttimerCallback = new Callback (this, \"timerProc\", 2);", "+\ttimerCallback = new Callback (this, \"timerProc\", 1);", "-\twindowTimerCallback = new Callback (this, \"windowTimerProc\", 2);", "+\twindowTimerCallback = new Callback (this, \"windowTimerProc\", 1);", "-\tmouseHoverCallback = new Callback (this, \"mouseHoverProc\", 2);", "+\tmouseHoverCallback = new Callback (this, \"mouseHoverProc\", 1);", "-\tcaretCallback = new Callback(this, \"caretProc\", 2);", "+\tcaretCallback = new Callback(this, \"caretProc\", 1);", "-\t", "-\ttreeColumnSelectionCallback = new Callback(this, \"treeColumnSelectionProc\", 2);", "-\ttreeColumnSelectionProc = treeColumnSelectionCallback.getAddress();", "-\tif (treeColumnSelectionProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t", "-\ttreeToggleCallback = new Callback(this, \"treeToggleProc\", 3);", "-\ttreeToggleProc = treeToggleCallback.getAddress();", "-\tif (treeToggleProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8bbe9e25ba1caf169b51fc17910e486", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d354134c8538f8d3351e3c7fdf5c81ccdcc7fd08", "commitAfterChange": "9cde3dce2e91f2baf5879d88fe0120c17622244d", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  NSBezierPath getPath(Region region)", "signatureAfterChange": "  NSBezierPath getPath(Region region)", "diff": ["+\treturn getPath(region.handle);", "+}", "-\tOS.QDRegionToRects(region.handle, OS.kQDParseRegionFromTopLeft, callback.getAddress(), path.id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b287602afd527600a22202022a35928f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public Rectangle getLineBounds(int lineIndex)", "signatureAfterChange": " public Rectangle getLineBounds(int lineIndex)", "diff": ["-\tNSRect rect = null;", "-\tint numberOfLines, index, numberOfGlyphs = layoutManager.numberOfGlyphs();", "-\tint rangePtr = OS.malloc(NSRange.sizeof);", "-\tNSRange lineRange = new NSRange();", "-\tfor (numberOfLines = 0, index = 0; index < numberOfGlyphs; numberOfLines++){", "-\t    NSRect r = layoutManager.lineFragmentUsedRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout_(index, rangePtr, false);", "-\t    OS.memmove(lineRange, rangePtr, NSRange.sizeof);", "-\t    if (lineIndex == numberOfLines) {", "-\t    \trect = r;", "-\t    \tbreak; ", "-\t    }", "-\t    index = lineRange.location + lineRange.length;", "-\t}", "-\tOS.free(rangePtr);", "-\tif (rect == null) SWT.error(SWT.ERROR_INVALID_RANGE);", "+\tif (!(0 <= lineIndex && lineIndex < lineBounds.length)) SWT.error(SWT.ERROR_INVALID_RANGE);", "+\tNSRect rect = lineBounds[lineIndex];"]}], "num": 43151}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "219bb20a7657967f49d26882e9be6afe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13d8bfa4de32e11e4dd760a75f855ff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "1c5467f79f5b1c73782459594b2f72f13320a777", "commitAfterChange": "177f753d5ec596f70989cac04629c9317b4bac19", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Image (Device device, String filename)", "signatureAfterChange": " public Image (Device device, String filename)", "diff": ["-\t\t\t\t\tGdip.Bitmap_GetHICON(bitmap, hicon);", "+\t\t\t\t\tstatus = Gdip.Bitmap_GetHICON(bitmap, hicon);", "-\t\t\t\t\t\t\tGdip.Bitmap_LockBits(bitmap, 0, 0, pixelFormat, lockedBitmapData);", "-\t\t\t\t\t\t\tBitmapData bitmapData = new BitmapData();", "-\t\t\t\t\t\t\tGdip.MoveMemory(bitmapData, lockedBitmapData);", "-\t\t\t\t\t\t\tint stride = bitmapData.Stride;", "-\t\t\t\t\t\t\tint /*long*/ pixels = bitmapData.Scan0;", "-\t\t\t\t\t\t\tint depth = 0, scanlinePad = 4, transparentPixel = -1;", "-\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed: depth = 1; break;", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed: depth = 4; break;", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed: depth = 8; break;", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555:", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565: depth = 16; break;", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB: depth = 24; break;", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppRGB:", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB: depth = 32; break;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (depth != 0) {", "-\t\t\t\t\t\t\t\tPaletteData paletteData = null;", "+\t\t\t\t\t\t\tstatus = Gdip.Bitmap_LockBits(bitmap, 0, 0, pixelFormat, lockedBitmapData);", "+\t\t\t\t\t\t\tif (status == 0) {", "+\t\t\t\t\t\t\t\tBitmapData bitmapData = new BitmapData();", "+\t\t\t\t\t\t\t\tGdip.MoveMemory(bitmapData, lockedBitmapData);", "+\t\t\t\t\t\t\t\tint stride = bitmapData.Stride;", "+\t\t\t\t\t\t\t\tint /*long*/ pixels = bitmapData.Scan0;", "+\t\t\t\t\t\t\t\tint depth = 0, scanlinePad = 4, transparentPixel = -1;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed:", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed:", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed:", "-\t\t\t\t\t\t\t\t\t\tint paletteSize = Gdip.Image_GetPaletteSize(bitmap);", "-\t\t\t\t\t\t\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\t\t\t\t\t\t\t\t\tint /*long*/ palette = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, paletteSize);", "-\t\t\t\t\t\t\t\t\t\tif (palette == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\t\t\t\t\t\t\tGdip.Image_GetPalette(bitmap, palette, paletteSize);", "-\t\t\t\t\t\t\t\t\t\tColorPalette colorPalette = new ColorPalette();", "-\t\t\t\t\t\t\t\t\t\tGdip.MoveMemory(colorPalette, palette, ColorPalette.sizeof);", "-\t\t\t\t\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "-\t\t\t\t\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "-\t\t\t\t\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "-\t\t\t\t\t\t\t\t\t\tRGB[] rgbs = new RGB[colorPalette.Count];", "-\t\t\t\t\t\t\t\t\t\tpaletteData = new PaletteData(rgbs);", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0 && (colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\ttransparentPixel = i;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\trgbs[i] = new RGB(((entries[i] & 0xFF0000) >> 16), ((entries[i] & 0xFF00) >> 8), ((entries[i] & 0xFF) >> 0));", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed: depth = 1; break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed: depth = 4; break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed: depth = 8; break;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555: paletteData = new PaletteData(0x7C00, 0x3E0, 0x1F); break;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565: paletteData = new PaletteData(0xF800, 0x7E0, 0x1F); break;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB: paletteData = new PaletteData(0xFF, 0xFF00, 0xFF0000); break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555:", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565: depth = 16; break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB: depth = 24; break;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB: paletteData = new PaletteData(0xFF00, 0xFF0000, 0xFF000000); break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB: depth = 32; break;", "-\t\t\t\t\t\t\t\tbyte[] data = new byte[stride * height], alphaData = null;", "-\t\t\t\t\t\t\t\tOS.MoveMemory(data, pixels, data.length);", "-\t\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "-\t\t\t\t\t\t \t\t \t\talphaData = new byte[width * height];", "-\t\t\t\t\t\t \t\t \t\tfor (int i = 1, j = 0; i < data.length; i += 2, j++) {", "-\t\t\t\t\t\t \t\t \t\t\talphaData[j] = (byte)((data[i] & 0x80) != 0 ? 255 : 0);", "-\t\t\t\t\t\t \t\t \t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB:", "-\t\t\t\t\t\t \t\t \t\talphaData = new byte[width * height];", "-\t\t\t\t\t\t \t\t \t\tfor (int i = 3, j = 0; i < data.length; i += 4, j++) {", "-\t\t\t\t\t\t \t\t \t\t\talphaData[j] = data[i];", "-\t\t\t\t\t\t \t\t \t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tif (depth != 0) {", "+\t\t\t\t\t\t\t\t\tPaletteData paletteData = null;", "+\t\t\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed:", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed:", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed:", "+\t\t\t\t\t\t\t\t\t\t\tint paletteSize = Gdip.Image_GetPaletteSize(bitmap);", "+\t\t\t\t\t\t\t\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "+\t\t\t\t\t\t\t\t\t\t\tint /*long*/ palette = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, paletteSize);", "+\t\t\t\t\t\t\t\t\t\t\tif (palette == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\t\t\t\t\t\t\tGdip.Image_GetPalette(bitmap, palette, paletteSize);", "+\t\t\t\t\t\t\t\t\t\t\tColorPalette colorPalette = new ColorPalette();", "+\t\t\t\t\t\t\t\t\t\t\tGdip.MoveMemory(colorPalette, palette, ColorPalette.sizeof);", "+\t\t\t\t\t\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "+\t\t\t\t\t\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "+\t\t\t\t\t\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "+\t\t\t\t\t\t\t\t\t\t\tRGB[] rgbs = new RGB[colorPalette.Count];", "+\t\t\t\t\t\t\t\t\t\t\tpaletteData = new PaletteData(rgbs);", "+\t\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "+\t\t\t\t\t\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0 && (colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\ttransparentPixel = i;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\trgbs[i] = new RGB(((entries[i] & 0xFF0000) >> 16), ((entries[i] & 0xFF00) >> 8), ((entries[i] & 0xFF) >> 0));", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555: paletteData = new PaletteData(0x7C00, 0x3E0, 0x1F); break;", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565: paletteData = new PaletteData(0xF800, 0x7E0, 0x1F); break;", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB: paletteData = new PaletteData(0xFF, 0xFF00, 0xFF0000); break;", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppRGB:", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB: paletteData = new PaletteData(0xFF00, 0xFF0000, 0xFF000000); break;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbyte[] data = new byte[stride * height], alphaData = null;", "+\t\t\t\t\t\t\t\t\tOS.MoveMemory(data, pixels, data.length);", "+\t\t\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "+\t\t\t\t\t\t\t \t\t \t\talphaData = new byte[width * height];", "+\t\t\t\t\t\t\t \t\t \t\tfor (int i = 1, j = 0; i < data.length; i += 2, j++) {", "+\t\t\t\t\t\t\t \t\t \t\t\talphaData[j] = (byte)((data[i] & 0x80) != 0 ? 255 : 0);", "+\t\t\t\t\t\t\t \t\t \t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB:", "+\t\t\t\t\t\t\t \t\t \t\talphaData = new byte[width * height];", "+\t\t\t\t\t\t\t \t\t \t\tfor (int i = 3, j = 0; i < data.length; i += 4, j++) {", "+\t\t\t\t\t\t\t \t\t \t\t\talphaData[j] = data[i];", "+\t\t\t\t\t\t\t \t\t \t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tImageData img = new ImageData(width, height, depth, paletteData, scanlinePad, data);", "+\t\t\t\t\t\t\t\t\timg.transparentPixel = transparentPixel;", "+\t\t\t\t\t\t\t\t\timg.alphaData = alphaData;", "+\t\t\t\t\t\t\t\t\tinit(img);", "-\t\t\t\t\t\t\t\tGdip.BitmapData_delete(lockedBitmapData);", "-\t\t\t\t\t\t\t\tImageData img = new ImageData(width, height, depth, paletteData, scanlinePad, data);", "-\t\t\t\t\t\t\t\timg.transparentPixel = transparentPixel;", "-\t\t\t\t\t\t\t\timg.alphaData = alphaData;", "-\t\t\t\t\t\t\t\tinit(img);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\terror = SWT.ERROR_INVALID_IMAGE;\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tGdip.BitmapData_delete(lockedBitmapData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2afe94373f2299caa47f3f461e77c1a8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "0bd12479039445d98671301731eb07939c5a5f1e", "commitAfterChange": "90dcbad0d2940fe328385cc72057ca35f38e1967", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\tdragStarted = false;", "+\tdragStarted = gestureCompleted = false;", "-\ttvItem.hItem = hNewItem;", "-\ttvItem.mask = OS.TVIF_PARAM;", "-\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "-\tEvent event = new Event ();", "-\tevent.item = items [tvItem.lParam];", "-\tpostEvent (SWT.Selection, event);", "+\tif (!gestureCompleted) {", "+\t\ttvItem.hItem = hNewItem;", "+\t\ttvItem.mask = OS.TVIF_PARAM;", "+\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\tEvent event = new Event ();", "+\t\tevent.item = items [tvItem.lParam];", "+\t\tpostEvent (SWT.Selection, event);", "+\t}", "+\tgestureCompleted = false;", "-\t\tevent = new Event ();", "+\t\tEvent event = new Event ();"]}], "num": 49774}
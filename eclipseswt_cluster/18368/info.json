{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0357e4f6ef69cb5e5291a1c8230f687a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "147599cf4e3f5e8f9f1343fbb8529880", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "8b437fb3842f95560dedea9ef4177462cda26613", "commitAfterChange": "548b08f4bee4c72ec1917d36850a817afc8e2973", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " void drawBorder(GC gc)", "signatureAfterChange": " void drawBorder(GC gc)", "diff": ["-\t// Draw selection border across all tabs", "-\tif (selectedIndex == -1) { // no selected item", "-\t\tint x = borderLeft;", "-\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint width = size.x - borderLeft - borderRight;", "-\t\tint height = HIGHLIGHT_HEADER - 1;", "-\t\tgc.setBackground(getBackground());", "-\t\tgc.fillRectangle(x, y, width, height);", "-\t\tx = borderLeft;", "-\t\ty = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawLine(x, y, x + width, y);", "-\t} else { //selected item", "-\t\tint x = borderLeft;", "-\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint width = size.x - borderLeft - borderRight;", "-\t\tint height = HIGHLIGHT_HEADER - 1;", "-\t\tint[] shape = new int[] {x,y, x+width,y, x+width,y+height, x,y+height};", "-\t\tdrawSelectionBackground(gc, shape);", "-", "-\t\tCTabItem2 item = items[selectedIndex];", "-\t\tint itemX = item.x;", "-\t\tint itemY = item.y;", "-\t\tint itemW = item.width;", "-\t\tint itemH = item.height;", "-\t\tint extra = CTabFolder2.CURVE_WIDTH/2 + 4; // +4 to avoid overlapping with text in next tab", "+\t//draw 1 pixel border around outside", "+\tif (borderLeft > 0) {", "+\t\tColor parentBackground = getParent().getBackground();", "+\t\tColor color = borderColor1;", "+\t\tgc.setForeground(color);", "-\t\t\tint rightTabEdge = getRightItemEdge();", "-\t\t\tif (!single && selectedIndex != topTabIndex && itemX + itemW >= rightTabEdge){ ", "-\t\t\t\tshape = new int[4];", "+\t\t\tint x1 = 0;", "+\t\t\tint x2 = size.x - borderRight;", "+\t\t\tint y1 = borderTop - 1;", "+\t\t\tint y2 = size.y - tabHeight - borderBottom - 1;", "+\t\t\tgc.drawLine(x1, y1, x1, y2); // left", "+\t\t\tgc.drawLine(x2, y1, x2, y2); // right", "+\t\t\tgc.drawLine(x1, y1, x2, y1); // top", "+\t\t\tif (single) {", "+\t\t\t\tint x = Math.max(0, borderLeft - 1);", "+\t\t\t\tint y = size.y - borderBottom - tabHeight;", "+\t\t\t\tint width = size.x - borderLeft - borderRight + 1;", "+\t\t\t\tint height = tabHeight - 1;", "+\t\t\t\tint[] shape = new int[BOTTOM_LEFT_OUTSIDE_CORNER.length + BOTTOM_RIGHT_OUTSIDE_CORNER.length + 4];", "-\t\t\t\tshape[index++] = Math.max(0, borderLeft - 1);", "-\t\t\t\tshape[index++] = itemY - 1;", "-\t\t\t\tshape[index++] = size.x - borderRight;", "-\t\t\t\tshape[index++] = itemY - 1;", "-\t\t\t} else {", "-\t\t\t\tint[] left = BOTTOM_LEFT_CORNER;", "-\t\t\t\tint[] right = curve;", "-\t\t\t\tshape = new int[left.length + right.length + 8];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = Math.max(0, borderLeft - 1);", "-\t\t\t\tshape[index++] = itemY - 1;", "-\t\t\t\tshape[index++] = itemX;", "-\t\t\t\tshape[index++] = itemY - 1;", "-\t\t\t\tfor (int i = 0; i < left.length/2; i++) {", "-\t\t\t\t\tshape[index++] = itemX + left[2*i];", "-\t\t\t\t\tshape[index++] = itemY + itemH + left[2*i+1]-1;", "+\t\t\t\tshape[index++] = x;", "+\t\t\t\tshape[index++] = y;", "+\t\t\t\tfor (int i = 0; i < BOTTOM_LEFT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\t\tshape[index++] = x+BOTTOM_LEFT_OUTSIDE_CORNER[2*i];", "+\t\t\t\t\tshape[index++] = y+height+BOTTOM_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\tfor (int i = 0; i < right.length/2; i++) {", "-\t\t\t\t\tshape[index++] = itemX + itemW - extra + right[2*i];", "-\t\t\t\t\tshape[index++] = itemY + right[2*i+1] - 2;", "+\t\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i];", "+\t\t\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\tint temp = 0;\t\t\t", "-\t\t\t\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\t\t\t\tif (shape[2*i] > rightTabEdge) {", "-\t\t\t\t\t\tif (temp == 0 && i > 0) {", "-\t\t\t\t\t\t\ttemp = shape[2*i-1];", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\ttemp = itemY - 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tshape[2*i] = rightTabEdge;", "-\t\t\t\t\t\tshape[2*i+1] = temp;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = rightTabEdge;", "-\t\t\t\tshape[index++] = itemY - 1;", "-\t\t\t\tshape[index++] = size.x - borderRight;", "-\t\t\t\tshape[index++] = itemY - 1;", "+\t\t\t\tshape[index++] = x+width;", "+\t\t\t\tshape[index++] = y-1;", "+\t\t\t", "+\t\t\t\tantialias(shape, borderColor1.getRGB(), getBackground().getRGB(), parentBackground.getRGB(), gc);", "+\t\t\t\tgc.setForeground(borderColor1);", "+\t\t\t\tgc.drawPolyline(shape);", "-\t\t\tint rightTabEdge = getRightItemEdge();", "-\t\t\tif (!single && selectedIndex != topTabIndex && itemX + itemW >= rightTabEdge){ ", "-\t\t\t\tshape = new int[4];", "+\t\t\tint x1 = borderLeft - 1;", "+\t\t\tint x2 = size.x - borderRight;", "+\t\t\tint y1 = borderTop + tabHeight;", "+\t\t\tint y2 = size.y - borderBottom;", "+\t\t\tgc.drawLine(x1, y1, x1, y2); // left", "+\t\t\tgc.drawLine(x2, y1, x2, y2); // right", "+\t\t\tgc.drawLine(x1, y2, x2, y2); //bottom", "+\t\t\tif (single) {", "+\t\t\t\tint x = Math.max(0, borderLeft - 1);", "+\t\t\t\tint y = borderTop;", "+\t\t\t\tint width = size.x - borderLeft - borderRight + 1;", "+\t\t\t\tint height = tabHeight - 1;", "+\t\t\t\tint[] shape = new int[TOP_LEFT_OUTSIDE_CORNER.length + TOP_RIGHT_OUTSIDE_CORNER.length + 4];", "-\t\t\t\tshape[index++] = Math.max(0, borderLeft - 1);", "-\t\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t\tshape[index++] = size.x - borderRight;", "-\t\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t} else {", "-\t\t\t\tint[] left = TOP_LEFT_CORNER;", "-\t\t\t\tint[] right = curve;", "-\t\t\t\tshape = new int[left.length+right.length+8];", "-\t\t\t\tint index = 0;", "+\t\t\t\tshape[index++] = x;", "+\t\t\t\tshape[index++] = y+height;", "+\t\t\t\tfor (int i = 0; i < TOP_LEFT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\t\tshape[index++] = x+TOP_LEFT_OUTSIDE_CORNER[2*i];", "+\t\t\t\t\tshape[index++] = y+TOP_LEFT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < TOP_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\t\tshape[index++] = x+width+TOP_RIGHT_OUTSIDE_CORNER[2*i];", "+\t\t\t\t\tshape[index++] = y+TOP_RIGHT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t\t}", "+\t\t\t\tshape[index++] = x+width;", "+\t\t\t\tshape[index++] = y+height+1;", "-\t\t\t\tshape[index++] = Math.max(0, borderLeft - 1);", "-\t\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t\tshape[index++] = itemX;", "-\t\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t\t", "-\t\t\t\tfor (int i = 0; i < left.length/2; i++) {", "-\t\t\t\t\tshape[index++] = itemX + left[2*i];", "-\t\t\t\t\tshape[index++] = itemY + left[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < right.length/2; i++) {", "-\t\t\t\t\tshape[index++] = itemX + itemW - extra + right[2*i];", "-\t\t\t\t\tshape[index++] = itemY + right[2*i+1];", "-\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\tint temp = 0;", "-\t\t\t\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\t\t\t\tif (shape[2*i] > rightTabEdge) {", "-\t\t\t\t\t\tif (temp == 0 && i > 0) {", "-\t\t\t\t\t\t\ttemp = shape[2*i-1];", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\ttemp = itemY + itemH;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tshape[2*i] = rightTabEdge;", "-\t\t\t\t\t\tshape[2*i+1] = temp;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = rightTabEdge;", "-\t\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t\tshape[index++] = size.x - borderRight;", "-\t\t\t\tshape[index++] = itemY + itemH;", "+\t\t\t\tantialias(shape, borderColor1.getRGB(), getBackground().getRGB(), parentBackground.getRGB(), gc);", "+\t\t\t\tgc.setForeground(borderColor1);", "+\t\t\t\tgc.drawPolyline(shape);", "-", "-\t\t// draw line", "-\t\tRGB inside = selectionBackground.getRGB();", "-\t\tif (backgroundImage != null || (gradientColors != null && gradientColors.length > 1)) inside = null;", "-\t\tRGB outside = single ? getBackground().getRGB() : getParent().getBackground().getRGB();", "-\t\tantialias(shape, borderColor1.getRGB(), inside, outside, gc);\t", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawPolyline(shape);", "-\t", "-\t//draw 1 pixel border around outside for flat look", "-\tif (borderLeft > 0) drawFlatBorder(gc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edd90b576bffd7100b44498ba532e711", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "03f23aa773469b8a3f3e0a770076508526525b40", "commitAfterChange": "1051f4ce684a4239d50c42e8ac0e4ce13591cb56", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void drawBorder(GC gc)", "signatureAfterChange": " void drawBorder(GC gc)", "diff": ["-\t\tint y = onBottom ? size.y - borderBottom - tabHeight : tabHeight - SELECTION_BORDER + 1;", "+\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint height = SELECTION_BORDER - 1;", "+\t\tint height = HIGHLIGHT_HEADER - 1;", "-\t\ty = (onBottom) ? size.y - borderBottom - tabHeight + SELECTION_BORDER - 1 : borderTop + tabHeight - SELECTION_BORDER;", "+\t\ty = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "-\t\tint y = onBottom ? size.y - borderBottom - tabHeight : borderTop + tabHeight - SELECTION_BORDER + 1;", "+\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint height = SELECTION_BORDER - 1;", "+\t\tint height = HIGHLIGHT_HEADER - 1;", "-\t\tdrawSelectionBackground(gc, y, shape);", "+\t\tdrawSelectionBackground(gc, shape);", "-\t\t\t", "-\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "+\t\t\tshape[index++] = itemY - 1;", "-\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "-\t\t\t", "+\t\t\tshape[index++] = itemY - 1;", "-\t\t\t\tshape[index++]=itemX + left[2*i];", "-\t\t\t\tshape[index++]=itemY + itemH + left[2*i+1]-1;", "+\t\t\t\tshape[index++] = itemX + left[2*i];", "+\t\t\t\tshape[index++] = itemY + itemH + left[2*i+1]-1;", "-\t\t\t\tshape[index++]=itemX + itemW - extra + right[2*i];", "-\t\t\t\tshape[index++]=itemY + right[2*i+1] - 2;", "-\t\t\t}\t", "+\t\t\t\tshape[index++] = itemX + itemW - extra + right[2*i];", "+\t\t\t\tshape[index++] = itemY + right[2*i+1] - 2;", "+\t\t\t}", "-\t\t\tint rightTabEdge = size.x - borderRight - chevronRect.width - closeRect.width - 1;", "+\t\t\tint rightTabEdge = size.x - borderRight - chevronRect.width - expandRect.width - closeRect.width - 1;", "-\t\t\t\t\t\ttemp = itemY + SELECTION_BORDER - 1;", "+\t\t\t\t\t\ttemp = itemY - 1;", "-\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "+\t\t\tshape[index++] = itemY - 1;", "-\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "+\t\t\tshape[index++] = itemY - 1;", "-\t\t\tshape[index++] = itemY + itemH - SELECTION_BORDER;", "+\t\t\tshape[index++] = itemY + itemH;", "-\t\t\tshape[index++] = itemY + itemH - SELECTION_BORDER;", "+\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t\tshape[index++]=itemX + left[2*i];", "-\t\t\t\tshape[index++]=itemY + left[2*i+1];", "+\t\t\t\tshape[index++] = itemX + left[2*i];", "+\t\t\t\tshape[index++] = itemY + left[2*i+1];", "-\t\t\t\tshape[index++]=itemX + itemW - extra + right[2*i];", "-\t\t\t\tshape[index++]=itemY + right[2*i+1];", "+\t\t\t\tshape[index++] = itemX + itemW - extra + right[2*i];", "+\t\t\t\tshape[index++] = itemY + right[2*i+1];", "-\t\t\tint rightTabEdge = size.x - borderRight - chevronRect.width - closeRect.width - 1;", "+\t\t\tint rightTabEdge = size.x - borderRight - chevronRect.width - expandRect.width - closeRect.width - 1;", "-\t\t\t\t\t\ttemp = itemY + itemH - SELECTION_BORDER;", "+\t\t\t\t\t\ttemp = itemY + itemH;", "-\t\t\tshape[index++] = itemY + item.height - SELECTION_BORDER;", "+\t\t\tshape[index++] = itemY + itemH;", "-\t\t\tshape[index++] = itemY + item.height - SELECTION_BORDER;", "+\t\t\tshape[index++] = itemY + itemH;", "-\t//draw border around outside", "+\t//draw 1 pixel border around outside for flat look", "+\tif (borderLeft == 1) {", "+\t\tdrawFlatBorder(gc);", "+\t} else {", "+\t\tdraw3DBorder(gc);", "+\t}", "+}", "-\t\tgc.drawLine(0, borderTop - 1, 0, size.y - tabHeight - borderBottom + SELECTION_BORDER - 1); // left", "-\t\tgc.drawLine(size.x - borderRight, borderTop - 1, size.x - borderRight, size.y - tabHeight - borderBottom + SELECTION_BORDER - 1); // right", "-\t\tgc.drawLine(0, borderTop - 1, size.x - borderRight, borderTop - 1); // top", "-\t\t\tint x = 0;", "-\t\t\tint y = size.y - borderBottom - tabHeight + SELECTION_BORDER;", "-\t\t\tint height = tabHeight - SELECTION_BORDER - 1;", "-\t\tgc.drawLine(borderLeft - 1, borderTop + tabHeight - SELECTION_BORDER, borderLeft - 1, size.y - borderBottom); // left", "-\t\tgc.drawLine(size.x - borderRight, borderTop + tabHeight - SELECTION_BORDER, size.x - borderRight, size.y - borderBottom); // right", "-\t\tgc.drawLine(borderLeft - 1, size.y - borderBottom, size.x - borderRight, size.y - borderBottom); //bottom", "-\t\t\tint x = 0;", "-\t\t\tint height = tabHeight - SELECTION_BORDER - 1;", "-\t", "-\tif (borderRight == 1) return;", "-\t", "-\t// Draw drop shadow", "-\tif (onBottom) {", "-\t\tcolor = getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(0, 0, 1, 0);//top left", "-\t\tgc.drawPoint(0, 1);//top left", "-\t\tgc.drawLine(size.x - borderRight + 1, size.y - tabHeight - borderBottom + SELECTION_BORDER - 2, size.x - borderRight + 1, size.y); //bottom right", "-\t\tgc.drawLine(size.x - borderRight + 2, size.y - tabHeight - borderBottom + SELECTION_BORDER - 2, size.x - borderRight + 2, size.y);//bottom right", "-\t\t", "-\t\tcolor = showBorder ? border2Color : getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(size.x - borderRight + 1, borderTop - 1, size.x - borderRight + 1, size.y - tabHeight - borderBottom + SELECTION_BORDER - 2); // right 1", "-\t\tgc.drawLine(1, borderTop - 2, size.x - borderRight + 1, borderTop - 2); // top 1", "-\t\t", "-\t\tcolor = showBorder ? border3Color : getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(size.x - borderRight + 2, borderTop - 2, size.x - borderRight + 2, size.y - tabHeight - borderBottom + SELECTION_BORDER - 3); // right 2", "-\t\tgc.drawLine(2, borderTop - 3, size.x - borderRight + 2, borderTop - 3); // top 2", "-\t\tcolor = getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(size.x - 1, 0, size.x - 1, borderTop + tabHeight - SELECTION_BORDER + 1);//top right", "-\t\tgc.drawLine(size.x - 2, 0, size.x - 2, borderTop + tabHeight - SELECTION_BORDER);//top right", "-\t\tgc.drawPoint(0, size.y - borderBottom + 1); //bottom left", "-\t\tgc.drawLine(0, size.y - borderBottom + 2, 1, size.y - borderBottom + 2);//bottom left", "-\t\t", "-\t\tcolor = showBorder ? border2Color : getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(size.x - borderRight + 1, borderTop + tabHeight - SELECTION_BORDER + 1, size.x - borderRight + 1, size.y - borderBottom + 1); // right 1", "-\t\tgc.drawLine(1, size.y - borderBottom + 1, size.x - borderRight + 1, size.y - borderBottom + 1); //bottom 1", "-\t\t", "-\t\tcolor = showBorder ? border3Color : getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(size.x - borderRight + 2, borderTop + tabHeight - SELECTION_BORDER + 2, size.x - borderRight + 2, size.y - borderBottom + 2); // right 2", "-\t\tgc.drawLine(2, size.y - borderBottom + 2, size.x - borderRight + 2, size.y - borderBottom + 2); //bottom 2"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "307ade224f4576b22aa2ffe6f5838d4f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "0ae25286a9580d6c7dba8a5e7b28884e3638c2ea", "commitAfterChange": "f3595d0facaebfce119c3387d7a1486e16aa7e4e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void drawSelected(GC gc )", "signatureAfterChange": " void drawSelected(GC gc )", "diff": ["-\t", "-\t// Draw selection border across all tabs", "-\tint xx = parent.borderLeft;", "-\tint yy = parent.onBottom ? size.y - parent.borderBottom - parent.tabHeight - CTabFolder.HIGHLIGHT_HEADER : parent.borderTop + parent.tabHeight + 1;", "-\tint ww = size.x - parent.borderLeft - parent.borderRight;", "-\tint hh = CTabFolder.HIGHLIGHT_HEADER - 1;", "-\tint[] shape = new int[] {xx,yy, xx+ww,yy, xx+ww,yy+hh, xx,yy+hh};", "-\tparent.drawBackground(gc, shape, true);", "-", "-\t// if selected tab scrolled out of view or partially out of view", "-\t// just draw bottom line", "-\tif (!isShowing()){", "-\t\tint x1 = Math.max(0, parent.borderLeft - 1);", "-\t\tint y1 = (parent.onBottom) ? y - 1 : y + height;", "-\t\tint x2 = size.x - parent.borderRight;", "-\t\tgc.setForeground(CTabFolder.borderColor);", "-\t\tgc.drawLine(x1, y1, x2, y1);", "-\t\treturn;", "-\t}", "-\t\t", "-\t// draw selected tab background and outline", "-\tshape = null;", "-\tif (this.parent.onBottom) {", "-\t\tint[] left = parent.simple ? new int[] {0, 0} :CTabFolder.BOTTOM_LEFT_CORNER;", "-\t\tint[] right = parent.simple ? new int[] {0, 0} : parent.curve;", "-\t\tshape = new int[left.length+right.length+8];", "-\t\tint index = 0;", "-\t\tshape[index++] = x; // first point repeated here because below we reuse shape to draw outline", "-\t\tshape[index++] = y - 1;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y - 1;", "-\t\tfor (int i = 0; i < left.length/2; i++) {", "-\t\t\tshape[index++] = x + left[2*i];", "-\t\t\tshape[index++] = y + height + left[2*i+1] - 1;", "-\t\t}", "-\t\tfor (int i = 0; i < right.length/2; i++) {", "-\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "-\t\t\tshape[index++] = parent.simple ? y + height + right[2*i+1] - 1 : y + right[2*i+1] - 2;", "-\t\t}", "-\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tshape[index++] = y - 1;", "-\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tshape[index++] = y - 1;", "+\tif (parent.single) {", "+\t\tif (!isShowing()) return;", "-\t\tint[] left = parent.simple ? new int[] {0, 0} : CTabFolder.TOP_LEFT_CORNER;", "-\t\tint[] right = parent.simple ? new int[] {0, 0} : parent.curve;", "-\t\tshape = new int[left.length+right.length+8];", "-\t\tint index = 0;", "-\t\tshape[index++] = x; // first point repeated here because below we reuse shape to draw outline", "-\t\tshape[index++] = y + height + 1;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y + height + 1;", "-\t\tfor (int i = 0; i < left.length/2; i++) {", "-\t\t\tshape[index++] = x + left[2*i];", "-\t\t\tshape[index++] = y + left[2*i+1];", "+\t\t// Draw selection border across all tabs", "+\t\tint xx = parent.borderLeft;", "+\t\tint yy = parent.onBottom ? size.y - parent.borderBottom - parent.tabHeight - CTabFolder.HIGHLIGHT_HEADER : parent.borderTop + parent.tabHeight + 1;", "+\t\tint ww = size.x - parent.borderLeft - parent.borderRight;", "+\t\tint hh = CTabFolder.HIGHLIGHT_HEADER - 1;", "+\t\tint[] shape = new int[] {xx,yy, xx+ww,yy, xx+ww,yy+hh, xx,yy+hh};", "+\t\tparent.drawBackground(gc, shape, true);", "+\t", "+\t\t// if selected tab scrolled out of view or partially out of view", "+\t\t// just draw bottom line", "+\t\tif (!isShowing()){", "+\t\t\tint x1 = Math.max(0, parent.borderLeft - 1);", "+\t\t\tint y1 = (parent.onBottom) ? y - 1 : y + height;", "+\t\t\tint x2 = size.x - parent.borderRight;", "+\t\t\tgc.setForeground(CTabFolder.borderColor);", "+\t\t\tgc.drawLine(x1, y1, x2, y1);", "+\t\t\treturn;", "-\t\tfor (int i = 0; i < right.length/2; i++) {", "-\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "-\t\t\tshape[index++] = y + right[2*i+1];", "+\t\t\t", "+\t\t// draw selected tab background and outline", "+\t\tshape = null;", "+\t\tif (this.parent.onBottom) {", "+\t\t\tint[] left = parent.simple ? new int[] {0, 0} :CTabFolder.BOTTOM_LEFT_CORNER;", "+\t\t\tint[] right = parent.simple ? new int[] {0, 0} : parent.curve;", "+\t\t\tshape = new int[left.length+right.length+8];", "+\t\t\tint index = 0;", "+\t\t\tshape[index++] = x; // first point repeated here because below we reuse shape to draw outline", "+\t\t\tshape[index++] = y - 1;", "+\t\t\tshape[index++] = x;", "+\t\t\tshape[index++] = y - 1;", "+\t\t\tfor (int i = 0; i < left.length/2; i++) {", "+\t\t\t\tshape[index++] = x + left[2*i];", "+\t\t\t\tshape[index++] = y + height + left[2*i+1] - 1;", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < right.length/2; i++) {", "+\t\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "+\t\t\t\tshape[index++] = parent.simple ? y + height + right[2*i+1] - 1 : y + right[2*i+1] - 2;", "+\t\t\t}", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = y - 1;", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = y - 1;", "+\t\t} else {", "+\t\t\tint[] left = parent.simple ? new int[] {0, 0} : CTabFolder.TOP_LEFT_CORNER;", "+\t\t\tint[] right = parent.simple ? new int[] {0, 0} : parent.curve;", "+\t\t\tshape = new int[left.length+right.length+8];", "+\t\t\tint index = 0;", "+\t\t\tshape[index++] = x; // first point repeated here because below we reuse shape to draw outline", "+\t\t\tshape[index++] = y + height + 1;", "+\t\t\tshape[index++] = x;", "+\t\t\tshape[index++] = y + height + 1;", "+\t\t\tfor (int i = 0; i < left.length/2; i++) {", "+\t\t\t\tshape[index++] = x + left[2*i];", "+\t\t\t\tshape[index++] = y + left[2*i+1];", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < right.length/2; i++) {", "+\t\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "+\t\t\t\tshape[index++] = y + right[2*i+1];", "+\t\t\t}", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = y + height + 1;", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = y + height + 1;", "-\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tshape[index++] = y + height + 1;", "-\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tshape[index++] = y + height + 1;", "+\t\tparent.drawBackground(gc, shape, true);", "+\t\t", "+\t\t// draw outline", "+\t\tshape[0] = Math.max(0, parent.borderLeft - 1);", "+\t\tshape[shape.length - 2] = size.x - parent.borderRight + 1;", "+\t\tfor (int i = 0; i < shape.length/2; i++) {", "+\t\t\tif (shape[2*i + 1] == y + height + 1) shape[2*i + 1] -= 1;", "+\t\t}", "+\t\tRGB inside = parent.selectionBackground.getRGB();", "+\t\tif (parent.selectionBgImage != null || ", "+\t\t    (parent.selectionGradientColors != null && parent.selectionGradientColors.length > 1)) {", "+\t\t    inside = null;", "+\t\t}", "+\t\tRGB outside = parent.getBackground().getRGB();\t\t", "+\t\tif (parent.bgImage != null || ", "+\t\t    (parent.gradientColors != null && parent.gradientColors.length > 1)) {", "+\t\t    outside = null;", "+\t\t}", "+\t\tparent.antialias(shape, CTabFolder.borderColor.getRGB(), inside, outside, gc);", "+\t\tgc.setForeground(CTabFolder.borderColor);", "+\t\tgc.drawPolyline(shape);", "-\tparent.drawBackground(gc, shape, true);", "-", "+\t", "-\t", "-\t// draw outline", "-\tshape[0] = Math.max(0, parent.borderLeft - 1);", "-\tshape[shape.length - 2] = size.x - parent.borderRight + 1;", "-\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\tif (shape[2*i + 1] == y + height + 1) shape[2*i + 1] -= 1;", "-\t}", "-\tRGB inside = parent.selectionBackground.getRGB();", "-\tif (parent.selectionBgImage != null || ", "-\t    (parent.selectionGradientColors != null && parent.selectionGradientColors.length > 1)) {", "-\t    inside = null;", "-\t}", "-\tRGB outside = parent.getBackground().getRGB();\t\t", "-\tif (parent.bgImage != null || ", "-\t    (parent.gradientColors != null && parent.gradientColors.length > 1)) {", "-\t    outside = null;", "-\t}", "-\tparent.antialias(shape, CTabFolder.borderColor.getRGB(), inside, outside, gc);", "-\tgc.setForeground(CTabFolder.borderColor);", "-\tgc.drawPolyline(shape);"]}], "num": 18368}
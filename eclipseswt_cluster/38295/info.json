{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "398c1b477054b776c7a6039a8a48ddc0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4a58b7fe63d902e2d025bbaf587be87", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT AWT/cocoa/org/eclipse/swt/awt/SWT_AWT.java", "commitBeforeChange": "acbdf58fdaac09943c13b07378d28feb8adc7a94", "commitAfterChange": "32431a1b2f692b176277f47882d76fd102621aa0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static Frame new_Frame(final Composite parent)", "signatureAfterChange": " public static Frame new_Frame(final Composite parent)", "diff": ["-\t", "-\tClass clazz = null;", "+", "+\tfinal Class [] clazz = new Class [1];", "-\t\t\tclazz = Class.forName(className, true, ClassLoader.getSystemClassLoader());", "+\t\t\tclazz[0] = Class.forName(className, true, ClassLoader.getSystemClassLoader());", "-\t\t\tclazz = Class.forName(className);", "+\t\t\tclazz[0] = Class.forName(className);", "-\t\t\tclazz = Class.forName(JDK17_FRAME);", "+\t\t\tclazz[0] = Class.forName(JDK17_FRAME);", "+\t/* NOTE: Swing must not be initialize in an invokeLater() or it hangs */", "-\tObject value = null;", "-\tConstructor constructor = null;", "-\ttry {", "-\t\tconstructor = clazz.getConstructor (new Class [] {long.class});", "-\t\tvalue = constructor.newInstance (new Object [] {new Long(handle)});", "-\t} catch (Throwable e) {", "-\t\tSWT.error(SWT.ERROR_NOT_IMPLEMENTED, e);", "+", "+\tfinal Frame [] result = new Frame [1];", "+\tfinal Throwable[] exception = new Throwable[1];", "+\tRunnable runnable = new Runnable () {", "+\t\tboolean run;", "+\t\tpublic void run() {", "+\t\t\tif (run) return;", "+\t\t\trun = true;", "+\t\t\tConstructor constructor = null;", "+\t\t\ttry {", "+\t\t\t\tconstructor = clazz[0].getConstructor (new Class [] {long.class});", "+\t\t\t\tresult [0] = (Frame) (constructor.newInstance (new Object [] {new Long(handle)}));", "+\t\t\t\tresult [0].addNotify();", "+\t\t\t} catch (Throwable e) {", "+\t\t\t\texception[0] = e;", "+\t\t\t}", "+\t\t}", "+\t};", "+\tif (EventQueue.isDispatchThread() || parent.getDisplay().getSyncThread() != null) {", "+\t\trunnable.run();", "+\t} else {", "+\t\t/* Force AWT to process the invokeLater() right away */", "+\t\tEventQueue.invokeLater(runnable);", "+\t\tDisplay display = parent.getDisplay();", "+\t\twhile (result[0] == null && exception[0] == null) {", "+\t\t\tdisplay.setData(RUN_AWT_INVOKE_LATER_KEY, new Boolean (true));", "+\t\t\tBoolean invoked = (Boolean)display.getData(RUN_AWT_INVOKE_LATER_KEY);", "+\t\t\tif (invoked != null && !invoked.booleanValue()) {", "+\t\t\t\trunnable.run();", "+\t\t\t}", "+\t\t}", "-\tfinal Frame frame = (Frame) value;", "+\tif (exception[0] != null) {", "+\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, exception[0]);", "+\t}", "+\tfinal Frame frame = result[0];", "-\tframe.addNotify();", "+\t", "+\t/* NOTE: addNotify() should not be called in the UI thread or we could hang */", "+\t//frame.addNotify();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cbec167983718e0deddf6ebc5fcab69", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT AWT/cocoa/org/eclipse/swt/awt/SWT_AWT.java", "commitBeforeChange": "30aa0c3826135aac4e58bd6f57548574ac5ba309", "commitAfterChange": "62396e7f197b93c20522ab3007183e0650d01964", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static Frame new_Frame(final Composite parent)", "signatureAfterChange": " public static Frame new_Frame(final Composite parent)", "diff": ["-\tfinal Class [] clazz = new Class [1];", "+\tfinal Class<?> [] clazz = new Class [1];", "-\t\t\tConstructor constructor = null;", "+\t\t\tConstructor<?> constructor = null;", "-\t\t\t\tconstructor = clazz[0].getConstructor (new Class [] {long.class});", "-\t\t\t\tresult [0] = (Frame) (constructor.newInstance (new Object [] {new Long(handle)}));", "+\t\t\t\tconstructor = clazz[0].getConstructor (long.class);", "+\t\t\t\tresult [0] = (Frame) (constructor.newInstance (new Long(handle)));", "-\t\t\t\t\t\t\t\tClass clazz = frame.getClass();", "-\t\t\t\t\t\t\t\tMethod method = clazz.getMethod(\"synthesizeWindowActivation\", new Class[]{boolean.class});", "-\t\t\t\t\t\t\t\tif (method != null) method.invoke(frame, new Object[]{Boolean.TRUE});", "+\t\t\t\t\t\t\t\tClass<?> clazz = frame.getClass();", "+\t\t\t\t\t\t\t\tMethod method = clazz.getMethod(\"synthesizeWindowActivation\", boolean.class);", "+\t\t\t\t\t\t\t\tif (method != null) method.invoke(frame, Boolean.TRUE);", "-\t\t\t\t\t\t\t\tClass clazz = frame.getClass();", "-\t\t\t\t\t\t\t\tMethod method = clazz.getMethod(\"synthesizeWindowActivation\", new Class[]{boolean.class});", "-\t\t\t\t\t\t\t\tif (method != null) method.invoke(frame, new Object[]{Boolean.FALSE});", "+\t\t\t\t\t\t\t\tClass<?> clazz = frame.getClass();", "+\t\t\t\t\t\t\t\tMethod method = clazz.getMethod(\"synthesizeWindowActivation\", boolean.class);", "+\t\t\t\t\t\t\t\tif (method != null) method.invoke(frame, Boolean.FALSE);", "-\t\t\t\t\tMethod method = frame.getClass().getMethod(\"validateWithBounds\", new Class[] {int.class, int.class, int.class, int.class});", "-\t\t\t\t\tif (method != null) method.invoke(frame, new Object[]{new Integer(clientArea.x), new Integer(clientArea.y), new Integer(clientArea.width), new Integer(clientArea.height)});", "+\t\t\t\t\tMethod method = frame.getClass().getMethod(\"validateWithBounds\", int.class, int.class, int.class, int.class);", "+\t\t\t\t\tif (method != null) method.invoke(frame, new Integer(clientArea.x), new Integer(clientArea.y), new Integer(clientArea.width), new Integer(clientArea.height));"]}], "num": 38295}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf2e501c39638d270d00ea68b9c93353", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73fa00cb076e24b00cda6eade96af8b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "30005ec31327bf492e89c83d8cc99b536cf437a0", "commitAfterChange": "078a3d8a947c3d5dcb2d1501d6463b5d2d62f25e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void setTransfer(Transfer[] transferAgents)", "signatureAfterChange": " public void setTransfer(Transfer[] transferAgents)", "diff": ["+\tif (targetList != 0) {", "+\t\tOS.gtk_target_list_unref(targetList);", "+\t\ttargetList = 0;", "+\t}", "+\tthis.transferAgents = transferAgents;", "+\tif (transferAgents == null) return;", "+\t", "+\tGtkTargetEntry[] targets = new GtkTargetEntry[0];", "+\tfor (int i = 0; i < transferAgents.length; i++) {", "+\t\tTransfer transfer = transferAgents[i];", "+\t\tint[] typeIds = transfer.getTypeIds();", "+\t\tString[] typeNames = transfer.getTypeNames();", "+\t\tfor (int j = 0; j < typeIds.length; j++) {", "+\t\t\tGtkTargetEntry entry = new GtkTargetEntry();", "+\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, typeNames[j], true);", "+\t\t\tentry.target = OS.g_malloc(buffer.length);", "+\t\t\tOS.memmove(entry.target, buffer, buffer.length);\t\t\t\t\t\t", "+\t\t\tentry.info = typeIds[j];", "+\t\t\tGtkTargetEntry[] newTargets = new GtkTargetEntry[targets.length + 1];", "+\t\t\tSystem.arraycopy(targets, 0, newTargets, 0, targets.length);", "+\t\t\tnewTargets[targets.length] = entry;", "+\t\t\ttargets = newTargets;", "+\t\t}\t", "+\t}", "+\t", "+\tint pTargets = OS.g_malloc(targets.length * GtkTargetEntry.sizeof);", "+\tfor (int i = 0; i < targets.length; i++) {", "+\t\tOS.memmove(pTargets + i*GtkTargetEntry.sizeof, targets[i], GtkTargetEntry.sizeof);\t\t", "+\t}\t\t\t", "+\ttargetList = OS.gtk_target_list_new(pTargets, targets.length);", "+\t", "+\tfor (int i = 0; i < targets.length; i++) {", "+\t\tOS.g_free(targets[i].target);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92d50960ae008670974dc5928cad37c6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "30005ec31327bf492e89c83d8cc99b536cf437a0", "commitAfterChange": "078a3d8a947c3d5dcb2d1501d6463b5d2d62f25e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void setTransfer(Transfer[] transferAgents)", "signatureAfterChange": " public void setTransfer(Transfer[] transferAgents)", "diff": ["-public void setTransfer(Transfer[] transferAgents){}", "+public void setTransfer(Transfer[] transferAgents){", "+\tif (this.transferAgents != null) {", "+\t\tOS.gtk_drag_dest_unset(control.handle);", "+\t}", "+\tthis.transferAgents = transferAgents;", "+\tif (transferAgents == null) return;", "+\t", "+\tGtkTargetEntry[] targets = new GtkTargetEntry[0];", "+\tfor (int i = 0; i < transferAgents.length; i++) {", "+\t\tTransfer transfer = transferAgents[i];", "+\t\tint[] typeIds = transfer.getTypeIds();", "+\t\tString[] typeNames = transfer.getTypeNames();", "+\t\tfor (int j = 0; j < typeIds.length; j++) {", "+\t\t\tGtkTargetEntry entry = new GtkTargetEntry();", "+\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, typeNames[j], true);", "+\t\t\tentry.target = OS.g_malloc(buffer.length);", "+\t\t\tOS.memmove(entry.target, buffer, buffer.length);\t\t\t\t\t\t", "+\t\t\tentry.info = typeIds[j];", "+\t\t\tGtkTargetEntry[] newTargets = new GtkTargetEntry[targets.length + 1];", "+\t\t\tSystem.arraycopy(targets, 0, newTargets, 0, targets.length);", "+\t\t\tnewTargets[targets.length] = entry;", "+\t\t\ttargets = newTargets;", "+\t\t}\t", "+\t}", "+\t", "+\tint pTargets = OS.g_malloc(targets.length * GtkTargetEntry.sizeof);", "+\tfor (int i = 0; i < targets.length; i++) {", "+\t\tOS.memmove(pTargets + i*GtkTargetEntry.sizeof, targets[i], GtkTargetEntry.sizeof);\t\t", "+\t}\t\t\t", "+\t", "+\tint actions = opToOsOp(getStyle());", "+\tOS.gtk_drag_dest_set(control.handle, 0, pTargets, targets.length, actions);", "+\t", "+\tfor (int i = 0; i < targets.length; i++) {", "+\t\tOS.g_free(targets[i].target);", "+\t}"]}], "num": 5015}
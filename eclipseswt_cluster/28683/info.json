{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "324c96532066cb65601f3c894f59bb3d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "004bec69917966f242d197ad8e3f16a4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Shell.java", "commitBeforeChange": "02e0e6beb06cc1ca0567d654a0c3ef8a4906d5fa", "commitAfterChange": "8daadc4eaf4e0b94d8872a57717033bc0fed74f2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test_addShellListenerLorg_eclipse_swt_events_ShellListener()", "signatureAfterChange": "  public void test_addShellListenerLorg_eclipse_swt_events_ShellListener()", "diff": ["-\twarnUnimpl(\"Test test_addShellListenerLorg_eclipse_swt_events_ShellListener not written\");", "+\tlistenerCalled = false;", "+\tboolean exceptionThrown = false;", "+\tShellListener listener = new ShellAdapter() {", "+\t\tpublic void shellActivated(ShellEvent e) {", "+\t\t\tlistenerCalled = true;", "+\t\t}", "+\t};", "+\ttry {", "+\t\tshell.addShellListener(null);", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t}", "+\tshell.addShellListener(listener);", "+\tshell.forceActive();", "+\tassertTrue(\":a:\", listenerCalled == true);", "+\t", "+\tlistenerCalled = false;", "+\tshell.removeShellListener(listener);", "+\tshell.forceActive();", "+\tassertTrue(\":b:\", listenerCalled == false);", "+\ttry {", "+\t\tshell.removeShellListener(null);", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87ba37c527cb31e3b1f67b3908e599c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "b06cbf7a0e056ef6e3191b7116c2c78a7e2ab1bd", "commitAfterChange": "488ea245d8ed955ed7da346350d79cf2cba672a8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void test_addSelectionListenerLorg_eclipse_swt_events_SelectionListener()", "signatureAfterChange": "  public void test_addSelectionListenerLorg_eclipse_swt_events_SelectionListener()", "diff": ["+\tassertTrue(\"Expected exception not thrown for listener == null\", exceptionThrown);", "+\t", "+\texceptionThrown = false;", "+\tassertTrue(\"Expected exception not thrown for listener == null\", exceptionThrown);", "+\t", "+\t// test single-selection list", "+", "+\tsetSingleList();", "+\t", "+\tlistenerCalled = false;", "+\texceptionThrown = false;", "+\ttry {", "+\t\tlist.addSelectionListener(null);", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t}", "+\tassertTrue(\"Expected exception not thrown for listener == null\", exceptionThrown);", "+\t", "+\tlist.addSelectionListener(listener);", "+\tlist.select(0);", "+\tassertTrue(\":a:\", listenerCalled == false);", "+\tlist.removeSelectionListener(listener);", "+\texceptionThrown = false;", "+\ttry {", "+\t\tlist.removeSelectionListener(null);", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t}", "+\tassertTrue(\"Expected exception not thrown for listener == null\", exceptionThrown);", "+\t"]}], "num": 28683}
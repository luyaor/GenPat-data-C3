{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "463f028a19d59a1d87579ee0a02b1c5c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee0469a621fbd9e0c742ad0b236dbde5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "e21499d8e0ce99464817c01247ac2cfe606f7af1", "commitAfterChange": "24ee51cda626767793aae59eaf8489a458a84622", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\tpublic void handleEvent(OleEvent event)", "signatureAfterChange": "  static int checkStyle(int style)", "diff": ["-\tOleListener oleListener = new OleListener() {", "-\t\tpublic void handleEvent(OleEvent event) {", "-\t\t\tif (auto == null) return;\t\t/* receiver was disposed, callback is asynchronous */", "-\t\t\tswitch (event.type) {", "-\t\t\t\tcase BeforeNavigate2: {", "-\t\t\t\t\tVariant varResult = event.arguments[1];", "-\t\t\t\t\tString url = varResult.getString();", "-\t\t\t\t\tLocationEvent newEvent = new LocationEvent(Browser.this);", "-\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\tnewEvent.location = url;", "-\t\t\t\t\tnewEvent.doit = true;", "-\t\t\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "-\t\t\t\t\t\tlocationListeners[i].changing(newEvent);", "-\t\t\t\t\t}", "-\t\t\t\t\tVariant cancel = event.arguments[6];", "-\t\t\t\t\tif (cancel != null) {", "-\t\t\t\t\t\tint pCancel = cancel.getByRef();", "-\t\t\t\t\t\tCOM.MoveMemory(pCancel, new short[]{newEvent.doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE}, 2);", "-\t\t\t\t   }\t\t\t\t\t", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase CommandStateChange: {", "-\t\t\t\t\tboolean enabled = false;", "-\t\t\t\t\tVariant varResult = event.arguments[0];", "-\t\t\t\t\tint command = varResult.getInt();", "-\t\t\t\t\tvarResult = event.arguments[1];", "-\t\t\t\t\tenabled = varResult.getBoolean();", "-\t\t\t\t\tswitch (command) {", "-\t\t\t\t\t\tcase CSC_NAVIGATEBACK : back = enabled; break;", "-\t\t\t\t\t\tcase CSC_NAVIGATEFORWARD : forward = enabled; break;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase DocumentComplete: {", "-\t\t\t\t\tVariant varResult = event.arguments[0];", "-\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "-\t\t\t\t\tvarResult = event.arguments[1];", "-\t\t\t\t\tString url = varResult.getString();", "-\t\t\t\t\tif (html != null && url.equals(ABOUT_BLANK)) {", "-\t\t\t\t\t\tRunnable runnable = new Runnable () {", "-\t\t\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\t\t\tif (isDisposed() || html == null) return;", "-\t\t\t\t\t\t\t\tint charCount = html.length();", "-\t\t\t\t\t\t\t\tchar[] chars = new char[charCount];", "-\t\t\t\t\t\t\t\thtml.getChars(0, charCount, chars, 0);", "-\t\t\t\t\t\t\t\thtml = null;", "-\t\t\t\t\t\t\t\tint byteCount = OS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, null, 0, null, null);", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* Note. Internet Explorer appears to treat the data loaded with ", "-\t\t\t\t\t\t\t\t* nsIPersistStreamInit.Load as if it were encoded using the default", "-\t\t\t\t\t\t\t\t* local charset.  There does not seem to be an API to set the", "-\t\t\t\t\t\t\t\t* desired charset explicitely in this case.  The fix is to", "-\t\t\t\t\t\t\t\t* prepend the UTF-8 Byte Order Mark signature to the data.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tbyte[] UTF8BOM = {(byte)0xEF, (byte)0xBB, (byte)0xBF};", "-\t\t\t\t\t\t\t\tint\thGlobal = OS.GlobalAlloc(OS.GMEM_FIXED | OS.GMEM_ZEROINIT, UTF8BOM.length + byteCount);", "-\t\t\t\t\t\t\t\tif (hGlobal != 0) {", "-\t\t\t\t\t\t\t\t\tOS.MoveMemory(hGlobal, UTF8BOM, UTF8BOM.length);", "-\t\t\t\t\t\t\t\t\tOS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, hGlobal + UTF8BOM.length, byteCount, null, null);\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tint[] ppstm = new int[1];", "-\t\t\t\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t\t\t\t* Note.  CreateStreamOnHGlobal is called with the flag fDeleteOnRelease.", "-\t\t\t\t\t\t\t\t\t* If the call succeeds the buffer hGlobal is freed automatically", "-\t\t\t\t\t\t\t\t\t* when the IStream object is released. If the call fails, free the buffer", "-\t\t\t\t\t\t\t\t\t* hGlobal.", "-\t\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\t\tif (OS.CreateStreamOnHGlobal(hGlobal, true, ppstm) == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] {\"Document\"}); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "-\t\t\t\t\t\t\t\t\t\tIDispatch dispatchDocument = pVarResult.getDispatch();", "-\t\t\t\t\t\t\t\t\t\tint[] ppvObject = new int[1];", "-\t\t\t\t\t\t\t\t\t\tint result = dispatchDocument.QueryInterface(COM.IIDIPersistStreamInit, ppvObject);", "-\t\t\t\t\t\t\t\t\t\tif (result == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\t\t\tIPersistStreamInit persistStreamInit = new IPersistStreamInit(ppvObject[0]);", "-\t\t\t\t\t\t\t\t\t\t\tif (persistStreamInit.InitNew() == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Load(ppstm[0]);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Release();", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tpVarResult.dispose();", "-\t\t\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t\t\t* This code is intentionally commented.  The IDispatch obtained from a Variant", "-\t\t\t\t\t\t\t\t\t\t* did not increase the reference count for the enclosed interface.", "-\t\t\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\t\t\t//dispatchDocument.Release();", "-\t\t\t\t\t\t\t\t\t\tIUnknown stream = new IUnknown(ppstm[0]);", "-\t\t\t\t\t\t\t\t\t\tstream.Release();", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tOS.GlobalFree(hGlobal);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t};", "-\t\t\t\t\t\tif (delaySetText) {", "-\t\t\t\t\t\t\tdelaySetText = false;", "-\t\t\t\t\t\t\tgetDisplay().asyncExec(runnable);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\trunnable.run();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tVariant variant = new Variant(auto);", "-\t\t\t\t\t\tIDispatch top = variant.getDispatch();", "-\t\t\t\t\t\tLocationEvent locationEvent = new LocationEvent(Browser.this);", "-\t\t\t\t\t\tlocationEvent.display = getDisplay();", "-\t\t\t\t\t\tlocationEvent.widget = Browser.this;", "-\t\t\t\t\t\tlocationEvent.location = url;", "-\t\t\t\t\t\tlocationEvent.top = top.getAddress() == dispatch.getAddress();", "-\t\t\t\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "-\t\t\t\t\t\t\tlocationListeners[i].changed(locationEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (isDisposed()) return;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * This code is intentionally commented.  A Variant constructed from an", "-\t\t\t\t\t\t * OleAutomation object does not increase its reference count.  The IDispatch", "-\t\t\t\t\t\t * obtained from this Variant did not increase the reference count for the", "-\t\t\t\t\t\t * OleAutomation instance either. ", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\t//top.Release();", "-\t\t\t\t\t\t//variant.dispose();", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * Note.  The completion of the page loading is detected as", "-\t\t\t\t\t\t * described in the MSDN article \"Determine when a page is", "-\t\t\t\t\t\t * done loading in WebBrowser Control\". ", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (globalDispatch != 0 && dispatch.getAddress() == globalDispatch) {", "-\t\t\t\t\t\t\t/* final document complete */", "-\t\t\t\t\t\t\tglobalDispatch = 0;", "-\t\t\t\t\t\t\tProgressEvent progressEvent = new ProgressEvent(Browser.this);", "-\t\t\t\t\t\t\tprogressEvent.display = getDisplay();", "-\t\t\t\t\t\t\tprogressEvent.widget = Browser.this;", "-\t\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++) {", "-\t\t\t\t\t\t\t\tprogressListeners[i].completed(progressEvent);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t/*", "-\t\t\t\t\t* This code is intentionally commented.  This IDispatch was received", "-\t\t\t\t\t* as an argument from the OleEvent and it will be disposed along with", "-\t\t\t\t\t* the other arguments.  ", "-\t\t\t\t\t*/", "-\t\t\t\t\t//dispatch.Release();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase NavigateComplete2: {", "-\t\t\t\t\tVariant varResult = event.arguments[0];", "-\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "-\t\t\t\t\tif (globalDispatch == 0) globalDispatch = dispatch.getAddress();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase NewWindow2: {", "-\t\t\t\t\tVariant cancel = event.arguments[1];", "-\t\t\t\t\tint pCancel = cancel.getByRef();", "-\t\t\t\t\tWindowEvent newEvent = new WindowEvent(Browser.this);", "-\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\tnewEvent.required = false;", "-\t\t\t\t\tfor (int i = 0; i < openWindowListeners.length; i++) {", "-\t\t\t\t\t\topenWindowListeners[i].open(newEvent);", "-\t\t\t\t\t}", "-\t\t\t\t\tBrowser browser = newEvent.browser;", "-\t\t\t\t\tboolean doit = browser != null && !browser.isDisposed();", "-\t\t\t\t\tif (doit) {", "-\t\t\t\t\t\tVariant variant = new Variant(browser.auto);", "-\t\t\t\t\t\tIDispatch iDispatch = variant.getDispatch();", "-\t\t\t\t\t\tVariant ppDisp = event.arguments[0];", "-\t\t\t\t\t\tint byref = ppDisp.getByRef();", "-\t\t\t\t\t\tif (byref != 0) COM.MoveMemory(byref, new int[] {iDispatch.getAddress()}, 4);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* This code is intentionally commented.  A Variant constructed from an", "-\t\t\t\t\t\t* OleAutomation object does not increase its reference count.  The IDispatch", "-\t\t\t\t\t\t* obtained from this Variant did not increase the reference count for the", "-\t\t\t\t\t\t* OleAutomation instance either. ", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\t//variant.dispose();", "-\t\t\t\t\t\t//iDispatch.Release();", "-\t\t\t\t\t}", "-\t\t\t\t\tif (newEvent.required) {", "-\t\t\t\t\t\tCOM.MoveMemory(pCancel, new short[]{doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE}, 2);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OnMenuBar: {", "-\t\t\t\t\tVariant arg0 = event.arguments[0];", "-\t\t\t\t\tmenuBar = arg0.getBoolean();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OnStatusBar: {", "-\t\t\t\t\tVariant arg0 = event.arguments[0];", "-\t\t\t\t\tstatusBar = arg0.getBoolean();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OnToolBar: {", "-\t\t\t\t\tVariant arg0 = event.arguments[0];", "-\t\t\t\t\ttoolBar = arg0.getBoolean();", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Feature in Internet Explorer.  OnToolBar FALSE is emitted ", "-\t\t\t\t\t* when both tool bar, address bar and menu bar must not be visible.", "-\t\t\t\t\t* OnToolBar TRUE is emitted when either of tool bar, address bar", "-\t\t\t\t\t* or menu bar is visible.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (!toolBar) {", "-\t\t\t\t\t\taddressBar = false;", "-\t\t\t\t\t\tmenuBar = false;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OnVisible: {", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tboolean visible = arg1.getBoolean();", "-\t\t\t\t\tWindowEvent newEvent = new WindowEvent(Browser.this);", "-\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\tif (visible) {", "-\t\t\t\t\t\tif (addressBar) {", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t* Bug in Internet Explorer.  There is no distinct notification for", "-\t\t\t\t\t\t\t* the address bar.  If neither address, menu or tool bars are visible,", "-\t\t\t\t\t\t\t* OnToolBar FALSE is emitted. For some reason, querying the value of", "-\t\t\t\t\t\t\t* AddressBar in this case returns true even though it should not be", "-\t\t\t\t\t\t\t* set visible.  The workaround is to only query the value of AddressBar", "-\t\t\t\t\t\t\t* when OnToolBar FALSE has not been emitted.", "-\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] { \"AddressBar\" }); //$NON-NLS-1$", "-\t\t\t\t\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "-\t\t\t\t\t\t\tif (pVarResult != null && pVarResult.getType() == OLE.VT_BOOL) addressBar = pVarResult.getBoolean();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tnewEvent.addressBar = addressBar;", "-\t\t\t\t\t\tnewEvent.menuBar = menuBar;", "-\t\t\t\t\t\tnewEvent.statusBar = statusBar;", "-\t\t\t\t\t\tnewEvent.toolBar = toolBar;", "-\t\t\t\t\t\tnewEvent.location = location;", "-\t\t\t\t\t\tnewEvent.size = size;", "-\t\t\t\t\t\tfor (int i = 0; i < visibilityWindowListeners.length; i++) {", "-\t\t\t\t\t\t\tvisibilityWindowListeners[i].show(newEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tlocation = null;", "-\t\t\t\t\t\tsize = null;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfor (int i = 0; i < visibilityWindowListeners.length; i++) {", "-\t\t\t\t\t\t\tvisibilityWindowListeners[i].hide(newEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ProgressChange: {", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tint nProgress = arg1.getType() != OLE.VT_I4 ? 0 : arg1.getInt(); // may be -1", "-\t\t\t\t\tVariant arg2 = event.arguments[1];", "-\t\t\t\t\tint nProgressMax = arg2.getType() != OLE.VT_I4 ? 0 : arg2.getInt();", "-\t\t\t\t\tProgressEvent newEvent = new ProgressEvent(Browser.this);", "-\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\tnewEvent.current = nProgress;", "-\t\t\t\t\tnewEvent.total = nProgressMax;", "-\t\t\t\t\tif (nProgress != -1) {", "-\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++) {", "-\t\t\t\t\t\t\tprogressListeners[i].changed(newEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase StatusTextChange: {", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tif (arg1.getType() == OLE.VT_BSTR) {", "-\t\t\t\t\t\tString text = arg1.getString();", "-\t\t\t\t\t\tStatusTextEvent newEvent = new StatusTextEvent(Browser.this);", "-\t\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\t\tnewEvent.text = text;", "-\t\t\t\t\t\tfor (int i = 0; i < statusTextListeners.length; i++) {", "-\t\t\t\t\t\t\tstatusTextListeners[i].changed(newEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase TitleChange: {", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tif (arg1.getType() == OLE.VT_BSTR) {", "-\t\t\t\t\t\tString title = arg1.getString();", "-\t\t\t\t\t\tTitleEvent newEvent = new TitleEvent(Browser.this);", "-\t\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\t\tnewEvent.title = title;", "-\t\t\t\t\t\tfor (int i = 0; i < titleListeners.length; i++) {", "-\t\t\t\t\t\t\ttitleListeners[i].changed(newEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase WindowClosing: {", "-\t\t\t\t\tWindowEvent newEvent = new WindowEvent(Browser.this);", "-\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\tfor (int i = 0; i < closeWindowListeners.length; i++) {", "-\t\t\t\t\t\tcloseWindowListeners[i].close(newEvent);", "-\t\t\t\t\t}", "-\t\t\t\t\tVariant cancel = event.arguments[1];", "-\t\t\t\t\tint pCancel = cancel.getByRef();", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tboolean isChildWindow = arg1.getBoolean();", "-\t\t\t\t\tCOM.MoveMemory(pCancel, new short[]{isChildWindow ? COM.VARIANT_FALSE : COM.VARIANT_TRUE}, 2);", "-\t\t\t\t\tdispose();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase WindowSetHeight: {", "-\t\t\t\t\tif (size == null) size = new Point(0, 0);", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tsize.y = arg1.getInt();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase WindowSetLeft: {", "-\t\t\t\t\tif (location == null) location = new Point(0, 0);", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tlocation.x = arg1.getInt();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase WindowSetTop: {", "-\t\t\t\t\tif (location == null) location = new Point(0, 0);", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tlocation.y = arg1.getInt();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase WindowSetWidth: {", "-\t\t\t\t\tif (size == null) size = new Point(0, 0);", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tsize.x = arg1.getInt();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}\t\t\t", "-\t\t\t/*", "-\t\t\t* Dispose all arguments passed in the OleEvent.  This must be", "-\t\t\t* done to properly release any IDispatch reference that was", "-\t\t\t* automatically addRef'ed when constructing the OleEvent.  ", "-\t\t\t*/", "-\t\t\tVariant[] arguments = event.arguments;", "-\t\t\tfor (int i = 0; i < arguments.length; i++) arguments[i].dispose();", "-\t\t}", "+static int checkStyle(int style) {", "+\tif ((style & SWT.NONE /*MOZILLA*/) != 0) {", "+\t\treturn style;", "+\t}", "+", "+\tString platform = SWT.getPlatform();", "+\tif (\"win32\".equals(platform)) {", "+\t\treturn style & ~SWT.BORDER;", "+\t} else if (\"motif\".equals(platform)) {", "+\t} else if (\"gtk\".equals(platform)) {", "+\t} else if (\"carbon\".equals(platform)) {", "+\t} else if (\"photon\".equals(platform)) {", "+\t}", "+\treturn style;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4033febb813c8fa1decce58827b4e5b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/common/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "7b1d745a08a3e5e966924f3130abf5f742ba4fab", "commitAfterChange": "0cf2458bdedc1c8ab7562ec0d2fe9423d25c9e06", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  static int checkStyle(int style)", "signatureAfterChange": "  static int checkStyle(int style)", "diff": ["+\tif (DefaultType == SWT.DEFAULT) {", "+\t\tString value = System.getProperty (PROPERTY_DEFAULTTYPE);", "+\t\tif (value != null) {", "+\t\t\tif (value.equalsIgnoreCase (\"mozilla\")) { //$NON-NLS-1$", "+\t\t\t\tDefaultType = SWT.MOZILLA;", "+\t\t\t} else if (value.equalsIgnoreCase (\"webkit\")) { //$NON-NLS-1$", "+\t\t\t\tDefaultType = SWT.WEBKIT;", "+\t\t\t}", "+\t\t}", "+\t\tif (DefaultType == SWT.DEFAULT) {", "+\t\t\tDefaultType = SWT.NONE;", "+\t\t}", "+\t}", "+", "+\tif ((style & (SWT.MOZILLA | SWT.WEBKIT)) == 0) {", "+\t\tstyle |= DefaultType;", "+\t}", "+"]}], "num": 39233}
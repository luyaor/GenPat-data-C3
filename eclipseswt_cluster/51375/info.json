{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8054b8f1ff550a39a5e203f97ab6865c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31e4938ede46509bc67692c49eed670e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "c75fa2aaa81cd96400f0b4207d26c662b67c5bce", "commitAfterChange": "68dd096752e238c658788f5395a8c9f209d457e7", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["+\t\tapplicationCallback4 = new Callback(clazz, \"applicationProc\", 4);", "+\t\tint /*long*/ proc4 = applicationCallback4.getAddress();", "+\t\tif (proc4 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tint /*long*/ appProc4 = applicationCallback4.getAddress();", "+\t\tif (appProc4 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tcls = OS.objc_allocateClassPair(OS.class_NSObject, className, 0);", "+\t\tOS.class_addMethod(cls, OS.sel_application_openFile_, appProc4, \"@:@B\");", "+\t\tOS.class_addMethod(cls, OS.sel_application_openFiles_, appProc4, \"@:@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_applicationShouldHandleReopen_hasVisibleWindows_, appProc4, \"@:@B\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec8e2ed18bd8e23a21914c6564ee6bc5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "7b82040614a2bb52781f98435605d3c6f3c53a53", "commitAfterChange": "349efdd4b372c1f72709a73ea4250518e6edd2db", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\tif (eventCallback == null) {", "+\t\teventCallback = new Callback(Browser.class, \"eventProc\", 3);", "+\t\teventProc = eventCallback.getAddress();", "+\t\tif (eventProc == 0) error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t}", "+", "+\t/*", "+\t* Feature in Mozilla.  GtkEvents such as key down, key pressed may be consumed", "+\t* by Mozilla and never be received by the parent embedder.  The workaround", "+\t* is to find the top Mozilla gtk widget that receives all the Mozilla GtkEvents,", "+\t* i.e. the first child of the parent embedder. Then hook event callbacks and", "+\t* forward the event to the parent embedder before Mozilla received and consumed", "+\t* them.", "+\t*/", "+\tint /*long*/ list = OS.gtk_container_get_children(embedHandle);", "+\tif (list != 0) {", "+\t\tmozillaHandle = OS.g_list_data(list);", "+\t\tOS.g_list_free(list);", "+\t\t", "+\t\tif (mozillaHandle != 0) {\t\t\t", "+\t\t\tgetDisplay().setData(ADD_WIDGET_KEY, new Object[] {new Integer(mozillaHandle), this});", "+", "+\t\t\t/* Note. Callback to get events before Mozilla receives and consumes them. */", "+\t\t\tOS.g_signal_connect (mozillaHandle, OS.event, eventProc, 1);", "+\t\t\t", "+\t\t\t/* ", "+\t\t\t* Note.  Callback to get the events not consumed by Mozilla - and to block ", "+\t\t\t* them so that they don't get propagated to the parent handle twice.  ", "+\t\t\t* This hook is set after Mozilla and is therefore called after Mozilla's ", "+\t\t\t* handler because GTK dispatches the event in the order of registration.", "+\t\t\t*/", "+\t\t\tOS.g_signal_connect (mozillaHandle, OS.key_press_event, eventProc, 2);", "+\t\t}", "+\t}", "+\t", "-\t\t\t\tcase SWT.Dispose: onDispose(); break;", "+\t\t\t\tcase SWT.Dispose: onDispose(event.display); break;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ec023e3d867c82b43575f969f4fecc5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "369fe85f9a2973cd4d3a3588672f32a3dfaa930a", "commitAfterChange": "00e0f1b94de0cbfd4ab4290af94b35886e013945", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 82, "signatureBeforeChange": " \t void initializeCallbacks ()", "signatureAfterChange": " \t void initializeCallbacks ()", "diff": ["+\tappearanceCallback = new Callback (this, \"appearanceProc\", 3);", "+\tappearanceProc = appearanceCallback.getAddress ();", "+\tif (appearanceProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tOS.AEInstallEventHandler (OS.kAppearanceEventClass, OS.kAEAppearanceChanged, appearanceProc, 0, false);", "+\tOS.AEInstallEventHandler (OS.kAppearanceEventClass, OS.kAESmallSystemFontChanged, appearanceProc, 0, false);", "+\tOS.AEInstallEventHandler (OS.kAppearanceEventClass, OS.kAESystemFontChanged, appearanceProc, 0, false);", "+\tOS.AEInstallEventHandler (OS.kAppearanceEventClass, OS.kAEViewsFontChanged, appearanceProc, 0, false);"]}], "num": 51375}
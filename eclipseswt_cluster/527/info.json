{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ec605cbdbd7f1fa21306c20b918f9e4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2baeb27f68d312edc2f8049e32418fff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/Variant.java", "commitBeforeChange": "ef390566d4164ae7a1f970e53f45de12a5265cf6", "commitAfterChange": "ee543bcb83fee603dbf808a397bfdb1dd9d1075a", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  void setData(int pData)", "signatureAfterChange": "  void setData(int pData)", "diff": ["-void setData(int pData){", "+void setData(int /*long*/ pData){", "+\t//TODO - use VARIANT structure", "-\t\tint[] newByRefPtr = new int[1];", "-\t\tOS.MoveMemory(newByRefPtr, pData + 8, 4);", "+\t\tint /*long*/[] newByRefPtr = new int /*long*/[1];", "+\t\tOS.MoveMemory(newByRefPtr, pData + 8, OS.PTR_SIZEOF);", "-\t\t\tint[] ppvObject = new int[1];", "-\t\t\tOS.MoveMemory(ppvObject, pData + 8, 4);", "+\t\t\tint /*long*/[] ppvObject = new int /*long*/[1];", "+\t\t\tOS.MoveMemory(ppvObject, pData + 8, OS.PTR_SIZEOF);", "-\t\t\tint[] ppvObject = new int[1];", "-\t\t\tOS.MoveMemory(ppvObject, pData + 8, 4);", "+\t\t\tint /*long*/[] ppvObject = new int /*long*/[1];", "+\t\t\tOS.MoveMemory(ppvObject, pData + 8, OS.PTR_SIZEOF);", "-\t\t\tint[] hMem = new int[1];", "-\t\t\tOS.MoveMemory(hMem, pData + 8, 4);", "+\t\t\tint /*long*/[] hMem = new int /*long*/[1];", "+\t\t\tOS.MoveMemory(hMem, pData + 8, OS.PTR_SIZEOF);", "-\t\t\tint newPData = OS.GlobalAlloc(OS.GMEM_FIXED | OS.GMEM_ZEROINIT, Variant.sizeof);", "+\t\t\tint /*long*/ newPData = OS.GlobalAlloc(OS.GMEM_FIXED | OS.GMEM_ZEROINIT, VARIANT.sizeof);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d19c2131204524069872385684c154", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/internal/mozilla/XPCOMObject.java", "commitBeforeChange": "4cc5ca7de1624c8b539a57f5d1339651e93d2a21", "commitAfterChange": "6c47784c5a7b45e769c078aad8b37a11143d5176", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public XPCOMObject(int[] argCounts)", "signatureAfterChange": " \t public XPCOMObject(int[] argCounts)", "diff": ["-\tint[] callbackAddresses = new int[argCounts.length];", "+\tint /*long*/[] callbackAddresses = new int /*long*/[argCounts.length];", "-\t\t/*", "-\t\t* Note. The following code compiles without warning on a ", "-\t\t* 64 bit platform but won't run. ", "-\t\t*/", "-\t\tcallbackAddresses[i] = (int)/*64*/Callbacks[i][argCounts[i]].getAddress();", "+\t\tcallbackAddresses[i] = Callbacks[i][argCounts[i]].getAddress();", "-\tint pVtable = XPCOM.PR_Malloc(4 * argCounts.length);", "-\tXPCOM.memmove(pVtable, callbackAddresses, 4 * argCounts.length);", "-\tppVtable = XPCOM.PR_Malloc(4);", "-\tXPCOM.memmove(ppVtable, new int[] {pVtable}, 4);", "-\tObjectMap.put(new Integer(ppVtable), this);", "+\tint /*long*/ pVtable = XPCOM.PR_Malloc(OS.PTR_SIZEOF * argCounts.length);", "+\tXPCOM.memmove(pVtable, callbackAddresses, OS.PTR_SIZEOF * argCounts.length);", "+\tppVtable = XPCOM.PR_Malloc(OS.PTR_SIZEOF);", "+\tXPCOM.memmove(ppVtable, new int /*long*/[] {pVtable}, OS.PTR_SIZEOF);", "+\tObjectMap.put(new LONG(ppVtable), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6740934710329d9579c3297826ad1ea9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/internal/ole/win32/COMObject.java", "commitBeforeChange": "ef390566d4164ae7a1f970e53f45de12a5265cf6", "commitAfterChange": "ee543bcb83fee603dbf808a397bfdb1dd9d1075a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public COMObject(int[] argCounts)", "signatureAfterChange": " \t public COMObject(int[] argCounts)", "diff": ["-\tint[] callbackAddresses = new int[argCounts.length];", "+\tint /*long*/[] callbackAddresses = new int /*long*/[argCounts.length];", "-\tint pVtable = OS.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, 4 * argCounts.length);", "-\tCOM.MoveMemory(pVtable, callbackAddresses, 4 * argCounts.length);", "-\tppVtable = OS.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, 4);", "-\tCOM.MoveMemory(ppVtable, new int[] {pVtable}, 4);", "-\tObjectMap.put(new Integer(ppVtable), this);", "+\tint /*long*/ pVtable = OS.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, OS.PTR_SIZEOF * argCounts.length);", "+\tCOM.MoveMemory(pVtable, callbackAddresses, OS.PTR_SIZEOF * argCounts.length);", "+\tppVtable = OS.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, OS.PTR_SIZEOF);", "+\tCOM.MoveMemory(ppVtable, new int /*long*/[] {pVtable}, OS.PTR_SIZEOF);", "+\tObjectMap.put(new LONG(ppVtable), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "494819c81e2c34e349effe9f54eddeee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/Variant.java", "commitBeforeChange": "ef390566d4164ae7a1f970e53f45de12a5265cf6", "commitAfterChange": "ee543bcb83fee603dbf808a397bfdb1dd9d1075a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " void getData(int pData)", "signatureAfterChange": " void getData(int pData)", "diff": ["-void getData(int pData){", "+void getData(int /*long*/ pData){", "+\t\t//TODO - use VARIANT structure", "-\t\tCOM.MoveMemory(pData + 8, new int[]{byRefPtr}, 4);", "+\t\tCOM.MoveMemory(pData + 8, new int /*long*/[]{byRefPtr}, OS.PTR_SIZEOF);", "-\t\t\tCOM.MoveMemory(pData + 8, new int[]{(booleanData) ? COM.VARIANT_TRUE : COM.VARIANT_FALSE}, 2);", "+\t\t\tCOM.MoveMemory(pData + 8, new short[]{(booleanData) ? COM.VARIANT_TRUE : COM.VARIANT_FALSE}, 2);", "-\t\t\tCOM.MoveMemory(pData + 8, new int[]{dispatchData.getAddress()}, 4);", "+\t\t\tCOM.MoveMemory(pData + 8, new int /*long*/[]{dispatchData.getAddress()}, OS.PTR_SIZEOF);", "-\t\t\tCOM.MoveMemory(pData + 8, new int[]{unknownData.getAddress()}, 4);", "+\t\t\tCOM.MoveMemory(pData + 8, new int /*long*/[]{unknownData.getAddress()}, OS.PTR_SIZEOF);", "-\t\t\tint ptr = COM.SysAllocString(data);", "-\t\t\tCOM.MoveMemory(pData + 8, new int[] {ptr}, 4);", "+\t\t\tint /*long*/ ptr = COM.SysAllocString(data);", "+\t\t\tCOM.MoveMemory(pData + 8, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);"]}], "num": 527}
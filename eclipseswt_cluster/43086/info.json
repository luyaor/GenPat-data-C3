{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22fb9ec8d0a053fcddd5f1d5b98b3507", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99529cab4e6bc83c1268b664b6b9de52", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "3d1071088ced6ed6e9f01c8d7208fa00cb52a57a", "commitAfterChange": "a9f618df2b93f8cb19629621c0313294fe974299", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r public MenuItem [] getItems ()", "signatureAfterChange": "\r public MenuItem [] getItems ()", "diff": ["+\tif (OS.IsPPC && hwndCB != 0) {\r", "+\t\tint count = OS.SendMessage (hwndCB, OS.TB_BUTTONCOUNT, 0, 0);\r", "+\t\tTBBUTTON lpButton = new TBBUTTON ();\r", "+\t\tMenuItem [] result = new MenuItem [count];\r", "+\t\tfor (int i=0; i<count; i++) {\r", "+\t\t\tint code = OS.SendMessage (hwndCB, OS.TB_GETBUTTON, i, lpButton);\r", "+\t\t\tresult [i] = parent.findMenuItem (lpButton.idCommand);\r", "+\t\t}\r", "+\t\treturn result;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae1c7a8be2074d5b440de4902e77c762", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/wpf/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "8e746dffcecf23a840e3dfc0bae71b16f86cd38f", "commitAfterChange": "76097374ea0b9824b33cdc5c544b526a4229ae52", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 6, "signatureBeforeChange": " public String[] getAvailableTypeNames()", "signatureAfterChange": " public String[] getAvailableTypeNames()", "diff": ["+ */", "+public String[] getAvailableTypeNames() {", "+\tcheckWidget();", "+\t", "+\tint pDataObject = OS.Clipboard_GetDataObject();", "+\tint pFormats = OS.DataObject_GetFormats(pDataObject, true);", "+\tint length = OS.Array_GetLength(pFormats, 0);", "+\tString[] result = new String [length];", "+\tfor (int i = 0; i < length; i++) {", "+\t\tint pFormat = OS.Array_GetValue(pFormats, i);", "+\t\tresult[i] = Transfer.createJavaString(pFormat);", "+\t\tOS.GCHandle_Free(pFormat);", "+\t}", "+\tOS.GCHandle_Free(pDataObject);", "+\tOS.GCHandle_Free(pFormats);", "+\treturn result;", "+}", "- */", "-public String[] getAvailableTypeNames() {", "-\tcheckWidget();", "-\treturn new String[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e71d5e81939d348517979aec9b12edb6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "267efeba946291455291f7e37b5a9adb5c1006b4", "commitAfterChange": "20492b8023f4da8a65e4db2fb7cb69e8486d81b2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "diff": ["+\t */", "+\tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData) {", "+\t\tif (axuielementref != 0) {", "+\t\t\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t// TODO: error handling? May need to create the array?", "+\t\t\tint [] arrayRef = new int[1];", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeNames, OS.typeCFMutableArrayRef, null, 4, null, arrayRef);", "+\t\t\tint stringArrayRef = arrayRef[0];", "+\t\t\tint length = OS.CFArrayGetCount(stringArrayRef);", "+\t\t\tString [] osAllAttributes = new String [length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tint stringRef = OS.CFArrayGetValueAtIndex(stringArrayRef, i);", "+\t\t\t\tosAllAttributes[i] = stringRefToString (stringRef);", "+\t\t\t}", "+\t\t\t/* Add our list of supported attributes to the array.", "+\t\t\t * Make sure each attribute name is not already in the array before appending.", "+\t\t\t */", "+\t\t\tfor (int i = 0; i < requiredAttributes.length; i++) {", "+\t\t\t\tif (!contains(osAllAttributes, requiredAttributes[i])) {", "+\t\t\t\t\tint stringRef = stringToStringRef(requiredAttributes[i]);", "+\t\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "+\t\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (accessibleTextListeners.size() > 0) {", "+\t\t\t\tfor (int i = 0; i < textAttributes.length; i++) {", "+\t\t\t\t\tif (!contains(osAllAttributes, textAttributes[i])) {", "+\t\t\t\t\t\tint stringRef = stringToStringRef(textAttributes[i]);", "+\t\t\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "+\t\t\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\treturn OS.eventNotHandledErr;", "+\t}", "-\tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData) {", "-\t\tif (axuielementref != 0) {", "-\t\t\tint [] arrayRef = new int[1];", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeNames, OS.typeCFMutableArrayRef, null, 4, null, arrayRef);", "-\t\t\tint stringArrayRef = arrayRef[0];", "-\t\t\t// TODO make sure each attribute name is not a dup before appending?", "-//\t\t\tint length = OS.CFArrayGetCount(stringArrayRef);", "-//\t\t\tString [] osAllAttributes = new String [length];", "-//\t\t\tfor (int i = 0; i < length; i++) {", "-//\t\t\t\tint stringRef = OS.CFArrayGetValueAtIndex(stringArrayRef, i);", "-//\t\t\t\tosAllAttributes[i] = stringRefToString (stringRef);", "-//\t\t\t}", "-\t\t\t/* Add our list of supported attributes to the array. */", "-\t\t\tfor (int i = 0; i < requiredAttributes.length; i++) {", "-\t\t\t\tint stringRef = stringToStringRef(requiredAttributes[i]);", "-\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "-\t\t\t\tOS.CFRelease(stringRef);", "-\t\t\t}", "-\t\t\tif (accessibleTextListeners.size() > 0) {", "-\t\t\t\tfor (int i = 0; i < textAttributes.length; i++) {", "-\t\t\t\t\tint stringRef = stringToStringRef(textAttributes[i]);", "-\t\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "-\t\t\t\t\tOS.CFRelease(stringRef);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn OS.noErr;", "-\t\t}", "-\t\treturn OS.eventNotHandledErr;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652bb956b372e686da97077f6ab2c8da", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/wpf/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "8e746dffcecf23a840e3dfc0bae71b16f86cd38f", "commitAfterChange": "76097374ea0b9824b33cdc5c544b526a4229ae52", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": "  public Object nativeToJava(TransferData transferData)", "diff": ["+", "-\treturn null;", "-}", "+\tif (!isSupportedType(transferData) || transferData.pValue == 0)  return null;", "+\t", "+\tint pStringArray = transferData.pValue;", "+\tint length = OS.Array_GetLength(pStringArray, 0);", "+\tString[] fileNames = new String [length];", "+\tfor (int i = 0; i < length; i++) {", "+\t\tint pString = OS.Array_GetValue(pStringArray, i);", "+\t\tfileNames[i] = createJavaString(pString);", "+\t\tOS.GCHandle_Free(pString);", "+\t}", "+\treturn fileNames;"]}], "num": 43086}
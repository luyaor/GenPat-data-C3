{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5c1fac9f5e4c9dc0cea56644ffb32d5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1c6ab7dea13f14199cb1659a7760c17", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "9e349f195a4af4db166561d2bdcf4dc166371a81", "commitAfterChange": "712f74727abed5cca8491474d2b5809af54c2fca", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\t", "+\t\t", "-\t\t\tint[] shift = new int[1];", "-\t\t\tgetOffsetForMask(16, redMask, true, shift);", "-\t\t\tint rShift = 24 - shift[0];", "-\t\t\tgetOffsetForMask(16, greenMask, true, shift);", "-\t\t\tint gShift = 24 - shift[0];", "-\t\t\tgetOffsetForMask(16, blueMask, true, shift);", "-\t\t\tint bShift = 24 - shift[0];", "+\t\t\tint rShift = 24 - getOffsetForMask(16, redMask, true);", "+\t\t\tint gShift = 24 - getOffsetForMask(16, greenMask, true);", "+\t\t\tint bShift = 24 - getOffsetForMask(16, blueMask, true);", "-\t\t\tshift = new int[1];", "-\t\t\tgetOffsetForMask(srcBitsPerPixel, redMask, true, shift);", "-\t\t\trShift = shift[0];", "-\t\t\tgetOffsetForMask(srcBitsPerPixel, greenMask, true, shift);", "-\t\t\tgShift = shift[0];", "-\t\t\tgetOffsetForMask(srcBitsPerPixel, blueMask, true, shift);", "-\t\t\tbShift = shift[0];", "+\t\t\trShift = getOffsetForMask(srcBitsPerPixel, redMask, true);", "+\t\t\tgShift = getOffsetForMask(srcBitsPerPixel, greenMask, true);", "+\t\t\tbShift = getOffsetForMask(srcBitsPerPixel, blueMask, true);", "-\t\t\t\tfor (int x = 0; x < height; x++) {", "-\t\t\t\t\tr = srcData[index + xIndex + rShift] & 0xFF;", "-\t\t\t\t\tg = srcData[index + xIndex + gShift] & 0xFF;", "-\t\t\t\t\tb = srcData[index + xIndex + bShift] & 0xFF;", "+\t\t\t\tfor (int x = 0; x < width; x++) {", "+\t\t\t\t\tint i= index + xIndex;", "+\t\t\t\t\tr = srcData[i + rShift] & 0xFF;", "+\t\t\t\t\tg = srcData[i + gShift] & 0xFF;", "+\t\t\t\t\tb = srcData[i + bShift] & 0xFF;", "-\t\t\t\t\t\tdestData[index + xIndex + rShift] = zeroR;", "-\t\t\t\t\t\tdestData[index + xIndex + gShift] = zeroG;", "-\t\t\t\t\t\tdestData[index + xIndex + bShift] = zeroB;", "+\t\t\t\t\t\tdestData[i + rShift] = zeroR;", "+\t\t\t\t\t\tdestData[i + gShift] = zeroG;", "+\t\t\t\t\t\tdestData[i + bShift] = zeroB;", "-\t\t\t\t\t\tdestData[index + xIndex + rShift] = oneR;", "-\t\t\t\t\t\tdestData[index + xIndex + gShift] = oneG;", "-\t\t\t\t\t\tdestData[index + xIndex + bShift] = oneB;", "+\t\t\t\t\t\tdestData[i + rShift] = oneR;", "+\t\t\t\t\t\tdestData[i + gShift] = oneG;", "+\t\t\t\t\t\tdestData[i + bShift] = oneB;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1438d30b5b3fa3cc74be394bc19e71b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextDropTargetEffect.java", "commitBeforeChange": "3aff16acfdf77e96d907ad171748ade5965df079", "commitAfterChange": "fe495be3ccb10f369847493f43f449a5b9d6432f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void dragOver(DropTargetEvent event)", "signatureAfterChange": " \tpublic void dragOver(DropTargetEvent event)", "diff": ["-\t\t\tStyledTextContent content = text.getContent();", "-\t\t\tint newOffset = -1;", "-\t\t\ttry {", "-\t\t\t\tnewOffset = text.getOffsetAtLocation(pt);", "-\t\t\t} catch (IllegalArgumentException ex1) {", "-\t\t\t\tint maxOffset = content.getCharCount();", "-\t\t\t\tPoint maxLocation = text.getLocationAtOffset(maxOffset);", "-\t\t\t\tif (pt.y >= maxLocation.y) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tnewOffset = text.getOffsetAtLocation(new Point(pt.x, maxLocation.y));", "-\t\t\t\t\t} catch (IllegalArgumentException ex2) {", "-\t\t\t\t\t\tnewOffset = maxOffset;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tint startOffset = text.getOffsetAtLocation(new Point(0, pt.y));", "-\t\t\t\t\t\tint endOffset = maxOffset;", "-\t\t\t\t\t\tint line = content.getLineAtOffset(startOffset);", "-\t\t\t\t\t\tint lineCount = content.getLineCount();", "-\t\t\t\t\t\tif (line + 1 < lineCount) {", "-\t\t\t\t\t\t\tendOffset = content.getOffsetAtLine(line + 1)  - 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tint lineHeight = text.getLineHeight(startOffset);", "-\t\t\t\t\t\tfor (int i = endOffset; i >= startOffset; i--) {", "-\t\t\t\t\t\t\tPoint p = text.getLocationAtOffset(i);", "-\t\t\t\t\t\t\tif (p.x < pt.x && p.y < pt.y && p.y + lineHeight > pt.y) {", "-\t\t\t\t\t\t\t\tnewOffset = i;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (IllegalArgumentException ex2) {", "-\t\t\t\t\t\tnewOffset = -1;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (newOffset != -1 && newOffset != currentOffset) {", "-\t\t\t\t// check if offset is line delimiter", "-\t\t\t\t// see StyledText.isLineDelimiter()", "-\t\t\t\tint line = content.getLineAtOffset(newOffset);", "-\t\t\t\tint lineOffset = content.getOffsetAtLine(line);\t", "-\t\t\t\tint offsetInLine = newOffset - lineOffset;", "-\t\t\t\t// offsetInLine will be greater than line length if the line ", "-\t\t\t\t// delimiter is longer than one character and the offset is set", "-\t\t\t\t// in between parts of the line delimiter.", "-\t\t\t\tif (offsetInLine > content.getLine(line).length()) {", "-\t\t\t\t\tnewOffset = Math.max(0, newOffset - 1);", "-\t\t\t\t}", "+\t\t\tint[] trailing = new int [1];", "+\t\t\tint newOffset = text.getOffsetAtPoint(pt.x, pt.y, trailing, false);", "+\t\t\tnewOffset += trailing [0];", "+\t\t\tif (newOffset != currentOffset) {"]}], "num": 9887}
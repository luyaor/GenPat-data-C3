{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a13ef87e7ac694e378c149626c8212a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4261b88d8567ba4974779dd0633024", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "54936e5eba312fa3fa114a9ca5e62f04eea30071", "commitAfterChange": "6da8e0dc839eeb6cbf66a4814cf8075bd2429c7f", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\tif (!isBundled ()) {", "-\t\t/*", "-\t\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "-\t\t * to explicitly check in with the Process Manager and set", "-\t\t * the current process to be the front process in order for", "-\t\t * windows to come to the front by default.  The fix is call", "-\t\t * both GetCurrentProcess() and SetFrontProcess().", "-\t\t * ", "-\t\t * NOTE: It is not actually necessary to use the process", "-\t\t * serial number returned by GetCurrentProcess() in the", "-\t\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "-\t\t * used) but both functions must be called in order for", "-\t\t * windows to come to the front.", "-\t\t */", "-\t\tint [] psn = new int [2];", "-\t\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "-\t\t\tint pid = OS.getpid ();", "-\t\t\tbyte [] buffer = null;", "-\t\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + pid)); //$NON-NLS-1$", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tbuffer = new byte [OS.strlen (ptr) + 1];", "-\t\t\t\tOS.memmove (buffer, ptr, buffer.length);", "-\t\t\t} else {", "-\t\t\t\tif (APP_NAME != null) {", "-\t\t\t\t\tchar [] chars = new char [APP_NAME.length ()];", "-\t\t\t\t\tAPP_NAME.getChars (0, chars.length, chars, 0);", "-\t\t\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "-\t\t\t\t\tif (cfstring != 0) {", "-\t\t\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\t\t\trange.length = chars.length;", "-\t\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding ();", "-\t\t\t\t\t\tint [] size = new int [1];", "-\t\t\t\t\t\tint numChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, null, 0, size);", "-\t\t\t\t\t\tif (numChars != 0) {", "-\t\t\t\t\t\t\tbuffer = new byte [size [0] + 1];", "-\t\t\t\t\t\t\tnumChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, buffer, size [0], size);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.CFRelease (cfstring);", "+\t/*", "+\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t * to explicitly check in with the Process Manager and set", "+\t * the current process to be the front process in order for", "+\t * windows to come to the front by default.  The fix is call", "+\t * both GetCurrentProcess() and SetFrontProcess().", "+\t * ", "+\t * NOTE: It is not actually necessary to use the process", "+\t * serial number returned by GetCurrentProcess() in the", "+\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t * used) but both functions must be called in order for", "+\t * windows to come to the front.", "+\t */", "+\tint [] psn = new int [2];", "+\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\tint pid = OS.getpid ();", "+\t\tbyte [] buffer = null;", "+\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + pid)); //$NON-NLS-1$", "+\t\tif (ptr != 0) {", "+\t\t\tbuffer = new byte [OS.strlen (ptr) + 1];", "+\t\t\tOS.memmove (buffer, ptr, buffer.length);", "+\t\t} else {", "+\t\t\tif (APP_NAME != null) {", "+\t\t\t\tchar [] chars = new char [APP_NAME.length ()];", "+\t\t\t\tAPP_NAME.getChars (0, chars.length, chars, 0);", "+\t\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "+\t\t\t\tif (cfstring != 0) {", "+\t\t\t\t\tCFRange range = new CFRange ();", "+\t\t\t\t\trange.length = chars.length;", "+\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding ();", "+\t\t\t\t\tint [] size = new int [1];", "+\t\t\t\t\tint numChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, null, 0, size);", "+\t\t\t\t\tif (numChars != 0) {", "+\t\t\t\t\t\tbuffer = new byte [size [0] + 1];", "+\t\t\t\t\t\tnumChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, buffer, size [0], size);", "+\t\t\t\t\tOS.CFRelease (cfstring);", "-\t\t\tif (buffer != null) OS.CPSSetProcessName (psn, buffer);\t", "+\t\t}", "+\t\tif (buffer != null) OS.CPSSetProcessName (psn, buffer);\t", "+\t\tif (!isBundled ()) {", "-\t\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid)); //$NON-NLS-1$", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tint image = readImageRef (ptr);", "-\t\t\t\tif (image != 0) {", "-\t\t\t\t\tdockImage = image;", "-\t\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "-\t\t\t\t}", "+\t\t}", "+\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid)); //$NON-NLS-1$", "+\t\tif (ptr != 0) {", "+\t\t\tint image = readImageRef (ptr);", "+\t\t\tif (image != 0) {", "+\t\t\t\tdockImage = image;", "+\t\t\t\tOS.SetApplicationDockTileImage (dockImage);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02a3841a4eb65d03cd98225f530854ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "138ae8e47f52fe0aad37420966a245a170227fdf", "commitAfterChange": "9d6ace1ce8469b22f329f9fb81b3f09a371ee5f5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\tint length = OS.strlen (args [4]);\r", "-\t\t\tbyte [] font = new byte [length + 1];\r", "-\t\t\tOS.memmove (font, args [4], length);\r", "-\t\t\tString string = text;\r", "-\t\t\tif (wHint != SWT.DEFAULT) {\r", "-\t\t\t\tDisplay display = getDisplay ();\r", "-\t\t\t\tstring = display.wrapText (text, font, wHint);\r", "-\t\t\t}\r", "+\t\t\t\tint length = OS.strlen (args [4]);\r", "+\t\t\t\tbyte [] font = new byte [length + 1];\r", "+\t\t\t\tOS.memmove (font, args [4], length);\r", "+\t\t\t\tString string = text;\r", "+\t\t\t\tif (wHint != SWT.DEFAULT) {\r", "+\t\t\t\t\tDisplay display = getDisplay ();\r", "+\t\t\t\t\tstring = display.wrapText (text, font, wHint);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e015237765ce95ec44111b2e106d0cbc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0b2b02cc39542c5651b71c1c19a6c2de4afd2ef9", "commitAfterChange": "54936e5eba312fa3fa114a9ca5e62f04eea30071", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\tif (!isBundled ()) {", "-\t\t/*", "-\t\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "-\t\t * to explicitly check in with the Process Manager and set", "-\t\t * the current process to be the front process in order for", "-\t\t * windows to come to the front by default.  The fix is call", "-\t\t * both GetCurrentProcess() and SetFrontProcess().", "-\t\t * ", "-\t\t * NOTE: It is not actually necessary to use the process", "-\t\t * serial number returned by GetCurrentProcess() in the", "-\t\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "-\t\t * used) but both functions must be called in order for", "-\t\t * windows to come to the front.", "-\t\t */", "-\t\tint [] psn = new int [2];", "-\t\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "-\t\t\tint pid = OS.getpid ();", "-\t\t\tint /*long*/ ptr = getAppName().UTF8String();", "-\t\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "+\t/*", "+\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t * to explicitly check in with the Process Manager and set", "+\t * the current process to be the front process in order for", "+\t * windows to come to the front by default.  The fix is call", "+\t * both GetCurrentProcess() and SetFrontProcess().", "+\t * ", "+\t * NOTE: It is not actually necessary to use the process", "+\t * serial number returned by GetCurrentProcess() in the", "+\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t * used) but both functions must be called in order for", "+\t * windows to come to the front.", "+\t */", "+\tint [] psn = new int [2];", "+\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\tint pid = OS.getpid ();", "+\t\tint /*long*/ ptr = getAppName().UTF8String();", "+\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "+\t\tif (!isBundled ()) {", "-\t\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tNSString path = NSString.stringWithUTF8String (ptr);", "-\t\t\t\tNSImage image = (NSImage) new NSImage().alloc();", "-\t\t\t\timage = image.initByReferencingFile(path);", "-\t\t\t\tdockImage = image;", "-\t\t\t\tapplication.setApplicationIconImage(image);", "-\t\t\t}", "+\t\t}", "+\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "+\t\tif (ptr != 0) {", "+\t\t\tNSString path = NSString.stringWithUTF8String (ptr);", "+\t\t\tNSImage image = (NSImage) new NSImage().alloc();", "+\t\t\timage = image.initByReferencingFile(path);", "+\t\t\tdockImage = image;", "+\t\t\tapplication.setApplicationIconImage(image);"]}], "num": 26386}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67913ee0ba5b2c6c7a73b75a7823600f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8aeb8a73311094469e19c9fa745eda7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer2.java", "commitBeforeChange": "166233a02615ac1e2681ccfd00cba112f3ec895b", "commitAfterChange": "630a3feebb5502f50c8ae9bf88292efd98dc911c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 18, "signatureBeforeChange": " TextLayout getTextLayout(String line, int lineOffset)", "signatureAfterChange": " TextLayout getTextLayout(String line, int lineOffset)", "diff": ["-\tint[] bidiSegments = getBidiSegments(lineOffset, line);", "-\tStyledTextEvent event = getLineStyleData(lineOffset, line);", "-\tStyleRange[] styles = event != null ? event.styles : null;", "-\treturn getTextLayout(line, lineOffset, bidiSegments, styles);", "+\tStyleRange[] styles = null;", "+\tint indent = styledText.lineIndent;", "+\tint spacing = styledText.lineSpacing;", "+\tint alignment = styledText.alignment;", "+\tboolean justify = styledText.justify;", "+\tint[] segments = styledText.getBidiSegments(lineOffset, line);", "+\tStyledTextEvent event = styledText.getLineStyleData(lineOffset, line);", "+\tif (event != null) {", "+\t\tstyles = event.styles;", "+\t\tif (event.alignment != -1) {", "+\t\t\talignment = event.alignment & (SWT.CENTER | SWT.LEFT | SWT.RIGHT);", "+\t\t}", "+\t\tif (event.indent != -1) {", "+\t\t\tindent = event.indent;", "+\t\t}", "+\t\tjustify |= event.justify;", "+\t}", "+\tTextLayout layout = getTextLayout(line, lineOffset, segments, styles);", "+\tlayout.setAlignment(alignment);", "+\tlayout.setJustify(justify);", "+\tlayout.setIndent(indent);", "+\tlayout.setSpacing(spacing);", "+\treturn layout;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e4b5bc2d706f61b3489a89687e44319", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "7af48bb9f090f0eca9c603b9f05937ffc4d0e7d9", "commitAfterChange": "097229ba307de6272bc7440fa4dfe6e71695d47e", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 90, "signatureBeforeChange": " public void setSelection (TreeItem [] items)", "signatureAfterChange": " public void setSelection (TreeItem [] items)", "diff": ["-\tint [] handles = new int [length];", "-\t\tTreeItem item = items [i]; ", "+\t\tTreeItem item = items [i];", "+\t\tif (item == null) error (SWT.ERROR_INVALID_ARGUMENT);", "-\t\thandles [i] = item.handle;", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tignoreSelection = true;", "+\t\tOS.TreeViewItem_IsSelected (items [0].handle, true);", "+\t\tignoreSelection = false;", "+\t\treturn;", "+\t}", "+\tint treeType = OS.Object_GetType (handle);", "+    int propertyName = createDotNetString (\"IsSelectionChangeActive\", false);", "+    int property = OS.Type_GetProperty (treeType, propertyName, OS.BindingFlags_Instance | OS.BindingFlags_NonPublic);", "+    OS.GCHandle_Free (treeType);", "+    OS.GCHandle_Free (propertyName);", "+    deselectAll ();", "-\tfor (int i = 0; i < handles.length; i++) {", "-\t\tOS.TreeViewItem_IsSelected (handles [i], true);\t", "+    OS.PropertyInfo_SetValueBoolean (property, handle, true, 0);", "+\tfor (int i = 0; i < length; i++) {", "+\t\tTreeItem item = items [i];", "+\t\tinsertSelectedItem (item, i);", "+\t\tOS.TreeViewItem_IsSelected (item.handle, true);\t", "+\tOS.PropertyInfo_SetValueBoolean (property, handle, false, 0);", "+\tOS.GCHandle_Free (property);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "217da0a12e4c2361776b022d7b34200a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "d7c1fc5764f6967174b7e672c5757dca7558afa1", "commitAfterChange": "f6e0d0d1edf37b12b050c1459d864b748a7d7855", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " public void setTopIndex (int index)", "signatureAfterChange": " public void setTopIndex (int index)", "diff": ["-\t//FIXME: LineCount returns -1 until widget is realized", "-\tindex = Math.min (Math.max (index, 0), count - 1);", "-\tint topIndex = OS.TextBox_GetFirstVisibleLineIndex (handle);", "-\t//FIXME ScrollToLine != top index", "-\tOS.TextBox_ScrollToLine (handle, index - topIndex);", "+\tif (count == -1) {", "+\t\tupdateLayout (handle);", "+\t\tcount = OS.TextBox_LineCount (handle);", "+\t}", "+\tindex = Math.max(0, Math.min (index, count-1));", "+\tint family = OS.Control_FontFamily (handle);", "+\tdouble lineSpacing = OS.FontFamily_LineSpacing (family);", "+\tOS.GCHandle_Free (family);", "+\tdouble size = OS.Control_FontSize (handle);", "+\tdouble lineHeight = lineSpacing * size;", "+\tint name = createDotNetString (\"PART_ContentHost\", false);", "+\tint template = OS.Control_Template (handle);", "+\tint scroller = OS.FrameworkTemplate_FindName (template, name, handle);", "+\tOS.GCHandle_Free (name);", "+\tOS.GCHandle_Free (template);", "+\tif (scroller == 0) return;", "+\tdouble vertOffset = index*lineHeight;", "+\tOS.ScrollViewer_ScrollToVerticalOffset (scroller, vertOffset);", "+\tOS.GCHandle_Free (scroller);", "+\tupdateLayout(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e4481b57e00bcea44dc0761ad0280d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "5d5d6c8770a1d46c82c940b44d6a2e4884862a10", "commitAfterChange": "28aa455ae3ab9d2b8c756bcae7568a88b06cc8eb", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "signatureAfterChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["+\tboolean sendMove = move;", "+\tif ((parent.style & SWT.MIRRORED) != 0) {", "+\t\tint clientWidth = parent.getClientWidth ();", "+\t\tint oldWidth = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);", "+\t\tint oldX = clientWidth - oldWidth - OS.GTK_WIDGET_X (topHandle);", "+\t\tif (move) {", "+\t\t\tsendMove &= x != oldX;", "+\t\t\tx = clientWidth - (resize ? width : oldWidth) - x;", "+\t\t} else {", "+\t\t\tmove = true;", "+\t\t\tx = clientWidth - (resize ? width : oldWidth) - oldX;", "+\t\t\ty = OS.GTK_WIDGET_Y (topHandle);", "+\t\t}", "+\t}", "+\tint clientWidth = 0;", "+\t\tif (!sameExtent && (style & SWT.MIRRORED) != 0) clientWidth = getClientWidth ();", "+\t\tif ((style & SWT.MIRRORED) != 0) moveChildren (clientWidth);", "-\t\tsendEvent (SWT.Move);", "+\t\tif (sendMove) sendEvent (SWT.Move);"]}], "num": 49017}
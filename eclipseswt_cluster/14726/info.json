{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "597465f417f0984d28a92848e5f9bdf7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e94e4ba443c572b48934998f246433b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ce16ab78d0111e8e512b5355762e1bf9a7fecc73", "commitAfterChange": "1d9ea99deae6804983f061ceb2090db0953395df", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "  boolean mouseEvent (int id, int sel, int theEvent, int type)", "signatureAfterChange": "  boolean mouseEvent (int id, int sel, int theEvent, int type)", "diff": ["+\tboolean dragging = false;", "+\tboolean[] consume = null;", "+\tNSInputManager manager = NSInputManager.currentInputManager ();", "+\tif (manager != null && manager.wantsToHandleMouseEvents ()) {", "+\t\tif (manager.handleMouseEvent (nsEvent)) {", "+\t\t\treturn true;", "+\t\t}", "+\t}", "+\t\tcase OS.NSLeftMouseDown:", "+\t\t\tif (nsEvent.clickCount() == 1 && (state & DRAG_DETECT) != 0 && hooks (SWT.DragDetect)) {", "+\t\t\t\tconsume = new boolean[1];", "+\t\t\t\tNSPoint location = view.convertPoint_fromView_(nsEvent.locationInWindow(), null);", "+\t\t\t\tdragging = dragDetect((int)location.x, (int)location.y, false, consume);", "+\t\t\t}", "+\t\t\tbreak;", "-\tboolean dragging = false;", "-\tboolean[] consume = new boolean[1];", "-\tif (nsType == OS.NSLeftMouseDown && nsEvent.clickCount() == 1 && (state & DRAG_DETECT) != 0 && hooks (SWT.DragDetect)) {", "-\t\tNSPoint windowLoc = nsEvent.locationInWindow();", "-\t\tNSPoint viewLoc = view.convertPoint_fromView_(windowLoc, null);", "-\t\tdragging = dragDetect((int)viewLoc.x, (int)viewLoc.y, false, consume);", "-\t}", "-\tif (dragging) {", "-\t\tcontrol.sendDragEvent(nsEvent);", "-\t}", "-\tif (consume[0]) return false;", "+\tif (dragging) control.sendMouseEvent(nsEvent, SWT.DragDetect, false);", "+\tif (consume != null && consume[0]) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b76cdc93ccd12524d465d26e99c2a92d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "545180c481c04bddb5f358152056c1461a4a34d1", "commitAfterChange": "9cd26d5223bd03ea08324197722fd8b6203b707d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void drawText (String string, int x, int y, int flags)", "signatureAfterChange": " public void drawText (String string, int x, int y, int flags)", "diff": ["-\tint length = string.length();", "-\tif (length == 0) return;", "-\tint layout = data.layout;", "+\tif (string.length() == 0) return;", "-\tif ((flags & SWT.DRAW_TRANSPARENT) == 0) background = getBackground().handle;", "+\tGdkGCValues values = null;", "+\tif ((flags & SWT.DRAW_TRANSPARENT) == 0) {", "+\t\tvalues = new GdkGCValues();", "+\t\tOS.gdk_gc_get_values(handle, values);", "+\t\tbackground = new GdkColor();", "+\t\tbackground.pixel = values.background_pixel;", "+\t\tint colormap = OS.gdk_colormap_get_system();", "+\t\tOS.gdk_colormap_query_color(colormap, background.pixel, background);", "+\t}", "-\t\tOS.gdk_draw_layout_with_colors(data.drawable, handle, x, y, layout, null, background);", "+\t\tOS.gdk_draw_layout_with_colors(data.drawable, handle, x, y, data.layout, null, background);", "+\t\tint layout = data.layout;", "-\t\tGdkGCValues values = new GdkGCValues();", "-\t\tOS.gdk_gc_get_values(handle, values);", "+\t\tif (values == null) {", "+\t\t\tvalues = new GdkGCValues();", "+\t\t\tOS.gdk_gc_get_values(handle, values);", "+\t\t}"]}], "num": 14726}
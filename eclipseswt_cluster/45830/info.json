{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b3b87d56bc9b9aba5f2161fe9f04aea", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd8ae040ed5a0e98f5911aa60e020101", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "a08da956b3919d96fc26850b26171899e6aa4ea9", "commitAfterChange": "fa823c434008ea53c7f2ea796b1cfcbe3b183518", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r void setItemSizes (Point [] sizes)", "signatureAfterChange": "\r void setItemSizes (Point [] sizes)", "diff": ["-\tCoolItem [] items = getItems ();\r", "-\tif (sizes.length != items.length) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-\tfor (int i = 0; i < items.length; i++) {\r", "-\t\titems [i].setSize(sizes [i]);\r", "+\tint count = OS.SendMessage (handle, OS.RB_GETBANDCOUNT, 0, 0);\r", "+\tif (sizes.length != count) error (SWT.ERROR_NULL_ARGUMENT);\r", "+\tfor (int i=0; i<count; i++) {\r", "+\t\tRECT rect = new RECT ();\r", "+\t\tOS.SendMessage (handle, OS.RB_GETBANDBORDERS, i, rect);\r", "+\t\tREBARBANDINFO rbBand = new REBARBANDINFO ();\r", "+\t\trbBand.cbSize = REBARBANDINFO.sizeof;\r", "+\t\trbBand.fMask = OS.RBBIM_CHILDSIZE | OS.RBBIM_SIZE | OS.RBBIM_IDEALSIZE;\r", "+\t\tint width = sizes [i].x, height = sizes [i].y;\r", "+\t\trbBand.cx = width;\r", "+\t\trbBand.cxIdeal = width - rect.left - rect.right;\r", "+\t\trbBand.cyChild = rbBand.cyMinChild = rbBand.cyMaxChild = height;\r", "+\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, i, rbBand);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19a7ac76869f77bd60877d667561bc99", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "a76a5df0b4c209922429ba46df2b7f68ccaa3afc", "commitAfterChange": "00fdc215ac9324b47d45bb8a3dfd0ceb267cdf4e", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void redraw (int x, int y, int width, int height, boolean all)", "signatureAfterChange": " public void redraw (int x, int y, int width, int height, boolean all)", "diff": ["+}", "-\tcheckWidget();", "-\tif (!all) return;", "-\tPoint location = text.getLocation();", "-\ttext.redraw(x - location.x, y - location.y, width, height, all);", "-\tlocation = list.getLocation();", "-\tlist.redraw(x - location.x, y - location.y, width, height, all);", "-\tif (arrow != null) {", "-\t\tlocation = arrow.getLocation();", "-\t\tarrow.redraw(x - location.x, y - location.y, width, height, all);", "+\tsuper.redraw(x, y, width, height, all);", "+\tDisplay display = getDisplay();", "+\tRectangle rect = new Rectangle(x, y, width, height);", "+\tRectangle bounds = text.getBounds();", "+\tif (bounds.intersects(rect)) {", "+\t\tRectangle damage = bounds.intersection(rect);", "+\t\tdamage = display.map(this, text, damage);", "+\t\ttext.redraw(damage.x, damage.y, damage.width, damage.height, all);", "+\t}", "+\tbounds = arrow.getBounds();", "+\tif (bounds.intersects(rect)) {", "+\t\tRectangle damage = bounds.intersection(rect);", "+\t\tdamage = display.map(this, arrow, damage);", "+\t\tarrow.redraw(damage.x, damage.y, damage.width, damage.height, all);", "+\t}", "+\tif (popup.isVisible()) {", "+\t\tlist.redraw();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942464d3517b3ff7ee2c1dc35d5af8eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "1215228ca28cd877225ea2d6d4c5dd6eb8a8d47a", "commitAfterChange": "437b26428f10a35a326ef6b319e71308ad9cdb90", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "  void setGCClipping()", "signatureAfterChange": "  void setGCClipping()", "diff": ["-\tint widget = data.widget;", "-\tif (rid == OS.Ph_DEV_RID) OS.PgSetRegion(rid);", "-\telse if (widget != 0) OS.PgSetRegion(OS.PtWidgetRid(widget));", "-\telse if (data.image != null) return;", "-\t", "-\t/* NOTE: PgSetRegion resets the clipping rectangle */", "-\tOS.PgSetMultiClip(data.clipRectsCount, data.clipRects);\t", "+    int widget = data.widget;", "+    if(OS.QNX_MAJOR >= 6 && OS.QNX_MINOR >= 3)", "+    {", "+        if(widget > 0)", "+        {", "+            int visibleTiles = OS.PtGetVisibleTiles(widget);", "+            if(data.clipRects != 0)", "+            {", "+                int gcClip = OS.PhRectsToTiles(data.clipRects, data.clipRectsCount);", "+                PhPoint_t pt = new PhPoint_t();", "+                PhRect_t tran_rect = new PhRect_t();", "+                OS.PtWidgetExtent(widget, tran_rect);", "+                OS.PtWidgetOffset(widget, pt);", "+                pt.x += tran_rect.ul_x;", "+                pt.y += tran_rect.ul_y;", "+                OS.PhTranslateTiles(gcClip, pt);", "+                int inter = OS.PhIntersectTilings(visibleTiles, gcClip, new short[1]);", "+                if(inter != 0)", "+                {", "+                    OS.PgSetMultiClipTiles(inter);", "+                    OS.free(inter);", "+                }", "+                OS.free(gcClip);", "+            } else", "+            {", "+                OS.PgSetMultiClipTiles(visibleTiles);", "+            }", "+            OS.free(visibleTiles);", "+        }", "+        return;", "+    }", "+    if(rid == 1)", "+        OS.PgSetRegion(rid);", "+    else", "+    if(widget != 0)", "+        OS.PgSetRegion(OS.PtWidgetRid(widget));", "+    else", "+    if(data.image != null)", "+        return;", "+    if(widget == 0)", "+        return;", "+    OS.PgSetMultiClip(data.clipRectsCount, data.clipRects);", "+    int clip_tile = getClipping(widget, data.topWidget, true, true, null);", "+    int clip_rects_count[] = new int[1];", "+    int clip_rects = OS.PhTilesToRects(clip_tile, clip_rects_count);", "+    OS.PhFreeTiles(clip_tile);", "+    if(clip_rects_count[0] == 0)", "+    {", "+        clip_rects_count[0] = 1;", "+        OS.free(clip_rects);", "+        clip_rects = OS.malloc(8);", "+        OS.memset(clip_rects, 0, 8);", "+    }", "+    OS.PgSetClipping((short)clip_rects_count[0], clip_rects);", "+    OS.free(clip_rects);", "+}", "-\tif (widget == 0 || data.paint) return;", "-\t", "-\tint clip_tile = getClipping(widget, data.topWidget, true, true, null);", "-\tint[] clip_rects_count = new int[1];", "-\tint clip_rects = OS.PhTilesToRects(clip_tile, clip_rects_count);", "-\tOS.PhFreeTiles(clip_tile);\t", "-\tif (clip_rects_count[0] == 0) {", "-\t\tclip_rects_count[0] = 1;", "-\t\tOS.free(clip_rects);", "-\t\tclip_rects = OS.malloc(PhRect_t.sizeof);", "-\t\tOS.memset(clip_rects, 0, PhRect_t.sizeof);", "-\t}", "-\tOS.PgSetClipping((short)clip_rects_count[0], clip_rects);", "-\tOS.free(clip_rects);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc7bab8f4fb99a315adf9d187202618", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "5c71c160828b856065885beff06af81ccfac684f", "commitAfterChange": "1692fbe72737d57ce7a28edd69b8de45d624b6dc", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "diff": ["+\t/*", "+\t* Bug in Windows.  The code in Windows that determines", "+\t* when tool items should wrap seems to use the window", "+\t* bounds rather than the client area.  Unfortunately,", "+\t* tool bars with the style TBSTYLE_EX_HIDECLIPPEDBUTTONS", "+\t* use the client area.  This means that buttons which", "+\t* overlap the border are hidden before they are wrapped.", "+\t* The fix is to compute TBSTYLE_EX_HIDECLIPPEDBUTTONS", "+\t* and set it each time the tool bar is resized.", "+\t*/", "+\tif ((style & SWT.BORDER) != 0 && (style & SWT.WRAP) != 0) {", "+\t\tRECT windowRect = new RECT ();", "+\t\tOS.GetWindowRect (handle, windowRect);", "+\t\tint index = 0, border = getBorderWidth () * 2; ", "+\t\tRECT rect = new RECT ();", "+\t\tint count = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);", "+\t\twhile (index < count) {", "+\t\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, index, rect);", "+\t\t\tOS.MapWindowPoints (handle, 0, rect, 2);", "+\t\t\tif (rect.right > windowRect.right - border * 2) break;", "+\t\t\tindex++;", "+\t\t}", "+\t\tint bits = OS.SendMessage (handle, OS.TB_GETEXTENDEDSTYLE, 0, 0);", "+\t\tif (index == count) {", "+\t\t\tbits |= OS.TBSTYLE_EX_HIDECLIPPEDBUTTONS;", "+\t\t} else {", "+\t\t\tbits &= ~OS.TBSTYLE_EX_HIDECLIPPEDBUTTONS;", "+\t\t}", "+\t\tOS.SendMessage (handle, OS.TB_SETEXTENDEDSTYLE, 0, bits);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81918bf2b7e0bb33e9fbe8073fdfc973", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "4554e604711848107217e581c2ea19dd3a200ccc", "commitAfterChange": "943950684f8a4ea21db196bca596eabbe07db1ea", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " public void setImage (int columnIndex, Image value)", "signatureAfterChange": " public void setImage (int columnIndex, Image value)", "diff": ["-\t", "+", "-\t/*", "-\t * If this is the first image being put into the tree then its item height", "-\t * may be adjusted, in which case a full redraw is needed.", "-\t */", "-\tif (parent.imageHeight == 0) {", "-\t\tint oldItemHeight = parent.itemHeight;", "-\t\tparent.setImageHeight (value.getBounds ().height);", "-\t\tif (oldItemHeight != parent.itemHeight) {", "-\t\t\tif (columnIndex == 0) {", "-\t\t\t\tparent.col0ImageWidth = value.getBounds ().width;", "-\t\t\t\tif (columns.length > 0) {", "-\t\t\t\t\t/* ", "-\t\t\t\t\t * All column 0 cells will now have less room available for their texts,", "-\t\t\t\t\t * so all items must now recompute their column 0 displayTexts.", "-\t\t\t\t\t */", "-\t\t\t\t\tGC gc = new GC (parent);", "-\t\t\t\t\tTreeItem[] rootItems = parent.items;", "-\t\t\t\t\tfor (int i = 0; i < rootItems.length; i++) {", "-\t\t\t\t\t\trootItems [i].updateColumnWidth (columns [0], gc);", "-\t\t\t\t\t}", "-\t\t\t\t\tgc.dispose ();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tparent.redraw ();", "-\t\t\treturn;", "+\tif (columns.length == 0) {", "+\t\tif (parent.imageHeight == 0) {", "+\t\t\t/* this is the first image being put into the parent Tree */", "+\t\t\tRectangle bounds = value.getBounds ();", "+\t\t\tparent.orderedCol0imageWidth = bounds.width;", "+\t\t\tparent.setImageHeight (bounds.height);", "+\t\t\tparent.redrawItems (0, parent.availableItemsCount - 1, false);", "+\t\t} else {", "+\t\t\tredrawItem ();", "+\t\treturn;", "-\t/* ", "-\t * If this is the first image being put into column 0 then all cells", "-\t * in the column should also indent accordingly. ", "-\t */", "-\tif (columnIndex == 0 && parent.col0ImageWidth == 0) {", "-\t\tparent.col0ImageWidth = value.getBounds ().width;", "-\t\t/* redraw the column */", "-\t\tif (columns.length == 0) {", "-\t\t\tparent.redraw ();", "-\t\t} else {", "+\t/* there are 1+ columns */", "+\tTreeColumn column = columns [columnIndex];", "+\tint orderedIndex = column.getOrderIndex ();", "+\tRectangle bounds = value.getBounds ();", "+\tif (column.itemImageWidth == 0) column.itemImageWidth = bounds.width;", "+", "+\tif (parent.imageHeight == 0) {", "+\t\t/* this is the first image being put into the parent Tree */", "+\t\tint oldItemHeight = parent.itemHeight;", "+\t\tparent.setImageHeight (bounds.height);", "+", "+\t\tif (orderedIndex == 0) {\t/* the first ordered column */", "+\t\t\tparent.orderedCol0imageWidth = bounds.width;", "-\t\t\tGC gc = new GC (parent);", "+\t\t\tGC gc = new GC (parent);", "-\t\t\t\trootItems [i].updateColumnWidth (columns [0], gc);", "+\t\t\t\trootItems [i].updateColumnWidth (column, gc);", "-\t\t\tparent.redraw (", "-\t\t\t\tcolumns [0].getX (), 0,", "-\t\t\t\tcolumns [0].width,", "-\t\t\t\tparent.getClientArea ().height,", "-\t\t\t\ttrue);", "+\t\t\tif (oldItemHeight != parent.itemHeight) {", "+\t\t\t\t/* the item height grew as a result of the new image height, so redraw everything */", "+\t\t\t\tparent.redraw ();", "+\t\t\t} else {", "+\t\t\t\t/* redraw the column since all items should now have image space */", "+\t\t\t\tparent.redraw (column.getX (), 0, column.width, parent.getClientArea ().height, false);", "+\t\t\t}", "+\t\t} else {\t/* not the first ordered column */", "+\t\t\tif (oldItemHeight != parent.itemHeight) {", "+\t\t\t\t/* the item height grew as a result of the new image height, so redraw everything */", "+\t\t\t\tparent.redraw ();", "+\t\t\t} else {", "+\t\t\t\tredrawItem ();", "+\t\t\t}", "+", "+\tif (orderedIndex == 0 && parent.orderedCol0imageWidth == 0) {", "+\t\t/* this is the first image being put into the current ordered column 0 */", "+\t\tparent.orderedCol0imageWidth = bounds.width;", "+\t\t/* ", "+\t\t * All column 0 cells will now have less room available for their texts,", "+\t\t * so all items must now recompute their column 0 displayTexts.", "+\t\t */", "+\t\tTreeItem[] rootItems = parent.items;", "+\t\tGC gc = new GC (parent);", "+\t\tfor (int i = 0; i < rootItems.length; i++) {", "+\t\t\trootItems [i].updateColumnWidth (column, gc);", "+\t\t}", "+\t\tgc.dispose ();", "+\t\tparent.redraw (column.getX (), 0, column.width, parent.getClientArea ().height, false);", "+\t\treturn;", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdff0f6bb373fd40b0759a0709b81416", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "d86ccf7311b1b26cf1d62a483694e7a1700908ba", "commitAfterChange": "aecaa6269b337935ec99f9a6d9b790e4662ca557", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " void doMouseLocationChange(int x, int y, boolean select)", "signatureAfterChange": " void doMouseLocationChange(int x, int y, boolean select)", "diff": ["-\t\tx = Math.max(leftMargin, Math.min(x, clientAreaWidth - leftMargin - rightMargin));", "-\t\ty = Math.max(topMargin, Math.min(y, clientAreaHeight - topMargin - bottomMargin));", "-\t\tif (!select) clearBlockSelection(true);", "-\t\tint[] trailing = new int[1]; ", "-\t\tint offset = getOffsetAtPoint(x, y, trailing, true);", "-\t\tif (offset != -1) {", "-\t\t\tsetBlockSelectionOffset(offset + trailing[0]);", "+\t\tx = Math.max(leftMargin, Math.min(x, clientAreaWidth - rightMargin));", "+\t\ty = Math.max(topMargin, Math.min(y, clientAreaHeight - bottomMargin));", "+\t\tif (doubleClickEnabled && clickCount > 1) {", "+\t\t\tboolean wordSelect = (clickCount & 1) == 0;", "+\t\t\tif (wordSelect) {", "+\t\t\t\tPoint left = getPointAtOffset(doubleClickSelection.x);", "+\t\t\t\tint[] trailing = new int[1]; ", "+\t\t\t\tint offset = getOffsetAtPoint(x, y, trailing, true);", "+\t\t\t\tif (offset != -1) {", "+\t\t\t\t\tif (x > left.x) {", "+\t\t\t\t\t\toffset = getWordNext(offset + trailing[0], SWT.MOVEMENT_WORD_END);", "+\t\t\t\t\t\tsetBlockSelectionOffset(doubleClickSelection.x, offset);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\toffset = getWordPrevious(offset + trailing[0], SWT.MOVEMENT_WORD_START);", "+\t\t\t\t\t\tsetBlockSelectionOffset(doubleClickSelection.y, offset);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (x > left.x) {", "+\t\t\t\t\t\tsetBlockSelectionLocation(left.x, left.y, x, y);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tPoint right = getPointAtOffset(doubleClickSelection.y);", "+\t\t\t\t\t\tsetBlockSelectionLocation(right.x, right.y, x, y);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tsetBlockSelectionLocation(blockXLocation, y);", "+\t\t\t}", "-\t\t\tsetBlockSelectionLocation(x, y);", "+\t\t\tif (!select) clearBlockSelection(true);", "+\t\t\tint[] trailing = new int[1]; ", "+\t\t\tint offset = getOffsetAtPoint(x, y, trailing, true);", "+\t\t\tif (offset != -1) {", "+\t\t\t\tsetBlockSelectionOffset(offset + trailing[0]);", "+\t\t\t} else {", "+\t\t\t\tsetBlockSelectionLocation(x, y);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dea33b91356550669ddf88f9a3ae19f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 60, "signatureBeforeChange": " public void setExpanded(boolean expand)", "signatureAfterChange": " public void setExpanded (boolean value)", "diff": ["- */", "-public void setExpanded(boolean expand) {", "-\tcheckWidget();", "-\tif (isLeaf() == false && expand == true) {", "-\t\tgetParent().expand(this, false);", "-\t}", "-\telse {", "-\t\tgetParent().collapse(this, false);", "-\t}", "-}", "+}", "+public void setExpanded (boolean value) {", "+\tcheckWidget ();", "+\tif (expanded == value) return;", "+\tif (items.length == 0) return;", "+\t// TODO the next line seems to match other platforms, test case is lazy Tree snippet", "+\tif (parent.inExpand) return;", "+\tif (value) {", "+\t\texpanded = value;", "+\t\tparent.makeDescendentsAvailable (this);", "+\t\tparent.redrawFromItemDownwards (availableIndex);", "+\t} else {", "+\t\tint oldAvailableLength = parent.availableItems.length;", "+\t\tTreeItem[] descendents = computeAvailableDescendents ();", "+\t\texpanded = value;", "+\t\tparent.makeDescendentsUnavailable (this, descendents);", "+\t\t/* move focus (and selection if SWT.SINGLE) to item if a descendent had focus */", "+\t\tTreeItem focusItem = parent.focusItem;", "+\t\tif (focusItem != null && focusItem != this && focusItem.hasAncestor (this)) {", "+\t\t\tparent.setFocusItem (this, true);", "+\t\t\tif ((style & SWT.SINGLE) != 0) {", "+\t\t\t\tparent.selectedItems = new TreeItem[] {this};", "+\t\t\t}", "+\t\t\t/* Fire an event since the selection is being changed automatically */", "+\t\t\tEvent newEvent = new Event ();", "+\t\t\tnewEvent.item = this;", "+\t\t\tparent.sendEvent (SWT.Selection, newEvent);", "+\t\t\tif (isDisposed ()) return;", "+\t\t\tparent.showItem (this);", "+\t\t}", "+\t\tparent.redrawItems(availableIndex, oldAvailableLength - 1);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a466526cae2f3c2753aee9a3f00711af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java", "commitBeforeChange": "31cd6ab709bd12e0a040b5f3cf2da696eefbaf45", "commitAfterChange": "828ba16598ffe05117d7e7850c0ff70351e02de8", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tvoid installListeners()", "signatureAfterChange": "  \tvoid installListeners()", "diff": ["+\t\t\t\t", "+\t\t\t\tif (event.type == SWT.MouseUp && link != null) {", "+\t\t\t\t\tint offset = styledText.getCaretOffset();", "+\t\t\t\t\tStyleRange range = offset > 0 ? styledText.getStyleRangeAtOffset(offset-1) : null;", "+\t\t\t\t\tif (range != null) {", "+\t\t\t\t\t\tif (link == range.data) {", "+\t\t\t\t\t\t\t//\tTODO", "+\t\t\t\t\t\t\tSystem.out.println(\"LINK: \" + link);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});", "+\t\tstyledText.addListener(SWT.Dispose, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tStyleRange[] styles = styledText.getStyleRanges(0, styledText.getCharCount(), false);", "+\t\t\t\tfor (int i = 0; i < styles.length; i++) {", "+\t\t\t\t\tObject data = styles[i].data;", "+\t\t\t\t\tif (data != null) {", "+\t\t\t\t\t\tif (data instanceof Image) ((Image)data).dispose();", "+\t\t\t\t\t\tif (data instanceof Control) ((Control)data).dispose();", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdbb5bd61c0cdb39bf7a2e4070360956", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "57a9ff77b38cea95f2d6cbc3c32d2c803c3f766b", "commitAfterChange": "fa200a79d7b14e6fb1437b5428daf32bf5fe6e9a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void redraw ()", "signatureAfterChange": "  void redraw (int column, boolean drawText, boolean drawImage)", "diff": ["-void redraw () {", "+void redraw (int column, boolean drawText, boolean drawImage) {", "+\t\tRECT rect = new RECT ();", "-\t\tOS.SendMessage (hwnd, OS.LVM_REDRAWITEMS, index, index);", "+\t\tif (column == -1) {", "+\t\t\tOS.SendMessage (hwnd, OS.LVM_REDRAWITEMS, index, index);", "+\t\t} else {", "+\t\t\tif (drawText) rect.left |= OS.LVIR_LABEL;", "+\t\t\tif (drawImage) rect.left |= OS.LVIR_ICON;", "+\t\t\tif (column == 0) {", "+\t\t\t\tif (OS.SendMessage (hwnd, OS.LVM_GETITEMRECT, index, rect) != 0) {\t", "+\t\t\t\t\tOS.InvalidateRect (hwnd, rect, true);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\trect.top = column;", "+\t\t\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, index, rect) != 0) {", "+\t\t\t\t\tif (drawText && !drawImage) {", "+\t\t\t\t\t\tRECT iconRect = new RECT ();", "+\t\t\t\t\t\ticonRect.left = OS.LVIR_ICON;", "+\t\t\t\t\t\ticonRect.top = column;", "+\t\t\t\t\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, index, iconRect) != 0) {", "+\t\t\t\t\t\t\trect.left = iconRect.right;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.InvalidateRect (hwnd, rect, true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4c26005084a65d66610d7a9887fcbe1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "a08da956b3919d96fc26850b26171899e6aa4ea9", "commitAfterChange": "fa823c434008ea53c7f2ea796b1cfcbe3b183518", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r public void setWrapIndices (int [] indices)", "signatureAfterChange": "\r public void setWrapIndices (int [] indices)", "diff": ["-\tif (indices == null) error (SWT.ERROR_NULL_ARGUMENT);\r", "-\tCoolItem [] items = getItems ();\r", "-\tfor (int i = 0; i < items.length; i++) {\r", "-\t\titems [i].setWrap (false);\r", "+\tif (indices == null) indices = new int [0];\r", "+\tint count = OS.SendMessage (handle, OS.RB_GETBANDCOUNT, 0, 0);\r", "+\tfor (int i=0; i<indices.length; i++) {\r", "+\t\tif (indices [i] < 0 || indices [i] >= count) error (SWT.ERROR_INVALID_ARGUMENT);\t\r", "-\tfor (int i = 0; i < indices.length; i++) {\r", "-\t\tint index = indices [i];\r", "-\t\titems [index].setWrap (true);\r", "+\tREBARBANDINFO rbBand = new REBARBANDINFO ();\r", "+\trbBand.cbSize = REBARBANDINFO.sizeof;\r", "+\trbBand.fMask = OS.RBBIM_STYLE;\r", "+\tfor (int i=0; i<count; i++) {\r", "+\t\tOS.SendMessage (handle, OS.RB_GETBANDINFO, i, rbBand);\r", "+\t\trbBand.fStyle &= ~OS.RBBS_BREAK;\r", "+\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, i, rbBand);\r", "+\t}\r", "+\tfor (int i=0; i<indices.length; i++) {\r", "+\t\tOS.SendMessage (handle, OS.RB_GETBANDINFO, indices [i], rbBand);\r", "+\t\trbBand.fStyle |= OS.RBBS_BREAK;\r", "+\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, indices [i], rbBand);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2093674b35e03255d90aeb370ba69980", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "23825160d21d6c3c1a58f38fbbe98cca0211c41b", "commitAfterChange": "88b2eb5d18523e69ae1e3acb4a4a79733b8a3e52", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r void setItemOrder (int [] itemOrder)", "signatureAfterChange": "\r void setItemOrder (int [] itemOrder)", "diff": ["+\tREBARBANDINFO rbBand = new REBARBANDINFO ();\r", "+\trbBand.cbSize = REBARBANDINFO.sizeof;\r", "-\t\tOS.SendMessage (handle, OS.RB_MOVEBAND, index, i);\r", "+\t\tif (index != i) {\r", "+\t\t\t/*\r", "+\t\t\t* If the item that is about to be moved is the last item\r", "+\t\t\t* on the row, resize it to the ideal size.  Force the next\r", "+\t\t\t* to last item on the same row to be the maximum size.\r", "+\t\t\t*/\r", "+\t\t\tint lastItemSrcRow = getLastIndexOfRow (index);\r", "+\t\t\tint lastItemDstRow = getLastIndexOfRow (i);\t\t\t\r", "+\t\t\tif (index == lastItemSrcRow) {\r", "+\t\t\t\trbBand.fMask = OS.RBBIM_IDEALSIZE;\r", "+\t\t\t\tOS.SendMessage (handle, OS.RB_GETBANDINFO, index, rbBand);\r", "+\t\t\t\trbBand.cx = rbBand.cxIdeal;\r", "+\t\t\t\trbBand.fMask = OS.RBBIM_SIZE;\r", "+\t\t\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, index, rbBand);\r", "+\t\t\t\tif (index - 1 >= 0) {\r", "+\t\t\t\t\trbBand.cx = MAX_WIDTH;\r", "+\t\t\t\t\trbBand.fMask = OS.RBBIM_SIZE;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, index - 1, rbBand);\r", "+\t\t\t\t}\t\t\t\r", "+\t\t\t} \r", "+\t\t\t\r", "+\t\t\t/* Move the item */\r", "+\t\t\tOS.SendMessage (handle, OS.RB_MOVEBAND, index, i);\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* If the item that has just been moved now the last item\r", "+\t\t\t* on the row, resize it to the maximum size.\r", "+\t\t\t*/\r", "+\t\t\tif (i == lastItemDstRow) {\r", "+\t\t\t\trbBand.cx = MAX_WIDTH;\r", "+\t\t\t\trbBand.fMask = OS.RBBIM_SIZE;\r", "+\t\t\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, i, rbBand);\r", "+\t\t\t}\t\r", "+\t\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c63886e3e32884065d393fd60b1fa60", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "ca45fe430ed44fea42c49b26ae3ce2c4c2ad8354", "commitAfterChange": "e8c8fc165f050f47ac2b161e31aa754f630d6915", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void layoutItems ()", "signatureAfterChange": "  void layoutItems ()", "diff": ["-void layoutItems () {", "+void layoutItems () {\t", "+\t/*", "+\t* Feature in Windows.  When a tool bar has the style", "+\t* TBSTYLE_LIST and has a drop down item, Window leaves", "+\t* too much padding around the button.  This affects", "+\t* every button in the tool bar and makes the preferred", "+\t* height too big.  The fix is to set the TBSTYLE_LIST", "+\t* when the tool bar contains both text and images.", "+\t* ", "+\t* NOTE: Tool bars with CCS_VERT must have TBSTYLE_LIST", "+\t* set before any item is added or the tool bar does", "+\t* not lay out properly.  The work around does not run", "+\t* in this case.", "+\t*/", "+\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "+\t\tif ((style & SWT.RIGHT) != 0 && (style & SWT.VERTICAL) == 0) {", "+\t\t\tboolean hasText = false, hasImage = false;", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tToolItem item = items [i];", "+\t\t\t\tif (item != null) {", "+\t\t\t\t\tif (!hasText) hasText = item.text.length () != 0;", "+\t\t\t\t\tif (!hasImage) hasImage = item.image != null;", "+\t\t\t\t\tif (hasText && hasImage) break;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint oldBits = OS.GetWindowLong (handle, OS.GWL_STYLE), newBits = oldBits;", "+\t\t\tif (hasText && hasImage) {", "+\t\t\t\tnewBits |= OS.TBSTYLE_LIST;", "+\t\t\t} else {", "+\t\t\t\tnewBits &= ~OS.TBSTYLE_LIST;", "+\t\t\t}", "+\t\t\tif (newBits != oldBits) {", "+\t\t\t\tsetDropDownItems (false);", "+\t\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, newBits);", "+\t\t\t\tsetDropDownItems (true);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeee3cd0b71beb40558f219f0f05280a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableTree.java", "commitBeforeChange": "3920b0ae4cabde10e6bb2fe1ce197bc5b92ff701", "commitAfterChange": "2fd9bd44ec83b17b8d74fbafe31bc388d7d446bb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r \r void onTraverse(Event e)", "signatureAfterChange": "\r \r void onKeyDown (Event e)", "diff": ["-void onTraverse(Event e) {\r", "-\tif (e.detail == SWT.TRAVERSE_ARROW_PREVIOUS || e.detail == SWT.TRAVERSE_ARROW_NEXT) {\r", "-\t\tTableTreeItem[] selection = getSelection();\r", "-\t\tif (selection.length > 0) {\r", "-\t\t\tTableTreeItem item = selection[0];\r", "-\t\t\tif (item.getItemCount() == 0) return;\r", "-\t\t\tint type;\r", "-\t\t\tif (e.detail == SWT.TRAVERSE_ARROW_NEXT) {\r", "-\t\t\t\tif (item.getExpanded()) return;\r", "-\t\t\t\titem.setExpanded(true);\r", "-\t\t\t\ttable.setTopIndex(table.indexOf(item.tableItem));\r", "-\t\t\t\ttype = SWT.Expand;\r", "-\t\t\t} else {\r", "-\t\t\t\tif (!item.getExpanded()) return;\r", "-\t\t\t\titem.setExpanded(false);\r", "-\t\t\t\ttype = SWT.Collapse;\r", "-\t\t\t}\r", "-\t\t\tEvent event = new Event();\r", "-\t\t\tevent.item = item;\r", "-\t\t\tnotifyListeners(type, event);\r", "-\t\t}\r", "-\t}\r", "-}\r", "+void onKeyDown (Event e) {\r", "+\tTableTreeItem[] selection = getSelection();\r", "+\tif (selection.length == 0) return;\r", "+\tTableTreeItem item = selection[0];\r", "+\tint type = 0;\r", "+\tif (e.keyCode == SWT.ARROW_RIGHT || e.keyCode == SWT.ARROW_LEFT) {\r", "+\t\tif (e.keyCode == SWT.ARROW_RIGHT) {\r", "+\t\t\tif (item.getItemCount() == 0) return;\r", "+\t\t\tif (item.getExpanded()) {\r", "+\t\t\t\tTableTreeItem newSelection = item.getItems()[0];\r", "+\t\t\t\ttable.setSelection(new TableItem[]{newSelection.tableItem});\r", "+\t\t\t\tshowItem(newSelection);\r", "+\t\t\t\ttype = SWT.Selection;\r", "+\t\t\t} else {\r", "+\t\t\t\titem.setExpanded(true);\r", "+\t\t\t\ttype = SWT.Expand;\r", "+\t\t\t}\r", "+\t\t} else {\r", "+\t\t\tif (item.getExpanded()) {\r", "+\t\t\t\titem.setExpanded(false);\r", "+\t\t\t\ttype = SWT.Collapse;\r", "+\t\t\t} else {\r", "+\t\t\t\tTableTreeItem parent = item.getParentItem();\r", "+\t\t\t\tif (parent != null) {\r", "+\t\t\t\t\tint index = parent.indexOf(item);\r", "+\t\t\t\t\tif (index != 0) return;\r", "+\t\t\t\t\ttable.setSelection(new TableItem[]{parent.tableItem});\r", "+\t\t\t\t\ttype = SWT.Selection;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\tif (e.character == '*') {\r", "+\t\titem.expandAll(true);\r", "+\t}\r", "+\tif (e.character == '-') {\r", "+\t\tif (item.getExpanded()) {\r", "+\t\t\titem.setExpanded(false);\r", "+\t\t\ttype = SWT.Collapse;\r", "+\t\t}\r", "+\t}\r", "+\tif (e.character == '+') {\r", "+\t\tif (item.getItemCount() > 0 && !item.getExpanded()) {\r", "+\t\t\titem.setExpanded(true);\r", "+\t\t\ttype = SWT.Expand;\r", "+\t\t}\r", "+\t} \r", "+\tif (type == 0) return;\r", "+\tEvent event = new Event();\r", "+\tnotifyListeners(type, event);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "249bb30d239617cc4c4766d0bdc27d76", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleControlSite.java", "commitBeforeChange": "771246814116ab7a06d741bac1b7a6515066ce29", "commitAfterChange": "59c7194abace25530f6cc464daa22f94507e57c5", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " void onFocusOut(Event e)", "signatureAfterChange": " void onFocusOut(Event e)", "diff": ["+\t\t/*", "+\t\t* Bug in Windows.  When IE7 loses focus and UIDeactivate()", "+\t\t* is called, IE destroys the caret even though it is", "+\t\t* no longer owned by IE.  If focus has moved to a control", "+\t\t* that shows a caret then the caret disappears.  The fix ", "+\t\t* is to detect this case and restore the caret.", "+\t\t*/", "+\t\tint threadId = OS.GetCurrentThreadId();", "+\t\tGUITHREADINFO lpgui1 = new GUITHREADINFO();", "+\t\tlpgui1.cbSize = GUITHREADINFO.sizeof;", "+\t\tOS.GetGUIThreadInfo(threadId, lpgui1);", "+\t\tif (lpgui1.hwndCaret != 0) {", "+\t\t\tGUITHREADINFO lpgui2 = new GUITHREADINFO();", "+\t\t\tlpgui2.cbSize = GUITHREADINFO.sizeof;", "+\t\t\tOS.GetGUIThreadInfo(threadId, lpgui2);", "+\t\t\tif (lpgui2.hwndCaret == 0 && lpgui1.hwndCaret == OS.GetFocus()) {", "+\t\t\t\tif (SWT_RESTORECARET == 0) {", "+\t\t\t\t\tSWT_RESTORECARET = OS.RegisterWindowMessage (new TCHAR (0, \"SWT_RESTORECARET\", true));", "+\t\t\t\t}", "+\t\t\t\t/*", "+\t\t\t\t* If the caret was not restored by SWT, put it back using", "+\t\t\t\t* the information from GUITHREADINFO.  Note that this will", "+\t\t\t\t* not be correct when the caret has a bitmap.  There is no", "+\t\t\t\t* API to query the bitmap that the caret is using.", "+\t\t\t\t*/", "+\t\t\t\tif (OS.SendMessage (lpgui1.hwndCaret, SWT_RESTORECARET, 0, 0) == 0) {", "+\t\t\t\t\tint width = lpgui1.right - lpgui1.left;", "+\t\t\t\t\tint height = lpgui1.bottom - lpgui1.top;", "+\t\t\t\t\tOS.CreateCaret (lpgui1.hwndCaret, 0, width, height);", "+\t\t\t\t\tOS.SetCaretPos (lpgui1.left, lpgui1.top);", "+\t\t\t\t\tOS.ShowCaret (lpgui1.hwndCaret);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd827e8dde82e4b6d18be819b8e3118", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ef3348b27f4d541d10ee19a34027d5fffff6ba48", "commitAfterChange": "5546bb091907f0c70c7ee56bbc26c789d0a2340e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  LRESULT CDDS_PREPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_PREPAINT (int wParam, int lParam)", "diff": ["-\tif (OS.IsWindowVisible (handle)) {", "-\t\t/*", "-\t\t* Bug in Windows.  When the table has the extended style", "-\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t* CLR_NONE to make the table transparent, Windows fills", "-\t\t* a black rectangle around any column that contains an", "-\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "-\t\t* custom draw.", "-\t\t*/", "+\t/*", "+\t* Bug in Windows.  When the table has the extended style", "+\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t* CLR_NONE to make the table transparent, Windows fills", "+\t* a black rectangle around any column that contains an", "+\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "+\t* custom draw.", "+\t*/", "+\tif (customCount++ == 0 && OS.IsWindowVisible (handle)) {", "-\t\t\t\tOS.UpdateWindow (handle);", "-\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "-\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\tint dwExStyle = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\t\t\tif ((dwExStyle & OS.LVS_EX_FULLROWSELECT) != 0) {", "+\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, rect, true);", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\tif (damaged) OS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\tif (result != OS.NULLREGION) OS.InvalidateRgn (handle, rgn, true);", "+\t\t\t\t\t\tOS.DeleteObject (rgn);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\tControl control = findBackgroundControl ();", "-\t\t\tif (control != null && control.backgroundImage != null) {", "+\t}", "+\tif (OS.IsWindowVisible (handle) && OS.IsWindowEnabled (handle)) {", "+\t\tControl control = findBackgroundControl ();", "+\t\tif (control != null && control.backgroundImage != null) {", "+\t\t\tNMLVCUSTOMDRAW nmcd = new NMLVCUSTOMDRAW ();", "+\t\t\tOS.MoveMemory (nmcd, lParam, NMLVCUSTOMDRAW.sizeof);", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "+\t\t} else {", "+\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "-\t\t\t} else {", "-\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\t\tNMLVCUSTOMDRAW nmcd = new NMLVCUSTOMDRAW ();", "-\t\t\t\t\tOS.MoveMemory (nmcd, lParam, NMLVCUSTOMDRAW.sizeof);", "-\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\tif (control == null) control = this;", "-\t\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);", "-\t\t\t\t}", "+\t\t\t\tif (control == null) control = this;", "+\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2a5264c995219b94e299a1ed6afcc63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "fcad395d7da1b4363faafa06975ec35422a8ea3a", "commitAfterChange": "d7427cebf50028bab5e6b28bb9e84910376870e1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  void createItem (TreeItem item, int hParent, int hInsertAfter, int hItem)", "signatureAfterChange": "  void createItem (TreeItem item, int hParent, int hInsertAfter, int hItem)", "diff": ["+\t\t/*", "+\t\t* Bug in Windows.  When a new item is added while Windows", "+\t\t* is requesting data a tree item using TVN_GETDISPINFO,", "+\t\t* outstanding damage for items that are below the new item", "+\t\t* is not scrolled.  The fix is to explicitly damage the", "+\t\t* new area.", "+\t\t*/", "+\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\tif (currentItem != null) {", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\trect.left = hNewItem;", "+\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect) != 0) {", "+\t\t\t\t\tRECT damageRect = new RECT ();", "+\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, damageRect, true);", "+\t\t\t\t\tif (damaged && damageRect.top < rect.bottom) {", "+\t\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\t\tOS.OffsetRect (damageRect, 0, rect.bottom - rect.top);", "+\t\t\t\t\t\t\tOS.InvalidateRect (handle, damageRect, true);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "+\t\t\t\t\t\t\tif (result != OS.NULLREGION) {", "+\t\t\t\t\t\t\t\tOS.OffsetRgn (rgn, 0, rect.bottom - rect.top);", "+\t\t\t\t\t\t\t\tOS.InvalidateRgn (handle, rgn, true);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.DeleteObject (rgn);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399666699a19264b4267b96a500e2070", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableTree.java", "commitBeforeChange": "a7f55348122e685e185be79f1e61c482f210f9b0", "commitAfterChange": "7b9bd176a3b0bcedf3e37bac78e4b0ee77698321", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \t\tpublic void handleEvent(Event e)", "signatureAfterChange": "\r \r void onTraverse(Event e)", "diff": ["-\taddListener(SWT.Resize, new Listener() {\r", "-\t\tpublic void handleEvent(Event e) {\r", "-\t\t\tonResize();\r", "-\t\t}\r", "+void onTraverse(Event e) {\r", "+\tif (e.stateMask != SWT.SHIFT) return;\r", "+\tif (e.detail == SWT.TRAVERSE_ARROW_PREVIOUS || e.detail == SWT.TRAVERSE_ARROW_NEXT) {\r", "+\t\tTableTreeItem[] selection = getSelection();\r", "+\t\tif (selection.length > 0) {\r", "+\t\t\tTableTreeItem item = selection[0];\r", "+\t\t\tif (item.getItemCount() == 0) return;\r", "+\t\t\tint type;\r", "+\t\t\tif (e.detail == SWT.TRAVERSE_ARROW_NEXT) {\r", "+\t\t\t\tif (item.getExpanded()) return;\r", "+\t\t\t\titem.setExpanded(true);\r", "+\t\t\t\ttable.setTopIndex(table.indexOf(item.tableItem));\r", "+\t\t\t\ttype = SWT.Expand;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (!item.getExpanded()) return;\r", "+\t\t\t\titem.setExpanded(false);\r", "+\t\t\t\ttype = SWT.Collapse;\r", "+\t\t\t}\r", "+\t\t\tEvent event = new Event();\r", "+\t\t\tevent.item = item;\r", "+\t\t\tnotifyListeners(type, event);\r", "+\t\t}\r", "+\t}\r", "+}\r"]}], "num": 45830}
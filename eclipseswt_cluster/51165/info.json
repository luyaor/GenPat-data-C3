{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b64333558f581629be64bc5479184c44", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a562618abeb1ed8bad38e2956ba8284", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/WindowCreator.java", "commitBeforeChange": "7ce276d3ee660196a526074440c6f4add29c5b1e", "commitAfterChange": "2726c2ae4e1efed62cf1b4208285cf780c4cda22", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  int CreateChromeWindow(int parent, int chromeFlags, int _retval)", "signatureAfterChange": "  int CreateChromeWindow(int parent, int chromeFlags, int _retval)", "diff": ["-\tWindowEvent event = new WindowEvent(src);", "-\tevent.display = display;", "-\tevent.widget = src;", "-\tfor (int i = 0; i < src.openWindowListeners.length; i++)", "-\t\tsrc.openWindowListeners[i].open(event);", "-\tBrowser browser = event.browser;", "-\tboolean doit = browser != null && !browser.isDisposed();", "+\tBrowser browser;", "+\tboolean doit = false;", "+\tif ((chromeFlags & nsIWebBrowserChrome.CHROME_MODAL) != 0) {", "+\t\t/*", "+\t\t* Feature on Mozilla.  On platforms that lack a native dialog, Mozilla sends a", "+\t\t* requests for a new Browser instance in a modal window. e.g. on Windows, Mozilla", "+\t\t* brings up automatically a native Print Dialog in response to the javascript", "+\t\t* command window.print() whereas on Linux Mozilla requests a new modal window", "+\t\t* and a Browser to display an emulated HTML based print dialog. For this reason,", "+\t\t* modal requests are handled here and not exposed to the user.", "+\t\t*/", "+\t\tShell shell = new Shell(src.getShell(), SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);", "+\t\tshell.setLayout(new FillLayout());", "+\t\tbrowser = new Browser(shell, SWT.NONE);", "+\t\tbrowser.addVisibilityWindowListener(new VisibilityWindowListener() {", "+\t\t\tpublic void hide(WindowEvent event) {", "+\t\t\t}", "+\t\t\tpublic void show(WindowEvent event) {", "+\t\t\t\tBrowser browser = (Browser)event.widget;", "+\t\t\t\tShell shell = browser.getShell();", "+\t\t\t\tif (event.location != null) shell.setLocation(event.location);", "+\t\t\t\tif (event.size != null) {", "+\t\t\t\t\tPoint size = event.size;", "+\t\t\t\t\tshell.setSize(shell.computeSize(size.x, size.y));", "+\t\t\t\t}", "+\t\t\t\tshell.open();", "+\t\t\t}", "+\t\t});", "+\t\tbrowser.addCloseWindowListener(new CloseWindowListener() {", "+\t\t\tpublic void close(WindowEvent event) {", "+\t\t\t\tBrowser browser = (Browser)event.widget;", "+\t\t\t\tShell shell = browser.getShell();", "+\t\t\t\tshell.close();", "+\t\t\t}", "+\t\t});", "+\t\tdoit = true;", "+\t} else {", "+\t\tWindowEvent event = new WindowEvent(src);", "+\t\tevent.display = display;", "+\t\tevent.widget = src;", "+\t\tfor (int i = 0; i < src.openWindowListeners.length; i++)", "+\t\t\tsrc.openWindowListeners[i].open(event);", "+\t\tbrowser = event.browser;", "+\t\tdoit = browser != null && !browser.isDisposed();", "+\t}", "-\t}\t\t", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ffe30a5f2c38ef3ae661e1562a3b0d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/WindowCreator.java", "commitBeforeChange": "7ce276d3ee660196a526074440c6f4add29c5b1e", "commitAfterChange": "2726c2ae4e1efed62cf1b4208285cf780c4cda22", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  int CreateChromeWindow(int parent, int chromeFlags, int _retval)", "signatureAfterChange": "  int CreateChromeWindow(int parent, int chromeFlags, int _retval)", "diff": ["-\tWindowEvent event = new WindowEvent(src);", "-\tevent.display = display;", "-\tevent.widget = src;", "-\tfor (int i = 0; i < src.openWindowListeners.length; i++)", "-\t\tsrc.openWindowListeners[i].open(event);", "-\tBrowser browser = event.browser;", "-\tboolean doit = browser != null && !browser.isDisposed();", "+\tBrowser browser;", "+\tboolean doit = false;", "+\tif ((chromeFlags & nsIWebBrowserChrome.CHROME_MODAL) != 0) {", "+\t\t/*", "+\t\t* Feature on Mozilla.  On platforms that lack a native dialog, Mozilla sends a", "+\t\t* requests for a new Browser instance in a modal window. e.g. on Windows, Mozilla", "+\t\t* brings up automatically a native Print Dialog in response to the javascript", "+\t\t* command window.print() whereas on Linux Mozilla requests a new modal window", "+\t\t* and a Browser to display an emulated HTML based print dialog. For this reason,", "+\t\t* modal requests are handled here and not exposed to the user.", "+\t\t*/", "+\t\tShell shell = new Shell(src.getShell(), SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);", "+\t\tshell.setLayout(new FillLayout());", "+\t\tbrowser = new Browser(shell, SWT.NONE);", "+\t\tbrowser.addVisibilityWindowListener(new VisibilityWindowListener() {", "+\t\t\tpublic void hide(WindowEvent event) {", "+\t\t\t}", "+\t\t\tpublic void show(WindowEvent event) {", "+\t\t\t\tBrowser browser = (Browser)event.widget;", "+\t\t\t\tShell shell = browser.getShell();", "+\t\t\t\tif (event.location != null) shell.setLocation(event.location);", "+\t\t\t\tif (event.size != null) {", "+\t\t\t\t\tPoint size = event.size;", "+\t\t\t\t\tshell.setSize(shell.computeSize(size.x, size.y));", "+\t\t\t\t}", "+\t\t\t\tshell.open();", "+\t\t\t}", "+\t\t});", "+\t\tbrowser.addCloseWindowListener(new CloseWindowListener() {", "+\t\t\tpublic void close(WindowEvent event) {", "+\t\t\t\tBrowser browser = (Browser)event.widget;", "+\t\t\t\tShell shell = browser.getShell();", "+\t\t\t\tshell.close();", "+\t\t\t}", "+\t\t});", "+\t\tdoit = true;", "+\t} else {", "+\t\tWindowEvent event = new WindowEvent(src);", "+\t\tevent.display = display;", "+\t\tevent.widget = src;", "+\t\tfor (int i = 0; i < src.openWindowListeners.length; i++)", "+\t\t\tsrc.openWindowListeners[i].open(event);", "+\t\tbrowser = event.browser;", "+\t\tdoit = browser != null && !browser.isDisposed();", "+\t}", "-\t}\t\t", "+\t}"]}], "num": 51165}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bd5dcb39f976a099307ec45e4e8c6d0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f84a07841699c7adb9f100d4991910dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "3be1894e65751f8fdace6da3d386ac8c0f271b36", "commitAfterChange": "8ec8763ff69792db587ad01343e591e017ba32d8", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tif (attributeName.equals (OS.kAXValueAttribute) || attributeName.equals (OS.kAXTitleAttribute)) {", "-\t\t\tString text = getText ();", "-\t\t\tbuffer = new char [text.length ()];", "-\t\t\ttext.getChars (0, buffer.length, buffer, 0);", "+\t\tif (attributeName.equals (OS.kAXValueAttribute)) {", "+\t\t\tbuffer = getText(0, -1);", "+\t\t\t}", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXNumberOfCharactersAttribute)) {", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeSInt32, 4, new int [] {getCharCount()});", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXSelectedTextAttribute)) {", "+\t\t\tPoint sel = getSelection ();", "+\t\t\tbuffer = getText(sel.x, sel.y);", "+\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXSelectedTextRangeAttribute)) {", "+\t\t\tPoint sel = getSelection ();", "+\t\t\trange = new CFRange();", "+\t\t\trange.location = sel.x;", "+\t\t\trange.length = sel.y - sel.x;", "+\t\t\tint valueRef = OS.AXValueCreate(OS.kAXValueCFRangeType, range);", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFTypeRef, 4, new int [] {valueRef});", "+\t\t\tOS.CFRelease(valueRef);", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXStringForRangeParameterizedAttribute)) {", "+\t\t\tint valueRef [] = new int [1];", "+\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeParameter, OS.typeCFTypeRef, null, 4, null, valueRef);", "+\t\t\tif (status == OS.noErr) {", "+\t\t\t\trange = new CFRange();", "+\t\t\t\tboolean ok = OS.AXValueGetValue(valueRef[0], OS.kAXValueCFRangeType, range);", "+\t\t\t\tif (ok) {", "+\t\t\t\t\tbuffer = getText (range.location, range.location + range.length);", "+\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85d151f19f17431d2b85fc9556f04833", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "257f15bb83942923b6c281d94564ea670f80ba38", "commitAfterChange": "ea4f10ff61f99137c4bfd569d4ad818698d4b452", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 76, "signatureBeforeChange": "  String getClipboardText ()", "signatureAfterChange": "  LRESULT wmClipboard (int msg, int wParam, int lParam)", "diff": ["-", "-String getClipboardText () {", "-\tString string = \"\";", "-\tif (OS.OpenClipboard (0)) {", "-\t\tint hMem = OS.GetClipboardData (OS.IsUnicode ? OS.CF_UNICODETEXT : OS.CF_TEXT);", "-\t\tif (hMem != 0) {", "-\t\t\t/* Ensure byteCount is a multiple of 2 bytes on UNICODE platforms */", "-\t\t\tint byteCount = OS.GlobalSize (hMem) / TCHAR.sizeof * TCHAR.sizeof;", "-\t\t\tint ptr = OS.GlobalLock (hMem);", "-\t\t\tif (ptr != 0) {", "-\t\t\t\t/* Use the character encoding for the default locale */", "-\t\t\t\tTCHAR buffer = new TCHAR (0, byteCount / TCHAR.sizeof);", "-\t\t\t\tOS.MoveMemory (buffer, ptr, byteCount);", "-\t\t\t\tstring = buffer.toString (0, buffer.strlen ());", "-\t\t\t\tOS.GlobalUnlock (hMem);", "-\t\t\t}", "-\t\t}", "-\t\tOS.CloseClipboard ();", "-\t}", "-\treturn string;", "+LRESULT wmClipboard (int msg, int wParam, int lParam) {", "+\tif ((style & SWT.READ_ONLY) != 0) return null;", "+\tif (!hooks (SWT.Verify) && !filters (SWT.Verify)) return null;", "+\tboolean call = false;", "+\tString oldText = null, newText = null;", "+\tswitch (msg) {", "+\t\tcase OS.WM_CLEAR:", "+\t\tcase OS.WM_CUT:", "+\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\t\t\tif (start [0] != end [0]) {", "+\t\t\t\tnewText = \"\";", "+\t\t\t\tcall = true;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase OS.WM_PASTE:", "+\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\t\t\tnewText = getClipboardText ();", "+\t\t\tbreak;", "+\t\tcase OS.EM_UNDO:", "+\t\tcase OS.WM_UNDO:", "+\t\t\tif (OS.SendMessage (handle, OS.EM_CANUNDO, 0, 0) != 0) {", "+\t\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\t\t\t\tignoreModify = ignoreCharacter = true;", "+\t\t\t\tcallWindowProc (msg, wParam, lParam);", "+\t\t\t\tnewText = getSelectionText ();", "+\t\t\t\tcallWindowProc (msg, wParam, lParam);", "+\t\t\t\tignoreModify = ignoreCharacter = false;", "+\t\t\t}", "+\t\t\tbreak;", "+\tif (newText != null && !newText.equals (oldText)) {", "+\t\toldText = newText;", "+\t\tnewText = verifyText (newText, start [0], end [0], null);", "+\t\tif (newText == null) return LRESULT.ZERO;", "+\t\tif (!newText.equals (oldText)) {", "+\t\t\tif (call) {", "+\t\t\t\tcallWindowProc (msg, wParam, lParam);", "+\t\t\t}", "+\t\t\tnewText = Display.withCrLf (newText);", "+\t\t\tTCHAR buffer = new TCHAR (getCodePage (), newText, true);", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When an edit control with ES_MULTILINE", "+\t\t\t* style that does not have the WS_VSCROLL style is full (i.e.", "+\t\t\t* there is no space at the end to draw any more characters),", "+\t\t\t* EM_REPLACESEL sends a WM_CHAR with a backspace character", "+\t\t\t* to remove any further text that is added.  This is an", "+\t\t\t* implementation detail of the edit control that is unexpected", "+\t\t\t* and can cause endless recursion when EM_REPLACESEL is sent", "+\t\t\t* from a WM_CHAR handler.  The fix is to ignore calling the", "+\t\t\t* handler from WM_CHAR.", "+\t\t\t*/", "+\t\t\tignoreCharacter = true;", "+\t\t\tOS.SendMessage (handle, OS.EM_REPLACESEL, 0, buffer);", "+\t\t\tignoreCharacter = false;", "+\t\t\treturn LRESULT.ZERO;", "+\t\t}", "+\t}", "+\tif (msg == OS.WM_UNDO) {", "+\t\tignoreVerify = ignoreCharacter = true;", "+\t\tcallWindowProc (OS.WM_UNDO, wParam, lParam);", "+\t\tignoreVerify = ignoreCharacter = false;", "+\t\treturn LRESULT.ONE;", "+\t}", "+\treturn null;"]}], "num": 54494}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb80422635fa3df16abd040224bfa1ee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a85c68ef1fe6cc0b45ceb2151f205bcc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "492726616c45a959b34fa911e50eb2c45674ed67", "commitAfterChange": "787093e736756adf2ce791103e7e4e3ae474e60e", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  public void setImage (Image image)", "signatureAfterChange": "  public void setImage (Image image)", "diff": ["-\t * If Text/Image of a tool-item changes, then it is ", "-\t * required to reset the proxy menu. Otherwise, the ", "-\t * old menuItem appears in the overflow menu.", "-\t */", "-\tif ((style & SWT.CHECK | SWT.RADIO | SWT.DROP_DOWN) != 0) {", "+\t* If Text/Image of a tool-item changes, then it is ", "+\t* required to reset the proxy menu. Otherwise, the ", "+\t* old menuItem appears in the overflow menu.", "+\t*/", "+\tif ((style & SWT.DROP_DOWN) != 0) {", "-\t\tif ((style & SWT.DROP_DOWN) != 0) {", "-\t\t\tproxyMenuItem = OS.gtk_tool_item_retrieve_proxy_menu_item (handle);", "-\t\t\tOS.g_signal_connect(proxyMenuItem, OS.activate, ToolBar.menuItemSelectedFunc.getAddress(), handle);", "-\t\t}", "+\t\tproxyMenuItem = OS.gtk_tool_item_retrieve_proxy_menu_item (handle);", "+\t\tOS.g_signal_connect(proxyMenuItem, OS.activate, ToolBar.menuItemSelectedFunc.getAddress(), handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b66390ac8b45aa6d89d9d5d3bffbb870", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "85e3e91f7c5ab2935864a23260c5b4863a9eb03c", "commitAfterChange": "6e328f67bc48bae3babf2d21c4d4332857a0675c", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 83, "signatureBeforeChange": " void createKeyBindings()", "signatureAfterChange": " void createKeyBindings()", "diff": ["-\tif ((getStyle() & SWT.MIRRORED) == 0) {", "+\tif (isMirrored() == false) {", "-\tif ((getStyle() & SWT.MIRRORED) == 0) {", "+\tif (isMirrored() == false) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1809c7d8ffa1da0c8d08ad4ff0a48bb8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "5ce98d84a4c0affe3f610dd38f75dacaa39a48fc", "commitAfterChange": "ae4007f11a15afcb4fc57e9bd2429328396e9446", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  void hookEvents ()", "signatureAfterChange": "  void hookEvents ()", "diff": ["-\tif ((style & (SWT.CHECK | SWT.RADIO | SWT.DROP_DOWN)) != 0)\t{", "-\t\tOS.g_signal_connect_closure (handle, OS.create_menu_proxy, display.closures [CREATE_MENU_PROXY], false);", "-\t}", "+\tOS.g_signal_connect_closure (handle, OS.create_menu_proxy, display.closures [CREATE_MENU_PROXY], false);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec6bdad16a978ca3ef7e80ddde895208", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "78b56da73aaece31c0684550745b7a7104823835", "commitAfterChange": "cf742db20509b38d927ca9256380eb34e3e40548", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  void update ()", "signatureAfterChange": "  void update ()", "diff": ["-\t* Bug in Windows.  When a menu item has a check and a string", "-\t* that includes a label and accelerator text but does not have", "-\t* a bitmap, when the string is the longest string in the menu,", "-\t* the label and accelerator text overlap.  The fix is to use", "-\t* SetMenuItemInfo() to indicate that the item has a bitmap", "-\t* and then answer the width of the widest bitmap in the menu", "-\t* from WM_MEASURECHILD.", "+\t* Bug in Windows.  If a menu contains items that have", "+\t* images and can be checked, Windows does not include", "+\t* the width of the image and the width of the check when", "+\t* computing the width of the menu.  When the longest item", "+\t* does not have an image, the label and the accelerator", "+\t* text can overlap.  The fix is to use SetMenuItemInfo()", "+\t* to indicate that all items have a bitmap and then include", "+\t* the width of the widest bitmap in WM_MEASURECHILD.", "-\tif (hasCheck) {", "-\t\tMENUITEMINFO info = new MENUITEMINFO ();", "-\t\tinfo.cbSize = MENUITEMINFO.sizeof;", "-\t\tinfo.fMask = OS.MIIM_BITMAP;", "-\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\tMenuItem item = items [i];", "-\t\t\tif ((item.getStyle () & (SWT.CHECK | SWT.RADIO)) != 0) {", "-\t\t\t\tinfo.hbmpItem = hasImage ? OS.HBMMENU_CALLBACK : 0;", "-\t\t\t\tOS.SetMenuItemInfo (handle, item.id, false, info);", "-\t\t\t}", "+\tMENUITEMINFO info = new MENUITEMINFO ();", "+\tinfo.cbSize = MENUITEMINFO.sizeof;", "+\tinfo.fMask = OS.MIIM_BITMAP;", "+\tfor (int i=0; i<items.length; i++) {", "+\t\tMenuItem item = items [i];", "+\t\tif (item.getImage () == null) {", "+\t\t\tinfo.hbmpItem = hasImage ? OS.HBMMENU_CALLBACK : 0;", "+\t\t\tOS.SetMenuItemInfo (handle, item.id, false, info);"]}], "num": 1401}
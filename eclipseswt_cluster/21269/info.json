{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b10fddce5435c6dce5cc8fe74a4f8d5f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe73f95286b2e881e06adbb26d38d229", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b16a097ce1f227d4fd237cb6f8c0ba950eb50b9e", "commitAfterChange": "ad9e4c7cb4e85f9de20630936ecc2b154a562c71", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 64, "signatureBeforeChange": "  int itemCompareProc (int browser, int itemOne, int itemTwo, int sortProperty)", "signatureAfterChange": "  int itemCompareProc (int browser, int itemOne, int itemTwo, int sortProperty)", "diff": ["-\tint index1 = itemOne - 1;", "-\tif (!(0 <= index1 && index1 < items.length)) return OS.noErr;", "-\tint index2 = itemTwo - 1;", "-\tif (!(0 <= index2 && index2 < items.length)) return OS.noErr;", "+\tif (!(0 < itemOne && itemOne <= items.length)) return OS.noErr;", "+\tif (!(0 < itemTwo && itemTwo <= items.length)) return OS.noErr;", "+\tTreeItem item1 = items [itemOne - 1];", "+\tTreeItem item2 = items [itemTwo - 1];", "+\tif (item1 == null || item2 == null) return OS.noErr;", "+\tint index1 = _indexOf (item1.parentItem, item1);", "+\tint index2 = _indexOf (item2.parentItem , item2);", "-\t\treturn items [index1].index > items [index2].index ? 1 : 0;", "+\t\treturn index1 > index2 ? 1 : 0;", "-\treturn items [index1].index < items [index2].index ? 1 : 0;", "+\treturn index1 < index2 ? 1 : 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354ff600d856b47c9ec4fe1b9b1a025c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "f6897dc51677bc8983438d20d42a8be57e2f89ea", "commitAfterChange": "027efea8497c499c5a154aa88f5be4f3d2c3ef88", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  int EnumFontFamProc (int lpelfe, int lpntme, int FontType, int lParam)", "signatureAfterChange": "  int EnumFontFamProc (int lpelfe, int lpntme, int FontType, int lParam)", "diff": ["+\t\t\tint[] newPixels = new int[newLogFonts.length];", "+\t\t\tSystem.arraycopy (pixels, 0, newPixels, 0, nFonts);", "+\t\t\tpixels = newPixels;", "-\t\tlogFonts [nFonts++] = logFont;", "+\t\tlogFonts [nFonts] = logFont;", "+\t\tif (logFont.lfHeight > 0) {", "+\t\t\t/*", "+\t\t\t * Feature in Windows. If the lfHeight of the LOGFONT structure", "+\t\t\t * is positive, the lfHeight measures the height of the entire", "+\t\t\t * cell, including internal leading, in logical units. Since the", "+\t\t\t * height of a font in points does not include the internal leading,", "+\t\t\t * we must subtract the internal leading, which requires a TEXTMETRIC,", "+\t\t\t * which in turn requires font creation.", "+\t\t\t */", "+\t\t\tOS.MoveMemory(metrics, lpntme, TEXTMETRIC.sizeof);", "+\t\t\tpixels[nFonts] = logFont.lfHeight - metrics.tmInternalLeading;", "+\t\t} else {", "+\t\t\tpixels[nFonts] = -logFont.lfHeight;", "+\t\t}", "+\t\tnFonts++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75a3a942c8412d8ffd4a696e6dd513f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3cb6ea1399cac6199170e3be2b276a9ae2fae6a0", "commitAfterChange": "4245ebe8c8c3435f45a4a5b0014a1583f07e0494", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " void destroyItem (TreeItem item)", "signatureAfterChange": " void destroyItem (TreeItem item)", "diff": ["-\t\tTreeItem[] newAvailableItems = new TreeItem [availableItems.length - 1];", "-\t\tSystem.arraycopy (availableItems, 0, newAvailableItems, 0, availableIndex);", "-\t\tSystem.arraycopy (", "-\t\t\tavailableItems,", "-\t\t\tavailableIndex + 1,", "-\t\t\tnewAvailableItems,", "-\t\t\tavailableIndex,", "-\t\t\tnewAvailableItems.length - availableIndex);", "-\t\tavailableItems = newAvailableItems;", "+", "+\t\tif (availableIndex != availableItemsCount - 1) {", "+\t\t\t/* item is not at end of available items list, so must shift items left to reclaim its slot */", "+\t\t\tSystem.arraycopy (", "+\t\t\t\tavailableItems,", "+\t\t\t\tavailableIndex + 1,", "+\t\t\t\tavailableItems,", "+\t\t\t\tavailableIndex,", "+\t\t\t\tavailableItemsCount - availableIndex - 1);", "+\t\t\tavailableItems [availableItemsCount - 1] = null;", "+\t\t} else {", "+\t\t\tavailableItems [availableIndex] = null;\t/* last item, so no array copy needed */", "+\t\t}", "+\t\tavailableItemsCount--;", "+", "+\t\tif (redraw && availableItems.length - availableItemsCount == 4) {", "+\t\t\t/* shrink the items array */", "+\t\t\tTreeItem[] newAvailableItems = new TreeItem [availableItemsCount];", "+\t\t\tSystem.arraycopy (availableItems, 0, newAvailableItems, 0, newAvailableItems.length);", "+\t\t\tavailableItems = newAvailableItems;", "+\t\t}", "+", "-\t\tfor (int i = availableIndex; i < availableItems.length; i++) {", "+\t\tfor (int i = availableIndex; i < availableItemsCount; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e24aa03aa6bf8637ec39f5b7303ebb43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_custom_TableTree.java", "commitBeforeChange": "ea405f6fb0d3c326c6d6598b865868c79c617d4c", "commitAfterChange": "ca7d9417c41b11f3b661bfffad06504c3c22dc98", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public void test_selectAll()", "signatureAfterChange": "  public void test_selectAll()", "diff": ["+", "-\twarnUnimpl(\"Test test_selectAll not written\");", "+\t/* FUTURE: Should also add sub-nodes, and test both single and multi with those.", "+\t * i.e. subitems[i] = new TableTreeItem(items[i], SWT.NONE); */", "+", "+\tselectAll_helper(\"Empty table tree\", 0, new TableTreeItem[] {});", "+", "+\tint number = 8;", "+\tTableTreeItem[] items = new TableTreeItem[number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\titems[i] = new TableTreeItem(tableTree, SWT.NONE);", "+\t}", "+\tselectAll_helper(\"selectAll()\", number, items);", "+", "+\t", "+\t/* Now run the same tests on a single-select TableTree. */", "+\tsingleSelect();", "+\tselectAll_helper(\"Empty table tree\", 0, new TableTreeItem[] {});", "+", "+\titems = new TableTreeItem[number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\titems[i] = new TableTreeItem(tableTree, SWT.NONE);", "+\t}", "+\tselectAll_helper(\"selectAll()\", 0, new TableTreeItem[] {});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49b64eaf8e2466615265efba3fb6c2d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7e01a6d9771ad5bd12b9af1fbbe393164c9959aa", "commitAfterChange": "c61a57d7a074a80b5b03c4761a563015a2ecc5fa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void createItem (TableItem item)", "signatureAfterChange": " void createItem (TableItem item)", "diff": ["-\tTableItem[] newItems = new TableItem [items.length + 1];", "-\tSystem.arraycopy (items, 0, newItems, 0, index);", "-\tnewItems [index] = item;", "-\tSystem.arraycopy (items, index, newItems, index + 1, items.length - index);", "-\titems = newItems;", "+\tif (itemsCount == items.length) {", "+\t\tTableItem[] newItems = new TableItem [items.length + 4];", "+\t\tSystem.arraycopy (items, 0, newItems, 0, items.length);", "+\t\titems = newItems;", "+\t}", "+\tif (index != itemsCount) {", "+\t\t/* new item is not at end of list, so shift other items right to create space for it */", "+\t\tSystem.arraycopy (items, index, items, index + 1, itemsCount - index);", "+\t}", "+\titems [index] = item;", "+\titemsCount++;", "-\tfor (int i = index + 1; i < items.length; i++) {", "+\tfor (int i = index + 1; i < itemsCount; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "501ac4d873bef88a466fa06396657c4e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7e01a6d9771ad5bd12b9af1fbbe393164c9959aa", "commitAfterChange": "c61a57d7a074a80b5b03c4761a563015a2ecc5fa", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " public void setItemCount (int count)", "signatureAfterChange": " public void setItemCount (int count)", "diff": ["-\tint itemCount = items.length;", "-\tif (count == itemCount) return;", "+\tif (count == itemsCount) return;", "-\tif (count < itemCount) {", "-\t\tfor (int i = count; i < itemCount; i++) {", "+\tif (count < itemsCount) {", "+\t\tfor (int i = count; i < itemsCount; i++) {", "-\t}", "-\t", "-\tTableItem[] newItems = new TableItem [count];", "-\tSystem.arraycopy (items, 0, newItems, 0, Math.min (count, itemCount));", "-\titems = newItems;", "-\tfor (int i = itemCount; i < count; i++) {", "-\t\titems [i] = new TableItem (this, SWT.NONE, i, false);", "+\t\titemsCount = count;", "+\t} else {", "+\t\tTableItem[] newItems = new TableItem [count];", "+\t\tSystem.arraycopy (items, 0, newItems, 0, Math.min (count, itemsCount));", "+\t\titems = newItems;", "+\t\tfor (int i = itemsCount; i < count; i++) {", "+\t\t\titems [i] = new TableItem (this, SWT.NONE, i, false);", "+\t\t\titemsCount++;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7baf4d17e40fa793bbd180f8d543d2e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7e01a6d9771ad5bd12b9af1fbbe393164c9959aa", "commitAfterChange": "c61a57d7a074a80b5b03c4761a563015a2ecc5fa", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " void destroyItem (TableItem item)", "signatureAfterChange": " void destroyItem (TableItem item)", "diff": ["-\tTableItem[] newItems = new TableItem [items.length - 1];", "-\tSystem.arraycopy (items, 0, newItems, 0, index);", "-\tSystem.arraycopy (items, index + 1, newItems, index, newItems.length - index);", "-\titems = newItems;", "+\tif (index != itemsCount - 1) {", "+\t\t/* item is not at end of items list, so must shift items left to reclaim its slot */", "+\t\tSystem.arraycopy (items, index + 1, items, index, itemsCount - index - 1);", "+\t\titems [itemsCount - 1] = null;", "+\t} else {", "+\t\titems [index] = null;\t/* last item, so no array copy needed */", "+\t}", "+\titemsCount--;", "+\t", "+\tif (items.length - itemsCount == 4) {", "+\t\t/* shrink the items array */", "+\t\tTableItem[] newItems = new TableItem [itemsCount];", "+\t\tSystem.arraycopy (items, 0, newItems, 0, newItems.length);", "+\t\titems = newItems;", "+\t}", "-\tfor (int i = index; i < items.length; i++) {", "+\tfor (int i = index; i < itemsCount; i++) {", "-\t", "+"]}], "num": 21269}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70ba919cedcc309c32ddfc52cc354408", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24049452f9f268335e6ee63f3fc1649a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "cd8ecb8a69ace1495a67c3b9bfd25402d9344085", "commitAfterChange": "f8eebc4a59a9df233459e3a90fd2ee42161294e2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public FontMetrics getFontMetrics()", "signatureAfterChange": " public FontMetrics getFontMetrics()", "diff": ["-\t\t\t\t/* Reef through properties looking for XAFONT */", "+\t\t\t\t/* Look through properties for XAFONT */", "-\t\t\t\t\tStringBuffer stringBuffer = new StringBuffer();", "-\t\t\t\t\tint strPtr = ptr;", "-\t\t\t\t\tbyte[] c = new byte[1];", "-\t\t\t\t\tOS.memmove(c, strPtr, 1);", "-\t\t\t\t\twhile (c[0] != 0) {", "-\t\t\t\t\t\tstringBuffer.append((char)c[0]);", "-\t\t\t\t\t\tstrPtr++;", "-\t\t\t\t\t\tOS.memmove(c, strPtr, 1);", "+\t\t\t\t\tint length = OS.strlen(ptr);", "+\t\t\t\t\tbyte[] nameBuf = new byte[length];", "+\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "+\t\t\t\t\tOS.XFree(ptr);", "+\t\t\t\t\tString xlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "+\t\t\t\t\tint avg = 0;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tavg = FontData.motif_new(xlfd).averageWidth / 10;", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t// leave avg unchanged so that it will be computed below", "-\t\t\t\t\tString xlfd = stringBuffer.toString().toLowerCase();", "-\t\t\t\t\tint avg = FontData.motif_new(xlfd).averageWidth / 10;", "-\t\t\t\t\tOS.XtFree(ptr);", "-\t\t\t\t\t/* Reef through properties looking for XAFONT */", "+\t\t\t\t\t/* Look through properties for XAFONT */", "-\t\t\t\t\t\tStringBuffer stringBuffer = new StringBuffer();", "-\t\t\t\t\t\tint strPtr = ptr;", "-\t\t\t\t\t\tbyte[] c = new byte[1];", "-\t\t\t\t\t\tOS.memmove(c, strPtr, 1);", "-\t\t\t\t\t\twhile (c[0] != 0) {", "-\t\t\t\t\t\t\tstringBuffer.append((char)c[0]);", "-\t\t\t\t\t\t\tstrPtr++;", "-\t\t\t\t\t\t\tOS.memmove(c, strPtr, 1);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tString xlfd = stringBuffer.toString().toLowerCase();", "-\t\t\t\t\t\tint avg = FontData.motif_new(xlfd).averageWidth / 10;", "+\t\t\t\t\t\tint length = OS.strlen(ptr);", "+\t\t\t\t\t\tbyte[] nameBuf = new byte[length];", "+\t\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "+\t\t\t\t\t\tString xlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "+\t\t\t\t\t\tint avg = 0;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tavg = FontData.motif_new(xlfd).averageWidth / 10;", "+\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * Some font servers, for example, xfstt, do not pass", "+\t\t\t\t\t\t\t * reasonable font properties to the client, so we", "+\t\t\t\t\t\t\t * cannot construct a FontData for these. Use the font", "+\t\t\t\t\t\t\t * name instead.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\tint[] fontName = new int[1];", "+\t\t\t\t\t\t\tOS.memmove(fontName, fontNamePtr [0] + (i * 4), 4);", "+\t\t\t\t\t\t\tptr = fontName[0];", "+\t\t\t\t\t\t\tif (ptr != 0 ) {", "+\t\t\t\t\t\t\t\tlength = OS.strlen(ptr);", "+\t\t\t\t\t\t\t\tnameBuf = new byte[length];", "+\t\t\t\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "+\t\t\t\t\t\t\t\txlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tavg = FontData.motif_new(xlfd).averageWidth / 10;", "+\t\t\t\t\t\t\t\t} catch (Exception ex) {", "+\t\t\t\t\t\t\t\t\t// leave avg unchanged (0) so that it will be computed below", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ddb0a8489b8ab4a49f048f33c5dde4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "613386a136aed7f7be85acd46a7cab744bbae94d", "commitAfterChange": "e144c0287be1ac0d08cd8310d65398d20b566a1f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r void initSizeCombo(FontExtStyles fontExtStyles)", "signatureAfterChange": "\r void initSizeCombo ()", "diff": ["- */\r", "-void initSizeCombo(FontExtStyles fontExtStyles) {\r", "-\tCombo sizeCombo = getSizeCombo();\r", "-\tString previousSize = sizeCombo.getText();\r", "-\tsizeCombo.removeAll();\r", "-\r", "-\tint selectionIndex = -1;\r", "-\r", "-\tif (fontExtStyles.isScalable()) {\r", "-\t\tsizeCombo.setItems(SCALABLE_SIZES);\r", "-\t\tselectionIndex = sizeCombo.indexOf(String.valueOf(DEFAULT_SIZE));\r", "-\t}\r", "-\telse {\r", "-\t\tVector sizes = fontExtStyles.getSizes(getExtStyleCombo().getText());\r", "-\t\tfor (int i = 0; i < sizes.size(); i++) {\r", "-\t\t\tInteger size = (Integer) sizes.elementAt(i);\r", "-\t\t\tsizeCombo.add(size.toString());\r", "-\t\t\t// select the largest height if there's no font\r", "-\t\t\t// size that is at least as high as SelectionSize\r", "-\t\t\tif (size.intValue() >= DEFAULT_SIZE && selectionIndex == -1)\r", "-\t\t\t\tselectionIndex = i;\r", "-\t\t}\r", "-\t}\r", "-\r", "-\tint indexOfPreviousSelection = sizeCombo.indexOf(previousSize);\r", "-\tif (indexOfPreviousSelection != -1)\r", "-\t\tselectionIndex = indexOfPreviousSelection;\r", "-\r", "-\tif (selectionIndex == -1)\t// last resort case, should not happen\r", "-\t\tselectionIndex = sizeCombo.getItemCount() - 1;\t\t\t\r", "-\r", "-\tsizeCombo.select(selectionIndex);\t\r", "-}\r", "+ */\r", "+void initSizeCombo () {\r", "+\tString oldSelect = fontSizeCombo.getText ();\r", "+\tfontSizeCombo.removeAll ();\r", "+\t\r", "+\tString characterSet = charSetCombo.getText ();\r", "+\tString faceName = faceNameCombo.getText ();\r", "+\tString extStyle = extStyleCombo.getText ();\r", "+\tHashtable sizes = getSizes (characterSet, faceName, extStyle);\r", "+\tif (sizes == null) return;\r", "+\tif (sizes.get (SCALABLE_KEY) == null) {\r", "+\t\t/*\r", "+\t\t * Font is not scalable so just present the provided sizes.\r", "+\t\t */\r", "+\t\tsetSizeItemsSorted (sizes.keys ());\r", "+\t} else {\r", "+\t\t/*\r", "+\t\t * Font is scalable so present the provided sizes and scalable\r", "+\t\t * sizes for selection.\r", "+\t\t */\r", "+\t\tVector allSizes = new Vector ();\r", "+\t\t/*\r", "+\t\t * Add the scalable sizes.\r", "+\t\t */\r", "+\t\tfor (int i = 0; i < SCALABLE_SIZES.length; i++) {\r", "+\t\t\tallSizes.addElement (new Integer (SCALABLE_SIZES [i]));\r", "+\t\t}\r", "+\t\t/*\r", "+\t\t * Add the provided sizes.\r", "+\t\t */\r", "+\t\tEnumeration providedSizes = sizes.keys ();\r", "+\t\twhile (providedSizes.hasMoreElements ()) {\r", "+\t\t\tInteger size = (Integer) providedSizes.nextElement ();\r", "+\t\t\tif (!size.equals (SCALABLE_KEY) && !allSizes.contains (size)) {\r", "+\t\t\t\tallSizes.addElement (size);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tsetSizeItemsSorted (allSizes.elements ());\r", "+\t}\r", "+\t\r", "+\tint selectIndex = fontSizeCombo.indexOf (oldSelect);\r", "+\tif (selectIndex == -1) {\r", "+\t\tselectIndex = fontSizeCombo.indexOf (String.valueOf (DEFAULT_SIZE));\r", "+\t}\r", "+\tselectIndex = Math.max (0, selectIndex);\r", "+\tfontSizeCombo.select (selectIndex);\r", "+\tfontSizeCombo.setData (new Integer (selectIndex));\r", "+\tinitStyleCombo ();\r", "+}\r"]}], "num": 44042}
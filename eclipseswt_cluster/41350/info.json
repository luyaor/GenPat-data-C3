{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcca434ca59f0bcc45aaa2497d434ca2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02a82e4bb97ed78a5b8eddae4aff6edf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "b638755c097e5d77bb4590b992f7e713c53b1a96", "commitAfterChange": "51301b8f9ff2918efccde41738fee4413b347deb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void computeRuns()", "signatureAfterChange": "  void computeRuns()", "diff": ["-\tif (textLength != 0) {", "-\t\tchar[] chars = new char[textLength + 1];", "-\t\ttext.getChars(0, textLength, chars, 1);", "-\t\tchars[0] = ZWS;", "-\t\tint breakCount = 1;", "-\t\tfor (int i = 0; i < chars.length; i++) {", "-\t\t\tchar c = chars[i];", "-\t\t\tif (c == '\\n' || c == '\\r') {", "-\t\t\t\tbreakCount++;", "-\t\t\t}", "+\tchar[] chars = new char[textLength + 1];", "+\ttext.getChars(0, textLength, chars, 1);", "+\tchars[0] = ZWS;", "+\tint breakCount = 1;", "+\tfor (int i = 0; i < chars.length; i++) {", "+\t\tchar c = chars[i];", "+\t\tif (c == '\\n' || c == '\\r') {", "+\t\t\tbreakCount++;", "-\t\thardBreaks = new int [breakCount];", "-\t\tbreakCount = 0;", "-\t\tfor (int i = 0; i < chars.length; i++) {", "-\t\t\tchar c = chars[i];", "-\t\t\tif (c == '\\n' || c == '\\r') {", "-\t\t\t\tchars[i] = ZWS;", "-\t\t\t\thardBreaks[breakCount++] = i;", "-\t\t\t}", "-\t\t}", "-\t\thardBreaks[breakCount] = translateOffset(textLength);", "-\t\tint newTextPtr = OS.NewPtr(chars.length * 2);", "-\t\tOS.memcpy(newTextPtr, chars, chars.length * 2);", "-\t\tOS.ATSUSetTextPointerLocation(layout, newTextPtr, 0, chars.length, chars.length);", "-\t\tOS.ATSUSetTransientFontMatching(layout, true);", "-\t\tif (textPtr != 0) OS.DisposePtr(textPtr);", "-\t\ttextPtr = newTextPtr;", "-\t}\t", "-\tint[] buffer = new int[1];", "-\tint length = translateOffset(textLength);", "-\tif (textLength != 0) {", "-\t\tfor (int i = 0; i < styles.length - 1; i++) {", "-\t\t\tStyleItem run = styles[i];", "-\t\t\trun.createStyle(font);", "-\t\t\tint start = translateOffset(run.start);", "-\t\t\tint runLength = translateOffset(styles[i + 1].start) - start;", "-\t\t\tOS.ATSUSetRunStyle(layout, run.atsuStyle, start, runLength);", "-\t\t}", "-\t\tif (indent >= 0) {", "-\t\t\tint ptr = OS.NewPtr(4);", "-\t\t\tbuffer[0] = OS.Long2Fix(indent);", "-\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\tint[] tags = new int[]{OS.kATSUImposeWidthTag};", "-\t\t\tint[] sizes = new int[]{4};", "-\t\t\tint[] values = new int[]{ptr};", "-\t\t\tOS.ATSUCreateStyle(buffer);", "-\t\t\tindentStyle = buffer[0];", "-\t\t\tOS.ATSUSetAttributes(indentStyle, tags.length, tags, sizes, values);", "-\t\t\tOS.DisposePtr(ptr);", "-\t\t\tOS.ATSUSetRunStyle(layout, indentStyle, 0, 1);", "-\t\t\tfor (int i = 0; i < hardBreaks.length-1; i++) {", "-\t\t\t\tint offset = hardBreaks[i];", "-\t\t\t\tOS.ATSUSetRunStyle(layout, indentStyle, offset, 1);", "-\t\t\t}", "-\t\t}", "-\t\tOS.ATSUGetLayoutControl(layout, OS.kATSULineWidthTag, 4, buffer, null);", "-\t\tint wrapWidth = buffer[0];", "-\t\tfor (int i=0, start=0; i<hardBreaks.length; i++) {", "-\t\t\tint hardBreak = hardBreaks[i];", "-\t\t\tbuffer[0] = 0;", "-\t\t\tif (wrapWidth != 0) OS.ATSUBatchBreakLines(layout, start, hardBreak - start, wrapWidth, buffer);", "-\t\t\tOS.ATSUSetSoftLineBreak(layout, hardBreak);", "-\t\t\tstart = hardBreak;", "-\t\t}", "-\t\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, 0, null, buffer);", "-\t\tint count = buffer[0];", "-\t\tbreaks = new int[count];", "-\t\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, count, breaks, null);", "-\t} else {", "-\t\tbreaks = new int[1];", "+\thardBreaks = new int [breakCount];", "+\tbreakCount = 0;", "+\tfor (int i = 0; i < chars.length; i++) {", "+\t\tchar c = chars[i];", "+\t\tif (c == '\\n' || c == '\\r') {", "+\t\t\tchars[i] = ZWS;", "+\t\t\thardBreaks[breakCount++] = i;", "+\t\t}", "+\t}", "+\thardBreaks[breakCount] = translateOffset(textLength);", "+\tint newTextPtr = OS.NewPtr(chars.length * 2);", "+\tOS.memcpy(newTextPtr, chars, chars.length * 2);", "+\tOS.ATSUSetTextPointerLocation(layout, newTextPtr, 0, chars.length, chars.length);", "+\tOS.ATSUSetTransientFontMatching(layout, true);", "+\tif (textPtr != 0) OS.DisposePtr(textPtr);", "+\ttextPtr = newTextPtr;", "+", "+\tint[] buffer = new int[1];", "+\tfor (int i = 0; i < styles.length - 1; i++) {", "+\t\tStyleItem run = styles[i];", "+\t\trun.createStyle(font);", "+\t\t//set the defaut font in the ZWS when text is empty fixes text metrics", "+\t\tint start = textLength != 0 ? translateOffset(run.start) : 0;", "+\t\tint runLength = translateOffset(styles[i + 1].start) - start;", "+\t\tOS.ATSUSetRunStyle(layout, run.atsuStyle, start, runLength);", "+\t}", "+\tint ptr = OS.NewPtr(4);", "+\tbuffer[0] = OS.Long2Fix(indent);", "+\tOS.memcpy(ptr, buffer, 4);", "+\tint[] tags = new int[]{OS.kATSUImposeWidthTag};", "+\tint[] sizes = new int[]{4};", "+\tint[] values = new int[]{ptr};", "+\tOS.ATSUCreateStyle(buffer);", "+\tindentStyle = buffer[0];", "+\tOS.ATSUSetAttributes(indentStyle, tags.length, tags, sizes, values);", "+\tOS.DisposePtr(ptr);", "+\tOS.ATSUSetRunStyle(layout, indentStyle, 0, 1);", "+\tfor (int i = 0; i < hardBreaks.length-1; i++) {", "+\t\tint offset = hardBreaks[i];", "+\t\tOS.ATSUSetRunStyle(layout, indentStyle, offset, 1);", "+\t}", "+\tOS.ATSUGetLayoutControl(layout, OS.kATSULineWidthTag, 4, buffer, null);", "+\tint wrapWidth = buffer[0];", "+\tfor (int i=0, start=0; i<hardBreaks.length; i++) {", "+\t\tint hardBreak = hardBreaks[i];", "+\t\tbuffer[0] = 0;", "+\t\tif (wrapWidth != 0) OS.ATSUBatchBreakLines(layout, start, hardBreak - start, wrapWidth, buffer);", "+\t\tOS.ATSUSetSoftLineBreak(layout, hardBreak);", "+\t\tstart = hardBreak;", "+\t}", "+\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, 0, null, buffer);", "+\tint count = buffer[0];", "+\tbreaks = new int[count];", "+\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, count, breaks, null);", "-\tif (length != 0) {", "-\t\tATSTrapezoid trapezoid = new ATSTrapezoid();", "-\t\tfor (int i=0, start=0; i<lineCount; i++) {", "-\t\t\tif (ascent != -1) {", "-\t\t\t\tint ptr = OS.NewPtr(4);", "-\t\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "-\t\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\t\tint[] tags = new int[]{OS.kATSULineAscentTag};", "-\t\t\t\tint[] sizes = new int[]{4};", "-\t\t\t\tint[] values = new int[]{ptr};", "-\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "-\t\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineAscentTag, 4, buffer, null);", "-\t\t\t\tbuffer[0] = OS.Long2Fix(Math.max(ascent, OS.Fix2Long(buffer[0])));", "-\t\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "-\t\t\t\tOS.DisposePtr(ptr);", "-\t\t\t}", "-\t\t\tif (descent != -1) {", "-\t\t\t\tint ptr = OS.NewPtr(4);", "-\t\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "-\t\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\t\tint[] tags = new int[]{OS.kATSULineDescentTag};", "-\t\t\t\tint[] sizes = new int[]{4};", "-\t\t\t\tint[] values = new int[]{ptr};", "-\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "-\t\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineDescentTag, 4, buffer, null);", "-\t\t\t\tbuffer[0] = OS.Long2Fix(Math.max(descent, OS.Fix2Long(buffer[0])));", "-\t\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "-\t\t\t\tOS.DisposePtr(ptr);", "-\t\t\t}", "-\t\t\tint lineBreak = breaks[i];", "-\t\t\tint lineLength = lineBreak - start;", "-\t\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, start, lineLength, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "-\t\t\tlineX[i] = OS.Fix2Long(trapezoid.lowerLeft_x);", "-\t\t\tlineAscent[i] = -OS.Fix2Long(trapezoid.upperRight_y);", "-\t\t\tif (lineLength != 0) {", "-\t\t\t\tlineWidth[i] = OS.Fix2Long(trapezoid.upperRight_x) - OS.Fix2Long(trapezoid.upperLeft_x);", "-\t\t\t}", "-\t\t\tlineHeight[i] = OS.Fix2Long(trapezoid.lowerRight_y) + lineAscent[i] + spacing;", "-\t\t\tstart = lineBreak;", "+\tATSTrapezoid trapezoid = new ATSTrapezoid();", "+\tfor (int i=0, start=0; i<lineCount; i++) {", "+\t\tif (ascent != -1) {", "+\t\t\tptr = OS.NewPtr(4);", "+\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "+\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\ttags = new int[]{OS.kATSULineAscentTag};", "+\t\t\tsizes = new int[]{4};", "+\t\t\tvalues = new int[]{ptr};", "+\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineAscentTag, 4, buffer, null);", "+\t\t\tbuffer[0] = OS.Long2Fix(Math.max(ascent, OS.Fix2Long(buffer[0])));", "+\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\tOS.DisposePtr(ptr);", "+\t\tif (descent != -1) {", "+\t\t\tptr = OS.NewPtr(4);", "+\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "+\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\ttags = new int[]{OS.kATSULineDescentTag};", "+\t\t\tsizes = new int[]{4};", "+\t\t\tvalues = new int[]{ptr};", "+\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineDescentTag, 4, buffer, null);", "+\t\t\tbuffer[0] = OS.Long2Fix(Math.max(descent, OS.Fix2Long(buffer[0])));", "+\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\tOS.DisposePtr(ptr);", "+\t\t}", "+\t\tint lineBreak = breaks[i];", "+\t\tint lineLength = lineBreak - start;", "+\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, start, lineLength, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "+\t\tlineX[i] = OS.Fix2Long(trapezoid.lowerLeft_x);", "+\t\tlineAscent[i] = -OS.Fix2Long(trapezoid.upperRight_y);", "+\t\tif (lineLength != 0) {", "+\t\t\tlineWidth[i] = OS.Fix2Long(trapezoid.upperRight_x) - OS.Fix2Long(trapezoid.upperLeft_x);", "+\t\t}", "+\t\tlineHeight[i] = OS.Fix2Long(trapezoid.lowerRight_y) + lineAscent[i] + spacing;", "+\t\tstart = lineBreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eea0921ca40dc4495489cf217c6f1f5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "54aed4fbd5df18a764a007813a3707f09efb92d5", "commitAfterChange": "4508514c485affa97e5c71dcb79f80de914f7288", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "  public boolean setText (String html)", "signatureAfterChange": "  public boolean setText (String html)", "diff": ["+\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "+\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "+\tbyte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, \"UTF-8\", true);\t//$NON-NLS-1$", "+\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);", "+", "+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\tserviceManager.Release ();", "+", "+\tnsIIOService ioService = new nsIIOService (result[0]);", "+\tresult[0] = 0;", "-\t* If the GRE version is >= 1.8 then use frozen interface nsIWebBrowserStream.", "-\t* If this interface is not available then use the pre-1.8 approach of utilizing", "-\t* nsIDocShell instead.", "+\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "+\t* when the URI protocol for the nsInputStreamChannel", "+\t* is about:blank.  The fix is to specify the file protocol.", "+\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "+\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "+\trc = ioService.NewURI (aSpec, null, 0, result);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\tXPCOM.nsEmbedCString_delete (aSpec);", "+\tioService.Release ();", "+", "+\tnsIURI uri = new nsIURI (result[0]);", "+\tresult[0] = 0;", "+", "+\trc = webBrowser.QueryInterface (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor (result[0]);", "+\tresult[0] = 0;", "+", "+\t/*", "+\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "+\t* through a different thread.  The callback mechanism must attach ", "+\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "+\t* Close methods never get called.", "+\t*/", "+\tInputStream inputStream = new InputStream (data);", "+\tinputStream.AddRef ();", "+", "-\t\t/*", "-\t\t* Feature of nsIWebBrowserStream.  Setting the browser's content directly through", "-\t\t* its nsIWebBrowserStream does not cause a page change to occur, and therefore the", "-\t\t* events that typically signal a page change are not fired.  To make this behave", "-\t\t* as expected, navigate to about:blank first, and then set the html content once", "-\t\t* the page has loaded.", "-\t\t*/", "-", "-\t\t/*", "-\t\t* If the htmlBytes field is non-null then the about:blank page is already being", "-\t\t* loaded, so no Navigate is required.  Just set the html that is to be shown.", "-\t\t*/", "-\t\tboolean blankLoading = htmlBytes != null;", "-\t\thtmlBytes = data;", "-\t\tif (blankLoading) return true;", "-", "-\t\t/* navigate to about:blank */", "-\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\tint rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);", "+\t\trc = interfaceRequestor.GetInterface (nsIDocShell_1_8.NS_IDOCSHELL_IID, result);", "-\t\tnsIWebNavigation webNavigation = new nsIWebNavigation (result[0]);", "-\t\tresult[0] = 0;", "-\t    char[] uri = new char[ABOUT_BLANK.length () + 1];", "-\t    ABOUT_BLANK.getChars (0, ABOUT_BLANK.length (), uri, 0);", "-\t\trc = webNavigation.LoadURI (uri, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\twebNavigation.Release ();", "-\t} else {", "-\t\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "-\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "-\t\tbyte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, \"UTF-8\", true);\t//$NON-NLS-1$", "-\t\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);", "-", "-\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\tint rc = XPCOM.NS_GetServiceManager (result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\tresult[0] = 0;", "-\t\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\tserviceManager.Release ();", "-", "-\t\tnsIIOService ioService = new nsIIOService (result[0]);", "-\t\tresult[0] = 0;", "-\t\t/*", "-\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "-\t\t* when the URI protocol for the nsInputStreamChannel", "-\t\t* is about:blank.  The fix is to specify the file protocol.", "-\t\t*/", "-\t\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "-\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "-\t\trc = ioService.NewURI (aSpec, null, 0, result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\tXPCOM.nsEmbedCString_delete (aSpec);", "-\t\tioService.Release ();", "-\t\t", "-\t\tnsIURI uri = new nsIURI (result[0]);", "-\t\tresult[0] = 0;", "-", "-\t\trc = webBrowser.QueryInterface (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-", "-\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor (result[0]);", "-\t\tresult[0] = 0;", "-\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "-\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\tinterfaceRequestor.Release ();", "-", "-\t\tnsIDocShell docShell = new nsIDocShell (result[0]);", "-\t\tresult[0] = 0;", "-", "-\t\t/*", "-\t\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "-\t\t* through a different thread.  The callback mechanism must attach ", "-\t\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "-\t\t* Close methods never get called.", "-\t\t*/", "-\t\tInputStream inputStream = new InputStream (data);", "-\t\tinputStream.AddRef ();", "+\t\tnsIDocShell_1_8 docShell = new nsIDocShell_1_8 (result[0]);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tinputStream.Release ();", "-\t\turi.Release ();", "-\t\tXPCOM.nsEmbedCString_delete (aContentCharset);", "-\t\tXPCOM.nsEmbedCString_delete (aContentType);", "+\t} else {", "+\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIDocShell docShell = new nsIDocShell (result[0]);", "+\t\trc = docShell.LoadStream (inputStream.getAddress (), uri.getAddress (), aContentType,  aContentCharset, 0);", "+\t\tdocShell.Release ();", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\tresult[0] = 0;", "+\tinputStream.Release ();", "+\tinterfaceRequestor.Release ();", "+\turi.Release ();", "+\tXPCOM.nsEmbedCString_delete (aContentCharset);", "+\tXPCOM.nsEmbedCString_delete (aContentType);"]}], "num": 41350}
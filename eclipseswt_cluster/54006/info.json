{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb8259974c44588ba3c47b7e1a8046d9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8588da4c595f4b02c4761ced13264261", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "e73d120d5e37884ab50e6301a907bc6b240738dc", "commitAfterChange": "308fb225ca7c50dd338d7be0181861ac767a6584", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\t/*", "-\t* Feature in the Macintosh.  On OS 10.2, it is necessary", "-\t* to explicitly check in with the Process Manager and set", "-\t* the current process to be the front process in order for", "-\t* windows to come to the front by default.  The fix is call", "-\t* both GetCurrentProcess() and SetFrontProcess().", "-\t* ", "-\t* NOTE: It is not actually necessary to use the process", "-\t* serial number returned by GetCurrentProcess() in the", "-\t* call to SetFrontProcess() (ie. kCurrentProcess can be", "-\t* used) but both functions must be called in order for", "-\t* windows to come to the front.", "-\t*/", "-\tint [] psn = new int [2];", "-\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "-\t\tint /*long*/ ptr = OS.getenv (ascii (\"APP_NAME_\" + OS.getpid ()));", "-\t\tif (ptr  == 0 && APP_NAME != null) {", "-\t\t\tptr = NSString.stringWith(APP_NAME).UTF8String();\t", "-\t\t}", "-\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "-\t\tOS.TransformProcessType (psn, OS.kProcessTransformToForegroundApplication);", "-\t\tOS.SetFrontProcess (psn);", "-//\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "-//\t\tif (ptr != 0) {", "-//\t\t\tint image = readImageRef (ptr);", "-//\t\t\tif (image != 0) {", "-//\t\t\t\tdockImage = image;", "-//\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "-//\t\t\t}", "-//\t\t}", "-\t}", "-\t", "-\t", "-\tapplicationCallback2 = new Callback(this, \"applicationProc\", 2);", "-\tint /*long*/ proc2 = applicationCallback2.getAddress();", "-\tif (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tapplicationCallback3 = new Callback(this, \"applicationProc\", 3);", "-\tint /*long*/ proc3 = applicationCallback3.getAddress();", "-\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tapplicationCallback6 = new Callback(this, \"applicationProc\", 6);", "-\tint /*long*/ proc6 = applicationCallback6.getAddress();", "-\tif (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tString className = \"SWTApplication\";", "-\tint /*long*/ cls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);", "-\tOS.class_addMethod(cls, OS.sel_sendEvent_, proc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, \"@:i@@B\");", "-\tOS.class_addMethod(cls, OS.sel_isRunning, proc2, \"@:\");", "-\tOS.objc_registerClassPair(cls);", "-\tapplicationClass = OS.object_setClass(application.id, cls);", "-//\tapplication = new NSApplication(OS.objc_msgSend(cls, OS.sel_sharedApplication));", "+", "+\tif (!application.isRunning()) {", "+\t\t/*", "+\t\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t\t * to explicitly check in with the Process Manager and set", "+\t\t * the current process to be the front process in order for", "+\t\t * windows to come to the front by default.  The fix is call", "+\t\t * both GetCurrentProcess() and SetFrontProcess().", "+\t\t * ", "+\t\t * NOTE: It is not actually necessary to use the process", "+\t\t * serial number returned by GetCurrentProcess() in the", "+\t\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t\t * used) but both functions must be called in order for", "+\t\t * windows to come to the front.", "+\t\t */", "+\t\tint [] psn = new int [2];", "+\t\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\t\tint /*long*/ ptr = OS.getenv (ascii (\"APP_NAME_\" + OS.getpid ()));", "+\t\t\tif (ptr  == 0 && APP_NAME != null) {", "+\t\t\t\tptr = NSString.stringWith(APP_NAME).UTF8String();\t", "+\t\t\t}", "+\t\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "+\t\t\tOS.TransformProcessType (psn, OS.kProcessTransformToForegroundApplication);", "+\t\t\tOS.SetFrontProcess (psn);", "+\t\t\t//\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "+\t\t\t//\t\tif (ptr != 0) {", "+\t\t\t//\t\t\tint image = readImageRef (ptr);", "+\t\t\t//\t\t\tif (image != 0) {", "+\t\t\t//\t\t\t\tdockImage = image;", "+\t\t\t//\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "+\t\t\t//\t\t\t}", "+\t\t\t//\t\t}", "+\t\t}", "+", "+\t\tapplicationCallback2 = new Callback(this, \"applicationProc\", 2);", "+\t\tint /*long*/ proc2 = applicationCallback2.getAddress();", "+\t\tif (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tapplicationCallback3 = new Callback(this, \"applicationProc\", 3);", "+\t\tint /*long*/ proc3 = applicationCallback3.getAddress();", "+\t\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tapplicationCallback6 = new Callback(this, \"applicationProc\", 6);", "+\t\tint /*long*/ proc6 = applicationCallback6.getAddress();", "+\t\tif (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tString className = \"SWTApplication\";", "+\t\tint /*long*/ cls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);", "+\t\tOS.class_addMethod(cls, OS.sel_sendEvent_, proc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, \"@:i@@B\");", "+\t\tOS.class_addMethod(cls, OS.sel_isRunning, proc2, \"@:\");", "+\t\tOS.objc_registerClassPair(cls);", "+\t\tapplicationClass = OS.object_setClass(application.id, cls);", "+\t} else {", "+\t\tisEmbedded = true;", "+\t}", "+", "+\t//\tapplication = new NSApplication(OS.objc_msgSend(cls, OS.sel_sharedApplication));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "307ade224f4576b22aa2ffe6f5838d4f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "0ae25286a9580d6c7dba8a5e7b28884e3638c2ea", "commitAfterChange": "f3595d0facaebfce119c3387d7a1486e16aa7e4e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void drawSelected(GC gc )", "signatureAfterChange": " void drawSelected(GC gc )", "diff": ["-\t", "-\t// Draw selection border across all tabs", "-\tint xx = parent.borderLeft;", "-\tint yy = parent.onBottom ? size.y - parent.borderBottom - parent.tabHeight - CTabFolder.HIGHLIGHT_HEADER : parent.borderTop + parent.tabHeight + 1;", "-\tint ww = size.x - parent.borderLeft - parent.borderRight;", "-\tint hh = CTabFolder.HIGHLIGHT_HEADER - 1;", "-\tint[] shape = new int[] {xx,yy, xx+ww,yy, xx+ww,yy+hh, xx,yy+hh};", "-\tparent.drawBackground(gc, shape, true);", "-", "-\t// if selected tab scrolled out of view or partially out of view", "-\t// just draw bottom line", "-\tif (!isShowing()){", "-\t\tint x1 = Math.max(0, parent.borderLeft - 1);", "-\t\tint y1 = (parent.onBottom) ? y - 1 : y + height;", "-\t\tint x2 = size.x - parent.borderRight;", "-\t\tgc.setForeground(CTabFolder.borderColor);", "-\t\tgc.drawLine(x1, y1, x2, y1);", "-\t\treturn;", "-\t}", "-\t\t", "-\t// draw selected tab background and outline", "-\tshape = null;", "-\tif (this.parent.onBottom) {", "-\t\tint[] left = parent.simple ? new int[] {0, 0} :CTabFolder.BOTTOM_LEFT_CORNER;", "-\t\tint[] right = parent.simple ? new int[] {0, 0} : parent.curve;", "-\t\tshape = new int[left.length+right.length+8];", "-\t\tint index = 0;", "-\t\tshape[index++] = x; // first point repeated here because below we reuse shape to draw outline", "-\t\tshape[index++] = y - 1;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y - 1;", "-\t\tfor (int i = 0; i < left.length/2; i++) {", "-\t\t\tshape[index++] = x + left[2*i];", "-\t\t\tshape[index++] = y + height + left[2*i+1] - 1;", "-\t\t}", "-\t\tfor (int i = 0; i < right.length/2; i++) {", "-\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "-\t\t\tshape[index++] = parent.simple ? y + height + right[2*i+1] - 1 : y + right[2*i+1] - 2;", "-\t\t}", "-\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tshape[index++] = y - 1;", "-\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tshape[index++] = y - 1;", "+\tif (parent.single) {", "+\t\tif (!isShowing()) return;", "-\t\tint[] left = parent.simple ? new int[] {0, 0} : CTabFolder.TOP_LEFT_CORNER;", "-\t\tint[] right = parent.simple ? new int[] {0, 0} : parent.curve;", "-\t\tshape = new int[left.length+right.length+8];", "-\t\tint index = 0;", "-\t\tshape[index++] = x; // first point repeated here because below we reuse shape to draw outline", "-\t\tshape[index++] = y + height + 1;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y + height + 1;", "-\t\tfor (int i = 0; i < left.length/2; i++) {", "-\t\t\tshape[index++] = x + left[2*i];", "-\t\t\tshape[index++] = y + left[2*i+1];", "+\t\t// Draw selection border across all tabs", "+\t\tint xx = parent.borderLeft;", "+\t\tint yy = parent.onBottom ? size.y - parent.borderBottom - parent.tabHeight - CTabFolder.HIGHLIGHT_HEADER : parent.borderTop + parent.tabHeight + 1;", "+\t\tint ww = size.x - parent.borderLeft - parent.borderRight;", "+\t\tint hh = CTabFolder.HIGHLIGHT_HEADER - 1;", "+\t\tint[] shape = new int[] {xx,yy, xx+ww,yy, xx+ww,yy+hh, xx,yy+hh};", "+\t\tparent.drawBackground(gc, shape, true);", "+\t", "+\t\t// if selected tab scrolled out of view or partially out of view", "+\t\t// just draw bottom line", "+\t\tif (!isShowing()){", "+\t\t\tint x1 = Math.max(0, parent.borderLeft - 1);", "+\t\t\tint y1 = (parent.onBottom) ? y - 1 : y + height;", "+\t\t\tint x2 = size.x - parent.borderRight;", "+\t\t\tgc.setForeground(CTabFolder.borderColor);", "+\t\t\tgc.drawLine(x1, y1, x2, y1);", "+\t\t\treturn;", "-\t\tfor (int i = 0; i < right.length/2; i++) {", "-\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "-\t\t\tshape[index++] = y + right[2*i+1];", "+\t\t\t", "+\t\t// draw selected tab background and outline", "+\t\tshape = null;", "+\t\tif (this.parent.onBottom) {", "+\t\t\tint[] left = parent.simple ? new int[] {0, 0} :CTabFolder.BOTTOM_LEFT_CORNER;", "+\t\t\tint[] right = parent.simple ? new int[] {0, 0} : parent.curve;", "+\t\t\tshape = new int[left.length+right.length+8];", "+\t\t\tint index = 0;", "+\t\t\tshape[index++] = x; // first point repeated here because below we reuse shape to draw outline", "+\t\t\tshape[index++] = y - 1;", "+\t\t\tshape[index++] = x;", "+\t\t\tshape[index++] = y - 1;", "+\t\t\tfor (int i = 0; i < left.length/2; i++) {", "+\t\t\t\tshape[index++] = x + left[2*i];", "+\t\t\t\tshape[index++] = y + height + left[2*i+1] - 1;", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < right.length/2; i++) {", "+\t\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "+\t\t\t\tshape[index++] = parent.simple ? y + height + right[2*i+1] - 1 : y + right[2*i+1] - 2;", "+\t\t\t}", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = y - 1;", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = y - 1;", "+\t\t} else {", "+\t\t\tint[] left = parent.simple ? new int[] {0, 0} : CTabFolder.TOP_LEFT_CORNER;", "+\t\t\tint[] right = parent.simple ? new int[] {0, 0} : parent.curve;", "+\t\t\tshape = new int[left.length+right.length+8];", "+\t\t\tint index = 0;", "+\t\t\tshape[index++] = x; // first point repeated here because below we reuse shape to draw outline", "+\t\t\tshape[index++] = y + height + 1;", "+\t\t\tshape[index++] = x;", "+\t\t\tshape[index++] = y + height + 1;", "+\t\t\tfor (int i = 0; i < left.length/2; i++) {", "+\t\t\t\tshape[index++] = x + left[2*i];", "+\t\t\t\tshape[index++] = y + left[2*i+1];", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < right.length/2; i++) {", "+\t\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "+\t\t\t\tshape[index++] = y + right[2*i+1];", "+\t\t\t}", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = y + height + 1;", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = y + height + 1;", "-\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tshape[index++] = y + height + 1;", "-\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tshape[index++] = y + height + 1;", "+\t\tparent.drawBackground(gc, shape, true);", "+\t\t", "+\t\t// draw outline", "+\t\tshape[0] = Math.max(0, parent.borderLeft - 1);", "+\t\tshape[shape.length - 2] = size.x - parent.borderRight + 1;", "+\t\tfor (int i = 0; i < shape.length/2; i++) {", "+\t\t\tif (shape[2*i + 1] == y + height + 1) shape[2*i + 1] -= 1;", "+\t\t}", "+\t\tRGB inside = parent.selectionBackground.getRGB();", "+\t\tif (parent.selectionBgImage != null || ", "+\t\t    (parent.selectionGradientColors != null && parent.selectionGradientColors.length > 1)) {", "+\t\t    inside = null;", "+\t\t}", "+\t\tRGB outside = parent.getBackground().getRGB();\t\t", "+\t\tif (parent.bgImage != null || ", "+\t\t    (parent.gradientColors != null && parent.gradientColors.length > 1)) {", "+\t\t    outside = null;", "+\t\t}", "+\t\tparent.antialias(shape, CTabFolder.borderColor.getRGB(), inside, outside, gc);", "+\t\tgc.setForeground(CTabFolder.borderColor);", "+\t\tgc.drawPolyline(shape);", "-\tparent.drawBackground(gc, shape, true);", "-", "+\t", "-\t", "-\t// draw outline", "-\tshape[0] = Math.max(0, parent.borderLeft - 1);", "-\tshape[shape.length - 2] = size.x - parent.borderRight + 1;", "-\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\tif (shape[2*i + 1] == y + height + 1) shape[2*i + 1] -= 1;", "-\t}", "-\tRGB inside = parent.selectionBackground.getRGB();", "-\tif (parent.selectionBgImage != null || ", "-\t    (parent.selectionGradientColors != null && parent.selectionGradientColors.length > 1)) {", "-\t    inside = null;", "-\t}", "-\tRGB outside = parent.getBackground().getRGB();\t\t", "-\tif (parent.bgImage != null || ", "-\t    (parent.gradientColors != null && parent.gradientColors.length > 1)) {", "-\t    outside = null;", "-\t}", "-\tparent.antialias(shape, CTabFolder.borderColor.getRGB(), inside, outside, gc);", "-\tgc.setForeground(CTabFolder.borderColor);", "-\tgc.drawPolyline(shape);"]}], "num": 54006}
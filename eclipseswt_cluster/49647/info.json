{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff741bb18a6ff38c508b192e19157cd4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "272baad352258e24e5ef657295d048f3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "cbe1e7d57e3a86c34a1954206c591ae008390b06", "commitAfterChange": "bd2535620722a56cc93e8593aa26ee420bb505bf", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  int kEventWindowDeactivated (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventWindowDeactivated (int nextHandler, int theEvent, int userData)", "diff": ["-\t/*", "-\t* Bug in the Macintosh.  The default handler of kEventWindowDeactivated", "-\t* segment faults when DisposeWindow() is called in previous handlers.", "-\t* The fix is to use RetainWindow() so that the window does not get", "-\t* disposed until the handler returns.", "-\t*/", "+\t//TEMPORARY CODE - should be send, but causes a GP", "-\tOS.RetainWindow (shellHandle);", "-\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "-\tsendEvent (SWT.Deactivate);", "-\tif (!isDisposed ()) {", "-\t\tsaveFocus ();", "-\t\tif (savedFocus != null) {", "-\t\t\t/*", "-\t\t\t* Bug in the Macintosh.  When ClearKeyboardFocus() is called,", "-\t\t\t* the control that has focus gets two kEventControlSetFocus", "-\t\t\t* events indicating that focus was lost.  The fix is to ignore", "-\t\t\t* both of these and send the focus lost event explicitly.", "-\t\t\t*/", "-\t\t\tdisplay.ignoreFocus = true;", "-\t\t\tOS.ClearKeyboardFocus (shellHandle);", "-\t\t\tdisplay.ignoreFocus = false;", "-\t\t\tif (!savedFocus.isDisposed ()) {", "-\t\t\t\tsavedFocus.sendFocusEvent (SWT.FocusOut);", "-\t\t\t}", "-\t\t}", "+\tpostEvent (SWT.Deactivate);", "+\tif (isDisposed ()) return result;", "+\tsaveFocus ();", "+\tif (savedFocus != null) {", "+\t\t/*", "+\t\t* Bug in the Macintosh.  When ClearKeyboardFocus() is called,", "+\t\t* the control that has focus gets two kEventControlSetFocus", "+\t\t* events indicating that focus was lost.  The fix is to ignore", "+\t\t* both of these and send the focus lost event explicitly.", "+\t\t*/", "+\t\tdisplay.ignoreFocus = true;", "+\t\tOS.ClearKeyboardFocus (shellHandle);", "+\t\tdisplay.ignoreFocus = false;", "+\t\t//TEMPORARY CODE - should be send, but causes a GP", "+\t\tif (!savedFocus.isDisposed ()) savedFocus.sendFocusEvent (SWT.FocusOut, true);", "-\tOS.ReleaseWindow (shellHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f268ec843b3610e37e56acb961f272b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "35b3e5ac684cde54119d58ece02c16504e7a077c", "commitAfterChange": "43cccb7c09eeeeb743e40d795384af951511f59c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventRawKey (int nextHandler, int theEvent, int userData)", "diff": ["-int kEventRawKeyDown (int nextHandler, int theEvent, int userData) {", "-\tint result = super.kEventRawKeyDown (nextHandler, theEvent, userData);", "+int kEventRawKey (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventRawKey (nextHandler, theEvent, userData);", "+\t\t\t/*", "+\t\t\t* Feature in the Macintosh.  Tab and Return characters are inserted into a", "+\t\t\t* single line TXN Object.  While this may be correct platform behavior, it is", "+\t\t\t* unexpected.  The fix is to avoid calling the default handler. ", "+\t\t\t*/", "-\t\t\t\t/*", "-\t\t\t\t* Bug in the Macintosh.  When the default handler calls TXNKeyDown()", "-\t\t\t\t* for a single line TXN Object, it does not check for the return key", "-\t\t\t\t* or the default button.  The result is that a garbage character (the", "-\t\t\t\t* CR) is entered into the TXN Object.  The fix is to temporarily take", "-\t\t\t\t* focus away from the TXN Object, call the default handler to process", "-\t\t\t\t* the return key and reset the focus.", "-\t\t\t\t*/", "-\t\t\t\tOS.TXNFocus (txnObject, false);", "-\t\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\t\t\tOS.TXNFocus (txnObject, true);", "-\t\t\t\tbreak;", "+\t\t\t\treturn OS.noErr;", "-\t\t\t\t/*", "-\t\t\t\t* Feature in the Macintosh.  Tab characters are inserted into a single", "-\t\t\t\t* line TXN Object.  While this may be correct platform behavior, it is", "-\t\t\t\t* unexpected.  The fix is to avoid calling the default handler. ", "-\t\t\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "204d5d243ad5b04bfa15d6ecde9816d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "signatureAfterChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "diff": ["-\t\tif (OS.HIVIEW) {", "-\t\t\tCGPoint pt = new CGPoint ();", "-\t\t\tint[] contentView = new int[1];", "-\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "-\t\t\tOS.HIViewConvertPoint(pt, OS.HIViewGetSuperview(data.control), contentView[0]);", "-\t\t\tconvertX = rect.left + (int) pt.x;", "-\t\t\tconvertY = rect.top + (int) pt.y;", "-\t\t\trect.left += (int) pt.x;", "-\t\t\trect.top += (int) pt.y;", "-\t\t\trect.right += (int) pt.x;", "-\t\t\trect.bottom += (int) pt.y;", "-\t\t}", "+\t\tCGPoint pt = new CGPoint ();", "+\t\tint[] contentView = new int[1];", "+\t\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "+\t\tOS.HIViewConvertPoint(pt, OS.HIViewGetSuperview(data.control), contentView[0]);", "+\t\tconvertX = rect.left + (int) pt.x;", "+\t\tconvertY = rect.top + (int) pt.y;", "+\t\trect.left += (int) pt.x;", "+\t\trect.top += (int) pt.y;", "+\t\trect.right += (int) pt.x;", "+\t\trect.bottom += (int) pt.y;", "-\t\t\tif (OS.HIVIEW) {", "-\t\t\t\tOS.OffsetRgn(invalRgn, (short)-convertX, (short)-convertY);", "-\t\t\t\tOS.HIViewSetNeedsDisplayInRegion(data.control, invalRgn, true);", "-\t\t\t} else {", "-\t\t\t\tOS.InvalWindowRgn(window, invalRgn);", "-\t\t\t}", "+\t\t\tOS.OffsetRgn(invalRgn, (short)-convertX, (short)-convertY);", "+\t\t\tOS.HIViewSetNeedsDisplayInRegion(data.control, invalRgn, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "041a92b06ca01684291736869326c936", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tif (OS.HIVIEW) attributes |= OS.kWindowCompositingAttribute;", "+\tattributes |= OS.kWindowCompositingAttribute;", "-\t\tif (OS.HIVIEW) {", "-\t\t\tOS.HIViewFindByID (shellHandle, OS.kHIViewWindowContentID (), theRoot);", "-\t\t\t/*", "-\t\t\t* Bug in the Macintosh.  When the window class is kMovableModalWindowClass or", "-\t\t\t* kModalWindowClass, HIViewFindByID() fails to find the control identified by", "-\t\t\t* kHIViewWindowContentID.  The fix is to call GetRootControl() if the call", "-\t\t\t* failed.", "-\t\t\t*/", "-\t\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);\t\t", "-\t\t} else {", "-\t\t\tOS.CreateRootControl (shellHandle, theRoot);", "-\t\t\tOS.GetRootControl (shellHandle, theRoot);", "-\t\t}", "+\t\tOS.HIViewFindByID (shellHandle, OS.kHIViewWindowContentID (), theRoot);", "+\t\t/*", "+\t\t* Bug in the Macintosh.  When the window class is kMovableModalWindowClass or", "+\t\t* kModalWindowClass, HIViewFindByID() fails to find the control identified by", "+\t\t* kHIViewWindowContentID.  The fix is to call GetRootControl() if the call", "+\t\t* failed.", "+\t\t*/", "+\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);\t\t"]}], "num": 49647}
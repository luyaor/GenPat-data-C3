{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "718f0979ccb7b481519cd99b137c6599", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46b56fbd9078cd37ad0b2fa0897f45cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "b51df8c5d2a1f1ef29aaa06e71ea019f83afe7b0", "commitAfterChange": "ca9274a88ad2bbd34f29d272a5b3805367bb073d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r \r LRESULT wmScroll (int msg, int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT wmScroll (ScrollBar bar, int msg, int wParam, int lParam)", "diff": ["-LRESULT wmScroll (int msg, int wParam, int lParam) {\r", "-\tint type = OS.SB_HORZ;\r", "-\tScrollBar bar = horizontalBar;\r", "-\tif (msg == OS.WM_VSCROLL) {\r", "-\t\ttype = OS.SB_VERT;\r", "-\t\tbar = verticalBar;\r", "+LRESULT wmScroll (ScrollBar bar, int msg, int wParam, int lParam) {\r", "+\tLRESULT result = null;\r", "+\tif ((state & CANVAS) != 0) {\r", "+\t\tint type = msg == OS.WM_HSCROLL ? OS.SB_HORZ : OS.SB_VERT;\r", "+\t\tSCROLLINFO info = new SCROLLINFO ();\r", "+\t\tinfo.cbSize = SCROLLINFO.sizeof;\r", "+\t\tinfo.fMask = OS.SIF_TRACKPOS | OS.SIF_POS | OS.SIF_RANGE;\r", "+\t\tOS.GetScrollInfo (handle, type, info);\r", "+\t\tinfo.fMask = OS.SIF_POS;\r", "+\t\tint code = wParam & 0xFFFF;\r", "+\t\tswitch (code) {\r", "+\t\t\tcase OS.SB_ENDSCROLL:  return null;\r", "+\t\t\tcase OS.SB_THUMBTRACK:\r", "+\t\t\tcase OS.SB_THUMBPOSITION:\r", "+\t\t\t\t/* \r", "+\t\t\t\t* Note: On WinCE, the value in SB_THUMBPOSITION is relative to nMin.\r", "+\t\t\t\t* Same for SB_THUMBPOSITION 'except' for the very first thumb track\r", "+\t\t\t\t* message which has the actual value of nMin. This is a problem when\r", "+\t\t\t\t* nMin is not zero.\r", "+\t\t\t\t*/\r", "+\t\t\t\tinfo.nPos = info.nTrackPos;\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase OS.SB_TOP:\r", "+\t\t\t\tinfo.nPos = info.nMin;\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase OS.SB_BOTTOM:\r", "+\t\t\t\tinfo.nPos = info.nMax;\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase OS.SB_LINEDOWN:\r", "+\t\t\t\tinfo.nPos += bar.getIncrement ();\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase OS.SB_LINEUP:\r", "+\t\t\t\tint increment = bar.getIncrement ();\r", "+\t\t\t\tinfo.nPos = Math.max (info.nMin, info.nPos - increment);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase OS.SB_PAGEDOWN:\r", "+\t\t\t\tinfo.nPos += bar.getPageIncrement ();\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase OS.SB_PAGEUP:\r", "+\t\t\t\tint pageIncrement = bar.getPageIncrement ();\r", "+\t\t\t\tinfo.nPos = Math.max (info.nMin, info.nPos - pageIncrement);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t\tOS.SetScrollInfo (handle, type, info, true);\r", "+\t} else {\r", "+\t\tint code = callWindowProc (msg, wParam, lParam);\r", "+\t\tresult = code == 0 ? LRESULT.ZERO : new LRESULT (code);\r", "-\tif (bar == null) return null;\r", "-\tSCROLLINFO info = new SCROLLINFO ();\r", "-\tinfo.cbSize = SCROLLINFO.sizeof;\r", "-\tinfo.fMask = OS.SIF_TRACKPOS | OS.SIF_POS | OS.SIF_RANGE;\r", "-\tOS.GetScrollInfo (handle, type, info);\r", "-\tinfo.fMask = OS.SIF_POS;\r", "-\tint code = wParam & 0xFFFF;\r", "-\tswitch (code) {\r", "-\t\tcase OS.SB_ENDSCROLL:  return null;\r", "-\t\tcase OS.SB_THUMBTRACK:\r", "-\t\tcase OS.SB_THUMBPOSITION:\r", "-\t\t\t/* \r", "-\t\t\t* Note: On WinCE, the value in SB_THUMBPOSITION is relative to nMin.\r", "-\t\t\t* Same for SB_THUMBPOSITION 'except' for the very first thumb track\r", "-\t\t\t* message which has the actual value of nMin. This is a problem when\r", "-\t\t\t* nMin is not zero.\r", "-\t\t\t*/\r", "-\t\t\tinfo.nPos = info.nTrackPos;\r", "-\t\t\tbreak;\r", "-\t\tcase OS.SB_TOP:\r", "-\t\t\tinfo.nPos = info.nMin;\r", "-\t\t\tbreak;\r", "-\t\tcase OS.SB_BOTTOM:\r", "-\t\t\tinfo.nPos = info.nMax;\r", "-\t\t\tbreak;\r", "-\t\tcase OS.SB_LINEDOWN:\r", "-\t\t\tinfo.nPos += bar.getIncrement ();\r", "-\t\t\tbreak;\r", "-\t\tcase OS.SB_LINEUP:\r", "-\t\t\tint increment = bar.getIncrement ();\r", "-\t\t\tinfo.nPos = Math.max (info.nMin, info.nPos - increment);\r", "-\t\t\tbreak;\r", "-\t\tcase OS.SB_PAGEDOWN:\r", "-\t\t\tinfo.nPos += bar.getPageIncrement ();\r", "-\t\t\tbreak;\r", "-\t\tcase OS.SB_PAGEUP:\r", "-\t\t\tint pageIncrement = bar.getPageIncrement ();\r", "-\t\t\tinfo.nPos = Math.max (info.nMin, info.nPos - pageIncrement);\r", "-\t\t\tbreak;\r", "-\t}\r", "-\tOS.SetScrollInfo (handle, type, info, true);\r", "-\treturn null;\r", "+\tbar.wmScrollChild (wParam, lParam);\r", "+\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f902ca460d9be3d6bae3c37f9a11e2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "baf03a98205c806baa2c108817acc3ad55036318", "commitAfterChange": "9022b0c87576382c8b2fca8ae1a8f53567b5217b", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 77, "signatureBeforeChange": "  boolean sendGestureEvent (NSEvent nsEvent, int detail, boolean send)", "signatureAfterChange": "  boolean gestureEvent(int id, int eventPtr, int detail)", "diff": ["+boolean gestureEvent(int /*long*/ id, int /*long*/ eventPtr, int detail) {", "+\t// For cross-platform compatibility, touch events and gestures are mutually exclusive.", "+\t// Don't send a gesture if touch events are enabled for this control.", "+\tif (touchEnabled) return true;", "+\tif (!hooks(SWT.Gesture) && !filters(SWT.Gesture)) return true;", "+\tNSEvent nsEvent = new NSEvent(eventPtr);", "+\tEvent event = new Event();", "+\tNSPoint windowPoint;", "+\tNSView view = eventView ();", "+\twindowPoint = nsEvent.locationInWindow();", "+\tNSPoint point = view.convertPoint_fromView_(windowPoint, null);", "+\tif (!view.isFlipped ()) {", "+\t\tpoint.y = view.bounds().height - point.y;", "+\t}", "+\tevent.x = (int) point.x;", "+\tevent.y = (int) point.y;", "+\tsetInputState (event, nsEvent, SWT.Gesture);", "+\tevent.detail = detail;", "+", "+\tif (detail == SWT.GESTURE_BEGIN) {", "+\t\tdisplay.rotation = 0.0;", "+\t\tdisplay.magnification = 1.0;", "+\t\tdisplay.gestureActive = true;", "+\t} else {", "+\t\tdisplay.gestureActive = false;", "+\t}", "+\t", "+\tswitch (detail) {\t", "+\tcase SWT.GESTURE_SWIPE:", "+\t\tevent.xDirection = (int) -nsEvent.deltaX();", "+\t\tevent.yDirection = (int) -nsEvent.deltaY();", "+\t\tbreak;", "+\tcase SWT.GESTURE_ROTATE: {\t", "+\t\tdisplay.rotation += nsEvent.rotation();", "+\t\tevent.rotation = display.rotation;", "+\t\tbreak;", "+\t}", "+\tcase SWT.GESTURE_MAGNIFY:", "+\t\tdisplay.magnification += nsEvent.magnification();", "+\t\tevent.magnification = display.magnification;", "+\t\tbreak;", "+\tcase SWT.GESTURE_PAN:", "+\t\t// Panning increment is expressed in terms of the direction of movement,", "+\t\t// not in terms of scrolling increment.", "+\t\tif (display.gestureActive) {", "+\t\t\tevent.xDirection = (int) -nsEvent.deltaX();", "+\t\t\tevent.yDirection = (int) -nsEvent.deltaY();", "+\t\t\tif (event.xDirection == 0 && event.yDirection == 0) return true;", "+\t\t}", "+\t\tbreak;", "+\t}", "+", "+\tsendEvent (SWT.Gesture, event);", "+\treturn event.doit;", "-", "-boolean sendGestureEvent (NSEvent nsEvent, int detail, boolean send) {", "-\tEvent event = new Event ();", "-\tNSPoint windowPoint;", "-\tNSView view = eventView ();", "-\twindowPoint = nsEvent.locationInWindow();", "-\tNSPoint point = view.convertPoint_fromView_(windowPoint, null);", "-\tif (!view.isFlipped ()) {", "-\t\tpoint.y = view.bounds().height - point.y;", "-\t}", "-\tevent.x = (int) point.x;", "-\tevent.y = (int) point.y;", "-\tsetInputState (event, nsEvent, SWT.Gesture);", "-\tevent.detail = detail;", "-", "-\tif (detail == SWT.GESTURE_BEGIN) {", "-\t\tdisplay.gestureStarted = true;", "-\t\tdisplay.rotation = 0.0;", "-\t\tdisplay.magnification = 1.0;", "-\t} else if (detail == SWT.GESTURE_END) {", "-\t\tdisplay.gestureStarted = false;", "-\t}", "-\t", "-\tswitch (detail) {\t", "-\tcase SWT.GESTURE_SWIPE:", "-\t\tevent.xDirection = (int) -nsEvent.deltaX();", "-\t\tevent.yDirection = (int) -nsEvent.deltaY();", "-\t\tbreak;", "-\tcase SWT.GESTURE_ROTATE: {\t", "-\t\tdisplay.rotation += nsEvent.rotation();", "-\t\tevent.rotation = display.rotation;", "-\t\tbreak;", "-\t}", "-\tcase SWT.GESTURE_MAGNIFY:", "-\t\tdisplay.magnification += nsEvent.magnification();", "-\t\tevent.magnification = display.magnification;", "-\t\tbreak;", "-\tcase SWT.GESTURE_PAN:", "-\t\t// Panning increment is expressed in terms of the direction of movement,", "-\t\t// not in terms of scrolling increment.", "-\t\tevent.xDirection = (int) -nsEvent.deltaX();", "-\t\tevent.yDirection = (int) -nsEvent.deltaY();", "-\t\tbreak;", "-\t}", "-", "-\tevent.doit = true;", "-\tsendEvent (SWT.Gesture, event);", "-\tif (isDisposed ()) return false;", "-\treturn event.doit;"]}], "num": 56290}
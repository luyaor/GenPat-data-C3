{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b12ecc499d4a0361feb0595fd6519b2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d1a112981fc0c7c139ec662a2700e58", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "7b722c39e9b86fa678f49903da3064b0630bbe9d", "commitAfterChange": "80413969c76bb81e4c9325125446456624eddbae", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 8, "signatureBeforeChange": "  int regionToRects(int message, int rgn, int r, int newRgn)", "signatureAfterChange": "  int convertRgn(int message, int rgn, int r, int newRgn)", "diff": ["+", "+int convertRgn(int message, int rgn, int r, int newRgn) {", "+\tif (message == OS.kQDRegionToRectsMsgParse) {", "+\t\tRect rect = new Rect();", "+\t\tOS.memcpy(rect, r, Rect.sizeof);", "+\t\tCGPoint point = new CGPoint(); ", "+\t\tint polyRgn = OS.NewRgn();", "+\t\tOS.OpenRgn();", "+\t\tpoint.x = rect.left;", "+\t\tpoint.y = rect.top;", "+\t\tfloat[] transform = data.clippingTransform;", "+\t\tOS.CGPointApplyAffineTransform(point, transform, point);", "+\t\tshort startX, startY;", "+\t\tOS.MoveTo(startX = (short)point.x, startY = (short)point.y);", "+\t\tpoint.x = rect.right;", "+\t\tpoint.y = rect.top;", "+\t\tOS.CGPointApplyAffineTransform(point, transform, point);", "+\t\tOS.LineTo((short)Math.round(point.x), (short)point.y);", "+\t\tpoint.x = rect.right;", "+\t\tpoint.y = rect.bottom;", "+\t\tOS.CGPointApplyAffineTransform(point, transform, point);", "+\t\tOS.LineTo((short)Math.round(point.x), (short)Math.round(point.y));", "+\t\tpoint.x = rect.left;", "+\t\tpoint.y = rect.bottom;", "+\t\tOS.CGPointApplyAffineTransform(point, transform, point);", "+\t\tOS.LineTo((short)point.x, (short)Math.round(point.y));", "+\t\tOS.LineTo(startX, startY);", "+\t\tOS.CloseRgn(polyRgn);", "+\t\tOS.UnionRgn(newRgn, polyRgn, newRgn);", "+\t\tOS.DisposeRgn(polyRgn);", "+\t}", "+\treturn 0;", "+}", "-int regionToRects(int message, int rgn, int r, int newRgn) {", "-\tif (message == OS.kQDRegionToRectsMsgParse) {", "-\t\tRect rect = new Rect();", "-\t\tOS.memcpy(rect, r, Rect.sizeof);", "-\t\tCGPoint point = new CGPoint(); ", "-\t\tint polyRgn = OS.NewRgn();", "-\t\tOS.OpenRgn();", "-\t\tpoint.x = rect.left;", "-\t\tpoint.y = rect.top;", "-\t\tOS.CGPointApplyAffineTransform(point, data.inverseTransform, point);", "-\t\tOS.MoveTo((short)Math.round(point.x), (short)Math.round(point.y));", "-\t\tpoint.x = rect.right;", "-\t\tpoint.y = rect.top;", "-\t\tOS.CGPointApplyAffineTransform(point, data.inverseTransform, point);", "-\t\tOS.LineTo((short)Math.round(point.x), (short)Math.round(point.y));", "-\t\tpoint.x = rect.right;", "-\t\tpoint.y = rect.bottom;", "-\t\tOS.CGPointApplyAffineTransform(point, data.inverseTransform, point);", "-\t\tOS.LineTo((short)Math.round(point.x), (short)Math.round(point.y));", "-\t\tpoint.x = rect.left;", "-\t\tpoint.y = rect.bottom;", "-\t\tOS.CGPointApplyAffineTransform(point, data.inverseTransform, point);", "-\t\tOS.LineTo((short)Math.round(point.x), (short)Math.round(point.y));", "-\t\tOS.CloseRgn(polyRgn);", "-\t\tOS.UnionRgn(newRgn, polyRgn, newRgn);", "-\t\tOS.DisposeRgn(polyRgn);", "-\t}", "-\treturn 0;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c1dd6c03d901aa5d91399ac5c5e8da1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "00ba99318656528b8edd4763d72b06af3b7807bd", "commitAfterChange": "c6273c69ad2991b32ae8bcbc923c15f8154ad91c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void computeRuns ()", "signatureAfterChange": "  void computeRuns ()", "diff": ["-\t\tint /*long*/ iter = OS.pango_layout_get_iter(layout);", "-\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint oldPos = 0, count = 0;", "-\t\tdo {", "-\t\t\tint bytePos = OS.pango_layout_iter_get_index(iter);", "+\t\tint oldPos = 0, lineIndex = 0;", "+\t\tPangoLayoutLine line = new PangoLayoutLine();", "+\t\twhile (lineIndex < lineCount) {", "+\t\t\tint /*long*/ linePtr = OS.pango_layout_get_line(layout, lineIndex);", "+\t\t\tOS.memmove(line, linePtr, PangoLayoutLine.sizeof);", "+\t\t\tint bytePos = line.start_index;", "-\t\t\tint offset = count * 6;", "+\t\t\tint offset = lineIndex * 6;", "-\t\t\tchars[pos + count * 2] = ZWS;", "-\t\t\tchars[pos + count * 2 + 1] = ZWNBS;", "-\t\t\tsegmentsText.getChars(oldPos, pos, chars,  oldPos + count * 2);", "+\t\t\tchars[pos + lineIndex * 2] = ZWS;", "+\t\t\tchars[pos + lineIndex * 2 + 1] = ZWNBS;", "+\t\t\tsegmentsText.getChars(oldPos, pos, chars,  oldPos + lineIndex * 2);", "-\t\t\tcount++;", "-\t\t} while (OS.pango_layout_iter_next_line(iter));", "-\t\tOS.pango_layout_iter_free (iter);", "-\t\tsegmentsText.getChars(oldPos, segementsLength, chars,  oldPos + count * 2);", "+\t\t\tlineIndex++;", "+\t\t}", "+\t\tsegmentsText.getChars(oldPos, segementsLength, chars,  oldPos + lineIndex * 2);"]}], "num": 14795}
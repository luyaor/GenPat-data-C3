{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79f5f8435bfe375be4cb45eae3442e1d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "598ab351c209a07e496409b29320149c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "527e849a2526f3d8802def278cb1e6f6d555176e", "commitAfterChange": "732b93a3746a83c09a87316a75d0a62edeb31a1a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r void insertItemIntoRow(CoolItem item, Vector row, int x_root, int rowY)", "signatureAfterChange": "\r void insertItemIntoRow(CoolItem item, int rowIndex, int x_root)", "diff": ["-void insertItemIntoRow(CoolItem item, Vector row, int x_root, int rowY) {\r", "+void insertItemIntoRow(CoolItem item, int rowIndex, int x_root) {\r", "-\tint height = item.getSize().y;\r", "-\tif (row.size() == 0) {\r", "-\t\titem.setBounds(0, rowY, barWidth, height);\t\t\r", "-\t\trow.addElement(item);\r", "-\t\treturn;\r", "-\t}\r", "-\t\r", "+\tint rowY = items[rowIndex][0].getBounds().y;\r", "-\tfor (index = 0; index < row.size(); index++) {\r", "-\t\tCoolItem next = (CoolItem) row.elementAt(index);\r", "-\t\tif (x < next.getBounds().x) break;\r", "+\tfor (index = 0; index < items[rowIndex].length; index++) {\r", "+\t\tif (x < items[rowIndex][index].getBounds().x) break;\r", "-\trow.insertElementAt(item, index);\r", "+\tint oldLength = items[rowIndex].length;\r", "+\tCoolItem[] newRow = new CoolItem[oldLength + 1];\r", "+\tSystem.arraycopy(items[rowIndex], 0, newRow, 0, index);\r", "+\tnewRow[index] = item;\r", "+\tSystem.arraycopy(items[rowIndex], index, newRow, index + 1, oldLength - index);\r", "+\titems[rowIndex] = newRow;\r", "-\t\tCoolItem left = (CoolItem) row.elementAt(index - 1);\r", "+\t\tCoolItem left = items[rowIndex][index - 1];\r", "-\tint width = 0;\r", "-\tif (index < row.size() - 1) {\r", "-\t\tCoolItem right = (CoolItem) row.elementAt(index + 1);\r", "+\tint width = 0, height = item.getSize().y;\r", "+\tif (index < items[rowIndex].length - 1) {\r", "+\t\tCoolItem right = items[rowIndex][index + 1];\r", "-\titem.requestedWidth = width;\r", "+\tRectangle bounds = item.getBounds();\r", "+\titem.requestedWidth = bounds.width;\r", "+\tredraw(bounds.x, bounds.y, CoolItem.MINIMUM_WIDTH, bounds.height, false);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1d61d564b7273bd1683527d9b015fe1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Header.java", "commitBeforeChange": "9943b3d6da52f8de0da36e26e38ae4bfcae73ce9", "commitAfterChange": "3d30687988c783bc0ef4c36252ff6b060a49574b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r Rectangle getBounds(int itemIndex)", "signatureAfterChange": " Rectangle getBounds(int itemIndex)", "diff": ["- */\r", "-Rectangle getBounds(int itemIndex) {\r", "-\tRectangle bounds = null;\r", "-\tint itemCount = getItemCount();\r", "-\tTable parent = (Table) getParent();\r", "-\r", "-\tif (itemIndex >= 0 && itemIndex < itemCount) {\r", "-\t\tbounds = parent.internalGetColumn(itemIndex).getBounds();\r", "-\t\tbounds.y = 0;\r", "-\t\tbounds.height = getBounds().height;\r", "-\t}\r", "-\telse\r", "-\tif (itemIndex == TableColumn.FILL) {\r", "-\t\tif (itemCount > 0) {\r", "-\t\t\tbounds = parent.internalGetColumn(itemCount - 1).getBounds();\r", "-\t\t\tbounds.x += bounds.width;\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tbounds = new Rectangle(0, 0, 0, 0);\r", "-\t\t}\r", "-\t\tbounds.width = Math.max(0, getBounds().width - bounds.x);\r", "-\t\tbounds.y = 0;\r", "-\t\tbounds.height = getBounds().height;\t\t\r", "-\t}\r", "-\treturn bounds;\r", "-}\r", "+ */", "+Rectangle getBounds(int itemIndex) {", "+\tRectangle bounds = null;", "+\tint itemCount = getItemCount();", "+", "+\tif (itemIndex >= 0 && itemIndex < itemCount) {", "+\t\tbounds = parent.internalGetColumn(itemIndex).getBounds();", "+\t\tbounds.y = 0;", "+\t\tbounds.height = getBounds().height;", "+\t}", "+\telse", "+\tif (itemIndex == TableColumn.FILL) {", "+\t\tif (itemCount > 0) {", "+\t\t\tbounds = parent.internalGetColumn(itemCount - 1).getBounds();", "+\t\t\tbounds.x += bounds.width;", "+\t\t}", "+\t\telse {", "+\t\t\tbounds = new Rectangle(0, 0, 0, 0);", "+\t\t}", "+\t\tbounds.width = Math.max(0, getBounds().width - bounds.x);", "+\t\tbounds.y = 0;", "+\t\tbounds.height = getBounds().height;\t\t", "+\t}", "+\treturn bounds;", "+}"]}], "num": 37794}
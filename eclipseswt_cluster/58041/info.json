{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7bb8dd09f5f5f1ea04159bcbabc7853", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5253f7249d00aabf270cec8a7accd9f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "98b86bf34bfb26fea9d906f83757cf0c8fc5f7bd", "commitAfterChange": "ce138c7e1fb0d889814afbd2a7603dfa7d22605f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void initNative(String filename)", "signatureAfterChange": "  void initNative(String filename)", "diff": ["+\t\tif (!nativeRep.isKindOfClass(OS.class_NSBitmapImageRep)) {", "+\t\t\treturn;", "+\t\t}", "+", "-", "-\t\tnativeImage.setSize(size);", "-\t\trep.setAlpha(false);", "-\t\tNSGraphicsContext context = NSGraphicsContext.graphicsContextWithBitmapImageRep(rep);", "-\t\tNSGraphicsContext.static_saveGraphicsState();", "-\t\tNSGraphicsContext.setCurrentContext(context);", "-\t\tnativeImage.drawInRect(rect, rect, OS.NSCompositeCopy, 1);", "- \t\tNSGraphicsContext.static_restoreGraphicsState();", "- \t\trep.setAlpha(hasAlpha);", "+", "+\t\t/* Compute the pixels */", "+\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\tint /*long*/ ctx = OS.CGBitmapContextCreate(rep.bitmapData(), width, height, 8, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "+\t\tOS.CGColorSpaceRelease(colorspace);", "+\t\tNSGraphicsContext.static_saveGraphicsState();", "+\t\tNSGraphicsContext.setCurrentContext(NSGraphicsContext.graphicsContextWithGraphicsPort(ctx, false));", "+\t\tif (hasAlpha) OS.objc_msgSend(nativeRep.id, OS.sel_setAlpha_, 0);", "+\t\tnativeRep.drawInRect(rect);", "+\t\tif (hasAlpha) OS.objc_msgSend(nativeRep.id, OS.sel_setAlpha_, 1);", "+\t\tNSGraphicsContext.static_restoreGraphicsState();", "+\t\tOS.CGContextRelease(ctx);", "-\t\t\t// Compute any alpha by using CGImageBitmapContext.", "+\t\t\t/* Compute the alpha values */", "-\t\t\tnativeImage.drawInRect(rect, new NSRect(), OS.NSCompositeCopy, 1.0f);", "+\t\t\tnativeRep.drawInRect(rect);", "+\t\t\t/* Merge the alpha values with the pixels */", "+\t\t\tbyte[] srcData = new byte[height * bpr];", "+\t\t\tOS.memmove(srcData, rep.bitmapData(), srcData.length);", "+\t\t\tfor (int a = 0, p = 0; a < alphaData.length; a++, p += 4) {", "+\t\t\t\tsrcData[p] = alphaData[a];", "+\t\t\t}", "+\t\t\tOS.memmove(rep.bitmapData(), srcData, srcData.length);", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d1104f562655700cccfb4b7e78aa3ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "271bf8e8631934dbdf092a7f5d74accd534157b3", "commitAfterChange": "267efeba946291455291f7e37b5a9adb5c1006b4", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tString roleText = OS.kAXGroupRole;", "-\t\tbuffer = new char [roleText.length ()];", "-\t\troleText.getChars (0, buffer.length, buffer, 0);", "-\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "-\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "-\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\treturn OS.noErr;", "+\t\tString roleText = ((style & SWT.PUSH) != 0) ? OS.kAXButtonRole", "+\t\t\t\t: ((style & SWT.RADIO) != 0) ? OS.kAXRadioButtonRole", "+\t\t\t\t: ((style & SWT.CHECK) != 0) ? OS.kAXCheckBoxRole", "+\t\t\t\t: ((style & SWT.DROP_DOWN) != 0) ? OS.kAXMenuButtonRole", "+\t\t\t\t: null; // SEPARATOR", "+\t\tif (roleText != null) {", "+\t\t\tbuffer = new char [roleText.length ()];", "+\t\t\troleText.getChars (0, buffer.length, buffer, 0);", "+\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "+\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "+\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "+\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\tOS.CFRelease(stringRef2);", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t}", "-\t\tif (attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "-\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "-\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "-\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\tOS.CFRelease(stringRef2);", "-\t\t\t\treturn OS.noErr;", "-\t\t\t}", "+\t}", "+\tif (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "+\t\tString tooltip = getToolTipText();", "+\t\tif (tooltip != null && getText().equals(\"\")) {", "+\t\t\t//TODO: TEMPORARY CODE: return the tooltip for an icon-only tool item (should send getName to the app)", "+\t\t\tbuffer = new char [tooltip.length ()];", "+\t\t\ttooltip.getChars (0, buffer.length, buffer, 0);", "+\t\t\tint ref = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {ref});", "+\t\t\tOS.CFRelease(ref);", "+\t\t\treturn OS.noErr;", "+\t\t\t// END TEMPORARY CODE"]}], "num": 58041}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "088359b3bb7b0a43a4ca004075b1fe0a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ec53047c5a239d4a7d29e0ca56f839d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "579505f5c399bb89f97d98e9912b18625d2312e2", "commitAfterChange": "6f962e3a053bd8c18a3e154a7ac0ad1ba2aeb3fe", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "signatureAfterChange": "  void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "diff": ["-\t} else if (methodData.getFlag(FLAG_CPP)) {", "+\t} else if (methodData.getFlag(FLAG_CPP) || methodData.getFlag(FLAG_SETTER) || methodData.getFlag(FLAG_GETTER) || methodData.getFlag(FLAG_ADDER)) {", "+\t\tif (methodData.getFlag(FLAG_GCOBJECT)) {", "+\t\t\tif (methodData.getFlag(FLAG_STRUCT)) {", "+\t\t\t\toutput(\"TO_HANDLE_STRUCT(\");", "+\t\t\t} else {", "+\t\t\t\toutput(\"TO_HANDLE(\");", "+\t\t\t}", "+\t\t}", "-\t\toutput(\"arg0)->\");", "+\t\tif (paramData.getFlag(FLAG_GCOBJECT)) {", "+\t\t\toutput(\"TO_OBJECT(\");", "+\t\t}", "+\t\toutput(\"arg0\");", "+\t\tif (paramData.getFlag(FLAG_GCOBJECT)) {", "+\t\t\toutput(\")\");", "+\t\t}", "+\t\toutput(\")->\");", "+\t} else if (methodData.getFlag(FLAG_GCNEW)) {", "+\t\toutput(\"TO_HANDLE(gcnew \");", "+\t\tString accessor = methodData.getAccessor();", "+\t\tif (accessor.length() != 0) {", "+\t\t\toutput(accessor);", "+\t\t} else {", "+\t\t\tint index = -1;", "+\t\t\tif ((index = name.indexOf('_')) != -1) {", "+\t\t\t\toutput(name.substring(index + 1));", "+\t\t\t} else {", "+\t\t\t\toutput(name);", "+\t\t\t}", "+\t\t}", "+\t\tif (methodData.getFlag(FLAG_GCOBJECT)) {", "+\t\t\tif (methodData.getFlag(FLAG_STRUCT)) {", "+\t\t\t\toutput(\"TO_HANDLE_STRUCT(\");", "+\t\t\t} else {", "+\t\t\t\toutput(\"TO_HANDLE(\");\t\t\t\t", "+\t\t\t}", "+\t\t}", "-\tgenerateFunctionCallRightSide(method, methodData, paramTypes, paramStart);", "+\tif ((methodData.getFlag(FLAG_SETTER) && paramTypes.length == 3) || (methodData.getFlag(FLAG_GETTER) && paramTypes.length == 2)) {", "+\t\toutput(\"[arg1]\");", "+\t\tparamStart++;", "+\t}", "+\tif (methodData.getFlag(FLAG_SETTER)) output(\" = \");", "+\tif (methodData.getFlag(FLAG_ADDER)) output(\" += \");", "+\tif (!methodData.getFlag(FLAG_GETTER)) {", "+\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, paramStart);", "+\t}", "+\tif (methodData.getFlag(FLAG_GCNEW) || methodData.getFlag(FLAG_GCOBJECT)) {", "+\t\toutput(\")\");", "+\t}", "+\toutput(\";\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fb59d62927afd94123083c501d300c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "c9baca597732eba93412edfdda729834c82bd64e", "commitAfterChange": "c121bfa57942c896c00e3ff4112c06d496bc4869", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "signatureAfterChange": "  void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "diff": ["-\tgenerateFunctionCallLeftSide(method, methodData, returnType, needsReturn);", "-\t/*", "-\t* ", "-\t*/", "+\tString copy = (String)methodData.getParam(\"copy\");", "+\tboolean makeCopy = copy.length() != 0 && isCPP && returnType != Void.TYPE;", "+\tif (makeCopy) {", "+\t\toutput(\"\\t\");", "+\t\toutput(copy);", "+\t\toutput(\" temp = \");", "+\t} else {", "+\t\tgenerateFunctionCallLeftSide(method, methodData, returnType, needsReturn);", "+\t}", "+\t} else if (methodData.getFlag(\"cpp\")) {", "+\t\toutput(\"(\");", "+\t\tParameterData paramData = getMetaData().getMetaData(method, 0);", "+\t\tif (paramData.getFlag(\"struct\")) output(\"*\");", "+\t\tString cast = paramData.getCast(); ", "+\t\tif (cast.length() != 0 && !cast.equals(\"()\")) {", "+\t\t\toutput(cast);", "+\t\t}", "+\t\toutput(\"arg0)->\");", "+\t\tString accessor = methodData.getAccessor();", "+\t\tif (accessor.length() != 0) {", "+\t\t\toutput(accessor);", "+\t\t} else {", "+\t\t\tint index = -1;", "+\t\t\tString name = method.getName();", "+\t\t\tif ((index = name.indexOf('_')) != -1) {", "+\t\t\t\toutput(name.substring(index + 1, name.length()));", "+\t\t\t} else {", "+\t\t\t\toutput(name);", "+\t\t\t}", "+\t\t}", "+\t\tparamStart = 1;", "+\t} else if (methodData.getFlag(\"new\")) {", "+\t\toutput(\"new \");", "+\t\tString accessor = methodData.getAccessor();", "+\t\tif (accessor.length() != 0) {", "+\t\t\toutput(accessor);", "+\t\t} else {", "+\t\t\tint index = -1;", "+\t\t\tString name = method.getName();", "+\t\t\tif ((index = name.indexOf('_')) != -1) {", "+\t\t\t\toutput(name.substring(0, index));", "+\t\t\t} else {", "+\t\t\t\toutput(name);", "+\t\t\t}", "+\t\t}", "+\t} else if (methodData.getFlag(\"delete\")) {", "+\t\toutput(\"delete \");", "+\t\tParameterData paramData = getMetaData().getMetaData(method, 0);", "+\t\tString cast = paramData.getCast(); ", "+\t\tif (cast.length() != 0 && !cast.equals(\"()\")) {", "+\t\t\toutput(cast);", "+\t\t}", "+\t\toutput(\"arg0;\");", "+\t\toutputDelimiter();", "+\t\treturn;", "-\t\toutput(method.getName());", "+\t\tString accessor = methodData.getAccessor();", "+\t\tif (accessor.length() != 0) {", "+\t\t\toutput(accessor);", "+\t\t} else {", "+\t\t\toutput(method.getName());", "+\t\t}", "+\tif (makeCopy) {", "+\t\toutput(\"\\t{\");", "+\t\toutputDelimiter();", "+\t\toutput(\"\\t\\t\");", "+\t\toutput(copy);", "+\t\toutput(\"* copy = new \");", "+\t\toutput(copy);", "+\t\toutput(\"();\");", "+\t\toutputDelimiter();", "+\t\toutput(\"\\t\\t*copy = temp;\");", "+\t\toutputDelimiter();", "+\t\toutput(\"\\t\\trc = \");", "+\t\toutput(\"(\");", "+\t\toutput(getTypeSignature2(returnType));", "+\t\toutput(\")\");", "+\t\toutput(\"copy;\");", "+\t\toutputDelimiter();", "+\t\toutput(\"\\t}\");", "+\t\toutputDelimiter();", "+\t}"]}], "num": 38357}
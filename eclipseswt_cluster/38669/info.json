{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a4da0728cb9cb1f370c2bb16596136b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b9ef4d801063ae55ae62a71a1fceafe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Text.java", "commitBeforeChange": "06cfb2472f7282169dadc570fa0ea5af36fdf8fd", "commitAfterChange": "958d022d9eb894b2a4d737dc59c9428f430b1c30", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 27, "signatureBeforeChange": "  public void test_getLineDelimiter()", "signatureAfterChange": "  public void test_getLineDelimiter()", "diff": ["-\twarnUnimpl(\"Test test_getLineDelimiter not written\");", "+\tString platform = SWT.getPlatform();", "+\tString delimiter = text.getLineDelimiter();", "+\tif (platform.equals(\"win32\")) {", "+\t\tassertTrue(\":a:\", delimiter.equals(\"\\r\\n\"));", "+\t} else if (platform.equals(\"motif\")) {", "+\t\tassertTrue(\":a:\", delimiter.equals(\"\\n\"));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d7aafb43098f15b007cea90e891d95", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Control.java", "commitBeforeChange": "930261cdfaba309963dc6463c391d85d3d1dba2e", "commitAfterChange": "0ce055ff998bf3fe479d3fe56dc33f3fd69c6320", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  public void test_isReparentable()", "signatureAfterChange": "  public void test_isReparentable()", "diff": ["-\tif (SwtJunit.isWindows) {", "-\t\tassertTrue(control.isReparentable());", "-\t} else {", "-\t\tassertTrue(!control.isReparentable());", "-\t}", "+\tString platform = SWT.getPlatform();", "+\tboolean isReparentable = platform.equals(\"win32\") || platform.equals(\"gtk\");", "+\tassertEquals (\"isReparentable\", control.isReparentable(), isReparentable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e171fa253effe44a332817e332ffb7b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/WindowCreator2.java", "commitBeforeChange": "56e7d36bc90593daaa357ec9bff3f72bf2773fcc", "commitAfterChange": "80e2cb300d2a1ee580bd9649c2e181cedb302ad2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  int CreateChromeWindow2 (int parent, int chromeFlags, int contextFlags, int uri, int cancel, int _retval)", "signatureAfterChange": "  int CreateChromeWindow2 (int parent, int chromeFlags, int contextFlags, int uri, int cancel, int _retval)", "diff": ["+", "+\t\t/* Ensure that the Browser provided by the client is valid for use */ ", "+\t\tif (doit) {", "+\t\t\tString platform = Platform.PLATFORM;", "+\t\t\tboolean isMozillaNativePlatform = platform.equals (\"gtk\") || platform.equals (\"motif\");", "+\t\t\tdoit = isMozillaNativePlatform || (browser.getStyle () & SWT.MOZILLA) != 0;", "+\t\t}"]}], "num": 38669}
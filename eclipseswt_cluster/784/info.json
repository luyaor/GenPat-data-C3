{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1ab03626207970732a11c88cfd1fc44", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f277dd55bac688d82398b58b59d20e45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "0ef9617c1012a47a6d1ff1554f6abcb04cfa36ad", "commitAfterChange": "26cde76ce3c88c1f3b47c43e3bb62261f679e704", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void setEventData(int theDrag, DNDEvent event)", "signatureAfterChange": "  private boolean setEventData(int theDrag, DNDEvent event)", "diff": ["-void setEventData(int theDrag, DNDEvent event) {", "-\t", "-\tint[] outActions = new int[1];", "-\tint style = getStyle();", "-\tOS.GetDragAllowableActions(theDrag, outActions);", "-\tint operations = osOpToOp(outActions[0]) & style;", "-\t", "-\t", "-\tif (dataTypes == null) {", "-\t\tshort[] numItems = new short[1];", "-\t\tOS.CountDragItems(theDrag, numItems);", "-\t\tint[] flavors = new int[10];", "-\t\tint index = -1;", "-\t\t//Get a unique list of flavors", "-\t\tfor (short i = 0; i < numItems[0]; i++) {", "-\t\t\tint[] theItemRef = new int[1];", "-\t\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "-\t\t\tshort[] numFlavors = new short[1];", "-\t\t\tOS.CountDragItemFlavors(theDrag, theItemRef[0], numFlavors);", "-\t\t\tint[] theType = new int[1];", "-\t\t\tfor (int j = 0; j < numFlavors.length; j++) {", "-\t\t\t\ttheType[0] = 0;", "-\t\t\t\tif (OS.GetFlavorType(theDrag, theItemRef[0], (short) (j+1), theType) == OS.noErr) {", "-\t\t\t\t\tboolean unique = true;", "-\t\t\t\t\tfor (int k = 0; k < flavors.length; k++) {", "-\t\t\t\t\t\tif (flavors[k] == theType[0]) {", "-\t\t\t\t\t\t\tunique = false;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (unique) {", "-\t\t\t\t\t\tif (index == flavors.length - 1) {", "-\t\t\t\t\t\t\tint[] temp = new int[flavors.length + 10];", "-\t\t\t\t\t\t\tSystem.arraycopy(flavors, 0, temp, 0, flavors.length);", "-\t\t\t\t\t\t\tflavors = temp;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tflavors[++index] = theType[0];", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (index > -1) {", "-\t\t\tindex = -1;", "-\t\t\tdataTypes = new TransferData[flavors.length];", "-\t\t\tfor (int i = 0; i < flavors.length; i++) {", "-\t\t\t\tif (flavors[i] != 0) {", "-\t\t\t\t\tTransferData data = new TransferData();", "-\t\t\t\t\tdata.type = flavors[i];", "-\t\t\t\t\tfor (int j = 0; j < transferAgents.length; j++) {", "-\t\t\t\t\t\tif (transferAgents[j].isSupportedType(data)) {", "-\t\t\t\t\t\t\tdataTypes[++index] = data;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (index == -1) {", "-\t\t\t\tdataTypes = null;", "-\t\t\t} else if (index < dataTypes.length - 1) {", "-\t\t\t\tTransferData[] temp = new TransferData[index + 1];", "-\t\t\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "-\t\t\t\tdataTypes = temp;", "-\t\t\t}", "-\t\t}", "-\t}", "-", "-\tint currentOperation =  getOperationFromKeyState(OS.GetCurrentEventKeyModifiers ());", "-\tif (currentOperation == DND.DROP_DEFAULT && (style & DND.DROP_DEFAULT) == 0){", "-\t\tcurrentOperation = DND.DROP_MOVE;", "-\t}", "-\t", "-\tevent.widget = this;", "-\tevent.time = (int)System.currentTimeMillis();", "-\tPoint mouse = new Point();", "-\tOS.GetDragMouse(theDrag, mouse, null);", "-\tevent.x = mouse.h;", "-\tevent.y = mouse.v;", "-\tevent.feedback = DND.FEEDBACK_SELECT;", "-\tevent.operations = operations;", "-\tevent.dataTypes = dataTypes;", "-\tif (dataTypes != null && dataTypes.length > 0) event.dataType = dataTypes[0];", "-\tevent.detail = DND.DROP_NONE;", "-\tif( (currentOperation & style) == currentOperation) {", "-\t\tevent.detail = currentOperation;", "-\t} ", "-}", "+private boolean setEventData(int theDrag, DNDEvent event) {", "+\tif (theDrag == 0) return false;", "+\t", "+\t// get allowed operations", "+\tint style = getStyle();", "+\tint[] outActions = new int[1];", "+\tOS.GetDragAllowableActions(theDrag, outActions);", "+\tint operations = osOpToOp(outActions[0]) & style;", "+\tif (operations == DND.DROP_NONE) return false;", "+\t", "+\t//get current operation", "+\tint operation =  getOperationFromKeyState(theDrag);", "+\tkeyOperation = operation;", "+\tif (operation == DND.DROP_DEFAULT) {", "+\t\t if ((style & DND.DROP_DEFAULT) == 0) {", "+\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "+\t\t }", "+\t} else {", "+\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "+\t}", "+\t", "+\t// get allowed transfer types", "+\tshort[] numItems = new short[1];", "+\tOS.CountDragItems(theDrag, numItems);", "+\tint[] flavors = new int[10];", "+\tint index = -1;", "+\t//Get a unique list of flavors", "+\tfor (short i = 0; i < numItems[0]; i++) {", "+\t\tint[] theItemRef = new int[1];", "+\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "+\t\tshort[] numFlavors = new short[1];", "+\t\tOS.CountDragItemFlavors(theDrag, theItemRef[0], numFlavors);", "+\t\tint[] theType = new int[1];", "+\t\tfor (int j = 0; j < numFlavors.length; j++) {", "+\t\t\ttheType[0] = 0;", "+\t\t\tif (OS.GetFlavorType(theDrag, theItemRef[0], (short) (j+1), theType) == OS.noErr) {", "+\t\t\t\tboolean unique = true;", "+\t\t\t\tfor (int k = 0; k < flavors.length; k++) {", "+\t\t\t\t\tif (flavors[k] == theType[0]) {", "+\t\t\t\t\t\tunique = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (unique) {", "+\t\t\t\t\tif (index == flavors.length - 1) {", "+\t\t\t\t\t\tint[] temp = new int[flavors.length + 10];", "+\t\t\t\t\t\tSystem.arraycopy(flavors, 0, temp, 0, flavors.length);", "+\t\t\t\t\t\tflavors = temp;", "+\t\t\t\t\t}", "+\t\t\t\t\tflavors[++index] = theType[0];", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (index == -1) return false;", "+\t", "+\tTransferData[] dataTypes = new TransferData[index+1];", "+\tindex = -1;", "+\tfor (int i = 0; i < dataTypes.length; i++) {", "+\t\tif (flavors[i] != 0) {", "+\t\t\tTransferData data = new TransferData();", "+\t\t\tdata.type = flavors[i];", "+\t\t\tfor (int j = 0; j < transferAgents.length; j++) {", "+\t\t\t\tif (transferAgents[j].isSupportedType(data)) {", "+\t\t\t\t\tdataTypes[++index] = data;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (index == -1) return false;", "+\t", "+\tif (index < dataTypes.length - 1) {", "+\t\tTransferData[] temp = new TransferData[index + 1];", "+\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "+\t\tdataTypes = temp;", "+\t}", "+", "+\tPoint mouse = new Point();", "+\tOS.GetDragMouse(theDrag, mouse, null);", "+\t", "+\tevent.widget = this;", "+\tevent.x = mouse.h;", "+\tevent.y = mouse.v;", "+\tevent.time = (int)System.currentTimeMillis();", "+\tevent.feedback = DND.FEEDBACK_SELECT;", "+\tevent.dataTypes = dataTypes;", "+\tevent.dataType = dataTypes[0];", "+\tevent.operations = operations;", "+\tevent.detail = operation;", "+\t", "+\treturn true;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f7870ae0011fc79625e200593b249ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "ca767eade763644686944c870e6c041810d2d907", "commitAfterChange": "ac7f99d85cc9bbe2c6592c95fd0f0d38071c8648", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": "  void setKeyState (Event event, int theEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, int theEvent)", "diff": ["-void setKeyState (Event event, int theEvent) {", "+boolean setKeyState (Event event, int theEvent) {", "+\tboolean isNull = false;", "-\t\t\tevent.keyCode = SWT.CR;", "+\t\t\tevent.keyCode = SWT.KEYPAD_CR;", "-\t\tcase 0: {", "-\t\t\tint [] length = new int [1];", "-\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "-\t\t\tif (status == OS.noErr && length [0] > 0) {", "-\t\t\t\tchar [] chars = new char [1];", "-\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 2, null, chars);", "-\t\t\t\tevent.character = chars [0];", "-\t\t\t} else {", "-\t\t\t\tbyte [] charCode = new byte [1];", "-\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyMacCharCodes, OS.typeChar, null, charCode.length, null, charCode);", "-\t\t\t\tevent.character = (char) charCode [0];", "+\t\tdefault: {", "+\t\t\tif (event.keyCode == 0 || (SWT.KEYPAD_TIMES <= event.keyCode && event.keyCode <= SWT.KEYPAD_CR)) {", "+\t\t\t\tint [] length = new int [1];", "+\t\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "+\t\t\t\tif (status == OS.noErr && length [0] != 0) {", "+\t\t\t\t\tchar [] chars = new char [1];", "+\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 2, null, chars);", "+\t\t\t\t\tevent.character = chars [0];", "+\t\t\t\t}", "+\t\t\t\t/*", "+\t\t\t\t* Bug in the Mactonish.  For some reason, Ctrl+Shift+'2' and Ctrl+Shift+'6'", "+\t\t\t\t* fail to give 0x0 (^@ or ASCII NUL) and 0x1e (^^).  Other control character", "+\t\t\t\t* key sequences such as ^A or even Ctrl+Shift+'-' (^_ or 0x1f) are correctly", "+\t\t\t\t* translated to control characters.  Since it is not possible to know which", "+\t\t\t\t* key combination gives '@' on an international keyboard, there is no way to", "+\t\t\t\t* test for either character and convert it to a control character (Shift+'2'", "+\t\t\t\t* gives '@' only on an English keyboard) to work around the problem.", "+\t\t\t\t*", "+\t\t\t\t* There is no fix at this time.", "+\t\t\t\t*/", "-\t\t\tif (event.character != 0) {", "+\t\t\tif (event.keyCode == 0) {", "-\t\t\t\tint result = OS.KeyTranslate (kchrPtr, (short)keyCode [0], display.kchrState);", "+\t\t\t\tint result = OS.KeyTranslate (display.kchrPtr, (short)keyCode [0], display.kchrState);", "-\tsetInputState (event, theEvent);", "+\tif (event.keyCode == 0 && event.character == 0) {", "+\t\tif (!isNull) return false;", "+\t}", "+\treturn setInputState (event, theEvent);"]}], "num": 784}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "469f1bd48a4ac656a3eff5e2d198a547", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19a7ac76869f77bd60877d667561bc99", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "a76a5df0b4c209922429ba46df2b7f68ccaa3afc", "commitAfterChange": "00fdc215ac9324b47d45bb8a3dfd0ceb267cdf4e", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void redraw (int x, int y, int width, int height, boolean all)", "signatureAfterChange": " public void redraw (int x, int y, int width, int height, boolean all)", "diff": ["+}", "-\tcheckWidget();", "-\tif (!all) return;", "-\tPoint location = text.getLocation();", "-\ttext.redraw(x - location.x, y - location.y, width, height, all);", "-\tlocation = list.getLocation();", "-\tlist.redraw(x - location.x, y - location.y, width, height, all);", "-\tif (arrow != null) {", "-\t\tlocation = arrow.getLocation();", "-\t\tarrow.redraw(x - location.x, y - location.y, width, height, all);", "+\tsuper.redraw(x, y, width, height, all);", "+\tDisplay display = getDisplay();", "+\tRectangle rect = new Rectangle(x, y, width, height);", "+\tRectangle bounds = text.getBounds();", "+\tif (bounds.intersects(rect)) {", "+\t\tRectangle damage = bounds.intersection(rect);", "+\t\tdamage = display.map(this, text, damage);", "+\t\ttext.redraw(damage.x, damage.y, damage.width, damage.height, all);", "+\t}", "+\tbounds = arrow.getBounds();", "+\tif (bounds.intersects(rect)) {", "+\t\tRectangle damage = bounds.intersection(rect);", "+\t\tdamage = display.map(this, arrow, damage);", "+\t\tarrow.redraw(damage.x, damage.y, damage.width, damage.height, all);", "+\t}", "+\tif (popup.isVisible()) {", "+\t\tlist.redraw();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81918bf2b7e0bb33e9fbe8073fdfc973", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "4554e604711848107217e581c2ea19dd3a200ccc", "commitAfterChange": "943950684f8a4ea21db196bca596eabbe07db1ea", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " public void setImage (int columnIndex, Image value)", "signatureAfterChange": " public void setImage (int columnIndex, Image value)", "diff": ["-\t", "+", "-\t/*", "-\t * If this is the first image being put into the tree then its item height", "-\t * may be adjusted, in which case a full redraw is needed.", "-\t */", "-\tif (parent.imageHeight == 0) {", "-\t\tint oldItemHeight = parent.itemHeight;", "-\t\tparent.setImageHeight (value.getBounds ().height);", "-\t\tif (oldItemHeight != parent.itemHeight) {", "-\t\t\tif (columnIndex == 0) {", "-\t\t\t\tparent.col0ImageWidth = value.getBounds ().width;", "-\t\t\t\tif (columns.length > 0) {", "-\t\t\t\t\t/* ", "-\t\t\t\t\t * All column 0 cells will now have less room available for their texts,", "-\t\t\t\t\t * so all items must now recompute their column 0 displayTexts.", "-\t\t\t\t\t */", "-\t\t\t\t\tGC gc = new GC (parent);", "-\t\t\t\t\tTreeItem[] rootItems = parent.items;", "-\t\t\t\t\tfor (int i = 0; i < rootItems.length; i++) {", "-\t\t\t\t\t\trootItems [i].updateColumnWidth (columns [0], gc);", "-\t\t\t\t\t}", "-\t\t\t\t\tgc.dispose ();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tparent.redraw ();", "-\t\t\treturn;", "+\tif (columns.length == 0) {", "+\t\tif (parent.imageHeight == 0) {", "+\t\t\t/* this is the first image being put into the parent Tree */", "+\t\t\tRectangle bounds = value.getBounds ();", "+\t\t\tparent.orderedCol0imageWidth = bounds.width;", "+\t\t\tparent.setImageHeight (bounds.height);", "+\t\t\tparent.redrawItems (0, parent.availableItemsCount - 1, false);", "+\t\t} else {", "+\t\t\tredrawItem ();", "+\t\treturn;", "-\t/* ", "-\t * If this is the first image being put into column 0 then all cells", "-\t * in the column should also indent accordingly. ", "-\t */", "-\tif (columnIndex == 0 && parent.col0ImageWidth == 0) {", "-\t\tparent.col0ImageWidth = value.getBounds ().width;", "-\t\t/* redraw the column */", "-\t\tif (columns.length == 0) {", "-\t\t\tparent.redraw ();", "-\t\t} else {", "+\t/* there are 1+ columns */", "+\tTreeColumn column = columns [columnIndex];", "+\tint orderedIndex = column.getOrderIndex ();", "+\tRectangle bounds = value.getBounds ();", "+\tif (column.itemImageWidth == 0) column.itemImageWidth = bounds.width;", "+", "+\tif (parent.imageHeight == 0) {", "+\t\t/* this is the first image being put into the parent Tree */", "+\t\tint oldItemHeight = parent.itemHeight;", "+\t\tparent.setImageHeight (bounds.height);", "+", "+\t\tif (orderedIndex == 0) {\t/* the first ordered column */", "+\t\t\tparent.orderedCol0imageWidth = bounds.width;", "-\t\t\tGC gc = new GC (parent);", "+\t\t\tGC gc = new GC (parent);", "-\t\t\t\trootItems [i].updateColumnWidth (columns [0], gc);", "+\t\t\t\trootItems [i].updateColumnWidth (column, gc);", "-\t\t\tparent.redraw (", "-\t\t\t\tcolumns [0].getX (), 0,", "-\t\t\t\tcolumns [0].width,", "-\t\t\t\tparent.getClientArea ().height,", "-\t\t\t\ttrue);", "+\t\t\tif (oldItemHeight != parent.itemHeight) {", "+\t\t\t\t/* the item height grew as a result of the new image height, so redraw everything */", "+\t\t\t\tparent.redraw ();", "+\t\t\t} else {", "+\t\t\t\t/* redraw the column since all items should now have image space */", "+\t\t\t\tparent.redraw (column.getX (), 0, column.width, parent.getClientArea ().height, false);", "+\t\t\t}", "+\t\t} else {\t/* not the first ordered column */", "+\t\t\tif (oldItemHeight != parent.itemHeight) {", "+\t\t\t\t/* the item height grew as a result of the new image height, so redraw everything */", "+\t\t\t\tparent.redraw ();", "+\t\t\t} else {", "+\t\t\t\tredrawItem ();", "+\t\t\t}", "+", "+\tif (orderedIndex == 0 && parent.orderedCol0imageWidth == 0) {", "+\t\t/* this is the first image being put into the current ordered column 0 */", "+\t\tparent.orderedCol0imageWidth = bounds.width;", "+\t\t/* ", "+\t\t * All column 0 cells will now have less room available for their texts,", "+\t\t * so all items must now recompute their column 0 displayTexts.", "+\t\t */", "+\t\tTreeItem[] rootItems = parent.items;", "+\t\tGC gc = new GC (parent);", "+\t\tfor (int i = 0; i < rootItems.length; i++) {", "+\t\t\trootItems [i].updateColumnWidth (column, gc);", "+\t\t}", "+\t\tgc.dispose ();", "+\t\tparent.redraw (column.getX (), 0, column.width, parent.getClientArea ().height, false);", "+\t\treturn;", "+\t}", "+"]}], "num": 24979}
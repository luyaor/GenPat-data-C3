{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2603203b94d108514df4f24cd888735d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5141a5518e86a650600cf5a54598d7ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "80da648e54c5996231a82e37f7ddac42a9763361", "commitAfterChange": "123ea21435945c9585ede55bef80d1e5c5621abd", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 216, "signatureBeforeChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "diff": ["-\t\t\tif (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {", "+\t\t\t/*", "+\t\t\t* When lParam is zero, one of F10, Shift+F10, Ctrl+F10 or", "+\t\t\t* Ctrl+Shift+F10 was pressed.  If there is no menu bar and", "+\t\t\t* the focus control is interested in keystrokes, give the", "+\t\t\t* key to the focus control.  Normally, F10 with no menu bar", "+\t\t\t* moves focus to the System menu but this can be achieved", "+\t\t\t* using Alt+Space.  To allow the application to see F10,", "+\t\t\t* avoid running the default window proc.", "+\t\t\t* ", "+\t\t\t* NOTE:  When F10 is pressed, WM_SYSCOMMAND is sent to the", "+\t\t\t* shell, not the focus control.  This is undocumented Windows", "+\t\t\t* behavior.", "+\t\t\t*/", "+\t\t\tif (lParam == 0) {", "-\t\t\t\tif (menu != null) {", "-\t\t\t\t\tchar key = mbcsToWcs (lParam);", "-\t\t\t\t\tif (key != 0) {", "-\t\t\t\t\t\tkey = Character.toUpperCase (key);", "-\t\t\t\t\t\tMenuItem [] items = menu.getItems ();", "-\t\t\t\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\t\t\t\tMenuItem item = items [i];", "-\t\t\t\t\t\t\tString text = item.getText ();", "-\t\t\t\t\t\t\tchar mnemonic = findMnemonic (text);", "-\t\t\t\t\t\t\tif (text.length () > 0 && mnemonic == 0) {", "-\t\t\t\t\t\t\t\tchar ch = text.charAt (0);", "-\t\t\t\t\t\t\t\tif (Character.toUpperCase (ch) == key) {", "-\t\t\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "-\t\t\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\tif (menu == null) {", "+\t\t\t\t\tControl control = display.getFocusControl ();", "+\t\t\t\t\tif (control != null) {", "+\t\t\t\t\t\tif (control.hooks (SWT.KeyDown) || control.hooks (SWT.KeyUp)) {", "+\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "+\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t/*", "+\t\t\t\t* When lParam is not zero, Alt+<key> was pressed.  If the", "+\t\t\t\t* application is interested in keystrokes and there is a", "+\t\t\t\t* menu bar, check to see whether the key that was pressed", "+\t\t\t\t* matches a mnemonic on the menu bar.  Normally, Windows", "+\t\t\t\t* matches the first character of a menu item as well as", "+\t\t\t\t* matching the mnemonic character.  To allow the application", "+\t\t\t\t* to see the keystrokes in this case, avoid running the default", "+\t\t\t\t* window proc.", "+\t\t\t\t*/", "+\t\t\t\tif (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {", "+\t\t\t\t\tDecorations shell = menuShell ();", "+\t\t\t\t\tMenu menu = shell.getMenuBar ();", "+\t\t\t\t\tif (menu != null) {", "+\t\t\t\t\t\tchar key = mbcsToWcs (lParam);", "+\t\t\t\t\t\tif (key != 0) {", "+\t\t\t\t\t\t\tkey = Character.toUpperCase (key);", "+\t\t\t\t\t\t\tMenuItem [] items = menu.getItems ();", "+\t\t\t\t\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\t\t\t\t\tMenuItem item = items [i];", "+\t\t\t\t\t\t\t\tString text = item.getText ();", "+\t\t\t\t\t\t\t\tchar mnemonic = findMnemonic (text);", "+\t\t\t\t\t\t\t\tif (text.length () > 0 && mnemonic == 0) {", "+\t\t\t\t\t\t\t\t\tchar ch = text.charAt (0);", "+\t\t\t\t\t\t\t\t\tif (Character.toUpperCase (ch) == key) {", "+\t\t\t\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "+\t\t\t\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355c19f1b95888e40d56be944f306c4e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableTreeEditor.java", "commitBeforeChange": "225492273129ab393f5d04af4b1516eb8093e8a2", "commitAfterChange": "14b05cc752ecfa6b4d76eaa5bd6a7189c2e56c0f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void dispose ()", "signatureAfterChange": "\r public void dispose ()", "diff": ["+\t\r", "+\tTable table = tableTree.getTable();\r", "+\tif (this.column > -1 && this.column < table.getColumnCount()){\r", "+\t\tTableColumn tableColumn = table.getColumn(this.column);\r", "+\t\ttableColumn.removeListener(SWT.Resize, columnListener);\r", "+\t\ttableColumn.removeListener(SWT.Move, columnListener);\r", "+\t}\r", "-\teditor.dispose();\r", "+\ttableTree = null;\r", "+\titem = null;\r", "+\tcolumn = -1;\r", "+\t\r", "+\tsuper.dispose();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e95a104313f5fa96763db601ec6213c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "f58793f683068b94e35443290158542850eb2c3b", "commitAfterChange": "0eda67c783918bbf2ce66da0ea5b0c0d81bf13de", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\t\t\t\t\tstring.getChars (0, length, chars, 0);\t", "+\t\t\t\t\tstring.getChars (0, length, chars, 0);", "+\t\t\t\t\t", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Ensure that the orientation of the tool tip matches", "+\t\t\t\t\t* the orientation of the control.", "+\t\t\t\t\t*/", "+\t\t\t\t\tint hwnd = hdr.idFrom;", "+\t\t\t\t\tif (hwnd != 0 && ((lpnmtdi.uFlags & OS.TTF_IDISHWND) != 0)) {", "+\t\t\t\t\t\tControl control = WidgetTable.get (hwnd);", "+\t\t\t\t\t\tif (control != null) {", "+\t\t\t\t\t\t\tif ((control.getStyle () & SWT.RIGHT_TO_LEFT) != 0) {", "+\t\t\t\t\t\t\t\tlpnmtdi.uFlags |= OS.TTF_RTLREADING;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tlpnmtdi.uFlags &= ~OS.TTF_RTLREADING;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t"]}], "num": 21438}
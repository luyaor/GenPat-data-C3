{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af2be45e8c93e654c4610adbbd046b41", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d21de2d02e37e708b7651520bb474c93", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "10dcf451824eee186f55fdc5845ca7af6620fc4f", "commitAfterChange": "f7ab947683071fbd803ab1ee1fc0aef9e31082e8", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 72, "signatureBeforeChange": "  LRESULT verify (int operation, int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PASTE (int wParam, int lParam)", "diff": ["-LRESULT verify (int operation, int wParam, int lParam) {", "-\tLRESULT result = null;", "-\tif (!hooks (SWT.Verify) && !filters (SWT.Verify)) return result;", "-\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\tif ((bits & OS.ES_READONLY) != 0) return result;", "-\tString oldText = \"\";", "-\tif (operation == OS.WM_PASTE) {", "-\t\toldText = getClipboardText ();", "-\t\tif (oldText == null) return result;", "-\t}", "-\tif (operation == OS.WM_UNDO) {", "-\t\t/* Undo and then Redo to get the Undo text */", "-\t\tif (OS.SendMessage (handle, OS.EM_CANUNDO, 0, 0) == 0) {", "-\t\t\treturn result;", "-\t\t}", "-\t\tignoreVerify = true;", "-\t\tcallWindowProc (OS.WM_UNDO, wParam, lParam);", "-\t\toldText = getSelectionText ();", "-\t\tcallWindowProc (OS.WM_UNDO, wParam, lParam);", "-\t\tignoreVerify = false;", "-\t}", "-\tint [] start = new int [1], end = new int [1];", "-\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "-\tif (operation == OS.WM_CLEAR || operation == OS.WM_CUT) {", "-\t\tif (start [0] == end [0]) return result;", "-\t}", "-\tString newText = verifyText (oldText, start [0], end [0], null);", "-\tif (newText == null) return LRESULT.ZERO;", "-\tif (newText != oldText) {", "-\t\tif (operation == OS.WM_CLEAR || operation == OS.WM_CUT) {", "-\t\t\tresult = new LRESULT (callWindowProc (operation, 0, 0));", "-\t\t}", "-\t\tnewText = Display.withCrLf (newText);", "-\t\tTCHAR buffer = new TCHAR (getCodePage (), newText, true);", "-\t\t/*", "-\t\t* Feature in Windows.  When an edit control with ES_MULTILINE", "-\t\t* style that does not have the WS_VSCROLL style is full (i.e.", "-\t\t* there is no space at the end to draw any more characters),", "-\t\t* EM_REPLACESEL sends a WM_CHAR with a backspace character", "-\t\t* to remove any further text that is added.  This is an", "-\t\t* implementation detail of the edit control that is unexpected", "-\t\t* and can cause endless recursion when EM_REPLACESEL is sent", "-\t\t* from a WM_CHAR handler.  The fix is to ignore calling the", "-\t\t* handler from WM_CHAR.", "-\t\t*/", "-\t\tignoreCharacter = true;", "-\t\tOS.SendMessage (handle, OS.EM_REPLACESEL, 0, buffer);", "-\t\tignoreCharacter = false;", "-\t\tif (operation == OS.WM_PASTE || operation == OS.WM_UNDO) {", "-\t\t\treturn LRESULT.ZERO;", "-\t\t}", "-\t}", "-\tif (operation == OS.WM_UNDO) {", "-\t\t/* Do the original Undo */", "-\t\tignoreVerify = true;", "-\t\tcallWindowProc (OS.WM_UNDO, wParam, lParam);", "-\t\tignoreVerify = false;", "-\t\treturn LRESULT.ONE;", "-\t}", "-\treturn result;", "-}", "+\tif (!hooks (SWT.Verify) && !filters (SWT.Verify)) return result;", "+\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\tif ((bits & OS.ES_READONLY) != 0) return result;", "+\tString oldText = getClipboardText ();", "+\tif (oldText == null) return result;", "+\tint [] start = new int [1], end = new int [1];", "+\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\tString newText = verifyText (oldText, start [0], end [0], null);", "+\tif (newText == null) return LRESULT.ZERO;", "+\tif (newText != oldText) {", "+\t\tnewText = Display.withCrLf (newText);", "+\t\tTCHAR buffer = new TCHAR (getCodePage (), newText, true);", "+\t\t/*", "+\t\t* Feature in Windows.  When an edit control with ES_MULTILINE", "+\t\t* style that does not have the WS_VSCROLL style is full (i.e.", "+\t\t* there is no space at the end to draw any more characters),", "+\t\t* EM_REPLACESEL sends a WM_CHAR with a backspace character", "+\t\t* to remove any further text that is added.  This is an", "+\t\t* implementation detail of the edit control that is unexpected", "+\t\t* and can cause endless recursion when EM_REPLACESEL is sent", "+\t\t* from a WM_CHAR handler.  The fix is to ignore calling the", "+\t\t* handler from WM_CHAR.", "+\t\t*/", "+\t\tignoreCharacter = true;", "+\t\tOS.SendMessage (handle, OS.EM_REPLACESEL, 0, buffer);", "+\t\tignoreCharacter = false;", "+\t\treturn LRESULT.ZERO;", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85d151f19f17431d2b85fc9556f04833", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "257f15bb83942923b6c281d94564ea670f80ba38", "commitAfterChange": "ea4f10ff61f99137c4bfd569d4ad818698d4b452", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 76, "signatureBeforeChange": "  String getClipboardText ()", "signatureAfterChange": "  LRESULT wmClipboard (int msg, int wParam, int lParam)", "diff": ["-", "-String getClipboardText () {", "-\tString string = \"\";", "-\tif (OS.OpenClipboard (0)) {", "-\t\tint hMem = OS.GetClipboardData (OS.IsUnicode ? OS.CF_UNICODETEXT : OS.CF_TEXT);", "-\t\tif (hMem != 0) {", "-\t\t\t/* Ensure byteCount is a multiple of 2 bytes on UNICODE platforms */", "-\t\t\tint byteCount = OS.GlobalSize (hMem) / TCHAR.sizeof * TCHAR.sizeof;", "-\t\t\tint ptr = OS.GlobalLock (hMem);", "-\t\t\tif (ptr != 0) {", "-\t\t\t\t/* Use the character encoding for the default locale */", "-\t\t\t\tTCHAR buffer = new TCHAR (0, byteCount / TCHAR.sizeof);", "-\t\t\t\tOS.MoveMemory (buffer, ptr, byteCount);", "-\t\t\t\tstring = buffer.toString (0, buffer.strlen ());", "-\t\t\t\tOS.GlobalUnlock (hMem);", "-\t\t\t}", "-\t\t}", "-\t\tOS.CloseClipboard ();", "-\t}", "-\treturn string;", "+LRESULT wmClipboard (int msg, int wParam, int lParam) {", "+\tif ((style & SWT.READ_ONLY) != 0) return null;", "+\tif (!hooks (SWT.Verify) && !filters (SWT.Verify)) return null;", "+\tboolean call = false;", "+\tString oldText = null, newText = null;", "+\tswitch (msg) {", "+\t\tcase OS.WM_CLEAR:", "+\t\tcase OS.WM_CUT:", "+\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\t\t\tif (start [0] != end [0]) {", "+\t\t\t\tnewText = \"\";", "+\t\t\t\tcall = true;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase OS.WM_PASTE:", "+\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\t\t\tnewText = getClipboardText ();", "+\t\t\tbreak;", "+\t\tcase OS.EM_UNDO:", "+\t\tcase OS.WM_UNDO:", "+\t\t\tif (OS.SendMessage (handle, OS.EM_CANUNDO, 0, 0) != 0) {", "+\t\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\t\t\t\tignoreModify = ignoreCharacter = true;", "+\t\t\t\tcallWindowProc (msg, wParam, lParam);", "+\t\t\t\tnewText = getSelectionText ();", "+\t\t\t\tcallWindowProc (msg, wParam, lParam);", "+\t\t\t\tignoreModify = ignoreCharacter = false;", "+\t\t\t}", "+\t\t\tbreak;", "+\tif (newText != null && !newText.equals (oldText)) {", "+\t\toldText = newText;", "+\t\tnewText = verifyText (newText, start [0], end [0], null);", "+\t\tif (newText == null) return LRESULT.ZERO;", "+\t\tif (!newText.equals (oldText)) {", "+\t\t\tif (call) {", "+\t\t\t\tcallWindowProc (msg, wParam, lParam);", "+\t\t\t}", "+\t\t\tnewText = Display.withCrLf (newText);", "+\t\t\tTCHAR buffer = new TCHAR (getCodePage (), newText, true);", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When an edit control with ES_MULTILINE", "+\t\t\t* style that does not have the WS_VSCROLL style is full (i.e.", "+\t\t\t* there is no space at the end to draw any more characters),", "+\t\t\t* EM_REPLACESEL sends a WM_CHAR with a backspace character", "+\t\t\t* to remove any further text that is added.  This is an", "+\t\t\t* implementation detail of the edit control that is unexpected", "+\t\t\t* and can cause endless recursion when EM_REPLACESEL is sent", "+\t\t\t* from a WM_CHAR handler.  The fix is to ignore calling the", "+\t\t\t* handler from WM_CHAR.", "+\t\t\t*/", "+\t\t\tignoreCharacter = true;", "+\t\t\tOS.SendMessage (handle, OS.EM_REPLACESEL, 0, buffer);", "+\t\t\tignoreCharacter = false;", "+\t\t\treturn LRESULT.ZERO;", "+\t\t}", "+\t}", "+\tif (msg == OS.WM_UNDO) {", "+\t\tignoreVerify = ignoreCharacter = true;", "+\t\tcallWindowProc (OS.WM_UNDO, wParam, lParam);", "+\t\tignoreVerify = ignoreCharacter = false;", "+\t\treturn LRESULT.ONE;", "+\t}", "+\treturn null;"]}], "num": 22309}
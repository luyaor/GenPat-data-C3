{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "235d80bff2205781bf15f56609168113", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "420da9362fbd6dd9e69f8caca6155a95", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "243ce18ee1cc9254b06f08b1daabab26f5482b73", "commitAfterChange": "458bcbee379dfb34f66950599f33a1b4c4859348", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 190, "signatureBeforeChange": " void insertBlockSelectionText(String text, int action)", "signatureAfterChange": " void insertBlockSelectionText(String text, int action)", "diff": ["+\tif (text.length() == 1) {", "+\t\tchar key = text.charAt(0);", "+\t\tif (key == SWT.CR || key == SWT.LF) return;", "+\t}", "-\tint start = 0;", "-\tint end = 0;", "-\tStringBuffer buffer = new StringBuffer(); ", "+\tint[] trailing = new int[1];", "+\tint offset = 0, delta = 0;", "-\t\t//TODO BAD DOESN'T HANDLE BIDI", "-\t\tint lineStart = getOffsetAtPoint(left, 0, lineIndex);", "-\t\tint lineEnd = getOffsetAtPoint(right, 0, lineIndex);", "-\t\tswitch (action) {", "-\t\t\tcase ST.DELETE_PREVIOUS: {", "-\t\t\t\tif (lineStart == lineEnd && lineStart > lineOffset) {", "-\t\t\t\t\tif (getOffsetAtPoint(left, getLinePixel(lineIndex), null, true) != -1) {", "-\t\t\t\t\t\tlineStart = getClusterPrevious(lineStart, lineIndex);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase ST.DELETE_NEXT: {", "-\t\t\t\tif (lineStart == lineEnd && lineEnd < lineOffset + line.length()) {", "-\t\t\t\t\tlineEnd = getClusterNext(lineEnd, lineIndex);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\tint lineEndOffset = lineOffset + line.length();", "+\t\tint linePixel = getLinePixel(lineIndex);", "+\t\tint start = getOffsetAtPoint(left, linePixel, trailing, true);", "+\t\tboolean outOfLine = start == -1;", "+\t\tif (outOfLine) {", "+\t\t\tstart = left < leftMargin ? lineOffset : lineEndOffset;", "+\t\t} else {", "+\t\t\tstart += trailing[0];", "+\t\t}", "+\t\tint end = getOffsetAtPoint(right, linePixel, trailing, true);", "+\t\tif (end == -1) {", "+\t\t\tend = right < leftMargin ? lineOffset : lineEndOffset; ", "+\t\t} else {", "+\t\t\tend += trailing[0];", "+\t\t}", "+\t\tif (start == end && !outOfLine) {", "+\t\t\tswitch (action) {", "+\t\t\t\tcase ST.DELETE_PREVIOUS: ", "+\t\t\t\t\tif (start > lineOffset) start = getClusterPrevious(start, lineIndex);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ST.DELETE_NEXT: ", "+\t\t\t\t\tif (end < lineEndOffset) end = getClusterNext(end, lineIndex);", "+\t\t\t\t\tbreak;", "-\t\tif (lineIndex == firstLine) start = lineStart;", "-\t\tif (lineIndex == lastLine) end = lineEnd;", "-\t\tif (lineIndex != firstLine) {", "-\t\t\tbuffer.append(line.substring(0, lineStart - lineOffset));", "+\t\tif (outOfLine) {", "+\t\t\tif (line.length() > delta) {", "+\t\t\t\tdelta = line.length();", "+\t\t\t\toffset = lineEndOffset + text.length();", "+\t\t\t}", "+\t\t} else {", "+\t\t\toffset = start + text.length();", "+\t\t\tdelta = content.getCharCount();", "-\t\tbuffer.append(text);", "-\t\tif (lineIndex != lastLine) {", "-\t\t\tbuffer.append(line.substring(lineEnd - lineOffset));", "-\t\t\tbuffer.append(content.getLineDelimiter());", "-\t\t}", "+\t\tEvent event = new Event();", "+\t\tevent.text = text;", "+\t\tevent.start = start;", "+\t\tevent.end = end;", "+\t\tsendKeyEvent(event);", "-\tEvent event = new Event();", "-\tevent.text = buffer.toString();", "-\tevent.start = start;", "-\tevent.end = end;", "-\tsendKeyEvent(event);", "-", "-\tint x = getPointAtOffset(caretOffset).x;", "+\tint x = getPointAtOffset(offset).x;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3336c19bebd7b4d41864f3a4214b55d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2c188166c8edeeffa96cf155df849af797217517", "commitAfterChange": "1600566572476d9a59d55b12b53edda457f44a52", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "  void setKeyState(Event event, PhKeyEvent_t ke)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, PhKeyEvent_t ke)", "diff": ["-", "-void setKeyState(Event event, PhKeyEvent_t ke) {", "-\t/*", "-\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl", "-\t* or Alt is pressed. The fix is to detect this case and try to", "-\t* use the key_cap value.", "-\t*/", "-\tint key = 0;", "-\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) != 0) {", "-\t\t key = ke.key_sym;", "-\t} else if ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "-\t\tif ((ke.key_flags & (OS.Pk_KF_Key_Down | OS.Pk_KF_Key_Repeat)) != 0) {", "-\t\t\tkey = ke.key_cap;", "-\t\t\tif ((ke.key_mods & OS.Pk_KM_Ctrl) != 0) {", "-\t\t\t\tif ('a'  <= key && key <= 'z') key -= 'a' - 'A';", "-\t\t\t\tif (64 <= key && key <= 95) key -= 64;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tevent.keyCode = Display.translateKey (key);", "-\tswitch (key) {", "-\t\tcase OS.Pk_BackSpace:\tevent.character = '\\b'; break;", "-\t\tcase OS.Pk_Linefeed:\tevent.character = '\\n'; break;", "-\t\tcase OS.Pk_Return: \tevent.character = '\\r'; break;", "-\t\tcase OS.Pk_Delete:\t\tevent.character = 0x7F; break;", "-\t\tcase OS.Pk_Cancel:", "-\t\tcase OS.Pk_Escape:\t\tevent.character = 0x1B; break;", "-\t\tcase OS.Pk_KP_Tab:", "-\t\tcase OS.Pk_Tab: \t\tevent.character = '\\t'; break;", "-\t\t/* These keys have no mapping in SWT yet */", "-\t\tcase OS.Pk_Clear:", "-\t\tcase OS.Pk_Pause:", "-\t\tcase OS.Pk_Print:", "-\t\tcase OS.Pk_Menu:", "-\t\tcase OS.Pk_Hyper_L:", "-\t\tcase OS.Pk_Hyper_R:", "-\t\tcase OS.Pk_Caps_Lock:", "-\t\tcase OS.Pk_Num_Lock:", "-\t\tcase OS.Pk_Scroll_Lock:\tbreak;", "-\t\tdefault:", "-\t\t\tif (event.keyCode == 0 && key != 0) {", "-\t\t\t\tevent.character = (char) key;", "-\t\t\t\tif ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "-\t\t\t\t\tevent.keyCode = ke.key_cap;", "-\t\t\t\t}", "-\t\t\t}", "-\t}", "-\tsetInputState(event, ke.key_mods, ke.button_state);", "-\tswitch (event.type) {", "+boolean setKeyState (Event event, int type, PhKeyEvent_t ke) {", "+\tboolean isNull = false;", "+\t/*", "+\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl", "+\t* or Alt is pressed. The fix is to detect this case and try to", "+\t* use the key_cap value.", "+\t*/", "+\tint key = 0;", "+\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) != 0) {", "+\t\tevent.keyCode = Display.translateKey (key = ke.key_sym);", "+\t} else if ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "+\t\tevent.keyCode = Display.translateKey (key = ke.key_cap);", "+\t}", "+\tswitch (key) {", "+\t\tcase OS.Pk_BackSpace:\t\tevent.character = '\\b'; break;", "+\t\tcase OS.Pk_Linefeed:\t\tevent.character = '\\n'; break;", "+\t\tcase OS.Pk_KP_Enter:", "+\t\tcase OS.Pk_Return: \t\tevent.character = '\\r'; break;", "+\t\tcase OS.Pk_Delete:\t\tevent.character = 0x7F; break;", "+\t\tcase OS.Pk_Cancel:", "+\t\tcase OS.Pk_Escape:\t\tevent.character = 0x1B; break;", "+\t\tcase OS.Pk_KP_Tab:", "+\t\tcase OS.Pk_Tab: \tevent.character = '\\t'; break;", "+\t\t/* These keys have no mapping in SWT yet */", "+\t\tcase OS.Pk_Break:", "+\t\tcase OS.Pk_Clear:", "+\t\tcase OS.Pk_Pause:", "+\t\tcase OS.Pk_Print:", "+\t\tcase OS.Pk_Menu:", "+\t\tcase OS.Pk_Help:", "+\t\tcase OS.Pk_Hyper_L:", "+\t\tcase OS.Pk_Hyper_R:", "+\t\tcase OS.Pk_Caps_Lock:", "+\t\tcase OS.Pk_Num_Lock:", "+\t\tcase OS.Pk_Scroll_Lock:\tbreak;", "+\t\tdefault: {", "+\t\t\tif (event.keyCode == 0) {", "+\t\t\t\tif ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "+\t\t\t\t\tevent.keyCode = ke.key_cap;", "+\t\t\t\t}", "+\t\t\t\tif ((ke.key_mods & (OS.Pk_KM_Alt | OS.Pk_KM_Ctrl)) != 0) {", "+\t\t\t\t\tif ((ke.key_mods & OS.Pk_KM_Ctrl) != 0) {", "+\t\t\t\t\t\tisNull = key == '@';", "+\t\t\t\t\t\tif ('a' <= key && key <= 'z') key -= 'a' - 'A';", "+\t\t\t\t\t\tif (64 <= key && key <= 95) key -= 64;", "+\t\t\t\t\t\tevent.character = (char) key;", "+\t\t\t\t\t\tisNull &= key == 0;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tevent.character = (char) key;\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tbyte [] buffer = new byte [6];", "+\t\t\t\t\tint length = OS.PhKeyToMb (buffer, ke);", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tchar [] unicode = Converter.mbcsToWcs (null, buffer);", "+\t\t\t\t\t\tif (unicode.length > 0) event.character = unicode [0];", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (event.keyCode == 0 && event.character == 0) {", "+\t\tif (!isNull) return false;", "+\t}", "+\treturn setInputState (event, type, ke.key_mods, ke.button_state);", "+}"]}], "num": 32089}
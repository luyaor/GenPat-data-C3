{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a21cda3d83dc11a85e4b823aebddede7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1fa826f784f5b7aaea88be198a65b6f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "ef99308454376741558f5c126ed26e1e2ef85341", "commitAfterChange": "1ed6e017318ca3de09b2840c45fb2e4dc1dfd857", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  int menuPositionProc (int menu, int x, int y, int push_in, int user_data)", "signatureAfterChange": "  int menuPositionProc (int menu, int x, int y, int push_in, int user_data)", "diff": ["-\tif (x != 0) OS.memmove (x, new int [] {this.x}, 4);", "-\tif (y != 0) OS.memmove (y, new int [] {this.y}, 4);", "+\t/*", "+\t* Feature in GTK.  The menu position function sets the position of the", "+\t* top-left pixel of the menu.  If the menu would be off-screen, GTK will", "+\t* add a scroll arrow at the bottom and position the first menu entry at", "+\t* the specified position.  The fix is to flip the menu location to be", "+\t* completely inside the screen.", "+\t*/", "+    GtkRequisition requisition = new GtkRequisition ();", "+    OS.gtk_widget_size_request (menu, requisition);", "+    int screenHeight = OS.gdk_screen_height ();", "+\tint reqy = this.y;", "+\tif (reqy + requisition.height > screenHeight && reqy - requisition.height >= 0) {", "+    \treqy -= requisition.height;", "+    }", "+    int screenWidth = OS.gdk_screen_width ();", "+\tint reqx = this.x;", "+    if ((style & SWT.RIGHT_TO_LEFT) != 0) {", "+    \tif (reqx - requisition.width >= 0) reqx -= requisition.width;", "+    } else {", "+    \tif (reqx + requisition.width > screenWidth) reqx -= requisition.width;", "+    }", "+\tif (x != 0) OS.memmove (x, new int [] {reqx}, 4);", "+\tif (y != 0) OS.memmove (y, new int [] {reqy}, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e289c2e609480d3797f051ba40a3a8a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "1b4bf2560a13cbe7bbaefe761d35208d64534690", "commitAfterChange": "4dfb9b2e7115a7b57c3f5b8a9e47ea812d940f92", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  LRESULT CDDS_ITEMPREPAINT (NMLVCUSTOMDRAW nmcd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_ITEMPREPAINT (NMLVCUSTOMDRAW nmcd, int wParam, int lParam)", "diff": ["+", "+\t/*", "+\t* Bug in Windows.  When the table has the extended style", "+\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t* CLR_NONE to make the table transparent, Windows fills", "+\t* a black rectangle around any column that contains an", "+\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "+\t* custom draw.", "+\t* ", "+\t* NOTE: It is also necessary to clear CDIS_FOCUS to stop", "+\t* the table from drawing the focus rectangle around the", "+\t* first item instead of the full row.", "+\t*/", "+\tif (!ignoreCustomDraw) {", "+\t\tif (OS.IsWindowVisible (handle) && OS.IsWindowEnabled (handle)) {", "+\t\t\tif (!explorerTheme && (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "+\t\t\t\t\tint dwExStyle = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\t\t\t\tif ((dwExStyle & OS.LVS_EX_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) {", "+\t\t\t\t\t\t\tnmcd.uItemState &= ~OS.CDIS_FOCUS;", "+\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 29760}
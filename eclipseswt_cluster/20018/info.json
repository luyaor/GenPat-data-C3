{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0579d1cadd9f0389242d6f0711640e0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbf063afc5c91f3878daaf759c9986db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tint handleCompareCallback(int item1ID, int item2ID, int item)", "signatureAfterChange": "  void showIndex (int index)", "diff": ["+", "+void showIndex (int index) {", "+\tif (0 <= index && index < itemCount) {", "+\t\tshort [] width = new short [1];", "+\t\tOS.GetDataBrowserTableViewNamedColumnWidth (handle, COLUMN_ID, width);", "+\t\tRect rect = new Rect (), inset = new Rect ();", "+\t\tOS.GetControlBounds (handle, rect);", "+\t\tOS.GetDataBrowserScrollBarInset (handle, inset);", "+\t\tOS.SetDataBrowserTableViewNamedColumnWidth (handle, COLUMN_ID, (short)(rect.right - rect.left - inset.left - inset.right));", "+\t\tOS.RevealDataBrowserItem (handle, index + 1, COLUMN_ID, (byte) OS.kDataBrowserRevealWithoutSelecting);", "+\t\tOS.SetDataBrowserTableViewNamedColumnWidth (handle, COLUMN_ID, (short)width [0]);", "+\t}", "+}", "-", "-\tint handleCompareCallback(int item1ID, int item2ID, int item) {", "-\t\tif (getIndex(item1ID) < getIndex(item2ID))", "-\t\t\treturn 1;", "-\t\treturn 0;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b2427fc19500c8dff50e2ef39083ed6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "8541d666faa16632c6d0a6e1bdf5d08e945f9942", "commitAfterChange": "3b96b6ce94a7eb22d7c0dac94263ef2546a9824c", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["+\t\tcase OS.TBN_HOTITEMCHANGE:", "+\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\tNMTBHOTITEM lpnmhi = new NMTBHOTITEM ();", "+\t\t\t\tOS.MoveMemory (lpnmhi, lParam, NMTBHOTITEM.sizeof);", "+\t\t\t\tswitch (lpnmhi.dwFlags) {", "+\t\t\t\t\tcase OS.HICF_ARROWKEYS:", "+\t\t\t        \tRECT client = new RECT ();", "+\t\t\t        \tOS.GetClientRect (handle, client);", "+\t\t\t        \tint index = OS.SendMessage (handle, OS.TB_COMMANDTOINDEX, lpnmhi.idNew, 0);", "+\t\t\t        \tRECT rect = new RECT ();", "+\t\t\t        \tOS.SendMessage (handle, OS.TB_GETITEMRECT, index, rect);", "+\t\t\t            if (rect.left >= client.right || rect.top >= client.bottom) {", "+\t\t                \treturn LRESULT.ONE;", "+\t\t                }", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c38eaee57de415e4b8cba8c39046d7aa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "f13bd9400fedc174bad61b02e297f54dcefc8695", "commitAfterChange": "dc7272eeeee95074eb6b23ed3ac3ab956c23492c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["+\tCallback selectCallback = null;\r", "+\tif ((style & SWT.MULTI) != 0) {\r", "+\t\tchild = OS.XmFileSelectionBoxGetChild (dialog, OS.XmDIALOG_LIST);\r", "+\t\tif (child != 0) {\r", "+\t\t\tint [] argList2 = {OS.XmNselectionPolicy, OS.XmEXTENDED_SELECT};\r", "+\t\t\tOS.XtSetValues(child, argList2, argList2.length / 2);\r", "+\t\t\tselectCallback = new Callback (this, \"itemSelected\", 3);\r", "+\t\t\tint selectAddress = selectCallback.getAddress ();\r", "+\t\t\tif (selectAddress == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);\r", "+\t\t\tOS.XtAddCallback (child, OS.XmNextendedSelectionCallback, selectAddress, 0);\r", "+\t\t}\r", "+\t}\r", "+\tif (selectCallback != null) selectCallback.dispose ();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de642ef6c9f33be6de864df21af68b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "2a33fc690cf4367a5231c0edfbd3e0d3998c5f14", "commitAfterChange": "68864ed7c9ad64ce59d0a80b5122e67a238d21ef", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t//FIXME - hardcoded and wrong for SIMPLE", "-\treturn new Point (50, 20);", "+\tint width = OS.GTK_WIDGET_WIDTH (fixedHandle);", "+\tint height = OS.GTK_WIDGET_HEIGHT (fixedHandle);", "+\tOS.gtk_widget_set_size_request (handle, wHint, hHint);", "+\tGtkRequisition requisition = new GtkRequisition ();", "+\tOS.gtk_widget_size_request (handle, requisition);", "+\tOS.gtk_widget_set_size_request (handle, width, height);", "+\twidth = wHint == SWT.DEFAULT ? requisition.width : wHint;", "+\theight = hHint == SWT.DEFAULT ? requisition.height : hHint;", "+\treturn new Point (width, height);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca3e00812c8391549bef7c426d514bcc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "40cc64959d5119bf3b04b67587b8994ada23e8e0", "commitAfterChange": "02b99d3aa6b86917194c42b95e6fbca04ab77b6a", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  LRESULT wmCommandChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmCommandChild (int wParam, int lParam)", "diff": ["-\t\t\tstyle &= ~SWT.RIGHT_TO_LEFT;", "-\t\t\tstyle |= SWT.LEFT_TO_RIGHT;", "-\t\t\tfixAlignment ();", "-\t\t\tbreak;", "-\t\t\tstyle &= ~SWT.LEFT_TO_RIGHT;", "-\t\t\tstyle |= SWT.RIGHT_TO_LEFT;", "-\t\t\tfixAlignment ();", "+\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_EXSTYLE);", "+\t\t\tif ((bits & OS.WS_EX_RTLREADING) != 0) {", "+\t\t\t\tstyle &= ~SWT.LEFT_TO_RIGHT;", "+\t\t\t\tstyle |= SWT.RIGHT_TO_LEFT;", "+\t\t\t} else {", "+\t\t\t\tstyle &= ~SWT.RIGHT_TO_LEFT;", "+\t\t\t\tstyle |= SWT.LEFT_TO_RIGHT;", "+\t\t\t}", "+\t\t\tEvent event = new Event();", "+\t\t\tevent.doit = true;", "+\t\t\tsendEvent(SWT.OrientationChange, event);", "+\t\t\tif (!event.doit) {", "+\t\t\t\tif (code == OS.EN_ALIGN_LTR_EC) {", "+\t\t\t\t\tbits |= (OS.WS_EX_RTLREADING | OS.WS_EX_LEFTSCROLLBAR);", "+\t\t\t\t\tstyle &= ~SWT.LEFT_TO_RIGHT;", "+\t\t\t\t\tstyle |= SWT.RIGHT_TO_LEFT;", "+\t\t\t\t} else {", "+\t\t\t\t\tbits &= ~(OS.WS_EX_RTLREADING | OS.WS_EX_LEFTSCROLLBAR);", "+\t\t\t\t\tstyle &= ~SWT.RIGHT_TO_LEFT;", "+\t\t\t\t\tstyle |= SWT.LEFT_TO_RIGHT;", "+\t\t\t\t}\t", "+\t\t\t\tOS.SetWindowLong (handle, OS.GWL_EXSTYLE, bits);", "+\t\t\t}", "+\t\t\tfixAlignment();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4135be00a9ebf79fcc46a18919c41af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "03027a31c0afeb7417020be3236f5f6dcb1a04f0", "commitAfterChange": "9355cf7d15370368d311f8805b38484ac393e2c1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["+\tif (rectangles == null) return false;", "+\t", "+\t// if exactly one of UP/DOWN is specified as a style then set the cursor", "+\t// orientation accordingly (the same is done for LEFT/RIGHT styles below)", "+\tint vStyle = style & (SWT.UP | SWT.DOWN);", "+\tif (vStyle == SWT.UP || vStyle == SWT.DOWN) {", "+\t\tcursorOrientation |= vStyle;", "+\t}", "+\tint hStyle = style & (SWT.LEFT | SWT.RIGHT);", "+\tif (hStyle == SWT.LEFT || hStyle == SWT.RIGHT) {", "+\t\tcursorOrientation |= hStyle;", "+\t}", "-\t\t\t\t\tfor (int i=0; i<rectangles.length; i++) {", "-\t\t\t\t\t\trectangles [i].x += newX [0] - oldX [0];", "-\t\t\t\t\t\trectangles [i].y += newY [0] - oldY [0];", "+\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\tevent.x = newX [0];", "+\t\t\t\t\tevent.y = newY [0];", "+\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\t\t\t\tresizeRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "+\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * The following is intentionally commented.  Since gtk does not currently", "+\t\t\t\t\t\t * support pointer warping, the resize cursor cannot be adjusted.  If this", "+\t\t\t\t\t\t * capability is added in the future then the following should be uncommented,", "+\t\t\t\t\t\t * and the #adjustResizeCursor method can be copied from another platform.", "+\t\t\t\t\t\t */", "+//\t\t\t\t\t\tPoint cursorPos = adjustResizeCursor ();", "+//\t\t\t\t\t\tnewX [0] = cursorPos.x; newY [0] = cursorPos.y;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tmoveRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "+\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\tEvent event = new Event();", "-\t\t\t\t\tevent.x = newX[0];", "-\t\t\t\t\tevent.y = newY[0];", "-\t\t\t\t\tsendEvent (SWT.Move,event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a6bf1c8ce20fccd3ce0595b7f41db8d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "e477a4358e3d45070bae31c4dbb6a267e439c2a4", "commitAfterChange": "22ef6cb2f9d6090c9cecda0b3ee039cf6ee05768", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": " int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "signatureAfterChange": " int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\tevent.x = xEvent.x;  event.y = xEvent.y;", "-\tevent.width = xEvent.width;  event.height = xEvent.height;", "-\tGC gc = event.gc = new GC (this);", "-\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\tevent.x = xEvent.x;", "+\tevent.y = xEvent.y;", "+\tevent.width = xEvent.width;", "+\tevent.height = xEvent.height;", "+\tXRectangle rect = new XRectangle ();", "+\trect.x = (short) xEvent.x;", "+\trect.y = (short) xEvent.y;", "+\trect.width = (short) xEvent.width;", "+\trect.height = (short) xEvent.height;", "+\tint damageRgn = OS.XCreateRegion ();", "+\tOS.XUnionRectWithRegion (rect, damageRgn, damageRgn);", "+\tGCData data = new GCData();", "+\tdata.damageRgn = damageRgn;", "+\tGC gc = event.gc = GC.motif_new(this, data);", "+\tOS.XSetRegion (xDisplay, gc.handle, damageRgn);", "-\tif (!gc.isDisposed ()) gc.dispose ();", "+\tgc.dispose ();", "+\tOS.XDestroyRegion(damageRgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aba7a791893fe84aa70d7d58d6854549", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "58ab6a3c00d065b9bd6a4cde0ca6baf8963a046c", "commitAfterChange": "f564bd037598f91bb0461e06e04daebaf1d4b1ae", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void setImage (Image image)", "signatureAfterChange": " public void setImage (Image image)", "diff": ["+\t", "+\tif (image != null) {", "+\t\tif ((style & (SWT.PUSH | SWT.TOGGLE)) != 0 && (style & SWT.FLAT) == 0) {", "+\t\t\tNSSize size = ((NSButton)view).cell().cellSize ();", "+\t\t\tint height = (int)Math.ceil(size.height);", "+\t\t\tNSCell cell = ((NSControl)view).cell();", "+\t\t\tif (height > SMALL_BUTTON_HEIGHT) {", "+\t\t\t\tcell.setControlSize(OS.NSRegularControlSize);", "+\t\t\t} else if (display.smallFonts){", "+\t\t\t\tcell.setControlSize(OS.NSSmallControlSize);", "+\t\t\t}", "+\t\t\tsetFont(getFont());", "+\t\t}", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f55f8a3754f6c217a47df8237724cd02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": " public int getLineHeight ()", "signatureAfterChange": " public int getLineHeight ()", "diff": ["+\tif (txnObject == 0) {", "+\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, new char[]{' '}, 1);", "+\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\tif (font == null) {", "+\t\t\tOS.GetThemeTextDimensions (ptr, (short) defaultThemeFont (), OS.kThemeStateActive, false, ioBounds, null);", "+\t\t} else {", "+\t\t\tint [] currentPort = new int [1];", "+\t\t\tOS.GetPort (currentPort);", "+\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\t\tOS.TextFont (font.id);", "+\t\t\tOS.TextFace (font.style);", "+\t\t\tOS.TextSize (font.size);", "+\t\t\tOS.GetThemeTextDimensions (ptr, (short) OS.kThemeCurrentPortFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t\tOS.SetPort (currentPort [0]);", "+\t\t}", "+\t\tOS.CFRelease (ptr);", "+\t\treturn ioBounds.v;", "+\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e76c2886e42e7c1d2c35ac3ca72d44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "aa08691f44f22c6dea2bd85fbb46dbadce200746", "commitAfterChange": "ff9f806f42a55a052cb1c034387c017803f7b17a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r void extractValues()", "signatureAfterChange": "\r \r int okPressed (int widget, int client, int call)", "diff": ["-}\r", "-void extractValues() {\r", "-\tfilterPath = fullPath = \"\";\r", "-\tint [] argList = {OS.XmNdirectory, 0, OS.XmNdirSpec, 0};\r", "-\tOS.XtGetValues (dialog, argList, argList.length / 2);\r", "-\t\r", "-\tint xmString1 = argList [1];\r", "-\tint ptr = OS.XmStringUnparse (\r", "-\t\txmString1,\r", "-\t\tnull,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tnull,\r", "-\t\t0,\r", "-\t\tOS.XmOUTPUT_ALL);\r", "-\tif (ptr != 0) {\r", "-\t\tint length = OS.strlen (ptr);\r", "-\t\tbyte [] buffer = new byte [length];\r", "-\t\tOS.memmove (buffer, ptr, length);\r", "-\t\tOS.XtFree (ptr);\r", "-\t\t/* Use the character encoding for the default locale */\r", "-\t\tfilterPath = new String (Converter.mbcsToWcs (null, buffer));\r", "-\t}\r", "-\tOS.XmStringFree (xmString1);\r", "-\tif (filterPath.endsWith(\"/\")) {\r", "-\t\tfilterPath = filterPath.substring (0, filterPath.length() - 1);\r", "-\t}\r", "-\t\r", "-\tint xmString2 = argList [3];\r", "-\tptr = OS.XmStringUnparse (\r", "-\t\txmString2,\r", "-\t\tnull,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tnull,\r", "-\t\t0,\r", "-\t\tOS.XmOUTPUT_ALL);\r", "-\tif (ptr != 0) {\r", "-\t\tint length = OS.strlen (ptr);\r", "-\t\tbyte [] buffer = new byte [length];\r", "-\t\tOS.memmove (buffer, ptr, length);\r", "-\t\tOS.XtFree (ptr);\r", "-\t\t/* Use the character encoding for the default locale */\r", "-\t\tfullPath = new String (Converter.mbcsToWcs (null, buffer)).trim();\r", "-\t}\r", "-\tOS.XmStringFree (xmString2);\r", "-\t\r", "-\tif ((style & SWT.MULTI) != 0) {\r", "-\t\tint fileList = OS.XmFileSelectionBoxGetChild (dialog, OS.XmDIALOG_LIST);\r", "-\t\tif (fileList == 0) return;\r", "-\t\tint [] argList2 = {OS.XmNselectedItems, 0, OS.XmNselectedItemCount, 0};\r", "-\t\tOS.XtGetValues (fileList, argList2, argList2.length / 2);\r", "-\t\tint items = argList2 [1], itemCount = argList2 [3];\r", "-\t\tint [] buffer1 = new int [1];\r", "-\t\tfileNames = new String [itemCount];\r", "-\t\tboolean match = false;\r", "-\t\tfor (int i = 0; i < itemCount; i++) {\r", "-\t\t\tOS.memmove (buffer1, items, 4);\r", "-\t\t\tptr = buffer1 [0];\r", "-\t\t\tint address = OS.XmStringUnparse (\r", "-\t\t\t\tptr,\r", "-\t\t\t\tnull,\r", "-\t\t\t\tOS.XmCHARSET_TEXT,\r", "-\t\t\t\tOS.XmCHARSET_TEXT,\r", "-\t\t\t\tnull,\r", "-\t\t\t\t0,\r", "-\t\t\t\tOS.XmOUTPUT_ALL);\r", "-\t\t\tif (address != 0) {\r", "-\t\t\t\tint length = OS.strlen (address);\r", "-\t\t\t\tbyte [] buffer = new byte [length];\r", "-\t\t\t\tOS.memmove (buffer, address, length);\r", "-\t\t\t\tOS.XtFree (address);\r", "-\t\t\t\t/* Use the character encoding for the default locale */\r", "-\t\t\t\tString fullFilename = new String (Converter.mbcsToWcs (null, buffer));\r", "-\t\t\t\tint index = fullFilename.lastIndexOf ('/');\r", "-\t\t\t\tfileNames [i] = fullFilename.substring (index + 1, fullFilename.length ());\r", "-\t\t\t\tif (fullFilename.equals (fullPath)) match = true;\r", "-\t\t\t}\r", "-\t\t\titems += 4;\r", "-\t\t}\r", "-\t\tif (match) {\r", "-\t\t\tfileName = fileNames [0];\r", "-\t\t} else {\r", "-\t\t\t/* The user has modified the text field such that it doesn't match any\r", "-\t\t\t * of the selected files, so use this value instead\r", "-\t\t\t */\r", "-\t\t\tint index = fullPath.lastIndexOf ('/');\r", "-\t\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "-\t\t\tfileNames = new String [] {fileName};\r", "-\t\t}\r", "-\t} else {\r", "-\t\tint index = fullPath.lastIndexOf ('/');\r", "-\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "-\t\tfileNames = new String [] {fileName};\r", "-\t}\r", "+\tString fullPath = null, fileName = null;\r", "+\tString [] fileNames = null;\r", "+\r", "+\tint [] argList = {OS.XmNdirSpec, 0, OS.XmNdirectory, 0};\r", "+\tOS.XtGetValues (dialog, argList, argList.length / 2);\r", "+\tint xmString1 = argList [1];\r", "+\tint ptr = OS.XmStringUnparse (\r", "+\t\txmString1,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\tif (ptr != 0) {\r", "+\t\tint length = OS.strlen (ptr);\r", "+\t\tbyte [] buffer = new byte [length];\r", "+\t\tOS.memmove (buffer, ptr, length);\r", "+\t\tOS.XtFree (ptr);\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tfullPath = new String (Converter.mbcsToWcs (null, buffer)).trim();\r", "+\tOS.XmStringFree (xmString1);\r", "+\tif ((style & SWT.MULTI) != 0) {\r", "+\t\tint fileList = OS.XmFileSelectionBoxGetChild (dialog, OS.XmDIALOG_LIST);\r", "+\t\tif (fileList == 0) return 0;\r", "+\t\tint [] argList2 = {OS.XmNselectedItems, 0, OS.XmNselectedItemCount, 0};\r", "+\t\tOS.XtGetValues (fileList, argList2, argList2.length / 2);\r", "+\t\tint items = argList2 [1], itemCount = argList2 [3];\r", "+\t\tint [] buffer1 = new int [1];\r", "+\t\tfileNames = new String [itemCount];\r", "+\t\tboolean match = false;\r", "+\t\tfor (int i = 0; i < itemCount; i++) {\r", "+\t\t\tOS.memmove (buffer1, items, 4);\r", "+\t\t\tptr = buffer1 [0];\r", "+\t\t\tint address = OS.XmStringUnparse (\r", "+\t\t\t\tptr,\r", "+\t\t\t\tnull,\r", "+\t\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\t\tnull,\r", "+\t\t\t\t0,\r", "+\t\t\t\tOS.XmOUTPUT_ALL);\r", "+\t\t\tif (address != 0) {\r", "+\t\t\t\tint length = OS.strlen (address);\r", "+\t\t\t\tbyte [] buffer = new byte [length];\r", "+\t\t\t\tOS.memmove (buffer, address, length);\r", "+\t\t\t\tOS.XtFree (address);\r", "+\t\t\t\t/* Use the character encoding for the default locale */\r", "+\t\t\t\tString fullFilename = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t\t\t\tint index = fullFilename.lastIndexOf ('/');\r", "+\t\t\t\tfileNames [i] = fullFilename.substring (index + 1, fullFilename.length ());\r", "+\t\t\t\tif (fullFilename.equals (fullPath)) match = true;\r", "+\t\t\t}\r", "+\t\t\titems += 4;\r", "+\t\t}\r", "+\t\tif (match) {\r", "+\t\t\tfileName = fileNames [0];\r", "+\t\t} else {\r", "+\t\t\t/* The user has modified the text field such that it doesn't match any\r", "+\t\t\t * of the selected files, so use this value instead\r", "+\t\t\t */\r", "+\t\t\tint index = fullPath.lastIndexOf ('/');\r", "+\t\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "+\t\t\tfileNames = new String [] {fileName};\r", "+\t\t}\r", "+\t} else {\r", "+\t\tint index = fullPath.lastIndexOf ('/');\r", "+\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "+\t\tfileNames = new String [] {fileName};\r", "+\t}\r", "+\r", "+\t// if no file selected then go into the current directory\r", "+\tif (fileName.equals(\"\")) {\r", "+\t\tint [] argList1 = {OS.XmNdirMask, 0};\r", "+\t\tOS.XtGetValues (dialog, argList1, argList1.length / 2);\r", "+\t\tint directoryHandle = argList1[1];\r", "+\t\tint [] argList2 = {OS.XmNpattern,directoryHandle};\r", "+\t\tOS.XtSetValues (dialog, argList2, argList2.length / 2);\r", "+\t\tOS.XmStringFree (directoryHandle);\r", "+\t\treturn 0;\r", "+\t}\t\t\r", "+\tint xmString2 = argList [3];\r", "+\tptr = OS.XmStringUnparse (\r", "+\t\txmString2,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\tif (ptr != 0) {\r", "+\t\tint length = OS.strlen (ptr);\r", "+\t\tbyte [] buffer = new byte [length];\r", "+\t\tOS.memmove (buffer, ptr, length);\r", "+\t\tOS.XtFree (ptr);\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tfilterPath = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t}\r", "+\tOS.XmStringFree (xmString2);\r", "+\tif (filterPath.endsWith(\"/\")) {\r", "+\t\tfilterPath = filterPath.substring (0, filterPath.length() - 1);\r", "+\t}\r", "+\r", "+\tthis.fullPath = fullPath;\r", "+\tthis.fileName = fileName;\r", "+\tthis.fileNames = fileNames;\r", "+\tOS.XtUnmanageChild (widget);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cb00b6e262201590a4f81199394bbf8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d6a36d8b7f3dd367aff8479d4445ce8e13db19a6", "commitAfterChange": "156b3671e8f8498d491d682297aab9ef33479ff6", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 71, "signatureBeforeChange": "  void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle)", "signatureAfterChange": "  void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle, int[] dashes)", "diff": ["-void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle) {", "+void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle, int[] dashes) {", "-\t\tif (width <= 1 && newWidth > 1) {", "+\t\tif (width <= 1 && (newWidth > 1 || lineStyle == OS.PS_USERSTYLE)) {", "-\t\tOS.GetObject(hPen, size, logPen);", "+\t\tif (size <= EXTLOGPEN.sizeof) {", "+\t\t\tOS.GetObject(hPen, size, logPen);", "+\t\t} else {", "+\t\t\tint hHeap = OS.GetProcessHeap();", "+\t\t\tint ptr = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, size);", "+\t\t\tOS.GetObject(hPen, size, ptr);", "+\t\t\tOS.MoveMemory(logPen, ptr, EXTLOGPEN.sizeof);", "+\t\t\tOS.HeapFree(hHeap, 0, ptr);", "+\t\t}", "-\t\tif ((style & OS.PS_STYLE_MASK) != lineStyle) {", "+\t\tif ((style & OS.PS_STYLE_MASK) != lineStyle || (style & OS.PS_STYLE_MASK) == OS.PS_USERSTYLE) {", "+\tif ((style & OS.PS_STYLE_MASK) != OS.PS_USERSTYLE) dashes = null;", "-\t* Feature in Windows.  Windows XP does not honour the line style", "-\t* for pens wider than 1 pixel created with CreatePen().  The fix", "+\t* Feature in Windows.  Windows does not honour line styles other then", "+\t* PS_SOLID for pens wider than 1 pixel created with CreatePen().  The fix", "-\tif (!OS.IsWinCE && (extPen || width > 1)) {", "+\tif (!OS.IsWinCE && (extPen || width > 1 || (style & OS.PS_STYLE_MASK) == OS.PS_USERSTYLE)) {", "-\t\tnewPen = OS.ExtCreatePen (style | OS.PS_GEOMETRIC, width, logBrush, 0, null);", "+\t\tnewPen = OS.ExtCreatePen (style | OS.PS_GEOMETRIC, width, logBrush, dashes != null ? dashes.length : 0, dashes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9d1862eb827e5cee99e1d5b2f79a3fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "0279ac89ad933bec67322b956321e83b2a1ac93a", "commitAfterChange": "dbc3f579c8454ac59e01ac2d56752eda0d58b6cd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  static int checkStyle (int style)", "signatureAfterChange": "  static int checkStyle (Composite parent, int style, boolean internal)", "diff": ["-static int checkStyle (int style) {", "+static int checkStyle (Composite parent, int style, boolean internal) {", "-\treturn style & ~(SWT.H_SCROLL | SWT.V_SCROLL);", "+\tint newStyle = style & ~(SWT.H_SCROLL | SWT.V_SCROLL);", "+\t", "+\t/*", "+\t * Only internal clients can create an NSToolbar-based ToolBar.", "+\t */", "+\tif (!internal && (newStyle & SWT.SMOOTH) != 0) {", "+\t\tnewStyle &= ~SWT.SMOOTH;", "+\t}", "+\t", "+\t/*", "+\t * A unified toolbar can only be parented to a Shell, and", "+\t * there can only be one unified toolbar per shell. If neither of these", "+\t * conditions hold, turn off the SMOOTH flag.", "+\t */", "+\tif ((style & SWT.SMOOTH) != 0) {", "+\t\tif (parent instanceof Shell) {", "+\t\t\tShell s = (Shell)parent;", "+\t\t\tif (s.window.toolbar() != null) newStyle &= ~SWT.SMOOTH;", "+\t\t} else {", "+\t\t\tnewStyle &= ~SWT.SMOOTH;", "+\t\t}", "+\t}", "+\t", "+\t/*", "+\t * Unified toolbar only supports a horizontal layout, and doesn't wrap.", "+\t */", "+\tif ((newStyle & SWT.SMOOTH) != 0) {", "+\t\tnewStyle &= ~(SWT.VERTICAL | SWT.WRAP); ", "+\t\tnewStyle |= SWT.HORIZONTAL;", "+\t}", "+\t", "+\treturn newStyle;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d94a6601a97236d65e5a63d5d3c7cc5f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "7f98faddc61f48e7c3c67e3cc4c766f7d207f260", "commitAfterChange": "6a70c67479eb26b2d748955d53c11f666234ce97", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 43, "signatureBeforeChange": " void shape (int hdc, StyleItem run)", "signatureAfterChange": " void shape (int hdc, StyleItem run)", "diff": ["+\tint[] buffer = new int[1];", "-\tint MAX_GLYPHS = chars.length * 2;", "-\tint[] pcGlyphs = new int[1];", "+\tint MAX_GLYPHS = (chars.length * 3 / 2) + 16;", "-\tif (run.psc == 0) run.psc = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, 4);", "-\t/*int hr = */OS.ScriptShape(hdc, run.psc, chars, chars.length, MAX_GLYPHS, run.analysis, pGlyphs, pClusters, psva, pcGlyphs);", "-//\tif (hr == E_OUTOFMEMORY) //TODO handle it", "-//\tif (hr == USP_E_SCRIPT_NOT_IN_FONT) //TODO handle it\t\t", "+\trun.psc = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, 4);", "+\tOS.ScriptShape(hdc, run.psc, chars, chars.length, MAX_GLYPHS, run.analysis, pGlyphs, pClusters, psva, buffer);", "+\t//TODO", "+//\tif (hr == E_OUTOFMEMORY)", "+//\tif (hr == USP_E_SCRIPT_NOT_IN_FONT)", "+\tdevice.addScriptCache(run.psc);", "-\trun.glyphCount = pcGlyphs[0];", "+\trun.glyphCount = buffer[0];", "+\tint[] abc = new int[3];", "+\tint pGoffsets = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, run.glyphCount * GOFFSET_SIZEOF);", "+\tint piAdvances = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, run.glyphCount * 4);", "+\tOS.ScriptPlace(hdc, run.psc, run.glyphs, run.glyphCount, run.visAttrs, run.analysis, piAdvances, pGoffsets, abc);", "+\tOS.ScriptCacheGetHeight(hdc, run.psc, buffer);", "+\trun.advances = piAdvances;", "+\trun.goffsets = pGoffsets;", "+\trun.width = abc[0] + abc[1] + abc[2];", "+\trun.height = buffer[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70468357901c9e4af096d283eff280cf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "ada390d7f7bab25f0f00a6be268d2fac0261a612", "commitAfterChange": "983c5f79217ad0d0e3a8deab1678de7a378defbd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\tif (COMCTL32_MAJOR < 6) {\r", "+\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t} else if (drawCount > 0) {\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t}\t\r", "+\t\t} else {\r", "+\t\t\t/*\r", "+\t\t\t* Feature in Windows.  In version 6.00 of COMCTL32.DLL,\r", "+\t\t\t* the rebar control uses WM_SETREDRAW as a flag to stop\r", "+\t\t\t* layout of the items.  This is a problem because we rely\r", "+\t\t\t* on the rebar to position the items to the determine the\r", "+\t\t\t* preferred height.  The fix is to temporarily turn redraw\r", "+\t\t\t* back on using WM_SETREDRAW so the control will layuout,\r", "+\t\t\t* then turn it off using the DefaultWindowProc () so that\r", "+\t\t\t* nothing will draw and then turn it back on.\r", "+\t\t\t*/\r", "+\t\t\tif (drawCount > 0 && COMCTL32_MAJOR >= 6) {\t\r", "+\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t}\r", "-\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\tOS.ValidateRect (handle, null);\r", "-\t\t}\t\t\r", "+\t\t\tif (COMCTL32_MAJOR < 6) {\r", "+\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t} else if (drawCount > 0) {\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t}\t\r", "+\t\t\tOS.ValidateRect (handle, null);\t\t\t\r", "+\t\t} else {\r", "+\t\t\t/* Feature in Windows.  Turn redraw back on. */\r", "+\t\t\tif (drawCount > 0 && COMCTL32_MAJOR >= 6) {\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25b1917c2af13f48713e3184b153c079", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a4b70b83f3e32ea68d97233ce18ec34e72f909f", "commitAfterChange": "301859a1f2628890a59796e61cd0500045ef9bd8", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  int gtk_delete_range (int widget, int iter1, int iter2)", "signatureAfterChange": "  int gtk_delete_range (int widget, int iter1, int iter2)", "diff": ["-\tbyte [] startIter =  new byte [ITER_SIZEOF];", "-\tbyte [] endIter =  new byte [ITER_SIZEOF];", "+\tbyte [] startIter = new byte [ITER_SIZEOF];", "+\tbyte [] endIter = new byte [ITER_SIZEOF];", "+\t\treturn 0;", "+\t}", "+\tif (newText.length () > 0) {", "+\t\tbyte [] buffer = Converter.wcsToMbcs (null, newText, false);", "+\t\tOS.g_signal_handlers_block_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, DELETE_RANGE);", "+\t\tOS.gtk_text_buffer_delete (bufferHandle, startIter, endIter);", "+\t\tOS.g_signal_handlers_unblock_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, DELETE_RANGE);", "+\t\tOS.g_signal_handlers_block_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, INSERT_TEXT);", "+\t\tOS.gtk_text_buffer_insert (bufferHandle, startIter, buffer, buffer.length);", "+\t\tOS.g_signal_handlers_unblock_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, INSERT_TEXT);", "+\t\tOS.g_signal_stop_emission_by_name (bufferHandle, OS.delete_range);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "502a2f09be12488eeb28ca1faca72299", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "e983d4a13eb008de83ecbad342d94b6462cebe78", "commitAfterChange": "314fe3eaa680cd637146bed36cfd41bc773b01ef", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int createStyle ()", "signatureAfterChange": "  int createStyle ()", "diff": ["-\t", "-\t/*", "-\t* This code is intentionaly commented, since it forces ATSUI to", "-\t* syntesize fonts.", "-\t*/ ", "-//\tint ptr = OS.NewPtr(16);", "-//\tOS.memcpy(ptr, new int[]{handle}, 4); ", "-//\tOS.memcpy(ptr + 4, new int[]{OS.X2Fix(size)}, 4);", "-//\tOS.memcpy(ptr + 8, new byte[]{(style & OS.bold) != 0 ? (byte)1 : 0}, 1); ", "-//\tOS.memcpy(ptr + 9, new byte[]{(style & OS.italic) != 0 ? (byte)1 : 0}, 1); ", "-//\tint[] tags = new int[]{OS.kATSUFontTag, OS.kATSUSizeTag, OS.kATSUQDBoldfaceTag, OS.kATSUQDItalicTag};", "-//\tint[] sizes = new int[]{4, 4, 1, 1};", "-//\tint[] values = new int[]{ptr, ptr + 4, ptr + 8, ptr + 9};", "-\tint ptr = OS.NewPtr(16);", "+\tint atsuStyle = buffer[0];", "+", "+\tshort[] realStyle = new short[1];", "+\tOS.FMGetFontFromFontFamilyInstance(id, style, buffer, realStyle);", "+\tboolean synthesize = style != realStyle[0];", "+\tint ptr = OS.NewPtr(8 + (synthesize ? 8 : 0));", "-\tint[] tags = new int[]{OS.kATSUFontTag, OS.kATSUSizeTag};", "-\tint[] sizes = new int[]{4, 4};", "-\tint[] values = new int[]{ptr, ptr + 4};", "-\tOS.ATSUSetAttributes(buffer[0], tags.length, tags, sizes, values);", "+\tint[] tags, sizes, values;", "+\tif (synthesize) {", "+\t\tOS.memcpy(ptr + 8, new byte[]{(style & OS.bold) != 0 ? (byte)1 : 0}, 1); ", "+\t\tOS.memcpy(ptr + 9, new byte[]{(style & OS.italic) != 0 ? (byte)1 : 0}, 1);", "+\t\ttags = new int[]{OS.kATSUFontTag, OS.kATSUSizeTag, OS.kATSUQDBoldfaceTag, OS.kATSUQDItalicTag};", "+\t\tsizes = new int[]{4, 4, 1, 1};", "+\t\tvalues = new int[]{ptr, ptr + 4, ptr + 8, ptr + 9};", "+\t} else {", "+\t\ttags = new int[]{OS.kATSUFontTag, OS.kATSUSizeTag};", "+\t\tsizes = new int[]{4, 4};", "+\t\tvalues = new int[]{ptr, ptr + 4};", "+\t}", "+\tOS.ATSUSetAttributes(atsuStyle, tags.length, tags, sizes, values);", "-\tOS.ATSUSetFontFeatures(buffer[0], types.length, types, selectors);", "-\treturn buffer [0];", "+\tOS.ATSUSetFontFeatures(atsuStyle, types.length, types, selectors);", "+\treturn atsuStyle;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0b8cf8c3a16724e47c4121a7052691c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "e7d3f96d2d9183741a56ad3af6b85eca3c65142d", "commitAfterChange": "b99e0e369a51571b12234356a1c0332a2bed35be", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-LRESULT WM_KEYDOWN (int /*long*/ wParam, int /*long*/ lParam) {", "-\tLRESULT result = super.WM_KEYDOWN (wParam, lParam);", "-\t* this key processing.", "-\t\t\tint location = -1;", "+\t", "+LRESULT WM_KEYDOWN (int /*long*/ wParam, int /*long*/ lParam) {", "+\tLRESULT result = super.WM_KEYDOWN (wParam, lParam);", "+\tif (result != null) return result;", "+\t/*", "+\t* Feature in Windows.  The Windows list box does not implement", "+\t* the control key interface for multi-select list boxes, making", "+\t* it inaccessible from the keyboard.  The fix is to implement", "+\t* the key processing.", "+\t*/", "+\tif (OS.GetKeyState (OS.VK_CONTROL) < 0 && OS.GetKeyState (OS.VK_SHIFT) >= 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.LBS_EXTENDEDSEL) != 0) {", "+\t\t\tint location = -1;", "+\t\t\tswitch ((int)/*64*/wParam) {", "+\t\t\t\tcase OS.VK_SPACE: {", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Ensure that the window proc does not process VK_SPACE", "+\t\t\t\t\t* so that it can be handled in WM_CHAR.  This allows the", "+\t\t\t\t\t* application to cancel an operation that is normally", "+\t\t\t\t\t* performed in WM_KEYDOWN from WM_CHAR.", "+\t\t\t\t\t*/", "+\t", "+\t/*", "+\t* Feature in Windows.  When the user changes focus using", "+\t* the keyboard, the focus indicator does not draw.  The", "+\t* fix is to update the UI state for the control whenever", "+\t* the focus indicator changes as a result of something", "+\t* the user types.", "+\t*/", "+\tint uiState = (int)/*64*/OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\tif ((uiState & OS.UISF_HIDEFOCUS) != 0) {", "+\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\tint /*long*/ code = callWindowProc (handle, OS.WM_KEYDOWN, wParam, lParam);", "+\t\tint newIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\tif (oldIndex != newIndex) {", "+\t\t\tOS.SendMessage (handle, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0);", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When the WM_CHANGEUISTATE is used", "+\t\t\t* to update the UI state for a list that has been", "+\t\t\t* selected using Shift+Arrow, the focus indicator", "+\t\t\t* has pixel corruption.  The fix is to redraw the", "+\t\t\t* focus item.", "+\t\t\t*/", "+\t\t\tRECT itemRect = new RECT ();", "+\t\t\tOS.SendMessage (handle, OS.LB_GETITEMRECT, newIndex, itemRect);", "+\t\t\tOS.InvalidateRect (handle, itemRect, true);", "+\t\t}", "+\t\treturn new LRESULT (code);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6dcddb7d1893738f89b34988fca478a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "cbdd91157986b85a261cf2dcb490e1e504e3a9d3", "commitAfterChange": "63f0ecd411e6ee67aae7ff248c6596d6542dd1a0", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  void setItemCount (TreeItem parentItem, int count)", "signatureAfterChange": "   void setItemCount (TreeItem parentItem, int count)", "diff": ["+", "+\tNSOutlineView widget = (NSOutlineView) view;", "+\tint length = Math.max (4, (count + 3) / 4 * 4);", "+\tboolean expanded = parentItem == null || parentItem.getExpanded();", "+\t\t/*", "+\t\t* Note that the item count has to be updated before the call to reloadItem(), but", "+\t\t* the items have to be released after.", "+\t\t*/", "+\t\tif (parentItem == null) {", "+\t\t\tthis.itemCount = count;", "+\t\t} else {", "+\t\t\tparentItem.itemCount = count;", "+\t\t}", "+\t\twidget.reloadItem (parentItem != null ? parentItem.handle : null, expanded);", "-\t}", "-\tif (count > itemCount) {", "-\t\tif ((getStyle() & SWT.VIRTUAL) == 0) {", "+\t\tTreeItem [] newItems = new TreeItem [length];", "+\t\tif (children != null) {", "+\t\t\tSystem.arraycopy (children, 0, newItems, 0, Math.min (count, itemCount));", "+\t\t}", "+\t\tchildren = newItems;", "+\t\tif (parentItem == null) {", "+\t\t\tthis.items = newItems;", "+\t\t} else {", "+\t\t\tparentItem.items = newItems;", "+\t\t}", "+\t} else {", "+\t\tif ((style & SWT.VIRTUAL) == 0) {", "-\t\t\treturn;", "-\t\t} ", "+\t\t} else {", "+\t\t\tTreeItem [] newItems = new TreeItem [length];", "+\t\t\tif (children != null) {", "+\t\t\t\tSystem.arraycopy (children, 0, newItems, 0, Math.min (count, itemCount));", "+\t\t\t}", "+\t\t\tchildren = newItems;", "+\t\t\tif (parentItem == null) {", "+\t\t\t\tthis.items = newItems;", "+\t\t\t\tthis.itemCount = count;", "+\t\t\t} else {", "+\t\t\t\tparentItem.items = newItems;", "+\t\t\t\tparentItem.itemCount = count;", "+\t\t\t}", "+\t\t\twidget.reloadItem (parentItem != null ? parentItem.handle : null, expanded);", "+\t\t}", "-\tint length = Math.max (4, (count + 3) / 4 * 4);", "-\tTreeItem [] newItems = new TreeItem [length];", "-\tif (children != null) {", "-\t\tSystem.arraycopy (children, 0, newItems, 0, Math.min (count, itemCount));", "-\t}", "-\tchildren = newItems;", "-\tif (parentItem == null) {", "-\t\tthis.items = newItems;", "-\t\tthis.itemCount = count;", "-\t} else {", "-\t\tparentItem.items = newItems;", "-\t\tparentItem.itemCount = count;", "-\t}", "-\tNSOutlineView widget = (NSOutlineView) view;", "-\twidget.reloadItem (parentItem != null ? parentItem.handle : null, true);", "-\twidget.noteNumberOfRowsChanged();", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a5d9e0bb770e8079d8f63bc5922a99", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "ac473adfcb9983f414d3da15b8b15f56fca50498", "commitAfterChange": "7171ce75440e1c2f381de2d9486e536f525ae21d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 28, "signatureBeforeChange": " public Rectangle computeTrim(int x, int y, int width, int height)", "signatureAfterChange": " public Rectangle computeTrim(int x, int y, int width, int height)", "diff": ["-\treturn new Rectangle(0,0,0,0);", "+\tcheckDevice();", "+\t//TODO: We are supposed to return this in pixels, but GTK_UNIT_PIXELS is currently not implemented (gtk bug 346245)", "+\tdouble printWidth = OS.gtk_page_setup_get_page_width(pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble printHeight = OS.gtk_page_setup_get_page_height(pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble paperWidth = OS.gtk_page_setup_get_paper_width (pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble paperHeight = OS.gtk_page_setup_get_paper_height (pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble printX = -OS.gtk_page_setup_get_left_margin(pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble printY = -OS.gtk_page_setup_get_top_margin(pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble hTrim = paperWidth - printWidth;", "+\tdouble vTrim = paperHeight - printHeight;", "+\treturn new Rectangle(x + (int)printX, y + (int)printY, width + (int)hTrim, height + (int)vTrim);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "222c9eea6acd2e92b89d87ffaf8a3036", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9ff9d9222d7fdb61c93507f2b2ab53ff9e4332fb", "commitAfterChange": "f72c857e9c5ef7f08cd69b3c2eb92b3aafb02d91", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 298, "signatureBeforeChange": " \tint get_locale(int pLocale)", "signatureAfterChange": " \tint get_locale(int pLocale)", "diff": ["-\t\t// TODO: just return current locale - maybe add AccessibleLocale later", "-\t\t// Note: need to return an IA2Locale struct: String language, String country, String variant", "-\t\t//COM.MoveMemory(pLocale, new int [] { locale }, 4);", "+\t\t/* Return the default locale for the JVM. */", "+\t\tLocale locale = Locale.getDefault();", "+\t\t", "+\t\tchar[] data = (locale.getLanguage()+\"\\0\").toCharArray();", "+\t\tint /*long*/ ptr = COM.SysAllocString(data);", "+\t\tCOM.MoveMemory(pLocale, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);", "+", "+\t\tdata = (locale.getCountry()+\"\\0\").toCharArray();", "+\t\tptr = COM.SysAllocString(data);", "+\t\tCOM.MoveMemory(pLocale + OS.PTR_SIZEOF, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);", "+", "+\t\tdata = (locale.getVariant()+\"\\0\").toCharArray();", "+\t\tptr = COM.SysAllocString(data);", "+\t\tCOM.MoveMemory(pLocale + 2 * OS.PTR_SIZEOF, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f103fdfa8f42c2c2764a431b05ad7129", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "dd11d932221c358c44e83cdb9ee36bc7594323b4", "commitAfterChange": "8b896c8f1d8f2340e6910ed5d99ab3f39a66e8c2", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " \t \tprivate int handleTooltipWindowCallback(int nextHandler, int eRefHandle, int whichWindow)", "signatureAfterChange": " \t \tprivate int handleTooltipWindowCallback(int nextHandler, int eRefHandle, int whichWindow)", "diff": ["-\t\tif (OS.GetEventClass(eRefHandle) != OS.kEventClassWindow", "-\t\t\t\t\t\t|| OS.GetEventKind(eRefHandle) != OS.kEventWindowDrawContent)", "-\t\t\treturn OS.eventNotHandledErr;", "-\t\tprocessPaintToolTip(whichWindow);", "-\t\treturn OS.noErr;", "+\t\t", "+\t\tint eventClass= OS.GetEventClass(eRefHandle);", "+\t\tint eventKind= OS.GetEventKind(eRefHandle);", "+", "+\t\tif (eventClass == OS.kEventClassWindow && eventKind == OS.kEventWindowDrawContent) {", "+\t\t\tRect bounds= new Rect();", "+\t\t\tOS.GetWindowBounds(whichWindow, (short)OS.kWindowContentRgn, bounds);", "+\t\t\tint width= bounds.right - bounds.left;", "+\t\t\tint height= bounds.bottom - bounds.top;", "+\t\t\tOS.SetRect(bounds, (short)0, (short)0, (short)width, (short)height);", "+\t\t\tMacUtil.RGBBackColor(COLOR_INFO_BACKGROUND.handle);", "+\t\t\tMacUtil.RGBForeColor(COLOR_INFO_FOREGROUND.handle);", "+\t\t\tOS.EraseRect(bounds);", "+\t\t\tif (fToolTipText != null) {", "+\t\t\t\tOS.SetRect(bounds, (short)TOOLTIP_MARGIN, (short)TOOLTIP_MARGIN, (short)(width-TOOLTIP_MARGIN), (short)(height-TOOLTIP_MARGIN));", "+\t\t\t\tint sHandle= OS.CFStringCreateWithCharacters(fToolTipText);", "+\t\t\t\tOS.DrawThemeTextBox(sHandle, fHoverThemeFont, OS.kThemeStateActive, true, bounds, (short)0, 0);", "+\t\t\t\tOS.CFRelease(sHandle);", "+\t\t\t}", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\treturn OS.eventNotHandledErr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399518c62a78d8c718452ad3343be553", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/wpf/org/eclipse/swt/dnd/ByteArrayTransfer.java", "commitBeforeChange": "8e746dffcecf23a840e3dfc0bae71b16f86cd38f", "commitAfterChange": "76097374ea0b9824b33cdc5c544b526a4229ae52", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": " protected void javaToNative (Object object, TransferData transferData)", "signatureAfterChange": " protected void javaToNative (Object object, TransferData transferData)", "diff": ["+ */", "+protected void javaToNative (Object object, TransferData transferData) {", "+\tif (!checkByteArray(object) || !isSupportedType(transferData)) {", "+\t\tDND.error(DND.ERROR_INVALID_DATA);", "+\t}", "+\tbyte[] buffer = (byte[])object;", "+\tif (buffer.length == 0) return;", "+\tint typeid = OS.Byte_typeid();", "+\tint pValue = OS.Array_CreateInstance(typeid, buffer.length);", "+\tOS.GCHandle_Free(typeid);", "+\tif (pValue == 0) return;", "+\tOS.memcpy(pValue, buffer, buffer.length);", "+\ttransferData.pValue = pValue;", "- */", "-protected void javaToNative (Object object, TransferData transferData) {", "-\t//TEMPORARY CODE FAIL WITHOUT EXCEPTION", "-\tif (!checkText(object)) return;", "-\t//if (!checkText(object)) DND.error(DND.ERROR_INVALID_DATA);", "-\t", "-\tif (isSupportedType(transferData)) {", "-\t\ttransferData.pValue = createDotNetString((String)object);", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d6b97e81226fab523f971a512898822", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "fe9cf8b69b05605c0699efe7aea722d3e2396198", "commitAfterChange": "a76fbcdb2bea80d2aa22d622558bd4081d9e971a", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["-\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "-\tint ptr = OS.malloc (buffer.length);", "-\tOS.memmove (ptr, buffer, buffer.length);", "+\tchar [] text = new char [string.length ()];", "+\tstring.getChars (0, text.length, text, 0);", "+\tchar mnemonic = fixMnemonic (text);", "+\tbyte [] buffer = Converter.wcsToMbcs (null, text, true);", "+\tint ptr1 = OS.malloc (buffer.length);", "+\tOS.memmove (ptr1, buffer, buffer.length);", "+\tint ptr2 = 0;", "+\tif (mnemonic != 0) {", "+\t\tbyte [] buffer2 = Converter.wcsToMbcs (null, new char []{mnemonic}, true);", "+\t\tptr2 = OS.malloc (buffer2.length);", "+\t\tOS.memmove (ptr2, buffer2, buffer2.length);", "+\t}", "+\treplaceMnemonic (mnemonic, true, true);", "-\t\tOS.Pt_ARG_TEXT_STRING, ptr, 0,", "+\t\tOS.Pt_ARG_TEXT_STRING, ptr1, 0,", "+\t\tOS.Pt_ARG_ACCEL_KEY, ptr2, 0,", "-\tif (ptr != 0) OS.free (ptr);", "+\tOS.free (ptr1);", "+\tOS.free (ptr2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "101e3c81a031679967c7c55ead0f39bf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "9589f5ace9834c0def730a259bf141a95bafa0fc", "commitAfterChange": "383a80433afc61cc886a8f79bd2505cc671c6501", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r public void setMenuBar (Menu menu)", "signatureAfterChange": "\r public void setMenuBar (Menu menu)", "diff": ["-\tif (OS.IsWinCE) {\r", "+\tif (OS.IsPPC) {\r", "+\t} else if (OS.IsHPC) {\r", "+\t\tboolean resize = menuBar != menu;\r", "+\t\tif (menuBar != null) {\r", "+\t\t\t/*\r", "+\t\t\t* Because CommandBar_Destroy destroys the menu bar, it\r", "+\t\t\t* is necessary to move the current items into a new menu\r", "+\t\t\t* before it is called.\r", "+\t\t\t*/\r", "+\t\t\tint hMenu = OS.CreateMenu ();\r", "+\t\t\tif (!moveMenu (menuBar.handle, hMenu)) {\r", "+\t\t\t\terror (SWT.ERROR_CANNOT_SET_MENU);\r", "+\t\t\t}\r", "+\t\t\tmenuBar.handle = hMenu;\r", "+\t\t\tif (hwndCB != 0) OS.CommandBar_Destroy (hwndCB);\r", "+\t\t\thwndCB = 0;\r", "+\t\t}\r", "+\t\tmenuBar = menu;\r", "+\t\tif (menuBar != null) {\t\t\r", "+\t\t\thwndCB = OS.CommandBar_Create (OS.GetModuleHandle (null), handle, 1);\r", "+\t\t\tOS.CommandBar_InsertMenubarEx (hwndCB, 0, menuBar.handle, 0);\r", "+\t\t}\r", "+\t\tif (resize) {\r", "+\t\t\tsendEvent (SWT.Resize);\r", "+\t\t\tlayout (false);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "138bdd571a408aaec8b63b7f2eaf6495", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "b7a00bf87c6bba490035767725a315da54b8693f", "commitAfterChange": "27a42a02f1d3398db6d0fbf73906bf95e2b7693c", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 86, "signatureBeforeChange": "  void redrawWidget (int control)", "signatureAfterChange": "  void redrawWidget (int control, int x, int y, int width, int height, boolean children)", "diff": ["-void redrawWidget (int control) {", "-\tredrawWidget (control, false);", "+void redrawWidget (int control, int x, int y, int width, int height, boolean children) {", "+\tif (!isDrawing (control)) return;", "+\tRect rect = new Rect ();", "+\tOS.GetControlBounds (control, rect);", "+\tx += rect.left;", "+\ty += rect.top;", "+\tOS.SetRect (rect, (short) x, (short) y, (short) (x + width), (short) (y + height));", "+\tint rectRgn = OS.NewRgn();", "+\tOS.RectRgn (rectRgn, rect);", "+\tint visibleRgn = getVisibleRegion (control, !children);", "+\tOS.SectRgn (rectRgn, visibleRgn, visibleRgn);", "+\tOS.InvalWindowRgn (window, visibleRgn);", "+\tOS.DisposeRgn (rectRgn);", "+\tOS.DisposeRgn (visibleRgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3882d244ea1b86170f9472b5cf24a326", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "b4e9295d7f4138e6d21a386a0555e03e19e23096", "commitAfterChange": "11bccded3c22e8e6857213e8db2ccad6f605ba46", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void destroyItem (TableColumn column)", "signatureAfterChange": "  void destroyItem (TableColumn column)", "diff": ["-\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex, ptr, -1);", "+\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex, ptr, -1); //image", "-\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 1, ptr, -1);", "+\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 1, ptr, -1); //text", "-\t\t\tOS.g_free ( (ptr [0]));", "+\t\t\tOS.g_free (ptr [0]);", "+\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 2, ptr, -1); //foreground", "+\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 2, ptr [0], -1);", "+\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 3, ptr, -1); //background", "+\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 3, ptr [0], -1);", "+\t\tcustomDraw = new boolean [] {customDraw [index]};", "-\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex, 0, -1);", "-\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 1, 0, -1);", "+\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex, 0, -1); //image", "+\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 1, 0, -1); //text", "+\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 2, 0, -1); //foreground", "+\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 3, 0, -1); //background", "+\t\tboolean [] temp = new boolean [columnCount];", "+\t\tSystem.arraycopy (customDraw, 0, temp, 0, index);", "+\t\tSystem.arraycopy (customDraw, index + 1, temp, index, columnCount - index);", "+\t\tcustomDraw = temp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "016eca1d459cabeac138eecdcd34eaee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "b77986de05bab33a2fe06d4668b09aa4be644a68", "commitAfterChange": "f109ee6a8829d09be16619e7bb1f4c3554d04344", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "  void printWidget (int hwnd, int hdc, GC gc)", "signatureAfterChange": "  void printWidget (int hwnd, int hdc, GC gc)", "diff": ["-\t\tint bits = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\tint bits1 = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\tint bits2 = OS.GetWindowLong (hwnd, OS.GWL_EXSTYLE);", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE | OS.SWP_DRAWFRAME;", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {", "-\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, (bits & ~OS.WS_CHILD) | OS.WS_POPUP);", "-\t\t\tOS.SetParent (hwnd, 0);", "-\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE;", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, (bits1 & ~OS.WS_CHILD) | OS.WS_POPUP);", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_EXSTYLE, bits2 | OS.WS_EX_TOOLWINDOW);", "+\t\t\t}", "+\t\t\tOS.SetParent (hwnd, 0);", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {", "-\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\tif ((bits1 & OS.WS_VISIBLE) == 0) {", "-\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\tif ((bits1 & OS.WS_VISIBLE) == 0) {", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {", "-\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, bits);", "+\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, bits1);", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_EXSTYLE, bits2);", "+\t\t\t}", "-\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOACTIVATE;", "-\t\t\tSetWindowPos (hwnd, hwndInsertAfter, rect1.left, rect1.top, 0, 0, flags);", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOACTIVATE | OS.SWP_DRAWFRAME;", "+\t\t\tSetWindowPos (hwnd, hwndInsertAfter, rect1.left, rect1.top, rect1.right - rect1.left, rect1.bottom - rect1.top, flags);", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "257a7aab46177090f0b932d415ad4bfb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "95bda0dfcfe322a7e1139fde5ddda6f0e1e756fd", "commitAfterChange": "856b7bca73d8f00eddc1ee12b39576510291716a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  NSAutoreleasePool checkGC (int mask)", "signatureAfterChange": "  NSAutoreleasePool checkGC (int mask)", "diff": ["-\t\t\tNSColor fg = data.fg = NSColor.colorWithCalibratedRed(color[0], color[1], color[2], data.alpha / 255f);", "+\t\t\tNSColor fg;", "+\t\t\tif (OS.VERSION < 0x1060)", "+\t\t\t\tfg = data.fg = NSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f);", "+\t\t\telse", "+\t\t\t\tfg = data.fg = NSColor.colorWithCalibratedRed(color[0], color[1], color[2], data.alpha / 255f);", "-\t\t\tNSColor fg = data.fg = NSColor.colorWithCalibratedRed(color[0], color[1], color[2], data.alpha / 255f);", "+\t\t\tNSColor fg;", "+\t\t\tif (OS.VERSION < 0x1060)", "+\t\t\t\tfg = data.fg = NSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f);", "+\t\t\telse", "+\t\t\t\tfg = data.fg = NSColor.colorWithCalibratedRed(color[0], color[1], color[2], data.alpha / 255f);", "-\t\t\tNSColor bg = data.bg = NSColor.colorWithCalibratedRed(color[0], color[1], color[2], data.alpha / 255f);", "+\t\t\tNSColor bg;", "+\t\t\tif (OS.VERSION < 0x1060)", "+\t\t\t\tbg = data.bg = NSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f);", "+\t\t\telse", "+\t\t\t\tbg = data.bg = NSColor.colorWithCalibratedRed(color[0], color[1], color[2], data.alpha / 255f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d5f0f9abf877dbe165c865a53986c6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "0172f28c9bd1d86280195f05b1ac396625198010", "commitAfterChange": "2cf6415a3cc0d64ad334b0b840a57e551ae633e5", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " public void setTopItem (TreeItem item)", "signatureAfterChange": " public void setTopItem (TreeItem item)", "diff": ["-\tboolean fixScroll = checkScroll (hItem);", "+\tint hTopItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);", "+\tif (hItem == hTopItem) return;", "+\tboolean fixScroll = checkScroll (hItem), redraw = false;", "+\tint hParent = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, hItem);", "+\t} else {", "+\t\tredraw = drawCount == 0 && OS.IsWindowVisible (handle);", "+\t\tif (redraw) OS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "+\tif (hParent == 0) OS.SendMessage (handle, OS.WM_HSCROLL, OS.SB_TOP, 0);", "+\t} else {", "+\t\tif (redraw) {", "+\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b737277f0ae1a97ef759bba35cbe56f5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "a5f3d896a0552e8d2027982eeac1d90aabbd97bd", "commitAfterChange": "5f219674e4013ab0586c58bc3022c5cddb01115b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  int eventProc (int event, int data)", "signatureAfterChange": "  int eventProc (int event, int data)", "diff": ["+\tboolean forward = false;", "+\tControl control = null;", "+\tint /*long*/ window = 0;", "+\t\tcase OS.GDK_ENTER_NOTIFY:", "+\t\tcase OS.GDK_LEAVE_NOTIFY:", "-\t\t\tControl control = null;", "-\t\t\tboolean forward = false;", "+\t\t\twindow = gdkEvent.window;", "-\t\t\tint /*long*/ window = gdkEvent.window;", "-\t\t\tif (control != null) {", "-\t\t\t\tif (window == 0) return 0;", "-\t\t\t\tif (forward) {", "-\t\t\t\t\tGdkEventButton gdkEventButton = new GdkEventButton ();", "-\t\t\t\t\tOS.memmove (gdkEventButton, event, GdkEventButton.sizeof);", "-\t\t\t\t\tint /*long*/ oldWindow = gdkEventButton.window;", "-\t\t\t\t\tdouble oldX = gdkEventButton.x, oldY = gdkEventButton.y;", "-\t\t\t\t\tint /*long*/ eventHandle = control.eventHandle ();", "-\t\t\t\t\tgdkEventButton.window = OS.GTK_WIDGET_WINDOW (eventHandle);", "-\t\t\t\t\tint [] origin_x = new int [1], origin_y = new int [1];", "-\t\t\t\t\tOS.gdk_window_get_origin (gdkEventButton.window, origin_x, origin_y);", "-\t\t\t\t\tgdkEventButton.x = gdkEventButton.x_root - origin_x [0];", "-\t\t\t\t\tgdkEventButton.y = gdkEventButton.y_root - origin_y [0];", "-\t\t\t\t\tOS.memmove (event, gdkEventButton, GdkEventButton.sizeof);", "-\t\t\t\t\tOS.gtk_main_do_event (event);", "-\t\t\t\t\tgdkEventButton.window = oldWindow;", "-\t\t\t\t\tgdkEventButton.x = oldX;", "-\t\t\t\t\tgdkEventButton.y = oldY;", "-\t\t\t\t\tOS.memmove (event, gdkEventButton, GdkEventButton.sizeof);", "+\t\t}", "+\t}", "+\tShell shell = null;", "+\tGdkEventButton gdkEventButton = null;", "+\tint /*long*/ oldWindow = 0;", "+\tdouble oldX = 0, oldY = 0;", "+\tif (control != null ) {", "+\t\tif (window == 0) return 0;", "+\t\tif (forward) {", "+\t\t\tswitch (gdkEvent.type) {", "+\t\t\t\tcase OS.GDK_ENTER_NOTIFY:", "+\t\t\t\tcase OS.GDK_LEAVE_NOTIFY:", "-\t\t\t\t}", "+\t\t\tgdkEventButton = new GdkEventButton ();", "+\t\t\tOS.memmove (gdkEventButton, event, GdkEventButton.sizeof);", "+\t\t\toldWindow = gdkEventButton.window;", "+\t\t\toldX = gdkEventButton.x;", "+\t\t\toldY = gdkEventButton.y;", "+\t\t\tint /*long*/ eventHandle = control.eventHandle ();", "+\t\t\tgdkEventButton.window = OS.GTK_WIDGET_WINDOW (eventHandle);", "+\t\t\tint [] origin_x = new int [1], origin_y = new int [1];", "+\t\t\tOS.gdk_window_get_origin (gdkEventButton.window, origin_x, origin_y);", "+\t\t\tgdkEventButton.x = gdkEventButton.x_root - origin_x [0];", "+\t\t\tgdkEventButton.y = gdkEventButton.y_root - origin_y [0];", "+\t\t\tOS.memmove (event, gdkEventButton, GdkEventButton.sizeof);", "+\t\t}", "+\t\tshell = control.getShell ();", "+\t\tif ((shell.style & SWT.ON_TOP) != 0) {", "+\t\t\tOS.gtk_grab_add (shell.shellHandle);", "+\tif (control != null ) {", "+\t\tif (shell != null && !shell.isDisposed () && (shell.style & SWT.ON_TOP) != 0) {", "+\t\t\tOS.gtk_grab_remove (shell.shellHandle);", "+\t\t}", "+\t\tif (forward) {", "+\t\t\tgdkEventButton.window = oldWindow;", "+\t\t\tgdkEventButton.x = oldX;", "+\t\t\tgdkEventButton.y = oldY;", "+\t\t\tOS.memmove (event, gdkEventButton, GdkEventButton.sizeof);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0333403a5b6f5b8d61942c4df806cc45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "28f2c95555bb2ed2b6c2a58fbef9c726a4ca8116", "commitAfterChange": "5782ed835cc34300c35de16696ca0fbe1e498ed9", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "signatureAfterChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["-\t\twidth = Math.max (1, width);", "-\t\theight = Math.max (1, height);", "-\t\tint oldWidth = OS.GTK_WIDGET_WIDTH (topHandle);", "-\t\tint oldHeight = OS.GTK_WIDGET_HEIGHT (topHandle);", "+\t\tint oldWidth = 0, oldHeight = 0;", "+\t\tif ((state & ZERO_SIZED) == 0) {", "+\t\t\toldWidth = OS.GTK_WIDGET_WIDTH (topHandle);", "+\t\t\toldHeight = OS.GTK_WIDGET_HEIGHT (topHandle);", "+\t\t}", "-\t\tif (!sameExtent) {", "+\t\tif (!sameExtent && !(width == 0 && height == 0)) {", "+\t\t\tint newWidth = Math.max (1, width);", "+\t\t\tint newHeight = Math.max (1, height);", "-\t\t\t\tOS.gdk_window_resize (redrawWindow, width, height);", "+\t\t\t\tOS.gdk_window_resize (redrawWindow, newWidth, newHeight);", "-\t\t\t\tOS.gdk_window_resize (enableWindow, width, height);", "+\t\t\t\tOS.gdk_window_resize (enableWindow, newWidth, newHeight);", "-\t\t\tresizeHandle (width, height);", "+\t\t\tresizeHandle (newWidth, newHeight);", "+\t}", "+\t/*", "+\t* Bug in GTK.  Widgets cannot be sized smaller than 1x1.", "+\t* The fix is to hide zero-sized widgets and show them again", "+\t* when they are resized larger.", "+\t*/", "+\tif (!sameExtent) {", "+\t\tif (width == 0 && height == 0) {", "+\t\t\tstate |= ZERO_SIZED;", "+\t\t\tif (enableWindow != 0) {", "+\t\t\t\tOS.gdk_window_hide (enableWindow);", "+\t\t\t}", "+\t\t\tOS.gtk_widget_hide (topHandle);", "+\t\t} else {", "+\t\t\tstate &= ~ZERO_SIZED;", "+\t\t\tif ((state & HIDDEN) == 0) {", "+\t\t\t\tif (enableWindow != 0) {", "+\t\t\t\t\tOS.gdk_window_show_unraised (enableWindow);", "+\t\t\t\t}", "+\t\t\t\tOS.gtk_widget_show (topHandle);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97e62dad191f58b9e70f8cf584385be2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7a0e684edfa37ede804fa2d0b89ffc7fc19a0fcd", "commitAfterChange": "58e02b4f0ace0c11884926ba3d0ab2bb16b2cdb0", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public TableItem getItem (Point point)", "signatureAfterChange": " public TableItem getItem (Point point)", "diff": ["-\tif (pinfo.iItem != -1) return _getItem (pinfo.iItem);", "+\tif (pinfo.iItem != -1) {", "+\t\t/*", "+\t\t* Bug in Windows.  When the point that is used by", "+\t\t* LVM_HITTEST is inside the header, Windows returns", "+\t\t* the first item in the table.  The fix is to check", "+\t\t* when LVM_HITTEST returns the first item and make", "+\t\t* sure that when the point is within the header,", "+\t\t* the first item is not returned.", "+\t\t*/", "+\t\tif (pinfo.iItem == 0) {", "+\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\tif ((bits & OS.LVS_NOCOLUMNHEADER) == 0) {", "+\t\t\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\tRECT rect = new RECT ();\t\t\t\t\t", "+\t\t\t\t\tOS.GetWindowRect (hwndHeader, rect);", "+\t\t\t\t\tPOINT pt = new POINT ();", "+\t\t\t\t\tpt.x = pinfo.x;", "+\t\t\t\t\tpt.y = pinfo.y;", "+\t\t\t\t\tOS.MapWindowPoints (handle, 0, pt, 1);", "+\t\t\t\t\tif (OS.PtInRect (rect, pt)) return null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn _getItem (pinfo.iItem);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e1756576c89d838fa3f4551ff9840bc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "c87aae6d3c31d8056505e084eb4ffdab48e95621", "commitAfterChange": "b332e1ecb6421f664a18c1bcf96e2b94c24f1610", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  int identity()", "signatureAfterChange": "  int identity()", "diff": ["-\t\tImage image = data.image;", "-\t\tif (image != null) {", "-\t\t\tBITMAP bm = new BITMAP();", "-\t\t\tOS.GetObject(image.handle, BITMAP.sizeof, bm);", "-\t\t\twidth = bm.bmWidth;", "-\t\t} else if (data.hwnd != 0) {", "-\t\t\tRECT rect = new RECT();", "-\t\t\tOS.GetClientRect(data.hwnd, rect);", "-\t\t\twidth = rect.right - rect.left;", "+\t\tint technology = OS.GetDeviceCaps(handle, OS.TECHNOLOGY);", "+\t\tif (technology == OS.DT_RASPRINTER) {", "+\t\t\twidth = OS.GetDeviceCaps(handle, OS.PHYSICALWIDTH);", "+\t\t} else {", "+\t\t\tImage image = data.image;", "+\t\t\tif (image != null) {", "+\t\t\t\tBITMAP bm = new BITMAP();", "+\t\t\t\tOS.GetObject(image.handle, BITMAP.sizeof, bm);", "+\t\t\t\twidth = bm.bmWidth;", "+\t\t\t} else {", "+\t\t\t\tint /*long*/ hwnd = OS.IsWinCE ? data.hwnd : OS.WindowFromDC(handle);", "+\t\t\t\tif (hwnd != 0) {", "+\t\t\t\t\tRECT rect = new RECT();", "+\t\t\t\t\tOS.GetClientRect(hwnd, rect);", "+\t\t\t\t\twidth = rect.right - rect.left;", "+\t\t\t\t} else {", "+\t\t\t\t\tint /*long*/ hBitmap = OS.GetCurrentObject(handle, OS.OBJ_BITMAP);", "+\t\t\t\t\tBITMAP bm = new BITMAP();", "+\t\t\t\t\tOS.GetObject(hBitmap, BITMAP.sizeof, bm);", "+\t\t\t\t\twidth = bm.bmWidth;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c92a5ec00c3d4dc4e9e940783a15fe65", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "02b6cb36ad1c2dce27bd3810bc24ab9a523e494f", "commitAfterChange": "40e15e68f5fa0b6fe1e8ba9d3ffd820b3dca362f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int accessibilityActionNames(int id, int sel)", "signatureAfterChange": "  int accessibilityActionNames(int id, int sel)", "diff": ["-\tif (handleIsAccessible(id) && accessible != null) {", "-\t\tNSArray returnValue = accessible.internal_accessibilityActionNames(ACC.CHILDID_SELF);", "-\t\tif (returnValue != null) return returnValue.id;", "+\tint /*long*/ returnValue = super.accessibilityActionNames(id, sel);", "+\tif (handleIsAccessible(id)) {", "+\t\tif (accessible != null) {", "+\t\t\tNSArray baseArray = accessible.internal_accessibilityActionNames(ACC.CHILDID_SELF);", "+\t\t\tif (baseArray != null) returnValue = baseArray.id;", "+\t\t}", "+\t\tif (hooks(SWT.MenuDetect) || (menu != null && !menu.isDisposed())) {", "+\t\t\tNSArray baseArray = new NSArray(returnValue);", "+\t\t\tNSMutableArray ourNames = NSMutableArray.arrayWithCapacity(baseArray.count() + 1);", "+\t\t\tourNames.addObjectsFromArray(baseArray);", "+\t\t\tourNames.addObject(OS.NSAccessibilityShowMenuAction);", "+\t\t\treturnValue = ourNames.id;", "+\t\t}", "-\t", "-\treturn super.accessibilityActionNames(id, sel);", "+\treturn returnValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745c6a0fed3e5b2d2442d7c0e35fc9bb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "1a193fed7fb8f834ff006a600108343edb183958", "commitAfterChange": "a7fde4ef9d2adcc5e3ca7f3f1eeba3ca343ab9a7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint text = OS.PtWidgetChildBack(handle);\r", "-\tOS.PtWidgetPreferredSize(text, dim);\r", "+\tint textWidget = OS.PtWidgetChildBack(handle);\r", "+\tOS.PtWidgetPreferredSize(textWidget, dim);\r", "-\tOS.PtSetAreaFromWidgetCanvas (text, rect, area);\r", "+\tOS.PtSetAreaFromWidgetCanvas (textWidget, rect, area);\r", "+\t\r", "+\t/* Calculate maximum text width */\r", "+\t\tOS.Pt_ARG_TEXT_STRING, 0, 0,\r", "-\tint [] items = new int [1];\r", "-\tfor (int i = 0; i < args [1]; i++) {\r", "-\t\tOS.memmove (items, args [4] + (i * 4), 4);\r", "-\t\tint length = OS.strlen (items [0]);\r", "-\t\tOS.PfExtentText(rect, null, args [7], items [0], length);\r", "-\t\tmaxWidth = Math.max(maxWidth, rect.lr_x - rect.ul_x + 1);\r", "-\t}\t\r", "+\tint str = args [10];\r", "+\tint font = args [7];\r", "+\tif (str != 0) {\r", "+\t\tint length = OS.strlen (str);\r", "+\t\tif (length > 0) {\r", "+\t\t\tOS.PfExtentText(rect, null, font, str, length);\r", "+\t\t\tmaxWidth = Math.max(maxWidth, rect.lr_x - rect.ul_x + 1);\r", "+\t\t}\r", "+\t}\r", "+\tint count = args [1];\r", "+\tint [] buffer = new int [1];\r", "+\tfor (int i = 0; i < count; i++) {\r", "+\t\tOS.memmove (buffer, args [4] + (i * 4), 4);\r", "+\t\tstr = buffer [0];\r", "+\t\tint length = OS.strlen (str);\r", "+\t\tif (length > 0) {\r", "+\t\t\tOS.PfExtentText(rect, null, font, str, length);\r", "+\t\t\tmaxWidth = Math.max(maxWidth, rect.lr_x - rect.ul_x + 1);\r", "+\t\t}\r", "+\t}\r", "+\tif (maxWidth == 0) maxWidth = DEFAULT_WIDTH;\t\r", "+\t\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afff23ac75675a4b23ff75f8e61f2e62", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "3f822b76a618595ebd6a11a1ba3ab9f63e256bca", "commitAfterChange": "0a950d59cad36be3ba2dfe58ad8c3d4ffa9d627e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tstate |= THEME_BACKGROUND;\t", "+\tstate |= THEME_BACKGROUND;", "-\t\thandle = OS.gcnew_Separator ();", "+\t\thandle = OS.gcnew_UserControl ();", "+\t\tint separator = OS.gcnew_Label ();", "+\t\tif (separator == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.ContentControl_Content (handle, separator);", "+\t\tif ((style & SWT.VERTICAL) != 0) {", "+\t\t\tOS.FrameworkElement_Width (separator, OS.SystemParameters_ThinVerticalBorderWidth ());", "+\t\t\tOS.Control_HorizontalContentAlignment (handle, OS.HorizontalAlignment_Center);", "+\t\t\tOS.Control_VerticalContentAlignment (handle, OS.VerticalAlignment_Stretch);", "+\t\t} else {", "+\t\t\tOS.FrameworkElement_Height (separator, OS.SystemParameters_ThinHorizontalBorderHeight ());", "+\t\t\tOS.Control_HorizontalContentAlignment (handle, OS.HorizontalAlignment_Stretch);", "+\t\t\tOS.Control_VerticalContentAlignment (handle, OS.VerticalAlignment_Center);", "+\t\t}", "+\t\tint brush = OS.SystemColors_ActiveBorderBrush ();", "+\t\tOS.Control_Background (separator, brush);", "+\t\tOS.GCHandle_Free (brush);", "+\t\tOS.GCHandle_Free (separator);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);\t\t", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61ecfbaac7485111b7d5a0b590655c38", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "724febd58ffeab21e913a74b79ef57e921733a87", "commitAfterChange": "18f55040fb554a39c6260254cb75ab87d1140b9e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  RECT drawBorder(int hdc, int x, int y, int lineHeight, StyleItem[] line, int index, int color, int selectionColor, RECT clipRect, RECT pRect, int selectionStart, int selectionEnd)", "signatureAfterChange": "  RECT drawBorder(int hdc, int x, int y, int lineHeight, StyleItem[] line, int index, int color, int selectionColor, RECT clipRect, RECT pRect, int selectionStart, int selectionEnd, Rectangle drawClip)", "diff": ["-RECT drawBorder(int /*long*/ hdc, int x, int y, int lineHeight, StyleItem[] line, int index, int color, int selectionColor, RECT clipRect, RECT pRect, int selectionStart, int selectionEnd) {", "+RECT drawBorder(int /*long*/ hdc, int x, int y, int lineHeight, StyleItem[] line, int index, int color, int selectionColor, RECT clipRect, RECT pRect, int selectionStart, int selectionEnd, Rectangle drawClip) {", "-\tif (index + 1 >= line.length || !style.isAdherentBorder(line[index + 1].style)) {", "+\tboolean lastRunVisible = drawClip != null && (x + run.x + run.width) > (drawClip.x + drawClip.width);", "+\tif (index + 1 >= line.length || lastRunVisible || !style.isAdherentBorder(line[index + 1].style)) {", "-\t\tOS.Rectangle(hdc, x + left, y, x + run.x + run.width, y + lineHeight);", "+\t\tRECT drawRect = new RECT();", "+\t\tOS.SetRect(drawRect, x + left, y, x + run.x + run.width, y + lineHeight);", "+\t\tif (drawClip != null) {", "+\t\t\tRECT lpDrawClip = new RECT();", "+\t\t\tOS.SetRect(lpDrawClip, drawClip.x - lineWidth, drawClip.y, drawClip.x + drawClip.width + lineWidth, drawClip.y + drawClip.height);", "+\t\t\tOS.IntersectRect(drawRect, lpDrawClip, drawRect);", "+\t\t}", "+\t\tOS.Rectangle(hdc, drawRect.left,drawRect.top, drawRect.right, drawRect.bottom);", "-\t\t\tOS.Rectangle(hdc, x + left, y, x + run.x + run.width, y + lineHeight);", "+\t\t\tOS.Rectangle(hdc, drawRect.left, drawRect.top, drawRect.right, drawRect.bottom);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c91a11f6f52aa9e28df26d6bc80d448", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet226.java", "commitBeforeChange": "b1ecfb2158021d26fad71b625b51c37cc1bcb41b", "commitAfterChange": "d6a88a70fdf7f1bfb40ae2d70ea3909548876864", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public static void main(String [] args)", "signatureAfterChange": " \t public static void main(String [] args)", "diff": ["-\tshell.setText(\"Custom Selection - Gradient selection\");", "+\tshell.setText(\"Tree: Custom Gradient selection\");", "+\t/*", "+\t * NOTE: MeasureItem, PaintItem and EraseItem are called repeatedly.", "+\t * Therefore, it is critical for performance that these methods be as efficient as possible.", "+\t */", "+\t\t\t\tRectangle area = tree.getClientArea();", "+\t\t\t\t/*", "+\t\t\t\t * If you wish to paint the selection beyond the end of", "+\t\t\t\t * last column, you must change the clipping region.", "+\t\t\t\t */", "+\t\t\t\tint columnCount = tree.getColumnCount();", "+\t\t\t\tif (event.index == columnCount - 1 || columnCount == 0) {", "+\t\t\t\t\tRegion region = new Region();", "+\t\t\t\t\tgc.getClipping(region);", "+\t\t\t\t\tregion.add(event.x, event.y, area.x + area.width - event.x, event.height); ", "+\t\t\t\t\tgc.setClipping(region);", "+\t\t\t\t\tregion.dispose();", "+\t\t\t\t}", "+\t\t\t\tColor foreground = gc.getForeground();", "+\t\t\t\tColor background = gc.getBackground();", "-\t\t\t\tgc.fillGradientRectangle(0, rect.y, 500, rect.height, false);", "+\t\t\t\tgc.fillGradientRectangle(0, rect.y, area.width, rect.height, false);", "+\t\t\t\t// restore colors for subsequent drawing", "+\t\t\t\tgc.setForeground(foreground);", "+\t\t\t\tgc.setBackground(background);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f23f7c564c6f027a295e2d6d400998f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "267f7188e59556773e76cc13f877f4cd3cd09174", "commitAfterChange": "11ad9148b83d1106949f8fa6ee1b2b258847cdbe", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void destroyItem (TableItem item)", "signatureAfterChange": "  void destroyItem (TableItem item)", "diff": ["-\tOS.gtk_clist_remove (handle, index);", "+\tOS.gtk_signal_handler_block_by_data (handle, SWT.Selection);", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tint selectionIndex = -1;", "+\t\tint selection = OS.GTK_CLIST_SELECTION (handle);", "+\t\tif (selection != 0 && OS.g_list_length (selection) != 0) {", "+\t\t\tselectionIndex = OS.g_list_nth_data (selection, 0);", "+\t\t}", "+\t\tOS.gtk_clist_remove (handle, index);", "+\t\tif (selectionIndex == -1 || selectionIndex == index) {", "+\t\t\tint focusIndex = OS.GTK_CLIST_FOCUS_ROW (handle);", "+\t\t\tif (focusIndex == -1) focusIndex = 0;", "+\t\t\tOS.gtk_clist_unselect_row (handle, focusIndex, 0);", "+\t\t}", "+\t} else {", "+\t\tOS.gtk_clist_remove (handle, index);", "+\t}", "+\tOS.gtk_signal_handler_unblock_by_data (handle, SWT.Selection);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9c706abbe26c7d089221bccf9359e5c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6c60a1c454119ad6b472aeb4263a0a445c965587", "commitAfterChange": "1d50514fe095156d3ff099c9fc9895bec81d60ae", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": "  LRESULT wmNotifyChild (NMHDR hdr, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (NMHDR hdr, int wParam, int lParam)", "diff": ["+\t\t\t/*", "+\t\t\t* Bug in Windows.  When a tree item that has an image", "+\t\t\t* with alpha is expanded or collapsed, the area where", "+\t\t\t* the image is drawn is not erased before it is drawn.", "+\t\t\t* This means that the image gets darker each time.", "+\t\t\t* The fix is to redraw the item.", "+\t\t\t*/", "+\t\t\tif (!OS.IsWinCE && OS.COMCTL32_MAJOR >= 6) {", "+\t\t\t\tif (imageList != null) {", "+\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\tint offset = NMHDR.sizeof + 4 + TVITEM.sizeof;", "+\t\t\t\t\tOS.MoveMemory (tvItem, lParam + offset, TVITEM.sizeof);", "+\t\t\t\t\tif (tvItem.hItem != 0) {", "+\t\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\trect.left = tvItem.hItem;", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect);", "+\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "835f23f5c2dbf8b19da9c4f7e64f5c85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ced6309d83136191307f59b1d7ca67538883169e", "commitAfterChange": "ec4463e5809457fec0c4e8fa95d96c7900df01c5", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " public void setBounds (Rectangle rect)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height, int flags, boolean defer)", "diff": ["+", "+void setBounds (int x, int y, int width, int height, int flags, boolean defer) {", "+\tif (defer && parent != null) {", "+\t\tforceResize ();", "+\t\tWINDOWPOS [] lpwp = parent.lpwp;", "+\t\tif (lpwp == null) {", "+\t\t\t/*", "+\t\t\t* This code is intentionally commented.  All widgets that", "+\t\t\t* are created by SWT have WS_CLIPSIBLINGS to ensure that", "+\t\t\t* application code does not draw outside of the control.", "+\t\t\t*/", "+//\t\t\tint count = parent.getChildrenCount ();", "+//\t\t\tif (count > 1) {", "+//\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+//\t\t\t\tif ((bits & OS.WS_CLIPSIBLINGS) == 0) flags |= OS.SWP_NOCOPYBITS;", "+//\t\t\t}", "+\t\t\tSetWindowPos (handle, 0, x, y, width, height, flags);", "+\t\t} else {", "+\t\t\tint index = 0;", "+\t\t\twhile (index < lpwp.length) {", "+\t\t\t\tif (lpwp [index] == null) break;", "+\t\t\t\tindex ++;", "+\t\t\t}", "+\t\t\tif (index == lpwp.length) {", "+\t\t\t\tWINDOWPOS [] newLpwp = new WINDOWPOS [lpwp.length + 4];", "+\t\t\t\tSystem.arraycopy (lpwp, 0, newLpwp, 0, lpwp.length);", "+\t\t\t\tparent.lpwp = lpwp = newLpwp;", "+\t\t\t}", "+\t\t\tWINDOWPOS wp = new WINDOWPOS ();", "+\t\t\twp.hwnd = handle;", "+\t\t\twp.x = x;", "+\t\t\twp.y = y;", "+\t\t\twp.cx = width;", "+\t\t\twp.cy = height;", "+\t\t\twp.flags = flags;", "+\t\t\tlpwp [index] = wp;", "+\t\t}", "+\t} else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5dba114fe6820752a3205d62935f804", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "b0693a12063ab35c44f34d89fd60d2e89368a94f", "commitAfterChange": "e9fff9da841962ff350a910fb52f584e5996a4f4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r public void setMenu (Menu menu)", "signatureAfterChange": "\r public void setMenu (Menu menu)", "diff": ["-\tinfo.fMask = OS.MIIM_ID;\r", "+\tinfo.fMask = OS.MIIM_DATA;\r", "-\t\tif (info.wID == id) break;\r", "+\t\tif (info.dwItemData == id) break;\r", "-\tif (info.wID != id) return;\r", "+\tif (info.dwItemData != id) return;\r", "-\tinfo.fMask = OS.MIIM_STATE | OS.MIIM_ID | OS.MIIM_TYPE;\r", "+\tinfo.fMask = OS.MIIM_STATE | OS.MIIM_ID | OS.MIIM_TYPE | OS.MIIM_DATA;\r", "-\t\tsuccess = OS.InsertMenu (hMenu, index, OS.MF_BYPOSITION, id, null); \r", "-\t\tif (success) success = OS.SetMenuItemInfo (hMenu, index, true, info);\r", "+\t\t/*\r", "+\t\t* Feature in WinCE.  InsertMenuItem is not available. SetMenuItemInfo\r", "+\t\t* cannot set the menu item state and submenu. The fix is to use InsertMenu\r", "+\t\t* to set those, and SetMenuItemInfo to set the application data field.\r", "+\t\t*/\r", "+\t\tint uIDNewItem = id;\r", "+\t\tint uFlags = OS.MF_BYPOSITION;\r", "+\t\tif (menu != null) {\r", "+\t\t\tuFlags |= OS.MF_POPUP;\r", "+\t\t\tuIDNewItem = menu.handle;\r", "+\t\t}\r", "+\t\tTCHAR lpNewItem = new TCHAR (0, \"\", true);\r", "+\t\tsuccess = OS.InsertMenu (hMenu, index, uFlags, uIDNewItem, lpNewItem);\r", "+\t\tif (success) {\r", "+\t\t\tinfo.fMask = OS.MIIM_DATA | OS.MIIM_TYPE;\r", "+\t\t\tsuccess = OS.SetMenuItemInfo (hMenu, index, true, info);\r", "+\t\t\tif ((info.fState & (OS.MFS_DISABLED | OS.MFS_GRAYED)) != 0) {\r", "+\t\t\t\tOS.EnableMenuItem (hMenu, index, OS.MF_BYPOSITION | OS.MF_GRAYED);\r", "+\t\t\t}\r", "+\t\t\tif ((info.fState & OS.MFS_CHECKED) != 0) {\r", "+\t\t\t\tOS.CheckMenuItem (hMenu, index, OS.MF_BYPOSITION | OS.MF_CHECKED);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "511efb60e0ecac3b0930147926660802", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \r public void setText (String string)", "signatureAfterChange": "\r \r public void setText (String string)", "diff": ["-\t}\t\r", "-\tbyte [] buffer2;\r", "+\t}\r", "+\tint keyMods = 0; \r", "+\tbyte [] buffer2 = new byte [1];\r", "-\t\tchar [] accelText = new char [text.length - i];\r", "-\t\tSystem.arraycopy (text, i, accelText, 0, accelText.length);\r", "-\t\tbuffer2 = Converter.wcsToMbcs (null, accelText, true);\r", "-\t} else {\r", "-\t\tbuffer2 = new byte [1];\r", "+\t\tint start = i;\r", "+//\t\twhile (i < text.length) {\r", "+//\t\t\tif (text [i] == '+') {\r", "+//\t\t\t\tString str = new String (text, start, i - start);\r", "+//\t\t\t\tif (str.equals (\"Ctrl\")) keyMods |= OS.Pk_KM_Ctrl;\r", "+//\t\t\t\tif (str.equals (\"Shift\")) keyMods |= OS.Pk_KM_Shift;\r", "+//\t\t\t\tif (str.equals (\"Alt\")) keyMods |= OS.Pk_KM_Alt;\r", "+//\t\t\t\tstart = i + 1;\r", "+//\t\t\t}\r", "+//\t\t\ti++;\r", "+//\t\t}\r", "+\t\tif (start < text.length) {\r", "+\t\t\tchar [] accelText = new char [text.length - start];\r", "+\t\t\tSystem.arraycopy (text, start, accelText, 0, accelText.length);\r", "+\t\t\tbuffer2 = Converter.wcsToMbcs (null, accelText, true);\r", "+\t\t}\r", "-\tint ptr = OS.malloc (buffer1.length);\r", "-\tOS.memmove (ptr, buffer1, buffer1.length);\r", "+\tint ptr1 = OS.malloc (buffer1.length);\r", "+\tOS.memmove (ptr1, buffer1, buffer1.length);\r", "+\tint ptr2 = OS.malloc (buffer2.length);\r", "+\tOS.memmove (ptr2, buffer2, buffer2.length);\r", "+\tif ((parent.style & SWT.BAR) != 0) {\r", "+\t\treplaceMnemonic (mnemonic, OS.Pk_KM_Alt);\r", "+\t}\r", "-\t\tOS.Pt_ARG_TEXT_STRING, ptr, 0,\r", "+\t\tOS.Pt_ARG_TEXT_STRING, ptr1, 0,\r", "+\t\tOS.Pt_ARG_ACCEL_TEXT, ptr2, 0,\r", "+\t\tOS.Pt_ARG_MODIFIER_KEYS, keyMods, keyMods,\r", "-\tOS.free (ptr);\r", "+\tOS.free (ptr1);\r", "+\tOS.free (ptr2);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f6df5b57466f34489e07ba9cb65fda2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "05be259fea5f957dd02645af0c5af88f8d90841d", "commitAfterChange": "4b4d246e11750716991a34062a013449ce7da49d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["+", "+\t/* Initialize the system font slot */", "+\tint fontFamily = OS.SystemFonts_MessageFontFamily();", "+\tint style = OS.SystemFonts_MessageFontStyle();", "+\tint weight = OS.SystemFonts_MessageFontWeight();", "+\tdouble size = OS.SystemFonts_MessageFontSize();", "+\tint typeface = OS.gcnew_Typeface(fontFamily, style, weight, OS.FontStretches_Normal);", "+\tOS.GCHandle_Free(fontFamily);", "+\tOS.GCHandle_Free(style);", "+\tOS.GCHandle_Free(weight);", "+\tsystemFont = Font.wpf_new(this, typeface, size);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb1eb30b4bacb2c376379f5bbb3923b9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "092b2855e233cbf3935eaffa5764177de9f718cb", "commitAfterChange": "d25ad14a7abefd03d6cc5a7336e5b196b082f470", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\tint type = (style & SWT.NO_TRIM) == 0 ? OS.GTK_WINDOW_TOPLEVEL : OS.GTK_WINDOW_POPUP;", "+\tint type = OS.GTK_WINDOW_TOPLEVEL;", "+\tif ((style & (SWT.ON_TOP | SWT.NO_TRIM)) != 0) type = OS.GTK_WINDOW_POPUP;", "+\tint decorations = 0;", "+\tif ((style & SWT.NO_TRIM) == 0) {", "+\t\tif ((style & SWT.MIN) != 0) decorations |= OS.GDK_DECOR_MINIMIZE;", "+\t\tif ((style & SWT.MAX) != 0) decorations |= OS.GDK_DECOR_MAXIMIZE;", "+\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.GDK_DECOR_RESIZEH;", "+\t\tif ((style & SWT.BORDER) != 0) decorations |= OS.GDK_DECOR_BORDER;", "+\t\tif ((style & SWT.MENU) != 0) decorations |= OS.GDK_DECOR_MENU;", "+\t\tif ((style & SWT.TITLE) != 0) decorations |= OS.GDK_DECOR_TITLE;", "+\t\t/*", "+\t\t* Feature in GTK.  Under some Window Managers (Sawmill), in order", "+\t\t* to get any border at all from the window manager it is necessary", "+\t\t* to set GDK_DECOR_BORDER.  The fix is to force these bits when any", "+\t\t* kind of border is requested.", "+\t\t*/", "+\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.GDK_DECOR_BORDER;", "+\t}", "+\tOS.gdk_window_set_decorations (window, decorations);", "+\tOS.gtk_window_set_title (shellHandle, new byte [1]);", "-\t} else {", "-\t\tint decorations = 0;", "-\t\tif ((style & SWT.NO_TRIM) == 0) {", "-\t\t\tif ((style & SWT.MIN) != 0) decorations |= OS.GDK_DECOR_MINIMIZE;", "-\t\t\tif ((style & SWT.MAX) != 0) decorations |= OS.GDK_DECOR_MAXIMIZE;", "-\t\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.GDK_DECOR_RESIZEH;", "-\t\t\tif ((style & SWT.BORDER) != 0) decorations |= OS.GDK_DECOR_BORDER;", "-\t\t\tif ((style & SWT.MENU) != 0) decorations |= OS.GDK_DECOR_MENU;", "-\t\t\tif ((style & SWT.TITLE) != 0) decorations |= OS.GDK_DECOR_TITLE;", "-\t\t\t/*", "-\t\t\t* Feature in GTK.  Under some Window Managers (Sawmill), in order", "-\t\t\t* to get any border at all from the window manager it is necessary", "-\t\t\t* to set GDK_DECOR_BORDER.  The fix is to force these bits when any", "-\t\t\t* kind of border is requested.", "-\t\t\t*/", "-\t\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.GDK_DECOR_BORDER;", "-\t\t}", "-\t\tOS.gdk_window_set_decorations (window, decorations);", "-\t\tOS.gtk_window_set_title (shellHandle, new byte [1]);", "+\t}", "+\tif ((style & (SWT.NO_TRIM | SWT.BORDER | SWT.RESIZE)) == 0) {", "+\t\tOS.gtk_container_set_border_width (shellHandle, 1);", "+\t\tGtkStyle style = new GtkStyle ();", "+\t\tOS.memmove (style, OS.gtk_widget_get_style (shellHandle));", "+\t\tGdkColor color = new GdkColor ();", "+\t\tcolor.red = style.black_red;", "+\t\tcolor.green = style.black_green;", "+\t\tcolor.blue = style.black_blue;", "+\t\tcolor.pixel = style.black_pixel;", "+\t\tOS.gtk_widget_modify_bg (shellHandle, 0, color);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1fa826f784f5b7aaea88be198a65b6f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "ef99308454376741558f5c126ed26e1e2ef85341", "commitAfterChange": "1ed6e017318ca3de09b2840c45fb2e4dc1dfd857", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  int menuPositionProc (int menu, int x, int y, int push_in, int user_data)", "signatureAfterChange": "  int menuPositionProc (int menu, int x, int y, int push_in, int user_data)", "diff": ["-\tif (x != 0) OS.memmove (x, new int [] {this.x}, 4);", "-\tif (y != 0) OS.memmove (y, new int [] {this.y}, 4);", "+\t/*", "+\t* Feature in GTK.  The menu position function sets the position of the", "+\t* top-left pixel of the menu.  If the menu would be off-screen, GTK will", "+\t* add a scroll arrow at the bottom and position the first menu entry at", "+\t* the specified position.  The fix is to flip the menu location to be", "+\t* completely inside the screen.", "+\t*/", "+    GtkRequisition requisition = new GtkRequisition ();", "+    OS.gtk_widget_size_request (menu, requisition);", "+    int screenHeight = OS.gdk_screen_height ();", "+\tint reqy = this.y;", "+\tif (reqy + requisition.height > screenHeight && reqy - requisition.height >= 0) {", "+    \treqy -= requisition.height;", "+    }", "+    int screenWidth = OS.gdk_screen_width ();", "+\tint reqx = this.x;", "+    if ((style & SWT.RIGHT_TO_LEFT) != 0) {", "+    \tif (reqx - requisition.width >= 0) reqx -= requisition.width;", "+    } else {", "+    \tif (reqx + requisition.width > screenWidth) reqx -= requisition.width;", "+    }", "+\tif (x != 0) OS.memmove (x, new int [] {reqx}, 4);", "+\tif (y != 0) OS.memmove (y, new int [] {reqy}, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90a7ad245c6f64c1002361701d4135d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d3e6e1240786b37729a4402b475774900289164f", "commitAfterChange": "37e38fc8a2a2f0d1ea6ec96886a9dec8af756c5e", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void getClipping(Region region)", "signatureAfterChange": " public void getClipping(Region region)", "diff": ["-\tif (data.clipRgn == 0) {", "+\tif (data.control == 0) {", "-\t\tif (data.control != 0) {", "-\t\t\tRect bounds = new Rect();", "-\t\t\tOS.GetControlBounds(data.control, bounds);", "-\t\t\twidth = bounds.right - bounds.left;", "-\t\t\theight = bounds.bottom - bounds.top;", "-\t\t}", "-\tOS.CopyRgn(data.clipRgn, region.handle);", "+\tRect bounds = new Rect();", "+\tOS.GetControlBounds(data.control, bounds);", "+\tint clipping = region.handle;", "+\tOS.RectRgn(clipping, bounds);", "+\tOS.OffsetRgn(clipping, (short)-bounds.left, (short)-bounds.top);", "+\tif (data.clipRgn != 0) OS.SectRgn(data.clipRgn, clipping, clipping);", "+\tif (data.visibleRgn != 0) {", "+\t\tOS.OffsetRgn(data.visibleRgn, (short)-bounds.left, (short)-bounds.top);", "+\t\tOS.SectRgn(data.visibleRgn, clipping, clipping);", "+\t\tOS.OffsetRgn(data.visibleRgn, bounds.left, bounds.top);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47ce6296e180e881a7360a44d027604a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "e2c2a7a74542ff409e980bc4b2fbaa161b141be9", "commitAfterChange": "06b0b6bb52d1fd2fb63bfd651ac4ecf3e0f11d0d", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void remove (int index)", "signatureAfterChange": " public void remove (int index)", "diff": ["+\tTCHAR buffer = null;", "+\tif ((style & SWT.H_SCROLL) != 0) {", "+\t\tint length = OS.SendMessage (handle, OS.CB_GETLBTEXTLEN, index, 0);", "+\t\tif (length == OS.CB_ERR) error (SWT.ERROR_ITEM_NOT_REMOVED);", "+\t\tbuffer = new TCHAR (getCodePage (), length + 1);", "+\t\tint result = OS.SendMessage (handle, OS.CB_GETLBTEXT, index, buffer);", "+\t\tif (result == OS.CB_ERR) error (SWT.ERROR_ITEM_NOT_REMOVED);", "+\t}", "+\tif ((style & SWT.H_SCROLL) != 0) setScrollWidth (buffer, true);", "-\t\t/*", "-\t\t* It is possible (but unlikely), that application", "-\t\t* code could have disposed the widget in the modify", "-\t\t* event.  If this happens, just return.", "-\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd544faca830ae90edcba2bea35dd6a4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "583901b2d4d4dd9ada3e088dc03601677e85ba5e", "commitAfterChange": "35c9455264d8669738102a2e027f00abd7d9e1b4", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["-\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "+\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "+\t\tint /*long*/ ptr = OS.gtk_entry_get_text (entryHandle);", "+\t\tstring = verifyText (string, 0, OS.g_utf8_strlen (ptr, -1));", "+\t\tif (string == null) return;", "+\t}", "+\tbyte [] buffer = Converter.wcsToMbcs (null, string, false);", "+\tOS.g_signal_handlers_block_matched (entryHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, DELETE_TEXT);", "+\tOS.g_signal_handlers_block_matched (entryHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, INSERT_TEXT);", "+\tOS.g_signal_handlers_unblock_matched (entryHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, DELETE_TEXT);", "+\tOS.g_signal_handlers_unblock_matched (entryHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, INSERT_TEXT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f02bbce365207ffcb3ecb91926c0ff01", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "ad7a9e5b3b139f6b5bd4c2f25f8cf8b336105a91", "commitAfterChange": "52d678e47ee00e0c9d7473cd6841b89c8499131e", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\t\tOS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\t\tOS.gtk_combo_box_set_active (handle, index);", "+\t\t\tOS.g_signal_handlers_unblock_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\t\treturn;", "+\t\t}", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\tOS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t}", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\tOS.g_signal_handlers_unblock_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62967343e142028f63ab4afe15916c9a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void setFont (Font font)", "signatureAfterChange": " public void setFont(Font font)", "diff": ["-public void setFont (Font font) {", "+public void setFont(Font font) {", "-\tif (font == null) {", "-\t\tdata.font = data.device.systemFont;", "-\t} else {", "-\t\tif (font.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "-\t\tdata.font = font.handle;", "-\t}", "+\tif (font == null) font = data.device.systemFont;", "+\tif (font.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\tdata.font = font;", "+\tint ptr = OS.NewPtr(16);", "+\tOS.memcpy(ptr, new int[]{font.handle}, 4); ", "+\tOS.memcpy(ptr + 4, new int[]{font.size << 16}, 4); ", "+\tOS.memcpy(ptr + 8, new byte[]{(font.style & OS.bold) != 0 ? (byte)1 : 0}, 1); ", "+\tOS.memcpy(ptr + 9, new byte[]{(font.style & OS.italic) != 0 ? (byte)1 : 0}, 1); ", "+\tint[] tags = new int[]{OS.kATSUFontTag, OS.kATSUSizeTag, OS.kATSUQDBoldfaceTag, OS.kATSUQDItalicTag};", "+\tint[] sizes = new int[]{4, 4, 1, 1};", "+\tint[] values = new int[]{ptr, ptr + 4, ptr + 8, ptr + 9};", "+\tOS.ATSUSetAttributes(data.style, tags.length, tags, sizes, values);", "+\tOS.DisposePtr(ptr);", "+\tFontInfo info = new FontInfo();", "+\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "+\tdata.fontAscent = info.ascent;", "+\tdata.fontDescent = info.descent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44b5212cc4db65d62402480f3a6cbd99", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "6930fdd35d9cdffd6d05c778fb4b82a2018d7fcb", "commitAfterChange": "4b4619a6b5b2cd61a37c980601ead9593d587b9d", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 95, "signatureBeforeChange": "  long windowProc (long hwnd, int msg, long wParam, long lParam)", "signatureAfterChange": "  long windowProc (long hwnd, int msg, long wParam, long lParam)", "diff": ["-\t\t\t\t\tprocessSegments = (hooks (SWT.Segments) || filters (SWT.Segments)) && !ignoreCharacter && OS.GetKeyState (OS.VK_CONTROL) >= 0 && OS.GetKeyState (OS.VK_MENU) >= 0;", "+\t\t\t\t\tprocessSegments = (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) && !ignoreCharacter && OS.GetKeyState (OS.VK_CONTROL) >= 0 && OS.GetKeyState (OS.VK_MENU) >= 0;", "-\t\t\t\t\tprocessSegments = wParam == OS.VK_DELETE && (hooks (SWT.Segments) || filters (SWT.Segments));", "+\t\t\t\t\tprocessSegments = wParam == OS.VK_DELETE && (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0));", "-\t\t\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) return 0;", "+\t\t\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) return 0;", "-\t\t\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) return 0;", "+\t\t\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) return 0;", "-\t\t\t\t\tprocessSegments = hooks (SWT.Segments) || filters (SWT.Segments);", "+\t\t\t\t\tprocessSegments = hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0);", "-\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) {", "-\t\t\t\t\tsegments = null;", "-\t\t\t\t\tif (event != null) segments = event.segments;", "+\t\t\t\t\tsegments = event != null ? event.segments : null;", "+\t\t\t\t\tif (event.segmentsChars != null) {", "+\t\t\t\t\t\tif (event.segmentsChars[0] == RLE) {", "+\t\t\t\t\t\t\tsuper.updateTextDirection(SWT.RIGHT_TO_LEFT);", "+\t\t\t\t\t\t} else if (event.segmentsChars[0] == LRE) {", "+\t\t\t\t\t\t\tsuper.updateTextDirection(SWT.LEFT_TO_RIGHT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\tbreak;", "-\t\t\tif (lParam != 0 && (hooks (SWT.Segments) || filters (SWT.Segments))) {", "+\t\t\tif (lParam != 0 && (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0))) {", "-\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) {", "-\t\t\t\t\tString [] newItems = new String [items.length - 1];", "-\t\t\t\t\tSystem.arraycopy (items, 0, newItems, 0, index);", "-\t\t\t\t\tSystem.arraycopy (items, index + 1, newItems, index, items.length - index - 1);", "-\t\t\t\t\titems = newItems;", "+\t\t\t\t\tif (items.length == 1) {", "+\t\t\t\t\t\titems = new String[0];", "+\t\t\t\t\t} else if (items.length > 1) {", "+\t\t\t\t\t\tString [] newItems = new String [items.length - 1];", "+\t\t\t\t\t\tSystem.arraycopy (items, 0, newItems, 0, index);", "+\t\t\t\t\t\tSystem.arraycopy (items, index + 1, newItems, index, items.length - index - 1);", "+\t\t\t\t\t\titems = newItems;", "+\t\t\t\t\t}", "-\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6c54792aac7cc0228b7b79e6ae597f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "713526f4ce95962da1741fe1861db86a24af5d9a", "commitAfterChange": "c7a20ce4a278d6964c412a013f46fbdbc58e9eb5", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["+\t/*", "+\t* Set the default icon for the window class to IDI_APPLICATION.", "+\t* This is not necessary for native Windows applications but", "+\t* versions of Java starting at JDK 1.6 set the icon in the", "+\t* executable instead of leaving the default.", "+\t*/", "+\tif (!OS.IsWinCE && Library.JAVA_VERSION >= Library.JAVA_VERSION (1, 6, 0)) {", "+\t\tTCHAR lpszFile = new TCHAR (0, OS.MAX_PATH);", "+\t\twhile (OS.GetModuleFileName (0, lpszFile, lpszFile.length ()) == lpszFile.length ()) {", "+\t\t\tlpszFile = new TCHAR (0, lpszFile.length () + OS.MAX_PATH);", "+\t\t}", "+\t\tif (OS.ExtractIconEx (lpszFile, -1, null, null, 1) != 0) {", "+\t\t\tString fileName = lpszFile.toString (0, lpszFile.strlen ());", "+\t\t\tif (fileName.endsWith (\"java.exe\") || fileName.endsWith (\"javaw.exe\")) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\tlpWndClass.hIcon = OS.LoadIcon (0, OS.IDI_APPLICATION);", "+\t\t\t}", "+\t\t}", "+\t}", "-\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (5, 1)) lpWndClass.style |= OS.CS_DROPSHADOW;", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (5, 1)) {", "+\t\tlpWndClass.style |= OS.CS_DROPSHADOW;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91d5384668e60e532e65d83280949668", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "73ee56991535559e50652ecc6391cdfa11c08af2", "commitAfterChange": "79b4c494683ecd3609c3ab417806e1f053ca5e78", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": "  long gtk_scroll_event (long widget, long eventPtr)", "signatureAfterChange": "  long gtk_scroll_event (long widget, long eventPtr)", "diff": ["+\t\tcase OS.GDK_SCROLL_SMOOTH:", "+\t\t\tlong /*int*/ result = 0;", "+\t\t\tif (gdkEvent.delta_x != 0) {", "+\t\t\t\tresult = (sendMouseEvent (SWT.MouseHorizontalWheel, 0, (int)(3 * gdkEvent.delta_x), 0, true, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, false, gdkEvent.state) ? 0 : 1);", "+\t\t\t}", "+\t\t\tif (gdkEvent.delta_y != 0) {", "+\t\t\t\tresult = (sendMouseEvent (SWT.MouseWheel, 0, (int)(3 * gdkEvent.delta_y), SWT.SCROLL_LINE, true, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, false, gdkEvent.state) ? 0 : 1);", "+\t\t\t}", "+\t\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2901db847bf1a1d85b38ce7350010eb5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "88080c08af2325fb66aea8c24d7f0210fa71fd6c", "commitAfterChange": "dcc2e380d1e3ea8a88162c2cf3d96db6df8c9c44", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void drawIcon(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "signatureAfterChange": "  void drawIcon(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "diff": ["+\tint technology = OS.GetDeviceCaps(handle, OS.TECHNOLOGY);", "+", "-\tif (simple) {", "+\tif (simple && technology != OS.DT_RASPRINTER) {", "-\t\tif (simple)\t{", "+\t\tif (simple && technology != OS.DT_RASPRINTER)\t{", "-\t\t\t/* Select old bitmaps before creating the icon */\t\t\t", "-\t\t\tOS.SelectObject(srcHdc, oldSrcBitmap);", "-\t\t\tOS.SelectObject(dstHdc, oldDestBitmap);", "+\t\t\tif (technology == OS.DT_RASPRINTER) {", "+\t\t\t\tOS.SelectObject(srcHdc, newIconInfo.hbmColor);", "+\t\t\t\tOS.SelectObject(dstHdc, srcIconInfo.hbmMask);", "+\t\t\t\tdrawBitmapTransparentByClipping(srcHdc, dstHdc, 0, 0, destWidth, destHeight, destX, destY, destWidth, destHeight, true, destWidth, destHeight);\t", "+\t\t\t\tOS.SelectObject(srcHdc, oldSrcBitmap);", "+\t\t\t\tOS.SelectObject(dstHdc, oldDestBitmap);", "+\t\t\t} else {", "+\t\t\t\tOS.SelectObject(srcHdc, oldSrcBitmap);", "+\t\t\t\tOS.SelectObject(dstHdc, oldDestBitmap);", "+\t\t\t\tint hIcon = OS.CreateIconIndirect(newIconInfo);", "+\t\t\t\tif (hIcon == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tOS.DrawIconEx(handle, destX, destY, hIcon, destWidth, destHeight, 0, 0, OS.DI_NORMAL);", "+\t\t\t\tOS.DestroyIcon(hIcon);", "+\t\t\t}", "-\t\t\t/* Create the new icon */", "-\t\t\tint hIcon = OS.CreateIconIndirect(newIconInfo);", "-\t\t\tif (hIcon == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t", "-\t\t\t/* Draw the new icon */", "-\t\t\tOS.DrawIconEx(handle, destX, destY, hIcon, destWidth, destHeight, 0, 0, OS.DI_NORMAL);", "-\t\t\t", "-\t\t\t/* Destroy the new icon and hdc's*/", "-\t\t\tOS.DestroyIcon(hIcon);", "+\t\t\t/* Destroy the new icon src and mask and hdc's*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1918e94b41f34bf96eb72802a215645f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void append (String string)", "signatureAfterChange": " public void append (String string)", "diff": ["-\tsetTXNText (OS.kTXNEndOffset, OS.kTXNEndOffset, string);", "-\tOS.TXNSetSelection (txnObject, OS.kTXNEndOffset, OS.kTXNEndOffset);", "-\tOS.TXNShowSelection (txnObject, false);", "+\tif (txnObject == 0) {", "+\t\tif (hasFocus ()) {", "+\t\t\tControlEditTextSelectionRec selection = new ControlEditTextSelectionRec ();", "+\t\t\tselection.selStart = selection.selEnd = -1;", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSelectionTag, 4, selection);", "+\t\t\tchar [] buffer = new char [string.length ()];", "+\t\t\tstring.getChars (0, buffer.length, buffer, 0);", "+\t\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tif (ptr == 0) error (SWT.ERROR_CANNOT_SET_TEXT);", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextInsertCFStringRefTag, 4, new int[] {ptr});", "+\t\t\tOS.CFRelease (ptr);", "+\t\t} else {", "+\t\t\tString newText = getText () + string;", "+\t\t\tsetEditText (newText);", "+\t\t\tsetSelection(newText.length ());", "+\t\t}", "+\t} else {", "+\t\tsetTXNText (OS.kTXNEndOffset, OS.kTXNEndOffset, string);", "+\t\tOS.TXNSetSelection (txnObject, OS.kTXNEndOffset, OS.kTXNEndOffset);", "+\t\tOS.TXNShowSelection (txnObject, false);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a67cf07b267e6815d869d3bda38e07", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "d394748baa45afbd580331c831b85672b97b114e", "commitAfterChange": "5f321000d94eb71bd024c1f4d113ca6eeea25bd0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "  void setSortDirection (int direction)", "signatureAfterChange": "  void setSortDirection (int direction)", "diff": ["-\t\t\tint column = direction == SWT.NONE ? -1 : index;", "-\t\t\tOS.SendMessage (hwnd, OS.LVM_SETSELECTEDCOLUMN, column, 0);", "+\t\t\tint oldColumn = OS.SendMessage (hwnd, OS.LVM_GETSELECTEDCOLUMN, 0, 0);", "+\t\t\tint newColumn = direction == SWT.NONE ? -1 : index;", "+\t\t\tOS.SendMessage (hwnd, OS.LVM_SETSELECTEDCOLUMN, newColumn, 0);", "+\t\t\t/* ", "+\t\t\t* Bug in Windows.  When LVM_SETSELECTEDCOLUMN is set, Windows", "+\t\t\t* does not redraw either the new or the previous selected column.", "+\t\t\t* The fix is to force a redraw.", "+\t\t\t*/", "+\t\t\tparent.forceResize ();", "+\t\t\tRECT rect = new RECT (), itemRect = new RECT ();", "+\t\t\tOS.GetClientRect (hwnd, rect);", "+\t\t\tif (oldColumn != -1) {", "+\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, oldColumn, itemRect);", "+\t\t\t\trect.left = itemRect.left;", "+\t\t\t\trect.right = itemRect.right;", "+\t\t\t\tOS.InvalidateRect (hwnd, rect, true);", "+\t\t\t}", "+\t\t\tif (newColumn != -1) {", "+\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, newColumn, itemRect);", "+\t\t\t\trect.left = itemRect.left;", "+\t\t\t\trect.right = itemRect.right;", "+\t\t\t\tOS.InvalidateRect (hwnd, rect, true);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "240206c5c63dd198e0a0a3a881e21cf4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "28341f36b2b474d250bcbc993c3af8734c20f08e", "commitAfterChange": "c1a797a57543b30a9f6230fdbf16251b30301bfa", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  void setBackgroundTransparent (boolean transparent)", "signatureAfterChange": "  void setBackgroundTransparent (boolean transparent)", "diff": ["+\tif (EXPLORER_THEME) {", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\tint bits = transparent ? OS.LVS_EX_TRANSPARENTBKGND : 0;", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, OS.LVS_EX_TRANSPARENTBKGND, bits);", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When LVM_SETEXTENDEDLISTVIEWSTYLE is", "+\t\t\t* used with LVS_EX_TRANSPARENTBKGND and LVM_SETSELECTEDCOLUMN", "+\t\t\t* is used to select a column, Windows fills the column with", "+\t\t\t* the selection color, drawing on top of the background image", "+\t\t\t* and any other custom drawing.  The fix is to clear (or set)", "+\t\t\t* the selected column.", "+\t\t\t*/", "+\t\t\tif ((sortDirection & (SWT.UP | SWT.DOWN)) != 0) {", "+\t\t\t\tif (sortColumn != null && !sortColumn.isDisposed ()) {", "+\t\t\t\t\tint column = transparent ? -1 : indexOf (sortColumn);", "+\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETSELECTEDCOLUMN, column, 0);", "+\t\t\t\t\tif (column != OS.SendMessage (handle, OS.LVM_SETSELECTEDCOLUMN, column, 0)) {", "+\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t* Bug in Windows.  When LVM_SETSELECTEDCOLUMN is set, Windows", "+\t\t\t\t\t\t* does not redraw either the new or the previous selected column.", "+\t\t\t\t\t\t* The fix is to force a redraw.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265c4d5db71b5a0d79256772560d699c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "0073562a14ca6d918c9fcaca498a6e957da8a673", "commitAfterChange": "77892ab4398d4200690dd45ab1bd14f928f3edb9", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "\r int titleHeight ()", "signatureAfterChange": "\r int trimHeight ()", "diff": ["-int titleHeight () {\r", "-\tint hasTitle = style & (SWT.MIN | SWT.MAX | SWT.TITLE | SWT.MENU);\r", "-\tif (hasTitle != 0) return display.titleHeight;\r", "+\t\tif (hasResize) {\r", "+\t\t\treturn display.topTitleResizeHeight + display.bottomTitleResizeHeight;\r", "+\t\t}\r", "+\t\tif (hasBorder) {\r", "+\t\t\treturn display.topTitleBorderHeight + display.bottomTitleBorderHeight;\r", "+\t\t}\r", "+\t\treturn display.topTitleHeight + display.bottomTitleHeight;\r", "+\tif (hasResize) {\r", "+\t\treturn display.topResizeHeight + display.bottomResizeHeight;\r", "+\t}\r", "+\tif (hasBorder) {\r", "+\t\treturn display.topBorderHeight + display.bottomBorderHeight;\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dbef30ffd98cbe967d3f3f10e411cca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "a8e794b569e48ed111ee75c7ef4a168f438eab83", "commitAfterChange": "34d711362c95fd7705b944f4b09ae2ab72c01b84", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "signatureAfterChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "diff": ["-\t\tif (bounds.width == 0) showSelection ();", "+\t\t/*", "+\t\t* Feature in the Macintosh.  When the caret is moved,", "+\t\t* the text widget scrolls to show the new location.", "+\t\t* This means that the text widget may be scrolled", "+\t\t* to the right in order to show the caret when the", "+\t\t* widget is not large enough to show both the caret", "+\t\t* location and all the text.  Unfortunately, when", "+\t\t* the text widget is resized such that all the text", "+\t\t* and the caret could be visible, Macintosh does not", "+\t\t* scroll the widget back.  The fix is to reset the", "+\t\t* selection or the text depend on if the widget", "+\t\t* is on focus or not.", "+\t\t*/", "+\t\tRect inset = getInset ();", "+\t\tint minWidth = inset.left + inset.right;", "+\t\tif (bounds.width <= minWidth && width > minWidth) {", "+\t\t\tif (hasFocus ()) {", "+\t\t\t\tControlEditTextSelectionRec selection = new ControlEditTextSelectionRec ();", "+\t\t\t\tif (OS.GetControlData (handle, (short) OS.kControlEntireControl, OS.kControlEditTextSelectionTag, 4, selection, null) == OS.noErr) {", "+\t\t\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSelectionTag, 4, selection);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint [] ptr = new int [1];", "+\t\t\t\tif (OS.GetControlData (handle, (short)OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, ptr, null) == OS.noErr) {", "+\t\t\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, ptr);", "+\t\t\t\t}", "+\t\t\t\tif (ptr [0] != 0) OS.CFRelease (ptr [0]);\t\t\t\t", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47d35ac508a33a712a3a5f288f765bc3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "1dacd3e9ed06c61e8552e31c6adebb0ab30245ee", "commitAfterChange": "ffc9f40b7904f00bfd32f38d3b3ec04c8aced62e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tOS.pango_layout_get_pixel_size (layout, w, h);", "-\tint width = w [0];", "-\tint height = h [0];", "-\twidth = wHint == SWT.DEFAULT ? width : wHint;", "-\theight = hHint == SWT.DEFAULT ? height : hHint;", "+\tint width, height = 0 ;", "+\tOS.gtk_widget_realize (handle);", "+\tif (OS.GTK3) {", "+\t\tOS.gtk_widget_set_size_request (handle, wHint, hHint);", "+\t\tGtkRequisition requisition = new GtkRequisition ();", "+\t\tOS.gtk_widget_get_preferred_size (handle, requisition, null);", "+\t\twidth = wHint == SWT.DEFAULT ? requisition.width : wHint;", "+\t\theight = hHint == SWT.DEFAULT ? requisition.height : hHint;\t", "+\t} else {", "+\t\tOS.pango_layout_get_pixel_size (layout, w, h);", "+\t\twidth = wHint == SWT.DEFAULT ? w [0] : wHint;", "+\t\theight = hHint == SWT.DEFAULT ? h [0] : hHint;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad652351a8be733bf975377e26f8fb7d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "e9fc86e3b8aadcb391059f857ae260720aeb0cdc", "commitAfterChange": "2f05c8a8cd01dd3f4eb259ad3c782ca4b77e17ea", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \t\r int processKeyDown (int callData)", "signatureAfterChange": "\r \t\r int processKeyDown (int callData)", "diff": ["+\t\r", "+\t\t\t\r", "+\t\t\t/* Ensure that the pointer image does not change */\r", "+\t\t\tint xDisplay = getDisplay().xDisplay;\r", "+\t\t\tint xWindow = OS.XtWindow (parent.handle);\r", "+\t\t\tint ptrGrabResult = OS.XGrabPointer (\r", "+\t\t\t\txDisplay,\r", "+\t\t\t\txWindow,\r", "+\t\t\t\t1,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tOS.GrabModeAsync,\r", "+\t\t\t\tOS.GrabModeAsync,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tOS.CurrentTime);\r", "+\t\t\tOS.XChangeActivePointerGrab (\r", "+\t\t\t\txDisplay,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tcursor,\r", "+\t\t\t\tOS.CurrentTime);\r", "+\r", "+\t\t\tsendEvent (SWT.Selection, event);\r", "+\t\t\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\r", "-\t\t\tsendEvent (SWT.Selection, event);\r", "+\t\t\t\t/* Adjust the pointer position */\r", "+\t\t\t\tint cursorX = newX;  int cursorY = newY;\r", "+\t\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\t\tcursorY += height / 2;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tcursorX += width / 2;\r", "+\t\t\t\t}\r", "+\t\t\t\tOS.XWarpPointer (xDisplay, OS.None, xWindow, 0, 0, 0, 0, cursorX, cursorY);\r", "-\t\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d88039a47c9692d14734a45048acb705", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "c4f3dc85f0ccec5c74cb285cf4a25fdd845a37f7", "commitAfterChange": "8226320c2212f07bb2da2ffd0edd37cc6d5d025c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void deselect (int index)", "signatureAfterChange": " public void deselect (int index)", "diff": ["-\tboolean isSelected = getSelectionIndex () == index;", "-\tsetItems (items, !isSelected, !isSelected);", "+\tif (index < 0 || index >= items.length) return;", "+\tignoreSelect = true;", "+\tint /*long*/ children = OS.gtk_container_get_children (listHandle);", "+\tint /*long*/ item = OS.g_list_nth_data (children, index);", "+\tboolean selected = OS.GTK_WIDGET_STATE (item) == OS.GTK_STATE_SELECTED;", "+\tOS.gtk_list_unselect_all (listHandle);", "+\tif (selected) OS.gtk_entry_set_text (entryHandle, new byte[1]);", "+\tOS.g_list_free (children);", "+\tignoreSelect = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ab3ad258a0a5af131e68a3d6a6a5a19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "c49c0b0ef4d445e010ed30c7d8ba3f6978c1390d", "commitAfterChange": "159be9a33b063e5e9bf59389af26ce714198cf06", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int callPaintEventHandler (int control, int damageRgn, int visibleRgn, int theEvent, int nextHandler)", "signatureAfterChange": "  int callPaintEventHandler (int control, int damageRgn, int visibleRgn, int theEvent, int nextHandler)", "diff": ["-\tif (control == labelHandle && partCode != 0) {", "+\tif (control == labelHandle && (partCode != 0 || ((state & DISABLED) != 0 && OS.VERSION >= 0x1040))) {", "-\t\tinfo.state = OS.kThemeStatePressed;", "+\t\tif (partCode != 0) {", "+\t\t\tinfo.state = OS.kThemeStatePressed;", "+\t\t} else {", "+\t\t\tif (OS.IsControlActive (labelHandle)) {", "+\t\t\t\tinfo.state = (state & DISABLED) == 0 ? OS.kThemeStateActive : OS.kThemeStateUnavailable;", "+\t\t\t} else {", "+\t\t\t\tinfo.state = (state & DISABLED) == 0 ? OS.kThemeStateInactive : OS.kThemeStateUnavailableInactive;", "+\t\t\t}", "+\t\t}", "-\t\tint colorspace = OS.CGColorSpaceCreateDeviceRGB ();", "-\t\tOS.CGContextSetFillColorSpace (context [0], colorspace);", "-\t\tOS.CGColorSpaceRelease (colorspace);", "-\t\tOS.CGContextSetFillColor (context [0], parent.getForegroundColor ().handle);", "+\t\tif ((state & DISABLED) != 0 && OS.VERSION >= 0x1040) {", "+\t\t\tOS.HIThemeSetTextFill (OS.kThemeTextColorMenuItemDisabled, 0, context [0], OS.kHIThemeOrientationNormal);", "+\t\t} else {", "+\t\t\tint colorspace = OS.CGColorSpaceCreateDeviceRGB ();", "+\t\t\tOS.CGContextSetFillColorSpace (context [0], colorspace);", "+\t\t\tOS.CGColorSpaceRelease (colorspace);", "+\t\t\tOS.CGContextSetFillColor (context [0], parent.getForegroundColor ().handle);", "+\t\t}", "+\t\t\t\t} else if ((state & DISABLED) != 0) {", "+\t\t\t\t\tOS.HICreateTransformedCGImage (imageHandle, OS.kHITransformDisabled, buffer);", "+\t\t\t\t\timageHandle = buffer [0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4072f38988c5a39c8559dbc315414302", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "d210fa9d39566655f9c3694b37a81a867775c6fb", "commitAfterChange": "3ad31e0f367aa1b600ee746ae8b160bb349a69e1", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r void paint(GC gc, int yPosition)", "signatureAfterChange": "\r void paint(GC gc, int yPosition)", "diff": ["-\tTree parent = getParent();\r", "-\tPoint paintPosition = new Point(getPaintStartX(), yPosition);\r", "-\t\r", "+\t\r", "+\tTree parent = getParent();\r", "+\tPoint paintPosition = new Point(getPaintStartX(), yPosition);\r", "+\tPoint extent = getSelectionExtent();\r", "-\tdrawSelection(gc, paintPosition);\r", "+\tif (isSelected() == true) {\r", "+\t\tgc.setBackground(getSelectionBackgroundColor());\r", "+\t\tgc.setForeground(getSelectionForegroundColor());\r", "+\t\tgc.fillRectangle(paintPosition.x, paintPosition.y, extent.x, extent.y);\r", "+\t} else {\r", "+\t\tgc.setBackground(getBackground());\r", "+\t\tgc.setForeground(getForeground());\r", "+\t\tif(getBackground() != parent.getBackground()){\r", "+\t\t\tgc.fillRectangle(paintPosition.x, paintPosition.y, extent.x, extent.y);\t\t\r", "+\t\t}\r", "+\t}\t\r", "+\tif (text != null) {\t\t\r", "+\t\tgc.drawString(text, getTextXPos(), paintPosition.y + getTextYPosition(gc), true);\r", "+\t}\r", "-\tdrawText(gc, new Point(getTextXPos(), paintPosition.y + getTextYPosition(gc)));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b78fabb240313bbed59cbde625c5919", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "5291fb5ab98b8edb9d85f8aabfcd8636dd2d27f5", "commitAfterChange": "68eede6cc61dccf58685c545d1d833d2102b72d0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void setMenu (Menu menu)", "signatureAfterChange": " public void setMenu (Menu menu)", "diff": ["+\t\tboolean success = false;", "+\t\t", "+\t\t/*", "+\t\t* Bug in Windows.  When GetMenuItemInfo() is used to get the text,", "+\t\t* for an item that has a bitmap set using MIIM_BITMAP, the text is", "+\t\t* not returned.  This means that when SetMenuItemInfo() is used to", "+\t\t* set the submenu and the current menu state, the text is lost.", "+\t\t* The fix is to temporarily remove the bitmap and restore it after", "+\t\t* the text and submenu have been set.", "+\t\t*/", "+\t\tif (!OS.IsWinCE) {", "+\t\t\tif ((OS.WIN32_MAJOR << 16 | OS.WIN32_MINOR) >= (4 << 16 | 10)) {", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tinfo.fMask = OS.MIIM_BITMAP;", "+\t\t\t\t\tinfo.hbmpItem = 0;", "+\t\t\t\t\tsuccess = OS.SetMenuItemInfo (hMenu, id, false, info);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\tboolean success = OS.GetMenuItemInfo (hMenu, index, true, info);", "+\t\tsuccess = OS.GetMenuItemInfo (hMenu, index, true, info);", "-\t\t\t* On WinCE, InsertMenuItem is not available.  SetMenuItemInfo", "-\t\t\t* does not set the menu item state and submenu use InsertMenu", "-\t\t\t* to set these fields and SetMenuItemInfo to set the menu item", "-\t\t\t* data.  NOTE: SetMenuItemInfo is also used to set the string", "-\t\t\t* that was queried from the original menu item.", "+\t\t\t* On WinCE, InsertMenuItem() is not available.  The fix is to", "+\t\t\t* use SetMenuItemInfo() but this call does not set the menu item", "+\t\t\t* state and submenu.  The fix is to use InsertMenu() to insert", "+\t\t\t* the item, SetMenuItemInfo() to set the string and EnableMenuItem()", "+\t\t\t* and CheckMenuItem() to set the state.", "-\t\t\tTCHAR lpNewItem = new TCHAR (0, \"\", true);", "+\t\t\tTCHAR lpNewItem = new TCHAR (0, \" \", true);", "+\t\t\t/*", "+\t\t\t* Restore the bitmap that was removed to work around a problem", "+\t\t\t* in GetMenuItemInfo() and menu items that have bitmaps set with", "+\t\t\t* MIIM_BITMAP.", "+\t\t\t*/", "+\t\t\tif ((OS.WIN32_MAJOR << 16 | OS.WIN32_MINOR) >= (4 << 16 | 10)) {", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tinfo.fMask = OS.MIIM_BITMAP;", "+\t\t\t\t\tinfo.hbmpItem = OS.HBMMENU_CALLBACK;", "+\t\t\t\t\tsuccess = OS.SetMenuItemInfo (hMenu, id, false, info);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17f1b90a18aba227fb28f72ce6995251", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 54, "signatureBeforeChange": " void manageChildren ()", "signatureAfterChange": "  int kEventControlContextualMenuClick (int nextHandler, int theEvent, int userData)", "diff": ["-void manageChildren () {", "-/* AW", "-\tOS.XtSetMappedWhenManaged (handle, false);", "-\tOS.XtManageChild (handle);", "-\tint [] argList = {OS.XmNborderWidth, 0};", "-\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\tOS.XtResizeWidget (handle, 1, 1, argList [1]);", "-\tOS.XtSetMappedWhenManaged (handle, true);", "-*/", "-}", "+int kEventControlContextualMenuClick (int nextHandler, int theEvent, int userData) {", "+\tif (menu != null && !menu.isDisposed ()) {", "+\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, pt.sizeof, null, pt);", "+\t\tRect rect = new Rect ();", "+\t\tint window = OS.GetControlOwner (handle);", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\tmenu.setLocation (pt.h + rect.left, pt.v + rect.top);", "+\t\tmenu.setVisible (true);", "+\t\treturn OS.noErr;", "+\t}", "+\treturn OS.eventNotHandledErr;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "183c10ca22625cf420001247762c5c7c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Canvas.java", "commitBeforeChange": "190caa95321b1262e297cd059e0cc666797e2304", "commitAfterChange": "f4b3eed207e8392acb004bd104993d972fc13ba3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void test_scrollIIIIIIZ()", "signatureAfterChange": "  public void test_scrollIIIIIIZ()", "diff": ["-\twarnUnimpl(\"Test test_scrollIIIIIIZ not written\");", "+\tcanvas.scroll(100, 100, 0, 0, 50, 50, false);", "+\tcanvas.scroll(100, 100, 0, 0, 50, 50, true);", "+", "+\tcanvas.scroll(10000, 10000, 100, 100, 500, 500, false);", "+\tcanvas.scroll(10000, 10000, 100, 100, 500, 500, true);", "+", "+\tcanvas.scroll(-100, -100, 10, 10, 30, 30, false);", "+\tcanvas.scroll(-100, -100, 10, 10, 30, 30, true);", "+", "+\tcanvas.scroll(10, 10, -200, -200, 100, 100, false);", "+\tcanvas.scroll(10, 10, -200, -200, 100, 100, true);", "+", "+\tcanvas.scroll(100, 100, 50, 50, -50, -50, false);", "+\tcanvas.scroll(100, 100, 50, 50, -50, -50, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e289c2e609480d3797f051ba40a3a8a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "1b4bf2560a13cbe7bbaefe761d35208d64534690", "commitAfterChange": "4dfb9b2e7115a7b57c3f5b8a9e47ea812d940f92", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  LRESULT CDDS_ITEMPREPAINT (NMLVCUSTOMDRAW nmcd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_ITEMPREPAINT (NMLVCUSTOMDRAW nmcd, int wParam, int lParam)", "diff": ["+", "+\t/*", "+\t* Bug in Windows.  When the table has the extended style", "+\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t* CLR_NONE to make the table transparent, Windows fills", "+\t* a black rectangle around any column that contains an", "+\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "+\t* custom draw.", "+\t* ", "+\t* NOTE: It is also necessary to clear CDIS_FOCUS to stop", "+\t* the table from drawing the focus rectangle around the", "+\t* first item instead of the full row.", "+\t*/", "+\tif (!ignoreCustomDraw) {", "+\t\tif (OS.IsWindowVisible (handle) && OS.IsWindowEnabled (handle)) {", "+\t\t\tif (!explorerTheme && (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "+\t\t\t\t\tint dwExStyle = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\t\t\t\tif ((dwExStyle & OS.LVS_EX_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) {", "+\t\t\t\t\t\t\tnmcd.uItemState &= ~OS.CDIS_FOCUS;", "+\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94db5fc8b3950a63287c0f9600ec594e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "566daa46ce8ed62956b203dae461afb617b99e6c", "commitAfterChange": "eeb8046d39ee94828204d9bbd59134f78054cfd1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+public Point computeSize (int wHint, int hHint, boolean changed) {", "+\tcheckWidget ();", "+\tif ((style & SWT.SEPARATOR) != 0) {", "+\t\tif ((style & SWT.HORIZONTAL) != 0) {", "+\t\t\tif (wHint == SWT.DEFAULT) wHint = DEFAULT_WIDTH;", "+\t\t} else {", "+\t\t\tif (hHint == SWT.DEFAULT) hHint = DEFAULT_HEIGHT;", "+\t\t}", "+\t}", "+\tint width = OS.GTK_WIDGET_WIDTH (fixedHandle);", "+\tint height = OS.GTK_WIDGET_HEIGHT (fixedHandle);", "+\tOS.gtk_widget_set_size_request (frameHandle, -1, -1);", "+\tOS.gtk_widget_set_size_request (handle, wHint, hHint);", "+\tGtkRequisition requisition = new GtkRequisition ();", "+\tOS.gtk_widget_size_request (frameHandle, requisition);", "+\tOS.gtk_widget_set_size_request (frameHandle, width, height);", "+\tOS.gtk_widget_set_size_request (handle, width, height);", "+\twidth = wHint == SWT.DEFAULT ? requisition.width : wHint;", "+\theight = hHint == SWT.DEFAULT ? requisition.height : hHint;", "+\treturn new Point (width, height);\t", "+}", "-", "-public Point computeSize (int wHint, int hHint, boolean changed) {", "-\tcheckWidget ();", "-\tif ((style&SWT.SEPARATOR) != 0) {", "-\t\tint w, h;", "-\t\tif ((style&SWT.HORIZONTAL)!= 0) {", "-\t\t\tw = 45;", "-\t\t\th = 6;", "-\t\t} else {  // vertical", "-\t\t\tw = 6;", "-\t\t\th = 45;", "-\t\t}", "-\t\tif (wHint != SWT.DEFAULT) w = wHint;", "-\t\tif (hHint != SWT.DEFAULT) h = hHint;", "-\t\treturn new Point(w,h);", "-\t}", "-\treturn super.computeSize(wHint, hHint, changed);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae0d526422039382d0998d09284dd09f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "9cc72cd00c181250b1f51b95a0528a6b993c1ed9", "commitAfterChange": "1c6100db3e7e2869dd9939a388c01ffe02266ae6", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "  void hookEvents ()", "signatureAfterChange": "  void hookEvents ()", "diff": ["-", "-\tOS.g_signal_connect_closure_by_id (handle, display.signalIds [ENTER_NOTIFY_EVENT], 0, display.closures [ENTER_NOTIFY_EVENT], false);", "-\tOS.g_signal_connect_closure_by_id (handle, display.signalIds [LEAVE_NOTIFY_EVENT], 0, display.closures [LEAVE_NOTIFY_EVENT], false);", "-\tif (labelHandle != 0) OS.g_signal_connect_closure_by_id (labelHandle, display.signalIds [MNEMONIC_ACTIVATE], 0, display.closures [MNEMONIC_ACTIVATE], false);", "-", "-\tOS.g_signal_connect_closure_by_id (handle, display.signalIds [FOCUS_OUT_EVENT], 0, display.closures [FOCUS_OUT_EVENT], false);", "-", "+\t/*", "+\t * Feature in GTK. GtkToolItem does not respond to basic listeners ", "+\t * such as button-press, enter-notify to it. The fix is to assign ", "+\t * the listener to child (GtkButton) of the tool-item.", "+\t */", "+\teventHandle = OS.gtk_bin_get_child(handle);", "+\tif ((style & SWT.DROP_DOWN) != 0 && OS.GTK_VERSION >= OS.VERSION (2, 6, 0)) {", "+\t\tint /*long*/ list = OS.gtk_container_get_children(eventHandle);", "+\t\teventHandle = OS.g_list_nth_data(list, 0);", "+\t\tif (arrowHandle != 0) OS.g_signal_connect_closure (arrowHandle, OS.clicked, display.closures [CLICKED], false);", "+\t}", "+\tif ((style & (SWT.CHECK | SWT.RADIO | SWT.DROP_DOWN)) != 0)\t{", "+\t\tOS.g_signal_connect_closure (handle, OS.create_menu_proxy, display.closures [CREATE_MENU_PROXY], false);", "+\t}", "+\tOS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [ENTER_NOTIFY_EVENT], 0, display.closures [ENTER_NOTIFY_EVENT], false);", "+\tOS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [LEAVE_NOTIFY_EVENT], 0, display.closures [LEAVE_NOTIFY_EVENT], false);", "+\tOS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [FOCUS_IN_EVENT], 0, display.closures [FOCUS_IN_EVENT], false);", "+\tOS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [FOCUS_OUT_EVENT], 0, display.closures [FOCUS_OUT_EVENT], false);", "-\tOS.gtk_widget_add_events (handle, mask);", "-\tOS.g_signal_connect_closure_by_id (handle, display.signalIds [BUTTON_PRESS_EVENT], 0, display.closures [BUTTON_PRESS_EVENT], false);", "-\tOS.g_signal_connect_closure_by_id (handle, display.signalIds [BUTTON_RELEASE_EVENT], 0, display.closures [BUTTON_RELEASE_EVENT], false);", "-\tOS.g_signal_connect_closure_by_id (handle, display.signalIds [EVENT_AFTER], 0, display.closures[EVENT_AFTER], false);", "+\tOS.gtk_widget_add_events (eventHandle, mask);", "+\tOS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [BUTTON_PRESS_EVENT], 0, display.closures [BUTTON_PRESS_EVENT], false);", "+\tOS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [BUTTON_RELEASE_EVENT], 0, display.closures [BUTTON_RELEASE_EVENT], false);", "+\tOS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [EVENT_AFTER], 0, display.closures[EVENT_AFTER], false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757815548855b2c6ef9a1962178c2915", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "99d6fcb049f30826891f5e43c733f0471a09002c", "commitAfterChange": "0130d9e1c9ef3c97a2921f233db1adae9cedcfdc", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": "  public void update ()", "signatureAfterChange": "  public void update ()", "diff": ["-\tint updateRgn = OS.NewRgn ();", "-\tOS.GetPortVisibleRegion (port, updateRgn);", "-\tif (!OS.EmptyRgn (updateRgn)) {", "-\t\tint [] currentPort = new int[1];", "-\t\tOS.GetPort (currentPort);", "-\t\tOS.SetPort (port);", "-\t\tOS.BeginUpdate (window);", "-\t\tOS.UpdateControls (window, updateRgn);", "-\t\tOS.EndUpdate (window);", "-\t\tOS.SetPort (currentPort [0]);", "+\tint portRgn = OS.NewRgn ();", "+\tOS.GetPortVisibleRegion (port, portRgn);", "+\tif (!OS.EmptyRgn (portRgn)) {", "+\t\tint updateRgn = OS.NewRgn ();", "+\t\tOS.GetWindowRegion (window, (short)OS.kWindowUpdateRgn, updateRgn);", "+\t\tif (!OS.EmptyRgn (updateRgn)) {", "+\t\t\tint visibleRgn = getVisibleRegion (handle, false);", "+\t\t\tif (!OS.EmptyRgn (visibleRgn)) {", "+\t\t\t\tRect rect = new Rect ();", "+\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\t\t\tOS.OffsetRgn (updateRgn, (short)-rect.left, (short)-rect.top);", "+\t\t\t\tOS.SectRgn (portRgn, updateRgn, updateRgn);", "+\t\t\t\tOS.GetRegionBounds(updateRgn, rect);", "+\t\t\t\tif (!OS.EmptyRgn (updateRgn) && !OS.EmptyRgn (visibleRgn)) {", "+\t\t\t\t\tint [] currentPort = new int[1];", "+\t\t\t\t\tOS.GetPort (currentPort);", "+\t\t\t\t\tOS.SetPort (port);", "+\t\t\t\t\tOS.BeginUpdate (window);", "+\t\t\t\t\tOS.UpdateControls (window, updateRgn);", "+\t\t\t\t\tOS.EndUpdate (window);", "+\t\t\t\t\tOS.SetPort (currentPort [0]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.DisposeRgn (visibleRgn);", "+\t\t}", "+\t\tOS.DisposeRgn (updateRgn);", "-\tOS.DisposeRgn (updateRgn);", "+\tOS.DisposeRgn (portRgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60f3709b3875c5157070aa4ab630e833", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "5b7360d3bfe7c7e28411d9814b445b518e551cac", "commitAfterChange": "2b7beb1db93bf56e0bde2dbe8fab1db791dbaa5a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint width = 100;", "-\tint height = 30;", "+\tint width = 100, height = 21;", "+\tint [] ptr = new int [1];", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tint index = OS.GetControlValue (handle) - 1;", "+\t\tOS.CopyMenuItemTextAsCFString (menuHandle, (short)(index+1), ptr);", "+\t} else {", "+\t\tOS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, ptr, null);", "+\t}", "+\tif (ptr [0] != 0) {", "+\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t// NEEDS work - only works for default font", "+\t\tshort [] baseLine = new short [1];", "+\t\tif (OS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, false, bounds, baseLine) == OS.noErr) {", "+\t\t\twidth = Math.max (width, bounds.h);", "+\t\t\theight = Math.max (height, bounds.v);", "+\t\t}", "+\t\tOS.CFRelease (ptr [0]);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ba7aa94979810daeaccb21911c7d09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "e170e2bc039501aa7c5918930966f5f032805092", "commitAfterChange": "110b4344af4c3f47d218fd3738d3496877c5fb78", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "signatureAfterChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "diff": ["+\t/*", "+\t* Bug in the Macintosh.  When HIViewSetDrawingEnabled() is used to", "+\t* turn off drawing for a control and the control is moved or resized, ", "+\t* the Mac does not redraw the area where the control once was in the", "+\t* parent.  The fix is to detect this case and redraw the area.", "+\t*/", "+\tif (!OS.HIViewIsDrawingEnabled (control)) {", "+\t\tint parent = OS.HIViewGetSuperview (control);", "+\t\tif (parent != 0 && OS.HIViewIsDrawingEnabled (parent)) {", "+\t\t\tint rgn = OS.NewRgn ();", "+\t\t\tRect rect = new Rect ();", "+\t\t\tOS.SetRect (rect, (short) oldBounds.x, (short) oldBounds.y, (short) (oldBounds.x + oldBounds.width), (short) (oldBounds.y + oldBounds.height));", "+\t\t\tOS.RectRgn (rgn, rect);", "+\t\t\tif (display.inPaint) {", "+\t\t\t\tOS.HIViewConvertRegion (rgn, parent, 0);", "+\t\t\t\tinvalWindowRgn (0, rgn);", "+\t\t\t} else {", "+\t\t\t\tOS.HIViewSetNeedsDisplayInRegion (parent, rgn, true);", "+\t\t\t}", "+\t\t\tOS.DisposeRgn (rgn);", "+\t\t}", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c832d07a113d440e966ff2776b17c5e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "15e21f2bff63c47ed36ebad70c570e1ba0ab294f", "commitAfterChange": "8ffcee93750c9ff3a3a323ee3036d1e15625164e", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " public boolean post (Event event)", "signatureAfterChange": " public boolean post (Event event)", "diff": ["-\t\tcase SWT.MouseMove: ", "+\t\tcase SWT.MouseMove:", "-\t\t\t\tint width = OS.GetSystemMetrics (OS.SM_CXSCREEN);", "-\t\t\t\tint height = OS.GetSystemMetrics (OS.SM_CYSCREEN);", "-\t\t\t\tinputs.dx = (event.x * 65535 + width - 2) / (width - 1);", "-\t\t\t\tinputs.dy = (event.y * 65535 + height - 2) / (height - 1);", "+\t\t\t\tif (OS.WIN32_VERSION >= OS.VERSION (5, 0)) inputs.dwFlags |= OS.MOUSEEVENTF_VIRTUALDESK;", "+\t\t\t\tint x = OS.GetSystemMetrics (OS.SM_XVIRTUALSCREEN);", "+\t\t\t\tint y = OS.GetSystemMetrics (OS.SM_YVIRTUALSCREEN);\t", "+\t\t\t\tint width = OS.GetSystemMetrics (OS.SM_CXVIRTUALSCREEN);", "+\t\t\t\tint height = OS.GetSystemMetrics (OS.SM_CYVIRTUALSCREEN);", "+\t\t\t\tinputs.dx = ((event.x - x) * 65535 + width - 2) / (width - 1);", "+\t\t\t\tinputs.dy = ((event.y - y) * 65535 + height - 2) / (height - 1);", "+\t\t\t\t\tcase 4: {", "+\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "+\t\t\t\t\t\tinputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_XDOWN : OS.MOUSEEVENTF_XUP;", "+\t\t\t\t\t\tinputs.mouseData = OS.XBUTTON1;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase 5: {", "+\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "+\t\t\t\t\t\tinputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_XDOWN : OS.MOUSEEVENTF_XUP;", "+\t\t\t\t\t\tinputs.mouseData = OS.XBUTTON2;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "843e854f0ebf1b1829982b40901a5a75", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "dd8992109fa30bb57d880152a45ce27990ec959b", "commitAfterChange": "56124a7d872e77705ed209a0fbc3fb11ebde70aa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void init (Device device, FontData[] fds)", "signatureAfterChange": "  void init (Device device, FontData[] fds)", "diff": ["+\tint fontType = OS.XmFONT_IS_FONTSET;", "+\t/*", "+\t* Bug in HPUX.  If the locale is \"C\" then FontSets do not work", "+\t* properly.  The fix is to detect this case and use a Font struct", "+\t* instead.", "+\t*/", "+\tif (OS.IsHPUX) {", "+\t\tint localePtr = OS.setlocale(OS.LC_CTYPE, null);", "+\t\tint length = OS.strlen(localePtr);", "+\t\tbyte[] buffer = new byte[length];", "+\t\tOS.memmove(buffer, localePtr, length);", "+\t\tif (\"C\".equals(new String(Converter.mbcsToWcs(null, buffer)))) {", "+\t\t\tfontType = OS.XmFONT_IS_FONT;", "+\t\t}", "+\t}", "+\t", "-\t\tstringBuffer.append(',');", "-\tif (OS.IsAIX && OS.IsDBLocale) {", "-\t\tstringBuffer.append(newFd.getXlfd());", "-\t} else {", "-\t\tnewFd.weight = firstFd.weight;", "-\t\tnewFd.slant = firstFd.slant;", "-\t\tstringBuffer.append(newFd.getXlfd());", "-\t\tnewFd.weight = null;", "-\t\tnewFd.slant = null;\t\t", "-\t\tstringBuffer.append(',');", "-\t\tstringBuffer.append(newFd.getXlfd());", "+\tif (fontType == OS.XmFONT_IS_FONTSET) {", "+\t\tif (OS.IsAIX && OS.IsDBLocale) {", "+\t\t\tstringBuffer.append(',');", "+\t\t\tstringBuffer.append(newFd.getXlfd());", "+\t\t} else {", "+\t\t\tnewFd.weight = firstFd.weight;", "+\t\t\tnewFd.slant = firstFd.slant;", "+\t\t\tstringBuffer.append(',');", "+\t\t\tstringBuffer.append(newFd.getXlfd());", "+\t\t\tnewFd.weight = null;", "+\t\t\tnewFd.slant = null;\t\t", "+\t\t\tstringBuffer.append(',');", "+\t\t\tstringBuffer.append(newFd.getXlfd());", "+\t\t}", "-\tint fontListEntry = OS.XmFontListEntryLoad(device.xDisplay, buffer, OS.XmFONT_IS_FONTSET, OS.XmFONTLIST_DEFAULT_TAG);", "+\tint fontListEntry = OS.XmFontListEntryLoad(device.xDisplay, buffer, fontType, OS.XmFONTLIST_DEFAULT_TAG);", "-\t\tbyte[] codeset = new byte[length];", "-\t\tOS.memmove(codeset, codesetPtr, length);", "-\t\tcodePage = new String(Converter.mbcsToWcs(null, codeset));", "+\t\tbuffer = new byte[length];", "+\t\tOS.memmove(buffer, codesetPtr, length);", "+\t\tcodePage = new String(Converter.mbcsToWcs(null, buffer));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8225ab37971a714321145265f28f58d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": " public int getAlignment ()", "signatureAfterChange": "  public int getAlignment ()", "diff": ["- */", "+", "-\tcheckWidget();", "-    return fAlignment;", "+\tcheckWidget ();", "+\tif ((style & SWT.ARROW) != 0) {", "+\t\tif ((style & SWT.UP) != 0) return SWT.UP;", "+\t\tif ((style & SWT.DOWN) != 0) return SWT.DOWN;", "+\t\tif ((style & SWT.LEFT) != 0) return SWT.LEFT;", "+\t\tif ((style & SWT.RIGHT) != 0) return SWT.RIGHT;", "+\t\treturn SWT.UP;", "+\t}", "+\tif ((style & SWT.LEFT) != 0) return SWT.LEFT;", "+\tif ((style & SWT.CENTER) != 0) return SWT.CENTER;", "+\tif ((style & SWT.RIGHT) != 0) return SWT.RIGHT;", "+\treturn SWT.LEFT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2ab86415fdbcf4dd84c6cd0159edc5a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 88, "signatureBeforeChange": " final void sendMouseEvent (int type, int button, MacMouseEvent mme)", "signatureAfterChange": "  boolean sendMouseEvent (int type, short button, int theEvent)", "diff": ["-final void sendMouseEvent (int type, int button, MacMouseEvent mme) {", "+", "+boolean sendMouseEvent (int type, short button, int theEvent) {", "-    event.time = mme.getWhen();", "-\tevent.button = button;", "-\tPoint ml= MacUtil.toControl(handle, mme.getWhere());", "-\tevent.x = ml.x;  event.y = ml.y;", "-\t// AW setInputState (event, mEvent);", "-\tevent.stateMask= mme.getState();", "+\tevent.type = type;", "+\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, pt.sizeof, null, pt);", "+\tRect rect = new Rect ();", "+\tint window = OS.GetControlOwner (handle);", "+\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\tevent.x = pt.h - rect.left;", "+\tevent.y = pt.v - rect.top;", "+\tOS.GetControlBounds (handle, rect);", "+\tevent.x -= rect.left;", "+\tevent.y -= rect.top;", "+\tsetInputState (event, theEvent);", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7877ed146d0bef7e8dde69fbde0a9d0a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java", "commitBeforeChange": "796c03966b90a1b4124fbb0de18e2b350a1297b3", "commitAfterChange": "798354856755c1c1542d3925e8afb0a68d8a824f", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tvoid showColorForPixel(int x, int y)", "signatureAfterChange": " \tvoid showColorForPixel(int x, int y)", "diff": ["-", "-", "-\t\t\tObject[] args = {new Integer(x),", "-\t\t\t\t\t     new Integer(y),", "-\t\t\t\t\t     new Integer(pixel),", "-\t\t\t\t\t     Integer.toHexString(pixel),", "-\t\t\t\t\t     rgb};", "-\t\t\tif (pixel == imageData.transparentPixel) {", "-\t\t\t\tstatusLabel.setText(createMsg(bundle.getString(\"Color_at_trans\"), args));", "-\t\t\t} else {", "-\t\t\t\tstatusLabel.setText(createMsg(bundle.getString(\"Color_at\"), args));", "+\t\t\tboolean hasAlpha = false;", "+\t\t\tint alphaValue = 0;", "+\t\t\tif (imageData.alphaData != null && imageData.alphaData.length > 0) {", "+\t\t\t\thasAlpha = true;", "+\t\t\t\talphaValue = imageData.getAlpha(x, y);", "+\t\t\tString rgbMessageFormat = bundle.getString(hasAlpha ? \"RGBA\" : \"RGB\");", "+\t\t\tObject[] rgbArgs = {", "+\t\t\t\t\tInteger.toString(rgb.red),", "+\t\t\t\t\tInteger.toString(rgb.green),", "+\t\t\t\t\tInteger.toString(rgb.blue),", "+\t\t\t\t\tInteger.toString(alphaValue)", "+\t\t\t};", "+\t\t\tObject[] rgbHexArgs = {", "+\t\t\t\t\tInteger.toHexString(rgb.red),", "+\t\t\t\t\tInteger.toHexString(rgb.green),", "+\t\t\t\t\tInteger.toHexString(rgb.blue),", "+\t\t\t\t\tInteger.toHexString(alphaValue)", "+\t\t\t};", "+\t\t\tObject[] args = {", "+\t\t\t\t\tnew Integer(x),", "+\t\t\t\t\tnew Integer(y),", "+\t\t\t\t\tnew Integer(pixel),", "+\t\t\t\t\tInteger.toHexString(pixel),", "+\t\t\t\t\tcreateMsg(rgbMessageFormat, rgbArgs),", "+\t\t\t\t\tcreateMsg(rgbMessageFormat, rgbHexArgs),", "+\t\t\t\t\t(pixel == imageData.transparentPixel) ? bundle.getString(\"Color_at_transparent\") : \"\"};", "+\t\t\tstatusLabel.setText(createMsg(bundle.getString(\"Color_at\"), args));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d20c94a2b409e675e7fd8da596d41eeb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6064bf54f9c02b013a6336de92e98261a6d27bb2", "commitAfterChange": "ab7a1436e4ef701e89dc80eaedb4dc69f6c11fec", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 92, "signatureBeforeChange": "  void setItemHeight (Image image)", "signatureAfterChange": "  void setItemHeight (Image image, NSFont font)", "diff": ["-void setItemHeight (Image image) {", "-//\tRectangle bounds = image != null ? image.getBounds () : imageBounds;", "-//\tif (bounds == null) return;", "-//\timageBounds = bounds;", "-//\tshort [] height = new short [1];", "-//\tif (OS.GetDataBrowserTableViewRowHeight (handle, height) == OS.noErr) {", "-//\t\tif (height [0] < bounds.height) {", "-//\t\t\tOS.SetDataBrowserTableViewRowHeight (handle, (short) bounds.height);", "-//\t\t}", "-//\t}", "+void setItemHeight (Image image, NSFont font) {", "+\tif (font == null) font = getFont ().handle;", "+\tfloat /*double*/ ascent = font.ascender ();", "+\tfloat /*double*/ descent = -font.descender () + font.leading ();", "+\tint height = (int)Math.ceil (ascent + descent) + 1;", "+\tRectangle bounds = image != null ? image.getBounds () : imageBounds;", "+\tif (bounds != null) {", "+\t\timageBounds = bounds;", "+\t\theight = Math.max (height, bounds.height);", "+\t}", "+\tNSTableView widget = (NSTableView)view;", "+\tif (widget.rowHeight () < height) {", "+\t\twidget.setRowHeight (height);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddcd54fbf8c55aa249375538ef1855ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "f6e418ce08de208f524d556323de8e3b12653f8f", "commitAfterChange": "df118cfee649740c3cfc2ab13c4b8610502d4d4e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void createItem (MenuItem item, int index)", "signatureAfterChange": "  void createItem (MenuItem item, int index)", "diff": ["-\tboolean success = false;", "-\t/*", "-\tif (OS.IsWinCE) {", "-\t\tint flags = OS.MF_BYPOSITION;", "-\t\tif ((style & SWT.SEPARATOR) != 0) flags |= OS.MF_SEPARATOR;", "-\t\tsuccess = OS.InsertMenu (handle, index, flags, item.id, null); ", "-\t} else {", "-\t\tint hHeap = OS.GetProcessHeap ();", "-\t\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, TCHAR.sizeof);", "-\t\tMENUITEMINFO info = new MENUITEMINFO ();", "-\t\tinfo.cbSize = MENUITEMINFO.sizeof;", "-\t\tinfo.fMask = OS.MIIM_ID | OS.MIIM_TYPE;", "-\t\tinfo.wID = item.id;", "-\t\tinfo.fType = item.widgetStyle ();", "-\t\tinfo.dwTypeData = pszText;", "-\t\tsuccess = OS.InsertMenuItem (handle, index, true, info);", "-\t\tif (pszText != 0) OS.HeapFree (hHeap, 0, pszText);", "-\t}", "-\t*/", "-\t", "-\t/*", "-\tif ((style & SWT.SEPARATOR) != 0) return OS.MFT_SEPARATOR;", "-\tif ((style & SWT.RADIO) != 0) return OS.MFT_RADIOCHECK;", "-\treturn OS.MFT_STRING;", "-\t*/", "-\t", "-\tint attributes= 0;", "-\tif ((item.style & SWT.SEPARATOR) != 0) ", "-\t\tattributes= OS.kMenuItemAttrSeparator;", "-\tif (OS.InsertMenuItemTextWithCFString(handle, 0, (short) index, attributes, item.id) == OS.noErr)", "-\t\tsuccess= true;", "-\t", "-\tif (!success) {", "+\tint attributes = 0;", "+\tif ((item.style & SWT.SEPARATOR) != 0) attributes = OS.kMenuItemAttrSeparator;", "+\tint result = OS.InsertMenuItemTextWithCFString (handle, 0, (short) index, attributes, item.id);", "+\tif (result != OS.noErr) {", "-\t/* AW\t", "-\tredraw ();", "-\t*/", "+\tif ((style & SWT.BAR) != 0) {", "+\t\tDisplay display = getDisplay ();", "+\t\tshort menuID = display.nextMenuId ();", "+\t\tint outMenuRef [] = new int [1];", "+\t\tif (OS.CreateNewMenu (menuID, 0, outMenuRef) != OS.noErr) {", "+\t\t\terror (SWT.ERROR_NO_HANDLES);", "+\t\t}", "+\t\tOS.SetMenuItemHierarchicalMenu (handle, (short) (index + 1), outMenuRef [0]);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12a81bf1bbaa797c772cf0944dfffbbb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4279ee67123996a79ea721fcd9de4d0941bad889", "commitAfterChange": "a9785553b91dc77ab23b2555d98bc4ac20e85a1b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  Point computeNativeSize (int h, int wHint, int hHint, boolean changed)", "signatureAfterChange": "  Point computeNativeSize (int h, int wHint, int hHint, boolean changed)", "diff": ["-\tif (wHint == SWT.DEFAULT || hHint == SWT.DEFAULT) {", "+\tif (wHint == SWT.DEFAULT && hHint == SWT.DEFAULT) {", "-\t\twidth = wHint == SWT.DEFAULT ? OS.GTK_WIDGET_REQUISITION_WIDTH (h) : wHint;", "-\t\theight = hHint == SWT.DEFAULT ? OS.GTK_WIDGET_REQUISITION_HEIGHT (h) : hHint;", "+\t\twidth = OS.GTK_WIDGET_REQUISITION_WIDTH (h);", "+\t\theight = OS.GTK_WIDGET_REQUISITION_HEIGHT (h);", "+\t} else if (wHint == SWT.DEFAULT || hHint == SWT.DEFAULT) {", "+\t\tint [] reqWidth = new int [1], reqHeight = new int [1];", "+\t\tOS.gtk_widget_get_size_request (h, reqWidth, reqHeight);", "+\t\tOS.gtk_widget_set_size_request (h, wHint, hHint);", "+\t\tGtkRequisition requisition = new GtkRequisition ();", "+\t\tOS.gtk_widget_size_request (h, requisition);", "+\t\tOS.gtk_widget_set_size_request (h, reqWidth [0], reqHeight [0]);", "+\t\twidth = wHint == SWT.DEFAULT ? requisition.width : wHint;", "+\t\theight = hHint == SWT.DEFAULT ? requisition.height : hHint;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b5d86014bc754d73e92bbf7ce2cdadb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "6b75a078855b24f021604288600b2a0498068c4c", "commitAfterChange": "f21408fc3a35b535bd965047efaf6f2111cf2343", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void bringToTop (boolean force)", "signatureAfterChange": "  void bringToTop (boolean force)", "diff": ["-\tif ((style & SWT.ON_TOP) != 0) return;", "-\t\tif (focusHandle == 0 || !OS.GTK_WIDGET_HAS_FOCUS (focusHandle)) return;", "+\t\tif (focusHandle != 0) {", "+\t\t\tif (!OS.GTK_WIDGET_HAS_FOCUS (focusHandle)) return;", "+\t\t}", "-\tOS.gtk_window_present (shellHandle);", "+\t/*", "+\t* Feature on GTK.  ", "+\t*/", "+\tint window = OS.GTK_WIDGET_WINDOW (shellHandle);", "+\tif ((style & SWT.ON_TOP) != 0 && OS.GDK_WINDOWING_X11 ()) {", "+\t\tint xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);", "+\t\tint xid = OS.gdk_x11_drawable_get_xid (window);", "+\t\tOS.gdk_error_trap_push ();", "+\t\tOS.XSetInputFocus (xDisplay, xid, OS.RevertToParent, OS.gtk_get_current_event_time ());", "+\t\tOS.gdk_error_trap_pop ();", "+\t} else {", "+\t\tOS.gdk_window_focus (window, OS.gtk_get_current_event_time ());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a095d89844d140a04ccf71a48e1b3752", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void dispose()", "signatureAfterChange": " public void dispose()", "diff": ["+}", "+public void dispose() {", "+\tif (isDisposed ()) return;", "+\tint startIndex = -1, endIndex = -1;", "+\tTree parent = this.parent;", "+\tint index = getIndex ();", "+\t/* determine the indices, if any, that will need to be visually updated */", "+\tif (isAvailable ()) {", "+\t\tif (isLastChild () && index > 0) {", "+\t\t\t/* vertical connector lines no longer needed for this item */", "+\t\t\tif (parentItem != null) {", "+\t\t\t\tstartIndex = parentItem.getItems ()[index - 1].availableIndex;", "+\t\t\t} else {", "+\t\t\t\tstartIndex = parent.getItems ()[index - 1].availableIndex;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tstartIndex = availableIndex;", "+\t\tendIndex = parent.availableItems.length - 1;", "+", "+\t/* for performance do this upfront for whole descendent chain */", "+\tTreeItem focusItem = parent.focusItem; ", "+\tif (focusItem != null && focusItem.hasAncestor (this)) {", "+\t\tparent.setFocusItem (this, false);", "+\t\tparent.reassignFocus ();", "+\t\tparent.redrawItem (parent.focusItem.availableIndex);", "+\t\tparentItem.removeItem (this, index);", "+\tdispose (true);", "+\tif (startIndex != -1) {", "+\t\tparent.redrawItems (startIndex, endIndex);", "+\t}", "-", "-public void dispose() {", "-\tif (isDisposed()) return;", "-\t// if the tree is being disposed don't bother collapsing the item since all ", "-\t// items in the tree will be deleted and redraws will not be processed anyway", "-\tTree parent = getParent();", "-\tif (parent.isRemovingAll() == false) {", "-\t\tparent.collapseNoRedraw(this);", "-\t}\t", "-\t", "-\t\tparentItem.removeItem(this);", "-\telse {", "-\t\tparent.removeItem(this);", "-\tsuper.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81e611417f852f9a652bb08339113bec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "2ad54625b601b561f7dbb454803881294bcd0a92", "commitAfterChange": "0d8b325e89c248cd1dcc458649c30917f60d911d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  int createControlTemplate ()", "signatureAfterChange": "  int createControlTemplate ()", "diff": ["+\tint brushProperty = OS.Control_BorderBrushProperty ();", "+\tint brushBinding = OS.gcnew_TemplateBindingExtension (brushProperty);", "+\tOS.FrameworkElementFactory_SetValue (borderNode, brushProperty, brushBinding);", "+\tint thicknessProperty = OS.Control_BorderThicknessProperty ();", "+\tint thicknessBinding = OS.gcnew_TemplateBindingExtension (thicknessProperty);", "+\tOS.FrameworkElementFactory_SetValue (borderNode, thicknessProperty, thicknessBinding);", "-\tint ptr = createDotNetString(scrollViewerStyle, false);", "-\tint stringReader = OS.gcnew_StringReader (ptr);", "+\tint scrollStyle = createDotNetString(scrollViewerStyle, false);", "+\tint stringReader = OS.gcnew_StringReader (scrollStyle);", "-\tOS.GCHandle_Free (ptr);", "+\tOS.GCHandle_Free (brushProperty);", "+\tOS.GCHandle_Free (thicknessProperty);", "+\tOS.GCHandle_Free (brushBinding);", "+\tOS.GCHandle_Free (thicknessBinding);\t", "+\tOS.GCHandle_Free (scrollStyle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da74152533b304c8359af96269b9312b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "b4e13940b738ca380f99e9bdd9e55dadba13486b", "commitAfterChange": "87d79b28b78da8b56644c5ffdf26400d97e4e059", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 29, "signatureBeforeChange": " boolean isMyHandle(int h)", "signatureAfterChange": "  boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["-int parentingHandle() {\treturn fixedHandle; }", "-boolean isMyHandle(int h) {", "-\tif (h == shellHandle)    return true;", "-\tif (h == vboxHandle)     return true;", "-\treturn super.isMyHandle(h);", "+boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize) {", "+\tif (move) {", "+\t\tint [] x_pos = new int [1], y_pos = new int [1];", "+\t\tOS.gtk_window_get_position (shellHandle, x_pos, y_pos);", "+\t\toldX = x_pos [0];  oldY = y_pos [0];", "+\t\tOS.gtk_window_move (shellHandle, x, y);", "+\t}", "+\tif (resize) {", "+\t\tint [] w = new int [1], h = new int [1];", "+\t\tOS.gtk_window_get_size (shellHandle, w, h);", "+\t\toldWidth = w [0];  oldHeight = h [0];", "+\t\twidth -= trimWidth ();  height -= trimHeight ();", "+\t\tOS.gtk_widget_set_size_request (vboxHandle, width, height);", "+\t\tOS.gtk_window_resize (shellHandle, width, height);", "+\t\tDisplay display = getDisplay ();", "+\t\tboolean warnings = display.getWarnings ();", "+\t\tdisplay.setWarnings (false);", "+\t\tOS.gtk_container_resize_children (shellHandle);", "+\t\tdisplay.setWarnings (warnings);", "+\t}", "+\treturn move || resize;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e93a4c996bc694db7b97553c0f9a9ff2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "3be1894e65751f8fdace6da3d386ac8c0f271b36", "commitAfterChange": "8ec8763ff69792db587ad01343e591e017ba32d8", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  int kEventUnicodeKeyPressed (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventUnicodeKeyPressed (int nextHandler, int theEvent, int userData)", "diff": ["+\t", "+\tString string = OS.kAXValueChangedNotification;", "+\tchar [] buffer = new char [string.length ()];", "+\tstring.getChars (0, buffer.length, buffer, 0);", "+\tint stringRef = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\tOS.AXNotificationHIObjectNotify(stringRef, handle, 0);", "+\tOS.CFRelease(stringRef);", "+\tstring = OS.kAXSelectedTextChangedNotification;", "+\tbuffer = new char [string.length ()];", "+\tstring.getChars (0, buffer.length, buffer, 0);", "+\tstringRef = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\tOS.AXNotificationHIObjectNotify(stringRef, handle, 0);", "+\tOS.CFRelease(stringRef);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f995202d76f77d1ff0feacf04a88275c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "d2d17f5077ff607b7a7df14038e843d112e97c85", "commitAfterChange": "cfb2e3c8fc3e5a6ed47748d17194ea24c72687c0", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tstatic int atkObject_ref_state_set (int atkObject)", "signatureAfterChange": "  \tstatic int atkObject_ref_state_set (int atkObject)", "diff": ["-\t\t\t\t\tif ((state & ACC.STATE_DISABLED) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_ENABLED);", "+\t\t\t\t\tif ((state & ACC.STATE_DISABLED) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_ENABLED);", "+\t\t\t\t\tif ((state & ACC.STATE_ACTIVE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_ACTIVE);", "+\t\t\t\t\tif ((state & ACC.STATE_SINGLELINE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SINGLE_LINE);", "+\t\t\t\t\tif ((state & ACC.STATE_MULTILINE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_MULTI_LINE);", "+\t\t\t\t\tif ((state & ACC.STATE_REQUIRED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_REQUIRED);", "+\t\t\t\t\tif ((state & ACC.STATE_INVALID_ENTRY) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_INVALID_ENTRY);", "+\t\t\t\t\tif ((state & ACC.STATE_SUPPORTS_AUTOCOMPLETION) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SUPPORTS_AUTOCOMPLETION);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab7a7e54a90cadc3026d5f03e32e88f4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "ac473adfcb9983f414d3da15b8b15f56fca50498", "commitAfterChange": "7171ce75440e1c2f381de2d9486e536f525ae21d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 23, "signatureBeforeChange": " public boolean startPage()", "signatureAfterChange": " public boolean startPage()", "diff": ["+\tcheckDevice();", "+\tif (printJob == 0) return false;", "+\tdouble width = OS.gtk_page_setup_get_paper_width (pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble height = OS.gtk_page_setup_get_paper_height (pageSetup, OS.GTK_UNIT_POINTS);", "+\tint type = Cairo.cairo_surface_get_type (surface);", "+\tswitch (type) {", "+\t\tcase Cairo.CAIRO_SURFACE_TYPE_PS:", "+\t\t\tCairo.cairo_ps_surface_set_size (surface, width, height);", "+\t\t\tbreak;", "+\t\tcase Cairo.CAIRO_SURFACE_TYPE_PDF:", "+\t\t\tCairo.cairo_pdf_surface_set_size (surface, width, height);", "+\t\t\tbreak;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a844363258522025e3e41ab3d62fdc52", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "f0a6540ce7bf7b6b28e6ad70d90e1bca9fd84690", "commitAfterChange": "87d6ff63a606760c4c8d21e48bca9d1a0287e071", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  void flushExposes ()", "signatureAfterChange": "  void flushExposes ()", "diff": ["-\t/*", "-\t* Feature in GTK.  Calling gdk_event_get() accumulates", "-\t* the outstanding damage for pending GTK expose events.", "-\t* In order to flush all paint events, get all of the", "-\t* events from the queue.", "-\t*/", "-\tint /*long*/ event = 0;", "-\twhile ((event = OS.gdk_event_get ()) != 0) {", "-\t\taddGdkEvent (event);", "+\tOS.gdk_flush ();", "+\tif (OS.GDK_WINDOWING_X11 ()) {", "+\t\tGdkRectangle rect = new GdkRectangle ();", "+\t\tXExposeEvent exposeEvent = new XExposeEvent ();", "+\t\tint /*long*/ xDisplay = OS.GDK_DISPLAY ();", "+\t\tint /*long*/ xEvent = OS.g_malloc (XEvent.sizeof);", "+\t\twhile (OS.XCheckMaskEvent (xDisplay, OS.ExposureMask, xEvent)) {", "+\t\t\tOS.memmove (exposeEvent, xEvent, XExposeEvent.sizeof);", "+\t\t\trect.x = exposeEvent.x;", "+\t\t\trect.y = exposeEvent.y;", "+\t\t\trect.width = exposeEvent.width;", "+\t\t\trect.height = exposeEvent.height;", "+\t\t\tint window = OS.gdk_window_lookup (exposeEvent.window);", "+\t\t\tif (window != 0) OS.gdk_window_invalidate_rect (window, rect, true);", "+\t\t}", "+\t\tOS.g_free (xEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e21e17ca993475bcac76f4fd0bb80e86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "0073562a14ca6d918c9fcaca498a6e957da8a673", "commitAfterChange": "77892ab4398d4200690dd45ab1bd14f928f3edb9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r void adjustTrim ()", "signatureAfterChange": "\r void adjustTrim ()", "diff": ["+\tint [] trimX = new int [1];\r", "-\tOS.XGetGeometry (xDisplay, trimWindow, unused, unused, trimY, trimWidth, trimHeight, trimBorder, unused);\r", "+\tOS.XGetGeometry (xDisplay, trimWindow, unused, trimX, trimY, trimWidth, trimHeight, trimBorder, unused);\r", "-\tint titleHeight = inner_y [0] - trimY [0];\r", "+\tint leftInset = inner_x [0] - trimX [0];\r", "+\tint topInset = inner_y [0] - trimY [0];\r", "-\t\tdisplay.titleHeight = titleHeight;\r", "-\t\t\tdisplay.titleResizeTrimWidth = width;\r", "-\t\t\tdisplay.titleResizeTrimHeight = height;\r", "+\t\t\tdisplay.leftTitleResizeWidth = leftInset;\r", "+\t\t\tdisplay.rightTitleResizeWidth = width - leftInset;\r", "+\t\t\tdisplay.topTitleResizeHeight = topInset;\r", "+\t\t\tdisplay.bottomTitleResizeHeight = height - topInset;\r", "-\t\t\tdisplay.titleBorderTrimWidth = width;\r", "-\t\t\tdisplay.titleBorderTrimHeight = height;\r", "+\t\t\tdisplay.leftTitleBorderWidth = leftInset;\r", "+\t\t\tdisplay.rightTitleBorderWidth = width - leftInset;\r", "+\t\t\tdisplay.topTitleBorderHeight = topInset;\r", "+\t\t\tdisplay.bottomTitleBorderHeight = height - topInset;\r", "-\t\tdisplay.titleTrimWidth = width;\r", "-\t\tdisplay.titleTrimHeight = height;\r", "+\t\tdisplay.leftTitleWidth = leftInset;\r", "+\t\tdisplay.rightTitleWidth = width - leftInset;\r", "+\t\tdisplay.topTitleHeight = topInset;\r", "+\t\tdisplay.bottomTitleHeight = height - topInset;\r", "-\t\tdisplay.resizeTrimWidth = width;\r", "-\t\tdisplay.resizeTrimHeight = height;\r", "+\t\tdisplay.leftResizeWidth = leftInset;\r", "+\t\tdisplay.rightResizeWidth = width - leftInset;\r", "+\t\tdisplay.topResizeHeight = topInset;\r", "+\t\tdisplay.bottomResizeHeight = height - topInset;\r", "-\t\tdisplay.borderTrimWidth = width;\r", "-\t\tdisplay.borderTrimHeight = height;\r", "+\t\tdisplay.leftBorderWidth = leftInset;\r", "+\t\tdisplay.rightBorderWidth = width - leftInset;\r", "+\t\tdisplay.topBorderHeight = topInset;\r", "+\t\tdisplay.bottomBorderHeight = height - topInset;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06be84f754a41c4182ca2bcebd731121", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "78fbb6844fc73f459133f9bf8c4ddac92e6ea668", "commitAfterChange": "6d854d655fc229723d96ef2666b9624a34be09bf", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void _setAlignment (int alignment)", "signatureAfterChange": "  void _setAlignment (int alignment)", "diff": ["+\t\t} else {", "+\t\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 0, 0)) {", "+\t\t\t\tOS.gtk_box_set_child_packing (boxHandle, labelHandle, true, true, 0, OS.GTK_PACK_END);", "+\t\t\t\tOS.gtk_box_set_child_packing (boxHandle, imageHandle, true, true, 0, OS.GTK_PACK_START);", "+\t\t\t}", "+\t\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 0, 0)) {", "+\t\t\t\tOS.gtk_box_set_child_packing (boxHandle, labelHandle, true, true, 0, OS.GTK_PACK_END);", "+\t\t\t\tOS.gtk_box_set_child_packing (boxHandle, imageHandle, true, true, 0, OS.GTK_PACK_START);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 0, 0)) {", "+\t\t\t\tOS.gtk_box_set_child_packing (boxHandle, labelHandle, true, true, 0, OS.GTK_PACK_END);", "+\t\t\t\tOS.gtk_box_set_child_packing (boxHandle, imageHandle, true, true, 0, OS.GTK_PACK_START);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a04e1dab823e63405e81ce1586e09310", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "14581ca5a7841e362a4bb6a68c76d00675c70760", "commitAfterChange": "2882bbd7423650466596733b7f7109e5d58042c8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Program findProgram (String extension)", "signatureAfterChange": " public static Program findProgram (String extension)", "diff": ["-\tif (extension.charAt (0) != '.') extension = '.' + extension;", "-\treturn getProgram(extension);", "+\tchar[] chars;", "+\tif (extension.charAt (0) != '.') {", "+\t\tchars = new char[extension.length()];", "+\t\textension.getChars(0, chars.length, chars, 0);", "+\t} else {", "+\t\tchars = new char[extension.length() - 1];", "+\t\textension.getChars(1, extension.length(), chars, 0);\t\t", "+\t}", "+\tint ext = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "+\tProgram program = null;", "+\tif (ext != 0) {", "+\t\tbyte[] fsRef = new byte[80];", "+\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "+\t\t\tprogram = getProgram(fsRef);", "+\t\t}", "+\t\tOS.CFRelease(ext);", "+\t}", "+\treturn program;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5c468e05982dd72d2df5ed00e5f1615", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "c987944ded12c5bc8fe9dae13a19cf4302cb99f8", "commitAfterChange": "49f82e85be645e8817a03190aaf35c4d31a01df7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void presetChooserDialog ()", "signatureAfterChange": " void presetChooserDialog ()", "diff": ["-\t\tOS.gtk_file_chooser_set_filename (handle, buffer);", "+\t\t/*  Bug in GTK. GtkFileChooser may crash on GTK versions 2.4.10 to 2.6", "+\t\t *  when setting a file name that is not a true canonical path. ", "+\t\t *  The fix is to use the canonical path.", "+\t\t */", "+\t\tint /*long*/ ptr = OS.realpath (buffer, null);", "+\t\tif (ptr != 0) {", "+\t\t\tint length = OS.strlen (ptr);", "+\t\t\tbuffer = new byte [length];", "+\t\t\tOS.memmove (buffer, ptr, length);", "+\t\t\tOS.gtk_file_chooser_set_filename (handle, buffer);", "+\t\t\tOS.g_free (ptr);", "+\t\t}", "-\t\t\t\tOS.gtk_file_chooser_set_filename (handle, buffer);", "+\t\t\t\t/*  Bug in GTK. GtkFileChooser may crash on GTK versions 2.4.10 to 2.6", "+\t\t\t\t *  when setting a file name that is not a true canonical path. ", "+\t\t\t\t *  The fix is to use the canonical path.", "+\t\t\t\t */", "+\t\t\t\tint /*long*/ ptr = OS.realpath (buffer, null);", "+\t\t\t\tif (ptr != 0) {", "+\t\t\t\t\tint length = OS.strlen (ptr);", "+\t\t\t\t\tbuffer = new byte [length];", "+\t\t\t\t\tOS.memmove (buffer, ptr, length);", "+\t\t\t\t\tOS.gtk_file_chooser_set_filename (handle, buffer);", "+\t\t\t\t\tOS.g_free (ptr);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0714715481f9e21fd47ab9ed1d438722", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "c51fb393ab99325d9af1d3ac8aee99c3635a0d78", "commitAfterChange": "5bb98690a54122d614fad2d467c682c2744e7690", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["+\t\t/*", "+\t\t* Bug in Windows.  When a tree has no images and an item is", "+\t\t* expanded or collapsed, for some reason, Windows changes", "+\t\t* the size of the selection.  When the user expands a tree", "+\t\t* item, the selection rectangle is made a few pixels larger.", "+\t\t* When the user collapses an item, the selection rectangle", "+\t\t* is restored to the original size but the selection is not", "+\t\t* redrawn, causing pixel corruption.  The fix is to detect", "+\t\t* this case and redraw the item.", "+\t\t*/", "+\t\tif ((lpht.flags & OS.TVHT_ONITEMBUTTON) != 0) {", "+\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETIMAGELIST, OS.TVSIL_NORMAL, 0) == 0) {", "+\t\t\t\t\tint /*long*/ hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\t\t\tif (hItem != 0) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tif (OS.TreeView_GetItemRect (handle, hItem, rect, false)) {", "+\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08adca1e44009809f386adbfb81c5cd8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "25e0b9cefcf6aad913e775e22fb19b1e3de2a216", "commitAfterChange": "abdb7df6c5ef7f31dd770f626e22ad0d039e1629", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  int kEventMenuDrawItemContent (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMenuDrawItemContent (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\t\tint font = OS.kThemeMenuItemFont;", "-\t\t\t\tif (buffer.length > 1) font = OS.kThemeMenuItemCmdKeyFont;", "+\t\t\t\tint themeFont = OS.kThemeMenuItemFont;", "+\t\t\t\tif (buffer.length > 1) themeFont = OS.kThemeMenuItemCmdKeyFont;", "-\t\t\t\tOS.GetThemeFont ((short) font, (short) OS.smSystemScript, family, size, style);", "-\t\t\t\tFontInfo info = new FontInfo ();", "-\t\t\t\tOS.FetchFontInfo (family[0], size[0], style[0], info);", "+\t\t\t\tOS.GetThemeFont ((short) themeFont, (short) OS.smSystemScript, family, size, style);", "+\t\t\t\tshort id = OS.FMGetFontFamilyFromName (family);", "+\t\t\t\tint [] font = new int [1]; ", "+\t\t\t\tOS.FMGetFontFromFontFamilyInstance (id, style [0], font, null);", "+\t\t\t\tint atsFont = OS.FMGetATSFontRefFromFont (font [0]);", "+\t\t\t\tATSFontMetrics fontMetrics = new ATSFontMetrics ();", "+\t\t\t\tOS.ATSFontGetVerticalMetrics (atsFont, OS.kATSOptionFlagsDefault, fontMetrics);", "+\t\t\t\tOS.ATSFontGetHorizontalMetrics (atsFont, OS.kATSOptionFlagsDefault, fontMetrics);", "-\t\t\t\tOS.GetThemeTextDimensions (str, (short) font, 0, false, size1, null);", "-\t\t\t\trect.left = (short) (rect.right - Math.max (info.widMax, size1.h) - metric [0]);", "-\t\t\t\tOS.DrawThemeTextBox (str, (short) font, OS.kThemeStateActive, false, rect, (short) OS.teFlushLeft, context [0]);", "+\t\t\t\tOS.GetThemeTextDimensions (str, (short) themeFont, 0, false, size1, null);", "+\t\t\t\trect.left = (short) (rect.right - Math.max ((int)(fontMetrics.maxAdvanceWidth * size[0]), size1.h) - metric [0]);", "+\t\t\t\tOS.DrawThemeTextBox (str, (short) themeFont, OS.kThemeStateActive, false, rect, (short) OS.teFlushLeft, context [0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878ee1a716077bcd2351267f74723933", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d3e6e1240786b37729a4402b475774900289164f", "commitAfterChange": "37e38fc8a2a2f0d1ea6ec96886a9dec8af756c5e", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public Rectangle getClipping()", "signatureAfterChange": " public Rectangle getClipping()", "diff": ["-\tif (data.clipRgn == 0) {", "+\tif (data.control == 0) {", "-\t\tif (data.control != 0) {", "-\t\t\tRect bounds = new Rect();", "-\t\t\tOS.GetControlBounds(data.control, bounds);", "-\t\t\twidth = bounds.right - bounds.left;", "-\t\t\theight = bounds.bottom - bounds.top;", "-\t\t}", "-\tOS.GetRegionBounds(data.clipRgn, bounds);", "+\tOS.GetControlBounds(data.control, bounds);", "+\tif (data.clipRgn == 0 && data.visibleRgn == 0) {", "+\t\tint width = bounds.right - bounds.left;", "+\t\tint height = bounds.bottom - bounds.top;", "+\t\treturn new Rectangle(0, 0, width, height);", "+\t}", "+\tint clipping = OS.NewRgn();", "+\tOS.RectRgn(clipping, bounds);", "+\tOS.OffsetRgn(clipping, (short)-bounds.left, (short)-bounds.top);", "+\tif (data.clipRgn != 0) OS.SectRgn(data.clipRgn, clipping, clipping);", "+\tif (data.visibleRgn != 0) {", "+\t\tOS.OffsetRgn(data.visibleRgn, (short)-bounds.left, (short)-bounds.top);", "+\t\tOS.SectRgn(data.visibleRgn, clipping, clipping);", "+\t\tOS.OffsetRgn(data.visibleRgn, bounds.left, bounds.top);", "+\t}", "+\tOS.GetRegionBounds(clipping, bounds);", "+\tOS.DisposeRgn(clipping);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f072e2551566ac7b11da73eb3408e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "61c6d1cfa8202cf6bb13af3022e6b1b082004327", "commitAfterChange": "5355818ed6c80a44bb9a2df251a105a7af080d33", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public void pack ()", "signatureAfterChange": "\r public void pack ()", "diff": ["-\tint headerWidth = OS.SendMessage (hwnd, OS.LVM_GETSTRINGWIDTH, 0, buffer);\r", "+\tint headerWidth = OS.SendMessage (hwnd, OS.LVM_GETSTRINGWIDTH, 0, buffer) + 10;\r", "+\tif (image != null) {\r", "+\t\tint margin = 0;\r", "+\t\tif ((COMCTL32_MAJOR << 16 | COMCTL32_MINOR) >= (5 << 16 | 80)) {\r", "+\t\t\tint hwndHeader = OS.SendMessage (hwnd, OS.LVM_GETHEADER, 0, 0);\r", "+\t\t\tmargin = OS.SendMessage (hwndHeader, OS.HDM_GETBITMAPMARGIN, 0, 0);\r", "+\t\t} else {\r", "+\t\t\tmargin = OS.GetSystemMetrics (OS.SM_CXEDGE) * 3;\r", "+\t\t}\r", "+\t\tRectangle rect = image.getBounds ();\r", "+\t\theaderWidth += rect.width + margin * 2;\r", "+\t}\r", "-\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE_USEHEADER);\r", "+\t\tif (image == null) {\r", "+\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE_USEHEADER);\r", "+\t\t} else {\r", "+\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, headerWidth);\r", "+\t\t}\r"]}], "num": 20018}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e21e6f03b329b183cb57eab2e51f23f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0df4158138e97eb56bfa53fb506760d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/org/eclipse/swt/examples/fileviewer/FileViewer.java", "commitBeforeChange": "fb8d980b4cd59472caba9675ffd0e65eaafdf1d2", "commitAfterChange": "136099e2fa4d4fbe2ef98dc28593ab1cbb6126ff", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "\r \tvoid performDrop(DropTargetEvent event, File targetFile)", "signatureAfterChange": "\r \tprivate void dragSourceHandleDragFinished(DragSourceEvent event, String[] sourceNames)", "diff": ["-\tvoid performDrop(DropTargetEvent event, File targetFile) {\r", "-\t\tvalidateDropTarget(event, targetFile);\t\t\r", "-\r", "-\t\tVector /* of File */ dirtyFiles = new Vector();\r", "-\t\ttry {\t\t\r", "-\t\t\tdirtyFiles.add(targetFile);\r", "-\t\t\tfor (int i = 0; i < sourceNames.length; i++){\r", "-\t\t\t\tfinal File source = new File(sourceNames[i]);\r", "-\t\t\t\tfinal File dest = new File(targetFile, source.getName());\r", "-\t\t\t\t// Perform action on each file\r", "-\t\t\t\tswitch (event.detail) {\r", "-\t\t\t\t\tdefault:\r", "-\t\t\t\t\tcase DND.DROP_COPY:\r", "-\t\t\t\t\t\tif (! copyFileStructure(source, dest)) return;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase DND.DROP_MOVE:\r", "-\t\t\t\t\t\tdirtyFiles.add(source);\r", "-\t\t\t\t\t\tif (! moveFileStructure(source, dest)) return;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t} finally {\r", "-\t\t\tnotifyRefreshFiles((File[]) dirtyFiles.toArray(new File[dirtyFiles.size()]));\r", "+\t */\r", "+\tprivate void dragSourceHandleDragFinished(DragSourceEvent event, String[] sourceNames) {\r", "+\t\tif (sourceNames == null) return;\r", "+\t\tif (event.detail != DND.DROP_MOVE) return;\r", "+\r", "+\t\tVector /* of File */ dirtyFiles = new Vector();\r", "+\t\tfor (int i = 0; i < sourceNames.length; i++){\r", "+\t\t\tfinal File source = new File(sourceNames[i]);\r", "+\t\t\tdirtyFiles.add(source);\r", "+\t\r", "+\t\t\t// Delete each file\r", "+\t\t\tif (! deleteFileStructure(source)) {\r", "+\t\t\t\tMessageBox box = new MessageBox(shell, SWT.ICON_ERROR | SWT.OK);\r", "+\t\t\t\tbox.setText(getResourceString(\"dialog.FailedDelete.title\"));\r", "+\t\t\t\tbox.setMessage(getResourceString(\"dialog.FailedDelete.description\",\r", "+\t\t\t\t\tnew Object[] { source }));\r", "+\t\t\t\tbox.open();\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tnotifyRefreshFiles((File[]) dirtyFiles.toArray(new File[dirtyFiles.size()]));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efc5802c1458b904df9e9756d2485a31", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java", "commitBeforeChange": "fb8d980b4cd59472caba9675ffd0e65eaafdf1d2", "commitAfterChange": "136099e2fa4d4fbe2ef98dc28593ab1cbb6126ff", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "\r \tvoid performDrop(DropTargetEvent event, File targetFile)", "signatureAfterChange": "\r \tprivate void dragSourceHandleDragFinished(DragSourceEvent event, String[] sourceNames)", "diff": ["-\tvoid performDrop(DropTargetEvent event, File targetFile) {\r", "-\t\tvalidateDropTarget(event, targetFile);\t\t\r", "-\r", "-\t\tVector /* of File */ dirtyFiles = new Vector();\r", "-\t\ttry {\t\t\r", "-\t\t\tdirtyFiles.add(targetFile);\r", "-\t\t\tfor (int i = 0; i < sourceNames.length; i++){\r", "-\t\t\t\tfinal File source = new File(sourceNames[i]);\r", "-\t\t\t\tfinal File dest = new File(targetFile, source.getName());\r", "-\t\t\t\t// Perform action on each file\r", "-\t\t\t\tswitch (event.detail) {\r", "-\t\t\t\t\tdefault:\r", "-\t\t\t\t\tcase DND.DROP_COPY:\r", "-\t\t\t\t\t\tif (! copyFileStructure(source, dest)) return;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase DND.DROP_MOVE:\r", "-\t\t\t\t\t\tdirtyFiles.add(source);\r", "-\t\t\t\t\t\tif (! moveFileStructure(source, dest)) return;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t} finally {\r", "-\t\t\tnotifyRefreshFiles((File[]) dirtyFiles.toArray(new File[dirtyFiles.size()]));\r", "+\t */\r", "+\tprivate void dragSourceHandleDragFinished(DragSourceEvent event, String[] sourceNames) {\r", "+\t\tif (sourceNames == null) return;\r", "+\t\tif (event.detail != DND.DROP_MOVE) return;\r", "+\r", "+\t\tVector /* of File */ dirtyFiles = new Vector();\r", "+\t\tfor (int i = 0; i < sourceNames.length; i++){\r", "+\t\t\tfinal File source = new File(sourceNames[i]);\r", "+\t\t\tdirtyFiles.add(source);\r", "+\t\r", "+\t\t\t// Delete each file\r", "+\t\t\tif (! deleteFileStructure(source)) {\r", "+\t\t\t\tMessageBox box = new MessageBox(shell, SWT.ICON_ERROR | SWT.OK);\r", "+\t\t\t\tbox.setText(getResourceString(\"dialog.FailedDelete.title\"));\r", "+\t\t\t\tbox.setMessage(getResourceString(\"dialog.FailedDelete.description\",\r", "+\t\t\t\t\tnew Object[] { source }));\r", "+\t\t\t\tbox.open();\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tnotifyRefreshFiles((File[]) dirtyFiles.toArray(new File[dirtyFiles.size()]));\r"]}], "num": 7234}
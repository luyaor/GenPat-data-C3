{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e26b47310982eec54395f13afee72edb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "463f82f5a48713a308a3d8688af87c70", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "6752d439d76030429e87bce5575ca5fc06a4993b", "commitAfterChange": "44db0957d87cb491a85384855623a3380a72614e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  void mouseDown(int event)", "signatureAfterChange": "  void mouseDown(int id, int sel, int event)", "diff": ["-void mouseDown(int event) {", "+void mouseDown(int id, int sel, int event) {", "+\tsuper.mouseDown(id, sel, event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25f8d624f3149c6be94fc87033bfd069", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "863e2ff132d5e4a7e09c9b48180d8eb9c0d92a32", "commitAfterChange": "13f9e337c61aafbe8198262cd4793c00546e9a9b", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r void sendPaintEvent (int damage)", "signatureAfterChange": "\r \r int drawProc (int widget, int damage)", "diff": ["+int drawProc (int widget, int damage) {\r", "+\tdrawWidget (widget, damage);\r", "+\tif (!hooks(SWT.Paint) && !filters (SWT.Paint)) return OS.Pt_CONTINUE;\r", "+\t\r", "+\t/* Translate the damage to widget coordinates */\r", "+\tshort [] widgetX = new short [1];\r", "+\tshort [] widgetY = new short [1];\r", "+\tOS.PtGetAbsPosition (handle, widgetX, widgetY);\r", "+\tshort [] shellX = new short [1];\r", "+\tshort [] shellY = new short [1];\r", "+\tint shellHandle = OS.PtFindDisjoint (handle);\r", "+\tOS.PtGetAbsPosition (shellHandle, shellX, shellY);\r", "+\tPhPoint_t pt = new PhPoint_t ();\r", "+\tpt.x = (short) (shellX [0] - widgetX [0]);\r", "+\tpt.y = (short) (shellY [0] - widgetY [0]);\r", "+\tdamage = OS.PhCopyTiles (damage);\r", "+\tdamage = OS.PhTranslateTiles (damage, pt);\r", "+\t\r", "+\t/* Send the paint event */\r", "+\tPhTile_t tile = new PhTile_t ();\r", "+\tOS.memmove (tile, damage, PhTile_t.sizeof);\r", "+\tboolean noMerge = (style & SWT.NO_MERGE_PAINTS) != 0 && (state & CANVAS) != 0;\r", "+\tif (tile.next != 0 && noMerge) {\r", "+\t\twhile (tile.next != 0) {\r", "+\t\t\tOS.memmove (tile, tile.next, PhTile_t.sizeof);\r", "+\t\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {\r", "+\t\t\t\tEvent event = new Event ();\r", "+\t\t\t\tevent.x = tile.rect_ul_x;\r", "+\t\t\t\tevent.y = tile.rect_ul_y;\r", "+\t\t\t\tevent.width = tile.rect_lr_x - tile.rect_ul_x + 1;\r", "+\t\t\t\tevent.height = tile.rect_lr_y - tile.rect_ul_y + 1;\r", "+\t\t\t\tGC gc = event.gc = new GC (this);\r", "+\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);\r", "+\t\t\t\tsendEvent (SWT.Paint, event);\r", "+\t\t\t\tif (isDisposed ()) break;\r", "+\t\t\t\tgc.dispose ();\r", "+\t\t\t\tevent.gc = null;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {\r", "+\t\t\tEvent event = new Event ();\r", "+\t\t\tevent.x = tile.rect_ul_x;\r", "+\t\t\tevent.y = tile.rect_ul_y;\r", "+\t\t\tevent.width = tile.rect_lr_x - tile.rect_ul_x + 1;\r", "+\t\t\tevent.height = tile.rect_lr_y - tile.rect_ul_y + 1;\r", "+\t\t\tRegion region = Region.photon_new (tile.next);\r", "+\t\t\tGC gc = event.gc = new GC (this);\r", "+\t\t\tgc.setClipping (region);\r", "+\t\t\tsendEvent (SWT.Paint, event);\r", "+\t\t\tgc.dispose ();\r", "+\t\t\tevent.gc = null;\r", "+\t\t}\r", "+\t}\r", "+\tOS.PhFreeTiles (damage);\r", "+\treturn OS.Pt_CONTINUE;\r", "+}\r", "-\r", "-void sendPaintEvent (int damage) {\r", "-\tif (!hooks(SWT.Paint) && !filters (SWT.Paint)) return;\r", "-\t\r", "-\t/* Translate the damage to widget coordinates */\r", "-\tshort [] widgetX = new short [1];\r", "-\tshort [] widgetY = new short [1];\r", "-\tOS.PtGetAbsPosition (handle, widgetX, widgetY);\r", "-\tshort [] shellX = new short [1];\r", "-\tshort [] shellY = new short [1];\r", "-\tint shellHandle = OS.PtFindDisjoint (handle);\r", "-\tOS.PtGetAbsPosition (shellHandle, shellX, shellY);\r", "-\tPhPoint_t pt = new PhPoint_t ();\r", "-\tpt.x = (short) (shellX [0] - widgetX [0]);\r", "-\tpt.y = (short) (shellY [0] - widgetY [0]);\r", "-\tdamage = OS.PhCopyTiles (damage);\r", "-\tdamage = OS.PhTranslateTiles (damage, pt);\r", "-\t\r", "-\t/* Send the paint event */\r", "-\tPhTile_t tile = new PhTile_t ();\r", "-\tOS.memmove (tile, damage, PhTile_t.sizeof);\r", "-\tboolean noMerge = (style & SWT.NO_MERGE_PAINTS) != 0 && (state & CANVAS) != 0;\r", "-\tif (tile.next != 0 && noMerge) {\r", "-\t\twhile (tile.next != 0) {\r", "-\t\t\tOS.memmove (tile, tile.next, PhTile_t.sizeof);\r", "-\t\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {\r", "-\t\t\t\tEvent event = new Event ();\r", "-\t\t\t\tevent.x = tile.rect_ul_x;\r", "-\t\t\t\tevent.y = tile.rect_ul_y;\r", "-\t\t\t\tevent.width = tile.rect_lr_x - tile.rect_ul_x + 1;\r", "-\t\t\t\tevent.height = tile.rect_lr_y - tile.rect_ul_y + 1;\r", "-\t\t\t\tGC gc = event.gc = new GC (this);\r", "-\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);\r", "-\t\t\t\tsendEvent (SWT.Paint, event);\r", "-\t\t\t\tif (isDisposed ()) break;\r", "-\t\t\t\tgc.dispose ();\r", "-\t\t\t\tevent.gc = null;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {\r", "-\t\t\tEvent event = new Event ();\r", "-\t\t\tevent.x = tile.rect_ul_x;\r", "-\t\t\tevent.y = tile.rect_ul_y;\r", "-\t\t\tevent.width = tile.rect_lr_x - tile.rect_ul_x + 1;\r", "-\t\t\tevent.height = tile.rect_lr_y - tile.rect_ul_y + 1;\r", "-\t\t\tRegion region = Region.photon_new (tile.next);\r", "-\t\t\tGC gc = event.gc = new GC (this);\r", "-\t\t\tgc.setClipping (region);\r", "-\t\t\tsendEvent (SWT.Paint, event);\r", "-\t\t\tgc.dispose ();\r", "-\t\t\tevent.gc = null;\r", "-\t\t}\r", "-\t}\r", "-\tOS.PhFreeTiles (damage);\r", "-}\r"]}], "num": 3101}
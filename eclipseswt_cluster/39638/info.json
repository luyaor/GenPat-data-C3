{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2952c8c6a908c9d0c9983cc6225f62bd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa98473575f3adfaeed9bb4aecc175d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TreeDragAndDropEffect.java", "commitBeforeChange": "47bb44901049b6289bf7804a5ce16cc367c03824", "commitAfterChange": "2cea1d33bc1f2deae063fe599ec13e14a0331a33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void showDropTargetEffect(int effect, int x, int y)", "signatureAfterChange": "  void showDropTargetEffect(int effect, int x, int y)", "diff": ["-\t\t\t\tint topItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);", "-\t\t\t\tint nextItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, hItem == topItem ? OS.TVGN_PREVIOUSVISIBLE : OS.TVGN_NEXTVISIBLE, hItem);", "-\t\t\t\tOS.ImageList_DragShowNolock(false);", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, nextItem);", "-\t\t\t\ttree.update();", "-\t\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\t\tint topItem = OS.SendMessage(handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);", "+\t\t\t\tint nextItem = OS.SendMessage(handle, OS.TVM_GETNEXTITEM, hItem == topItem ? OS.TVGN_PREVIOUSVISIBLE : OS.TVGN_NEXTVISIBLE, hItem);", "+\t\t\t\tboolean scroll = true;", "+\t\t\t\tif (hItem == topItem) {", "+\t\t\t\t\tscroll = nextItem != 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tRECT itemRect = new RECT ();", "+\t\t\t\t\titemRect.left = nextItem;", "+\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\t\t\tPOINT pt = new POINT ();", "+\t\t\t\t\t\tpt.x = itemRect.left;", "+\t\t\t\t\t\tpt.y = itemRect.top;", "+\t\t\t\t\t\tif (OS.PtInRect (rect, pt)) {", "+\t\t\t\t\t\t\tpt.y = itemRect.bottom;", "+\t\t\t\t\t\t\tif (OS.PtInRect (rect, pt)) scroll = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (scroll) {", "+\t\t\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, nextItem);", "+\t\t\t\t\ttree.update();", "+\t\t\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\t\t}", "-\t\t\t\tOS.ImageList_DragShowNolock(false);", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_EXPAND, OS.TVE_EXPAND, hItem);", "-\t\t\t\ttree.update();", "-\t\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CHILD, hItem) != 0) {", "+\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\ttvItem.hItem = hItem;", "+\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\t\tif ((tvItem.state & OS.TVIS_EXPANDED) == 0) {", "+\t\t\t\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_EXPAND, OS.TVE_EXPAND, hItem);", "+\t\t\t\t\t\ttree.update();", "+\t\t\t\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ebfe4d0b4a0dc7b86ca955f693f236f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "83e1dac1af837594e187e72e8d4c2cd60386743f", "commitAfterChange": "aba5823d7335842a1956cc66c799c92c1aafef99", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 42, "signatureBeforeChange": "  boolean fixPinheadScroll (int hItem)", "signatureAfterChange": "  void showItem (int hItem)", "diff": ["-boolean fixPinheadScroll (int hItem) {", "-\t/*", "-\t* Bug in Windows.  When TVM_ENSUREVISIBLE is used to ensure", "-\t* that an item is visible and the client area of the tree is", "-\t* smaller that the size of one item, TVM_ENSUREVISIBLE makes", "-\t* the next item in the tree visible by making it the top item", "-\t* instead of making the desired item visible.  The fix is to", "-\t* detect the case when the client area is too small and make", "-\t* the desired visible item be the top item in the tree.", "-\t*/", "-\tif (OS.SendMessage (handle, OS.TVM_GETVISIBLECOUNT, 0, 0) == 0) {", "-\t\tboolean fixScroll = checkScroll (hItem);", "-\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);", "-\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_FIRSTVISIBLE, hItem);", "-\t\tOS.SendMessage (handle, OS.WM_HSCROLL, OS.SB_TOP, 0);", "-\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);", "-\t\treturn true;", "-\t}", "-\treturn false;", "-}", "+\t/*", "+\t* Bug in Windows.  When TVM_ENSUREVISIBLE is used to ensure", "+\t* that an item is visible and the client area of the tree is", "+\t* smaller that the size of one item, TVM_ENSUREVISIBLE makes", "+\t* the next item in the tree visible by making it the top item", "+\t* instead of making the desired item visible.  The fix is to", "+\t* detect the case when the client area is too small and make", "+\t* the desired visible item be the top item in the tree.", "+\t*/", "+\tif (OS.SendMessage (handle, OS.TVM_GETVISIBLECOUNT, 0, 0) == 0) {", "+\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_FIRSTVISIBLE, hItem);", "+\t\tOS.SendMessage (handle, OS.WM_HSCROLL, OS.SB_TOP, 0);", "+\t} else {", "+\t\tboolean scroll = true;", "+\t\tRECT itemRect = new RECT ();", "+\t\titemRect.left = hItem;", "+\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "+\t\t\tforceResize ();", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\tPOINT pt = new POINT ();", "+\t\t\tpt.x = itemRect.left;", "+\t\t\tpt.y = itemRect.top;", "+\t\t\tif (OS.PtInRect (rect, pt)) {", "+\t\t\t\tpt.y = itemRect.bottom;", "+\t\t\t\tif (OS.PtInRect (rect, pt)) scroll = false;", "+\t\t\t}", "+\t\t}", "+\t\tif (scroll) {", "+\t\t\tboolean fixScroll = checkScroll (hItem);", "+\t\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, hItem);", "+\t\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1745355bcb40f314e0636320deb5e46", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6fe853b29d6dcedf69f8209e4b19fa3cf0a85a8b", "commitAfterChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 67, "signatureBeforeChange": "  void showItem (int hItem)", "signatureAfterChange": "  void showItem (int hItem)", "diff": ["+\t\t\t}", "+\t\t}", "+\t}", "+\tif (hwndParent != 0) {", "+\t\tRECT itemRect = new RECT ();", "+\t\titemRect.left = hItem;", "+\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "+\t\t\tforceResize ();", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetClientRect (hwndParent, rect);", "+\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "+\t\t\tPOINT pt = new POINT ();", "+\t\t\tpt.x = itemRect.left;", "+\t\t\tpt.y = itemRect.top;", "+\t\t\tif (!OS.PtInRect (rect, pt)) {", "+\t\t\t\tpt.y = itemRect.bottom;", "+\t\t\t\tif (!OS.PtInRect (rect, pt)) {", "+\t\t\t\t\tSCROLLINFO info = new SCROLLINFO ();", "+\t\t\t\t\tinfo.cbSize = SCROLLINFO.sizeof;", "+\t\t\t\t\tinfo.fMask = OS.SIF_POS;", "+\t\t\t\t\tinfo.nPos = Math.max (0, pt.x - Tree.INSET / 2);", "+\t\t\t\t\tOS.SetScrollInfo (hwndParent, OS.SB_HORZ, info, true);", "+\t\t\t\t\tsetScrollWidth ();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tupdateScrollBar ();", "+}"]}], "num": 39638}
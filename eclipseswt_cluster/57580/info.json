{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e263405377406dac6981d2212fb18710", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e823c3ffc80b3bc4b20c0daf629a4819", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet208.java", "commitBeforeChange": "f8dfb272bc99d2bad204cd44ee97fd1a111b9ad3", "commitAfterChange": "d24e17d0f9b5a1bd6a237f540a71a2065414834b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t   public static void main (String [] args)", "signatureAfterChange": "\t   public static void main (String [] args)", "diff": ["-\t// ImageData showing variations of Hue\t", "+\t// ImageData showing variations of hue\t", "-\tImageData saturationData = new ImageData(360, 360, 24, palette);", "+\tImageData saturationBrightnessData = new ImageData(360, 360, 24, palette);", "-\tfor (int x = 0; x < saturationData.width; x++) {", "+\tfor (int x = 0; x < saturationBrightnessData.width; x++) {", "-\t\tfor (int y = 0; y < saturationData.height; y++) {", "+\t\tfor (int y = 0; y < saturationBrightnessData.height; y++) {", "-\t\t\tsaturationData.setPixel(x, y, pixel);", "-\t\t\tbrightness -= 1f / saturationData.height;", "+\t\t\tsaturationBrightnessData.setPixel(x, y, pixel);", "+\t\t\tbrightness -= 1f / saturationBrightnessData.height;", "-\t\tsaturation += 1f / saturationData.width;", "+\t\tsaturation += 1f / saturationBrightnessData.width;", "-\tImage saturationImage = new Image(display, saturationData);", "+\tImage saturationImage = new Image(display, saturationBrightnessData);", "-\t", "-\tLabel hueImageLabel = new Label(shell, SWT.CENTER);", "-\thueImageLabel.setImage(hueImage);", "+\tLabel label = new Label(shell, SWT.CENTER);", "+\tlabel.setImage(hueImage);", "-\tdata.widthHint = hueData.width;", "-\tdata.heightHint = hueData.height;", "-\thueImageLabel.setLayoutData(data);\t", "+\tlabel.setLayoutData(data);\t", "-\tLabel label = new Label(shell, SWT.CENTER); //spacer", "+\tlabel = new Label(shell, SWT.CENTER); //spacer", "+\tlabel.setLayoutData(data);", "+\tlabel = new Label(shell, SWT.CENTER); //spacer", "+\tdata = new GridData(SWT.CENTER, SWT.CENTER, false, false, 2, 1);", "-\tLabel saturationImageLabel = new Label(shell, SWT.CENTER);", "-\tsaturationImageLabel.setImage(saturationImage);", "+\tlabel = new Label(shell, SWT.CENTER);", "+\tlabel.setImage(saturationImage);", "-\tdata.widthHint = saturationData.width;", "-\tdata.heightHint = saturationData.height;", "-\tsaturationImageLabel.setLayoutData (data);", "+\tlabel.setLayoutData (data);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c348cd6ce4b45716df1b317b4ca5a43c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "36e64893324aed478d030f7598a602621a5bcfe8", "commitAfterChange": "534780413e6ae17f100718b437459385b1a7c041", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\tbrowserCount++;", "-\tif (browserCount == 1) {", "+\tif (browserCount == 0) {", "+\t\ttry {", "+\t\t\tLibrary.loadLibrary (\"swt-mozilla\"); //$NON-NLS-1$", "+\t\t} catch (UnsatisfiedLinkError e) {", "+\t\t\tdispose();", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t}", "+\t\t", "-\t\tif (mozillaPath == null) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_ERROR_FAILURE));", "+\t\tif (mozillaPath == null) {", "+\t\t\tdispose();", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t}", "-\t\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "-\t\tlocalFile.Release(); ", "+\t\tlocalFile.Release();", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tlocProvider.Release();", "+\t\t\tlocProvider = null;", "+\t\t\tdispose();", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t}", "+\tbrowserCount++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca7ff0e1f845d1e934d5d65849033b35", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java", "commitBeforeChange": "a7026b1b456498a95fd3935ab7b613f4c353caa4", "commitAfterChange": "b066a890fd4acd9279278bb7b913786a38b3a723", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " void createControlTransfer(Composite parent)", "signatureAfterChange": " void createControlTransfer(Composite parent)", "diff": ["+\t// TODO: CCombo and Spinner also have cut(), copy() and paste() API", "-\tdata.heightHint = data.widthHint = SIZE;", "+\tdata.widthHint = HSIZE;", "+\tdata.heightHint = VSIZE;", "+\tcombo.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));", "-\tl = new Label(parent, SWT.NONE);", "-\tl.setVisible(false);", "+\tb = new Button(parent, SWT.PUSH);", "+\tb.setText(\"Cut\");", "+\tb.addSelectionListener(new SelectionAdapter() {", "+\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\tstyledText.cut();", "+\t\t}", "+\t});", "-\tdata.heightHint = data.widthHint = SIZE;", "+\tdata.widthHint = HSIZE;", "+\tdata.heightHint = VSIZE;"]}], "num": 57580}
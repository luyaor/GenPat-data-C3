{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f54d87b546807655f0e4c95bebb6616c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef4eb85365ba95ab9c76ad413c06f5b6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "af5cc90dfe3ff4aef5885413a614e850fd7dc374", "commitAfterChange": "d5f77a7b9ca0f1cf143fb2365b5ebe0fba4a2200", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void resizeHandle (int width, int height)", "signatureAfterChange": "  void resizeHandle (int width, int height)", "diff": ["+", "+void resizeHandle (int width, int height) {", "+\tint topHandle = topHandle ();", "+\tint flags = OS.GTK_WIDGET_FLAGS (topHandle);", "+\tOS.GTK_WIDGET_SET_FLAGS(topHandle, OS.GTK_VISIBLE);", "+\tOS.gtk_widget_set_size_request (fixedHandle, width, height);", "+\tif (frameHandle != 0) {", "+\t\tOS.gtk_widget_set_size_request (frameHandle, width, height);", "+\t\t/*", "+\t\t* Bug in GTK.  For some reason, when the label is", "+\t\t* wrappable and the frame is resized, it does not", "+\t\t* cause the label to be wrapped.  The fix is to", "+\t\t* determine the size that will wrap the label", "+\t\t* and expilictly set that size to force the label", "+\t\t* to wrap.", "+\t\t* ", "+\t\t* This part of the fix causes the label to be", "+\t\t* resized to the preferred size but it still", "+\t\t* won't draw properly.", "+\t\t*/", "+\t\tOS.gtk_widget_set_size_request (handle, -1, -1);", "+\t} else {", "+\t\tOS.gtk_widget_set_size_request (handle, width, height);", "+\t}", "+", "+\t//FIXME - causes scrollbar problems when button child of table", "+\tint parentHandle = parent.parentingHandle ();", "+\tDisplay display = getDisplay ();", "+\tboolean warnings = display.getWarnings ();", "+\tdisplay.setWarnings (false);", "+\tOS.gtk_container_resize_children (parentHandle);", "+\tdisplay.setWarnings (warnings);", "+\tif ((flags & OS.GTK_VISIBLE) == 0) {", "+\t\tOS.GTK_WIDGET_UNSET_FLAGS(topHandle, OS.GTK_VISIBLE);\t", "+\t}", "+\t/*", "+\t* Bug in GTK.  For some reason, when the label is", "+\t* wrappable and the frame is resized, it does not", "+\t* cause the label to be wrapped.  The fix is to", "+\t* determine the size that will wrap the label", "+\t* and expilictly set that size to force the label", "+\t* to wrap.", "+\t* ", "+\t* This part of the fix forces the label to be", "+\t* resized so that it will draw wrapped.", "+\t*/", "+\tif (frameHandle != 0) {", "+\t\tint labelWidth = OS.GTK_WIDGET_WIDTH (handle);", "+\t\tint labelHeight = OS.GTK_WIDGET_HEIGHT (handle);", "+\t\tOS.gtk_widget_set_size_request (handle, labelWidth, labelHeight);", "+\t}", "-", "-void resizeHandle (int width, int height) {", "-\tint topHandle = topHandle ();", "-\tint flags = OS.GTK_WIDGET_FLAGS (topHandle);", "-\tOS.GTK_WIDGET_SET_FLAGS(topHandle, OS.GTK_VISIBLE);", "-\tOS.gtk_widget_set_size_request(handle, -1,-1);", "-\tGtkAllocation alloc = new GtkAllocation();", "-\talloc.width = width;", "-\talloc.height = height;", "-\tOS.gtk_widget_size_allocate(frameHandle, alloc);", "-\tint w = OS.GTK_WIDGET_WIDTH(handle), h = OS.GTK_WIDGET_HEIGHT(handle);", "-\tOS.gtk_widget_set_size_request (fixedHandle, width, height);", "-\tOS.gtk_widget_set_size_request (frameHandle, width, height);", "-\tOS.gtk_widget_set_size_request (handle, w, h);", "-\t//FIXME - causes scrollbar problems when button child of table", "-\tint parentHandle = parent.parentingHandle ();", "-\tDisplay display = getDisplay ();", "-\tboolean warnings = display.getWarnings ();", "-\tdisplay.setWarnings (false);", "-\tOS.gtk_container_resize_children (parentHandle);", "-\tdisplay.setWarnings (warnings);", "-\tif ((flags & OS.GTK_VISIBLE) == 0) {", "-\t\tOS.GTK_WIDGET_UNSET_FLAGS(topHandle, OS.GTK_VISIBLE);\t", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a193ee7eedaf7ccd2b96ee0aeb1446dd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "c4f63c29e9611adcd74f189880a17aa3d88c8950", "commitAfterChange": "83b62633e6ff944e88c618bcc4e60f726f88f3aa", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  static Program gio_getProgram (Display display, int application)", "signatureAfterChange": "  static Program gio_getProgram (Display display, int application)", "diff": ["+\tint length;", "+\tbyte[] buffer;", "-\tint length = OS.strlen (applicationName);", "-\tbyte[] buffer = new byte [length];", "-\tOS.memmove (buffer, applicationName, length);\t\t", "-\tprogram.name = new String (Converter.mbcsToWcs (null, buffer));", "+\tif (applicationName != 0) {", "+\t\tlength = OS.strlen (applicationName);", "+\t\tif (length > 0) {", "+\t\t\tbuffer = new byte [length];", "+\t\t\tOS.memmove (buffer, applicationName, length);", "+\t\t\tprogram.name = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t}", "+\t}", "-\tlength = OS.strlen (applicationCommand);", "-\tbuffer = new byte [length];", "-\tOS.memmove (buffer, applicationCommand, length);\t\t", "-\tprogram.command = new String (Converter.mbcsToWcs (null, buffer));", "+\tif (applicationCommand != 0) {", "+\t\tlength = OS.strlen (applicationCommand);", "+\t\tif (length > 0) {", "+\t\t\tbuffer = new byte [length];", "+\t\t\tOS.memmove (buffer, applicationCommand, length);", "+\t\t\tprogram.command = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t}", "+\t}", "-\tint /*long*/ applicationId = OS.g_app_info_get_id (application);", "-\tlength = OS.strlen(applicationId);", "-\tbuffer = new byte[length + 1];", "-\tOS.memmove(buffer, applicationId, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b147ef8a6b9970607fbbe55e628f9e0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "b4ae2dccb1afcb17304534adc1455fcf71d00263", "commitAfterChange": "8ef930f766ea10009bb20bfa077def090f5df7a9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\tfinal OleListener oleListener = new OleListener() {", "+\tOleListener oleListener = new OleListener() {", "+\t\t\t\t\t\t/* don't send client events if the initial navigate to about:blank has not completed */", "+\t\t\t\t\t\tif (!initialNavigateComplete) break;", "+", "+\t\t\t\t\t\tif (!initialNavigateComplete) {", "+\t\t\t\t\t\t\t/* this event marks the completion of the initial navigate to about:blank */", "+\t\t\t\t\t\t\tinitialNavigateComplete = true;", "+", "+\t\t\t\t\t\t\t/* if browser content has been provided by the client then set it now */", "+\t\t\t\t\t\t\tif (pendingText != null) {", "+\t\t\t\t\t\t\t\tsetText((String)pendingText[0], ((Boolean)pendingText[1]).booleanValue());", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (pendingUrl != null) {", "+\t\t\t\t\t\t\t\t\tsetUrl((String)pendingUrl[0], (String)pendingUrl[1], (String[])pendingUrl[2]);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpendingText = pendingUrl = null;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+", "-\t", "+", "+\t\t\t\t\t\t/* don't send client events if the initial navigate to about:blank has not completed */", "+\t\t\t\t\t\tif (!initialNavigateComplete) break;", "+", "+\t\t\t\t\t\t/* don't send client events if the initial navigate to about:blank has not completed */", "+\t\t\t\t\t\tif (!initialNavigateComplete) break;", "+", "+\t\t\t\t\t\t/* don't send client events if the initial navigate to about:blank has not completed */", "+\t\t\t\t\t\tif (!initialNavigateComplete) break;", "+", "+\tsite.addEventListener(BeforeNavigate2, oleListener);", "+\tsite.addEventListener(CommandStateChange, oleListener);", "+\tsite.addEventListener(DocumentComplete, oleListener);", "+\tsite.addEventListener(NavigateComplete2, oleListener);", "+\tsite.addEventListener(NavigateError, oleListener);", "+\tsite.addEventListener(NewWindow2, oleListener);", "+\tsite.addEventListener(OnMenuBar, oleListener);", "+\tsite.addEventListener(OnStatusBar, oleListener);", "+\tsite.addEventListener(OnToolBar, oleListener);", "+\tsite.addEventListener(OnVisible, oleListener);", "+\tsite.addEventListener(ProgressChange, oleListener);", "+\tsite.addEventListener(StatusTextChange, oleListener);", "+\tsite.addEventListener(TitleChange, oleListener);", "+\tsite.addEventListener(WindowClosing, oleListener);", "+\tsite.addEventListener(WindowSetHeight, oleListener);", "+\tsite.addEventListener(WindowSetLeft, oleListener);", "+\tsite.addEventListener(WindowSetTop, oleListener);", "+\tsite.addEventListener(WindowSetWidth, oleListener);", "-\t* and to work around IE bug http://support.microsoft.com/kb/320153.", "-\t* Do not add the oleListener callbacks until this navigate has completed", "-\t* so that clients will not receive events for this free navigation.", "+\t* and to work around IE bug http://support.microsoft.com/kb/320153.  Any", "+\t* content that is set via setUrl() or setText() will be held as pending", "+\t* until the first DocumentComplete callback is received, indicating the", "+\t* completion of this initial navigate to about:blank.", "-\tsite.addEventListener(DocumentComplete, new OleListener() {", "-\t\tpublic void handleEvent(OleEvent event) {", "-\t\t\tinitialNavigateComplete = true;", "-\t\t\tsite.removeEventListener(DocumentComplete, this);", "-", "-\t\t\tsite.addEventListener(BeforeNavigate2, oleListener);", "-\t\t\tsite.addEventListener(CommandStateChange, oleListener);", "-\t\t\tsite.addEventListener(DocumentComplete, oleListener);", "-\t\t\tsite.addEventListener(NavigateComplete2, oleListener);", "-\t\t\tsite.addEventListener(NavigateError, oleListener);", "-\t\t\tsite.addEventListener(NewWindow2, oleListener);", "-\t\t\tsite.addEventListener(OnMenuBar, oleListener);", "-\t\t\tsite.addEventListener(OnStatusBar, oleListener);", "-\t\t\tsite.addEventListener(OnToolBar, oleListener);", "-\t\t\tsite.addEventListener(OnVisible, oleListener);", "-\t\t\tsite.addEventListener(ProgressChange, oleListener);", "-\t\t\tsite.addEventListener(StatusTextChange, oleListener);", "-\t\t\tsite.addEventListener(TitleChange, oleListener);", "-\t\t\tsite.addEventListener(WindowClosing, oleListener);", "-\t\t\tsite.addEventListener(WindowSetHeight, oleListener);", "-\t\t\tsite.addEventListener(WindowSetLeft, oleListener);", "-\t\t\tsite.addEventListener(WindowSetTop, oleListener);", "-\t\t\tsite.addEventListener(WindowSetWidth, oleListener);", "-", "-\t\t\t/*", "-\t\t\t* If browser content was provided by the client before the", "-\t\t\t* initial navigate to about:blank completed then set it now.", "-\t\t\t*/", "-\t\t\tif (pendingText != null) {", "-\t\t\t\tsetText((String)pendingText[0], ((Boolean)pendingText[1]).booleanValue());", "-\t\t\t} else {", "-\t\t\t\tif (pendingUrl != null) {", "-\t\t\t\t\tsetUrl((String)pendingUrl[0], (String)pendingUrl[1], (String[])pendingUrl[2]);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tpendingText = pendingUrl = null;", "-\t\t}", "-\t});"]}], "num": 38532}
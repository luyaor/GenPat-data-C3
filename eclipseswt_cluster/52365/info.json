{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2dd43b9e331a08dcd403f7b3f605d97", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5894036431ce665c230e395275a0f9aa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t \tString getText ()", "signatureAfterChange": " \t \tString getText ()", "diff": ["-\t\tif (accessible.getAccessibleListeners ().length == 0) return null;", "-\t\tAccessibleControlListener[] listeners = accessible.getControlListeners();", "+\t\tint parentResult = 0;", "+\t\tString parentText = \"\";", "+\t\tif (OS.g_type_is_a (parentType, AccessibleType.ATK_TEXT_TYPE)) {", "+\t\t\tint superType = OS.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (handle));", "+\t\t\tAtkTextIface textIface = new AtkTextIface ();", "+\t\t\tATK.memmove (textIface, superType);", "+\t\t\tint characterCount = 0;", "+\t\t\tif (textIface.get_character_count != 0) {", "+\t\t\t\tcharacterCount = OS.call (textIface.get_character_count, handle);", "+\t\t\t}", "+\t\t\tif (characterCount > 0 && textIface.get_text != 0) {", "+\t\t\t\tparentResult = OS.call (textIface.get_text, handle, 0, characterCount);", "+\t\t\t\tif (parentResult != 0) {", "+\t\t\t\t\tint length = OS.strlen (parentResult);", "+\t\t\t\t\tbyte [] buffer = new byte [length];", "+\t\t\t\t\tOS.memmove (buffer, parentResult, length);", "+\t\t\t\t\tparentText = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "+\t\tif (listeners.length == 0) return parentText;", "+\t\t", "+\t\tevent.result = parentText;", "-\t\t\tlisteners [i].getValue(event);\t\t\t\t", "+\t\t\tlisteners [i].getValue (event);\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d6f016b793f738e6c506908e37651e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "60125763a1efa11e54ec12a70126a066824d2e46", "commitAfterChange": "9c30fc8178dc03f08865834d533d272ba55d6454", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  int calculateWidth (int column, int iter)", "signatureAfterChange": "  int calculateWidth (int column, int iter, boolean recurse)", "diff": ["-int calculateWidth (int /*long*/ column, int /*long*/ iter) {", "+int calculateWidth (int /*long*/ column, int /*long*/ iter, boolean recurse) {", "-\tif (OS.gtk_tree_view_get_expander_column (handle) == column) {\t\t", "+\tint /*long*/ path = 0;", "+", "+\tif (OS.gtk_tree_view_get_expander_column (handle) == column) {", "+\t\t/* indent */", "+\t\tGdkRectangle rect = new GdkRectangle ();", "+\t\tOS.gtk_widget_realize (handle);", "+\t\tpath = OS.gtk_tree_model_get_path (modelHandle, iter);", "+\t\tOS.gtk_tree_view_get_cell_area (handle, path, column, rect);", "+\t\twidth += rect.x;", "+\t\t/* expander */", "+", "+\tif (recurse) {", "+\t\tif (path == 0) path = OS.gtk_tree_model_get_path (modelHandle, iter);", "+\t\tboolean expanded = OS.gtk_tree_view_row_expanded (handle, path);", "+\t\tif (expanded) {", "+\t\t\tint /*long*/ childIter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\t\tboolean valid = OS.gtk_tree_model_iter_children (modelHandle, childIter, iter);", "+\t\t\twhile (valid) {", "+\t\t\t\twidth = Math.max (width, calculateWidth (column, childIter, true));", "+\t\t\t\tvalid = OS.gtk_tree_model_iter_next (modelHandle, childIter);", "+\t\t\t}", "+\t\t\tOS.g_free (childIter);", "+\t\t}", "+\t}", "+", "+\tif (path != 0) OS.gtk_tree_path_free (path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a89164690f337edc74f43d38e2b43544", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "bb3acb6a7f8689f7c815f88c972ddb82333b7d6a", "commitAfterChange": "a3b0979fabcd78b8d5f896dda401ebe780fe2171", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam, boolean forceSelect)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam, boolean forceSelect)", "diff": ["-\tint /*long*/ code = OS.CallWindowProc (TableProc, hwnd, msg, wParam, lParam);", "+\t", "+\t/*", "+\t* Bug in Windows.  For some reason, when the WS_EX_COMPOSITED", "+\t* style is set in a parent of a table and the header is visible,", "+\t* Windows issues an endless stream of WM_PAINT messages.  The", "+\t* fix is to call BeginPaint() and EndPaint() outside of WM_PAINT", "+\t* and pass the paint HDC in to the window proc.", "+\t*/", "+\tboolean fixPaint = false;", "+\tif (msg == OS.WM_PAINT) {", "+\t\tint bits0 = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits0 & OS.LVS_NOCOLUMNHEADER) == 0) {", "+\t\t\tint /*long*/ hwndParent = OS.GetParent (handle), hwndOwner = 0;", "+\t\t\twhile (hwndParent != 0) {", "+\t\t\t\tint bits1 = OS.GetWindowLong (hwndParent, OS.GWL_EXSTYLE);", "+\t\t\t\tif ((bits1 & OS.WS_EX_COMPOSITED) != 0) {", "+\t\t\t\t\tfixPaint = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\thwndOwner = OS.GetWindow (hwndParent, OS.GW_OWNER);", "+\t\t\t\tif (hwndOwner != 0) break;", "+\t\t\t\thwndParent = OS.GetParent (hwndParent);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tint /*long*/ code = 0;", "+\tif (fixPaint) {", "+\t\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "+\t\tint /*long*/ hDC = OS.BeginPaint (hwnd, ps);", "+\t\tcode = OS.CallWindowProc (TableProc, hwnd, OS.WM_PAINT, hDC, lParam);", "+\t\tOS.EndPaint (hwnd, ps);", "+\t} else {", "+\t\tcode = OS.CallWindowProc (TableProc, hwnd, msg, wParam, lParam);", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "544ea36cefe78eb683e750df3edefd49", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "9277db025f5d1e75185d248de5cb658eee97ebe3", "commitAfterChange": "dd4ff530af7ae66e3244439d1c4d54273716b149", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["+\t\t\t\t\t/*", "+\t\t\t\t\t * It is possible (but unlikely) that application code", "+\t\t\t\t\t * could have disposed the widget in the move/resize", "+\t\t\t\t\t * event.  If this happens then return false to indicate", "+\t\t\t\t\t * that the move failed.", "+\t\t\t\t\t */", "+\t\t\t\t\tif (isDisposed ()) {", "+\t\t\t\t\t\tungrab ();", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\tint stepSize = ((gdkEvent.state & OS.GDK_CONTROL_MASK) != 0) ? STEPSIZE_SMALL : STEPSIZE_LARGE;", "+\t\t\t\tint xChange = 0, yChange = 0;\t", "+\t\t\t\t\tcase OS.GDK_Left:", "+\t\t\t\t\t\txChange = -stepSize;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.GDK_Right:", "+\t\t\t\t\t\txChange = stepSize;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.GDK_Up:", "+\t\t\t\t\t\tyChange = -stepSize;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.GDK_Down:", "+\t\t\t\t\t\tyChange = stepSize;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (xChange != 0 || yChange != 0) {", "+\t\t\t\t\tdrawRectangles ();", "+\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\tevent.x = oldX[0] + xChange;", "+\t\t\t\t\tevent.y = oldY[0] + yChange;", "+\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "+\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * The following is intentionally commented.  Since gtk does not currently", "+\t\t\t\t\t\t * support pointer warping, the resize cursor cannot be adjusted.  If this", "+\t\t\t\t\t\t * capability is added in the future then the following should be uncommented,", "+\t\t\t\t\t\t * and the #adjustResizeCursor method can be copied from another platform.", "+\t\t\t\t\t\t */", "+//\t\t\t\t\t\tcursorPos = adjustResizeCursor (xDisplay, xWindow);", "+//\t\t\t\t\t\toldX[0] = cursorPos.x;  oldY[0] = cursorPos.y;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "+\t\t\t\t\t\tsendEvent (SWT.Move, event);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * The following is intentionally commented.  Since gtk does not currently", "+\t\t\t\t\t\t * support pointer warping, the move cursor cannot be adjusted.  If this", "+\t\t\t\t\t\t * capability is added in the future then the following should be uncommented,", "+\t\t\t\t\t\t * and the #adjustMoveCursor method can be copied from another platform.", "+\t\t\t\t\t\t */", "+//\t\t\t\t\t\tcursorPos = adjustMoveCursor (xDisplay, xWindow);", "+//\t\t\t\t\t\toldX[0] = cursorPos.x;  oldY[0] = cursorPos.y;", "+\t\t\t\t\t}", "+\t\t\t\t\t/*", "+\t\t\t\t\t * It is possible (but unlikely) that application code", "+\t\t\t\t\t * could have disposed the widget in the move/resize", "+\t\t\t\t\t * event.  If this happens then return false to indicate", "+\t\t\t\t\t * that the move failed.", "+\t\t\t\t\t */", "+\t\t\t\t\tif (isDisposed ()) {", "+\t\t\t\t\t\tungrab ();", "+\t\t\t\t\t\treturn false;", "+\t\t\t\t\t}", "+\t\t\t\t\tdrawRectangles ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d62df1c703b0671c2722d89429cd535a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "43fd114e4016eb2de2ee29501c22790c09e363ec", "commitAfterChange": "d46b1913bf6637ab5b41fc364ab6cfb3ebbf78c0", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void setMinimumSize (int width, int height)", "signatureAfterChange": " public void setMinimumSize (int width, int height)", "diff": ["-\tminWidth = width == SWT.DEFAULT ? SWT.DEFAULT : Math.max (0, width);", "-\tminHeight = height == SWT.DEFAULT ? SWT.DEFAULT : Math.max (0, height);", "+\tint widthLimit = 0, heightLimit = 0;", "+\tint trim = SWT.TITLE | SWT.CLOSE | SWT.MIN | SWT.MAX;", "+\tif ((style & SWT.NO_TRIM) == 0 && (style & trim) != 0) {", "+\t\twidthLimit = OS.GetSystemMetrics (OS.SM_CXMINTRACK);", "+\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\theightLimit = OS.GetSystemMetrics (OS.SM_CYMINTRACK);", "+\t\t} else {", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\tOS.AdjustWindowRectEx (rect, bits, false, OS.GetWindowLong (handle, OS.GWL_EXSTYLE));", "+\t\t\theightLimit = rect.bottom - rect.top;", "+\t\t}", "+\t} ", "+\tminWidth = Math.max (widthLimit, width);", "+\tminHeight = Math.max (heightLimit, height);", "-\tint newWidth = Math.max (size.x, minWidth), newHeight = Math.max (size.y, minHeight);", "+\tint newWidth = Math.max (size.x, minWidth);", "+\tint newHeight = Math.max (size.y, minHeight);", "+\tif (minWidth <= widthLimit) minWidth = SWT.DEFAULT;", "+\tif (minHeight <= heightLimit) minHeight = SWT.DEFAULT;"]}], "num": 52365}
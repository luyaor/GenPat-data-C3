{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6eb4ea14b84b6e27c50ef99e004c5e82", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf1559b5a5999464fd1b4e607f0fa04c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 427, "methodNumberAfterChange": 298, "signatureBeforeChange": " public void setStyleRanges(StyleRange[] ranges)", "signatureAfterChange": " public void setStyleRanges(StyleRange[] ranges)", "diff": ["-\t// this API can not be used if the client is providing the line styles", "-\tif (userLineStyle) {", "-\t\treturn;", "-\t}", "- \tif (ranges == null) {", "- \t\tSWT.error(SWT.ERROR_NULL_ARGUMENT);", "- \t}", "- \t// check the last range, make sure it falls within the range of the", "- \t// current text ", "- \tif (ranges.length != 0) {", "- \t\tStyleRange last = ranges[ranges.length-1];", "- \t\tint lastEnd = last.start + last.length;", "-\t\tint firstLine = content.getLineAtOffset(ranges[0].start);", "-\t\tint lastLine;", "-\t\tif (lastEnd > content.getCharCount()) {", "-\t\t\tSWT.error(SWT.ERROR_INVALID_RANGE);", "-\t\t} \t", "-\t\tlastLine = content.getLineAtOffset(lastEnd);", "-\t\t// reset all lines affected by the style change", "-\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "- \t}", "- \telse {", "-\t\t// reset all lines", "-\t\tlineCache.reset(0, content.getLineCount(), false);", "- \t}", "-\tdefaultLineStyler.setStyleRanges(ranges);", "-\tredraw(); // should only redraw affected area to avoid flashing", "-\t// make sure that the caret is positioned correctly.", "-\t// caret location may change if font style changes.", "-\t// fixes 1G8FODP", "-\tsetCaretLocation();", "+\tif (isListening(LineGetStyle)) return;", "+ \tif (ranges == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tsetStyleRanges(0, 0, null, ranges, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d865bacedca11ac48cc61c8cea46bbd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "60a9b0215b046632b51b65b9dcf0569516e0686e", "commitAfterChange": "610b674161bbe6c03029856ff3ee4570430b9973", "methodNumberBeforeChange": 280, "methodNumberAfterChange": 287, "signatureBeforeChange": " public void setStyleRanges(StyleRange[] ranges)", "signatureAfterChange": " public void setStyleRanges(StyleRange[] ranges)", "diff": ["- \t// check the last range, make sure it falls within the range of the", "- \t// current text ", "+\tdefaultLineStyler.setStyleRanges(ranges);", "+ \t \t// check the last range, make sure it falls within the range of the", "+ \t \t// current text ", "-\t\t} \t", "+\t\t}", "+\t\t", "+\t\tfor (int i = 0; i < ranges.length; i++) {", "+\t\t\tStyleRange range = ranges[i];", "+\t\t\tif (range != null && range.font != null) {", "+\t\t\t\tif (!isFixedLineHeight()) {", "+\t\t\t\t\tlineCache.setAllLinesDefaultHeight();", "+\t\t\t\t}", "+\t\t\t\tsetLineHeightVariable();", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "-\t\t// reset all lines affected by the style change", "-\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "+\t\tresetCache(firstLine, lastLine - firstLine + 1);", "-\t\t// reset all lines", "-\t\tlineCache.reset(0, content.getLineCount(), false);", "+\t\tresetCache(0, content.getLineCount());", "-\tdefaultLineStyler.setStyleRanges(ranges);", "-\tredraw(); // should only redraw affected area to avoid flashing", "-\t// make sure that the caret is positioned correctly.", "-\t// caret location may change if font style changes.", "-\t// fixes 1G8FODP", "+ \tsuper.redraw();"]}], "num": 46324}
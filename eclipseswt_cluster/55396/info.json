{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ce26683edd0753b43bf2377ca6772ca", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13a8e23bceaf76095edf7fd24bc657b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 7, "signatureBeforeChange": " int getAlignmentOffset(int columnIndex, int columnWidth, GC gc)", "signatureAfterChange": " void computeDisplayTexts (GC gc)", "diff": ["+}", "+void computeDisplayTexts (GC gc) {", "+\tint columnCount = parent.columns.length;", "+\tif (columnCount == 0) return;", "+\t", "+\tFont oldFont = gc.getFont ();", "+\tfor (int i = 0; i < columnCount; i++) {", "+\t\tboolean fontChanged = false;", "+\t\tFont font = getFont (i);", "+\t\tif (!font.equals (oldFont)) {", "+\t\t\tgc.setFont (font);", "+\t\t\tfontChanged = true;", "+\t\tcomputeDisplayText (i, gc);", "+\t\tif (fontChanged) gc.setFont (oldFont);", "-int getAlignmentOffset(int columnIndex, int columnWidth, GC gc) {", "-\tTable parent = getParent();", "-\tTableColumn column = parent.internalGetColumn (columnIndex);", "-\tImage image = getImage(columnIndex);\t", "-\tint alignmentOffset = 0;", "-\tint alignment = column.getAlignment();", "-\tString label  = getText(gc, column);", "-\tint imageWidth = 0;", "-\tint textWidth = gc.stringExtent (label).x;", "-\tPoint imageExtent = parent.getImageExtent();", "-\tif (((columnIndex == TableColumn.FIRST &&\t\t\t\t\t\t\t\t// always add the image width for the first column ", "- \t \t  parent.hasFirstColumnImage() == true) ||\t\t\t\t\t\t\t// if any item in the first column has an image", "-\t\t (columnIndex != TableColumn.FIRST && \t\t\t\t\t\t\t\t// add the image width if it's not the first column", "-\t\t  image != null)) &&\t\t\t\t\t\t\t\t\t\t \t\t// only when the item actually has an image", "-\t\timageExtent != null) {\t\t\t\t\t\t\t\t\t", "-\t\ttextWidth += imageExtent.x;", "-\t}", "-\tif ((alignment & SWT.RIGHT) != 0) {", "-\t\talignmentOffset = columnWidth - textWidth - imageWidth - TEXT_INDENT - TEXT_INDENT;", "-\t}", "-\tif ((alignment & SWT.CENTER) != 0) {", "-\t\talignmentOffset = ((columnWidth - textWidth) / 2) - imageWidth - TEXT_INDENT;", "-\t}", "-\tif (alignmentOffset < 0) alignmentOffset = 0;", "-\treturn alignmentOffset;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0386dffc7fa93362d76701e8a63845ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": " static TableColumn createFillColumn(Table parent)", "signatureAfterChange": " void computeDisplayText (GC gc)", "diff": ["+void computeDisplayText (GC gc) {", "+\tint availableWidth = width - 2 * parent.getHeaderPadding (); ", "+\tif (image != null) {", "+\t\tavailableWidth -= image.getBounds ().width;", "+\t\tavailableWidth -= Table.MARGIN_IMAGE;", "+\t}", "+\tString text = this.text;", "+\tint textWidth = gc.textExtent (text).x;", "+\tif (textWidth <= availableWidth) {", "+\t\tdisplayText = text;", "+\t\treturn;", "+\t}", "- */", "-static TableColumn createFillColumn(Table parent) {", "-\tTableColumn fillColumn = new TableColumn(parent);", "+\t/* Ellipsis will be needed, so subtract their width from the available text width */", "+\tint ellipsisWidth = gc.textExtent (Table.ELLIPSIS).x;", "+\tavailableWidth -= ellipsisWidth;", "+\tif (availableWidth <= 0) {", "+\t\tdisplayText = Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "-\tfillColumn.setIndex(FILL);", "-\treturn fillColumn;", "+\t/* Make initial guess. */", "+\tint index = availableWidth / gc.getFontMetrics ().getAverageCharWidth ();", "+\ttextWidth = gc.textExtent (text.substring (0, index)).x;", "+", "+\t/* Initial guess is correct. */", "+\tif (availableWidth == textWidth) {", "+\t\tdisplayText = text.substring (0, index) + Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "+", "+\t/* Initial guess is too high, so reduce until fit is found. */", "+\tif (availableWidth < textWidth) {", "+\t\tdo {", "+\t\t\tindex--;", "+\t\t\tif (index < 0) {", "+\t\t\t\tdisplayText = Table.ELLIPSIS;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\ttext = text.substring (0, index);", "+\t\t\ttextWidth = gc.textExtent (text).x;", "+\t\t} while (availableWidth < textWidth);", "+\t\tdisplayText = text + Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "+\t", "+\t/* Initial guess is too low, so increase until overrun is found. */", "+\twhile (textWidth < availableWidth) {", "+\t\tindex++;", "+\t\ttextWidth = gc.textExtent (text.substring (0, index)).x;", "+\t}", "+\tdisplayText = text.substring (0, index - 1) + Table.ELLIPSIS;"]}], "num": 55396}
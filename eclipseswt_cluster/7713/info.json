{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29cc1c5abc34d3f8bd8f77b11eac8298", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b313ffc70944672db39a1e17e684342", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "57e16b7b99eba5fe2e5104d125c685fb86330106", "commitAfterChange": "4100ba4ad00fb39125bdfc1a813e812b72175b67", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\r void initializeDefaults ()", "signatureAfterChange": "\r void initializeDefaults ()", "diff": ["-\tdefaultFontList = labelFont;\r", "+\tdefaultFont = labelFont;\r", "-\t\r", "-\t/**\r", "-\t * Initialize the default font id to the first\r", "-\t * font in the default font list\r", "-\t */\r", "-\tint [] buffer = new int [1];\r", "-\tif (!OS.XmFontListInitFontContext (buffer, defaultFontList)) {\r", "-\t\treturn;\r", "-\t}\r", "-\tint context = buffer [0];\r", "-\tXFontStruct fontStruct = new XFontStruct ();\r", "-\tint [] fontStructPtr = new int [1];\r", "-\tint [] fontNamePtr = new int [1];\r", "-\t\r", "-\t/* Take the first entry from the font list */\r", "-\tint fontListEntry = OS.XmFontListNextEntry (context);\r", "-\tint fontPtr = OS.XmFontListEntryGetFont (fontListEntry, buffer);\r", "-\tif (buffer [0] == 0) { \r", "-\t\t/* FontList contains a single font */\r", "-\t\tOS.memmove (fontStruct, fontPtr, XFontStruct.sizeof);\r", "-\t\tdefaultFont = fontStruct.fid;\r", "-\t} else { \r", "-\t\t/* FontList contains a fontSet */\r", "-\t\t/* Take the first font in the font set */\r", "-\t\tint nFonts = OS.XFontsOfFontSet (fontPtr, fontStructPtr, fontNamePtr);\r", "-\t\tif (nFonts > 0) {\r", "-\t\t\tint [] fontStructs = new int [1];\r", "-\t\t\tOS.memmove (fontStructs, fontStructPtr [0], 4);\r", "-\t\t\tOS.memmove (fontStruct, fontStructs [0], XFontStruct.sizeof);\r", "-\t\t\tdefaultFont = fontStruct.fid;\r", "-\t\t}\r", "-\t}\r", "-\tOS.XmFontListFreeFontContext (context);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3997be701d0253f6726cdc816905ef8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "eca9561f00e8f6869c3f064d2cc210213e7961a5", "commitAfterChange": "7b035d7945e49f32511c350507eda7aad65fec22", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 237, "signatureBeforeChange": "\r void showCaret()", "signatureAfterChange": "\r void showCaret()", "diff": ["- */\r", "-\tint line = content.getLineAtOffset(caretOffset);\r", "-\tint lineOffset = content.getOffsetAtLine(line);\r", "-\tint offsetInLine = caretOffset - lineOffset;\r", "-\tString lineText = content.getLine(line);\r", "-\tint xAtOffset = getXAtOffset(lineText, line, offsetInLine);\r", "-\tint clientAreaWidth = getClientArea().width;\r", "-\tint verticalIncrement = getVerticalIncrement();\r", "-\tint horizontalIncrement = clientAreaWidth / 4;\r", "-\tboolean scrolled = false;\t\t\r", "+\tboolean scrolled = scrollCaret();\t\t\r", "-\tif (xAtOffset < 0) {\r", "-\t\t// always make 1/4 of a page visible\r", "-\t\txAtOffset = Math.max(horizontalScrollOffset * -1, xAtOffset - horizontalIncrement);\t\r", "-\t\tscrollHorizontalBar(xAtOffset);\r", "-\t\tscrolled = true;\r", "-\t}\r", "-\telse \r", "-\tif (xAtOffset > clientAreaWidth) {\r", "-\t\t// always make 1/4 of a page visible\r", "-\t\txAtOffset = Math.min(contentWidth - horizontalScrollOffset, xAtOffset + horizontalIncrement);\r", "-\t\tscrollHorizontalBar(xAtOffset - clientAreaWidth);\r", "-\t\tscrolled = true;\r", "-\t}\r", "-\tif (line < topIndex) {\r", "-\t\tsetVerticalScrollOffset(line * verticalIncrement, true);\r", "-\t\tscrolled = true;\r", "-\t}\r", "-\telse\r", "-\tif (line > getBottomIndex()) {\r", "-\t\tsetVerticalScrollOffset((line - getBottomIndex()) * verticalIncrement + verticalScrollOffset, true);\r", "-\t\tscrolled = true;\r", "-\t}\r", "+\t}\r", "+\tif (isBidi()) {\r", "+\t\tsetBidiKeyboardLanguage();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf70b86dfc283eb3ba88c4a35858c698", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "d31e06c4079265cb2689e03fcbc52859dfee4a68", "commitAfterChange": "82177eb745bdc23324198cfa8598d74fb42e9dba", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\t/* clear the default templated foreground. */", "-\tint itemStyle = OS.gcnew_Style ();", "-\tint property = OS.Control_ForegroundProperty ();", "-\tint propertyPath = createDotNetString (\"Foreground\", false);", "-\tint binding = OS.gcnew_Binding (propertyPath);", "-\tint source = OS.gcnew_RelativeSource (OS.RelativeSourceMode_FindAncestor);", "-\tint treeViewType = OS.TreeView_typeid ();", "-\tOS.RelativeSource_AncestorType (source, treeViewType);", "-\tOS.Binding_RelativeSource (binding, source);", "-\tint setter = OS.gcnew_Setter (property, binding);", "-\tint setters = OS.Style_Setters (itemStyle);", "-\tOS.SetterBaseCollection_Add (setters, setter);", "-\tOS.FrameworkElement_Style (handle, itemStyle);", "-\tOS.GCHandle_Free (property);", "-\tOS.GCHandle_Free (propertyPath);", "-\tOS.GCHandle_Free (binding);", "-\tOS.GCHandle_Free (source);", "-\tOS.GCHandle_Free (treeViewType);", "-\tOS.GCHandle_Free (setter);", "-\tOS.GCHandle_Free (setters);", "-\tOS.GCHandle_Free (itemStyle);", "+\tfixStyle ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf11415978a199235f1763f5d00b09ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  int kEventControlDraw (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventControlDraw (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tboolean oldInPaint = display.inPaint;", "-\t\tdisplay.inPaint = true;", "-\t\tint[] context = new int [1];", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context);", "-\t\tint visibleRgn = region [0];", "-\t\tdrawBackground (theControl [0], context [0]);", "-\t\tcallPaintEventHandler (theControl [0], region [0], visibleRgn, theEvent, nextHandler);", "-\t\tdrawWidget (theControl [0], context [0], region [0], visibleRgn, theEvent);", "-\t\tdisplay.inPaint = oldInPaint;", "-\t} else {", "-\t\tif (getDrawCount (theControl [0]) > 0) return OS.noErr;", "-\t\tint visibleRgn = getVisibleRegion (theControl [0], true);", "-\t\tOS.SectRgn(region [0], visibleRgn, visibleRgn);", "-\t\tif (!OS.EmptyRgn (visibleRgn)) {", "-\t\t\tint [] port = new int [1];", "-\t\t\tOS.GetPort (port);", "-\t\t\tOS.LockPortBits (port [0]);", "-//\t\t\tOS.QDSetDirtyRegion (port, visibleRgn);", "-\t\t\tint oldClip = OS.NewRgn ();", "-\t\t\tOS.GetClip (oldClip);", "-\t\t\tOS.SetClip (visibleRgn);", "-\t\t\tdrawBackground (theControl [0], 0);", "-\t\t\tcallPaintEventHandler (theControl [0], region [0], visibleRgn, theEvent, nextHandler);", "-\t\t\tdrawWidget (theControl [0], 0, region [0], visibleRgn, theEvent);", "-\t\t\tOS.SetClip (oldClip);", "-\t\t\tOS.DisposeRgn (oldClip);", "-\t\t\tOS.UnlockPortBits (port [0]);", "-\t\t}", "-\t\tOS.DisposeRgn (visibleRgn);", "-\t}", "+\tDisplay display = this.display;", "+\tboolean oldInPaint = display.inPaint;", "+\tdisplay.inPaint = true;", "+\tint[] context = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context);", "+\tint visibleRgn = region [0];", "+\tdrawBackground (theControl [0], context [0]);", "+\tcallPaintEventHandler (theControl [0], region [0], visibleRgn, theEvent, nextHandler);", "+\tdrawWidget (theControl [0], context [0], region [0], visibleRgn, theEvent);", "+\tdisplay.inPaint = oldInPaint;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4667b21654a86cb436b0bcbad8e7dc6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/internal/ImageList.java", "commitBeforeChange": "846121807a2e67c6346cc340f783d83e0dcf2ab8", "commitAfterChange": "1e991076ca9e6b34673487e9bad2d8f055b18870", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public ImageList (int style)", "signatureAfterChange": "  public ImageList (int style)", "diff": ["+\tthis (style, 32, 32);", "+}", "-\thandle = OS.ImageList_Create (32, 32, flags, 16, 16);"]}], "num": 7713}
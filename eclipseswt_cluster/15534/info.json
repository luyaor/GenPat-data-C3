{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e97183aaa4b0b30d1e3c3f385176514", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad93afcbcede87024e093a3cb20f2810", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java", "commitBeforeChange": "448b7c32dd5df76247beab3c1471acfa9c1a67fb", "commitAfterChange": "7c0268acba0c511c768bec49dcad85a44eb4e61f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tvoid createColorAndFontGroup ()", "signatureAfterChange": " \tvoid createColorAndFontGroup ()", "diff": ["+\t\t\t\tTableItem [] items = colorAndFontTable.getItems();", "+\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\tImage image = items[i].getImage();", "+\t\t\t\t\tif (image != null) image.dispose();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bbdb55f0a9413ad64f684a5747a8c33", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "af02ab1eb432246e7774b53c618d9366a557551a", "commitAfterChange": "9f67525fcf8175adc34d42c0a60e179c1bc70371", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  static Program getProgram (String key)", "signatureAfterChange": "  static Program getProgram (String key)", "diff": ["+\tString[] extentions = getExtensions();", "+\tint i = 0;", "+\twhile (i < extentions.length) {", "+\t\tString ext = extentions[i];", "+\t\tif (ext.equals(key)) break;", "+\t\ti++;", "+\t}", "+\tif (i == extentions.length) return null;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "062a29d4fce387f7a753cad2e5a99931", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableCursor.java", "commitBeforeChange": "08d4b631bb252f1aeb58da08539aaade20e2bce6", "commitAfterChange": "ae8649cbc5451548c97f158ddd1902c665a55911", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void keyDown(Event event)", "signatureAfterChange": "  void keyDown(Event event)", "diff": ["+        \t\tint[] order = table.getColumnOrder();", "+        \t\tint index = 0;", "+        \t\twhile (index < order.length) {", "+        \t\t\tif (order[index] == columnIndex) break;", "+        \t\t\tindex++;", "+\t\t\t\t}", "+\t\t\t\tif (index == order.length) index = 0;", "-\t\t           setRowColumn(rowIndex, Math.max(0, columnIndex - 1), true);", "+\t\t           setRowColumn(rowIndex, order[Math.max(0, index - 1)], true);", "-\t\t           setRowColumn(rowIndex, Math.min(columnCount - 1, columnIndex + 1), true);", "+\t\t           setRowColumn(rowIndex, order[Math.min(columnCount - 1, index + 1)], true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e03a59cc2b68281676d23f580645e382", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "c285571df3944eebcd241f66a71ebd421dad57dd", "commitAfterChange": "ef97fe54dc22960e591264f9a40821c6e605bd48", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["+\tboolean gnomeList = transferData.type == GNOME_LIST_ID;", "+\tint sepLength = gnomeList ? 1 : 2;", "-\t\tif (temp[i] == '\\r' && temp[i+1] == '\\n') {", "-\t\t\tint size =  i - offset;", "-\t\t\tint /*long*/ file = OS.g_malloc(size + 1);", "-\t\t\tbyte[] fileBuffer = new byte[size + 1];", "-\t\t\tSystem.arraycopy(temp, offset, fileBuffer, 0, size);", "-\t\t\tOS.memmove(file, fileBuffer, size + 1);", "-\t\t\tint /*long*/[] newFiles = new int /*long*/[files.length + 1];", "-\t\t\tSystem.arraycopy(files, 0, newFiles, 0, files.length);", "-\t\t\tnewFiles[files.length] = file;", "-\t\t\tfiles = newFiles;", "-\t\t\toffset = i + 2;", "+\t\tboolean terminator = gnomeList ? temp[i] == '\\n' : temp[i] == '\\r' && temp[i+1] == '\\n';", "+\t\tif (terminator) {", "+\t\t\tif (!(gnomeList && offset == 0)) {", "+\t\t\t\t/* The content of the first line in a gnome-list is always either 'copy' or 'cut' */", "+\t\t\t\tint size =  i - offset;", "+\t\t\t\tint /*long*/ file = OS.g_malloc(size + 1);", "+\t\t\t\tbyte[] fileBuffer = new byte[size + 1];", "+\t\t\t\tSystem.arraycopy(temp, offset, fileBuffer, 0, size);", "+\t\t\t\tOS.memmove(file, fileBuffer, size + 1);", "+\t\t\t\tint /*long*/[] newFiles = new int /*long*/[files.length + 1];", "+\t\t\t\tSystem.arraycopy(files, 0, newFiles, 0, files.length);", "+\t\t\t\tnewFiles[files.length] = file;", "+\t\t\t\tfiles = newFiles;", "+\t\t\t}", "+\t\t\toffset = i + sepLength;", "-\tif (offset < temp.length - 2) {", "+\tif (offset < temp.length - sepLength) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ffd825e021b5905d3d28601aadda4c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "23f141903c49cd2a4f94e6b442d2f9668cacef88", "commitAfterChange": "15abd1c12d68db4380f484faa3ce336579f17bba", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  void setWindowVisible (boolean visible)", "signatureAfterChange": "  void setWindowVisible (boolean visible)", "diff": ["-\t\t/*", "-\t\t* Bug in the Macintosh.  ShowWindow() does not activate the shell when an ON_TOP", "-\t\t* shell is active. The fix is to detect that the shell was not activated and", "-\t\t* activate it.", "-\t\t*/", "-\t\tShell activeShell = null;", "-\t\tif ((style & SWT.ON_TOP) == 0) {", "-\t\t\tactiveShell = display.getActiveShell ();", "-\t\t}", "+", "-\t\t\tif (activeShell != null && activeShell == display.getActiveShell () && (activeShell.style & SWT.ON_TOP) != 0) {", "-\t\t\t\tbringToTop (false);", "+\t\t\t/*", "+\t\t\t* Bug in the Macintosh.  ShowWindow() does not activate the shell when an ON_TOP", "+\t\t\t* shell is visible. The fix is to detect that the shell was not activated and", "+\t\t\t* activate it.", "+\t\t\t*/", "+\t\t\tif (display.getActiveShell () != this) {", "+\t\t\t\tShell[] shells = display.getShells();", "+\t\t\t\tfor (int i = 0; i < shells.length; i++) {", "+\t\t\t\t\tShell shell = shells [i];", "+\t\t\t\t\tif ((shell.style & SWT.ON_TOP) != 0 && shell.isVisible ()) {", "+\t\t\t\t\t\tbringToTop(false);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "735653f67f93302604e12a0ac756f305", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "32b8630eb393f9044e2b152f66502a2c7e52b2bc", "commitAfterChange": "4c1ca4c4b2c952a1c6e6059382f1991c4128f2e5", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  int kEventWindowActivated (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventWindowActivated (int nextHandler, int theEvent, int userData)", "diff": ["+\t\tShell[] shells = display.getShells ();", "+\t\tfor (int i = 0; i < shells.length; i++) {", "+\t\t\tShell shell = shells [i];", "+\t\t\tif (shell.active && !shell.isDisposed ()) shell.kEventWindowDeactivated ();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaa0551e72d8114372daead1b17223f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "be518991c12a9ca18071e368dfe879c94fa2722f", "commitAfterChange": "7fb06e9229d8e53de398a263a33af7e61a8f59eb", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " public void update ()", "signatureAfterChange": " public void update ()", "diff": ["-//\tShell [] shells = getShells ();", "-//\tfor (int i=0; i<shells.length; i++) {", "-//\t\tShell shell = shells [i];", "-//\t\tif (!shell.isDisposed ()) shell.update (true);", "-//\t}", "-", "+\tShell [] shells = getShells ();", "+\tfor (int i=0; i<shells.length; i++) {", "+\t\tShell shell = shells [i];", "+\t\tif (!shell.isDisposed ()) shell.update (true);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "767c3991bca5069570d755d84e4f8346", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "72f73318c5711896c5365f8b95372300980c5b89", "commitAfterChange": "b7ed75a0ec108f50d94e56dde8af895828f9f6a6", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "\r \r boolean setTabItemFocus ()", "signatureAfterChange": "\r \r boolean setTabItemFocus ()", "diff": ["+\tControl [] path = getPath ();\r", "+\tfor (int i=0; i<path.length; i++) {\r", "+\t\tPoint size = path [i].getSize ();\r", "+\t\tif (size.x == 0 || size.y == 0) return false;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad437dfda0d0a2bafd2fc9e8f30af88e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "32b8630eb393f9044e2b152f66502a2c7e52b2bc", "commitAfterChange": "4c1ca4c4b2c952a1c6e6059382f1991c4128f2e5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  int appleEventProc (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int appleEventProc (int nextHandler, int theEvent, int userData)", "diff": ["+\t\t\t\tcase OS.kEventAppDeactivated: {", "+\t\t\t\t\tShell [] shells = getShells ();", "+\t\t\t\t\tfor (int i = 0; i < shells.length; i++) {", "+\t\t\t\t\t\tShell shell = shells [i];", "+\t\t\t\t\t\tif (shell.active && !shell.isDisposed ()) shell.kEventWindowDeactivated ();", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec188dba335e2a48c9b10544fe385ed1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "971acde0c0dda01a2bbf2f82eb24b808d1769d05", "commitAfterChange": "28b6234802ba59fc40a1f3131356be01d668d9ca", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected void release ()", "signatureAfterChange": " protected void release ()", "diff": ["-\t/* Free the X IO error handler */", "-\tOS.XSetIOErrorHandler (xIOErrorProc);", "-\txIOErrorCallback.dispose (); xIOErrorCallback = null;", "-\txNullIOErrorProc = xIOErrorProc = 0;", "-\t", "-\t/* Free the X error handler */", "-\t/*", "-\t* Bug in Motif.  For some reason, when a pixmap is", "-\t* set into a button or label, despite the fact that", "-\t* the pixmap is cleared from the widget before it", "-\t* is disposed, Motif still references the pixmap", "-\t* and attempts to dispose it in XtDestroyApplicationContext().", "-\t* The fix is to install the null error handler to avoid the", "-\t* warning.", "-\t*", "-\t* NOTE: The warning callback is leaked.", "-\t*/", "-\tOS.XSetErrorHandler (xNullErrorProc);", "-//\tOS.XSetErrorHandler (xErrorProc);", "-//\txErrorCallback.dispose (); xErrorCallback = null;", "-//\txNullErrorProc = xErrorProc = 0;", "+\tint index = 0;", "+\twhile (index < Devices.length) {", "+\t\tif (Devices [index] != null) break;", "+\t\tindex++;", "+\t}", "+\tif (index == Devices.length) {", "+\t\t/* Free the X IO error handler */", "+\t\tOS.XSetIOErrorHandler (XIOErrorProc);", "+\t\tXIOErrorCallback.dispose (); XIOErrorCallback = null;", "+\t\tXNullIOErrorProc = XIOErrorProc = 0;", "+\t\t", "+\t\t/* Free the X error handler */", "+\t\t/*", "+\t\t* Bug in Motif.  For some reason, when a pixmap is", "+\t\t* set into a button or label, despite the fact that", "+\t\t* the pixmap is cleared from the widget before it", "+\t\t* is disposed, Motif still references the pixmap", "+\t\t* and attempts to dispose it in XtDestroyApplicationContext().", "+\t\t* The fix is to avoid warnings by leaving our handler", "+\t\t* and settings warnings to false.", "+\t\t*", "+\t\t* NOTE: The warning callback is leaked.", "+\t\t*/", "+\t\twarnings = false;", "+//\t\tOS.XSetErrorHandler (XErrorProc);", "+//\t\tXErrorCallback.dispose (); XErrorCallback = null;", "+//\t\tXNullErrorProc = XErrorProc = 0;", "+\t}"]}], "num": 15534}
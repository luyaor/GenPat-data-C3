{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a98d6c923d139a999f7beb257a5ff55b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc48184a05d4b719077770fc036db081", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r \r int processMouse (int info)", "signatureAfterChange": "\r \r int processMouse (int info)", "diff": ["+\tif ((ev.processing_flags & OS.Ph_FAKE_EVENT) != 0) {\r", "+\t\treturn OS.Pt_CONTINUE;\r", "+\t}\r", "-\tint type = ev.type;\r", "-\tint buttons = pe.buttons;\r", "-\tint key_mods = pe.key_mods;\r", "-\tint button_state = pe.button_state;\r", "-\tint click_count = pe.click_count;\r", "-\tswitch (buttons) {\r", "+\tswitch (pe.buttons) {\r", "-\tif ((key_mods & OS.Pk_KM_Alt) != 0) event.stateMask |= SWT.ALT;\r", "-\tif ((key_mods & OS.Pk_KM_Shift) != 0) event.stateMask |= SWT.SHIFT;\r", "-\tif ((key_mods & OS.Pk_KM_Ctrl) != 0) event.stateMask |= SWT.CONTROL;\r", "-\tif ((button_state & OS.Ph_BUTTON_SELECT) != 0) event.stateMask |= SWT.BUTTON1;\r", "-\tif ((button_state & OS.Ph_BUTTON_ADJUST) != 0) event.stateMask |= SWT.BUTTON2;\r", "-\tif ((button_state & OS.Ph_BUTTON_MENU) != 0) event.stateMask |= SWT.BUTTON3;\r", "-\tif (type == OS.Ph_EV_BUT_PRESS) {\r", "-\t\tif (buttons == OS.Ph_BUTTON_SELECT && (button_state & OS.Ph_BUTTON_SELECT) != 0) {\r", "-\t\t\tevent.stateMask &= ~SWT.BUTTON1;\r", "-\t\t}\r", "-\t\tif (buttons == OS.Ph_BUTTON_ADJUST && (button_state & OS.Ph_BUTTON_ADJUST) != 0) {\r", "-\t\t\tevent.stateMask &= ~SWT.BUTTON2;\r", "-\t\t}\r", "-\t\tif (buttons == OS.Ph_BUTTON_MENU && (button_state & OS.Ph_BUTTON_MENU) != 0) {\r", "-\t\t\tevent.stateMask &= ~SWT.BUTTON3;\r", "-\t\t}\r", "-\t}\r", "-\tif (type == OS.Ph_EV_BUT_RELEASE) {\r", "-\t\tif (buttons == OS.Ph_BUTTON_SELECT) event.stateMask |= SWT.BUTTON1;\r", "-\t\tif (buttons == OS.Ph_BUTTON_ADJUST) event.stateMask |= SWT.BUTTON2;\r", "-\t\tif (buttons == OS.Ph_BUTTON_MENU) event.stateMask |= SWT.BUTTON3;\r", "-\t}\r", "+\tsetMouseState (event, pe);\r", "-\tif (type == OS.Ph_EV_BUT_PRESS && click_count == 2) {\r", "-\t\tpostEvent (SWT.MouseDoubleClick, event);\r", "+\tif (ev.type == OS.Ph_EV_BUT_PRESS && pe.click_count == 2) {\r", "+\t\tEvent clickEvent = new Event ();\r", "+\t\tclickEvent.time = event.time;\r", "+\t\tclickEvent.x = event.x;\r", "+\t\tclickEvent.y = event.y;\r", "+\t\tclickEvent.button = event.button;\r", "+\t\tclickEvent.stateMask = event.stateMask;\r", "+\t\tpostEvent (SWT.MouseDoubleClick, clickEvent);\r", "-\treturn OS.Pt_END;\r", "+\tev.processing_flags |= OS.Ph_CONSUMED;\r", "+\tOS.memmove (cbinfo.event, ev, PhEvent_t.sizeof);\r", "+\treturn OS.Pt_CONTINUE;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b5020ca4d5955553b74bdea98a0bf7b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "00d5736c6ded01b673225fd094e947d8370e60ec", "commitAfterChange": "2db73adf5b67e4cd6d82055843808cdcf5220029", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": "  \tid getAttributedStringForRangeParameterizedAttribute(id parameter, int childID)", "signatureAfterChange": "  \tid getAttributedStringForRangeParameterizedAttribute(id parameter, int childID)", "diff": ["-\t\t\tif (attributeRange.location < range.location) {", "-\t\t\t\tattributeRange.length -= (range.location - attributeRange.location);", "-\t\t\t\tattributeRange.location = range.location;", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (attributeRange.location + attributeRange.length > range.location + range.length) {", "-\t\t\t\tattributeRange.length = range.location + range.length - attributeRange.location; ", "-\t\t\t}", "-\t\t\t", "-\t\t\t\t\tfloat /*double*/[] comps = ts.foreground.handle;", "-\t\t\t\t\tNSColor fgColor = NSColor.colorWithDeviceRed(comps[0], comps[1], comps[2], comps[3]);", "-\t\t\t\t\tattribString.addAttribute(OS.NSAccessibilityForegroundColorTextAttribute, fgColor, attributeRange);", "+\t\t\t\t\taddCGColor(ts.foreground.handle, attribString, OS.NSAccessibilityForegroundColorTextAttribute, attributeRange);", "-\t\t\t\t\tfloat /*double*/[] comps = ts.background.handle;", "-\t\t\t\t\tNSColor fgColor = NSColor.colorWithDeviceRed(comps[0], comps[1], comps[2], comps[3]);", "-\t\t\t\t\tattribString.addAttribute(OS.NSAccessibilityBackgroundColorTextAttribute, fgColor, attributeRange);", "+\t\t\t\t\taddCGColor(ts.background.handle, attribString, OS.NSAccessibilityBackgroundColorTextAttribute, attributeRange);", "-\t\t\t\t\tfloat /*double*/ [] comps = ts.underlineColor.handle;", "-\t\t\t\t\tNSColor fgColor = NSColor.colorWithDeviceRed(comps[0], comps[1], comps[2], comps[3]);", "-\t\t\t\t\tattribString.addAttribute(OS.NSAccessibilityUnderlineColorTextAttribute, fgColor, attributeRange);", "+\t\t\t\t\taddCGColor(ts.underlineColor.handle, attribString, OS.NSAccessibilityUnderlineColorTextAttribute, attributeRange);", "-\t\t\t\t\t\tfloat /*double*/ [] comps = ts.strikeoutColor.handle;", "-\t\t\t\t\t\tNSColor fgColor = NSColor.colorWithDeviceRed(comps[0], comps[1], comps[2], comps[3]);", "-\t\t\t\t\t\tattribString.addAttribute(OS.NSAccessibilityStrikethroughColorTextAttribute, fgColor, attributeRange);", "+\t\t\t\t\t\taddCGColor(ts.strikeoutColor.handle, attribString, OS.NSAccessibilityStrikethroughColorTextAttribute, attributeRange);", "-//\t\t// Now add the alignment, justification, and indent, if available.", "-//\t\tAccessibleAttributeEvent docAttributes = new AccessibleAttributeEvent(this);", "-//\t\tdocAttributes.indent = Integer.MAX_VALUE; // if unchanged no listener filled it in.", "-//\t\tif (accessibleAttributeListeners.size() > 0) {", "-//\t\t\tfor (int i = 0; i < accessibleAttributeListeners.size(); i++) {", "-//\t\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "-//\t\t\t\tlistener.getAttributes(docAttributes);", "-//\t\t\t}", "-//\t\t}", "+\t\t// Now add the alignment, justification, and indent, if available.", "+\t\tAccessibleAttributeEvent docAttributes = new AccessibleAttributeEvent(this);", "+\t\tdocAttributes.indent = Integer.MAX_VALUE; // if unchanged no listener filled it in.", "+\t\tif (accessibleAttributeListeners.size() > 0) {", "+\t\t\tfor (int i = 0; i < accessibleAttributeListeners.size(); i++) {", "+\t\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "+\t\t\t\tlistener.getAttributes(docAttributes);", "+\t\t\t}", "+\t\t}", "+\t\tif (docAttributes.indent != Integer.MAX_VALUE) {", "+\t\t\tNSMutableDictionary paragraphDict = NSMutableDictionary.dictionaryWithCapacity(3);", "+\t\t\tint osAlignment = 0;", "+\t\t\t// FIXME: Doesn't account for right-to-left text?", "+\t\t\tswitch (docAttributes.alignment) {", "+\t\t\tcase SWT.CENTER:", "+\t\t\t\tosAlignment = OS.NSCenterTextAlignment;", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.RIGHT:", "+\t\t\t\tosAlignment = OS.NSRightTextAlignment;", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.LEFT:", "+\t\t\tdefault:", "+\t\t\t\tosAlignment = OS.NSLeftTextAlignment;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tparagraphDict.setValue(NSNumber.numberWithInt(osAlignment), NSString.stringWith(\"AXTextAlignment\"));", "+\t\t\t//paragraphDict.setValue(NSNumber.numberWithInt(osAlignment), NSString.stringWith(\"AXVisualTextAlignment\"));", "+\t\t\tattribString.addAttribute(NSString.stringWith(\"AXParagraphStyle\"), paragraphDict, range);", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "190d7d3f7a613ac8af0f8a45dc3ee45f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 49, "signatureBeforeChange": "\r \r int processKey (int info)", "signatureAfterChange": "\r \r int processKey (int info)", "diff": ["-\tif (info == 0) return OS.Pt_END;\r", "+\tif (!hasFocus ()) return OS.Pt_PROCESS;\r", "+\tif (info == 0) return OS.Pt_PROCESS;\r", "-\tif (cbinfo.event == 0) return OS.Pt_END;\r", "+\tif (cbinfo.event == 0) return OS.Pt_PROCESS;\r", "+\tif ((ev.processing_flags & OS.Ph_FAKE_EVENT) != 0) {\r", "+\t\treturn OS.Pt_PROCESS;\r", "+\t}\r", "-\tif (data == 0) return OS.Pt_END;\r", "+\tif (data == 0) return OS.Pt_PROCESS;\r", "-\t/*\r", "-\t* Feature in Photon.  The multi-line text widget consumes\r", "-\t* key down events.  The fix is to use a filter callback\r", "-\t* for the text widget to see the key down.  The following\r", "-\t* code ignores key up when called from a filter callback.\r", "-\t*/\r", "-\tif (cbinfo.reason == OS.Pt_CB_FILTER) {\r", "-\t\tif ((ke.key_flags & (OS.Pk_KF_Key_Down | OS.Pk_KF_Key_Repeat)) == 0) {\r", "-\t\t\treturn OS.Pt_PROCESS;\r", "-\t\t}\r", "-\t}\r", "+\r", "-\t\treturn (cbinfo.reason == OS.Pt_CB_FILTER) ? OS.Pt_PROCESS : OS.Pt_END;\r", "+\t\treturn OS.Pt_PROCESS;\r", "-\t\t\t\t\t/*\r", "-\t\t\t\t\t* Bug in Photon.  Despite the fact that we return Pt_END,\r", "-\t\t\t\t\t* for some reason, Photon continues to forward the event\r", "-\t\t\t\t\t* to the parent.  The fix is to change the event type to\r", "-\t\t\t\t\t* zero.  This doesn't stop the forwarding but makes the\r", "-\t\t\t\t\t* event unknown.\r", "-\t\t\t\t\t*/\r", "-\t\t\t\t\tif (cbinfo.reason == OS.Pt_CB_FILTER) return OS.Pt_PROCESS;\r", "-\t\t\t\t\tOS.memmove (cbinfo.event, new int [1], 4);\r", "-\t\t\t\t\treturn OS.Pt_END;\r", "+\t\t\t\t\treturn OS.Pt_PROCESS;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\t\t\t\t\t\t\r", "+\tif ((ke.key_flags & (OS.Pk_KF_Key_Down | OS.Pk_KF_Key_Repeat)) != 0) {\r", "+\t\t\r", "+\t\t/*\r", "+\t\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl\r", "+\t\t* or Alt is pressed. The fix is to detect this case and try to\r", "+\t\t* use the key_cap value.\r", "+\t\t*/\r", "+\t\tint key = ke.key_sym;\r", "+\t\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) == 0) {\r", "+\t\t\tkey = 0;\r", "+\t\t\tif ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {\r", "+\t\t\t\tif (ke.key_cap == OS.Pk_Tab && (ke.key_mods & OS.Pk_KM_Ctrl) != 0) {\r", "+\t\t\t\t\tkey = OS.Pk_Tab;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tswitch (key) {\r", "+\t\t\tcase OS.Pk_Escape:\r", "+\t\t\tcase OS.Pk_Return:\r", "+\t\t\tcase OS.Pk_KP_Tab:\r", "+\t\t\tcase OS.Pk_Tab:\r", "+\t\t\tcase OS.Pk_Up:\r", "+\t\t\tcase OS.Pk_Down:\r", "+\t\t\tcase OS.Pk_Left:\r", "+\t\t\tcase OS.Pk_Right: {\r", "+\t\t\t\tif (key != OS.Pk_Return) {\r", "+\t\t\t\t\tev.processing_flags |= OS.Ph_NOT_CUAKEY;\r", "+\t\t\t\t\tOS.memmove (cbinfo.event, ev, PhEvent_t.sizeof);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (translateTraversal (key, ke)) {\r", "+\t\t\t\t\tev.processing_flags |= OS.Ph_CONSUMED;\r", "+\t\t\t\t\tOS.memmove (cbinfo.event, ev, PhEvent_t.sizeof);\r", "+\t\t\t\t\treturn OS.Pt_PROCESS;\r", "+\t\t\t\t}\r", "-\t\t\t\tcase OS.Pk_Clear: \tevent.character = 0xB; break;\r", "-\t\t\t\tcase OS.Pk_Return: \tevent.character = '\\r'; break;\r", "+\t\t\t\tcase OS.Pk_Clear: \t\tevent.character = 0xB; break;\r", "+\t\t\t\tcase OS.Pk_Return: \t\tevent.character = '\\r'; break;\r", "-\t\t\t\tcase OS.Pk_Escape:\tevent.character = 0x1B; break;\r", "-\t\t\t\tcase OS.Pk_Delete:\tevent.character = 0x7F; break;\r", "+\t\t\t\tcase OS.Pk_Escape:\t\tevent.character = 0x1B; break;\r", "+\t\t\t\tcase OS.Pk_Delete:\t\tevent.character = 0x7F; break;\r", "-\tif ((ke.key_mods & OS.Pk_KM_Alt) != 0) {\r", "-\t\tif (type != SWT.KeyDown || event.keyCode != SWT.ALT) {\r", "-\t\t\tevent.stateMask |= SWT.ALT;\r", "-\t\t}\r", "-\t}\r", "-\tif ((ke.key_mods & OS.Pk_KM_Shift) != 0) {\r", "-\t\tif (type != SWT.KeyDown || event.keyCode != SWT.SHIFT) {\r", "-\t\t\tevent.stateMask |= SWT.SHIFT;\r", "-\t\t}\r", "-\t}\r", "-\tif ((ke.key_mods & OS.Pk_KM_Ctrl) != 0) {\r", "-\t\tif (type != SWT.KeyDown || event.keyCode != SWT.CONTROL) {\r", "-\t\t\tevent.stateMask |= SWT.CONTROL;\r", "-\t\t}\r", "-\t}\r", "-\tif ((ke.button_state & OS.Ph_BUTTON_SELECT) != 0) event.stateMask |= SWT.BUTTON1;\r", "-\tif ((ke.button_state & OS.Ph_BUTTON_ADJUST) != 0) event.stateMask |= SWT.BUTTON2;\r", "-\tif ((ke.button_state & OS.Ph_BUTTON_MENU) != 0) event.stateMask |= SWT.BUTTON3;\r", "+\tsetKeyState(event, ke);\r", "-\t\tif (event.keyCode == SWT.ALT) event.stateMask |= SWT.ALT;\r", "-\t\tif (event.keyCode == SWT.SHIFT) event.stateMask |= SWT.SHIFT;\r", "-\t\tif (event.keyCode == SWT.CONTROL) event.stateMask |= SWT.CONTROL;\r", "-\t/*\r", "-\t* Bug in Photon.  Despite the fact that we return Pt_END,\r", "-\t* for some reason, Photon continues to forward the event\r", "-\t* to the parent.  The fix is to change the event type to\r", "-\t* zero.  This doesn't stop the forwarding but makes the\r", "-\t* event unknown.\r", "-\t*/\r", "-\tif (cbinfo.reason == OS.Pt_CB_FILTER) return OS.Pt_PROCESS;\r", "-\tOS.memmove (cbinfo.event, new int [1], 4);\r", "-\treturn OS.Pt_END;\r", "+\r", "+\treturn OS.Pt_PROCESS;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c96e9ce0b011e42de299e570c82d2d1e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "a67f394c0511f57f04a642ab7b6dd787073dba38", "commitAfterChange": "cb9a62d44927f93bbcd21b193be43f00e8a6ea02", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "  void sendKeyEvent (int type, int pEventKey)", "signatureAfterChange": "  void sendKeyEvent (int type, int gdkEvent)", "diff": ["-void sendKeyEvent (int type, int pEventKey) {", "-\tEvent event = new Event();", "-\tevent.time = OS.gdk_event_get_time(pEventKey);", "-\t", "-\tint size = OS.gdk_event_key_get_length(pEventKey);", "-\tif (size==0) {  /* No composed string - send the keyvalue */", "-\t\tint keyval = OS.gdk_event_key_get_keyval(pEventKey)\t;", "-\t\tif (keyval==0) return;", "+void sendKeyEvent (int type, int gdkEvent) {", "+\tint time = OS.gdk_event_get_time (gdkEvent);", "+\tint length = OS.gdk_event_key_get_length (gdkEvent);", "+\tif (length == 0) {", "+\t\tEvent event = new Event ();", "+\t\tevent.time = time;", "+\t\tsetInputState (event, gdkEvent);", "+\t\tint keyval = OS.gdk_event_key_get_keyval (gdkEvent);", "-\t\tevent.character = (char) event.keyCode;  //no character sent", "-\t\tint[] pModifier = new int[1];", "-\t\tOS.gdk_event_get_state(pEventKey, pModifier);", "-\t\tint state = pModifier[0];", "-\t\tif ((state & OS.GDK_MOD1_MASK)    != 0) event.stateMask |= SWT.ALT;", "-\t\tif ((state & OS.GDK_SHIFT_MASK)   != 0) event.stateMask |= SWT.SHIFT;", "-\t\tif ((state & OS.GDK_CONTROL_MASK) != 0) event.stateMask |= SWT.CONTROL;", "-\t\tif ((state & OS.GDK_BUTTON1_MASK) != 0) event.stateMask |= SWT.BUTTON1;", "-\t\tif ((state & OS.GDK_BUTTON2_MASK) != 0) event.stateMask |= SWT.BUTTON2;", "-\t\tif ((state & OS.GDK_BUTTON3_MASK) != 0) event.stateMask |= SWT.BUTTON3;", "-\t\treturn;", "+\t} else {", "+\t\tint string = OS.gdk_event_key_get_string (gdkEvent);", "+\t\tbyte [] buffer = new byte [length];", "+\t\tOS.memmove (buffer, string, length);", "+\t\tchar [] result = Converter.mbcsToWcs (null, buffer);", "+\t\tint index = 0;", "+\t\twhile (index < result.length) {", "+\t\t\tif (result [index] == 0) break;", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.time = time;", "+\t\t\tevent.character = result [index];", "+\t\t\tsetInputState (event, gdkEvent);", "+\t\t\tpostEvent (type, event);", "+\t\t\tindex++;", "+\t\t}", "-", "-\tif (size==1) {", "-\t\tint keyval = OS.gdk_event_key_get_keyval(pEventKey)\t;", "-\t\tif (keyval==0) return;", "-\t\tevent.keyCode = keyval;", "-\t\tevent.character = (char) event.keyCode;  //no character sent", "-\t\tint[] pModifier = new int[1];", "-\t\tOS.gdk_event_get_state(pEventKey, pModifier);", "-\t\tint state = pModifier[0];", "-\t\tif ((state & OS.GDK_MOD1_MASK)    != 0) event.stateMask |= SWT.ALT;", "-\t\tif ((state & OS.GDK_SHIFT_MASK)   != 0) event.stateMask |= SWT.SHIFT;", "-\t\tif ((state & OS.GDK_CONTROL_MASK) != 0) event.stateMask |= SWT.CONTROL;", "-\t\tif ((state & OS.GDK_BUTTON1_MASK) != 0) event.stateMask |= SWT.BUTTON1;", "-\t\tif ((state & OS.GDK_BUTTON2_MASK) != 0) event.stateMask |= SWT.BUTTON2;", "-\t\tif ((state & OS.GDK_BUTTON3_MASK) != 0) event.stateMask |= SWT.BUTTON3;", "-\t\tpostEvent (type, event);", "-\t\treturn;", "-\t}", "-", "-\t/* Multi-byte key */", "-\t/* The implementation in the GTK1.2 stream, is not correct here. */", "-\terror(SWT.ERROR_NOT_IMPLEMENTED);"]}], "num": 18407}
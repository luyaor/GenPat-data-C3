{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "162144bb94226331a76d055a3d37eaf2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e8df3c566b750b04c3db0d3b56c4e60", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "4def951fc85e643080de398e85c25cb30ec79f91", "commitAfterChange": "ea10febb5ae3b0d1b19a13c89b6c7b27ab367f3a", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 14, "signatureBeforeChange": "  int processPaint (int callData, int int1, int int2)", "signatureAfterChange": "  int gtk_expose_event (int widget, int eventPtr)", "diff": ["+", "+int gtk_expose_event (int widget, int eventPtr) {", "+\tif ((state & CANVAS) == 0) {", "+\t\treturn super.gtk_expose_event (widget, eventPtr);", "+\t}", "+\tif ((style & SWT.NO_BACKGROUND) == 0) {", "+\t\tint window = paintWindow ();", "+\t\tint gc = OS.gdk_gc_new (window);", "+\t\tOS.gdk_gc_set_foreground (gc, getBackgroundColor ());", "+\t\tGdkEventExpose gdkEvent = new GdkEventExpose ();", "+\t\tOS.memmove(gdkEvent, eventPtr, GdkEventExpose.sizeof);", "+\t\tint x = gdkEvent.area_x, y = gdkEvent.area_y;", "+\t\tint width = gdkEvent.area_width, height = gdkEvent.area_height;", "+\t\tOS.gdk_gc_set_clip_region (gc, gdkEvent.region);", "+\t\tOS.gdk_draw_rectangle (window, gc, 1, x, y, width, height);", "+\t\tOS.g_object_unref (gc);", "+\t}", "+\tif ((style & SWT.NO_MERGE_PAINTS) == 0) {", "+\t\treturn super.gtk_expose_event (widget, eventPtr);", "+\t}", "+\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;", "+\tGdkEventExpose gdkEvent = new GdkEventExpose ();", "+\tOS.memmove(gdkEvent, eventPtr, GdkEventExpose.sizeof);", "+\tint [] rectangles = new int [1];", "+\tint [] n_rectangles = new int [1];", "+\tOS.gdk_region_get_rectangles (gdkEvent.region, rectangles, n_rectangles);", "+\tGdkRectangle rect = new GdkRectangle ();", "+\tfor (int i=0; i<n_rectangles[0]; i++) {", "+\t\tEvent event = new Event ();", "+\t\tOS.memmove (rect, rectangles [0] + i * GdkRectangle.sizeof, GdkRectangle.sizeof);", "+\t\tevent.x = rect.x;", "+\t\tevent.y = rect.y;", "+\t\tevent.width = rect.width;", "+\t\tevent.height = rect.height;", "+\t\tGC gc = event.gc = new GC (this);", "+\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\tsendEvent (SWT.Paint, event);", "+\t\tgc.dispose ();", "+\t\tevent.gc = null;", "+\t}", "+\tOS.g_free (rectangles [0]);", "+\treturn 0;", "+}", "-", "-int processPaint (int callData, int int1, int int2) {", "-\tif ((state & CANVAS) == 0) {", "-\t\treturn super.processPaint (callData, int1, int2);", "-\t}", "-\tif ((style & SWT.NO_BACKGROUND) == 0) {", "-\t\tint window = paintWindow ();", "-\t\tint gc = OS.gdk_gc_new (window);", "-\t\tOS.gdk_gc_set_foreground (gc, getBackgroundColor ());", "-\t\tGdkEventExpose gdkEvent = new GdkEventExpose ();", "-\t\tOS.memmove(gdkEvent, callData, GdkEventExpose.sizeof);", "-\t\tint x = gdkEvent.area_x, y = gdkEvent.area_y;", "-\t\tint width = gdkEvent.area_width, height = gdkEvent.area_height;", "-\t\tOS.gdk_gc_set_clip_region (gc, gdkEvent.region);", "-\t\tOS.gdk_draw_rectangle (window, gc, 1, x, y, width, height);", "-\t\tOS.g_object_unref (gc);", "-\t}", "-\tif ((style & SWT.NO_MERGE_PAINTS) == 0) {", "-\t\treturn super.processPaint (callData, int1, int2);", "-\t}", "-\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;", "-\tGdkEventExpose gdkEvent = new GdkEventExpose ();", "-\tOS.memmove(gdkEvent, callData, GdkEventExpose.sizeof);", "-\tint [] rectangles = new int [1];", "-\tint [] n_rectangles = new int [1];", "-\tOS.gdk_region_get_rectangles (gdkEvent.region, rectangles, n_rectangles);", "-\tGdkRectangle rect = new GdkRectangle ();", "-\tfor (int i=0; i<n_rectangles[0]; i++) {", "-\t\tEvent event = new Event ();", "-\t\tOS.memmove (rect, rectangles [0] + i * GdkRectangle.sizeof, GdkRectangle.sizeof);", "-\t\tevent.x = rect.x;", "-\t\tevent.y = rect.y;", "-\t\tevent.width = rect.width;", "-\t\tevent.height = rect.height;", "-\t\tGC gc = event.gc = new GC (this);", "-\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "-\t\tsendEvent (SWT.Paint, event);", "-\t\tgc.dispose ();", "-\t\tevent.gc = null;", "-\t}", "-\tOS.g_free (rectangles [0]);", "-\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f902ca460d9be3d6bae3c37f9a11e2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "baf03a98205c806baa2c108817acc3ad55036318", "commitAfterChange": "9022b0c87576382c8b2fca8ae1a8f53567b5217b", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 77, "signatureBeforeChange": "  boolean sendGestureEvent (NSEvent nsEvent, int detail, boolean send)", "signatureAfterChange": "  boolean gestureEvent(int id, int eventPtr, int detail)", "diff": ["+boolean gestureEvent(int /*long*/ id, int /*long*/ eventPtr, int detail) {", "+\t// For cross-platform compatibility, touch events and gestures are mutually exclusive.", "+\t// Don't send a gesture if touch events are enabled for this control.", "+\tif (touchEnabled) return true;", "+\tif (!hooks(SWT.Gesture) && !filters(SWT.Gesture)) return true;", "+\tNSEvent nsEvent = new NSEvent(eventPtr);", "+\tEvent event = new Event();", "+\tNSPoint windowPoint;", "+\tNSView view = eventView ();", "+\twindowPoint = nsEvent.locationInWindow();", "+\tNSPoint point = view.convertPoint_fromView_(windowPoint, null);", "+\tif (!view.isFlipped ()) {", "+\t\tpoint.y = view.bounds().height - point.y;", "+\t}", "+\tevent.x = (int) point.x;", "+\tevent.y = (int) point.y;", "+\tsetInputState (event, nsEvent, SWT.Gesture);", "+\tevent.detail = detail;", "+", "+\tif (detail == SWT.GESTURE_BEGIN) {", "+\t\tdisplay.rotation = 0.0;", "+\t\tdisplay.magnification = 1.0;", "+\t\tdisplay.gestureActive = true;", "+\t} else {", "+\t\tdisplay.gestureActive = false;", "+\t}", "+\t", "+\tswitch (detail) {\t", "+\tcase SWT.GESTURE_SWIPE:", "+\t\tevent.xDirection = (int) -nsEvent.deltaX();", "+\t\tevent.yDirection = (int) -nsEvent.deltaY();", "+\t\tbreak;", "+\tcase SWT.GESTURE_ROTATE: {\t", "+\t\tdisplay.rotation += nsEvent.rotation();", "+\t\tevent.rotation = display.rotation;", "+\t\tbreak;", "+\t}", "+\tcase SWT.GESTURE_MAGNIFY:", "+\t\tdisplay.magnification += nsEvent.magnification();", "+\t\tevent.magnification = display.magnification;", "+\t\tbreak;", "+\tcase SWT.GESTURE_PAN:", "+\t\t// Panning increment is expressed in terms of the direction of movement,", "+\t\t// not in terms of scrolling increment.", "+\t\tif (display.gestureActive) {", "+\t\t\tevent.xDirection = (int) -nsEvent.deltaX();", "+\t\t\tevent.yDirection = (int) -nsEvent.deltaY();", "+\t\t\tif (event.xDirection == 0 && event.yDirection == 0) return true;", "+\t\t}", "+\t\tbreak;", "+\t}", "+", "+\tsendEvent (SWT.Gesture, event);", "+\treturn event.doit;", "-", "-boolean sendGestureEvent (NSEvent nsEvent, int detail, boolean send) {", "-\tEvent event = new Event ();", "-\tNSPoint windowPoint;", "-\tNSView view = eventView ();", "-\twindowPoint = nsEvent.locationInWindow();", "-\tNSPoint point = view.convertPoint_fromView_(windowPoint, null);", "-\tif (!view.isFlipped ()) {", "-\t\tpoint.y = view.bounds().height - point.y;", "-\t}", "-\tevent.x = (int) point.x;", "-\tevent.y = (int) point.y;", "-\tsetInputState (event, nsEvent, SWT.Gesture);", "-\tevent.detail = detail;", "-", "-\tif (detail == SWT.GESTURE_BEGIN) {", "-\t\tdisplay.gestureStarted = true;", "-\t\tdisplay.rotation = 0.0;", "-\t\tdisplay.magnification = 1.0;", "-\t} else if (detail == SWT.GESTURE_END) {", "-\t\tdisplay.gestureStarted = false;", "-\t}", "-\t", "-\tswitch (detail) {\t", "-\tcase SWT.GESTURE_SWIPE:", "-\t\tevent.xDirection = (int) -nsEvent.deltaX();", "-\t\tevent.yDirection = (int) -nsEvent.deltaY();", "-\t\tbreak;", "-\tcase SWT.GESTURE_ROTATE: {\t", "-\t\tdisplay.rotation += nsEvent.rotation();", "-\t\tevent.rotation = display.rotation;", "-\t\tbreak;", "-\t}", "-\tcase SWT.GESTURE_MAGNIFY:", "-\t\tdisplay.magnification += nsEvent.magnification();", "-\t\tevent.magnification = display.magnification;", "-\t\tbreak;", "-\tcase SWT.GESTURE_PAN:", "-\t\t// Panning increment is expressed in terms of the direction of movement,", "-\t\t// not in terms of scrolling increment.", "-\t\tevent.xDirection = (int) -nsEvent.deltaX();", "-\t\tevent.yDirection = (int) -nsEvent.deltaY();", "-\t\tbreak;", "-\t}", "-", "-\tevent.doit = true;", "-\tsendEvent (SWT.Gesture, event);", "-\tif (isDisposed ()) return false;", "-\treturn event.doit;"]}], "num": 21223}
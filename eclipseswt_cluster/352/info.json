{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c6e90b7dd4d8e69282a86570dc4545f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207b594feefaa5f05ffce62fceb2e600", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "08717ee423464ddae3340bdfb34f7eb6dbebfba3", "commitAfterChange": "ec00ede2f2b3e333572f4331504074ac2a226d75", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "-\t\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "-\t\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "-\t\t\t\t\tC.memset (ptr, 0, size * 2);", "-\t\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "-\t\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_TermEmbedding\", true); //$NON-NLS-1$", "-\t\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "-\t\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "-\t\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "-\t\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "-\t\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "-\t\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "-\t\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "-\t\t\t\t\tint /*long*/ functionPtr = result[0];", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\tC.free (functionLoad.function);", "-\t\t\t\t\tC.free (functionLoad.functionName);", "-\t\t\t\t\tC.free (ptr);", "-\t\t\t\t\tXPCOM.Call (functionPtr);", "+\t\t\t\t\t// the following is intentionally commented, because calling XRE_TermEmbedding", "+\t\t\t\t\t// causes subsequent browser instantiations within the process to fail", "+", "+//\t\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+//\t\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+//\t\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "+//\t\t\t\t\tC.memset (ptr, 0, size * 2);", "+//\t\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+//\t\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_TermEmbedding\", true); //$NON-NLS-1$", "+//\t\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+//\t\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+//\t\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+//\t\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+//\t\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+//\t\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+//\t\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+//\t\t\t\t\tint /*long*/ functionPtr = result[0];", "+//\t\t\t\t\tresult[0] = 0;", "+//\t\t\t\t\tC.free (functionLoad.function);", "+//\t\t\t\t\tC.free (functionLoad.functionName);", "+//\t\t\t\t\tC.free (ptr);", "+//\t\t\t\t\tXPCOM.Call (functionPtr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7302170538e071e6d5c6fa7e6c8fe2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "cbf30c52abe87cec4ed52641898abf66edc0ae82", "commitAfterChange": "73867f2cffacd6bfd26b673a67b443e1dc346e33", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void handleDOMEvent (OleEvent e)", "signatureAfterChange": "  void handleDOMEvent (OleEvent e)", "diff": ["-\t\tboolean consume = false;", "-\t\tOleAutomation document = null;", "-\t\tOleAutomation htmlWindow2 = null;", "-\t\tOleAutomation htmlEvent = null;", "-\t\t/* get IHTMLDocument2 */", "-\t\trgdispid = auto.getIDsOfNames (new String[] {\"Document\"}); //$NON-NLS-1$", "-\t\tpVarResult = auto.getProperty (rgdispid[0]);", "-\t\tif (pVarResult == null || pVarResult.getType() == COM.VT_EMPTY) {", "-\t\t\tif (pVarResult != null) pVarResult.dispose ();", "-\t\t} else {", "-\t\t\tdocument = pVarResult.getAutomation ();", "-\t\t\tpVarResult.dispose ();", "-\t\t\t/* get IHTMLWindow2 */", "-\t\t\trgdispid = document.getIDsOfNames (new String[] {\"parentWindow\"}); //$NON-NLS-1$", "-\t\t\tpVarResult = document.getProperty (rgdispid[0]);", "-\t\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "-\t\t\t\tif (pVarResult != null) pVarResult.dispose ();", "-\t\t\t} else {", "-\t\t\t\thtmlWindow2 = pVarResult.getAutomation ();", "-\t\t\t\tpVarResult.dispose ();", "-\t\t\t\t/* get IHTMLEventObj */", "-\t\t\t\trgdispid = htmlWindow2.getIDsOfNames (new String[] {\"event\"}); //$NON-NLS-1$", "-\t\t\t\tpVarResult = htmlWindow2.getProperty (rgdispid[0]);", "-\t\t\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "-\t\t\t\t\tif (pVarResult != null) pVarResult.dispose ();", "-\t\t\t\t} else {", "-\t\t\t\t\thtmlEvent = pVarResult.getAutomation ();", "-\t\t\t\t\tpVarResult.dispose ();", "-\t\t\t\t\t/* check event's returnValue property */", "-\t\t\t\t\trgdispid = htmlEvent.getIDsOfNames (new String[] {\"returnValue\"}); //$NON-NLS-1$", "-\t\t\t\t\tpVarResult = htmlEvent.getProperty (rgdispid[0]);", "-\t\t\t\t\tconsume = pVarResult != null && pVarResult.getType () == OLE.VT_BOOL && !pVarResult.getBoolean ();", "-\t\t\t\t\tpVarResult.dispose ();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (htmlEvent != null) htmlEvent.dispose ();", "-\t\tif (htmlWindow2 != null) htmlWindow2.dispose ();", "-\t\tif (document != null) document.dispose ();", "+\t\trgdispid = event.getIDsOfNames (new String[] {PROPERTY_RETURNVALUE});", "+\t\tpVarResult = event.getProperty (rgdispid[0]);", "+\t\tboolean consume = pVarResult != null && pVarResult.getType () == OLE.VT_BOOL && !pVarResult.getBoolean ();", "+\t\tpVarResult.dispose ();"]}], "num": 352}
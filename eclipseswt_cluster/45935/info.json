{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98dc925c7ae5e9ff11362a08ff2091f9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d34e1d756496e9adc94ebce06503fac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void setItems (String [] items)", "signatureAfterChange": "  public void setItems (String [] items)", "diff": ["- */", "+", "-", "-\tif (items.length == 0) {", "-\t\tremoveAll();", "-\t\treturn;", "-\t}", "-", "-    /* AW", "-\tint index = 0;", "-\tint [] table = new int [items.length];", "-\tString codePage = getCodePage ();", "-\twhile (index < items.length) {", "-\t\tString string = items [index];", "-\t\tif (string == null) break;", "-\t\tbyte [] buffer = Converter.wcsToMbcs (codePage, encodeString(string), true);", "-\t\tint xmString = OS.XmStringCreateLocalized (buffer);", "-\t\tif (xmString == 0) break;", "-\t\ttable [index++] = xmString;", "-\t}", "-\tint ptr = OS.XtMalloc (index * 4);", "-\tOS.memmove (ptr, table, index * 4);", "-\tint [] argList = {OS.XmNitems, ptr, OS.XmNitemCount, index};", "-\tOS.XtSetValues (handle, argList, argList.length / 2);", "-\tfor (int i=0; i<index; i++) OS.XmStringFree (table [i]);", "-\tOS.XtFree (ptr);", "-\tif (index < items.length) error (SWT.ERROR_ITEM_NOT_ADDED);", "-    */", "-\t", "-\tif (menuHandle != 0) {", "-\t\tfor (int i= 0; i < items.length; i++) {", "-\t\t\tString string= items[i];", "-\t\t\tif (string == null)", "-\t\t\t\tbreak;", "-\t\t\tint sHandle= 0;", "-\t\t\ttry {", "-\t\t\t\tsHandle= OS.CFStringCreateWithCharacters(string);", "-\t\t\t\tif (OS.AppendMenuItemTextWithCFString(menuHandle, sHandle, 0, fgCommandID++, null) != OS.kNoErr)", "-\t\t\t\t\terror (SWT.ERROR_ITEM_NOT_ADDED);", "-\t\t\t} finally {", "-\t\t\t\tif (sHandle != 0)", "-\t\t\t\t\tOS.CFRelease(sHandle);", "-\t\t\t}", "+\tremoveAll();", "+\tif (items.length == 0) return;", "+\tfor (int i= 0; i < items.length; i++) {", "+\t\tString string = items[i];", "+\t\tif (string == null) continue;", "+\t\tchar [] buffer = new char [string.length ()];", "+\t\tstring.getChars (0, buffer.length, buffer, 0);", "+\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\tif (ptr == 0) error (SWT.ERROR_ITEM_NOT_ADDED);", "+\t\tint result;", "+\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\tresult = OS.AppendMenuItemTextWithCFString (menuHandle, ptr, 0, 0, null);", "+\t\t} else {", "+\t\t\tint [] outIndex = new int[1];", "+\t\t\tresult = OS.HIComboBoxAppendTextItem (handle, ptr, outIndex);", "-\t\tOS.SetControl32BitMaximum(handle, items.length);", "-\t} else {", "-\t\tremoveAll();", "-\t\tfor (int i= 0; i < items.length; i++) {", "-\t\t\tString string= items[i];", "-\t\t\tif (string == null)", "-\t\t\t\tbreak;", "-\t\t\tint sHandle= 0;", "-\t\t\ttry {", "-\t\t\t\tsHandle= OS.CFStringCreateWithCharacters(string);", "-\t\t\t\tif (OS.HIComboBoxAppendTextItem(handle, sHandle) != OS.kNoErr)", "-\t\t\t\t\terror (SWT.ERROR_ITEM_NOT_ADDED);", "-\t\t\t} finally {", "-\t\t\t\tif (sHandle != 0)", "-\t\t\t\t\tOS.CFRelease(sHandle);", "-\t\t\t}", "-\t\t}", "+\t\tOS.CFRelease(ptr);", "+\t\tif (result != OS.noErr) error (SWT.ERROR_ITEM_NOT_ADDED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a66eb851352c032515d2bacb2e2a7b0e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 344, "methodNumberAfterChange": 201, "signatureBeforeChange": " void handleTextChanged(TextChangedEvent event)", "signatureAfterChange": " void handleTextChanged(TextChangedEvent event)", "diff": ["-\tlineCache.textChanged(lastTextChangeStart, ", "-\t\tlastTextChangeNewLineCount, ", "-\t\tlastTextChangeReplaceLineCount,", "-\t\tlastTextChangeNewCharCount,", "-\t\tlastTextChangeReplaceCharCount);", "-\tsetScrollBars();", "+\tint firstLine = content.getLineAtOffset(lastTextChangeStart);", "+\tresetCache(firstLine, 0);", "+\tint lastLine = firstLine + lastTextChangeNewLineCount;", "+\tint firstLineTop = getLinePixel(firstLine);", "+\tint newLastLineBottom = getLinePixel(lastLine + 1);", "+\tif (newLastLineBottom != lastLineBottom) {", "+\t\t//TODO fails if margin != 0", "+\t\tscroll(0, newLastLineBottom, 0, lastLineBottom, clientAreaWidth, clientAreaHeight, true);", "+\t}", "+\tsuper.redraw(0, firstLineTop, clientAreaWidth, newLastLineBottom - firstLineTop, false);", "-\t// fixes 1GB93QT", "-\tupdateSelection(", "-\t\tlastTextChangeStart, ", "-\t\tlastTextChangeReplaceCharCount, ", "-\t\tlastTextChangeNewCharCount);", "-\t\t", "+\tupdateSelection(lastTextChangeStart, lastTextChangeReplaceCharCount, lastTextChangeNewCharCount);", "+\tif (newLastLineBottom == lastLineBottom) {\t\t", "+\t\t//update();", "+\t}", "-\t\t// Only check for unused space when lines are deleted.", "-\t\t// Fixes 1GFL4LY", "-\t\t// Scroll up so that empty lines below last text line are used.", "-\t\t// Fixes 1GEYJM0", "-\t\t// fixes bug 8273", "-\t}", "-\t// do direct drawing if the text change is confined to a single line.", "-\t// optimization and fixes bug 13999. see also handleTextChanging.", "-\tif (lastTextChangeNewLineCount == 0 && lastTextChangeReplaceLineCount == 0) {", "-\t\tint startLine = content.getLineAtOffset(lastTextChangeStart);", "-\t\tint startY = startLine * lineHeight - verticalScrollOffset + topMargin;", "-", "-\t\tif (DOUBLE_BUFFER) {", "-\t\t\tGC gc = getGC();", "-\t\t\tCaret caret = getCaret();", "-\t\t\tboolean caretVisible = false;", "-\t\t\t", "-\t\t\tif (caret != null) {", "-\t\t\t\tcaretVisible = caret.getVisible();", "-\t\t\t\tcaret.setVisible(false);", "-\t\t\t}", "-\t\t\tperformPaint(gc, startLine, startY, lineHeight);", "-\t\t\tif (caret != null) {", "-\t\t\t\tcaret.setVisible(caretVisible);", "-\t\t\t}", "-\t\t\tgc.dispose();", "-\t\t} else {", "-\t\t\tredraw(0, startY, getClientArea().width, lineHeight, false);", "-\t\t\tupdate();", "-\t\t}"]}], "num": 45935}
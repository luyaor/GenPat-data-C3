{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d12135be88c488e405a4295ccbd85db6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bdac85e0c1e2ccb623b3c6ebbe3adcf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "714fe0848f2b13a8ae860e88249aa5075437f679", "commitAfterChange": "0d0af5f5d19f13bb6c3d0dea0863f1a6c33413a2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["-\t* Feature in Windows.  The focus window is not saved and", "-\t* and restored automatically by the call to GetOpenFileName ().", "-\t* The fix is to save and restore the focus window.", "-\t*/", "-\tint hwndFocus = OS.GetFocus ();", "-\t", "-\t/*", "-\t* Bug/Feature in Windows.  When Windows opens the standard", "-\t* file dialog, it changes the cursor to the hourglass and", "-\t* does not put it back.  The fix is to save the current", "-\t* cursor and restore it when the dialog closes.", "-\t*/", "-\tint hCursor = OS.GetCursor ();", "-", "-\t/*", "-\t", "-\t/* Restore the old cursor */", "-\tOS.SetCursor (hCursor);", "-\t", "-\t/* Restore the old focus */", "-\tOS.SetFocus (hwndFocus);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82423895c9db9ebe2ff31e52c509f607", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "655b61d50c03a4c7d58be015595f0114fafdc1f8", "commitAfterChange": "e581061e375ce57dc34ce3475e977fd34432f198", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public boolean forceFocus ()", "signatureAfterChange": " public boolean forceFocus ()", "diff": ["+\tshell.setSavedFocus (this);", "+\t/*", "+\t * Feature in Cocoa. If the window is inactive when forceFocus is called bringToTop ", "+\t * eventually calls makeKeyAndOrderFront. This activates the window immediately, but unlike other platforms, ", "+\t * it also immediately fire notifications that the window was activated, as opposed to posting an event", "+\t * to be handled on the next pass of readAndDispatch().", "+\t * ", "+\t * Shell#windowDidBecomeKey will call Decorations#restoreFocus, so the saved focus must be set", "+\t * before the window is activated or the wrong control will get focus.", "+\t */", "-\tshell.setSavedFocus (this);"]}], "num": 17212}
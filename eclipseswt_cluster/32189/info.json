{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "499f77ae7b662bd02d17f20fbe92ce89", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76dd70107928b0b4986addb8dafa2e1c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "61e9d1e36b247e8d7212c985a309e271586ecf1b", "commitAfterChange": "de99758dc483ca2e9c030e16d8437ab862b4c593", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\t/*", "-\t* Feature in the Macintosh.  On OS 10.2, it is necessary", "-\t* to explicitly check in with the Process Manager and set", "-\t* the current process to be the front process in order for", "-\t* windows to come to the front by default.  The fix is call", "-\t* both GetCurrentProcess() and SetFrontProcess().", "-\t* ", "-\t* NOTE: It is not actually necessary to use the process", "-\t* serial number returned by GetCurrentProcess() in the", "-\t* call to SetFrontProcess() (ie. kCurrentProcess can be", "-\t* used) but both functions must be called in order for", "-\t* windows to come to the front.", "-\t*/", "-\tint [] psn = new int [2];", "-\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "-\t\tint pid = OS.getpid ();", "-\t\tbyte [] buffer = null;", "-\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + pid)); //$NON-NLS-1$", "-\t\tif (ptr != 0) {", "-\t\t\tbuffer = new byte [OS.strlen (ptr) + 1];", "-\t\t\tOS.memmove (buffer, ptr, buffer.length);", "-\t\t} else {", "-\t\t\tif (APP_NAME != null) {", "-\t\t\t\tchar [] chars = new char [APP_NAME.length ()];", "-\t\t\t\tAPP_NAME.getChars (0, chars.length, chars, 0);", "-\t\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "-\t\t\t\tif (cfstring != 0) {", "-\t\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\t\trange.length = chars.length;", "-\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding ();", "-\t\t\t\t\tint [] size = new int [1];", "-\t\t\t\t\tint numChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, null, 0, size);", "-\t\t\t\t\tif (numChars != 0) {", "-\t\t\t\t\t\tbuffer = new byte [size [0] + 1];", "-\t\t\t\t\t\tnumChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, buffer, size [0], size);", "+\tint identifier = OS.CFBundleGetIdentifier(OS.CFBundleGetMainBundle());", "+\tSystem.out.println(identifier);", "+\tif (identifier == 0) {", "+\t\t/*", "+\t\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t\t * to explicitly check in with the Process Manager and set", "+\t\t * the current process to be the front process in order for", "+\t\t * windows to come to the front by default.  The fix is call", "+\t\t * both GetCurrentProcess() and SetFrontProcess().", "+\t\t * ", "+\t\t * NOTE: It is not actually necessary to use the process", "+\t\t * serial number returned by GetCurrentProcess() in the", "+\t\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t\t * used) but both functions must be called in order for", "+\t\t * windows to come to the front.", "+\t\t */", "+\t\tint [] psn = new int [2];", "+\t\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\t\tint pid = OS.getpid ();", "+\t\t\tbyte [] buffer = null;", "+\t\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + pid)); //$NON-NLS-1$", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tbuffer = new byte [OS.strlen (ptr) + 1];", "+\t\t\t\tOS.memmove (buffer, ptr, buffer.length);", "+\t\t\t} else {", "+\t\t\t\tif (APP_NAME != null) {", "+\t\t\t\t\tchar [] chars = new char [APP_NAME.length ()];", "+\t\t\t\t\tAPP_NAME.getChars (0, chars.length, chars, 0);", "+\t\t\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "+\t\t\t\t\tif (cfstring != 0) {", "+\t\t\t\t\t\tCFRange range = new CFRange ();", "+\t\t\t\t\t\trange.length = chars.length;", "+\t\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding ();", "+\t\t\t\t\t\tint [] size = new int [1];", "+\t\t\t\t\t\tint numChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, null, 0, size);", "+\t\t\t\t\t\tif (numChars != 0) {", "+\t\t\t\t\t\t\tbuffer = new byte [size [0] + 1];", "+\t\t\t\t\t\t\tnumChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, buffer, size [0], size);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.CFRelease (cfstring);", "-\t\t\t\t\tOS.CFRelease (cfstring);", "-\t\t}", "-\t\tif (buffer != null) OS.CPSSetProcessName (psn, buffer);\t", "-\t\tOS.CPSEnableForegroundOperation (psn, 0x03, 0x3C, 0x2C, 0x1103);", "-\t\tOS.SetFrontProcess (psn);", "-\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid)); //$NON-NLS-1$", "-\t\tif (ptr != 0) {", "-\t\t\tint image = readImageRef (ptr);", "-\t\t\tif (image != 0) {", "-\t\t\t\tdockImage = image;", "-\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "+\t\t\tif (buffer != null) OS.CPSSetProcessName (psn, buffer);\t", "+\t\t\tOS.CPSEnableForegroundOperation (psn, 0x03, 0x3C, 0x2C, 0x1103);", "+\t\t\tOS.SetFrontProcess (psn);", "+\t\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid)); //$NON-NLS-1$", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tint image = readImageRef (ptr);", "+\t\t\t\tif (image != 0) {", "+\t\t\t\t\tdockImage = image;", "+\t\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee4261b88d8567ba4974779dd0633024", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "54936e5eba312fa3fa114a9ca5e62f04eea30071", "commitAfterChange": "6da8e0dc839eeb6cbf66a4814cf8075bd2429c7f", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\tif (!isBundled ()) {", "-\t\t/*", "-\t\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "-\t\t * to explicitly check in with the Process Manager and set", "-\t\t * the current process to be the front process in order for", "-\t\t * windows to come to the front by default.  The fix is call", "-\t\t * both GetCurrentProcess() and SetFrontProcess().", "-\t\t * ", "-\t\t * NOTE: It is not actually necessary to use the process", "-\t\t * serial number returned by GetCurrentProcess() in the", "-\t\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "-\t\t * used) but both functions must be called in order for", "-\t\t * windows to come to the front.", "-\t\t */", "-\t\tint [] psn = new int [2];", "-\t\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "-\t\t\tint pid = OS.getpid ();", "-\t\t\tbyte [] buffer = null;", "-\t\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + pid)); //$NON-NLS-1$", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tbuffer = new byte [OS.strlen (ptr) + 1];", "-\t\t\t\tOS.memmove (buffer, ptr, buffer.length);", "-\t\t\t} else {", "-\t\t\t\tif (APP_NAME != null) {", "-\t\t\t\t\tchar [] chars = new char [APP_NAME.length ()];", "-\t\t\t\t\tAPP_NAME.getChars (0, chars.length, chars, 0);", "-\t\t\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "-\t\t\t\t\tif (cfstring != 0) {", "-\t\t\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\t\t\trange.length = chars.length;", "-\t\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding ();", "-\t\t\t\t\t\tint [] size = new int [1];", "-\t\t\t\t\t\tint numChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, null, 0, size);", "-\t\t\t\t\t\tif (numChars != 0) {", "-\t\t\t\t\t\t\tbuffer = new byte [size [0] + 1];", "-\t\t\t\t\t\t\tnumChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, buffer, size [0], size);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.CFRelease (cfstring);", "+\t/*", "+\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t * to explicitly check in with the Process Manager and set", "+\t * the current process to be the front process in order for", "+\t * windows to come to the front by default.  The fix is call", "+\t * both GetCurrentProcess() and SetFrontProcess().", "+\t * ", "+\t * NOTE: It is not actually necessary to use the process", "+\t * serial number returned by GetCurrentProcess() in the", "+\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t * used) but both functions must be called in order for", "+\t * windows to come to the front.", "+\t */", "+\tint [] psn = new int [2];", "+\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\tint pid = OS.getpid ();", "+\t\tbyte [] buffer = null;", "+\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + pid)); //$NON-NLS-1$", "+\t\tif (ptr != 0) {", "+\t\t\tbuffer = new byte [OS.strlen (ptr) + 1];", "+\t\t\tOS.memmove (buffer, ptr, buffer.length);", "+\t\t} else {", "+\t\t\tif (APP_NAME != null) {", "+\t\t\t\tchar [] chars = new char [APP_NAME.length ()];", "+\t\t\t\tAPP_NAME.getChars (0, chars.length, chars, 0);", "+\t\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "+\t\t\t\tif (cfstring != 0) {", "+\t\t\t\t\tCFRange range = new CFRange ();", "+\t\t\t\t\trange.length = chars.length;", "+\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding ();", "+\t\t\t\t\tint [] size = new int [1];", "+\t\t\t\t\tint numChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, null, 0, size);", "+\t\t\t\t\tif (numChars != 0) {", "+\t\t\t\t\t\tbuffer = new byte [size [0] + 1];", "+\t\t\t\t\t\tnumChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, buffer, size [0], size);", "+\t\t\t\t\tOS.CFRelease (cfstring);", "-\t\t\tif (buffer != null) OS.CPSSetProcessName (psn, buffer);\t", "+\t\t}", "+\t\tif (buffer != null) OS.CPSSetProcessName (psn, buffer);\t", "+\t\tif (!isBundled ()) {", "-\t\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid)); //$NON-NLS-1$", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tint image = readImageRef (ptr);", "-\t\t\t\tif (image != 0) {", "-\t\t\t\t\tdockImage = image;", "-\t\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "-\t\t\t\t}", "+\t\t}", "+\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid)); //$NON-NLS-1$", "+\t\tif (ptr != 0) {", "+\t\t\tint image = readImageRef (ptr);", "+\t\t\tif (image != 0) {", "+\t\t\t\tdockImage = image;", "+\t\t\t\tOS.SetApplicationDockTileImage (dockImage);"]}], "num": 32189}
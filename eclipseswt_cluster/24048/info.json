{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5da91384c1a674f2812b7378e8753ef", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b78a6f3682e1bd4aaf56196f06222af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "4a41229267d8ec39ffddb937135f7f228c3d90ec", "commitAfterChange": "a3f5ef23bb9a2d806a5c1b1bcf9eba42e3d5e4ca", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r private void layoutButtons()", "signatureAfterChange": "\r private void layoutButtons()", "diff": ["+\tupdateArrowBar();\r", "+\tupdateCloseBar();\r", "+\t\r", "+\tint tabHeight = getTabHeight();\r", "+\tRectangle area = super.getClientArea();\r", "+\t\r", "-\r", "-\t\tinitScrollBarImages();\r", "-\t\tPoint size = scrollBar.getSize();\r", "-\t\tRectangle area = super.getClientArea();\r", "-\t\tint x = area.x + area.width - size.x - borderRight;\r", "-\t\tint y = 0;\r", "-\t\tif (!onBottom) {\r", "-\t\t\ty = area.y + borderTop;\r", "-\t\t} else {\r", "-\t\t\ty = area.y + area.height - borderBottom - size.y;\r", "-\t\t}\r", "-\t\tscrollBar.setLocation(x, y);\r", "-\t\tscrollLeft.setEnabled(leftVisible);\r", "-\t\tscrollRight.setEnabled(rightVisible);\r", "-\t\tscrollBar.setVisible(true);\r", "+\t\tPoint size = arrowBar.computeSize(SWT.DEFAULT, tabHeight);\r", "+\t\tint x = area.x + area.width - borderRight - size.x;\r", "+\t\tint y = (onBottom) ? area.y + area.height - borderBottom - size.y : area.y + borderTop;\r", "+\t\t\r", "+\t\tarrowBar.setBounds(x, y, size.x, size.y);\r", "+\t\tToolItem[] items = arrowBar.getItems();\r", "+\t\titems[0].setEnabled(leftVisible);\r", "+\t\titems[1].setEnabled(rightVisible);\r", "+\t\tarrowBar.setVisible(true);\r", "-\t\tscrollBar.setVisible(false);\r", "+\t\tarrowBar.setVisible(false);\r", "-\t\tPoint size = closeBar.getSize();\r", "-\t\t\tint x = item.x + item.width - CTabItem.RIGHT_MARGIN - size.x + 2;\r", "-\t\t\tint y = item.y + CTabItem.TOP_MARGIN - 1;\r", "-\t\t\tcloseBar.setLocation(x, y);\r", "-\t\t\tif (scrollBar.isVisible()) {\r", "-\t\t\t\tRectangle scrollRect = scrollBar.getBounds();\r", "-\t\t\t\tscrollRect.width += borderRight;\r", "-\t\t\t\tcloseBar.setVisible(!scrollRect.contains(x, y));\r", "+\t\t\tint toolbarHeight = tabHeight - CTabItem.TOP_MARGIN - CTabItem.BOTTOM_MARGIN + 2; // +2 to ignore gab between focus rectangle\r", "+\t\t\tint x = item.x + item.width - toolbarHeight - 1;\r", "+\t\t\tint y = item.y + Math.max(0, (item.height - toolbarHeight)/2);\t\t\r", "+\t\t\t\tcloseBar.setBounds(x, y, toolbarHeight, toolbarHeight);\r", "+\t\t\tif (arrowBar.isVisible()) {\r", "+\t\t\t\tRectangle arrowRect = arrowBar.getBounds();\r", "+\t\t\t\tarrowRect.width += borderRight;\r", "+\t\t\t\tcloseBar.setVisible(!arrowRect.contains(x, y));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1950c04a15747f4a46206ba4da9cebd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "ac661944fc39630e8e1391fa4ecc189c1049cb89", "commitAfterChange": "a74352ab00f11069dec09f310b58d39c0f75fd1c", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "signatureAfterChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "diff": ["-\tRect inset = getInset ();", "+\t/* Compute the old bounds */", "+\tint [] theRoot = new int [1];", "+\tint window = OS.GetControlOwner (control);", "+\tOS.GetRootControl (window, theRoot);", "+\tint [] parentHandle = new int [1];", "+\tOS.GetSuperControl (control, parentHandle);", "+\tRect parentRect = new Rect ();", "+\tif (parentHandle [0] != theRoot [0]) {", "+\t\tOS.GetControlBounds (parentHandle [0], parentRect);", "+\t\tOS.OffsetRect (oldBounds, (short) -parentRect.left, (short) -parentRect.top);", "+\t}", "+\tRect inset = getInset ();", "-\tx += inset.left;", "-\ty += inset.top;", "-\twidth -= (inset.left + inset.right);", "-\theight -= (inset.top + inset.bottom);", "-\tint window = OS.GetControlOwner (control);", "-\tif (move) {", "-\t\tint [] theRoot = new int [1];", "-\t\tOS.GetRootControl (window, theRoot);", "-\t\tint [] parentHandle = new int [1];", "-\t\tOS.GetSuperControl (control, parentHandle);", "-\t\tif (parentHandle [0] != theRoot [0]) {", "-\t\t\tRect rect = new Rect ();", "-\t\t\tOS.GetControlBounds (parentHandle [0], rect);", "-\t\t\tx += rect.left;", "-\t\t\ty += rect.top;", "-\t\t}", "-\t} else {", "+\t", "+\t/* Compute the new bounds */", "+\tif (!move) {", "-\t}", "-\twidth = Math.max (0, width);", "-\theight = Math.max (0, height);", "-\tboolean sameOrigin = x == oldBounds.left && y == oldBounds.top;", "-\tboolean sameExtent = width == (oldBounds.right - oldBounds.left) && height == (oldBounds.bottom - oldBounds.top);", "-\tif (sameOrigin && sameExtent) return 0;", "+\t}\t", "-\tnewBounds.left = (short) x;", "-\tnewBounds.top = (short) y;", "-\tnewBounds.right = (short) (x + width);", "-\tnewBounds.bottom = (short) (y + height);", "+\tnewBounds.left = (short) (parentRect.left + x + inset.left);", "+\tnewBounds.top = (short) (parentRect.top + y + inset.top);", "+\tnewBounds.right = (short) (newBounds.left + width - inset.right - inset.left);", "+\tnewBounds.bottom = (short) (newBounds.top + height - inset.bottom - inset.top);", "+\t", "+\t/* Get bounds again, since the one above is in SWT coordinates */", "+\tOS.GetControlBounds (control, oldBounds);", "+\t", "+\t/* Check if anything changed */", "+\tboolean sameOrigin = newBounds.left == oldBounds.left && newBounds.top == oldBounds.top;", "+\tboolean sameExtent = (newBounds.right - newBounds.left) == (oldBounds.right - oldBounds.left) && (newBounds.bottom - newBounds.top) == (oldBounds.bottom - oldBounds.top);", "+\tif (sameOrigin && sameExtent) return 0;", "+\t", "+\t/* Apply changes and invalidate appropriate rectangles */", "+\t", "+\t/* Send events */"]}], "num": 24048}
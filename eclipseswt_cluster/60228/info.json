{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ec0ea77cef3039cbfb8d4c779f5a57c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0eaac5d9b54be94d2ed1af27c863331", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d4ce2fe3631bc060a94000536e7454e9ee602a3d", "commitAfterChange": "be954920b3bf51c2767d57c5bc9db3ba96994f28", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["-\tif (!isEmbedded) {", "-\t\t/*", "-\t\t * Feature in Cocoa:  NSApplication.finishLaunching() adds an apple menu to the menu bar that isn't accessible via NSMenu.", "-\t\t * If Display objects are created and disposed of multiple times in a single process, another apple menu is added to the menu bar.", "-\t\t * It must be called or the dock icon will continue to bounce. So, it should only be called once per process, not just once per", "-\t\t * creation of a Display.  Use a static so creation of additional Display objects won't affect the menu bar. ", "-\t\t */", "-\t\tif (!Display.launched) {", "-\t\t\tapplication.finishLaunching();", "-\t\t\tDisplay.launched = true;", "-\t\t\t", "-\t\t\t/* only add the shutdown hook once */", "-\t\t\tRuntime.getRuntime().addShutdownHook(new Thread() {", "-\t\t\t\tpublic void run() {", "-\t\t\t\t\tNSApplication.sharedApplication().terminate(null);", "+\t/*", "+\t * Create an application delegate for app-level notifications.  The AWT may have already set a delegate;", "+\t * if so, hold on to it so messages can be forwarded to it.", "+\t */", "+\tif (applicationDelegate == null) {", "+\t\tapplicationDelegate = (SWTApplicationDelegate)new SWTApplicationDelegate().alloc().init();", "+\t\t", "+\t\tif (currAppDelegate == null) {", "+\t\t\tif (OS.class_JRSAppKitAWT != 0) {", "+\t\t\t\tint /*long*/ currDelegatePtr = OS.objc_msgSend(OS.class_JRSAppKitAWT, OS.sel_awtAppDelegate);", "+\t\t\t\tif (currDelegatePtr != 0) {", "+\t\t\t\t\tcurrAppDelegate = new NSObject(currDelegatePtr);", "+\t\t\t\t\tcurrAppDelegate.retain();", "-\t\t\t});", "+\t\t\t}", "+\t\t\tapplication.setDelegate(applicationDelegate);", "+\t\t} else {", "+\t\t\t// TODO: register for notification to find out when AWT finishes loading.  Waiting on new value from Apple.", "+\t", "+\t/*", "+\t * Feature in Cocoa:  NSApplication.finishLaunching() adds an apple menu to the menu bar that isn't accessible via NSMenu.", "+\t * If Display objects are created and disposed of multiple times in a single process, another apple menu is added to the menu bar.", "+\t * It must be called or the dock icon will continue to bounce. So, it should only be called once per process, not just once per", "+\t * creation of a Display.  Use a static so creation of additional Display objects won't affect the menu bar. ", "+\t */", "+\tif (!Display.launched) {", "+\t\tapplication.finishLaunching();", "+\t\tDisplay.launched = true;", "+", "+\t\t/* only add the shutdown hook once */", "+\t\tRuntime.getRuntime().addShutdownHook(new Thread() {", "+\t\t\tpublic void run() {", "+\t\t\t\tNSApplication.sharedApplication().terminate(null);", "+\t\t\t}", "+\t\t});", "+\t}", "+\t", "+\t/*", "+\t * Call init to force the AWT delegate to re-attach itself to the application menu. ", "+\t */", "+\tif (currAppDelegate != null) {", "+\t\tcurrAppDelegate.init();", "+\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "906395b65fe848d3b9908e76d44ad553", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void setAlignment(int alignment)", "signatureAfterChange": " public void setAlignment (int alignment)", "diff": ["- */", "-public void setAlignment(int alignment) {", "-\tcheckWidget();", "-\tint index = getIndex();", "+public void setAlignment (int alignment) {", "+\tcheckWidget ();", "+\tif ((alignment & (SWT.LEFT | SWT.RIGHT | SWT.CENTER)) == 0) return;", "+\tint index = getIndex ();", "+\tif (index == -1 || index == 0) return;\t/* column 0 can only have left-alignment */", "+\talignment = checkBits (alignment, SWT.LEFT, SWT.CENTER, SWT.RIGHT, 0, 0, 0);", "+\tif ((style & alignment) != 0) return;\t/* same value */", "+\tstyle &= ~(SWT.LEFT | SWT.CENTER | SWT.RIGHT);", "+\tstyle |= alignment;", "+\tint x = getX ();", "+\tparent.redraw (x, 0, width, parent.getClientArea ().height, false);", "+\tif (parent.getHeaderVisible ()) {", "+\t\tparent.header.redraw (x, 0, width, parent.getHeaderHeight (), false);\t\t", "+\t}", "+}", "-\tif ((alignment & (SWT.LEFT | SWT.RIGHT | SWT.CENTER)) != 0 && index != 0) { // ignore calls for the first column to match Windows behavior", "-\t\tstyle &= ~(SWT.LEFT | SWT.RIGHT | SWT.CENTER);", "-\t\tstyle |= alignment & (SWT.LEFT | SWT.RIGHT | SWT.CENTER);", "-\t\tgetParent().getHeader().redraw(index);\t", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf18573ee9e47d94d4a250cafa7d6f51", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "f1a5ab498a02ea2b6c3775c919b87767d3133145", "commitAfterChange": "da6ef9699dc92690440332045fea4fe9c5860d53", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void setVisible (boolean visible)", "signatureAfterChange": " public void setVisible (boolean visible)", "diff": ["-\t/*", "-\t* Feature in Motif.  Hiding or showing a scroll bar", "-\t* can cause the widget to automatically resize in", "-\t* the OS.  This behavior is unwanted.  The fix is", "-\t* to force the widget to resize to original size.", "-\t*/", "-    /* AW", "-\tint scrolledHandle = parent.scrolledHandle;", "-\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};", "-\tOS.XtGetValues (scrolledHandle, argList, argList.length / 2);", "-    */", "-", "-\t/* Hide or show the scroll bar */", "-\t/* AW", "-\tif (visible) {", "-\t\tOS.XtManageChild (handle);", "-\t} else {", "-\t\tOS.XtUnmanageChild (handle);", "+    ", "+    if (WORKS) {", "+\t\tfVisible= visible;", "+\t\tif (OS.IsControlVisible(handle) != visible) {", "+\t\t\tOS.SetControlVisibility(handle, visible, true);", "+\t\t\t", "+\t\t\tparent.relayout123();", "+\t", "+\t\t\tsendEvent(visible ? SWT.Show : SWT.Hide);", "+\t\t}", "+    } else {", "+\t\tif (visible != fVisible) {", "+\t\t    fVisible= visible;", "+\t\t\tint topHandle = topHandle ();", "+\t\t\tif (OS.IsControlVisible(topHandle) != visible) {", "+\t\t\t\tif (visible) {", "+\t\t\t\t\tOS.SetControlVisibility(topHandle, true, false);", "+\t\t\t\t\tparent.relayout123();", "+\t\t\t\t\tsendEvent(SWT.Show);", "+\t\t\t\t\tredrawHandle (0, 0, 0, 0, topHandle, true);", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.SetControlVisibility(topHandle, false, true);", "+\t\t\t\t\tparent.relayout123();", "+\t\t\t\t\tsendEvent(SWT.Hide);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-    */", "-\tif (OS.IsControlVisible(handle) != visible) {", "-\t\tOS.SetControlVisibility(handle, visible, true);", "-\t\t", "-\t\tparent.relayout123(parent.topHandle());", "-", "-\t\tsendEvent(visible ? SWT.Show : SWT.Hide);", "-\t}", "-", "-\t/* Restore the size */", "-    /* AW", "-\tOS.XtSetValues (scrolledHandle, argList, argList.length / 2);", "-    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65cd60d30289ed74afca0500d7dadb26", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "e6fd36b834853dbd7a2f4ea5d3f6a3490b642f43", "commitAfterChange": "68774e9fa7ffb588d4e87074e9abdf86ba978259", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  LRESULT CDDS_ITEMPOSTPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_ITEMPOSTPAINT (int wParam, int lParam)", "diff": ["+\t\t\t\ttextColor = -1;", "+\t\t\tif (textColor != -1) clrText = textColor;", "+\t\t\t\t\t\tint newTextClr = OS.GetTextColor (hDC);", "+\t\t\t\t\t\tif (event.doit) {", "+\t\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) != 0) {", "+\t\t\t\t\t\t\t\tif (!selected) {", "+\t\t\t\t\t\t\t\t\ttextColor = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (selected) textColor = newTextClr;", "+\t\t\t\t\t\t\t\tignoreDrawSelected = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\tif (textColor != -1) clrText = textColor;", "+\t\t\tif (textColor != -1) clrText = textColor;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46cfd12a4681f580e8ca322f6ca467ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "41d99c512e02b1744240e3ac81cae270ede0652b", "commitAfterChange": "414c5f57bcd8b7f1ced149e77e34b505be997c4f", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 196, "signatureBeforeChange": " void handlePaint(Event event)", "signatureAfterChange": " void handlePaint(Event event)", "diff": ["-\tRectangle clientArea = getClientArea();", "-\tif (clientArea.width == 0 || clientArea.height == 0) return;", "-\t", "+\tif (clientAreaWidth == 0 || clientAreaHeight == 0) return;", "+", "-\t\tint x = clientArea.x + leftMargin - horizontalScrollOffset;", "+\t\tint x = leftMargin - horizontalScrollOffset;", "-\t\t\tgc.fillRectangle(0, y, clientArea.width, endY - y);", "+\t\t\tgc.fillRectangle(0, y, clientAreaWidth, endY - y);", "-\tclearMargin(gc, background, clientArea, 0);", "-}\t", "+\t// fill the margin background", "+\tgc.setBackground(background);", "+\tif (topMargin > 0) {", "+\t\tgc.fillRectangle(0, -y, clientAreaWidth, topMargin);", "+\t}", "+\tif (bottomMargin > 0) {", "+\t\tgc.fillRectangle(0, clientAreaHeight - bottomMargin - y, clientAreaWidth, bottomMargin);", "+\t}", "+\tif (leftMargin > 0) {", "+\t\tgc.fillRectangle(0, -y, leftMargin, clientAreaHeight);", "+\t}", "+\tif (rightMargin > 0) {", "+\t\tgc.fillRectangle(clientAreaWidth - rightMargin, -y, rightMargin, clientAreaHeight);", "+\t}", "+}"]}], "num": 60228}
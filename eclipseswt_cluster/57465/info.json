{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9160f7614fe810e82c62ecd1b525f07", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ebfe4d0b4a0dc7b86ca955f693f236f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "83e1dac1af837594e187e72e8d4c2cd60386743f", "commitAfterChange": "aba5823d7335842a1956cc66c799c92c1aafef99", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 42, "signatureBeforeChange": "  boolean fixPinheadScroll (int hItem)", "signatureAfterChange": "  void showItem (int hItem)", "diff": ["-boolean fixPinheadScroll (int hItem) {", "-\t/*", "-\t* Bug in Windows.  When TVM_ENSUREVISIBLE is used to ensure", "-\t* that an item is visible and the client area of the tree is", "-\t* smaller that the size of one item, TVM_ENSUREVISIBLE makes", "-\t* the next item in the tree visible by making it the top item", "-\t* instead of making the desired item visible.  The fix is to", "-\t* detect the case when the client area is too small and make", "-\t* the desired visible item be the top item in the tree.", "-\t*/", "-\tif (OS.SendMessage (handle, OS.TVM_GETVISIBLECOUNT, 0, 0) == 0) {", "-\t\tboolean fixScroll = checkScroll (hItem);", "-\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);", "-\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_FIRSTVISIBLE, hItem);", "-\t\tOS.SendMessage (handle, OS.WM_HSCROLL, OS.SB_TOP, 0);", "-\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);", "-\t\treturn true;", "-\t}", "-\treturn false;", "-}", "+\t/*", "+\t* Bug in Windows.  When TVM_ENSUREVISIBLE is used to ensure", "+\t* that an item is visible and the client area of the tree is", "+\t* smaller that the size of one item, TVM_ENSUREVISIBLE makes", "+\t* the next item in the tree visible by making it the top item", "+\t* instead of making the desired item visible.  The fix is to", "+\t* detect the case when the client area is too small and make", "+\t* the desired visible item be the top item in the tree.", "+\t*/", "+\tif (OS.SendMessage (handle, OS.TVM_GETVISIBLECOUNT, 0, 0) == 0) {", "+\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_FIRSTVISIBLE, hItem);", "+\t\tOS.SendMessage (handle, OS.WM_HSCROLL, OS.SB_TOP, 0);", "+\t} else {", "+\t\tboolean scroll = true;", "+\t\tRECT itemRect = new RECT ();", "+\t\titemRect.left = hItem;", "+\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "+\t\t\tforceResize ();", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\tPOINT pt = new POINT ();", "+\t\t\tpt.x = itemRect.left;", "+\t\t\tpt.y = itemRect.top;", "+\t\t\tif (OS.PtInRect (rect, pt)) {", "+\t\t\t\tpt.y = itemRect.bottom;", "+\t\t\t\tif (OS.PtInRect (rect, pt)) scroll = false;", "+\t\t\t}", "+\t\t}", "+\t\tif (scroll) {", "+\t\t\tboolean fixScroll = checkScroll (hItem);", "+\t\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, hItem);", "+\t\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba17caf472fe95ef33d26d1c186e580a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "1f898d2e9733961742e6d789a21fee16deeb7844", "commitAfterChange": "3da6a13dd6d49dcf37373141989f34303810102c", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  LRESULT wmPaint (int hwnd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmPaint (int hwnd, int wParam, int lParam)", "diff": ["-", "-\t/* Get the damage */", "+\t", "+\t/* Issue a paint event */", "-\t\tresult = callWindowProc (hwnd, OS.WM_PAINT, wParam, lParam);", "-\t\tOS.InvalidateRect (hwnd, rect, false);", "-\t} else {", "-\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "-\t\tOS.GetUpdateRgn (hwnd, rgn, false);", "-\t\tOS.InvalidateRgn (hwnd, rgn, false);", "+\t\tOS.InvalidateRect (hwnd, rect, false);", "-\t\tOS.DeleteObject (rgn);", "-\t}", "-\t", "-\t/* Send the paint event */", "-\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "-\tGCData data = new GCData ();", "-\tdata.ps = ps;", "-\tdata.hwnd = hwnd;", "-\tGC gc = new_GC (data);", "-\tif (gc != null) {", "-\t\tint width = ps.right - ps.left;", "-\t\tint height = ps.bottom - ps.top;", "-\t\tif (width != 0 && height != 0) {", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.gc = gc;", "-\t\t\tevent.x = ps.left;", "-\t\t\tevent.y = ps.top;", "-\t\t\tevent.width = width;", "-\t\t\tevent.height = height;", "-\t\t\tsendEvent (SWT.Paint, event);", "-\t\t\t// widget could be disposed at this point", "-\t\t\tevent.gc = null;", "+\t\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "+\t\tGCData data = new GCData ();", "+\t\tdata.ps = ps;", "+\t\tdata.hwnd = hwnd;", "+\t\tGC gc = new_GC (data);", "+\t\tif (gc != null) {", "+\t\t\tint width = ps.right - ps.left;", "+\t\t\tint height = ps.bottom - ps.top;", "+\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.gc = gc;", "+\t\t\t\tevent.x = ps.left;", "+\t\t\t\tevent.y = ps.top;", "+\t\t\t\tevent.width = width;", "+\t\t\t\tevent.height = height;", "+\t\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\t\t// widget could be disposed at this point", "+\t\t\t\tevent.gc = null;", "+\t\t\t}", "+\t\t\tgc.dispose ();", "-\t\tgc.dispose ();", "+\t} else {", "+\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\tOS.GetUpdateRgn (hwnd, rgn, false);", "+\t\tresult = callWindowProc (hwnd, OS.WM_PAINT, wParam, lParam);", "+\t\tGCData data = new GCData ();", "+\t\tdata.hwnd = hwnd;", "+\t\tGC gc = new_GC (data);", "+\t\tif (gc != null) {", "+\t\t\tOS.HideCaret (hwnd);", "+\t\t\tRECT rect = new RECT();", "+\t\t\tOS.GetRgnBox (rgn, rect);", "+\t\t\tint width = rect.right - rect.left;", "+\t\t\tint height = rect.bottom - rect.top;", "+\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\tint hDC = gc.handle;", "+\t\t\t\tOS.SelectClipRgn (hDC, rgn);", "+\t\t\t\tOS.SetMetaRgn (hDC);", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.gc = gc;", "+\t\t\t\tevent.x = rect.left;", "+\t\t\t\tevent.y = rect.top;", "+\t\t\t\tevent.width = width;", "+\t\t\t\tevent.height = height;", "+\t\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\t\t// widget could be disposed at this point", "+\t\t\t\tevent.gc = null;", "+\t\t\t}", "+\t\t\tgc.dispose ();", "+\t\t\tOS.ShowCaret (hwnd);", "+\t\t}", "+\t\tOS.DeleteObject (rgn);"]}], "num": 57465}
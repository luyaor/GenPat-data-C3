{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d30653106ac20fd72e75edca6726ae21", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c96fb966d586acfe00f0b3969ed16f65", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \r public void setAccelerator (int accelerator)", "signatureAfterChange": "\r \r public void setAccelerator (int accelerator)", "diff": ["-\t//NOT DONE: remove previous - NEEDED NEEDED\r", "-//\t\r", "-//\tif (accelerator != 0) {\r", "-//\t\tint keyMods = 0;\r", "-//\t\tif ((accelerator & SWT.ALT) != 0) keyMods |= OS.Pk_KM_Alt;\r", "-//\t\tif ((accelerator & SWT.SHIFT) != 0) keyMods |= OS.Pk_KM_Shift;\r", "-//\t\tif ((accelerator & SWT.CONTROL) != 0) keyMods |= OS.Pk_KM_Ctrl;\r", "-//\t\tint key = accelerator & ~(SWT.ALT | SWT.SHIFT | SWT.CONTROL);\r", "-//\t\t//key = Display.untranslateKey(key);\r", "-//\t\tkey = 0x61;\r", "-//\t\tSystem.out.println(\"key=\" + Integer.toHexString(key));\r", "-//\t\tOS.PtAddHotkeyHandler(handle, key, keyMods, (short)0, SWT.Selection, 0);\r", "-//\t}\r", "+\tremoveAccelerator ();\r", "+\r", "+\tthis.accelerator = accelerator;\t\t\r", "+\tif (accelerator == 0) return;\r", "+\r", "+\tint keyMods = 0;\r", "+\tif ((accelerator & SWT.ALT) != 0) keyMods |= OS.Pk_KM_Alt;\r", "+\tif ((accelerator & SWT.SHIFT) != 0) keyMods |= OS.Pk_KM_Shift;\r", "+\tif ((accelerator & SWT.CONTROL) != 0) keyMods |= OS.Pk_KM_Ctrl;\r", "+\tint key = (accelerator & ~(SWT.ALT | SWT.SHIFT | SWT.CONTROL));\r", "+\tDisplay display = getDisplay ();\r", "+\tint keyCode = display.untranslateKey (key);\r", "+\tif (keyCode != 0) key = keyCode;\r", "+\telse key = Character.toLowerCase ((char)key);\r", "+\tShell shell = parent.getShell ();\r", "+\tOS.PtAddHotkeyHandler(shell.shellHandle, key, keyMods, (short)0, handle, display.hotkeyProc);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e18f63afabb13393e2f24dedd24460f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "c1197d63815159c7e5c24ace1200cf534bfcb22b", "commitAfterChange": "ec53a50dab87701b0c55de08a31a3f33b6914aab", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void createRenderers (int columnHandle, int modelIndex, boolean check)", "signatureAfterChange": "  void createRenderers (int columnHandle, int modelIndex, boolean check, int columnStyle)", "diff": ["-void createRenderers (int columnHandle, int modelIndex, boolean check) {", "+void createRenderers (int columnHandle, int modelIndex, boolean check, int columnStyle) {", "-\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, \"active\", 0);", "+\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, \"active\", CHECKED_COLUMN);", "+\t\t", "+\t\t/*", "+\t\t* Feature in GTK. The inconsistent property only exists in GTK 2.2.x.", "+\t\t*/", "+\t\tif (OS.gtk_major_version () >= 2 || (OS.gtk_major_version () == 2 && OS.gtk_minor_version () >= 2)) {", "+\t\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, \"inconsistent\", GRAYED_COLUMN);", "+\t\t}", "-\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, \"pixbuf\", modelIndex);", "+\tint textRenderer = OS.gtk_cell_renderer_text_new ();", "+\tif (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "+\t", "-\tint textRenderer = OS.gtk_cell_renderer_text_new ();", "-\tif (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "-\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "+", "+\t/* Set alignment */", "+\tif ((columnStyle & SWT.RIGHT) != 0) {", "+\t\tOS.g_object_set (textRenderer, OS.xalign, 1f);", "+\t\tOS.g_object_set (pixbufRenderer, OS.xalign, 1f);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, true);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, false);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 1f);", "+\t} else if ((columnStyle & SWT.CENTER) != 0) {", "+\t\tOS.g_object_set (pixbufRenderer, OS.xalign, 1f);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, true);", "+\t\tOS.gtk_tree_view_column_pack_end (columnHandle, textRenderer, true);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0.5f);", "+\t} else {", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0f);", "+\t}", "+", "+\t/* Add attributes */", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, \"pixbuf\", modelIndex);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, \"foreground-gdk\", 1);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, \"background-gdk\", 2);", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, \"foreground-gdk\", FOREGROUND_COLUMN);", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, \"background-gdk\", BACKGROUND_COLUMN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19449bf512105bb51ea658e1c31258e8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "f5eb06c9804241f856206de14e875665a6f3a84a", "commitAfterChange": "4846c1a90b46c82b860efd9a6413e3cc3db7c0b8", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " \t void initializeCallbacks ()", "signatureAfterChange": " \t void initializeCallbacks ()", "diff": ["-\tpollingCallback = new Callback (this, \"pollingProc\", 2);", "-\tpollingProc = pollingCallback.getAddress ();", "-\tif (pollingProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tobserverCallback = new Callback (this, \"observerProc\", 3);", "+\tobserverProc = observerCallback.getAddress ();", "+\tif (observerProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tsourceCallback = new Callback (this, \"sourceProc\", 1);", "+\tsourceProc = sourceCallback.getAddress ();", "+\tif (sourceProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+", "+\tint mode = OS.kCFRunLoopCommonModes ();", "+\tint activities = OS.kCFRunLoopBeforeWaiting;", "+\tint observer = OS.CFRunLoopObserverCreate (OS.kCFAllocatorDefault, activities, true, 0, observerProc, 0);", "+\tif (observer == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.CFRunLoopAddObserver (runLoop, observer, mode);", "+\tOS.CFRelease (observer);", "+\tCFRunLoopSourceContext context = new CFRunLoopSourceContext ();", "+\tcontext.version = 0;", "+\tcontext.perform = sourceProc;", "+\trunLoopSource = OS.CFRunLoopSourceCreate (OS.kCFAllocatorDefault, 0, context);", "+\tif (runLoopSource == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.CFRunLoopAddSource (runLoop, runLoopSource, mode);"]}], "num": 53587}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21ab97b5db3df5c88f65f3ca3744dcfe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6d05cd58e197d3c2ab034cbb6dc1c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "7797431085f381781603127c1f820e618e643d20", "commitAfterChange": "81787cd27e32af892df033b20e65ebc1ed6c38e6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r void setItemOrder (int [] itemOrder)", "signatureAfterChange": "\r void setItemOrder (int [] itemOrder)", "diff": ["-\t\t\t/*\r", "-\t\t\t* If the item that is about to be moved is the last item\r", "-\t\t\t* on the row, resize it to the ideal size.  Force the next\r", "-\t\t\t* to last item on the same row to be the maximum size.\r", "-\t\t\t*/\r", "-\t\t\tint lastItemDstRow = getLastIndexOfRow (i);\t\t\t\r", "+\t\t\tint lastItemDstRow = getLastIndexOfRow (i);\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\trbBand.fMask = OS.RBBIM_IDEALSIZE;\r", "-\t\t\t\tOS.SendMessage (handle, OS.RB_GETBANDINFO, index, rbBand);\r", "-\t\t\t\t//TEMPORARY CODE\r", "-//\t\t\t\tRECT rect = new RECT ();\r", "-//\t\t\t\tOS.SendMessage (handle, OS.RB_GETBANDBORDERS, index, rect);\r", "-//\t\t\t\trbBand.cx = rbBand.cxIdeal + rect.left + rect.right;\r", "-\t\t\t\trbBand.cx = rbBand.cxIdeal; \r", "-\t\t\t\trbBand.fMask = OS.RBBIM_SIZE;\r", "-\t\t\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, index, rbBand);\r", "-\t\t\t\tif (index - 1 >= 0) {\r", "-\t\t\t\t\trbBand.cx = MAX_WIDTH;\r", "-\t\t\t\t\trbBand.fMask = OS.RBBIM_SIZE;\r", "-\t\t\t\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, index - 1, rbBand);\r", "-\t\t\t\t}\t\t\t\r", "+\t\t\t\tresizeToPreferredWidth (index);\r", "+\t\t\tif (i == lastItemDstRow) {\r", "+\t\t\t\tresizeToPreferredWidth (i);\r", "+\t\t\t}\t\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* If the item that has just been moved now the last item\r", "-\t\t\t* on the row, resize it to the maximum size.\r", "-\t\t\t*/\r", "+\r", "+\t\t\tif (index == lastItemSrcRow && index - 1 >= 0) {\r", "+\t\t\t\tresizeToMaximumWidth (index - 1);\r", "+\t\t\t}\r", "-\t\t\t\trbBand.cx = MAX_WIDTH;\r", "-\t\t\t\trbBand.fMask = OS.RBBIM_SIZE;\r", "-\t\t\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, i, rbBand);\r", "+\t\t\t\tresizeToMaximumWidth (i);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca919b68a0d8bbda9331dfdbd75deec4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "e38f7ba08e4cd9896dddbc5916c5187c2e1b63eb", "commitAfterChange": "7349d1b65ee9a9edeeac8e2e96a33b2c8d655b80", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\tint length = OS.CFArrayGetCount(stringArrayRef);", "-\t\t\tString [] osAllAttributes = new String [length];", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tint stringRef = OS.CFArrayGetValueAtIndex(stringArrayRef, i);", "-\t\t\t\tosAllAttributes[i] = stringRefToString (stringRef);", "-\t\t\t}", "+\t\t\t// TODO make sure each attribute name is not a dup before appending?", "+//\t\t\tint length = OS.CFArrayGetCount(stringArrayRef);", "+//\t\t\tString [] osAllAttributes = new String [length];", "+//\t\t\tfor (int i = 0; i < length; i++) {", "+//\t\t\t\tint stringRef = OS.CFArrayGetValueAtIndex(stringArrayRef, i);", "+//\t\t\t\tosAllAttributes[i] = stringRefToString (stringRef);", "+//\t\t\t}", "-\t\t\tString [] requiredAttributes = {", "-\t\t\t\tOS.kAXRoleAttribute,", "-\t\t\t\tOS.kAXSubroleAttribute,", "-\t\t\t\tOS.kAXRoleDescriptionAttribute,", "-\t\t\t\tOS.kAXHelpAttribute,", "-\t\t\t\tOS.kAXTitleAttribute,", "-\t\t\t\tOS.kAXValueAttribute,", "-\t\t\t\tOS.kAXEnabledAttribute,", "-\t\t\t\tOS.kAXFocusedAttribute,", "-\t\t\t\tOS.kAXParentAttribute,", "-\t\t\t\tOS.kAXChildrenAttribute,", "-\t\t\t\tOS.kAXSelectedChildrenAttribute,", "-\t\t\t\tOS.kAXVisibleChildrenAttribute,", "-\t\t\t\tOS.kAXWindowAttribute,", "-\t\t\t\tOS.kAXTopLevelUIElementAttribute,", "-\t\t\t\tOS.kAXPositionAttribute,", "-\t\t\t\tOS.kAXSizeAttribute,", "-\t\t\t\tOS.kAXDescriptionAttribute,", "-\t\t\t};", "-\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringToStringRef(requiredAttributes[i]));", "+\t\t\t\tint stringRef = stringToStringRef(requiredAttributes[i]);", "+\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "+\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t}", "+\t\t\tif (accessibleTextListeners.size() > 0) {", "+\t\t\t\tfor (int i = 0; i < textAttributes.length; i++) {", "+\t\t\t\t\tint stringRef = stringToStringRef(textAttributes[i]);", "+\t\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "+\t\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\t}"]}], "num": 24099}
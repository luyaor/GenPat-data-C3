{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22a6efe8e83ad242636ac726c220ba87", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cafe36c7f2a03a7f15dbd2f02fe651a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "1587016128f120779b698d8ab37efa85ed9c8e7c", "commitAfterChange": "0ccce2455aaf79db752792a412e87db0472b05bc", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 177, "signatureBeforeChange": "  int applicationNextEventMatchingMask (int id, int sel, int mask, int expiration, int mode, int dequeue)", "signatureAfterChange": "  int applicationNextEventMatchingMask (int id, int sel, int mask, int expiration, int mode, int dequeue)", "diff": ["+\t\t/*", "+\t\t * Feature of Cocoa.  When an NSComboBox's items list is visible it runs an event", "+\t\t * loop that will close the list in response to a processed NSApplicationDefined", "+\t\t * event.", "+\t\t *", "+\t\t * Mozilla-style Browsers are a common source of NSApplicationDefined events that", "+\t\t * will cause this to happen, which is not desirable in the context of SWT.  The", "+\t\t * workaround is to detect this case and to not return the event that would trigger", "+\t\t * this to happen.", "+\t\t */", "+\t\tif (comboPoppedUp && mozillaCount > 0 && dequeue != 0) {", "+\t\t\tNSEvent event = new NSEvent(result);", "+\t\t\tif (event.type() == OS.NSApplicationDefined) {", "+\t\t\t\treturn 0;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c0b27887feb7652ca9e0916432732a0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CLabel.java", "commitBeforeChange": "74c146fa2d02aeede60f17f32016c04f01c3b944", "commitAfterChange": "81e3fd91144d536f26ddde1b77557f1af249a141", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r \r public void setBackground (Color color)", "signatureAfterChange": "\r \r public void setBackground (Color color)", "diff": ["+\t// Are these settings the same as before?\r", "+\tif (color != null && backgroundImage == null && \r", "+\t\tgradientColors == null && gradientPercents == null) {\r", "+\t\tColor background = getBackground();\r", "+\t\tif (color.equals(background)) {\r", "+\t\t\treturn;\r", "+\t\t}\t\t\r", "+\t}\r"]}], "num": 18317}
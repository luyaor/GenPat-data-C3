{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdd3dde6941fe58a1bfe38fac2acf42f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0914ec178dbc999a7a0522a3120548fe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": " static boolean cde_init(Display display)", "signatureAfterChange": "  static boolean cde_init(Display display)", "diff": ["+", "-\tint widgetClass = OS.topLevelShellWidgetClass();", "-\tint shell = OS.XtAppCreateShell(appName, appName, widgetClass, display.xDisplay, null, 0);", "-\tboolean initOK = CDE.DtAppInitialize(xtContext, display.xDisplay, shell, appName, appName);", "-\tif (!initOK) {", "-\t\tOS.XtDestroyWidget(shell);", "-\t}", "-\telse {", "-\t\tCDE.DtDbLoad();", "-\t\tdisplay.setData(CDE_SHELL, new Integer(shell));", "-\t\tdisplay.disposeExec(new Runnable() {", "-\t\t\tpublic void run() {", "-\t\t\t\t/* This logic assumes that when the corresponding display is", "-\t\t\t\t * being disposed, it must be the current one.", "-\t\t\t\t */", "-\t\t\t\tInteger shellData = (Integer)Display.getCurrent().getData(CDE_SHELL);", "-\t\t\t\tif (shellData != null) OS.XtDestroyWidget(shellData.intValue());", "-\t\t\t}", "-\t\t});", "-\t}\t", "+\tInteger shell = (Integer)display.getData(SHELL_HANDLE_KEY);", "+\tboolean initOK = CDE.DtAppInitialize(xtContext, display.xDisplay, shell.intValue(), appName, appName);", "+\tif (initOK) CDE.DtDbLoad();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67ffaf62b17aa4ffd52cdf45534339c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/BusyIndicator.java", "commitBeforeChange": "f645505ed6ea1b93c9e6df530fe1013e3c59558e", "commitAfterChange": "0fc33957c00a9b656ac59c2eadb6ed4e2a7bb041", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void showWhile(Display display, Runnable runnable)", "signatureAfterChange": "  public static void showWhile(Display display, Runnable runnable)", "diff": ["-\tCursor cursor = (Cursor)display.getData(BUSY_CURSOR);", "-\tif (cursor == null || cursor.isDisposed()) {", "-\t\tcursor = new Cursor(display, SWT.CURSOR_WAIT);", "-\t\tdisplay.setData(BUSY_CURSOR, cursor);", "-\t\tdisplay.disposeExec(new Runnable() {", "-\t\t\tpublic void run() {", "-\t\t\t\tDisplay display = Display.getCurrent();", "-\t\t\t\tCursor cursor =  (Cursor)display.getData(BUSY_CURSOR);", "-\t\t\t\tif (cursor != null) {", "-\t\t\t\t\tif (!cursor.isDisposed()) cursor.dispose();", "-\t\t\t\t\tdisplay.setData(BUSY_CURSOR, null);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t});", "-\t}", "-\t", "+\tCursor cursor = display.getSystemCursor(SWT.CURSOR_WAIT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e875e9c666b59440e486e0f5f9709eb3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java", "commitBeforeChange": "a3e2e44db2a655f3589d63d66c725987df941268", "commitAfterChange": "c05c098cc1ef245ee5c7e773f0f24620ded27ab1", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "\r \tprivate void workerExecute()", "signatureAfterChange": "\r \tprivate void workerExecute()", "diff": ["-\t\t\t\ttable.setRedraw(false);\r", "-\t\t\tfinal File theFile = dirList[i];\r", "-\t\t\t\r", "-\t\t\tfinal boolean doIncrementalRefresh = ((i & 127) == 127);\r", "-\t\t\tif (doIncrementalRefresh) display.syncExec(new Runnable() {\r", "-\t\t\t\tpublic void run () {\r", "-\t\t\t\t\t// guard against the shell being closed before this runs\r", "-\t\t\t\t\tif (shell.isDisposed()) return;\r", "-\t\t\t\t\ttable.setRedraw(true);\r", "-\t\t\t\t\ttable.setRedraw(false);\r", "-\t\t\t\t}\r", "-\t\t\t});\r", "-\t\t// Allow the table to refresh itself\r", "-\t\tdisplay.syncExec(new Runnable() {\r", "-\t\t\tpublic void run() {\r", "-\t\t\t\t// guard against the shell being closed before this runs\r", "-\t\t\t\tif (shell.isDisposed()) return;\r", "-\t\t\t\ttable.setRedraw(true);\r", "-\t\t\t}\r", "-\t\t});\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38bf7851a773c1dda8ecc61c10d3f49c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "38d7de8262353638c38d6bb8a2e84e77681e9556", "commitAfterChange": "d85f5b11f9243f8d45cd2901d872cb6aab624f0c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_graphics_ImageI()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_graphics_ImageI()", "diff": ["-\t", "-\tfinal Image image = new Image (display, 10, 10);", "-\ttestPerformance(\"copy\", new Runnable() {", "-\t\tpublic void run() {", "-\t\t\tnew Image(display, image, SWT.IMAGE_COPY).dispose();", "-\t\t}", "-\t});", "-\ttestPerformance(\"disable\", new Runnable() {", "-\t\tpublic void run() {", "-\t\t\tnew Image(display, image, SWT.IMAGE_DISABLE).dispose();", "-\t\t}", "-\t});", "-\ttestPerformance(\"gray\", new Runnable() {", "-\t\tpublic void run() {", "-\t\t\tnew Image(display, image, SWT.IMAGE_GRAY).dispose();", "-\t\t}", "-\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73b55c43bf0792bce4f15fcd79ba4522", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_GC.java", "commitBeforeChange": "0461f74b67375ddab2ba44f6763a1f498daff215", "commitAfterChange": "97e38307cc492c75c11b3f0b863d803dfbe32dac", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void test_drawImageLorg_eclipse_swt_graphics_ImageII()", "signatureAfterChange": "  public void test_drawImageLorg_eclipse_swt_graphics_ImageII()", "diff": ["-\tfinal Image image = new Image(display, data);", "+\tImage image = new Image(display, data);", "-\tfinal Image imageTransparent = new Image(display, data);", "+\tImage imageTransparent = new Image(display, data);", "-\tfinal Image imageAlpha = new Image(display, data);", "+\tImage imageAlpha = new Image(display, data);", "-\tfinal Image imageErase = new Image(display, image.getBounds().width, image.getBounds().height);", "-\ttestPerformance(\"normal image\", new Runnable() {", "-\t\tpublic void run() {", "-\t\t\tgc.drawImage(imageErase, 100, 100);", "-\t\t\tgc.drawImage(image, 100, 100);\t\t", "-\t\t}", "-\t});", "-\ttestPerformance(\"transparent image\", new Runnable() {", "-\t\tpublic void run() {", "-\t\t\tgc.drawImage(imageErase, 130, 100);", "-\t\t\tgc.drawImage(imageTransparent, 130, 100);\t\t", "-\t\t}", "-\t});", "-\ttestPerformance(\"alpha image\", new Runnable() {", "-\t\tpublic void run() {", "-\t\t\tgc.drawImage(imageErase, 160, 100);", "-\t\t\tgc.drawImage(imageAlpha, 160, 100);\t\t", "-\t\t}", "-\t});", "-\timageErase.dispose();"]}], "num": 24211}
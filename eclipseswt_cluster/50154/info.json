{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7828e7cab6e778006898ab10854d753e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e73d71675900b6a5e6902dff49bf791", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 128, "signatureBeforeChange": " boolean translateTraversal (MacEvent mEvent)", "signatureAfterChange": "  boolean traverseMnemonic (Event event)", "diff": ["-*/", "-boolean translateTraversal (MacEvent mEvent) {", "-\t", "-\tint kind= mEvent.getKind();", "-\tif (kind != OS.kEventRawKeyDown && kind != OS.kEventRawKeyRepeat)", "-\t\treturn false;", "-\tint detail = SWT.TRAVERSE_NONE;", "-\t/* AW", "-\tGdkEventKey keyEvent = new GdkEventKey ();", "-\tOS.memmove (keyEvent, gdkEvent, GdkEventKey.sizeof);", "-\tint key = keyEvent.keyval;", "-\tint code = traversalCode (key, gdkEvent);", "-\tint [] state = new int [1];", "-\tOS.gdk_event_get_state (gdkEvent, state);", "-\t*/", "-\tint code= traversalCode ();", "-\tint key= mEvent.getKeyCode();", "-\tint state= mEvent.getStateMask();", "-\tboolean all = false;", "-\tswitch (key) {", "-\t\tcase 53 /* OS.GDK_Escape:", "-\t\tcase OS.GDK_Cancel */: {", "-\t\t\tall = true;", "-\t\t\tdetail = SWT.TRAVERSE_ESCAPE;", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase 36 /* OS.GDK_Return */ : {", "-\t\t\tall = true;", "-\t\t\tdetail = SWT.TRAVERSE_RETURN;", "-\t\t\tbreak;", "-\t\t}", "-\t\t//case OS.GDK_ISO_Left_Tab: ", "-\t\tcase 48 /* OS.GDK_Tab */ : {", "-\t\t\tboolean next = (state & SWT.SHIFT) == 0;", "-\t\t\t/*", "-\t\t\t* NOTE: This code causes Shift+Tab and Ctrl+Tab to", "-\t\t\t* always attempt traversal which is not correct.", "-\t\t\t* The default should be the same as a plain Tab key.", "-\t\t\t* This behavior is currently relied on by StyledText.", "-\t\t\t* ", "-\t\t\t* The correct behavior is to give every key to any", "-\t\t\t* control that wants to see every key.  The default", "-\t\t\t* behavior for a Canvas should be to see every key.", "-\t\t\t*/", "-\t\t\t/* AW", "-\t\t\tswitch (state [0]) {", "-\t\t\t\tcase OS.GDK_SHIFT_MASK:", "-\t\t\t\tcase OS.GDK_CONTROL_MASK:", "-\t\t\t\t\tcode |= SWT.TRAVERSE_TAB_PREVIOUS | SWT.TRAVERSE_TAB_NEXT;", "-\t\t\t}", "-\t\t\t*/", "-\t\t\tdetail = next ? SWT.TRAVERSE_TAB_NEXT : SWT.TRAVERSE_TAB_PREVIOUS;", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase 126: // OS.GDK_Up:", "-\t\tcase 123: // OS.GDK_Left:", "-\t\t\tdetail = SWT.TRAVERSE_ARROW_PREVIOUS;", "-\t\t\tbreak;", "-\t\t\t", "-\t\tcase 125: // OS.GDK_Down:", "-\t\tcase 124: /* OS.GDK_Right: */", "-\t\t\tdetail = SWT.TRAVERSE_ARROW_NEXT;", "-\t\t\tbreak;", "-\t\t\t", "-\t\tcase 116: // OS.GDK_Page_Up:", "-\t\tcase 121: /* OS.GDK_Page_Down: */ {", "-\t\t\tall = true;", "-\t\t\t/* AW", "-\t\t\tif ((state [0] & OS.GDK_CONTROL_MASK) == 0) return false;", "-\t\t\t*/", "-\t\t\t/*", "-\t\t\t* NOTE: This code causes Ctrl+PgUp and Ctrl+PgDn to always", "-\t\t\t* attempt traversal which is not correct.  This behavior is", "-\t\t\t* currently relied on by StyledText.", "-\t\t\t* ", "-\t\t\t* The correct behavior is to give every key to any", "-\t\t\t* control that wants to see every key.  The default", "-\t\t\t* behavior for a Canvas should be to see every key.", "-\t\t\t*/", "-\t\t\tcode |= SWT.TRAVERSE_PAGE_NEXT | SWT.TRAVERSE_PAGE_PREVIOUS;", "-\t\t\tdetail = key == 121 ? SWT.TRAVERSE_PAGE_NEXT : SWT.TRAVERSE_PAGE_PREVIOUS;", "-\t\t\tbreak;", "-\t\t}", "-\t\tdefault:", "-\t\t\treturn false;", "-\t}", "-\t", "-\tEvent event = new Event ();", "-\tevent.doit = (code & detail) != 0;", "-\tevent.detail = detail;", "-\t/* AW", "-\tevent.time = keyEvent.time;", "-\tsetInputState (event, gdkEvent);", "-\t*/", "-\tShell shell = getShell ();", "-\tControl control = this;", "-\tdo {", "-\t\tif (control.traverse (event)) return true;", "-\t\tif (!event.doit && control.hooks (SWT.Traverse)) {", "-\t\t\treturn false;", "-\t\t}", "-\t\tif (control == shell) return false;", "-\t\tcontrol = control.parent;", "-\t} while (all && control != null);", "+\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6dc6a3dcf751064f1e3c0b312af0b93", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "e3ffa03ceaf7703e7ab3292990f53dd9ebc09848", "commitAfterChange": "bad1afba2bae87fcb485bb971088066d4ff1a6e9", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 103, "signatureBeforeChange": "\r \r boolean translateTraversal (int key_sym, PhKeyEvent_t phEvent)", "signatureAfterChange": "\r \r boolean translateTraversal (int key_sym, PhKeyEvent_t phEvent)", "diff": ["-\tint detail = 0;\r", "-\tboolean shift = (phEvent.key_mods & OS.Pk_KM_Shift) != 0;\r", "-\tboolean control = (phEvent.key_mods & OS.Pk_KM_Ctrl) != 0;\r", "+\tint detail = SWT.TRAVERSE_NONE;\r", "+\tint code = traversalCode (key_sym, phEvent);\r", "+\tboolean all = false;\r", "-\t\tcase OS.Pk_Escape:\r", "+\t\tcase OS.Pk_Escape: {\r", "-\t\t\tif (shell.parent == null) return false;\r", "-\t\tcase OS.Pk_Return:\r", "+\t\t}\r", "+\t\tcase OS.Pk_Return: {\r", "+\t\t}\r", "-\t\tcase OS.Pk_KP_Tab:\r", "-\t\t\tdetail = SWT.TRAVERSE_TAB_NEXT;\r", "-\t\t\tif (shift) detail = SWT.TRAVERSE_TAB_PREVIOUS;\r", "+\t\tcase OS.Pk_KP_Tab: {\r", "+\t\t\tboolean next = (phEvent.key_mods & OS.Pk_KM_Shift) == 0;\r", "+\t\t\tdetail = next ? SWT.TRAVERSE_TAB_NEXT : SWT.TRAVERSE_TAB_PREVIOUS;\r", "+\t\t}\r", "-\t\tcase OS.Pk_Left: \r", "+\t\tcase OS.Pk_Left: {\r", "+\t\t}\r", "-\t\tcase OS.Pk_Right:\r", "+\t\tcase OS.Pk_Right: {\r", "+\t\t}\r", "+\t\tcase OS.Pk_Pg_Down:\r", "+\t\tcase OS.Pk_Pg_Up: {\r", "+\t\t\tall = true;\r", "+\t\t\tif ((phEvent.key_mods & OS.Pk_KM_Ctrl) == 0) return false;\r", "+\t\t\tdetail = key_sym == OS.Pk_Pg_Down ? SWT.TRAVERSE_PAGE_NEXT : SWT.TRAVERSE_PAGE_PREVIOUS;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "-\tboolean doit = (detail & traversalCode (key_sym, phEvent)) != 0;\r", "-\tif (!doit && control && (key_sym == OS.Pk_Tab || key_sym == OS.Pk_Tab)) {\r", "-\t\tdoit = true;\r", "-\t\tcontrol = false;\r", "-\t}\r", "-\tif (hooks (SWT.Traverse)) {\r", "-\t\tEvent event = new Event();\r", "-\t\tevent.doit = doit;\r", "-\t\tevent.detail = detail;\r", "-\t\tsetKeyState (event, phEvent);\r", "-\t\tsendEvent (SWT.Traverse, event);\r", "-\t\tif (isDisposed ()) return true;\r", "-\t\tdoit = event.doit;\r", "-\t\tdetail = event.detail;\r", "-\t}\r", "-\tif (doit) {\r", "-\t\tswitch (detail) {\r", "-\t\t\tcase SWT.TRAVERSE_ESCAPE:\t\treturn traverseEscape ();\r", "-\t\t\tcase SWT.TRAVERSE_RETURN:\t\treturn traverseReturn ();\r", "-\t\t\tcase SWT.TRAVERSE_TAB_NEXT:\t\treturn traverseGroup (true, control);\r", "-\t\t\tcase SWT.TRAVERSE_TAB_PREVIOUS:\t\treturn traverseGroup (false, control);\r", "-\t\t\tcase SWT.TRAVERSE_ARROW_NEXT:\t\treturn traverseItem (true);\r", "-\t\t\tcase SWT.TRAVERSE_ARROW_PREVIOUS:\treturn traverseItem (false);\t\r", "-\t\t}\r", "-\t}\r", "+\tEvent event = new Event ();\r", "+\tevent.doit = (code & detail) != 0 || (phEvent.key_mods & OS.Pk_KM_Ctrl) != 0;\r", "+\tevent.detail = detail;\r", "+\tsetKeyState (event, phEvent);\r", "+\tShell shell = getShell ();\r", "+\tControl control = this;\r", "+\tdo {\r", "+\t\tif (control.traverse (event)) return true;\r", "+\t\tif (control == shell) return false;\r", "+\t\tcontrol = control.parent;\r", "+\t} while (all && control != null);\r"]}], "num": 50154}
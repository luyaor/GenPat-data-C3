{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "736a0eb69159f72350ae24d7dd405dcf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d22d92217ec883b16a24622f303f234", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "2f7ba906a81d69a17a7216b6091b6bd3f5cacc12", "commitAfterChange": "fddcf2f032850d3eb6550c44c0aeb80fc19a12d0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private static ImageData gnome_getMimeIcon(String mimeType)", "signatureAfterChange": "  private static Program gnome_getProgram(Display display, String mimeType)", "diff": ["+private static Program gnome_getProgram(Display display, String mimeType) {", "+\tProgram program = null;", "+\t\tprogram = new Program();", "+\t\tprogram.display = display;", "+\t\tprogram.name = mimeType;", "+\t\tint length = OS.strlen(application.command);", "+\t\tOS.memmove(buffer, application.command, length);\t\t", "+\t\tprogram.command = new String(Converter.mbcsToWcs(null, buffer));", "+\t\tprogram.gnomeExpectUri = application.expects_uris == GNOME.GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS;", "+\t\t", "+\t\tlength = OS.strlen(application.id);", "+\t\tbuffer = new byte[length + 1];", "+\t\tOS.memmove(buffer, application.id, length);", "+\t\t/* ", "+\t\t* Note.  gnome_icon_theme_new uses g_object_new to allocate the data it returns.", "+\t\t* Use g_object_unref to free the pointer it returns.", "+\t\t*/", "+\t\tint icon_theme = GNOME.gnome_icon_theme_new();", "+\t\tint icon_name = GNOME.gnome_icon_lookup(icon_theme, 0, null, buffer, 0, mimeTypeBuffer, ", "+\t\t\t\tGNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null);", "+\t\tint path = 0;", "+\t\tif (icon_name != 0) path = GNOME.gnome_icon_theme_lookup_icon(icon_theme, icon_name, PREFERRED_ICON_SIZE, null, null);", "+\t\tGNOME.g_object_unref(icon_theme);", "+\t\tif (path != 0) {", "+\t\t\tlength = OS.strlen(path);", "+\t\t\tif (length > 0) {", "+\t\t\t\tbuffer = new byte[length];", "+\t\t\t\tOS.memmove(buffer, path, length);", "+\t\t\t\tString result = new String(Converter.mbcsToWcs(null, buffer));", "+\t\t\t\ttry {", "+\t\t\t\t\tprogram.imageData = new ImageData(result);", "+\t\t\t\t} catch (Exception e) {", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tGNOME.g_free(icon_name);", "+\t\t\tGNOME.g_free(path);", "+\t\t}", "-", "-private static ImageData gnome_getMimeIcon(String mimeType) {", "-\tbyte[] mimeTypeBuffer = Converter.wcsToMbcs(null, mimeType, true);", "-\t/* ", "-\t* Note.  gnome_icon_theme_new uses g_object_new to allocate the data it returns.", "-\t* Use g_object_unref to free the pointer it returns.", "-\t*/", "-\tint icon_theme = GNOME.gnome_icon_theme_new();", "-\tint icon_name = GNOME.gnome_icon_lookup(icon_theme, 0, null, null, 0, mimeTypeBuffer, ", "-\t\t\tGNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null);", "-\tint path = 0;", "-\tif (icon_name != 0) path = GNOME.gnome_icon_theme_lookup_icon(icon_theme, icon_name, -1, null, null);", "-\tGNOME.g_object_unref(icon_theme);", "-\tif (path == 0) return null;", "-\tint length = OS.strlen(path);", "-\tif (length == 0) return null;", "-\tbyte[] buffer = new byte[length];", "-\tOS.memmove(buffer, path, length);", "-\tOS.g_free(path);", "-\tString result = new String(Converter.mbcsToWcs(null, buffer));", "-\tImageData data = null;", "-\ttry {", "-\t\tdata = new ImageData(result);", "-\t} catch (Exception e) {", "-\t}", "-\treturn data;", "+\treturn program;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06f57d992290ceb9935fd1839ea035f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "aef24227838feed584df6f1c2176ca2bff376d6b", "commitAfterChange": "b40eff8991344ccb4f444338b3cef0b94c627c2a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private static ImageData gnome_getMimeIcon(String mimeType)", "signatureAfterChange": "  private static Program gnome_getProgram(Display display, String mimeType)", "diff": ["+private static Program gnome_getProgram(Display display, String mimeType) {", "+\tProgram program = null;", "+\t\tprogram = new Program();", "+\t\tprogram.display = display;", "+\t\tprogram.name = mimeType;", "+\t\tint length = OS.strlen(application.command);", "+\t\tOS.memmove(buffer, application.command, length);\t\t", "+\t\tprogram.command = new String(Converter.mbcsToWcs(null, buffer));", "+\t\tprogram.gnomeExpectUri = application.expects_uris == GNOME.GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS;", "+\t\t", "+\t\tlength = OS.strlen(application.id);", "+\t\tbuffer = new byte[length + 1];", "+\t\tOS.memmove(buffer, application.id, length);", "+\t\t/* ", "+\t\t* Note.  gnome_icon_theme_new uses g_object_new to allocate the data it returns.", "+\t\t* Use g_object_unref to free the pointer it returns.", "+\t\t*/", "+\t\tint icon_theme = GNOME.gnome_icon_theme_new();", "+\t\tint icon_name = GNOME.gnome_icon_lookup(icon_theme, 0, null, buffer, 0, mimeTypeBuffer, ", "+\t\t\t\tGNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null);", "+\t\tint path = 0;", "+\t\tif (icon_name != 0) path = GNOME.gnome_icon_theme_lookup_icon(icon_theme, icon_name, PREFERRED_ICON_SIZE, null, null);", "+\t\tGNOME.g_object_unref(icon_theme);", "+\t\tif (path != 0) {", "+\t\t\tlength = OS.strlen(path);", "+\t\t\tif (length > 0) {", "+\t\t\t\tbuffer = new byte[length];", "+\t\t\t\tOS.memmove(buffer, path, length);", "+\t\t\t\tString result = new String(Converter.mbcsToWcs(null, buffer));", "+\t\t\t\ttry {", "+\t\t\t\t\tprogram.imageData = new ImageData(result);", "+\t\t\t\t} catch (Exception e) {", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tGNOME.g_free(icon_name);", "+\t\t\tGNOME.g_free(path);", "+\t\t}", "-", "-private static ImageData gnome_getMimeIcon(String mimeType) {", "-\tbyte[] mimeTypeBuffer = Converter.wcsToMbcs(null, mimeType, true);", "-\t/* ", "-\t* Note.  gnome_icon_theme_new uses g_object_new to allocate the data it returns.", "-\t* Use g_object_unref to free the pointer it returns.", "-\t*/", "-\tint icon_theme = GNOME.gnome_icon_theme_new();", "-\tint icon_name = GNOME.gnome_icon_lookup(icon_theme, 0, null, null, 0, mimeTypeBuffer, ", "-\t\t\tGNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null);", "-\tint path = 0;", "-\tif (icon_name != 0) path = GNOME.gnome_icon_theme_lookup_icon(icon_theme, icon_name, -1, null, null);", "-\tGNOME.g_object_unref(icon_theme);", "-\tif (path == 0) return null;", "-\tint length = OS.strlen(path);", "-\tif (length == 0) return null;", "-\tbyte[] buffer = new byte[length];", "-\tOS.memmove(buffer, path, length);", "-\tGNOME.g_free(path);", "-\tString result = new String(Converter.mbcsToWcs(null, buffer));", "-\tImageData data = null;", "-\ttry {", "-\t\tdata = new ImageData(result);", "-\t} catch (Exception e) {", "-\t}", "-\treturn data;", "+\treturn program;"]}], "num": 14118}
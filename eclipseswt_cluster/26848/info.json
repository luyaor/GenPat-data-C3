{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a9dc5d50d93027e8b73f20cada03938", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc7d94ce7e9e80578955aa45938e31b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "14847fc50ac21dbfae0a2bd75c455ca661cd2bd0", "commitAfterChange": "db1f6bc7e04f75d6fd9d429b8b4d02d4787e43d9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test_getAlphasIII$BI()", "signatureAfterChange": "  public void test_getAlphasIII$BI()", "diff": ["-\twarnUnimpl(\"Test test_getAlphasIII$BI not written\");", "+\tbyte value;", "+\tfinal int SIZE = 20; ", "+\tfinal int GET_WIDTH = 10;", "+\tfinal int OFFSET = 10;", "+\tbyte[] alphaData = new byte[SIZE];", "+\t", "+\timageData.getAlphas(0, 1, GET_WIDTH, alphaData, OFFSET);", "+\tfor (int i = 0; i < alphaData.length; i ++) {", "+\t\tif (i < OFFSET) {", "+\t\t\tassertEquals(\":a:\", 0, alphaData[i]);", "+\t\t} else {", "+\t\t\tassertEquals(\":b:\", (byte) 255, alphaData[i]);", "+\t\t}", "+\t}", "+", "+\tvalue = (byte) 0xAA;", "+\tbyte[] values = new byte[] {value, (byte) (value+1), (byte) (value+2), (byte) (value+3), (byte) (value+4)};", "+\timageData.setAlphas(0, 1, values.length, values, 0);", "+\timageData.getAlphas(0, 1, GET_WIDTH, alphaData, OFFSET);", "+\tfor (int i = 0; i < alphaData.length; i++) {", "+\t\tif (i < OFFSET) {", "+\t\t\tassertEquals(\":c:\", 0, alphaData[i]);", "+\t\t} else if (i < OFFSET + values.length) {", "+\t\t\tassertEquals(\":d:\", (byte) values[i-OFFSET], alphaData[i]);\t", "+\t\t} else if (i < OFFSET+GET_WIDTH) {", "+\t\t\tassertEquals(\":e:\", 0, alphaData[i]);", "+\t\t}", "+\t}", "+\t", "+\t// exception cases", "+\ttry {", "+\t\timageData.getAlphas(0, 1, GET_WIDTH*GET_WIDTH, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for getWidth out of bounds\");", "+\t} catch (IndexOutOfBoundsException e) {", "+\t}", "+\ttry {", "+\t\timageData.getAlphas(0, 1, GET_WIDTH, (byte[]) null, OFFSET);", "+\t\tfail(\"No exception thrown for alphas == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for alphas == null\", SWT.ERROR_NULL_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.getAlphas(-1, 1, GET_WIDTH, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for x out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for x out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.getAlphas(IMAGE_DIMENSION, 1, GET_WIDTH, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for x out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for x out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.getAlphas(0, -1, GET_WIDTH, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for y out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for y out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.getAlphas(0, IMAGE_DIMENSION, GET_WIDTH, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for y out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for y out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.getAlphas(0, 1, -1, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for getWidth < 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for getWidth < 0\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18a8846b2db8010757e0240020df9645", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "14847fc50ac21dbfae0a2bd75c455ca661cd2bd0", "commitAfterChange": "db1f6bc7e04f75d6fd9d429b8b4d02d4787e43d9", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public void test_setAlphasIII$BI()", "signatureAfterChange": "  public void test_setAlphasIII$BI()", "diff": ["-\twarnUnimpl(\"Test test_setAlphasIII$BI not written\");", "+\tbyte value;", "+\tfinal int SIZE = 20; ", "+\tfinal int OFFSET = 1;", "+\tbyte[] alphaData = new byte[SIZE];", "+\t", "+\tvalue = (byte) 0xAA;", "+\tbyte[] values = new byte[] {value, (byte) (value+1), (byte) (value+2), (byte) (value+3), (byte) (value+4)};", "+\timageData.setAlphas(0, 1, values.length - OFFSET, values, OFFSET);", "+\timageData.getAlphas(0, 1, IMAGE_DIMENSION, alphaData, 0);", "+\tfor (int i = 0; i < alphaData.length; i++) {", "+\t\tif (i + OFFSET < values.length) {", "+\t\t\tassertEquals(\":a:\", (byte) values[i + OFFSET], alphaData[i]);", "+\t\t} else {", "+\t\t\tassertEquals(\":b:\", 0, alphaData[i]);", "+\t\t}", "+\t}", "+\t", "+\t// exception cases", "+\ttry {", "+\t\timageData.setAlphas(0, 1, IMAGE_DIMENSION*IMAGE_DIMENSION, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for putWidth out of bounds\");", "+\t} catch (IndexOutOfBoundsException e) {", "+\t}", "+\ttry {", "+\t\timageData.setAlphas(0, 1, IMAGE_DIMENSION, (byte[]) null, OFFSET);", "+\t\tfail(\"No exception thrown for alphas == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for alphas == null\", SWT.ERROR_NULL_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.setAlphas(-1, 1, IMAGE_DIMENSION, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for x out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for x out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.setAlphas(IMAGE_DIMENSION, 1, IMAGE_DIMENSION, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for x out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for x out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.setAlphas(0, -1, IMAGE_DIMENSION, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for y out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for y out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.setAlphas(0, IMAGE_DIMENSION, IMAGE_DIMENSION, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for y out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for y out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.setAlphas(0, 1, -1, alphaData, OFFSET);", "+\t\tfail(\"No exception thrown for putWidth < 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for putWidth < 0\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}\t"]}], "num": 26848}
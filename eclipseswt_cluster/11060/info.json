{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "107a8c27da5cde3ae3aca80a9b366423", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "194efbe29c958a0591e2029dc69fcf18", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "661422432394351e3f7c8246c62533b4985dd33e", "commitAfterChange": "a60dcbe23c6c9a34e8c5f7c1961c3b95bba5018f", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["+\t\t\t\t/*", "+\t\t\t\t* Bug in Windows.  When a table has the LVS_EX_GRIDLINES extended", "+\t\t\t\t* style and the user drags any column over the first column in the", "+\t\t\t\t* table, making the size become zero, when the user drags a column", "+\t\t\t\t* such that the size of the first column becomes non-zero, the grid", "+\t\t\t\t* lines are not redrawn.  The fix is to detect the case and force", "+\t\t\t\t* a redraw of the first column.", "+\t\t\t\t*/", "+\t\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "+\t\t\t\tif (lastWidth == 0 && width > 0) {", "+\t\t\t\t\tint bits = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\t\t\t\tif ((bits & OS.LVS_EX_GRIDLINES) != 0) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\t\t\trect.right = rect.left + width;", "+\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tlastWidth = width;", "-\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\t\tcolumn.sendEvent (SWT.Resize, event);", "+\t\t\t\t\t\t\tcolumn.sendEvent (SWT.Resize);", "-\t\t\t\t\t\t\t\t\tnewColumns [i].sendEvent (SWT.Move, event);", "+\t\t\t\t\t\t\t\t\tnewColumns [i].sendEvent (SWT.Move);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9210e5e858e1f6d78b67fa5fda072198", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "3b0f621c65909d88d57dcb3517eafeb717bf8adf", "commitAfterChange": "42a346927a113e8a87d02326584023043992e4a2", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "  LRESULT WM_SETCURSOR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SETCURSOR (int wParam, int lParam)", "diff": ["-\t\t\t\tif (OS.GetCursorPos (pt)) {", "-\t\t\t\t\tOS.ScreenToClient (handle, pt);", "-\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\tOS.GetClientRect (handle, rect);", "-\t\t\t\t\tif (OS.PtInRect (rect, pt)) {", "-\t\t\t\t\t\tOS.SetCursor (cursor.handle);", "-\t\t\t\t\t\tswitch (msg) {", "-\t\t\t\t\t\t\tcase OS.WM_LBUTTONDOWN:", "-\t\t\t\t\t\t\tcase OS.WM_RBUTTONDOWN:", "-\t\t\t\t\t\t\tcase OS.WM_MBUTTONDOWN:", "-\t\t\t\t\t\t\tcase OS.WM_XBUTTONDOWN:", "-\t\t\t\t\t\t\t\tOS.MessageBeep (OS.MB_OK);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\tint pos = OS.GetMessagePos ();", "+\t\t\t\tpt.x = (short) (pos & 0xFFFF);", "+\t\t\t\tpt.y = (short) (pos >> 16);", "+\t\t\t\tOS.ScreenToClient (handle, pt);", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\tif (OS.PtInRect (rect, pt)) {", "+\t\t\t\t\tOS.SetCursor (cursor.handle);", "+\t\t\t\t\tswitch (msg) {", "+\t\t\t\t\t\tcase OS.WM_LBUTTONDOWN:", "+\t\t\t\t\t\tcase OS.WM_RBUTTONDOWN:", "+\t\t\t\t\t\tcase OS.WM_MBUTTONDOWN:", "+\t\t\t\t\t\tcase OS.WM_XBUTTONDOWN:", "+\t\t\t\t\t\t\tOS.MessageBeep (OS.MB_OK);", "+\t\t\t\t\treturn LRESULT.ONE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97e62dad191f58b9e70f8cf584385be2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7a0e684edfa37ede804fa2d0b89ffc7fc19a0fcd", "commitAfterChange": "58e02b4f0ace0c11884926ba3d0ab2bb16b2cdb0", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public TableItem getItem (Point point)", "signatureAfterChange": " public TableItem getItem (Point point)", "diff": ["-\tif (pinfo.iItem != -1) return _getItem (pinfo.iItem);", "+\tif (pinfo.iItem != -1) {", "+\t\t/*", "+\t\t* Bug in Windows.  When the point that is used by", "+\t\t* LVM_HITTEST is inside the header, Windows returns", "+\t\t* the first item in the table.  The fix is to check", "+\t\t* when LVM_HITTEST returns the first item and make", "+\t\t* sure that when the point is within the header,", "+\t\t* the first item is not returned.", "+\t\t*/", "+\t\tif (pinfo.iItem == 0) {", "+\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\tif ((bits & OS.LVS_NOCOLUMNHEADER) == 0) {", "+\t\t\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\tRECT rect = new RECT ();\t\t\t\t\t", "+\t\t\t\t\tOS.GetWindowRect (hwndHeader, rect);", "+\t\t\t\t\tPOINT pt = new POINT ();", "+\t\t\t\t\tpt.x = pinfo.x;", "+\t\t\t\t\tpt.y = pinfo.y;", "+\t\t\t\t\tOS.MapWindowPoints (handle, 0, pt, 1);", "+\t\t\t\t\tif (OS.PtInRect (rect, pt)) return null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn _getItem (pinfo.iItem);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9653e4ecb690a6cbc44bd10377a73cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "344495d193406fcc18fd9d953e0e7125082dc624", "commitAfterChange": "3e7cd17b0f25301421344ef85e8eac75a5a11cf2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  void layoutItems ()", "signatureAfterChange": "  void layoutItems ()", "diff": ["+", "+\t/*", "+\t* Feature on Windows. When SWT.WRAP or SWT.VERTICAL are set", "+\t* the separator items with control are implemented using BTNS_BUTTON ", "+\t* instead of BTNS_SEP. When that is the case and TBSTYLE_LIST is ", "+\t* set, the layout of the ToolBar recalculates the width for all ", "+\t* BTNS_BUTTON based on the text and bitmap of the item.", "+\t* This is not strictly wrong, but the user defined width for the", "+\t* separators has to be respected if set.", "+\t* The fix is to detect this case and reset the cx width for the item.  ", "+\t*/", "+\tif ((style & (SWT.WRAP | SWT.VERTICAL)) != 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.TBSTYLE_LIST) != 0) {", "+\t\t\tTBBUTTONINFO info = new TBBUTTONINFO ();", "+\t\t\tinfo.cbSize = TBBUTTONINFO.sizeof;", "+\t\t\tinfo.dwMask = OS.TBIF_SIZE;", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tToolItem item = items [i];", "+\t\t\t\tif (item != null && item.cx > 0) {", "+\t\t\t\t\tinfo.cx = item.cx;", "+\t\t\t\t\tOS.SendMessage (handle, OS.TB_SETBUTTONINFO, item.id, info);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05f90d5a70e1bfeed2de23ffdcb04b3e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "0e6fd9fd38f9e1fcc9f2e95d4219009e605e7ee9", "commitAfterChange": "dd7a4ef251453dc2eb3a210e467eec1edf642a27", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 67, "signatureBeforeChange": "  LRESULT WM_SETCURSOR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SETCURSOR (int wParam, int lParam)", "diff": ["-\tint msg = lParam >> 16;", "+\tint msg = (short) (lParam >> 16);", "+\t/*", "+\t* When the shell that contains a cursor is disabled,", "+\t* WM_SETCURSOR is called with HTERROR.  Normally,", "+\t* when a control is disabled, the parent will get", "+\t* mouse and cursor events.  In the case of a disabled", "+\t* shell, there is no enabled parent.  In order to", "+\t* show the cursor when a shell is disabled, it is", "+\t* necessary to override WM_SETCURSOR when called", "+\t* with HTERROR to set the cursor but only when the", "+\t* mouse is in the client area of the shell.", "+\t*/", "+\tint hitTest = (short) (lParam & 0xFFFF);", "+\tif (hitTest == OS.HTERROR) {", "+\t\tif (!getEnabled ()) {", "+\t\t\tControl control = display.getControl (wParam);", "+\t\t\tif (control == this && cursor != null) {", "+\t\t\t\tPOINT pt = new POINT ();", "+\t\t\t\tif (OS.GetCursorPos (pt)) {", "+\t\t\t\t\tOS.ScreenToClient (handle, pt);", "+\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\t\tif (OS.PtInRect (rect, pt)) {", "+\t\t\t\t\t\tOS.SetCursor (cursor.handle);", "+\t\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b37bf7998734f890f5e8bdf4921f6171", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "f512a1c18cede51efc08a4723c1f52693141c1bd", "commitAfterChange": "3759191e09fba6c3d3573e58fce6f7627bdc0ffa", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 145, "signatureBeforeChange": "  LRESULT wmNotifyChild (NMHDR hdr, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (NMHDR hdr, int wParam, int lParam)", "diff": ["-\t\t\tif (hooks (SWT.DefaultSelection)) return LRESULT.ONE;", "+\t\t\t/*", "+\t\t\t* When the user double clicks on a tree item", "+\t\t\t* or a line beside the item, the window proc", "+\t\t\t* for the tree collapses or expland the branch.", "+\t\t\t* When application code associates an action", "+\t\t\t* with double clicking, then the tree expand", "+\t\t\t* is unexpected and unwanted.  The fix is to", "+\t\t\t* avoid the operation by testing to see whether", "+\t\t\t* the mouse was inside a tree item.", "+\t\t\t*/", "+\t\t\tif (hooks (SWT.DefaultSelection)) {", "+\t\t\t\tPOINT pt = new POINT ();", "+\t\t\t\tint pos = OS.GetMessagePos ();", "+\t\t\t\tpt.x = (short) (pos & 0xFFFF);", "+\t\t\t\tpt.y = (short) (pos >> 16);", "+\t\t\t\tOS.ScreenToClient (handle, pt);", "+\t\t\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "+\t\t\t\tlpht.x = pt.x;", "+\t\t\t\tlpht.y = pt.y;", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "+\t\t\t\tif (lpht.hItem != 0 && (lpht.flags & OS.TVHT_ONITEM) != 0) {", "+\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0714715481f9e21fd47ab9ed1d438722", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "c51fb393ab99325d9af1d3ac8aee99c3635a0d78", "commitAfterChange": "5bb98690a54122d614fad2d467c682c2744e7690", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["+\t\t/*", "+\t\t* Bug in Windows.  When a tree has no images and an item is", "+\t\t* expanded or collapsed, for some reason, Windows changes", "+\t\t* the size of the selection.  When the user expands a tree", "+\t\t* item, the selection rectangle is made a few pixels larger.", "+\t\t* When the user collapses an item, the selection rectangle", "+\t\t* is restored to the original size but the selection is not", "+\t\t* redrawn, causing pixel corruption.  The fix is to detect", "+\t\t* this case and redraw the item.", "+\t\t*/", "+\t\tif ((lpht.flags & OS.TVHT_ONITEMBUTTON) != 0) {", "+\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETIMAGELIST, OS.TVSIL_NORMAL, 0) == 0) {", "+\t\t\t\t\tint /*long*/ hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\t\t\tif (hItem != 0) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tif (OS.TreeView_GetItemRect (handle, hItem, rect, false)) {", "+\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2a5264c995219b94e299a1ed6afcc63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "fcad395d7da1b4363faafa06975ec35422a8ea3a", "commitAfterChange": "d7427cebf50028bab5e6b28bb9e84910376870e1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  void createItem (TreeItem item, int hParent, int hInsertAfter, int hItem)", "signatureAfterChange": "  void createItem (TreeItem item, int hParent, int hInsertAfter, int hItem)", "diff": ["+\t\t/*", "+\t\t* Bug in Windows.  When a new item is added while Windows", "+\t\t* is requesting data a tree item using TVN_GETDISPINFO,", "+\t\t* outstanding damage for items that are below the new item", "+\t\t* is not scrolled.  The fix is to explicitly damage the", "+\t\t* new area.", "+\t\t*/", "+\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\tif (currentItem != null) {", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\trect.left = hNewItem;", "+\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect) != 0) {", "+\t\t\t\t\tRECT damageRect = new RECT ();", "+\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, damageRect, true);", "+\t\t\t\t\tif (damaged && damageRect.top < rect.bottom) {", "+\t\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\t\tOS.OffsetRect (damageRect, 0, rect.bottom - rect.top);", "+\t\t\t\t\t\t\tOS.InvalidateRect (handle, damageRect, true);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "+\t\t\t\t\t\t\tif (result != OS.NULLREGION) {", "+\t\t\t\t\t\t\t\tOS.OffsetRgn (rgn, 0, rect.bottom - rect.top);", "+\t\t\t\t\t\t\t\tOS.InvalidateRgn (handle, rgn, true);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.DeleteObject (rgn);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 11060}
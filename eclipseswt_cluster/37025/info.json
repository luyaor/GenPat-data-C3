{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7aecd3ba9ea803444dd7f2ba936ce406", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7d433d4f1007482908ba14dff810042", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 305, "methodNumberAfterChange": 294, "signatureBeforeChange": " public void setStyleRange(StyleRange range)", "signatureAfterChange": " public void setStyleRange(StyleRange range)", "diff": ["- \t// check the range, make sure it falls within the range of the", "- \t// text ", "+ \t// check the range, make sure it falls within the range of the text ", "+\tdefaultLineStyler.setStyleRange(range);", "-\t\tboolean redrawFirstLine = false;", "-\t\tboolean redrawLastLine = false;", "+\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "-\t\tboolean redrawLines = isAreaVisible(firstLine, lastLine);", "-", "-\t\tif (!redrawLines) {", "-\t\t\tdefaultLineStyler.setStyleRange(range);", "-\t\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "-\t\t} else {", "-\t\t\t// the first and last line needs to be redrawn completely if the ", "-\t\t\t// font style is changing from SWT.NORMAL to something else or ", "-\t\t\t// vice versa. fixes 1G7M5WE.", "-\t\t\tint firstLineOffset = content.getOffsetAtLine(firstLine);", "-\t\t\tint lastLineOffset = content.getOffsetAtLine(lastLine);", "-\t\t\tif (isBidi()) {", "-\t\t\t\tif (firstLine != lastLine) {", "-\t\t\t\t\tredrawFirstLine = true;", "-\t\t\t\t}", "-\t\t\t\tredrawLastLine = true;", "-\t\t\t} else {", "-\t\t\t\tredrawFirstLine = isRedrawFirstLine(new StyleRange[] {range}, firstLine, firstLineOffset);", "-\t\t\t\tif (lastLine != firstLine) {", "-\t\t\t\t\tredrawLastLine = isRedrawLastLine(new StyleRange[] {range}, lastLine, lastLineOffset);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tdefaultLineStyler.setStyleRange(range);", "-\t\t\t// reset all lines affected by the style change but let the redraw", "-\t\t\t// recalculate only those that are visible.", "-\t\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "-\t\t\tinternalRedrawRange(range.start, range.length, true);", "-\t\t\tif (redrawFirstLine) {", "-\t\t\t\tredrawLine(firstLine, range.start - firstLineOffset);", "-\t\t\t}", "-\t\t\tif (redrawLastLine) {", "-\t\t\t\tredrawLine(lastLine, 0);", "-\t\t\t}", "+\t\tif (isAreaVisible(firstLine, lastLine)) {", "+\t\t\tint redrawY = firstLine * lineHeight - verticalScrollOffset;", "+\t\t\tint redrawStopY = (lastLine + 1) * lineHeight - verticalScrollOffset;\t\t", "+\t\t\tdraw(0, redrawY, getClientArea().width, redrawStopY - redrawY, true);", "-\t\tdefaultLineStyler.setStyleRange(range);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e70714ac5d38f92ff60437c664df814", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 262, "methodNumberAfterChange": 255, "signatureBeforeChange": " public void replaceStyleRanges(int start, int length, StyleRange[] ranges)", "signatureAfterChange": " public void replaceStyleRanges(int start, int length, StyleRange[] ranges)", "diff": ["-\t", "-\t// if the area is not visible, there is no need to redraw", "-\tboolean redrawLines = isAreaVisible(firstLine, lastLine);", "+\tdefaultLineStyler.replaceStyleRanges(start, length, ranges);", "+\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "-\tif (!redrawLines) {", "-\t\tdefaultLineStyler.replaceStyleRanges(start, length, ranges);", "-\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "-\t} else {", "-\t\tboolean redrawFirstLine = false;", "-\t\tboolean redrawLastLine = false;\t", "-\t\t// the first and last line needs to be redrawn completely if the ", "-\t\t// font style is changing from SWT.NORMAL to something else or ", "-\t\t// vice versa. fixes 1G7M5WE.", "-\t\tint firstLineOffset = content.getOffsetAtLine(firstLine);", "-\t\tif (isBidi()) {", "-\t\t\tredrawFirstLine = true;", "-\t\t\tredrawLastLine = true;", "-\t\t} else {", "-\t\t\tint firstLineEnd = firstLineOffset + content.getLine(firstLine).length();", "-\t\t\tredrawFirstLine = isRedrawFirstLine(ranges, firstLine, firstLineOffset);", "-\t\t\t// check if any bold styles will be cleared", "-\t\t\tStyleRange clearRange = new StyleRange(firstLineOffset, firstLineEnd - firstLineOffset, null, null);", "-\t\t\tredrawFirstLine = redrawFirstLine || isRedrawFirstLine(new StyleRange[] {clearRange}, firstLine, firstLineOffset);", "-\t\t\tif (lastLine != firstLine) {", "-\t\t\t\tint lastLineOffset = content.getOffsetAtLine(lastLine);", "-\t\t\t\tint lastLineEnd = lastLineOffset + content.getLine(lastLine).length();", "-\t\t\t\tredrawLastLine = isRedrawLastLine(ranges, lastLine, lastLineOffset);", "-\t\t\t\t// check if any bold styles will be cleared", "-\t\t\t\tclearRange = new StyleRange(lastLineOffset, lastLineEnd - lastLineOffset, null, null);", "-\t\t\t\tredrawLastLine = redrawLastLine || isRedrawLastLine(new StyleRange[] {clearRange}, lastLine, lastLineOffset);", "-\t\t\t}", "-\t\t}", "-\t\tdefaultLineStyler.replaceStyleRanges(start, length, ranges);", "-\t\t// reset all lines affected by the style change but let the redraw", "-\t\t// recalculate only those that are visible.", "-\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "-\t\tinternalRedrawRange(start, length, true);", "-\t\tif (redrawFirstLine) {", "-\t\t\tredrawLine(firstLine, start - firstLineOffset);", "-\t\t}", "-\t\tif (redrawLastLine) {", "-\t\t\tredrawLine(lastLine, 0);", "-\t\t}", "+\t// if the area is not visible, there is no need to redraw", "+\tif (isAreaVisible(firstLine, lastLine)) {", "+\t\tint redrawY = firstLine * lineHeight - verticalScrollOffset;", "+\t\tint redrawStopY = (lastLine + 1) * lineHeight - verticalScrollOffset;\t\t", "+\t\tdraw(0, redrawY, getClientArea().width, redrawStopY - redrawY, true);"]}], "num": 37025}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11ad69b3e48da3256b3b72edda7eac61", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2392079b649d65bb1f7fa78cfea10bf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "c8c3b0d56ac96eed1deeae3cbebb069fecdd4ef9", "commitAfterChange": "db54bb9c515ce97cb7d05101b9fa91b631d7bee5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public void test_setBackgroundLorg_eclipse_swt_graphics_Color()", "signatureAfterChange": "  public void test_setBackgroundLorg_eclipse_swt_graphics_Color()", "diff": ["-\twarnUnimpl(\"Test test_setBackgroundLorg_eclipse_swt_graphics_Color not written\");", "+\tImage image = new Image(display, 10, 10);", "+\tColor color = new Color(display, 255, 255, 255);", "+", "+\ttry {", "+\t\timage.setBackground(null);", "+\t\timage.dispose();", "+\t\tcolor.dispose();", "+\t\tfail(\"No exception thrown for color == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t\timage.dispose();", "+\t\tcolor.dispose();", "+\t}", "+", "+\timage = new Image(display, 10, 10);", "+\tcolor = new Color(display, 255, 255, 255);", "+\tcolor.dispose();", "+\ttry {", "+\t\timage.setBackground(color);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for disposed color\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\timage.dispose();", "+\t\tcolor = new Color(display, 255, 255, 255);", "+\t\timage.setBackground(color);", "+\t\tcolor.dispose();", "+\t\tfail(\"No exception thrown for disposed image\");", "+\t} catch (SWTException e) {", "+\t}", "+\t", "+\t// this image does not have a transparent pixel by default so setBackground has not effect", "+\timage = new Image(display, 10, 10);", "+\timage.setBackground(display.getSystemColor(SWT.COLOR_GREEN));", "+\tcolor = image.getBackground();", "+\timage.dispose();", "+\tassertNull(\":a:\", color);", "+\t", "+\t// simulate a transparent pixel", "+\tImageData imageData = new ImageData(10, 10, 2, new PaletteData(new RGB[] {new RGB(0, 0, 0), new RGB(255, 255, 255), new RGB(50, 100, 150)}));", "+\timageData.transparentPixel = 0;", "+\timage = new Image(display, imageData);", "+\timage.setBackground(display.getSystemColor(SWT.COLOR_GREEN));", "+\tcolor = image.getBackground();", "+\timage.dispose();", "+\tassertEquals(\":b:\", display.getSystemColor(SWT.COLOR_GREEN), color);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e1f98307961a8256c938d597c3f968f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " void createCaretBitmaps()", "signatureAfterChange": " void createCaretBitmaps()", "diff": ["-\tint gcStyle = isMirrored() ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT;", "-\t", "-\tif (caretPalette == null) {", "-\t\tcaretPalette = new PaletteData(new RGB[] {new RGB (0,0,0), new RGB (255,255,255)});", "-\t}\t", "+\t\tCaret caret = getCaret();", "+\t\tif (caret != null && leftCaretBitmap.equals(caret.getImage())) {", "+\t\t\tgetCaret().setImage(null);", "+\t\t}", "-\tImageData imageData = new ImageData(caretWidth, lineHeight, 1, caretPalette);", "-\tleftCaretBitmap = new Image(display, imageData);", "-\t// mirror the caret gc because when the bitmap is rendered on the screen it will be ", "-\t// mirrored since the GC for the canvas is mirrored", "-\tGC gc = new GC (leftCaretBitmap, gcStyle); ", "+\tleftCaretBitmap = new Image(display, caretWidth, lineHeight);", "+\tGC gc = new GC (leftCaretBitmap); ", "+\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "+\tgc.fillRectangle(0, 0, caretWidth, lineHeight);", "+\t\tCaret caret = getCaret();", "+\t\tif (caret != null && rightCaretBitmap.equals(caret.getImage())) {", "+\t\t\tgetCaret().setImage(null);", "+\t\t}", "-\trightCaretBitmap = new Image(display, imageData);", "-\t// mirror the caret gc because when the bitmap is rendered on the screen it will be ", "-\t// mirrored since the GC for the canvas is mirrored", "-\tgc = new GC (rightCaretBitmap, gcStyle); ", "+\trightCaretBitmap = new Image(display, caretWidth, lineHeight);", "+\tgc = new GC (rightCaretBitmap); ", "+\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "+\tgc.fillRectangle(0, 0, caretWidth, lineHeight);", "-\tgc.dispose();\t", "+\tgc.dispose();"]}], "num": 14050}
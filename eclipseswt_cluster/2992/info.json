{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1428007e35ed19179fdbbe012f74f0dc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b202ae70b55ec20b6cdb83c8dc51d52", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "926491b24e303f901f9b7de362f1d15531946348", "commitAfterChange": "398689fef2d763477b48c67190388b44484bb144", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  void didFinishLoadForFrame(int frame)", "signatureAfterChange": "  void didFinishLoadForFrame(int frame)", "diff": ["-\t\t\t\t\tfinal TitleListener listener = titleListeners[i];", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Note on WebKit.  Running the event loop from a Browser", "-\t\t\t\t\t* delegate callback breaks the WebKit (stop loading or", "-\t\t\t\t\t* crash).  The workaround is to invoke Display.asyncExec()", "-\t\t\t\t\t* so that the Browser does not crash if this is attempted.", "-\t\t\t\t\t*/", "-\t\t\t\t\tdisplay.asyncExec(", "-\t\t\t\t\t\tnew Runnable() {", "-\t\t\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\t\t\tif (!display.isDisposed() && !browser.isDisposed()) {", "-\t\t\t\t\t\t\t\t\tlistener.changed(newEvent);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t);", "+\t\t\t\t\ttitleListeners[i].changed(newEvent);", "+\t\t\t\tif (browser.isDisposed()) return;", "-\t\t}", "-\t\tfinal ProgressEvent progress = new ProgressEvent(browser);", "-\t\tprogress.display = display;", "-\t\tprogress.widget = browser;", "-\t\tprogress.current = MAX_PROGRESS;", "-\t\tprogress.total = MAX_PROGRESS;", "-\t\tfor (int i = 0; i < progressListeners.length; i++) {", "-\t\t\tfinal ProgressListener listener = progressListeners[i];", "-\t\t\t/*", "-\t\t\t* Note on WebKit.  Running the event loop from a Browser", "-\t\t\t* delegate callback breaks the WebKit (stop loading or", "-\t\t\t* crash).  The ProgressBar widget currently touches the", "-\t\t\t* event loop every time the method setSelection is called.  ", "-\t\t\t* The workaround is to invoke Display.asyncExec() so that", "-\t\t\t* the Browser does not crash when the user updates the ", "-\t\t\t* selection of the ProgressBar.", "-\t\t\t*/", "-\t\t\tdisplay.asyncExec(", "-\t\t\t\tnew Runnable() {", "-\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\tif (!display.isDisposed() && !browser.isDisposed()) {", "-\t\t\t\t\t\t\tlistener.completed(progress);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t);", "+", "+\t\tProgressEvent progress = new ProgressEvent(browser);", "+\t\tprogress.display = display;", "+\t\tprogress.widget = browser;", "+\t\tprogress.current = MAX_PROGRESS;", "+\t\tprogress.total = MAX_PROGRESS;", "+\t\tfor (int i = 0; i < progressListeners.length; i++) {", "+\t\t\tprogressListeners[i].completed(progress);", "+\t\t}", "+\t\tif (browser.isDisposed()) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e946954f00e46de41d5701202c0dd84", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "398689fef2d763477b48c67190388b44484bb144", "commitAfterChange": "8870de0d40c37d598f90dd32fe1912ceac4b8f40", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  void webView_didFinishLoadForFrame(int sender, int frameID)", "signatureAfterChange": "  void webView_didFinishLoadForFrame(int sender, int frameID)", "diff": ["-\t\tfinal Display display = browser.getDisplay();", "+\t\tDisplay display = browser.getDisplay();", "-\t\t\t\tfinal TitleEvent newEvent = new TitleEvent(browser);", "+\t\t\t\tTitleEvent newEvent = new TitleEvent(browser);", "-\t\t\t\t\tfinal TitleListener listener = titleListeners[i];", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Note on WebKit.  Running the event loop from a Browser", "-\t\t\t\t\t* delegate callback breaks the WebKit (stop loading or", "-\t\t\t\t\t* crash).  The workaround is to invoke Display.asyncExec()", "-\t\t\t\t\t* so that the Browser does not crash if this is attempted.", "-\t\t\t\t\t*/", "-\t\t\t\t\tdisplay.asyncExec(", "-\t\t\t\t\t\tnew Runnable() {", "-\t\t\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\t\t\tif (!display.isDisposed() && !browser.isDisposed()) {", "-\t\t\t\t\t\t\t\t\tlistener.changed(newEvent);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t);", "+\t\t\t\t\ttitleListeners[i].changed(newEvent);", "+\t\t\t\tif (browser.isDisposed()) return;", "-\t\tfinal ProgressEvent progress = new ProgressEvent(browser);", "+\t\tProgressEvent progress = new ProgressEvent(browser);", "-\t\t\tfinal ProgressListener listener = progressListeners[i];", "-\t\t\t/*", "-\t\t\t* Note on WebKit.  Running the event loop from a Browser", "-\t\t\t* delegate callback breaks the WebKit (stop loading or", "-\t\t\t* crash).  The ProgressBar widget currently touches the", "-\t\t\t* event loop every time the method setSelection is called.  ", "-\t\t\t* The workaround is to invoke Display.asyncExec() so that", "-\t\t\t* the Browser does not crash when the user updates the ", "-\t\t\t* selection of the ProgressBar.", "-\t\t\t*/", "-\t\t\tdisplay.asyncExec(", "-\t\t\t\tnew Runnable() {", "-\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\tif (!display.isDisposed() && !browser.isDisposed()) {", "-\t\t\t\t\t\t\tlistener.completed(progress);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t);", "+\t\t\tprogressListeners[i].completed(progress);", "+\t\tif (browser.isDisposed()) return;"]}], "num": 2992}
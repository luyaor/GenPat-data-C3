{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87ad4a0cc30ce9d92733c5f9bb3c956c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebd41e204067338903184def3ece8300", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " void hookEvents ()", "signatureAfterChange": "  void releaseWidget ()", "diff": ["-}", "-void hookEvents () {", "-\tsuper.hookEvents ();", "-\tDisplay display= getDisplay();\t\t", "-\tOS.SetControlData(handle, OS.kControlEntireControl, OS.kControlUserPaneDrawProcTag, display.fUserPaneDrawProc);", "-\tOS.SetControlData(handle, OS.kControlEntireControl, OS.kControlUserPaneHitTestProcTag, display.fUserPaneHitTestProc);", "+", "+void releaseWidget () {", "+\tsuper.releaseWidget ();", "+\tif (sizeCursor != null) sizeCursor.dispose ();", "+\tsizeCursor = null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c171b40aa27e8f1e7e46711aa80a3ab9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "ff2fb9f01a196c14560d822c32e5adc6eee40368", "commitAfterChange": "e15381d72c440181a26a8b1a5c9d9efb3d5969f9", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": " void hookEvents ()", "signatureAfterChange": " void hookEvents ()", "diff": ["-\tDisplay display= getDisplay();\t\t", "-\tif (fTX != 0) {", "-\t\tOS.SetControlData(handle, OS.kControlEntireControl, OS.kControlUserPaneDrawProcTag, display.fUserPaneDrawProc);", "-\t\tOS.SetControlData(handle, OS.kControlEntireControl, OS.kControlUserPaneHitTestProcTag, display.fUserPaneHitTestProc);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc703235f26b7c0af2cee20291bf2ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "eb4c77681838ea183c756eed2733c0acab28cd20", "commitAfterChange": "a3635cd9e0dd7879bc3b3bd73040e191dbd7da50", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\r public void setVisible (boolean visible)", "signatureAfterChange": "\r public void setVisible (boolean visible)", "diff": ["-\t/*\r", "-\t* Feature in Windows.  Because TrackPopupMenu() runs a\r", "-\t* modal menu loop and does not return until an item is\r", "-\t* selected or the user cancels the menu and SWT.Selection\r", "-\t* events are posted, they won't run until execution returns\r", "-\t* to the event loop.  While this is not strictly incorrect,\r", "-\t* it means that code that relies on the modal menu loop\r", "-\t* to decide when to destroy the menu will destroy the menu\r", "-\t* before the SWT.Selection event is delivered.  The fix is\r", "-\t* to run the deferred events after the menu is hidden. \r", "-\t*/\r", "-\tMSG msg = new MSG ();\r", "-\tif (OS.PeekMessage (msg, hwndParent, OS.WM_COMMAND, OS.WM_COMMAND, OS.PM_REMOVE)) {\r", "-\t\tOS.DispatchMessage (msg);\r", "-\t}\r", "-\tDisplay display = getDisplay ();\r", "-\tdisplay.runDeferredEvents ();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0616b4a7463b1b66052d7409b4d5affa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "c2ca70ca89de07d0ce2b2e26b82f7a84f0d554a2", "commitAfterChange": "426dc59c5105e19be1b59762869d99c45bdc43ac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r void createHandle ()", "signatureAfterChange": "\r \r void createHandle ()", "diff": ["-\tint hwndToolTip = OS.SendMessage (handle, OS.TB_GETTOOLTIPS, 0, 0);\t\r", "-\t* This line is intentionally commented.  The tool\r", "-\t* bar currently sets this value to 300 so it is\r", "-\t* not necessary to set TTM_SETMAXTIPWIDTH.\r", "+\t* These lines are intentionally commented.  The tool\r", "+\t* bar currently sets this value to 300 so it is not\r", "+\t* necessary to set TTM_SETMAXTIPWIDTH.\r", "+//\tint hwndToolTip = OS.SendMessage (handle, OS.TB_GETTOOLTIPS, 0, 0);\r", "-\r", "-\t/*\r", "-\t* Feature in Windows.  When the tool tip control is\r", "-\t* created, the parent of the tool tip is the shell.\r", "-\t* If SetParent () is used to reparent the tool bar\r", "-\t* into a new shell, the tool tip is not reparented\r", "-\t* and pops up underneath the new shell.  The fix is\r", "-\t* to make sure the tool tip is a topmost window.\r", "-\t*/\r", "-\t/*\r", "-\t* Bug in Windows 98 and NT.  Setting the tool tip to be the\r", "-\t* top most window using HWND_TOPMOST can result in a parent\r", "-\t* dialog shell being moved behind its parent if the dialog\r", "-\t* has a sibling that is currently on top.  The fix is to lock\r", "-\t* the z-order of the active window.\r", "-\t*/\r", "-\tDisplay display = getDisplay ();\r", "-\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOSIZE;\r", "-\tdisplay.lockActiveWindow = true;\r", "-\tOS.SetWindowPos (hwndToolTip, OS.HWND_TOPMOST, 0, 0, 0, 0, flags);\r", "-\tdisplay.lockActiveWindow = false;\r"]}], "num": 34871}
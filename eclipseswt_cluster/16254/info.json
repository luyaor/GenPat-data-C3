{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a82e822f21128d09bb140ffa134289c3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f092a932d2f77f1b5f04a62826a7e16c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "9632ed39e080a2f80328d76fafecf59d673c6888", "commitAfterChange": "e162ce64150df9ea3d8c13b106ed9cd20c953447", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath); //$NON-NLS-1$", "+\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "-\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "-\t\trc = serviceManager.GetServiceByContractID (buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tif (result[0] == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t}", "-", "-\t\tnsIDirectoryService directoryService = new nsIDirectoryService (result[0]);", "-\t\tresult[0] = 0;", "-\t\trc = directoryService.QueryInterface (nsIProperties.NS_IPROPERTIES_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tif (result[0] == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t}", "-\t\tdirectoryService.Release ();", "-", "-\t\tnsIProperties properties = new nsIProperties (result[0]);", "-\t\tresult[0] = 0;", "-\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "-\t\trc = properties.Get (buffer, nsIFile.NS_IFILE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tif (result[0] == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t}", "-\t\tproperties.Release ();", "-", "-\t\tnsIFile profileDir = new nsIFile (result[0]);", "-\t\tresult[0] = 0;", "-\t\tint /*long*/ path = XPCOM.nsEmbedCString_new ();", "-\t\trc = profileDir.GetNativePath (path);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tint length = XPCOM.nsEmbedCString_Length (path);", "-\t\tint /*long*/ ptr = XPCOM.nsEmbedCString_get (path);", "-\t\tbuffer = new byte [length];", "-\t\tXPCOM.memmove (buffer, ptr, length);", "-\t\tString profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "-\t\tLocationProvider.setProfilePath (profilePath);", "-\t\tXPCOM.nsEmbedCString_delete (path);", "-\t\tprofileDir.Release ();", "-", "-\t\t/* notify observers of a new profile directory being used */", "-\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tif (result[0] == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t}", "-", "-\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\tresult[0] = 0;", "-\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "-\t\tlength = STARTUP.length ();", "-\t\tchar[] chars = new char [length + 1];", "-\t\tSTARTUP.getChars (0, length, chars, 0);", "-\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "-\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tobserverService.Release ();", "-", "-\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "-\t\t\tpublic void handleEvent (Event event) {", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\tresult[0] = 0;\t\t", "-\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tserviceManager.Release ();", "-", "-\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "-\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "-\t\t\t\tchar[] chars = new char [length + 1];", "-\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "-\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tobserverService.Release ();", "+\t\tif (LocationProvider != null) {", "+\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "+\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "-\t\t});", "+\t\t\tif (result[0] == 0) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t\t}", "+", "+\t\t\tnsIDirectoryService directoryService = new nsIDirectoryService (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = directoryService.QueryInterface (nsIProperties.NS_IPROPERTIES_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tif (result[0] == 0) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t\t}", "+\t\t\tdirectoryService.Release ();", "+", "+\t\t\tnsIProperties properties = new nsIProperties (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "+\t\t\trc = properties.Get (buffer, nsIFile.NS_IFILE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tif (result[0] == 0) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t\t}", "+\t\t\tproperties.Release ();", "+", "+\t\t\tnsIFile profileDir = new nsIFile (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tint /*long*/ path = XPCOM.nsEmbedCString_new ();", "+\t\t\trc = profileDir.GetNativePath (path);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tint length = XPCOM.nsEmbedCString_Length (path);", "+\t\t\tint /*long*/ ptr = XPCOM.nsEmbedCString_get (path);", "+\t\t\tbuffer = new byte [length];", "+\t\t\tXPCOM.memmove (buffer, ptr, length);", "+\t\t\tString profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "+\t\t\tLocationProvider.setProfilePath (profilePath);", "+\t\t\tXPCOM.nsEmbedCString_delete (path);", "+\t\t\tprofileDir.Release ();", "+", "+\t\t\t/* notify observers of a new profile directory being used */", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tif (result[0] == 0) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t\t}", "+", "+\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "+\t\t\tlength = STARTUP.length ();", "+\t\t\tchar[] chars = new char [length + 1];", "+\t\t\tSTARTUP.getChars (0, length, chars, 0);", "+\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "+\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tobserverService.Release ();", "+", "+\t\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "+\t\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\t\t\tresult[0] = 0;\t\t", "+\t\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\t\tserviceManager.Release ();", "+", "+\t\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "+\t\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "+\t\t\t\t\tchar[] chars = new char [length + 1];", "+\t\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "+\t\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tobserverService.Release ();", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "-\t\tbuffer = new byte[1];", "+\t\tbyte[] buffer = new byte[1];", "-\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tint length = XPCOM.strlen_PRUnichar (result[0]);", "-\t\t\tlength = newLocales.length ();", "+\t\t\tint length = newLocales.length ();", "-\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tint length = XPCOM.strlen_PRUnichar (result[0]);", "-\t\t\tlength = newCharset.length ();", "+\t\t\tint length = newCharset.length ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b118d4131218b1ea91cec2de6ff42d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "5d484c6476bc4892c9825b0c805179fe47e751d4", "commitAfterChange": "2efd019c0428e46dfacf8317bc1b4ae9f271e166", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void antialias (int[] shape, RGB lineRGB, RGB innerRGB, RGB outerRGB, GC gc)", "signatureAfterChange": " void antialias (int[] shape, RGB lineRGB, RGB innerRGB, RGB outerRGB, GC gc)", "diff": ["-\tint[] outer = new int[shape.length];", "-\tint index = 0;", "-\tboolean left = true;", "-\tint oldY = onBottom ? 0 : getSize().y;", "-\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\tif (left && (index + 3 < shape.length)) {", "-\t\t\tleft = onBottom ? oldY <= shape[index+3] : oldY >= shape[index+3];", "-\t\t\toldY = shape[index+1];", "+\tif (outerRGB != null) {", "+\t\tint index = 0;", "+\t\tboolean left = true;", "+\t\tint oldY = onBottom ? 0 : getSize().y;", "+\t\tint[] outer = new int[shape.length];", "+\t\tfor (int i = 0; i < shape.length/2; i++) {", "+\t\t\tif (left && (index + 3 < shape.length)) {", "+\t\t\t\tleft = onBottom ? oldY <= shape[index+3] : oldY >= shape[index+3];", "+\t\t\t\toldY = shape[index+1];", "+\t\t\t}", "+\t\t\touter[index] = shape[index++] + (left ? -1 : +1);", "+\t\t\touter[index] = shape[index++];", "-\t\touter[index] = shape[index++] + (left ? -1 : +1);", "-\t\touter[index] = shape[index++];", "+\t\tRGB from = lineRGB;", "+\t\tRGB to = outerRGB;", "+\t\tint red = from.red + 4*(to.red - from.red)/5;", "+\t\tint green = from.green + 4*(to.green - from.green)/5;", "+\t\tint blue = from.blue + 4*(to.blue - from.blue)/5;", "+\t\tColor color = new Color(getDisplay(), red, green, blue);", "+\t\tgc.setForeground(color);", "+\t\tgc.drawPolyline(outer);", "+\t\tcolor.dispose();", "-\tRGB from = lineRGB;", "-\tRGB to = outerRGB;", "-\tint red = from.red + 4*(to.red - from.red)/5;", "-\tint green = from.green + 4*(to.green - from.green)/5;", "-\tint blue = from.blue + 4*(to.blue - from.blue)/5;", "-\tColor color = new Color(getDisplay(), red, green, blue);", "-\tgc.setForeground(color);", "-\tgc.drawPolyline(outer);", "-\tcolor.dispose();", "-\tint[] inner = new int[shape.length];", "-\tindex = 0;", "-\tleft = true;", "-\toldY = onBottom ? 0 : getSize().y;", "-\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\tif (left && (index + 3 < shape.length)) {", "-\t\t\tleft = onBottom ? oldY <= shape[index+3] : oldY >= shape[index+3];", "-\t\t\toldY = shape[index+1];", "+\tif (innerRGB != null) {", "+\t\tint[] inner = new int[shape.length];", "+\t\tint index = 0;", "+\t\tboolean left = true;", "+\t\tint oldY = onBottom ? 0 : getSize().y;", "+\t\tfor (int i = 0; i < shape.length/2; i++) {", "+\t\t\tif (left && (index + 3 < shape.length)) {", "+\t\t\t\tleft = onBottom ? oldY <= shape[index+3] : oldY >= shape[index+3];", "+\t\t\t\toldY = shape[index+1];", "+\t\t\t}", "+\t\t\tinner[index] = shape[index++] + (left ? +1 : -1);", "+\t\t\tinner[index] = shape[index++];", "-\t\tinner[index] = shape[index++] + (left ? +1 : -1);", "-\t\tinner[index] = shape[index++];", "+\t\tRGB from = lineRGB;", "+\t\tRGB to = innerRGB;", "+\t\tint red = from.red + 4*(to.red - from.red)/5;", "+\t\tint green = from.green + 4*(to.green - from.green)/5;", "+\t\tint blue = from.blue + 4*(to.blue - from.blue)/5;", "+\t\tColor color = new Color(getDisplay(), red, green, blue);", "+\t\tgc.setForeground(color);", "+\t\tgc.drawPolyline(inner);", "+\t\tcolor.dispose();", "-\tfrom = lineRGB;", "-\tto = innerRGB;", "-\tred = from.red + 4*(to.red - from.red)/5;", "-\tgreen = from.green + 4*(to.green - from.green)/5;", "-\tblue = from.blue + 4*(to.blue - from.blue)/5;", "-\tcolor = new Color(getDisplay(), red, green, blue);", "-\tgc.setForeground(color);", "-\tgc.drawPolyline(inner);", "-\tcolor.dispose();"]}], "num": 16254}
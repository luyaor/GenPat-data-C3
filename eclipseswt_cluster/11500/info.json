{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a810f522d1c6692176767c7d004cef4d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f4e4107e1540f16391848c3d5b6f70", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "30f672395169133411dec6a6b095d380c65985b4", "commitAfterChange": "ca2b791c06a9d675e378600c962ec2edb94eb7eb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 24, "signatureBeforeChange": "  int trayItemProc (int target, int userData, int selector, int arg0)", "signatureAfterChange": "  int trayItemProc (int target, int userData, int selector, int arg0)", "diff": ["-\t\tcase 0: {", "-\t\t\tint mask = Cocoa.objc_msgSend (arg0, Cocoa.S_modifierFlags) & Cocoa.NSDeviceIndependentModifierFlagsMask;", "-\t\t\tif (mask == Cocoa.NSControlKeyMask) {", "-\t\t\t\tshowMenu ();", "-\t\t\t} else {", "-\t\t\t\thighlight = true;", "-\t\t\t\tCocoa.objc_msgSend (view, Cocoa.S_setNeedsDisplay, 1);", "-\t\t\t\tint clickCount = Cocoa.objc_msgSend (arg0, Cocoa.S_clickCount);", "-\t\t\t\tsendSelectionEvent (clickCount == 2 ? SWT.DefaultSelection : SWT.Selection);", "-\t\t\t}", "+\t\tcase 0:   //mouseDown", "+\t\tcase 2: { // rightMouseDown", "+\t\t\thighlight = true;", "+\t\t\tCocoa.objc_msgSend (view, Cocoa.S_setNeedsDisplay, 1);", "+\t\t\tif (shouldShowMenu(arg0)) displayMenu();", "-\t\tcase 1: {", "+\t\tcase 1:   // mouseUp", "+\t\tcase 4: { // rightMouseUp", "+\t\t\tif (highlight) {", "+\t\t\t\tif ((int)/*64*/Cocoa.objc_msgSend(arg0, Cocoa.S_type) == Cocoa.NSLeftMouseUp) {", "+\t\t\t\t\tsendSelectionEvent((int)/*64*/Cocoa.objc_msgSend(arg0, Cocoa.S_clickCount) == 2 ? SWT.DefaultSelection : SWT.Selection);", "+\t\t\t\t}", "+\t\t\t}", "-\t\tcase 2: {", "-\t\t\tshowMenu ();", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase 3: {", "+\t\tcase 3: { // drawRect", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase 5:   // mouseDragged", "+\t\tcase 6: { // rightMouseDragged", "+\t\t\tNSRect frame = new NSRect();", "+\t\t\tCocoa.objc_msgSend_stret(frame, view, Cocoa.S_frame);", "+\t\t\tNSPoint pt = new NSPoint();", "+\t\t\tCocoa.objc_msgSend_stret(pt, arg0, Cocoa.S_locationInWindow);", "+\t\t\thighlight = Cocoa.NSPointInRect(pt, frame);", "+\t\t\tCocoa.objc_msgSend (view, Cocoa.S_setNeedsDisplay, 1);", "+\t\t\tif (shouldShowMenu(arg0)) displayMenu();", "+\t\t\tbreak;\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bdab0838ee95473184611671fa48a2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java", "commitBeforeChange": "35f24cd03add9337e8b68bfeb7beed6f47dde1d7", "commitAfterChange": "0a84e48780b862c804e190ba06d17878143631e6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid createColorGroup ()", "signatureAfterChange": " \tvoid createColorGroup ()", "diff": ["-\t\tShell shell = itemBackgroundButton.getShell ();", "-\t\tfinal ColorDialog backgroundDialog = new ColorDialog (shell);", "+\t\tShell shell = colorGroup.getShell ();", "+\t\tfinal ColorDialog backgroundDialog = new ColorDialog (shell);", "-\t\tfinal Image itemBackgroundImage = new Image(display, imageSize, imageSize);", "-\t\tfinal Image itemForegroundImage = new Image(display, imageSize, imageSize);", "+\t\titemForegroundImage = new Image(display, imageSize, imageSize);", "+\t\titemBackgroundImage = new Image(display, imageSize, imageSize);", "-\t\titemBackgroundButton.setImage(itemBackgroundImage);", "-\t\titemBackgroundButton.addSelectionListener(new SelectionAdapter() {", "-\t\t\tpublic void widgetSelected(SelectionEvent event) {", "-\t\t\t\tRGB rgb = backgroundDialog.open();", "-\t\t\t\tif (rgb == null) return;", "-\t\t\t\tColor oldColor = itemBackgroundColor;", "-\t\t\t\titemBackgroundColor = new Color (itemBackgroundButton.getDisplay(), rgb);", "-\t\t\t\tsetItemsBackground ();", "-\t\t\t\tif (oldColor != null) oldColor.dispose ();", "-\t\t\t}", "-\t\t});", "-\t\titemForegroundButton.setImage(itemForegroundImage);", "+\t\titemForegroundButton.setImage(itemForegroundImage); // sets the size of the button", "+\t\t\t\tColor oldColor = itemForegroundColor;", "+\t\t\t\tif (oldColor == null) oldColor = table1.getItem (0).getForeground ();", "+\t\t\t\tforegroundDialog.setRGB(oldColor.getRGB()); // seed dialog with current color", "-\t\t\t\tColor oldColor = itemForegroundColor;", "-\t\t\t\titemForegroundColor = new Color (itemForegroundButton.getDisplay(), rgb);", "-\t\t\t\tsetItemsForeground ();", "+\t\t\t\toldColor = itemForegroundColor; // save old foreground color to dispose when done", "+\t\t\t\titemForegroundColor = new Color (event.display, rgb);", "+\t\t\t\tsetItemForeground ();", "-\t\titemBackgroundButton.addDisposeListener(new DisposeListener() {", "+\t\titemBackgroundButton.setImage(itemBackgroundImage); // sets the size of the button", "+\t\titemBackgroundButton.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\tColor oldColor = itemBackgroundColor;", "+\t\t\t\tif (oldColor == null) oldColor = table1.getItem (0).getBackground ();", "+\t\t\t\tbackgroundDialog.setRGB(oldColor.getRGB()); // seed dialog with current color", "+\t\t\t\tRGB rgb = backgroundDialog.open();", "+\t\t\t\tif (rgb == null) return;", "+\t\t\t\toldColor = itemBackgroundColor; // save old background color to dispose when done", "+\t\t\t\titemBackgroundColor = new Color (event.display, rgb);", "+\t\t\t\tsetItemBackground ();", "+\t\t\t\tif (oldColor != null) oldColor.dispose ();", "+\t\t\t}", "+\t\t});", "+\t\tshell.addDisposeListener(new DisposeListener() {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af017acfd58791ed1884adb2397d2f71", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "0eca40a26667c3712617b5dd23e67af76bcbab4d", "commitAfterChange": "c345d69dc06c2a69d5f698a12d1c7890b32841ad", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void calculate(int startLine, int lineCount)", "signatureAfterChange": " \tpublic void calculate(int startLine, int lineCount)", "diff": ["-\t\tint caretWidth = parent.getCaretWidth();", "+\t\tint hTrim = parent.leftMargin + parent.rightMargin + parent.getCaretWidth();", "+\t\tStyledTextRenderer2 renderer = parent.renderer;", "+\t\tStyledTextContent content = parent.content;", "+\t\tTextLayout layout;", "+\t\tRectangle rect;", "-\t\t\tif (lineWidth[i] == -1) {", "-\t\t\t\tString line = parent.content.getLine(i);", "-\t\t\t\tint lineOffset = parent.content.getOffsetAtLine(i);", "-\t\t\t\tlineWidth[i] = contentWidth(line, lineOffset) + caretWidth;", "+\t\t\tif (lineWidth[i] == -1 || lineHeight[i] == -1) {", "+\t\t\t\tString line = content.getLine(i);", "+\t\t\t\tint lineOffset = content.getOffsetAtLine(i);", "+\t\t\t\tlayout = renderer.getTextLayout(line, lineOffset);", "+\t\t\t\trect = layout.getBounds();", "+\t\t\t\tlineWidth[i] = rect.width + hTrim;", "+\t\t\t\tlineHeight[i] = rect.height;", "+\t\t\t\trenderer.disposeTextLayout(layout);"]}], "num": 11500}
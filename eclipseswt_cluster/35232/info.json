{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b74bf38c66e7cf121f5076e63430cf02", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89423850a586b6cc96202cae95273ac6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "222c99bbebba9ab406a0910e7665c9a35629b288", "commitAfterChange": "a44223adfcd4e06bb8c8891ca5fa698e5d0b0ad8", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void setFont (Font font)", "signatureAfterChange": " public void setFont (Font font)", "diff": ["-//\tint hFont = -1;", "-//\tif (font != null) {", "-//\t\tparent.setCustomDraw (true);", "-//\t\thFont = font.handle;", "-//\t}", "-//\tif (this.font == hFont) return;", "-//\tthis.font = hFont;", "+\tif (font != null) {", "+\t\tint family = OS.Typeface_FontFamily (font.handle);", "+\t\tOS.Control_FontFamily (handle, family);", "+\t\tOS.GCHandle_Free (family);", "+\t\tint stretch = OS.Typeface_Stretch (font.handle);", "+\t\tOS.Control_FontStretch (handle, stretch);", "+\t\tOS.GCHandle_Free (stretch);", "+\t\tint style = OS.Typeface_Style (font.handle);", "+\t\tOS.Control_FontStyle (handle, style);", "+\t\tOS.GCHandle_Free (style);", "+\t\tint weight = OS.Typeface_Weight (font.handle);", "+\t\tOS.Control_FontWeight (handle, weight);", "+\t\tOS.GCHandle_Free (weight);", "+\t\tOS.Control_FontSize (handle, font.size);", "+\t} else {", "+\t\tint property = OS.Control_FontFamilyProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t\tproperty = OS. Control_FontStyleProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t\tproperty = OS.Control_FontStretchProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t\tproperty = OS.Control_FontWeightProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t\tproperty = OS.Control_FontSizeProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t}", "+\tthis.font = font;", "-//\t/*", "-//\t* Bug in Windows.  Despite the fact that every item in the", "-//\t* table always has LPSTR_TEXTCALLBACK, Windows caches the", "-//\t* bounds for the selected items.  This means that ", "-//\t* when you change the string to be something else, Windows", "-//\t* correctly asks you for the new string but when the item", "-//\t* is selected, the selection draws using the bounds of the", "-//\t* previous item.  The fix is to reset LPSTR_TEXTCALLBACK", "-//\t* even though it has not changed, causing Windows to flush", "-//\t* cached bounds.", "-//\t*/", "-//\tif ((parent.style & SWT.VIRTUAL) == 0 && cached) {", "-//\t\tint itemIndex = parent.indexOf (this);", "-//\t\tif (itemIndex != -1) {", "-//\t\t\tint hwnd = parent.handle;", "-//\t\t\tLVITEM lvItem = new LVITEM ();", "-//\t\t\tlvItem.mask = OS.LVIF_TEXT;", "-//\t\t\tlvItem.iItem = itemIndex;", "-//\t\t\tlvItem.pszText = OS.LPSTR_TEXTCALLBACK;", "-//\t\t\tOS.SendMessage (hwnd, OS.LVM_SETITEM, 0, lvItem);", "-//\t\t\tcached = false;", "-//\t\t}", "-//\t}", "-//\tparent.setScrollWidth (this, false);", "-//\tredraw ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a376852afe951bd1721235cb78248e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "222c99bbebba9ab406a0910e7665c9a35629b288", "commitAfterChange": "a44223adfcd4e06bb8c8891ca5fa698e5d0b0ad8", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 52, "signatureBeforeChange": " public void setFont (Font font)", "signatureAfterChange": " public void setFont (Font font)", "diff": ["-\t//TODO", "+\tif (font != null) {", "+\t\tint family = OS.Typeface_FontFamily (font.handle);", "+\t\tOS.Control_FontFamily (handle, family);", "+\t\tOS.GCHandle_Free (family);", "+\t\tint stretch = OS.Typeface_Stretch (font.handle);", "+\t\tOS.Control_FontStretch (handle, stretch);", "+\t\tOS.GCHandle_Free (stretch);", "+\t\tint style = OS.Typeface_Style (font.handle);", "+\t\tOS.Control_FontStyle (handle, style);", "+\t\tOS.GCHandle_Free (style);", "+\t\tint weight = OS.Typeface_Weight (font.handle);", "+\t\tOS.Control_FontWeight (handle, weight);", "+\t\tOS.GCHandle_Free (weight);", "+\t\tOS.Control_FontSize (handle, font.size);", "+\t} else {", "+\t\tint property = OS.Control_FontFamilyProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t\tproperty = OS. Control_FontStyleProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t\tproperty = OS.Control_FontStretchProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t\tproperty = OS.Control_FontWeightProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t\tproperty = OS.Control_FontSizeProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t}", "+\tthis.font = font;"]}], "num": 35232}
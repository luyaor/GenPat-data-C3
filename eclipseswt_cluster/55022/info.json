{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f04a64ed871682fbb5fd5fe40b6e396", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "163401dc7041971a7115a20eca37cef3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \tstatic int atkAction_get_keybinding (int atkObject, int index)", "signatureAfterChange": " \t \tstatic int atkAction_get_keybinding (int atkObject, int index)", "diff": ["+\t", "-\t\tif (object == null) return 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_ACTION_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (object.handle));", "-\t\t\tAtkActionIface actionIface = new AtkActionIface ();", "-\t\t\tATK.memmove (actionIface, superType);", "-\t\t\tif (actionIface.get_keybinding != 0) {", "-\t\t\t\tparentResult = ATK.call (actionIface.get_keybinding, object.handle, index);", "+\t\tAtkActionIface iface = getActionIface (atkObject);", "+\t\tif (iface != null && iface.get_keybinding != 0) {", "+\t\t\tparentResult = ATK.call (iface.get_keybinding, atkObject, index);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleActionListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleActionEvent event = new AccessibleActionEvent(accessible);", "+\t\t\t\tevent.index = (int)/*64*/index;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getKeyBinding(event);", "+\t\t\t\t}", "+\t\t\t\tif (event.result != null) {", "+\t\t\t\t\tif (keybindingPtr != -1) OS.g_free (keybindingPtr);", "+\t\t\t\t\treturn keybindingPtr = getStringPtr (event.result); ", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlisteners = accessible.accessibleListeners;", "+\t\t\tlength = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleEvent event = new AccessibleEvent (accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tif (parentResult != 0) event.result = getString (parentResult);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleListener listener = (AccessibleListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getKeyboardShortcut (event);\t\t\t\t", "+\t\t\t\t} ", "+\t\t\t\tif (event.result != null) {", "+\t\t\t\t\tif (keybindingPtr != -1) OS.g_free (keybindingPtr);", "+\t\t\t\t\treturn keybindingPtr = getStringPtr (event.result); ", "+\t\t\t\t}", "-\t\tAccessibleListener[] listeners = object.getAccessibleListeners ();", "-\t\tif (listeners.length == 0) return parentResult;", "-", "-\t\tAccessibleEvent event = new AccessibleEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tif (parentResult != 0) {", "-\t\t\tint length = OS.strlen (parentResult);", "-\t\t\tbyte [] buffer = new byte [length];", "-\t\t\tOS.memmove (buffer, parentResult, length);", "-\t\t\tevent.result = new String (Converter.mbcsToWcs (null, buffer));", "-\t\t}", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getKeyboardShortcut (event);\t", "-\t\t} ", "-\t\tif (event.result == null) return parentResult;", "-\t\tif (keybindingPtr != -1) OS.g_free (keybindingPtr);", "-\t\tbyte[] name = Converter.wcsToMbcs (null, event.result, true);", "-\t\tkeybindingPtr = OS.g_malloc (name.length);", "-\t\tOS.memmove (keybindingPtr, name, name.length);", "-\t\treturn keybindingPtr; \t", "+\t\treturn parentResult;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78705d9659f7d6b93bfd383c374a6314", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tstatic int atkAction_get_name (int atkObject, int index)", "signatureAfterChange": "  \tstatic int atkAction_get_name (int atkObject, int index)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_ACTION_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (object.handle));", "-\t\t\tAtkActionIface actionIface = new AtkActionIface ();", "-\t\t\tATK.memmove (actionIface, superType);", "-\t\t\tif (actionIface.get_name != 0) {", "-\t\t\t\tparentResult = ATK.call (actionIface.get_name, object.handle, index);", "+\t\tAtkActionIface iface = getActionIface (atkObject);", "+\t\tif (iface != null && iface.get_name != 0) {", "+\t\t\tparentResult = ATK.call (iface.get_name, atkObject, index);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleActionListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleActionEvent event = new AccessibleActionEvent(accessible);", "+\t\t\t\tevent.index = (int)/*64*/index;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getName(event);", "+\t\t\t\t}", "+\t\t\t\tif (event.result != null) {", "+\t\t\t\t\tif (actionNamePtr != -1) OS.g_free (actionNamePtr);", "+\t\t\t\t\treturn actionNamePtr = getStringPtr (event.result);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (index == 0) {", "+\t\t\t\tlisteners = accessible.accessibleControlListeners;", "+\t\t\t\tlength = listeners.size();", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (accessible);", "+\t\t\t\t\tevent.childID = object.id;", "+\t\t\t\t\tif (parentResult != 0) event.result = getString (parentResult);", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) listeners.elementAt(i);", "+\t\t\t\t\t\tlistener.getDefaultAction (event);\t\t\t\t", "+\t\t\t\t\t} ", "+\t\t\t\t\tif (event.result != null) {", "+\t\t\t\t\t\tif (actionNamePtr != -1) OS.g_free (actionNamePtr);", "+\t\t\t\t\t\treturn actionNamePtr = getStringPtr (event.result);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\tAccessibleControlListener[] listeners = object.getControlListeners ();", "-\t\tif (listeners.length == 0) return parentResult;", "-", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tif (parentResult != 0) {", "-\t\t\tint length = OS.strlen (parentResult);", "-\t\t\tbyte [] buffer = new byte [length];", "-\t\t\tOS.memmove (buffer, parentResult, length);", "-\t\t\tevent.result = new String (Converter.mbcsToWcs (null, buffer));", "+\t\treturn parentResult;", "+\t}", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getDefaultAction (event);\t\t\t\t", "-\t\t} ", "-\t\tif (event.result == null) return parentResult;", "-\t\tif (actionNamePtr != -1) OS.g_free (actionNamePtr);", "-\t\tbyte[] name = Converter.wcsToMbcs (null, event.result, true);", "-\t\tactionNamePtr = OS.g_malloc (name.length);", "-\t\tOS.memmove (actionNamePtr, name, name.length);", "-\t\treturn actionNamePtr;", "-\t}\t"]}], "num": 55022}
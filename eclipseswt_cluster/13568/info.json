{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b21d028fd9f4d410d03ae96a475aac8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230ddc242527cfad533b71cd5ffa626a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "0eca40a26667c3712617b5dd23e67af76bcbab4d", "commitAfterChange": "c345d69dc06c2a69d5f698a12d1c7890b32841ad", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 94, "signatureBeforeChange": " void doPageDown(boolean select, int lines)", "signatureAfterChange": " void doPageDown(boolean select, int height)", "diff": ["-void doPageDown(boolean select, int lines) {", "+void doPageDown(boolean select, int height) {", "+\tPoint point = getCaret().getLocation();", "-\tint oldColumnX = columnX;", "-\tint oldHScrollOffset = horizontalScrollOffset;", "-\tint caretLine = getCaretLine();", "-\tif (caretLine < lineCount - 1) {", "-\t\tint verticalMaximum = lineCount * getVerticalIncrement();", "-\t\tint pageSize = getClientArea().height;", "-\t\tint scrollLines = Math.min(lineCount - caretLine - 1, lines);", "-\t\t", "-\t\t// ensure that scrollLines never gets negative and at leat one ", "-\t\t// line is scrolled. fixes bug 5602.", "-\t\tscrollLines = Math.max(1, scrollLines);", "-\t\tcaretLine += scrollLines;", "-\t\tcaretOffset = getOffsetAtMouseLocation(columnX, caretLine); ", "-\t\tif (select) {", "-\t\t\tdoSelection(ST.COLUMN_NEXT);", "-\t\t}", "-\t\t// scroll one page down or to the bottom", "-\t\tint scrollOffset = verticalScrollOffset + scrollLines * getVerticalIncrement();", "-\t\tif (scrollOffset + pageSize > verticalMaximum) {", "-\t\t\tscrollOffset = verticalMaximum - pageSize;", "-\t\t}", "-\t\tif (scrollOffset > verticalScrollOffset) {\t\t", "-\t\t\tsetVerticalScrollOffset(scrollOffset, true);", "-\t\t}", "+\t//int index = getBottomIndex();", "+\tint clientAreaHeight = getClientArea().height;", "+\tint index = getLineIndex(clientAreaHeight);", "+\tint y = 0;", "+\tif (index > 0) {", "+\t\tint linePixel = getLinePixel(index);", "+\t\tint lineHeight = lineCache.getLineHeight(index);", "+\t\ty = Math.max(0, linePixel + lineHeight - clientAreaHeight);", "-\t// explicitly go to the calculated caret line. may be different ", "-\t// from content.getLineAtOffset(caretOffset) when in word wrap mode", "-\tshowCaret(caretLine);", "-\t// restore the original horizontal caret position", "-\tint hScrollChange = oldHScrollOffset - horizontalScrollOffset;", "-\tcolumnX = oldColumnX + hScrollChange;", "+\twhile (index < lineCount - 1) {", "+\t\tint paragraphHeight = lineCache.getLineHeight(index);", "+\t\tif (y + paragraphHeight > height) {", "+\t\t\tif (wordWrap) {", "+\t\t\t\tString line = content.getLine(index);", "+\t\t\t\tint lineOffset = content.getOffsetAtLine(index);", "+\t\t\t\tTextLayout layout = renderer.getTextLayout(line, lineOffset);", "+\t\t\t\tint count = layout.getLineCount();", "+\t\t\t\trenderer.disposeTextLayout(layout);", "+\t\t\t} else {", "+\t\t\t\ty = height;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t\ty += paragraphHeight;", "+\t\tindex++;", "+\t}", "+\tif (y == 0) return;", "+\tsetVerticalScrollOffset(verticalScrollOffset + y, true);", "+\tcaretOffset = getOffsetAtPoint(point.x, point.y + 1);", "+\tsetCaretLocation();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26b55c93ce983079aaf9cb92047f245e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "aa3c6d8a75ecd3aa62e9b9ee7768d59f601718ad", "commitAfterChange": "45241a274b1b6b5d05ce82d64b05685046285bb0", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  long gtk_key_press_event (long widget, long event)", "signatureAfterChange": "  void onTextKeyDown(Event event)", "diff": ["+", "+void onTextKeyDown(Event event) {", "+\tif ((style & SWT.DROP_DOWN) != 0 && (event.stateMask & SWT.ALT) != 0 && (event.keyCode == SWT.ARROW_UP || event.keyCode == SWT.ARROW_DOWN)) {", "+\t\tboolean dropped = isDropped ();", "+\t\tif (!dropped) {", "+\t\t\tpopupCalendar.calendarDisplayed = true;", "+\t\t\tsetFocus ();", "+\t\t}", "+\t\tdropDownCalendar(!dropped);", "+\t\treturn;", "+\t}", "+\tint fieldName;", "+\tswitch (event.keyCode) {", "+\t\tcase SWT.ARROW_RIGHT:", "+\t\tcase SWT.KEYPAD_DIVIDE:", "+\t\t\t/* A right arrow or a valid separator navigates to the field on the right, with wraping */", "+\t\t\tselectField((currentField + 1) % fieldCount);", "+\t\t\tsendEvent(SWT.Traverse);", "+\t\t\tbreak;", "+\t\tcase SWT.ARROW_LEFT:", "+\t\t\t/* Navigate to the field on the left, with wrapping */", "+\t\t\tint index = currentField - 1;", "+\t\t\tselectField(index < 0 ? fieldCount - 1 : index);", "+\t\t\tsendEvent(SWT.Traverse);", "+\t\t\tbreak;", "+\t\tcase SWT.ARROW_UP:", "+\t\tcase SWT.KEYPAD_ADD:", "+\t\t\t/* Set the value of the current field to value + 1, with wrapping */", "+\t\t\tcommitCurrentField();", "+\t\t\tincrementField(+1);", "+\t\t\tbreak;", "+\t\tcase SWT.ARROW_DOWN:", "+\t\tcase SWT.KEYPAD_SUBTRACT:", "+\t\t\t/* Set the value of the current field to value - 1, with wrapping */", "+\t\t\tcommitCurrentField();", "+\t\t\tincrementField(-1);", "+\t\t\tbreak;", "+\t\tcase SWT.HOME:", "+\t\t\t/* Set the value of the current field to its minimum */", "+\t\t\tfieldName = fieldNames[currentField];", "+\t\t\tsetTextField(fieldName, calendar.getActualMinimum(fieldName), true, true);", "+\t\t\tbreak;", "+\t\tcase SWT.END:", "+\t\t\t/* Set the value of the current field to its maximum */", "+\t\t\tfieldName = fieldNames[currentField];", "+\t\t\tsetTextField(fieldName, calendar.getActualMaximum(fieldName), true, true);", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tswitch (event.character) {", "+\t\t\t\tcase '/':", "+\t\t\t\tcase ':':", "+\t\t\t\tcase '-':", "+\t\t\t\tcase '.':", "+\t\t\t\t\t/* A valid separator navigates to the field on the right, with wraping */", "+\t\t\t\t\tselectField((currentField + 1) % fieldCount);", "+\t\t\t\t\tsendEvent(SWT.Traverse);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SWT.CR:", "+\t\t\t\t\t/* Enter causes default selection */", "+\t\t\t\t\tpostEvent (SWT.DefaultSelection);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t}", "+}", "-", "-long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {", "-\tlong /*int*/ result = super.gtk_key_press_event (widget, event);", "-\tint fieldName;", "-\tif ((style & SWT.READ_ONLY) == 0 && (style & SWT.CALENDAR) == 0) {", "-\t\tGdkEventKey keyEvent = new GdkEventKey ();", "-\t\tOS.memmove (keyEvent, event, GdkEventKey.sizeof);", "-\t\tint key = keyEvent.keyval;", "-\t\tswitch (key) {", "-\t\t\tcase OS.GDK_Up:", "-\t\t\t\t/* As drop_down  cannot be hooked to gtk_output, it is hooked to gtk_key_press. ", "-\t\t\t\t   Only drop_down option should be hooked to keys, thus spinner is not called twice", "-\t\t\t\t   on key_press and on gtk_output*/", "-\t\t\t\tif((style & SWT.DROP_DOWN) != 0) {", "-\t\t\t\t\tincrementField(+1);", "-\t\t\t\t\tcommitCurrentField();", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase OS.GDK_Down:", "-\t\t\t\t/* As drop_down  cannot be hooked to gtk_output, it is hooked to gtk_key_press. ", "-\t\t\t\t   Only drop_down should be hooked to keys, thus when spinner is used up is not called twice", "-\t\t\t\t   on key_press and on gtk_output*/", "-\t\t\t\tif((style & SWT.DROP_DOWN) != 0) {", "-\t\t\t\t\tincrementField(-1);", "-\t\t\t\t\tcommitCurrentField();", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\tcase OS.GDK_Right:", "-\t\t\t\tselectField((currentField + 1) % fieldCount);", "-\t\t\t\tsendEvent(SWT.Traverse);", "-\t\t\t\tbreak;", "-\t\t\tcase OS.GDK_Left:", "-\t\t\t\tint index = currentField - 1;", "-\t\t\t\tselectField(index < 0 ? fieldCount - 1 : index);", "-\t\t\t\tsendEvent(SWT.Traverse);", "-\t\t\t\tbreak;", "-\t\t\tcase OS.GDK_Home:", "-\t\t\t\t/* Set the value of the current field to its minimum */", "-\t\t\t\tfieldName = fieldNames[currentField];", "-\t\t\t\tsetTextField(fieldName, calendar.getActualMinimum(fieldName), true, true);", "-\t\t\t\tbreak;", "-\t\t\tcase OS.GDK_End:", "-\t\t\t\t/* Set the value of the current field to its maximum */", "-\t\t\t\tfieldName = fieldNames[currentField];", "-\t\t\t\tsetTextField(fieldName, calendar.getActualMaximum(fieldName), true, true);", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\tif (!onTextVerify(key))", "-\t\t\t\t\treturn 1;", "-\t\t\t\t\t", "-\t\t}", "-\t}\t", "-\treturn result;", "-}"]}], "num": 13568}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "879337e585b9dad90170eb09cb7bdb45", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c140f68c66317e839f364d13ee12100", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "d8d3e8f612b1662e51aaeb1aba1b797cad6504c1", "commitAfterChange": "a2a2b61ca97ad1454fa39c9d961ae445a63a1a20", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  boolean accessibilityIsIgnored(int id, int sel)", "signatureAfterChange": "  boolean accessibilityIsIgnored(int id, int sel)", "diff": ["-\t// Always ignore scrollers.", "-\tif (scrollView != null && id == scrollView.id) return true;", "-", "-\t// If we have an accessible, this is a lightweight component that wants", "-\t// to provide accessible information.  But, we always ignore the content view", "-\t// of Shells.", "+\t// If we have an accessible and it represents a valid accessible role, this view is not ignored.", "-\t\tif (accessible != null) return (this instanceof Shell);", "+\t\tif (accessible != null) {", "+\t\t\tid role = accessible.internal_accessibilityAttributeValue(OS.NSAccessibilityRoleAttribute, ACC.CHILDID_SELF);", "+\t\t\treturn (role == null); ", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67adb7a13c1cb6a8ef27b91122537339", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Scale.java", "commitBeforeChange": "69bc14267fe19febde184663a8df2b4c6b3cf10c", "commitAfterChange": "79158ffb988037d9b3e74646df484646a9027ed7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void hookEvents ()", "signatureAfterChange": "  void hookEvents ()", "diff": ["+\tDisplay display = getDisplay ();", "+\tint windowProc2 = display.windowProc2;", "-\tGtkAdjustment adjustment = new GtkAdjustment ();", "-\tOS.memmove (adjustment, hAdjustment);", "-\tsignal_connect (hAdjustment, \"value_changed\", SWT.Selection, 2);", "+\tOS.gtk_signal_connect (hAdjustment, OS.value_changed, windowProc2, SWT.Selection);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e123166e78e782aa5060a8ac718502f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "56841c266e70b057433b04a08e8be6a0ab1b2983", "commitAfterChange": "63477b7849bcacc5e0a7d2ea5349c169b0dff337", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " public void setSelection (Point selection)", "signatureAfterChange": " public void setSelection (Point selection)", "diff": ["-\t\tint start = selection.x, end = selection.y;", "-\t\tstart = Math.min (Math.max (Math.min (start, end), 0), length);", "-\t\tend = Math.min (Math.max (Math.max (start, end), 0), length);", "+\t\tint start = Math.min (Math.max (Math.min (selection.x, selection.y), 0), length);", "+\t\tint end = Math.min (Math.max (Math.max (selection.x, selection.y), 0), length);"]}], "num": 50176}
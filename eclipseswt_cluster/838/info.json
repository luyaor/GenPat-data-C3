{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4cf2eee8777d0f1e7e423dfabdd150a5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd10fab140b76aad7022718475a0a6d8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 76, "signatureBeforeChange": "  public Point computeSize(int wHint, int hHint, boolean changed)", "signatureAfterChange": " public void setFont (Font value)", "diff": ["-", "-public Point computeSize(int wHint, int hHint, boolean changed) {", "-\tcheckWidget();", "-\tPoint size = super.computeSize(wHint, hHint, changed);", "-\tGC gc;", "-\tfinal int WidthCalculationCount = 50;\t\t// calculate item width for the first couple of items only", "-\tTreeRoots root = getRoot();", "-\tTreeItem item;", "-\tImage itemImage;", "-\tString itemText;", "-\tint width;", "-\tint newItemWidth = 0;", "-\t\t", "-\tif (wHint == SWT.DEFAULT && getContentWidth() == 0 && getItemCount() > 0) {", "-\t\tgc = new GC(this);", "-\t\tfor (int i = 0; i < WidthCalculationCount; i++) {", "-\t\t\titem = root.getVisibleItem(i);", "-\t\t\tif (item == null) {", "-\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t// no more items", "-\t\t\t}", "-\t\t\titemImage = item.getImage();", "-\t\t\titemText = item.getText();", "-\t\t\twidth = 0;", "-\t\t\tif (itemImage != null) {", "-\t\t\t\twidth += itemImage.getBounds().width;", "-\t\t\t}", "-\t\t\tif (itemText != null) {", "-\t\t\t\tgc.setFont(item.getFont());", "-\t\t\t\twidth += gc.stringExtent(itemText).x;", "-\t\t\t}", "-\t\t\tnewItemWidth = Math.max(newItemWidth, width);", "-\t\tif (newItemWidth > 0) {", "-\t\t\tsize.x = newItemWidth;", "-\t\t}\t\t", "-\treturn size;", "+public void setFont (Font value) {", "+\tFont oldFont = getFont();", "+\tsuper.setFont(value);", "+\tFont font = getFont();", "+\tif (font.equals (oldFont)) return;", "+\t\t", "+\tGC gc = new GC(this);", "+\t", "+\t/* recompute the receiver's cached font height and item height values */", "+\tfontHeight = gc.getFontMetrics().getHeight();", "+\titemHeight = Math.max(fontHeight, imageHeight) + 2 * getCellPadding();", "+\tPoint headerSize = header.getSize();", "+\tint newHeaderHeight = Math.max(fontHeight, headerImageHeight) + 2 * getHeaderPadding();", "+\tif (headerSize.y != newHeaderHeight) {", "+\t\theader.setSize(headerSize.x, newHeaderHeight);", "+\t}", "+\t/* ", "+\t * Notify all columns of the font change so that they can recompute", "+\t * their cached string widths.", "+\t */", "+\tfor (int i = 0; i < columns.length; i++) {", "+\t\tcolumns[i].updateFont(gc);", "+\t/* ", "+\t * Notify all items of the font change so that those items that", "+\t * use the receiver's font can recompute their cached string widths.", "+\t */", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\titems[i].updateFont(gc);", "+\t", "+\tgc.dispose();", "+\t", "+\tif (header.isVisible()) header.redraw();", "+\tredraw();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a0618aae8070d52657bb51a81edf9c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 13, "signatureBeforeChange": " void headerDoPaint(Event event)", "signatureAfterChange": "  public Point computeSize(int wHint, int hHint, boolean changed)", "diff": ["+public Point computeSize(int wHint, int hHint, boolean changed) {", "+\tcheckWidget();", "+\tPoint size = super.computeSize(wHint, hHint, changed);", "+\tGC gc;", "+\tfinal int WidthCalculationCount = 50;\t\t// calculate item width for the first couple of items only", "+\tTreeRoots root = getRoot();", "+\tTreeItem2 item;", "+\tImage itemImage;", "+\tString itemText;", "+\tint width;", "+\tint newItemWidth = 0;", "+\t\t", "+\tif (wHint == SWT.DEFAULT && getContentWidth() == 0 && getItemCount() > 0) {", "+\t\tgc = new GC(this);", "+\t\tfor (int i = 0; i < WidthCalculationCount; i++) {", "+\t\t\titem = root.getVisibleItem(i);", "+\t\t\tif (item == null) {", "+\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t// no more items", "+\t\t\titemImage = item.getImage();", "+\t\t\titemText = item.getText();", "+\t\t\twidth = 0;", "+\t\t\tif (itemImage != null) {", "+\t\t\t\twidth += itemImage.getBounds().width;", "+\t\t\tif (itemText != null) {", "+\t\t\t\tgc.setFont(item.getFont());", "+\t\t\t\twidth += gc.stringExtent(itemText).x;", "+\t\t\tnewItemWidth = Math.max(newItemWidth, width);", "+\t\tif (newItemWidth > 0) {", "+\t\t\tsize.x = newItemWidth;", "+\t\t}\t\t", "+\treturn size;", "-}", "-void headerDoPaint(Event event) {", "-\tint numColumns = getColumnCount();", "-\tGC gc = event.gc;", "-\tRectangle clipping = gc.getClipping ();", "-\tint startColumn = -1, endColumn = -1;", "-\tif (numColumns > 0) {", "-\t\tstartColumn = computeColumnIntersect(clipping.x, 0);", "-\t\tif (startColumn != -1) {\t/* the click fell within a column's bounds */", "-\t\t\tendColumn = computeColumnIntersect(clipping.x + clipping.width, startColumn);", "-\t\t\tif (endColumn == -1) endColumn = numColumns - 1;", "-\t\t}", "-\t} else {", "-\t\tstartColumn = endColumn = 0;", "-\t}", "-\t", "-\t/* paint the column header shadow that spans the full header width */", "-\tRectangle paintBounds = new Rectangle (clipping.x, 0, clipping.width, getSize().y);", "-\theaderPaintShadow(gc, paintBounds, true, false);", "-\t", "-\t/* if damage occurred to the right of the last column then finished */", "-\tif (startColumn == -1) return;", "-\t", "-\t/* paint each of the column headers */", "-\tint headerHeight = getHeaderHeight ();", "-\tif (numColumns == 0) return;", "-\tint padding = getHeaderPadding();", "-\tint twoPaddings = padding + padding; ", "-\tfor (int i = startColumn; i <= endColumn; i++) {", "-\t\theaderPaintShadow(gc, columns[i].getBounds(), false, true);", "-\t\tcolumns[i].paint(gc);", "-\t}", "-}"]}], "num": 838}
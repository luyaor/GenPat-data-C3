{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "585c76b3ce38ec257147c816153ca2c0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7afbb92b1104ab85261a036552c9aae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "d496d5a9c7cd5750cf246e3865372a158ce7a36b", "commitAfterChange": "4f652c652f932a4ca466d546ef49a18a356a7ae5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\tboolean gdip = gdipGraphics != 0 && (alpha != 0xFF || data.foregroundPattern != null);", "-\tint /*long*/ clipRgn = 0;", "-\tfloat[] lpXform = null;", "+\tboolean gdip = gdipGraphics != 0;", "-\tif (gdipGraphics != 0 && !gdip) {", "-\t\tint /*long*/ matrix = Gdip.Matrix_new(1, 0, 0, 1, 0, 0);", "-\t\tif (matrix == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tGdip.Graphics_GetTransform(gdipGraphics, matrix);", "-\t\tint /*long*/ identity = gc.identity();", "-\t\tGdip.Matrix_Invert(identity);", "-\t\tGdip.Matrix_Multiply(matrix, identity, Gdip.MatrixOrderAppend);", "-\t\tGdip.Matrix_delete(identity);", "-\t\tif (!Gdip.Matrix_IsIdentity(matrix)) {", "-\t\t\tlpXform = new float[6];", "-\t\t\tGdip.Matrix_GetElements(matrix, lpXform);", "-\t\t}", "-\t\tGdip.Matrix_delete(matrix);", "-\t\tif ((data.style & SWT.MIRRORED) != 0 && lpXform != null) {", "-\t\t\tgdip = true;", "-\t\t\tlpXform = null;", "-\t\t} else {", "-\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "-\t\t\tint /*long*/ rgn = Gdip.Region_new();", "-\t\t\tGdip.Graphics_GetClip(gdipGraphics, rgn);", "-\t\t\tif (!Gdip.Region_IsInfinite(rgn, gdipGraphics)) {", "-\t\t\t\tclipRgn = Gdip.Region_GetHRGN(rgn, gdipGraphics);", "-\t\t\t}", "-\t\t\tGdip.Region_delete(rgn);", "-\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "-\t\t\thdc = Gdip.Graphics_GetHDC(gdipGraphics);", "-\t\t}", "-\t}", "-\t\t}", "-\t\tif (lpXform != null) {", "-\t\t\tOS.SetGraphicsMode(hdc, OS.GM_ADVANCED);", "-\t\t\tOS.SetWorldTransform(hdc, lpXform);", "-\t\t}", "-\t\tif (clipRgn != 0) {", "-\t\t\tOS.SelectClipRgn(hdc, clipRgn);", "-\t\t\tOS.DeleteObject(clipRgn);", "-\tint /*long*/ selBrush = 0, selPen = 0, selBrushFg = 0;", "+\tint /*long*/ selBrush = 0, selPen = 0, selBrushFg = 0, gdipFont = 0, lastHFont = 0;", "-\t\t\t\t\tOS.SelectObject(hdc, getItemFont(run));", "-\t\t\t\t\tint drawRunY = drawY + (baseline - run.ascent);", "+\t\t\t\t\tint /*long*/ hFont = getItemFont(run);", "+\t\t\t\t\tOS.SelectObject(hdc, hFont);", "-\t\t\t\t\t\tOS.BeginPath(hdc);", "-\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, 0, null, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "-\t\t\t\t\t\tOS.EndPath(hdc);", "-\t\t\t\t\t\tint count = OS.GetPath(hdc, null, null, 0);", "-\t\t\t\t\t\tint[] points = new int[count*2];", "-\t\t\t\t\t\tbyte[] types = new byte[count];", "-\t\t\t\t\t\tOS.GetPath(hdc, points, types, count);", "-\t\t\t\t\t\tfor (int typeIndex = 0; typeIndex < types.length; typeIndex++) {", "-\t\t\t\t\t\t\tint newType = 0;", "-\t\t\t\t\t\t\tint type = types[typeIndex] & 0xFF;", "-\t\t\t\t\t\t\tswitch (type & ~OS.PT_CLOSEFIGURE) {", "-\t\t\t\t\t\t\t\tcase OS.PT_MOVETO: newType = Gdip.PathPointTypeStart; break;", "-\t\t\t\t\t\t\t\tcase OS.PT_LINETO: newType = Gdip.PathPointTypeLine; break;", "-\t\t\t\t\t\t\t\tcase OS.PT_BEZIERTO: newType = Gdip.PathPointTypeBezier; break;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((type & OS.PT_CLOSEFIGURE) != 0) newType |= Gdip.PathPointTypeCloseSubpath;", "-\t\t\t\t\t\t\ttypes[typeIndex] = (byte)newType;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tint /*long*/ path = Gdip.GraphicsPath_new(points, types, count, Gdip.FillModeAlternate);", "-\t\t\t\t\t\tif (path == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\t\tint drawRunY = drawY + baseline;", "-\t\t\t\t\t\tint antialias = Gdip.Graphics_GetSmoothingMode(gdipGraphics), textAntialias = 0;", "-\t\t\t\t\t\tint mode = Gdip.Graphics_GetTextRenderingHint(data.gdipGraphics);", "-\t\t\t\t\t\tswitch (mode) {", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSystemDefault: textAntialias = Gdip.SmoothingModeAntiAlias; break;", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSingleBitPerPixel:", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSingleBitPerPixelGridFit: textAntialias = Gdip.SmoothingModeNone; break;", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintAntiAlias:", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintAntiAliasGridFit:", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintClearTypeGridFit: textAntialias = Gdip.SmoothingModeAntiAlias; break;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, textAntialias);", "+\t\t\t\t\t\tPointF pt = new PointF();", "+\t\t\t\t\t\tpt.X = drawX;", "+\t\t\t\t\t\tpt.Y = drawRunY;", "-\t\t\t\t\t\tGdip.Graphics_FillPath(gdipGraphics, brush, path);", "+\t\t\t\t\t\tif (hFont != lastHFont) {", "+\t\t\t\t\t\t\tlastHFont = hFont;", "+\t\t\t\t\t\t\tif (gdipFont != 0) Gdip.Font_delete(gdipFont);", "+\t\t\t\t\t\t\tgdipFont = GC.createGdipFont(hdc, hFont);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tGdip.Graphics_DrawDriverString(gdipGraphics, run.glyphs, run.glyphCount, gdipFont, brush, pt, Gdip.DriverStringOptionsRealizedAdvance, 0);", "-\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, antialias);", "-\t\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, textAntialias);", "-\t\t\t\t\t\t\tGdip.Graphics_FillPath(gdipGraphics, selBrushFg, path);", "+\t\t\t\t\t\t\tGdip.Graphics_DrawDriverString(gdipGraphics, run.glyphs, run.glyphCount, gdipFont, selBrushFg, pt, Gdip.DriverStringOptionsRealizedAdvance, 0);", "-\t\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, antialias);", "-\t\t\t\t\t\tGdip.GraphicsPath_delete(path);", "+\t\t\t\t\t\tint drawRunY = drawY + (baseline - run.ascent);", "+\t\tif (gdipFont != 0) Gdip.Font_delete(gdipFont);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35452c4cb407ecb9e8977c94cd1f1b92", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "65777ce3d2a96099cf20830ff9a4bd6c4c860e8f", "commitAfterChange": "ba852d737724ee92cb82b3435acad91de5d9d6c7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "-\t\t\t\t\t\t\tint /*long*/ newPen = hasSelection ? selPen : Gdip.Pen_new(brush, 1);", "-\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "-\t\t\t\t\t\t\tif (run.style.underline) {", "-\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, newPen, drawX, underlineY, drawX + run.width, underlineY);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (run.style.strikeout) {", "-\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "-\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, newPen, drawX, strikeoutY, drawX + run.width, strikeoutY);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (newPen != selPen) Gdip.Pen_delete(newPen);", "-\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tdrawLines(gdip, gdipGraphics, drawX, drawRunY, run, brush);", "-\t\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "-\t\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "-\t\t\t\t\t\t\t\tif (run.style.underline) {", "-\t\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, selPen, rect.left, underlineY, rect.right, underlineY);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (run.style.strikeout) {", "-\t\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "-\t\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, selPen, rect.left, strikeoutY, rect.right, strikeoutY);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdrawLines(gdip, gdipGraphics, drawX, drawRunY, run, selBrushFg);", "-\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "-\t\t\t\t\t\t\tint /*long*/ newPen = hasSelection && fg == selectionForeground.handle ? selPen : OS.CreatePen(OS.PS_SOLID, 1, fg);", "-\t\t\t\t\t\t\tint /*long*/ oldPen = OS.SelectObject(hdc, newPen);", "-\t\t\t\t\t\t\tif (run.style.underline) {", "-\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, underlineY, 0);", "-\t\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, underlineY);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (run.style.strikeout) {", "-\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "-\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, strikeoutY, 0);", "-\t\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, strikeoutY);\t", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tOS.SelectObject(hdc, oldPen);", "-\t\t\t\t\t\t\tif (!hasSelection || fg != selectionForeground.handle) OS.DeleteObject(newPen);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tdrawLines(gdip, hdc, drawX, drawRunY, run, fg);", "-\t\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tint /*long*/ oldPen = OS.SelectObject(hdc, selPen);", "-\t\t\t\t\t\t\t\tif (run.style.underline) {", "-\t\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, underlineY, 0);", "-\t\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, underlineY);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (run.style.strikeout) {", "-\t\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "-\t\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, strikeoutY, 0);", "-\t\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, strikeoutY);\t", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tOS.SelectObject(hdc, oldPen);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdrawLines(gdip, hdc, drawX, drawRunY, run, selectionForeground.handle);", "+\t}", "+}"]}], "num": 27055}
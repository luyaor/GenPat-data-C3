{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93aeb60b78bb307b069f3265fdc5d1c2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6904c76166c4c4ae919dba047b8688d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT AWT/gtk/org/eclipse/swt/awt/SWT_AWT.java", "commitBeforeChange": "beb269beaed211531d9942fc043ccbe318128823", "commitAfterChange": "510184da23d94d0c92b73c66e96f0b50971fe6c0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  static synchronized void initializeSwing()", "signatureAfterChange": "  static synchronized void initializeSwing()", "diff": ["+\t/*", "+\t* Feature in GTK.  The default X error handler", "+\t* for GTK calls exit() after printing the X error.", "+\t* Normally, this isn't that big a problem for SWT", "+\t* applications because they don't cause X errors.", "+\t* However, sometimes X errors are generated by AWT", "+\t* that make SWT exit.  The fix is to hide all X", "+\t* errors when AWT is running.", "+\t*/", "+\tOS.gdk_error_trap_push();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3d657ead77ecf478aff4875c36e7506", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "cac9646a7c3a8e2859f996848f7b073bba0f9e83", "commitAfterChange": "e6cdd0045567c7f5a25aa5532f3a397f78e47293", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  void webViewShow(int sender)", "signatureAfterChange": "  void webViewShow(int sender)", "diff": ["+\t/*", "+\t* Feature in Safari.  Safari's tool bar contains", "+\t* the address bar.  The address bar is displayed", "+\t* if the tool bar is displayed. There is no separate", "+\t* notification for the address bar.", "+\t* Feature in Safari.  The menu bar is always", "+\t* displayed. There is no notification to hide", "+\t* the menu bar.", "+\t*/", "+\tnewEvent.addressBar = toolBar;", "+\tnewEvent.menuBar = true;", "+\tnewEvent.statusBar = statusBar;", "+\tnewEvent.toolBar = toolBar;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97be47da06b2872bb58607be8ebca0ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ce5283d493bb0305232be90811754c5a0b05a294", "commitAfterChange": "44b3178ffce3d19c1b2c77898fcf07c89beddda5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void createItem (TableColumn column, int index)", "signatureAfterChange": "  void createItem (TableColumn column, int index)", "diff": ["+\t/*", "+\t * Feature in GTK. The tree view does not resize immediately if a table ", "+\t * column is created when the table is not visible. If the width of the", "+ \t * new column is queried, GTK returns an incorrect value. The fix is to", "+ \t * ensure that the columns are resized before any queries.", "+\t */", "+\tif(!isVisible ()) {", "+\t\tOS.gtk_container_resize_children (handle);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee9314c8bf3cd394a3e4bc68ac9caaf6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0698acb5eeb7c1cf9de2a8e37f42e4a87539b248", "commitAfterChange": "bc233e27f8ff8ed5fedea1ac8bc608d4ca2d62c9", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": "  void applicationSendEvent (int id, int sel, int event)", "signatureAfterChange": "  void applicationSendEvent (int id, int sel, int event)", "diff": ["+\t", "+\t/*", "+\t * Feature in Cocoa. The help key triggers context-sensitive help but doesn't get forwarded to the window as a key event.", "+\t * If the event is destined for the key window, is the help key, and is an NSKeyDown, send it directly to the window first.", "+\t */", "+\tif (window != null && window.isKeyWindow() && nsEvent.type() == OS.NSKeyDown && (nsEvent.modifierFlags() & OS.NSHelpKeyMask) != 0)\t{", "+\t\twindow.sendEvent(nsEvent);", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ede206175d286aa5df70a378d482ec0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "3e7c054ba02f8b95e224747901288e722797da62", "commitAfterChange": "7a99d68eb1843778f277a07c7a0e4a12a15b3672", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "  int kEventTextInputUnicodeForKeyEvent (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventTextInputUnicodeForKeyEvent (int nextHandler, int theEvent, int userData)", "diff": ["+\t/*", "+\t* Feature in the Macintosh.  If the focus target is changed", "+\t* before the default handler for the widget has run, the key", "+\t* goes to the new focus widget.  The fix is to explicitly", "+\t* send the event to the original focus widget and stop", "+\t* the chain of handlers.", "+\t*/", "+\tif (!isDisposed () && !hasFocus ()) {", "+\t\tOS.SendEventToEventTarget (theEvent, OS.GetControlEventTarget (handle));", "+\t\treturn OS.noErr;", "+\t}"]}], "num": 27472}
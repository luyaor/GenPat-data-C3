{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "074f6f1f891323b50d34c56867b8e645", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1494bcc474bb20d716a335113922e515", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "fc9fa335d73b2faf807cf6a50bdc2f5d3e4cc2ad", "commitAfterChange": "e2645e59ad9809a9dd225c2d64b1a30145646b24", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 146, "signatureBeforeChange": "  int IsPreferred(int aContentType, int aDesiredContentType, int retval)", "signatureAfterChange": "  int IsPreferred(int aContentType, int aDesiredContentType, int retval)", "diff": ["-\t/* Note. boolean remains of size 4 on 64 bit machine */", "-\tXPCOM.memmove(retval, new int[] {1}, 4);", "+\tboolean preferred = false;", "+\tint size = XPCOM.strlen(aContentType);", "+\tif (size > 0) {", "+\t\tbyte[] typeBytes = new byte[size + 1];", "+\t\tXPCOM.memmove(typeBytes, aContentType, size);", "+\t\tString contentType = new String(typeBytes);", "+", "+\t\t/* do not attempt to handle known problematic content types */", "+\t\tif (!contentType.equals(XPCOM.CONTENT_MAYBETEXT) && !contentType.equals(XPCOM.CONTENT_MULTIPART)) {", "+\t\t\t/* determine whether browser can handle the content type */", "+\t\t\tint[] result = new int[1];", "+\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = serviceManager.GetService(XPCOM.NS_CATEGORYMANAGER_CID, nsICategoryManager.NS_ICATEGORYMANAGER_IID, result);", "+\t\t\tserviceManager.Release();", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tnsICategoryManager categoryManager = new nsICategoryManager(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbyte[] categoryBytes = Converter.wcsToMbcs(null, \"Gecko-Content-Viewers\", true);\t//$NON-NLS-1$", "+\t\t\trc = categoryManager.GetCategoryEntry(categoryBytes, typeBytes, result);", "+\t\t\tcategoryManager.Release();", "+\t\t\t/* if no viewer for the content type is registered then rc == XPCOM.NS_ERROR_NOT_AVAILABLE */", "+\t\t\tpreferred = rc == XPCOM.NS_OK;", "+\t\t}", "+\t}", "+", "+\t/* note that boolean remains of size 4 on 64 bit machines */", "+\tXPCOM.memmove(retval, new int[] {preferred ? 1 : 0}, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "338a9da6f3b4ba1db3e76d0a167fed46", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/win32/org/eclipse/swt/browser/MozillaDelegate.java", "commitBeforeChange": "0cb48e6dc6d4cd7842728d49aab01617b288dc45", "commitAfterChange": "258448430288a4f79a83683cae42bc4aa811db5c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void init ()", "signatureAfterChange": "  void init ()", "diff": ["+\tif (!Mozilla.IsPre_4) {", "+\t\t/*", "+\t\t* In XULRunner versions > 4, sending WM_GETDLGCODE to a WM_KEYDOWN's MSG hwnd answers 0", "+\t\t* instead of the expected DLGC_WANTTAB or DLGC_WANTALLKEYS.  As a result, Tab presses", "+\t\t* always default to traversals out of the browser.  The workaround for this is to add a", "+\t\t* Traverse listener that vetos any tab traversals that are attempted while an element", "+\t\t* in the browser has focus. ", "+\t\t*/", "+\t\tbrowser.addListener (SWT.Traverse, new Listener () {", "+\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\tif ((event.detail & (SWT.TRAVERSE_TAB_NEXT | SWT.TRAVERSE_TAB_PREVIOUS)) == 0) return;", "+", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_FOCUSMANAGER_CONTRACTID, true);", "+\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIFocusManager.NS_IFOCUSMANAGER_10_IID, result);", "+\t\t\t\tserviceManager.Release ();", "+", "+\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\tnsIFocusManager focusManager = new nsIFocusManager (result[0]);", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\trc = focusManager.GetFocusedElement (result);", "+\t\t\t\t\tfocusManager.Release ();", "+\t\t\t\t\tevent.doit = result[0] == 0;", "+\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});", "+\t}"]}], "num": 33621}
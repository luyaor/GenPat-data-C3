{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3d5f377fe5f3e1bf619d5d9e623697e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56962a36e861e908d4833d69346b1667", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "acc0030d5a78af91c994cf7e186a8e8f3868c704", "commitAfterChange": "5955df716087c7c49a4980fa592ba6d6fd1a35b4", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " int getContentX (int columnIndex)", "signatureAfterChange": " int getContentX (int columnIndex)", "diff": ["-\t\treturn parent.getColumn(columnIndex).getX() + Tree2.MARGIN_IMAGE;", "+\t\tTreeColumn column = parent.getColumn(columnIndex);", "+\t\tint contentX = column.getX() + MARGIN_TEXT;", "+\t\tif ((column.style & SWT.LEFT) != 0) return contentX;", "+\t\t", "+\t\tint contentWidth = internalGetTextWidth(columnIndex);", "+\t\tImage image = internalGetImage(columnIndex);", "+\t\tif (image != null) {", "+\t\t\tcontentWidth += Tree2.MARGIN_IMAGE + image.getBounds().width;", "+\t\t}", "+\t\tif ((column.style & SWT.RIGHT) != 0) {", "+\t\t\tint padding = parent.getCellPadding();", "+\t\t\tcontentX = Math.max(contentX, column.getX() + column.getWidth() - padding - contentWidth);\t", "+\t\t} else {\t/* SWT.CENTER */", "+\t\t\tcontentX = Math.max(contentX, column.getX() + (column.getWidth() - contentWidth) / 2);", "+\t\t}", "+\t\treturn contentX;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07ecf40f3181d700bc399b61382f9b63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "9f24dee31a4ddef9188efc36caf0bfcdb6f99ca9", "commitAfterChange": "58ab6a3c00d065b9bd6a4cde0ca6baf8963a046c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["-\tCallback callback = null;", "+\tint /*long*/ savePanelClass = 0;", "+\tint /*long*/ swtSavePanelClass = 0;", "+\tCallback callback = null, performKeyEquivalentCallback = null;", "+\t\t", "+\t\tString className = \"SWTSavePanel\";", "+\t\tperformKeyEquivalentCallback = new Callback(this, \"performKeyEquivalent\", 3);", "+\t\tint /*long*/ proc = performKeyEquivalentCallback.getAddress();", "+\t\tif (proc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tswtSavePanelClass = OS.objc_allocateClassPair(OS.object_getClass(panel.id), className, 0);", "+\t\tOS.class_addMethod(swtSavePanelClass, OS.sel_performKeyEquivalent_, proc, \"@:@\");", "+\t\tOS.objc_registerClassPair(swtSavePanelClass);", "+\t\tsavePanelClass = OS.object_setClass(panel.id, swtSavePanelClass);", "+\t}", "+\tif ((style & SWT.SAVE) != 0) {", "+\t\tOS.object_setClass(panel.id, savePanelClass);", "+\t\tOS.objc_disposeClassPair(swtSavePanelClass);", "+\t\tif (performKeyEquivalentCallback != null) performKeyEquivalentCallback.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "401bbc965170aff9f4c41ed6e4d0e3e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "e1e3063d746bca53f2b753e5f16cea223ef7e4d6", "commitAfterChange": "b36f97e8a58715f907c2ff4f1fa2768aeeedb4d3", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void redraw (int propertyID)", "signatureAfterChange": "  void redraw (int propertyID)", "diff": ["+\tint parentHandle = parent.handle;", "-\t* is to give the specific column id if no columns are created.", "+\t* is to give the specific column ids instead.", "-\tif (propertyID == OS.kDataBrowserNoItem && parent.columnCount == 0) propertyID = parent.column_id;", "-\tOS.UpdateDataBrowserItems (parent.handle, parentID, 1, new int[] {id}, OS.kDataBrowserItemNoProperty, propertyID);", "+\tint [] ids = new int [] {id};", "+\tif (propertyID == OS.kDataBrowserNoItem) {", "+\t\tif ((parent.style & SWT.CHECK) != 0) {", "+\t\t\tOS.UpdateDataBrowserItems (parentHandle, parentID, ids.length, ids, OS.kDataBrowserItemNoProperty, Tree.CHECK_COLUMN_ID);", "+\t\t}", "+\t\tif (parent.columnCount == 0) {", "+\t\t\tOS.UpdateDataBrowserItems (parentHandle, parentID, ids.length, ids, OS.kDataBrowserItemNoProperty, parent.column_id);", "+\t\t} else {", "+\t\t\tfor (int i=0; i<parent.columnCount; i++) {", "+\t\t\t\tOS.UpdateDataBrowserItems (parentHandle, parentID, ids.length, ids, OS.kDataBrowserItemNoProperty, parent.columns[i].id);\t\t\t\t", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tOS.UpdateDataBrowserItems (parentHandle, parentID, ids.length, ids, OS.kDataBrowserItemNoProperty, propertyID);", "+\t}", "-\t\tif (OS.GetDataBrowserItemPartBounds (parent.handle, id, propertyID, OS.kDataBrowserPropertyEnclosingPart, rect) == OS.noErr) {", "+\t\tif (OS.GetDataBrowserItemPartBounds (parentHandle, id, propertyID, OS.kDataBrowserPropertyEnclosingPart, rect) == OS.noErr) {", "-\t\t\tOS.GetControlBounds (parent.handle, controlRect);", "+\t\t\tOS.GetControlBounds (parentHandle, controlRect);", "-\t\t\tredrawWidget (parent.handle, x, y, width, height, false);", "+\t\t\tredrawWidget (parentHandle, x, y, width, height, false);"]}], "num": 27148}
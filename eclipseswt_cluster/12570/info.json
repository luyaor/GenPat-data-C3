{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a558ba9bebbae87d17433715e467122", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fd81d4436dd55a01ee9b1e9fcaaf146", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "4ba1138c18d9e572e740905ef25012f42b3617a1", "commitAfterChange": "571baac413606d2aa026e05a07e86f9a4b9a106a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void computeRuns (GC gc)", "signatureAfterChange": " void computeRuns (GC gc)", "diff": ["-\tint lineWidth = indent, lineStart = 0, lineCount = 1;", "+\tint lineWidth = 0, lineStart = 0, lineCount = 1;", "-\t\t\tif (run.style != null && run.style.metrics != null) {", "-\t\t\t\tpiDx[0] = run.width;", "-\t\t\t} else {", "-\t\t\t\tOS.ScriptGetLogicalWidths(run.analysis, run.length, run.glyphCount, run.advances, run.clusters, run.visAttrs, piDx);", "-\t\t\t}", "+\t\t\tOS.ScriptGetLogicalWidths(run.analysis, run.length, run.glyphCount, run.advances, run.clusters, run.visAttrs, piDx);", "-\t\t\tlineWidth = run.softBreak ?  0 : indent;", "+\t\t\tlineWidth = 0;", "-\t\t\t", "-\t\t\t/* Justify Line */", "-\t\t\tif (justify && wrapWidth != -1 && run.softBreak && lineWidth > 0) {", "-\t\t\t\t//lineWidth += getLineIndent(line);//should not ", "-\t\t\t\tif (line == 0) {", "-\t\t\t\t\tlineWidth += indent;", "-\t\t\t\t} else {", "-\t\t\t\t\tStyleItem[] previousLine = runs[line - 1];", "-\t\t\t\t\tStyleItem previousRun = previousLine[previousLine.length - 1];", "-\t\t\t\t\tif (previousRun.lineBreak && !previousRun.softBreak) {", "-\t\t\t\t\t\tlineWidth += indent;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tint hHeap = OS.GetProcessHeap();", "-\t\t\t\tint newLineWidth = 0;", "-\t\t\t\tfor (int j = 0; j < runs[line].length; j++) {", "-\t\t\t\t\tStyleItem item = runs[line][j];", "-\t\t\t\t\tint iDx = item.width * wrapWidth / lineWidth;", "-\t\t\t\t\tif (iDx != item.width) {", "-\t\t\t\t\t\titem.justify = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, item.glyphCount * 4);", "-\t\t\t\t\t\tOS.ScriptJustify(item.visAttrs, item.advances, item.glyphCount, iDx - item.width, 2, item.justify);", "-\t\t\t\t\t\titem.width = iDx;", "-\t\t\t\t\t}", "-\t\t\t\t\tnewLineWidth += item.width; ", "-\t\t\t\t}", "-\t\t\t\tlineWidth = newLineWidth;", "-\t\t\t}", "-\t\t\tthis.lineWidth[line] = lineWidth;", "-\t\t\t", "-\t\t\t/* Reorder the line */", "-\t\t\truns[line] = reorder(runs[line]);", "-\t\t\tif (run.softBreak && run != lastRun) {", "-\t\t\t\trun.softBreak = run.lineBreak = false;", "-\t\t\t\tlastRun.softBreak = lastRun.lineBreak = true;", "+\t\t\truns[line] = reorder(runs[line]);", "+\t\t\tthis.lineWidth[line] = lineWidth;", "+\t\t\tlineWidth = 0;", "+\t\t\tif (wrapWidth != -1) {", "+\t\t\t\tswitch (alignment) {", "+\t\t\t\t\tcase SWT.CENTER: lineWidth = (wrapWidth - this.lineWidth[line]) / 2; break;", "+\t\t\t\t\tcase SWT.RIGHT: lineWidth = wrapWidth - this.lineWidth[line]; break;", "+\t\t\t\t}", "-\t\t\t", "-\t\t\t/* Save the x position for each run in the line */", "-\t\t\tlineWidth = getLineIndent(line);\t\t\t", "-\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50777309c408eab87b3d42b9df9dcc36", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "c4ff87b5b532e9f98adbfa0d94c5d8508add0dd4", "commitAfterChange": "56ce5c8d78e5c714036750a1af81cff952800272", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\t\t\t\t\t\t\tif (run.style != null && run.style.underline) {", "-\t\t\t\t\t\t\t\tint underlineY = drawRunY + run.baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\tgc.drawLine (drawX, underlineY, drawX + run.width, underlineY);\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (run.style != null && run.style.strikeout) {", "-\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.height - run.height/2 - 1;", "-\t\t\t\t\t\t\t\tgc.drawLine (drawX, strikeoutY, drawX + run.width, strikeoutY);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdrawLines(gc, run, drawX, drawRunY, run.width, true);", "-\t\t\t\t\t\t\tgc.setForeground(fg);", "+\t\t\t\t\t\t\t\tgc.setForeground(fg);", "-\t\t\t\t\t\t\t\tif (run.style != null && run.style.underline) {", "-\t\t\t\t\t\t\t\t\tint underlineY = drawRunY + run.baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\t\tgc.drawLine (drawX, underlineY, drawX + run.width, underlineY);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (run.style != null && run.style.strikeout) {", "-\t\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.height - run.height/2 - 1;", "-\t\t\t\t\t\t\t\t\tgc.drawLine (drawX, strikeoutY, drawX + run.width, strikeoutY);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tdrawLines(gc, run, drawX, drawRunY, run.width, false);", "-\t\t\t\t\t\t\t\t\tif (run.style != null && run.style.underline) {", "-\t\t\t\t\t\t\t\t\t\tint underlineY = drawRunY + run.baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\t\t\tgc.drawLine (selX, underlineY, selX + selWidth, underlineY);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (run.style != null && run.style.strikeout) {", "-\t\t\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.height - run.height/2 - 1;", "-\t\t\t\t\t\t\t\t\t\tgc.drawLine (selX, strikeoutY, selX + selWidth, strikeoutY);", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tdrawLines(gc, run, selX, drawRunY, selWidth, true);"]}], "num": 12570}
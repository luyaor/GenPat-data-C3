{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "957e2dfe160fc03c878394efb7e39648", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "134dcbe66af4482a3f18457a6dde7106", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "3d425b802bd95345d9ce8e9110947cfe00a94b18", "commitAfterChange": "c6be9c6a542179a031d674fb6175c98574e0a0fc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\tif (!Is_1_8) {", "-\t\t/*", "-\t\t* Check for the availability of the 1.8 implementation of nsIDocShell to determine", "-\t\t* if the GRE's version is >= 1.8. ", "-\t\t*/", "-\t\trc = webBrowser.QueryInterface (nsIDocShell_1_8.NS_IDOCSHELL_IID, result);", "-\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "-\t\t\tIs_1_8 = true;", "-\t\t\tnew nsISupports (result[0]).Release ();", "-\t\t\tresult[0] = 0;", "-\t\t}", "-\t}", "-", "+\tif (!Is_1_8) {", "+\t\t/*", "+\t\t* Check for the availability of the 1.8 implementation of nsIDocShell to determine", "+\t\t* if the GRE's version is >= 1.8. ", "+\t\t*/", "+\t\trc = webBrowser.QueryInterface (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor (result[0]);", "+\t\tresult[0] = 0;", "+", "+\t\trc = interfaceRequestor.GetInterface (nsIDocShell_1_8.NS_IDOCSHELL_IID, result);", "+\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\tIs_1_8 = true;", "+\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t}", "+\t\tresult[0] = 0;", "+\t\tinterfaceRequestor.Release ();", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffbd447e898920788b92bc469556fe02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "cf445d392f7ccdee7756ab6bc52ea05295594c7b", "commitAfterChange": "d40de95713aa2ea21126d6e88c192e810affe18d", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": "  int OnStartURIOpen (int aURI, int retval)", "signatureAfterChange": "  int OnStartURIOpen (int aURI, int retval)", "diff": ["-\tif (locationListeners.length == 0) {", "-\t\tXPCOM.memmove (retval, new int[] {0}, 4); /* PRBool */", "-\t\treturn XPCOM.NS_OK;", "-\t}", "-\t\t * listeners should not be notified of internal transitions like \"javascipt:...\"", "+\t\t * listeners should not be notified of internal transitions like \"javascript:...\"", "-\t\t\tLocationEvent event = new LocationEvent (browser);", "-\t\t\tevent.display = browser.getDisplay();", "-\t\t\tevent.widget = browser;", "-\t\t\tevent.location = value;", "-\t\t\t/*", "-\t\t\t * If the URI indicates that the page is being rendered from memory", "-\t\t\t * (via setText()) then set it to about:blank to be consistent with IE.", "-\t\t\t */", "-\t\t\tif (event.location.equals (URI_FROMMEMORY)) event.location = ABOUT_BLANK;", "-\t\t\tevent.doit = doit;", "-\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "-\t\t\t\tlocationListeners[i].changing (event);", "+\t\t\tif (locationListeners.length > 0) {", "+\t\t\t\tLocationEvent event = new LocationEvent (browser);", "+\t\t\t\tevent.display = browser.getDisplay();", "+\t\t\t\tevent.widget = browser;", "+\t\t\t\tevent.location = value;", "+\t\t\t\t/*", "+\t\t\t\t * If the URI indicates that the page is being rendered from memory", "+\t\t\t\t * (via setText()) then set it to about:blank to be consistent with IE.", "+\t\t\t\t */", "+\t\t\t\tif (event.location.equals (URI_FROMMEMORY)) event.location = ABOUT_BLANK;", "+\t\t\t\tevent.doit = doit;", "+\t\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "+\t\t\t\t\tlocationListeners[i].changing (event);", "+\t\t\t\t}", "+\t\t\t\tdoit = event.doit && !browser.isDisposed();", "-\t\t\tdoit = event.doit && !browser.isDisposed();", "+", "+\t\t\tif (doit && jsEnabledChanged) {", "+\t\t\t\tjsEnabledChanged = false;", "+", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = webBrowser.QueryInterface (nsIWebBrowserSetup.NS_IWEBBROWSERSETUP_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIWebBrowserSetup setup = new nsIWebBrowserSetup (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = setup.SetProperty (nsIWebBrowserSetup.SETUP_ALLOW_JAVASCRIPT, jsEnabled ? 1 : 0);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tsetup.Release ();", "+\t\t\t}"]}], "num": 4918}
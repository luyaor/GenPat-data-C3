{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "348bb0eb9c9902dfa777a69339536613", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cbf37ed235f6801880f5ce40298d020", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d820b37300fd1d750a00c8339cc179561d90308c", "commitAfterChange": "421dd20c72ea4483b5a69aeba70ea8a605a9a6d3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "  void destroyItem (TableColumn column)", "signatureAfterChange": "  void destroyItem (TableColumn column)", "diff": ["-\t\t\tTableItem item = items [i];", "-\t\t\tint /*long*/ oldItem = item.handle;", "-\t\t\tOS.gtk_list_store_insert (newModel, newItem, i);", "-\t\t\tfor (int j=0; j<FIRST_COLUMN; j++) {", "-\t\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);", "-\t\t\t\tOS.gtk_list_store_set (newModel, newItem, j, ptr [0], -1);", "+\t\t\tOS.gtk_list_store_append (newModel, newItem);", "+\t\t\tTableItem item = items [i];", "+\t\t\tif (item != null) {", "+\t\t\t\tint /*long*/ oldItem = item.handle;", "+\t\t\t\tfor (int j=0; j<FIRST_COLUMN; j++) {", "+\t\t\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);", "+\t\t\t\t\tOS.gtk_list_store_set (newModel, newItem, j, ptr [0], -1);", "+\t\t\t\t}", "+\t\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex, ptr, -1); //image", "+\t\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN, ptr [0], -1);", "+\t\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 1, ptr, -1); //text", "+\t\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 1, ptr [0], -1);", "+\t\t\t\tOS.g_free (ptr [0]);", "+\t\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 2, ptr, -1); //foreground", "+\t\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 2, ptr [0], -1);", "+\t\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 3, ptr, -1); //background", "+\t\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 3, ptr [0], -1);", "+\t\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 4, ptr, -1); //font", "+\t\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 4, ptr [0], -1);", "+\t\t\t\tOS.gtk_list_store_remove (oldModel, oldItem);", "+\t\t\t\tOS.g_free (oldItem);", "+\t\t\t\titem.handle = newItem;", "+\t\t\t} else {", "+\t\t\t\tOS.g_free (newItem);", "-\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex, ptr, -1); //image", "-\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN, ptr [0], -1);", "-\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 1, ptr, -1); //text", "-\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 1, ptr [0], -1);", "-\t\t\tOS.g_free (ptr [0]);", "-\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 2, ptr, -1); //foreground", "-\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 2, ptr [0], -1);", "-\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 3, ptr, -1); //background", "-\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 3, ptr [0], -1);", "-\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 4, ptr, -1); //font", "-\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 4, ptr [0], -1);", "-\t\t\tOS.gtk_list_store_remove (oldModel, oldItem);", "-\t\t\tOS.g_free (oldItem);", "-\t\t\titem.handle = newItem;", "-\t\t\tint /*long*/ item = items [i].handle;", "-\t\t\tint modelIndex = column.modelIndex;", "-\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex, 0, -1); //image", "-\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 1, 0, -1); //text", "-\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 2, 0, -1); //foreground", "-\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 3, 0, -1); //background", "-\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 4, 0, -1); //font", "+\t\t\tTableItem item = items [i];", "+\t\t\tif (item != null) {", "+\t\t\t\tint /*long*/ iter = item.handle;", "+\t\t\t\tint modelIndex = column.modelIndex;", "+\t\t\t\tOS.gtk_list_store_set (modelHandle, iter, modelIndex, 0, -1); //image", "+\t\t\t\tOS.gtk_list_store_set (modelHandle, iter, modelIndex + 1, 0, -1); //text", "+\t\t\t\tOS.gtk_list_store_set (modelHandle, iter, modelIndex + 2, 0, -1); //foreground", "+\t\t\t\tOS.gtk_list_store_set (modelHandle, iter, modelIndex + 3, 0, -1); //background", "+\t\t\t\tOS.gtk_list_store_set (modelHandle, iter, modelIndex + 4, 0, -1); //font", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af7911cf8a9362ea24b1628f67ffa3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ae389dbe449195e7477ade6fe0e755e5f703e0cd", "commitAfterChange": "8a3f84f19fbbca28960cc423186c3d1a52a1d637", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["-\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "-\t\tint bits = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "-\t\tif ((bits & OS.LVS_EX_DOUBLEBUFFER) == 0) {", "-\t\t\tGC gc = null;", "-\t\t\tint paintDC = 0;", "-\t\t\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "-\t\t\tif (hooks (SWT.Paint)) {", "-\t\t\t\tGCData data = new GCData ();", "-\t\t\t\tdata.ps = ps;", "-\t\t\t\tdata.hwnd = handle;", "-\t\t\t\tgc = GC.win32_new (this, data);", "-\t\t\t\tpaintDC = gc.handle;", "-\t\t\t} else {", "-\t\t\t\tpaintDC = OS.BeginPaint (handle, ps);", "+\tif (OS.COMCTL32_MAJOR < 6) {", "+\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0 || findImageControl () != null) {", "+\t\t\tint bits = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\t\tif ((bits & OS.LVS_EX_DOUBLEBUFFER) == 0) {", "+\t\t\t\tGC gc = null;", "+\t\t\t\tint paintDC = 0;", "+\t\t\t\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "+\t\t\t\tif (hooks (SWT.Paint)) {", "+\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\tdata.ps = ps;", "+\t\t\t\t\tdata.hwnd = handle;", "+\t\t\t\t\tgc = GC.win32_new (this, data);", "+\t\t\t\t\tpaintDC = gc.handle;", "+\t\t\t\t} else {", "+\t\t\t\t\tpaintDC = OS.BeginPaint (handle, ps);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t//TODO - only double buffer the damage", "+//\t\t\t\tint x = ps.left, y = ps.top;", "+//\t\t\t\tint width = ps.right - ps.left;", "+//\t\t\t\tint height = ps.bottom - ps.top;", "+\t\t\t\tforceResize ();", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\tint x = rect.left, y = rect.top;", "+\t\t\t\tint width = rect.right - rect.left;", "+\t\t\t\tint height = rect.bottom - rect.top;", "+\t\t\t\t", "+\t\t\t\tint hDC = OS.CreateCompatibleDC (paintDC);", "+\t\t\t\tint hBitmap = OS.CreateCompatibleBitmap (paintDC, width, height);", "+\t\t\t\tint hOldBitmap = OS.SelectObject (hDC, hBitmap);", "+\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) != OS.CLR_NONE) {", "+\t\t\t\t\tdrawBackground (hDC, rect);", "+\t\t\t\t}", "+\t\t\t\tint code = callWindowProc (handle, OS.WM_PAINT, hDC, 0);", "+\t\t\t\tOS.BitBlt (paintDC, x, y, width, height, hDC, 0, 0, OS.SRCCOPY);", "+\t\t\t\tOS.SelectObject (hDC, hOldBitmap);", "+\t\t\t\tOS.DeleteObject (hBitmap);", "+\t\t\t\tOS.DeleteObject (hDC);", "+\t\t\t\tif (hooks (SWT.Paint)) {", "+\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\tevent.x = ps.left;", "+\t\t\t\t\tevent.y = ps.top;", "+\t\t\t\t\tevent.width = ps.right - ps.left;", "+\t\t\t\t\tevent.height = ps.bottom - ps.top;", "+\t\t\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\t\t\t// widget could be disposed at this point", "+\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\tgc.dispose ();", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.EndPaint (handle, ps);", "+\t\t\t\t}", "+\t\t\t\treturn new LRESULT (code);", "-\t\t\t", "-\t\t\t//TODO - only double buffer the damage", "-//\t\t\tint x = ps.left, y = ps.top;", "-//\t\t\tint width = ps.right - ps.left;", "-//\t\t\tint height = ps.bottom - ps.top;", "-\t\t\tforceResize ();", "-\t\t\tRECT rect = new RECT ();", "-\t\t\tOS.GetClientRect (handle, rect);", "-\t\t\tint x = rect.left, y = rect.top;", "-\t\t\tint width = rect.right - rect.left;", "-\t\t\tint height = rect.bottom - rect.top;", "-\t\t\t", "-\t\t\tint hDC = OS.CreateCompatibleDC (paintDC);", "-\t\t\tint hBitmap = OS.CreateCompatibleBitmap (paintDC, width, height);", "-\t\t\tint hOldBitmap = OS.SelectObject (hDC, hBitmap);", "-\t\t\tint code = callWindowProc (handle, OS.WM_PAINT, hDC, 0);", "-\t\t\tOS.BitBlt (paintDC, x, y, width, height, hDC, 0, 0, OS.SRCCOPY);", "-\t\t\tOS.SelectObject (hDC, hOldBitmap);", "-\t\t\tOS.DeleteObject (hBitmap);", "-\t\t\tOS.DeleteObject (hDC);", "-\t\t\tif (hooks (SWT.Paint)) {", "-\t\t\t\tEvent event = new Event ();", "-\t\t\t\tevent.gc = gc;", "-\t\t\t\tevent.x = ps.left;", "-\t\t\t\tevent.y = ps.top;", "-\t\t\t\tevent.width = ps.right - ps.left;", "-\t\t\t\tevent.height = ps.bottom - ps.top;", "-\t\t\t\tsendEvent (SWT.Paint, event);", "-\t\t\t\t// widget could be disposed at this point", "-\t\t\t\tevent.gc = null;", "-\t\t\t\tgc.dispose ();", "-\t\t\t} else {", "-\t\t\t\tOS.EndPaint (handle, ps);", "-\t\t\t}", "-\t\t\treturn new LRESULT (code);"]}], "num": 28906}
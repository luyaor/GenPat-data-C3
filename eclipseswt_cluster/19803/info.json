{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f075ea2820579ea4867b4cb5a127dd59", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf179dbb2e3579273bc9238dfd12f5d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  void createMembersPanel(Composite panel)", "signatureAfterChange": "  void createMembersPanel(Composite panel)", "diff": ["-\t\t\tItemData memberData = (ItemData)item.getData();", "+\t\t\tJNIItem memberData = (JNIItem)item.getData();", "-\t\t\tMetaData metaData = app.getMetaData();", "-\t\t\tif (memberData instanceof FieldData) {", "-\t\t\t\tFieldData fieldData = (FieldData)memberData;", "+\t\t\tif (memberData instanceof JNIField) {", "+\t\t\t\tJNIField field = (JNIField)memberData;", "-\t\t\t\t\t\tfieldData.setCast(text);", "-\t\t\t\t\t\titem.setText(column, fieldData.getCast());", "+\t\t\t\t\t\tfield.setCast(text);", "+\t\t\t\t\t\titem.setText(column, field.getCast());", "-\t\t\t\t\t\tfieldData.setAccessor(text.equals(fieldData.getField().getName()) ? \"\" : text);", "-\t\t\t\t\t\titem.setText(column, fieldData.getAccessor());", "+\t\t\t\t\t\tfield.setAccessor(text.equals(field.getName()) ? \"\" : text);", "+\t\t\t\t\t\titem.setText(column, field.getAccessor());", "-\t\t\t\t\t\tfieldData.setExclude(text);", "-\t\t\t\t\t\titem.setText(column, fieldData.getExclude());", "+\t\t\t\t\t\tfield.setExclude(text);", "+\t\t\t\t\t\titem.setText(column, field.getExclude());", "-\t\t\t\tmetaData.setMetaData(fieldData.getField(), fieldData);", "-\t\t\t} else if (memberData instanceof MethodData) {", "-\t\t\t\tMethodData methodData = (MethodData)memberData;", "+\t\t\t} else if (memberData instanceof JNIMethod) {", "+\t\t\t\tJNIMethod method = (JNIMethod)memberData;", "-\t\t\t\t\t\tmethodData.setAccessor(text.equals(methodData.getMethod().getName()) ? \"\" : text);", "-\t\t\t\t\t\titem.setText(column, methodData.getAccessor());", "+\t\t\t\t\t\tmethod.setAccessor(text.equals(method.getName()) ? \"\" : text);", "+\t\t\t\t\t\titem.setText(column, method.getAccessor());", "-\t\t\t\t\t\tmethodData.setExclude(text);", "-\t\t\t\t\t\titem.setText(column, methodData.getExclude());", "+\t\t\t\t\t\tmethod.setExclude(text);", "+\t\t\t\t\t\titem.setText(column, method.getExclude());", "-\t\t\t\tmetaData.setMetaData(methodData.getMethod(), methodData);", "-\t\t\tItemData data = (ItemData)item.getData();", "+\t\t\tJNIItem data = (JNIItem)item.getData();", "-\t\t\tMetaData metaData = app.getMetaData();", "-\t\t\tif (data instanceof FieldData) {", "-\t\t\t\tFieldData fieldData = (FieldData)data;", "-\t\t\t\tmetaData.setMetaData(fieldData.getField(), fieldData);", "-\t\t\t\tmembersLt.getColumn(column).pack();", "-\t\t\t} else if (data instanceof MethodData) {", "-\t\t\t\tMethodData methodData = (MethodData)data;", "-\t\t\t\tmetaData.setMetaData(methodData.getMethod(), methodData);", "-\t\t\t\tmembersLt.getColumn(column).pack();", "-\t\t\t}", "+\t\t\tmembersLt.getColumn(column).pack();", "-\t\t\t\t\tItemData itemData = (ItemData)item.getData();", "-\t\t\t\t\tif (itemData instanceof FieldData) {", "-\t\t\t\t\t\tFieldData data = (FieldData)itemData;", "+\t\t\t\t\tObject itemData = item.getData();", "+\t\t\t\t\tif (itemData instanceof JNIField) {", "+\t\t\t\t\t\tJNIField field = (JNIField)itemData;", "-\t\t\t\t\t\t\t\tcase FIELD_CAST_COLUMN: text = data.getCast(); break;", "+\t\t\t\t\t\t\t\tcase FIELD_CAST_COLUMN: text = field.getCast(); break;", "-\t\t\t\t\t\t\t\t\ttext = data.getAccessor(); ", "+\t\t\t\t\t\t\t\t\ttext = field.getAccessor(); ", "-\t\t\t\t\t\t\t\t\t\ttext = data.getField().getName();", "+\t\t\t\t\t\t\t\t\t\ttext = field.getName();", "-\t\t\t\t\t\t\t\tcase FIELD_EXCLUDE_COLUMN: text = data.getExclude(); break;", "+\t\t\t\t\t\t\t\tcase FIELD_EXCLUDE_COLUMN: text = field.getExclude(); break;", "-\t\t\t\t\t\t\tmemberEditorLt.setItems(FieldData.getAllFlags());", "-\t\t\t\t\t\t\tmemberEditorLt.setSelection(data.getFlags());", "+\t\t\t\t\t\t\tmemberEditorLt.setItems(JNIField.FLAGS);", "+\t\t\t\t\t\t\tmemberEditorLt.setSelection(field.getFlags());", "-\t\t\t\t\t} else if (itemData instanceof MethodData) {", "-\t\t\t\t\t\tMethodData data = (MethodData)itemData;", "+\t\t\t\t\t} else if (itemData instanceof JNIMethod) {", "+\t\t\t\t\t\tJNIMethod method = (JNIMethod)itemData;", "-\t\t\t\t\t\t\t\t\ttext = data.getAccessor();", "-\t\t\t\t\t\t\t\t\tif (text.length() == 0) text = data.getMethod().getName();", "+\t\t\t\t\t\t\t\t\ttext = method.getAccessor();", "+\t\t\t\t\t\t\t\t\tif (text.length() == 0) text = method.getName();", "-\t\t\t\t\t\t\t\tcase METHOD_EXCLUDE_COLUMN: text = data.getExclude(); break;", "+\t\t\t\t\t\t\t\tcase METHOD_EXCLUDE_COLUMN: text = method.getExclude(); break;", "-\t\t\t\t\t\t\tmemberEditorLt.setItems(MethodData.getAllFlags());", "-\t\t\t\t\t\t\tmemberEditorLt.setSelection(data.getFlags());", "+\t\t\t\t\t\t\tmemberEditorLt.setItems(JNIMethod.FLAGS);", "+\t\t\t\t\t\t\tmemberEditorLt.setSelection(method.getFlags());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8328a9a0d1fcabe5351303bc2b593e65", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "683530eeba436413425ed23ff7ebcc1f75ca9b81", "commitAfterChange": "c6693daac69fdac02f880b4c10b8219d9b330161", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["+", "+\tHashSet tagsSet = new HashSet();", "-\t\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\t\tbuffer.append(\"public static final native \"); ", "-\t\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\t\tbuffer.append(\"void objc_msgSend_stret(\");", "-\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\t\tbuffer.append(\" result, \");", "-\t\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\t\tbuffer.append(\"double objc_msgSend_fpret(\");", "+\t\t\t\t\t\t\t\tString code = buildSend(method, false, false);", "+\t\t\t\t\t\t\t\tString codeTags = buildSend(method, true, false);", "+\t\t\t\t\t\t\t\tif (set.contains(code) && !tagsSet.contains(codeTags)) {", "+\t\t\t\t\t\t\t\t\tString code64 = buildSend(method, false, true);", "+\t\t\t\t\t\t\t\t\ttagsSet.add(code64);", "-\t\t\t\t\t\t\t\t\tbuffer.append(\"int objc_msgSend(\");", "+\t\t\t\t\t\t\t\t\ttagsSet.add(codeTags);", "-\t\t\t\t\t\t\t\tbuffer.append(\"int id, int sel\");", "-\t\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\t\tboolean first = false;", "-\t\t\t\t\t\t\t\tint count = 0;", "-\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\t\tif (!first) buffer.append(\", \");", "-\t\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getType(param));", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(\" arg\");", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(String.valueOf(count++));", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbuffer.append(\");\");", "-\t\t\t\t\t\t\t\tset.add(buffer.toString());", "+\t\t\t\t\t\t\t\tset.add(code);", "-\tfor (Iterator iterator = set.iterator(); iterator.hasNext();) {", "+\tfor (Iterator iterator = tagsSet.iterator(); iterator.hasNext();) {"]}], "num": 19803}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71cd049025610a7978ccebf93bb5f2db", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb5e126cb89317030a35606fef02023", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "c094648ffc8a72b873846910c5c303ece3eabf93", "commitAfterChange": "89f9ee47fc1e876611325e2d5a3ec0b4dfc233e1", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r int layoutItems ()", "signatureAfterChange": "\r int layoutItems ()", "diff": ["-\t\tint available = width - count * CoolItem.MINIMUM_WIDTH;\r", "-\t\tif (available < 0) available = count * CoolItem.MINIMUM_WIDTH;\r", "-\t\t/* determine the height of the row */\r", "+\t\t/* determine the height and the available width for the row */\r", "+\t\tint available = width;\r", "+\t\t\tavailable -= item.internalGetMinimumWidth();\t\r", "+\t\t\tif (available < 0 && (width > item.internalGetMinimumWidth())) {\r", "+\t\t\t\t/* push the next items into the next row */\r", "+\t\t\t\tavailable += item.internalGetMinimumWidth();\r", "+\t\t\t\tint amount = items[row].length - i;\t\r", "+\t\t\t\tCoolItem[] nextRow;\r", "+\t\t\t\tif (row + 1 == items.length) { /* Adding a new row */\r", "+\t\t\t\t\tnextRow = new CoolItem [amount];\r", "+\t\t\t\t\tCoolItem[][] newItems = new CoolItem [items.length + 1][];\r", "+\t\t\t\t\tSystem.arraycopy(items, 0, newItems, 0, items.length);\r", "+\t\t\t\t\titems = newItems;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tnextRow = new CoolItem [amount + items [row + 1].length];\r", "+\t\t\t\t\tSystem.arraycopy(items[row+1], 0, nextRow, amount, items [row + 1].length);\r", "+\t\t\t\t}\r", "+\t\t\t\tSystem.arraycopy(items[row], i, nextRow, 0, amount);\r", "+\t\t\t\titems [row + 1] = nextRow;\r", "+\t\t\t\tCoolItem[] thisRow = new CoolItem[i];\r", "+\t\t\t\tSystem.arraycopy(items[row], 0, thisRow, 0, i);\r", "+\t\t\t\titems[row] = thisRow;\r", "+\t\t\t\tbreak;\t\t\t\r", "+\t\t\t}\r", "+\t\r", "-\t\tfor (int i = 0; i < count; i++) {\r", "+\t\tfor (int i = 0; i < items[row].length; i++) {\r", "-\t\t\tint newWidth = available + CoolItem.MINIMUM_WIDTH;\r", "+\t\t\tint newWidth = available + child.internalGetMinimumWidth();\r", "-\t\t\t\tavailable -= (newWidth - CoolItem.MINIMUM_WIDTH);\r", "+\t\t\t\tavailable -= (newWidth - child.internalGetMinimumWidth());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd749c64872ccd9b182be87c37b75a5e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleControlSite.java", "commitBeforeChange": "6b926f942deba913dd5d0080fd5d2d84fde42797", "commitAfterChange": "40fb376e304991eb2f10a072a9bab714d59c76b4", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "\r void removeEventListener(int iunknown, GUID guid, int eventID, OleListener listener)", "signatureAfterChange": "\r void removeEventListener(int iunknown, GUID guid, int eventID, OleListener listener)", "diff": ["+\t\t\t\tif (!oleEventSink[i].hasListeners()) {\r", "+\t\t\t\t\t//free resources associated with event sink\r", "+\t\t\t\t\toleEventSink[i].disconnect();\r", "+\t\t\t\t\toleEventSink[i].Release();\r", "+\t\t\t\t\tint oldLength = oleEventSink.length;\r", "+\t\t\t\t\tif (oldLength == 1) {\r", "+\t\t\t\t\t\toleEventSink = new OleEventSink[0];\r", "+\t\t\t\t\t\toleEventSinkGUID = new GUID[0];\r", "+\t\t\t\t\t\toleEventSinkIUnknown = new int[0];\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tOleEventSink[] newOleEventSink = new OleEventSink[oldLength - 1];\r", "+\t\t\t\t\t\tSystem.arraycopy(oleEventSink, 0, newOleEventSink, 0, i);\r", "+\t\t\t\t\t\tSystem.arraycopy(oleEventSink, i + 1, newOleEventSink, 0, oldLength - i - 1);\r", "+\t\t\t\t\t\toleEventSink = newOleEventSink;\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tGUID[] newOleEventSinkGUID = new GUID[oldLength - 1];\r", "+\t\t\t\t\t\tSystem.arraycopy(oleEventSinkGUID, 0, newOleEventSinkGUID, 0, i);\r", "+\t\t\t\t\t\tSystem.arraycopy(oleEventSinkGUID, i + 1, newOleEventSinkGUID, 0, oldLength - i - 1);\r", "+\t\t\t\t\t\toleEventSinkGUID = newOleEventSinkGUID;\r", "+\t\t\t\t\t\t\r", "+\t\t\t\t\t\tint[] newOleEventSinkIUnknown = new int[oldLength - 1];\r", "+\t\t\t\t\t\tSystem.arraycopy(oleEventSinkIUnknown, 0, newOleEventSinkIUnknown, 0, i);\r", "+\t\t\t\t\t\tSystem.arraycopy(oleEventSinkIUnknown, i + 1, newOleEventSinkIUnknown, 0, oldLength - i - 1);\r", "+\t\t\t\t\t\toleEventSinkIUnknown = newOleEventSinkIUnknown;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r"]}], "num": 9210}
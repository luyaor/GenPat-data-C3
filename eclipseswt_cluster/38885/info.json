{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bb8c27b068e69871153ae21ef5a3da9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0786f37b02e9aca2f4eaf3d169543140", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "9d77c026b4e032eb48f713757812335134252e95", "commitAfterChange": "bb4ebb46654a43df401fb6d92cbc46a6ebd03ed8", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [0] : item.font;", "+\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [0] : -1;", "+\t\t\t\t\tif (hFont == -1) hFont = item.font;", "+\t\t\t\t\t\tboolean useColor = true;", "-\t\t\t\t\t\tif ((tvItem.state & (OS.TVIS_SELECTED | OS.TVIS_DROPHILITED)) == 0) {", "-\t\t\t\t\t\t\tint clrText = item.cellForeground != null ? item.cellForeground [0] : item.foreground;", "+\t\t\t\t\t\tif ((tvItem.state & (OS.TVIS_SELECTED | OS.TVIS_DROPHILITED)) != 0) {", "+\t\t\t\t\t\t\tuseColor = false;", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t* Feature in Windows.  When the mouse is pressed and the", "+\t\t\t\t\t\t\t* selection is first drawn for a tree, the previously", "+\t\t\t\t\t\t\t* selected item is redrawn but the the TVIS_SELECTED bits", "+\t\t\t\t\t\t\t* are not cleared.  When the user moves the mouse slightly", "+\t\t\t\t\t\t\t* and a drag and drop operation is not started, the item is", "+\t\t\t\t\t\t\t* drawn again and this time with TVIS_SELECTED is cleared.", "+\t\t\t\t\t\t\t* This means that an item that contains colored cells will", "+\t\t\t\t\t\t\t* not draw with the correct background until the mouse is", "+\t\t\t\t\t\t\t* moved.  The fix is to test for the selection colors and", "+\t\t\t\t\t\t\t* guess that the item is not selected.", "+\t\t\t\t\t\t\t* ", "+\t\t\t\t\t\t\t* NOTE: This code does not work when the foreground and", "+\t\t\t\t\t\t\t* background of the tree are set to the selection colors", "+\t\t\t\t\t\t\t* but this does not happen in a regular application.", "+\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "+\t\t\t\t\t\t\t\tif (OS.GetTextColor (hDC) != OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT)) {", "+\t\t\t\t\t\t\t\t\tuseColor = true;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (OS.GetBkColor (hDC) != OS.GetSysColor (OS.COLOR_HIGHLIGHT)) {", "+\t\t\t\t\t\t\t\t\t\tuseColor = true;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (useColor) {", "+\t\t\t\t\t\t\tint clrText = item.cellForeground != null ? item.cellForeground [0] : -1;", "+\t\t\t\t\t\t\tif (clrText == -1) clrText = item.foreground;", "-\t\t\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [0] : item.background;", "+\t\t\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [0] : -1;", "+\t\t\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t* Feature in Windows.  When the mouse is pressed and the", "+\t\t\t\t\t\t\t\t* selection is first drawn for a tree, the previously", "+\t\t\t\t\t\t\t\t* selected item is redrawn but the the TVIS_SELECTED bits", "+\t\t\t\t\t\t\t\t* are not cleared.  When the user moves the mouse slightly", "+\t\t\t\t\t\t\t\t* and a drag and drop operation is not started, the item is", "+\t\t\t\t\t\t\t\t* drawn again and this time with TVIS_SELECTED is cleared.", "+\t\t\t\t\t\t\t\t* This means that an item that contains colored cells will", "+\t\t\t\t\t\t\t\t* not draw with the correct background until the mouse is", "+\t\t\t\t\t\t\t\t* moved.  The fix is to test for the selection colors and", "+\t\t\t\t\t\t\t\t* guess that the item is not selected.", "+\t\t\t\t\t\t\t\t* ", "+\t\t\t\t\t\t\t\t* NOTE: This code does not work when the foreground and", "+\t\t\t\t\t\t\t\t* background of the tree are set to the selection colors", "+\t\t\t\t\t\t\t\t* but this does not happen in a regular application.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "+\t\t\t\t\t\t\t\t\tif (OS.GetTextColor (hDC) != OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT)) {", "+\t\t\t\t\t\t\t\t\t\tuseColor = true;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tif (OS.GetBkColor (hDC) != OS.GetSysColor (OS.COLOR_HIGHLIGHT)) {", "+\t\t\t\t\t\t\t\t\t\t\tuseColor = true;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t* NOTE: This code doesn't work when the foreground and", "+\t\t\t\t\t\t\t\t* NOTE: This code does not work when the foreground and", "-\t\t\t\t\t\t\t\tint clrForeground = OS.GetTextColor (hDC);", "-\t\t\t\t\t\t\t\tif (clrForeground == OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT)) {", "-\t\t\t\t\t\t\t\t\tint clrBackground = OS.GetBkColor (hDC);", "-\t\t\t\t\t\t\t\t\tif (clrBackground == OS.GetSysColor (OS.COLOR_HIGHLIGHT)) {", "+\t\t\t\t\t\t\t\tif (OS.GetTextColor (hDC) == OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT)) {", "+\t\t\t\t\t\t\t\t\tif (OS.GetBkColor (hDC) == OS.GetSysColor (OS.COLOR_HIGHLIGHT)) {", "-\t\t\t\t\t\t\t\tif (printClient || (style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetBkColor (hDC);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif (useColor) {", "-\t\t\t\t\t\t\t\t\t\tclrTextBk = item.cellBackground != null ? item.cellBackground [index] : item.background;", "+\t\t\t\t\t\t\t\tif (useColor) {", "+\t\t\t\t\t\t\t\t\tclrTextBk = item.cellBackground != null ? item.cellBackground [index] : -1;", "+\t\t\t\t\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (clrTextBk == -1) {", "+\t\t\t\t\t\t\t\t\tif (printClient || (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetBkColor (hDC);", "-\t\t\t\t\t\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [index] : item.font;", "+\t\t\t\t\t\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [index] : -1;", "+\t\t\t\t\t\t\t\t\t\tif (hFont == -1) hFont = item.font;", "-\t\t\t\t\t\t\t\t\t\t\tclrText = item.cellForeground != null ? item.cellForeground [index] : item.foreground;", "+\t\t\t\t\t\t\t\t\t\t\tclrText = item.cellForeground != null ? item.cellForeground [index] : -1;", "+\t\t\t\t\t\t\t\t\t\t\tif (clrText == -1) clrText = item.foreground;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b72f768bc75b9d080bf490cae51dab75", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "08891e5255c23450175b59bb5067da77488c2671", "commitAfterChange": "3113638aba6faa66376fb46290077a732c1404f3", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 66, "signatureBeforeChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\t\t\t\t/* Keyboard messages */", "+", "+\t\t\t\t/* Context menu messages */", "-\t\t\t\t\tresult = WM_CONTEXTMENU (handle, lParam); break;", "+\t\t\t\t\tresult = WM_CONTEXTMENU (handle, lParam);", "+\t\t\t\t\tbreak;", "+\t\t\t\t\t", "+\t\t\t\t/* Clipboard messages */", "+\t\t\t\tcase OS.WM_CLEAR:", "+\t\t\t\tcase OS.WM_CUT:", "+\t\t\t\tcase OS.WM_PASTE:", "+\t\t\t\tcase OS.WM_UNDO:", "+\t\t\t\tcase OS.EM_UNDO:", "+\t\t\t\tcase OS.WM_SETTEXT:", "+\t\t\t\t\tif (hwnd == hwndText) {", "+\t\t\t\t\t\tresult = wmClipboard (hwndText, msg, wParam, lParam);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t}\t", "+\t}", "+\tif (msg == OS.CB_SETCURSEL) {", "+\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "+\t\t\t\tString oldText = getText (), newText = null;", "+\t\t\t\tif (wParam == -1) {", "+\t\t\t\t\tnewText = \"\";", "+\t\t\t\t} else {", "+\t\t\t\t\tif (0 <= wParam && wParam < getItemCount ()) {", "+\t\t\t\t\t\tnewText = getItem (wParam);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (newText != null && !newText.equals (oldText)) {", "+\t\t\t\t\tint length = OS.GetWindowTextLength (handle);", "+\t\t\t\t\toldText = newText;", "+\t\t\t\t\tnewText = verifyText (newText, 0, length, null);", "+\t\t\t\t\tif (newText == null) return 0;", "+\t\t\t\t\tif (!newText.equals (oldText)) {", "+\t\t\t\t\t\tint index = indexOf (newText);", "+\t\t\t\t\t\tif (index != -1 && index != wParam) {", "+\t\t\t\t\t\t\treturn callWindowProc (OS.CB_SETCURSEL, index, lParam);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 38885}
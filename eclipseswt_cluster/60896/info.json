{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b6ed18976c788c1c0a58a0fb7780997", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fdb68bec16519b6d145eee1279f0b4a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "5e356c18b07e7f5af1a6b17c096783ad43ee7650", "commitAfterChange": "bec9de216652a0f1829bdec4dfa5d60c81e5e090", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 9, "signatureBeforeChange": " static int getDesktop(Display display)", "signatureAfterChange": " static int getDesktop(Display display)", "diff": ["-/* Determine the desktop for the given display. */", "-static int getDesktop(Display display) {", "-\tif (display == null) return DESKTOP_UNKNOWN;", "-\t", "-\t// If the desktop type for this display is already known, return it.", "-\tInteger desktopValue = (Integer) display.getData( desktopData );", "-\tif (desktopValue != null) {", "-\t\treturn desktopValue.intValue();", "-\t}", "-\tint desktop = DESKTOP_UNKNOWN;", "-\tif (isGnomeDesktop(display)) {", "-\t\tdesktop = DESKTOP_GNOME;", "-\t\t// Save the desktop type on the display itself.", "-\t\tdisplay.setData( desktopData, new Integer(desktop) );", "-\t\treturn desktop;", "-\tint xDisplay = display.xDisplay;", "-\tbyte[] cdeName   = Converter.wcsToMbcs (null, \"_DT_SM_PREFERENCES\", true);", "-\tbyte[] kdeName   = Converter.wcsToMbcs (null, \"KWIN_RUNNING\", true);", "-\t// Obtain the atoms for the various window manager signature properties.", "-\t// On CDE, the atom below may exist without DTWM running. If the atom ", "-\t// below is defined, the CDE database exists and the available", "-\t// applications can be queried.", "-\tint cde   = OS.XInternAtom( xDisplay, cdeName, true );", "-\tint kde   = OS.XInternAtom( xDisplay, kdeName, true );", "-\t", "-\t// Get the list of properties on the root window.", "-\tint   rootWindow = OS.XDefaultRootWindow( xDisplay );", "-\tint[] numProp = new int[1];", "-\tint   propList = OS.XListProperties( xDisplay, rootWindow, numProp );", "-\tif (propList == 0) return DESKTOP_UNKNOWN;", "-\tint[] property = new int[ numProp[0] ];", "-\tOS.memmove( property, propList, (property.length * 4) );", "-\tOS.XFree( propList );", "-\t", "-\t// A given WM (desktop) is active if the property exists on the root window.", "-\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "-\t\tif (property[ index ] == OS.None) continue; // do not match atoms that do not exist", "-\t\tif (property[ index ] == cde) {", "-\t\t\tif (cde_init( display )) desktop = DESKTOP_CDE;", "-\t\t}\t", "-\t\tif (property[ index ] == kde) {", "-\t\t\tif (kde_init()) desktop = DESKTOP_KDE;", "-\t\t}\t", "-\t// Save the desktop type on the display itself.", "-\tdisplay.setData( desktopData, new Integer(desktop) );", "-\treturn desktop;", "+/* Determine the desktop for the given display. */", "+static int getDesktop(Display display) {", "+\tif (display == null) return DESKTOP_UNKNOWN;\t", "+\tInteger desktopValue = (Integer)display.getData(DESKTOP_DATA);", "+\tif (desktopValue != null) return desktopValue.intValue();", "+\tint desktop = DESKTOP_UNKNOWN;", "+\tif (isGnomeDesktop(display)) {", "+\t\tdesktop = DESKTOP_GNOME;", "+\t\tdisplay.setData(DESKTOP_DATA, new Integer(desktop));", "+\t\treturn desktop;", "+\t}", "+", "+\tint xDisplay = display.xDisplay;", "+\t/* Use the character encoding for the default locale */", "+\tbyte[] cdeName = Converter.wcsToMbcs(null, \"_DT_SM_PREFERENCES\", true);", "+\tbyte[] kdeName = Converter.wcsToMbcs(null, \"KWIN_RUNNING\", true);", "+\t/* Obtain the atoms for the various window manager signature properties.", "+\t * On CDE, the atom below may exist without DTWM running. If the atom ", "+\t * below is defined, the CDE database exists and the available", "+\t * applications can be queried.", "+\t */", "+\tint cde = OS.XInternAtom(xDisplay, cdeName, true);", "+\tint kde = OS.XInternAtom(xDisplay, kdeName, true);", "+\t", "+\t/* Get the list of properties on the root window. */", "+\tint rootWindow = OS.XDefaultRootWindow(xDisplay);", "+\tint[] numProp = new int[1];", "+\tint propList = OS.XListProperties(xDisplay, rootWindow, numProp);", "+\tif (propList == 0) return DESKTOP_UNKNOWN;", "+\tint[] property = new int[numProp[0]];", "+\tOS.memmove(property, propList, (property.length * 4));", "+\tOS.XFree(propList);", "+\t", "+\t/* A given WM (desktop) is active if the property exists on the root window. */", "+\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "+\t\tif (property[index] == OS.None) continue; /* do not match atoms that do not exist */", "+\t\tif (property[index] == cde && cde_init(display)) desktop = DESKTOP_CDE;", "+\t\tif (property[index] == kde && kde_init()) desktop = DESKTOP_KDE;", "+\t}", "+\t", "+\tdisplay.setData(DESKTOP_DATA, new Integer(desktop));", "+\treturn desktop;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c7c8e294077354d9ec9e0daf6d0a133", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 1, "signatureBeforeChange": " static int getDesktop(Display display)", "signatureAfterChange": " static int getDesktop(Display display)", "diff": ["+/* Determine the desktop for the given display. */", "+static int getDesktop(Display display) {", "+\tif (display == null) return DESKTOP_UNKNOWN;\t", "+\tInteger desktopValue = (Integer)display.getData(DESKTOP_DATA);", "+\tif (desktopValue != null) return desktopValue.intValue();", "+\tint desktop = DESKTOP_UNKNOWN;", "+", "+\t/* Get the list of properties on the root window. */", "+\tint xDisplay = display.xDisplay;", "+\tint rootWindow = OS.XDefaultRootWindow(xDisplay);", "+\tint[] numProp = new int[1];", "+\tint propList = OS.XListProperties(xDisplay, rootWindow, numProp);", "+\tint[] property = new int[numProp[0]];", "+\tif (propList != 0) {", "+\t\tOS.memmove(property, propList, (property.length * 4));", "+\t\tOS.XFree(propList);", "+\t}", "+\t", "+\t/* KDE is detected by checking if the the KWIN_RUNNING exists */", "+\tif (desktop == DESKTOP_UNKNOWN) {", "+\t\tbyte[] kdeName = Converter.wcsToMbcs(null, \"KWIN_RUNNING\", true);", "+\t\tint kde = OS.XInternAtom(xDisplay, kdeName, true);", "+\t\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "+\t\t\tif (property[index] == OS.None) continue;", "+\t\t\tif (property[index] == kde && kde_init()) desktop = DESKTOP_KDE;", "+\t\t}", "+\t}", "+\t", "+\t/*", "+\t * Feature in Linux Desktop. There is currently no official way to", "+\t * determine whether the Gnome window manager or gnome-vfs is", "+\t * available. Earlier versions including Red Hat 9 and Suse 9 provide", "+\t * a documented Gnome specific property on the root window ", "+\t * WIN_SUPPORTING_WM_CHECK. This property is no longer supported in newer", "+\t * versions such as Fedora Core 2.", "+\t * The workaround is to simply check that the window manager is a ", "+\t * compliant one (property _NET_SUPPORTING_WM_CHECK) and to attempt to load ", "+\t * our native library that depends on gnome-vfs.", "+\t */", "+\tif (desktop == DESKTOP_UNKNOWN) {", "+\t\tbyte[] gnomeName = Converter.wcsToMbcs(null, \"_NET_SUPPORTING_WM_CHECK\", true);", "+\t\tint gnome = OS.XInternAtom(xDisplay, gnomeName, true);", "+\t\tif (gnome != OS.None && gnome_init()) {", "+\t\t\tdesktop = DESKTOP_GNOME;", "+\t\t}", "+\t}", "+", "+\t/*", "+\t* On CDE, the atom below may exist without DTWM running. If the atom ", "+\t* below is defined, the CDE database exists and the available", "+\t* applications can be queried.", "+\t*/", "+\tif (desktop == DESKTOP_UNKNOWN) {", "+\t\tbyte[] cdeName = Converter.wcsToMbcs(null, \"_DT_SM_PREFERENCES\", true);", "+\t\tint cde = OS.XInternAtom(xDisplay, cdeName, true);", "+\t\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "+\t\t\tif (property[index] == OS.None) continue; /* do not match atoms that do not exist */", "+\t\t\tif (property[index] == cde && cde_init(display)) desktop = DESKTOP_CDE;", "+\t\t}", "+\t}", "+", "+\tdisplay.setData(DESKTOP_DATA, new Integer(desktop));", "+\treturn desktop;", "+}", "-/* Determine the desktop for the given display. */", "-static int getDesktop(Display display) {", "-\tif (display == null) return DESKTOP_UNKNOWN;\t", "-\tInteger desktopValue = (Integer)display.getData(DESKTOP_DATA);", "-\tif (desktopValue != null) return desktopValue.intValue();", "-\tint desktop = DESKTOP_UNKNOWN;", "-\tif (isGnomeDesktop(display) && gnome_init()) {", "-\t\tdesktop = DESKTOP_GNOME;", "-\t\tdisplay.setData(DESKTOP_DATA, new Integer(desktop));", "-\t\treturn desktop;", "-\t}", "-", "-\tint xDisplay = display.xDisplay;", "-\t/* Use the character encoding for the default locale */", "-\tbyte[] cdeName = Converter.wcsToMbcs(null, \"_DT_SM_PREFERENCES\", true);", "-\tbyte[] kdeName = Converter.wcsToMbcs(null, \"KWIN_RUNNING\", true);", "-\t/* Obtain the atoms for the various window manager signature properties.", "-\t * On CDE, the atom below may exist without DTWM running. If the atom ", "-\t * below is defined, the CDE database exists and the available", "-\t * applications can be queried.", "-\t */", "-\tint cde = OS.XInternAtom(xDisplay, cdeName, true);", "-\tint kde = OS.XInternAtom(xDisplay, kdeName, true);", "-\t", "-\t/* Get the list of properties on the root window. */", "-\tint rootWindow = OS.XDefaultRootWindow(xDisplay);", "-\tint[] numProp = new int[1];", "-\tint propList = OS.XListProperties(xDisplay, rootWindow, numProp);", "-\tif (propList == 0) return DESKTOP_UNKNOWN;", "-\tint[] property = new int[numProp[0]];", "-\tOS.memmove(property, propList, (property.length * 4));", "-\tOS.XFree(propList);", "-\t", "-\t/* A given WM (desktop) is active if the property exists on the root window. */", "-\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "-\t\tif (property[index] == OS.None) continue; /* do not match atoms that do not exist */", "-\t\tif (property[index] == cde && cde_init(display)) desktop = DESKTOP_CDE;", "-\t\tif (property[index] == kde && kde_init()) desktop = DESKTOP_KDE;", "-\t}", "-\t", "-\tdisplay.setData(DESKTOP_DATA, new Integer(desktop));", "-\treturn desktop;"]}], "num": 60896}
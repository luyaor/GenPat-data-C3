{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "946c36ccfa2772077b1e5ee6b2df3cdf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b02ccee183a9aa5b579635820c6d7859", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "461bbe3bacbad35dca1e9b918ce2ba5104de6626", "commitAfterChange": "bce4377f4f8501c77d053e6fbb8d3f50682ec39c", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 294, "signatureBeforeChange": " \tpublic void calculate(int startLine, int lineCount)", "signatureAfterChange": " void wordWrapResize(int oldClientAreaWidth)", "diff": ["-\t */", "-\tpublic void calculate(int startLine, int lineCount) {", "-\t}", "+//\tWrappedContent2 wrappedContent = (WrappedContent2) content;", "+//\t// all lines are wrapped and no rewrap required if widget has already ", "+//\t// been visible, client area is now wider and visual (wrapped) line ", "+//\t// count equals logical line count.", "+//\tif (oldClientAreaWidth != 0 && clientAreaWidth > oldClientAreaWidth &&", "+//\t\twrappedContent.getLineCount() == logicalContent.getLineCount()) {", "+//\t\treturn;", "+//\t}", "+//\tint width = getClientArea().width - leftMargin - rightMargin;", "+//\twrappedContent.wrapLines(width);", "+//    ", "+//\t// adjust the top index so that top line remains the same", "+//\tint newTopIndex = content.getLineAtOffset(topOffset);", "+//\t// topOffset is the beginning of the top line. therefore it ", "+//\t// needs to be adjusted because in a wrapped line this is also ", "+//\t// the end of the preceeding line.  ", "+//\tif (newTopIndex < content.getLineCount() - 1 &&", "+//\t\ttopOffset == content.getOffsetAtLine(newTopIndex + 1)) {", "+//\t\tnewTopIndex++;", "+//\t}", "+//\tif (newTopIndex != topIndex) {", "+//\t\tScrollBar verticalBar = getVerticalBar();", "+//\t\t// adjust index and pixel offset manually instead of calling", "+//\t\t// setVerticalScrollOffset because the widget does not actually need", "+//\t\t// to be scrolled. causes flash otherwise.", "+//\t\tverticalScrollOffset += (newTopIndex - topIndex) * getVerticalIncrement();", "+//\t\t// verticalScrollOffset may become negative if first line was ", "+//\t\t// partially visible and second line was top line. prevent this from ", "+//\t\t// happening to fix 8503.", "+//\t\tif (verticalScrollOffset < 0) {", "+//\t\t\tverticalScrollOffset = 0;", "+//\t\t}", "+//\t\ttopIndex = newTopIndex;", "+//\t\ttopOffset = content.getOffsetAtLine(topIndex);", "+//\t\tif (verticalBar != null) {", "+//\t\t\tverticalBar.setSelection(verticalScrollOffset);", "+//\t\t}", "+//\t}", "+//\t// caret may be on a different line after a rewrap.", "+//\t// call setCaretLocation after fixing vertical scroll offset.", "+//\tsetCaretLocation();    ", "+//\t// word wrap may have changed on one of the visible lines", "+//\tsuper.redraw();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "334f4e5c0168b85853f76dad781fa5da", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "0bcce8701fee7076e5f1dd2db6410f49b6638dae", "commitAfterChange": "bd48e2b84a6482ec594a06a3c3531b924107c392", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 303, "signatureBeforeChange": "\r void wordWrapResize(int oldClientAreaWidth)", "signatureAfterChange": "\r void wordWrapResize(int oldClientAreaWidth)", "diff": ["-\tString oldCaretLine = content.getLine(caretLine);\r", "-\tString topLine = content.getLine(topIndex);\t\r", "-\tint topOffset = content.getOffsetAtLine(topIndex) + topLine.length();\r", "-\tint newTopIndex;\r", "+\tint newTopIndex;\r", "+\r", "-    // has word wrap changed on the caret line? \r", "-    if (caretLine >= content.getLineCount() || \r", "-    \tcontent.getLine(caretLine).equals(oldCaretLine) == false) {\r", "-    \t// caret may now be on a different line\r", "-\t    caretLine = content.getLineAtOffset(caretOffset);\r", "-\t    setCaretLocation();\r", "-    }    \r", "-\t// make sure top line remains the same\r", "-\t// topOffset is the end of the top line. otherwise top index would be \r", "-\t// set to the preceeding visual line if top line is wrapped (because \r", "-\t// end of preceeding line == start of next line). fixes 8503.\r", "-    newTopIndex = content.getLineAtOffset(topOffset);\r", "+    \r", "+    // adjust the top index so that top line remains the same\r", "+\tnewTopIndex = content.getLineAtOffset(topOffset);\r", "+\t// topOffset is the beginning of the top line. therefore it \r", "+\t// needs to be adjusted because in a wrapped line this is also \r", "+\t// the end of the preceeding line.  \r", "+\tif (newTopIndex < content.getLineCount() - 1 &&\r", "+\t\ttopOffset == content.getOffsetAtLine(newTopIndex + 1)) {\r", "+\t\tnewTopIndex++;\r", "+\t}\r", "+    \ttopOffset = content.getOffsetAtLine(topIndex);\r", "+  \t// caret may be on a different line after a rewrap.\r", "+  \t// call setCaretLocation after fixing vertical scroll offset.\r", "+\tsetCaretLocation();    \r"]}], "num": 61701}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb56a256a920c939f794f6b0786bd512", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bed1de4ca674da7540ce55b56b8ce3c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": "  void createHandle ()", "diff": ["-void createHandle (int index) {", "-\tstate |= HANDLE;", "-    /* AW", "-\tint [] argList1 = {", "-\t\tOS.XmNverifyBell, 0,", "-\t\tOS.XmNeditMode, (style & SWT.SINGLE) != 0 ? OS.XmSINGLE_LINE_EDIT : OS.XmMULTI_LINE_EDIT,", "-\t\tOS.XmNscrollHorizontal, (style & SWT.H_SCROLL) != 0 ? 1 : 0,", "-\t\tOS.XmNscrollVertical, (style & SWT.V_SCROLL) != 0 ? 1 : 0,", "-\t\tOS.XmNwordWrap, (style & SWT.WRAP) != 0 ? 1: 0,", "-\t\tOS.XmNeditable, (style & SWT.READ_ONLY) != 0 ? 0 : 1,", "-\t\tOS.XmNcursorPositionVisible, (style & SWT.READ_ONLY) != 0 && (style & SWT.SINGLE) != 0 ? 0 : 1,", "-\t\tOS.XmNancestorSensitive, 1,", "-\t};", "-    */", "-\tint frameOptions= OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "-\tif ((style & SWT.H_SCROLL) != 0)", "-\t\tframeOptions |= OS.kTXNWantHScrollBarMask;", "-\tif ((style & SWT.V_SCROLL) != 0)", "-\t\tframeOptions |= OS.kTXNWantVScrollBarMask;", "-\tif ((style & SWT.SINGLE) != 0)", "-\t\tframeOptions |= OS.kTXNSingleLineOnlyMask;", "-\tif ((style & SWT.READ_ONLY) != 0)", "-\t\tframeOptions |= OS.kTXNReadOnlyMask;", "-\tif ((style & SWT.WRAP) != 0)", "-\t\tframeOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "-\t", "-\tint parentHandle= parent.handle;", "-\thandle= MacUtil.createDrawingArea(parentHandle, -1, true, 0, 0, 0);\t\t", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tint wHandle= OS.GetControlOwner(parentHandle);", "-\tMacRect bounds= new MacRect();", "-\tOS.GetControlBounds(handle, bounds.getData());", "-\tint frameType= OS.kTXNTextEditStyleFrameType;", "-\tint iFileType= OS.kTXNUnicodeTextFile;", "-\tint iPermanentEncoding= OS.kTXNSystemDefaultEncoding;", "-\tint[] tnxObject= new int[1];", "-\tint[] frameID= new int[1];", "+void createHandle () {", "+\tint features = OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick;", "+\tint [] outControl = new int [1];", "+\tint window = OS.GetControlOwner (parent.handle);", "+\tOS.CreateUserPaneControl (window, null, features, outControl);", "+\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\thandle = outControl [0];", "-\t * Since MLTE is no real control it must embed its scrollbars in the root control.", "-\t * However, this breaks SWT assumption that everything is a nice and clean hierarchy.", "-\t * To work around this problem we try to move the scrollbars from the root control", "-\t * to the real parent of the Text widget.", "-\t * This is done in two steps: before creating the MLTE object with TXNNewObject", "-\t * we count the number of controls under the root control. Second step: see below.", "-\t */", "-\tint root;", "-\tif (true) {", "-\t\tint[] rootHandle= new int[1];", "-\t\tOS.GetRootControl(wHandle, rootHandle);", "-\t\troot= rootHandle[0];", "-\t} else {", "-\t\troot= OS.HIViewGetRoot(wHandle);", "-\t}", "-\tshort[] cnt= new short[1];", "-\tOS.CountSubControls(root, cnt);", "-\tshort oldCount= cnt[0];", "+\t* Feature in the Macintosh.  The TXNObject is not a control but creates scroll", "+\t* bar controls to scroll the text.  These are created in the root and are not", "+\t* children of the user pane that is used to represent the TNXObject.  The fix", "+\t* is to embed the scroll bars in the user pane.\r\t*/", "+\tint [] theRoot = new int [1];", "+\tOS.GetRootControl (window, theRoot);", "+\tshort [] oldCount = new short [1];", "+\tOS.CountSubControls (theRoot [0], oldCount);\t", "-\t/*", "-\t * Create the MLTE object (and possibly 0-2 scrollbars)", "-\t */", "-\tint status= OS.TXNNewObject(0, wHandle, bounds.getData(), frameOptions, frameType, iFileType, iPermanentEncoding,", "-\t\t\t\t\t\ttnxObject, frameID, handle);", "-\tif (status != OS.kNoErr)", "-\t\terror(SWT.ERROR_NO_HANDLES);", "-\t\t", "-\t/*", "-\t * Second step: count the controls under root again to find out how many", "-\t * scrollbars had been added. Then move these new controls under the user pane", "-\t */", "-\tshort[] newCnt= new short[1];", "-\tOS.CountSubControls(root, newCnt);", "-\tshort newCount= newCnt[0];", "-\tint[] child= new int[1];", "-\tfor (short i= newCount; i > oldCount; i--) {", "-\t\tOS.GetIndexedSubControl(root, i, child);", "-\t\tOS.HIViewRemoveFromSuperview(child[0]);", "-\t\tOS.HIViewAddSubview(handle, child[0]);", "-\t}", "+\t/* Create the TXNObject */", "+\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "+\tif ((style & SWT.H_SCROLL) != 0) iFrameOptions |= OS.kTXNWantHScrollBarMask;", "+\tif ((style & SWT.V_SCROLL) != 0) iFrameOptions |= OS.kTXNWantVScrollBarMask;", "+\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "+\tif ((style & SWT.READ_ONLY) != 0) iFrameOptions |= OS.kTXNReadOnlyMask;", "+\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "+\tint [] oTXNObject = new int [1], oTXNFrameID = new int[1];", "+\tOS.TXNNewObject (0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0);", "+\tif (oTXNObject [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\ttxnObject = oTXNObject [0];", "+\ttxnFrameID = oTXNFrameID [0];", "-\tfTX= tnxObject[0];", "-\tfFrameID= frameID[0];", "-\tOS.TXNActivate(fTX, fFrameID, OS.kScrollBarsSyncWithFocus);", "+\t/* Embed the scroll bars in the user pane */", "+\tshort [] newCount = new short [1];", "+\tOS.CountSubControls (theRoot [0], newCount);", "+\tint [] scrollBar = new int [1];", "+\tfor (int i=newCount [0]; i>oldCount [0]; --i) {", "+\t\tOS.GetIndexedSubControl (theRoot [0], (short) i, scrollBar);", "+\t\tOS.HIViewRemoveFromSuperview (scrollBar [0]);", "+\t\tOS.HIViewAddSubview (handle, scrollBar [0]);", "+\t}\t", "-\tOS.TXNFocus(fTX, false);", "-\t/*", "-\t * If the widget remains empty the caret will be too short.", "-\t * As a workaround initialize the widget with a single character", "-\t * and immediately remove it afterwards.", "-\t */", "-\tOS.TXNSetData(fTX, new char[] { ' ' }, 0, 0);", "-\tOS.TXNSetData(fTX, new char[0], 0, 1);", "-\t", "-\tOS.setTXNMargins(fTX, (short)MARGIN);", "+\t/* Configure the TXNOBject */", "+\tOS.TXNSetTXNObjectControls (txnObject, false, 1, new int [] {OS.kTXNDisableDragAndDropTag}, new int [] {1});", "+\tOS.TXNSetFrameBounds (txnObject, 0, 0, 0, 0, txnFrameID);", "+\tint ptr = OS.NewPtr (Rect.sizeof);", "+\tRect rect = new Rect ();", "+\tOS.SetRect (rect, (short) 1, (short) 1, (short) 1, (short) 1);", "+\tOS.memcpy (ptr, rect, Rect.sizeof);", "+\tOS.TXNSetTXNObjectControls (txnObject, false, 1, new int [] {OS.kTXNMarginsTag}, new int [] {ptr});", "+\tOS.DisposePtr (ptr);", "+}", "-\tOS.TXNSetTXNObjectControls(fTX, false, 1, new int[] { OS.kTXNDoFontSubstitution }, new int[] { 1 });", "-}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b91871cb200c4c25dd3670a5d7673bcf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tint features = OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick;", "-\tint [] outControl = new int [1];", "-\tint window = OS.GetControlOwner (parent.handle);", "-\tOS.CreateUserPaneControl (window, null, features, outControl);", "-\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\thandle = outControl [0];", "+\tif (OS.HIVIEW) {", "+\t\tint [] outControl = new int [1];", "+\t\tif ((style & SWT.MULTI) != 0 || ((style & SWT.BORDER) == 0)) {", "+\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "+\t\t\t\tint options = 0;", "+\t\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) == (SWT.H_SCROLL | SWT.V_SCROLL)) options |= OS.kHIScrollViewOptionsAllowGrow;", "+\t\t\t\tif ((style & SWT.H_SCROLL) != 0) options |= OS.kHIScrollViewOptionsHorizScroll;", "+\t\t\t\tif ((style & SWT.V_SCROLL) != 0) options |= OS.kHIScrollViewOptionsVertScroll;", "+\t\t\t\tOS.HIScrollViewCreate (options, outControl);", "+\t\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tscrolledHandle = outControl [0];", "+\t\t\t\tOS.HIViewSetVisible (scrolledHandle, true);", "+\t\t\t}", "+\t\t\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "+\t\t\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "+\t\t\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "+\t\t\tOS.HITextViewCreate (null, 0, iFrameOptions, outControl);", "+\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\thandle = outControl [0];", "+\t\t\tOS.HIViewSetVisible (handle, true);", "+\t\t\ttxnObject = OS.HITextViewGetTXNObject (handle);\t\t\t", "+\t\t\tint ptr = OS.NewPtr (Rect.sizeof);", "+\t\t\tRect rect = inset ();", "+\t\t\tOS.memcpy (ptr, rect, Rect.sizeof);", "+\t\t\tint [] tags = new int [] {", "+\t\t\t\tOS.kTXNDisableDragAndDropTag,", "+\t\t\t\tOS.kTXNIOPrivilegesTag,", "+\t\t\t\tOS.kTXNMarginsTag,", "+\t\t\t\tOS.kTXNJustificationTag,", "+\t\t\t\tOS.kTXNDoFontSubstitution,", "+\t\t\t\tOS.kTXNWordWrapStateTag,", "+\t\t\t\tOS.kTXNAutoScrollBehaviorTag,", "+\t\t\t};", "+\t\t\tint just = OS.kTXNFlushLeft;", "+\t\t\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "+\t\t\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "+\t\t\tint [] datas = new int [] {", "+\t\t\t\t1,", "+\t\t\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "+\t\t\t\tptr,", "+\t\t\t\tjust,", "+\t\t\t\t1,", "+\t\t\t\t(style & SWT.WRAP) != 0 ? 0 : 1,", "+\t\t\t\t0,", "+\t\t\t};", "+\t\t\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "+\t\t\tOS.DisposePtr (ptr);", "+\t\t} else {", "+\t\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\t\tOS.CreateEditUnicodeTextControl (window, null, 0, (style & SWT.PASSWORD) != 0, null, outControl);", "+\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\thandle = outControl [0];", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {1});", "+\t\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextLockedTag, 1, new byte [] {1});", "+\t\t\t}", "+\t\t\tif ((style & (SWT.RIGHT | SWT.CENTER)) != 0) {", "+\t\t\t\tControlFontStyleRec fontStyle = new ControlFontStyleRec ();", "+\t\t\t\tfontStyle.flags |= OS.kControlUseJustMask;", "+\t\t\t\tif ((style & SWT.CENTER) != 0) fontStyle.just = OS.teJustCenter;", "+\t\t\t\tif ((style & SWT.RIGHT) != 0) fontStyle.just = OS.teJustRight;", "+\t\t\t\tOS.SetControlFontStyle (handle, fontStyle);", "+\t\t\t}", "+\t\t}\t\t", "+\t} else {", "+\t\tint features = OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick;", "+\t\tint [] outControl = new int [1];", "+\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\tOS.CreateUserPaneControl (window, null, features, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\t", "+\t\t/*", "+\t\t* Feature in the Macintosh.  The TXNObject is not a control but creates scroll", "+\t\t* bar controls to scroll the text.  These are created in the root and are not", "+\t\t* children of the user pane that is used to represent the TNXObject.  The fix", "+\t\t* is to embed the scroll bars in the user pane.", "+\t\t*/", "+\t\tint [] theRoot = new int [1];", "+\t\tOS.GetRootControl (window, theRoot);", "+\t\tshort [] oldCount = new short [1];", "+\t\tOS.CountSubControls (theRoot [0], oldCount);\t", "+\t\t", "+\t\t/* Create the TXNObject */", "+\t\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "+\t\tif ((style & SWT.H_SCROLL) != 0) iFrameOptions |= OS.kTXNWantHScrollBarMask;", "+\t\tif ((style & SWT.V_SCROLL) != 0) iFrameOptions |= OS.kTXNWantVScrollBarMask;", "+\t\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "+\t\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "+\t\tint [] oTXNObject = new int [1], oTXNFrameID = new int[1];", "+\t\tOS.TXNNewObject (0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0);", "+\t\tif (oTXNObject [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\ttxnObject = oTXNObject [0];", "+\t\ttxnFrameID = oTXNFrameID [0];", "+\t\t", "+\t\t/* Embed the scroll bars in the user pane */", "+\t\tshort [] newCount = new short [1];", "+\t\tOS.CountSubControls (theRoot [0], newCount);", "+\t\tint [] scrollBar = new int [1];", "+\t\tfor (int i=newCount [0]; i>oldCount [0]; --i) {", "+\t\t\tOS.GetIndexedSubControl (theRoot [0], (short) i, scrollBar);", "+\t\t\tOS.HIViewRemoveFromSuperview (scrollBar [0]);", "+\t\t\tOS.HIViewAddSubview (handle, scrollBar [0]);", "+\t\t}", "+\t\t", "+\t\t/* Configure the TXNObject */", "+\t\tint ptr = OS.NewPtr (Rect.sizeof);", "+\t\tRect rect = new Rect ();", "+\t\tif (hasBorder ()) {", "+\t\t\tOS.SetRect (rect, (short) 1, (short) 1, (short) 1, (short) 1);", "+\t\t}", "+\t\tOS.memcpy (ptr, rect, Rect.sizeof);", "+\t\tint [] tags = new int [] {", "+\t\t\tOS.kTXNDisableDragAndDropTag,", "+\t\t\tOS.kTXNIOPrivilegesTag,", "+\t\t\tOS.kTXNMarginsTag,", "+\t\t\tOS.kTXNJustificationTag,", "+\t\t\tOS.kTXNDoFontSubstitution,", "+\t\t};", "+\t\tint just = OS.kTXNFlushLeft;", "+\t\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "+\t\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "+\t\tint [] datas = new int [] {", "+\t\t\t1,", "+\t\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "+\t\t\tptr,", "+\t\t\tjust,", "+\t\t\t1,", "+\t\t};", "+\t\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "+\t\tOS.TXNSetFrameBounds (txnObject, 0, 0, 0, 0, txnFrameID);", "+\t\tOS.DisposePtr (ptr);", "-\t/*", "-\t* Feature in the Macintosh.  The TXNObject is not a control but creates scroll", "-\t* bar controls to scroll the text.  These are created in the root and are not", "-\t* children of the user pane that is used to represent the TNXObject.  The fix", "-\t* is to embed the scroll bars in the user pane.", "-\t*/", "-\tint [] theRoot = new int [1];", "-\tOS.GetRootControl (window, theRoot);", "-\tshort [] oldCount = new short [1];", "-\tOS.CountSubControls (theRoot [0], oldCount);\t", "-\t", "-\t/* Create the TXNObject */", "-\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "-\tif ((style & SWT.H_SCROLL) != 0) iFrameOptions |= OS.kTXNWantHScrollBarMask;", "-\tif ((style & SWT.V_SCROLL) != 0) iFrameOptions |= OS.kTXNWantVScrollBarMask;", "-\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "-\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "-\tint [] oTXNObject = new int [1], oTXNFrameID = new int[1];", "-\tOS.TXNNewObject (0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0);", "-\tif (oTXNObject [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\ttxnObject = oTXNObject [0];", "-\ttxnFrameID = oTXNFrameID [0];", "-\t", "-\t/* Embed the scroll bars in the user pane */", "-\tshort [] newCount = new short [1];", "-\tOS.CountSubControls (theRoot [0], newCount);", "-\tint [] scrollBar = new int [1];", "-\tfor (int i=newCount [0]; i>oldCount [0]; --i) {", "-\t\tOS.GetIndexedSubControl (theRoot [0], (short) i, scrollBar);", "-\t\tOS.HIViewRemoveFromSuperview (scrollBar [0]);", "-\t\tOS.HIViewAddSubview (handle, scrollBar [0]);", "-\t}", "-\t", "-\t/* Configure the TXNObject */", "-\tint ptr = OS.NewPtr (Rect.sizeof);", "-\tRect rect = new Rect ();", "-\tif (hasBorder ()) {", "-\t\tOS.SetRect (rect, (short) 1, (short) 1, (short) 1, (short) 1);", "-\t}", "-\tOS.memcpy (ptr, rect, Rect.sizeof);", "-\tint [] tags = new int [] {", "-\t\tOS.kTXNDisableDragAndDropTag,", "-\t\tOS.kTXNIOPrivilegesTag,", "-\t\tOS.kTXNMarginsTag,", "-\t\tOS.kTXNJustificationTag,", "-\t\tOS.kTXNDoFontSubstitution,", "-\t};", "-\tint just = OS.kTXNFlushLeft;", "-\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "-\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "-\tint [] datas = new int [] {", "-\t\t1,", "-\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "-\t\tptr,", "-\t\tjust,", "-\t\t1,", "-\t};", "-\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "-\tOS.TXNSetFrameBounds (txnObject, 0, 0, 0, 0, txnFrameID);", "-\tOS.DisposePtr (ptr);", "+\t\t/*", "+\t\t* Bug in the Macintosh.  The caret height is too small until some text is set in the", "+\t\t* TXNObject.  The fix is to temporary change the text.", "+\t\t*/", "+\t\tchar [] buffer = new char [] {' '};", "+\t\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 2, OS.kTXNStartOffset, OS.kTXNEndOffset);", "+\t\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 0, OS.kTXNStartOffset, OS.kTXNEndOffset);", "-\t/*", "-\t* Bug in the Macintosh.  The caret height is too small until some text is set in the", "-\t* TXNObject.  The fix is to temporary change the text.", "-\t*/", "-\tchar [] buffer = new char [] {' '};", "-\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 2, OS.kTXNStartOffset, OS.kTXNEndOffset);", "-\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 0, OS.kTXNStartOffset, OS.kTXNEndOffset);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a893b9a628085768c76c9ea08bd8b4eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tint [] outControl = new int [1];", "-\t\tif ((style & SWT.MULTI) != 0 || (style & (SWT.BORDER | SWT.SEARCH)) == 0) {", "-\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "-\t\t\t\tint options = 0;", "-\t\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) == (SWT.H_SCROLL | SWT.V_SCROLL)) options |= OS.kHIScrollViewOptionsAllowGrow;", "-\t\t\t\tif ((style & SWT.H_SCROLL) != 0) options |= OS.kHIScrollViewOptionsHorizScroll;", "-\t\t\t\tif ((style & SWT.V_SCROLL) != 0) options |= OS.kHIScrollViewOptionsVertScroll;", "-\t\t\t\tOS.HIScrollViewCreate (options, outControl);", "-\t\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tscrolledHandle = outControl [0];", "-\t\t\t\tOS.HIViewSetVisible (scrolledHandle, true);", "-\t\t\t}", "-\t\t\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "-\t\t\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "-\t\t\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "-\t\t\tOS.HITextViewCreate (null, 0, iFrameOptions, outControl);", "+\tint [] outControl = new int [1];", "+\tif ((style & SWT.MULTI) != 0 || (style & (SWT.BORDER | SWT.SEARCH)) == 0) {", "+\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "+\t\t\tint options = 0;", "+\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) == (SWT.H_SCROLL | SWT.V_SCROLL)) options |= OS.kHIScrollViewOptionsAllowGrow;", "+\t\t\tif ((style & SWT.H_SCROLL) != 0) options |= OS.kHIScrollViewOptionsHorizScroll;", "+\t\t\tif ((style & SWT.V_SCROLL) != 0) options |= OS.kHIScrollViewOptionsVertScroll;", "+\t\t\tOS.HIScrollViewCreate (options, outControl);", "-\t\t\thandle = outControl [0];", "-\t\t\tOS.HIViewSetVisible (handle, true);", "-\t\t\ttxnObject = OS.HITextViewGetTXNObject (handle);\t\t\t", "-\t\t\tint ptr = OS.NewPtr (Rect.sizeof);", "-\t\t\tRect rect = inset ();", "-\t\t\tOS.memcpy (ptr, rect, Rect.sizeof);", "-\t\t\tint [] tags = new int [] {", "-\t\t\t\tOS.kTXNDisableDragAndDropTag,", "-\t\t\t\tOS.kTXNDoFontSubstitution,", "-\t\t\t\tOS.kTXNIOPrivilegesTag,", "-\t\t\t\tOS.kTXNMarginsTag,", "-\t\t\t\tOS.kTXNJustificationTag,", "-\t\t\t};", "-\t\t\tint just = OS.kTXNFlushLeft;", "-\t\t\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "-\t\t\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "-\t\t\tint [] datas = new int [] {", "-\t\t\t\t1,", "-\t\t\t\t1,", "-\t\t\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "-\t\t\t\tptr,", "-\t\t\t\tjust,", "-\t\t\t};", "-\t\t\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "-\t\t\tOS.DisposePtr (ptr);", "-\t\t} else {", "-\t\t\tif ((style & SWT.SEARCH) != 0) {", "-\t\t\t\tint attributes = (style & SWT.CANCEL) != 0 ? OS.kHISearchFieldAttributesCancel : 0;", "-\t\t\t\tOS.HISearchFieldCreate (null, attributes, 0, 0, outControl);", "-\t\t\t} else {", "-\t\t\t\tint window = OS.GetControlOwner (parent.handle);", "-\t\t\t\tOS.CreateEditUnicodeTextControl (window, null, 0, (style & SWT.PASSWORD) != 0, null, outControl);", "-\t\t\t}", "-\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\thandle = outControl [0];", "-\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {1});", "-\t\t\tif ((style & SWT.READ_ONLY) != 0) {", "-\t\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextLockedTag, 1, new byte [] {1});", "-\t\t\t}", "-\t\t\tif ((style & (SWT.RIGHT | SWT.CENTER)) != 0) {", "-\t\t\t\tControlFontStyleRec fontStyle = new ControlFontStyleRec ();", "-\t\t\t\tfontStyle.flags |= OS.kControlUseJustMask;", "-\t\t\t\tif ((style & SWT.CENTER) != 0) fontStyle.just = OS.teJustCenter;", "-\t\t\t\tif ((style & SWT.RIGHT) != 0) fontStyle.just = OS.teJustRight;", "-\t\t\t\tOS.SetControlFontStyle (handle, fontStyle);", "-\t\t\t}", "-\t\t\tif ((style & SWT.SEARCH) != 0) {", "-\t\t\t\tif (OS.HIVIEW) {", "-\t\t\t\t\tOS.HIViewSetVisible (handle, true);", "-\t\t\t\t} else {", "-\t\t\t\t\tOS.SetControlVisibility (handle, true, false);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}\t\t", "-\t} else {", "-\t\tint features = OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick;", "-\t\tint [] outControl = new int [1];", "-\t\tint window = OS.GetControlOwner (parent.handle);", "-\t\tOS.CreateUserPaneControl (window, null, features, outControl);", "-\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\thandle = outControl [0];", "-\t\t", "-\t\t/*", "-\t\t* Feature in the Macintosh.  The TXNObject is not a control but creates scroll", "-\t\t* bar controls to scroll the text.  These are created in the root and are not", "-\t\t* children of the user pane that is used to represent the TNXObject.  The fix", "-\t\t* is to embed the scroll bars in the user pane.", "-\t\t*/", "-\t\tint [] theRoot = new int [1];", "-\t\tOS.GetRootControl (window, theRoot);", "-\t\tshort [] oldCount = new short [1];", "-\t\tOS.CountSubControls (theRoot [0], oldCount);\t", "-\t\t", "-\t\t/* Create the TXNObject */", "+\t\t\tscrolledHandle = outControl [0];", "+\t\t\tOS.HIViewSetVisible (scrolledHandle, true);", "+\t\t}", "-\t\tif ((style & SWT.H_SCROLL) != 0) iFrameOptions |= OS.kTXNWantHScrollBarMask;", "-\t\tif ((style & SWT.V_SCROLL) != 0) iFrameOptions |= OS.kTXNWantVScrollBarMask;", "-\t\tint [] oTXNObject = new int [1], oTXNFrameID = new int[1];", "-\t\tOS.TXNNewObject (0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0);", "-\t\tif (oTXNObject [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\ttxnObject = oTXNObject [0];", "-\t\ttxnFrameID = oTXNFrameID [0];", "-\t\t", "-\t\t/* Embed the scroll bars in the user pane */", "-\t\tshort [] newCount = new short [1];", "-\t\tOS.CountSubControls (theRoot [0], newCount);", "-\t\tint [] scrollBar = new int [1];", "-\t\tfor (int i=newCount [0]; i>oldCount [0]; --i) {", "-\t\t\tOS.GetIndexedSubControl (theRoot [0], (short) i, scrollBar);", "-\t\t\tOS.HIViewRemoveFromSuperview (scrollBar [0]);", "-\t\t\tOS.HIViewAddSubview (handle, scrollBar [0]);", "-\t\t}", "-\t\t", "-\t\t/* Configure the TXNObject */", "+\t\tOS.HITextViewCreate (null, 0, iFrameOptions, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.HIViewSetVisible (handle, true);", "+\t\ttxnObject = OS.HITextViewGetTXNObject (handle);\t\t\t", "-\t\tRect rect = new Rect ();", "-\t\tif (hasBorder ()) {", "-\t\t\tOS.SetRect (rect, (short) 1, (short) 1, (short) 1, (short) 1);", "-\t\t}", "+\t\tRect rect = inset ();", "+\t\t\tOS.kTXNDoFontSubstitution,", "-\t\t\tOS.kTXNDoFontSubstitution,", "+\t\t\t1,", "-\t\t\t1,", "-\t\tOS.TXNSetFrameBounds (txnObject, 0, 0, 0, 0, txnFrameID);", "-\t", "-\t\t/*", "-\t\t* Bug in the Macintosh.  The caret height is too small until some text is set in the", "-\t\t* TXNObject.  The fix is to temporary change the text.", "-\t\t*/", "-\t\tchar [] buffer = new char [] {' '};", "-\t\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 2, OS.kTXNStartOffset, OS.kTXNEndOffset);", "-\t\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 0, OS.kTXNStartOffset, OS.kTXNEndOffset);", "-", "+\t} else {", "+\t\tif ((style & SWT.SEARCH) != 0) {", "+\t\t\tint attributes = (style & SWT.CANCEL) != 0 ? OS.kHISearchFieldAttributesCancel : 0;", "+\t\t\tOS.HISearchFieldCreate (null, attributes, 0, 0, outControl);", "+\t\t} else {", "+\t\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\t\tOS.CreateEditUnicodeTextControl (window, null, 0, (style & SWT.PASSWORD) != 0, null, outControl);", "+\t\t}", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {1});", "+\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextLockedTag, 1, new byte [] {1});", "+\t\t}", "+\t\tif ((style & (SWT.RIGHT | SWT.CENTER)) != 0) {", "+\t\t\tControlFontStyleRec fontStyle = new ControlFontStyleRec ();", "+\t\t\tfontStyle.flags |= OS.kControlUseJustMask;", "+\t\t\tif ((style & SWT.CENTER) != 0) fontStyle.just = OS.teJustCenter;", "+\t\t\tif ((style & SWT.RIGHT) != 0) fontStyle.just = OS.teJustRight;", "+\t\t\tOS.SetControlFontStyle (handle, fontStyle);", "+\t\t}", "+\t\tif ((style & SWT.SEARCH) != 0) {", "+\t\t\tOS.HIViewSetVisible (handle, true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e564223dcb103a85b1460372e07fb94", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "25c61b73dde0c1ccca89139e198082a546ace6a8", "commitAfterChange": "46a68f0d1948c7c620d9cddf667d96000d831d27", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["+\t\tint align = OS.NSLeftTextAlignment;", "+\t\tif ((style & SWT.CENTER) != 0) align = OS.NSCenterTextAlignment;", "+\t\tif ((style & SWT.RIGHT) != 0) align = OS.NSRightTextAlignment;", "+\t\twidget.setAlignment(align);", "-\t\t", "+\t\tint align = OS.NSLeftTextAlignment;", "+\t\tif ((style & SWT.CENTER) != 0) align = OS.NSCenterTextAlignment;", "+\t\tif ((style & SWT.RIGHT) != 0) align = OS.NSRightTextAlignment;", "+\t\twidget.setAlignment(align);", "+", "-\t", "-//\tint [] outControl = new int [1];", "-//\tif ((style & SWT.MULTI) != 0 || (style & (SWT.BORDER | SWT.SEARCH)) == 0) {", "-//\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "-//\t\t\tint options = 0;", "-//\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) == (SWT.H_SCROLL | SWT.V_SCROLL)) options |= OS.kHIScrollViewOptionsAllowGrow;", "-//\t\t\tif ((style & SWT.H_SCROLL) != 0) options |= OS.kHIScrollViewOptionsHorizScroll;", "-//\t\t\tif ((style & SWT.V_SCROLL) != 0) options |= OS.kHIScrollViewOptionsVertScroll;", "-//\t\t\tOS.HIScrollViewCreate (options, outControl);", "-//\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-//\t\t\tscrolledHandle = outControl [0];", "-//\t\t\tOS.HIViewSetVisible (scrolledHandle, true);", "-//\t\t}", "-//\t\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "-//\t\t/*", "-//\t\t* Bug in the Macintosh.  For some reason a single line text does not", "-//\t\t* display properly when it is right aligned.  The fix is to use a", "-//\t\t* multi line text when right aligned.", "-//\t\t*/", "-//\t\tif ((style & SWT.RIGHT) == 0) {", "-//\t\t\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "-//\t\t}", "-//\t\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "-//\t\tOS.HITextViewCreate (null, 0, iFrameOptions, outControl);", "-//\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-//\t\thandle = outControl [0];", "-//\t\tOS.HIViewSetVisible (handle, true);", "-//\t\tif ((style & SWT.MULTI) != 0 && (style & SWT.BORDER) != 0) {", "-//\t\t\tint features = OS.kControlSupportsEmbedding;", "-//\t\t\tOS.CreateUserPaneControl (0, null, features, outControl);", "-//\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-//\t\t\tframeHandle = outControl [0];\t\t\t", "-//\t\t}", "-//\t\ttxnObject = OS.HITextViewGetTXNObject (handle);\t\t\t", "-//\t\tint ptr = OS.NewPtr (Rect.sizeof);", "-//\t\tRect rect = (style & SWT.SINGLE) != 0 ? inset () : new Rect ();", "-//\t\tOS.memmove (ptr, rect, Rect.sizeof);", "-//\t\tint [] tags = new int [] {", "-//\t\t\tOS.kTXNDisableDragAndDropTag,", "-//\t\t\tOS.kTXNDoFontSubstitution,", "-//\t\t\tOS.kTXNIOPrivilegesTag,", "-//\t\t\tOS.kTXNMarginsTag,", "-//\t\t\tOS.kTXNJustificationTag,", "-//\t\t};", "-//\t\tint just = OS.kTXNFlushLeft;", "-//\t\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "-//\t\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "-//\t\tint [] datas = new int [] {", "-//\t\t\t1,", "-//\t\t\t1,", "-//\t\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "-//\t\t\tptr,", "-//\t\t\tjust,", "-//\t\t};", "-//\t\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "-//\t\tOS.DisposePtr (ptr);", "-//\t} else {", "-//\t\tif ((style & SWT.SEARCH) != 0) {", "-//\t\t\tint attributes = (style & SWT.CANCEL) != 0 ? OS.kHISearchFieldAttributesCancel : 0;", "-//\t\t\tOS.HISearchFieldCreate (null, attributes, 0, 0, outControl);", "-//\t\t} else {", "-//\t\t\tint window = OS.GetControlOwner (parent.handle);", "-//\t\t\tOS.CreateEditUnicodeTextControl (window, null, 0, (style & SWT.PASSWORD) != 0, null, outControl);", "-//\t\t}", "-//\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-//\t\thandle = outControl [0];", "-//\t\tif ((style & SWT.SEARCH) != 0 && display.smallFonts) {", "-//\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlSizeTag, 2, new short [] {OS.kControlSizeSmall});", "-//\t\t}", "-//\t\t/*", "-//\t\t* Bug in the Macintosh.  For some reason a single line text does not", "-//\t\t* display selection properly when it is right aligned.  The fix is to use a", "-//\t\t* multi line text when right aligned.", "-//\t\t*/", "-//\t\tif ((style & SWT.RIGHT) == 0) {", "-//\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {1});", "-//\t\t}", "-//\t\tif ((style & SWT.READ_ONLY) != 0) {", "-//\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextLockedTag, 1, new byte [] {1});", "-//\t\t}", "-//\t\tif ((style & (SWT.RIGHT | SWT.CENTER)) != 0) {", "-//\t\t\tControlFontStyleRec fontStyle = new ControlFontStyleRec ();", "-//\t\t\tfontStyle.flags |= OS.kControlUseJustMask;", "-//\t\t\tif ((style & SWT.CENTER) != 0) fontStyle.just = OS.teJustCenter;", "-//\t\t\tif ((style & SWT.RIGHT) != 0) fontStyle.just = OS.teJustRight;", "-//\t\t\tOS.SetControlFontStyle (handle, fontStyle);", "-//\t\t}", "-//\t\tif ((style & SWT.SEARCH) != 0) {", "-//\t\t\tOS.HIViewSetVisible (handle, true);", "-//\t\t}", "-//\t}"]}], "num": 6361}
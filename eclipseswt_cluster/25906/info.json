{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e121318a0dae5a51bc1f9ee6403a772a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8652e506252c1aadd329a2ce2549964", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "add63531e54321a29c008d33afde4204f0cb5aee", "commitAfterChange": "96fd165a61160456fdae7b1059d270095fdb471e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["+\t", "+\t/*", "+\t* Feature in GTK.  There is no API to query the arrow", "+\t* handle from a combo box although it is possible to", "+\t* get the list and text field.  The arrow handle is needed", "+\t* to hook events.  The fix is to find the first child that is", "+\t* not the entry or list and assume this is the arrow handle.", "+\t*/", "+\tint list = OS.gtk_container_get_children (handle);", "+\tif (list != 0) {", "+\t\tint i = 0, count = OS.g_list_length (list);", "+\t\twhile (i<count) {", "+\t\t\tint childHandle = OS.g_list_nth_data (list, i);", "+\t\t\tif (childHandle != entryHandle && childHandle != listHandle) {", "+\t\t\t\tarrowHandle = childHandle;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\ti++;", "+\t\t}", "+\t\tOS.g_list_free (list);", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b7c0ca82d9d50f0d5d50448a9ca5454", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "59eec4b8f7997739d601bb838ff1820a65819338", "commitAfterChange": "bf22825fa1cfccb273b10d6e2a81933de5666e42", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public String open ()", "signatureAfterChange": "\r public String open ()", "diff": ["-\t\t/* Use the character encoding for the default locale */\r", "-\t\tTCHAR prefix = new TCHAR (0, struct.nFileOffset - 1);\r", "-\t\tint byteCount2 = prefix.length () * TCHAR.sizeof;\r", "-\t\tOS.MoveMemory (prefix, lpstrFile, byteCount2);\r", "-\t\tfilterPath = prefix.toString (0, prefix.length ());\r", "-\t\t\r", "-\t\t* Get each file from the buffer.  Files are delimited\r", "-\t\t* by a NULL character with 2 NULL characters at the end.\r", "+\t\t* Bug in WinCE HPC.  For some reason, nFileOffset and\r", "+\t\t* nFileExtension are always zero.  The fix is to parse\r", "+\t\t* lpstrFile to calculate nFileOffset.  Note: WinCE does\r", "+\t\t* not support multiple selection.\r", "-\t\tint count = 0;\r", "-\t\tfileNames = new String [(style & SWT.MULTI) != 0 ? 4 : 1];\r", "-\t\tint start = struct.nFileOffset;\r", "-\t\tdo {\r", "-\t\t\tint end = start;\r", "-\t\t\twhile (end < buffer.length () && buffer.tcharAt (end) != 0) end++;\r", "-\t\t\tString string = buffer.toString (start, end - start);\r", "-\t\t\tstart = end;\r", "-\t\t\tif (count == fileNames.length) {\r", "-\t\t\t\tString [] newFileNames = new String [fileNames.length + 4];\r", "-\t\t\t\tSystem.arraycopy (fileNames, 0, newFileNames, 0, fileNames.length);\r", "+\t\tint nFileOffset = struct.nFileOffset;\r", "+\t\tif (OS.IsHPC && nFileOffset == 0) {\r", "+\t\t\tint index = 0; \r", "+\t\t\twhile (index < buffer.length ()) {\r", "+\t\t\t\tint ch = buffer.tcharAt (index);\r", "+\t\t\t\tif (ch == 0) break;\r", "+\t\t\t\tif (ch == '\\\\') nFileOffset = index;\r", "+\t\t\t\tindex++;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (nFileOffset != 0) {\r", "+\t\t\r", "+\t\t\t/* Use the character encoding for the default locale */\r", "+\t\t\tTCHAR prefix = new TCHAR (0, nFileOffset - 1);\r", "+\t\t\tint byteCount2 = prefix.length () * TCHAR.sizeof;\r", "+\t\t\tOS.MoveMemory (prefix, lpstrFile, byteCount2);\r", "+\t\t\tfilterPath = prefix.toString (0, prefix.length ());\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Get each file from the buffer.  Files are delimited\r", "+\t\t\t* by a NULL character with 2 NULL characters at the end.\r", "+\t\t\t*/\r", "+\t\t\tint count = 0;\r", "+\t\t\tfileNames = new String [(style & SWT.MULTI) != 0 ? 4 : 1];\r", "+\t\t\tint start = nFileOffset;\r", "+\t\t\tdo {\r", "+\t\t\t\tint end = start;\r", "+\t\t\t\twhile (end < buffer.length () && buffer.tcharAt (end) != 0) end++;\r", "+\t\t\t\tString string = buffer.toString (start, end - start);\r", "+\t\t\t\tstart = end;\r", "+\t\t\t\tif (count == fileNames.length) {\r", "+\t\t\t\t\tString [] newFileNames = new String [fileNames.length + 4];\r", "+\t\t\t\t\tSystem.arraycopy (fileNames, 0, newFileNames, 0, fileNames.length);\r", "+\t\t\t\t\tfileNames = newFileNames;\r", "+\t\t\t\t}\r", "+\t\t\t\tfileNames [count++] = string;\r", "+\t\t\t\tif ((style & SWT.MULTI) == 0) break;\r", "+\t\t\t\tstart++;\r", "+\t\t\t} while (start < buffer.length () && buffer.tcharAt (start) != 0);\r", "+\t\t\t\r", "+\t\t\tif (fileNames.length > 0) fileName = fileNames  [0];\r", "+\t\t\tString separator = \"\";\r", "+\t\t\tint length = filterPath.length ();\r", "+\t\t\tif (length > 0 && filterPath.charAt (length - 1) != '\\\\') {\r", "+\t\t\t\tseparator = \"\\\\\";\r", "+\t\t\t}\r", "+\t\t\tfullPath = filterPath + separator + fileName;\r", "+\t\t\tif (count < fileNames.length) {\r", "+\t\t\t\tString [] newFileNames = new String [count];\r", "+\t\t\t\tSystem.arraycopy (fileNames, 0, newFileNames, 0, count);\r", "-\t\t\tfileNames [count++] = string;\r", "-\t\t\tif ((style & SWT.MULTI) == 0) break;\r", "-\t\t\tstart++;\r", "-\t\t} while (start < buffer.length () && buffer.tcharAt (start) != 0);\r", "-\t\t\r", "-\t\tif (fileNames.length > 0) fileName = fileNames  [0];\r", "-\t\tString separator = \"\";\r", "-\t\tint length = filterPath.length ();\r", "-\t\tif (length > 0 && filterPath.charAt (length - 1) != '\\\\') {\r", "-\t\t\tseparator = \"\\\\\";\r", "-\t\t}\r", "-\t\tfullPath = filterPath + separator + fileName;\r", "-\t\tif (count < fileNames.length) {\r", "-\t\t\tString [] newFileNames = new String [count];\r", "-\t\t\tSystem.arraycopy (fileNames, 0, newFileNames, 0, count);\r", "-\t\t\tfileNames = newFileNames;\r"]}], "num": 25906}
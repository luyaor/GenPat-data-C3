{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba3154bb6554198ae9abc15e4f2e5d72", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d7da721cc2fd43d4b37b09d5789b0db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "db5070f4a4104c5e47a8cd2bdd5b5f06b11fcd6f", "commitAfterChange": "ed00985c99474f1ccbc7dee6f3b569d40159cdfc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  RECT getBounds (int row, int column, boolean getText, boolean getImage, boolean full)", "signatureAfterChange": "  RECT getBounds (int row, int column, boolean getText, boolean getImage, boolean fullText, boolean fullImage, int hDC)", "diff": ["+", "+RECT getBounds (int row, int column, boolean getText, boolean getImage, boolean fullText, boolean fullImage, int hDC) {", "-\tint columnCount = Math.max (1, parent.getColumnCount ());", "-\tif (0 > column || column > columnCount - 1) return new RECT ();", "+\tint columnCount = parent.getColumnCount ();", "+\tif (!(0 <= column && column < Math.max (1, columnCount))) {", "+\t\treturn new RECT ();", "+\t}", "-\tif (column == 0 && columnCount == 1) {", "+\tif (column == 0) {", "-\t\t\trect.left = 0;", "+\t\t\treturn new RECT ();", "+\t\t}", "+\t\tif (columnCount != 0 && (fullText || fullImage)) {", "+\t\t\tRECT headerRect = new RECT ();", "+\t\t\tint hwndHeader = OS.SendMessage (hwnd, OS.LVM_GETHEADER, 0, 0);", "+\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, 0, headerRect);", "+\t\t\tif (getText && fullText) rect.right = headerRect.right;", "+\t\t\tif (getImage && fullImage) rect.left = headerRect.left;", "-\t\t* Feature in Windows.  Calling LVM_GETSUBITEMRECT with LVIR_LABEL", "-\t\t* and zero for the column number gives the bounds of the first item", "-\t\t* without including the bounds of the icon.  This is undocumented.", "-\t\t* When called with values greater than zero, the icon bounds are", "-\t\t* included and this behavior is documented.", "+\t\t* Feature in Windows.  LVM_GETSUBITEMRECT returns an image width", "+\t\t* even when the subitem does not contain an image.  The fix is to", "+\t\t* test for this case and adjust the rectangle to represent the area", "+\t\t* the table is actually drawing.", "+\t\tboolean hasImage = images != null && images [column] != null;", "-\t\trect.left = getText ? OS.LVIR_LABEL : OS.LVIR_ICON;", "-\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, row, rect) != 0) {", "-\t\t\tif (getText && getImage) {", "-\t\t\t\tif (column == 0) {", "+\t\tif (fullText || fullImage || hDC == 0) {", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  Despite the fact that the documenation states", "+\t\t\t* that LVIR_BOUNDS and LVIR_LABEL are identical when used with", "+\t\t\t* LVM_GETSUBITEMRECT, LVIR_BOUNDS can return a zero height.  The", "+\t\t\t* fix is to use LVIR_LABEL.", "+\t\t\t*/", "+\t\t\trect.left = getText ? OS.LVIR_LABEL : OS.LVIR_ICON;", "+\t\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, row, rect) == 0) {", "+\t\t\t\treturn new RECT ();", "+\t\t\t}", "+\t\t\tif (hasImage) {", "+\t\t\t\tif (getText && !getImage) {", "+\t\t\t\t\ticonRect.top = column;\t\t", "-\t\t\t\t\ticonRect.top = column;", "-\t\t\t\t\t\trect.left = iconRect.left;", "-\t\t\t\t\t\trect.right = Math.max (rect.right, iconRect.right);", "+\t\t\t\t\t\trect.left = iconRect.right + Table.INSET / 2;", "-\t\t\t\tif (column != 0) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Feature in Windows.  LVM_GETSUBITEMRECT returns an image width", "-\t\t\t\t\t* even when the subitem does not contain an image.  The fix is to", "-\t\t\t\t\t* adjust the rectangle to represent the area the table is drawing.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (images != null && images [column] != null) {", "-\t\t\t\t\t\tif (getText) {", "-\t\t\t\t\t\t\tRECT iconRect = new RECT ();", "-\t\t\t\t\t\t\ticonRect.left = OS.LVIR_ICON;", "-\t\t\t\t\t\t\ticonRect.top = column;\t\t", "-\t\t\t\t\t\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, row, iconRect) != 0) {", "-\t\t\t\t\t\t\t\trect.left = iconRect.right + Table.INSET / 2;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (getImage && !full) rect.right = rect.left;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tif (getImage && !getText) rect.right = rect.left;", "-\t\t\trect.left = rect.top = 0;", "+\t\t\trect.left = OS.LVIR_ICON;", "+\t\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, row, rect) == 0) {", "+\t\t\t\treturn new RECT ();", "+\t\t\t}", "+\t\t\tif (!hasImage) rect.right = rect.left;", "+\t\t\tif (getText) {", "+\t\t\t\tString string = column == 0 ? text : strings != null ? strings [column] : null;", "+\t\t\t\tif (string != null) {", "+\t\t\t\t\tRECT textRect = new RECT ();", "+\t\t\t\t\tTCHAR buffer = new TCHAR (parent.getCodePage (), string, false);", "+\t\t\t\t\tint flags = OS.DT_NOPREFIX | OS.DT_SINGLELINE | OS.DT_CALCRECT;", "+\t\t\t\t\tOS.DrawText (hDC, buffer, buffer.length (), textRect, flags);", "+\t\t\t\t\trect.right += textRect.right - textRect.left + Table.INSET * 3 + 1;", "+\t\t\t\t}", "+\t\t\t}", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d19db31489b789ea7c645c9f1ce58a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "d60307042554a2ad80509163fd1d15e5566b488d", "commitAfterChange": "501cddef55d98c472a410dbb933c0adba1cf9644", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " RECT getBounds (int index, boolean getText, boolean getImage, boolean full)", "signatureAfterChange": " RECT getBounds (int index, boolean getText, boolean getImage, boolean fullText, boolean fullImage, boolean clip, int hDC)", "diff": ["-//TODO - take into account grid (add boolean arg) to damage less during redraw", "+//TODO - take into account grid (add boolean arg) to damage less during redraw", "+RECT getBounds (int index, boolean getText, boolean getImage, boolean fullText, boolean fullImage, boolean clip, int hDC) {", "+\tint hwnd = parent.handle; ", "-\t\tint hwnd = parent.handle;", "-\t\tint hwnd = parent.handle; ", "-\t\tif (getImage) {", "+\t\tif (getImage && !fullImage) {", "-\t\tif (getText && hwndHeader != 0 && columnCount != 0) {", "-\t\t\tRECT headerRect = new RECT ();", "-\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, headerRect) == 0) {", "-\t\t\t\treturn new RECT ();", "-\t\t\t}", "-\t\t\tif (full || headerRect.right < rect.right) {", "-\t\t\t\trect.right = headerRect.right;", "+\t\tif (fullText || fullImage || clip) {", "+\t\t\tif (hwndHeader != 0 && columnCount != 0) {", "+\t\t\t\tRECT headerRect = new RECT ();", "+\t\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, headerRect) == 0) {", "+\t\t\t\t\treturn new RECT ();", "+\t\t\t\t}", "+\t\t\t\tif (fullText) rect.right = headerRect.right;", "+\t\t\t\tif (fullImage) rect.left = headerRect.left;", "+\t\t\t\tif (clip && headerRect.right < rect.right) {", "+\t\t\t\t\trect.right = headerRect.right;", "+\t\t\t\t}", "-\t\tint hwnd = parent.handle;", "-\t\trect.right = headerRect.right;", "-\t\tif (!getText || !getImage) {", "+\t\tif (fullText) {", "+\t\t\trect.right = headerRect.right;", "+\t\t} else {", "+\t\t\trect.right = headerRect.left;", "-\t\t\t\tif (getImage) {", "-\t\t\t\t\trect.right = Math.min (rect.left + size.x, rect.right);", "-\t\t\t\t} else {", "-\t\t\t\t\trect.left = Math.min (rect.left + size.x, rect.right);", "+\t\t\t\trect.right += size.x;", "+\t\t\t}", "+\t\t\tif (getText) {", "+\t\t\t\tString string = index == 0 ? text : strings != null ? strings [index] : null;", "+\t\t\t\tif (string != null) {", "+\t\t\t\t\tRECT textRect = new RECT ();", "+\t\t\t\t\tTCHAR buffer = new TCHAR (parent.getCodePage (), string, false);", "+\t\t\t\t\tint flags = OS.DT_NOPREFIX | OS.DT_SINGLELINE | OS.DT_CALCRECT;", "+\t\t\t\t\tint hNewDC = hDC, hFont = 0;", "+\t\t\t\t\tif (hDC == 0) {", "+\t\t\t\t\t\thNewDC = OS.GetDC (hwnd);", "+\t\t\t\t\t\thFont = cellFont != null ? cellFont [index] : -1;", "+\t\t\t\t\t\tif (hFont == -1) hFont = font;", "+\t\t\t\t\t\tif (hFont == -1) hFont = OS.SendMessage (hwnd, OS.WM_GETFONT, 0, 0);", "+\t\t\t\t\t\thFont = OS.SelectObject (hNewDC, hFont);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.DrawText (hNewDC, buffer, buffer.length (), textRect, flags);", "+\t\t\t\t\tif (hDC == 0) {", "+\t\t\t\t\t\tOS.SelectObject (hNewDC, hFont);", "+\t\t\t\t\t\tOS.ReleaseDC (hwnd, hNewDC);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (getImage) {", "+\t\t\t\t\t\trect.right += textRect.right - textRect.left + Tree.INSET * 3;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\trect.left = rect.right + Tree.INSET;", "+\t\t\t\t\t\trect.right = rect.left + (textRect.right - textRect.left) + Tree.INSET;", "+\t\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (getImage) rect.right = rect.left;", "+\t\t\t}", "+\t\t\tif (clip && headerRect.right < rect.right) {", "+\t\t\t\trect.right = headerRect.right;"]}], "num": 40114}
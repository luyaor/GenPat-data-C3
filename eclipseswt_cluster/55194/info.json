{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7c7fc3eb02eb2da833e3de2c010da9b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5935205bcdada4e814fdf84b4c80d0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "8fde8fcbb781a32691eb37121e23a20db53e1ea6", "commitAfterChange": "9780776c5c4d623ed8c4e9ba64b74a19e324a8b3", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  public void test_setSelectionI()", "signatureAfterChange": "  public void test_setSelectionI()", "diff": ["-\tassertEquals(list.getFocusIndex(), 2);", "-\tassertEquals(list.getFocusIndex(), 0);", "-\tassertEquals(list.getFocusIndex(), number - 1);", "-\tassertEquals(list.getFocusIndex(), number - 1);", "-\tif (fCheckSWTPolicy) {", "-\t\tlist.removeAll();", "+\tlist.removeAll();", "-\t\tlist.setSelection(-2);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "+\tlist.setSelection(-2);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "-\t\tlist.setSelection(0);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "+\tlist.setSelection(0);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "-\t\tlist.setSelection(-1);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "-\t}", "+\tlist.setSelection(-1);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "-\tassertEquals(list.getFocusIndex(), 2);", "-\tassertEquals(list.getFocusIndex(), 0);", "-\tassertEquals(list.getFocusIndex(), number - 1);", "-\tif (fCheckSWTPolicy) {", "-\t\tlist.removeAll();", "+\tlist.removeAll();", "-\t\tlist.setSelection(0);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "+\tlist.setSelection(0);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "-\t\tlist.setSelection(-1);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "+\tlist.setSelection(-1);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "-\t\tlist.setSelection(-2);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "-\t}", "+\tlist.setSelection(-2);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073a1637bd3c3d340dee7b19f746d640", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "60e663aa8c39b991d85726c47c8d238279b12f59", "commitAfterChange": "517f6485c2e361c323310fea69335d678ad98328", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  public void test_removeII()", "signatureAfterChange": "  public void test_removeII()", "diff": ["-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(-number, number + 100);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(-number, number + 100);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-\t//should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(2, 100);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t} ", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(new TableItem[] {items[0], items[1]}, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(2, 100);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(2, number);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(new TableItem[] {items[0], items[1]}, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(2, number);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(-20, -10);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t} ", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(items, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(-20, -10);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(20, 40);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(items, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(20, 40);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttable.remove(200, 40);", "-\t\tassertEquals(items, table.getItems());", "-\t}", "+\ttable.remove(200, 40);", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(-10, 2);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(-10, 2);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(1, 200);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(1, table.getItemCount());", "-\t\tassertEquals(new TableItem[] {items[3]}, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(1, 200);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(number - 3, table.getItemCount());", "+\tassertEquals(new TableItem[] {items[3], items[4]}, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(number, number);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(number, number);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(number, number + 100);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(number, number + 100);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-"]}], "num": 55194}
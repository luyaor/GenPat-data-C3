{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6be825f7c9f393c19c3d03acdcc929db", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1c97c30aaac13800272f1802d9011f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java", "commitBeforeChange": "73710d9f09ebcac462a9041bda5cf1073ef9e063", "commitAfterChange": "7fbb9d1596162f9ad75a1391db3ebadea0726a58", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 35, "signatureBeforeChange": " private void createDropTarget()", "signatureAfterChange": "  private void createDropTarget()", "diff": ["-}", "-private void createDropTarget() {", "-\tDropTarget myDropTarget = dropTarget;", "-\tdropTarget = null;", "-\tif (myDropTarget != null) myDropTarget.dispose();", "-\t", "-\tif (!dropTargetRegistered.getSelection()) return;", "-", "-\tTransfer[] types = null;", "-\tif (targetTypeString[1].getSelection() && targetTypePixmap[1].getSelection()) {", "-\t\toutputMsg(\"Target types: TextTransfer, ImageTransfer\");", "-\t\ttypes = new Transfer[] {TextTransfer.getInstance(), ImageTransfer.getInstance()};", "-\t}", "-\telse if (targetTypePixmap[1].getSelection()) {", "-\t\toutputMsg(\"Target types: ImageTransfer\");", "-\t\ttypes = new Transfer[] {ImageTransfer.getInstance()};", "-\t}", "-\telse { // if (targetTypeString[1].getSelection()) {", "-\t\toutputMsg(\"Target types: TextTransfer\");", "-\t\ttargetTypeString[1].setSelection(true);", "-\t\ttypes = new Transfer[] {TextTransfer.getInstance()};", "-\t}", "-\t", "-\tint operations = 0;", "-\tif (opsMove[1].getSelection()) operations |= DND.DROP_MOVE;", "-\tif (opsCopy[1].getSelection()) operations |= DND.DROP_COPY;", "-\tif (opsLink[1].getSelection()) operations |= DND.DROP_LINK;", "-", "-\toutputMsg(\"Target ops: \" + operations);", "-\t", "-\tdropTarget = new DropTarget(dropTargetCtrl, operations);", "-\tdropTarget.setTransfer(types);", "-\tdropTarget.addDropListener (new DropTargetListener() {", "-\t\tpublic void dragEnter(DropTargetEvent event) {", "-\t\t\toutputMsg(\"dragEnter\");", "-\t\t}", "-\t\tpublic void dragOver(DropTargetEvent event) {", "-\t\t\toutputMsg(\"dragOver\");", "-\t\t}", "-\t\tpublic void dragLeave(DropTargetEvent event) {", "-\t\t\toutputMsg(\"dragLeave\");", "-\t\t}", "-\t\tpublic void dragOperationChanged(DropTargetEvent event) {", "-\t\t\toutputMsg(\"dragOperationChanged\");", "-\t\t}", "-\t\tpublic void dropAccept(DropTargetEvent event) {", "-\t\t\toutputMsg(\"dragAccept\");", "-\t\t}", "-\t\tpublic void drop(DropTargetEvent event) {", "-\t\t\toutputMsg(\"drop\");", "-\t\t\tif (event.data == null) {", "-\t\t\t\tevent.detail = DND.DROP_NONE;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tsetDropTargetData(event.data);", "-\t\t}", "-\t});", "-}", "+", "+private void createDropTarget() {", "+\tif (dropTarget != null) dropTarget.dispose();", "+\tdropTarget = new DropTarget(dropControl, dropOperation);", "+\tdropTarget.setTransfer(dropTypes);", "+\tdropTarget.addDropListener(new DropTargetListener() {", "+\t\tpublic void dragEnter(DropTargetEvent event) {", "+\t\t\tdropConsole.append(\">>dragEnter\\n\");", "+\t\t\tdropConsole.append(event+\"\\n\");", "+\t\t\tif (event.detail == DND.DROP_DEFAULT) {", "+\t\t\t\tevent.detail = dropDefaultOperation;", "+\t\t\t}", "+\t\t}", "+\t\tpublic void dragLeave(DropTargetEvent event) {", "+\t\t\tdropConsole.append(\">>dragLeave\\n\");", "+\t\t\tdropConsole.append(event+\"\\n\");", "+\t\t}", "+\t\tpublic void dragOperationChanged(DropTargetEvent event) {", "+\t\t\tdropConsole.append(\">>dragOperationChanged\\n\");", "+\t\t\tdropConsole.append(event+\"\\n\");", "+\t\t\tif (event.detail == DND.DROP_DEFAULT) {", "+\t\t\t\tevent.detail = dropDefaultOperation;", "+\t\t\t}", "+\t\t}", "+\t\tpublic void dragOver(DropTargetEvent event) {", "+\t\t\tdropConsole.append(\">>dragOver\\n\");", "+\t\t\tdropConsole.append(event+\"\\n\");", "+\t\t}", "+\t\tpublic void drop(DropTargetEvent event) {", "+\t\t\tdropConsole.append(\">>drop\\n\");", "+\t\t\tdropConsole.append(event+\"\\n\");", "+\t\t\tString[] strings = null;", "+\t\t\tif (TextTransfer.getInstance().isSupportedType(event.currentDataType)) {", "+\t\t\t\tstrings = new String[]{(String)event.data};", "+\t\t\t}", "+\t\t\tif (RTFTransfer.getInstance().isSupportedType(event.currentDataType)) {", "+\t\t\t\tstrings = new String[]{(String)event.data};", "+\t\t\t}", "+\t\t\tif (FileTransfer.getInstance().isSupportedType(event.currentDataType)) {", "+\t\t\t\tstrings = (String[])event.data;", "+\t\t\t}", "+\t\t\tif (strings == null || strings.length == 0) {", "+\t\t\t\tdropConsole.append(\"!!Invalid data dropped\");", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tswitch(dropControlType) {", "+\t\t\t\tcase BUTTON_CHECK:", "+\t\t\t\tcase BUTTON_TOGGLE:", "+\t\t\t\tcase BUTTON_RADIO: {", "+\t\t\t\t\tButton b = (Button)dropControl;", "+\t\t\t\t\tb.setText(strings[0]);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase TABLE: {", "+\t\t\t\t\tTable table = (Table)dropControl;", "+\t\t\t\t\tfor(int i = 0; i < strings.length; i++) {", "+\t\t\t\t\t\tTableItem item = new TableItem(table, SWT.NONE);", "+\t\t\t\t\t\titem.setText(0, strings[i]);", "+\t\t\t\t\t\titem.setText(1, \"dropped item\");", "+\t\t\t\t\t}", "+\t\t\t\t\tTableColumn[] columns = table.getColumns();", "+\t\t\t\t\tfor (int i = 0; i < columns.length; i++) {", "+\t\t\t\t\t\tcolumns[i].pack();", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase TEXT: {", "+\t\t\t\t\tText text = (Text)dropControl;", "+\t\t\t\t\tfor(int i = 0; i < strings.length; i++) {", "+\t\t\t\t\t\ttext.append(strings[i]+\"\\n\");", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase TREE: {", "+\t\t\t\t\tTree tree = (Tree)dropControl;", "+\t\t\t\t\tfor(int i = 0; i < strings.length; i++) {", "+\t\t\t\t\t\tTreeItem item = new TreeItem(tree, SWT.NONE);", "+\t\t\t\t\t\titem.setText(strings[i]);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase CANVAS: {", "+\t\t\t\t\tdropControl.setData(\"STRINGS\", strings);", "+\t\t\t\t\tdropControl.redraw();", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase LABEL: {", "+\t\t\t\t\tLabel label = (Label)dropControl;", "+\t\t\t\t\tlabel.setText(strings[0]);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase LIST: {", "+\t\t\t\t\tList list = (List)dropControl;", "+\t\t\t\t\tfor(int i = 0; i < strings.length; i++) {", "+\t\t\t\t\t\tlist.add(strings[i]);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tdefault:", "+\t\t\t\t\tthrow new SWTError(SWT.ERROR_NOT_IMPLEMENTED);", "+\t\t\t}", "+\t\t}", "+\t\tpublic void dropAccept(DropTargetEvent event) {", "+\t\t\tdropConsole.append(\">>dropAccept\\n\");", "+\t\t\tdropConsole.append(event+\"\\n\");", "+\t\t}", "+\t});", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1d3f65aa41ed9f5605741add4f94140", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java", "commitBeforeChange": "73710d9f09ebcac462a9041bda5cf1073ef9e063", "commitAfterChange": "7fbb9d1596162f9ad75a1391db3ebadea0726a58", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 42, "signatureBeforeChange": " private void createDragSource()", "signatureAfterChange": "  private void createDragSource()", "diff": ["-}", "-private void createDragSource() {", "-\tDragSource myDragSource = dragSource;", "-\tdragSource = null;", "-\tif (myDragSource != null) myDragSource.dispose();", "-\t\t", "-\tif (!dragDetectedHooked.getSelection()) return;", "-", "-\tTransfer[] types = null;", "-\tif (targetTypeString[0].getSelection() && targetTypePixmap[0].getSelection()) {", "-\t\toutputMsg(\"Source types: TextTransfer, ImageTransfer\");", "-\t\ttypes = new Transfer[] {TextTransfer.getInstance(), ImageTransfer.getInstance()};", "-\t}", "-\telse if (targetTypePixmap[0].getSelection()) {", "-\t\toutputMsg(\"Source types: ImageTransfer\");", "-\t\ttypes = new Transfer[] {ImageTransfer.getInstance()};", "-\t}", "-\telse { //if (targetTypeString[0].getSelection()) {", "-\t\toutputMsg(\"Source types: TextTransfer\");", "-\t\ttargetTypeString[0].setSelection(true);", "-\t\ttypes = new Transfer[] {TextTransfer.getInstance()};", "-\t}", "-\t", "-\tint operations = 0;", "-\tif (opsMove[0].getSelection()) operations |= DND.DROP_MOVE;", "-\tif (opsCopy[0].getSelection()) operations |= DND.DROP_COPY;", "-\tif (opsLink[0].getSelection()) operations |= DND.DROP_LINK;", "-", "-\toutputMsg(\"Source ops: \" + operations);", "-\t", "-\tdragSource = new DragSource (dragSourceCtrl, operations);", "-\tdragSource.setTransfer(types);", "-\tdragSource.addDragListener(new DragSourceListener () {", "-\t\tpublic void dragStart(DragSourceEvent e) {", "-\t\t\toutputMsg(\"dragStart\");", "-\t\t}", "-\t\tpublic void dragSetData(DragSourceEvent e) {", "-\t\t\toutputMsg(\"dragSetData\");", "-\t\t\te.data = getDragSourceData(e.dataType);", "-\t\t}", "-\t\tpublic void dragFinished(DragSourceEvent e) {", "-\t\t\toutputMsg(\"dragFinished\");", "-\t\t\tif (e.detail == DND.DROP_MOVE)", "-\t\t\t\tclearDragSourceData();", "-\t\t}", "-\t});\t", "-}", "+", "+private void createDragSource() {", "+\tif (dragSource != null) dragSource.dispose();", "+\tdragSource = new DragSource(dragControl, dragOperation);", "+\tdragSource.setTransfer(dragTypes);", "+\tdragSource.addDragListener(new DragSourceListener() {", "+\t\tpublic void dragFinished(org.eclipse.swt.dnd.DragSourceEvent event) {", "+\t\t\tdragConsole.append(\">>dragFinished\\n\");", "+\t\t\tdragConsole.append(event+\"\\n\");", "+\t\t\tdragData = null;", "+\t\t\tif (event.detail == DND.DROP_MOVE) {", "+\t\t\t\tswitch(dragControlType) {", "+\t\t\t\t\tcase BUTTON_CHECK:", "+\t\t\t\t\tcase BUTTON_TOGGLE:", "+\t\t\t\t\tcase BUTTON_RADIO: {", "+\t\t\t\t\t\tButton b = (Button)dragControl;", "+\t\t\t\t\t\tb.setText(\"\");", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase TABLE: {", "+\t\t\t\t\t\tTable table = (Table)dragControl;", "+\t\t\t\t\t\tTableItem[] items = table.getSelection();", "+\t\t\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\t\t\titems[i].dispose();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase TEXT: {", "+\t\t\t\t\t\tText text = (Text)dragControl;", "+\t\t\t\t\t\ttext.clearSelection();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase TREE: {", "+\t\t\t\t\t\tTree tree = (Tree)dragControl;", "+\t\t\t\t\t\tTreeItem[] items = tree.getSelection();", "+\t\t\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\t\t\titems[i].dispose();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase CANVAS: {", "+\t\t\t\t\t\tdragControl.setData(\"STRINGS\", null);", "+\t\t\t\t\t\tdragControl.redraw();", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase LABEL: {", "+\t\t\t\t\t\tLabel label = (Label)dragControl;", "+\t\t\t\t\t\tlabel.setText(\"\");", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase LIST: {", "+\t\t\t\t\t\tList list = (List)dragControl;", "+\t\t\t\t\t\tint[] indices = list.getSelectionIndices();", "+\t\t\t\t\t\tlist.remove(indices);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tpublic void dragSetData(org.eclipse.swt.dnd.DragSourceEvent event) {", "+\t\t\tdragConsole.append(\">>dragSetData\\n\");", "+\t\t\tdragConsole.append(event+\"\\n\");", "+\t\t\tif (TextTransfer.getInstance().isSupportedType(event.dataType)) {", "+\t\t\t\tif (dragData instanceof String) {", "+\t\t\t\t\tevent.data = dragData; ", "+\t\t\t\t}else if (dragData instanceof String[]) {", "+\t\t\t\t\tString[] strings = (String[])dragData;", "+\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\tfor (int i = 0; i < strings.length; i++) {", "+\t\t\t\t\t\tbuffer.append(strings[i]);", "+\t\t\t\t\t\tbuffer.append(\"\\n\");", "+\t\t\t\t\t}", "+\t\t\t\t\tevent.data = buffer.toString();", "+\t\t\t\t} else {", "+\t\t\t\t\tevent.data = \"a string for transfer\";", "+\t\t\t\t}\t\t", "+\t\t\t}", "+\t\t\tif (RTFTransfer.getInstance().isSupportedType(event.dataType)) {", "+\t\t\t\tevent.data = \"{\\\\rtf1{\\\\colortbl;\\\\red255\\\\green0\\\\blue0;}\\\\uc1\\\\b\\\\i Hello World}\";", "+\t\t\t}", "+\t\t\tif (FileTransfer.getInstance().isSupportedType(event.dataType)) {", "+\t\t\t\tString[] files = new String[] {\"a.txt\", \"b.txt\", \"c.txt\"};", "+\t\t\t\tevent.data = files;", "+\t\t\t}", "+\t\t\t", "+\t\t}", "+\t\tpublic void dragStart(org.eclipse.swt.dnd.DragSourceEvent event) {", "+\t\t\tdragConsole.append(\">>dragStart\\n\");", "+\t\t\tdragConsole.append(event+\"\\n\");", "+\t\t\tswitch(dragControlType) {", "+\t\t\t\tcase BUTTON_CHECK:", "+\t\t\t\tcase BUTTON_TOGGLE:", "+\t\t\t\tcase BUTTON_RADIO: {", "+\t\t\t\t\tButton b = (Button)dragControl;", "+\t\t\t\t\tdragData = b.getSelection() ? \"true\" : \"false\";", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase TABLE: {", "+\t\t\t\t\tTable table = (Table)dragControl;", "+\t\t\t\t\tTableItem[] items = table.getSelection();", "+\t\t\t\t\tif (items.length == 0) {", "+\t\t\t\t\t\tevent.doit = false;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tString[] strings = new String[items.length];", "+\t\t\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\t\t\tstrings[i] = items[i].getText();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdragData = strings;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase TEXT: {", "+\t\t\t\t\tText text = (Text)dragControl;", "+\t\t\t\t\tString s = text.getSelectionText();", "+\t\t\t\t\tif (s.length() == 0) {", "+\t\t\t\t\t\tevent.doit = false;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdragData = s;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase TREE: {", "+\t\t\t\t\tTree tree = (Tree)dragControl;", "+\t\t\t\t\tTreeItem[] items = tree.getSelection();", "+\t\t\t\t\tif (items.length == 0) {", "+\t\t\t\t\t\tevent.doit = false;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tString[] strings = new String[items.length];", "+\t\t\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\t\t\tstrings[i] = items[i].getText();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdragData = strings;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase CANVAS: {", "+\t\t\t\t\tString[] strings = (String[])dragControl.getData(\"STRINGS\");", "+\t\t\t\t\tif (strings == null || strings.length == 0) {", "+\t\t\t\t\t\tevent.doit = false;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdragData = strings;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase LABEL: {", "+\t\t\t\t\tLabel label = (Label)dragControl;", "+\t\t\t\t\tString string = label.getText();", "+\t\t\t\t\tif (string.length() == 0) {", "+\t\t\t\t\t\tevent.doit = false;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdragData = string;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase LIST: {", "+\t\t\t\t\tList list = (List)dragControl;", "+\t\t\t\t\tString[] selection = list.getSelection();", "+\t\t\t\t\tif (selection.length == 0) {", "+\t\t\t\t\t\tevent.doit = false;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdragData = selection;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tdefault:", "+\t\t\t\t\tthrow new SWTError(SWT.ERROR_NOT_IMPLEMENTED);", "+\t\t\t}", "+\t\t}", "+\t});", "+}"]}], "num": 52637}
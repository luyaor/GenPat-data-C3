{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "809b9aad379cf418e3ecc11b5506d39a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e89af218c0e21f348fdbeca2bdb2ac5d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 4, "signatureBeforeChange": " String getTranslatedCharSet (FontData fontData)", "signatureAfterChange": "  int fontProc (int nextHandler, int theEvent, int userData)", "diff": ["- */", "-String getTranslatedCharSet (FontData fontData) {", "-\tString characterSet = fontData.characterSetRegistry;", "-\tString translatedCharSet = null;", "-", "-\tif (characterSet.startsWith (PREFIX_ISO8859)) {", "-\t\tint charSetName = 1;", "-\t\ttry {", "-\t\t\tcharSetName = Integer.valueOf (fontData.characterSetName).intValue ();", "-\t\t} catch (NumberFormatException e) {", "-\t\t\t/*", "-\t\t\t * This block is purposely left empty since a default", "-\t\t\t * value is already specified above.", "-\t\t\t */", "-\t\t}", "-", "-\t\tcharacterSet += \"-\" + charSetName;", "-\t\ttranslatedCharSet = ISO_CHARSETS [charSetName];", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_ISO646)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_ASCII\");", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_UNICODE)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_Unicode\");", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_JAPANESE)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_Japanese\");", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_SIMPLIFIEDCHINESE)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_SimplifiedChinese\");", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_TRADITIONALCHINESE)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_TraditionalChinese\");", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_KOREAN)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_Korean\");", "-\t}", "-\tif (translatedCharSet != null) {", "-\t\ttranslatedCharSet += \" (\" + characterSet + ')';", "-\t}", "-\telse {", "-\t\ttranslatedCharSet = characterSet;", "-\t}", "-\treturn translatedCharSet;", "-}", "+int fontProc (int nextHandler, int theEvent, int userData) {", "+\tint kind = OS.GetEventKind (theEvent);", "+\tswitch (kind) {", "+\t\tcase OS.kEventFontPanelClosed:", "+\t\t\topen = false;", "+\t\t\tbreak;", "+\t\tcase OS.kEventFontSelection:", "+\t\t\tif (fontData == null) fontData = new FontData();", "+\t\t\tshort [] fontFamily = new short [1];", "+\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamFMFontFamily, OS.typeSInt16, null, 2, null, fontFamily) == OS.noErr) {", "+\t\t\t\tbyte[] buffer = new byte[256];", "+\t\t\t\tOS.FMGetFontFamilyName(fontFamily [0], buffer);", "+\t\t\t\tint length = buffer[0] & 0xFF;", "+\t\t\t\tchar[] chars = new char[length];", "+\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\tchars[i]= (char)buffer[i+1];", "+\t\t\t\t}", "+\t\t\t\tfontData.setName (new String(chars));", "+\t\t\tshort [] fontStyle = new short [1];", "+\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamFMFontStyle, OS.typeSInt16, null, 2, null, fontStyle) == OS.noErr) {", "+\t\t\t\tint style = SWT.NORMAL;", "+\t\t\t\tif ((fontStyle [0] & OS.bold) != 0) style |= SWT.BOLD;", "+\t\t\t\tif ((fontStyle [0] & OS.italic) != 0) style |= SWT.ITALIC;", "+\t\t\t\tfontData.setStyle (style);", "+\t\t\tshort [] fontSize = new short [1];", "+\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamFMFontSize, OS.typeSInt16, null, 2, null, fontSize) == OS.noErr) {", "+\t\t\t\tfontData.setHeight (fontSize [0]);", "+\t\t\t}", "+\t\t\t// NEEDS WORK - color not supported in native dialog for Carbon", "+\t\t\tRGBColor color = new RGBColor ();", "+\t\t\tint [] actualSize = new int [1];", "+\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamFontColor, OS.typeRGBColor, null, RGBColor.sizeof, actualSize, color) == OS.noErr) {", "+\t\t\t\tint red = (color.red >> 8) & 0xFF;", "+\t\t\t\tint green = (color.green >> 8) & 0xFF;", "+\t\t\t\tint blue =\t(color.blue >> 8) & 0xFF;", "+\t\t\t\trgb = new RGB(red, green, blue);", "+\t\t\t}", "+\t\t\tbreak;", "+\treturn OS.noErr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30526ce5d3af60c90d8d86afc9492a60", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "867abffe88bcfc12b27acfa4038daa32e8638bf0", "commitAfterChange": "fb8beb1308d7af9ec8f74d170f3f533320d57a80", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tif ( !isSupportedType(transferData) ||  transferData.pValue == 0 ) return null;", "-\tint size = transferData.format * transferData.length / 8;", "-\tif (size == 0) return null;", "-\t", "-\tbyte[] buffer = new byte[size];", "-\tOS.memmove(buffer, transferData.pValue, size);", "-\tchar[] chars = Converter.mbcsToWcs(null, buffer);", "-\tString string  = new String(chars);", "-\t// parse data and convert string to array of files", "-\tint start = string.indexOf(URI_LIST_PREFIX);", "-\tif (start == -1) return null;", "-\tstart += URI_LIST_PREFIX.length();", "+\tif ( !isSupportedType(transferData) ||  transferData.pValue == 0 ||  transferData.length <= 0 ) return null;", "+\tint length = transferData.length;", "+\tbyte[] temp = new byte[length];", "+\tOS.memmove(temp, transferData.pValue, length);", "+\tint[] files = new int[0];", "+\tint offset = 0;", "+\tfor (int i = 0; i < temp.length - 1; i++) {", "+\t\tif (temp[i] == '\\r' && temp[i+1] == '\\n') {", "+\t\t\tint size =  i - offset;", "+\t\t\tint file = OS.g_malloc(size + 1);", "+\t\t\tbyte[] fileBuffer = new byte[size + 1];", "+\t\t\tSystem.arraycopy(temp, offset, fileBuffer, 0, size);", "+\t\t\tOS.memmove(file, fileBuffer, size + 1);", "+\t\t\tint[] newFiles = new int[files.length + 1];", "+\t\t\tSystem.arraycopy(files, 0, newFiles, 0, files.length);", "+\t\t\tnewFiles[files.length] = file;", "+\t\t\tfiles = newFiles;", "+\t\t\toffset = i + 2;", "+\t\t}", "+\t}", "+\tif (offset < temp.length - 2) {", "+\t\tint size =  temp.length - offset;", "+\t\tint file = OS.g_malloc(size + 1);", "+\t\tbyte[] fileBuffer = new byte[size + 1];", "+\t\tSystem.arraycopy(temp, offset, fileBuffer, 0, size);", "+\t\tOS.memmove(file, fileBuffer, size + 1);", "+\t\tint[] newFiles = new int[files.length + 1];", "+\t\tSystem.arraycopy(files, 0, newFiles, 0, files.length);", "+\t\tnewFiles[files.length] = file;", "+\t\tfiles = newFiles;", "+\t}", "-\twhile (start < string.length()) { ", "-\t\tint end = string.indexOf(URI_LIST_SEPARATOR, start);", "-\t\tif (end == -1) end = string.length() - 1;", "-\t\tString fileName = string.substring(start, end);", "+\tfor (int i = 0; i < files.length; i++) {", "+\t\tint[] error = new int[1];", "+\t\tint localePtr = OS.g_filename_from_uri(files[i], null, error);", "+\t\tOS.g_free(files[i]);", "+\t\tif (error[0] != 0 || localePtr == 0) continue;", "+\t\tint utf8Ptr = OS.g_locale_to_utf8(localePtr, -1, null, null, error);", "+\t\tOS.g_free(localePtr);", "+\t\tif (error[0] != 0 || utf8Ptr == 0) continue;", "+\t\tint[] items_written = new int[1];", "+\t\tint utf16Ptr = OS.g_utf8_to_utf16(utf8Ptr, -1, null, items_written, null);", "+\t\tOS.g_free(utf8Ptr);", "+\t\tlength = items_written[0];", "+\t\tchar[] buffer = new char[length];", "+\t\tOS.memmove(buffer, utf16Ptr, length * 2);", "+\t\tOS.g_free(utf16Ptr);", "+\t\tString name = new String(buffer);", "-\t\tnewFileNames[fileNames.length] = fileName;", "+\t\tnewFileNames[fileNames.length] = name;", "-\t\tstart = string.indexOf(URI_LIST_PREFIX, end);", "-\t\tif (start == -1) break;", "-\t\tstart += URI_LIST_PREFIX.length();", "+\tif (fileNames.length == 0) return null;"]}], "num": 62948}
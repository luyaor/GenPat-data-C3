{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "578343b670a23d2016715cc0749d585a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6b3c5adae58853796277a41cda57aca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "4081902c239578f63f15203c525f876d179f2f59", "commitAfterChange": "6342d60ee241e531740db13f1e8f8d595ad76a9f", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "diff": ["-\tif ((state & CANVAS) != 0) {", "-\t\tif ((style & SWT.NO_REDRAW_RESIZE) == 0) {", "-\t\t\tif (hooks (SWT.Paint)) {", "-\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\tif (OS.IsWindowVisible (handle)) {", "+\t\tif ((state & CANVAS) != 0) {", "+\t\t\tif ((style & SWT.NO_REDRAW_RESIZE) == 0) {", "+\t\t\t\tif (hooks (SWT.Paint)) {", "+\t\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "+\t\t\tif (findThemeControl () != null) {", "+\t\t\t\tint hwndChild = OS.GetWindow (handle, OS.GW_CHILD);", "+\t\t\t\twhile (hwndChild != 0) {", "+\t\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "+\t\t\t\t\tOS.RedrawWindow (hwndChild, null, 0, flags);", "+\t\t\t\t\thwndChild = OS.GetWindow (hwndChild, OS.GW_HWNDNEXT);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27fc3faf98a4920690abd52ed6b4de10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "a66bb9f02c6027fb784d7bb5f0fe1eb781c47d5c", "commitAfterChange": "697ec77b530d7279923dde47e57c1da432e0b57b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\tif (OS.IsWinNT && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "+\tboolean alphaBlendSupport = OS.IsWinNT && OS.WIN32_VERSION >= OS.VERSION(4, 10);", "+\tboolean isPrinter = OS.GetDeviceCaps(handle, OS.TECHNOLOGY) == OS.DT_RASPRINTER;", "+\tif (alphaBlendSupport && isPrinter) {", "+\t\tint caps = OS.GetDeviceCaps(handle, OS.SHADEBLENDCAPS);", "+\t\tif (caps != 0) {", "+\t\t\tif (srcImage.alpha != -1) {", "+\t\t\t\talphaBlendSupport = (caps & OS.SB_CONST_ALPHA) != 0;", "+\t\t\t} else {", "+\t\t\t\talphaBlendSupport = (caps & OS.SB_PIXEL_ALPHA) != 0;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (alphaBlendSupport) {", "+\t* ", "+\t* Note that this also fails when drawing to a printer.", "-\tif ((OS.IsWinCE && (destWidth > srcWidth || destHeight > srcHeight)) || (!OS.IsWinNT && !OS.IsWinCE)) {", "+\tif (isPrinter || (OS.IsWinCE && (destWidth > srcWidth || destHeight > srcHeight)) || (!OS.IsWinNT && !OS.IsWinCE)) {"]}], "num": 3274}
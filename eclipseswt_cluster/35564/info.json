{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0325629424b10f90b92de999d1286d6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5dfc8b6c8393a812054873f0c4c53be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "c56e9ac7b86cc3847283a3523f5a7d23cfe70b9d", "commitAfterChange": "cb8608474cdff09f829b2949b3e04358cf3efe38", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void pack ()", "signatureAfterChange": " public void pack ()", "diff": ["-\tparent.ignoreResize = true;", "-\tparent.unsubclass ();", "-\tif ((parent.style & SWT.VIRTUAL) != 0) {", "+\tboolean oldIgnoreRezize = parent.ignoreResize;", "+\tparent.ignoreResize = true;", "+\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);", "+\tint columnWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "+\t/*", "+\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "+\t* where each item has I_IMAGECALLBACK but there are no images in the", "+\t* table, the size computed by LVM_SETCOLUMNWIDTH is too small for the", "+\t* first column, causing long items to be clipped with '...'.  The fix", "+\t* is to increase the value by a small amount. ", "+\t*/", "+\tif (index == 0 && parent.imageList == null) columnWidth += 2;", "+\tif (headerWidth > columnWidth) {", "-\t\t\t* insert and remove a temporary last column for the duration", "-\t\t\t* of LVM_SETCOLUMNWIDTH.", "+\t\t\t* resize the table to be small, set the column width and then", "+\t\t\t* restor the table to its original size.", "+\t\t\tRECT rect = null;", "-\t\t\t\tLVCOLUMN lvColumn = new LVCOLUMN ();", "-\t\t\t\tlvColumn.mask = OS.LVCF_WIDTH;", "-\t\t\t\tOS.SendMessage (hwnd, OS.LVM_INSERTCOLUMN, index + 1, lvColumn);", "+\t\t\t\trect = new RECT ();", "+\t\t\t\tOS.GetWindowRect (hwnd, rect);", "+\t\t\t\tOS.UpdateWindow (hwnd);", "+\t\t\t\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOREDRAW | OS.SWP_NOZORDER;", "+\t\t\t\tSetWindowPos (hwnd, 0, 0, 0, 0, rect.bottom - rect.top, flags);", "-\t\t\t\tOS.SendMessage (hwnd, OS.LVM_DELETECOLUMN, index + 1, 0);", "+\t\t\t\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOZORDER;", "+\t\t\t\tSetWindowPos (hwnd, 0, 0, 0, rect.right - rect.left, rect.bottom - rect.top, flags);", "-\t\t}\t\t", "+\t\t}", "-\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);", "-\t\tint columnWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "-\t\t/*", "-\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "-\t\t* where each item has I_IMAGECALLBACK but there are no images in the", "-\t\t* table, the size computed by LVM_SETCOLUMNWIDTH is to small for the", "-\t\t* first column, causing long items to be clipped with '...'.  The fix", "-\t\t* is to increase the value by a small amount. ", "-\t\t*/", "-\t\tif (index == 0 && parent.imageList == null) columnWidth += 2;", "-\t\tif (headerWidth > columnWidth) {", "-\t\t\tif (image == null) {", "-\t\t\t\t/*", "-\t\t\t\t* Feature in Windows.  When LVSCW_AUTOSIZE_USEHEADER is used", "-\t\t\t\t* with LVM_SETCOLUMNWIDTH to resize the last column, the last", "-\t\t\t\t* column is expanded to fill the client area.  The fix is to", "-\t\t\t\t* insert and remove a temporary last column for the duration", "-\t\t\t\t* of LVM_SETCOLUMNWIDTH.", "-\t\t\t\t*/", "-\t\t\t\tboolean fixWidth = index == parent.getColumnCount () - 1;", "-\t\t\t\tif (fixWidth) {", "-\t\t\t\t\tLVCOLUMN lvColumn = new LVCOLUMN ();", "-\t\t\t\t\tlvColumn.mask = OS.LVCF_WIDTH;", "-\t\t\t\t\tOS.SendMessage (hwnd, OS.LVM_INSERTCOLUMN, index + 1, lvColumn);", "-\t\t\t\t}", "-\t\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE_USEHEADER);", "-\t\t\t\tif (fixWidth) {", "-\t\t\t\t\tOS.SendMessage (hwnd, OS.LVM_DELETECOLUMN, index + 1, 0);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, headerWidth);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (index == 0) {", "-\t\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, columnWidth);", "-\t\t\t}", "+\t\tif (index == 0) {", "+\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, columnWidth);", "-\tparent.subclass ();", "-\tparent.ignoreResize = false;", "+\tparent.ignoreResize = oldIgnoreRezize;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "889a534856d63f2d3efa3fa1cb174375", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "db5070f4a4104c5e47a8cd2bdd5b5f06b11fcd6f", "commitAfterChange": "ed00985c99474f1ccbc7dee6f3b569d40159cdfc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void pack ()", "signatureAfterChange": " public void pack ()", "diff": ["-\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\theaderWidth += Table.HEADER_EXTRA;", "-\t}", "+\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) headerWidth += Table.HEADER_EXTRA;", "-\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);", "-\tint columnWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "-\tif (index == 0) {", "-\t\t/*", "-\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "-\t\t* where each item has I_IMAGECALLBACK but there are no images in the", "-\t\t* table, the size computed by LVM_SETCOLUMNWIDTH is too small for the", "-\t\t* first column, causing long items to be clipped with '...'.  The fix", "-\t\t* is to increase the column width by a small amount.", "-\t\t*/", "-\t\tif (parent.imageList == null) columnWidth += 2;", "-\t\t/*", "-\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "-\t\t* for a table with a state image list, the column is width does not", "-\t\t* include space for the state icon.  The fix is to increase the column", "-\t\t* width by the width of the image list.", "-\t\t*/", "-\t\tif ((parent.style & SWT.CHECK) != 0) {", "-\t\t\tint hStateList = OS.SendMessage (hwnd, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);", "-\t\t\tif (hStateList != 0) {", "-\t\t\t\tint [] cx = new int [1], cy = new int [1];", "-\t\t\t\tOS.ImageList_GetIconSize (hStateList, cx, cy);", "-\t\t\t\tcolumnWidth += cx [0];", "+\tint columnWidth = 0;", "+\tif (parent.hooks (SWT.MeasureItem)) {", "+\t\tRECT headerRect = new RECT ();", "+\t\tint hwndHeader = OS.SendMessage (hwnd, OS.LVM_GETHEADER, 0, 0);", "+\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, headerRect);", "+\t\tint hDC = OS.GetDC (hwnd);", "+\t\tint oldFont = 0, newFont = OS.SendMessage (hwnd, OS.WM_GETFONT, 0, 0);", "+\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\tint count = OS.SendMessage (hwnd, OS.LVM_GETITEMCOUNT, 0, 0);", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tTableItem item = parent.items [i];", "+\t\t\tif (item != null) {", "+\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [index] : -1;", "+\t\t\t\tif (hFont == -1) hFont = item.font;", "+\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "+\t\t\t\tRECT itemRect = item.getBounds (i, index, true, true, false, false, hDC);", "+\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\tGCData data = new GCData ();", "+\t\t\t\tdata.device = display;", "+\t\t\t\tdata.hFont = hFont;", "+\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.item = item;", "+\t\t\t\tevent.gc = gc;", "+\t\t\t\tevent.index = index;", "+\t\t\t\tevent.x = itemRect.left;", "+\t\t\t\tevent.y = itemRect.top;", "+\t\t\t\tevent.width = itemRect.right - itemRect.left;", "+\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "+\t\t\t\tparent.sendEvent (SWT.MeasureItem, event);", "+\t\t\t\tif (!parent.ignoreItemHeight) {", "+\t\t\t\t\tif (event.height > parent.getItemHeight ()) {", "+\t\t\t\t\t\tparent.setItemHeight (event.height);", "+\t\t\t\t\t}", "+\t\t\t\t\tparent.ignoreItemHeight = true;", "+\t\t\t\t}", "+\t\t\t\tevent.gc = null;", "+\t\t\t\tgc.dispose ();", "+\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\tif (isDisposed () || parent.isDisposed ()) break;", "+\t\t\t\tcolumnWidth = Math.max (columnWidth, event.x + event.width - headerRect.left);", "+\t\t\t}", "+\t\t}", "+\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\tOS.ReleaseDC (hwnd, hDC);", "+\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, columnWidth);", "+\t} else {", "+\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);", "+\t\tcolumnWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "+\t\tif (index == 0) {", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "+\t\t\t* where each item has I_IMAGECALLBACK but there are no images in the", "+\t\t\t* table, the size computed by LVM_SETCOLUMNWIDTH is too small for the", "+\t\t\t* first column, causing long items to be clipped with '...'.  The fix", "+\t\t\t* is to increase the column width by a small amount.", "+\t\t\t*/", "+\t\t\tif (parent.imageList == null) columnWidth += 2;", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "+\t\t\t* for a table with a state image list, the column is width does not", "+\t\t\t* include space for the state icon.  The fix is to increase the column", "+\t\t\t* width by the width of the image list.", "+\t\t\t*/", "+\t\t\tif ((parent.style & SWT.CHECK) != 0) {", "+\t\t\t\tint hStateList = OS.SendMessage (hwnd, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);", "+\t\t\t\tif (hStateList != 0) {", "+\t\t\t\t\tint [] cx = new int [1], cy = new int [1];", "+\t\t\t\t\tOS.ImageList_GetIconSize (hStateList, cx, cy);", "+\t\t\t\t\tcolumnWidth += cx [0];", "+\t\t\t\t}"]}], "num": 35564}
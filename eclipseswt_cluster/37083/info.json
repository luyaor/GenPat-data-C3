{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "675735643ec969c0779c04b37ef5b641", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46413f0df261928959d3616df8fbbe6f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "89dd18f56416766e9f25e99fa93a3cfdf736ff7e", "commitAfterChange": "0333c3cd6e1227d0185cdb60c13b053083d72b21", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public DropTarget(Control control, int style)", "signatureAfterChange": " public DropTarget(Control control, int style)", "diff": ["+\t", "+\tif (control instanceof Tree) {", "+\t\teffect = new TreeDragUnderEffect((Tree)control);", "+\t} else if (control instanceof Table) {", "+\t\teffect = new TableDragUnderEffect((Table)control);", "+\t} else {", "+\t\teffect = new NoDragUnderEffect(control);", "+\t}", "-//\tif (control instanceof Tree) {", "-//\t\teffect = new TreeDragUnderEffect((Tree)control);", "-//\t} else if (control instanceof Table) {", "-//\t\teffect = new TableDragUnderEffect((Table)control);", "-//\t} else {", "-//\t\teffect = new NoDragUnderEffect(control);", "-//\t}", "+\tdragOverHeartbeat = new Runnable() {", "+\t\tpublic void run() {", "+\t\t\tif (DropTarget.this.control.isDisposed() || dragOverStart == 0) return;", "+\t\t\tlong time = System.currentTimeMillis();", "+\t\t\tint delay = DRAGOVER_HYSTERESIS;", "+\t\t\tif (time >= dragOverStart) {", "+\t\t\t\t", "+\t\t\t\tint allowedOperations = dragOverEvent.operations;", "+\t\t\t\tTransferData[] allowedTypes = dragOverEvent.dataTypes;", "+\t\t\t\t", "+\t\t\t\tDNDEvent event = new DNDEvent();", "+\t\t\t\tevent.widget = DropTarget.this.control;", "+\t\t\t\tevent.time = (int)time;", "+\t\t\t\tevent.x = dragOverEvent.x;", "+\t\t\t\tevent.y = dragOverEvent.y;", "+\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;", "+\t\t\t\tevent.dataTypes  = allowedTypes;", "+\t\t\t\tevent.dataType  = selectedDataType;", "+\t\t\t\tevent.operations = allowedOperations;", "+\t\t\t\tevent.detail  = selectedOperation;", "+\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\teffect.show(event.feedback, event.x, event.y);", "+\t\t\t\tselectedDataType = null;", "+\t\t\t\tif (event.dataType != null) {", "+\t\t\t\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "+\t\t\t\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "+\t\t\t\t\t\t\tselectedDataType = event.dataType;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t", "+\t\t\t\tselectedOperation = DND.DROP_NONE;", "+\t\t\t\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "+\t\t\t\t\tselectedOperation = event.detail;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tdelay = (int)(dragOverStart - time);", "+\t\t\t}", "+\t\t\tDropTarget.this.control.getDisplay().timerExec(delay, dragOverHeartbeat);", "+\t\t}", "+\t};", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3724813593bbea3a9a8cb2a626c5d727", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "7a42cc92cd5348bbf0e0886e024fbfe78c23cc9c", "commitAfterChange": "40516ff612bb729c6404f266bc1aa1d071b16ca1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public DropTarget(Control control, int style)", "signatureAfterChange": " public DropTarget(Control control, int style)", "diff": ["-\tif (DropProc == null || DragProc == null || TransferProc == null)", "-\t\tDND.error(DND.ERROR_CANNOT_INIT_DROP);", "-\tif (control.getData(DROPTARGETID) != null)", "+\tif (DropProc == null || DragProc == null || TransferProc == null) {", "+\t}", "+\tif (control.getData(DROPTARGETID) != null) {", "+\t\tDND.error(DND.ERROR_CANNOT_INIT_DROP);", "+\t}", "+\t// Drag under effect", "+\t", "+\tdragOverHeartbeat = new Runnable() {", "+\t\tpublic void run() {", "+\t\t\tif (DropTarget.this.control.isDisposed() || dragOverStart == 0) return;", "+\t\t\tlong time = System.currentTimeMillis();", "+\t\t\tint delay = DRAGOVER_HYSTERESIS;", "+\t\t\tif (time < dragOverStart) {", "+\t\t\t\tdelay = (int)(dragOverStart - time);", "+\t\t\t} else {\t", "+\t\t\t\tint allowedOperations = dragOverEvent.operations;", "+\t\t\t\tTransferData[] allowedTypes = dragOverEvent.dataTypes;", "+\t\t\t\t//pass a copy of data types in to listeners in case application modifies it", "+\t\t\t\tTransferData[] dataTypes = new TransferData[allowedTypes.length];", "+\t\t\t\tSystem.arraycopy(allowedTypes, 0, dataTypes, 0, dataTypes.length);", "+\t", "+\t\t\t\tDNDEvent event = new DNDEvent();", "+\t\t\t\tevent.widget = dragOverEvent.widget;", "+\t\t\t\tevent.x = dragOverEvent.x;", "+\t\t\t\tevent.y = dragOverEvent.y;", "+\t\t\t\tevent.time = (int)time;", "+\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;", "+\t\t\t\tevent.dataTypes = dataTypes;", "+\t\t\t\tevent.dataType = selectedDataType;", "+\t\t\t\tevent.operations = dragOverEvent.operations;", "+\t\t\t\tevent.detail  = selectedOperation;", "+\t\t\t\t", "+\t\t\t\ttry {", "+\t\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\tevent.dataType = null;", "+\t\t\t\t\tevent.detail  = DND.DROP_NONE;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\teffect.show(event.feedback, event.x, event.y);", "+\t\t\t\t", "+\t\t\t\tselectedDataType = null;", "+\t\t\t\tif (event.dataType != null) {", "+\t\t\t\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "+\t\t\t\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "+\t\t\t\t\t\t\tselectedDataType = event.dataType;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tselectedOperation = DND.DROP_NONE;", "+\t\t\t\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "+\t\t\t\t\tselectedOperation = event.detail;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tDropTarget.this.control.getDisplay().timerExec(delay, dragOverHeartbeat);", "+\t\t}", "+\t};"]}], "num": 37083}
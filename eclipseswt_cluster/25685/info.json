{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "080ddad7b95b327f27fed3d81dfbd4d0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb92b5023b67e72499912ada5bc22de9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/FileFormat.java", "commitBeforeChange": "53384da893223313aba5640789830bdbd8f35283", "commitAfterChange": "af018cfe8d256e37fa7517b7cc46083bbd40d6b6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public static ImageData[] load(InputStream is, ImageLoader loader)", "signatureAfterChange": "\r \r public static ImageData[] load(InputStream is, ImageLoader loader)", "diff": ["+\r", "-\tif (GIFFileFormat.isGIFFile(stream)) {\r", "-\t\tfileFormat = new GIFFileFormat();\r", "-\t} else if (WinBMPFileFormat.isBMPFile(stream)) {\r", "-\t\tfileFormat = new WinBMPFileFormat();\r", "-\t} else if (WinICOFileFormat.isICOFile(stream)) {\r", "-\t\tfileFormat = new WinICOFileFormat();\r", "-\t} else if (JPEGFileFormat.isJPEGFile(stream)) {\r", "-\t\tfileFormat = new JPEGFileFormat();\r", "-\t} else if (PNGFileFormat.isPNGFile(stream)) {\r", "-\t\tfileFormat = new PNGFileFormat();\r", "-\t} else {\r", "-\t\tSWT.error(SWT.ERROR_UNSUPPORTED_FORMAT);\r", "+\tboolean isSupported = false;\t\r", "+\tfor (int i = 1; i < FORMATS.length; i++) {\r", "+\t\ttry {\r", "+\t\t\tClass clazz = Class.forName(FORMAT_PACKAGE + '.' + FORMATS[i] + FORMAT_SUFFIX);\r", "+\t\t\tfileFormat = (FileFormat) clazz.newInstance();\r", "+\t\t\tif (fileFormat.isFileFormat(stream)) {\r", "+\t\t\t\tisSupported = true;\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t} catch (Exception e) {\r", "+\t\t}\r", "+\tif (!isSupported) SWT.error(SWT.ERROR_UNSUPPORTED_FORMAT);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22f87bd7a9f8ee87df0528c6d9037070", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT PI/common_j2se/org/eclipse/swt/internal/Library.java", "commitBeforeChange": "ae0169d9f40be4353e4998ab730fe823da3229c8", "commitAfterChange": "0b2bc498e19b2d02f5cbe818335597e8c7628a23", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r static String getOS ()", "signatureAfterChange": "\r static String getPlatform ()", "diff": ["-static String getOS () {\r", "-\tString name = System.getProperty(\"os.name\");\r", "-\tif (name == null) return \"unknown\";\r", "-\tname = name.toLowerCase ();\r", "-\tif (name.indexOf (\"windows ce\") == 0) return \"win32-ce\";\r", "-\tif (name.indexOf (\"win\") == 0) return \"win32\";\r", "-\tif (name.indexOf (\"sun\") == 0) return \"solaris\";\r", "-\treturn name;\r", "+static String getPlatform () {\r", "+\tString [] names = new String [] {\"motif\", \"gtk\", \"win32\", \"photon\",};\r", "+\tfor (int i = 0; i < names.length; i++) {\r", "+\t\ttry {", "+\t\t\tClass.forName(\"org.eclipse.swt.internal.\"+names[i]+\".OS\");\r", "+\t\t\treturn names[i];\r", "+\t\t} catch (ClassNotFoundException e) {\r", "+\t\t}", "+\t}\r", "+\treturn \"unknown\";\r"]}], "num": 25685}
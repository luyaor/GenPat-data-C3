{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd0c913a776a9ec681046cb5d5106f85", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8092dbaee1c0afa5a1a46654dffcb53f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/ImageTransfer.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tif (!isSupportedType(transferData) || transferData.data == null)", "-\t\treturn null;", "-\tif (transferData.data.length == 0)", "-\t\treturn null;", "-\tbyte[] dataArr = transferData.data[0];", "-\tint size = dataArr.length;", "-\tint pictPtr = OS.NewPtr(size);", "-\tOS.memmove(pictPtr, dataArr, size);", "-\tint dataProvider = OS.CGDataProviderCreateWithData(0, pictPtr, size, 0);", "-\tif (dataProvider != 0) {", "-\t\tint pictDataRef = OS.QDPictCreateWithProvider(dataProvider);", "-\t\t// get bounds for the image", "-\t\tCGRect rect = new CGRect();", "-\t\tOS.QDPictGetBounds(pictDataRef, rect);", "-\t\tint width = (int) rect.width;", "-\t\tint height = (int) rect.height;", "-", "-\t\t/* Create the image */", "-\t\tint bpr = width * 4;", "-\t\tint dataSize = height * bpr;", "-\t\tint data = OS.NewPtr(dataSize);", "-\t\tif (data == 0)", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint provider = OS", "-\t\t\t\t.CGDataProviderCreateWithData(0, data, dataSize, 0);", "-\t\tif (provider == 0) {", "-\t\t\tOS.DisposePtr(data);", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t}", "-\t\tint colorspace = OS.CGColorSpaceCreateDeviceRGB();", "-\t\tif (colorspace == 0)", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint handle = OS.CGImageCreate(width, height, 8, 32, bpr,", "-\t\t\t\tcolorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null,", "-\t\t\t\ttrue, 0);", "-\t\tOS.CGDataProviderRelease(provider);", "-\t\tif (handle == 0) {", "-\t\t\tOS.DisposePtr(data);", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t}", "-\t\tint bpc = OS.CGImageGetBitsPerComponent(handle);", "-\t\tint context = OS.CGBitmapContextCreate(data, width, height, bpc,", "-\t\t\t\tbpr, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "-\t\tif (context == 0) {", "-\t\t\tOS.CGImageRelease(handle);", "-\t\t\tOS.DisposePtr(data);", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t}", "-\t\tint status = OS.QDPictDrawToCGContext(context, rect, pictDataRef);", "-\t\tImageData imgData = null;", "-\t\tif (status == 0) {", "-\t\t\tImage image = Image.carbon_new(Display.getCurrent(),", "-\t\t\t\t\tSWT.BITMAP, handle, data);", "-\t\t\timgData = image.getImageData();", "-\t\t\timage.dispose();", "-\t\t}", "-\t\tOS.CGContextRelease(context);", "-\t\tOS.QDPictRelease(pictDataRef);", "-\t\treturn imgData;", "-\t}", "-\treturn null;", "+\tif (!isSupportedType(transferData) || transferData.data == null) return null;", "+\tNSData data = (NSData) transferData.data;", "+\tif (data.length() == 0) return null;", "+\tNSImage nsImage = (NSImage) new NSImage().alloc();", "+\tnsImage.initWithData(data);", "+\t//TODO: Image representation wrong???", "+\tImage image = Image.cocoa_new(Display.getCurrent(), SWT.BITMAP, nsImage);", "+\tImageData imageData = image.getImageData();", "+\timage.dispose();", "+\treturn imageData;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf5fdb3145be5beb888b37cc8c204c2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 15, "signatureBeforeChange": " void init(Device device, int width, int height)", "signatureAfterChange": "  void init(Device device, int width, int height)", "diff": ["+", "-\tif (device == null) device = Device.getDevice();", "-\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\tthis.device = device;", "-\t/* Create the pixmap */", "-\tif (width <= 0 | height <= 0)", "-\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "-", "-\tthis.type = SWT.BITMAP;", "-\tthis.pixmap = createPixMap(width, height, device.fScreenDepth);", "-", "-\t/* Fill the bitmap with white */", "-    int[] offscreenGWorld= new int[1];", "-\tOS.NewGWorldFromPtr(offscreenGWorld, pixmap);", "-\tint gw= offscreenGWorld[0];", "-\tif (gw == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-", "-\tint[] savePort= new int[1];", "-\tint[] saveGWorld= new int[1];", "-\tOS.GetGWorld(savePort, saveGWorld);", "-\tOS.SetGWorld(gw, 0);", "-\tOS.EraseRect(new short[] { 0, 0, (short)height, (short)width } );", "-\tOS.SetGWorld(savePort[0], saveGWorld[0]);", "-\t", "-\tOS.DisposeGWorld(gw);", "-}", "+\tif (width <= 0 || height <= 0) {", "+\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\tthis.device = device;", "+\tthis.type = SWT.BITMAP;", "+", "+\t/* Create the image */", "+\tint bpr = width * 4;", "+\tint dataSize = height * bpr;", "+\tdata = OS.NewPtr(dataSize);", "+\tif (data == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint provider = OS.CGDataProviderCreateWithData(0, data, dataSize, 0);", "+\tif (provider == 0) {", "+\t\tOS.DisposePtr(data);", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t}", "+\tint colorspace = device.colorspace;", "+\thandle = OS.CGImageCreate(width, height, 8, 32, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "+\tOS.CGDataProviderRelease(provider);", "+\tif (handle == 0) {", "+\t\tOS.DisposePtr(data);", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t}", "+\t\t", "+\t/* Fill the image with white */", "+\tint bpc = OS.CGImageGetBitsPerComponent(handle);", "+\tint context = OS.CGBitmapContextCreate(this.data, width, height, bpc, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "+\tCGRect rect = new CGRect();", "+\trect.width = width; rect.height = height;", "+\tOS.CGContextSetRGBFillColor(context, 1, 1, 1, 1);", "+\tOS.CGContextFillRect(context, rect);", "+\tOS.CGContextRelease(context);", "+}"]}], "num": 30234}
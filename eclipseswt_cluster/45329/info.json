{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4847091cabdcd7bf2e134648e62c9e2e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd475ca321d6f549d8044e8fc752ed55", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "1cafb9b13b36075eb1d31bd71ad3febbf37de5b5", "commitAfterChange": "4b7ac62e4c7abc2bdb8c97e1ee5fae6064a184d8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "diff": ["-\tLRESULT result = super.WM_IME_COMPOSITION (wParam, lParam);", "-\tif (isInlineIMEEnabled ()) {", "-\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "-\t\tif (hIMC != 0) {", "-\t\t\tTCHAR buffer = null;", "-\t\t\tif ((lParam & OS.GCS_RESULTSTR) != 0) {", "-\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, null, 0);", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tbuffer = new TCHAR (getCodePage (), length / TCHAR.sizeof);", "-\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, buffer, length);", "-\t\t\t\t\tString text = buffer.toString (); ", "-\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "-\t\t\t\t\tevent.text = text;", "-\t\t\t\t\tevent.count = text.length ();", "-\t\t\t\t\tsendEvent (SWT.ImeComposition, event);", "-\t\t\t\t\tif (event.doit) {", "-\t\t\t\t\t\tDisplay display = this.display;", "-\t\t\t\t\t\tdisplay.lastKey = 0;", "-\t\t\t\t\t\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "-\t\t\t\t\t\tlength = text.length ();", "-\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\tchar c = text.charAt (i);", "-\t\t\t\t\t\t\tdisplay.lastAscii = c;", "-\t\t\t\t\t\t\tevent = new Event ();", "-\t\t\t\t\t\t\tevent.character = c;", "-\t\t\t\t\t\t\tsendEvent (SWT.KeyDown, event);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif ((lParam & OS.GCS_COMPSTR) == 0) return LRESULT.ONE;", "-\t\t\t}", "-\t\t\t", "-\t\t\tbuffer = null;", "-\t\t\tint index = 0;", "-\t\t\tint [] ranges = null;", "-\t\t\tTextStyle [] styles = null;", "-\t\t\tint /*long*/ layout = OS.GetKeyboardLayout (0);", "-\t\t\tshort langID = (short)OS.LOWORD (layout);", "-\t\t\tif ((lParam & OS.GCS_COMPSTR) != 0) {", "-\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, null, 0);", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tbuffer = new TCHAR (getCodePage (), length / TCHAR.sizeof);", "-\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, buffer, length);", "-\t\t\t\t\tif ((lParam & OS.GCS_CURSORPOS) != 0) {", "-\t\t\t\t\t\tindex = OS.ImmGetCompositionString (hIMC, OS.GCS_CURSORPOS, null, 0);", "-\t\t\t\t\t}", "-\t\t\t\t\tint [] clauses = null;", "-\t\t\t\t\tif ((lParam & OS.GCS_COMPCLAUSE) != 0) {", "-\t\t\t\t\t\tlength = OS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, (int [])null, 0);", "-\t\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\t\tclauses = new int [length / 4];", "-\t\t\t\t\t\t\tOS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, clauses, length);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((lParam & OS.GCS_COMPATTR) != 0 && clauses != null) {", "-\t\t\t\t\t\tlength = OS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, (byte [])null, 0);", "-\t\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\t\tbyte [] attrs = new byte [length];", "-\t\t\t\t\t\t\tOS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, attrs, length);", "-\t\t\t\t\t\t\tlength = clauses.length - 1;", "-\t\t\t\t\t\t\tranges = new int [length * 2];", "-\t\t\t\t\t\t\tstyles = new TextStyle [length];", "-\t\t\t\t\t\t\tTF_DISPLAYATTRIBUTE attr = null; ", "-\t\t\t\t\t\t\tTextStyle style = null;", "-\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\tranges [i * 2] = clauses [i];", "-\t\t\t\t\t\t\t\tranges [i * 2 + 1] = clauses [i + 1] - clauses [i];", "-\t\t\t\t\t\t\t\tstyles [i] = style = new TextStyle ();", "-\t\t\t\t\t\t\t\tattr = getDisplayAttribute (langID, attrs [clauses [i]]);", "-\t\t\t\t\t\t\t\tif (attr != null) {", "-\t\t\t\t\t\t\t\t\tswitch (attr.crText.type) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, attr.crText.cr);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "-\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crText.cr);", "-\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, colorRef);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tswitch (attr.crBk.type) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, attr.crBk.cr);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "-\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crBk.cr);", "-\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, colorRef);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tswitch (attr.crLine.type) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, attr.crLine.cr);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "-\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crLine.cr);", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, colorRef);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tstyle.underline = attr.lsStyle != OS.TF_LS_NONE;", "-\t\t\t\t\t\t\t\t\tswitch (attr.lsStyle) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SQUIGGLE:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_ERROR;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DASH:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DASH; ", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DOT:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DOT;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SOLID:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = attr.fBoldLine ? UNDERLINE_IME_THICK : SWT.UNDERLINE_SINGLE;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "-\t\t\t}", "-\t\t\tString text = buffer != null ? buffer.toString () : \"\";", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "-\t\t\tevent.text = text;", "-\t\t\tevent.index = index;", "-\t\t\tevent.count = 0;", "-\t\t\tevent.ranges = ranges;", "-\t\t\tevent.styles = styles;", "-\t\t\tevent.wideCaret = OS.PRIMARYLANGID (langID) == OS.LANG_KOREAN; ", "-\t\t\tsendEvent (SWT.ImeComposition, event);", "-\t\t}", "-\t\treturn LRESULT.ONE;", "-\t} else {", "-\t\t/*", "-\t\t* Bug in Windows.  On Korean Windows XP, the IME window", "-\t\t* for the Korean Input System (MS-IME 2002) always opens ", "-\t\t* in the top left corner of the screen, despite the fact", "-\t\t* that ImmSetCompositionWindow() was called to position", "-\t\t* the IME when focus is gained.  The fix is to position", "-\t\t* the IME on every WM_IME_COMPOSITION message.", "-\t\t*/", "-\t\tif (!OS.IsWinCE && OS.WIN32_VERSION == OS.VERSION (5, 1)) {", "-\t\t\tif (OS.IsDBLocale) {", "-\t\t\t\tshort langID = OS.GetSystemDefaultUILanguage ();", "-\t\t\t\tshort primaryLang = OS.PRIMARYLANGID (langID);", "-\t\t\t\tif (primaryLang == OS.LANG_KOREAN) {", "-\t\t\t\t\tif (caret != null && caret.isFocusCaret ()) {", "-\t\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "-\t\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "-\t\t\t\t\t\t\tCOMPOSITIONFORM lpCompForm = new COMPOSITIONFORM ();", "-\t\t\t\t\t\t\tlpCompForm.dwStyle = OS.CFS_POINT;", "-\t\t\t\t\t\t\tlpCompForm.x = ptCurrentPos.x;", "-\t\t\t\t\t\t\tlpCompForm.y = ptCurrentPos.y;", "-\t\t\t\t\t\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "-\t\t\t\t\t\t\tOS.ImmSetCompositionWindow (hIMC, lpCompForm);", "-\t\t\t\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "-\t\t\t\t\t\t}", "+\tif (ime != null) {", "+\t\tLRESULT result = ime.WM_IME_COMPOSITION (wParam, lParam);", "+\t\tif (result != null) return result;", "+\t}", "+\t", "+\t/*", "+\t* Bug in Windows.  On Korean Windows XP, the IME window", "+\t* for the Korean Input System (MS-IME 2002) always opens ", "+\t* in the top left corner of the screen, despite the fact", "+\t* that ImmSetCompositionWindow() was called to position", "+\t* the IME when focus is gained.  The fix is to position", "+\t* the IME on every WM_IME_COMPOSITION message.", "+\t*/", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION == OS.VERSION (5, 1)) {", "+\t\tif (OS.IsDBLocale) {", "+\t\t\tshort langID = OS.GetSystemDefaultUILanguage ();", "+\t\t\tshort primaryLang = OS.PRIMARYLANGID (langID);", "+\t\t\tif (primaryLang == OS.LANG_KOREAN) {", "+\t\t\t\tif (caret != null && caret.isFocusCaret ()) {", "+\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "+\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "+\t\t\t\t\t\tCOMPOSITIONFORM lpCompForm = new COMPOSITIONFORM ();", "+\t\t\t\t\t\tlpCompForm.dwStyle = OS.CFS_POINT;", "+\t\t\t\t\t\tlpCompForm.x = ptCurrentPos.x;", "+\t\t\t\t\t\tlpCompForm.y = ptCurrentPos.y;", "+\t\t\t\t\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "+\t\t\t\t\t\tOS.ImmSetCompositionWindow (hIMC, lpCompForm);", "+\t\t\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "-\treturn result;", "+\treturn super.WM_IME_COMPOSITION (wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f9aa52ee033927123e91b6a04b43c19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "deba00683b7e799ad97b05b6dcbb1d19c053de72", "commitAfterChange": "f295d81c96c5f0cad60547a25236d1a3bb649162", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "diff": ["-\tLRESULT result  = super.WM_IME_COMPOSITION (wParam, lParam);", "-\t/*", "-\t* Bug in Windows.  On Korean Windows XP, the IME window", "-\t* for the Korean Input System (MS-IME 2002) always opens ", "-\t* in the top left corner of the screen, despite the fact", "-\t* that ImmSetCompositionWindow() was called to position", "-\t* the IME when focus is gained.  The fix is to position", "-\t* the IME on every WM_IME_COMPOSITION message.", "-\t*/", "-\tif (!OS.IsWinCE && OS.WIN32_VERSION == OS.VERSION (5, 1)) {", "-\t\tif (OS.IsDBLocale) {", "-\t\t\tshort langID = OS.GetSystemDefaultUILanguage ();", "-\t\t\tshort primaryLang = OS.PRIMARYLANGID (langID);", "-\t\t\tif (primaryLang == OS.LANG_KOREAN) {", "-\t\t\t\tif (caret != null && caret.isFocusCaret ()) {", "-\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "-\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "-\t\t\t\t\t\tCOMPOSITIONFORM lpCompForm = new COMPOSITIONFORM ();", "-\t\t\t\t\t\tlpCompForm.dwStyle = OS.CFS_POINT;", "-\t\t\t\t\t\tlpCompForm.x = ptCurrentPos.x;", "-\t\t\t\t\t\tlpCompForm.y = ptCurrentPos.y;", "-\t\t\t\t\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "-\t\t\t\t\t\tOS.ImmSetCompositionWindow (hIMC, lpCompForm);", "-\t\t\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "+\tLRESULT result = super.WM_IME_COMPOSITION (wParam, lParam);", "+\tif (OS.IsDBLocale && hooks (SWT.ImeComposition)) {", "+\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "+\t\tif (hIMC != 0) {", "+\t\t\tTCHAR buffer = null;", "+\t\t\tif ((lParam & OS.GCS_RESULTSTR) != 0) {", "+\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, null, 0);", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tbuffer = new TCHAR (getCodePage (), length / TCHAR.sizeof);", "+\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, buffer, length);", "+\t\t\t\t\tString text = buffer.toString (); ", "+\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "+\t\t\t\t\tevent.text = text;", "+\t\t\t\t\tevent.count = text.length ();", "+\t\t\t\t\tsendEvent (SWT.ImeComposition, event);", "+\t\t\t\t\tif (event.doit) {", "+\t\t\t\t\t\tDisplay display = this.display;", "+\t\t\t\t\t\tdisplay.lastKey = 0;", "+\t\t\t\t\t\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "+\t\t\t\t\t\tlength = text.length ();", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tchar c = text.charAt (i);", "+\t\t\t\t\t\t\tdisplay.lastAscii = c;", "+\t\t\t\t\t\t\tevent = new Event ();", "+\t\t\t\t\t\t\tevent.character = c;", "+\t\t\t\t\t\t\tsendEvent (SWT.KeyDown, event);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif ((lParam & OS.GCS_COMPSTR) == 0) return LRESULT.ONE;", "+\t\t\t}", "+\t\t\t", "+\t\t\tint index = 0;", "+\t\t\tint [] ranges = null;", "+\t\t\tTextStyle [] styles = null;", "+\t\t\tint /*long*/ layout = OS.GetKeyboardLayout (0);", "+\t\t\tshort langID = (short)OS.LOWORD (layout);", "+\t\t\tif ((lParam & OS.GCS_COMPSTR) != 0) {", "+\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, null, 0);", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tbuffer = new TCHAR (getCodePage (), length / TCHAR.sizeof);", "+\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, buffer, length);", "+\t\t\t\t\tif ((lParam & OS.GCS_CURSORPOS) != 0) {", "+\t\t\t\t\t\tindex = OS.ImmGetCompositionString (hIMC, OS.GCS_CURSORPOS, null, 0);", "+\t\t\t\t\t}", "+\t\t\t\t\tint [] clauses = null;", "+\t\t\t\t\tif ((lParam & OS.GCS_COMPCLAUSE) != 0) {", "+\t\t\t\t\t\tlength = OS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, (int [])null, 0);", "+\t\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\t\tclauses = new int [length / 4];", "+\t\t\t\t\t\t\tOS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, clauses, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((lParam & OS.GCS_COMPATTR) != 0 && clauses != null) {", "+\t\t\t\t\t\tlength = OS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, (byte [])null, 0);", "+\t\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\t\tbyte [] attrs = new byte [length];", "+\t\t\t\t\t\t\tOS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, attrs, length);", "+\t\t\t\t\t\t\tlength = clauses.length - 1;", "+\t\t\t\t\t\t\tranges = new int [length * 2];", "+\t\t\t\t\t\t\tstyles = new TextStyle [length];", "+\t\t\t\t\t\t\tTF_DISPLAYATTRIBUTE attr = null; ", "+\t\t\t\t\t\t\tTextStyle style = null;", "+\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\t\tranges [i * 2] = clauses [i];", "+\t\t\t\t\t\t\t\tranges [i * 2 + 1] = clauses [i + 1] - clauses [i];", "+\t\t\t\t\t\t\t\tstyles [i] = style = new TextStyle ();", "+\t\t\t\t\t\t\t\tattr = getDisplayAttribute (langID, attrs [clauses [i]]);", "+\t\t\t\t\t\t\t\tif (attr != null) {", "+\t\t\t\t\t\t\t\t\tswitch (attr.crText.type) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, attr.crText.cr);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crText.cr);", "+\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tswitch (attr.crBk.type) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, attr.crBk.cr);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crBk.cr);", "+\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tswitch (attr.crLine.type) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, attr.crLine.cr);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crLine.cr);", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tstyle.underline = attr.lsStyle != OS.TF_LS_NONE;", "+\t\t\t\t\t\t\t\t\tswitch (attr.lsStyle) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SQUIGGLE:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_ERROR;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DASH:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DASH; ", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DOT:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DOT;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SOLID:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = attr.fBoldLine ? UNDERLINE_IME_THICK : SWT.UNDERLINE_SINGLE;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "+\t\t\t}", "+\t\t\tString text = buffer != null ? buffer.toString () : \"\";", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "+\t\t\tevent.text = text;", "+\t\t\tevent.index = index;", "+\t\t\tevent.count = 0;", "+\t\t\tevent.ranges = ranges;", "+\t\t\tevent.styles = styles;", "+\t\t\tevent.wideCaret = OS.PRIMARYLANGID (langID) == OS.LANG_KOREAN; ", "+\t\t\tsendEvent (SWT.ImeComposition, event);", "+\t\t}", "+\t\treturn LRESULT.ONE;", "+\t} else {", "+\t\t/*", "+\t\t* Bug in Windows.  On Korean Windows XP, the IME window", "+\t\t* for the Korean Input System (MS-IME 2002) always opens ", "+\t\t* in the top left corner of the screen, despite the fact", "+\t\t* that ImmSetCompositionWindow() was called to position", "+\t\t* the IME when focus is gained.  The fix is to position", "+\t\t* the IME on every WM_IME_COMPOSITION message.", "+\t\t*/", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION == OS.VERSION (5, 1)) {", "+\t\t\tif (OS.IsDBLocale) {", "+\t\t\t\tshort langID = OS.GetSystemDefaultUILanguage ();", "+\t\t\t\tshort primaryLang = OS.PRIMARYLANGID (langID);", "+\t\t\t\tif (primaryLang == OS.LANG_KOREAN) {", "+\t\t\t\t\tif (caret != null && caret.isFocusCaret ()) {", "+\t\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "+\t\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "+\t\t\t\t\t\t\tCOMPOSITIONFORM lpCompForm = new COMPOSITIONFORM ();", "+\t\t\t\t\t\t\tlpCompForm.dwStyle = OS.CFS_POINT;", "+\t\t\t\t\t\t\tlpCompForm.x = ptCurrentPos.x;", "+\t\t\t\t\t\t\tlpCompForm.y = ptCurrentPos.y;", "+\t\t\t\t\t\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "+\t\t\t\t\t\t\tOS.ImmSetCompositionWindow (hIMC, lpCompForm);", "+\t\t\t\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "+\t\t\t\t\t\t}", "+\t}", "+\treturn result;", "+}"]}], "num": 45329}
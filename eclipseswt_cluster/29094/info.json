{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "071b71a7ab9b94c5572d76fb714a7474", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af298304e2fc1eaa790f6c5fcf3fd0ac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextBidi.java", "commitBeforeChange": "eca9561f00e8f6869c3f064d2cc210213e7961a5", "commitAfterChange": "7b035d7945e49f32511c350507eda7aad65fec22", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public int getCaretPosition(int logicalOffset, int direction)", "signatureAfterChange": "\r public int getCaretPosition(int logicalOffset, int direction)", "diff": ["-\t\treturn StyledText.xInset;\r", "+\t\treturn StyledText.XINSET;\r", "-\t\tsetKeyboardLanguage(logicalOffset);\r", "-\t\treturn caretX;\r", "-\r", "+\telse\r", "-\t\tsetKeyboardLanguage(logicalOffset);\r", "-\t\treturn caretX;\r", "-\t}\t\r", "-\r", "-\tif (direction == ST.COLUMN_NEXT) {\r", "-\t\tif (isRightToLeft(logicalOffset) != isRightToLeft(logicalOffset - 1)) {\r", "-\t\t\t// moving between segments\r", "-\t\t\tif (isRightToLeft(logicalOffset - 1)) {\r", "-\t\t\t\t// moving from RtoL to LtoR\r", "-\t\t\t\tint visualOffset = order[logicalOffset-1];\r", "-\t\t\t\tcaretX = renderPositions[visualOffset];\r", "-\t\t\t}\r", "-\t\t\telse {\r", "-\t\t\t\t// moving from LtoR to RtoL\r", "-\t\t\t\tint visualOffset = order[logicalOffset-1];\r", "-\t\t\t\tcaretX = renderPositions[visualOffset] + dx[visualOffset];\r", "-\t\t\t}\r", "-\t\tsetKeyboardLanguage(logicalOffset-1);\r", "-\t\treturn caretX;\r", "+\t}\r", "+\telse\r", "+\tif (direction == ST.COLUMN_NEXT &&\r", "+\t\tisRightToLeft(logicalOffset) != isRightToLeft(logicalOffset - 1)) {\r", "+\t\tint visualOffset = order[logicalOffset-1];\r", "+\t\t// moving between segments\r", "+\t\tif (isRightToLeft(logicalOffset - 1)) {\r", "+\t\t\t// moving from RtoL to LtoR\r", "+\t\t\tcaretX = renderPositions[visualOffset];\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\t// moving from LtoR to RtoL\r", "+\t\t\tcaretX = renderPositions[visualOffset] + dx[visualOffset];\r", "-\r", "-\tif (direction == ST.COLUMN_PREVIOUS) {\r", "-\t\tif (isRightToLeft(logicalOffset) != isRightToLeft(logicalOffset - 1)) {\r", "-\t\t\t// moving between segments\r", "-\t\t\tif (isRightToLeft(logicalOffset - 1)) {\r", "-\t\t\t\t// moving from LtoR to RtoL\r", "-\t\t\t\tint visualOffset = order[logicalOffset];\r", "-\t\t\t\tcaretX = renderPositions[visualOffset];\r", "-\t\t\t}\r", "-\t\t\telse {\r", "-\t\t\t\t// moving from RtoL to LtoR\r", "-\t\t\t\tint visualOffset = order[logicalOffset];\r", "-\t\t\t\tcaretX = renderPositions[visualOffset] + dx[visualOffset];\r", "-\t\t\t}\r", "-\t\tsetKeyboardLanguage(logicalOffset);\r", "-\t\treturn caretX;\r", "+\telse\r", "+\tif (direction == ST.COLUMN_PREVIOUS &&\r", "+\t\tisRightToLeft(logicalOffset) != isRightToLeft(logicalOffset - 1)) {\r", "+\t\tint visualOffset = order[logicalOffset];\r", "+\t\t// moving between segments\r", "+\t\tif (isRightToLeft(logicalOffset - 1)) {\r", "+\t\t\t// moving from LtoR to RtoL\r", "+\t\t\tcaretX = renderPositions[visualOffset];\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\t// moving from RtoL to LtoR\r", "+\t\t\tcaretX = renderPositions[visualOffset] + dx[visualOffset];\r", "-\r", "+\telse\r", "-\tsetKeyboardLanguage(logicalOffset);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cf3d8d8bc8f1407b05943b87071de6c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "b45e8fdd6457ecd89905a08b9159ef92536b0cee", "commitAfterChange": "3435c841ff1fddd408f0370db7b59b1a4fd87446", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["+\tif ((style & SWT.SEPARATOR) == 0) {", "+\t\tlabelHandle = OS.gtk_label_new_with_mnemonic (null);", "+\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\timageHandle = OS.gtk_image_new_from_pixbuf (0);", "+\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t}", "-\t\t\t\tlabelHandle = OS.gtk_label_new_with_mnemonic (null);", "-\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tOS.gtk_tool_button_set_label_widget(handle, labelHandle);", "-\t\t\t\tlabelHandle = OS.gtk_label_new_with_mnemonic (null);", "-\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tOS.gtk_tool_button_set_label_widget (handle, arrowBoxHandle);", "-\t\t\tlabelHandle = OS.gtk_label_new_with_mnemonic (null);", "-\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\tOS.gtk_tool_button_set_label_widget(handle, labelHandle);", "-\t\t\tlabelHandle = OS.gtk_label_new_with_mnemonic (null);", "-\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\tOS.gtk_tool_button_set_label_widget(handle, labelHandle);", "+\t}", "+\tif (labelHandle != 0) {", "+\t\tOS.gtk_tool_button_set_label_widget(handle, labelHandle);", "+\t}", "+\tif (imageHandle != 0) {", "+\t\tOS.gtk_tool_button_set_icon_widget(handle, imageHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11be5a171553831903c6db0ae1ab1299", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "cc81619f9bb3266b4ad015825272dce98bc98771", "commitAfterChange": "03fdc4ce598a854ad5aca71d689e6a6135d4397b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void presetChooserDialog ()", "signatureAfterChange": " void presetChooserDialog ()", "diff": ["-\tif (filterPath.length () > 0) {", "-\t\tStringBuffer stringBuffer = new StringBuffer ();", "-\t\t/* filename must be a full path */", "-\t\tif (filterPath.charAt (0) != SEPARATOR) {", "-\t\t\tstringBuffer.append (SEPARATOR);", "-\t\t}", "-\t\tstringBuffer.append (filterPath);", "-", "-\t\tif (fileName.length () > 0 && (style & SWT.SAVE) == 0) {", "-\t\t\tif (filterPath.charAt (filterPath.length () - 1) != SEPARATOR) {", "-\t\t\t\tstringBuffer.append (SEPARATOR);", "-\t\t\t}", "-\t\t\tstringBuffer.append (fileName);", "-\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, stringBuffer.toString (), true);", "-\t\t\t/*", "-\t\t\t* Bug in GTK. GtkFileChooser may crash on GTK versions 2.4.10 to 2.6", "-\t\t\t* when setting a file name that is not a true canonical path. ", "-\t\t\t* The fix is to use the canonical path.", "-\t\t\t*/", "-\t\t\tint /*long*/ ptr = OS.realpath (buffer, null);", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tOS.gtk_file_chooser_set_filename (handle, ptr);", "-\t\t\t\tOS.g_free (ptr);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, stringBuffer.toString (), true);", "-\t\t\t/*", "-\t\t\t* Bug in GTK. GtkFileChooser may crash on GTK versions 2.4.10 to 2.6", "-\t\t\t* when setting a file name that is not a true canonical path. ", "-\t\t\t* The fix is to use the canonical path.", "-\t\t\t*/", "-\t\t\tint /*long*/ ptr = OS.realpath (buffer, null);", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, ptr);", "-\t\t\t\tOS.g_free (ptr);", "-\t\t\t}", "-\t\t}", "-\t} else {", "-\t\tif (fileName.length () > 0) {", "-\t\t\tif (fileName.charAt (0) == SEPARATOR) {", "-\t\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, fileName, true);", "+\tif ((style & SWT.SAVE) != 0) {", "+\t\tif (filterPath.length () > 0) {", "+\t\t\tif (uriMode) {", "+\t\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, filterPath, true);", "+\t\t\t\tOS.gtk_file_chooser_set_current_folder_uri (handle, buffer);", "+\t\t\t} else {", "+\t\t\t\t/* filename must be a full path */", "+\t\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, SEPARATOR + filterPath, true);", "+\t\t\t\t", "-\t\t\t\tif (ptr != 0) {", "-\t\t\t\t\tOS.gtk_file_chooser_set_filename (handle, ptr);", "-\t\t\t\t\tOS.g_free (ptr);", "-\t\t\t\t}", "+\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, ptr);", "+\t\t\t\tOS.g_free (ptr);", "+\t\tif (fileName.length () > 0) {", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, fileName, true);", "+\t\t\tOS.gtk_file_chooser_set_current_name (handle, buffer);", "+\t\t}", "+\t} else {", "+\t\tStringBuffer stringBuffer = new StringBuffer();", "+\t\tif (filterPath.length () > 0) {", "+\t\t\tif (!uriMode) {", "+\t\t\t\t/* filename must be a full path */", "+\t\t\t\tstringBuffer.append(SEPARATOR);", "+\t\t\t}", "+\t\t\tstringBuffer.append(filterPath);", "+\t\t\tstringBuffer.append(SEPARATOR);", "+\t\t}", "+\t\tif (fileName.length () > 0) {", "+\t\t\tstringBuffer.append(fileName);", "+\t\t}", "+\t\tbyte [] buffer = Converter.wcsToMbcs (null, stringBuffer.toString(), true);", "+\t\tif (uriMode) {", "+\t\t\tOS.gtk_file_chooser_set_uri (handle, buffer);", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t* Bug in GTK. GtkFileChooser may crash on GTK versions 2.4.10 to 2.6", "+\t\t\t* when setting a file name that is not a true canonical path. ", "+\t\t\t* The fix is to use the canonical path.", "+\t\t\t*/", "+\t\t\tint /*long*/ ptr = OS.realpath (buffer, null);", "+\t\t\tOS.gtk_file_chooser_set_filename (handle, ptr);", "+\t\t\tOS.g_free (ptr);", "+\t\t}", "-\tif ((style & SWT.SAVE) != 0 && fileName.length () > 0) {", "-\t\tbyte [] buffer = Converter.wcsToMbcs (null, fileName, true);", "-\t\tOS.gtk_file_chooser_set_current_name (handle, buffer);", "-\t}", "+\t", "+\t/* Set overwrite mode */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "557478259d27032f348d88ff1be06c51", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "2982bc39340de13b30271bea27a026386e5a773b", "commitAfterChange": "952e49f3e3f7d09515610ff5a655e3ee04d6b569", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "  void releaseDisplay ()", "signatureAfterChange": "  void releaseDisplay ()", "diff": ["-\tif (errorPixmap != 0) {", "-\t\tOS.g_object_unref (errorPixmap);", "-\t\tOS.g_object_unref (errorMask);", "-\t}", "-\tif (infoPixmap != 0) {", "-\t\tOS.g_object_unref (infoPixmap);", "-\t\tOS.g_object_unref (infoMask);", "-\t}", "-\tif (questionPixmap != 0) {", "-\t\tOS.g_object_unref (questionPixmap);", "-\t\tOS.g_object_unref (questionMask);", "-\t}", "-\tif (warningPixmap != 0) {", "-\t\tOS.g_object_unref (warningPixmap);", "-\t\tOS.g_object_unref (warningMask);", "-\t}", "-\terrorPixmap = infoPixmap = questionPixmap = warningPixmap = 0;", "-\terrorMask = infoMask = questionMask = warningMask = 0;", "+\tif (errorImage != null) errorImage.dispose();", "+\tif (infoImage != null) infoImage.dispose();", "+\tif (questionImage != null) questionImage.dispose();", "+\tif (warningImage != null) warningImage.dispose();", "+\terrorImage = infoImage = questionImage = warningImage = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07274f702412676f5a0ba74896e9b7ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3a479c7b5f334c338a13bd42ca4f316ae25b9760", "commitAfterChange": "b806e8c957af4be79d14a92cc11f6f57a82047b0", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 60, "signatureBeforeChange": "  void releaseWidget ()", "signatureAfterChange": "  void releaseWidget ()", "diff": ["-\t\tOS.SendMessage (hwndHeader, OS.HDM_SETIMAGELIST, 0, 0);", "-\t} else {", "-\t\tint hOldList = OS.SendMessage (handle, OS.TVM_GETIMAGELIST, OS.TVSIL_NORMAL, 0);", "-\t\tOS.SendMessage (handle, OS.TVM_SETIMAGELIST, OS.TVSIL_NORMAL, 0);", "-\t\tOS.SendMessage (hwndHeader, OS.HDM_SETIMAGELIST, 0, 0);", "-\t\tif (hOldList != 0) OS.ImageList_Destroy (hOldList);", "-\timageList = null;", "-\tint hOldList = OS.SendMessage (handle, OS.TVM_GETIMAGELIST, OS.TVSIL_STATE, 0);", "+\tif (headerImageList != null) {", "+\t\tif (hwndHeader != 0) {", "+\t\t\tOS.SendMessage (hwndHeader, OS.HDM_SETIMAGELIST, 0, 0);", "+\t\t}", "+\t\tdisplay.releaseImageList (headerImageList);", "+\t}", "+\timageList = headerImageList = null;", "+\tint hStateList = OS.SendMessage (handle, OS.TVM_GETIMAGELIST, OS.TVSIL_STATE, 0);", "-\tif (hOldList != 0) OS.ImageList_Destroy (hOldList);", "+\tif (hStateList != 0) OS.ImageList_Destroy (hStateList);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50c90be1279485c4edb0b22e219c1cb6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridLayout.java", "commitBeforeChange": "188e89e62cd3fa5049c50b2f1c2aef380bca4656", "commitAfterChange": "02b6fcfc66e68bef5894b18185545118e86c317e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "signatureAfterChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "diff": ["-\t\t\t\tif (child instanceof Group) {", "-\t\t\t\t\tGroup g = (Group)child;", "-\t\t\t\t\ttrim = g.getSize ().x - g.getClientArea ().width;", "-\t\t\t\t} else if (child instanceof Scrollable) {", "+\t\t\t\tif (child instanceof Scrollable) {", "-\t\t\t\t\t\t\tif (child instanceof Group) {", "-\t\t\t\t\t\t\t\tGroup g = (Group)child;", "-\t\t\t\t\t\t\t\ttrim = g.getSize ().x - g.getClientArea ().width;", "-\t\t\t\t\t\t\t} else if (child instanceof Scrollable) {", "+\t\t\t\t\t\t\tif (child instanceof Scrollable) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b3979a74f89a889a7aeabfb81b5e601", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "6b905c3eb76c3c0c8d47ed9e88c64f2954530229", "commitAfterChange": "8b66a88111a5c0bbf49bacf4f87f8d702b5567a8", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void setText (int index, String string)", "signatureAfterChange": " public void setText (int index, String string)", "diff": ["-\tint itemIndex = parent.indexOf (this);", "-\tif (itemIndex == -1) return;", "+\t\tif (string.equals (text)) return;", "-\tint columnCount = parent.columnCount;", "-\tif (0 <= index && index < columnCount) {", "-\t\tif (strings == null) strings = new String [columnCount];", "+\tint count = Math.max (1, parent.columnCount);", "+\tif (0 <= index && index < count) {", "+\t\tif (strings == null) strings = new String [count];", "+\t\tif (string.equals (strings [index])) return;", "-\tif (parent.ignoreRedraw) return;", "-\tif (parent.drawCount == 0) {", "-\t\tif (index == 0) parent.setScrollWidth (this);", "-\t\tint [] id = new int [] {itemIndex + 1};", "-\t\tOS.UpdateDataBrowserItems (parent.handle, 0, id.length, id, OS.kDataBrowserItemNoProperty, OS.kDataBrowserNoItem);", "-\t}", "+\tif (index == 0) parent.setScrollWidth (this);", "+\tredraw ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cee82c4c37f3ace8ab95e7320ec8e0dd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "58383f412ad2510abd15afdf3cb00667e6c434a4", "commitAfterChange": "c53caa95e55e48c3856ff305cfe3f6f8e3107f36", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void drawRunBackgroundGDIP(StyleItem run, int graphics, RECT rect, int selectionStart, int selectionEnd, int alpha, int selBrush, boolean hasSelection)", "signatureAfterChange": "  void drawRunBackgroundGDIP(StyleItem run, int graphics, RECT rect, int selectionStart, int selectionEnd, int alpha, int selBrush, boolean hasSelection)", "diff": ["-\t\t\tint bg = run.style.background.handle;", "-\t\t\tint argb = ((alpha & 0xFF) << 24) | ((bg >> 16) & 0xFF) | (bg & 0xFF00) | ((bg & 0xFF) << 16);", "-\t\t\tint /*long*/ color = Gdip.Color_new(argb); ", "-\t\t\tint /*long*/ brush = Gdip.SolidBrush_new(color);", "+\t\t\tint /*long*/ brush = createGdipBrush(run.style.background, alpha);", "-\t\t\tGdip.Color_delete(color);", "+\t\t\tif (rect.left > rect.right) {", "+\t\t\t\tint tmp = rect.left;", "+\t\t\t\trect.left = rect.right;", "+\t\t\t\trect.right = tmp;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e83d46445ca7f11cadc4481d95c047d0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "418189f52bdfb218fb6efa8e48de290592d75479", "commitAfterChange": "8ac319315f02f056087670898446ba12d963ef7a", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "\r \r LRESULT sendMouseDownEvent (int type, int button, int msg, int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT sendMouseDownEvent (int type, int button, int msg, int wParam, int lParam)", "diff": ["-\t* Feature in Windows.  In tables that have the style\r", "-\t* LVS_SINGLESEL, when a table item is reselected, the\r", "-\t* table does not issue a WM_NOTIFY because the item\r", "+\t* Feature in Windows.  When a table item is reselected,\r", "+\t* the table does not issue a WM_NOTIFY when the item\r", "-\tint oldState = 0;\r", "-\tif ((style & SWT.SINGLE) != 0 && pinfo.iItem != -1) {\r", "+\tboolean wasSelected = false;\r", "+\tint count = OS.SendMessage (handle, OS.LVM_GETSELECTEDCOUNT, 0, 0);\r", "+\tif (count == 1 && pinfo.iItem != -1) {\r", "-\t\toldState = lvItem.state;\r", "+\t\twasSelected = (lvItem.state & OS.LVIS_SELECTED) != 0;\r", "+\t\tif (wasSelected) ignoreSelect = true;\r", "-\tif ((style & SWT.SINGLE) != 0 && pinfo.iItem != -1) {\r", "-\t\tif ((oldState & OS.LVIS_SELECTED) != 0) {\r", "-\t\t\tLVITEM lvItem = new LVITEM ();\r", "-\t\t\tlvItem.mask = OS.LVIF_STATE;\r", "-\t\t\tlvItem.stateMask = OS.LVIS_SELECTED;\r", "-\t\t\tlvItem.iItem = pinfo.iItem;\r", "-\t\t\tOS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);\r", "-\t\t\tint newState = lvItem.state;\r", "-\t\t\tif ((newState & OS.LVIS_SELECTED) != 0) {\r", "-\t\t\t\tEvent event = new Event ();\r", "-\t\t\t\tevent.item = items [pinfo.iItem];\r", "-\t\t\t\tpostEvent (SWT.Selection, event);\r", "-\t\t\t}\r", "-\t\t}\r", "+\tif (wasSelected) {\r", "+\t\tignoreSelect = false;\r", "+\t\tEvent event = new Event ();\r", "+\t\tevent.item = items [pinfo.iItem];\r", "+\t\tpostEvent (SWT.Selection, event);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1855c7d791ef9661b8753c7f542ba8a1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ExpandItem.java", "commitBeforeChange": "f583b5839f2635fb53b19da7580dac5cb0826fec", "commitAfterChange": "f520a8dcf7987a68442ef89495b4518db5c9b2f5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void setControl (Control control)", "signatureAfterChange": " public void setControl (Control control)", "diff": ["-\t\tint hwnd = control.handle;", "-\t\tOS.ShowWindow (hwnd, expanded ? OS.SW_SHOW : OS.SW_HIDE);", "-\t\tint flags = OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE;", "+\t\tint headerHeight = ExpandBar.HEADER_HEIGHT;", "+\t\tcontrol.setVisible (expanded);", "-\t\t\tx += BORDER;", "-\t\t\twidth = Math.max (0, width - BORDER * 2);", "-\t\t\theight = Math.max (0, height - BORDER);", "+\t\t\tint width = Math.max (0, this.width - BORDER * 2);", "+\t\t\tint height = Math.max (0, this.height - BORDER);", "+\t\t\tcontrol.setBounds (x + BORDER, y + headerHeight, width, height);", "+\t\t} else {", "+\t\t\tcontrol.setBounds (x, y + headerHeight, width, height);", "-\t\tSetWindowPos (hwnd, 0, x, y + ExpandBar.HEADER_HEIGHT, width, height, flags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74ff2316ef871a811a8ef671add4b809", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "74b44aac273bace6e70511de497711ba9cb87f49", "commitAfterChange": "6e4b0c1d4fdb9e23181a7b945123e706fd39c5bb", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  int mouseProc (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int mouseProc (int nextHandler, int theEvent, int userData)", "diff": ["+\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "-\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, where.sizeof, null, where);", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, where);", "-\t\t\t\t\t\tif (widget == hoverControl) {", "-\t\t\t\t\t\t\tint [] outDelay = new int [1];", "-\t\t\t\t\t\t\tOS.HMGetTagDelay (outDelay);", "-\t\t\t\t\t\t\tif (mouseHoverID != 0) {", "-\t\t\t\t\t\t\t\tOS.SetEventLoopTimerNextFireTime (mouseHoverID, outDelay [0] / 1000.0);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tint [] outDelay = new int [1];", "+\t\t\t\t\t\tOS.HMGetTagDelay (outDelay);", "+\t\t\t\t\t\tif (widget == currentControl && mouseHoverID != 0) {", "+\t\t\t\t\t\t\tOS.SetEventLoopTimerNextFireTime (mouseHoverID, outDelay [0] / 1000.0);", "-\t\t\t\t\t\t\t//NOT DONE - get rid of instanceof test", "-\t\t\t\t\t\t\tif (widget instanceof Control) {", "-\t\t\t\t\t\t\t\tif (mouseHoverID != 0) OS.RemoveEventLoopTimer (mouseHoverID);", "-\t\t\t\t\t\t\t\thoverControl = (Control) widget;", "-\t\t\t\t\t\t\t\tint [] id = new int [1], outDelay = new int [1];", "-\t\t\t\t\t\t\t\tOS.HMGetTagDelay (outDelay);", "-\t\t\t\t\t\t\t\tint handle = hoverControl.handle;", "-\t\t\t\t\t\t\t\tint eventLoop = OS.GetCurrentEventLoop ();", "-\t\t\t\t\t\t\t\tOS.InstallEventLoopTimer (eventLoop, outDelay [0] / 1000.0, 0.0, mouseHoverProc, handle, id);", "-\t\t\t\t\t\t\t\tif ((mouseHoverID = id [0]) == 0) hoverControl = null;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (mouseHoverID != 0) OS.RemoveEventLoopTimer (mouseHoverID);", "+\t\t\t\t\t\t\tint [] id = new int [1];", "+\t\t\t\t\t\t\tint eventLoop = OS.GetCurrentEventLoop ();", "+\t\t\t\t\t\t\tOS.InstallEventLoopTimer (eventLoop, outDelay [0] / 1000.0, 0.0, mouseHoverProc, 0, id);", "+\t\t\t\t\t\t\tmouseHoverID = id [0];", "-\t\tcase OS.kEventMouseMoved:", "-\t\t\tOS.InitCursor ();", "+\t\tcase OS.kEventMouseMoved:  OS.InitCursor ();", "-\tif (mouseHoverID != 0) OS.RemoveEventLoopTimer (mouseHoverID);", "-\tmouseHoverID = 0;", "-\thoverControl = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e556f8b105c90fa543d9bcfe4ff8b49", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CBanner.java", "commitBeforeChange": "031f4f48c368ff02675c474ad5b282455359bb00", "commitAfterChange": "723030802cd546b1c5d1b883f3b29eb2dd82026d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void layout (boolean changed)", "signatureAfterChange": "  public void layout (boolean changed)", "diff": ["-\t\tint y = (leftSize.y > height) ? BORDER_TOP : BORDER_TOP + (height - leftSize.y) / 2;", "+\t\tint y = BORDER_STRIPE + BORDER_TOP;", "-\t\tint height = size.y - BORDER_TOP - BORDER_BOTTOM;", "-\t\tint y = (middleSize.y > height) ? BORDER_TOP : BORDER_TOP + (height - middleSize.y) / 2;", "-\t\tmiddleRect = new Rectangle(x, y, middleSize.x, Math.min(size.y, middleSize.y));", "+\t\tint height = Math.min(size.y  - BORDER_TOP - BORDER_BOTTOM - 2*BORDER_STRIPE, middleSize.y);", "+\t\tint y = BORDER_STRIPE + BORDER_TOP;", "+\t\tmiddleRect = new Rectangle(x, y, middleSize.x, height);", "-\t\tint height = size.y - BORDER_TOP - BORDER_BOTTOM;", "-\t\tint y = (rightSize.y > height) ? BORDER_TOP : BORDER_TOP + (height - rightSize.y) / 2;", "-\t\trightRect = new Rectangle(x, y, rightSize.x, Math.min(size.y, rightSize.y));", "+\t\tint height = Math.min(size.y  - BORDER_TOP - BORDER_BOTTOM - 2*BORDER_STRIPE, rightSize.y);", "+\t\tint y = BORDER_STRIPE + BORDER_TOP;", "+\t\trightRect = new Rectangle(x, y, rightSize.x, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99b3917222d54c8301880c41e226e8aa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void setBackground (int columnIndex, Color value)", "signatureAfterChange": " int getGlobalIndex()", "diff": ["+int getGlobalIndex() {", "+\tint globalItemIndex = getIndex();", "+\tAbstractTreeItem item = null;", "+\tif (isRoot() == false) {", "+\t\titem = getParentItem();", "+\t\tglobalItemIndex++;\t\t\t\t\t\t// adjust for 0-based non-root items", "+\telse {\t", "+\t\titem = getParent().getRoot();", "+\t}", "+", "+\tglobalItemIndex += item.getVisibleIndex(getIndex());", "+\treturn globalItemIndex;", "+}", "-}", "-public void setBackground (int columnIndex, Color value) {", "-\tcheckWidget ();", "-\tif (value != null && value.isDisposed ()) {", "-\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "-\t}", "-\tint validColumnCount = Math.max (1, parent.getColumnCount());", "-\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return;", "-\tif (cellBackground == null) {", "-\t\tcellBackground = new Color [validColumnCount];", "-\t}", "-\tif (cellBackground [columnIndex] == value) return;", "-\tif (cellBackground [columnIndex] != null && cellBackground [columnIndex].equals (value)) return;", "-\tcellBackground [columnIndex] = value;", "-\tredrawItem ();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ac900d12357d2f1ec92a1f5dfe347a0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void setForeground (int columnIndex, Color value)", "signatureAfterChange": "  public void setText(String newText)", "diff": ["+", "+public void setText(String newText) {", "+\tcheckWidget();", "+\tTree2 parent = getParent();\t", "+\tString oldText = getText();", "+\tint redrawX = 0;", "+\tint redrawWidth = 0;", "+", "+\tif (newText == null) {", "+\t\terror(SWT.ERROR_NULL_ARGUMENT);", "+\t}", "+\tsuper.setText(newText);\t", "+\tif (newText.equals(oldText) == false) {", "+\t\tif (parent.getVisibleRedrawY(this) != -1) {", "+\t\t\tredrawX = getTextXPos();", "+\t\t\tredrawWidth = parent.getClientArea().width - redrawX;", "+\t\t}", "+\t\tparent.itemChanged(this, redrawX, redrawWidth);", "+\t}", "+}", "-}", "-public void setForeground (int columnIndex, Color value) {", "-\tcheckWidget ();", "-\tif (value != null && value.isDisposed ()) {", "-\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "-\t}", "-\tint validColumnCount = Math.max(1, parent.getColumnCount ());", "-\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return;", "-\tif (cellForeground == null) {", "-\t\tcellForeground = new Color [validColumnCount];", "-\t}", "-\tif (cellForeground [columnIndex] == value) return;", "-\tif (cellForeground [columnIndex] != null && cellForeground [columnIndex].equals (value)) return;", "-\tcellForeground [columnIndex] = value;", "-\tredrawItem ();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3fa558689b110fb3ca7ff06d115179f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tint[] contentView = new int[1];", "-\t\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "-\t\tOS.HIViewAddSubview(contentView[0], webViewHandle);", "-\t\tOS.HIViewChangeFeatures(webViewHandle, OS.kHIViewFeatureIsOpaque, 0);", "-\t} else {", "-\t\tOS.HIViewAddSubview(browser.handle, webViewHandle);", "-\t}", "+\tint[] contentView = new int[1];", "+\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "+\tOS.HIViewAddSubview(contentView[0], webViewHandle);", "+\tOS.HIViewChangeFeatures(webViewHandle, OS.kHIViewFeatureIsOpaque, 0);", "+", "-\t\t\t\t\tif (OS.HIVIEW) OS.DisposeControl(webViewHandle);", "+\t\t\t\t\tOS.DisposeControl(webViewHandle);", "-\t\t\t\t\tif (OS.HIVIEW) {", "-\t\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tOS.HIViewGetFrame(browser.handle, bounds);", "-\t\t\t\t\t}", "+\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "+\t\t\t\t\tint[] contentView = new int[1];", "+\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "+\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\tif (OS.HIVIEW) {", "-\t\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tOS.HIViewGetFrame(browser.handle, bounds);", "-\t\t\t\t\t}", "+\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "+\t\t\t\t\tint[] contentView = new int[1];", "+\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "+\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5491b7bbf044715978e06afb34bdc5c5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "70ad0effe5f094be7c9f0fc126e3f2ba49252b61", "commitAfterChange": "d04fb3f614d054ed3cf2600f4c59c394b9406469", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 90, "signatureBeforeChange": "  \tprivate boolean handleContextClick(int cHandle, MacPoint globalPos, MacEvent me)", "signatureAfterChange": "  \tprivate void handleContextClick(Menu cm, MacPoint globalPos, MacEvent me)", "diff": ["-\tprivate boolean handleContextClick(int cHandle, MacPoint globalPos, MacEvent me) {", "-\t\tif (OS.IsShowContextualMenuClick(me.getData())) {", "-\t\t\tWidget wc= WidgetTable.get(cHandle);", "-\t\t\tif (wc instanceof Control) {", "-\t\t\t\tMenu cm= ((Control)wc).getMenu();", "-\t\t\t\tif (cm != null) {", "-\t\t\t\t\tshort[] menuId= new short[1];", "-\t\t\t\t\tshort[] index= new short[1];", "-\t\t\t\t\t", "-\t\t\t\t\tfInContextMenu= true;", "-\t\t\t\t\t", "-\t\t\t\t\tint status= OS.kNoErr;", "-\t\t\t\t\tif (true) {", "-\t\t\t\t\t\tint result= OS.PopUpMenuSelect(cm.handle, (short)globalPos.getY(), (short)globalPos.getX(), (short)1);", "-\t\t\t\t\t\tmenuId[0]= OS.HiWord(result);", "-\t\t\t\t\t\tindex[0]= OS.LoWord(result);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\t// AW: not ready for primetime", "-\t\t\t\t\t\tstatus= OS.ContextualMenuSelect(cm.handle, globalPos.getData(), menuId, index);", "-\t\t\t\t\t}", "+\tprivate void handleContextClick(Menu cm, MacPoint globalPos, MacEvent me) {", "+\t\t", "+\t\tshort menuId;", "+\t\tshort index;", "+\t\t", "+\t\ttry {", "+\t\t\tfInContextMenu= true;", "+\t\t\tif (true) {", "+\t\t\t\tint result= OS.PopUpMenuSelect(cm.handle, (short)globalPos.getY(), (short)globalPos.getX(), (short)1);", "+\t\t\t\tif (result == OS.kNoErr)", "+\t\t\t\t\treturn;", "+\t\t\t\tmenuId= OS.HiWord(result);", "+\t\t\t\tindex= OS.LoWord(result);", "+\t\t\t} else {", "+\t\t\t\t// AW: not ready for primetime", "+\t\t\t\tshort[] id= new short[1];", "+\t\t\t\tshort[] ix= new short[1];", "+\t\t\t\tif (OS.ContextualMenuSelect(cm.handle, globalPos.getData(), id, ix) != OS.kNoErr)", "+\t\t\t\t\treturn;", "+\t\t\t\tmenuId= id[0];", "+\t\t\t\tindex= ix[0];", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tfInContextMenu= false;", "+\t\t}", "-\t\t\t\t\tfInContextMenu= false;", "-", "-\t\t\t\t\tif (status == OS.kNoErr) {", "-\t\t\t\t\t\tif (menuId[0] != 0) {", "-\t\t\t\t\t\t\tMenu menu2= cm.getShell().findMenu(menuId[0]);", "-\t\t\t\t\t\t\tif (menu2 != null) {", "-\t\t\t\t\t\t\t\t//System.out.println(\"handleMenu: \" + index[0]);", "-\t\t\t\t\t\t\t\tmenu2.handleMenu(index[0]);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\tif (menuId != 0) {", "+\t\t\tMenu menu= cm.getShell().findMenu(menuId);", "+\t\t\tif (menu != null) {", "+\t\t\t\t//System.out.println(\"handleMenu: \" + index);", "+\t\t\t\tmenu.handleMenu(index);", "-\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56309f23b1cf13c1b0f0973052da79ba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "66fbf00b16cbfd92f2e860b2a2c0976227853d36", "commitAfterChange": "ab0b2d3bbe9918e6c436a9c99106bcc28d4fcea4", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void select (TreeItem item)", "signatureAfterChange": " public void select (TreeItem item)", "diff": ["-\t\tint /*long*/ hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\tif (hItem != 0) {", "+\t\tint /*long*/ hItem = item.handle;", "+\t\tint state = 0;", "+\t\tif (OS.IsWinCE) {", "-\t\t\ttvItem.mask = OS.TVIF_HANDLE | OS.TVIF_STATE;", "-\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "+\t\t\ttvItem.mask = OS.TVIF_STATE;", "-\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {", "-\t\t\t\tif (hItem == item.handle) return;", "-\t\t\t\ttvItem.state = 0;", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "-\t\t\t}", "+\t\t\tstate = tvItem.state;", "+\t\t} else {", "+\t\t\tstate = (int)/*64*/OS.SendMessage (handle, OS.TVM_GETITEMSTATE, hItem, OS.TVIS_SELECTED);", "+\t\tif ((state & OS.TVIS_SELECTED) != 0) return;", "-\t\tignoreSelect = true;", "-\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, item.handle);", "-\t\tignoreSelect = false;", "+\t\tsetSelection (item);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9beaede5cd5084c747411bd14dc737d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ExpandItem.java", "commitBeforeChange": "f583b5839f2635fb53b19da7580dac5cb0826fec", "commitAfterChange": "f520a8dcf7987a68442ef89495b4518db5c9b2f5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void setBounds (int x, int y, int width, int height, boolean move, boolean size)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height, boolean move, boolean size)", "diff": ["-\tint flags = OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE | OS.SWP_NOSIZE | OS.SWP_NOMOVE;", "-\t\tflags &= ~OS.SWP_NOMOVE;", "-\t\tflags &= ~OS.SWP_NOSIZE;", "-\t\tint hwnd = control.handle;", "-\t\tSetWindowPos (hwnd, 0, x, y + headerHeight, width, height, flags);", "+\t\tif (move && size) control.setBounds (x, y + headerHeight, width, height);", "+\t\tif (move && !size) control.setLocation (x, y + headerHeight);", "+\t\tif (!move && size) control.setSize (width, height);"]}], "num": 29094}
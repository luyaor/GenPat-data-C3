{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "376608cf90f0a2c820104da5def35c00", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8405bd53f550780e7be50031d48ff10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "2909497e0bcb1e72bc32714fe007581c2de74fb2", "commitAfterChange": "2977d542e7dc870a3413dade3d6e2abaea7c2071", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  NSObject callJava (int index, int args, int arg1)", "signatureAfterChange": "  NSObject callJava (int index, int args, int arg1)", "diff": ["-\t\tObject temp = convertToJava (args);", "-\t\tif (temp instanceof Object[]) {", "-\t\t\tObject[] arguments = (Object[])temp;", "-\t\t\tObject key = new Integer (number.intValue ());", "-\t\t\tBrowserFunction function = (BrowserFunction)functions.get (key);", "-\t\t\tif (function != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\treturnValue = function.function (arguments);", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\treturnValue = ERROR_ID + ':' + e.getLocalizedMessage ();", "+\t\tObject key = new Integer (number.intValue ());", "+\t\tBrowserFunction function = (BrowserFunction)functions.get (key);", "+\t\tif (function != null) {", "+\t\t\ttry {", "+\t\t\t\tObject temp = convertToJava (args);", "+\t\t\t\tif (temp instanceof Object[]) {", "+\t\t\t\t\tObject[] arguments = (Object[])temp;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\treturnValue = function.function (arguments);", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t/* exception during function invocation */", "+\t\t\t\t\t\treturnValue = ERROR_ID + ':' + e.getLocalizedMessage ();", "+\t\t\t\t\t}", "+\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t/* invalid argument value type */", "+\t\t\t\tif (function.isEvaluate) {", "+\t\t\t\t\t/* notify the evaluate function so that a java exception can be thrown */", "+\t\t\t\t\tfunction.function (new String[] {ERROR_ID + ':' + new SWTException (SWT.ERROR_INVALID_RETURNVALUE).getLocalizedMessage ()});", "+\t\t\t\t}", "+\t\t\t\treturnValue = ERROR_ID + ':' + e.getLocalizedMessage ();", "-\treturn convertToJS (returnValue);", "+\ttry {", "+\t\treturn convertToJS (returnValue);", "+\t} catch (SWTException e) {", "+\t\t/* invalid return value type */", "+\t\treturn convertToJS (ERROR_ID + ':' + e.getLocalizedMessage ());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c110cb88950ded6eee2117cde7d66de0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "03c93f2721c126a3b6ac273ada9d6c5426e93da3", "commitAfterChange": "4ad626333e8039e9453025a86195b54b426bced6", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  int callJava (int index, int args, int arg1)", "signatureAfterChange": "  int callJava (int index, int args, int arg1)", "diff": ["-\t\tObject temp = convertToJava (args);", "-\t\tif (temp instanceof Object[]) {", "-\t\t\tObject[] arguments = (Object[])temp;", "-\t\t\tint functionIndex = Cocoa.objc_msgSend (index, Cocoa.S_intValue);", "-\t\t\tObject key = new Integer (functionIndex);", "-\t\t\tBrowserFunction function = (BrowserFunction)functions.get (key);", "-\t\t\tif (function != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\treturnValue = function.function (arguments);", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\treturnValue = ERROR_ID + ':' + e.getLocalizedMessage ();", "+\t\tint functionIndex = Cocoa.objc_msgSend (index, Cocoa.S_intValue);", "+\t\tObject key = new Integer (functionIndex);", "+\t\tBrowserFunction function = (BrowserFunction)functions.get (key);", "+\t\tif (function != null) {", "+\t\t\ttry {", "+\t\t\t\tObject temp = convertToJava (args);", "+\t\t\t\tif (temp instanceof Object[]) {", "+\t\t\t\t\tObject[] arguments = (Object[])temp;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\treturnValue = function.function (arguments);", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t/* exception during function invocation */", "+\t\t\t\t\t\treturnValue = ERROR_ID + ':' + e.getLocalizedMessage ();", "+\t\t\t\t\t}", "+\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t/* invalid argument value type */", "+\t\t\t\tif (function.isEvaluate) {", "+\t\t\t\t\t/* notify the evaluate function so that a java exception can be thrown */", "+\t\t\t\t\tfunction.function (new String[] {ERROR_ID + ':' + new SWTException (SWT.ERROR_INVALID_RETURNVALUE).getLocalizedMessage ()});", "+\t\t\t\t}", "+\t\t\t\treturnValue = ERROR_ID + ':' + e.getLocalizedMessage ();", "-\treturn convertToJS (returnValue);", "+\ttry {", "+\t\treturn convertToJS (returnValue);", "+\t} catch (SWTException e) {", "+\t\treturn convertToJS (ERROR_ID + ':' + e.getLocalizedMessage ());", "+\t}"]}], "num": 12410}
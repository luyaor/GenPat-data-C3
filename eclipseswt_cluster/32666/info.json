{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b290a84683be6efe5b8558af156bad33", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "484be2fbf3197e6b03b0b4d328c6b98d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "b055badbc52eef874ac04ced06c796aebe178c51", "commitAfterChange": "efd2b19e6f0f74c27009a05b4ddce186552ea417", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": "  boolean dragDetect (int x, int y)", "signatureAfterChange": "  boolean dragDetect (int x, int y, boolean filter, boolean [] consume)", "diff": ["-boolean dragDetect (int x, int y) {", "-\treturn hooks (SWT.DragDetect);", "+boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {", "+\tboolean quit = false, dragging = false;", "+\twhile (!quit) {", "+\t\tint /*long*/ eventPtr = 0;", "+\t\twhile (true) {", "+\t\t\teventPtr = OS.gdk_event_get ();", "+\t\t\tif (eventPtr != 0) {", "+\t\t\t\tbreak;", "+\t\t\t} else {", "+\t\t\t\ttry {Thread.sleep(50);} catch (Exception ex) {}", "+\t\t\t}", "+\t\t}", "+\t\tswitch (OS.GDK_EVENT_TYPE (eventPtr)) {", "+\t\t\tcase OS.GDK_MOTION_NOTIFY: {", "+\t\t\t\tGdkEventMotion gdkMotionEvent = new GdkEventMotion ();", "+\t\t\t\tOS.memmove (gdkMotionEvent, eventPtr, GdkEventMotion.sizeof);", "+\t\t\t\tif ((gdkMotionEvent.state & OS.GDK_BUTTON1_MASK) != 0) {", "+\t\t\t\t\tif (OS.gtk_drag_check_threshold (handle, x, y, (int) gdkMotionEvent.x, (int) gdkMotionEvent.y)) {", "+\t\t\t\t\t\tdragging = true;", "+\t\t\t\t\t\tquit = true;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tquit = true;", "+\t\t\t\t}", "+\t\t\t\tint [] newX = new int [1], newY = new int [1];", "+\t\t\t\tOS.gdk_window_get_pointer (gdkMotionEvent.window, newX, newY, null);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.GDK_BUTTON_RELEASE: {", "+\t\t\t\tOS.gdk_event_put (eventPtr);", "+\t\t\t\tquit = true;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.GDK_KEY_PRESS:", "+\t\t\tcase OS.GDK_KEY_RELEASE: {", "+\t\t\t\tGdkEventKey gdkEvent = new GdkEventKey ();", "+\t\t\t\tOS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);", "+\t\t\t\tif (gdkEvent.keyval == OS.GDK_Escape) quit = true;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.GDK_BUTTON_PRESS:", "+\t\t\tcase OS.GDK_2BUTTON_PRESS:", "+\t\t\tcase OS.GDK_3BUTTON_PRESS:", "+\t\t\t\tquit = true;", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tOS.gtk_main_do_event (eventPtr);", "+\t\t}", "+\t\tOS.gdk_event_free (eventPtr);", "+\t}", "+\treturn dragging;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b879e0ae337f66f0b81531cb7873ac5c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "fa71edc6cab350f1ca43d43c16e3d7bdcd14791d", "commitAfterChange": "a15d8c98d6d59bf299a4a1a7f87cc85b966e1e2e", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r \r int setGC()", "signatureAfterChange": "\r \r int setGC()", "diff": ["-\tif (data.image != null) return OS.PmMemStart(handle);\r", "-\telse if (data.rid == OS.Ph_DEV_RID || data.widget != 0) return OS.PgSetGC(handle);\r", "-\telse return 0;\r", "+\tint result = 0;\r", "+\tif (data.image != null) result = OS.PmMemStart(handle);\r", "+\telse if (data.rid == OS.Ph_DEV_RID || data.widget != 0) result = OS.PgSetGC(handle);\r", "+\telse return result;\r", "+\t\r", "+\tif (dirtyBits != 0) {\r", "+\t\tif ((dirtyBits & DIRTY_BACKGROUND) != 0) {\r", "+\t\t\tOS.PgSetFillColor(data.background);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_FOREGROUND) != 0) {\r", "+\t\t\tint foreColor = data.foreground;\r", "+\t\t\tOS.PgSetStrokeColor(foreColor);\r", "+\t\t\tOS.PgSetTextColor(foreColor);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_FONT) != 0) {\r", "+\t\t\tOS.PgSetFont(data.font);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_CLIPPING) != 0) {\r", "+\t\t\tOS.PgSetMultiClip(data.clipRectsCount, data.clipRects);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_LINESTYLE) != 0) {\r", "+\t\t\tbyte[] dashList = null;\r", "+\t\t\tswitch (data.lineStyle) {\r", "+\t\t\t\tcase SWT.LINE_SOLID: dashList = DashList[0]; break;\r", "+\t\t\t\tcase SWT.LINE_DASH:\tdashList = DashList[1]; break;\r", "+\t\t\t\tcase SWT.LINE_DOT: dashList = DashList[2]; break;\r", "+\t\t\t\tcase SWT.LINE_DASHDOT: dashList = DashList[3]; break;\r", "+\t\t\t\tcase SWT.LINE_DASHDOTDOT: dashList = DashList[4]; break;\r", "+\t\t\t}\r", "+\t\t\tOS.PgSetStrokeDash(dashList, dashList.length, 0x10000);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_LINEWIDTH) != 0) {\r", "+\t\t\tOS.PgSetStrokeWidth(data.lineWidth);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_XORMODE) != 0) {\r", "+\t\t\tif (data.xorMode) OS.PgSetDrawMode(OS.Pg_DRAWMODE_XOR);\r", "+\t\t\telse OS.PgSetDrawMode(OS.Pg_DRAWMODE_OPAQUE);\r", "+\t\t}\r", "+\t\tdirtyBits = 0;\r", "+\t}\r", "+\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5604761b6b2ad788b56aa278149de15b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \r void resizeClientArea (int width, int height)", "signatureAfterChange": "\r \r void resizeClientArea (int width, int height)", "diff": ["+\tif (scrolledHandle == 0) return;\r", "+\t\r", "+\t/* Calculate the insets */\r", "+\tint [] args = {\r", "+\t\tOS.Pt_ARG_BASIC_FLAGS, 0, 0,\r", "+\t\tOS.Pt_ARG_BEVEL_WIDTH, 0, 0,\r", "+\t};\r", "+\tOS.PtGetResources (scrolledHandle, args.length / 3, args);\r", "+\tint flags = args [1];\r", "+\tint bevel = args [4];\r", "+\tint top = 0, left = 0, right = 0, bottom = 0;\r", "+\tif ((flags & OS.Pt_TOP_ETCH) != 0) top++;\r", "+\tif ((flags & OS.Pt_TOP_OUTLINE) != 0) top++;\r", "+\tif ((flags & OS.Pt_TOP_INLINE) != 0) top++;\r", "+\tif ((flags & OS.Pt_TOP_BEVEL) != 0) top += bevel;\r", "+\tif ((flags & OS.Pt_BOTTOM_ETCH) != 0) bottom++;\r", "+\tif ((flags & OS.Pt_BOTTOM_OUTLINE) != 0) bottom++;\r", "+\tif ((flags & OS.Pt_BOTTOM_INLINE) != 0) bottom++;\r", "+\tif ((flags & OS.Pt_BOTTOM_BEVEL) != 0) bottom += bevel;\r", "+\tif ((flags & OS.Pt_RIGHT_ETCH) != 0) right++;\r", "+\tif ((flags & OS.Pt_RIGHT_OUTLINE) != 0) right++;\r", "+\tif ((flags & OS.Pt_RIGHT_INLINE) != 0) right++;\r", "+\tif ((flags & OS.Pt_RIGHT_BEVEL) != 0) right += bevel;\r", "+\tif ((flags & OS.Pt_LEFT_ETCH) != 0) left++;\r", "+\tif ((flags & OS.Pt_LEFT_OUTLINE) != 0) left++;\r", "+\tif ((flags & OS.Pt_LEFT_INLINE) != 0) left++;\r", "+\tif ((flags & OS.Pt_LEFT_BEVEL) != 0) left += bevel;\r", "+\t\r", "+\tint clientWidth = width - (left + right);\r", "+\tint clientHeight = height - (top + bottom);\r", "+\r", "-\t\tint [] args = {OS.Pt_ARG_HEIGHT, 0, 0};\r", "+\t\targs = new int [] {OS.Pt_ARG_HEIGHT, 0, 0};\r", "-\t\theight = height - (hBarHeight = args [1]);\r", "+\t\tclientHeight -= (hBarHeight = args [1]);\r", "-\t\tint [] args = {OS.Pt_ARG_WIDTH, 0, 0};\r", "+\t\targs = new int [] {OS.Pt_ARG_WIDTH, 0, 0};\r", "-\t\twidth = width - (vBarWidth = args [1]);\r", "-\t}\r", "-\t\r", "-\t//NOT DONE - used widget canvas to compute insets\r", "-\tint left = 0, right = 0;\r", "-\tif (hasBorder ()) {\r", "-\t\tleft = 2;\r", "-\t\tif (isVisibleHBar && isVisibleVBar) right = 3;\r", "+\t\tclientWidth -= (vBarWidth = args [1]);\r", "-\t\thorizontalBar.setBounds (-left, height - left, width + right, hBarHeight); \r", "+\t\thorizontalBar.setBounds (0, clientHeight, clientWidth, hBarHeight);\r", "-\t\tverticalBar.setBounds (width - left, -left, vBarWidth, height + right); \r", "+\t\tverticalBar.setBounds (clientWidth, 0, vBarWidth, clientHeight);\r", "-\t\r", "-\tPhArea_t area = new PhArea_t ();\r", "-\tarea.size_w = (short) (Math.max (width - (left * 2), 0));\r", "-\tarea.size_h = (short) (Math.max (height - (left * 2), 0));\r", "-\tint ptr = OS.malloc (PhArea_t.sizeof);\r", "-\tOS.memmove (ptr, area, PhArea_t.sizeof);\r", "-\tint [] args = {OS.Pt_ARG_AREA, ptr, 0};\r", "+\targs = new int [] {\r", "+\t\tOS.Pt_ARG_WIDTH, Math.max (clientWidth, 0), 0,\r", "+\t\tOS.Pt_ARG_HEIGHT, Math.max (clientHeight, 0), 0,\r", "+\t};\r", "-\tOS.free (ptr);\r"]}], "num": 32666}
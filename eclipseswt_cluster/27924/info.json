{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "674fd8681a87d5e41f13c3fb1ecdf9be", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5604761b6b2ad788b56aa278149de15b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \r void resizeClientArea (int width, int height)", "signatureAfterChange": "\r \r void resizeClientArea (int width, int height)", "diff": ["+\tif (scrolledHandle == 0) return;\r", "+\t\r", "+\t/* Calculate the insets */\r", "+\tint [] args = {\r", "+\t\tOS.Pt_ARG_BASIC_FLAGS, 0, 0,\r", "+\t\tOS.Pt_ARG_BEVEL_WIDTH, 0, 0,\r", "+\t};\r", "+\tOS.PtGetResources (scrolledHandle, args.length / 3, args);\r", "+\tint flags = args [1];\r", "+\tint bevel = args [4];\r", "+\tint top = 0, left = 0, right = 0, bottom = 0;\r", "+\tif ((flags & OS.Pt_TOP_ETCH) != 0) top++;\r", "+\tif ((flags & OS.Pt_TOP_OUTLINE) != 0) top++;\r", "+\tif ((flags & OS.Pt_TOP_INLINE) != 0) top++;\r", "+\tif ((flags & OS.Pt_TOP_BEVEL) != 0) top += bevel;\r", "+\tif ((flags & OS.Pt_BOTTOM_ETCH) != 0) bottom++;\r", "+\tif ((flags & OS.Pt_BOTTOM_OUTLINE) != 0) bottom++;\r", "+\tif ((flags & OS.Pt_BOTTOM_INLINE) != 0) bottom++;\r", "+\tif ((flags & OS.Pt_BOTTOM_BEVEL) != 0) bottom += bevel;\r", "+\tif ((flags & OS.Pt_RIGHT_ETCH) != 0) right++;\r", "+\tif ((flags & OS.Pt_RIGHT_OUTLINE) != 0) right++;\r", "+\tif ((flags & OS.Pt_RIGHT_INLINE) != 0) right++;\r", "+\tif ((flags & OS.Pt_RIGHT_BEVEL) != 0) right += bevel;\r", "+\tif ((flags & OS.Pt_LEFT_ETCH) != 0) left++;\r", "+\tif ((flags & OS.Pt_LEFT_OUTLINE) != 0) left++;\r", "+\tif ((flags & OS.Pt_LEFT_INLINE) != 0) left++;\r", "+\tif ((flags & OS.Pt_LEFT_BEVEL) != 0) left += bevel;\r", "+\t\r", "+\tint clientWidth = width - (left + right);\r", "+\tint clientHeight = height - (top + bottom);\r", "+\r", "-\t\tint [] args = {OS.Pt_ARG_HEIGHT, 0, 0};\r", "+\t\targs = new int [] {OS.Pt_ARG_HEIGHT, 0, 0};\r", "-\t\theight = height - (hBarHeight = args [1]);\r", "+\t\tclientHeight -= (hBarHeight = args [1]);\r", "-\t\tint [] args = {OS.Pt_ARG_WIDTH, 0, 0};\r", "+\t\targs = new int [] {OS.Pt_ARG_WIDTH, 0, 0};\r", "-\t\twidth = width - (vBarWidth = args [1]);\r", "-\t}\r", "-\t\r", "-\t//NOT DONE - used widget canvas to compute insets\r", "-\tint left = 0, right = 0;\r", "-\tif (hasBorder ()) {\r", "-\t\tleft = 2;\r", "-\t\tif (isVisibleHBar && isVisibleVBar) right = 3;\r", "+\t\tclientWidth -= (vBarWidth = args [1]);\r", "-\t\thorizontalBar.setBounds (-left, height - left, width + right, hBarHeight); \r", "+\t\thorizontalBar.setBounds (0, clientHeight, clientWidth, hBarHeight);\r", "-\t\tverticalBar.setBounds (width - left, -left, vBarWidth, height + right); \r", "+\t\tverticalBar.setBounds (clientWidth, 0, vBarWidth, clientHeight);\r", "-\t\r", "-\tPhArea_t area = new PhArea_t ();\r", "-\tarea.size_w = (short) (Math.max (width - (left * 2), 0));\r", "-\tarea.size_h = (short) (Math.max (height - (left * 2), 0));\r", "-\tint ptr = OS.malloc (PhArea_t.sizeof);\r", "-\tOS.memmove (ptr, area, PhArea_t.sizeof);\r", "-\tint [] args = {OS.Pt_ARG_AREA, ptr, 0};\r", "+\targs = new int [] {\r", "+\t\tOS.Pt_ARG_WIDTH, Math.max (clientWidth, 0), 0,\r", "+\t\tOS.Pt_ARG_HEIGHT, Math.max (clientHeight, 0), 0,\r", "+\t};\r", "-\tOS.free (ptr);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9694dc52ba0ba3553598e589b2736f38", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r \r int processPaint (int callData)", "signatureAfterChange": "\r int processPaint (int callData)", "diff": ["+}\r", "-\t\r", "-\tint [] argList = {OS.XmNcolormap, 0, OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNmarginWidth, 0, OS.XmNmarginHeight, 0};\r", "+\tint [] argList = {\r", "+\t\tOS.XmNcolormap, 0,\r", "+\t\tOS.XmNwidth, 0,\r", "+\t\tOS.XmNheight, 0,\r", "+\t};\r", "-\tint x = 0, y = 0, width = argList [3], height = argList [5], marginWidth = argList [7],  marginHeight = argList [9];\r", "+\tint width = argList [3], height = argList [5];\r", "+\tImage currentImage = image;\r", "+\tboolean enabled = getEnabled();\r", "+\r", "+\tif ((parent.style & SWT.FLAT) != 0) {\r", "+\t\tDisplay display = getDisplay ();\r", "+\t\tboolean hasCursor = hasCursor ();\r", "+\t\t\r", "+\t\t/* Set the shadow thickness */\r", "+\t\tint thickness = 0;\r", "+\t\tif (set || (hasCursor && enabled)) {\r", "+\t\t\tthickness = Math.min (2, display.buttonShadowThickness);\r", "+\t\t}\r", "+\t\targList = new int [] {OS.XmNshadowThickness, thickness};\r", "+\t\tOS.XtSetValues (handle, argList, argList.length / 2);\r", "+\t\t\r", "+\t\t/* Determine if hot image should be used */\r", "+\t\tif (enabled && hasCursor && hotImage != null) {\r", "+\t\t\tcurrentImage = hotImage;\r", "+\t\t}\r", "+\t}\r", "+\r", "-\tImage currentImage = drawHotImage ? hotImage : image;\r", "-\tif (!getEnabled()) {\r", "+\tif (!enabled) {\r", "-\t\tColor disabledColor = display.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);\r", "-\t\tgc.setForeground(disabledColor);\r", "+\t\tColor disabledColor = display.getSystemColor (SWT.COLOR_WIDGET_NORMAL_SHADOW);\r", "+\t\tgc.setForeground (disabledColor);\r", "-\tif (text != null && text.length() > 0) {\r", "-\t\tPoint textExtent = gc.textExtent(text);\r", "+\tif (text.length () != 0) {\r", "+\t\tPoint textExtent = gc.textExtent (text);\r", "-\t\tRectangle imageBounds = currentImage.getBounds();\r", "+\t\tRectangle imageBounds = currentImage.getBounds ();\r", "-\tif ((parent.style & SWT.RIGHT) > 0) {\r", "-\t\timageX = x + ((width - imageWidth - textWidth - marginWidth) / 2) + 1;\r", "-\t\timageY = y + ((height - imageHeight) / 2);\r", "-\t\ttextX = imageX + imageWidth + marginWidth;\r", "-\t\ttextY = y + ((height - textHeight) / 2);\r", "+\tint spacing = 0;\r", "+\tif (textWidth != 0 && imageWidth != 0) spacing = 2;\r", "+\tif ((parent.style & SWT.RIGHT) != 0) {\r", "+\t\timageX = (width - imageWidth - textWidth - spacing) / 2;\r", "+\t\timageY = (height - imageHeight) / 2;\r", "+\t\ttextX = spacing + imageX + imageWidth;\r", "+\t\ttextY = (height - textHeight) / 2;\r", "-\t\timageX = x + ((width - imageWidth) / 2) + 1;\r", "-\t\timageY = y + ((height - imageHeight - textHeight - marginHeight) / 2) + 1;\r", "-\t\ttextX = x + ((width - textWidth) / 2) + 2;\r", "-\t\ttextY = imageY + imageHeight + marginHeight;\r", "+\t\timageX = (width - imageWidth) / 2;\r", "+\t\timageY = (height - imageHeight - textHeight - spacing) / 2;\r", "+\t\ttextX = (width - textWidth) / 2;\r", "+\t\ttextY = spacing + imageY + imageHeight;\r", "+\tif ((style & SWT.DROP_DOWN) != 0) {\r", "+\t\ttextX -= 6;  imageX -=6;\r", "+\t}\r", "-\r", "+\tif ((style & SWT.DROP_DOWN) != 0) {\r", "+\t\tint startX = width - 12, startY = (height - 2) / 2;\r", "+\t\tint [] arrow = {startX, startY, startX + 3, startY + 3, startX + 6, startY};\r", "+\t\tgc.setBackground (parent.getForeground ());\r", "+\t\tgc.fillPolygon (arrow);\r", "+\t\tgc.drawPolygon (arrow);\r", "+\t}\r", "-\tif (!getEnabled() && disabledImage == null) {\r", "+\tif (!enabled && disabledImage == null) {\r"]}], "num": 27924}
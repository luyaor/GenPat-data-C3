{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "891e6d5936a2e198ecf6c39c27062646", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6e083e014c55be9243005bfc5243317", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "5e356c18b07e7f5af1a6b17c096783ad43ee7650", "commitAfterChange": "bec9de216652a0f1829bdec4dfa5d60c81e5e090", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "  ImageData cde_getImageData()", "signatureAfterChange": "  ImageData cde_getImageData()", "diff": ["-\tint\txDisplay = display.xDisplay;", "-\tint screen  = OS.XDefaultScreenOfDisplay( xDisplay );", "-\tint fgPixel = OS.XWhitePixel( display.xDisplay, OS.XDefaultScreen( xDisplay ) );", "-\tint bgPixel = OS.XBlackPixel( display.xDisplay, OS.XDefaultScreen( xDisplay ) );", "+\tint xDisplay = display.xDisplay;", "+\tint screen  = OS.XDefaultScreenOfDisplay(xDisplay);", "+\tint fgPixel = OS.XWhitePixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "+\tint bgPixel = OS.XBlackPixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "-\tString icon = cde_getAttribute( name, CDE.DtDTS_DA_ICON );", "-\tbyte [] iconName;", "-\tbyte [] maskName = null;", "-\tint    pixmap = 0;", "-\tfor (int index = 0; index < cdeIconExt.length && pixmap == 0; index++) {", "+\tString icon = cde_getAttribute(name, CDE.DtDTS_DA_ICON);", "+\tbyte[] iconName;", "+\tbyte[] maskName = null;", "+\tint pixmap = 0;", "+\tfor (int index = 0; index < CDE_ICON_EXT.length && pixmap == 0; index++) {", "-\t\ticonName = Converter.wcsToMbcs (null, icon + cdeIconExt[ index ], true);", "-\t\tmaskName = Converter.wcsToMbcs (null, icon + cdeMaskExt[ index ], true);", "-\t\tpixmap = OS.XmGetPixmap( screen, iconName, fgPixel, bgPixel );", "+\t\ticonName = Converter.wcsToMbcs(null, icon + CDE_ICON_EXT[index], true);", "+\t\tmaskName = Converter.wcsToMbcs(null, icon + CDE_MASK_EXT[index], true);", "+\t\tpixmap = OS.XmGetPixmap(screen, iconName, fgPixel, bgPixel);", "-   }", "-    ", "+\t}", "-\t\t// When creating the mask pixmap, do not use the screen's white and black", "-\t\t// pixel for the foreground and background respectively, because on some", "-\t\t// X servers (e.g., Solaris) pixel 0 is white and pixel 1 is black. Passing", "-\t\t// (screen, name, whitePixel, blackPixel, 1) to get the mask pixmap will", "-\t\t// result in an inverted mask. Instead explicitly use 1 (FG) and 0 (BG).", "-\t\tint mask = OS.XmGetPixmapByDepth( screen, maskName, 1, 0, 1 );", "+\t\t/* When creating the mask pixmap, do not use the screen's white and black", "+\t\t * pixel for the foreground and background respectively, because on some", "+\t\t * X servers (e.g., Solaris) pixel 0 is white and pixel 1 is black. Passing", "+\t\t * (screen, name, whitePixel, blackPixel, 1) to get the mask pixmap will", "+\t\t * result in an inverted mask. Instead explicitly use 1 (FG) and 0 (BG).", "+\t\t */", "+\t\tint mask = OS.XmGetPixmapByDepth(screen, maskName, 1, 0, 1);", "-\t\tImage image = Image.motif_new (display, type, pixmap, mask );", "+\t\tImage image = Image.motif_new(display, type, pixmap, mask);", "-\t\t// The pixmaps returned from XmGetPixmap... are cached by Motif", "-\t\t// and must be deleted by XmDestroyPixmap. Because they cannot", "-\t\t// be deleted directly by XFreePixmap, image.dispose() must not", "-\t\t// be called. The following code should do an equivalent image.dispose().", "-\t\tOS.XmDestroyPixmap( screen, pixmap );", "-\t\tif (mask != 0) OS.XmDestroyPixmap( screen, mask ); ", "+\t\t/* The pixmaps returned from XmGetPixmap... are cached by Motif", "+\t\t * and must be deleted by XmDestroyPixmap. Because they cannot", "+\t\t * be deleted directly by XFreePixmap, image.dispose() must not", "+\t\t * be called. The following code should do an equivalent image.dispose().", "+\t\t */", "+\t\tOS.XmDestroyPixmap(screen, pixmap);", "+\t\tif (mask != 0) OS.XmDestroyPixmap(screen, mask); ", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9abc556cf56261805e6d466d4200f92", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 7, "signatureBeforeChange": "  ImageData cde_getImageData()", "signatureAfterChange": " ImageData cde_getImageData()", "diff": ["+ImageData cde_getImageData() {", "+\tif (iconPath == null) return null;", "+\tint xDisplay = display.xDisplay;", "+\tint screen  = OS.XDefaultScreenOfDisplay(xDisplay);", "+\tint fgPixel = OS.XWhitePixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "+\tint bgPixel = OS.XBlackPixel(display.xDisplay, OS.XDefaultScreen(xDisplay));\t", "+\tbyte[] iconName;", "+\tbyte[] maskName = null;", "+\tint pixmap = 0;", "+\tfor (int index = 0; index < CDE_ICON_EXT.length && pixmap == 0; index++) {", "+\t\t/* Use the character encoding for the default locale */", "+\t\ticonName = Converter.wcsToMbcs(null, iconPath + CDE_ICON_EXT[index], true);", "+\t\tmaskName = Converter.wcsToMbcs(null, iconPath + CDE_MASK_EXT[index], true);", "+\t\tpixmap = OS.XmGetPixmap(screen, iconName, fgPixel, bgPixel);", "+\t\tif (pixmap == OS.XmUNSPECIFIED_PIXMAP) pixmap = 0;", "+\t}", "+\tif (pixmap != 0) {", "+\t\tint type = SWT.ICON;", "+\t\t/* When creating the mask pixmap, do not use the screen's white and black", "+\t\t * pixel for the foreground and background respectively, because on some", "+\t\t * X servers (e.g., Solaris) pixel 0 is white and pixel 1 is black. Passing", "+\t\t * (screen, name, whitePixel, blackPixel, 1) to get the mask pixmap will", "+\t\t * result in an inverted mask. Instead explicitly use 1 (FG) and 0 (BG).", "+\t\t */", "+\t\tint mask = OS.XmGetPixmapByDepth(screen, maskName, 1, 0, 1);", "+\t\tif (mask == OS.XmUNSPECIFIED_PIXMAP) {", "+\t\t\ttype = SWT.BITMAP;", "+\t\t\tmask = 0;", "+\t\t}", "+\t\tImage image = Image.motif_new(display, type, pixmap, mask);", "+\t\tImageData imageData = image.getImageData();", "+\t\t", "+\t\t/* The pixmaps returned from XmGetPixmap... are cached by Motif", "+\t\t * and must be deleted by XmDestroyPixmap. Because they cannot", "+\t\t * be deleted directly by XFreePixmap, image.dispose() must not", "+\t\t * be called. The following code should do an equivalent image.dispose().", "+\t\t */", "+\t\tOS.XmDestroyPixmap(screen, pixmap);", "+\t\tif (mask != 0) OS.XmDestroyPixmap(screen, mask); ", "+\t\treturn imageData;\t\t", "+\t}", "+\treturn null;\t", "+}", "-", "-ImageData cde_getImageData() {", "-\tint xDisplay = display.xDisplay;", "-\tint screen  = OS.XDefaultScreenOfDisplay(xDisplay);", "-\tint fgPixel = OS.XWhitePixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "-\tint bgPixel = OS.XBlackPixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "-\t", "-\tString icon = cde_getAttribute(name, CDE.DtDTS_DA_ICON);", "-\tbyte[] iconName;", "-\tbyte[] maskName = null;", "-\tint pixmap = 0;", "-\tfor (int index = 0; index < CDE_ICON_EXT.length && pixmap == 0; index++) {", "-\t\t/* Use the character encoding for the default locale */", "-\t\ticonName = Converter.wcsToMbcs(null, icon + CDE_ICON_EXT[index], true);", "-\t\tmaskName = Converter.wcsToMbcs(null, icon + CDE_MASK_EXT[index], true);", "-\t\tpixmap = OS.XmGetPixmap(screen, iconName, fgPixel, bgPixel);", "-\t\tif (pixmap == OS.XmUNSPECIFIED_PIXMAP) pixmap = 0;", "-\t}", "-\tif (pixmap != 0) {", "-\t\tint type = SWT.ICON;", "-\t\t/* When creating the mask pixmap, do not use the screen's white and black", "-\t\t * pixel for the foreground and background respectively, because on some", "-\t\t * X servers (e.g., Solaris) pixel 0 is white and pixel 1 is black. Passing", "-\t\t * (screen, name, whitePixel, blackPixel, 1) to get the mask pixmap will", "-\t\t * result in an inverted mask. Instead explicitly use 1 (FG) and 0 (BG).", "-\t\t */", "-\t\tint mask = OS.XmGetPixmapByDepth(screen, maskName, 1, 0, 1);", "-\t\tif (mask == OS.XmUNSPECIFIED_PIXMAP) {", "-\t\t\ttype = SWT.BITMAP;", "-\t\t\tmask = 0;", "-\t\t}", "-\t\tImage image = Image.motif_new(display, type, pixmap, mask);", "-\t\tImageData imageData = image.getImageData();", "-\t\t", "-\t\t/* The pixmaps returned from XmGetPixmap... are cached by Motif", "-\t\t * and must be deleted by XmDestroyPixmap. Because they cannot", "-\t\t * be deleted directly by XFreePixmap, image.dispose() must not", "-\t\t * be called. The following code should do an equivalent image.dispose().", "-\t\t */", "-\t\tOS.XmDestroyPixmap(screen, pixmap);", "-\t\tif (mask != 0) OS.XmDestroyPixmap(screen, mask); ", "-\t\treturn imageData;\t\t", "-\t}", "-\treturn null;\t"]}], "num": 42344}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f12644aa81a7a3ba92e3926924aa59db", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "511efb60e0ecac3b0930147926660802", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r \r public void setText (String string)", "signatureAfterChange": "\r \r public void setText (String string)", "diff": ["-\t}\t\r", "-\tbyte [] buffer2;\r", "+\t}\r", "+\tint keyMods = 0; \r", "+\tbyte [] buffer2 = new byte [1];\r", "-\t\tchar [] accelText = new char [text.length - i];\r", "-\t\tSystem.arraycopy (text, i, accelText, 0, accelText.length);\r", "-\t\tbuffer2 = Converter.wcsToMbcs (null, accelText, true);\r", "-\t} else {\r", "-\t\tbuffer2 = new byte [1];\r", "+\t\tint start = i;\r", "+//\t\twhile (i < text.length) {\r", "+//\t\t\tif (text [i] == '+') {\r", "+//\t\t\t\tString str = new String (text, start, i - start);\r", "+//\t\t\t\tif (str.equals (\"Ctrl\")) keyMods |= OS.Pk_KM_Ctrl;\r", "+//\t\t\t\tif (str.equals (\"Shift\")) keyMods |= OS.Pk_KM_Shift;\r", "+//\t\t\t\tif (str.equals (\"Alt\")) keyMods |= OS.Pk_KM_Alt;\r", "+//\t\t\t\tstart = i + 1;\r", "+//\t\t\t}\r", "+//\t\t\ti++;\r", "+//\t\t}\r", "+\t\tif (start < text.length) {\r", "+\t\t\tchar [] accelText = new char [text.length - start];\r", "+\t\t\tSystem.arraycopy (text, start, accelText, 0, accelText.length);\r", "+\t\t\tbuffer2 = Converter.wcsToMbcs (null, accelText, true);\r", "+\t\t}\r", "-\tint ptr = OS.malloc (buffer1.length);\r", "-\tOS.memmove (ptr, buffer1, buffer1.length);\r", "+\tint ptr1 = OS.malloc (buffer1.length);\r", "+\tOS.memmove (ptr1, buffer1, buffer1.length);\r", "+\tint ptr2 = OS.malloc (buffer2.length);\r", "+\tOS.memmove (ptr2, buffer2, buffer2.length);\r", "+\tif ((parent.style & SWT.BAR) != 0) {\r", "+\t\treplaceMnemonic (mnemonic, OS.Pk_KM_Alt);\r", "+\t}\r", "-\t\tOS.Pt_ARG_TEXT_STRING, ptr, 0,\r", "+\t\tOS.Pt_ARG_TEXT_STRING, ptr1, 0,\r", "+\t\tOS.Pt_ARG_ACCEL_TEXT, ptr2, 0,\r", "+\t\tOS.Pt_ARG_MODIFIER_KEYS, keyMods, keyMods,\r", "-\tOS.free (ptr);\r", "+\tOS.free (ptr1);\r", "+\tOS.free (ptr2);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e09de9503f6d82b84bd48a906a10cda8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "fe9cf8b69b05605c0699efe7aea722d3e2396198", "commitAfterChange": "a76fbcdb2bea80d2aa22d622558bd4081d9e971a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["-\tchar [] unicode = new char [string.length ()];", "-\tstring.getChars (0, unicode.length, unicode, 0);", "-\tint i=0, j=0;", "-\tchar mnemonic=0;", "-\twhile (i < unicode.length) {", "-\t\tif ((unicode [j++] = unicode [i++]) == Mnemonic) {", "-\t\t\tif (i == unicode.length) {continue;}", "-\t\t\tif (unicode [i] == Mnemonic) {i++; continue;}", "-\t\t\tif (mnemonic == 0) mnemonic = unicode [i];", "-\t\t\tj--;", "-\t\t}", "-\t}", "-\twhile (j < unicode.length) unicode [j++] = 0;", "+\tchar [] text = new char [string.length ()];", "+\tstring.getChars (0, text.length, text, 0);", "+\tchar mnemonic = fixMnemonic (text);", "-\t\tif (mnemonic != '\\0') string = new String (unicode);", "-\t\tstring = display.wrapText (string, font, width);", "+\t\tstring = display.wrapText (new String (text), font, width);", "-\t\tbuffer = Converter.wcsToMbcs (null, unicode, true);", "+\t\tbuffer = Converter.wcsToMbcs (null, text, true);", "-\tint ptr = OS.malloc (buffer.length);", "-\tOS.memmove (ptr, buffer, buffer.length);", "+\tint ptr1 = OS.malloc (buffer.length);", "+\tOS.memmove (ptr1, buffer, buffer.length);", "-\t\tOS.Pt_ARG_TEXT_STRING, ptr, 0,", "+\t\tOS.Pt_ARG_TEXT_STRING, ptr1, 0,", "-\tOS.free (ptr);", "+\tOS.free (ptr1);"]}], "num": 48001}
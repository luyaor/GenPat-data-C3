{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "020740a93b46f91598dac7b4f4c61a26", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f97664bfd23d2e7d64c6af24335102c1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 88, "signatureBeforeChange": " void itemChanged(SelectableItem changedItem, int repaintStartX, int repaintWidth)", "signatureAfterChange": " void updateHorizontalBar()", "diff": ["- */", "-void itemChanged(SelectableItem changedItem, int repaintStartX, int repaintWidth) {", "-\tint oldItemHeight = getItemHeight();\t", "-\tPoint oldImageExtent = getImageExtent();", "-\t", "-\tif (isExpandingItem(changedItem) == false) {", "-\t\tsuper.itemChanged(changedItem, repaintStartX, repaintWidth);", "-\t}", "-\telse {", "-\t\tcalculateItemHeight(changedItem);", "-\t}", "-\tif ((oldItemHeight != getItemHeight()) ||\t\t\t// only reset items if the item height or", "-\t\t(oldImageExtent != getImageExtent())) {\t\t\t// image size has changed. The latter will only change once, ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t// from null to a value-so it's safe to test using !=", "-\t\tgetRoot().reset();\t\t\t\t\t\t\t\t// reset cached data of all items in the receiver", "-\t\tresetHierarchyIndicatorRect();", "-\t\tredraw();\t\t\t\t\t\t\t\t\t\t// redraw all items if the image extent has changed. Fixes 1FRIHPZ\t\t", "-\t}", "-\telse {", "-\t\t((AbstractTreeItem) changedItem).reset();\t\t// reset the item that has changed when the tree item ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t// height has not changed (otherwise the item caches old data)", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Fixes 1FF6B42", "-\t}", "-\tif (repaintWidth != 0) {", "-\t\tcalculateWidestShowingItem();", "-\t\tclaimRightFreeSpace();\t\t\t\t\t\t\t\t// otherwise scroll bar may be reset, but not horizontal offset", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Fixes 1G4SBJ3", "-\t}", "-}", "+ */", "+void updateHorizontalBar() {", "+\t// TODO revisit", "+\t", "+\t/* the horizontal range is never affected by an item change if there are columns */", "+\tif (getColumnCount() > 0) return;", "+\t", "+\tScrollBar hBar = getHorizontalBar();", "+\tint maxX = 0;", "+\tfor (int i = 0; i < availableItems.length; i++) {", "+\t\tRectangle itemBounds = availableItems[i].getBounds ();", "+\t\tint rightmostX = itemBounds.x + itemBounds.width;", "+\t\tmaxX = Math.max (maxX, rightmostX);", "+\t}", "+\t", "+\thBar.setMaximum(maxX);", "+\tint thumb = Math.min(maxX, getClientArea().width);", "+\thBar.setThumb(thumb);", "+\t", "+\t/* reclaim any space now left on the right */", "+\tif (maxX < horizontalOffset + thumb) {", "+\t\thorizontalOffset = maxX - thumb;", "+\t\thBar.setSelection(horizontalOffset);", "+\t\tredraw();", "+\t}", "+\t", "+\t/* ", "+\t * The following is intentionally commented, for future reference", "+\t */", "+//\t\tif (nowAvailable) {", "+//\t\t\tif (rightX <= hBar.getMaximum()) return;", "+//\t\t\tint maximum = Math.max(1, rightX);", "+//\t\t\thBar.setMaximum(maximum);", "+//\t\t\thBar.setThumb(getClientArea().width);", "+//\t\t\treturn;", "+//\t\t}", "+//\t\t", "+//\t\t/* item has become unavailable */", "+//\t\tint barMaximum = hBar.getMaximum();", "+//\t\tif (rightX < barMaximum) return;", "+//\t\t", "+//\t\t/* compute new maximum value */", "+//\t\tint newMaxX = 1;", "+//\t\tfor (int i = 0; i < availableItems.length; i++) {", "+//\t\t\tint maxX = availableItems[i].getRightmostX();", "+//\t\t\tif (newMaxX < maxX) newMaxX = maxX;", "+//\t\t}", "+//\t\tif (newMaxX == barMaximum) return;", "+//\t\thBar.setMaximum(newMaxX);", "+//\t\thBar.setThumb(getClientArea().width);", "+//\t\t", "+//\t\t/* reclaim any space now left on the right side */", "+//\t\thorizontalOffset += newMaxX - barMaximum;", "+//\t\thBar.setSelection(horizontalOffset);", "+//\t\tredraw();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "874b7c0511332055d8fc0bbfc2916791", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "b609e78649d0a24ab2d37dea4f5d376e9b5ef164", "commitAfterChange": "4af2139bd60e8934fe7b368dd056a1828221ecd7", "methodNumberBeforeChange": 369, "methodNumberAfterChange": 372, "signatureBeforeChange": " void setScrollBars(boolean vertical)", "signatureAfterChange": " void setScrollBars(boolean vertical)", "diff": ["-\tint inactive = 1;", "-\tif (vertical || !isFixedLineHeight()) {", "-\t\tScrollBar verticalBar = getVerticalBar();", "-\t\tif (verticalBar != null) {", "-\t\t\tint maximum = renderer.getHeight();", "-\t\t\t// only set the real values if the scroll bar can be used ", "-\t\t\t// (ie. because the thumb size is less than the scroll maximum)", "-\t\t\t// avoids flashing on Motif, fixes 1G7RE1J and 1G5SE92", "-\t\t\tif (clientAreaHeight < maximum) {", "-\t\t\t\tverticalBar.setMaximum(maximum - topMargin - bottomMargin);", "-\t\t\t\tverticalBar.setThumb(clientAreaHeight - topMargin - bottomMargin);", "-\t\t\t\tverticalBar.setPageIncrement(clientAreaHeight - topMargin - bottomMargin);", "-\t\t\t} else if (verticalBar.getThumb() != inactive || verticalBar.getMaximum() != inactive) {", "-\t\t\t\tverticalBar.setValues(", "-\t\t\t\t\tverticalBar.getSelection(),", "-\t\t\t\t\tverticalBar.getMinimum(),", "-\t\t\t\t\tinactive,", "-\t\t\t\t\tinactive,", "-\t\t\t\t\tverticalBar.getIncrement(),", "-\t\t\t\t\tinactive);", "-\t\t\t}", "-\t\t}", "-\t}", "+\tignoreResize++;", "+\tif (!isFixedLineHeight() || !alwaysShowScroll) vertical = true;", "+\tScrollBar verticalBar = vertical ? getVerticalBar() : null;", "-\tif (horizontalBar != null && horizontalBar.getVisible()) {", "-\t\tint maximum = renderer.getWidth();", "-\t\t// only set the real values if the scroll bar can be used ", "-\t\t// (ie. because the thumb size is less than the scroll maximum)", "-\t\t// avoids flashing on Motif, fixes 1G7RE1J and 1G5SE92", "-\t\tif (clientAreaWidth < maximum) {", "-\t\t\thorizontalBar.setMaximum(maximum - leftMargin - rightMargin);", "-\t\t\thorizontalBar.setThumb(clientAreaWidth - leftMargin - rightMargin);", "-\t\t\thorizontalBar.setPageIncrement(clientAreaWidth - leftMargin - rightMargin);", "-\t\t} else if (horizontalBar.getThumb() != inactive || horizontalBar.getMaximum() != inactive) {", "-\t\t\thorizontalBar.setValues(", "-\t\t\t\thorizontalBar.getSelection(),", "-\t\t\t\thorizontalBar.getMinimum(),", "-\t\t\t\tinactive,", "-\t\t\t\tinactive,", "-\t\t\t\thorizontalBar.getIncrement(),", "-\t\t\t\tinactive);", "+\tif (!alwaysShowScroll) {", "+\t\tif (verticalBar != null) verticalBar.setVisible(false);", "+\t\tif (horizontalBar != null) horizontalBar.setVisible(false);", "+\t}", "+\tif (verticalBar != null) {", "+\t\tsetScrollBar(verticalBar, clientAreaHeight, renderer.getHeight(), topMargin + bottomMargin);", "+\t}", "+\tif (horizontalBar != null) {", "+\t\tsetScrollBar(horizontalBar, clientAreaWidth, renderer.getWidth(), leftMargin + rightMargin);", "+\t\tif (!alwaysShowScroll && horizontalBar.getVisible() && verticalBar != null && !verticalBar.getVisible()) {", "+\t\t\tsetScrollBar(verticalBar, clientAreaHeight, renderer.getHeight(), topMargin + bottomMargin);", "+\tignoreResize--;"]}], "num": 43488}
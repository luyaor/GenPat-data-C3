{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e1d433962d66462725195117df5cc6a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52874eb6adb3cfed5ba8b01f482ee75a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/common/org/eclipse/swt/browser/WebBrowser.java", "commitBeforeChange": "e86035e65ddb9883c55bfd1d1805aa43058a91c8", "commitAfterChange": "ee9b40960339cb073a160f4a991908b1b404f3db", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  boolean sendKeyEvent (Event event)", "signatureAfterChange": "  boolean sendKeyEvent (Event event)", "diff": ["-\tboolean all = false;", "+\tboolean traverseDoit = true;", "-\t\t\tall = true;", "-\t\t\tnextTraverseDoit = true;", "+\t\t\ttraverseDoit = true;", "-\t\t\tall = true;", "-\t\t\tnextTraverseDoit = false;", "+\t\t\ttraverseDoit = false;", "-\t\tcase SWT.ARROW_RIGHT:", "+\t\tcase SWT.ARROW_RIGHT: {", "-\t\t\tnextTraverseDoit = false;", "+\t\t\ttraverseDoit = false;", "+\t\t}", "-\t\tcase SWT.ARROW_LEFT:", "+\t\tcase SWT.ARROW_LEFT: {", "-\t\t\tnextTraverseDoit = false;", "+\t\t\ttraverseDoit = false;", "-\t\tcase SWT.TAB:", "+\t\t}", "+\t\tcase SWT.TAB: {", "-\t\t\tnextTraverseDoit = (event.stateMask & SWT.CTRL) != 0;", "+\t\t\ttraverseDoit = (event.stateMask & SWT.CTRL) != 0;", "-\t\tcase SWT.PAGE_DOWN:", "+\t\t}", "+\t\tcase SWT.PAGE_DOWN: {", "-\t\t\t\tall = true;", "-\t\t\t\tnextTraverseDoit = true;", "+\t\t\t\ttraverseDoit = true;", "-\t\tcase SWT.PAGE_UP:", "+\t\t}", "+\t\tcase SWT.PAGE_UP: {", "-\t\t\t\tall = true;", "-\t\t\t\tnextTraverseDoit = true;", "+\t\t\t\ttraverseDoit = true;", "+\t\t}", "+\t\tdefault: {", "+\t\t\tif (translateMnemonics ()) {", "+\t\t\t\tif (event.character != 0 && (event.stateMask & (SWT.ALT | SWT.CTRL)) == SWT.ALT) {", "+\t\t\t\t\ttraversal = SWT.TRAVERSE_MNEMONIC;", "+\t\t\t\t\ttraverseDoit = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+", "-\t\tControl control = browser;", "-\t\tShell shell = control.getShell ();", "-\t\tfinal Event[] traverseEvent = new Event[1];", "-\t\tListener listener = new Listener () {", "-\t\t\tpublic void handleEvent (Event event) {", "-\t\t\t\ttraverseEvent[0] = event;", "-\t\t\t}", "-\t\t};", "-\t\tDisplay display = browser.getDisplay ();", "-\t\tdisplay.addFilter (SWT.Traverse, listener);", "-\t\ttry {", "-\t\t\tdo {", "-\t\t\t\tif (control.traverse (traversal)) {", "-\t\t\t\t\tdoit = false;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif (!traverseEvent[0].doit && control.isListening (SWT.Traverse)) break;", "-\t\t\t\tif (control == shell) break;", "-\t\t\t\tcontrol = control.getParent ();", "-\t\t\t} while (all && control != null);", "-\t\t} finally {", "-\t\t\tdisplay.removeFilter (SWT.Traverse, listener);", "-\t\t\tnextTraverseDoit = true;", "-\t\t}", "+\t\tboolean oldEventDoit = event.doit;", "+\t\tevent.doit = traverseDoit;\t", "+\t\tdoit = !browser.traverse (traversal, event);", "+\t\tevent.doit = oldEventDoit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa647c969560434881b1038eabcee97", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 129, "signatureBeforeChange": " int getOffsetAtX(String line, int lineOffset, int lineXOffset)", "signatureAfterChange": " int getOffsetAtX(String line, int lineOffset, int lineXOffset)", "diff": ["+int getOffsetAtX(String line, int lineOffset, int lineXOffset) {", "+\tint offset;", "+\tint[] trailing;", "+\tTextLayout layout;", "+\tint x = lineXOffset - leftMargin + horizontalScrollOffset;", "+\tlayout = renderer.getTextLayout(line, lineOffset, event);", "+\tRectangle rect = layout.getLineBounds(0);", "+\tif (x < rect.x) {", "+\t\toffset = 0;", "+\t} else if (x > rect.x + rect.width) {", "+\t\toffset = line.length();", "+\t} else {", "+\t\ttrailing = new int[1];", "+\t\toffset = layout.getOffset(x, 0, trailing);", "+\t\tadvancing = false;", "+\t\tif ((trailing[0] & SWT.TRAIL) != 0) {", "+\t\t\tint level = layout.getLevel(offset) & 0x1;", "+\t\t\toffset++;", "+\t\t\tint trailingLevel = layout.getLevel(offset) & 0x1;", "+\t\t\tadvancing  = (level ^ trailingLevel) != 0;", "+\t\t} ", "+\trenderer.disposeTextLayout(layout, event);", "+\treturn offset;", "- */", "-int getOffsetAtX(String line, int lineOffset, int lineXOffset) {", "-\tGC gc = getGC();", "-\tint offset;\t", "-\t", "-\tlineXOffset += (horizontalScrollOffset - leftMargin);", "-\tif (isBidi()) {", "-\t\tStyledTextBidi bidi = getStyledTextBidi(line, lineOffset, gc);", "-\t\toffset = bidi.getOffsetAtX(lineXOffset);", "-\t}\t\t", "-\telse {", "-\t\tStyleRange[] styles = null;", "-\t\tStyledTextEvent event = renderer.getLineStyleData(lineOffset, line);", "-\t\t\t\t\t", "-\t\tif (event != null) {", "-\t\t\tstyles = renderer.filterLineStyles(event.styles);", "-\t\t}", "-\t\tint low = -1;", "-\t\tint high = line.length();", "-\t\twhile (high - low > 1) {", "-\t\t\toffset = (high + low) / 2;", "-\t\t\t// Restrict right/high search boundary only if x is within searched text segment.", "-\t\t\t// Fixes 1GL4ZVE.\t\t\t", "-\t\t\tif (lineXOffset < renderer.getTextPosition(line, lineOffset, offset + 1, styles, gc)) {", "-\t\t\t\thigh = offset;\t\t\t", "-\t\t\t}", "-\t\t\telse ", "-\t\t\tif (high == line.length() && high - offset == 1) {", "-\t\t\t\t// requested x location is past end of line", "-\t\t\t\thigh = -1;", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tlow = offset;", "-\t\t\t}", "-\t\t}", "-\t\toffset = high;", "-\t}", "-\tgc.dispose();\t", "-\treturn offset;\t"]}], "num": 19055}
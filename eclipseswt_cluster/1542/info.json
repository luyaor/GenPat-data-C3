{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f2b5120d7c3271790cf89f3df100f04", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4bb94e920480084990b0982313030e2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5b2c3a06efe9f03e6d0b95d1830abbd80f01c4a5", "commitAfterChange": "7265e03acce403fc13fb49544db1e7781932cd4c", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["+\tint hNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t/*", "+\t* Feature in Windows.  When the tree has the style", "+\t* TVS_FULLROWSELECT, the background color for the", "+\t* entire row is filled when an item is painted,", "+\t* drawing on top of any custom drawing.  The fix", "+\t* is to emulate TVS_FULLROWSELECT.", "+\t*/", "+\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\tif (hNewItem == hOldItem) {", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, lpht.hItem);", "+\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\t}", "+\t\t}", "+\t}", "-\tint hNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\tint fItemRect = (bits & OS.TVS_FULLROWSELECT) != 0 ? 0 : 1;", "+\t\t\t\tint fItemRect = (style & SWT.FULL_SELECTION) != 0 ? 0 : 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8bbee38ca29b5a1d44dc4193a9b6478", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "cf1fe9a62b0aa80637743d74671152a60629becb", "commitAfterChange": "a6d5c3a070f387df903b1f6594dcfd6eb663372e", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int lParam)", "signatureAfterChange": "  void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int lParam)", "diff": ["-\tboolean drawSelected = false, drawBackground = false;", "+\tboolean drawSelected = false, drawBackground = false, drawHot = false;", "+\tif (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0) {", "+\t\tdrawHot = hotIndex == nmcd.dwItemSpec;", "+\t}", "+\tif (drawHot) event.detail |= SWT.HOT;", "+\t\tignoreDrawHot = (event.detail & SWT.HOT) == 0;", "-\t\tignoreDrawForeground = ignoreDrawBackground = ignoreDrawSelection = ignoreDrawFocus = true;", "+\t\tignoreDrawForeground = ignoreDrawBackground = ignoreDrawSelection = ignoreDrawFocus = ignoreDrawHot = true;", "+\t\t\tignoreDrawHot = true;", "-\tif (ignoreDrawForeground) {", "+\tif (ignoreDrawForeground && ignoreDrawHot) {", "-\tif (!ignoreDrawSelection && clrSelectionBk != -1) {", "+\tif (!ignoreDrawHot || (!ignoreDrawSelection && clrSelectionBk != -1)) {", "-\t\t\tboolean hot = (nmcd.uItemState & OS.CDIS_HOT) != 0;", "+\t\t\tboolean hot = drawHot;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e12239b264eba30c6dbecd0ab2069d55", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "a421d7601d74e70c4e861b3f364f936a2a864e17", "commitAfterChange": "4653a9ce43fa25d00df4bd3c98230a877062f99e", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\r \r LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\t* the notification.\r", "+\t* the notification.  The first part of this work\r", "+\t* around is to ensure that the user has selected\r", "+\t* an item.\r", "-\r", "+\t\r", "+\t/*\r", "+\t* Feature in Windows.  When the old and new focused item\r", "+\t* are the same, Windows does not check to make sure that\r", "+\t* the item is actually selected, not just focused.  The\r", "+\t* fix is to force the item to draw selected by setting\r", "+\t* the state mask.  This is only necessary when the tree\r", "+\t* is single select.\r", "+\t*/\r", "+\tif ((style & SWT.SINGLE) != 0) {\r", "+\t\tif (hOldItem == hNewItem) {\r", "+\t\t\ttvItem.mask = OS.TVIF_STATE;\r", "+\t\t\ttvItem.state = OS.TVIS_SELECTED;\r", "+\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "+\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t}\r", "+\t}\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11d69e732b3e4c6e3c6e384d7e6882ba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r public void setSelection (TreeItem [] items)", "signatureAfterChange": "\r public void setSelection (TreeItem [] items)", "diff": ["-\t/* Select/deselect the first item */\t\r", "+\t/* Select/deselect the first item */\r", "+\tint hOldItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "-\t\tint hOldItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "+\t\t/*\r", "+\t\t* Feature in Windows.  When the old and new focused item\r", "+\t\t* are the same, Windows does not check to make sure that\r", "+\t\t* the item is actually selected, not just focused.  The\r", "+\t\t* fix is to force the item to draw selected by setting\r", "+\t\t* the state mask.\r", "+\t\t*/\r", "+\t\tif (hOldItem == hNewItem) {\r", "+\t\t\tTVITEM tvItem = new TVITEM ();\r", "+\t\t\ttvItem.mask = OS.TVIF_STATE;\r", "+\t\t\ttvItem.state = OS.TVIS_SELECTED;\r", "+\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "+\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc4382df2126667c12991422c8ff5c06", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_custom_StyledText.java", "commitBeforeChange": "d8145da26376e690090dc684322ff1adbf794a0e", "commitAfterChange": "d7aad3a22a716e50af5427be98a2808163e08e76", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public void test_setKeyBindingII()", "signatureAfterChange": "  public void test_setKeyBindingII()", "diff": ["+\ttext.setKeyBinding(SWT.KEYPAD_CR, ST.LINE_END);", "+\tassertTrue(\":e:\", text.getKeyBinding(SWT.KEYPAD_CR) == ST.LINE_END);", "+\ttext.setKeyBinding(SWT.KEYPAD_CR | SWT.MOD1, ST.LINE_START);", "+\tassertTrue(\":f:\", text.getKeyBinding(SWT.KEYPAD_CR | SWT.MOD1) == ST.LINE_START);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15aac443812f983acbc9d3797846b940", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "f72c857e9c5ef7f08cd69b3c2eb92b3aafb02d91", "commitAfterChange": "444917b413ab57ed5d6b6ade8c5b5c63d6e5c5c4", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " boolean setItemSize(GC gc)", "signatureAfterChange": " boolean setItemSize(GC gc)", "diff": ["-\t\t\tint width = renderer.computeSize(selectedIndex, SWT.SELECTED, gc).x;", "+\t\t\tint width = renderer.computeSize(selectedIndex, SWT.SELECTED, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\t\t\t\tPoint closeSize = renderer.computeSize(selectedIndex, SWT.SELECTED, gc);", "+\t\t\t\t\tPoint closeSize = renderer.computeSize(selectedIndex, SWT.SELECTED, gc, SWT.DEFAULT, SWT.DEFAULT);", "-\tif (showMin) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_MIN_BUTTON, SWT.NONE, gc).x;", "-\tif (showMax) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_MAX_BUTTON, SWT.NONE, gc).x;", "+\tif (showMin) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_MIN_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "+\tif (showMax) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_MAX_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\tminWidths[index] = renderer.computeSize(index, state, gc).x;", "+\t\tminWidths[index] = renderer.computeSize(index, state, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\tif (showChevron) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_CHEVRON_BUTTON, SWT.NONE, gc).x;", "+\t\tif (showChevron) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_CHEVRON_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\t\tmaxWidths[i] = renderer.computeSize(i, state, gc).x;", "+\t\t\tmaxWidths[i] = renderer.computeSize(i, state, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\t\t\t\tPoint closeSize = renderer.computeSize(CTabFolderRenderer.PART_CLOSE_BUTTON, SWT.NONE, gc);", "+\t\t\t\t\tPoint closeSize = renderer.computeSize(CTabFolderRenderer.PART_CLOSE_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT);"]}], "num": 1542}
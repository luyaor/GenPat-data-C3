{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e21187a11a77e5003c377f36c972fbb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f28867be0cbff2995f80c5720055c91e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 47, "signatureBeforeChange": " void calculateTopIndex()", "signatureAfterChange": " void calculateTopIndex(int delta)", "diff": ["-void calculateTopIndex() {", "-\tint oldTopIndex = topIndex;", "-\tint verticalIncrement = getVerticalIncrement();", "-\tint clientAreaHeight = getClientArea().height;", "-\t", "-\tif (verticalIncrement == 0) {", "-\t\treturn;", "-\t}", "-\ttopIndex = Compatibility.ceil(verticalScrollOffset, verticalIncrement);", "-\t// Set top index to partially visible top line if no line is fully ", "-\t// visible but at least some of the widget client area is visible.", "-\t// Fixes bug 15088.", "-\tif (topIndex > 0) {", "-\t\tif (clientAreaHeight > 0) {", "-\t\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;", "-\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;", "-\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;", "-\t\t\t// set top index to partially visible line if no line fully fits in ", "-\t\t\t// client area or if space is available but not used (the latter should", "-\t\t\t// never happen because we use claimBottomFreeSpace)", "-\t\t\tif (fullLineVisibleHeight < verticalIncrement) {", "-\t\t\t\ttopIndex--;", "+void calculateTopIndex(int delta) {", "+\tint oldTopIndex = topIndex;\t", "+\tif (isFixedLineHeight()) {", "+\t\tint verticalIncrement = getVerticalIncrement();", "+\t\tif (verticalIncrement == 0) {", "+\t\t\treturn;", "+\t\t}", "+\t\ttopIndex = Compatibility.ceil(getVerticalScrollOffset(), verticalIncrement);", "+\t\t// Set top index to partially visible top line if no line is fully ", "+\t\t// visible but at least some of the widget client area is visible.", "+\t\t// Fixes bug 15088.", "+\t\tif (topIndex > 0) {", "+\t\t\tint clientAreaHeight = getClientArea().height;", "+\t\t\tif (clientAreaHeight > 0) {", "+\t\t\t\tint bottomPixel = getVerticalScrollOffset() + clientAreaHeight;", "+\t\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;", "+\t\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;", "+\t\t\t\t// set top index to partially visible line if no line fully fits in ", "+\t\t\t\t// client area or if space is available but not used (the latter should", "+\t\t\t\t// never happen because we use claimBottomFreeSpace)", "+\t\t\t\tif (fullLineVisibleHeight < verticalIncrement) {", "+\t\t\t\t\ttopIndex--;", "+\t\t\t\t}", "+\t\t\t} else if (topIndex >= content.getLineCount()) {", "+\t\t\t\ttopIndex = content.getLineCount() - 1;", "-\t\telse ", "-\t\tif (topIndex >= content.getLineCount()) {", "-\t\t\ttopIndex = content.getLineCount() - 1;", "+\t} else {", "+\t\tif (delta > 0) {", "+\t\t\tif (partialHeight > delta) {", "+\t\t\t\tpartialHeight -= delta;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tdelta -= partialHeight;", "+\t\t\tpartialHeight = 0;", "+\t\t\t", "+\t\t\tint lineCount = content.getLineCount();", "+\t\t\twhile (delta > 0 && topIndex < lineCount -1) {", "+\t\t\t\tint lineHeight = renderer.getLineHeight(topIndex);", "+\t\t\t\ttopIndex++;", "+\t\t\t\tif (lineHeight > delta) {", "+\t\t\t\t\tpartialHeight = lineHeight - delta;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tdelta -= lineHeight;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (topIndex > 0) {", "+\t\t\t\tint height = renderer.getLineHeight(topIndex - 1) - partialHeight;", "+\t\t\t\tif (height > -delta) {", "+\t\t\t\t\tpartialHeight -= delta;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tdelta += height;", "+\t\t\t\tpartialHeight = 0;", "+\t\t\t\ttopIndex--;", "+\t\t\t}", "+\t\t\twhile (-delta > 0 && topIndex > 0) {", "+\t\t\t\tint lineHeight = renderer.getLineHeight(topIndex - 1);", "+\t\t\t\tif (lineHeight > -delta) {", "+\t\t\t\t\tpartialHeight = -delta;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\ttopIndex--;", "+\t\t\t\tdelta += lineHeight;", "+\t\t\t}", "-\t\tlineCache.calculate(topIndex, getPartialBottomIndex() - topIndex + 1);", "-\t\tsetHorizontalScrollBar();", "+\t\trenderer.calculateClientArea();", "+\t\tsetScrollBars(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8405fda130e98ad2560895988b2fef5f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 49, "signatureBeforeChange": " \tprivate void setVisualLine(int visualLineIndex, int visualLineOffset, int visualLineLength)", "signatureAfterChange": " void claimBottomFreeSpace()", "diff": ["-\t */", "-\tprivate void setVisualLine(int visualLineIndex, int visualLineOffset, int visualLineLength) {", "-\t\tensureSize(visualLineCount + 1);", "-\t\t// is the space for the visual line already taken? can happen if ", "-\t\t// there are more visual lines for a given logical line than before", "-\t\tif (visualLines[visualLineIndex][LINE_OFFSET] != -1) {", "-\t\t\tSystem.arraycopy(visualLines, visualLineIndex, visualLines, visualLineIndex + 1, visualLineCount - visualLineIndex);", "-\t\t\tvisualLines[visualLineIndex] = new int[2];", "-\t\t}", "-\t\tvisualLines[visualLineIndex][LINE_OFFSET] = visualLineOffset;", "-\t\tvisualLines[visualLineIndex][LINE_LENGTH] = visualLineLength;", "-\t\tvisualLineCount++;", "-\t}", "+\tif (isFixedLineHeight()) {", "+\t\tint lineHeight = renderer.getLineHeight();", "+\t\tint newVerticalOffset = Math.max(0, content.getLineCount() * lineHeight - getClientArea().height);", "+\t\tif (newVerticalOffset < getVerticalScrollOffset()) {", "+\t\t\t// Scroll up so that empty lines below last text line are used.", "+\t\t\t// Fixes 1GEYJM0", "+\t\t\tscrollVertical(newVerticalOffset - getVerticalScrollOffset(), true);", "+\t\t}", "+\t} else {\t", "+\t\tint clientAreaHeight = getClientArea().height;", "+\t\tint bottomIndex = getPartialBottomIndex();", "+\t\tint height = getLinePixel(bottomIndex + 1);", "+\t\tif (clientAreaHeight > height) {", "+\t\t\tint delta = clientAreaHeight - height;", "+\t\t\tint maxDelta = verticalScrollOffset;", "+\t\t\tif (maxDelta == -1) {", "+\t\t\t\tint index = getPartialTopIndex();", "+\t\t\t\tmaxDelta = renderer.getLineHeight(index) - partialHeight;", "+\t\t\t\twhile (delta > maxDelta && index > 0) {", "+\t\t\t\t\tindex--;", "+\t\t\t\t\tmaxDelta += renderer.getLineHeight(index);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tdelta = Math.min(maxDelta, delta);", "+\t\t\tif (verticalScrollOffset != -1) {", "+\t\t\t\tscrollVertical(-delta, true);", "+\t\t\t} else {", "+\t\t\t\t// scrolling when verticalScrollOffset is invalid is a slow operation", "+\t\t\t\t// only update the top index and the caret, caller needs to invalidate the area", "+\t\t\t\t// verticalScrollOffset is valid at the end of the calculate idle", "+\t\t\t\tcalculateTopIndex(-delta);", "+\t\t\t}", "+\t\t\t", "+\t\t}"]}], "num": 54777}
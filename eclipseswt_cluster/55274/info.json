{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae3ca7e0b7639b34a098e5f40862d852", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07e6c028c1a5af1c4e69db9aab8f8333", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 54, "signatureBeforeChange": " \t \tid getParentAttribute (int childID)", "signatureAfterChange": " \t \tid getParentAttribute (int childID)", "diff": ["-\t\t// Returning null here means 'let Cocoa figure it out.'", "-\t\tif (childID == ACC.CHILDID_SELF)", "-\t\t\treturn null;", "-\t\telse", "-\t\t\treturn new id(OS.NSAccessibilityUnignoredAncestor(control.view.id));", "+\t\tid returnValue = null;", "+\t\tif (childID == ACC.CHILDID_SELF) {", "+\t\t\tif (parent != null) {", "+\t\t\t\tif (parent.delegate != null) {", "+\t\t\t\t\treturnValue = parent.delegate;", "+\t\t\t\t} else {", "+\t\t\t\t\treturnValue = new id(OS.NSAccessibilityUnignoredAncestor(accessibleHandle(parent).id));", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t// Returning null here means 'let Cocoa figure it out.'", "+\t\t\t\treturnValue = null;", "+\t\t\t}", "+\t\t} else {", "+\t\t\treturnValue = new id(OS.NSAccessibilityUnignoredAncestor(accessibleHandle(this).id));", "+\t\t}", "+\t\treturn returnValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61aff67df0b407f8eb030b6a087740b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "52d5f061f7eef32c2a9388e467f29009047fd0ae", "commitAfterChange": "d75a51833886fedc47fd1992d6bcd02c341104d6", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  boolean dragDetect (int x, int y, boolean filter, boolean dragOnTimeout, boolean [] consume)", "signatureAfterChange": "  boolean dragDetect (int x, int y, boolean filter, boolean dragOnTimeout, boolean [] consume)", "diff": ["+", "+\t//428852 DND workaround for GTk3.", "+\t//Gtk3 no longer sends motion events on the same control during thread sleep", "+\t//before a drag started. This is due to underlying gdk changes.", "+\t//Thus for gtk3 we check mouse coords manually", "+\t//Note, input params x/y are relative, the two points below are absolute coords.", "+\tPoint startPos = null;", "+\tPoint currPos = null;", "+\tif (OS.GTK3) {", "+\t\tstartPos = display.getCursorLocation();", "+\t}", "+", "-\t\t\t\ttry {Thread.sleep(50);} catch (Exception ex) {}", "+\t\t\t\tif (OS.GTK3) { //428852", "+\t\t\t\t\tcurrPos = display.getCursorLocation();", "+\t\t\t\t\tdragging = OS.gtk_drag_check_threshold (handle,", "+\t\t\t\t\t\t\t\tstartPos.x, startPos.y, currPos.x, currPos.y);", "+\t\t\t\t\tif (dragging) break;", "+\t\t\t\t} else {", "+\t\t\t\ttry {Thread.sleep(50);} ", "+\t\t\t\tcatch (Exception ex) {}", "+\t\t\t\t}", "+\t\tif (dragging) return true;  //428852"]}], "num": 55274}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf56242574800313dcc46db60bfdb67d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6c0a1cd627c130e3a092c574301881f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3e1b012af2b4ba818ce575f06ca138619a0a2859", "commitAfterChange": "4b27ffdfff25d04c66f5ca08e11b1e086b9d1dcd", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  boolean outlineView_shouldSelectItem(int id, int sel, int aTableView, int item)", "signatureAfterChange": "  int outlineView_selectionIndexesForProposedSelection (int id, int sel, int aTableView, int indexSet)", "diff": ["-boolean outlineView_shouldSelectItem(int /*long*/ id, int /*long*/ sel, int /*long*/ aTableView, int /*long*/ item) {", "-\tboolean result = true;", "+int /*long*/ outlineView_selectionIndexesForProposedSelection (int /*long*/ id, int /*long*/ sel, int /*long*/ aTableView, int /*long*/ indexSet) {", "-\tif ((style & SWT.SINGLE) != 0) {", "-\t\t/*", "-\t\t * Feature in Cocoa.  Calling setAllowsEmptySelection will automatically select the first row of the list. ", "-\t\t * And, single-selection NSTable/OutlineViews allow the user to de-select the selected item via command-click.", "-\t\t * This is normal platform behavior, but for compatibility with other platforms, if the SINGLE style is in use,", "-\t\t * force a selection by seeing if the proposed selection set is empty, and if so, put back the currently selected row.  ", "-\t\t */", "-\t\tNSIndexSet indexes = tree.selectedRowIndexes();", "-\t\tif (indexes.count() != 1 && tree.selectedRow() != -1) {", "-\t\t\treturn false;", "-\t\t}", "-\t}", "-", "-\tif (display.trackedButtonRow != -1) return false;", "+\tif (display.trackedButtonRow != -1) return tree.selectedRowIndexes().id;", "+\t", "+\t// If the click was in a checkbox, remove that row from the proposed selection.", "+\tNSMutableIndexSet mutableSelection = (NSMutableIndexSet) new NSMutableIndexSet().alloc();", "+\tmutableSelection = new NSMutableIndexSet(mutableSelection.initWithIndexSet(new NSIndexSet(indexSet)));", "-            result = ! OS.NSPointInRect(hitPoint, imageFrame) || didSelect;", "+            if (OS.NSPointInRect(hitPoint, imageFrame)) {", "+    \t\t\tmutableSelection.removeIndex(clickedRow);", "+            }", "-    return result;", "+", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\t/*", "+\t\t * Feature in Cocoa.  Calling setAllowsEmptySelection will automatically select the first row of the list. ", "+\t\t * And, single-selection NSTable/OutlineViews allow the user to de-select the selected item via command-click.", "+\t\t * This is normal platform behavior, but for compatibility with other platforms, if the SINGLE style is in use,", "+\t\t * force a selection by seeing if the proposed selection set is empty, and if so, put back the currently selected row.  ", "+\t\t */", "+\t\tif (mutableSelection.count() != 1 && tree.selectedRow() != -1) {", "+\t\t\treturn tree.selectedRowIndexes().id;", "+\t\t}", "+\t}", "+\t", "+\treturn mutableSelection.id;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c91ad38bc0c0366deaf5e2322f22493d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fb6f593a0cdd1e265e0288d7b02a6f36c77f39f2", "commitAfterChange": "6e5452147d40aa5e520ecebae89228e1445174c7", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " \t\t \tprivate int handleMouseCallback(int nextHandler, int eRefHandle)", "signatureAfterChange": " \t\t \tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow)", "diff": ["-\tprivate int handleMouseCallback(int nextHandler, int eRefHandle) {", "+\tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow) {", "+\t\t\t//System.out.println(\"  handleMouseCallback: kEventMouseDown \" + whichWindow);\t", "+\t\t\t//System.out.println(\"     frontw \" + OS.FrontWindow());", "-\t\tint whichWindow= 0;", "-\t\tif (fTrackedControl != 0) {", "-\t\t\twhichWindow= OS.GetControlOwner(fTrackedControl);", "+\t\tif (whichWindow == 0) {", "+\t\t\tif (fTrackedControl != 0) {", "+\t\t\t\twhichWindow= OS.GetControlOwner(fTrackedControl);", "+\t\t\t} else {", "+\t\t\t\tint[] w= new int[1];", "+\t\t\t\tpart= OS.FindWindow(where.getData(), w);", "+\t\t\t\twhichWindow= w[0];", "+\t\t\t\t//part= getWindowDefPart(eRefHandle);", "+\t\t\t\t//whichWindow= getDirectObject(eRefHandle);", "+\t\t\t}", "-\t\t\tint[] w= new int[1];", "-\t\t\tpart= OS.FindWindow(where.getData(), w);", "-\t\t\twhichWindow= w[0];", "-\t\t\t//part= getWindowDefPart(eRefHandle);", "-\t\t\t//whichWindow= getDirectObject(eRefHandle);", "+\t\t\tpart= OS.FindWindow(where.getData(), new int[1]);", "-\t\t\t\t", "-\t\t/*", "-\t\tif (eventKind == OS.kEventMouseDown) {", "-\t\t\tWidget w= findWidget(whichWindow);", "-\t\t\tSystem.out.println(\"click: \" + whichWindow + \" \" + w);", "-\t\t}", "-\t\t*/", "+\t\tif (whichWindow == 0) {", "+\t\t\tSystem.out.println(\"Display.handleMouseCallback:  whichWindow == 0\");", "+\t\t\treturn OS.eventNotHandledErr;", "+\t\t}", "+\t\t\t", "-\t\t\thideToolTip ();", "-\t\t", "-\t\t\t//if (whichWindow != OS.FrontNonFloatingWindow()) {", "-\t\t\t//if (whichWindow != OS.FrontWindow()) {", "-\t\t\t//if (OS.IsWindowActive(whichWindow)) {", "-\t\t\tif (whichWindow != fActiveWindow) {", "-\t\t\t\t//System.out.println(\"  front click\");", "-\t\t\t\t//OS.CallNextEventHandler(nextHandler, eRefHandle);", "+\t\t\tif (!OS.IsWindowActive(whichWindow)) {", "+\t\t\t\t// let the default handler activate the window", "+\t\t\t\t// (I had no success when calling SelectWindow)", "+\t\t\thideToolTip ();", "+\t\t", "-\t\t\tif (part == OS.inContent) {", "-\t\t\t\tif (handleContentClick(me, whichWindow))", "-\t\t\t\t\treturn OS.eventNotHandledErr;", "-\t\t\t} else", "-\t\t\t\treturn OS.eventNotHandledErr;", "+\t\t\tif (part == OS.inContent)", "+\t\t\t\tif (!handleContentClick(me, whichWindow))", "+\t\t\t\t\treturn OS.kNoErr;", "+", "+\t\t\t\treturn OS.kNoErr;", "-\t\t\tif (fTrackedControl != 0)", "+\t\t\tif (fTrackedControl != 0) {", "-\t\t\tfTrackedControl= 0;", "+\t\t\t\tfTrackedControl= 0;", "+\t\t\t\treturn OS.kNoErr;", "+\t\t\t}\t", "-\t\t\t//System.out.println(\"  kEventMouseMoved\");", "-\t\t\t\t\t//System.out.println(\"mouse exit: \" + WidgetTable.get(fCurrentControl));", "-\t\t\t\t\t//System.out.println(\"mouse enter: \" + WidgetTable.get(fCurrentControl));", "-\t\t\t\t", "+\t\t\t\treturn OS.kNoErr;\t\t\t", "-\t\t\t\t\t//System.out.println(\"mouse moved: \" + WidgetTable.get(fCurrentControl));", "+\t\t\t\t\treturn OS.kNoErr;", "-\t\treturn OS.kNoErr;", "+\t\treturn OS.eventNotHandledErr;"]}], "num": 44645}
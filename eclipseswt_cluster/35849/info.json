{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "525f21438423ddc1aa4f7339fddf67f5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f605db055c2fd3e9a9a21bfc3030a3d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java", "commitBeforeChange": "2cc7d30698448c6df09a70c69839e5a3830f9bc0", "commitAfterChange": "ca8346412189df48223ba59c33b21708729a1c0e", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \tvoid refreshLayoutComposite ()", "signatureAfterChange": " \tvoid refreshLayoutComposite()", "diff": ["-\tvoid refreshLayoutComposite () {", "+\tvoid refreshLayoutComposite() {", "-\t\tchildren = layoutComposite.getChildren ();", "-\t\tfor (int i = 0; i < children.length; i++) {", "-\t\t\tchildren [i].dispose ();", "+\t\tchildren = layoutComposite.getChildren();", "+\t\tfor(int i = 0; i < children.length; i++) {", "+\t\t\tchildren[i].dispose();", "-\t\tTableItem [] items = table.getItems ();", "-\t\tchildren = new Control [items.length];", "-\t\tString [] itemValues = new String [] {", "-\t\t\tLayoutExample.getResourceString (\"Item\",new String [] {\"1\"}),", "-\t\t\tLayoutExample.getResourceString (\"Item\",new String [] {\"2\"}),", "-\t\t\tLayoutExample.getResourceString (\"Item\",new String [] {\"3\"})};", "-\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\tString control = items [i].getText (1);", "-\t\t\tif (control.equals (\"Button\")) {", "-\t\t\t\tButton button = new Button (layoutComposite, SWT.PUSH);", "-\t\t\t\tbutton.setText (LayoutExample.getResourceString (\"Button_Index\", new String [] {new Integer (i).toString ()}));", "-\t\t\t\tchildren [i] = button;", "-\t\t\t} else if (control.equals (\"Canvas\")) {", "-\t\t\t\tCanvas canvas = new Canvas (layoutComposite, SWT.BORDER);", "-\t\t\t\tchildren [i] = canvas;", "-\t\t\t} else if (control.equals (\"Combo\")) {", "-\t\t\t\tCombo combo = new Combo (layoutComposite, SWT.NONE);", "-\t\t\t\tcombo.setItems (itemValues);", "-\t\t\t\tcombo.setText (LayoutExample.getResourceString (\"Combo_Index\", new String [] {new Integer (i).toString ()}));", "-\t\t\t\tchildren [i] = combo;", "-\t\t\t} else if (control.equals (\"Composite\")) { ", "-\t\t\t\tComposite composite = new Composite (layoutComposite, SWT.BORDER);", "-\t\t\t\tchildren [i] = composite;", "-\t\t    } else if (control.equals (\"CoolBar\")) { ", "-\t\t    \tCoolBar coolBar = new CoolBar (layoutComposite, SWT.NONE);", "-\t\t    \tToolBar toolBar = new ToolBar (coolBar, SWT.BORDER);", "-\t\t\t\tToolItem item = new ToolItem (toolBar, 0);", "-\t\t\t\titem.setText (LayoutExample.getResourceString (\"Item\",new String [] {\"1\"}));", "+\t\tTableItem[] items = table.getItems();", "+\t\tchildren = new Control[items.length];", "+\t\tString[] itemValues = new String[] {", "+\t\t\tLayoutExample.getResourceString(\"Item\", new String[] {\"1\"}),", "+\t\t\tLayoutExample.getResourceString(\"Item\", new String[] {\"2\"}),", "+\t\t\tLayoutExample.getResourceString(\"Item\", new String[] {\"3\"})};", "+\t\tfor(int i = 0; i < items.length; i++) {", "+\t\t\tString control = items[i].getText(1);", "+\t\t\tString controlName = items[i].getText(0);", "+\t\t\tif (control.equals(\"Button\")) {", "+\t\t\t\tButton button = new Button(layoutComposite, SWT.PUSH);", "+\t\t\t\tbutton.setText(controlName);", "+\t\t\t\tchildren[i] = button;", "+\t\t\t} else if (control.equals(\"Canvas\")) {", "+\t\t\t\tCanvas canvas = new Canvas(layoutComposite, SWT.BORDER);", "+\t\t\t\tchildren[i] = canvas;", "+\t\t\t} else if(control.equals(\"Combo\")) {", "+\t\t\t\tCombo combo = new Combo(layoutComposite, SWT.NONE);", "+\t\t\t\tcombo.setItems(itemValues);", "+\t\t\t\tcombo.setText(controlName);", "+\t\t\t\tchildren[i] = combo;", "+\t\t\t} else if(control.equals(\"Composite\")) { ", "+\t\t\t\tComposite composite = new Composite(layoutComposite, SWT.BORDER);", "+\t\t\t\tchildren[i] = composite;", "+\t\t    } else if(control.equals(\"CoolBar\")) { ", "+\t\t    \tCoolBar coolBar = new CoolBar(layoutComposite, SWT.NONE);", "+\t\t    \tToolBar toolBar = new ToolBar(coolBar, SWT.BORDER);", "+\t\t\t\tToolItem item = new ToolItem(toolBar, 0);", "+\t\t\t\titem.setText(LayoutExample.getResourceString(\"Item\",new String[] {\"1\"}));", "+\t\t\t\titem = new ToolItem(toolBar, 0);", "+\t\t\t\titem.setText(LayoutExample.getResourceString (\"Item\",new String[] {\"2\"}));", "+\t\t    \tCoolItem coolItem1 = new CoolItem(coolBar, 0);", "+\t\t    \tcoolItem1.setControl(toolBar);", "+\t\t\t\ttoolBar = new ToolBar(coolBar, SWT.BORDER);", "+\t\t\t\titem = new ToolItem(toolBar, 0);", "+\t\t\t\titem.setText(LayoutExample.getResourceString(\"Item\",new String[] {\"3\"}));", "-\t\t\t\titem.setText (LayoutExample.getResourceString (\"Item\",new String [] {\"2\"}));", "-\t\t    \tCoolItem coolItem1 = new CoolItem (coolBar, 0);", "-\t\t    \tcoolItem1.setControl (toolBar);", "-\t\t\t\ttoolBar = new ToolBar (coolBar, SWT.BORDER);", "-\t\t\t\titem = new ToolItem (toolBar, 0);", "-\t\t\t\titem.setText (LayoutExample.getResourceString (\"Item\",new String [] {\"3\"}));", "-\t\t\t\titem = new ToolItem (toolBar, 0);", "-\t\t\t\titem.setText (LayoutExample.getResourceString (\"Item\",new String [] {\"4\"}));", "-\t\t    \tCoolItem coolItem2 = new CoolItem (coolBar, 0);", "-\t\t    \tcoolItem2.setControl (toolBar);", "+\t\t\t\titem.setText(LayoutExample.getResourceString (\"Item\",new String [] {\"4\"}));", "+\t\t    \tCoolItem coolItem2 = new CoolItem(coolBar, 0);", "+\t\t    \tcoolItem2.setControl(toolBar);", "-        \t\tcoolItem1.setSize(coolItem1.computeSize (size.x, size.y));", "-        \t\tcoolItem2.setSize(coolItem2.computeSize (size.x, size.y));", "+        \t\tcoolItem1.setSize(coolItem1.computeSize(size.x, size.y));", "+        \t\tcoolItem2.setSize(coolItem2.computeSize(size.x, size.y));", "-\t\t\t\tchildren [i] = coolBar;", "-\t\t    } else if (control.equals (\"Group\")) {", "+\t\t\t\tchildren[i] = coolBar;", "+\t\t    } else if(control.equals(\"Group\")) {", "-\t\t\t\tgroup.setText (LayoutExample.getResourceString (\"Group_Index\", new String [] {new Integer (i).toString ()}));", "-\t\t\t\tchildren [i] = group;", "-\t\t\t} else if (control.equals (\"Label\")) {", "-\t\t\t\tLabel label = new Label (layoutComposite, SWT.NONE);", "-\t\t\t\tlabel.setText (LayoutExample.getResourceString (\"Label_Index\", new String [] {new Integer (i).toString ()}));", "-\t\t\t\tchildren [i] = label;", "-\t\t\t} else if (control.equals (\"List\")) {", "-\t\t\t\tList list = new List (layoutComposite, SWT.BORDER);", "-\t\t\t\tlist.setItems (itemValues);", "-\t\t\t\tchildren [i] = list;", "-\t\t\t} else if (control.equals (\"ProgressBar\")) {", "-\t\t\t\tProgressBar progress = new ProgressBar (layoutComposite, SWT.NONE);", "-\t\t\t\tprogress.setSelection (50);", "-\t\t\t\tchildren [i] = progress;", "-\t\t\t} else if (control.equals (\"Scale\")) {", "-\t\t\t\tScale scale = new Scale (layoutComposite, SWT.NONE);", "-\t\t\t\tchildren [i] = scale;", "-\t\t\t} else if (control.equals (\"Slider\")) {", "-\t\t\t\tSlider slider = new Slider (layoutComposite, SWT.NONE);", "-\t\t\t\tchildren [i] = slider;", "-\t\t\t} else if (control.equals (\"StyledText\")) {", "-\t\t\t\tStyledText styledText = new StyledText (layoutComposite, SWT.MULTI | SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);", "-\t\t\t\tstyledText.setText (LayoutExample.getResourceString (\"StyledText_Index\", new String [] {new Integer (i).toString ()}));", "-\t\t\t\tchildren [i] = styledText;\t\t\t", "-\t\t\t} else if (control.equals (\"Table\")) {", "-\t\t\t\tTable table = new Table (layoutComposite, SWT.BORDER);", "-\t\t\t\ttable.setLinesVisible (true);", "-\t\t\t\tTableItem item1 = new TableItem (table, 0);", "-\t\t\t\titem1.setText (LayoutExample.getResourceString (\"Item\",new String [] {\"1\"}));", "+\t\t\t\tgroup.setText(controlName);", "+\t\t\t\tchildren[i] = group;", "+\t\t\t} else if(control.equals(\"Label\")) {", "+\t\t\t\tLabel label = new Label(layoutComposite, SWT.NONE);", "+\t\t\t\tlabel.setText(controlName);", "+\t\t\t\tchildren[i] = label;", "+\t\t\t} else if(control.equals(\"List\")) {", "+\t\t\t\tList list = new List(layoutComposite, SWT.BORDER);", "+\t\t\t\tlist.setItems(itemValues);", "+\t\t\t\tchildren[i] = list;", "+\t\t\t} else if(control.equals(\"ProgressBar\")) {", "+\t\t\t\tProgressBar progress = new ProgressBar(layoutComposite, SWT.NONE);", "+\t\t\t\tprogress.setSelection(50);", "+\t\t\t\tchildren[i] = progress;", "+\t\t\t} else if(control.equals(\"Scale\")) {", "+\t\t\t\tScale scale = new Scale(layoutComposite, SWT.NONE);", "+\t\t\t\tchildren[i] = scale;", "+\t\t\t} else if(control.equals(\"Slider\")) {", "+\t\t\t\tSlider slider = new Slider(layoutComposite, SWT.NONE);", "+\t\t\t\tchildren[i] = slider;", "+\t\t\t} else if(control.equals(\"StyledText\")) {", "+\t\t\t\tStyledText styledText = new StyledText(layoutComposite, SWT.MULTI | SWT.BORDER | SWT.V_SCROLL | SWT.H_SCROLL);", "+\t\t\t\tstyledText.setText(controlName);", "+\t\t\t\tchildren[i] = styledText;\t\t\t", "+\t\t\t} else if(control.equals(\"Table\")) {", "+\t\t\t\tTable table = new Table(layoutComposite, SWT.BORDER);", "+\t\t\t\ttable.setLinesVisible(true);", "+\t\t\t\tTableItem item1 = new TableItem(table, 0);", "+\t\t\t\titem1.setText(LayoutExample.getResourceString(\"Item\",new String[] {\"1\"}));", "-\t\t\t\titem2.setText (LayoutExample.getResourceString (\"Item\",new String [] {\"2\"}));", "-\t\t\t\tchildren [i] = table;", "-\t\t\t} else if (control.equals (\"Text\")) {", "-\t\t\t\tText text = new Text (layoutComposite, SWT.BORDER);", "-\t\t\t\ttext.setText (LayoutExample.getResourceString (\"Text_Index\", new String [] {new Integer (i).toString ()}));", "-\t\t\t\tchildren [i] = text;", "-\t\t\t} else if (control.equals (\"ToolBar\")) {", "-\t\t\t\tToolBar toolBar = new ToolBar (layoutComposite, SWT.BORDER);", "-\t\t\t\tToolItem item1 = new ToolItem (toolBar, 0);", "-\t\t\t\titem1.setText (LayoutExample.getResourceString (\"Item\",new String [] {\"1\"}));", "-\t\t\t\tToolItem item2 = new ToolItem (toolBar, 0);", "-\t\t\t\titem2.setText (LayoutExample.getResourceString (\"Item\",new String [] {\"2\"}));", "-\t\t\t\tchildren [i] = toolBar;", "+\t\t\t\titem2.setText(LayoutExample.getResourceString(\"Item\",new String[] {\"2\"}));", "+\t\t\t\tchildren[i] = table;", "+\t\t\t} else if(control.equals(\"Text\")) {", "+\t\t\t\tText text = new Text(layoutComposite, SWT.BORDER);", "+\t\t\t\ttext.setText(controlName);", "+\t\t\t\tchildren[i] = text;", "+\t\t\t} else if(control.equals(\"ToolBar\")) {", "+\t\t\t\tToolBar toolBar = new ToolBar(layoutComposite, SWT.BORDER);", "+\t\t\t\tToolItem item1 = new ToolItem(toolBar, 0);", "+\t\t\t\titem1.setText(LayoutExample.getResourceString(\"Item\",new String[] {\"1\"}));", "+\t\t\t\tToolItem item2 = new ToolItem(toolBar, 0);", "+\t\t\t\titem2.setText(LayoutExample.getResourceString(\"Item\",new String[] {\"2\"}));", "+\t\t\t\tchildren[i] = toolBar;", "-\t\t\t\tTree tree = new Tree (layoutComposite, SWT.BORDER);", "-\t\t\t\tTreeItem item1 = new TreeItem (tree, 0);", "-\t\t\t\titem1.setText (LayoutExample.getResourceString (\"Item\",new String [] {\"1\"}));", "-\t\t\t\tTreeItem item2 = new TreeItem (tree, 0);", "-\t\t\t\titem2.setText (LayoutExample.getResourceString (\"Item\",new String [] {\"2\"}));", "-\t\t\t\tchildren [i] = tree;", "+\t\t\t\tTree tree = new Tree(layoutComposite, SWT.BORDER);", "+\t\t\t\tTreeItem item1 = new TreeItem(tree, 0);", "+\t\t\t\titem1.setText (LayoutExample.getResourceString(\"Item\",new String[] {\"1\"}));", "+\t\t\t\tTreeItem item2 = new TreeItem(tree, 0);", "+\t\t\t\titem2.setText(LayoutExample.getResourceString (\"Item\",new String[] {\"2\"}));", "+\t\t\t\tchildren[i] = tree;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0e1a47539b8abd97281c12b2dc66f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/IME.java", "commitBeforeChange": "00d9a929233cc0e4c7aa22a7ff5b7562dd581371", "commitAfterChange": "82a169db2ad1731cac41b8c9102e1999ac7a1ef7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  TextStyle getStyle (NSDictionary attribs)", "signatureAfterChange": "  TextStyle getStyle (NSDictionary attribs)", "diff": ["-\t\tif (key.isEqualTo (new NSString (OS.NSBackgroundColorAttributeName ()))) {", "-\t\t\tNSColor color = new NSColor (attribs.objectForKey (key).id).colorUsingColorSpaceName_ (OS.NSCalibratedRGBColorSpace);", "+\t\tif (key.isEqualTo (OS.NSBackgroundColorAttributeName)) {", "+\t\t\tNSColor color = new NSColor (attribs.objectForKey (key)).colorUsingColorSpaceName (OS.NSCalibratedRGBColorSpace);", "-\t\t} else if (key.isEqualTo (new NSString (OS.NSForegroundColorAttributeName ()))) {", "-\t\t\tNSColor color = new NSColor (attribs.objectForKey (key).id).colorUsingColorSpaceName_ (OS.NSCalibratedRGBColorSpace);", "+\t\t} else if (key.isEqualTo (OS.NSForegroundColorAttributeName)) {", "+\t\t\tNSColor color = new NSColor (attribs.objectForKey (key)).colorUsingColorSpaceName (OS.NSCalibratedRGBColorSpace);", "-\t\t} else if (key.isEqualTo (new NSString (OS.NSUnderlineColorAttributeName ()))) {", "-\t\t\tNSColor color = new NSColor (attribs.objectForKey (key).id).colorUsingColorSpaceName_ (OS.NSCalibratedRGBColorSpace);", "+\t\t} else if (key.isEqualTo (OS.NSUnderlineColorAttributeName)) {", "+\t\t\tNSColor color = new NSColor (attribs.objectForKey (key)).colorUsingColorSpaceName (OS.NSCalibratedRGBColorSpace);", "-\t\t} else if (key.isEqualTo (new NSString (OS.NSUnderlineStyleAttributeName ()))) {", "-\t\t\tNSNumber value = new NSNumber (attribs.objectForKey (key).id);", "+\t\t} else if (key.isEqualTo (OS.NSUnderlineStyleAttributeName)) {", "+\t\t\tNSNumber value = new NSNumber (attribs.objectForKey (key));", "-\t\t} else if (key.isEqualTo (new NSString (OS.NSStrikethroughColorAttributeName ()))) {", "-\t\t\tNSColor color = new NSColor (attribs.objectForKey (key).id).colorUsingColorSpaceName_ (OS.NSCalibratedRGBColorSpace);", "+\t\t} else if (key.isEqualTo (OS.NSStrikethroughColorAttributeName)) {", "+\t\t\tNSColor color = new NSColor (attribs.objectForKey (key)).colorUsingColorSpaceName (OS.NSCalibratedRGBColorSpace);", "-\t\t} else if (key.isEqualTo (new NSString (OS.NSStrikethroughStyleAttributeName ()))) {", "-\t\t\tNSNumber value = new NSNumber (attribs.objectForKey (key).id);", "+\t\t} else if (key.isEqualTo (OS.NSStrikethroughStyleAttributeName)) {", "+\t\t\tNSNumber value = new NSNumber (attribs.objectForKey (key));", "-\t\t} else if (key.isEqualTo (new NSString (OS.NSFontAttributeName ()))) {", "-\t\t\tNSFont font = new NSFont (attribs.objectForKey (key).id);", "+\t\t} else if (key.isEqualTo (OS.NSFontAttributeName)) {", "+\t\t\tNSFont font = new NSFont (attribs.objectForKey (key));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3867d36c084c1a56c5dffa998543a328", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/IME.java", "commitBeforeChange": "88bd467192e71a74ccccf939c498cacab5b7b026", "commitAfterChange": "f72c412aadade2a881e4cbc31bc05c3f0d408799", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  TextStyle getStyle (NSDictionary attribs)", "signatureAfterChange": "  TextStyle getStyle (NSDictionary attribs)", "diff": ["-\t\t\tfloat [] rgbColor = new float []{(float)/*64*/color.redComponent(), (float)/*64*/color.greenComponent(), (float)/*64*/color.blueComponent(), (float)/*64*/color.alphaComponent()};", "+\t\t\tfloat /*double*/ [] rgbColor = new float /*double*/ []{color.redComponent(), color.greenComponent(), color.blueComponent(), color.alphaComponent()};", "-\t\t\tfloat [] rgbColor = new float []{(float)/*64*/color.redComponent(), (float)/*64*/color.greenComponent(), (float)/*64*/color.blueComponent(), (float)/*64*/color.alphaComponent()};", "+\t\t\tfloat /*double*/ [] rgbColor = new float /*double*/ []{color.redComponent(), color.greenComponent(), color.blueComponent(), color.alphaComponent()};", "-\t\t\tfloat [] rgbColor = new float []{(float)/*64*/color.redComponent(), (float)/*64*/color.greenComponent(), (float)/*64*/color.blueComponent(), (float)/*64*/color.alphaComponent()};", "+\t\t\tfloat /*double*/ [] rgbColor = new float /*double*/ []{color.redComponent(), color.greenComponent(), color.blueComponent(), color.alphaComponent()};", "-\t\t\tfloat [] rgbColor = new float []{(float)/*64*/color.redComponent(), (float)/*64*/color.greenComponent(), (float)/*64*/color.blueComponent(), (float)/*64*/color.alphaComponent()};", "+\t\t\tfloat /*double*/ [] rgbColor = new float /*double*/ []{color.redComponent(), color.greenComponent(), color.blueComponent(), color.alphaComponent()};"]}], "num": 35849}
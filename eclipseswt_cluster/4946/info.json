{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c9216b609a6723dc30389170dfbc110", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "946d0261df3350cf11ac60f73ca4ebb4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "b1df683a63ba731de0add93dda58ad190689d7cb", "commitAfterChange": "01b9002aa980befd0c51529f45e05b950166ae2b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "  void addEventHandlers (boolean top)", "signatureAfterChange": "  void addEventHandlers (int web_view, boolean top)", "diff": ["-void addEventHandlers (boolean top) {", "+void addEventHandlers (int /*long*/ web_view, boolean top) {", "+\tif (top && HasDOMAPI) {", "+\t\tint /*long*/ domDocument = WebKitGTK.webkit_web_view_get_dom_document (web_view);", "+\t\tif (domDocument != 0) {", "+\t\t\tWindowMappings.put (new LONG (domDocument), new LONG (web_view));", "+\t\t\tWebKitGTK.webkit_dom_event_target_add_event_listener (domDocument, WebKitGTK.dragstart, JSDOMEventProc.getAddress (), 0, SWT.DragDetect);", "+\t\t\tWebKitGTK.webkit_dom_event_target_add_event_listener (domDocument, WebKitGTK.keydown, JSDOMEventProc.getAddress (), 0, SWT.KeyDown);", "+\t\t\tWebKitGTK.webkit_dom_event_target_add_event_listener (domDocument, WebKitGTK.keypress, JSDOMEventProc.getAddress (), 0, SENTINEL_KEYPRESS);", "+\t\t\tWebKitGTK.webkit_dom_event_target_add_event_listener (domDocument, WebKitGTK.keyup, JSDOMEventProc.getAddress (), 0, SWT.KeyUp);", "+\t\t\tWebKitGTK.webkit_dom_event_target_add_event_listener (domDocument, WebKitGTK.mousedown, JSDOMEventProc.getAddress (), 0, SWT.MouseDown);", "+\t\t\tWebKitGTK.webkit_dom_event_target_add_event_listener (domDocument, WebKitGTK.mousemove, JSDOMEventProc.getAddress (), 0, SWT.MouseMove);", "+\t\t\tWebKitGTK.webkit_dom_event_target_add_event_listener (domDocument, WebKitGTK.mouseup, JSDOMEventProc.getAddress (), 0, SWT.MouseUp);", "+\t\t\tWebKitGTK.webkit_dom_event_target_add_event_listener (domDocument, WebKitGTK.mousewheel, JSDOMEventProc.getAddress (), 0, SWT.MouseWheel);", "+", "+\t\t\t/*", "+\t\t\t* The following two lines are intentionally commented because they cannot be used to", "+\t\t\t* consistently send MouseEnter/MouseExit events until https://bugs.webkit.org/show_bug.cgi?id=35246", "+\t\t\t* is fixed.", "+\t\t\t*/ ", "+\t\t\t//WebKitGTK.webkit_dom_event_target_add_event_listener (domWindow, WebKitGTK.mouseover, JSDOMEventProc.getAddress (), 0, SWT.MouseEnter);", "+\t\t\t//WebKitGTK.webkit_dom_event_target_add_event_listener (domWindow, WebKitGTK.mouseout, JSDOMEventProc.getAddress (), 0, SWT.MouseExit);", "+\t\t}", "+\t\treturn;", "+\t}", "+", "+\t/* install the JS call-out to the registered BrowserFunction */", "+\tStringBuffer buffer = new StringBuffer (\"window.SWTkeyhandler = function SWTkeyhandler(e) {\"); //$NON-NLS-1$", "+\tbuffer.append (\"try {e.returnValue = HandleWebKitEvent(e.type, e.keyCode, e.charCode, e.altKey, e.ctrlKey, e.shiftKey, e.metaKey);} catch (e) {}};\"); //$NON-NLS-1$", "+\texecute (buffer.toString ());", "+\tbuffer = new StringBuffer (\"window.SWTmousehandler = function SWTmousehandler(e) {\"); //$NON-NLS-1$", "+\tbuffer.append (\"try {e.returnValue = HandleWebKitEvent(e.type, e.screenX, e.screenY, e.detail, e.button, e.altKey, e.ctrlKey, e.shiftKey, e.metaKey, e.relatedTarget != null);} catch (e) {}};\"); //$NON-NLS-1$", "+\texecute (buffer.toString ());", "+", "-\t\tStringBuffer buffer = new StringBuffer (\"window.SWTkeyhandler = function SWTkeyhandler(e) {\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"try {e.returnValue = HandleWebKitEvent(e.type, e.keyCode, e.charCode, e.altKey, e.ctrlKey, e.shiftKey, e.metaKey);} catch (e) {}};\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"document.addEventListener('keydown', SWTkeyhandler, true);\"); //$NON-NLS-1$", "+\t\t/* DOM API is not available, so add listener to top-level document */", "+\t\tbuffer = new StringBuffer (\"document.addEventListener('keydown', SWTkeyhandler, true);\"); //$NON-NLS-1$", "-\t\texecute (buffer.toString ());", "-", "-\t\tbuffer = new StringBuffer (\"window.SWTmousehandler = function SWTmousehandler(e) {\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"try {e.returnValue = HandleWebKitEvent(e.type, e.screenX, e.screenY, e.detail, e.button + 1, e.altKey, e.ctrlKey, e.shiftKey, e.metaKey, e.relatedTarget != null);} catch (e) {}};\"); //$NON-NLS-1$", "-\t} else {", "-\t\tStringBuffer buffer = new StringBuffer (\"for (var i = 0; i < frames.length; i++) {\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"frames[i].document.addEventListener('keydown', window.SWTkeyhandler, true);\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"frames[i].document.addEventListener('keypress', window.SWTkeyhandler, true);\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"frames[i].document.addEventListener('keyup', window.SWTkeyhandler, true);\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"frames[i].document.addEventListener('mousedown', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"frames[i].document.addEventListener('mouseup', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"frames[i].document.addEventListener('mousemove', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"frames[i].document.addEventListener('mouseover', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"frames[i].document.addEventListener('mouseout', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"frames[i].document.addEventListener('mousewheel', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "-\t\tbuffer.append (\"frames[i].document.addEventListener('dragstart', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "-\t\tbuffer.append ('}');", "-\t\texecute (buffer.toString ());", "+\t\treturn;", "+", "+\t/* add JS event listener in frames */", "+\tbuffer = new StringBuffer (\"for (var i = 0; i < frames.length; i++) {\"); //$NON-NLS-1$", "+\tbuffer.append (\"frames[i].document.addEventListener('keydown', window.SWTkeyhandler, true);\"); //$NON-NLS-1$", "+\tbuffer.append (\"frames[i].document.addEventListener('keypress', window.SWTkeyhandler, true);\"); //$NON-NLS-1$", "+\tbuffer.append (\"frames[i].document.addEventListener('keyup', window.SWTkeyhandler, true);\"); //$NON-NLS-1$", "+\tbuffer.append (\"frames[i].document.addEventListener('mousedown', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "+\tbuffer.append (\"frames[i].document.addEventListener('mouseup', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "+\tbuffer.append (\"frames[i].document.addEventListener('mousemove', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "+\tbuffer.append (\"frames[i].document.addEventListener('mouseover', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "+\tbuffer.append (\"frames[i].document.addEventListener('mouseout', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "+\tbuffer.append (\"frames[i].document.addEventListener('mousewheel', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "+\tbuffer.append (\"frames[i].document.addEventListener('dragstart', window.SWTmousehandler, true);\"); //$NON-NLS-1$", "+\tbuffer.append ('}');", "+\texecute (buffer.toString ());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d2a04ef701f196f61f638459b1b9f23", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ShellTab.java", "commitBeforeChange": "228ce83cf48b36834731e5d307da84450bab9790", "commitAfterChange": "dd1f8765e9bdfa9311a2b280e22623d88d993fee", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic void decorationButtonSelected(SelectionEvent event)", "signatureAfterChange": " \tpublic void decorationButtonSelected(SelectionEvent event)", "diff": ["-\t", "-\t\t/* Make sure if the modal style is SWT.APPLICATION_MODAL or ", "-\t\t * SWT.SYSTEM_MODAL the style SWT.CLOSE is also selected.", "+\t\tButton widget = (Button) event.widget;", "+\t\t", "+\t\t/*", "+\t\t * Make sure that if the modal style is SWT.APPLICATION_MODAL ", "+\t\t * or SWT.SYSTEM_MODAL the style SWT.CLOSE is also selected.", "-\t\tButton widget = (Button) event.widget;", "-\t\t * Make sure if the No Trim button is selected then", "-\t\t * all other decoration buttons are deselected.", "+\t\t * Make sure that if the SWT.NO_TRIM button is selected", "+\t\t * then all other decoration buttons are deselected.", "-\t\tif (widget.getSelection() && widget != noTrimButton) {", "-\t\t\tnoTrimButton.setSelection (false);", "-\t\t\treturn;", "-\t\t}", "-\t\tif (widget.getSelection() && widget == noTrimButton) {", "-\t\t\tif (applicationModalButton.getSelection() || systemModalButton.getSelection()) {", "+\t\tif (widget.getSelection()) {", "+\t\t\tif (widget == noTrimButton) {", "+\t\t\t\tif (applicationModalButton.getSelection() || systemModalButton.getSelection()) {", "+\t\t\t\t\tnoTrimButton.setSelection (false);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tcloseButton.setSelection (false);", "+\t\t\t\ttitleButton.setSelection (false);", "+\t\t\t\tminButton.setSelection (false);", "+\t\t\t\tmaxButton.setSelection (false);", "+\t\t\t\tborderButton.setSelection (false);", "+\t\t\t\tresizeButton.setSelection (false);", "+\t\t\t} else {", "-\t\t\t\treturn;", "-\t\t\tcloseButton.setSelection (false);", "-\t\t\ttitleButton.setSelection (false);", "-\t\t\tminButton.setSelection (false);", "-\t\t\tmaxButton.setSelection (false);", "-\t\t\tborderButton.setSelection (false);", "-\t\t\tresizeButton.setSelection (false);", "-\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\t/*", "+\t\t * Make sure that the SWT.DIALOG_TRIM and SWT.SHELL_TRIM buttons", "+\t\t * are consistent.", "+\t\t */", "+\t\tif (widget == dialogTrimButton || widget == shellTrimButton) {", "+\t\t\tif (widget.getSelection() && widget == dialogTrimButton) {", "+\t\t\t\tshellTrimButton.setSelection(false);", "+\t\t\t} else {", "+\t\t\t\tdialogTrimButton.setSelection(false);", "+\t\t\t}", "+\t\t\t//SHELL_TRIM = CLOSE | TITLE | MIN | MAX | RESIZE;", "+\t\t\t//DIALOG_TRIM = TITLE | CLOSE | BORDER;", "+\t\t\tcloseButton.setSelection (widget.getSelection ());", "+\t\t\ttitleButton.setSelection (widget.getSelection ());", "+\t\t\tminButton.setSelection (widget == shellTrimButton && widget.getSelection( ));", "+\t\t\tmaxButton.setSelection (widget == shellTrimButton && widget.getSelection ());", "+\t\t\tborderButton.setSelection (widget == dialogTrimButton && widget.getSelection ());", "+\t\t\tresizeButton.setSelection (widget == shellTrimButton && widget.getSelection ());", "+\t\t} else {", "+\t\t\tboolean title = titleButton.getSelection ();", "+\t\t\tboolean close = closeButton.getSelection ();", "+\t\t\tboolean min = minButton.getSelection ();", "+\t\t\tboolean max = maxButton.getSelection ();", "+\t\t\tboolean border = borderButton.getSelection ();", "+\t\t\tboolean resize = resizeButton.getSelection ();", "+\t\t\tdialogTrimButton.setSelection(title && close && border && !min && !max && !resize);", "+\t\t\tshellTrimButton.setSelection(title && close && min && max && resize && !border);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "947db73c98619a99b5bad25cbcbb934b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "021c9ffb1f03bab865a8755698d6a0a3d739b6cc", "commitAfterChange": "a22dc50286ff5b97c74cd0b12653f08fe95a1ee7", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 74, "signatureBeforeChange": " void onPaint(Event event)", "signatureAfterChange": " void onPaint(Event event)", "diff": ["-\trenderer.draw(CTabFolderRenderer.PART_MAX_BUTTON, maxImageState, maxRect, gc);", "-\trenderer.draw(CTabFolderRenderer.PART_MIN_BUTTON, minImageState, minRect, gc);", "-\trenderer.draw(CTabFolderRenderer.PART_CHEVRON_BUTTON, chevronImageState, chevronRect, gc);", "-", "+\tif (hoverTb) {", "+\t\tRectangle trim = renderer.computeTrim(CTabFolderRenderer.PART_BORDER, SWT.NONE, 0, 0, 0, 0);", "+\t\tint x = getSize().x - (trim.width + trim.x);", "+\t\thoverRect = new Rectangle(x - 16 - SPACING, 2, 16, getTabHeight() - 2);", "+\t\tgc.setForeground(gc.getDevice().getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW));", "+\t\tx = hoverRect.x;", "+\t\tint y = hoverRect.y;", "+\t\tgc.setBackground(gc.getDevice().getSystemColor(SWT.COLOR_WHITE));", "+\t\tgc.fillRectangle(x + hoverRect.width - 6, y, 5, 5);", "+\t\tgc.drawRectangle(x + hoverRect.width - 6, y, 5, 5);", "+\t\tgc.drawLine(x + hoverRect.width - 6, y+2, x + hoverRect.width - 6 + 5, y + 2);", "+\t\tgc.fillRectangle(x, y, 5 , 2);", "+\t\tgc.drawRectangle(x, y, 5 , 2);", "+\t}", "-\tgc.setBackground(gcBackground);\t", "+\tgc.setBackground(gcBackground);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7198e36e1635f7921ec397b0a51bfb81", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d9dfd82bfea57be5eb6a15f8c2e440de6084ec40", "commitAfterChange": "c5cbd8c4eebd8dd52ab69ee5068130875a54578b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r static int scalePixmap(int display, int pixmap, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean flipX, boolean flipY)", "signatureAfterChange": "\r static int scalePixmap(int display, int pixmap, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean flipX, boolean flipY)", "diff": ["-\t\t\tImageData.stretch1(srcData, xSrcImage.bytes_per_line, bitOrder, 0, 0, srcWidth, srcHeight, buf, bplX, bitOrder, 0, 0, destWidth, destHeight, flipX, flipY);\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\tsrcData, 1, xSrcImage.bytes_per_line, bitOrder, 0, 0, srcWidth, srcHeight, null, null, null,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, 1, bplX, bitOrder, 0, 0, destWidth, destHeight, null, null, null,\r", "+\t\t\t\tflipX, flipY);\r", "-\t\t\tImageData.stretch4(srcData, xSrcImage.bytes_per_line, 0, 0, srcWidth, srcHeight, buf, bplX, 0, 0, destWidth, destHeight, null, flipX, flipY);\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\tsrcData, 4, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, null, null, null,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, 4, bplX, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, null, null, null,\r", "+\t\t\t\tflipX, flipY);\r", "-\t\t\tImageData.stretch8(srcData, xSrcImage.bytes_per_line, 0, 0, srcWidth, srcHeight, buf, bplX, 0, 0, destWidth, destHeight, null, flipX, flipY);\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\tsrcData, 8, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, null, null, null,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, 8, bplX, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, null, null, null,\r", "+\t\t\t\tflipX, flipY);\r", "-\t\t\tImageData.stretch16(srcData, xSrcImage.bytes_per_line, 0, 0, srcWidth, srcHeight, buf, xImage.bytes_per_line, 0, 0, destWidth, destHeight, flipX, flipY);\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\tsrcData, 16, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, 16, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r", "+\t\t\t\tflipX, flipY);\r", "-\t\t\tImageData.stretch24(srcData, xSrcImage.bytes_per_line, 0, 0, srcWidth, srcHeight, buf, xImage.bytes_per_line, 0, 0, destWidth, destHeight, flipX, flipY);\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\tsrcData, 24, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, 24, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r", "+\t\t\t\tflipX, flipY);\r", "-\t\t\tImageData.stretch32(srcData, xSrcImage.bytes_per_line, 0, 0, srcWidth, srcHeight, buf, xImage.bytes_per_line, 0, 0, destWidth, destHeight, flipX, flipY);\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\tsrcData, 32, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, 32, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r", "+\t\t\t\tflipX, flipY);\r"]}], "num": 4946}
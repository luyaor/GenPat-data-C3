{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c319984175548bf332161be69863e3c8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aef8d1ff90a5d19de52f501852428b6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "commitAfterChange": "d8f34c9ec09bc11f5d7b71293f9d378725f3146c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "  int drawItemProc (int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice)", "signatureAfterChange": "  int drawItemProc (int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice)", "diff": ["+\tint columnIndex = 0;", "+\tif (columnCount > 0) {", "+\t\tfor (columnIndex=0; columnIndex<columnCount; columnIndex++) {", "+\t\t\tif (columns [columnIndex].id == property) break;", "+\t\t}", "+\t\tif (columnIndex == columnCount) return OS.noErr;", "+\t}", "+\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\tif (!item.cached) {", "+\t\t\tif (!checkData (item, false)) return OS.noErr;", "+\t\t\tif (setScrollWidth (item)) {", "+\t\t\t\tRect rect = new Rect();", "+\t\t\t\tif (OS.GetDataBrowserItemPartBounds (handle, id, property, OS.kDataBrowserPropertyEnclosingPart, rect) == OS.noErr) {", "+\t\t\t\t\tredrawWidget (handle, rect.left, rect.top, rect.right, rect.bottom, false);", "+\t\t\t\t}", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tboolean selected = (itemState & OS.kDataBrowserItemIsSelected) != 0;", "-\tOS.DisposeRgn (clip);", "-\tColor background = item.getBackground ();", "-\tgc.setBackground (background);", "-\tgc.fillRectangle (x - 1, y, itemRect.right - x + 2, itemRect.bottom - y);", "-\tImage image = item.image;", "-\tif (image != null) {", "-\t\tRectangle bounds = image.getBounds ();", "-\t\tgc.drawImage (image, 0, 0, bounds.width, bounds.height, x, y + (height - bounds.height) / 2, bounds.width, bounds.height);", "-\t\tx += bounds.width + 2;", "+\tif (columnCount != 0) {", "+\t\tif (selected && ((style & SWT.FULL_SELECTION) != 0 || columnIndex == 0)) {", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t} else {", "+\t\t\tgc.setBackground (item.getBackground (columnIndex));\t\t\t", "+\t\t}", "+\t\tif (columnIndex == 0) {", "+\t\t\tgc.fillRectangle (x - 1, y, itemRect.right - x + 2, itemRect.bottom - y);", "+\t\t} else {", "+\t\t\tgc.fillRectangle (itemRect.left, itemRect.top, itemRect.right - itemRect.left, itemRect.bottom - itemRect.top);", "+\t\t}", "-\tFont font = item.getFont ();", "-\tgc.setFont (font);", "-\tPoint extent = gc.stringExtent (item.text);", "-\tif ((itemState & OS.kDataBrowserItemIsSelected) != 0) {", "+\tint rectRgn = OS.NewRgn ();", "+\tOS.RectRgn (rectRgn, rect);", "+\tOS.OffsetRgn (rectRgn, (short)-controlRect.left, (short)-controlRect.top);", "+\tOS.SectRgn (rectRgn, clip, clip);", "+\tOS.DisposeRgn (rectRgn);", "+\tgc.setClipping (Region.carbon_new (display, clip));", "+\tOS.DisposeRgn (clip);", "+\tImage image = item.getImage (columnIndex);", "+\tString text = item.getText (columnIndex);", "+\tgc.setFont (item.getFont (columnIndex));", "+\tPoint extent = gc.stringExtent (text);", "+\tint itemWidth = extent.x;", "+\tRectangle imageBounds = null;", "+\tif (image != null) {", "+\t\timageBounds = image.getBounds ();", "+\t\titemWidth += this.imageBounds.width + 2;", "+\t}", "+\tif (columnCount != 0) {", "+\t\tTreeColumn column = columns [columnIndex];", "+\t\tif ((column.style & SWT.CENTER) != 0) x += (width - itemWidth) / 2;", "+\t\tif ((column.style & SWT.RIGHT) != 0) x += width - itemWidth;", "+\t}", "+\tif (image != null) {", "+\t\tgc.drawImage (image, 0, 0, imageBounds.width, imageBounds.height, x, y + (height - this.imageBounds.height) / 2, this.imageBounds.width, this.imageBounds.height);", "+\t\tx += this.imageBounds.width + 2;", "+\t}", "+\tif (selected && ((style & SWT.FULL_SELECTION) != 0 || columnIndex == 0)) {", "-\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "-\t\tgc.fillRectangle (x - 1, y, extent.x + 2, height);", "+\t\tif (columnCount == 0) {", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, height);", "+\t\t}", "-\t\tColor foreground = item.getForeground ();", "+\t\tif (columnCount == 0) {", "+\t\t\tgc.setBackground (item.getBackground ());", "+\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, height);", "+\t\t}", "+\t\tColor foreground = item.getForeground (columnIndex);", "-\tgc.drawString (item.text, x, y + (height - extent.y) / 2, true);", "+\tgc.drawString (text, x, y + (height - extent.y) / 2, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16f4061727b41e761163fbc61b9ad75f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "8549b1db39ac8fd4bb7564c61e5b9a04b5efde6f", "commitAfterChange": "2b3120470b46968368044df3f94129d586bc41d5", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 92, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t//NOT DONE", "-//\t\tcase OS.LVN_GETDISPINFOA:", "-//\t\tcase OS.LVN_GETDISPINFOW: {", "-//\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-//\t\t\tif ((bits & OS.LVS_OWNERDATA) != 0) {", "-//\t\t\t\tNMLVDISPINFO info = new NMLVDISPINFO ();", "-//\t\t\t\tOS.MoveMemory (info, lParam, NMLVDISPINFO.sizeof);", "-//\t\t\t\tSystem.out.println (\"LVN_GETDISPINFO: \" + Integer.toHexString (info.mask));", "-//\t\t\t\tif ((info.mask & OS.LVIF_TEXT) != 0) {", "-//\t\t\t\t\tSystem.out.println (\"\\tLVIF_TEXT\");", "-//\t\t\t\t\tTableItem item = items [info.iItem];", "-//\t\t\t\t\tString string = item.text;", "-//\t\t\t\t\t//BUG - no null when overflow buffer", "-//\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "-//\t\t\t\t\tint byteCount = Math.min (buffer.length (), info.cchTextMax) * TCHAR.sizeof;", "-//\t\t\t\t\tOS.MoveMemory (info.pszText, buffer, byteCount);", "-//\t\t\t\t}", "-//\t\t\t\tif ((info.mask & OS.LVIF_IMAGE) != 0) {", "-//\t\t\t\t\tSystem.out.println (\"\\tLVIF_IMAGE\");", "-//\t\t\t\t\tTableItem item = items [info.iItem];", "-//\t\t\t\t\tif (item.image != null) info.iImage = imageIndex (item.image);", "-//\t\t\t\t}", "-//\t\t\t\tif ((info.mask & OS.LVIF_STATE) != 0) {", "-//\t\t\t\t\tSystem.out.println (\"\\tLVIF_STATE\");", "-//\t\t\t\t\tTableItem item = items [info.iItem];", "-//\t\t\t\t\tint state = 3;", "-//\t\t\t\t\t//if (item.checked) state++;", "-//\t\t\t\t\t//if (item.grayed) state +=2;", "-//\t\t\t\t\tinfo.state = state << 12;", "-//\t\t\t\t\tinfo.stateMask = OS.LVIS_STATEIMAGEMASK;", "-//\t\t\t\t}", "-//\t\t\t\tif ((info.mask & OS.LVIF_INDENT) != 0) {", "-//\t\t\t\t\tSystem.out.println (\"\\tLVIF_INDENT\");", "-//\t\t\t\t\tTableItem item = items [info.iItem];", "-//\t\t\t\t\t//info.iIndent = 1;", "-//\t\t\t\t}", "-//\t\t\t\tOS.MoveMemory (lParam, info, NMLVDISPINFO.sizeof);", "-//\t\t\t}", "-//\t\t\tbreak;", "-//\t\t}", "+\t\tcase OS.LVN_ODFINDITEMA:", "+\t\tcase OS.LVN_ODFINDITEMW: {", "+\t\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\t\tNMLVFINDITEM pnmfi = new NMLVFINDITEM ();", "+\t\t\t\tOS.MoveMemory (pnmfi, lParam, NMLVFINDITEM.sizeof);", "+\t\t\t\tint index = Math.max (0, pnmfi.iStart - 1);", "+\t\t\t\treturn new LRESULT (index);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase OS.LVN_GETDISPINFOA:", "+\t\tcase OS.LVN_GETDISPINFOW: {", "+\t\t\tNMLVDISPINFO plvfi = new NMLVDISPINFO ();", "+\t\t\tOS.MoveMemory (plvfi, lParam, NMLVDISPINFO.sizeof);", "+\t\t\tlastIndexOf = plvfi.iItem;", "+\t\t\tTableItem item = items [plvfi.iItem];", "+\t\t\titem.requested = true;", "+\t\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.item = item;", "+\t\t\t\tignoreRedraw = true;", "+\t\t\t\tsendEvent (SWT.SetData, event);", "+\t\t\t\t//widget could be disposed at this point", "+\t\t\t\tif (isDisposed ()) break;", "+\t\t\t\tignoreRedraw = false;", "+\t\t\t\tif (setScrollWidth (item, true)) redraw ();", "+\t\t\t}", "+\t\t\tif ((plvfi.mask & OS.LVIF_TEXT) != 0) {", "+\t\t\t\tString string = null;", "+\t\t\t\tif (plvfi.iSubItem == 0) {", "+\t\t\t\t\tstring = item.text;", "+\t\t\t\t} else {", "+\t\t\t\t\tString [] strings  = item.strings;", "+\t\t\t\t\tif (strings != null) string = strings [plvfi.iSubItem];", "+\t\t\t\t}", "+\t\t\t\tif (string != null) {", "+\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\t\tint byteCount = Math.min (buffer.length (), plvfi.cchTextMax - 1) * TCHAR.sizeof;", "+\t\t\t\t\tOS.MoveMemory (plvfi.pszText, buffer, byteCount);", "+\t\t\t\t\tOS.MoveMemory (plvfi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "+\t\t\t\t\tplvfi.cchTextMax = Math.min (plvfi.cchTextMax, string.length () + 1);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif ((plvfi.mask & OS.LVIF_IMAGE) != 0) {", "+\t\t\t\tImage image = null;", "+\t\t\t\tif (plvfi.iSubItem == 0) {", "+\t\t\t\t\timage = item.image;", "+\t\t\t\t} else {", "+\t\t\t\t\tImage [] images = item.images;", "+\t\t\t\t\tif (images != null) image = images [plvfi.iSubItem];", "+\t\t\t\t}", "+\t\t\t\tif (image != null) plvfi.iImage = imageIndex (image);", "+\t\t\t}", "+\t\t\tif ((plvfi.mask & OS.LVIF_STATE) != 0) {", "+\t\t\t\tif (plvfi.iSubItem == 0) {", "+\t\t\t\t\tint state = 1;", "+\t\t\t\t\tif (item.checked) state++;", "+\t\t\t\t\tif (item.grayed) state +=2;", "+\t\t\t\t\tplvfi.state = state << 12;", "+\t\t\t\t\tplvfi.stateMask = OS.LVIS_STATEIMAGEMASK;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif ((plvfi.mask & OS.LVIF_INDENT) != 0) {", "+\t\t\t\tif (plvfi.iSubItem == 0) plvfi.iIndent = item.imageIndent;", "+\t\t\t}", "+\t\t\tOS.MoveMemory (lParam, plvfi, NMLVDISPINFO.sizeof);", "+\t\t\tbreak;", "+\t\t}"]}], "num": 20085}
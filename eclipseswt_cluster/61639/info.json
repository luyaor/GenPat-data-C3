{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "105f312be0910dc63114516f653a04e1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8328a9a0d1fcabe5351303bc2b593e65", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "683530eeba436413425ed23ff7ebcc1f75ca9b81", "commitAfterChange": "c6693daac69fdac02f880b4c10b8219d9b330161", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["+", "+\tHashSet tagsSet = new HashSet();", "-\t\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\t\tbuffer.append(\"public static final native \"); ", "-\t\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\t\tbuffer.append(\"void objc_msgSend_stret(\");", "-\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\t\tbuffer.append(\" result, \");", "-\t\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\t\tbuffer.append(\"double objc_msgSend_fpret(\");", "+\t\t\t\t\t\t\t\tString code = buildSend(method, false, false);", "+\t\t\t\t\t\t\t\tString codeTags = buildSend(method, true, false);", "+\t\t\t\t\t\t\t\tif (set.contains(code) && !tagsSet.contains(codeTags)) {", "+\t\t\t\t\t\t\t\t\tString code64 = buildSend(method, false, true);", "+\t\t\t\t\t\t\t\t\ttagsSet.add(code64);", "-\t\t\t\t\t\t\t\t\tbuffer.append(\"int objc_msgSend(\");", "+\t\t\t\t\t\t\t\t\ttagsSet.add(codeTags);", "-\t\t\t\t\t\t\t\tbuffer.append(\"int id, int sel\");", "-\t\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\t\tboolean first = false;", "-\t\t\t\t\t\t\t\tint count = 0;", "-\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\t\tif (!first) buffer.append(\", \");", "-\t\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getType(param));", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(\" arg\");", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(String.valueOf(count++));", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbuffer.append(\");\");", "-\t\t\t\t\t\t\t\tset.add(buffer.toString());", "+\t\t\t\t\t\t\t\tset.add(code);", "-\tfor (Iterator iterator = set.iterator(); iterator.hasNext();) {", "+\tfor (Iterator iterator = tagsSet.iterator(); iterator.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e5721a5d5ff3f4f1899c11938a32eda", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "c13b22837b30fd90fa15a29afe63a567bc3f87e5", "commitAfterChange": "3a5ece72c305410ded2cd14b2fb9617ac7003ab1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void generateClasses()", "signatureAfterChange": "  void generateClasses()", "diff": ["-void generateClasses() {", "-\tHashMap classes = new HashMap();", "-\t\t\t\tMap methods;", "-\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "-\t\t\t\t\tmethods = new TreeMap();", "-\t\t\t\t\tmethods = (TreeMap)clazz[1];", "-\t\t\t\t\t\tNamedNodeMap mthAttributes = method.getAttributes();", "-\t\t\t\t\t\tString selector = mthAttributes.getNamedItem(\"selector\").getNodeValue();", "-\t\t\t\t\t\tNode other = (Node)methods.get(selector);", "-\t\t\t\t\t\tif (other == null) {", "-\t\t\t\t\t\t\tmethods.put(selector, method);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tboolean isStatic = mthAttributes.getNamedItem(\"class_method\") != null;", "-\t\t\t\t\t\t\tboolean otherIsStatic = other.getAttributes().getNamedItem(\"class_method\") != null;", "-\t\t\t\t\t\t\tif (isStatic != otherIsStatic) {", "-\t\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\t\tmethods.put(\"static_\" + selector, method);", "-\t\t\t\t\t\t\t\t\tmethods.put(selector, other);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tmethods.put(\"static_\" + selector, other);", "-\t\t\t\t\t\t\t\t\tmethods.put(selector, method);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+", "+void generateClasses() {", "+\tTreeMap classes = getGeneratedClasses();", "+\tcopyClassMethodsDown(classes);", "+\t", "-\t\tString className = (String) iterator.next();", "-\t\tObject[] clazz = (Object[])classes.get(className);", "-\t\tNode node = (Node)clazz[0];", "-\t\tTreeMap methods = (TreeMap)clazz[1];", "-\t\tNamedNodeMap attributes = node.getAttributes();", "+", "+\t\tString className = (String) iterator.next();", "+\t\tObject[] clazz = (Object[])classes.get(className);", "+\t\tNode node = (Node)clazz[0];", "+\t\tArrayList methods = (ArrayList)clazz[1];", "-\t\tif (className.equals(\"NSObject\")) {", "-\t\t\tout(\" extends id {\");", "-\t\t} else {", "-\t\t\tNode superclass = attributes.getNamedItem(\"swt_superclass\");", "-\t\t\tout(\" extends \");", "-\t\t\tif (superclass != null) {", "-\t\t\t\tout(superclass.getNodeValue());", "-\t\t\t} else {", "-\t\t\t\tout(\"NSObject\");", "-\t\t\t}", "-\t\t\tout(\" {\");", "-\t\t}", "+\t\tout(\" extends \");", "+\t\tout(getSuperclassName(node));", "+\t\tout(\" {\");", "-\t\toutln();", "-\t\tout(\"public \");", "-\t\tout(className);", "-\t\tout(\"() {\");", "-\t\toutln();", "-\t\tout(\"\\tsuper();\");", "-\t\toutln();", "-\t\tout(\"}\");", "-\t\toutln();", "-\t\toutln();", "-\t\tout(\"public \");", "-\t\tout(className);", "-\t\tout(\"(int /*long*/ id) {\");", "-\t\toutln();", "-\t\tout(\"\\tsuper(id);\");", "-\t\toutln();", "-\t\tout(\"}\");", "-\t\toutln();", "-\t\toutln();", "-\t\tout(\"public \");", "-\t\tout(className);", "-\t\tout(\"(id id) {\");", "-\t\toutln();", "-\t\tout(\"\\tsuper(id);\");", "-\t\toutln();", "-\t\tout(\"}\");", "-\t\toutln();", "-\t\toutln();", "-\t\tif (className.equals(\"NSString\")) {", "-\t\t\tout(\"public String getString() {\");", "-\t\t\toutln();", "-\t\t\tout(\"\\tchar[] buffer = new char[length()];\");", "-\t\t\toutln();", "-\t\t\tout(\"\\tgetCharacters(buffer);\");", "-\t\t\toutln();", "-\t\t\tout(\"\\treturn new String(buffer);\");", "-\t\t\toutln();", "-\t\t\tout(\"}\");", "-\t\t\toutln();", "-\t\t\toutln();", "-\t\t\tout(\"public static NSString stringWith(String str) {\");", "-\t\t\toutln();", "-\t\t\tout(\"\\tchar[] buffer = new char[str.length()];\");", "-\t\t\toutln();", "-\t\t\tout(\"\\tstr.getChars(0, buffer.length, buffer, 0);\");", "-\t\t\toutln();", "-\t\t\tout(\"\\treturn stringWithCharacters(buffer, buffer.length);\");", "-\t\t\toutln();", "-\t\t\tout(\"}\");", "-\t\t\toutln();", "-\t\t\toutln();", "-\t\t}", "-\t\t", "-\t\tgenerateMethods(className, methods);", "-\t\t", "+\t\toutln();\t\t", "+\t\tgenerateExtraMethods(className);", "+\t\tgenerateMethods(className, methods);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49328b6bff1562585deffde9f4101f37", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "3a5ece72c305410ded2cd14b2fb9617ac7003ab1", "commitAfterChange": "00d9a929233cc0e4c7aa22a7ff5b7562dd581371", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": "  void generateSendsMetaData()", "signatureAfterChange": "  void generateSendsMetaData()", "diff": ["+\tString className = getClassName(mainClassName);", "+\tString packageName = getPackageName(mainClassName).replace('.', '_');", "-\t\t\tif (\"class\".equals(node.getNodeName())) {", "-//\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-//\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "-//\t\t\t\tif (getGenerateClass(name)) {", "-\t\t\t\t\tNodeList methods = node.getChildNodes();", "-\t\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "-\t\t\t\t\t\tNode method = methods.item(j);", "-\t\t\t\t\t\tif (\"method\".equals(method.getNodeName())) {", "-\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"OS_objc_1msgSend_1stret__\");", "-\t\t\t\t\t\t\t\tbuffer.append(\"Lorg_eclipse_swt_internal_cocoa_\");", "-\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\tbuffer.append(\"_2\");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"OS_objc_1msgSend_1fpret__\");", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tbuffer.append(\"OS_objc_1msgSend__\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbuffer.append(\"II\");", "-\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(\"Lorg_eclipse_swt_internal_cocoa_\");", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(\"_2\");", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getJNIType(param));", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\tif (\"class\".equals(node.getNodeName()) && getGen(node)) {", "+\t\t\t\tNodeList methods = node.getChildNodes();", "+\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "+\t\t\t\t\tNode method = methods.item(j);", "+\t\t\t\t\tif (\"method\".equals(method.getNodeName())) {", "+\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "+\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\tbuffer.append(className);", "+\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "+\t\t\t\t\t\t\tbuffer.append(\"_objc_1msgSend_1stret__\");", "+\t\t\t\t\t\t\tbuffer.append(\"L\");", "+\t\t\t\t\t\t\tbuffer.append(packageName);", "+\t\t\t\t\t\t\tbuffer.append(\".\");", "+\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "+\t\t\t\t\t\t\tbuffer.append(\"_2\");", "+\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "+\t\t\t\t\t\t\tbuffer.append(\"_objc_1msgSend_1fpret__\");", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tbuffer.append(\"_objc_1msgSend__\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append(\"II\");", "+\t\t\t\t\t\tNodeList params = method.getChildNodes();", "+\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "+\t\t\t\t\t\t\tNode param = params.item(k);", "+\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\t\tif (isStruct(param)) {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"L\");", "+\t\t\t\t\t\t\t\t\tbuffer.append(packageName);", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"_\");", "+\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"_2\");", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tbuffer.append(getJNIType(param));", "-\t\t\t\t\t\t\tString key = buffer.toString();", "-\t\t\t\t\t\t\tif (set.get(key) == null) set.put(key, method);", "+\t\t\t\t\t\tString key = buffer.toString();", "+\t\t\t\t\t\tif (set.get(key) == null) set.put(key, method);", "-//\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb0393cebe57ce326690b8ab15355f45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "98fc614af4e0736880ddc01f544655cbdad4088c", "commitAfterChange": "3b27b41db1dd3c54eec31645b5eb2d11fe630ed4", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["-//\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-//\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "-//\t\t\t\tif (getGenerateClass(name)) {", "+\t\t\t\tif (getGen(node)) {", "-\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\tbuffer.append(\"public static final native \"); ", "-\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"void objc_msgSend_stret(\");", "-\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\tbuffer.append(\" result, \");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"double objc_msgSend_fpret(\");", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tbuffer.append(\"int objc_msgSend(\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbuffer.append(\"int id, int sel\");", "-\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\tboolean first = false;", "-\t\t\t\t\t\t\tint count = 0;", "-\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\tif (!first) buffer.append(\", \");", "-\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getType(param));", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\tbuffer.append(\" arg\");", "-\t\t\t\t\t\t\t\t\tbuffer.append(String.valueOf(count++));", "+\t\t\t\t\t\t\tif (getGen(method)) {", "+\t\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "+\t\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\t\t\tbuffer.append(\"public static final native \"); ", "+\t\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"void objc_msgSend_stret(\");", "+\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "+\t\t\t\t\t\t\t\t\tbuffer.append(\" result, \");", "+\t\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"double objc_msgSend_fpret(\");", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"int objc_msgSend(\");", "+\t\t\t\t\t\t\t\tbuffer.append(\"int id, int sel\");", "+\t\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "+\t\t\t\t\t\t\t\tboolean first = false;", "+\t\t\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "+\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "+\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\t\t\t\tif (!first) buffer.append(\", \");", "+\t\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getType(param));", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tfirst = false;", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(\" arg\");", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(String.valueOf(count++));", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbuffer.append(\");\");", "+\t\t\t\t\t\t\t\tset.add(buffer.toString());", "-\t\t\t\t\t\t\tbuffer.append(\");\");", "-\t\t\t\t\t\t\tset.add(buffer.toString());", "-//\t\t\t\t}", "+\t\t\t\t}"]}], "num": 61639}
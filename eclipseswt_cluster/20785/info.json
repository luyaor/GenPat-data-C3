{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20f2fe890a797d5186831dd776a9b492", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13a8e23bceaf76095edf7fd24bc657b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 7, "signatureBeforeChange": " int getAlignmentOffset(int columnIndex, int columnWidth, GC gc)", "signatureAfterChange": " void computeDisplayTexts (GC gc)", "diff": ["+}", "+void computeDisplayTexts (GC gc) {", "+\tint columnCount = parent.columns.length;", "+\tif (columnCount == 0) return;", "+\t", "+\tFont oldFont = gc.getFont ();", "+\tfor (int i = 0; i < columnCount; i++) {", "+\t\tboolean fontChanged = false;", "+\t\tFont font = getFont (i);", "+\t\tif (!font.equals (oldFont)) {", "+\t\t\tgc.setFont (font);", "+\t\t\tfontChanged = true;", "+\t\tcomputeDisplayText (i, gc);", "+\t\tif (fontChanged) gc.setFont (oldFont);", "-int getAlignmentOffset(int columnIndex, int columnWidth, GC gc) {", "-\tTable parent = getParent();", "-\tTableColumn column = parent.internalGetColumn (columnIndex);", "-\tImage image = getImage(columnIndex);\t", "-\tint alignmentOffset = 0;", "-\tint alignment = column.getAlignment();", "-\tString label  = getText(gc, column);", "-\tint imageWidth = 0;", "-\tint textWidth = gc.stringExtent (label).x;", "-\tPoint imageExtent = parent.getImageExtent();", "-\tif (((columnIndex == TableColumn.FIRST &&\t\t\t\t\t\t\t\t// always add the image width for the first column ", "- \t \t  parent.hasFirstColumnImage() == true) ||\t\t\t\t\t\t\t// if any item in the first column has an image", "-\t\t (columnIndex != TableColumn.FIRST && \t\t\t\t\t\t\t\t// add the image width if it's not the first column", "-\t\t  image != null)) &&\t\t\t\t\t\t\t\t\t\t \t\t// only when the item actually has an image", "-\t\timageExtent != null) {\t\t\t\t\t\t\t\t\t", "-\t\ttextWidth += imageExtent.x;", "-\t}", "-\tif ((alignment & SWT.RIGHT) != 0) {", "-\t\talignmentOffset = columnWidth - textWidth - imageWidth - TEXT_INDENT - TEXT_INDENT;", "-\t}", "-\tif ((alignment & SWT.CENTER) != 0) {", "-\t\talignmentOffset = ((columnWidth - textWidth) / 2) - imageWidth - TEXT_INDENT;", "-\t}", "-\tif (alignmentOffset < 0) alignmentOffset = 0;", "-\treturn alignmentOffset;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f02a83dbd4509de7e7625f8e9fb4cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "74633fa01aa8c5998245320589a13e924ab066bc", "commitAfterChange": "9aa111009eb55f78239030ddcabfd6bb90983b3a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public Rectangle getBounds (int columnIndex)", "signatureAfterChange": " public Rectangle getBounds (int columnIndex)", "diff": ["-", "-\t", "-\t * If there are no columns then this is the bounds of the receiver from the", "-\t * beginning of its expander to the end of its text.", "+\t * If there are no columns then this is the bounds of the receiver's content.", "-\t\tint x = getExpanderBounds ().x;", "-\t\tint width = getFocusX () + getTextPaintWidth (0) - x;", "-\t\treturn new Rectangle (x, parent.getItemY (this), width, parent.itemHeight);", "+\t\tint width = getContentWidth (0);", "+\t\treturn new Rectangle (", "+\t\t\tgetContentX (0),", "+\t\t\tparent.getItemY (this),", "+\t\t\twidth,", "+\t\t\tparent.itemHeight - 1);", "+\t", "-\t\tint columnX = column.getX ();", "-\t\tint xOffset = getExpanderBounds ().x - columnX;", "-\t\tint width = Math.max (0, column.width - xOffset);\t/* for columns with width < expander x */", "-\t\treturn new Rectangle (columnX + xOffset, parent.getItemY (this), width, parent.itemHeight);", "+\t\t/* ", "+\t\t * For column 0 this is bounds from the beginning of the content to the", "+\t\t * end of the column.", "+\t\t */", "+\t\tint x = getContentX (0);", "+\t\tint offset = x - column.getX ();", "+\t\tint width = Math.max (0, column.width - offset);\t\t/* max is for columns with small widths */", "+\t\treturn new Rectangle (x, parent.getItemY (this), width, parent.itemHeight - 1);", "-\treturn new Rectangle (column.getX (), parent.getItemY (this), column.width, parent.itemHeight);", "+\t/*", "+\t * For columns > 0 this is the bounds of the tree cell.", "+\t */", "+\treturn new Rectangle (column.getX (), parent.getItemY (this), column.width, parent.itemHeight - 1);"]}], "num": 20785}
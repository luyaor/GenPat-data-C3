{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce2ebc30cf63ea5e5b42b1e782ea79fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76dd70107928b0b4986addb8dafa2e1c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "61e9d1e36b247e8d7212c985a309e271586ecf1b", "commitAfterChange": "de99758dc483ca2e9c030e16d8437ab862b4c593", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\t/*", "-\t* Feature in the Macintosh.  On OS 10.2, it is necessary", "-\t* to explicitly check in with the Process Manager and set", "-\t* the current process to be the front process in order for", "-\t* windows to come to the front by default.  The fix is call", "-\t* both GetCurrentProcess() and SetFrontProcess().", "-\t* ", "-\t* NOTE: It is not actually necessary to use the process", "-\t* serial number returned by GetCurrentProcess() in the", "-\t* call to SetFrontProcess() (ie. kCurrentProcess can be", "-\t* used) but both functions must be called in order for", "-\t* windows to come to the front.", "-\t*/", "-\tint [] psn = new int [2];", "-\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "-\t\tint pid = OS.getpid ();", "-\t\tbyte [] buffer = null;", "-\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + pid)); //$NON-NLS-1$", "-\t\tif (ptr != 0) {", "-\t\t\tbuffer = new byte [OS.strlen (ptr) + 1];", "-\t\t\tOS.memmove (buffer, ptr, buffer.length);", "-\t\t} else {", "-\t\t\tif (APP_NAME != null) {", "-\t\t\t\tchar [] chars = new char [APP_NAME.length ()];", "-\t\t\t\tAPP_NAME.getChars (0, chars.length, chars, 0);", "-\t\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "-\t\t\t\tif (cfstring != 0) {", "-\t\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\t\trange.length = chars.length;", "-\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding ();", "-\t\t\t\t\tint [] size = new int [1];", "-\t\t\t\t\tint numChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, null, 0, size);", "-\t\t\t\t\tif (numChars != 0) {", "-\t\t\t\t\t\tbuffer = new byte [size [0] + 1];", "-\t\t\t\t\t\tnumChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, buffer, size [0], size);", "+\tint identifier = OS.CFBundleGetIdentifier(OS.CFBundleGetMainBundle());", "+\tSystem.out.println(identifier);", "+\tif (identifier == 0) {", "+\t\t/*", "+\t\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t\t * to explicitly check in with the Process Manager and set", "+\t\t * the current process to be the front process in order for", "+\t\t * windows to come to the front by default.  The fix is call", "+\t\t * both GetCurrentProcess() and SetFrontProcess().", "+\t\t * ", "+\t\t * NOTE: It is not actually necessary to use the process", "+\t\t * serial number returned by GetCurrentProcess() in the", "+\t\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t\t * used) but both functions must be called in order for", "+\t\t * windows to come to the front.", "+\t\t */", "+\t\tint [] psn = new int [2];", "+\t\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\t\tint pid = OS.getpid ();", "+\t\t\tbyte [] buffer = null;", "+\t\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + pid)); //$NON-NLS-1$", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tbuffer = new byte [OS.strlen (ptr) + 1];", "+\t\t\t\tOS.memmove (buffer, ptr, buffer.length);", "+\t\t\t} else {", "+\t\t\t\tif (APP_NAME != null) {", "+\t\t\t\t\tchar [] chars = new char [APP_NAME.length ()];", "+\t\t\t\t\tAPP_NAME.getChars (0, chars.length, chars, 0);", "+\t\t\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "+\t\t\t\t\tif (cfstring != 0) {", "+\t\t\t\t\t\tCFRange range = new CFRange ();", "+\t\t\t\t\t\trange.length = chars.length;", "+\t\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding ();", "+\t\t\t\t\t\tint [] size = new int [1];", "+\t\t\t\t\t\tint numChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, null, 0, size);", "+\t\t\t\t\t\tif (numChars != 0) {", "+\t\t\t\t\t\t\tbuffer = new byte [size [0] + 1];", "+\t\t\t\t\t\t\tnumChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, buffer, size [0], size);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.CFRelease (cfstring);", "-\t\t\t\t\tOS.CFRelease (cfstring);", "-\t\t}", "-\t\tif (buffer != null) OS.CPSSetProcessName (psn, buffer);\t", "-\t\tOS.CPSEnableForegroundOperation (psn, 0x03, 0x3C, 0x2C, 0x1103);", "-\t\tOS.SetFrontProcess (psn);", "-\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid)); //$NON-NLS-1$", "-\t\tif (ptr != 0) {", "-\t\t\tint image = readImageRef (ptr);", "-\t\t\tif (image != 0) {", "-\t\t\t\tdockImage = image;", "-\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "+\t\t\tif (buffer != null) OS.CPSSetProcessName (psn, buffer);\t", "+\t\t\tOS.CPSEnableForegroundOperation (psn, 0x03, 0x3C, 0x2C, 0x1103);", "+\t\t\tOS.SetFrontProcess (psn);", "+\t\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid)); //$NON-NLS-1$", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tint image = readImageRef (ptr);", "+\t\t\t\tif (image != 0) {", "+\t\t\t\t\tdockImage = image;", "+\t\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f72d607013b3b5315b69a65a2b2d2d56", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "0e8c25110c564e91ab979b825e81040b88b85589", "commitAfterChange": "f400381fc30b43be36a25963c2aef57afc12bafd", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": "\r void handleTextChanging(TextChangingEvent event)", "signatureAfterChange": "\r void handleTextChanging(TextChangingEvent event)", "diff": ["+\t\r", "+\t// Update the caret offset if it is greater than the length of the content.\r", "+\t// This is necessary since style range API may be called between the\r", "+\t// handleTextChanging and handleTextChanged events and this API sets the\r", "+\t// caretOffset.\r", "+\tint newEndOfText = content.getCharCount() - event.replaceCharCount + event.newCharCount;\r", "+\tif (caretOffset > newEndOfText) caretOffset = newEndOfText;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a9b2ceeabaf7d89df8c890aa6aad120", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "abbd96fbafe8716e06f2a5608be6bc1b88d6dae2", "commitAfterChange": "36bf5947dc98ca54efab2d6e5b3e64ddcc862752", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 116, "signatureBeforeChange": "  void showWidget (boolean visible)", "signatureAfterChange": "  void showWidget (boolean visible)", "diff": ["-\tOS.ShowWindow (handle, visible ? OS.SW_SHOW : OS.SW_HIDE);", "+\tint topHandle = topHandle ();", "+\tOS.ShowWindow (topHandle, visible ? OS.SW_SHOW : OS.SW_HIDE);", "+\tif (handle != topHandle) OS.ShowWindow (handle, visible ? OS.SW_SHOW : OS.SW_HIDE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef442aad7d555ab474998668854fe09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "e293cd5ca9ec202629c2ce24590166a853a347b7", "commitAfterChange": "c9d60234b32c9420ae860fac88795cd3b6c22a04", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r public void setDefaultItem (MenuItem item)", "signatureAfterChange": "\r public void setDefaultItem (MenuItem item)", "diff": ["-\tint command = -1;\r", "+\tint newID = -1;\r", "-\t\tcommand = item.id;\r", "+\t\tnewID = item.id;\r", "-\tOS.SetMenuDefaultItem (handle, command, OS.MF_BYCOMMAND);\r", "+\tint oldID = OS.GetMenuDefaultItem (handle, OS.MF_BYCOMMAND, OS.GMDI_USEDISABLED);\r", "+\tif (newID == oldID) return;\r", "+\tOS.SetMenuDefaultItem (handle, newID, OS.MF_BYCOMMAND);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "520bc72d52638ea47a1c60457a5063f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "97bfd7d144f5874b34006dfdb3c692e6feda6358", "commitAfterChange": "bf9758b9cb8ce5d9385b68d357380da20d59961e", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "  void updateImageList ()", "signatureAfterChange": "  void updateImageList ()", "diff": ["+\t/*", "+\t* Feature in Windows.  When setting the same image list multiple", "+\t* times, Windows does work making this operation slow.  The fix", "+\t* is to test for the same image list before setting the new one.", "+\t*/", "-\tOS.SendMessage (handle, OS.TVM_SETIMAGELIST, OS.TVSIL_NORMAL, hImageList);", "+\tint hOldImageList = OS.SendMessage (handle, OS.TVM_GETIMAGELIST, OS.TVSIL_NORMAL, 0);", "+\tif (hImageList != hOldImageList) {", "+\t\tOS.SendMessage (handle, OS.TVM_SETIMAGELIST, OS.TVSIL_NORMAL, hImageList);", "+\t}"]}], "num": 30173}
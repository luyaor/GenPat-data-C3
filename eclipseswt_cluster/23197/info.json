{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cb5135ed393893c7872d0ed695cdc16", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dffb429ecd5f9985b05510a929c9f39", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["-    handle= OS.NewControl(0, new Rect(), null, false, (short)(OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick), (short)0, (short)0, (short)OS.kControlUserPaneProc, 0);", "+\thandle= MacUtil.createDrawingArea(parentHandle, -1, true, 0, 0, 0);\t\t", "-\tMacUtil.insertControl(handle, parentHandle, -1);", "-\tOS.HIViewSetVisible(handle, true);", "+", "+\tint wHandle= OS.GetControlOwner(parentHandle);", "+\tMacRect bounds= new MacRect();", "+\tOS.GetControlBounds(handle, bounds.getData());", "+\tint frameType= OS.kTXNTextEditStyleFrameType;", "+\tint iFileType= OS.kTXNUnicodeTextFile;", "+\tint iPermanentEncoding= OS.kTXNSystemDefaultEncoding;", "+\tint[] tnxObject= new int[1];", "+\tint[] frameID= new int[1];", "-\tint wHandle= OS.GetControlOwner(parentHandle);\t", "-\tint[] rootHandle= new int[1];", "-\tOS.GetRootControl(wHandle, rootHandle);", "-\tint root= rootHandle[0];", "+\tint root;", "+\tif (true) {", "+\t\tint[] rootHandle= new int[1];", "+\t\tOS.GetRootControl(wHandle, rootHandle);", "+\t\troot= rootHandle[0];", "+\t} else {", "+\t\troot= OS.HIViewGetRoot(wHandle);", "+\t}", "-\tint frameType= OS.kTXNTextEditStyleFrameType;", "-\tint iFileType= OS.kTXNUnicodeTextFile;", "-\tint iPermanentEncoding= OS.kTXNSystemDefaultEncoding;", "-\tint[] tnxObject= new int[1];", "-\tint[] frameID= new int[1];", "-\tRect bounds= new Rect();", "-\tMacUtil.getControlBounds(handle, bounds);", "-\tint status= OS.TXNNewObject(0, wHandle, bounds, frameOptions, frameType, iFileType,", "-\t\t\t\t\tiPermanentEncoding, tnxObject, frameID, handle);", "-\tif (status != OS.noErr)", "+\tint status= OS.TXNNewObject(0, wHandle, bounds.getData(), frameOptions, frameType, iFileType, iPermanentEncoding,", "+\t\t\t\t\t\ttnxObject, frameID, handle);", "+\tif (status != OS.kNoErr)", "-\t\tint rc= OS.GetIndexedSubControl(root, i, child);", "-\t\t//OS.HIViewRemoveFromSuperview(child[0]);", "+\t\tOS.GetIndexedSubControl(root, i, child);", "+\t\tOS.HIViewRemoveFromSuperview(child[0]);", "-\t\t//WidgetTable.put(child[0], this);", "-\ttx= tnxObject[0];", "-\ttxFrameID= frameID[0];", "-\tOS.TXNActivate(tx, txFrameID, OS.kScrollBarsSyncWithFocus);", "+\tfTX= tnxObject[0];", "+\tfFrameID= frameID[0];", "+\tOS.TXNActivate(fTX, fFrameID, OS.kScrollBarsSyncWithFocus);", "-\tOS.TXNFocus(tx, false);", "+\tOS.TXNFocus(fTX, false);", "-\tOS.TXNSetData(tx, OS.kTXNUnicodeTextData, new char[] { ' ' }, 2, 0, 0);", "-\tOS.TXNSetData(tx, OS.kTXNUnicodeTextData, new char[0], 0, 0, 1);", "+\tOS.TXNSetData(fTX, new char[] { ' ' }, 0, 0);", "+\tOS.TXNSetData(fTX, new char[0], 0, 1);", "-\tRect margins= new Rect();", "-\tmargins.top= margins.left= margins.bottom= margins.right= MARGIN;", "-\tint ptr= OS.NewPtr(Rect.sizeof);", "-\tOS.memcpy(ptr, margins, Rect.sizeof);", "-\tOS.TXNSetTXNObjectControls(tx, false, 1, new int[] { OS.kTXNMarginsTag }, new int[] {ptr});", "-\tOS.DisposePtr(ptr);", "-\tOS.TXNSetTXNObjectControls(tx, false, 1, new int[] { OS.kTXNDoFontSubstitution }, new int[] { 1 });", "+\tOS.setTXNMargins(fTX, (short)MARGIN);", "+", "+\tOS.TXNSetTXNObjectControls(fTX, false, 1, new int[] { OS.kTXNDoFontSubstitution }, new int[] { 1 });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40562f3c74a433573d034f3d8696eda7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "0ef9617c1012a47a6d1ff1554f6abcb04cfa36ad", "commitAfterChange": "26cde76ce3c88c1f3b47c43e3bb62261f679e704", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private int dragTrackingHandler(int message, int theWindow, int handlerRefCon, int theDrag)", "signatureAfterChange": "  private int dragTrackingHandler(int message, int theWindow, int handlerRefCon, int theDrag)", "diff": ["-\tif (message == OS.kDragTrackingEnterWindow) {", "-\t\tlastOperation = -1;", "-\t\tdataTypes = null;", "+\t", "+\tif (message == OS.kDragTrackingLeaveWindow) {", "+\t\tupdateDragOverHover(0, null);", "+\t\teffect.show(DND.FEEDBACK_NONE, 0, 0);", "+\t\tOS.SetThemeCursor(OS.kThemeArrowCursor);", "+\t\tif (keyOperation == -1) return OS.noErr;", "+\t\tkeyOperation = -1;", "+\t\t", "+\t\tDNDEvent event = new DNDEvent();", "+\t\tevent.widget = this;", "+\t\tevent.time = (int)System.currentTimeMillis();", "+\t\tevent.detail = DND.DROP_NONE;", "+\t\ttry {", "+\t\t\tnotifyListeners(DND.DragLeave, event);", "+\t\t} catch (Throwable e) {}", "+\t\treturn OS.noErr;", "+\tint oldKeyOperation = keyOperation;", "+\t", "-\tsetEventData(theDrag, event);", "-", "-\tif (event.operations == 0 || event.dataTypes == null || event.dataTypes.length == 0) {", "-\t\tif (message == OS.kDragTrackingLeaveWindow) {", "-\t\t\tOS.SetThemeCursor(OS.kThemeArrowCursor);", "-\t\t} else {", "-\t\t\tOS.SetThemeCursor(OS.kThemeNotAllowedCursor);", "-\t\t}", "+\tif (!setEventData(theDrag, event)) {", "+\t\tOS.SetThemeCursor(OS.kThemeNotAllowedCursor);", "-\tTransferData[] allowedTypes = event.dataTypes;", "+\tTransferData[] allowedDataTypes = new TransferData[event.dataTypes.length];", "+\tSystem.arraycopy(event.dataTypes, 0, allowedDataTypes, 0, allowedDataTypes.length);", "-\t\t\tlastOperation = event.detail;", "+\t\t\tselectedDataType = null;", "+\t\t\tselectedOperation = 0;", "-\t\t\tif (lastOperation != event.detail) {", "+\t\t\tevent.dataType = selectedDataType;", "+\t\t\tif (keyOperation != oldKeyOperation) {", "-\t\t\t\tlastOperation = event.detail;", "-\t\t\tevent.dataType = selectedDataType;", "-\t\tcase OS.kDragTrackingLeaveWindow: {", "-\t\t\tevent.type = DND.DragLeave;", "-\t\t\tevent.detail = DND.DROP_NONE;", "-\t\t\tbreak;", "-\t\t}", "+\t", "+\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\tevent.detail = DND.DROP_NONE;", "-\t\tevent.dataType = null;", "+\t\tOS.SetThemeCursor(OS.kThemeNotAllowedCursor);", "+\t\treturn OS.dragNotAcceptedErr;", "-\t\tevent.detail = DND.DROP_MOVE;", "+\t\tevent.detail = (allowedOperations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "-\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "-\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "-\t\t\t\tselectedDataType = event.dataType;", "+\t\tfor (int i = 0; i < allowedDataTypes.length; i++) {", "+\t\t\tif (allowedDataTypes[i].type == event.dataType.type) {", "+\t\t\t\tselectedDataType = allowedDataTypes[i];", "-\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "+\tif (selectedDataType != null && (allowedOperations & event.detail) != 0) {", "-\tswitch (message) {", "-\t\tcase OS.kDragTrackingEnterWindow:", "-\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\t\tdragOverHeartbeat.run();", "-\t\t\teffect.show(event.feedback, event.x, event.y);", "-\t\t\tbreak;", "-\t\tcase OS.kDragTrackingInWindow:", "-\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\t\teffect.show(event.feedback, event.x, event.y);", "-\t\t\tbreak;", "-\t\tcase OS.kDragTrackingLeaveWindow: {", "-\t\t\tupdateDragOverHover(0, null);", "-\t\t\teffect.show(DND.FEEDBACK_NONE, 0, 0);", "-\t\t\tOS.SetThemeCursor(OS.kThemeArrowCursor);", "-\t\t\treturn OS.noErr;", "-\t\t}", "-\t}", "-\t", "-\t", "+\teffect.show(event.feedback, event.x, event.y);", "+", "+  \tif (message == OS.kDragTrackingEnterWindow) {", "+\t\tdragOverHeartbeat.run();\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c32cb6b768c2aca80c46438aabbdd2d9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "eb0dd46e7194a9f7d813095a5dca290fae54babc", "commitAfterChange": "8174cf2444655210718c9dde4ae430f251492a85", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "\r \r int processMouse (int info)", "signatureAfterChange": "\r \r int processMouse (int info)", "diff": ["-\tEvent event = new Event ();\r", "+\tint type = 0;\r", "-\t\t\tevent.type = SWT.MouseDown;\r", "+\t\t\ttype = SWT.MouseDown;\r", "-\t\t\t//TEMPORARY CODE\r", "-//\t\t\tif ((state & CANVAS) != 0) return OS.Pt_CONTINUE;\r", "-\t\t\tevent.type = SWT.MouseUp;\r", "+\t\t\ttype = SWT.MouseUp;\r", "-\t\t\tevent.type = SWT.MouseMove;\r", "+\t\t\ttype = SWT.MouseMove;\r", "-\t\t\tswitch (ev.subtype) {\r", "-\t\t\t\tcase OS.Ph_EV_DRAG_MOTION_EVENT:\r", "-\t\t\t\t\tevent.type = SWT.MouseMove;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase OS.Ph_EV_DRAG_COMPLETE:\r", "-\t\t\t\t\tevent.type = SWT.MouseUp;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tdefault:\r", "-\t\t\t\t\treturn OS.Pt_CONTINUE;\r", "+\t\t\tif (ev.subtype != OS.Ph_EV_DRAG_MOTION_EVENT) {\r", "+\t\t\t\treturn OS.Pt_CONTINUE;\r", "+\t\t\ttype = SWT.MouseMove;\r", "-\tevent.time = ev.timestamp;\r", "-\tevent.x = pe.pos_x + ev.translation_x;\r", "-\tevent.y = pe.pos_y + ev.translation_y;\r", "-\tif (event.type == SWT.MouseDown || event.type == SWT.MouseUp) {\r", "-\t\tswitch (pe.buttons) {\r", "-\t\t\tcase OS.Ph_BUTTON_SELECT:\tevent.button = 1; break;\r", "-\t\t\tcase OS.Ph_BUTTON_ADJUST:\tevent.button = 2; break;\r", "-\t\t\tcase OS.Ph_BUTTON_MENU:\t\tevent.button = 3; break;\r", "+\tEvent event = new Event ();\r", "+\tevent.time = ev.timestamp;\r", "+\tsetMouseState (event, pe, ev);\r", "+\tpostEvent (type, event);\r", "+\tif (type == SWT.MouseDown) {\r", "+\t\tif (event.button == 3) {\r", "+\t\t\tif (menu != null && !menu.isDisposed ()) {\r", "+\t\t\t\tDisplay display = getDisplay ();\r", "+\t\t\t\tdisplay.runDeferredEvents ();\r", "+\t\t\t\tmenu.setVisible (true);\r", "+\t\t\t}\r", "-\t}\r", "-\tsetMouseState (ev.type, event, pe);\r", "-\tpostEvent (event.type, event);\r", "-\tif (ev.type == OS.Ph_EV_BUT_PRESS && pe.click_count == 2) {\r", "-\t\tEvent clickEvent = new Event ();\r", "-\t\tclickEvent.time = event.time;\r", "-\t\tclickEvent.x = event.x;\r", "-\t\tclickEvent.y = event.y;\r", "-\t\tclickEvent.button = event.button;\r", "-\t\tclickEvent.stateMask = event.stateMask;\r", "-\t\tpostEvent (SWT.MouseDoubleClick, clickEvent);\r", "-\t}\r", "-\tif (event.type == SWT.MouseDown) {\r", "+\t\tif (pe.click_count == 2) {\r", "+\t\t\tEvent clickEvent = new Event ();\r", "+\t\t\tclickEvent.time = event.time;\r", "+\t\t\tclickEvent.x = event.x;\r", "+\t\t\tclickEvent.y = event.y;\r", "+\t\t\tclickEvent.button = event.button;\r", "+\t\t\tclickEvent.stateMask = event.stateMask;\r", "+\t\t\tpostEvent (SWT.MouseDoubleClick, clickEvent);\r", "+\t\t}\r"]}], "num": 23197}
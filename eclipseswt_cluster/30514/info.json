{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8460ce7219f5ac8ee277287b49023fb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f08493118fec8145bb160149ad384109", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem2.java", "commitBeforeChange": "8b437fb3842f95560dedea9ef4177462cda26613", "commitAfterChange": "548b08f4bee4c72ec1917d36850a817afc8e2973", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void drawSelected(GC gc )", "signatureAfterChange": " void drawSelected(GC gc )", "diff": ["+\tPoint size = parent.getSize();", "+\t// Draw selection border across all tabs", "+\tint parentX = parent.borderLeft;", "+\tint parentY = parent.onBottom ? size.y - parent.borderBottom - parent.tabHeight - CTabFolder2.HIGHLIGHT_HEADER : parent.borderTop + parent.tabHeight + 1;", "+\tint parentWidth = size.x - parent.borderLeft - parent.borderRight;", "+\tint parentHeight = CTabFolder2.HIGHLIGHT_HEADER - 1;", "+\tint[] shape = new int[] {parentX,parentY, parentX+parentWidth,parentY, parentX+parentWidth,parentY+parentHeight, parentX,parentY+parentHeight};", "+\tparent.drawSelectionBackground(gc, shape);", "+", "+\t// if selected tab scrolled out of view or partially out of view", "+\t// draw line and clean up partial tab area", "-\tif (x >= rightTabEdge) return;", "-\t// Do not draw partial items", "-\tif (!parent.single && parent.items[parent.topTabIndex] != this && x + width >= rightTabEdge){", "+\tif (!parent.single && parent.selectedIndex != parent.topTabIndex && x + width >= rightTabEdge){", "+\t\tif (parent.onBottom) {", "+\t\t\tshape = new int[4];", "+\t\t\tint index = 0;", "+\t\t\tshape[index++] = Math.max(0, parent.borderLeft - 1);", "+\t\t\tshape[index++] = y - 1;", "+\t\t\tshape[index++] = size.x - parent.borderRight;", "+\t\t\tshape[index++] = y - 1;", "+\t\t} else {", "+\t\t\tshape = new int[4];", "+\t\t\tint index = 0;", "+\t\t\tshape[index++] = Math.max(0, parent.borderLeft - 1);", "+\t\t\tshape[index++] = y + height;", "+\t\t\tshape[index++] = size.x - parent.borderRight;", "+\t\t\tshape[index++] = y + height;", "+\t\t}", "+\t\t// draw line\t", "+\t\tgc.setForeground(CTabFolder2.borderColor1);", "+\t\tgc.drawPolyline(shape);", "+\t\t// if tab partially visible, fill in background for tab", "-\t\tgc.fillRectangle(x, y - 1, parent.getSize().x - x, height + 1);", "+\t\tgc.fillRectangle(x, y - 1, size.x - x, height + 1);", "+\t", "+\t// draw selected tab background and outline", "-\t// draw background", "-\tint[] shape = null;", "+\tshape = null;", "-\t\tshape = new int[left.length+right.length+6];", "+\t\tshape = new int[left.length+right.length+8];", "+\t\tshape[index++] = x; // first point repeated here because below we reuse shape to draw outline", "+\t\tshape[index++] = y - 1;", "-\t\t\tshape[index++] = y + right[2*i+1] - 1;", "+\t\t\tshape[index++] = y + right[2*i+1] - 2;", "-\t\tshape = new int[left.length+right.length+6];", "+\t\tshape = new int[left.length+right.length+8];", "+\t\tshape[index++] = x; // first point repeated here because below we reuse shape to draw outline", "+\t\tshape[index++] = y + height;", "+\t", "+\t// draw outline", "+\tshape[0] = Math.max(0, parent.borderLeft - 1);", "+\tshape[shape.length - 2] = size.x - parent.borderRight;", "+\tif (parent.onBottom) {", "+\t\tfor (int i = 0; i < shape.length/2; i++) {", "+\t\t\tif (shape[2*i + 1] == y + height + 1) shape[2*i + 1] -= 1;", "+\t\t}", "+\t} else {", "+\t\tfor (int i = 0; i < shape.length/2; i++) {", "+\t\t\tif (shape[2*i + 1] == y + height + 1) shape[2*i + 1] -= 1;", "+\t\t}", "+\t}", "+\tRGB inside = parent.selectionBackground.getRGB();", "+\tif (parent.backgroundImage != null || (parent.gradientColors != null && parent.gradientColors.length > 1)) inside = null;", "+\tRGB outside = parent.single ? parent.getBackground().getRGB() : parent.getParent().getBackground().getRGB();\t\t", "+\tparent.antialias(shape, CTabFolder2.borderColor1.getRGB(), inside, outside, gc);", "+\tgc.setForeground(CTabFolder2.borderColor1);", "+\tgc.drawPolyline(shape);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb8a69223981f78716f795d4e322a74", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem2.java", "commitBeforeChange": "65aaf6e9768e61429e9ffb0c0ae5577af65eba85", "commitAfterChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void drawSelected(GC gc )", "signatureAfterChange": " void drawSelected(GC gc )", "diff": ["-\tparent.drawSelectionBackground(gc, shape);", "+\tparent.drawBackground(gc, shape, true);", "-\t\tgc.setBackground(parent.getParent().getBackground());", "-\t\tgc.fillRectangle(x, y - 1, size.x - x, height + 1);", "+\t\tshape = new int[] {x,y-1, x,y+height, size.x,y+height, size.x,y-1};", "+\t\tparent.drawBackground(gc, shape, false);", "+", "+\t// fill in background for non-rectangular shape", "+\tshape = new int[] {x,y, x+width,y, x+width,y+height, x,y+height};", "+\tparent.drawBackground(gc, shape, false);", "-\tparent.drawSelectionBackground(gc, shape);", "+\tparent.drawBackground(gc, shape, true);", "-\t// Shape is non-rectangular", "+\t// Limit drawing area of tab", "-\tr.add(new Rectangle(x, y, width, height));", "-\tr.subtract(shape);", "-\tif (parent.single) {", "-\t\t// for a single tab,  fill in gaps with background colour", "-\t\tgc.setBackground(parent.getBackground());", "-\t} else {", "-\t\t// for mutliple tabs, fill in gaps with parent colours", "-\t\tgc.setBackground(parent.getParent().getBackground());", "-\t}", "-\tCTabFolder2.fillRegion(gc, r);", "-", "-\t// Limit drawing area of tab\t", "+\tr.subtract(r); //clear", "-\tr.subtract(r); //clear", "-\t\tgc.drawFocus(xDraw-2, textY-2, extent.x+3, extent.y+4);", "+\t\tgc.drawFocus(xDraw-3, textY-2, extent.x+6, extent.y+4);", "-\tshape[shape.length - 2] = size.x - parent.borderRight;", "-\tif (parent.onBottom) {", "-\t\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\t\tif (shape[2*i + 1] == y + height + 1) shape[2*i + 1] -= 1;", "-\t\t}", "-\t} else {", "-\t\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\t\tif (shape[2*i + 1] == y + height + 1) shape[2*i + 1] -= 1;", "-\t\t}", "+\tshape[shape.length - 2] = size.x - parent.borderRight + 1;", "+\tfor (int i = 0; i < shape.length/2; i++) {", "+\t\tif (shape[2*i + 1] == y + height + 1) shape[2*i + 1] -= 1;", "-\tif (parent.backgroundImage != null || (parent.gradientColors != null && parent.gradientColors.length > 1)) inside = null;", "-\tRGB outside = parent.single ? parent.getBackground().getRGB() : parent.getParent().getBackground().getRGB();\t\t", "+\tif (parent.selectionBgImage != null || (parent.selectionGradientColors != null && parent.selectionGradientColors.length > 1 && !parent.selectionGradientVertical)) inside = null;", "+\tRGB outside = parent.getBackground().getRGB();\t\t", "+\tif (parent.bgImage != null || (parent.gradientColors != null && parent.gradientColors.length > 1 && !parent.gradientVertical)) outside = null;"]}], "num": 30514}
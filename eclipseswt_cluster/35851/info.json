{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0d449b436dc4a01cd86372ab7f36ddd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0386dffc7fa93362d76701e8a63845ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": " static TableColumn createFillColumn(Table parent)", "signatureAfterChange": " void computeDisplayText (GC gc)", "diff": ["+void computeDisplayText (GC gc) {", "+\tint availableWidth = width - 2 * parent.getHeaderPadding (); ", "+\tif (image != null) {", "+\t\tavailableWidth -= image.getBounds ().width;", "+\t\tavailableWidth -= Table.MARGIN_IMAGE;", "+\t}", "+\tString text = this.text;", "+\tint textWidth = gc.textExtent (text).x;", "+\tif (textWidth <= availableWidth) {", "+\t\tdisplayText = text;", "+\t\treturn;", "+\t}", "- */", "-static TableColumn createFillColumn(Table parent) {", "-\tTableColumn fillColumn = new TableColumn(parent);", "+\t/* Ellipsis will be needed, so subtract their width from the available text width */", "+\tint ellipsisWidth = gc.textExtent (Table.ELLIPSIS).x;", "+\tavailableWidth -= ellipsisWidth;", "+\tif (availableWidth <= 0) {", "+\t\tdisplayText = Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "-\tfillColumn.setIndex(FILL);", "-\treturn fillColumn;", "+\t/* Make initial guess. */", "+\tint index = availableWidth / gc.getFontMetrics ().getAverageCharWidth ();", "+\ttextWidth = gc.textExtent (text.substring (0, index)).x;", "+", "+\t/* Initial guess is correct. */", "+\tif (availableWidth == textWidth) {", "+\t\tdisplayText = text.substring (0, index) + Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "+", "+\t/* Initial guess is too high, so reduce until fit is found. */", "+\tif (availableWidth < textWidth) {", "+\t\tdo {", "+\t\t\tindex--;", "+\t\t\tif (index < 0) {", "+\t\t\t\tdisplayText = Table.ELLIPSIS;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\ttext = text.substring (0, index);", "+\t\t\ttextWidth = gc.textExtent (text).x;", "+\t\t} while (availableWidth < textWidth);", "+\t\tdisplayText = text + Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "+\t", "+\t/* Initial guess is too low, so increase until overrun is found. */", "+\twhile (textWidth < availableWidth) {", "+\t\tindex++;", "+\t\ttextWidth = gc.textExtent (text.substring (0, index)).x;", "+\t}", "+\tdisplayText = text.substring (0, index - 1) + Table.ELLIPSIS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "554907941e81bbf1403469678236ef30", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "5a4ec706c1fb816c9cff4c4e7493b85db9b7b5b8", "commitAfterChange": "30b3672ceb3d2c5d7c5e65c4765952fcea275186", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 83, "signatureBeforeChange": "  LRESULT sendMouseDownEvent (int type, int button, int msg, int wParam, int lParam)", "signatureAfterChange": "  LRESULT sendMouseDownEvent (int type, int button, int msg, int wParam, int lParam)", "diff": ["+\tDisplay display = this.display;", "+\tdisplay.captureChanged = false;", "+\tif (!sendMouseEvent (type, button, handle, msg, wParam, lParam)) {", "+\t\tif (!display.captureChanged && !isDisposed ()) {", "+\t\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "+\t\t}", "+\t\treturn LRESULT.ZERO;", "+\t}", "+\t", "-\tDisplay display = this.display;", "-\tdisplay.captureChanged = false;", "-\tif (!sendMouseEvent (type, button, handle, msg, wParam, lParam)) {", "-\t\tif (!display.captureChanged && !isDisposed ()) {", "-\t\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "+\tif ((style & SWT.FULL_SELECTION) == 0) {", "+\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\tOS.SendMessage (handle, OS.LVM_SUBITEMHITTEST, 0, pinfo);", "+\t\t\tif (pinfo.iItem == -1) {", "+\t\t\t\tint count = (int)/*64*/OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "+\t\t\t\tif (count != 0) {", "+\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\trect.left = OS.LVIR_ICON;", "+\t\t\t\t\tignoreCustomDraw = true;", "+\t\t\t\t\tint /*long*/ code = OS.SendMessage (handle, OS.LVM_GETITEMRECT, 0, rect);", "+\t\t\t\t\tignoreCustomDraw = false;", "+\t\t\t\t\tif (code != 0) {", "+\t\t\t\t\t\tpinfo.x = rect.left;", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SUBITEMHITTEST, 0, pinfo);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (pinfo.iSubItem != 0) pinfo.iItem = -1;", "+\t\t\t}", "-\t\treturn LRESULT.ZERO;", "-", "+\t", "+\t", "+\t/* Determine whether the user has selected an item based on SWT.MeasureItem */", "+\tfullRowSelect = false;", "+\tif (pinfo.iItem != -1) {", "+\t\tif ((style & SWT.FULL_SELECTION) == 0) {", "+\t\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\t\tfullRowSelect = hitTestSelection (pinfo.iItem, pinfo.x, pinfo.y);", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\t\tif (fullRowSelect) dragDetect = true;", "+\t}", "+\t", "+\t/*", "+\t* Temporarily set LVS_EX_FULLROWSELECT to allow drag and drop", "+\t* and the mouse to manipulate items based on the results of", "+\t* the SWT.MeasureItem event.", "+\t*/", "+\tif (fullRowSelect) {", "+\t\tOS.UpdateWindow (handle);", "+\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, OS.LVS_EX_FULLROWSELECT, OS.LVS_EX_FULLROWSELECT);", "+\tif (fullRowSelect) {", "+\t\tfullRowSelect = false;", "+\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, OS.LVS_EX_FULLROWSELECT, 0);", "+\t}", "+\t"]}], "num": 35851}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c94191cfcd8305a3983cfe81b74e5ef4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f68b016211bf35ff468b99b4e788eca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fe01df1082b5613213a59b03292c02660626087d", "commitAfterChange": "e771e3576d1e1ba57ba12fa501dc8174c6ca74e8", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "  void initClasses ()", "signatureAfterChange": "  void initClasses ()", "diff": ["-", "+\tint markedRangeProc = OS.markedRange_CALLBACK(proc2);", "+\tint selectedRangeProc = OS.selectedRange_CALLBACK(proc2);", "+\tint setMarkedText_selectedRangeProc = OS.setMarkedText_selectedRange_CALLBACK(proc4);", "+\tint attributedSubstringFromRangeProc = OS.attributedSubstringFromRange_CALLBACK(proc3);", "+\tint characterIndexForPointProc = OS.characterIndexForPoint_CALLBACK(proc3);", "+\tint firstRectForCharacterRangeProc = OS.firstRectForCharacterRange_CALLBACK(proc3);\t", "+\t", "+\tOS.class_addProtocol(cls, OS.objc_getProtocol(\"NSTextInput\"));", "+\t", "+\t//NSTextInput protocol", "+\tOS.class_addMethod(cls, OS.sel_hasMarkedText, proc2, \"@:\");", "+\tOS.class_addMethod(cls, OS.sel_markedRange, markedRangeProc, \"@:\");", "+\tOS.class_addMethod(cls, OS.sel_selectedRange, selectedRangeProc, \"@:\");", "+\tOS.class_addMethod(cls, OS.sel_setMarkedText_1selectedRange_1, setMarkedText_selectedRangeProc, \"@:@{NSRange}\");", "+\tOS.class_addMethod(cls, OS.sel_unmarkText, proc2, \"@:\");", "+\tOS.class_addMethod(cls, OS.sel_validAttributesForMarkedText, proc2, \"@:\");", "+\tOS.class_addMethod(cls, OS.sel_attributedSubstringFromRange_1, attributedSubstringFromRangeProc, \"@:{NSRange}\");", "+\tOS.class_addMethod(cls, OS.sel_insertText_1, proc3, \"@:@\");", "+\tOS.class_addMethod(cls, OS.sel_characterIndexForPoint_1, characterIndexForPointProc, \"@:{NSPoint}\");", "+\tOS.class_addMethod(cls, OS.sel_firstRectForCharacterRange_1, firstRectForCharacterRangeProc, \"@:{NSRange}\");", "+\tOS.class_addMethod(cls, OS.sel_doCommandBySelector_1, proc3, \"@::\");", "+\t", "+\tOS.class_addMethod(cls, OS.sel_insertText_1, proc3, \"@:@\");", "+\tOS.class_addMethod(cls, OS.sel_doCommandBySelector_1, proc3, \"@::\");", "+\tOS.objc_registerClassPair(cls);", "+\t", "+\tclassName = \"SWTEditorView\";", "+\tcls = OS.objc_allocateClassPair(OS.class_NSTextView, className, 0);", "+\tOS.class_addIvar(cls, SWT_OBJECT, OS.PTR_SIZEOF, (byte)(Math.log(OS.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addMethod(cls, OS.sel_keyDown_1, proc3, \"@:@\");", "+\tOS.class_addMethod(cls, OS.sel_keyUp_1, proc3, \"@:@\");", "+\tOS.class_addMethod(cls, OS.sel_insertText_1, proc3, \"@:@\");", "+\tOS.class_addMethod(cls, OS.sel_doCommandBySelector_1, proc3, \"@::\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "511b2bab8e00083587149e5931b234c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "86e590387fc98740eb431ea80c5942750b2c6d0c", "commitAfterChange": "b9e679d47d2b65f7ad52dcb0b148e03cb3e9caf3", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 84, "signatureBeforeChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\tboolean processSegments = false, redraw = false;", "+\tint code;", "+\tif (hooks (SWT.GetSegments) || filters (SWT.GetSegments)) {", "+\t\tswitch (msg) {", "+\t\t\tcase OS.WM_KEYDOWN: {", "+\t\t\t\tswitch (wParam) {", "+\t\t\t\t\tcase OS.VK_DELETE: {", "+\t\t\t\t\t\tprocessSegments = segments != null;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase OS.VK_LEFT:", "+\t\t\t\t\tcase OS.VK_RIGHT: {", "+\t\t\t\t\t\tif (segments != null && OS.GetKeyState (OS.VK_MENU) >= 0) {", "+\t\t\t\t\t\t\tint [] start = new int [1], newStart = new int [1], end = new int [1], newEnd = new int [1];", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\t\t\t\t\t\t\tfor (;;) {", "+\t\t\t\t\t\t\t\tcode = super.windowProc (hwnd, msg, wParam, lParam);", "+\t\t\t\t\t\t\t\tif (code != 1) return code;", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, newStart, newEnd);", "+\t\t\t\t\t\t\t\tif (newStart [0] != start [0] && untranslateOffset (newStart [0]) == untranslateOffset (start [0])) {", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (newEnd [0] != end [0] && untranslateOffset (newEnd [0]) == untranslateOffset (end [0])) {", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn code;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.WM_COPY: {", "+\t\t\t\tprocessSegments = segments != null;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.WM_CHAR: {", "+\t\t\t\tprocessSegments = !ignoreCharacter && OS.GetKeyState (OS.VK_CONTROL) >= 0 && OS.GetKeyState (OS.VK_MENU) >= 0;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.WM_PASTE:", "+\t\t\tcase OS.WM_CUT:", "+\t\t\tcase OS.WM_CLEAR: {", "+\t\t\t\tprocessSegments = true;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (processSegments) {", "+\t\tif (getDrawing () && OS.IsWindowVisible (handle)) {", "+\t\t\tredraw = true;", "+\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\t}", "+\t\tclearSegments (true);", "+\t}", "-\treturn super.windowProc (hwnd, msg, wParam, lParam);", "+\tcode = super.windowProc (hwnd, msg, wParam, lParam);", "+\tif (processSegments) {", "+\t\tapplySegments ();", "+\t\tif (redraw) {", "+\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\tif (OS.IsWinCE) {", "+\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t} else {", "+\t\t\t\tOS.RedrawWindow (handle, null, 0, OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE); ", "+\t\t\t}", "+\t\t}", "+\t\tOS.SendMessage (handle, OS.EM_SCROLLCARET, 0, 0);", "+\t}", "+\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a757651b5c6468abe8328b8385675b44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "19c0222eaad94683f1cf6389644b40fecfc90bf6", "commitAfterChange": "bf219895eeed085ac7691759faac06580d81d416", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath);", "+\t\t\tLocationProvider.AddRef ();", "+", "+\t\t\t/* extract external.xpt to temp */", "+\t\t\tString tempPath = System.getProperty (\"java.io.tmpdir\"); //$NON-NLS-1$", "+\t\t\tFile componentsDir = new File (tempPath, \"eclipse/mozillaComponents\"); //$NON-NLS-1$", "+\t\t\tLocationProvider.setComponentsPath (componentsDir.getAbsolutePath ());", "+\t\t\tjava.io.InputStream is = Library.class.getResourceAsStream (\"/external.xpt\"); //$NON-NLS-1$", "+\t\t\tif (is != null) {", "+\t\t\t\tif (!componentsDir.exists ()) {", "+\t\t\t\t\tcomponentsDir.mkdir ();", "+\t\t\t\t}", "+\t\t\t\tint read;", "+\t\t\t\tbyte [] buffer = new byte [4096];", "+\t\t\t\tFile file = new File (componentsDir, \"external.xpt\"); //$NON-NLS-1$", "+\t\t\t\ttry {", "+\t\t\t\t\tFileOutputStream os = new FileOutputStream (file);", "+\t\t\t\t\twhile ((read = is.read (buffer)) != -1) {", "+\t\t\t\t\t\tos.write(buffer, 0, read);", "+\t\t\t\t\t}", "+\t\t\t\t\tos.close ();", "+\t\t\t\t\tis.close ();", "+\t\t\t\t\tif (!Platform.PLATFORM.equals (\"win32\")) { //$NON-NLS-1$", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tRuntime.getRuntime ().exec (", "+\t\t\t\t\t\t\t\tnew String [] {\"chmod\", \"755\", file.getAbsolutePath ()}).waitFor (); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t} catch (Throwable e) {}", "+\t\t\t\t\t}", "+\t\t\t\t} catch (FileNotFoundException e) {", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t}", "+\t\t\t}", "+", "-", "-\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath);", "-\t\t\tLocationProvider.AddRef ();", "-\t\tserviceManager.Release ();", "+\t\tcomponentRegistrar.AutoRegister (0);\t /* detect the External component */ ", "+", "-\t\t", "+", "+\t\tExternalFactory externalFactory = new ExternalFactory ();", "+\t\texternalFactory.AddRef ();", "+\t\taContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.EXTERNAL_CONTRACTID, true); ", "+\t\taClassName = MozillaDelegate.wcsToMbcs (null, \"External\", true); //$NON-NLS-1$", "+\t\trc = componentRegistrar.RegisterFactory (XPCOM.EXTERNAL_CID, aClassName, aContractID, externalFactory.getAddress ());", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\texternalFactory.Release ();", "+", "+\t\trc = serviceManager.GetService (XPCOM.NS_CATEGORYMANAGER_CID, nsICategoryManager.NS_ICATEGORYMANAGER_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tserviceManager.Release ();", "+", "+\t\tnsICategoryManager categoryManager = new nsICategoryManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\tbyte[] category = MozillaDelegate.wcsToMbcs (null, \"JavaScript global property\", true); //$NON-NLS-1$", "+\t\tbyte[] entry = MozillaDelegate.wcsToMbcs (null, \"external\", true); //$NON-NLS-1$", "+\t\trc = categoryManager.AddCategoryEntry(category, entry, aContractID, 1, 1, result);", "+\t\tresult[0] = 0;", "+\t\tcategoryManager.Release ();", "+"]}], "num": 32415}
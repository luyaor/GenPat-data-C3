{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d81a3fa7e58d5cb2d322296258d318d8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d14984fb562a63175d55bed4a9d99cda", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "bc0159e1f232b2994f90bfab06507bbdbd612bc8", "commitAfterChange": "4bf0b224a9caf7edd2d827277068ffb2c6e7bf23", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " static int putImage(ImageData image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, int screenDepth, XColor[] xcolors, int[] transparentPixel, boolean isMask, int drawable)", "signatureAfterChange": " static int putImage(ImageData image, int srcX, int srcY, int srcWidth, int srcHeight, \t\tint destX, int destY, int destWidth, int destHeight, \t\tint screenDepth, int[] transparentPixel, int drawable)", "diff": ["-static int putImage(ImageData image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, int screenDepth, XColor[] xcolors, int[] transparentPixel, boolean isMask, int drawable) {", "+static int putImage(ImageData image, int srcX, int srcY, int srcWidth, int srcHeight,", "+\t\tint destX, int destY, int destWidth, int destHeight,", "+\t\tint screenDepth, int[] transparentPixel, int drawable) {", "+\t\t\t", "-", "+\t\t\t", "+\t\t/*", "+\t\t*/", "-\t\t/* AW", "-\t\tVisual xVisual = new Visual();", "-\t\tOS.memmove(xVisual, visual, Visual.sizeof);", "-\t\tdestRedMask = xVisual.red_mask;", "-\t\tdestGreenMask = xVisual.green_mask;", "-\t\tdestBlueMask = xVisual.blue_mask;", "-\t\t*/", "-\t\t// AW", "-\t\tdestRedMask = 0xff0000;", "-\t\tdestGreenMask = 0x00ff00;", "-\t\tdestBlueMask = 0x0000ff;", "+\t\tdestRedMask = getRedMask(screenDepth);", "+\t\tdestGreenMask = getGreenMask(screenDepth);", "+\t\tdestBlueMask = getBlueMask(screenDepth);", "-", "-\t/* Depth 1 */", "-\tif (image.depth == 1 && isMask) {", "-\t\tint bplX = ((destWidth + 7) / 8 + 3) & 0xFFFC;", "-\t\tint bufSize = bplX * destHeight;", "-\t\tbyte[] buf = new byte[bufSize];", "-\t\t/* AW", "-\t\tint bufPtr = OS.XtMalloc(bufSize);", "-\t\tint xImagePtr = OS.XCreateImage(display, visual, 1, OS.XYBitmap, 0, bufPtr, destWidth, destHeight, 32, bplX);", "-\t\tif (xImagePtr == 0) {", "-\t\t\tOS.XtFree(bufPtr);", "-\t\t\treturn SWT.ERROR_NO_HANDLES;", "-\t\t}", "-\t\t*/", "-\t\t/* AW code never executed because isMask == true", "-\t\tint foreground = 1, background = 0;", "-\t\tif (!isMask) {", "-\t\t\tforeground = 0;", "-\t\t\tif (srcReds.length > 1) {", "-\t\t\t\tforeground = ImageData.closestMatch(screenDepth, srcReds[1], srcGreens[1], srcBlues[1],", "-\t\t\t\t\tdestRedMask, destGreenMask, destBlueMask, destReds, destGreens, destBlues);", "-\t\t\t}", "-\t\t\tif (srcReds.length > 0) {", "-\t\t\t\tbackground = ImageData.closestMatch(screenDepth, srcReds[0], srcGreens[0], srcBlues[0],", "-\t\t\t\t\tdestRedMask, destGreenMask, destBlueMask, destReds, destGreens, destBlues);", "-\t\t\t}", "-\t\t}", "-\t\t*/", "-\t\t/* AW", "-\t\tXImage xImage = new XImage();", "-\t\tOS.memmove(xImage, xImagePtr, XImage.sizeof);", "-\t\txImage.byte_order = OS.MSBFirst;", "-\t\txImage.bitmap_unit = 8;", "-\t\txImage.bitmap_bit_order = OS.MSBFirst;", "-\t\tOS.memmove(xImagePtr, xImage, XImage.sizeof);", "-\t\t*/", "-\t\tint destOrder = ImageData.MSB_FIRST;", "-\t\tImageData.blit(ImageData.BLIT_SRC,", "-\t\t\timage.data, 1, image.bytesPerLine, image.getByteOrder(), srcX, srcY, srcWidth, srcHeight, null, null, null,", "-\t\t\tImageData.ALPHA_OPAQUE, null, 0,", "-\t\t\tbuf, 1, bplX, destOrder, 0, 0, destWidth, destHeight, null, null, null,", "-\t\t\tflipX, flipY);", "-\t\t", "-\t\t/* AW", "-\t\tOS.memmove(xImage.data, buf, bufSize);", "-\t\tXGCValues values = new XGCValues();", "-\t\tOS.XGetGCValues(display, gc, OS.GCForeground | OS.GCBackground, values);", "-\t\tOS.XSetForeground(display, gc, foreground);", "-\t\tOS.XSetBackground(display, gc, background);", "-\t\tOS.XPutImage(display, drawable, gc, xImagePtr, 0, 0, destX, destY, destWidth, destHeight);", "-\t\tOS.XSetForeground(display, gc, values.foreground);", "-\t\tOS.XSetBackground(display, gc, values.background);", "-\t\tOS.XDestroyImage(xImagePtr);", "-\t\t*/", "-\t\tOS.setBitMapData(drawable, buf);", "-\t\treturn 0;", "-\t}", "-\t/* Depths other than 1 */", "-\t/* AW", "-\tint xImagePtr = OS.XCreateImage(display, visual, screenDepth, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);", "-\tif (xImagePtr == 0) return SWT.ERROR_NO_HANDLES;", "-\t*/", "-\tXImage xImage = new XImage(destWidth, destHeight, 32);", "-\t/* AW", "-\tOS.memmove(xImage, xImagePtr, XImage.sizeof);", "-\t*/", "-\tint bufSize = xImage.bytes_per_line * destHeight;\t", "+\tint destDepth= 32;", "+\tint destBitsPerPixel= destDepth;", "+\t", "+\tint dest_red_mask= getRedMask(destBitsPerPixel);", "+\tint dest_green_mask= getGreenMask(destBitsPerPixel);", "+\tint dest_blue_mask= getBlueMask(destBitsPerPixel);", "+\t", "+\tint destRowBytes= rowBytes(destWidth, 32);", "+\tint bufSize = destRowBytes * destHeight;\t", "-\t/*", "-\tint bufPtr = OS.XtMalloc(bufSize);", "-\txImage.data = bufPtr;", "-\tOS.memmove(xImagePtr, xImage, XImage.sizeof);", "-\t*/", "+", "-\tint destOrder = xImage.byte_order == OS.MSBFirst ? ImageData.MSB_FIRST : ImageData.LSB_FIRST;", "-\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xImage.red_mask, xImage.green_mask, xImage.blue_mask,", "+\t\t\t\tbuf, destBitsPerPixel, destRowBytes, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, dest_red_mask, dest_green_mask, dest_blue_mask,", "-\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,", "+\t\t\t\tbuf, destBitsPerPixel, destRowBytes, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,", "-\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xImage.red_mask, xImage.green_mask, xImage.blue_mask,", "+\t\t\t\tbuf, destBitsPerPixel, destRowBytes, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, dest_red_mask, dest_green_mask, dest_blue_mask,", "-\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,", "+\t\t\t\tbuf, destBitsPerPixel, destRowBytes, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,", "-\t/* AW", "-\tOS.memmove(xImage.data, buf, bufSize);", "-\tOS.XPutImage(display, drawable, gc, xImagePtr, 0, 0, destX, destY, destWidth, destHeight);", "-\tOS.XDestroyImage(xImagePtr);", "-\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f51dfa5be8644e63c053560a050051b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 92, "signatureBeforeChange": " void showToolTip (int handle, String toolTipText)", "signatureAfterChange": "  void setMenuBar (Menu menu)", "diff": ["+", "+void setMenuBar (Menu menu) {", "+\t/*", "+\t* Feature in the Macintosh.  SetRootMenu() does not", "+\t* accept NULL to indicate that their should be no", "+\t* menu bar. The fix is to create a temporary empty", "+\t* menu, set that to be the menu bar, clear the menu", "+\t* bar and then delete the temporary menu.", "+\t*/", "+\tif (menu == menuBar) return;", "+\tint theMenu = 0;", "+\tif (menu == null) {", "+\t\tint outMenuRef [] = new int [1];", "+\t\tOS.CreateNewMenu ((short) ID_TEMPORARY, 0, outMenuRef);", "+\t\ttheMenu = outMenuRef [0];", "+\t} else {", "+\t\ttheMenu = menu.handle;", "+\t}", "+\tOS.SetRootMenu (theMenu);", "+\tif (menu == null) {", "+\t\tOS.ClearMenuBar ();", "+\t\tOS.DeleteMenu (OS.GetMenuID (theMenu));", "+\t\tOS.DisposeMenu (theMenu);", "+\t}", "+\tmenuBar = menu;", "-void showToolTip (int handle, String toolTipText) {", "-\tif (toolTipText == null || toolTipText.length () == 0) {", "-\t\tif (toolTipWindowHandle != 0)", "-\t\t\tOS.HideWindow(toolTipWindowHandle);", "-\t\treturn;", "-\t}", "-", "-\tif (toolTipWindowHandle != 0)", "-\t\t return;", "-\t", "-\tif (handle != fCurrentControl) {", "-\t\t//System.out.println(\"Display.showToolTip: handle is not current\");", "-\t\t//beep();", "-\t\treturn;", "-\t}", "-\tif (fInContextMenu) {", "-\t\t//System.out.println(\"Display.showToolTip: menu is visible\");", "-\t\t//beep();", "-\t\treturn;", "-\t}\t", "-\tif (OS.StillDown()) {", "-\t\t//System.out.println(\"Display.showToolTip: button is down\");", "-\t\t//beep();", "-\t\treturn;", "-\t}\t", "-\t", "-\ttoolTipText= MacUtil.removeMnemonics(toolTipText);", "-\t", "-\t// remember text", "-\tfToolTipText= toolTipText;", "-\t", "-\t// calculate text bounding box", "-\tshort[] bounds= new short[2];", "-\tshort[] baseLine= new short[1];", "-\tint sHandle= OS.CFStringCreateWithCharacters(toolTipText);", "-\tOS.GetThemeTextDimensions(sHandle, fHoverThemeFont, OS.kThemeStateActive, false, bounds, baseLine);", "-\tif (bounds[1] > 200) {\t// too wide -> wrap text", "-\t\tbounds[1]= (short) 200;", "-\t\tOS.GetThemeTextDimensions(sHandle, fHoverThemeFont, OS.kThemeStateActive, true, bounds, baseLine);", "-\t}", "-\tOS.CFRelease(sHandle);", "-\tint width= bounds[1] + 2*TOOLTIP_MARGIN;", "-\tint height= bounds[0] + 2*TOOLTIP_MARGIN;", "-\t", "-\t// position just below mouse cursor", "-\tMacPoint loc= new MacPoint();", "-\tOS.GetGlobalMouse(loc.getData());", "-\tint x= loc.getX() + 16;", "-\tint y= loc.getY() + 16;", "-", "-\t// Ensure that the tool tip is on the screen.", "-\tMacRect screenBounds= new MacRect();", "-\tOS.GetAvailableWindowPositioningBounds(OS.GetMainDevice(), screenBounds.getData());", "-\tx = Math.max (0, Math.min (x, screenBounds.getWidth() - width ));", "-\ty = Math.max (0, Math.min (y, screenBounds.getHeight() - height ));", "-", "-\t// create window", "-\tint[] wHandle= new int[1];", "-\tif (OS.CreateNewWindow(OS.kHelpWindowClass, 0, new MacRect(x, y, width, height).getData(), wHandle) == OS.kNoErr) {", "-\t\ttoolTipWindowHandle= wHandle[0];", "-\t\tint[] mask= new int[] {", "-\t\t\tOS.kEventClassWindow, OS.kEventWindowDrawContent", "-\t\t};", "-\t\tOS.InstallEventHandler(OS.GetWindowEventTarget(toolTipWindowHandle), fWindowProc, mask, toolTipWindowHandle);", "-\t\tOS.ShowWindow(toolTipWindowHandle);", "-\t\tfLastHoverHandle= handle;", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd891de20b257b6e1ab47c576f7618cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "e45c8daf8437089db6cbc5e3d29e82678a90a879", "commitAfterChange": "de8a2a56c7d611f04c53b54fd28808f20c983fab", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r static int scalePixmap(int display, int pixmap, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean flipX, boolean flipY)", "signatureAfterChange": "\r static int scalePixmap(int display, int pixmap, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean flipX, boolean flipY)", "diff": ["-\t\tcase 16: {\r", "-\t\t\txImagePtr = OS.XCreateImage(display, visual, 16, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);\r", "-\t\t\tif (xImagePtr == 0) break;\r", "-\t\t\tXImage xImage = new XImage();\r", "-\t\t\tOS.memmove(xImage, xImagePtr, XImage.sizeof);\r", "-\t\t\tint bufSize = xImage.bytes_per_line * destHeight;\r", "-\t\t\tbyte[] buf = new byte[bufSize];\r", "-\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\t\tsrcData, 16, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "-\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, 0, 0,\r", "-\t\t\t\tbuf, 16, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r", "-\t\t\t\tflipX, flipY);\r", "-\t\t\tint bufPtr = OS.XtMalloc(bufSize);\r", "-\t\t\tOS.memmove(bufPtr, buf, bufSize);\r", "-\t\t\txImage.data = bufPtr;\r", "-\t\t\tOS.memmove(xImagePtr, xImage, XImage.sizeof);\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\tcase 24: {\r", "-\t\t\txImagePtr = OS.XCreateImage(display, visual, 24, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);\r", "-\t\t\tif (xImagePtr == 0) break;\r", "-\t\t\tXImage xImage = new XImage();\r", "-\t\t\tOS.memmove(xImage, xImagePtr, XImage.sizeof);\r", "-\t\t\tint bufSize = xImage.bytes_per_line * destHeight;\r", "-\t\t\tbyte[] buf = new byte[bufSize];\r", "-\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\t\tsrcData, 24, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "-\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, 0, 0,\r", "-\t\t\t\tbuf, 24, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r", "-\t\t\t\tflipX, flipY);\r", "-\t\t\tint bufPtr = OS.XtMalloc(bufSize);\r", "-\t\t\tOS.memmove(bufPtr, buf, bufSize);\r", "-\t\t\txImage.data = bufPtr;\r", "-\t\t\tOS.memmove(xImagePtr, xImage, XImage.sizeof);\r", "-\t\t\tbreak;\r", "-\t\t}\r", "+\t\tcase 16:\r", "+\t\tcase 24:\r", "-\t\t\txImagePtr = OS.XCreateImage(display, visual, 24, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);\r", "+\t\t\txImagePtr = OS.XCreateImage(display, visual, xSrcImage.depth, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);\r", "-\t\t\t\tsrcData, 32, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "+\t\t\t\tsrcData, xSrcImage.bits_per_pixel, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "-\t\t\t\tbuf, 32, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r"]}], "num": 24060}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c372b376e3cc3e6361f99d247415a216", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c13f23d2f6c8d9c80f81e8c88731a52", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "946b729480e0eca3855e231d6e1284c6c94d4249", "commitAfterChange": "146863a428357a6ad301d008e77ac45a2f64c626", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "  void showItem (int path, boolean scroll)", "signatureAfterChange": "  void showItem (int path, boolean scroll)", "diff": ["-\t\tGdkRectangle rect = new GdkRectangle ();", "-\t\tOS.gtk_tree_view_get_cell_area (handle, path, 0, rect);", "-\t\tboolean isHidden = rect.y == 0 && rect.height == 0;", "+\t\tGdkRectangle cellRect = new GdkRectangle ();", "+\t\tOS.gtk_tree_view_get_cell_area (handle, path, 0, cellRect);", "+\t\tboolean isHidden = cellRect.y == 0 && cellRect.height == 0;", "+\t\tint [] tx = new int [1], ty = new int [1];", "+\t\tOS.gtk_tree_view_widget_to_tree_coords (handle, cellRect.x, cellRect.y, tx, ty);", "+\t\tGdkRectangle visibleRect = new GdkRectangle ();", "+\t\tOS.gtk_tree_view_get_visible_rect (handle, visibleRect);", "-\t\t\tint [] tx = new int [1], ty = new int [1];", "-\t\t\tOS.gtk_tree_view_widget_to_tree_coords (handle, rect.x, rect.y, tx, ty);", "-\t\t\trect.y = ty[0];", "-\t\t\tGdkRectangle visRect = new GdkRectangle ();", "-\t\t\tOS.gtk_tree_view_get_visible_rect (handle, visRect);", "-\t\t\tif (rect.y < visRect.y || rect.y + rect.height > visRect.y + visRect.height) {", "+\t\t\tif (ty[0] < visibleRect.y || ty[0] + cellRect.height > visibleRect.y + visibleRect.height) {", "-\t\t\t\tOS.gtk_widget_realize (handle);", "-\t\t\t\tGdkRectangle cellRect = new GdkRectangle ();", "-\t\t\t\tOS.gtk_tree_view_get_cell_area (handle, path, 0, cellRect);", "-\t\t\t\tGdkRectangle visibleRect = new GdkRectangle ();", "-\t\t\t\tOS.gtk_tree_view_get_visible_rect (handle, visibleRect);", "-\t\t\t\tOS.gtk_tree_view_scroll_to_cell (handle, path, 0, false, 0f, 0f);", "-\t\t\t\tint height = Math.min (visibleRect.height, cellRect.height);", "-\t\t\t\tif (cellRect.y + height > visibleRect.y + visibleRect.height) {", "-\t\t\t\t\tint tree_y = visibleRect.y + cellRect.y - visibleRect.height + cellRect.height;", "-\t\t\t\t\tOS.gtk_tree_view_scroll_to_point (handle, -1, tree_y);", "+\t\t\t\tif (ty[0] < visibleRect.y ) {", "+\t\t\t\t\tOS.gtk_tree_view_scroll_to_point (handle, -1, ty[0]);", "+\t\t\t\t} else {", "+\t\t\t\t\tint height = Math.min (visibleRect.height, cellRect.height);", "+\t\t\t\t\tif (ty[0] + height > visibleRect.y + visibleRect.height) {", "+\t\t\t\t\t\tOS.gtk_tree_view_scroll_to_point (handle, -1, ty[0] + cellRect.height - visibleRect.height);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b043fcf2859888bdbe9787b0535778d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "bef1bdbd7048feb0ad77f320e25be5e5f6cc6607", "commitAfterChange": "cc3a2df9831b152ea0ffe8c1a8b8c27cf1c591a7", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": "  void setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["-\tif (move && resize) {", "-\t\tNSRect rect = new NSRect ();", "-\t\trect.x = x;", "-\t\t//TODO - get the screen for the point", "-\t\tint screenHeight = (int) window.screen().frame().height;", "-\t\trect.y = screenHeight - y;", "-\t\trect.width = width;", "-\t\trect.height = height;", "-\t\twindow.setFrame_display_(rect, false);", "-\t} else {", "-\t\tif (move) {", "-\t\t\tNSPoint point = new NSPoint();", "-\t\t\tpoint.x = x;", "-\t\t\t//TODO - get the screen for the point", "-\t\t\tint screenHeight = (int) window.screen().frame().height;", "-\t\t\tpoint.y = screenHeight - y;", "-\t\t\twindow.setFrameTopLeftPoint (point);", "-\t\t} else {", "-\t\t\tif (resize) {", "-\t\t\t\tNSRect rect = window.frame();", "-\t\t\t\trect.y += rect.height - height;", "-\t\t\t\trect.width = width;", "-\t\t\t\trect.height = height;", "-\t\t\t\twindow.setFrame_display_(rect, false);", "-\t\t\t}", "-\t\t}", "+\t//TODO - get the screen for the point", "+\tint screenHeight = (int) window.screen().frame().height;", "+\tNSRect frame = window.frame();", "+\tif (!move) {", "+\t\tx = (int)frame.x;", "+\t\ty = screenHeight - (int)(frame.y + frame.height);", "+\tif (!resize) {", "+\t\twidth = (int)frame.width;", "+\t\theight = (int)frame.height;", "+\t}", "+\tframe.x = x;", "+\tframe.y = screenHeight - (int)(y + height);", "+\tframe.width = width;", "+\tframe.height = height;", "+\twindow.setFrame_display_(frame, false);"]}], "num": 60817}
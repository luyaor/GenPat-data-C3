{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc2175de9f0b5acae7eb4ee1f52cf706", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5455b299ed2a1c030c5b5134d44920b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "d9dfd82bfea57be5eb6a15f8c2e440de6084ec40", "commitAfterChange": "c5cbd8c4eebd8dd52ab69ee5068130875a54578b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r static int putImage(ImageData image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, int display, int visual, int screenDepth, XColor[] xcolors, int[] transparentPixel, int drawable, int gc)", "signatureAfterChange": "\r static int putImage(ImageData image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, int display, int visual, int screenDepth, XColor[] xcolors, int[] transparentPixel, int drawable, int gc)", "diff": ["-\t\t((image.depth == 16 || image.depth == 24 || image.depth == 32) && palette.isDirect)))\r", "+\t\t((image.depth == 8) || (image.depth == 16 || image.depth == 24 || image.depth == 32) && palette.isDirect)))\r", "-\tif (image.depth <= 8) {\r", "+\tif (! palette.isDirect) {\r", "+\tfinal boolean screenDirect;\r", "+\t\tscreenDirect = false;\r", "+\t\tscreenDirect = true;\r", "-\t\tImageData.stretch1(image.data, image.bytesPerLine, ImageData.MSB_FIRST, srcX, srcY, srcWidth, srcHeight,\r", "-\t\t\tbuf, bplX, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, flipX, flipY);\r", "+\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\timage.data, 1, image.bytesPerLine, ImageData.MSB_FIRST, srcX, srcY, srcWidth, srcHeight, null, null, null,\r", "+\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\tbuf, 1, bplX, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, null, null, null,\r", "+\t\t\tflipX, flipY);\r", "-\tif (image.depth > 8 && screenDepth > 8) {\r", "-\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask, -1, null, 0,\r", "-\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xImage.red_mask, xImage.green_mask, xImage.blue_mask,\r", "-\t\t\tflipX, flipY);\r", "-\t} else if (image.depth <= 8 && screenDepth > 8) {\r", "-\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues, -1, null, 0,\r", "-\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xImage.red_mask, xImage.green_mask, xImage.blue_mask,\r", "-\t\t\tflipX, flipY);\r", "-\t} else if (image.depth > 8 && screenDepth <= 8) {\r", "-\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask, -1, null, 0,\r", "-\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,\r", "-\t\t\tflipX, flipY);\r", "-\t} else if (image.depth <= 8 && screenDepth <= 8) {\r", "-\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues, -1, null, 0,\r", "-\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,\r", "-\t\t\tflipX, flipY);\r", "+\tif (palette.isDirect) {\r", "+\t\tif (screenDirect) {\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xImage.red_mask, xImage.green_mask, xImage.blue_mask,\r", "+\t\t\t\tflipX, flipY);\r", "+\t\t} else {\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,\r", "+\t\t\t\tflipX, flipY);\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (screenDirect) {\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xImage.red_mask, xImage.green_mask, xImage.blue_mask,\r", "+\t\t\t\tflipX, flipY);\r", "+\t\t} else {\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,\r", "+\t\t\t\tflipX, flipY);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be40d41fbcacb485c23c79154801fb3e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "9e349f195a4af4db166561d2bdcf4dc166371a81", "commitAfterChange": "712f74727abed5cca8491474d2b5809af54c2fca", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " static boolean getOffsetForMask(int bitspp, int mask, boolean msbFirst, int[] poff)", "signatureAfterChange": " static int getOffsetForMask(int bitspp, int mask, boolean msbFirst)", "diff": ["-static boolean getOffsetForMask(int bitspp, int mask, boolean msbFirst, int[] poff) {", "+static int getOffsetForMask(int bitspp, int mask, boolean msbFirst) {", "-\t\treturn false;", "+\t\tSystem.err.println(\"Image.getOffsetForMask: error 1\");", "+\t\treturn 0;", "+\tint poff= 0;", "-\t\t/* 24-bit and 32-bit masks */", "-\t\tcase 0x000000FF:", "-\t\t\tpoff[0] = 0;", "-\t\t\tbreak;", "-\t\tcase 0x0000FF00:", "-\t\t\tpoff[0] = 1;", "-\t\t\tbreak;", "-\t\tcase 0x00FF0000:", "-\t\t\tpoff[0] = 2;", "-\t\t\tbreak;", "-\t\tcase 0xFF000000:", "-\t\t\tpoff[0] = 3;", "-\t\t\tbreak;", "-\t\t/* 16-bit masks */", "-\t\tcase 0x001F:", "-\t\t\tpoff[0] = 5;", "-\t\t\tbreak;", "-\t\tcase 0x03E0:", "-\t\t\tpoff[0] = 10;", "-\t\t\tbreak;", "-\t\tcase 0x07E0:", "-\t\t\tpoff[0] = 11;", "-\t\t\tbreak;", "-\t\tcase 0x7C00:", "-\t\t\tpoff[0] = 15;", "-\t\t\tbreak;", "-\t\tcase 0xF800:", "-\t\t\tpoff[0] = 16;", "-\t\t\tbreak;", "-\t\tdefault:", "-\t\t\treturn false;", "+\t/* 24-bit and 32-bit masks */", "+\tcase 0x000000FF:", "+\t\tpoff = 0;", "+\t\tbreak;", "+\tcase 0x0000FF00:", "+\t\tpoff = 1;", "+\t\tbreak;", "+\tcase 0x00FF0000:", "+\t\tpoff = 2;", "+\t\tbreak;", "+\tcase 0xFF000000:", "+\t\tpoff = 3;", "+\t\tbreak;", "+\t/* 16-bit masks */", "+\tcase 0x001F:", "+\t\tpoff = 5;", "+\t\tbreak;", "+\tcase 0x03E0:", "+\t\tpoff = 10;", "+\t\tbreak;", "+\tcase 0x07E0:", "+\t\tpoff = 11;", "+\t\tbreak;", "+\tcase 0x7C00:", "+\t\tpoff = 15;", "+\t\tbreak;", "+\tcase 0xF800:", "+\t\tpoff = 16;", "+\t\tbreak;", "+\tdefault:", "+\t\tSystem.err.println(\"Image.getOffsetForMask: error 2\");", "+\t\treturn 0;", "-\t\treturn true;", "+\t\treturn poff;", "-\tif (poff[0] >= bitspp / 8) {", "-\t\treturn false;", "+\tif (poff >= bitspp / 8) {", "+\t\tSystem.err.println(\"Image.getOffsetForMask: error 3\");", "+\t\treturn 0;", "-\t\tpoff[0] = (bitspp/8 - 1) - poff[0];", "+\t\tpoff = (bitspp/8 - 1) - poff;", "-\treturn true;", "+\treturn poff;"]}], "num": 46565}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b943fb53dd0a79e30c555ced4e5753b7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e273f4123fd42084496e47406b102f5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Group.java", "commitBeforeChange": "48cc0a268f324be7f04de1bf4769b6763dd5172e", "commitAfterChange": "6afd0f7c847ebf7da61adbbd98eda015eb44fe3f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "diff": ["-LRESULT WM_SIZE (int wParam, int lParam) {", "-\tLRESULT result = super.WM_SIZE (wParam, lParam);", "-\tif (OS.IsWinCE) return result;", "-\tOS.InvalidateRect (handle, null, true);", "-\treturn result;", "-}", "+", "+LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam) {", "+\tLRESULT result = super.WM_WINDOWPOSCHANGING (wParam, lParam);", "+\tif (result != null) return result;", "+\t/*", "+\t* Invalidate the portion of the group widget that needs to", "+\t* be redrawn.  Note that for some reason, invalidating the", "+\t* group from inside WM_SIZE causes pixel corruption for", "+\t* radio button children.", "+\t*/", "+\tif (OS.IsWinCE) return result;", "+\tif (!OS.IsWindowVisible (handle)) return result;", "+\tWINDOWPOS lpwp = new WINDOWPOS ();", "+\tOS.MoveMemory (lpwp, lParam, WINDOWPOS.sizeof);", "+\tif ((lpwp.flags & (OS.SWP_NOSIZE | OS.SWP_NOREDRAW)) != 0) {", "+\t\treturn result;", "+\t}", "+\tRECT rect = new RECT ();", "+\tOS.SetRect (rect, 0, 0, lpwp.cx, lpwp.cy);", "+\tOS.SendMessage (handle, OS.WM_NCCALCSIZE, 0, rect);", "+\tint newWidth = rect.right - rect.left;", "+\tint newHeight = rect.bottom - rect.top;", "+\tOS.GetClientRect (handle, rect);", "+\tint oldWidth = rect.right - rect.left;", "+\tint oldHeight = rect.bottom - rect.top;", "+\tif (newWidth == oldWidth && newHeight == oldHeight) {", "+\t\treturn result;", "+\t}", "+\tif (newWidth != oldWidth) {", "+\t\tint left = oldWidth;", "+\t\tif (newWidth < oldWidth) left = newWidth;", "+\t\tOS.SetRect (rect, left - CLIENT_INSET, 0, newWidth, newHeight);", "+\t\tOS.InvalidateRect (handle, rect, true);", "+\t}", "+\tif (newHeight != oldHeight) {", "+\t\tint bottom = oldHeight;", "+\t\tif (newHeight < oldHeight) bottom = newHeight;", "+\t\tif (newWidth < oldWidth) oldWidth -= CLIENT_INSET;", "+\t\tOS.SetRect (rect, 0, bottom - CLIENT_INSET, oldWidth, newHeight);", "+\t\tOS.InvalidateRect (handle, rect, true);", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "025c825f8e00ac2f792313e669505008", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "8446f9e98b59905e2652a2064c0f407c80cfe624", "commitAfterChange": "595e8300c2ed2e3edf85213e588d65e62a8727e9", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "diff": ["+\tLRESULT result = super.WM_WINDOWPOSCHANGING (wParam, lParam);", "+\tif (result != null) return result;", "-\t* using SWP_NOREDRAW and then damage only the combo", "-\t* box text field.", "+\t* using SWP_NOREDRAW and then damage the combo box", "+\t* text field and the area in the parent where the", "+\t* combo box used to be.", "-\tWINDOWPOS lpwp = new WINDOWPOS ();", "-\tOS.MoveMemory (lpwp, lParam, WINDOWPOS.sizeof);", "-\tif ((lpwp.flags & OS.SWP_NOSIZE) == 0) {", "-\t\tif (ignoreResize) {", "+\tif (drawCount != 0) return result;", "+\tif (!OS.IsWindowVisible (handle)) return result;", "+\tif (ignoreResize) {", "+\t\tWINDOWPOS lpwp = new WINDOWPOS ();", "+\t\tOS.MoveMemory (lpwp, lParam, WINDOWPOS.sizeof);", "+\t\tif ((lpwp.flags & OS.SWP_NOSIZE) == 0) {", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetWindowRect (handle, rect);", "+\t\t\tint width = rect.right - rect.left;", "+\t\t\tint height = rect.bottom - rect.top;", "+\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\tint /*long*/ hwndParent = parent.handle;", "+\t\t\t\tint /*long*/ hwndChild = OS.GetWindow (hwndParent, OS.GW_CHILD);", "+\t\t\t\tOS.MapWindowPoints (0, hwndParent, rect, 2);", "+\t\t\t\tint /*long*/ rgn1 = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "+\t\t\t\twhile (hwndChild != 0) {", "+\t\t\t\t\tif (hwndChild != handle) {", "+\t\t\t\t\t\tOS.GetWindowRect (hwndChild, rect);", "+\t\t\t\t\t\tOS.MapWindowPoints (0, hwndParent, rect, 2);", "+\t\t\t\t\t\tint /*long*/ rgn2 = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "+\t\t\t\t\t\tOS.CombineRgn (rgn1, rgn1, rgn2, OS.RGN_DIFF);", "+\t\t\t\t\t\tOS.DeleteObject (rgn2);", "+\t\t\t\t\t}", "+\t\t\t\t\thwndChild = OS.GetWindow (hwndChild, OS.GW_HWNDNEXT);", "+\t\t\t\t}", "+\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE;", "+\t\t\t\tOS.RedrawWindow (hwndParent, null, rgn1, flags);", "+\t\t\t\tOS.DeleteObject (rgn1);", "+\t\t\t}", "-\treturn super.WM_WINDOWPOSCHANGING (wParam, lParam);", "+\treturn result;"]}], "num": 25597}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dcbabcdd55d4139c5dfbc1d6706c37a1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e56a7dabac9e6268d81423a13efd577a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "9a7a23f05c644cb62fddfb0991fcc9f64f0514a5", "commitAfterChange": "37c77a940ee262e41e745195024a2482e016f15b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public boolean open ()", "signatureAfterChange": "\r public boolean open ()", "diff": ["-\t* Create a transparent window that fills the whole screen\r", "-\t* so that we will get mouse/keyboard events that occur\r", "-\t* outside of our visible windows (ie.- \"over\" the desktop)\r", "+\t* If this tracker is being created without a mouse drag then\r", "+\t* we need to create a transparent window that fills the screen\r", "+\t* in order to get all mouse/keyboard events that occur\r", "+\t* outside of our visible windows (ie.- over the desktop).\r", "-\tint displayWidth = OS.GetSystemMetrics (OS.SM_CXSCREEN);\r", "-\tint displayHeight = OS.GetSystemMetrics (OS.SM_CYSCREEN);\r", "-//\tint hwndTransparent = OS.CreateWindowEx (\r", "-//\t\tOS.WS_EX_TRANSPARENT,\r", "-//\t\tdisplay.windowClass,\r", "-//\t\tnull,\r", "-//\t\tOS.WS_POPUP | OS.WS_VISIBLE,\r", "-//\t\t0,0,\r", "-//\t\tdisplayWidth, displayHeight,\r", "-//\t\t0,\r", "-//\t\t0,\r", "-//\t\tOS.GetModuleHandle (null),\r", "-//\t\tnull);\r", "+\tint hwndTransparent = 0;\r", "+\tCallback newProc = null;\r", "+\tboolean mouseDown = OS.GetKeyState(OS.VK_LBUTTON) < 0;\r", "+\tif (!mouseDown) {\r", "+\t\tint width = OS.GetSystemMetrics (OS.SM_CXSCREEN);\r", "+\t\tint height = OS.GetSystemMetrics (OS.SM_CYSCREEN);\r", "+\t\thwndTransparent = OS.CreateWindowEx (\r", "+\t\t\tOS.WS_EX_TRANSPARENT,\r", "+\t\t\tdisplay.windowClass,\r", "+\t\t\tnull,\r", "+\t\t\tOS.WS_POPUP | OS.WS_VISIBLE,\r", "+\t\t\t0, 0,\r", "+\t\t\twidth, height,\r", "+\t\t\t0,\r", "+\t\t\t0,\r", "+\t\t\tOS.GetModuleHandle (null),\r", "+\t\t\tnull);\r", "+\t\tfinal int oldProc = OS.GetWindowLong (hwndTransparent, OS.GWL_WNDPROC);\r", "+\t\tObject windowProc = new Object () {\r", "+\t\t\tpublic int windowProc (int hwnd, int msg, int wParam, int lParam) {\r", "+\t\t\t\tswitch (msg) {\r", "+\t\t\t\t\tcase OS.WM_MOVE:\r", "+\t\t\t\t\t/*\r", "+\t\t\t\t\t* We typically do not want to answer that the transparent window is\r", "+\t\t\t\t\t* transparent to hits since doing so negates the effect of having it\r", "+\t\t\t\t\t* to grab events.  However, clients of the tracker should not be aware\r", "+\t\t\t\t\t* of this transparent window.  Therefore if there is a hit query\r", "+\t\t\t\t\t* performed as a result of client code then answer that the transparent\r", "+\t\t\t\t\t* window is transparent to hits so that its existence will not impact\r", "+\t\t\t\t\t* the client.\r", "+\t\t\t\t\t*/\r", "+\t\t\t\t\tcase OS.WM_NCHITTEST:\r", "+\t\t\t\t\t\tif (inEvent) {\r", "+\t\t\t\t\t\t\treturn OS.HTTRANSPARENT;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase OS.WM_SIZE:\r", "+\t\t\t\t\t\tOS.InvalidateRect (hwnd, null, true);\r", "+\t\t\t\t\t\tOS.UpdateWindow (hwnd);\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase OS.WM_SETCURSOR:\r", "+\t\t\t\t\t\tif (cursor != 0) {\r", "+\t\t\t\t\t\t\tOS.SetCursor(cursor);\r", "+\t\t\t\t\t\t\treturn LRESULT.ONE.value;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\treturn OS.CallWindowProc (oldProc, hwnd, msg, wParam, lParam);\r", "+\t\t\t}\r", "+\t\t};\r", "+\t\tnewProc = new Callback (windowProc, \"windowProc\", 4);\r", "+\t\tOS.SetWindowLong (hwndTransparent, OS.GWL_WNDPROC, newProc.getAddress ());\r", "+\t}\r", "+\r", "-\tif ((style & SWT.MENU) != 0) {\r", "+\tif (mouseDown) {\r", "+\t\tPOINT pt = new POINT ();\r", "+\t\tOS.GetCursorPos (pt);\r", "+\t\tcursorPos = new Point (pt.x, pt.y);\r", "+\t} else {\r", "-\t} else {\r", "-\t\tPOINT pt = new POINT ();\r", "-\t\tOS.GetCursorPos (pt);\r", "-\t\tcursorPos = new Point (pt.x, pt.y);\r", "+\t\r", "-\tRectangle screenBounds = new Rectangle (0, 0, displayWidth, displayHeight);\r", "-\t\t\t\tsetCursor ();\r", "-\t\t\t\t\t\tresizeRectangles (newX - oldX, newY - oldY, screenBounds);\r", "-\t\t\t\t\t\tsendEvent (SWT.Resize, event);\r", "+\t\t\t\t\t\tresizeRectangles (newX - oldX, newY - oldY);\r", "+\t\t\t\t\t\tinEvent = true;\r", "+\t\t\t\t\t\tsendEvent (SWT.Resize, event);\r", "-\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY, screenBounds);\r", "+\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);\r", "+\t\t\t\t\t\tinEvent = true;\r", "+\t\t\t\t\tinEvent = false;\r", "-\t\t\t\tsetCursor ();\r", "-\t\t\t\t\t\tresizeRectangles (xChange, yChange, screenBounds);\r", "-\t\t\t\t\t\tsendEvent (SWT.Resize, event);\r", "+\t\t\t\t\t\tresizeRectangles (xChange, yChange);\r", "+\t\t\t\t\t\tinEvent = true;\r", "+\t\t\t\t\t\tsendEvent (SWT.Resize, event);\r", "-\t\t\t\t\t\tmoveRectangles (xChange, yChange, screenBounds);\r", "-\t\t\t\t\t\tsendEvent (SWT.Move, event);\r", "+\t\t\t\t\t\tmoveRectangles (xChange, yChange);\r", "+\t\t\t\t\t\tinEvent = true;\r", "+\t\t\t\t\t\tsendEvent (SWT.Move, event);\r", "+\t\t\t\t\tinEvent = false;\r", "-//\tOS.DestroyWindow (hwndTransparent);\r", "+\t/*\r", "+\t* Cleanup: If a transparent window was created in order to capture events then\r", "+\t* destroy it and its callback object now.\r", "+\t*/\r", "+\tif (hwndTransparent != 0) {\r", "+\t\tOS.DestroyWindow (hwndTransparent);\r", "+\t}\r", "+\tif (newProc != null) {\r", "+\t\tnewProc.dispose();\r", "+\t}\r", "+\t/*\r", "+\t* Cleanup: If this tracker was resizing then the last cursor that it created\r", "+\t* needs to be destroyed.\r", "+\t*/\r", "+\tif ((style & SWT.RESIZE) != 0 && cursor != 0) {\r", "+\t\tOS.DestroyCursor (cursor);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adb7fe43ad7092214cf3e1bd9729284b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "63863d93c2ee25d0b7bc77cb902dfe9620ae110e", "commitAfterChange": "18fa84143810a3365aa41afcf3bd6d5981789214", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\t/*", "-\t* If this tracker is being created without a mouse drag then", "-\t* we need to create a transparent window that fills the screen", "-\t* in order to get all mouse/keyboard events that occur", "-\t* outside of our visible windows (ie.- over the desktop).", "-\t*/", "-\tboolean isVista = !OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0);", "-\tif ((parent == null && isVista) || !mouseDown) {", "-\t\tint width = OS.GetSystemMetrics (OS.SM_CXSCREEN);", "-\t\tint height = OS.GetSystemMetrics (OS.SM_CYSCREEN);", "+\t/*", "+\t* Bug in Vista. Drawing directly to the screen with XOR does not", "+\t* perform well. The fix is to draw on layered window instead.", "+\t* ", "+\t* Note that one window (almost opaque) is used for catching all events and a", "+\t* second window is used for drawing the rectangles. ", "+\t*/", "+\tif (IsVista && parent == null) {", "+\t\tRectangle bounds = display.getBounds();", "-\t\t\tisVista ? OS.WS_EX_LAYERED | OS.WS_EX_NOACTIVATE : OS.WS_EX_TRANSPARENT,", "+\t\t\tOS.WS_EX_LAYERED | OS.WS_EX_NOACTIVATE,", "-\t\t\t0, 0,", "-\t\t\twidth, height,", "+\t\t\tbounds.x, bounds.y,", "+\t\t\tbounds.width, bounds.height,", "-\t\tif (isVista) {", "-\t\t\tOS.SetLayeredWindowAttributes (hwndTransparent, 0xFFFFFF, (byte)0x01, OS.LWA_ALPHA);", "-\t\t}", "-\t\tOS.ShowWindow (hwndTransparent, OS.SW_SHOWNOACTIVATE);", "+\t\tOS.SetLayeredWindowAttributes (hwndTransparent, 0, (byte)0x01, OS.LWA_ALPHA);", "+\t\thwndOpaque = OS.CreateWindowEx (", "+\t\t\tOS.WS_EX_LAYERED | OS.WS_EX_NOACTIVATE,", "+\t\t\tdisplay.windowClass,", "+\t\t\tnull,", "+\t\t\tOS.WS_POPUP,", "+\t\t\tbounds.x, bounds.y,", "+\t\t\tbounds.width, bounds.height,", "+\t\t\thwndTransparent,", "+\t\t\t0,", "+\t\t\tOS.GetModuleHandle (null),", "+\t\t\tnull);", "+\t\tOS.SetLayeredWindowAttributes (hwndOpaque, 0xFFFFFF, (byte)0xFF, OS.LWA_COLORKEY | OS.LWA_ALPHA);\t\t", "-\t\tif (isVista) {", "-\t\t\thwndOpaque = OS.CreateWindowEx (", "-\t\t\t\tOS.WS_EX_LAYERED | OS.WS_EX_NOACTIVATE,", "+\t\toldTransparentProc = OS.GetWindowLongPtr (hwndTransparent, OS.GWLP_WNDPROC);", "+\t\tOS.SetWindowLongPtr (hwndTransparent, OS.GWLP_WNDPROC, newProcAddress);", "+\t\toldOpaqueProc = OS.GetWindowLongPtr (hwndOpaque, OS.GWLP_WNDPROC);", "+\t\tOS.SetWindowLongPtr (hwndOpaque, OS.GWLP_WNDPROC, newProcAddress);", "+\t\tOS.ShowWindow (hwndTransparent, OS.SW_SHOWNOACTIVATE);", "+\t\tOS.ShowWindow (hwndOpaque, OS.SW_SHOWNOACTIVATE);", "+\t} else {", "+\t\t/*", "+\t\t* If this tracker is being created without a mouse drag then", "+\t\t* we need to create a transparent window that fills the screen", "+\t\t* in order to get all mouse/keyboard events that occur", "+\t\t* outside of our visible windows (ie.- over the desktop).", "+\t\t*/", "+\t\tif (!mouseDown) {", "+\t\t\tRectangle bounds = display.getBounds();", "+\t\t\tSystem.out.println(bounds);", "+\t\t\thwndTransparent = OS.CreateWindowEx (", "+\t\t\t\tOS.WS_EX_TRANSPARENT,", "-\t\t\t\t0, 0,", "-\t\t\t\twidth, height,", "-\t\t\t\thwndTransparent,", "+\t\t\t\tbounds.x, bounds.y,", "+\t\t\t\tbounds.width, bounds.height,", "+\t\t\t\t0,", "-\t\t\toldOpaqueProc = OS.GetWindowLongPtr (hwndOpaque, OS.GWLP_WNDPROC);", "-\t\t\tOS.SetWindowLongPtr (hwndOpaque, OS.GWLP_WNDPROC, newProcAddress);", "-\t\t} else {", "-\t\t\thwndOpaque = hwndTransparent;", "+\t\t\tnewProc = new Callback (this, \"transparentProc\", 4); //$NON-NLS-1$", "+\t\t\tint /*long*/ newProcAddress = newProc.getAddress ();", "+\t\t\tif (newProcAddress == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\toldTransparentProc = OS.GetWindowLongPtr (hwndTransparent, OS.GWLP_WNDPROC);", "+\t\t\tOS.SetWindowLongPtr (hwndTransparent, OS.GWLP_WNDPROC, newProcAddress);", "+\t\t\tOS.ShowWindow (hwndTransparent, OS.SW_SHOWNOACTIVATE);", "-\t\toldTransparentProc = OS.GetWindowLongPtr (hwndTransparent, OS.GWLP_WNDPROC);", "-\t\tOS.SetWindowLongPtr (hwndTransparent, OS.GWLP_WNDPROC, newProcAddress);", "-\t\tOS.SetLayeredWindowAttributes (hwndOpaque, 0xFFFFFF, (byte)0xFF, OS.LWA_COLORKEY | OS.LWA_ALPHA);", "-\t\tOS.ShowWindow (hwndOpaque, OS.SW_SHOWNOACTIVATE);", "-\t\t\tif (!(parent == null && isVista)) {", "+\t\t\tif (hwndOpaque == 0) {", "-\t\t\tif (!(parent == null && isVista)) {", "+\t\t\tif (hwndOpaque == 0) {"]}], "num": 4917}
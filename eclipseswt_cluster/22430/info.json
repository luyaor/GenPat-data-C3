{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc3c1ff67ce4b65be9abf45b033c8662", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68ba3997d0fc0549574f22915d6da9b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "e3ab8de0adf1f9972df1ab7709273a56097dc14f", "commitAfterChange": "842af3804926d31ad2f49f4ce7faac1998bf8575", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["+\tRectangle rect = srcImage.getBounds();", "-\t\t\tRectangle r = srcImage.getBounds();", "-\t\t\t\t\thandle = OS.CreateCompatibleBitmap(hdcSource, r.width, r.height);", "+\t\t\t\t\thandle = OS.CreateCompatibleBitmap(hdcSource, rect.width, rect.height);", "-\t\t\t\t\tOS.BitBlt(hdcDest, 0, 0, r.width, r.height, hdcSource, 0, 0, OS.SRCCOPY);", "+\t\t\t\t\tOS.BitBlt(hdcDest, 0, 0, rect.width, rect.height, hdcSource, 0, 0, OS.SRCCOPY);", "-\t\t\t\t\t\thandle = OS.CopyImage(srcImage.handle, OS.IMAGE_ICON, r.width, r.height, 0);", "+\t\t\t\t\t\thandle = OS.CopyImage(srcImage.handle, OS.IMAGE_ICON, rect.width, rect.height, 0);", "-\t\t\tRectangle r = srcImage.getBounds();", "-\t\t\tthis.type = srcImage.type;", "-\t\t\tbyte[] rgbBwBitmapInfo = {", "-\t\t\t\t40,0,0,0, /* biSize */", "-\t\t\t\t(byte)(r.width & 0xFF), /* biWidth */", "-\t\t\t\t(byte)((r.width & 0xFF00) >> 8),", "-\t\t\t\t(byte)((r.width & 0xFF0000) >> 16),", "-\t\t\t\t(byte)((r.width & 0xFF000000) >> 24),", "-\t\t\t\t(byte)(r.height & 0xFF), /* biHeight */", "-\t\t\t\t(byte)((r.height & 0xFF00) >> 8),", "-\t\t\t\t(byte)((r.height & 0xFF0000) >> 16),", "-\t\t\t\t(byte)((r.height & 0xFF000000) >> 24),", "-\t\t\t\t1,0, /* biPlanes */", "-\t\t\t\t1,0, /* biBitCount */", "-\t\t\t\t0,0,0,0, /* biCompression */", "-\t\t\t\t0,0,0,0, /* biSizeImage */", "-\t\t\t\t0,0,0,0, /* biXPelsPerMeter */", "-\t\t\t\t0,0,0,0, /* biYPelsPerMeter */", "-\t\t\t\t0,0,0,0, /* biClrUsed */", "-\t\t\t\t0,0,0,0, /* biClrImportant */", "-\t\t\t\t0,0,0,0, /* First color: black */", "-\t\t\t\t(byte)0xFF,(byte)0xFF,(byte)0xFF,0 /* Second color: white */", "-\t\t\t};", "+\t\t\tImageData data = srcImage.getImageData();", "+\t\t\tPaletteData palette = data.palette;", "+\t\t\tRGB[] rgbs = new RGB[3];", "+\t\t\trgbs[0] = device.getSystemColor(SWT.COLOR_BLACK).getRGB();", "+\t\t\trgbs[1] = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW).getRGB();", "+\t\t\trgbs[2] = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND).getRGB();", "+\t\t\tImageData newData = new ImageData(rect.width, rect.height, 8, new PaletteData(rgbs));", "+\t\t\tnewData.alpha = data.alpha;", "+\t\t\tnewData.alphaData = data.alphaData;", "+\t\t\tnewData.maskData = data.maskData;", "+\t\t\tnewData.maskPad = data.maskPad;", "+\t\t\tif (data.transparentPixel != -1) newData.transparentPixel = 0;", "-\t\t\t/* Get the HDC for the device */", "-\t\t\tint hDC = device.internal_new_GC(null);", "-", "-\t\t\t/* Source DC */", "-\t\t\tint hdcSource = OS.CreateCompatibleDC(hDC);", "-\t\t\tif (hdcSource == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t/* Monochrome (Intermediate) DC */", "-\t\t\tint bwDC = OS.CreateCompatibleDC(hdcSource);", "-\t\t\tif (bwDC == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t/* Destination DC */", "-\t\t\tint hdcBmp = OS.CreateCompatibleDC(hDC);", "-\t\t\tif (hdcBmp == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t/* Monochrome (Intermediate) DIB section */", "-\t\t\tint[] pbitsBW = new int[1];", "-\t\t\tint hbmBW = OS.CreateDIBSection(bwDC, rgbBwBitmapInfo, OS.DIB_RGB_COLORS, pbitsBW, 0, 0);", "-\t\t\tif (hbmBW == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\tswitch (type) {", "-\t\t\t\tcase SWT.BITMAP:", "-\t\t\t\t\t/* Attach the bitmap to the source DC */", "-\t\t\t\t\tint hOldSrc = OS.SelectObject(hdcSource, srcImage.handle);", "-\t\t\t\t\t/* Create the destination bitmap */", "-\t\t\t\t\thandle = OS.CreateCompatibleBitmap(hDC, r.width, r.height);", "-\t\t\t\t\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\t\t/* Attach the DIB section and the new bitmap to the DCs */", "-\t\t\t\t\tint hOldBw = OS.SelectObject(bwDC, hbmBW);", "-\t\t\t\t\tint hOldBmp = OS.SelectObject(hdcBmp, handle);", "-\t\t\t\t\t/* BitBlt the bitmap into the monochrome DIB section */", "-\t\t\t\t\tOS.BitBlt(bwDC, 0, 0, r.width, r.height, hdcSource, 0, 0, OS.SRCCOPY);", "-\t\t\t\t\t/* Paint the destination rectangle in gray */", "-\t\t\t\t\tRECT rect = new RECT();", "-\t\t\t\t\trect.left = 0;", "-\t\t\t\t\trect.top = 0;", "-\t\t\t\t\trect.right = r.width;", "-\t\t\t\t\trect.bottom = r.height;", "-\t\t\t\t\tOS.FillRect(hdcBmp, rect, OS.GetSysColorBrush(OS.COLOR_3DFACE));", "-\t\t\t\t\t/*", "-\t\t\t\t\t * BitBlt the black bits in the monochrome bitmap into", "-\t\t\t\t\t * COLOR_3DHILIGHT bits in the destination DC.", "-\t\t\t\t\t * The magic ROP comes from Charles Petzold's book", "-\t\t\t\t\t */", "-\t\t\t\t\tint hb = OS.CreateSolidBrush(OS.GetSysColor(OS.COLOR_3DHILIGHT));", "-\t\t\t\t\tint oldBrush = OS.SelectObject(hdcBmp, hb);", "-\t\t\t\t\tOS.BitBlt(hdcBmp, 1, 1, r.width, r.height, bwDC, 0, 0, 0xB8074A);", "-\t\t\t\t\t/*", "-\t\t\t\t\t * BitBlt the black bits in the monochrome bitmap into ", "-\t\t\t\t\t * COLOR_3DSHADOW bits in the destination DC.", "-\t\t\t\t\t */", "-\t\t\t\t\thb = OS.CreateSolidBrush(OS.GetSysColor(OS.COLOR_3DSHADOW));", "-\t\t\t\t\tOS.DeleteObject(OS.SelectObject(hdcBmp, hb));", "-\t\t\t\t\tOS.BitBlt(hdcBmp, 0, 0, r.width, r.height, bwDC, 0, 0, 0xB8074A);", "-\t\t\t\t\tOS.DeleteObject(OS.SelectObject(hdcBmp, oldBrush));", "-\t\t\t\t\t/* Free resources */", "-\t\t\t\t\tOS.SelectObject(hdcSource, hOldSrc);", "-\t\t\t\t\tOS.SelectObject(hdcBmp, hOldBmp);", "-\t\t\t\t\tOS.SelectObject(bwDC, hOldBw);", "-\t\t\t\t\tOS.DeleteDC(hdcSource);", "-\t\t\t\t\tOS.DeleteDC(bwDC);", "-\t\t\t\t\tOS.DeleteDC(hdcBmp);", "-\t\t\t\t\tOS.DeleteObject(hbmBW);", "-", "-\t\t\t\t\talpha = srcImage.alpha;", "-\t\t\t\t\tif (srcImage.alphaData != null) {", "-\t\t\t\t\t\talphaData = new byte[srcImage.alphaData.length];", "-\t\t\t\t\t\tSystem.arraycopy(srcImage.alphaData, 0, alphaData, 0, alphaData.length);", "+\t\t\t/* Convert the pixels. */", "+\t\t\tint[] scanline = new int[rect.width];", "+\t\t\tint[] maskScanline = null;", "+\t\t\tImageData mask = null;", "+\t\t\tif (data.maskData != null) mask = data.getTransparencyMask();", "+\t\t\tif (mask != null) maskScanline = new int[rect.width];", "+\t\t\tint redMask = palette.redMask;", "+\t\t\tint greenMask = palette.greenMask;", "+\t\t\tint blueMask = palette.blueMask;", "+\t\t\tint redShift = palette.redShift;", "+\t\t\tint greenShift = palette.greenShift;", "+\t\t\tint blueShift = palette.blueShift;", "+\t\t\tfor (int y=0; y<rect.height; y++) {", "+\t\t\t\tint offset = y * newData.bytesPerLine;", "+\t\t\t\tdata.getPixels(0, y, rect.width, scanline, 0);", "+\t\t\t\tif (mask != null) mask.getPixels(0, y, rect.width, maskScanline, 0);", "+\t\t\t\tfor (int x=0; x<rect.width; x++) {", "+\t\t\t\t\tint pixel = scanline[x];", "+\t\t\t\t\tif (!(pixel == data.transparentPixel || (mask != null && maskScanline[x] == 0))) {", "+\t\t\t\t\t\tint red, green, blue;", "+\t\t\t\t\t\tif (palette.isDirect) {", "+\t\t\t\t\t\t\tred = pixel & redMask;", "+\t\t\t\t\t\t\tred = (redShift < 0) ? red >>> -redShift : red << redShift;", "+\t\t\t\t\t\t\tgreen = pixel & greenMask;", "+\t\t\t\t\t\t\tgreen = (greenShift < 0) ? green >>> -greenShift : green << greenShift;", "+\t\t\t\t\t\t\tblue = pixel & blueMask;", "+\t\t\t\t\t\t\tblue = (blueShift < 0) ? blue >>> -blueShift : blue << blueShift;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tred = palette.colors[pixel].red;", "+\t\t\t\t\t\t\tgreen = palette.colors[pixel].green;", "+\t\t\t\t\t\t\tblue = palette.colors[pixel].blue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "+\t\t\t\t\t\tif (intensity < 98304) {", "+\t\t\t\t\t\t\tnewData.data[offset] = (byte)1;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tnewData.data[offset] = (byte)2;\t", "+\t\t\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\t\t/* Release the HDC for the device */", "-\t\t\t\t\tdevice.internal_dispose_GC(hDC, null);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SWT.ICON:", "-\t\t\t\t\t/* Get icon information */", "-\t\t\t\t\tICONINFO iconInfo = new ICONINFO();", "-\t\t\t\t\tif (OS.IsWinCE) {", "-\t\t\t\t\t\tGetIconInfo(srcImage, iconInfo);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (!OS.GetIconInfo(srcImage.handle, iconInfo))", "-\t\t\t\t\t\t\tSWT.error(SWT.ERROR_INVALID_IMAGE);", "-\t\t\t\t\t}", "-\t\t\t\t\tint hdcMask = OS.CreateCompatibleDC(hDC);", "-\t\t\t\t\t/* Create the destination bitmaps */", "-\t\t\t\t\tif (iconInfo.hbmColor == 0)", "-\t\t\t\t\t\thOldSrc = OS.SelectObject(hdcSource, iconInfo.hbmMask);", "-\t\t\t\t\telse", "-\t\t\t\t\t\thOldSrc = OS.SelectObject(hdcSource, iconInfo.hbmColor);", "-\t\t\t\t\tint newHbmp = OS.CreateCompatibleBitmap(hdcSource, r.width, r.height);", "-\t\t\t\t\tif (newHbmp == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\t\tint newHmask = OS.CreateBitmap(r.width, r.height, 1, 1, null);", "-\t\t\t\t\tif (newHmask == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\t\t/* BitBlt the source mask into the destination mask */", "-\t\t\t\t\tint hOldMask = OS.SelectObject(hdcMask, newHmask);", "-\t\t\t\t\tif (iconInfo.hbmColor != 0)", "-\t\t\t\t\t\tOS.SelectObject(hdcSource, iconInfo.hbmMask);", "-\t\t\t\t\tOS.SelectObject(hdcSource, iconInfo.hbmMask);", "-\t\t\t\t\tOS.BitBlt(hdcMask, 0, 0, r.width, r.height, hdcSource, 0, 0, OS.SRCCOPY);", "-\t\t\t\t\t/* Attach the monochrome DIB section and the destination bitmap to the DCs */", "-\t\t\t\t\thOldBw = OS.SelectObject(bwDC, hbmBW);", "-\t\t\t\t\t/* BitBlt the bitmap into the monochrome DIB section */", "-\t\t\t\t\tif (iconInfo.hbmColor == 0) {", "-\t\t\t\t\t\tOS.SelectObject(hdcSource, iconInfo.hbmMask);", "-\t\t\t\t\t\tOS.BitBlt(bwDC, 0, 0, r.width, r.height, hdcSource, 0, r.height, OS.SRCCOPY);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tOS.SelectObject(hdcSource, iconInfo.hbmColor);", "-\t\t\t\t\t\tOS.BitBlt(bwDC, 0, 0, r.width, r.height, hdcSource, 0, 0, OS.SRCCOPY);", "-\t\t\t\t\t}", "-\t\t\t\t\t/* Paint the destination rectangle in grey */", "-\t\t\t\t\trect = new RECT();", "-\t\t\t\t\trect.left = 0;", "-\t\t\t\t\trect.top = 0;", "-\t\t\t\t\trect.right = r.width;", "-\t\t\t\t\trect.bottom = r.height;", "-\t\t\t\t\thOldBmp = OS.SelectObject(hdcBmp, newHbmp);", "-\t\t\t\t\tOS.FillRect(hdcBmp, rect, OS.GetSysColorBrush(OS.COLOR_3DFACE));", "-\t\t\t\t\t/*", "-\t\t\t\t\t * BitBlt the black bits in the monochrome bitmap into", "-\t\t\t\t\t * COLOR_3DHILIGHT bits in the destination DC.", "-\t\t\t\t\t * The magic ROP comes from Charles Petzold's book", "-\t\t\t\t\t */", "-\t\t\t\t\thb = OS.CreateSolidBrush(OS.GetSysColor(OS.COLOR_3DSHADOW));", "-\t\t\t\t\toldBrush = OS.SelectObject(hdcBmp, hb);", "-\t\t\t\t\tOS.BitBlt(hdcBmp, 0, 0, r.width, r.height, bwDC, 0, 0, 0xB8074A);", "-\t\t\t\t\t/* Invert mask into hdcBw */", "-\t\t\t\t\tOS.BitBlt(bwDC, 0, 0, r.width, r.height, hdcMask, 0, 0, OS.NOTSRCCOPY);", "-\t\t\t\t\t/* Select black brush into destination */", "-\t\t\t\t\thb = OS.CreateSolidBrush(0);", "-\t\t\t\t\tOS.DeleteObject(OS.SelectObject(hdcBmp, hb));", "-\t\t\t\t\t/*", "-\t\t\t\t\t * Copy black bits from monochrome bitmap into black bits in the", "-\t\t\t\t\t * destination DC.", "-\t\t\t\t\t */", "-\t\t\t\t\tOS.BitBlt(hdcBmp, 0, 0, r.width, r.height, bwDC, 0, 0, 0xB8074A);", "-\t\t\t\t\tOS.DeleteObject(OS.SelectObject(hdcBmp, oldBrush));", "-\t\t\t\t\t/* Free resources */", "-\t\t\t\t\tOS.SelectObject(hdcSource, hOldSrc);", "-\t\t\t\t\tOS.DeleteDC(hdcSource);", "-\t\t\t\t\tOS.SelectObject(bwDC, hOldBw);", "-\t\t\t\t\tOS.DeleteDC(bwDC);", "-\t\t\t\t\tOS.SelectObject(hdcBmp, hOldBmp);", "-\t\t\t\t\tOS.DeleteDC(hdcBmp);", "-\t\t\t\t\tOS.SelectObject(hdcMask, hOldMask);", "-\t\t\t\t\tOS.DeleteDC(hdcMask);", "-\t\t\t\t\tOS.DeleteObject(hbmBW);", "-\t\t\t\t\t", "-\t\t\t\t\t/* Release the HDC for the device */", "-\t\t\t\t\tdevice.internal_dispose_GC(hDC, null);", "-\t\t\t", "-\t\t\t\t\t/* Create the new iconinfo */", "-\t\t\t\t\tICONINFO newIconInfo = new ICONINFO();", "-\t\t\t\t\tnewIconInfo.fIcon = iconInfo.fIcon;", "-\t\t\t\t\tnewIconInfo.hbmMask = newHmask;", "-\t\t\t\t\tnewIconInfo.hbmColor = newHbmp;", "-\t\t\t\t\t/* Create the new icon */", "-\t\t\t\t\thandle = OS.CreateIconIndirect(newIconInfo);", "-\t\t\t\t\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\t\t/* Free bitmaps */", "-\t\t\t\t\tOS.DeleteObject(newHbmp);", "-\t\t\t\t\tOS.DeleteObject(newHmask);", "-\t\t\t\t\tif (iconInfo.hbmColor != 0)", "-\t\t\t\t\t\tOS.DeleteObject(iconInfo.hbmColor);", "-\t\t\t\t\tOS.DeleteObject(iconInfo.hbmMask);", "-\t\t\t\t\tbreak;", "-\t\t\t\tdefault:", "-\t\t\t\t\tSWT.error(SWT.ERROR_UNSUPPORTED_FORMAT);", "+\t\t\t\t\toffset++;", "+\t\t\t\t}", "-\t\t\tif (device.tracking) device.new_Object(this);\t", "+\t\t\tinit (device, newData);", "+\t\t\tif (device.tracking) device.new_Object(this);", "-\t\t\tRectangle r = srcImage.getBounds();", "-\t\t\t\tnewData = new ImageData(r.width, r.height, 8, new PaletteData(rgbs));", "+\t\t\t\tnewData = new ImageData(rect.width, rect.height, 8, new PaletteData(rgbs));", "-\t\t\t\tint[] scanline = new int[r.width];", "+\t\t\t\tint[] scanline = new int[rect.width];", "-\t\t\t\tfor (int y=0; y<r.height; y++) {", "+\t\t\t\tfor (int y=0; y<rect.height; y++) {", "-\t\t\t\t\tdata.getPixels(0, y, r.width, scanline, 0);", "-\t\t\t\t\tfor (int x=0; x<r.width; x++) {", "+\t\t\t\t\tdata.getPixels(0, y, rect.width, scanline, 0);", "+\t\t\t\t\tfor (int x=0; x<rect.width; x++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bae51e3500f61ea3910b3c3edade2a19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "7d39c6aadb10854e08d28af689cb8ec1995cfef0", "commitAfterChange": "7ea8f6efbd6b9112bb64099daca39467f3a6d2f8", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 98, "signatureBeforeChange": "  void initializeCallbacks ()", "signatureAfterChange": "  void initializeCallbacks ()", "diff": ["+\tclosuresCount = new int[Widget.LAST_SIGNAL];", "+\tclosuresProc = new long /*int*/ [Widget.LAST_SIGNAL];", "-\tclosures [Widget.ACTIVATE] = OS.g_cclosure_new (windowProc2, Widget.ACTIVATE, 0);", "-\tclosures [Widget.ACTIVATE_INVERSE] = OS.g_cclosure_new (windowProc2, Widget.ACTIVATE_INVERSE, 0);", "-\tclosures [Widget.CHANGED] = OS.g_cclosure_new (windowProc2, Widget.CHANGED, 0);", "-\tclosures [Widget.CLICKED] = OS.g_cclosure_new (windowProc2, Widget.CLICKED, 0);", "-\tclosures [Widget.CREATE_MENU_PROXY] = OS.g_cclosure_new (windowProc2, Widget.CREATE_MENU_PROXY, 0);", "-\tclosures [Widget.DAY_SELECTED] = OS.g_cclosure_new (windowProc2, Widget.DAY_SELECTED, 0);", "-\tclosures [Widget.DAY_SELECTED_DOUBLE_CLICK] = OS.g_cclosure_new (windowProc2, Widget.DAY_SELECTED_DOUBLE_CLICK, 0);", "-\tclosures [Widget.HIDE] = OS.g_cclosure_new (windowProc2, Widget.HIDE, 0);", "-\tclosures [Widget.GRAB_FOCUS] = OS.g_cclosure_new (windowProc2, Widget.GRAB_FOCUS, 0);", "-\tclosures [Widget.MAP] = OS.g_cclosure_new (windowProc2, Widget.MAP, 0);", "-\tclosures [Widget.MONTH_CHANGED] = OS.g_cclosure_new (windowProc2, Widget.MONTH_CHANGED, 0);", "-\tclosures [Widget.OUTPUT] = OS.g_cclosure_new (windowProc2, Widget.OUTPUT, 0);", "-\tclosures [Widget.POPUP_MENU] = OS.g_cclosure_new (windowProc2, Widget.POPUP_MENU, 0);", "-\tclosures [Widget.PREEDIT_CHANGED] = OS.g_cclosure_new (windowProc2, Widget.PREEDIT_CHANGED, 0);", "-\tclosures [Widget.REALIZE] = OS.g_cclosure_new (windowProc2, Widget.REALIZE, 0);", "-\tclosures [Widget.SELECT] = OS.g_cclosure_new (windowProc2, Widget.SELECT, 0);", "-\tclosures [Widget.SELECTION_DONE] = OS.g_cclosure_new (windowProc2, Widget.SELECTION_DONE, 0);", "-\tclosures [Widget.SHOW] = OS.g_cclosure_new (windowProc2, Widget.SHOW, 0);", "-\tclosures [Widget.START_INTERACTIVE_SEARCH] = OS.g_cclosure_new (windowProc2, Widget.START_INTERACTIVE_SEARCH, 0);", "-\tclosures [Widget.VALUE_CHANGED] = OS.g_cclosure_new (windowProc2, Widget.VALUE_CHANGED, 0);", "-\tclosures [Widget.UNMAP] = OS.g_cclosure_new (windowProc2, Widget.UNMAP, 0);", "-\tclosures [Widget.UNREALIZE] = OS.g_cclosure_new (windowProc2, Widget.UNREALIZE, 0);", "-\tclosures [Widget.BACKSPACE] = OS.g_cclosure_new (windowProc2, Widget.BACKSPACE, 0);", "-\tclosures [Widget.BACKSPACE_INVERSE] = OS.g_cclosure_new (windowProc2, Widget.BACKSPACE_INVERSE, 0);", "-\tclosures [Widget.COPY_CLIPBOARD] = OS.g_cclosure_new (windowProc2, Widget.COPY_CLIPBOARD, 0);", "-\tclosures [Widget.COPY_CLIPBOARD_INVERSE] = OS.g_cclosure_new (windowProc2, Widget.COPY_CLIPBOARD_INVERSE, 0);", "-\tclosures [Widget.CUT_CLIPBOARD] = OS.g_cclosure_new (windowProc2, Widget.CUT_CLIPBOARD, 0);", "-\tclosures [Widget.CUT_CLIPBOARD_INVERSE] = OS.g_cclosure_new (windowProc2, Widget.CUT_CLIPBOARD_INVERSE, 0);", "-\tclosures [Widget.PASTE_CLIPBOARD] = OS.g_cclosure_new (windowProc2, Widget.PASTE_CLIPBOARD, 0);", "-\tclosures [Widget.PASTE_CLIPBOARD_INVERSE] = OS.g_cclosure_new (windowProc2, Widget.PASTE_CLIPBOARD_INVERSE, 0);", "+\tclosuresProc [Widget.ACTIVATE] = windowProc2;", "+\tclosuresProc [Widget.ACTIVATE_INVERSE] = windowProc2;", "+\tclosuresProc [Widget.CHANGED] = windowProc2;", "+\tclosuresProc [Widget.CLICKED] = windowProc2;", "+\tclosuresProc [Widget.CREATE_MENU_PROXY] = windowProc2;", "+\tclosuresProc [Widget.DAY_SELECTED] = windowProc2;", "+\tclosuresProc [Widget.DAY_SELECTED_DOUBLE_CLICK] = windowProc2;", "+\tclosuresProc [Widget.HIDE] = windowProc2;", "+\tclosuresProc [Widget.GRAB_FOCUS] = windowProc2;", "+\tclosuresProc [Widget.MAP] = windowProc2;", "+\tclosuresProc [Widget.MONTH_CHANGED] = windowProc2;", "+\tclosuresProc [Widget.OUTPUT] = windowProc2;", "+\tclosuresProc [Widget.POPUP_MENU] = windowProc2;", "+\tclosuresProc [Widget.PREEDIT_CHANGED] = windowProc2;", "+\tclosuresProc [Widget.REALIZE] = windowProc2;", "+\tclosuresProc [Widget.SELECT] = windowProc2;", "+\tclosuresProc [Widget.SELECTION_DONE] = windowProc2;", "+\tclosuresProc [Widget.SHOW] = windowProc2;", "+\tclosuresProc [Widget.START_INTERACTIVE_SEARCH] = windowProc2;", "+\tclosuresProc [Widget.VALUE_CHANGED] = windowProc2;", "+\tclosuresProc [Widget.UNMAP] = windowProc2;", "+\tclosuresProc [Widget.UNREALIZE] = windowProc2;", "+\tclosuresProc [Widget.BACKSPACE] = windowProc2;", "+\tclosuresProc [Widget.BACKSPACE_INVERSE] = windowProc2;", "+\tclosuresProc [Widget.COPY_CLIPBOARD] = windowProc2;", "+\tclosuresProc [Widget.COPY_CLIPBOARD_INVERSE] = windowProc2;", "+\tclosuresProc [Widget.CUT_CLIPBOARD] = windowProc2;", "+\tclosuresProc [Widget.CUT_CLIPBOARD_INVERSE] = windowProc2;", "+\tclosuresProc [Widget.PASTE_CLIPBOARD] = windowProc2;", "+\tclosuresProc [Widget.PASTE_CLIPBOARD_INVERSE] = windowProc2;", "-\tclosures [Widget.BUTTON_PRESS_EVENT] = OS.g_cclosure_new (windowProc3, Widget.BUTTON_PRESS_EVENT, 0);", "-\tclosures [Widget.BUTTON_PRESS_EVENT_INVERSE] = OS.g_cclosure_new (windowProc3, Widget.BUTTON_PRESS_EVENT_INVERSE, 0);", "-\tclosures [Widget.BUTTON_RELEASE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.BUTTON_RELEASE_EVENT, 0);", "-\tclosures [Widget.BUTTON_RELEASE_EVENT_INVERSE] = OS.g_cclosure_new (windowProc3, Widget.BUTTON_RELEASE_EVENT_INVERSE, 0);", "-\tclosures [Widget.COMMIT] = OS.g_cclosure_new (windowProc3, Widget.COMMIT, 0);", "-\tclosures [Widget.CONFIGURE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.CONFIGURE_EVENT, 0);", "-\tclosures [Widget.DELETE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.DELETE_EVENT, 0);", "-\tclosures [Widget.ENTER_NOTIFY_EVENT] = OS.g_cclosure_new (windowProc3, Widget.ENTER_NOTIFY_EVENT, 0);", "-\tclosures [Widget.EVENT] = OS.g_cclosure_new (windowProc3, Widget.EVENT, 0);", "-\tclosures [Widget.EVENT_AFTER] = OS.g_cclosure_new (windowProc3, Widget.EVENT_AFTER, 0);", "-\tclosures [Widget.EXPOSE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.EXPOSE_EVENT, 0);", "-\tclosures [Widget.EXPOSE_EVENT_INVERSE] = OS.g_cclosure_new (windowProc3, Widget.EXPOSE_EVENT_INVERSE, 0);", "-\tclosures [Widget.FOCUS] = OS.g_cclosure_new (windowProc3, Widget.FOCUS, 0);", "-\tclosures [Widget.FOCUS_IN_EVENT] = OS.g_cclosure_new (windowProc3, Widget.FOCUS_IN_EVENT, 0);", "-\tclosures [Widget.FOCUS_OUT_EVENT] = OS.g_cclosure_new (windowProc3, Widget.FOCUS_OUT_EVENT, 0);", "-\tclosures [Widget.KEY_PRESS_EVENT] = OS.g_cclosure_new (windowProc3, Widget.KEY_PRESS_EVENT, 0);", "-\tclosures [Widget.KEY_RELEASE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.KEY_RELEASE_EVENT, 0);", "-\tclosures [Widget.INPUT] = OS.g_cclosure_new (windowProc3, Widget.INPUT, 0);", "-\tclosures [Widget.LEAVE_NOTIFY_EVENT] = OS.g_cclosure_new (windowProc3, Widget.LEAVE_NOTIFY_EVENT, 0);", "-\tclosures [Widget.MAP_EVENT] = OS.g_cclosure_new (windowProc3, Widget.MAP_EVENT, 0);", "-\tclosures [Widget.MNEMONIC_ACTIVATE] = OS.g_cclosure_new (windowProc3, Widget.MNEMONIC_ACTIVATE, 0);", "-\tclosures [Widget.MOTION_NOTIFY_EVENT] = OS.g_cclosure_new (windowProc3, Widget.MOTION_NOTIFY_EVENT, 0);", "-\tclosures [Widget.MOTION_NOTIFY_EVENT_INVERSE] = OS.g_cclosure_new (windowProc3, Widget.MOTION_NOTIFY_EVENT_INVERSE, 0);", "-\tclosures [Widget.MOVE_FOCUS] = OS.g_cclosure_new (windowProc3, Widget.MOVE_FOCUS, 0);", "-\tclosures [Widget.POPULATE_POPUP] = OS.g_cclosure_new (windowProc3, Widget.POPULATE_POPUP, 0);", "-\tclosures [Widget.SCROLL_EVENT] = OS.g_cclosure_new (windowProc3, Widget.SCROLL_EVENT, 0);", "-\tclosures [Widget.SHOW_HELP] = OS.g_cclosure_new (windowProc3, Widget.SHOW_HELP, 0);", "-\tclosures [Widget.SIZE_ALLOCATE] = OS.g_cclosure_new (windowProc3, Widget.SIZE_ALLOCATE, 0);", "-\tclosures [Widget.STYLE_SET] = OS.g_cclosure_new (windowProc3, Widget.STYLE_SET, 0);", "-\tclosures [Widget.TOGGLED] = OS.g_cclosure_new (windowProc3, Widget.TOGGLED, 0);\t", "-\tclosures [Widget.UNMAP_EVENT] = OS.g_cclosure_new (windowProc3, Widget.UNMAP_EVENT, 0);", "-\tclosures [Widget.VISIBILITY_NOTIFY_EVENT] = OS.g_cclosure_new (windowProc3, Widget.VISIBILITY_NOTIFY_EVENT, 0);", "-\tclosures [Widget.WINDOW_STATE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.WINDOW_STATE_EVENT, 0);", "-\tclosures [Widget.ROW_DELETED] = OS.g_cclosure_new (windowProc3, Widget.ROW_DELETED, 0);", "-\tclosures [Widget.DIRECTION_CHANGED] = OS.g_cclosure_new (windowProc3, Widget.DIRECTION_CHANGED, 0);", "+\tclosuresProc [Widget.BUTTON_PRESS_EVENT] = windowProc3;", "+\tclosuresProc [Widget.BUTTON_PRESS_EVENT_INVERSE] = windowProc3;", "+\tclosuresProc [Widget.BUTTON_RELEASE_EVENT] = windowProc3;", "+\tclosuresProc [Widget.BUTTON_RELEASE_EVENT_INVERSE] = windowProc3;", "+\tclosuresProc [Widget.COMMIT] = windowProc3;", "+\tclosuresProc [Widget.CONFIGURE_EVENT] = windowProc3;", "+\tclosuresProc [Widget.DELETE_EVENT] = windowProc3;", "+\tclosuresProc [Widget.ENTER_NOTIFY_EVENT] = windowProc3;", "+\tclosuresProc [Widget.EVENT] = windowProc3;", "+\tclosuresProc [Widget.EVENT_AFTER] = windowProc3;", "+\tclosuresProc [Widget.EXPOSE_EVENT] = windowProc3;", "+\tclosuresProc [Widget.EXPOSE_EVENT_INVERSE] = windowProc3;", "+\tclosuresProc [Widget.FOCUS] = windowProc3;", "+\tclosuresProc [Widget.FOCUS_IN_EVENT] = windowProc3;", "+\tclosuresProc [Widget.FOCUS_OUT_EVENT] = windowProc3;", "+\tclosuresProc [Widget.KEY_PRESS_EVENT] = windowProc3;", "+\tclosuresProc [Widget.KEY_RELEASE_EVENT] = windowProc3;", "+\tclosuresProc [Widget.INPUT] = windowProc3;", "+\tclosuresProc [Widget.LEAVE_NOTIFY_EVENT] = windowProc3;", "+\tclosuresProc [Widget.MAP_EVENT] = windowProc3;", "+\tclosuresProc [Widget.MNEMONIC_ACTIVATE] = windowProc3;", "+\tclosuresProc [Widget.MOTION_NOTIFY_EVENT] = windowProc3;", "+\tclosuresProc [Widget.MOTION_NOTIFY_EVENT_INVERSE] = windowProc3;", "+\tclosuresProc [Widget.MOVE_FOCUS] = windowProc3;", "+\tclosuresProc [Widget.POPULATE_POPUP] = windowProc3;", "+\tclosuresProc [Widget.SCROLL_EVENT] = windowProc3;", "+\tclosuresProc [Widget.SHOW_HELP] = windowProc3;", "+\tclosuresProc [Widget.SIZE_ALLOCATE] = windowProc3;", "+\tclosuresProc [Widget.STYLE_SET] = windowProc3;", "+\tclosuresProc [Widget.TOGGLED] = windowProc3;\t", "+\tclosuresProc [Widget.UNMAP_EVENT] = windowProc3;", "+\tclosuresProc [Widget.VISIBILITY_NOTIFY_EVENT] = windowProc3;", "+\tclosuresProc [Widget.WINDOW_STATE_EVENT] = windowProc3;", "+\tclosuresProc [Widget.ROW_DELETED] = windowProc3;", "+\tclosuresProc [Widget.DIRECTION_CHANGED] = windowProc3;", "-\tclosures [Widget.DELETE_RANGE] = OS.g_cclosure_new (windowProc4, Widget.DELETE_RANGE, 0);", "-\tclosures [Widget.DELETE_TEXT] = OS.g_cclosure_new (windowProc4, Widget.DELETE_TEXT, 0);", "-\tclosures [Widget.ICON_RELEASE] = OS.g_cclosure_new (windowProc4, Widget.ICON_RELEASE, 0);", "-\tclosures [Widget.ROW_ACTIVATED] = OS.g_cclosure_new (windowProc4, Widget.ROW_ACTIVATED, 0);", "-\tclosures [Widget.SCROLL_CHILD] = OS.g_cclosure_new (windowProc4, Widget.SCROLL_CHILD, 0);", "-\tclosures [Widget.STATUS_ICON_POPUP_MENU] = OS.g_cclosure_new (windowProc4, Widget.STATUS_ICON_POPUP_MENU, 0);", "-\tclosures [Widget.SWITCH_PAGE] = OS.g_cclosure_new (windowProc4, Widget.SWITCH_PAGE, 0);", "-\tclosures [Widget.TEST_COLLAPSE_ROW] = OS.g_cclosure_new (windowProc4, Widget.TEST_COLLAPSE_ROW, 0);", "-\tclosures [Widget.TEST_EXPAND_ROW] = OS.g_cclosure_new (windowProc4, Widget.TEST_EXPAND_ROW, 0);", "-\tclosures [Widget.ROW_INSERTED] = OS.g_cclosure_new (windowProc4, Widget.ROW_INSERTED, 0);", "-\tclosures [Widget.DELETE_FROM_CURSOR] = OS.g_cclosure_new (windowProc4, Widget.DELETE_FROM_CURSOR, 0);", "-\tclosures [Widget.DELETE_FROM_CURSOR_INVERSE] = OS.g_cclosure_new (windowProc4, Widget.DELETE_FROM_CURSOR_INVERSE, 0);", "+\tclosuresProc [Widget.DELETE_RANGE] = windowProc4;", "+\tclosuresProc [Widget.DELETE_TEXT] = windowProc4;", "+\tclosuresProc [Widget.ICON_RELEASE] = windowProc4;", "+\tclosuresProc [Widget.ROW_ACTIVATED] = windowProc4;", "+\tclosuresProc [Widget.SCROLL_CHILD] = windowProc4;", "+\tclosuresProc [Widget.STATUS_ICON_POPUP_MENU] = windowProc4;", "+\tclosuresProc [Widget.SWITCH_PAGE] = windowProc4;", "+\tclosuresProc [Widget.TEST_COLLAPSE_ROW] = windowProc4;", "+\tclosuresProc [Widget.TEST_EXPAND_ROW] = windowProc4;", "+\tclosuresProc [Widget.ROW_INSERTED] = windowProc4;", "+\tclosuresProc [Widget.DELETE_FROM_CURSOR] = windowProc4;", "+\tclosuresProc [Widget.DELETE_FROM_CURSOR_INVERSE] = windowProc4;", "-\tclosures [Widget.CHANGE_VALUE] = OS.g_cclosure_new (windowProc5, Widget.CHANGE_VALUE, 0);", "-\tclosures [Widget.EXPAND_COLLAPSE_CURSOR_ROW] = OS.g_cclosure_new (windowProc5, Widget.EXPAND_COLLAPSE_CURSOR_ROW, 0);", "-\tclosures [Widget.INSERT_TEXT] = OS.g_cclosure_new (windowProc5, Widget.INSERT_TEXT, 0);", "-\tclosures [Widget.TEXT_BUFFER_INSERT_TEXT] = OS.g_cclosure_new (windowProc5, Widget.TEXT_BUFFER_INSERT_TEXT, 0);", "-\tclosures [Widget.MOVE_CURSOR] = OS.g_cclosure_new (windowProc5, Widget.MOVE_CURSOR, 0);", "-\tclosures [Widget.MOVE_CURSOR_INVERSE] = OS.g_cclosure_new (windowProc5, Widget.MOVE_CURSOR_INVERSE, 0);", "+\tclosuresProc [Widget.CHANGE_VALUE] = windowProc5;", "+\tclosuresProc [Widget.EXPAND_COLLAPSE_CURSOR_ROW] = windowProc5;", "+\tclosuresProc [Widget.INSERT_TEXT] = windowProc5;", "+\tclosuresProc [Widget.TEXT_BUFFER_INSERT_TEXT] = windowProc5;", "+\tclosuresProc [Widget.MOVE_CURSOR] = windowProc5;", "+\tclosuresProc [Widget.MOVE_CURSOR_INVERSE] = windowProc5;", "+\t\tif (closuresProc[i] != 0) {", "+\t\t\tclosures [i] = OS.g_cclosure_new(closuresProc [i], i, 0);", "+\t\t}"]}], "num": 22430}
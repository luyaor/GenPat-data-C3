{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72e7c659d596858941e3d77e396378de", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "662584a5f5be282d902e7cf159707306", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "fca36a743f6a048ad199c103a03cfa79445ff4a7", "commitAfterChange": "772dbb2157e9b2de63e2852948b2b41f878efc48", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+\t\tString types = \"*\"; //$NON-NLS-1$", "+\t\tbyte [] bytes = new byte [types.length() + 1];", "+\t\tfor (int i = 0; i < types.length(); i++) {", "+\t\t\tbytes[i] = (byte)types.charAt(i);", "+\t\t}", "+\t\tint /*long*/ ptr = OS.malloc(bytes.length);", "+\t\tOS.memmove(ptr, bytes, bytes.length);", "+\t\tint /*long*/ [] sizep = new int /*long*/ [1], alignp = new int /*long*/ [1];", "+\t\tOS.NSGetSizeAndAlignment(ptr, sizep, alignp);", "+\t\tOS.free(ptr);", "+", "-\t\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\"); //$NON-NLS-1$", "+\t\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92b20789c8bb1653898e42d568ab95dd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_TextLayout.java", "commitBeforeChange": "57f622faa0149851e15aa3fb09d20bed6fe19df9", "commitAfterChange": "0d507e89e6704c59427d9b6b7f6119a9ac58cf88", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public void test_getNextOffset2()", "signatureAfterChange": "  public void test_getNextOffset2()", "diff": ["-\tTextLayout layout = new TextLayout(display);", "-\tString text = \"oi\\u0E19\\u0E49\\u0E33oi\";", "-\tlayout.setText(text);", "-\tassertEquals(5, layout.getNextOffset(2, SWT.MOVEMENT_CLUSTER));", "-\tassertEquals(2, layout.getPreviousOffset(5, SWT.MOVEMENT_CLUSTER));", "-\tlayout.dispose();", "+\t", "+    TextLayout layout = new TextLayout(display);", "+    layout.setText(\"A\\u0E19\\u0E49\\u0E33B\");", "+    String[] messages = {\"no segments\", \"segments\", \"segments (duplicate at 0)\", \"segments (duplicate at 1)\", \"segments (duplicate at 2)\",        ", "+    \t\t\t\t\t\"segments (duplicate at 3)\", \"segments (duplicate at 4)\", \"segments (duplicate at 5)\"};", "+//    int[][] segments = {null, {0, 1, 2, 3, 4, 5}, {0, 0, 1, 2, 3, 4, 5}, {0, 1, 1, 2, 3, 4, 5}, {0, 1, 2, 2, 3, 4, 5}, {0, 1, 2, 3, 3, 4, 5},", "+//            \t\t\t{0, 1, 2, 3, 4, 4, 5}, {0, 1, 2, 3, 4, 5, 5}};", "+    ", "+    int[][] segments = {null};", "+", "+    for (int i = 0; i < segments.length; i++) {", "+        String m = messages[i];", "+        layout.setSegments(segments[i]);", "+        assertEquals(m, 1, layout.getNextOffset(0, SWT.MOVEMENT_CLUSTER));", "+        assertEquals(m, 4, layout.getNextOffset(1, SWT.MOVEMENT_CLUSTER));", "+        assertEquals(m, 5, layout.getNextOffset(4, SWT.MOVEMENT_CLUSTER));", "+        assertEquals(m, 4, layout.getPreviousOffset(5, SWT.MOVEMENT_CLUSTER));", "+        assertEquals(m, 1, layout.getPreviousOffset(4, SWT.MOVEMENT_CLUSTER));", "+        assertEquals(m, 0, layout.getPreviousOffset(1, SWT.MOVEMENT_CLUSTER));", "+    }", "+    layout.dispose();"]}], "num": 37563}
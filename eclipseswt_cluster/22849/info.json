{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40f407b3db994610b6b58659b1a3bdfa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "272baad352258e24e5ef657295d048f3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "cbe1e7d57e3a86c34a1954206c591ae008390b06", "commitAfterChange": "bd2535620722a56cc93e8593aa26ee420bb505bf", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  int kEventWindowDeactivated (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventWindowDeactivated (int nextHandler, int theEvent, int userData)", "diff": ["-\t/*", "-\t* Bug in the Macintosh.  The default handler of kEventWindowDeactivated", "-\t* segment faults when DisposeWindow() is called in previous handlers.", "-\t* The fix is to use RetainWindow() so that the window does not get", "-\t* disposed until the handler returns.", "-\t*/", "+\t//TEMPORARY CODE - should be send, but causes a GP", "-\tOS.RetainWindow (shellHandle);", "-\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "-\tsendEvent (SWT.Deactivate);", "-\tif (!isDisposed ()) {", "-\t\tsaveFocus ();", "-\t\tif (savedFocus != null) {", "-\t\t\t/*", "-\t\t\t* Bug in the Macintosh.  When ClearKeyboardFocus() is called,", "-\t\t\t* the control that has focus gets two kEventControlSetFocus", "-\t\t\t* events indicating that focus was lost.  The fix is to ignore", "-\t\t\t* both of these and send the focus lost event explicitly.", "-\t\t\t*/", "-\t\t\tdisplay.ignoreFocus = true;", "-\t\t\tOS.ClearKeyboardFocus (shellHandle);", "-\t\t\tdisplay.ignoreFocus = false;", "-\t\t\tif (!savedFocus.isDisposed ()) {", "-\t\t\t\tsavedFocus.sendFocusEvent (SWT.FocusOut);", "-\t\t\t}", "-\t\t}", "+\tpostEvent (SWT.Deactivate);", "+\tif (isDisposed ()) return result;", "+\tsaveFocus ();", "+\tif (savedFocus != null) {", "+\t\t/*", "+\t\t* Bug in the Macintosh.  When ClearKeyboardFocus() is called,", "+\t\t* the control that has focus gets two kEventControlSetFocus", "+\t\t* events indicating that focus was lost.  The fix is to ignore", "+\t\t* both of these and send the focus lost event explicitly.", "+\t\t*/", "+\t\tdisplay.ignoreFocus = true;", "+\t\tOS.ClearKeyboardFocus (shellHandle);", "+\t\tdisplay.ignoreFocus = false;", "+\t\t//TEMPORARY CODE - should be send, but causes a GP", "+\t\tif (!savedFocus.isDisposed ()) savedFocus.sendFocusEvent (SWT.FocusOut, true);", "-\tOS.ReleaseWindow (shellHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "292ff289cfc007200d4ecdc419141ceb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void setVisible (boolean visible)", "signatureAfterChange": "  public void setVisible (boolean visible)", "diff": ["+", "-\trealizeWidget ();", "-\t", "-\t/* Show the shell */", "-\t\t", "+\t\tif ((state & HIDDEN) == 0) return;", "+\t\tstate &= ~HIDDEN;", "+\t} else {", "+\t\tif ((state & HIDDEN) != 0) return;", "+\t\tstate |= HIDDEN;", "+\t}", "+\tif (parent != null && !parent.isVisible ()) return;", "+\tsetWindowVisible (visible);", "+}", "-", "-\t\t/* Map the widget */", "-        /* AW", "-\t\tOS.XtSetMappedWhenManaged (shellHandle, true);", "-\t\tif (OS.XtIsTopLevelShell (shellHandle)) {", "-\t\t\tOS.XtMapWidget (shellHandle);", "-\t\t} else {", "-\t\t\tOS.XtPopup (shellHandle, OS.XtGrabNone);", "-        */", "-\t\tOS.ShowWindow(shellHandle);", "-\t\t//OS.SelectWindow(shellHandle);", "-\t\tOS.BringToFront(shellHandle);", "-", "-\t\tprocessResize (null);", "-\t\t", "-\t\t// find focus", "-\t\t//if (savedFocus == null)", "-\t\t//\tsetFocus();", "-", "-\t\t/*", "-\t\t* Force the shell to be fully exposed before returning.", "-\t\t* This ensures that the shell coordinates are correct", "-\t\t* when queried directly after showing the shell.", "-\t\t*/", "-\t\tdo {", "-\t\t\tdisplay.update ();", "-\t\t} while (!isVisible ());", "-", "-\t\t//adjustTrim ();", "-", "-\t\t/* Set the saved focus widget */", "-\t\t/*", "-\t\tif (savedFocus != null && !savedFocus.isDisposed ()) {", "-\t\t\tsavedFocus.setFocus ();", "-\t\t}", "-\t\tsavedFocus = null;", "-\t\t*/", "-\t\t", "-\t\t//sendEvent (SWT.Show);", "-\t\t", "-\t\treturn;", "-\t}", "-\t", "-\tShell[] shells= getShells();", "-\tfor (int i= 0; i < shells.length; i++) {", "-\t\tShell shell= shells[i];", "-\t\tif (shell.isVisible())", "-\t\t\tshell.setVisible(false);", "-\t}", "-\t", "-\t/* Hide the shell */", "-    /* AW", "-\tOS.XtSetMappedWhenManaged (shellHandle, false);", "-\tif (OS.XtIsTopLevelShell (shellHandle)) {", "-\t\tOS.XtUnmapWidget (shellHandle);", "-\t\tOS.XtPopdown (shellHandle);", "-    */", "-    OS.HideWindow(shellHandle);", "-\tsendEvent (SWT.Hide);"]}], "num": 22849}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7a6a65fab444338fac7428f1179d69e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49328b6bff1562585deffde9f4101f37", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "3a5ece72c305410ded2cd14b2fb9617ac7003ab1", "commitAfterChange": "00d9a929233cc0e4c7aa22a7ff5b7562dd581371", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": "  void generateSendsMetaData()", "signatureAfterChange": "  void generateSendsMetaData()", "diff": ["+\tString className = getClassName(mainClassName);", "+\tString packageName = getPackageName(mainClassName).replace('.', '_');", "-\t\t\tif (\"class\".equals(node.getNodeName())) {", "-//\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-//\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "-//\t\t\t\tif (getGenerateClass(name)) {", "-\t\t\t\t\tNodeList methods = node.getChildNodes();", "-\t\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "-\t\t\t\t\t\tNode method = methods.item(j);", "-\t\t\t\t\t\tif (\"method\".equals(method.getNodeName())) {", "-\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"OS_objc_1msgSend_1stret__\");", "-\t\t\t\t\t\t\t\tbuffer.append(\"Lorg_eclipse_swt_internal_cocoa_\");", "-\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\tbuffer.append(\"_2\");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"OS_objc_1msgSend_1fpret__\");", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tbuffer.append(\"OS_objc_1msgSend__\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbuffer.append(\"II\");", "-\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(\"Lorg_eclipse_swt_internal_cocoa_\");", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(\"_2\");", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getJNIType(param));", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\tif (\"class\".equals(node.getNodeName()) && getGen(node)) {", "+\t\t\t\tNodeList methods = node.getChildNodes();", "+\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "+\t\t\t\t\tNode method = methods.item(j);", "+\t\t\t\t\tif (\"method\".equals(method.getNodeName())) {", "+\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "+\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\tbuffer.append(className);", "+\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "+\t\t\t\t\t\t\tbuffer.append(\"_objc_1msgSend_1stret__\");", "+\t\t\t\t\t\t\tbuffer.append(\"L\");", "+\t\t\t\t\t\t\tbuffer.append(packageName);", "+\t\t\t\t\t\t\tbuffer.append(\".\");", "+\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "+\t\t\t\t\t\t\tbuffer.append(\"_2\");", "+\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "+\t\t\t\t\t\t\tbuffer.append(\"_objc_1msgSend_1fpret__\");", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tbuffer.append(\"_objc_1msgSend__\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append(\"II\");", "+\t\t\t\t\t\tNodeList params = method.getChildNodes();", "+\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "+\t\t\t\t\t\t\tNode param = params.item(k);", "+\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\t\tif (isStruct(param)) {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"L\");", "+\t\t\t\t\t\t\t\t\tbuffer.append(packageName);", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"_\");", "+\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"_2\");", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tbuffer.append(getJNIType(param));", "-\t\t\t\t\t\t\tString key = buffer.toString();", "-\t\t\t\t\t\t\tif (set.get(key) == null) set.put(key, method);", "+\t\t\t\t\t\tString key = buffer.toString();", "+\t\t\t\t\t\tif (set.get(key) == null) set.put(key, method);", "-//\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb0393cebe57ce326690b8ab15355f45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "98fc614af4e0736880ddc01f544655cbdad4088c", "commitAfterChange": "3b27b41db1dd3c54eec31645b5eb2d11fe630ed4", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["-//\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-//\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "-//\t\t\t\tif (getGenerateClass(name)) {", "+\t\t\t\tif (getGen(node)) {", "-\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\tbuffer.append(\"public static final native \"); ", "-\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"void objc_msgSend_stret(\");", "-\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\tbuffer.append(\" result, \");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"double objc_msgSend_fpret(\");", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tbuffer.append(\"int objc_msgSend(\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbuffer.append(\"int id, int sel\");", "-\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\tboolean first = false;", "-\t\t\t\t\t\t\tint count = 0;", "-\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\tif (!first) buffer.append(\", \");", "-\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getType(param));", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\tbuffer.append(\" arg\");", "-\t\t\t\t\t\t\t\t\tbuffer.append(String.valueOf(count++));", "+\t\t\t\t\t\t\tif (getGen(method)) {", "+\t\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "+\t\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\t\t\tbuffer.append(\"public static final native \"); ", "+\t\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"void objc_msgSend_stret(\");", "+\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "+\t\t\t\t\t\t\t\t\tbuffer.append(\" result, \");", "+\t\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"double objc_msgSend_fpret(\");", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"int objc_msgSend(\");", "+\t\t\t\t\t\t\t\tbuffer.append(\"int id, int sel\");", "+\t\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "+\t\t\t\t\t\t\t\tboolean first = false;", "+\t\t\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "+\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "+\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\t\t\t\tif (!first) buffer.append(\", \");", "+\t\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getType(param));", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tfirst = false;", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(\" arg\");", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(String.valueOf(count++));", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbuffer.append(\");\");", "+\t\t\t\t\t\t\t\tset.add(buffer.toString());", "-\t\t\t\t\t\t\tbuffer.append(\");\");", "-\t\t\t\t\t\t\tset.add(buffer.toString());", "-//\t\t\t\t}", "+\t\t\t\t}"]}], "num": 5159}
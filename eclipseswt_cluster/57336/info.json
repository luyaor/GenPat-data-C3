{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07f0a5cbf8d94bcbd71376fd51b81d02", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39d682d436eb14c649276b70cab87000", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "f4364bf890216d1961fb28435d20b6051974449c", "commitAfterChange": "491628500932dc32bad518e980f39b9f2fbda6df", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Clipboard(Display display)", "signatureAfterChange": " \tpublic Clipboard(Display display)", "diff": ["-public Clipboard(Display display) {\t", "-\tcheckSubclass ();", "-\tif (display == null) {", "-\t\tdisplay = Display.getCurrent();", "+\tpublic Clipboard(Display display) {\t", "+\t\tcheckSubclass ();", "-\t\t\tdisplay = Display.getDefault();", "+\t\t\tdisplay = Display.getCurrent();", "+\t\t\tif (display == null) {", "+\t\t\t\tdisplay = Display.getDefault();", "+\t\t\t}", "+\t\tif (display.getThread() != Thread.currentThread()) {", "+\t\t\tDND.error(SWT.ERROR_THREAD_INVALID_ACCESS);", "+\t\t}", "+\t\tthis.display = display;", "-\tif (display.getThread() != Thread.currentThread()) {", "-\t\tDND.error(SWT.ERROR_THREAD_INVALID_ACCESS);", "-\t}", "-\tthis.display = display;", "-\t", "-\tint widgetClass = OS.topLevelShellWidgetClass ();", "-\tshellHandle = OS.XtAppCreateShell (null, null, widgetClass, display.xDisplay, null, 0);", "-\tOS.XtSetMappedWhenManaged (shellHandle, false);", "-\tOS.XtRealizeWidget (shellHandle);", "-\tint xDisplay = OS.XtDisplay(shellHandle);", "-\tclipboardAtom = OS.XmInternAtom(xDisplay, CLIPBOARD, false);", "-\tprimaryAtom = OS.XmInternAtom(xDisplay, PRIMARY, false);", "-\ttargetsAtom = OS.XmInternAtom(xDisplay, TARGETS, false);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0200e776c72cefad9e486f986aa5f17c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "5fe1dac38bbaf436586a9cb7186584e15e9a84a3", "commitAfterChange": "aa4a6dbde79dfa01a598a4091801c6351b8adce7", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 152, "signatureBeforeChange": " int xFocusIn ()", "signatureAfterChange": " int xFocusIn (XFocusChangeEvent xEvent)", "diff": ["-int xFocusIn () {", "-\tif (!hasIMSupport()) {", "-\t\tshort [] point = getIMCaretPos ();", "-\t\tint ptr = OS.XtMalloc (4);", "-\t\tOS.memmove (ptr, point, 4);", "-\t\t/*", "-\t\t* Bug in Motif. On Linux Japanese only, XmImSetFocusValues() causes", "-\t\t* a GP when the XmNfontList resources does not containt a FontSet.", "-\t\t* The fix is to call XmImSetValues() to set the values and then call", "-\t\t* XmImSetFocusValues() with no parameters to set the IME focus.", "-\t\t*/", "-\t\tint[] argList = {", "-//\t\t\tOS.XmNforeground, getForegroundPixel(),", "-//\t\t\tOS.XmNbackground, getBackgroundPixel(),", "-\t\t\tOS.XmNspotLocation, ptr,", "-\t\t\tOS.XmNfontList, font.handle,", "-\t\t};", "-\t\tint focusHandle = focusHandle ();", "-\t\tOS.XmImSetValues (focusHandle, argList, argList.length / 2);", "+int xFocusIn (XFocusChangeEvent xEvent) {", "+\t/*", "+\t* Bug in Motif.  For some reason, when the widget font is", "+\t* not the default font and the widget loses focus, the", "+\t* X input method segment faults.  A BadFont (invalid font", "+\t* parameter) error is printed.  This problem also happens", "+\t* to XmText and XmTextField.  The fix is to change the", "+\t* X input method font back to the default font when the", "+\t* widget loses focus and restore it when the widget gets", "+\t* focus.", "+\t*/", "+\tupdateIM ();", "+\tif (!hasIMSupport ()) {", "+\t\tint focusHandle = OS.XtWindowToWidget (xEvent.display, xEvent.window);", "-\t\tif (ptr != 0) OS.XtFree (ptr);", "-\t}", "+\t} "]}], "num": 57336}
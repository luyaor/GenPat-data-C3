{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8611434b8cd759b91c97097fadddb9e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ca57323498c94b741e61cf62ee62863", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "189429edfa9fbff796a0033ed821365347e21fb7", "commitAfterChange": "ca9f82149fd684fb3dae8d4fbc43d142fa0d97e4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " public String[] getAvailableTypeNames()", "signatureAfterChange": " public String[] getAvailableTypeNames()", "diff": ["-\tbyte[] buffer = Converter.wcsToMbcs(null, \"TARGETS\", true);", "-\tint typeId = OS.gdk_atom_intern(buffer, false);", "-\t// first try the primary clipboard", "-\tint selection_data = OS.gtk_clipboard_wait_for_contents(pGtkPrimary, typeId);", "-\tif (selection_data == 0) {", "-\t\t// try the clipboard selection second", "-\t\tselection_data  = OS.gtk_clipboard_wait_for_contents(pGtkClipboard, typeId);", "-\t}", "-\tif (selection_data == 0) {", "-\t\treturn new String[0]; // No types available", "-\t}", "-\tGtkSelectionData gtkSelectionData = new GtkSelectionData();", "-\tOS.memmove(gtkSelectionData, selection_data, GtkSelectionData.sizeof);", "-\tif (gtkSelectionData.length == 0) return new String[0];", "-\tint[] atoms = new int[gtkSelectionData.length * 8 / gtkSelectionData.format];", "-\tOS.memmove(atoms, gtkSelectionData.data, gtkSelectionData.length);", "-\tString[] result = new String[atoms.length];", "-\tfor (int i = 0; i < atoms.length; i++) {", "-\t\tint pName = OS.gdk_atom_name(atoms[i]);", "-\t\tbuffer = new byte [OS.strlen(pName)];", "+\tint[] types = _getAvailableTypes();", "+\tString[] result = new String[types.length];", "+\tfor (int i = 0; i < types.length; i++) {", "+\t\tint pName = OS.gdk_atom_name(types[i]);", "+\t\tbyte[] buffer = new byte [OS.strlen(pName)];", "-\tOS.gtk_selection_data_free(selection_data);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c03ad25c0e7f59b510cf162d0ef32065", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "21af898a5d6ec508de2042508e5800867bc3cbcd", "commitAfterChange": "e5af7ee723dbfcb73d7dd092315b7611cf318447", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["-\tif ((style & SWT.EMBEDDED) != 0) {", "-\t\tShell shell = getShell ();", "-\t\tif (shell.focusProxy == 0) {", "-\t\t\tint [] argList = {OS.XmNx, -1, OS.XmNy, -1, OS.XmNwidth, 1, OS.XmNheight, 1};", "-\t\t\tint focusProxy = OS.XmCreateDrawingArea (shell.shellHandle, null, argList, argList.length / 2);", "-\t\t\tif (focusProxy == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\tshell.focusProxy = focusProxy;", "-\t\t\tOS.XtSetMappedWhenManaged (focusProxy, false);", "-\t\t\tOS.XtManageChild (focusProxy);", "-\t\t\tOS.XtSetMappedWhenManaged (focusProxy, true);", "-\t\t}", "-\t\tif (!OS.XtIsRealized (handle)) shell.realizeWidget ();", "-\t\tembeddedHandle = OS.XtWindow (handle);", "-\t}"]}], "num": 51650}
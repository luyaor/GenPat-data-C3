{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d30620b8dba03f4867b7c600e8becd16", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e2c01024eb494e35e28bdab763c805", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d7f67e8b48c54b2018c6a5f759c5479dd3e1cfe5", "commitAfterChange": "c83c3ac091bc0c96fc3831473381c286685245e0", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " void updateColumnWidth (TableColumn column, int width)", "signatureAfterChange": " void updateColumnWidth (TableColumn column, int width)", "diff": ["-\tRectangle bounds = getClientArea ();", "-\tif (oldWidth > 0) {", "-\t\tgc.copyArea (x, 0, bounds.width - x, bounds.height, columnX + width - 1, 0);\t/* dest x -1 offsets x's -1 above */", "-\t}", "+\tgc.copyArea (x, 0, clientArea.width - x, clientArea.height, columnX + width - 1, 0);\t/* dest x -1 offsets x's -1 above */", "-\t\tredraw (x, 0, change, bounds.height, false);", "+\t\t/* -1/+1 below ensure that right bound of selection redraws correctly in column */ ", "+\t\tredraw (x - 1, 0, change + 1, clientArea.height, false);", "-\t\tredraw (bounds.width - change, 0, change, bounds.height, false);", "+\t\tredraw (clientArea.width - change, 0, change, clientArea.height, false);", "+\t/* the focus box must be repainted because its stipple may become shifted as a result of its new width */", "+\tif (focusItem != null) redrawItem (focusItem.index, true);", "-\t\tif (oldWidth > 0) {", "-\t\t\theaderGC.copyArea (x, 0, headerBounds.width - x, headerBounds.height, columnX + width - 2, 0);\t/* dest x -2 offsets x's -1s above */", "-\t\t}", "+\t\theaderGC.copyArea (x, 0, headerBounds.width - x, headerBounds.height, columnX + width - 2, 0);\t/* dest x -2 offsets x's -1s above */", "-\thBar.setMaximum (maximum);", "-\tif (hBar.getThumb () != bounds.width) {", "-\t\thBar.setThumb (bounds.width);", "-\t\thBar.setPageIncrement (bounds.width);", "+\thBar.setMaximum (Math.max (1, maximum));\t/* setting a value of 0 here is ignored */", "+\tif (hBar.getThumb () != clientArea.width) {", "+\t\thBar.setThumb (clientArea.width);", "+\t\thBar.setPageIncrement (clientArea.width);", "-\thBar.setVisible (bounds.width < maximum);", "+\thBar.setVisible (clientArea.width < maximum);", "+", "+\tif (itemsCount == 0) redraw ();\t/* ensure that static focus rectangle updates properly */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bcd11bdaebf5df31d6f743d17028add", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getContents(Transfer transfer)", "signatureAfterChange": "  public Object getContents(Transfer transfer)", "diff": ["- */", "+", "-\t", "-\tif (display.isDisposed())", "-\t\treturn null;", "+\tif (display == null) DND.error(SWT.ERROR_WIDGET_DISPOSED);", "+\tif (display.isDisposed()) DND.error(SWT.ERROR_DEVICE_DISPOSED);", "+\tif (transfer == null) DND.error(SWT.ERROR_NULL_ARGUMENT);", "-\tif (transfer == null)", "-\t\treturn null;", "-\t\t", "-\tint[] scrapHandle= new int[1];", "+\tint[] scrapHandle = new int[1];", "-\tint[] typeIds= transfer.getTypeIds();", "+\tint[] typeIds = transfer.getTypeIds();", "-\t\tint flavorType= typeIds[i];", "-\t\tint[] size= new int[1];", "-\t\tif (OS.GetScrapFlavorSize(scrap, flavorType, size) == OS.kNoErr) {", "+\t\tint type = typeIds[i];", "+\t\tint[] size = new int[1];", "+\t\tif (OS.GetScrapFlavorSize(scrap, type, size) == OS.noErr) {", "-\t\t\t\t", "-\t\t\t\tTransferData tdata= new TransferData();", "-\t", "-\t\t\t\ttdata.type= flavorType;\t\t", "-\t\t\t\ttdata.data= new byte[size[0]];", "-\t\t\t\tOS.GetScrapFlavorData(scrap, flavorType, size, tdata.data);", "-\t\t\t\ttdata.length= size[0];", "-\t\t\t\t", "-\t\t\t\tObject result= transfer.nativeToJava(tdata);", "-\t\t\t\tif (result != null)", "-\t\t\t\t\treturn result;", "+\t\t\t\tTransferData tdata = new TransferData();", "+\t\t\t\ttdata.type = type;\t\t", "+\t\t\t\ttdata.data = new byte[size[0]];", "+\t\t\t\tOS.GetScrapFlavorData(scrap, type, size, tdata.data);", "+\t\t\t\treturn transfer.nativeToJava(tdata);", "-\t"]}], "num": 50656}
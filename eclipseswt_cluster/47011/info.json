{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d2204fe8b34677e2abcaf7378661bca", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a595aa14a3947b81b8ff417562c03550", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d7efdbb2b3fde4b50ad252f361fbed7b9e14701d", "commitAfterChange": "daefb444e2757b0fda729cafbeea7c19efa979a3", "methodNumberBeforeChange": 210, "methodNumberAfterChange": 210, "signatureBeforeChange": "  String gtk_rgba_to_css_string (GdkRGBA rgba)", "signatureAfterChange": "  String gtk_rgba_to_css_string (GdkRGBA rgba)", "diff": ["-\t * In GdkRGBA, values are a double between 0-1.<br>", "-     * In CSS, values are typically integers between 0-255.<br>", "-     * I.e, note, there is a slight loss of precision.", "-     * Thus setting/getting color *might* return slight differences.", "+\t * In GdkRGBA, values are a double between 0-1.", "+\t * In CSS, values are integers between 0-255 for r, g, and b.", "+\t * Alpha is still a double between 0-1.", "+\t * The final CSS format is: rgba(int, int, int, double)", "+\t * Due to this, there is a slight loss of precision.", "+\t * Setting/getting with CSS *might* yield slight differences.", "-\tString color = \"rgba(\" + (int)(rgba.red * 255) + \",\" + (int)(rgba.green * 255) + \",\" + (int)(rgba.blue * 255) + \",\" + (int)(rgba.alpha * 255) + \")\";", "-\treturn color;", "+\tGdkRGBA toConvert;", "+\tif (rgba != null) {", "+\t\ttoConvert = rgba;", "+\t} else {", "+\t\t// If we have a null RGBA, set it to the default COLOR_WIDGET_BACKGROUND.", "+\t\tGdkColor defaultGdkColor = display.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND).handle; ", "+\t\ttoConvert = new GdkRGBA ();", "+\t\ttoConvert.alpha = 1.0;", "+\t\ttoConvert.red = (defaultGdkColor.red & 0xFFFF) / (float)0xFFFF;", "+\t\ttoConvert.green = (defaultGdkColor.green & 0xFFFF) / (float)0xFFFF;", "+\t\ttoConvert.blue = (defaultGdkColor.blue & 0xFFFF) / (float)0xFFFF;", "+\t}", "+\tlong /*int*/ str = OS.gdk_rgba_to_string (toConvert);", "+\tint length = OS.strlen (str);", "+\tbyte [] buffer = new byte [length];", "+\tOS.memmove (buffer, str, length);", "+\treturn new String (Converter.mbcsToWcs (null, buffer));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc476f4a9ffac278f9e0f7d90cb8f00a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "ae834e4a6aabbe7b428dc047e3e613930ab049ad", "commitAfterChange": "05b983ea7f9494935862a426120e2ed48efa2321", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r \r LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\t\t\tcase OS.TTN_GETDISPINFOW:\r", "+\t\t\t/*\r", "+\t\t\t* Bug in Windows 98.  For some reason, the tool bar control\r", "+\t\t\t* sends both TTN_GETDISPINFOW and TTN_GETDISPINFOA to get\r", "+\t\t\t* the tool tip text and the tab folder control sends only \r", "+\t\t\t* TTN_GETDISPINFOW.  The fix is to handle only TTN_GETDISPINFOW,\r", "+\t\t\t* even though it should never be sent on Windows 98.\r", "+\t\t\t*\r", "+\t\t\t* NOTE:  Because the size of NMTTDISPINFO differs between\r", "+\t\t\t* Windows 98 and NT, guard against the case where the wrong\r", "+\t\t\t* kind of message occurs by copy inlining the memory moves\r", "+\t\t\t* and UNICODE conversion code.\r", "+\t\t\t*/\r", "-\t\t\t\tOS.MoveMemory (lpnmtdi, lParam, NMTTDISPINFO.sizeof);\r", "+\t\t\t\tOS.MoveMemoryA (lpnmtdi, lParam, NMTTDISPINFO.sizeofA);\r", "-\t\t\t\t\t/*\r", "-\t\t\t\t\t* Bug in Windows 98.  For some reason, the tool bar control\r", "-\t\t\t\t\t* sends both TTN_GETDISPINFOW and TTN_GETDISPINFOA to get\r", "-\t\t\t\t\t* the tool tip text and the tab folder control sends only \r", "-\t\t\t\t\t* TTN_GETDISPINFOW.  The fix is to handle only TTN_GETDISPINFOW,\r", "-\t\t\t\t\t* even though it should never be sent on Windows 98.\r", "-\t\t\t\t\t*/\r", "-\t\t\t\t\tif (hdr.code == OS.TTN_GETDISPINFOW) {\r", "-\t\t\t\t\t\tint length = string.length ();\r", "-\t\t\t\t\t\tchar [] buffer = new char [length + 1];\r", "-\t\t\t\t\t\tstring.getChars(0, length, buffer, 0);\r", "-\t\t\t\t\t\tshell.setToolTipText (lpnmtdi, buffer);\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t/* Use the character encoding for the default locale */\r", "-\t\t\t\t\t\tTCHAR buffer = new TCHAR (0, string, true);\r", "-\t\t\t\t\t\tshell.setToolTipText (lpnmtdi, buffer);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tOS.MoveMemory (lParam, lpnmtdi, NMTTDISPINFO.sizeof);\r", "+\t\t\t\t\tint length = string.length ();\r", "+\t\t\t\t\tchar [] chars = new char [length];\r", "+\t\t\t\t\tstring.getChars (0, length, chars, 0);\r", "+\t\t\t\t\tbyte [] bytes = new byte [chars.length * 2 + 1];\r", "+\t\t\t\t\tOS.WideCharToMultiByte (OS.CP_ACP, 0, chars, chars.length, bytes, bytes.length, null, null);\r", "+\t\t\t\t\tshell.setToolTipText (lpnmtdi, bytes);\r", "+\t\t\t\t\tOS.MoveMemoryA (lParam, lpnmtdi, NMTTDISPINFO.sizeofA);\r", "+\t\t\t\t\treturn LRESULT.ZERO;\r", "+\t\t\t\t}\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tcase OS.TTN_GETDISPINFOW: {\r", "+\t\t\t\tNMTTDISPINFO lpnmtdi = new NMTTDISPINFO ();\r", "+\t\t\t\tOS.MoveMemoryW (lpnmtdi, lParam, NMTTDISPINFO.sizeofW);\r", "+\t\t\t\tString string = toolTipText (lpnmtdi);\r", "+\t\t\t\tif (string != null && string.length () != 0) {\r", "+\t\t\t\t\tShell shell = getShell ();\r", "+\t\t\t\t\tstring = Display.withCrLf (string);\r", "+\t\t\t\t\tint length = string.length ();\r", "+\t\t\t\t\tchar [] buffer = new char [length + 1];\r", "+\t\t\t\t\tstring.getChars (0, length, buffer, 0);\r", "+\t\t\t\t\tshell.setToolTipText (lpnmtdi, buffer);\r", "+\t\t\t\t\tOS.MoveMemoryW (lParam, lpnmtdi, NMTTDISPINFO.sizeofW);\r"]}], "num": 47011}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ebc5178b48eae028a927a9ebbbf9d786", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46d8a66946eb42ab0b7e70fc9f888225", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "efe87bcee29339df205151a2a1bc120bf82170e7", "commitAfterChange": "95c5bd5be9e5e4341c644ca11834dbb39f3c43f7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["+\t\t/*", "+\t\t* Feature in Windows.  AlphaBlend() alters the alpha", "+\t\t* channel if the destination is a 32 bit depth bitmap.", "+\t\t* The fix is to draw to a temporary 24 bit depth bitmap", "+\t\t* first and then draw the temporary bitmap.", "+\t\t*/", "+\t\tboolean fixAlpha = false;", "+\t\tint dstBitmap = OS.GetCurrentObject(handle, OS.OBJ_BITMAP);", "+\t\tif (dstBitmap != 0) {", "+\t\t\tBITMAP dstBM = new BITMAP();", "+\t\t\tOS.GetObject(dstBitmap, BITMAP.sizeof, dstBM);", "+\t\t\tfixAlpha = dstBM.bmPlanes * dstBM.bmBitsPixel == 32;", "+\t\t}", "+\t\tint dstDib = 0, oldDstBitmap = 0, dstHdc = handle, dstX = destX, dstY = destY;", "+\t\tif (fixAlpha) {", "+\t\t\tdstDib = Image.createDIB(destWidth, destHeight, 24);", "+\t\t\tif (dstDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tdstHdc = OS.CreateCompatibleDC(handle);", "+\t\t\toldDstBitmap = OS.SelectObject(dstHdc, dstDib);", "+\t\t\tOS.BitBlt(dstHdc, 0, 0, destWidth, destHeight, handle, destX, destY, OS.SRCCOPY);", "+\t\t\tdstX = dstY = 0;", "+\t\t}", "-\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "+\t\t\tOS.AlphaBlend(dstHdc, dstX, dstY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "-\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "+\t\t\tOS.AlphaBlend(dstHdc, dstX, dstY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "+\t\tif (fixAlpha) {", "+\t\t\tOS.BitBlt(handle, destX, destY, destWidth, destHeight, dstHdc, 0, 0, OS.SRCCOPY);", "+\t\t\tOS.SelectObject(dstHdc, oldDstBitmap);", "+\t\t\tOS.DeleteDC(dstHdc);", "+\t\t\tOS.DeleteObject(dstDib);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "935a451fdf64bcc57211acb0d10db200", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "4631a5a5553c2a27a1c80b2611f4f0cea8081a20", "commitAfterChange": "21eb151f1a668a710645fe690cf473d0b86ddaf0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public Rectangle getBounds(int start, int end)", "signatureAfterChange": " public Rectangle getBounds(int start, int end)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "-\t\tcairo_rectangle_int_t rect = new cairo_rectangle_int_t();", "-\t\t/* ", "-\t\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "-\t\t* includes areas from lines outside of the requested range.  The fix", "-\t\t* is to subtract these areas from the clip region.", "-\t\t*/", "-\t\tPangoRectangle pangoRect = new PangoRectangle();", "-\t\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "-\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tlong /*int*/ linesRegion = Cairo.cairo_region_create ();", "-\t\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint lineEnd = 0;", "-\t\tdo {", "-\t\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "-\t\t\tif (OS.pango_layout_iter_next_line(iter)) {", "-\t\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "-\t\t\t} else {", "-\t\t\t\tlineEnd = strlen;", "-\t\t\t}", "-\t\t\tif (byteStart > lineEnd) continue;", "-\t\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "-\t\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "-\t\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "-\t\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "-\t\t\tCairo.cairo_region_union_rectangle (linesRegion, rect);", "-\t\t} while (lineEnd + 1 <= byteEnd);", "-\t\tCairo.cairo_region_intersect (clipRegion, linesRegion);", "-\t\tCairo.cairo_region_destroy (linesRegion);", "-\t\tOS.pango_layout_iter_free(iter);", "-\t\t", "-\t\tCairo.cairo_region_get_extents (clipRegion, rect);", "-\t\tCairo.cairo_region_destroy (clipRegion);", "-\t\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "-\t\t\trect.x = width() - rect.x - rect.width;", "+\tGdkRectangle rect = new GdkRectangle();", "+\t", "+\t/* ", "+\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "+\t* includes areas from lines outside of the requested range.  The fix", "+\t* is to subtract these areas from the clip region.", "+\t*/", "+\tPangoRectangle pangoRect = new PangoRectangle();", "+\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "+\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tlong /*int*/ linesRegion = OS.gdk_region_new();", "+\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint lineEnd = 0;", "+\tdo {", "+\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "+\t\tif (OS.pango_layout_iter_next_line(iter)) {", "+\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "+\t\t} else {", "+\t\t\tlineEnd = strlen;", "-\t\trect.x += Math.min (indent, wrapIndent);", "-\t\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);", "-\t} else {", "-\t\tGdkRectangle rect = new GdkRectangle();", "-\t\t/* ", "-\t\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "-\t\t* includes areas from lines outside of the requested range.  The fix", "-\t\t* is to subtract these areas from the clip region.", "-\t\t*/", "-\t\tPangoRectangle pangoRect = new PangoRectangle();", "-\t\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "-\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tlong /*int*/ linesRegion = OS.gdk_region_new ();", "-\t\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint lineEnd = 0;", "-\t\tdo {", "-\t\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "-\t\t\tif (OS.pango_layout_iter_next_line(iter)) {", "-\t\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "-\t\t\t} else {", "-\t\t\t\tlineEnd = strlen;", "-\t\t\t}", "-\t\t\tif (byteStart > lineEnd) continue;", "-\t\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "-\t\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "-\t\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "-\t\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "-\t\t\tOS.gdk_region_union_with_rect(linesRegion, rect);", "-\t\t} while (lineEnd + 1 <= byteEnd);", "-\t\tOS.gdk_region_intersect (clipRegion, linesRegion);", "-\t\tOS.gdk_region_destroy (linesRegion);", "-\t\tOS.pango_layout_iter_free(iter);", "-\t\t", "-\t\tOS.gdk_region_get_clipbox(clipRegion, rect);", "-\t\tOS.gdk_region_destroy (clipRegion);", "-\t\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "-\t\t\trect.x = width() - rect.x - rect.width;", "-\t\t}", "-\t\trect.x += Math.min (indent, wrapIndent);", "-\t\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);", "+\t\tif (byteStart > lineEnd) continue;", "+\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "+\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "+\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "+\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "+\t\tOS.gdk_region_union_with_rect(linesRegion, rect);", "+\t} while (lineEnd + 1 <= byteEnd);", "+\tOS.gdk_region_intersect(clipRegion, linesRegion);", "+\tOS.gdk_region_destroy(linesRegion);", "+\tOS.pango_layout_iter_free(iter);", "+\t", "+\tOS.gdk_region_get_clipbox(clipRegion, rect);", "+\tOS.gdk_region_destroy(clipRegion);", "+\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "+\t\trect.x = width() - rect.x - rect.width;", "-", "+\trect.x += Math.min (indent, wrapIndent);", "+\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "637bbb2801d125e0e14530bf15a2dd08", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f873a5e536bc324b9546bd9afbfa96c060b9f76e", "commitAfterChange": "c897ae21534e07170db934f50fc4eaad2e3589aa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public Rectangle getBounds ()", "signatureAfterChange": " public Rectangle getBounds ()", "diff": ["-\tint x = OS.GTK_WIDGET_X (topHandle);", "-\tint y = OS.GTK_WIDGET_Y (topHandle);", "-\tint width = OS.GTK_WIDGET_WIDTH (topHandle);", "-\tint height = OS.GTK_WIDGET_HEIGHT (topHandle);", "+\tint x, y, width, height;", "+\t/*", "+\t* Bug in GTK.  Toolbar items are only allocated their minimum size", "+\t* in versions before 2.4.0.  The fix is to use the total size", "+\t* available minus any borders.", "+\t*/", "+\tif (OS.GTK_VERSION < OS.VERSION (2, 4, 0) && control != null && !control.isDisposed ()) {", "+\t\tint border = OS.gtk_container_get_border_width (parent.handle);", "+\t\tbyte [] shadowType = Converter.wcsToMbcs (null, \"shadow_type\", true);", "+\t\tint [] shadow = new int [1];", "+\t\tOS.gtk_widget_style_get (parent.handle, shadowType, shadow, 0);", "+\t\tif (shadow [0] != OS.GTK_SHADOW_NONE) {", "+\t\t\tborder += OS.gtk_style_get_xthickness (OS.gtk_widget_get_style (parent.handle));", "+\t\t}", "+\t\tif ((parent.style & SWT.VERTICAL) != 0) {", "+\t\t\tx = border;", "+\t\t\ty = OS.GTK_WIDGET_Y (topHandle) + border;", "+\t\t\twidth = OS.GTK_WIDGET_WIDTH (parent.handle) - border*2;", "+\t\t\theight = OS.GTK_WIDGET_HEIGHT (topHandle);\t\t\t", "+\t\t} else {", "+\t\t\tx = OS.GTK_WIDGET_X (topHandle) + border;", "+\t\t\ty = border;", "+\t\t\twidth = OS.GTK_WIDGET_WIDTH (topHandle);", "+\t\t\theight = OS.GTK_WIDGET_HEIGHT (parent.handle) - border*2;", "+\t\t}", "+\t} else {", "+\t\tx = OS.GTK_WIDGET_X (topHandle);", "+\t\ty = OS.GTK_WIDGET_Y (topHandle);", "+\t\twidth = OS.GTK_WIDGET_WIDTH (topHandle);", "+\t\theight = OS.GTK_WIDGET_HEIGHT (topHandle);\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b6eaa04f65d518b0cbf0866250c0da4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d45e70aae9b240b33f4f8f69514d8f1f3dcf1e1c", "commitAfterChange": "8716a34c38d725dd2a224535ffcdffc8da22613c", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  int gtk_key_press_event (int widget, int event)", "signatureAfterChange": "  int gtk_key_press_event (int widget, int event)", "diff": ["-\t/* Stop menu mnemonics when the shell is disabled */", "-\t\treturn (state & DISABLED) != 0 ? 1 : 0;", "+\t\t/* Stop menu mnemonics when the shell is disabled */", "+\t\tif ((state & DISABLED) != 0) return 1;", "+\t\t", "+\t\tif (menuBar != null && !menuBar.isDisposed ()) {", "+\t\t\tControl focusControl = display.getFocusControl ();", "+\t\t\tif (focusControl != null && (focusControl.hooks (SWT.KeyDown) || focusControl.filters (SWT.KeyDown))) {", "+\t\t\t\tint /*long*/ [] accel = new int /*long*/ [1];", "+\t\t\t\tint /*long*/ setting = OS.gtk_settings_get_default ();", "+\t\t\t\tOS.g_object_get (setting, OS.gtk_menu_bar_accel, accel, 0);", "+\t\t\t\tif (accel [0] != 0) {", "+\t\t\t\t\tint [] keyval = new int [1];", "+\t\t\t\t\tint [] mods = new int [1];", "+\t\t\t\t\tOS.gtk_accelerator_parse (accel [0], keyval, mods);", "+\t\t\t\t\tOS.g_free (accel [0]);", "+\t\t\t\t\tif (keyval [0] != 0) {", "+\t\t\t\t\t\tGdkEventKey keyEvent = new GdkEventKey ();", "+\t\t\t\t\t\tOS.memmove (keyEvent, event, GdkEventKey.sizeof);", "+\t\t\t\t\t\tint mask = OS.gtk_accelerator_get_default_mod_mask ();", "+\t\t\t\t\t\tif (keyEvent.keyval == keyval [0] && (keyEvent.state & mask) == (mods [0] & mask)) {", "+\t\t\t\t\t\t\treturn focusControl.gtk_key_press_event (focusControl.focusHandle (), event);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aaac851cd2b22a5ed5b46624a92a0c2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "7f1555a570e0630345de4a3befbd9ab7828e99f7", "commitAfterChange": "d9938ffe936060d86e28a5c1d8df54b2cab1524f", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " void paint(GC gc, Point paintPosition, TableColumn column)", "signatureAfterChange": " void paint(GC gc, Point paintPosition, TableColumn column)", "diff": ["-", "+\tTable parent = getParent ();", "+\tint itemHeight = parent.getItemHeight ();", "+\t", "+\t}", "+\tColor background = gc.getBackground();", "+\tif (!isSelected() || ((parent.getStyle() & SWT.HIDE_SELECTION) != 0 && !parent.isFocusControl())) {", "+\t\tint width = column.getBounds().width;", "+\t\tint height = itemHeight;", "+\t\tgc.setBackground(getBackground(columnIndex));", "+\t\tgc.fillRectangle(paintPosition.x, paintPosition.y, width, height);", "+\t} else {", "+\t\tif (columnIndex == TableColumn.FIRST) {", "+\t\t\tint width = getImageIndentPixel();", "+\t\t\tint height = itemHeight;", "+\t\t\tgc.setBackground(getBackground (columnIndex));", "+\t\t\tgc.fillRectangle(paintPosition.x, paintPosition.y, width, height);", "+\t\t} else {", "+\t\t\tif ((parent.getStyle() & SWT.FULL_SELECTION) == 0) {", "+\t\t\t\tint width = column.getBounds ().width;", "+\t\t\t\tint height = itemHeight;", "+\t\t\t\tgc.setBackground(getBackground (columnIndex));", "+\t\t\t\tgc.fillRectangle(paintPosition.x, paintPosition.y, width, height);", "+\t\t\t}", "+\t\t}", "+\tgc.setBackground(background);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a49bb81ac3884c3be2e0a49c5a139d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "0350a8749caca9c8ccc77b03be7663653430f1b4", "commitAfterChange": "d582a24e628223c524dff89c036f22608917d014", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r int processPaint (int callData)", "signatureAfterChange": "\r int processPaint (int callData)", "diff": ["+\tint preMnemonicWidth = 0, mnemonicWidth = 0;\r", "-\t\tPoint textExtent = gc.textExtent (text);\r", "-\t\ttextWidth = textExtent.x;\r", "-\t\ttextHeight = textExtent.y;\r", "+\t\tif (mnemonicPos != -1) {\r", "+\t\t\tpreMnemonicWidth = gc.textExtent(text.substring(0, mnemonicPos)).x;\r", "+\t\t\tmnemonicWidth = gc.getAdvanceWidth(text.charAt(mnemonicPos));\r", "+\t\t\tint postMnemonicWidth = gc.textExtent(text.substring(mnemonicPos + 1)).x;\r", "+\t\t\ttextWidth = preMnemonicWidth + mnemonicWidth + postMnemonicWidth;\r", "+\t\t\ttextHeight = gc.textExtent(text).y;\r", "+\t\t} else {\r", "+\t\t\tPoint textExtent = gc.textExtent (text);\r", "+\t\t\ttextWidth = textExtent.x;\r", "+\t\t\ttextHeight = textExtent.y;\r", "+\t\t}\r", "-\tif (textWidth > 0) gc.drawText(text, textX, textY, false);\r", "+\tif (textWidth > 0) {\r", "+\t\tif (mnemonicPos != -1) {\r", "+\t\t\tint x = textX;\r", "+\t\t\tif (preMnemonicWidth > 0) {\r", "+\t\t\t\tgc.drawText(text.substring(0, mnemonicPos), x, textY, false);\r", "+\t\t\t\tx += preMnemonicWidth;\r", "+\t\t\t}\r", "+\t\t\tif (mnemonicWidth > 0) {\r", "+\t\t\t\tgc.drawText(text.substring(mnemonicPos, mnemonicPos + 1), x, textY, false);\r", "+\t\t\t\t// draw an underscore just like the one Motif uses\r", "+\t\t\t\tFontMetrics fontMetrics = gc.getFontMetrics();\r", "+\t\t\t\tint underlineY = textY + fontMetrics.getHeight();\r", "+\t\t\t\tgc.drawLine(x, underlineY, x + mnemonicWidth, underlineY);\r", "+\t\t\t\tx += mnemonicWidth;\r", "+\t\t\t}\r", "+\t\t\tif (mnemonicPos < text.length()) gc.drawText(text.substring(mnemonicPos + 1),\r", "+\t\t\t\tx, textY, false);\r", "+\t\t} else {\r", "+\t\t\tgc.drawText(text, textX, textY, false);\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01c68cb01cc0497c642281f59f356ca4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "1aa76e023bb4927eb3b7cf526018017f11838086", "commitAfterChange": "d2b23ce77d0de5b5edbb1b403be8a419f0aeb8a4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["+\t\tdrawUnderline = drawUnderline && (j + 1 == styles.length || !style.isAdherentUnderline(styles[j + 1].style)); ", "+\t\tdrawBorder = drawBorder && (j + 1 == styles.length || !style.isAdherentBorder(styles[j + 1].style)); ", "-\t\tint start = translateOffset(run.start);", "+\t\tif (rgn == 0) rgn = OS.NewRgn();", "-\t\t\tif (!(start > lineEnd || end < lineStart)) {", "-\t\t\t\tint highStart = Math.max(lineStart, start);", "-\t\t\t\tint highEnd = Math.min(lineEnd, end);", "-\t\t\t\tint highLen = highEnd - highStart + 1;", "-\t\t\t\tif (highLen > 0) {", "-\t\t\t\t\tif (rgn == 0) rgn = OS.NewRgn();", "-\t\t\t\t\tif (drawUnderline) {", "+\t\t\tif (drawUnderline) {", "+\t\t\t\tint start = run.start;", "+\t\t\t\tfor (int k = j; k > 0 && style.isAdherentUnderline(styles[k - 1].style); k--) {", "+\t\t\t\t\tstart = styles[k - 1].start;", "+\t\t\t\t}", "+\t\t\t\tstart = translateOffset(start);", "+\t\t\t\tif (!(start > lineEnd || end < lineStart)) {", "+\t\t\t\t\tint highStart = Math.max(lineStart, start);", "+\t\t\t\t\tint highEnd = Math.min(lineEnd, end);", "+\t\t\t\t\tint highLen = highEnd - highStart + 1;", "+\t\t\t\t\tif (highLen > 0) {", "-\t\t\t\t\tif (drawBorder) {", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (drawBorder) {", "+\t\t\t\tint start = run.start;", "+\t\t\t\tfor (int k = j; k > 0 && style.isAdherentBorder(styles[k - 1].style); k--) {", "+\t\t\t\t\tstart = styles[k - 1].start;", "+\t\t\t\t}", "+\t\t\t\tstart = translateOffset(start);", "+\t\t\t\tif (!(start > lineEnd || end < lineStart)) {", "+\t\t\t\t\tint highStart = Math.max(lineStart, start);", "+\t\t\t\t\tint highEnd = Math.min(lineEnd, end);", "+\t\t\t\t\tint highLen = highEnd - highStart + 1;", "+\t\t\t\t\tif (highLen > 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "215ea745de47507236ca309da9a7f540", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "6938a0dacfb030f7e7b03dc092215adacd9a08a9", "commitAfterChange": "2f091781ca405b743f12ec57a146bdda9d7d30d0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY)", "signatureAfterChange": "  void copyArea (Image image, int x, int y, int srcImage)", "diff": ["+", "+void copyArea (Image image, int x, int y, int /*long*/ srcImage) {", "+\tif (srcImage == 0) return;", "+\tNSBitmapImageRep rep = image.imageRep;", "+\tint /*long*/ bpc = rep.bitsPerSample();", "+\tint /*long*/ width = rep.pixelsWide();", "+\tint /*long*/ height = rep.pixelsHigh();", "+\tint /*long*/ bpr = rep.bytesPerRow();", "+\tint alphaInfo = rep.hasAlpha() ? OS.kCGImageAlphaFirst : OS.kCGImageAlphaNoneSkipFirst;", "+\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\tint /*long*/ context = OS.CGBitmapContextCreate(rep.bitmapData(), width, height, bpc, bpr, colorspace, alphaInfo);", "+\tOS.CGColorSpaceRelease(colorspace);", "+\tif (context != 0) {", "+\t \tCGRect rect = new CGRect();", "+\t \trect.origin.x = -x;", "+\t \trect.origin.y = y;", "+\t \trect.size.width = OS.CGImageGetWidth(srcImage);", "+\t\trect.size.height = OS.CGImageGetHeight(srcImage);", "+\t\tOS.CGContextTranslateCTM(context, 0, -(rect.size.height - height));", "+\t\tOS.CGContextDrawImage(context, rect, srcImage);", "+\t\tOS.CGContextRelease(context);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280e544de222983bc1ef7cbdbaa4bdb3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ExpandBar.java", "commitBeforeChange": "d5e012b1070396caffdf72fd112844991f566742", "commitAfterChange": "fa9fc8c2db1d4c3168296996b34f6fa0a6bb0145", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "  int gtk_key_press_event (int widget, int event)", "signatureAfterChange": "  int gtk_key_press_event (int widget, int event)", "diff": ["-\tif (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\tif (!hasFocus ()) return 0;", "+\t\tint /*long*/ result = super.gtk_key_press_event (widget, event);", "+\t\tif (result != 0) return result;", "+\t\tint index = 0;", "+\t\twhile (index < itemCount) {", "+\t\t\tif (items [index].hasFocus ()) break;", "+\t\t\tindex++;", "+\t\t}", "+\t\tGdkEventKey gdkEvent = new GdkEventKey ();", "+\t\tOS.memmove (gdkEvent, event, GdkEventKey.sizeof);", "+\t\tboolean next = false;", "+\t\tswitch (gdkEvent.keyval) {", "+\t\t\tcase OS.GDK_Up:", "+\t\t\tcase OS.GDK_Left: next = false; break;", "+\t\t\tcase OS.GDK_Down: ", "+\t\t\tcase OS.GDK_Right: next = true; break;", "+\t\t\tdefault: return result;", "+\t\t}", "+\t\tint start = index, offset = next ? 1 : -1;", "+\t\twhile ((index = (index + offset + itemCount) % itemCount) != start) {", "+\t\t\tExpandItem item = items [index];", "+\t\t\tif (item.setFocus ()) return result;", "+\t\t}", "+\t\treturn result;", "+\t} else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadc3a5432ddff8537d6a100cbbe8a18", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CBanner.java", "commitBeforeChange": "39d1ad0764cd845e3f67bc9896316fd5fef09a9a", "commitAfterChange": "1fb67f7beaf5e4a9683c7661a272dd0b3fab2e47", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Point computeSize(int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize(int wHint, int hHint, boolean changed)", "diff": ["+\tint height = hHint;", "+\tint width = wHint;", "+\tPoint bottomSize = new Point(0, 0);", "+\tif (bottom != null) {", "+\t\tPoint trim = bottom.computeSize(width, hHint);", "+\t\ttrim.x = trim.x - width;", "+\t\tbottomSize = bottom.computeSize(width == SWT.DEFAULT ? SWT.DEFAULT : width - trim.x, SWT.DEFAULT);", "+\t\tif (height != SWT.DEFAULT) {", "+\t\t\tbottomSize.y = Math.min(bottomSize.y, height);", "+\t\t\theight -= bottomSize.y + BORDER_TOP + BORDER_STRIPE + BORDER_BOTTOM;", "+\t\t}", "+\t}", "+\tif (curve == null) {", "+\t\tif (height == SWT.DEFAULT) {", "+\t\t\tif (left != null) {", "+\t\t\t\tPoint s = left.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\t\t\tupdateCurve(s.y + BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tupdateCurve(height);", "+\t\t}", "+\t} else {", "+\t\tupdateCurve(getSize().y);", "+\t}", "+\tif (height != SWT.DEFAULT && left != null && right != null) {", "+\t\theight -= BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "+\t}", "-\t\tPoint trim = right.computeSize(rightWidth, hHint);", "+\t\tPoint trim = right.computeSize(rightWidth, height);", "-\t\trightSize = right.computeSize(rightWidth == SWT.DEFAULT ? SWT.DEFAULT : rightWidth - trim.x, hHint);", "+\t\trightSize = right.computeSize(rightWidth == SWT.DEFAULT ? SWT.DEFAULT : rightWidth - trim.x, height);", "+\t\tif (width != SWT.DEFAULT) {", "+\t\t\trightSize.x = Math.min(rightSize.x, width);", "+\t\t\twidth = Math.max(CURVE_TAIL, width - rightSize.x - curveWidth + 2* curveIndent);", "+\t\t}", "-\tint width = (wHint == SWT.DEFAULT) ? SWT.DEFAULT : (right == null ? wHint : wHint - rightSize.x - curveWidth + 2* curveIndent);", "-\tif (left != null) {", "-\t\tPoint trim = left.computeSize(width, hHint);", "+\tif (left != null && (width == SWT.DEFAULT || width > 0)) {", "+\t\tPoint trim = left.computeSize(width, height);", "-\t\tleftSize = left.computeSize(width == SWT.DEFAULT ? SWT.DEFAULT : width - trim.x, hHint);", "+\t\tleftSize = left.computeSize(width == SWT.DEFAULT ? SWT.DEFAULT : width - trim.x, height);", "-\tif (left != null && right != null) size.x += curveWidth - 2*curveIndent;", "+\tif (left != null && right!= null) size.x += curveWidth - 2*curveIndent;", "-\tsize.y = left != null ? leftSize.y : rightSize.y;", "-\t", "-\tsize.x += (left == null || right == null) ? 0 : BORDER_LEFT + BORDER_RIGHT;", "-\tsize.y += (left == null || right == null) ? 0 : BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "+\tsize.y = leftSize.y > 0 ? leftSize.y : rightSize.y;", "+\tif (left != null && right!= null) size.y +=  BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "+\tsize.y += bottomSize.y;", "+\tif (bottom != null && (left != null || right != null)) size.y += BORDER_TOP + BORDER_BOTTOM + BORDER_STRIPE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14da9affa05679b1083d25d3d452c646", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "d36a760e6b66fcc16fa6686b7aca002e4f64430e", "commitAfterChange": "d6d065ae0f40b44bdee462fcdf2077b4fae1a0c6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["+\t\t/*", "+\t\t * Feature in Carbon: Separator control decides how to orient itself", "+\t\t * based on the width and height. If height >= width it orients", "+\t\t * vertically, else it orients horizontally. ", "+\t\t * Fix is to have two native controls to implement the separator label.", "+\t\t * The top control (userPaneControl) honors the bounds set by the", "+\t\t * user and the inner one (separatorControl) creates the separator", "+\t\t * with the correct orientation.", "+\t\t */", "+\t\tint features = OS.kControlSupportsEmbedding;", "+\t\tOS.CreateUserPaneControl (window, null, features, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\toutControl[0] = 0;", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tint separatorHandle = outControl [0];", "+\t\tOS.HIViewAddSubview (handle, separatorHandle);", "+\t\tCGRect r = new CGRect();", "+\t\tr.width = DEFAULT_WIDTH;", "+\t\tr.height = DEFAULT_HEIGHT;", "+\t\tOS.HIViewSetFrame (handle, r);", "+\t\tHILayoutInfo layout = new HILayoutInfo ();", "+\t\tlayout.version = 0;", "+\t\tOS.HIViewGetLayoutInfo (separatorHandle, layout);", "+\t\tif ((style & SWT.HORIZONTAL) != 0) {", "+\t\t\tr.height = 3;", "+\t\t\tlayout.scale.x.ratio = 1.0f;", "+\t\t\tlayout.position.y.kind = OS.kHILayoutPositionCenter;", "+\t\t} else {", "+\t\t\tr.width = 3;", "+\t\t\tlayout.position.x.kind = OS.kHILayoutPositionCenter;", "+\t\t\tlayout.scale.y.ratio = 1.0f;", "+\t\t}", "+\t\tOS.HIViewSetFrame (separatorHandle, r);", "+\t\tOS.HIViewSetLayoutInfo (separatorHandle, layout);", "-\t}", "-\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\thandle = outControl [0];", "-\tif ((style & SWT.WRAP) == 0) {", "-\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlStaticTextIsMultilineTag, 1, new byte[] {0});", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tif ((style & SWT.WRAP) == 0) {", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlStaticTextIsMultilineTag, 1, new byte[] {0});", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "176539716336b368ead889d8246d7eac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "ba7d3c1603f83717cc117d906abd89fbdc6cbcad", "commitAfterChange": "88b1980b49ba43d5eee81389585137edf0f1f8c0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void _setVisible (boolean visible)", "signatureAfterChange": "  public void _setVisible (boolean visible)", "diff": ["+\t", "+\tint h= OS.GetMenuHeight(handle);", "+\tif (h != -1) {", "+\t\tint gdevice = OS.DMGetFirstScreenDevice(true);", "+\t\twhile (gdevice != 0) {", "+\t\t\tint[] ptr = new int[1];", "+\t\t\tOS.memcpy(ptr, gdevice, 4);", "+\t\t\tGDevice device = new GDevice();", "+\t\t\tOS.memcpy(device, ptr[0], GDevice.sizeof);", "+\t\t\tRect rect = new Rect();", "+\t\t\tOS.GetPixBounds(device.gdPMap, rect);", "+\t\t\tRectangle r= new Rectangle(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);", "+\t\t\tif (r.contains(left, top)) {", "+\t\t\t\tint s= top+h+10 - r.height;\t// 10 keeps a margin between menu and screen border", "+\t\t\t\tif (s > 0) top -= s;", "+\t\t\t}", "+\t\t\tgdevice = OS.DMGetNextScreenDevice(gdevice, true);", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ab8499c2ae3871e000905acd1988ffa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "67757731da579a59654098483d6139401cbf836d", "commitAfterChange": "4262af9d6f5eb3a66abd44c53d24cb9c1331cdcb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void _setVisible (boolean visible)", "signatureAfterChange": "  public void _setVisible (boolean visible)", "diff": ["-\tint index = defaultItem != null ? indexOf (defaultItem) + 1 : lastIndex;", "-\t", "-\tint h= OS.GetMenuHeight(handle);", "-\tif (h != -1) {", "-\t\tint gdevice = OS.DMGetFirstScreenDevice(true);", "-\t\twhile (gdevice != 0) {", "-\t\t\tint[] ptr = new int[1];", "-\t\t\tOS.memcpy(ptr, gdevice, 4);", "-\t\t\tGDevice device = new GDevice();", "-\t\t\tOS.memcpy(device, ptr[0], GDevice.sizeof);", "-\t\t\tRect rect = new Rect();", "-\t\t\tOS.GetPixBounds(device.gdPMap, rect);", "-\t\t\tRectangle r= new Rectangle(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);", "-\t\t\tif (r.contains(left, top)) {", "-\t\t\t\tint s= top+h+10 - r.height;\t// 10 keeps a margin between menu and screen border", "-\t\t\t\tif (s > 0) top -= s;", "-\t\t\t}", "-\t\t\tgdevice = OS.DMGetNextScreenDevice(gdevice, true);", "-\t\t}", "-\t}", "-\t", "-\tint result = OS.PopUpMenuSelect (handle, (short)top, (short)left, (short)(index));", "-\tlastIndex = OS.LoWord (result);", "+\tOS.PopUpMenuSelect (handle, (short)top, (short)left, (short)-1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b69526daf34509a44df40439da128d80", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "865e3942831d3760ee7191d48e9ab4f68e79460e", "commitAfterChange": "aad8ecbff6b21f1c3be77176ac706b610032dcc6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public int getOffset(int x, int y, int[] trailing)", "signatureAfterChange": " public int getOffset(int x, int y, int[] trailing)", "diff": ["+\t", "+\t/*", "+\t* Feature in GTK.  pango_layout_xy_to_index() returns the ", "+\t* logical end/start offset of a line when the coordinates are outside ", "+\t* the line bounds. In SWT the correct behavior is to return the closest ", "+\t* visual offset. The fix is to clamp the coordinates inside the  ", "+\t* line bounds.", "+\t*/", "+\tint /*long*/ iter = OS.pango_layout_get_iter(layout);", "+\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tPangoRectangle rect = new PangoRectangle();", "+\tdo {", "+\t\tOS.pango_layout_iter_get_line_extents(iter, null, rect);", "+\t\trect.y = OS.PANGO_PIXELS(rect.y);", "+\t\trect.height = OS.PANGO_PIXELS(rect.height);", "+\t\tif (rect.y <= y && y < rect.y + rect.height) {", "+\t\t\trect.x = OS.PANGO_PIXELS(rect.x);", "+\t\t\trect.width = OS.PANGO_PIXELS(rect.width);", "+\t\t\tif (x >= rect.x + rect.width) x = rect.x + rect.width - 1;", "+\t\t\tif (x < rect.x) x = rect.x;", "+\t\t\tbreak;", "+\t\t}", "+\t} while (OS.pango_layout_iter_next_line(iter));", "+\tOS.pango_layout_iter_free(iter);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01f85d32edbe14fd557b6f5e013f1122", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "df55805e4a74ab0fc8f545a1792d755c95a4e419", "commitAfterChange": "b178ded274cefa13fff8fc6fb8115ee14a844dc8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public Rectangle getBounds(int start, int end)", "signatureAfterChange": " public Rectangle getBounds(int start, int end)", "diff": ["-\tGdkRectangle rect = new GdkRectangle();", "-\t", "-\t/* ", "-\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "-\t* includes areas from lines outside of the requested range.  The fix", "-\t* is to subtract these areas from the clip region.", "-\t*/", "-\tPangoRectangle pangoRect = new PangoRectangle();", "-\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "-\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tlong /*int*/ linesRegion = OS.gdk_region_new();", "-\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint lineEnd = 0;", "-\tdo {", "-\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "-\t\tif (OS.pango_layout_iter_next_line(iter)) {", "-\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "-\t\t} else {", "-\t\t\tlineEnd = strlen;", "+\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "+\t\tcairo_rectangle_int_t rect = new cairo_rectangle_int_t();", "+\t\t/* ", "+\t\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "+\t\t* includes areas from lines outside of the requested range.  The fix", "+\t\t* is to subtract these areas from the clip region.", "+\t\t*/", "+\t\tPangoRectangle pangoRect = new PangoRectangle();", "+\t\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "+\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tlong /*int*/ linesRegion = Cairo.cairo_region_create ();", "+\t\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint lineEnd = 0;", "+\t\tdo {", "+\t\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "+\t\t\tif (OS.pango_layout_iter_next_line(iter)) {", "+\t\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "+\t\t\t} else {", "+\t\t\t\tlineEnd = strlen;", "+\t\t\t}", "+\t\t\tif (byteStart > lineEnd) continue;", "+\t\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "+\t\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "+\t\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "+\t\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "+\t\t\tCairo.cairo_region_union_rectangle (linesRegion, rect);", "+\t\t} while (lineEnd + 1 <= byteEnd);", "+\t\tCairo.cairo_region_intersect (clipRegion, linesRegion);", "+\t\tCairo.cairo_region_destroy (linesRegion);", "+\t\tOS.pango_layout_iter_free(iter);", "+\t\t", "+\t\tCairo.cairo_region_get_extents (clipRegion, rect);", "+\t\tCairo.cairo_region_destroy (clipRegion);", "+\t\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "+\t\t\trect.x = width() - rect.x - rect.width;", "-\t\tif (byteStart > lineEnd) continue;", "-\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "-\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "-\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "-\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "-\t\tOS.gdk_region_union_with_rect(linesRegion, rect);", "-\t} while (lineEnd + 1 <= byteEnd);", "-\tOS.gdk_region_intersect(clipRegion, linesRegion);", "-\tOS.gdk_region_destroy(linesRegion);", "-\tOS.pango_layout_iter_free(iter);", "-\t", "-\tOS.gdk_region_get_clipbox(clipRegion, rect);", "-\tOS.gdk_region_destroy(clipRegion);", "-\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "-\t\trect.x = width() - rect.x - rect.width;", "+\t\trect.x += Math.min (indent, wrapIndent);", "+\t\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);", "+\t} else {", "+\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t/* ", "+\t\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "+\t\t* includes areas from lines outside of the requested range.  The fix", "+\t\t* is to subtract these areas from the clip region.", "+\t\t*/", "+\t\tPangoRectangle pangoRect = new PangoRectangle();", "+\t\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "+\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tlong /*int*/ linesRegion = OS.gdk_region_new ();", "+\t\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint lineEnd = 0;", "+\t\tdo {", "+\t\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "+\t\t\tif (OS.pango_layout_iter_next_line(iter)) {", "+\t\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "+\t\t\t} else {", "+\t\t\t\tlineEnd = strlen;", "+\t\t\t}", "+\t\t\tif (byteStart > lineEnd) continue;", "+\t\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "+\t\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "+\t\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "+\t\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "+\t\t\tOS.gdk_region_union_with_rect(linesRegion, rect);", "+\t\t} while (lineEnd + 1 <= byteEnd);", "+\t\tOS.gdk_region_intersect (clipRegion, linesRegion);", "+\t\tOS.gdk_region_destroy (linesRegion);", "+\t\tOS.pango_layout_iter_free(iter);", "+\t\t", "+\t\tOS.gdk_region_get_clipbox(clipRegion, rect);", "+\t\tOS.gdk_region_destroy (clipRegion);", "+\t\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "+\t\t\trect.x = width() - rect.x - rect.width;", "+\t\t}", "+\t\trect.x += Math.min (indent, wrapIndent);", "+\t\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);", "-\trect.x += Math.min (indent, wrapIndent);", "-\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9697d9c92940544b05a8ed04f871d587", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/motif/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "e98339cc7fb1c72d59ae0703dfdb477f6c4de9c5", "commitAfterChange": "697358ce3235fa7c9f7df6b81c2eaac5ddca47d9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r protected void init()", "signatureAfterChange": "  protected void init()", "diff": ["-\r", "-protected void init() {\r", "-\tsuper.init();\r", "-\t\r", "-\t/* Create the printContext for the printer */\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte[] name = Converter.wcsToMbcs(null, data.name, true);\r", "-\tprintContext = OS.XpCreateContext(xDisplay, name);\r", "-\tif (printContext == OS.None) {\r", "-\t\t/* can't create print context */\r", "-\t\t//OS.XCloseDisplay(xDisplay);\r", "-\t\tSWT.error(SWT.ERROR_NO_HANDLES);\r", "-\t}\r", "-\r", "-\t/* Set the printContext into the display */\r", "-\tOS.XpSetContext(xDisplay, printContext); \r", "-\r", "-\t/* Get the printer's screen */\r", "-\txScreen = OS.XpGetScreenOfContext(xDisplay, printContext);\r", "-\t\r", "-\t/* Initialize Motif */\r", "-\tint widgetClass = OS.TopLevelShellWidgetClass();\r", "-\tint shellHandle = OS.XtAppCreateShell(null, null, widgetClass, xDisplay, null, 0);\r", "-\tOS.XtDestroyWidget(shellHandle);\r", "-\t\r", "-\t/* Initialize the default font */\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte [] buffer = Converter.wcsToMbcs(null, \"-*-courier-medium-r-*-*-*-120-*-*-*-*-*-*\", true);\r", "-\tint fontListEntry = OS.XmFontListEntryLoad(xDisplay, buffer, OS.XmFONT_IS_FONTSET, OS.XmFONTLIST_DEFAULT_TAG);\r", "-\tif (fontListEntry == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "-\tint defaultFontList = OS.XmFontListAppendEntry(0, fontListEntry);\r", "-\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "-\tdefaultFont = Font.motif_new(this, defaultFontList);\r", "-}\r", "+", "+protected void init() {", "+\tsuper.init();", "+\t", "+\t/* Use the character encoding for the default locale */", "+\tbyte[] buffer = Converter.wcsToMbcs(null, data.name, true);", "+", "+\t/*", "+\t * Bug in Xp. If the printer name is not valid, Xp will", "+\t * cause a segmentation fault. The fix is to check if the", "+\t * printer name is valid before calling XpCreateContext().\r\t */", "+\tint[] count = new int[1];", "+\tint plist = OS.XpGetPrinterList(xDisplay, buffer, count);", "+\tif (plist != 0) OS.XpFreePrinterList(plist);", "+\tif (count[0] == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+", "+\t/* Create the printContext for the printer */", "+\tprintContext = OS.XpCreateContext(xDisplay, buffer);", "+", "+\t/* Set the printContext into the display */", "+\tOS.XpSetContext(xDisplay, printContext);", "+", "+\t/* Get the printer's screen */", "+\txScreen = OS.XpGetScreenOfContext(xDisplay, printContext);", "+\tif (xScreen == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+", "+\t/* Initialize the xDrawable */", "+\tXRectangle rect = new XRectangle();", "+\tshort[] width = new short[1];", "+\tshort[] height = new short[1];", "+\tOS.XpGetPageDimensions(xDisplay, printContext, width, height, rect);", "+\txDrawable = OS.XCreateWindow(xDisplay, OS.XRootWindowOfScreen(xScreen), ", "+\t\t0, 0, rect.width, rect.height, 0,", "+\t\tOS.CopyFromParent, OS.CopyFromParent, OS.CopyFromParent, 0, 0);", "+\tif (xDrawable == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+", "+\t/* Initialize the default font */", "+\t/* Use the character encoding for the default locale */", "+\tPoint dpi = getDPI();", "+\tbuffer = Converter.wcsToMbcs(null, \"-*-courier-medium-r-*-*-*-120-\"+dpi.x+\"-\"+dpi.y+\"-*-*-iso8859-1\", true);", "+\tint fontListEntry = OS.XmFontListEntryLoad(xDisplay, buffer, OS.XmFONT_IS_FONTSET, OS.XmFONTLIST_DEFAULT_TAG);", "+\tif (fontListEntry == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint defaultFontList = OS.XmFontListAppendEntry(0, fontListEntry);", "+\tOS.XmFontListEntryFree(new int[]{fontListEntry});", "+\tdefaultFont = Font.motif_new(this, defaultFontList);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3395f4bb6cf71663d3292f43a9d4427e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "ae8649cbc5451548c97f158ddd1902c665a55911", "commitAfterChange": "e934566bfa3f9a03488420628fca653fd296f4f2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public Rectangle getBounds(int start, int end)", "signatureAfterChange": " public Rectangle getBounds(int start, int end)", "diff": ["+\t", "+\t/* ", "+\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "+\t* includes areas from lines outside of the requested range.  The fix", "+\t* is to subtract these areas from the clip region.", "+\t*/", "+\tPangoRectangle pangoRect = new PangoRectangle();", "+\tint /*long*/ iter = OS.pango_layout_get_iter(layout);", "+\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint /*long*/ linesRegion = OS.gdk_region_new();", "+\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint lineStart = 0, lineEnd = 0;", "+\tdo {", "+\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "+\t\tif (OS.pango_layout_iter_next_line(iter)) {", "+\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "+\t\t} else {", "+\t\t\tlineEnd = OS.strlen(ptr);", "+\t\t}", "+\t\tif (lineStart <= byteStart || byteEnd <= lineEnd) {", "+\t\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "+\t\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "+\t\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "+\t\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "+\t\t\tOS.gdk_region_union_with_rect(linesRegion, rect);", "+\t\t}", "+\t\tlineStart = lineEnd + 1;", "+\t} while (lineStart <= byteEnd);", "+\tOS.gdk_region_intersect(clipRegion, linesRegion);", "+\tOS.gdk_region_destroy(linesRegion);", "+\tOS.pango_layout_iter_free(iter);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a9492f13e28b5862a91637570b72cfb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  Rectangle getControlBounds (int control)", "signatureAfterChange": "  Rectangle getControlBounds (int control)", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tCGRect rect = new CGRect ();", "-\t\tOS.HIViewGetFrame (control, rect);", "-\t\tRect inset = getInset ();", "-\t\trect.x -= inset.left;", "-\t\trect.y -= inset.top;", "-\t\trect.width += inset.right + inset.left;", "-\t\trect.height += inset.bottom + inset.top;", "-\t\treturn new Rectangle ((int) rect.x, (int) rect.y, (int) rect.width, (int) rect.height);", "-\t}", "-\tRect rect = new Rect();", "-\tOS.GetControlBounds (control, rect);", "-\tint window = OS.GetControlOwner (control);", "-\tint [] theRoot = new int [1];", "-\tOS.GetRootControl (window, theRoot);", "-\tint [] parentHandle = new int [1];", "-\tOS.GetSuperControl (control, parentHandle);", "-\tif (parentHandle [0] != theRoot [0]) {", "-\t\tRect parentRect = new Rect ();", "-\t\tOS.GetControlBounds (parentHandle [0], parentRect);", "-\t\tOS.OffsetRect (rect, (short) -parentRect.left, (short) -parentRect.top);", "-\t}", "+\tCGRect rect = new CGRect ();", "+\tOS.HIViewGetFrame (control, rect);", "-\trect.left -= inset.left;", "-\trect.top -= inset.top;", "-\trect.right += inset.right;", "-\trect.bottom += inset.bottom;", "-\treturn new Rectangle (rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);", "+\trect.x -= inset.left;", "+\trect.y -= inset.top;", "+\trect.width += inset.right + inset.left;", "+\trect.height += inset.bottom + inset.top;", "+\treturn new Rectangle ((int) rect.x, (int) rect.y, (int) rect.width, (int) rect.height);"]}], "num": 37901}
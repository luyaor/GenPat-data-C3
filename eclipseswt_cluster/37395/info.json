{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70575f93efc395dd4513b49877f93def", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7960ec3df3e7e48dec19a368e1a36a63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "700158fe8e0350083c086442d3424d75c20d24f8", "commitAfterChange": "4e0cd356e137aaad275040edad6525ab3a882b3d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void drawText (String string, int x, int y, int flags)", "signatureAfterChange": " public void drawText (String string, int x, int y, int flags)", "diff": ["-\tstring.getChars (0, length, buffer, 0);", "-\tif ((flags & (SWT.DRAW_DELIMITER | SWT.DRAW_TAB)) != (SWT.DRAW_DELIMITER | SWT.DRAW_TAB)) {", "+\tstring.getChars(0, length, buffer, 0);", "+\tint mask = SWT.DRAW_DELIMITER | SWT.DRAW_TAB | SWT.DRAW_MNEMONIC;", "+\tint mnemonic = -1;", "+\tif ((flags & mask) != mask) {", "+\t\t\t\tcase '&': {", "+\t\t\t\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0) {", "+\t\t\t\t\t\tif (i + 1 < length) {", "+\t\t\t\t\t\t\tif (buffer[i + 1] == '&') {", "+\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (mnemonic == -1) mnemonic = j;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\tif (mnemonic != -1) {", "+\t\tint underline = OS.TextDecorations_Underline();", "+\t\tint decorations = OS.gcnew_TextDecorationCollection(1);", "+\t\tOS.TextDecorationCollection_Add(decorations, underline);", "+\t\tOS.FormattedText_SetTextDecorations(text, decorations, mnemonic, 1);", "+\t\tOS.GCHandle_Free(decorations);", "+\t\tOS.GCHandle_Free(underline);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6bf96f955e4cab0b6d0cb6b633508cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "4def951fc85e643080de398e85c25cb30ec79f91", "commitAfterChange": "ea10febb5ae3b0d1b19a13c89b6c7b27ab367f3a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 39, "signatureBeforeChange": "  int processIMEFocusIn ()", "signatureAfterChange": "  int gtk_delete_text (int widget, int start_pos, int end_pos)", "diff": ["+", "+int gtk_delete_text (int widget, int start_pos, int end_pos) {", "+\tif (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;", "+\tint address = OS.gtk_editable_get_chars (handle, start_pos, end_pos);", "+\tint length = OS.strlen (address);", "+\tbyte [] buffer = new byte [length];", "+\tOS.memmove (buffer, address, length);", "+\tOS.g_free (address);", "+\tString oldText = new String (Converter.mbcsToWcs (null, buffer));", "+\tString newText = verifyText (oldText, start_pos, end_pos);", "+\tif (newText == null) {", "+\t\tOS.g_signal_stop_emission_by_name (handle, OS.delete_text);", "+\t}", "+\treturn 0;", "+}", "-", "-int processIMEFocusIn () {", "-\treturn 0;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81511e4359bbc61d72a71c9d0940fb56", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "5f7fc100f82598ce1ed575675abf56bc3c557d75", "commitAfterChange": "1c367491fe3c07b43ec99c54628c7b133b5c058f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " String computeResultChooserDialog ()", "signatureAfterChange": " String computeResultChooserDialog ()", "diff": ["+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tint /*long*/ filter = OS.gtk_file_chooser_get_filter (handle);", "+\tif (filter != 0) {", "+\t\tint /*long*/ filterNamePtr = OS.gtk_file_filter_get_name (filter);", "+\t\tif (filterNamePtr != 0) {", "+\t\t\tint length = OS.strlen (filterNamePtr);", "+\t\t\tbyte[] buffer = new byte [length];", "+\t\t\tOS.memmove (buffer, filterNamePtr, length);", "+\t\t\t//OS.g_free (filterNamePtr); //GTK owns this pointer - do not free", "+\t\t\tString filterName = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\tfor (int i = 0; i < filterExtensions.length; i++) {", "+\t\t\t\tif (filterNames.length > 0) {", "+\t\t\t\t\tif (filterNames[i].equals(filterName)) {", "+\t\t\t\t\t\tfilterIndex = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (filterExtensions[i].equals(filterName)) {", "+\t\t\t\t\t\tfilterIndex = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "565de108b06af2c64794fc05e4c71166", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/photon/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "467319881c21a608a89b36f420121b1ced80df68", "commitAfterChange": "2c7d380be2e321a7928b1ce1264ec8b852b6e69d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tDND.error(org.eclipse.swt.SWT.ERROR_NOT_IMPLEMENTED);\r", "-\treturn null;\r", "+\tif (transferData.pData == 0 || !(isSupportedType(transferData))) return null;\r", "+\tint size = transferData.length;\r", "+\tif (size == 0) return null;\r", "+\tbyte[] buffer = new byte[size];\r", "+\tOS.memmove(buffer, transferData.pData, size);\r", "+\tString[] filenames = new String[0];\r", "+\tint lastMark = 0;\r", "+\tfor (int i = 0; i < buffer.length; i++) {\r", "+\t\tif ( buffer[i] == 0 ) {\r", "+\t\t\tString s = new String(buffer, lastMark, i - lastMark );\r", "+\t\t\tString[] temp = filenames;\r", "+\t\t\tfilenames = new String[ filenames.length + 1];\r", "+\t\t\tSystem.arraycopy(temp, 0, filenames, 0 , temp.length);\t\t\r", "+\t\t\tfilenames[ filenames.length - 1] = s;\r", "+\t\t\tlastMark = i + 1;\r", "+\t\t}\r", "+\t}\r", "+\treturn filenames;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d30e7dd024e23f8bc54b3b6441492645", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/photon/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "467319881c21a608a89b36f420121b1ced80df68", "commitAfterChange": "2c7d380be2e321a7928b1ce1264ec8b852b6e69d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-\tDND.error(org.eclipse.swt.SWT.ERROR_NOT_IMPLEMENTED);\r", "+\tif (object == null || !(object instanceof String[])) return;\r", "+\tbyte [] data = new byte[0];\r", "+\tString[] filenames = (String[])object;\r", "+\tfor (int i = 0; i < filenames.length; i++) {\r", "+\t\tbyte [] buffer = Converter.wcsToMbcs (null, filenames[i], true);\t\t\r", "+\t\tbyte [] temp = data;\r", "+\t\tdata = new byte[ data.length + buffer.length];\r", "+\t\tSystem.arraycopy(temp, 0, data, 0, temp.length);\r", "+\t\tSystem.arraycopy(buffer, 0, data, data.length - buffer.length, buffer.length);\r", "+\t}\r", "+\tsuper.javaToNative(data, transferData);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c7ca9f3992343663a953b8ca258e3b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/URLTransfer.java", "commitBeforeChange": "10cff956b5a7baa336ed7e4f79deb8729cdad298", "commitAfterChange": "4a54739762437bd8066c9b7d36c4c3d14493b18a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\t\tint /*long*/ lpMultiByteStr = OS.GlobalLock(hMem);", "-\t\tif (lpMultiByteStr == 0) return null;", "-\t\ttry {", "-\t\t\tint codePage = OS.GetACP();", "-\t\t\tint cchWideChar  = OS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, null, 0);", "-\t\t\tif (cchWideChar == 0) return null;", "-\t\t\tchar[] lpWideCharStr = new char [cchWideChar - 1];", "-\t\t\tOS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, lpWideCharStr, lpWideCharStr.length);", "-\t\t\treturn new String(lpWideCharStr);", "-\t\t} finally {", "-\t\t\tOS.GlobalUnlock(hMem);", "+\t\tif (transferData.type == CFSTR_INETURLIDW) {", "+\t\t\t/* Ensure byteCount is a multiple of 2 bytes */", "+\t\t\tint size = OS.GlobalSize(hMem) / 2 * 2;", "+\t\t\tif (size == 0) return null;", "+\t\t\tchar[] chars = new char[size/2];", "+\t\t\tint /*long*/ ptr = OS.GlobalLock(hMem);", "+\t\t\tif (ptr == 0) return null;", "+\t\t\ttry {", "+\t\t\t\tOS.MoveMemory(chars, ptr, size);", "+\t\t\t\tint length = chars.length;", "+\t\t\t\tfor (int i=0; i<chars.length; i++) {", "+\t\t\t\t\tif (chars [i] == '\\0') {", "+\t\t\t\t\t\tlength = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn new String (chars, 0, length);", "+\t\t\t} finally {", "+\t\t\t\tOS.GlobalUnlock(hMem);\t", "+\t\t\t}", "+\t\t} else if (transferData.type == CFSTR_INETURLID) {", "+\t\t\tint /*long*/ lpMultiByteStr = OS.GlobalLock(hMem);", "+\t\t\tif (lpMultiByteStr == 0) return null;", "+\t\t\ttry {", "+\t\t\t\tint codePage = OS.GetACP();", "+\t\t\t\tint cchWideChar  = OS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, null, 0);", "+\t\t\t\tif (cchWideChar == 0) return null;", "+\t\t\t\tchar[] lpWideCharStr = new char [cchWideChar - 1];", "+\t\t\t\tOS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, lpWideCharStr, lpWideCharStr.length);", "+\t\t\t\treturn new String(lpWideCharStr);", "+\t\t\t} finally {", "+\t\t\t\tOS.GlobalUnlock(hMem);", "+\t\t\t}", "+\treturn null;"]}], "num": 37395}
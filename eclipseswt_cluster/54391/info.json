{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dfeb04afd153618cebd33b994debdbb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be543d38cdeb3d138f6ce83c21defc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "fed4205390d77d67634f4426603c1b383a253b4a", "commitAfterChange": "faa54912c0b36b95d21ae957250c86964658e63d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["+\tdraw(gc, x, y, selectionStart, selectionEnd, selectionForeground, selectionBackground, 0);", "+}", "-\tif (length == 0) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a35f825e5097c7a8521899402eb84c1e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/DisplayRenderer.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected StyleRange[] mergeSelectionLineStyles(StyleRange[] styles)", "signatureAfterChange": " protected Color getSelectionForeground()", "diff": ["+}", "+protected Color getSelectionForeground() {", "+\treturn parent.getSelectionForeground();", "-*/", "-protected StyleRange[] mergeSelectionLineStyles(StyleRange[] styles) {", "-\tPoint selection = parent.internalGetSelection();\t", "-\tint selectionStart = selection.x;", "-\tint selectionEnd = selection.y;", "-\tVector newStyles = new Vector(styles.length);\t", "-\tStyleRange selectionStyle = null;", "-\tColor foreground = parent.getSelectionForeground();", "-\tColor background = parent.getSelectionBackground();", "-", "-\t// potential optimization: ignore styles if there is no bold style and the entire line is selected", "-\tfor (int i = 0; i < styles.length; i++) {", "-\t\tStyleRange style = styles[i];", "-\t\tint styleEnd = style.start + style.length;", "-\t\t", "-\t\tif (styleEnd <= selectionStart) {", "-\t\t\tnewStyles.addElement(style);", "-\t\t}", "-\t\telse // style overlaps selection start? (i.e., starts before selection start, ends after selection start", "-\t\tif (style.start < selectionStart && styleEnd > selectionStart) {", "-\t\t\tStyleRange newStyle = (StyleRange) style.clone();", "-\t\t\tnewStyle.length -= styleEnd - selectionStart;", "-\t\t\tnewStyles.addElement(newStyle);", "-\t\t\t// create new selection style with same font style starting at selection start ending at style end", "-\t\t\tselectionStyle = new StyleRange(selectionStart, styleEnd - selectionStart, foreground, background, newStyle.fontStyle);", "-\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t// if style extends beyond selection a new style is returned for the unselected part of the style", "-\t\t\tnewStyle = setSelectionStyleEnd(selectionStyle, style);", "-\t\t\tif (newStyle != null) {", "-\t\t\t\tnewStyles.addElement(newStyle);\t\t\t\t\t", "-\t\t\t}\t\t\t\t", "-\t\t}", "-\t\telse // style starts within selection?", "-\t\tif (style.start >= selectionStart && style.start < selectionEnd) {", "-\t\t\tStyleRange newStyle;", "-\t\t\tint selectionStyleEnd;", "-\t\t\t// no selection style created yet?", "-\t\t\tif (selectionStyle == null) {", "-\t\t\t\t// create selection style with regular font style, starting at selection start, ending at style start", "-\t\t\t\tselectionStyle = new StyleRange(selectionStart, style.start - selectionStart, foreground, background);", "-\t\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t\tif (style.start == selectionStart) {", "-\t\t\t\t\tselectionStyle.fontStyle = style.fontStyle;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tselectionStyleEnd = selectionStyle.start + selectionStyle.length;", "-\t\t\t// gap between current selection style end and style start?", "-\t\t\tif (style.start > selectionStyleEnd && selectionStyle.fontStyle != SWT.NORMAL) {", "-\t\t\t\t// create selection style with regular font style, starting at selection style end, ending at style start", "-\t\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, style.start - selectionStyleEnd, foreground, background);", "-\t\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t}", "-\t\t\tif (selectionStyle.fontStyle != style.fontStyle) {", "-\t\t\t\t// selection style end = style start", "-\t\t\t\tselectionStyle.length = style.start - selectionStyle.start;", "-\t\t\t\t// create selection style with style font style, starting at style start, ending at style end", "-\t\t\t\tselectionStyle = new StyleRange(style.start, style.length, foreground, background, style.fontStyle);", "-\t\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\t// selection style end = style end", "-\t\t\t\tselectionStyle.length = styleEnd - selectionStyle.start;", "-\t\t\t}", "-\t\t\t// if style extends beyond selection a new style is returned for the unselected part of the style", "-\t\t\tnewStyle = setSelectionStyleEnd(selectionStyle, style);", "-\t\t\tif (newStyle != null) {", "-\t\t\t\tnewStyles.addElement(newStyle);\t\t\t\t\t", "-\t\t\t}\t\t\t\t", "-\t\t}", "-\t\telse {", "-\t\t\t// no selection style created yet?", "-\t\t\tif (selectionStyle == null) {", "-\t\t\t\t// create selection style with regular font style, starting at selection start, ending at selection end", "-\t\t\t\tselectionStyle = new StyleRange(selectionStart, selectionEnd - selectionStart, foreground, background);", "-\t\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t}", "-\t\t\telse // does the current selection style end before the selection end?", "-\t\t\tif (selectionStyle.start + selectionStyle.length < selectionEnd) {", "-\t\t\t\tif (selectionStyle.fontStyle != SWT.NORMAL) {", "-\t\t\t\t\tint selectionStyleEnd = selectionStyle.start + selectionStyle.length;", "-\t\t\t\t\t// create selection style with regular font style, starting at selection style end, ending at selection end", "-\t\t\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, selectionEnd - selectionStyleEnd, foreground, background);", "-\t\t\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\tselectionStyle.length = selectionEnd - selectionStyle.start;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tnewStyles.addElement(style);", "-\t\t}", "-\t}", "-\tif (selectionStyle == null) {", "-\t\t// create selection style with regular font style, starting at selection start, ending at selection end", "-\t\tselectionStyle = new StyleRange(selectionStart, selectionEnd - selectionStart, foreground, background);", "-\t\tnewStyles.addElement(selectionStyle);", "-\t}", "-\telse // does the current selection style end before the selection end?", "-\tif (selectionStyle.start + selectionStyle.length < selectionEnd) {", "-\t\tif (selectionStyle.fontStyle != SWT.NORMAL) {", "-\t\t\tint selectionStyleEnd = selectionStyle.start + selectionStyle.length;", "-\t\t\t// create selection style with regular font style, starting at selection style end, ending at selection end", "-\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, selectionEnd - selectionStyleEnd, foreground, background);", "-\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t}", "-\t\telse {", "-\t\t\tselectionStyle.length = selectionEnd - selectionStyle.start;", "-\t\t}", "-\t}", "-\tstyles = new StyleRange[newStyles.size()];", "-\tnewStyles.copyInto(styles);", "-\treturn styles;"]}], "num": 54391}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9e67b71c94a863e4f7571ed8ce106ac", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6197ed0fb25268514b7afe6a87fb207a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ProgressBar.java", "commitBeforeChange": "b5b144c870a845c6b674bd3aa5351bdf169ec16c", "commitAfterChange": "257956b6dd31f969247b68558fac32348be012a7", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void setState (int state)", "signatureAfterChange": " void setState (int state)", "diff": ["-public void setState (int state) {", "+/*public*/ void setState (int state) {", "-\tswitch (state) {", "-\t\tcase SWT.NORMAL:", "-\t\tcase SWT.ERROR:", "-\t\tcase SWT.PAUSED:", "-\t\t\tOS.SendMessage (handle, OS.PBM_SETSTATE, state, 0);", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\tswitch (state) {", "+\t\t\tcase SWT.NORMAL:", "+\t\t\t\tOS.SendMessage (handle, OS.PBM_SETSTATE, OS.PBST_NORMAL, 0);", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.ERROR:", "+\t\t\t\tOS.SendMessage (handle, OS.PBM_SETSTATE, OS.PBST_ERROR, 0);", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.PAUSED:", "+\t\t\t\tOS.SendMessage (handle, OS.PBM_SETSTATE, OS.PBST_PAUSED, 0);", "+\t\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70975d2da4a6d7663fef86e2ed0af14b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b48c0188461603c1ee49112ea7db13d25d3dec5b", "commitAfterChange": "25da20bae532d82803a26e72660be3bef057a85e", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "  int itemNotificationProc (int browser, int id, int message)", "signatureAfterChange": "  int itemNotificationProc (int browser, int id, int message)", "diff": ["+", "+\t\t\tint ptr = OS.NewHandle (0);", "+\t\t\tif (OS.GetDataBrowserItems (handle, id, true, OS.kDataBrowserItemAnyState, ptr) == OS.noErr) {", "+\t\t\t\tint count = OS.GetHandleSize (ptr) / 4;", "+\t\t\t\tvisibleCount -= count;", "+\t\t\t}", "+\t\t\tOS.DisposeHandle (ptr);", "+", "-\t\t\tint ptr = OS.NewHandle (0);", "+\t\t\tptr = OS.NewHandle (0);", "+\t\t\tfixScrollBar ();", "+\t\t\tvisibleCount += ids.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da214e498c4ef259e9a1029a2e55db09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "0992c4c8bb778f2750941bd4a32c783379a3684f", "commitAfterChange": "50cb2c5b4765d13199fc4d9ca4e1892cef5fb8eb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void releaseWidget ()", "signatureAfterChange": "  void releaseWidget ()", "diff": ["+\tif ((state & CANVAS) != 0 && (style & SWT.EMBEDDED) != 0) {", "+\t\tint hwndChild = OS.GetWindow (handle, OS.GW_CHILD);", "+\t\tif (hwndChild != 0) {", "+\t\t\tint threadId = OS.GetWindowThreadProcessId (hwndChild, null);", "+\t\t\tif (threadId != OS.GetCurrentThreadId ()) {", "+\t\t\t\tOS.SetParent (hwndChild, 0);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df5ad7a8b86c773dc4c1775ed644efe0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "6a0ae852ade098bdf9cbe69162397f3200d6ad0f", "commitAfterChange": "4761ad805f68664b5074385e91e309e827f79fd2", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "  LRESULT wmNotifyToolTip (NMTTCUSTOMDRAW nmcd, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyToolTip (NMTTCUSTOMDRAW nmcd, int lParam)", "diff": ["-\t\t\t\t\tint offset = cellRect.left;", "-\t\t\t\t\tif (pinfo.iSubItem != 0) offset -= gridWidth;", "+\t\t\t\t\tint x = cellRect.left;", "+\t\t\t\t\tif (pinfo.iSubItem != 0) x -= gridWidth;", "-\t\t\t\t\t\tPoint size = imageList == null ? new Point (rect.width, rect.height) : imageList.getImageSize ();\t\t\t\t\t\t", "-\t\t\t\t\t\tgc.drawImage (image, rect.x, rect.y, rect.width, rect.height, offset, imageRect.top, size.x, size.y);", "-\t\t\t\t\t\toffset += size.x + INSET + (pinfo.iSubItem == 0 ? -2 : 4);", "+\t\t\t\t\t\tPoint size = imageList == null ? new Point (rect.width, rect.height) : imageList.getImageSize ();", "+\t\t\t\t\t\tint y = imageRect.top;", "+\t\t\t\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\t\t\t\ty = y + Math.max (0, (imageRect.bottom - imageRect.top - size.y) / 2);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tgc.drawImage (image, rect.x, rect.y, rect.width, rect.height, x, y, size.x, size.y);", "+\t\t\t\t\t\tx += size.x + INSET + (pinfo.iSubItem == 0 ? -2 : 4);", "-\t\t\t\t\t\toffset += INSET + 2;", "+\t\t\t\t\t\tx += INSET + 2;", "-\t\t\t\t\t\tOS.SetRect (textRect, offset, cellRect.top, cellRect.right, cellRect.bottom);", "+\t\t\t\t\t\tOS.SetRect (textRect, x, cellRect.top, cellRect.right, cellRect.bottom);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3711ef856fe6c6a54e08ebabd334be4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "baf25e3c2c8b76a3f6345cf103dddf73acb0d2ff", "commitAfterChange": "6eb03009b1d7bf6be6efb26fdaf84b920a2d3e28", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  int gtk_commit (int imcontext, int text)", "signatureAfterChange": "  int gtk_commit (int imcontext, int text)", "diff": ["-\tOS.g_signal_handlers_unblock_matched (imcontext, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, handle);", "+\tint id = OS.g_signal_lookup (OS.commit, OS.gtk_im_context_get_type ());", "+\tint mask =  OS.G_SIGNAL_MATCH_DATA | OS.G_SIGNAL_MATCH_ID;", "+\tOS.g_signal_handlers_unblock_matched (imcontext, mask, id, 0, 0, 0, handle);", "-\tOS.g_signal_handlers_block_matched (imcontext, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, handle);", "+\tOS.g_signal_handlers_block_matched (imcontext, mask, id, 0, 0, 0, handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8862add938f12494ec85c5a33bc1f64a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 38, "signatureBeforeChange": " int getTextPaintWidth (int columnIndex)", "signatureAfterChange": " int getTextWidth(String text)", "diff": ["-int getTextPaintWidth (int columnIndex) {", "-\tint result = internalGetTextWidth (columnIndex);", "-\tif (result > 0) result += 2 * MARGIN_TEXT;", "-\treturn result;", "-}", "+ */", "+int getTextWidth(String text) {", "+\tint textWidth = 0;", "+\tif (text != null) {", "+\t\tGC gc = new GC(getParent());", "+\t\tgc.setFont(getFont());", "+\t\ttextWidth = gc.stringExtent(text).x;", "+\t\tgc.dispose();", "+\t}", "+\treturn textWidth;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fe823fbcad901922a97cd9f097dd54f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "f648c24bf54a6eb61816928647e6bf85f115f1b1", "commitAfterChange": "0b4558318e4eed379cb09413e1022c4c42bcfd30", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  synchronized void createDisplay (DeviceData data)", "signatureAfterChange": "  synchronized void createDisplay (DeviceData data)", "diff": ["+\t\tSystem.out.println (\"***WARNING: SWT requires GTK \" + MAJOR+ \".\" + MINOR + \".\" + MICRO);", "+\t\tint major = OS.gtk_major_version (), minor = OS.gtk_minor_version (), micro = OS.gtk_micro_version ();", "+\t\tSystem.out.println (\"***WARNING: Detected: \" + major + \".\" + minor + \".\" + micro);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c647996b3db99aed9da0578acaf02147", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "3c0a1ecd87126c7c633b7d874da4d488d4296a67", "commitAfterChange": "a98c46c517a0b4075bfb149b923461c17e8fd78d", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  void redraw (int propertyID)", "signatureAfterChange": "  void redraw (int propertyID)", "diff": ["+\tDataBrowserCallbacks callbacks = new DataBrowserCallbacks ();", "+\tOS.GetDataBrowserCallbacks (parent.handle, callbacks);", "+\tcallbacks.v1_itemCompareCallback = 0;", "+\tOS.SetDataBrowserCallbacks (parent.handle, callbacks);", "+\tcallbacks.v1_itemCompareCallback = display.itemCompareProc;", "+\tOS.SetDataBrowserCallbacks (parent.handle, callbacks);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b15c15245783dc5db4d03d4df1773e9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "fbd9be2798f33aa26441c609a4a256a0af78a86f", "commitAfterChange": "db72f1c3d4111f7ce57691d74f90de5362265d56", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["+\t/*", "+\t* Bug in GTK.  When the parent is realized before the GtkTextView", "+\t* widget is created, the GTK_TEXT_WINDOW_TEXT window does not have", "+\t* its event mask properly set to match gtk_widget_add_events().", "+\t* The fix is to detect this and set the window event mask if", "+\t* necessary.    ", "+\t*/", "+\tif ((style & SWT.MULTI) != 0) {", "+\t\tint window = OS.gtk_text_view_get_window (handle, OS.GTK_TEXT_WINDOW_TEXT);", "+\t\tif (window != 0) {", "+\t\t\tint mask = OS.GDK_ENTER_NOTIFY_MASK | OS.GDK_LEAVE_NOTIFY_MASK;", "+\t\t\tOS.gdk_window_set_events (window, OS.gdk_window_get_events (window) | mask);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "697271741ed8f1139eea875053713582", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d40de95713aa2ea21126d6e88c192e810affe18d", "commitAfterChange": "cbb07118466c8bacecf58f0853494868bce04573", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "  void sendDoubleSelection()", "signatureAfterChange": "  void sendDoubleSelection()", "diff": ["-\tint index = (int)/*64*/((NSTableView)view).clickedRow (); ", "-\tif (index != -1) {", "+\tNSTableView tableView = (NSTableView)view;", "+\tint rowIndex = (int)/*64*/tableView.clickedRow (); ", "+\tif (rowIndex != -1) {", "+\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\tNSArray columns = tableView.tableColumns ();", "+\t\t\tint columnIndex = (int)/*64*/tableView.clickedColumn ();", "+\t\t\tid column = columns.objectAtIndex (columnIndex);", "+\t\t\tif (column.id == checkColumn.id) return;", "+\t\t}", "-\t\tevent.item = _getItem (index);", "+\t\tevent.item = _getItem (rowIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9caa376e3fc14c90e54a06c3e2025ccd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java", "commitBeforeChange": "2cc7d30698448c6df09a70c69839e5a3830f9bc0", "commitAfterChange": "ca8346412189df48223ba59c33b21708729a1c0e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 21, "signatureBeforeChange": "\t \tStringBuffer generateCode ()", "signatureAfterChange": "\t \tStringBuffer generateCode()", "diff": ["-\tStringBuffer generateCode () {", "+\tStringBuffer generateCode() {", "-\t\tresetEditors ();", "+\t\tresetEditors();", "-\t\tnames = new String [children.length];", "-\t\tfor (int i = 0; i < children.length; i++) {", "-\t\t\tControl control = children [i];", "-\t\t\tString controlClass = control.getClass ().toString ();", "-\t\t\tString controlType = controlClass.substring (controlClass.lastIndexOf ('.') + 1);", "-\t\t\tnames [i] = controlType.toLowerCase () + i;", "+\t\tnames = new String[children.length];\t\t", "+\t\tfor(int i =0; i< children.length; i++)\t{", "+\t\t\tTableItem myItem = table.getItem(i);", "+\t\t\tString name = myItem.getText(0);", "+\t\t\tif(name.matches(\"\\\\d\")){", "+\t\t\t\tControl control = children[i];", "+\t\t\t\tString controlClass = control.getClass().toString();", "+\t\t\t\tString controlType = controlClass.substring (controlClass.lastIndexOf ('.') + 1);", "+\t\t\t\tnames[i] = controlType.toLowerCase() + i;\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\tnames[i] = myItem.getText(0);", "+\t\t\t}\t", "-\t\tcode.append (\"import org.eclipse.swt.*;\\n\");", "-\t\tcode.append (\"import org.eclipse.swt.custom.*;\\n\");", "-\t\tcode.append (\"import org.eclipse.swt.graphics.*;\\n\");", "-\t\tcode.append (\"import org.eclipse.swt.layout.*;\\n\");", "-\t\tcode.append (\"import org.eclipse.swt.widgets.*;\\n\\n\");", "-\t\tcode.append (\"public class MyLayout {\\n\");", "-\t\tcode.append (\"\\tpublic static void main (String [] args) {\\n\");", "-\t\tcode.append (\"\\t\\tDisplay display = new Display ();\\n\");", "-\t\tcode.append (\"\\t\\tShell shell = new Shell (display);\\n\");", "+\t\tcode.append(\"import org.eclipse.swt.*;\\n\");", "+\t\tcode.append(\"import org.eclipse.swt.layout.*;\\n\");", "+\t\tcode.append(\"import org.eclipse.swt.widgets.*;\\n\");", "+\t\tif (needsCustom()) code.append(\"import org.eclipse.swt.custom.*;\\n\");", "+\t\tif (needsGraphics()) code.append(\"import org.eclipse.swt.graphics.*;\\n\");", "+\t\tcode.append(\"\\n\");", "+\t\tcode.append(\"public class MyLayout {\\n\");", "+\t\tcode.append(\"\\tpublic static void main (String [] args) {\\n\");", "+\t\tcode.append(\"\\t\\tDisplay display = new Display ();\\n\");", "+\t\tcode.append(\"\\t\\tShell shell = new Shell (display);\\n\");", "-\t\tcode.append (generateLayoutCode ());", "+\t\tcode.append(generateLayoutCode());", "-\t\tcode.append (\"\\n\\t\\tshell.pack ();\\n\\t\\tshell.open ();\\n\\n\");", "-\t\tcode.append (\"\\t\\twhile (!shell.isDisposed ()) {\\n\");", "-\t\tcode.append (\"\\t\\t\\tif (!display.readAndDispatch ())\\n\");", "-\t\tcode.append (\"\\t\\t\\t\\tdisplay.sleep ();\\n\\t\\t}\\n\\t\\tdisplay.dispose ();\\n\\t}\\n}\");", "+\t\tcode.append(\"\\n\\t\\tshell.pack ();\\n\\t\\tshell.open ();\\n\\n\");", "+\t\tcode.append(\"\\t\\twhile (!shell.isDisposed ()) {\\n\");", "+\t\tcode.append(\"\\t\\t\\tif (!display.readAndDispatch ())\\n\");", "+\t\tcode.append(\"\\t\\t\\t\\tdisplay.sleep ();\\n\\t\\t}\\n\\t\\tdisplay.dispose ();\\n\\t}\\n}\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04d4ec76869f10186235ce0c48234dce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon2/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "636645cd71825a27e2f84e61e7bf769366dad642", "commitAfterChange": "1ddb2e7c3fc0d32ea2fcd254616fd28253c4cd77", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 39, "signatureBeforeChange": "  void hookEvents ()", "signatureAfterChange": "  void hookEvents ()", "diff": ["+", "+\tDataBrowserCustomCallbacks custom = new DataBrowserCustomCallbacks ();", "+\tcustom.version = OS.kDataBrowserLatestCustomCallbacks;", "+\tOS.InitDataBrowserCustomCallbacks (custom);", "+\tcustom.v1_drawItemCallback = display.drawItemProc;", "+\tcustom.v1_hitTestCallback = display.hitTestProc;", "+\tcustom.v1_trackingCallback = display.trackingProc;", "+\tOS.SetDataBrowserCustomCallbacks (handle, custom);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "292e132ce4311f0a9f317a6b7800c453", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "f664172a0e735d142051b2da26600fbd256e07a6", "commitAfterChange": "894e6297387f95786ffea31acd399cd5951b0afc", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": " public int internal_new_GC (GCData data)", "signatureAfterChange": " public int internal_new_GC (GCData data)", "diff": ["-\t// NEEDS WORK", "-\tint window = OS.FrontWindow ();", "+\t//TODO - multiple monitors", "+\tint window = createOverlayWindow ();", "+\tOS.ShowWindow (window);", "+\tRect portRect = new Rect ();", "+\tOS.GetPortBounds (port, portRect);", "+\tOS.CGContextScaleCTM (context, 1, -1);", "+\tOS.CGContextTranslateCTM (context, 0, portRect.top - portRect.bottom);", "-\t\tdata.background = new float [] {0, 0, 0, 1};", "-\t\tdata.foreground = new float [] {1, 1, 1, 1};", "+\t\tdata.window = window;", "+\t\tdata.background = new float [] {1, 1, 1, 1};", "+\t\tdata.foreground = new float [] {0, 0, 0, 1};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd007b0bd7a41eaaf8f8a278ba0fc10f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "de1813efe91cfa137d57ee87e713a23af853c7ad", "commitAfterChange": "66ce2b458013bbaf13e46024a36e0fe54ace3106", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  void hookEvents ()", "signatureAfterChange": "  void hookEvents ()", "diff": ["-\tif (imContext != 0) OS.g_signal_connect (imContext, OS.commit, windowProc3, COMMIT);", "+\tif (imContext != 0) {", "+\t\tOS.g_signal_connect (imContext, OS.commit, windowProc3, COMMIT);", "+\t\tint id = OS.g_signal_lookup (OS.commit, OS.gtk_im_context_get_type ());", "+\t\tint mask =  OS.G_SIGNAL_MATCH_DATA | OS.G_SIGNAL_MATCH_ID;", "+\t\tOS.g_signal_handlers_block_matched (imContext, mask, id, 0, 0, 0, handle);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88e767b6ff7c46b8beccbd04c8d9e45a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "60339544016210e2d9863cd6da13fc263df99fa6", "commitAfterChange": "9050491c59cdd7ef518ef2de78581f4975cc9bc7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r void createHandle ()", "signatureAfterChange": "\r \r void createHandle ()", "diff": ["+\tint hwndToolTip = OS.SendMessage (handle, OS.TB_GETTOOLTIPS, 0, 0);\t\r", "-//\tint hwndToolTip = OS.SendMessage (handle, OS.TB_GETTOOLTIPS, 0, 0);\r", "+\t* Feature in Windows.  When the tool tip control is\r", "+\t* created, the parent of the tool tip is the shell.\r", "+\t* If SetParent () is used to reparent the tool bar\r", "+\t* into a new shell, the tool tip is not reparented\r", "+\t* and pops up underneath the new shell.  The fix is\r", "+\t* to make sure the tool tip is a topmost window.\r", "+\t*/\r", "+\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOSIZE;\r", "+\tOS.SetWindowPos (hwndToolTip, OS.HWND_TOPMOST, 0, 0, 0, 0, flags);\r", "+\r", "+\t/*\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5a74865994bfaf12e202969485a8cf7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "cabce7a504b376ba4a2bbe191acc5449e828a45a", "commitAfterChange": "32ca2a35fc6b7ecbddd68d976476a4797d52ddb6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["+\t\tif ((style & SWT.MULTI) != 0 && (style & SWT.BORDER) != 0) {", "+\t\t\tint features = OS.kControlSupportsEmbedding;", "+\t\t\tOS.CreateUserPaneControl (0, null, features, outControl);", "+\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tframeHandle = outControl [0];\t\t\t", "+\t\t}", "-\t\tRect rect = inset ();", "+\t\tRect rect = (style & SWT.SINGLE) != 0 ? inset () : new Rect ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "968fbe0c88e332a0944cf10a12b672b0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "b0670184918936543baddf327a606f49be1bb9a2", "commitAfterChange": "3d2a2ef74e52f056873f9f2a7358ee21e1f1f769", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  LRESULT WM_MOUSEACTIVATE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_MOUSEACTIVATE (int wParam, int lParam)", "diff": ["+\t", "-//\tif (control != null /*&& (control.state & CANVAS) != 0*/) {", "-//\t\tif ((control.style & SWT.NO_FOCUS) != 0) {", "-//\t\t\tif ((style & SWT.ON_TOP) != 0 && (style & SWT.NO_FOCUS) != 0) {", "-//\t\t\t\tif (hittest == OS.HTBORDER || hittest == OS.HTCLIENT) {", "-//\t\t\t\t\treturn new LRESULT (OS.MA_NOACTIVATE);", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "+\tif (control != null && (control.state & CANVAS) != 0) {", "+\t\tif ((control.style & SWT.NO_FOCUS) != 0) {", "+\t\t\tint bits = SWT.ON_TOP | SWT.NO_FOCUS;", "+\t\t\tif ((style & bits) == bits) {", "+\t\t\t\tif (hittest == OS.HTBORDER || hittest == OS.HTCLIENT) {", "+\t\t\t\t\treturn new LRESULT (OS.MA_NOACTIVATE);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f100f87a1f614c85481bbc0ca91d4ca2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "ef677d4297c807b56133dff9773955c4345a40e4", "commitAfterChange": "9ecc0d05f6980b30d032a3a096cf0a3777714fdf", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " void internalLayout (boolean changed)", "signatureAfterChange": " void internalLayout (boolean changed)", "diff": ["-\ttext.setBounds (0, 0, width - arrowSize.x, height);", "+\tint textHeight = text.computeSize (SWT.DEFAULT, SWT.DEFAULT).y;", "+\tint textY = Math.max (0, (height - textHeight) / 2);", "+\ttext.setBounds (0, textY, width - arrowSize.x, textHeight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03a0433b5fffe0eede25e5ba428d14dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "1fb12053b80b263df45cd22a53291eee547e711e", "commitAfterChange": "1c30084b09387782ae7310d0f6b69abce2f396a8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  String shortenText(GC gc, String text, int width, String ellipses)", "signatureAfterChange": "  String shortenText(GC gc, String text, int width, String ellipses)", "diff": ["-\tint end = length - 1;", "+\tTextLayout layout = new TextLayout(getDisplay());", "+\tlayout.setText(text);", "+\tint end = layout.getPreviousOffset(length, SWT.MOVEMENT_CLUSTER);", "-\t\t\treturn text + ellipses;", "+\t\t\tbreak;", "-\t\tend--;", "+\t\tend = layout.getPreviousOffset(end, SWT.MOVEMENT_CLUSTER);", "-\treturn text.substring(0,1);", "+\tlayout.dispose();", "+\treturn end == 0 ? text.substring(0, 1) : text + ellipses;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9295bb4d0a867124a95de7c68643d80", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OpenGL/cocoa/org/eclipse/swt/opengl/GLCanvas.java", "commitBeforeChange": "49c744b54a446feeae3070b9bcdf3e3844dd8198", "commitAfterChange": "c7326f8c23459c2970e1c58da891589a93762307", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public GLCanvas (Composite parent, int style, GLData data)", "signatureAfterChange": " public GLCanvas (Composite parent, int style, GLData data)", "diff": ["-\tglView.initWithFrame(parent.view.bounds(), pixelFormat);", "+\tglView.initWithFrame(view.bounds(), pixelFormat);", "+\t", "+\tif (data.shareContext != null) {", "+\t\tNSOpenGLContext ctx = data.shareContext.glView.openGLContext();", "+\t\tNSOpenGLContext newContext = (NSOpenGLContext) new NSOpenGLContext().alloc();", "+\t\tnewContext.initWithFormat(pixelFormat, ctx);", "+\t\tglView.setOpenGLContext(newContext);", "+\t\tnewContext.release();", "+\t}", "-\tparent.view.addSubview(glView);", "+\tview.addSubview(glView);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59a40691f68c49e06ec6d793f647c7ca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "6fd629ad4013e400aaadc08cad57e1057b403f67", "commitAfterChange": "8b1352568a55021cfcd917938b196467d70767a8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r int childrenParent ()", "signatureAfterChange": "\r \r public Rectangle getClientArea ()", "diff": ["-int childrenParent () {\r", "-\t/*\r", "-\t* Feature in Photon.  Tabfolders have an extra widget which\r", "-\t* is the parent of all tab items. PtValidParent() can not be\r", "-\t* used, since it does not return that widget.\r", "-\t*/\r", "-\treturn OS.PtWidgetChildBack (handle);\r", "-}\r", "+\r", "+public Rectangle getClientArea () {\r", "+\tcheckWidget();\r", "+\tPhArea_t area = new PhArea_t ();\r", "+\tif (!OS.PtWidgetIsRealized (handle)) OS.PtExtentWidgetFamily (handle);\r", "+\tint clientHandle = OS.PtWidgetChildBack (handle);\r", "+\tOS.PtWidgetArea (clientHandle, area);\r", "+\treturn new Rectangle (area.pos_x, area.pos_y, area.size_w, area.size_h);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d590ad5b5408b0564e349a0b41e3c8fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \r int processResize (int info)", "signatureAfterChange": "\r \r int processResize (int info)", "diff": ["+\tPtContainerCallback_t cbdata = new PtContainerCallback_t ();\r", "+\tOS.memmove(cbdata, cbinfo.cbdata, PtContainerCallback_t.sizeof);\r", "+\tif (cbdata.new_dim_w == cbdata.old_dim_w && cbdata.new_dim_h == cbdata.old_dim_h) {\r", "+\t\treturn OS.Pt_CONTINUE;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "986d6d26fdb61c5b9b2f8271fa1642cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "7b875feb9aab87fbca7cd80d8d00ddfd577b532c", "commitAfterChange": "cf88a4f46102f955017749fd392f852deca59091", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": " int processPaint (Object callData)", "signatureAfterChange": " int processPaint (Object callData)", "diff": ["-\tPoint e= getSize();", "+\t", "-\tgc.setBackground(getDisplay().getSystemColor(SWT.COLOR_GRAY));", "-\tif (e.x < e.y) {\t// vertical", "-\t\tgc.fillRectangle ((e.x-1)/2, (e.y-20)/2, 1, 20);", "-\t} else {\t// horizontal", "-\t\tgc.fillRectangle ((e.x-20)/2, (e.y-1)/2, 20, 1);", "+\tMacControlEvent me= (MacControlEvent) callData;", "+\tRectangle r= gc.carbon_focus(me.getDamageRegionHandle());", "+\t", "+\tif (! r.isEmpty()) {", "+\t\tPoint e= getSize();", "+\t\t", "+\t\t// erase background", "+\t\tgc.fillRectangle(0, 0, e.x, e.y);", "+\t\t", "+\t\tgc.setBackground(getDisplay().getSystemColor(SWT.COLOR_GRAY));", "+\t\tif (e.x < e.y) {\t// vertical", "+\t\t\tgc.fillRectangle ((e.x-1)/2, (e.y-20)/2, 1, 20);", "+\t\t} else {\t\t\t// horizontal", "+\t\t\tgc.fillRectangle ((e.x-20)/2, (e.y-1)/2, 20, 1);", "+\t\t}", "+\t", "+\tgc.carbon_unfocus();", "-\t/*", "-\tMacRect bounds= new MacRect();", "-\tOS.GetControlBounds(handle, bounds.getData());", "-\tOS.DrawThemeSeparator(bounds.getData(), OS.kThemeStateActive);", "-\t*/", "+\t", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b8e193df543517070d2894ff5058a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "65492bab25cdbbd48bd12ddf07beae3ace689da7", "commitAfterChange": "dc0bf81ccbf37c1ab52ff428e1cd360d8ed0c518", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void setImage (Image image)", "signatureAfterChange": " public void setImage (Image image)", "diff": ["-\tif (image != null || parent.foreground != -1) {", "+\tif (parent.foreground != -1) {", "+\t} else {", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\tif (hBitmap != 0) OS.DeleteObject (hBitmap);", "+\t\t\tinfo.hbmpItem = hBitmap = image != null ? Display.create32bitDIB (image) : 0;", "+\t\t} else {", "+\t\t\tinfo.hbmpItem = OS.HBMMENU_CALLBACK;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20aa7f8ebcd42214691a644fd0d64142", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "22d16b2f55bf4acc01ef5e12541fde4dc9ff025f", "commitAfterChange": "0b23d756c0ed37287f1a2e0ee348603ce897d270", "methodNumberBeforeChange": 180, "methodNumberAfterChange": 180, "signatureBeforeChange": "\r \r LRESULT WM_MOUSEMOVE (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_MOUSEMOVE (int wParam, int lParam)", "diff": ["-\t\tboolean hooksEnter = hooks (SWT.MouseEnter);\r", "-\t\tif (hooksEnter || hooks (SWT.MouseExit) || hooks (SWT.MouseHover)) {\r", "+\t\tDisplay display = getDisplay ();\r", "+\t\tboolean mouseEnter = hooks (SWT.MouseEnter) || display.filters (SWT.MouseEnter);\r", "+\t\tboolean mouseExit = hooks (SWT.MouseExit) || display.filters (SWT.MouseExit);\r", "+\t\tboolean mouseHover = hooks (SWT.MouseHover) || display.filters (SWT.MouseHover);\r", "+\t\tif (mouseEnter || mouseExit || mouseHover) {\r", "-\t\t\t\tif (hooksEnter) {\r", "+\t\t\t\tif (mouseEnter) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a15466e7c54eb8646730a329d1b3d78", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "f2eaf4de8227661ef29880af04d52e370a50fc82", "commitAfterChange": "94a122c53cdac9ad83d93591a22041a78c4e39d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public CoolBar (Composite parent, int style)", "signatureAfterChange": " public CoolBar (Composite parent, int style)", "diff": ["+\t/*", "+\t* Ensure that either of HORIZONTAL or VERTICAL is set.", "+\t* NOTE: HORIZONTAL and VERTICAL have the same values", "+\t* as H_SCROLL and V_SCROLL so it is necessary to first", "+\t* clear these bits to avoid scroll bars and then reset", "+\t* the bits using the original style supplied by the", "+\t* programmer.", "+\t* ", "+\t* NOTE: The CCS_VERT style cannot be applied when the", "+\t* widget is created because of this conflict.", "+\t*/", "+\tif ((style & SWT.VERTICAL) != 0) {", "+\t\tthis.style |= SWT.VERTICAL;", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, bits | OS.CCS_VERT);", "+\t} else {", "+\t\tthis.style |= SWT.HORIZONTAL;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b3398648370dcf338245c7a5ea8baca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "2dbd0ccfe08d6a6997a0e9308c031e61261124ee", "commitAfterChange": "293acdaaff55ea509849ff9da47dacd21701a74a", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\t\t\t\t\tif (filename.startsWith (TASKBAR_EVENT)) {", "+\t\t\t\t\t\tString text = filename.substring (TASKBAR_EVENT.length ());", "+\t\t\t\t\t\tint id = Integer.parseInt (text);", "+\t\t\t\t\t\tMenuItem item = getMenuItem (id);", "+\t\t\t\t\t\tif (item != null) {", "+\t\t\t\t\t\t\titem.sendSelectionEvent (SWT.Selection);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b210a1a0a91093a7221a935ea1649242", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d40de95713aa2ea21126d6e88c192e810affe18d", "commitAfterChange": "cbb07118466c8bacecf58f0853494868bce04573", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  void sendDoubleSelection()", "signatureAfterChange": "  void sendDoubleSelection()", "diff": ["-\tint index = (int)/*64*/outlineView.clickedRow (); ", "-\tif (index != -1) {", "-\t\tTreeItem item = (TreeItem) display.getWidget (outlineView.itemAtRow (index).id);", "+\tint rowIndex = (int)/*64*/outlineView.clickedRow (); ", "+\tif (rowIndex != -1) {", "+\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\tNSArray columns = outlineView.tableColumns ();", "+\t\t\tint columnIndex = (int)/*64*/outlineView.clickedColumn ();", "+\t\t\tid column = columns.objectAtIndex (columnIndex);", "+\t\t\tif (column.id == checkColumn.id) return;", "+\t\t}", "+\t\tTreeItem item = (TreeItem) display.getWidget (outlineView.itemAtRow (rowIndex).id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f914bc2611d0e0a9ded75b5ebd4143f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "ce138c7e1fb0d889814afbd2a7603dfa7d22605f", "commitAfterChange": "73415b0571f810699ceb8be1dda62144bce14807", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  int webView_resource_willSendRequest_redirectResponse_fromDataSource(int sender, int identifier, int request, int redirectResponse, int dataSource)", "signatureAfterChange": "  int webView_resource_willSendRequest_redirectResponse_fromDataSource(int sender, int identifier, int request, int redirectResponse, int dataSource)", "diff": ["+\tNSURLRequest nsRequest = new NSURLRequest (request);", "+\tNSURL url = nsRequest.URL ();", "+\tif (url.isFileURL ()) {", "+\t\tNSMutableURLRequest newRequest = new NSMutableURLRequest (nsRequest.mutableCopy ());", "+\t\tnewRequest.autorelease ();", "+\t\tnewRequest.setCachePolicy (OS.NSURLRequestReloadIgnoringLocalCacheData);", "+\t\treturn newRequest.id;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bcbb6c1326bd067fba851b4e50b2d1e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "92e83b54977a11052b46f2a93227c10bd401de89", "commitAfterChange": "91ca9b8718f2b061952edf08ad752d3a1aa6ef26", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["+\t\t\tcase OS.HDN_ITEMDBLCLICKW:      ", "+\t\t\tcase OS.HDN_ITEMDBLCLICKA: {", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tTableColumn column = columns [phdn.iItem];", "+\t\t\t\tif (column != null) {", "+\t\t\t\t\tcolumn.postEvent (SWT.DefaultSelection);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e442128c7ec5365130b6903b7655e6ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "e9af8004a671b39c0abf5b1c916bae731486bc4e", "commitAfterChange": "df3c9f82cc5e05dc08780fd1c1b12cad770c48b8", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 24, "signatureBeforeChange": " void onMouseDown(Event event)", "signatureAfterChange": " void onMouseDown(Event event)", "diff": ["+void onMouseDown(Event event) {", "+\tif (isLocked || event.button != 1) return;", "+\tfixEvent(event);", "+\tdragging = getGrabbedItem(event.x, event.y);", "+\tif (dragging != null) {", "+\t\tmouseXOffset = event.x;", "+\t\titemXOffset = mouseXOffset - dragging.internalGetBounds().x;", "+\t\tsetCursor(dragCursor);", "+\tfixEvent(event);", "-}", "-void onMouseDown(Event event) {", "-\tdragging = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e082fd2575a5a00929a60f5bb45bc3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "027985063936c84b64b543056db83d56637f27ac", "commitAfterChange": "c4c9f41acfde93eb33954ea7c7296fa0fbd5e9d3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \r void destroyItem (TableColumn column)", "signatureAfterChange": "\r \r void destroyItem (TableColumn column)", "diff": ["+\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), cchTextMax);\r", "+\t\t\t\tOS.MoveMemory (buffer, pszText, byteCount);\r", "+\t\t\t\titems [i].text = buffer.toString (0, buffer.strlen ());\r", "+\t\t\t\titems [i].image = imageList.get (lvItem.iImage);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "514aae4ab2eac50b3acfd8601dea848c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DirectoryDialog.java", "commitBeforeChange": "51ee499e8251edcf35016f12e5186b6ddd4b8082", "commitAfterChange": "c878e19e1d71776f11d9ab1e76e433925b403c28", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r void preset()", "signatureAfterChange": "\r void preset()", "diff": ["+\tGtkFileSelection selection = new GtkFileSelection();\r", "+\tOS.memmove(selection, handle);\r", "+\tOS.gtk_file_selection_hide_fileop_buttons (handle);\r", "+\tint fileListParent = OS.gtk_widget_get_parent(selection.file_list);\r", "+\tOS.gtk_widget_hide(selection.file_list);\r", "+\tOS.gtk_widget_hide(fileListParent);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f123067e6f29eb55420640bb4e190d2d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet143.java", "commitBeforeChange": "1842fb6618b874714b89bdeb1ef17cab740bfb5f", "commitAfterChange": "83784a0bd43bf551a0a4fb21e5409eeadecd384d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main(String[] args)", "signatureAfterChange": "  public static void main(String[] args)", "diff": ["+\tImage image2 = new Image (display, 16, 16);", "+\tGC gc = new GC(image2);", "+\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "+\tgc.fillRectangle(image2.getBounds());", "+\tgc.dispose();", "-\t\titem.setImage (image);", "+\t\titem.setImage (image2);", "+\t\titem.setHighlightImage (image);", "+\timage2.dispose ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8177cab8d22596db5b5481e4b2ac9b4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "158b8166e876537d373b81ddbd77938495950d45", "commitAfterChange": "d9ff0920e38dbe40e7e183fc285b75f5b4dcdb26", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " int getPreferredWidth (int columnIndex)", "signatureAfterChange": " int getPreferredWidth (int columnIndex)", "diff": ["-\tint textPaintWidth = textWidths [columnIndex] + 2 * MARGIN_TEXT;", "-\tint result = getTextX (columnIndex) + textPaintWidth;", "+\tGC gc = new GC (parent);", "+\tgc.setFont (getFont (columnIndex));", "+\tint textPaintWidth = gc.textExtent (getText (columnIndex)).x + 2 * MARGIN_TEXT;", "+\tgc.dispose ();", "+\tint result = getTextX (columnIndex) + textPaintWidth + parent.getCellPadding ();\t/* right side cell pad */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11264cff8a5422ff1784671aecad66c6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "f717dec66adaebfcad41e696ea51e68f1d87c372", "commitAfterChange": "c4d6731ce2d59bc20ce4b3ace6800c2b7c6c7656", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  void updateText (short menuIndex)", "signatureAfterChange": "  void updateText (short menuIndex)", "diff": ["+\t\t\t\t\tacceleratorSet = true;", "-\t\t\t\t\tacceleratorSet = true;", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.SetMenuItemModifiers (parent.handle, menuIndex, (byte)OS.kMenuNoCommandModifier);", "+\t\t\t\t\tOS.SetMenuItemCommandKey (parent.handle, menuIndex, false, (char)0);", "+\t\t\t\t\tOS.SetMenuItemKeyGlyph (parent.handle, menuIndex, (short)OS.kMenuNullGlyph);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89dce2e642556ba4367585631c0078da", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "a3eda06a7a4c290420b73156206fa1800c9178ee", "commitAfterChange": "9837bb695405327b535c2924659cef1a3a71f994", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public boolean setText(String html, boolean trusted)", "signatureAfterChange": "  public boolean setText(String html, boolean trusted)", "diff": ["-\tuntrustedText = !trusted;", "-\t* Bug in Safari.  The web view segment faults in some circumstances", "-\t* when the text changes during the location changing callback.  The", "-\t* fix is to defer the work until the callback is done. ", "+\t* If this.html is not null then the about:blank page is already being loaded,", "+\t* so no navigate is required.  Just set the html that is to be shown.", "-\tif (changingLocation) {", "-\t\tthis.html = html;", "-\t} else {", "-\t\t_setText(html, trusted);", "-\t}", "-\treturn true;", "-}", "+\tboolean blankLoading = this.html != null;", "+\tthis.html = html;", "+\tuntrustedText = !trusted;", "+\tif (blankLoading) return true;", "+", "+\tNSURL inURL = NSURL.URLWithString(NSString.stringWith (ABOUT_BLANK));", "+\tNSURLRequest request = NSURLRequest.requestWithURL(inURL);", "+\tmainFrame.loadRequest(request);", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c68a35f64ee301494477c9dd6f6f5f40", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "c21fa84b875f0f6ef244b5d932a353331dd3a2f4", "commitAfterChange": "184c015077a758e2436a1406657ec96a0c2f65ac", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute (String fileName)", "diff": ["-\treturn workspace.openFile_withApplication_(fullPath, NSString.stringWith(name));", "+\tif (fileName.indexOf(':') == -1) {", "+\t\treturn workspace.openFile_withApplication_(fullPath, NSString.stringWith(name));", "+\t}", "+\tNSString str = fullPath.stringByAddingPercentEscapesUsingEncoding(OS.NSUTF8StringEncoding);", "+\tNSArray urls = NSArray.arrayWithObject(NSURL.static_URLWithString_(str));", "+\treturn workspace.openURLs(urls, NSString.stringWith(identifier), 0, null, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c461915a105dc88dd5b209eb8ddd72a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tAccessibleObject (int type, int widget, Accessible accessible, int parentType)", "signatureAfterChange": "  \tAccessibleObject (int type, int widget, Accessible accessible, int parentType, boolean isLightweight)", "diff": ["-\tAccessibleObject (int type, int widget, Accessible accessible, int parentType) {", "-\t\tthis (type, widget, accessible, parentType, false);", "-\t}", "+\t\tthis.parentType = parentType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0daa82cefa3d25e4f0716357dd7d235a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet162.java", "commitBeforeChange": "e0067777a5e0e0baaa32e22da277487e16b46856", "commitAfterChange": "96ee0aab22d519a560bc2f0087edb27d95811175", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  static Image getUncheckedImage (Display display)", "signatureAfterChange": "  static Image getStateImage (Display display, boolean checked)", "diff": ["+static Image getStateImage (Display display, boolean checked) {", "-", "-static Image getUncheckedImage (Display display) {", "-\tImage image = new Image (display, 16, 16);", "-\tGC gc = new GC (image);", "-\tgc.setBackground (display.getSystemColor (SWT.COLOR_YELLOW));", "-\tgc.fillOval (0, 0, 16, 16);", "-\tgc.dispose ();", "-\treturn image;", "-}", "+\tif (checked) {", "+\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_DARK_GREEN));", "+\t\tgc.drawLine (0, 0, 16, 16);", "+\t\tgc.drawLine (16, 0, 0, 16);", "+\tgc.dispose ();", "+\treturn image;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19ed3180b5e2f6ce8cfbcb2b104ffd2d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "91543b721ffce6370ab440aea3e1c8c5a1fc29a4", "commitAfterChange": "da8d75b25b34af33020e57a840ab5da8ae5b2800", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 151, "signatureBeforeChange": " public boolean setParent (Composite parent)", "signatureAfterChange": " public boolean setParent (Composite parent)", "diff": ["-\tif (OS.SetParent (handle, parent.handle) == 0) {", "-\t\treturn false;", "+\tif (this.parent == parent) return true;", "+\treleaseChild ();", "+\tShell newShell = parent.getShell (), oldShell = getShell ();", "+\tDecorations newDecorations = parent.menuShell (), oldDecorations = menuShell ();", "+\tif (oldShell != newShell || oldDecorations != newDecorations) {", "+\t\tfixChildren (newShell, oldShell, newDecorations, oldDecorations);", "+\tif (OS.SetParent (handle, parent.handle) == 0) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49f3d00ba3ababe33bf8a82a26dd90ad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ProgressBar.java", "commitBeforeChange": "b5b144c870a845c6b674bd3aa5351bdf169ec16c", "commitAfterChange": "257956b6dd31f969247b68558fac32348be012a7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public int getState ()", "signatureAfterChange": " int getState ()", "diff": ["-public int getState () {", "+/*public*/ int getState () {", "-\treturn (int)/*64*/OS.SendMessage (handle, OS.PBM_GETSTATE, 0, 0);", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\tint state = (int)/*64*/OS.SendMessage (handle, OS.PBM_GETSTATE, 0, 0);", "+\t\tswitch (state) {", "+\t\t\tcase OS.PBST_NORMAL: return SWT.NORMAL;", "+\t\t\tcase OS.PBST_ERROR: return SWT.ERROR;", "+\t\t\tcase OS.PBST_PAUSED: return SWT.PAUSED;", "+\t\t}", "+\t}", "+\treturn SWT.NORMAL;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d02868ff177469db5c6d47668bba2d39", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "4a4c1b31d515770075a47cb1841a5eb5b1e30d6e", "commitAfterChange": "04edb158337cc8ed95295501404de71e4c7de946", "methodNumberBeforeChange": 174, "methodNumberAfterChange": 174, "signatureBeforeChange": " int getVisualLineIndex(TextLayout layout, int offsetInLine)", "signatureAfterChange": " int getVisualLineIndex(TextLayout layout, int offsetInLine)", "diff": ["-\tif (lineIndex != 0 && offsetInLine == offsets[lineIndex] && caretAlignment == PREVIOUS_OFFSET_TRAILING) {", "-\t\tlineIndex--;", "-\t}", "+\tif (lineIndex != 0 && offsetInLine == offsets[lineIndex]) {", "+\t\tint lineY = layout.getLineBounds(lineIndex).y;", "+\t\tint caretY = getCaret().getLocation().y - topMargin - getLinePixel(getCaretLine());", "+\t\tif (lineY > caretY) lineIndex--;", "+ \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22db28448599bf97a4ca9962b0ea8331", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "5f03e7ea5c9fc385b4cee35c0ee6b3f49463ff24", "commitAfterChange": "dc1b8d5ff8d7ee8b7e3bfa00250ffc23a279557f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r void createHandle ()", "signatureAfterChange": "\r \r void createHandle ()", "diff": ["+\t\r", "+\t/*\r", "+\t* Feature in Windows.  Windows does not explicitly set the orientation of\r", "+\t* the header.  Instead, the orientation is inherited when WS_EX_LAYOUTRTL\r", "+\t* is specified for the table.  This means that when both WS_EX_LAYOUTRTL\r", "+\t* and WS_EX_NOINHERITLAYOUT are specified for the table, the header will\r", "+\t* not be oriented correctly.  The fix is to explicitly set the orientation\r", "+\t* for the header.\r", "+\t*/\r", "+\tif ((style & SWT.RIGHT_TO_LEFT) != 0) {\r", "+\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);\r", "+\t\tint extStyle = OS.GetWindowLong (hwndHeader, OS.GWL_EXSTYLE);\r", "+\t\tOS.SetWindowLong (hwndHeader, OS.GWL_EXSTYLE, extStyle | OS.WS_EX_LAYOUTRTL);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "116bfa5e69a58fe5414fc0e96aab5215", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "35b40f6926be8aebc8e64f5a0fe6a678c2143444", "commitAfterChange": "2169ca694d0491916d3b292d3f8b1b71ea19366d", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  void destroyItem (TreeItem item, int hItem)", "signatureAfterChange": "  void destroyItem (TreeItem item, int hItem)", "diff": ["+", "+\t/*", "+\t* Feature in Windows.  When an item is deleted and a tool tip", "+\t* is showing, Window requests the new text for the new item", "+\t* that is under the cursor right away.  This means that when", "+\t* multiple items are deleted, the tool tip flashes, showing", "+\t* each new item in the tool tip as it is scrolled into view.", "+\t* The fix is to hide tool tips when any item is deleted.", "+\t* ", "+\t* NOTE:  This only happens on Vista.", "+\t*/", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\tint hwndToolTip = OS.SendMessage (handle, OS.TVM_GETTOOLTIPS, 0, 0);", "+\t\tif (hwndToolTip != 0) OS.SendMessage (hwndToolTip, OS.TTM_POP, 0 ,0);", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "898504f46d6a3d6dcd412f6341396185", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet104.java", "commitBeforeChange": "8201bc01197365e40623c454922f861f30d5e6fa", "commitAfterChange": "2a9ec52c765b49c3181c4b3b239a1971ef3701e6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main(String[] args)", "signatureAfterChange": "  public static void main(String[] args)", "diff": ["+\tGC gc = new GC(image);", "+\tgc.setBackground(display.getSystemColor(SWT.COLOR_CYAN));", "+\tgc.fillRectangle(image.getBounds());", "+\tgc.drawText(\"Splash Screen\", 10, 10);", "+\tgc.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4d99c29f4d903cacdb843059edbe723", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "3c68f9ee7dd41a39c53e65d62867c81be822c9a7", "commitAfterChange": "ce2f7e8c7b675d9102a257c05ce75d57b51070a2", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  boolean SetScrollInfo (int hwnd, int flags, SCROLLINFO info, boolean fRedraw)", "signatureAfterChange": "  boolean SetScrollInfo (int hwnd, int flags, SCROLLINFO info, boolean fRedraw)", "diff": ["-\tboolean both = false;", "+\tboolean barVisible = false;", "-\tif (!visible) {", "-\t\t/*", "-\t\t* This line is intentionally commented.  Currently", "-\t\t* always show scrollbar as being enabled and visible.", "-\t\t*/", "-//\t\tif (OS.IsWinCE) error (SWT.ERROR_NOT_IMPLEMENTED);", "-\t\tif (!OS.IsWinCE) {", "-\t\t\tScrollBar bar = null;", "-\t\t\tswitch (flags) {", "-\t\t\t\tcase OS.SB_HORZ:", "-\t\t\t\t\tbar = parent.getVerticalBar ();", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OS.SB_VERT:", "-\t\t\t\t\tbar = parent.getHorizontalBar ();", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tboth = bar != null && !bar.getVisible ();", "+\t", "+\t/*", "+\t* This line is intentionally commented.  Currently", "+\t* always show scrollbar as being enabled and visible.", "+\t*/", "+//\tif (OS.IsWinCE) error (SWT.ERROR_NOT_IMPLEMENTED);", "+\tScrollBar bar = null;", "+\tif (!OS.IsWinCE) {", "+\t\tswitch (flags) {", "+\t\t\tcase OS.SB_HORZ:", "+\t\t\t\tbar = parent.getVerticalBar ();", "+\t\t\t\tbreak;", "+\t\t\tcase OS.SB_VERT:", "+\t\t\t\tbar = parent.getHorizontalBar ();", "+\t\t\t\tbreak;", "+\t\tbarVisible = bar != null && bar.getVisible ();", "+\t", "-\t\t\tOS.ShowScrollBar (hwnd, both ? OS.SB_BOTH : flags, false);", "+\t\t\tOS.ShowScrollBar (hwnd, !barVisible ? OS.SB_BOTH : flags, false);", "+\t\t}", "+\t}", "+\t", "+\t/*", "+\t* Bug in Windows.  When only one scroll bar is visible,", "+\t* and the thumb changes using SIF_RANGE or SIF_PAGE", "+\t* from being visible to hidden, the opposite scroll", "+\t* bar is incorrectly made visible.  The next time the", "+\t* parent is resized (or another scroll bar operation", "+\t* is performed), the opposite scroll bar draws.  The", "+\t* fix is to hide the opposite scroll bar again. ", "+\t*  ", "+\t* NOTE: This problem only happens on Vista", "+\t*/", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\tif (visible && !barVisible) {", "+\t\t\tOS.ShowScrollBar (hwnd, flags == OS.SB_HORZ ? OS.SB_VERT : OS.SB_HORZ, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d07e1855adaf53d69cc2f5e249d2e0b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "680ba5db6dfec388478bf495dd25549c8eb8287a", "commitAfterChange": "43ed6d330387f61fc4ff2b88c2587dd66e9bc535", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public Widget findWidget (int handle)", "signatureAfterChange": " public Widget findWidget (int handle)", "diff": ["-//\treturn getWidget (handle);", "+\tif (handle != 0 && OS.objc_msgSend(handle, OS.sel_respondsToSelector_1, OS.sel_tag) != 0) {", "+\t\tint tag = OS.objc_msgSend(handle, OS.sel_tag);", "+\t\tif (tag != -1) {", "+\t\t\tObject object = OS.JNIGetObject(tag);", "+\t\t\tif (object instanceof Widget) {", "+\t\t\t\treturn (Widget)object;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55b9de4fd6b5a42fa121d6d93d3ba73b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3267320d7c5bbaa6743022a44ad2fb9c8bf04682", "commitAfterChange": "3d69dc45257158dbb91cb9d9dffc563be912ce34", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\t\t\t\t\t\tint inset = 2;", "-\t\t\t\t\t\trect.left = itemRect.right - inset + 1;", "+\t\t\t\t\t\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "+\t\t\t\t\t\trect.left = itemRect.right - gridWidth;", "+\t\t\tcase OS.HDN_ITEMCLICKW:", "+\t\t\tcase OS.HDN_ITEMCLICKA: {", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tTreeColumn column = columns [phdn.iItem];", "+\t\t\t\tif (column != null) {", "+\t\t\t\t\tcolumn.postEvent (SWT.Selection);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d020fac04beff26450e62f36e3ac1def", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "9557ec5f83857c038e16871230af1bc8baa0d33e", "commitAfterChange": "4690e712f150524e76cd83cdc530ca56d134651d", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "  void setCheckboxImageList (int width, int height, boolean fixScroll)", "signatureAfterChange": "  void setCheckboxImageList (int width, int height, boolean fixScroll)", "diff": ["+\t/*", "+\t* Bug in Windows.  Setting the LVSIL_STATE state image list", "+\t* when the table already has a LVSIL_SMALL image list causes", "+\t* pixel corruption of the images.  The fix is to reset the", "+\t* LVSIL_SMALL image list.", "+\t*/", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\tint hImageList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0);", "+\t\tOS.SendMessage (handle, OS.LVM_SETIMAGELIST, OS.LVSIL_SMALL, hImageList);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d02fa50dd7494a3f937dfadf12dcbbb2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CLabel.java", "commitBeforeChange": "437b26428f10a35a326ef6b319e71308ad9cdb90", "commitAfterChange": "1fb12053b80b263df45cd22a53291eee547e711e", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " protected String shortenText(GC gc, String t, int width)", "signatureAfterChange": " protected String shortenText(GC gc, String t, int width)", "diff": ["+\tTextLayout layout = new TextLayout (getDisplay());", "+\tlayout.setText(t);", "+\tmid = validateOffset(layout, mid);", "-\t\tString s2 = t.substring(l-mid, l);", "+\t\tString s2 = t.substring(validateOffset(layout, l-mid), l);", "-\t\t\tmid = (max+min)/2;", "+\t\t\tmid = validateOffset(layout, (max+min)/2);", "-\t\t\tmid = (max+min)/2;", "+\t\t\tmid = validateOffset(layout, (max+min)/2);", "-\tif (mid == 0) return t;", "- \treturn t.substring(0, mid)+ELLIPSIS+t.substring(l-mid, l);", "+\tString result = mid == 0 ? t : t.substring(0, mid) + ELLIPSIS + t.substring(validateOffset(layout, l-mid), l);", "+\tlayout.dispose();", "+ \treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aa421d312c7c7f960440869194fe5f3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "48284f7cc75cd2bcda500d18cdb3da648cbcea0f", "commitAfterChange": "ef5c191c4d5ab1f66dfd76ad3ef6127f270be353", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tif (OS.WIN32_VERSION < OS.VERSION (4, 10)) return;", "-\tif ((style & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\tint /*long*/ hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "-\t\tint bits2 = OS.GetWindowLong (hwndHeader, OS.GWL_EXSTYLE);", "-\t\tOS.SetWindowLong (hwndHeader, OS.GWL_EXSTYLE, bits2 | OS.WS_EX_LAYOUTRTL);", "+\tif (OS.WIN32_VERSION >= OS.VERSION (4, 10)) {", "+\t\tif ((style & SWT.RIGHT_TO_LEFT) != 0) {", "+\t\t\tint /*long*/ hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\t\tint bits2 = OS.GetWindowLong (hwndHeader, OS.GWL_EXSTYLE);", "+\t\t\tOS.SetWindowLong (hwndHeader, OS.GWL_EXSTYLE, bits2 | OS.WS_EX_LAYOUTRTL);", "+\t\t\tint /*long*/ hwndTooltop = OS.SendMessage (handle, OS.LVM_GETTOOLTIPS, 0, 0);", "+\t\t\tint bits3 = OS.GetWindowLong (hwndTooltop, OS.GWL_EXSTYLE);", "+\t\t\tOS.SetWindowLong (hwndTooltop, OS.GWL_EXSTYLE, bits3 | OS.WS_EX_LAYOUTRTL);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef062212f8bd77149a8269158d8856ba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/ScrolledCompositeLayout.java", "commitBeforeChange": "43b30ece21092f7a44517a30edc679c7c981f51e", "commitAfterChange": "73ee56991535559e50652ecc6391cdfa11c08af2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  protected void layout(Composite composite, boolean flushCache)", "signatureAfterChange": "  protected void layout(Composite composite, boolean flushCache)", "diff": ["+\tGC gc = new GC (sc);", "+\t\thBar.setIncrement (gc.getFontMetrics ().getAverageCharWidth ());", "+\t\thBar.setPageIncrement (hostRect.width);", "+\t\tvBar.setIncrement (gc.getFontMetrics ().getHeight ());", "+\t\tvBar.setPageIncrement (hostRect.height);", "+\tgc.dispose ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f80cf9c487b2fde58bb53cb108823bff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "36e56391cd23da7679ad472475543734665f47fc", "commitAfterChange": "6bcc0a20eac3c19a3dbab5b76bfcdd2c2f5b68e6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private int dragTrackingHandler(int message, int theWindow, int handlerRefCon, int theDrag)", "signatureAfterChange": "  private int dragTrackingHandler(int message, int theWindow, int handlerRefCon, int theDrag)", "diff": ["+\tif (event.operations == 0 || event.dataTypes == null || event.dataTypes.length == 0) {", "+\t\tif (message == OS.kDragTrackingLeaveWindow) {", "+\t\t\tOS.SetThemeCursor(OS.kThemeArrowCursor);", "+\t\t} else {", "+\t\t\tOS.SetThemeCursor(OS.kThemeNotAllowedCursor);", "+\t\t}", "+\t\treturn OS.dragNotAcceptedErr;", "+\t}", "+\t"]}], "num": 42986}
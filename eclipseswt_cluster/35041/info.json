{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16a626d74a8102df9c63a4391a19245d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "392790338aee351ec9d00eda52c471ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "14fbe017d1e3dc78020213280156fbd51d492d0a", "commitAfterChange": "e204c746a54241ff7faf790f527aebbdadf8a989", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r void init (Device device, FontData fd)", "signatureAfterChange": "\r \r void init (Device device, FontData[] fds)", "diff": ["-void init (Device device, FontData fd) {\r", "+\r", "+void init (Device device, FontData[] fds) {\r", "-\tint fontListEntry;\r", "-//\tint fontStruct = loadFont(xDisplay, fd);\r", "-//\tif (fontStruct == 0) {\r", "-//\t\t/*\r", "-//\t\t* If the desired font can not be loaded, the XLFD fields are wildcard\r", "-//\t\t* in order to preserve the font style and height. If there is no\r", "-//\t\t* font with the desired style and height, the slant, weight and points\r", "-//\t\t* are wildcard in that order, until a font can be loaded.\r", "-//\t\t*/\r", "-//\t\tFontData newFD = new FontData();\r", "-//\t\tnewFD.slant = fd.slant;\r", "-//\t\tnewFD.weight = fd.weight;\r", "-//\t\tnewFD.points = fd.points;\r", "-//\t\tnewFD.characterSetName = fd.characterSetName;\r", "-//\t\tif (newFD.characterSetName == null) {\r", "-//\t\t\tnewFD.characterSetName = device.characterSetName;\r", "-//\t\t}\r", "-//\t\tnewFD.characterSetRegistry = fd.characterSetRegistry;\r", "-//\t\tif (newFD.characterSetRegistry == null) {\r", "-//\t\t\tnewFD.characterSetRegistry = device.characterSetRegistry;\r", "-//\t\t}\r", "-//\t\tfontStruct = matchFont(xDisplay, newFD, false);\r", "-//\r", "-//\t\t/* Failed to load any font. Use the system font. */\r", "-//\t\tif (fontStruct == 0) {\r", "-//\t\t\thandle = device.systemFont;\r", "-//\t\t\tif (handle != 0) return;\r", "-//\t\t}\r", "-//\t}\r", "-//\tfontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONT, fontStruct);\r", "-\tint horizontalResolution = fd.horizontalResolution;\r", "-\tint verticalResolution = fd.verticalResolution;\r", "-\tif (device.setDPI) {\r", "-\t\tPoint dpi = device.getDPI();\r", "-\t\tif (fd.horizontalResolution == 0) fd.horizontalResolution  = dpi.x;\r", "-\t\tif (fd.verticalResolution == 0)\tfd.verticalResolution = dpi.y;\r", "-\t}\r", "-\tif (fd.lang != null) {\r", "-\t\tString lang = fd.lang;\r", "-\t\tString country = fd.country;\r", "-\t\tString variant = fd.variant;\r", "+\t\r", "+\t/* A alternative locale have to be set in the first font data */\r", "+\tFontData firstFd = fds[0];\r", "+\tif (firstFd.lang != null) {\r", "+\t\tString lang = firstFd.lang;\r", "+\t\tString country = firstFd.country;\r", "+\t\tString variant = firstFd.variant;\r", "-\tint fontSet = loadFontSet(xDisplay, fd);\r", "-\tif (fontSet == 0) {\r", "-\t\t/*\r", "-\t\t* If the desired font can not be loaded, the XLFD fields are wildcard\r", "-\t\t* in order to preserve the font style and height. If there is no\r", "-\t\t* font with the desired style and height, the slant, weight and points\r", "-\t\t* are wildcard in that order, until a font can be loaded.\r", "-\t\t*/\r", "-\t\tFontData newFD = new FontData();\r", "-\t\tnewFD.slant = fd.slant;\r", "-\t\tnewFD.weight = fd.weight;\r", "-\t\tnewFD.points = fd.points;\r", "-\t\tnewFD.horizontalResolution = fd.horizontalResolution;\r", "-\t\tnewFD.verticalResolution = fd.verticalResolution;\r", "-\t\tnewFD.characterSetName = fd.characterSetName;\r", "-\t\tif (newFD.characterSetName == null) {\r", "-\t\t\tnewFD.characterSetName = device.characterSetName;\r", "-\t\t}\r", "-\t\tnewFD.characterSetRegistry = fd.characterSetRegistry;\r", "-\t\tif (newFD.characterSetRegistry == null) {\r", "-\t\t\tnewFD.characterSetRegistry = device.characterSetRegistry;\r", "-\t\t}\r", "-\t\tfontSet = matchFont(xDisplay, newFD, true);\r", "-\t}\r", "-\tif (fd.lang != null) OS.setlocale (OS.LC_CTYPE, new byte [0]);\r", "-\t/* Failed to load any font. Use the system font. */\r", "+\t/* Copy font datas since they might be simplified. */\r", "+\tPoint dpi = null;\r", "+\tif (device.setDPI) dpi = device.getDPI();\r", "+\tFontData[] newFds = new FontData [fds.length];\r", "+\tfor (int i = 0; i < fds.length; i++) {\r", "+\t\tFontData newFd = newFds[i] = new FontData();\r", "+\t\tFontData fd = fds[i];\r", "+\t\tnewFd.foundry = fd.foundry;\r", "+\t\tnewFd.fontFamily = fd.fontFamily;\r", "+\t\tnewFd.weight = fd.weight;\r", "+\t\tnewFd.slant = fd.slant;\r", "+\t\tnewFd.setWidth = fd.setWidth;\r", "+\t\tnewFd.addStyle = fd.addStyle;\r", "+\t\tnewFd.pixels = fd.pixels;\r", "+\t\tnewFd.points = fd.points;\r", "+\t\tif (dpi != null) {\r", "+\t\t\tnewFd.horizontalResolution = dpi.x;\r", "+\t\t\tnewFd.verticalResolution = dpi.y;\r", "+\t\t} else {\r", "+\t\t\tnewFd.horizontalResolution = fd.horizontalResolution;\r", "+\t\t\tnewFd.verticalResolution = fd.verticalResolution;\r", "+\t\t}\r", "+\t\tnewFd.spacing = fd.spacing;\r", "+\t\tnewFd.averageWidth = fd.averageWidth;\r", "+\t\tnewFd.characterSetRegistry = fd.characterSetRegistry;\r", "+\t\tnewFd.characterSetName = fd.characterSetName;\r", "+\t}\r", "+\t\r", "+\t/* Load desired font. */\r", "+\tint[] missingCharset = new int[1];\r", "+\tint[] missingCharsetCount = new int[1];\r", "+\tint[] defString = new int[1];\r", "+\tStringBuffer stringBuffer = new StringBuffer(newFds[0].getXlfd());\t\r", "+\tfor (int i = 1; i < newFds.length; i++) {\r", "+\t\tstringBuffer.append (',');\r", "+\t\tstringBuffer.append (newFds[i].getXlfd());\r", "+\t}\r", "+\tbyte[] buffer = Converter.wcsToMbcs (null, stringBuffer.toString() , true);\r", "+\tint fontSet = OS.XCreateFontSet (xDisplay, buffer, missingCharset, missingCharsetCount, defString);\r", "+\t\r", "+\t/*\r", "+\t* If failed to load desired font or there are missing character\r", "+\t* sets, simplify XLFDs and try again.\r", "+\t*/\r", "+\tif (fontSet == 0 || missingCharsetCount[0] != 0) {\r", "+\t\tint index = 0;\r", "+\t\tint lastMissingCharsetCount = 0xFFFF;\r", "+\t\tString loadedXlfds = getXlfds(fontSet);\r", "+\t\twhile ((index = wildcardXfld(newFds, index)) < fds.length) {\r", "+\t\t\tstringBuffer.setLength(0);\r", "+\t\t\tstringBuffer.append(loadedXlfds);\r", "+\t\t\tif (stringBuffer.length() != 0) stringBuffer.append(\",\");\r", "+\t\t\tstringBuffer.append(newFds[index].getXlfd());\r", "+\t\t\tbuffer = Converter.wcsToMbcs(null, stringBuffer.toString(), true);\r", "+\t\t\tif (fontSet != 0) OS.XFreeFontSet(xDisplay, fontSet);\r", "+\t\t\tfontSet = OS.XCreateFontSet(xDisplay, buffer, missingCharset, missingCharsetCount, defString);\r", "+\t  \t\tif (fontSet != 0) {\r", "+\t  \t\t\tif (missingCharsetCount[0] == 0) {\r", "+\t  \t\t\t\tbreak;\r", "+\t  \t\t\t} else {\r", "+\t  \t\t\t\tif (lastMissingCharsetCount > missingCharsetCount[0]) {\r", "+\t\t  \t\t\t\tlastMissingCharsetCount = missingCharsetCount[0];\r", "+\t\t  \t\t\t\tloadedXlfds = getXlfds(fontSet);\r", "+\t  \t\t\t\t}\t\t\t\t\r", "+\t  \t\t\t}\r", "+\t  \t\t}\r", "+\t\t}\r", "+\t}\r", "+\t\r", "+\t/* If no font could be loaded, use system font. */\r", "-\t\thandle = device.systemFont.handle;\r", "+\t\tFont systemFont = device.systemFont;\r", "+\t\thandle = systemFont.handle;\r", "+\t\tcodePage = systemFont.codePage;\r", "-\t\tfontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONTSET, fontSet);\r", "-\t\tif (fontListEntry == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "-\t\thandle = OS.XmFontListAppendEntry(0, fontListEntry);\r", "-\t\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "+\t\tint fontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONTSET, fontSet);\r", "+\t\tif (fontListEntry != 0) {\r", "+\t\t\thandle = OS.XmFontListAppendEntry(0, fontListEntry);\r", "+\t\t\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "+\t\t\tint codesetPtr = OS.nl_langinfo(OS.CODESET);\r", "+\t\t\tint length = OS.strlen(codesetPtr);\r", "+\t\t\tbyte[] codeset = new byte[length];\r", "+\t\t\tOS.memmove(codeset, codesetPtr, length);\r", "+\t\t\tcodePage = new String(codeset);\r", "+\t\t}\r", "-\tfd.horizontalResolution = horizontalResolution;\r", "-\tfd.verticalResolution = verticalResolution;\r", "+\r", "+\t/* Reset locale */\r", "+\tif (firstFd.lang != null) OS.setlocale(OS.LC_CTYPE, new byte[0]);\r", "+\r", "-\t\r", "-\tcodePage = getCodePage(xDisplay, handle);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5561a2a019bd7f9e6a22a79a97f4dce7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "2be0f523c12be706f131f18494ce7c53c5d33e35", "commitAfterChange": "12b097f1ff6fdc23e2e6d19434a4af7db1bb871d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \r void init (Device device, FontData[] fds)", "signatureAfterChange": "\r \r void init (Device device, FontData[] fds)", "diff": ["-\r", "-\tint xDisplay = device.xDisplay;\r", "-\t/* An alternative locale have to be set in the first font data */\r", "+\t/* Change current locale if needed. Note: only the first font data is used */\r", "-\t}\t\t\r", "+\t}\r", "-\t/* Copy font datas since they might be simplified. */\r", "+\t/* Generate desire font name */\r", "-\tFontData[] newFds = new FontData [fds.length];\r", "+\tStringBuffer stringBuffer = new StringBuffer();\r", "-\t\tFontData newFd = newFds[i] = new FontData();\r", "-\t\tnewFd.foundry = fd.foundry;\r", "-\t\tnewFd.fontFamily = fd.fontFamily;\r", "-\t\tnewFd.weight = fd.weight;\r", "-\t\tnewFd.slant = fd.slant;\r", "-\t\tnewFd.setWidth = fd.setWidth;\r", "-\t\tnewFd.addStyle = fd.addStyle;\r", "-\t\tnewFd.pixels = fd.pixels;\r", "-\t\tnewFd.points = fd.points;\r", "+\t\tint hRes = fd.horizontalResolution, vRes = fd.verticalResolution;\r", "-\t\t\tnewFd.horizontalResolution = dpi.x;\r", "-\t\t\tnewFd.verticalResolution = dpi.y;\r", "-\t\t} else {\r", "-\t\t\tnewFd.horizontalResolution = fd.horizontalResolution;\r", "-\t\t\tnewFd.verticalResolution = fd.verticalResolution;\r", "+\t\t\tfd.horizontalResolution = dpi.x;\r", "+\t\t\tfd.verticalResolution = dpi.y;\r", "-\t\tnewFd.spacing = fd.spacing;\r", "-\t\tnewFd.averageWidth = fd.averageWidth;\r", "-\t\tnewFd.characterSetRegistry = fd.characterSetRegistry;\r", "-\t\tnewFd.characterSetName = fd.characterSetName;\r", "-\t}\r", "-\t\r", "-\t/* Load desired font. */\r", "-\tint[] missingCharset = new int[1];\r", "-\tint[] missingCharsetCount = new int[1];\r", "-\tint[] defString = new int[1];\r", "-\tStringBuffer stringBuffer = new StringBuffer(newFds[0].getXlfd());\t\r", "-\tfor (int i=1; i<newFds.length; i++) {\r", "+\t\tstringBuffer.append(fd.getXlfd());\r", "-\t\tstringBuffer.append(newFds[i].getXlfd());\r", "+\t\tfd.horizontalResolution = hRes;\r", "+\t\tfd.verticalResolution = vRes;\r", "-\tbyte[] buffer = Converter.wcsToMbcs(null, stringBuffer.toString() , true);\r", "-\tint fontSet = OS.XCreateFontSet(xDisplay, buffer, missingCharset, missingCharsetCount, defString);\r", "-\t\r", "+\r", "+\t/* Append simplified font name */\t\t\r", "+\tFontData newFd = new FontData();\r", "+\tnewFd.points = firstFd.points;\r", "-\t* If failed to load desired font or there are missing character\r", "-\t* sets, simplify XLFDs and try again.\r", "+\t* Bug in Motif.  In Japanese AIX only, in some cases loading a bold Japanese\r", "+\t* font takes a very long time (10 minutes) when there are no Japanese bold\r", "+\t* fonts available.  The fix is to wildcard the field weight.\r", "-\tif (fontSet == 0 || missingCharsetCount[0] != 0) {\r", "-\t\tint index = 0;\r", "-\t\tint lastMissingCharsetCount = fontSet != 0 ? missingCharsetCount[0] : 0xFFFF;\r", "-\t\tString loadedXlfds = getXlfds(fontSet);\r", "-\t\twhile ((index = wildcardXfld(newFds, index)) < newFds.length) {\r", "-\t\t\tstringBuffer.setLength(0);\r", "-\t\t\tstringBuffer.append(loadedXlfds);\r", "-\t\t\tif (stringBuffer.length() != 0) stringBuffer.append(\",\");\r", "-\t\t\tstringBuffer.append(newFds[index].getXlfd());\r", "-\t\t\tbuffer = Converter.wcsToMbcs(null, stringBuffer.toString(), true);\r", "-\t\t\tif (missingCharset[0] != 0) OS.XFreeStringList (missingCharset[0]);\r", "-\t\t\tif (fontSet != 0) OS.XFreeFontSet(xDisplay, fontSet);\r", "-\t\t\tfontSet = OS.XCreateFontSet(xDisplay, buffer, missingCharset, missingCharsetCount, defString);\r", "-\t  \t\tif (fontSet != 0) {\r", "-\t  \t\t\tif (missingCharsetCount[0] == 0) {\r", "-\t  \t\t\t\tbreak;\r", "-\t  \t\t\t} else {\r", "-\t  \t\t\t\tif (lastMissingCharsetCount > missingCharsetCount[0]) {\r", "-\t\t  \t\t\t\tlastMissingCharsetCount = missingCharsetCount[0];\r", "-\t\t  \t\t\t\tloadedXlfds = getXlfds(fontSet);\r", "-\t  \t\t\t\t}\t\t\t\t\r", "-\t  \t\t\t}\r", "-\t  \t\t}\r", "-\t\t}\r", "+\tif (OS.IsAIX && OS.IsDBLocale) {\r", "+\t\tstringBuffer.append(newFd.getXlfd());\r", "+\t} else {\r", "+\t\tnewFd.weight = firstFd.weight;\r", "+\t\tnewFd.slant = firstFd.slant;\r", "+\t\tstringBuffer.append(newFd.getXlfd());\r", "+\t\tnewFd.weight = null;\r", "+\t\tnewFd.slant = null;\t\t\r", "+\t\tstringBuffer.append(',');\r", "+\t\tstringBuffer.append(newFd.getXlfd());\r", "-\tif (missingCharset[0] != 0) OS.XFreeStringList (missingCharset[0]);\r", "-\t/* If no font could be loaded, use the system font. */\r", "-\tif (fontSet == 0) {\r", "+\t/* Load font list entry */\t\t \r", "+\tbyte[] buffer = Converter.wcsToMbcs(null, stringBuffer.toString() , true);\r", "+\tint fontListEntry = OS.XmFontListEntryLoad(device.xDisplay, buffer, OS.XmFONT_IS_FONTSET, OS.XmFONTLIST_DEFAULT_TAG);\r", "+\tif (fontListEntry != 0) {\r", "+\t\thandle = OS.XmFontListAppendEntry(0, fontListEntry);\r", "+\t\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "+\t\tint codesetPtr = OS.nl_langinfo(OS.CODESET);\r", "+\t\tint length = OS.strlen(codesetPtr);\r", "+\t\tbyte[] codeset = new byte[length];\r", "+\t\tOS.memmove(codeset, codesetPtr, length);\r", "+\t\tcodePage = new String(Converter.mbcsToWcs(null, codeset));\r", "+\t} else {\r", "-\t} else {\r", "-\t\tint fontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONTSET, fontSet);\r", "-\t\tif (fontListEntry != 0) {\r", "-\t\t\thandle = OS.XmFontListAppendEntry(0, fontListEntry);\r", "-\t\t\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "-\t\t\tint codesetPtr = OS.nl_langinfo(OS.CODESET);\r", "-\t\t\tint length = OS.strlen(codesetPtr);\r", "-\t\t\tbyte[] codeset = new byte[length];\r", "-\t\t\tOS.memmove(codeset, codesetPtr, length);\r", "-\t\t\tcodePage = new String(codeset);\r", "-\t\t}\r", "-\r", "-\t/* Reset locale */\r", "+\t\r", "+\t/* Reset current locale if needed */\r"]}], "num": 35041}
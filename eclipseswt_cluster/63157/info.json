{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a2c91b35aded3dd0297ee9cb8c2034a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6aa03fccbe6104a4e5f522f4e1c8ae8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3fcd225fa2e66d3e13758e8a90c5c8fb576c874a", "commitAfterChange": "95f8ac5e2e6850065945e7f7faeea45702471c6f", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void setSmallSize ()", "signatureAfterChange": "  int accessibilityAttributeValue(int id, int sel, int arg0)", "diff": ["+int /*long*/ accessibilityAttributeValue(int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "+\tint /*long*/ returnValue = 0;", "+\tNSString attributeName = new NSString(arg0);", "+\t", "+\t// If the check column is visible, don't report it back as a column for accessibility purposes.", "+\t// The check column is meant to appear as a part of the first column.", "+\tif (attributeName.isEqualToString (OS.NSAccessibilityColumnsAttribute) || attributeName.isEqualToString(OS.NSAccessibilityVisibleColumnsAttribute)) {", "+\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\tint /*long*/ superValue = super.accessibilityAttributeValue(id, sel, arg0);", "+\t\t\tif (superValue != 0) {", "+\t\t\t\tNSArray columns = new NSArray(superValue);", "+\t\t\t\tNSMutableArray columnsWithoutCheck = NSMutableArray.arrayWithCapacity(columns.count() - 1);", "+\t\t\t\tcolumnsWithoutCheck.addObjectsFromArray(columns);", "+\t\t\t\tcolumnsWithoutCheck.removeObjectAtIndex(0);", "+\t\t\t\treturnValue = columnsWithoutCheck.id;", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tif (returnValue != 0) {", "+\t\treturn returnValue;", "+\t} else {", "+\t\treturn super.accessibilityAttributeValue(id, sel, arg0);", "+\t}", "+}", "-", "-void setSmallSize () {", "-\tif (checkColumn == null) return;", "-\tcheckColumn.dataCell ().setControlSize (OS.NSSmallControlSize);", "-\tcheckColumn.setWidth (getCheckColumnWidth ());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76e3ce89ff21853c4707102ea70363f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d8d3e8f612b1662e51aaeb1aba1b797cad6504c1", "commitAfterChange": "a2a2b61ca97ad1454fa39c9d961ae445a63a1a20", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  int accessibilityAttributeValue (int id, int sel, int arg0)", "signatureAfterChange": "  boolean accessibilityIsIgnored(int id, int sel)", "diff": ["-int accessibilityAttributeValue (int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "-\t", "-\tNSString attributeName = new NSString(arg0);", "-\t", "-\tif (accessible != null) {", "-\t\tid returnObject = accessible.internal_accessibilityAttributeValue(attributeName, ACC.CHILDID_SELF);", "-\t\tif (returnObject != null) return returnObject.id;", "-\t}", "-\t", "-\t// Accessibility Verifier requires a subrole for windows, even though most other controls don't have a subrole.", "-\t// So, we need to override and return the right subrole here.", "-\tif (attributeName.isEqualToString (OS.NSAccessibilitySubroleAttribute)) {", "-\t\tNSString roleText = null;", "-", "-\t\tif ((style & SWT.ON_TOP) != 0)", "-\t\t\troleText = OS.NSAccessibilityFloatingWindowSubrole;", "-\t\telse", "-\t\t\troleText = OS.NSAccessibilityStandardWindowSubrole;", "-\t\t", "-\t\treturn roleText.id;", "-\t}", "-\t", "-\treturn super.accessibilityAttributeValue(id, sel, arg0);", "+boolean accessibilityIsIgnored(int /*long*/ id, int /*long*/ sel) {", "+\t// The content view of a shell is always ignored.", "+\tif (id == view.id) return true;", "+\treturn super.accessibilityIsIgnored(id, sel);"]}], "num": 63157}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e71778fe27a0d14395015d6cbada1ba", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1838222f6a3ba37f4a09bdc5d0beda4d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "496d4a0977bda5ea90289b447545064afbcbabfa", "commitAfterChange": "b3b12507ebeba4a8ffbdb02ea3586141d0d03d53", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tif (!OS.IsWinCE) {", "-\t\tint hIcon = OS.LoadIcon (0, OS.IDI_APPLICATION);", "-\t\tOS.SendMessage (handle, OS.WM_SETICON, OS.ICON_SMALL, hIcon);", "+\tif ((state & FOREIGN_HANDLE) == 0) {", "+\t\tif (!OS.IsWinCE) {", "+\t\t\tint hIcon = OS.LoadIcon (0, OS.IDI_APPLICATION);", "+\t\t\tOS.SendMessage (handle, OS.WM_SETICON, OS.ICON_SMALL, hIcon);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44f90c79fa6a29e4d32fa243c3988ded", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "a8b74e75ae0bc2282703c2c3690d1eb9e1e969ec", "commitAfterChange": "7e81b84a2c12e711d885a4cd4a47a7eab239d8f4", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 209, "signatureBeforeChange": "  LRESULT WM_MOVE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_MOVE (int wParam, int lParam)", "diff": ["-\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\tif (OS.IsWindowVisible (handle)) {", "-\t\t\tif (findThemeControl () != null) {", "-\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "-\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "+\tif ((state & TRANSPARENT) != 0) {", "+\t\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "+\t\t\tif (OS.IsWindowVisible (handle)) {", "+\t\t\t\tif (findThemeControl () != null) {", "+\t\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "+\t\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83b2383470ce7aa73c74521d2f773176", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "61543d447b16e5575c1e9c4cbc37aca5973d8e40", "commitAfterChange": "163cf0f05b0fcf27a13be2a0d956931bc7a0cf48", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": "   void setBackground ()", "signatureAfterChange": "   void setBackground ()", "diff": ["-\tif (backgroundImage != null) {", "-\t\tint imageHandle = backgroundImage.handle;", "-\t\tbrush = OS.gcnew_ImageBrush (imageHandle);", "-\t\tOS.TileBrush_TileMode (brush, OS.TileMode_Tile);", "-\t\tOS.TileBrush_Stretch (brush, OS.Stretch_Fill);", "-\t\tOS.TileBrush_ViewportUnits (brush, OS.BrushMappingMode_Absolute);", "-\t\tint rect = OS.gcnew_Rect (0, 0, OS.BitmapSource_PixelWidth (imageHandle), OS.BitmapSource_PixelHeight (imageHandle));", "-\t\tOS.TileBrush_Viewport (brush, rect);", "-\t\tOS.GCHandle_Free (rect);", "-\t} else {", "-\t\t//TODO verify parent backgroundMode", "-\t\tint color = background;", "-\t\tif (color == 0) {", "-\t\t\tcolor = defaultBackground ();", "-\t\t\tif ((state & THEME_BACKGROUND) != 0) {", "-\t\t\t\tControl themeControl = findThemeControl ();", "-\t\t\t\tif (themeControl != null) {", "-\t\t\t\t\tif (color != 0) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Feature in WPF. If the control does not have a background", "-\t\t\t\t\t\t* brush it does not receive input events.", "-\t\t\t\t\t\t* The fix is to set a transparent background.  ", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tcolor = OS.Colors_Transparent;", "+\tif ((state & PARENT_BACKGROUND) == 0) {", "+\t\tif (backgroundImage != null) {", "+\t\t\tint imageHandle = backgroundImage.handle;", "+\t\t\tbrush = OS.gcnew_ImageBrush (imageHandle);", "+\t\t\tOS.TileBrush_TileMode (brush, OS.TileMode_Tile);", "+\t\t\tOS.TileBrush_Stretch (brush, OS.Stretch_Fill);", "+\t\t\tOS.TileBrush_ViewportUnits (brush, OS.BrushMappingMode_Absolute);", "+\t\t\tint rect = OS.gcnew_Rect (0, 0, OS.BitmapSource_PixelWidth (imageHandle), OS.BitmapSource_PixelHeight (imageHandle));", "+\t\t\tOS.TileBrush_Viewport (brush, rect);", "+\t\t\tOS.GCHandle_Free (rect);", "+\t\t} else {", "+\t\t\tint color = background;", "+\t\t\tif (color == 0) {", "+\t\t\t\tcolor = defaultBackground ();", "+\t\t\t\tif ((state & THEME_BACKGROUND) != 0) {", "+\t\t\t\t\tControl themeControl = findThemeControl ();", "+\t\t\t\t\tif (themeControl != null) {", "+\t\t\t\t\t\tif (color != 0) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t* Feature in WPF. If the control does not have a background", "+\t\t\t\t\t\t\t* brush it does not receive input events.", "+\t\t\t\t\t\t\t* The fix is to set a transparent background.  ", "+\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\tcolor = OS.Colors_Transparent;", "+\t\t\t\t\t\t}", "-\t\t}", "-\t\tif (color != 0) {", "-\t\t\tbrush = OS.gcnew_SolidColorBrush (color);", "+\t\t\tif (color != 0) {", "+\t\t\t\tbrush = OS.gcnew_SolidColorBrush (color);", "+\t\t\t}"]}], "num": 9671}
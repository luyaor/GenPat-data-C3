{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75706b3fe916bf92095a38886e08ec9a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "929f80981b6257a5135051d202910a81", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "332536a6db872df6c8a55983e5b9507181322bee", "commitAfterChange": "c54491881240cacf62bc496023e05818dd936c3f", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " boolean sendKeyEvent (NSEvent nsEvent, int type)", "signatureAfterChange": "  boolean sendKeyEvent (NSEvent nsEvent, int type)", "diff": ["-//TODO - missing modifier keys (see flagsChanged:)", "-\tint count = 0;", "-\tNSString keys = nsEvent.characters();", "-\t//TODO - check lowercase doesn't mangle char codes", "-\tNSString keyCodes = nsEvent.charactersIgnoringModifiers().lowercaseString();", "-\tchar [] chars = new char [keys.length()];", "-\tfor (int i=0; i<keys.length(); i++) {", "+\tNSString chars = nsEvent.characters ();", "+\tint length = chars.length();", "+\tif (length > 1) {", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.character = (char) chars.characterAtIndex (i);", "+\t\t\tsetInputState (event, nsEvent, type);", "+\t\t\tsendKeyEvent (type, event);", "+\t\t}", "+\t\treturn true;", "+\t} else {", "-\t\tint keyCode = Display.translateKey (keys.characterAtIndex (i) & 0xFFFF);", "-\t\tif (keyCode != 0) {", "-\t\t\tevent.keyCode = keyCode;", "-\t\t} else {", "-\t\t\tevent.character = (char) keys.characterAtIndex (i);", "-\t\t\t//TODO - get unshifted values for Shift+1", "-\t\t\tevent.keyCode = keyCodes.characterAtIndex (i);", "-\t\t}", "-\t\tsetInputState (event, nsEvent, type);", "-\t\tif (!setKeyState(event, type, nsEvent)) return false;", "-\t\tif (sendKeyEvent (type, event)) {", "-\t\t\tchars [count++] = chars [i];", "-\t\t}", "+\t\tif (!setKeyState (event, type, nsEvent)) return true;", "+\t\treturn sendKeyEvent (type, event);", "-//\tif (count == 0) return false;", "-\tif (count != keys.length () - 1) {", "-//\t\tOS.SetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, count * 2, chars);", "-\t}", "-\treturn count == keys.length ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619a748f9f61c5f69d5b51f82c6b804b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "eafe7a2cc73415a0fd3851a678b6b599cb8aa11c", "commitAfterChange": "3d65a10f1ade0a8ee589db24cd4b9975c2411813", "methodNumberBeforeChange": 178, "methodNumberAfterChange": 178, "signatureBeforeChange": "  LRESULT WM_KEYUP (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_KEYUP (int wParam, int lParam)", "diff": ["-\t\t\tdisplay.lastVirtual = display.lastNull = false;", "+\t\t\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "-\t\tdisplay.lastVirtual = display.lastNull = false;", "+\t\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "-\t* accented key.  On Windows 95 and NT, a call to ToAscii (), clears the", "-\t* accented state such that the next WM_CHAR loses the accent.  The fix", "-\t* is to detect the accent key stroke (called a dead key) by testing the", "-\t* high bit of the value returned by MapVirtualKey ().  A further problem", "-\t* is that the high bit on Windows NT is bit 32 while the high bit on", "-\t* Windows 95 is bit 16.  They should both be bit 32.", "-\t* ", "-\t* NOTE: This code is used to avoid a call to ToAscii ().", "-\t* ", "+\t* accented key. The fix is to detect the accent key stroke (called", "+\t* a dead key) by testing the high bit of the value returned by", "+\t* MapVirtualKey ().  A further problem is that the high bit on", "+\t* Windows NT is bit 32 while the high bit on Windows 95 is bit 16.", "+\t* They should both be bit 32.", "-\t", "-\t/*", "-\t* Bug in Windows.  When the accent key is generated on an international", "-\t* keyboard using Ctrl+Alt or the special key, MapVirtualKey () does not", "-\t* have the high bit set indicating that this is an accent key stroke.", "-\t* The fix is to iterate through all known accent, mapping them back to", "-\t* their corresponding virtual key and key state.  If the virtual key", "-\t* and key state match the current key, then this is an accent that has", "-\t* been generated using an international keyboard.", "-\t* ", "-\t* NOTE: This code is used to avoid a call to ToAscii ().", "-\t*/", "-\tif (!OS.IsWinCE) {", "-\t\tif (OS.GetKeyState (OS.VK_CONTROL) < 0 && OS.GetKeyState (OS.VK_MENU) < 0) {", "-\t\t\tfor (int i=0; i<ACCENTS.length; i++) {", "-\t\t\t\tint value = OS.VkKeyScan (ACCENTS [i]);", "-\t\t\t\tif ((value & 0xFF) == wParam && (value & 0x600) == 0x600) {", "-\t\t\t\t\tdisplay.lastKey = display.lastAscii = 0;", "-\t\t\t\t\tdisplay.lastVirtual = display.lastNull = false;", "-\t\t\t\t\treturn null;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "+\tif (display.lastDead) return null;", "+", "-\t\t\tdisplay.lastNull = false;", "+\t\t\tdisplay.lastNull = display.lastDead = false;", "-\tdisplay.lastVirtual = display.lastNull = false;", "+\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbe53f2e4d22108554ac22422b22da73", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "ed1c238f5a90c715845161c91b31d4b1ab96340b", "commitAfterChange": "bcca31454b9302731fd14aa50436025950657f5a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);\r", "-\t\tif (redraw) {\r", "-\t\t\tOS.UpdateWindow (handle);\t\r", "-\t\t\tif (COMCTL32_MAJOR < 6) {\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "-\t\t\t} else if (drawCount > 0) {\r", "+\t\tboolean redraw = false;\r", "+\t\tif (OS.IsWindowVisible (handle)) {\r", "+\t\t\tif (COMCTL32_MAJOR >= 6) {\r", "+\t\t\t\tredraw = true;\r", "+\t\t\t\tOS.UpdateWindow (handle);\r", "-\t\t\t}\t\r", "-\t\t} else {\r", "-\t\t\t/*\r", "-\t\t\t* Feature in Windows.  In version 6.00 of COMCTL32.DLL,\r", "-\t\t\t* the rebar control uses WM_SETREDRAW as a flag to stop\r", "-\t\t\t* layout of the items.  This is a problem because we rely\r", "-\t\t\t* on the rebar to position the items to the determine the\r", "-\t\t\t* preferred height.  The fix is to temporarily turn redraw\r", "-\t\t\t* back on using WM_SETREDRAW so the control will layuout,\r", "-\t\t\t* then turn it off using the DefaultWindowProc () so that\r", "-\t\t\t* nothing will draw and then turn it back on.\r", "-\t\t\t*/\r", "-\t\t\tif (drawCount > 0 && COMCTL32_MAJOR >= 6) {\t\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t} else {\r", "+\t\t\t\tredraw = drawCount == 0;\r", "+\t\t\t\tif (redraw) {\r", "+\t\t\t\t\tOS.UpdateWindow (handle);\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t\t}\r", "-\t\t}\r", "+\t\t}\t\r", "-\t\t\tif (COMCTL32_MAJOR < 6) {\r", "+\t\t\tif (COMCTL32_MAJOR >= 6) {\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t} else {\r", "-\t\t\t} else if (drawCount > 0) {\r", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\t}\t\r", "-\t\t\tOS.ValidateRect (handle, null);\t\t\t\r", "-\t\t} else {\r", "-\t\t\t/* Feature in Windows.  Turn redraw back on. */\r", "-\t\t\tif (drawCount > 0 && COMCTL32_MAJOR >= 6) {\r", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5017574d0b6a503bc6b9d6fdba63634", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "185b3d6f26eb0daceba066583e3836e94ad0a643", "commitAfterChange": "269a20bffa49783c6d0463d2cbc4f0d4f939b6bf", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void setMenu (Menu menu)", "signatureAfterChange": " public void setMenu (Menu menu)", "diff": ["-\tshort menuIndex = (short) (index + 1);", "-\tint outMenuRef [] = new int [1];", "+\tint menuHandle = 0;", "-\t\tif ((parent.style & SWT.BAR) != 0) {", "-\t\t\tif (OS.CreateNewMenu ((short) 0, 0, outMenuRef) != OS.noErr) {", "-\t\t\t\terror (SWT.ERROR_NO_HANDLES);", "-\t\t\t}", "-\t\t}", "+\t\tmenuHandle = createEmptyMenu ();", "-\t\tif ((parent.style & SWT.BAR) != 0) {", "-\t\t\tif (oldMenu == null) {", "-\t\t\t\tOS.GetMenuItemHierarchicalMenu (parent.handle, menuIndex, outMenuRef);", "-\t\t\t\tif (outMenuRef [0] != 0) {", "-\t\t\t\t\tOS.DisposeMenu (outMenuRef [0]);", "-\t\t\t\t}", "-\t\t\t}", "+\t\tif (oldMenu == null) \tdestroyEmptyMenu (index);", "+\t\tmenuHandle = menu.handle;", "+\t}", "+\tshort menuIndex = (short) (index + 1);", "+\tif (menuHandle != 0) {", "+\t\tint [] outString = new int [1];", "+\t\tif (OS.CopyMenuItemTextAsCFString (parent.handle, menuIndex, outString) != OS.noErr) {", "+\t\t\terror (SWT.ERROR_CANNOT_SET_MENU);", "-\t\toutMenuRef [0] = menu.handle;", "+\t\tOS.SetMenuTitleWithCFString (menuHandle, outString [0]);", "+\t\tOS.CFRelease (outString [0]);", "-\tint [] outString = new int [1];", "-\tif (OS.CopyMenuItemTextAsCFString (parent.handle, menuIndex, outString) != OS.noErr) {", "-\t\terror (SWT.ERROR_CANNOT_SET_MENU);", "-\t}", "-\tOS.SetMenuTitleWithCFString (outMenuRef [0], outString [0]);", "-\tOS.CFRelease (outString [0]);", "-\tif (OS.SetMenuItemHierarchicalMenu (parent.handle, menuIndex, outMenuRef [0]) != OS.noErr) {", "+\tif (OS.SetMenuItemHierarchicalMenu (parent.handle, menuIndex, menuHandle) != OS.noErr) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdb357f871b16cec49b0022617c9c3e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ce92898e77608bf804c80f5b62e889fe568db6fc", "commitAfterChange": "bc4d3581c33a4dad038becb29f77136e2bbc5f2e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 69, "signatureBeforeChange": "  void _setBackgroundImage (Image image)", "signatureAfterChange": "  void setBackgroundImage (int hBitmap)", "diff": ["-void _setBackgroundImage (Image image) {", "-\tsuper._setBackgroundImage (image);", "-\tint pixel = OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0);", "-\tif (image != null) {", "-\t\tif (pixel != OS.CLR_NONE) {", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETBKCOLOR, 0, OS.CLR_NONE);", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETTEXTBKCOLOR, 0, OS.CLR_NONE);", "-\t\t}", "-\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "-\t\t}", "-\t} else {", "-\t\tif (pixel == OS.CLR_NONE) {", "-\t\t\tpixel = background != -1 ? background : defaultBackground ();", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETBKCOLOR, 0, pixel);", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETTEXTBKCOLOR, 0, pixel);", "-\t\t\tif ((style & SWT.CHECK) != 0) fixCheckboxImageListColor (true);", "-\t\t}", "-\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "-\t\t}", "-\t}", "-\t/*", "-\t* Feature in Windows.  When the background color is", "-\t* changed, the table does not redraw until the next", "-\t* WM_PAINT.  The fix is to force a redraw.", "-\t*/", "-\tOS.InvalidateRect (handle, null, true);", "-}", "+void setBackgroundImage (int hBitmap) {", "+\tif (hBitmap != 0) {", "+\t\tOS.SendMessage (handle, OS.LVM_SETBKCOLOR, 0, OS.CLR_NONE);", "+\t\tOS.SendMessage (handle, OS.LVM_SETTEXTBKCOLOR, 0, OS.CLR_NONE);", "+\t\t/*", "+\t\t* Feature in Windows.  When the background color is changed,", "+\t\t* the table does not redraw until the next WM_PAINT.  The fix", "+\t\t* is to force a redraw.", "+\t\t*/", "+\t\tOS.InvalidateRect (handle, null, true);", "+\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t}", "+\t} else {", "+\t\tControl control = findBackgroundControl ();", "+\t\tif (control == null) control = this;", "+\t\tif (control.backgroundImage == null) {", "+\t\t\tsetBackgroundPixel (control.getBackgroundPixel ());", "+\t\t}", "+\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72e9ba1e5954204daa17fc573730de7e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "5a6cf4729fcf322bd23b4717e113de08287fc648", "commitAfterChange": "5857b8c40b76d95ba94a274ef865880a11402c24", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-\t\t\tint location = -1;", "+\t\t\tint newIndex = -1;", "-\t\t\t\t\tint index = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "-\t\t\t\t\tlocation = Math.max (0, index + (((int)/*64*/wParam) == OS.VK_UP ? -1 : 1));", "+\t\t\t\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\t\t\t\tnewIndex = Math.max (0, oldIndex + (((int)/*64*/wParam) == OS.VK_UP ? -1 : 1));", "-\t\t\t\t\tint index = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "-\t\t\t\t\tif (index != topIndex) {", "-\t\t\t\t\t\tlocation = topIndex;", "+\t\t\t\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\t\t\t\tif (oldIndex != topIndex) {", "+\t\t\t\t\t\tnewIndex = topIndex;", "-\t\t\t\t\t\tlocation = Math.max (0, topIndex - (pageSize - 1));", "+\t\t\t\t\t\tnewIndex = Math.max (0, topIndex - (pageSize - 1));", "-\t\t\t\t\tint index = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\t\t\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "-\t\t\t\t\tif (index != bottomIndex) {", "-\t\t\t\t\t\tlocation = bottomIndex;", "+\t\t\t\t\tif (oldIndex != bottomIndex) {", "+\t\t\t\t\t\tnewIndex = bottomIndex;", "-\t\t\t\t\t\tlocation = bottomIndex + pageSize - 1;", "+\t\t\t\t\t\tnewIndex = bottomIndex + pageSize - 1;", "-\t\t\t\t\tif (count != OS.LB_ERR) location = Math.min (count - 1, location);", "+\t\t\t\t\tif (count != OS.LB_ERR) newIndex = Math.min (count - 1, newIndex);", "-\t\t\t\t\tlocation = 0;", "+\t\t\t\t\tnewIndex = 0;", "-\t\t\t\t\tlocation = count - 1;", "+\t\t\t\t\tnewIndex = count - 1;", "-\t\t\tif (location != -1) {", "-\t\t\t\tOS.SendMessage (handle, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0);", "-\t\t\t\tOS.SendMessage (handle, OS.LB_SETCARETINDEX, location, 0);", "+\t\t\tif (newIndex != -1) {", "+\t\t\t\t/*", "+\t\t\t\t* Feature in Windows.  When the user changes focus using", "+\t\t\t\t* the keyboard, the focus indicator does not draw.  The", "+\t\t\t\t* fix is to update the UI state for the control whenever", "+\t\t\t\t* the focus indicator changes as a result of something", "+\t\t\t\t* the user types.", "+\t\t\t\t*/", "+\t\t\t\tint uiState = (int)/*64*/OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) != 0) {", "+\t\t\t\t\tOS.SendMessage (handle, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0);", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Bug in Windows.  When the WM_CHANGEUISTATE is used", "+\t\t\t\t\t* to update the UI state for a list that has been", "+\t\t\t\t\t* selected using Shift+Arrow, the focus indicator", "+\t\t\t\t\t* has pixel corruption.  The fix is to redraw the", "+\t\t\t\t\t* control.", "+\t\t\t\t\t*/", "+\t\t\t\t\tRECT itemRect = new RECT ();", "+\t\t\t\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\t\t\t\tOS.SendMessage (handle, OS.LB_GETITEMRECT, oldIndex, itemRect);", "+\t\t\t\t\tOS.InvalidateRect (handle, itemRect, true);", "+\t\t\t\t}", "+\t\t\t\tOS.SendMessage (handle, OS.LB_SETCARETINDEX, newIndex, 0);", "-\t}", "-\t", "-\t/*", "-\t* Feature in Windows.  When the user changes focus using", "-\t* the keyboard, the focus indicator does not draw.  The", "-\t* fix is to update the UI state for the control whenever", "-\t* the focus indicator changes as a result of something", "-\t* the user types.", "-\t*/", "-\tint uiState = (int)/*64*/OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "-\tif ((uiState & OS.UISF_HIDEFOCUS) != 0) {", "-\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "-\t\tint /*long*/ code = callWindowProc (handle, OS.WM_KEYDOWN, wParam, lParam);", "-\t\tint newIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "-\t\tif (oldIndex != newIndex) {", "-\t\t\tOS.SendMessage (handle, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0);", "-\t\t\t/*", "-\t\t\t* Bug in Windows.  When the WM_CHANGEUISTATE is used", "-\t\t\t* to update the UI state for a list that has been", "-\t\t\t* selected using Shift+Arrow, the focus indicator", "-\t\t\t* has pixel corruption.  The fix is to redraw the", "-\t\t\t* focus item.", "-\t\t\t*/", "-\t\t\tRECT itemRect = new RECT ();", "-\t\t\tOS.SendMessage (handle, OS.LB_GETITEMRECT, newIndex, itemRect);", "-\t\t\tOS.InvalidateRect (handle, itemRect, true);", "-\t\t}", "-\t\treturn new LRESULT (code);"]}], "num": 32174}
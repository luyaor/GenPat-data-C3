{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59670dc92006707a326233f7044ee276", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a66eb851352c032515d2bacb2e2a7b0e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 344, "methodNumberAfterChange": 201, "signatureBeforeChange": " void handleTextChanged(TextChangedEvent event)", "signatureAfterChange": " void handleTextChanged(TextChangedEvent event)", "diff": ["-\tlineCache.textChanged(lastTextChangeStart, ", "-\t\tlastTextChangeNewLineCount, ", "-\t\tlastTextChangeReplaceLineCount,", "-\t\tlastTextChangeNewCharCount,", "-\t\tlastTextChangeReplaceCharCount);", "-\tsetScrollBars();", "+\tint firstLine = content.getLineAtOffset(lastTextChangeStart);", "+\tresetCache(firstLine, 0);", "+\tint lastLine = firstLine + lastTextChangeNewLineCount;", "+\tint firstLineTop = getLinePixel(firstLine);", "+\tint newLastLineBottom = getLinePixel(lastLine + 1);", "+\tif (newLastLineBottom != lastLineBottom) {", "+\t\t//TODO fails if margin != 0", "+\t\tscroll(0, newLastLineBottom, 0, lastLineBottom, clientAreaWidth, clientAreaHeight, true);", "+\t}", "+\tsuper.redraw(0, firstLineTop, clientAreaWidth, newLastLineBottom - firstLineTop, false);", "-\t// fixes 1GB93QT", "-\tupdateSelection(", "-\t\tlastTextChangeStart, ", "-\t\tlastTextChangeReplaceCharCount, ", "-\t\tlastTextChangeNewCharCount);", "-\t\t", "+\tupdateSelection(lastTextChangeStart, lastTextChangeReplaceCharCount, lastTextChangeNewCharCount);", "+\tif (newLastLineBottom == lastLineBottom) {\t\t", "+\t\t//update();", "+\t}", "-\t\t// Only check for unused space when lines are deleted.", "-\t\t// Fixes 1GFL4LY", "-\t\t// Scroll up so that empty lines below last text line are used.", "-\t\t// Fixes 1GEYJM0", "-\t\t// fixes bug 8273", "-\t}", "-\t// do direct drawing if the text change is confined to a single line.", "-\t// optimization and fixes bug 13999. see also handleTextChanging.", "-\tif (lastTextChangeNewLineCount == 0 && lastTextChangeReplaceLineCount == 0) {", "-\t\tint startLine = content.getLineAtOffset(lastTextChangeStart);", "-\t\tint startY = startLine * lineHeight - verticalScrollOffset + topMargin;", "-", "-\t\tif (DOUBLE_BUFFER) {", "-\t\t\tGC gc = getGC();", "-\t\t\tCaret caret = getCaret();", "-\t\t\tboolean caretVisible = false;", "-\t\t\t", "-\t\t\tif (caret != null) {", "-\t\t\t\tcaretVisible = caret.getVisible();", "-\t\t\t\tcaret.setVisible(false);", "-\t\t\t}", "-\t\t\tperformPaint(gc, startLine, startY, lineHeight);", "-\t\t\tif (caret != null) {", "-\t\t\t\tcaret.setVisible(caretVisible);", "-\t\t\t}", "-\t\t\tgc.dispose();", "-\t\t} else {", "-\t\t\tredraw(0, startY, getClientArea().width, lineHeight, false);", "-\t\t\tupdate();", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca3a2818ec9aa9ae5c171f5dc77fceee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "85f1fc56d7da27f427cc958ea00c02335ade970a", "commitAfterChange": "166233a02615ac1e2681ccfd00cba112f3ec895b", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 202, "signatureBeforeChange": " void handleTextChanged(TextChangedEvent event)", "signatureAfterChange": " void handleTextChanged(TextChangedEvent event)", "diff": ["-\tlineCache.textChanged(lastTextChangeStart, ", "-\t\tlastTextChangeNewLineCount, ", "-\t\tlastTextChangeReplaceLineCount);", "+\tlineCache.textChanged(lastTextChangeStart, lastTextChangeNewLineCount, lastTextChangeReplaceLineCount);", "-\t// fixes 1GB93QT", "-\tupdateSelection(", "-\t\tlastTextChangeStart, ", "-\t\tlastTextChangeReplaceCharCount, ", "-\t\tlastTextChangeNewCharCount);", "+\tupdateSelection(lastTextChangeStart, lastTextChangeReplaceCharCount, lastTextChangeNewCharCount);", "+\tRectangle clientArea = getClientArea();", "+\tint firstLine = content.getLineAtOffset(lastTextChangeStart);", "+\tint lastLine = firstLine + lastTextChangeNewLineCount;", "+\tint firstLineTop = getLinePixel(firstLine);", "+\tint newLastLineBottom = getLinePixel(lastLine + 1);", "+\tif (newLastLineBottom != lastLineBottom) {", "+\t\t//TODO fails if margin != 0", "+\t\tscroll(0, newLastLineBottom, 0, lastLineBottom, clientArea.width, clientArea.height - newLastLineBottom, true);", "+\t}", "+\tsuper.redraw(0, firstLineTop, clientArea.width, newLastLineBottom - firstLineTop, false);", "+\tif (newLastLineBottom == lastLineBottom) {\t\t", "+\t\tupdate();", "+\t}", "-\t\t// Only check for unused space when lines are deleted.", "-\t\t// Fixes 1GFL4LY", "-\t\t// Scroll up so that empty lines below last text line are used.", "-\t\t// Fixes 1GEYJM0", "-\t\t// fixes bug 8273", "-\t}", "-\tboolean directDraw;", "-\tif (isFixedLineHeight()) {", "-\t\tdirectDraw = lastTextChangeNewLineCount == 0 && lastTextChangeReplaceLineCount == 0;", "-\t} else {", "-\t\tint lastLine = content.getLineAtOffset(lastTextChangeStart) + lastTextChangeNewLineCount;", "-\t\tint newLineBottom = getLinePixel(lastLine + 1);", "-\t\tdirectDraw = lastLineBottom == newLineBottom;", "-\t\tif (!directDraw) {", "-\t\t\t//TODO use scroll() instead of redraw()", "-\t\t\tint firstLine = content.getLineAtOffset(lastTextChangeStart);", "-\t\t\tint firstLineTop = Math.max(getLinePixel(firstLine), topMargin);", "-\t\t\tRectangle clientArea = getClientArea();", "-\t\t\tsuper.redraw(clientArea.x, firstLineTop, clientArea.width, clientArea.height - firstLineTop, false);", "-\t\t}", "-\t}", "-\t// do direct drawing if the text change is confined to a single line.", "-\t// optimization and fixes bug 13999. see also handleTextChanging.", "-\tif (directDraw) {", "-\t\tint startLine = content.getLineAtOffset(lastTextChangeStart);", "-\t\tint startY = getLinePixel(startLine);", "-\t\tint height = lineCache.getLineHeight(startLine);", "-\t\tif (DOUBLE_BUFFER) {", "-\t\t\tCaret caret = getCaret();", "-\t\t\tboolean caretVisible = false;", "-\t\t\tif (caret != null) {", "-\t\t\t\tcaretVisible = caret.getVisible();", "-\t\t\t\tcaret.setVisible(false);", "-\t\t\t}", "-\t\t\tGC gc = new GC(this);", "-\t\t\tperformPaint(gc, startLine, startY, height);", "-\t\t\tgc.dispose();", "-\t\t\tif (caret != null) {", "-\t\t\t\tcaret.setVisible(caretVisible);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tsuper.redraw(0, startY, getClientArea().width, height, false);", "-\t\t\tupdate();", "-\t\t}"]}], "num": 19889}
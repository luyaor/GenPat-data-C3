{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b63d828824026090afbbff17b15e02b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6957280d1f368efe4e3b017f77abc98d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 85, "signatureBeforeChange": "  \tString getText ()", "signatureAfterChange": " \t \tString getText ()", "diff": ["-", "-\t\tif (ATK.g_type_is_a (parentType, ATK_TEXT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (handle));", "-\t\t\tAtkTextIface textIface = new AtkTextIface ();", "-\t\t\tATK.memmove (textIface, superType);", "-\t\t\tint /*long*/ characterCount = 0;", "-\t\t\tif (textIface.get_character_count != 0) {", "-\t\t\t\tcharacterCount = ATK.call (textIface.get_character_count, handle);", "-\t\t\t}", "-\t\t\tif (characterCount > 0 && textIface.get_text != 0) {", "-\t\t\t\tparentResult = ATK.call (textIface.get_text, handle, 0, characterCount);", "+\t\tAtkTextIface iface = getTextIface (handle);", "+\t\tif (iface != null && iface.get_character_count != 0) {", "+\t\t\tint /*long*/ characterCount = ATK.call (iface.get_character_count, handle);", "+\t\t\tif (characterCount > 0 && iface.get_text != 0) {", "+\t\t\t\tparentResult = ATK.call (iface.get_text, handle, 0, characterCount);", "-\t\t\t\t\tint length = OS.strlen (parentResult);", "-\t\t\t\t\tbyte [] buffer = new byte [length];", "-\t\t\t\t\tOS.memmove (buffer, parentResult, length);", "-\t\t\t\t\tparentText = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\t\t\tparentText = getString (parentResult);", "+\t\t\t\t\tOS.g_free(parentResult);", "-\t\tAccessibleControlListener[] controlListeners = getControlListeners ();", "-\t\tif (controlListeners.length == 0) return parentText;", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent (accessible);", "-\t\tevent.childID = id;", "-\t\tevent.result = parentText;", "-\t\tfor (int i = 0; i < controlListeners.length; i++) {", "-\t\t\tcontrolListeners [i].getValue (event);\t\t\t\t", "+\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\tint length = listeners.size();", "+\t\tif (length > 0) {", "+\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (accessible);", "+\t\t\tevent.childID = id;", "+\t\t\tevent.result = parentText;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\t\tlistener.getValue (event);\t\t\t\t", "+\t\t\t}", "+\t\t\treturn event.result;", "-\t\treturn event.result;", "-\t}", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dc8dccc18a391366481d766d3d9cfc7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tstatic int atkComponent_get_size (int atkObject, int width, int height, int coord_type)", "signatureAfterChange": "  \tstatic int atkComponent_get_size (int atkObject, int width, int height, int coord_type)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));", "-\t\t\tAtkComponentIface componentIface = new AtkComponentIface ();", "-\t\t\tATK.memmove (componentIface, superType);", "-\t\t\tif (componentIface.get_extents != 0) {", "-\t\t\t\tATK.call (componentIface.get_size, object.handle, width, height, coord_type);", "+\t\tAtkComponentIface iface = getComponentIface (atkObject);", "+\t\tif (iface != null && iface.get_size != 0) {", "+\t\t\tATK.call (iface.get_size, atkObject, width, height, coord_type);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tint[] parentWidth = new int [1], parentHeight = new int [1];", "+\t\t\t\tOS.memmove (parentWidth, width, 4);", "+\t\t\t\tOS.memmove (parentHeight, height, 4);", "+\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tevent.width = parentWidth [0]; event.height = parentHeight [0];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\t\t\tlistener.getLocation (event);", "+\t\t\t\t}", "+\t\t\t\tOS.memmove (width, new int[] {event.width}, 4);", "+\t\t\t\tOS.memmove (height, new int[] {event.height}, 4);", "-\t\tAccessibleControlListener[] listeners = object.getControlListeners ();", "-\t\tif (listeners.length == 0) return 0;", "-\t\t", "-\t\tint[] parentWidth = new int [1], parentHeight = new int [1];", "-\t\tOS.memmove (parentWidth, width, 4);", "-\t\tOS.memmove (parentHeight, height, 4);", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tevent.width = parentWidth [0]; event.height = parentHeight [0];", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getLocation (event);", "-\t\t}", "-\t\tOS.memmove (width, new int[] {event.width}, 4);", "-\t\tOS.memmove (height, new int[] {event.height}, 4);"]}], "num": 35565}
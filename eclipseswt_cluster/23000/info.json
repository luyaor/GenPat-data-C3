{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b313fb6ebcd31ebadf78229ae45af4c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff821a1b6e5653059d5f4436be1b7bf2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d88bc7bef37e428853c15bf36b0103c751679a13", "commitAfterChange": "b78246feba55dea5042f20ef13079a6a48d963c7", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public Point map (Control from, Control to, int x, int y)", "signatureAfterChange": " public Point map (Control from, Control to, int x, int y)", "diff": ["-\t\t\tShell shell = to.getShell ();", "-\t\t\tPoint shellLocation = shell.getLocation ();", "-\t\t\tint point = OS.gcnew_Point (x - shellLocation.x, y - shellLocation.y);", "-\t\t\tto.updateLayout (to.topHandle ());", "-\t\t\tint newPoint = OS.UIElement_TranslatePoint (shell.shellHandle, point, to.topHandle ());", "-\t\t\tnewX = (int) (OS.Point_X (newPoint) + 0.5);", "-\t\t\tnewY = (int) (OS.Point_Y (newPoint) + 0.5);", "-\t\t\tOS.GCHandle_Free (point);", "-\t\t\tOS.GCHandle_Free (newPoint);", "-\t\t} else {", "-\t\t\tShell shell = from.getShell ();", "-\t\t\tPoint shellLocation = shell.getLocation ();", "+\t\t\tint topHandle = to.topHandle ();", "+\t\t\tint window = OS.Window_GetWindow (topHandle);", "-\t\t\tfrom.updateLayout (from.topHandle ());", "-\t\t\tint newPoint = OS.UIElement_TranslatePoint (from.topHandle (), point, shell.shellHandle);", "-\t\t\tnewX = (int) (OS.Point_X (newPoint) + 0.5) + shellLocation.x;", "-\t\t\tnewY = (int) (OS.Point_Y (newPoint) + 0.5) + shellLocation.y;", "+\t\t\tint temp = OS.Visual_PointFromScreen (window, point);", "+\t\t\tto.updateLayout (topHandle);", "+\t\t\tint newPoint = OS.UIElement_TranslatePoint (window, temp, topHandle);", "+\t\t\tnewX = (int) OS.Point_X (newPoint);", "+\t\t\tnewY = (int) OS.Point_Y (newPoint);", "+\t\t\tOS.GCHandle_Free (temp);", "+\t\t\tOS.GCHandle_Free(window);", "+\t\t} else {", "+\t\t\tint topHandle = from.topHandle ();", "+\t\t\tint window = OS.Window_GetWindow (topHandle);", "+\t\t\tint point = OS.gcnew_Point(x, y);", "+\t\t\tfrom.updateLayout (topHandle);", "+\t\t\tint temp = OS.UIElement_TranslatePoint (topHandle, point, window);", "+\t\t\tint newPoint = OS.Visual_PointToScreen (window, temp);", "+\t\t\tnewX = (int) OS.Point_X (newPoint);", "+\t\t\tnewY = (int) OS.Point_Y (newPoint);", "+\t\t\tOS.GCHandle_Free (temp);", "+\t\t\tOS.GCHandle_Free (point);", "+\t\t\tOS.GCHandle_Free (newPoint);", "+\t\t\tOS.GCHandle_Free(window);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db7567b34b5123138cfa43f5adbca8c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 46, "signatureBeforeChange": " void calculateSelectionExtent()", "signatureAfterChange": " public void setFont (Font value)", "diff": ["- */", "-void calculateSelectionExtent() {", "-\tTable parent = getParent();", "-\tTableColumn column = parent.internalGetColumn(TableColumn.FIRST);", "-\tGC gc = new GC(parent);", "-\tgc.setFont(getFont());", "-\tString trimmedText = getText(gc, column);", "-\tint gridLineWidth = parent.getGridLineWidth();", "-\t", "-\tif (trimmedText != null) {", "-\t\tselectionExtent = new Point(gc.stringExtent(trimmedText).x, parent.getItemHeight());", "-\t\tselectionExtent.x += getTextIndent(TableColumn.FIRST) + SELECTION_PADDING;", "-\t\tselectionExtent.x = Math.min(", "-\t\t\tselectionExtent.x, column.getWidth() - getImageStopX(column.getIndex()) - gridLineWidth);", "-\t\tif (parent.getLinesVisible() == true) {", "-\t\t\tselectionExtent.y -= gridLineWidth;", "-\tgc.dispose();", "+}", "+public void setFont (Font value) {", "+\tcheckWidget ();", "+\tif (value != null && value.isDisposed ()) {", "+\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tif (font == value) return;", "+\tif (value != null && value.equals (font)) return;", "+\t", "+\tRectangle bounds = getBounds ();", "+\tint oldRightX = bounds.x + bounds.width;", "+\tfont = value;", "+\t", "+\t/* recompute cached values for string measurements */", "+\tGC gc = new GC (parent);", "+\tgc.setFont (getFont ());", "+\tcomputeDisplayTexts (gc);", "+\trecomputeTextWidths (gc);", "+\tfontHeight = gc.getFontMetrics ().getHeight ();", "+\tgc.dispose ();", "+\t", "+\t/* horizontal bar could be affected if table has no columns */", "+\tif (parent.columns.length == 0) {", "+\t\tbounds = getBounds ();", "+\t\tint newRightX = bounds.x + bounds.width;", "+\t\tparent.updateHorizontalBar (newRightX, newRightX - oldRightX);", "+\t}", "+\tredrawItem ();", "+}"]}], "num": 23000}
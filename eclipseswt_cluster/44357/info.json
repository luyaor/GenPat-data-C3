{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8a90c6760c1934a276eedb4913a8d7f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e70a6f31cf616de2663b21f688b528c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "20bf6d51528a26e60efa82d957330a1a29c9c9e5", "commitAfterChange": "7ac1d3600daa9f5eec2dc25a6ac43b70f436f4b6", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "\r public boolean sleep ()", "signatureAfterChange": "\r public boolean sleep ()", "diff": ["-\treturn OS.XtAppPeekEvent (xtContext, xEvent);\r", "+\t/*\r", "+\t* Bug in Xt.  Under certain circumstances Xt waits\r", "+\t* forever looking for X events, ignoring alternate\r", "+\t* inputs.  The fix is to never sleep forever.\r", "+\t*/\r", "+\tsleepID = OS.XtAppAddTimeOut (xtContext, 100, sleepProc, 0);\r", "+\tboolean result = OS.XtAppPeekEvent (xtContext, xEvent);\r", "+\tif (sleepID != 0) OS.XtRemoveTimeOut (sleepID);\r", "+\treturn result;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fc7c3daabe8a3af61a671e29ed2ec08", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d394748baa45afbd580331c831b85672b97b114e", "commitAfterChange": "5f321000d94eb71bd024c1f4d113ca6eeea25bd0", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "  void setBackgroundTransparent (boolean transparent)", "signatureAfterChange": "  void setBackgroundTransparent (boolean transparent)", "diff": ["-\t\t\t* Feature in Windows.  When the background color is changed,", "-\t\t\t* the table does not redraw until the next WM_PAINT.  The fix", "-\t\t\t* is to force a redraw.", "+\t\t\t* Bug in Windows.  When the background color is changed,", "+\t\t\t* the table does not redraw until the next WM_PAINT.  The", "+\t\t\t* fix is to force a redraw.", "+\t\t\t\t\t/* ", "+\t\t\t\t\t* Bug in Windows.  When LVM_SETSELECTEDCOLUMN is set, Windows", "+\t\t\t\t\t* does not redraw either the new or the previous selected column.", "+\t\t\t\t\t* The fix is to force a redraw.", "+\t\t\t\t\t*/", "+\t\t\t\t\tOS.InvalidateRect (handle, null, true);", "-\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETSELECTEDCOLUMN, indexOf (sortColumn), 0);", "+\t\t\t\t\tint column = indexOf (sortColumn);", "+\t\t\t\t\tif (column != -1) {", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETSELECTEDCOLUMN, column, 0);", "+\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t* Bug in Windows.  When LVM_SETSELECTEDCOLUMN is set, Windows", "+\t\t\t\t\t\t* does not redraw either the new or the previous selected column.", "+\t\t\t\t\t\t* The fix is to force a redraw.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t\t\t}"]}], "num": 44357}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95f73593fb581fddff5a94293dc05439", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d11338b33d70bf80666c876efa63c71", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "2be9e13d76720c8ac383dbac01e6474ca4b95d97", "commitAfterChange": "c5f42b132fb6ee889f8d79e00b89d2fd8962bd6f", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 203, "signatureBeforeChange": "\r \r LRESULT WM_SYSKEYDOWN (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_SYSKEYDOWN (int wParam, int lParam)", "diff": ["-\tDisplay display = getDisplay ();\r", "-\r", "-\r", "-\t/* If are going to get a WM_SYSCHAR, ignore this message. */\r", "-\t/*\r", "-\t* Bug on WinCE.  MapVirtualKey() returns incorrect values.\r", "-\t* The fix is to rely on a key mappings table to determine\r", "-\t* whether the key event must be sent now or if a WM_SYSCHAR\r", "-\t* event will follow.\r", "-\t*/\r", "-\tif (!OS.IsWinCE) {\r", "-\t\tif (OS.MapVirtualKey (wParam, 2) != 0) return null;\r", "-\t}\r", "-\t/* Ignore repeating keys for modifiers by testing key down state. */\r", "+\t/* Ignore repeating modifier keys by testing key down state */\r", "+\t\r", "+\t/* Clear last key and last ascii because a new key has been typed */\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.lastAscii = display.lastKey = 0;\r", "+\tdisplay.lastVirtual = display.lastNull = false;\r", "-\t/* Set last key and clear last ascii because a new key has been typed. */\r", "-\tdisplay.lastAscii = 0;\r", "+\t/* If are going to get a WM_SYSCHAR, ignore this message. */\r", "+\t/*\r", "+\t* Bug on WinCE.  MapVirtualKey() returns incorrect values.\r", "+\t* The fix is to rely on a key mappings table to determine\r", "+\t* whether the key event must be sent now or if a WM_SYSCHAR\r", "+\t* event will follow.\r", "+\t*/\r", "+\tif (!OS.IsWinCE) {\r", "+\t\tif (OS.MapVirtualKey (wParam, 2) != 0) {\r", "+\t\t\t/*\r", "+\t\t\t* Feature in Windows.  MapVirtualKey() indicates that\r", "+\t\t\t* a WM_SYSCHAR message will occur for Alt+Enter but\r", "+\t\t\t* this message never happens.  The fix is to issue the\r", "+\t\t\t* event from WM_SYSKEYDOWN and map VK_RETURN to '\\r'.\r", "+\t\t\t*/\r", "+\t\t\tif (wParam != OS.VK_RETURN) return null;\r", "+\t\t\tdisplay.lastAscii = '\\r';\r", "+\t\t}\r", "+\t}\r", "-\tdisplay.lastNull = false;\r", "-\r", "+\t\t\r", "+\t/*\r", "+\t* Feature in Windows.  The virtual key VK_DELETE is not\r", "+\t* treated as both a virtual key and an ASCII key by Windows.\r", "+\t* Therefore, we will not receive a WM_CHAR for this key.\r", "+\t* The fix is to treat VK_DELETE as a special case and map\r", "+\t* the ASCII value explictly (Delete is 0x7F).\r", "+\t*/\r", "+\tif (display.lastKey == OS.VK_DELETE) display.lastAscii = 0x7F;\r", "+\t\r", "+\t/*\r", "+\t* It is possible to get a WM_CHAR for a virtual key when\r", "+\t* Num Lock is on.  If the user types Home while Num Lock \r", "+\t* is down, a WM_CHAR is issued with WPARM=55 (for the\r", "+\t* character 7).  If we are going to get a WM_CHAR we need\r", "+\t* to ensure that the last key has the correct value.  Note\r", "+\t* that Ctrl+Home does not issue a WM_CHAR when Num Lock is\r", "+\t* down.\r", "+\t*/\r", "+\tif (OS.VK_NUMPAD0 <= display.lastKey && display.lastKey <= OS.VK_DIVIDE) {\r", "+\t\tif (display.asciiKey (display.lastKey) != 0) return null;\r", "+\t}\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff992ac9870ff51d30aef76a2348076", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "869d0b47847f64e864b376350d43251357ab2f40", "commitAfterChange": "156d213c176b38959f26be8a2a687b54e9492204", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  LRESULT CDDS_SUBITEMPREPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_SUBITEMPREPAINT (int wParam, int lParam)", "diff": ["+\t\t\tcode |= OS.CDRF_NEWFONT;", "+\t\t}", "+\t\t/*", "+\t\t* Feature in Windows.  When the table is disabled, it draws", "+\t\t* with a gray background but does not gray the text.  The fix", "+\t\t* is to explicitly gray the text.", "+\t\t*/", "+\t\tif (!OS.IsWindowEnabled (handle)) {", "+\t\t\tnmcd.clrText = OS.GetSysColor (OS.COLOR_GRAYTEXT);", "+\t\t\tif (findImageControl () != null) {", "+\t\t\t\tnmcd.clrTextBk = OS.CLR_NONE;", "+\t\t\t} else {", "+\t\t\t\tnmcd.clrTextBk = OS.GetSysColor (OS.COLOR_3DFACE);", "+\t\t\t}", "+\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);"]}], "num": 1108}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c8eef30abe50c0ee880d9980f7cba71", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6cb69fcd18dcd9692264f32d5c9fea7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageLoader.java", "commitBeforeChange": "c8c3b0d56ac96eed1deeae3cbebb069fecdd4ef9", "commitAfterChange": "db54bb9c515ce97cb7d05101b9fa91b631d7bee5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void test_addImageLoaderListenerLorg_eclipse_swt_graphics_ImageLoaderListener()", "signatureAfterChange": "  public void test_addImageLoaderListenerLorg_eclipse_swt_graphics_ImageLoaderListener()", "diff": ["-\twarnUnimpl(\"Test test_addImageLoaderListenerLorg_eclipse_swt_graphics_ImageLoaderListener not written\");", "+\tImageLoader loader = new ImageLoader();", "+\tImageLoaderListener loaderListener = new ImageLoaderListener() {", "+\t\tpublic void imageDataLoaded(ImageLoaderEvent e) {", "+\t\t\tloaderListenerCalled = true;", "+\t\t};", "+\t};", "+\t", "+\ttry {", "+\t\tloader.addImageLoaderListener(null);", "+\t\tfail(\"No exception thrown for addImageLoaderListener with null argument\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\tassertFalse(\":a:\", loader.hasListeners());", "+\tloader.addImageLoaderListener(loaderListener);", "+\tassertTrue(\":b:\", loader.hasListeners());", "+", "+\tloaderListenerCalled = false;", "+\tInputStream stream = SwtTestCase.class.getResourceAsStream(\"interlaced_target.png\");\t", "+\tloader.load(stream);", "+\ttry {", "+\t\tstream.close();", "+\t} catch (IOException e) {}", "+\tassertTrue(\":c:\", loaderListenerCalled);", "+", "+\tloaderListenerCalled = false;", "+\tstream = SwtTestCase.class.getResourceAsStream(\"target.png\");\t", "+\tloader.load(stream);", "+\ttry {", "+\t\tstream.close();", "+\t} catch (IOException e) {}", "+\tassertFalse(\":d:\", loaderListenerCalled);", "+", "+\tloaderListenerCalled = false;", "+\tloader.notifyListeners(new ImageLoaderEvent(loader, loader.data[0], 0, true));", "+\tassertTrue(\":e:\", loaderListenerCalled);", "+", "+\tloader.removeImageLoaderListener(loaderListener);", "+\tassertFalse(\":f:\", loader.hasListeners());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a645e302afd5e6d972d8d56fadc32fc3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageLoader.java", "commitBeforeChange": "c8c3b0d56ac96eed1deeae3cbebb069fecdd4ef9", "commitAfterChange": "db54bb9c515ce97cb7d05101b9fa91b631d7bee5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void test_saveLjava_io_OutputStreamI()", "signatureAfterChange": "  public void test_saveLjava_io_OutputStreamI()", "diff": ["-\twarnUnimpl(\"Test test_saveLjava_io_OutputStreamI not written\");", "+\tImageLoader loader = new ImageLoader();", "+\tByteArrayOutputStream outStream = null;", "+\tInputStream inStream = null;", "+\ttry {", "+\t\ttry {", "+\t\t\tloader.save(outStream, 0);", "+\t\t\tfail(\"No exception thrown for save outputStream == null\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t}", "+\t", "+\t\toutStream = new ByteArrayOutputStream();", "+\t\ttry {", "+\t\t\tloader.save(outStream, -1);", "+\t\t\tfail(\"No exception thrown for save to invalid outputStream format\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t}", "+\t\t", "+\t\tString filename = SwtTestCase.imageFilenames[0];", "+\t\t// must use jpg since save is not implemented yet in png format\t\t", "+\t\tString filetype = \"jpg\";", "+\t\tinStream = SwtTestCase.class.getResourceAsStream(filename + \".\" + filetype);\t", "+\t\tloader.load(inStream);", "+\t\ttry {", "+\t\t\tinStream.close();", "+\t\t} catch (IOException e) {}", "+\t", "+\t\tString[] formats = {\"bmp\", \"bmp_rle\", \"gif\", \"ico\", \"jpg\", \"png\", \"tif\"};", "+\t\tfor (int i = 0; i < formats.length; i++) {", "+\t\t\tif (formats[i].equals(filetype)) {", "+\t\t\t\t// save using the appropriate format", "+\t\t\t\tloader.save(outStream, i);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t} finally {", "+\t\ttry {", "+\t\t\toutStream.close();", "+\t\t} catch (Exception e) {", "+\t\t}", "+\t}", "+\t"]}], "num": 24493}
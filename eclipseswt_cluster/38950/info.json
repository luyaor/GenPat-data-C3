{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45026517c9e427de26fc1f0a21313853", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ea792c50866067fe4c411e824c81fb7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "19a3e64d24b0b2bd638819a1a09f94db25eb25be", "commitAfterChange": "3e0761174be0fece9e72ba33278fba6a309d93c2", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": "  int IsPreferred(int aContentType, int aDesiredContentType, int retval)", "signatureAfterChange": "  int IsPreferred(int aContentType, int aDesiredContentType, int retval)", "diff": ["+\t\t/*", "+\t\t* Feature in Mozilla. Implementing IsPreferred properly would require the use of", "+\t\t* unfrozen API such as nsICategoryManeger.GetCategoryEntry(\"gecko-content-viewer\")", "+\t\t* in order to determine which content can be handled.  The workaround is to always", "+\t\t* accept content except for known problematic types.", "+\t\t*/", "+\t\tif (contentType.equals(XPCOM.CONTENT_MAYBETEXT)) preferred = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a1deedfa1f58430171358b58bc02fc0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/AppFileLocProvider.java", "commitBeforeChange": "d8dc6af6f4961e720c9719717ae38f1a7ab18b39", "commitAfterChange": "a62cb4f3b5a52f32bd2e8a19c653c47c8c62cdfd", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  int getFile(int prop, int persistent, int _retval)", "signatureAfterChange": "  int getFile(int prop, int persistent, int _retval)", "diff": ["+\t} else if (propertyName.equals (XPCOM.NS_APP_PREF_DEFAULTS_50_DIR)) {", "+\t\tpropertyValue = profilePath;"]}], "num": 38950}
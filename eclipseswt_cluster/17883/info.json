{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1da1292bb0a1dc3c21f276db5545184", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc04ea2443a9af58b2cc8d1c3d349f07", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java", "commitBeforeChange": "4ddc80fac7dd7587f52e196fb30aea2e09d434af", "commitAfterChange": "afd2596f7d0b684f40a6cde49ffd8b1e1885b748", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tvoid createWidgets()", "signatureAfterChange": "  \tvoid createWidgets()", "diff": ["+\t\t// Combo to change the compression ratio.", "+\t\tgroup = new Group(controls, SWT.NONE);", "+\t\tgroup.setLayout(new GridLayout(3, true));", "+\t\tgroup.setText(bundle.getString(\"Save_group\"));", "+\t\timageTypeCombo = new Combo(group, SWT.DROP_DOWN | SWT.READ_ONLY);", "+\t\tString[] types = {\"JPEG\", \"PNG\", \"GIF\", \"ICO\", \"TIFF\", \"BMP\"};", "+\t\tfor (int i = 0; i < types.length; i++) {", "+\t\t\timageTypeCombo.add(types[i]);", "+\t\t}", "+\t\timageTypeCombo.select(imageTypeCombo.indexOf(\"JPEG\"));", "+\t\timageTypeCombo.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\tint index = imageTypeCombo.getSelectionIndex();", "+\t\t\t\tswitch(index) {", "+\t\t\t\tcase 0:", "+\t\t\t\t\tcompressionCombo.setEnabled(true);", "+\t\t\t\t\tcompressionRatioLabel.setEnabled(true);", "+\t\t\t\t\tif (compressionCombo.getItemCount() == 100) break;", "+\t\t\t\t\tcompressionCombo.removeAll();", "+\t\t\t\t\tfor (int i = 0; i < 100; i++) {", "+\t\t\t\t\t\tcompressionCombo.add(String.valueOf(i + 1));", "+\t\t\t\t\t}", "+\t\t\t\t\tcompressionCombo.select(compressionCombo.indexOf(\"75\"));", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 1:", "+\t\t\t\t\tcompressionCombo.setEnabled(true);", "+\t\t\t\t\tcompressionRatioLabel.setEnabled(true);", "+\t\t\t\t\tif (compressionCombo.getItemCount() == 10) break;", "+\t\t\t\t\tcompressionCombo.removeAll();", "+\t\t\t\t\tfor (int i = 0; i < 4; i++) {", "+\t\t\t\t\t\tcompressionCombo.add(String.valueOf(i));", "+\t\t\t\t\t}", "+\t\t\t\t\tcompressionCombo.select(0);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 2:", "+\t\t\t\tcase 3:", "+\t\t\t\tcase 4:", "+\t\t\t\tcase 5:", "+\t\t\t\t\tcompressionCombo.setEnabled(false);", "+\t\t\t\t\tcompressionRatioLabel.setEnabled(false);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});", "+\t\timageTypeCombo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));", "+\t\tcompressionRatioLabel = new Label(group, SWT.NONE);", "+\t\tcompressionRatioLabel.setText(bundle.getString(\"Compression\"));", "+\t\tcompressionRatioLabel.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, false, false));", "+\t\tcompressionCombo = new Combo(group, SWT.DROP_DOWN | SWT.READ_ONLY);", "+\t\tfor (int i = 0; i < 100; i++) {", "+\t\t\tcompressionCombo.add(String.valueOf(i + 1));", "+\t\t}", "+\t\tcompressionCombo.select(compressionCombo.indexOf(\"75\"));", "+\t\tcompressionCombo.setLayoutData(new GridData(SWT.FILL, SWT.CENTER, true, false));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1133540c6173447975f8cf2efb8537c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "e4adaa4f10e173e6ea3e2e6198b4cba8b36aba32", "commitAfterChange": "910f9ed4e6e4b4be38f36d2cb77edea5d888aa85", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\trc = XPCOM.NS_InitXPCOM2 (0, localFile.getAddress(), LocationProvider.getAddress ());", "+\t\t\tif (IsXULRunner) {", "+\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "+\t\t\t\tC.memset (ptr, 0, size * 2);", "+\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_InitEmbedding\", true); //$NON-NLS-1$", "+\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+\t\t\t\tint /*long*/ functionPtr = result[0];", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tC.free (functionLoad.function);", "+\t\t\t\tC.free (functionLoad.functionName);", "+\t\t\t\tC.free (ptr);", "+\t\t\t\trc = XPCOM.Call (functionPtr, localFile.getAddress (), localFile.getAddress (), LocationProvider.getAddress (), 0, 0);", "+\t\t\t\tif (rc == XPCOM.NS_OK) {", "+\t\t\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\trc = XPCOM.NS_InitXPCOM2 (0, localFile.getAddress(), LocationProvider.getAddress ());", "+\t\t\t}", "-\t\t\tif (IsXULRunner) {", "-\t\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "-\t\t\t}", "+", "+\t\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+\t\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+\t\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "+\t\t\t\t\tC.memset (ptr, 0, size * 2);", "+\t\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+\t\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_TermEmbedding\", true); //$NON-NLS-1$", "+\t\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+\t\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+\t\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+\t\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+\t\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+\t\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+\t\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+\t\t\t\t\tint /*long*/ functionPtr = result[0];", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\tC.free (functionLoad.function);", "+\t\t\t\t\tC.free (functionLoad.functionName);", "+\t\t\t\t\tC.free (ptr);", "+\t\t\t\t\tXPCOM.Call (functionPtr);", "+"]}], "num": 17883}
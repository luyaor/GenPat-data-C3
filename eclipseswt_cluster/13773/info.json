{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "933c5c0717f484bce09abaff2f5e32cf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65dc715841a16346fbfa0ede2c05b17c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "b76d431a779fdd2091d3d4adbf75cfc8e9615d94", "commitAfterChange": "56ccc8bcfcb43580a57bd9a371e724bac5e06479", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  int helpProc (int inControl, int inGlobalMouse, int inRequest, int outContentProvided, int ioHelpContent)", "signatureAfterChange": "  int helpProc (int inControl, int inGlobalMouse, int inRequest, int outContentProvided, int ioHelpContent)", "diff": ["-    switch (inRequest) {", "-\t\tcase OS.kHMSupplyContent: {", "-\t\t\tif (!(toolTipText != null && toolTipText.length () != 0)) {", "-\t\t\t\tRect rect = new Rect ();", "-\t\t\t\tint window = OS.GetControlOwner (handle);", "-\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t\t\tshort windowLeft = rect.left, windowTop = rect.top;", "-\t\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\tOS.memmove(pt, new int[] {inGlobalMouse}, 4);", "-\t\t\t\tpt.h -= windowLeft;", "-\t\t\t\tpt.v -= windowTop;", "-\t\t\t\tif (!contains (pt.h, pt.v)) break;", "-\t\t\t\tString toolTipText = null;", "-\t\t\t\tint tagSide = OS.kHMAbsoluteCenterAligned;", "-\t\t\t\tCGPoint inPt = new CGPoint ();", "-\t\t\t\tint [] contentView = new int [1];", "-\t\t\t\tOS.HIViewFindByID (OS.HIViewGetRoot (OS.GetControlOwner (handle)), OS.kHIViewWindowContentID (), contentView);", "-\t\t\t\tOS.HIViewConvertPoint (inPt, handle, contentView [0]);", "-\t\t\t\tpt.h -= (int) inPt.x;", "-\t\t\t\tpt.v -= (int) inPt.y;", "-\t\t\t\twindowLeft += (int) inPt.x;", "-\t\t\t\twindowTop += (int) inPt.y;", "-\t\t\t\tint x = pt.h;", "-\t\t\t\tint y = pt.v;", "-\t\t\t\tint headerHeight = getHeaderHeight ();", "-\t\t\t\tif (headerHeight != 0 && (0 <= y && y < headerHeight) ) {", "-\t\t\t\t\tint startX = 0;", "-\t\t\t\t\tfor (int i = 0; i < columnCount; i++) {", "-\t\t\t\t\t\tTableColumn column = columns [i];", "-\t\t\t\t\t\tint width = column.lastWidth;", "-\t\t\t\t\t\tif (startX <= x && x < startX + width) {", "-\t\t\t\t\t\t\ttoolTipText = column.toolTipText;", "-\t\t\t\t\t\t\trect.left = (short) startX;", "-\t\t\t\t\t\t\trect.right = (short) (rect.left + width);", "-\t\t\t\t\t\t\trect.bottom = (short) (rect.top + headerHeight);", "-\t\t\t\t\t\t\ttagSide = OS.kHMOutsideBottomRightAligned;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tstartX += width;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tint columnIndex = 0;", "-\t\t\t\t\tTableItem item = null;", "-\t\t\t\t\tTableColumn column = null;", "-\t\t\t\t\tint rc = OS.noErr;", "-\t\t\t\t\tfor (int i=getTopIndex (); i<itemCount && item == null && rc == OS.noErr; i++) {", "-\t\t\t\t\t\tif (columnCount == 0) {", "-\t\t\t\t\t\t\tif ((rc = OS.GetDataBrowserItemPartBounds (handle, i + 1, column_id, OS.kDataBrowserPropertyContentPart, rect)) == OS.noErr) {", "-\t\t\t\t\t\t\t\tif (OS.PtInRect (pt, rect)) {", "-\t\t\t\t\t\t\t\t\titem = _getItem (i);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "+\tif (toolTipText == null) {", "+\t    switch (inRequest) {", "+\t\t\tcase OS.kHMSupplyContent: {", "+\t\t\t\tif (!(toolTipText != null && toolTipText.length () != 0)) {", "+\t\t\t\t\tRect rect = new Rect ();", "+\t\t\t\t\tint window = OS.GetControlOwner (handle);", "+\t\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\t\t\t\tshort windowLeft = rect.left, windowTop = rect.top;", "+\t\t\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\t\tOS.memmove(pt, new int[] {inGlobalMouse}, 4);", "+\t\t\t\t\tpt.h -= windowLeft;", "+\t\t\t\t\tpt.v -= windowTop;", "+\t\t\t\t\tif (!contains (pt.h, pt.v)) break;", "+\t\t\t\t\tString toolTipText = null;", "+\t\t\t\t\tint tagSide = OS.kHMAbsoluteCenterAligned;", "+\t\t\t\t\tCGPoint inPt = new CGPoint ();", "+\t\t\t\t\tint [] contentView = new int [1];", "+\t\t\t\t\tOS.HIViewFindByID (OS.HIViewGetRoot (OS.GetControlOwner (handle)), OS.kHIViewWindowContentID (), contentView);", "+\t\t\t\t\tOS.HIViewConvertPoint (inPt, handle, contentView [0]);", "+\t\t\t\t\tpt.h -= (int) inPt.x;", "+\t\t\t\t\tpt.v -= (int) inPt.y;", "+\t\t\t\t\twindowLeft += (int) inPt.x;", "+\t\t\t\t\twindowTop += (int) inPt.y;", "+\t\t\t\t\tint x = pt.h;", "+\t\t\t\t\tint y = pt.v;", "+\t\t\t\t\tint headerHeight = getHeaderHeight ();", "+\t\t\t\t\tif (headerHeight != 0 && (0 <= y && y < headerHeight) ) {", "+\t\t\t\t\t\tint startX = 0;", "+\t\t\t\t\t\tfor (int i = 0; i < columnCount; i++) {", "+\t\t\t\t\t\t\tTableColumn column = columns [i];", "+\t\t\t\t\t\t\tint width = column.lastWidth;", "+\t\t\t\t\t\t\tif (startX <= x && x < startX + width) {", "+\t\t\t\t\t\t\t\ttoolTipText = column.toolTipText;", "+\t\t\t\t\t\t\t\trect.left = (short) startX;", "+\t\t\t\t\t\t\t\trect.right = (short) (rect.left + width);", "+\t\t\t\t\t\t\t\trect.bottom = (short) (rect.top + headerHeight);", "+\t\t\t\t\t\t\t\ttagSide = OS.kHMOutsideBottomRightAligned;", "+\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfor (int j = 0; j < columnCount; j++) {", "-\t\t\t\t\t\t\t\tcolumn = columns [j];", "-\t\t\t\t\t\t\t\tif ((rc = OS.GetDataBrowserItemPartBounds (handle, i + 1, column.id, OS.kDataBrowserPropertyContentPart, rect)) == OS.noErr) {", "+\t\t\t\t\t\t\tstartX += width;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint columnIndex = 0;", "+\t\t\t\t\t\tTableItem item = null;", "+\t\t\t\t\t\tTableColumn column = null;", "+\t\t\t\t\t\tint rc = OS.noErr;", "+\t\t\t\t\t\tfor (int i=getTopIndex (); i<itemCount && item == null && rc == OS.noErr; i++) {", "+\t\t\t\t\t\t\tif (columnCount == 0) {", "+\t\t\t\t\t\t\t\tif ((rc = OS.GetDataBrowserItemPartBounds (handle, i + 1, column_id, OS.kDataBrowserPropertyContentPart, rect)) == OS.noErr) {", "-\t\t\t\t\t\t\t\t\t\tcolumnIndex = j;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tfor (int j = 0; j < columnCount; j++) {", "+\t\t\t\t\t\t\t\t\tcolumn = columns [j];", "+\t\t\t\t\t\t\t\t\tif ((rc = OS.GetDataBrowserItemPartBounds (handle, i + 1, column.id, OS.kDataBrowserPropertyContentPart, rect)) == OS.noErr) {", "+\t\t\t\t\t\t\t\t\t\tif (OS.PtInRect (pt, rect)) {", "+\t\t\t\t\t\t\t\t\t\t\titem = _getItem (i);", "+\t\t\t\t\t\t\t\t\t\t\tcolumnIndex = j;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (item != null) {", "-\t\t\t\t\t\tGC gc = new GC (this);", "-\t\t\t\t\t\tint inset = getInsetWidth ();", "-\t\t\t\t\t\tint width = item.calculateWidth (columnIndex, gc) + inset;", "-\t\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\t\tshort [] w = new short [1];", "-\t\t\t\t\t\tOS.GetDataBrowserTableViewNamedColumnWidth (handle, column == null ? column_id : column.id, w);", "-\t\t\t\t\t\tif (width > w [0]) {", "-\t\t\t\t\t\t\ttoolTipText = item.getText (columnIndex);", "-\t\t\t\t\t\t\tImage image = item.getImage (columnIndex);", "-\t\t\t\t\t\t\tint imageWidth = image != null ? image.getBounds ().width + getGap () : 0;", "-\t\t\t\t\t\t\tint style = column == null ? SWT.LEFT : column.style;", "-\t\t\t\t\t\t\tif ((style & SWT.LEFT) != 0) {", "-\t\t\t\t\t\t\t\trect.left += imageWidth;", "-\t\t\t\t\t\t\t\trect.right = (short) (rect.left + width - imageWidth - inset);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((style & SWT.RIGHT) != 0) {", "-\t\t\t\t\t\t\t\trect.left = (short) (rect.right - width + imageWidth + inset);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((style & SWT.CENTER) != 0) {", "-\t\t\t\t\t\t\t\trect.left += imageWidth;", "+\t\t\t\t\t\tif (item != null) {", "+\t\t\t\t\t\t\tGC gc = new GC (this);", "+\t\t\t\t\t\t\tint inset = getInsetWidth ();", "+\t\t\t\t\t\t\tint width = item.calculateWidth (columnIndex, gc) + inset;", "+\t\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\t\tshort [] w = new short [1];", "+\t\t\t\t\t\t\tOS.GetDataBrowserTableViewNamedColumnWidth (handle, column == null ? column_id : column.id, w);", "+\t\t\t\t\t\t\tif (width > w [0]) {", "+\t\t\t\t\t\t\t\ttoolTipText = item.getText (columnIndex);", "+\t\t\t\t\t\t\t\tImage image = item.getImage (columnIndex);", "+\t\t\t\t\t\t\t\tint imageWidth = image != null ? image.getBounds ().width + getGap () : 0;", "+\t\t\t\t\t\t\t\tint style = column == null ? SWT.LEFT : column.style;", "+\t\t\t\t\t\t\t\tif ((style & SWT.LEFT) != 0) {", "+\t\t\t\t\t\t\t\t\trect.left += imageWidth;", "+\t\t\t\t\t\t\t\t\trect.right = (short) (rect.left + width - imageWidth - inset);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif ((style & SWT.RIGHT) != 0) {", "+\t\t\t\t\t\t\t\t\trect.left = (short) (rect.right - width + imageWidth + inset);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif ((style & SWT.CENTER) != 0) {", "+\t\t\t\t\t\t\t\t\trect.left += imageWidth;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\tif (toolTipText != null && toolTipText.length () != 0) {", "+\t\t\t\t\t\tchar [] buffer = new char [toolTipText.length ()];", "+\t\t\t\t\t\ttoolTipText.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\t\t\tint length = fixMnemonic (buffer);", "+\t\t\t\t\t\tif (display.helpString != 0) OS.CFRelease (display.helpString);", "+\t\t\t\t\t\tdisplay.helpString = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, length);", "+\t\t\t\t\t\tHMHelpContentRec helpContent = new HMHelpContentRec ();", "+\t\t\t\t\t\tOS.memmove (helpContent, ioHelpContent, HMHelpContentRec.sizeof);", "+\t\t\t\t\t\tdisplay.helpWidget = this;", "+\t\t\t\t\t\thelpContent.version = OS.kMacHelpVersion;", "+\t\t\t\t\t\thelpContent.tagSide = (short) tagSide;", "+\t\t\t\t\t\thelpContent.absHotRect_left = (short) (rect.left + windowLeft);", "+\t\t\t\t\t\thelpContent.absHotRect_top = (short) (rect.top + windowTop);", "+\t\t\t\t\t\thelpContent.absHotRect_right = (short) (rect.right + windowLeft);", "+\t\t\t\t\t\thelpContent.absHotRect_bottom = (short) (rect.bottom + windowTop);\t", "+\t\t\t\t\t\thelpContent.content0_contentType = OS.kHMCFStringContent;", "+\t\t\t\t\t\thelpContent.content0_tagCFString = display.helpString;", "+\t\t\t\t\t\thelpContent.content1_contentType = OS.kHMCFStringContent;", "+\t\t\t\t\t\thelpContent.content1_tagCFString = display.helpString;", "+\t\t\t\t\t\tOS.memmove (ioHelpContent, helpContent, HMHelpContentRec.sizeof);", "+\t\t\t\t\t\tOS.memmove (outContentProvided, new short[]{OS.kHMContentProvided}, 2);", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "-\t\t\t\tif (toolTipText != null && toolTipText.length () != 0) {", "-\t\t\t\t\tchar [] buffer = new char [toolTipText.length ()];", "-\t\t\t\t\ttoolTipText.getChars (0, buffer.length, buffer, 0);", "-\t\t\t\t\tint length = fixMnemonic (buffer);", "-\t\t\t\t\tif (display.helpString != 0) OS.CFRelease (display.helpString);", "-\t\t\t\t\tdisplay.helpString = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, length);", "-\t\t\t\t\tHMHelpContentRec helpContent = new HMHelpContentRec ();", "-\t\t\t\t\tOS.memmove (helpContent, ioHelpContent, HMHelpContentRec.sizeof);", "-\t\t\t\t\tdisplay.helpWidget = this;", "-\t\t\t\t\thelpContent.version = OS.kMacHelpVersion;", "-\t\t\t\t\thelpContent.tagSide = (short) tagSide;", "-\t\t\t\t\thelpContent.absHotRect_left = (short) (rect.left + windowLeft);", "-\t\t\t\t\thelpContent.absHotRect_top = (short) (rect.top + windowTop);", "-\t\t\t\t\thelpContent.absHotRect_right = (short) (rect.right + windowLeft);", "-\t\t\t\t\thelpContent.absHotRect_bottom = (short) (rect.bottom + windowTop);\t", "-\t\t\t\t\thelpContent.content0_contentType = OS.kHMCFStringContent;", "-\t\t\t\t\thelpContent.content0_tagCFString = display.helpString;", "-\t\t\t\t\thelpContent.content1_contentType = OS.kHMCFStringContent;", "-\t\t\t\t\thelpContent.content1_tagCFString = display.helpString;", "-\t\t\t\t\tOS.memmove (ioHelpContent, helpContent, HMHelpContentRec.sizeof);", "-\t\t\t\t\tOS.memmove (outContentProvided, new short[]{OS.kHMContentProvided}, 2);", "-\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40f3abd5b7ab8dbe291c81cdfd406781", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b76d431a779fdd2091d3d4adbf75cfc8e9615d94", "commitAfterChange": "56ccc8bcfcb43580a57bd9a371e724bac5e06479", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  int helpProc (int inControl, int inGlobalMouse, int inRequest, int outContentProvided, int ioHelpContent)", "signatureAfterChange": "  int helpProc (int inControl, int inGlobalMouse, int inRequest, int outContentProvided, int ioHelpContent)", "diff": ["-    switch (inRequest) {", "-\t\tcase OS.kHMSupplyContent: {", "-\t\t\tif (!(toolTipText != null && toolTipText.length () != 0)) {", "-\t\t\t\tRect rect = new Rect ();", "-\t\t\t\tint window = OS.GetControlOwner (handle);", "-\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t\t\tshort windowLeft = rect.left, windowTop = rect.top;", "-\t\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\tOS.memmove(pt, new int[] {inGlobalMouse}, 4);", "-\t\t\t\tpt.h -= windowLeft;", "-\t\t\t\tpt.v -= windowTop;", "-\t\t\t\tif (!contains (pt.h, pt.v)) break;", "-\t\t\t\tString toolTipText = null;", "-\t\t\t\tint tagSide = OS.kHMAbsoluteCenterAligned;", "-\t\t\t\tCGPoint inPt = new CGPoint ();", "-\t\t\t\tint [] contentView = new int [1];", "-\t\t\t\tOS.HIViewFindByID (OS.HIViewGetRoot (OS.GetControlOwner (handle)), OS.kHIViewWindowContentID (), contentView);", "-\t\t\t\tOS.HIViewConvertPoint (inPt, handle, contentView [0]);", "-\t\t\t\tpt.h -= (int) inPt.x;", "-\t\t\t\tpt.v -= (int) inPt.y;", "-\t\t\t\twindowLeft += (int) inPt.x;", "-\t\t\t\twindowTop += (int) inPt.y;", "-\t\t\t\tint x = pt.h;", "-\t\t\t\tint y = pt.v;", "-\t\t\t\tint headerHeight = getHeaderHeight ();", "-\t\t\t\tif (headerHeight != 0 && (0 <= y && y < headerHeight) ) {", "-\t\t\t\t\tint startX = 0;", "-\t\t\t\t\tfor (int i = 0; i < columnCount; i++) {", "-\t\t\t\t\t\tTreeColumn column = columns [i];", "-\t\t\t\t\t\tint width = column.lastWidth + getLeftDisclosureInset (column.id);", "-\t\t\t\t\t\tif (startX <= x && x < startX + width) {", "-\t\t\t\t\t\t\ttoolTipText = column.toolTipText;", "-\t\t\t\t\t\t\trect.left = (short) startX;", "-\t\t\t\t\t\t\trect.right = (short) (rect.left + width);", "-\t\t\t\t\t\t\trect.bottom = (short) (rect.top + headerHeight);", "-\t\t\t\t\t\t\ttagSide = OS.kHMOutsideBottomRightAligned;", "-\t\t\t\t\t\t\tbreak;", "+\tif (toolTipText == null) {", "+\t    switch (inRequest) {", "+\t\t\tcase OS.kHMSupplyContent: {", "+\t\t\t\tif (!(toolTipText != null && toolTipText.length () != 0)) {", "+\t\t\t\t\tRect rect = new Rect ();", "+\t\t\t\t\tint window = OS.GetControlOwner (handle);", "+\t\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\t\t\t\tshort windowLeft = rect.left, windowTop = rect.top;", "+\t\t\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\t\tOS.memmove(pt, new int[] {inGlobalMouse}, 4);", "+\t\t\t\t\tpt.h -= windowLeft;", "+\t\t\t\t\tpt.v -= windowTop;", "+\t\t\t\t\tif (!contains (pt.h, pt.v)) break;", "+\t\t\t\t\tString toolTipText = null;", "+\t\t\t\t\tint tagSide = OS.kHMAbsoluteCenterAligned;", "+\t\t\t\t\tCGPoint inPt = new CGPoint ();", "+\t\t\t\t\tint [] contentView = new int [1];", "+\t\t\t\t\tOS.HIViewFindByID (OS.HIViewGetRoot (OS.GetControlOwner (handle)), OS.kHIViewWindowContentID (), contentView);", "+\t\t\t\t\tOS.HIViewConvertPoint (inPt, handle, contentView [0]);", "+\t\t\t\t\tpt.h -= (int) inPt.x;", "+\t\t\t\t\tpt.v -= (int) inPt.y;", "+\t\t\t\t\twindowLeft += (int) inPt.x;", "+\t\t\t\t\twindowTop += (int) inPt.y;", "+\t\t\t\t\tint x = pt.h;", "+\t\t\t\t\tint y = pt.v;", "+\t\t\t\t\tint headerHeight = getHeaderHeight ();", "+\t\t\t\t\tif (headerHeight != 0 && (0 <= y && y < headerHeight) ) {", "+\t\t\t\t\t\tint startX = 0;", "+\t\t\t\t\t\tfor (int i = 0; i < columnCount; i++) {", "+\t\t\t\t\t\t\tTreeColumn column = columns [i];", "+\t\t\t\t\t\t\tint width = column.lastWidth + getLeftDisclosureInset (column.id);", "+\t\t\t\t\t\t\tif (startX <= x && x < startX + width) {", "+\t\t\t\t\t\t\t\ttoolTipText = column.toolTipText;", "+\t\t\t\t\t\t\t\trect.left = (short) startX;", "+\t\t\t\t\t\t\t\trect.right = (short) (rect.left + width);", "+\t\t\t\t\t\t\t\trect.bottom = (short) (rect.top + headerHeight);", "+\t\t\t\t\t\t\t\ttagSide = OS.kHMOutsideBottomRightAligned;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tstartX += width;", "-\t\t\t\t\t\tstartX += width;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tint columnIndex = 0;", "-\t\t\t\t\tTreeItem item = null;", "-\t\t\t\t\tTreeColumn column = null;", "-\t\t\t\t\tfor (int i=0; i<items.length && item == null; i++) {", "-\t\t\t\t\t\tTreeItem nextItem = items [i];", "-\t\t\t\t\t\tif (nextItem != null) {", "-\t\t\t\t\t\t\tif (columnCount == 0) {", "-\t\t\t\t\t\t\t\tif (OS.GetDataBrowserItemPartBounds (handle, nextItem.id, column_id, OS.kDataBrowserPropertyContentPart, rect) == OS.noErr) {", "-\t\t\t\t\t\t\t\t\tif (OS.PtInRect (pt, rect)) {", "-\t\t\t\t\t\t\t\t\t\titem = nextItem;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int j = 0; j < columnCount; j++) {", "-\t\t\t\t\t\t\t\t\tcolumn = columns [j];", "-\t\t\t\t\t\t\t\t\tif (OS.GetDataBrowserItemPartBounds (handle, nextItem.id, column.id, OS.kDataBrowserPropertyContentPart, rect) == OS.noErr) {", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint columnIndex = 0;", "+\t\t\t\t\t\tTreeItem item = null;", "+\t\t\t\t\t\tTreeColumn column = null;", "+\t\t\t\t\t\tfor (int i=0; i<items.length && item == null; i++) {", "+\t\t\t\t\t\t\tTreeItem nextItem = items [i];", "+\t\t\t\t\t\t\tif (nextItem != null) {", "+\t\t\t\t\t\t\t\tif (columnCount == 0) {", "+\t\t\t\t\t\t\t\t\tif (OS.GetDataBrowserItemPartBounds (handle, nextItem.id, column_id, OS.kDataBrowserPropertyContentPart, rect) == OS.noErr) {", "-\t\t\t\t\t\t\t\t\t\t\tcolumnIndex = j;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tfor (int j = 0; j < columnCount; j++) {", "+\t\t\t\t\t\t\t\t\t\tcolumn = columns [j];", "+\t\t\t\t\t\t\t\t\t\tif (OS.GetDataBrowserItemPartBounds (handle, nextItem.id, column.id, OS.kDataBrowserPropertyContentPart, rect) == OS.noErr) {", "+\t\t\t\t\t\t\t\t\t\t\tif (OS.PtInRect (pt, rect)) {", "+\t\t\t\t\t\t\t\t\t\t\t\titem = nextItem;", "+\t\t\t\t\t\t\t\t\t\t\t\tcolumnIndex = j;", "+\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (item != null) {", "-\t\t\t\t\t\tint columnId = column == null ? column_id : column.id;", "-\t\t\t\t\t\tGC gc = new GC (this);", "-\t\t\t\t\t\tint inset = getInsetWidth (columnId, false);", "-\t\t\t\t\t\tint width = item.calculateWidth (columnIndex, gc) + inset;", "-\t\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\t\tshort [] w = new short [1];", "-\t\t\t\t\t\tOS.GetDataBrowserTableViewNamedColumnWidth (handle, columnId, w);", "-\t\t\t\t\t\tif (width > w [0]) {", "-\t\t\t\t\t\t\ttoolTipText = item.getText (columnIndex);", "-\t\t\t\t\t\t\tImage image = item.getImage (columnIndex);", "-\t\t\t\t\t\t\tint imageWidth = image != null ? image.getBounds ().width + getGap () : 0;", "-\t\t\t\t\t\t\tint style = column == null ? SWT.LEFT : column.style;", "-\t\t\t\t\t\t\tif ((style & SWT.LEFT) != 0) {", "-\t\t\t\t\t\t\t\trect.left += imageWidth;", "-\t\t\t\t\t\t\t\trect.right = (short) (rect.left + width - imageWidth - inset);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((style & SWT.RIGHT) != 0) {", "-\t\t\t\t\t\t\t\trect.left = (short) (rect.right - width + imageWidth + inset);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((style & SWT.CENTER) != 0) {", "-\t\t\t\t\t\t\t\trect.left += imageWidth;", "+\t\t\t\t\t\tif (item != null) {", "+\t\t\t\t\t\t\tint columnId = column == null ? column_id : column.id;", "+\t\t\t\t\t\t\tGC gc = new GC (this);", "+\t\t\t\t\t\t\tint inset = getInsetWidth (columnId, false);", "+\t\t\t\t\t\t\tint width = item.calculateWidth (columnIndex, gc) + inset;", "+\t\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\t\tshort [] w = new short [1];", "+\t\t\t\t\t\t\tOS.GetDataBrowserTableViewNamedColumnWidth (handle, columnId, w);", "+\t\t\t\t\t\t\tif (width > w [0]) {", "+\t\t\t\t\t\t\t\ttoolTipText = item.getText (columnIndex);", "+\t\t\t\t\t\t\t\tImage image = item.getImage (columnIndex);", "+\t\t\t\t\t\t\t\tint imageWidth = image != null ? image.getBounds ().width + getGap () : 0;", "+\t\t\t\t\t\t\t\tint style = column == null ? SWT.LEFT : column.style;", "+\t\t\t\t\t\t\t\tif ((style & SWT.LEFT) != 0) {", "+\t\t\t\t\t\t\t\t\trect.left += imageWidth;", "+\t\t\t\t\t\t\t\t\trect.right = (short) (rect.left + width - imageWidth - inset);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif ((style & SWT.RIGHT) != 0) {", "+\t\t\t\t\t\t\t\t\trect.left = (short) (rect.right - width + imageWidth + inset);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif ((style & SWT.CENTER) != 0) {", "+\t\t\t\t\t\t\t\t\trect.left += imageWidth;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\tif (toolTipText != null && toolTipText.length () != 0) {", "+\t\t\t\t\t\tchar [] buffer = new char [toolTipText.length ()];", "+\t\t\t\t\t\ttoolTipText.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\t\t\tint length = fixMnemonic (buffer);", "+\t\t\t\t\t\tif (display.helpString != 0) OS.CFRelease (display.helpString);", "+\t\t\t\t\t\tdisplay.helpString = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, length);", "+\t\t\t\t\t\tHMHelpContentRec helpContent = new HMHelpContentRec ();", "+\t\t\t\t\t\tOS.memmove (helpContent, ioHelpContent, HMHelpContentRec.sizeof);", "+\t\t\t\t\t\tdisplay.helpWidget = this;", "+\t\t\t\t\t\thelpContent.version = OS.kMacHelpVersion;", "+\t\t\t\t\t\thelpContent.tagSide = (short) tagSide;", "+\t\t\t\t\t\thelpContent.absHotRect_left = (short) (rect.left + windowLeft);", "+\t\t\t\t\t\thelpContent.absHotRect_top = (short) (rect.top + windowTop);", "+\t\t\t\t\t\thelpContent.absHotRect_right = (short) (rect.right + windowLeft);", "+\t\t\t\t\t\thelpContent.absHotRect_bottom = (short) (rect.bottom + windowTop);\t", "+\t\t\t\t\t\thelpContent.content0_contentType = OS.kHMCFStringContent;", "+\t\t\t\t\t\thelpContent.content0_tagCFString = display.helpString;", "+\t\t\t\t\t\thelpContent.content1_contentType = OS.kHMCFStringContent;", "+\t\t\t\t\t\thelpContent.content1_tagCFString = display.helpString;", "+\t\t\t\t\t\tOS.memmove (ioHelpContent, helpContent, HMHelpContentRec.sizeof);", "+\t\t\t\t\t\tOS.memmove (outContentProvided, new short[]{OS.kHMContentProvided}, 2);", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "-\t\t\t\tif (toolTipText != null && toolTipText.length () != 0) {", "-\t\t\t\t\tchar [] buffer = new char [toolTipText.length ()];", "-\t\t\t\t\ttoolTipText.getChars (0, buffer.length, buffer, 0);", "-\t\t\t\t\tint length = fixMnemonic (buffer);", "-\t\t\t\t\tif (display.helpString != 0) OS.CFRelease (display.helpString);", "-\t\t\t\t\tdisplay.helpString = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, length);", "-\t\t\t\t\tHMHelpContentRec helpContent = new HMHelpContentRec ();", "-\t\t\t\t\tOS.memmove (helpContent, ioHelpContent, HMHelpContentRec.sizeof);", "-\t\t\t\t\tdisplay.helpWidget = this;", "-\t\t\t\t\thelpContent.version = OS.kMacHelpVersion;", "-\t\t\t\t\thelpContent.tagSide = (short) tagSide;", "-\t\t\t\t\thelpContent.absHotRect_left = (short) (rect.left + windowLeft);", "-\t\t\t\t\thelpContent.absHotRect_top = (short) (rect.top + windowTop);", "-\t\t\t\t\thelpContent.absHotRect_right = (short) (rect.right + windowLeft);", "-\t\t\t\t\thelpContent.absHotRect_bottom = (short) (rect.bottom + windowTop);\t", "-\t\t\t\t\thelpContent.content0_contentType = OS.kHMCFStringContent;", "-\t\t\t\t\thelpContent.content0_tagCFString = display.helpString;", "-\t\t\t\t\thelpContent.content1_contentType = OS.kHMCFStringContent;", "-\t\t\t\t\thelpContent.content1_tagCFString = display.helpString;", "-\t\t\t\t\tOS.memmove (ioHelpContent, helpContent, HMHelpContentRec.sizeof);", "-\t\t\t\t\tOS.memmove (outContentProvided, new short[]{OS.kHMContentProvided}, 2);", "-\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\tbreak;"]}], "num": 13773}
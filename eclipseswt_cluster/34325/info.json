{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a3583ad114430d5b5abf2c5ea48e519", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db9ba54be9cd89f847fe03e8685491ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "9cc72cd00c181250b1f51b95a0528a6b993c1ed9", "commitAfterChange": "1c6100db3e7e2869dd9939a388c01ffe02266ae6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  boolean forceFocus (int focusHandle)", "signatureAfterChange": "  boolean forceFocus (int focusHandle)", "diff": ["-\tif (lastFocus != null && lastFocus.setFocus ()) return true;", "-\tToolItem [] items = getItems ();", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\tToolItem item = items [i];", "-\t\tif (item.setFocus ()) return true;", "-\t}", "+\tint dir = OS.GTK_DIR_TAB_FORWARD;", "+\tif ((style & SWT.MIRRORED) != 0) dir = OS.GTK_DIR_TAB_BACKWARD;", "+\tint /*long*/ childHandle = handle;", "+\tif (currentFocusItem != null)  childHandle = currentFocusItem.handle;", "+\t/*", "+\t * Feature in GTK. GtkToolBar takes care of navigating through", "+\t * items by Up/Down arrow keys.", "+\t */", "+\tif (OS.gtk_widget_child_focus (childHandle, dir)) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "233e3bddec9f532aa81523cbeb090b44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples.paint/src/org/eclipse/swt/examples/paint/PaintView.java", "commitBeforeChange": "115de19ec544ed7d4732495ff9d3d3e3a00ddb0f", "commitAfterChange": "5db2047dab39b15ff2936cf51daab170f9747a2e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\tpublic PaintAction(String id)", "signatureAfterChange": " \t\tpublic PaintAction(Tool tool)", "diff": ["-\tabstract class PaintAction extends Action {", "-\t\tpublic PaintAction(String id) {", "+\t\tprivate Runnable action;", "+\t\tpublic PaintAction(Tool tool) {", "+\t\t\tString id = tool.group + '.' + tool.name;", "-", "-\t\t\ttry {", "-\t\t\t\tfinal URL installUrl = PaintPlugin.getDefault().getBundle().getEntry(\"/\");", "-\t\t\t\tfinal URL imageUrl = new URL(installUrl, PaintPlugin.getResourceString(id + \".image\"));", "-\t\t\t\tsetImageDescriptor(ImageDescriptor.createFromURL(imageUrl));", "-\t\t\t} catch (MalformedURLException e) {", "-\t\t\t\tPaintPlugin.logError(\"\", e);\t", "-\t\t\t}", "-", "-\t\t\tsetText(PaintPlugin.getResourceString(id + \".label\"));", "-\t\t\tsetToolTipText(PaintPlugin.getResourceString(id + \".tooltip\"));", "-\t\t\tsetDescription(PaintPlugin.getResourceString(id + \".description\"));", "+\t\t\tstyle = tool.type == SWT.RADIO ? IAction.AS_RADIO_BUTTON : IAction.AS_PUSH_BUTTON;", "+\t\t\taction = tool.action;", "+\t\t\tsetText(PaintExample.getResourceString(id + \".label\"));", "+\t\t\tsetToolTipText(PaintExample.getResourceString(id + \".tooltip\"));", "+\t\t\tsetDescription(PaintExample.getResourceString(id + \".description\"));", "+\t\t\tsetImageDescriptor(ImageDescriptor.createFromFile(", "+\t\t\t\t\tPaintExample.class,", "+\t\t\t\t\tPaintExample.getResourceString(id + \".image\")));"]}], "num": 34325}
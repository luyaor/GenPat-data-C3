{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f62c53a198ac5382f0505a04147b910a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31af9deb6aafea4798fd71b16b6c9cf8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+", "-\tint border = getBorderWidth ();", "-\t", "-\t\t\twidth += DEFAULT_WIDTH;", "-\t\t\theight += 3;", "+\t\t\twidth = DEFAULT_WIDTH;", "+\t\t\theight = 3;", "-\t\t\twidth += 3;", "-\t\t\theight += DEFAULT_HEIGHT;", "+\t\t\twidth = 3;", "+\t\t\theight = DEFAULT_HEIGHT;", "-\t\tif (image != null) {", "+\t\tif (isImage && image != null) {", "-\t\t\twidth= r.width;", "-\t\t\theight= r.height;", "+\t\t\twidth = r.width;", "+\t\t\theight = r.height;", "-\t\t\tshort[] bounds= new short[2];", "-\t\t\tshort[] baseLine= new short[1];", "-\t\t\tboolean wrap= false;", "-\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "-\t\t\t\twrap= true;", "-\t\t\t\tbounds[1]= (short) wHint;\t// If we are wrapping text, calculate the height based on wHint.", "+\t\t\tint [] ptr = new int [1];", "+\t\t\tint [] actualSize = new int [1];", "+\t\t\tOS.GetControlData (handle, (short)0 , OS.kControlStaticTextCFStringTag, 4, ptr, actualSize);", "+\t\t\tif (ptr [0] != 0) {", "+\t\t\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\tshort [] baseLine = new short [1];", "+\t\t\t\tboolean wrap = false;", "+\t\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "+\t\t\t\t\twrap = true;", "+\t\t\t\t\tbounds.h = (short) wHint;", "+\t\t\t\t}", "+\t\t\t\t// NEEDS work - only works for default font", "+\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "+\t\t\t\twidth = bounds.h;", "+\t\t\t\theight = bounds.v;", "+\t\t\t\tOS.CFRelease (ptr [0]);", "+\t\t\t} else {", "+\t\t\t\twidth = DEFAULT_WIDTH;", "+\t\t\t\theight = DEFAULT_HEIGHT;", "-\t\t\tint sHandle= OS.CFStringCreateWithCharacters(MacUtil.removeMnemonics(text));", "-\t\t\t\t\t", "-\t\t\tGC gc= new GC(this);", "-\t\t\tgc.installFont();", "-\t\t\tOS.GetThemeTextDimensions(sHandle, OS.kThemeCurrentPortFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "-\t\t\tgc.dispose();", "-\t\t\t", "-\t\t\tOS.CFRelease(sHandle);", "-\t\t\twidth = bounds[1];", "-\t\t\theight = bounds[0];", "-\t\t/*", "-\t\t* Feature in Motif. If a label's labelType is XmSTRING but it", "-\t\t* has no label set into it yet, recomputing the size will", "-\t\t* not take into account the height of the font, as we would", "-\t\t* like it to. Take care of this case.", "-\t\t*/", "-\t\t/* AW", "-\t\tif (text.length () == 0) {", "-\t\t\theight += getFontHeight ();", "-\t\t\twidth = 0;", "-\t\t}", "-\t\t*/", "-\treturn new Point (width + 2*border, height + 2*border);", "+\treturn new Point (width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a2718663a98ff07c902302ddab77697", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "e2e7896b3cf0e9c97f6038a8e9fe8cfb357377bf", "commitAfterChange": "d2e697ac12d333462fab7aa686c0fbe95379eed0", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 54, "signatureBeforeChange": " \t void setItems (String [] items, boolean keepText, boolean keepSelection)", "signatureAfterChange": " \t void setItems (String [] items, boolean keepText, boolean keepSelection)", "diff": ["-\tif (keepSelection) selectedIndex = getSelectionIndex();", "+\tif (keepSelection) selectedIndex = getSelectionIndex ();", "+\tthis.items = items;", "-\t\tOS.gtk_list_clear_items (listHandle, 0, -1);", "-\t\t//LEAK", "-\t\tglist = 0;", "+\t\tint itemsList = OS.gtk_container_get_children (listHandle);", "+\t\tif (itemsList != 0) {", "+\t\t\tint count = OS.g_list_length (itemsList);", "+\t\t\tfor (int i=count - 1; i>=0; i--) {", "+\t\t\t\tint widget = OS.g_list_nth_data (itemsList, i);", "+\t\t\t\tOS.gtk_container_remove (listHandle, widget);", "+\t\t\t}", "+\t\t\tOS.g_list_free (itemsList);", "+\t\t}", "-\t\tint new_glist = 0;", "+\t\tint glist = 0;", "-\t\t\t// FIXME leaked strings and glist", "-\t\t\tif (string == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\t\t\tif (string == null) break;", "-\t\t\tnew_glist = OS.g_list_append (new_glist, data);", "+\t\t\tglist = OS.g_list_append (glist, data);", "-\t\tOS.gtk_signal_handler_block_by_data (entryHandle, SWT.Modify);", "-\t\tOS.gtk_signal_handler_block_by_data (listHandle, SWT.Selection);", "-\t\tOS.gtk_combo_set_popdown_strings (handle, new_glist);", "-\t\tOS.gtk_signal_handler_unblock_by_data (entryHandle, SWT.Modify);", "-\t\tOS.gtk_signal_handler_unblock_by_data (listHandle, SWT.Selection);", "+\t\tblockSignal (entryHandle, SWT.Modify);", "+\t\tblockSignal (listHandle, SWT.Selection);", "+\t\tOS.gtk_combo_set_popdown_strings (handle, glist);", "+\t\tunblockSignal (entryHandle, SWT.Modify);", "+\t\tunblockSignal (listHandle, SWT.Selection);", "-\t\tglist = new_glist;"]}], "num": 9718}
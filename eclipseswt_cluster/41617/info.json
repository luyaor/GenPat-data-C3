{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78a05f48534280771c49d0eca51bcc57", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6404d02eff3998ac77583368836065e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "e58cf6554e3358e3a82c5cf71e8614e5ec2b587a", "commitAfterChange": "7252c074be7d5fd8626b7fe92856d52e0eef4b48", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public boolean post(Event event)", "signatureAfterChange": " public boolean post(Event event)", "diff": ["-\t\t\t\t\tif (vKey == -1) return false;", "+\t\t\t\t}", "+", "+\t\t\t\t/**", "+\t\t\t\t * Feature in Quartz. If the character doesn't map to any valid key, add the Unicode value to the", "+\t\t\t\t * event as a string and post it via key 0.  That will override the keyCode and arrive unmodified in the host app.", "+\t\t\t\t */", "+\t\t\t\tboolean postUnicode = false;", "+\t\t\t\t", "+\t\t\t\tif (vKey == -1) {", "+\t\t\t\t\tvKey = 0;", "+\t\t\t\t\tpostUnicode = true;", "-\t\t\t\treturn OS.CGPostKeyboardEvent((short)0, vKey, type == SWT.KeyDown) == 0;", "+\t\t\t\tint /*long*/ eventRef = OS.CGEventCreateKeyboardEvent(0, vKey, type == SWT.KeyDown);", "+\t\t\t\tif (eventRef != 0) {", "+\t\t\t\t\tif (postUnicode) {", "+\t\t\t\t\t\tchar eventString[] = new char[1];", "+\t\t\t\t\t\teventString[0] = event.character;", "+\t\t\t\t\t\tOS.CGEventKeyboardSetUnicodeString(eventRef, eventString.length, eventString);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.CGEventPost(OS.kCGSessionEventTap, eventRef);", "+\t\t\t\t\tOS.CFRelease(eventRef);", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "864f08da1e2ae9883280c742ece8fa36", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b29a02fb6db599e79a7210a72b71b3a80e787e43", "commitAfterChange": "e48bf6e899c5ec31f19a95da48a58e6b58329d91", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void setSelection (TreeItem [] items)", "signatureAfterChange": " public void setSelection (TreeItem [] items)", "diff": ["-\tfor (int i = 0; i < items.length; i++) {", "-\t\tif (items[i].isDisposed ()) break;", "-\t\tOS.gtk_tree_selection_select_iter (selection, items[i].handle);", "+\tint i = 0;", "+\tboolean first = true;", "+\twhile (i < items.length) {", "+\t\tTreeItem item = items [i];", "+\t\tif (item == null) continue;", "+\t\tif (item.isDisposed ()) break;", "+\t\tif (first) {", "+\t\t\tint path = OS.gtk_tree_model_get_path (modelHandle, item.handle);", "+\t\t\tshowItem (path);", "+\t\t\tOS.gtk_tree_view_set_cursor (handle, path, 0, false);", "+\t\t\tOS.gtk_tree_path_free (path);", "+\t\t\tfirst = false;", "+\t\t}", "+\t\tOS.gtk_tree_selection_select_iter (selection, item.handle);", "+\t\ti++;", "-\tif (items.length > 0 && items [0] != null) showItem (items [0]);", "+\tif (i < items.length) error (SWT.ERROR_INVALID_ARGUMENT);"]}], "num": 41617}
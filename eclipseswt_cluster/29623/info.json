{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dce6c8c9e35ff04c5debe827d18258d", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6455b4706f6816a79bdbd777757df3d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 69, "signatureBeforeChange": " void columnMouseDown(Event event)", "signatureAfterChange": " void onMouseDown (Event event)", "diff": ["- */", "-void columnMouseDown(Event event) {", "-\tint itemHeight = getItemHeight();", "-\tint itemIndex;", "-\tTableItem hitItem;", "-\tTableColumn hitColumn = getColumnAtX (event.x);", "-", "-\tif (isFocusControl () == false) {", "-\t\tforceFocus ();", "-\t}", "-\tif (hitColumn != null) {", "-\t\titemIndex = (event.y - getHeaderHeight()) / itemHeight + getTopIndex();", "-\t\thitItem = (TableItem) getVisibleItem(itemIndex);", "-\t\tif (hitItem != null) {", "-\t\t\tif (hitItem.isSelectionHit(event.x) == true) {", "-\t\t\t\tdoMouseSelect(hitItem, itemIndex, event.stateMask, event.button);", "-\t\t\t}", "-\t\t\telse ", "-\t\t\tif (hitItem.isCheckHit(new Point(event.x, event.y)) == true) {", "-\t\t\t\t// only react to button one clicks. fixes bug 6770", "-\t\t\t\tif (event.button != 1) {", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tdoCheckItem(hitItem);", "-\t\t\t}", "-\t\t}", "-\t}", "-}", "+}", "+void onMouseDown (Event event) {", "+\tif (!isFocusControl ()) setFocus ();", "+\tint index = (event.y - getHeaderHeight ()) / itemHeight + topIndex;", "+\tif (!(0 <= index && index < items.length)) return;\t/* not on an available item */", "+\tTableItem selectedItem = items [index];", "+\t", "+\t/* if click was in checkbox */", "+\tif ((style & SWT.CHECK) != 0 && selectedItem.getCheckboxBounds ().contains (event.x, event.y)) {", "+\t\tif (event.button != 1) return;", "+\t\tselectedItem.setChecked (!selectedItem.checked);", "+\t\tEvent newEvent = new Event ();", "+\t\tnewEvent.item = selectedItem;", "+\t\tnewEvent.detail = SWT.CHECK;", "+\t\tpostEvent (SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\t", "+\tif (!selectedItem.getHitBounds ().contains (event.x, event.y)) return;", "+\t", "+\tif ((event.stateMask & SWT.SHIFT) == 0 && event.keyCode != SWT.SHIFT) anchorItem = null;", "+", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif (!selectedItem.isSelected ()) {", "+\t\t\tif (event.button == 1) {", "+\t\t\t\tselectItem (selectedItem, false);", "+\t\t\t\tsetFocusItem (selectedItem, true);", "+\t\t\t\tredrawItem (selectedItem.index, true);", "+\t\t\t\tEvent newEvent = new Event ();", "+\t\t\t\tnewEvent.item = selectedItem;", "+\t\t\t\tpostEvent (SWT.Selection, newEvent);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\t\t\tselectItem (selectedItem, false);", "+\t\t\t\tsetFocusItem (selectedItem, true);", "+\t\t\t\tredrawItem (selectedItem.index, true);", "+\t\t\t\tEvent newEvent = new Event ();", "+\t\t\t\tnewEvent.item = selectedItem;", "+\t\t\t\tpostEvent (SWT.Selection, newEvent);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\t/* item is selected */", "+\t\tif (event.button == 1) {", "+\t\t\t/* fire a selection event, though the selection did not change */", "+\t\t\tEvent newEvent = new Event ();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tpostEvent (SWT.Selection, newEvent);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t/* SWT.MULTI */", "+\tif (!selectedItem.isSelected ()) {", "+\t\tif (event.button == 1) {", "+\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == SWT.SHIFT) {", "+\t\t\t\tif (anchorItem == null) anchorItem = focusItem;", "+\t\t\t\tint anchorIndex = anchorItem.index;", "+\t\t\t\tint selectIndex = selectedItem.index;", "+\t\t\t\tTableItem[] newSelection = new TableItem [Math.abs (anchorIndex - selectIndex) + 1];", "+\t\t\t\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\t\t\t\tint writeIndex = 0;", "+\t\t\t\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\t\t\t\tnewSelection [writeIndex++] = items [i];", "+\t\t\t\t}", "+\t\t\t\tnewSelection [writeIndex] = items [selectIndex];", "+\t\t\t\tsetSelection (newSelection);", "+\t\t\t\tsetFocusItem (selectedItem, true);", "+\t\t\t\tredrawItems (", "+\t\t\t\t\tMath.min (anchorIndex, selectIndex),", "+\t\t\t\t\tMath.max (anchorIndex, selectIndex),", "+\t\t\t\t\ttrue);", "+\t\t\t\tEvent newEvent = new Event ();", "+\t\t\t\tnewEvent.item = selectedItem;", "+\t\t\t\tpostEvent (SWT.Selection, newEvent);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tselectItem (selectedItem, (event.stateMask & SWT.CTRL) != 0);", "+\t\t\tsetFocusItem (selectedItem, true);", "+\t\t\tredrawItem (selectedItem.index, true);", "+\t\t\tEvent newEvent = new Event ();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tpostEvent (SWT.Selection, newEvent);", "+\t\t\treturn;", "+\t\t}", "+\t\t/* button 3 */", "+\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\t\tselectItem (selectedItem, false);", "+\t\t\tsetFocusItem (selectedItem, true);", "+\t\t\tredrawItem (selectedItem.index, true);", "+\t\t\tEvent newEvent = new Event ();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tpostEvent (SWT.Selection, newEvent);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t/* item is selected */", "+\tif ((event.stateMask & SWT.CTRL) != 0) {", "+\t\tremoveSelectedItem (getSelectionIndex (selectedItem));", "+\t\tsetFocusItem (selectedItem, true);", "+\t\tredrawItem (selectedItem.index, true);", "+\t\tEvent newEvent = new Event ();", "+\t\tnewEvent.item = selectedItem;", "+\t\tpostEvent (SWT.Selection, newEvent);", "+\t\treturn;", "+\tif ((event.stateMask & SWT.SHIFT) != 0) {", "+\t\tif (anchorItem == null) anchorItem = focusItem;", "+\t\tint anchorIndex = anchorItem.index;", "+\t\tint selectIndex = selectedItem.index;", "+\t\tTableItem[] newSelection = new TableItem [Math.abs (anchorIndex - selectIndex) + 1];", "+\t\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\t\tint writeIndex = 0;", "+\t\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\t\tnewSelection [writeIndex++] = items [i];", "+\t\t}", "+\t\tnewSelection [writeIndex] = items [selectIndex];", "+\t\tsetSelection (newSelection);", "+\t\tsetFocusItem (selectedItem, true);", "+\t\tredrawItems (", "+\t\t\tMath.min (anchorIndex, selectIndex),", "+\t\t\tMath.max (anchorIndex, selectIndex),", "+\t\t\ttrue);", "+\t\tEvent newEvent = new Event ();", "+\t\tnewEvent.item = selectedItem;", "+\t\tpostEvent (SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\tselectItem (selectedItem, false);", "+\tsetFocusItem (selectedItem, true);", "+\tredrawItem (selectedItem.index, true);", "+\tEvent newEvent = new Event ();", "+\tnewEvent.item = selectedItem;", "+\tpostEvent (SWT.Selection, newEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e604662786965e34fc813faf41b8a36d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 21, "signatureBeforeChange": " void mouseDown(Event event)", "signatureAfterChange": " void doMouseDown(Event event)", "diff": ["+}", "+void doMouseDown(Event event) {", "+\tif (!isFocusControl()) setFocus();", "+\tint index = (event.y - getHeaderHeight()) / itemHeight + topIndex;", "+\tif (!(0 <= index && index < availableItems.length)) return;\t/* not on an available item */", "+\tTreeItem selectedItem = availableItems[index];", "+\t", "+\t/* if click was in expander box */", "+\tif (selectedItem.getItemCount() > 0 && selectedItem.getExpanderBounds().contains(event.x, event.y)) {", "+\t\tif (event.button != 1) return;", "+\t\tboolean expand = !selectedItem.getExpanded();", "+\t\tselectedItem.setExpanded(expand);", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = selectedItem;", "+\t\tif (expand) {", "+\t\t\tinExpand = true;", "+\t\t\tsendEvent(SWT.Expand, newEvent);", "+\t\t\tinExpand = false;", "+\t\t\tif (isDisposed()) return;", "+\t\t\tif (selectedItem.getItemCount() == 0) {", "+\t\t\t\tselectedItem.expanded = false;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tsendEvent(SWT.Collapse, newEvent);", "+\t\t}", "+\t\treturn;", "+\t}", "+\t/* if click was in checkbox */", "+\tif ((style & SWT.CHECK) != 0 && selectedItem.getCheckboxBounds().contains(event.x, event.y)) {", "+\t\tif (event.button != 1) return;", "+\t\tselectedItem.setChecked(!selectedItem.getChecked());", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = selectedItem;", "+\t\tnewEvent.detail = SWT.CHECK;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\t", "+\tif (!selectedItem.getHitBounds().contains(event.x, event.y)) return;", "+\t", "+\tif ((event.stateMask & SWT.SHIFT) == 0 && event.keyCode != SWT.SHIFT) anchorItem = null;", "+", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif (!selectedItem.isSelected()) {", "+\t\t\tif (event.button == 1) {", "+\t\t\t\tselectItem(selectedItem, false);", "+\t\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\t\tredrawItem(selectedItem.availableIndex);", "+\t\t\t\tEvent newEvent = new Event();", "+\t\t\t\tnewEvent.item = selectedItem;", "+\t\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\t\t\tselectItem(selectedItem, false);", "+\t\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\t\tredrawItem(selectedItem.availableIndex);", "+\t\t\t\tEvent newEvent = new Event();", "+\t\t\t\tnewEvent.item = selectedItem;", "+\t\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\t/* item is selected */", "+\t\tif (event.button == 1) {", "+\t\t\t/* fire a selection event, though the selection did not change */", "+\t\t\tEvent newEvent = new Event();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t/* SWT.MULTI */", "+\tif (!selectedItem.isSelected()) {", "+\t\tif (event.button == 1) {", "+\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == SWT.SHIFT) {", "+\t\t\t\tif (anchorItem == null) anchorItem = focusItem;", "+\t\t\t\tint anchorIndex = anchorItem.availableIndex;", "+\t\t\t\tint selectIndex = selectedItem.availableIndex;", "+\t\t\t\tTreeItem[] newSelection = new TreeItem [Math.abs(anchorIndex - selectIndex) + 1];", "+\t\t\t\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\t\t\t\tint writeIndex = 0;", "+\t\t\t\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\t\t\t\tnewSelection[writeIndex++] = availableItems[i];", "+\t\t\t\t}", "+\t\t\t\tnewSelection[writeIndex] = availableItems[selectIndex];", "+\t\t\t\tsetSelection(newSelection);", "+\t\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\t\tredrawItems(Math.min(anchorIndex, selectIndex), Math.max(anchorIndex, selectIndex));", "+\t\t\t\tEvent newEvent = new Event();", "+\t\t\t\tnewEvent.item = selectedItem;", "+\t\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tselectItem(selectedItem, (event.stateMask & SWT.CTRL) != 0);", "+\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\tredrawItem(selectedItem.availableIndex);", "+\t\t\tEvent newEvent = new Event();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\treturn;", "+\t\t}", "+\t\t/* button 3 */", "+\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\t\tselectItem(selectedItem, false);", "+\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\tredrawItem(selectedItem.availableIndex);", "+\t\t\tEvent newEvent = new Event();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t/* item is selected */", "+\tif (event.button != 1) return;", "+\tif ((event.stateMask & SWT.CTRL) != 0) {", "+\t\tremoveSelectedItem(getSelectionIndex(selectedItem));", "+\t\tsetFocusItem(selectedItem, true);", "+\t\tredrawItem(selectedItem.availableIndex);", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = selectedItem;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\tif ((event.stateMask & SWT.SHIFT) != 0) {", "+\t\tif (anchorItem == null) anchorItem = focusItem;", "+\t\tint anchorIndex = anchorItem.availableIndex;", "+\t\tint selectIndex = selectedItem.availableIndex;", "+\t\tTreeItem[] newSelection = new TreeItem [Math.abs(anchorIndex - selectIndex) + 1];", "+\t\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\t\tint writeIndex = 0;", "+\t\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\t\tnewSelection[writeIndex++] = availableItems[i];", "+\t\t}", "+\t\tnewSelection[writeIndex] = availableItems[selectIndex];", "+\t\tsetSelection(newSelection);", "+\t\tsetFocusItem(selectedItem, true);", "+\t\tredrawItems(Math.min(anchorIndex, selectIndex), Math.max(anchorIndex, selectIndex));", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = selectedItem;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\tselectItem(selectedItem, false);", "+\tsetFocusItem(selectedItem, true);", "+\tredrawItem(selectedItem.availableIndex);", "+\tEvent newEvent = new Event();", "+\tnewEvent.item = selectedItem;", "+\tsendEvent(SWT.Selection, newEvent);", "+}", "- */", "-void mouseDown(Event event) {", "-\tint hitItemIndex;", "-\tTreeItem hitItem;", "-\tSelectableItem selectionItem = getLastSelection();", "-\tint itemAction;", "-", "-\thitItemIndex = event.y / getItemHeight();", "-\thitItem = getRoot().getVisibleItem(hitItemIndex + getTopIndex());", "-\tif (hitItem == null) {", "-\t\treturn;", "-\t}", "-\tif (!isFocusControl()) forceFocus();", "-\tswitch (itemAction = itemAction(hitItem, event.x, event.y)) {", "-\t\tcase ActionExpandCollapse:", "-\t\t\tif (event.button != 1) return;", "-\t\t\tif (hitItem.getExpanded() == true) {", "-\t\t\t\tcollapse(hitItem, true);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\texpand(hitItem, true);", "-\t\tcase ActionSelect:", "-\t\t\tdoMouseSelect(hitItem, hitItemIndex + getTopIndex(), event.stateMask, event.button);", "-\t\t\tbreak;", "-\t\tcase ActionCheck:", "-\t\t\tif (event.button != 1) return;", "-\t\t\tdoCheckItem(hitItem);", "-\t\t\tbreak;", "-\t}", "-\tif (itemAction != ActionSelect && selectionItem == null) {", "-\t\tselectionItem = getRoot().getVisibleItem(getTopIndex());\t// select the top item if no item was selected before", "-\t\tselectNotify(selectionItem);\t\t\t\t\t\t\t\t"]}], "num": 29623}
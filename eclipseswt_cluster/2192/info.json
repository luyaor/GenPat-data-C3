{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57533c789ccea4a50d77ac8913e58ce2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e31944b3aefbf2a529ff641155a42c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "4782372115ecc2c5d5fcd4afc2822f4541a873b7", "commitAfterChange": "9524f8f97224b1a886d71621a713f7ad07d4c65a", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "  public boolean setText (String html)", "signatureAfterChange": "  public boolean setText (String html)", "diff": ["-\t/*", "-\t * Convert the String containing HTML to an array of", "-\t * bytes with UTF-8 data.", "-\t */", "+\t/* convert the String containing HTML to an array of bytes with UTF-8 data */", "-\t * Feature of XULRunner.  Setting the browser's content from a stream does not", "-\t * fire a DOM \"unload\" event for the previous page, which is the event that", "-\t * is used to unhook registered DOM listeners.  As a workaround, unhook them", "-\t * now before setting the new page content.  ", "+\t * First detect if the nsIWebBrowserStream interface is available, since this interface is frozen.", "+\t * However, this may fail because this interface was only introduced as of mozilla 1.8; if this", "+\t * interface is not found then use the pre-1.8 approach of utilizing nsIDocShell instead. ", "-\tif (IsXULRunner) unhookDOMListeners ();", "-", "-\tint rc = XPCOM.NS_GetServiceManager (result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\tresult[0] = 0;", "-\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\tserviceManager.Release ();", "-", "-\tnsIIOService ioService = new nsIIOService (result[0]);", "-\tresult[0] = 0;", "-\t/*", "-\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "-\t* when the URI protocol for the nsInputStreamChannel", "-\t* is about:blank.  The fix is to specify the file protocol.", "-\t*/", "-\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "-\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "-\trc = ioService.NewURI (aSpec, null, 0, result);", "-\tXPCOM.nsEmbedCString_delete (aSpec);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\tioService.Release ();", "-\t", "-\tnsIURI uri = new nsIURI (result[0]);", "-\tresult[0] = 0;", "-", "-\t/* aContentType */", "-\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "-\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "-", "-\t/*", "-\t * First try to use nsIWebBrowserStream to set the text into the Browser, since this", "-\t * interface is frozen.  However, this may fail because this interface was only introduced", "-\t * as of mozilla 1.8; if this interface is not found then use the pre-1.8 approach of", "-\t * utilizing nsIDocShell instead. ", "-\t */", "-\tresult[0] = 0;", "-\trc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "+\tint rc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "-\t\tnsIWebBrowserStream stream = new nsIWebBrowserStream (result[0]);", "-\t\trc = stream.OpenStream (uri.getAddress (), aContentType);", "+\t\tnew nsISupports (result[0]).Release ();", "+\t\tresult[0] = 0;", "+", "+\t\t/*", "+\t\t* Feature of nsIWebBrowserStream.  Setting the browser's content directly through", "+\t\t* its nsIWebBrowserStream does not cause a page change to occur, and therefore the", "+\t\t* events that typically signal a page change are not fired.  To make this behave", "+\t\t* as expected, navigate to about:blank first, and then set the html content once", "+\t\t* the page has loaded.", "+\t\t*/", "+", "+\t\t/*", "+\t\t* If the htmlBytes field is non-null then the about:blank page is already being", "+\t\t* loaded, so no Navigate is required.  Just set the html that is to be shown.", "+\t\t*/", "+\t\tboolean blankLoading = htmlBytes != null;", "+\t\thtmlBytes = data;", "+\t\tif (blankLoading) return true;", "+", "+\t\t/* navigate to about:blank */", "+\t\trc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);", "-\t\tint /*long*/ ptr = C.malloc (data.length);", "-\t\tXPCOM.memmove (ptr, data, data.length);", "-\t\tint pageSize = 8192;", "-\t\tint pageCount = data.length / pageSize + 1;", "-\t\tint /*long*/ current = ptr;", "-\t\tfor (int i = 0; i < pageCount; i++) {", "-\t\t\tint length = i == pageCount - 1 ? data.length % pageSize : pageSize;", "-\t\t\tif (length > 0) {", "-\t\t\t\trc = stream.AppendToStream (current, length);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t}", "-\t\t\tcurrent += pageSize;", "-\t\t}", "-\t\trc = stream.CloseStream ();", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIWebNavigation webNavigation = new nsIWebNavigation (result[0]);", "+\t\tresult[0] = 0;", "+\t    char[] uri = new char[ABOUT_BLANK.length () + 1];", "+\t    ABOUT_BLANK.getChars (0, ABOUT_BLANK.length (), uri, 0);", "+\t\trc = webNavigation.LoadURI (uri, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0);", "-\t\tC.free (ptr);", "-\t\tstream.Release ();", "+\t\twebNavigation.Release ();", "+\t\tresult[0] = 0;", "+", "+\t\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "+\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "+\t\tbyte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, \"UTF-8\", true);\t//$NON-NLS-1$", "+\t\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);", "+", "+\t\trc = XPCOM.NS_GetServiceManager (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tserviceManager.Release ();", "+", "+\t\tnsIIOService ioService = new nsIIOService (result[0]);", "+\t\tresult[0] = 0;", "+\t\t/*", "+\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "+\t\t* when the URI protocol for the nsInputStreamChannel", "+\t\t* is about:blank.  The fix is to specify the file protocol.", "+\t\t*/", "+\t\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "+\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "+\t\trc = ioService.NewURI (aSpec, null, 0, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tXPCOM.nsEmbedCString_delete (aSpec);", "+\t\tioService.Release ();", "+\t\t", "+\t\tnsIURI uri = new nsIURI (result[0]);", "+\t\tresult[0] = 0;", "+", "-\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);\t\t\t\t", "+\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\tbyte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, \"UTF-8\", true);\t//$NON-NLS-1$", "-\t\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);", "-\t\trc = docShell.LoadStream(inputStream.getAddress (), uri.getAddress (), aContentType,  aContentCharset, 0);", "+\t\trc = docShell.LoadStream (inputStream.getAddress (), uri.getAddress (), aContentType,  aContentCharset, 0);", "-\t\tXPCOM.nsEmbedCString_delete (aContentCharset);", "+\t\turi.Release ();", "+\t\tXPCOM.nsEmbedCString_delete (aContentCharset);", "+\t\tXPCOM.nsEmbedCString_delete (aContentType);", "-\tXPCOM.nsEmbedCString_delete (aContentType);", "-\turi.Release ();", "-", "-\t/*", "-\t * Feature of XULRunner.  Setting the browser's content from a stream does not", "-\t * lead to nsIWebProgressListener.OnStateChange being called with STATE_TRANSFERRING,", "-\t * which is the event that is used to hook DOM listeners, so hook them here.", "-\t */", "-\tif (IsXULRunner) hookDOMListeners ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5dfc8b6c8393a812054873f0c4c53be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "c56e9ac7b86cc3847283a3523f5a7d23cfe70b9d", "commitAfterChange": "cb8608474cdff09f829b2949b3e04358cf3efe38", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void pack ()", "signatureAfterChange": " public void pack ()", "diff": ["-\tparent.ignoreResize = true;", "-\tparent.unsubclass ();", "-\tif ((parent.style & SWT.VIRTUAL) != 0) {", "+\tboolean oldIgnoreRezize = parent.ignoreResize;", "+\tparent.ignoreResize = true;", "+\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);", "+\tint columnWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "+\t/*", "+\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "+\t* where each item has I_IMAGECALLBACK but there are no images in the", "+\t* table, the size computed by LVM_SETCOLUMNWIDTH is too small for the", "+\t* first column, causing long items to be clipped with '...'.  The fix", "+\t* is to increase the value by a small amount. ", "+\t*/", "+\tif (index == 0 && parent.imageList == null) columnWidth += 2;", "+\tif (headerWidth > columnWidth) {", "-\t\t\t* insert and remove a temporary last column for the duration", "-\t\t\t* of LVM_SETCOLUMNWIDTH.", "+\t\t\t* resize the table to be small, set the column width and then", "+\t\t\t* restor the table to its original size.", "+\t\t\tRECT rect = null;", "-\t\t\t\tLVCOLUMN lvColumn = new LVCOLUMN ();", "-\t\t\t\tlvColumn.mask = OS.LVCF_WIDTH;", "-\t\t\t\tOS.SendMessage (hwnd, OS.LVM_INSERTCOLUMN, index + 1, lvColumn);", "+\t\t\t\trect = new RECT ();", "+\t\t\t\tOS.GetWindowRect (hwnd, rect);", "+\t\t\t\tOS.UpdateWindow (hwnd);", "+\t\t\t\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOREDRAW | OS.SWP_NOZORDER;", "+\t\t\t\tSetWindowPos (hwnd, 0, 0, 0, 0, rect.bottom - rect.top, flags);", "-\t\t\t\tOS.SendMessage (hwnd, OS.LVM_DELETECOLUMN, index + 1, 0);", "+\t\t\t\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOZORDER;", "+\t\t\t\tSetWindowPos (hwnd, 0, 0, 0, rect.right - rect.left, rect.bottom - rect.top, flags);", "-\t\t}\t\t", "+\t\t}", "-\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);", "-\t\tint columnWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "-\t\t/*", "-\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "-\t\t* where each item has I_IMAGECALLBACK but there are no images in the", "-\t\t* table, the size computed by LVM_SETCOLUMNWIDTH is to small for the", "-\t\t* first column, causing long items to be clipped with '...'.  The fix", "-\t\t* is to increase the value by a small amount. ", "-\t\t*/", "-\t\tif (index == 0 && parent.imageList == null) columnWidth += 2;", "-\t\tif (headerWidth > columnWidth) {", "-\t\t\tif (image == null) {", "-\t\t\t\t/*", "-\t\t\t\t* Feature in Windows.  When LVSCW_AUTOSIZE_USEHEADER is used", "-\t\t\t\t* with LVM_SETCOLUMNWIDTH to resize the last column, the last", "-\t\t\t\t* column is expanded to fill the client area.  The fix is to", "-\t\t\t\t* insert and remove a temporary last column for the duration", "-\t\t\t\t* of LVM_SETCOLUMNWIDTH.", "-\t\t\t\t*/", "-\t\t\t\tboolean fixWidth = index == parent.getColumnCount () - 1;", "-\t\t\t\tif (fixWidth) {", "-\t\t\t\t\tLVCOLUMN lvColumn = new LVCOLUMN ();", "-\t\t\t\t\tlvColumn.mask = OS.LVCF_WIDTH;", "-\t\t\t\t\tOS.SendMessage (hwnd, OS.LVM_INSERTCOLUMN, index + 1, lvColumn);", "-\t\t\t\t}", "-\t\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE_USEHEADER);", "-\t\t\t\tif (fixWidth) {", "-\t\t\t\t\tOS.SendMessage (hwnd, OS.LVM_DELETECOLUMN, index + 1, 0);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, headerWidth);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (index == 0) {", "-\t\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, columnWidth);", "-\t\t\t}", "+\t\tif (index == 0) {", "+\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, columnWidth);", "-\tparent.subclass ();", "-\tparent.ignoreResize = false;", "+\tparent.ignoreResize = oldIgnoreRezize;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9029733af7453ab0c1f7bfa58ea86fa2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "1f6933a1b15056c0d45fcdf5019d55449793c82d", "commitAfterChange": "03b27348c501db581e6b7fd3b2d0cc945cd398ee", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void drawSelected(GC gc )", "signatureAfterChange": " void drawSelected(GC gc )", "diff": ["-\tint rightEdge = Math.min (x+width, parent.getRightItemEdge());", "+\tint deadspace = parent.simple || parent.single ? 0 : parent.curveWidth - parent.curveIndent;", "+\tint rightEdge = Math.min (x + width - deadspace, parent.getRightItemEdge() - deadspace);", "-\t\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "+\t\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - parent.curveIndent + right[2*i];", "-\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + parent.curveWidth - parent.curveIndent;", "-\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + parent.curveWidth - parent.curveIndent;", "-\t\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "+\t\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - parent.curveIndent + right[2*i];", "-\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + parent.curveWidth - parent.curveIndent;", "-\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "+\t\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + parent.curveWidth - parent.curveIndent;", "-\t\tif (!parent.simple) maxImageWidth -= CTabFolder.CURVE_INDENT;", "-\tif (!parent.simple) textWidth -= CTabFolder.CURVE_INDENT;", "-\t\tif (parent.isFocusControl()) {", "-\t\t\tDisplay display = getDisplay();", "-\t\t\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "-\t\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_WHITE));", "-\t\t\tgc.drawFocus(xDraw-1, textY-1, extent.x+2, extent.y+2);", "-\t\t}", "+//\t\tif (parent.isFocusControl()) {", "+//\t\t\tDisplay display = getDisplay();", "+//\t\t\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "+//\t\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_WHITE));", "+//\t\t\tgc.drawFocus(xDraw-1, textY-1, extent.x+2, extent.y+2);", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e190853c8614c26e81489c6bd1e477a3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "44b3178ffce3d19c1b2c77898fcf07c89beddda5", "commitAfterChange": "f51b769b025a9b25c5d56c48323852378a03a4ba", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "  public boolean setText (String html)", "signatureAfterChange": "  public boolean setText (String html)", "diff": ["-\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "-\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "-\tbyte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, \"UTF-8\", true);\t//$NON-NLS-1$", "-\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);", "-", "-\tint rc = XPCOM.NS_GetServiceManager (result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\tint rc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "+\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t/*", "+\t\t* Setting mozilla's content through nsIWebBrowserStream does not cause a page", "+\t\t* load to occur, so the events that usually accompany a page change are not", "+\t\t* fired.  To make this behave as expected, navigate to about:blank first and", "+\t\t* then set the html content once the page has loaded.", "+\t\t*/", "+\t\tnew nsISupports (result[0]).Release ();", "+\t\tresult[0] = 0;", "-\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\tresult[0] = 0;", "-\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\tserviceManager.Release ();", "+\t\t/*", "+\t\t* If htmlBytes is not null then the about:blank page is already being loaded,", "+\t\t* so no Navigate is required.  Just set the html that is to be shown.", "+\t\t*/", "+\t\tboolean blankLoading = htmlBytes != null;", "+\t\thtmlBytes = data;", "+\t\tif (blankLoading) return true;", "-\tnsIIOService ioService = new nsIIOService (result[0]);", "-\tresult[0] = 0;", "-\t/*", "-\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "-\t* when the URI protocol for the nsInputStreamChannel", "-\t* is about:blank.  The fix is to specify the file protocol.", "-\t*/", "-\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "-\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "-\trc = ioService.NewURI (aSpec, null, 0, result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\tXPCOM.nsEmbedCString_delete (aSpec);", "-\tioService.Release ();", "-", "-\tnsIURI uri = new nsIURI (result[0]);", "-\tresult[0] = 0;", "-", "-\trc = webBrowser.QueryInterface (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor (result[0]);", "-\tresult[0] = 0;", "-", "-\t/*", "-\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "-\t* through a different thread.  The callback mechanism must attach ", "-\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "-\t* Close methods never get called.", "-\t*/", "-\tInputStream inputStream = new InputStream (data);", "-\tinputStream.AddRef ();", "-", "-\trc = interfaceRequestor.GetInterface (nsIDocShell_1_9.NS_IDOCSHELL_IID, result);", "-\tif (rc == XPCOM.NS_OK) {", "+\t\t/* navigate to about:blank */", "+\t\trc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tnsIDocShell_1_9 docShell = new nsIDocShell_1_9 (result[0]);", "+\t\tnsIWebNavigation webNavigation = new nsIWebNavigation (result[0]);", "+\t\tresult[0] = 0;", "+\t    char[] uri = new char[ABOUT_BLANK.length () + 1];", "+\t    ABOUT_BLANK.getChars (0, ABOUT_BLANK.length (), uri, 0);", "+\t\trc = webNavigation.LoadURI (uri, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\twebNavigation.Release ();", "+\t} else {", "+\t\tbyte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, \"UTF-8\", true);\t//$NON-NLS-1$", "+\t\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);", "+\t\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "+\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "+", "+\t\trc = XPCOM.NS_GetServiceManager (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tserviceManager.Release ();", "+", "+\t\tnsIIOService ioService = new nsIIOService (result[0]);", "+\t\tresult[0] = 0;", "+\t\t/*", "+\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "+\t\t* when the URI protocol for the nsInputStreamChannel", "+\t\t* is about:blank.  The fix is to specify the file protocol.", "+\t\t*/", "+\t\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "+\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "+\t\trc = ioService.NewURI (aSpec, null, 0, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tXPCOM.nsEmbedCString_delete (aSpec);", "+\t\tioService.Release ();", "+", "+\t\tnsIURI uri = new nsIURI (result[0]);", "+\t\tresult[0] = 0;", "+", "+\t\trc = webBrowser.QueryInterface (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor (result[0]);", "+\t\tresult[0] = 0;", "+", "+\t\t/*", "+\t\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "+\t\t* through a different thread.  The callback mechanism must attach ", "+\t\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "+\t\t* Close methods never get called.", "+\t\t*/", "+\t\tInputStream inputStream = new InputStream (data);", "+\t\tinputStream.AddRef ();", "+", "+\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIDocShell docShell = new nsIDocShell (result[0]);", "+\t\tresult[0] = 0;", "-\t} else {", "-\t\tresult[0] = 0;", "-\t\trc = interfaceRequestor.GetInterface (nsIDocShell_1_8.NS_IDOCSHELL_IID, result);", "-\t\tif (rc == XPCOM.NS_OK) {\t", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\tnsIDocShell_1_8 docShell = new nsIDocShell_1_8 (result[0]);", "-\t\t\trc = docShell.LoadStream (inputStream.getAddress (), uri.getAddress (), aContentType,  aContentCharset, 0);", "-\t\t\tdocShell.Release ();", "-\t\t} else {", "-\t\t\tresult[0] = 0;", "-\t\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\tnsIDocShell docShell = new nsIDocShell (result[0]);", "-\t\t\trc = docShell.LoadStream (inputStream.getAddress (), uri.getAddress (), aContentType,  aContentCharset, 0);", "-\t\t\tdocShell.Release ();", "-\t\t}", "-\t}", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tresult[0] = 0;", "-\tinputStream.Release ();", "-\tinterfaceRequestor.Release ();", "-\turi.Release ();", "-\tXPCOM.nsEmbedCString_delete (aContentCharset);", "-\tXPCOM.nsEmbedCString_delete (aContentType);", "+\t\tinputStream.Release ();", "+\t\tinterfaceRequestor.Release ();", "+\t\turi.Release ();", "+\t\tXPCOM.nsEmbedCString_delete (aContentType);", "+\t\tXPCOM.nsEmbedCString_delete (aContentCharset);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dbbba17a93441e8ccef56471e58f450", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 53, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint count, width, height;", "-\t", "-\tif (singleLine) {", "-\t\tcount = 1;", "-\t} else {", "-\t\tcount = content.getLineCount();", "-\t}", "-\tif (wHint != SWT.DEFAULT) {", "-\t\twidth = wHint;", "-\t} ", "-\telse {", "-\t\twidth = DEFAULT_WIDTH;", "-\t}", "-\tif (wHint == SWT.DEFAULT) {", "-\t\tLineCache computeLineCache = lineCache;", "-\t\tif (wordWrap) {", "-\t\t\t// set non-wrapping content width calculator. Ensures ideal line width ", "-\t\t\t// that does not required wrapping. Fixes bug 31195.", "-\t\t\tcomputeLineCache = new ContentWidthCache(this, logicalContent);", "-\t\t\tif (!singleLine) {", "-\t\t\t\tcount = logicalContent.getLineCount();", "+\tint lineCount = singleLine ? 1 : content.getLineCount();", "+\tint width = 0;", "+\tint height = 0;", "+\tif (wHint == SWT.DEFAULT || hHint == SWT.DEFAULT) {", "+\t\tDisplay display = getDisplay();", "+\t\tint maxHeight = display.getClientArea().height;", "+\t\tint lineIndex = 0;", "+\t\twhile (lineIndex < lineCount && height < maxHeight) {", "+\t\t\tTextLayout layout = renderer.getTextLayout(lineIndex);", "+\t\t\tif (wordWrap) {", "+\t\t\t\tlayout.setWidth(wHint);", "+\t\t\tRectangle rect = layout.getBounds();", "+\t\t\theight += rect.height;", "+\t\t\twidth = Math.max(width, rect.width);", "+\t\t\trenderer.disposeTextLayout(layout);", "+\t\t\tlineIndex++;", "-\t\t// Only calculate what can actually be displayed.", "-\t\t// Do this because measuring each text line is a ", "-\t\t// time-consuming process.", "-\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);", "-\t\tcomputeLineCache.calculate(0, visibleCount);", "-\t\twidth = computeLineCache.getWidth() + leftMargin + rightMargin;", "-\t}", "-\telse", "-\tif (wordWrap && !singleLine) {", "-\t\t// calculate to wrap to width hint. Fixes bug 20377. ", "-\t\t// don't wrap live content. Fixes bug 38344.", "-\t\tWrappedContent wrappedContent = new WrappedContent(renderer, logicalContent);", "-\t\twrappedContent.wrapLines(width);", "-\t\tcount = wrappedContent.getLineCount();", "-\t}", "-\tif (hHint != SWT.DEFAULT) {", "-\t\theight = hHint;", "-\t} ", "-\telse {", "-\t\theight = count * lineHeight + topMargin + bottomMargin;", "-\tif (width == 0) {", "-\t\twidth = DEFAULT_WIDTH;", "-\t}", "-\tif (height == 0) {", "-\t\tif (singleLine) {", "-\t\t\theight = lineHeight;", "-\t\t}", "-\t\telse {", "-\t\t\theight = DEFAULT_HEIGHT;", "-\t\t}", "-\t}", "-\tRectangle rect = computeTrim(0, 0, width, height);", "+\tif (width == 0) width = DEFAULT_WIDTH;", "+\tif (height == 0) height = DEFAULT_HEIGHT;", "+\tif (wHint != SWT.DEFAULT) width = wHint;", "+\tif (hHint != SWT.DEFAULT) height = hHint;", "+\tint wTrim = leftMargin + rightMargin + getCaretWidth();", "+\tint hTrim = topMargin + bottomMargin;", "+\tRectangle rect = computeTrim(0, 0, width + wTrim, height + hTrim);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073a1637bd3c3d340dee7b19f746d640", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "60e663aa8c39b991d85726c47c8d238279b12f59", "commitAfterChange": "517f6485c2e361c323310fea69335d678ad98328", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  public void test_removeII()", "signatureAfterChange": "  public void test_removeII()", "diff": ["-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(-number, number + 100);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(-number, number + 100);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-\t//should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(2, 100);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t} ", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(new TableItem[] {items[0], items[1]}, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(2, 100);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(2, number);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(new TableItem[] {items[0], items[1]}, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(2, number);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(-20, -10);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t} ", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(items, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(-20, -10);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(20, 40);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(items, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(20, 40);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttable.remove(200, 40);", "-\t\tassertEquals(items, table.getItems());", "-\t}", "+\ttable.remove(200, 40);", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(-10, 2);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(-10, 2);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(1, 200);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(1, table.getItemCount());", "-\t\tassertEquals(new TableItem[] {items[3]}, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(1, 200);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(number - 3, table.getItemCount());", "+\tassertEquals(new TableItem[] {items[3], items[4]}, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(number, number);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(number, number);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(number, number + 100);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(number, number + 100);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-"]}], "num": 2192}
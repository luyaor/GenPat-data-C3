{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f67c0ffd4541c53543f10823383d8b75", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddaaa484a61cdb4251f15769ebe5e8d0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "227bfd90a9d77f14c654baa1ea3b2eacb8c15a44", "commitAfterChange": "9b7d88df3143db20609e02dbededa54d6651de22", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  static boolean isExecutable (String fileName)", "signatureAfterChange": "  static boolean isExecutable (String fileName)", "diff": ["-\tchar[] chars = new char[fileName.length()];", "-\tfileName.getChars(0, chars.length, chars, 0);", "-\tint str = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "+\tint str = createCFString(fileName);", "-\t\t\t\tif (isDirectory[0] == 0) {", "-\t\t\t\t\tresult = Cocoa.objc_msgSend(fileManager, Cocoa.S_isExecutableFileAtPath, str) != 0;", "+\t\t\t\tif (isDirectory[0] == 0 && Cocoa.objc_msgSend (fileManager, Cocoa.S_isExecutableFileAtPath, str) != 0) {", "+\t\t\t\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, str, OS.kCFURLPOSIXPathStyle, false);", "+\t\t\t\t\tif (url != 0) {", "+\t\t\t\t\t\tbyte[] fsRef = new byte[80];", "+\t\t\t\t\t\tif (OS.CFURLGetFSRef(url, fsRef)) {", "+\t\t\t\t\t\t\tint [] type = new int[1];", "+\t\t\t\t\t\t\tOS.LSCopyItemAttribute(fsRef, OS.kLSRolesAll, OS.kLSItemContentType(), type);", "+\t\t\t\t\t\t\tif (type[0] != 0) {", "+\t\t\t\t\t\t\t\tint exeUti = createCFString(\"public.unix-executable\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tresult = OS.UTTypeConformsTo(type[0], exeUti);", "+\t\t\t\t\t\t\t\tOS.CFRelease(exeUti);", "+\t\t\t\t\t\t\t\tif (!result) {", "+\t\t\t\t\t\t\t\t\tint scriptUti = createCFString(\"public.shell-script\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tresult = OS.UTTypeEqual(type[0], scriptUti);", "+\t\t\t\t\t\t\t\t\tOS.CFRelease(scriptUti);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tOS.CFRelease(type[0]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.CFRelease(url);", "+\t\t\t\t\t}", "+\t\t\tOS.free(ptr);", "-\t\tOS.free(ptr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49603310e40e94bee3ed0b905f1dee32", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "6c4a2c166738e67832efca98869d4a51c06db92b", "commitAfterChange": "84d56fe220646f29848300da6bc168504ddc3a77", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\thandle = OS.gtk_clist_new (MAX_COLUMNS);", "+", "+\tint[] types = new int[INTERNAL_COLUMNS];", "+\tfor (int j=0; j<MAX_COLUMNS; j++) {", "+\t\ttypes[j] = OS.G_TYPE_STRING();", "+\t\ttypes[j+MAX_COLUMNS] = OS.gdk_pixbuf_get_type();", "+\t}", "+\ttypes[2*MAX_COLUMNS] = OS.G_TYPE_BOOLEAN();", "+\ttypes[2*MAX_COLUMNS+1] = OS.GDK_TYPE_COLOR();", "+\ttypes[2*MAX_COLUMNS+2] = OS.GDK_TYPE_COLOR();", "+\tmodelHandle = OS.gtk_list_store_newv(INTERNAL_COLUMNS, types);", "+\tif (modelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\thandle = OS.gtk_tree_view_new_with_model(modelHandle);", "+", "+\tint mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_EXTENDED : OS.GTK_SELECTION_BROWSE;", "+\tint selectionObject = OS.gtk_tree_view_get_selection(handle);", "+\tOS.gtk_tree_selection_set_mode(selectionObject, mode);", "+\tOS.gtk_tree_view_set_headers_visible(handle, false);\t", "+\tint hsp = (style & SWT.H_SCROLL) != 0 ? OS.GTK_POLICY_AUTOMATIC : OS.GTK_POLICY_NEVER;", "+\tint vsp = (style & SWT.V_SCROLL) != 0 ? OS.GTK_POLICY_AUTOMATIC : OS.GTK_POLICY_NEVER;", "+\tOS.gtk_scrolled_window_set_policy (scrolledHandle, hsp, vsp);", "+\tif ((style & SWT.BORDER) != 0) OS.gtk_scrolled_window_set_shadow_type (scrolledHandle, OS.GTK_SHADOW_ETCHED_IN);", "-\t/* Force row_height to be computed */", "-\tOS.gtk_clist_set_row_height (handle, 0);", "-\t", "-\t/* Single or Multiple Selection */", "-\tint mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_EXTENDED : OS.GTK_SELECTION_BROWSE;", "-\tOS.gtk_clist_set_selection_mode (handle, mode);", "+\tfakeColumn = _createColumnHandle(index);", "+\tOS.gtk_tree_view_insert_column(handle, fakeColumn, 0);", "+}", "-\t/* We fake the number of columns, because we have to know beforehand.", "-\t * Initially all those fake columns are invisible", "-\t */", "-\tbyte [] buffer = new byte [1];", "-\tfor (int i=1; i<MAX_COLUMNS; i++) {", "-\t\tOS.gtk_clist_set_column_title (handle, i, buffer);", "-\t\tOS.gtk_clist_set_column_visibility (handle, i, false);", "-", "-\t/* Scrolling policy */", "-\tint hsp = (style & SWT.H_SCROLL) != 0 ? OS.GTK_POLICY_AUTOMATIC : OS.GTK_POLICY_NEVER;", "-\tint vsp = (style & SWT.V_SCROLL) != 0 ? OS.GTK_POLICY_AUTOMATIC : OS.GTK_POLICY_NEVER;", "-\tOS.gtk_scrolled_window_set_policy (scrolledHandle, hsp, vsp);", "-", "-\tif ((style & SWT.CHECK) != 0) {", "-\t\tOS.gtk_widget_realize (handle);", "-\t\tuncheck = createCheckPixmap (false);", "-\t\tcheck = createCheckPixmap (true);", "-\t}"]}], "num": 38920}
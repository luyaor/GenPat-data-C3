{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8101d8c1560c76d7a2c7339bd35bb3d4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f97664bfd23d2e7d64c6af24335102c1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 88, "signatureBeforeChange": " void itemChanged(SelectableItem changedItem, int repaintStartX, int repaintWidth)", "signatureAfterChange": " void updateHorizontalBar()", "diff": ["- */", "-void itemChanged(SelectableItem changedItem, int repaintStartX, int repaintWidth) {", "-\tint oldItemHeight = getItemHeight();\t", "-\tPoint oldImageExtent = getImageExtent();", "-\t", "-\tif (isExpandingItem(changedItem) == false) {", "-\t\tsuper.itemChanged(changedItem, repaintStartX, repaintWidth);", "-\t}", "-\telse {", "-\t\tcalculateItemHeight(changedItem);", "-\t}", "-\tif ((oldItemHeight != getItemHeight()) ||\t\t\t// only reset items if the item height or", "-\t\t(oldImageExtent != getImageExtent())) {\t\t\t// image size has changed. The latter will only change once, ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t// from null to a value-so it's safe to test using !=", "-\t\tgetRoot().reset();\t\t\t\t\t\t\t\t// reset cached data of all items in the receiver", "-\t\tresetHierarchyIndicatorRect();", "-\t\tredraw();\t\t\t\t\t\t\t\t\t\t// redraw all items if the image extent has changed. Fixes 1FRIHPZ\t\t", "-\t}", "-\telse {", "-\t\t((AbstractTreeItem) changedItem).reset();\t\t// reset the item that has changed when the tree item ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t// height has not changed (otherwise the item caches old data)", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Fixes 1FF6B42", "-\t}", "-\tif (repaintWidth != 0) {", "-\t\tcalculateWidestShowingItem();", "-\t\tclaimRightFreeSpace();\t\t\t\t\t\t\t\t// otherwise scroll bar may be reset, but not horizontal offset", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Fixes 1G4SBJ3", "-\t}", "-}", "+ */", "+void updateHorizontalBar() {", "+\t// TODO revisit", "+\t", "+\t/* the horizontal range is never affected by an item change if there are columns */", "+\tif (getColumnCount() > 0) return;", "+\t", "+\tScrollBar hBar = getHorizontalBar();", "+\tint maxX = 0;", "+\tfor (int i = 0; i < availableItems.length; i++) {", "+\t\tRectangle itemBounds = availableItems[i].getBounds ();", "+\t\tint rightmostX = itemBounds.x + itemBounds.width;", "+\t\tmaxX = Math.max (maxX, rightmostX);", "+\t}", "+\t", "+\thBar.setMaximum(maxX);", "+\tint thumb = Math.min(maxX, getClientArea().width);", "+\thBar.setThumb(thumb);", "+\t", "+\t/* reclaim any space now left on the right */", "+\tif (maxX < horizontalOffset + thumb) {", "+\t\thorizontalOffset = maxX - thumb;", "+\t\thBar.setSelection(horizontalOffset);", "+\t\tredraw();", "+\t}", "+\t", "+\t/* ", "+\t * The following is intentionally commented, for future reference", "+\t */", "+//\t\tif (nowAvailable) {", "+//\t\t\tif (rightX <= hBar.getMaximum()) return;", "+//\t\t\tint maximum = Math.max(1, rightX);", "+//\t\t\thBar.setMaximum(maximum);", "+//\t\t\thBar.setThumb(getClientArea().width);", "+//\t\t\treturn;", "+//\t\t}", "+//\t\t", "+//\t\t/* item has become unavailable */", "+//\t\tint barMaximum = hBar.getMaximum();", "+//\t\tif (rightX < barMaximum) return;", "+//\t\t", "+//\t\t/* compute new maximum value */", "+//\t\tint newMaxX = 1;", "+//\t\tfor (int i = 0; i < availableItems.length; i++) {", "+//\t\t\tint maxX = availableItems[i].getRightmostX();", "+//\t\t\tif (newMaxX < maxX) newMaxX = maxX;", "+//\t\t}", "+//\t\tif (newMaxX == barMaximum) return;", "+//\t\thBar.setMaximum(newMaxX);", "+//\t\thBar.setThumb(getClientArea().width);", "+//\t\t", "+//\t\t/* reclaim any space now left on the right side */", "+//\t\thorizontalOffset += newMaxX - barMaximum;", "+//\t\thBar.setSelection(horizontalOffset);", "+//\t\tredraw();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b99f15dc0d5479069e5f4983e7446087", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 7, "signatureBeforeChange": " void updateVerticalBar()", "signatureAfterChange": " void calculateWidestScrolledItem(int topIndexDifference)", "diff": ["+ */", "+void calculateWidestScrolledItem(int topIndexDifference) {", "+\tint visibleItemCount = getItemCountTruncated(getClientArea());\t", "+\tint newMaximumItemWidth = getContentWidth();", "+\tint topIndex = getTopIndex();", "+\tint stopIndex = topIndex;", "+", "+\tif (topIndexDifference < 0) {\t\t\t\t\t\t\t\t// scrolled up?", "+\t\tif (Math.abs(topIndexDifference) > visibleItemCount) {\t// scrolled down more than one page (via quick thumb dragging)?", "+\t\t\ttopIndexDifference = visibleItemCount * -1;", "+\t\tfor (int i = stopIndex - topIndexDifference; i >= stopIndex; i--) {\t// check item width from old top index up to new one", "+\t\t\tnewMaximumItemWidth = Math.max(newMaximumItemWidth, getContentWidth(i));", "+\t\t}", "+\telse", "+\tif (topIndexDifference > 0) {\t\t\t\t\t\t\t\t// scrolled down?", "+\t\tif (topIndexDifference > visibleItemCount) {\t\t\t// scrolled down more than one page (via quick thumb dragging)?", "+\t\t\ttopIndexDifference = visibleItemCount;", "+\t\t}", "+\t\tstopIndex += visibleItemCount;\t\t", "+\t\tfor (int i = stopIndex - topIndexDifference; i < stopIndex; i++) {", "+\t\t\tnewMaximumItemWidth = Math.max(newMaximumItemWidth, getContentWidth(i));", "+\t\t}", "+\tsetContentWidth(newMaximumItemWidth);", "+}", "-}", "-void updateVerticalBar() {", "-\tScrollBar vBar = getVerticalBar();", "-\tint maximum = Math.max(1,availableItems.length);", "-\tif (maximum == vBar.getMaximum()) return;", "-\tvBar.setMaximum(maximum);", "-\tint thumb = Math.min(maximum, getClientArea().height / itemHeight);", "-\tvBar.setThumb(thumb);", "-\t/* reclaim any space now left on the bottom */", "-\tif (maximum < topIndex + thumb) {", "-\t\ttopIndex = maximum - thumb;", "-\t\tvBar.setSelection(topIndex);", "-\t\tredraw();", "-\t}", "-}"]}], "num": 60690}
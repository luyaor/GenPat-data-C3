{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f099fba0932bd3f9836970b5bae9304e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbe88e84b3c7107d6738769906fda565", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "69ca4def95e26b4f7985d8aa70882f0b37698d59", "commitAfterChange": "c7ffe68125d78bc1bb1c15b6e270edf7c3020f35", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  public void test_select$I()", "signatureAfterChange": "  public void test_select$I()", "diff": ["-\tint[] ind = { -1, 0, 1, 2, 3 };", "-\tlist.select(ind);", "+\tlist.select(new int[] { -1, 0, 1, 2, 3 });", "-\tind = new int[32];", "-\tfor (int i = 0; i < ind.length; i++)", "-\t\tind[i] = i;", "+\tlist.deselectAll();", "+\tlist.select(new int[] { 1, 2, 3 });", "+\tassertSame(list.getSelectionIndices(), new int[] { 1, 2, 3 });", "+\tint[] ind = new int[32];", "+\tfor (int i = 0; i < ind.length; i++) ind[i] = i;", "-\tlist.setSelection(new int[] {", "-\t});", "+\tlist.setSelection(new int[] {});", "-\tlist.setSelection(new int[] {", "-\t});", "+\tlist.setSelection(new int[] {});", "-\tsetSingleList();", "-\tlist.setItems(items);", "-\t", "-\tind = new int[]{ -1, 0, 1, 2, 3 };", "-\tlist.select(ind);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 0 });", "-", "-\t", "-\tind = new int[32];", "-\tfor (int i = 0; i < ind.length; i++)", "-\t\tind[i] = i;", "-", "-\tlist.select(ind);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 0 });", "-", "-\t", "-\tind = new int[]{ 1 };", "-\tlist.select(ind);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-\tlist.deselectAll();", "-", "-\t", "-\tind = new int[]{ -1 };", "-\tlist.select(ind);", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "+\t/*--- Single-select ---*/", "-", "-\tlist.select(new int[] { 0, 2 });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 0 });", "-", "-\tlist.select(new int[] { 1, 3 });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\tlist.select(new int[] { 1, 3 });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\tlist.select(new int[] { 2, 3 });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 2 });", "-\tlist.select(new int[] { 1, 3 });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\t", "-\tint[] selection = { 0, 1, 2, 3 };", "-\tlist.select(selection);", "+\tlist.select(new int[]{ -1 });", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+", "+\tlist.select(new int[] { 0 });", "-\t", "-\tselection = new int[]{ -1, 0, 1, 2, 3 };", "-\tlist.select(selection);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 0 });", "-", "-\t", "-\tselection = new int[32];", "-\tfor (int i = -1; i <= 30; i++)", "-\t\tselection[i + 1] = i;", "-", "-\tlist.select(selection);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 0 });", "-", "-\t", "-\tselection = new int[]{1};", "-\tlist.select(selection);", "+\tlist.select(new int[] { 1 });", "+", "+\tlist.select(new int[] { 2 });", "+\tassertEquals(list.getSelectionIndices(), new int[] { 2 });", "+", "+\tlist.select(new int[] { 3 });", "+\tassertEquals(list.getSelectionIndices(), new int[] { 3 });", "+\t", "+\tlist.select(new int[] { 4 });", "+\tassertEquals(list.getSelectionIndices(), new int[] { 4 });", "+", "+\tlist.select(new int[] { 5 });", "+\tassertEquals(list.getSelectionIndices(), new int[] { 4 });", "+", "+\tlist.deselectAll();", "+\tlist.select(new int[]{ 0, 1, 2, 3 });", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+", "+\tlist.select(new int[]{ -1, 0, 1, 2, 3 });", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+", "+\tint[] selection = new int[32];", "+\tfor (int i = 0; i < selection.length; i++) selection[i] = i;", "+\tlist.select(selection);", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+", "+\tlist.select(new int[]{ 1, 1, 1 });", "+\tassertEquals(list.getSelectionIndices(), new int[]{});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63918ae85bf83de5721d943fe72b3937", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "69ca4def95e26b4f7985d8aa70882f0b37698d59", "commitAfterChange": "c7ffe68125d78bc1bb1c15b6e270edf7c3020f35", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  public void test_setSelection$I()", "signatureAfterChange": "  public void test_setSelection$I()", "diff": ["+\t", "-\t\tfail(\"No exception thrown for selection range == null\");", "-\t}", "-\tcatch (IllegalArgumentException e) {", "-\t}", "-\t", "-\tmakeCleanEnvironment(true);", "-\t", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TableItem(table, 0);", "-\ttable.setSelection(new int[] {});", "-\tassertEquals(new int[] {}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {0, 3, 2});", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {2}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {3, 2, 1});", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {1}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {1, 4, 0});", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {0}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {0, 4, 1});", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {0}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {2, 3, 4});", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {4}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {4, 4, 4, 4, 4, 4, 4});", "-\tassertEquals(new int[] {4}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {4});", "-\tassertEquals(new int[] {4}, table.getSelectionIndices());", "-\t", "-\tmakeCleanEnvironment(true);", "-\t", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TableItem(table, 0);", "-\ttry {", "-\t\ttable.setSelection((TableItem[]) null);", "+\t", "+\ttable.setSelection(new int[] {});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {0});", "+\tassertEquals(new int[] {0}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {2});", "+\tassertEquals(new int[] {2}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {4});", "+\tassertEquals(new int[] {4}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {number-1});", "+\tassertEquals(new int[] {number-1}, table.getSelectionIndices());", "+", "+\ttable.deselectAll();", "+\ttable.setSelection(new int[] {number});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {-1});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {0, 3, 2});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.setSelection(new int[] {3, 2, 1});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.setSelection(new int[] {4, 4, 4, 4, 4, 4, 4});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());"]}], "num": 49938}
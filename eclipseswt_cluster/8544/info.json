{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c780c7368fe4cc3b0e061944500bcc51", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3a9a325a3a41d859108f7091ed687c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/internal/Converter.java", "commitBeforeChange": "c5186231dc8f47869e069b02d0fd0e1ad8ae6fb7", "commitAfterChange": "228bb4e47ffbc8bfd7d423b5adc52685adaff312", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static char [] mbcsToWcs (String codePage, byte [] buffer)", "signatureAfterChange": " public static char [] mbcsToWcs (String codePage, byte [] buffer)", "diff": ["+\t\t\t\t/*", "+\t\t\t\t* Feature in Solaris.  Some Solaris machines do not provide an iconv", "+\t\t\t\t* decoder/encoder that converts directly from/to any MBCS encoding to/from", "+\t\t\t\t* USC-2.  The fix is to convert to UTF-8 enconding first and them", "+\t\t\t\t* convert to UCS-2. ", "+\t\t\t\t*/", "-\t\t\t\tif (LastMBToWC != 0 && !cp.equals (LastMBToWCCodePage)) {", "-\t\t\t\t\tOS.iconv_close (LastMBToWC);", "-\t\t\t\t\tLastMBToWC = 0;", "+\t\t\t\tif (!cp.equals (LastMbcsToUCS2CodePage)) {", "+\t\t\t\t\tif (LastMbcsToUCS2 != -1) OS.iconv_close (LastMbcsToUCS2);", "+\t\t\t\t\tif (LastMbcsToUTF8 != -1) OS.iconv_close (LastMbcsToUTF8);", "+\t\t\t\t\tLastMbcsToUCS2 = LastMbcsToUTF8 = -1;", "+\t\t\t\t\tLastMbcsToUCS2CodePage = cp;", "+\t\t\t\t\tLastMbcsToUCS2Failed = false;", "-\t\t\t\tif (LastMBToWC == 0) {", "-\t\t\t\t\tLastMBToWCCodePage = cp;", "-\t\t\t\t\tLastMBToWC = OS.iconv_open (Unicode, getAsciiBytes (cp));", "-\t\t\t\t\tif (LastMBToWC == -1) LastMBToWC = 0;", "+\t\t\t\tint cd = LastMbcsToUCS2;", "+\t\t\t\tif (cd == -1 && !LastMbcsToUCS2Failed) {", "+\t\t\t\t\tcd = LastMbcsToUCS2 = OS.iconv_open (UCS2, getAsciiBytes (cp));", "-\t\t\t\tint cd = LastMBToWC;", "-\t\t\t\tif (cd == 0) return EMPTY_CHAR_ARRAY;", "-\t\t\t\tint inBytes = length;", "-\t\t\t\tint outBytes = length * 2;", "-\t\t\t\tint ptr1, ptr2;", "+\t\t\t\tif (cd == -1) {", "+\t\t\t\t\tLastMbcsToUCS2Failed = true;", "+\t\t\t\t\tcd = UTF8ToUCS2;", "+\t\t\t\t\tif (cd == -1) cd = UTF8ToUCS2 = OS.iconv_open (UCS2, UTF8);", "+\t\t\t\t\tif (cd == -1) return EMPTY_CHAR_ARRAY;", "+\t\t\t\t\tcd = LastMbcsToUTF8;", "+\t\t\t\t\tif (cd == -1) cd = LastMbcsToUTF8 = OS.iconv_open (UTF8, getAsciiBytes (cp));", "+\t\t\t\t}", "+\t\t\t\tif (cd == -1) return EMPTY_CHAR_ARRAY;", "+\t\t\t\tboolean utf8 = cd == LastMbcsToUTF8;", "+\t\t\t\tint inByteCount = length;", "+\t\t\t\tint outByteCount = utf8 ? length * 4 : length * 2;", "+\t\t\t\tint ptr1 = 0, ptr2 = 0, ptr3 = 0;", "-\t\t\t\t\tptr1 = BufferTimes2;", "-\t\t\t\t\tptr2 = BufferTimes4;", "+\t\t\t\t\tptr1 = MbcsBuffer;", "+\t\t\t\t\tptr2 = Utf8Buffer;", "+\t\t\t\t\tptr3 = Ucs2Buffer;", "-\t\t\t\t\tptr1 = OS.XtMalloc (inBytes);", "-\t\t\t\t\tptr2 = OS.XtMalloc (outBytes);", "+\t\t\t\t\tptr1 = OS.XtMalloc (inByteCount);", "+\t\t\t\t\tif (utf8) ptr2 = OS.XtMalloc (length * 4);", "+\t\t\t\t\tptr3 = OS.XtMalloc (length * 2);", "-\t\t\t\tint [] inBuf = {ptr1};", "-\t\t\t\tint [] inBytesLeft = {inBytes};", "-\t\t\t\tint [] outBuf = {ptr2};", "-\t\t\t\tint [] outBytesLeft = {outBytes};", "-\t\t\t\tOS.memmove (ptr1, buffer, inBytes);", "-\t\t\t\tOS.iconv (cd, inBuf, inBytesLeft, outBuf, outBytesLeft);", "-\t\t\t\toutBytes = outBuf [0] - ptr2;", "-\t\t\t\twideCharStr = new char [outBytes / 2];", "-\t\t\t\tOS.memmove (wideCharStr, ptr2, outBytes);", "-\t\t\t\tif (ptr1 != BufferTimes2) OS.XtFree (ptr1);", "-\t\t\t\tif (ptr2 != BufferTimes4) OS.XtFree (ptr2);", "+\t\t\t\tint ptr = utf8 ? ptr2 : ptr3;", "+\t\t\t\tint [] inBuffer = {ptr1};", "+\t\t\t\tint [] inBytesLeft = {inByteCount};", "+\t\t\t\tint [] outBuffer = {ptr};", "+\t\t\t\tint [] outBytesLeft = {outByteCount};", "+\t\t\t\tOS.memmove (ptr1, buffer, inByteCount);", "+\t\t\t\tOS.iconv (cd, inBuffer, inBytesLeft, outBuffer, outBytesLeft);", "+\t\t\t\toutByteCount = outBuffer [0] - ptr;", "+\t\t\t\tif (utf8) {", "+\t\t\t\t\tcd = UTF8ToUCS2;", "+\t\t\t\t\tinByteCount = outByteCount;", "+\t\t\t\t\toutByteCount = length * 2;", "+\t\t\t\t\tinBuffer[0] = ptr2;", "+\t\t\t\t\tinBytesLeft[0] = inByteCount;", "+\t\t\t\t\toutBuffer[0] = ptr3;", "+\t\t\t\t\toutBytesLeft [0]= outByteCount;", "+\t\t\t\t\tOS.iconv (cd, inBuffer, inBytesLeft, outBuffer, outBytesLeft);", "+\t\t\t\t\toutByteCount = outBuffer [0] - ptr3;", "+\t\t\t\t}", "+\t\t\t\twideCharStr = new char [outByteCount / 2];", "+\t\t\t\tOS.memmove (wideCharStr, ptr3, outByteCount);", "+\t\t\t\tif (ptr1 != 0 && ptr1 != MbcsBuffer) OS.XtFree (ptr1);", "+\t\t\t\tif (ptr2 != 0 && ptr2 != Utf8Buffer) OS.XtFree (ptr2);", "+\t\t\t\tif (ptr3 != 0 && ptr3 != Ucs2Buffer) OS.XtFree (ptr3);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52eb4c905f5e2cf9d68b56cf658d15ba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/internal/Converter.java", "commitBeforeChange": "c5186231dc8f47869e069b02d0fd0e1ad8ae6fb7", "commitAfterChange": "228bb4e47ffbc8bfd7d423b5adc52685adaff312", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static byte [] wcsToMbcs (String codePage, char [] buffer, boolean terminate)", "signatureAfterChange": " public static byte [] wcsToMbcs (String codePage, char [] buffer, boolean terminate)", "diff": ["+\t\t\t\t/*", "+\t\t\t\t* Feature in Solaris.  Some Solaris machines do not provide an iconv", "+\t\t\t\t* decoder/encoder that converts directly from/to any MBCS encoding to/from", "+\t\t\t\t* USC-2.  The fix is to convert to UTF-8 enconding first and them", "+\t\t\t\t* convert to UCS-2. ", "+\t\t\t\t*/", "-\t\t\t\tif (LastWCToMB != 0 && !cp.equals (LastWCToMBCodePage)) {", "-\t\t\t\t\tOS.iconv_close (LastWCToMB);", "-\t\t\t\t\tLastWCToMB = 0;", "+\t\t\t\tif (!cp.equals (LastUCS2ToMbcsCodePage)) {", "+\t\t\t\t\tif (LastUCS2ToMbcs != -1) OS.iconv_close (LastUCS2ToMbcs);", "+\t\t\t\t\tif (LastUTF8ToMbcs != -1) OS.iconv_close (LastUTF8ToMbcs);", "+\t\t\t\t\tLastUCS2ToMbcs = LastUTF8ToMbcs = -1;", "+\t\t\t\t\tLastUCS2ToMbcsCodePage = cp;", "-\t\t\t\tif (LastWCToMB == 0) {", "-\t\t\t\t\tLastWCToMBCodePage = cp;", "-\t\t\t\t\tLastWCToMB = OS.iconv_open (getAsciiBytes (cp), Unicode);", "-\t\t\t\t\tif (LastWCToMB == -1) LastWCToMB = 0;", "+\t\t\t\tint cd = LastUCS2ToMbcs;", "+\t\t\t\tif (cd == -1 && !LastUCS2ToMbcsFailed) {", "+\t\t\t\t\tcd = LastUCS2ToMbcs = OS.iconv_open (getAsciiBytes (cp), UCS2);", "-\t\t\t\tint cd = LastWCToMB;", "-\t\t\t\tif (cd == 0) return (terminate) ? NULL_BYTE_ARRAY : EMPTY_BYTE_ARRAY;", "-\t\t\t\tint inBytes = length * 2;", "-\t\t\t\tint outBytes = length * 4;", "-\t\t\t\tint ptr1, ptr2;", "+\t\t\t\tif (cd == -1) {", "+\t\t\t\t\tLastUCS2ToMbcsFailed = true;", "+\t\t\t\t\tcd = LastUTF8ToMbcs;", "+\t\t\t\t\tif (cd == -1) cd = LastUTF8ToMbcs = OS.iconv_open (getAsciiBytes (cp), UTF8);", "+\t\t\t\t\tif (cd == -1) return (terminate) ? NULL_BYTE_ARRAY : EMPTY_BYTE_ARRAY;", "+\t\t\t\t\tcd = UCS2ToUTF8;", "+\t\t\t\t\tif (cd == -1) cd = UCS2ToUTF8 = OS.iconv_open (UTF8, UCS2);", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tif (cd == -1) return (terminate) ? NULL_BYTE_ARRAY : EMPTY_BYTE_ARRAY;", "+\t\t\t\tboolean utf8 = cd == UCS2ToUTF8;", "+\t\t\t\tint inByteCount = length * 2;", "+\t\t\t\tint outByteCount = length * 4;", "+\t\t\t\tint ptr1 = 0, ptr2 = 0, ptr3 = 0;", "-\t\t\t\t\tptr1 = BufferTimes2;", "-\t\t\t\t\tptr2 = BufferTimes4;", "+\t\t\t\t\tptr1 = Ucs2Buffer;", "+\t\t\t\t\tptr2 = Utf8Buffer;", "+\t\t\t\t\tptr3 = MbcsBuffer;", "-\t\t\t\t\tptr1 = OS.XtMalloc (inBytes);", "-\t\t\t\t\tptr2 = OS.XtMalloc (outBytes);", "+\t\t\t\t\tptr1 = OS.XtMalloc (inByteCount);", "+\t\t\t\t\tif (utf8) ptr2 = OS.XtMalloc (outByteCount);", "+\t\t\t\t\tptr3 = OS.XtMalloc (outByteCount);", "-\t\t\t\tint [] inBuf = {ptr1};", "-\t\t\t\tint [] inBytesLeft = {inBytes};", "-\t\t\t\tint [] outBuf = {ptr2};", "-\t\t\t\tint [] outBytesLeft = {outBytes};", "-\t\t\t\tOS.memmove (ptr1, buffer, inBytes);", "+\t\t\t\tint ptr = utf8 ? ptr2 : ptr3;", "+\t\t\t\tint [] inBuffer = {ptr1};", "+\t\t\t\tint [] inBytesLeft = {inByteCount};", "+\t\t\t\tint [] outBuffer = {ptr};", "+\t\t\t\tint [] outBytesLeft = {outByteCount};", "+\t\t\t\tOS.memmove (ptr1, buffer, inByteCount);", "-\t\t\t\t\tOS.iconv (cd, inBuf, inBytesLeft, outBuf, outBytesLeft);", "+\t\t\t\t\tOS.iconv (cd, inBuffer, inBytesLeft, outBuffer, outBytesLeft);", "-\t\t\t\t\t\tinBuf [0] += 2;", "+\t\t\t\t\t\tinBuffer [0] += 2;", "-\t\t\t\toutBytes = outBuf [0] - ptr2;", "-\t\t\t\tmbcs = new byte [terminate ? outBytes + 1 : outBytes];", "-\t\t\t\tOS.memmove (mbcs, ptr2, outBytes);", "-\t\t\t\tif (ptr1 != BufferTimes2) OS.XtFree (ptr1);", "-\t\t\t\tif (ptr2 != BufferTimes4) OS.XtFree (ptr2);", "+\t\t\t\toutByteCount = outBuffer [0] - ptr;", "+\t\t\t\tif (utf8) {", "+\t\t\t\t\tcd = LastUTF8ToMbcs;", "+\t\t\t\t\tinByteCount = outByteCount;", "+\t\t\t\t\toutByteCount = length * 4;", "+\t\t\t\t\tinBuffer[0] = ptr2;", "+\t\t\t\t\tinBytesLeft[0] = inByteCount;", "+\t\t\t\t\toutBuffer[0] = ptr3;", "+\t\t\t\t\toutBytesLeft [0]= outByteCount;", "+\t\t\t\t\tOS.iconv (cd, inBuffer, inBytesLeft, outBuffer, outBytesLeft);", "+\t\t\t\t\toutByteCount = outBuffer [0] - ptr3;", "+\t\t\t\t}", "+\t\t\t\tmbcs = new byte [terminate ? outByteCount + 1 : outByteCount];", "+\t\t\t\tOS.memmove (mbcs, ptr3, outByteCount);", "+\t\t\t\tif (ptr1 != 0 && ptr1 != Ucs2Buffer) OS.XtFree (ptr1);", "+\t\t\t\tif (ptr2 != 0 && ptr2 != Utf8Buffer) OS.XtFree (ptr2);", "+\t\t\t\tif (ptr3 != 0 && ptr3 != MbcsBuffer) OS.XtFree (ptr3);"]}], "num": 8544}
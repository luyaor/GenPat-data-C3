{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "701e74fdf8c3dff99752a5c5558131b2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98f529fa32ae3e323928c9b811126c68", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 15, "signatureBeforeChange": " void propagateChildren (boolean enabled)", "signatureAfterChange": "  int kEventControlClick (int nextHandler, int theEvent, int userData)", "diff": ["+int kEventControlClick (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventControlClick (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\tif ((state & CANVAS) != 0 && (style & SWT.NO_FOCUS) == 0 && hooksKeys ()) {", "+\t\tint [] theControl = new int [1];", "+\t\tint window = OS.GetControlOwner (handle);", "+\t\tOS.GetKeyboardFocus (window, theControl);", "+\t\tif (handle != theControl [0]) {", "+\t\t\tshort [] count = new short [1];", "+\t\t\tOS.CountSubControls (handle, count);", "+\t\t\tif (count [0] == 0) {", "+\t\t\t\tif (OS.SetKeyboardFocus (window, handle, (short) OS.kControlFocusNextPart) == OS.noErr) {", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t}", "+\t\t\t}", "+\treturn result;", "-}", "-void propagateChildren (boolean enabled) {", "-\tsuper.propagateChildren (enabled);", "-\tControl [] children = _getChildren ();", "-\tfor (int i = 0; i < children.length; i++) {", "-\t\tControl child = children [i];", "-\t\tif (child.getEnabled ()) {", "-\t\t\tchild.propagateChildren (enabled);", "-\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e229b7cb0bb5a5cfc9922a27dab9778", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 18, "signatureBeforeChange": " String getText(GC gc, TableColumn column)", "signatureAfterChange": " int getContentX (int columnIndex)", "diff": ["+int getContentX (int columnIndex) {", "+\tint minX = parent.getCellPadding ();", "+\tif (columnIndex == 0) {", "+\t\tRectangle checkboxBounds = getCheckboxBounds ();", "+\t\tif (checkboxBounds != null) {", "+\t\t\tminX += checkboxBounds.width + Table.MARGIN_IMAGE;", "+\t\t}", "+\t}", "+", "+\tif (parent.columns.length == 0) return minX - parent.horizontalOffset;\t/* free first column */", "+\t", "+\tTableColumn column = parent.columns [columnIndex];", "+\tint columnX = column.getX ();", "+\tif ((column.style & SWT.LEFT) != 0) return columnX + minX;", "+\t", "+\t/* column is not left-aligned */", "+\tint contentWidth = getContentWidth (columnIndex);", "+\tint contentX = 0;", "+\tif ((column.style & SWT.RIGHT) != 0) {", "+\t\tcontentX = column.width - parent.getCellPadding () - contentWidth;\t", "+\t} else {\t/* SWT.CENTER */", "+\t\tcontentX = (column.width - contentWidth) / 2;", "+\t}", "+\treturn Math.max (columnX + minX, columnX + contentX);", "+}", "- */", "-String getText(GC gc, TableColumn column) {", "-\tint columnIndex = column.getIndex();", "-\tString label = getTrimmedText(columnIndex);", "-\tint maxWidth;", "-", "-\tif (label == null) {", "-\t\tgc.setFont(getFont());", "-\t\tmaxWidth = getMaxTextWidth(columnIndex, column.getWidth());", "-\t\tlabel = getParent().trimItemText(getText(columnIndex), maxWidth, gc);", "-\t}", "-\treturn label;", "-}"]}], "num": 5118}
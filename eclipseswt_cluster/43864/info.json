{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf5fb6f2f4160ab32dcb5e3aba3b256b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d10c337eeab9d569b4bafe1e0bfe637", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "69ca4def95e26b4f7985d8aa70882f0b37698d59", "commitAfterChange": "c7ffe68125d78bc1bb1c15b6e270edf7c3020f35", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  public void test_select$I()", "signatureAfterChange": "  public void test_select$I()", "diff": ["+\ttable.select(new int[] {2, 10, 14});", "+\tassertSame(new int[] {2, 10, 14}, table.getSelectionIndices());", "+\t", "+\ttable.deselectAll();", "+\ttable.deselectAll();", "+\ttable.select(new int[] {number, 0, number-1});", "+\tassertSame(new int[] {0, number-1}, table.getSelectionIndices());", "+\t", "+\ttable.deselectAll();", "+\ttable.select(new int[] {number, 0, -1});", "+\tassertSame(new int[] {0}, table.getSelectionIndices());", "+\t", "+\ttable.deselectAll();", "+\ttable.select(new int[] {0});", "+\tassertSame(new int[] {0}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {10});", "+\tassertSame(new int[] {0, 10}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {2});", "+\tassertSame(new int[] {0, 2, 10}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {14});", "+\tassertSame(new int[] {0, 2, 10, 14}, table.getSelectionIndices());", "+\t", "+\ttable.deselectAll();", "+\ttable.select(new int[] {15});", "+\tassertSame(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {-1});", "+\tassertSame(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {4, 4, 4});", "+\tassertSame(new int[] {4}, table.getSelectionIndices());", "+", "+\titems = new TableItem[number];", "+\tfor (int i = 0; i < number; i++)", "+\t\titems[i] = new TableItem(table, 0);", "+", "+\tfinally {", "+\t\tassertEquals(0, table.getSelectionCount());", "+\t}", "+", "+\ttable.select(new int[] {0});", "+\tassertSame(new int[] {0}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {10});", "+\tassertSame(new int[] {10}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {2});", "+\tassertSame(new int[] {2}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {14});", "+\tassertSame(new int[] {14}, table.getSelectionIndices());", "+\t", "+\ttable.deselectAll();", "+\ttable.select(new int[] {15});", "+\tassertSame(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {-1});", "+\tassertSame(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {10, 2, 14});", "+\tassertSame(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {4, 4, 4});", "+\tassertSame(new int[] {}, table.getSelectionIndices());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8bed3ea16fa5b0eb2616bf2a6cf34e9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_custom_TableTree.java", "commitBeforeChange": "ea405f6fb0d3c326c6d6598b865868c79c617d4c", "commitAfterChange": "ca7d9417c41b11f3b661bfffad06504c3c22dc98", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public void test_setSelection$Lorg_eclipse_swt_custom_TableTreeItem()", "signatureAfterChange": "  public void test_setSelection$Lorg_eclipse_swt_custom_TableTreeItem()", "diff": ["-\twarnUnimpl(\"Test test_setSelection$Lorg_eclipse_swt_custom_TableTreeItem not written\");", "+\t/* FUTURE: Should also add sub-nodes, and test both single and multi with those.", "+\t * i.e. subitems[i] = new TableTreeItem(items[i], SWT.NONE); */", "+", "+\tsetSelection_helper(\"Select no items in empty table tree\", new TableTreeItem[] {}, 0, new TableTreeItem[] {});", "+\ttry {", "+\t\ttableTree.setSelection((TableTreeItem[]) null);", "+\t\tfail(\"MULTI: No exception thrown for selecting null in empty table tree\");", "+\t} ", "+\tcatch (IllegalArgumentException e) {", "+\t}", "+\t", "+\tint number = 8;", "+\tTableTreeItem[] items = new TableTreeItem[number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\titems[i] = new TableTreeItem(tableTree, 0);", "+\t}", "+\t", "+\tsetSelection_helper(\"Select no items in table tree with items\", new TableTreeItem[] {}, 0, new TableTreeItem[] {});", "+\ttry {", "+\t\ttableTree.setSelection((TableTreeItem[]) null);", "+\t\tfail(\"MULTI: No exception thrown for selecting null in table tree with items\");", "+\t} ", "+\tcatch (IllegalArgumentException e) {", "+\t}", "+", "+\tfor (int i = 0; i < number; i++) {", "+\t\tsetSelection_helper(\"Select item \" + i, new TableTreeItem[] {items[i]}, 1, new TableTreeItem[] {items[i]});", "+\t}", "+\tsetSelection_helper(\"Select items\", items, number, items);", "+\tsetSelection_helper(\"Select tableTree.getItems()\", tableTree.getItems(), number, tableTree.getItems());", "+\tsetSelection_helper(\"Select 2 contiguous items\", new TableTreeItem[] {items[0], items[1]}, 2, new TableTreeItem[] {items[0], items[1]});", "+\tsetSelection_helper(\"Select 2 non-contiguous items\", new TableTreeItem[] {items[3], items[6]}, 2, new TableTreeItem[] {items[3], items[6]});", "+\tsetSelection_helper(\"Select 3 contiguous items\", new TableTreeItem[] {items[2], items[3], items[4]}, 3, new TableTreeItem[] {items[2], items[3], items[4]});", "+\tsetSelection_helper(\"Select 3 non-contiguous items\", new TableTreeItem[] {items[2], items[5], items[7]}, 3, new TableTreeItem[] {items[2], items[5], items[7]});", "+\tsetSelection_helper(\"Select 3 unordered contiguous items\", new TableTreeItem[] {items[4], items[2], items[3]}, 3, new TableTreeItem[] {items[2], items[3], items[4]});", "+\tsetSelection_helper(\"Select 3 unordered non-contiguous items\", new TableTreeItem[] {items[5], items[2], items[7]}, 3, new TableTreeItem[] {items[2], items[5], items[7]});", "+\tsetSelection_helper(\"Select 3 reverse-order contiguous items\", new TableTreeItem[] {items[4], items[3], items[2]}, 3, new TableTreeItem[] {items[2], items[3], items[4]});", "+\tsetSelection_helper(\"Select 3 reverse-order non-contiguous items\", new TableTreeItem[] {items[7], items[5], items[2]}, 3, new TableTreeItem[] {items[2], items[5], items[7]});", "+\tsetSelection_helper(\"Select same item twice\", new TableTreeItem[] {items[0], items[4], items[0]}, 2, new TableTreeItem[] {items[0], items[4]});", "+\tsetSelection_helper(\"Select same item multiple times\", new TableTreeItem[] {items[4], items[4], items[4], items[4], items[4], items[4]}, 1, new TableTreeItem[] {items[4]});", "+\tsetSelection_helper(\"Select multiple items multiple times\", new TableTreeItem[] {items[4], items[0], items[2], items[4], items[4], items[0], items[4], items[2]}, 3, new TableTreeItem[] {items[0], items[2], items[4]});", "+", "+\t", "+\t/* Now run the same tests on a single-select TableTree. */", "+\tsingleSelect();", "+\t", "+\tsetSelection_helper(\"Select no items in empty table tree\", new TableTreeItem[] {}, 0, new TableTreeItem[] {});", "+\ttry {", "+\t\ttableTree.setSelection((TableTreeItem[]) null);", "+\t\tfail(\"SINGLE: No exception thrown for selecting null in empty table tree\");", "+\t} ", "+\tcatch (IllegalArgumentException e) {", "+\t}", "+\t", "+\titems = new TableTreeItem[number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\titems[i] = new TableTreeItem(tableTree, 0);", "+\t}", "+\t", "+\tsetSelection_helper(\"Select no items in table tree with items\", new TableTreeItem[] {}, 0, new TableTreeItem[] {});", "+\ttry {", "+\t\ttableTree.setSelection((TableTreeItem[]) null);", "+\t\tfail(\"SINGLE: No exception thrown for selecting null in table tree with items\");", "+\t} ", "+\tcatch (IllegalArgumentException e) {", "+\t}", "+", "+\tfor (int i = 0; i < number; i++) {", "+\t\tsetSelection_helper(\"Select item \" + i, new TableTreeItem[] {items[i]}, 1, new TableTreeItem[] {items[i]});", "+\t}", "+\tsetSelection_helper(\"Select items\", items, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select tableTree.getItems()\", tableTree.getItems(), 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select 2 contiguous items\", new TableTreeItem[] {items[0], items[1]}, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select 2 non-contiguous items\", new TableTreeItem[] {items[3], items[6]}, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select 3 contiguous items\", new TableTreeItem[] {items[2], items[3], items[4]}, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select 3 non-contiguous items\", new TableTreeItem[] {items[2], items[5], items[7]}, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select 3 unordered contiguous items\", new TableTreeItem[] {items[4], items[2], items[3]}, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select 3 unordered non-contiguous items\", new TableTreeItem[] {items[5], items[2], items[7]}, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select 3 reverse-order contiguous items\", new TableTreeItem[] {items[4], items[3], items[2]}, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select 3 reverse-order non-contiguous items\", new TableTreeItem[] {items[7], items[5], items[2]}, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select same item twice\", new TableTreeItem[] {items[0], items[4], items[0]}, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select same item multiple times\", new TableTreeItem[] {items[4], items[4], items[4], items[4], items[4], items[4]}, 0, new TableTreeItem[] {});", "+\tsetSelection_helper(\"Select multiple items multiple times\", new TableTreeItem[] {items[4], items[0], items[2], items[4], items[4], items[0], items[4], items[2]}, 0, new TableTreeItem[] {});"]}], "num": 43864}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8bbd6c123cdc1cefa4b0068630454f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "689fcef2ead74085f7c0a793a7c52e15", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "cd8ecb8a69ace1495a67c3b9bfd25402d9344085", "commitAfterChange": "f8eebc4a59a9df233459e3a90fd2ee42161294e2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public FontData[] getFontData()", "signatureAfterChange": " public FontData[] getFontData()", "diff": ["-\tString[] xlfds = new String[0];", "-\t/* Go through each entry in the font list */", "-\twhile ((fontListEntry = OS.XmFontListNextEntry(context)) != 0) {", "-\t\tint fontPtr = OS.XmFontListEntryGetFont(fontListEntry, buffer);", "-\t\tif (buffer[0] == OS.XmFONT_IS_FONT) { ", "-\t\t\t/* FontList contains a single font */", "-\t\t\tOS.memmove(fontStruct,fontPtr,20 * 4);", "-\t\t\tint propPtr = fontStruct.properties;", "-\t\t\tfor (int i = 0; i < fontStruct.n_properties; i++) {", "-\t\t\t\t/* Reef through properties looking for XAFONT */", "-\t\t\t\tint[] prop = new int[2];", "-\t\t\t\tOS.memmove(prop, propPtr, 8);", "-\t\t\t\tif (prop[0] == OS.XA_FONT) {", "-\t\t\t\t\t/* Found it, prop[1] points to the string */", "-\t\t\t\t\tint ptr = OS.XmGetAtomName(xDisplay, prop[1]);", "-\t\t\t\t\tint length = OS.strlen(ptr);", "-\t\t\t\t\tbyte[] nameBuf = new byte[length];", "-\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "-\t\t\t\t\t/* Use the character encoding for the default locale */", "-\t\t\t\t\tString xlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "-\t\t\t\t\t/* Add the xlfd to the array */", "-\t\t\t\t\tString[] newXlfds = new String[xlfds.length + 1];", "-\t\t\t\t\tSystem.arraycopy(xlfds, 0, newXlfds, 0, xlfds.length);", "-\t\t\t\t\tnewXlfds[newXlfds.length - 1] = xlfd;", "-\t\t\t\t\txlfds = newXlfds;", "-\t\t\t\t\tOS.XtFree(ptr);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tpropPtr += 8;", "-\t\t\t}", "-\t\t}", "-\t\telse { ", "-\t\t\t/* FontList contains a fontSet */", "-\t\t\tint nFonts = OS.XFontsOfFontSet(fontPtr,fontStructPtr,fontNamePtr);", "-\t\t\tint [] fontStructs = new int[nFonts];", "-\t\t\tOS.memmove(fontStructs,fontStructPtr[0],nFonts * 4);", "-\t\t\tfor (int i = 0; i < nFonts; i++) { // Go through each fontStruct in the font set.", "-\t\t\t\tOS.memmove(fontStruct,fontStructs[i],20 * 4);", "+\tFontData[] data = new FontData[0];", "+\ttry {", "+\t\t/* Go through each entry in the font list */", "+\t\twhile ((fontListEntry = OS.XmFontListNextEntry(context)) != 0) {", "+\t\t\tint fontPtr = OS.XmFontListEntryGetFont(fontListEntry, buffer);", "+\t\t\tif (buffer[0] == OS.XmFONT_IS_FONT) { ", "+\t\t\t\t/* FontList contains a single font */", "+\t\t\t\tOS.memmove(fontStruct,fontPtr,20 * 4);", "-\t\t\t\tfor (int j = 0; j < fontStruct.n_properties; j++) {", "-\t\t\t\t\t// Reef through properties looking for XAFONT", "+\t\t\t\tfor (int i = 0; i < fontStruct.n_properties; i++) {", "+\t\t\t\t\t/* Look through properties for XAFONT */", "+\t\t\t\t\t\tOS.XtFree(ptr);", "+\t\t\t\t\t\t/* Use the character encoding for the default locale */", "-\t\t\t\t\t\tString[] newXlfds = new String[xlfds.length + 1];", "-\t\t\t\t\t\tSystem.arraycopy(xlfds, 0, newXlfds, 0, xlfds.length);", "-\t\t\t\t\t\tnewXlfds[newXlfds.length - 1] = xlfd;", "-\t\t\t\t\t\txlfds = newXlfds;", "-\t\t\t\t\t\tOS.XFree(ptr);", "+\t\t\t\t\t\tFontData[] newData = new FontData[data.length + 1];", "+\t\t\t\t\t\tSystem.arraycopy(data, 0, newData, 0, data.length);", "+\t\t\t\t\t\tnewData[newData.length - 1] = FontData.motif_new(xlfd);", "+\t\t\t\t\t\tdata = newData;", "+\t\t\telse { ", "+\t\t\t\t/* FontList contains a fontSet */", "+\t\t\t\tint nFonts = OS.XFontsOfFontSet(fontPtr,fontStructPtr,fontNamePtr);", "+\t\t\t\tint [] fontStructs = new int[nFonts];", "+\t\t\t\tOS.memmove(fontStructs,fontStructPtr[0],nFonts * 4);", "+\t\t\t\tfor (int i = 0; i < nFonts; i++) { // Go through each fontStruct in the font set.", "+\t\t\t\t\tOS.memmove(fontStruct,fontStructs[i],20 * 4);", "+\t\t\t\t\tint propPtr = fontStruct.properties;", "+\t\t\t\t\tfor (int j = 0; j < fontStruct.n_properties; j++) {", "+\t\t\t\t\t\t// Look through properties for XAFONT", "+\t\t\t\t\t\tint[] prop = new int[2];", "+\t\t\t\t\t\tOS.memmove(prop, propPtr, 8);", "+\t\t\t\t\t\tif (prop[0] == OS.XA_FONT) {", "+\t\t\t\t\t\t\t/* Found it, prop[1] points to the string */", "+\t\t\t\t\t\t\tint ptr = OS.XmGetAtomName(xDisplay, prop[1]);", "+\t\t\t\t\t\t\tint length = OS.strlen(ptr);", "+\t\t\t\t\t\t\tbyte[] nameBuf = new byte[length];", "+\t\t\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "+\t\t\t\t\t\t\tOS.XFree(ptr);", "+\t\t\t\t\t\t\tString xlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "+\t\t\t\t\t\t\t/* Add the xlfd to the array */", "+\t\t\t\t\t\t\tFontData[] newData = new FontData[data.length + 1];", "+\t\t\t\t\t\t\tSystem.arraycopy(data, 0, newData, 0, data.length);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tnewData[newData.length - 1] = FontData.motif_new(xlfd);", "+\t\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t * Some font servers, for example, xfstt, do not pass", "+\t\t\t\t\t\t\t\t * reasonable font properties to the client, so we", "+\t\t\t\t\t\t\t\t * cannot construct a FontData for these. Use the font", "+\t\t\t\t\t\t\t\t * name instead and return null if that fails.", "+\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\tint[] fontName = new int[1];", "+\t\t\t\t\t\t\t\tOS.memmove(fontName, fontNamePtr [0] + (i * 4), 4);", "+\t\t\t\t\t\t\t\tptr = fontName[0];", "+\t\t\t\t\t\t\t\tif (ptr != 0) {", "+\t\t\t\t\t\t\t\t\tlength = OS.strlen(ptr);", "+\t\t\t\t\t\t\t\t\tnameBuf = new byte[length];", "+\t\t\t\t\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "+\t\t\t\t\t\t\t\t\txlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "+\t\t\t\t\t\t\t\t\tnewData[newData.length - 1] = FontData.motif_new(xlfd);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdata = newData;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpropPtr += 8;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t}", "-\tOS.XmFontListFreeFontContext(context);", "-\tif (xlfds.length == 0) return null;", "-\tFontData[] fontData = new FontData[xlfds.length];", "-\t/* Construct each fontData out of the xlfd */", "-\ttry {", "-\t\tfor (int i = 0; i < xlfds.length; i++) {", "-\t\t\tfontData[i] = FontData.motif_new(xlfds[i]);", "-\t\t}", "+\t\tif (data.length == 0) return null;", "+\t} finally {", "+\t\tOS.XmFontListFreeFontContext(context);", "-\treturn fontData;", "+\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e851296c0b9ec253f34f8bc62c9a35c6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/photon/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "1c11fbfcf03cb194b949ee2f545cb614e4dccbc5", "commitAfterChange": "96800434b1856a3053cd6adb63cc4f40bb90cd9d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": "\r public Object nativeToJava(TransferData transferData)", "diff": ["- */", "+ */\r", "-\tif (transferData.pData == 0 || !(isSupportedType(transferData))) return null;\r", "-\tint size = transferData.length;\r", "-\tif (size == 0) return null;\r", "-\tbyte[] buffer = new byte[size];\r", "-\tOS.memmove(buffer, transferData.pData, size);\r", "-\tString[] filenames = new String[0];\r", "-\tint lastMark = 0;\r", "-\tfor (int i = 0; i < buffer.length; i++) {\r", "-\t\tif ( buffer[i] == 0 ) {\r", "-\t\t\tString s = new String(buffer, lastMark, i - lastMark );\r", "-\t\t\tString[] temp = filenames;\r", "-\t\t\tfilenames = new String[ filenames.length + 1];\r", "-\t\t\tSystem.arraycopy(temp, 0, filenames, 0 , temp.length);\t\t\r", "-\t\t\tfilenames[ filenames.length - 1] = s;\r", "-\t\t\tlastMark = i + 1;\r", "-\t\t}\r", "+\r", "+\tbyte[] data = (byte[])super.nativeToJava(transferData);\r", "+\tif (data == null) return null;\r", "+\tchar[] unicode = Converter.mbcsToWcs(null, data);\r", "+\tString string  = new String(unicode);\r", "+\t// parse data and convert string to array of files\r", "+\tint start = string.indexOf(\"file:\");\r", "+\tif (start == -1) return null;\r", "+\tstart += 5;\r", "+\tString[] fileNames = new String[0];\r", "+\twhile (start < string.length()) { \r", "+\t\tint end = string.indexOf(\"\\r\", start);\r", "+\t\tif (end == -1) end = string.length() - 1;\r", "+\t\tString fileName = string.substring(start, end);\r", "+\t\t\r", "+\t\tString[] newFileNames = new String[fileNames.length + 1];\r", "+\t\tSystem.arraycopy(fileNames, 0, newFileNames, 0, fileNames.length);\r", "+\t\tnewFileNames[fileNames.length] = fileName;\r", "+\t\tfileNames = newFileNames;\r", "+\r", "+\t\tstart = string.indexOf(\"file:\", end);\r", "+\t\tif (start == -1) break;\r", "+\t\tstart += 5;\r", "-\treturn filenames;\r", "+\treturn fileNames;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8363b72b9706ea0949bf1ee6a36febad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "ee359c5255474db5647bd098f9e5599338f8c1aa", "commitAfterChange": "46b2808e803b0a1f72cf9e4d36b0adc76790e712", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["+\tgc.checkGC(GC.FOREGROUND_FILL);", "+\tif (gc.data.updateClip) gc.setCGClipping();", "+\tOS.CGContextSaveGState(gc.handle);", "-\tOS.CGContextSaveGState(gc.handle);", "-\tRectangle rect = null;", "-\tRegion clipping = null, region = null;", "+\tint rgn = 0;", "+\tCGRect rect = null;", "+\tCallback callback = null;", "-\t\tif (run.style == null || run.style.background == null) continue;", "-\t\tOS.CGContextSetFillColor(gc.handle, run.style.background.handle);", "-\t\tif (clipping == null) {", "-\t\t\tregion = new Region();", "-\t\t\tclipping = new Region();", "-\t\t\tgc.getClipping(clipping);", "-\t\t\trect = clipping.getBounds();", "-\t\t}", "+\t\tTextStyle style = run.style;", "+\t\tif (style == null || style.background == null) continue;", "-\t\t\t\t\tOS.ATSUGetTextHighlight(layout, OS.Long2Fix(x), OS.Long2Fix(y + lineY + lineAscent[i]), highStart, highLen, region.handle);", "-\t\t\t\t\tregion.intersect(clipping);", "-\t\t\t\t\tgc.setClipping(region);", "-\t\t\t\t\tgc.fillRectangle(rect);", "+\t\t\t\t\tif (rgn == 0) rgn = OS.NewRgn();", "+\t\t\t\t\tOS.ATSUGetTextHighlight(layout, OS.Long2Fix(x), OS.Long2Fix(y + lineY + lineAscent[i]), highStart, highLen, rgn);", "+\t\t\t\t\tOS.CGContextSaveGState(gc.handle);", "+\t\t\t\t\tif (callback == null) {", "+\t\t\t\t\t\tcallback = new Callback(this, \"regionToRects\", 4);", "+\t\t\t\t\t\tif (callback.getAddress() == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.QDRegionToRects(rgn, OS.kQDParseRegionFromTopLeft, callback.getAddress(), gc.handle);", "+\t\t\t\t\tif (rect == null) rect = new CGRect();", "+\t\t\t\t\tOS.CGContextGetPathBoundingBox(gc.handle, rect);", "+\t\t\t\t\tOS.CGContextEOClip(gc.handle);", "+\t\t\t\t\tOS.CGContextSetFillColorSpace(gc.handle, device.colorspace);", "+\t\t\t\t\tOS.CGContextSetFillColor(gc.handle, style.background.handle);", "+\t\t\t\t\tOS.CGContextFillRect(gc.handle, rect);", "+\t\t\t\t\tOS.CGContextRestoreGState(gc.handle);", "-\tif (clipping != null) {", "-\t\tgc.setClipping(clipping);", "-\t\tOS.CGContextRestoreGState(gc.handle);", "-\t\tOS.CGContextSaveGState(gc.handle);", "-\t\tclipping.dispose();", "-\t\tregion.dispose();", "-\t}", "+\tif (callback != null) callback.dispose();", "+\tif (rgn != 0) OS.DisposeRgn(rgn);", "-\tOS.CGContextSetFillColor(gc.handle, gc.data.foreground);"]}], "num": 32316}
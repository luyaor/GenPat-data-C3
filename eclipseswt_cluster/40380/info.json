{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ae36a2e5a2668f1e1ae723a36c89352", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4df33cae3d234969ef9372bad268996", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "9b3777ac363c793d1cb46f33f1fe142affed7cf5", "commitAfterChange": "beda5b839167b1b13e3a65b090e298b270572014", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private void drag(Event dragEvent)", "signatureAfterChange": "  private void drag(Event dragEvent)", "diff": ["+\tImageData imageData = effect.getDragSourceImage(dragEvent.x, dragEvent.y);", "+\tImage image = null;", "+\tint imagelist = 0;", "+\tif (imageData != null) {", "+\t\timage = new Image(display, imageData);", "+\t\timagelist = createImageList(image);", "+\t\tif (imagelist != 0) {", "+\t\t\tPoint pt = getDisplay().map(control, null, dragEvent.x, dragEvent.y);", "+\t\t\tOS.ImageList_BeginDrag(imagelist, 0, 0, 0);", "+\t\t\tOS.ImageList_DragEnter(0, pt.x, pt.y);", "+\t\t}", "+\t}", "+\tif (imagelist != 0) {", "+\t\tOS.ImageList_DragLeave(0);", "+\t\tOS.ImageList_EndDrag();", "+\t\tOS.ImageList_Destroy(imagelist);", "+\t\timagelist = 0;", "+\t}", "+\tif (image != null) {", "+\t\timage.dispose();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c302c96b1ea9930cc9164df2e7d8e8b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/WebSite.java", "commitBeforeChange": "df770484cf971bd1ec66ac250146e0aa48f0618e", "commitAfterChange": "7eacfabceda33db95e336392732917248587dcbf", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  int TranslateAccelerator(int lpMsg, int pguidCmdGroup, int nCmdID)", "signatureAfterChange": "  int TranslateAccelerator(int lpMsg, int pguidCmdGroup, int nCmdID)", "diff": ["-\treturn COM.S_FALSE;", "+\t/*", "+\t* Feature on Internet Explorer.  By default the embedded Internet Explorer control runs", "+\t* the Internet Explorer shortcuts. F5 causes refresh).  This behaviour is undesired when", "+\t* rendering HTML in memory as it causes the empty page about:blank page to be reloaded.  ", "+\t* The workaround is to block the default F5 handling by IE when the URL is about:blank.", "+\t*/", "+\tOleAutomation auto = new OleAutomation(this);", "+\tint[] rgdispid = auto.getIDsOfNames(new String[] { \"LocationURL\" }); //$NON-NLS-1$", "+\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "+\tauto.dispose();", "+\tint result = COM.S_FALSE;", "+\tif (pVarResult != null) {", "+\t\tif (pVarResult.getType() == OLE.VT_BSTR) {", "+\t\t\tString url = pVarResult.getString();", "+\t\t\tif (url.equals(Browser.ABOUT_BLANK)) {", "+\t\t\t\tMSG msg = new MSG();", "+\t\t\t\tOS.MoveMemory(msg, lpMsg, MSG.sizeof);", "+\t\t\t\tif (msg.message == OS.WM_KEYDOWN && msg.wParam == OS.VK_F5) result = COM.S_OK;", "+\t\t\t}", "+\t\t}", "+\t\tpVarResult.dispose();", "+\t}", "+\treturn result;"]}], "num": 40380}
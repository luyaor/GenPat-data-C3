{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54328b48d40a3525670dc5c5054c7198", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "536a966a2e7ad0dd8e2e4449702ee9f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "05b983ea7f9494935862a426120e2ed48efa2321", "commitAfterChange": "ebae021ff422331a1dd7518fe907ec83ed7cb474", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \r void releaseWidget ()", "signatureAfterChange": "\r \r void releaseWidget ()", "diff": ["+\t/*\r", "+\t* Feature in Windows.  For some reason, when\r", "+\t* TVM_GETIMAGELIST or TVM_SETIMAGELIST is sent,\r", "+\t* the tree issues NM_CUSTOMDRAW messages.  This\r", "+\t* behavior is unwanted when the tree is being\r", "+\t* disposed.  The fix is to ingore NM_CUSTOMDRAW\r", "+\t* messages by usnig the custom draw flag.\r", "+\t* \r", "+\t* NOTE: This only happens on Windows XP.\r", "+\t*/\r", "+\tcustomDraw = false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19762d6a95c0bc0f66181b2dd9ac6cca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "e7b8097d69a97f6d05802dd4043694daf7918b50", "commitAfterChange": "64abf3fa32844fc21a1b9512e383a76df55d21f8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r int callWindowProc (int msg, int wParam, int lParam)", "signatureAfterChange": "\r \r int callWindowProc (int msg, int wParam, int lParam)", "diff": ["+\t/*\r", "+\t* Bug in Windows.  For some reason, during the processing\r", "+\t* of WM_SYSCHAR, the tool bar window proc does not call the\r", "+\t* default window proc causing mnemonics for the menu bar\r", "+\t* to be ignored.  The fix is to always call the default\r", "+\t* window proc for WM_SYSCHAR.\r", "+\t*/\r", "+\tif (msg == OS.WM_SYSCHAR) {\r", "+\t\treturn OS.DefWindowProc (handle, msg, wParam, lParam);\r", "+\t}\r"]}], "num": 50978}
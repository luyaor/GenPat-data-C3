{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4da0f954b66ebaa4fb56c59c1617c98", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90f8b1ddb7c9e889e318c7dfc5f59743", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "cd729e2c48dead5df59b387a7dd4b7efdf79375f", "commitAfterChange": "30427380958ec2923d85fa84aed3c01febb70756", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r void bringToTop (boolean force)", "signatureAfterChange": "\r void bringToTop (boolean force)", "diff": ["-\tint display = OS.XtDisplay (handle);\r", "-\tif (display == 0) return;\r", "-\tint window = OS.XtWindow (handle);\r", "-\tif (window == 0) return;\r", "-\t\r", "+\tint xDisplay = OS.XtDisplay (handle);\r", "+\tif (xDisplay == 0) return;\r", "+\tint xWindow = OS.XtWindow (handle);\r", "+\tif (xWindow == 0) return;\r", "-\t\tOS.XGetInputFocus (display, buffer1, buffer2);\r", "-\t\tint xWindow = buffer1 [0];\r", "-\t\tif (xWindow == 0) return;\r", "-\t\tint handle = OS.XtWindowToWidget (display, xWindow);\r", "+\t\tOS.XGetInputFocus (xDisplay, buffer1, buffer2);\r", "+\t\tif (buffer1 [0] == 0) return;\r", "+\t\tint handle = OS.XtWindowToWidget (xDisplay, buffer1 [0]);\r", "-\r", "-\t\tWidget widget = null;\r", "-\t\tdo {\r", "-\t\t\twidget = WidgetTable.get (handle);\r", "-\t\t} while (widget == null && (handle = OS.XtParent (handle)) != 0);\r", "-\t\tif (widget == null) return;\r", "-\t\r", "-\tOS.XSetInputFocus (display, window, OS.RevertToParent, OS.CurrentTime);\r", "+\tOS.XSetInputFocus (xDisplay, xWindow, OS.RevertToParent, OS.CurrentTime);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f06d5f857c95406f06dc5e9cb773695", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "00ed21c8f8c77f61853a45cda676574d76d69e41", "commitAfterChange": "8e00f3751d53017bb47fe8df7b2fb0596267f9cb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void clearContents(int clipboards)", "signatureAfterChange": " public void clearContents(int clipboards)", "diff": ["-\t// TODO only clear clipbaord if current Clipboard object is the owner", "-\tif (true || (clipboards & DND.CLIPBOARD) == 0) return;", "-\tint xDisplay = OS.XtDisplay (shellHandle);", "-\tif (xDisplay == 0) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\tint xWindow = OS.XtWindow (shellHandle);", "-\tif (xWindow == 0) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\t", "-\t// Open clipboard for setting", "-\tint[] item_id = new int[1];\t\t\t", "-\tif (OS.XmClipboardStartCopy(xDisplay, xWindow, 0, OS.XtLastTimestampProcessed(xDisplay), shellHandle, 0, item_id) != OS.XmClipboardSuccess){", "-\t\treturn;", "+\tint xDisplay = OS.XtDisplay(shellHandle);", "+\tif (xDisplay == 0) return;", "+\tif ((clipboards & DND.CLIPBOARD) != 0 && activeClipboard == this) {", "+\t\tOS.XtDisownSelection(shellHandle, clipboardAtom, OS.CurrentTime);", "-\t// close clipboard  for setting", "-\tOS.XmClipboardEndCopy(xDisplay, xWindow, item_id[0]);", "+\tif ((clipboards & DND.SELECTION_CLIPBOARD) != 0 && activePrimaryClipboard == this) {", "+\t\tOS.XtDisownSelection(shellHandle, primaryAtom, OS.CurrentTime);", "+\t}"]}], "num": 55229}
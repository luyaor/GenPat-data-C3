{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ac0dacceb8dfe4ce7a33e4d933bbf2e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5deccabafc255fd9cac8cbddc7a641", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet277.java", "commitBeforeChange": "df88720ffacc1e4aedc46ad9c7993c18542607af", "commitAfterChange": "2714d1aedfa884938b6f4895d2c057e3d1f79ae1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tstatic nsITransfer createTransfer ()", "signatureAfterChange": "  \tstatic nsITransfer createTransfer ()", "diff": ["-\t\t\t\t\tnsICancelable = null;", "-\t\t\t\t\tcancelButton.setEnabled (false);", "-\t\t\t\t\tstatusLabel.setData (\"\");", "-\t\t\t\t\tstatusLabel.setText (\"\");", "+\t\t\t\t\tremoveFromTable ();", "-\t\t\t\tString string = (String)statusLabel.getData () + \" (\" + currentKBytes + \"/\" + totalKBytes + \")\";", "-\t\t\t\tstatusLabel.setText (string);", "+\t\t\t\ttableItem.setText (1, baseString + \" (\" + currentKBytes + \"/\" + totalKBytes + \")\");", "+\t\t\t\ttable.getColumn (1).pack ();", "-\t\t\tpublic void init (nsIURI source, nsIURI target, String displayName, nsIMIMEInfo MIMEInfo, double startTime, nsILocalFile tempFile, nsICancelable cancelable) {", "-\t\t\t\tnsICancelable = cancelable;", "-\t\t\t\tcancelButton.setEnabled (true);", "-\t\t\t\tString string = \"Downloading \" + source.getSpec () + \" to \" + target.getSpec ();", "-\t\t\t\tstatusLabel.setData (string);", "-\t\t\t\tstatusLabel.setText (string);", "+\t\t\tpublic void init (nsIURI source, nsIURI target, String displayName, nsIMIMEInfo MIMEInfo, double startTime, nsILocalFile tempFile, final nsICancelable cancelable) {", "+\t\t\t\ttableItem = new TableItem (table, SWT.NONE);", "+\t\t\t\tbutton = new Button (table, SWT.PUSH);", "+\t\t\t\tbutton.setText (\"Cancel\");", "+\t\t\t\tbutton.pack ();", "+\t\t\t\tbutton.addListener (SWT.Selection, new Listener () {", "+\t\t\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\t\t\tcancelable.cancel (Mozilla.NS_ERROR_ABORT);", "+\t\t\t\t\t\tremoveFromTable ();", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\tTableEditor editor = new TableEditor (table);", "+\t\t\t\teditor.setEditor (button, tableItem, 0);", "+\t\t\t\teditor.minimumWidth = button.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;", "+\t\t\t\tbaseString = \"Downloading to \" + target.getPath ();", "+\t\t\t\ttableItem.setText (1, baseString);", "+\t\t\t\tif (table.getItemCount () == 1) {", "+\t\t\t\t\t((GridData)table.getLayoutData ()).exclude = false;\t/* show the table */", "+\t\t\t\t\ttable.getColumn (0).setWidth (editor.minimumWidth);", "+\t\t\t\t}", "+\t\t\t\ttable.getColumn (1).pack ();", "+\t\t\t\ttable.getShell ().pack ();", "+", "+\t\t\t/* the following are not part of the nsITransfer interface but are here for the snippet's convenience */", "+\t\t\tButton button;", "+\t\t\tTableItem tableItem;", "+\t\t\tString baseString;", "+", "+\t\t\tvoid removeFromTable () {", "+\t\t\t\ttableItem.dispose ();", "+\t\t\t\tbutton.dispose ();", "+\t\t\t\tif (table.getItemCount () == 0) {", "+\t\t\t\t\t((GridData)table.getLayoutData ()).exclude = true;\t/* hide the table */", "+\t\t\t\t}", "+\t\t\t\ttable.getColumn (1).pack ();", "+\t\t\t\ttable.getShell ().pack ();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4bb9c6ed97fc22e03e6c6766ccab903", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "82f22e2e03e4d70c9aa26448e8c8735454530ca2", "commitAfterChange": "e614ab59651b8801df1cfd335df3edd886371bea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void generateClasses()", "signatureAfterChange": "  void generateClasses()", "diff": ["+\tMetaData metaData = new MetaData(mainClassName);", "+\t", "-\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\t\tNode gen = attributes.getNamedItem(\"swt_gen\");", "-\t\t\t\tif (gen != null && gen.getNodeValue().equals(\"mixed\")) {", "+\t\t\t\tif (getGen(node)) {", "+\t\t\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream();", "+\t\t\t\t\tthis.out = new PrintStream(out);", "+\t\t\t\t\tString data = metaData.getMetaData(\"swt_copyright\", null);", "+\t\t\t\t\tif (data != null && data.length() != 0) {", "+\t\t\t\t\t\tout(fixDelimiter(data));", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\t\t\tif (outputDir != null) {", "-//\t\t\t\t\t\tFileOutputStream  is = new FileOutputStream(outputDir + \"/\" + name + \".java\");", "-\t\t\t\t\t\tout = new PrintStream(new ByteArrayOutputStream());", "-\t\t\t\t\t}", "-\t\t\t\t\t\tout(\" extends NSObject {\");", "+\t\t\t\t\t\tNode superclass = attributes.getNamedItem(\"swt_superclass\");", "+\t\t\t\t\t\tout(\" extends \");", "+\t\t\t\t\t\tif (superclass != null) {", "+\t\t\t\t\t\t\tout(superclass.getNodeValue());", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tout(\"NSObject\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tout(\" {\");", "-\t\t\t\t\t\t\tString sel = method.getAttributes().getNamedItem(\"selector\").getNodeValue();", "-\t\t\t\t\t\t\tout(\"public \");", "-\t\t\t\t\t\t\tboolean isStatic = method.getAttributes().getNamedItem(\"class_method\") != null; ", "-\t\t\t\t\t\t\tif (isStatic) out(\"static \");", "-\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\tif (getType(returnNode).equals(\"void\")) returnNode = null;", "-\t\t\t\t\t\t\tif (returnNode != null) {", "-\t\t\t\t\t\t\t\tout(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\tout(\" \");", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tout(\"void \");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tString methodName = sel;", "-\t\t\t\t\t\t\tif (isUnique(method, methods)) {", "-\t\t\t\t\t\t\t\tint index = methodName.indexOf(\":\");", "-\t\t\t\t\t\t\t\tif (index != -1) methodName = methodName.substring(0, index);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmethodName = methodName.replaceAll(\":\", \"_\");", "-\t\t\t\t\t\t\t\tif (isStatic) methodName = \"static_\" + methodName;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tout(methodName);", "-\t\t\t\t\t\t\tout(\"(\");", "-\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\tboolean first = true;", "-\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "-\t\t\t\t\t\t\t\t\tif (!first) out(\", \");", "-\t\t\t\t\t\t\t\t\tout(getJavaType(param));", "-\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\tout(\" \");", "-\t\t\t\t\t\t\t\t\tString paramName = paramAttributes.getNamedItem(\"name\").getNodeValue();", "-\t\t\t\t\t\t\t\t\tif (paramName.equals(\"boolean\")) paramName = \"b\";", "-\t\t\t\t\t\t\t\t\tout(paramName);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tout(\") {\");", "-\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "-\t\t\t\t\t\t\t\tout(\"\\t\");", "-\t\t\t\t\t\t\t\tout(type);", "-\t\t\t\t\t\t\t\tout(\" result = new \");", "-\t\t\t\t\t\t\t\tout(type);", "-\t\t\t\t\t\t\t\tout(\"();\");", "-\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\t\tout(\"\\tOS.objc_msgSend_stret(result, \");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "-\t\t\t\t\t\t\t\tout(\"\\treturn \");", "-\t\t\t\t\t\t\t\tif (type.equals(\"float\")) out(\"(float)\");", "-\t\t\t\t\t\t\t\tout(\"OS.objc_msgSend_fpret(\");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isObject(returnNode)) {", "-\t\t\t\t\t\t\t\tout(\"\\tint result = OS.objc_msgSend(\");", "-\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (getGen(method)) {", "+\t\t\t\t\t\t\t\tNamedNodeMap mthAttributes = method.getAttributes();", "+\t\t\t\t\t\t\t\tString sel = mthAttributes.getNamedItem(\"selector\").getNodeValue();", "+\t\t\t\t\t\t\t\tout(\"public \");", "+\t\t\t\t\t\t\t\tboolean isStatic = mthAttributes.getNamedItem(\"class_method\") != null; ", "+\t\t\t\t\t\t\t\tif (isStatic) out(\"static \");", "+\t\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "+\t\t\t\t\t\t\t\tif (getType(returnNode).equals(\"void\")) returnNode = null;", "+\t\t\t\t\t\t\t\tString returnType = \"\";", "-\t\t\t\t\t\t\t\t\tout(\"\\treturn \");", "-\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "-\t\t\t\t\t\t\t\t\tif (!(type.equals(\"int\") || type.equals(\"boolean\"))) {", "-\t\t\t\t\t\t\t\t\t\tout(\"(\");", "-\t\t\t\t\t\t\t\t\t\tout(type);", "-\t\t\t\t\t\t\t\t\t\tout(\")\");", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tout(\"\\t\");", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tout(\"OS.objc_msgSend(\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\tout(\"OS.class_\");", "-\t\t\t\t\t\t\t\tout(name);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tout(\"this.id\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tout(\", OS.\");", "-\t\t\t\t\t\t\tout(getSelConst(sel));", "-\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "-\t\t\t\t\t\t\t\t\tif (!first) out(\", \");", "-\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\tString paramName = paramAttributes.getNamedItem(\"name\").getNodeValue();", "-\t\t\t\t\t\t\t\t\tif (paramName.equals(\"boolean\")) paramName = \"b\";", "-\t\t\t\t\t\t\t\t\tif (isObject(param)) {", "-\t\t\t\t\t\t\t\t\t\tout(paramName);", "-\t\t\t\t\t\t\t\t\t\tout(\" != null ? \");", "-\t\t\t\t\t\t\t\t\t\tout(paramName);", "-\t\t\t\t\t\t\t\t\t\tout(\".id : 0\");", "+\t\t\t\t\t\t\t\t\tNode replace = returnNode.getAttributes().getNamedItem(\"swt_replace_return\");", "+\t\t\t\t\t\t\t\t\tif (replace != null) {", "+\t\t\t\t\t\t\t\t\t\tout(returnType = replace.getNodeValue());", "+\t\t\t\t\t\t\t\t\t\tout(returnType = getJavaType(returnNode));", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tout(\" \");", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tout(\"void \");", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tString methodName = sel;", "+\t\t\t\t\t\t\t\tif (isUnique(method, methods)) {", "+\t\t\t\t\t\t\t\t\tint index = methodName.indexOf(\":\");", "+\t\t\t\t\t\t\t\t\tif (index != -1) methodName = methodName.substring(0, index);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tmethodName = methodName.replaceAll(\":\", \"_\");", "+\t\t\t\t\t\t\t\t\tif (isStatic) methodName = \"static_\" + methodName;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tout(methodName);", "+\t\t\t\t\t\t\t\tout(\"(\");", "+\t\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "+\t\t\t\t\t\t\t\tboolean first = true;", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "+\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "+\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "+\t\t\t\t\t\t\t\t\t\tif (!first) out(\", \");", "+\t\t\t\t\t\t\t\t\t\tout(getJavaType(param));", "+\t\t\t\t\t\t\t\t\t\tfirst = false;", "+\t\t\t\t\t\t\t\t\t\tout(\" \");", "+\t\t\t\t\t\t\t\t\t\tString paramName = paramAttributes.getNamedItem(\"name\").getNodeValue();", "+\t\t\t\t\t\t\t\t\t\tif (paramName.length() == 0) paramName = \"arg\" + paramAttributes.getNamedItem(\"index\").getNodeValue();", "+\t\t\t\t\t\t\t\t\t\tif (paramName.equals(\"boolean\")) paramName = \"b\";", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tout(\")\");", "-\t\t\t\t\t\t\tif (returnNode != null && isBoolean(returnNode)) {", "-\t\t\t\t\t\t\t\tout(\" != 0\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tout(\";\");", "-\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\tif (returnNode != null && isObject(returnNode)) {", "-\t\t\t\t\t\t\t\tif (!isStatic && getJavaType(returnNode).equals(name)) {", "-\t\t\t\t\t\t\t\t\tout(\"\\treturn result == this.id ? this : (result != 0 ? new \");", "-\t\t\t\t\t\t\t\t\tout(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\t\tout(\"(result) : null);\");", "+\t\t\t\t\t\t\t\tout(\") {\");", "+\t\t\t\t\t\t\t\toutln();", "+\t\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "+\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "+\t\t\t\t\t\t\t\t\tout(\"\\t\");", "+\t\t\t\t\t\t\t\t\tout(type);", "+\t\t\t\t\t\t\t\t\tout(\" result = new \");", "+\t\t\t\t\t\t\t\t\tout(type);", "+\t\t\t\t\t\t\t\t\tout(\"();\");", "+\t\t\t\t\t\t\t\t\toutln();", "+\t\t\t\t\t\t\t\t\tout(\"\\tOS.objc_msgSend_stret(result, \");", "+\t\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "+\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "+\t\t\t\t\t\t\t\t\tout(\"\\treturn \");", "+\t\t\t\t\t\t\t\t\tif (type.equals(\"float\")) out(\"(float)\");", "+\t\t\t\t\t\t\t\t\tout(\"OS.objc_msgSend_fpret(\");", "+\t\t\t\t\t\t\t\t} else if (returnNode != null && isObject(returnNode)) {", "+\t\t\t\t\t\t\t\t\tout(\"\\tint result = OS.objc_msgSend(\");", "-\t\t\t\t\t\t\t\t\tout(\"\\treturn result != 0 ? new \");", "-\t\t\t\t\t\t\t\t\tout(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\t\tout(\"(result) : null;\");", "+\t\t\t\t\t\t\t\t\tif (returnNode != null) {", "+\t\t\t\t\t\t\t\t\t\tout(\"\\treturn \");", "+\t\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "+\t\t\t\t\t\t\t\t\t\tif (!(type.equals(\"int\") || type.equals(\"boolean\"))) {", "+\t\t\t\t\t\t\t\t\t\t\tout(\"(\");", "+\t\t\t\t\t\t\t\t\t\t\tout(type);", "+\t\t\t\t\t\t\t\t\t\t\tout(\")\");", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tout(\"\\t\");", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tout(\"OS.objc_msgSend(\");", "+\t\t\t\t\t\t\t\tif (isStatic) {", "+\t\t\t\t\t\t\t\t\tout(\"OS.class_\");", "+\t\t\t\t\t\t\t\t\tout(name);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tout(\"this.id\");", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tout(\", OS.\");", "+\t\t\t\t\t\t\t\tout(getSelConst(sel));", "+\t\t\t\t\t\t\t\tfirst = false;", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "+\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "+\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "+\t\t\t\t\t\t\t\t\t\tif (!first) out(\", \");", "+\t\t\t\t\t\t\t\t\t\tfirst = false;", "+\t\t\t\t\t\t\t\t\t\tString paramName = paramAttributes.getNamedItem(\"name\").getNodeValue();", "+\t\t\t\t\t\t\t\t\t\tif (paramName.length() == 0) paramName = \"arg\" + paramAttributes.getNamedItem(\"index\").getNodeValue();", "+\t\t\t\t\t\t\t\t\t\tif (paramName.equals(\"boolean\")) paramName = \"b\";", "+\t\t\t\t\t\t\t\t\t\tif (isObject(param)) {", "+\t\t\t\t\t\t\t\t\t\t\tout(paramName);", "+\t\t\t\t\t\t\t\t\t\t\tout(\" != null ? \");", "+\t\t\t\t\t\t\t\t\t\t\tout(paramName);", "+\t\t\t\t\t\t\t\t\t\t\tout(\".id : 0\");", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tout(paramName);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tout(\")\");", "+\t\t\t\t\t\t\t\tif (returnNode != null && isBoolean(returnNode)) {", "+\t\t\t\t\t\t\t\t\tout(\" != 0\");", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tout(\";\");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\tout(\"\\treturn result;\");", "+\t\t\t\t\t\t\t\tif (returnNode != null && isObject(returnNode)) {", "+\t\t\t\t\t\t\t\t\tif (!isStatic && returnType.equals(name)) {", "+\t\t\t\t\t\t\t\t\t\tout(\"\\treturn result == this.id ? this : (result != 0 ? new \");", "+\t\t\t\t\t\t\t\t\t\tout(returnType);", "+\t\t\t\t\t\t\t\t\t\tout(\"(result) : null);\");", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tout(\"\\treturn result != 0 ? new \");", "+\t\t\t\t\t\t\t\t\t\tout(returnType);", "+\t\t\t\t\t\t\t\t\t\tout(\"(result) : null;\");", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\toutln();", "+\t\t\t\t\t\t\t\t} else if (returnNode != null && isStruct(returnNode)) {", "+\t\t\t\t\t\t\t\t\tout(\"\\treturn result;\");", "+\t\t\t\t\t\t\t\t\toutln();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tout(\"}\");", "+\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\tout(\"}\");", "-\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\toutln();", "-\t\t\t\t\tif (outputDir != null) {", "-\t\t\t\t\t\tout.close();", "-\t\t\t\t\t\tout = null;", "+\t\t\t\t\t", "+\t\t\t\t\tString fileName = outputDir + mainClassName.substring(0, mainClassName.lastIndexOf('.') + 1).replace('.', '/') + name + \".java\";", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tout.flush();", "+\t\t\t\t\t\tif (out.size() > 0) output(out.toByteArray(), fileName);", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\tSystem.out.println(\"Problem\");", "+\t\t\t\t\t\te.printStackTrace(System.out);", "+\t\t\t\t\tout = null;"]}], "num": 40730}
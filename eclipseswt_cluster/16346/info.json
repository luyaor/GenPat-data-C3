{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2daa7246f33bcdef20d1ce97072f2524", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34d37624efac6d30fd9ca65ab285686e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "3d1071088ced6ed6e9f01c8d7208fa00cb52a57a", "commitAfterChange": "a9f618df2b93f8cb19629621c0313294fe974299", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r \r public void setText (String string)", "signatureAfterChange": "\r \r public void setText (String string)", "diff": ["-\tboolean fixPPCMenuBar = false;\r", "-\tif (OS.IsPPC) {\r", "-\t\tDecorations shell = parent.parent;\r", "-\t\tif (parent == shell.menuBar) {\r", "-\t\t\tfixPPCMenuBar = true;\r", "-\t\t\t/*\r", "-\t\t\t* Bug in WinCE PPC.  Tool items on the menubar don't resize\r", "-\t\t\t* correctly when the character '&' is used (even when it\r", "-\t\t\t* is a sequence '&&').  The fix is to remove all '&' from\r", "-\t\t\t* the string. \r", "-\t\t\t*/\r", "-\t\t\tif (string.indexOf ('&') != -1) {\r", "-\t\t\t\tint length = string.length ();\r", "-\t\t\t\tchar[] text = new char [length];\r", "-\t\t\t\tstring.getChars( 0, length, text, 0);\r", "-\t\t\t\tint i = 0, j = 0;\r", "-\t\t\t\tfor (i=0; i<length; i++) {\r", "-\t\t\t\t\tif (text[i] != '&') text [j++] = text [i];\r", "-\t\t\t\t}\r", "-\t\t\t\tif (j < i) string = new String (text, 0, j);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tint hMenu = parent.handle;\r", "-\tOS.MoveMemory (pszText, buffer, byteCount);\r", "-\tMENUITEMINFO info = new MENUITEMINFO ();\r", "-\tinfo.cbSize = MENUITEMINFO.sizeof;\r", "-\tinfo.fMask = OS.MIIM_TYPE;\r", "-\tinfo.fType = widgetStyle ();\r", "-\tinfo.dwTypeData = pszText;\r", "-\tboolean success = OS.SetMenuItemInfo (hMenu, id, false, info);\r", "-\t/*\r", "-\t* Bug in Windows 2000.  For some reason, when MIIM_TYPE is set\r", "-\t* on a menu item that also has MIIM_BITMAP, the MIIM_TYPE clears\r", "-\t* the MIIM_BITMAP style.  The fix is to reset both MIIM_BITMAP.\r", "-\t* Note, this does not happen on Windows 98.\r", "-\t*/\r", "-\tif (!OS.IsWinCE) {\r", "-\t\tif ((OS.WIN32_MAJOR << 16 | OS.WIN32_MINOR) >= (4 << 16 | 10)) {\r", "-\t\t\tif (image != null) {\r", "-\t\t\t\tinfo.fMask = OS.MIIM_BITMAP;\r", "-\t\t\t\tinfo.hbmpItem = OS.HBMMENU_CALLBACK;\r", "-\t\t\t\tsuccess = OS.SetMenuItemInfo (hMenu, id, false, info);\r", "+\tOS.MoveMemory (pszText, buffer, byteCount);\t\r", "+\tboolean success = false;\r", "+\tif (OS.IsPPC && parent.hwndCB != 0) {\r", "+\t\t/*\r", "+\t\t* Bug in WinCE PPC.  Tool items on the menubar don't resize\r", "+\t\t* correctly when the character '&' is used (even when it\r", "+\t\t* is a sequence '&&').  The fix is to remove all '&' from\r", "+\t\t* the string. \r", "+\t\t*/\r", "+\t\tif (string.indexOf ('&') != -1) {\r", "+\t\t\tint length = string.length ();\r", "+\t\t\tchar[] text = new char [length];\r", "+\t\t\tstring.getChars( 0, length, text, 0);\r", "+\t\t\tint i = 0, j = 0;\r", "+\t\t\tfor (i=0; i<length; i++) {\r", "+\t\t\t\tif (text[i] != '&') text [j++] = text [i];\r", "+\t\t\tif (j < i) string = new String (text, 0, j);\r", "-\t}\r", "-\tif (fixPPCMenuBar) {\r", "-\t\tDecorations shell = parent.parent;\r", "+\t\tint hwndCB = parent.hwndCB;\r", "-\t\tOS.SendMessage (shell.hwndTB, OS.TB_SETBUTTONINFO, id, info2);\r", "+\t\tsuccess = OS.SendMessage (hwndCB, OS.TB_SETBUTTONINFO, id, info2) != 0;\r", "+\t} else {\r", "+\t\tint hMenu = parent.handle;\r", "+\t\tMENUITEMINFO info = new MENUITEMINFO ();\r", "+\t\tinfo.cbSize = MENUITEMINFO.sizeof;\r", "+\t\tinfo.fMask = OS.MIIM_TYPE;\r", "+\t\tinfo.fType = widgetStyle ();\r", "+\t\tinfo.dwTypeData = pszText;\r", "+\t\tsuccess = OS.SetMenuItemInfo (hMenu, id, false, info);\r", "+\t\t/*\r", "+\t\t* Bug in Windows 2000.  For some reason, when MIIM_TYPE is set\r", "+\t\t* on a menu item that also has MIIM_BITMAP, the MIIM_TYPE clears\r", "+\t\t* the MIIM_BITMAP style.  The fix is to reset both MIIM_BITMAP.\r", "+\t\t* Note, this does not happen on Windows 98.\r", "+\t\t*/\r", "+\t\tif (!OS.IsWinCE) {\r", "+\t\t\tif ((OS.WIN32_MAJOR << 16 | OS.WIN32_MINOR) >= (4 << 16 | 10)) {\r", "+\t\t\t\tif (image != null) {\r", "+\t\t\t\t\tinfo.fMask = OS.MIIM_BITMAP;\r", "+\t\t\t\t\tinfo.hbmpItem = OS.HBMMENU_CALLBACK;\r", "+\t\t\t\t\tsuccess = OS.SetMenuItemInfo (hMenu, id, false, info);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17c43c8d6cc800c3bd0b6c9faa92ea39", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "3d1071088ced6ed6e9f01c8d7208fa00cb52a57a", "commitAfterChange": "a9f618df2b93f8cb19629621c0313294fe974299", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r void createItem (MenuItem item, int index)", "signatureAfterChange": "\r \r void createItem (MenuItem item, int index)", "diff": ["-\tif (OS.IsWinCE) {\r", "-\t\tint uFlags = OS.MF_BYPOSITION;\r", "-\t\tTCHAR lpNewItem = null;\r", "-\t\tif ((item.style & SWT.SEPARATOR) != 0) {\r", "-\t\t\tuFlags |= OS.MF_SEPARATOR;\r", "+\tif (OS.IsPPC && hwndCB != 0) {\r", "+\t\tTBBUTTON lpButton = new TBBUTTON ();\r", "+\t\tlpButton.idCommand = item.id;\r", "+\t\tlpButton.fsStyle = (byte) (OS.TBSTYLE_DROPDOWN | OS.TBSTYLE_AUTOSIZE | 0x80);\r", "+\t\tlpButton.fsState = (byte) OS.TBSTATE_ENABLED;\r", "+\t\tlpButton.iBitmap = OS.I_IMAGENONE;\r", "+\t\tif ((item.style & SWT.SEPARATOR) != 0) lpButton.fsStyle = (byte) OS.BTNS_SEP;\r", "+\t\tsuccess = OS.SendMessage (hwndCB, OS.TB_INSERTBUTTON, index, lpButton) != 0;\r", "+\t} else {\r", "+\t\tif (OS.IsWinCE) {\r", "+\t\t\tint uFlags = OS.MF_BYPOSITION;\r", "+\t\t\tTCHAR lpNewItem = null;\r", "+\t\t\tif ((item.style & SWT.SEPARATOR) != 0) {\r", "+\t\t\t\tuFlags |= OS.MF_SEPARATOR;\r", "+\t\t\t} else {\r", "+\t\t\t\tlpNewItem = new TCHAR (0, \"\", true);\r", "+\t\t\t}\r", "+\t\t\tsuccess = OS.InsertMenu (handle, index, uFlags, item.id, lpNewItem);\r", "+\t\t\tif (success) {\r", "+\t\t\t\tMENUITEMINFO info = new MENUITEMINFO ();\r", "+\t\t\t\tinfo.cbSize = MENUITEMINFO.sizeof;\r", "+\t\t\t\tinfo.fMask = OS.MIIM_DATA;\r", "+\t\t\t\tinfo.dwItemData = item.id;\r", "+\t\t\t\tsuccess = OS.SetMenuItemInfo (handle, index, true, info);\r", "+\t\t\t}\r", "-\t\t\tlpNewItem = new TCHAR (0, \"\", true);\r", "-\t\t}\r", "-\t\tsuccess = OS.InsertMenu (handle, index, uFlags, item.id, lpNewItem);\r", "-\t\tif (success) {\r", "+\t\t\t/*\r", "+\t\t\t* Bug in Windows.  For some reason, when InsertMenuItem ()\r", "+\t\t\t* is used to insert an item without text, it is not possible\r", "+\t\t\t* to use SetMenuItemInfo () to set the text at a later time.\r", "+\t\t\t* The fix is to insert the item with an empty string.\r", "+\t\t\t*/\r", "+\t\t\tint hHeap = OS.GetProcessHeap ();\r", "+\t\t\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, TCHAR.sizeof);\r", "-\t\t\tinfo.fMask = OS.MIIM_DATA;\r", "-\t\t\tinfo.dwItemData = item.id;\r", "-\t\t\tsuccess = OS.SetMenuItemInfo (handle, index, true, info);\r", "-\t\t\t\r", "-\t\t\tif (OS.IsPPC) {\r", "-\t\t\t\t/* if it is a top level menu item, display it on the toolbar */\r", "-\t\t\t\tif (item.parent == parent.menuBar) {\r", "-\t\t\t\t\tTBBUTTON lpButton = new TBBUTTON ();\r", "-\t\t\t\t\tlpButton.idCommand = item.id;\r", "-\t\t\t\t\tlpButton.fsStyle = (byte) (OS.TBSTYLE_DROPDOWN | OS.TBSTYLE_AUTOSIZE | 0x80);\r", "-\t\t\t\t\tlpButton.fsState = (byte) OS.TBSTATE_ENABLED;\r", "-\t\t\t\t\tlpButton.iBitmap = OS.I_IMAGENONE;\r", "-\t\t\t\t\tif ((item.style & SWT.SEPARATOR) != 0) {\r", "-\t\t\t\t\t\tlpButton.fsStyle = (byte) OS.BTNS_SEP;\r", "-\t\t\t\t\t} \r", "-\t\t\t\t\tsuccess = OS.SendMessage (parent.hwndTB, OS.TB_INSERTBUTTON, index, lpButton) != 0;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t\tinfo.fMask = OS.MIIM_ID | OS.MIIM_TYPE | OS.MIIM_DATA;\r", "+\t\t\tinfo.wID = info.dwItemData = item.id;\r", "+\t\t\tinfo.fType = item.widgetStyle ();\r", "+\t\t\tinfo.dwTypeData = pszText;\r", "+\t\t\tsuccess = OS.InsertMenuItem (handle, index, true, info);\r", "+\t\t\tif (pszText != 0) OS.HeapFree (hHeap, 0, pszText);\r", "-\t} else {\r", "-\t\t/*\r", "-\t\t* Bug in Windows.  For some reason, when InsertMenuItem ()\r", "-\t\t* is used to insert an item without text, it is not possible\r", "-\t\t* to use SetMenuItemInfo () to set the text at a later time.\r", "-\t\t* The fix is to insert the item with an empty string.\r", "-\t\t*/\r", "-\t\tint hHeap = OS.GetProcessHeap ();\r", "-\t\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, TCHAR.sizeof);\r", "-\t\tMENUITEMINFO info = new MENUITEMINFO ();\r", "-\t\tinfo.cbSize = MENUITEMINFO.sizeof;\r", "-\t\tinfo.fMask = OS.MIIM_ID | OS.MIIM_TYPE | OS.MIIM_DATA;\r", "-\t\tinfo.wID = info.dwItemData = item.id;\r", "-\t\tinfo.fType = item.widgetStyle ();\r", "-\t\tinfo.dwTypeData = pszText;\r", "-\t\tsuccess = OS.InsertMenuItem (handle, index, true, info);\r", "-\t\tif (pszText != 0) OS.HeapFree (hHeap, 0, pszText);\r"]}], "num": 16346}
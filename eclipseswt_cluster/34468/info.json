{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c1c38b8f99f3db41c14121711bbb0bf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e3cc36b13a7f0ac362118aa68790a28", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TableDropTargetEffect.java", "commitBeforeChange": "494a07a91e999bc680c78e11c98014ab6f49ad58", "commitAfterChange": "b72a54c239832030fdc651f7ab7e2873109921f3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void dragOver(DropTargetEvent event)", "signatureAfterChange": " \tpublic void dragOver(DropTargetEvent event)", "diff": ["+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(5, 1)) {", "+\t\t\tif (pinfo.iItem != -1 && (effect & (DND.FEEDBACK_INSERT_BEFORE | DND.FEEDBACK_INSERT_AFTER)) != 0) {", "+\t\t\t\t\tLVINSERTMARK plvim = new LVINSERTMARK ();", "+\t\t\t\t\tplvim.cbSize = LVINSERTMARK.sizeof;", "+\t\t\t\t\tplvim.dwFlags = (effect & DND.FEEDBACK_INSERT_AFTER) != 0 ? OS.LVIM_AFTER : 0;", "+\t\t\t\t\tplvim.iItem = pinfo.iItem;", "+\t\t\t\t\tif (OS.SendMessage(handle, OS.LVM_SETINSERTMARK, 0, plvim) != 0) {", "+\t\t\t\t\t\tiItemInsert = pinfo.iItem;", "+\t\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (iItemInsert != -1) {", "+\t\t\t\t\tLVINSERTMARK plvim = new LVINSERTMARK ();", "+\t\t\t\t\tplvim.cbSize = LVINSERTMARK.sizeof;", "+\t\t\t\t\tplvim.iItem = -1;", "+\t\t\t\t\tOS.SendMessage(handle, OS.LVM_SETINSERTMARK, 0, plvim);", "+\t\t\t\t\tiItemInsert = -1;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d21c17a024d66436ef2db09130c251cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "8549b1db39ac8fd4bb7564c61e5b9a04b5efde6f", "commitAfterChange": "2b3120470b46968368044df3f94129d586bc41d5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": " public String getText (int index)", "signatureAfterChange": " public String getText (int index)", "diff": ["-\tint itemIndex = parent.indexOf (this);", "-\tif (itemIndex == -1) error (SWT.ERROR_CANNOT_GET_TEXT);", "-\tint cchTextMax = 1024;", "-\tint hwnd = parent.handle;", "-\tint hHeap = OS.GetProcessHeap ();", "-\tint byteCount = cchTextMax * TCHAR.sizeof;", "-\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "-\tLVITEM lvItem = new LVITEM ();", "-\tlvItem.mask = OS.LVIF_TEXT;", "-\tlvItem.iItem = itemIndex;", "-\tlvItem.iSubItem = index;", "-\tlvItem.pszText = pszText;", "-\tlvItem.cchTextMax = cchTextMax;", "-\tint result = OS.SendMessage (hwnd, OS.LVM_GETITEM, 0, lvItem);", "-\tTCHAR buffer = new TCHAR (parent.getCodePage (), cchTextMax);", "-\tOS.MoveMemory (buffer, pszText, byteCount);", "-\tOS.HeapFree (hHeap, 0, pszText);", "-\tif (result == 0) error (SWT.ERROR_CANNOT_GET_TEXT);", "-\treturn buffer.toString (0, buffer.strlen ());", "+\tif (strings != null) {", "+\t\tif (0 <= index && index < strings.length) {", "+\t\t\tString string = strings [index];", "+\t\t\treturn string != null ? string : \"\";", "+\t\t}", "+\t}", "+\treturn \"\";"]}], "num": 34468}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59690eb50533f90bab6d06a94bbe3554", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "351a864a1bba69b367912a47dc4bc4ed", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "83c9333013999c765b46d110d792c9a6b6c0769c", "commitAfterChange": "165b64e31dc8827b5323174f4937541565300207", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void resizeRectangles (int xChange, int yChange)", "signatureAfterChange": "  void resizeRectangles (int xChange, int yChange)", "diff": ["-\tRectangle bounds = computeBounds ();", "-\t// if the bounds will flip about the x or y axis then apply the adjustment", "-\t// up to the axis (ie.- where bounds width/height becomes 0) and change the", "-\t// cursor's orientation accordingly", "+\t/*", "+\t * If the bounds will flip about the x or y axis then apply the adjustment", "+\t * up to the axis (ie.- where bounds width/height becomes 0), change the", "+\t * cursor's orientation accordingly, and flip each Rectangle's origin (only", "+\t * necessary for > 1 Rectangles) ", "+\t */", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.x = 100 - proportion.x - proportion.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.x = 100 - proportion.x - proportion.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.y = 100 - proportion.y - proportion.height;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.y = 100 - proportion.y - proportion.height;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6cf63f83c3074cb30dff5bd8fe7f9a3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/FormLayout.java", "commitBeforeChange": "7d09c530224c03e34e03b50eef5df0380de95e0a", "commitAfterChange": "65919b6cd706bbbd92f968a23144cff20fe8001b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "signatureAfterChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "diff": ["-\t\tif (flushCache) data.cacheWidth = data.cacheHeight = -1;", "+\t\tif (flushCache) data.flushCache ();", "+\tint w = 0, h = 0;", "-\t\tif (move) {", "+\t\tif (width != SWT.DEFAULT) {", "-\t\t\t//TEMPORARY CODE", "-\t\t\tif (data.width == SWT.DEFAULT && data.height == SWT.DEFAULT) {", "-\t\t\t\tif (!data.needed && (child.getStyle () & SWT.WRAP) != 0) {", "-\t\t\t\t\tint trim = 0;", "-\t\t\t\t\tif (child instanceof Scrollable) {", "-\t\t\t\t\t\tRectangle rect = ((Scrollable) child).computeTrim (0, 0, 0, 0);", "-\t\t\t\t\t\ttrim = rect.width;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\ttrim = child.getBorderWidth () * 2;", "-\t\t\t\t\t}", "-\t\t\t\t\tint currentWidth = Math.max (0, x2 - x1 - trim);", "-\t\t\t\t\tdata.computeSize (child, currentWidth, data.height, flushCache);", "-\t\t\t\t\tif (flush == null) flush = new boolean [children.length];", "-\t\t\t\t\tflush [i] = true;", "+\t\t\tif (data.height == SWT.DEFAULT && !data.needed) {", "+\t\t\t\t//TEMPORARY CODE", "+\t\t\t\tint trim = 0;", "+\t\t\t\tif (child instanceof Group) {", "+\t\t\t\t\tGroup g = (Group)child;", "+\t\t\t\t\ttrim = g.getSize ().x - g.getClientArea ().width;", "+\t\t\t\t} else if (child instanceof Scrollable) {", "+\t\t\t\t\tRectangle rect = ((Scrollable) child).computeTrim (0, 0, 0, 0);", "+\t\t\t\t\ttrim = rect.width;", "+\t\t\t\t} else {", "+\t\t\t\t\ttrim = child.getBorderWidth () * 2;", "+\t\t\t\tdata.cacheWidth = data.cacheHeight = -1;", "+\t\t\t\tint currentWidth = Math.max (0, x2 - x1 - trim);", "+\t\t\t\tdata.computeSize (child, currentWidth, data.height, flushCache);", "+\t\t\t\tif (flush == null) flush = new boolean [children.length];", "+\t\t\t\tflush [i] = true;", "+\t\t\tw = Math.max (x2, w);", "+\t\t\tif (move) {", "+\t\t\t\tif (bounds == null) bounds = new Rectangle [children.length];", "+\t\t\t\tbounds [i] = new Rectangle (0, 0, 0, 0);", "+\t\t\t\tbounds [i].x = x + x1;", "+\t\t\t\tbounds [i].width = x2 - x1;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tw = Math.max (computeWidth (child, data, flushCache), w);", "+\t\t}", "+\t}", "+\tfor (int i=0; i<children.length; i++) {", "+\t\tControl child = children [i];", "+\t\tFormData data = (FormData) child.getLayoutData ();", "+\t\tif (height != SWT.DEFAULT) {", "-\t\t\tif (bounds == null) bounds = new Rectangle [children.length];", "-\t\t\tbounds [i] = new Rectangle (x + x1, y + y1, x2 - x1, y2 - y1);", "+\t\t\th = Math.max (y2, h);", "+\t\t\tif (move) {", "+\t\t\t\tbounds [i].y = y + y1;", "+\t\t\t\tbounds [i].height = y2 - y1;", "+\t\t\t}", "-\t\t\twidth = Math.max (computeWidth (child, data, flushCache), width);", "-\t\t\theight = Math.max (computeHeight (child, data, flushCache), height);", "+\t\t\th = Math.max (computeHeight (child, data, flushCache), h);", "-\treturn move ? null : new Point (width, height);", "+\tw += marginWidth * 2;", "+\th += marginHeight * 2;", "+\treturn new Point (w, h);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "811c3875af760bbc91093bfafc38a43b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "b0eb91ee89e7cdcbc91f60875cf09c8b2363cf2c", "commitAfterChange": "83c9333013999c765b46d110d792c9a6b6c0769c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void resizeRectangles (int xChange, int yChange)", "signatureAfterChange": "  void resizeRectangles (int xChange, int yChange)", "diff": ["-\tRectangle bounds = computeBounds ();", "-\t// if the bounds will flip about the x or y axis then apply the adjustment", "-\t// up to the axis (ie.- where bounds width/height becomes 0) and change the", "-\t// cursor's orientation accordingly", "+\t/*", "+\t * If the bounds will flip about the x or y axis then apply the adjustment", "+\t * up to the axis (ie.- where bounds width/height becomes 0), change the", "+\t * cursor's orientation accordingly, and flip each Rectangle's origin (only", "+\t * necessary for > 1 Rectangles) ", "+\t */", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.x = 100 - proportion.x - proportion.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.x = 100 - proportion.x - proportion.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.y = 100 - proportion.y - proportion.height;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.y = 100 - proportion.y - proportion.height;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "553090dbaaaaa539f0ff81ff34ad9f3f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "afb6f96cf55243a3c05c59956157c28363b7f640", "commitAfterChange": "b0eb91ee89e7cdcbc91f60875cf09c8b2363cf2c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void resizeRectangles (int xChange, int yChange)", "signatureAfterChange": "  void resizeRectangles (int xChange, int yChange)", "diff": ["-\tRectangle bounds = computeBounds ();", "-\t// if the bounds will flip about the x or y axis then apply the adjustment", "-\t// up to the axis (ie.- where bounds width/height becomes 0) and change the", "-\t// cursor's orientation accordingly", "+\t/*", "+\t * If the bounds will flip about the x or y axis then apply the adjustment", "+\t * up to the axis (ie.- where bounds width/height becomes 0), change the", "+\t * cursor's orientation accordingly, and flip each Rectangle's origin (only", "+\t * necessary for > 1 Rectangles) ", "+\t */", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.x = 100 - proportion.x - proportion.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.x = 100 - proportion.x - proportion.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.y = 100 - proportion.y - proportion.height;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.y = 100 - proportion.y - proportion.height;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1125506fac7a8b616174f22918540bfd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "5d1cc2c24ec360cb59b84e6f51e06eba85a2ee01", "commitAfterChange": "797743ec0cdd9c4b2a2893f449c595005ad4adfc", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " void resizeRectangles (int xChange, int yChange)", "signatureAfterChange": " void resizeRectangles (int xChange, int yChange)", "diff": ["-\tRectangle bounds = computeBounds ();", "-\t// if the bounds will flip about the x or y axis then apply the adjustment", "-\t// up to the axis (ie.- where bounds width/height becomes 0) and change the", "-\t// cursor's orientation accordingly", "+\t/*", "+\t * If the bounds will flip about the x or y axis then apply the adjustment", "+\t * up to the axis (ie.- where bounds width/height becomes 0), change the", "+\t * cursor's orientation accordingly, and flip each Rectangle's origin (only", "+\t * necessary for > 1 Rectangles) ", "+\t */", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.x = 100 - proportion.x - proportion.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.x = 100 - proportion.x - proportion.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.y = 100 - proportion.y - proportion.height;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.y = 100 - proportion.y - proportion.height;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cd39409bd2f698551b15daa9e648253", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridLayout.java", "commitBeforeChange": "6372b7abbb62acc3c7145a316e3c15a3fc20c32d", "commitAfterChange": "43c4d07c0ca09f12cdf6b237da1b035e11a1ee74", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "signatureAfterChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "diff": ["-\t\tPoint size = computeSize (child, flushCache);", "-\t\tdata.cacheWidth = size.x;", "-\t\tdata.cacheHeight = size.y;", "+\t\tif (flushCache) data.flushCache ();", "+\t\tdata.computeSize (child, flushCache);", "-\t\tcolumnWidth = move ? Math.max (minColumnWidth, availableWidth / columnCount) : columnWidth;", "+\t\tcolumnWidth = width == SWT.DEFAULT || expandCount == 0 ? columnWidth : Math.max (minColumnWidth, availableWidth / columnCount);", "-\t\t\texpandColumn [i] = true;", "+\t\t\texpandColumn [i] = expandCount > 0;", "-\t\tif (move && expandCount > 0) {", "+\t\tif (width != SWT.DEFAULT && expandCount > 0) {", "-\tif (move) {", "+\tGridData [] flush = null;", "+\tint flushLength = 0;", "+\tif (width != SWT.DEFAULT) {", "-\t\t\t\t\t\tif ((child.getStyle () & SWT.WRAP) != 0) {", "-\t\t\t\t\t\t\tint hSpan = Math.max (1, Math.min (data.horizontalSpan, columnCount));", "-\t\t\t\t\t\t\tint currentWidth = 0;", "-\t\t\t\t\t\t\tfor (int k=0; k<hSpan; k++) {", "-\t\t\t\t\t\t\t\tcurrentWidth += widths [j-k];", "+\t\t\t\t\t\tint hSpan = Math.max (1, Math.min (data.horizontalSpan, columnCount));", "+\t\t\t\t\t\tint currentWidth = 0;", "+\t\t\t\t\t\tfor (int k=0; k<hSpan; k++) {", "+\t\t\t\t\t\t\tcurrentWidth += widths [j-k];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcurrentWidth += (hSpan - 1) * horizontalSpacing - data.horizontalIndent;", "+\t\t\t\t\t\tif ((currentWidth != data.cacheWidth && data.horizontalAlignment == SWT.FILL) ||", "+\t\t\t\t\t\t\t(data.cacheWidth > currentWidth)) { ", "+\t\t\t\t\t\t\tint trim = 0;", "+\t\t\t\t\t\t\tif (child instanceof Group) {", "+\t\t\t\t\t\t\t\tGroup g = (Group)child;", "+\t\t\t\t\t\t\t\ttrim = g.getSize ().x - g.getClientArea ().width;", "+\t\t\t\t\t\t\t} else if (child instanceof Scrollable) {", "+\t\t\t\t\t\t\t\tRectangle rect = ((Scrollable) child).computeTrim (0, 0, 0, 0);", "+\t\t\t\t\t\t\t\ttrim = rect.width;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\ttrim = child.getBorderWidth () * 2;", "-\t\t\t\t\t\t\tcurrentWidth += (hSpan - 1) * horizontalSpacing - data.horizontalIndent;", "-\t\t\t\t\t\t\tif ((currentWidth != data.cacheWidth && data.horizontalAlignment == SWT.FILL) ||", "-\t\t\t\t\t\t\t\t(data.cacheWidth > currentWidth)) { ", "-\t\t\t\t\t\t\t\tint trim = 0;", "-\t\t\t\t\t\t\t\tif (child instanceof Scrollable) {", "-\t\t\t\t\t\t\t\t\tRectangle rect = ((Scrollable) child).computeTrim (0, 0, 0, 0);", "-\t\t\t\t\t\t\t\t\ttrim = rect.width;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\ttrim = child.getBorderWidth () * 2;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcurrentWidth = Math.max (0, currentWidth - trim);", "-\t\t\t\t\t\t\t\tPoint size = child.computeSize (currentWidth, data.heightHint, flushCache);", "-\t\t\t\t\t\t\t\tdata.cacheWidth = size.x;", "-\t\t\t\t\t\t\t\tdata.cacheHeight = size.y;", "-\t\t\t\t\t\t\t\tdata.flushCache = true;", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tint oldWidthHint = data.widthHint;", "+\t\t\t\t\t\t\tdata.widthHint = Math.max (0, currentWidth - trim);", "+\t\t\t\t\t\t\tdata.cacheWidth = data.cacheHeight = SWT.DEFAULT;", "+\t\t\t\t\t\t\tdata.computeSize(child, false);", "+\t\t\t\t\t\t\tdata.widthHint = oldWidthHint;", "+\t\t\t\t\t\t\tif (flush == null) flush = new GridData [children.length];", "+\t\t\t\t\t\t\tflush [flushLength++] = data;", "-\tif (move && expandCount > 0) {", "+\tif (height != SWT.DEFAULT && expandCount > 0) {", "+\t// clean up cache", "+\tfor (int i = 0; i < flushLength; i++) {", "+\t\tflush [i].cacheWidth = flush [i].cacheHeight = -1;", "+\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcc50cbd9f78e28af83a3043ee14e7d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "e966cec370b2b449a00301b348ead9bf8350bd3d", "commitAfterChange": "afb6f96cf55243a3c05c59956157c28363b7f640", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void resizeRectangles (int xChange, int yChange)", "signatureAfterChange": "  void resizeRectangles (int xChange, int yChange)", "diff": ["-\tRectangle bounds = computeBounds ();", "-\t// if the bounds will flip about the x or y axis then apply the adjustment", "-\t// up to the axis (ie.- where bounds width/height becomes 0) and change the", "-\t// cursor's orientation accordingly", "+\t/*", "+\t * If the bounds will flip about the x or y axis then apply the adjustment", "+\t * up to the axis (ie.- where bounds width/height becomes 0), change the", "+\t * cursor's orientation accordingly, and flip each Rectangle's origin (only", "+\t * necessary for > 1 Rectangles) ", "+\t */", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.x = 100 - proportion.x - proportion.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.x = 100 - proportion.x - proportion.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.y = 100 - proportion.y - proportion.height;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (proportions.length > 1) {", "+\t\t\t\tfor (int i = 0; i < proportions.length; i++) {", "+\t\t\t\t\tRectangle proportion = proportions [i];", "+\t\t\t\t\tproportion.y = 100 - proportion.y - proportion.height;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 56164}
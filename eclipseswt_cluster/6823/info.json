{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "887afd495750774e1cabd046cac19a23", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68f88fbfbc5b1d1ed8b932049f5d849b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "1215228ca28cd877225ea2d6d4c5dd6eb8a8d47a", "commitAfterChange": "437b26428f10a35a326ef6b319e71308ad9cdb90", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  int drawProc (int widget, int damage)", "signatureAfterChange": "  int drawProc (int widget, int damage)", "diff": ["-\tdrawWidget (widget, damage);", "+\tif (widget <=0) return OS.Pt_CONTINUE; ", "+\tdrawWidget (widget, damage );", "-\t", "-\t/* Translate the damage to widget coordinates */", "-\tshort [] widgetX = new short [1];", "-\tshort [] widgetY = new short [1];", "-\tOS.PtGetAbsPosition (handle, widgetX, widgetY);", "-\tshort [] shellX = new short [1];", "-\tshort [] shellY = new short [1];", "-\tint shellHandle = OS.PtFindDisjoint (handle);", "-\tOS.PtGetAbsPosition (shellHandle, shellX, shellY);", "-\tPhPoint_t pt = new PhPoint_t ();", "-\tpt.x = (short) (shellX [0] - widgetX [0]);", "-\tpt.y = (short) (shellY [0] - widgetY [0]);", "-\tdamage = OS.PhCopyTiles (damage);", "-\tdamage = OS.PhTranslateTiles (damage, pt);", "-\t", "+\tPhPoint_t pt = new PhPoint_t ();  ", "+\tPhRect_t widRect = new PhRect_t();    ", "+\tOS.PtWidgetExtent(widget, widRect) ;", "+\tOS.PtWidgetOffset(widget, pt);", "+\tpt.x += widRect.ul_x;", "+\tpt.y += widRect.ul_y;", "+\tdamage = OS.PhCopyTiles( damage );", "+\tint transPoint = OS.malloc ( PhPoint_t.sizeof);", "+\tOS.memmove(transPoint, pt, PhPoint_t.sizeof);", "+\tOS.PhDeTranslateTiles(damage, transPoint);", "+\tOS.free(transPoint);", "+\tOS.memmove (tile, damage, PhTile_t.sizeof);", "-\tif (tile.next != 0 && noMerge) {", "-\t\twhile (tile.next != 0) {", "-\t\t\tOS.memmove (tile, tile.next, PhTile_t.sizeof);", "-\t\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {", "-\t\t\t\tEvent event = new Event ();", "-\t\t\t\tevent.x = tile.rect_ul_x;", "-\t\t\t\tevent.y = tile.rect_ul_y;", "-\t\t\t\tevent.width = tile.rect_lr_x - tile.rect_ul_x + 1;", "-\t\t\t\tevent.height = tile.rect_lr_y - tile.rect_ul_y + 1;", "-\t\t\t\tGCData data = new GCData();", "-\t\t\t\tif (OS.QNX_MAJOR > 6 || (OS.QNX_MAJOR == 6 && (OS.QNX_MINOR > 2 || (OS.QNX_MINOR == 2 && OS.QNX_MICRO >= 1)))) {", "-\t\t\t\t\tdata.paint = true;", "-\t\t\t\t}", "-\t\t\t\tGC gc = event.gc = GC.photon_new (this, data);", "-\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "-\t\t\t\tsendEvent (SWT.Paint, event);", "-\t\t\t\tif (isDisposed ()) break;", "-\t\t\t\tgc.dispose ();", "-\t\t\t\tevent.gc = null;", "-\t\t\t}", "-\t\t}", "-\t} else {", "-\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {", "+\tif (tile.next != 0 && noMerge) ", "+\t{", "+\t\tOS.memmove (tile, tile.next, PhTile_t.sizeof);", "+\t\twhile (tile.next != 0) ", "+\t\t{", "-\t\t\tevent.x = tile.rect_ul_x;", "-\t\t\tevent.y = tile.rect_ul_y;", "-\t\t\tRegion region = Region.photon_new (display, tile.next);", "-\t\t\tGCData data = new GCData();", "-\t\t\tif (OS.QNX_MAJOR > 6 || (OS.QNX_MAJOR == 6 && (OS.QNX_MINOR > 2 || (OS.QNX_MINOR == 2 && OS.QNX_MICRO >= 1)))) {", "-\t\t\t\tdata.paint = true;", "-\t\t\t}", "-\t\t\tGC gc = event.gc = GC.photon_new (this, data);", "-\t\t\tgc.setClipping (region);", "+\t\t\tevent.x = tile.rect_ul_x;", "+\t\t\tevent.y = tile.rect_ul_y; ", "+\t\t\tGC gc = event.gc = new GC (this);", "+\t\t\tgc.setClipping(event.x, event.y, event.width, event.height);", "+\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\tif (isDisposed ()) break;", "+\t\t\tgc.dispose ();", "+\t\t\tevent.gc = null;", "+\t\t\tif ( tile.next != 0 )", "+\t\t\t\tOS.memmove (tile, tile.next, PhTile_t.sizeof);", "+\t\t}", "+\t} ", "+\telse ", "+\t{", "+\t\tint rect1 = OS.malloc (PhRect_t.sizeof);", "+\t\tint rect2 = OS.malloc (PhRect_t.sizeof);", "+\t\tOS.memmove (rect1, tile, PhRect_t.sizeof);", "+\t\tOS.memmove (rect2, widRect, PhRect_t.sizeof);", "+\t\tint inter = OS.PhRectIntersect(rect1, rect2);", "+\t\tif ( inter == 1 )", "+\t\t{", "+\t\t\tOS.memmove(widRect, rect1, PhRect_t.sizeof);", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.x = widRect.ul_x;", "+\t\t\tevent.y = widRect.ul_y; ", "+\t\t\tevent.width = widRect.lr_x - widRect.ul_x + 1;", "+\t\t\tevent.height = widRect.lr_y - widRect.ul_y + 1;", "+            GC gc = event.gc = new GC (this);", "+            gc.setClipping(event.x, event.y, event.width, event.height );", "+\t\tOS.free(rect1);", "+\t\tOS.free(rect2);", "-\tOS.PhFreeTiles (damage);", "+\tOS.PhFreeTiles( damage );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25f8d624f3149c6be94fc87033bfd069", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "863e2ff132d5e4a7e09c9b48180d8eb9c0d92a32", "commitAfterChange": "13f9e337c61aafbe8198262cd4793c00546e9a9b", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r void sendPaintEvent (int damage)", "signatureAfterChange": "\r \r int drawProc (int widget, int damage)", "diff": ["+int drawProc (int widget, int damage) {\r", "+\tdrawWidget (widget, damage);\r", "+\tif (!hooks(SWT.Paint) && !filters (SWT.Paint)) return OS.Pt_CONTINUE;\r", "+\t\r", "+\t/* Translate the damage to widget coordinates */\r", "+\tshort [] widgetX = new short [1];\r", "+\tshort [] widgetY = new short [1];\r", "+\tOS.PtGetAbsPosition (handle, widgetX, widgetY);\r", "+\tshort [] shellX = new short [1];\r", "+\tshort [] shellY = new short [1];\r", "+\tint shellHandle = OS.PtFindDisjoint (handle);\r", "+\tOS.PtGetAbsPosition (shellHandle, shellX, shellY);\r", "+\tPhPoint_t pt = new PhPoint_t ();\r", "+\tpt.x = (short) (shellX [0] - widgetX [0]);\r", "+\tpt.y = (short) (shellY [0] - widgetY [0]);\r", "+\tdamage = OS.PhCopyTiles (damage);\r", "+\tdamage = OS.PhTranslateTiles (damage, pt);\r", "+\t\r", "+\t/* Send the paint event */\r", "+\tPhTile_t tile = new PhTile_t ();\r", "+\tOS.memmove (tile, damage, PhTile_t.sizeof);\r", "+\tboolean noMerge = (style & SWT.NO_MERGE_PAINTS) != 0 && (state & CANVAS) != 0;\r", "+\tif (tile.next != 0 && noMerge) {\r", "+\t\twhile (tile.next != 0) {\r", "+\t\t\tOS.memmove (tile, tile.next, PhTile_t.sizeof);\r", "+\t\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {\r", "+\t\t\t\tEvent event = new Event ();\r", "+\t\t\t\tevent.x = tile.rect_ul_x;\r", "+\t\t\t\tevent.y = tile.rect_ul_y;\r", "+\t\t\t\tevent.width = tile.rect_lr_x - tile.rect_ul_x + 1;\r", "+\t\t\t\tevent.height = tile.rect_lr_y - tile.rect_ul_y + 1;\r", "+\t\t\t\tGC gc = event.gc = new GC (this);\r", "+\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);\r", "+\t\t\t\tsendEvent (SWT.Paint, event);\r", "+\t\t\t\tif (isDisposed ()) break;\r", "+\t\t\t\tgc.dispose ();\r", "+\t\t\t\tevent.gc = null;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {\r", "+\t\t\tEvent event = new Event ();\r", "+\t\t\tevent.x = tile.rect_ul_x;\r", "+\t\t\tevent.y = tile.rect_ul_y;\r", "+\t\t\tevent.width = tile.rect_lr_x - tile.rect_ul_x + 1;\r", "+\t\t\tevent.height = tile.rect_lr_y - tile.rect_ul_y + 1;\r", "+\t\t\tRegion region = Region.photon_new (tile.next);\r", "+\t\t\tGC gc = event.gc = new GC (this);\r", "+\t\t\tgc.setClipping (region);\r", "+\t\t\tsendEvent (SWT.Paint, event);\r", "+\t\t\tgc.dispose ();\r", "+\t\t\tevent.gc = null;\r", "+\t\t}\r", "+\t}\r", "+\tOS.PhFreeTiles (damage);\r", "+\treturn OS.Pt_CONTINUE;\r", "+}\r", "-\r", "-void sendPaintEvent (int damage) {\r", "-\tif (!hooks(SWT.Paint) && !filters (SWT.Paint)) return;\r", "-\t\r", "-\t/* Translate the damage to widget coordinates */\r", "-\tshort [] widgetX = new short [1];\r", "-\tshort [] widgetY = new short [1];\r", "-\tOS.PtGetAbsPosition (handle, widgetX, widgetY);\r", "-\tshort [] shellX = new short [1];\r", "-\tshort [] shellY = new short [1];\r", "-\tint shellHandle = OS.PtFindDisjoint (handle);\r", "-\tOS.PtGetAbsPosition (shellHandle, shellX, shellY);\r", "-\tPhPoint_t pt = new PhPoint_t ();\r", "-\tpt.x = (short) (shellX [0] - widgetX [0]);\r", "-\tpt.y = (short) (shellY [0] - widgetY [0]);\r", "-\tdamage = OS.PhCopyTiles (damage);\r", "-\tdamage = OS.PhTranslateTiles (damage, pt);\r", "-\t\r", "-\t/* Send the paint event */\r", "-\tPhTile_t tile = new PhTile_t ();\r", "-\tOS.memmove (tile, damage, PhTile_t.sizeof);\r", "-\tboolean noMerge = (style & SWT.NO_MERGE_PAINTS) != 0 && (state & CANVAS) != 0;\r", "-\tif (tile.next != 0 && noMerge) {\r", "-\t\twhile (tile.next != 0) {\r", "-\t\t\tOS.memmove (tile, tile.next, PhTile_t.sizeof);\r", "-\t\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {\r", "-\t\t\t\tEvent event = new Event ();\r", "-\t\t\t\tevent.x = tile.rect_ul_x;\r", "-\t\t\t\tevent.y = tile.rect_ul_y;\r", "-\t\t\t\tevent.width = tile.rect_lr_x - tile.rect_ul_x + 1;\r", "-\t\t\t\tevent.height = tile.rect_lr_y - tile.rect_ul_y + 1;\r", "-\t\t\t\tGC gc = event.gc = new GC (this);\r", "-\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);\r", "-\t\t\t\tsendEvent (SWT.Paint, event);\r", "-\t\t\t\tif (isDisposed ()) break;\r", "-\t\t\t\tgc.dispose ();\r", "-\t\t\t\tevent.gc = null;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t} else {\r", "-\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {\r", "-\t\t\tEvent event = new Event ();\r", "-\t\t\tevent.x = tile.rect_ul_x;\r", "-\t\t\tevent.y = tile.rect_ul_y;\r", "-\t\t\tevent.width = tile.rect_lr_x - tile.rect_ul_x + 1;\r", "-\t\t\tevent.height = tile.rect_lr_y - tile.rect_ul_y + 1;\r", "-\t\t\tRegion region = Region.photon_new (tile.next);\r", "-\t\t\tGC gc = event.gc = new GC (this);\r", "-\t\t\tgc.setClipping (region);\r", "-\t\t\tsendEvent (SWT.Paint, event);\r", "-\t\t\tgc.dispose ();\r", "-\t\t\tevent.gc = null;\r", "-\t\t}\r", "-\t}\r", "-\tOS.PhFreeTiles (damage);\r", "-}\r"]}], "num": 6823}
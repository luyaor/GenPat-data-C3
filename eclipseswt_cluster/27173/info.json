{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6eac1dd16d99d42bf062cc89feb9762", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90e111f49fb2608a03ecb82d015c544e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "18a77004921c958d7933e6a4bf2f9879ef0cfdc3", "commitAfterChange": "235449f60e73b051bff45b523d24758455cf4aa9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static Program [] getPrograms ()", "signatureAfterChange": " public static Program [] getPrograms ()", "diff": ["-\treturn new Program[0];", "-//\tHashtable bundles = new Hashtable();", "-//\tString[] extensions = getExtensions();", "-//\tbyte[] fsRef = new byte[80];", "-//\tfor (int i = 0; i < extensions.length; i++) {", "-//\t\tString extension = extensions[i];", "-//\t\tchar[] chars = new char[extension.length() - 1];", "-//\t\textension.getChars(1, extension.length(), chars, 0);", "-//\t\tint ext = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "-//\t\tif (ext != 0) {", "-//\t\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "-//\t\t\t\tProgram program = getProgram(fsRef);", "-//\t\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "-//\t\t\t\t\tbundles.put(program.getName(), program);", "-//\t\t\t\t\tfsRef = new byte[80];", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tif (OS.VERSION >= 0x1040) {", "-//\t\t\t\tint utis = OS.UTTypeCreateAllIdentifiersForTag(OS.kUTTagClassFilenameExtension(), ext, 0);", "-//\t\t\t\tif (utis != 0) {", "-//\t\t\t\t\tint utiCount = OS.CFArrayGetCount(utis);", "-//\t\t\t\t\tfor (int j = 0; j < utiCount; j++) {", "-//\t\t\t\t\t\tint uti = OS.CFArrayGetValueAtIndex(utis, j);", "-//\t\t\t\t\t\tif (uti != 0) {", "-//\t\t\t\t\t\t\tint apps = OS.LSCopyAllRoleHandlersForContentType(uti, OS.kLSRolesAll);", "-//\t\t\t\t\t\t\tif (apps != 0) {", "-//\t\t\t\t\t\t\t\tint appCount = OS.CFArrayGetCount(apps);", "-//\t\t\t\t\t\t\t\tfor (int k = 0; k < appCount; k++) {", "-//\t\t\t\t\t\t\t\t\tint app = OS.CFArrayGetValueAtIndex(apps, k);", "-//\t\t\t\t\t\t\t\t\tif (app != 0) {;", "-//\t\t\t\t\t\t\t\t\t\tif (OS.LSFindApplicationForInfo(OS.kLSUnknownCreator, app, 0, fsRef, null) == OS.noErr) {", "-//\t\t\t\t\t\t\t\t\t\t\tProgram program = getProgram(fsRef);", "-//\t\t\t\t\t\t\t\t\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "-//\t\t\t\t\t\t\t\t\t\t\t\tbundles.put(program.getName(), program);", "-//\t\t\t\t\t\t\t\t\t\t\t\tfsRef = new byte[80];", "-//\t\t\t\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\tOS.CFRelease(apps);", "-//\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t}", "-//\t\t\t\t\tOS.CFRelease(utis);", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tOS.CFRelease(ext);", "-//\t\t}", "-//\t}", "-//\tint count = 0;", "-//\tProgram[] programs = new Program[bundles.size()];", "-//\tEnumeration values = bundles.elements();", "-//\twhile (values.hasMoreElements()) {", "-//\t\tprograms[count++] = (Program)values.nextElement();", "-//\t}", "-//\treturn programs;", "+\tVector vector = new Vector();", "+\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\tNSString CFBundleName = NSString.stringWith(\"CFBundleName\");", "+\tNSString CFBundleDisplayName = NSString.stringWith(\"CFBundleDisplayName\");", "+\tNSArray array = new NSArray(OS.NSSearchPathForDirectoriesInDomains(OS.NSAllApplicationsDirectory, OS.NSAllDomainsMask, true));", "+\tint count = array.count();", "+\tfor (int i = 0; i < count; i++) {", "+\t\tNSString path = new NSString(array.objectAtIndex(i));", "+\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "+\t\tNSDirectoryEnumerator enumerator = fileManager.enumeratorAtPath(path);", "+\t\tif (enumerator != null) {", "+\t\t\tid id;", "+\t\t\twhile ((id = enumerator.nextObject()) != null) {", "+\t\t\t\tenumerator.skipDescendents();", "+\t\t\t\tNSString filePath = new NSString(id.id);", "+\t\t\t\tNSString fullPath = path.stringByAppendingPathComponent(filePath);", "+\t\t\t\tif (workspace.isFilePackageAtPath(fullPath)) {", "+\t\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(fullPath);", "+\t\t\t\t\tid bundleName = bundle.objectForInfoDictionaryKey(CFBundleDisplayName);", "+\t\t\t\t    if (bundleName == null) {", "+\t\t\t\t        bundleName = bundle.objectForInfoDictionaryKey(CFBundleName);", "+\t\t\t\t    }", "+\t\t\t\t    if (bundleName == null) {", "+\t\t\t\t        bundleName = fullPath.lastPathComponent().stringByDeletingPathExtension();", "+\t\t\t\t    }", "+\t\t\t\t    NSString name = new NSString(bundleName.id);", "+\t\t\t\t    Program program = new Program();", "+\t\t\t\t    program.name = name.getString();", "+\t\t\t\t    program.fullPath = fullPath.getString();", "+\t\t\t\t    vector.addElement(program);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tProgram[] programs = new Program[vector.size()];", "+\tvector.copyInto(programs);", "+\treturn programs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf4a9d805c3ed1cea3dae77a05629ebd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "fa4d0855c444aaf27093e89f13699e08ffe9104e", "commitAfterChange": "d0b78d74cada563e42efc741bdd21aaf1ce13f4f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-//\tint width = 0, height = 0;", "-//\tint max = OS.GetControl32BitMaximum (buttonHandle);", "-//\tString string = String.valueOf (max);", "-//\tif (digits > 0) {", "-//\t\tStringBuffer buffer = new StringBuffer ();", "-//\t\tbuffer.append (string);", "-//\t\tbuffer.append (getDecimalSeparator ());", "-//\t\tint count = digits - string.length ();", "-//\t\twhile (count >= 0) {", "-//\t\t\tbuffer.append (\"0\");", "-//\t\t\tcount--;", "-//\t\t}", "-//\t\tstring = buffer.toString ();", "-//\t}", "-//\tchar [] buffer = new char [string.length ()];", "-//\tstring.getChars (0, buffer.length, buffer, 0);", "-//\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-//\tPoint size = textExtent (ptr, 0);", "-//\tif (ptr != 0) OS.CFRelease (ptr);", "-//\twidth = Math.max (width, size.x);", "-//\theight = Math.max (height, size.y);", "-//\tint [] metric = new int [1];", "-//\tOS.GetThemeMetric (OS.kThemeMetricEditTextWhitespace, metric);", "-//\twidth += metric [0] * 2;", "-//\tif (wHint != SWT.DEFAULT) width = wHint;", "-//\tif (hHint != SWT.DEFAULT) height = hHint;", "-//\tRectangle trim = computeTrim (0, 0, width, height);", "-//\tOS.GetThemeMetric (OS.kThemeMetricLittleArrowsHeight, metric);", "-//\ttrim.height = Math.max (trim.height, metric [0]);", "-//\treturn new Point (trim.width, trim.height);", "-\treturn new Point(60, 26);", "-}", "+\tfloat width = 0, height = 0;", "+\tString string = Double.toString (buttonView.maxValue ());", "+\tNSMutableDictionary dict = NSMutableDictionary.dictionaryWithCapacity (1);", "+\tdict.setObject(textView.font (), OS.NSFontAttributeName ());", "+\tint length = string.length ();", "+\tchar [] chars = new char [length];", "+\tstring.getChars (0, length, chars, 0);", "+\tNSString nsString = NSString.stringWithCharacters (chars, length);", "+\tNSAttributedString str = ((NSAttributedString) new NSAttributedString ().alloc ()).initWithString_attributes_ (nsString, dict);", "+\tNSSize size = str.size ();", "+\tstr.release ();", "+\twidth = size.width;", "+\theight = size.height;", "+\tNSRect frameRect = textView.frame();", "+\tNSCell cell = new NSCell (textView.cell ());", "+\tNSRect cellRect = cell.drawingRectForBounds(frameRect);", "+\twidth += frameRect.width - cellRect.width;", "+\theight += frameRect.height - cellRect.height;", "+\twidth += GAP;", "+\tNSRect oldRect = buttonView.frame ();", "+\tNSRect newRect = buttonView.frame ();", "+\tbuttonView.setFrame (oldRect);", "+\twidth += newRect.width;", "+\theight = Math.max (height, newRect.height);", "+\tif (wHint != SWT.DEFAULT) width = wHint;", "+\tif (hHint != SWT.DEFAULT) height = hHint;", "+\tRectangle trim = computeTrim (0, 0, (int) width, (int) height);", "+\treturn new Point (trim.width, trim.height);"]}], "num": 27173}
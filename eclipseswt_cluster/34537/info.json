{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0aaadc82d8421b76ef3d79e4c7c1bc8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aec41814b3f39f1826393b2724b0530f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Caret.java", "commitBeforeChange": "b402aeab13d227c8312797c2029a450936172ac8", "commitAfterChange": "e487b353444211d40a99fb8e86b775f614038d6d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  boolean drawCaret ()", "signatureAfterChange": "  boolean drawCaret ()", "diff": ["-\tif (parent.isDisposed ()) return false;", "-\t", "-\tint window = OS.GTK_WIDGET_WINDOW (parent.handle);", "+\tif (parent.isDisposed ()) return false;\t", "+\tint window = parent.paintWindow ();", "-", "-\t/* Actually, we should look at the background and foreground colors.", "-\t * This would require distinguishing between the cases when the GC", "-\t * gives the color as RGB or Pixel, and in the case of Pixel, we", "-\t * would need to distinguish between direct and indexed color.", "-\t * In general, it's not easy to find out the RGB value of a GdkColor", "-\t * (somebody please correct me if I am wrong).", "-\t */", "-\tGdkColor c = new GdkColor ();", "-\tc.red = c.green = c.blue = (short) 0xFFFF;", "-\tOS.gdk_color_alloc (OS.gdk_colormap_get_system (), c);", "-\tOS.gdk_gc_set_foreground (gc, c);", "+\tint fontHandle = parent.fontHandle ();", "+\tint hStyle = OS.gtk_widget_get_style (fontHandle);", "+\tGtkStyle style = new GtkStyle (hStyle);", "+\tGdkColor color = new GdkColor ();", "+\tcolor.red = (short) (style.fg0_red ^ style.bg0_red);", "+\tcolor.green = (short) (style.fg0_green ^ style.bg0_green);", "+\tcolor.blue = (short) (style.fg0_blue ^ style.bg0_blue);", "+\tint colormap = OS.gdk_colormap_get_system ();", "+\tOS.gdk_colormap_alloc_color (colormap, color, true, true);", "+\tOS.gdk_gc_set_foreground (gc, color);", "-\t", "-\t/* Draw the caret */", "+\tOS.gdk_colormap_free_colors (colormap, color, 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6271ca96ba04a9e9cb767cda2831369", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "0b6d387de04a68abdd2ec5aa38e9df440673507d", "commitAfterChange": "7d174ced5ddaf68e948a401545865d725093fd11", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public Rectangle getBounds()", "signatureAfterChange": " public Rectangle getBounds()", "diff": ["-\tfor (int i=0; i<breaks.length; i++) {", "-\t\twidth = Math.max(width, lineWidth[i]);", "-\t\theight += lineHeight[i];", "+\tint length = text.length();", "+\tif (length == 0) {", "+\t\tFont font = this.font != null ? this.font : device.getSystemFont();", "+\t\tFontInfo info = new FontInfo();", "+\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "+\t\tint ascent = Math.max(info.ascent, this.ascent);", "+\t\tint descent = Math.max(info.descent + info.leading, this.descent);", "+\t\theight = ascent + descent;", "+\t} else {", "+\t\tfor (int i=0; i<breaks.length; i++) {", "+\t\t\twidth = Math.max(width, lineWidth[i]);", "+\t\t\theight += lineHeight[i];", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "570c2827a28f0a476328fb57e9bd9320", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "a3eda06a7a4c290420b73156206fa1800c9178ee", "commitAfterChange": "9837bb695405327b535c2924659cef1a3a71f994", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public boolean setText(String html, boolean trusted)", "signatureAfterChange": "  public boolean setText(String html, boolean trusted)", "diff": ["-\tuntrustedText = !trusted;", "-\t* Bug in Safari.  The web view segment faults in some circumstances", "-\t* when the text changes during the location changing callback.  The", "-\t* fix is to defer the work until the callback is done. ", "+\t* If this.html is not null then the about:blank page is already being loaded,", "+\t* so no navigate is required.  Just set the html that is to be shown.", "-\tif (changingLocation) {", "-\t\tthis.html = html;", "-\t} else {", "-\t\t_setText(html, trusted);", "-\t}", "-\treturn true;", "-}", "+\tboolean blankLoading = this.html != null;", "+\tthis.html = html;", "+\tuntrustedText = !trusted;", "+\tif (blankLoading) return true;", "+\tint str = createNSString(ABOUT_BLANK);", "+\tint inURL = Cocoa.objc_msgSend(Cocoa.C_NSURL, Cocoa.S_URLWithString, str); /* autoreleased */", "+\tOS.CFRelease (str);", "+\tint request = Cocoa.objc_msgSend(Cocoa.C_NSURLRequest, Cocoa.S_requestWithURL, inURL);", "+\tCocoa.objc_msgSend(mainFrame, Cocoa.S_loadRequest, request);", "+\treturn true;"]}], "num": 34537}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4493232983d2b0f486ff4738d825452f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c0dce630e0eb8467784f03d19e0adc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "082681b66332177ea03672e4a3002a6e9aca5dfb", "commitAfterChange": "d29e369d5010d75bbca2f5d0e5a06752fb22a13d", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 168, "signatureBeforeChange": "  int OnStateChange (long aWebProgress, long aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (long aWebProgress, long aRequest, int aStateFlags, int aStatus)", "diff": ["-\t* Feature of Mozilla.  When a redirect occurs to a site with an invalid", "-\t* certificate, no STATE_IS_DOCUMENT state transitions are received for the", "-\t* new location, and an immediate attempt is made to show the invalid", "-\t* certificate error.  However our invalid certificate handler must know", "-\t* the site with the invalid certificate, not the site that redirected to", "-\t* it.  The only opportunity to get this site before our invalid certificate", "-\t* handler is invoked is in the subsequent STATE_START | STATE_IS_REQUEST", "-\t* transition.  When this comes, if the request's name appears to be a", "-\t* url then take this to be the new site, in case our invalid certificate", "-\t* handler is about to be invoked.", "+\t* Feature of Mozilla.  When a redirect occurs, no STATE_IS_DOCUMENT state", "+\t* transitions or OnStartURIOpen() callbacks are received for the new", "+\t* location.  As a result, lastNavigateURL is left with the value of the old", "+\t* url (that was redirected from), and the client does not get an opportunity", "+\t* to veto the redirect.  The only opportunity to work around these omissions", "+\t* is in the subsequent STATE_START | STATE_IS_REQUEST state transition.", "+\t* When this comes, if the request's name appears to be a url then take it to", "+\t* be the new site (update lastNavigateURL), and send a \"changing\" LocationEvent", "+\t* to allow the redirect to be vetoed.", "-\t\t\tif (value.indexOf (\":/\") != -1) lastNavigateURL = value;\t//$NON-NLS-1$", "+\t\t\tif (value.indexOf (\":/\") != -1) { //$NON-NLS-1$", "+\t\t\t\tboolean doit = sendChangingEvent (value);", "+\t\t\t\tif (doit) {", "+\t\t\t\t\tlastNavigateURL = value;", "+\t\t\t\t} else {", "+\t\t\t\t\tstop ();", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4c237030dd23787f2a62a57c8246fb0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "4faa8b62274061a69c9fde705f4554b9372ba089", "commitAfterChange": "e62bb85e87e45d91d237499269e5e0197f2153bf", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["+\t/*", "+\t* Feature of Mozilla.  When a redirect occurs to a site with an invalid", "+\t* certificate, no STATE_IS_DOCUMENT state transitions are received for the", "+\t* new location, and an immediate attempt is made to show the invalid", "+\t* certificate error.  However our invalid certificate handler must know", "+\t* the site with the invalid certificate, not the site that redirected to", "+\t* it.  The only opportunity to get this site before our invalid certificate", "+\t* handler is invoked is in the subsequent STATE_START | STATE_IS_REQUEST", "+\t* transition.  When this comes, if the request's name appears to be a", "+\t* url then take this to be the new site, in case our invalid certificate", "+\t* handler is about to be invoked.", "+\t* ", "+\t* Note that updateLastNavigateUrl is not reset to false here so that in", "+\t* typical contexts where a redirect occurs without an accompanying invalid", "+\t* certificate, the updated site will be retrieved from the channel (this", "+\t* is more proper) on the next STATE_TRANSFERRING | STATE_IS_DOCUMENT transition.", "+\t*/", "+\tif (updateLastNavigateUrl && aStateFlags == (nsIWebProgressListener.STATE_IS_REQUEST | nsIWebProgressListener.STATE_START)) {", "+\t\tnsIRequest request = new nsIRequest (aRequest);", "+\t\tint /*long*/ name = XPCOM.nsEmbedCString_new ();", "+\t\tint rc = request.GetName (name);", "+\t\tif (rc == XPCOM.NS_OK) {", "+\t\t\tint length = XPCOM.nsEmbedCString_Length (name);", "+\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (name);", "+\t\t\tbyte[] bytes = new byte[length];", "+\t\t\tXPCOM.memmove (bytes, buffer, length);", "+\t\t\tString value = new String (bytes);", "+\t\t\tif (value.indexOf (\":/\") != -1) lastNavigateURL = value;\t//$NON-NLS-1$", "+\t\t}", "+\t\tXPCOM.nsEmbedCString_delete (name);", "+\t}", "+", "+\t\tupdateLastNavigateUrl = true;", "+\t\tif (updateLastNavigateUrl) {", "+\t\t\tupdateLastNavigateUrl = false;", "+\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\tnsIRequest request = new nsIRequest (aRequest);", "+", "+\t\t\tint rc = request.QueryInterface (nsIChannel.NS_ICHANNEL_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\tnsIChannel channel = new nsIChannel (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = channel.GetURI (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tchannel.Release ();", "+", "+\t\t\tnsIURI uri = new nsIURI (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new ();", "+\t\t\trc = uri.GetSpec (aSpec);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tint length = XPCOM.nsEmbedCString_Length (aSpec);", "+\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);", "+\t\t\tbyte[] bytes = new byte[length];", "+\t\t\tXPCOM.memmove (bytes, buffer, length);", "+\t\t\tlastNavigateURL = new String (bytes);", "+\t\t\tXPCOM.nsEmbedCString_delete (aSpec);", "+\t\t\turi.Release ();", "+\t\t}", "+"]}], "num": 12024}
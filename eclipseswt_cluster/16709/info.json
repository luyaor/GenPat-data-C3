{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5b5372668bef303f16f5f02cffbd1f5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da949ddfe338e8cd8e8dcc19d6f40529", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "28611873c812080da03092456ee7cc4c93ef80a3", "commitAfterChange": "e657e76e5131e900496ccd41899277450879646c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\tint /*long*/ window = OS.GDK_ROOT_PARENT ();", "+\twindow = OS.GDK_ROOT_PARENT ();", "-\tboolean cancelled = false;", "+\tcancelled = false;", "-\t/*", "-\t * The following is intentionally commented.  Since gtk does not currently", "-\t * support pointer warping, the resize cursor cannot be adjusted.  If this", "-\t * capability is added in the future then the following should be uncommented,", "-\t * and the #adjustResizeCursor method can be copied from another platform.", "-\t */", "-//\tPoint cursorPos;", "-//\tint mask = OS.GDK_BUTTON1_MASK | OS.GDK_BUTTON2_MASK | OS.GDK_BUTTON3_MASK; ", "-//\tboolean mouseDown = (state [0] & mask) != 0;", "-//\tif (!mouseDown) {", "-//\t\tif ((style & SWT.RESIZE) != 0) {", "-//\t\t\tcursorPos = adjustResizeCursor (xDisplay, xWindow);", "-//\t\t} else {", "-//\t\t\tcursorPos = adjustMoveCursor (xDisplay, xWindow);", "-//\t\t}", "-//\t\toldX [0] = cursorPos.x;  oldY [0] = cursorPos.y;", "-//\t}", "+\tPoint cursorPos;", "+\tint mask = OS.GDK_BUTTON1_MASK | OS.GDK_BUTTON2_MASK | OS.GDK_BUTTON3_MASK; ", "+\tboolean mouseDown = (state [0] & mask) != 0;", "+\tif (!mouseDown) {", "+\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\tcursorPos = adjustResizeCursor ();", "+\t\t} else {", "+\t\t\tcursorPos = adjustMoveCursor ();", "+\t\t}", "+\t\toldX [0] = cursorPos.x;", "+\t\toldY [0] = cursorPos.y;", "+\t}", "+\tthis.oldX = oldX [0];", "+\tthis.oldY = oldY [0];", "-\tGdkEvent gdkEvent = new GdkEvent();", "-\tGdkEventKey keyEvent = new GdkEventKey ();", "-\tint [] newX = new int [1], newY = new int [1];", "-\tint grabMask = OS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_RELEASE_MASK;", "-\tint ptrGrabResult = OS.gdk_pointer_grab (window, false, grabMask, window, cursor, OS.GDK_CURRENT_TIME);", "+\tgrabbed = grab ();", "-\t/*", "-\t *  Tracker behaves like a Dialog with its own OS event loop.", "-\t */", "+\t/* Tracker behaves like a Dialog with its own OS event loop. */", "+\tGdkEvent gdkEvent = new GdkEvent();", "-\t\tint eventType = gdkEvent.type;", "-\t\tswitch (eventType) {", "-\t\t\tcase OS.GDK_MOTION_NOTIFY:", "-\t\t\t\tif (cursor != lastCursor) {", "-\t\t\t\t\tif (ptrGrabResult == OS.GDK_GRAB_SUCCESS) OS.gdk_pointer_ungrab (OS.GDK_CURRENT_TIME);", "-\t\t\t\t\tptrGrabResult = OS.gdk_pointer_grab (window, false, grabMask, window, cursor, OS.GDK_CURRENT_TIME);", "-\t\t\t\t}", "-\t\t\t\t// fall through", "-\t\t\tcase OS.GDK_BUTTON_RELEASE:", "-\t\t\t\tOS.gdk_window_get_pointer (window, newX, newY, null);", "-\t\t\t\tif (oldX [0] != newX [0] || oldY [0] != newY [0]) {", "-\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\tif (parent == null) {", "-\t\t\t\t\t\tevent.x = newX [0];", "-\t\t\t\t\t\tevent.y = newY [0];", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tPoint screenCoord = display.map (parent, null, newX [0], newY [0]);", "-\t\t\t\t\t\tevent.x = screenCoord.x;", "-\t\t\t\t\t\tevent.y = screenCoord.y;", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\tresizeRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "-\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t* code could have disposed the widget in the resize", "-\t\t\t\t\t\t* event.  If this happens, return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * The following is intentionally commented.  Since gtk does not currently", "-\t\t\t\t\t\t * support pointer warping, the resize cursor cannot be adjusted.  If this", "-\t\t\t\t\t\t * capability is added in the future then the following should be uncommented,", "-\t\t\t\t\t\t * and the #adjustResizeCursor method can be copied from another platform.", "-\t\t\t\t\t\t */", "-//\t\t\t\t\t\tPoint cursorPos = adjustResizeCursor ();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmoveRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "-\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t* event.  If this happens, return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\toldX [0] = newX [0];  oldY [0] = newY [0];", "-\t\t\t\t}", "-\t\t\t\ttracking = eventType != OS.GDK_BUTTON_RELEASE;", "-\t\t\t\tbreak;", "-\t\t\tcase OS.GDK_KEY_PRESS:", "-\t\t\t\tOS.memmove (keyEvent, eventPtr, GdkEventKey.sizeof);", "-\t\t\t\tint stepSize = ((keyEvent.state & OS.GDK_CONTROL_MASK) != 0) ? STEPSIZE_SMALL : STEPSIZE_LARGE;", "-\t\t\t\tint xChange = 0, yChange = 0;\t", "-\t\t\t\tswitch (keyEvent.keyval) {", "-\t\t\t\t\tcase OS.GDK_Escape: ", "-\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t// fallthrough", "-\t\t\t\t\tcase OS.GDK_Return:", "-\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.GDK_Left:", "-\t\t\t\t\t\txChange = -stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.GDK_Right:", "-\t\t\t\t\t\txChange = stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.GDK_Up:", "-\t\t\t\t\t\tyChange = -stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.GDK_Down:", "-\t\t\t\t\t\tyChange = stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif (xChange != 0 || yChange != 0) {", "-\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\tevent.x = oldX [0] + xChange;", "-\t\t\t\t\tevent.y = oldY [0] + yChange;", "-\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "-\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely) that application", "-\t\t\t\t\t\t* code could have disposed the widget in the resize", "-\t\t\t\t\t\t* event.  If this happens return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * The following is intentionally commented.  Since gtk does not currently", "-\t\t\t\t\t\t * support pointer warping, the resize cursor cannot be adjusted.  If this", "-\t\t\t\t\t\t * capability is added in the future then the following should be uncommented,", "-\t\t\t\t\t\t * and the #adjustResizeCursor method can be copied from another platform.", "-\t\t\t\t\t\t */", "-//\t\t\t\t\t\tcursorPos = adjustResizeCursor (xDisplay, xWindow);", "-//\t\t\t\t\t\toldX[0] = cursorPos.x;  oldY[0] = cursorPos.y;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "-\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely) that application", "-\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t* event.  If this happens return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * The following is intentionally commented.  Since gtk does not currently", "-\t\t\t\t\t\t * support pointer warping, the move cursor cannot be adjusted.  If this", "-\t\t\t\t\t\t * capability is added in the future then the following should be uncommented,", "-\t\t\t\t\t\t * and the #adjustMoveCursor method can be copied from another platform.", "-\t\t\t\t\t\t */", "-//\t\t\t\t\t\tcursorPos = adjustMoveCursor (xDisplay, xWindow);", "-//\t\t\t\t\t\toldX[0] = cursorPos.x;  oldY[0] = cursorPos.y;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\tint /*long*/ widget = OS.gtk_get_event_widget (eventPtr);", "+\t\tswitch (gdkEvent.type) {", "+\t\t\tcase OS.GDK_MOTION_NOTIFY: gtk_motion_notify_event (widget, eventPtr); break;", "+\t\t\tcase OS.GDK_BUTTON_RELEASE: gtk_button_release_event (widget, eventPtr); break;", "+\t\t\tcase OS.GDK_KEY_PRESS: gtk_key_press_event (widget, eventPtr); break;", "+\t\t\tcase OS.GDK_KEY_RELEASE: gtk_key_release_event (widget, eventPtr); break;", "-\t\t\tcase OS.GDK_KEY_RELEASE:", "-\tif (ptrGrabResult == OS.GDK_GRAB_SUCCESS) OS.gdk_pointer_ungrab (OS.GDK_CURRENT_TIME);", "+\tungrab ();", "+\twindow = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec6c5b7362183eac8b7c29566630b945", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "28611873c812080da03092456ee7cc4c93ef80a3", "commitAfterChange": "e657e76e5131e900496ccd41899277450879646c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\tint xWindow = OS.XDefaultRootWindow (xDisplay);", "+\twindow = OS.XDefaultRootWindow (xDisplay);", "-\t\txWindow = OS.XtWindow (parent.handle);", "-\t\tif (xWindow == 0) return false;", "+\t\twindow = OS.XtWindow (parent.handle);", "+\t\tif (window == 0) return false;", "-\tboolean cancelled = false;", "+\tcancelled = false;", "-\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, oldX, oldY, unused, unused, mask);", "+\tOS.XQueryPointer (xDisplay, window, unused, unused, oldX, oldY, unused, unused, mask);", "-\t\t\tcursorPos = adjustResizeCursor (xDisplay, xWindow);", "+\t\t\tcursorPos = adjustResizeCursor ();", "-\t\t\tcursorPos = adjustMoveCursor (xDisplay, xWindow);", "+\t\t\tcursorPos = adjustMoveCursor ();", "+\tthis.oldX = oldX [0];", "+\tthis.oldY = oldY [0];", "-\tint xEvent = OS.XtMalloc (XEvent.sizeof);", "-\tXEvent anyEvent = new XEvent();", "-\tint [] newX = new int [1], newY = new int [1];", "-\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);", "-\t", "-\tint ptrGrabResult = OS.XGrabPointer (", "-\t\txDisplay,", "-\t\txWindow,", "-\t\t0,", "+\tint ptrGrabResult = OS.XGrabPointer (xDisplay, window, 0,", "-\t\tOS.GrabModeAsync,", "-\t\tOS.GrabModeAsync,", "-\t\tOS.None,", "-\t\tOS.None,", "-\t\tOS.CurrentTime);", "-\tint kbdGrabResult = OS.XGrabKeyboard (", "-\t\txDisplay,", "-\t\txWindow,", "-\t\t0,", "-\t\tOS.GrabModeAsync,", "-\t\tOS.GrabModeAsync,", "-\t\tOS.CurrentTime);", "+\t\tOS.GrabModeAsync, OS.GrabModeAsync, OS.None, OS.None, OS.CurrentTime);", "+\tint kbdGrabResult = OS.XGrabKeyboard (xDisplay, window, 0,", "+\t\tOS.GrabModeAsync, OS.GrabModeAsync, OS.CurrentTime);", "-\t/*", "-\t * Tracker behaves like a Dialog with its own OS event loop.", "-\t */", "+\t/* Tracker behaves like a Dialog with its own OS event loop. */", "+\tXAnyEvent anyEvent = new XAnyEvent();", "+\tint xEvent = OS.XtMalloc (XEvent.sizeof);", "+\tint dispatch = OS.XtMalloc (4);", "+\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);", "-\t\tOS.memmove (anyEvent, xEvent, XEvent.sizeof);", "+\t\tOS.memmove (anyEvent, xEvent, XAnyEvent.sizeof);", "+\t\tint widget = OS.XtWindowToWidget (anyEvent.display, anyEvent.window);", "-\t\t\tcase OS.MotionNotify:", "-\t\t\t\tif (cursor != 0) {", "-\t\t\t\t\tOS.XChangeActivePointerGrab (", "-\t\t\t\t\t\txDisplay,", "-\t\t\t\t\t\tOS.ButtonPressMask | OS.ButtonReleaseMask | OS.PointerMotionMask,", "-\t\t\t\t\t\tcursor,", "-\t\t\t\t\t\tOS.CurrentTime);", "-\t\t\t\t}", "-\t\t\t\t// fall through", "-\t\t\tcase OS.ButtonRelease:", "-\t\t\t\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, newX, newY, unused, unused, unused);", "-\t\t\t\tif (oldX [0] != newX [0] || oldY [0] != newY [0]) {", "-\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\tboolean oldStippled = stippled;", "-\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\tevent.x = newX [0];", "-\t\t\t\t\tevent.y = newY [0];", "-\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\tresizeRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "-\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible (but unlikely) that application code", "-\t\t\t\t\t\t * could have disposed the widget in the resize event.", "-\t\t\t\t\t\t * If this happens then return false to indicate that", "-\t\t\t\t\t\t * the move failed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcursorPos = adjustResizeCursor (xDisplay, xWindow);", "-\t\t\t\t\t\tnewX [0] = cursorPos.x;  newY [0] = cursorPos.y;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmoveRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "-\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible (but unlikely) that application code", "-\t\t\t\t\t\t * could have disposed the widget in the move event.", "-\t\t\t\t\t\t * If this happens then return false to indicate that", "-\t\t\t\t\t\t * the move failed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\toldX [0] = newX [0];  oldY [0] = newY [0];", "-\t\t\t\t}", "-\t\t\t\ttracking = anyEvent.type != OS.ButtonRelease;", "-\t\t\t\tbreak;", "-\t\t\tcase OS.KeyPress:", "-\t\t\t\tXKeyEvent keyEvent = new XKeyEvent ();", "-\t\t\t\tOS.memmove (keyEvent, xEvent, XKeyEvent.sizeof);", "-\t\t\t\tif (keyEvent.keycode != 0) {", "-\t\t\t\t\tint [] keysym = new int [1];", "-\t\t\t\t\tOS.XLookupString (keyEvent, null, 0, keysym, null);", "-\t\t\t\t\tkeysym [0] &= 0xFFFF;", "-\t\t\t\t\tint xChange = 0, yChange = 0;", "-\t\t\t\t\tint stepSize = ((keyEvent.state & OS.ControlMask) != 0) ? STEPSIZE_SMALL : STEPSIZE_LARGE;", "-\t\t\t\t\tswitch (keysym [0]) {", "-\t\t\t\t\t\tcase OS.XK_KP_Enter:", "-\t\t\t\t\t\tcase OS.XK_Return:", "-\t\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t * Eat the subsequent KeyRelease event", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\tOS.XtAppNextEvent (xtContext, xEvent);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase OS.XK_Escape:", "-\t\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t * Eat the subsequent KeyRelease event", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\tOS.XtAppNextEvent (xtContext, xEvent);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase OS.XK_Left:", "-\t\t\t\t\t\t\txChange = -stepSize;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase OS.XK_Right:", "-\t\t\t\t\t\t\txChange = stepSize;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase OS.XK_Up:", "-\t\t\t\t\t\t\tyChange = -stepSize;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase OS.XK_Down:", "-\t\t\t\t\t\t\tyChange = stepSize;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (xChange != 0 || yChange != 0) {", "-\t\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\t\tboolean oldStippled = stippled;", "-\t\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\tevent.x = oldX [0] + xChange;", "-\t\t\t\t\t\tevent.y = oldY [0] + yChange;", "-\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "-\t\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t * It is possible (but unlikely) that application code", "-\t\t\t\t\t\t\t * could have disposed the widget in the resize event.", "-\t\t\t\t\t\t\t * If this happens then return false to indicate that", "-\t\t\t\t\t\t\t * the move failed.", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcursorPos = adjustResizeCursor (xDisplay, xWindow);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "-\t\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t * It is possible (but unlikely) that application code", "-\t\t\t\t\t\t\t * could have disposed the widget in the move event.", "-\t\t\t\t\t\t\t * If this happens then return false to indicate that", "-\t\t\t\t\t\t\t * the move failed.", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tcursorPos = adjustMoveCursor (xDisplay, xWindow);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\toldX [0] = cursorPos.x;  oldY [0] = cursorPos.y;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\tcase OS.MotionNotify: XPointerMotion (widget, 0, xEvent, dispatch); break;", "+\t\t\tcase OS.ButtonRelease: XButtonRelease (widget, 0, xEvent, dispatch); break;", "+\t\t\tcase OS.KeyPress: XKeyPress (widget, 0, xEvent, dispatch); break;", "+\t\t\tcase OS.KeyRelease: XKeyRelease (widget, 0, xEvent, dispatch); break;", "-\t\t\tcase OS.KeyRelease:", "-\tOS.XtFree (xEvent);", "+\tif (xEvent != 0) OS.XtFree (xEvent);", "+\tif (dispatch != 0) OS.XtFree (dispatch);", "+\twindow = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "502288afdbd691e3d1bf7c889b1ac651", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "28611873c812080da03092456ee7cc4c93ef80a3", "commitAfterChange": "e657e76e5131e900496ccd41899277450879646c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\tboolean cancelled = false;", "+\tcancelled = false;", "-\tEvent event = new Event ();", "-\tMSG msg = new MSG ();", "-\tboolean isMirrored = parent != null && (parent.style & SWT.MIRRORED) != 0;", "-\t\tfinal int oldProc = OS.GetWindowLong (hwndTransparent, OS.GWL_WNDPROC);", "-\t\tObject windowProc = new Object () {", "-\t\t\tpublic int windowProc (int hwnd, int msg, int wParam, int lParam) {", "-\t\t\t\tswitch (msg) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* We typically do not want to answer that the transparent window is", "-\t\t\t\t\t* transparent to hits since doing so negates the effect of having it", "-\t\t\t\t\t* to grab events.  However, clients of the tracker should not be aware", "-\t\t\t\t\t* of this transparent window.  Therefore if there is a hit query", "-\t\t\t\t\t* performed as a result of client code then answer that the transparent", "-\t\t\t\t\t* window is transparent to hits so that its existence will not impact", "-\t\t\t\t\t* the client.", "-\t\t\t\t\t*/", "-\t\t\t\t\tcase OS.WM_NCHITTEST:", "-\t\t\t\t\t\tif (inEvent) return OS.HTTRANSPARENT;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.WM_SETCURSOR:", "-\t\t\t\t\t\tif (clientCursor != 0) {", "-\t\t\t\t\t\t\tOS.SetCursor (clientCursor);", "-\t\t\t\t\t\t\treturn 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (resizeCursor != 0) {", "-\t\t\t\t\t\t\tOS.SetCursor (resizeCursor);", "-\t\t\t\t\t\t\treturn 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn OS.CallWindowProc (oldProc, hwnd, msg, wParam, lParam);", "-\t\t\t}", "-\t\t};", "-\t\tnewProc = new Callback (windowProc, \"windowProc\", 4); //$NON-NLS-1$", "+\t\toldProc = OS.GetWindowLong (hwndTransparent, OS.GWL_WNDPROC);", "+\t\tnewProc = new Callback (this, \"transparentProc\", 4); //$NON-NLS-1$", "-\t", "-\tint oldX = cursorPos.x, oldY = cursorPos.y;", "-\t/*", "-\t* Tracker behaves like a Dialog with its own OS event loop.", "-\t*/", "+\toldX = cursorPos.x;", "+\toldY = cursorPos.y;", "+", "+\t/* Tracker behaves like a Dialog with its own OS event loop. */", "+\tMSG msg = new MSG ();", "+\t\tOS.TranslateMessage (msg);", "-\t\t\t\tint newPos = OS.GetMessagePos ();", "-\t\t\t\tint newX = (short) (newPos & 0xFFFF);", "-\t\t\t\tint newY = (short) (newPos >> 16);\t", "-\t\t\t\tif (newX != oldX || newY != oldY) {", "-\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\tboolean oldStippled = stippled;", "-\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tevent.x = newX;", "-\t\t\t\t\tevent.y = newY;", "-\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\tif (isMirrored) {", "-\t\t\t\t\t\t   resizeRectangles (oldX - newX, newY - oldY);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t   resizeRectangles (newX - oldX, newY - oldY);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t* code could have disposed the widget in the resize", "-\t\t\t\t\t\t* event.  If this happens, return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcursorPos = adjustResizeCursor ();", "-\t\t\t\t\t\tnewX = cursorPos.x;  newY = cursorPos.y;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (isMirrored) {", "-\t\t\t\t\t\t\tmoveRectangles (oldX - newX, newY - oldY); ", "-\t\t\t\t\t\t} else { ", "-\t\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t* event.  If this happens, return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\toldX = newX;  oldY = newY;", "-\t\t\t\t}", "-\t\t\t\ttracking = msg.message != OS.WM_LBUTTONUP;", "+\t\t\t\twmMouse (message, msg.wParam, msg.lParam);", "-\t\t\tcase OS.WM_SYSKEYDOWN:", "-\t\t\t\tcancelled = true;\t\t\t", "-\t\t\t\ttracking = false;", "-\t\t\t\tbreak;", "-\t\t\tcase OS.WM_KEYDOWN:", "-\t\t\t\tint stepSize = OS.GetKeyState (OS.VK_CONTROL) < 0 ? STEPSIZE_SMALL : STEPSIZE_LARGE;", "-\t\t\t\tint xChange = 0, yChange = 0;", "-\t\t\t\tswitch (msg.wParam) {", "-\t\t\t\t\tcase OS.VK_ESCAPE:", "-\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.VK_RETURN:", "-\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.VK_LEFT:", "-\t\t\t\t\t\txChange = isMirrored ? stepSize : -stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.VK_RIGHT:", "-\t\t\t\t\t\txChange = isMirrored ? -stepSize : stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.VK_UP:", "-\t\t\t\t\t\tyChange = -stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.VK_DOWN:", "-\t\t\t\t\t\tyChange = stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif (xChange != 0 || yChange != 0) {", "-\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\tboolean oldStippled = stippled;", "-\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tevent.x = oldX + xChange;", "-\t\t\t\t\tevent.y = oldY + yChange;", "-\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "-\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely) that application", "-\t\t\t\t\t\t* code could have disposed the widget in the resize", "-\t\t\t\t\t\t* event.  If this happens return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcursorPos = adjustResizeCursor ();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "-\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely) that application", "-\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t* event.  If this happens return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcursorPos = adjustMoveCursor ();", "-\t\t\t\t\t}", "-\t\t\t\t\toldX = cursorPos.x;  oldY = cursorPos.y;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\tcase OS.WM_IME_CHAR: wmIMEChar (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_CHAR: wmChar (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_KEYDOWN: wmKeyDown (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_KEYUP: wmKeyUp (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_SYSCHAR: wmSysChar (0, msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_SYSKEYDOWN: wmSysKeyDown (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_SYSKEYUP: wmSysKeyUp (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\toldProc = 0;", "+\t\tresizeCursor = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f09af6537e5a1cb89c418ae3ce39a3df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "8687cd618665675e4d4eec2fb36e773a2eec96b3", "commitAfterChange": "dec417ccdc6a050dac541d5eb88bff5d26e71096", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\tboolean cancelled = false;", "+\tcancelled = false;", "-\tint window = display.createOverlayWindow ();", "+\twindow = display.createOverlayWindow ();", "-\t", "-\tint oldX = cursorPos.x, oldY = cursorPos.y;", "-\t/*", "-\t* Tracker behaves like a Dialog with its own OS event loop.", "-\t*/", "-\tEvent event = new Event ();", "+\toldX = cursorPos.x;", "+\toldY = cursorPos.y;", "+", "+\t/* Tracker behaves like a Dialog with its own OS event loop. */", "-\t\tint eventClass = OS.GetEventClass (outEvent [0]);", "-\t\tint eventKind = OS.GetEventKind (outEvent [0]);", "-\t\tint newX = oldX, newY = oldY;\t", "+\t\tint event = outEvent [0];", "+\t\tint eventClass = OS.GetEventClass (event);", "+\t\tint eventKind = OS.GetEventKind (event);", "+\t\tint nextHandler = 0;", "-\t\t\tcase OS.kEventClassMouse: {", "+\t\t\tcase OS.kEventClassMouse:", "-\t\t\t\t\tcase OS.kEventMouseUp:", "-\t\t\t\t\tcase OS.kEventMouseMoved:", "-\t\t\t\t\tcase OS.kEventMouseDragged:", "-\t\t\t\t\t\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "-\t\t\t\t\t\torg.eclipse.swt.internal.carbon.Point where = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\t\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, where);", "-\t\t\t\t\t\tnewX = where.h;", "-\t\t\t\t\t\tnewY = where.v;\t", "-\t\t\t\t\t\tif (newX != oldX || newY != oldY) {", "-\t\t\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tevent.x = newX;", "-\t\t\t\t\t\t\tevent.y = newY;", "-\t\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\t\t\tresizeRectangles (newX - oldX, newY - oldY);", "-\t\t\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t\t\t* event.  If this happens, return false to indicate", "-\t\t\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\telse {", "-\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectsToErase, true);", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectangles, false);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcursorPos = adjustResizeCursor ();", "-\t\t\t\t\t\t\t\tnewX = cursorPos.x; newY = cursorPos.y;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);", "-\t\t\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t\t\t* event.  If this happens, return false to indicate", "-\t\t\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectsToErase, true);", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectangles, false);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\toldX = newX;  oldY = newY;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttracking = eventKind != OS.kEventMouseUp;", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.kEventMouseUp: kEventMouseUp (nextHandler, event, 0); break;", "+\t\t\t\t\tcase OS.kEventMouseMoved: kEventMouseMoved (nextHandler, event, 0); break;", "+\t\t\t\t\tcase OS.kEventMouseDragged: kEventMouseDragged (nextHandler, event, 0); break;", "-\t\t\t}", "-\t\t\tcase OS.kEventClassKeyboard: {", "+\t\t\tcase OS.kEventClassKeyboard:", "-\t\t\t\t\tcase OS.kEventRawKeyDown:", "-\t\t\t\t\tcase OS.kEventRawKeyModifiersChanged:", "-\t\t\t\t\tcase OS.kEventRawKeyRepeat: {", "-\t\t\t\t\t\tint [] keyCode = new int [1];", "-\t\t\t\t\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "-\t\t\t\t\t\tint [] modifiers = new int [1];", "-\t\t\t\t\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-\t\t\t\t\t\tint stepSize = (modifiers [0] & OS.controlKey) != 0 ? STEPSIZE_SMALL : STEPSIZE_LARGE;", "-\t\t\t\t\t\tint xChange = 0, yChange = 0;", "-\t\t\t\t\t\tswitch (keyCode [0]) {", "-\t\t\t\t\t\t\tcase 53: /* Esc */", "-\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase 36: /* Return */", "-\t\t\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase 123: /* Left arrow */", "-\t\t\t\t\t\t\t\txChange = -stepSize;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase 124: /* Right arrow */", "-\t\t\t\t\t\t\t\txChange = stepSize;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase 126: /* Up arrow */", "-\t\t\t\t\t\t\t\tyChange = -stepSize;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase 125: /* Down arrow */", "-\t\t\t\t\t\t\t\tyChange = stepSize;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (xChange != 0 || yChange != 0) {", "-\t\t\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnewX = oldX + xChange;", "-\t\t\t\t\t\t\tnewY = oldY + yChange;", "-\t\t\t\t\t\t\tevent.x = newX;", "-\t\t\t\t\t\t\tevent.y = newY;", "-\t\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "-\t\t\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* It is possible (but unlikely) that application", "-\t\t\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t\t\t* event.  If this happens return false to indicate", "-\t\t\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectsToErase, true);", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectangles, false);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcursorPos = adjustResizeCursor ();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "-\t\t\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* It is possible (but unlikely) that application", "-\t\t\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t\t\t* event.  If this happens return false to indicate", "-\t\t\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectsToErase, true);", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectangles, false);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcursorPos = adjustMoveCursor ();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\toldX = cursorPos.x;  oldY = cursorPos.y;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t\tcase OS.kEventRawKeyDown: kEventRawKeyDown (nextHandler, event, 0); break;", "+\t\t\t\t\tcase OS.kEventRawKeyModifiersChanged: kEventRawKeyModifiersChanged (nextHandler, event, 0); break;", "+\t\t\t\t\tcase OS.kEventRawKeyRepeat: kEventRawKeyRepeat (nextHandler, event, 0); break;", "+\t\t\t\t\tcase OS.kEventRawKeyUp: kEventRawKeyUp (nextHandler, event, 0); break;", "-\t\t\t}", "+\t\t\t\tbreak;", "-\t\tif (dispatch) OS.SendEventToEventTarget (outEvent [0], OS.GetEventDispatcherTarget ());", "-\t\tOS.ReleaseEvent (outEvent [0]);", "+\t\tif (dispatch) OS.SendEventToEventTarget (event, OS.GetEventDispatcherTarget ());", "+\t\tOS.ReleaseEvent (event);", "+\twindow = 0;"]}], "num": 16709}
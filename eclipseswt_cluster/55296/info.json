{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "097109a048c24c0f5e8807ed014d506b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f335dd0e0d00e8f0bdc00ad0579acb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CBanner.java", "commitBeforeChange": "b1ca6f5c5fbbf4a2ce7198f263200d3c7f131a0a", "commitAfterChange": "1a5dd702f68c819daf5232e868f1328010e5ad8d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Point computeSize(int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize(int wHint, int hHint, boolean changed)", "diff": ["+\tboolean showCurve = left != null && right != null;", "+\t", "-\t\tPoint trim = bottom.computeSize(width, hHint);", "+\t\tPoint trim = bottom.computeSize(width, SWT.DEFAULT);", "-\tif (curve == null) {", "-\t\tif (height == SWT.DEFAULT) {", "-\t\t\tif (left != null) {", "-\t\t\t\tPoint s = left.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\t\t\tupdateCurve(s.y + BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE);", "-\t\t\t}", "+\tif (showCurve) {", "+\t\tif (height != SWT.DEFAULT ) height -= BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "+\t\tif (width == SWT.DEFAULT) {", "+\t\t\tPoint s = left.computeSize(SWT.DEFAULT, height);", "+\t\t\tupdateCurve(s.y + BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE);", "-\t\t\tupdateCurve(height);", "+\t\t\tPoint s1 = right.computeSize(rightWidth, height);", "+\t\t\tPoint s2 = left.computeSize(width - s1.x - 44, height); //44 - best guess at width of curve", "+\t\t\tupdateCurve(s2.y + BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE);", "-\t} else {", "-\t\tupdateCurve(getSize().y);", "-\t}", "-\tif (height != SWT.DEFAULT && left != null && right != null) {", "-\t\theight -= BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "-\t\t\twidth = Math.max(MIN_LEFT, width - rightSize.x - curveWidth + 2* curveIndent);", "+\t\t\twidth -= rightSize.x + curveWidth - 2* curveIndent;", "+\t\t\twidth = Math.max(width, MIN_LEFT);", "-\tif (left != null && (width == SWT.DEFAULT || width > 0)) {", "+\tif (left != null) {", "+\t\tif (height != SWT.DEFAULT) {", "+\t\t\tleftSize.y = Math.min(leftSize.y, height);", "+\t\t}", "-\tPoint size = new Point(0, 0);", "-\tsize.x = leftSize.x;", "-\tif (left != null && right!= null) size.x += curveWidth - 2*curveIndent;", "-\tsize.x += rightSize.x;", "-\tsize.y = leftSize.y > 0 ? leftSize.y : rightSize.y;", "-\tif (left != null && right!= null) size.y +=  BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "-\tsize.y += bottomSize.y;", "-\tif (bottom != null && (left != null || right != null)) size.y += BORDER_TOP + BORDER_BOTTOM + BORDER_STRIPE;", "+\tint w = 0, h = 0;", "+\th += bottomSize.y;", "+\tif (bottom != null && (left != null || right != null)) h += BORDER_TOP + BORDER_BOTTOM + BORDER_STRIPE;", "+\tw += leftSize.x + rightSize.x;", "+\tif (showCurve) {", "+\t\tw += curveWidth - 2*curveIndent;", "+\t\th +=  BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "+\t}", "+\th += left != null ? leftSize.y : rightSize.y; ", "-\tif (wHint != SWT.DEFAULT) size.x = wHint;", "-\tif (hHint != SWT.DEFAULT) size.y = hHint;", "+\tif (wHint != SWT.DEFAULT) w = wHint;", "+\tif (hHint != SWT.DEFAULT) h = hHint;", "-\treturn new Point(size.x, size.y);", "+\tif (showCurve) updateCurve(getSize().y);", "+\treturn new Point(w, h);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "496bbb20c2b4aae36becf1f1a703b2ea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "bf221f66369037ceea33728d5ed71d69549dd596", "commitAfterChange": "73be0ec89889e2c1322c1bfa09d83f81f689ab7f", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " void calculateTopIndex(int delta)", "signatureAfterChange": " void calculateTopIndex(int delta)", "diff": ["-\tint oldTopIndex = topIndex;\t", "+\tint oldTopIndex = topIndex;", "+\tint oldTopIndexY = topIndexY;", "-\t\tif (delta > 0) {", "-\t\t\tif (partialHeight > delta) {", "-\t\t\t\tpartialHeight -= delta;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tdelta -= partialHeight;", "-\t\t\tpartialHeight = 0;", "-\t\t\t", "+\t\tif (delta >= 0) {", "+\t\t\tdelta -= topIndexY;", "+\t\t\tint lineIndex = topIndex;", "-\t\t\twhile (delta > 0 && topIndex < lineCount -1) {", "-\t\t\t\tint lineHeight = renderer.getLineHeight(topIndex);", "-\t\t\t\ttopIndex++;", "-\t\t\t\tif (lineHeight > delta) {", "-\t\t\t\t\tpartialHeight = lineHeight - delta;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tdelta -= lineHeight;", "+\t\t\twhile (lineIndex < lineCount) {", "+\t\t\t\tif (delta <= 0) break;", "+\t\t\t\tdelta -= renderer.getLineHeight(lineIndex++);", "+\t\t\t}", "+\t\t\tif (lineIndex < lineCount && -delta + renderer.getLineHeight(lineIndex) <= clientAreaHeight - topMargin - bottomMargin) {", "+\t\t\t\ttopIndex = lineIndex;", "+\t\t\t\ttopIndexY = -delta;", "+\t\t\t} else {", "+\t\t\t\ttopIndex = lineIndex - 1;", "+\t\t\t\ttopIndexY = -renderer.getLineHeight(topIndex) - delta;", "-\t\t\tif (topIndex > 0) {", "-\t\t\t\tint height = renderer.getLineHeight(topIndex - 1) - partialHeight;", "-\t\t\t\tif (height > -delta) {", "-\t\t\t\t\tpartialHeight -= delta;", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tdelta += height;", "-\t\t\t\tpartialHeight = 0;", "-\t\t\t\ttopIndex--;", "-\t\t\t}", "-\t\t\twhile (-delta > 0 && topIndex > 0) {", "-\t\t\t\tint lineHeight = renderer.getLineHeight(topIndex - 1);", "-\t\t\t\tif (lineHeight > -delta) {", "-\t\t\t\t\tpartialHeight = -delta;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\ttopIndex--;", "+\t\t\tdelta -= topIndexY;", "+\t\t\tint lineIndex = topIndex;", "+\t\t\twhile (lineIndex > 0) {", "+\t\t\t\tint lineHeight = renderer.getLineHeight(lineIndex - 1);", "+\t\t\t\tif (delta + lineHeight > 0) break;", "+\t\t\t\tlineIndex--;", "+\t\t\t}", "+\t\t\tif (lineIndex == 0 || -delta + renderer.getLineHeight(lineIndex) <= clientAreaHeight - topMargin - bottomMargin) {", "+\t\t\t\ttopIndex = lineIndex;", "+\t\t\t\ttopIndexY = - delta;", "+\t\t\t} else {", "+\t\t\t\ttopIndex = lineIndex - 1;", "+\t\t\t\ttopIndexY = - renderer.getLineHeight(topIndex) - delta;", "-\tif (topIndex != oldTopIndex) {", "-\t\ttopOffset = content.getOffsetAtLine(topIndex);", "+\tif (topIndex != oldTopIndex || oldTopIndexY != topIndexY) {"]}], "num": 55296}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27d35d1af7bbbc688b23b68514be711e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f572d3164b5c19461f8697deaa8d793", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "6c4a2c166738e67832efca98869d4a51c06db92b", "commitAfterChange": "84d56fe220646f29848300da6bc168504ddc3a77", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t", "-\t/* Compute the height based on the items */", "-\tint height;", "-\tGtkStyle st = new GtkStyle ();", "-\tOS.memmove (st, OS.gtk_widget_get_style (handle));", "-\tif (hHint != SWT.DEFAULT) {", "-\t\theight = hHint;", "-\t} else {", "-\t\theight = getHeaderHeight();", "-\t\theight += OS.GTK_CLIST_ROW_HEIGHT (handle) * getItemCount();", "-\t\theight += 2 * st.ythickness;", "-\t\tint hBarHandle = OS.GTK_SCROLLED_WINDOW_HSCROLLBAR(scrolledHandle);", "-\t\tGtkRequisition requisition = new GtkRequisition();", "-\t\tOS.gtk_widget_size_request(hBarHandle, requisition);", "-\t\theight += requisition.height + OS.GTK_SCROLLED_WINDOW_SCROLLBAR_SPACING(scrolledHandle);", "-\t}", "-\t", "-\t/* Compute the width based on the items */", "-\tint width;", "-\tif (wHint != SWT.DEFAULT) {", "-\t\twidth = wHint;", "-\t} else {", "-\t\twidth = 2 * st.xthickness;", "-\t\tint count = getColumnCount();", "-\t\tfor (int i = 0; i<count; i++) {", "-\t\t\twidth += OS.gtk_clist_optimal_column_width(handle, i);", "-\t\t}", "-\t\twidth += vScrollBarWidth();", "-\t}", "-\t", "-\t/* In no event will we request ourselves smaller than the minimum OS size */", "-\tPoint minimum = computeNativeSize (scrolledHandle, wHint, hHint, changed);", "-\twidth = Math.max(width, minimum.x);", "-\theight = Math.max(height, minimum.y);", "-\t", "-\treturn new Point(width, height);", "-}", "+\tPoint size = computeNativeSize(handle, wHint, hHint, changed);", "+\tRectangle trim = computeTrim (0, 0, size.x, size.y);", "+\tsize.x = trim.width;", "+\tsize.y = trim.height;", "+\treturn size;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86fbf652f105ef6de8ff1a2413902289", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " static synchronized boolean isNativeUnique(Method method)", "signatureAfterChange": "  static String[] split(String str, String separator)", "diff": ["-static Method[] uniqueMethodsCache;", "-static synchronized boolean isNativeUnique(Method method) {", "-\tif ((method.getModifiers() & Modifier.NATIVE) == 0) return false;", "-\tObject unique = uniqueCache.get(method);", "-\tif (unique != null) return ((Boolean)unique).booleanValue();", "-\tboolean result = true;", "-\tMethod[] methods;", "-\tString name = method.getName();", "-\tClass clazz = method.getDeclaringClass();", "-\tif (clazz.equals(uniqueClassCache)) {", "-\t\tmethods = uniqueMethodsCache;", "-\t} else {", "-\t\tmethods = clazz.getDeclaredMethods();", "-\t\tuniqueClassCache = clazz;", "-\t\tuniqueMethodsCache = methods;", "-\t}", "-\tfor (int i = 0; i < methods.length; i++) {", "-\t\tMethod mth = methods[i];", "-\t\tif ((mth.getModifiers() & Modifier.NATIVE) != 0 &&", "-\t\t\tmethod != mth && !method.equals(mth) &&", "-\t\t\tname.equals(mth.getName()))", "-\t\t\t{", "-\t\t\t\tresult = false;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t}", "-\tuniqueCache.put(method, new Boolean(result));", "-\treturn result;", "-}", "+", "+static String[] split(String str, String separator) {", "+\tStringTokenizer tk = new StringTokenizer(str, separator);", "+\tArrayList result = new ArrayList();", "+\twhile (tk.hasMoreElements()) {", "+\t\tresult.add(tk.nextElement());", "+\t}", "+\treturn (String[])result.toArray(new String[result.size()]);"]}], "num": 2316}
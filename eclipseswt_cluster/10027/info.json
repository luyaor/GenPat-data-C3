{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c59db29ad87774d93535ca845caf707e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de572d496ef9a77fc549b1f43d8466d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "8b52693b27ad7a680f5249df9eae769646079478", "commitAfterChange": "bce9e4e374b50f19654eeae29718189d30d9ce10", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " boolean setButtonBounds()", "signatureAfterChange": " boolean setButtonBounds()", "diff": ["-\tif (items.length > 1) {", "-\t\tif (single && selectedIndex > -1){", "-\t\t\tCTabItem item = items[selectedIndex];", "+\tif (single) {", "+\t\tif (selectedIndex == -1 || items.length > 1){", "-\t\t\tchevronRect.x = Math.min(item.x +item.width + 3, size.x - borderRight - minRect.width - maxRect.width - topRightRect.width - chevronRect.width + 3);", "-\t\t\tif (borderRight > 0) chevronRect.x += 1;", "-\t\t} else {", "-\t\t\tint rightEdge = getRightItemEdge();", "-\t\t\tCTabItem item = items[items.length-1];", "-\t\t\tif (firstIndex > 0 || item.x + item.width >= rightEdge) {", "-\t\t\t\tchevronRect.width = 3*BUTTON_SIZE/2;", "-\t\t\t\tchevronRect.height = BUTTON_SIZE;", "-\t\t\t\tchevronRect.x = size.x - borderRight - minRect.width - maxRect.width - topRightRect.width - chevronRect.width - 3;", "-\t\t\t\tif (borderRight > 0) chevronRect.x += 1;", "-\t\t\t\tchevronRect.y = onBottom ? size.y - borderBottom - tabHeight + (tabHeight - chevronRect.height)/2: borderTop + (tabHeight - chevronRect.height)/2;", "+\t\t\tif (selectedIndex > -1) {", "+\t\t\t\tCTabItem item = items[selectedIndex];\t\t\t\t", "+\t\t\t\tchevronRect.x = Math.min(item.x +item.width + 3, size.x - borderRight - minRect.width - maxRect.width - topRightRect.width - chevronRect.width);", "+\t\t\t} else {", "+\t\t\t\tchevronRect.x = size.x - borderRight - minRect.width - maxRect.width - topRightRect.width - chevronRect.width;", "+\t\t\tif (borderRight > 0) chevronRect.x += 1;", "+\t\t}", "+\t} else {", "+\t\tint lastIndex = getLastIndex();", "+\t\tif (firstIndex > 0 || lastIndex < items.length - 1) {", "+\t\t\tchevronRect.width = 3*BUTTON_SIZE/2;", "+\t\t\tchevronRect.height = BUTTON_SIZE;", "+\t\t\tlastIndex = getLastIndex(); // last index may change when chevron is present", "+\t\t\tCTabItem lastItem = items[lastIndex];", "+\t\t\tchevronRect.x = Math.min(lastItem.x +lastItem.width + 3, size.x - borderRight - minRect.width - maxRect.width - topRightRect.width - chevronRect.width);", "+\t\t\tchevronRect.y = onBottom ? size.y - borderBottom - tabHeight + (tabHeight - chevronRect.height)/2 : borderTop + (tabHeight - chevronRect.height)/2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b7557b7f0a023bf109e42f4d00380ca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "dfd4650fd75100a5a002cab81ff3277b16862845", "commitAfterChange": "d01fac9d213e0fa304edfed85d0f0844e9d59792", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  void initGdip(boolean draw, boolean fill)", "signatureAfterChange": "  void initGdip()", "diff": ["-void initGdip(boolean draw, boolean fill) {", "+void initGdip() {", "-\tif (gdipGraphics == 0) {", "-\t\t/*", "-\t\t* Feature in GDI+. The GDI+ clipping set with Graphics->SetClip()", "-\t\t* is always intersected with the GDI clipping at the time the", "-\t\t* GDI+ graphics is created.  This means that the clipping ", "-\t\t* cannot be reset.  The fix is to clear the clipping before", "-\t\t* the GDI+ graphics is created and reset it afterwards.", "-\t\t*/", "-\t\tint hRgn = OS.CreateRectRgn(0, 0, 0, 0);", "-\t\tint result = OS.GetClipRgn(handle, hRgn);", "-\t\tif (!OS.IsWinCE) {", "-\t\t\tPOINT pt = new POINT ();", "-\t\t\tOS.GetWindowOrgEx (handle, pt);", "-\t\t\tOS.OffsetRgn (hRgn, pt.x, pt.y);", "-\t\t}", "-\t\tOS.SelectClipRgn(handle, 0);", "-\t\tgdipGraphics = data.gdipGraphics = Gdip.Graphics_new(handle);", "-\t\tif (gdipGraphics == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tGdip.Graphics_SetPageUnit(gdipGraphics, Gdip.UnitPixel);", "-\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "-\t\tif (result == 1) setClipping(hRgn);", "-\t\tOS.DeleteObject(hRgn);", "+\tif (gdipGraphics != 0) return ;", "+\t/*", "+\t* Feature in GDI+. The GDI+ clipping set with Graphics->SetClip()", "+\t* is always intersected with the GDI clipping at the time the", "+\t* GDI+ graphics is created.  This means that the clipping ", "+\t* cannot be reset.  The fix is to clear the clipping before", "+\t* the GDI+ graphics is created and reset it afterwards.", "+\t*/", "+\tint hRgn = OS.CreateRectRgn(0, 0, 0, 0);", "+\tint result = OS.GetClipRgn(handle, hRgn);", "+\tif (!OS.IsWinCE) {", "+\t\tPOINT pt = new POINT ();", "+\t\tOS.GetWindowOrgEx (handle, pt);", "+\t\tOS.OffsetRgn (hRgn, pt.x, pt.y);", "-\tif (draw && data.gdipPen == 0) data.gdipPen = createGdipPen();", "-\tif (fill && data.gdipBrush == 0) data.gdipBrush = createGdipBrush();", "+\tOS.SelectClipRgn(handle, 0);", "+\tgdipGraphics = data.gdipGraphics = Gdip.Graphics_new(handle);", "+\tif (gdipGraphics == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tGdip.Graphics_SetPageUnit(gdipGraphics, Gdip.UnitPixel);", "+\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "+\tif (result == 1) setClipping(hRgn);", "+\tOS.DeleteObject(hRgn);\t\t", "+\tdata.state = 0;", "+\tif (data.hPen != 0) {", "+\t\tOS.SelectObject(handle, OS.GetStockObject(OS.NULL_PEN));", "+\t\tOS.DeleteObject(data.hPen);", "+\t\tdata.hPen = 0;", "+\t}", "+\tif (data.hBrush != 0) {", "+\t\tOS.SelectObject(handle, OS.GetStockObject(OS.NULL_BRUSH));", "+\t\tOS.DeleteObject(data.hBrush);", "+\t\tdata.hBrush = 0;", "+\t}"]}], "num": 10027}
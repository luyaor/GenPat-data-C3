{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8140c25234eaa911e69f4d87a8b94081", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6957280d1f368efe4e3b017f77abc98d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 85, "signatureBeforeChange": "  \tString getText ()", "signatureAfterChange": " \t \tString getText ()", "diff": ["-", "-\t\tif (ATK.g_type_is_a (parentType, ATK_TEXT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (handle));", "-\t\t\tAtkTextIface textIface = new AtkTextIface ();", "-\t\t\tATK.memmove (textIface, superType);", "-\t\t\tint /*long*/ characterCount = 0;", "-\t\t\tif (textIface.get_character_count != 0) {", "-\t\t\t\tcharacterCount = ATK.call (textIface.get_character_count, handle);", "-\t\t\t}", "-\t\t\tif (characterCount > 0 && textIface.get_text != 0) {", "-\t\t\t\tparentResult = ATK.call (textIface.get_text, handle, 0, characterCount);", "+\t\tAtkTextIface iface = getTextIface (handle);", "+\t\tif (iface != null && iface.get_character_count != 0) {", "+\t\t\tint /*long*/ characterCount = ATK.call (iface.get_character_count, handle);", "+\t\t\tif (characterCount > 0 && iface.get_text != 0) {", "+\t\t\t\tparentResult = ATK.call (iface.get_text, handle, 0, characterCount);", "-\t\t\t\t\tint length = OS.strlen (parentResult);", "-\t\t\t\t\tbyte [] buffer = new byte [length];", "-\t\t\t\t\tOS.memmove (buffer, parentResult, length);", "-\t\t\t\t\tparentText = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\t\t\tparentText = getString (parentResult);", "+\t\t\t\t\tOS.g_free(parentResult);", "-\t\tAccessibleControlListener[] controlListeners = getControlListeners ();", "-\t\tif (controlListeners.length == 0) return parentText;", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent (accessible);", "-\t\tevent.childID = id;", "-\t\tevent.result = parentText;", "-\t\tfor (int i = 0; i < controlListeners.length; i++) {", "-\t\t\tcontrolListeners [i].getValue (event);\t\t\t\t", "+\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\tint length = listeners.size();", "+\t\tif (length > 0) {", "+\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (accessible);", "+\t\t\tevent.childID = id;", "+\t\t\tevent.result = parentText;", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\t\tlistener.getValue (event);\t\t\t\t", "+\t\t\t}", "+\t\t\treturn event.result;", "-\t\treturn event.result;", "-\t}", "+\t\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e3b8d12c4915d6fd1c56e13f237337e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tstatic int atkObject_get_name (int atkObject)", "signatureAfterChange": "  \tstatic int atkObject_get_name (int atkObject)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tint /*long*/ superType = ATK.g_type_class_peek (object.parentType);", "-\t\tAtkObjectClass objectClass = new AtkObjectClass ();", "-\t\tATK.memmove (objectClass, superType);", "+\t\tAtkObjectClass objectClass = getObjectClass (atkObject);", "-\t\t\tparentResult = ATK.call (objectClass.get_name, object.handle);", "+\t\t\tparentResult = ATK.call (objectClass.get_name, atkObject);", "-\t\tAccessibleListener[] listeners = object.getAccessibleListeners ();", "-\t\tif (listeners.length == 0) return parentResult;", "-\t\t", "-\t\tAccessibleEvent event = new AccessibleEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tif (parentResult != 0) {", "-\t\t\tint length = OS.strlen (parentResult);", "-\t\t\tbyte [] buffer = new byte [length];", "-\t\t\tOS.memmove (buffer, parentResult, length);", "-\t\t\tevent.result = new String (Converter.mbcsToWcs (null, buffer));", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleEvent event = new AccessibleEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tif (parentResult != 0) event.result = getString (parentResult);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleListener listener = (AccessibleListener)listeners.elementAt (i);", "+\t\t\t\t\tlistener.getName (event);\t\t\t\t", "+\t\t\t\t} ", "+\t\t\t\tif (event.result == null) return parentResult;", "+\t\t\t\tif (namePtr != -1) OS.g_free (namePtr);", "+\t\t\t\treturn namePtr = getStringPtr (event.result);", "+\t\t\t}", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getName (event);\t\t\t\t", "-\t\t} ", "-\t\tif (event.result == null) return parentResult;", "-\t\tif (namePtr != -1) OS.g_free (namePtr);", "-\t\tbyte[] name = Converter.wcsToMbcs (null, event.result, true);", "-\t\tnamePtr = OS.g_malloc (name.length);", "-\t\tOS.memmove (namePtr, name, name.length);", "-\t\treturn namePtr; ", "+\t\treturn parentResult;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eb77dce617299d8cc514b4d7d97c469", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tstatic int atkObject_get_description (int atkObject)", "signatureAfterChange": "  \tstatic int atkObject_get_description (int atkObject)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tint /*long*/ superType = ATK.g_type_class_peek (object.parentType);", "-\t\tAtkObjectClass objectClass = new AtkObjectClass ();", "-\t\tATK.memmove (objectClass, superType);", "+\t\tAtkObjectClass objectClass = getObjectClass (atkObject);", "-\t\t\tparentResult = ATK.call (objectClass.get_description, object.handle);", "+\t\t\tparentResult = ATK.call (objectClass.get_description, atkObject);", "-\t\tAccessibleListener[] listeners = object.getAccessibleListeners ();", "-\t\tif (listeners.length == 0) return parentResult;", "-\t\t\t", "-\t\tAccessibleEvent event = new AccessibleEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tif (parentResult != 0) {", "-\t\t\tint length = OS.strlen (parentResult);", "-\t\t\tbyte [] buffer = new byte [length];", "-\t\t\tOS.memmove (buffer, parentResult, length);", "-\t\t\tevent.result = new String (Converter.mbcsToWcs (null, buffer));", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleEvent event = new AccessibleEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tif (parentResult != 0) event.result = getString (parentResult);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleListener listener = (AccessibleListener)listeners.elementAt (i);", "+\t\t\t\t\tlistener.getDescription (event);", "+\t\t\t\t} ", "+\t\t\t\tif (event.result == null) return parentResult;", "+\t\t\t\tif (descriptionPtr != -1) OS.g_free (descriptionPtr);", "+\t\t\t\treturn descriptionPtr = getStringPtr (event.result);", "+\t\t\t}", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getDescription (event);", "-\t\t} ", "-\t\tif (event.result == null) return parentResult;", "-\t\tif (descriptionPtr != -1) OS.g_free (descriptionPtr);", "-\t\tbyte[] name = Converter.wcsToMbcs (null, event.result, true);", "-\t\tdescriptionPtr = OS.g_malloc (name.length);", "-\t\tOS.memmove (descriptionPtr, name, name.length);", "-\t\treturn descriptionPtr; ", "+\t\treturn parentResult;"]}], "num": 46593}
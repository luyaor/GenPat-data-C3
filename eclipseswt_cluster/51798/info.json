{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd80d1fa34cd41176f3f2231ae2aa25a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b09c36984dfb8b381e1bff5a3778f40c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "d771086aa977f99f068da574ec32efbca3c90084", "commitAfterChange": "7df4483d84bff3d62bcce7ab431b1b7000cedfd3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  @Override void createHandle (int index)", "signatureAfterChange": "  @Override void createHandle (int index)", "diff": ["-\tint bits = SWT.CHECK | SWT.RADIO | SWT.PUSH | SWT.SEPARATOR | SWT.CASCADE;", "+\tint bits = SWT.CHECK | SWT.RADIO | SWT.PUSH | SWT.SEPARATOR;", "-\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\tif (OS.GTK3) {", "-\t\t\t\thandle = OS.gtk_radio_menu_item_new (group);", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "-\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "-\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "-\t\t\t\t\timageHandle = OS.gtk_image_new ();", "-\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\t}", "-\t\t\t} else { // Gtk2", "-\t\t\t\thandle = OS.gtk_radio_menu_item_new_with_label (group, buffer);", "-\t\t\t}", "+\t\t\thandle = OS.gtk_radio_menu_item_new_with_label (group, buffer);", "-\t\t\tif (OS.GTK3) {", "-\t\t\t\thandle = OS.gtk_check_menu_item_new ();", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "-\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "-\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "-\t\t\t\t\timageHandle = OS.gtk_image_new ();", "-\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\t}", "-\t\t\t} else { // Gtk2", "-\t\t\t\thandle = OS.gtk_check_menu_item_new_with_label (buffer);", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t}", "+\t\t\thandle = OS.gtk_check_menu_item_new_with_label (buffer);", "-\t\t// This case now needs to be handled due to double padding. When double padded", "-\t\t// menus are used, the \"head\" menu item (such as File, Edit, Help, etc.) should", "-\t\t// not be padded. We only care about this in Gtk3.", "-\t\tcase SWT.CASCADE:", "-\t\t\tif (OS.GTK3) {", "-\t\t\t\thandle = OS.gtk_menu_item_new ();", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "-\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "-\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tif ((parent.style & bits) == SWT.BAR) {", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "-\t\t\t\t\timageHandle = OS.gtk_image_new ();", "-\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (OS.GTK3) {", "-\t\t\t\thandle = OS.gtk_menu_item_new ();", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "-\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "-\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "-\t\t\t\t\timageHandle = OS.gtk_image_new ();", "-\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\t}", "-\t\t\t} else { // Gtk2", "-\t\t\t\thandle = OS.gtk_image_menu_item_new_with_label (buffer);", "-\t\t\t}", "+\t\t\thandle = OS.gtk_image_menu_item_new_with_label (buffer);", "-\tif (imageHandle != 0) {", "-\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "-\t\t\tOS.gtk_image_set_pixel_size (imageHandle, 16);", "-\t\t}", "-\t\tOS.gtk_container_add (boxHandle, imageHandle);", "-\t\tOS.gtk_widget_show (imageHandle);", "-\t}", "-\tif (labelHandle != 0) {", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 16, 0)) {", "-\t\t\tOS.gtk_label_set_xalign (labelHandle, 0);", "-\t\t\tOS.gtk_widget_set_halign (labelHandle, OS.GTK_ALIGN_FILL);", "-\t\t} else {", "-\t\t\tOS.gtk_misc_set_alignment(labelHandle, 0, 0);", "-\t\t}", "-\t\tOS.gtk_box_pack_end (boxHandle, labelHandle, true, true, 0);", "-\t\tOS.gtk_widget_show (labelHandle);", "-\t}", "-\tif (boxHandle != 0) {", "-\t\tOS.gtk_container_add (handle, boxHandle);", "-\t\tOS.gtk_widget_show (boxHandle);", "-\t}", "+\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tif (boxHandle == 0) {", "-\t\t\tlabelHandle = OS.gtk_bin_get_child (handle);", "-\t\t}", "-\t\tOS.gtk_accel_label_set_accel_widget (labelHandle, 0);", "+\t\tlong /*int*/ label = OS.gtk_bin_get_child (handle);", "+\t\tOS.gtk_accel_label_set_accel_widget (label, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a893b9a628085768c76c9ea08bd8b4eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tint [] outControl = new int [1];", "-\t\tif ((style & SWT.MULTI) != 0 || (style & (SWT.BORDER | SWT.SEARCH)) == 0) {", "-\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "-\t\t\t\tint options = 0;", "-\t\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) == (SWT.H_SCROLL | SWT.V_SCROLL)) options |= OS.kHIScrollViewOptionsAllowGrow;", "-\t\t\t\tif ((style & SWT.H_SCROLL) != 0) options |= OS.kHIScrollViewOptionsHorizScroll;", "-\t\t\t\tif ((style & SWT.V_SCROLL) != 0) options |= OS.kHIScrollViewOptionsVertScroll;", "-\t\t\t\tOS.HIScrollViewCreate (options, outControl);", "-\t\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tscrolledHandle = outControl [0];", "-\t\t\t\tOS.HIViewSetVisible (scrolledHandle, true);", "-\t\t\t}", "-\t\t\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "-\t\t\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "-\t\t\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "-\t\t\tOS.HITextViewCreate (null, 0, iFrameOptions, outControl);", "+\tint [] outControl = new int [1];", "+\tif ((style & SWT.MULTI) != 0 || (style & (SWT.BORDER | SWT.SEARCH)) == 0) {", "+\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "+\t\t\tint options = 0;", "+\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) == (SWT.H_SCROLL | SWT.V_SCROLL)) options |= OS.kHIScrollViewOptionsAllowGrow;", "+\t\t\tif ((style & SWT.H_SCROLL) != 0) options |= OS.kHIScrollViewOptionsHorizScroll;", "+\t\t\tif ((style & SWT.V_SCROLL) != 0) options |= OS.kHIScrollViewOptionsVertScroll;", "+\t\t\tOS.HIScrollViewCreate (options, outControl);", "-\t\t\thandle = outControl [0];", "-\t\t\tOS.HIViewSetVisible (handle, true);", "-\t\t\ttxnObject = OS.HITextViewGetTXNObject (handle);\t\t\t", "-\t\t\tint ptr = OS.NewPtr (Rect.sizeof);", "-\t\t\tRect rect = inset ();", "-\t\t\tOS.memcpy (ptr, rect, Rect.sizeof);", "-\t\t\tint [] tags = new int [] {", "-\t\t\t\tOS.kTXNDisableDragAndDropTag,", "-\t\t\t\tOS.kTXNDoFontSubstitution,", "-\t\t\t\tOS.kTXNIOPrivilegesTag,", "-\t\t\t\tOS.kTXNMarginsTag,", "-\t\t\t\tOS.kTXNJustificationTag,", "-\t\t\t};", "-\t\t\tint just = OS.kTXNFlushLeft;", "-\t\t\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "-\t\t\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "-\t\t\tint [] datas = new int [] {", "-\t\t\t\t1,", "-\t\t\t\t1,", "-\t\t\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "-\t\t\t\tptr,", "-\t\t\t\tjust,", "-\t\t\t};", "-\t\t\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "-\t\t\tOS.DisposePtr (ptr);", "-\t\t} else {", "-\t\t\tif ((style & SWT.SEARCH) != 0) {", "-\t\t\t\tint attributes = (style & SWT.CANCEL) != 0 ? OS.kHISearchFieldAttributesCancel : 0;", "-\t\t\t\tOS.HISearchFieldCreate (null, attributes, 0, 0, outControl);", "-\t\t\t} else {", "-\t\t\t\tint window = OS.GetControlOwner (parent.handle);", "-\t\t\t\tOS.CreateEditUnicodeTextControl (window, null, 0, (style & SWT.PASSWORD) != 0, null, outControl);", "-\t\t\t}", "-\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\thandle = outControl [0];", "-\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {1});", "-\t\t\tif ((style & SWT.READ_ONLY) != 0) {", "-\t\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextLockedTag, 1, new byte [] {1});", "-\t\t\t}", "-\t\t\tif ((style & (SWT.RIGHT | SWT.CENTER)) != 0) {", "-\t\t\t\tControlFontStyleRec fontStyle = new ControlFontStyleRec ();", "-\t\t\t\tfontStyle.flags |= OS.kControlUseJustMask;", "-\t\t\t\tif ((style & SWT.CENTER) != 0) fontStyle.just = OS.teJustCenter;", "-\t\t\t\tif ((style & SWT.RIGHT) != 0) fontStyle.just = OS.teJustRight;", "-\t\t\t\tOS.SetControlFontStyle (handle, fontStyle);", "-\t\t\t}", "-\t\t\tif ((style & SWT.SEARCH) != 0) {", "-\t\t\t\tif (OS.HIVIEW) {", "-\t\t\t\t\tOS.HIViewSetVisible (handle, true);", "-\t\t\t\t} else {", "-\t\t\t\t\tOS.SetControlVisibility (handle, true, false);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}\t\t", "-\t} else {", "-\t\tint features = OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick;", "-\t\tint [] outControl = new int [1];", "-\t\tint window = OS.GetControlOwner (parent.handle);", "-\t\tOS.CreateUserPaneControl (window, null, features, outControl);", "-\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\thandle = outControl [0];", "-\t\t", "-\t\t/*", "-\t\t* Feature in the Macintosh.  The TXNObject is not a control but creates scroll", "-\t\t* bar controls to scroll the text.  These are created in the root and are not", "-\t\t* children of the user pane that is used to represent the TNXObject.  The fix", "-\t\t* is to embed the scroll bars in the user pane.", "-\t\t*/", "-\t\tint [] theRoot = new int [1];", "-\t\tOS.GetRootControl (window, theRoot);", "-\t\tshort [] oldCount = new short [1];", "-\t\tOS.CountSubControls (theRoot [0], oldCount);\t", "-\t\t", "-\t\t/* Create the TXNObject */", "+\t\t\tscrolledHandle = outControl [0];", "+\t\t\tOS.HIViewSetVisible (scrolledHandle, true);", "+\t\t}", "-\t\tif ((style & SWT.H_SCROLL) != 0) iFrameOptions |= OS.kTXNWantHScrollBarMask;", "-\t\tif ((style & SWT.V_SCROLL) != 0) iFrameOptions |= OS.kTXNWantVScrollBarMask;", "-\t\tint [] oTXNObject = new int [1], oTXNFrameID = new int[1];", "-\t\tOS.TXNNewObject (0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0);", "-\t\tif (oTXNObject [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\ttxnObject = oTXNObject [0];", "-\t\ttxnFrameID = oTXNFrameID [0];", "-\t\t", "-\t\t/* Embed the scroll bars in the user pane */", "-\t\tshort [] newCount = new short [1];", "-\t\tOS.CountSubControls (theRoot [0], newCount);", "-\t\tint [] scrollBar = new int [1];", "-\t\tfor (int i=newCount [0]; i>oldCount [0]; --i) {", "-\t\t\tOS.GetIndexedSubControl (theRoot [0], (short) i, scrollBar);", "-\t\t\tOS.HIViewRemoveFromSuperview (scrollBar [0]);", "-\t\t\tOS.HIViewAddSubview (handle, scrollBar [0]);", "-\t\t}", "-\t\t", "-\t\t/* Configure the TXNObject */", "+\t\tOS.HITextViewCreate (null, 0, iFrameOptions, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.HIViewSetVisible (handle, true);", "+\t\ttxnObject = OS.HITextViewGetTXNObject (handle);\t\t\t", "-\t\tRect rect = new Rect ();", "-\t\tif (hasBorder ()) {", "-\t\t\tOS.SetRect (rect, (short) 1, (short) 1, (short) 1, (short) 1);", "-\t\t}", "+\t\tRect rect = inset ();", "+\t\t\tOS.kTXNDoFontSubstitution,", "-\t\t\tOS.kTXNDoFontSubstitution,", "+\t\t\t1,", "-\t\t\t1,", "-\t\tOS.TXNSetFrameBounds (txnObject, 0, 0, 0, 0, txnFrameID);", "-\t", "-\t\t/*", "-\t\t* Bug in the Macintosh.  The caret height is too small until some text is set in the", "-\t\t* TXNObject.  The fix is to temporary change the text.", "-\t\t*/", "-\t\tchar [] buffer = new char [] {' '};", "-\t\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 2, OS.kTXNStartOffset, OS.kTXNEndOffset);", "-\t\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 0, OS.kTXNStartOffset, OS.kTXNEndOffset);", "-", "+\t} else {", "+\t\tif ((style & SWT.SEARCH) != 0) {", "+\t\t\tint attributes = (style & SWT.CANCEL) != 0 ? OS.kHISearchFieldAttributesCancel : 0;", "+\t\t\tOS.HISearchFieldCreate (null, attributes, 0, 0, outControl);", "+\t\t} else {", "+\t\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\t\tOS.CreateEditUnicodeTextControl (window, null, 0, (style & SWT.PASSWORD) != 0, null, outControl);", "+\t\t}", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {1});", "+\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextLockedTag, 1, new byte [] {1});", "+\t\t}", "+\t\tif ((style & (SWT.RIGHT | SWT.CENTER)) != 0) {", "+\t\t\tControlFontStyleRec fontStyle = new ControlFontStyleRec ();", "+\t\t\tfontStyle.flags |= OS.kControlUseJustMask;", "+\t\t\tif ((style & SWT.CENTER) != 0) fontStyle.just = OS.teJustCenter;", "+\t\t\tif ((style & SWT.RIGHT) != 0) fontStyle.just = OS.teJustRight;", "+\t\t\tOS.SetControlFontStyle (handle, fontStyle);", "+\t\t}", "+\t\tif ((style & SWT.SEARCH) != 0) {", "+\t\t\tOS.HIViewSetVisible (handle, true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a294fe799dd4e8aadb402136df5d53", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d60307042554a2ad80509163fd1d15e5566b488d", "commitAfterChange": "501cddef55d98c472a410dbb933c0adba1cf9644", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 90, "signatureBeforeChange": "  void setScrollWidth ()", "signatureAfterChange": "  void setScrollWidth ()", "diff": ["+\tsetScrollWidth (Math.max (scrollWidth, width));", "+}", "-\tif (count == 0) {", "-\tint w = pos.cx + (count == 0 ? 0 : OS.GetSystemMetrics (OS.SM_CXVSCROLL));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37cc2a5f37ebca98be744ed9c7e57d6c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "b13cb0959e0afe3c17aa178a3bca80d7d1fd22d7", "commitAfterChange": "e1ddb07c7c0cc45210739f25c19adbd93ffa639d", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " public void setOrientation (int orientation)", "signatureAfterChange": " public void setOrientation (int orientation)", "diff": ["-\tcheckWidget();", "-\tif (OS.IsWinCE) return;", "-\tif (OS.WIN32_VERSION < OS.VERSION (4, 10)) return;", "-\tint flags = SWT.RIGHT_TO_LEFT | SWT.LEFT_TO_RIGHT;", "-\tif ((orientation & flags) == 0 || (orientation & flags) == flags) return;", "-\tstyle &= ~flags;", "-\tstyle |= orientation & flags;", "-\tint bits  = OS.GetWindowLong (handle, OS.GWL_EXSTYLE);", "-\tif ((style & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\tstyle |= SWT.MIRRORED;", "-\t\tbits |= OS.WS_EX_LAYOUTRTL;", "-\t} else {", "-\t\tstyle &= ~SWT.MIRRORED;", "-\t\tbits &= ~OS.WS_EX_LAYOUTRTL;", "-\t}", "-\tOS.SetWindowLong (handle, OS.GWL_EXSTYLE, bits);", "-\tint /*long*/ hwndText = 0, hwndList = 0;", "-\tCOMBOBOXINFO pcbi = new COMBOBOXINFO ();", "-\tpcbi.cbSize = COMBOBOXINFO.sizeof;", "-\tif (OS.GetComboBoxInfo (handle, pcbi)) {", "-\t\thwndText = pcbi.hwndItem;", "-\t\thwndList = pcbi.hwndList;", "-\t}", "-\tif (hwndText != 0) {", "-\t\tint bits1 = OS.GetWindowLong (hwndText, OS.GWL_EXSTYLE);", "-\t\tint bits2 = OS.GetWindowLong (hwndText, OS.GWL_STYLE);", "-\t\tif ((style & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\t\tbits1 |= OS.WS_EX_RIGHT | OS.WS_EX_RTLREADING;", "-\t\t\tbits2 |= OS.ES_RIGHT;", "-\t\t} else {", "-\t\t\tbits1 &= ~(OS.WS_EX_RIGHT | OS.WS_EX_RTLREADING);", "-\t\t\tbits2 &= ~OS.ES_RIGHT;", "-\t\t}", "-\t\tOS.SetWindowLong (hwndText, OS.GWL_EXSTYLE, bits1);", "-\t\tOS.SetWindowLong (hwndText, OS.GWL_STYLE, bits2);", "-\t\t", "-\t\t/*", "-\t\t* Bug in Windows.  For some reason, the single line text field", "-\t\t* portion of the combo box does not redraw to reflect the new", "-\t\t* style bits.  The fix is to force the widget to be resized by", "-\t\t* temporarily shrinking and then growing the width and height.", "-\t\t*/", "-\t\tRECT rect = new RECT ();", "-\t\tOS.GetWindowRect (hwndText, rect);", "-\t\tint width = rect.right - rect.left, height = rect.bottom - rect.top;", "-\t\tOS.GetWindowRect (handle, rect);", "-\t\tint widthCombo = rect.right - rect.left, heightCombo = rect.bottom - rect.top;", "-\t\tint uFlags = OS.SWP_NOMOVE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE;", "-\t\tSetWindowPos (hwndText, 0, 0, 0, width - 1, height - 1, uFlags);", "-\t\tSetWindowPos (handle, 0, 0, 0, widthCombo - 1, heightCombo - 1, uFlags);", "-\t\tSetWindowPos (hwndText, 0, 0, 0, width, height, uFlags);", "-\t\tSetWindowPos (handle, 0, 0, 0, widthCombo, heightCombo, uFlags);", "-\t\tOS.InvalidateRect (handle, null, true);", "-\t}\t", "-\tif (hwndList != 0) {", "-\t\tint bits1 = OS.GetWindowLong (hwndList, OS.GWL_EXSTYLE);\t\t", "-\t\tif ((style & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\t\tbits1 |= OS.WS_EX_LAYOUTRTL;", "-\t\t} else {", "-\t\t\tbits1 &= ~OS.WS_EX_LAYOUTRTL;", "-\t\t}", "-\t\tOS.SetWindowLong (hwndList, OS.GWL_EXSTYLE, bits1);", "-\t}", "+\tsuper.setOrientation (orientation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f352dcdc22d65a46b413b3ba5e40e47b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "0a50d92817a0ec852579e15a962a04552ba58310", "commitAfterChange": "5f8c70f9663ba812b07371317d526ce083d22a28", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected void create(DeviceData deviceData)", "signatureAfterChange": " protected void create(DeviceData deviceData)", "diff": ["-\tint[] buffer = new int[1];", "-\tif (OS.PMCreateSession(buffer) != OS.noErr) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tprintSession = buffer[0];", "-\tif (printSession == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t", "-\tif (data.otherData != null) {", "-\t\t/* Deserialize settings */", "-\t\tint offset = 0;", "-\t\tbyte[] otherData = data.otherData;", "-\t\toffset = unpackData(buffer, otherData, offset);", "-\t\tint flatSettings = buffer[0];", "-\t\toffset = unpackData(buffer, otherData, offset);", "-\t\tint flatFormat = buffer[0];", "-\t\tif (OS.PMUnflattenPrintSettings(flatSettings, buffer) != OS.noErr) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tprintSettings = buffer[0];", "-\t\tif (printSettings == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tif (OS.PMUnflattenPageFormat(flatFormat, buffer) != OS.noErr) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tpageFormat = buffer[0];", "-\t\tif (pageFormat == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tOS.DisposeHandle(flatSettings);", "-\t\tOS.DisposeHandle(flatFormat);", "-\t} else {", "-\t\t/* Create default settings */", "-\t\tif (OS.PMCreatePrintSettings(buffer) != OS.noErr) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tprintSettings = buffer[0];", "-\t\tif (printSettings == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tOS.PMSessionDefaultPrintSettings(printSession, printSettings);", "-\t\tif (OS.PMCreatePageFormat(buffer) != OS.noErr) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tpageFormat = buffer[0];", "-\t\tif (pageFormat == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tOS.PMSessionDefaultPageFormat(printSession, pageFormat);", "-\t}", "+\tprinter = NSPrinter.static_printerWithName_(NSString.stringWith(data.name));", "+\tprinter.retain();", "-\tif (PREVIEW_DRIVER.equals(data.driver)) {", "-\t\tOS.PMSessionSetDestination(printSession, printSettings, (short) OS.kPMDestinationPreview, 0, 0);", "-\t}", "-\tString name = data.name;", "-\tchar[] buffer1 = new char[name.length ()];", "-\tname.getChars(0, buffer1.length, buffer1, 0);", "-\tint ptr = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, buffer1, buffer1.length);", "-\tif (ptr != 0) {", "-\t\tOS.PMSessionSetCurrentPrinter(printSession, ptr); ", "-\t\tOS.CFRelease(ptr);", "-\t}", "-\t", "-\tOS.PMSessionValidatePrintSettings(printSession, printSettings, null);", "-\tOS.PMSessionValidatePageFormat(printSession, pageFormat, null);\t", "-\t", "-\tint graphicsContextsArray = OS.CFArrayCreateMutable(OS.kCFAllocatorDefault, 1, 0);", "-\tif (graphicsContextsArray != 0) {", "-\t\tOS.CFArrayAppendValue(graphicsContextsArray, OS.kPMGraphicsContextCoreGraphics());", "-\t\tOS.PMSessionSetDocumentFormatGeneration(printSession, OS.kPMDocumentFormatPDF(), graphicsContextsArray, 0);", "-\t\tOS.CFRelease(graphicsContextsArray);", "-\t}", "+//\tint[] buffer = new int[1];", "+//\tif (OS.PMCreateSession(buffer) != OS.noErr) SWT.error(SWT.ERROR_NO_HANDLES);", "+//\tprintSession = buffer[0];", "+//\tif (printSession == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+//\t\t", "+//\tif (data.otherData != null) {", "+//\t\t/* Deserialize settings */", "+//\t\tint offset = 0;", "+//\t\tbyte[] otherData = data.otherData;", "+//\t\toffset = unpackData(buffer, otherData, offset);", "+//\t\tint flatSettings = buffer[0];", "+//\t\toffset = unpackData(buffer, otherData, offset);", "+//\t\tint flatFormat = buffer[0];", "+//\t\tif (OS.PMUnflattenPrintSettings(flatSettings, buffer) != OS.noErr) SWT.error(SWT.ERROR_NO_HANDLES);", "+//\t\tprintSettings = buffer[0];", "+//\t\tif (printSettings == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+//\t\tif (OS.PMUnflattenPageFormat(flatFormat, buffer) != OS.noErr) SWT.error(SWT.ERROR_NO_HANDLES);", "+//\t\tpageFormat = buffer[0];", "+//\t\tif (pageFormat == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+//\t\tOS.DisposeHandle(flatSettings);", "+//\t\tOS.DisposeHandle(flatFormat);", "+//\t} else {", "+//\t\t/* Create default settings */", "+//\t\tif (OS.PMCreatePrintSettings(buffer) != OS.noErr) SWT.error(SWT.ERROR_NO_HANDLES);", "+//\t\tprintSettings = buffer[0];", "+//\t\tif (printSettings == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+//\t\tOS.PMSessionDefaultPrintSettings(printSession, printSettings);", "+//\t\tif (OS.PMCreatePageFormat(buffer) != OS.noErr) SWT.error(SWT.ERROR_NO_HANDLES);", "+//\t\tpageFormat = buffer[0];", "+//\t\tif (pageFormat == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+//\t\tOS.PMSessionDefaultPageFormat(printSession, pageFormat);", "+//\t}", "+//\t", "+//\tif (PREVIEW_DRIVER.equals(data.driver)) {", "+//\t\tOS.PMSessionSetDestination(printSession, printSettings, (short) OS.kPMDestinationPreview, 0, 0);", "+//\t}", "+//\tString name = data.name;", "+//\tchar[] buffer1 = new char[name.length ()];", "+//\tname.getChars(0, buffer1.length, buffer1, 0);", "+//\tint ptr = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, buffer1, buffer1.length);", "+//\tif (ptr != 0) {", "+//\t\tOS.PMSessionSetCurrentPrinter(printSession, ptr); ", "+//\t\tOS.CFRelease(ptr);", "+//\t}", "+//\t", "+//\tOS.PMSessionValidatePrintSettings(printSession, printSettings, null);", "+//\tOS.PMSessionValidatePageFormat(printSession, pageFormat, null);\t", "+//\t", "+//\tint graphicsContextsArray = OS.CFArrayCreateMutable(OS.kCFAllocatorDefault, 1, 0);", "+//\tif (graphicsContextsArray != 0) {", "+//\t\tOS.CFArrayAppendValue(graphicsContextsArray, OS.kPMGraphicsContextCoreGraphics());", "+//\t\tOS.PMSessionSetDocumentFormatGeneration(printSession, OS.kPMDocumentFormatPDF(), graphicsContextsArray, 0);", "+//\t\tOS.CFRelease(graphicsContextsArray);", "+//\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce112199caf2be7b52245746cf8dfec7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/cocoa/org/eclipse/swt/browser/MozillaDelegate.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int getHandle ()", "signatureAfterChange": "  int getHandle ()", "diff": ["-    int embedHandle = Cocoa.objc_msgSend (Cocoa.C_NSImageView, Cocoa.S_alloc);", "-\tif (embedHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\tNSRect r = new NSRect ();", "-\tembedHandle = Cocoa.objc_msgSend (embedHandle, Cocoa.S_initWithFrame, r);", "-\tint rc;", "-\tint[] outControl = new int[1];", "-\tif (USE_COCOA_VIEW_CREATE && OS.VERSION >= 0x1050) {", "-\t\trc = Cocoa.HICocoaViewCreate (embedHandle, 0, outControl);", "-\t} else {", "-\t\ttry {", "-\t\t\tSystem.loadLibrary (\"frameembedding\"); //$NON-NLS-1$", "-\t\t} catch (UnsatisfiedLinkError e) {}", "-\t\trc = Cocoa.HIJavaViewCreateWithCocoaView (outControl, embedHandle);", "-\t}", "-\tif (rc != OS.noErr || outControl[0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\tint subHIView = outControl[0];", "-\tHILayoutInfo newLayoutInfo = new HILayoutInfo ();", "-\tnewLayoutInfo.version = 0;", "-\tOS.HIViewGetLayoutInfo (subHIView, newLayoutInfo);", "-\tHISideBinding biding = newLayoutInfo.binding.top;", "-\tbiding.toView = 0;", "-\tbiding.kind = OS.kHILayoutBindMin;", "-\tbiding.offset = 0;", "-\tbiding = newLayoutInfo.binding.left;", "-\tbiding.toView = 0;", "-\tbiding.kind = OS.kHILayoutBindMin;", "-\tbiding.offset = 0;", "-\tbiding = newLayoutInfo.binding.bottom;", "-\tbiding.toView = 0;", "-\tbiding.kind = OS.kHILayoutBindMax;", "-\tbiding.offset = 0;", "-\tbiding = newLayoutInfo.binding.right;", "-\tbiding.toView = 0;", "-\tbiding.kind = OS.kHILayoutBindMax;", "-\tbiding.offset = 0;", "-\tOS.HIViewSetLayoutInfo (subHIView, newLayoutInfo);", "-\tOS.HIViewChangeFeatures (subHIView, OS.kHIViewFeatureIsOpaque, 0);", "-\tOS.HIViewSetVisible (subHIView, true);", "-\tint parentHandle = browser.handle;", "-\tOS.HIViewAddSubview (browser.handle, subHIView);", "-\tCGRect rect = new CGRect ();", "-\tOS.HIViewGetFrame (parentHandle, rect);", "-\trect.x = rect.y = 0;", "-\tOS.HIViewSetFrame (subHIView, rect);", "-\thandles.put (new LONG (embedHandle), new LONG (browser.handle));", "-", "-\tif (Callback3 == null) Callback3 = new Callback (this.getClass (), \"eventProc3\", 3); //$NON-NLS-1$", "-\tint callback3Address = Callback3.getAddress ();", "-\tif (callback3Address == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tint [] mask = new int [] {", "-\t\tOS.kEventClassMouse, OS.kEventMouseDown,", "-\t};", "-\tint controlTarget = OS.GetControlEventTarget (subHIView);", "-\tOS.InstallEventHandler (controlTarget, callback3Address, mask.length / 2, mask, browser.handle, null);", "+\tint embedHandle = browser.view.id;", "+//    int embedHandle = Cocoa.objc_msgSend (Cocoa.C_NSImageView, Cocoa.S_alloc);", "+//\tif (embedHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+//\tNSRect r = new NSRect ();", "+//\tembedHandle = Cocoa.objc_msgSend (embedHandle, Cocoa.S_initWithFrame, r);", "+//\tint rc;", "+//\tint[] outControl = new int[1];", "+//\tif (USE_COCOA_VIEW_CREATE && OS.VERSION >= 0x1050) {", "+//\t\trc = Cocoa.HICocoaViewCreate (embedHandle, 0, outControl);", "+//\t} else {", "+//\t\ttry {", "+//\t\t\tSystem.loadLibrary (\"frameembedding\"); //$NON-NLS-1$", "+//\t\t} catch (UnsatisfiedLinkError e) {}", "+//\t\trc = Cocoa.HIJavaViewCreateWithCocoaView (outControl, embedHandle);", "+//\t}", "+//\tif (rc != OS.noErr || outControl[0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+//\tint subHIView = outControl[0];", "+//\tHILayoutInfo newLayoutInfo = new HILayoutInfo ();", "+//\tnewLayoutInfo.version = 0;", "+//\tOS.HIViewGetLayoutInfo (subHIView, newLayoutInfo);", "+//\tHISideBinding biding = newLayoutInfo.binding.top;", "+//\tbiding.toView = 0;", "+//\tbiding.kind = OS.kHILayoutBindMin;", "+//\tbiding.offset = 0;", "+//\tbiding = newLayoutInfo.binding.left;", "+//\tbiding.toView = 0;", "+//\tbiding.kind = OS.kHILayoutBindMin;", "+//\tbiding.offset = 0;", "+//\tbiding = newLayoutInfo.binding.bottom;", "+//\tbiding.toView = 0;", "+//\tbiding.kind = OS.kHILayoutBindMax;", "+//\tbiding.offset = 0;", "+//\tbiding = newLayoutInfo.binding.right;", "+//\tbiding.toView = 0;", "+//\tbiding.kind = OS.kHILayoutBindMax;", "+//\tbiding.offset = 0;", "+//\tOS.HIViewSetLayoutInfo (subHIView, newLayoutInfo);", "+//\tOS.HIViewChangeFeatures (subHIView, OS.kHIViewFeatureIsOpaque, 0);", "+//\tOS.HIViewSetVisible (subHIView, true);", "+//\tint parentHandle = browser.handle;", "+//\tOS.HIViewAddSubview (browser.handle, subHIView);", "+//\tCGRect rect = new CGRect ();", "+//\tOS.HIViewGetFrame (parentHandle, rect);", "+//\trect.x = rect.y = 0;", "+//\tOS.HIViewSetFrame (subHIView, rect);", "+//\thandles.put (new LONG (embedHandle), new LONG (browser.handle));", "+//", "+//\tif (Callback3 == null) Callback3 = new Callback (this.getClass (), \"eventProc3\", 3); //$NON-NLS-1$", "+//\tint callback3Address = Callback3.getAddress ();", "+//\tif (callback3Address == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+//\tint [] mask = new int [] {", "+//\t\tOS.kEventClassMouse, OS.kEventMouseDown,", "+//\t};", "+//\tint controlTarget = OS.GetControlEventTarget (subHIView);", "+//\tOS.InstallEventHandler (controlTarget, callback3Address, mask.length / 2, mask, browser.handle, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a430ae6bb2d4ae55dfb57e0a76d5c1f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "9c01a3f45d573f08d8b7a2e1b0b9b9e7b1cebb0a", "commitAfterChange": "b55930c1b042058439d042ea5c49694a2329e40e", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public void setSelection (TreeItem [] items)", "signatureAfterChange": " public void setSelection (TreeItem item)", "diff": ["+ */", "+public void setSelection (TreeItem item) {", "+\tcheckWidget ();", "+\tif (item == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tsetSelection (new TreeItem [] {item});", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2064d2bd2cbfb0f60db0841d71dcb71", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "f54e3a41eec8575656b869bd6f4046284f618477", "commitAfterChange": "78de6a75dd3879930bae14ab714715cacc8bd007", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "diff": ["-\tint scrollRemainder = display.scrollRemainder;", "-\tLRESULT result = super.WM_MOUSEWHEEL (wParam, lParam);", "-\tif (result != null) return result;", "-\t/*", "-\t* Translate WM_MOUSEWHEEL to WM_VSCROLL or WM_HSCROLL.", "-\t*/", "-\tif ((state & CANVAS) != 0) {", "-\t\tif ((wParam & (OS.MK_SHIFT | OS.MK_CONTROL)) != 0) return result;", "-\t\tboolean vertical = verticalBar != null && verticalBar.getEnabled ();", "-\t\tboolean horizontal = horizontalBar != null && horizontalBar.getEnabled ();", "-\t\tint msg = vertical ? OS.WM_VSCROLL : horizontal ? OS.WM_HSCROLL : 0;", "-\t\tif (msg == 0) return result;", "-\t\tint [] linesToScroll = new int [1];", "-\t\tOS.SystemParametersInfo (OS.SPI_GETWHEELSCROLLLINES, 0, linesToScroll, 0);", "-\t\tint delta = OS.GET_WHEEL_DELTA_WPARAM (wParam);", "-\t\tboolean pageScroll = linesToScroll [0] == OS.WHEEL_PAGESCROLL;", "-\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (5, 1)) {", "-\t\t\tScrollBar bar = vertical ? verticalBar : horizontalBar;", "-\t\t\tSCROLLINFO info = new SCROLLINFO ();", "-\t\t\tinfo.cbSize = SCROLLINFO.sizeof;", "-\t\t\tinfo.fMask = OS.SIF_POS;", "-\t\t\tOS.GetScrollInfo (handle, bar.scrollBarType (), info);", "-\t\t\tif (vertical && !pageScroll) delta *= linesToScroll [0];", "-\t\t\tint increment = pageScroll ? bar.getPageIncrement () : bar.getIncrement ();", "-\t\t\tinfo.nPos -=  increment * delta / OS.WHEEL_DELTA;", "-\t\t\tOS.SetScrollInfo (handle, bar.scrollBarType (), info, true);", "-\t\t\tOS.SendMessage (handle, msg, OS.SB_THUMBPOSITION, 0);", "-\t\t} else {", "-\t\t\tint code = 0;", "-\t  \t\tif (pageScroll) {", "-\t   \t\t\tcode = delta < 0 ? OS.SB_PAGEDOWN : OS.SB_PAGEUP;", "-\t  \t\t} else {", "-\t  \t\t\tcode = delta < 0 ? OS.SB_LINEDOWN : OS.SB_LINEUP;", "-\t  \t\t\tif (msg == OS.WM_VSCROLL) delta *= linesToScroll [0];", "-\t  \t\t}", "-\t  \t\t/* Check if the delta and the remainder have the same direction (sign) */", "-\t  \t\tif ((delta ^ scrollRemainder) >= 0) delta += scrollRemainder;", "-\t\t\tint count = Math.abs (delta) / OS.WHEEL_DELTA;", "-\t\t\tfor (int i=0; i<count; i++) {", "-\t\t\t\tOS.SendMessage (handle, msg, code, 0);", "-\t\t\t}", "-\t\t}", "-\t\treturn LRESULT.ZERO;", "-\t}", "-\t\t", "-\t/*", "-\t* When the native widget scrolls inside WM_MOUSEWHEEL, it", "-\t* may or may not send a WM_VSCROLL or WM_HSCROLL to do the", "-\t* actual scrolling.  This depends on the implementation of", "-\t* each native widget.  In order to ensure that application", "-\t* code is notified when the scroll bar moves, compare the", "-\t* scroll bar position before and after the WM_MOUSEWHEEL.", "-\t* If the native control sends a WM_VSCROLL or WM_HSCROLL,", "-\t* then the application has already been notified.  If not", "-\t* explicitly send the event.", "-\t*/", "-\tint vPosition = verticalBar == null ? 0 : verticalBar.getSelection ();", "-\tint hPosition = horizontalBar == null ? 0 : horizontalBar.getSelection ();", "-\tint /*long*/ code = callWindowProc (handle, OS.WM_MOUSEWHEEL, wParam, lParam);", "-\tif (verticalBar != null) {", "-\t\tint position = verticalBar.getSelection ();", "-\t\tif (position != vPosition) {", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.detail = position < vPosition ? SWT.PAGE_UP : SWT.PAGE_DOWN; ", "-\t\t\tverticalBar.sendEvent (SWT.Selection, event);", "-\t\t}", "-\t}", "-\tif (horizontalBar != null) {", "-\t\tint position = horizontalBar.getSelection ();", "-\t\tif (position != hPosition) {", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.detail = position < hPosition ? SWT.PAGE_UP : SWT.PAGE_DOWN; ", "-\t\t\thorizontalBar.sendEvent (SWT.Selection, event);", "-\t\t}", "-\t}", "-\treturn new LRESULT (code);", "+\treturn wmScrollWheel ((state & CANVAS) != 0, wParam, lParam);"]}], "num": 51798}
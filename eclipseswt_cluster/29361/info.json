{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd377571c1c7bb2dcd99a328f493aeed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb9d5acbfa312fe7627d9d2ae8b6a4d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "6dfada09fce7534836dfda13677bbc5ed1930c84", "commitAfterChange": "02e97b7981a930ce3446e9dd0e3c1b2c25e0172b", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  public void test_setSelection$I()", "signatureAfterChange": "  public void test_setSelection$I()", "diff": ["-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"MULTI: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "+\t\tassertEquals(\"MULTI: setSelection(new int [0]) getFocusIndex()\", list.getFocusIndex(), -1);", "-\t\tfail(\"No exception thrown\");", "+\t\tfail(\"No exception thrown for MULTI: setSelection((int[]) null)\");", "-\tassertEquals(list.getSelectionIndices(), new int[] {2});", "-\tassertEquals(list.getFocusIndex(), 2);", "+\tassertEquals(\"MULTI: setSelection(new int [] {2})\", list.getSelectionIndices(), new int[] {2});", "+\tassertEquals(\"MULTI: setSelection(new int [] {2}) getFocusIndex()\", list.getFocusIndex(), 2);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 2);", "+\tassertEquals(\"MULTI: setSelection(new int [] {number})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"MULTI: setSelection(new int [] {number}) getFocusIndex()\", list.getFocusIndex(), 2);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0, 1});", "-\tassertEquals(list.getFocusIndex(), 1);", "+\tassertEquals(\"MULTI: setSelection(new int [] {1, 0})\", list.getSelectionIndices(), new int[] {0, 1});", "+\tassertEquals(\"MULTI: setSelection(new int [] {1, 0}) getFocusIndex()\", list.getFocusIndex(), 1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 1);", "+\tassertEquals(\"MULTI: setSelection(new int [] {-1, number})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"MULTI: setSelection(new int [] {-1, number}) getFocusIndex()\", list.getFocusIndex(), 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getFocusIndex(), number - 1);", "+\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, number}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getFocusIndex(), number - 1);", "+\tassertEquals(\"MULTI: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {0});", "+\tif (fCheckSWTPolicy) {", "+\t\tassertEquals(\"MULTI: setSelection(new int [] {-1, 0}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "+\t}", "-\tassertEquals(list.getSelectionIndices(), indices);", "-\tassertEquals(list.getFocusIndex(), indices[0]);", "+\tassertEquals(\"MULTI: setSelection(indices)\", list.getSelectionIndices(), indices);", "+\tassertEquals(\"MULTI: setSelection(indices) getFocusIndex()\", list.getFocusIndex(), indices[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 0);", "+\tassertEquals(\"MULTI: setSelection(new int [] {number, number})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"MULTI: setSelection(new int [] {number, number}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getFocusIndex(), number - 1);", "+\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, number - 1}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0, 1});", "-\tassertEquals(list.getFocusIndex(), 0);", "+\tassertEquals(\"MULTI: setSelection(new int [] {0, number, 1})\", list.getSelectionIndices(), new int[] {0, 1});", "+\tassertEquals(\"MULTI: setSelection(new int [] {0, number, 1}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0, number - 2, number - 1});", "-\tassertEquals(list.getFocusIndex(), number - 1);", "+\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, 0, number - 2})\", list.getSelectionIndices(), new int[] {0, number - 2, number - 1});", "+\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, 0, number - 2}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [0]) getFocusIndex()\", list.getFocusIndex(), -1);", "-\t\tfail(\"No exception thrown\");", "+\t\tfail(\"No exception thrown for EMPTY MULTI: setSelection((int[]) null)\");", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0}) getFocusIndex()\", list.getFocusIndex(), -1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {-1})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {-1}) getFocusIndex()\", list.getFocusIndex(), -1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0, 0}) getFocusIndex()\", list.getFocusIndex(), -1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {-1, 0}) getFocusIndex()\", list.getFocusIndex(), -1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0, -1})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0, -1}) getFocusIndex()\", list.getFocusIndex(), -1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"SINGLE: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "+\t\tassertEquals(\"SINGLE: setSelection(new int [0]) getFocusIndex()\", list.getFocusIndex(), -1);", "-\t\tfail(\"No exception thrown\");", "+\t\tfail(\"No exception thrown for SINGLE: setSelection((int[]) null)\");", "-\tassertEquals(list.getSelectionIndices(), new int[] {2});", "-\tassertEquals(list.getFocusIndex(), 2);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {2})\", list.getSelectionIndices(), new int[] {2});", "+\tassertEquals(\"SINGLE: setSelection(new int [] {2}) getFocusIndex()\", list.getFocusIndex(), 2);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 2);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number}) getFocusIndex()\", list.getFocusIndex(), 2);", "-\tassertEquals(list.getSelectionIndices(), new int[] {1});", "-\tassertEquals(list.getFocusIndex(), 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {1, 0})\", list.getSelectionIndices(), new int[] {1});", "+\tassertEquals(\"SINGLE: setSelection(new int [] {1, 0}) getFocusIndex()\", list.getFocusIndex(), 1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {-1, number})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {-1, number}) getFocusIndex()\", list.getFocusIndex(), 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getFocusIndex(), number - 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getFocusIndex(), 0);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(\"SINGLE: setSelection(new int [] {-1, 0}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(list.getSelectionIndices(), new int[] {indices[0]});", "-\tassertEquals(list.getFocusIndex(), indices[0]);", "+\tassertEquals(\"SINGLE: setSelection(indices)\", list.getSelectionIndices(), new int[] {indices[0]});", "+\tassertEquals(\"SINGLE: setSelection(indices) getFocusIndex()\", list.getFocusIndex(), indices[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 0);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number, number})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number, number}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getFocusIndex(), number - 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getFocusIndex(), 0);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {0, number, 1})\", list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(\"SINGLE: setSelection(new int [] {0, number, 1}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getFocusIndex(), number - 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2})\", list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [0]) getFocusIndex()\", list.getFocusIndex(), -1);", "-\t\tfail(\"No exception thrown\");", "+\t\tfail(\"No exception thrown for EMPTY SINGLE: setSelection((int[]) null)\");", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0}) getFocusIndex()\", list.getFocusIndex(), -1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {-1})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {-1}) getFocusIndex()\", list.getFocusIndex(), -1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0, 0}) getFocusIndex()\", list.getFocusIndex(), -1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {-1, 0}) getFocusIndex()\", list.getFocusIndex(), -1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), -1);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0, -1})\", list.getSelectionIndices(), new int[0]);", "+\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0, -1}) getFocusIndex()\", list.getFocusIndex(), -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd5628a899115a4818261d5f0a04687f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "14581ca5a7841e362a4bb6a68c76d00675c70760", "commitAfterChange": "2882bbd7423650466596733b7f7109e5d58042c8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static String [] getExtensions ()", "signatureAfterChange": " public static String [] getExtensions ()", "diff": ["-\t\t\".xml\",", "-\t\t\".html\",", "-\t\t\".java\",", "-\t\t\".properties\",", "-\t\t\".jar\",", "-\t\t\".zip\",", "+\t\t// From System-Declared Uniform Type Identifiers", "-\t\t\".jpeg\",", "+\t\t\".rtf\",", "+\t\t\".html\",", "+\t\t\".htm\",", "+\t\t\".xml\",", "+\t\t\".c\",", "+\t\t\".m\",", "+\t\t\".cp\", \".cpp\", \".c++\", \".cc\", \".cxx\",", "+\t\t\".mm\",", "+\t\t\".h\",", "+\t\t\".hpp\",", "+\t\t\".h++\",", "+\t\t\".hxx\",", "+\t\t\".java\",", "+\t\t\".jav\",", "+\t\t\".s\",", "+\t\t\".r\",", "+\t\t\".defs\",", "+\t\t\".mig\",", "+\t\t\".exp\",", "+\t\t\".js\",", "+\t\t\".jscript\",", "+\t\t\".javascript\",", "+\t\t\".sh\",", "+\t\t\".command\",", "+\t\t\".csh\",", "+\t\t\".pl\",", "+\t\t\".pm\",", "+\t\t\".py\",", "+\t\t\".rb\",", "+\t\t\".rbw\",", "+\t\t\".php\",", "+\t\t\".php3\",", "+\t\t\".php4\",", "+\t\t\".ph3\",", "+\t\t\".ph4\",", "+\t\t\".phtml\",", "+\t\t\".jnlp\",", "+\t\t\".applescript\",", "+\t\t\".scpt\",", "+\t\t\".o\",", "+\t\t\".exe\",", "+\t\t\".dll\",", "+\t\t\".class\",", "+\t\t\".jar\",", "+\t\t\".qtz\",", "+\t\t\".gtar\",", "+\t\t\".tar\",", "+\t\t\".gz\",", "+\t\t\".gzip\",", "+\t\t\".tgz\",", "+\t\t\".hqx\",", "+\t\t\".bin\",", "+\t\t\".vcf\",", "+\t\t\".vcard\",", "+\t\t\".jpeg\",", "+\t\t\".jp2\",", "+\t\t\".tif\",", "-\t\t\".gif\",", "+\t\t\".pic\",", "+\t\t\".pct\",", "+\t\t\".pict\",", "+\t\t\".pntg\",", "+\t\t\".xbm\",", "+\t\t\".qif\",", "+\t\t\".qtif\",", "+\t\t\".icns\",", "+\t\t\".mov\",", "+\t\t\".qt\",", "+\t\t\".avi\",", "+\t\t\".vfw\",", "+\t\t\".mpg\",", "+\t\t\".mpeg\",", "+\t\t\".m75\",", "+\t\t\".m15\",", "+\t\t\".mp4\",", "+\t\t\".3gp\",", "+\t\t\".3gpp\",", "+\t\t\".3g2\",", "+\t\t\".3gp2\",", "+\t\t\".mp3\",", "+\t\t\".m4a\",", "+\t\t\".m4p\",", "+\t\t\".m4b\",", "+\t\t\".au\",", "+\t\t\".ulw\",", "+\t\t\".snd\",", "+\t\t\".aifc\",", "+\t\t\".aiff\",", "+\t\t\".aif\",", "+\t\t\".aiff\",", "+\t\t\".aif\",", "+\t\t\".caf\",", "+\t\t\".bundle\",", "+\t\t\".app\",", "+\t\t\".plugin\",", "+\t\t\".mdimporter\",", "+\t\t\".wdgt\",", "+\t\t\".cpio\",", "+\t\t\".zip\",", "+\t\t\".framework\",", "+\t\t\".rtfd\",", "+\t\t\".dfont\",", "+\t\t\".otf\",", "+\t\t\".ttf\",", "+\t\t\".ttc\",", "+\t\t\".suit\",", "+\t\t\".pfb\",", "+\t\t\".pfa\",", "+\t\t\".icc\",", "+\t\t\".icm\",", "+\t\t\".pf\",", "+\t\t\".pdf\",", "+\t\t\".ps\",", "+\t\t\".eps\",", "+\t\t\".psd\",", "+\t\t\".ai\",", "+\t\t\".gif\",", "+\t\t\".bmp\",", "+\t\t\".ico\",", "+\t\t\".doc\",", "+\t\t\".xls\",", "+\t\t\".ppt\",", "+\t\t\".wav\",", "+\t\t\".wave\",", "+\t\t\".asf\",", "+\t\t\".wm\",", "+\t\t\".wmv\",", "+\t\t\".wmp\",", "+\t\t\".wma\",", "+\t\t\".asx\",", "+\t\t\".wmx\",", "+\t\t\".wvx\",", "+\t\t\".wax\",", "+\t\t\".key\",", "+\t\t\".kth\",", "+\t\t\".tga\",", "+\t\t\".sgi\",", "+\t\t\".exr\",", "+\t\t\".fpx\",", "+\t\t\".jfx\",", "+\t\t\".efx\",", "+\t\t\".sd2\",", "+\t\t\".rm\",", "+\t\t\".ram\",", "+\t\t\".ra\",", "+\t\t\".smil\",", "+\t\t\".sit\",", "+\t\t\".sitx\",", "+\t\t// Others", "+\t\t\".plist\",", "+\t\t\".nib\",", "+\t\t\".lproj\",", "-}"]}], "num": 29361}
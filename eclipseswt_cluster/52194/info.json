{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c3d852ee04f704355b1ed2ad8631e80", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3a7f2cc2a7c5e691d3714494b641fbf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "6ce82e8d17055101e2f32d529ca61bfe95b8747f", "commitAfterChange": "80349400ab803a052b05e2e66d42920450d869b7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\tString mozillaPath = null;", "-", "+\t\tString mozillaPath = null;", "-\t\t\t * Remove the trailing xpcom lib name from mozillaPath because the NS_InitXPCOM2", "-\t\t\t * invocation requires a directory name only.", "+\t\t\t * Remove the trailing xpcom lib name from mozillaPath because the", "+\t\t\t * Mozilla.initialize and NS_InitXPCOM2 invocations require a directory name only.", "+\t\t}", "+", "+\t\t/* If JavaXPCOM is detected then attempt to initialize it with the XULRunner being used */", "+\t\tif (isXULRunner) {", "+\t\t\ttry {", "+\t\t\t\tClass clazz = Class.forName (\"org.mozilla.xpcom.Mozilla\"); //$NON-NLS-1$", "+\t\t\t\tMethod method = clazz.getMethod (\"getInstance\", new Class[0]); //$NON-NLS-1$", "+\t\t\t\tObject mozilla = method.invoke (null, new Object[0]);", "+\t\t\t\tmethod = clazz.getMethod (\"getComponentManager\", new Class[0]); //$NON-NLS-1$", "+\t\t\t\ttry {", "+\t\t\t\t\tmethod.invoke (mozilla, new Object[0]);", "+\t\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t\t\t/* indicates that JavaXPCOM has not been initialized yet */", "+\t\t\t\t\tmethod = clazz.getMethod (\"initialize\", new Class[] {Class.forName (\"java.io.File\")}); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\tmethod.invoke (mozilla, new Object[] {new File (mozillaPath)});", "+\t\t\t\t}", "+\t\t\t} catch (ClassNotFoundException e) {", "+\t\t\t\t/* JavaXPCOM is not on the classpath */", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\t/* the JavaXPCOM on the classpath does not implement initialize() */", "+\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t} catch (InvocationTargetException e) {", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f2cad2854ff9d539099cfca2d18b5e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "b06cbf7a0e056ef6e3191b7116c2c78a7e2ab1bd", "commitAfterChange": "488ea245d8ed955ed7da346350d79cf2cba672a8", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  public void test_remove$I()", "signatureAfterChange": "  public void test_remove$I()", "diff": ["+\ttry {", "+\t\tlist.remove((int[]) null);", "+\t\tfail(\"No exception thrown for indices == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+\t", "+", "+\t// index > number of elements in list", "+\ttry {", "+\t\tlist.remove(new int[] { 4, 1});", "+\t\tfail(\"No exception thrown\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+\tassertEquals(\":a:\", list.getItems(), items);", "+\ttry {", "+\t\tint[] indices = null;", "+\t\tlist.remove(indices);", "+\t\tfail(\"No exception thrown for indices == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+\t", "+", "+\t// index > number of elements in list", "+\ttry {", "+\t\tlist.remove(new int[] { 4, 1});", "+\t\tfail(\"No exception thrown\");", "+\t} catch (IllegalArgumentException e) {", "+\t} ", "+\tassertEquals(\":h:\", list.getItems(), items);"]}], "num": 52194}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d8db8724036029a129c66e4217e9bef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207b594feefaa5f05ffce62fceb2e600", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "08717ee423464ddae3340bdfb34f7eb6dbebfba3", "commitAfterChange": "ec00ede2f2b3e333572f4331504074ac2a226d75", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "-\t\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "-\t\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "-\t\t\t\t\tC.memset (ptr, 0, size * 2);", "-\t\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "-\t\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_TermEmbedding\", true); //$NON-NLS-1$", "-\t\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "-\t\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "-\t\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "-\t\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "-\t\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "-\t\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "-\t\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "-\t\t\t\t\tint /*long*/ functionPtr = result[0];", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\tC.free (functionLoad.function);", "-\t\t\t\t\tC.free (functionLoad.functionName);", "-\t\t\t\t\tC.free (ptr);", "-\t\t\t\t\tXPCOM.Call (functionPtr);", "+\t\t\t\t\t// the following is intentionally commented, because calling XRE_TermEmbedding", "+\t\t\t\t\t// causes subsequent browser instantiations within the process to fail", "+", "+//\t\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+//\t\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+//\t\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "+//\t\t\t\t\tC.memset (ptr, 0, size * 2);", "+//\t\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+//\t\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_TermEmbedding\", true); //$NON-NLS-1$", "+//\t\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+//\t\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+//\t\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+//\t\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+//\t\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+//\t\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+//\t\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+//\t\t\t\t\tint /*long*/ functionPtr = result[0];", "+//\t\t\t\t\tresult[0] = 0;", "+//\t\t\t\t\tC.free (functionLoad.function);", "+//\t\t\t\t\tC.free (functionLoad.functionName);", "+//\t\t\t\t\tC.free (ptr);", "+//\t\t\t\t\tXPCOM.Call (functionPtr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1133540c6173447975f8cf2efb8537c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "e4adaa4f10e173e6ea3e2e6198b4cba8b36aba32", "commitAfterChange": "910f9ed4e6e4b4be38f36d2cb77edea5d888aa85", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\trc = XPCOM.NS_InitXPCOM2 (0, localFile.getAddress(), LocationProvider.getAddress ());", "+\t\t\tif (IsXULRunner) {", "+\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "+\t\t\t\tC.memset (ptr, 0, size * 2);", "+\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_InitEmbedding\", true); //$NON-NLS-1$", "+\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+\t\t\t\tint /*long*/ functionPtr = result[0];", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tC.free (functionLoad.function);", "+\t\t\t\tC.free (functionLoad.functionName);", "+\t\t\t\tC.free (ptr);", "+\t\t\t\trc = XPCOM.Call (functionPtr, localFile.getAddress (), localFile.getAddress (), LocationProvider.getAddress (), 0, 0);", "+\t\t\t\tif (rc == XPCOM.NS_OK) {", "+\t\t\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\trc = XPCOM.NS_InitXPCOM2 (0, localFile.getAddress(), LocationProvider.getAddress ());", "+\t\t\t}", "-\t\t\tif (IsXULRunner) {", "-\t\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "-\t\t\t}", "+", "+\t\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+\t\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+\t\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "+\t\t\t\t\tC.memset (ptr, 0, size * 2);", "+\t\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+\t\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_TermEmbedding\", true); //$NON-NLS-1$", "+\t\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+\t\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+\t\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+\t\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+\t\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+\t\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+\t\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+\t\t\t\t\tint /*long*/ functionPtr = result[0];", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\tC.free (functionLoad.function);", "+\t\t\t\t\tC.free (functionLoad.functionName);", "+\t\t\t\t\tC.free (ptr);", "+\t\t\t\t\tXPCOM.Call (functionPtr);", "+"]}], "num": 33416}
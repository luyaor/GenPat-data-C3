{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79f4e93fb8ba1c9a37e034e531d55bb1", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76f65cc2a8a2897648db2c6d68cc1bb0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "d76fb41b9e70dedc7a332a519d4398be52fba882", "commitAfterChange": "625aff6472e5c651d29ac6ffda6dde9de0c373aa", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public boolean open ()", "signatureAfterChange": "\r public boolean open ()", "diff": ["-\tdrawRectangles ();\r", "-\tint oldPos = OS.GetMessagePos ();\r", "-\tint oldX = (short) (oldPos & 0xFFFF);\r", "-\tint oldY = (short) (oldPos >> 16);\t\r", "- \t* Tracker behaves like a Dialog with its own OS event loop.\r", "- \t*/\r", "+\t* Create a transparent window that fills the whole screen\r", "+\t* so that we will get mouse/keyboard events that occur\r", "+\t* outside of our visible windows (ie.- \"over\" the desktop)\r", "+\t*/\r", "+\tint displayWidth = OS.GetSystemMetrics (OS.SM_CXSCREEN);\r", "+\tint displayHeight = OS.GetSystemMetrics (OS.SM_CYSCREEN);\r", "+\tint hwndTransparent = OS.CreateWindowEx (\r", "+\t\tOS.WS_EX_TRANSPARENT,\r", "+\t\tdisplay.windowClass,\r", "+\t\tnull,\r", "+\t\tOS.WS_POPUP | OS.WS_VISIBLE,\r", "+\t\t0,0,\r", "+\t\tdisplayWidth, displayHeight,\r", "+\t\t0,\r", "+\t\t0,\r", "+\t\tOS.GetModuleHandle (null),\r", "+\t\tnull);\r", "+\tdrawRectangles (rectangles);\r", "+\tPoint cursorPos;\r", "+\tif ((style & SWT.MENU) != 0) {\r", "+\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\tcursorPos = adjustResizeCursor ();\r", "+\t\t} else {\r", "+\t\t\tcursorPos = adjustMoveCursor ();\r", "+\t\t}\r", "+\t} else {\r", "+\t\tPOINT pt = new POINT ();\r", "+\t\tOS.GetCursorPos (pt);\r", "+\t\tcursorPos = new Point (pt.x, pt.y);\r", "+\t}\r", "+\tint oldX = cursorPos.x, oldY = cursorPos.y;\r", "+\tRectangle screenBounds = new Rectangle (0, 0, displayWidth, displayHeight);\r", "+\t/*\r", "+\t* Tracker behaves like a Dialog with its own OS event loop.\r", "+\t*/\r", "+\t\t\t\tsetCursor ();\r", "-\t\t\t\t\tdrawRectangles ();\r", "+\t\t\t\t\tdrawRectangles (rectangles);\r", "-\t\t\t\t\t\tresizeRectangles (newX - oldX, newY - oldY);\r", "+\t\t\t\t\t\tresizeRectangles (newX - oldX, newY - oldY, screenBounds);\r", "+\t\t\t\t\t\tcursorPos = adjustResizeCursor ();\r", "+\t\t\t\t\t\tnewX = cursorPos.x; newY = cursorPos.y;\r", "-\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);\r", "+\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY, screenBounds);\r", "-\t\t\t\t\tdrawRectangles ();\r", "-\t\t\t\t\toldX = newX;\r", "-\t\t\t\t\toldY = newY;\r", "+\t\t\t\t\tdrawRectangles (rectangles);\r", "+\t\t\t\t\toldX = newX;  oldY = newY;\r", "-\t\t\t\tint stepSize = OS.GetKeyState (OS.VK_CONTROL) < 0 ? 2 : 10;\r", "+\t\t\t\tsetCursor ();\r", "+\t\t\t\tint stepSize = OS.GetKeyState (OS.VK_CONTROL) < 0 ? STEPSIZE_SMALL : STEPSIZE_LARGE;\r", "-\t\t\t\t\t\tif (useAllDirections() || ((style & SWT.LEFT) != 0)) {\r", "-\t\t\t\t\t\t\txChange = -stepSize;\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\t\txChange = -stepSize;\r", "-\t\t\t\t\t\tif (useAllDirections() || ((style & SWT.RIGHT) != 0)) {\r", "-\t\t\t\t\t\t\txChange = stepSize;\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\t\txChange = stepSize;\r", "-\t\t\t\t\t\tif (useAllDirections() || ((style & SWT.UP) != 0)) {\r", "-\t\t\t\t\t\t\tyChange = -stepSize;\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tyChange = -stepSize;\r", "-\t\t\t\t\t\tif (useAllDirections() || ((style & SWT.DOWN) != 0)) {\r", "-\t\t\t\t\t\t\tyChange = stepSize;\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tyChange = stepSize;\r", "-\t\t\t\t\tdrawRectangles ();\r", "+\t\t\t\t\tdrawRectangles (rectangles);\r", "-\t\t\t\t\t\tresizeRectangles (xChange, yChange);\r", "+\t\t\t\t\t\tresizeRectangles (xChange, yChange, screenBounds);\r", "+\t\t\t\t\t\tcursorPos = adjustResizeCursor ();\r", "-\t\t\t\t\t\tmoveRectangles (xChange, yChange);\r", "+\t\t\t\t\t\tmoveRectangles (xChange, yChange, screenBounds);\r", "+\t\t\t\t\t\tcursorPos = adjustMoveCursor ();\r", "-\t\t\t\t\tdrawRectangles ();\r", "-\t\t\t\t\tRectangle bounds = computeBounds();\r", "-\t\t\t\t\t\tnewX = bounds.x + bounds.width / 2;\r", "-\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {\r", "-\t\t\t\t\t\tnewY = bounds.y + bounds.height / 2;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tnewY = bounds.y;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tPOINT pt = new POINT ();\r", "-\t\t\t\t\tpt.x = newX;  pt.y = newY;\r", "-\t\t\t\t\t/*\r", "-\t\t\t\t\t * Convert to screen coordinates iff needed\r", "-\t\t\t\t\t */\r", "-\t\t\t\t\tif (parent != null) {\r", "-\t\t\t\t\t\tOS.ClientToScreen (parent.handle, pt);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tOS.SetCursorPos (pt.x,pt.y);\r", "-\t\t\t\t\toldX = pt.x;  oldY = pt.y;\r", "+\t\t\t\t\tdrawRectangles (rectangles);\r", "+\t\t\t\t\toldX = cursorPos.x;  oldY = cursorPos.y;\r", "-\t\t\t\t\r", "-\tdrawRectangles ();\r", "+\tdrawRectangles (rectangles);\r", "+\tOS.DestroyWindow (hwndTransparent);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b33322ff5f1e0a3ebaf50d66869f10bb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "d76fb41b9e70dedc7a332a519d4398be52fba882", "commitAfterChange": "625aff6472e5c651d29ac6ffda6dde9de0c373aa", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public boolean open ()", "signatureAfterChange": "\r public boolean open ()", "diff": ["-\tcheckWidget();\r", "+\tcheckWidget ();\r", "-\tXAnyEvent xEvent = new XAnyEvent ();\r", "+\tint [] oldX = new int [1], oldY = new int [1];\r", "-\tint [] newX = new int [1], newY = new int [1], oldX = new int [1], oldY = new int [1];\r", "+\tPoint cursorPos;\r", "+\tif ((style & SWT.MENU) != 0) {\r", "+\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\tcursorPos = adjustResizeCursor (xDisplay, xWindow);\r", "+\t\t} else {\r", "+\t\t\tcursorPos = adjustMoveCursor (xDisplay, xWindow);\r", "+\t\t}\r", "+\t\toldX [0] = cursorPos.x;  oldY [0] = cursorPos.y;\r", "+\t} else {\r", "+\t\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, oldX, oldY, unused, unused, unused);\r", "+\t}\r", "+\t\t\r", "+\tXAnyEvent xEvent = new XAnyEvent ();\r", "+\tint [] newX = new int [1], newY = new int [1];\r", "-\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, oldX, oldY, unused, unused, unused);\r", "-\t\t\t\t\tEvent event = new Event();\r", "+\t\t\t\t\tEvent event = new Event ();\r", "-\t\t\t\t\t\tresizeRectangles(newX [0] - oldX [0], newY [0] - oldY [0]);\r", "+\t\t\t\t\t\tresizeRectangles (newX [0] - oldX [0], newY [0] - oldY [0], null);\r", "+\t\t\t\t\t\tcursorPos = adjustResizeCursor (xDisplay, xWindow);\r", "+\t\t\t\t\t\tnewX [0] = cursorPos.x; newY [0] = cursorPos.y;\r", "-\t\t\t\t\t\tmoveRectangles(newX [0] - oldX [0], newY [0] - oldY [0]);\r", "+\t\t\t\t\t\tmoveRectangles (newX [0] - oldX [0], newY [0] - oldY [0], null);\r", "-\t\t\t\t\tint stepSize = ((keyEvent.state & OS.ControlMask) != 0) ? 2 : 10;\r", "+\t\t\t\t\tint stepSize = ((keyEvent.state & OS.ControlMask) != 0) ? STEPSIZE_SMALL : STEPSIZE_LARGE;\r", "-\t\t\t\t\t\t\tif ((useAllDirections() | (style & SWT.LEFT) != 0)) {\r", "-\t\t\t\t\t\t\t\txChange = -stepSize;\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\txChange = -stepSize;\r", "-\t\t\t\t\t\t\tif ((useAllDirections() | (style & SWT.RIGHT) != 0)) {\r", "-\t\t\t\t\t\t\t\txChange = stepSize;\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\txChange = stepSize;\r", "-\t\t\t\t\t\t\tif ((useAllDirections() | (style & SWT.UP) != 0)) {\r", "-\t\t\t\t\t\t\t\tyChange = -stepSize;\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tyChange = -stepSize;\r", "-\t\t\t\t\t\t\tif ((useAllDirections() | (style & SWT.DOWN) != 0)) {\r", "-\t\t\t\t\t\t\t\tyChange = stepSize;\r", "-\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tyChange = stepSize;\r", "-\t\t\t\t\t\tEvent event = new Event();\r", "+\t\t\t\t\t\tEvent event = new Event ();\r", "-\t\t\t\t\t\t\tresizeRectangles(xChange, yChange);\r", "+\t\t\t\t\t\t\tresizeRectangles (xChange, yChange, null);\r", "+\t\t\t\t\t\t\tcursorPos = adjustResizeCursor (xDisplay, xWindow);\r", "-\t\t\t\t\t\t\tmoveRectangles(xChange, yChange);\r", "+\t\t\t\t\t\t\tmoveRectangles (xChange, yChange, null);\r", "+\t\t\t\t\t\t\tcursorPos = adjustMoveCursor (xDisplay, xWindow);\r", "-\t\t\t\t\t\tRectangle bounds = computeBounds();\r", "-\t\t\t\t\t\tnewX [0] = bounds.x + bounds.width / 2;\r", "-\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {\r", "-\t\t\t\t\t\t\tnewY [0] = bounds.y + bounds.height / 2;\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tnewY [0] = bounds.y;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tOS.XWarpPointer (xDisplay, SWT.NONE, xWindow, 0, 0, 0, 0, newX [0], newY [0]);\r", "-\t\t\t\t\t\t/*\r", "-\t\t\t\t\t\t * The call to XWarpPointer does not always place the pointer on the\r", "-\t\t\t\t\t\t * exact location that is specified, so do a query (below) to get the\r", "-\t\t\t\t\t\t * actual location of the pointer after it has been moved.\r", "-\t\t\t\t\t\t */\r", "-\t\t\t\t\t\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, newX, newY, unused, unused, unused);\r", "-\t\t\t\t\t\toldX[0] = newX[0];  oldY[0] = newY[0];\r", "+\t\t\t\t\t\toldX[0] = cursorPos.x;  oldY[0] = cursorPos.y;\r"]}], "num": 14692}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87ee5b807c4953407bb9d150ed57baa4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2160dd9bb5247ca65b898baddaa8b8b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "a7944d23da5f7f6439cdfdbf094edb3b7ade24da", "commitAfterChange": "d58da3389369b13fba4e628f2d808b5cc1a66164", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  LRESULT wmMouseMove (int hwnd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmMouseMove (int hwnd, int wParam, int lParam)", "diff": ["-\tint pos = OS.GetMessagePos ();", "-\tif (pos != display.lastMouse) {", "-\t\tif (!OS.IsWinCE) {", "-\t\t\tboolean mouseEnter = hooks (SWT.MouseEnter) || display.filters (SWT.MouseEnter);", "-\t\t\tboolean mouseExit = hooks (SWT.MouseExit) || display.filters (SWT.MouseExit);", "-\t\t\tboolean mouseHover = hooks (SWT.MouseHover) || display.filters (SWT.MouseHover);", "-\t\t\tif (mouseEnter || mouseExit || mouseHover) {", "-\t\t\t\tTRACKMOUSEEVENT lpEventTrack = new TRACKMOUSEEVENT ();", "-\t\t\t\tlpEventTrack.cbSize = TRACKMOUSEEVENT.sizeof;", "-\t\t\t\tlpEventTrack.dwFlags = OS.TME_QUERY;", "+\tif (!OS.IsWinCE) {", "+\t\tboolean mouseEnter = hooks (SWT.MouseEnter) || display.filters (SWT.MouseEnter);", "+\t\tboolean mouseExit = hooks (SWT.MouseExit) || display.filters (SWT.MouseExit);", "+\t\tboolean mouseHover = hooks (SWT.MouseHover) || display.filters (SWT.MouseHover);", "+\t\tif (mouseEnter || mouseExit || mouseHover) {", "+\t\t\tTRACKMOUSEEVENT lpEventTrack = new TRACKMOUSEEVENT ();", "+\t\t\tlpEventTrack.cbSize = TRACKMOUSEEVENT.sizeof;", "+\t\t\tlpEventTrack.dwFlags = OS.TME_QUERY;", "+\t\t\tlpEventTrack.hwndTrack = hwnd;", "+\t\t\tOS.TrackMouseEvent (lpEventTrack);", "+\t\t\tif (lpEventTrack.dwFlags == 0) {", "+\t\t\t\tlpEventTrack.dwFlags = OS.TME_LEAVE | OS.TME_HOVER;", "-\t\t\t\tif (lpEventTrack.dwFlags == 0) {", "-\t\t\t\t\tlpEventTrack.dwFlags = OS.TME_LEAVE | OS.TME_HOVER;", "-\t\t\t\t\tlpEventTrack.hwndTrack = hwnd;", "-\t\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "-\t\t\t\t\tif (mouseEnter) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Force all outstanding WM_MOUSELEAVE messages to be dispatched before", "-\t\t\t\t\t\t* issuing a mouse enter.  This causes mouse exit events to be processed", "-\t\t\t\t\t\t* before mouse enter events.  Note that WM_MOUSELEAVE is posted to the", "-\t\t\t\t\t\t* event queue by TrackMouseEvent().", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tMSG msg = new MSG ();", "-\t\t\t\t\t\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "-\t\t\t\t\t\twhile (OS.PeekMessage (msg, 0, OS.WM_MOUSELEAVE, OS.WM_MOUSELEAVE, flags)) {", "-\t\t\t\t\t\t\tOS.TranslateMessage (msg);", "-\t\t\t\t\t\t\tOS.DispatchMessage (msg);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsendMouseEvent (SWT.MouseEnter, 0, hwnd, OS.WM_MOUSEMOVE, wParam, lParam);", "+\t\t\t\tif (mouseEnter) {", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Force all outstanding WM_MOUSELEAVE messages to be dispatched before", "+\t\t\t\t\t* issuing a mouse enter.  This causes mouse exit events to be processed", "+\t\t\t\t\t* before mouse enter events.  Note that WM_MOUSELEAVE is posted to the", "+\t\t\t\t\t* event queue by TrackMouseEvent().", "+\t\t\t\t\t*/", "+\t\t\t\t\tMSG msg = new MSG ();", "+\t\t\t\t\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "+\t\t\t\t\twhile (OS.PeekMessage (msg, 0, OS.WM_MOUSELEAVE, OS.WM_MOUSELEAVE, flags)) {", "+\t\t\t\t\t\tOS.TranslateMessage (msg);", "+\t\t\t\t\t\tOS.DispatchMessage (msg);", "-\t\t\t\t} else {", "-\t\t\t\t\tlpEventTrack.dwFlags = OS.TME_HOVER;", "-\t\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "+\t\t\t\t\tsendMouseEvent (SWT.MouseEnter, 0, hwnd, OS.WM_MOUSEMOVE, wParam, lParam);", "+\t\t\t} else {", "+\t\t\t\tlpEventTrack.dwFlags = OS.TME_HOVER;", "+\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "+\t}", "+\tint pos = OS.GetMessagePos ();", "+\tif (pos != display.lastMouse) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3566ea110c8e6888ae71ab8d84ec587", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "40db15170a2341925dc6e99e6110c2cce7e031e1", "commitAfterChange": "279ca6e29f0e667dabbf529c196316c1a7e839a2", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 73, "signatureBeforeChange": "  LRESULT wmMouseMove (int hwnd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmMouseMove (int hwnd, int wParam, int lParam)", "diff": ["-\tif (!OS.IsWinCE) {", "-\t\tboolean mouseEnter = hooks (SWT.MouseEnter) || display.filters (SWT.MouseEnter);", "-\t\tboolean mouseExit = hooks (SWT.MouseExit) || display.filters (SWT.MouseExit);", "-\t\tboolean mouseHover = hooks (SWT.MouseHover) || display.filters (SWT.MouseHover);", "-\t\tif (mouseEnter || mouseExit || mouseHover) {", "-\t\t\tTRACKMOUSEEVENT lpEventTrack = new TRACKMOUSEEVENT ();", "-\t\t\tlpEventTrack.cbSize = TRACKMOUSEEVENT.sizeof;", "-\t\t\tlpEventTrack.dwFlags = OS.TME_QUERY;", "-\t\t\tlpEventTrack.hwndTrack = hwnd;", "-\t\t\tOS.TrackMouseEvent (lpEventTrack);", "-\t\t\tif (lpEventTrack.dwFlags == 0) {", "-\t\t\t\tlpEventTrack.dwFlags = OS.TME_LEAVE | OS.TME_HOVER;", "+\tint pos = OS.GetMessagePos ();", "+\tif (pos != display.lastMouse || display.captureChanged) {", "+\t\tif (!OS.IsWinCE) {", "+\t\t\tboolean mouseEnter = hooks (SWT.MouseEnter) || display.filters (SWT.MouseEnter);", "+\t\t\tboolean mouseExit = hooks (SWT.MouseExit) || display.filters (SWT.MouseExit);", "+\t\t\tboolean mouseHover = hooks (SWT.MouseHover) || display.filters (SWT.MouseHover);", "+\t\t\tif (mouseEnter || mouseExit || mouseHover) {", "+\t\t\t\tTRACKMOUSEEVENT lpEventTrack = new TRACKMOUSEEVENT ();", "+\t\t\t\tlpEventTrack.cbSize = TRACKMOUSEEVENT.sizeof;", "+\t\t\t\tlpEventTrack.dwFlags = OS.TME_QUERY;", "-\t\t\t\tif (mouseEnter) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Force all outstanding WM_MOUSELEAVE messages to be dispatched before", "-\t\t\t\t\t* issuing a mouse enter.  This causes mouse exit events to be processed", "-\t\t\t\t\t* before mouse enter events.  Note that WM_MOUSELEAVE is posted to the", "-\t\t\t\t\t* event queue by TrackMouseEvent().", "-\t\t\t\t\t*/", "-\t\t\t\t\tMSG msg = new MSG ();", "-\t\t\t\t\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "-\t\t\t\t\twhile (OS.PeekMessage (msg, 0, OS.WM_MOUSELEAVE, OS.WM_MOUSELEAVE, flags)) {", "-\t\t\t\t\t\tOS.TranslateMessage (msg);", "-\t\t\t\t\t\tOS.DispatchMessage (msg);", "+\t\t\t\tif (lpEventTrack.dwFlags == 0) {", "+\t\t\t\t\tlpEventTrack.dwFlags = OS.TME_LEAVE | OS.TME_HOVER;", "+\t\t\t\t\tlpEventTrack.hwndTrack = hwnd;", "+\t\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "+\t\t\t\t\tif (mouseEnter) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Force all outstanding WM_MOUSELEAVE messages to be dispatched before", "+\t\t\t\t\t\t* issuing a mouse enter.  This causes mouse exit events to be processed", "+\t\t\t\t\t\t* before mouse enter events.  Note that WM_MOUSELEAVE is posted to the", "+\t\t\t\t\t\t* event queue by TrackMouseEvent().", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tMSG msg = new MSG ();", "+\t\t\t\t\t\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "+\t\t\t\t\t\twhile (OS.PeekMessage (msg, 0, OS.WM_MOUSELEAVE, OS.WM_MOUSELEAVE, flags)) {", "+\t\t\t\t\t\t\tOS.TranslateMessage (msg);", "+\t\t\t\t\t\t\tOS.DispatchMessage (msg);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsendMouseEvent (SWT.MouseEnter, 0, hwnd, OS.WM_MOUSEMOVE, wParam, lParam);", "-\t\t\t\t\tsendMouseEvent (SWT.MouseEnter, 0, hwnd, OS.WM_MOUSEMOVE, wParam, lParam);", "+\t\t\t\t} else {", "+\t\t\t\t\tlpEventTrack.dwFlags = OS.TME_HOVER;", "+\t\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "-\t\t\t} else {", "-\t\t\t\tlpEventTrack.dwFlags = OS.TME_HOVER;", "-\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "-\t}", "-\tint pos = OS.GetMessagePos ();", "-\tif (pos != display.lastMouse) {", "-\t\tdisplay.lastMouse = pos;", "-\t\tsendMouseEvent (SWT.MouseMove, 0, hwnd, OS.WM_MOUSEMOVE, wParam, lParam);", "-\t}", "+\t\tif (pos != display.lastMouse) {", "+\t\t\tdisplay.lastMouse = pos;", "+\t\t\tsendMouseEvent (SWT.MouseMove, 0, hwnd, OS.WM_MOUSEMOVE, wParam, lParam);", "+\t\t}", "+\t} ", "+\tdisplay.captureChanged = false;"]}], "num": 23865}
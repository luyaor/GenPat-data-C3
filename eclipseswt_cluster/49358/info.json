{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17b99c6ec1b91475cdf607158343812e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5c194619cb0f5ee34e65482f4f8fa6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/performance/Test_org_eclipse_swt_graphics_GC.java", "commitBeforeChange": "851bcd033cd276980fb8346e37d463f101f050e0", "commitAfterChange": "8af96b2b47c5e6fbdb727b0e6f06b43d477a095c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void test_drawImageLorg_eclipse_swt_graphics_ImageIIIIIIII()", "signatureAfterChange": "  public void test_drawImageLorg_eclipse_swt_graphics_ImageIIIIIIII()", "diff": ["-\tColor c1 = new Color(display, 255, 0, 0);", "-\tColor c2 = new Color(display, 0, 0, 0);", "-\tColor c3 = new Color(display, 255, 255, 0);", "-\t", "-\tPaletteData paletteData = new PaletteData(new RGB[] {c1.getRGB(), c2.getRGB(), c3.getRGB()});", "-\tImageData data = new ImageData(30,30, 8, paletteData);", "-\tfor (int y = 0; y < data.height; y++) {", "-\t\tfor (int x = 0; x < data.width; x++) {", "-\t\t\tif (x > y) data.setPixel(x, y, paletteData.getPixel(c1.getRGB()));", "-\t\t\telse if (x < y) data.setPixel(x, y, paletteData.getPixel(c2.getRGB()));", "-\t\t\telse data.setPixel(x, y, paletteData.getPixel(c3.getRGB()));", "-\t\t}", "-\t}", "-\tImage image = new Image(display, data);", "-\tdata = image.getImageData();", "-\tdata.transparentPixel = paletteData.getPixel(c1.getRGB());", "-\tImage imageTransparent = new Image(display, data);", "-\tdata.transparentPixel = -1;", "-\tfor (int y = 0; y < data.height; y++) {", "-\t\tfor (int x = 0; x < data.width; x++) {", "-\t\t\tdata.setAlpha(x, y, 127);", "-\t\t}", "-\t}\t\t", "-\tImage imageAlpha = new Image(display, data);", "-\t\t\t\t\t\t\t", "-\tgc.drawImage(image, 10, 5, 20, 15, 100, 120, 50, 60);", "-\tgc.drawImage(imageTransparent, 10, 5, 20, 15, 100, 120, 10, 10);", "-\tgc.drawImage(imageAlpha, 10, 5, 20, 15, 100, 120, 20, 15);", "-\ttry {", "-\t\tgc.drawImage(null, 10, 5, 20, 15, 100, 120, 50, 60);", "-\t\tfail(\"No exception thrown\"); //should never get here", "-\t}", "-\tcatch (IllegalArgumentException e) {", "-\t}", "-\timage.dispose();", "-\timageAlpha.dispose();", "-\timageTransparent.dispose();", "+//\tColor c1 = new Color(display, 255, 0, 0);", "+//\tColor c2 = new Color(display, 0, 0, 0);", "+//\tColor c3 = new Color(display, 255, 255, 0);", "+//\t", "+//\tPaletteData paletteData = new PaletteData(new RGB[] {c1.getRGB(), c2.getRGB(), c3.getRGB()});", "+//\tImageData data = new ImageData(30,30, 8, paletteData);", "+//\tfor (int y = 0; y < data.height; y++) {", "+//\t\tfor (int x = 0; x < data.width; x++) {", "+//\t\t\tif (x > y) data.setPixel(x, y, paletteData.getPixel(c1.getRGB()));", "+//\t\t\telse if (x < y) data.setPixel(x, y, paletteData.getPixel(c2.getRGB()));", "+//\t\t\telse data.setPixel(x, y, paletteData.getPixel(c3.getRGB()));", "+//\t\t}", "+//\t}", "+//\tImage image = new Image(display, data);", "+//\tdata = image.getImageData();", "+//\tdata.transparentPixel = paletteData.getPixel(c1.getRGB());", "+//\tImage imageTransparent = new Image(display, data);", "+//\tdata.transparentPixel = -1;", "+//\tfor (int y = 0; y < data.height; y++) {", "+//\t\tfor (int x = 0; x < data.width; x++) {", "+//\t\t\tdata.setAlpha(x, y, 127);", "+//\t\t}", "+//\t}\t\t", "+//\tImage imageAlpha = new Image(display, data);", "+//\t\t\t\t\t\t\t", "+//\tgc.drawImage(image, 10, 5, 20, 15, 100, 120, 50, 60);", "+//\tgc.drawImage(imageTransparent, 10, 5, 20, 15, 100, 120, 10, 10);", "+//\tgc.drawImage(imageAlpha, 10, 5, 20, 15, 100, 120, 20, 15);", "+//\ttry {", "+//\t\tgc.drawImage(null, 10, 5, 20, 15, 100, 120, 50, 60);", "+//\t\tfail(\"No exception thrown\"); //should never get here", "+//\t}", "+//\tcatch (IllegalArgumentException e) {", "+//\t}", "+//\timage.dispose();", "+//\timageAlpha.dispose();", "+//\timageTransparent.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5bca68b71ec6f5a9aff96551968ca86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "5f7f702707f302b75507f5daec7d9dd49e3a4042", "commitAfterChange": "cb24623ebaa03ea200027efdd5c87647a2d2d515", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLjava_lang_String()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLjava_lang_String()", "diff": ["-\tString filename = null;", "+\tString fileName = null;", "-\t\tImage image = new Image(display, filename);", "+\t\tImage image = new Image(display, fileName);", "-\t\tfail(\"No exception thrown for filename == null\");", "+\t\tfail(\"No exception thrown for file name == null\");", "+\t\tassertEquals(\"Incorrect exception thrown for file name == null\", SWT.ERROR_NULL_ARGUMENT, e);", "-\t// j2se and j2me(cdc) can load from a filename but, j2me(cldc) throws an exception", "+\t// j2se and j2me(cdc) can load from a file name but, j2me(cldc) throws an exception", "+\tif (!isJ2ME()) {", "+\t\ttry {", "+\t\t\tString pathName = getPath(\"empty.txt\");", "+\t\t\tImage image = new Image(display, pathName);", "+\t\t\timage.dispose();", "+\t\t\tfail(\"No exception thrown for invalid file name\");", "+\t\t} catch (SWTException e) {", "+\t//TODO: test if correct exception is thrown. See bug 70160\t\t\t", "+\t//\t\tassertEquals(\"Incorrect exception thrown for invalid file name\", SWT.ERROR_INVALID_IMAGE, e);", "+\t\t}", "+\t", "+\t\tint numFormats = SwtTestCase.imageFormats.length;", "+\t\tfileName = SwtTestCase.invalidImageFilenames[0];", "+\t\tDisplay[] displays = {display, null};", "+\t\tfor (int j = 0; j < displays.length; j++) {", "+\t\t\tDisplay tempDisplay = displays[j];", "+\t\t\tfor (int i=0; i<numFormats; i++) {", "+\t\t\t\tString format = SwtTestCase.imageFormats[i];", "+\t", "+\t\t\t\ttry {", "+\t\t\t\t\tString pathName = getPath(fileName + \".\" + format);", "+\t\t\t\t\tImage image = new Image(display, pathName);", "+\t\t\t\t\timage.dispose();", "+\t\t\t\t\tfail(\"No exception thrown for invalid file name\");", "+\t\t\t\t} catch (SWTException e) {", "+\t//\t\t\t\tTODO: test if correct exception is thrown. See bug 70167\t\t\t\t\t", "+\t//\t\t\t\tassertEquals(\"Incorrect exception thrown for invalid image file name\", SWT.ERROR_INVALID_IMAGE, e);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t", "+\t\ttry {", "+\t\t\tString pathName = getPath(SwtTestCase.invalidImageFilenames[1]);", "+\t\t\tImage image = new Image(display, pathName);", "+\t\t\timage.dispose();", "+\t\t\tfail(\"No exception thrown for invalid file name\");", "+\t\t} catch (SWTException e) {", "+\t\t\tassertEquals(\"Incorrect exception thrown for invalid image file name\", SWT.ERROR_INVALID_IMAGE, e);", "+\t\t}\t\t", "+\t", "+\t\t// create valid images", "+\t\tfor (int j = 0; j < displays.length; j++) {", "+\t\t\tDisplay tempDisplay = displays[j];", "+\t\t\tint numFileNames = SwtTestCase.imageFilenames.length;", "+\t\t\tfor (int k=0; k<numFileNames; k++) {", "+\t\t\t\tfileName = SwtTestCase.imageFilenames[k];", "+\t\t\t\tfor (int i=0; i<numFormats; i++) {", "+\t\t\t\t\tString format = SwtTestCase.imageFormats[i];", "+\t\t\t\t\tString pathName = getPath(fileName + \".\" + format);", "+\t\t\t\t\tImage image = new Image(display, pathName);", "+\t\t\t\t\timage.dispose();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 49358}
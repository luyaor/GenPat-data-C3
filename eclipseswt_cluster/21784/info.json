{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a5ce5e0936b69979e2d2372abc0b694c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58f47756e1a5e4a801aec3e3bb6434d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "4554e604711848107217e581c2ea19dd3a200ccc", "commitAfterChange": "943950684f8a4ea21db196bca596eabbe07db1ea", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public Rectangle getImageBounds (int columnIndex)", "signatureAfterChange": " public Rectangle getImageBounds (int columnIndex)", "diff": ["+\tint orderedIndex = parent.columns.length == 0 ? 0 : parent.columns [columnIndex].getOrderIndex ();", "+", "-\t\treturn new Rectangle (startX, y + padding, 0, imageSpaceY);", "+\t\tint width = 0;", "+\t\t/* for ordered column 0, image space is reserved even for null images */", "+\t\tif (orderedIndex == 0) width = parent.orderedCol0imageWidth;\t", "+\t\treturn new Rectangle (startX, y + padding, width, imageSpaceY);", "-\t", "+", "-\t/* ", "-\t * For column 0 all images have the same width, which may be larger or smaller", "-\t * than the image to be drawn here.  Therefore the image bounds to draw must be", "-\t * specified.", "-\t */", "-\tif (columnIndex == 0) {", "-\t\tint imageSpaceX = parent.col0ImageWidth;", "-\t\tdrawWidth = Math.min (imageSpaceX, imageBounds.width);", "+\tif (orderedIndex == 0) {", "+\t\t/* for ordered column 0 all images have the same width */", "+\t\tdrawWidth = parent.orderedCol0imageWidth;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69a67ddd0a029c72e444da002f7fbd78", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "e1c2a8ee201d1582cd315713ea1eef093f129cd6", "commitAfterChange": "faeb48eedc6585311aac3197b7c3be7968c861d2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "  int trayItemProc (int target, int userData, int selector, int arg0)", "signatureAfterChange": "  int trayItemProc (int target, int userData, int selector, int arg0)", "diff": ["+", "-\t\t\thighlight = true;", "-\t\t\tCocoa.objc_msgSend (view, Cocoa.S_setNeedsDisplay, 1);", "-\t\t\tint clickCount = Cocoa.objc_msgSend (arg0, Cocoa.S_clickCount);", "-\t\t\tpostEvent (clickCount == 2 ? SWT.DefaultSelection : SWT.Selection);", "+\t\t\tint mask = Cocoa.objc_msgSend (arg0, Cocoa.S_modifierFlags) & Cocoa.NSDeviceIndependentModifierFlagsMask;", "+\t\t\tif ((mask & Cocoa.NSControlKeyMask) == mask) {", "+\t\t\t\tshowMenu ();", "+\t\t\t} else {", "+\t\t\t\thighlight = true;", "+\t\t\t\tCocoa.objc_msgSend (view, Cocoa.S_setNeedsDisplay, 1);", "+\t\t\t\tint clickCount = Cocoa.objc_msgSend (arg0, Cocoa.S_clickCount);", "+\t\t\t\tpostEvent (clickCount == 2 ? SWT.DefaultSelection : SWT.Selection);", "+\t\t\t}", "-\t\t\t_setToolTipText (null);", "-\t\t\tsendEvent (SWT.MenuDetect);", "-\t\t\tif (isDisposed ()) break;", "-\t\t\tdisplay.runPopups ();", "-\t\t\tif (isDisposed ()) break;", "-\t\t\t_setToolTipText (toolTipText);", "+\t\t\tshowMenu ();"]}], "num": 21784}
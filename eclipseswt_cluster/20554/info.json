{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4570024205503f1c9c5971049b07fefc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207b594feefaa5f05ffce62fceb2e600", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "08717ee423464ddae3340bdfb34f7eb6dbebfba3", "commitAfterChange": "ec00ede2f2b3e333572f4331504074ac2a226d75", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "-\t\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "-\t\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "-\t\t\t\t\tC.memset (ptr, 0, size * 2);", "-\t\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "-\t\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_TermEmbedding\", true); //$NON-NLS-1$", "-\t\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "-\t\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "-\t\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "-\t\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "-\t\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "-\t\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "-\t\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "-\t\t\t\t\tint /*long*/ functionPtr = result[0];", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\tC.free (functionLoad.function);", "-\t\t\t\t\tC.free (functionLoad.functionName);", "-\t\t\t\t\tC.free (ptr);", "-\t\t\t\t\tXPCOM.Call (functionPtr);", "+\t\t\t\t\t// the following is intentionally commented, because calling XRE_TermEmbedding", "+\t\t\t\t\t// causes subsequent browser instantiations within the process to fail", "+", "+//\t\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+//\t\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+//\t\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "+//\t\t\t\t\tC.memset (ptr, 0, size * 2);", "+//\t\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+//\t\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_TermEmbedding\", true); //$NON-NLS-1$", "+//\t\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+//\t\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+//\t\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+//\t\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+//\t\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+//\t\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+//\t\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+//\t\t\t\t\tint /*long*/ functionPtr = result[0];", "+//\t\t\t\t\tresult[0] = 0;", "+//\t\t\t\t\tC.free (functionLoad.function);", "+//\t\t\t\t\tC.free (functionLoad.functionName);", "+//\t\t\t\t\tC.free (ptr);", "+//\t\t\t\t\tXPCOM.Call (functionPtr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2773a60ce81649b161983cf4cc15de53", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "770424cb90ac09b444a2b31992d2c7b5853208d6", "commitAfterChange": "270369a2774c9adb72d20072ee39a162882a5dda", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, 0, height, 0, bmi, OS.DIB_RGB_COLORS);", "+\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, 0, height, null, bmi, OS.DIB_RGB_COLORS);", "-\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\t\tint /*long*/ lpvBits = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, imageSize);", "-\t\t\tif (lpvBits == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, 0, height, lpvBits, bmi, OS.DIB_RGB_COLORS);", "-\t\t\tOS.MoveMemory(data, lpvBits, imageSize);", "+\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, 0, height, data, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, height, height, lpvBits, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tOS.MoveMemory(maskData, lpvBits, imageSize);", "+\t\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, height, height, maskData, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tOS.GetDIBits(hBitmapDC, info.hbmMask, 0, height, 0, bmi, OS.DIB_RGB_COLORS);", "+\t\t\t\tOS.GetDIBits(hBitmapDC, info.hbmMask, 0, height, null, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tint /*long*/ lpvMaskBits = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, imageSize);", "-\t\t\t\tif (lpvMaskBits == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\tOS.GetDIBits(hBitmapDC, info.hbmMask, 0, height, lpvMaskBits, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tOS.MoveMemory(maskData, lpvMaskBits, imageSize);\t", "-\t\t\t\tOS.HeapFree(hHeap, 0, lpvMaskBits);", "+\t\t\t\tOS.GetDIBits(hBitmapDC, info.hbmMask, 0, height, maskData, bmi, OS.DIB_RGB_COLORS);", "-\t\t\tOS.HeapFree(hHeap, 0, lpvBits);", "-\t\t\t\tOS.GetDIBits(hBitmapDC, handle, 0, height, 0, bmi, OS.DIB_RGB_COLORS);", "+\t\t\t\tOS.GetDIBits(hBitmapDC, handle, 0, height, null, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\t\t\tint /*long*/ lpvBits = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, imageSize);", "-\t\t\t\tif (lpvBits == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\tOS.GetDIBits(hBitmapDC, handle, 0, height, lpvBits, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tOS.MoveMemory(data, lpvBits, imageSize);", "-\t\t\t\tOS.HeapFree(hHeap, 0, lpvBits);", "+\t\t\t\tOS.GetDIBits(hBitmapDC, handle, 0, height, data, bmi, OS.DIB_RGB_COLORS);"]}], "num": 20554}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97faccc600c2b65e00157e0581fdce14", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8a764c2f298304778f19c790d0c85e4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer2.java", "commitBeforeChange": "0eca40a26667c3712617b5dd23e67af76bcbab4d", "commitAfterChange": "c345d69dc06c2a69d5f698a12d1c7890b32841ad", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " private StyleRange[] getVisualLineStyleData(StyleRange[] logicalStyles, int lineOffset, int lineLength)", "signatureAfterChange": " int getAverageCharWidth ()", "diff": ["- */", "-private StyleRange[] getVisualLineStyleData(StyleRange[] logicalStyles, int lineOffset, int lineLength) {", "-\tint lineEnd = lineOffset + lineLength;", "-\tint oldStyleCount = logicalStyles.length;", "-\tint newStyleCount = 0;", "-\t", "-\tfor (int i = 0; i < oldStyleCount; i++) {", "-\t\tStyleRange style = logicalStyles[i];", "-\t\tif (style.start < lineEnd && style.start + style.length > lineOffset) {", "-\t\t\tnewStyleCount++;", "-\t\t}", "-\t}", "-\tif (newStyleCount != oldStyleCount) {", "-\t\tStyleRange[] newStyles = new StyleRange[newStyleCount];", "-\t\tfor (int i = 0, j = 0; i < oldStyleCount; i++) {", "-\t\t\tStyleRange style = logicalStyles[i];", "-\t\t\tif (style.start < lineEnd && style.start + style.length > lineOffset) {", "-\t\t\t\tnewStyles[j++] = logicalStyles[i];\t\t\t\t\t\t", "-\t\t\t}", "-\t\t}", "-\t\tlogicalStyles = newStyles;", "-\t}", "-\treturn logicalStyles;", "-}", "+int getAverageCharWidth () {", "+\treturn averageCharWidth;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ced94a1aae8b3629b8455ee9e75ece4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "53eaef42c85a19c6c024eb953b35f15c33827e05", "commitAfterChange": "e8c16f7f9f6a3f2c095dfd48e874b4e7a9e7e851", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 134, "signatureBeforeChange": "\r int contentWidth(String text, int lineIndex, GC gc)", "signatureAfterChange": "\r StyleRange[] getVisualLineStyleData(StyleRange[] logicalStyles, int lineOffset, int lineLength)", "diff": ["- */\r", "-int contentWidth(String text, int lineIndex, GC gc) {\r", "-\tint paintX = 0;\r", "-\tint textLength = text.length();\r", "-\r", "-\tfor (int i = 0; i < textLength; i++) {\r", "-\t\tint tabIndex = text.indexOf(TAB, i);\r", "-\t\t// is tab not present or past the rendering range?\r", "-\t\tif (tabIndex == -1 || tabIndex > textLength) {\r", "-\t\t\ttabIndex = textLength;\r", "-\t\t}\r", "-\t\tif (tabIndex != i) {\r", "-\t\t\tString tabSegment = text.substring(i, tabIndex);\r", "-\t\t\tpaintX += gc.stringExtent(tabSegment).x;\r", "-\t\t\tif (tabIndex != textLength && tabWidth > 0) {\r", "-\t\t\t\tpaintX = getTabStop(paintX);\r", "-\t\t\t}\r", "-\t\t\ti = tabIndex;\r", "-\t\t}\r", "-\t\telse \t\t\r", "-\t\tif (tabWidth > 0) {\r", "-\t\t\tpaintX = getTabStop(paintX);\r", "-\t\t}\r", "-\t}\r", "-\treturn paintX;\r", "+ */\r", "+StyleRange[] getVisualLineStyleData(StyleRange[] logicalStyles, int lineOffset, int lineLength) {\r", "+\tint lineEnd = lineOffset + lineLength;\r", "+\tint oldStyleCount = logicalStyles.length;\r", "+\tint newStyleCount = 0;\r", "+\t\r", "+\tfor (int i = 0; i < oldStyleCount; i++) {\r", "+\t\tStyleRange style = logicalStyles[i];\r", "+\t\tif (style.start < lineEnd && style.start + style.length > lineOffset) {\r", "+\t\t\tnewStyleCount++;\r", "+\t\t}\r", "+\t}\r", "+\tif (newStyleCount != oldStyleCount) {\r", "+\t\tStyleRange[] newStyles = new StyleRange[newStyleCount];\r", "+\t\tfor (int i = 0, j = 0; i < oldStyleCount; i++) {\r", "+\t\t\tStyleRange style = logicalStyles[i];\r", "+\t\t\tif (style.start < lineEnd && style.start + style.length > lineOffset) {\r", "+\t\t\t\tnewStyles[j++] = logicalStyles[i];\t\t\t\t\t\t\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tlogicalStyles = newStyles;\r", "+\t}\r", "+\treturn logicalStyles;\r", "+}\r"]}], "num": 17655}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "720c75feb8c841c0a17f49e5968a011a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a53f284209feeaaeb95256ed887d6f58", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "c52a498d1686cfc621ac513da35a69d8c16a84ba", "commitAfterChange": "d0cfa98c33dae187ddb28fd1d4be338006975a20", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["-\t/* Initialize LTR and RTL CTParagraphStyleRef */", "-\tCTParagraphStyleSetting setting = new CTParagraphStyleSetting();", "-\tsetting.spec = OS.kCTParagraphStyleSpecifierBaseWritingDirection;", "-\tsetting.valueSize = 1;", "-\tsetting.value = OS.malloc(setting.valueSize);", "-\tOS.memmove(setting.value, new byte[] {OS.kCTWritingDirectionLeftToRight}, setting.valueSize);", "-\tint /*long*/ settingsPtr = OS.malloc(CTParagraphStyleSetting.sizeof);", "-\tOS.memmove(settingsPtr, setting, CTParagraphStyleSetting.sizeof);", "-\tparagraphStyleLTR = OS.CTParagraphStyleCreate(settingsPtr, 1);", "-\tOS.free(setting.value);", "-\tOS.free(settingsPtr);", "-\tsetting.value = OS.malloc(setting.valueSize);", "-\tOS.memmove(setting.value, new byte[] {OS.kCTWritingDirectionRightToLeft}, setting.valueSize);", "-\tsettingsPtr = OS.malloc(CTParagraphStyleSetting.sizeof);", "-\tOS.memmove(settingsPtr, setting, CTParagraphStyleSetting.sizeof);", "-\tparagraphStyleRTL = OS.CTParagraphStyleCreate(settingsPtr, 1);", "-\tOS.free(setting.value);", "-\tOS.free(settingsPtr);", "+\tparagraphStyle = (NSMutableParagraphStyle)new NSMutableParagraphStyle().alloc().init();", "+\tparagraphStyle.setAlignment(OS.NSLeftTextAlignment);", "+\tparagraphStyle.setLineBreakMode(OS.NSLineBreakByClipping);", "+\tNSArray tabs = new NSArray(new NSArray().alloc().init());", "+\tparagraphStyle.setTabStops(tabs);", "+\ttabs.release();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7fb7e246e6af5fd0e72315569e16b53", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "2a9bec4cc92d05b864a6b5dea199e38d5dda5649", "commitAfterChange": "e466860c6da17975be249d6dc77b6da1b30692ab", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t* Bug in Safari.  For some reason, when a window contains a", "-\t* WebView, VoiceOver no longer follows focus.  The VoiceOver", "-\t* cursor (activated by Control+Alt+arrows) continues to work,", "-\t* but keyboard focus is not tracked.  The fix is to create", "-\t* and dispose a cocoa button once per window.  This must be", "-\t* done before the WebView is created or the problem persists.", "-\t* ", "-\t* NOTE:  This only happens on OSX 10.5 (Leopard).", "+\t* Bug in Safari on OSX 10.5 (Leopard) only.  VoiceOver no longer follows focus when", "+\t* HIWebViewCreate is used to create a WebView.  The VoiceOver cursor (activated by", "+\t* Control+Alt+arrows) continues to work, but keyboard focus is not tracked.  The fix", "+\t* is to create the WebView with HICocoaViewCreate (api introduced in OSX 10.5) when", "+\t* running on OSX 10.5.", "+\tint outControl[] = new int[1];", "-\t\tShell shell = parent.getShell();", "-\t\tif (shell.getData(BROWSER_COCOA_BUTTON) == null) {", "-\t\t\tint[] root = new int[1];", "-\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(parent.handle)), OS.kHIViewWindowContentID(), root);", "-\t\t\tint rootHandle = root[0];", "-\t\t\tint buttonHandle = Cocoa.objc_msgSend(Cocoa.objc_msgSend(Cocoa.C_NSButton, Cocoa.S_alloc), Cocoa.S_initWithFrame, new NSRect());", "-\t\t\tint outControl[] = new int[1];", "-\t\t\tCocoa.HICocoaViewCreate(buttonHandle, 0, outControl);", "-\t\t\tOS.HIViewSetFrame(outControl[0], new CGRect());", "-\t\t\tOS.HIViewSetVisible(outControl[0], false);", "-\t\t\tOS.HIViewAddSubview(rootHandle, outControl[0]);", "-\t\t\tOS.DisposeControl(outControl[0]);", "-\t\t\tshell.setData(BROWSER_COCOA_BUTTON, \"true\"); //$NON-NLS-1$", "+\t\twebView = Cocoa.objc_msgSend(Cocoa.objc_msgSend(Cocoa.C_WebView, Cocoa.S_alloc), Cocoa.S_initWithFrame_frameName_groupName, new NSRect(), 0, 0);", "+\t\tif (webView != 0) {", "+\t\t\tCocoa.HICocoaViewCreate(webView, 0, outControl);", "+\t\t\twebViewHandle = outControl[0];\t\t", "+\t\t}", "+\t} else {", "+\t\tCocoa.HIWebViewCreate(outControl);", "+\t\twebViewHandle = outControl[0];", "+\t\tif (webViewHandle != 0) {", "+\t\t\twebView = Cocoa.HIWebViewGetWebView(webViewHandle);", "-", "-\tint outControl[] = new int[1];", "-\ttry {", "-\t\tCocoa.HIWebViewCreate(outControl);", "-\t} catch (UnsatisfiedLinkError e) {", "+\tif (webViewHandle == 0) {", "-\twebViewHandle = outControl[0];", "-\tif (webViewHandle == 0) {", "-\t\tbrowser.dispose();", "-\t\tSWT.error(SWT.ERROR_NO_HANDLES);\t\t", "-\t}", "+", "-\tfinal int webView = Cocoa.HIWebViewGetWebView(webViewHandle);", "-\t\t\t\tcase SWT.Activate: {", "-\t\t\t\t\tCocoa.objc_msgSend(Cocoa.objc_msgSend(Cocoa.HIWebViewGetWebView(webViewHandle), Cocoa.S_window), Cocoa.S_makeKeyWindow);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\tbrowser.getShell().addListener(SWT.Activate, listener);", "-\t\tCocoa.objc_msgSend(Cocoa.objc_msgSend(Cocoa.HIWebViewGetWebView(webViewHandle), Cocoa.S_window), Cocoa.S_makeKeyWindow);", "+\t\tCocoa.objc_msgSend(Cocoa.objc_msgSend(webView, Cocoa.S_window), Cocoa.S_makeKeyWindow);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "014110a30d982f7a5d9561cb6149ea63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "07b456597109483e0a174d96576008e1e9f5eda6", "commitAfterChange": "136dc2168a34ab266e5c250a608746c92a633e22", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " public void showItem (CTabItem item)", "signatureAfterChange": " public void showItem (CTabItem item)", "diff": ["+\tif (index == -1) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "-\tboolean changed = false;", "-\tboolean oldShowChevron = showChevron;", "+\t\t// move to front of mru order", "-\t\tif (setItemSize()) changed = true;", "-\t\tif (setItemLocation()) changed = true;", "-\t} else {", "-\t\tif (setItemSize()) changed = true;", "-\t\tif (setItemLocation()) changed = true;", "-\t\tif (!item.showing) {", "-\t\t\tif (priority[idx] >= priority[0]) {", "-\t\t\t\tint maxWidth = getRightItemEdge() - borderLeft;", "-\t\t\t\tif (!single && !simple) maxWidth -= curveWidth - 2*curveIndent;", "-\t\t\t\tint width = items[priority[idx]].width;", "-\t\t\t\twhile (idx > 1) {", "-\t\t\t\t\twidth += items[priority[idx-1]].width;", "-\t\t\t\t\tif (width > maxWidth) break;", "-\t\t\t\t\tidx--;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tint[] newPriority = new int[priority.length];", "-\t\t\tSystem.arraycopy(priority, idx, newPriority, 0, priority.length - idx);", "-\t\t\tSystem.arraycopy(priority, 0, newPriority, priority.length - idx, idx);", "-\t\t\tpriority = newPriority;", "-\t\t\tif (setItemLocation()) changed = true;", "-\t\t}", "-\tsetButtonBounds();", "-\tif (showChevron != oldShowChevron) changed = true;", "-\tif (changed && toolTipShell != null) {", "-\t\tPoint pt = getDisplay().getCursorLocation();", "-\t\tpt = toControl(pt);", "-\t\tif (!updateToolTip(pt.x, pt.y)) hideToolTip();", "-\t}", "-\tif (changed) redrawTabs();", "+\tif (item.isShowing()) return;", "+\tupdateItems(index);", "+\tredrawTabs();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6899c918ab6ebf90c4d758dc6e8150", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t \tint sendKeyEvent (int type, MacEvent mEvent, Event event)", "signatureAfterChange": "  int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "diff": ["+", "+int kEventRawKeyDown (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventRawKeyDown (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\tint [] keyCode = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\tif (keyCode [0] == 36) { //CR", "+\t\tsendEvent (SWT.DefaultSelection);", "+\t\treturn OS.noErr;", "+\t}", "+\treturn OS.eventNotHandledErr;", "+}", "-\t", "-\tint sendKeyEvent (int type, MacEvent mEvent, Event event) {", "-\t\t", "-\t\t/* AW: other platforms call super", "-\t\tLRESULT result = super.WM_CHAR (wParam, lParam);", "-\t\tif (result != null) return result;", "-\t\t*/", "-\t\t", "-//\t\tif (translateTraversal(mEvent))", "-//\t\t\treturn 0;", "-\t\t\t", "-\t\tint kind= mEvent.getKind();", "-\t\tint mcc= mEvent.getMacCharCodes();", "-\t\tint code= mEvent.getKeyCode();", "-", "-\t\t// return key -> DefaultSelection", "-\t\tif (mcc == SWT.CR) {", "-\t\t\tif (kind == OS.kEventRawKeyDown)", "-\t\t\t\tpostEvent (SWT.DefaultSelection);", "-\t\t\treturn OS.kNoErr;", "-\t\t}", "-\t\t\t\t", "-\t\tif ((mEvent.getModifiers() & OS.cmdKey) != 0) {", "-\t\t\tswitch (code) {", "-\t\t\tcase 0:\t// select all", "-\t\t\t\tif (kind == OS.kEventRawKeyDown)", "-\t\t\t\t\t_selectAll();", "-\t\t\t\treturn OS.kNoErr;", "-\t\t\tcase 7:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown)", "-\t\t\t\t\tcut();", "-\t\t\t\treturn OS.kNoErr;", "-\t\t\tcase 8:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown)", "-\t\t\t\t\tcopy();", "-\t\t\t\treturn OS.kNoErr;", "-\t\t\tcase 9:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown || kind == OS.kEventRawKeyRepeat)", "-\t\t\t\t\tpaste();", "-\t\t\t\treturn OS.kNoErr;", "-\t\t\tdefault:", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-", "-\t\tString oldText= getText();", "-", "-\t\tint status= OS.CallNextEventHandler(mEvent.getNextHandler(), mEvent.getEventRef());", "-\t\t", "-\t\tif (kind == OS.kEventRawKeyDown) {", "-\t\t\tString newText= getText();", "-\t\t\tif (!oldText.equals(newText))", "-\t\t\t\tsendEvent (SWT.Modify);", "-\t\t}", "-\t\t", "-\t\treturn status;", "-\t}"]}], "num": 25867}
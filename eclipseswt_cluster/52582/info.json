{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f85efb19363cab406789e5873834343b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03700e9aec8a5c8d1a5a3be961d74603", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void cut ()", "signatureAfterChange": "  public void cut ()", "diff": ["- */", "+", "-\tselectionToClipboard();", "-\t_replaceTextSelection(\"\");", "-}", "+\tint [] str = new int [1];", "+\tshort start, end;", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t// NEEDS WORK - getting whole text, not just selection", "+\t\tint index = OS.GetControlValue (handle);", "+\t\tif (OS.CopyMenuItemTextAsCFString(menuHandle, (short)index, str) != OS.noErr) return;", "+\t\tstart = 0; end = (short)OS.CFStringGetLength (str [0]);", "+\t\tif (start >= end) {", "+\t\t\tOS.CFRelease (str [0]);", "+\t\t\treturn;", "+\t\t}", "+\t} else {", "+\t\tshort [] s = new short [2];", "+\t\tOS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextSelectionTag, 4, s, null);", "+\t\tif (s [0] >= s [1]) return;", "+\t\tstart = s [0]; end = s [1];", "+\t\tif (OS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, str, null) != OS.noErr) return;", "+\tCFRange range = new CFRange ();", "+\trange.location = start;", "+\trange.length = end - start;", "+\tint encoding = OS.CFStringGetSystemEncoding ();", "+\tint [] size = new int [1];", "+\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "+\tbyte [] buffer = new byte [size [0]];", "+\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, buffer, size [0], size);", "+", "+\tOS.ClearCurrentScrap();", "+\tint[] scrap = new int [1];", "+\tOS.GetCurrentScrap (scrap);", "+\tOS.PutScrapFlavor (scrap [0], OS.kScrapFlavorTypeText, 0, buffer.length, buffer);", "+\t", "+\t// delete selection", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t// NEEDS WORK", "+\t} else {", "+\t\tbyte [] newBuffer;", "+\t\trange.location = 0;", "+\t\trange.length = start;", "+\t\tsize = new int [1];", "+\t\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "+\t\tbyte [] preBuffer = new byte [size [0]];", "+\t\tOS.CFStringGetBytes(str [0], range, encoding, (byte)'?', true, preBuffer, size [0], size);", "+\t\trange.location = end;", "+\t\trange.length = OS.CFStringGetLength (str [0]) - end;", "+\t\tsize = new int [1];", "+\t\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "+\t\tbyte [] postBuffer = new byte [size [0]];", "+\t\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, postBuffer, size [0], size);", "+\t\tnewBuffer = new byte [preBuffer.length + postBuffer.length];", "+\t\tSystem.arraycopy(preBuffer, 0, newBuffer, 0, preBuffer.length);", "+\t\tSystem.arraycopy(postBuffer, 0, newBuffer, preBuffer.length, postBuffer.length);", "+\t\tint ptr = OS.CFStringCreateWithBytes (OS.kCFAllocatorDefault, newBuffer, newBuffer.length, encoding, true);", "+\t\tOS.SetControlData (handle, OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, new int[] {ptr});", "+\t\tOS.CFRelease (ptr);", "+\t}", "+\t", "+\tOS.CFRelease (str [0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4b4f2379c5ef88259cbf3329e6f96e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "1879f0110762a14d14725c1ff98b0c876188176a", "commitAfterChange": "ec0b807b1bde11bc567a2a3419e26587b448a196", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void cut ()", "signatureAfterChange": " public void cut ()", "diff": ["-\t//NEEDS WORK - Modify/Verify", "-\tint [] str = new int [1];", "-\tshort start, end;", "-\tif ((style & SWT.READ_ONLY) != 0) {", "-\t\t// NEEDS WORK - getting whole text, not just selection", "-\t\tint index = OS.GetControlValue (handle);", "-\t\tif (OS.CopyMenuItemTextAsCFString(menuHandle, (short)index, str) != OS.noErr) return;", "-\t\tstart = 0; end = (short)OS.CFStringGetLength (str [0]);", "-\t\tif (start >= end) {", "-\t\t\tOS.CFRelease (str [0]);", "-\t\t\treturn;", "-\t\t}", "-\t} else {", "-\t\tshort [] s = new short [2];", "-\t\tOS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextSelectionTag, 4, s, null);", "-\t\tif (s [0] >= s [1]) return;", "-\t\tstart = s [0]; end = s [1];", "-\t\tif (OS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, str, null) != OS.noErr) return;", "+\tif ((style & SWT.READ_ONLY) != 0) return;", "+\tPoint selection = getSelection ();", "+\tif (selection.x == selection.y) return;", "+\tint start = selection.x, end = selection.y;", "+\tString text = getText ();", "+\tString leftText = text.substring (0, start);", "+\tString rightText = text.substring (end, text.length ());", "+\tString newText = \"\";", "+\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "+\t\tnewText = verifyText (newText, start, end, null);", "+\t\tif (newText == null) return;", "-\tCFRange range = new CFRange ();", "-\trange.location = start;", "-\trange.length = end - start;", "-\tint encoding = OS.CFStringGetSystemEncoding ();", "-\tint [] size = new int [1];", "-\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "-\tbyte [] buffer = new byte [size [0]];", "-\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, buffer, size [0], size);", "-", "-\tOS.ClearCurrentScrap();", "-\tint[] scrap = new int [1];", "-\tOS.GetCurrentScrap (scrap);", "-\tOS.PutScrapFlavor (scrap [0], OS.kScrapFlavorTypeText, 0, buffer.length, buffer);", "-\t", "-\t// delete selection", "-\tif ((style & SWT.READ_ONLY) != 0) {", "-\t\t// NEEDS WORK", "-\t} else {", "-\t\tbyte [] newBuffer;", "-\t\trange.location = 0;", "-\t\trange.length = start;", "-\t\tsize = new int [1];", "-\t\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "-\t\tbyte [] preBuffer = new byte [size [0]];", "-\t\tOS.CFStringGetBytes(str [0], range, encoding, (byte)'?', true, preBuffer, size [0], size);", "-\t\trange.location = end;", "-\t\trange.length = OS.CFStringGetLength (str [0]) - end;", "-\t\tsize = new int [1];", "-\t\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "-\t\tbyte [] postBuffer = new byte [size [0]];", "-\t\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, postBuffer, size [0], size);", "-\t\tnewBuffer = new byte [preBuffer.length + postBuffer.length];", "-\t\tSystem.arraycopy(preBuffer, 0, newBuffer, 0, preBuffer.length);", "-\t\tSystem.arraycopy(postBuffer, 0, newBuffer, preBuffer.length, postBuffer.length);", "-\t\tint ptr = OS.CFStringCreateWithBytes (OS.kCFAllocatorDefault, newBuffer, newBuffer.length, encoding, true);", "-\t\tOS.SetControlData (handle, OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, new int[] {ptr});", "-\t\tOS.CFRelease (ptr);", "-\t\tsendEvent (SWT.Modify);", "-\t}", "-\t", "-\tOS.CFRelease (str [0]);", "+\tchar [] buffer = new char [newText.length ()];", "+\tnewText.getChars (0, buffer.length, buffer, 0);", "+\tcopy (buffer);", "+\tsetText (leftText + newText + rightText, false);", "+\tstart += newText.length ();", "+\tsetSelection (new Point (start, start));", "+\tsendEvent (SWT.Modify);"]}], "num": 52582}
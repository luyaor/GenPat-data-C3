{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27446f0cd66b1f603cd75e8eafbe77e1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e94fc046f6b77f05067e50b8a6d4414", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "5c4d630f767020e8173b62231f9e8922cb4aaec8", "commitAfterChange": "319f831d454b64123e2fb33ab181ee0ace6b1cf5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\tif (!mozilla) {", "+\tif (!initialized) {", "-\t\t\t}", "-\t\t}", "-", "-\t\t/*", "-\t\t * Try to load the various profile libraries until one is found that loads successfully:", "-\t\t * - mozilla14profile/mozilla14profile-gcc should succeed for mozilla 1.4 - 1.6", "-\t\t * - mozilla17profile/mozilla17profile-gcc should succeed for mozilla 1.7.x and firefox", "-\t\t * - mozilla18profile/mozilla18profile-gcc should succeed for mozilla 1.8.x (seamonkey)", "-\t\t */", "-\t\ttry {", "-\t\t\tLibrary.loadLibrary (\"swt-mozilla14-profile\"); //$NON-NLS-1$", "-\t\t\tusingProfile = true;", "-\t\t} catch (UnsatisfiedLinkError e1) {", "-\t\t\ttry {", "-\t\t\t\tLibrary.loadLibrary (\"swt-mozilla17-profile\"); //$NON-NLS-1$", "-\t\t\t\tusingProfile = true;", "-\t\t\t} catch (UnsatisfiedLinkError e2) {", "-\t\t\t\ttry {", "-\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla14-profile-gcc3\"); //$NON-NLS-1$", "-\t\t\t\t\tusingProfile = true;", "-\t\t\t\t} catch (UnsatisfiedLinkError e3) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla17-profile-gcc3\"); //$NON-NLS-1$", "-\t\t\t\t\t\tusingProfile = true;", "-\t\t\t\t\t} catch (UnsatisfiedLinkError e4) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla18-profile\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tusingProfile = true;", "-\t\t\t\t\t\t} catch (UnsatisfiedLinkError e5) {", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla18-profile-gcc3\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tusingProfile = true;", "-\t\t\t\t\t\t\t} catch (UnsatisfiedLinkError e6) {", "-\t\t\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t\t\t* fail silently, the Browser will still work without profile support", "-\t\t\t\t\t\t\t\t* but will abort any attempts to navigate to HTTPS pages", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\tserviceManager.Release();", "-\t\t", "+", "-\t\t", "-\t\t/* specify the user profile directory */", "-\t\tif (usingProfile) {", "-\t\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "-\t\t\trc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\tnsIDirectoryService directoryService = new nsIDirectoryService(result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\trc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\tdirectoryService.Release();", "-", "-\t\t\tnsIProperties properties = new nsIProperties(result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "-\t\t\trc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\tproperties.Release();", "-", "-\t\t\tnsIFile profileDir = new nsIFile(result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tint /*long*/ path = XPCOM.nsEmbedCString_new();", "-\t\t\trc = profileDir.GetNativePath(path);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tprofileDir.Release(); //", "-", "-\t\t\tint length = XPCOM.nsEmbedCString_Length(path);", "-\t\t\tptr = XPCOM.nsEmbedCString_get(path);", "-\t\t\tbuffer = new byte [length];", "-\t\t\tXPCOM.memmove(buffer, ptr, length);", "-\t\t\tXPCOM.nsEmbedCString_delete(path);", "-\t\t\tString string = new String(Converter.mbcsToWcs(null, buffer)) + PROFILE_DIR; ", "-\t\t\tpathString = new nsEmbedString(string);", "-\t\t\trc = XPCOM.NS_NewLocalFile(pathString.getAddress(), true, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NULL_POINTER);", "-\t\t\tpathString.dispose(); //", "-", "-\t\t\tprofileDir = new nsIFile(result[0]);", "-\t\t\tresult[0] = 0;", "-", "-\t\t\trc = XPCOM_PROFILE.NS_NewProfileDirServiceProvider(true, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-", "-\t\t\tfinal int /*long*/ dirServiceProvider = result[0];", "-\t\t\tresult[0] = 0;", "-\t\t\trc = XPCOM_PROFILE.ProfileDirServiceProvider_Register(dirServiceProvider);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\trc = XPCOM_PROFILE.ProfileDirServiceProvider_SetProfileDir(dirServiceProvider, profileDir.getAddress());", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-", "-\t\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "-\t\t\t\tpublic void handleEvent(Event e) {", "-\t\t\t\t\tXPCOM_PROFILE.ProfileDirServiceProvider_Shutdown(dirServiceProvider);", "-\t\t\t\t}", "-\t\t\t});", "+\t\t/* compute the root profile directory */", "+\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "+\t\trc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tdispose();", "+\t\t\terror(rc);", "+\t\t}", "+\t\tif (result[0] == 0) {", "+\t\t\tdispose();", "+\t\t\terror(XPCOM.NS_NOINTERFACE);", "+\t\tnsIDirectoryService directoryService = new nsIDirectoryService(result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tdispose();", "+\t\t\terror(rc);", "+\t\t}", "+\t\tif (result[0] == 0) {", "+\t\t\tdispose();", "+\t\t\terror(XPCOM.NS_NOINTERFACE);", "+\t\t}", "+\t\tdirectoryService.Release();", "+", "+\t\tnsIProperties properties = new nsIProperties(result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "+\t\trc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tdispose();", "+\t\t\terror(rc);", "+\t\t}", "+\t\tif (result[0] == 0) {", "+\t\t\tdispose();", "+\t\t\terror(XPCOM.NS_NOINTERFACE);", "+\t\t}", "+\t\tproperties.Release();", "+", "+\t\tnsIFile profileDir = new nsIFile(result[0]);", "+\t\tresult[0] = 0;", "+\t\tint /*long*/ path = XPCOM.nsEmbedCString_new();", "+\t\trc = profileDir.GetNativePath(path);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tdispose();", "+\t\t\terror(rc);", "+\t\t}", "+\t\tint length = XPCOM.nsEmbedCString_Length(path);", "+\t\tptr = XPCOM.nsEmbedCString_get(path);", "+\t\tbuffer = new byte [length];", "+\t\tXPCOM.memmove(buffer, ptr, length);", "+\t\tprofileRootDirectory = new String(Converter.mbcsToWcs(null, buffer)) + PROFILE_DIR;", "+\t\tXPCOM.nsEmbedCString_delete(path);", "+\t\tprofileDir.Release();", "+", "+\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;\t\t", "+\t\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\t\tserviceManager.Release();", "+", "+\t\t\t\tnsIObserverService observerService = new nsIObserverService(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbuffer = Converter.wcsToMbcs(null, PROFILE_CHANGE_NET_TEARDOWN, true);", "+\t\t\t\tint length = SHUTDOWN_PERSIST.length();", "+\t\t\t\tchar[] chars = new char [length + 1];", "+\t\t\t\tSHUTDOWN_PERSIST.getChars(0, length, chars, 0);", "+\t\t\t\trc = observerService.NotifyObservers(0, buffer, chars);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+", "+\t\t\t\tbuffer = Converter.wcsToMbcs(null, PROFILE_CHANGE_TEARDOWN, true);", "+\t\t\t\trc = observerService.NotifyObservers(0, buffer, chars);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+", "+\t\t\t\tbuffer = Converter.wcsToMbcs(null, PROFILE_BEFORE_CHANGE, true);", "+\t\t\t\trc = observerService.NotifyObservers(0, buffer, chars);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tobserverService.Release();", "+\t\t\t}", "+\t\t});", "+", "-\t\t * As a result of using a common profile (or none at all), the user cannot specify", "-\t\t * their locale and charset.  The fix for this is to set mozilla's locale and charset", "+\t\t * As a result of using a common profile the user cannot change their locale", "+\t\t * and charset.  The fix for this is to set mozilla's locale and charset", "-\t\t\tint length = XPCOM.strlen_PRUnichar(result[0]);", "+\t\t\tlength = XPCOM.strlen_PRUnichar(result[0]);", "-\t\t\tint length = newLocales.length();", "+\t\t\tlength = newLocales.length();", "-\t\t\tint length = XPCOM.strlen_PRUnichar(result[0]);", "+\t\t\tlength = XPCOM.strlen_PRUnichar(result[0]);", "-\t\t\tint length = newCharset.length();", "+\t\t\tlength = newCharset.length();", "-\t\t", "+", "-\t\tmozilla = true;", "+\t\tinitialized = true;", "-\twebBrowser = new nsIWebBrowser(result[0]); ", "+\twebBrowser = new nsIWebBrowser(result[0]);", "+\trc = XPCOM.NS_GetServiceManager(result);", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tif (result[0] == 0) {", "+\t\tdispose();", "+\t\terror(XPCOM.NS_NOINTERFACE);", "+\t}", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\tresult[0] = 0;\t\t", "+\tbyte[] buffer = Converter.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tif (result[0] == 0) {", "+\t\tdispose();", "+\t\terror(XPCOM.NS_NOINTERFACE);", "+\t}", "+", "+\tnsIDirectoryService directoryService = new nsIDirectoryService(result[0]);", "+\tresult[0] = 0;", "+\trc = directoryService.RegisterProvider(directoryServiceProviderListener.getAddress());", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tdirectoryService.Release();", "+", "+\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tif (result[0] == 0) {", "+\t\tdispose();", "+\t\terror(XPCOM.NS_NOINTERFACE);", "+\t}", "+\tserviceManager.Release();", "+", "+\tnsIObserverService observerService = new nsIObserverService(result[0]);", "+\tresult[0] = 0;", "+\tbuffer = Converter.wcsToMbcs(null, PROFILE_DO_CHANGE, true);", "+\tint length = STARTUP.length();", "+\tchar[] chars = new char [length + 1];", "+\tSTARTUP.getChars(0, length, chars, 0);", "+\trc = observerService.NotifyObservers(0, buffer, chars);", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tbuffer = Converter.wcsToMbcs(null, PROFILE_AFTER_CHANGE, true);", "+\trc = observerService.NotifyObservers(0, buffer, chars);", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tobserverService.Release();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7404efc704e687284f20fd1cf74d9b80", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "a2131700c211bed42a93ba7599f768ad135cdbc1", "commitAfterChange": "8b59e26dd26f719b516cb26d636b8bb45c1be0d6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\t\t}", "-\t\t}", "-", "-\t\t/*", "-\t\t * Try to load the various profile libraries until one is found that loads successfully:", "-\t\t * - mozilla14profile/mozilla14profile-gcc should succeed for mozilla 1.4 - 1.6", "-\t\t * - mozilla17profile/mozilla17profile-gcc should succeed for mozilla 1.7.x and firefox", "-\t\t * - mozilla18profile/mozilla18profile-gcc should succeed for mozilla 1.8.x (seamonkey)", "-\t\t */", "-\t\ttry {", "-\t\t\tLibrary.loadLibrary (\"swt-mozilla14-profile\"); //$NON-NLS-1$", "-\t\t\tusingProfile = true;", "-\t\t} catch (UnsatisfiedLinkError e1) {", "-\t\t\ttry {", "-\t\t\t\tLibrary.loadLibrary (\"swt-mozilla17-profile\"); //$NON-NLS-1$", "-\t\t\t\tusingProfile = true;", "-\t\t\t} catch (UnsatisfiedLinkError e2) {", "-\t\t\t\ttry {", "-\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla14-profile-gcc3\"); //$NON-NLS-1$", "-\t\t\t\t\tusingProfile = true;", "-\t\t\t\t} catch (UnsatisfiedLinkError e3) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla17-profile-gcc3\"); //$NON-NLS-1$", "-\t\t\t\t\t\tusingProfile = true;", "-\t\t\t\t\t} catch (UnsatisfiedLinkError e4) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla18-profile\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\tusingProfile = true;", "-\t\t\t\t\t\t} catch (UnsatisfiedLinkError e5) {", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla18-profile-gcc3\"); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tusingProfile = true;", "-\t\t\t\t\t\t\t} catch (UnsatisfiedLinkError e6) {", "-\t\t\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t\t\t* fail silently, the Browser will still work without profile support", "-\t\t\t\t\t\t\t\t* but will abort any attempts to navigate to HTTPS pages", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t/* specify the user profile directory */", "-\t\tif (usingProfile) {", "-\t\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "-\t\t\trc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-", "-\t\t\tnsIDirectoryService directoryService = new nsIDirectoryService(result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\trc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\tdirectoryService.Release();", "-", "-\t\t\tnsIProperties properties = new nsIProperties(result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "-\t\t\trc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\tproperties.Release();", "-", "-\t\t\tnsIFile profileDir = new nsIFile(result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tint /*long*/ path = XPCOM.nsEmbedCString_new();", "-\t\t\trc = profileDir.GetNativePath(path);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tprofileDir.Release(); //", "-", "-\t\t\tint length = XPCOM.nsEmbedCString_Length(path);", "-\t\t\tptr = XPCOM.nsEmbedCString_get(path);", "-\t\t\tbuffer = new byte [length];", "-\t\t\tXPCOM.memmove(buffer, ptr, length);", "-\t\t\tXPCOM.nsEmbedCString_delete(path);", "-\t\t\tString string = new String(Converter.mbcsToWcs(null, buffer)) + PROFILE_DIR; ", "-\t\t\tpathString = new nsEmbedString(string);", "-\t\t\trc = XPCOM.NS_NewLocalFile(pathString.getAddress(), true, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NULL_POINTER);", "-\t\t\tpathString.dispose(); //", "-", "-\t\t\tprofileDir = new nsIFile(result[0]);", "-\t\t\tresult[0] = 0;", "-", "-\t\t\trc = XPCOM_PROFILE.NS_NewProfileDirServiceProvider(true, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-", "-\t\t\tfinal int /*long*/ dirServiceProvider = result[0];", "-\t\t\tresult[0] = 0;", "-\t\t\trc = XPCOM_PROFILE.ProfileDirServiceProvider_Register(dirServiceProvider);", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\trc = XPCOM_PROFILE.ProfileDirServiceProvider_SetProfileDir(dirServiceProvider, profileDir.getAddress());", "-\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-", "-\t\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "-\t\t\t\tpublic void handleEvent(Event e) {", "-\t\t\t\t\tXPCOM_PROFILE.ProfileDirServiceProvider_Shutdown(dirServiceProvider);", "-\t\t\t\t}", "-\t\t\t});", "+\t\t/* compute the root profile directory */", "+\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "+\t\trc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tdispose();", "+\t\t\terror(rc);", "+\t\t}", "+\t\tif (result[0] == 0) {", "+\t\t\tdispose();", "+\t\t\terror(XPCOM.NS_NOINTERFACE);", "+\t\tnsIDirectoryService directoryService = new nsIDirectoryService(result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tdispose();", "+\t\t\terror(rc);", "+\t\t}", "+\t\tif (result[0] == 0) {", "+\t\t\tdispose();", "+\t\t\terror(XPCOM.NS_NOINTERFACE);", "+\t\t}", "+\t\tdirectoryService.Release();", "+", "+\t\tnsIProperties properties = new nsIProperties(result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "+\t\trc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tdispose();", "+\t\t\terror(rc);", "+\t\t}", "+\t\tif (result[0] == 0) {", "+\t\t\tdispose();", "+\t\t\terror(XPCOM.NS_NOINTERFACE);", "+\t\t}", "+\t\tproperties.Release();", "+", "+\t\tnsIFile profileDir = new nsIFile(result[0]);", "+\t\tresult[0] = 0;", "+\t\tint /*long*/ path = XPCOM.nsEmbedCString_new();", "+\t\trc = profileDir.GetNativePath(path);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tdispose();", "+\t\t\terror(rc);", "+\t\t}", "+\t\tint length = XPCOM.nsEmbedCString_Length(path);", "+\t\tptr = XPCOM.nsEmbedCString_get(path);", "+\t\tbuffer = new byte [length];", "+\t\tXPCOM.memmove(buffer, ptr, length);", "+\t\tprofileRootDirectory = new String(Converter.mbcsToWcs(null, buffer)) + PROFILE_DIR;", "+\t\tXPCOM.nsEmbedCString_delete(path);", "+\t\tprofileDir.Release();", "+", "+\t\tdisplay.addListener(SWT.Dispose, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;\t\t", "+\t\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\t\tserviceManager.Release();", "+", "+\t\t\t\tnsIObserverService observerService = new nsIObserverService(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbuffer = Converter.wcsToMbcs(null, PROFILE_CHANGE_NET_TEARDOWN, true);", "+\t\t\t\tint length = SHUTDOWN_PERSIST.length();", "+\t\t\t\tchar[] chars = new char [length + 1];", "+\t\t\t\tSHUTDOWN_PERSIST.getChars(0, length, chars, 0);", "+\t\t\t\trc = observerService.NotifyObservers(0, buffer, chars);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+", "+\t\t\t\tbuffer = Converter.wcsToMbcs(null, PROFILE_CHANGE_TEARDOWN, true);", "+\t\t\t\trc = observerService.NotifyObservers(0, buffer, chars);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+", "+\t\t\t\tbuffer = Converter.wcsToMbcs(null, PROFILE_BEFORE_CHANGE, true);", "+\t\t\t\trc = observerService.NotifyObservers(0, buffer, chars);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tobserverService.Release();", "+\t\t\t}", "+\t\t});", "+", "-\t\t * As a result of using a common profile (or none at all), the user cannot specify", "-\t\t * their locale and charset.  The fix for this is to set mozilla's locale and charset", "+\t\t * As a result of using a common profile the user cannot change their locale", "+\t\t * and charset.  The fix for this is to set mozilla's locale and charset", "-\t\t\tint length = XPCOM.strlen_PRUnichar(result[0]);", "+\t\t\tlength = XPCOM.strlen_PRUnichar(result[0]);", "-\t\t\tint length = newLocales.length();", "+\t\t\tlength = newLocales.length();", "-\t\t\tint length = XPCOM.strlen_PRUnichar(result[0]);", "+\t\t\tlength = XPCOM.strlen_PRUnichar(result[0]);", "-\t\t\tint length = newCharset.length();", "+\t\t\tlength = newCharset.length();", "-\tnsIBaseWindow baseWindow = new nsIBaseWindow(result[0]);\t", "+\tnsIBaseWindow baseWindow = new nsIBaseWindow(result[0]);", "+\tresult[0] = 0;", "+", "+\trc = XPCOM.NS_GetServiceManager(result);", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tif (result[0] == 0) {", "+\t\tdispose();", "+\t\terror(XPCOM.NS_NOINTERFACE);", "+\t}", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\tresult[0] = 0;\t\t", "+\tbyte[] buffer = Converter.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tif (result[0] == 0) {", "+\t\tdispose();", "+\t\terror(XPCOM.NS_NOINTERFACE);", "+\t}", "+", "+\tnsIDirectoryService directoryService = new nsIDirectoryService(result[0]);", "+\tresult[0] = 0;", "+\trc = directoryService.RegisterProvider(directoryServiceProviderListener.getAddress());", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tdirectoryService.Release();", "+", "+\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID(buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tif (result[0] == 0) {", "+\t\tdispose();", "+\t\terror(XPCOM.NS_NOINTERFACE);", "+\t}", "+\tserviceManager.Release();", "+", "+\tnsIObserverService observerService = new nsIObserverService(result[0]);", "+\tresult[0] = 0;", "+\tbuffer = Converter.wcsToMbcs(null, PROFILE_DO_CHANGE, true);", "+\tint length = STARTUP.length();", "+\tchar[] chars = new char [length + 1];", "+\tSTARTUP.getChars(0, length, chars, 0);", "+\trc = observerService.NotifyObservers(0, buffer, chars);", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tbuffer = Converter.wcsToMbcs(null, PROFILE_AFTER_CHANGE, true);", "+\trc = observerService.NotifyObservers(0, buffer, chars);", "+\tif (rc != XPCOM.NS_OK) {", "+\t\tdispose();", "+\t\terror(rc);", "+\t}", "+\tobserverService.Release();"]}], "num": 17403}
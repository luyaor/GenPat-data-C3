{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a668b61e2894bb8b0db61e3542509fe4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4a342086d054dcb217a444a8ebe29bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk1x/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "93b5bbe41ff7fd1821f25607f9318835798a68f7", "commitAfterChange": "431d8b66512cb2bde54104b319de451b93ed1b28", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 28, "signatureBeforeChange": "  void deregister ()", "signatureAfterChange": "  int processMouseUp (int callData, int arg1, int int2)", "diff": ["-", "-void deregister () {", "-\tsuper.deregister ();", "-\tWidgetTable.remove (boxHandle);", "-}", "+", "+int processMouseUp (int callData, int arg1, int int2) {", "+\tint result = super.processMouseUp (callData, arg1, int2);", "+\tif ((style & SWT.MULTI) != 0) {", "+\t\t/*", "+\t\t* Feature in GTK.  When a list item is reselected, GTK", "+\t\t* does not issue notification.  The fix is to detect", "+\t\t* that the mouse was released over a selected item when", "+\t\t* not selection signal was set and issue a fake selection", "+\t\t* event.", "+\t\t*/", "+\t\tGdkEventButton gdkEvent = new GdkEventButton ();", "+\t\tOS.memmove (gdkEvent, callData, GdkEventButton.sizeof);", "+\t\tint x = (int) gdkEvent.x, y = (int) gdkEvent.y;", "+\t\tint [] row = new int [1], column = new int [1];", "+\t\tint code = OS.gtk_clist_get_selection_info (handle, x, y, row, column);", "+\t\tif (code != 0) {", "+\t\t\tGtkCList clist = new GtkCList ();", "+\t\t\tOS.memmove (clist, handle, GtkCList.sizeof);", "+\t\t\tif (isSelected (row [0]) && selected) postEvent (SWT.Selection);", "+\t\t}", "+\t\tselected = false;", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "901cafc966ef0bf1d1b4792f02f8fc45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "a8ee9ef67e47ca82ee0eceb39251ba541d608aeb", "commitAfterChange": "5aabbb14fa51a603fa8266c061688e67cc447a1a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 33, "signatureBeforeChange": " private TableItem[] getSelection_extended ()", "signatureAfterChange": "  int processMouseUp (int callData, int arg1, int int2)", "diff": ["-}", "-private TableItem[] getSelection_extended () {", "-\tGtkCList clist = new GtkCList(handle);", "-\tif (clist.selection==0) return new TableItem[0];", "-\tint length = OS.g_list_length (clist.selection);", "-\tTableItem [] result = new TableItem [length];", "-\tfor (int i=0; i<length; i++) {", "-\t\tint index = OS.g_list_nth_data (clist.selection, i);", "+", "+int processMouseUp (int callData, int arg1, int int2) {", "+\tint result = super.processMouseUp (callData, arg1, int2);", "+\tif ((style & SWT.MULTI) != 0) {", "+\t\t/*", "+\t\t* Feature in GTK.  When an item is reselected, GTK", "+\t\t* does not issue notification.  The fix is to detect", "+\t\t* that the mouse was released over a selected item when", "+\t\t* no selection signal was set and issue a fake selection", "+\t\t* event.", "+\t\t*/", "+\t\tdouble[] px = new double [1], py = new double [1];", "+\t\tOS.gdk_event_get_coords(callData, px, py);", "+\t\tint x = (int) (px[0]), y = (int) (py[0]);", "+\t\tint [] row = new int [1], column = new int [1];", "+\t\tif (OS.gtk_clist_get_selection_info (handle, x, y, row, column) != 0) {", "+\t\t\tGtkCList clist = new GtkCList (handle);", "+\t\t\tif (selected && clist.selection != 0) {", "+\t\t\t\tint list = clist.selection;", "+\t\t\t\tint length = OS.g_list_length (list);", "+\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\tif (row [0] == OS.g_list_nth_data (list, i)) {", "+\t\t\t\t\t\tpostEvent (SWT.Selection);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tselected = false;", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6644baf67ce3c849d526bd60b7c92805", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "93b5bbe41ff7fd1821f25607f9318835798a68f7", "commitAfterChange": "431d8b66512cb2bde54104b319de451b93ed1b28", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 28, "signatureBeforeChange": "  void deregister ()", "signatureAfterChange": "  int processMouseUp (int callData, int arg1, int int2)", "diff": ["-", "-void deregister () {", "-\tsuper.deregister ();", "-\tWidgetTable.remove (boxHandle);", "-}", "+", "+int processMouseUp (int callData, int arg1, int int2) {", "+\tint result = super.processMouseUp (callData, arg1, int2);", "+\tif ((style & SWT.MULTI) != 0) {", "+\t\t/*", "+\t\t* Feature in GTK.  When a list item is reselected, GTK", "+\t\t* does not issue notification.  The fix is to detect", "+\t\t* that the mouse was released over a selected item when", "+\t\t* not selection signal was set and issue a fake selection", "+\t\t* event.", "+\t\t*/", "+\t\tGdkEventButton gdkEvent = new GdkEventButton ();", "+\t\tOS.memmove (gdkEvent, callData, GdkEventButton.sizeof);", "+\t\tint x = (int) gdkEvent.x, y = (int) gdkEvent.y;", "+\t\tint [] row = new int [1], column = new int [1];", "+\t\tint code = OS.gtk_clist_get_selection_info (handle, x, y, row, column);", "+\t\tif (code != 0) {", "+\t\t\tGtkCList clist = new GtkCList ();", "+\t\t\tOS.memmove (clist, handle, GtkCList.sizeof);", "+\t\t\tif (isSelected (row [0]) && selected) postEvent (SWT.Selection);", "+\t\t}", "+\t\tselected = false;", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3c607796273951095e6861abc423707", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Pattern.java", "commitBeforeChange": "b1dbb178b5008dcde16cb7cda2cdc928e2b7e39d", "commitAfterChange": "47fc1ae01db8924907e9ae0b3af53d5a68d462af", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Pattern(Device device, float x1, float y1, float x2, float y2, Color color1, Color color2)", "signatureAfterChange": " public Pattern(Device device, float x1, float y1, float x2, float y2, Color color1, int alpha1, Color color2, int alpha2)", "diff": ["+ */", "+public Pattern(Device device, float x1, float y1, float x2, float y2, Color color1, int alpha1, Color color2, int alpha2) {", "-\t//TODO - how about alpha?", "-\tint colorRef = color1.handle;", "-\tint rgb = ((colorRef >> 16) & 0xFF) | (colorRef & 0xFF00) | ((colorRef & 0xFF) << 16);", "-\tint foreColor = Gdip.Color_new(0xFF << 24 | rgb);", "-\tcolorRef = color2.handle;", "-\trgb = ((colorRef >> 16) & 0xFF) | (colorRef & 0xFF00) | ((colorRef & 0xFF) << 16);", "-\tint backColor = Gdip.Color_new(0xFF << 24 | rgb);", "+\tint colorRef1 = color1.handle;", "+\tint rgb = ((colorRef1 >> 16) & 0xFF) | (colorRef1 & 0xFF00) | ((colorRef1 & 0xFF) << 16);", "+\tint foreColor = Gdip.Color_new((alpha1 & 0xFF) << 24 | rgb);", "+\tint colorRef2 = color2.handle;", "+\trgb = ((colorRef2 >> 16) & 0xFF) | (colorRef2 & 0xFF00) | ((colorRef2 & 0xFF) << 16);", "+\tint backColor = Gdip.Color_new((alpha2 & 0xFF) << 24 | rgb);", "+\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tif (alpha1 != 0xFF || alpha2 != 0xFF) {", "+\t\tint a = (int)((alpha1 & 0xFF) * 0.5f + (alpha2 & 0xFF) * 0.5f);", "+\t\tint r = (int)(((colorRef1 & 0xFF) >> 0) * 0.5f + ((colorRef2 & 0xFF) >> 0) * 0.5f);", "+\t\tint g = (int)(((colorRef1 & 0xFF00) >> 8) * 0.5f + ((colorRef2 & 0xFF00) >> 8) * 0.5f);", "+\t\tint b = (int)(((colorRef1 & 0xFF000) >> 16) * 0.5f + ((colorRef2 & 0xFF0000) >> 16) * 0.5f);", "+\t\tint midColor = Gdip.Color_new(a << 24 | r << 16 | g << 8 | b);", "+\t\tGdip.LinearGradientBrush_SetInterpolationColors(handle, new int[]{foreColor, midColor, backColor}, new float[]{0, 0.5f, 1}, 3);", "+\t\tGdip.Color_delete(midColor);", "+\t}", "-\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);"]}], "num": 47450}
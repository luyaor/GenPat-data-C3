{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f126c81e69a7172ee99cb12ceb0202a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6956e66c783509136bc97889ee7d7d33", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void setEnabled (boolean enabled)", "signatureAfterChange": "  public void _setEnabled (boolean enabled)", "diff": ["+public void _setEnabled (boolean enabled) {", "+\tshort [] outIndex = new short [1];", "+\tOS.GetIndMenuItemWithCommandID (parent.handle, id, 1, null, outIndex);", "+\tint outMenuRef [] = new int [1];", "+\tOS.GetMenuItemHierarchicalMenu (parent.handle, outIndex [0], outMenuRef);", "+\tif (enabled) {", "+\t\tif (outMenuRef [0] != 0) OS.EnableMenuItem (outMenuRef [0], (short) 0);", "+\t\tOS.EnableMenuCommand (parent.handle, id);", "+\t} else {", "+\t\tif (outMenuRef [0] != 0) OS.DisableMenuItem (outMenuRef [0], (short) 0);", "+\t\tOS.DisableMenuCommand (parent.handle, id);", "+\t}", "+}", "- */", "-\tshort [] outIndex = new short [1];", "-\tOS.GetIndMenuItemWithCommandID (parent.handle, id, 1, null, outIndex);", "-\tint outMenuRef [] = new int [1];", "-\tOS.GetMenuItemHierarchicalMenu (parent.handle, outIndex [0], outMenuRef);", "-\t\tif (outMenuRef [0] != 0) OS.EnableMenuItem (outMenuRef [0], (short) 0);", "-\t\tOS.EnableMenuCommand (parent.handle, id);", "-\t\tif (outMenuRef [0] != 0) OS.DisableMenuItem (outMenuRef [0], (short) 0);", "-\t\tOS.DisableMenuCommand (parent.handle, id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b5cc1c97719ac0cab2d146ddec29c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "e293cd5ca9ec202629c2ce24590166a853a347b7", "commitAfterChange": "c9d60234b32c9420ae860fac88795cd3b6c22a04", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void setVisible (boolean visible)", "signatureAfterChange": "\r \r public void _setVisible (boolean visible)", "diff": ["+public void _setVisible (boolean visible) {\r", "+\tif ((style & (SWT.BAR | SWT.DROP_DOWN)) != 0) return;\r", "+\tint hwndParent = parent.handle;\r", "+\tif (!visible) {\r", "+\t\tOS.SendMessage (hwndParent, OS.WM_CANCELMODE, 0, 0);\r", "+\t\treturn;\r", "+\t}\r", "+\tint flags = OS.TPM_LEFTBUTTON | OS.TPM_RIGHTBUTTON | OS.TPM_LEFTALIGN;\r", "+\tint nX = x, nY = y;\r", "+\tif (!hasLocation) {\r", "+\t\tint pos = OS.GetMessagePos ();\r", "+\t\tnX = (short) (pos & 0xFFFF);\r", "+\t\tnY = (short) (pos >> 16);\r", "+\t}\r", "+\t/*\r", "+\t* Feature in Windows.  It is legal use TrackPopupMenu ()\r", "+\t* to display an empty menu as long as menu items are added\r", "+\t* inside of WM_INITPOPUPMENU.  If no items are added, then\r", "+\t* TrackPopupMenu () fails and does not send an indication\r", "+\t* that the menu has been closed.  This is not strictly a\r", "+\t* bug but leads to unwanted behavior when application code\r", "+\t* assumes that every WM_INITPOPUPMENU will eventually result\r", "+\t* in a WM_MENUSELECT, wParam=0xFFFF0000, lParam=0 to indicate\r", "+\t* that the menu has been closed.  The fix is to detect the\r", "+\t* case when TrackPopupMenu fails and the number of items in\r", "+\t* the menu is zero and issue a fake WM_MENUSELECT.\r", "+\t*/\r", "+\tboolean success = OS.TrackPopupMenu (handle, flags, nX, nY, 0, hwndParent, null);\r", "+\tif (!success && GetMenuItemCount (handle) == 0) {\r", "+\t\tOS.SendMessage (hwndParent, OS.WM_MENUSELECT, 0xFFFF0000, 0);\r", "+\t}\r", "+}\r", "-\tint hwndParent = parent.handle;\r", "-\tif (!visible) {\r", "-\t\tOS.SendMessage (hwndParent, OS.WM_CANCELMODE, 0, 0);\r", "-\t\treturn;\r", "-\t}\r", "-\tint flags = OS.TPM_LEFTBUTTON | OS.TPM_RIGHTBUTTON | OS.TPM_LEFTALIGN;\r", "-\tint nX = x, nY = y;\r", "-\tif (!hasLocation) {\r", "-\t\tint pos = OS.GetMessagePos ();\r", "-\t\tnX = (short) (pos & 0xFFFF);\r", "-\t\tnY = (short) (pos >> 16);\r", "-\t}\r", "-\t/*\r", "-\t* Feature in Windows.  It is legal use TrackPopupMenu ()\r", "-\t* to display an empty menu as long as menu items are added\r", "-\t* inside of WM_INITPOPUPMENU.  If no items are added, then\r", "-\t* TrackPopupMenu () fails and does not send an indication\r", "-\t* that the menu has been closed.  This is not strictly a\r", "-\t* bug but leads to unwanted behavior when application code\r", "-\t* assumes that every WM_INITPOPUPMENU will eventually result\r", "-\t* in a WM_MENUSELECT, wParam=0xFFFF0000, lParam=0 to indicate\r", "-\t* that the menu has been closed.  The fix is to detect the\r", "-\t* case when TrackPopupMenu fails and the number of items in\r", "-\t* the menu is zero and issue a fake WM_MENUSELECT.\r", "-\t*/\r", "-\tboolean success = OS.TrackPopupMenu (handle, flags, nX, nY, 0, hwndParent, null);\r", "-\tif (!success && GetMenuItemCount (handle) == 0) {\r", "-\t\tOS.SendMessage (hwndParent, OS.WM_MENUSELECT, 0xFFFF0000, 0);\r"]}], "num": 41678}
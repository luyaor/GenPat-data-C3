{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74af088ef6927d4b28b136f8e1572438", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9f925eb401b34b3e34569bf0dbb6b25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 61, "signatureBeforeChange": " boolean isSelectedItemCollapsing(TreeItem collapsingItem)", "signatureAfterChange": " void makeDescendentsAvailable(TreeItem item)", "diff": ["- */", "-boolean isSelectedItemCollapsing(TreeItem collapsingItem) {", "-\tEnumeration selection = getSelectionVector().elements();", "-\tTreeItem item;", "-\tint selectedItemIndex;", "-\tint collapsingItemIndex = collapsingItem.getVisibleIndex();", "-\tint lastCollapsedItemIndex = collapsingItemIndex + collapsingItem.getVisibleItemCount();", "-", "-\tif (collapsingItemIndex == -1) {\t\t\t\t\t// is the collapsing item in a collapsed subtree?", "-\t\treturn false;\t\t\t\t\t\t\t\t\t// then neither it nor its children are selected", "-\t}", "-\twhile (selection.hasMoreElements() == true) {", "-\t\titem = (TreeItem) selection.nextElement();", "-\t\tselectedItemIndex = item.getVisibleIndex();", "-\t\tif ((selectedItemIndex > collapsingItemIndex) &&", "-\t\t\t(selectedItemIndex <= lastCollapsedItemIndex)) {", "-\t\t\treturn true;", "-\t\t}", "-\t}", "-\treturn false;", "-}", "+void makeDescendentsAvailable(TreeItem item) {", "+\tint itemAvailableIndex = item.availableIndex;", "+\tTreeItem[] availableDescendents = item.computeAvailableDescendents();", "+\tTreeItem[] newAvailableItems = new TreeItem[availableItems.length + availableDescendents.length - 1];", "+\t", "+\tSystem.arraycopy(availableItems, 0, newAvailableItems, 0, itemAvailableIndex);", "+\tSystem.arraycopy(availableDescendents, 0, newAvailableItems, itemAvailableIndex, availableDescendents.length);", "+\tint startIndex = itemAvailableIndex + 1;", "+\tSystem.arraycopy(", "+\t\t\tavailableItems,", "+\t\t\tstartIndex,", "+\t\t\tnewAvailableItems,", "+\t\t\titemAvailableIndex + availableDescendents.length,", "+\t\t\tavailableItems.length - startIndex);", "+\tavailableItems = newAvailableItems;", "+\t", "+\t/* update availableIndex as needed */", "+\tfor (int i = itemAvailableIndex; i < availableItems.length; i++) {", "+\t\tavailableItems[i].availableIndex = i;", "+\t}", "+\t", "+\tupdateVerticalBar();", "+\tupdateHorizontalBar();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df9eca73b25d8fae8ad34c59dd7a98e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 60, "signatureBeforeChange": " void removingItem(SelectableItem item)", "signatureAfterChange": " void makeAvailable(TreeItem item)", "diff": ["+ */", "+void makeAvailable(TreeItem item) {", "+\tTreeItem parentItem = item.getParentItem();", "+\tint parentAvailableIndex = parentItem.availableIndex;", "+\tTreeItem[] parentAvailableDescendents = parentItem.computeAvailableDescendents();", "+\tTreeItem[] newAvailableItems = new TreeItem[availableItems.length + 1];", "+\t", "+\tSystem.arraycopy(availableItems, 0, newAvailableItems, 0, parentAvailableIndex);", "+\tSystem.arraycopy(parentAvailableDescendents, 0, newAvailableItems, parentAvailableIndex, parentAvailableDescendents.length);", "+\tint startIndex = parentAvailableIndex + parentAvailableDescendents.length - 1;", "+\tSystem.arraycopy(", "+\t\t\tavailableItems,", "+\t\t\tstartIndex,", "+\t\t\tnewAvailableItems,", "+\t\t\tparentAvailableIndex + parentAvailableDescendents.length,", "+\t\t\tavailableItems.length - startIndex);", "+\tavailableItems = newAvailableItems;", "+\t", "+\t/* update availableIndex as needed */", "+\tfor (int i = parentAvailableIndex; i < availableItems.length; i++) {", "+\t\tavailableItems[i].availableIndex = i;", "+\t}", "+\tupdateVerticalBar();", "+\tupdateHorizontalBar();", "- */", "-void removingItem(SelectableItem item) {", "-\tVector selection = getSelectionVector();", "-\tTreeItem parentItem = ((TreeItem) item).getParentItem();", "-\tTreeItem newSelectionItem = null;", "-\tboolean isLastSelected = (selection.size() == 1) && (selection.elementAt(0) == item);", "-\tint itemIndex = getVisibleIndex(item);", "-\t", "-\tif (isLastSelected == true) {", "-\t\t// try selecting the following item", "-\t\tnewSelectionItem = (TreeItem) getVisibleItem(itemIndex + 1);", "-\t\tif (newSelectionItem == null || newSelectionItem.getParentItem() != parentItem) {", "-\t\t\t// select parent item if there is no item following the removed  ", "-\t\t\t// one on the same tree level", "-\t\t\tnewSelectionItem = parentItem;", "-\t\t}", "-\t\tif (newSelectionItem != null) {", "-\t\t\tselectNotify(newSelectionItem, true);", "-\t\t}", "-\t}", "-\tsuper.removingItem(item);", "-\tif (isExpandingItem(item) == false) {", "-\t\t// redraw plus/minus image, hierarchy lines,", "-\t\t// redrawing here assumes that no update happens between now and ", "-\t\t// after the item has actually been removed. Otherwise this call ", "-\t\t// would need to be in removedItem and we would need to store the", "-\t\t// \"itemIndex\" here to redraw correctly.", "-\t\tredrawAfterModify(item, itemIndex);", "-\t}\t", "-}"]}], "num": 46946}
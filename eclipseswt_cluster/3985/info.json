{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a712729c0df15d675dc75aaf897620a0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd194442257ba8e362bac6921fb7515a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "6d149cea8448c374e850448d1db5d08377d92850", "commitAfterChange": "56fed3385518b20c64346b78a2691795f28c0e47", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " void setInputState (Event event, MacEvent mEvent)", "signatureAfterChange": " void setInputState (Event event, MacEvent mEvent)", "diff": ["+\t\t", "+\tif ((modifiers & OS.controlKey) != 0)", "+\t\tevent.stateMask |= SWT.CONTROL;", "+\t\t", "+\tif ((modifiers & OS.cmdKey) != 0) {", "+\t\t// if the Command modifier is pressed we report the Option modifier as 'ALT'", "+\t\tif ((modifiers & OS.optionKey) != 0)", "+\t\t\tevent.stateMask |= SWT.ALT;", "+\t} else {", "+\t\t// we don't report the option modifier as 'ALT'", "+\t}", "+\t/*", "+\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43fe012e177cd2f74da5fca5b76d8a3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "31462aa64c613f1f396a319c52c06f3d03b3cf9e", "commitAfterChange": "7add66a49dd4237025fd3d0537eeee6f7c1d3c8b", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": "  boolean translateTraversal (MSG msg)", "signatureAfterChange": "  boolean translateTraversal (MSG msg)", "diff": ["-\t\t\t/*", "-\t\t\t* NOTE: This code causes Shift+Tab and Ctrl+Tab to", "-\t\t\t* always attempt traversal which is not correct.", "-\t\t\t* The default should be the same as a plain Tab key.", "-\t\t\t* This behavior is currently relied on by StyledText.", "-\t\t\t*", "-\t\t\t* The correct behavior is to give every key to a", "-\t\t\t* control that answers DLGC_WANTALLKEYS.", "-\t\t\t*/", "-\t\t\t\tif (next && OS.GetKeyState (OS.VK_CONTROL) >= 0) doit = false;", "+\t\t\t\t/*", "+\t\t\t\t* Use DLGC_HASSETSEL to determine that the control is a", "+\t\t\t\t* text widget.  If the control is a text widget, then", "+\t\t\t\t* Ctrl+Tab and Shift+Tab should traverse out of the widget.", "+\t\t\t\t* If the control is not a text widget, the correct behavior", "+\t\t\t\t* is to give every character, including Tab, Ctrl+Tab and", "+\t\t\t\t* Shift+Tab to the control.", "+\t\t\t\t*/", "+\t\t\t\tif ((code & OS.DLGC_HASSETSEL) != 0) {", "+\t\t\t\t\tif (next && OS.GetKeyState (OS.VK_CONTROL) >= 0) {", "+\t\t\t\t\t\tdoit = false;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tdoit = false;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7f295e3323d96bbff9f1bf8bca628cf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "53eaef42c85a19c6c024eb953b35f15c33827e05", "commitAfterChange": "e8c16f7f9f6a3f2c095dfd48e874b4e7a9e7e851", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \r public StyledText(Composite parent, int style)", "signatureAfterChange": "\r \r public StyledText(Composite parent, int style)", "diff": ["-\tcontentWidth = new ContentWidthCache(this, content.getLineCount());\r", "+\tif ((style & SWT.WRAP) != 0) {\r", "+\t\tsetWordWrap(true);\r", "+\t}\r", "+\telse {\r", "+\t    lineCache = new ContentWidthCache(this, content.getLineCount());\r", "+\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd47da5db84c6b29df0cde177a52b8c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4a8b48005dbe8c39b8529848aa1dc4c75c0e55f2", "commitAfterChange": "a4937be1360636d4b1932f31a68e6aab4223fbcf", "methodNumberBeforeChange": 126, "methodNumberAfterChange": 126, "signatureBeforeChange": "\r \r boolean translateTraversal (MSG msg)", "signatureAfterChange": "\r \r boolean translateTraversal (MSG msg)", "diff": ["-\t\t\tif ((code & OS.DLGC_WANTALLKEYS) != 0) doit = false;\r", "+\t\t\tif ((code & OS.DLGC_WANTALLKEYS) != 0) {\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Use DLGC_HASSETSEL to determine that the control\r", "+\t\t\t\t* is a text widget.  A text widget normally wants\r", "+\t\t\t\t* all keys except VK_ESCAPE.  If this bit is not\r", "+\t\t\t\t* set, then assume the control wants all keys,\r", "+\t\t\t\t* including VK_ESCAPE.\r", "+\t\t\t\t*/\r", "+\t\t\t\tif ((code & OS.DLGC_HASSETSEL) == 0) doit = false;\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ac82ccfddb2199932844fc98398e14", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "11ac2f3e25c3ebc877d58d184c950549cb91c952", "commitAfterChange": "57b9842acd1291132b7d143eae1470dd1e6c9ef8", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  void setOrientation ()", "signatureAfterChange": "  void setOrientation ()", "diff": ["-\t\tif ((style & SWT.HORIZONTAL) != 0) {", "-\t\t\tOS.gtk_range_set_inverted (handle, true);", "+\t\tif ((parent.state & CANVAS) != 0) {", "+\t\t\tif ((style & SWT.HORIZONTAL) != 0) {", "+\t\t\t\tOS.gtk_range_set_inverted (handle, true);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50ddae02fd0956f31d3f2be216c98b6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "696d4c6839a3fdb7542a08cdd2e26ba5b9f3b4f3", "commitAfterChange": "4d75e53887d6f16ac3e72237cdfb7f10eb7e69df", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\tif (resizeCount != 0) {", "-\t\t\t\tOS.SendMessage (handle, OS.LVM_REDRAWITEMS, plvfi.iItem, plvfi.iItem);", "-\t\t\t\tbreak;", "+\t\t\t", "+\t\t\t/*", "+\t\t\t* When an item is being deleted from a virtual table, do not", "+\t\t\t* allow the application to provide data for a new item that", "+\t\t\t* becomes visible until the item has been removed from the", "+\t\t\t* items array.  Because arbitrary application code can run", "+\t\t\t* during the callback, the items array might be accessed", "+\t\t\t* in an inconsistent state.  Rather than answering the data", "+\t\t\t* right away, queue a redraw for later.", "+\t\t\t*/", "+\t\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\t\tif (ignoreShrink) {", "+\t\t\t\t\tOS.SendMessage (handle, OS.LVM_REDRAWITEMS, plvfi.iItem, plvfi.iItem);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c230a0f039c9f9b9f81802a142c5161d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5a9a9e5f9295043ec5974d96cdb97d66f5ec5cf0", "commitAfterChange": "523d99c206ac8f0072c134360cbddbddfbc8127f", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "  void setScrollWidth (int width)", "signatureAfterChange": "  void setScrollWidth (int width)", "diff": ["-\t\tOS.GetClientRect (hwndParent, rect);", "-\t\tOS.GetScrollInfo (hwndParent, OS.SB_HORZ, info);", "-\t\tinfo.nMax = width;", "-\t\tinfo.nPage = rect.right - rect.left + 1;", "-\t\tOS.SetScrollInfo (hwndParent, OS.SB_HORZ, info, true);", "-\t\tinfo.fMask = OS.SIF_POS;", "-\t\tOS.GetScrollInfo (hwndParent, OS.SB_HORZ, info);", "-\t\tleft = info.nPos;", "+\t\tif ((style & SWT.H_SCROLL) != 0) {", "+\t\t\tOS.GetClientRect (hwndParent, rect);", "+\t\t\tOS.GetScrollInfo (hwndParent, OS.SB_HORZ, info);", "+\t\t\tinfo.nMax = width;", "+\t\t\tinfo.nPage = rect.right - rect.left + 1;", "+\t\t\tOS.SetScrollInfo (hwndParent, OS.SB_HORZ, info, true);", "+\t\t\tinfo.fMask = OS.SIF_POS;", "+\t\t\tOS.GetScrollInfo (hwndParent, OS.SB_HORZ, info);", "+\t\t\tleft = info.nPos;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7de28390e29ad237943dc4a4e4b077b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "f208b51c5168285826cce0c0f828f130c8b96679", "commitAfterChange": "c1a47d4a74210ad64a138d934c78f751ddd197ef", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void drawRect (int id, NSRect rect)", "signatureAfterChange": "  void drawRect (int id, NSRect rect)", "diff": ["-\tsuper.drawRect (id, rect);", "-\t\tif (background != null && !background.isDisposed ()) {", "-\t\t\tfloat [] color = background.handle;", "-\t\t\tNSGraphicsContext context = NSGraphicsContext.currentContext();", "-\t\t\tcontext.saveGraphicsState();", "-\t\t\tNSColor.colorWithDeviceRed(color [0], color [1], color [2], color [3]).setFill();", "-\t\t\tNSBezierPath.fillRect(rect);", "-\t\t\tcontext.restoreGraphicsState();", "+\t\tif ((style & SWT.NO_BACKGROUND) == 0) {", "+\t\t\tif (background != null && !background.isDisposed ()) {", "+\t\t\t\tfloat [] color = background.handle;", "+\t\t\t\tNSGraphicsContext context = NSGraphicsContext.currentContext();", "+\t\t\t\tcontext.saveGraphicsState();", "+\t\t\t\tNSColor.colorWithDeviceRed(color [0], color [1], color [2], color [3]).setFill();", "+\t\t\t\tNSBezierPath.fillRect(rect);", "+\t\t\t\tcontext.restoreGraphicsState();", "+\t\t\t}", "+\tsuper.drawRect (id, rect);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "721b1ec293155229580bbe38b8db8dca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "beca6310b5a08f08f4d4efeb88b832d208de8eb6", "commitAfterChange": "d568380273663f2b870a5b1ce8bc091ac7243403", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 44, "signatureBeforeChange": "  public void setDay (int day)", "signatureAfterChange": "  public void setDay (int day)", "diff": ["+", "-\tdateRec.day = (short)day;", "-\tOS.SetControlData (handle, (short)OS.kControlEntireControl, OS.kControlClockLongDateTag, LongDateRec.sizeof, dateRec);", "-\tOS.GetControlData (handle, (short)OS.kControlEntireControl, OS.kControlClockLongDateTag, LongDateRec.sizeof, dateRec, null);", "-\tredraw();", "+\tif ((style & SWT.CALENDAR) != 0) {", "+\t\tsetDay(day, false);", "+\t} else {", "+\t\tdateRec.day = (short)day;", "+\t\tOS.SetControlData (handle, (short)OS.kControlEntireControl, OS.kControlClockLongDateTag, LongDateRec.sizeof, dateRec);", "+\t\tOS.GetControlData (handle, (short)OS.kControlEntireControl, OS.kControlClockLongDateTag, LongDateRec.sizeof, dateRec, null);", "+\t\tredraw();", "+\t}"]}], "num": 3985}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14ba32783b99344154d1a2c900aa8669", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ba9f9809c0d5f182b23c00f45e17d6d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "b59c4fffa07de3eacd340320122e3f64e74d8809", "commitAfterChange": "12139012e040ff572bb2d7ef4f64f6412e24565d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\tif (profileFolder == null) {", "-\t\tint rc = XPCOM.NS_GetServiceManager(result);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t", "-\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "-\t\tresult[0] = 0;\t\t", "-\t\t/* Create a temporary profile */", "-\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "-\t\tbyte[] aContractID = new byte[buffer.length + 1];", "-\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "-\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\tserviceManager.Release();", "-", "-\t\tnsIProfile profile = new nsIProfile(result[0]);", "-\t\tresult[0] = 0;", "-\t\tString randomName = \"org.eclipse.swt.browser.Browser_\" + Long.toHexString(System.currentTimeMillis()); //$NON-NLS-1$", "-\t\tchar[] profileName = new char[randomName.length() + 1];", "-\t\trandomName.getChars(0, randomName.length(), profileName, 0);", "-\t\tString folder = new File(System.getProperty(\"java.io.tmpdir\"), randomName).getAbsolutePath();", "-\t\tchar[] nativeProfileDir = new char[folder.length() + 1];", "-\t\tfolder.getChars(0, folder.length(), nativeProfileDir, 0);", "-\t\trc = profile.CreateNewProfile(profileName, nativeProfileDir, null, false);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\trc = profile.SetCurrentProfile(profileName);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t/*", "-\t\t* Feature in Mozilla.  The guest profile created with CreateNewProfile can be seen in a", "-\t\t* standalone Mozilla inside the \"User Profile Dialog\". That behaviour is unwanted.  The", "-\t\t* workaround is to remove the profile from the profile list immediately after it has been", "-\t\t* created. The temporary folder storing the profile must be deleted when the display is disposed.", "-\t\t*/", "-\t\trc = profile.DeleteProfile(profileName, false);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tprofile.Release();", "-\t\t", "-\t\tprofileFolder = folder;", "-\t\t", "-\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "-\t\t\tpublic void handleEvent(Event e) {", "-\t\t\t\t/* Delete the temporary profile */", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\t\t\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "-\t\t\t\tbyte[] aContractID = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\t\tserviceManager.Release();", "-\t\t\t\t", "-\t\t\t\tnsIProfile profile = new nsIProfile(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = profile.ShutDownCurrentProfile(nsIProfile.SHUTDOWN_CLEANSE);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tprofile.Release();\t\t\t", "-", "-\t\t\t\tdeleteFile(new File(profileFolder));", "-\t\t\t\t", "-\t\t\t\t/*", "-\t\t\t\t* Note.  It is possible a new Display and a new Browser be created", "-\t\t\t\t* next.  In that case, a new profile must be created. ", "-\t\t\t\t*/", "-\t\t\t\tprofileFolder = null;", "-\t\t\t}", "-\t\t});", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e5721a5d5ff3f4f1899c11938a32eda", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "c13b22837b30fd90fa15a29afe63a567bc3f87e5", "commitAfterChange": "3a5ece72c305410ded2cd14b2fb9617ac7003ab1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void generateClasses()", "signatureAfterChange": "  void generateClasses()", "diff": ["-void generateClasses() {", "-\tHashMap classes = new HashMap();", "-\t\t\t\tMap methods;", "-\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "-\t\t\t\t\tmethods = new TreeMap();", "-\t\t\t\t\tmethods = (TreeMap)clazz[1];", "-\t\t\t\t\t\tNamedNodeMap mthAttributes = method.getAttributes();", "-\t\t\t\t\t\tString selector = mthAttributes.getNamedItem(\"selector\").getNodeValue();", "-\t\t\t\t\t\tNode other = (Node)methods.get(selector);", "-\t\t\t\t\t\tif (other == null) {", "-\t\t\t\t\t\t\tmethods.put(selector, method);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tboolean isStatic = mthAttributes.getNamedItem(\"class_method\") != null;", "-\t\t\t\t\t\t\tboolean otherIsStatic = other.getAttributes().getNamedItem(\"class_method\") != null;", "-\t\t\t\t\t\t\tif (isStatic != otherIsStatic) {", "-\t\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\t\tmethods.put(\"static_\" + selector, method);", "-\t\t\t\t\t\t\t\t\tmethods.put(selector, other);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tmethods.put(\"static_\" + selector, other);", "-\t\t\t\t\t\t\t\t\tmethods.put(selector, method);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+", "+void generateClasses() {", "+\tTreeMap classes = getGeneratedClasses();", "+\tcopyClassMethodsDown(classes);", "+\t", "-\t\tString className = (String) iterator.next();", "-\t\tObject[] clazz = (Object[])classes.get(className);", "-\t\tNode node = (Node)clazz[0];", "-\t\tTreeMap methods = (TreeMap)clazz[1];", "-\t\tNamedNodeMap attributes = node.getAttributes();", "+", "+\t\tString className = (String) iterator.next();", "+\t\tObject[] clazz = (Object[])classes.get(className);", "+\t\tNode node = (Node)clazz[0];", "+\t\tArrayList methods = (ArrayList)clazz[1];", "-\t\tif (className.equals(\"NSObject\")) {", "-\t\t\tout(\" extends id {\");", "-\t\t} else {", "-\t\t\tNode superclass = attributes.getNamedItem(\"swt_superclass\");", "-\t\t\tout(\" extends \");", "-\t\t\tif (superclass != null) {", "-\t\t\t\tout(superclass.getNodeValue());", "-\t\t\t} else {", "-\t\t\t\tout(\"NSObject\");", "-\t\t\t}", "-\t\t\tout(\" {\");", "-\t\t}", "+\t\tout(\" extends \");", "+\t\tout(getSuperclassName(node));", "+\t\tout(\" {\");", "-\t\toutln();", "-\t\tout(\"public \");", "-\t\tout(className);", "-\t\tout(\"() {\");", "-\t\toutln();", "-\t\tout(\"\\tsuper();\");", "-\t\toutln();", "-\t\tout(\"}\");", "-\t\toutln();", "-\t\toutln();", "-\t\tout(\"public \");", "-\t\tout(className);", "-\t\tout(\"(int /*long*/ id) {\");", "-\t\toutln();", "-\t\tout(\"\\tsuper(id);\");", "-\t\toutln();", "-\t\tout(\"}\");", "-\t\toutln();", "-\t\toutln();", "-\t\tout(\"public \");", "-\t\tout(className);", "-\t\tout(\"(id id) {\");", "-\t\toutln();", "-\t\tout(\"\\tsuper(id);\");", "-\t\toutln();", "-\t\tout(\"}\");", "-\t\toutln();", "-\t\toutln();", "-\t\tif (className.equals(\"NSString\")) {", "-\t\t\tout(\"public String getString() {\");", "-\t\t\toutln();", "-\t\t\tout(\"\\tchar[] buffer = new char[length()];\");", "-\t\t\toutln();", "-\t\t\tout(\"\\tgetCharacters(buffer);\");", "-\t\t\toutln();", "-\t\t\tout(\"\\treturn new String(buffer);\");", "-\t\t\toutln();", "-\t\t\tout(\"}\");", "-\t\t\toutln();", "-\t\t\toutln();", "-\t\t\tout(\"public static NSString stringWith(String str) {\");", "-\t\t\toutln();", "-\t\t\tout(\"\\tchar[] buffer = new char[str.length()];\");", "-\t\t\toutln();", "-\t\t\tout(\"\\tstr.getChars(0, buffer.length, buffer, 0);\");", "-\t\t\toutln();", "-\t\t\tout(\"\\treturn stringWithCharacters(buffer, buffer.length);\");", "-\t\t\toutln();", "-\t\t\tout(\"}\");", "-\t\t\toutln();", "-\t\t\toutln();", "-\t\t}", "-\t\t", "-\t\tgenerateMethods(className, methods);", "-\t\t", "+\t\toutln();\t\t", "+\t\tgenerateExtraMethods(className);", "+\t\tgenerateMethods(className, methods);\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70844c42b390329c9d999fec6e2aa158", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "a1b298ef9cb022d6b7d81fce88e5ceb6dd70af0a", "commitAfterChange": "b59c4fffa07de3eacd340320122e3f64e74d8809", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\t}", "-\t\tif (System.getProperty(\"java.io.tmpdir\") == null) { //$NON-NLS-1$", "-\t\t\tdispose();", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Missing system property java.io.tmpdir is required to create Mozilla profile]\"); //$NON-NLS-1$", "-\tif (profileFolder == null) {", "-\t\tint rc = XPCOM.NS_GetServiceManager(result);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t", "-\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "-\t\tresult[0] = 0;\t\t", "-\t\t/* Create a temporary profile */", "-\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "-\t\tbyte[] aContractID = new byte[buffer.length + 1];", "-\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "-\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\tserviceManager.Release();", "-", "-\t\tnsIProfile profile = new nsIProfile(result[0]);", "-\t\tresult[0] = 0;", "-\t\tString randomName = \"org.eclipse.swt.browser.Browser_\" + Long.toHexString(System.currentTimeMillis()); //$NON-NLS-1$", "-\t\tchar[] profileName = new char[randomName.length() + 1];", "-\t\trandomName.getChars(0, randomName.length(), profileName, 0);", "-\t\tString folder = new File(System.getProperty(\"java.io.tmpdir\"), randomName).getAbsolutePath();", "-\t\tchar[] nativeProfileDir = new char[folder.length() + 1];", "-\t\tfolder.getChars(0, folder.length(), nativeProfileDir, 0);", "-\t\trc = profile.CreateNewProfile(profileName, nativeProfileDir, null, false);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\trc = profile.SetCurrentProfile(profileName);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t/*", "-\t\t* Feature in Mozilla.  The guest profile created with CreateNewProfile can be seen in a", "-\t\t* standalone Mozilla inside the \"User Profile Dialog\". That behaviour is unwanted.  The", "-\t\t* workaround is to remove the profile from the profile list immediately after it has been", "-\t\t* created. The temporary folder storing the profile must be deleted when the display is disposed.", "-\t\t*/", "-\t\trc = profile.DeleteProfile(profileName, false);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tprofile.Release();", "-\t\t", "-\t\tprofileFolder = folder;", "-\t\t", "-\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "-\t\t\tpublic void handleEvent(Event e) {", "-\t\t\t\t/* Delete the temporary profile */", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\t\t\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "-\t\t\t\tbyte[] aContractID = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\t\tserviceManager.Release();", "-\t\t\t\t", "-\t\t\t\tnsIProfile profile = new nsIProfile(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = profile.ShutDownCurrentProfile(nsIProfile.SHUTDOWN_CLEANSE);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tprofile.Release();\t\t\t", "-", "-\t\t\t\tdeleteFile(new File(profileFolder));", "-\t\t\t\t", "-\t\t\t\t/*", "-\t\t\t\t* Note.  It is possible a new Display and a new Browser be created", "-\t\t\t\t* next.  In that case, a new profile must be created. ", "-\t\t\t\t*/", "-\t\t\t\tprofileFolder = null;", "-\t\t\t}", "-\t\t});", "-\t}", "-}"]}], "num": 1945}
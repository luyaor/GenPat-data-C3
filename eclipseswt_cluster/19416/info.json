{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64b0bb2a5a3ead0a5da49709d3b25e60", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "940d9b8cc1b46d6645e1d2a771edbb26", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 12, "signatureBeforeChange": " void removeItem(TableItem item)", "signatureAfterChange": " void createItem (TableItem item)", "diff": ["+}", "+void createItem (TableItem item) {", "+\tint index = item.index;", "+\tTableItem[] newItems = new TableItem [items.length + 1];", "+\tSystem.arraycopy (items, 0, newItems, 0, index);", "+\tnewItems [index] = item;", "+\tSystem.arraycopy (items, index, newItems, index + 1, items.length - index);", "+\titems = newItems;", "+", "+\t/* update the index for items bumped down by this new item */", "+\tfor (int i = index + 1; i < items.length; i++) {", "+\t\titems [i].index = i;", "+\t}", "+", "+\t/* update scrollbars */", "+\tupdateVerticalBar ();", "+\tRectangle bounds = item.getBounds ();", "+\tint rightX = bounds.x + bounds.width;", "+\tupdateHorizontalBar (rightX, rightX);", "+\t/* ", "+\t * If new item is above viewport then adjust topIndex and the vertical", "+\t * scrollbar so that the current viewport items will not change.", "+\t */", "+\tif (item.index < topIndex) {", "+\t\ttopIndex++;", "+\t\tgetVerticalBar ().setSelection (topIndex);", "+\t\treturn;", "+\t}", "+", "+\tredrawFromItemDownwards (index);", "+}", "- */", "-void removeItem(TableItem item) {", "-\tif (isRemovingAll() == true) return;", "-\t", "-\tVector items = getItemVector();", "-\tint index = items.indexOf(item);", "-\tif (index != -1) {\t\t", "-\t\tremovingItem(item);\t\t\t\t", "-\t\titems.removeElementAt(index);", "-\t\tfor (int i = index; i < items.size(); i++) {", "-\t\t\tTableItem anItem = (TableItem) items.elementAt(i);", "-\t\t\tanItem.setIndex(anItem.getIndex() - 1);", "-\t\t}\t\t", "-\t\tremovedItem(item);\t\t", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "281eef815affdd50ff6286663ad9129b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 59, "signatureBeforeChange": " Image getCollapsedImage()", "signatureAfterChange": " void itemDisposing(TreeItem item)", "diff": ["- */", "-Image getCollapsedImage() {", "-\tif (collapsedImage == null) {", "-\t\tcollapsedImage = new Image(display, CollapsedImageData);", "-\t}", "-\treturn collapsedImage;", "-}", "+void itemDisposing(TreeItem item) {", "+\tint availableIndex = item.availableIndex; ", "+\tif (availableIndex != -1) {", "+\t\tTreeItem[] newAvailableItems = new TreeItem[availableItems.length - 1];", "+\t\tSystem.arraycopy(availableItems, 0, newAvailableItems, 0, availableIndex);", "+\t\tSystem.arraycopy(", "+\t\t\tavailableItems,", "+\t\t\tavailableIndex + 1,", "+\t\t\tnewAvailableItems,", "+\t\t\tavailableIndex,", "+\t\t\tnewAvailableItems.length - availableIndex);", "+\t\tavailableItems = newAvailableItems;", "+\t\t/* update the availableIndex on affected items */", "+\t\tfor (int i = availableIndex; i < availableItems.length; i++) {", "+\t\t\tavailableItems[i].availableIndex = i;", "+\t\titem.availableIndex = -1;", "+\t\tupdateVerticalBar();", "+\t\tupdateHorizontalBar();", "+\tif (item.isSelected()) {", "+\t\tint selectionIndex = getSelectionIndex(item);", "+\t\tTreeItem[] newSelectedItems = new TreeItem[selectedItems.length - 1];", "+\t\tSystem.arraycopy(selectedItems, 0, newSelectedItems, 0, selectionIndex);", "+\t\tSystem.arraycopy(", "+\t\t\tselectedItems,", "+\t\t\tselectionIndex + 1,", "+\t\t\tnewSelectedItems,", "+\t\t\tselectionIndex,", "+\t\t\tnewSelectedItems.length - selectionIndex);", "+\t\tselectedItems = newSelectedItems;", "+\tif (item.isRoot()) {", "+\t\tint index = item.getIndex();", "+\t\tTreeItem[] newItems = new TreeItem[items.length - 1];", "+\t\tSystem.arraycopy(items, 0, newItems, 0, index);", "+\t\tSystem.arraycopy(items, index + 1, newItems, index, newItems.length - index);", "+\t\titems = newItems;", "+\tif (item == focusItem) reassignFocus();", "+\tif (item == anchorItem) anchorItem = null;", "+\tif (item == insertMarkItem) insertMarkItem = null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7d0d50ea3fb75724ddf3486282cdcbb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 18, "signatureBeforeChange": " void setItemVector(Vector newVector)", "signatureAfterChange": " void destroyItem (TableItem item)", "diff": ["+void destroyItem (TableItem item) {", "+\tint index = item.index;", "+\tRectangle bounds = item.getBounds ();", "+\tint rightX = bounds.x + bounds.width;", "+", "+\tTableItem[] newItems = new TableItem [items.length - 1];", "+\tSystem.arraycopy (items, 0, newItems, 0, index);", "+\tSystem.arraycopy (items, index + 1, newItems, index, newItems.length - index);", "+\titems = newItems;", "+", "+\t/* update the index on affected items */", "+\tfor (int i = index; i < items.length; i++) {", "+\t\titems [i].index = i;", "+\t}", "+\titem.index = -1;", "+\tint oldTopIndex = topIndex;", "+\tupdateVerticalBar ();", "+\tupdateHorizontalBar (0, -rightX);", "+\t/* ", "+\t * If destroyed item is above viewport then adjust topIndex and the vertical", "+\t * scrollbar so that the current viewport items will not change. ", "+\t */", "+\tif (index < topIndex) {", "+\t\ttopIndex = oldTopIndex - 1;", "+\t\tgetVerticalBar ().setSelection (topIndex);", "+\t/* selectedItems array */", "+\tif (item.isSelected ()) {", "+\t\tint selectionIndex = getSelectionIndex (item);", "+\t\tTableItem[] newSelectedItems = new TableItem [selectedItems.length - 1];", "+\t\tSystem.arraycopy (selectedItems, 0, newSelectedItems, 0, selectionIndex);", "+\t\tSystem.arraycopy (", "+\t\t\tselectedItems,", "+\t\t\tselectionIndex + 1,", "+\t\t\tnewSelectedItems,", "+\t\t\tselectionIndex,", "+\t\t\tnewSelectedItems.length - selectionIndex);", "+\t\tselectedItems = newSelectedItems;", "+\tif (item == focusItem) reassignFocus ();", "+\tif (item == anchorItem) anchorItem = null;", "- */", "-void setItemVector(Vector newVector) {", "-\titems = newVector;", "-}"]}], "num": 19416}
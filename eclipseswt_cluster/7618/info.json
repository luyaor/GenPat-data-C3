{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cfffe9e97f3617533ce1db69231f211", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "052c3927de81fd59b8947ee2f2f9f5a6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 85, "signatureBeforeChange": " public void showItem(TreeItem item)", "signatureAfterChange": " public void showItem(TreeItem item)", "diff": ["- */", "+}", "-\tif (item == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tif (item == null) error(SWT.ERROR_NULL_ARGUMENT);", "-\tshowSelectableItem(item);", "-}", "+\tif (item.getParent() != this) return;", "+\t", "+\tif (!item.isAvailable()) item.getParentItem().expandAncestors();", "+\t", "+\tint index = item.availableIndex;", "+\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "+\t/* determine if item is already visible */", "+\tif (topIndex <= index && index < topIndex + visibleItemCount) return;", "+\t", "+\tif (index <= topIndex) {", "+\t\t/* item is above current viewport, so show on top */", "+\t\tsetTopItem(item);", "+\t} else {", "+\t\t/* item is below current viewport, so show on bottom */", "+\t\tsetTopItem(availableItems[Math.min(index - visibleItemCount + 1, availableItems.length - 1)]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f003dd479af201b1f02f31f8230ba2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void showItem(TableItem item)", "signatureAfterChange": " public void showItem (TableItem item)", "diff": ["- */", "-public void showItem(TableItem item) {", "-\tcheckWidget();", "-\tif (item == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tif (item.isDisposed()) error(SWT.ERROR_INVALID_ARGUMENT);", "-\tshowSelectableItem(item);", "+public void showItem (TableItem item) {", "+\tcheckWidget ();", "+\tif (item == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tif (item.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tif (item.parent != this) return;", "+\t", "+\tint index = item.index;", "+\tint visibleItemCount = (getClientArea ().height - getHeaderHeight ()) / itemHeight;", "+\t/* nothing to do if item is already in viewport */", "+\tif (topIndex <= index && index < topIndex + visibleItemCount) return;", "+\t", "+\tif (index <= topIndex) {", "+\t\t/* item is above current viewport, so show on top */", "+\t\tsetTopIndex (item.index);", "+\t} else {", "+\t\t/* item is below current viewport, so show on bottom */", "+\t\tsetTopIndex (Math.min (index - visibleItemCount + 1, items.length - 1));", "+\t}", "+}"]}], "num": 7618}
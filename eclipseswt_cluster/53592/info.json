{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9a26bf7a62e5b7245d06cc22ecf7bcd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b49a3e6601cdf943a6a539f1e6d11d9e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "6930fdd35d9cdffd6d05c778fb4b82a2018d7fcb", "commitAfterChange": "4b4619a6b5b2cd61a37c980601ead9593d587b9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void applyEditSegments ()", "signatureAfterChange": "  void applyEditSegments ()", "diff": ["-\tif (!hooks (SWT.Segments) && !filters (SWT.Segments)) return;", "+\tif (!hooks (SWT.Segments) && !filters (SWT.Segments) && (state & HAS_AUTO_DIRECTION) == 0) return;", "-", "-\t/* Get segments text */", "-\tEvent event = new Event ();", "-\tevent.text = string;", "-\tevent.segments = segments;", "-\tsendEvent (SWT.Segments, event);", "+\t/* Get segments */", "+\tsegments = null;", "+\tEvent event = getSegments (string);", "+\tif (event == null || event.segments == null) return;", "-\tif (segments == null) return;", "-\tint nSegments = segments.length;", "+\tint nSegments = segments.length; ", "-\tlength = string == null ? 0 : string.length ();", "-", "-\tfor (int i = 1; i < nSegments; i++) {", "-\t\tif (event.segments [i] < event.segments [i - 1] || event.segments [i] > length) {", "-\t\t\terror (SWT.ERROR_INVALID_ARGUMENT);", "-\t\t}", "-\t}", "-", "+\t}", "+\tif (segmentsChars != null && segmentsChars.length > 0) {", "+\t\t/* ", "+\t\t * In addition to enforcing the required direction by prepending a UCC (LRE", "+\t\t * or RLE), also set the direction through a Window style.", "+\t\t * This is to ensure correct caret movement, and makes sense even when the", "+\t\t * UCC was added by an authentic SegmentListener.", "+\t\t */", "+\t\tif (segmentsChars[0] == RLE) {", "+\t\t\tsuper.updateTextDirection(SWT.RIGHT_TO_LEFT);", "+\t\t} else if (segmentsChars[0] == LRE) {", "+\t\t\tsuper.updateTextDirection(SWT.LEFT_TO_RIGHT);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f990168fe0001c9786e481fdf7fafa73", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "6930fdd35d9cdffd6d05c778fb4b82a2018d7fcb", "commitAfterChange": "4b4619a6b5b2cd61a37c980601ead9593d587b9d", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  Event getSegments (String string)", "signatureAfterChange": "  Event getSegments (String string)", "diff": ["-\tif (!hooks (SWT.Segments) && !filters (SWT.Segments)) return null;", "-\tEvent event = new Event ();", "-\tevent.text = string;", "-\tsendEvent (SWT.Segments, event);", "-\tif (event.segments != null) {", "-\t\tfor (int i = 1, segmentCount = event.segments.length, lineLength = string == null ? 0 : string.length(); i < segmentCount; i++) {", "-\t\t\tif (event.segments[i] < event.segments[i - 1] || event.segments[i] > lineLength) {", "-\t\t\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\tEvent event = null;", "+\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\tevent = new Event ();", "+\t\tevent.text = string;", "+\t\tsendEvent (SWT.Segments, event);", "+\t\tif (event != null && event.segments != null) {", "+\t\t\tfor (int i = 1, segmentCount = event.segments.length, lineLength = string == null ? 0 : string.length(); i < segmentCount; i++) {", "+\t\t\t\tif (event.segments[i] < event.segments[i - 1] || event.segments[i] > lineLength) {", "+\t\t\t\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\t\t}", "+\t}", "+\tif ((state & HAS_AUTO_DIRECTION) != 0) {", "+\t\tint direction = resolveTextDirection(string);", "+\t\tif (direction == SWT.NONE) {", "+\t\t\t/*", "+\t\t\t * Force adding a UCC even when no strong characters are found.", "+\t\t\t * Otherwise, the widget would keep the old direction, which might be", "+\t\t\t * inappropriate for the new text.", "+\t\t\t */", "+\t\t\tdirection = (style & SWT.RIGHT_TO_LEFT) != 0 ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT;", "+\t\t}", "+\t\tint [] oldSegments = null;", "+\t\tchar [] oldSegmentsChars = null;", "+\t\tif (event == null) {", "+\t\t\tevent = new Event ();", "+\t\t} else {", "+\t\t\toldSegments = event.segments;", "+\t\t\toldSegmentsChars = event.segmentsChars;", "+\t\t}", "+\t\tint nSegments = oldSegments == null ? 0 : oldSegments.length;", "+\t\tevent.segments = new int [nSegments + 1];", "+\t\tevent.segmentsChars = new char [nSegments + 1];", "+\t\tif (oldSegments != null) {", "+\t\t\tSystem.arraycopy(oldSegments, 0, event.segments, 1, nSegments);", "+\t\t}", "+\t\tif (oldSegmentsChars != null) {", "+\t\t\tSystem.arraycopy(oldSegmentsChars, 0, event.segmentsChars, 1, nSegments);", "+\t\t}", "+\t\tevent.segments [0] = 0;", "+\t\tevent.segmentsChars [0] = direction == SWT.RIGHT_TO_LEFT ? RLE : LRE;"]}], "num": 53592}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be76d8190d7339345098f9f9b53be344", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3830db6fd91864936bf1a17268a7e591", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 91, "signatureBeforeChange": "\r int drawLineSelection(String line, int lineOffset, int selectionStartOffset, int selectionLength, StyleRange[] styles, int paintY, GC gc)", "signatureAfterChange": "\r void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi)", "diff": ["-int drawLineSelection(String line, int lineOffset, int selectionStartOffset, int selectionLength, StyleRange[] styles, int paintY, GC gc) {\r", "+void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi) {\r", "-\tint selectionBackgroundWidth;\r", "+\tint selectionBackgroundWidth = -1;\r", "+\tint selectionStart = Math.max(0, selection.x - lineOffset);\r", "+\tint selectionEnd = selection.y - lineOffset;\r", "+\tint selectionLength = selectionEnd - selectionStart;\r", "-\tstyles = filterLineStyles(styles);\r", "-\tpaintX = textWidth(line, lineOffset, 0, selectionStartOffset, styles, 0, gc);\r", "-\tif (selectionStartOffset + selectionLength > lineLength) {\r", "-\t\tselectionLength = lineLength - selectionStartOffset;\r", "+\tif (selectionEnd == selectionStart || selectionEnd < 0 || selectionStart > lineLength) {\r", "+\t\treturn;\r", "+\t}\r", "+\tpaintX = textWidth(line, lineOffset, 0, selectionStart, filterLineStyles(styles), 0, gc, bidi);\t\r", "+\t// selection extends past end of line?\r", "+\tif (selectionEnd > lineLength) {\r", "-\t\t\t// if the selection extends beyond this line, render an \r", "-\t\t\t// additional whitespace to represent the selected line break\r", "-\t\t\tselectionBackgroundWidth = textWidth(line + \" \", lineOffset, selectionStartOffset, selectionLength + 1, styles, paintX, gc);\r", "+\t\t\tselectionLength = lineLength - selectionStart;\r", "-\telse {\r", "-\t\tselectionBackgroundWidth = textWidth(line, lineOffset, selectionStartOffset, selectionLength, styles, paintX, gc);\r", "-\t}\t\r", "+\tif (selectionBackgroundWidth == -1) {\r", "+\t\tselectionBackgroundWidth = textWidth(line, lineOffset, selectionStart, selectionLength, styles, paintX, gc, bidi);\r", "+\t\tif (selectionBackgroundWidth < 0) {\r", "+\t\t\t// width can be negative when in R2L bidi segment\r", "+\t\t\tpaintX += selectionBackgroundWidth;\r", "+\t\t\tselectionBackgroundWidth *= -1;\r", "+\t\t}\r", "+\t\tif (selectionEnd > lineLength) {\r", "+\t\t\tselectionEnd = selectionStart + selectionLength;\r", "+\t\t\t// if the selection extends past this line, render an additional whitespace\r", "+\t\t\t// background at the end of the line to represent the selected line break\r", "+\t\t\tif (bidi != null && selectionEnd > 0 && bidi.isRightToLeft(selectionEnd - 1)) {\r", "+\t\t\t\tint lineEndX = bidi.getTextWidth();\r", "+\t\t\t\tgc.fillRectangle(lineEndX - horizontalScrollOffset, paintY, lineEndSpaceWidth, lineHeight);\r", "+\t\t\t}\r", "+\t\t\telse {\r", "+\t\t\t\tselectionBackgroundWidth += lineEndSpaceWidth;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\t\r", "+\t// handle empty line case\r", "+\tif (bidi != null && (paintX == 0)) {\r", "+\t\tpaintX = xInset;\t\r", "+\t}\r", "-\tdrawText(line, lineOffset, selectionStartOffset, selectionLength, styles, paintX, paintY, gc);\r", "-\treturn paintX + selectionBackgroundWidth;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207d50593bfc5c3391af31d633c91dc4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/DisplayRenderer.java", "commitBeforeChange": "3d9a745937224b38cf406ad93b5005f8ff95bd1b", "commitAfterChange": "1cb1a83b374d003844ef54f22d246c9e3e7d60bd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi)", "signatureAfterChange": " protected void drawLineBreakSelection(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi)", "diff": ["-protected void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi) {", "+protected void drawLineBreakSelection(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi) {", "-\tLineCache lineCache = parent.internalGetLineCache();", "-\tStyledTextContent content = getContent();", "-\tint selectionBackgroundWidth = -1;", "-\tint selectionLength = selectionEnd - selectionStart;", "-\tboolean wordWrap = parent.internalGetWordWrap();", "-\tboolean isRightOriented = (parent.getStyle() & SWT.MIRRORED) != 0;", "-\tif (selectionEnd == selectionStart || selectionEnd < 0 || selectionStart > lineLength) {", "+\tif (selectionEnd == selectionStart || selectionEnd < 0 || selectionStart > lineLength || selectionEnd <= lineLength) {", "-\t\tpaintX = parent.getBidiTextPosition(line, selectionStart, bidi);", "+\t\tpaintX = bidi.getTextWidth();", "+\t\t// handle empty line case", "+\t\tif (paintX == 0) {", "+\t\t\tpaintX = StyledText.XINSET;", "+\t\t}", "-\t\tpaintX = getTextPosition(line, lineOffset, selectionStart, filterLineStyles(styles), gc);", "-\t}", "-\t// selection extends past end of line?", "-\tif (selectionEnd > lineLength) {", "-\t\tif ((parent.getStyle() & SWT.FULL_SELECTION) != 0) {", "-\t\t\t// use the greater of the client area width and the content ", "-\t\t\t// width. fixes 1G8IYRD", "-\t\t\tselectionBackgroundWidth = Math.max(getClientArea().width, lineCache.getWidth());", "-\t\t}", "-\t\telse {", "-\t\t\tselectionLength = lineLength - selectionStart;", "-\t\t}", "+\t\tpaintX = getTextPosition(line, lineOffset, lineLength, filterLineStyles(styles), gc);", "-\tif (selectionBackgroundWidth == -1) {", "+\tif ((parent.getStyle() & SWT.FULL_SELECTION) != 0) {", "+\t\tLineCache lineCache = parent.internalGetLineCache();", "+\t\t// use the greater of the client area width and the content ", "+\t\t// width. fixes 1G8IYRD", "+\t\tint selectionBackgroundWidth = Math.max(getClientArea().width, lineCache.getWidth());", "+\t\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, selectionBackgroundWidth, lineHeight);", "+\t}", "+\telse {", "-", "-\t\tif (wordWrap) {", "+\t\tif (parent.internalGetWordWrap()) {", "+\t\t\tStyledTextContent content = getContent();", "-\t\t\t// offset of this line?\t\t\t", "+\t\t\t// offset of this line?", "-\t\tif (bidi != null) {", "-\t\t\tselectionBackgroundWidth = parent.getBidiTextPosition(line, selectionStart + selectionLength, bidi) - paintX;", "-\t\t}", "-\t\telse {", "-\t\t\tselectionBackgroundWidth = getTextWidth(line, lineOffset, selectionStart, selectionLength, styles, paintX, gc);", "-\t\t}", "-\t\tif (selectionBackgroundWidth < 0) {", "-\t\t\t// width can be negative when in R2L bidi segment", "-\t\t\tpaintX += selectionBackgroundWidth;", "-\t\t\tselectionBackgroundWidth *= -1;", "-\t\t}", "-\t\tif (selectionEnd > lineLength && isWrappedLine == false) {", "-\t\t\tselectionEnd = selectionStart + selectionLength;", "-\t\t\t// if the selection extends past this line, render an additional ", "-\t\t\t// whitespace background at the end of the line to represent the ", "-\t\t\t// selected line break", "-\t\t\tif (bidi != null && selectionEnd > 0 && (bidi.isRightToLeft(selectionEnd - 1) || (isRightOriented && bidi.isRightToLeft(selectionEnd - 1) == false))) {", "-\t\t\t\tint lineEndX = bidi.getTextWidth();", "-\t\t\t\tgc.fillRectangle(lineEndX - horizontalScrollOffset + leftMargin, paintY, lineEndSpaceWidth, lineHeight);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tselectionBackgroundWidth += lineEndSpaceWidth;", "-\t\t\t}", "+\t\tif (isWrappedLine == false) {", "+\t\t\t// render the line break selection", "+\t\t\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, lineEndSpaceWidth, lineHeight);", "-\t// handle empty line case", "-\tif (bidi != null && paintX == 0) {", "-\t\tpaintX = StyledText.XINSET;\t", "-\t}", "-\t// fill the background first since expanded tabs are not ", "-\t// drawn as spaces. tabs just move the draw position. ", "-\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, selectionBackgroundWidth, lineHeight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "173ce16fb8fa664a9f43fe742446d21e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ec7edbaede68f4fd7608786e759e23fd6dbe2200", "commitAfterChange": "b206c3d5f3a448a2b6dfbc2c13ed7e271cef1597", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, FontData currentFont, StyledTextBidi bidi)", "signatureAfterChange": "\r \tColor getPrinterColor(Color color)", "diff": ["+ \t */\r", "+\tColor getPrinterColor(Color color) {\r", "+\t\tColor printerColor = null;\r", "+\t\t\r", "+\t\tif (color != null) {\r", "+\t\t\tprinterColor = (Color) printerColors.get(color);\t\t\r", "+\t\t\tif (printerColor == null) {\r", "+\t\t\t\tprinterColor = new Color(printer, color.getRGB());\r", "+\t\t\t\tprinterColors.put(color, printerColor);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\treturn printerColor;\r", "+\t}\r", "- */\r", "-void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, FontData currentFont, StyledTextBidi bidi) {\r", "-\tint lineLength = line.length();\r", "-\tint paintX;\r", "-\tint selectionBackgroundWidth = -1;\r", "-\tint selectionStart = Math.max(0, selection.x - lineOffset);\r", "-\tint selectionEnd = selection.y - lineOffset;\r", "-\tint selectionLength = selectionEnd - selectionStart;\r", "-\r", "-\tif (selectionEnd == selectionStart || selectionEnd < 0 || selectionStart > lineLength) {\r", "-\t\treturn;\r", "-\t}\r", "-\tif (bidi != null) {\r", "-\t\tpaintX = bidiTextWidth(line, 0, selectionStart, 0, bidi);\t\r", "-\t}\r", "-\telse {\r", "-\t\tpaintX = textWidth(line, lineOffset, 0, selectionStart, filterLineStyles(styles), 0, gc, currentFont);\t\r", "-\t}\r", "-\t// selection extends past end of line?\r", "-\tif (selectionEnd > lineLength) {\r", "-\t\tif ((getStyle() & SWT.FULL_SELECTION) != 0) {\r", "-\t\t\t// use the greater of the client area width and the content \r", "-\t\t\t// width. fixes 1G8IYRD\r", "-\t\t\tselectionBackgroundWidth = Math.max(getClientArea().width, lineCache.getWidth());\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tselectionLength = lineLength - selectionStart;\r", "-\t\t}\r", "-\t}\r", "-\tgc.setBackground(getSelectionBackground());\r", "-\tgc.setForeground(getSelectionForeground());\r", "-\tif (selectionBackgroundWidth == -1) {\r", "-\t\tboolean isWrappedLine = false;\r", "-\r", "-\t\tif (wordWrap) {\r", "-\t\t\tint lineEnd = lineOffset + lineLength;\r", "-\t\t\tint lineIndex = content.getLineAtOffset(lineEnd);\r", "-\r", "-\t\t\t// is the start offset of the next line the same as the end \r", "-\t\t\t// offset of this line?\t\t\t\r", "-\t\t\tif (lineIndex < content.getLineCount() - 1 &&\r", "-\t\t\t\tcontent.getOffsetAtLine(lineIndex + 1) == lineEnd) {\r", "-\t\t\t\tisWrappedLine = true;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (bidi != null) {\r", "-\t\t\tselectionBackgroundWidth = bidiTextWidth(line, selectionStart, selectionLength, paintX, bidi);\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tselectionBackgroundWidth = textWidth(line, lineOffset, selectionStart, selectionLength, styles, paintX, gc, currentFont);\r", "-\t\t}\r", "-\t\tif (selectionBackgroundWidth < 0) {\r", "-\t\t\t// width can be negative when in R2L bidi segment\r", "-\t\t\tpaintX += selectionBackgroundWidth;\r", "-\t\t\tselectionBackgroundWidth *= -1;\r", "-\t\t}\r", "-\t\tif (selectionEnd > lineLength && isWrappedLine == false) {\r", "-\t\t\tselectionEnd = selectionStart + selectionLength;\r", "-\t\t\t// if the selection extends past this line, render an additional \r", "-\t\t\t// whitespace background at the end of the line to represent the \r", "-\t\t\t// selected line break\r", "-\t\t\tif (bidi != null && selectionEnd > 0 && bidi.isRightToLeft(selectionEnd - 1)) {\r", "-\t\t\t\tint lineEndX = bidi.getTextWidth();\r", "-\t\t\t\tgc.fillRectangle(lineEndX - horizontalScrollOffset, paintY, lineEndSpaceWidth, lineHeight);\r", "-\t\t\t}\r", "-\t\t\telse {\r", "-\t\t\t\tselectionBackgroundWidth += lineEndSpaceWidth;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\t\r", "-\t// handle empty line case\r", "-\tif (bidi != null && (paintX == 0)) {\r", "-\t\tpaintX = XINSET;\t\r", "-\t}\r", "-\t// fill the background first since expanded tabs are not \r", "-\t// drawn as spaces. tabs just move the draw position. \r", "-\tgc.fillRectangle(paintX - horizontalScrollOffset, paintY, selectionBackgroundWidth, lineHeight);\r", "-}\r"]}], "num": 43946}
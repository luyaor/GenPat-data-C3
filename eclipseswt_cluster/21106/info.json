{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd0f0ff66fa1413d61d2daf81b0e12e5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58a49bb81ac3884c3be2e0a49c5a139d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "0350a8749caca9c8ccc77b03be7663653430f1b4", "commitAfterChange": "d582a24e628223c524dff89c036f22608917d014", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r int processPaint (int callData)", "signatureAfterChange": "\r int processPaint (int callData)", "diff": ["+\tint preMnemonicWidth = 0, mnemonicWidth = 0;\r", "-\t\tPoint textExtent = gc.textExtent (text);\r", "-\t\ttextWidth = textExtent.x;\r", "-\t\ttextHeight = textExtent.y;\r", "+\t\tif (mnemonicPos != -1) {\r", "+\t\t\tpreMnemonicWidth = gc.textExtent(text.substring(0, mnemonicPos)).x;\r", "+\t\t\tmnemonicWidth = gc.getAdvanceWidth(text.charAt(mnemonicPos));\r", "+\t\t\tint postMnemonicWidth = gc.textExtent(text.substring(mnemonicPos + 1)).x;\r", "+\t\t\ttextWidth = preMnemonicWidth + mnemonicWidth + postMnemonicWidth;\r", "+\t\t\ttextHeight = gc.textExtent(text).y;\r", "+\t\t} else {\r", "+\t\t\tPoint textExtent = gc.textExtent (text);\r", "+\t\t\ttextWidth = textExtent.x;\r", "+\t\t\ttextHeight = textExtent.y;\r", "+\t\t}\r", "-\tif (textWidth > 0) gc.drawText(text, textX, textY, false);\r", "+\tif (textWidth > 0) {\r", "+\t\tif (mnemonicPos != -1) {\r", "+\t\t\tint x = textX;\r", "+\t\t\tif (preMnemonicWidth > 0) {\r", "+\t\t\t\tgc.drawText(text.substring(0, mnemonicPos), x, textY, false);\r", "+\t\t\t\tx += preMnemonicWidth;\r", "+\t\t\t}\r", "+\t\t\tif (mnemonicWidth > 0) {\r", "+\t\t\t\tgc.drawText(text.substring(mnemonicPos, mnemonicPos + 1), x, textY, false);\r", "+\t\t\t\t// draw an underscore just like the one Motif uses\r", "+\t\t\t\tFontMetrics fontMetrics = gc.getFontMetrics();\r", "+\t\t\t\tint underlineY = textY + fontMetrics.getHeight();\r", "+\t\t\t\tgc.drawLine(x, underlineY, x + mnemonicWidth, underlineY);\r", "+\t\t\t\tx += mnemonicWidth;\r", "+\t\t\t}\r", "+\t\t\tif (mnemonicPos < text.length()) gc.drawText(text.substring(mnemonicPos + 1),\r", "+\t\t\t\tx, textY, false);\r", "+\t\t} else {\r", "+\t\t\tgc.drawText(text, textX, textY, false);\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01c68cb01cc0497c642281f59f356ca4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "1aa76e023bb4927eb3b7cf526018017f11838086", "commitAfterChange": "d2b23ce77d0de5b5edbb1b403be8a419f0aeb8a4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["+\t\tdrawUnderline = drawUnderline && (j + 1 == styles.length || !style.isAdherentUnderline(styles[j + 1].style)); ", "+\t\tdrawBorder = drawBorder && (j + 1 == styles.length || !style.isAdherentBorder(styles[j + 1].style)); ", "-\t\tint start = translateOffset(run.start);", "+\t\tif (rgn == 0) rgn = OS.NewRgn();", "-\t\t\tif (!(start > lineEnd || end < lineStart)) {", "-\t\t\t\tint highStart = Math.max(lineStart, start);", "-\t\t\t\tint highEnd = Math.min(lineEnd, end);", "-\t\t\t\tint highLen = highEnd - highStart + 1;", "-\t\t\t\tif (highLen > 0) {", "-\t\t\t\t\tif (rgn == 0) rgn = OS.NewRgn();", "-\t\t\t\t\tif (drawUnderline) {", "+\t\t\tif (drawUnderline) {", "+\t\t\t\tint start = run.start;", "+\t\t\t\tfor (int k = j; k > 0 && style.isAdherentUnderline(styles[k - 1].style); k--) {", "+\t\t\t\t\tstart = styles[k - 1].start;", "+\t\t\t\t}", "+\t\t\t\tstart = translateOffset(start);", "+\t\t\t\tif (!(start > lineEnd || end < lineStart)) {", "+\t\t\t\t\tint highStart = Math.max(lineStart, start);", "+\t\t\t\t\tint highEnd = Math.min(lineEnd, end);", "+\t\t\t\t\tint highLen = highEnd - highStart + 1;", "+\t\t\t\t\tif (highLen > 0) {", "-\t\t\t\t\tif (drawBorder) {", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (drawBorder) {", "+\t\t\t\tint start = run.start;", "+\t\t\t\tfor (int k = j; k > 0 && style.isAdherentBorder(styles[k - 1].style); k--) {", "+\t\t\t\t\tstart = styles[k - 1].start;", "+\t\t\t\t}", "+\t\t\t\tstart = translateOffset(start);", "+\t\t\t\tif (!(start > lineEnd || end < lineStart)) {", "+\t\t\t\t\tint highStart = Math.max(lineStart, start);", "+\t\t\t\t\tint highEnd = Math.min(lineEnd, end);", "+\t\t\t\t\tint highLen = highEnd - highStart + 1;", "+\t\t\t\t\tif (highLen > 0) {"]}], "num": 21106}
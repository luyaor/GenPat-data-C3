{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4131cc3d836701e21df52ba3edd6ce3", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e846093b85554aea6d4d5a9eec8f3457", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "34b48a1450d691429218250a2c0b9f1d585dff6c", "commitAfterChange": "6c48129efab113803ef6d6a35457b5eb7eea82a5", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  public void test_remove$I()", "signatureAfterChange": "  public void test_remove$I()", "diff": ["-\tassertEquals(\":a:\", list.getItems(), items);", "+\tassertArrayEquals(\":a:\", list.getItems(), items);", "-\tassertEquals(\":a:\", list.getItems(), items);", "+\tassertArrayEquals(\":a:\", list.getItems(), items);", "-\tassertEquals(\":b:\", list.getItems(), items);", "+\tassertArrayEquals(\":b:\", list.getItems(), items);", "-\tassertEquals(\":c:\", list.getItems(), items);", "+\tassertArrayEquals(\":c:\", list.getItems(), items);", "-\tassertEquals(", "+\tassertArrayEquals(", "-\tassertEquals(\":e:\", list.getItems(), new String[] { \"text0\", \"text2\" });", "+\tassertArrayEquals(\":e:\", list.getItems(), new String[] { \"text0\", \"text2\" });", "-\tassertEquals(\":f:\", list.getItems(), new String[] { \"text0\", \"text2\" });", "+\tassertArrayEquals(\":f:\", list.getItems(), new String[] { \"text0\", \"text2\" });", "-\tassertEquals(\":g:\", list.getItems(), new String[] { \"text0\", \"text2\" });", "+\tassertArrayEquals(\":g:\", list.getItems(), new String[] { \"text0\", \"text2\" });", "-\tassertEquals(\":h:\", list.getItems(), items);", "+\tassertArrayEquals(\":h:\", list.getItems(), items);", "-\tassertEquals(\":h:\", list.getItems(), items);", "+\tassertArrayEquals(\":h:\", list.getItems(), items);", "-\tassertEquals(\":i:\", items, list.getItems());", "+\tassertArrayEquals(\":i:\", items, list.getItems());", "-\tassertEquals(\":j:\",", "+\tassertArrayEquals(\":j:\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8af9e7afb4c37dd06b329ab994e4153b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "c8c3b0d56ac96eed1deeae3cbebb069fecdd4ef9", "commitAfterChange": "db54bb9c515ce97cb7d05101b9fa91b631d7bee5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void test_clone()", "signatureAfterChange": "  public void test_clone()", "diff": ["-\twarnUnimpl(\"Test test_clone not written\");", "+\tInputStream stream = null;", "+\ttry {", "+\t\tstream = SwtTestCase.class.getResourceAsStream(SwtTestCase.imageFilenames[0] + \".\" + SwtTestCase.imageFormats[0]);", "+\t\tImageLoader loader = new ImageLoader();", "+\t\tImageData data1 = loader.load(stream)[0];", "+\t\tImageData data2 = (ImageData) data1.clone();", "+\t\t// imageData does not implement an equals(Object) method", "+\t\tassertEquals(\":a:\", data1.alpha, data2.alpha);", "+\t\tassertEquals(\":b:\", data1.alphaData, data2.alphaData);", "+\t\tassertEquals(\":c:\", data1.bytesPerLine, data2.bytesPerLine);", "+\t\tassertEquals(\":d:\", data1.data, data2.data);", "+\t\tassertEquals(\":e:\", data1.delayTime, data2.delayTime);", "+\t\tassertEquals(\":f:\", data1.depth, data2.depth);", "+\t\tassertEquals(\":g:\", data1.disposalMethod, data2.disposalMethod);", "+\t\tassertEquals(\":h:\", data1.height, data2.height);", "+\t\tassertEquals(\":i:\", data1.maskData, data2.maskData);", "+\t\tassertEquals(\":j:\", data1.maskPad, data2.maskPad);", "+\t\tassertEquals(\":k:\", data1.palette, data2.palette);", "+\t\tassertEquals(\":l:\", data1.scanlinePad, data2.scanlinePad);", "+\t\tassertEquals(\":m:\", data1.transparentPixel, data2.transparentPixel);", "+\t\tassertEquals(\":n:\", data1.type, data2.type);", "+\t\tassertEquals(\":o:\", data1.width, data2.width);", "+\t\tassertEquals(\":p:\", data1.x, data2.x);", "+\t\tassertEquals(\":q:\", data1.y, data2.y);", "+\t} finally {", "+\t\ttry {", "+\t\t\tstream.close();", "+\t\t} catch (Exception e) {", "+\t\t}", "+\t}"]}], "num": 13927}
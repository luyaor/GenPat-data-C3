{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ada4480854aa26899de4ba19ce8c908", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caef9360b56ddb579ccfe7d9893235a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 274, "signatureBeforeChange": " \tint get_accSelection(int pvarChildren)", "signatureAfterChange": " \tint get_accSelection(int pvarChildren)", "diff": ["-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "-", "-\t\t/* Get the default selection from the OS. */", "-\t\tint code = iaccessible.get_accSelection(pvarChildren);", "-\t\tif (accessibleControlListeners.size() == 0) return code;", "-\t\tif (code == COM.S_OK) {", "-\t\t\tVARIANT v = getVARIANT(pvarChildren);", "-\t\t\tif (v.vt == COM.VT_I4) {", "-\t\t\t\tosChild = osToChildID(v.lVal);", "-\t\t\t} else if (v.vt == COM.VT_UNKNOWN) {", "-\t\t\t\tosChild = ACC.CHILDID_MULTIPLE;", "-\t\t\t\t/* Should get IEnumVARIANT from punkVal field, and enumerate children... */", "+\t\tint /*long*/ osChildObject = 0;", "+\t\tif (iaccessible != null) {", "+\t\t\t/* Get the default selection from the OS. */", "+\t\t\tint code = iaccessible.get_accSelection(pvarChildren);", "+\t\t\tif (accessibleControlListeners.size() == 0) return code;", "+\t\t\tif (code == COM.S_OK) {", "+\t\t\t\tVARIANT v = getVARIANT(pvarChildren);", "+\t\t\t\tif (v.vt == COM.VT_I4) {", "+\t\t\t\t\tosChild = osToChildID(v.lVal);", "+\t\t\t\t} else if (v.vt == COM.VT_DISPATCH) {", "+\t\t\t\t\tosChildObject = v.lVal;", "+\t\t\t\t} else if (v.vt == COM.VT_UNKNOWN) {", "+\t\t\t\t\tosChild = ACC.CHILDID_MULTIPLE;", "+\t\t\t\t\t// TODO: Should get IEnumVARIANT from punkVal field, and enumerate children...", "+\t\t\t\t}", "-\t\t\t/* Should also handle (v.vt == COM.VT_DISPATCH) */", "-\t\t\tsetPtrVARIANT(pvarChildren, COM.VT_DISPATCH, accessible.objIAccessible.getAddress());", "+\t\t\tsetPtrVARIANT(pvarChildren, COM.VT_DISPATCH, accessible.getAddress());", "-\t\t\tsetVARIANT(pvarChildren, COM.VT_EMPTY, 0);", "+\t\t\tif (osChildObject != 0) return COM.S_OK;", "+\t\t\tsetIntVARIANT(pvarChildren, COM.VT_EMPTY, 0);", "-\t\t\tAddRef();", "-\t\t\tsetPtrVARIANT(pvarChildren, COM.VT_UNKNOWN, objIAccessible.getAddress());", "+\t\t\t// TODO: return an enumeration for event.children (currently just returns enumeration from proxy)", "+\t\t\t//AddRef();", "+\t\t\t//setPtrVARIANT(pvarChildren, COM.VT_UNKNOWN, getAddress());", "-\t\t\tsetPtrVARIANT(pvarChildren, COM.VT_DISPATCH, objIAccessible.getAddress());", "+\t\t\tsetPtrVARIANT(pvarChildren, COM.VT_DISPATCH, getAddress());", "-\t\tsetVARIANT(pvarChildren, COM.VT_I4, childIDToOs(childID));", "+\t\tsetIntVARIANT(pvarChildren, COM.VT_I4, childIDToOs(childID));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6053b7e5c1b82f83a1b1fac80f67dd33", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 259, "signatureBeforeChange": "  \tint accHitTest(int xLeft, int yTop, int pvarChild)", "signatureAfterChange": " \tint accHitTest(int xLeft, int yTop, int pvarChild)", "diff": ["+\t/* accHitTest([in] xLeft, [in] yTop, [out] pvarChild) */", "-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "-", "-\t\t/* Get the default (left, top) child from the OS. */", "-\t\tint code = iaccessible.accHitTest(xLeft, yTop, pvarChild);", "-\t\tif (accessibleControlListeners.size() == 0) return code;", "-\t\tif (code == COM.S_OK) {", "-\t\t\tVARIANT v = getVARIANT(pvarChild);", "-\t\t\tif (v.vt == COM.VT_I4) osChild = osToChildID(v.lVal);", "-\t\t\t/* Should also handle v.vt == COM.VT_DISPATCH */", "+\t\tint /*long*/ osChildObject = 0;", "+\t\tif (iaccessible != null) {", "+\t\t\t/* Get the default child at point (left, top) from the OS. */", "+\t\t\tint code = iaccessible.accHitTest(xLeft, yTop, pvarChild);", "+\t\t\tif (accessibleControlListeners.size() == 0) return code;", "+\t\t\tif (code == COM.S_OK) {", "+\t\t\t\tVARIANT v = getVARIANT(pvarChild);", "+\t\t\t\tif (v.vt == COM.VT_I4) osChild = osToChildID(v.lVal);", "+\t\t\t\telse if (v.vt == COM.VT_DISPATCH) {", "+\t\t\t\t\tosChildObject = v.lVal;", "+\t\t\t\t\tSystem.out.println(\"accHitTest: proxy returned an object with this address: \" + osChildObject);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t// TODO: Should also look up Accessible for osChildObject", "+\t\t//event.accessible = Accessible for osChildObject;", "+\t\tAccessible accessible = event.accessible;", "+\t\tif (accessible != null) {", "+\t\t\taccessible.AddRef();", "+\t\t\tsetPtrVARIANT(pvarChild, COM.VT_DISPATCH, accessible.getAddress());", "+\t\t\treturn COM.S_OK;", "+\t\t}", "-\t\tif (childID == ACC.CHILDID_NONE) return COM.S_FALSE;", "-\t\tsetVARIANT(pvarChild, COM.VT_I4, childIDToOs(childID));", "+\t\tif (childID == ACC.CHILDID_NONE) {", "+\t\t\tif (osChildObject != 0) return COM.S_OK;", "+\t\t\tsetIntVARIANT(pvarChild, COM.VT_EMPTY, 0);", "+\t\t\treturn COM.S_FALSE;", "+\t\t}", "+\t\tsetIntVARIANT(pvarChild, COM.VT_I4, childIDToOs(childID));"]}], "num": 58545}
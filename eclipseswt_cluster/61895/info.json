{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17e0c943a0824d22b4f1dd010048d6f7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b66314b6d1ab7ca5a972457fbca8deeb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "07868d336bfbd0f5ad22e9824af4c793cea4f15b", "commitAfterChange": "2dcd4e15d2731c2f495b41254c11d2b5a7ea7a9d", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  public void setStyle (TextStyle style, int start, int end)", "signatureAfterChange": "  public void setStyle (TextStyle style, int start, int end)", "diff": ["-\t* Bug in Pango. Pango will cause a segmentation fault in a style", "-\t* is not applied for the whole LanAlef ligature when it is located", "-\t* at the end of directional run.  The fix is to applied set the", "+\t* Bug in Pango. Pango 1.2.2 will cause a segmentation fault if a style", "+\t* is not applied for a whole ligature.  The fix is to applied the", "-\t* TODO: Check other ligatures and try to seek a more fine tuned solution.", "-\t* FH it does happen for other ligatuers (thai), this bug is fixed in pango > 1.2.3", "+\t* NOTE that fix only LamAlef ligatures. ", "-//\tif (start > 0 && isAlef(text.charAt(start)) && isLam(text.charAt(start - 1))) {", "-//\t\tstart--;", "-//\t}", "-//\tif (end < length - 1 && isLam(text.charAt(end)) && isAlef(text.charAt(end + 1))) {", "-//\t\tend++;", "-//\t}", "+\tif (start > 0 && isAlef(text.charAt(start)) && isLam(text.charAt(start - 1))) {", "+\t\tstart--;", "+\t}", "+\tif (end < length - 1 && isLam(text.charAt(end)) && isAlef(text.charAt(end + 1))) {", "+\t\tend++;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "061b2d580dd686998beed9fb68926e51", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "54e966b17dff82794616f6f88da465fe6ff8d1ab", "commitAfterChange": "e3a284077475cfed7262b71636e1ab3448ca2fd8", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 17, "signatureBeforeChange": "  int getBackgroundPixel ()", "signatureAfterChange": "  int getBackgroundPixel ()", "diff": ["+", "-\tif (OS.IsWinCE) return OS.GetSysColor (OS.COLOR_WINDOW);", "-\tint pixel = OS.SendMessage (handle, OS.TVM_GETBKCOLOR, 0, 0);", "-\tif (pixel == -1) return OS.GetSysColor (OS.COLOR_WINDOW);", "-\treturn pixel;", "+\tif (!OS.IsWinCE) return _getBackgroundPixel ();", "+\t/*", "+\t* Feature in Windows.  When a tree is given a background color", "+\t* using TVM_SETBKCOLOR and the tree is disabled, Windows draws", "+\t* the tree using the background color rather than the disabled", "+\t* colors.  This is different from the table which draws grayed.", "+\t* The fix is to set the default background color while the tree", "+\t* is disabled and restore it when enabled.", "+\t*/", "+\tif (!OS.IsWindowEnabled (handle) && background != -1) {", "+\t\treturn background;", "+\t}", "+\treturn _getBackgroundPixel ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcbd564142cd4b8a20839b1bb87cea9b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "54e966b17dff82794616f6f88da465fe6ff8d1ab", "commitAfterChange": "e3a284077475cfed7262b71636e1ab3448ca2fd8", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 38, "signatureBeforeChange": "  void setBackgroundPixel (int pixel)", "signatureAfterChange": "  void setBackgroundPixel (int pixel)", "diff": ["-\t* Bug in Windows.  When TVM_GETBKCOLOR is used more", "-\t* than once to set the background color of a tree,", "-\t* the background color of the lines and the plus/minus", "-\t* does not change to the new color.  The fix is to set", "-\t* the background color to the default before setting", "-\t* the new color.", "+\t* Feature in Windows.  When a tree is given a background color", "+\t* using TVM_SETBKCOLOR and the tree is disabled, Windows draws", "+\t* the tree using the background color rather than the disabled", "+\t* colors.  This is different from the table which draws grayed.", "+\t* The fix is to set the default background color while the tree", "+\t* is disabled and restore it when enabled.", "-\tint oldPixel = OS.SendMessage (handle, OS.TVM_GETBKCOLOR, 0, 0);", "-\tif (oldPixel != -1) OS.SendMessage (handle, OS.TVM_SETBKCOLOR, 0, -1);", "-\tOS.SendMessage (handle, OS.TVM_SETBKCOLOR, 0, pixel);", "-\tif ((style & SWT.CHECK) != 0) setCheckboxImageList ();", "+\tif (OS.IsWindowEnabled (handle)) _setBackgroundPixel (pixel);"]}], "num": 61895}
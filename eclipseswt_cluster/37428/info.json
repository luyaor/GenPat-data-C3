{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7add5e9aa597f1714dd51cc23ca489f9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82a0219745a681bf04282807f20fbba9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "751399cd435ff7ae4f611108a25dd9577f78e768", "commitAfterChange": "2aa842a0d510140da28edb5b7f888217965555a3", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " public int getNextOffset (int offset, int movement)", "signatureAfterChange": " public int getNextOffset (int offset, int movement)", "diff": ["-\treturn _getOffset(offset, movement, true);", "-}", "+\tif (offset == length) return length;", "+\tif ((movement & MOVEMENT_CHAR) != 0) return offset + 1;", "+\tint[] ppSp = new int[1];", "+\tint[] piNumScripts = new int[1];", "+\tOS.ScriptGetProperties(ppSp, piNumScripts);", "+\tint[] scripts = new int[piNumScripts[0]];", "+\tOS.MoveMemory(scripts, ppSp[0], scripts.length * 4);", "+\tSCRIPT_PROPERTIES properties = new SCRIPT_PROPERTIES();", "+\tboolean previousWhitespace = false;", "+\tint i = 0;\t", "+\tint lastScript  = -1;", "+\tfor (; i < allRuns.length; i++) {", "+\t\tStyleItem run = allRuns[i];", "+\t\tif (run.start <= offset && offset < run.start + run.length) {", "+\t\t\tif (run.lineBreak && !run.softBreak) return run.start + run.length;", "+\t\t\tbreakRun(run);", "+\t\t\tOS.MoveMemory(logAttr, run.psla + ((offset - run.start) * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof);\t", "+\t\t\tpreviousWhitespace = logAttr.fWhiteSpace;", "+\t\t\tlastScript = run.analysis.eScript;", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\toffset++;", "+\tfor (; i < allRuns.length && offset < length; i++) {", "+\t\tStyleItem run = allRuns[i];", "+\t\tif (run.start <= offset && offset < run.start + run.length) {", "+\t\t\tif (run.lineBreak && !run.softBreak) return offset;", "+\t\t\tOS.MoveMemory(properties, scripts[run.analysis.eScript], SCRIPT_PROPERTIES.sizeof);", "+\t\t\tif (((movement & MOVEMENT_CLUSTER) != 0) && !properties.fNeedsCaretInfo) {", "+\t\t\t\treturn offset;", "+\t\t\tbreakRun(run);", "+\t\t\tif ((movement & MOVEMENT_WORD) != 0) {", "+\t\t\t\tif (run.analysis.eScript != lastScript) {", "+\t\t\t\t\tOS.MoveMemory(logAttr, run.psla + ((offset - run.start) * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof);", "+\t\t\t\t\tif (!logAttr.fWhiteSpace) return offset;", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\tlastScript = run.analysis.eScript;", "+\t\t\t}", "+\t\t\twhile (run.start <= offset && offset < run.start + run.length) {", "+\t\t\t\tOS.MoveMemory(logAttr, run.psla + ((offset - run.start) * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof);", "+\t\t\t\tif (!logAttr.fInvalid) {", "+\t\t\t\t\tif ((movement & MOVEMENT_CLUSTER) != 0 && logAttr.fCharStop) return offset;", "+\t\t\t\t\tif ((movement & MOVEMENT_WORD) != 0) {", "+\t\t\t\t\t\tif (properties.fNeedsWordBreaking) {", "+\t\t\t\t\t\t\tif (logAttr.fWordStop) return offset;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (!logAttr.fWhiteSpace && previousWhitespace) return offset;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tpreviousWhitespace = logAttr.fWhiteSpace;", "+\t\t\t\t}", "+\t\t\t\toffset++;", "+\t\t\t}", "+\treturn length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d42569567fbc6e80362a994712a469a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "751399cd435ff7ae4f611108a25dd9577f78e768", "commitAfterChange": "2aa842a0d510140da28edb5b7f888217965555a3", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 25, "signatureBeforeChange": "  int _getOffset (int offset, int movement, boolean forward)", "signatureAfterChange": " public int getPreviousOffset (int offset, int movement)", "diff": ["-", "-int _getOffset (int offset, int movement, boolean forward) {", "-\tif (forward) {", "-\t\tif (offset == length) return length;", "-\t} else {", "-\t\tif (offset == 0) return 0;", "-\t}", "-\tint step = forward ? 1 : -1;", "-\tif ((movement & MOVEMENT_CHAR) != 0) return offset + step;", "-\tint line;", "-\tfor (line=0; line<runs.length; line++) {", "-\t\tif (lineOffset[line + 1] > offset) break;", "-\t}", "-\tline = Math.min(line, runs.length - 1);", "-\tStyleItem[] lineRuns = runs[line];", "-\tint lineStart = lineOffset[line];", "-\tint lineEnd =  lineOffset[line + 1];", "-\tboolean searching = true;", "-\tint i = 0;", "-\toffset += step;", "-\twhile (searching && lineStart <= offset && offset < lineEnd) {", "-\t\tStyleItem run = lineRuns[i];", "-\t\tint start = run.start;", "-\t\tint end = start + run.length;", "-\t\tif (end == length) end++;", "-\t\tif (start <= offset && offset < end) {", "-\t\t\tint hHeap = OS.GetProcessHeap();", "-\t\t\tchar[] chars = new char[run.length];", "-\t\t\tint psla = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, SCRIPT_LOGATTR.sizeof * chars.length);", "-\t\t\ttext.getChars(start, start + chars.length, chars, 0);", "-\t\t\tOS.ScriptBreak(chars, chars.length, run.analysis, psla);", "-\t\t\twhile (searching && start <= offset && offset < end) {", "-\t\t\t\tOS.MoveMemory(logAttr, psla + ((offset - start) * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof);", "-\t\t\t\tif (!logAttr.fInvalid) {", "-\t\t\t\t\tif (((movement & MOVEMENT_CLUSTER) != 0) && logAttr.fCharStop) searching = false;", "-\t\t\t\t\tif (((movement & MOVEMENT_WORD) != 0) && logAttr.fWordStop) searching = false;", "-\t\t\t\t}", "-\t\t\t\tif (searching) offset += step;", "-\t\t\tOS.HeapFree(hHeap, 0, psla);", "-\t\t\tif (!searching) return offset;", "-\t\t\ti = 0;", "-\t\t} else {", "-\t\t\ti++;", "-\tif (searching) {", "-\t\tif (forward) {", "-\t\t\tif ((movement & MOVEMENT_CLUSTER) != 0) return lineEnd;", "-\t\t\tif (offset >= lineEnd) return lineEnd;", "-\t\t\treturn lineEnd - 1;", "-\t\t} else {", "-\t\t\treturn Math.max(0, lineStart - 1);", "-\t\t}", "-\t}", "-\treturn offset;", "+\tcheckLayout();", "+\tcomputeRuns(null);", "+\tint length = text.length();", "+\tif (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_RANGE);", "+\tif (offset == 0) return 0;", "+\tif ((movement & MOVEMENT_CHAR) != 0) return offset - 1;", "+\tint[] ppSp = new int[1];", "+\tint[] piNumScripts = new int[1];", "+\tOS.ScriptGetProperties(ppSp, piNumScripts);", "+\tint[] scripts = new int[piNumScripts[0]];", "+\tOS.MoveMemory(scripts, ppSp[0], scripts.length * 4);", "+\tSCRIPT_PROPERTIES properties = new SCRIPT_PROPERTIES();", "+\tSCRIPT_LOGATTR logAttr = new SCRIPT_LOGATTR();", "+\tboolean previousWhitespace = false;", "+\tint i = allRuns.length - 1;", "+\tint lastScript  = -1;", "+\toffset--;", "+\tfor (;  i >= 0; i--) {", "+\t\tStyleItem run = allRuns[i];", "+\t\tif (run.start <= offset && offset < run.start + run.length) {", "+\t\t\tif (run.lineBreak && !run.softBreak) return run.start;", "+\t\t\tbreakRun(run);", "+\t\t\tOS.MoveMemory(logAttr, run.psla + ((offset - run.start) * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof);\t", "+\t\t\tpreviousWhitespace = logAttr.fWhiteSpace;", "+\t\t\tlastScript = run.analysis.eScript;", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\tfor (; i >= 0 && offset >= 0; i--) {", "+\t\tStyleItem run = allRuns[i];", "+\t\tif (run.start <= offset && offset < run.start + run.length) {", "+\t\t\tif (run.lineBreak && !run.softBreak) return run.start + run.length;", "+\t\t\tOS.MoveMemory(properties, scripts[run.analysis.eScript], SCRIPT_PROPERTIES.sizeof);", "+\t\t\tif (((movement & MOVEMENT_CLUSTER) != 0) && !properties.fNeedsCaretInfo) {", "+\t\t\t\treturn offset;", "+\t\t\t}", "+\t\t\tif ((movement & MOVEMENT_WORD) != 0) {", "+\t\t\t\tif (run.analysis.eScript != lastScript) {", "+\t\t\t\t\tif (!previousWhitespace) return offset + 1;", "+\t\t\t\t}", "+\t\t\t\tlastScript = run.analysis.eScript;", "+\t\t\t}", "+\t\t\tbreakRun(run);", "+\t\t\twhile (run.start <= offset && offset < run.start + run.length) {", "+\t\t\t\tOS.MoveMemory(logAttr, run.psla + ((offset - run.start) * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof);", "+\t\t\t\tif (!logAttr.fInvalid) {", "+\t\t\t\t\tif ((movement & MOVEMENT_CLUSTER) != 0 && logAttr.fCharStop) return offset;", "+\t\t\t\t\tif ((movement & MOVEMENT_WORD) != 0) {", "+\t\t\t\t\t\tif (properties.fNeedsWordBreaking) {", "+\t\t\t\t\t\t\tif (logAttr.fWordStop) return offset;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (logAttr.fWhiteSpace && !previousWhitespace) return offset + 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tpreviousWhitespace = logAttr.fWhiteSpace;", "+\t\t\t\t};", "+\t\t\t\toffset--;", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn 0;"]}], "num": 37428}
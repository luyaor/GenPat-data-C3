{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "208a238a90a175a6bed9d0a2e206ee30", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9e5ccd97e830f0c7b52821aa68669d9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "ad7a9e5b3b139f6b5bd4c2f25f8cf8b336105a91", "commitAfterChange": "52d678e47ee00e0c9d7473cd6841b89c8499131e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\thandle = OS.gtk_combo_new ();", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tOS.gtk_container_add (fixedHandle, handle);", "-\tGtkCombo combo = new GtkCombo ();", "-\tOS.memmove (combo, handle);", "-\tentryHandle = combo.entry;", "-\tlistHandle = combo.list;", "-\t", "-\t/*", "-\t* Feature in GTK.  There is no API to query the arrow", "-\t* handle from a combo box although it is possible to", "-\t* get the list and text field.  The arrow handle is needed", "-\t* to hook events.  The fix is to find the first child that is", "-\t* not the entry or list and assume this is the arrow handle.", "-\t*/", "-\tint /*long*/ list = OS.gtk_container_get_children (handle);", "-\tif (list != 0) {", "-\t\tint i = 0, count = OS.g_list_length (list);", "-\t\twhile (i<count) {", "-\t\t\tint /*long*/ childHandle = OS.g_list_nth_data (list, i);", "-\t\t\tif (childHandle != entryHandle && childHandle != listHandle) {", "-\t\t\t\tarrowHandle = childHandle;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\ti++;", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\thandle = OS.gtk_combo_box_new_text ();", "+\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t} else {", "+\t\t\thandle = OS.gtk_combo_box_entry_new_text ();", "+\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tentryHandle = OS.gtk_bin_get_child (handle);", "+\t\t\tif (entryHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tOS.g_list_free (list);", "+\t\tOS.gtk_container_add (fixedHandle, handle);", "+\t\ttextRenderer = OS.gtk_cell_renderer_text_new ();", "+\t\tif (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.gtk_cell_layout_clear (handle);", "+\t\tOS.gtk_cell_layout_pack_start (handle, textRenderer, true);", "+\t\tOS.gtk_cell_layout_set_attributes (handle, textRenderer, OS.text, 0, 0);", "+\t} else {", "+\t\thandle = OS.gtk_combo_new ();", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.gtk_container_add (fixedHandle, handle);", "+\t\tGtkCombo combo = new GtkCombo ();", "+\t\tOS.memmove (combo, handle);", "+\t\tentryHandle = combo.entry;", "+\t\tlistHandle = combo.list;", "+\t\t", "+\t\t/*", "+\t\t* Feature in GTK.  There is no API to query the arrow", "+\t\t* handle from a combo box although it is possible to", "+\t\t* get the list and text field.  The arrow handle is needed", "+\t\t* to hook events.  The fix is to find the first child that is", "+\t\t* not the entry or list and assume this is the arrow handle.", "+\t\t*/", "+\t\tint /*long*/ list = OS.gtk_container_get_children (handle);", "+\t\tif (list != 0) {", "+\t\t\tint i = 0, count = OS.g_list_length (list);", "+\t\t\twhile (i<count) {", "+\t\t\t\tint /*long*/ childHandle = OS.g_list_nth_data (list, i);", "+\t\t\t\tif (childHandle != entryHandle && childHandle != listHandle) {", "+\t\t\t\t\tarrowHandle = childHandle;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tOS.g_list_free (list);", "+\t\t}", "+\t\t", "+\t\tboolean editable = (style & SWT.READ_ONLY) == 0;", "+\t\tOS.gtk_editable_set_editable (entryHandle, editable);", "+\t\tOS.gtk_combo_disable_activate (handle);", "+\t\tOS.gtk_combo_set_case_sensitive (handle, true);", "-\t", "-\tboolean editable = (style & SWT.READ_ONLY) == 0;", "-\tOS.gtk_editable_set_editable (entryHandle, editable);", "-\tOS.gtk_combo_disable_activate (handle);", "-\tOS.gtk_combo_set_case_sensitive (handle, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb66785a2af38f5603e0bcada731393", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "e49d876ec140d7ebc28625e48df185a92ae2e105", "commitAfterChange": "f387cedab0a11fb8c290dcad92bd0503c5f0facb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "-\t} else {", "-\t\thandle = OS.gtk_combo_new ();", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tOS.gtk_container_add (fixedHandle, handle);", "-\t\tGtkCombo combo = new GtkCombo ();", "-\t\tOS.memmove (combo, handle);", "-\t\tentryHandle = combo.entry;", "-\t\tlistHandle = combo.list;", "-\t\t", "-\t\tif (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {", "-\t\t\tint /*long*/ parentHandle = 0;", "-\t\t\tint /*long*/ temp = listHandle;", "-\t\t\twhile ((temp = OS.gtk_widget_get_parent(temp)) != 0) {", "-\t\t\t\tparentHandle = temp;", "-\t\t\t}", "-\t\t\tpopupHandle = parentHandle;", "-\t\t\tif (popupHandle != 0) {", "-\t\t\t\tint /*long*/ modalGroup = getShell().modalGroup;", "-\t\t\t\tif (modalGroup != 0) {", "-\t\t\t\t\tOS.gtk_window_group_add_window (modalGroup, popupHandle);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t/*", "-\t\t* Feature in GTK.  There is no API to query the arrow", "-\t\t* handle from a combo box although it is possible to", "-\t\t* get the list and text field.  The arrow handle is needed", "-\t\t* to hook events.  The fix is to find the first child that is", "-\t\t* not the entry or list and assume this is the arrow handle.", "-\t\t*/", "-\t\tint /*long*/ list = OS.gtk_container_get_children (handle);", "-\t\tif (list != 0) {", "-\t\t\tint i = 0, count = OS.g_list_length (list);", "-\t\t\twhile (i<count) {", "-\t\t\t\tint /*long*/ childHandle = OS.g_list_nth_data (list, i);", "-\t\t\t\tif (childHandle != entryHandle && childHandle != listHandle) {", "-\t\t\t\t\tbuttonHandle = childHandle;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\ti++;", "-\t\t\t}", "-\t\t\tOS.g_list_free (list);", "-\t\t}", "-\t\t", "-\t\tboolean editable = (style & SWT.READ_ONLY) == 0;", "-\t\tOS.gtk_editable_set_editable (entryHandle, editable);", "-\t\tOS.gtk_combo_disable_activate (handle);", "-\t\tOS.gtk_combo_set_case_sensitive (handle, true);", "-\t}"]}], "num": 12026}
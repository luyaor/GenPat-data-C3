{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "243fc4fdb16ec9f7929d1bc503b37252", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e372e7be99f44a66d1f910429449e6e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "70ae3ce48de4113f883a77944d126e137c7d7451", "commitAfterChange": "6b597d345be8fb75c19a7f46b82c7685b2bbe38a", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  boolean setScrollWidth (TableItem item, boolean force)", "signatureAfterChange": "  boolean setScrollWidth (TableItem item, boolean force)", "diff": ["+\t/*", "+\t* NOTE: It is much faster to measure the strings and compute the", "+\t* width of the scroll bar in non-virtual table rather than using", "+\t* LVM_SETCOUMNWIDTH with LVSCW_AUTOSIZE.", "+\t*/", "-\t\tif ((style & SWT.VIRTUAL) != 0) {", "-\t\t\tint newWidth = 0;", "-\t\t\tcount = OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "-\t\t\tint index = 0;", "-\t\t\twhile (index < count) {", "-\t\t\t\tString string = null;", "-\t\t\t\tif (item != null) {", "-\t\t\t\t\tstring = item.text;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (items [index] != null) string = items [index].text;", "-\t\t\t\t}", "-\t\t\t\tif (string != null && string.length () != 0) {", "-\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "-\t\t\t\t\tnewWidth = Math.max (newWidth, OS.SendMessage (handle, OS.LVM_GETSTRINGWIDTH, 0, buffer));", "-\t\t\t\t}", "-\t\t\t\tif (item != null) break;", "-\t\t\t\tindex++;", "+\t\tint newWidth = 0;", "+\t\tcount = OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "+\t\tint index = 0;", "+\t\twhile (index < count) {", "+\t\t\tString string = null;", "+\t\t\tif (item != null) {", "+\t\t\t\tstring = item.text;", "+\t\t\t} else {", "+\t\t\t\tif (items [index] != null) string = items [index].text;", "-\t\t\tint hStateList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);", "-\t\t\tif (hStateList != 0) {", "-\t\t\t\tint [] cx = new int [1], cy = new int [1];", "-\t\t\t\tOS.ImageList_GetIconSize (hStateList, cx, cy);", "-\t\t\t\tnewWidth += cx [0] + 4;", "+\t\t\tif (string != null && string.length () != 0) {", "+\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "+\t\t\t\tnewWidth = Math.max (newWidth, OS.SendMessage (handle, OS.LVM_GETSTRINGWIDTH, 0, buffer));", "-\t\t\tint hImageList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0);", "-\t\t\tif (hImageList != 0) {", "-\t\t\t\tint [] cx = new int [1], cy = new int [1];", "-\t\t\t\tOS.ImageList_GetIconSize (hImageList, cx, cy);", "-\t\t\t\tnewWidth += cx [0];", "-\t\t\t}", "-\t\t\tnewWidth += 8;", "-\t\t\tint oldWidth = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "-\t\t\tif (newWidth > oldWidth) {", "-\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, newWidth);", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t} else {", "-\t\t\t/*", "-\t\t\t* Bug in Windows.  When the table has no icons, the width that is", "-\t\t\t* computed by LVM_SETCOLUMNWIDTH with LVSCW_AUTOSIZE is too small,", "-\t\t\t* causing the long items to be truncated with '...'.  The fix is", "-\t\t\t* to increase the size by a small amount.", "-\t\t\t*/", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, OS.LVSCW_AUTOSIZE);", "-\t\t\tif (imageList == null) {", "-\t\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "-\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, width + 2);", "-\t\t\t}", "+\t\t\tif (item != null) break;", "+\t\t\tindex++;", "+\t\t}", "+\t\tint hStateList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);", "+\t\tif (hStateList != 0) {", "+\t\t\tint [] cx = new int [1], cy = new int [1];", "+\t\t\tOS.ImageList_GetIconSize (hStateList, cx, cy);", "+\t\t\tnewWidth += cx [0] + 4;", "+\t\t}", "+\t\tint hImageList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0);", "+\t\tif (hImageList != 0) {", "+\t\t\tint [] cx = new int [1], cy = new int [1];", "+\t\t\tOS.ImageList_GetIconSize (hImageList, cx, cy);", "+\t\t\tnewWidth += cx [0];", "+\t\t}", "+\t\tnewWidth += 8;", "+\t\tint oldWidth = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "+\t\tif (newWidth > oldWidth) {", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, newWidth);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "107a9b64214ff6cdea93df0c4fd1ce89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "8549b1db39ac8fd4bb7564c61e5b9a04b5efde6f", "commitAfterChange": "2b3120470b46968368044df3f94129d586bc41d5", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": "  void setScrollWidth (boolean force)", "signatureAfterChange": "  boolean setScrollWidth (TableItem item, boolean force)", "diff": ["-void setScrollWidth (boolean force) {", "+boolean setScrollWidth (TableItem item, boolean force) {", "+\tif (ignoreRedraw) return false;", "-\t\treturn;", "+\t\treturn false;", "-\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, OS.LVSCW_AUTOSIZE);", "-\t\t//NOT DONE", "-//\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-//\t\tif ((bits & OS.LVS_OWNERDATA) != 0) {", "-//\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "-//\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, width + 2);", "-//\t\t}", "+\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\tint newWidth = 0;", "+\t\t\tcount = OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "+\t\t\tint index = 0;", "+\t\t\twhile (index < count) {", "+\t\t\t\tString string = item != null ? item.text : items [index].text;", "+\t\t\t\tif (string.length () != 0) {", "+\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "+\t\t\t\t\tnewWidth = Math.max (newWidth, OS.SendMessage (handle, OS.LVM_GETSTRINGWIDTH, 0, buffer));", "+\t\t\t\t}", "+\t\t\t\tif (item != null) break;", "+\t\t\t\tindex++;", "+\t\t\t}", "+\t\t\tint hStateList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);", "+\t\t\tif (hStateList != 0) {", "+\t\t\t\tint [] cx = new int [1], cy = new int [1];", "+\t\t\t\tOS.ImageList_GetIconSize (hStateList, cx, cy);", "+\t\t\t\tnewWidth += cx [0] + 4;", "+\t\t\t}", "+\t\t\tint hImageList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0);", "+\t\t\tif (hImageList != 0) {", "+\t\t\t\tint [] cx = new int [1], cy = new int [1];", "+\t\t\t\tOS.ImageList_GetIconSize (hImageList, cx, cy);", "+\t\t\t\tnewWidth += cx [0];", "+\t\t\t}", "+\t\t\tnewWidth += 8;", "+\t\t\tint oldWidth = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "+\t\t\tif (newWidth > oldWidth) {", "+\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, newWidth);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When the table is dislaying check boxes without", "+\t\t\t* icons the width computed by LVM_SETCOLUMNWIDTH with LVSCW_AUTOSIZE", "+\t\t\t* is too small causing the longest item to be truncated with '...'.", "+\t\t\t* The fix is to increase the size by a small amount.", "+\t\t\t*/", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, OS.LVSCW_AUTOSIZE);", "+\t\t\tif ((style & SWT.CHECK) != 0 && imageList != null) {", "+\t\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "+\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, width + 2);", "+\t\t\t}", "+\t\t\treturn true;", "+\t\t}", "+\treturn false;"]}], "num": 19155}
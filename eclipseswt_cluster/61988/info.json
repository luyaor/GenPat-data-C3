{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c39de99833e6e4c72f92eb7a31b825aa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94aece66e68d51a9795810a46f983d09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " void calculateVisibleItemCountParent()", "signatureAfterChange": " void addItem (TreeItem item, int index)", "diff": ["- */", "-void calculateVisibleItemCountParent() {", "-\tTreeItem parentItem = getParentItem();", "+}", "+void addItem (TreeItem item, int index) {", "+\t/* adds a child item to the receiver */", "+\tTreeItem[] newChildren = new TreeItem [items.length + 1];", "+\tSystem.arraycopy (items, 0, newChildren, 0, index);", "+\tnewChildren[index] = item;", "+\tSystem.arraycopy (items, index, newChildren, index + 1, items.length - index);", "+\titems = newChildren;", "-\tif (parentItem != null) {", "-\t\tparentItem.calculateVisibleItemCount();", "-\t}", "-\telse {", "-\t\tgetParent().getRoot().calculateVisibleItemCount();", "+\t/* if item should be available immediately then update parent accordingly */", "+\tif (item.isAvailable ()) {", "+\t\tparent.makeAvailable (item);", "+\t\tparent.redrawFromItemDownwards (availableIndex);", "+\t} else {", "+\t\t/* receiver will need update if this is its first child */", "+\t\tif (isAvailable () && items.length == 1) redrawItem ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2caacfb06967000fee0353fc4d2bf9e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " void addItem (TreeItem2 item, int index)", "signatureAfterChange": " void calculateVisibleItemCountParent()", "diff": ["-}", "-void addItem (TreeItem2 item, int index) {", "-\t/* adds a child item to the receiver */", "-\tTreeItem2[] newChildren = new TreeItem2 [items.length + 1];", "-\tSystem.arraycopy (items, 0, newChildren, 0, index);", "-\tnewChildren[index] = item;", "-\tSystem.arraycopy (items, index, newChildren, index + 1, items.length - index);", "-\titems = newChildren;", "-\t/* if item should be available immediately then update parent accordingly */", "-\tif (item.isAvailable ()) {", "-\t\tparent.makeAvailable (item);", "-\t\tparent.redrawFromItemDownwards (availableIndex);", "-\t} else {", "-\t\t/* receiver will need update if this is its first child */", "-\t\tif (isAvailable () && items.length == 1) redrawItem ();", "+ */", "+void calculateVisibleItemCountParent() {", "+\tTreeItem2 parentItem = getParentItem();", "+", "+\tif (parentItem != null) {", "+\t\tparentItem.calculateVisibleItemCount();", "+\t}", "+\telse {", "+\t\tgetParent().getRoot().calculateVisibleItemCount();"]}], "num": 61988}
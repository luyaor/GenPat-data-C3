{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66641533d1a28ce3c5e2a7e294f46b93", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11f67b166762b36ec004fa4bc5516dc0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " String computeResultChooserDialog ()", "signatureAfterChange": " String computeResultChooserDialog ()", "diff": ["-\t\tint /*long*/ list = 0;", "+\t\tlong /*int*/ list = 0;", "-\t\tint /*long*/ current = list;", "+\t\tlong /*int*/ current = list;", "-\t\t\tint /*long*/ name = OS.g_slist_data (current);", "-\t\t\tint /*long*/ utf8Ptr = 0;", "+\t\t\tlong /*int*/ name = OS.g_slist_data (current);", "+\t\t\tlong /*int*/ utf8Ptr = 0;", "-\t\t\t\tint /*long*/ [] items_written = new int /*long*/ [1];", "-\t\t\t\tint /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "+\t\t\t\tlong /*int*/ [] items_written = new long /*int*/ [1];", "+\t\t\t\tlong /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "-\t\tint /*long*/ utf8Ptr = 0;", "+\t\tlong /*int*/ utf8Ptr = 0;", "-\t\t\tint /*long*/ path = OS.gtk_file_chooser_get_filename (handle);", "+\t\t\tlong /*int*/ path = OS.gtk_file_chooser_get_filename (handle);", "-\t\t\tint /*long*/ [] items_written = new int /*long*/ [1];", "-\t\t\tint /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "+\t\t\tlong /*int*/ [] items_written = new long /*int*/ [1];", "+\t\t\tlong /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "-\tint /*long*/ filter = OS.gtk_file_chooser_get_filter (handle);", "+\tlong /*int*/ filter = OS.gtk_file_chooser_get_filter (handle);", "-\t\tint /*long*/ filterNamePtr = OS.gtk_file_filter_get_name (filter);", "+\t\tlong /*int*/ filterNamePtr = OS.gtk_file_filter_get_name (filter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7eede369cab920ded98c531fc3f24799", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/internal/ImageList.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public static int createPixbuf(Image image)", "signatureAfterChange": "  public static long createPixbuf(Image image)", "diff": ["-public static int /*long*/ createPixbuf(Image image) {", "-\tint /*long*/ pixbuf;", "+public static long /*int*/ createPixbuf(Image image) {", "+\tlong /*int*/ pixbuf;", "-\t\tint /*long*/ surface = convertSurface(image);", "+\t\tlong /*int*/ surface = convertSurface(image);", "-\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);", "+\t\tlong /*int*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);", "-\t\tint /*long*/ surfaceData = Cairo.cairo_image_surface_get_data(surface);", "+\t\tlong /*int*/ surfaceData = Cairo.cairo_image_surface_get_data(surface);", "-\t\tint /*long*/ colormap = OS.gdk_colormap_get_system ();", "+\t\tlong /*int*/ colormap = OS.gdk_colormap_get_system ();", "-\t\t\tint /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);", "+\t\t\tlong /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);", "-\t\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\t\t\tlong /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\t\t\tint /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);", "+\t\t\tlong /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);", "-\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\t\tlong /*int*/ offset = pixels + (y * stride);", "-\t\t\t\tint /*long*/ maskOffset = maskPixels + (y * maskStride);", "+\t\t\t\tlong /*int*/ maskOffset = maskPixels + (y * maskStride);", "-\t\t\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);", "+\t\t\t\tlong /*int*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);", "-\t\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\t\t\tlong /*int*/ offset = pixels + (y * stride);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "006346b4f395f5ecef28d2eafd0ed562", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": "  int QueryInterface (int riid, int ppvObject)", "signatureAfterChange": "  int QueryInterface (long riid, long ppvObject)", "diff": ["-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {", "+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {weakReference.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {weakReference.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {webBrowserChrome.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {webBrowserChrome.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {webBrowserChromeFocus.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {webBrowserChromeFocus.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {embeddingSiteWindow.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {embeddingSiteWindow.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {interfaceRequestor.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {interfaceRequestor.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {supportsWeakReference.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {supportsWeakReference.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {contextMenuListener.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {contextMenuListener.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {uriContentListener.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {uriContentListener.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {tooltipListener.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {tooltipListener.getAddress ()}, C.PTR_SIZEOF);", "-\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {badCertListener.getAddress ()}, C.PTR_SIZEOF);", "+\t\tXPCOM.memmove (ppvObject, new long /*int*/[] {badCertListener.getAddress ()}, C.PTR_SIZEOF);", "-\tXPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);", "+\tXPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4db130f785e568f12f3d29b3eb3c0251", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleControlSite.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " private int Invoke(int dispIdMember, int riid, int lcid, int dwFlags, int pDispParams, int pVarResult, int pExcepInfo, int pArgErr)", "signatureAfterChange": " private int Invoke(int dispIdMember, long riid, int lcid, int dwFlags, long pDispParams, long pVarResult, long pExcepInfo, long pArgErr)", "diff": ["-private int Invoke(int dispIdMember, int /*long*/ riid, int lcid, int dwFlags, int /*long*/ pDispParams, int /*long*/ pVarResult, int /*long*/ pExcepInfo, int /*long*/ pArgErr) {", "+private int Invoke(int dispIdMember, long /*int*/ riid, int lcid, int dwFlags, long /*int*/ pDispParams, long /*int*/ pVarResult, long /*int*/ pExcepInfo, long /*int*/ pArgErr) {", "-\t\tif (pExcepInfo != 0) COM.MoveMemory(pExcepInfo, new int /*long*/ [] {0}, OS.PTR_SIZEOF);", "+\t\tif (pExcepInfo != 0) COM.MoveMemory(pExcepInfo, new long /*int*/ [] {0}, OS.PTR_SIZEOF);", "-\t\t\tif (pVarResult != 0) COM.MoveMemory(pVarResult, new int /*long*/ [] {0}, OS.PTR_SIZEOF);", "-\t\t\tif (pExcepInfo != 0) COM.MoveMemory(pExcepInfo, new int /*long*/ [] {0}, OS.PTR_SIZEOF);", "+\t\t\tif (pVarResult != 0) COM.MoveMemory(pVarResult, new long /*int*/ [] {0}, OS.PTR_SIZEOF);", "+\t\t\tif (pExcepInfo != 0) COM.MoveMemory(pExcepInfo, new long /*int*/ [] {0}, OS.PTR_SIZEOF);", "-\t\t\tif (pVarResult != 0) COM.MoveMemory(pVarResult, new int /*long*/ [] {0}, OS.PTR_SIZEOF);", "-\t\t\tif (pExcepInfo != 0) COM.MoveMemory(pExcepInfo, new int /*long*/ [] {0}, OS.PTR_SIZEOF);", "+\t\t\tif (pVarResult != 0) COM.MoveMemory(pVarResult, new long /*int*/ [] {0}, OS.PTR_SIZEOF);", "+\t\t\tif (pExcepInfo != 0) COM.MoveMemory(pExcepInfo, new long /*int*/ [] {0}, OS.PTR_SIZEOF);", "-\t\t\tif (pVarResult != 0) COM.MoveMemory(pVarResult, new int /*long*/ [] {0}, OS.PTR_SIZEOF);", "-\t\t\tif (pExcepInfo != 0) COM.MoveMemory(pExcepInfo,new int /*long*/ [] {0}, OS.PTR_SIZEOF);", "+\t\t\tif (pVarResult != 0) COM.MoveMemory(pVarResult, new long /*int*/ [] {0}, OS.PTR_SIZEOF);", "+\t\t\tif (pExcepInfo != 0) COM.MoveMemory(pExcepInfo,new long /*int*/ [] {0}, OS.PTR_SIZEOF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab0793c1cda5011fcd078fdb8c8d1030", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  long windowProc (long hwnd, int msg, long wParam, long lParam)", "diff": ["-int /*long*/ windowProc (int /*long*/ hwnd, int msg, int /*long*/ wParam, int /*long*/ lParam) {", "+long /*int*/ windowProc (long /*int*/ hwnd, int msg, long /*int*/ wParam, long /*int*/ lParam) {", "-\t\t\t\t\t\tint /*long*/ hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\t\t\t\t\tlong /*int*/ hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "-\t\t\t\t\t\tint /*long*/ hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\t\t\t\t\tlong /*int*/ hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "-\t\t\tint /*long*/ hRgn = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "+\t\t\tlong /*int*/ hRgn = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "-\t\t\t\tint /*long*/ rectRgn = OS.CreateRectRgn (rect.left, itemRect.top, rect.right, itemRect.bottom);", "+\t\t\t\tlong /*int*/ rectRgn = OS.CreateRectRgn (rect.left, itemRect.top, rect.right, itemRect.bottom);", "-\t\t\tint /*long*/ hdc = OS.GetDC (handle);", "-\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\tlong /*int*/ hdc = OS.GetDC (handle);", "+\t\t\tlong /*int*/ memHdc = OS.CreateCompatibleDC (hdc);", "-\t\t\tint /*long*/ [] pBits = new int /*long*/ [1];", "-\t\t\tint /*long*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t\t\tlong /*int*/ [] pBits = new long /*int*/ [1];", "+\t\t\tlong /*int*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "-\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+\t\t\tlong /*int*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08efbcf32125016e5b390922aa7344e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TaskItem.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void updateText ()", "signatureAfterChange": "  void updateText ()", "diff": ["-\tint /*long*/ hdc = OS.GetDC (0);", "+\tlong /*int*/ hdc = OS.GetDC (0);", "-\tint /*long*/ [] pBits = new int /*long*/ [1];", "-\tint /*long*/ hBitmap = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\tlong /*int*/ [] pBits = new long /*int*/ [1];", "+\tlong /*int*/ hBitmap = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "-\tint /*long*/ dstHdc = OS.CreateCompatibleDC (hdc);", "-\tint /*long*/ oldBitmap = OS.SelectObject (dstHdc, hBitmap);", "-\tint /*long*/ hMask = OS.CreateBitmap (width, height, 1, 1, null);", "+\tlong /*int*/ dstHdc = OS.CreateCompatibleDC (hdc);", "+\tlong /*int*/ oldBitmap = OS.SelectObject (dstHdc, hBitmap);", "+\tlong /*int*/ hMask = OS.CreateBitmap (width, height, 1, 1, null);", "-\tint /*long*/ maskHdc = OS.CreateCompatibleDC (hdc);", "-\tint /*long*/ oldMask = OS.SelectObject (maskHdc, hMask);", "+\tlong /*int*/ maskHdc = OS.CreateCompatibleDC (hdc);", "+\tlong /*int*/ oldMask = OS.SelectObject (maskHdc, hMask);", "-\tint /*long*/ oldBrush = OS.SelectObject (maskHdc, OS.GetStockObject (OS.BLACK_BRUSH));", "+\tlong /*int*/ oldBrush = OS.SelectObject (maskHdc, OS.GetStockObject (OS.BLACK_BRUSH));", "-\tint /*long*/ brush = OS.CreateSolidBrush (OS.GetSysColor (OS.COLOR_HIGHLIGHT));", "+\tlong /*int*/ brush = OS.CreateSolidBrush (OS.GetSysColor (OS.COLOR_HIGHLIGHT));", "-\tint /*long*/ hFont = 0, oldHFont = 0;", "+\tlong /*int*/ hFont = 0, oldHFont = 0;", "-\tint /*long*/ hIcon = OS.CreateIconIndirect (iconInfo);", "+\tlong /*int*/ hIcon = OS.CreateIconIndirect (iconInfo);", "-\tint /*long*/ mTaskbarList3 = parent.mTaskbarList3;", "-\tint /*long*/ hwnd = shell.handle;", "+\tlong /*int*/ mTaskbarList3 = parent.mTaskbarList3;", "+\tlong /*int*/ hwnd = shell.handle;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f2c36d084e695f58890a4f505c6358d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " \t \tstatic int atkText_get_run_attributes (int atkObject, int offset, int start_offset, int end_offset)", "signatureAfterChange": " \t \tstatic long atkText_get_run_attributes (long atkObject, long offset, long start_offset, long end_offset)", "diff": ["-\tstatic int /*long*/ atkText_get_run_attributes (int /*long*/ atkObject, int /*long*/ offset, int /*long*/ start_offset, int /*long*/ end_offset) {", "+\tstatic long /*int*/ atkText_get_run_attributes (long /*int*/ atkObject, long /*int*/ offset, long /*int*/ start_offset, long /*int*/ end_offset) {", "-\t\t\t\tint /*long*/ result = 0;", "+\t\t\t\tlong /*int*/ result = 0;", "-\t\t\t\t\t\tint /*long*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "+\t\t\t\t\t\tlong /*int*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "-\t\t\t\t\t\tint /*long*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "+\t\t\t\t\t\tlong /*int*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "-\t\t\t\t\t\tint /*long*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "+\t\t\t\t\t\tlong /*int*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "-\t\t\t\t\t\tint /*long*/ attrPtr;", "+\t\t\t\t\t\tlong /*int*/ attrPtr;", "-\t\t\t\t\t\tint /*long*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "+\t\t\t\t\t\tlong /*int*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "-\t\t\t\t\t\tint /*long*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "+\t\t\t\t\t\tlong /*int*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "-\t\t\t\t\t\tint /*long*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "+\t\t\t\t\t\tlong /*int*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "-\t\tint /*long*/ parentResult = 0;", "+\t\tlong /*int*/ parentResult = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab80b3f938d04b95cda7c3c1cfe8bc4a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  long windowProc (long hwnd, int msg, long wParam, long lParam)", "diff": ["-int /*long*/ windowProc (int /*long*/ hwnd, int msg, int /*long*/ wParam, int /*long*/ lParam) {", "+long /*int*/ windowProc (long /*int*/ hwnd, int msg, long /*int*/ wParam, long /*int*/ lParam) {", "-\t\t\t\tint /*long*/ code = callWindowProc (hwnd, OS.WM_SIZE, wParam, lParam);", "+\t\t\t\tlong /*int*/ code = callWindowProc (hwnd, OS.WM_SIZE, wParam, lParam);", "-\t\t\t\tint /*long*/ code = OS.SendMessage (handle, OS.WM_VSCROLL, wParam, lParam);", "+\t\t\t\tlong /*int*/ code = OS.SendMessage (handle, OS.WM_VSCROLL, wParam, lParam);", "-\t\t\tint /*long*/ hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);", "+\t\t\tlong /*int*/ hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);", "-\t\t\tint /*long*/ hRgn = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "+\t\t\tlong /*int*/ hRgn = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "-\t\t\t\tint /*long*/ rectRgn = OS.CreateRectRgn (itemRect.left, itemRect.top, itemRect.right, itemRect.bottom);", "+\t\t\t\tlong /*int*/ rectRgn = OS.CreateRectRgn (itemRect.left, itemRect.top, itemRect.right, itemRect.bottom);", "-\t\t\tint /*long*/ hdc = OS.GetDC (handle);", "-\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\tlong /*int*/ hdc = OS.GetDC (handle);", "+\t\t\tlong /*int*/ memHdc = OS.CreateCompatibleDC (hdc);", "-\t\t\tint /*long*/ [] pBits = new int /*long*/ [1];", "-\t\t\tint /*long*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t\t\tlong /*int*/ [] pBits = new long /*int*/ [1];", "+\t\t\tlong /*int*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "-\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+\t\t\tlong /*int*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8c08fb9ca8d41686f5f453f32f66fca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final long hdc, final StyleItem run)", "diff": ["-void shape (final int /*long*/ hdc, final StyleItem run) {", "+void shape (final long /*int*/ hdc, final StyleItem run) {", "-\tint /*long*/ hHeap = OS.GetProcessHeap();", "+\tlong /*int*/ hHeap = OS.GetProcessHeap();", "-\t\tint /*long*/ hFont = OS.GetCurrentObject(hdc, OS.OBJ_FONT);", "-\t\tint /*long*/ newFont = 0;", "+\t\tlong /*int*/ hFont = OS.GetCurrentObject(hdc, OS.OBJ_FONT);", "+\t\tlong /*int*/ newFont = 0;", "-\t\t\tint /*long*/ ssa = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, OS.SCRIPT_STRING_ANALYSIS_sizeof());", "-\t\t\tint /*long*/ metaFileDc = OS.CreateEnhMetaFile(hdc, null, null, null);", "-\t\t\tint /*long*/ oldMetaFont = OS.SelectObject(metaFileDc, hFont);", "+\t\t\tlong /*int*/ ssa = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, OS.SCRIPT_STRING_ANALYSIS_sizeof());", "+\t\t\tlong /*int*/ metaFileDc = OS.CreateEnhMetaFile(hdc, null, null, null);", "+\t\t\tlong /*int*/ oldMetaFont = OS.SelectObject(metaFileDc, hFont);", "-\t\t\tint /*long*/ metaFile = OS.CloseEnhMetaFile(metaFileDc);", "+\t\t\tlong /*int*/ metaFile = OS.CloseEnhMetaFile(metaFileDc);", "-\t\t\t\tint /*long*/ metaFileEnumProc (int /*long*/ hDC, int /*long*/ table, int /*long*/ record, int /*long*/ nObj, int /*long*/ lpData) {", "+\t\t\t\tlong /*int*/ metaFileEnumProc (long /*int*/ hDC, long /*int*/ table, long /*int*/ record, long /*int*/ nObj, long /*int*/ lpData) {", "-\t\t\tint /*long*/ address = callback.getAddress();", "+\t\t\tlong /*int*/ address = callback.getAddress();", "-\t\t\t\t\t\t\tint /*long*/ pFont = getItemFont(pRun);", "+\t\t\t\t\t\t\tlong /*int*/ pFont = getItemFont(pRun);", "-\t\t\t\t\t\t\t\tint /*long*/ nFont = getItemFont(nRun);", "+\t\t\t\t\t\t\t\tlong /*int*/ nFont = getItemFont(nRun);", "-\t\t\t\tint /*long*/[] hNewFont = new int /*long*/[1];", "+\t\t\t\tlong /*int*/[] hNewFont = new long /*int*/[1];", "-\t\t\t\t\tint /*long*/ mLangFont = OS.CreateFontIndirect(logFont);", "-\t\t\t\t\tint /*long*/ oldFont = OS.SelectObject(hdc, mLangFont);", "+\t\t\t\t\tlong /*int*/ mLangFont = OS.CreateFontIndirect(logFont);", "+\t\t\t\t\tlong /*int*/ oldFont = OS.SelectObject(hdc, mLangFont);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c43721bf7268b29de2cb40f2cb2fa7a3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 187, "signatureBeforeChange": "  int NotifyCertProblem (int socketInfo, int status, int targetSite, int _suppressError)", "signatureAfterChange": "  int NotifyCertProblem (long socketInfo, long status, long targetSite, long _suppressError)", "diff": ["-int NotifyCertProblem (int /*long*/ socketInfo, int /*long*/ status, int /*long*/ targetSite, int /*long*/ _suppressError) {", "+int NotifyCertProblem (long /*int*/ socketInfo, long /*int*/ status, long /*int*/ targetSite, long /*int*/ _suppressError) {", "-\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (targetSite);", "+\tlong /*int*/ buffer = XPCOM.nsEmbedCString_get (targetSite);", "-\tint /*long*/[] result = new int /*long*/[1];", "+\tlong /*int*/[] result = new long /*int*/[1];", "-\t\tint /*long*/ ptr = XPCOM.nsEmbedString_new ();", "+\t\tlong /*int*/ ptr = XPCOM.nsEmbedString_new ();", "-\t\tint /*long*/ ptr = XPCOM.nsEmbedString_new ();", "+\t\tlong /*int*/ ptr = XPCOM.nsEmbedString_new ();", "-\t\tint /*long*/ ptr = XPCOM.nsEmbedString_new ();", "+\t\tlong /*int*/ ptr = XPCOM.nsEmbedString_new ();", "-\t\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\t\tlong /*int*/[] result = new long /*int*/[1];", "-\t\t\t\t\tint /*long*/ hostString = XPCOM.nsEmbedCString_new (hostBytes, hostBytes.length);", "+\t\t\t\t\tlong /*int*/ hostString = XPCOM.nsEmbedCString_new (hostBytes, hostBytes.length);"]}], "num": 46982}
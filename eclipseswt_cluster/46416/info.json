{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f688b1cebf082d1e45a010fbd561366", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bacaa7ad874c8a4ebb2afe0a0f1b04b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 16, "signatureBeforeChange": " void init(Device device, ImageData image)", "signatureAfterChange": "  void init(Device device, ImageData image)", "diff": ["-}", "-void init(Device device, ImageData image) {", "-\tif (device == null) device = Device.getDevice();", "-\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\tthis.device = device;", "-\tif (image == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-", "-\tint pixmap= createPixMap(image.width, image.height, image.depth);", "-", "-\tint[] transPixel= null;", "-\tif (image.transparentPixel != -1) transPixel= new int[]{ image.transparentPixel };", "-\t", "-\tint error= putImage(image, transPixel, pixmap);", "-\tif (error != 0) {", "-\t\tdisposeBitmapOrPixmap(pixmap);", "-\t\tSWT.error(error);", "-\tif (image.getTransparencyType() == SWT.TRANSPARENCY_MASK || image.transparentPixel != -1) {", "-\t\tif (image.transparentPixel != -1) transparentPixel = transPixel[0];", "-\t\tint mask= createMaskImage(image.getTransparencyMask());", "-\t\tif (mask == 0) {", "-\t\t\tdisposeBitmapOrPixmap(pixmap);", "-\t\t\tSWT.error(error);", "+", "+void init(Device device, ImageData image) {", "+\tif (image == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tthis.device = device;", "+\tint width = image.width;", "+\tint height = image.height;", "+\t", "+\t/* Create the image */", "+\tint dataSize = width * height * 4;", "+\tdata = OS.NewPtr(dataSize);", "+\tif (data == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint provider = OS.CGDataProviderCreateWithData(0, data, dataSize, 0);", "+\tif (provider == 0) {", "+\t\tOS.DisposePtr(data);", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t}", "+\tint colorspace = device.colorspace;", "+\tint transparency = image.getTransparencyType(); ", "+\tint alphaInfo = transparency == SWT.TRANSPARENCY_NONE ? OS.kCGImageAlphaNoneSkipFirst : OS.kCGImageAlphaFirst;", "+\thandle = OS.CGImageCreate(width, height, 8, 32, width * 4, colorspace, alphaInfo, provider, null, false, 0);", "+\tOS.CGDataProviderRelease(provider);", "+\tif (handle == 0) {", "+\t\tOS.DisposePtr(data);", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t}", "+\t", "+\t/* Initialize data */", "+\tint bpr = width * 4;", "+\tPaletteData palette = image.palette;", "+\tPaletteData newPalette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\tbyte[] buffer = new byte[dataSize];", "+\tif (palette.isDirect) {", "+\t\tImageData.blit(ImageData.BLIT_SRC,", "+\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), 0, 0, width, height, palette.redMask, palette.greenMask, palette.blueMask,", "+\t\t\tImageData.ALPHA_OPAQUE, null, 0, 0, 0, ", "+\t\t\tbuffer, 32, bpr, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "+\t\t\tfalse, false);", "+\t} else {", "+\t\tRGB[] rgbs = palette.getRGBs();", "+\t\tint length = rgbs.length;", "+\t\tbyte[] srcReds = new byte[length];", "+\t\tbyte[] srcGreens = new byte[length];", "+\t\tbyte[] srcBlues = new byte[length];", "+\t\tfor (int i = 0; i < rgbs.length; i++) {", "+\t\t\tRGB rgb = rgbs[i];", "+\t\t\tif (rgb == null) continue;", "+\t\t\tsrcReds[i] = (byte)rgb.red;", "+\t\t\tsrcGreens[i] = (byte)rgb.green;", "+\t\t\tsrcBlues[i] = (byte)rgb.blue;", "-\t\tthis.mask = mask;", "-\t\tif (image.getTransparencyType() == SWT.TRANSPARENCY_MASK) {", "-\t\t\tthis.type = SWT.ICON;", "-\t\t} else {", "-\t\t\tthis.type = SWT.BITMAP;", "+\t\tImageData.blit(ImageData.BLIT_SRC,", "+\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), 0, 0, width, height, srcReds, srcGreens, srcBlues,", "+\t\t\tImageData.ALPHA_OPAQUE, null, 0, 0, 0,", "+\t\t\tbuffer, 32, bpr, ImageData.MSB_FIRST, 0, 0, width, height, newPalette.redMask, newPalette.greenMask, newPalette.blueMask,", "+\t\t\tfalse, false);", "+\t}", "+\t", "+\t/* Initialize transparency */", "+\tif (transparency == SWT.TRANSPARENCY_MASK || image.transparentPixel != -1) {", "+\t\tthis.type = image.transparentPixel != -1 ? SWT.BITMAP : SWT.ICON;", "+\t\tif (image.transparentPixel != -1) {}", "+\t\tImageData maskImage = image.getTransparencyMask();", "+\t\tbyte[] maskData = maskImage.data;", "+\t\tint maskBpl = maskImage.bytesPerLine;", "+\t\tint offset = 0, maskOffset = 0;", "+\t\tfor (int y = 0; y<height; y++) {", "+\t\t\tfor (int x = 0; x<width; x++) {", "+\t\t\t\tbuffer[offset] = ((maskData[maskOffset + (x >> 3)]) & (1 << (7 - (x & 0x7)))) != 0 ? (byte)0xff : 0;", "+\t\t\t\toffset += 4;", "+\t\t\t}", "+\t\t\tmaskOffset += maskBpl;", "-\t\tthis.mask = 0;", "-\t\tthis.alpha = image.alpha;", "-\t\tif (image.alpha == -1 && image.alphaData != null) {", "+\t\tif (image.alpha != -1) {", "+\t\t\tthis.alpha = image.alpha;", "+\t\t\tbyte a = (byte)this.alpha;", "+\t\t\tfor (int dataIndex=0; dataIndex<buffer.length; dataIndex+=4) {", "+\t\t\t\tbuffer[dataIndex] = a;\t\t\t\t", "+\t\t\t}", "+\t\t} else if (image.alphaData != null) {", "+\t\t\tint offset = 0, alphaOffset = 0;", "+\t\t\tfor (int y = 0; y<height; y++) {", "+\t\t\t\tfor (int x = 0; x<width; x++) {", "+\t\t\t\t\tbuffer[offset] = alphaData[alphaOffset];", "+\t\t\t\t\toffset += 4;", "+\t\t\t\t\talphaOffset += 1;", "+\t\t\t\t}", "+\t\t\t}", "-\tthis.pixmap = pixmap;", "+\t", "+\tOS.memcpy(data, buffer, dataSize);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a1773bee0406fc6f22acb6d9d15af2c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "9deefd18be8de01a672cfca15620a560b1ae5f22", "commitAfterChange": "d67b8caceb3f10df6a8e238427498db262144133", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void init(Device display, ImageData image)", "signatureAfterChange": "  void init(Device device, ImageData image)", "diff": ["+", "+void init(Device device, ImageData image) {", "+\tif (image == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tthis.device = device;", "+\tint width = image.width;", "+\tint height = image.height;", "+\tPaletteData palette = image.palette;", "+\tint pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB(), false, 8, width, height);", "+\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\tint data = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\tif (palette.isDirect) {", "+\t\tint redMask = palette.redMask;", "+\t\tint greenMask = palette.greenMask;", "+\t\tint blueMask = palette.blueMask;", "+\t\tint redShift = palette.redShift;", "+\t\tint greenShift = palette.greenShift;", "+\t\tint blueShift = palette.blueShift;", "+\t\tint[] pixels = new int[width];", "+\t\tbyte[] rgbPixels = new byte[stride];", "+\t\tfor (int y=0; y<height; y++) {", "+\t\t\timage.getPixels(0, y, width, pixels, 0);", "+\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\tint pixel = pixels[x];", "+\t\t\t\tint offset = x*3;", "+\t\t\t\tint r = pixel & redMask;", "+\t\t\t\tr = (redShift < 0) ? r >>> -redShift : r << redShift;", "+\t\t\t\tint g = pixel & greenMask;", "+\t\t\t\tg = (greenShift < 0) ? g >>> -greenShift : g << greenShift;", "+\t\t\t\tint b = pixel & blueMask;", "+\t\t\t\tb = (blueShift < 0) ? b >>> -blueShift : b << blueShift;", "+\t\t\t\trgbPixels[offset] = (byte)r;", "+\t\t\t\trgbPixels[offset + 1] = (byte)g;", "+\t\t\t\trgbPixels[offset + 2] = (byte)b;", "+\t\t\t}", "+\t\t\tOS.memmove(data + (stride * y), rgbPixels, rgbPixels.length);", "+\t\t}", "+\t} else {", "+\t\tRGB[] rgbs = palette.colors;", "+\t\tbyte[] pixels = new byte[width];", "+\t\tbyte[] rgbPixels = new byte[stride];", "+\t\tfor (int y=0; y<height; y++) {", "+\t\t\timage.getPixels(0, y, width, pixels, 0);", "+\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\tint pixel = pixels[x] & 0xFF;", "+\t\t\t\tint r = 0, g = 0, b = 0;", "+\t\t\t\tif (pixel < rgbs.length) {", "+\t\t\t\t\tRGB rgb = rgbs[pixel];", "+\t\t\t\t\tr = rgb.red; g = rgb.green; b = rgb.blue;", "+\t\t\t\t}", "+\t\t\t\tint offset = x*3;", "+\t\t\t\trgbPixels[offset] = (byte)r;", "+\t\t\t\trgbPixels[offset + 1] = (byte)g;", "+\t\t\t\trgbPixels[offset + 2] = (byte)b;", "+\t\t\t}", "+\t\t\tOS.memmove(data + (stride * y), rgbPixels, rgbPixels.length);", "+\t\t}", "+\t}", "+\tint pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);", "+\tif (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint gdkGC = OS.gdk_gc_new(pixmap);", "+\tif (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tOS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);", "+\tOS.g_object_unref(gdkGC);", "+\tOS.g_object_unref(pixbuf);", "+\t", "+\tif (image.getTransparencyType() == SWT.TRANSPARENCY_MASK || image.transparentPixel != -1) {", "+\t\tif (image.transparentPixel != -1) {", "+\t\t\tRGB rgb = null;", "+\t\t\tif (palette.isDirect) {", "+\t\t\t\trgb = palette.getRGB(image.transparentPixel);", "+\t\t\t} else {", "+\t\t\t\tif (image.transparentPixel < palette.colors.length) {", "+\t\t\t\t\trgb = palette.getRGB(image.transparentPixel);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (rgb != null) {", "+\t\t\t\ttransparentPixel = rgb.red << 16 | rgb.green << 8 | rgb.blue;", "+\t\t\t}", "+\t\t}", "+\t\tImageData maskImage = image.getTransparencyMask();", "+\t\tbyte[] maskData = maskImage.data;", "+\t\tfor (int i = 0; i < maskData.length; i++) {", "+\t\t\tbyte s = maskData[i];", "+\t\t\tmaskData[i] = (byte)(((s & 0x80) >> 7) | ((s & 0x40) >> 5) |", "+\t\t\t\t((s & 0x20) >> 3) | ((s & 0x10) >> 1) | ((s & 0x08) << 1) |", "+\t\t\t\t((s & 0x04) << 3) | ((s & 0x02) << 5) |\t((s & 0x01) << 7));", "+\t\t}", "+\t\tint mask = OS.gdk_bitmap_create_from_data(0, maskData, maskImage.bytesPerLine * 8 , height);", "+\t\tif (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tthis.mask = mask;", "+\t\tif (image.getTransparencyType() == SWT.TRANSPARENCY_MASK) {", "+\t\t\tthis.type = SWT.ICON;", "+\t\t} else {", "+\t\t\tthis.type = SWT.BITMAP;", "+\t\t}", "+\t} else {", "+\t\tthis.type = SWT.BITMAP;", "+\t\tthis.mask = 0;", "+\t\tthis.alpha = image.alpha;", "+\t\tif (image.alpha == -1 && image.alphaData != null) {", "+\t\t\tthis.alphaData = new byte[image.alphaData.length];", "+\t\t\tSystem.arraycopy(image.alphaData, 0, this.alphaData, 0, alphaData.length);", "+\t\t}", "+\t}", "+\tthis.pixmap = pixmap;", "+}", "-", "-void init(Device display, ImageData image) {", "-\tif (image == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\tif (display == null) display = Display.getCurrent();", "-\tdevice = display;", "-", "-\t/*", "-\t * We don't really care about the real depth of the ImageData we are", "-\t * given.  We stretch everything to 24bpp which is the native GdkPixbuffer", "-\t * depth.  HOWEVER, there is one situation where this is not acceptable,", "-\t * namely bitmaps (1bpp), because they may be used in contexts that are", "-\t * sensitive to pixmap depth.", "-\t */", "-\tPixbuffer buff = new Pixbuffer(image);", "-\tbuff.toImage(this);", "-\treturn;", "-}"]}], "num": 46416}
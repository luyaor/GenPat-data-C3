{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fa090d9adda27aa573f2f1f885b3994", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18e0cbc7c12c09472b5681e80437dc7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 32, "signatureBeforeChange": " void calculateWidestShowingItem()", "signatureAfterChange": " public Control [] getChildren()", "diff": ["- */", "-void calculateWidestShowingItem() {", "-\tTreeItem visibleItem;", "-\tint newMaximumItemWidth = 0;", "-\tint bottomIndex = getBottomIndex();", "-\tint paintStopX;", "-", "-\t// add one to the loop end index because otherwise an item covered ", "-\t// by the horizontal scroll bar would not be taken into acount and ", "-\t// may become visible after this calculation. We're in trouble if", "-\t// that item is wider than the client area.", "-\tif (getHorizontalBar().getVisible() == true) {", "-\t\tbottomIndex++;", "-\t}", "-\tfor (int i = getTopIndex(); i < bottomIndex; i++) {", "-\t\tvisibleItem = getRoot().getVisibleItem(i);", "-\t\tif (visibleItem != null) {", "-\t\t\tpaintStopX = visibleItem.getPaintStopX();", "-\t\t\tnewMaximumItemWidth = Math.max(newMaximumItemWidth, paintStopX);", "-\t\t}", "-\t}", "-\tsetContentWidth(newMaximumItemWidth);", "+}", "+public Control [] getChildren() {", "+\tcheckWidget();", "+\tControl[] controls = _getChildren();", "+\tif (header == null) return controls;", "+\tControl[] result = new Control[controls.length - 1];", "+\t/* remove the Header from the returned set of children */", "+\tint index = 0;", "+\tfor (int i = 0; i < controls.length; i++) {", "+\t\t if (controls[i] != header) {", "+\t\t \tresult[index++] = controls[i];", "+\t\t }", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fe2567499e179738f50eb5792b6fdc9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "66a95066be25462b501b7c1e51178de7cfbd6dfa", "commitAfterChange": "9d1439265256d4dc44e7ee7f2321b1596dcd5b6c", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 70, "signatureBeforeChange": "  LRESULT wmLButtonDown (int hwnd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmLButtonDown (int hwnd, int wParam, int lParam)", "diff": ["-\tboolean dragging = false, mouseDown = true;", "-\tboolean dragDetect = dragDetect (x, y);", "-\tif (dragDetect) {", "+\tboolean [] consume = null, detect = null;", "+\tboolean dragging = false, mouseDown = true;", "+\tif ((state & DRAG_DETECT) != 0 && hooks (SWT.DragDetect)) {", "-\t\t\tPOINT pt = new POINT ();", "-\t\t\tpt.x = x;", "-\t\t\tpt.y = y;", "-\t\t\tOS.ClientToScreen (hwnd, pt);", "-\t\t\tdragging = OS.DragDetect (hwnd, pt);", "+\t\t\tdetect = new boolean [1];", "+\t\t\tconsume = new boolean [1];", "+\t\t\tdragging = dragDetect (hwnd, x, y, true, detect, consume);", "-\tboolean dragOverride = dragging && dragOverride ();", "-\tif (dispatch && !dragOverride) {", "+\tif (dispatch && (consume == null || !consume [0])) {", "-\t\tsendDragEvent ((short) (lParam & 0xFFFF), (short) (lParam >> 16));", "+\t\tsendDragEvent (x, y);", "-\t\tif (dragDetect) {", "+\t\tif (detect != null && detect [0]) {"]}], "num": 10528}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11b352f65b1bc38a0e103ad78d27e668", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f59b25d689a1f506245709154670c5cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "7a19d8d2a4b85311f6fd0b38a7237f01fa3e2f10", "commitAfterChange": "1dd8f9719ec660fe2d5d5b8d417ae8124810b3db", "methodNumberBeforeChange": 168, "methodNumberAfterChange": 168, "signatureBeforeChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "signatureAfterChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "diff": ["-\t", "-\t// Use NSWindowList instead of [NSApplication orderedWindows] because orderedWindows", "-\t// skips NSPanels. See bug 321614.", "-\tint /*long*/ outCount[] = new int /*long*/ [1];", "-\tOS.NSCountWindows(outCount);", "-\tint /*long*/ windowIDs[] = new int /*long*/ [(int)outCount[0]];", "-\tOS.NSWindowList(outCount[0], windowIDs);", "+\tint /*long*/ hitWindowNumber = 0;", "+\tif (OS.VERSION >= 0x1060) {", "+\t\thitWindowNumber = NSWindow.windowNumberAtPoint(screenLocation, 0);", "+\t} else {", "+\t\tCGPoint cgLocation = new CGPoint();", "+\t\tcgLocation.x = screenLocation.x;", "+\t\tcgLocation.y = getPrimaryFrame().height - screenLocation.y;", "+\t\tint /*long*/ cgLocationPtr = OS.malloc(OS.CGPoint_sizeof());", "+\t\tOS.memmove(cgLocationPtr, cgLocation, OS.CGPoint_sizeof());", "+\t\tint /*long*/ outWindow[] = new int /*long*/ [1];", "+\t\tint /*long*/ err = OS.HIWindowFindAtLocation (cgLocationPtr, 2, -1, 0, outWindow, null, 0);", "-\tfor (int i = 0, count = windowIDs.length; i < count && view == null; i++) {", "-\t\tNSWindow window = application.windowWithWindowNumber(windowIDs[i]);", "-\t\t// NSWindowList returns all window numbers for all processes. If the window ", "-\t\t// number passed to windowWithWindowNumber returns nil the window doesn't belong to", "-\t\t// this process.", "-\t\tif (window != null) {", "-\t\t\tNSView contentView = window.contentView();", "-\t\t\tif (contentView != null) contentView = contentView.superview();", "-\t\t\tif (contentView != null && OS.NSPointInRect(screenLocation, window.frame())) {", "-\t\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "-\t\t\t\tview = contentView.hitTest (location);", "-\t\t\t\tif (view == null && !checkTrim) {", "-\t\t\t\t\tview = contentView;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\tif (err == OS.noErr) {", "+\t\t\thitWindowNumber = OS.HIWindowGetCGWindowID(outWindow[0]);", "+\t\t}", "+\t}", "+\t", "+\tNSWindow window = application.windowWithWindowNumber(hitWindowNumber);", "+\tif (window != null) {", "+\t\tNSView contentView = window.contentView();", "+\t\tif (contentView != null) contentView = contentView.superview();", "+\t\tif (contentView != null) {", "+\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "+\t\t\tview = contentView.hitTest (location);", "+\t\t\tif (view == null && !checkTrim) {", "+\t\t\t\tview = contentView;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8320f2b08fc3689520bf1b61dcab05b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "1a606235eed4952b3f545771da3e4f6926e0b3ab", "commitAfterChange": "424c56c2c1a48fb26944920ea07e5617b7104efb", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "signatureAfterChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "diff": ["+\tint /*long*/ hitWindowNumber = 0;", "-\t\tint /*long*/ hitWindowNumber = NSWindow.windowNumberAtPoint(screenLocation, 0);", "-\t\tNSWindow window = application.windowWithWindowNumber(hitWindowNumber);", "-\t\tif (window != null) {", "-\t\t\tNSView contentView = window.contentView();", "-\t\t\tif (contentView != null) contentView = contentView.superview();", "-\t\t\tif (contentView != null) {", "-\t\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "-\t\t\t\tview = contentView.hitTest (location);", "-\t\t\t\tif (view == null && !checkTrim) {", "-\t\t\t\t\tview = contentView;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\thitWindowNumber = NSWindow.windowNumberAtPoint(screenLocation, 0);", "-\t\t// Use NSWindowList instead of [NSApplication orderedWindows] because orderedWindows", "-\t\t// skips NSPanels. See bug 321614.", "-\t\tint /*long*/ outCount[] = new int /*long*/ [1];", "-\t\tOS.NSCountWindows(outCount);", "-\t\tint /*long*/ windowIDs[] = new int /*long*/ [(int)outCount[0]];", "-\t\tOS.NSWindowList(outCount[0], windowIDs);", "+\t\tint /*long*/ outWindow[] = new int /*long*/ [1];", "+\t\tOS.FindWindow ((int /*long*/)screenLocation.x, (int /*long*/)(getPrimaryFrame().height - screenLocation.y), outWindow);", "-\t\tfor (int i = 0, count = windowIDs.length; i < count && view == null; i++) {", "-\t\t\tNSWindow window = application.windowWithWindowNumber(windowIDs[i]);", "-\t\t\t// NSWindowList returns all window numbers for all processes. If the window ", "-\t\t\t// number passed to windowWithWindowNumber returns nil the window doesn't belong to", "-\t\t\t// this process.", "-\t\t\tif (window != null) {", "-\t\t\t\tNSView contentView = window.contentView();", "-\t\t\t\tif (contentView != null) contentView = contentView.superview();", "-\t\t\t\t// TODO: This line is technically wrong -- NSPointInRect doesn't account for transparent parts of the window's", "-\t\t\t\t// structure region.", "-\t\t\t\tif (contentView != null && OS.NSPointInRect(screenLocation, window.frame())) {", "-\t\t\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "-\t\t\t\t\tview = contentView.hitTest (location);", "-\t\t\t\t\tif (view == null && !checkTrim) {", "-\t\t\t\t\t\tview = contentView;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "- \t\t\t}", "+\t\tif (outWindow[0] != 0) {", "+\t\t\thitWindowNumber = OS.HIWindowGetCGWindowID(outWindow[0]);", "+\t\t}", "+\t}", "+\t", "+\tNSWindow window = application.windowWithWindowNumber(hitWindowNumber);", "+\tif (window != null) {", "+\t\tNSView contentView = window.contentView();", "+\t\tif (contentView != null) contentView = contentView.superview();", "+\t\tif (contentView != null) {", "+\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "+\t\t\tview = contentView.hitTest (location);", "+\t\t\tif (view == null && !checkTrim) {", "+\t\t\t\tview = contentView;", "+\t\t\t}"]}], "num": 45799}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d380e1e3c6accc31e0d6b528ce3d5891", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8171601e54fcc0bb7e6c34d6f8a60cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "caa512aad37dedd16ed84b5d8b521cfb5fd78adc", "commitAfterChange": "30a9563f38681ae614bc8194165e01d676d62b8c", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 110, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\t/*", "-\t\t * Feature of XULRunner.  Activation and deactivation of the GRE must be", "-\t\t * performed by the embedder on non-Windows platforms.  Listen for focus", "-\t\t * events on the page being loaded so that activate and deactivate handling", "-\t\t * can be done as needed.", "-\t\t */", "-\t\tif (IsXULRunner) {", "-\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\tint rc = webBrowser.GetContentDOMWindow (result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\t\t\tnsIDOMWindow window = new nsIDOMWindow (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\trc = window.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\t\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tnsEmbedString string = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "-\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tstring.dispose ();", "-\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "-\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tstring.dispose ();", "-\t\t\ttarget.Release ();", "-", "-\t\t\t/* Listeners must be hooked in pages contained in frames */", "-\t\t\trc = window.GetFrames (result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\tnsIDOMWindowCollection frames = new nsIDOMWindowCollection (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tint[] frameCount = new int[1];", "-\t\t\trc = frames.GetLength (frameCount); /* PRUint32 */", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tint count = frameCount[0];", "-", "-\t\t\tif (count > 0) {", "-\t\t\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\t\trc = frames.Item (i, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\t\t\t\t\tnsIDOMWindow frame = new nsIDOMWindow (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\trc = frame.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\t\t\tframe.Release ();", "-\t", "-\t\t\t\t\ttarget = new nsIDOMEventTarget (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "-\t\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tstring.dispose ();", "-\t\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "-\t\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tstring.dispose ();", "-\t\t\t\t\ttarget.Release ();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tframes.Release ();", "-\t\t\twindow.Release ();", "-\t\t}", "+\t\thookDOMListeners ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9361862262a2d0bd61eca801c229ea4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "48b98e2320e6e86a6887f8923af23f6b65cabf55", "commitAfterChange": "d08804766f47b158c36407c33bd830982dde16ec", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath);", "+\t\t\tString profilePath = delegate.getProfilePath ();", "+\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath, profilePath, IsXULRunner);", "-\t\t\t/* extract external.xpt to temp */", "-\t\t\tString tempPath = System.getProperty (\"java.io.tmpdir\"); //$NON-NLS-1$", "-\t\t\tFile componentsDir = new File (tempPath, \"eclipse/mozillaComponents\"); //$NON-NLS-1$", "+\t\t\t/* extract external.xpt to the profile's components directory */", "+\t\t\tFile componentsDir = new File (profilePath, AppFileLocProvider.COMPONENTS_DIR);", "-\t\t\t}", "-\t\t\tif (componentsDir.exists () && componentsDir.isDirectory ()) {", "-\t\t\t\tLocationProvider.setComponentsPath (componentsDir.getAbsolutePath ());", "-\t\t/* compute the profile directory and set it on the AppFileLocProvider */", "-\t\tif (LocationProvider != null) {", "-\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "-\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "+\t\t/* notify observers of a new profile directory being used */", "-\t\t\tnsIDirectoryService directoryService = new nsIDirectoryService (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\trc = directoryService.QueryInterface (nsIProperties.NS_IPROPERTIES_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "-\t\t\tdirectoryService.Release ();", "-", "-\t\t\tnsIProperties properties = new nsIProperties (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "-\t\t\trc = properties.Get (buffer, nsIFile.NS_IFILE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "-\t\t\tproperties.Release ();", "-", "-\t\t\tnsIFile profileDir = new nsIFile (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tint /*long*/ path = XPCOM.nsEmbedCString_new ();", "-\t\t\trc = profileDir.GetNativePath (path);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tint length = XPCOM.nsEmbedCString_Length (path);", "-\t\t\tint /*long*/ ptr = XPCOM.nsEmbedCString_get (path);", "-\t\t\tbuffer = new byte [length];", "-\t\t\tXPCOM.memmove (buffer, ptr, length);", "-\t\t\tString profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "-\t\t\tLocationProvider.setProfilePath (profilePath);", "-\t\t\tLocationProvider.isXULRunner = IsXULRunner;", "-\t\t\tXPCOM.nsEmbedCString_delete (path);", "-\t\t\tprofileDir.Release ();", "-", "-\t\t\t/* notify observers of a new profile directory being used */", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "-", "-\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "-\t\t\tlength = STARTUP.length ();", "-\t\t\tchar[] chars = new char [length + 1];", "-\t\t\tSTARTUP.getChars (0, length, chars, 0);", "-\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "-\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tobserverService.Release ();", "-", "-\t        if (IsXULRunner) {", "-\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "-\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "-\t\t\t\tptr = C.malloc (size * 2);", "-\t\t\t\tC.memset (ptr, 0, size * 2);", "-\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "-\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_NotifyProfile\", true); //$NON-NLS-1$", "-\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "-\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "-\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "-\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "-\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "-\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "-\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "-\t\t\t\tint /*long*/ functionPtr = result[0];", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tC.free (functionLoad.function);", "-\t\t\t\tC.free (functionLoad.functionName);", "-\t\t\t\tC.free (ptr);", "-\t\t\t\t/* functionPtr == 0 for xulrunner < 1.9 */", "-\t\t\t\tif (functionPtr != 0) {", "-\t\t\t\t\trc = XPCOM.Call (functionPtr);", "-\t            \tif (rc != XPCOM.NS_OK) {", "-\t            \t\tbrowser.dispose ();", "-\t            \t\terror (rc);", "-\t            \t}", "-\t\t\t\t}", "-\t        }", "+\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\tif (result[0] == 0) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t}", "+", "+\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "+\t\tint length = STARTUP.length ();", "+\t\tchar[] chars = new char [length + 1];", "+\t\tSTARTUP.getChars (0, length, chars, 0);", "+\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "+\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tobserverService.Release ();", "+", "+        if (IsXULRunner) {", "+\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "+\t\t\tC.memset (ptr, 0, size * 2);", "+\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_NotifyProfile\", true); //$NON-NLS-1$", "+\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+\t\t\tint /*long*/ functionPtr = result[0];", "+\t\t\tresult[0] = 0;", "+\t\t\tC.free (functionLoad.function);", "+\t\t\tC.free (functionLoad.functionName);", "+\t\t\tC.free (ptr);", "+\t\t\t/* functionPtr == 0 for xulrunner < 1.9 */", "+\t\t\tif (functionPtr != 0) {", "+\t\t\t\trc = XPCOM.Call (functionPtr);", "+            \tif (rc != XPCOM.NS_OK) {", "+            \t\tbrowser.dispose ();", "+            \t\terror (rc);", "+            \t}", "+\t\t\t}", "+        }", "-\t\tbyte[] buffer = new byte[1];", "+\t\tbuffer = new byte[1];", "-\t\t\tint length = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "-\t\t\tint length = newLocales.length ();", "+\t\t\tlength = newLocales.length ();", "-\t\t\tint length = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "-\t\t\tint length = newCharset.length ();", "+\t\t\tlength = newCharset.length ();", "-\t\t\tint length = proxyHost.length ();", "+\t\t\tlength = proxyHost.length ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb836485201ce973e9045b30a4e16980", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "3c5d7aef7c79c1b0138c18130d736f9efe7a17ae", "commitAfterChange": "a7e4b977352d0752b12866130d41a63e4e06d3c2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "-\t\t\tpublic void handleEvent (Event event) {", "-\t\t\t\tif (BrowserCount > 0) return; /* another display is still active */", "-", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\tresult[0] = 0;\t\t", "-\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "-\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "-\t\t\t\tchar[] chars = new char [length + 1];", "-\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "-\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tobserverService.Release ();", "-", "-\t\t\t\tif (LocationProvider != null) {", "-\t\t\t\t\tString prefsLocation = LocationProvider.profilePath + AppFileLocProvider.PREFERENCES_FILE;", "-\t\t\t\t\tnsEmbedString pathString = new nsEmbedString (prefsLocation);", "-\t\t\t\t\trc = XPCOM.NS_NewLocalFile (pathString.getAddress (), 1, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "-\t\t\t\t\tpathString.dispose ();", "-", "-\t\t\t\t\tnsILocalFile localFile = new nsILocalFile (result [0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t    rc = localFile.QueryInterface (nsIFile.NS_IFILE_IID, result); ", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\t\t\tlocalFile.Release ();", "-", "-\t\t\t\t\tnsIFile prefFile = new nsIFile (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_PREFSERVICE_CONTRACTID, true);", "-\t\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIPrefService.NS_IPREFSERVICE_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\t\tnsIPrefService prefService = new nsIPrefService (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\trc = prefService.SavePrefFile (prefFile.getAddress ());", "-\t\t\t\t\tprefService.Release ();", "-\t\t\t\t\tprefFile.Release ();", "-\t\t\t\t}", "-\t\t\t\tserviceManager.Release ();", "-", "-\t\t\t\tif (XPCOMWasGlued) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* The following is intentionally commented because it causes subsequent", "-\t\t\t\t\t* browser instantiations within the process to fail.  Mozilla does not", "-\t\t\t\t\t* support being unloaded and then re-initialized in a process, see", "-\t\t\t\t\t* http://www.mail-archive.com/dev-embedding@lists.mozilla.org/msg01732.html . ", "-\t\t\t\t\t*/", "-", "-//\t\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "-//\t\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "-//\t\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "-//\t\t\t\t\tC.memset (ptr, 0, size * 2);", "-//\t\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "-//\t\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_TermEmbedding\", true); //$NON-NLS-1$", "-//\t\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "-//\t\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "-//\t\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "-//\t\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "-//\t\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "-//\t\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "-//\t\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "-//\t\t\t\t\tint /*long*/ functionPtr = result[0];", "-//\t\t\t\t\tresult[0] = 0;", "-//\t\t\t\t\tC.free (functionLoad.function);", "-//\t\t\t\t\tC.free (functionLoad.functionName);", "-//\t\t\t\t\tC.free (ptr);", "-//\t\t\t\t\tXPCOM.Call (functionPtr);", "-", "-//\t\t\t\t\tXPCOM.XPCOMGlueShutdown ();", "-\t\t\t\t\tXPCOMWasGlued = false;", "-\t\t\t\t}", "-\t\t\t\tif (XPCOMInitWasGlued) {", "-\t\t\t\t\tXPCOMInit.XPCOMGlueShutdown ();", "-\t\t\t\t\tXPCOMInitWasGlued = false;", "-\t\t\t\t}", "-\t\t\t\tInitialized = false;", "-\t\t\t}", "-\t\t});", "-", "+\t\tdisplay.addListener (SWT.Dispose, DisplayListener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c26e13fdb94fe0d2040a3565c75c9f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "54aed4fbd5df18a764a007813a3707f09efb92d5", "commitAfterChange": "4508514c485affa97e5c71dcb79f80de914f7288", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\t * If htmlBytes is not null then there is html from a previous setText() call", "-\t\t * waiting to be set into the about:blank page once it has completed loading. ", "-\t\t */", "-\t\tif (htmlBytes != null) {", "-\t\t\tnsIRequest req = new nsIRequest (aRequest);", "-\t\t\tint /*long*/ name = XPCOM.nsEmbedCString_new ();", "-\t\t\trc = req.GetName (name);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tint length = XPCOM.nsEmbedCString_Length (name);", "-\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (name);", "-\t\t\tbyte[] dest = new byte[length];", "-\t\t\tXPCOM.memmove (dest, buffer, length);", "-\t\t\tXPCOM.nsEmbedCString_delete (name);", "-\t\t\tString url = new String (dest);", "-", "-\t\t\tif (url.startsWith (ABOUT_BLANK)) {", "-\t\t\t\t/*", "-\t\t\t\t * Setting the browser's content with nsIWebBrowserStream invalidates the ", "-\t\t\t\t * DOM listeners that were hooked on it (about:blank), so remove them and", "-\t\t\t\t * add new ones after the content has been set.", "-\t\t\t\t */", "-\t\t\t\tunhookDOMListeners ();", "-", "-\t\t\t\trc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tserviceManager.Release ();", "-", "-\t\t\t\tnsIIOService ioService = new nsIIOService (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\t/*", "-\t\t\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "-\t\t\t\t* when the URI protocol for the nsInputStreamChannel", "-\t\t\t\t* is about:blank.  The fix is to specify the file protocol.", "-\t\t\t\t*/", "-\t\t\t\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "-\t\t\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "-\t\t\t\trc = ioService.NewURI (aSpec, null, 0, result);", "-\t\t\t\tXPCOM.nsEmbedCString_delete (aSpec);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tioService.Release ();", "-", "-\t\t\t\tnsIURI uri = new nsIURI (result[0]);", "-\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\trc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tnsIWebBrowserStream stream = new nsIWebBrowserStream (result[0]);", "-\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "-\t\t\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "-", "-\t\t\t\trc = stream.OpenStream (uri.getAddress (), aContentType);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tint /*long*/ ptr = C.malloc (htmlBytes.length);", "-\t\t\t\tXPCOM.memmove (ptr, htmlBytes, htmlBytes.length);", "-\t\t\t\tint pageSize = 8192;", "-\t\t\t\tint pageCount = htmlBytes.length / pageSize + 1;", "-\t\t\t\tint /*long*/ current = ptr;", "-\t\t\t\tfor (int i = 0; i < pageCount; i++) {", "-\t\t\t\t\tlength = i == pageCount - 1 ? htmlBytes.length % pageSize : pageSize;", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\trc = stream.AppendToStream (current, length);", "-\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\t}", "-\t\t\t\t\tcurrent += pageSize;", "-\t\t\t\t}", "-\t\t\t\trc = stream.CloseStream ();", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-", "-\t\t\t\tC.free (ptr);", "-\t\t\t\tXPCOM.nsEmbedCString_delete (aContentType);", "-\t\t\t\tstream.Release ();", "-\t\t\t\turi.Release ();", "-\t\t\t\thtmlBytes = null;", "-\t\t\t\thookDOMListeners ();", "-\t\t\t}", "-\t\t}", "-", "-\t\t/*"]}], "num": 22639}
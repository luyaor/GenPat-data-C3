{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85f96366776f765defbf3e93df274a37", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d81d65bfbc3b857b7c13486aa814946c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "d76fb41b9e70dedc7a332a519d4398be52fba882", "commitAfterChange": "625aff6472e5c651d29ac6ffda6dde9de0c373aa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r void resizeRectangles(int xChange, int yChange)", "signatureAfterChange": "\r \r void resizeRectangles (int xChange, int yChange, Rectangle resizeBounds)", "diff": ["-void resizeRectangles(int xChange, int yChange) {\r", "-\tRectangle bounds = computeBounds();\r", "-\tfor (int i = 0; i < rectangles.length; i++) {\r", "-\t\trectangles [i].width += rectangles [i].width * xChange / Math.max(1,bounds.width);\r", "-\t\trectangles [i].height += rectangles [i].height * yChange / Math.max(1,bounds.height);\r", "+void resizeRectangles (int xChange, int yChange, Rectangle resizeBounds) {\r", "+\t/*\r", "+\t* If the cursor orientation has not been set in the orientation of\r", "+\t* this change then try to set it here.\r", "+\t*/\r", "+\tif (xChange < 0 && ((style & SWT.LEFT) != 0) && ((cursorOrientation & SWT.RIGHT) == 0)) {\r", "+\t\tcursorOrientation |= SWT.LEFT;\r", "+\t} else if (xChange > 0 && ((style & SWT.RIGHT) != 0) && ((cursorOrientation & SWT.LEFT) == 0)) {\r", "+\t\tcursorOrientation |= SWT.RIGHT;\r", "+\t} else if (yChange < 0 && ((style & SWT.UP) != 0) && ((cursorOrientation & SWT.DOWN) == 0)) {\r", "+\t\tcursorOrientation |= SWT.UP;\r", "+\t} else if (yChange > 0 && ((style & SWT.DOWN) != 0) && ((cursorOrientation & SWT.UP) == 0)) {\r", "+\t\tcursorOrientation |= SWT.DOWN;\r", "+\tRectangle bounds = computeBounds ();\r", "+\tif ((cursorOrientation & SWT.LEFT) != 0) {\r", "+\t\tbounds.x += xChange;\r", "+\t\tbounds.width -= xChange;\r", "+\t} else if ((cursorOrientation & SWT.RIGHT) != 0) {\r", "+\t\tbounds.width += xChange;\r", "+\t}\r", "+\tif ((cursorOrientation & SWT.UP) != 0) {\r", "+\t\tbounds.y += yChange;\r", "+\t\tbounds.height -= yChange;\r", "+\t} else if ((cursorOrientation & SWT.DOWN) != 0) {\r", "+\t\tbounds.height += yChange;\r", "+\t}\r", "+\t/*\r", "+\t* The following are conditions under which the resize should not be applied\r", "+\t*/\r", "+\tif (!bounds.union (resizeBounds).equals (resizeBounds)) return;\r", "+\tif (bounds.width < 0 || bounds.height < 0) return;\r", "+\t\r", "+\tRectangle [] newRects = new Rectangle [rectangles.length];\r", "+\tfor (int i = 0; i < rectangles.length; i++) {\r", "+\t\tRectangle proportion = proportions[i];\r", "+\t\tnewRects[i] = new Rectangle (\r", "+\t\t\tproportion.x * bounds.width / 100 + bounds.x,\r", "+\t\t\tproportion.y * bounds.height / 100 + bounds.y,\r", "+\t\t\tproportion.width * bounds.width / 100,\r", "+\t\t\tproportion.height * bounds.height / 100);\r", "+\t}\r", "+\trectangles = newRects;\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a135c2c2f0312c9d8cb5cb5de5931bf1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "d76fb41b9e70dedc7a332a519d4398be52fba882", "commitAfterChange": "625aff6472e5c651d29ac6ffda6dde9de0c373aa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r void resizeRectangles(int xChange, int yChange)", "signatureAfterChange": "\r void resizeRectangles (int xChange, int yChange, Rectangle resizeBounds)", "diff": ["-void resizeRectangles(int xChange, int yChange) {\r", "-\tRectangle bounds = computeBounds();\r", "-\tfor (int i = 0; i < rectangles.length; i++) {\r", "-\t\trectangles [i].width += rectangles [i].width * xChange / Math.max (1, bounds.width);\r", "-\t\trectangles [i].height += rectangles [i].height * yChange / Math.max (1, bounds.height);\r", "+void resizeRectangles (int xChange, int yChange, Rectangle resizeBounds) {\r", "+\t/*\r", "+\t* If the cursor orientation has not been set in the orientation of\r", "+\t* this change then try to set it here.\r", "+\t*/\r", "+\tif (xChange < 0 && ((style & SWT.LEFT) != 0) && ((cursorOrientation & SWT.RIGHT) == 0)) {\r", "+\t\tcursorOrientation |= SWT.LEFT;\r", "+\t} else if (xChange > 0 && ((style & SWT.RIGHT) != 0) && ((cursorOrientation & SWT.LEFT) == 0)) {\r", "+\t\tcursorOrientation |= SWT.RIGHT;\r", "+\t} else if (yChange < 0 && ((style & SWT.UP) != 0) && ((cursorOrientation & SWT.DOWN) == 0)) {\r", "+\t\tcursorOrientation |= SWT.UP;\r", "+\t} else if (yChange > 0 && ((style & SWT.DOWN) != 0) && ((cursorOrientation & SWT.UP) == 0)) {\r", "+\t\tcursorOrientation |= SWT.DOWN;\r", "+\tRectangle bounds = computeBounds ();\r", "+\tif ((cursorOrientation & SWT.LEFT) != 0) {\r", "+\t\tbounds.x += xChange;\r", "+\t\tbounds.width -= xChange;\r", "+\t} else if ((cursorOrientation & SWT.RIGHT) != 0) {\r", "+\t\tbounds.width += xChange;\r", "+\t}\r", "+\tif ((cursorOrientation & SWT.UP) != 0) {\r", "+\t\tbounds.y += yChange;\r", "+\t\tbounds.height -= yChange;\r", "+\t} else if ((cursorOrientation & SWT.DOWN) != 0) {\r", "+\t\tbounds.height += yChange;\r", "+\t}\r", "+\t/*\r", "+\t* The following are conditions under which the resize should not be applied\r", "+\t*/\r", "+//\tif (!bounds.union (resizeBounds).equals (resizeBounds)) return;\r", "+\tif (bounds.width < 0 || bounds.height < 0) return;\r", "+\t\r", "+\tRectangle [] newRects = new Rectangle [rectangles.length];\r", "+\tfor (int i = 0; i < rectangles.length; i++) {\r", "+\t\tRectangle proportion = proportions[i];\r", "+\t\tnewRects[i] = new Rectangle (\r", "+\t\t\tproportion.x * bounds.width / 100 + bounds.x,\r", "+\t\t\tproportion.y * bounds.height / 100 + bounds.y,\r", "+\t\t\tproportion.width * bounds.width / 100,\r", "+\t\t\tproportion.height * bounds.height / 100);\r", "+\t}\r", "+\trectangles = newRects;\t\r"]}], "num": 49768}
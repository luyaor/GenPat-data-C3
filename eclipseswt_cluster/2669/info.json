{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "057eb2393ccadfef3f5054aa30b77b95", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fed8bf5228ba6c89e49ec6f16edd07ac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d94d01b4d71bbf5e85d7f9e44c609b877ecde200", "commitAfterChange": "1e2f57c9785147e1803e8ec92587cb100b302b0b", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": " void updateColumnWidth (TableColumn column, int width)", "signatureAfterChange": " void updateColumnWidth (TableColumn column, int width)", "diff": ["-\tcolumn.width = width;", "+\tint oldWidth = column.width;", "+\tint columnX = column.getX ();", "+\tint x = columnX + oldWidth - 1;\t/* -1 ensures that grid line is included */", "+", "+\tupdate ();", "+\tGC gc = new GC (this);", "+\tif (oldWidth > 0) {", "+\t\tgc.copyArea (x, 0, bounds.width - x, bounds.height, columnX + width - 1, 0);\t/* dest x -1 offsets x's -1 above */", "+\t}", "+\tif (width > oldWidth) {", "+\t\t/* column width grew */", "+\t\tint change = width - oldWidth + 1;\t/* +1 offsets x's -1 above */", "+\t\tredraw (x, 0, change, bounds.height, false);", "+\t} else {", "+\t\tint change = oldWidth - width + 1;\t/* +1 offsets x's -1 above */", "+\t\tredraw (bounds.width - change, 0, change, bounds.height, false);", "+\t}", "+", "+\tGC headerGC = new GC (header);", "+\tif (drawCount == 0 && header.getVisible ()) {", "+\t\tRectangle headerBounds = header.getClientArea ();", "+\t\theader.update ();", "+\t\tx -= 1;\t/* -1 ensures that full header column separator is included */", "+\t\tif (oldWidth > 0) {", "+\t\t\theaderGC.copyArea (x, 0, headerBounds.width - x, headerBounds.height, columnX + width - 2, 0);\t/* dest x -2 offsets x's -1s above */", "+\t\t}", "+\t\tif (width > oldWidth) {", "+\t\t\t/* column width grew */", "+\t\t\tint change = width - oldWidth + 2;\t/* +2 offsets x's -1s above */", "+\t\t\theader.redraw (x, 0, change, headerBounds.height, false);", "+\t\t} else {", "+\t\t\tint change = oldWidth - width + 2;\t/* +2 offsets x's -1s above */", "+\t\t\theader.redraw (headerBounds.width - change, 0, change, headerBounds.height, false);", "+\t\t}", "+\t}", "+", "+\tcolumn.width = width;", "+", "+\t/*", "+\t * Notify column and all items of column width change so that display labels", "+\t * can be recomputed if needed.", "+\t */", "+\tcolumn.updateWidth (headerGC);", "+\theaderGC.dispose ();", "+\tfor (int i = 0; i < itemsCount; i++) {", "+\t\titems [i].updateColumnWidth (column, gc);", "+\t}", "+\tgc.dispose ();", "+\tint oldHorizontalOffset = horizontalOffset;\t/* hBar.setVisible() can modify horizontalOffset */", "-\tboolean offsetChanged = false;", "-\tif (selection != horizontalOffset) {", "+\tif (selection != oldHorizontalOffset) {", "-\t\toffsetChanged = true;", "-\t}", "-\t", "-\t/* ", "-\t * Notify column and all items of column width change so that display labels", "-\t * can be recomputed if needed.", "-\t */", "-\tGC gc = new GC (this);", "-\tcolumn.computeDisplayText (gc);", "-\tfor (int i = 0; i < itemsCount; i++) {", "-\t\titems [i].updateColumnWidth (column, gc);", "-\t}", "-\tgc.dispose ();", "-", "-\tint x = 0;", "-\tif (!offsetChanged) x = column.getX ();", "-\tredraw (x, 0, bounds.width - x, bounds.height, false);", "-\tif (drawCount == 0 && header.getVisible ()) {", "-\t\theader.redraw (x, 0, bounds.width - x, getHeaderHeight (), false);", "+\t\tredraw ();", "+\t\tif (drawCount == 0 && header.getVisible ()) header.redraw ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f91c258436ba10cf56ce04a6795ad6e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ec0f35229704d59e8a0e8d08c5de254e59e57d5b", "commitAfterChange": "520d1ed0b907299aeb948cdb51785c50502c0827", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": " void updateColumnWidth (TreeColumn column, int width)", "signatureAfterChange": " void updateColumnWidth (TreeColumn column, int width)", "diff": ["-\tcolumn.width = width;", "+\tint oldWidth = column.width;", "+\tint columnX = column.getX ();", "+\tint x = columnX + oldWidth - 1;\t/* -1 ensures that grid line is included */", "+", "+\tupdate ();", "+\tGC gc = new GC (this);", "+\tif (oldWidth > 0) {", "+\t\tgc.copyArea (x, 0, bounds.width - x, bounds.height, columnX + width - 1, 0);\t/* dest x -1 offsets x's -1 above */", "+\t}", "+\tif (width > oldWidth) {", "+\t\t/* column width grew */", "+\t\tint change = width - oldWidth + 1;\t/* +1 offsets x's -1 above */", "+\t\tredraw (x, 0, change, bounds.height, false);", "+\t} else {", "+\t\tint change = oldWidth - width + 1;\t/* +1 offsets x's -1 above */", "+\t\tredraw (bounds.width - change, 0, change, bounds.height, false);", "+\t}", "+", "+\tGC headerGC = new GC (header);", "+\tif (drawCount == 0 && header.getVisible ()) {", "+\t\tRectangle headerBounds = header.getClientArea ();", "+\t\theader.update ();", "+\t\tx -= 1;\t/* -1 ensures that full header column separator is included */", "+\t\tif (oldWidth > 0) {", "+\t\t\theaderGC.copyArea (x, 0, headerBounds.width - x, headerBounds.height, columnX + width - 2, 0);\t/* dest x -2 offsets x's -1s above */", "+\t\t}", "+\t\tif (width > oldWidth) {", "+\t\t\t/* column width grew */", "+\t\t\tint change = width - oldWidth + 2;\t/* +2 offsets x's -1s above */", "+\t\t\theader.redraw (x, 0, change, headerBounds.height, false);", "+\t\t} else {", "+\t\t\tint change = oldWidth - width + 2;\t/* +2 offsets x's -1s above */", "+\t\t\theader.redraw (headerBounds.width - change, 0, change, headerBounds.height, false);", "+\t\t}", "+\t}", "+", "+\tcolumn.width = width;", "+", "+\t/*", "+\t * Notify column and all items of column width change so that display labels", "+\t * can be recomputed if needed.", "+\t */", "+\tcolumn.updateWidth (headerGC);", "+\theaderGC.dispose ();", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\titems [i].updateColumnWidth (column, gc);", "+\t}", "+\tgc.dispose ();", "+\tint oldHorizontalOffset = horizontalOffset;\t/* hBar.setVisible() can modify horizontalOffset */", "-\tboolean offsetChanged = false;", "-\tif (selection != horizontalOffset) {", "+\tif (selection != oldHorizontalOffset) {", "-\t\toffsetChanged = true;", "-\t}", "-\t", "-\t/* ", "-\t * Notify column and all items of column width change so that display labels", "-\t * can be recomputed if needed.", "-\t */", "-\tGC gc = new GC (this);", "-\tcolumn.computeDisplayText (gc);", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\titems [i].updateColumnWidth (column, gc);", "-\t}", "-\tgc.dispose ();", "-", "-\tint x = 0;", "-\tif (!offsetChanged) x = column.getX ();", "-\tredraw (x, 0, bounds.width - x, bounds.height, false);", "-\tif (drawCount == 0 && header.getVisible ()) {", "-\t\theader.redraw (x, 0, bounds.width - x, getHeaderHeight (), false);", "+\t\tredraw ();", "+\t\tif (drawCount == 0 && header.getVisible ()) header.redraw ();"]}], "num": 2669}
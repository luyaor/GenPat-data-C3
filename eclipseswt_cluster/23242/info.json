{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2605749193ddaf3edfe0c38d9f09a0ec", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "816c82c1f34d701c39ebf958032e7846", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "95c43aebe2b20c414d9c7747858feae6b17f1039", "commitAfterChange": "fe27ba892c69a8ec67cf5a69235a590d5b9fe51e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int drawItemProc (int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice)", "signatureAfterChange": "  int drawItemProc (int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice)", "diff": ["-\tRect controlRect = new Rect ();", "-\tif (!OS.HIVIEW) OS.GetControlBounds (handle, controlRect);", "+\tint offsetX = 0, offsetY = 0;", "+\tRect rect = new Rect ();", "+\tOS.GetControlBounds (handle, rect);", "+\tint controlRight = rect.right;", "+\tif (!OS.HIVIEW) {", "+\t\toffsetX = rect.left;", "+\t\toffsetY = rect.top;", "+\t}", "-\tdrawItem = id;", "-\t\t\t\tRect rect = new Rect();", "-\t\t\t\t\tint x = rect.left - controlRect.left;", "-\t\t\t\t\tint y = rect.top - controlRect.top;", "+\t\t\t\t\tint x = rect.left - offsetX;", "+\t\t\t\t\tint y = rect.top - offsetY;", "-\tRect rect = new Rect ();", "-\tint x = rect.left;", "-\tint y = rect.top;", "+\tint x = rect.left - offsetX;", "+\tint y = rect.top - offsetY;", "-\tboolean selected = (itemState & OS.kDataBrowserItemIsSelected) != 0;", "-\tselected |= (itemState & OS.kDataBrowserItemIsDragTarget) != 0;", "-\tx -= controlRect.left;", "-\ty -= controlRect.top;", "+\tint itemRgn = OS.NewRgn ();", "+\tOS.RectRgn (itemRgn, rect);", "+\tif (!OS.HIVIEW) OS.OffsetRgn (itemRgn, (short)-offsetX, (short)-offsetY);", "+\t\tif (!OS.HIVIEW) {", "+\t\t\tint clip = OS.NewRgn ();", "+\t\t\tOS.GetClip (clip);", "+\t\t\tif (!OS.HIVIEW) OS.OffsetRgn (clip, (short)-offsetX, (short)-offsetY);", "+\t\t\tOS.SectRgn (clip, itemRgn, itemRgn);", "+\t\t\tgc.setClipping (Region.carbon_new (display, clip));", "+\t\t\tOS.DisposeRgn (clip);", "+\t\t}", "+\tOS.GetDataBrowserItemPartBounds (handle, id, property, OS.kDataBrowserPropertyEnclosingPart, rect);\t", "+\tif (!OS.HIVIEW) OS.OffsetRect (rect, (short)-offsetX, (short)-offsetX);", "+\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "+\tint itemX = rect.left + gridWidth;", "+\tint itemY = rect.top;", "+\tint itemWidth = rect.right - rect.left - gridWidth;", "+\tint itemHeight = rect.bottom - rect.top + 1;", "-\tint clip = OS.NewRgn ();", "-\tOS.GetClip (clip);", "-\tOS.OffsetRgn (clip, (short)-controlRect.left, (short)-controlRect.top);", "-\tgc.setClipping (Region.carbon_new (display, clip));", "-\tRect itemRect = new Rect();", "-\tOS.GetDataBrowserItemPartBounds (handle, id, property, OS.kDataBrowserPropertyEnclosingPart, itemRect);", "-\tOS.OffsetRect (itemRect, (short) -controlRect.left, (short) -controlRect.top);", "-\tif (OS.HIVIEW) {", "-\t\tControl control = findBackgroundControl ();", "-\t\tboolean controlBackground = control != null && (control.background != null || control.backgroundImage != null);", "-\t\tboolean itemBackground = item.background != null || (item.cellBackground != null && item.cellBackground [columnIndex] != null);", "-\t\tif (controlBackground || itemBackground) {", "-\t\t\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "-\t\t\tif (itemBackground) {", "-\t\t\t\tgc.setBackground (item.getBackground (columnIndex));", "-\t\t\t\tgc.fillRectangle (itemRect.left + gridWidth, itemRect.top, itemRect.right - itemRect.left - gridWidth, itemRect.bottom - itemRect.top + 1);", "-\t\t\t} else {", "-\t\t\t\tfillBackground (handle, gc.handle, new Rectangle (itemRect.left + gridWidth, itemRect.top, itemRect.right - itemRect.left - gridWidth, itemRect.bottom - itemRect.top + 1));", "+\tboolean draw = true;", "+\tboolean selected = (itemState & OS.kDataBrowserItemIsSelected) != 0;", "+\tboolean focused = false;", "+\tControl control = findBackgroundControl ();", "+\tboolean controlBackground = control != null && (control.background != null || control.backgroundImage != null);", "+\tboolean itemBackground = item.background != null || (item.cellBackground != null && item.cellBackground [columnIndex] != null);", "+\tif (controlBackground || itemBackground) {", "+\t\tif (itemBackground || !OS.HIVIEW) {", "+\t\t\tgc.setBackground (item.getBackground (columnIndex));", "+\t\t\tgc.fillRectangle (itemX, itemY, itemWidth, itemHeight);", "+\t\t} else {", "+\t\t\tRectangle bounds = new Rectangle (itemX, itemY, itemWidth, itemHeight);", "+\t\t\tfillBackground (handle, gc.handle, bounds);", "+\t\t\tif (columnCount == 0 || columnCount - 1 == columnIndex) {", "+\t\t\t\tbounds.x = itemX + itemWidth + gridWidth;", "+\t\t\t\tbounds.width = controlRight - itemX;", "+\t\t\t\tfillBackground (handle, gc.handle, bounds);", "+\t}", "+\tif (selected) {", "+\t\tgc.setBackground (display.getSystemColor(SWT.COLOR_LIST_SELECTION));", "+\t\tgc.setForeground (display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));", "-\t\tif (background != null || item.background != null || (item.cellBackground != null && item.cellBackground [columnIndex] != null)) {", "-\t\t\tgc.setBackground (item.getBackground (columnIndex));", "-\t\t\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "-\t\t\tgc.fillRectangle (itemRect.left + gridWidth, itemRect.top, itemRect.right - itemRect.left - gridWidth, itemRect.bottom - itemRect.top + 1);", "-\t\t}", "+\t\tgc.setBackground (item.getBackground (columnIndex));", "+\t\tgc.setForeground (item.getForeground (columnIndex));", "-\tif (selected && (style & SWT.FULL_SELECTION) != 0) {", "-\t\tif ((style & SWT.HIDE_SELECTION) == 0 || hasFocus ()) {", "-\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "-\t\t\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "-\t\t\tgc.fillRectangle (itemRect.left + gridWidth, itemRect.top, itemRect.right - itemRect.left - gridWidth, itemRect.bottom - itemRect.top);", "-\t\t}", "-\t}", "-\tint rectRgn = OS.NewRgn ();", "-\tOS.RectRgn (rectRgn, rect);", "-\tOS.OffsetRgn (rectRgn, (short)-controlRect.left, (short)-controlRect.top);", "-\tOS.SectRgn (rectRgn, clip, clip);", "-\tOS.DisposeRgn (rectRgn);", "-\tgc.setClipping (Region.carbon_new (display, clip));", "-\tOS.DisposeRgn (clip);", "+\tgc.setFont (item.getFont (columnIndex));", "-\tgc.setFont (item.getFont (columnIndex));", "-\tint itemWidth = extent.x;", "+\tint contentWidth = extent.x, paintWidth = contentWidth;", "-\t\titemWidth += this.imageBounds.width + gap;", "+\t\tcontentWidth += this.imageBounds.width + gap;", "-\tif (columnCount != 0) {", "-\t\tTreeColumn column = columns [columnIndex];", "-\t\tif ((column.style & SWT.CENTER) != 0) x += (width - itemWidth) / 2;", "-\t\tif ((column.style & SWT.RIGHT) != 0) x += width - itemWidth;", "+\tdraw = true;", "+\tif (hooks (SWT.MeasureItem)) {", "+\t\tEvent event = new Event ();", "+\t\tevent.item = item;", "+\t\tevent.index = columnIndex;", "+\t\tevent.gc = gc;", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = itemHeight;", "+\t\tsendEvent (SWT.MeasureItem, event);", "+\t\tif (this.itemHeight == -1) {", "+\t\t\tthis.itemHeight = event.height;", "+\t\t\tOS.SetDataBrowserTableViewRowHeight (handle, (short) event.height);", "+\t\t}", "+\t\tif (setScrollWidth (item)) {", "+\t\t\tredrawWidget (handle, false);", "+\t\t}", "+\t\tcontentWidth = event.width;", "+\t\titemHeight = event.height;", "-\tif (image != null) {", "-\t\tgc.drawImage (image, 0, 0, imageBounds.width, imageBounds.height, x, y + (height - this.imageBounds.height) / 2, this.imageBounds.width, this.imageBounds.height);", "-\t\tx += this.imageBounds.width + gap;", "+\tgc.setClipping (itemX, itemY, itemWidth, itemHeight);", "+\tif (hooks (SWT.EraseItem)) {", "+\t\tEvent event = new Event ();", "+\t\tevent.item = item;", "+\t\tevent.index = columnIndex;", "+\t\tevent.gc = gc;", "+\t\tevent.x = itemX;", "+\t\tevent.y = itemY;", "+\t\tevent.width = itemWidth;", "+\t\tevent.height = itemHeight;", "+\t\tif (selected) event.detail |= SWT.SELECTED;", "+\t\tif (focused) event.detail |= SWT.FOCUSED;", "+\t\tsendEvent (SWT.EraseItem, event);", "+\t\tdraw = event.doit;", "+\t\tselected = (event.detail & SWT.SELECTED) != 0;", "+\t\tfocused = (event.detail & SWT.FOCUSED) != 0;", "-\tif (selected) {", "-\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "-\t\tif (columnIndex == 0 && (style & SWT.FULL_SELECTION) == 0) {", "-\t\t\tif ((style & SWT.HIDE_SELECTION) == 0 || hasFocus ()) {", "-\t\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "-\t\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, itemRect.bottom - itemRect.top);", "+\tgc.setClipping (itemX, itemY, itemWidth, itemHeight);", "+\tif (draw) {", "+\t\tif (selected && (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\tif ((style & SWT.HIDE_SELECTION) == 0 || focused) {", "+\t\t\t\tgc.fillRectangle (itemX, itemY, itemWidth, itemHeight - 1);", "-\t} else {", "-\t\tColor foreground = item.getForeground (columnIndex);", "-\t\tgc.setForeground (foreground);", "+\t\tif (columnCount != 0) {", "+\t\t\tTreeColumn column = columns [columnIndex];", "+\t\t\tif ((column.style & SWT.CENTER) != 0) x += (width - contentWidth) / 2;", "+\t\t\tif ((column.style & SWT.RIGHT) != 0) x += width - contentWidth;", "+\t\t}", "+\t\tif (image != null) {", "+\t\t\tgc.drawImage (image, 0, 0, imageBounds.width, imageBounds.height, x, y + (height - this.imageBounds.height) / 2, this.imageBounds.width, this.imageBounds.height);", "+\t\t\tx += this.imageBounds.width + gap;", "+\t\t}", "+\t\tif (selected) {", "+\t\t\tif (columnIndex == 0 && (style & SWT.FULL_SELECTION) == 0) {", "+\t\t\t\tif ((style & SWT.HIDE_SELECTION) == 0 || hasFocus ()) {", "+\t\t\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, itemHeight - 1);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tgc.drawString (text, x, y + (height - extent.y) / 2, true);", "-\tgc.drawString (text, x, y + (height - extent.y) / 2, true);", "+\tif (hooks (SWT.PaintItem)) {", "+\t\tEvent event = new Event ();", "+\t\tevent.item = item;", "+\t\tevent.index = columnIndex;", "+\t\tevent.gc = gc;", "+\t\tevent.x = x;", "+\t\tevent.y = y;", "+\t\tevent.width = paintWidth;", "+\t\tevent.height = itemHeight;", "+\t\tif (selected) event.detail |= SWT.SELECTED;", "+\t\tif (focused) event.detail |= SWT.FOCUSED;", "+\t\tsendEvent (SWT.PaintItem, event);", "+\t}", "+\tOS.DisposeRgn (itemRgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "879950c0d6bd16b342957967a03a8613", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "95c43aebe2b20c414d9c7747858feae6b17f1039", "commitAfterChange": "fe27ba892c69a8ec67cf5a69235a590d5b9fe51e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int drawItemProc (int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice)", "signatureAfterChange": "  int drawItemProc (int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice)", "diff": ["-\tRect controlRect = new Rect ();", "-\tif (!OS.HIVIEW) OS.GetControlBounds (handle, controlRect);", "+\tint offsetX = 0, offsetY = 0;", "+\tRect rect = new Rect ();", "+\tOS.GetControlBounds (handle, rect);", "+\tint controlRight = rect.right;", "+\tif (!OS.HIVIEW) {", "+\t\toffsetX = rect.left;", "+\t\toffsetY = rect.top;", "+\t}", "-\tdrawItem = id;", "-\t\t\t\tRect rect = new Rect();", "-\t\t\t\t\tint x = rect.left - controlRect.left;", "-\t\t\t\t\tint y = rect.top - controlRect.top;", "+\t\t\t\t\tint x = rect.left - offsetX;", "+\t\t\t\t\tint y = rect.top - offsetY;", "-\tRect rect = new Rect ();", "-\tint x = rect.left;", "-\tint y = rect.top;", "+\tint x = rect.left - offsetX;", "+\tint y = rect.top - offsetY;", "-\tboolean selected = (itemState & OS.kDataBrowserItemIsSelected) != 0;", "-\tselected |= (itemState & OS.kDataBrowserItemIsDragTarget) != 0;", "-\tx -= controlRect.left;", "-\ty -= controlRect.top;", "+\tint itemRgn = OS.NewRgn ();", "+\tOS.RectRgn (itemRgn, rect);", "+\tif (!OS.HIVIEW) OS.OffsetRgn (itemRgn, (short)-offsetX, (short)-offsetY);", "+\t\tif (!OS.HIVIEW) {", "+\t\t\tint clip = OS.NewRgn ();", "+\t\t\tOS.GetClip (clip);", "+\t\t\tif (!OS.HIVIEW) OS.OffsetRgn (clip, (short)-offsetX, (short)-offsetY);", "+\t\t\tOS.SectRgn (clip, itemRgn, itemRgn);", "+\t\t\tgc.setClipping (Region.carbon_new (display, clip));", "+\t\t\tOS.DisposeRgn (clip);", "+\t\t}", "+\tOS.GetDataBrowserItemPartBounds (handle, id, property, OS.kDataBrowserPropertyEnclosingPart, rect);\t", "+\tif (!OS.HIVIEW) OS.OffsetRect (rect, (short)-offsetX, (short)-offsetX);", "+\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "+\tint itemX = rect.left + gridWidth;", "+\tint itemY = rect.top;", "+\tint itemWidth = rect.right - rect.left - gridWidth;", "+\tint itemHeight = rect.bottom - rect.top + 1;", "-\tint clip = OS.NewRgn ();", "-\tOS.GetClip (clip);", "-\tOS.OffsetRgn (clip, (short)-controlRect.left, (short)-controlRect.top);", "-\tgc.setClipping (Region.carbon_new (display, clip));", "-\tRect itemRect = new Rect();", "-\tOS.GetDataBrowserItemPartBounds (handle, id, property, OS.kDataBrowserPropertyEnclosingPart, itemRect);", "-\tOS.OffsetRect (itemRect, (short) -controlRect.left, (short) -controlRect.top);", "-\tif (OS.HIVIEW) {", "-\t\tControl control = findBackgroundControl ();", "-\t\tboolean controlBackground = control != null && (control.background != null || control.backgroundImage != null);", "-\t\tboolean itemBackground = item.background != null || (item.cellBackground != null && item.cellBackground [columnIndex] != null);", "-\t\tif (controlBackground || itemBackground) {", "-\t\t\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "-\t\t\tif (itemBackground) {", "-\t\t\t\tgc.setBackground (item.getBackground (columnIndex));", "-\t\t\t\tgc.fillRectangle (itemRect.left + gridWidth, itemRect.top, itemRect.right - itemRect.left - gridWidth, itemRect.bottom - itemRect.top + 1);", "-\t\t\t} else {", "-\t\t\t\tfillBackground (handle, gc.handle, new Rectangle (itemRect.left + gridWidth, itemRect.top, itemRect.right - itemRect.left - gridWidth, itemRect.bottom - itemRect.top + 1));", "+\tboolean draw = true;", "+\tboolean selected = (itemState & OS.kDataBrowserItemIsSelected) != 0;", "+\tboolean focused = false;", "+\tControl control = findBackgroundControl ();", "+\tboolean controlBackground = control != null && (control.background != null || control.backgroundImage != null);", "+\tboolean itemBackground = item.background != null || (item.cellBackground != null && item.cellBackground [columnIndex] != null);", "+\tif (controlBackground || itemBackground) {", "+\t\tif (itemBackground || !OS.HIVIEW) {", "+\t\t\tgc.setBackground (item.getBackground (columnIndex));", "+\t\t\tgc.fillRectangle (itemX, itemY, itemWidth, itemHeight);", "+\t\t} else {", "+\t\t\tRectangle bounds = new Rectangle (itemX, itemY, itemWidth, itemHeight);", "+\t\t\tfillBackground (handle, gc.handle, bounds);", "+\t\t\tif (columnCount == 0 || columnCount - 1 == columnIndex) {", "+\t\t\t\tbounds.x = itemX + itemWidth + gridWidth;", "+\t\t\t\tbounds.width = controlRight - itemX;", "+\t\t\t\tfillBackground (handle, gc.handle, bounds);", "+\t}", "+\tif (selected) {", "+\t\tgc.setBackground (display.getSystemColor(SWT.COLOR_LIST_SELECTION));", "+\t\tgc.setForeground (display.getSystemColor(SWT.COLOR_LIST_SELECTION_TEXT));", "-\t\tif (background != null || item.background != null || (item.cellBackground != null && item.cellBackground [columnIndex] != null)) {", "-\t\t\tgc.setBackground (item.getBackground (columnIndex));", "-\t\t\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "-\t\t\tgc.fillRectangle (itemRect.left + gridWidth, itemRect.top, itemRect.right - itemRect.left - gridWidth, itemRect.bottom - itemRect.top + 1);", "-\t\t}", "+\t\tgc.setBackground (item.getBackground (columnIndex));", "+\t\tgc.setForeground (item.getForeground (columnIndex));", "-\tif (selected && (style & SWT.FULL_SELECTION) != 0) {", "-\t\tif ((style & SWT.HIDE_SELECTION) == 0 || hasFocus ()) {", "-\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "-\t\t\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "-\t\t\tgc.fillRectangle (itemRect.left + gridWidth, itemRect.top, itemRect.right - itemRect.left - gridWidth, itemRect.bottom - itemRect.top);", "-\t\t}", "-\t}", "-\tint rectRgn = OS.NewRgn ();", "-\tOS.RectRgn (rectRgn, rect);", "-\tOS.OffsetRgn (rectRgn, (short)-controlRect.left, (short)-controlRect.top);", "-\tOS.SectRgn (rectRgn, clip, clip);", "-\tOS.DisposeRgn (rectRgn);", "-\tgc.setClipping (Region.carbon_new (display, clip));", "-\tOS.DisposeRgn (clip);", "+\tgc.setFont (item.getFont (columnIndex));", "-\tgc.setFont (item.getFont (columnIndex));", "-\tint itemWidth = extent.x;", "+\tint contentWidth = extent.x, paintWidth = contentWidth;", "-\t\titemWidth += this.imageBounds.width + gap;", "+\t\tcontentWidth += this.imageBounds.width + gap;", "-\tif (columnCount != 0) {", "-\t\tTableColumn column = columns [columnIndex];", "-\t\tif ((column.style & SWT.CENTER) != 0) x += (width - itemWidth) / 2;", "-\t\tif ((column.style & SWT.RIGHT) != 0) x += width - itemWidth;", "+\tdraw = true;", "+\tif (hooks (SWT.MeasureItem)) {", "+\t\tEvent event = new Event ();", "+\t\tevent.item = item;", "+\t\tevent.index = columnIndex;", "+\t\tevent.gc = gc;", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = itemHeight;", "+\t\tsendEvent (SWT.MeasureItem, event);", "+\t\tif (this.itemHeight == -1) {", "+\t\t\tthis.itemHeight = event.height;", "+\t\t\tOS.SetDataBrowserTableViewRowHeight (handle, (short) event.height);", "+\t\t}", "+\t\tif (setScrollWidth (item)) {", "+\t\t\tredrawWidget (handle, false);", "+\t\t}", "+\t\tcontentWidth = event.width;", "+\t\titemHeight = event.height;", "-\tif (image != null) {", "-\t\tgc.drawImage (image, 0, 0, imageBounds.width, imageBounds.height, x, y + (height - this.imageBounds.height) / 2, this.imageBounds.width, this.imageBounds.height);", "-\t\tx += this.imageBounds.width + gap;", "+\tgc.setClipping (itemX, itemY, itemWidth, itemHeight);", "+\tif (hooks (SWT.EraseItem)) {", "+\t\tEvent event = new Event ();", "+\t\tevent.item = item;", "+\t\tevent.index = columnIndex;", "+\t\tevent.gc = gc;", "+\t\tevent.x = itemX;", "+\t\tevent.y = itemY;", "+\t\tevent.width = itemWidth;", "+\t\tevent.height = itemHeight;", "+\t\tif (selected) event.detail |= SWT.SELECTED;", "+\t\tif (focused) event.detail |= SWT.FOCUSED;", "+\t\tsendEvent (SWT.EraseItem, event);", "+\t\tdraw = event.doit;", "+\t\tselected = (event.detail & SWT.SELECTED) != 0;", "+\t\tfocused = (event.detail & SWT.FOCUSED) != 0;", "-\tif (selected) {", "-\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "-\t\tif (columnIndex == 0 && (style & SWT.FULL_SELECTION) == 0) {", "-\t\t\tif ((style & SWT.HIDE_SELECTION) == 0 || hasFocus ()) {", "-\t\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "-\t\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, itemRect.bottom - itemRect.top);", "+\tgc.setClipping (itemX, itemY, itemWidth, itemHeight);", "+\tif (draw) {", "+\t\tif (selected && (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\tif ((style & SWT.HIDE_SELECTION) == 0 || focused) {", "+\t\t\t\tgc.fillRectangle (itemX, itemY, itemWidth, itemHeight - 1);", "-\t} else {", "-\t\tColor foreground = item.getForeground (columnIndex);", "-\t\tgc.setForeground (foreground);", "+\t\tif (columnCount != 0) {", "+\t\t\tTableColumn column = columns [columnIndex];", "+\t\t\tif ((column.style & SWT.CENTER) != 0) x += (width - contentWidth) / 2;", "+\t\t\tif ((column.style & SWT.RIGHT) != 0) x += width - contentWidth;", "+\t\t}", "+\t\tif (image != null) {", "+\t\t\tgc.drawImage (image, 0, 0, imageBounds.width, imageBounds.height, x, y + (height - this.imageBounds.height) / 2, this.imageBounds.width, this.imageBounds.height);", "+\t\t\tx += this.imageBounds.width + gap;", "+\t\t}", "+\t\tif (selected) {", "+\t\t\tif (columnIndex == 0 && (style & SWT.FULL_SELECTION) == 0) {", "+\t\t\t\tif ((style & SWT.HIDE_SELECTION) == 0 || hasFocus ()) {", "+\t\t\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, itemHeight - 1);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tgc.drawString (text, x, y + (height - extent.y) / 2, true);", "-\tgc.drawString (text, x, y + (height - extent.y) / 2, true);", "+\tif (hooks (SWT.PaintItem)) {", "+\t\tEvent event = new Event ();", "+\t\tevent.item = item;", "+\t\tevent.index = columnIndex;", "+\t\tevent.gc = gc;", "+\t\tevent.x = x;", "+\t\tevent.y = y;", "+\t\tevent.width = paintWidth;", "+\t\tevent.height = itemHeight;", "+\t\tif (selected) event.detail |= SWT.SELECTED;", "+\t\tif (focused) event.detail |= SWT.FOCUSED;", "+\t\tsendEvent (SWT.PaintItem, event);", "+\t}", "+\tOS.DisposeRgn (itemRgn);"]}], "num": 23242}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "066e1e1342626306e12e21292c2f72d2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee07ec27752a28b878734e13c191e84f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java", "commitBeforeChange": "b644bd3733b275b4738be65b0fafbf75f44e3e93", "commitAfterChange": "8e31d57546de95ba1452e59cfaef2ac0769cc328", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tvoid createExampleWidgets ()", "signatureAfterChange": " \tvoid createExampleWidgets ()", "diff": ["-\t\t/* Compute the widget style */", "+\t\t/* Compute the widget, item, and item toolBar styles */", "+\t\tboolean vertical = false;", "+\t\tif (horizontalButton.getSelection ()) {", "+\t\t\tstyle |= SWT.HORIZONTAL;", "+\t\t\ttoolBarStyle |= SWT.HORIZONTAL;", "+\t\t}", "+\t\tif (verticalButton.getSelection ()) {", "+\t\t\tstyle |= SWT.VERTICAL;", "+\t\t\ttoolBarStyle |= SWT.VERTICAL;", "+\t\t\tvertical = true;", "+\t\t}", "-\t\t/* create the push button toolbar */", "+\t\t/* Create the push button toolbar cool item */", "-\t\tPoint pushSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tpushSize = pushItem.computeSize(pushSize.x, pushSize.y);", "-\t\tpushItem.setSize(pushSize);", "-\t\tpushItem.setMinimumSize(item.getWidth(), pushSize.y);", "+\t\tPoint toolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\tPoint pushSize = pushItem.computeSize(toolBarSize.x, toolBarSize.y);", "+\t\tint minWidth = vertical ? toolBarSize.x : item.getWidth();", "+\t\tint minHeight = vertical ? item.getBounds().height : toolBarSize.y;", "+\t\tpushItem.setMinimumSize(minWidth, minHeight);", "+\t\tpushItem.setPreferredSize(pushSize);", "+\t\tpushItem.setSize(pushSize);", "-\t\t/* create the dropdown toolbar */", "+\t\t/* Create the dropdown toolbar cool item */", "-\t\tPoint dropSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tdropSize = dropDownItem.computeSize(dropSize.x, dropSize.y);", "-\t\tdropDownItem.setSize(dropSize);", "-\t\tdropDownItem.setMinimumSize(item.getWidth(), dropSize.y);", "-\t\t\t\t", "-\t\t/* create the radio button toolbar */", "+\t\ttoolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\tPoint dropSize = dropDownItem.computeSize(toolBarSize.x, toolBarSize.y);", "+\t\tminWidth = vertical ? toolBarSize.x : item.getWidth();", "+\t\tminHeight = vertical ? item.getBounds().height : toolBarSize.y;", "+\t\tdropDownItem.setMinimumSize(minWidth, minHeight);", "+\t\tdropDownItem.setPreferredSize(dropSize);", "+\t\tdropDownItem.setSize(dropSize);", "+", "+\t\t/* Create the radio button toolbar cool item */", "-\t\tPoint radioSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tradioSize = radioItem.computeSize(radioSize.x, radioSize.y);", "-\t\tradioItem.setSize(radioSize);", "-\t\tradioItem.setMinimumSize(item.getWidth(), radioSize.y);", "+\t\ttoolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\tPoint radioSize = radioItem.computeSize(toolBarSize.x, toolBarSize.y);", "+\t\tminWidth = vertical ? toolBarSize.x : item.getWidth();", "+\t\tminHeight = vertical ? item.getBounds().height : toolBarSize.y;", "+\t\tradioItem.setMinimumSize(minWidth, minHeight);", "+\t\tradioItem.setPreferredSize(radioSize);", "+\t\tradioItem.setSize(radioSize);", "-\t\t/* create the check button toolbar */", "+\t\t/* Create the check button toolbar cool item */", "-\t\tPoint checkSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tcheckSize = checkItem.computeSize(checkSize.x, checkSize.y);", "-\t\tcheckItem.setSize(checkSize);", "-\t\tcheckItem.setMinimumSize(item.getWidth(), checkSize.y);", "+\t\ttoolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\tPoint checkSize = checkItem.computeSize(toolBarSize.x, toolBarSize.y);", "+\t\tminWidth = vertical ? toolBarSize.x : item.getWidth();", "+\t\tminHeight = vertical ? item.getBounds().height : toolBarSize.y;", "+\t\tcheckItem.setMinimumSize(minWidth, minHeight);", "+\t\tcheckItem.setPreferredSize(checkSize);", "+\t\tcheckItem.setSize(checkSize);", "-\t\t/* create the text */", "+\t\t/* Create the text cool item */", "+\t\ttextItem.addSelectionListener (new CoolItemSelectionListener());", "-\t\ttextItem.setSize(textSize);", "-\t\ttextItem.addSelectionListener (new CoolItemSelectionListener());", "-", "-\t\t/* if we have saved state, restore it */", "+\t\ttextItem.setPreferredSize(textSize);", "+\t\ttextItem.setSize(textSize);", "+\t\t\t\t", "+\t\t/* If we have saved state, restore it */", "-\t\t/* add a listener to resize the group box to match the coolbar */", "+\t\t/* Add a listener to resize the group box to match the coolbar */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70bf4b2e3cb2700ac3565f4cf4fc1dbe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java", "commitBeforeChange": "76b33e0e494479a9009365afe16385a154f070b7", "commitAfterChange": "1b68aede250962bc061fd677e97ff1e6ab22d704", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tvoid createExampleWidgets ()", "signatureAfterChange": " \tvoid createExampleWidgets ()", "diff": ["-\t\tPoint toolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tPoint pushSize = pushItem.computeSize(toolBarSize.x, toolBarSize.y);", "-\t\tint minWidth = vertical ? toolBarSize.x : item.getWidth();", "-\t\tint minHeight = vertical ? item.getBounds().height : toolBarSize.y;", "-\t\tpushItem.setMinimumSize(minWidth, minHeight);", "-\t\tpushItem.setPreferredSize(pushSize);", "-\t\tpushItem.setSize(pushSize);", "-\t\ttoolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tPoint dropSize = dropDownItem.computeSize(toolBarSize.x, toolBarSize.y);", "-\t\tminWidth = vertical ? toolBarSize.x : item.getWidth();", "-\t\tminHeight = vertical ? item.getBounds().height : toolBarSize.y;", "-\t\tdropDownItem.setMinimumSize(minWidth, minHeight);", "-\t\tdropDownItem.setPreferredSize(dropSize);", "-\t\tdropDownItem.setSize(dropSize);", "-\t\ttoolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tPoint radioSize = radioItem.computeSize(toolBarSize.x, toolBarSize.y);", "-\t\tminWidth = vertical ? toolBarSize.x : item.getWidth();", "-\t\tminHeight = vertical ? item.getBounds().height : toolBarSize.y;", "-\t\tradioItem.setMinimumSize(minWidth, minHeight);", "-\t\tradioItem.setPreferredSize(radioSize);", "-\t\tradioItem.setSize(radioSize);", "-\t\ttoolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tPoint checkSize = checkItem.computeSize(toolBarSize.x, toolBarSize.y);", "-\t\tminWidth = vertical ? toolBarSize.x : item.getWidth();", "-\t\tminHeight = vertical ? item.getBounds().height : toolBarSize.y;", "-\t\tcheckItem.setMinimumSize(minWidth, minHeight);", "-\t\tcheckItem.setPreferredSize(checkSize);", "-\t\tcheckItem.setSize(checkSize);", "-\t\tText text = new Text (coolBar, SWT.BORDER | SWT.SINGLE);", "-\t\ttextItem = new CoolItem (coolBar, itemStyle);", "-\t\ttextItem.setControl (text);", "-\t\ttextItem.addSelectionListener (new CoolItemSelectionListener());", "-\t\tPoint textSize = text.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\ttextSize = textItem.computeSize(textSize.x, textSize.y);", "-\t\ttextItem.setMinimumSize(textSize);", "-\t\ttextItem.setPreferredSize(textSize);", "-\t\ttextItem.setSize(textSize);", "-\t\t\t\t", "-\t\t/* If we have saved state, restore it */", "-\t\tif (order != null) {", "-\t\t\tcoolBar.setItemLayout(order, wrapIndices, sizes);", "-\t\t\t/* ", "-\t\t\t * special case: because setItemLayout will restore the items", "-\t\t\t * to the sizes the user left them at, the preferred size may not", "-\t\t\t * be the same as the actual size. Thus we must explicitly set", "-\t\t\t * the preferred sizes.", "-\t\t\t */", "-\t\t\tpushItem.setPreferredSize(pushSize);", "-\t\t\tdropDownItem.setPreferredSize(dropSize);", "-\t\t\tradioItem.setPreferredSize(radioSize);", "-\t\t\tcheckItem.setPreferredSize(checkSize);", "+\t\tif (!vertical) {", "+\t\t\tText text = new Text (coolBar, SWT.BORDER | SWT.SINGLE);", "+\t\t\ttextItem = new CoolItem (coolBar, itemStyle);", "+\t\t\ttextItem.setControl (text);", "+\t\t\ttextItem.addSelectionListener (new CoolItemSelectionListener());", "+\t\t\tPoint textSize = text.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\t\ttextSize = textItem.computeSize(textSize.x, textSize.y);", "+\t\t\ttextItem.setMinimumSize(textSize);", "+\t\t\ttextItem.setSize(textSize);", "-\t\telse {", "+", "+\t\t/* Set the sizes after adding all cool items */", "+\t\tCoolItem[] coolItems = coolBar.getItems();", "+\t\tfor (int i = 0; i < coolItems.length; i++) {", "+\t\t\tCoolItem coolItem = coolItems[i];", "+\t\t\tControl control = coolItem.getControl();", "+\t\t\tPoint size = control.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\t\tPoint coolSize = coolItem.computeSize(size.x, size.y);", "+\t\t\tif (control instanceof ToolBar) {", "+\t\t\t\tToolBar bar = (ToolBar)control;", "+\t\t\t\tif (bar.getItemCount() > 0) {", "+\t\t\t\t\tif (vertical) {", "+\t\t\t\t\t\tsize.y = bar.getItem(0).getBounds().height;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tsize.x = bar.getItem(0).getWidth();", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcoolItem.setMinimumSize(size);", "+\t\t\tcoolItem.setPreferredSize(coolSize);", "+\t\t\tcoolItem.setSize(coolSize);", "+\t\t}", "+\t\t", "+\t\t/* If we have saved state, restore it */", "+\t\tif (order != null && order.length == coolBar.getItemCount()) {", "+\t\t\tcoolBar.setItemLayout(order, wrapIndices, sizes);", "+\t\t} else {"]}], "num": 39944}
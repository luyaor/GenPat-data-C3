{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73ab3876ac82bf0ed3c20f6a55a3a3b2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7159a8fdb72b212444245e3c5cc85a19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "25e0b9cefcf6aad913e775e22fb19b1e3de2a216", "commitAfterChange": "abdb7df6c5ef7f31dd770f626e22ad0d039e1629", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int fontProc (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int fontProc (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\tif (fontData == null) fontData = new FontData();", "-\t\t\t\tint [] actualLength = new int [1];", "-\t\t\t\tint platformCode = OS.kFontUnicodePlatform, encoding = OS.kCFStringEncodingUnicode;", "-\t\t\t\tif (OS.ATSUFindFontName (fontID [0], OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, actualLength, null) != OS.noErr) {", "-\t\t\t\t\tplatformCode = OS.kFontNoPlatformCode;", "-\t\t\t\t\tencoding = OS.kCFStringEncodingMacRoman;", "-\t\t\t\t\tOS.ATSUFindFontName (fontID [0], OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, actualLength, null);", "-\t\t\t\t}\t", "-\t\t\t\tbyte[] buffer = new byte[actualLength[0]];", "-\t\t\t\tOS.ATSUFindFontName (fontID [0], OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, buffer.length, buffer, actualLength, null);", "-\t\t\t\tString name = \"\";", "-\t\t\t\tint ptr = OS.CFStringCreateWithBytes (0, buffer, buffer.length, encoding, false);", "-\t\t\t\tif (ptr != 0) {", "-\t\t\t\t\tint length = OS.CFStringGetLength (ptr);", "-\t\t\t\t\tif (length != 0) {", "-\t\t\t\t\t\tchar[] chars = new char [length];", "-\t\t\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\t\t\trange.length = length;", "-\t\t\t\t\t\tOS.CFStringGetCharacters (ptr, range, chars);", "-\t\t\t\t\t\tname = new String (chars);", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.CFRelease (ptr);", "-\t\t\t\t}", "-\t\t\t\tfontData.setName (name);", "+\t\t\t\tthis.fontID = fontID [0];", "-\t\t\tshort [] fontStyle = new short [1];", "-\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamFMFontStyle, OS.typeSInt16, null, 2, null, fontStyle) == OS.noErr) {", "-\t\t\t\tint style = SWT.NORMAL;", "-\t\t\t\tif ((fontStyle [0] & OS.bold) != 0) style |= SWT.BOLD;", "-\t\t\t\tif ((fontStyle [0] & OS.italic) != 0) style |= SWT.ITALIC;", "-\t\t\t\tfontData.setStyle (style);", "+\t\t\tint [] fontSize = new int [1];", "+\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamATSUFontSize, OS.typeFixed, null, 4, null, fontSize) == OS.noErr) {", "+\t\t\t\tthis.fontSize = fontSize [0];", "-\t\t\tshort [] fontSize = new short [1];", "-\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamFMFontSize, OS.typeSInt16, null, 2, null, fontSize) == OS.noErr) {", "-\t\t\t\tfontData.setHeight (fontSize [0]);", "-\t\t\t}", "-\t\t\t// NEEDS WORK - color not supported in native dialog for Carbon", "-\t\t\t\trgb = new RGB(red, green, blue);", "+\t\t\t\trgb = new RGB (red, green, blue);", "+\t\t\t} else {", "+\t\t\t\tint [] dict = new int [1];", "+\t\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamDictionary, OS.typeCFDictionaryRef, null, 4, actualSize, dict) == OS.noErr) {", "+\t\t\t\t\tint [] attrib = new int [1];", "+\t\t\t\t\tif (OS.CFDictionaryGetValueIfPresent (dict [0], OS.kFontPanelAttributesKey (), attrib)) {", "+\t\t\t\t\t\tint [] tags = new int [1];", "+\t\t\t\t\t\tint [] sizes = new int [1];", "+\t\t\t\t\t\tint [] values = new int [1];", "+\t\t\t\t\t\tif (OS.CFDictionaryGetValueIfPresent (attrib [0], OS.kFontPanelAttributeTagsKey (), tags) &&", "+\t\t\t\t\t\t\tOS.CFDictionaryGetValueIfPresent (attrib [0], OS.kFontPanelAttributeSizesKey (), sizes) &&", "+\t\t\t\t\t\t\tOS.CFDictionaryGetValueIfPresent (attrib [0], OS.kFontPanelAttributeValuesKey (), values)", "+\t\t\t\t\t\t) {", "+\t\t\t\t\t\t\tint count = OS.CFDataGetLength (tags [0]) / 4;", "+\t\t\t\t\t\t\tint tagPtr = OS.CFDataGetBytePtr (tags[0]);", "+                            int sizePtr = OS.CFDataGetBytePtr (sizes [0]);", "+                            int [] tag = new int [1];", "+                            int [] size = new int [1];", "+                            int valueOffset = 0;", "+                            for (int i = 0 ; i < count ; i++) {", "+                            \tOS.memcpy (tag, tagPtr + (i * 4), 4);", "+                            \tOS.memcpy (size, sizePtr + (i * 4), 4);", "+                                if (tag [0] == OS.kATSUColorTag && size[0] == RGBColor.sizeof) {", "+                                    int valuePtr = OS.CFDataGetBytePtr (values [0]);", "+                                \tOS.memcpy (color, valuePtr + valueOffset, RGBColor.sizeof);", "+                                \tint red = (color.red >> 8) & 0xFF;", "+                    \t\t\t\tint green = (color.green >> 8) & 0xFF;", "+                    \t\t\t\tint blue =\t(color.blue >> 8) & 0xFF;", "+                    \t\t\t\trgb = new RGB (red, green, blue);", "+                                    break ;", "+                                }", "+                                valueOffset = size[0];", "+                            }", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4a4c057c9626913c5cc0a0a7ed242de", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "25e0b9cefcf6aad913e775e22fb19b1e3de2a216", "commitAfterChange": "abdb7df6c5ef7f31dd770f626e22ad0d039e1629", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public FontData[] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-\tif (!scalable) return new FontData[0];", "-\tshort[] style = new short[1];", "-\tshort[] family = new short[1];", "-\tint[] fontCount = new int[1];", "-\tint[] actualLength = new int[1];", "-\tCFRange range = new CFRange();", "-\tOS.ATSUGetFontIDs(null, 0, fontCount);", "-\tint[] fontIDs = new int[fontCount[0]];", "-\tOS.ATSUGetFontIDs(fontIDs, fontIDs.length, fontCount);", "+\tif (!scalable) return new FontData[0];\t", "-\tFontData[] fds = new FontData[fontCount[0]];", "-\tfor (int i=0; i<fds.length; i++) {", "-\t\tint fontID = fontIDs[i];", "-\t\tint platformCode = OS.kFontUnicodePlatform, encoding = OS.kCFStringEncodingUnicode;", "-\t\tif (OS.ATSUFindFontName(fontID, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, actualLength, null) != OS.noErr) {", "-\t\t\tplatformCode = OS.kFontNoPlatformCode;", "-\t\t\tencoding = OS.kCFStringEncodingMacRoman;", "-\t\t\tif (OS.ATSUFindFontName(fontID, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, actualLength, null) != OS.noErr) {", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t}", "-\t\tbyte[] buffer = new byte[actualLength[0]];", "-\t\tOS.ATSUFindFontName(fontID, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, buffer.length, buffer, actualLength, null);", "-\t\tint ptr = OS.CFStringCreateWithBytes(0, buffer, buffer.length, encoding, false);", "-\t\tif (ptr != 0) {", "-\t\t\tint length = OS.CFStringGetLength(ptr);", "-\t\t\tif (length != 0) {", "-\t\t\t\tchar[] chars = new char[length];", "-\t\t\t\trange.length = length;", "-\t\t\t\tOS.CFStringGetCharacters(ptr, range, chars);", "-\t\t\t\tString name = new String(chars);", "-\t\t\t\tif (!name.startsWith(\".\")) {", "-\t\t\t\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, name)) {", "-\t\t\t\t\t\tOS.FMGetFontFamilyInstanceFromFont(fontID, family, style);", "-\t\t\t\t\t\tint s = SWT.NORMAL;", "-\t\t\t\t\t\tif ((style[0] & OS.italic) != 0) s |= SWT.ITALIC;", "-\t\t\t\t\t\tif ((style[0] & OS.bold) != 0) s |= SWT.BOLD;", "-\t\t\t\t\t\tFontData data = new FontData(name, 0, s);", "-\t\t\t\t\t\tfds[count++] = data;", "+\tint[] buffer = new int[1];", "+\tCFRange range = new CFRange ();", "+\tOS.ATSUGetFontIDs(null, 0, buffer);", "+\tFontData[] fds = new FontData[buffer[0]];", "+\tint status = OS.ATSFontIteratorCreate (OS.kATSFontContextLocal, 0, 0, OS.kATSOptionFlagsDefaultScope, buffer);", "+\tint iter = buffer[0];", "+\twhile (status == OS.noErr) {", "+\t\tstatus = OS.ATSFontIteratorNext(iter, buffer);", "+\t\tif (status == OS.noErr) {", "+\t\t\tint font = buffer[0];", "+\t\t\tif (OS.ATSFontGetName(font, 0, buffer) == OS.noErr) {", "+\t\t\t\trange.length = OS.CFStringGetLength(buffer[0]);", "+\t\t\t\tchar [] chars = new char[range.length];", "+\t\t\t\tOS.CFStringGetCharacters(buffer[0], range, chars);", "+\t\t\t\tOS.CFRelease(buffer[0]);", "+\t\t\t\tString atsName = new String(chars);", "+\t\t\t\tint platformCode = OS.kFontUnicodePlatform, encoding = OS.kCFStringEncodingUnicode;", "+\t\t\t\tif (OS.ATSUFindFontName(font, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, buffer, null) != OS.noErr) {", "+\t\t\t\t\tplatformCode = OS.kFontNoPlatformCode;", "+\t\t\t\t\tencoding = OS.kCFStringEncodingMacRoman;", "+\t\t\t\t\tif (OS.ATSUFindFontName(font, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, buffer, null) != OS.noErr) {", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\tbyte[] bytes = new byte[buffer[0]];", "+\t\t\t\tOS.ATSUFindFontName(font, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, bytes.length, bytes, buffer, null);", "+\t\t\t\tint ptr = OS.CFStringCreateWithBytes(0, bytes, bytes.length, encoding, false);", "+\t\t\t\tif (ptr != 0) {", "+\t\t\t\t\trange.length = OS.CFStringGetLength(ptr);", "+\t\t\t\t\tif (range.length != 0) {", "+\t\t\t\t\t\tchars = new char[range.length];", "+\t\t\t\t\t\tOS.CFStringGetCharacters(ptr, range, chars);", "+\t\t\t\t\t\tString name = new String(chars);", "+\t\t\t\t\t\tif (!name.startsWith(\".\")) {", "+\t\t\t\t\t\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, name)) {", "+\t\t\t\t\t\t\t\tint s = SWT.NORMAL;", "+\t\t\t\t\t\t\t\tif (atsName.indexOf(\"Italic\") != -1) s |= SWT.ITALIC;", "+\t\t\t\t\t\t\t\tif (atsName.indexOf(\"Bold\") != -1) s |= SWT.BOLD;", "+\t\t\t\t\t\t\t\tFontData data = new FontData(name, 0, s);", "+\t\t\t\t\t\t\t\tdata.atsName = atsName;", "+\t\t\t\t\t\t\t\tif (count == fds.length) {", "+\t\t\t\t\t\t\t\t\tFontData[] newFDs = new FontData[count + 4];", "+\t\t\t\t\t\t\t\t\tSystem.arraycopy(fds, 0, newFDs, 0, count);", "+\t\t\t\t\t\t\t\t\tfds = newFDs;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tfds[count++] = data;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.CFRelease(ptr);", "+\t\t\t\t}", "-\t\t\tOS.CFRelease(ptr);", "+\t}", "+\tif (iter != 0) {", "+\t\tbuffer [0] = iter;", "+\t\tOS.ATSFontIteratorRelease (buffer);"]}], "num": 13555}
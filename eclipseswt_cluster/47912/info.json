{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "232b11918891f44103c2c19518f28f37", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90e111f49fb2608a03ecb82d015c544e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "18a77004921c958d7933e6a4bf2f9879ef0cfdc3", "commitAfterChange": "235449f60e73b051bff45b523d24758455cf4aa9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static Program [] getPrograms ()", "signatureAfterChange": " public static Program [] getPrograms ()", "diff": ["-\treturn new Program[0];", "-//\tHashtable bundles = new Hashtable();", "-//\tString[] extensions = getExtensions();", "-//\tbyte[] fsRef = new byte[80];", "-//\tfor (int i = 0; i < extensions.length; i++) {", "-//\t\tString extension = extensions[i];", "-//\t\tchar[] chars = new char[extension.length() - 1];", "-//\t\textension.getChars(1, extension.length(), chars, 0);", "-//\t\tint ext = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "-//\t\tif (ext != 0) {", "-//\t\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "-//\t\t\t\tProgram program = getProgram(fsRef);", "-//\t\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "-//\t\t\t\t\tbundles.put(program.getName(), program);", "-//\t\t\t\t\tfsRef = new byte[80];", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tif (OS.VERSION >= 0x1040) {", "-//\t\t\t\tint utis = OS.UTTypeCreateAllIdentifiersForTag(OS.kUTTagClassFilenameExtension(), ext, 0);", "-//\t\t\t\tif (utis != 0) {", "-//\t\t\t\t\tint utiCount = OS.CFArrayGetCount(utis);", "-//\t\t\t\t\tfor (int j = 0; j < utiCount; j++) {", "-//\t\t\t\t\t\tint uti = OS.CFArrayGetValueAtIndex(utis, j);", "-//\t\t\t\t\t\tif (uti != 0) {", "-//\t\t\t\t\t\t\tint apps = OS.LSCopyAllRoleHandlersForContentType(uti, OS.kLSRolesAll);", "-//\t\t\t\t\t\t\tif (apps != 0) {", "-//\t\t\t\t\t\t\t\tint appCount = OS.CFArrayGetCount(apps);", "-//\t\t\t\t\t\t\t\tfor (int k = 0; k < appCount; k++) {", "-//\t\t\t\t\t\t\t\t\tint app = OS.CFArrayGetValueAtIndex(apps, k);", "-//\t\t\t\t\t\t\t\t\tif (app != 0) {;", "-//\t\t\t\t\t\t\t\t\t\tif (OS.LSFindApplicationForInfo(OS.kLSUnknownCreator, app, 0, fsRef, null) == OS.noErr) {", "-//\t\t\t\t\t\t\t\t\t\t\tProgram program = getProgram(fsRef);", "-//\t\t\t\t\t\t\t\t\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "-//\t\t\t\t\t\t\t\t\t\t\t\tbundles.put(program.getName(), program);", "-//\t\t\t\t\t\t\t\t\t\t\t\tfsRef = new byte[80];", "-//\t\t\t\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t\t\tOS.CFRelease(apps);", "-//\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t}", "-//\t\t\t\t\tOS.CFRelease(utis);", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tOS.CFRelease(ext);", "-//\t\t}", "-//\t}", "-//\tint count = 0;", "-//\tProgram[] programs = new Program[bundles.size()];", "-//\tEnumeration values = bundles.elements();", "-//\twhile (values.hasMoreElements()) {", "-//\t\tprograms[count++] = (Program)values.nextElement();", "-//\t}", "-//\treturn programs;", "+\tVector vector = new Vector();", "+\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\tNSString CFBundleName = NSString.stringWith(\"CFBundleName\");", "+\tNSString CFBundleDisplayName = NSString.stringWith(\"CFBundleDisplayName\");", "+\tNSArray array = new NSArray(OS.NSSearchPathForDirectoriesInDomains(OS.NSAllApplicationsDirectory, OS.NSAllDomainsMask, true));", "+\tint count = array.count();", "+\tfor (int i = 0; i < count; i++) {", "+\t\tNSString path = new NSString(array.objectAtIndex(i));", "+\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "+\t\tNSDirectoryEnumerator enumerator = fileManager.enumeratorAtPath(path);", "+\t\tif (enumerator != null) {", "+\t\t\tid id;", "+\t\t\twhile ((id = enumerator.nextObject()) != null) {", "+\t\t\t\tenumerator.skipDescendents();", "+\t\t\t\tNSString filePath = new NSString(id.id);", "+\t\t\t\tNSString fullPath = path.stringByAppendingPathComponent(filePath);", "+\t\t\t\tif (workspace.isFilePackageAtPath(fullPath)) {", "+\t\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(fullPath);", "+\t\t\t\t\tid bundleName = bundle.objectForInfoDictionaryKey(CFBundleDisplayName);", "+\t\t\t\t    if (bundleName == null) {", "+\t\t\t\t        bundleName = bundle.objectForInfoDictionaryKey(CFBundleName);", "+\t\t\t\t    }", "+\t\t\t\t    if (bundleName == null) {", "+\t\t\t\t        bundleName = fullPath.lastPathComponent().stringByDeletingPathExtension();", "+\t\t\t\t    }", "+\t\t\t\t    NSString name = new NSString(bundleName.id);", "+\t\t\t\t    Program program = new Program();", "+\t\t\t\t    program.name = name.getString();", "+\t\t\t\t    program.fullPath = fullPath.getString();", "+\t\t\t\t    vector.addElement(program);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tProgram[] programs = new Program[vector.size()];", "+\tvector.copyInto(programs);", "+\treturn programs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f40ebb90df7f834915dcf102de93fa6a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "18a77004921c958d7933e6a4bf2f9879ef0cfdc3", "commitAfterChange": "235449f60e73b051bff45b523d24758455cf4aa9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Program findProgram (String extension)", "signatureAfterChange": " public static Program findProgram (String extension)", "diff": ["-//\tchar[] chars;", "-//\tif (extension.charAt (0) != '.') {", "-//\t\tchars = new char[extension.length()];", "-//\t\textension.getChars(0, chars.length, chars, 0);", "-//\t} else {", "-//\t\tchars = new char[extension.length() - 1];", "-//\t\textension.getChars(1, extension.length(), chars, 0);\t\t", "-//\t}", "-//\tint ext = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "-//\tProgram program = null;", "-//\tif (ext != 0) {", "-//\t\tbyte[] fsRef = new byte[80];", "-//\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "-//\t\t\tprogram = getProgram(fsRef);", "-//\t\t}", "-//\t\tOS.CFRelease(ext);", "-//\t}", "-//\treturn program;", "+\tif (extension.charAt(0) != '.') extension = \".\" + extension;", "+\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\tint /*long*/ appName = OS.malloc(C.PTR_SIZEOF);", "+\tint /*long*/ type = OS.malloc(C.PTR_SIZEOF);", "+\tNSString temp = new NSString(OS.NSTemporaryDirectory());", "+\tNSString fileName = NSString.stringWith(\"swt\" + System.currentTimeMillis() + extension);", "+\tNSString fullPath = temp.stringByAppendingPathComponent(fileName);", "+\tNSFileManager fileManager = NSFileManager.defaultManager();", "+\tfileManager.createFileAtPath(fullPath, null, null);", "+\tworkspace.getInfoForFile(fullPath, appName, type);", "+\tfileManager.removeItemAtPath(fullPath, 0);", "+\tint /*long*/ [] buffer = new int /*long*/[1];", "+\tOS.memmove(buffer, appName, C.PTR_SIZEOF);", "+\tOS.free(appName);", "+\tOS.free(type);", "+\tif (buffer [0] != 0) {", "+\t\tNSString appPath = new NSString(buffer[0]);", "+\t\tNSBundle bundle = NSBundle.bundleWithPath(appPath);", "+\t\tif (bundle != null) {", "+\t\t\tNSString CFBundleName = NSString.stringWith(\"CFBundleName\");", "+\t\t\tNSString CFBundleDisplayName = NSString.stringWith(\"CFBundleDisplayName\");", "+\t\t\tid bundleName = bundle.objectForInfoDictionaryKey(CFBundleDisplayName);", "+\t\t    if (bundleName == null) {", "+\t\t        bundleName = bundle.objectForInfoDictionaryKey(CFBundleName);", "+\t\t    }", "+\t\t    if (bundleName == null) {", "+\t\t        bundleName = appPath.lastPathComponent().stringByDeletingPathExtension();", "+\t\t    }", "+\t\t    NSString name = new NSString(bundleName.id);\t    ", "+\t\t\tProgram program = new Program();", "+\t\t\tprogram.name = name.getString();", "+\t\t\treturn program;", "+\t\t}", "+\t}"]}], "num": 47912}
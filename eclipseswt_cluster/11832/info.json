{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "495557adc6efe1d6cfb0df3d6c4ec97e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf8869e852a059e255ff5b243394d74", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 30, "signatureBeforeChange": " public Rectangle getImageBounds (int columnIndex)", "signatureAfterChange": " int getPaintStopX()", "diff": ["-}", "-public Rectangle getImageBounds (int columnIndex) {", "-\tcheckWidget ();", "-\tint validColumnCount = Math.max (1, parent.getColumnCount ());", "-\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return new Rectangle (0,0,0,0);", "-\tint padding = parent.getCellPadding ();", "-\tint startX = getContentX (columnIndex);", "-\tint itemHeight = parent.getItemHeight ();", "-\tint y = parent.getItemY (this);", "-\tImage image = internalGetImage (columnIndex); ", "-\tif (image == null) {", "-\t\treturn new Rectangle (startX, y + padding, 0, itemHeight - 2 * padding);", "-\tRectangle imageBounds = image.getBounds ();", "-\t/* ", "-\t * For column 0 all images have the same width, which may be larger or smaller", "-\t * than the image to be drawn here.  Therefore the image bounds to draw must be", "-\t * specified.", "-\t */", "-\tint drawWidth;", "-\tif (columnIndex == 0) {", "-\t\tint imageSpaceX = parent.col0ImageWidth;", "-\t\tdrawWidth = Math.min (imageSpaceX, imageBounds.width);", "-\t} else {", "-\t\tdrawWidth = imageBounds.width;", "-\tint imageSpaceY = itemHeight - (2 * padding);", "-\tint drawHeight = Math.min (imageSpaceY, imageBounds.height);", "-\treturn new Rectangle(", "-\t\tstartX, y + (itemHeight - drawHeight) / 2,", "-\t\tdrawWidth, drawHeight);", "+ */", "+int getPaintStopX() {", "+\treturn (getItemStartX() + getItemExtent().x - getParent().getHorizontalOffset());", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146747c25d87cba88b450fdaea044482", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 31, "signatureBeforeChange": " public Rectangle getImageBounds(int index)", "signatureAfterChange": " public Rectangle getImageBounds (int columnIndex)", "diff": ["- */", "-public Rectangle getImageBounds(int index) {", "-\tcheckWidget();", "-\tTable parent = getParent();", "-\tif (!parent.checkData (this, true)) error (SWT.ERROR_WIDGET_DISPOSED);", "-\tint itemIndex = parent.indexOf (this);", "-\tint imageWidth = 0;", "-\tPoint imageExtent = parent.getImageExtent();", "-\tRectangle imageBounds = getBounds(index);", "-\t", "-\tif (itemIndex == -1) {", "-\t\timageBounds = new Rectangle(0, 0, 0, 0);", "-\t}", "-\telse", "-\tif (imageExtent != null) {", "-\t\tif (index == TableColumn.FIRST || getImage(index) != null) {", "-\t\t\timageWidth = imageExtent.x;", "-\t\t}", "-\t}", "-\timageBounds.width = imageWidth;", "-\treturn imageBounds;", "-}", "+}", "+public Rectangle getImageBounds (int columnIndex) {", "+\tcheckWidget ();", "+\tif (!parent.checkData (this, true)) error (SWT.ERROR_WIDGET_DISPOSED);", "+\tint validColumnCount = Math.max (1, parent.columns.length);", "+\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return new Rectangle (0,0,0,0);", "+", "+\tint padding = parent.getCellPadding ();", "+\tint startX = getContentX (columnIndex);", "+\tint itemHeight = parent.itemHeight;", "+\tint imageSpaceY = itemHeight - 2 * padding;", "+\tint y = parent.getItemY (this);", "+\tImage image = getImage (columnIndex); ", "+\tif (image == null) {", "+\t\treturn new Rectangle (startX, y + padding, 0, imageSpaceY);", "+\t}", "+\t", "+\tRectangle imageBounds = image.getBounds ();", "+\t/* ", "+\t * For column 0 all images have the same width, which may be larger or smaller", "+\t * than the image to be drawn here.  Therefore the image bounds to draw must be", "+\t * specified.", "+\t */", "+\tint drawWidth;", "+\tif (columnIndex == 0) {", "+\t\tint imageSpaceX = parent.col0ImageWidth;", "+\t\tdrawWidth = Math.min (imageSpaceX, imageBounds.width);", "+\t} else {", "+\t\tdrawWidth = imageBounds.width;", "+\t}", "+\tint drawHeight = Math.min (imageSpaceY, imageBounds.height);", "+\treturn new Rectangle (", "+\t\tstartX, y + (itemHeight - drawHeight) / 2,", "+\t\tdrawWidth, drawHeight);", "+}"]}], "num": 11832}
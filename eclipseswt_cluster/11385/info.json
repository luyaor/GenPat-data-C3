{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc918d1844c4ae41deaa1c25e9dcae0b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fe7de4d882c01fa45e82ea73ae252ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "16869ddf67c23faeefbc3dfea87ba1d07b576aa4", "commitAfterChange": "5490853b5c3594d14688ab1c5595c53977b8ead0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["+\t", "+\tif (OS.USE_CAIRO_SURFACE) {", "+\t\tif (flag != SWT.IMAGE_DISABLE) transparentPixel = srcImage.transparentPixel;", "+\t\talpha = srcImage.alpha;", "+\t\tif (srcImage.alphaData != null) {", "+\t\t\talphaData = new byte[srcImage.alphaData.length];", "+\t\t\tSystem.arraycopy(srcImage.alphaData, 0, alphaData, 0, alphaData.length);", "+\t\t}", "+\t", "+\t\tint /*long*/ imageSurface = srcImage.surface;", "+\t\tint format = Cairo.cairo_image_surface_get_format(imageSurface);", "+\t\tint width = this.width = Cairo.cairo_image_surface_get_width(imageSurface);", "+\t\tint height = this.height = Cairo.cairo_image_surface_get_height(imageSurface);", "+\t\tboolean hasAlpha = format == Cairo.CAIRO_FORMAT_ARGB32;", "+\t\tsurface = Cairo.cairo_image_surface_create(format, width, height);", "+\t\tif (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint /*long*/ cairo = Cairo.cairo_create(surface);", "+\t\tif (cairo == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tCairo.cairo_set_operator(cairo, Cairo.CAIRO_OPERATOR_SRC);", "+\t\tCairo.cairo_set_source_surface (cairo, imageSurface, 0, 0);", "+\t\tCairo.cairo_paint (cairo);", "+\t\tCairo.cairo_destroy(cairo);", "+\t\tif (flag != SWT.IMAGE_COPY) {", "+\t\t\tint stride = Cairo.cairo_image_surface_get_stride(surface);", "+\t\t\tint /*long*/ data = Cairo.cairo_image_surface_get_data(surface);", "+\t\t\tint oa, or, og, ob;", "+\t\t\tif (OS.BIG_ENDIAN) {", "+\t\t\t\toa = 0; or = 1; og = 2; ob = 3;", "+\t\t\t} else {", "+\t\t\t\toa = 3; or = 2; og = 1; ob = 0;", "+\t\t\t}", "+\t\t\tswitch (flag) {", "+\t\t\t\tcase SWT.IMAGE_DISABLE: {", "+\t\t\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "+\t\t\t\t\tRGB zeroRGB = zeroColor.getRGB();", "+\t\t\t\t\tint zeroRed = zeroRGB.red;", "+\t\t\t\t\tint zeroGreen = zeroRGB.green;", "+\t\t\t\t\tint zeroBlue = zeroRGB.blue;", "+\t\t\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "+\t\t\t\t\tRGB oneRGB = oneColor.getRGB();", "+\t\t\t\t\tint oneRed = oneRGB.red;", "+\t\t\t\t\tint oneGreen = oneRGB.green;", "+\t\t\t\t\tint oneBlue = oneRGB.blue;", "+\t\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\t\tOS.memmove(line, data + (y * stride), stride);", "+\t\t\t\t\t\tfor (int x=0, offset=0; x<width; x++, offset += 4) {", "+\t\t\t\t\t\t\tint a = line[offset + oa] & 0xFF;", "+\t\t\t\t\t\t\tint r = line[offset + or] & 0xFF;", "+\t\t\t\t\t\t\tint g = line[offset + og] & 0xFF;", "+\t\t\t\t\t\t\tint b = line[offset + ob] & 0xFF;", "+\t\t\t\t\t\t\tif (hasAlpha && a != 0) {", "+\t\t\t\t\t\t\t\t//TODO write this without floating point math", "+\t\t\t\t\t\t\t\tr = (int)((r / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t\tg = (int)((g / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t\tb = (int)((b / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tint intensity = r * r + g * g + b * b;", "+\t\t\t\t\t\t\tif (intensity < 98304) {", "+\t\t\t\t\t\t\t\tr = zeroRed;", "+\t\t\t\t\t\t\t\tg = zeroGreen;", "+\t\t\t\t\t\t\t\tb = zeroBlue;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tr = oneRed;", "+\t\t\t\t\t\t\t\tg = oneGreen;", "+\t\t\t\t\t\t\t\tb = oneBlue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (hasAlpha) {", "+\t\t\t\t\t\t\t\t/* pre-multiplied alpha */", "+\t\t\t\t\t\t\t\tr = (r * a) + 128;", "+\t\t\t\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\t\t\t\t\tg = (g * a) + 128;", "+\t\t\t\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\t\t\t\t\tb = (b * a) + 128;", "+\t\t\t\t\t\t\t\tb = (b + (b >> 8)) >> 8;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tline[offset + or] = (byte)r;", "+\t\t\t\t\t\t\tline[offset + og] = (byte)g;", "+\t\t\t\t\t\t\tline[offset + ob] = (byte)b;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.memmove(data + (y * stride), line, stride);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "+\t\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\t\tOS.memmove(line, data + (y * stride), stride);", "+\t\t\t\t\t\tfor (int x=0, offset = 0; x<width; x++, offset += 4) {", "+\t\t\t\t\t\t\tint a = line[offset + oa] & 0xFF;", "+\t\t\t\t\t\t\tint r = line[offset + or] & 0xFF;", "+\t\t\t\t\t\t\tint g = line[offset + og] & 0xFF;", "+\t\t\t\t\t\t\tint b = line[offset + ob] & 0xFF;", "+\t\t\t\t\t\t\tif (hasAlpha && a != 0) {", "+\t\t\t\t\t\t\t\t//TODO write this without floating point math", "+\t\t\t\t\t\t\t\tr = (int)((r / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t\tg = (int)((g / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t\tb = (int)((b / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tint intensity = (r+r+g+g+g+g+g+b) >> 3;", "+\t\t\t\t\t\t\tif (hasAlpha) {", "+\t\t\t\t\t\t\t\t/* pre-multiplied alpha */", "+\t\t\t\t\t\t\t\tintensity = (intensity * a) + 128;", "+\t\t\t\t\t\t\t\tintensity = (intensity + (intensity >> 8)) >> 8;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tline[offset+or] = line[offset+og] = line[offset+ob] = (byte)intensity;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.memmove(data + (y * stride), line, stride);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tinit();", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19194678bd2a50da51a3ae00c819b3ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "d089b2cf79ce87d2a82f677ea1a4ce5a5ba9d4a4", "commitAfterChange": "78b034106c080360cc188a981bb53f8356762fbe", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void init(ImageData image)", "signatureAfterChange": "  void init(ImageData image)", "diff": ["-\tint stride, destDepth;", "+\tint stride, destDepth, redMask = 0xFF0000, greenMask = 0xFF00, blueMask = 0xFF, srcOrder = ImageData.MSB_FIRST;", "-\tif (OS.GTK_VERSION >= OS.VERSION(2, 22, 0)) {", "+\tint oa = 0, or = 0, og = 0, ob = 0;", "+\tif (OS.USE_CAIRO_SURFACE) {", "+\t\tbyte[] line = new byte[stride];", "+\t\tint /*long*/ ptr = OS.malloc(4);", "+\t\tOS.memmove(ptr, new int[]{1}, 4);", "+\t\tOS.memmove(line, ptr, 1);", "+\t\tOS.free(ptr);", "+\t\tboolean bigendian = line[0] == 0;", "+\t\tif (bigendian) {", "+\t\t\toa = 0; or = 1; og = 2; ob = 3;", "+\t\t\tredMask = 0xFF00;", "+\t\t\tgreenMask = 0xFF0000;", "+\t\t\tblueMask = 0xFF000000;", "+\t\t} else {", "+\t\t\toa = 3; or = 2; og = 1; ob = 0;", "+\t\t\tredMask = 0xFF0000;", "+\t\t\tgreenMask = 0xFF00;", "+\t\t\tblueMask = 0xFF;", "+\t\t\tsrcOrder = ImageData.LSB_FIRST;", "+\t\t}", "-\tif (!palette.isDirect || image.depth != destDepth || stride != image.bytesPerLine || palette.redMask != 0xFF0000 || palette.greenMask != 0xFF00 || palette.blueMask != 0xFF) {", "+\tif (!palette.isDirect || image.depth != destDepth || stride != image.bytesPerLine || palette.redMask != redMask || palette.greenMask != greenMask || palette.blueMask != blueMask) {", "-\t\t\t\tbuffer, destDepth, stride, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "+\t\t\t\tbuffer, destDepth, stride, srcOrder, 0, 0, width, height, redMask, greenMask, blueMask,", "-\t\t\t\tbuffer, destDepth, stride, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "+\t\t\t\tbuffer, destDepth, stride, srcOrder, 0, 0, width, height, redMask, greenMask, blueMask,", "-\tif (OS.GTK_VERSION < OS.VERSION(2, 22, 0) ) {", "+\tif (!OS.USE_CAIRO_SURFACE) {", "+\t\tthis.pixmap = pixmap;", "-\t\tint /*long*/ mask = createMask(image, isIcon);", "-\t\tif (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tthis.mask = mask;", "+\t\tif (OS.USE_CAIRO_SURFACE) {", "+\t\t\tImageData mask = image.getTransparencyMask();", "+\t\t\tint offset = 0;", "+\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\tfor (int x=0; x<width; x++, offset += 4) {", "+\t\t\t\t\tint alpha = mask.getPixel(x, y) == 0 ? 0 : 0xff;", "+\t\t\t\t\t/* pre-multiplied alpha */", "+\t\t\t\t\tint r = ((buffer[offset + or] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\t\tint g = ((buffer[offset + og] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\t\tint b = ((buffer[offset + ob] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tb = (b + (b >> 8)) >> 8;", "+\t\t\t\t\tbuffer[offset + oa] = (byte)alpha;", "+\t\t\t\t\tbuffer[offset + or] = (byte)r;", "+\t\t\t\t\tbuffer[offset + og] = (byte)g;", "+\t\t\t\t\tbuffer[offset + ob] = (byte)b;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.memmove(data, buffer, stride * height);", "+\t\t} else {", "+\t\t\tint /*long*/ mask = createMask(image, isIcon);", "+\t\t\tif (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tthis.mask = mask;", "+\t\t}", "+\t\tif (OS.USE_CAIRO_SURFACE) {", "+\t\t\tif (this.alpha != -1) {", "+\t\t\t\tint offset = 0; ", "+\t\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\t\tfor (int x=0; x<width; x++, offset += 4) {", "+\t\t\t\t\t\tint alpha = this.alpha;", "+\t\t\t\t\t\t/* pre-multiplied alpha */", "+\t\t\t\t\t\tint r = ((buffer[offset + or] & 0xFF) * alpha) + 128;", "+\t\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\t\t\tint g = ((buffer[offset + og] & 0xFF) * alpha) + 128;", "+\t\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\t\t\tint b = ((buffer[offset + ob] & 0xFF) * alpha) + 128;", "+\t\t\t\t\t\tb = (b + (b >> 8)) >> 8;", "+\t\t\t\t\t\tbuffer[offset + oa] = (byte)alpha;", "+\t\t\t\t\t\tbuffer[offset + or] = (byte)r;", "+\t\t\t\t\t\tbuffer[offset + og] = (byte)g;", "+\t\t\t\t\t\tbuffer[offset + ob] = (byte)b;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.memmove(data, buffer, stride * height);", "+\t\t\t} else if (this.alphaData != null) {", "+\t\t\t\tint offset = 0; ", "+\t\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\t\tfor (int x=0; x<width; x++, offset += 4) {", "+\t\t\t\t\t\tint alpha = alphaData [y*width+x] & 0xFF;", "+\t\t\t\t\t\t/* pre-multiplied alpha */", "+\t\t\t\t\t\tint r = ((buffer[offset + or] & 0xFF) * alpha) + 128;", "+\t\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\t\t\tint g = ((buffer[offset + og] & 0xFF) * alpha) + 128;", "+\t\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\t\t\tint b = ((buffer[offset + ob] & 0xFF) * alpha) + 128;", "+\t\t\t\t\t\tb = (b + (b >> 8)) >> 8;", "+\t\t\t\t\t\tbuffer[offset + oa] = (byte)alpha;", "+\t\t\t\t\t\tbuffer[offset + or] = (byte)r;", "+\t\t\t\t\t\tbuffer[offset + og] = (byte)g;", "+\t\t\t\t\t\tbuffer[offset + ob] = (byte)b;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.memmove(data, buffer, stride * height);", "+\t\t\t}", "+\t\t}", "-\tthis.pixmap = pixmap;"]}], "num": 11385}
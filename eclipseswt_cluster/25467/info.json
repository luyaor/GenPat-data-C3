{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a98a12b019021f72e2f515d2df543e96", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5908d8844d748524d8a490c30ad945df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Caret.java", "commitBeforeChange": "b300d06e8a006b6b8e628424d8002d7091bea18d", "commitAfterChange": "a0cb6b14f3221651351e12702cd357982811b42b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  boolean drawCaret ()", "signatureAfterChange": "  boolean drawCaret ()", "diff": ["-\tif (!parent.isDrawing (parent.handle)) return false;", "-\tint nWidth = width, nHeight = height;", "-\tif (image != null) {", "-\t\tRectangle rect = image.getBounds ();", "-\t\tnHeight = rect.height;", "-\t}", "-\tif (nWidth <= 0) nWidth = 1;", "+\tif (!parent.isDrawing (parentHandle)) return false;", "+\tint nWidth = width, nHeight = height;", "+\tif (nWidth <= 0) nWidth = 1;", "-\tOS.SetRect(rect, (short) left, (short) top, (short) (left + nWidth), (short) (top + nHeight));", "-\tRGBColor color = new RGBColor ();", "-\tcolor.red = (short) 0xFFFF;", "-\tcolor.green = (short) 0xFFFF;", "-\tcolor.blue = (short) 0xFFFF;", "-\tOS.RGBBackColor (color);", "-\tOS.InvertRect (rect);\t", "+\tif (image == null) {", "+\t\tOS.SetRect(rect, (short) left, (short) top, (short) (left + nWidth), (short) (top + nHeight));", "+\t\tRGBColor color = new RGBColor ();", "+\t\tcolor.red = (short) 0xFFFF;", "+\t\tcolor.green = (short) 0xFFFF;", "+\t\tcolor.blue = (short) 0xFFFF;", "+\t\tOS.RGBBackColor (color);", "+\t\tOS.InvertRect (rect);", "+\t} else {", "+\t\tint imageHandle = image.handle;", "+\t\tnWidth = OS.CGImageGetWidth (imageHandle);", "+\t\tnHeight = OS.CGImageGetHeight (imageHandle);", "+\t\tint bpl = OS.CGImageGetBytesPerRow (imageHandle);", "+\t\tRect bounds = new Rect ();", "+\t\tbounds.right = (short) nWidth;", "+\t\tbounds.bottom = (short) nHeight;", "+\t\tRect portRect = new Rect ();", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, portRect);", "+\t\tleft += portRect.left;", "+\t\ttop += portRect.top;\t\t", "+\t\tOS.SetRect(rect, (short) left, (short) top, (short) (left + nWidth), (short) (top + nHeight));", "+\t\tint [] gWorld = new int [1];", "+\t\tOS.NewGWorldFromPtr (gWorld, OS.k32ARGBPixelFormat, bounds, 0, 0, 0, image.data, bpl);", "+\t\tint [] curPort = new int [1];", "+\t\tint [] curGWorld = new int [1];", "+\t\tOS.GetGWorld (curPort, curGWorld);\t", "+\t\tOS.SetGWorld (gWorld [0], curGWorld [0]);", "+\t\tint portBitMap = OS.GetPortBitMapForCopyBits (port);", "+\t\tint gworldBitMap = OS.GetPortBitMapForCopyBits (gWorld [0]);", "+\t\tOS.OffsetRgn(visibleRgn, portRect.left, portRect.top);", "+\t\tOS.CopyBits (gworldBitMap, portBitMap, bounds, rect, (short) OS.notSrcXor, visibleRgn);", "+\t\tOS.OffsetRgn(visibleRgn, (short) -portRect.left, (short) -portRect.top);", "+\t\tOS.SetGWorld (curPort [0], curGWorld [0]);", "+\t\tOS.DisposeGWorld (gWorld [0]);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d58002d846a9663fe191e7a20a093a1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "03a94c558053b3ed9d02e16929534449bce35247", "commitAfterChange": "661902bf7ee70a356b86fa6a9079f1e6fe9f6a55", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\t} else if (data.window != 0 || data.control != 0) {", "+\t} else if (data.control != 0) {", "-\t\tif (data.control != 0) {", "-\t\t\tRect rect = new Rect ();", "-\t\t\tint window = OS.GetControlOwner (data.control);", "-\t\t\tif (OS.HIVIEW) {", "-\t\t\t\tCGPoint pt = new CGPoint ();", "-\t\t\t\tOS.HIViewConvertPoint (pt, data.control, 0);", "-\t\t\t\tx += (int) pt.x;", "-\t\t\t\ty += (int) pt.y;", "-\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "-\t\t\t} else {", "-\t\t\t\tOS.GetControlBounds (data.control, rect);", "-\t\t\t\tx += rect.left;", "-\t\t\t\ty += rect.top;", "-\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t\t}", "-\t\t\tx += rect.left;", "-\t\t\ty += rect.top;", "-\t\t\trect = data.insetRect;", "-\t\t\tx -= rect.left;", "-\t\t\ty -= rect.top;", "+\t\tint width = OS.CGImageGetWidth(imageHandle);", "+\t\tint height = OS.CGImageGetHeight(imageHandle);", "+\t\tint window = OS.GetControlOwner(data.control);", "+\t\tRect srcRect = new Rect ();", "+\t\tif (OS.HIVIEW) {", "+\t\t\tCGPoint pt = new CGPoint ();", "+\t\t\tint[] contentView = new int[1];", "+\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "+\t\t\tOS.HIViewConvertPoint (pt, data.control, contentView[0]);", "+\t\t\tx += (int) pt.x;", "+\t\t\ty += (int) pt.y;", "+\t\t} else {", "+\t\t\tOS.GetControlBounds (data.control, srcRect);", "+\t\t\tx += srcRect.left;", "+\t\t\ty += srcRect.top;", "+\t\tRect inset = data.insetRect;", "+\t\tx -= inset.left;", "+\t\ty -= inset.top;", "+\t\tsrcRect.left = (short)x;", "+\t\tsrcRect.top = (short)y;", "+\t\tsrcRect.right = (short)(x + width);", "+\t\tsrcRect.bottom = (short)(y + height);", "+\t\tRect destRect = new Rect();", "+\t\tdestRect.right = (short)width;", "+\t\tdestRect.bottom = (short)height;", "+\t\tint bpl = width * 4;", "+\t\tint[] gWorld = new int[1];", "+\t\tint port = OS.GetWindowPort(window);\t\t", "+\t\tOS.NewGWorldFromPtr(gWorld, OS.k32ARGBPixelFormat, destRect, 0, 0, 0, image.data, bpl);", "+\t\tOS.CopyBits(OS.GetPortBitMapForCopyBits(port), OS.GetPortBitMapForCopyBits(gWorld[0]), srcRect, destRect, (short)OS.srcCopy, 0);\t\t\t", "+\t\tOS.DisposeGWorld(gWorld [0]);", "+\t} else if (data.window != 0) {", "+\t\tint imageHandle = image.handle;"]}], "num": 25467}
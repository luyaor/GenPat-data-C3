{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43ae2673c6b3b70fe9ae795e86d7ee5e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "046c84dff3298823e46c0a121aea3149", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "90989c7104593bfd4e0ff41bf464fbe7b3ab7a39", "commitAfterChange": "8e1fb2474c2f3af253317b3903eca7335c2af569", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\tint /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);", "+\tGtkAdjustment adjustment = new GtkAdjustment ();", "+\tOS.memmove (adjustment, hAdjustment);", "+\tString string = String.valueOf ((int) adjustment.upper);", "+\tbyte [] buffer1 = Converter.wcsToMbcs (null, string, false);", "+\tint /*long*/ ptr = OS.pango_layout_get_text (layout);", "+\tint length = OS.strlen (ptr);", "+\tbyte [] buffer2 = new byte [length];", "+\tOS.memmove (buffer2, ptr, length);\t", "+\tOS.pango_layout_set_text (layout, buffer1, buffer1.length);", "+\tOS.pango_layout_set_text (layout, buffer2, buffer2.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6d0edb19683d7c65355b84c9a25548", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "83b90a54ba3b915ddf5c905bc3c2d9ec47fef8c3", "commitAfterChange": "eb7f42555b902107cac1113c7ee603215303fa2b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\t\tfloat /*double*/ [] fg = gc.data.foreground;", "-\t\tNSColor foreground = NSColor.colorWithDeviceRed(fg[0], fg[1], fg[2], fg[3]);", "+\t\tNSRange range = new NSRange();", "-\t\tNSRange selectionRange = null;", "-\t\tNSColor selectionColor = null;", "-\t\t\tselectionColor = NSColor.colorWithDeviceRed(selectionBackground.handle[0], selectionBackground.handle[1], selectionBackground.handle[2], selectionBackground.handle[3]);", "-\t\t}", "-\t\tif (hasSelection) {", "-\t\t\tselectionRange = new NSRange();", "-\t\t\tselectionRange.location = translateOffset(selectionStart);", "-\t\t\tselectionRange.length = translateOffset(selectionEnd - selectionStart + 1);", "-\t\t\tlayoutManager.addTemporaryAttribute(OS.NSBackgroundColorAttributeName, selectionColor, selectionRange);", "+\t\t\tNSColor selectionColor = NSColor.colorWithDeviceRed(selectionBackground.handle[0], selectionBackground.handle[1], selectionBackground.handle[2], selectionBackground.handle[3]);", "+\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "+\t\t\tNSRect rect = new NSRect();", "+\t\t\tif (hasSelection) {", "+\t\t\t\tint /*long*/ pRectCount = OS.malloc(C.PTR_SIZEOF);", "+\t\t\t\trange.location = translateOffset(selectionStart);", "+\t\t\t\trange.length = translateOffset(selectionEnd - selectionStart + 1);", "+\t\t\t\tint /*long*/ pArray = layoutManager.rectArrayForCharacterRange(range, range, textContainer, pRectCount);", "+\t\t\t\tint /*long*/ [] rectCount = new int /*long*/ [1];", "+\t\t\t\tOS.memmove(rectCount, pRectCount, C.PTR_SIZEOF);", "+\t\t\t\tOS.free(pRectCount);", "+\t\t\t\tfor (int k = 0; k < rectCount[0]; k++, pArray += NSRect.sizeof) {", "+\t\t\t\t\tOS.memmove(rect, pArray, NSRect.sizeof);", "+\t\t\t\t\trect.x += pt.x;", "+\t\t\t\t\trect.y += pt.y;", "+\t\t\t\t\tpath.appendBezierPathWithRect(rect);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif ((flags & SWT.LAST_LINE_SELECTION) != 0) {", "+\t\t\t\tNSRect bounds = lineBounds[lineBounds.length - 1];", "+\t\t\t\trect.x = pt.x + bounds.x + bounds.width;", "+\t\t\t\trect.y = y + bounds.y;", "+\t\t\t\trect.width = (flags & SWT.FULL_SELECTION) != 0 ? 0x7fffffff : bounds.height / 3;", "+\t\t\t\trect.height = bounds.height;", "+\t\t\t\tpath.appendBezierPathWithRect(rect);", "+\t\t\t}", "+\t\t\tselectionColor.setFill();", "+\t\t\tpath.fill();", "-\t\t\tNSRange range = new NSRange();", "+\t\t\tfloat /*double*/ [] fg = gc.data.foreground;", "+\t\t\tNSColor foreground = NSColor.colorWithDeviceRed(fg[0], fg[1], fg[2], fg[3]);", "-\t\t}", "-\t\tif ((flags & SWT.LAST_LINE_SELECTION) != 0) {", "-\t\t\tNSRect bounds = lineBounds[lineBounds.length - 1];", "-\t\t\tNSRect rect = new NSRect();", "-\t\t\trect.x = pt.x + bounds.x + bounds.width;", "-\t\t\trect.y = y + bounds.y;", "-\t\t\trect.width = (flags & SWT.FULL_SELECTION) != 0 ? 0x7fffffff : bounds.height / 3;", "-\t\t\trect.height = bounds.height;", "-\t\t\tselectionColor.setFill();", "-\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "-\t\t\tpath.appendBezierPathWithRect(rect);", "-\t\t\tpath.fill();", "-\t\t}", "-\t\tif (selectionRange != null) {", "-\t\t\tlayoutManager.removeTemporaryAttribute(OS.NSBackgroundColorAttributeName, selectionRange);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "310427181d65eee98e02223e10281af1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "52e20f102db42a003d4de919d7b6feaae485fc2b", "commitAfterChange": "7f8bf8760658a1115ba38f670e13909efd38b188", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["-\t/*\r", "-\t * The only reason this method is not just left out to\r", "-\t * fall through to the superclass, is the JavaDoc comment.\r", "-\t */\r", "-\treturn super.open();\r", "+\tbyte [] titleBytes = Converter.wcsToMbcs (null, title, true);\r", "+\thandle = OS.gtk_file_selection_new (titleBytes);\r", "+\tif (parent!=null) {\r", "+\t\tOS.gtk_window_set_transient_for(handle, parent.topHandle());\r", "+\t}\r", "+\tanswer = null;\r", "+\tpreset();\r", "+\tint response = OS.gtk_dialog_run(handle);\r", "+\tif (response == OS.GTK_RESPONSE_OK) {\r", "+\t\tint lpFilename = OS.gtk_file_selection_get_filename (handle);\r", "+\t\tint filenameLength = OS.strlen (lpFilename);\r", "+\t\tbyte [] filenameBytes = new byte [filenameLength];\r", "+\t\tOS.memmove (filenameBytes, lpFilename, filenameLength);\r", "+\t\tString osAnswer = new String( Converter.mbcsToWcs (null, filenameBytes) );\r", "+\t\tinterpretOsAnswer(osAnswer);\r", "+\t}\r", "+\tOS.gtk_widget_destroy(handle);\r", "+\treturn answer;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad88e5bd27fe83b19ca80305ae008346", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "4e1f6b56c8d97deeab3788d9e0250c05a1da62a8", "commitAfterChange": "ef275e714ee29ce9ca54811c88ae99f34126c3fa", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public Point getCaretLocation ()", "signatureAfterChange": " public Point getCaretLocation ()", "diff": ["-//\tNSText", "-//\tNSRange range = ((NSTextView)view).selectedRange();", "-\treturn null;", "+\tNSTextView widget = (NSTextView)view;", "+\tNSLayoutManager layoutManager = widget.layoutManager();", "+\tNSTextContainer container = widget.textContainer();", "+\tNSRange range = widget.selectedRange();", "+\tint /*long*/ pRectCount = OS.malloc(C.PTR_SIZEOF);", "+\tint /*long*/ pArray = layoutManager.rectArrayForCharacterRange(range, range, container, pRectCount);", "+\tint /*long*/ [] rectCount = new int /*long*/ [1];", "+\tOS.memmove(rectCount, pRectCount, C.PTR_SIZEOF);", "+\tOS.free(pRectCount);", "+\tNSRect rect = new NSRect();", "+\tif (rectCount[0] > 0) OS.memmove(rect, pArray, NSRect.sizeof);", "+\treturn new Point((int)rect.x, (int)rect.y);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07eb53ed1b33fc0446a945dedfcf7e70", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "3e381f35665a1be1bc3cb002766194b2f4ae5bb9", "commitAfterChange": "666899c116c3a7fadc64ad290f3ccaa7e63e3acb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int[] createGdipImage()", "signatureAfterChange": "  int[] createGdipImage()", "diff": ["-\t\t\t\t\t\t\tcase 16:", "-\t\t\t\t\t\t\t\tblue = (byte)((transparentPixel & 0x1F) << 3);", "-\t\t\t\t\t\t\t\tgreen = (byte)((transparentPixel & 0x3E0) >> 2);", "-\t\t\t\t\t\t\t\tred = (byte)((transparentPixel & 0x7C00) >> 7);", "+\t\t\t\t\t\t\tcase 16:\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tint blueMask = 0x1F;", "+\t\t\t\t\t\t\t\tint blueShift = ImageData.getChannelShift(blueMask);", "+\t\t\t\t\t\t\t\tbyte[] blues = ImageData.ANY_TO_EIGHT[ImageData.getChannelWidth(blueMask, blueShift)];", "+\t\t\t\t\t\t\t\tblue = blues[(transparentPixel & blueMask) >> blueShift];", "+\t\t\t\t\t\t\t\tint greenMask = 0x3E0;", "+\t\t\t\t\t\t\t\tint greenShift = ImageData.getChannelShift(greenMask);", "+\t\t\t\t\t\t\t\tbyte[] greens = ImageData.ANY_TO_EIGHT[ImageData.getChannelWidth(greenMask, greenShift)];", "+\t\t\t\t\t\t\t\tgreen = greens[(transparentPixel & greenMask) >> greenShift];\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tint redMask = 0x7C00;", "+\t\t\t\t\t\t\t\tint redShift = ImageData.getChannelShift(redMask);", "+\t\t\t\t\t\t\t\tbyte[] reds = ImageData.ANY_TO_EIGHT[ImageData.getChannelWidth(redMask, redShift)];", "+\t\t\t\t\t\t\t\tred = reds[(transparentPixel & redMask) >> redShift];\t\t\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0cd3bbebf09a5d385bb2c657f18dded", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "48512dc20e32e369917d3e1ccfb92109c9724e7e", "commitAfterChange": "1942f64e0b774317e0a8e6ec44902bb736bb7790", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \r boolean getAnswer()", "signatureAfterChange": "\r int okFunc (int widget, int callData)", "diff": ["+int okFunc (int widget, int callData) {\r", "+\tcancel = false;\r", "+\tchar separator = System.getProperty (\"file.separator\").charAt (0);\r", "+\tint lpFilename = OS.gtk_file_selection_get_filename (callData);\r", "+\tint filenameLength = OS.strlen (lpFilename);\r", "+\tbyte [] filenameBytes = new byte [filenameLength];\r", "+\tOS.memmove (filenameBytes, lpFilename, filenameLength);\r", "+\tfullPath = new String (Converter.mbcsToWcs (null, filenameBytes));\r", "+\t\r", "+\t/* Calculate fileName and filterPath */\r", "+\tint separatorIndex = fullPath.indexOf (separator);\r", "+\tint index = separatorIndex;\r", "+\twhile (index != -1) {\r", "+\t\tseparatorIndex = index;\r", "+\t\tindex = fullPath.indexOf (separator, index + 1);\r", "+\t}\r", "+\tfileName = fullPath.substring (separatorIndex + 1, fullPath.length ());\r", "+\tfilterPath = fullPath.substring (0, separatorIndex);\r", "+\tOS.gtk_widget_destroy (callData);\r", "+\treturn 0;\r", "+}\r", "-\r", "-boolean getAnswer() {\r", "-\tString fileNameFromOS = getFileNameFromOS();\r", "-\tint separatorIndex = calculateLastSeparatorIndex(fileNameFromOS);\r", "-\tif (separatorIndex+1 == fileNameFromOS.length()) return false;  // the user selected a directory\r", "-\tfullPath = answer = fileNameFromOS;\r", "-\tfileName = fullPath.substring (separatorIndex + 1, fullPath.length ());\r", "-\tfilterPath = fullPath.substring (0, separatorIndex);\r", "-\treturn true;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd713dedf3898b75eb20ec2d3f5a1056", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "bc634d7232bc02a3b9d3fdc9fc44566487fbc970", "commitAfterChange": "a60d8be544df20ec79b43bb591b7ac60b3452dbc", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 12, "signatureBeforeChange": " void presetChooserDialog ()", "signatureAfterChange": " void presetChooserDialog ()", "diff": ["+void presetChooserDialog () {", "+\t/* MULTI is only valid if the native dialog's action is Open */   ", "+\tif ((style & (SWT.SAVE | SWT.MULTI)) == SWT.MULTI) {", "+\t\tOS.gtk_file_chooser_set_select_multiple (handle, true);", "+\t}", "+\tif (filterPath == null) filterPath = \"\";", "+\tif (fileName == null) fileName = \"\";", "+\tif (filterPath.length () > 0) {", "+\t\tStringBuffer stringBuffer = new StringBuffer ();", "+\t\t/* filename must be a full path */", "+\t\tif (filterPath.charAt (0) != SEPARATOR) {", "+\t\t\tstringBuffer.append (SEPARATOR);", "+\t\t}", "+\t\tstringBuffer.append (filterPath);", "+\t\tif (filterPath.charAt (filterPath.length () - 1) != SEPARATOR) {", "+\t\t\tstringBuffer.append (SEPARATOR);", "+\t\t}", "+\t\tif (fileName.length () > 0) {", "+\t\t\tstringBuffer.append (fileName);", "+\t\t} else {", "+\t\t\t/* go into the specified directory */", "+\t\t\tstringBuffer.append ('.');", "+\t\t}", "+\t\tbyte [] buffer = Converter.wcsToMbcs (null, stringBuffer.toString (), true);", "+\t\tOS.gtk_file_chooser_set_filename (handle, buffer);", "+\t}", "+\tif ((style & SWT.SAVE) != 0 && fileName.length () > 0) {", "+\t\tbyte [] buffer = Converter.wcsToMbcs (null, fileName, true);", "+\t\tOS.gtk_file_chooser_set_current_name (handle, buffer);", "+\t}", "+", "+\t/* Set the extension filters */", "+\tif (filterNames == null) filterNames = new String [0];", "+\tif (filterExtensions == null) filterExtensions = new String [0];", "+\tfor (int i = 0; i < filterExtensions.length; i++) {", "+\t\tif (filterExtensions [i] != null) {", "+\t\t\tint /*long*/ filter = OS.gtk_file_filter_new ();", "+\t\t\tif (filterNames.length > i && filterNames [i] != null) {", "+\t\t\t\tbyte [] name = Converter.wcsToMbcs (null, filterNames [i], true);", "+\t\t\t\tOS.gtk_file_filter_set_name (filter, name);", "+\t\t\t} else {", "+\t\t\t\tbyte [] name = Converter.wcsToMbcs (null, filterExtensions [i], true);", "+\t\t\t\tOS.gtk_file_filter_set_name (filter, name);", "+\t\t\t}", "+\t\t\tint start = 0;", "+\t\t\tint index = filterExtensions [i].indexOf (EXTENSION_SEPARATOR);", "+\t\t\twhile (index != -1) {", "+\t\t\t\tString current = filterExtensions [i].substring (start, index);", "+\t\t\t\tbyte [] filterString = Converter.wcsToMbcs (null, current, true);", "+\t\t\t\tOS.gtk_file_filter_add_pattern (filter, filterString);", "+\t\t\t\tstart = index + 1;", "+\t\t\t\tindex = filterExtensions [i].indexOf (EXTENSION_SEPARATOR, start);", "+\t\t\t}", "+\t\t\tString current = filterExtensions [i].substring (start);", "+\t\t\tbyte [] filterString = Converter.wcsToMbcs (null, current, true);", "+\t\t\tOS.gtk_file_filter_add_pattern (filter, filterString);", "+\t\t\tOS.gtk_file_chooser_add_filter (handle, filter);", "+\t\t}", "+\t}", "+\tfullPath = null;", "+\tfileNames = new String [0];", "+}", "-}", "-void presetChooserDialog () {", "-\t/* MULTI is only valid if the native dialog's action is Open */   ", "-\tif ((style & (SWT.SAVE | SWT.MULTI)) == SWT.MULTI) {", "-\t\tOS.gtk_file_chooser_set_select_multiple (handle, true);", "-\t}", "-\tif (filterPath == null) filterPath = \"\";", "-\tif (fileName == null) fileName = \"\";", "-\tif (filterPath.length () > 0) {", "-\t\tStringBuffer stringBuffer = new StringBuffer ();", "-\t\t/* filename must be a full path */", "-\t\tif (filterPath.charAt (0) != SEPARATOR) {", "-\t\t\tstringBuffer.append (SEPARATOR);", "-\t\t}", "-\t\tstringBuffer.append (filterPath);", "-\t\tif (filterPath.charAt (filterPath.length () - 1) != SEPARATOR) {", "-\t\t\tstringBuffer.append (SEPARATOR);", "-\t\t}", "-\t\tif (fileName.length () > 0) {", "-\t\t\tstringBuffer.append (fileName);", "-\t\t} else {", "-\t\t\t/* go into the specified directory */", "-\t\t\tstringBuffer.append ('.');", "-\t\t}", "-\t\tbyte [] buffer = Converter.wcsToMbcs (null, stringBuffer.toString (), true);", "-\t\tOS.gtk_file_chooser_set_filename (handle, buffer);", "-\t}", "-\tif ((style & SWT.SAVE) != 0 && fileName.length () > 0) {", "-\t\tbyte [] buffer = Converter.wcsToMbcs (null, fileName, true);", "-\t\tOS.gtk_file_chooser_set_current_name (handle, buffer);", "-\t}", "-", "-\t/* Set the extension filters */", "-\tif (filterNames == null) filterNames = new String [0];", "-\tif (filterExtensions == null) filterExtensions = new String [0];", "-\tfor (int i = 0; i < filterExtensions.length; i++) {", "-\t\tif (filterExtensions [i] != null) {", "-\t\t\tbyte [] filterString = Converter.wcsToMbcs (null, filterExtensions [i], true);", "-\t\t\tint /*long*/ filter = OS.gtk_file_filter_new ();", "-\t\t\tOS.gtk_file_filter_add_pattern (filter, filterString);", "-\t\t\tif (filterNames.length > i && filterNames [i] != null) {", "-\t\t\t\tfilterString = Converter.wcsToMbcs (null, filterNames [i], true);", "-\t\t\t}", "-\t\t\tOS.gtk_file_filter_set_name (filter, filterString);", "-\t\t\tOS.gtk_file_chooser_add_filter (handle, filter);", "-\t\t}", "-\t}", "-\tfullPath = null;", "-\tfileNames = new String [0];", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f80f4243c2a4cd43d36bc1540eb2abf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleFactory.java", "commitBeforeChange": "1600566572476d9a59d55b12b53edda457f44a52", "commitAfterChange": "9b8efc09a689dca8137a73eb726757d83f71f8ea", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tint createFactory (byte[] name)", "signatureAfterChange": " \t \tstatic int defineType (byte[] typeName, int parentType)", "diff": ["-\tint createFactory (byte[] name) {", "-\t\tint parent = ATK.g_type_from_name (Converter.wcsToMbcs (null, FACTORY_PARENTTYPE, true));", "-\t\tgTypeInfoCB_base_init  = new Callback (this, \"gTypeInfo_base_init\", 1);", "+\tstatic int defineType (byte[] typeName, int parentType) {", "+\t\tint queryPtr = OS.g_malloc (GTypeQuery.sizeof);", "+\t\tATK.g_type_query (parentType, queryPtr);", "+\t\tGTypeQuery query = new GTypeQuery ();", "+\t\tATK.memmove (query, queryPtr, GTypeQuery.sizeof);", "+\t\tOS.g_free (queryPtr);", "-\t\ttypeInfo.base_init = gTypeInfoCB_base_init.getAddress ();", "-\t\ttypeInfo.class_size = ATK.AtkObjectFactoryClass_sizeof ();", "-\t\ttypeInfo.instance_size = ATK.AtkObjectFactory_sizeof ();", "-\t\thandle = OS.g_malloc (GTypeInfo.sizeof); ", "-\t\tATK.memmove (handle, typeInfo, GTypeInfo.sizeof); ", "-\t\treturn ATK.g_type_register_static (parent, name, handle, 0);", "+\t\ttypeInfo.base_init = GTypeInfo_base_init_type.getAddress ();", "+\t\ttypeInfo.class_size = (short) query.class_size;", "+\t\ttypeInfo.instance_size = (short) query.instance_size;", "+\t\tObjectIfaceDefinition = OS.g_malloc (GTypeInfo.sizeof); ", "+\t\tATK.memmove (ObjectIfaceDefinition, typeInfo, GTypeInfo.sizeof); ", "+\t\tint result = ATK.g_type_register_static (parentType, typeName, ObjectIfaceDefinition, 0);", "+\t\tATK.g_type_add_interface_static (result, AccessibleObject.ATK_COMPONENT_TYPE, ComponentIfaceDefinition);", "+\t\tATK.g_type_add_interface_static (result, AccessibleObject.ATK_ACTION_TYPE, ActionIfaceDefinition);", "+\t\tATK.g_type_add_interface_static (result, AccessibleObject.ATK_SELECTION_TYPE, SelectionIfaceDefinition);", "+\t\tATK.g_type_add_interface_static (result, AccessibleObject.ATK_TEXT_TYPE, TextIfaceDefinition);", "+\t\treturn result;"]}], "num": 56930}
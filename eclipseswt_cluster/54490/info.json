{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c755371ad84d900b9fd42f5b4dc96233", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c0bb89518317060547ddf0c3028892b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "e38f7ba08e4cd9896dddbc5916c5187c2e1b63eb", "commitAfterChange": "7349d1b65ee9a9edeeac8e2e96a33b2c8d655b80", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tint getParentAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getParentAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {axuielementref});", "+\t\t\t// TODO: typeCFTypeRef?... should be AXUIElementRef", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFTypeRef, 4, new int [] {axuielementref});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c4abac557d2b0116d11061241527178", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "267efeba946291455291f7e37b5a9adb5c1006b4", "commitAfterChange": "20492b8023f4da8a65e4db2fb7cb69e8486d81b2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tint getEnabledAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getEnabledAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {control.isEnabled()});", "-\t\treturn OS.noErr;", "+\t\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\tif (code == OS.eventNotHandledErr) {", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {control.isEnabled()});", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5462791d0c6ca8970c5ce09a1cc36f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "db31883b9f41fd00bb5b0a446bfa1b3f53fba5d7", "commitAfterChange": "95bcccfd921c2b52375a1f493e992d80dc6832b5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t \tint getValueAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getValueAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\tint code = userData != OS.eventNotHandledErr ? userData : OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\tcode = OS.noErr;", "-\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {", "+\t\t\t\t\t\tcode = OS.noErr;", "+\t\t\t\t\t} else if (value.equalsIgnoreCase(\"false\")) {", "-\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t\tcode = OS.noErr;", "-\t\t\t\treturn OS.noErr;", "+\t\t\t\tcode = OS.noErr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9fb2bace97bcde00ae78dfaa3a988a4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "db31883b9f41fd00bb5b0a446bfa1b3f53fba5d7", "commitAfterChange": "95bcccfd921c2b52375a1f493e992d80dc6832b5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "diff": ["+\t\tint code = userData; // userData flags whether nextHandler has already been called", "-\t\t\t/* If nextHandler is 0, then it was already called. */", "-\t\t\tif (nextHandler != 0) OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\tif (code == OS.eventNotHandledErr) OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\t\treturn OS.noErr;", "+\t\t\tcode = OS.noErr;", "-\t\treturn OS.eventNotHandledErr;", "+\t\treturn code;"]}], "num": 54490}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ff51968aaaa9328f0d78a69a8b47612", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40d3b66f876c1caa22beb64d46752da2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "a5c20d80e0285a26a2e9e8c9976c541b30282fab", "commitAfterChange": "b76d431a779fdd2091d3d4adbf75cfc8e9615d94", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  LRESULT CDDS_ITEMPOSTPAINT (NMTVCUSTOMDRAW nmcd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_ITEMPOSTPAINT (NMTVCUSTOMDRAW nmcd, int wParam, int lParam)", "diff": ["-\t\t\t\t\t\t\titemRect.right += EXPLORER_EXTRA;", "+\t\t\t\t\t\t\titemRect.right += EXPLORER_EXTRA + 1;", "-\t\t\t\t\t\t\tpClipRect.right = itemRect.right + 1;", "+\t\t\t\t\t\t\tpClipRect.right = itemRect.right;", "+\t\t\t\t\t\t\tif (count > 0 && hwndHeader != 0) {", "+\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "+\t\t\t\t\t\t\t\tpClipRect.right = Math.min (pClipRect.right, nmcd.left + hdItem.cxy);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84e1f0ef4311a92e2a2dc56d5d6807a6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "c05bd5d00c731a6560c4b77b8226822ede36b033", "commitAfterChange": "9ccfc4328be28351dc595f010ead178feef003a1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  LRESULT CDDS_ITEMPREPAINT (NMTVCUSTOMDRAW nmcd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_ITEMPREPAINT (NMTVCUSTOMDRAW nmcd, int wParam, int lParam)", "diff": ["+\tboolean focused = (nmcd.uItemState & OS.CDIS_FOCUS) != 0;", "-\t\t\t\t\tRECT pRect = item.getBounds (index, true, true, false, false, false, hDC);", "-\t\t\t\t\tRECT pClipRect = item.getBounds (index, true, true, false, false, true, hDC);", "-\t\t\t\t\tpRect.left -= EXPLORER_EXTRA;", "-\t\t\t\t\tpRect.right += EXPLORER_EXTRA;", "-\t\t\t\t\tpClipRect.left -= EXPLORER_EXTRA;", "-\t\t\t\t\tpClipRect.right += EXPLORER_EXTRA;", "-\t\t\t\t\tint /*long*/ hTheme = OS.OpenThemeData (handle, Display.TREEVIEW);", "-\t\t\t\t\tint iStateId = selected ? OS.TREIS_SELECTED : OS.TREIS_HOT;", "-\t\t\t\t\tif (OS.GetFocus () != handle && selected && !hot) iStateId = OS.TREIS_SELECTEDNOTFOCUS;", "-\t\t\t\t\tOS.DrawThemeBackground (hTheme, hDC, OS.TVP_TREEITEM, iStateId, pRect, pClipRect);\t", "-\t\t\t\t\tOS.CloseThemeData (hTheme);", "+\t\t\t\t\tif ((style & SWT.FULL_SELECTION) == 0) {", "+\t\t\t\t\t\tRECT pRect = item.getBounds (index, true, true, false, false, false, hDC);", "+\t\t\t\t\t\tRECT pClipRect = item.getBounds (index, true, true, true, false, true, hDC);", "+\t\t\t\t\t\tif (measureEvent != null) {", "+\t\t\t\t\t\t\tpRect.right = Math.min (pClipRect.right, measureEvent.x + measureEvent.width);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tpRect.right += EXPLORER_EXTRA;", "+\t\t\t\t\t\t\tpClipRect.right += EXPLORER_EXTRA;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpRect.left -= EXPLORER_EXTRA;", "+\t\t\t\t\t\tpClipRect.left -= EXPLORER_EXTRA;", "+\t\t\t\t\t\tint /*long*/ hTheme = OS.OpenThemeData (handle, Display.TREEVIEW);", "+\t\t\t\t\t\tint iStateId = selected ? OS.TREIS_SELECTED : OS.TREIS_HOT;", "+\t\t\t\t\t\tif (OS.GetFocus () != handle && selected && !hot) iStateId = OS.TREIS_SELECTEDNOTFOCUS;", "+\t\t\t\t\t\tOS.DrawThemeBackground (hTheme, hDC, OS.TVP_TREEITEM, iStateId, pRect, pClipRect);\t", "+\t\t\t\t\t\tOS.CloseThemeData (hTheme);", "+\t\t\t\t\t}", "-\t\t\tif (measureEvent != null && (style & SWT.FULL_SELECTION) == 0) {", "-\t\t\t\tRECT textRect = item.getBounds (index, true, false, false, false, true, hDC);", "+\t\t\tif (focused && measureEvent != null && (style & SWT.FULL_SELECTION) == 0) {", "+\t\t\t\tRECT textRect = item.getBounds (index, true, explorerTheme, false, false, true, hDC);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cfd102a0850f617d4eaf0fe06cce75e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "b4a2320440164ae72ce51dd2342d464a54f498b9", "commitAfterChange": "84656a6e6ceb9594f856cbee82c381105c177330", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 86, "signatureBeforeChange": "  int tableViewobjectValueForTableColumnrow(int aTableView, int aTableColumn, int rowIndex)", "signatureAfterChange": "  int tableView_objectValueForTableColumn_row(int aTableView, int aTableColumn, int rowIndex)", "diff": ["+int tableView_objectValueForTableColumn_row(int aTableView, int aTableColumn, int rowIndex) {", "+\tTableItem item = items [rowIndex];", "+\tif (checkColumn != null && aTableColumn == checkColumn.id) {", "+\t\tNSNumber value;", "+\t\tif (item.checked && item.grayed) {", "+\t\t\tvalue = NSNumber.numberWithInt(OS.NSMixedState);", "+\t\t} else {", "+\t\t\tvalue = NSNumber.numberWithInt(item.checked ? OS.NSOnState : OS.NSOffState);", "+\t\t}", "+\t\treturn value.id;", "+\t}", "+\tfor (int i=0; i<columnCount; i++) {", "+\t\tif (columns [i].nsColumn.id == aTableColumn) {", "+\t\t\treturn NSString.stringWith(item.getText(i)).id;", "+\t\t}", "+\t}", "+\treturn NSString.stringWith(item.text).id;", "+}", "-", "-int tableViewobjectValueForTableColumnrow(int aTableView, int aTableColumn, int rowIndex) {", "-\tTableItem item = items [rowIndex];", "-\tfor (int i=0; i<columnCount; i++) {", "-\t\tif (columns [i].nsColumn.id == aTableColumn) {", "-\t\t\treturn NSString.stringWith(item.getText(i)).id;", "-\t\t}", "-\t}", "-\treturn NSString.stringWith(item.text).id;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9161f9275b5b1414eb7e45f46ff56091", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "14bb166a3d9b9c0f4b3cc0f7c70730e09595d89a", "commitAfterChange": "65934e9078512ef399dc1e432592b04f62521287", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  LRESULT CDDS_ITEMPREPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_ITEMPREPAINT (int wParam, int lParam)", "diff": ["+\t}", "+\t/*", "+\t* Feature in Windows.  When the tree is disabled, it draws", "+\t* with a gray background over the sort column.  The fix is", "+\t* to fill the background with the sort column color.", "+\t*/", "+\tif (!OS.IsWindowEnabled (handle) && clrSortBk != -1) {", "+\t\tRECT rect = new RECT ();", "+\t\tHDITEM hdItem = new HDITEM ();", "+\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "+\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.left + hdItem.cxy, nmcd.bottom);", "+\t\tfillBackground (hDC, clrSortBk, rect);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7a24fa5ebb5425a404824047ff1e989", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "340ab48f905291cccac5d0162de766f6d2d07f84", "commitAfterChange": "9a981dbda655c135d9b3213371edc45c1fd05824", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "  void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int lParam)", "signatureAfterChange": "  void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int lParam, Event measureEvent)", "diff": ["-void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int /*long*/ lParam) {", "+void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int /*long*/ lParam, Event measureEvent) {", "-\tif (ignoreDrawFocus) {", "-\t\tnmcd.uItemState &= ~OS.CDIS_FOCUS;", "-\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "-\t}", "-\tif (!ignoreDrawHot || (!ignoreDrawSelection && clrSelectionBk != -1)) {", "-\t\tif (explorerTheme) {", "-\t\t\tboolean hot = drawHot;", "-\t\t\tRECT pClipRect = new RECT ();", "-\t\t\tOS.SetRect (pClipRect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\tRECT rect = new RECT ();", "-\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\tint count = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\tint index = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, count - 1, 0);", "-\t\t\t\tRECT headerRect = new RECT ();", "-\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, headerRect);", "-\t\t\t\tOS.MapWindowPoints (hwndHeader, handle, headerRect, 2);", "-\t\t\t\trect.left = 0;", "-\t\t\t\trect.right = headerRect.right;", "-\t\t\t\tpClipRect.left = cellRect.left;", "-\t\t\t\tpClipRect.right += EXPLORER_EXTRA;", "-\t\t\t} else {", "-\t\t\t\trect.right += EXPLORER_EXTRA;", "-\t\t\t\tpClipRect.right += EXPLORER_EXTRA;", "-\t\t\t}", "-\t\t\tint /*long*/ hTheme = OS.OpenThemeData (handle, Display.LISTVIEW);", "-\t\t\tint iStateId = selected ? OS.LISS_SELECTED : OS.LISS_HOT;", "-\t\t\tif (OS.GetFocus () != handle && selected && !hot) iStateId = OS.LISS_SELECTEDNOTFOCUS;", "-\t\t\tOS.DrawThemeBackground (hTheme, hDC, OS.LVP_LISTITEM, iStateId, rect, pClipRect);", "-\t\t\tOS.CloseThemeData (hTheme);", "-\t\t} else {", "-\t\t\tboolean fullText = ((style & SWT.FULL_SELECTION) != 0 || !firstColumn);", "-\t\t\tRECT textRect = item.getBounds ((int)/*64*/nmcd.dwItemSpec, nmcd.iSubItem, true, false, fullText, false, hDC);", "-\t\t\tfillBackground (hDC, clrSelectionBk, textRect);", "+\tfocusRect = null;", "+\tif (!ignoreDrawHot || !ignoreDrawSelection || !ignoreDrawFocus) {", "+\t\tboolean fullText = (style & SWT.FULL_SELECTION) != 0 || !firstColumn;", "+\t\tRECT textRect = item.getBounds ((int)/*64*/nmcd.dwItemSpec, nmcd.iSubItem, true, false, fullText, false, hDC);", "+\t\tif (measureEvent != null && (style & SWT.FULL_SELECTION) == 0) {", "+\t\t\ttextRect.right = Math.min (cellRect.right, measureEvent.x + measureEvent.width);", "+\t\t\tif (!ignoreDrawFocus) focusRect = textRect;", "+\t\tif (explorerTheme) {", "+\t\t\tif (!ignoreDrawHot || (!ignoreDrawSelection && clrSelectionBk != -1)) {", "+\t\t\t\tboolean hot = drawHot;", "+\t\t\t\tRECT pClipRect = new RECT ();", "+\t\t\t\tOS.SetRect (pClipRect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\tint count = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\tint index = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, count - 1, 0);", "+\t\t\t\t\tRECT headerRect = new RECT ();", "+\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, headerRect);", "+\t\t\t\t\tOS.MapWindowPoints (hwndHeader, handle, headerRect, 2);", "+\t\t\t\t\trect.left = 0;", "+\t\t\t\t\trect.right = headerRect.right;", "+\t\t\t\t\tpClipRect.left = cellRect.left;", "+\t\t\t\t\tpClipRect.right += EXPLORER_EXTRA;", "+\t\t\t\t} else {", "+\t\t\t\t\trect.right += EXPLORER_EXTRA;", "+\t\t\t\t\tpClipRect.right += EXPLORER_EXTRA;", "+\t\t\t\t}", "+\t\t\t\tint /*long*/ hTheme = OS.OpenThemeData (handle, Display.LISTVIEW);", "+\t\t\t\tint iStateId = selected ? OS.LISS_SELECTED : OS.LISS_HOT;", "+\t\t\t\tif (OS.GetFocus () != handle && selected && !hot) iStateId = OS.LISS_SELECTEDNOTFOCUS;", "+\t\t\t\tOS.DrawThemeBackground (hTheme, hDC, OS.LVP_LISTITEM, iStateId, rect, pClipRect);", "+\t\t\t\tOS.CloseThemeData (hTheme);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (!ignoreDrawSelection && clrSelectionBk != -1) fillBackground (hDC, clrSelectionBk, textRect);", "+\t\t}", "+\t}", "+\tif (ignoreDrawFocus || focusRect != null) {", "+\t\tnmcd.uItemState &= ~OS.CDIS_FOCUS;", "+\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b76cdc93ccd12524d465d26e99c2a92d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "545180c481c04bddb5f358152056c1461a4a34d1", "commitAfterChange": "9cd26d5223bd03ea08324197722fd8b6203b707d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void drawText (String string, int x, int y, int flags)", "signatureAfterChange": " public void drawText (String string, int x, int y, int flags)", "diff": ["-\tint length = string.length();", "-\tif (length == 0) return;", "-\tint layout = data.layout;", "+\tif (string.length() == 0) return;", "-\tif ((flags & SWT.DRAW_TRANSPARENT) == 0) background = getBackground().handle;", "+\tGdkGCValues values = null;", "+\tif ((flags & SWT.DRAW_TRANSPARENT) == 0) {", "+\t\tvalues = new GdkGCValues();", "+\t\tOS.gdk_gc_get_values(handle, values);", "+\t\tbackground = new GdkColor();", "+\t\tbackground.pixel = values.background_pixel;", "+\t\tint colormap = OS.gdk_colormap_get_system();", "+\t\tOS.gdk_colormap_query_color(colormap, background.pixel, background);", "+\t}", "-\t\tOS.gdk_draw_layout_with_colors(data.drawable, handle, x, y, layout, null, background);", "+\t\tOS.gdk_draw_layout_with_colors(data.drawable, handle, x, y, data.layout, null, background);", "+\t\tint layout = data.layout;", "-\t\tGdkGCValues values = new GdkGCValues();", "-\t\tOS.gdk_gc_get_values(handle, values);", "+\t\tif (values == null) {", "+\t\t\tvalues = new GdkGCValues();", "+\t\t\tOS.gdk_gc_get_values(handle, values);", "+\t\t}"]}], "num": 9342}
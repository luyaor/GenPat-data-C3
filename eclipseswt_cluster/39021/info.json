{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "638529b0723c0006c74544b32755346d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58cd73f0b4c246d40a1476f33f804a7e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "31812241e88b430c97326c9c7a804878842f3cd3", "commitAfterChange": "cbe70f0e6a63783ca5dd76c4fbbc8213a6661e5e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\t\t\t\t\tint charCount = html.length();", "-\t\t\t\t\t\tchar[] chars = new char[charCount];", "-\t\t\t\t\t\thtml.getChars(0, charCount, chars, 0);", "-\t\t\t\t\t\thtml = null;", "-\t\t\t\t\t\tint byteCount = OS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, null, 0, null, null);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Note. Internet Explorer appears to treat the data loaded with ", "-\t\t\t\t\t\t* nsIPersistStreamInit.Load as if it were encoded using the default", "-\t\t\t\t\t\t* local charset.  There does not seem to be an API to set the", "-\t\t\t\t\t\t* desired charset explicitely in this case.  The fix is to", "-\t\t\t\t\t\t* prepend the UTF-8 Byte Order Mark signature to the data.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tbyte[] UTF8BOM = {(byte)0xEF, (byte)0xBB, (byte)0xBF};", "-\t\t\t\t\t\tint\thGlobal = OS.GlobalAlloc(OS.GMEM_FIXED, UTF8BOM.length + byteCount);", "-\t\t\t\t\t\tif (hGlobal != 0) {", "-\t\t\t\t\t\t\tOS.MoveMemory(hGlobal, UTF8BOM, UTF8BOM.length);", "-\t\t\t\t\t\t\tOS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, hGlobal + UTF8BOM.length, byteCount, null, null);\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tint[] ppstm = new int[1];", "-\t\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t\t* Note.  CreateStreamOnHGlobal is called with the flag fDeleteOnRelease.", "-\t\t\t\t\t\t\t* If the call succeeds the buffer hGlobal is freed automatically", "-\t\t\t\t\t\t\t* when the IStream object is released. If the call fails, free the buffer", "-\t\t\t\t\t\t\t* hGlobal.", "-\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\tif (OS.CreateStreamOnHGlobal(hGlobal, true, ppstm) == OS.S_OK) {", "-\t\t\t\t\t\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] {\"Document\"}); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "-\t\t\t\t\t\t\t\tIDispatch dispatchDocument = pVarResult.getDispatch();", "-\t\t\t\t\t\t\t\tint[] ppvObject = new int[1];", "-\t\t\t\t\t\t\t\tint result = dispatchDocument.QueryInterface(COM.IIDIPersistStreamInit, ppvObject);", "-\t\t\t\t\t\t\t\tif (result == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\tIPersistStreamInit persistStreamInit = new IPersistStreamInit(ppvObject[0]);", "-\t\t\t\t\t\t\t\t\tif (persistStreamInit.InitNew() == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Load(ppstm[0]);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tpersistStreamInit.Release();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tpVarResult.dispose();", "+\t\t\t\t\t\tgetDisplay().asyncExec(new Runnable (){", "+\t\t\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\t\t\tif (isDisposed() || html == null) return;", "+\t\t\t\t\t\t\t\tint charCount = html.length();", "+\t\t\t\t\t\t\t\tchar[] chars = new char[charCount];", "+\t\t\t\t\t\t\t\thtml.getChars(0, charCount, chars, 0);", "+\t\t\t\t\t\t\t\thtml = null;", "+\t\t\t\t\t\t\t\tint byteCount = OS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, null, 0, null, null);", "-\t\t\t\t\t\t\t\t* This code is intentionally commented.  The IDispatch obtained from a Variant", "-\t\t\t\t\t\t\t\t* did not increase the reference count for the enclosed interface.", "+\t\t\t\t\t\t\t\t* Note. Internet Explorer appears to treat the data loaded with ", "+\t\t\t\t\t\t\t\t* nsIPersistStreamInit.Load as if it were encoded using the default", "+\t\t\t\t\t\t\t\t* local charset.  There does not seem to be an API to set the", "+\t\t\t\t\t\t\t\t* desired charset explicitely in this case.  The fix is to", "+\t\t\t\t\t\t\t\t* prepend the UTF-8 Byte Order Mark signature to the data.", "-\t\t\t\t\t\t\t\t//dispatchDocument.Release();", "-\t\t\t\t\t\t\t\tIUnknown stream = new IUnknown(ppstm[0]);", "-\t\t\t\t\t\t\t\tstream.Release();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tOS.GlobalFree(hGlobal);", "+\t\t\t\t\t\t\t\tbyte[] UTF8BOM = {(byte)0xEF, (byte)0xBB, (byte)0xBF};", "+\t\t\t\t\t\t\t\tint\thGlobal = OS.GlobalAlloc(OS.GMEM_FIXED, UTF8BOM.length + byteCount);", "+\t\t\t\t\t\t\t\tif (hGlobal != 0) {", "+\t\t\t\t\t\t\t\t\tOS.MoveMemory(hGlobal, UTF8BOM, UTF8BOM.length);", "+\t\t\t\t\t\t\t\t\tOS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, hGlobal + UTF8BOM.length, byteCount, null, null);\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tint[] ppstm = new int[1];", "+\t\t\t\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t\t\t\t* Note.  CreateStreamOnHGlobal is called with the flag fDeleteOnRelease.", "+\t\t\t\t\t\t\t\t\t* If the call succeeds the buffer hGlobal is freed automatically", "+\t\t\t\t\t\t\t\t\t* when the IStream object is released. If the call fails, free the buffer", "+\t\t\t\t\t\t\t\t\t* hGlobal.", "+\t\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\t\tif (OS.CreateStreamOnHGlobal(hGlobal, true, ppstm) == OS.S_OK) {", "+\t\t\t\t\t\t\t\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] {\"Document\"}); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "+\t\t\t\t\t\t\t\t\t\tIDispatch dispatchDocument = pVarResult.getDispatch();", "+\t\t\t\t\t\t\t\t\t\tint[] ppvObject = new int[1];", "+\t\t\t\t\t\t\t\t\t\tint result = dispatchDocument.QueryInterface(COM.IIDIPersistStreamInit, ppvObject);", "+\t\t\t\t\t\t\t\t\t\tif (result == OS.S_OK) {", "+\t\t\t\t\t\t\t\t\t\t\tIPersistStreamInit persistStreamInit = new IPersistStreamInit(ppvObject[0]);", "+\t\t\t\t\t\t\t\t\t\t\tif (persistStreamInit.InitNew() == OS.S_OK) {", "+\t\t\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Load(ppstm[0]);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Release();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tpVarResult.dispose();", "+\t\t\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t\t\t* This code is intentionally commented.  The IDispatch obtained from a Variant", "+\t\t\t\t\t\t\t\t\t\t* did not increase the reference count for the enclosed interface.", "+\t\t\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\t\t\t//dispatchDocument.Release();", "+\t\t\t\t\t\t\t\t\t\tIUnknown stream = new IUnknown(ppstm[0]);", "+\t\t\t\t\t\t\t\t\t\tstream.Release();", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tOS.GlobalFree(hGlobal);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d3a237c032eb0176e7f448427379b48", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/SelectableItemWidget.java", "commitBeforeChange": "02814ae097dd282596b9c1cf9248d1e810d5ac7c", "commitAfterChange": "e677292db6a77de7612393e9766e4c2c598d35a8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void deselectNotify(SelectableItem item)", "signatureAfterChange": " void deselectNotify(final SelectableItem item)", "diff": ["-void deselectNotify(SelectableItem item) {", "-\tEvent event = new Event();", "-", "+void deselectNotify(final SelectableItem item) {", "-\tevent.item = item;", "-\tnotifyListeners(SWT.Selection, event);", "+\tdisplay.asyncExec(new Runnable() {", "+\t\tpublic void run() {", "+\t\t\t// Only send a selection event when the item has not been disposed.", "+\t\t\t// Fixes 1GE6XQA", "+\t\t\tif (item.isDisposed() == false) {", "+\t\t\t\tEvent event = new Event();", "+\t\t\t\tevent.item = item;", "+\t\t\t\tnotifyListeners(SWT.Selection, event);", "+\t\t\t}", "+\t\t}", "+\t});"]}], "num": 39021}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19d6574075a509be6505cda4d2200e11", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e3787382e8209f6a3babeae0eb25523", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "b1a31ab4f172a1a2e228d0d4b5317b0bc24de7aa", "commitAfterChange": "b72bc1d2aeff462f0ad0e8ecfa6bc39ebd385109", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+\t\t\t\tif (functionPtr == 0) {", "+            \t\tbrowser.dispose ();", "+            \t\terror (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\t\t}", "+", "+\t        if (IsXULRunner) {", "+\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+\t\t\t\tptr = C.malloc (size * 2);", "+\t\t\t\tC.memset (ptr, 0, size * 2);", "+\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_NotifyProfile\", true); //$NON-NLS-1$", "+\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+\t\t\t\tint /*long*/ functionPtr = result[0];", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tC.free (functionLoad.function);", "+\t\t\t\tC.free (functionLoad.functionName);", "+\t\t\t\tC.free (ptr);", "+\t\t\t\t/* functionPtr == 0 for xulrunner < 1.9 */", "+\t\t\t\tif (functionPtr != 0) {", "+\t\t\t\t\trc = XPCOM.Call (functionPtr);", "+\t            \tif (rc != XPCOM.NS_OK) {", "+\t            \t\tbrowser.dispose ();", "+\t            \t\terror (rc);", "+\t            \t}", "+\t\t\t\t}", "+\t        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee07ec27752a28b878734e13c191e84f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CoolBarTab.java", "commitBeforeChange": "b644bd3733b275b4738be65b0fafbf75f44e3e93", "commitAfterChange": "8e31d57546de95ba1452e59cfaef2ac0769cc328", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tvoid createExampleWidgets ()", "signatureAfterChange": " \tvoid createExampleWidgets ()", "diff": ["-\t\t/* Compute the widget style */", "+\t\t/* Compute the widget, item, and item toolBar styles */", "+\t\tboolean vertical = false;", "+\t\tif (horizontalButton.getSelection ()) {", "+\t\t\tstyle |= SWT.HORIZONTAL;", "+\t\t\ttoolBarStyle |= SWT.HORIZONTAL;", "+\t\t}", "+\t\tif (verticalButton.getSelection ()) {", "+\t\t\tstyle |= SWT.VERTICAL;", "+\t\t\ttoolBarStyle |= SWT.VERTICAL;", "+\t\t\tvertical = true;", "+\t\t}", "-\t\t/* create the push button toolbar */", "+\t\t/* Create the push button toolbar cool item */", "-\t\tPoint pushSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tpushSize = pushItem.computeSize(pushSize.x, pushSize.y);", "-\t\tpushItem.setSize(pushSize);", "-\t\tpushItem.setMinimumSize(item.getWidth(), pushSize.y);", "+\t\tPoint toolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\tPoint pushSize = pushItem.computeSize(toolBarSize.x, toolBarSize.y);", "+\t\tint minWidth = vertical ? toolBarSize.x : item.getWidth();", "+\t\tint minHeight = vertical ? item.getBounds().height : toolBarSize.y;", "+\t\tpushItem.setMinimumSize(minWidth, minHeight);", "+\t\tpushItem.setPreferredSize(pushSize);", "+\t\tpushItem.setSize(pushSize);", "-\t\t/* create the dropdown toolbar */", "+\t\t/* Create the dropdown toolbar cool item */", "-\t\tPoint dropSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tdropSize = dropDownItem.computeSize(dropSize.x, dropSize.y);", "-\t\tdropDownItem.setSize(dropSize);", "-\t\tdropDownItem.setMinimumSize(item.getWidth(), dropSize.y);", "-\t\t\t\t", "-\t\t/* create the radio button toolbar */", "+\t\ttoolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\tPoint dropSize = dropDownItem.computeSize(toolBarSize.x, toolBarSize.y);", "+\t\tminWidth = vertical ? toolBarSize.x : item.getWidth();", "+\t\tminHeight = vertical ? item.getBounds().height : toolBarSize.y;", "+\t\tdropDownItem.setMinimumSize(minWidth, minHeight);", "+\t\tdropDownItem.setPreferredSize(dropSize);", "+\t\tdropDownItem.setSize(dropSize);", "+", "+\t\t/* Create the radio button toolbar cool item */", "-\t\tPoint radioSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tradioSize = radioItem.computeSize(radioSize.x, radioSize.y);", "-\t\tradioItem.setSize(radioSize);", "-\t\tradioItem.setMinimumSize(item.getWidth(), radioSize.y);", "+\t\ttoolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\tPoint radioSize = radioItem.computeSize(toolBarSize.x, toolBarSize.y);", "+\t\tminWidth = vertical ? toolBarSize.x : item.getWidth();", "+\t\tminHeight = vertical ? item.getBounds().height : toolBarSize.y;", "+\t\tradioItem.setMinimumSize(minWidth, minHeight);", "+\t\tradioItem.setPreferredSize(radioSize);", "+\t\tradioItem.setSize(radioSize);", "-\t\t/* create the check button toolbar */", "+\t\t/* Create the check button toolbar cool item */", "-\t\tPoint checkSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tcheckSize = checkItem.computeSize(checkSize.x, checkSize.y);", "-\t\tcheckItem.setSize(checkSize);", "-\t\tcheckItem.setMinimumSize(item.getWidth(), checkSize.y);", "+\t\ttoolBarSize = toolBar.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\tPoint checkSize = checkItem.computeSize(toolBarSize.x, toolBarSize.y);", "+\t\tminWidth = vertical ? toolBarSize.x : item.getWidth();", "+\t\tminHeight = vertical ? item.getBounds().height : toolBarSize.y;", "+\t\tcheckItem.setMinimumSize(minWidth, minHeight);", "+\t\tcheckItem.setPreferredSize(checkSize);", "+\t\tcheckItem.setSize(checkSize);", "-\t\t/* create the text */", "+\t\t/* Create the text cool item */", "+\t\ttextItem.addSelectionListener (new CoolItemSelectionListener());", "-\t\ttextItem.setSize(textSize);", "-\t\ttextItem.addSelectionListener (new CoolItemSelectionListener());", "-", "-\t\t/* if we have saved state, restore it */", "+\t\ttextItem.setPreferredSize(textSize);", "+\t\ttextItem.setSize(textSize);", "+\t\t\t\t", "+\t\t/* If we have saved state, restore it */", "-\t\t/* add a listener to resize the group box to match the coolbar */", "+\t\t/* Add a listener to resize the group box to match the coolbar */"]}], "num": 62382}
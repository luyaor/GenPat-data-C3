{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c52912b90270293884e51ea9c98cc35", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f10beefc7acd2ff2091e2b33243c8aee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 59, "signatureBeforeChange": " int topHandle ()", "signatureAfterChange": "  void setWindowVisible (boolean visible)", "diff": ["+", "+void setWindowVisible (boolean visible) {", "+\tif (OS.IsWindowVisible (shellHandle) == visible) return;\t", "+\tif (visible) {", "+\t\tif (!resized) {", "+\t\t\tsendEvent (SWT.Resize);", "+\t\t\tif (layout != null) layout.layout (this, false);", "+\t\t}", "+\t\tint inModalKind = OS.kWindowModalityNone;", "+\t\tif ((style & SWT.PRIMARY_MODAL) != 0) inModalKind = OS.kWindowModalityWindowModal;", "+\t\tif ((style & SWT.APPLICATION_MODAL) != 0) inModalKind = OS.kWindowModalityAppModal;", "+\t\tif ((style & SWT.SYSTEM_MODAL) != 0) inModalKind = OS.kWindowModalitySystemModal;", "+\t\tif (inModalKind != OS.kWindowModalityNone) {", "+\t\t\tint inUnavailableWindow = 0;", "+\t\t\tif (parent != null) inUnavailableWindow = OS.GetControlOwner (parent.handle);", "+\t\t\tOS.SetWindowModality (shellHandle, inModalKind, inUnavailableWindow);", "+\t\tOS.ShowWindow (shellHandle);", "+    \tOS.HideWindow (shellHandle);", "+\t\tsendEvent (SWT.Hide);", "+}", "-int topHandle () {", "-\treturn shellHandle;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "409ad8f9bb4f83ad170af7e59b580ea1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5cab2569643885009d09edef4954f0f1cc3554bb", "commitAfterChange": "eca05854d1b4619b606045e7674111329bc5e274", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\tif (!printClient) {", "+\t\t\t\t\tif (!printClient && (style & SWT.FULL_SELECTION) == 0) {", "-\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\tOS.SetTextColor (hDC, getForegroundPixel ());", "+\t\t\t\t\tboolean useColor = OS.IsWindowEnabled (handle);", "+\t\t\t\t\tif (useColor) {", "+\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\t\t\t\t\t\ttvItem.hItem = item.handle;", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {", "+\t\t\t\t\t\t\t\tuseColor = false;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t* Feature in Windows.  When the mouse is pressed and the", "+\t\t\t\t\t\t\t\t* selection is first drawn for a tree, the item is drawn", "+\t\t\t\t\t\t\t\t* selected, but the TVIS_SELECTED bits for the item are", "+\t\t\t\t\t\t\t\t* not set.  When the user moves the mouse slightly and", "+\t\t\t\t\t\t\t\t* a drag and drop operation is not started, the item is", "+\t\t\t\t\t\t\t\t* drawn again and this time TVIS_SELECTED is set.  This", "+\t\t\t\t\t\t\t\t* means that an item that is in a tree that has the style", "+\t\t\t\t\t\t\t\t* TVS_FULLROWSELECT and that also contains colored cells", "+\t\t\t\t\t\t\t\t* will not draw the entire row selected until the user", "+\t\t\t\t\t\t\t\t* moves the mouse.  The fix is to test for the selection", "+\t\t\t\t\t\t\t\t* colors and guess that the item is selected.", "+\t\t\t\t\t\t\t\t* ", "+\t\t\t\t\t\t\t\t* NOTE: This code doesn't work when the foreground and", "+\t\t\t\t\t\t\t\t* background of the tree are set to the selection colors", "+\t\t\t\t\t\t\t\t* but this does not happen in a regular application.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tint clrForeground = OS.GetTextColor (hDC);", "+\t\t\t\t\t\t\t\tif (clrForeground == OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT)) {", "+\t\t\t\t\t\t\t\t\tint clrBackground = OS.GetBkColor (hDC);", "+\t\t\t\t\t\t\t\t\tif (clrBackground == OS.GetSysColor (OS.COLOR_HIGHLIGHT)) {", "+\t\t\t\t\t\t\t\t\t\tuseColor = false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tOS.SetTextColor (hDC, getForegroundPixel ());", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (printClient) {", "-\t\t\t\t\t\t\t\t\t/* Assume that the disabled color is COLOR_BTN_FACE */", "-\t\t\t\t\t\t\t\t\tint clrBackground = OS.IsWindowEnabled (handle) ? getBackgroundPixel () : OS.GetSysColor (OS.COLOR_BTNFACE);", "-\t\t\t\t\t\t\t\t\tdrawBackground (hDC, clrBackground, rect);", "+\t\t\t\t\t\t\t\tif (printClient || (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\t\tdrawBackground (hDC, OS.GetBkColor (hDC), rect);", "-\t\t\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\t\tif (useColor) {", "-\t\t\t\t\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\t\t\t\tif (useColor) {", "-\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\tif (printClient) {", "+\t\t\t\t\t\tif (printClient && (style & SWT.FULL_SELECTION) == 0) {", "+\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\tif (OS.COMCTL32_MAJOR < 6) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tif (OS.COMCTL32_MAJOR < 6 || (style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\t\tif (hItem == item.handle || OS.COMCTL32_MAJOR < 6) {", "+\t\t\t\t\t\t\t\tif (hItem == item.handle) {"]}], "num": 60084}
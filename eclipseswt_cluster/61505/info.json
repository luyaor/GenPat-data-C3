{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aed10ca61e768c49145f6c93192b15ea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20dc9430ad94e5ec9b2796350422bbad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "5e05c860c75fb9386e23dd52fa60db7a593598e0", "commitAfterChange": "82a1c09af233bc8cd6f0c7fc54f4d78ed4a74ece", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "signatureAfterChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "diff": ["-\tint xDisplay = data.display;", "-\tint xScreenNum = OS.XDefaultScreen(xDisplay);", "-\tXGCValues values = new XGCValues();", "-\tint fromColor, toColor;", "-\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS.GCBackground, values);", "-\tfromColor = values.foreground;", "-\ttoColor = values.background;", "+", "+\tRGB backgroundRGB, foregroundRGB;", "+\tbackgroundRGB = getBackground().getRGB();", "+\tforegroundRGB = getForeground().getRGB();", "+", "+\tRGB fromRGB, toRGB;", "+\tfromRGB = foregroundRGB;", "+\ttoRGB   = backgroundRGB;", "-\t\tfinal int t = fromColor;", "-\t\tfromColor = toColor;", "-\t\ttoColor = t;", "+\t\tfromRGB = backgroundRGB;", "+\t\ttoRGB   = foregroundRGB;", "-\tif (fromColor == toColor) {", "-\t\tOS.XFillRectangle(xDisplay, data.drawable, handle, x, y, width, height);", "+\tif (fromRGB.equals(toRGB)) {", "+\t\tfillRectangle(x, y, width, height);", "+\tint xDisplay = data.display;", "+\tint xScreenNum = OS.XDefaultScreen(xDisplay);", "-\tXColor xColor = new XColor();", "-\txColor.pixel = fromColor;", "-\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "-\tfinal RGB fromRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);", "-\txColor.pixel = toColor;", "-\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "-\tfinal RGB toRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1177c21fae94aa999d2a98f0d251695", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "dfd4650fd75100a5a002cab81ff3277b16862845", "commitAfterChange": "d01fac9d213e0fa304edfed85d0f0844e9d59792", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "signatureAfterChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "diff": ["-\tint fromColor = OS.GetTextColor(handle);", "-\tif (fromColor == OS.CLR_INVALID) {", "-\t\tfromColor = OS.GetSysColor(OS.COLOR_WINDOWTEXT);", "-\t}", "-\tint toColor = OS.GetBkColor(handle);", "-\tif (toColor == OS.CLR_INVALID) {", "-\t\ttoColor = OS.GetSysColor(OS.COLOR_WINDOW);", "-\t}", "+", "+\tRGB backgroundRGB, foregroundRGB;", "+\tbackgroundRGB = getBackground().getRGB();", "+\tforegroundRGB = getForeground().getRGB();", "+", "+\tRGB fromRGB, toRGB;", "+\tfromRGB = foregroundRGB;", "+\ttoRGB   = backgroundRGB;", "+", "-\t\tfinal int t = fromColor;", "-\t\tfromColor = toColor;", "-\t\ttoColor = t;", "+\t\tfromRGB = backgroundRGB;", "+\t\ttoRGB   = foregroundRGB;", "-\tint rop2 = 0;", "-\tif (OS.IsWinCE) {", "-\t\trop2 = OS.SetROP2(handle, OS.R2_COPYPEN);", "-\t\tOS.SetROP2(handle, rop2);", "-\t} else {", "-\t\trop2 = OS.GetROP2(handle);", "-\t}", "-\tfinal RGB fromRGB = new RGB(fromColor & 0xff, (fromColor >>> 8) & 0xff, (fromColor >>> 16) & 0xff);", "-\tfinal RGB toRGB = new RGB(toColor & 0xff, (toColor >>> 8) & 0xff, (toColor >>> 16) & 0xff);\t", "-\tif (fromRGB.red == toRGB.red && fromRGB.green == toRGB.green && fromRGB.blue == toRGB.blue) {", "-\t\tif (data.gdipGraphics != 0) { ", "-\t\t\tinitGdip(false, true);", "-\t\t\tGdip.Graphics_FillRectangle(data.gdipGraphics, data.gdipBrush, x, y, width, height);", "-\t\t} else {", "-\t\t\tint dwRop = rop2 == OS.R2_XORPEN ? OS.PATINVERT : OS.PATCOPY;", "-\t\t\tOS.PatBlt(handle, x, y, width, height, dwRop);", "-\t\t}", "+\tif (fromRGB.equals(toRGB)) {", "+\t\tfillRectangle(x, y, width, height);", "-\t\tinitGdip(false, true);", "+\t\tinitGdip();", "-\t\tint rgb = ((fromColor >> 16) & 0xFF) | (fromColor & 0xFF00) | ((fromColor & 0xFF) << 16);", "+\t\tint rgb = ((fromRGB.red & 0xFF) << 16) | ((fromRGB.green & 0xFF) << 8) | (fromRGB.blue & 0xFF);", "-\t\trgb = ((toColor >> 16) & 0xFF) | (toColor & 0xFF00) | ((toColor & 0xFF) << 16);", "+\t\trgb = ((toRGB.red & 0xFF) << 16) | ((toRGB.green & 0xFF) << 8) | (toRGB.blue & 0xFF);", "+\tint rop2 = 0;", "+\tif (OS.IsWinCE) {", "+\t\trop2 = OS.SetROP2(handle, OS.R2_COPYPEN);", "+\t\tOS.SetROP2(handle, rop2);", "+\t} else {", "+\t\trop2 = OS.GetROP2(handle);", "+\t}"]}], "num": 61505}
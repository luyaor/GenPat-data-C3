{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2072cdacb48d0fcf71d6c7f94f05e16d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1a48f45228394f038b6451f4353a0cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolItem.java", "commitBeforeChange": "fa9d13db47077e5bf24c14d29a3c2ce15794ffa5", "commitAfterChange": "987e6ac5714949fe7bda3803900a5243f6f83708", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r public void setControl (Control control)", "signatureAfterChange": "\r public void setControl (Control control)", "diff": ["-\t* it makes the new child visible and hides the old child.  The\r", "-\t* fix is to save and restore the visibility of the controls.\r", "-\t*/\t\t\r", "+\t* it makes the new child visible and hides the old child and\r", "+\t* moves the new child to the top of the Z-order.  The fix is\r", "+\t* to save and restore the visibility and Z-order.\r", "+\t*/\t\r", "+\tint hwndAbove = 0;\r", "+\tif (newControl != null) {\r", "+\t\thwndAbove = OS.GetWindow (hwndChild, OS.GW_HWNDPREV);\r", "+\t}\t\t\r", "+\tif (hwndAbove != 0 && hwndAbove != hwndChild) {\r", "+\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOMOVE | OS.SWP_NOACTIVATE; \r", "+\t\tOS.SetWindowPos (hwndChild, hwndAbove, 0, 0, 0, 0, flags);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76b2e1512e3baae57e184fbf704db0a8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "0f9228e37d88d68865fcb7436fdc2369b8c4269d", "commitAfterChange": "d39c0d60a7dc7a3df4f8a21ab9656d8dd2fc3dfc", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "diff": ["-\t\t\tint threadId = OS.GetWindowThreadProcessId (hwndChild, null);", "+\t\t\tint[] processID = new int[1];", "+\t\t\tint threadId = OS.GetWindowThreadProcessId (hwndChild, processID);", "-\t\t\t\tif (display.msgHook == 0) {", "-\t\t\t\t\tif (!OS.IsWinCE) {", "-\t\t\t\t\t\tdisplay.getMsgCallback = new Callback (display, \"getMsgProc\", 3);", "-\t\t\t\t\t\tdisplay.getMsgProc = display.getMsgCallback.getAddress ();", "-\t\t\t\t\t\tif (display.getMsgProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\t\t\t\tdisplay.msgHook = OS.SetWindowsHookEx (OS.WH_GETMESSAGE, display.getMsgProc, OS.GetLibraryHandle(), threadId);", "+\t\t\t\tif (processID [0] == OS.GetCurrentProcessId()) {", "+\t\t\t\t\tif (display.msgHook == 0) {", "+\t\t\t\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\t\t\t\tdisplay.getMsgCallback = new Callback (display, \"getMsgProc\", 3);", "+\t\t\t\t\t\t\tdisplay.getMsgProc = display.getMsgCallback.getAddress ();", "+\t\t\t\t\t\t\tif (display.getMsgProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\t\t\tdisplay.msgHook = OS.SetWindowsHookEx (OS.WH_GETMESSAGE, display.getMsgProc, OS.GetLibraryHandle(), threadId);", "+\t\t\t\t\t\t\tOS.PostThreadMessage (threadId, OS.WM_NULL, 0, 0);", "+\t\t\t\t\t\t}", "-\t\t\t\tOS.PostThreadMessage (threadId, Display.SWT_RESIZE, hwndChild, lParam);", "+\t\t\t\tint flags = OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE | OS.SWP_ASYNCWINDOWPOS;", "+\t\t\t\tOS.SetWindowPos (hwndChild, 0, 0, 0, lParam & 0xFFFF, lParam >> 16, flags);"]}], "num": 31250}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a37dbfb2d8d99decdb442304197b1485", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c60318d653cc90d9c522b268c2c8a0ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "0ec16a191637037ae868aa23c8c55cf2d8a64f40", "commitAfterChange": "d78a1f304fc5886faf978adcf843b66da4334afd", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int processEvent (int eventNumber, int int0, int int1, int int2)", "signatureAfterChange": "  int processDefaultSelection (int int0, int int1, int int2)", "diff": ["-int processEvent (int eventNumber, int int0, int int1, int int2) {", "-\tif (eventNumber == 0) {", "-\t\tGdkEvent gdkEvent = new GdkEvent ();", "-\t\tOS.memmove (gdkEvent, int0, GdkEvent.sizeof);", "-\t\tswitch (gdkEvent.type) {", "-\t\t\tcase OS.GDK_BUTTON_PRESS:", "-\t\t\tcase OS.GDK_2BUTTON_PRESS: {", "-\t\t\t\tOS.GTK_CLIST_RESYNC_SELECTION (handle);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.GDK_BUTTON_RELEASE: {", "-\t\t\t\t/*", "-\t\t\t\t* Feature in GTK.  When an item is reselected, GTK", "-\t\t\t\t* does not issue notification.  The fix is to detect", "-\t\t\t\t* that the mouse was released over a selected item when", "-\t\t\t\t* no selection signal was set and issue a fake selection", "-\t\t\t\t* event.", "-\t\t\t\t*/", "-\t\t\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\t\t\tif (selected) {", "-\t\t\t\t\t\tdouble[] px = new double [1], py = new double [1];", "-\t\t\t\t\t\tOS.gdk_event_get_coords (int0, px, py);", "-\t\t\t\t\t\tint x = (int) (px[0]), y = (int) (py[0]);", "-\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "-\t\t\t\t\t\tif (OS.gtk_clist_get_selection_info (handle, x, y, row, column) != 0) {", "-\t\t\t\t\t\t\tint list = OS.GTK_CLIST_SELECTION (handle);", "-\t\t\t\t\t\t\tif (list != 0) {", "-\t\t\t\t\t\t\t\tint length = OS.g_list_length (list);", "-\t\t\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\t\t\tif (row [0] == OS.g_list_nth_data (list, i)) {", "-\t\t\t\t\t\t\t\t\t\tpostEvent (SWT.Selection);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tselected = false;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.GDK_FOCUS_CHANGE: {", "-\t\t\t\t/*", "-\t\t\t\t* Bug in GTK.  When an application opens a new modal top level", "-\t\t\t\t* shell from inside the \"select_row\" signal, the GtkCList does not get the", "-\t\t\t\t* mouse up and does not release grabs.  The fix is to release the grabs", "-\t\t\t\t* when focus is lost.", "-\t\t\t\t*/", "-\t\t\t\tGdkEventFocus focusEvent = new GdkEventFocus ();", "-\t\t\t\tOS.memmove (focusEvent, int0, GdkEventFocus.sizeof);", "-\t\t\t\tif (focusEvent.in == 0) {", "-\t\t\t\t\tif (OS.gtk_grab_get_current () == handle) {", "-\t\t\t\t\t\tOS.gtk_grab_remove (handle);", "-\t\t\t\t\t\tOS.gdk_pointer_ungrab (OS.GDK_CURRENT_TIME);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\treturn 1;", "-\t}", "-\treturn super.processEvent (eventNumber, int0, int1, int2);", "+int processDefaultSelection (int int0, int int1, int int2) {", "+\tpostEvent (SWT.DefaultSelection);", "+\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0418d4abade9a689d97a0358c848180d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute (String fileName)", "diff": ["-\tif (OS.VERSION < 0x1040) return launch(fileName);", "-\tint rc = -1;", "-\tint fsRefPtr = OS.NewPtr(fsRef.length);", "-\tif (fsRefPtr != 0) {", "-\t\tOS.memmove(fsRefPtr, fsRef, fsRef.length);", "-\t\tLSApplicationParameters params = new LSApplicationParameters();", "-\t\tparams.version = 0;", "-\t\tparams.flags = 0;", "-\t\tparams.application = fsRefPtr;", "-\t\tif (fileName.length() == 0) {", "-\t\t\trc = OS.LSOpenApplication(params, null);", "-\t\t} else {", "-\t\t\tif (fileName.indexOf(':') == -1) fileName = \"file://\" + fileName;", "-\t\t\tchar[] chars = new char[fileName.length()];", "-\t\t\tfileName.getChars(0, chars.length, chars, 0);", "-\t\t\tint str = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "-\t\t\tif (str != 0) {", "-\t\t\t\tint unscapedStr = OS.CFStringCreateWithCharacters(0, new char[]{'%'}, 1);", "-\t\t\t\tint escapedStr = OS.CFURLCreateStringByAddingPercentEscapes(OS.kCFAllocatorDefault, str, unscapedStr, 0, OS.kCFStringEncodingUTF8);", "-\t\t\t\tif (escapedStr != 0) {", "-\t\t\t\t\tint urls = OS.CFArrayCreateMutable(OS.kCFAllocatorDefault, 1, 0);", "-\t\t\t\t\tif (urls != 0) {", "-\t\t\t\t\t\tint url = OS.CFURLCreateWithString(OS.kCFAllocatorDefault, escapedStr, 0);", "-\t\t\t\t\t\tif (url != 0) {", "-\t\t\t\t\t\t\tOS.CFArrayAppendValue(urls, url);", "-\t\t\t\t\t\t\trc = OS.LSOpenURLsWithRole(urls, OS.kLSRolesAll, 0, params, null, 0);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.CFRelease(urls);", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.CFRelease(escapedStr);", "-\t\t\t\t}", "-\t\t\t\tif (unscapedStr != 0) OS.CFRelease(unscapedStr);", "-\t\t\t\tOS.CFRelease(str);", "-\t\t\t}", "-\t\t}", "-\t\tOS.DisposePtr(fsRefPtr);", "-\t}", "-\treturn rc == OS.noErr;", "+//\tif (OS.VERSION < 0x1040) return launch(fileName);", "+//\tint rc = -1;", "+//\tint fsRefPtr = OS.NewPtr(fsRef.length);", "+//\tif (fsRefPtr != 0) {", "+//\t\tOS.memmove(fsRefPtr, fsRef, fsRef.length);", "+//\t\tLSApplicationParameters params = new LSApplicationParameters();", "+//\t\tparams.version = 0;", "+//\t\tparams.flags = 0;", "+//\t\tparams.application = fsRefPtr;", "+//\t\tif (fileName.length() == 0) {", "+//\t\t\trc = OS.LSOpenApplication(params, null);", "+//\t\t} else {", "+//\t\t\tif (fileName.indexOf(':') == -1) fileName = \"file://\" + fileName;", "+//\t\t\tchar[] chars = new char[fileName.length()];", "+//\t\t\tfileName.getChars(0, chars.length, chars, 0);", "+//\t\t\tint str = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "+//\t\t\tif (str != 0) {", "+//\t\t\t\tint unscapedStr = OS.CFStringCreateWithCharacters(0, new char[]{'%'}, 1);", "+//\t\t\t\tint escapedStr = OS.CFURLCreateStringByAddingPercentEscapes(OS.kCFAllocatorDefault, str, unscapedStr, 0, OS.kCFStringEncodingUTF8);", "+//\t\t\t\tif (escapedStr != 0) {", "+//\t\t\t\t\tint urls = OS.CFArrayCreateMutable(OS.kCFAllocatorDefault, 1, 0);", "+//\t\t\t\t\tif (urls != 0) {", "+//\t\t\t\t\t\tint url = OS.CFURLCreateWithString(OS.kCFAllocatorDefault, escapedStr, 0);", "+//\t\t\t\t\t\tif (url != 0) {", "+//\t\t\t\t\t\t\tOS.CFArrayAppendValue(urls, url);", "+//\t\t\t\t\t\t\trc = OS.LSOpenURLsWithRole(urls, OS.kLSRolesAll, 0, params, null, 0);", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tOS.CFRelease(urls);", "+//\t\t\t\t\t}", "+//\t\t\t\t\tOS.CFRelease(escapedStr);", "+//\t\t\t\t}", "+//\t\t\t\tif (unscapedStr != 0) OS.CFRelease(unscapedStr);", "+//\t\t\t\tOS.CFRelease(str);", "+//\t\t\t}", "+//\t\t}", "+//\t\tOS.DisposePtr(fsRefPtr);", "+//\t}", "+//\treturn rc == OS.noErr;", "+\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a16929e5342e2cf0e570078d026e1ff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "9e1a986dcce75cb0645d030b34be2dfbc464396a", "commitAfterChange": "ebeb50d4f6fbae138a9dae3e5acce14cc17307ea", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void drawString(String string, int x, int y, boolean isTransparent)", "signatureAfterChange": " public void drawString(String string, int x, int y, boolean isTransparent)", "diff": ["-\tif (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);", "-\tif (string == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\t//FIXME - need to avoid delimiter and tabs, background color", "-\tint layout = data.layout;", "-\tbyte[] buffer = Converter.wcsToMbcs(null, string, false);", "-\tOS.pango_layout_set_text(layout, buffer, buffer.length);", "-\tif (!data.xorMode) {", "-\t\tOS.gdk_draw_layout(data.drawable, handle, x, y, layout);", "-\t} else {", "-\t\tint[] w = new int[1], h = new int[1];", "-\t\tOS.pango_layout_get_size(layout, w, h);", "-\t\tint width = OS.PANGO_PIXELS(w[0]);", "-\t\tint height = OS.PANGO_PIXELS(h[0]);", "-\t\tint pixmap = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);", "-\t\tif (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint gdkGC = OS.gdk_gc_new(pixmap);", "-\t\tif (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tGdkColor foreground = new GdkColor();", "-\t\tOS.gdk_gc_set_foreground(gdkGC, foreground);", "-\t\tOS.gdk_draw_rectangle(pixmap, gdkGC, 1, 0, 0, width, height);", "-\t\tGdkGCValues values = new GdkGCValues();", "-\t\tOS.gdk_gc_get_values(handle, values);", "-\t\tforeground.pixel = values.foreground_pixel;", "-\t\tOS.gdk_gc_set_foreground(gdkGC, foreground);", "-\t\tOS.gdk_draw_layout(pixmap, gdkGC, 0, 0, layout);", "-\t\tOS.g_object_unref(gdkGC);", "-\t\tOS.gdk_draw_drawable(data.drawable, handle, pixmap, 0, 0, x, y, width, height);", "-\t\tOS.g_object_unref(pixmap);", "-\t}", "+\tdrawText(string, x, y, isTransparent ? SWT.DRAW_TRANSPARENT : 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78dd7e953d6bd1edd33edaeadfc792c5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "c04918391f5d818ca2d1446c6382e2b059b97bd8", "commitAfterChange": "8ed87e8f4c5b43a4bc84dbb741a860ce17f07d4b", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "  void initCairo()", "signatureAfterChange": "  void initCairo()", "diff": ["-\tif (OS.GTK_VERSION < OS.VERSION(2, 17, 0)) {", "-\t\tlong /*int*/ xDisplay = OS.gdk_x11_display_get_xdisplay(OS.gdk_display_get_default());", "-\t\tlong /*int*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());", "-\t\tlong /*int*/ xDrawable = 0;", "-\t\tint translateX = 0, translateY = 0;", "-\t\tlong /*int*/ drawable = data.drawable;", "-\t\tif (data.image != null) {", "-\t\t\txDrawable = OS.GDK_PIXMAP_XID(drawable);", "-\t\t} else {", "-\t\t\tif (!data.realDrawable) {", "-\t\t\t\tint[] x = new int[1], y = new int[1];", "-\t\t\t\tlong /*int*/ [] real_drawable = new long /*int*/ [1];", "-\t\t\t\tOS.gdk_window_get_internal_paint_info(drawable, real_drawable, x, y);", "-\t\t\t\txDrawable = OS.gdk_x11_drawable_get_xid(real_drawable[0]);", "-\t\t\t\ttranslateX = -x[0];", "-\t\t\t\ttranslateY = -y[0];", "-\t\t\t}", "-\t\t}", "-\t\tint width = 0;", "-\t\tint height = 0;", "-\t\tif (OS.GTK_VERSION >= OS.VERSION(2, 24, 0)) {", "-\t\t\twidth = OS.gdk_window_get_width(data.drawable);", "-\t\t\theight = OS.gdk_window_get_height(data.drawable);", "-\t\t} else {", "-\t\t\tint[] w = new int[1], h = new int[1];", "-\t\t\tOS.gdk_drawable_get_size(drawable, w, h);", "-\t\t\twidth = w[0];", "-\t\t\theight = h[0];", "-\t\t}", "-\t\tlong /*int*/ surface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width, height);", "-\t\tif (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tCairo.cairo_surface_set_device_offset(surface, translateX, translateY);", "-\t\tdata.cairo = cairo = Cairo.cairo_create(surface);", "-\t\tCairo.cairo_surface_destroy(surface);", "-\t} else {", "-\t\tdata.cairo = cairo = OS.gdk_cairo_create(data.drawable);", "-\t}", "+\tdata.cairo = cairo = OS.gdk_cairo_create(data.drawable);"]}], "num": 52289}
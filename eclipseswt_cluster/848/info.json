{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac9df158497df6e85453fe36e50928ed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "016eca1d459cabeac138eecdcd34eaee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "b77986de05bab33a2fe06d4668b09aa4be644a68", "commitAfterChange": "f109ee6a8829d09be16619e7bb1f4c3554d04344", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "  void printWidget (int hwnd, int hdc, GC gc)", "signatureAfterChange": "  void printWidget (int hwnd, int hdc, GC gc)", "diff": ["-\t\tint bits = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\tint bits1 = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\tint bits2 = OS.GetWindowLong (hwnd, OS.GWL_EXSTYLE);", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE | OS.SWP_DRAWFRAME;", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {", "-\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, (bits & ~OS.WS_CHILD) | OS.WS_POPUP);", "-\t\t\tOS.SetParent (hwnd, 0);", "-\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE;", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, (bits1 & ~OS.WS_CHILD) | OS.WS_POPUP);", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_EXSTYLE, bits2 | OS.WS_EX_TOOLWINDOW);", "+\t\t\t}", "+\t\t\tOS.SetParent (hwnd, 0);", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {", "-\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\tif ((bits1 & OS.WS_VISIBLE) == 0) {", "-\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\tif ((bits1 & OS.WS_VISIBLE) == 0) {", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {", "-\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, bits);", "+\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, bits1);", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_EXSTYLE, bits2);", "+\t\t\t}", "-\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOACTIVATE;", "-\t\t\tSetWindowPos (hwnd, hwndInsertAfter, rect1.left, rect1.top, 0, 0, flags);", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOACTIVATE | OS.SWP_DRAWFRAME;", "+\t\t\tSetWindowPos (hwnd, hwndInsertAfter, rect1.left, rect1.top, rect1.right - rect1.left, rect1.bottom - rect1.top, flags);", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9e3d9494444eb18e60ba5a03badb2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f6abf83ae0c88087bb20795446e5861999c785df", "commitAfterChange": "08ad5fbcf2dcc5dad41e05624d651c29c70219ce", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  void printWidget (int hwnd, int hdc, GC gc)", "signatureAfterChange": "  void printWidget (int hwnd, int hdc, GC gc)", "diff": ["+\t\t/*", "+\t\t* Bug in Windows.  When PrintWindow() will only draw that", "+\t\t* portion of a control that is not obscured by the shell.", "+\t\t* The fix is temporarily reparent the window to the desktop,", "+\t\t* call PrintWindow() then reparent the window back.", "+\t\t*/", "+\t\tint /*long*/ hwndParent = OS.GetParent (hwnd);", "+\t\tint /*long*/ hwndShell = hwndParent;", "+\t\twhile (OS.GetParent (hwndShell) != 0) {", "+\t\t\tif (OS.GetWindow (hwndShell, OS.GW_OWNER) != 0) break;", "+\t\t\thwndShell = OS.GetParent (hwndShell);", "+\t\t}", "+\t\tRECT rect1 = new RECT ();", "+\t\tOS.GetWindowRect (hwnd, rect1);", "+\t\tRECT rect2 = new RECT ();", "+\t\tOS.GetWindowRect (hwndShell, rect2);", "+\t\tOS.IntersectRect (rect2, rect1, rect2);", "+\t\tboolean fixPrintWindow = !OS.EqualRect (rect2, rect1);", "+\t\tint bits = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\tif (fixPrintWindow) {", "+\t\t\tint x = OS.GetSystemMetrics (OS.SM_XVIRTUALSCREEN);", "+\t\t\tint y = OS.GetSystemMetrics (OS.SM_YVIRTUALSCREEN);\t", "+\t\t\tint width = OS.GetSystemMetrics (OS.SM_CXVIRTUALSCREEN);", "+\t\t\tint height = OS.GetSystemMetrics (OS.SM_CYVIRTUALSCREEN);", "+\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE | OS.SWP_DRAWFRAME;", "+\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 0, 0);", "+\t\t\tSetWindowPos (hwnd, 0, x + width, y + height, 0, 0, flags);", "+\t\t\tOS.SetParent (hwnd, 0);", "+\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 1, 0);", "+\t\t}", "+\t\tif (fixPrintWindow) {", "+\t\t\tOS.SetParent (hwnd, hwndParent);", "+\t\t\tOS.MapWindowPoints (0, hwndParent, rect1, 2);", "+\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE | OS.SWP_DRAWFRAME;", "+\t\t\tSetWindowPos (hwnd, 0, rect1.left, rect1.top, rect1.right - rect1.left, rect1.bottom - rect1.top, flags);", "+\t\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 0, 0);", "+\t\t\t}", "+\t\t}"]}], "num": 848}
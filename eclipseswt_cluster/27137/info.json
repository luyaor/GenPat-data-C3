{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "476fb84b7eb97a4eb8bac45f998859fe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7afbb92b1104ab85261a036552c9aae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "d496d5a9c7cd5750cf246e3865372a158ce7a36b", "commitAfterChange": "4f652c652f932a4ca466d546ef49a18a356a7ae5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\tboolean gdip = gdipGraphics != 0 && (alpha != 0xFF || data.foregroundPattern != null);", "-\tint /*long*/ clipRgn = 0;", "-\tfloat[] lpXform = null;", "+\tboolean gdip = gdipGraphics != 0;", "-\tif (gdipGraphics != 0 && !gdip) {", "-\t\tint /*long*/ matrix = Gdip.Matrix_new(1, 0, 0, 1, 0, 0);", "-\t\tif (matrix == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tGdip.Graphics_GetTransform(gdipGraphics, matrix);", "-\t\tint /*long*/ identity = gc.identity();", "-\t\tGdip.Matrix_Invert(identity);", "-\t\tGdip.Matrix_Multiply(matrix, identity, Gdip.MatrixOrderAppend);", "-\t\tGdip.Matrix_delete(identity);", "-\t\tif (!Gdip.Matrix_IsIdentity(matrix)) {", "-\t\t\tlpXform = new float[6];", "-\t\t\tGdip.Matrix_GetElements(matrix, lpXform);", "-\t\t}", "-\t\tGdip.Matrix_delete(matrix);", "-\t\tif ((data.style & SWT.MIRRORED) != 0 && lpXform != null) {", "-\t\t\tgdip = true;", "-\t\t\tlpXform = null;", "-\t\t} else {", "-\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "-\t\t\tint /*long*/ rgn = Gdip.Region_new();", "-\t\t\tGdip.Graphics_GetClip(gdipGraphics, rgn);", "-\t\t\tif (!Gdip.Region_IsInfinite(rgn, gdipGraphics)) {", "-\t\t\t\tclipRgn = Gdip.Region_GetHRGN(rgn, gdipGraphics);", "-\t\t\t}", "-\t\t\tGdip.Region_delete(rgn);", "-\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "-\t\t\thdc = Gdip.Graphics_GetHDC(gdipGraphics);", "-\t\t}", "-\t}", "-\t\t}", "-\t\tif (lpXform != null) {", "-\t\t\tOS.SetGraphicsMode(hdc, OS.GM_ADVANCED);", "-\t\t\tOS.SetWorldTransform(hdc, lpXform);", "-\t\t}", "-\t\tif (clipRgn != 0) {", "-\t\t\tOS.SelectClipRgn(hdc, clipRgn);", "-\t\t\tOS.DeleteObject(clipRgn);", "-\tint /*long*/ selBrush = 0, selPen = 0, selBrushFg = 0;", "+\tint /*long*/ selBrush = 0, selPen = 0, selBrushFg = 0, gdipFont = 0, lastHFont = 0;", "-\t\t\t\t\tOS.SelectObject(hdc, getItemFont(run));", "-\t\t\t\t\tint drawRunY = drawY + (baseline - run.ascent);", "+\t\t\t\t\tint /*long*/ hFont = getItemFont(run);", "+\t\t\t\t\tOS.SelectObject(hdc, hFont);", "-\t\t\t\t\t\tOS.BeginPath(hdc);", "-\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, 0, null, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "-\t\t\t\t\t\tOS.EndPath(hdc);", "-\t\t\t\t\t\tint count = OS.GetPath(hdc, null, null, 0);", "-\t\t\t\t\t\tint[] points = new int[count*2];", "-\t\t\t\t\t\tbyte[] types = new byte[count];", "-\t\t\t\t\t\tOS.GetPath(hdc, points, types, count);", "-\t\t\t\t\t\tfor (int typeIndex = 0; typeIndex < types.length; typeIndex++) {", "-\t\t\t\t\t\t\tint newType = 0;", "-\t\t\t\t\t\t\tint type = types[typeIndex] & 0xFF;", "-\t\t\t\t\t\t\tswitch (type & ~OS.PT_CLOSEFIGURE) {", "-\t\t\t\t\t\t\t\tcase OS.PT_MOVETO: newType = Gdip.PathPointTypeStart; break;", "-\t\t\t\t\t\t\t\tcase OS.PT_LINETO: newType = Gdip.PathPointTypeLine; break;", "-\t\t\t\t\t\t\t\tcase OS.PT_BEZIERTO: newType = Gdip.PathPointTypeBezier; break;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((type & OS.PT_CLOSEFIGURE) != 0) newType |= Gdip.PathPointTypeCloseSubpath;", "-\t\t\t\t\t\t\ttypes[typeIndex] = (byte)newType;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tint /*long*/ path = Gdip.GraphicsPath_new(points, types, count, Gdip.FillModeAlternate);", "-\t\t\t\t\t\tif (path == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\t\tint drawRunY = drawY + baseline;", "-\t\t\t\t\t\tint antialias = Gdip.Graphics_GetSmoothingMode(gdipGraphics), textAntialias = 0;", "-\t\t\t\t\t\tint mode = Gdip.Graphics_GetTextRenderingHint(data.gdipGraphics);", "-\t\t\t\t\t\tswitch (mode) {", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSystemDefault: textAntialias = Gdip.SmoothingModeAntiAlias; break;", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSingleBitPerPixel:", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSingleBitPerPixelGridFit: textAntialias = Gdip.SmoothingModeNone; break;", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintAntiAlias:", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintAntiAliasGridFit:", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintClearTypeGridFit: textAntialias = Gdip.SmoothingModeAntiAlias; break;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, textAntialias);", "+\t\t\t\t\t\tPointF pt = new PointF();", "+\t\t\t\t\t\tpt.X = drawX;", "+\t\t\t\t\t\tpt.Y = drawRunY;", "-\t\t\t\t\t\tGdip.Graphics_FillPath(gdipGraphics, brush, path);", "+\t\t\t\t\t\tif (hFont != lastHFont) {", "+\t\t\t\t\t\t\tlastHFont = hFont;", "+\t\t\t\t\t\t\tif (gdipFont != 0) Gdip.Font_delete(gdipFont);", "+\t\t\t\t\t\t\tgdipFont = GC.createGdipFont(hdc, hFont);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tGdip.Graphics_DrawDriverString(gdipGraphics, run.glyphs, run.glyphCount, gdipFont, brush, pt, Gdip.DriverStringOptionsRealizedAdvance, 0);", "-\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, antialias);", "-\t\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, textAntialias);", "-\t\t\t\t\t\t\tGdip.Graphics_FillPath(gdipGraphics, selBrushFg, path);", "+\t\t\t\t\t\t\tGdip.Graphics_DrawDriverString(gdipGraphics, run.glyphs, run.glyphCount, gdipFont, selBrushFg, pt, Gdip.DriverStringOptionsRealizedAdvance, 0);", "-\t\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, antialias);", "-\t\t\t\t\t\tGdip.GraphicsPath_delete(path);", "+\t\t\t\t\t\tint drawRunY = drawY + (baseline - run.ascent);", "+\t\tif (gdipFont != 0) Gdip.Font_delete(gdipFont);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de81ca857539e6792364222de42c46fa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "58383f412ad2510abd15afdf3cb00667e6c434a4", "commitAfterChange": "c53caa95e55e48c3856ff305cfe3f6f8e3107f36", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  RECT drawBorder(boolean advance, int graphics, int x, int y, int lineHeight, int color, int selectionColor, boolean fullSelection, RECT clipRect, RECT rect, int alpha, StyleItem[] line, int index, int selectionStart, int selectionEnd)", "signatureAfterChange": "  RECT drawBorder(int hdc, int x, int y, int lineHeight, StyleItem[] line, int index, int color, int selectionColor, RECT clipRect, RECT pRect, int selectionStart, int selectionEnd)", "diff": ["+", "+RECT drawBorder(int /*long*/ hdc, int x, int y, int lineHeight, StyleItem[] line, int index, int /*long*/ color, int /*long*/ selectionColor, RECT clipRect, RECT pRect, int selectionStart, int selectionEnd) {", "+\tStyleItem run = line[index]; ", "+\tTextStyle style = run.style;", "+\tif (style == null) return null;", "+\tif (style.borderStyle == SWT.NONE) return null;", "+\tclipRect = addClipRect(run, clipRect, pRect, selectionStart, selectionEnd);", "+\tif (index + 1 >= line.length || !style.isAdherentBorder(line[index + 1].style)) {", "+\t\tint left = run.x;", "+\t\tint start = run.start;", "+\t\tint end = run.start + run.length - 1;", "+\t\tfor (int i = index; i > 0 && style.isAdherentBorder(line[i - 1].style); i--) {", "+\t\t\tleft = line[i - 1].x;", "+\t\t\tstart = Math.min(start, line[i - 1].start);", "+\t\t\tend = Math.max(end, line[i - 1].start + line[i - 1].length - 1);", "+\t\t}", "+\t\tboolean hasSelection = selectionStart <= selectionEnd && selectionStart != -1 && selectionEnd != -1;", "+\t\tboolean fullSelection = hasSelection && selectionStart <= start && end <= selectionEnd;", "+\t\tif (style.borderColor != null) {", "+\t\t\tcolor = style.borderColor.handle;", "+\t\t\tclipRect = null;", "+\t\t} else {", "+\t\t\tif (fullSelection) {", "+\t\t\t\tcolor = selectionColor;", "+\t\t\t\tclipRect = null;", "+\t\t\t} else {", "+\t\t\t\tif (style.foreground != null) {", "+\t\t\t\t\tcolor = style.foreground.handle;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tint lineWidth = 1;", "+\t\tint lineStyle = OS.PS_SOLID;", "+\t\tswitch (style.borderStyle) {", "+\t\t\tcase SWT.BORDER_SOLID: break;", "+\t\t\tcase SWT.BORDER_DASH: lineStyle = OS.PS_DASH; break;", "+\t\t\tcase SWT.BORDER_DOT: lineStyle = OS.PS_DOT; break;", "+\t\t}", "+\t\tint /*long*/ oldBrush = OS.SelectObject(hdc, OS.GetStockObject(OS.NULL_BRUSH));", "+\t\tLOGBRUSH logBrush = new LOGBRUSH();", "+\t\tlogBrush.lbStyle = OS.BS_SOLID;", "+\t\tlogBrush.lbColor = /*64*/(int)color;", "+\t\tint /*long*/ newPen = OS.ExtCreatePen(lineStyle | OS.PS_GEOMETRIC, Math.max(1, lineWidth), logBrush, 0, null);", "+\t\tint /*long*/ oldPen = OS.SelectObject(hdc, newPen);", "+\t\tOS.Rectangle(hdc, x + left, y, x + run.x + run.width, y + lineHeight);", "+\t\tOS.SelectObject(hdc, oldPen);", "+\t\tOS.DeleteObject(newPen);", "+\t\tif (clipRect != null) {", "+\t\t\tint state = OS.SaveDC(hdc);", "+\t\t\tif (clipRect.left == -1) clipRect.left = 0;", "+\t\t\tif (clipRect.right == -1) clipRect.right = 0x7ffff;", "+\t\t\tOS.IntersectClipRect(hdc, clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "+\t\t\tlogBrush.lbColor = /*64*/(int)selectionColor;", "+\t\t\tint /*long*/ selPen = OS.ExtCreatePen (lineStyle | OS.PS_GEOMETRIC, Math.max(1, lineWidth), logBrush, 0, null);", "+\t\t\toldPen = OS.SelectObject(hdc, selPen);", "+\t\t\tOS.Rectangle(hdc, x + left, y, x + run.x + run.width, y + lineHeight);", "+\t\t\tOS.RestoreDC(hdc, state);", "+\t\t\tOS.SelectObject(hdc, oldPen);", "+\t\t\tOS.DeleteObject(selPen);", "+\t\t}", "+\t\tOS.SelectObject(hdc, oldBrush);", "+\t\treturn null;", "+\t}", "+\treturn clipRect;", "+}", "-RECT drawBorder(boolean advance, int /*long*/ graphics, int x, int y, int lineHeight, int /*long*/ color, int /*long*/ selectionColor, boolean fullSelection, RECT clipRect, RECT rect, int alpha, StyleItem[] line, int index, int selectionStart, int selectionEnd) {", "-\tStyleItem run = line[index]; ", "-\tTextStyle style = run.style;", "-\tif (style == null) return null;", "-\tif (style.borderStyle == SWT.NONE) return null;", "-\tif (rect != null) {", "-\t\tif (clipRect == null) {", "-\t\t\tclipRect = new RECT ();", "-\t\t\tOS.SetRect(clipRect, -1, rect.top, -1, rect.bottom);", "-\t\t}", "-\t\tboolean isRTL = (orientation & SWT.RIGHT_TO_LEFT) != 0;", "-\t\tif (run.start <= selectionStart && selectionStart <= run.start + run.length) {", "-\t\t\tif (run.analysis.fRTL ^ isRTL) {", "-\t\t\t\tclipRect.right = rect.left;", "-\t\t\t} else {", "-\t\t\t\tclipRect.left = rect.left;", "-\t\t\t}", "-\t\t}", "-\t\tif (run.start <= selectionEnd && selectionEnd <= run.start + run.length) {", "-\t\t\tif (run.analysis.fRTL ^ isRTL) {", "-\t\t\t\tclipRect.left = rect.right;", "-\t\t\t} else {", "-\t\t\t\tclipRect.right = rect.right;", "-\t\t\t}", "-\tif (index + 1 >= line.length || !style.isAdherentBorder(line[index + 1].style)) {", "-\t\tint left = run.x;", "-\t\tfor (int i = index; i > 0 && style.isAdherentBorder(line[i - 1].style); i--) {", "-\t\t\tleft = line[i - 1].x;", "-\t\tif (advance) {", "-\t\t\tint /*long*/ brush = color;", "-\t\t\tint customColor = -1;", "-\t\t\tif (style.borderColor != null) {", "-\t\t\t\tcustomColor = style.borderColor.handle;", "-\t\t\t} else {", "-\t\t\t\tif (style.foreground != null) {", "-\t\t\t\t\tcustomColor = style.foreground.handle;", "-\t\t\t\t}", "-\t\t\t\tif (fullSelection && clipRect == null) {", "-\t\t\t\t\tcustomColor = -1;", "-\t\t\t\t\tbrush = selectionColor;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (customColor != -1) {", "-\t\t\t\tint argb = ((alpha & 0xFF) << 24) | ((customColor >> 16) & 0xFF) | (customColor & 0xFF00) | ((customColor & 0xFF) << 16);", "-\t\t\t\tint /*long*/ gdiColor = Gdip.Color_new(argb); ", "-\t\t\t\tbrush = Gdip.SolidBrush_new(gdiColor);", "-\t\t\t\tGdip.Color_delete(gdiColor);\t", "-\t\t\t}", "-\t\t\tint lineWidth = 1;", "-\t\t\tint lineStyle = Gdip.DashStyleSolid;", "-\t\t\tswitch (style.borderStyle) {", "-\t\t\t\tcase SWT.BORDER_SOLID: break;", "-\t\t\t\tcase SWT.BORDER_DASH: lineStyle = Gdip.DashStyleDash; break;", "-\t\t\t\tcase SWT.BORDER_DOT: lineStyle = Gdip.DashStyleDot; break;", "-\t\t\t}", "-\t\t\tint /*long*/ pen = Gdip.Pen_new(brush, lineWidth);", "-\t\t\tGdip.Pen_SetDashStyle(pen, lineStyle);", "-\t\t\tfloat gdipXOffset = 0.5f, gdipYOffset = 0.5f;", "-\t\t\tGdip.Graphics_TranslateTransform(graphics, gdipXOffset, gdipYOffset, Gdip.MatrixOrderPrepend);", "-\t\t\tif (style.borderColor == null && clipRect != null) {", "-\t\t\t\tint gstate = Gdip.Graphics_Save(graphics);", "-\t\t\t\tif (clipRect.left == -1) clipRect.left = 0;", "-\t\t\t\tif (clipRect.right == -1) clipRect.right = 0x7ffff;", "-\t\t\t\tRect gdipRect = new Rect();", "-\t\t\t\tgdipRect.X = clipRect.left;", "-\t\t\t\tgdipRect.Y = clipRect.top;", "-\t\t\t\tgdipRect.Width = clipRect.right - clipRect.left;", "-\t\t\t\tgdipRect.Height = clipRect.bottom - clipRect.top;", "-\t\t\t\tGdip.Graphics_SetClip(graphics, gdipRect, Gdip.CombineModeExclude);", "-\t\t\t\tGdip.Graphics_DrawRectangle(graphics, pen, x + left, y, run.x + run.width - left - 1, lineHeight - 1);", "-\t\t\t\tGdip.Graphics_Restore(graphics, gstate);", "-\t\t\t\tgstate = Gdip.Graphics_Save(graphics);", "-\t\t\t\tGdip.Graphics_SetClip(graphics, gdipRect, Gdip.CombineModeIntersect);", "-\t\t\t\tint /*long*/ selPen = Gdip.Pen_new(selectionColor, lineWidth);", "-\t\t\t\tGdip.Pen_SetDashStyle(pen, lineStyle);", "-\t\t\t\tGdip.Graphics_DrawRectangle(graphics, selPen, x + left, y, run.x + run.width - left - 1, lineHeight - 1);", "-\t\t\t\tGdip.Pen_delete(selPen);", "-\t\t\t\tGdip.Graphics_Restore(graphics, gstate);", "-\t\t\t} else {", "-\t\t\t\tGdip.Graphics_DrawRectangle(graphics, pen, x + left, y, run.x + run.width - left - 1, lineHeight - 1);", "-\t\t\t}", "-\t\t\tGdip.Graphics_TranslateTransform(graphics, -gdipXOffset, -gdipYOffset, Gdip.MatrixOrderPrepend);", "-\t\t\tGdip.Pen_delete(pen);", "-\t\t\tif (customColor != -1) Gdip.SolidBrush_delete(brush);", "-\t\t\tif (style.borderColor != null) {", "-\t\t\t\tcolor = style.borderColor.handle;", "-\t\t\t\tif (fullSelection && clipRect == null) {", "-\t\t\t\t\tcolor = selectionColor;", "-\t\t\t\t}", "-\t\t\tint lineWidth = 1;", "-\t\t\tint lineStyle = OS.PS_SOLID;", "-\t\t\tswitch (style.borderStyle) {", "-\t\t\t\tcase SWT.BORDER_SOLID: break;", "-\t\t\t\tcase SWT.BORDER_DASH: lineStyle = OS.PS_DASH; break;", "-\t\t\t\tcase SWT.BORDER_DOT: lineStyle = OS.PS_DOT; break;", "-\t\t\t}", "-\t\t\tLOGBRUSH logBrush = new LOGBRUSH();", "-\t\t\tlogBrush.lbStyle = OS.BS_SOLID;", "-\t\t\tlogBrush.lbColor = /*64*/(int)color;", "-\t\t\tint /*long*/ newPen = OS.ExtCreatePen(lineStyle | OS.PS_GEOMETRIC, Math.max(1, lineWidth), logBrush, 0, null);", "-\t\t\tint /*long*/ oldPen = OS.SelectObject(graphics, newPen);", "-\t\t\tint /*long*/ oldBrush = OS.SelectObject(graphics, OS.GetStockObject(OS.NULL_BRUSH));", "-\t\t\tOS.Rectangle(graphics, x + left, y, x + run.x + run.width, y + lineHeight);", "-\t\t\tif (style.borderColor == null && clipRect != null && color != selectionColor) {", "-\t\t\t\tint state = OS.SaveDC(graphics);", "-\t\t\t\tif (clipRect.left == -1) clipRect.left = 0;", "-\t\t\t\tif (clipRect.right == -1) clipRect.right = 0x7ffff;", "-\t\t\t\tOS.IntersectClipRect(graphics, clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "-\t\t\t\tlogBrush.lbColor = /*64*/(int)selectionColor;", "-\t\t\t\tint /*long*/ selPen = OS.ExtCreatePen (lineStyle | OS.PS_GEOMETRIC, Math.max(1, lineWidth), logBrush, 0, null);", "-\t\t\t\tOS.SelectObject(graphics, selPen);", "-\t\t\t\tOS.Rectangle(graphics, x + left, y, x + run.x + run.width, y + lineHeight);", "-\t\t\t\tOS.RestoreDC(graphics, state);", "-\t\t\t\tOS.SelectObject(graphics, newPen);", "-\t\t\t\tOS.DeleteObject(selPen);", "-\t\t\t}", "-\t\t\tOS.SelectObject(graphics, oldBrush);", "-\t\t\tOS.SelectObject(graphics, oldPen);", "-\t\t\tOS.DeleteObject(newPen);"]}], "num": 27137}
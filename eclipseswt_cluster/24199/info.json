{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "286b9657069c70b57493c98133707192", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc3bffb4cf4a81b284e26a57274d412a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "a29647763c8bf689779a1e3a129123ba197016ec", "commitAfterChange": "0f63003b26bc75e2835de5cf2a139c768a53e2a8", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  RECT drawUnderline(int hdc, int x, int baseline, int lineUnderlinePos, int lineBottom, StyleItem[] line, int index, int color, int selectionColor, RECT clipRect, RECT pRect, int selectionStart, int selectionEnd)", "signatureAfterChange": "  RECT drawUnderline(int hdc, int x, int baseline, int lineUnderlinePos, int lineBottom, StyleItem[] line, int index, int color, int selectionColor, RECT clipRect, RECT pRect, int selectionStart, int selectionEnd)", "diff": ["+\t\t\t\tint bottom = style.underlineStyle == SWT.UNDERLINE_DOUBLE ? rect.bottom + run.underlineThickness * 2 : rect.bottom; ", "+\t\t\t\tif (bottom > lineBottom) {", "+\t\t\t\t\tOS.OffsetRect(rect, 0, lineBottom - bottom);", "+\t\t\t\t\tif (clipRect != null) OS.OffsetRect(clipRect, 0, lineBottom - bottom);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19e9c309559413b0a70b9dc53a4f83a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "d7f67e8b48c54b2018c6a5f759c5479dd3e1cfe5", "commitAfterChange": "c83c3ac091bc0c96fc3831473381c286685245e0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void dispose ()", "signatureAfterChange": " public void dispose ()", "diff": ["-\tRectangle parentBounds = parent.getClientArea ();", "+\tRectangle parentBounds = parent.clientArea;", "+\tint nextColumnAlignment = parent.columns.length > 1 ? parent.columns [1].getAlignment () : SWT.LEFT;", "-\t * If column 0 was disposed and if the parent has style CHECK then", "-\t * the new column 0 will change, so explicitly redraw it if it appears to", "-\t * the left of the disposed column in the column order.", "+\t * If column 0 was disposed then the new column 0 must be redrawn if it appears to the", "+\t * left of the disposed column in the column order AND one the following are true:", "+\t * - the parent has style CHECK, since these will now appear in the new column 0", "+\t * - the new column 0 had non-left alignment before the dispose, since the parent will have", "+\t * \tchanged this to LEFT in the call to dispose(true)", "-\tif ((parent.style & SWT.CHECK) != 0 && index == 0) {", "+\tif (index == 0 && ((parent.style & SWT.CHECK) != 0 || nextColumnAlignment != SWT.LEFT)) {", "-\t\t\t\tparent.redraw (newColumn0.getX (), 0, newColumn0.width, parentBounds.height, false);", "+\t\t\t\tint newColumn0x = newColumn0.getX (); ", "+\t\t\t\tparent.redraw (newColumn0x, 0, newColumn0.width, parentBounds.height, false);", "+\t\t\t\t/* if the alignment changed then the header text must be repainted with its new alignment */", "+\t\t\t\tif (nextColumnAlignment != SWT.LEFT && parent.getHeaderVisible () && parent.drawCount == 0) {", "+\t\t\t\t\tparent.header.redraw (newColumn0x, 0, newColumn0.width, parent.header.getClientArea ().height, false);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cd781d84acbbea81aa43bf0017e67d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/win32/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "04669c05ebaeea72cc0f94310dd2f03f2fba1e57", "commitAfterChange": "c8d6607e5d8bd7d80d520e6339aa0eada6a65b18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  static int checkStyle (Shell parent, int style)", "signatureAfterChange": "  static int checkStyle (Shell parent, int style)", "diff": ["+", "-\treturn style;", "+\tif ((style & mask) == 0) {", "+\t\tstyle |= SWT.APPLICATION_MODAL;", "+\t}", "+\tstyle &= ~SWT.MIRRORED;", "+\tif ((style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT)) == 0) {", "+\t\tif (parent != null) {", "+\t\t\tif ((parent.getStyle () & SWT.LEFT_TO_RIGHT) != 0) style |= SWT.LEFT_TO_RIGHT;", "+\t\t\tif ((parent.getStyle () & SWT.RIGHT_TO_LEFT) != 0) style |= SWT.RIGHT_TO_LEFT;", "+\t\t}", "+\t}", "+\treturn checkBits (style, SWT.LEFT_TO_RIGHT, SWT.RIGHT_TO_LEFT, 0, 0, 0, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a45480ca4e0f7ae3f2c27b073f3f5f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "a29647763c8bf689779a1e3a129123ba197016ec", "commitAfterChange": "0f63003b26bc75e2835de5cf2a139c768a53e2a8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  RECT drawUnderlineGDIP (int graphics, int x, int baseline, int lineUnderlinePos, int lineBottom, StyleItem[] line, int index, int color, int selectionColor, RECT clipRect, RECT pRect, int selectionStart, int selectionEnd, int alpha)", "signatureAfterChange": "  RECT drawUnderlineGDIP (int graphics, int x, int baseline, int lineUnderlinePos, int lineBottom, StyleItem[] line, int index, int color, int selectionColor, RECT clipRect, RECT pRect, int selectionStart, int selectionEnd, int alpha)", "diff": ["+\t\t\t\tint bottom = style.underlineStyle == SWT.UNDERLINE_DOUBLE ? rect.bottom + run.underlineThickness * 2 : rect.bottom; ", "+\t\t\t\tif (bottom > lineBottom) {", "+\t\t\t\t\tOS.OffsetRect(rect, 0, lineBottom - bottom);", "+\t\t\t\t}", "+\t\t\t\t\tgdipRect.Y = rect.top;", "+\t\t\t\t\tif (style.underlineStyle == UNDERLINE_IME_THICK) {", "+\t\t\t\t\t\tgdipRect.Height = run.underlineThickness * 2;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (style.underlineStyle == SWT.UNDERLINE_DOUBLE) {", "+\t\t\t\t\t\tgdipRect.Height = run.underlineThickness * 3;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9a6c748524f74616b338143ab4d4274", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "8a9ef840bc86ae2bf34f98752798326225f9d841", "commitAfterChange": "37ab6e99930a6eb0c65b6690b0349f90233e4e96", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 58, "signatureBeforeChange": "  void handleEvent(int evt)", "signatureAfterChange": "  void handleEvent(int evt)", "diff": ["+\tif (typeString.equals(DOMEVENT_FOCUSIN)) {", "+\t\thasNewFocusElement = true;", "+\t\treturn;", "+\t}", "+\tif (typeString.equals(DOMEVENT_FOCUSOUT)) {", "+\t\thasNewFocusElement = false;", "+\t\treturn;", "+\t}", "+", "-\t\tif (!keyEvent.doit) {", "+", "+\t\tboolean doit = keyEvent.doit;", "+\t\t/*", "+\t\t* Bug in Safari.  Attempting to traverse out of Safari backwards (Shift+Tab) leaves", "+\t\t* Safari in a strange state where it no longer has focus but still receives keys.", "+\t\t* The Carbon-based Safari examples have the same problem.  The workaround is to", "+\t\t* only allow forward Tab traversals within the Browser.", "+\t\t*/", "+\t\tif (doit && keyEvent.keyCode == SWT.TAB && (keyEvent.stateMask & SWT.SHIFT) != 0) {", "+\t\t\tdoit = false;", "+\t\t}", "+\t\tif (!doit) {", "+\t\t} else {", "+\t\t\tif (keyEvent.keyCode == SWT.TAB && DOMEVENT_KEYUP.equals(typeString)) {", "+\t\t\t\tif (!hasNewFocusElement) {", "+\t\t\t\t\tbrowser.traverse(SWT.TRAVERSE_TAB_NEXT);", "+\t\t\t\t}", "+\t\t\t\thasNewFocusElement = false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86eb1ea26fa4efaacfebb95e764e0c51", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/WebSite.java", "commitBeforeChange": "647136ddf4768614d99658a624528bafb2469eb5", "commitAfterChange": "b42f3deae13793369b19cd7f6ae257616fcd4739", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "  int Invoke (int dispIdMember, int riid, int lcid, int dwFlags, int pDispParams, int pVarResult, int pExcepInfo, int pArgErr)", "signatureAfterChange": "  int Invoke (int dispIdMember, int riid, int lcid, int dwFlags, int pDispParams, int pVarResult, int pExcepInfo, int pArgErr)", "diff": ["-\tif (dispParams.cArgs != 2) {", "+\tif (dispParams.cArgs != 3) {", "-\tint /*long*/ ptr = dispParams.rgvarg + Variant.sizeof;", "+\tint /*long*/ ptr = dispParams.rgvarg + 2 * Variant.sizeof;", "+\tptr = dispParams.rgvarg + Variant.sizeof;", "+\tvariant = Variant.win32_new (ptr);", "+\tint type = variant.getType ();", "+\tif (type != COM.VT_I4 && type != COM.VT_R8) {", "+\t\tvariant.dispose ();", "+\t\tif (pVarResult != 0) {", "+\t\t\tCOM.MoveMemory (pVarResult, new int /*long*/[] {0}, C.PTR_SIZEOF);", "+\t\t}", "+\t\treturn COM.S_OK;", "+\t}", "+\tlong token = variant.getLong ();", "+\tvariant.dispose ();", "+", "-\tif (function != null) {", "+\tif (function != null && token == function.token) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94889dfa67ff4d76765b97f85e8648ab", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/WinBMPFileFormat.java", "commitBeforeChange": "52e50eddaaed72d8eecc2bdcd9fe014a40ca89f8", "commitAfterChange": "474bfc2c54e178444e0f027b12c214f6b7fad861", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " PaletteData loadPalette(byte[] infoHeader)", "signatureAfterChange": " PaletteData loadPalette(byte[] infoHeader)", "diff": ["-\tif (depth == 16) return new PaletteData(0x7C00, 0x3E0, 0x1F);", "+\tif (depth == 16) {", "+\t\tif (this.compression == 3) {", "+\t\t\ttry {", "+\t\t\t\treturn new PaletteData(inputStream.readInt(), inputStream.readInt(), inputStream.readInt());", "+\t\t\t} catch (IOException e) {", "+\t\t\t\tSWT.error(SWT.ERROR_IO, e);", "+\t\t\t}", "+\t\t}", "+\t\treturn new PaletteData(0x7C00, 0x3E0, 0x1F);", "+\t}", "+\tif (this.compression == 3) {", "+\t\ttry {", "+\t\t\treturn new PaletteData(inputStream.readInt(), inputStream.readInt(), inputStream.readInt());", "+\t\t} catch (IOException e) {", "+\t\t\tSWT.error(SWT.ERROR_IO, e);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f6de140da4e070cd52c0e9253bb42dd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "0a5ce139580f2cfdd7832bcaa6dbbfba4cc58225", "commitAfterChange": "f0d2633c2c6f8c5fb1114f85f4f664ece52dbf75", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  NSAutoreleasePool checkGC (int mask)", "signatureAfterChange": "  NSAutoreleasePool checkGC (int mask)", "diff": ["-\t\t\tNSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f).setStroke();", "+\t\t\tif (data.fg != null) data.fg.release();", "+\t\t\tNSColor fg = data.fg = NSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f);", "+\t\t\tfg.retain();", "+\t\t\tfg.setStroke();", "-\t\t\tNSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f).setFill();", "+\t\t\tif (data.fg != null) data.fg.release();", "+\t\t\tNSColor fg = data.fg = NSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f);", "+\t\t\tfg.retain();", "+\t\t\tfg.setFill();", "-\t\t\tNSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f).setFill();", "+\t\t\tif (data.bg != null) data.bg.release();", "+\t\t\tNSColor bg = data.bg = NSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f);", "+\t\t\tbg.retain();", "+\t\t\tbg.setFill();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fd1d417b98a38015fcb9bcf4c0b25af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "697358ce3235fa7c9f7df6b81c2eaac5ddca47d9", "commitAfterChange": "e1bf9260ea1f50e37be0963527711193b2483e02", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r void init (Device device, FontData fd)", "signatureAfterChange": "\r void init (Device device, FontData fd)", "diff": ["+\tint horizontalResolution = fd.horizontalResolution;\r", "+\tint verticalResolution = fd.verticalResolution;\r", "+\tif (device.setDPI) {\r", "+\t\tPoint dpi = device.getDPI();\r", "+\t\tif (fd.horizontalResolution == 0) fd.horizontalResolution  = dpi.x;\r", "+\t\tif (fd.verticalResolution == 0)\tfd.verticalResolution = dpi.y;\r", "+\t}\r", "+\t\tnewFD.horizontalResolution = fd.horizontalResolution;\r", "+\t\tnewFD.verticalResolution = fd.verticalResolution;\r", "+\tfd.horizontalResolution = horizontalResolution;\r", "+\tfd.verticalResolution = verticalResolution;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f250666c5d265191a0e997781912fe1a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "71956c59494cdb52590fedb7e303112ebd1b75af", "commitAfterChange": "36d6fe1682aa30e102f30c330ada281bc14ba392", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final int hdc, final StyleItem run)", "diff": ["+\tif (run.glyphs == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tif (run.clusters == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tif (run.visAttrs == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tif (run.psc == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tif (run.advances == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tif (run.goffsets == 0) SWT.error(SWT.ERROR_NO_HANDLES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d832fc340428f36459edc5f50137218c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "c738133a2fdbe3d60fd9dfabbfd9e737153e1aa5", "commitAfterChange": "c9992cb98fd2a837c866ff6f32642b9e42588c7e", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public FontMetrics getFontMetrics()", "signatureAfterChange": " public FontMetrics getFontMetrics()", "diff": ["-//\tint fontHandle = _getGCFont();", "-//\tif (fontHandle==0) {", "-//\t\tSWT.error(SWT.ERROR_UNSPECIFIED);", "-//\t}", "-//\treturn FontMetrics.gtk_new(fontHandle);", "-\treturn null;", "+\tint context = data.context;", "+\tint font = OS.pango_context_get_font_description(context);", "+\tint metrics = OS.pango_context_get_metrics(context, font, null);", "+\tFontMetrics fm = new FontMetrics();", "+\tfm.ascent = OS.pango_font_metrics_get_ascent(metrics);", "+\tfm.descent = OS.pango_font_metrics_get_descent(metrics);", "+\tfm.averageCharWidth = OS.pango_font_metrics_get_approximate_char_width(metrics);", "+\tfm.height = fm.ascent + fm.descent;", "+\treturn fm;"]}], "num": 24199}
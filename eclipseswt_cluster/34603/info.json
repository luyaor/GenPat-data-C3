{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2639ea5d918e4d6cbe0dfd4c31dc133d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70468357901c9e4af096d283eff280cf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "ada390d7f7bab25f0f00a6be268d2fac0261a612", "commitAfterChange": "983c5f79217ad0d0e3a8deab1678de7a378defbd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\tif (COMCTL32_MAJOR < 6) {\r", "+\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t} else if (drawCount > 0) {\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t}\t\r", "+\t\t} else {\r", "+\t\t\t/*\r", "+\t\t\t* Feature in Windows.  In version 6.00 of COMCTL32.DLL,\r", "+\t\t\t* the rebar control uses WM_SETREDRAW as a flag to stop\r", "+\t\t\t* layout of the items.  This is a problem because we rely\r", "+\t\t\t* on the rebar to position the items to the determine the\r", "+\t\t\t* preferred height.  The fix is to temporarily turn redraw\r", "+\t\t\t* back on using WM_SETREDRAW so the control will layuout,\r", "+\t\t\t* then turn it off using the DefaultWindowProc () so that\r", "+\t\t\t* nothing will draw and then turn it back on.\r", "+\t\t\t*/\r", "+\t\t\tif (drawCount > 0 && COMCTL32_MAJOR >= 6) {\t\r", "+\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t}\r", "-\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\tOS.ValidateRect (handle, null);\r", "-\t\t}\t\t\r", "+\t\t\tif (COMCTL32_MAJOR < 6) {\r", "+\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t} else if (drawCount > 0) {\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t}\t\r", "+\t\t\tOS.ValidateRect (handle, null);\t\t\t\r", "+\t\t} else {\r", "+\t\t\t/* Feature in Windows.  Turn redraw back on. */\r", "+\t\t\tif (drawCount > 0 && COMCTL32_MAJOR >= 6) {\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbe53f2e4d22108554ac22422b22da73", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "ed1c238f5a90c715845161c91b31d4b1ab96340b", "commitAfterChange": "bcca31454b9302731fd14aa50436025950657f5a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);\r", "-\t\tif (redraw) {\r", "-\t\t\tOS.UpdateWindow (handle);\t\r", "-\t\t\tif (COMCTL32_MAJOR < 6) {\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "-\t\t\t} else if (drawCount > 0) {\r", "+\t\tboolean redraw = false;\r", "+\t\tif (OS.IsWindowVisible (handle)) {\r", "+\t\t\tif (COMCTL32_MAJOR >= 6) {\r", "+\t\t\t\tredraw = true;\r", "+\t\t\t\tOS.UpdateWindow (handle);\r", "-\t\t\t}\t\r", "-\t\t} else {\r", "-\t\t\t/*\r", "-\t\t\t* Feature in Windows.  In version 6.00 of COMCTL32.DLL,\r", "-\t\t\t* the rebar control uses WM_SETREDRAW as a flag to stop\r", "-\t\t\t* layout of the items.  This is a problem because we rely\r", "-\t\t\t* on the rebar to position the items to the determine the\r", "-\t\t\t* preferred height.  The fix is to temporarily turn redraw\r", "-\t\t\t* back on using WM_SETREDRAW so the control will layuout,\r", "-\t\t\t* then turn it off using the DefaultWindowProc () so that\r", "-\t\t\t* nothing will draw and then turn it back on.\r", "-\t\t\t*/\r", "-\t\t\tif (drawCount > 0 && COMCTL32_MAJOR >= 6) {\t\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t} else {\r", "+\t\t\t\tredraw = drawCount == 0;\r", "+\t\t\t\tif (redraw) {\r", "+\t\t\t\t\tOS.UpdateWindow (handle);\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t\t}\r", "-\t\t}\r", "+\t\t}\t\r", "-\t\t\tif (COMCTL32_MAJOR < 6) {\r", "+\t\t\tif (COMCTL32_MAJOR >= 6) {\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t} else {\r", "-\t\t\t} else if (drawCount > 0) {\r", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\t}\t\r", "-\t\t\tOS.ValidateRect (handle, null);\t\t\t\r", "-\t\t} else {\r", "-\t\t\t/* Feature in Windows.  Turn redraw back on. */\r", "-\t\t\tif (drawCount > 0 && COMCTL32_MAJOR >= 6) {\r", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r"]}], "num": 34603}
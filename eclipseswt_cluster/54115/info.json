{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7a3df85b3ae3fdef3ab166c2637b631", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68af51bbeb8970cde0add5df590fe2de", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "commitAfterChange": "8522d0990a935b649fab56f9c19a10881aa0a6a0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public Rectangle computeTrim (int x, int y, int width, int height)", "signatureAfterChange": "\r public Rectangle computeTrim (int x, int y, int width, int height)", "diff": ["-\tint trimWidth = trimWidth (), trimHeight = trimHeight ();\r", "-\ttrim.x -= trimWidth / 2; trim.y -= trimHeight - (trimWidth / 2);\r", "-\ttrim.width += trimWidth; trim.height += trimHeight + imeHeight ();\r", "+\t/*\r", "+\t* Feature in Motif.  There is no way to get the single pixel border\r", "+\t* surrounding a TopLevelShell or a TransientShell. Attempts to set a\r", "+\t* border on either the shell handle or the main window handle fail.\r", "+\t* The fix is to set the border on the client area.  Therefore, the\r", "+\t* border must be added back into the trim.\r", "+\t*/\r", "+\tint border = 0;\r", "+\tif ((style & (SWT.NO_TRIM | SWT.BORDER | SWT.RESIZE)) == 0) {\r", "+\t\tint [] argList = {OS.XmNborderWidth, 0};\r", "+\t\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\t\tborder = argList [1];\r", "+\t}\r", "+\ttrim.x -= trimLeft ();\r", "+\ttrim.y -= trimTop ();\r", "+\ttrim.width += trimWidth () + (border * 2);\r", "+\ttrim.height += trimHeight () + imeHeight () + (border * 2);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "406ec110f8b67398a7ff406c2f090a7a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \r public void dispose ()", "signatureAfterChange": "\r \r public void dispose ()", "diff": ["+\t* Note:  It is valid to attempt to dispose a widget\r", "+\t* more than once.  If this happens, fail silently.\r", "+\t*/\r", "+\tif (!isValidWidget ()) return;\r", "+\r", "+\t/*\r", "-//\t/*\r", "-//\t* Note:  It is valid to attempt to dispose a widget\r", "-//\t* more than once.  If this happens, fail silently.\r", "-//\t*/\r", "-//\tif (!isValidWidget ()) return;\r", "+\r", "+\t/*\r", "+\t* Feature in Motif.  When an override-redirected shell\r", "+\t* is disposed, Motif does not assign a new active top\r", "+\t* level shell.  The parent shell appears to be active,\r", "+\t* but XGetInputFocus returns the root window, not the\r", "+\t* parent.  The fix is to make the parent be the active\r", "+\t* top level shell when the child shell is disposed.\r", "+\t*/\r", "+\tComposite parent = this.parent;\r", "+\tint [] argList = {OS.XmNoverrideRedirect, 0};\r", "+\tOS.XtGetValues (shellHandle, argList, argList.length / 2);\r", "+\tif (parent != null && argList [1] != 0) {\r", "+\t\tShell shell = parent.getShell ();\r", "+\t\tshell.bringToTop ();\r", "+\t}\r", "+\t\r", "+\t/*\r", "+\t* This code intentionally commented.\r", "+\t*/\r"]}], "num": 54115}
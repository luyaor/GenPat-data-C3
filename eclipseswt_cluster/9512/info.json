{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fab2eb00a5b24d08b4b6064abb12d0c1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a055ca1e3b0f190c3ff1c6942ff71a5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/FormLayoutTab.java", "commitBeforeChange": "2cc7d30698448c6df09a70c69839e5a3830f9bc0", "commitAfterChange": "ca8346412189df48223ba59c33b21708729a1c0e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tvoid createChildWidgets ()", "signatureAfterChange": " \tvoid createChildWidgets()", "diff": ["-\tvoid createChildWidgets () {", "+\tvoid createChildWidgets() {", "-\t\tsuper.createChildWidgets ();", "+\t\tsuper.createChildWidgets();", "-\t\ttable.getColumn (LEFT_COL).setWidth (100);", "-\t\ttable.getColumn (RIGHT_COL).setWidth (100);", "-\t\ttable.getColumn (TOP_COL).setWidth (100);", "-\t\ttable.getColumn (BOTTOM_COL).setWidth (100);", "+\t\ttable.getColumn(LEFT_COL).setWidth(100);", "+\t\ttable.getColumn(RIGHT_COL).setWidth(100);", "+\t\ttable.getColumn(TOP_COL).setWidth(100);", "+\t\ttable.getColumn(BOTTOM_COL).setWidth(100);", "-\t\t/* Add TableEditors */\t\t\t", "-\t\tcomboEditor = new TableEditor (table);", "-\t\twidthEditor = new TableEditor (table);", "-\t\theightEditor = new TableEditor (table);", "-\t\tleftEditor = new TableEditor (table);", "-\t\trightEditor = new TableEditor (table);", "-\t\ttopEditor = new TableEditor (table);", "-\t\tbottomEditor = new TableEditor (table);", "-\t\ttable.addMouseListener (new MouseAdapter () {", "+\t\t/* Add TableEditors */", "+\t\tnameEditor = new TableEditor(table);", "+\t\tcomboEditor = new TableEditor(table);", "+\t\twidthEditor = new TableEditor(table);", "+\t\theightEditor = new TableEditor(table);", "+\t\tleftEditor = new TableEditor(table);", "+\t\trightEditor = new TableEditor(table);", "+\t\ttopEditor = new TableEditor(table);", "+\t\tbottomEditor = new TableEditor(table);", "+\t\ttable.addMouseListener(new MouseAdapter() {", "-\t\t\t\tindex = table.getSelectionIndex ();", "-\t\t\t\tPoint pt = new Point (e.x, e.y);", "-                newItem = table.getItem (pt);", "-                if (newItem == null) return;", "-                TableItem oldItem = comboEditor.getItem ();", "-                if (newItem == oldItem || newItem != lastSelected) {", "+\t\t\t\tindex = table.getSelectionIndex();", "+\t\t\t\tPoint pt = new Point(e.x, e.y);", "+                newItem = table.getItem(pt);", "+                if(newItem == null) return;", "+                TableItem oldItem = comboEditor.getItem();", "+                if(newItem == oldItem || newItem != lastSelected) {", "-\t\t\t\ttable.showSelection ();", "+\t\t\t\ttable.showSelection();", "-\t\t\t\tcombo = new CCombo (table, SWT.READ_ONLY);", "-\t\t\t\tcreateComboEditor (combo, comboEditor);", "+\t\t\t\tcombo = new CCombo(table, SWT.READ_ONLY);", "+\t\t\t\tcreateComboEditor(combo, comboEditor);", "-\t\t\t\twidthText = new Text (table, SWT.SINGLE);", "-\t\t\t\twidthText.setText (((String [])data.elementAt (index)) [WIDTH_COL]);", "-\t\t\t\tcreateTextEditor (widthText, widthEditor, WIDTH_COL);", "+\t\t\t\tnameText = new Text(table, SWT.SINGLE);", "+\t\t\t\tSystem.out.println(((String[])data.elementAt(index))[NAME_COL]);", "+\t\t\t\tnameText.setText(((String[])data.elementAt(index))[NAME_COL]);", "+\t\t\t\tcreateTextEditor(nameText, nameEditor, NAME_COL);", "-\t\t\t\theightText = new Text (table, SWT.SINGLE);", "-\t\t\t\theightText.setText (((String [])data.elementAt (index)) [HEIGHT_COL]);", "-\t\t\t\tcreateTextEditor (heightText, heightEditor, HEIGHT_COL);", "+\t\t\t\twidthText = new Text(table, SWT.SINGLE);", "+\t\t\t\twidthText.setText(((String[])data.elementAt (index))[WIDTH_COL]);", "+\t\t\t\tcreateTextEditor(widthText, widthEditor, WIDTH_COL);", "-\t\t\t\tleftAttach = new Button (table, SWT.PUSH);", "-\t\t\t\tleftAttach.setText (LayoutExample.getResourceString (\"Attach_Edit\"));", "+\t\t\t\theightText = new Text(table, SWT.SINGLE);", "+\t\t\t\theightText.setText(((String[])data.elementAt(index))[HEIGHT_COL]);", "+\t\t\t\tcreateTextEditor(heightText, heightEditor, HEIGHT_COL);", "+\t\t\t\t", "+\t\t\t\tleftAttach = new Button(table, SWT.PUSH);", "+\t\t\t\tleftAttach.setText(LayoutExample.getResourceString(\"Attach_Edit\"));", "-\t\t\t\tleftEditor.minimumWidth = leftAttach.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\t\t\tleftEditor.setEditor (leftAttach, newItem, LEFT_COL);", "-\t\t\t\tleftAttach.addSelectionListener (new SelectionAdapter () {", "-\t\t\t\t\tpublic void widgetSelected (SelectionEvent e) {", "-\t\t\t\t\t\tShell shell = tabFolderPage.getShell ();", "-\t\t\t\t\t\tAttachDialog dialog = new AttachDialog (shell);", "-\t\t\t\t\t\tdialog.setText (LayoutExample.getResourceString (\"Left_Attachment\"));", "-\t\t\t\t\t\tdialog.setColumn (LEFT_COL);", "-\t\t\t\t\t\tString attach = dialog.open ();", "-\t\t\t\t\t\tnewItem.setText (LEFT_COL, attach);", "-\t\t\t\t\t\tresetEditors ();", "+\t\t\t\tleftEditor.minimumWidth = leftAttach.computeSize(SWT.DEFAULT, SWT.DEFAULT).x;", "+\t\t\t\tleftEditor.setEditor(leftAttach, newItem, LEFT_COL);", "+\t\t\t\tleftAttach.addSelectionListener(new SelectionAdapter() {", "+\t\t\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\t\t\tShell shell = tabFolderPage.getShell();", "+\t\t\t\t\t\tAttachDialog dialog = new AttachDialog(shell);", "+\t\t\t\t\t\tdialog.setText(LayoutExample.getResourceString (\"Left_Attachment\"));", "+\t\t\t\t\t\tdialog.setColumn(LEFT_COL);", "+\t\t\t\t\t\tString attach = dialog.open();", "+\t\t\t\t\t\tnewItem.setText(LEFT_COL, attach);", "+\t\t\t\t\t\tresetEditors();", "-\t\t\t\trightAttach = new Button (table, SWT.PUSH);", "-\t\t\t\trightAttach.setText (LayoutExample.getResourceString (\"Attach_Edit\"));", "+\t\t\t\trightAttach = new Button(table, SWT.PUSH);", "+\t\t\t\trightAttach.setText(LayoutExample.getResourceString(\"Attach_Edit\"));", "-\t\t\t\trightEditor.minimumWidth = rightAttach.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\t\t\trightEditor.setEditor (rightAttach, newItem, RIGHT_COL);", "-\t\t\t\trightAttach.addSelectionListener (new SelectionAdapter () {", "-\t\t\t\t\tpublic void widgetSelected (SelectionEvent e) {", "-\t\t\t\t\t\tShell shell = tabFolderPage.getShell ();", "-\t\t\t\t\t\tAttachDialog dialog = new AttachDialog (shell);", "-\t\t\t\t\t\tdialog.setText (LayoutExample.getResourceString (\"Right_Attachment\"));", "-\t\t\t\t\t\tdialog.setColumn (RIGHT_COL);", "+\t\t\t\trightEditor.minimumWidth = rightAttach.computeSize(SWT.DEFAULT, SWT.DEFAULT).x;", "+\t\t\t\trightEditor.setEditor(rightAttach, newItem, RIGHT_COL);", "+\t\t\t\trightAttach.addSelectionListener(new SelectionAdapter() {", "+\t\t\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\t\t\tShell shell = tabFolderPage.getShell();", "+\t\t\t\t\t\tAttachDialog dialog = new AttachDialog(shell);", "+\t\t\t\t\t\tdialog.setText(LayoutExample.getResourceString(\"Right_Attachment\"));", "+\t\t\t\t\t\tdialog.setColumn(RIGHT_COL);", "-\t\t\t\t\t\tnewItem.setText (RIGHT_COL, attach);", "-\t\t\t\t\t\tif (newItem.getText (LEFT_COL).endsWith (\")\")) newItem.setText (LEFT_COL, \"\");", "-\t\t\t\t\t\tresetEditors ();", "+\t\t\t\t\t\tnewItem.setText(RIGHT_COL, attach);", "+\t\t\t\t\t\tif (newItem.getText(LEFT_COL).endsWith(\")\")) newItem.setText(LEFT_COL, \"\");", "+\t\t\t\t\t\tresetEditors();", "-\t\t\t\ttopAttach = new Button (table, SWT.PUSH);", "-\t\t\t\ttopAttach.setText (LayoutExample.getResourceString (\"Attach_Edit\"));", "+\t\t\t\ttopAttach = new Button(table, SWT.PUSH);", "+\t\t\t\ttopAttach.setText (LayoutExample.getResourceString(\"Attach_Edit\"));", "-\t\t\t\ttopEditor.minimumWidth = topAttach.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\t\t\ttopEditor.setEditor (topAttach, newItem, TOP_COL);", "-\t\t\t\ttopAttach.addSelectionListener (new SelectionAdapter () {", "-\t\t\t\t\tpublic void widgetSelected (SelectionEvent e) {", "-\t\t\t\t\t\tShell shell = tabFolderPage.getShell ();", "-\t\t\t\t\t\tAttachDialog dialog = new AttachDialog (shell);", "-\t\t\t\t\t\tdialog.setText (LayoutExample.getResourceString (\"Top_Attachment\"));", "-\t\t\t\t\t\tdialog.setColumn (TOP_COL);", "-\t\t\t\t\t\tString attach = dialog.open ();", "-\t\t\t\t\t\tnewItem.setText (TOP_COL, attach);", "-\t\t\t\t\t\tresetEditors ();", "+\t\t\t\ttopEditor.minimumWidth = topAttach.computeSize(SWT.DEFAULT, SWT.DEFAULT).x;", "+\t\t\t\ttopEditor.setEditor(topAttach, newItem, TOP_COL);", "+\t\t\t\ttopAttach.addSelectionListener(new SelectionAdapter() {", "+\t\t\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\t\t\tShell shell = tabFolderPage.getShell();", "+\t\t\t\t\t\tAttachDialog dialog = new AttachDialog(shell);", "+\t\t\t\t\t\tdialog.setText(LayoutExample.getResourceString(\"Top_Attachment\"));", "+\t\t\t\t\t\tdialog.setColumn(TOP_COL);", "+\t\t\t\t\t\tString attach = dialog.open();", "+\t\t\t\t\t\tnewItem.setText(TOP_COL, attach);", "+\t\t\t\t\t\tresetEditors();", "-\t\t\t\tbottomAttach = new Button (table, SWT.PUSH);", "-\t\t\t\tbottomAttach.setText (LayoutExample.getResourceString (\"Attach_Edit\"));", "+\t\t\t\tbottomAttach = new Button(table, SWT.PUSH);", "+\t\t\t\tbottomAttach.setText(LayoutExample.getResourceString(\"Attach_Edit\"));", "-\t\t\t\tbottomEditor.minimumWidth = bottomAttach.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;", "+\t\t\t\tbottomEditor.minimumWidth = bottomAttach.computeSize(SWT.DEFAULT, SWT.DEFAULT).x;", "-\t\t\t\tbottomAttach.addSelectionListener (new SelectionAdapter () {", "-\t\t\t\t\tpublic void widgetSelected (SelectionEvent e) {", "-\t\t\t\t\t\tShell shell = tabFolderPage.getShell ();", "-\t\t\t\t\t\tAttachDialog dialog = new AttachDialog (shell);", "-\t\t\t\t\t\tdialog.setText (LayoutExample.getResourceString (\"Bottom_Attachment\"));", "-\t\t\t\t\t\tdialog.setColumn (BOTTOM_COL);", "-\t\t\t\t\t\tString attach = dialog.open ();", "-\t\t\t\t\t\tnewItem.setText (BOTTOM_COL, attach);", "-\t\t\t\t\t\tif (newItem.getText (TOP_COL).endsWith (\")\")) newItem.setText (TOP_COL, \"\");", "-\t\t\t\t\t\tresetEditors ();", "+\t\t\t\tbottomAttach.addSelectionListener(new SelectionAdapter() {", "+\t\t\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\t\t\tShell shell = tabFolderPage.getShell();", "+\t\t\t\t\t\tAttachDialog dialog = new AttachDialog(shell);", "+\t\t\t\t\t\tdialog.setText(LayoutExample.getResourceString(\"Bottom_Attachment\"));", "+\t\t\t\t\t\tdialog.setColumn(BOTTOM_COL);", "+\t\t\t\t\t\tString attach = dialog.open();", "+\t\t\t\t\t\tnewItem.setText(BOTTOM_COL, attach);", "+\t\t\t\t\t\tif (newItem.getText(TOP_COL).endsWith (\")\")) newItem.setText(TOP_COL, \"\");", "+\t\t\t\t\t\tresetEditors();", "-                for (int i=0; i<table.getColumnCount (); i++) {", "-                \tRectangle rect = newItem.getBounds (i);", "-                    if (rect.contains (pt)) {", "-                    \tswitch (i) {", "+                for (int i=0; i<table.getColumnCount(); i++) {", "+                \tRectangle rect = newItem.getBounds(i);", "+                    if(rect.contains(pt)) {", "+                    \tswitch(i) {", "-                    \t\t\tresetEditors ();", "+                    \t\t\tresetEditors();", "-\t\t\t\t\t\t\t\tcombo.setFocus ();\t", "+\t\t\t\t\t\t\t\tcombo.setFocus();\t", "-\t\t\t\t\t\t\t\twidthText.setFocus ();", "+\t\t\t\t\t\t\t\twidthText.setFocus();", "-\t\t\t\t\t\t\t\theightText.setFocus ();", "+\t\t\t\t\t\t\t\theightText.setFocus();", "-\t\t", "-\t\t/* Add listener to add an element to the table */", "-\t\tadd.addSelectionListener(new SelectionAdapter () {", "-\t\t\tpublic void widgetSelected(SelectionEvent e) {", "-\t\t\t\tTableItem item = new TableItem (table, 0);", "-\t\t\t\tString [] insert = new String [] {", "-\t\t\t\t\tString.valueOf (table.indexOf (item)), \"Button\", \"-1\", \"-1\",", "-\t\t\t\t\t\"0,0 (\" + LayoutExample.getResourceString (\"Default\") + \")\", \"\", ", "-\t\t\t\t\t\"0,0 (\" + LayoutExample.getResourceString (\"Default\") + \")\", \"\"};", "-\t\t\t\titem.setText (insert);", "-\t\t\t\tdata.addElement (insert);", "-\t\t\t\tresetEditors ();", "+\t\t //Add listener to add an element to the table", "+\t\tadd.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {\t\t\t\t", "+\t\t\t\tif(event.detail == SWT.ARROW) {", "+\t\t\t\t\tToolItem item = (ToolItem)event.widget;", "+\t\t\t\t\tToolBar bar = item.getParent();", "+\t\t\t\t\tDisplay display = bar.getDisplay();", "+\t\t\t\t\tShell shell = bar.getShell();", "+\t\t\t\t\tMenu menu = new Menu (shell, SWT.POP_UP);", "+\t\t\t\t\tfor(int i = 0; i < OPTIONS.length; i++) {", "+\t\t\t\t\t\tfinal MenuItem newItem = new MenuItem(menu, SWT.RADIO);", "+\t\t\t\t\t\tnewItem.setText(OPTIONS[i]);\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.addSelectionListener(new SelectionAdapter(){", "+\t\t\t\t\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\t\t\t\t\tMenuItem menuItem = (MenuItem)event.widget;", "+\t\t\t\t\t\t\t\tif(menuItem.getSelection()) {", "+\t\t\t\t\t\t\t\t\tMenu menu  = menuItem.getParent();", "+\t\t\t\t\t\t\t\t\tprevSelected = menu.indexOf(menuItem);", "+\t\t\t\t\t\t\t\t\tTableItem item = new TableItem(table, SWT.NONE);", "+\t\t\t\t\t\t\t\t\tString name = menuItem.getText().toLowerCase() + String.valueOf(table.indexOf (item));", "+\t\t\t\t\t\t\t\t\tString[] insert = new String [] {name, menuItem.getText(),\"-1\", \"-1\",", "+\t\t\t\t\t\t\t\t\t\t\t\"0,0 (\" + LayoutExample.getResourceString (\"Default\") + \")\", \"\", ", "+\t\t\t\t\t\t\t\t\t\t\t\"0,0 (\" + LayoutExample.getResourceString (\"Default\") + \")\", \"\"};", "+\t\t\t\t\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\t\t\t\t\tresetEditors();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});\t\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.setSelection(i == prevSelected);", "+\t\t\t\t\t}", "+\t\t\t\t\tPoint pt = display.map(bar, null, event.x, event.y);", "+\t\t\t\t\tmenu.setLocation(pt.x, pt.y);", "+\t\t\t\t\tmenu.setVisible(true);", "+\t\t\t\t\t", "+\t\t\t\t\twhile(menu != null && !menu.isDisposed() && menu.isVisible()) {", "+\t\t\t\t\t\tif(!display.readAndDispatch()) {", "+\t\t\t\t\t\t\tdisplay.sleep();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tmenu.dispose();", "+\t\t\t\t}else {", "+\t\t\t\t\tString selection = OPTIONS[prevSelected];", "+\t\t\t\t\tTableItem item = new TableItem(table, 0);", "+\t\t\t\t\tString name = selection.toLowerCase() + String.valueOf(table.indexOf(item));", "+\t\t\t\t\tString [] insert = new String [] {name, selection,\"-1\", \"-1\",", "+\t\t\t\t\t\t\t\"0,0 (\" + LayoutExample.getResourceString(\"Default\") + \")\", \"\", ", "+\t\t\t\t\t\t\t\"0,0 (\" + LayoutExample.getResourceString(\"Default\") + \")\", \"\"};", "+\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\tresetEditors();", "+\t\t\t\t}", "-\t\t});", "+\t\t});\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18c968615552c58c296514b38a033a18", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/RowLayoutTab.java", "commitBeforeChange": "2cc7d30698448c6df09a70c69839e5a3830f9bc0", "commitAfterChange": "ca8346412189df48223ba59c33b21708729a1c0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid createChildWidgets ()", "signatureAfterChange": " \tvoid createChildWidgets()", "diff": ["-\tvoid createChildWidgets () {", "+\tvoid createChildWidgets() {", "-\t\tsuper.createChildWidgets ();", "+\t\tsuper.createChildWidgets();", "-\t\t/* Add TableEditors */\t\t\t", "-\t\tcomboEditor = new TableEditor (table);", "-\t\twidthEditor = new TableEditor (table);", "-\t\theightEditor = new TableEditor (table);", "-\t\ttable.addMouseListener (new MouseAdapter () {", "+\t\t/* Add TableEditors */\t\t", "+\t\tnameEditor = new TableEditor(table);", "+\t\tcomboEditor = new TableEditor(table);", "+\t\twidthEditor = new TableEditor(table);", "+\t\theightEditor = new TableEditor(table);", "+\t\ttable.addMouseListener(new MouseAdapter() {", "-\t\t\t\tindex = table.getSelectionIndex ();", "-\t\t\t\tPoint pt = new Point (e.x, e.y);", "-                newItem = table.getItem (pt);", "-                if (newItem == null) return;", "-                TableItem oldItem = comboEditor.getItem ();", "-                if (newItem == oldItem || newItem != lastSelected) {", "+\t\t\t\tindex = table.getSelectionIndex();", "+\t\t\t\tPoint pt = new Point(e.x, e.y);", "+                newItem = table.getItem(pt);", "+                if(newItem == null) return;", "+                TableItem oldItem = comboEditor.getItem();", "+                if(newItem == oldItem || newItem != lastSelected) {", "-\t\t\t\ttable.showSelection ();", "-\t\t\t\t", "+\t\t\t\ttable.showSelection ();\t\t\t\t", "-\t\t\t\twidthText = new Text (table, SWT.SINGLE);", "-\t\t\t\twidthText.setText (((String [])data.elementAt (index)) [WIDTH_COL]);", "-\t\t\t\tcreateTextEditor (widthText, widthEditor, WIDTH_COL);", "+\t\t\t\tnameText = new Text(table, SWT.SINGLE);", "+\t\t\t\tnameText.setText(((String[])data.elementAt(index))[NAME_COL]);", "+\t\t\t\tcreateTextEditor(nameText, nameEditor, NAME_COL);", "-\t\t\t\theightText = new Text (table, SWT.SINGLE);", "-\t\t\t\theightText.setText (((String [])data.elementAt (index)) [HEIGHT_COL]);", "-\t\t\t\tcreateTextEditor (heightText, heightEditor, HEIGHT_COL);", "+\t\t\t\twidthText = new Text(table, SWT.SINGLE);", "+\t\t\t\twidthText.setText(((String[])data.elementAt(index))[WIDTH_COL]);", "+\t\t\t\tcreateTextEditor(widthText, widthEditor, WIDTH_COL);", "+\t\t\t\t", "+\t\t\t\theightText = new Text(table, SWT.SINGLE);", "+\t\t\t\theightText.setText(((String[])data.elementAt(index))[HEIGHT_COL]);", "+\t\t\t\tcreateTextEditor(heightText, heightEditor, HEIGHT_COL);", "-                for (int i=0; i<table.getColumnCount (); i++) {", "-                \tRectangle rect = newItem.getBounds (i);", "-                    if (rect.contains (pt)) {", "-                    \tswitch (i) {", "+                for(int i=0; i<table.getColumnCount(); i++) {", "+                \tRectangle rect = newItem.getBounds(i);", "+                    if(rect.contains(pt)) {", "+                    \tswitch(i) {", "+                    \t\tcase NAME_COL :", "+                    \t\t\tnameText.setFocus();", "-\t\t\t\t\t\t\t\tcombo.setFocus ();\t", "+\t\t\t\t\t\t\t\tcombo.setFocus();\t", "-\t\t\t\t\t\t\t\twidthText.setFocus ();", "+\t\t\t\t\t\t\t\twidthText.setFocus();", "-\t\t\t\t\t\t\t\theightText.setFocus ();", "+\t\t\t\t\t\t\t\theightText.setFocus();", "-\t\t\t\t\t\t\t\tresetEditors ();", "+\t\t\t\t\t\t\t\tresetEditors();", "-\t\t/* Add listener to add an element to the table */", "-\t\tadd.addSelectionListener(new SelectionAdapter () {", "-\t\t\tpublic void widgetSelected(SelectionEvent e) {", "-\t\t\t\tTableItem item = new TableItem (table, 0);", "-\t\t\t\tString [] insert = new String [] { ", "-\t\t\t\t\tString.valueOf (table.indexOf (item)),", "-\t\t\t\t\t\"Button\", \"-1\", \"-1\"};", "-\t\t\t\titem.setText (insert);", "-\t\t\t\tdata.addElement (insert);", "-\t\t\t\tresetEditors ();", "+\t\t //Add listener to add an element to the table", "+\t\tadd.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {\t\t\t\t", "+\t\t\t\tif(event.detail == SWT.ARROW) {", "+\t\t\t\t\tToolItem item = (ToolItem)event.widget;", "+\t\t\t\t\tToolBar bar = item.getParent();", "+\t\t\t\t\tDisplay display = bar.getDisplay();", "+\t\t\t\t\tShell shell = bar.getShell();", "+\t\t\t\t\tMenu menu = new Menu (shell, SWT.POP_UP);", "+\t\t\t\t\tfor(int i = 0; i < OPTIONS.length; i++) {", "+\t\t\t\t\t\tfinal MenuItem newItem = new MenuItem(menu, SWT.RADIO);", "+\t\t\t\t\t\tnewItem.setText(OPTIONS[i]);\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.addSelectionListener (new SelectionAdapter(){", "+\t\t\t\t\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\t\t\t\t\tMenuItem menuItem = (MenuItem)event.widget;", "+\t\t\t\t\t\t\t\tif (menuItem.getSelection()) {", "+\t\t\t\t\t\t\t\t\tMenu menu  = menuItem.getParent();", "+\t\t\t\t\t\t\t\t\tprevSelected = menu.indexOf(menuItem);", "+\t\t\t\t\t\t\t\t\tTableItem item = new TableItem(table, SWT.NONE);", "+\t\t\t\t\t\t\t\t\tString name = menuItem.getText().toLowerCase() + String.valueOf(table.indexOf (item));", "+\t\t\t\t\t\t\t\t\tString[] insert = new String[] {name, menuItem.getText(), \"-1\", \"-1\"};", "+\t\t\t\t\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\t\t\t\t\tresetEditors();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});\t\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.setSelection(i == prevSelected);", "+\t\t\t\t\t}", "+\t\t\t\t\tPoint pt = display.map(bar, null, event.x, event.y);", "+\t\t\t\t\tmenu.setLocation(pt.x, pt.y);", "+\t\t\t\t\tmenu.setVisible(true);", "+\t\t\t\t\t", "+\t\t\t\t\twhile(menu != null && !menu.isDisposed() && menu.isVisible()) {", "+\t\t\t\t\t\tif(!display.readAndDispatch()) {", "+\t\t\t\t\t\t\tdisplay.sleep();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tmenu.dispose();", "+\t\t\t\t}else {", "+\t\t\t\t\tString selection = OPTIONS[prevSelected];", "+\t\t\t\t\tTableItem item = new TableItem(table, 0);", "+\t\t\t\t\tString name = selection.toLowerCase() + String.valueOf (table.indexOf(item));", "+\t\t\t\t\tString[] insert = new String[] {name, selection, \"-1\", \"-1\"};", "+\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\tresetEditors();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f2508f15d6533f28efe93a1b955cc4f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/GridLayoutTab.java", "commitBeforeChange": "2cc7d30698448c6df09a70c69839e5a3830f9bc0", "commitAfterChange": "ca8346412189df48223ba59c33b21708729a1c0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid createChildWidgets ()", "signatureAfterChange": " \tvoid createChildWidgets()", "diff": ["-\tvoid createChildWidgets () {", "+\tvoid createChildWidgets() {", "-\t\tfinal TraverseListener traverseListener = new TraverseListener () {", "-\t\t\tpublic void keyTraversed (TraverseEvent e) {", "-\t\t\t\tif (e.detail == SWT.TRAVERSE_RETURN || e.detail == SWT.TRAVERSE_TAB_NEXT)", "-\t\t\t\t\tresetEditors ();", "-\t\t\t\tif (e.detail == SWT.TRAVERSE_ESCAPE)", "-\t\t\t\t\tdisposeEditors ();", "+\t\tfinal TraverseListener traverseListener = new TraverseListener() {", "+\t\t\tpublic void keyTraversed(TraverseEvent e) {", "+\t\t\t\tif(e.detail == SWT.TRAVERSE_RETURN || e.detail == SWT.TRAVERSE_TAB_NEXT)", "+\t\t\t\t\tresetEditors();", "+\t\t\t\tif(e.detail == SWT.TRAVERSE_ESCAPE)", "+\t\t\t\t\tdisposeEditors();", "-\t\tsuper.createChildWidgets ();", "+\t\tsuper.createChildWidgets();", "-\t\tcomboEditor = new TableEditor (table);", "-\t\twidthEditor = new TableEditor (table);", "-\t\theightEditor = new TableEditor (table);", "-\t\tvAlignEditor = new TableEditor (table);", "-\t\thAlignEditor = new TableEditor (table);", "-\t\thIndentEditor = new TableEditor (table);", "-\t\thSpanEditor = new TableEditor (table);", "-\t\tvSpanEditor = new TableEditor (table);", "-\t\thGrabEditor = new TableEditor (table);", "-\t\tvGrabEditor = new TableEditor (table);", "-\t\ttable.addMouseListener (new MouseAdapter () {", "+\t\tnameEditor = new TableEditor(table);", "+\t\tcomboEditor = new TableEditor(table);", "+\t\twidthEditor = new TableEditor(table);", "+\t\theightEditor = new TableEditor(table);", "+\t\tvAlignEditor = new TableEditor(table);", "+\t\thAlignEditor = new TableEditor(table);", "+\t\thIndentEditor = new TableEditor(table);", "+\t\thSpanEditor = new TableEditor(table);", "+\t\tvSpanEditor = new TableEditor(table);", "+\t\thGrabEditor = new TableEditor(table);", "+\t\tvGrabEditor = new TableEditor(table);", "+\t\ttable.addMouseListener(new MouseAdapter() {", "-\t\t\t\tindex = table.getSelectionIndex ();", "-\t\t\t\tPoint pt = new Point (e.x, e.y);", "-                newItem = table.getItem (pt);", "-                if (newItem == null) return;", "-                TableItem oldItem = comboEditor.getItem ();", "-                if (newItem == oldItem || newItem != lastSelected) {", "+\t\t\t\tindex = table.getSelectionIndex();", "+\t\t\t\tPoint pt = new Point(e.x, e.y);", "+                newItem = table.getItem(pt);", "+                if(newItem == null) return;", "+                TableItem oldItem = comboEditor.getItem();", "+                if(newItem == oldItem || newItem != lastSelected) {", "-\t\t\t\ttable.showSelection ();", "+\t\t\t\ttable.showSelection();", "-\t\t\t\tcombo = new CCombo (table, SWT.READ_ONLY);", "-\t\t\t\tcreateComboEditor (combo, comboEditor);", "+\t\t\t\tnameText = new Text(table, SWT.SINGLE);", "+\t\t\t\tnameText.setText(((String [])data.elementAt(index))[NAME_COL]);", "+\t\t\t\tcreateTextEditor(nameText, nameEditor, NAME_COL);", "-\t\t\t\twidthText = new Text (table, SWT.SINGLE);", "-\t\t\t\twidthText.setText (((String [])data.elementAt (index)) [WIDTH_COL]);", "-\t\t\t\tcreateTextEditor (widthText, widthEditor, WIDTH_COL);", "+\t\t\t\tcombo = new CCombo(table, SWT.READ_ONLY);", "+\t\t\t\tcreateComboEditor(combo, comboEditor);", "+\t\t\t\t\t\t\t\t", "+\t\t\t\twidthText = new Text(table, SWT.SINGLE);", "+\t\t\t\twidthText.setText(((String [])data.elementAt(index))[WIDTH_COL]);", "+\t\t\t\tcreateTextEditor(widthText, widthEditor, WIDTH_COL);", "-\t\t\t\theightText = new Text (table, SWT.SINGLE);", "-\t\t\t\theightText.setText (((String [])data.elementAt (index)) [HEIGHT_COL]);", "-\t\t\t\tcreateTextEditor (heightText, heightEditor, HEIGHT_COL);", "-\t\t\t\tString [] alignValues = new String [] {\"BEGINNING\",\"CENTER\",\"END\",\"FILL\"};", "-\t\t\t\thAlign = new CCombo (table, SWT.NONE);", "-\t\t\t\thAlign.setItems (alignValues);", "-\t\t\t\thAlign.setText (newItem.getText (HALIGN_COL));", "+\t\t\t\theightText = new Text(table, SWT.SINGLE);", "+\t\t\t\theightText.setText(((String[])data.elementAt(index))[HEIGHT_COL]);", "+\t\t\t\tcreateTextEditor(heightText, heightEditor, HEIGHT_COL);", "+\t\t\t\tString[] alignValues = new String[] {\"BEGINNING\",\"CENTER\",\"END\",\"FILL\"};", "+\t\t\t\thAlign = new CCombo(table, SWT.NONE);", "+\t\t\t\thAlign.setItems(alignValues);", "+\t\t\t\thAlign.setText(newItem.getText(HALIGN_COL));", "-\t\t\t\thAlignEditor.setEditor (hAlign, newItem, HALIGN_COL);", "-\t\t\t\thAlign.addTraverseListener (traverseListener);", "+\t\t\t\thAlignEditor.setEditor(hAlign, newItem, HALIGN_COL);", "+\t\t\t\thAlign.addTraverseListener(traverseListener);", "-\t\t\t\tvAlign = new CCombo (table, SWT.NONE);", "-\t\t\t\tvAlign.setItems (alignValues);", "-\t\t\t\tvAlign.setText (newItem.getText (VALIGN_COL));", "+\t\t\t\tvAlign = new CCombo(table, SWT.NONE);", "+\t\t\t\tvAlign.setItems(alignValues);", "+\t\t\t\tvAlign.setText(newItem.getText(VALIGN_COL));", "-\t\t\t\tvAlignEditor.setEditor (vAlign, newItem, VALIGN_COL);", "-\t\t\t\tvAlign.addTraverseListener (traverseListener);", "+\t\t\t\tvAlignEditor.setEditor(vAlign, newItem, VALIGN_COL);", "+\t\t\t\tvAlign.addTraverseListener(traverseListener);", "-\t\t\t\thIndent = new Text (table, SWT.SINGLE);", "-\t\t\t\thIndent.setText (((String [])data.elementAt (index)) [HINDENT_COL]);", "-\t\t\t\tcreateTextEditor (hIndent, hIndentEditor, HINDENT_COL);", "+\t\t\t\thIndent = new Text(table, SWT.SINGLE);", "+\t\t\t\thIndent.setText(((String[])data.elementAt(index))[HINDENT_COL]);", "+\t\t\t\tcreateTextEditor(hIndent, hIndentEditor, HINDENT_COL);", "-\t\t\t\thSpan = new Text (table, SWT.SINGLE);", "+\t\t\t\thSpan = new Text(table, SWT.SINGLE);", "-\t\t\t\tvSpan.setText (((String [])data.elementAt (index)) [VSPAN_COL]);", "-\t\t\t\tcreateTextEditor (vSpan, vSpanEditor, VSPAN_COL);", "+\t\t\t\tvSpan.setText(((String[])data.elementAt(index))[VSPAN_COL]);", "+\t\t\t\tcreateTextEditor(vSpan, vSpanEditor, VSPAN_COL);", "-\t\t\t\tString [] boolValues = new String [] {\"false\",\"true\"};", "-\t\t\t\thGrab = new CCombo (table, SWT.NONE);", "-\t\t\t\thGrab.setItems (boolValues);", "-\t\t\t\thGrab.setText (newItem.getText (HGRAB_COL));", "+\t\t\t\tString[] boolValues = new String[] {\"false\",\"true\"};", "+\t\t\t\thGrab = new CCombo(table, SWT.NONE);", "+\t\t\t\thGrab.setItems(boolValues);", "+\t\t\t\thGrab.setText(newItem.getText (HGRAB_COL));", "-\t\t\t\thGrabEditor.setEditor (hGrab, newItem, HGRAB_COL);", "-\t\t\t\thGrab.addTraverseListener (traverseListener);", "+\t\t\t\thGrabEditor.setEditor(hGrab, newItem, HGRAB_COL);", "+\t\t\t\thGrab.addTraverseListener(traverseListener);", "-\t\t\t\tvGrab = new CCombo (table, SWT.NONE);", "-\t\t\t\tvGrab.setItems (boolValues);", "-\t\t\t\tvGrab.setText (newItem.getText (VGRAB_COL));", "+\t\t\t\tvGrab = new CCombo(table, SWT.NONE);", "+\t\t\t\tvGrab.setItems(boolValues);", "+\t\t\t\tvGrab.setText(newItem.getText (VGRAB_COL));", "-\t\t\t\tvGrabEditor.setEditor (vGrab, newItem, VGRAB_COL);", "-\t\t\t\tvGrab.addTraverseListener (traverseListener);", "+\t\t\t\tvGrabEditor.setEditor(vGrab, newItem, VGRAB_COL);", "+\t\t\t\tvGrab.addTraverseListener(traverseListener);", "-                for (int i=0; i<table.getColumnCount (); i++) {", "-                \tRectangle rect = newItem.getBounds (i);", "-                    if (rect.contains (pt)) {", "+                for(int i=0; i<table.getColumnCount(); i++) {", "+                \tRectangle rect = newItem.getBounds(i);", "+                    if(rect.contains(pt)) {", "+                    \t\tcase NAME_COL:", "+                    \t\t\tnameText.setFocus();", "+                    \t\t\tbreak;", "-\t\t\t\t\t\t\t\tcombo.setFocus ();\t", "+\t\t\t\t\t\t\t\tcombo.setFocus();\t", "-\t\t\t\t\t\t\t\twidthText.setFocus ();", "+\t\t\t\t\t\t\t\twidthText.setFocus();", "-\t\t\t\t\t\t\t\theightText.setFocus ();", "+\t\t\t\t\t\t\t\theightText.setFocus();", "-\t\t\t\t\t\t\t\thAlign.setFocus ();", "+\t\t\t\t\t\t\t\thAlign.setFocus();", "-\t\t\t\t\t\t\t\tvAlign.setFocus ();", "+\t\t\t\t\t\t\t\tvAlign.setFocus();", "-\t\t\t\t\t\t\t\thIndent.setFocus ();", "+\t\t\t\t\t\t\t\thIndent.setFocus();", "-\t\t\t\t\t\t\t\thSpan.setFocus ();", "+\t\t\t\t\t\t\t\thSpan.setFocus();", "-\t\t\t\t\t\t\t\tvSpan.setFocus ();", "+\t\t\t\t\t\t\t\tvSpan.setFocus();", "-\t\t\t\t\t\t\t\thGrab.setFocus ();", "+\t\t\t\t\t\t\t\thGrab.setFocus();", "-\t\t\t\t\t\t\t\tvGrab.setFocus ();", "+\t\t\t\t\t\t\t\tvGrab.setFocus();", "-\t\t\t\t\t\t\t\tresetEditors ();", "+\t\t\t\t\t\t\t\tresetEditors();", "-\t\t/* Add listener to add an element to the table */", "-\t\tadd.addSelectionListener(new SelectionAdapter () {", "-\t\t\tpublic void widgetSelected(SelectionEvent e) {", "-\t\t\t\tTableItem item = new TableItem (table, 0);", "-\t\t\t\tString [] insert = new String [] { ", "-\t\t\t\t\tString.valueOf (table.indexOf (item)), \"Button\",", "-\t\t\t\t\t\"-1\",\"-1\",\"BEGINNING\",\"CENTER\",", "-\t\t\t\t\t\"0\",\"1\",\"1\",\"false\",\"false\"};", "-\t\t\t\titem.setText (insert);", "-\t\t\t\tdata.addElement (insert);", "-\t\t\t\tresetEditors ();", "+\t\tadd.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {\t\t\t\t", "+\t\t\t\tif(event.detail == SWT.ARROW) {", "+\t\t\t\t\tToolItem item = (ToolItem)event.widget;", "+\t\t\t\t\tToolBar bar = item.getParent();", "+\t\t\t\t\tDisplay display = bar.getDisplay();", "+\t\t\t\t\tShell shell = bar.getShell();", "+\t\t\t\t\tMenu menu = new Menu(shell, SWT.POP_UP);", "+\t\t\t\t\tfor(int i = 0; i < OPTIONS.length; i++) {", "+\t\t\t\t\t\tfinal MenuItem newItem = new MenuItem(menu, SWT.RADIO);", "+\t\t\t\t\t\tnewItem.setText(OPTIONS[i]);\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.addSelectionListener(new SelectionAdapter(){", "+\t\t\t\t\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\t\t\t\t\tMenuItem menuItem = (MenuItem)event.widget;", "+\t\t\t\t\t\t\t\tif(menuItem.getSelection()) {", "+\t\t\t\t\t\t\t\t\tMenu menu  = menuItem.getParent();", "+\t\t\t\t\t\t\t\t\tprevSelected = menu.indexOf(menuItem);", "+\t\t\t\t\t\t\t\t\tTableItem item = new TableItem(table, SWT.NONE);", "+\t\t\t\t\t\t\t\t\tString name = menuItem.getText().toLowerCase() + String.valueOf(table.indexOf(item));", "+\t\t\t\t\t\t\t\t\tString[] insert = new String[] {name, menuItem.getText(),", "+\t\t\t\t\t\t\t\t\t\t\t\"-1\",\"-1\",\"BEGINNING\",\"CENTER\",", "+\t\t\t\t\t\t\t\t\t\t\t\"0\",\"1\",\"1\",\"false\",\"false\"};", "+\t\t\t\t\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\t\t\t\t\tresetEditors ();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});\t\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.setSelection(i == prevSelected);", "+\t\t\t\t\t}", "+\t\t\t\t\tPoint pt = display.map(bar, null, event.x, event.y);", "+\t\t\t\t\tmenu.setLocation(pt.x, pt.y);", "+\t\t\t\t\tmenu.setVisible(true);\t\t\t\t\t", "+\t\t\t\t\twhile (menu != null && !menu.isDisposed() && menu.isVisible()) {", "+\t\t\t\t\t\tif (!display.readAndDispatch()) {", "+\t\t\t\t\t\t\tdisplay.sleep();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tmenu.dispose();", "+\t\t\t\t} else {", "+\t\t\t\t\tString selection = OPTIONS[prevSelected];", "+\t\t\t\t\tTableItem item = new TableItem(table, 0);", "+\t\t\t\t\tString name = selection.toLowerCase() + String.valueOf(table.indexOf(item));", "+\t\t\t\t\tString[] insert = new String[] {name, selection,", "+\t\t\t\t\t\t\t\"-1\",\"-1\",\"BEGINNING\",\"CENTER\",", "+\t\t\t\t\t\t\t\"0\",\"1\",\"1\",\"false\",\"false\"};", "+\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\tresetEditors();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a77706d916a548621619785ed1dc1ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/FillLayoutTab.java", "commitBeforeChange": "2cc7d30698448c6df09a70c69839e5a3830f9bc0", "commitAfterChange": "ca8346412189df48223ba59c33b21708729a1c0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid createChildWidgets ()", "signatureAfterChange": " \tvoid createChildWidgets()", "diff": ["-\tvoid createChildWidgets () {", "+\tvoid createChildWidgets() {", "-\t\tsuper.createChildWidgets ();", "+\t\tsuper.createChildWidgets();", "-\t\tcomboEditor = new TableEditor (table);", "-\t\ttable.addSelectionListener (new SelectionAdapter() {", "-\t\t\tpublic void widgetSelected(SelectionEvent e) {", "-\t\t\t\tresetEditors ();", "-\t\t\t\tindex = table.getSelectionIndex ();", "-\t\t\t\tif (index == -1) return;", "-\t\t\t\tTableItem oldItem = comboEditor.getItem ();", "-\t\t\t\tnewItem = table.getItem (index);", "-\t\t\t\tif (newItem == oldItem || newItem != lastSelected) {", "+\t\tcomboEditor = new TableEditor(table);", "+\t\tnameEditor = new TableEditor(table);", "+\t\ttable.addMouseListener(new MouseAdapter() {", "+\t\t\tpublic void mouseDown(MouseEvent e) {", "+\t\t\t\tresetEditors();", "+\t\t\t\tindex = table.getSelectionIndex();", "+\t\t\t\tif(index == -1) return;", "+\t\t\t\tTableItem oldItem = comboEditor.getItem();", "+\t\t\t\tnewItem = table.getItem(index);", "+\t\t\t\tif(newItem == oldItem || newItem != lastSelected) {", "-\t\t\t\ttable.showSelection ();", "+\t\t\t\ttable.showSelection();\t\t\t\t", "+\t\t\t\tcombo = new CCombo(table, SWT.READ_ONLY);\t\t\t\t", "+\t\t\t\tcreateComboEditor(combo, comboEditor);", "-\t\t\t\tcombo = new CCombo (table, SWT.READ_ONLY);", "-\t\t\t\tcreateComboEditor (combo, comboEditor);", "+\t\t\t\tnameText = new Text(table, SWT.SINGLE);", "+\t\t\t\tnameText.setText(((String[])data.elementAt(index))[NAME_COL]);", "+\t\t\t\tcreateTextEditor(nameText, nameEditor, NAME_COL);", "-\t\t});", "+\t\t});\t\t", "-\t\t", "-\t\t/* Add listener to add an element to the table */", "-\t\tadd.addSelectionListener(new SelectionAdapter () {", "-\t\t\tpublic void widgetSelected(SelectionEvent e) {", "-\t\t\t\tTableItem item = new TableItem (table, 0);", "-\t\t\t\titem.setText (0, String.valueOf (table.indexOf (item)));", "-\t\t\t\titem.setText (1, \"Button\");", "-\t\t\t\tdata.addElement (\"Button\");", "-\t\t\t\tresetEditors ();", "+\t\t// Add listener to add an element to the table", "+\t\tadd.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {\t\t\t\t", "+\t\t\t\tif(event.detail == SWT.ARROW) {", "+\t\t\t\t\tToolItem item = (ToolItem)event.widget;", "+\t\t\t\t\tToolBar bar = item.getParent();", "+\t\t\t\t\tDisplay display = bar.getDisplay();", "+\t\t\t\t\tShell shell = bar.getShell();", "+\t\t\t\t\tfinal Menu menu = new Menu(shell, SWT.POP_UP);\t\t\t\t\t", "+\t\t\t\t\tfor (int i = 0; i < OPTIONS.length; i++) {", "+\t\t\t\t\t\tfinal MenuItem newItem = new MenuItem(menu, SWT.RADIO);", "+\t\t\t\t\t\tnewItem.setText(OPTIONS[i]);\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.addSelectionListener(new SelectionAdapter (){", "+\t\t\t\t\t\t\tpublic void widgetSelected (SelectionEvent event) {", "+\t\t\t\t\t\t\t\tMenuItem menuItem = (MenuItem)event.widget;", "+\t\t\t\t\t\t\t\tif (menuItem.getSelection()) {", "+\t\t\t\t\t\t\t\t\tMenu menu  = menuItem.getParent();", "+\t\t\t\t\t\t\t\t\tprevSelected = menu.indexOf(menuItem);", "+\t\t\t\t\t\t\t\t\tTableItem item = new TableItem (table, SWT.NONE);", "+\t\t\t\t\t\t\t\t\tString name = menuItem.getText().toLowerCase() + String.valueOf(table.getItemCount() - 1);", "+\t\t\t\t\t\t\t\t\tString[] insert = new String[] {name, menuItem.getText()};", "+\t\t\t\t\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\t\t\t\t\tresetEditors();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});\t\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.setSelection(i == prevSelected);", "+\t\t\t\t\t}", "+\t\t\t\t\tPoint pt = display.map(bar, null, event.x, event.y);", "+\t\t\t\t\tmenu.setLocation(pt.x, pt.y);", "+\t\t\t\t\tmenu.setVisible(true);", "+\t\t\t\t\t", "+\t\t\t\t\twhile(menu != null && !menu.isDisposed() && menu.isVisible()) {", "+\t\t\t\t\t\tif(!display.readAndDispatch()) {", "+\t\t\t\t\t\t\tdisplay.sleep();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tmenu.dispose();", "+\t\t\t\t} else {", "+\t\t\t\t\tString selection = OPTIONS[prevSelected];", "+\t\t\t\t\tTableItem item = new TableItem(table, 0);", "+\t\t\t\t\tString name = selection.toLowerCase() + String.valueOf(table.indexOf(item));", "+\t\t\t\t\tString[] insert = new String[] {name, selection }; ", "+\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\tresetEditors();", "+\t\t\t\t}"]}], "num": 9512}
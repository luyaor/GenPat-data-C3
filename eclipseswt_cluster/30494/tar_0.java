package org.eclipse.swt.internal.gtk;

/*
 * Copyright (c) IBM Corp. 2000, 2001.  All rights reserved.
 *
 * The contents of this file are made available under the terms
 * of the GNU Lesser General Public License (LGPL) Version 2.1 that
 * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
 * available at http://www.gnu.org/licenses/lgpl.html.  If the version
 * of the LGPL at http://www.gnu.org is different to the version of
 * the LGPL accompanying this distribution and there is any conflict
 * between the two license versions, the terms of the LGPL accompanying
 * this distribution shall govern.
 */
 
import org.eclipse.swt.internal.Library;

public class OS {
	static {
		Library.loadLibrary("swt-pi");
	}
	
	/* Constants */
	public static final int GDK_2BUTTON_PRESS = 0x5;
	public static final int GDK_Alt_L = 0xffe9;
	public static final int GDK_Alt_R = 0xffea;
	public static final int GDK_BOTTOM_LEFT_CORNER = 0xc;
	public static final int GDK_BOTTOM_RIGHT_CORNER = 0xe;
	public static final int GDK_BOTTOM_SIDE = 0x10;
	public static final int GDK_BUTTON1_MASK = 0x100;
	public static final int GDK_BUTTON2_MASK = 0x200;
	public static final int GDK_BUTTON3_MASK = 0x400;
	public static final int GDK_BUTTON_PRESS = 0x4;
	public static final int GDK_BUTTON_PRESS_MASK = 0x100;
	public static final int GDK_BUTTON_RELEASE = 0x7;
	public static final int GDK_BUTTON_RELEASE_MASK = 0x200;
	public static final int GDK_CAP_BUTT = 0x1;
	public static final int GDK_COLORSPACE_RGB = 0;
	public static final int GDK_CONTROL_MASK = 0x4;
	public static final int GDK_COPY = 0x0;
	public static final int GDK_CROSS = 0x1e;
	public static final int GDK_Cancel = 0xff69;
	public static final int GDK_Control_L = 0xffe3;
	public static final int GDK_Control_R = 0xffe4;
	public static final int GDK_CURRENT_TIME = 0x0;
	public static final int GDK_DECOR_BORDER = 0x2;
	public static final int GDK_DECOR_MAXIMIZE = 0x40;
	public static final int GDK_DECOR_MENU = 0x10;
	public static final int GDK_DECOR_MINIMIZE = 0x20;
	public static final int GDK_DECOR_RESIZEH = 0x4;
	public static final int GDK_DECOR_TITLE = 0x8;
	public static final int GDK_DIAMOND_CROSS = 0x24;
	public static final int GDK_DOUBLE_ARROW = 0x2a;
	public static final int GDK_Delete = 0xffff;
	public static final int GDK_Down = 0xff54;
	public static final int GDK_ENTER_NOTIFY_MASK = 0x1000;
	public static final int GDK_EXPOSURE_MASK = 0x2;
	public static final int GDK_End = 0xff57;
	public static final int GDK_Escape = 0xff1b;
	public static final int GDK_F1 = 0xffbe;
	public static final int GDK_F10 = 0xffc7;
	public static final int GDK_F11 = 0xffc8;
	public static final int GDK_F12 = 0xffc9;
	public static final int GDK_F2 = 0xffbf;
	public static final int GDK_F3 = 0xffc0;
	public static final int GDK_F4 = 0xffc1;
	public static final int GDK_F5 = 0xffc2;
	public static final int GDK_F6 = 0xffc3;
	public static final int GDK_F7 = 0xffc4;
	public static final int GDK_F8 = 0xffc5;
	public static final int GDK_F9 = 0xffc6;
	public static final int GDK_FOCUS_CHANGE = 0xc;
	public static final int GDK_FOCUS_CHANGE_MASK = 0x4000;
	public static final int GDK_GC_CLIP_MASK = 0x80;
	public static final int GDK_GC_CLIP_X_ORIGIN = 0x800;
	public static final int GDK_GC_CLIP_Y_ORIGIN = 0x1000;
	public static final int GDK_GRAB_SUCCESS = 0x0;
	public static final int GDK_HAND1 = 0x3a;
	public static final int GDK_Home = 0xff50;
	public static final int GDK_INCLUDE_INFERIORS = 0x1;
	public static final int GDK_INTERP_BILINEAR = 0x2;
	public static final int GDK_Insert = 0xff63;
	public static final int GDK_JOIN_MITER = 0x0;
	public static final int GDK_KEY_PRESS = 0x8;
	public static final int GDK_KEY_PRESS_MASK = 0x400;
	public static final int GDK_KEY_RELEASE = 0x9;
	public static final int GDK_KEY_RELEASE_MASK = 0x800;
	public static final int GDK_KP_0 = 0xffb0;
	public static final int GDK_KP_1 = 0xffb1;
	public static final int GDK_KP_2 = 0xffb2;
	public static final int GDK_KP_3 = 0xffb3;
	public static final int GDK_KP_4 = 0xffb4;
	public static final int GDK_KP_5 = 0xffb5;
	public static final int GDK_KP_6 = 0xffb6;
	public static final int GDK_KP_7 = 0xffb7;
	public static final int GDK_KP_8 = 0xffb8;
	public static final int GDK_KP_9 = 0xffb9;
	public static final int GDK_KP_Add = 0xffab;
	public static final int GDK_KP_Decimal = 0xffae;
	public static final int GDK_KP_Divide = 0xffaf;
	public static final int GDK_KP_Enter = 0xff8d;
	public static final int GDK_KP_Multiply = 0xffaa;
	public static final int GDK_KP_Subtract = 0xffad;
	public static final int GDK_LEAVE_NOTIFY_MASK = 0x2000;
	public static final int GDK_LEFT_PTR = 0x44;
	public static final int GDK_LEFT_SIDE = 0x46;
	public static final int GDK_LINE_DOUBLE_DASH = 0x2;
	public static final int GDK_LINE_SOLID = 0x0;
	public static final int GDK_LSB_FIRST = 0x0;
	public static final int GDK_Left = 0xff51;
	public static final int GDK_MOD1_MASK = 0x8;
	public static final int GDK_MOTION_NOTIFY = 0x3;
	public static final int GDK_NONE = 0;
	public static final int GDK_OVERLAP_RECTANGLE_OUT = 0x1;
	public static final int GDK_PIXBUF_ALPHA_BILEVEL = 0x0;
	public static final int GDK_POINTER_MOTION_HINT_MASK = 0x8;
	public static final int GDK_POINTER_MOTION_MASK = 0x4;
	public static final int GDK_Page_Down = 0xff56;
	public static final int GDK_Page_Up = 0xff55;
	public static final int GDK_QUESTION_ARROW = 0x5c;
	public static final int GDK_RGB_DITHER_NORMAL = 0x1;
	public static final int GDK_RIGHT_SIDE = 0x60;
	public static final int GDK_Return = 0xff0d;
	public static final int GDK_Right = 0xff53;
	public static final int GDK_SB_H_DOUBLE_ARROW = 0x6c;
	public static final int GDK_SB_UP_ARROW = 0x72;
	public static final int GDK_SB_V_DOUBLE_ARROW = 0x74;
	public static final int GDK_SHIFT_MASK = 0x1;
	public static final int GDK_SIZING = 0x78;
	public static final int GDK_STIPPLED = 0x2;
	public static final int GDK_Shift_L = 0xffe1;
	public static final int GDK_Shift_R = 0xffe2;
	public static final int GDK_TOP_LEFT_CORNER = 0x86;
	public static final int GDK_TOP_RIGHT_CORNER = 0x88;
	public static final int GDK_TOP_SIDE = 0x8a;
	public static final int GDK_Tab = 0xff09;
	public static final int GDK_Up = 0xff52;
	public static final int GDK_WATCH = 0x96;
	public static final int GDK_XOR = 0x2;
	public static final int GDK_XTERM = 0x98;
	public static final int GDK_X_CURSOR = 0x0;
	public static final int GTK_ACCEL_VISIBLE = 0x1;
	public static final int GTK_ARROW_DOWN = 0x1;
	public static final int GTK_ARROW_LEFT = 0x2;
	public static final int GTK_ARROW_RIGHT = 0x3;
	public static final int GTK_ARROW_UP = 0x0;
	public static final int GTK_CAN_DEFAULT = 0x2000;
	public static final int GTK_CAN_FOCUS = 0x800;
	public static final int GTK_CLIST_SHOW_TITLES = 0x4;
	public static final int GTK_DIALOG_DESTROY_WITH_PARENT = 1 << 1;
	public static final int GTK_DIALOG_MODAL = 1 << 0;
	public static final int GTK_JUSTIFY_CENTER = 0x2;
	public static final int GTK_JUSTIFY_LEFT = 0x0;
	public static final int GTK_JUSTIFY_RIGHT = 0x1;
	public static final int GTK_MESSAGE_INFO = 0;
	public static final int GTK_MESSAGE_WARNING = 1;
	public static final int GTK_MESSAGE_QUESTION = 2;
	public static final int GTK_MESSAGE_ERROR = 3;
	public static final int GTK_ORIENTATION_HORIZONTAL = 0x0;
	public static final int GTK_ORIENTATION_VERTICAL = 0x1;
	public static final int GTK_POLICY_ALWAYS = 0x0;
	public static final int GTK_POLICY_AUTOMATIC = 0x1;
	public static final int GTK_POLICY_NEVER = 0x2;
	public static final int GTK_PROGRESS_CONTINUOUS = 0x0;
	public static final int GTK_PROGRESS_DISCRETE = 0x1;
	public static final int GTK_PROGRESS_LEFT_TO_RIGHT = 0x0;
	public static final int GTK_PROGRESS_TOP_TO_BOTTOM = 0x3;
	public static final int GTK_RELIEF_NONE = 0x2;
	public static final int GTK_RESPONSE_OK = 0xfffffffb;
	public static final int GTK_SELECTION_BROWSE = 0x2;
	public static final int GTK_SELECTION_EXTENDED = 0x3;
	public static final int GTK_SENSITIVE = 0x200;
	public static final int GTK_SHADOW_ETCHED_IN = 0x3;
	public static final int GTK_SHADOW_ETCHED_OUT = 0x4;
	public static final int GTK_SHADOW_IN = 0x1;
	public static final int GTK_SHADOW_NONE = 0x0;
	public static final int GTK_SHADOW_OUT = 0x2;
	public static final int GTK_STATE_INSENSITIVE = 0x4;
	public static final int GTK_STATE_NORMAL = 0x0;
	public static final int GTK_TOOLBAR_CHILD_BUTTON = 0x1;
	public static final int GTK_TOOLBAR_CHILD_RADIOBUTTON = 0x3;
	public static final int GTK_TOOLBAR_CHILD_TOGGLEBUTTON = 0x2;
	public static final int GTK_VISIBILITY_FULL = 0x2;
	public static final int GTK_VISIBILITY_NONE = 0x0;
	public static final int GTK_VISIBLE = 0x100;
	public static final int GTK_WINDOW_POPUP = 0x1;
	public static final int GTK_WINDOW_TOPLEVEL = 0x0;
	public static final int G_LOG_FLAG_FATAL = 0x2;
	public static final int G_LOG_FLAG_RECURSION = 0x1;
	public static final int G_LOG_LEVEL_MASK = 0xfffffffc;
	public static final int PANGO_SCALE = 1024;
	public static final int PANGO_STRETCH_NORMAL = 0x4;
	public static final int PANGO_STYLE_ITALIC = 0x2;
	public static final int PANGO_STYLE_NORMAL = 0x0;
	public static final int PANGO_STYLE_OBLIQUE = 0x1;
	public static final int PANGO_WEIGHT_BOLD = 0x2bc;
	public static final int PANGO_WEIGHT_NORMAL = 0x190;

/* Object private fields accessors */
public static final native int GTK_CLIST_CLIST_WINDOW(int clist);
public static final native int GTK_CLIST_COLUMN(int clist);
public static final native int GTK_CLIST_COLUMN_TITLE_AREA_HEIGHT(int clist);
public static final native int GTK_CLIST_FOCUS_ROW(int clist);
public static final native int GTK_CLIST_HADJUSTMENT(int clist);
public static final native int GTK_CLIST_HOFFSET(int clist);
public static final native int GTK_CLIST_ROW_HEIGHT(int clist);
public static final native int GTK_CLIST_ROWS(int clist);
public static final native int GTK_CLIST_SELECTION(int clist);
public static final native int GTK_CLIST_VADJUSTMENT(int clist);
public static final native int GTK_CLIST_VOFFSET(int clist);
public static final native int GTK_CTREE_TREE_INDENT(int ctree);
public static final native int GTK_WIDGET_HEIGHT(int widget);
public static final native int GTK_WIDGET_WIDTH(int widget);
public static final native int GTK_WIDGET_WINDOW(int widget);
public static final native int GTK_WIDGET_X(int widget);
public static final native int GTK_WIDGET_Y(int widget);

/* Native methods */
public static final native int GDK_ROOT_PARENT();
public static final native int GTK_WIDGET_FLAGS(int wid);
public static final native boolean GTK_WIDGET_HAS_FOCUS(int wid);
public static final native boolean GTK_WIDGET_IS_SENSITIVE(int wid);
public static final native boolean GTK_WIDGET_MAPPED(int wid);
public static final native boolean GTK_WIDGET_SENSITIVE(int wid);
public static final native void GTK_WIDGET_SET_FLAGS(int wid, int flag);
public static final native int GTK_WIDGET_TYPE(int wid);
public static final native void GTK_WIDGET_UNSET_FLAGS(int wid, int flag);
public static final native boolean GTK_WIDGET_VISIBLE(int wid);
public static final native int PANGO_PIXELS(int dimension);
public static final native int g_filename_to_utf8(int opsysstring, int len, int bytes_read, int bytes_written, int error);
public static final native void g_free(int mem);
public static final native int g_list_append(int list, int data);
public static final native void g_list_free(int list);
public static final native int g_list_length(int list);
public static final native int g_list_nth(int list, int n);
public static final native int g_list_nth_data(int list, int n);
public static final native void g_log_default_handler(int log_domain, int log_levels, int message, int unused_data);
public static final native void g_log_remove_handler(byte[] log_domain, int handler_id);
public static final native int g_log_set_handler(byte[] log_domain, int log_levels, int log_func, int user_data);
public static final native int g_malloc(int size);
public static final native void g_object_unref(int object);
public static final native void g_signal_connect(int handle, String eventName, int proc, int swtEvent);
public static final native void g_strfreev(int string_array);
public static final native void gdk_beep();
public static final native int gdk_bitmap_create_from_data(int window, byte[] data, int width, int height);
public static final native boolean gdk_color_white(int colormap, GdkColor color);
public static final native boolean gdk_colormap_alloc_color(int colormap, GdkColor color, boolean writeable, boolean best_match);
public static final native void gdk_colormap_free_colors(int colormap, GdkColor colors, int ncolors);
public static final native int gdk_colormap_get_system();
public static final native void gdk_colormap_query_color(int colormap, int pixel, GdkColor result);
public static final native void gdk_cursor_destroy(int cursor);
public static final native int gdk_cursor_new(int cursor_type);
public static final native int gdk_cursor_new_from_pixmap(int source, int mask, GdkColor fg, GdkColor bg, int x, int y);
public static final native void gdk_draw_arc(int drawable, int gc, int filled, int x, int y, int width, int height, int angle1, int angle2);
public static final native void gdk_draw_drawable(int drawable, int gc, int src, int xsrc, int ysrc, int xdest, int ydest, int width, int height);
public static final native void gdk_draw_layout(int drawable, int gc, int x, int y, int layout);
public static final native void gdk_draw_line(int drawable, int gc, int x1, int y1, int x2, int y2);
public static final native void gdk_draw_lines(int drawable, int gc, int[] points, int npoints);
public static final native void gdk_draw_polygon(int drawable, int gc, int filled, int[] points, int npoints);
public static final native void gdk_draw_rectangle(int drawable, int gc, int filled, int x, int y, int width, int height);
public static final native int gdk_drawable_get_image(int drawable, int x, int y, int width, int height);
public static final native void gdk_drawable_get_size(int drawable, int[] width, int[] height);
public static final native int gdk_drawable_get_visible_region(int drawable);
public static final native void gdk_event_free(int event);
public static final native int gdk_event_get();
public static final native boolean gdk_event_get_coords(int event, double[] px, double[] py);
public static final native boolean gdk_event_get_state(int event, int[] pmod);
public static final native int gdk_event_get_time(int event);
public static final native void gdk_flush();
public static final native void gdk_gc_get_values(int gc, GdkGCValues values);
public static final native int gdk_gc_new(int window);
public static final native void gdk_gc_set_background(int gc, GdkColor color);
public static final native void gdk_gc_set_clip_mask(int gc, int mask);
public static final native void gdk_gc_set_clip_origin(int gc, int x, int y);
public static final native void gdk_gc_set_clip_rectangle(int gc, GdkRectangle rectangle);
public static final native void gdk_gc_set_clip_region(int gc, int region);
public static final native void gdk_gc_set_dashes(int gc, int dash_offset, byte[] dash_list, int n);
public static final native void gdk_gc_set_exposures(int gc, boolean exposures);
public static final native void gdk_gc_set_fill(int gc, int fill);
public static final native void gdk_gc_set_foreground(int gc, GdkColor color);
public static final native void gdk_gc_set_function(int gc, int function);
public static final native void gdk_gc_set_line_attributes(int gc, int line_width, int line_style, int cap_style, int join_style);
public static final native void gdk_gc_set_stipple(int gc, int stipple);
public static final native void gdk_gc_set_subwindow(int gc, int mode);
public static final native void gdk_gc_set_values(int gc, GdkGCValues values, int values_mask);
public static final native int gdk_image_get(int window, int x, int y, int width, int height);
public static final native int gdk_image_get_pixel(int image, int x, int y);
public static final native int gdk_pango_context_get();
public static final native int gdk_pixbuf_get_from_drawable(int dest, int src, int cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height);
public static final native int gdk_pixbuf_get_pixels(int pixbuf);
public static final native int gdk_pixbuf_get_rowstride(int pixbuf);
public static final native int gdk_pixbuf_new(int colorspace, boolean has_alpha, int bits_per_sample, int width, int height);
public static final native void gdk_pixbuf_render_to_drawable(int pixbuf, int drawable, int gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int dither, int x_dither, int y_dither);
public static final native void gdk_pixbuf_render_to_drawable_alpha(int pixbuf, int drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_mode, int alpha_threshold, int dither, int x_dither, int y_dither);
public static final native void gdk_pixbuf_scale(int src, int dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type);
public static final native int gdk_pixbuf_scale_simple(int src, int dest_width, int dest_height, int interp_type);
public static final native int gdk_pixmap_new(int window, int width, int height, int depth);
public static final native int gdk_pointer_grab(int window, boolean owner_events, int event_mask, int confine_to, int cursor, int time);
public static final native void gdk_pointer_ungrab(int time);
public static final native void gdk_region_destroy(int region);
public static final native boolean gdk_region_empty(int region);
public static final native void gdk_region_get_clipbox(int region, GdkRectangle rectangle);
public static final native void gdk_region_get_rectangles(int region, int[] rectangles, int[] n_rectangles);
public static final native void gdk_region_intersect(int source1, int source2);
public static final native int gdk_region_new();
public static final native void gdk_region_offset(int region, int dx, int dy);
public static final native boolean gdk_region_point_in(int region, int x, int y);
public static final native int gdk_region_rect_in(int region, GdkRectangle rect);
public static final native void gdk_region_subtract(int source1, int source2);
public static final native void gdk_region_union(int source1, int source2);
public static final native void gdk_region_union_with_rect(int region, GdkRectangle rect);
public static final native void gdk_rgb_init();
public static final native int gdk_screen_height();
public static final native int gdk_screen_width();
public static final native int gdk_screen_width_mm();
public static final native int gdk_visual_get_system();
public static final native int gdk_window_at_pointer(int[] win_x, int[] win_y);
public static final native void gdk_window_get_frame_extents(int window, GdkRectangle rect);
public static final native int gdk_window_get_origin(int window, int[] x, int[] y);
public static final native int gdk_window_get_pointer(int window, int[] x, int[] y, int[] mask);
public static final native void gdk_window_get_user_data(int window, int[] data);
public static final native void gdk_window_invalidate_rect(int window, GdkRectangle rectangle, boolean invalidate_children);
public static final native void gdk_window_invalidate_region(int window, int region, boolean invalidate_children);
public static final native void gdk_window_lower(int window);
public static final native void gdk_window_process_updates(int window, boolean update_children);
public static final native void gdk_window_raise(int window);
public static final native void gdk_window_set_back_pixmap(int window, int pixmap, boolean parent_relative);
public static final native void gdk_window_set_cursor(int window, int cursor);
public static final native void gdk_window_set_decorations(int window, int decorations);
public static final native void gdk_window_set_icon(int window, int icon_window, int pixmap, int mask);
public static final native void gdk_window_set_override_redirect(int window, boolean override_redirect);
public static final native int gtk_accel_group_new();
public static final native void gtk_accel_group_unref(int accel_group);
public static final native boolean gtk_accel_groups_activate(int accelGroup, int accelKey, int accelMods);
public static final native void gtk_adjustment_changed(int adjustment);
public static final native double gtk_adjustment_get_value(int adj);
public static final native int gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size);
public static final native void gtk_adjustment_set_value(int adjustment, double value);
public static final native void gtk_adjustment_value_changed(int adjustment);
public static final native int gtk_arrow_new(int arrow_type, int shadow_type);
public static final native void gtk_arrow_set(int arrow, int arrow_type, int shadow_type);
public static final native void gtk_box_pack_end(int box, int child, boolean expand, boolean fill, int padding);
public static final native void gtk_box_pack_start(int box, int child, boolean expand, boolean fill, int padding);
public static final native int gtk_button_new();
public static final native int gtk_button_new_with_label(byte[] label);
public static final native void gtk_button_set_relief(int button, int newstyle);
public static final native int gtk_check_button_new();
public static final native boolean gtk_check_menu_item_get_active(int wid);
public static final native int gtk_check_menu_item_new_with_label(byte[] label);
public static final native void gtk_check_menu_item_set_active(int wid, boolean active);
public static final native void gtk_check_menu_item_set_show_toggle(int menu_item, boolean always);
public static final native int gtk_check_version(int required_major, int required_minor, int required_micro);
public static final native void gtk_clipboard_clear(int clipboard);
public static final native int gtk_clipboard_get(int selection);
public static final native boolean gtk_clipboard_set_with_data(int clipboard, int target, int n_targets, int get_func, int clear_func, int user_data);
public static final native int gtk_clipboard_wait_for_contents(int clipboard, int target);
public static final native int gtk_clist_append(int clist, int[] text);
public static final native void gtk_clist_clear(int clist);
public static final native void gtk_clist_column_titles_hide(int clist);
public static final native void gtk_clist_column_titles_passive(int clist);
public static final native void gtk_clist_column_titles_show(int clist);
public static final native void gtk_clist_freeze(int clist);
public static final native void gtk_clist_get_pixtext(int clist, int row, int column, int[] text, byte[] spacing, int[] pixmap, int[] mask);
public static final native int gtk_clist_get_selection_info(int clist, int x, int y, int[] row, int[] column);
public static final native int gtk_clist_get_text(int clist, int row, int column, int[] text);
public static final native int gtk_clist_insert(int clist, int row, int[] text);
public static final native void gtk_clist_moveto(int clist, int row, int column, float row_align, float col_align);
public static final native int gtk_clist_new(int columns);
public static final native void gtk_clist_remove(int clist, int row);
public static final native int gtk_clist_row_is_visible(int clist, int row);
public static final native void gtk_clist_select_all(int clist);
public static final native void gtk_clist_select_row(int clist, int row, int column);
public static final native void gtk_clist_set_column_justification(int clist, int column, int justification);
public static final native void gtk_clist_set_column_resizeable(int clist, int column, boolean resizeable);
public static final native void gtk_clist_set_column_title(int clist, int column, byte[] title);
public static final native void gtk_clist_set_column_visibility(int clist, int column, boolean visible);
public static final native void gtk_clist_set_column_width(int clist, int column, int width);
public static final native void gtk_clist_set_pixtext(int clist, int row, int column, byte[] text, byte spacing, int pixmap, int mask);
public static final native void gtk_clist_set_row_height(int clist, int height);
public static final native void gtk_clist_set_selection_mode(int clist, int mode);
public static final native void gtk_clist_set_shadow_type(int clist, int type);
public static final native void gtk_clist_set_text(int clist, int row, int column, byte[] text);
public static final native void gtk_clist_thaw(int clist);
public static final native void gtk_clist_unselect_all(int clist);
public static final native void gtk_clist_unselect_row(int clist, int row, int column);
public static final native int gtk_color_selection_dialog_new(byte[] title);
public static final native void gtk_color_selection_get_current_color(int colorsel, GdkColor color);
public static final native void gtk_color_selection_set_current_color(int colorsel, GdkColor color);
public static final native int gtk_combo_new();
public static final native void gtk_combo_set_popdown_strings(int combo, int strings);
public static final native void gtk_container_add(int container, int widget);
public static final native int gtk_container_get_children(int container);
public static final native void gtk_container_resize_children(int container);
public static final native void gtk_container_set_border_width(int container, int border_width);
public static final native void gtk_ctree_collapse(int ctree, int node);
public static final native void gtk_ctree_expand(int ctree, int node);
public static final native int gtk_ctree_get_node_info(int ctree, int node, int[] text, byte[] spacing, int[] pixmap_closed, int[] mask_closed, int[] pixmap_opened, int[] mask_opened, boolean[] is_leaf, boolean[] expanded);
public static final native int gtk_ctree_insert_node(int ctree, int parent, int sibling, int[] text, byte spacing, int pixmap_closed, int mask_closed, int pixmap_opened, int mask_opened, boolean is_leaf, boolean expanded);
public static final native boolean gtk_ctree_is_hot_spot(int ctree, int x, int y);
public static final native boolean gtk_ctree_is_viewable(int ctree, int node);
public static final native int gtk_ctree_new(int columns, int tree_column);
public static final native int gtk_ctree_node_get_row_data(int ctree, int node);
public static final native int gtk_ctree_node_get_row_style(int ctree, int node);
public static final native int gtk_ctree_node_is_visible(int ctree, int node);
public static final native void gtk_ctree_node_moveto(int ctree, int node, int column, float row_align, float col_align);
public static final native int gtk_ctree_node_nth(int ctree, int row);
public static final native void gtk_ctree_node_set_row_data(int ctree, int node, int data);
public static final native void gtk_ctree_post_recursive(int ctree, int node, int func, int data);
public static final native void gtk_ctree_post_recursive_to_depth(int ctree, int node, int depth, int func, int data);
public static final native void gtk_ctree_remove_node(int ctree, int node);
public static final native void gtk_ctree_select(int ctree, int node);
public static final native void gtk_ctree_select_recursive(int ctree, int node);
public static final native void gtk_ctree_set_node_info(int ctree, int node, byte[] text, byte spacing, int pixmap_closed, int mask_closed, int pixmap_opened, int mask_opened, boolean is_leaf, boolean expanded);
public static final native void gtk_ctree_unselect_recursive(int ctree, int node);
public static final native int gtk_dialog_add_button(int dialog, String button_text, int response_id);
public static final native int gtk_dialog_new();
public static final native int gtk_dialog_run(int dialog);
public static final native int gtk_drawing_area_new();
public static final native void gtk_editable_copy_clipboard(int editable);
public static final native void gtk_editable_cut_clipboard(int editable);
public static final native void gtk_editable_delete_selection(int editable);
public static final native void gtk_editable_delete_text(int editable, int start_pos, int end_pos);
public static final native int gtk_editable_get_chars(int editable, int start_pos, int end_pos);
public static final native boolean gtk_editable_get_editable(int editable);
public static final native int gtk_editable_get_position(int editable);
public static final native boolean gtk_editable_get_selection_bounds(int editable, int[] start, int[] end);
public static final native void gtk_editable_insert_text(int editable, byte[] new_text, int new_text_length, int[] position);
public static final native void gtk_editable_paste_clipboard(int editable);
public static final native void gtk_editable_select_region(int editable, int start, int end);
public static final native void gtk_editable_set_position(int editable, int position);
public static final native void gtk_entry_append_text(int entry, byte[] text);
public static final native int gtk_entry_get_text(int entry);
public static final native int gtk_entry_new();
public static final native void gtk_entry_set_editable(int entry, boolean editable);
public static final native void gtk_entry_set_max_length(int entry, int max);
public static final native void gtk_entry_set_text(int entry, byte[] text);
public static final native void gtk_entry_set_visibility(int entry, boolean visible);
public static final native int gtk_event_box_new();
public static final native int gtk_events_pending();
public static final native void gtk_file_selection_complete(int filesel, byte[] pattern);
public static final native int gtk_file_selection_get_filename(int filesel);
public static final native int gtk_file_selection_get_selections(int filesel);
public static final native int gtk_file_selection_new(byte[] title);
public static final native void gtk_file_selection_set_filename(int filesel, byte[] filename);
public static final native void gtk_file_selection_set_select_multiple(int filesel, boolean select_multiple);
public static final native void gtk_fixed_move(int fixed, int widget, int x, int y);
public static final native int gtk_fixed_new();
public static final native void gtk_fixed_set_has_window(int fixed, boolean has_window);
public static final native int gtk_font_selection_dialog_get_font_name(int fsd);
public static final native int gtk_font_selection_dialog_new(byte[] title);
public static final native boolean gtk_font_selection_dialog_set_font_name(int fsd, byte[] fontname);
public static final native int gtk_frame_new(byte[] label);
public static final native void gtk_frame_set_label(int frame, byte[] label);
public static final native void gtk_frame_set_label_widget(int frame, int label_widget);
public static final native void gtk_frame_set_shadow_type(int frame, int type);
public static final native int gtk_get_current_event_time();
public static final native int gtk_hbox_new(boolean homogeneous, int spacing);
public static final native int gtk_hscale_new(int adjustment);
public static final native int gtk_hscrollbar_new(int adjustment);
public static final native int gtk_hseparator_new();
public static final native boolean gtk_init_check(int[] argc, int[] argv);
public static final native int gtk_label_get_type();
public static final native int gtk_label_new(String label);
public static final native int gtk_label_new_with_mnemonic(byte[] str);
public static final native void gtk_label_set_justify(int label, int jtype);
public static final native void gtk_label_set_line_wrap(int label, boolean wrap);
public static final native void gtk_label_set_text(int label, byte[] str);
public static final native void gtk_label_set_text_with_mnemonic(int label, byte[] str);
public static final native void gtk_list_clear_items(int list, int start, int end);
public static final native void gtk_list_select_item(int list, int item);
public static final native void gtk_main();
public static final native int gtk_main_iteration();
public static final native void gtk_main_quit();
public static final native void gtk_menu_bar_insert(int menu_bar, int child, int position);
public static final native int gtk_menu_bar_new();
public static final native void gtk_menu_insert(int menu, int child, int position);
public static final native int gtk_menu_item_new();
public static final native int gtk_image_menu_item_new_with_label(byte[] label);
public static final native int  gtk_image_menu_item_get_image(int menu_item);
public static final native void gtk_image_menu_item_set_image(int menu_item, int image);
public static final native void gtk_menu_item_remove_submenu(int menu_item);
public static final native void gtk_menu_item_set_submenu(int menu_item, int submenu);
public static final native int gtk_menu_new();
public static final native void gtk_menu_popdown(int menu);
public static final native void gtk_menu_popup(int menu, int parent_menu_shell, int parent_menu_item, int func, int data, int button, int activate_time);
public static final native int gtk_message_dialog_new(int parent, int flags, int type, int buttons, String message_format);
public static final native void gtk_misc_set_alignment(int misc, float xalign, float yalign);
public static final native int gtk_notebook_get_current_page(int notebook);
public static final native boolean gtk_notebook_get_scrollable(int notebook);
public static final native void gtk_notebook_insert_page(int notebook, int child, int tab_label, int position);
public static final native int gtk_notebook_new();
public static final native void gtk_notebook_remove_page(int notebook, int page_num);
public static final native void gtk_notebook_set_page(int notebook, int page_num);
public static final native void gtk_notebook_set_scrollable(int notebook, boolean scrollable);
public static final native void gtk_notebook_set_show_tabs(int notebook, boolean show_tabs);
public static final native void gtk_object_destroy(int object);
public static final native int gtk_object_get_user_data(int object);
public static final native void gtk_object_ref(int object);
public static final native void gtk_object_set_user_data(int object, int data);
public static final native void gtk_object_unref(int object);
public static final native int gtk_pixmap_new(int pixmap, int mask);
public static final native void gtk_pixmap_set(int pixmap, int val, int mask);
public static final native int gtk_progress_bar_new();
public static final native void gtk_progress_bar_set_bar_style(int pbar, int style);
public static final native void gtk_progress_bar_set_orientation(int pbar, int orientation);
public static final native void gtk_progress_configure(int progress, double value, double min, double max);
public static final native int gtk_radio_button_group(int radio_button);
public static final native int gtk_radio_button_new(int group);
public static final native int gtk_radio_menu_item_new_with_label(int group, byte[] label);
public static final native int gtk_range_get_adjustment(int range);
public static final native void gtk_scale_set_digits(int scale, int digits);
public static final native void gtk_scale_set_draw_value(int scale, boolean draw_value);
public static final native int gtk_scrolled_window_get_hadjustment(int scrolled_window);
public static final native int gtk_scrolled_window_get_vadjustment(int scrolled_window);
public static final native int gtk_scrolled_window_new(int hadjustment, int vadjustment);
public static final native void gtk_selection_data_free(int selection_data);
public static final native void gtk_selection_data_set(int selection_data, int type, int format, byte[] data, int length);
public static final native void gtk_scrolled_window_set_policy(int scrolled_window, int hscrollbar_policy, int vscrollbar_policy);
public static final native void gtk_scrolled_window_set_shadow_type(int scrolled_window, int type);
public static final native int gtk_set_locale();
public static final native int gtk_signal_connect(int object, byte[] name, int func, int func_data);
public static final native int gtk_signal_connect_after(int object, byte[] name, int func, int func_data);
public static final native void gtk_signal_emit_stop_by_name(int object, byte[] name);
public static final native void gtk_signal_handler_block_by_data(int object, int data);
public static final native void gtk_signal_handler_block_by_func(int object, int func, int data);
public static final native void gtk_signal_handler_unblock_by_data(int object, int data);
public static final native void gtk_signal_handler_unblock_by_func(int object, int func, int data);
public static final native int gtk_style_copy(int style);
public static final native int gtk_text_get_length(int text);
public static final native int gtk_text_new(int hadj, int vadj);
public static final native void gtk_text_set_editable(int editable, boolean is_editable);
public static final native void gtk_text_set_word_wrap(int text, int word_wrap);
public static final native int gtk_timeout_add(int interval, int function, int data);
public static final native void gtk_timeout_remove(int timeout_handler_id);
public static final native boolean gtk_toggle_button_get_active(int toggle_button);
public static final native int gtk_toggle_button_new();
public static final native void gtk_toggle_button_set_active(int toggle_button, boolean is_active);
public static final native int gtk_toolbar_insert_element(int toolbar, int type, int widget, byte[] text, byte[] tooltip_text, byte[] tooltip_private_text, int icon, int callback, int user_data, int position);
public static final native void gtk_toolbar_insert_widget(int toolbar, int widget, byte[] tooltip_text, byte[] tooltip_private_text, int position);
public static final native int gtk_toolbar_new();
public static final native void gtk_toolbar_set_orientation(int toolbar, int orientation);
public static final native int gtk_tooltips_new();
public static final native void gtk_tooltips_set_tip(int tooltips, int widget, byte[] tip_text, byte[] tip_private);
public static final native int gtk_vbox_new(boolean homogeneous, int spacing);
public static final native int gtk_vscale_new(int adjustment);
public static final native int gtk_vscrollbar_new(int adjustment);
public static final native int gtk_vseparator_new();
public static final native void gtk_widget_add_accelerator(int widget, byte[] accel_signal, int accel_group, int accel_key, int accel_mods, int accel_flags);
public static final native void gtk_widget_add_events(int widget, int events);
public static final native void gtk_widget_destroy(int widget);
public static final native int gtk_widget_get_default_style();
public static final native int gtk_widget_get_parent(int widget);
public static final native int gtk_widget_get_style(int widget);
public static final native void gtk_widget_grab_focus(int widget);
public static final native void gtk_widget_hide(int widget);
public static final native void gtk_widget_modify_base(int widget, int state, GdkColor color);
public static final native void gtk_widget_modify_bg(int widget, int state, GdkColor color);
public static final native void gtk_widget_modify_fg(int widget, int state, GdkColor color);
public static final native void gtk_widget_modify_font(int widget, int pango_font_descr);
public static final native void gtk_widget_modify_text(int widget, int state, GdkColor color);
public static final native void gtk_widget_realize(int widget);
public static final native void gtk_widget_remove_accelerator(int widget, int accel_group, int accel_key, int accel_mods);
public static final native void gtk_widget_reparent(int widget, int new_parent);
public static final native void gtk_widget_set_double_buffered(int widget, boolean double_buffered);
public static final native void gtk_widget_set_redraw_on_allocate(int widget, boolean redraw);
public static final native void gtk_widget_set_sensitive(int widget, boolean sensitive);
public static final native void gtk_widget_set_size_request(int widget, int width, int height);
public static final native void gtk_widget_set_state(int widget, int state);
public static final native void gtk_widget_set_style(int widget, int style);
public static final native void gtk_widget_show(int widget);
public static final native void gtk_widget_show_all(int widget);
public static final native void gtk_widget_show_now(int widget);
public static final native void gtk_widget_size_allocate(int widget, GtkAllocation allocation);
public static final native void gtk_widget_size_request(int widget, GtkRequisition requisition);
public static final native boolean gtk_window_activate_default(int window);
public static final native void gtk_window_add_accel_group(int window, int accel_group);
public static final native void gtk_window_deiconify(int handle);
public static final native int gtk_window_get_focus(int window);
public static final native void gtk_window_get_position(int handle, int[] x, int[] y);
public static final native void gtk_window_get_size(int handle, int[] x, int[] y);
public static final native void gtk_window_iconify(int handle);
public static final native void gtk_window_maximize(int handle);
public static final native void gtk_window_move(int handle, int x, int y);
public static final native int gtk_window_new(int type);
public static final native void gtk_window_resize(int handle, int x, int y);
public static final native void gtk_window_set_default(int window, int widget);
public static final native void gtk_window_set_destroy_with_parent(int window, boolean setting);
public static final native void gtk_window_set_modal(int window, boolean modal);
public static final native void gtk_window_set_policy(int window, int allow_shrink, int allow_grow, int auto_shrink);
public static final native void gtk_window_set_resizable(int window, boolean resizable);
public static final native void gtk_window_set_title(int window, byte[] title);
public static final native void gtk_window_set_transient_for(int window, int parent);
public static final native void gtk_window_unmaximize(int handle);
public static final native void memmove(int dest, GtkTargetEntry src, int size);
public static final native void memmove(int dest, GtkCListColumn src, int size);
public static final native void memmove(int dest, GtkAdjustment src);
public static final native void memmove(int dest, GtkStyle src);
public static final native void memmove(int dest, GdkEventButton src, int size);
public static final native void memmove(GtkColorSelectionDialog dest, int src);
public static final native void memmove(GtkSelectionData dest, int src, int size);
public static final native void memmove(GtkCTreeRow dest, int src, int size);
public static final native void memmove(GtkCListColumn dest, int src, int size);
public static final native void memmove(GtkStyle dest, int src);
public static final native void memmove(GtkCombo dest, int src);
public static final native void memmove(GtkAdjustment dest, int src);
public static final native void memmove(GdkEvent dest, int src, int size);
public static final native void memmove(GdkEventButton dest, int src, int size);
public static final native void memmove(GdkEventExpose dest, int src, int size);
public static final native void memmove(GdkEventFocus dest, int src, int size);
public static final native void memmove(GdkEventKey dest, int src, int size);
public static final native void memmove(GdkVisual dest, int src);
public static final native void memmove(GdkImage dest, int src);
public static final native void memmove(GdkRectangle dest, int src, int size);
public static final native void memmove(int dest, int[] src, int size);
public static final native void memmove(int dest, byte[] src, int size);
public static final native void memmove(int[] dest, byte[] src, int size);
public static final native void memmove(byte[] dest, int src, int size);
public static final native void memmove(int[] dest, int src, int size);
public static final native int pango_context_get_font_description(int context);
public static final native int pango_context_get_language(int context);
public static final native int pango_context_get_metrics(int context, int desc, int language);
public static final native void pango_context_list_families(int context, int[] families, int[] n_families);
public static final native void pango_context_set_font_description(int context, int descr);
public static final native int pango_font_description_copy(int desc);
public static final native void pango_font_description_free(int desc);
public static final native int pango_font_description_from_string(byte[] str);
public static final native int pango_font_description_get_family(int desc);
public static final native int pango_font_description_get_size(int desc);
public static final native int pango_font_description_get_style(int desc);
public static final native int pango_font_description_get_weight(int desc);
public static final native int pango_font_description_new();
public static final native void pango_font_description_set_family(int desc, byte[] family);
public static final native void pango_font_description_set_size(int desc, int size);
public static final native void pango_font_description_set_stretch(int desc, int stretch);
public static final native void pango_font_description_set_style(int desc, int weight);
public static final native void pango_font_description_set_weight(int desc, int weight);
public static final native int pango_font_description_to_string(int desc);
public static final native int pango_font_face_describe(int face);
public static final native void pango_font_family_list_faces(int family, int[] faces, int[] n_faces);
public static final native int pango_font_metrics_get_approximate_char_width(int metrics);
public static final native int pango_font_metrics_get_ascent(int metrics);
public static final native int pango_font_metrics_get_descent(int metrics);
public static final native int pango_language_from_string(byte[] language);
public static final native void pango_layout_get_size(int layout, int[] width, int[] height);
public static final native int pango_layout_new(int context);
public static final native void pango_layout_set_text(int layout, byte[] text, int length);
public static final native int strlen(int str);
}
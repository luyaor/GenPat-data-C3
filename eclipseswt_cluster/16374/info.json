{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e178252a041d525dcfdd4474bbf2ba4b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "675b36ac1e42dd56e55d7bd5777ab337", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "37dd5b45c717603ed638fff2257cc13bcbb77f6a", "commitAfterChange": "8eba6ff70d96340be32539fddaffb1fea3259678", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 114, "signatureBeforeChange": " boolean updateTabHeight(int oldHeight, boolean force)", "signatureAfterChange": " boolean updateTabHeight(int oldHeight, boolean force)", "diff": ["-\tif (onBottom) {", "-\t\tcurve = bezier(0, tabHeight + 2,", "-\t\t               CURVE_LEFT, tabHeight + 2,", "-\t\t\t\t       CURVE_WIDTH - CURVE_RIGHT, 1,", "-\t\t               CURVE_WIDTH, 1,", "-\t\t               CURVE_WIDTH);", "-\t\t// workaround to get rid of blip at end of bezier", "-\t\tint index = -1;", "-\t\tfor (int i = 0; i < curve.length/2; i++) {", "-\t\t\tif (curve[2*i+1] > tabHeight) {", "-\t\t\t\tindex = i;", "-\t\t\t} else {", "-\t\t\t\tbreak;", "+\tif (!simple) {", "+\t\tif (onBottom) {", "+\t\t\tcurve = bezier(0, tabHeight + 2,", "+\t\t\t               CURVE_LEFT, tabHeight + 2,", "+\t\t\t\t\t       CURVE_WIDTH - CURVE_RIGHT, 1,", "+\t\t\t               CURVE_WIDTH, 1,", "+\t\t\t               CURVE_WIDTH);", "+\t\t\t// workaround to get rid of blip at end of bezier", "+\t\t\tint index = -1;", "+\t\t\tfor (int i = 0; i < curve.length/2; i++) {", "+\t\t\t\tif (curve[2*i+1] > tabHeight) {", "+\t\t\t\t\tindex = i;", "+\t\t\t\t} else {", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\tif (index > 0) {", "+\t\t\t\tint[] newCurve = new int[curve.length - 2*(index-1)];", "+\t\t\t\tSystem.arraycopy(curve, 2*(index-1), newCurve, 0, newCurve.length);", "+\t\t\t\tcurve = newCurve;", "+\t\t\t}\t", "+\t\t} else {", "+\t\t\tcurve = bezier(0, 0,", "+\t\t\t               CURVE_LEFT, 0, ", "+\t\t\t               CURVE_WIDTH - CURVE_RIGHT, tabHeight + 1,", "+\t\t\t               CURVE_WIDTH, tabHeight + 1,", "+\t\t\t               CURVE_WIDTH);", "-\t\tif (index > 0) {", "-\t\t\tint[] newCurve = new int[curve.length - 2*(index-1)];", "-\t\t\tSystem.arraycopy(curve, 2*(index-1), newCurve, 0, newCurve.length);", "-\t\t\tcurve = newCurve;", "-\t\t}\t", "-\t} else {", "-\t\tcurve = bezier(0, 0,", "-\t\t               CURVE_LEFT, 0, ", "-\t\t               CURVE_WIDTH - CURVE_RIGHT, tabHeight + 1,", "-\t\t               CURVE_WIDTH, tabHeight + 1,", "-\t\t               CURVE_WIDTH);", "-\t\t// workaround to get rid of blip at end of bezier", "-//\t\tint index = -1;", "-//\t\tfor (int i = 0; i < curve.length/2; i++) {", "-//\t\t\tif (curve[2*i+1] > tabHeight+1) {", "-//\t\t\t\tindex = i;", "-//\t\t\t\tbreak;", "-//\t\t\t}", "-//\t\t}", "-//\t\tif (index > 0) {", "-//\t\t\tint[] newCurve = new int[2*(index-1)];", "-//\t\t\tSystem.arraycopy(curve, 0, newCurve, 0, newCurve.length);", "-//\t\t\tcurve = newCurve;", "-//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7b23c44c2c47845f7b1dbeb0897cf53", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "3467472aa67908051e1d9e3a69c4bb746a4bdceb", "commitAfterChange": "54a28706dd7a2d1a569470ebdec501aa24da7500", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "  int msgFilterProc (int code, int wParam, int lParam)", "signatureAfterChange": "  int msgFilterProc (int code, int wParam, int lParam)", "diff": ["-\tif (code >= 0) {", "-\t\tOS.MoveMemory (hookMsg, lParam, MSG.sizeof);", "-\t\tif (hookMsg.message == OS.WM_NULL) {", "-\t\t\tif (runAsyncMessages ()) wakeThread ();", "+\tif (!ignoreMsgFilter) {", "+\t\tif (code >= 0) {", "+\t\t\tOS.MoveMemory (hookMsg, lParam, MSG.sizeof);", "+\t\t\tif (hookMsg.message == OS.WM_NULL) {", "+\t\t\t\tif (runAsyncMessages ()) wakeThread ();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17e278b3177203cad252fee60943da40", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5a28f9d916645031873e21349842f1e9c20183c9", "commitAfterChange": "0bb8694700435df20f6d4a1639c4bae9f953c974", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  LRESULT CDDS_ITEMPOSTPAINT (NMTVCUSTOMDRAW nmcd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_ITEMPOSTPAINT (NMTVCUSTOMDRAW nmcd, int wParam, int lParam)", "diff": ["-\tif (handle == OS.GetFocus ()) {", "-\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "-\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) {", "-\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\t\tif (hItem == item.handle) {", "-\t\t\t\tif (!ignoreDrawFocus && (hooks (SWT.PaintItem) || findImageControl () != null)) {", "-\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\tRECT focusRect = new RECT ();", "-\t\t\t\t\t\tOS.SetRect (focusRect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\tif (count > 0 && hwndHeader != 0) {", "-\t\t\t\t\t\t\tint width = 0;", "-\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "-\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "-\t\t\t\t\t\t\tfor (int j=0; j<count; j++) {", "-\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, j, hdItem);", "-\t\t\t\t\t\t\t\twidth += hdItem.cxy;", "+\tif (!explorerTheme) {", "+\t\tif (handle == OS.GetFocus ()) {", "+\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) {", "+\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\t\tif (hItem == item.handle) {", "+\t\t\t\t\tif (!ignoreDrawFocus && (hooks (SWT.PaintItem) || findImageControl () != null)) {", "+\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\tRECT focusRect = new RECT ();", "+\t\t\t\t\t\t\tOS.SetRect (focusRect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\tif (count > 0 && hwndHeader != 0) {", "+\t\t\t\t\t\t\t\tint width = 0;", "+\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\t\tfor (int j=0; j<count; j++) {", "+\t\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, j, hdItem);", "+\t\t\t\t\t\t\t\t\twidth += hdItem.cxy;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tfocusRect.left = 0;", "+\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\t\t\t\t\tfocusRect.right = Math.max (width, rect.right);", "-\t\t\t\t\t\t\tfocusRect.left = 0;", "-\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\tOS.GetClientRect (handle, rect);", "-\t\t\t\t\t\t\tfocusRect.right = Math.max (width, rect.right);", "+\t\t\t\t\t\t\tOS.DrawFocusRect (hDC, focusRect);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint index = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0);", "+\t\t\t\t\t\t\tRECT focusRect = item.getBounds (index, true, false, false, false, false, hDC);", "+\t\t\t\t\t\t\tRECT clipRect = item.getBounds (index, true, false, false, false, true, hDC);", "+\t\t\t\t\t\t\tOS.IntersectClipRect (hDC, clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "+\t\t\t\t\t\t\tOS.DrawFocusRect (hDC, focusRect);", "+\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, 0);", "-\t\t\t\t\t\tOS.DrawFocusRect (hDC, focusRect);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint index = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0);", "-\t\t\t\t\t\tRECT focusRect = item.getBounds (index, true, false, false, false, false, hDC);", "-\t\t\t\t\t\tRECT clipRect = item.getBounds (index, true, false, false, false, true, hDC);", "-\t\t\t\t\t\tOS.IntersectClipRect (hDC, clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "-\t\t\t\t\t\tOS.DrawFocusRect (hDC, focusRect);", "-\t\t\t\t\t\tOS.SelectClipRgn (hDC, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b729b835421e611c13eb87ef842a326", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "c57c255ba62c2e81ca76764236de593edad5546e", "commitAfterChange": "204c50b0be0f29d66fd92d0f611bfe32b5fd0c5a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void tabView_willSelectTabViewItem(int id, int sel, int tabView, int tabViewItem)", "signatureAfterChange": "  void tabView_willSelectTabViewItem(int id, int sel, int tabView, int tabViewItem)", "diff": ["-\t\t\tEvent event = new Event ();", "-\t\t\tevent.item = item;", "-\t\t\tsendEvent (SWT.Selection, event);", "+\t\t\tif (!ignoreSelect) {", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.item = item;", "+\t\t\t\tsendEvent (SWT.Selection, event);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e410d53c423e8d2aaf626c26d3dcbe77", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Scale.java", "commitBeforeChange": "729580de4ec6f69f59f86299f4eba403d0aa4f49", "commitAfterChange": "6d655f823e24bd1260c536c6f34267c12bbf2a71", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": "  LRESULT wmScrollChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmScrollChild (int wParam, int lParam)", "diff": ["-\tEvent event = new Event ();", "-\t/*", "-\t* This code is intentionally commented.  The event", "-\t* detail field is not currently supported on all", "-\t* platforms.", "-\t*/", "-//\tswitch (code) {", "-//\t\tcase OS.TB_TOP: \t\tevent.detail = SWT.HOME;  break;", "-//\t\tcase OS.TB_BOTTOM:\t\tevent.detail = SWT.END;  break;", "-//\t\tcase OS.TB_LINEDOWN:\tevent.detail = SWT.ARROW_DOWN;  break;", "-//\t\tcase OS.TB_LINEUP: \t\tevent.detail = SWT.ARROW_UP;  break;", "-//\t\tcase OS.TB_PAGEDOWN: \tevent.detail = SWT.PAGE_DOWN;  break;", "-//\t\tcase OS.TB_PAGEUP: \t\tevent.detail = SWT.PAGE_UP;  break;", "-//\t}", "-\t", "-\t/*", "-\t* Send the event because WM_HSCROLL and WM_VSCROLL", "-\t* are sent from a modal message loop in windows that", "-\t* is active when the user is scrolling.", "-\t*/", "-\tsendEvent (SWT.Selection, event);", "-\t// widget could be disposed at this point", "+\tif (!ignoreSelection) {", "+\t\tEvent event = new Event ();", "+\t\t/*", "+\t\t* This code is intentionally commented.  The event", "+\t\t* detail field is not currently supported on all", "+\t\t* platforms.", "+\t\t*/", "+//\t\tswitch (code) {", "+//\t\t\tcase OS.TB_TOP: \t\tevent.detail = SWT.HOME;  break;", "+//\t\t\tcase OS.TB_BOTTOM:\t\tevent.detail = SWT.END;  break;", "+//\t\t\tcase OS.TB_LINEDOWN:\tevent.detail = SWT.ARROW_DOWN;  break;", "+//\t\t\tcase OS.TB_LINEUP: \t\tevent.detail = SWT.ARROW_UP;  break;", "+//\t\t\tcase OS.TB_PAGEDOWN: \tevent.detail = SWT.PAGE_DOWN;  break;", "+//\t\t\tcase OS.TB_PAGEUP: \t\tevent.detail = SWT.PAGE_UP;  break;", "+//\t\t}", "+\t\t/*", "+\t\t* Send the event because WM_HSCROLL and WM_VSCROLL", "+\t\t* are sent from a modal message loop in windows that", "+\t\t* is active when the user is scrolling.", "+\t\t*/", "+\t\tsendEvent (SWT.Selection, event);", "+\t\t// widget could be disposed at this point", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eeb4930ad22d9c8d06a90a5c6ee9159", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "30e1956424be7abcaa0e780fd7c2fa960d50ebff", "commitAfterChange": "53ea4503362f7c2c8444634c8fc92aef195d321a", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 220, "signatureBeforeChange": " void handleTextChanged(TextChangedEvent event)", "signatureAfterChange": " void handleTextChanged(TextChangedEvent event)", "diff": ["-\tupdateSelection(lastTextChangeStart, lastTextChangeReplaceCharCount, lastTextChangeNewCharCount);", "+\tif (!blockSelection) {", "+\t\tupdateSelection(lastTextChangeStart, lastTextChangeReplaceCharCount, lastTextChangeNewCharCount);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb948f7131d17b9ba2f5d2e532f56311", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "e68f6dd7961c12937e9660a6a57b980c17ed895a", "commitAfterChange": "6c6dfbde54f73e110515be4b620f4ab18c1f4c84", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  static Browser FindBrowser (long webView)", "signatureAfterChange": "  static Browser FindBrowser (long webView)", "diff": ["+", "-\tparent = OS.gtk_widget_get_parent (parent);", "+\tif (!WEBKIT2){", "+\t\tparent = OS.gtk_widget_get_parent (parent);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa34521f8a348aa9421e6b5f0c4a5f76", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "f0ffa7f4974e773b4f714a4d6c72a0c4a6f07bc6", "commitAfterChange": "0cf401cbbd6bd326525936a1337ad510a05e6407", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  int gtk_changed (int widget)", "signatureAfterChange": "  int gtk_changed (int widget)", "diff": ["-\tint ptr = OS.gtk_entry_get_text (entryHandle);", "-\tint length = OS.strlen (ptr);", "-\tbyte [] buffer = new byte [length];", "-\tOS.memmove (buffer, ptr, length);", "-\tString text = new String (Converter.mbcsToWcs (null, buffer));", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\tif (items [i].equals (text)) {", "-\t\t\tpostEvent (SWT.Selection);", "-\t\t\tbreak;", "+\tif (!ignoreSelect) {", "+\t\tint ptr = OS.gtk_entry_get_text (entryHandle);", "+\t\tint length = OS.strlen (ptr);", "+\t\tbyte [] buffer = new byte [length];", "+\t\tOS.memmove (buffer, ptr, length);", "+\t\tString text = new String (Converter.mbcsToWcs (null, buffer));", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tif (items [i].equals (text)) {", "+\t\t\t\tpostEvent (SWT.Selection);", "+\t\t\t\tbreak;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e741743394346584a95a2408e1ac7b51", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/browser/Browser1.java", "commitBeforeChange": "88322f0d565181e28d20864183d354110b03f0a7", "commitAfterChange": "510a9055a880b0149407b8b6f474eee88b6c1452", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t \tpublic static boolean test()", "signatureAfterChange": " \t \tpublic static boolean test()", "diff": ["-\t\tfor (int i = 0; i < urls.length; i++) {", "-\t\t\tboolean result = test1(urls[i]); ", "-\t\t\tif (verbose) System.out.print(result ? \".\" : \"E\");", "-\t\t\tif (!result) fail++; ", "-\t\t}", "-\t\tfor (int i = 0; i < urls.length; i++) {", "-\t\t\tboolean result = test2(urls[i]); ", "-\t\t\tif (verbose) System.out.print(result ? \".\" : \"E\");", "-\t\t\tif (!result) fail++; ", "+\t\t// TEMPORARILY NOT RUN FOR MOZILLA", "+\t\tif (!isMozilla) {", "+\t\t\tfor (int i = 0; i < urls.length; i++) {", "+\t\t\t\tboolean result = test1(urls[i]); ", "+\t\t\t\tif (verbose) System.out.print(result ? \".\" : \"E\");", "+\t\t\t\tif (!result) fail++; ", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < urls.length; i++) {", "+\t\t\t\tboolean result = test2(urls[i]); ", "+\t\t\t\tif (verbose) System.out.print(result ? \".\" : \"E\");", "+\t\t\t\tif (!result) fail++; ", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d35796b71114fbee11b034d5ae4d57c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "491cca8b8caa2e2b7fa91ae4fcd690464010c0bc", "commitAfterChange": "3be8a9ab2093c28258e90131291f305bc84e88cf", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  boolean handleMouseEvent (String type, int screenX, int screenY, int detail, int button, boolean altKey, boolean ctrlKey, boolean shiftKey, boolean metaKey, boolean hasRelatedTarget)", "signatureAfterChange": "  boolean handleMouseEvent (String type, int screenX, int screenY, int detail, int button, boolean altKey, boolean ctrlKey, boolean shiftKey, boolean metaKey, boolean hasRelatedTarget)", "diff": ["-\t\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);", "-\t\t* Bug in WebKitGTK.  Dragging an image quickly and repeatedly can cause", "-\t\t* WebKitGTK to take the mouse grab indefinitely and lock up the display,", "-\t\t* see https://bugs.webkit.org/show_bug.cgi?id=32840.  The workaround is", "-\t\t* to veto all drag attempts.", "+\t\t* Bug in WebKitGTK 1.2.x.  Dragging an image quickly and repeatedly can", "+\t\t* cause WebKitGTK to take the mouse grab indefinitely and lock up the", "+\t\t* display, see https://bugs.webkit.org/show_bug.cgi?id=32840.  The", "+\t\t* workaround is to veto all drag attempts if using WebKitGTK 1.2.x.", "-\t\treturn false;", "+\t\tif (!IsWebKitGTK14orNewer) {", "+\t\t\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);", "+\t\t\treturn false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1550e85860c1b016acde310fa83fbe9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "e8149db40057c0f8d86c5eba67bc89ce508acc2e", "commitAfterChange": "8306686dc2a4ed363c2d58a33247efe29ec64d0e", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tif (phdn.pitem != 0) {", "-\t\t\t\t\tHDITEM pitem = new HDITEM ();", "-\t\t\t\t\tOS.MoveMemory (pitem, phdn.pitem, HDITEM.sizeof);", "-\t\t\t\t\tif ((pitem.mask & OS.HDI_WIDTH) != 0) {", "-\t\t\t\t\t\tTableColumn column = columns [phdn.iItem];", "-\t\t\t\t\t\tif (column != null) {", "-\t\t\t\t\t\t\tcolumn.sendEvent (SWT.Resize);", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t\t* code could have disposed the widget in the resize", "-\t\t\t\t\t\t\t* event.  If this happens, end the processing of the", "-\t\t\t\t\t\t\t* Windows message by returning zero as the result of", "-\t\t\t\t\t\t\t* the window proc.", "-\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\tif (isDisposed ()) return LRESULT.ZERO;\t", "-\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\t\tif (count == 1 && columns [0] == null) count = 0;", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t\t* code could have disposed the column in the move", "-\t\t\t\t\t\t\t* event.  If this happens, process the move event", "-\t\t\t\t\t\t\t* for those columns that have not been destroyed.", "-\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\tTableColumn [] newColumns = new TableColumn [count];", "-\t\t\t\t\t\t\tSystem.arraycopy (columns, 0, newColumns, 0, count);", "-\t\t\t\t\t\t\tfor (int i=phdn.iItem+1; i<count; i++) {", "-\t\t\t\t\t\t\t\tif (newColumns [i] != null && !newColumns [i].isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tnewColumns [i].sendEvent (SWT.Move);", "+\t\t\t\tif (!ignoreResize) {", "+\t\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\t\tif (phdn.pitem != 0) {", "+\t\t\t\t\t\tHDITEM pitem = new HDITEM ();", "+\t\t\t\t\t\tOS.MoveMemory (pitem, phdn.pitem, HDITEM.sizeof);", "+\t\t\t\t\t\tif ((pitem.mask & OS.HDI_WIDTH) != 0) {", "+\t\t\t\t\t\t\tTableColumn column = columns [phdn.iItem];", "+\t\t\t\t\t\t\tif (column != null) {", "+\t\t\t\t\t\t\t\tcolumn.sendEvent (SWT.Resize);", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t* It is possible (but unlikely), that application", "+\t\t\t\t\t\t\t\t* code could have disposed the widget in the resize", "+\t\t\t\t\t\t\t\t* event.  If this happens, end the processing of the", "+\t\t\t\t\t\t\t\t* Windows message by returning zero as the result of", "+\t\t\t\t\t\t\t\t* the window proc.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tif (isDisposed ()) return LRESULT.ZERO;\t", "+\t\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\t\t\tif (count == 1 && columns [0] == null) count = 0;", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t* It is possible (but unlikely), that application", "+\t\t\t\t\t\t\t\t* code could have disposed the column in the move", "+\t\t\t\t\t\t\t\t* event.  If this happens, process the move event", "+\t\t\t\t\t\t\t\t* for those columns that have not been destroyed.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tTableColumn [] newColumns = new TableColumn [count];", "+\t\t\t\t\t\t\t\tSystem.arraycopy (columns, 0, newColumns, 0, count);", "+\t\t\t\t\t\t\t\tfor (int i=phdn.iItem+1; i<count; i++) {", "+\t\t\t\t\t\t\t\t\tif (newColumns [i] != null && !newColumns [i].isDisposed ()) {", "+\t\t\t\t\t\t\t\t\t\tnewColumns [i].sendEvent (SWT.Move);", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "142cfc4acc8caf34b66ce921dedc23c1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "882fb3c9cf2bee472ef2152155ef18c3d0d2d853", "commitAfterChange": "9d056f973a0b0da966a2c2f2478c52db3cc41550", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r void onPaint(Event event)", "signatureAfterChange": "\r void onPaint(Event event)", "diff": ["-\t\t\tgc.setForeground(shadowColor);\r", "-\t\t\tgc.drawRectangle(\r", "-\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "-\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT, \r", "-\t\t\t\t2, \r", "-\t\t\t\tgrabberHeight);\r", "-\t\t\tgc.setForeground(highlightColor);\r", "-\t\t\tgc.drawLine(\r", "-\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "-\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT + 1, \r", "-\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "-\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT + grabberHeight - 1);\r", "-\t\t\tgc.drawLine(\r", "-\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "-\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT, \r", "-\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH + 1, \r", "-\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT);\r", "+\t\t\tif (!isLocked) {\r", "+\t\t\t\tgc.setForeground(shadowColor);\r", "+\t\t\t\tgc.drawRectangle(\r", "+\t\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "+\t\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT, \r", "+\t\t\t\t\t2, \r", "+\t\t\t\t\tgrabberHeight);\r", "+\t\t\t\tgc.setForeground(highlightColor);\r", "+\t\t\t\tgc.drawLine(\r", "+\t\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "+\t\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT + 1, \r", "+\t\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "+\t\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT + grabberHeight - 1);\r", "+\t\t\t\tgc.drawLine(\r", "+\t\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "+\t\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT, \r", "+\t\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH + 1, \r", "+\t\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT);\r", "+\t\t\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff7216379aad043f7bb8b3b7ab171e66", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "e73d120d5e37884ab50e6301a907bc6b240738dc", "commitAfterChange": "308fb225ca7c50dd338d7be0181861ac767a6584", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["-\tinitApplicationDelegate();\t", "-\tapplication.finishLaunching();", "+\t", "+\tif (!isEmbedded) {", "+\t\tinitApplicationDelegate();\t", "+\t\tapplication.finishLaunching();", "+\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db41cc4c7d3f705852216dcdcfc59288", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "40270237991c3dd74bdb585029dd517e4138c567", "commitAfterChange": "17d7fa6eaa291c972b1a480f8303bd3136b393ca", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t\t\t\t\t\tisAboutBlank = url.startsWith(ABOUT_BLANK);", "+\t\t\t\t\t\tif (!performingInitialNavigate) {", "+\t\t\t\t\t\t\tisAboutBlank = url.startsWith(ABOUT_BLANK);", "+\t\t\t\t\t\t}"]}], "num": 16374}
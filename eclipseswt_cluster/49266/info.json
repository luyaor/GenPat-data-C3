{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db23ca31f6bda8b9bc12a9b703b5f319", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "348ecdfb24ff70f4c0ba9d701f46e402", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "0a6811e80079fc0387e0cc87279a001c95b12743", "commitAfterChange": "def0218c22c8740186dfa86c4d354b293854c64b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void handleMouseEvent (OleEvent e)", "signatureAfterChange": "  void handleDOMEvent (OleEvent e)", "diff": ["-void handleMouseEvent (OleEvent e) {", "+void handleDOMEvent (OleEvent e) {", "+\tif (eventType.equals(EVENT_KEYDOWN)) {", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_KEYCODE });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tlastKeyCode = translateKey (pVarResult.getInt());", "+\t\tpVarResult.dispose();", "+", "+\t\tMSG msg = new MSG ();", "+\t\tint flags = OS.PM_NOREMOVE | OS.PM_NOYIELD;", "+\t\tif (OS.PeekMessage (msg, frame.handle, OS.WM_CHAR, OS.WM_CHAR, flags)) {", "+\t\t\t/* a keypress will be received for this key so don't send KeyDown here */", "+\t\t\tevent.dispose();", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t/* if this is a repeating key then an event should not be fired for it */", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_REPEAT });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tboolean repeating = pVarResult.getBoolean();", "+\t\tpVarResult.dispose();", "+\t\tif (repeating) {", "+\t\t\tevent.dispose();", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tint mask = 0;", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_ALTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.ALT;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_CTRLKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.CTRL;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_SHIFTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.SHIFT;", "+\t\tpVarResult.dispose();", "+", "+\t\tEvent keyEvent = new Event ();", "+\t\tkeyEvent.widget = browser;", "+\t\tkeyEvent.type = SWT.KeyDown;", "+\t\tkeyEvent.keyCode = lastKeyCode;", "+\t\tkeyEvent.stateMask = mask;", "+\t\tkeyEvent.stateMask &= ~lastKeyCode;\t\t/* remove current keydown if it's a state key */", "+\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "+\t\tif (!keyEvent.doit) {", "+\t\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_RETURNVALUE });", "+\t\t\tdispIdMember = rgdispid[0];", "+\t\t\tVariant pVarFalse = new Variant(false);", "+\t\t\tevent.setProperty(dispIdMember, pVarFalse);", "+\t\t\tpVarFalse.dispose();", "+\t\t}", "+", "+\t\tevent.dispose();", "+\t\treturn;", "+\t}", "+", "+\tif (eventType.equals(EVENT_KEYPRESS)) {", "+\t\tint mask = 0;", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_CTRLKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.CTRL;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_SHIFTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.SHIFT;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_ALTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.ALT;", "+\t\tpVarResult.dispose();", "+", "+\t\t/* in the keypress event the keyCode actually corresponds to the character code */", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_KEYCODE });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tlastCharCode = pVarResult.getInt();", "+\t\tpVarResult.dispose();", "+", "+\t\tEvent keyEvent = new Event ();", "+\t\tkeyEvent.widget = browser;", "+\t\tkeyEvent.type = SWT.KeyDown;", "+\t\tkeyEvent.keyCode = lastKeyCode;", "+\t\tkeyEvent.character = (char)lastCharCode;", "+\t\tkeyEvent.stateMask = mask;", "+\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "+\t\tif (!keyEvent.doit) {", "+\t\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_RETURNVALUE });", "+\t\t\tdispIdMember = rgdispid[0];", "+\t\t\tVariant pVarFalse = new Variant(false);", "+\t\t\tevent.setProperty(dispIdMember, pVarFalse);", "+\t\t\tpVarFalse.dispose();", "+\t\t}", "+", "+\t\tevent.dispose();", "+\t\treturn;", "+\t}", "+", "+\tif (eventType.equals(EVENT_KEYUP)) {", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_KEYCODE });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tint keyCode = translateKey (pVarResult.getInt());", "+\t\tpVarResult.dispose();", "+", "+\t\t/*", "+\t\t* if a key code could not be determined for this key then it's a", "+\t\t* key for which key events are not sent (eg.- the Windows key)", "+\t\t*/", "+\t\tif (keyCode == 0) {", "+\t\t\tlastKeyCode = lastCharCode = 0;", "+\t\t\tevent.dispose();", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tif (keyCode != lastKeyCode) {", "+\t\t\t/* keyup does not correspond to the last keydown */", "+\t\t\tlastKeyCode = keyCode;", "+\t\t\tlastCharCode = 0;", "+\t\t}", "+", "+\t\tint mask = 0;", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_CTRLKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.CTRL;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_ALTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.ALT;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_SHIFTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.SHIFT;", "+\t\tpVarResult.dispose();", "+", "+\t\tEvent keyEvent = new Event ();", "+\t\tkeyEvent.widget = browser;", "+\t\tkeyEvent.type = SWT.KeyUp;", "+\t\tkeyEvent.keyCode = lastKeyCode;", "+\t\tkeyEvent.character = (char)lastCharCode;", "+\t\tkeyEvent.stateMask = mask;", "+\t\tswitch (lastKeyCode) {", "+\t\t\tcase SWT.SHIFT:", "+\t\t\tcase SWT.CONTROL:", "+\t\t\tcase SWT.ALT:", "+\t\t\tcase SWT.COMMAND: {", "+\t\t\t\tkeyEvent.stateMask |= lastKeyCode;", "+\t\t\t}", "+\t\t}", "+\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "+\t\tif (!keyEvent.doit) {", "+\t\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_RETURNVALUE });", "+\t\t\tdispIdMember = rgdispid[0];", "+\t\t\tVariant pVarFalse = new Variant(false);", "+\t\t\tevent.setProperty(dispIdMember, pVarFalse);", "+\t\t\tpVarFalse.dispose();", "+\t\t}", "+", "+\t\tlastKeyCode = lastCharCode = 0;", "+\t\tevent.dispose();", "+\t\treturn;", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d42c43c828e540aef10d4985e5710276", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "9fcaeb8ee69976fa279be4d81dbb74efb586ed73", "commitAfterChange": "318109a09b77020cb8d7f8d97b41b87933157e53", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 150, "signatureBeforeChange": "  int HandleEvent (int event)", "signatureAfterChange": "  int HandleEvent (int event)", "diff": ["+\tif (XPCOM.DOMEVENT_KEYDOWN.equals (typeString)) {", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\trc = domEvent.QueryInterface (nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tnsIDOMKeyEvent domKeyEvent = new nsIDOMKeyEvent (result[0]);", "+\t\tresult[0] = 0;", "+", "+\t\tint[] aKeyCode = new int[1]; /* PRUint32 */", "+\t\trc = domKeyEvent.GetKeyCode (aKeyCode);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tint keyCode = translateKey (aKeyCode[0]);", "+", "+\t\t/*", "+\t\t* if keyCode == lastKeyCode then either a repeating key like Shift", "+\t\t* is being held or a key for which key events are not sent has been", "+\t\t* pressed.  In both of these cases a KeyDown should not be sent.", "+\t\t*/", "+\t\tif (keyCode != lastKeyCode) {", "+\t\t\tlastKeyCode = keyCode;", "+\t\t\tswitch (lastKeyCode) {", "+\t\t\t\tcase SWT.SHIFT:", "+\t\t\t\tcase SWT.CONTROL:", "+\t\t\t\tcase SWT.ALT:", "+\t\t\t\tcase SWT.CAPS_LOCK:", "+\t\t\t\tcase SWT.NUM_LOCK:", "+\t\t\t\tcase SWT.SCROLL_LOCK:", "+\t\t\t\tcase SWT.COMMAND: {", "+\t\t\t\t\t/* keypress events will not be received for these keys, so send KeyDowns for them now */", "+\t\t\t\t\tboolean[] aAltKey = new boolean[1], aCtrlKey = new boolean[1], aShiftKey = new boolean[1], aMetaKey = new boolean[1]; ", "+\t\t\t\t\trc = domKeyEvent.GetAltKey (aAltKey);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\trc = domKeyEvent.GetCtrlKey (aCtrlKey);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\trc = domKeyEvent.GetShiftKey (aShiftKey);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\trc = domKeyEvent.GetMetaKey (aMetaKey);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+", "+\t\t\t\t\tEvent keyEvent = new Event ();", "+\t\t\t\t\tkeyEvent.widget = browser;", "+\t\t\t\t\tkeyEvent.type = SWT.KeyDown;", "+\t\t\t\t\tkeyEvent.keyCode = lastKeyCode;", "+\t\t\t\t\tkeyEvent.stateMask = (aAltKey[0] ? SWT.ALT : 0) | (aCtrlKey[0] ? SWT.CTRL : 0) | (aShiftKey[0] ? SWT.SHIFT : 0) | (aMetaKey[0] ? SWT.MOD1 : 0);", "+\t\t\t\t\tkeyEvent.stateMask &= ~lastKeyCode;\t\t/* remove current keydown if it's a state key */", "+\t\t\t\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "+\t\t\t\t}", "+\t\t\t\tdefault: {", "+\t\t\t\t\t/* do nothing, KeyDown event will be sent for this key by keypress listener */", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tdomKeyEvent.Release ();", "+\t\treturn XPCOM.NS_OK;", "+\t}", "+", "+\tif (XPCOM.DOMEVENT_KEYPRESS.equals (typeString)) {", "+\t\t/*", "+\t\t* if keydown could not determine a keycode for this key then it's a", "+\t\t* key for which key events are not sent (eg.- the Windows key)", "+\t\t*/", "+\t\tif (lastKeyCode == 0) return XPCOM.NS_OK;", "+", "+\t\t/*", "+\t\t* On linux only, unexpected keypress events are received for some", "+\t\t* modifier keys.  The workaround is to ignore these events since", "+\t\t* KeyDown events are sent for these keys in the keydown listener.  ", "+\t\t*/", "+\t\tswitch (lastKeyCode) {", "+\t\t\tcase SWT.CAPS_LOCK:", "+\t\t\tcase SWT.NUM_LOCK:", "+\t\t\tcase SWT.SCROLL_LOCK: return XPCOM.NS_OK;", "+\t\t}", "+", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\trc = domEvent.QueryInterface (nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tnsIDOMKeyEvent domKeyEvent = new nsIDOMKeyEvent (result[0]);", "+\t\tresult[0] = 0;", "+", "+\t\tboolean[] aAltKey = new boolean[1], aCtrlKey = new boolean[1], aShiftKey = new boolean[1], aMetaKey = new boolean[1]; ", "+\t\trc = domKeyEvent.GetAltKey (aAltKey);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\trc = domKeyEvent.GetCtrlKey (aCtrlKey);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\trc = domKeyEvent.GetShiftKey (aShiftKey);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\trc = domKeyEvent.GetMetaKey (aMetaKey);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tdomKeyEvent.Release ();", "+", "+\t\tint[] aCharCode = new int[1]; /* PRUint32 */", "+\t\trc = domKeyEvent.GetCharCode (aCharCode);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tlastCharCode = aCharCode[0];", "+\t\tif (lastCharCode == 0) {", "+\t\t\tswitch (lastKeyCode) {", "+\t\t\t\tcase SWT.TAB: lastCharCode = SWT.TAB; break;", "+\t\t\t\tcase SWT.CR: lastCharCode = SWT.CR; break;", "+\t\t\t\tcase SWT.BS: lastCharCode = SWT.BS; break;", "+\t\t\t\tcase SWT.ESC: lastCharCode = SWT.ESC; break;", "+\t\t\t\tcase SWT.DEL: lastCharCode = SWT.DEL; break;", "+\t\t\t}", "+\t\t}", "+\t\tif (aCtrlKey[0] && (0 <= lastCharCode && lastCharCode <= 0x7F)) {", "+\t\t\tif ('a'  <= lastCharCode && lastCharCode <= 'z') lastCharCode -= 'a' - 'A';", "+\t\t\tif (64 <= lastCharCode && lastCharCode <= 95) lastCharCode -= 64;", "+\t\t}", "+", "+\t\tEvent keyEvent = new Event ();", "+\t\tkeyEvent.widget = browser;", "+\t\tkeyEvent.type = SWT.KeyDown;", "+\t\tkeyEvent.keyCode = lastKeyCode;", "+\t\tkeyEvent.character = (char)lastCharCode;", "+\t\tkeyEvent.stateMask = (aAltKey[0] ? SWT.ALT : 0) | (aCtrlKey[0] ? SWT.CTRL : 0) | (aShiftKey[0] ? SWT.SHIFT : 0) | (aMetaKey[0] ? SWT.MOD1 : 0);", "+\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "+\t\treturn XPCOM.NS_OK;", "+\t}", "+", "+\tif (XPCOM.DOMEVENT_KEYUP.equals (typeString)) {", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\trc = domEvent.QueryInterface (nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tnsIDOMKeyEvent domKeyEvent = new nsIDOMKeyEvent (result[0]);", "+\t\tresult[0] = 0;", "+", "+\t\tint[] aKeyCode = new int[1]; /* PRUint32 */", "+\t\trc = domKeyEvent.GetKeyCode (aKeyCode);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tint keyCode = translateKey (aKeyCode[0]);", "+\t\tif (keyCode == 0) {", "+\t\t\t/* indicates a key for which key events are not sent */", "+\t\t\tdomKeyEvent.Release ();", "+\t\t\treturn XPCOM.NS_OK;", "+\t\t}", "+\t\tif (keyCode != lastKeyCode) {", "+\t\t\t/* keyup does not correspond to the last keydown */", "+\t\t\tlastKeyCode = keyCode;", "+\t\t\tlastCharCode = 0;", "+\t\t}", "+", "+\t\tboolean[] aAltKey = new boolean[1], aCtrlKey = new boolean[1], aShiftKey = new boolean[1], aMetaKey = new boolean[1]; ", "+\t\trc = domKeyEvent.GetAltKey (aAltKey);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\trc = domKeyEvent.GetCtrlKey (aCtrlKey);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\trc = domKeyEvent.GetShiftKey (aShiftKey);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\trc = domKeyEvent.GetMetaKey (aMetaKey);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tdomKeyEvent.Release ();", "+", "+\t\tEvent keyEvent = new Event ();", "+\t\tkeyEvent.widget = browser;", "+\t\tkeyEvent.type = SWT.KeyUp;", "+\t\tkeyEvent.keyCode = lastKeyCode;", "+\t\tkeyEvent.character = (char)lastCharCode;", "+\t\tkeyEvent.stateMask = (aAltKey[0] ? SWT.ALT : 0) | (aCtrlKey[0] ? SWT.CTRL : 0) | (aShiftKey[0] ? SWT.SHIFT : 0) | (aMetaKey[0] ? SWT.MOD1 : 0);", "+\t\tswitch (lastKeyCode) {", "+\t\t\tcase SWT.SHIFT:", "+\t\t\tcase SWT.CONTROL:", "+\t\t\tcase SWT.ALT:", "+\t\t\tcase SWT.COMMAND: {", "+\t\t\t\tkeyEvent.stateMask |= lastKeyCode;", "+\t\t\t}", "+\t\t}", "+\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "+\t\tlastKeyCode = lastCharCode = 0;", "+\t\treturn XPCOM.NS_OK;", "+\t}", "+"]}], "num": 49266}
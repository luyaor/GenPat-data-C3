{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12ed1a286ea5a20ed391aba8153efd2a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51debfdff39c2685464019521f473c1a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "7e7aa31a7c5823e8c3cf30a6a7d4f6f396020d02", "commitAfterChange": "88ed24294a1c7a111e22683657ec7217204cfea9", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  public void test_setSelectionI()", "signatureAfterChange": "  public void test_setSelectionI()", "diff": ["-\tlist.removeAll();", "-", "-\tlist.setSelection(-2);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 0);", "-\tlist.setSelection(0);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 0);", "-\tlist.setSelection(-1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 0);", "+\tif (fCheckSWTPolicy) {", "+\t\tlist.removeAll();", "+\t\tlist.setSelection(-2);", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t\tlist.setSelection(0);", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t\tlist.setSelection(-1);", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t}", "-\tlist.removeAll();", "-\t", "-\tlist.setSelection(0);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 0);", "-\tlist.setSelection(-1);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 0);", "-\tlist.setSelection(-2);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getFocusIndex(), 0);", "+\tif (fCheckSWTPolicy) {", "+\t\tlist.removeAll();", "+\t\tlist.setSelection(0);", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t\tlist.setSelection(-1);", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t\tlist.setSelection(-2);", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81c70ec06a15ad0aa65c50c529d88978", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": "  void createHandle ()", "diff": ["-}", "-void createHandle (int index) {", "-\tstate |= HANDLE;", "-\t\thandle= MacUtil.newControl(parent.handle, (short)0, (short)-12345, (short)-1, (short)(OS.kControlPopupButtonProc+1));", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tint[] menuRef= new int[1];", "-\t\tOS.CreateNewMenu(20000, 0, menuRef);", "-\t\tmenuHandle= menuRef[0];", "-\t\tif (menuHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tOS.SetControlPopupMenuHandle(handle, menuHandle);", "-\t    int[] outComboBox= new int[1];", "-\t\tOS.HIComboBoxCreate(outComboBox, OS.kHIComboBoxAutoSizeListAttribute);", "-\t\thandle= outComboBox[0];", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tMacUtil.addControl(handle, parent.handle);", "-\t\tOS.HIViewSetVisible(handle, true);", "+", "+void createHandle () {", "+\t// NEEDS WORK - SIMPLE", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tint [] outControl = new int [1];", "+\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\t/* From ControlDefinitions.h:", "+\t\t * ", "+\t\t * Passing in a menu ID of -12345 causes the popup not to try and get the menu from a", "+\t\t * resource. Instead, you can build the menu and later stuff the MenuRef field in", "+\t\t * the popup data information.                                                                         ", "+\t\t */", "+\t\tOS.CreatePopupButtonControl(window, null, 0, (short)-12345, false, (short)0, (short)0, 0, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tint[] menuRef= new int[1];", "+\t\tOS.CreateNewMenu ((short)0, 0, menuRef);", "+\t\tif (menuRef [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tmenuHandle = menuRef[0];", "+\t\tOS.SetControlPopupMenuHandle(handle, menuHandle);", "+\t\tOS.SetControl32BitMaximum(handle, 0x7FFF);", "+\t} else {", "+\t\tint [] outControl = new int [1];", "+\t\tCGRect rect = new CGRect ();", "+\t\tint inAttributes = OS.kHIComboBoxAutoCompletionAttribute | OS.kHIComboBoxAutoSizeListAttribute;", "+\t\tOS.HIComboBoxCreate(rect, 0, null, 0, inAttributes, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.HIViewSetVisible (handle, true);"]}], "num": 1037}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58b9c6f3b4bd8af8fa2ec97cf8adb3c1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ddafe6052dd7f7bb32a214341d3660c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic NSArray internal_accessibilityActionNames(int childID)", "signatureAfterChange": " \t \tpublic NSArray internal_accessibilityActionNames(int childID)", "diff": ["-\tpublic NSArray internal_accessibilityActionNames(int childID) {", "-\t\t// The supported action list depends on the role played by the control.", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "-\t\tevent.childID = childID;", "-\t\tevent.detail = -1;", "-\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "-\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "-\t\t\tlistener.getRole(event);", "-\t\t// No accessible listener is overriding the role of the control, so let Cocoa return the default set for the control.", "-\t\tif (event.detail == -1) {", "-\t\t\treturn null;", "-\t\tif ((childID == ACC.CHILDID_SELF) && (actionNames != null)) {", "-\t\t\treturn retainedAutoreleased(actionNames);", "-\t\t", "-\t\tNSMutableArray returnValue = NSMutableArray.arrayWithCapacity(5);", "-\t\t", "-\t\tswitch (event.detail) {", "-\t\tcase ACC.ROLE_PUSHBUTTON:", "-\t\tcase ACC.ROLE_RADIOBUTTON:", "-\t\tcase ACC.ROLE_CHECKBUTTON:", "-\t\tcase ACC.ROLE_TABITEM:", "-\t\t\treturnValue.addObject(OS.NSAccessibilityPressAction);", "-\t\t\tbreak;", "-\t\tswitch (event.detail) {", "-\t\tcase ACC.ROLE_COMBOBOX:", "-\t\t\treturnValue.addObject(OS.NSAccessibilityConfirmAction);", "-\t\t\tbreak;", "-", "-\t\tif (childID == ACC.CHILDID_SELF) {", "-\t\t\tactionNames = returnValue;", "-\t\t\tactionNames.retain();", "-\t\t\treturn retainedAutoreleased(actionNames);", "-\t\t\t// Caller must retain if they want to hold on to it.", "-\t\t\treturn returnValue;", "+\t", "+\tpublic NSArray internal_accessibilityActionNames(int childID) {", "+\t\tif (accessibleActionListeners.size() > 0) {", "+\t\t\tAccessibleActionEvent event = new AccessibleActionEvent(this);", "+\t\t\tfor (int i = 0; i < accessibleActionListeners.size(); i++) {", "+\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(i);", "+\t\t\t\tlistener.getActionCount(event);", "+\t\t\t}", "+\t\t\tNSMutableArray array = NSMutableArray.arrayWithCapacity(event.count);", "+\t\t\tfor (int i = 0; i < event.count; i++) {", "+\t\t\t\tevent.index = i;", "+\t\t\t\tfor (int j = 0; j < accessibleActionListeners.size(); j++) {", "+\t\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(j);", "+\t\t\t\t\tlistener.getName(event);", "+\t\t\t\t}", "+\t\t\t\tarray.addObject(NSString.stringWith(event.result));\t", "+\t\t\t}", "+\t\t\treturn array;", "+\t\t} else {", "+\t\t\t// The supported action list depends on the role played by the control.", "+\t\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tevent.detail = -1;", "+\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\tlistener.getRole(event);", "+\t\t\t}", "+\t", "+\t\t\t// No accessible listener is overriding the role of the control, so let Cocoa return the default set for the control.", "+\t\t\tif (event.detail == -1) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\t", "+\t\t\tif ((childID == ACC.CHILDID_SELF) && (actionNames != null)) {", "+\t\t\t\treturn retainedAutoreleased(actionNames);", "+\t\t\t}", "+\t\t\t", "+\t\t\tNSMutableArray returnValue = NSMutableArray.arrayWithCapacity(5);", "+\t\t\t", "+\t\t\tswitch (event.detail) {", "+\t\t\t\tcase ACC.ROLE_PUSHBUTTON:", "+\t\t\t\tcase ACC.ROLE_RADIOBUTTON:", "+\t\t\t\tcase ACC.ROLE_CHECKBUTTON:", "+\t\t\t\tcase ACC.ROLE_TABITEM:", "+\t\t\t\tcase ACC.ROLE_LINK:", "+\t\t\t\tcase ACC.ROLE_CHECK_MENU_ITEM:", "+\t\t\t\tcase ACC.ROLE_RADIO_MENU_ITEM:", "+\t\t\t\tcase ACC.ROLE_SPLITBUTTON:", "+\t\t\t\t\treturnValue.addObject(OS.NSAccessibilityPressAction);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ACC.ROLE_COMBOBOX:", "+\t\t\t\t\treturnValue.addObject(OS.NSAccessibilityConfirmAction);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ACC.ROLE_WINDOW:", "+\t\t\t\tcase ACC.ROLE_DIALOG:", "+//\t\t\t\t\tTODO", "+//\t\t\t\t\treturnValue.addObject(OS.NSAccessibilityRaiseAction);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t", "+\t", "+\t\t\tif (childID == ACC.CHILDID_SELF) {", "+\t\t\t\tactionNames = returnValue;", "+\t\t\t\tactionNames.retain();", "+\t\t\t\treturn retainedAutoreleased(actionNames);", "+\t\t\t} else {", "+\t\t\t\t// Caller must retain if they want to hold on to it.", "+\t\t\t\treturn returnValue;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b5020ca4d5955553b74bdea98a0bf7b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "00d5736c6ded01b673225fd094e947d8370e60ec", "commitAfterChange": "2db73adf5b67e4cd6d82055843808cdcf5220029", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": "  \tid getAttributedStringForRangeParameterizedAttribute(id parameter, int childID)", "signatureAfterChange": "  \tid getAttributedStringForRangeParameterizedAttribute(id parameter, int childID)", "diff": ["-\t\t\tif (attributeRange.location < range.location) {", "-\t\t\t\tattributeRange.length -= (range.location - attributeRange.location);", "-\t\t\t\tattributeRange.location = range.location;", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (attributeRange.location + attributeRange.length > range.location + range.length) {", "-\t\t\t\tattributeRange.length = range.location + range.length - attributeRange.location; ", "-\t\t\t}", "-\t\t\t", "-\t\t\t\t\tfloat /*double*/[] comps = ts.foreground.handle;", "-\t\t\t\t\tNSColor fgColor = NSColor.colorWithDeviceRed(comps[0], comps[1], comps[2], comps[3]);", "-\t\t\t\t\tattribString.addAttribute(OS.NSAccessibilityForegroundColorTextAttribute, fgColor, attributeRange);", "+\t\t\t\t\taddCGColor(ts.foreground.handle, attribString, OS.NSAccessibilityForegroundColorTextAttribute, attributeRange);", "-\t\t\t\t\tfloat /*double*/[] comps = ts.background.handle;", "-\t\t\t\t\tNSColor fgColor = NSColor.colorWithDeviceRed(comps[0], comps[1], comps[2], comps[3]);", "-\t\t\t\t\tattribString.addAttribute(OS.NSAccessibilityBackgroundColorTextAttribute, fgColor, attributeRange);", "+\t\t\t\t\taddCGColor(ts.background.handle, attribString, OS.NSAccessibilityBackgroundColorTextAttribute, attributeRange);", "-\t\t\t\t\tfloat /*double*/ [] comps = ts.underlineColor.handle;", "-\t\t\t\t\tNSColor fgColor = NSColor.colorWithDeviceRed(comps[0], comps[1], comps[2], comps[3]);", "-\t\t\t\t\tattribString.addAttribute(OS.NSAccessibilityUnderlineColorTextAttribute, fgColor, attributeRange);", "+\t\t\t\t\taddCGColor(ts.underlineColor.handle, attribString, OS.NSAccessibilityUnderlineColorTextAttribute, attributeRange);", "-\t\t\t\t\t\tfloat /*double*/ [] comps = ts.strikeoutColor.handle;", "-\t\t\t\t\t\tNSColor fgColor = NSColor.colorWithDeviceRed(comps[0], comps[1], comps[2], comps[3]);", "-\t\t\t\t\t\tattribString.addAttribute(OS.NSAccessibilityStrikethroughColorTextAttribute, fgColor, attributeRange);", "+\t\t\t\t\t\taddCGColor(ts.strikeoutColor.handle, attribString, OS.NSAccessibilityStrikethroughColorTextAttribute, attributeRange);", "-//\t\t// Now add the alignment, justification, and indent, if available.", "-//\t\tAccessibleAttributeEvent docAttributes = new AccessibleAttributeEvent(this);", "-//\t\tdocAttributes.indent = Integer.MAX_VALUE; // if unchanged no listener filled it in.", "-//\t\tif (accessibleAttributeListeners.size() > 0) {", "-//\t\t\tfor (int i = 0; i < accessibleAttributeListeners.size(); i++) {", "-//\t\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "-//\t\t\t\tlistener.getAttributes(docAttributes);", "-//\t\t\t}", "-//\t\t}", "+\t\t// Now add the alignment, justification, and indent, if available.", "+\t\tAccessibleAttributeEvent docAttributes = new AccessibleAttributeEvent(this);", "+\t\tdocAttributes.indent = Integer.MAX_VALUE; // if unchanged no listener filled it in.", "+\t\tif (accessibleAttributeListeners.size() > 0) {", "+\t\t\tfor (int i = 0; i < accessibleAttributeListeners.size(); i++) {", "+\t\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "+\t\t\t\tlistener.getAttributes(docAttributes);", "+\t\t\t}", "+\t\t}", "+\t\tif (docAttributes.indent != Integer.MAX_VALUE) {", "+\t\t\tNSMutableDictionary paragraphDict = NSMutableDictionary.dictionaryWithCapacity(3);", "+\t\t\tint osAlignment = 0;", "+\t\t\t// FIXME: Doesn't account for right-to-left text?", "+\t\t\tswitch (docAttributes.alignment) {", "+\t\t\tcase SWT.CENTER:", "+\t\t\t\tosAlignment = OS.NSCenterTextAlignment;", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.RIGHT:", "+\t\t\t\tosAlignment = OS.NSRightTextAlignment;", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.LEFT:", "+\t\t\tdefault:", "+\t\t\t\tosAlignment = OS.NSLeftTextAlignment;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tparagraphDict.setValue(NSNumber.numberWithInt(osAlignment), NSString.stringWith(\"AXTextAlignment\"));", "+\t\t\t//paragraphDict.setValue(NSNumber.numberWithInt(osAlignment), NSString.stringWith(\"AXVisualTextAlignment\"));", "+\t\t\tattribString.addAttribute(NSString.stringWith(\"AXParagraphStyle\"), paragraphDict, range);", "+\t\t}", "+\t\t"]}], "num": 599}
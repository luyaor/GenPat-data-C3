{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9895be044bf0e63d11ecead2b7abecb9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1a35848c0cb3a97b8b0bc1a0d39d38d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "51fb733e40525a6aad962d1c6ada5dc8b68dbc9a", "commitAfterChange": "e8f096301ee362f879132712d15318bcd81b37a4", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public Shell getActiveShell ()", "signatureAfterChange": " public Shell getActiveShell ()", "diff": ["+\t/*", "+\t* Feature in the Macintosh.  When SetWindowActivationScope()", "+\t* is used with kWindowActivationScopeNone to stop a window from", "+\t* becoming active and taking focus when shown, for some reason,", "+\t* when focus is lost to the desktop or another application,", "+\t* the window becomes active.  Specifically, IsWindowActive()", "+\t* starts to return true for the window, even though is has", "+\t* never been made active.  The fix is to check that the current", "+\t* and front process are the same before calling IsWindowActive().", "+\t*/", "+\tint [] psn1 = new int [2];", "+\tif (OS.GetCurrentProcess (psn1) == OS.noErr) {", "+\t\tint [] psn2 = new int [2];", "+\t\tif (OS.GetFrontProcess (psn2) == OS.noErr) {", "+\t\t\tboolean [] result = new boolean [1];", "+\t\t\tif (OS.SameProcess (psn1, psn2, result) == OS.noErr) {", "+\t\t\t\tif (!result [0]) return null;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d48675e21e111f92e7ee375376c8d778", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "9590c886e5aa5dfa6590d62b81b13c52ec4149a6", "commitAfterChange": "eff4a91fc5004d296b6e06870a24dbbbada441e2", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "diff": ["+\t/*", "+\t* Feature in AWT.  When an AWT Window is activated,", "+\t* for some reason, it seems to forward the WM_ACTIVATE", "+\t* message to the parent.  Normally, the parent is an", "+\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "+\t* shell gets the WM_ACTIVATE and assumes that it came", "+\t* from Windows.  When an SWT shell is activated it", "+\t* restores focus to the last control that had focus.", "+\t* If this control is an embedded composite, it takes", "+\t* focus from the AWT Window.  The fix is to ignore", "+\t* WM_ACTIVATE messages that come from AWT Windows.", "+\t*/", "+\tif (OS.GetParent (lParam) == handle) {", "+\t\tTCHAR buffer = new TCHAR (0, 128);", "+\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "+\t\tString className = buffer.toString (0, buffer.strlen ());", "+\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "+\t\t\treturn LRESULT.ONE;", "+\t\t}", "+\t}"]}], "num": 52788}
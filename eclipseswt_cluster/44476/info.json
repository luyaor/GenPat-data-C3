{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51ccc43db9234837ac4e844616517797", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9db90cb8e8a5bde799677a5befa28ac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "3e8a9d5abdd3552e764c4e434d570d1305d59c4c", "commitAfterChange": "ed8343094c312fe5eb4cc7741aacac79be3dc933", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public CTabFolder(Composite parent, int style)", "signatureAfterChange": "\r public CTabFolder(Composite parent, int style)", "diff": ["-\tColor background = getBackground();\r", "-\t\r", "-/* Start ACCESSIBILITY */\r", "-\tgetAccessible().addAccessibleListener(new AccessibleAdapter() {\r", "-\t\tpublic void getName(AccessibleEvent e) {\r", "-\t\t\tint childID = e.childID;\r", "-\t\t\tif (childID > items.length) return;\r", "-\t\t\tif (childID != ACC.CHILDID_SELF) {\r", "-\t\t\t\tCTabItem childItem = items[childID - 1];\r", "-\t\t\t\te.result = childItem.getText();\r", "-\t\t\t}\r", "-\t\t}\r", "+\tinitAccessible();\t\r", "-\t\tpublic void getHelp(AccessibleEvent e) {\r", "-\t\t\tint childID = e.childID;\r", "-\t\t\tif (childID > items.length) return;\r", "-\t\t\tif (childID == ACC.CHILDID_SELF) {\r", "-\t\t\t\te.result = getToolTipText();\r", "-\t\t\t} else {\r", "-\t\t\t\tCTabItem childItem = items[childID - 1];\r", "-\t\t\t\te.result = childItem.getToolTipText();\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\tpublic void getKeyboardShortcut(AccessibleEvent e) {\r", "-\t\t\tint childID = e.childID;\r", "-\t\t\tif (childID > items.length) return;\r", "-\t\t\tif (childID != ACC.CHILDID_SELF) {\r", "-\t\t\t\te.result = \"Ctrl+TAB\";\r", "-\t\t\t}\r", "-\t\t}\r", "-\t});\r", "-\t\t\r", "-\tgetAccessible().addAccessibleControlListener(new AccessibleControlAdapter() {\r", "-\t\tpublic void hitTest(AccessibleControlEvent e) {\r", "-\t\t\tPoint testPoint = toControl(new Point(e.x, e.y));\r", "-\t\t\tint childID = ACC.CHILDID_SELF;\r", "-\t\t\tfor (int i = 0; i < items.length; i++) {\r", "-\t\t\t\tRectangle bounds = items[i].getBounds();\r", "-\t\t\t\tif (bounds.contains(testPoint)) {\r", "-\t\t\t\t\tchildID = i + 1;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (childID == ACC.CHILDID_SELF && !getBounds().contains(testPoint)) {\r", "-\t\t\t\te.childID = ACC.CHILDID_NONE;\r", "-\t\t\t}\r", "-\t\t\te.childID = childID;\r", "-\t\t}\r", "-\t\t\r", "-\t\tpublic void getLocation(AccessibleControlEvent e) {\r", "-\t\t\tint childID = e.childID;\r", "-\t\t\tif (childID > items.length) return;\r", "-\t\t\tRectangle location;\r", "-\t\t\tif (childID == ACC.CHILDID_SELF) {\r", "-\t\t\t\tlocation = getBounds();\r", "-\t\t\t} else {\r", "-\t\t\t\tCTabItem childItem = items[childID - 1];\r", "-\t\t\t\tlocation = childItem.getBounds();\r", "-\t\t\t}\r", "-\t\t\tPoint pt = toDisplay(new Point(location.x, location.y));\r", "-\t\t\te.x = pt.x;\r", "-\t\t\te.y = pt.y;\r", "-\t\t\te.width = location.width;\r", "-\t\t\te.height = location.height;\r", "-\t\t}\r", "-\t\t\r", "-\t\tpublic void navigate(AccessibleControlEvent e) {\r", "-\t\t\tint childID = ACC.CHILDID_NONE;\r", "-\t\t\tswitch (e.code) {\r", "-\t\t\t\tcase ACC.NAVDIR_UP:\r", "-\t\t\t\tcase ACC.NAVDIR_DOWN:\r", "-\t\t\t\t\tif (childID == ACC.CHILDID_SELF) childID = ACC.CHILDID_SELF;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase ACC.NAVDIR_FIRSTCHILD:\r", "-\t\t\t\t\tif (items.length > 0) childID = 1;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase ACC.NAVDIR_LASTCHILD:\r", "-\t\t\t\t\tif (items.length > 0) childID = items.length;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase ACC.NAVDIR_LEFT:\r", "-\t\t\t\tcase ACC.NAVDIR_PREVIOUS:\r", "-\t\t\t\t\tif (childID == ACC.CHILDID_SELF) childID = ACC.CHILDID_SELF;\r", "-\t\t\t\t\tif (items.length > 0 && childID > 1) childID = childID - 1;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase ACC.NAVDIR_RIGHT:\r", "-\t\t\t\tcase ACC.NAVDIR_NEXT:\r", "-\t\t\t\t\tif (childID == ACC.CHILDID_SELF) childID = ACC.CHILDID_SELF;\r", "-\t\t\t\t\tif (items.length > 0 && childID < items.length) childID = childID + 1;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t\te.childID = childID;\r", "-\t\t}\r", "-\t\t\r", "-\t\tpublic void getChildCount(AccessibleControlEvent e) {\r", "-\t\t\te.code = items.length;\r", "-\t\t}\r", "-\t\t\r", "-\t\tpublic void getDefaultAction(AccessibleControlEvent e) {\r", "-\t\t\tint childID = e.childID;\r", "-\t\t\tif (childID > items.length) return;\r", "-\t\t\tif (childID != ACC.CHILDID_SELF) {\r", "-\t\t\t\te.result = \"Switch\";\r", "-\t\t\t}\r", "-\t\t}\r", "-\r", "-\t\tpublic void getRole(AccessibleControlEvent e) {\r", "-\t\t\tint childID = e.childID;\r", "-\t\t\tif (childID > items.length) return;\r", "-\t\t\tif (childID == ACC.CHILDID_SELF) {\r", "-\t\t\t\te.code = ACC.ROLE_SYSTEM_PAGETABLIST;\r", "-\t\t\t} else {\r", "-\t\t\t\te.code = ACC.ROLE_SYSTEM_PAGETAB;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\tpublic void getSelection(AccessibleControlEvent e) {\r", "-\t\t\tif (selectedIndex == -1) {\r", "-\t\t\t\te.childID = ACC.CHILDID_NONE;\r", "-\t\t\t} else {\r", "-\t\t\t\te.childID = selectedIndex + 1;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\tpublic void getState(AccessibleControlEvent e) {\r", "-\t\t\tint childID = e.childID;\r", "-\t\t\tif (childID > items.length) return;\r", "-\t\t\tint state;\r", "-\t\t\tif (childID == ACC.CHILDID_SELF) {\r", "-\t\t\t\tstate = ACC.STATE_SYSTEM_NORMAL;\r", "-\t\t\t} else {\r", "-\t\t\t\tstate = ACC.STATE_SYSTEM_SELECTABLE;\r", "-\t\t\t\tif (selectedIndex + 1 == childID) {\r", "-\t\t\t\t\tstate |= ACC.STATE_SYSTEM_SELECTED;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\te.code = state;\r", "-\t\t}\r", "-\t\t\r", "-\t\tpublic void getChildren(AccessibleControlEvent e) {\r", "-\t\t\tObject[] children = new Object[items.length];\r", "-\t\t\tfor (int i = 0; i < items.length; i++) {\r", "-\t\t\t\tchildren[i] = new Integer(i + 1);\r", "-\t\t\t}\r", "-\t\t\te.children = children;\r", "-\t\t}\r", "-\t});\r", "-/* End ACCESSIBILITY */\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc6c12a37d513c98681969ed95a47e24", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "df2b18d6c3d453a1cbf6420cefbca622fb8ff1da", "commitAfterChange": "fb1e2071d35034cab2aa0ee2da4593b8398a9282", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public CTabFolder(Composite parent, int style)", "signatureAfterChange": "\r public CTabFolder(Composite parent, int style)", "diff": ["+\t\r", "+\t\r", "+/* Start ACCESSIBILITY */\r", "+\tgetAccessible().addAccessibleListener(new AccessibleAdapter() {\r", "+\t\tpublic void getName(AccessibleEvent e) {\r", "+\t\t\tint childID = e.childID;\r", "+\t\t\tif (childID > items.length) return;\r", "+\t\t\tif (childID != ACC.CHILDID_SELF) {\r", "+\t\t\t\tCTabItem childItem = items[childID - 1];\r", "+\t\t\t\te.result = childItem.getText();\r", "+\t\t\t}\r", "+\t\t}\r", "+\r", "+\t\tpublic void getHelp(AccessibleEvent e) {\r", "+\t\t\tint childID = e.childID;\r", "+\t\t\tif (childID > items.length) return;\r", "+\t\t\tif (childID == ACC.CHILDID_SELF) {\r", "+\t\t\t\te.result = getToolTipText();\r", "+\t\t\t} else {\r", "+\t\t\t\tCTabItem childItem = items[childID - 1];\r", "+\t\t\t\te.result = childItem.getToolTipText();\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\tpublic void getKeyboardShortcut(AccessibleEvent e) {\r", "+\t\t\tint childID = e.childID;\r", "+\t\t\tif (childID > items.length) return;\r", "+\t\t\tif (childID != ACC.CHILDID_SELF) {\r", "+\t\t\t\te.result = \"Ctrl+TAB\";\r", "+\t\t\t}\r", "+\t\t}\r", "+\t});\r", "+\t\t\r", "+\tgetAccessible().addAccessibleControlListener(new AccessibleControlAdapter() {\r", "+\t\tpublic void accHitTest(AccessibleControlEvent e) {\r", "+\t\t\tPoint testPoint = toControl(new Point(e.x, e.y));\r", "+\t\t\tint childID = ACC.CHILDID_SELF;\r", "+\t\t\tfor (int i = 0; i < items.length; i++) {\r", "+\t\t\t\tRectangle bounds = items[i].getBounds();\r", "+\t\t\t\tif (bounds.contains(testPoint)) {\r", "+\t\t\t\t\tchildID = i + 1;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (childID == ACC.CHILDID_SELF && !getBounds().contains(testPoint)) {\r", "+\t\t\t\te.childID = ACC.CHILDID_NONE;\r", "+\t\t\t}\r", "+\t\t\te.childID = childID;\r", "+\t\t}\r", "+\t\t\r", "+\t\tpublic void accLocation(AccessibleControlEvent e) {\r", "+\t\t\tint childID = e.childID;\r", "+\t\t\tif (childID > items.length) return;\r", "+\t\t\tRectangle location;\r", "+\t\t\tif (childID == ACC.CHILDID_SELF) {\r", "+\t\t\t\tlocation = getBounds();\r", "+\t\t\t} else {\r", "+\t\t\t\tCTabItem childItem = items[childID - 1];\r", "+\t\t\t\tlocation = childItem.getBounds();\r", "+\t\t\t}\r", "+\t\t\tPoint pt = toDisplay(new Point(location.x, location.y));\r", "+\t\t\te.x = pt.x;\r", "+\t\t\te.y = pt.y;\r", "+\t\t\te.width = location.width;\r", "+\t\t\te.height = location.height;\r", "+\t\t}\r", "+\t\t\r", "+\t\tpublic void accNavigate(AccessibleControlEvent e) {\r", "+\t\t\tint childID = ACC.CHILDID_NONE;\r", "+\t\t\tswitch (e.code) {\r", "+\t\t\t\tcase ACC.NAVDIR_UP:\r", "+\t\t\t\tcase ACC.NAVDIR_DOWN:\r", "+\t\t\t\t\tif (childID == ACC.CHILDID_SELF) childID = ACC.CHILDID_SELF;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase ACC.NAVDIR_FIRSTCHILD:\r", "+\t\t\t\t\tif (items.length > 0) childID = 1;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase ACC.NAVDIR_LASTCHILD:\r", "+\t\t\t\t\tif (items.length > 0) childID = items.length;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase ACC.NAVDIR_LEFT:\r", "+\t\t\t\tcase ACC.NAVDIR_PREVIOUS:\r", "+\t\t\t\t\tif (childID == ACC.CHILDID_SELF) childID = ACC.CHILDID_SELF;\r", "+\t\t\t\t\tif (items.length > 0 && childID > 1) childID = childID - 1;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase ACC.NAVDIR_RIGHT:\r", "+\t\t\t\tcase ACC.NAVDIR_NEXT:\r", "+\t\t\t\t\tif (childID == ACC.CHILDID_SELF) childID = ACC.CHILDID_SELF;\r", "+\t\t\t\t\tif (items.length > 0 && childID < items.length) childID = childID + 1;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\te.childID = childID;\r", "+\t\t}\r", "+\t\t\r", "+\t\tpublic void getChildCount(AccessibleControlEvent e) {\r", "+\t\t\te.code = items.length;\r", "+\t\t}\r", "+\t\t\r", "+\t\tpublic void getDefaultAction(AccessibleControlEvent e) {\r", "+\t\t\tint childID = e.childID;\r", "+\t\t\tif (childID > items.length) return;\r", "+\t\t\tif (childID != ACC.CHILDID_SELF) {\r", "+\t\t\t\te.result = \"Switch\";\r", "+\t\t\t}\r", "+\t\t}\r", "+\r", "+\t\tpublic void getRole(AccessibleControlEvent e) {\r", "+\t\t\tint childID = e.childID;\r", "+\t\t\tif (childID > items.length) return;\r", "+\t\t\tif (childID == ACC.CHILDID_SELF) {\r", "+\t\t\t\te.code = ACC.ROLE_SYSTEM_PAGETABLIST;\r", "+\t\t\t} else {\r", "+\t\t\t\te.code = ACC.ROLE_SYSTEM_PAGETAB;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\tpublic void getSelection(AccessibleControlEvent e) {\r", "+\t\t\tif (selectedIndex == -1) {\r", "+\t\t\t\te.childID = ACC.CHILDID_NONE;\r", "+\t\t\t} else {\r", "+\t\t\t\te.childID = selectedIndex + 1;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\tpublic void getState(AccessibleControlEvent e) {\r", "+\t\t\tint childID = e.childID;\r", "+\t\t\tif (childID > items.length) return;\r", "+\t\t\tint state;\r", "+\t\t\tif (childID == ACC.CHILDID_SELF) {\r", "+\t\t\t\tstate = ACC.STATE_SYSTEM_NORMAL;\r", "+\t\t\t} else {\r", "+\t\t\t\tstate = ACC.STATE_SYSTEM_SELECTABLE;\r", "+\t\t\t\tif (selectedIndex + 1 == childID) {\r", "+\t\t\t\t\tstate |= ACC.STATE_SYSTEM_SELECTED;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\te.code = state;\r", "+\t\t}\r", "+\t\t\r", "+\t\tpublic void getChildren(AccessibleControlEvent e) {\r", "+\t\t\tObject[] children = new Object[items.length];\r", "+\t\t\tfor (int i = 0; i < items.length; i++) {\r", "+\t\t\t\tchildren[i] = new Integer(i + 1);\r", "+\t\t\t}\r", "+\t\t\te.children = children;\r", "+\t\t}\r", "+\t});\r", "+/* End ACCESSIBILITY */\r"]}], "num": 44476}
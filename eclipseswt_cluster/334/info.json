{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c1ddae3e29e72efc10a43d844a06808", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f5501dca2a3c2dd314aafb52bb82246", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "d81e473e483ae4fce965f43d47dd34220fc3e0cd", "commitAfterChange": "a38b0e1c16db17f32238a4af0323e106634ade69", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void setFont (int index, Font font)", "signatureAfterChange": " public void setFont (int index, Font font)", "diff": ["+\tif (font != null && font.isDisposed ()) {", "+\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tint count = Math.max (1, parent.columnCount);", "+\tif (0 > index || index > count - 1) return;", "+\tint parentHandle = parent.handle;", "+\tint column = OS.gtk_tree_view_get_column (parentHandle, index);", "+\tif (column == 0) return;", "+\tint modelIndex = parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;", "+\tint fontHandle  = font != null ? font.handle : 0;", "+\tOS.gtk_list_store_set (parent.modelHandle, handle, modelIndex + 4, fontHandle, -1);", "+\t", "+\tif (font != null) {", "+\t\tboolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;", "+\t\tif (!customDraw) {", "+\t\t\tint list = OS.gtk_tree_view_column_get_cell_renderers (column);", "+\t\t\tint length = OS.g_list_length (list);", "+\t\t\tint imageRenderer = OS.g_list_nth_data (list, length - 2);", "+\t\t\tint textRenderer = OS.g_list_nth_data (list, length - 1);", "+\t\t\tOS.g_list_free (list);", "+\t\t\tOS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.pixbufCellDataProc, parent.handle, 0);", "+\t\t\tOS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.textCellDataProc, parent.handle, 0);", "+\t\t\tif (parent.columnCount == 0) {", "+\t\t\t\tparent.firstCustomDraw = true;", "+\t\t\t} else {", "+\t\t\t\tparent.columns [index].customDraw = true;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b862701761ca731241a9bdd6d8273528", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d412b6257ae0dc29106f460bb8ad57dae5af6e21", "commitAfterChange": "63b1a2d36990c1f8e8816e7709fc0b09bed89050", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void setItems (String [] items)", "signatureAfterChange": " public void setItems (String [] items)", "diff": ["-\t/*if (items == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tif (items == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tOS.gtk_signal_handler_unblock_by_data (entryHandle, SWT.Modify);*/", "+\tOS.gtk_signal_handler_unblock_by_data (entryHandle, SWT.Modify);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db687bf43dfd9adf69344a02a231c923", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "0f06225365bed5a5d852bb4c4fff922bf5df9afd", "commitAfterChange": "9d61c21cc042d47df7b8419c5fa425957e74e3b2", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " void onKeyDown (Event event)", "signatureAfterChange": " void onKeyDown (Event event)", "diff": ["-\t\t\tbreak;", "+\t\t\treturn;", "-\t\t\tbreak;", "+\t\t\treturn;", "-\t\t\tbreak;", "+\t\t\treturn;", "-\t\t\tbreak;\t\t\t", "+\t\t\treturn;", "-\t\t\tbreak;\t\t", "+\t\t\treturn;", "-\t\t\tbreak;", "+\t\t\treturn;", "-\t\t\tbreak;", "+\t\t\treturn;", "-\t\t\tbreak;", "+\t\t\treturn;", "-\tif (event.character == ' ') onSpace ();", "-\tif (event.character == SWT.CR) onCR ();", "+\tif (event.character == ' ') {", "+\t\tonSpace ();", "+\t\treturn;", "+\t}", "+\tif (event.character == SWT.CR) {", "+\t\tonCR ();", "+\t\treturn;", "+\t}", "+\tif ((event.stateMask & SWT.CTRL) != 0) return;", "+\t", "+\tint initialIndex = focusItem.availableIndex;", "+\tchar character = Character.toLowerCase (event.character);", "+\t/* check available items from current focus item to bottom */", "+\tfor (int i = initialIndex + 1; i < availableItems.length; i++) {", "+\t\tTreeItem item = availableItems [i];", "+\t\tString text = item.getText ();", "+\t\tif (text.length() > 0) {", "+\t\t\tif (Character.toLowerCase (text.charAt (0)) == character) {", "+\t\t\t\tselectItem (item, false);", "+\t\t\t\tsetFocusItem (item, true);", "+\t\t\t\tredrawItem (i, true);", "+\t\t\t\tshowItem (item);", "+\t\t\t\tEvent newEvent = new Event ();", "+\t\t\t\tnewEvent.item = this;", "+\t\t\t\tsendEvent (SWT.Selection, newEvent);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t}", "+\t/* check available items from top to current focus item */", "+\tfor (int i = 0; i < initialIndex; i++) {", "+\t\tTreeItem item = availableItems [i];", "+\t\tString text = item.getText ();", "+\t\tif (text.length() > 0) {", "+\t\t\tif (Character.toLowerCase (text.charAt (0)) == character) {", "+\t\t\t\tselectItem (item, false);", "+\t\t\t\tsetFocusItem (item, true);", "+\t\t\t\tredrawItem (i, true);", "+\t\t\t\tshowItem (item);", "+\t\t\t\tEvent newEvent = new Event ();", "+\t\t\t\tnewEvent.item = this;", "+\t\t\t\tsendEvent (SWT.Selection, newEvent);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e836f207bb51d068fbea7ff301fed27f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 68, "signatureBeforeChange": " void setImageExtent(Point imageExtent)", "signatureAfterChange": " public void setImage (int columnIndex, Image value)", "diff": ["- */", "-void setImageExtent(Point imageExtent) {", "-\tthis.imageExtent = imageExtent;", "-}", "+}", "+public void setImage (int columnIndex, Image value) {", "+\tcheckWidget ();", "+\tif (value != null && value.isDisposed ()) {", "+\t\terror(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tint validColumnCount = Math.max (1, parent.getColumnCount());", "+\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return;", "+\tif (images.length < columnIndex + 1) {", "+\t\tImage[] newImages = new Image[columnIndex + 1];", "+\t\tSystem.arraycopy (images, 0, newImages, 0, images.length);", "+\t\timages = newImages;", "+\t} else {", "+\t\tImage current = internalGetImage (columnIndex);", "+\t\tif (current == value) return;\t\t\t\t/* same value */", "+\t\tif (current != null && current.equals (value)) return;", "+\t}", "+\timages[columnIndex] = value;", "+\t/*", "+\t * If this is the first image being put into the table then its item height", "+\t * may be adjusted, in which case a full redraw is needed.", "+\t */", "+\tif (parent.imageHeight == 0) {", "+\t\tint oldItemHeight = parent.getItemHeight ();", "+\t\tparent.setImageHeight (value.getBounds().height);", "+\t\tif (oldItemHeight != parent.getItemHeight ()) {", "+\t\t\tif (columnIndex == 0) {", "+\t\t\t\tparent.col0ImageWidth = value.getBounds ().width;", "+\t\t\t}", "+\t\t\tparent.redraw ();", "+\t\t\treturn;", "+\t\t}", "+\t}", "+", "+\t/* ", "+\t * If this is the first image being put into column 0 then all cells", "+\t * in the column should also indent accordingly. ", "+\t */", "+\tif (columnIndex == 0 && parent.col0ImageWidth == 0) {", "+\t\tparent.col0ImageWidth = value.getBounds ().width;", "+\t\t/* redraw the column */", "+\t\tif (parent.getColumnCount () == 0) {", "+\t\t\tparent.redraw ();", "+\t\t} else {", "+\t\t\tparent.redraw (", "+\t\t\t\t0, 0,", "+\t\t\t\tparent.getColumn (0).getWidth (),", "+\t\t\t\tparent.getClientArea ().height,", "+\t\t\t\ttrue);", "+\t\t}", "+\t}", "+\tredrawItem ();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9af342460cea059ef3869addfd6be2a0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0cb16698d77456121eddadf94aad89326dddfa90", "commitAfterChange": "400a41972553b6a4188a913a649f045d7101753f", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public boolean sleep ()", "signatureAfterChange": " public boolean sleep ()", "diff": ["-\t//TODO need to sleep waiting for the next event", "+\tif (getMessageCount () != 0) return true;", "+\tif (fds == 0) {", "+\t\tallocated_nfds = 2;", "+\t\tfds = OS.g_malloc (OS.GPollFD_sizeof () * allocated_nfds);", "+\t}", "+\tmax_priority [0] = timeout [0] = 0;", "+\tint /*long*/ context = OS.g_main_context_default ();", "+\tboolean result = false;", "-\t\tif (getMessageCount () != 0) break;", "-\t\tif (OS.gtk_events_pending () != 0) break;", "-\t\ttry {", "-\t\t\tsynchronized (OS_LOCK) {", "-\t\t\t\tOS_LOCK.wait (50);", "+\t\tif (OS.g_main_context_acquire (context)) {", "+\t\t\tresult = OS.g_main_context_prepare (context, max_priority);", "+\t\t\tint nfds;", "+\t\t\twhile ((nfds = OS.g_main_context_query (context, max_priority [0], timeout, fds, allocated_nfds)) > allocated_nfds) {", "+\t\t\t\tOS.g_free (fds);", "+\t\t\t\tallocated_nfds = nfds;", "+\t\t\t\tfds = OS.g_malloc (OS.GPollFD_sizeof() * allocated_nfds);", "-\t\t} catch (Exception e) {", "-\t\t\treturn false;", "+\t\t\tint /*long*/ poll = OS.g_main_context_get_poll_func (context);", "+\t\t\tif (poll != 0) {", "+\t\t\t\tif (nfds > 0 || timeout [0] != 0) {", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Bug in GTK. For some reason, g_main_context_wakeup() may ", "+\t\t\t\t\t* fail to wake up the UI thread from the polling function.", "+\t\t\t\t\t* The fix is to sleep for a maximum of 50 milliseconds.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif (timeout [0] < 0) timeout [0] = 50;", "+\t\t\t\t\t", "+\t\t\t\t\t/* Exit the OS lock to allow other threads to enter GTK */", "+\t\t\t\t\tint count = Callback.getEntryCount ();", "+\t\t\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\t\t\tsynchronized (OS_LOCK) {", "+\t\t\t\t\t\t\tOS.MonitorExit (OS_LOCK);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\twake = false;", "+\t\t\t\t\t\tOS.Call (poll, fds, nfds, timeout [0]);", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\t\t\t\tsynchronized (OS_LOCK) {", "+\t\t\t\t\t\t\t\tOS.MonitorEnter (OS_LOCK);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.g_main_context_check (context, max_priority [0], fds, nfds);", "+\t\t\tOS.g_main_context_release (context);", "-\t} while (!wake);", "+\t} while (!result && getMessageCount () == 0 && !wake);"]}], "num": 334}
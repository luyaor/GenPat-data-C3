{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c69d477e908f2f8d3f90e6725f921ecb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9414efd086e53d455ae3877ab9a188c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "cf1fe9a62b0aa80637743d74671152a60629becb", "commitAfterChange": "a6d5c3a070f387df903b1f6594dcfd6eb663372e", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "  void sendPaintItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd)", "signatureAfterChange": "  void sendPaintItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd)", "diff": ["-\tboolean drawSelected = false, drawBackground = false;", "+\tboolean drawSelected = false, drawBackground = false, drawHot = false;", "+\tif (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0) {", "+\t\tdrawHot = hotIndex == nmcd.dwItemSpec;", "+\t}", "+\tif (drawHot) event.detail |= SWT.HOT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e00dee58acd695bc4dc852b2daef82bc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "0bcce8701fee7076e5f1dd2db6410f49b6638dae", "commitAfterChange": "bd48e2b84a6482ec594a06a3c3531b924107c392", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "\r void calculateTopIndex()", "signatureAfterChange": "\r void calculateTopIndex()", "diff": ["-\tif (topIndex > 0 && clientAreaHeight > 0) {\r", "-\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;\r", "-\t\tint fullLineTopPixel = topIndex * verticalIncrement;\r", "-\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;\r", "-\t\tif (fullLineVisibleHeight < verticalIncrement) {\r", "-\t\t\ttopIndex--;\r", "+\tif (topIndex > 0) {\r", "+\t\tif (clientAreaHeight > 0) {\r", "+\t\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;\r", "+\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;\r", "+\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;\r", "+\t\t\t// set top index to partially visible line if no line fully fits in \r", "+\t\t\t// client area or if space is available but not used (the latter should\r", "+\t\t\t// never happen because we use claimBottomFreeSpace)\r", "+\t\t\tif (fullLineVisibleHeight < verticalIncrement) {\r", "+\t\t\t\ttopIndex--;\r", "+\t\t\t}\r", "-\t}\t\r", "+\t\telse \r", "+\t\tif (topIndex >= content.getLineCount()) {\r", "+\t\t\ttopIndex = content.getLineCount() - 1;\r", "+\t\t}\r", "+\t}\r", "+\t\ttopOffset = content.getOffsetAtLine(topIndex);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7c02a1d7aa442a17b3eac452a5c2deb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/photon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "c0e47047fb12b4ad6c1cd291125c302ee4573df0", "commitAfterChange": "772f59dfc148ceb100936d7357b9a0b9d85ab236", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "  int Pt_CB_WEB_DATA_REQ(int info)", "signatureAfterChange": "  int Pt_CB_WEB_DATA_REQ(int info)", "diff": ["-\t\t\tdata = text;", "+\t\t\t/*", "+\t\t\t* Feature on Photon. The PtSetResource() call for PtWebClient data imposes", "+\t\t\t* a limit on the size of the text buffer being passed. The workaround is", "+\t\t\t* to break the text into 1KB chunks.", "+\t\t\t*/", "+\t\t\tif (text.length() - textOffset > 1024) {", "+\t\t\t\tdata = text.substring(textOffset, textOffset + 1024);", "+\t\t\t\ttextOffset += 1024;", "+\t\t\t} else {", "+\t\t\t\tdata = text.substring(textOffset);", "+\t\t\t}", "-\tif (data != null ) {", "+\tif (data != null) {", "-\tif( clientData.data != 0 ) OS.free(clientData.data);", "+\tif (clientData.data != 0) OS.free(clientData.data);", "+\treturn OS.Pt_CONTINUE;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ae16c71c4bf262b77e3cb2b591c5d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "b214f03587a380d65144d1468f8b9d961d9ef75a", "commitAfterChange": "7ca694dfa956acb1df3610138ed4d7a3be85276f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void createScrolledHandle (int parentHandle)", "signatureAfterChange": "  void createScrolledHandle (int parentHandle)", "diff": ["+\tif ((state & CANVAS) != 0 && (style & SWT.NO_FOCUS) == 0) {", "+\t\timHandle = OS.gtk_im_multicontext_new ();", "+\t\tif (imHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a899d2fb05ccc86f7c25cf67c17c192", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "f5a0d3582f75308849543d0ff0517400d5971efe", "commitAfterChange": "6a8f64aba74c6fc7a655a14fc7ca54a1aef70af2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void _addListener (int eventType, Listener listener)", "signatureAfterChange": "  void _addListener (int eventType, Listener listener)", "diff": ["-\t\t\tif (hwndHeader == 0) {", "-\t\t\t\tcreateParent ();", "-\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\tbits |= OS.TVS_NOHSCROLL;", "-\t\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, bits);", "+\t\t\tif (hwndHeader == 0) createParent ();", "+\t\t\tint oldBits = OS.GetWindowLong (handle, OS.GWL_STYLE), newBits = oldBits;", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When the tree has the style", "+\t\t\t* TVS_FULLROWSELECT, the background color for the", "+\t\t\t* entire row is filled when an item is painted,", "+\t\t\t* drawing on top of any custom drawing.  The fix", "+\t\t\t* is to clear TVS_FULLROWSELECT.", "+\t\t\t*/", "+\t\t\tif ((style & SWT.FULL_SELECTION) != 0) newBits &= ~OS.TVS_FULLROWSELECT;", "+\t\t\tnewBits |= OS.TVS_NOHSCROLL;", "+\t\t\tif (newBits != oldBits) {", "+\t\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, newBits);", "+\t\t\t\tOS.InvalidateRect (handle, null, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be097a0f2d076adff9a9d3ee81ee5b9a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "e373f5396278142f786f230e12e70eb32e255671", "commitAfterChange": "36b4f454fdb805a23bdacc51f84491a19f6bf410", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r void interpretOsAnswer(String osAnswer)", "signatureAfterChange": "\r \r void interpretOsAnswer(String osAnswer)", "diff": ["-\tfileName = fullPath;\r", "+\tfileName = fullPath.substring(separatorIndex+1);\r", "+\tfilterPath = fullPath.substring(0, separatorIndex);\r", "-\t\t\tfileNames[i] = new String(Converter.mbcsToWcs(null, bytes));\r", "+\t\t\tString name = new String(Converter.mbcsToWcs(null, bytes));\r", "+\t\t\tfileNames[i] = name.substring(calculateLastSeparatorIndex(name)+1);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8567e5866727c45a516b314801877ae7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "4def951fc85e643080de398e85c25cb30ec79f91", "commitAfterChange": "ea10febb5ae3b0d1b19a13c89b6c7b27ab367f3a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["+\tif ((style & SWT.CHECK) != 0) {", "+\t\tcheckRenderer = OS.gtk_cell_renderer_toggle_new ();", "+\t\tif (checkRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.g_object_ref (checkRenderer);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57b58c8418d350955cd02f2f3f2a6963", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "ed30b41a9f49fdd9292a9997223e42cf5d5f4c63", "commitAfterChange": "3f829157e84e6f42e86ed587cb5458d2e969dac6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["+\tif ((style & SWT.NO_FOCUS) == 0) {", "+\t\tfocusHandle = OS.XmCreateDrawingArea (handle, null, null, 0);", "+\t\tif (focusHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77d6d0fe43a54565d6b10fe89148bb36", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "28010488e566bf094ce3de9229cc032259326182", "commitAfterChange": "f9ecf4c9e66df1150e9ae5d885c312ec8c98fab7", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  int kEventRawKeyPressed (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventRawKeyPressed (int nextHandler, int theEvent, int userData)", "diff": ["+\t* For some reason the next event handler for embedded controls", "+\t* stops the event chain and does not let the default handler", "+\t* process the raw key event into unicode.  The fix to call", "+\t* the default handler by sending the event directly to the", "+\t* application event target.", "+\t* ", "+\t* Note: should the embedded control no longer stop the event", "+\t* chain, there will be two key events issued for one key press.", "+\t*/\t", "+\tif ((state & CANVAS) != 0  && (style & SWT.EMBEDDED) != 0) {", "+\t\treturn OS.SendEventToEventTarget (theEvent, OS.GetApplicationEventTarget ());", "+\t}", "+\t", "+\t/*"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5777b4932241ca4bd293cc19365885e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "32c90bc6548eedcd9ff86eb3b07fa5d9b7d0fb20", "commitAfterChange": "c1df1ba2a1e6a57893caf639664ac1ec129b2bf9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tif (labelType == OS.XmSTRING && (style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "+\tif (labelType == OS.XmSTRING && (style & SWT.WRAP) != 0) {", "-\t\tint unavailable = 2 * (argList4 [7] + getBorderWidth());", "-\t\tString string = display.wrapText (text, font, wHint - unavailable);", "+\t\tString string = text;", "+\t\tif (wHint != SWT.DEFAULT) {", "+\t\t\tint unavailable = 2 * (argList4 [7] + getBorderWidth());", "+\t\t\tstring = display.wrapText (string, font, wHint - unavailable);", "+\t\t}", "+\t\tif (wHint == SWT.DEFAULT) {", "+\t\t\twidth += extent.x + 2 * argList4 [7];", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbb67d4caa04d52d5c6b1b12d74af33b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "a56525ddb41b82034aaca3e68e3094b41b1d92ee", "commitAfterChange": "7f080f182f6a92fcfdba594bc2e83c66e54d8c3d", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tif (wHint != SWT.DEFAULT) {\r", "-\t\t\twidth = wHint;\r", "-\t\t} \r", "-\t\telse {\r", "-\t\t\twidth = DEFAULT_WIDTH;\r", "+\t\tif (((WrappedContent) content).getVisualLineCount() != 0) {\r", "+\t\t\t// lines have already been wrapped to a specific width.\r", "+\t\t\t// use existing line count. fixes bug 9191\r", "+\t\t\twidth = lineCache.getWidth();\r", "+\t\t\tif (singleLine == false) {\r", "+\t\t\t\tcount = content.getLineCount();\r", "+\t\t\t}\r", "-\t\tif (singleLine == false) {\r", "-\t\t\t((WrappedContent) content).wrapLines(width);\r", "-\t\t\tcount = content.getLineCount();\r", "+\t\telse {\r", "+\t\t\t// lines have not been wrapped yet. wrap to width hint \r", "+\t\t\t// or to default width.\r", "+\t\t\tif (wHint != SWT.DEFAULT) {\r", "+\t\t\t\twidth = wHint;\r", "+\t\t\t} \r", "+\t\t\telse {\r", "+\t\t\t\twidth = DEFAULT_WIDTH;\r", "+\t\t\t}\r", "+\t\t\tif (singleLine == false) {\r", "+\t\t\t\t((WrappedContent) content).wrapLines(width);\r", "+\t\t\t\tcount = content.getLineCount();\r", "+\t\t\t}\r"]}], "num": 29985}
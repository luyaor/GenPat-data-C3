{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d729ec720a050785bb35d213ed6cfddb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "122ee972fc0b4fffbb18a0147dbd1f9f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTMethod.java", "commitBeforeChange": "3418cfa63d3b83d0b2d185baa847e100d68881e8", "commitAfterChange": "d45fca5fe38816ea0e49d88992f8a36f2c79c3af", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public ASTMethod(ASTClass declaringClass, String source, MethodDeclaration method)", "signatureAfterChange": " \t public ASTMethod(ASTClass declaringClass, String source, MethodDeclaration method)", "diff": ["-\tList tags = null;", "+\tList<TagElement> tags = null;", "-\t\tfor (Iterator iterator = tags.iterator(); iterator.hasNext();) {", "-\t\t\tTagElement tag = (TagElement) iterator.next();", "+\t\tfor (Iterator<TagElement> iterator = tags.iterator(); iterator.hasNext();) {", "+\t\t\tTagElement tag = iterator.next();", "-\tList parameters = method.parameters();", "+\tList<SingleVariableDeclaration> parameters = method.parameters();", "-\tfor (Iterator iterator = parameters.iterator(); iterator.hasNext(); i++) {", "-\t\tSingleVariableDeclaration param = (SingleVariableDeclaration) iterator.next();", "+\tfor (Iterator<SingleVariableDeclaration> iterator = parameters.iterator(); iterator.hasNext(); i++) {", "+\t\tSingleVariableDeclaration param = iterator.next();", "-\t\t\tfor (Iterator iterator1 = tags.iterator(); iterator1.hasNext();) {", "-\t\t\t\tTagElement tag = (TagElement) iterator1.next();", "+\t\t\tfor (Iterator<TagElement> iterator1 = tags.iterator(); iterator1.hasNext();) {", "+\t\t\t\tTagElement tag = iterator1.next();", "-\t\t\t\t\tList fragments = tag.fragments();", "+\t\t\t\t\tList<?> fragments = tag.fragments();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd040db62ed97bc2307ce4720d832911", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "18ce373e262126236e66fff74f7d2ddc7fffb312", "commitAfterChange": "41ad2a506242e46d3b0d85d794d3bd6a732e7252", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 94, "signatureBeforeChange": " \t \tvoid release(boolean destroy)", "signatureAfterChange": " \t \tvoid release(boolean destroy)", "diff": ["-\t\tIterator childIter = children.iterator();", "-\t\twhile(childIter.hasNext()) {", "-\t\t\tAccessible accessible = (Accessible) childIter.next();", "-\t\t\taccessible.release(false);", "-\t\t}", "-\t\tchildren = null;", "-\t\tif (destroy && parent != null) parent.children.remove(this);", "-\t\t", "-\t\tif (delegate != null) delegate.release();", "+\t\tif (delegate != null) {", "+\t\t\tdelegate.internal_dispose_SWTAccessibleDelegate();", "+\t\t\tdelegate.release();", "+\t\t}", "-\t\tCollection delegates = childToIdMap.values();", "-\t\tIterator iter = delegates.iterator();", "-\t\twhile (iter.hasNext()) {", "-\t\t\tSWTAccessibleDelegate childDelegate = (SWTAccessibleDelegate)iter.next();", "-\t\t\tchildDelegate.internal_dispose_SWTAccessibleDelegate();", "+\t\tif (childToIdMap != null) {", "+\t\t\tCollection delegates = childToIdMap.values();", "+\t\t\tIterator iter = delegates.iterator();", "+\t\t\twhile (iter.hasNext()) {", "+\t\t\t\tSWTAccessibleDelegate childDelegate = (SWTAccessibleDelegate)iter.next();", "+\t\t\t\tchildDelegate.internal_dispose_SWTAccessibleDelegate();", "+\t\t\t\tchildDelegate.release();", "+\t\t\t}", "+\t\t\tchildToIdMap.clear();", "+\t\t\tchildToIdMap = null;", "-\t\tchildToIdMap.clear();", "-\t\tchildToIdMap = null;", "+\t\t", "+\t\tif (tableDelegate != null) tableDelegate.release();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46e02bdc27ee1347c50d84ba946ed5b4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "d45fca5fe38816ea0e49d88992f8a36f2c79c3af", "commitAfterChange": "fc949910d259b2f09c2a6d209f57255840ca1162", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void copyClassMethodsDown(final Map classes)", "signatureAfterChange": "  void copyClassMethodsDown(final Map<String, Object[]> classes)", "diff": ["-void copyClassMethodsDown(final Map classes) {", "-\tArrayList sortedClasses = Collections.list(Collections.enumeration(classes.values()));", "-\tCollections.sort(sortedClasses, new Comparator() {", "+void copyClassMethodsDown(final Map<String, Object[]> classes) {", "+\tArrayList<Object[]> sortedClasses = Collections.list(Collections.enumeration(classes.values()));", "+\tCollections.sort(sortedClasses, new Comparator<Object>() {", "-\t\t\t\tsuperclass = getSuperclassName((Node)((Object[])classes.get(superclass))[0]);", "+\t\t\t\tsuperclass = getSuperclassName((Node)classes.get(superclass)[0]);", "-\tfor (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {", "-\t\tObject[] clazz = (Object[]) iterator.next();", "+\tfor (Iterator<Object[]> iterator = sortedClasses.iterator(); iterator.hasNext();) {", "+\t\tObject[] clazz = iterator.next();", "-\t\tArrayList methods = (ArrayList)clazz[1];", "-\t\tObject[] superclass = (Object[])classes.get(getSuperclassName(node));", "+\t\tArrayList<Node> methods = (ArrayList<Node>)clazz[1];", "+\t\tObject[] superclass = classes.get(getSuperclassName(node));", "-\t\t\tfor (Iterator iterator2 = ((ArrayList)superclass[1]).iterator(); iterator2.hasNext();) {", "+\t\t\tfor (Iterator<?> iterator2 = ((ArrayList<?>)superclass[1]).iterator(); iterator2.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "703dd923c96571a3fee69b5846e94534", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "d45fca5fe38816ea0e49d88992f8a36f2c79c3af", "commitAfterChange": "fc949910d259b2f09c2a6d209f57255840ca1162", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void merge(Document document, Document extraDocument)", "signatureAfterChange": "  void merge(Document document, Document extraDocument)", "diff": ["-\tHashMap extras = new HashMap();", "+\tHashMap<String, Node> extras = new HashMap<String, Node>();", "-\tHashMap lookup = new HashMap();", "+\tHashMap<String, Node> lookup = new HashMap<String, Node>();", "-\tArrayList sortedNodes = Collections.list(Collections.enumeration(extras.values()));", "-\tCollections.sort(sortedNodes, new Comparator() {", "+\tArrayList<Node> sortedNodes = Collections.list(Collections.enumeration(extras.values()));", "+\tCollections.sort(sortedNodes, new Comparator<Object>() {", "-\tfor (Iterator iterator = sortedNodes.iterator(); iterator.hasNext();) {", "-\t\tNode node = (Node) iterator.next();", "+\tfor (Iterator<Node> iterator = sortedNodes.iterator(); iterator.hasNext();) {", "+\t\tNode node = iterator.next();", "-\t\tNode parent = (Node)lookup.get(getKey(node.getParentNode()));", "+\t\tNode parent = lookup.get(getKey(node.getParentNode()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d301c4f0de90b6648f0821f3f71263f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/ASTClass.java", "commitBeforeChange": "3418cfa63d3b83d0b2d185baa847e100d68881e8", "commitAfterChange": "d45fca5fe38816ea0e49d88992f8a36f2c79c3af", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public ASTClass(String sourcePath, MetaData metaData)", "signatureAfterChange": "  public ASTClass(String sourcePath, MetaData metaData)", "diff": ["-\tList imports = unit.imports();", "+\tList<ImportDeclaration> imports = unit.imports();", "-\tfor (Iterator iterator = imports.iterator(); iterator.hasNext();) {", "-\t\tImportDeclaration imp = (ImportDeclaration) iterator.next();", "+\tfor (Iterator<ImportDeclaration> iterator = imports.iterator(); iterator.hasNext();) {", "+\t\tImportDeclaration imp = iterator.next();", "-\tList tags = null;", "+\tList<TagElement> tags = null;", "-\t\tfor (Iterator iterator = tags.iterator(); iterator.hasNext();) {", "-\t\t\tTagElement tag = (TagElement) iterator.next();", "+\t\tfor (Iterator<TagElement> iterator = tags.iterator(); iterator.hasNext();) {", "+\t\t\tTagElement tag = iterator.next();", "-\tArrayList fid = new ArrayList();", "+\tArrayList<ASTField> fid = new ArrayList<ASTField>();", "-\t\tList fragments = field.fragments();", "-\t\tfor (Iterator iterator = fragments.iterator(); iterator.hasNext();) {", "-\t\t\tVariableDeclarationFragment fragment = (VariableDeclarationFragment) iterator.next();", "+\t\tList<VariableDeclarationFragment> fragments = field.fragments();", "+\t\tfor (Iterator<VariableDeclarationFragment> iterator = fragments.iterator(); iterator.hasNext();) {", "+\t\t\tVariableDeclarationFragment fragment = iterator.next();", "-\tthis.fields = (ASTField[])fid.toArray(new ASTField[fid.size()]);", "+\tthis.fields = fid.toArray(new ASTField[fid.size()]);", "-\tArrayList mid = new ArrayList();", "+\tArrayList<ASTMethod> mid = new ArrayList<ASTMethod>();", "-\tthis.methods = (ASTMethod[])mid.toArray(new ASTMethod[mid.size()]);", "+\tthis.methods = mid.toArray(new ASTMethod[mid.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75a92a84b38f297cd9ff7a888423609c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64CompilationParticipant.java", "commitBeforeChange": "3418cfa63d3b83d0b2d185baa847e100d68881e8", "commitAfterChange": "d45fca5fe38816ea0e49d88992f8a36f2c79c3af", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void createBadOverwrittenMethodProblems(IJavaProject project, String root) throws CoreException", "signatureAfterChange": "  void createBadOverwrittenMethodProblems(IJavaProject project, String root) throws CoreException", "diff": ["-\tHashMap cache = new HashMap();", "-\tfor (Iterator iterator = sources.iterator(); iterator.hasNext();) {", "-\t\tString path = (String) iterator.next();", "+\tHashMap<String, TypeDeclaration> cache = new HashMap<String, TypeDeclaration>();", "+\tfor (Iterator<String> iterator = sources.iterator(); iterator.hasNext();) {", "+\t\tString path = iterator.next();", "-\t\tList superclasses = new ArrayList();", "+\t\tList<TypeDeclaration> superclasses = new ArrayList<TypeDeclaration>();", "-\t\t\tfor (Iterator iterator2 = superclasses.iterator(); iterator2.hasNext();) {", "-\t\t\t\tTypeDeclaration supertype = (TypeDeclaration) iterator2.next();", "+\t\t\tfor (Iterator<TypeDeclaration> iterator2 = superclasses.iterator(); iterator2.hasNext();) {", "+\t\t\t\tTypeDeclaration supertype = iterator2.next();", "-\t\t\t\t\t\tList mParams = method.parameters();", "-\t\t\t\t\t\tList sParams = supermethod.parameters();", "+\t\t\t\t\t\tList<SingleVariableDeclaration> mParams = method.parameters();", "+\t\t\t\t\t\tList<SingleVariableDeclaration> sParams = supermethod.parameters();", "-\t\t\t\t\t\t\tSingleVariableDeclaration p1 = (SingleVariableDeclaration) mParams.get(k);", "-\t\t\t\t\t\t\tSingleVariableDeclaration p2 = (SingleVariableDeclaration) sParams.get(k);", "+\t\t\t\t\t\t\tSingleVariableDeclaration p1 = mParams.get(k);", "+\t\t\t\t\t\t\tSingleVariableDeclaration p2 = sParams.get(k);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b5c1736b22f55c343ee1c2052fe80bf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 46, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["-\tTreeSet all = new TreeSet();", "+\tTreeMap all = new TreeMap();", "-\t\tall.add(buildSend(method, true, false));", "+\t\tall.put(buildSend(method, true, false), method);", "-\t\tall.add(key);", "+\t\tall.put(key, set.get(key));", "-\t\tall.add(key);", "+\t\tall.put(key, set64.get(key));", "-\tfor (Iterator iterator = all.iterator(); iterator.hasNext();) {", "-\t\tout(iterator.next().toString());", "-\t\toutln();", "-\t}", "-}", "+\tfor (Iterator iterator = all.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String)iterator.next();", "+\t\tNode method = (Node)all.get(key);", "+\t\tArrayList tags = new ArrayList();", "+\t\tint count = 0;", "+\t\t\t\t\ttags.add(\" * @param arg\" + count + \" flags=struct\");", "+\t\tout(\"/**\");", "+\t\tif (tags.size() > 0) {", "+\t\t\toutln();", "+\t\t\tout(\" *\");", "+\t\t}", "+\t\tout(\" @method flags=cast\");", "+\t\tif (tags.size() > 0) outln();", "+\t\tfor (Iterator iterator2 = tags.iterator(); iterator2.hasNext();) {", "+\t\t\tString tag = (String) iterator2.next();", "+\t\t\tout(tag);", "+\t\t\toutln();", "+\t\t}", "+\t\tout(\" */\");", "+\t\toutln();", "+\t\tout(key.toString());"]}], "num": 40283}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1a16c0ef4ba1cd1352663803c6baf53", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c80465263e22bf3712c2edb40f018ccf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/common/org/eclipse/swt/dnd/DNDListener.java", "commitBeforeChange": "effcd58adaf0b6446ddeaf664f8cdfeeddcc6493", "commitAfterChange": "f8fe23a917bfec64ec37ec88389dd25746799609", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void handleEvent (Event e)", "signatureAfterChange": " public void handleEvent (Event e)", "diff": ["+\t\t\tDragSourceEffect sourceEffect = ((DragSource) dndWidget).getDragSourceEffect();", "+\t\t\tif (sourceEffect != null) {", "+\t\t\t\tsourceEffect.dragStart (event);", "+\t\t\t}", "+\t\t\tDragSourceEffect sourceEffect = ((DragSource) dndWidget).getDragSourceEffect();", "+\t\t\tif (sourceEffect != null) {", "+\t\t\t\tsourceEffect.dragFinished (event);", "+\t\t\t}", "+\t\t\tDragSourceEffect sourceEffect = ((DragSource) dndWidget).getDragSourceEffect();", "+\t\t\tif (sourceEffect != null) {", "+\t\t\t\tsourceEffect.dragSetData (event);", "+\t\t\t}", "+\t\t\tDropTargetEffect dropEffect = ((DropTarget) dndWidget).getDropTargetEffect();", "+\t\t\tif (dropEffect != null) {", "+\t\t\t\tdropEffect.dragEnter (event);", "+\t\t\t}", "+\t\t\tDropTargetEffect dropEffect = ((DropTarget) dndWidget).getDropTargetEffect();", "+\t\t\tif (dropEffect != null) {", "+\t\t\t\tdropEffect.dragLeave (event);", "+\t\t\t}", "+\t\t\tDropTargetEffect dropEffect = ((DropTarget) dndWidget).getDropTargetEffect();", "+\t\t\tif (dropEffect != null) {", "+\t\t\t\tdropEffect.dragOver (event);", "+\t\t\t}", "+\t\t\tDropTargetEffect dropEffect = ((DropTarget) dndWidget).getDropTargetEffect();", "+\t\t\tif (dropEffect != null) {", "+\t\t\t\tdropEffect.drop (event);", "+\t\t\t}", "+\t\t\tDropTargetEffect dropEffect = ((DropTarget) dndWidget).getDropTargetEffect();", "+\t\t\tif (dropEffect != null) {", "+\t\t\t\tdropEffect.dropAccept (event);", "+\t\t\t}", "+\t\t\tDropTargetEffect dropEffect = ((DropTarget) dndWidget).getDropTargetEffect();", "+\t\t\tif (dropEffect != null) {", "+\t\t\t\tdropEffect.dragOperationChanged (event);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2271b64f38721d01f273722d2393b59a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "2d2908aafbcfc259e4cd16140b2915756521d48e", "commitAfterChange": "cc9ff1eaaea7372d6cef2dbd2a12ff220660892f", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "\r public void setBounds (int x, int y, int width, int height)", "signatureAfterChange": "\r boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["+boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize) {\r", "+\tint topHandle = topHandle ();\r", "+\tif (move && resize) {\r", "+\t\tint [] argList = {\r", "+\t\t\tOS.XmNx, 0, \t\t\t/* 1 */\r", "+\t\t\tOS.XmNy, 0, \t\t\t/* 3 */\r", "+\t\t\tOS.XmNwidth, 0, \t\t/* 5 */\r", "+\t\t\tOS.XmNheight, 0, \t\t/* 7 */\r", "+\t\t\tOS.XmNborderWidth, 0, \t/* 9 */\r", "+\t\t};\r", "+\t\tOS.XtGetValues (topHandle, argList, argList.length / 2);\r", "+\t\t/*\r", "+\t\t* Feature in Motif.  Motif will not allow a window\r", "+\t\t* to have a zero width or zero height.  The fix is\r", "+\t\t* to ensure these values are never zero.\r", "+\t\t*/\r", "+\t\twidth = Math.max (width - (argList [9] * 2), 1);\r", "+\t\theight = Math.max (height - (argList [9] * 2), 1);\r", "+\t\tboolean sameOrigin = (x == (short) argList [1]) && (y == (short) argList [3]);\r", "+\t\tboolean sameExtent = (width == argList [5]) && (height == argList [7]);\r", "+\t\tif (sameOrigin && sameExtent) return false;\r", "+\t\tOS.XtConfigureWidget (topHandle, x, y, width, height, argList [9]);\r", "+\t\tif (!sameOrigin) sendEvent (SWT.Move);\r", "+\t\tif (!sameExtent) sendEvent (SWT.Resize);\r", "+\t\treturn true;\r", "+\t}\r", "+\tif (move) {\r", "+\t\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};\r", "+\t\tOS.XtGetValues (topHandle, argList, argList.length / 2);\r", "+\t\tif (x == (short) argList [1] && y == (short) argList [3]) return false;\r", "+\t\tOS.XtMoveWidget (topHandle, x, y);\r", "+\t\tsendEvent (SWT.Move);\r", "+\t\treturn true;\r", "+\t}\r", "+\tif (resize) {\r", "+\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\t\tOS.XtGetValues (topHandle, argList, argList.length / 2);\r", "+\t\t/*\r", "+\t\t* Feature in Motif.  Motif will not allow a window\r", "+\t\t* to have a zero width or zero height.  The fix is\r", "+\t\t* to ensure these values are never zero.\r", "+\t\t*/\r", "+\t\twidth = Math.max (width - (argList [5] * 2), 1);\r", "+\t\theight = Math.max (height - (argList [5] * 2), 1);\r", "+\t\tif (width == argList [1] && height == argList [3]) return false;\r", "+\t\tOS.XtResizeWidget (topHandle, width, height, argList [5]);\r", "+\t\tsendEvent (SWT.Resize);\r", "+\t\treturn true;\r", "+\t}\r", "+\treturn false;\r", "+}\r", "-\t/*\r", "-\t* Feature in Motif.  Motif will not allow a window\r", "-\t* to have a zero width or zero height.  The fix is\r", "-\t* to ensure these values are never zero.\r", "-\t*/\r", "-\tint topHandle = topHandle ();\r", "-\tint [] argList = {\r", "-\t\tOS.XmNx, 0, \t\t\t/* 1 */\r", "-\t\tOS.XmNy, 0, \t\t\t/* 3 */\r", "-\t\tOS.XmNwidth, 0, \t\t/* 5 */\r", "-\t\tOS.XmNheight, 0, \t\t/* 7 */\r", "-\t\tOS.XmNborderWidth, 0, \t/* 9 */\r", "-\t};\r", "-\tOS.XtGetValues (topHandle, argList, argList.length / 2);\r", "-\tint newWidth = Math.max (width - (argList [9] * 2), 1);\r", "-\tint newHeight = Math.max (height - (argList [9] * 2), 1);\r", "-\tboolean sameOrigin = (x == (short) argList [1]) && (y == (short) argList [3]);\r", "-\tboolean sameExtent = (newWidth == argList [5]) && (newHeight == argList [7]);\r", "-\tif (sameOrigin && sameExtent) return;\r", "-\tOS.XtConfigureWidget (topHandle, x, y, newWidth, newHeight, argList [9]);\r", "-\tif (!sameOrigin) sendEvent (SWT.Move);\r", "-\tif (!sameExtent) sendEvent (SWT.Resize);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56357b0293622a38a4b802c1767126d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "89c7bd58cc0f196b206506434a742780b967e190", "commitAfterChange": "bd91d6fde8acd820d94d5b8688df3f086edb9944", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void createIMMenu (long imHandle)", "signatureAfterChange": "  void createIMMenu (long imHandle)", "diff": ["-\t\timItem = OS.gtk_image_menu_item_new_with_label (buffer);", "+\t\tif (OS.GTK3) {", "+\t\t\timItem = OS.gtk_menu_item_new ();", "+\t\t\tif (imItem == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tlong /*int*/ imageHandle = 0;", "+\t\t\tlong /*int*/ labelHandle = OS.gtk_accel_label_new (buffer);", "+\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 16, 0)) {", "+\t\t\t\tOS.gtk_label_set_xalign (labelHandle, 0);", "+\t\t\t\tOS.gtk_widget_set_halign (labelHandle, OS.GTK_ALIGN_FILL);", "+\t\t\t} else {", "+\t\t\t\tOS.gtk_misc_set_alignment(labelHandle, 0, 0);", "+\t\t\t}", "+\t\t\tlong /*int*/ boxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 0);", "+\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\t\timageHandle = OS.gtk_image_new();", "+\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tOS.gtk_image_set_pixel_size (imageHandle, 16);", "+\t\t\t\tif (boxHandle != 0) {", "+\t\t\t\t\tOS.gtk_container_add (boxHandle, imageHandle);", "+\t\t\t\t\tOS.gtk_widget_show (imageHandle);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (labelHandle != 0 && boxHandle != 0) {", "+\t\t\t\tOS.gtk_box_pack_end (boxHandle, labelHandle, true, true, 0);", "+\t\t\t\tOS.gtk_widget_show (labelHandle);", "+\t\t\t}", "+\t\t\tif (boxHandle != 0) {", "+\t\t\t\tOS.gtk_container_add (imItem, boxHandle);", "+\t\t\t\tOS.gtk_widget_show (boxHandle);", "+\t\t\t}", "+\t\t} else {", "+\t\t\timItem = OS.gtk_image_menu_item_new_with_label (buffer);", "+\t\t\tif (imItem == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf4c515f8c0718fe554f196e86ac15fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "fb9bbf51bcbcca155af75b83246cd84b690dc924", "commitAfterChange": "df49f698bb0e6e765ab855f825c7815df2092c2b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void createIMMenu (long imHandle)", "signatureAfterChange": "  void createIMMenu (long imHandle)", "diff": ["-\t\timItem = OS.gtk_image_menu_item_new_with_label (buffer);", "+\t\tif (OS.GTK3) {", "+\t\t\timItem = OS.gtk_menu_item_new ();", "+\t\t\tif (imItem == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tlong /*int*/ imageHandle = 0;", "+\t\t\tlong /*int*/ labelHandle = OS.gtk_accel_label_new (buffer);", "+\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 16, 0)) {", "+\t\t\t\tOS.gtk_label_set_xalign (labelHandle, 0);", "+\t\t\t\tOS.gtk_widget_set_halign (labelHandle, OS.GTK_ALIGN_FILL);", "+\t\t\t} else {", "+\t\t\t\tOS.gtk_misc_set_alignment(labelHandle, 0, 0);", "+\t\t\t}", "+\t\t\tlong /*int*/ boxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 0);", "+\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\t\timageHandle = OS.gtk_image_new();", "+\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tOS.gtk_image_set_pixel_size (imageHandle, 16);", "+\t\t\t\tif (boxHandle != 0) {", "+\t\t\t\t\tOS.gtk_container_add (boxHandle, imageHandle);", "+\t\t\t\t\tOS.gtk_widget_show (imageHandle);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (labelHandle != 0 && boxHandle != 0) {", "+\t\t\t\tOS.gtk_box_pack_end (boxHandle, labelHandle, true, true, 0);", "+\t\t\t\tOS.gtk_widget_show (labelHandle);", "+\t\t\t}", "+\t\t\tif (boxHandle != 0) {", "+\t\t\t\tOS.gtk_container_add (imItem, boxHandle);", "+\t\t\t\tOS.gtk_widget_show (boxHandle);", "+\t\t\t}", "+\t\t} else {", "+\t\t\timItem = OS.gtk_image_menu_item_new_with_label (buffer);", "+\t\t\tif (imItem == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t}"]}], "num": 5710}
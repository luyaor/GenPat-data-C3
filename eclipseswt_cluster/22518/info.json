{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09dde87bbd9bd5a0ecb7c176567f76bf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21cb70bc475d98d54ec75695e61e1d59", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/MetaDataGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void generate(Method method)", "signatureAfterChange": "  public void generate(JNIMethod method)", "diff": ["-public void generate(Method method) {", "+public void generate(JNIMethod method) {", "-\tbuffer.append(getClassName(method.getDeclaringClass()));", "+\tbuffer.append(method.getDeclaringClass().getSimpleName());", "-\tif (isNativeUnique(method)) {", "+\tif (method.isNativeUnique()) {", "-\tMethodData methodData = getMetaData().getMetaData(method);", "-\tif (methodData != null) output(methodData.toString());", "+\toutput(((AbstractItem)method).flatten());", "-\tint length = method.getParameterTypes().length;", "-\tfor (int i = 0; i < length; i++) {", "+\tJNIParameter[] params = method.getParameters();", "+\tfor (int i = 0; i < params.length; i++) {", "-\t\tParameterData paramData = getMetaData().getMetaData(method, i);", "-\t\tif (paramData != null) output(paramData.toString());", "+\t\toutput(((AbstractItem)params[i]).flatten());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e092dbebef21e1b38e89c223dd5aed0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "  void generateFunctionPrototype(Method method, String function, Class[] paramTypes, Class returnType, boolean singleLine)", "signatureAfterChange": "  void generateFunctionPrototype(JNIMethod method, String function, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean singleLine)", "diff": ["-void generateFunctionPrototype(Method method, String function, Class[] paramTypes, Class returnType, boolean singleLine) {", "+void generateFunctionPrototype(JNIMethod method, String function, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean singleLine) {", "-\toutput(getTypeSignature2(returnType));", "+\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "-\toutput(getClassName(method.getDeclaringClass()));", "+\toutput(method.getDeclaringClass().getSimpleName());", "-\tfor (int i = 0; i < paramTypes.length; i++) {", "-\t\tClass paramType = paramTypes[i];", "+\tfor (int i = 0; i < params.length; i++) {", "-\t\toutput(getTypeSignature2(paramType));", "+\t\tJNIType paramType = params[i].getType(), paramType64 = params[i].getType64();", "+\t\toutput(paramType.getTypeSignature2(!paramType.equals(paramType64)));"]}], "num": 22518}
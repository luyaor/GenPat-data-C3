{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0161ce7b246658eafceb50ff24ba0c3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5de23232c9dae316d8e53d8b610b4670", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "9e6ed5ddefaae266127428adb6c5fbedbb333dc4", "commitAfterChange": "ccd2d5aea4fb2e484cfeea5d7ce086a6f7e68860", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["-\tsystemFont = getSystemFont ();", "+\tlong /*int*/ defaultFont;", "+\tif (OS.GTK_VERSION >= OS.VERSION (3, 0, 0)) {", "+\t\tlong /*int*/ context = OS.gtk_widget_get_style_context (shellHandle);\t", "+\t\tdefaultFont = OS.gtk_style_context_get_font (context, OS.GTK_STATE_FLAG_NORMAL);", "+\t} else {", "+\t\tlong /*int*/ style = OS.gtk_widget_get_style (shellHandle);\t", "+\t\tdefaultFont = OS.gtk_style_get_font_desc (style);", "+\t}\t", "+\tdefaultFont = OS.pango_font_description_copy (defaultFont);", "+\tPoint dpi = getDPI(), screenDPI = getScreenDPI();", "+\tif (dpi.y != screenDPI.y) {", "+\t\tint size = OS.pango_font_description_get_size(defaultFont);", "+\t\tOS.pango_font_description_set_size(defaultFont, size * dpi.y / screenDPI.y);", "+\t}", "+\tsystemFont = Font.gtk_new (this, defaultFont);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "372f44167232413d016b3aa9a901ceff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "e38f7ba08e4cd9896dddbc5916c5187c2e1b63eb", "commitAfterChange": "7349d1b65ee9a9edeeac8e2e96a33b2c8d655b80", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tint getValueAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getValueAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tString osValueAttribute = null;", "+\t\tint childID = getChildIDFromEvent(theEvent);", "-\t\tevent.childID = getChildIDFromEvent(theEvent);", "-\t\tevent.result = osValueAttribute;", "+\t\tevent.childID = childID;", "+\t\tevent.detail = -1;", "+\t\tevent.result = null;", "-\t\tswitch (event.detail) {", "-\t\tcase ACC.ROLE_RADIOBUTTON: // 1 = on, 0 = off", "-\t\tcase ACC.ROLE_CHECKBUTTON: // 1 = checked, 0 = unchecked, 2 = mixed", "-\t\tcase ACC.ROLE_SCROLLBAR: // numeric value representing the position of the scroller", "-\t\tcase ACC.ROLE_TABITEM:  // 1 = selected, 0 = not selected", "-\t\tcase ACC.ROLE_SLIDER: // the value associated with the position of the slider thumb", "-\t\tcase ACC.ROLE_PROGRESSBAR: // the value associated with the fill level of the progress bar", "-\t\t\tif (event.result == null) return code;", "-\t\t\tint number = Integer.parseInt(event.result);", "-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFTypeRef, 4, new int [] {number});", "-\t\t\tbreak;", "-\t\tcase ACC.ROLE_TABFOLDER: // the accessibility object representing the currently selected tab item", "-\t\tcase ACC.ROLE_COMBOBOX: // text of the currently selected item", "-\t\tcase ACC.ROLE_TEXT: // text in the text field", "-\t\t\tif (event.result == null) return code;", "-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringToStringRef(event.result)});", "-\t\t\tbreak;", "-\t\tcase ACC.ROLE_LABEL: // text in the label", "-\t\t\t/* On a Mac, the 'value' of a label is the same as the 'name' of the label. */", "-\t\t\tAccessibleEvent e = new AccessibleEvent(this);", "-\t\t\te.childID = getChildIDFromEvent(theEvent);", "-\t\t\te.result = osValueAttribute;", "-\t\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "-\t\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "-\t\t\t\tlistener.getName(e);", "+\t\tint role = event.detail;", "+\t\tString value = event.result;", "+\t\tif (value != null || role == ACC.ROLE_LABEL) {", "+\t\t\tint stringRef = 0;", "+\t\t\tswitch (role) {", "+\t\t\tcase ACC.ROLE_RADIOBUTTON: // 1 = on, 0 = off", "+\t\t\tcase ACC.ROLE_CHECKBUTTON: // 1 = checked, 0 = unchecked, 2 = mixed", "+\t\t\tcase ACC.ROLE_SCROLLBAR: // numeric value representing the position of the scroller", "+\t\t\tcase ACC.ROLE_TABITEM:  // 1 = selected, 0 = not selected", "+\t\t\tcase ACC.ROLE_SLIDER: // the value associated with the position of the slider thumb", "+\t\t\tcase ACC.ROLE_PROGRESSBAR: // the value associated with the fill level of the progress bar", "+\t\t\t\ttry {", "+\t\t\t\t\tint number = Integer.parseInt(value);", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeSInt32, 4, new int [] {number});", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t} catch (NumberFormatException ex) {", "+\t\t\t\t\tif (value.equalsIgnoreCase(\"true\")) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {true});", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {false});", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase ACC.ROLE_TABFOLDER: // the accessibility object representing the currently selected tab item", "+\t\t\t\t//break;", "+\t\t\tcase ACC.ROLE_COMBOBOX: // text of the currently selected item", "+\t\t\tcase ACC.ROLE_TEXT: // text in the text field", "+\t\t\t\tstringRef = stringToStringRef(value);", "+\t\t\t\tbreak;", "+\t\t\tcase ACC.ROLE_LABEL: // text in the label", "+\t\t\t\t/* On a Mac, the 'value' of a label is the same as the 'name' of the label. */", "+\t\t\t\tAccessibleEvent e = new AccessibleEvent(this);", "+\t\t\t\te.childID = childID;", "+\t\t\t\te.result = null;", "+\t\t\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "+\t\t\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "+\t\t\t\t\tlistener.getName(e);", "+\t\t\t\t}", "+\t\t\t\tif (e.result != null) {", "+\t\t\t\t\tstringRef = stringToStringRef(e.result);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (value != null) stringRef = stringToStringRef(value);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\tif (e.result == null) return code;", "-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringToStringRef(e.result)});", "-\t\t\tbreak;", "+\t\t\tif (stringRef != 0) {", "+\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef});", "+\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "-\t\treturn OS.noErr;", "+\t\treturn code;"]}], "num": 61258}
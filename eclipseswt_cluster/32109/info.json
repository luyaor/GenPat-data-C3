{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e3b164132b0dec198477c8875343b16", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3fdb6271ff374784872ae66e7dec80f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "00044d960d22ae0ff107fa60b140159a76aa4f68", "commitAfterChange": "e3652a50c88e949df733c4507943c28f05cffd6f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": "  public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["+\tRectangle clip = gc.getClipping();", "-\t\tint baseline = 0;", "-\t\tfor (int i = 0; i < lineRuns.length; i++) {", "-\t\t\tbaseline = Math.max(baseline, lineRuns[i].baseline);", "-\t\t}", "-\t\tint lineHeight = lineY[line+1] - lineY[line];", "+\t\tif (drawX > clip.x + clip.width) continue;", "+\t\tif (drawX + lineWidth[line] < clip.x) continue;", "+\t\tint baseline = 0;", "+\t\tfor (int i = 0; i < lineRuns.length; i++) {", "+\t\t\tbaseline = Math.max(baseline, lineRuns[i].baseline);", "+\t\t}", "+\t\tint lineHeight = lineY[line+1] - lineY[line];", "-\t\t\tif (!run.lineBreak || run.softBreak) {", "-\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "-\t\t\t\tint drawRunY = drawY + (baseline - run.baseline);", "-\t\t\t\tint end = run.start + run.length - 1;", "-\t\t\t\tgc.setFont(getItemFont(run));", "-\t\t\t\tboolean fullSelection = hasSelection && selectionStart <= run.start && selectionEnd >= end;", "-\t\t\t\tif (fullSelection) {", "-\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\tgc.fillRectangle(drawX, drawY, run.width, lineHeight);", "-\t\t\t\t\tif (!run.tab) {", "-\t\t\t\t\t\tgc.setForeground(selectionForeground);", "-\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tif (run.style != null && run.style.background != null) {", "-\t\t\t\t\t\tColor bg = run.style.background;", "-\t\t\t\t\t\tgc.setBackground(bg);", "-\t\t\t\t\t\tgc.fillRectangle(drawX, drawRunY, run.width, run.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!run.tab) {", "-\t\t\t\t\t\tColor fg = foreground;", "-\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground;", "-\t\t\t\t\t\tgc.setForeground(fg);", "-\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "-\t\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "-\t\t\t\t\t\tif (partialSelection) {", "-\t\t\t\t\t\t\tint selStart = Math.max(selectionStart, run.start);", "-\t\t\t\t\t\t\tint selEnd = Math.min(selectionEnd, end);", "-\t\t\t\t\t\t\tstring = text.substring(run.start, selStart);", "-\t\t\t\t\t\t\tint selX = drawX + gc.stringExtent(string).x;", "-\t\t\t\t\t\t\tstring = text.substring(selStart, selEnd + 1);", "-\t\t\t\t\t\t\tint selWidth = gc.stringExtent(string).x;", "-\t\t\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\t\t\tgc.fillRectangle(selX, drawY, selWidth, lineHeight);", "-\t\t\t\t\t\t\tif (fg != selectionForeground) {", "-\t\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "-\t\t\t\t\t\t\t\tgc.drawString(string, selX, drawRunY, true);", "+\t\t\tif (drawX > clip.x + clip.width) break;", "+\t\t\tif (drawX + run.width >= clip.x) {", "+\t\t\t\tif (!run.lineBreak || run.softBreak) {", "+\t\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "+\t\t\t\t\tint drawRunY = drawY + (baseline - run.baseline);", "+\t\t\t\t\tint end = run.start + run.length - 1;", "+\t\t\t\t\tgc.setFont(getItemFont(run));", "+\t\t\t\t\tboolean fullSelection = hasSelection && selectionStart <= run.start && selectionEnd >= end;", "+\t\t\t\t\tif (fullSelection) {", "+\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\tgc.fillRectangle(drawX, drawY, run.width, lineHeight);", "+\t\t\t\t\t\tif (!run.tab) {", "+\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "+\t\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (run.style != null && run.style.background != null) {", "+\t\t\t\t\t\t\tColor bg = run.style.background;", "+\t\t\t\t\t\t\tgc.setBackground(bg);", "+\t\t\t\t\t\t\tgc.fillRectangle(drawX, drawRunY, run.width, run.height);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!run.tab) {", "+\t\t\t\t\t\t\tColor fg = foreground;", "+\t\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground;", "+\t\t\t\t\t\t\tgc.setForeground(fg);", "+\t\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "+\t\t\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "+\t\t\t\t\t\t\tif (partialSelection) {", "+\t\t\t\t\t\t\t\tint selStart = Math.max(selectionStart, run.start);", "+\t\t\t\t\t\t\t\tint selEnd = Math.min(selectionEnd, end);", "+\t\t\t\t\t\t\t\tstring = text.substring(run.start, selStart);", "+\t\t\t\t\t\t\t\tint selX = drawX + gc.stringExtent(string).x;", "+\t\t\t\t\t\t\t\tstring = text.substring(selStart, selEnd + 1);", "+\t\t\t\t\t\t\t\tint selWidth = gc.stringExtent(string).x;", "+\t\t\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\t\t\tgc.fillRectangle(selX, drawY, selWidth, lineHeight);", "+\t\t\t\t\t\t\t\tif (fg != selectionForeground) {", "+\t\t\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "+\t\t\t\t\t\t\t\t\tgc.drawString(string, selX, drawRunY, true);", "+\t\t\t\t\t\t\t\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eac4b0bb6254d93880e8aa9e5ec733c1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "9cdeeef16ecd0dd86b274a41cdcf8af6db40077a", "commitAfterChange": "62d90062dd8cb11eec7528efece057a0af693514", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public Rectangle getBounds (int start, int end)", "signatureAfterChange": " public Rectangle getBounds (int start, int end)", "diff": ["-\tint startLine = getLineIndex(start);", "-\tint endLine = getLineIndex(end);", "-\tlength = segmentsText.length();", "-\tif (startLine != endLine) {", "-\t\tint width = 0;", "-\t\tint y = lineY[startLine];", "-\t\twhile (startLine <= endLine) {", "-\t\t\twidth = Math.max (width, lineWidth[startLine++]);", "-\t\t}", "-\t\treturn new Rectangle (0, y, width, lineY[endLine + 1] - y);", "-\t}", "-\tint x = 0, startRunX = 0, endRunX = 0, i = 0;", "-\tStyleItem startRun = null, endRun = null, lastRun;", "-\tStyleItem[] lineRuns = runs[startLine];", "-\tfor (; i < lineRuns.length; i++) {", "-\t\tStyleItem run = lineRuns[i];", "+\tint left = 0x7fffffff, right = 0;", "+\tint top = 0x7fffffff, bottom = 0;", "+\tint lineIndex = 0;", "+\tboolean isRTL = (orientation & SWT.RIGHT_TO_LEFT) != 0;", "+\tfor (int i = 0; i < allRuns.length - 1; i++) {", "+\t\tStyleItem run = allRuns[i];", "-\t\tif (runEnd == length) runEnd++;", "+\t\tif (run.lineBreak) lineIndex++;", "+\t\tif (runEnd <= start) continue;", "+\t\tif (run.start > end) break;", "+\t\tint runLead = run.x;", "+\t\tint runTrail = run.x + run.width;", "-\t\t\tstartRun = run;", "-\t\t\tstartRunX = x;", "-\t\t\tbreak;", "-\t\t}", "-\t\tx  += run.width;", "-\t}", "-\tboolean reordered = false;\t", "-\tlastRun = startRun;", "-\tboolean isRTL = (orientation & SWT.RIGHT_TO_LEFT) != 0 ^ (lastRun.analysis.s.uBidiLevel & 1) != 0;", "-\tfor (; i < lineRuns.length; i++) {", "-\t\tStyleItem run = lineRuns[i];", "-\t\tif (run != lastRun) {", "-\t\t\tif (isRTL) {", "-\t\t\t\treordered = run.start + run.length != lastRun.start;", "+\t\t\tint cx = 0;", "+\t\t\tif (!run.tab) {", "+\t\t\t\tint[] piX = new int[1];", "+\t\t\t\tOS.ScriptCPtoX(start - run.start, false, run.length, run.glyphCount, run.clusters, run.visAttrs, run.advances, run.analysis, piX);", "+\t\t\t\tcx = isRTL ? run.width - piX[0] : piX[0];", "+\t\t\t}", "+\t\t\tif (run.analysis.fRTL ^ isRTL) {", "+\t\t\t\trunTrail = run.x + cx;", "-\t\t\t\treordered = lastRun.start + lastRun.length != run.start;", "+\t\t\t\trunLead = run.x + cx;", "-\t\tif (reordered) break;", "-\t\tlastRun = run;", "-\t\tint runEnd = run.start + run.length;\t", "-\t\tif (runEnd == length) runEnd++;", "-\t\tif ( run.start <= end && end < runEnd) {", "-\t\t\tendRun = run;", "-\t\t\tendRunX = x;", "-\t\t\tbreak;", "+\t\tif (run.start <= end && end < runEnd) {", "+\t\t\tint cx = run.width;", "+\t\t\tif (!run.tab) {", "+\t\t\t\tint[] piX = new int[1];", "+\t\t\t\tOS.ScriptCPtoX(end - run.start, true, run.length, run.glyphCount, run.clusters, run.visAttrs, run.advances, run.analysis, piX);", "+\t\t\t\tcx = isRTL ? run.width - piX[0] : piX[0];", "+\t\t\t}", "+\t\t\tif (run.analysis.fRTL ^ isRTL) {", "+\t\t\t\trunLead = run.x + cx;", "+\t\t\t} else {", "+\t\t\t\trunTrail = run.x + cx;", "+\t\t\t}", "-\t\tx  += run.width;", "+\t\tleft = Math.min(left, runLead);", "+\t\tright = Math.max(right, runTrail);", "+\t\ttop = Math.min(top, lineY[lineIndex]);", "+\t\tbottom = Math.max(bottom, lineY[lineIndex + 1]);", "-\tif (reordered || endRun == null) {", "-\t\tint y = lineY[startLine];", "-\t\treturn new Rectangle (0, y, lineWidth[startLine], lineY[startLine + 1] - y);", "-\t}", "-\tif (((startRun.analysis.s.uBidiLevel & 1) != 0) ^ ((endRun.analysis.s.uBidiLevel & 1) != 0)) {", "-\t\tint y = lineY[startLine];", "-\t\treturn new Rectangle (startRunX, y, endRunX + endRun.width, lineY[startLine + 1] - y);", "-\t}", "-\tint startX, endX;", "-\tif (startRun.tab) {", "-\t\tstartX = startRunX;", "-\t} else {", "-\t\tint runOffset = start - startRun.start;", "-\t\tint cChars = startRun.length;", "-\t\tint gGlyphs = startRun.glyphCount;", "-\t\tint[] piX = new int[1];", "-\t\tOS.ScriptCPtoX(runOffset, false, cChars, gGlyphs, startRun.clusters, startRun.visAttrs, startRun.advances, startRun.analysis, piX);", "-\t\tif ((orientation & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\t\tpiX[0] = startRun.width - piX[0];", "-\t\t}", "-\t\tstartX = startRunX + piX[0];", "-\t}", "-\tif (endRun.tab) {", "-\t\tendX = endRunX + endRun.width;", "-\t} else {", "-\t\tint runOffset = end - endRun.start;", "-\t\tint cChars = endRun.length;", "-\t\tint gGlyphs = endRun.glyphCount;", "-\t\tint[] piX = new int[1];", "-\t\tOS.ScriptCPtoX(runOffset, true, cChars, gGlyphs, endRun.clusters, endRun.visAttrs, endRun.advances, endRun.analysis, piX);", "-\t\tif ((orientation & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\t\tpiX[0] = endRun.width - piX[0];", "-\t\t}", "-\t\tendX = endRunX + piX[0];", "-\t}", "-\tif (startX > endX) {", "-\t\tint tmp = startX;", "-\t\tstartX = endX;", "-\t\tendX = tmp;", "-\t}", "-\tint width = endX - startX;", "-\tif (wrapWidth != -1) {", "-\t\tswitch (alignment) {", "-\t\t\tcase SWT.CENTER: startX += (wrapWidth - lineWidth[startLine]) / 2; break;", "-\t\t\tcase SWT.RIGHT: startX += wrapWidth - lineWidth[startLine]; break;", "-\t\t}", "-\t}", "-\tint y = lineY[startLine];", "-\treturn new Rectangle (startX, y, width, lineY[startLine + 1] - y);", "+\treturn new Rectangle(left, top, right - left, bottom - top);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "691d45f4dea05edb2d55861fd3ca7ca4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/textlayout/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "00044d960d22ae0ff107fa60b140159a76aa4f68", "commitAfterChange": "e3652a50c88e949df733c4507943c28f05cffd6f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": "  public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["+\tRectangle clip = gc.getClipping();", "-\t\tFontMetrics metrics = getLineMetrics(line);", "-\t\tint baseline = metrics.getAscent() + metrics.getLeading();", "-\t\tint lineHeight = metrics.getHeight();", "+\t\tif (drawX > clip.x + clip.width) continue;", "+\t\tif (drawX + lineWidth[line] < clip.x) continue;", "+\t\tFontMetrics metrics = getLineMetrics(line);", "+\t\tint baseline = metrics.getAscent() + metrics.getLeading();", "+\t\tint lineHeight = metrics.getHeight();\t\t", "-\t\t\tif (!run.lineBreak || run.softBreak) {", "-\t\t\t\tcurrentFont = getItemFont(run);", "-\t\t\t\tif (!currentFont.equals(lastFont)) {", "-\t\t\t\t\tgc.setFont(currentFont);", "-\t\t\t\t\tmetrics = gc.getFontMetrics();", "-\t\t\t\t\tdrawRunY = drawY + (baseline - metrics.getAscent());", "-\t\t\t\t\tlastFont = currentFont;", "-\t\t\t\t}", "-\t\t\t\tint end = run.start + run.length - 1;", "-\t\t\t\tboolean fullSelection = hasSelection && selectionStart <= run.start && selectionEnd >= end;", "-\t\t\t\tif (fullSelection) {", "-\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\tgc.fillRectangle(drawX, drawY, run.width, lineHeight);", "-\t\t\t\t\tif (!run.tab) {", "-\t\t\t\t\t\tgc.setForeground(selectionForeground);", "-\t\t\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "-\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "+\t\t\tif (drawX > clip.x + clip.width) break;", "+\t\t\tif (drawX + run.width >= clip.x) {", "+\t\t\t\tif (!run.lineBreak || run.softBreak) {", "+\t\t\t\t\tcurrentFont = getItemFont(run);", "+\t\t\t\t\tif (!currentFont.equals(lastFont)) {", "+\t\t\t\t\t\tgc.setFont(currentFont);", "+\t\t\t\t\t\tmetrics = gc.getFontMetrics();", "+\t\t\t\t\t\tdrawRunY = drawY + (baseline - metrics.getAscent());", "+\t\t\t\t\t\tlastFont = currentFont;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (run.style != null && run.style.background != null) {", "-\t\t\t\t\t\tColor bg = run.style.background;", "-\t\t\t\t\t\tgc.setBackground(bg);", "-\t\t\t\t\t\tgc.fillRectangle(drawX, drawRunY, run.width, run.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!run.tab) {", "-\t\t\t\t\t\tColor fg = foreground;", "-\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground;", "-\t\t\t\t\t\tgc.setForeground(fg);", "-\t\t\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "-\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "-\t\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "-\t\t\t\t\t\tif (partialSelection) {", "-\t\t\t\t\t\t\tint selStart = Math.max(selectionStart, run.start);", "-\t\t\t\t\t\t\tint selEnd = Math.min(selectionEnd, end);", "-\t\t\t\t\t\t\tstring = text.substring(run.start, selStart);", "-\t\t\t\t\t\t\tint selX = drawX + gc.stringExtent(string).x;", "-\t\t\t\t\t\t\tstring = text.substring(selStart, selEnd + 1);", "-\t\t\t\t\t\t\tint selWidth = gc.stringExtent(string).x;", "-\t\t\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\t\t\tgc.fillRectangle(selX, drawY, selWidth, lineHeight);", "-\t\t\t\t\t\t\tif (fg != selectionForeground) {", "-\t\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "-\t\t\t\t\t\t\t\tgc.drawString(string, selX, drawRunY, true);", "+\t\t\t\t\tint end = run.start + run.length - 1;", "+\t\t\t\t\tboolean fullSelection = hasSelection && selectionStart <= run.start && selectionEnd >= end;", "+\t\t\t\t\tif (fullSelection) {", "+\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\tgc.fillRectangle(drawX, drawY, run.width, lineHeight);", "+\t\t\t\t\t\tif (!run.tab) {", "+\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "+\t\t\t\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "+\t\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (run.style != null && run.style.background != null) {", "+\t\t\t\t\t\t\tColor bg = run.style.background;", "+\t\t\t\t\t\t\tgc.setBackground(bg);", "+\t\t\t\t\t\t\tgc.fillRectangle(drawX, drawRunY, run.width, run.height);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!run.tab) {", "+\t\t\t\t\t\t\tColor fg = foreground;", "+\t\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground;", "+\t\t\t\t\t\t\tgc.setForeground(fg);", "+\t\t\t\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "+\t\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "+\t\t\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "+\t\t\t\t\t\t\tif (partialSelection) {", "+\t\t\t\t\t\t\t\tint selStart = Math.max(selectionStart, run.start);", "+\t\t\t\t\t\t\t\tint selEnd = Math.min(selectionEnd, end);", "+\t\t\t\t\t\t\t\tstring = text.substring(run.start, selStart);", "+\t\t\t\t\t\t\t\tint selX = drawX + gc.stringExtent(string).x;", "+\t\t\t\t\t\t\t\tstring = text.substring(selStart, selEnd + 1);", "+\t\t\t\t\t\t\t\tint selWidth = gc.stringExtent(string).x;", "+\t\t\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\t\t\tgc.fillRectangle(selX, drawY, selWidth, lineHeight);", "+\t\t\t\t\t\t\t\tif (fg != selectionForeground) {", "+\t\t\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "+\t\t\t\t\t\t\t\t\tgc.drawString(string, selX, drawRunY, true);", "+\t\t\t\t\t\t\t\t}", "+}"]}], "num": 32109}
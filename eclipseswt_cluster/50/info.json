{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7deb2806e96de33321dc2c36b2744ec", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20b4974e241cc703988dcc5cce367ae5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "3549d4960b78a23e56b4090ec47809f2171fdc05", "commitAfterChange": "e9a1477165ad64d557ee73753a6f703c8ce2dfc8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int EnumFontFamProc (int lpelfe, int lpntme, int FontType, int lParam)", "signatureAfterChange": "  int EnumFontFamProc (int lpelfe, int lpntme, int FontType, int lParam)", "diff": ["-\tif ((lParam == 1) != isScalable) return 1;", "-\t", "-\t/* Add the log font to the list of log fonts */", "-\tif (nFonts == logFonts.length) {", "-\t\tLOGFONT [] newLogFonts = new LOGFONT [logFonts.length + 128];", "-\t\tSystem.arraycopy (logFonts, 0, newLogFonts, 0, nFonts);", "-\t\tlogFonts = newLogFonts;", "+\tboolean scalable = lParam == 1;", "+\tif (isScalable == scalable) {", "+\t\t/* Add the log font to the list of log fonts */", "+\t\tif (nFonts == logFonts.length) {", "+\t\t\tLOGFONT [] newLogFonts = new LOGFONT [logFonts.length + 128];", "+\t\t\tSystem.arraycopy (logFonts, 0, newLogFonts, 0, nFonts);", "+\t\t\tlogFonts = newLogFonts;", "+\t\t}", "+\t\tLOGFONT logFont = logFonts [nFonts];", "+\t\tif (logFont == null) logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "+\t\tOS.MoveMemory (logFont, lpelfe, LOGFONT.sizeof);", "+\t\tlogFonts [nFonts++] = logFont;", "-\tLOGFONT logFont = logFonts [nFonts];", "-\tif (logFont == null) logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "-\tOS.MoveMemory (logFont, lpelfe, LOGFONT.sizeof);", "-\tlogFonts [nFonts++] = logFont;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76bda4e332e4e7423b275d6eedcb6c6a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "0d071739ca20d31ed231d1d4bd90df94b5e42817", "commitAfterChange": "ca2ab800288a0cff39f00b82f164bf6ac861ac7a", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final int hdc, final StyleItem run)", "diff": ["-\t\t\t* using only white spaces. The solution is to use the font fallback of the ", "-\t\t\t* previous or next run of the same script.    ", "+\t\t\t* using only white spaces. The solution is to use the font of the previous  ", "+\t\t\t* or next run of the same script.    ", "-\t\t\t\t\t\tif (pRun.fallbackFont != 0 && pRun.analysis.eScript == run.analysis.eScript) {", "+\t\t\t\t\t\tif (pRun.analysis.eScript == run.analysis.eScript) {", "+\t\t\t\t\t\t\tint /*long*/ pFont = getItemFont(pRun);", "-\t\t\t\t\t\t\tOS.GetObject(pRun.fallbackFont, LOGFONT.sizeof, logFont);", "+\t\t\t\t\t\t\tOS.GetObject(pFont, LOGFONT.sizeof, logFont);", "+\t\t\t\t\t\t\t\tOS.SelectObject(hdc, getItemFont(nRun));", "-\t\t\t\t\t\t\t\tif (nRun.fallbackFont != 0) {", "-\t\t\t\t\t\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW() : new LOGFONTA();", "-\t\t\t\t\t\t\t\t\tOS.GetObject(nRun.fallbackFont, LOGFONT.sizeof, logFont);", "-\t\t\t\t\t\t\t\t\tnewFont = OS.CreateFontIndirect(logFont);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tint /*long*/ nFont = getItemFont(nRun);", "+\t\t\t\t\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW() : new LOGFONTA();", "+\t\t\t\t\t\t\t\tOS.GetObject(nFont, LOGFONT.sizeof, logFont);", "+\t\t\t\t\t\t\t\tnewFont = OS.CreateFontIndirect(logFont);"]}], "num": 50}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "790e7b17606a93be0923d496baa2789a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d2ab867d80e6dab10539d67fd9ad5ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tvoid checkItems(TreeItem item, boolean checked)", "signatureAfterChange": " \t \tvoid checkItems(TreeItem item, boolean checked)", "diff": ["+\t", "-\t    /*", "-\t     * Note that this creates the whole tree underneath item", "-\t     * so that the checked/grayed state can be kept in the", "-\t     * UI only and updated when generate is called. This can", "-\t     * be very expensive.", "-\t     */", "-\t    checkChildren(item);", "+\t    updateGenAttribute(item);", "-\t    for (int i = 0; i < items.length; i++) {", "-\t        checkItems(items[i], checked);", "+\t    if (items.length == 1 && items[0].getData() == null) {", "+\t    \t/* Update model only if view is not created */", "+\t\t\tNode node = (Node)item.getData();", "+\t\t\tNodeList childNodes = node.getChildNodes();", "+\t\t\tfor (int i = 0, length = childNodes.getLength(); i < length; i++) {", "+\t\t\t\tcheckNodes(childNodes.item(i), checked);", "+\t\t\t}", "+\t    } else {", "+\t\t    for (int i = 0; i < items.length; i++) {", "+\t\t        checkItems(items[i], checked);", "+\t\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "397e0db5eb580a89ec80e43ef6d043f4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "275ce1322d2d2acef8289e7a428bae512f0206b1", "commitAfterChange": "56ca7c39a4fdb71b796d09fde89d6bca48c9f734", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void open()", "signatureAfterChange": " \t \tpublic void open()", "diff": ["+\t\t\t}", "+\t\t});", "+\t\tnodesTree.addListener(SWT.Expand, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tTreeItem item = (TreeItem)event.item;", "+\t\t\t\tif (item.getItemCount() == 1 && item.getItem(0).getData() == null) {", "+\t\t\t\t\titem.getItem(0).dispose();", "+\t\t\t\t\tNode node = (Node)item.getData();", "+\t\t\t\t\tNodeList childNodes = node.getChildNodes();", "+\t\t\t\t\tfor (int i = 0, length = childNodes.getLength(); i < length; i++) {", "+\t\t\t\t\t\taddChild(childNodes.item(i), item);", "+\t\t\t\t\t}", "+\t\t\t\t\tTreeColumn[] columns = nodesTree.getColumns();", "+\t\t\t\t\tfor (int i = 0; i < columns.length; i++) {", "+\t\t\t\t\t\tcolumns[i].pack();", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t});", "-\t\t", "+\t\t});\t\t"]}], "num": 57907}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37e53f331a2a1c62fe00cc8ed5dd1008", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1987408065de2c07abf5942968ccdac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "102afdf14f21d1f537cc5476ea8585cf0d031ba1", "commitAfterChange": "6f01c942591e63dd4165835b31c13e6ad078ede6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tif (!OS.HIVIEW) OS.CreateRootControl (shellHandle, theRoot);", "-\tOS.GetRootControl (shellHandle, theRoot);", "+\tif (OS.HIVIEW) {", "+\t\tOS.HIViewFindByID (shellHandle, OS.kHIViewWindowContentID (), theRoot);", "+\t\t/*", "+\t\t* Bug in the Macintosh.  When the window class is kMovableModalWindowClass or", "+\t\t* kModalWindowClass, HIViewFindByID() fails to find the control identified by", "+\t\t* kHIViewWindowContentID.  The fix is to call GetRootControl() if the call", "+\t\t* failed.", "+\t\t*/", "+\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);\t\t", "+\t} else {", "+\t\tOS.CreateRootControl (shellHandle, theRoot);", "+\t\tOS.GetRootControl (shellHandle, theRoot);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46d1545e9f5adfaf035f95fab33e62e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r void releaseDisplay ()", "signatureAfterChange": "\r void releaseDisplay ()", "diff": ["-void releaseDisplay () {\r", "+void releaseDisplay () {", "+", "+\t/* Destroy the hidden Override shell parent */", "+\tif (shellHandle != 0) OS.XtDestroyWidget (shellHandle);", "+\tshellHandle = 0;", "+\t\r", "-\t\tfor (int i=0; i<=timerIDs.length; i++) {\r", "-\t\t\t OS.XtRemoveTimeOut (timerIDs [i]);\r", "+\t\tfor (int i=0; i<timerIDs.length; i++) {\r", "+\t\t\tif (timerIDs [i] != 0) OS.XtRemoveTimeOut (timerIDs [i]);\r", "-\t/* Dispose the mouse hover callback */\r", "+\t/* Dispose the mouse hover callback */", "-\t\r", "-\t/* Dispose the sleep callback */\r", "-\tif (sleepID != 0) OS.XtRemoveTimeOut (sleepID);\r", "-\tsleepID = sleepProc = 0;\r", "-\tsleepCallback.dispose ();\r", "-\tsleepCallback = null;\r", "-\t\r", "+\r", "-\t\r", "+\t", "+\t/* Dispose the wake callback, id and pipe */", "+\tif (inputID != 0) OS.XtRemoveInput (inputID);", "+\twakeCallback.dispose (); wakeCallback = null;", "+\twakeProc = 0;", "+\tOS.close (read_fd);", "+\tOS.close (write_fd);", "+\t\t\r", "-\r", "-\t/* Destroy the hidden Override shell parent */\r", "-\tif (shellHandle != 0) OS.XtDestroyWidget (shellHandle);\r", "-\tshellHandle = 0;\r", "+\t//OS.XtFree (dragTranslations);\r"]}], "num": 1497}
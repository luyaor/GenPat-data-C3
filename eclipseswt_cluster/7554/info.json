{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "621367635041991cbd8afb48e60aaab0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c4ceda4cd33c48cf41a7ed7d6bbf151", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "f2afadf3ecbde81e97161d4a80435b171827f960", "commitAfterChange": "cf34d636662ca6587452948946037bfb3d522d9c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\t\tint offset = 0;", "-\t\tfor (int y = 0; y < height; y++) {", "+\t\tfor (int y = 0, offset = 0; y < height; y++) {", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t/*", "+\t\t* TODO is it impossible to retrieve the RGB values when alpha is zero? If this is true", "+\t\t* then this code is necessary because the transparent pixel needs the RGB values to work. ", "+\t\t*/", "+\t\tif (transparentPixel != -1) {", "+\t\t\tbyte[] alphaData = data.alphaData = new byte[width * height];", "+\t\t\tfor (int y = 0, offset = 3, alphaOffset = 0; y < height; y++) {", "+\t\t\t\tfor (int x = 0; x < width; x++, offset += 4) {", "+\t\t\t\t\talphaData[alphaOffset++] = srcData[offset];", "+\t\tdata.transparentPixel = transparentPixel;", "-\tdata.transparentPixel = transparentPixel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cbec1d53b58cc372897d14cfa9fd60f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/SnippetLauncher.java", "commitBeforeChange": "91a138801bc6e6f843c20a442200006a21cf37fa", "commitAfterChange": "c1eba2d2b909473206f88ea3b678ac625a2463b6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static void main (String [] args)", "signatureAfterChange": "  \tpublic static void main (String [] args)", "diff": ["+\t\t\t\t\t\tboolean skip = false;", "+\t\t\t\t\t\tString platform = SWT.getPlatform();", "-\t\t\t\t\t\t\tSystem.out.println(\"...skipping PocketPC example...\");", "+\t\t\t\t\t\t\tplatform = \"PocketPC\";", "+\t\t\t\t\t\t\tskip = true;", "+\t\t\t\t\t\t} else if (source.indexOf(\"OpenGL\") != -1) {", "+\t\t\t\t\t\t\tplatform = \"OpenGL\";", "+\t\t\t\t\t\t\tskip = true;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tString [] platforms = {\"win32\", \"motif\", \"gtk\", \"photon\", \"carbon\"};", "+\t\t\t\t\t\t\tfor (int p = 0; p < platforms.length; p++) {", "+\t\t\t\t\t\t\t\tif (!platforms[p].equals(platform) && source.indexOf(\".\" + platforms[p]) != -1) {", "+\t\t\t\t\t\t\t\t\tplatform = platforms[p];", "+\t\t\t\t\t\t\t\t\tskip = true;", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (skip) {", "+\t\t\t\t\t\t\tSystem.out.println(\"...skipping \" + platform + \" example...\");"]}], "num": 7554}
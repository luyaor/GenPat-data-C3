{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb93c93a1efb6eca4825ffeb0349e6c8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f34071db6fe77f4eac4d1b502b31b93", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "1c829e2b02e3c5c545a9adcc1f1772320bdb342d", "commitAfterChange": "a51e7bea1e9de588ec94ceceebd9651f48731e5d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tNSTextStorage textStorage = (NSTextStorage)new NSTextStorage ().alloc ();", "-\t\tNSString string = ((NSTextView)view).textStorage ().string ();", "-\t\ttextStorage.initWithString (string);", "-\t\tNSRange range = new NSRange ();", "-\t\trange.length = string.length ();", "-\t\ttextStorage.addAttribute (OS.NSFontAttributeName, getFont ().handle, range);", "+\t\tNSTextStorage textStorage = (NSTextStorage)new NSTextStorage ().alloc ().init ();", "+\t\ttextStorage.setAttributedString (((NSTextView)view).textStorage ());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa5c4c9880d021f6b12aaaadbcc416ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "18ce373e262126236e66fff74f7d2ddc7fffb312", "commitAfterChange": "41ad2a506242e46d3b0d85d794d3bd6a732e7252", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 80, "signatureBeforeChange": " \t \tid getStyleRangeForIndexAttribute (id parameter, int childID)", "signatureAfterChange": " \t \tid getStyleRangeForIndexAttribute (id parameter, int childID)", "diff": ["-\t\tid returnValue = null;", "+\t\tif (accessibleAttributeListeners.size() == 0) return null;", "-\t\tif (accessibleAttributeListeners.size() > 0) {", "-\t\t\tAccessibleTextAttributeEvent event = new AccessibleTextAttributeEvent(this);", "-\t\t\tevent.offset = (int) /*64*/ index;", "-\t\t\t", "-\t\t\t// Marker values -- if -1 after calling getTextAttributes, no one implemented it.", "-\t\t\tevent.start = event.end = -1;", "-\t\t\t", "-\t\t\tfor (int i = 0; i < accessibleAttributeListeners.size(); i++) {", "-\t\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "-\t\t\t\tlistener.getTextAttributes(event);", "-\t\t\t}", "+\t\tAccessibleTextAttributeEvent event = new AccessibleTextAttributeEvent(this);", "+\t\tevent.offset = (int) /*64*/ index;", "-\t\t\tNSRange range = new NSRange();", "-\t\t\tif (event.start == -1 && event.end == -1) {", "-\t\t\t\trange.location = index;", "-\t\t\t\trange.length = 0;", "-\t\t\t} else {", "-\t\t\t\trange.location = event.start;", "-\t\t\t\trange.length = event.end - event.start;", "-\t\t\t}", "-\t\t\treturnValue = NSValue.valueWithRange(range);", "-\t\t} else {", "-\t\t\tNSRange range = new NSRange();", "+\t\t// Marker values -- if -1 after calling getTextAttributes, no one implemented it.", "+\t\tevent.start = event.end = -1;", "+", "+\t\tfor (int i = 0; i < accessibleAttributeListeners.size(); i++) {", "+\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "+\t\t\tlistener.getTextAttributes(event);", "+\t\t}", "+", "+\t\tNSRange range = new NSRange();", "+\t\tif (event.start == -1 && event.end == -1) {", "-\t\t\treturnValue = NSValue.valueWithRange(range);", "+\t\t} else {", "+\t\t\trange.location = event.start;", "+\t\t\trange.length = event.end - event.start;", "-\t\treturn returnValue;", "+", "+\t\treturn NSValue.valueWithRange(range);"]}], "num": 29621}
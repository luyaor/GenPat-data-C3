{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76693cd879f4b9fa322fbc7d58d0d0a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb7cffbb25adad54f9806603a3b6240", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "e3ffa03ceaf7703e7ab3292990f53dd9ebc09848", "commitAfterChange": "bad1afba2bae87fcb485bb971088066d4ff1a6e9", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public Control [] getTabList ()", "signatureAfterChange": "\r public Control [] getTabList ()", "diff": ["-//\tif (tabList == null) {\r", "-//\t\tint count = 0;\r", "-//\t\tControl [] list =_getChildren ();\r", "-//\t\tfor (int i=0; i<list.length; i++) {\r", "-//\t\t\tif (list [i].isTabGroup ()) count++;\r", "-//\t\t}\r", "-//\t\ttabList = new Control [count];\r", "-//\t\tint index = 0;\r", "-//\t\tfor (int i=0; i<list.length; i++) {\r", "-//\t\t\tif (list [i].isTabGroup ()) {\r", "-//\t\t\t\ttabList [index++] = list [i];\r", "-//\t\t\t}\r", "-//\t\t}\r", "-//\t}\r", "+\tif (tabList == null) {\r", "+\t\tint count = 0;\r", "+\t\tControl [] list =_getChildren ();\r", "+\t\tfor (int i=0; i<list.length; i++) {\r", "+\t\t\tif (list [i].isTabGroup ()) count++;\r", "+\t\t}\r", "+\t\ttabList = new Control [count];\r", "+\t\tint index = 0;\r", "+\t\tfor (int i=0; i<list.length; i++) {\r", "+\t\t\tif (list [i].isTabGroup ()) {\r", "+\t\t\t\ttabList [index++] = list [i];\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab30786c86566ac3c7c208dbcc6d2d7a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/internal/BidiUtil.java", "commitBeforeChange": "4d5c21d276610d76998a87692a93017e18f6ddcc", "commitAfterChange": "d590e5665c7c6b6893429cc18bf26504a41d5603", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " public static void setKeyboardLanguage(int language)", "signatureAfterChange": " public static void setKeyboardLanguage(int language)", "diff": ["-\t// don't switch the keyboard if it doesn't need to be", "-\t", "-\tif (language == KEYBOARD_BIDI) {", "-\t\t// get the list of active languages", "-\t\tint /*long*/[] list = getKeyboardLanguageList();", "-\t\t// set to first bidi language", "-\t\tfor (int i=0; i<list.length; i++) {", "-\t\t\tint id = OS.PRIMARYLANGID(OS.LOWORD(list[i]));", "-\t\t\tif ((id == LANG_ARABIC) || (id == LANG_HEBREW)) {", "-\t\t\t\tOS.ActivateKeyboardLayout(list[i], 0);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t} else {", "-\t\t// get the list of active languages", "-\t\tint /*long*/[] list = getKeyboardLanguageList();", "-\t\t// set to the first non-bidi language (anything not", "-\t\t// Hebrew or Arabic)", "-\t\tfor (int i=0; i<list.length; i++) {", "-\t\t\tint id = OS.PRIMARYLANGID(OS.LOWORD(list[i]));", "-\t\t\tif ((id != LANG_HEBREW) && (id != LANG_ARABIC)) {", "-\t\t\t\tOS.ActivateKeyboardLayout(list[i], 0);", "-\t\t\t\treturn;", "-\t\t\t}", "+\tboolean bidi = language == KEYBOARD_BIDI; ", "+\tint /*long*/[] list = getKeyboardLanguageList();", "+\tfor (int i=0; i<list.length; i++) {", "+\t\tif (bidi == isBidiLang(list[i])) {", "+\t\t\tOS.ActivateKeyboardLayout(list[i], 0);", "+\t\t\treturn;"]}], "num": 26636}
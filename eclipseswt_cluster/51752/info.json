{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f7cb7ecf2c3252a470789fd081968b4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ba638a97e1d6df8e25e0d8c479aca31", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "59b2491032a801ab7176764808e4a778061c6b28", "commitAfterChange": "dd05f312473477c63077f519775dd1f377f4a002", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\t* The fix is to assign a NULL pointer to pszText rather", "-\t\t\t\t\t* than a pointer to a zero length string.", "+\t\t\t\t\t* The fix is to use a space rather than an empty string", "+\t\t\t\t\t* when anything but a tool tip is requested (to avoid", "+\t\t\t\t\t* a tool tip that is a single space).", "-\t\t\t\t\tif (string.length () == 0 && plvfi.iSubItem == 0) {", "-\t\t\t\t\t\tplvfi.pszText = 0;", "-\t\t\t\t\t\tplvfi.cchTextMax = 0;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "-\t\t\t\t\t\tint byteCount = Math.min (buffer.length (), plvfi.cchTextMax - 1) * TCHAR.sizeof;", "-\t\t\t\t\t\tOS.MoveMemory (plvfi.pszText, buffer, byteCount);", "-\t\t\t\t\t\tOS.MoveMemory (plvfi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "-\t\t\t\t\t\tplvfi.cchTextMax = Math.min (plvfi.cchTextMax, string.length () + 1);", "+\t\t\t\t\tif (!tipRequested && string.length () == 0 && plvfi.iSubItem == 0) {", "+\t\t\t\t\t\tstring = \" \"; //$NON-NLS-1$", "+\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\t\tint byteCount = Math.min (buffer.length (), plvfi.cchTextMax - 1) * TCHAR.sizeof;", "+\t\t\t\t\tOS.MoveMemory (plvfi.pszText, buffer, byteCount);", "+\t\t\t\t\tOS.MoveMemory (plvfi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "+\t\t\t\t\tplvfi.cchTextMax = Math.min (plvfi.cchTextMax, string.length () + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30c7ae8367939464a77b50f57098c260", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d69b4f13802cc1fd0d1c0b912ccbdc07c8718aed", "commitAfterChange": "0b8a14ca61887fa0eaf9dda50636719fe129f765", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\t* Bug in Windows.  When pszText points to a zero length NULL", "-\t\t\t\t\t* terminated string, Windows correctly draws the empty string", "-\t\t\t\t\t* but the cache of the bounds for the item is not reset.  This", "-\t\t\t\t\t* means that when the text for an item is set and then reset", "-\t\t\t\t\t* to an empty string, the selection draws using the bounds of", "-\t\t\t\t\t* the previous text.  The fix is to assign a NULL pointer to", "-\t\t\t\t\t* pszText rather than a pointer to a zero-length string.", "+\t\t\t\t\t* Bug in Windows.  When pszText points to a zero length", "+\t\t\t\t\t* NULL terminated string, Windows correctly draws the", "+\t\t\t\t\t* empty string but the cache of the bounds for the item", "+\t\t\t\t\t* is not reset.  This means that when the text for the", "+\t\t\t\t\t* item is set and then reset to an empty string, the", "+\t\t\t\t\t* selection draws using the bounds of the previous text.", "+\t\t\t\t\t* The fix is to assign a NULL pointer to pszText rather", "+\t\t\t\t\t* than a pointer to a zero length string.", "+\t\t\t\t\t* ", "+\t\t\t\t\t* NOTE: This is only a problem for items in the first", "+\t\t\t\t\t* column.  Assigning NULL to other columns stops Windows", "+\t\t\t\t\t* from drawing the selection when LVS_EX_FULLROWSELECT", "+\t\t\t\t\t* is set.", "-\t\t\t\t\tif (string.length () == 0) {", "+\t\t\t\t\tif (string.length () == 0 && plvfi.iSubItem == 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1df59236a18a442d08f3a9c9176ce691", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "207de25d5374228c5bb4d27e6f86860848b0717b", "commitAfterChange": "6593dcf4066d4af124ce37d44831175f0d2999e2", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 115, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["+\t\t\tint index = 0;", "+\t\t\tif (hwndHeader != 0) {", "+\t\t\t\tindex = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0);", "+\t\t\t}", "-\t\t\t\tString string = item.text;", "-\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "-\t\t\t\tint byteCount = Math.min (buffer.length (), lptvdi.cchTextMax - 1) * TCHAR.sizeof;", "-\t\t\t\tOS.MoveMemory (lptvdi.pszText, buffer, byteCount);", "-\t\t\t\tOS.MoveMemory (lptvdi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "-\t\t\t\tlptvdi.cchTextMax = Math.min (lptvdi.cchTextMax, string.length () + 1);", "+\t\t\t\tString string = null;", "+\t\t\t\tif (index == 0) {", "+\t\t\t\t\tstring = item.text;", "+\t\t\t\t} else {", "+\t\t\t\t\tString [] strings  = item.strings;", "+\t\t\t\t\tif (strings != null) string = strings [index];", "+\t\t\t\t}", "+\t\t\t\tif (string != null) {", "+\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\t\tint byteCount = Math.min (buffer.length (), lptvdi.cchTextMax - 1) * TCHAR.sizeof;", "+\t\t\t\t\tOS.MoveMemory (lptvdi.pszText, buffer, byteCount);", "+\t\t\t\t\tOS.MoveMemory (lptvdi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "+\t\t\t\t\tlptvdi.cchTextMax = Math.min (lptvdi.cchTextMax, string.length () + 1);", "+\t\t\t\t}", "-\t\t\t\tImage image = item.image;", "+\t\t\t\tImage image = null;", "+\t\t\t\tif (index == 0) {", "+\t\t\t\t\timage = item.image;", "+\t\t\t\t} else {", "+\t\t\t\t\tImage [] images  = item.images;", "+\t\t\t\t\tif (images != null) image = images [index];", "+\t\t\t\t}", "-\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, 0, hdItem);", "+\t\t\t\t\t\t\t\tint index = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0);", "+\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "-\t\t\t\t\t\t\t\tImage image = item.images != null ? item.images [index] : null;", "+\t\t\t\t\t\t\t\tImage image = null;", "+\t\t\t\t\t\t\t\tif (index == 0) {", "+\t\t\t\t\t\t\t\t\timage = item.image;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tImage [] images  = item.images;", "+\t\t\t\t\t\t\t\t\tif (images != null) image = images [index];", "+\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tif (item.strings != null && item.strings [index] != null) {", "+\t\t\t\t\t\t\t\t\tString string = null;", "+\t\t\t\t\t\t\t\t\tif (index == 0) {", "+\t\t\t\t\t\t\t\t\t\tstring = item.text;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tString [] strings  = item.strings;", "+\t\t\t\t\t\t\t\t\t\tif (strings != null) string = strings [index];", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (string != null) {", "-\t\t\t\t\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), item.strings [index], false);", "+\t\t\t\t\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02905994bf2ed5d9d90dcbd09acea709", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "4e541013d096af28302abcbca900276c0e545259", "commitAfterChange": "e126ad021104dbb3243e0172869102689e47d9ea", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "-\t\t\t\t\tint byteCount = Math.min (buffer.length (), plvfi.cchTextMax - 1) * TCHAR.sizeof;", "-\t\t\t\t\tOS.MoveMemory (plvfi.pszText, buffer, byteCount);", "-\t\t\t\t\tOS.MoveMemory (plvfi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "-\t\t\t\t\tplvfi.cchTextMax = Math.min (plvfi.cchTextMax, string.length () + 1);", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Bug in Windows.  When pszText points to a zero length NULL", "+\t\t\t\t\t* terminated string, Windows correctly draws the empty string", "+\t\t\t\t\t* but the cache of the bounds for the item is not reset.  This", "+\t\t\t\t\t* means that when the text for an item is set and then reset", "+\t\t\t\t\t* to an empty string, the selection draws using the bounds of", "+\t\t\t\t\t* the previous text.  The fix is to assign a NULL pointer to", "+\t\t\t\t\t* pszText rather than a pointer to a zero-length string.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif (string.length () == 0) {", "+\t\t\t\t\t\tplvfi.pszText = 0;", "+\t\t\t\t\t\tplvfi.cchTextMax = 0;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\t\t\tint byteCount = Math.min (buffer.length (), plvfi.cchTextMax - 1) * TCHAR.sizeof;", "+\t\t\t\t\t\tOS.MoveMemory (plvfi.pszText, buffer, byteCount);", "+\t\t\t\t\t\tOS.MoveMemory (plvfi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "+\t\t\t\t\t\tplvfi.cchTextMax = Math.min (plvfi.cchTextMax, string.length () + 1);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50ef89a3fd003cd0b8c2e4aca713ce4d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "f699db6750189f737837a9f6195bd87512c2c588", "commitAfterChange": "ece89cfb21571317fb6c86186d3424edb03c00a2", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 140, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "-\t\t\t\t\tint byteCount = Math.min (buffer.length (), plvfi.cchTextMax - 1) * TCHAR.sizeof;", "-\t\t\t\t\tOS.MoveMemory (plvfi.pszText, buffer, byteCount);", "-\t\t\t\t\tOS.MoveMemory (plvfi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "-\t\t\t\t\tplvfi.cchTextMax = Math.min (plvfi.cchTextMax, string.length () + 1);", "+", "+\t\t\t\t\tint length = Math.min (string.length (), plvfi.cchTextMax - 1);", "+\t\t\t\t\tchar [] chars = new char [length + 1];", "+\t\t\t\t\tstring.getChars (0, length, chars, 0);", "+\t\t\t\t\tif (OS.IsUnicode) {", "+\t\t\t\t\t\tOS.MoveMemory (plvfi.pszText, chars, chars.length * 2);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t//TODO - UNTESTED", "+\t\t\t\t\t\tOS.WideCharToMultiByte (getCodePage (), 0, chars, chars.length, plvfi.pszText, plvfi.cchTextMax, null, null);", "+\t\t\t\t\t\tOS.MoveMemory (plvfi.pszText + plvfi.cchTextMax - 1, new byte [1], 1);", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+//\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+//\t\t\t\t\tint byteCount = Math.min (buffer.length (), plvfi.cchTextMax - 1) * TCHAR.sizeof;", "+//\t\t\t\t\tOS.MoveMemory (plvfi.pszText, buffer, byteCount);", "+//\t\t\t\t\tOS.MoveMemory (plvfi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "+//\t\t\t\t\tplvfi.cchTextMax = Math.min (plvfi.cchTextMax, string.length () + 1);", "+\t\t\tboolean move = false;", "-\t\t\t\tif (image != null) plvfi.iImage = imageIndex (image);", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tplvfi.iImage = imageIndex (image);", "+\t\t\t\t\tmove = true;", "+\t\t\t\t}", "+\t\t\t\t\tmove = true;", "-\t\t\t\tif (plvfi.iSubItem == 0) plvfi.iIndent = item.imageIndent;", "+\t\t\t\tif (plvfi.iSubItem == 0) {", "+\t\t\t\t\tplvfi.iIndent = item.imageIndent;", "+\t\t\t\t\tmove = true;", "+\t\t\t\t}", "-\t\t\tOS.MoveMemory (lParam, plvfi, NMLVDISPINFO.sizeof);", "+\t\t\tif (move) OS.MoveMemory (lParam, plvfi, NMLVDISPINFO.sizeof);"]}], "num": 51752}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "513ac8419bbd171c90d98572cab1e02d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44418902066ce2037cccfd5d918c91e2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "4b7ac62e4c7abc2bdb8c97e1ee5fae6064a184d8", "commitAfterChange": "49a0d281d71c7b0b4f050c8585ea47184b029cc7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int kEventTextInputUpdateActiveInputArea (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventTextInputUpdateActiveInputArea (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (!hooks(SWT.ImeComposition)) return OS.eventNotHandledErr;", "-\tint [] length = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamTextInputSendText, OS.typeUnicodeText, null, 0, length, (char [])null);", "-\tchar [] chars = new char [length [0]];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamTextInputSendText, OS.typeUnicodeText, null, length [0], null, chars);", "-\tint [] fixed_length = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamTextInputSendFixLen, OS.typeLongInteger, null, 4, null, fixed_length);", "-\tint [] rangeSize = new int [1];", "-\tint index = 0;", "-\tint [] ranges = null;", "-\tTextStyle [] styles = null;", "-\tint rc = OS.GetEventParameter (theEvent, OS.kEventParamTextInputSendHiliteRng, OS.typeTextRangeArray, null, 0, rangeSize, (byte [])null);", "-\tif (rc == OS.noErr) {", "-\t\tint firstSelectedConverted = -1;", "-\t\tboolean hasConvertedText = false;", "-\t\tint textRanges = OS.NewPtr (rangeSize [0]);", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamTextInputSendHiliteRng, OS.typeTextRangeArray, null, rangeSize [0], null, textRanges);", "-\t\tshort [] nRanges = new short [1];", "-\t\tOS.memmove (nRanges, textRanges, 2);", "-\t\tint count = nRanges [0];", "-\t\tif (count > 0) {", "-\t\t\tTextRange range = new TextRange ();", "-\t\t\tranges = new int [(count - 1) * 2];", "-\t\t\tstyles = new TextStyle [count - 1];", "-\t\t\tfor (int i = 0, j = 0; i < count; i++) {", "-\t\t\t\tOS.memmove (range, textRanges + 2 + (i * TextRange.sizeof), TextRange.sizeof);", "-\t\t\t\tswitch (range.fHiliteStyle) {", "-\t\t\t\t\tcase OS.kCaretPosition: ", "-\t\t\t\t\t\tindex = range.fStart;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.kConvertedText:\t", "-\t\t\t\t\tcase OS.kSelectedConvertedText:", "-\t\t\t\t\tcase OS.kSelectedRawText:", "-\t\t\t\t\tcase OS.kRawText:", "-\t\t\t\t\t\tranges [j * 2] = range.fStart / 2;", "-\t\t\t\t\t\tranges [j * 2 + 1] = range.fEnd / 2 - range.fStart / 2 + 0;", "-\t\t\t\t\t\tstyles [j] = new TextStyle ();", "-\t\t\t\t\t\tstyles [j].underline = true;", "-\t\t\t\t\t\tstyles [j].underlineStyle = UNDERLINE_IME_INPUT;", "-\t\t\t\t\t\tif (range.fHiliteStyle == OS.kConvertedText) {", "-\t\t\t\t\t\t\tstyles [j].underlineStyle = UNDERLINE_IME_CONVERTED;", "-\t\t\t\t\t\t\thasConvertedText = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (range.fHiliteStyle == OS.kSelectedConvertedText) {", "-\t\t\t\t\t\t\tstyles [j].underlineStyle = UNDERLINE_IME_TARGET_CONVERTED;", "-\t\t\t\t\t\t\tif (firstSelectedConverted == -1) {", "-\t\t\t\t\t\t\t\tfirstSelectedConverted = range.fStart;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tj++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tOS.DisposePtr (textRanges);", "-\t\tif (hasConvertedText && firstSelectedConverted != -1) {", "-\t\t\tindex = firstSelectedConverted;", "-\t\t}", "+\tif (ime != null) {", "+\t\tint result = ime.kEventTextInputUpdateActiveInputArea (nextHandler, theEvent, userData);", "+\t\tif (result != OS.eventNotHandledErr) return result;", "-\tEvent event = new Event ();", "-\tevent.detail = SWT.COMPOSITION_CHANGED;", "-\tevent.text = new String(chars, 0, length [0] / 2);", "-\tevent.index = index / 2;", "-\tevent.count = fixed_length [0] != -1 ? fixed_length [0] / 2: length [0] / 2;", "-\tevent.ranges = ranges;", "-\tevent.styles = styles;", "-\tsendEvent (SWT.ImeComposition, event);", "-\tif (event.doit) {", "-\t\tif (fixed_length [0] == -1 || fixed_length [0] == length [0]) {", "-\t\t\tfor (int i=0; i<chars.length; i++) {", "-\t\t\t\tif (chars [i] == 0) break;", "-\t\t\t\tevent = new Event ();", "-\t\t\t\tevent.character = chars [i];", "-\t\t\t\tsendKeyEvent (SWT.KeyDown, event);", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn OS.noErr;", "+\treturn super.kEventTextInputUpdateActiveInputArea (nextHandler, theEvent, userData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df8f243bbb2a07b35c97c5274a28924f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "0a50d92817a0ec852579e15a962a04552ba58310", "commitAfterChange": "5f8c70f9663ba812b07371317d526ce083d22a28", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\tint[] buffer = new int[1];", "-\tif (OS.PMCreateSession(buffer) == OS.noErr) {", "-\t\tint printSession = buffer[0];", "-\t\tif (OS.PMCreatePrintSettings(buffer) == OS.noErr) {", "-\t\t\tint printSettings = buffer[0];", "-\t\t\tOS.PMSessionDefaultPrintSettings(printSession, printSettings);", "-\t\t\tif (OS.PMCreatePageFormat(buffer) == OS.noErr) {", "-\t\t\t\tint pageFormat = buffer[0];", "-\t\t\t\tOS.PMSessionDefaultPageFormat(printSession, pageFormat);", "-\t\t\t\tOS.PMSessionSetDestination(printSession, printSettings, (short) (printToFile ? OS.kPMDestinationFile : OS.kPMDestinationPrinter), 0, 0);", "-\t\t\t\tif (scope == PrinterData.PAGE_RANGE) {", "-\t\t\t\t\tOS.PMSetFirstPage(printSettings, startPage, false);", "-\t\t\t\t\tOS.PMSetLastPage(printSettings, endPage, false);", "-\t\t\t\t\tOS.PMSetPageRange(printSettings, startPage, endPage);", "-\t\t\t\t} else {", "-\t\t\t\t\tOS.PMSetPageRange(printSettings, 1, OS.kPMPrintAllPages);", "-\t\t\t\t}", "-\t\t\t\tboolean[] accepted = new boolean [1];", "-\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "-\t\t\t\tif (accepted[0]) {\t\t", "-\t\t\t\t\tOS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "-\t\t\t\t\tif (accepted[0]) {", "-\t\t\t\t\t\tshort[] destType = new short[1];", "-\t\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "-\t\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "-\t\t\t\t\t\tString driver = Printer.DRIVER;", "-\t\t\t\t\t\tswitch (destType[0]) {", "-\t\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "-\t\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "-\t\t\t\t\t\t\tdata.printToFile = true;", "-\t\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "-\t\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "-\t\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "-\t\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "-\t\t\t\t\t\t\tOS.CFRelease(fileName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "-\t\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "-\t\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "-\t\t\t\t\t\tdata.startPage = buffer[0];", "-\t\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "-\t\t\t\t\t\tdata.endPage = buffer[0];", "-\t\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "-\t\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "-\t\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean[] collate = new boolean[1];", "-\t\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "-\t\t\t\t\t\tdata.collate = collate[0];", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t/* Serialize settings */", "-\t\t\t\t\t\tint[] flatSettings = new int[1];", "-\t\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "-\t\t\t\t\t\tint[] flatFormat = new int[1];", "-\t\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "-\t\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "-\t\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "-\t\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "-\t\t\t\t\t\tint offset = 0;", "-\t\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "-\t\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "-\t\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "-\t\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tscope = data.scope;", "-\t\t\t\t\t\tstartPage = data.startPage;", "-\t\t\t\t\t\tendPage = data.endPage;", "-\t\t\t\t\t\tprintToFile = data.printToFile;", "-\t\t\t\t\t\treturn data;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tOS.PMRelease(pageFormat);", "-\t\t\t}", "-\t\t\tOS.PMRelease(printSettings);", "-\t\t}", "-\t\tOS.PMRelease(printSession);", "-\t}", "+\tNSPrintPanel panel = NSPrintPanel.printPanel();", "+\tNSPrintInfo printInfo =(NSPrintInfo)new NSPrintInfo().alloc();", "+\tprintInfo.initWithDictionary(null);", "+\tpanel.runModalWithPrintInfo(printInfo);", "+\tprintInfo.release();", "+//\tint[] buffer = new int[1];", "+//\tif (OS.PMCreateSession(buffer) == OS.noErr) {", "+//\t\tint printSession = buffer[0];", "+//\t\tif (OS.PMCreatePrintSettings(buffer) == OS.noErr) {", "+//\t\t\tint printSettings = buffer[0];", "+//\t\t\tOS.PMSessionDefaultPrintSettings(printSession, printSettings);", "+//\t\t\tif (OS.PMCreatePageFormat(buffer) == OS.noErr) {", "+//\t\t\t\tint pageFormat = buffer[0];", "+//\t\t\t\tOS.PMSessionDefaultPageFormat(printSession, pageFormat);", "+//\t\t\t\tOS.PMSessionSetDestination(printSession, printSettings, (short) (printToFile ? OS.kPMDestinationFile : OS.kPMDestinationPrinter), 0, 0);", "+//\t\t\t\tif (scope == PrinterData.PAGE_RANGE) {", "+//\t\t\t\t\tOS.PMSetFirstPage(printSettings, startPage, false);", "+//\t\t\t\t\tOS.PMSetLastPage(printSettings, endPage, false);", "+//\t\t\t\t\tOS.PMSetPageRange(printSettings, startPage, endPage);", "+//\t\t\t\t} else {", "+//\t\t\t\t\tOS.PMSetPageRange(printSettings, 1, OS.kPMPrintAllPages);", "+//\t\t\t\t}", "+//\t\t\t\tboolean[] accepted = new boolean [1];", "+//\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "+//\t\t\t\tif (accepted[0]) {\t\t", "+//\t\t\t\t\tOS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "+//\t\t\t\t\tif (accepted[0]) {", "+//\t\t\t\t\t\tshort[] destType = new short[1];", "+//\t\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "+//\t\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "+//\t\t\t\t\t\tString driver = Printer.DRIVER;", "+//\t\t\t\t\t\tswitch (destType[0]) {", "+//\t\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "+//\t\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "+//\t\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "+//\t\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "+//\t\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "+//\t\t\t\t\t\t\tdata.printToFile = true;", "+//\t\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "+//\t\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "+//\t\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "+//\t\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "+//\t\t\t\t\t\t\tOS.CFRelease(fileName);", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "+//\t\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "+//\t\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "+//\t\t\t\t\t\tdata.startPage = buffer[0];", "+//\t\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "+//\t\t\t\t\t\tdata.endPage = buffer[0];", "+//\t\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "+//\t\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "+//\t\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "+//\t\t\t\t\t\t} else {", "+//\t\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tboolean[] collate = new boolean[1];", "+//\t\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "+//\t\t\t\t\t\tdata.collate = collate[0];", "+//\t\t\t\t\t\t", "+//\t\t\t\t\t\t/* Serialize settings */", "+//\t\t\t\t\t\tint[] flatSettings = new int[1];", "+//\t\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "+//\t\t\t\t\t\tint[] flatFormat = new int[1];", "+//\t\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "+//\t\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "+//\t\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "+//\t\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "+//\t\t\t\t\t\tint offset = 0;", "+//\t\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "+//\t\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "+//\t\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "+//\t\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "+//\t\t\t\t\t\t", "+//\t\t\t\t\t\tscope = data.scope;", "+//\t\t\t\t\t\tstartPage = data.startPage;", "+//\t\t\t\t\t\tendPage = data.endPage;", "+//\t\t\t\t\t\tprintToFile = data.printToFile;", "+//\t\t\t\t\t\treturn data;", "+//\t\t\t\t\t}", "+//\t\t\t\t}", "+//\t\t\t\tOS.PMRelease(pageFormat);", "+//\t\t\t}", "+//\t\t\tOS.PMRelease(printSettings);", "+//\t\t}", "+//\t\tOS.PMRelease(printSession);", "+//\t}"]}], "num": 50395}
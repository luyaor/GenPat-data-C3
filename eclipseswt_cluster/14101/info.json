{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc3ffbac9ca2813857843e070b42b4ec", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d077bf4be6a92746d8e38871e9c41a6a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/URLTransfer.java", "commitBeforeChange": "c0924ae4b5c635b198e180a0627d640853830860", "commitAfterChange": "40a745073f9736dc99720e543ce3e4b7a4d2d9ff", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  boolean checkURL(Object object)", "signatureAfterChange": "  boolean checkURL(Object object)", "diff": ["-\tif (object == null  || !(object instanceof String) || ((String)object).length() == 0) return false;", "-\tString url = (String)object;", "-\ttry {", "-\t\tnew URL(url);", "-\t} catch (java.net.MalformedURLException e) {", "-\t\treturn false;", "-\t}", "-\treturn true;", "+\treturn object != null && (object instanceof String) && ((String)object).length() > 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35e6759665e7de96b3667c78c9ac4f58", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/URLTransfer.java", "commitBeforeChange": "c0924ae4b5c635b198e180a0627d640853830860", "commitAfterChange": "40a745073f9736dc99720e543ce3e4b7a4d2d9ff", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  boolean checkURL(Object object)", "signatureAfterChange": "  boolean checkURL(Object object)", "diff": ["-\tif (object == null  || !(object instanceof String) || ((String)object).length() == 0) return false;", "-\tString url = (String)object;", "-\ttry {", "-\t\tnew URL(url);", "-\t} catch (java.net.MalformedURLException e) {", "-\t\treturn false;", "-\t}", "-\treturn true;", "+\treturn object != null && (object instanceof String) && ((String)object).length() > 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed5fcd0bfab149f6155044a97317d85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/URLTransfer.java", "commitBeforeChange": "c0924ae4b5c635b198e180a0627d640853830860", "commitAfterChange": "40a745073f9736dc99720e543ce3e4b7a4d2d9ff", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r\rboolean checkURL(Object object)", "signatureAfterChange": "\r\rboolean checkURL(Object object)", "diff": ["-/*******************************************************************************\r * Copyright (c) 20007 IBM Corporation and others.\r * All rights reserved. This program and the accompanying materials\r * are made available under the terms of the Eclipse Public License v1.0\r * which accompanies this distribution, and is available at\r * http://www.eclipse.org/legal/epl-v10.html\r *\r * Contributors:\r *     IBM Corporation - initial API and implementation\r *******************************************************************************/\rpackage org.eclipse.swt.dnd;\r\rimport java.net.*;\r\rimport org.eclipse.swt.internal.carbon.*;\r\r/**\r * The class <code>URLTransfer</code> provides a platform specific mechanism \r * for converting text in URL format represented as a java <code>String</code> \r * to a platform specific representation of the data and vice versa.  See \r * <code>Transfer</code> for additional information. The string  \r * must contain the fully specified url.\r * \r * <p>An example of a java <code>String[]</code> containing a URL is shown \r * below:</p>\r * \r * <code><pre>\r *     String url = \"http://www.eclipse.org\";\r * </code></pre>\r */\rpublic class URLTransfer extends ByteArrayTransfer {\r\r\tstatic URLTransfer _instance = new URLTransfer();\r\tstatic final String URL = \"url \"; //$NON-NLS-1$\r\tstatic final int URL_ID = registerType(URL);\r\tstatic final String URLN = \"urln\"; //$NON-NLS-1$\r\tstatic final int URLN_ID = registerType(URLN);\r\rprivate URLTransfer() {}\r\r/**\r * Returns the singleton instance of the URLTransfer class.\r *\r * @return the singleton instance of the URLTransfer class\r */\rpublic static URLTransfer getInstance () {\r\treturn _instance;\r}\r\r/**\r * This implementation of <code>javaToNative</code> converts a URL\r * represented by a java <code>String</code> to a platform specific representation.\r * For additional information see <code>Transfer#javaToNative</code>.\r * \r * @param object a java <code>String[]</code> containing a URL\r * @param transferData an empty <code>TransferData</code> object; this\r *  object will be filled in on return with the platform specific format of the data\r */\rpublic void javaToNative (Object object, TransferData transferData){\r\tif (!checkURL(object) || !isSupportedType(transferData)) {\r\t\tDND.error(DND.ERROR_INVALID_DATA);\r\t}\r\ttransferData.result = -1;\r\tString url = (String)object;\r\tint count = url.length();\r\tchar[] chars = new char[count];\r\turl.getChars(0, count, chars, 0);\r\tint cfstring = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, count);\r\tif (cfstring == 0) return;\r\ttry {\r\t\tCFRange range = new CFRange();\r\t\trange.length = chars.length;\r\t\tint encoding = OS.CFStringGetSystemEncoding();\r\t\tint[] size = new int[1];\r\t\tint numChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, null, 0, size);\r\t\tif (numChars == 0 || size[0] == 0) return;\r\t\tbyte[] buffer = new byte[size[0]];\r\t\tnumChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, buffer, size [0], size);\r\t\tif (numChars == 0) return;\r\t\ttransferData.data = new byte[][] {buffer};\r\t\ttransferData.result = 0;\r\t} finally {\r\t\tOS.CFRelease(cfstring);\r\t}\r}\r\r/**\r * This implementation of <code>nativeToJava</code> converts a platform specific \r * representation of a URL to a java <code>String</code>.\r * For additional information see <code>Transfer#nativeToJava</code>.\r * \r * @param transferData the platform specific representation of the data to be \r * converted\r * @return a java <code>String[]</code> containing a URL if the \r * conversion was successful; otherwise null\r */\rpublic Object nativeToJava(TransferData transferData){\r\tif (!isSupportedType(transferData) || transferData.data == null) return null;\r\tif (transferData.data.length == 0) return null;\r\tbyte[] buffer = transferData.data[0];\r\tint encoding = OS.CFStringGetSystemEncoding();\r\tint cfstring = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);\r\tif (cfstring == 0) return null;\r\ttry {\r\t\tint length = OS.CFStringGetLength(cfstring);\r\t\tif (length == 0) return null;\r\t\tchar[] chars = new char[length];\r\t\tCFRange range = new CFRange();\r\t\trange.length = length;\r\t\tOS.CFStringGetCharacters(cfstring, range, chars);\r\t\treturn new String(chars);\r\t} finally {\r\t\tOS.CFRelease(cfstring);\r\t}\r}\r\rprotected int[] getTypeIds(){\r\treturn new int[] {URL_ID, URLN_ID};\r}\r\rprotected String[] getTypeNames(){\r\treturn new String[] {URL, URLN}; \r}\r\rboolean checkURL(Object object) {\r\tif (object == null || !(object instanceof String) || ((String)object).length() == 0) return false;\r\tString url = (String)object;\r\ttry {\r\t\tnew URL(url);\r\t} catch (java.net.MalformedURLException e) {\r\t\treturn false;\r\t}\r\treturn true;\r}\r\rprotected boolean validate(Object object) {\r\treturn checkURL(object);\r}\r}\r", "\\ No newline at end of file", "+/*******************************************************************************\r * Copyright (c) 20007 IBM Corporation and others.\r * All rights reserved. This program and the accompanying materials\r * are made available under the terms of the Eclipse Public License v1.0\r * which accompanies this distribution, and is available at\r * http://www.eclipse.org/legal/epl-v10.html\r *\r * Contributors:\r *     IBM Corporation - initial API and implementation\r *******************************************************************************/\rpackage org.eclipse.swt.dnd;\r\rimport org.eclipse.swt.internal.carbon.*;\r\r/**\r * The class <code>URLTransfer</code> provides a platform specific mechanism \r * for converting text in URL format represented as a java <code>String</code> \r * to a platform specific representation of the data and vice versa.  See \r * <code>Transfer</code> for additional information. The string  \r * must contain the fully specified url.\r * \r * <p>An example of a java <code>String[]</code> containing a URL is shown \r * below:</p>\r * \r * <code><pre>\r *     String url = \"http://www.eclipse.org\";\r * </code></pre>\r */\rpublic class URLTransfer extends ByteArrayTransfer {\r\r\tstatic URLTransfer _instance = new URLTransfer();\r\tstatic final String URL = \"url \"; //$NON-NLS-1$\r\tstatic final int URL_ID = registerType(URL);\r\tstatic final String URLN = \"urln\"; //$NON-NLS-1$\r\tstatic final int URLN_ID = registerType(URLN);\r\rprivate URLTransfer() {}\r\r/**\r * Returns the singleton instance of the URLTransfer class.\r *\r * @return the singleton instance of the URLTransfer class\r */\rpublic static URLTransfer getInstance () {\r\treturn _instance;\r}\r\r/**\r * This implementation of <code>javaToNative</code> converts a URL\r * represented by a java <code>String</code> to a platform specific representation.\r * For additional information see <code>Transfer#javaToNative</code>.\r * \r * @param object a java <code>String[]</code> containing a URL\r * @param transferData an empty <code>TransferData</code> object; this\r *  object will be filled in on return with the platform specific format of the data\r */\rpublic void javaToNative (Object object, TransferData transferData){\r\tif (!checkURL(object) || !isSupportedType(transferData)) {\r\t\tDND.error(DND.ERROR_INVALID_DATA);\r\t}\r\ttransferData.result = -1;\r\tString url = (String)object;\r\tint count = url.length();\r\tchar[] chars = new char[count];\r\turl.getChars(0, count, chars, 0);\r\tint cfstring = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, count);\r\tif (cfstring == 0) return;\r\ttry {\r\t\tCFRange range = new CFRange();\r\t\trange.length = chars.length;\r\t\tint encoding = OS.CFStringGetSystemEncoding();\r\t\tint[] size = new int[1];\r\t\tint numChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, null, 0, size);\r\t\tif (numChars == 0 || size[0] == 0) return;\r\t\tbyte[] buffer = new byte[size[0]];\r\t\tnumChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, buffer, size [0], size);\r\t\tif (numChars == 0) return;\r\t\ttransferData.data = new byte[][] {buffer};\r\t\ttransferData.result = 0;\r\t} finally {\r\t\tOS.CFRelease(cfstring);\r\t}\r}\r\r/**\r * This implementation of <code>nativeToJava</code> converts a platform specific \r * representation of a URL to a java <code>String</code>.\r * For additional information see <code>Transfer#nativeToJava</code>.\r * \r * @param transferData the platform specific representation of the data to be \r * converted\r * @return a java <code>String[]</code> containing a URL if the \r * conversion was successful; otherwise null\r */\rpublic Object nativeToJava(TransferData transferData){\r\tif (!isSupportedType(transferData) || transferData.data == null) return null;\r\tif (transferData.data.length == 0) return null;\r\tbyte[] buffer = transferData.data[0];\r\tint encoding = OS.CFStringGetSystemEncoding();\r\tint cfstring = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);\r\tif (cfstring == 0) return null;\r\ttry {\r\t\tint length = OS.CFStringGetLength(cfstring);\r\t\tif (length == 0) return null;\r\t\tchar[] chars = new char[length];\r\t\tCFRange range = new CFRange();\r\t\trange.length = length;\r\t\tOS.CFStringGetCharacters(cfstring, range, chars);\r\t\treturn new String(chars);\r\t} finally {\r\t\tOS.CFRelease(cfstring);\r\t}\r}\r\rprotected int[] getTypeIds(){\r\treturn new int[] {URL_ID, URLN_ID};\r}\r\rprotected String[] getTypeNames(){\r\treturn new String[] {URL, URLN}; \r}\r\rboolean checkURL(Object object) {\r\treturn object != null && (object instanceof String) && ((String)object).length() > 0;\r}\r\rprotected boolean validate(Object object) {\r\treturn checkURL(object);\r}\r}\r", "\\ No newline at end of file"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f5159496978253c9fd957b18fd0cb08", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/URLTransfer.java", "commitBeforeChange": "c0924ae4b5c635b198e180a0627d640853830860", "commitAfterChange": "40a745073f9736dc99720e543ce3e4b7a4d2d9ff", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  boolean checkURL(Object object)", "signatureAfterChange": "  boolean checkURL(Object object)", "diff": ["-\tif (object == null  || !(object instanceof String) || ((String)object).length() == 0) return false;", "-\tString url = (String)object;", "-\ttry {", "-\t\tnew URL(url);", "-\t} catch (java.net.MalformedURLException e) {", "-\t\treturn false;", "-\t}", "-\treturn true;", "+\treturn object != null && (object instanceof String) && ((String)object).length() > 0;"]}], "num": 14101}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2adc8aa8cb6ed20a93c3ea735ac00b66", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9a93a0da13d54554193c243ac95450a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "3654966d37611f4d9d2c9f01b9ca8fa3554b426a", "commitAfterChange": "b2b34fbc2579012e9628a9fa709c082791d6ec37", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected void create(DeviceData deviceData)", "signatureAfterChange": " protected void create(DeviceData deviceData)", "diff": ["-\t\tprintInfo.setOrientation(data.orientation == PrinterData.LANDSCAPE ? OS.NSLandscapeOrientation : OS.NSPortraitOrientation);", "+\t\tif (data.duplex != SWT.DEFAULT) {", "+\t\t\tint /*long*/ settings = printInfo.PMPrintSettings();", "+\t\t\tint duplex = data.duplex == PrinterData.DUPLEX_SHORT_EDGE ? OS.kPMDuplexTumble", "+\t\t\t\t\t: data.duplex == PrinterData.DUPLEX_LONG_EDGE ? OS.kPMDuplexNoTumble", "+\t\t\t\t\t: OS.kPMDuplexNone;", "+\t\t\tOS.PMSetDuplex(settings, duplex);", "+\t\t}", "+\t\t/* Updating printInfo from PMPrintSettings overrides values in the printInfo dictionary. */", "+\t\tprintInfo.updateFromPMPrintSettings();", "+\t\tdict.setValue(NSNumber.numberWithInt(data.orientation == PrinterData.LANDSCAPE ? OS.NSLandscapeOrientation : OS.NSPortraitOrientation), OS.NSPrintOrientation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40a4c6a8626d97723cf98a573c79d584", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "c2ca70ca89de07d0ce2b2e26b82f7a84f0d554a2", "commitAfterChange": "426dc59c5105e19be1b59762869d99c45bdc43ac", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r \r LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["+\t\t\t* Feature in Windows.  When the tool tip control is\r", "+\t\t\t* created, the parent of the tool tip is the shell.\r", "+\t\t\t* If SetParent () is used to reparent the tool bar\r", "+\t\t\t* into a new shell, the tool tip is not reparented\r", "+\t\t\t* and pops up underneath the new shell.  The fix is\r", "+\t\t\t* to make sure the tool tip is a topmost window.\r", "+\t\t\t*/\r", "+\t\t\tcase OS.TTN_SHOW:\r", "+\t\t\tcase OS.TTN_POP: {\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Bug in Windows 98 and NT.  Setting the tool tip to be the\r", "+\t\t\t\t* top most window using HWND_TOPMOST can result in a parent\r", "+\t\t\t\t* dialog shell being moved behind its parent if the dialog\r", "+\t\t\t\t* has a sibling that is currently on top.  The fix is to lock\r", "+\t\t\t\t* the z-order of the active window.\r", "+\t\t\t\t*/\r", "+\t\t\t\tDisplay display = getDisplay ();\r", "+\t\t\t\tdisplay.lockActiveWindow = true;\r", "+\t\t\t\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOSIZE;\r", "+\t\t\t\tint hwndInsertAfter = hdr.code == OS.TTN_SHOW ? OS.HWND_TOPMOST : OS.HWND_NOTOPMOST;\r", "+\t\t\t\tOS.SetWindowPos (hdr.hwndFrom, hwndInsertAfter, 0, 0, 0, 0, flags);\r", "+\t\t\t\tdisplay.lockActiveWindow = false;\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\t/*\r", "-\t\t\t* kind of message occurs by copy inlining the memory moves\r", "-\t\t\t* and UNICODE conversion code.\r", "+\t\t\t* kind of message occurs by inlining the memory moves and\r", "+\t\t\t* the UNICODE conversion code.\r"]}], "num": 58178}
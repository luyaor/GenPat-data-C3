{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "334f747b058db8e104960223951073fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21bf8498c37b72a5a285210d84b0bdb2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "05c90dd5e9edb969b4de6894aebe19cfb767b603", "commitAfterChange": "ac77a8e872ad51631c6d96b12859eeab9b82b50f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public String[] getAvailableTypeNames()", "signatureAfterChange": " public String[] getAvailableTypeNames()", "diff": ["-\treturn new String[0];", "+\tbyte[] buffer = Converter.wcsToMbcs(null, \"TARGETS\", true);", "+\tint typeId = OS.gdk_atom_intern(buffer, false);", "+\t// first try the primary clipboard", "+\tint selection_data = OS.gtk_clipboard_wait_for_contents(pGtkPrimary, typeId);", "+\tif (selection_data == 0) {", "+\t\t// try the clipboard selection second", "+\t\tselection_data  = OS.gtk_clipboard_wait_for_contents(pGtkClipboard, typeId);", "+\t}", "+\tif (selection_data == 0) {", "+\t\treturn new String[0]; // No types available", "+\t}", "+\tGtkSelectionData gtkSelectionData = new GtkSelectionData();", "+\tOS.memmove(gtkSelectionData, selection_data, GtkSelectionData.sizeof);", "+\tif (gtkSelectionData.length == 0) return new String[0];", "+\tint[] atoms = new int[gtkSelectionData.length * 8 / gtkSelectionData.format];", "+\tOS.memmove(atoms, gtkSelectionData.data, gtkSelectionData.length);", "+\tString[] result = new String[atoms.length];", "+\tfor (int i = 0; i < atoms.length; i++) {", "+\t\tint pName = OS.gdk_atom_name(atoms[i]);", "+\t\tbuffer = new byte [OS.strlen(pName)];", "+\t\tOS.memmove (buffer, pName, buffer.length);", "+\t\tOS.g_free (pName);", "+\t\tresult[i] = new String (Converter.mbcsToWcs (null, buffer));", "+\t}", "+\tOS.gtk_selection_data_free(selection_data);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46dd09578f32818e4d586ed96c202f55", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "dc8212ec50bdd5e996c0c424b5f98eee79b85b71", "commitAfterChange": "11160fc32a5e37bb28a8748e12eb1179612748aa", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public Point getDPI()", "signatureAfterChange": " public Point getDPI()", "diff": ["-\t\t//TODO get output resolution", "+\t\tint /*long*/ pmPrintSession = printInfo.PMPrintSession();", "+\t\tint /*long*/ printer[] = new int /*long*/ [1]; ", "+\t\tint /*long*/ err = OS.PMSessionGetCurrentPrinter(pmPrintSession, printer);", "+\t\t", "+\t\tif (err == OS.noErr) {", "+\t\t\tint /*long*/ printSettings = printInfo.PMPrintSettings();", "+\t\t\tshort[] destType = new short[1];", "+\t\t\tif (OS.PMSessionGetDestinationType(pmPrintSession, printSettings, destType) == OS.noErr) {", "+\t\t\t\tif (destType[0] == OS.kPMDestinationPrinter) {", "+\t\t\t\t\tPMResolution resolution =  new PMResolution();", "+\t\t\t\t\t", "+\t\t\t\t\tif (OS.PMPrinterGetOutputResolution(printer[0], printSettings, resolution) != OS.noErr) {", "+\t\t\t\t\t\tint numberOfResolutions[] = new int[1];", "+\t\t\t\t\t\tif (OS.PMPrinterGetPrinterResolutionCount(printer[0], numberOfResolutions) == OS.noErr) {", "+\t\t\t\t\t\t\tPMResolution tempResolution = new PMResolution();", "+\t\t\t\t\t\t\ttempResolution.hRes = tempResolution.vRes = 300.0;\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tfor (int i = 1; i <= numberOfResolutions[0]; i++) {", "+\t\t\t\t\t\t\t\t// PMPrinterGetIndexedPrinterResolution indexes are 1-based.", "+\t\t\t\t\t\t\t\tif (OS.PMPrinterGetIndexedPrinterResolution(printer[0], i, tempResolution) == OS.noErr) {", "+\t\t\t\t\t\t\t\t\tif (tempResolution.vRes > resolution.vRes && tempResolution.hRes > resolution.hRes) {", "+\t\t\t\t\t\t\t\t\t\tresolution = tempResolution;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\treturn new Point((int)resolution.hRes, (int)resolution.vRes);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t"]}], "num": 48524}
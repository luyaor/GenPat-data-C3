{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d669287bd751676edb9361d8bb2c2074", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eca9a388aa00eca0c58b0bfb1ffac577", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public static String [] getExtensions ()", "signatureAfterChange": " private static String[] getExtensions( Display display )", "diff": ["- */\r", "-public static String [] getExtensions () {\r", "-\tswitch (Desktop) {\r", "-\t\tcase DESKTOP_KDE:\r", "-\t\t\tVector names = new Vector ();\r", "-\t\t\tint serviceList = KDE.KService_allServices ();\r", "-\t\t\tint listBeginning = KDE.KServiceList_begin (serviceList);\r", "-\t\t\tint listEnd = KDE.KServiceList_end (serviceList);\r", "-\t\t\tint iterator = KDE.KServiceListIterator_new (listBeginning);\r", "-\t\t\twhile (true) {\r", "-\t\t\t\tif (KDE.KServiceListIterator_equals (iterator, listEnd) != 0) break;\r", "-\t\t\t\tint kService = KDE.KServiceListIterator_dereference (iterator);\r", "-\t\t\t\tint serviceType = KDE.KService_type (kService);\r", "-\t\t\t\tbyte [] applicationType = Converter.wcsToMbcs (null, \"Application\", true);\r", "-\t\t\t\tint appString = KDE.QString_new (applicationType);\r", "-\t\t\t\tif (KDE.QString_equals (serviceType, appString) != 0) {\r", "-\t\t\t\t\tint appName = KDE.KService_name (kService);\r", "-\t\t\t\t\tnames.addElement (kde_convertQStringAndFree (appName));\r", "-\t\t\t\t}\r", "-\t\t\t\tKDE.QString_delete (appString);\r", "-\t\t\t\tKDE.KServiceListIterator_increment (iterator);\r", "-\t\t\t}\r", "-\t\t\tKDE.KServiceListIterator_delete (iterator);\r", "-\t\t\tKDE.KServiceList_delete (serviceList);\r", "-\t\t\tString[] appNames = new String [names.size ()];\r", "-\t\t\tfor (int i=0; i <names.size (); i++) {\r", "-\t\t\t\tappNames [i] = (String) names.elementAt (i);\r", "-\t\t\t}\r", "-\t\t\treturn appNames;\r", "-\r", "-\t\tcase DESKTOP_GNOME:\r", "-\t\t\t// Obtain the mime type/extension information.\r", "-\t\t\tHashtable mimeInfo = gnome_getMimeInfo();\r", "-\t\t\tint  index;\r", "-\t\t\t\r", "-\t\t\t// Create a sorted set of the file extensions.\r", "-\t\t\tVector extensions = new Vector();\r", "-\t\t\tIterator keys = mimeInfo.keySet().iterator();\r", "-\t\t\twhile (keys.hasNext()) {\r", "-\t\t\t\tString mimeType = (String) keys.next();\r", "-\t\t\t\tVector mimeExts = (Vector) mimeInfo.get( mimeType );\r", "-\t\t\t\tfor (index = 0; index < mimeExts.size(); index++){\r", "-\t\t\t\t\tif (!extensions.contains( mimeExts.elementAt( index ) )) {\r", "-\t\t\t\t\t\textensions.add( mimeExts.elementAt( index ) );\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t// Return the list of extensions.\r", "-\t\t\tString[] extStrings = new String[ extensions.size() ];\r", "-\t\t\tfor (index = 0; index < extensions.size(); index++) {\r", "-\t\t\t\textStrings[ index ] = (String) extensions.elementAt( index );\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\treturn extStrings;\r", "-\t}\r", "-\treturn new String[0];\r", "-}\r", "+ */", "+private static String[] getExtensions( Display display ) {", "+\tint desktop = getDesktop( display );", "+\tHashtable mimeInfo = null;", "+\tif (desktop == DESKTOP_KDE)   mimeInfo = kde_getMimeInfo();", "+\tif (desktop == DESKTOP_GNOME) mimeInfo = gnome_getMimeInfo();", "+\tif (desktop == DESKTOP_CDE)   mimeInfo = cde_getDataTypeInfo();", "+\tif (mimeInfo == null) return new String[0];", "+", "+\t\t\t", "+\t// Create a unique set of the file extensions.", "+\tVector extensions = new Vector();", "+\tIterator keys = mimeInfo.keySet().iterator();", "+\twhile (keys.hasNext()) {", "+\t\tString mimeType = (String) keys.next();", "+\t\tVector mimeExts = (Vector) mimeInfo.get( mimeType );", "+\t\tfor (int index = 0; index < mimeExts.size(); index++){", "+\t\t\tif (!extensions.contains( mimeExts.elementAt( index ) )) {", "+\t\t\t\textensions.add( mimeExts.elementAt( index ) );", "+\t\t\t}", "+\t\t}", "+\t}", "+\t\t\t", "+\t// Return the list of extensions.", "+\tString[] extStrings = new String[ extensions.size() ];", "+\tfor (int index = 0; index < extensions.size(); index++) {", "+\t\textStrings[ index ] = (String) extensions.elementAt( index );", "+\t}\t\t\t", "+\treturn extStrings;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c65d69dc8265a4835e56ae8218d6d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 32, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\tString iconPath = null;", "-\t\tcase DESKTOP_KDE: {", "-\t\t\t/* Use the character encoding for the default locale */", "-\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, name, true);", "-\t\t\tint mimeTypeName = KDE.QString_new(buffer);", "-\t\t\tint mimeType = KDE.KMimeType_mimeType(mimeTypeName);", "-\t\t\tKDE.QString_delete(mimeTypeName);\t\t\t", "-\t\t\tif (mimeType == 0) return null;\t\t\t", "-\t\t\tint mimeIcon = KDE.KMimeType_icon(mimeType, 0, false);", "-\t\t\tint loader = KDE.KGlobal_iconLoader();", "-\t\t\tint path = KDE.KIconLoader_iconPath(loader, mimeIcon, KDE.KICON_SMALL, true);", "-\t\t\tif (path == 0) return null;", "-\t\t\ticonPath = kde_convertQStringAndFree(path);", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase DESKTOP_GNOME: return imageData;", "+\t\tcase DESKTOP_GNOME: return gnome_getImageData();", "+\t\tcase DESKTOP_KDE: return kde_getImageData();", "-\t\tcase DESKTOP_UNKNOWN: return null;", "-\tif (iconPath.endsWith(\"xpm\")) {", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint screen  = OS.XDefaultScreenOfDisplay(xDisplay);", "-\t\tint fgPixel = OS.XWhitePixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "-\t\tint bgPixel = OS.XBlackPixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "-\t\t/* Use the character encoding for the default locale */", "-\t\tbyte[] iconName = Converter.wcsToMbcs(null, iconPath, true);", "-\t\tint pixmap = OS.XmGetPixmap(screen, iconName, fgPixel, bgPixel);", "-\t\tif (pixmap == OS.XmUNSPECIFIED_PIXMAP) return null;", "-\t\tImage image = Image.motif_new(display, SWT.BITMAP, pixmap, 0);", "-\t\tImageData imageData = image.getImageData();", "-\t\t", "-\t\t/* The pixmap returned from XmGetPixmap is cached by Motif", "-\t\t * and must be deleted by XmDestroyPixmap. Because it cannot", "-\t\t * be deleted directly by XFreePixmap, image.dispose() must not", "-\t\t * be called. The following code should do an equivalent image.dispose().", "-\t\t */", "-\t\tOS.XmDestroyPixmap(screen, pixmap);", "-\t\treturn imageData;\t", "-\t}", "-\ttry {", "-\t\treturn new ImageData(iconPath);", "-\t} catch (Exception e) {", "-\t\treturn null;", "-\t}", "+\treturn null;"]}], "num": 43339}
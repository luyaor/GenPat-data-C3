{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d3bd0c8c88567074777462d62263754", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc672a9d79f0acdec36a7a5c8242ef8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "14581ca5a7841e362a4bb6a68c76d00675c70760", "commitAfterChange": "2882bbd7423650466596733b7f7109e5d58042c8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute (String fileName)", "diff": ["-\t", "-\t/* Parse the command into its individual arguments. */", "-\tString[] args = parseCommand(command);", "-\tint fileArg = -1;", "-\tint index;", "-\tfor (index = 0; index < args.length; index++) {", "-\t\tint j = args[index].indexOf(\"%f\");", "-\t\tif (j != -1) {", "-\t\t\tString value = args[index];", "-\t\t\tfileArg = index;", "-\t\t\targs[index] = value.substring(0, j) + fileName + value.substring(j + 2);", "+\tint rc = -1;", "+\tchar[] chars = new char[fileName.length()];", "+\tfileName.getChars(0, chars.length, chars, 0);", "+\tint arg = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "+\tif (arg != 0) {", "+\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, arg, OS.kCFURLPOSIXPathStyle, false);", "+\t\tif (url != 0) {", "+\t\t\tbyte[] itemRef = new byte[80];", "+\t\t\tif (OS.CFURLGetFSRef(url, itemRef)) {", "+\t\t\t\tint fsRefPtr = OS.NewPtr(fsRef.length);", "+\t\t\t\tif (fsRefPtr != 0) {", "+\t\t\t\t\tOS.memcpy(fsRefPtr, fsRef, fsRef.length);", "+\t\t\t\t\tLSApplicationParameters params = new LSApplicationParameters();", "+\t\t\t\t\tparams.version = 0;", "+\t\t\t\t\tparams.flags = 0;", "+\t\t\t\t\tparams.application = fsRefPtr;", "+\t\t\t\t\trc = OS.LSOpenItemsWithRole(itemRef, 1, OS.kLSRolesAll, 0, params, null, 0);", "+\t\t\t\t\tOS.DisposePtr(fsRefPtr);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.CFRelease(url);", "+\t\tOS.CFRelease(arg);", "+\treturn rc == OS.noErr;", "+}", "-\t/* If a file name was given but the command did not have \"%f\" */", "-\tif ((fileName.length() > 0) && (fileArg < 0)) {", "-\t\tString[] newArgs = new String[args.length + 1];", "-\t\tfor (index = 0; index < args.length; index++) newArgs[index] = args[index];", "-\t\tnewArgs[args.length] = fileName;", "-\t\targs = newArgs;", "-\t/* Execute the command. */", "-\ttry {", "-\t\tCompatibility.exec(args);", "-\t} catch (IOException e) {", "-\t\treturn false;", "-\t}", "-\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc9e8fabe780d34b1a59058323dfeb7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "8c17c0dc0cfa02ca9270578b50ada2ac195f1744", "commitAfterChange": "b342ee5d6aad586106f7626c54ef8e5fbeb06deb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute (String fileName)", "diff": ["-\tchar[] chars = new char[fileName.length()];", "-\tfileName.getChars(0, chars.length, chars, 0);", "-\tint arg = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "-\tif (arg != 0) {", "-\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, arg, OS.kCFURLPOSIXPathStyle, false);", "-\t\tif (url != 0) {", "-\t\t\tbyte[] itemRef = new byte[80];", "-\t\t\tif (OS.CFURLGetFSRef(url, itemRef)) {", "-\t\t\t\tint fsRefPtr = OS.NewPtr(fsRef.length);", "-\t\t\t\tif (fsRefPtr != 0) {", "-\t\t\t\t\tOS.memcpy(fsRefPtr, fsRef, fsRef.length);", "-\t\t\t\t\tLSApplicationParameters params = new LSApplicationParameters();", "-\t\t\t\t\tparams.version = 0;", "-\t\t\t\t\tparams.flags = 0;", "-\t\t\t\t\tparams.application = fsRefPtr;", "-\t\t\t\t\trc = OS.LSOpenItemsWithRole(itemRef, 1, OS.kLSRolesAll, 0, params, null, 0);", "-\t\t\t\t\tOS.DisposePtr(fsRefPtr);", "+\tint fsRefPtr = OS.NewPtr(fsRef.length);", "+\tif (fsRefPtr != 0) {", "+\t\tOS.memcpy(fsRefPtr, fsRef, fsRef.length);", "+\t\tLSApplicationParameters params = new LSApplicationParameters();", "+\t\tparams.version = 0;", "+\t\tparams.flags = 0;", "+\t\tparams.application = fsRefPtr;", "+\t\tif (fileName.length() == 0) {", "+\t\t\trc = OS.LSOpenApplication(params, null);", "+\t\t} else {", "+\t\t\tchar[] chars = new char[fileName.length()];", "+\t\t\tfileName.getChars(0, chars.length, chars, 0);", "+\t\t\tint arg = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "+\t\t\tif (arg != 0) {", "+\t\t\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, arg, OS.kCFURLPOSIXPathStyle, false);", "+\t\t\t\tif (url != 0) {", "+\t\t\t\t\tbyte[] itemRef = new byte[80];", "+\t\t\t\t\tif (OS.CFURLGetFSRef(url, itemRef)) {", "+\t\t\t\t\t\trc = OS.LSOpenItemsWithRole(itemRef, 1, OS.kLSRolesAll, 0, params, null, 0);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.CFRelease(url);", "+\t\t\t\tOS.CFRelease(arg);", "-\t\t\tOS.CFRelease(url);", "-\t\tOS.CFRelease(arg);", "+\t\tOS.DisposePtr(fsRefPtr);"]}], "num": 40022}
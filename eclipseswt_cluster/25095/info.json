{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1501911f8412731bfbe284e81f1c0271", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8464a151dc401d76c0123d83396ce0c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "272967205f3824ec29456112026262c64ae69dfa", "commitAfterChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "methodNumberBeforeChange": 206, "methodNumberAfterChange": 204, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["-", "-\t/* Exit early - don't draw the background */", "-\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) {", "-\t\treturn null;", "-\t}", "-", "-\t/* Get the damage */", "-\tint result = 0;", "-\tif (OS.IsWinCE) {", "-\t\tRECT rect = new RECT ();", "-\t\tOS.GetUpdateRect (handle, rect, false);", "-\t\tresult = callWindowProc (OS.WM_PAINT, wParam, lParam);", "-\t\tOS.InvalidateRect (handle, rect, false);", "-\t} else {", "-\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "-\t\tOS.GetUpdateRgn (handle, rgn, false);", "-\t\tresult = callWindowProc (OS.WM_PAINT, wParam, lParam);", "-\t\tOS.InvalidateRgn (handle, rgn, false);", "-\t\tOS.DeleteObject (rgn);", "-\t}", "-", "-\t/* Create the paint GC */", "-\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "-\tGCData data = new GCData ();", "-\tdata.ps = ps;", "-\tGC gc = GC.win32_new (this, data);", "-\t", "-\t/* Send the paint event */", "-\tint width = ps.right - ps.left;", "-\tint height = ps.bottom - ps.top;", "-\tif (width != 0 && height != 0) {", "-\t\tEvent event = new Event ();", "-\t\tevent.gc = gc;", "-\t\tevent.x = ps.left;", "-\t\tevent.y = ps.top;", "-\t\tevent.width = width;", "-\t\tevent.height = height;", "-\t\t/*", "-\t\t* It is possible (but unlikely), that application", "-\t\t* code could have disposed the widget in the paint", "-\t\t* event.  If this happens, attempt to give back the", "-\t\t* paint GC anyways because this is a scarce Windows", "-\t\t* resource.", "-\t\t*/", "-\t\tsendEvent (SWT.Paint, event);", "-\t\t// widget could be disposed at this point", "-\t\t", "-\t\tevent.gc = null;", "-\t}", "-\t", "-\t/* Dispose the paint GC\t*/", "-\tgc.dispose ();", "-\tif (result == 0) return LRESULT.ZERO;", "-\treturn new LRESULT (result);", "+\treturn super.wmPaint (handle, wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa2d5c7de00cdc4294228e2027a260c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "712c58009edef01d9b3055ba45a472983fec437f", "commitAfterChange": "dfe0337472c26c7f5ae9d02a3639e682bdd08b7c", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r public void select (int index)", "signatureAfterChange": "\r \r void select (int [] indices, boolean scroll)", "diff": ["+\r", "+void select (int [] indices, boolean scroll) {\r", "+\tint i = 0;\r", "+\twhile (i < indices.length) {\r", "+\t\t\tselect (index, false);\r", "+\t\t\t\tif (0 <= index && index < count) {\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\ti++;\r", "+\tif (scroll) showSelection ();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cd7f2ac1ab27b2bbb989c7e6d7c51e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "fe9cf8b69b05605c0699efe7aea722d3e2396198", "commitAfterChange": "a76fbcdb2bea80d2aa22d622558bd4081d9e971a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void click ()", "signatureAfterChange": "  void click ()", "diff": ["-\tint rid = OS.PtWidgetRid (handle);", "-\tif (rid == 0) return;", "-\tPhEvent_t event = new PhEvent_t ();", "-\tevent.emitter_rid = rid;", "-\tevent.emitter_handle = handle;", "-\tevent.collector_rid = rid;", "-\tevent.collector_handle = handle;", "-\tevent.flags = OS.Ph_EVENT_DIRECT;", "-\tevent.processing_flags = OS.Ph_FAKE_EVENT;", "-\tevent.type = OS.Ph_EV_BUT_PRESS;", "-\tevent.num_rects = 1;", "-\tPhPointerEvent_t pe = new PhPointerEvent_t ();", "-\tpe.click_count = 1;", "-\tpe.buttons = OS.Ph_BUTTON_SELECT;", "-\tPhRect_t rect = new PhRect_t ();", "-\tint ptr = OS.malloc (PhEvent_t.sizeof + PhPointerEvent_t.sizeof + PhRect_t.sizeof);", "-\tOS.memmove (ptr, event, PhEvent_t.sizeof);", "-\tOS.memmove (ptr + PhEvent_t.sizeof,  rect, PhRect_t.sizeof);", "-\tOS.memmove (ptr + PhEvent_t.sizeof + PhRect_t.sizeof, pe, PhPointerEvent_t.sizeof);", "-\tOS.PtSendEventToWidget (handle, ptr);\t", "-\tOS.PtFlush ();", "-\tevent.type = OS.Ph_EV_BUT_RELEASE;", "-\tevent.subtype = OS.Ph_EV_RELEASE_REAL;", "-\tOS.memmove (ptr, event, PhEvent_t.sizeof);", "-\tOS.memmove (ptr + PhEvent_t.sizeof,  rect, PhRect_t.sizeof);", "-\tOS.memmove (ptr + PhEvent_t.sizeof + PhRect_t.sizeof, pe, PhPointerEvent_t.sizeof);", "-\tOS.PtSendEventToWidget (handle, ptr);\t", "-\tOS.free (ptr);", "+\tclick (handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7936b147d2fe2bb4a53241b7187e79bf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "712c58009edef01d9b3055ba45a472983fec437f", "commitAfterChange": "dfe0337472c26c7f5ae9d02a3639e682bdd08b7c", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r public void select (int index)", "signatureAfterChange": "\r public void select (int index)", "diff": ["+\tselect (index, false);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d39298b103910b0a585734e1f5d77337", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "2ae86819a60b98376cf75e6ce9f3c89fd6e5f9d0", "commitAfterChange": "1de0170aefb186594865f4c80fab51dd7f9df2d3", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["-\ttext = string;", "-\t/*", "-\t* Bug in Motif.  The widget will not receive mouse events, if the", "-\t* label string is empty.  The fix is to detect that and set a single", "-\t* space instead. ", "-\t*/", "-\tif (string.length () == 0) string = \" \";", "-", "-\t/* Strip out mnemonic marker symbols, and remember the mnemonic. */", "-\tchar [] unicode = new char [string.length ()];", "-\tstring.getChars (0, unicode.length, unicode, 0);", "-\tint mnemonic = fixMnemonic (unicode);", "-\t", "-\t/* Wrap the text if necessary, and convert to mbcs. */", "-\tbyte [] buffer;", "-\tif ((style & SWT.WRAP) != 0) {", "-\t\tint [] argList = {", "-\t\t\tOS.XmNwidth, 0,        /* 1 */", "-\t\t\tOS.XmNmarginLeft, 0,   /* 3 */", "-\t\t\tOS.XmNmarginRight, 0,  /* 5 */", "-\t\t\tOS.XmNborderWidth, 0,  /* 7 */", "-\t\t\tOS.XmNmarginWidth, 0,  /* 9 */", "-\t\t};", "-\t\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\t\tint width = argList [1] - argList [3] - argList [5] - argList [7] * 2 - argList [9] * 2;", "-\t\tif (mnemonic != 0) string = new String (unicode);", "-\t\tstring = display.wrapText (string, font, width);", "-\t\tbuffer = Converter.wcsToMbcs (getCodePage (), string, true);", "-\t} else {", "-\t\tbuffer = Converter.wcsToMbcs (getCodePage (), unicode, true);", "-\t}", "-\t", "-\tint xmString = OS.XmStringGenerate(buffer, null, OS.XmCHARSET_TEXT, null);", "-\tif (xmString == 0) error (SWT.ERROR_CANNOT_SET_TEXT);", "-\t\t", "-\t/*", "-\t* Bug in Solaris.  If a mnemonic is defined to be a character", "-\t* that appears in a string in a position that follows a '\\n',", "-\t* Solaris segment faults.  For example, a label with text", "-\t* \"Hello\\nthe&re\" would GP since \"r\" appears after '\\n'.", "-\t*", "-\t* The fix is to remove mnemonics from labels that contain", "-\t* '\\n', which is fine since such labels generally just act", "-\t* as descriptive texts anyways.", "-\t*/ ", "-\tif (mnemonic == 0 || string.indexOf ('\\n') != -1) {", "-\t\tmnemonic = OS.XK_VoidSymbol;", "-\t}", "-\tint [] argList = {", "-\t\tOS.XmNlabelType, OS.XmSTRING,", "-\t\tOS.XmNlabelString, xmString,", "-\t\tOS.XmNmnemonic, mnemonic,", "-\t};", "-\tOS.XtSetValues (handle, argList, argList.length / 2);", "-\tif (xmString != 0) OS.XmStringFree (xmString);", "+\t_setText (text = string);"]}], "num": 25095}
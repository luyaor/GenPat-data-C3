{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5986df90bd8df728d1c722c9a71cc9a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73bd0e545037e38a2c3e669008f93e59", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static Program [] getPrograms ()", "signatureAfterChange": " public static Program [] getPrograms ()", "diff": ["-\tHashtable bundles = new Hashtable();", "-\tString[] extensions = getExtensions();", "-\tbyte[] fsRef = new byte[80];", "-\tfor (int i = 0; i < extensions.length; i++) {", "-\t\tString extension = extensions[i];", "-\t\tchar[] chars = new char[extension.length() - 1];", "-\t\textension.getChars(1, extension.length(), chars, 0);", "-\t\tint ext = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "-\t\tif (ext != 0) {", "-\t\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "-\t\t\t\tProgram program = getProgram(fsRef);", "-\t\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "-\t\t\t\t\tbundles.put(program.getName(), program);", "-\t\t\t\t\tfsRef = new byte[80];", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (OS.VERSION >= 0x1040) {", "-\t\t\t\tint utis = OS.UTTypeCreateAllIdentifiersForTag(OS.kUTTagClassFilenameExtension(), ext, 0);", "-\t\t\t\tif (utis != 0) {", "-\t\t\t\t\tint utiCount = OS.CFArrayGetCount(utis);", "-\t\t\t\t\tfor (int j = 0; j < utiCount; j++) {", "-\t\t\t\t\t\tint uti = OS.CFArrayGetValueAtIndex(utis, j);", "-\t\t\t\t\t\tif (uti != 0) {", "-\t\t\t\t\t\t\tint apps = OS.LSCopyAllRoleHandlersForContentType(uti, OS.kLSRolesAll);", "-\t\t\t\t\t\t\tif (apps != 0) {", "-\t\t\t\t\t\t\t\tint appCount = OS.CFArrayGetCount(apps);", "-\t\t\t\t\t\t\t\tfor (int k = 0; k < appCount; k++) {", "-\t\t\t\t\t\t\t\t\tint app = OS.CFArrayGetValueAtIndex(apps, k);", "-\t\t\t\t\t\t\t\t\tif (app != 0) {;", "-\t\t\t\t\t\t\t\t\t\tif (OS.LSFindApplicationForInfo(OS.kLSUnknownCreator, app, 0, fsRef, null) == OS.noErr) {", "-\t\t\t\t\t\t\t\t\t\t\tProgram program = getProgram(fsRef);", "-\t\t\t\t\t\t\t\t\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "-\t\t\t\t\t\t\t\t\t\t\t\tbundles.put(program.getName(), program);", "-\t\t\t\t\t\t\t\t\t\t\t\tfsRef = new byte[80];", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tOS.CFRelease(apps);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.CFRelease(utis);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tOS.CFRelease(ext);", "-\t\t}", "-\t}", "-\tint count = 0;", "-\tProgram[] programs = new Program[bundles.size()];", "-\tEnumeration values = bundles.elements();", "-\twhile (values.hasMoreElements()) {", "-\t\tprograms[count++] = (Program)values.nextElement();", "-\t}", "-\treturn programs;", "+\treturn new Program[0];", "+//\tHashtable bundles = new Hashtable();", "+//\tString[] extensions = getExtensions();", "+//\tbyte[] fsRef = new byte[80];", "+//\tfor (int i = 0; i < extensions.length; i++) {", "+//\t\tString extension = extensions[i];", "+//\t\tchar[] chars = new char[extension.length() - 1];", "+//\t\textension.getChars(1, extension.length(), chars, 0);", "+//\t\tint ext = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "+//\t\tif (ext != 0) {", "+//\t\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "+//\t\t\t\tProgram program = getProgram(fsRef);", "+//\t\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "+//\t\t\t\t\tbundles.put(program.getName(), program);", "+//\t\t\t\t\tfsRef = new byte[80];", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t\tif (OS.VERSION >= 0x1040) {", "+//\t\t\t\tint utis = OS.UTTypeCreateAllIdentifiersForTag(OS.kUTTagClassFilenameExtension(), ext, 0);", "+//\t\t\t\tif (utis != 0) {", "+//\t\t\t\t\tint utiCount = OS.CFArrayGetCount(utis);", "+//\t\t\t\t\tfor (int j = 0; j < utiCount; j++) {", "+//\t\t\t\t\t\tint uti = OS.CFArrayGetValueAtIndex(utis, j);", "+//\t\t\t\t\t\tif (uti != 0) {", "+//\t\t\t\t\t\t\tint apps = OS.LSCopyAllRoleHandlersForContentType(uti, OS.kLSRolesAll);", "+//\t\t\t\t\t\t\tif (apps != 0) {", "+//\t\t\t\t\t\t\t\tint appCount = OS.CFArrayGetCount(apps);", "+//\t\t\t\t\t\t\t\tfor (int k = 0; k < appCount; k++) {", "+//\t\t\t\t\t\t\t\t\tint app = OS.CFArrayGetValueAtIndex(apps, k);", "+//\t\t\t\t\t\t\t\t\tif (app != 0) {;", "+//\t\t\t\t\t\t\t\t\t\tif (OS.LSFindApplicationForInfo(OS.kLSUnknownCreator, app, 0, fsRef, null) == OS.noErr) {", "+//\t\t\t\t\t\t\t\t\t\t\tProgram program = getProgram(fsRef);", "+//\t\t\t\t\t\t\t\t\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "+//\t\t\t\t\t\t\t\t\t\t\t\tbundles.put(program.getName(), program);", "+//\t\t\t\t\t\t\t\t\t\t\t\tfsRef = new byte[80];", "+//\t\t\t\t\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t\t\tOS.CFRelease(apps);", "+//\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t}", "+//\t\t\t\t\tOS.CFRelease(utis);", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t\tOS.CFRelease(ext);", "+//\t\t}", "+//\t}", "+//\tint count = 0;", "+//\tProgram[] programs = new Program[bundles.size()];", "+//\tEnumeration values = bundles.elements();", "+//\twhile (values.hasMoreElements()) {", "+//\t\tprograms[count++] = (Program)values.nextElement();", "+//\t}", "+//\treturn programs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8092dbaee1c0afa5a1a46654dffcb53f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/ImageTransfer.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tif (!isSupportedType(transferData) || transferData.data == null)", "-\t\treturn null;", "-\tif (transferData.data.length == 0)", "-\t\treturn null;", "-\tbyte[] dataArr = transferData.data[0];", "-\tint size = dataArr.length;", "-\tint pictPtr = OS.NewPtr(size);", "-\tOS.memmove(pictPtr, dataArr, size);", "-\tint dataProvider = OS.CGDataProviderCreateWithData(0, pictPtr, size, 0);", "-\tif (dataProvider != 0) {", "-\t\tint pictDataRef = OS.QDPictCreateWithProvider(dataProvider);", "-\t\t// get bounds for the image", "-\t\tCGRect rect = new CGRect();", "-\t\tOS.QDPictGetBounds(pictDataRef, rect);", "-\t\tint width = (int) rect.width;", "-\t\tint height = (int) rect.height;", "-", "-\t\t/* Create the image */", "-\t\tint bpr = width * 4;", "-\t\tint dataSize = height * bpr;", "-\t\tint data = OS.NewPtr(dataSize);", "-\t\tif (data == 0)", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint provider = OS", "-\t\t\t\t.CGDataProviderCreateWithData(0, data, dataSize, 0);", "-\t\tif (provider == 0) {", "-\t\t\tOS.DisposePtr(data);", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t}", "-\t\tint colorspace = OS.CGColorSpaceCreateDeviceRGB();", "-\t\tif (colorspace == 0)", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint handle = OS.CGImageCreate(width, height, 8, 32, bpr,", "-\t\t\t\tcolorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null,", "-\t\t\t\ttrue, 0);", "-\t\tOS.CGDataProviderRelease(provider);", "-\t\tif (handle == 0) {", "-\t\t\tOS.DisposePtr(data);", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t}", "-\t\tint bpc = OS.CGImageGetBitsPerComponent(handle);", "-\t\tint context = OS.CGBitmapContextCreate(data, width, height, bpc,", "-\t\t\t\tbpr, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "-\t\tif (context == 0) {", "-\t\t\tOS.CGImageRelease(handle);", "-\t\t\tOS.DisposePtr(data);", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t}", "-\t\tint status = OS.QDPictDrawToCGContext(context, rect, pictDataRef);", "-\t\tImageData imgData = null;", "-\t\tif (status == 0) {", "-\t\t\tImage image = Image.carbon_new(Display.getCurrent(),", "-\t\t\t\t\tSWT.BITMAP, handle, data);", "-\t\t\timgData = image.getImageData();", "-\t\t\timage.dispose();", "-\t\t}", "-\t\tOS.CGContextRelease(context);", "-\t\tOS.QDPictRelease(pictDataRef);", "-\t\treturn imgData;", "-\t}", "-\treturn null;", "+\tif (!isSupportedType(transferData) || transferData.data == null) return null;", "+\tNSData data = (NSData) transferData.data;", "+\tif (data.length() == 0) return null;", "+\tNSImage nsImage = (NSImage) new NSImage().alloc();", "+\tnsImage.initWithData(data);", "+\t//TODO: Image representation wrong???", "+\tImage image = Image.cocoa_new(Display.getCurrent(), SWT.BITMAP, nsImage);", "+\tImageData imageData = image.getImageData();", "+\timage.dispose();", "+\treturn imageData;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd2ff2c2980952a6c1334cffd2a59c39", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "5bcc927d92fd92a4706eebf73a5e873324a4a777", "commitAfterChange": "78fbb6844fc73f459133f9bf8c4ddac92e6ea668", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void drawBackground (Control control, long window, long region, int x, int y, int width, int height)", "signatureAfterChange": "  void drawBackground (Control control, long window, long region, int x, int y, int width, int height)", "diff": ["+\tdrawBackground(control, window, 0, region, x, y, width, height);", "+}", "-\t\tlong /*int*/ cairo = OS.gdk_cairo_create(window);", "-\t\tCairo.cairo_destroy(cairo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "749a045cbe0acf59a42f4a625a7ebc39", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "48512dc20e32e369917d3e1ccfb92109c9724e7e", "commitAfterChange": "1942f64e0b774317e0a8e6ec44902bb736bb7790", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Rectangle getBounds ()", "signatureAfterChange": " public Rectangle getBounds ()", "diff": ["-\tGtkCTree tree = new GtkCTree();\r", "-\tOS.memmove(tree, ctree, GtkCTree.sizeof);\r", "-\r", "-\tGtkAdjustment adjustment = new GtkAdjustment ();\r", "-\tOS.memmove (adjustment, tree.vadjustment, GtkAdjustment.sizeof);\r", "-\tfloat vaj = adjustment.value;\r", "-\tOS.memmove (adjustment, tree.hadjustment, GtkAdjustment.sizeof);\r", "-\tfloat haj = adjustment.value;\r", "+\tGtkCTree tree = new GtkCTree(ctree);\r", "+/*\r", "+\tdouble haj = OS.gtk_adjustment_get_value(tree.hadjustment);\r", "+\tdouble vaj = OS.gtk_adjustment_get_value(tree.vadjustment);\r", "+\t\r", "-\r", "-\tGtkStyle style = new GtkStyle();\r", "-\tOS.memmove(style, styleHandle, GtkStyle.sizeof);\t\r", "-\tint width = OS.gdk_string_width(style.font, buffer1);\r", "+\tGtkStyle style = new GtkStyle(styleHandle);*/\r", "+\t/* FIXME */\t\r", "+\tint width = 50; /*OS.gdk_string_width(style.font, buffer1);*/\r", "-\tint x = 33+tree.tree_indent*(level-1)+spacing[0]+tree.hoffset;\r", "+/*\tint x = 33+tree.tree_indent*(level-1)+spacing[0]+tree.hoffset;*/\r", "-\treturn new Rectangle (x, y, width, height);\r", "+\treturn new Rectangle (0, 0, 40, 10);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31cf8d66e25fd21730dd53150082b3a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "45585fa2e7285a3bb37f9ceb83572ce9673699f1", "commitAfterChange": "1ad491e6034e78929a62a27a0caa0a133127f327", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t/*", "-\t* Registry entry HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\\Version indicates", "-\t* which version of IE is installed.  Check this value in order to determine version-specific", "-\t* features that can be enabled.", "-\t*/", "-\tTCHAR key = new TCHAR (0, \"Software\\\\Microsoft\\\\Internet Explorer\", true);\t//$NON-NLS-1$", "-\tint /*long*/ [] phkResult = new int /*long*/ [1];", "-\tif (OS.RegOpenKeyEx (OS.HKEY_LOCAL_MACHINE, key, 0, OS.KEY_READ, phkResult) == 0) {", "-\t\tint [] lpcbData = new int [1];", "-\t\tTCHAR buffer = new TCHAR (0, \"Version\", true); //$NON-NLS-1$", "-\t\tint result = OS.RegQueryValueEx (phkResult [0], buffer, 0, null, (TCHAR) null, lpcbData);", "-\t\tif (result == 0) {", "-\t\t\tTCHAR lpData = new TCHAR (0, lpcbData [0] / TCHAR.sizeof);", "-\t\t\tresult = OS.RegQueryValueEx (phkResult [0], buffer, 0, null, lpData, lpcbData);", "-\t\t\tif (result == 0) {", "-\t\t\t\tString versionString = lpData.toString (0, lpData.strlen ());", "-\t\t\t\tint index = versionString.indexOf (\".\"); //$NON-NLS-1$", "-\t\t\t\tif (index != -1) {", "-\t\t\t\t\tString majorString = versionString.substring (0, index);", "-\t\t\t\t\tint major = 0;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tmajor = Integer.valueOf (majorString).intValue ();", "-\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\t/* just continue, version-specific features will not be enabled */", "-\t\t\t\t\t}", "-\t\t\t\t\tif (major >= 7) {", "-\t\t\t\t\t\tsilenceInternalNavigate = true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tOS.RegCloseKey (phkResult [0]);", "-\t}", "-", "-\t/*", "-\t* Registry entry HKEY_CLASSES_ROOT\\Shell.Explorer\\CLSID indicates which version of", "-\t* Shell.Explorer to use by default.  We usually want to use this value because it", "-\t* typically points at the newest one that is available.  However it is possible for", "-\t* this registry entry to be changed by another application to point at some other", "-\t* Shell.Explorer version.", "-\t*", "-\t* The Browser depends on the Shell.Explorer version being at least Shell.Explorer.2.", "-\t* If it is detected in the registry to be Shell.Explorer.1 then change the progId that", "-\t* will be embedded to explicitly specify Shell.Explorer.2.", "-\t*/", "-\tString progId = \"Shell.Explorer\";\t//$NON-NLS-1$", "-\tkey = new TCHAR (0, \"Shell.Explorer\\\\CLSID\", true);\t//$NON-NLS-1$", "-\tphkResult = new int /*long*/ [1];", "-\tif (OS.RegOpenKeyEx (OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult) == 0) {", "-\t\tint [] lpcbData = new int [1];", "-\t\tint result = OS.RegQueryValueEx (phkResult [0], null, 0, null, (TCHAR) null, lpcbData);", "-\t\tif (result == 0) {", "-\t\t\tTCHAR lpData = new TCHAR (0, lpcbData [0] / TCHAR.sizeof);", "-\t\t\tresult = OS.RegQueryValueEx (phkResult [0], null, 0, null, lpData, lpcbData);", "-\t\t\tif (result == 0) {", "-\t\t\t\tString clsid = lpData.toString (0, lpData.strlen ());", "-\t\t\t\tif (clsid.equals (CLSID_SHELLEXPLORER1)) {", "-\t\t\t\t\t/* Shell.Explorer.1 is the default, ensure that Shell.Explorer.2 is available */", "-\t\t\t\t\tkey = new TCHAR (0, \"Shell.Explorer.2\", true);\t//$NON-NLS-1$", "-\t\t\t\t\tint /*long*/ [] phkResult2 = new int /*long*/ [1];", "-\t\t\t\t\tif (OS.RegOpenKeyEx (OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult2) == 0) {", "-\t\t\t\t\t\t/* specify that Shell.Explorer.2 is to be used */", "-\t\t\t\t\t\tOS.RegCloseKey (phkResult2 [0]);", "-\t\t\t\t\t\tprogId = \"Shell.Explorer.2\";\t//$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tOS.RegCloseKey (phkResult [0]);", "-\t}", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db220dbd928a0ea942957dcc19db4f06", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "7839abafc2697fc9e03d4ccdc0123f26f40d167c", "commitAfterChange": "b3f5c32b33c36513021ff265fa7b9f332e44c257", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "  void setToolTipText (int widget, String string)", "signatureAfterChange": "  void setToolTipText (int tipWidget, String string)", "diff": ["-void setToolTipText (int /*long*/ widget, String string) {", "+void setToolTipText (int /*long*/ tipWidget, String string) {", "+\tsetToolTipText (tipWidget, tipWidget, string);", "+}", "-\t\tOS.gtk_widget_set_tooltip_text (widget, null);", "-\t\tOS.gtk_tooltip_trigger_tooltip_query (OS.gdk_display_get_default ());", "-\t\tOS.gtk_widget_set_tooltip_text (widget, buffer);\t", "-\t\t\tif ((OS.GTK_WIDGET_FLAGS (widget) & (OS.GTK_REALIZED | OS.GTK_VISIBLE)) != 0) {", "-\t\t\t\t\tif (widget == user_data [0]) {", "-\t\t\t\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, widget, buffer, null);", "-\t\t\t\t\t\tint /*long*/ data = OS.gtk_tooltips_data_get (widget);", "-\t\t\t\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, widget, buffer, null);", "-\t\tif (set) OS.gtk_tooltips_set_tip (tooltipsHandle, widget, buffer, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d3f5c56329a76df939d8fa86907cddd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d62639ede6a7c1602973b824cc7101b67ed4c309", "commitAfterChange": "21edcd9179bf3e0a6f314b5d553d95c17b6bc393", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "  void setToolTipText (long rootWidget, long tipWidget, String string)", "signatureAfterChange": "  void setToolTipText (long rootWidget, long tipWidget, String string)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 12, 0)) {", "-\t\tbyte [] buffer = null;", "-\t\tif (string != null && string.length () > 0) {", "-\t\t\tchar [] chars = fixMnemonic (string, false);", "-\t\t\tbuffer = Converter.wcsToMbcs (null, chars, true);", "-\t\t}", "-\t\tlong /*int*/ oldTooltip = OS.gtk_widget_get_tooltip_text (rootWidget);", "-\t\tboolean same = false;", "-\t\tif (buffer == null && oldTooltip == 0) {", "-\t\t\tsame = true;", "-\t\t} else if (buffer != null && oldTooltip != 0) {", "-\t\t\tsame = OS.strcmp (oldTooltip, buffer) == 0;", "-\t\t}", "-\t\tif (oldTooltip != 0) OS.g_free(oldTooltip);", "-\t\tif (same) return;", "-", "-\t\tlong /*int*/ eventPtr = 0;", "-\t\tif (OS.GTK_VERSION < OS.VERSION (2, 18, 0)) {", "-\t\t\tOS.gtk_widget_set_tooltip_text (rootWidget, null);", "-\t\t\t/*", "-\t\t\t * Bug in GTK. In GTK 2.12, due to a miscalculation of window", "-\t\t\t * coordinates, using gtk_tooltip_trigger_tooltip_query ()", "-\t\t\t * to update an existing a toboltip will result in the tooltip", "-\t\t\t * being displayed at a wrong position. The fix is to send out", "-\t\t\t * 2 fake GDK_MOTION_NOTIFY events (to mimic the GTK call) which", "-\t\t\t * contain the proper x and y coordinates.", "-\t\t\t */", "-\t\t\tlong /*int*/ tipWindow = gtk_widget_get_window (rootWidget);", "-\t\t\tif (tipWindow != 0) {", "-\t\t\t\tint [] x = new int [1], y = new int [1];", "-\t\t\t\tlong /*int*/ window = OS.gdk_window_at_pointer (x, y);", "-\t\t\t\tlong /*int*/ [] user_data = new long /*int*/ [1];", "-\t\t\t\tif (window != 0) OS.gdk_window_get_user_data (window, user_data);", "-\t\t\t\tif (tipWidget == user_data [0]) {", "-\t\t\t\t\teventPtr = OS.gdk_event_new (OS.GDK_MOTION_NOTIFY);", "-\t\t\t\t\tGdkEventMotion event = new GdkEventMotion ();", "-\t\t\t\t\tevent.type = OS.GDK_MOTION_NOTIFY;", "-\t\t\t\t\tevent.window = OS.g_object_ref (tipWindow);", "-\t\t\t\t\tevent.x = x [0];", "-\t\t\t\t\tevent.y = y [0];", "-\t\t\t\t\tOS.gdk_window_get_origin (window, x, y);", "-\t\t\t\t\tevent.x_root = event.x + x [0];", "-\t\t\t\t\tevent.y_root = event.y + y [0];", "-\t\t\t\t\tOS.memmove (eventPtr, event, GdkEventMotion.sizeof);", "-\t\t\t\t\tOS.gtk_main_do_event (eventPtr);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tOS.gtk_widget_set_tooltip_text (rootWidget, buffer);", "-\t\tif (eventPtr != 0) {", "-\t\t\tOS.gtk_main_do_event (eventPtr);", "-\t\t\tOS.gdk_event_free (eventPtr);", "-\t\t}", "-\t} else {", "-\t\tbyte [] buffer = null;", "-\t\tif (string != null && string.length () > 0) {", "-\t\t\tchar [] chars = fixMnemonic (string, false);", "-\t\t\tbuffer = Converter.wcsToMbcs (null, chars, true);", "-\t\t}", "-\t\tlong /*int*/ tipData = OS.gtk_tooltips_data_get(tipWidget);", "-\t\tif (tipData != 0) {", "-\t\t\tlong /*int*/ oldTooltip = OS.GTK_TOOLTIPS_GET_TIP_TEXT(tipData);", "-\t\t\tif (string == null && oldTooltip == 0) {", "-\t\t\t\treturn;", "-\t\t\t} else if (string != null && oldTooltip != 0) {", "-\t\t\t\tif (buffer != null) {", "-\t\t\t\t\tif (OS.strcmp (oldTooltip, buffer) == 0) return;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (tooltipsHandle == 0) {", "-\t\t\ttooltipsHandle = OS.gtk_tooltips_new ();", "-\t\t\tif (tooltipsHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\tOS.g_object_ref (tooltipsHandle);", "-\t\t\tOS.g_object_ref_sink (tooltipsHandle);", "-\t\t}", "-", "-\t\t/*", "-\t\t* Feature in GTK.  There is no API to position a tooltip.", "-\t\t* The fix is to connect to the size_allocate signal for", "-\t\t* the tooltip window and position it before it is mapped.", "-\t\t*", "-\t\t* Bug in Solaris-GTK.  Invoking gtk_tooltips_force_window()", "-\t\t* can cause a crash in older versions of GTK.  The fix is", "-\t\t* to avoid this call if the GTK version is older than 2.2.x.", "-\t\t* The call is to be avoided on GTK versions newer than 2.12.0", "-\t\t* where it's deprecated.", "-\t\t*/", "-\t\tOS.gtk_tooltips_force_window (tooltipsHandle);", "-\t\tlong /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (tooltipsHandle);", "-\t\tif (tipWindow != 0 && tipWindow != tooltipWindow) {", "-\t\t\tOS.g_signal_connect (tipWindow, OS.size_allocate, display.sizeAllocateProc, shellHandle);", "-\t\t\ttooltipWindow = tipWindow;", "-\t\t}", "-", "-\t\t/*", "-\t\t* Bug in GTK.  If the cursor is inside the window when a new", "-\t\t* tooltip is set and the old tooltip is hidden, the new tooltip", "-\t\t* is not displayed until the mouse re-enters the window.  The", "-\t\t* fix is force the new tooltip to be active.", "-\t\t*/", "-\t\tboolean set = true;", "-\t\tif (tipWindow != 0) {", "-\t\t\tif (gtk_widget_get_visible (tipWidget) || gtk_widget_get_realized (tipWidget)) {", "-\t\t\t\tint [] x = new int [1], y = new int [1];", "-\t\t\t\tlong /*int*/ window = OS.gdk_window_at_pointer (x, y);", "-\t\t\t\tif (window != 0) {", "-\t\t\t\t\tlong /*int*/ [] user_data = new long /*int*/ [1];", "-\t\t\t\t\tOS.gdk_window_get_user_data (window, user_data);", "-\t\t\t\t\tif (tipWidget == user_data [0]) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Feature in GTK.  Calling gtk_tooltips_set_tip() positions and", "-\t\t\t\t\t\t* shows the tooltip.  If the tooltip is already visible, moving", "-\t\t\t\t\t\t* it to a new location in the size_allocate signal causes flashing.", "-\t\t\t\t\t\t* The fix is to hide the tip window in the size_request signal", "-\t\t\t\t\t\t* and before the new tooltip is forced to be active.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tset = false;", "-\t\t\t\t\t\tint handler_id = OS.g_signal_connect (tipWindow, OS.size_request, display.sizeRequestProc, shellHandle);", "-\t\t\t\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, tipWidget, buffer, null);", "-\t\t\t\t\t\tOS.gtk_widget_hide (tipWindow);", "-\t\t\t\t\t\tlong /*int*/ data = OS.gtk_tooltips_data_get (tipWidget);", "-\t\t\t\t\t\tOS.GTK_TOOLTIPS_SET_ACTIVE (tooltipsHandle, data);", "-\t\t\t\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, tipWidget, buffer, null);", "-\t\t\t\t\t\tif (handler_id != 0) OS.g_signal_handler_disconnect (tipWindow, handler_id);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (set) OS.gtk_tooltips_set_tip (tooltipsHandle, tipWidget, buffer, null);", "+\tbyte [] buffer = null;", "+\tif (string != null && string.length () > 0) {", "+\t\tchar [] chars = fixMnemonic (string, false);", "+\t\tbuffer = Converter.wcsToMbcs (null, chars, true);", "+\tlong /*int*/ oldTooltip = OS.gtk_widget_get_tooltip_text (rootWidget);", "+\tboolean same = false;", "+\tif (buffer == null && oldTooltip == 0) {", "+\t\tsame = true;", "+\t} else if (buffer != null && oldTooltip != 0) {", "+\t\tsame = OS.strcmp (oldTooltip, buffer) == 0;", "+\t}", "+\tif (oldTooltip != 0) OS.g_free(oldTooltip);", "+\tif (same) return;", "+\tOS.gtk_widget_set_tooltip_text (rootWidget, buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dd987e589791969f08e7eb9eaa11c97", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "5a7c149aeb8d18a02cc47db0e52d6bca3505a8b8", "commitAfterChange": "285048d733ba2ac7ac939aae339235bf286f43d0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  int[] createImage (int type)", "signatureAfterChange": "  int[] createImage (int type)", "diff": ["+\tint[] image =  createImageFromFamily(family [0]);", "+\tOS.DisposeHandle (family [0]);", "+\treturn image;", "+}", "-\tresult = OS.GetIconFamilyData (family [0], OS.kLarge32BitData, dataHandle);", "-\t\tOS.DisposeHandle (family [0]);", "-\tresult = OS.GetIconFamilyData (family [0], OS.kLarge8BitMask, maskHandle);", "-\t\tOS.DisposeHandle (family [0]);", "-\t\tOS.DisposeHandle (family [0]);", "-\tOS.DisposeHandle (family [0]);"]}], "num": 54356}
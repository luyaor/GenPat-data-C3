{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d62920d3059954ed2d41263e73e349e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4de152181c9a577e048bb0b04679c5a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "5d484c6476bc4892c9825b0c805179fe47e751d4", "commitAfterChange": "2efd019c0428e46dfacf8317bc1b4ae9f271e166", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 20, "signatureBeforeChange": " void drawSelectionBackground(GC gc, int[] shape)", "signatureAfterChange": " void drawSelectionBackground(GC gc, int[] shape)", "diff": ["-\tif (backgroundImage != null) {", "-\t\tPoint size = getSize();", "-\t\t// draw the background image in shape", "-\t\tRegion clipping = new Region();", "-\t\tgc.getClipping(clipping);", "-\t\tRegion region = new Region();", "-\t\tregion.add(shape);", "-\t\tgc.setClipping(region);", "-\t\tgc.setBackground(selectionBackground);", "-\t\tgc.fillRectangle(0, 0, size.x, size.y);", "-\t\t// tile image to fill space", "-\t\tRectangle imageRect = backgroundImage.getBounds();", "-\t\tint xPos = 0;", "-\t\twhile (xPos < size.x) {", "-\t\t\tint yPos = 0;", "-\t\t\twhile (yPos < size.y) {", "-\t\t\t\tgc.drawImage(backgroundImage, xPos, yPos);", "-\t\t\t\tyPos += imageRect.height;", "-\t\t\t}", "-\t\t\txPos += imageRect.width;", "-\t\t}", "-\t\tgc.setClipping(clipping);", "-\t\tclipping.dispose();", "-\t\tregion.dispose();", "-\t} else if (gradientColors != null) {", "-\t\tPoint size = getSize();", "-\t\t// draw a gradient in shape", "-\t\tRegion clipping = new Region();", "-\t\tgc.getClipping(clipping);", "-\t\tRegion region = new Region();", "-\t\tregion.add(shape);", "-\t\tgc.setClipping(region);", "+\tPoint size = getSize();", "+\tint height = tabHeight + HIGHLIGHT_HEADER; ", "+\tint y = onBottom ? size.y - borderBottom - height : borderTop;", "+\tint x = 0;", "+\tint width = size.x;", "+\tif (borderLeft > 0) {", "+\t\tx += 1; width -= 2;", "+\t}", "+\t", "+\tRegion clipping = new Region();", "+\tgc.getClipping(clipping);", "+\tRegion region = new Region();", "+\tregion.add(shape);", "+\tgc.setClipping(region);", "+\tif (backgroundImage != null) {", "+\t\t// draw the background image in shape", "+\t\tgc.setBackground(selectionBackground);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t\tRectangle imageRect = backgroundImage.getBounds();", "+\t\tif (tiled) {", "+\t\t\t// tile image to fill space", "+\t\t\tint xPos = x;", "+\t\t\twhile (xPos < x+width) {", "+\t\t\t\tint yPos = y;", "+\t\t\t\twhile (yPos < y+height) {", "+\t\t\t\t\tgc.drawImage(backgroundImage, xPos, yPos);", "+\t\t\t\t\tyPos += imageRect.height;", "+\t\t\t\t}", "+\t\t\t\txPos += imageRect.width;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tgc.drawImage(backgroundImage, imageRect.x, imageRect.y, imageRect.width, imageRect.height, x, y, width, height);", "+\t\t", "+\t\t}", "+\t} else if (gradientColors != null) {", "+\t\t// draw gradient", "-\t\t\tgc.fillRectangle(0, 0, size.x, size.y);", "+\t\t\tgc.fillRectangle(x, y, width, height);", "-\t\t\tColor background = selectionBackground;", "-\t\t\tColor lastColor = gradientColors[0];", "-\t\t\tif (lastColor == null) lastColor = background;", "-\t\t\tint pos = 0;", "-\t\t\tfor (int i = 0; i < gradientPercents.length; ++i) {", "-\t\t\t\tgc.setForeground(lastColor);", "-\t\t\t\tlastColor = gradientColors[i + 1];", "-\t\t\t\tif (lastColor == null) lastColor = background;", "-\t\t\t\tgc.setBackground(lastColor);", "-\t\t\t\tif (gradientVertical) {", "-\t\t\t\t\tint gradientHeight = (gradientPercents[i] * size.y / 100) - pos;", "-\t\t\t\t\tgc.fillGradientRectangle(0, pos, size.x, gradientHeight, true);", "-\t\t\t\t\tpos += gradientHeight;", "+\t\t\tif (gradientVertical) {", "+\t\t\t\tif (onBottom) {", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tif (gradientPercents[gradientPercents.length - 1] < 100) {", "+\t\t\t\t\t\tpos = gradientPercents[gradientPercents.length - 1] * height / 100;", "+\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, y, width, pos);", "+\t\t\t\t\t}", "+\t\t\t\t\tColor lastColor = gradientColors[gradientColors.length-1];", "+\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\t\tfor (int i = gradientPercents.length-1; i >= 0; i--) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = gradientColors[i];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = gradientPercents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "-\t\t\t\t\tint gradientWidth = (gradientPercents[i] * size.x / 100) - pos;", "-\t\t\t\t\tgc.fillGradientRectangle(pos, 0, gradientWidth, size.y, false);", "+\t\t\t\t\tColor lastColor = gradientColors[0];", "+\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tfor (int i = 0; i < gradientPercents.length; i++) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = gradientColors[i + 1];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = gradientPercents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pos < height) {", "+\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, pos, width, height-pos);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else { //horizontal gradient", "+\t\t\t\tColor lastColor = gradientColors[0];", "+\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\tint pos = 0;", "+\t\t\t\tfor (int i = 0; i < gradientPercents.length; ++i) {", "+\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\tlastColor = gradientColors[i + 1];", "+\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\tint gradientWidth = (gradientPercents[i] * width / 100) - pos;", "+\t\t\t\t\tgc.fillGradientRectangle(x+pos, y, gradientWidth, height, false);", "-\t\t\t}", "-\t\t\tif (gradientVertical && pos < size.y) {", "-\t\t\t\tgc.setBackground(getBackground());", "-\t\t\t\tgc.fillRectangle(0, pos, size.x, size.y - pos);", "-\t\t\t}", "-\t\t\tif (!gradientVertical && pos < size.x) {", "-\t\t\t\tgc.setBackground(getBackground());", "-\t\t\t\tgc.fillRectangle(pos, 0, size.x - pos, size.y);", "+\t\t\t\tif (pos < width) {", "+\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\tgc.fillRectangle(x+pos, y, width-pos, height);", "+\t\t\t\t}", "-\t\tgc.setClipping(clipping);", "-\t\tclipping.dispose();", "-\t\tregion.dispose();", "-\t\tgc.fillPolygon(shape);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\tgc.setClipping(clipping);", "+\tclipping.dispose();", "+\tregion.dispose();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5dc1201b00cd12d480ca57ef1f41afb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 33, "signatureBeforeChange": " void setBounds (int x, int y, int width, int height)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height)", "diff": ["- */", "+", "-", "-\tif (control != null)", "-\t\tcontrol.setBounds(x, y, width, height);", "-\t", "-\twidth = Math.max(width, 0);", "-\theight = Math.max(height, 0);", "-\t", "-\tif (MacUtil.USE_FRAME) {", "-\t\tfloat[] f= new float[4];", "-\t\tOS.HIViewGetFrame(handle, f);", "-\t\tif (f[0] != x || f[1] != y || f[2] != width || f[3] != height)", "-\t\t\tOS.HIViewSetFrame(handle, x, y, width, height);", "-\t} else {", "-\t\tshort[] bounds= new short[4];", "-\t\tshort[] pbounds= new short[4];", "-\t\tOS.GetControlBounds(handle, bounds);", "-\t\tOS.GetControlBounds(parent.handle, pbounds);", "-\t\t\t", "-\t\tboolean sameOrigin = (bounds[1]-pbounds[1]) == x && (bounds[0]-pbounds[0]) == y;", "-\t\tboolean sameExtent = (bounds[3]-bounds[1]) == width && (bounds[2]-bounds[0]) == height;", "-\t\tif (!sameOrigin || !sameExtent)", "-\t\t\tOS.SetControlBounds(handle, new MacRect(pbounds[1]+x, pbounds[0]+y, width, height).getData());", "+\tif (control != null) control.setBounds (x, y, width, height);", "+\tsetBounds (handle, x, y, width, height, true, true, false);", "+\tif ((style & SWT.SEPARATOR) != 0) return;", "+\tint space = 0;", "+\tint inset = 3;", "+\tint stringWidth = 0, stringHeight = 0;", "+\tif (text.length () != 0) {", "+\t\tGC gc = new GC (parent);", "+\t\tPoint size = gc.stringExtent (text);", "+\t\tstringWidth = size.x;", "+\t\tstringHeight = size.y;", "+\t\tgc.dispose ();", "-", "-\tif (parent.fGotSize)", "-\t\tOS.HIViewSetVisible(handle, true);", "+\tint imageWidth = 0, imageHeight = 0;", "+\tif (image != null) {", "+\t\tif (text.length () != 0) space = 2;", "+\t\tRectangle rect = image.getBounds ();", "+\t\timageWidth = rect.width;", "+\t\timageHeight = rect.height;", "+\t}", "+\tint arrowWidth = 0, arrowHeight = 0;", "+\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\tarrowWidth = 6;", "+\t\tarrowHeight = 4; //NOT DONE", "+\t}", "+\tif ((parent.style & SWT.RIGHT) != 0) {", "+\t\tint imageX = inset;", "+\t\tint imageY = inset + (height - (inset * 2) - imageHeight) / 2;", "+\t\tsetBounds (iconHandle, imageX, imageY, imageWidth, imageHeight, true, true, false);", "+\t\tint labelX = imageX + imageWidth + space;", "+\t\tint labelY = inset + (height - (inset * 2) - stringHeight) / 2;", "+\t\tsetBounds (labelHandle, labelX, labelY, stringWidth, stringHeight, true, true, false);", "+\t} else {", "+\t\tint imageX = inset + (width - (inset * 2) - (arrowWidth + 3) - imageWidth) / 2;", "+\t\tint imageY = inset;", "+\t\tsetBounds (iconHandle, imageX, imageY, imageWidth, imageHeight, true, true, false);", "+\t\tint labelX = inset + (width - (inset * 2) - (arrowWidth + 3) - stringWidth) / 2;", "+\t\tint labelY = imageY + imageHeight + space;", "+\t\tsetBounds (labelHandle, labelX, labelY, stringWidth, stringHeight, true, true, false);", "+\t}", "+\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\tint arrowX = width - inset - arrowWidth;", "+\t\tint arrowY = inset + (height - (inset * 2) - arrowHeight) / 2;", "+\t\tsetBounds (arrowHandle, arrowX, arrowY, arrowWidth, arrowHeight, true, true, false);", "+\t}"]}], "num": 34205}
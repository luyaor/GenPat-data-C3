{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a03382132b23b809c273ee6f6a06d77", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b41ba9819e15efc3909f38bb43bc41", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "signatureAfterChange": "  void generateFunctionCall(JNIMethod method, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean needsReturn)", "diff": ["-void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn) {", "+void generateFunctionCall(JNIMethod method, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean needsReturn) {", "-\tString copy = (String)methodData.getParam(\"copy\");", "-\tboolean makeCopy = copy.length() != 0 && isCPP && returnType != Void.TYPE;", "+\tString copy = (String)method.getParam(\"copy\");", "+\tboolean makeCopy = copy.length() != 0 && isCPP && !returnType.isType(\"void\");", "-\t\tgenerateFunctionCallLeftSide(method, methodData, returnType, needsReturn);", "+\t\tgenerateFunctionCallLeftSide(method, returnType, returnType64, needsReturn);", "-\t\tParameterData paramData = getMetaData().getMetaData(method, 0);", "-\t\tString cast = paramData.getCast(); ", "+\t\tString cast = params[0].getCast(); ", "-\t\t\toutput(getTypeSignature2(returnType));", "+\t\t\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "-\t\toutput(getTypeSignature2(returnType));", "+\t\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "-\t\tfor (int i = 1; i < paramTypes.length; i++) {", "+\t\tfor (int i = 1; i < params.length; i++) {", "-\t\t\tClass paramType = paramTypes[i];", "-\t\t\toutput(getTypeSignature4(paramType));", "+\t\t\tJNIParameter param = params[i];", "+\t\t\tJNIType paramType = param.getType(), paramType64 = param.getType64();", "+\t\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), false));", "-\t\toutput(getTypeSignature4(paramTypes[1]));", "+\t\tJNIType paramType = params[1].getType(), paramType64 = params[1].getType64();", "+\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), false));", "-\t} else if (methodData.getFlag(FLAG_CPP) || methodData.getFlag(FLAG_SETTER) || methodData.getFlag(FLAG_GETTER) || methodData.getFlag(FLAG_ADDER)) {", "-\t\tif (methodData.getFlag(FLAG_GCOBJECT)) {", "+\t} else if (method.getFlag(FLAG_CPP) || method.getFlag(FLAG_SETTER) || method.getFlag(FLAG_GETTER) || method.getFlag(FLAG_ADDER)) {", "+\t\tif (method.getFlag(FLAG_GCOBJECT)) {", "-\t\tParameterData paramData = getMetaData().getMetaData(method, 0);", "-\t\tif (paramData.getFlag(FLAG_STRUCT)) output(\"*\");", "-\t\tString cast = paramData.getCast(); ", "+\t\tJNIParameter param = params[0];", "+\t\tif (param.getFlag(FLAG_STRUCT)) output(\"*\");", "+\t\tString cast = param.getCast(); ", "-\t\tif (paramData.getFlag(FLAG_GCOBJECT)) {", "+\t\tif (param.getFlag(FLAG_GCOBJECT)) {", "-\t\tif (paramData.getFlag(FLAG_GCOBJECT)) {", "+\t\tif (param.getFlag(FLAG_GCOBJECT)) {", "-\t\tString accessor = methodData.getAccessor();", "+\t\tString accessor = method.getAccessor();", "-\t} else if (methodData.getFlag(FLAG_GCNEW)) {", "+\t} else if (method.getFlag(FLAG_GCNEW)) {", "-\t\tString accessor = methodData.getAccessor();", "+\t\tString accessor = method.getAccessor();", "-\t} else if (methodData.getFlag(FLAG_NEW)) {", "+\t} else if (method.getFlag(FLAG_NEW)) {", "-\t\tString accessor = methodData.getAccessor();", "+\t\tString accessor = method.getAccessor();", "-\t} else if (methodData.getFlag(FLAG_DELETE)) {", "+\t} else if (method.getFlag(FLAG_DELETE)) {", "-\t\tParameterData paramData = getMetaData().getMetaData(method, 0);", "-\t\tString cast = paramData.getCast(); ", "+\t\tJNIParameter param = params[0];", "+\t\tString cast = param.getCast(); ", "-\t\tif (methodData.getFlag(FLAG_GCOBJECT)) {", "+\t\tif (method.getFlag(FLAG_GCOBJECT)) {", "-\t\tif (methodData.getFlag(Flags.FLAG_CAST)) {", "+\t\tif (method.getFlag(Flags.FLAG_CAST)) {", "-\t\t\toutput(getTypeSignature2(returnType));", "+\t\t\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "-\t\t\tfor (int i = 0; i < paramTypes.length; i++) {", "+\t\t\tfor (int i = 0; i < params.length; i++) {", "-\t\t\t\tClass paramType = paramTypes[i];", "-\t\t\t\tParameterData paramData = getMetaData().getMetaData(method, i);", "-\t\t\t\tString cast = paramData.getCast();", "+\t\t\t\tJNIParameter param = params[i];", "+\t\t\t\tString cast = param.getCast();", "-\t\t\t\t\toutput(getTypeSignature4(paramType, paramData.getFlag(FLAG_STRUCT)));", "+\t\t\t\t\tJNIType paramType = param.getType(), paramType64 = param.getType64();", "+\t\t\t\t\tif (!(paramType.isPrimitive() || paramType.isArray())) {", "+\t\t\t\t\t\tif (param.getTypeClass().getFlag(FLAG_STRUCT)) {", "+\t\t\t\t\t\t\toutput(\"struct \");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), param.getFlag(FLAG_STRUCT)));", "-\t\tString accessor = methodData.getAccessor();", "+\t\tString accessor = method.getAccessor();", "-\t\tif (methodData.getFlag(Flags.FLAG_CAST)) {", "+\t\tif (method.getFlag(Flags.FLAG_CAST)) {", "-\tif ((methodData.getFlag(FLAG_SETTER) && paramTypes.length == 3) || (methodData.getFlag(FLAG_GETTER) && paramTypes.length == 2)) {", "+\tif ((method.getFlag(FLAG_SETTER) && params.length == 3) || (method.getFlag(FLAG_GETTER) && params.length == 2)) {", "-\tif (methodData.getFlag(FLAG_SETTER)) output(\" = \");", "-\tif (methodData.getFlag(FLAG_ADDER)) output(\" += \");", "-\tif (!methodData.getFlag(FLAG_GETTER)) {", "-\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, paramStart);", "+\tif (method.getFlag(FLAG_SETTER)) output(\" = \");", "+\tif (method.getFlag(FLAG_ADDER)) output(\" += \");", "+\tif (!method.getFlag(FLAG_GETTER)) {", "+\t\tgenerateFunctionCallRightSide(method, params, paramStart);", "-\tif (methodData.getFlag(FLAG_GCNEW) || methodData.getFlag(FLAG_GCOBJECT)) {", "+\tif (method.getFlag(FLAG_GCNEW) || method.getFlag(FLAG_GCOBJECT)) {", "-\t\toutput(getTypeSignature2(returnType));", "+\t\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "-\t\toutput(getTypeSignature4(paramTypes[0], true));", "+\t\tJNIType paramType = params[0].getType(), paramType64 = params[0].getType64();", "+\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), true));", "-\t\tfor (int i = 1; i < paramTypes.length; i++) {", "+\t\tfor (int i = 1; i < params.length; i++) {", "-\t\t\tClass paramType = paramTypes[i];", "-\t\t\tParameterData paramData = getMetaData().getMetaData(method, i);", "-\t\t\tString cast = paramData.getCast();", "+\t\t\tJNIParameter param = params[i];", "+\t\t\tString cast = param.getCast();", "-\t\t\t\toutput(getTypeSignature4(paramType, paramData.getFlag(FLAG_STRUCT)));", "+\t\t\t\tparamType = param.getType(); paramType64 = param.getType64();", "+\t\t\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), param.getFlag(FLAG_STRUCT)));", "-\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, 1);", "+\t\tgenerateFunctionCallRightSide(method, params, 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ca8fe4511e36d35100229f22b1c3e34", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void generateDynamicFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "signatureAfterChange": "  void generateDynamicFunctionCall(JNIMethod method, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean needsReturn)", "diff": ["-void generateDynamicFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn) {", "+void generateDynamicFunctionCall(JNIMethod method, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean needsReturn) {", "-\tgenerateFunctionCall(method, methodData, paramTypes, returnType, needsReturn);", "+\tgenerateFunctionCall(method, params, returnType, returnType64, needsReturn);", "-\tif (getPlatform().equals(\"win32\")) {", "-\t\toutputln(\"\\t\\tstatic int initialized = 0;\");", "-\t\toutputln(\"\\t\\tstatic HMODULE hm = NULL;\");", "-\t\toutputln(\"\\t\\tstatic FARPROC fp = NULL;\");", "-\t\tif (returnType != Void.TYPE) {", "-\t\t\tif (needsReturn) {", "-\t\t\t\toutputln(\"\\t\\trc = 0;\");", "-\t\t\t}", "+\toutput(\"\\t\\tLOAD_FUNCTION(fp, \");", "+\toutput(name);", "+\toutputln(\")\");", "+\toutputln(\"\\t\\tif (fp) {\");", "+\toutput(\"\\t\\t\");", "+\tgenerateFunctionCallLeftSide(method, returnType, returnType64, needsReturn);", "+\toutput(\"((\");", "+\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "+\toutput(\" (CALLING_CONVENTION*)(\");", "+\tfor (int i = 0; i < params.length; i++) {", "+\t\tif (i != 0) output(\", \");", "+\t\tJNIParameter param = params[i];", "+\t\tString cast = param.getCast();", "+\t\tif (cast.length() > 2) {", "+\t\t\toutput(cast.substring(1, cast.length() - 1));", "+\t\t} else {", "+\t\t\tJNIType paramType = param.getType(), paramType64 = param.getType64();", "+\t\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), param.getFlag(FLAG_STRUCT)));", "-\t\toutputln(\"\\t\\tif (!initialized) {\");", "-\t\toutput(\"\\t\\t\\tif (!hm) hm = LoadLibrary(\");", "-\t\toutput(name);", "-\t\toutputln(\"_LIB);\");", "-\t\toutput(\"\\t\\t\\tif (hm) fp = GetProcAddress(hm, \\\"\");", "-\t\toutput(name);", "-\t\toutputln(\"\\\");\");", "-\t\toutputln(\"\\t\\t\\tinitialized = 1;\");", "-\t\toutputln(\"\\t\\t}\");", "-\t\toutputln(\"\\t\\tif (fp) {\");", "-\t\toutput(\"\\t\\t\");", "-\t\tgenerateFunctionCallLeftSide(method, methodData, returnType, needsReturn);", "-\t\toutput(\"fp\");", "-\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, 0);", "-\t\toutput(\";\");", "-\t\toutputln();", "-\t\toutputln(\"\\t\\t}\");", "-\t} else if (getPlatform().equals(\"carbon\") || getPlatform().equals(\"cocoa\")) {", "-\t\toutputln(\"\\t\\tstatic int initialized = 0;\");", "-\t\toutputln(\"\\t\\tstatic CFBundleRef bundle = NULL;\");", "-\t\toutput(\"\\t\\ttypedef \");", "-\t\toutput(getTypeSignature2(returnType));", "-\t\toutput(\" (*FPTR)(\");", "-\t\tfor (int i = 0; i < paramTypes.length; i++) {", "-\t\t\tif (i != 0) output(\", \");", "-\t\t\tClass paramType = paramTypes[i];", "-\t\t\tParameterData paramData = getMetaData().getMetaData(method, i);", "-\t\t\tString cast = paramData.getCast();", "-\t\t\tif (cast.length() > 2) {", "-\t\t\t\toutput(cast.substring(1, cast.length() - 1));", "-\t\t\t} else {", "-\t\t\t\toutput(getTypeSignature4(paramType, paramData.getFlag(FLAG_STRUCT)));", "-\t\t\t}", "-\t\t}", "-\t\toutputln(\");\");", "-\t\toutputln(\"\\t\\tstatic FPTR fptr;\");", "-\t\tif (returnType != Void.TYPE) {", "-\t\t\tif (needsReturn) {", "-\t\t\t\toutputln(\"\\t\\trc = 0;\");", "-\t\t\t}", "-\t\t}", "-\t\toutputln(\"\\t\\tif (!initialized) {\");", "-\t\toutput(\"\\t\\t\\tif (!bundle) bundle = CFBundleGetBundleWithIdentifier(CFSTR(\");", "-\t\toutput(name);", "-\t\toutputln(\"_LIB));\");", "-\t\toutput(\"\\t\\t\\tif (bundle) fptr = (FPTR)CFBundleGetFunctionPointerForName(bundle, CFSTR(\\\"\");", "-\t\toutput(name);", "-\t\toutputln(\"\\\"));\");", "-\t\toutputln(\"\\t\\t\\tinitialized = 1;\");", "-\t\toutputln(\"\\t\\t}\");", "-\t\toutputln(\"\\t\\tif (fptr) {\");", "-\t\toutput(\"\\t\\t\");", "-\t\tgenerateFunctionCallLeftSide(method, methodData, returnType, needsReturn);", "-\t\toutput(\"(*fptr)\");", "-\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, 0);", "-\t\toutput(\";\");", "-\t\toutputln();", "-\t\toutputln(\"\\t\\t}\");", "-\t} else {", "-\t\toutputln(\"\\t\\tstatic int initialized = 0;\");", "-\t\toutputln(\"\\t\\tstatic void *handle = NULL;\");", "-\t\toutput(\"\\t\\ttypedef \");", "-\t\toutput(getTypeSignature2(returnType));", "-\t\toutput(\" (*FPTR)(\");", "-\t\tfor (int i = 0; i < paramTypes.length; i++) {", "-\t\t\tif (i != 0) output(\", \");", "-\t\t\tClass paramType = paramTypes[i];", "-\t\t\tParameterData paramData = getMetaData().getMetaData(method, i);", "-\t\t\tString cast = paramData.getCast();", "-\t\t\tif (cast.length() > 2) {", "-\t\t\t\toutput(cast.substring(1, cast.length() - 1));", "-\t\t\t} else {", "-\t\t\t\toutput(getTypeSignature4(paramType, paramData.getFlag(FLAG_STRUCT)));", "-\t\t\t}", "-\t\t}", "-\t\toutputln(\");\");", "-\t\toutputln(\"\\t\\tstatic FPTR fptr;\");", "-\t\tif (returnType != Void.TYPE) {", "-\t\t\tif (needsReturn) {", "-\t\t\t\toutputln(\"\\t\\trc = 0;\");", "-\t\t\t}", "-\t\t}", "-\t\toutputln(\"\\t\\tif (!initialized) {\");", "-\t\toutput(\"\\t\\t\\tif (!handle) handle = dlopen(\");", "-\t\toutput(name);", "-\t\toutputln(\"_LIB, RTLD_LAZY);\");", "-\t\toutput(\"\\t\\t\\tif (handle) fptr = (FPTR)dlsym(handle, \\\"\");", "-\t\toutput(name);", "-\t\toutputln(\"\\\");\");", "-\t\toutputln(\"\\t\\t\\tinitialized = 1;\");", "-\t\toutputln(\"\\t\\t}\");", "-\t\toutputln(\"\\t\\tif (fptr) {\");", "-\t\toutput(\"\\t\\t\");", "-\t\tgenerateFunctionCallLeftSide(method, methodData, returnType, needsReturn);", "-\t\toutput(\"(*fptr)\");", "-\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, 0);", "-\t\toutput(\";\");", "-\t\toutputln();", "-\t\toutputln(\"\\t\\t}\");", "-", "+\toutput(\"))\");", "+\toutput(\"fp\");", "+\toutput(\")\");", "+\tgenerateFunctionCallRightSide(method, params, 0);", "+\toutput(\";\");", "+\toutputln();", "+\toutputln(\"\\t\\t}\");"]}], "num": 5728}
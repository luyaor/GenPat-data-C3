{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3de5230450fa0575aba7e74073424c7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5b63f2e7988bca583193af91e0f5f66", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "305b37f15f650c259a3bc4f70ff9d8984c10b80a", "commitAfterChange": "431655d547fbf99d9504878177592160d84a87e6", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "  void windowSendEvent (int id, int sel, int event)", "signatureAfterChange": "  void windowSendEvent (int id, int sel, int event)", "diff": ["-\t\t\t * Feature in cocoa.  Control+Tab and Ctrl+Shift+Tab are swallowed to handle native traversal.", "-\t\t\t * If we find that, force the key event to the first responder.", "+\t\t\t * Feature in cocoa.  Control+Tab, Ctrl+Shift+Tab, Ctrl+PageDown and Ctrl+PageUp are", "+\t\t\t * swallowed to handle native traversal. If we find that, force the key event to", "+\t\t\t * the first responder.", "-\t\t\t\t\tint /*long*/ firstChar = chars.characterAtIndex(0);", "+\t\t\t\t\tint firstChar = (int)/*64*/chars.characterAtIndex(0);", "-\t\t\t\t\tif (firstChar == '\\t' || firstChar == 25)\t{", "-\t\t\t\t\t\twindow.firstResponder().keyDown(nsEvent);", "+\t\t\t\t\tswitch (firstChar) {", "+\t\t\t\t\t\tcase '\\t':", "+\t\t\t\t\t\tcase 25:", "+\t\t\t\t\t\t\twindow.firstResponder().keyDown(nsEvent);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase OS.NSPageDownFunctionKey:", "+\t\t\t\t\t\tcase OS.NSPageUpFunctionKey:", "+\t\t\t\t\t\t\twindow.firstResponder().keyDown(nsEvent);", "+\t\t\t\t\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1072448735b2fa441b27133ebe2d2d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "1ab8b52d204c71b8f9a4cdb98b6708980e3406e9", "commitAfterChange": "a5b801befd0b1a4e6ad7f46b7d933142b5be9c70", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "  void windowSendEvent (int id, int sel, int event)", "signatureAfterChange": "  void windowSendEvent (int id, int sel, int event)", "diff": ["+\t\t\t", "+\t\tcase OS.NSKeyDown:", "+\t\t\t/**", "+\t\t\t * Feature in cocoa.  Control+Tab and Ctrl+Shift+Tab are swallowed to handle native traversal.", "+\t\t\t * If we find that, force the key event to the first responder.", "+\t\t\t */", "+\t\t\tif ((nsEvent.modifierFlags() & OS.NSControlKeyMask) != 0) {", "+\t\t\t\tNSString chars = nsEvent.characters();", "+\t\t\t\t", "+\t\t\t\tif (chars != null && chars.length() == 1) {", "+\t\t\t\t\tint /*long*/ firstChar = chars.characterAtIndex(0);", "+", "+\t\t\t\t\t// Shift-tab appears as control-Y.", "+\t\t\t\t\tif (firstChar == '\\t' || firstChar == 25)\t{", "+\t\t\t\t\t\twindow.firstResponder().keyDown(nsEvent);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;"]}], "num": 35537}
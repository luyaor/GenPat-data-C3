{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5070b3e76b531457d67f9158143e87db", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e51eade44b058f19e58e9be57ed7e18", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "4dbd43ed751e696d63968dcc6b542d9240c6eaa6", "commitAfterChange": "dbb4cb6bf8780b7378ba48097fc7c37f103b73a8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  ImageData kde_getImageData()", "signatureAfterChange": "  ImageData kde_getImageData()", "diff": ["+\tif (iconPath.endsWith(\"xpm\")) {", "+\t\tint /*long*/ xDisplay = OS.GDK_DISPLAY();", "+\t\tint /*long*/ rootWindow = OS.XDefaultRootWindow(xDisplay);\t\t", "+\t\t/* Use the character encoding for the default locale */", "+\t\tbyte[] iconName = Converter.wcsToMbcs(null, iconPath, true);", "+\t\tint /*long*/ [] pixmap = new int /*long*/ [1];", "+\t\tint /*long*/ [] mask = new int /*long*/ [1];", "+\t\tKDE.XpmReadFileToPixmap(xDisplay, rootWindow, iconName, pixmap, mask, 0);", "+\t\tif (pixmap[0] == 0 || pixmap[0] == KDE.XmUNSPECIFIED_PIXMAP) {", "+\t\t\treturn null;", "+\t\t}", "+\t\tint /*long*/ gdkPixmap = OS.gdk_pixmap_foreign_new(pixmap[0]);", "+\t\tint /*long*/ gdkMask = mask[0] != 0 ? OS.gdk_pixmap_foreign_new(mask[0]) : 0;", "+\t\tImage image = Image.gtk_new(display, gdkMask != 0 ? SWT.ICON : SWT.BITMAP, gdkPixmap, gdkMask);", "+\t\tImageData imageData = image.getImageData();", "+\t\tif (gdkPixmap != 0) OS.g_object_unref(gdkPixmap);", "+\t\tif (gdkMask != 0) OS.g_object_unref(gdkMask);", "+\t\tif (pixmap[0] == 0) KDE.XFreePixmap(xDisplay, pixmap[0]);", "+\t\tif (mask[0] == 0) KDE.XFreePixmap(xDisplay, mask[0]);", "+\t\treturn imageData;\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ae7f285fb8aad6bf60ffaedfa8447d0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static int getDesktop(Display display)", "signatureAfterChange": " static int getDesktop(Display display)", "diff": ["+", "+\t/* Get the list of properties on the root window. */", "+\tint xDisplay = display.xDisplay;", "+\tint rootWindow = OS.XDefaultRootWindow(xDisplay);", "+\tint[] numProp = new int[1];", "+\tint propList = OS.XListProperties(xDisplay, rootWindow, numProp);", "+\tint[] property = new int[numProp[0]];", "+\tif (propList != 0) {", "+\t\tOS.memmove(property, propList, (property.length * 4));", "+\t\tOS.XFree(propList);", "+\t}", "+\t", "+\t/* KDE is detected by checking if the the KWIN_RUNNING exists */", "+\tif (desktop == DESKTOP_UNKNOWN) {", "+\t\tbyte[] kdeName = Converter.wcsToMbcs(null, \"KWIN_RUNNING\", true);", "+\t\tint kde = OS.XInternAtom(xDisplay, kdeName, true);", "+\t\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "+\t\t\tif (property[index] == OS.None) continue;", "+\t\t\tif (property[index] == kde && kde_init()) desktop = DESKTOP_KDE;", "+\t\t}", "+\t}", "+\t", "+\tif (desktop == DESKTOP_UNKNOWN) {", "+\t\tbyte[] gnomeName = Converter.wcsToMbcs(null, \"_NET_SUPPORTING_WM_CHECK\", true);", "+\t\tint gnome = OS.XInternAtom(xDisplay, gnomeName, true);", "+\t\tif (gnome != OS.None && gnome_init()) {", "+\t\t\tdesktop = DESKTOP_GNOME;", "+\t\t}", "+\t}", "-\tif (isWindowManagerCompliant() && gnome_init()) desktop = DESKTOP_GNOME;", "+\tSystem.out.println(\"desktop=\" + desktop);", "+}"]}], "num": 25700}
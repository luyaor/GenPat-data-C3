{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d07cdcbfb0e5de4af2896e81a4f15d4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f59b25d689a1f506245709154670c5cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "7a19d8d2a4b85311f6fd0b38a7237f01fa3e2f10", "commitAfterChange": "1dd8f9719ec660fe2d5d5b8d417ae8124810b3db", "methodNumberBeforeChange": 168, "methodNumberAfterChange": 168, "signatureBeforeChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "signatureAfterChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "diff": ["-\t", "-\t// Use NSWindowList instead of [NSApplication orderedWindows] because orderedWindows", "-\t// skips NSPanels. See bug 321614.", "-\tint /*long*/ outCount[] = new int /*long*/ [1];", "-\tOS.NSCountWindows(outCount);", "-\tint /*long*/ windowIDs[] = new int /*long*/ [(int)outCount[0]];", "-\tOS.NSWindowList(outCount[0], windowIDs);", "+\tint /*long*/ hitWindowNumber = 0;", "+\tif (OS.VERSION >= 0x1060) {", "+\t\thitWindowNumber = NSWindow.windowNumberAtPoint(screenLocation, 0);", "+\t} else {", "+\t\tCGPoint cgLocation = new CGPoint();", "+\t\tcgLocation.x = screenLocation.x;", "+\t\tcgLocation.y = getPrimaryFrame().height - screenLocation.y;", "+\t\tint /*long*/ cgLocationPtr = OS.malloc(OS.CGPoint_sizeof());", "+\t\tOS.memmove(cgLocationPtr, cgLocation, OS.CGPoint_sizeof());", "+\t\tint /*long*/ outWindow[] = new int /*long*/ [1];", "+\t\tint /*long*/ err = OS.HIWindowFindAtLocation (cgLocationPtr, 2, -1, 0, outWindow, null, 0);", "-\tfor (int i = 0, count = windowIDs.length; i < count && view == null; i++) {", "-\t\tNSWindow window = application.windowWithWindowNumber(windowIDs[i]);", "-\t\t// NSWindowList returns all window numbers for all processes. If the window ", "-\t\t// number passed to windowWithWindowNumber returns nil the window doesn't belong to", "-\t\t// this process.", "-\t\tif (window != null) {", "-\t\t\tNSView contentView = window.contentView();", "-\t\t\tif (contentView != null) contentView = contentView.superview();", "-\t\t\tif (contentView != null && OS.NSPointInRect(screenLocation, window.frame())) {", "-\t\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "-\t\t\t\tview = contentView.hitTest (location);", "-\t\t\t\tif (view == null && !checkTrim) {", "-\t\t\t\t\tview = contentView;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\tif (err == OS.noErr) {", "+\t\t\thitWindowNumber = OS.HIWindowGetCGWindowID(outWindow[0]);", "+\t\t}", "+\t}", "+\t", "+\tNSWindow window = application.windowWithWindowNumber(hitWindowNumber);", "+\tif (window != null) {", "+\t\tNSView contentView = window.contentView();", "+\t\tif (contentView != null) contentView = contentView.superview();", "+\t\tif (contentView != null) {", "+\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "+\t\t\tview = contentView.hitTest (location);", "+\t\t\tif (view == null && !checkTrim) {", "+\t\t\t\tview = contentView;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64bd6a0c759d106cb333b52f2bf1c802", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolderLayout.java", "commitBeforeChange": "810eb254cbe71a3e1637e56f044fa70b981eb39d", "commitAfterChange": "803bd538f4c4c40e1d60df10cb6937bfea9dab26", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)", "signatureAfterChange": " protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)", "diff": ["+\tCTabFolderRenderer renderer = folder.renderer;", "+\tint selectedIndex = folder.selectedIndex;", "+\tif (selectedIndex == -1) selectedIndex = 0;", "-\t\t\ttabW = Math.max(tabW, items[i].preferredWidth(gc, true, false));", "+\t\t\ttabW = Math.max(tabW, renderer.computeSize(i, SWT.SELECTED, gc).x);", "-\t\t\ttabW += items[i].preferredWidth(gc, i == folder.selectedIndex, false);", "+\t\t\tint state = 0;", "+\t\t\tif (i == selectedIndex) state |= SWT.SELECTED;", "+\t\t\ttabW += renderer.computeSize(i, state, gc).x;", "-\tgc.dispose();", "-\tif (folder.showMax) tabW += CTabFolder.BUTTON_SIZE;", "-\tif (folder.showMin) tabW += CTabFolder.BUTTON_SIZE;", "-\tif (folder.single) tabW += 3*CTabFolder.BUTTON_SIZE/2; //chevron", "+\t", "+\tif (folder.showMax) tabW += renderer.computeSize(CTabFolderRenderer.PART_MAX_BUTTON, SWT.NONE, gc).x;", "+\tif (folder.showMin) tabW += renderer.computeSize(CTabFolderRenderer.PART_MIN_BUTTON, SWT.NONE, gc).x;", "+\tif (folder.single) tabW += renderer.computeSize(CTabFolderRenderer.PART_CHEVRON_BUTTON, SWT.NONE, gc).x;", "-\tif (!folder.single && !folder.simple) tabW += folder.curveWidth - 2*folder.curveIndent;", "+", "+\tgc.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d81a0ddb9916f2e544727a48f4f9a716", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "7633f3e92a8ed476d9b511d81b80f724d9557137", "commitAfterChange": "0519b301515901148cc1199b76a3200406342671", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  @Override void createHandle (int index)", "signatureAfterChange": "  @Override void createHandle (int index)", "diff": ["+\t\tString buttonCss = \"GtkButton {padding: 2px 4px 3px 4px}\"; //top right bottom left;", "-\t\t\tOS.gtk_widget_set_sensitive (arrowHandle, true);", "-\t\t\tif (!OS.GTK3) {", "-\t\t\t\tOS.gtk_widget_set_size_request(OS.gtk_bin_get_child(arrowHandle), 8, 6);", "-\t\t\t} else {", "-\t\t\t\t//Disable left and right padding to not have so wide toolbars\t", "-\t\t\t\tString css =\"GtkMenuButton.button {\\n\"+", "-\t\t\t\t\t\t\"padding-left: 0px;\\n\"+", "-\t\t\t\t\t\t\"padding-right: 0px;\\n\"+", "-\t\t\t\t\t\t\"}\\n\";", "-\t\t\t\tif (provider == 0) {", "-\t\t\t\t\t//If provider is initialized the style has already been applied application wide so no need to repeat.", "-\t\t\t\t\tprovider = OS.gtk_css_provider_new ();", "-\t\t\t\t\tlong /*int*/ context = OS.gtk_widget_get_style_context(arrowHandle);", "-\t\t\t\t\tOS.gtk_style_context_add_provider (context, provider, OS.GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);", "-\t\t\t\t\tOS.g_object_unref (provider);", "-\t\t\t\t\tOS.gtk_css_provider_load_from_data (provider, Converter.wcsToMbcs (null, css, true), -1, null);", "-\t\t\t\t\tOS.gtk_style_context_invalidate (context);", "+\t\t\tif (arrowHandle != 0) {", "+\t\t\t\tOS.gtk_widget_set_sensitive (arrowHandle, true);", "+\t\t\t\tif (!OS.GTK3) {", "+\t\t\t\t\tOS.gtk_widget_set_size_request(OS.gtk_bin_get_child(arrowHandle), 8, 6);", "+\t\t\t\t} else {", "+\t\t\t\t\tlong /*int*/ arrowContext = OS.gtk_widget_get_style_context(arrowHandle);", "+\t\t\t\t\tString arrowCss = \"GtkMenuButton {padding: 1px 0px 1px 0px}\"; //top right bottom left", "+\t\t\t\t\tgtk_css_provider_load_from_css(arrowContext, arrowCss);", "+\t\t\t\t\tprovider = 0;", "+\t\t\t\t\tOS.gtk_style_context_invalidate (arrowContext);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlong /*int*/ menuButtonHandle = OS.g_list_nth_data (list, 0);", "+\t\t\tif (menuButtonHandle != 0) {", "+\t\t\t\tif (OS.GTK3) {", "+\t\t\t\t\tlong /*int*/ menuButtonContext = OS.gtk_widget_get_style_context(menuButtonHandle);", "+\t\t\t\t\tgtk_css_provider_load_from_css(menuButtonContext, buttonCss);", "+\t\t\t\t\t//Reset provider to 0 in order to ensure CSS is loaded properly", "+\t\t\t\t\tprovider = 0;", "+\t\t\t\t\tOS.gtk_style_context_invalidate (menuButtonContext);", "+\tif (OS.GTK3) {", "+\t\tlong /*int*/ buttonHandle = OS.gtk_bin_get_child(handle);", "+\t\tif (buttonHandle != 0) {", "+\t\t\tlong /*int*/ buttonContext = OS.gtk_widget_get_style_context(buttonHandle);", "+\t\t\tgtk_css_provider_load_from_css(buttonContext, buttonCss);", "+\t\t\t//Reset provider to 0 in order to ensure CSS is loaded properly", "+\t\t\tprovider = 0;", "+\t\t\tOS.gtk_style_context_invalidate (buttonContext);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc980dd3505deca5a6e57492175715ac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "c738133a2fdbe3d60fd9dfabbfd9e737153e1aa5", "commitAfterChange": "c9992cb98fd2a837c866ff6f32642b9e42588c7e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " public FontData[] getFontData()", "signatureAfterChange": " public FontData[] getFontData()", "diff": ["-\tif (handle==0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);", "-\t/* REWRITE ME.", "-\t * THIS WILL NEVER WORK CORRECTLY.", "-\t * WE USED TO REACH DOWN TO GDK INTERNAL MEMORY", "-\t */", "-\tFontData[] answer = new FontData[1];", "-\tFontData data = new FontData();", "-\tdata.fontFamily = \"fixed\";", "-\tdata.weight = \"normal\";", "-\tdata.points = 120;", "-\tanswer[0] = data;", "-\treturn answer;", "+\tif (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);", "+", "+\tString name = OS.pango_font_description_get_family(handle);", "+\tint height = OS.pango_font_description_get_size(handle) / OS.PANGO_SCALE();", "+\tint pangoStyle = OS.pango_font_description_get_style(handle);", "+\tint pangoWeight = OS.pango_font_description_get_weight(handle);", "+\tint style = SWT.NORMAL;", "+\tif (pangoStyle == OS.PANGO_STYLE_ITALIC()) style |= SWT.ITALIC;", "+\tif (pangoStyle == OS.PANGO_STYLE_OBLIQUE()) style |= SWT.ROMAN;", "+\t/* Anything bolder than NORMAL, is BOLD */", "+\tif (pangoWeight > OS.PANGO_WEIGHT_NORMAL()) style |= SWT.BOLD;", "+\treturn new FontData[]{new FontData(name, height, style)};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "979bdd3cca6e7491025509b9edc4cbad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "5ed9eadeff488afd5cd81c46122632ed8c74a1f7", "commitAfterChange": "ea15a960a853001410e58a3d24c8aee2da7a0620", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 60, "signatureBeforeChange": " public void setText (int index, String string)", "signatureAfterChange": " public void setText (int index, String string)", "diff": ["-\tcheckWidget();", "+\tcheckWidget ();", "-\t", "-\tif (strings == null) {", "-\t\tstrings = new String [count];", "-\t}", "-\tif (string.equals (strings [index])) return;", "-\tstrings [index] = string;", "-\tif (stringHandle != null && stringHandle [index] != 0) {", "-\t\tOS.GCHandle_Free (stringHandle [index]);", "-\t\tstringHandle [index] = 0;", "+\tif (stringList == 0) {", "+\t\tstringList = OS.gcnew_ArrayList (count);", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tOS.ArrayList_Insert (stringList, i, 0);", "+\t\t}", "-\tresetText (index);", "+\tint str = createDotNetString (string, false);", "+\tOS.ArrayList_default (stringList, index, str);", "+\tOS.GCHandle_Free (str);", "+\tif (ignoreNotify) return;", "+\tint header = OS.HeaderedItemsControl_Header (handle);", "+\tint row = OS.GridViewRowPresenter_Content (header);", "+\tOS.SWTRow_NotifyPropertyChanged (row, Tree.TEXT_NOTIFY);", "+\tOS.GCHandle_Free (row);", "+\tOS.GCHandle_Free (header);"]}], "num": 60027}
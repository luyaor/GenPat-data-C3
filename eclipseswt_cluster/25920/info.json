{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b38ecd79e7f9c14e09c9b879e1eef421", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02488c7be02b22242066e74b80204c43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "bf221f66369037ceea33728d5ed71d69549dd596", "commitAfterChange": "73be0ec89889e2c1322c1bfa09d83f81f689ab7f", "methodNumberBeforeChange": 302, "methodNumberAfterChange": 304, "signatureBeforeChange": " public void setTopPixel(int pixel)", "signatureAfterChange": " public void setTopPixel(int pixel)", "diff": ["-\tint height = clientAreaHeight;", "+\tint height = clientAreaHeight - topMargin - bottomMargin;", "-\t\tif (pixel > getVerticalScrollOffset()) {", "-\t\t\tint bottomIndex = getLineIndex(height) + 1;", "-\t\t\tint bottomPixel = getLinePixel(bottomIndex);", "-\t\t\twhile (pixel + height > bottomPixel && lineCount > bottomIndex) {", "-\t\t\t\tbottomPixel += renderer.getLineHeight(bottomIndex++);", "+\t\tint verticalOffset = getVerticalScrollOffset();", "+\t\tif (pixel > verticalOffset) {", "+\t\t\tint lineIndex = topIndex;", "+\t\t\tint maxTopPixel = verticalOffset + getLinePixel(lineIndex) - height;", "+\t\t\twhile (maxTopPixel < pixel && lineIndex < lineCount) {", "+\t\t\t\tmaxTopPixel += renderer.getLineHeight(lineIndex++);", "-\t\t\tif (pixel + height > bottomPixel) pixel = bottomPixel - height; ", "+\t\t\tif (pixel > maxTopPixel) pixel = maxTopPixel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "470070704411a4d734cd0235aef0eaec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "73b51de8c84174e0e99b4c04bc9fd87166a96cec", "commitAfterChange": "7df940ae424cbd3c79310d7b9bc5d657b5781f6f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\t\tint srcRowBytes= rowBytes(width, srcDepth);", "+\t\tif (srcBitsPerPixel == 1) {", "+\t\t\t/*", "+\t\t\t * Nothing we can reasonably do here except copy", "+\t\t\t * the bitmap; we can't make it a higher color depth.", "+\t\t\t * Short-circuit the rest of the code and return.", "+\t\t\t */", "+\t\t\tpixmap = duplicate(srcImage.pixmap);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tint srcRowBytes= rowBytes(width, srcDepth);", "-\t\t\t/*", "-\t\t\t * Nothing we can reasonably do here except copy", "-\t\t\t * the bitmap; we can't make it a higher color depth.", "-\t\t\t * Short-circuit the rest of the code and return.", "-\t\t\t */", "-\t\t\tpixmap = duplicate(srcImage.pixmap);", "+\t\t\t// should not happen; see above", "-\t\t\tSWT.error(SWT.ERROR_NOT_IMPLEMENTED);", "+\t\t\t//SWT.error(SWT.ERROR_NOT_IMPLEMENTED);", "+\t\t\tpixmap = duplicate(srcImage.pixmap);", "-\t\t\t\t\tsrcPixel = ((srcData[index + xIndex + 1] & 0xFF) << 8) | (srcData[index + xIndex] & 0xFF);", "+\t\t\t\t\tint ix= index + xIndex;", "+\t\t\t\t\tsrcPixel = ((srcData[ix + 1] & 0xFF) << 8) | (srcData[ix] & 0xFF);", "-\t\t\t\t\t\tdestData[index + xIndex] = zeroLow;", "-\t\t\t\t\t\tdestData[index + xIndex + 1] = zeroHigh;", "+\t\t\t\t\t\tdestData[ix] = zeroLow;", "+\t\t\t\t\t\tdestData[ix + 1] = zeroHigh;", "-\t\t\t\t\t\tdestData[index + xIndex] = oneLow;", "-\t\t\t\t\t\tdestData[index + xIndex + 1] = oneHigh;", "+\t\t\t\t\t\tdestData[ix] = oneLow;", "+\t\t\t\t\t\tdestData[ix + 1] = oneHigh;", "-\t\tif (!palette.isDirect) {", "-\t\t\t/* Convert the palette entries to gray. */", "-\t\t\tRGB [] rgbs = palette.getRGBs();", "-\t\t\tfor (int i=0; i<rgbs.length; i++) {", "-\t\t\t\tif (data.transparentPixel != i) {", "-\t\t\t\t\tRGB color = rgbs [i];", "-\t\t\t\t\tint red = color.red;", "-\t\t\t\t\tint green = color.green;", "-\t\t\t\t\tint blue = color.blue;", "-\t\t\t\t\tint intensity = (red+red+green+green+green+green+green+blue) >> 3;", "-\t\t\t\t\tcolor.red = color.green = color.blue = intensity;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tnewData.palette = new PaletteData(rgbs);", "-\t\t} else {", "+\t\tif (palette.isDirect) {", "-\t\t\tfor (int i=0; i<rgbs.length; i++) {", "-\t\t\t\trgbs[i] = new RGB(i, i, i);", "-\t\t\t}", "+\t\t\tfor (int i= 0; i < rgbs.length; i++)", "+\t\t\t\trgbs[i]= new RGB(i, i, i);", "+\t\t\t", "-\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\tfor (int y= 0; y < height; y++) {", "-\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\tfor (int x= 0; x < width; x++) {", "+\t\t} else {", "+\t\t\t/* Convert the palette entries to gray. */", "+\t\t\tRGB [] rgbs = palette.getRGBs();", "+\t\t\tfor (int i= 0; i < rgbs.length; i++) {", "+\t\t\t\tif (data.transparentPixel != i) {", "+\t\t\t\t\tRGB color = rgbs [i];", "+\t\t\t\t\tint red = color.red;", "+\t\t\t\t\tint green = color.green;", "+\t\t\t\t\tint blue = color.blue;", "+\t\t\t\t\tint intensity = (red+red+green+green+green+green+green+blue) >> 3;", "+\t\t\t\t\tcolor.red = color.green = color.blue = intensity;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tnewData.palette = new PaletteData(rgbs);", "+\t\t"]}], "num": 25920}
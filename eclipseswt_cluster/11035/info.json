{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc5a6521a008e759d7283da401b66469", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b20f300f579af64107511f88e824df57", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 101, "signatureBeforeChange": "  \tvoid updateChildren ()", "signatureAfterChange": "  \tvoid updateChildren ()", "diff": ["-\t\tAccessibleControlListener[] listeners = getControlListeners ();", "-\t\tif (listeners.length == 0) return;", "-", "+\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\tint length = listeners.size();", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getChildren (event);", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\tlistener.getChildren (event);", "-\t\t\t\tint /*long*/ parentType = AccessibleFactory.getDefaultParentType ();", "-\t\t\t\t\t\tint /*long*/ childType = AccessibleFactory.getChildType (accessible, i);", "-\t\t\t\t\t\tobject = new AccessibleObject (childType, 0, accessible, parentType, true);", "-\t\t\t\t\t\tAccessibleObjects.put (new LONG (object.handle), object);", "+\t\t\t\t\t\tobject = AccessibleFactory.createChildAccessible (accessible, i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df673bef937b940af99e1992350d013f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT PI/common_j2se/org/eclipse/swt/internal/Library.java", "commitBeforeChange": "05bda528c4862df75441b997603a2076d47e6f54", "commitAfterChange": "98b1c71f82465b2a6145a01466e8a4f618fa2aee", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " public static void loadLibrary (String name, boolean mapName)", "signatureAfterChange": " public static void loadLibrary (String name, boolean mapName)", "diff": ["+\tStringBuffer message = new StringBuffer();", "+\t", "-\t\tif (load (path + SEPARATOR + mappedName1)) return;", "-\t\tif (mapName && load (path + SEPARATOR + mappedName2)) return;", "+\t\tif (load (path + SEPARATOR + mappedName1, message)) return;", "+\t\tif (mapName && load (path + SEPARATOR + mappedName2, message)) return;", "-\tif (load (libName1)) return;", "-\tif (mapName && load (libName2)) return;", "+\tif (load (libName1, message)) return;", "+\tif (mapName && load (libName2, message)) return;", "-\t\t\tif (make && !Platform.PLATFORM.equals (\"win32\")) { //$NON-NLS-1$", "-\t\t\t\ttry {", "-\t\t\t\t\tRuntime.getRuntime ().exec (new String []{\"chmod\", \"777\", path}).waitFor(); //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t} catch (Throwable e) {}", "-\t\t\t}", "+\t\t\tif (make) chmod (\"777\", path); //$NON-NLS-1$", "-\t\tif (load (path + SEPARATOR + fileName1)) return;", "-\t\tif (mapName && load (path + SEPARATOR + fileName2)) return;", "+\t\tif (load (path + SEPARATOR + fileName1, message)) return;", "+\t\tif (mapName && load (path + SEPARATOR + fileName2, message)) return;", "-\t\tif (extract (path + SEPARATOR + fileName1, mappedName1)) return;", "-\t\tif (mapName && extract (path + SEPARATOR + fileName2, mappedName2)) return;", "+\t\tif (extract (path + SEPARATOR + fileName1, mappedName1, message)) return;", "+\t\tif (mapName && extract (path + SEPARATOR + fileName2, mappedName2, message)) return;", "-\tthrow new UnsatisfiedLinkError (\"no \" + libName1 + \" or \" + libName2 + \" in swt.library.path, java.library.path or the jar file\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\tthrow new UnsatisfiedLinkError (\"Could not load SWT library. Reasons: \" + message.toString()); //$NON-NLS-1$"]}], "num": 11035}
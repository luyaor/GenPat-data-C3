{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "162042b13f926f70ec522ab65ea4e3e0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "329ab1bdb2095ddd3150741f6eed7db8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "a15e74fa4fc558db41d7b6459560396680bcb2a9", "commitAfterChange": "2177973a521d0eada801b33df10034dd8a9f4625", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "  public boolean execute (String script)", "signatureAfterChange": "  public boolean execute (String script)", "diff": ["-\tString url = PREFIX_JAVASCRIPT + script + \";void(0);\";\t//$NON-NLS-1$", "+\t/*", "+\t* This could be the first content that is set into the browser, so", "+\t* ensure that the custom subclass that works around Mozilla bug", "+\t* https://bugzilla.mozilla.org/show_bug.cgi?id=453523 is removed.", "+\t*/", "+\tdelegate.removeWindowSubclass ();", "+", "+\t/*", "+\t* As of mozilla 1.9 executing javascript via the javascript: protocol no", "+\t* longer happens synchronously.  As a result, the result of executing JS", "+\t* is not returned to the java side when expected by the client.  The", "+\t* workaround is to invoke the javascript handler directly via C++, which is", "+\t* exposed as of mozilla 1.9.", "+\t*/", "+\tif (!IsPre_1_9) {", "+\t\tint rc = XPCOM.NS_GetServiceManager (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\tnsIPrincipal principal = null;", "+\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_SCRIPTSECURITYMANAGER_CONTRACTID, true);", "+\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIScriptSecurityManager_1_9_1.NS_ISCRIPTSECURITYMANAGER_IID, result);", "+\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\tnsIScriptSecurityManager_1_9_1 securityManager = new nsIScriptSecurityManager_1_9_1 (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = securityManager.GetSystemPrincipal (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tprincipal = new nsIPrincipal (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tsecurityManager.Release ();", "+\t\t} else {", "+\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIScriptSecurityManager_1_9.NS_ISCRIPTSECURITYMANAGER_IID, result);", "+\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\tnsIScriptSecurityManager_1_9 securityManager = new nsIScriptSecurityManager_1_9 (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = securityManager.GetSystemPrincipal (result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\t\tprincipal = new nsIPrincipal (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tsecurityManager.Release ();", "+\t\t\t}", "+\t\t}", "+\t\tserviceManager.Release ();", "+", "+\t\tif (principal != null) {", "+\t\t\trc = webBrowser.QueryInterface (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+", "+\t\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tnsID scriptGlobalObjectNSID = new nsID (\"6afecd40-0b9a-4cfd-8c42-0f645cd91829\"); /* nsIScriptGlobalObject */ //$NON-NLS-1$", "+\t\t\trc = interfaceRequestor.GetInterface (scriptGlobalObjectNSID, result);", "+\t\t\tinterfaceRequestor.Release ();", "+", "+\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\tint /*long*/ scriptGlobalObject = result[0];", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = XPCOM.nsIScriptGlobalObject_EnsureScriptEnvironment (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tint /*long*/ scriptContext = XPCOM.nsIScriptGlobalObject_GetScriptContext (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "+\t\t\t\tint /*long*/ globalJSObject = XPCOM.nsIScriptGlobalObject_GetScriptGlobal (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "+\t\t\t\tnew nsISupports (scriptGlobalObject).Release ();", "+", "+\t\t\t\tif (scriptContext != 0 && globalJSObject != 0) {", "+\t\t\t\t\t/* ensure that the received nsIScriptContext implements the expected interface */", "+\t\t\t\t\tnsID scriptContextNSID = new nsID (\"e7b9871d-3adc-4bf7-850d-7fb9554886bf\"); /* nsIScriptContext */ //$NON-NLS-1$\t\t\t\t\t", "+\t\t\t\t\trc = new nsISupports (scriptContext).QueryInterface (scriptContextNSID, result);", "+\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\t\t\t\tresult[0] = 0;", "+", "+\t\t\t\t\t\tint /*long*/ nativeContext = XPCOM.nsIScriptContext_GetNativeContext (scriptContext);", "+\t\t\t\t\t\tif (nativeContext != 0) {", "+\t\t\t\t\t\t\tint length = script.length ();", "+\t\t\t\t\t\t\tchar[] scriptChars = new char[length];", "+\t\t\t\t\t\t\tscript.getChars(0, length, scriptChars, 0);", "+\t\t\t\t\t\t\tbyte[] urlbytes = MozillaDelegate.wcsToMbcs (null, getUrl (), true);", "+\t\t\t\t\t\t\trc = principal.GetJSPrincipals (nativeContext, result);", "+\t\t\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\t\t\t\tint /*long*/ principals = result[0];", "+\t\t\t\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\t\t\t\tprincipal.Release ();", "+\t\t\t\t\t\t\t\tString mozillaPath = LocationProvider.mozillaPath + delegate.getJSLibraryName () + '\\0';", "+\t\t\t\t\t\t\t\tbyte[] pathBytes = null;", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tpathBytes = mozillaPath.getBytes (\"UTF-8\"); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t} catch (UnsupportedEncodingException e) {", "+\t\t\t\t\t\t\t\t\tpathBytes = mozillaPath.getBytes ();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\trc = XPCOM.JS_EvaluateUCScriptForPrincipals (pathBytes, nativeContext, globalJSObject, principals, scriptChars, length, urlbytes, 0, result);", "+\t\t\t\t\t\t\t\treturn rc != 0;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tprincipal.Release ();", "+\t\t}", "+\t}", "+", "+\t/* fall back to the pre-1.9 approach */", "+", "+\tString url = PREFIX_JAVASCRIPT + script + \";void(0);\";\t//$NON-NLS-1$", "-", "-\t/*", "-\t * This could be the first content that is set into the browser, so", "-\t * ensure that the custom subclass that works around Mozilla bug", "-\t * https://bugzilla.mozilla.org/show_bug.cgi?id=453523 is removed.", "-\t */", "-\tdelegate.removeWindowSubclass ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efd2c2b53d6beb3cd183ed01aa9413b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "6b28578ec575cf9b9bc42578b2cd2a249f83e1ad", "commitAfterChange": "6a69a1fd95a7e88062f2270d5c638a035c824208", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  static int callJava (int functionId, long tokenVariant, long argsVariant, long returnPtr)", "signatureAfterChange": " static long callJava (long cx, long argc, long vp)", "diff": ["+ */", "+static long /*int*/ callJava (long /*int*/ cx, long /*int*/ argc, long /*int*/ vp) {", "+\tint jsval_sizeof = 8;", "+\tlong /*int*/ argsPtr = vp + 2 * jsval_sizeof;", "+\tnsIVariant resultVariant = null;", "+", "+\tlong /*int*/[] result = new long /*int*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\trc = serviceManager.GetService (XPCOM.NS_IXPCONNECT_CID, IIDStore.GetIID (nsIXPConnect.class), result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIXPConnect connect = new nsIXPConnect (result[0]);", "+\tresult[0] = 0;", "+", "+\t/* extract the first argument value (the function id) */", "+\trc = connect.JSValToVariant (cx, argsPtr, result);", "+\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\tnsIVariant idVariant = new nsIVariant (result[0]);", "+\t\tresult[0] = 0;", "+\t\tshort[] dataType = new short[1];", "+\t\trc = idVariant.GetDataType (dataType);", "+\t\tif (rc == XPCOM.NS_OK && dataType[0] == nsIDataType.VTYPE_INT32) {", "+\t\t\tint[] intResult = new int[1];", "+\t\t\trc = idVariant.GetAsInt32 (intResult); /* PRInt32 */", "+\t\t\tif (rc == XPCOM.NS_OK) {", "+\t\t\t\tint functionId = intResult[0];", "+", "+\t\t\t\t/* get the second argument variant (the token string) */", "+\t\t\t\targsPtr += jsval_sizeof;", "+\t\t\t\trc = connect.JSValToVariant (cx, argsPtr, result);", "+\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\tlong /*int*/ tokenVariant = result[0];", "+\t\t\t\t\tresult[0] = 0;", "+", "+\t\t\t\t\t/* get the third argument variant (the invocation args) */", "+\t\t\t\t\targsPtr += jsval_sizeof;", "+\t\t\t\t\trc = connect.JSValToVariant (cx, argsPtr, result);", "+\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\t\tlong /*int*/ argsVariant = result[0];", "+\t\t\t\t\t\tresult[0] = 0;", "+", "+\t\t\t\t\t\t/* invoke the BrowserFunction */", "+\t\t\t\t\t\tresultVariant = new nsIVariant (invokeFunction (functionId, tokenVariant, argsVariant));", "+\t\t\t\t\t\tnew nsISupports (argsVariant).Release ();", "+\t\t\t\t\t}", "+\t\t\t\t\tnew nsISupports (tokenVariant).Release ();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tidVariant.Release ();", "+\t}", "+\tresult[0] = 0;", "+", "+\t/* if the BrowserFunction could not be invoked for some reason then return null to JS */", "+\tif (resultVariant == null) {", "+\t\trc = XPCOM.NS_GetComponentManager (result);", "+\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+\t\tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\tresultVariant = convertToJS (null, componentManager);", "+\t\tcomponentManager.Release ();", "+\t}", "+", "+\t/* convert the resulting variant to a jsval */", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, IIDStore.GetIID (nsIMemory.class), result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+\tserviceManager.Release();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "+\tlong /*int*/ jsVal = memory.Alloc (jsval_sizeof);", "+\tC.memset (jsVal, 0, jsval_sizeof);", "+\tlong /*int*/ globalObject = 0;", "+\tglobalObject = XPCOM.JS_GetGlobalObject (Mozilla.getJSLibPathBytes (), cx);", "+\trc = connect.VariantToJS (cx, globalObject, resultVariant.getAddress (), jsVal);", "+\tresultVariant.Release ();", "+\tconnect.Release ();", "+", "+\tlong /*int*/ returnValue = XPCOM.JS_FALSE;", "+\tif (rc == XPCOM.NS_OK) {", "+\t\t/* write the jsval to the return value slot */", "+\t\tC.memmove (vp, jsVal, jsval_sizeof);", "+\t\treturnValue = XPCOM.JS_TRUE;", "+\t}", "+\tmemory.Free (jsVal);", "+\tmemory.Release ();", "+\treturn returnValue;", "+}"]}], "num": 33693}
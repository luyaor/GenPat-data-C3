{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3795604a86c7176293a3555db87752e8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "025c825f8e00ac2f792313e669505008", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "8446f9e98b59905e2652a2064c0f407c80cfe624", "commitAfterChange": "595e8300c2ed2e3edf85213e588d65e62a8727e9", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "diff": ["+\tLRESULT result = super.WM_WINDOWPOSCHANGING (wParam, lParam);", "+\tif (result != null) return result;", "-\t* using SWP_NOREDRAW and then damage only the combo", "-\t* box text field.", "+\t* using SWP_NOREDRAW and then damage the combo box", "+\t* text field and the area in the parent where the", "+\t* combo box used to be.", "-\tWINDOWPOS lpwp = new WINDOWPOS ();", "-\tOS.MoveMemory (lpwp, lParam, WINDOWPOS.sizeof);", "-\tif ((lpwp.flags & OS.SWP_NOSIZE) == 0) {", "-\t\tif (ignoreResize) {", "+\tif (drawCount != 0) return result;", "+\tif (!OS.IsWindowVisible (handle)) return result;", "+\tif (ignoreResize) {", "+\t\tWINDOWPOS lpwp = new WINDOWPOS ();", "+\t\tOS.MoveMemory (lpwp, lParam, WINDOWPOS.sizeof);", "+\t\tif ((lpwp.flags & OS.SWP_NOSIZE) == 0) {", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetWindowRect (handle, rect);", "+\t\t\tint width = rect.right - rect.left;", "+\t\t\tint height = rect.bottom - rect.top;", "+\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\tint /*long*/ hwndParent = parent.handle;", "+\t\t\t\tint /*long*/ hwndChild = OS.GetWindow (hwndParent, OS.GW_CHILD);", "+\t\t\t\tOS.MapWindowPoints (0, hwndParent, rect, 2);", "+\t\t\t\tint /*long*/ rgn1 = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "+\t\t\t\twhile (hwndChild != 0) {", "+\t\t\t\t\tif (hwndChild != handle) {", "+\t\t\t\t\t\tOS.GetWindowRect (hwndChild, rect);", "+\t\t\t\t\t\tOS.MapWindowPoints (0, hwndParent, rect, 2);", "+\t\t\t\t\t\tint /*long*/ rgn2 = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "+\t\t\t\t\t\tOS.CombineRgn (rgn1, rgn1, rgn2, OS.RGN_DIFF);", "+\t\t\t\t\t\tOS.DeleteObject (rgn2);", "+\t\t\t\t\t}", "+\t\t\t\t\thwndChild = OS.GetWindow (hwndChild, OS.GW_HWNDNEXT);", "+\t\t\t\t}", "+\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE;", "+\t\t\t\tOS.RedrawWindow (hwndParent, null, rgn1, flags);", "+\t\t\t\tOS.DeleteObject (rgn1);", "+\t\t\t}", "-\treturn super.WM_WINDOWPOSCHANGING (wParam, lParam);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aac6e6fa63498ce225e3f1574d678028", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ImageList.java", "commitBeforeChange": "cbf85ae1b5c4ea922719b166c1d27766c5fdad3a", "commitAfterChange": "0f32f1d336e593b238b490fbe0e9b4ecf1880dae", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int createMask (int hBitmap, int width, int height, int background)", "signatureAfterChange": "  int createMask (int hBitmap, int destWidth, int destHeight, int background, int transparentPixel)", "diff": ["-int createMask (int hBitmap, int width, int height, int background) {", "-\tint hMask = OS.CreateBitmap (width, height, 1, 1, null);", "+", "+int createMask (int hBitmap, int destWidth, int destHeight, int background, int transparentPixel) {", "+\tBITMAP bm = new BITMAP ();", "+\tOS.GetObject (hBitmap, BITMAP.sizeof, bm);", "+\tint srcWidth = bm.bmWidth;", "+\tint srcHeight = bm.bmHeight;", "+\tint hMask = OS.CreateBitmap (destWidth, destHeight, 1, 1, null);", "+\t\t", "+\t\t/*", "+\t\t* If the image has a palette with multiple entries having", "+\t\t* the same color and one of those entries is the transparentPixel,", "+\t\t* only the first entry becomes transparent. To avoid this", "+\t\t* problem, temporarily change the image palette to a palette", "+\t\t* where the transparentPixel is white and everything else is", "+\t\t* black. ", "+\t\t*/", "+\t\tboolean isDib = bm.bmBits != 0;", "+\t\tbyte[] originalColors = null;", "+\t\tif (transparentPixel != -1 && isDib && bm.bmBitsPixel <= 8) {", "+\t\t\tint maxColors = 1 << bm.bmBitsPixel;", "+\t\t\tbyte[] oldColors = new byte[maxColors * 4];", "+\t\t\tOS.GetDIBColorTable(hdc1, 0, maxColors, oldColors);", "+\t\t\tint offset = transparentPixel * 4;", "+\t\t\tbyte[] newColors = new byte[oldColors.length];", "+\t\t\tnewColors[offset] = (byte)0xFF;", "+\t\t\tnewColors[offset+1] = (byte)0xFF;", "+\t\t\tnewColors[offset+2] = (byte)0xFF;", "+\t\t\tOS.SetDIBColorTable(hdc1, 0, maxColors, newColors);", "+\t\t\toriginalColors = oldColors;", "+\t\t\tOS.SetBkColor (hdc1, 0xFFFFFF);", "+\t\t} else {", "+\t\t\tOS.SetBkColor (hdc1, background);", "+\t\t}", "+\t\t", "-\t\tOS.SetBkColor (hdc1, background);", "-\t\tOS.BitBlt (hdc2, 0, 0, width, height, hdc1, 0, 0, OS.SRCCOPY);", "+\t\tif (destWidth != srcWidth || destHeight != srcHeight) {", "+\t\t\tif (!OS.IsWinCE) OS.SetStretchBltMode (hdc2, OS.COLORONCOLOR);", "+\t\t\tOS.StretchBlt (hdc2, 0, 0, destWidth, destHeight, hdc1, 0, 0, srcWidth, srcHeight, OS.SRCCOPY);", "+\t\t} else {", "+\t\t\tOS.BitBlt (hdc2, 0, 0, destWidth, destHeight, hdc1, 0, 0, OS.SRCCOPY);", "+\t\t}", "+", "+\t\t/* Put back the original palette */", "+\t\tif (originalColors != null) OS.SetDIBColorTable(hdc1, 0, 1 << bm.bmBitsPixel, originalColors);", "-\t\tOS.PatBlt (hdc1, 0, 0, width, height, OS.BLACKNESS);", "+\t\tOS.PatBlt (hdc1, 0, 0, destWidth, destHeight, OS.BLACKNESS);", "+\treturn hMask;", "+}"]}], "num": 12730}
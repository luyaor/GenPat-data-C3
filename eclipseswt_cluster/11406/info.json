{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "406a33366d6fcaa8e75bd04af4e8ce91", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a99615ebbe063bee9eda98b07db7c19a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/photon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "c0e47047fb12b4ad6c1cd291125c302ee4573df0", "commitAfterChange": "772f59dfc148ceb100936d7357b9a0b9d85ab236", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t/* select server */", "-\tbyte[] serverBuffer = Converter.wcsToMbcs(null, server, true);", "-\tint serverPtr = OS.malloc(serverBuffer.length);", "-\tOS.memmove(serverPtr, serverBuffer, serverBuffer.length);", "-\tOS.PtSetResource(webHandle, OS.Pt_ARG_WEB_SERVER, serverPtr, 0);", "-\tOS.free(serverPtr);", "+\t/**", "+\t * Feature in Photon PtWebClient.  If you give a server name", "+\t * when the widget is created it will attempt to start a new server", "+\t * rather then attaching a new window context to the existing server.", "+\t * If you don't connect to the existing one then javascript window", "+\t * creation will fail.", "+\t */", "+\tif (instanceCount == 0) {", "+\t\t/* select server */", "+\t\tbyte[] serverBuffer = Converter.wcsToMbcs(null, server, true);", "+\t\tint serverPtr = OS.malloc(serverBuffer.length);", "+\t\tOS.memmove(serverPtr, serverBuffer, serverBuffer.length);", "+\t\tOS.PtSetResource(webHandle, OS.Pt_ARG_WEB_SERVER, serverPtr, 0);", "+\t\tOS.free(serverPtr);", "+\t} ", "+\tinstanceCount++;", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_CLOSE_WINDOW, webProc, OS.Pt_CB_WEB_CLOSE_WINDOW);", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_NEW_WINDOW, webProc, OS.Pt_CB_WEB_NEW_WINDOW);", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38941f95047c11d751cd7b129d3457a4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "bd21f3765c0c3d8551e66cecb7910c23ee2a020c", "commitAfterChange": "0299941c68a463c97176c9da97b333292c2da0fb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Rectangle computeTrim (int x, int y, int width, int height)", "signatureAfterChange": " public Rectangle computeTrim (int x, int y, int width, int height)", "diff": ["-\t\tsize = NSScrollView.frameSizeForContentSize(size, (style & SWT.H_SCROLL) != 0, (style & SWT.V_SCROLL) != 0, border);", "+\t\tif (OS.VERSION >= 0x1070) {", "+\t\t\t// Always include the scroll bar in the trim even when the scroll style is overlay", "+\t\t\tOS.objc_msgSend_stret(size, OS.class_NSScrollView,", "+\t\t\t\tOS.sel_frameSizeForContentSize_horizontalScrollerClass_verticalScrollerClass_borderType_controlSize_scrollerStyle_,", "+\t\t\t\tsize, OS.class_NSScroller, OS.class_NSScroller, border, OS.NSRegularControlSize, OS.NSScrollerStyleLegacy);", "+\t\t} else {", "+\t\t\tsize = NSScrollView.frameSizeForContentSize(size, (style & SWT.H_SCROLL) != 0, (style & SWT.V_SCROLL) != 0, border);", "+\t\t}"]}], "num": 11406}
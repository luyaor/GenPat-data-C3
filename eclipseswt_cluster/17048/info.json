{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9283cccab0057ccd4f87fa0f20fe6286", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eba9d6e90217bff35b4696a13b24c4f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 73, "signatureBeforeChange": "  \tstatic int atkText_get_text_before_offset (int atkObject, int offset_value, int boundary_type, int start_offset, int end_offset)", "signatureAfterChange": "  \tstatic int atkText_get_text_before_offset (int atkObject, int offset_value, int boundary_type, int start_offset, int end_offset)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tint offset = (int)/*64*/offset_value;", "-\t\tString text = object.getText ();", "-\t\tif (text.length () > 0) {", "-\t\t\tint length = text.length ();", "-\t\t\toffset = Math.min (offset, length - 1);", "-\t\t\tint startBounds = offset;", "-\t\t\tint endBounds = offset;", "-\t\t\tswitch ((int)/*64*/boundary_type) {", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: {", "-\t\t\t\t\tif (length >= offset && offset > 0) startBounds--;", "-\t\t\t\t\tbreak;", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tevent.start = event.end = (int)/*64*/offset_value;", "+\t\t\t\tevent.count = -1;", "+\t\t\t\tswitch ((int)/*64*/boundary_type) {", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: event.type = ACC.TEXT_BOUNDARY_CHAR; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START: event.type = ACC.TEXT_BOUNDARY_WORD; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: event.type = ACC.TEXT_BOUNDARY_WORD; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START: event.type = ACC.TEXT_BOUNDARY_SENTENCE; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: event.type = ACC.TEXT_BOUNDARY_SENTENCE; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START: event.type = ACC.TEXT_BOUNDARY_LINE; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: event.type = ACC.TEXT_BOUNDARY_LINE; break; ", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START: {", "-\t\t\t\t\tint wordStart1 = previousIndexOfChar (text, \" !?.\\n\", offset - 1);", "-\t\t\t\t\tif (wordStart1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tint wordStart2 = previousIndexOfNotChar (text, \" !?.\\n\", wordStart1);", "-\t\t\t\t\tif (wordStart2 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = wordStart1 + 1;", "-\t\t\t\t\tstartBounds = previousIndexOfChar (text, \" !?.\\n\", wordStart2) + 1;", "-\t\t\t\t\tbreak;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getText(event);", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: {", "-\t\t\t\t\tint wordEnd1 =previousIndexOfChar (text, \" !?.\\n\", offset);", "-\t\t\t\t\tif (wordEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\twordEnd1 = previousIndexOfNotChar (text, \" \\n\", wordEnd1 + 1);", "-\t\t\t\t\tif (wordEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = wordEnd1 + 1;", "-\t\t\t\t\tint wordEnd2 = previousIndexOfNotChar (text, \" !?.\\n\", endBounds);", "-\t\t\t\t\twordEnd2 = previousIndexOfChar (text, \" !?.\\n\", wordEnd2);", "-\t\t\t\t\tif (wordEnd2 == -1) {", "-\t\t\t\t\t\tstartBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = previousIndexOfNotChar (text, \" \\n\", wordEnd2 + 1) + 1;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START: {", "-\t\t\t\t\tint sentenceStart1 = previousIndexOfChar (text, \"!?.\", offset);", "-\t\t\t\t\tif (sentenceStart1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tint sentenceStart2 = previousIndexOfNotChar (text, \"!?.\", sentenceStart1);", "-\t\t\t\t\tif (sentenceStart2 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = sentenceStart1 + 1;", "-\t\t\t\t\tstartBounds = previousIndexOfChar (text, \"!?.\", sentenceStart2) + 1;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "-\t\t\t\t\tint sentenceEnd1 = previousIndexOfChar (text, \"!?.\", offset);", "-\t\t\t\t\tif (sentenceEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tsentenceEnd1 = previousIndexOfNotChar (text, \" \\n\", sentenceEnd1 + 1);", "-\t\t\t\t\tif (sentenceEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = sentenceEnd1 + 1;", "-\t\t\t\t\tint sentenceEnd2 = previousIndexOfNotChar (text, \"!?.\", endBounds);", "-\t\t\t\t\tsentenceEnd2 = previousIndexOfChar (text, \"!?.\", sentenceEnd2);", "-\t\t\t\t\tif (sentenceEnd2 == -1) {", "-\t\t\t\t\t\tstartBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = previousIndexOfNotChar (text, \" \\n\", sentenceEnd2 + 1) + 1;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START: {", "-\t\t\t\t\tint lineStart1 = previousIndexOfChar (text, \"\\n\", offset);", "-\t\t\t\t\tif (lineStart1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = lineStart1 + 1;", "-\t\t\t\t\tstartBounds = previousIndexOfChar (text, \"\\n\", lineStart1) + 1;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: {", "-\t\t\t\t\tint lineEnd1 = previousIndexOfChar (text, \"\\n\", offset);", "-\t\t\t\t\tif (lineEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = lineEnd1;", "-\t\t\t\t\tstartBounds = previousIndexOfChar (text, \"\\n\", lineEnd1);", "-\t\t\t\t\tif (startBounds == -1) startBounds = 0;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\t\t\tOS.memmove (start_offset, new int[] {event.start}, 4);", "+\t\t\t\tOS.memmove (end_offset, new int[] {event.end}, 4);", "+\t\t\t\treturn getStringPtr (event.result);", "-\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "-\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "-\t\t\ttext = text.substring (startBounds, endBounds);", "-\t\t\tbyte[] bytes = Converter.wcsToMbcs (null, text, true);", "-\t\t\tint /*long*/ result = OS.g_malloc (bytes.length);", "-\t\t\tOS.memmove (result, bytes, bytes.length);", "-\t\t\treturn result;", "-\t\t} ", "+\t\t\tint offset = (int)/*64*/offset_value;", "+\t\t\tString text = object.getText ();", "+\t\t\tif (text != null && text.length () > 0) {", "+\t\t\t\tlength = text.length ();", "+\t\t\t\toffset = Math.min (offset, length - 1);", "+\t\t\t\tint startBounds = offset;", "+\t\t\t\tint endBounds = offset;", "+\t\t\t\tswitch ((int)/*64*/boundary_type) {", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: {", "+\t\t\t\t\t\tif (length >= offset && offset > 0) startBounds--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START: {", "+\t\t\t\t\t\tint wordStart1 = previousIndexOfChar (text, \" !?.\\n\", offset - 1);", "+\t\t\t\t\t\tif (wordStart1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint wordStart2 = previousIndexOfNotChar (text, \" !?.\\n\", wordStart1);", "+\t\t\t\t\t\tif (wordStart2 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = wordStart1 + 1;", "+\t\t\t\t\t\tstartBounds = previousIndexOfChar (text, \" !?.\\n\", wordStart2) + 1;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: {", "+\t\t\t\t\t\tint wordEnd1 =previousIndexOfChar (text, \" !?.\\n\", offset);", "+\t\t\t\t\t\tif (wordEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\twordEnd1 = previousIndexOfNotChar (text, \" \\n\", wordEnd1 + 1);", "+\t\t\t\t\t\tif (wordEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = wordEnd1 + 1;", "+\t\t\t\t\t\tint wordEnd2 = previousIndexOfNotChar (text, \" !?.\\n\", endBounds);", "+\t\t\t\t\t\twordEnd2 = previousIndexOfChar (text, \" !?.\\n\", wordEnd2);", "+\t\t\t\t\t\tif (wordEnd2 == -1) {", "+\t\t\t\t\t\t\tstartBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = previousIndexOfNotChar (text, \" \\n\", wordEnd2 + 1) + 1;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START: {", "+\t\t\t\t\t\tint sentenceStart1 = previousIndexOfChar (text, \"!?.\", offset);", "+\t\t\t\t\t\tif (sentenceStart1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint sentenceStart2 = previousIndexOfNotChar (text, \"!?.\", sentenceStart1);", "+\t\t\t\t\t\tif (sentenceStart2 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = sentenceStart1 + 1;", "+\t\t\t\t\t\tstartBounds = previousIndexOfChar (text, \"!?.\", sentenceStart2) + 1;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "+\t\t\t\t\t\tint sentenceEnd1 = previousIndexOfChar (text, \"!?.\", offset);", "+\t\t\t\t\t\tif (sentenceEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsentenceEnd1 = previousIndexOfNotChar (text, \" \\n\", sentenceEnd1 + 1);", "+\t\t\t\t\t\tif (sentenceEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = sentenceEnd1 + 1;", "+\t\t\t\t\t\tint sentenceEnd2 = previousIndexOfNotChar (text, \"!?.\", endBounds);", "+\t\t\t\t\t\tsentenceEnd2 = previousIndexOfChar (text, \"!?.\", sentenceEnd2);", "+\t\t\t\t\t\tif (sentenceEnd2 == -1) {", "+\t\t\t\t\t\t\tstartBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = previousIndexOfNotChar (text, \" \\n\", sentenceEnd2 + 1) + 1;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START: {", "+\t\t\t\t\t\tint lineStart1 = previousIndexOfChar (text, \"\\n\", offset);", "+\t\t\t\t\t\tif (lineStart1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = lineStart1 + 1;", "+\t\t\t\t\t\tstartBounds = previousIndexOfChar (text, \"\\n\", lineStart1) + 1;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: {", "+\t\t\t\t\t\tint lineEnd1 = previousIndexOfChar (text, \"\\n\", offset);", "+\t\t\t\t\t\tif (lineEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = lineEnd1;", "+\t\t\t\t\t\tstartBounds = previousIndexOfChar (text, \"\\n\", lineEnd1);", "+\t\t\t\t\t\tif (startBounds == -1) startBounds = 0;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "+\t\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "+\t\t\t\ttext = text.substring (startBounds, endBounds);", "+\t\t\t\treturn getStringPtr (text);", "+\t\t\t}", "+\t\t}", "+\t\treturn 0;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5712b6ae5a14a199286a7bd983b791d8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 71, "signatureBeforeChange": "  \tstatic int atkText_get_text_after_offset (int atkObject, int offset_value, int boundary_type, int start_offset, int end_offset)", "signatureAfterChange": "  \tstatic int atkText_get_text_after_offset (int atkObject, int offset_value, int boundary_type, int start_offset, int end_offset)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tint offset = (int)/*64*/offset_value;", "-\t\tString text = object.getText ();", "-\t\tif (text.length () > 0) {", "-\t\t\tint length = text.length ();", "-\t\t\toffset = Math.min (offset, length - 1);", "-\t\t\tint startBounds = offset;", "-\t\t\tint endBounds = offset;", "-\t\t\tswitch ((int)/*64*/boundary_type) {", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: {", "-\t\t\t\t\tif (length > offset) endBounds++;", "-\t\t\t\t\tbreak;", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tevent.start = event.end = (int)/*64*/offset_value;", "+\t\t\t\tevent.count = 1;", "+\t\t\t\tswitch ((int)/*64*/boundary_type) {", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: event.type = ACC.TEXT_BOUNDARY_CHAR; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START: event.type = ACC.TEXT_BOUNDARY_WORD; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: event.type = ACC.TEXT_BOUNDARY_WORD; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START: event.type = ACC.TEXT_BOUNDARY_SENTENCE; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: event.type = ACC.TEXT_BOUNDARY_SENTENCE; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START: event.type = ACC.TEXT_BOUNDARY_LINE; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: event.type = ACC.TEXT_BOUNDARY_LINE; break; ", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START: {", "-\t\t\t\t\tint wordStart1 = nextIndexOfChar (text, \" !?.\\n\", offset - 1);", "-\t\t\t\t\tif (wordStart1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\twordStart1 = nextIndexOfNotChar (text, \" !?.\\n\", wordStart1);", "-\t\t\t\t\tif (wordStart1 == length) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = wordStart1;", "-\t\t\t\t\tint wordStart2 = nextIndexOfChar (text, \" !?.\\n\", wordStart1);", "-\t\t\t\t\tif (wordStart2 == -1) {", "-\t\t\t\t\t\tendBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \" !?.\\n\", wordStart2);", "-\t\t\t\t\tbreak;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getText(event);", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: {", "-\t\t\t\t\tint previousWordEnd = previousIndexOfNotChar (text, \" \\n\", offset); ", "-\t\t\t\t\tif (previousWordEnd == -1 || previousWordEnd != offset - 1) {", "-\t\t\t\t\t\toffset = nextIndexOfNotChar (text, \" \\n\", offset);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (offset == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\tOS.memmove (start_offset, new int[] {event.start}, 4);", "+\t\t\t\tOS.memmove (end_offset, new int[] {event.end}, 4);", "+\t\t\t\treturn getStringPtr (event.result);", "+\t\t\t}", "+\t\t\tint offset = (int)/*64*/offset_value;", "+\t\t\tString text = object.getText ();", "+\t\t\tif (text != null && text.length () > 0) {", "+\t\t\t\tlength = text.length ();", "+\t\t\t\toffset = Math.min (offset, length - 1);", "+\t\t\t\tint startBounds = offset;", "+\t\t\t\tint endBounds = offset;", "+\t\t\t\tswitch ((int)/*64*/boundary_type) {", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: {", "+\t\t\t\t\t\tif (length > offset) endBounds++;", "-\t\t\t\t\tint wordEnd1 = nextIndexOfChar (text, \" !?.\\n\", (int)/*64*/offset);", "-\t\t\t\t\tif (wordEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\twordEnd1 = nextIndexOfNotChar (text, \"!?.\", wordEnd1);", "-\t\t\t\t\tif (wordEnd1 == length) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = wordEnd1;", "-\t\t\t\t\tint wordEnd2 = nextIndexOfNotChar (text, \" \\n\", wordEnd1);", "-\t\t\t\t\tif (wordEnd2 == length) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\twordEnd2 = nextIndexOfChar (text, \" !?.\\n\", wordEnd2);", "-\t\t\t\t\tif (wordEnd2 == -1) {", "-\t\t\t\t\t\tendBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \"!?.\", wordEnd2);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START: {", "-\t\t\t\t\tint previousSentenceEnd = previousIndexOfChar (text, \"!?.\", offset);", "-\t\t\t\t\tint previousText = previousIndexOfNotChar (text, \" !?.\\n\", offset);", "-\t\t\t\t\tint sentenceStart1 = 0;", "-\t\t\t\t\tif (previousSentenceEnd >= previousText) {", "-\t\t\t\t\t\tsentenceStart1 = nextIndexOfNotChar (text, \" !?.\\n\", offset);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tsentenceStart1 = nextIndexOfChar (text, \"!?.\", offset);", "-\t\t\t\t\t\tif (sentenceStart1 == -1) {", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START: {", "+\t\t\t\t\t\tint wordStart1 = nextIndexOfChar (text, \" !?.\\n\", offset - 1);", "+\t\t\t\t\t\tif (wordStart1 == -1) {", "-\t\t\t\t\t\tsentenceStart1 = nextIndexOfNotChar (text, \" !?.\\n\", sentenceStart1);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (sentenceStart1 == length) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\twordStart1 = nextIndexOfNotChar (text, \" !?.\\n\", wordStart1);", "+\t\t\t\t\t\tif (wordStart1 == length) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = wordStart1;", "+\t\t\t\t\t\tint wordStart2 = nextIndexOfChar (text, \" !?.\\n\", wordStart1);", "+\t\t\t\t\t\tif (wordStart2 == -1) {", "+\t\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \" !?.\\n\", wordStart2);", "-\t\t\t\t\tstartBounds = sentenceStart1;", "-\t\t\t\t\tint sentenceStart2 = nextIndexOfChar (text, \"!?.\", sentenceStart1);", "-\t\t\t\t\tif (sentenceStart2 == -1) {", "-\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: {", "+\t\t\t\t\t\tint previousWordEnd = previousIndexOfNotChar (text, \" \\n\", offset); ", "+\t\t\t\t\t\tif (previousWordEnd == -1 || previousWordEnd != offset - 1) {", "+\t\t\t\t\t\t\toffset = nextIndexOfNotChar (text, \" \\n\", offset);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (offset == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint wordEnd1 = nextIndexOfChar (text, \" !?.\\n\", (int)/*64*/offset);", "+\t\t\t\t\t\tif (wordEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\twordEnd1 = nextIndexOfNotChar (text, \"!?.\", wordEnd1);", "+\t\t\t\t\t\tif (wordEnd1 == length) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = wordEnd1;", "+\t\t\t\t\t\tint wordEnd2 = nextIndexOfNotChar (text, \" \\n\", wordEnd1);", "+\t\t\t\t\t\tif (wordEnd2 == length) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\twordEnd2 = nextIndexOfChar (text, \" !?.\\n\", wordEnd2);", "+\t\t\t\t\t\tif (wordEnd2 == -1) {", "+\t\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \"!?.\", wordEnd2);", "-\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \" !?.\\n\", sentenceStart2);", "-\t\t\t\t\tbreak;", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START: {", "+\t\t\t\t\t\tint previousSentenceEnd = previousIndexOfChar (text, \"!?.\", offset);", "+\t\t\t\t\t\tint previousText = previousIndexOfNotChar (text, \" !?.\\n\", offset);", "+\t\t\t\t\t\tint sentenceStart1 = 0;", "+\t\t\t\t\t\tif (previousSentenceEnd >= previousText) {", "+\t\t\t\t\t\t\tsentenceStart1 = nextIndexOfNotChar (text, \" !?.\\n\", offset);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tsentenceStart1 = nextIndexOfChar (text, \"!?.\", offset);", "+\t\t\t\t\t\t\tif (sentenceStart1 == -1) {", "+\t\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tsentenceStart1 = nextIndexOfNotChar (text, \" !?.\\n\", sentenceStart1);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (sentenceStart1 == length) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = sentenceStart1;", "+\t\t\t\t\t\tint sentenceStart2 = nextIndexOfChar (text, \"!?.\", sentenceStart1);", "+\t\t\t\t\t\tif (sentenceStart2 == -1) {", "+\t\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \" !?.\\n\", sentenceStart2);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "+\t\t\t\t\t\tint sentenceEnd1 = nextIndexOfChar (text, \"!?.\", offset);", "+\t\t\t\t\t\tif (sentenceEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsentenceEnd1 = nextIndexOfNotChar (text, \"!?.\", sentenceEnd1);", "+\t\t\t\t\t\tif (sentenceEnd1 == length) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = sentenceEnd1;", "+\t\t\t\t\t\tint sentenceEnd2 = nextIndexOfNotChar (text, \" \\n\", sentenceEnd1);", "+\t\t\t\t\t\tif (sentenceEnd2 == length) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsentenceEnd2 = nextIndexOfChar (text, \"!?.\", sentenceEnd2);", "+\t\t\t\t\t\tif (sentenceEnd2 == -1) {", "+\t\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \"!?.\", sentenceEnd2);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START: {", "+\t\t\t\t\t\tint lineStart1 = text.indexOf ('\\n', offset - 1);", "+\t\t\t\t\t\tif (lineStart1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlineStart1 = nextIndexOfNotChar (text, \"\\n\", lineStart1);", "+\t\t\t\t\t\tif (lineStart1 == length) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = lineStart1;", "+\t\t\t\t\t\tint lineStart2 = text.indexOf ('\\n', lineStart1);", "+\t\t\t\t\t\tif (lineStart2 == -1) {", "+\t\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tlineStart2 = nextIndexOfNotChar (text, \"\\n\", lineStart2);", "+\t\t\t\t\t\tendBounds = lineStart2;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: {", "+\t\t\t\t\t\tint lineEnd1 = nextIndexOfChar (text, \"\\n\", offset);", "+\t\t\t\t\t\tif (lineEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = lineEnd1;", "+\t\t\t\t\t\tif (startBounds == length) {", "+\t\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint lineEnd2 = nextIndexOfChar (text, \"\\n\", lineEnd1 + 1);", "+\t\t\t\t\t\tif (lineEnd2 == -1) {", "+\t\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = lineEnd2;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "-\t\t\t\t\tint sentenceEnd1 = nextIndexOfChar (text, \"!?.\", offset);", "-\t\t\t\t\tif (sentenceEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tsentenceEnd1 = nextIndexOfNotChar (text, \"!?.\", sentenceEnd1);", "-\t\t\t\t\tif (sentenceEnd1 == length) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = sentenceEnd1;", "-\t\t\t\t\tint sentenceEnd2 = nextIndexOfNotChar (text, \" \\n\", sentenceEnd1);", "-\t\t\t\t\tif (sentenceEnd2 == length) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tsentenceEnd2 = nextIndexOfChar (text, \"!?.\", sentenceEnd2);", "-\t\t\t\t\tif (sentenceEnd2 == -1) {", "-\t\t\t\t\t\tendBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \"!?.\", sentenceEnd2);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START: {", "-\t\t\t\t\tint lineStart1 = text.indexOf ('\\n', offset - 1);", "-\t\t\t\t\tif (lineStart1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tlineStart1 = nextIndexOfNotChar (text, \"\\n\", lineStart1);", "-\t\t\t\t\tif (lineStart1 == length) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = lineStart1;", "-\t\t\t\t\tint lineStart2 = text.indexOf ('\\n', lineStart1);", "-\t\t\t\t\tif (lineStart2 == -1) {", "-\t\t\t\t\t\tendBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tlineStart2 = nextIndexOfNotChar (text, \"\\n\", lineStart2);", "-\t\t\t\t\tendBounds = lineStart2;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: {", "-\t\t\t\t\tint lineEnd1 = nextIndexOfChar (text, \"\\n\", offset);", "-\t\t\t\t\tif (lineEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = lineEnd1;", "-\t\t\t\t\tif (startBounds == length) {", "-\t\t\t\t\t\tendBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tint lineEnd2 = nextIndexOfChar (text, \"\\n\", lineEnd1 + 1);", "-\t\t\t\t\tif (lineEnd2 == -1) {", "-\t\t\t\t\t\tendBounds = length;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = lineEnd2;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "-\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "-\t\t\ttext = text.substring (startBounds, endBounds);", "-\t\t\tbyte[] bytes = Converter.wcsToMbcs (null, text, true);", "-\t\t\tint /*long*/ result = OS.g_malloc (bytes.length);", "-\t\t\tOS.memmove (result, bytes, bytes.length);", "-\t\t\treturn result;", "-\t\t} ", "+\t\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "+\t\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "+\t\t\t\ttext = text.substring (startBounds, endBounds);", "+\t\t\t\treturn getStringPtr (text);", "+\t\t\t} ", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54f26962517239ed562c752faeefcbc5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 72, "signatureBeforeChange": "  \tstatic int atkText_get_text_at_offset (int atkObject, int offset_value, int boundary_type, int start_offset, int end_offset)", "signatureAfterChange": "  \tstatic int atkText_get_text_at_offset (int atkObject, int offset_value, int boundary_type, int start_offset, int end_offset)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tint offset = (int)/*64*/offset_value;", "-\t\tString text = object.getText ();", "-\t\tif (text.length () > 0) {", "-\t\t\tint length = text.length ();", "-\t\t\toffset = Math.min (offset, length - 1);", "-\t\t\tint startBounds = offset;", "-\t\t\tint endBounds = offset;", "-\t\t\tswitch ((int)/*64*/boundary_type) {", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: {", "-\t\t\t\t\tif (length > offset) endBounds++;", "-\t\t\t\t\tbreak;", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tevent.start = event.end = (int)/*64*/offset_value;", "+\t\t\t\tevent.count = 0;", "+\t\t\t\tswitch ((int)/*64*/boundary_type) {", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: event.type = ACC.TEXT_BOUNDARY_CHAR; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START: event.type = ACC.TEXT_BOUNDARY_WORD; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: event.type = ACC.TEXT_BOUNDARY_WORD; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START: event.type = ACC.TEXT_BOUNDARY_SENTENCE; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: event.type = ACC.TEXT_BOUNDARY_SENTENCE; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START: event.type = ACC.TEXT_BOUNDARY_LINE; break; ", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: event.type = ACC.TEXT_BOUNDARY_LINE; break; ", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START: {", "-\t\t\t\t\tint wordStart1 = previousIndexOfNotChar (text, \" !?.\\n\", offset);", "-\t\t\t\t\tif (wordStart1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\twordStart1 = previousIndexOfChar (text, \" !?.\\n\", wordStart1) + 1;", "-\t\t\t\t\tif (wordStart1 == -1) {", "-\t\t\t\t\t\tstartBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = wordStart1;", "-\t\t\t\t\tint wordStart2 = nextIndexOfChar (text, \" !?.\\n\", wordStart1);", "-\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \" !?.\\n\", wordStart2);", "-\t\t\t\t\tbreak;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getText(event);", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: {", "-\t\t\t\t\tint wordEnd1 = previousIndexOfNotChar (text, \"!?.\", offset + 1);", "-\t\t\t\t\twordEnd1 = previousIndexOfChar (text, \" !?.\\n\", wordEnd1);", "-\t\t\t\t\twordEnd1 = previousIndexOfNotChar (text, \" \\n\", wordEnd1 + 1);", "-\t\t\t\t\tif (wordEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = wordEnd1 + 1;", "-\t\t\t\t\tint wordEnd2 = nextIndexOfNotChar (text, \" \\n\", startBounds);", "-\t\t\t\t\tif (wordEnd2 == length) {", "-\t\t\t\t\t\tendBounds = startBounds;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\twordEnd2 = nextIndexOfChar (text, \" !?.\\n\", wordEnd2);", "-\t\t\t\t\tif (wordEnd2 == -1) {", "-\t\t\t\t\t\tendBounds = startBounds;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \"!?.\", wordEnd2);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START: {", "-\t\t\t\t\tint sentenceStart1 = previousIndexOfNotChar (text, \" !?.\\n\", offset + 1);", "-\t\t\t\t\tif (sentenceStart1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tsentenceStart1 = previousIndexOfChar (text, \"!?.\", sentenceStart1) + 1;", "-\t\t\t\t\tstartBounds = nextIndexOfNotChar (text, \" \\n\", sentenceStart1);", "-\t\t\t\t\tint sentenceStart2 = nextIndexOfChar (text, \"!?.\", startBounds);", "-\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \" !?.\\n\", sentenceStart2);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "-\t\t\t\t\tint sentenceEnd1 = previousIndexOfNotChar (text, \"!?.\", offset + 1);", "-\t\t\t\t\tsentenceEnd1 = previousIndexOfChar (text, \"!?.\", sentenceEnd1);", "-\t\t\t\t\tsentenceEnd1 = previousIndexOfNotChar (text, \" \\n\", sentenceEnd1 + 1);", "-\t\t\t\t\tif (sentenceEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = sentenceEnd1 + 1;", "-\t\t\t\t\tint sentenceEnd2 = nextIndexOfNotChar (text, \" \\n\", startBounds);", "-\t\t\t\t\tif (sentenceEnd2 == length) {", "-\t\t\t\t\t\tendBounds = startBounds;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tsentenceEnd2 = nextIndexOfChar (text, \"!?.\", sentenceEnd2);", "-\t\t\t\t\tif (sentenceEnd2 == -1) {", "-\t\t\t\t\t\tendBounds = startBounds;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \"!?.\", sentenceEnd2);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START: {", "-\t\t\t\t\tstartBounds = previousIndexOfChar (text, \"\\n\", offset) + 1;", "-\t\t\t\t\tint lineEnd2 = nextIndexOfChar (text, \"\\n\", startBounds);", "-\t\t\t\t\tif (lineEnd2 < length) lineEnd2++;", "-\t\t\t\t\tendBounds = lineEnd2;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: {", "-\t\t\t\t\tint lineEnd1 = previousIndexOfChar (text, \"\\n\", offset);", "-\t\t\t\t\tif (lineEnd1 == -1) {", "-\t\t\t\t\t\tstartBounds = endBounds = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tstartBounds = lineEnd1;", "-\t\t\t\t\tendBounds = nextIndexOfChar (text, \"\\n\", lineEnd1 + 1);", "-\t\t\t\t}", "+\t\t\t\tOS.memmove (start_offset, new int[] {event.start}, 4);", "+\t\t\t\tOS.memmove (end_offset, new int[] {event.end}, 4);", "+\t\t\t\treturn getStringPtr (event.result);", "-\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "-\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "-\t\t\ttext = text.substring (startBounds, endBounds);", "-\t\t\tbyte[] bytes = Converter.wcsToMbcs (null, text, true);", "-\t\t\tint /*long*/ result = OS.g_malloc (bytes.length);", "-\t\t\tOS.memmove (result, bytes, bytes.length);", "-\t\t\treturn result;", "-\t\t} ", "+\t\t\tint offset = (int)/*64*/offset_value;", "+\t\t\tString text = object.getText ();", "+\t\t\tif (text != null && text.length () > 0) {", "+\t\t\t\tlength = text.length ();", "+\t\t\t\toffset = Math.min (offset, length - 1);", "+\t\t\t\tint startBounds = offset;", "+\t\t\t\tint endBounds = offset;", "+\t\t\t\tswitch ((int)/*64*/boundary_type) {", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: {", "+\t\t\t\t\t\tif (length > offset) endBounds++;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START: {", "+\t\t\t\t\t\tint wordStart1 = previousIndexOfNotChar (text, \" !?.\\n\", offset);", "+\t\t\t\t\t\tif (wordStart1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\twordStart1 = previousIndexOfChar (text, \" !?.\\n\", wordStart1) + 1;", "+\t\t\t\t\t\tif (wordStart1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = wordStart1;", "+\t\t\t\t\t\tint wordStart2 = nextIndexOfChar (text, \" !?.\\n\", wordStart1);", "+\t\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \" !?.\\n\", wordStart2);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: {", "+\t\t\t\t\t\tint wordEnd1 = previousIndexOfNotChar (text, \"!?.\", offset + 1);", "+\t\t\t\t\t\twordEnd1 = previousIndexOfChar (text, \" !?.\\n\", wordEnd1);", "+\t\t\t\t\t\twordEnd1 = previousIndexOfNotChar (text, \" \\n\", wordEnd1 + 1);", "+\t\t\t\t\t\tif (wordEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = wordEnd1 + 1;", "+\t\t\t\t\t\tint wordEnd2 = nextIndexOfNotChar (text, \" \\n\", startBounds);", "+\t\t\t\t\t\tif (wordEnd2 == length) {", "+\t\t\t\t\t\t\tendBounds = startBounds;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\twordEnd2 = nextIndexOfChar (text, \" !?.\\n\", wordEnd2);", "+\t\t\t\t\t\tif (wordEnd2 == -1) {", "+\t\t\t\t\t\t\tendBounds = startBounds;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \"!?.\", wordEnd2);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START: {", "+\t\t\t\t\t\tint sentenceStart1 = previousIndexOfNotChar (text, \" !?.\\n\", offset + 1);", "+\t\t\t\t\t\tif (sentenceStart1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsentenceStart1 = previousIndexOfChar (text, \"!?.\", sentenceStart1) + 1;", "+\t\t\t\t\t\tstartBounds = nextIndexOfNotChar (text, \" \\n\", sentenceStart1);", "+\t\t\t\t\t\tint sentenceStart2 = nextIndexOfChar (text, \"!?.\", startBounds);", "+\t\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \" !?.\\n\", sentenceStart2);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "+\t\t\t\t\t\tint sentenceEnd1 = previousIndexOfNotChar (text, \"!?.\", offset + 1);", "+\t\t\t\t\t\tsentenceEnd1 = previousIndexOfChar (text, \"!?.\", sentenceEnd1);", "+\t\t\t\t\t\tsentenceEnd1 = previousIndexOfNotChar (text, \" \\n\", sentenceEnd1 + 1);", "+\t\t\t\t\t\tif (sentenceEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = sentenceEnd1 + 1;", "+\t\t\t\t\t\tint sentenceEnd2 = nextIndexOfNotChar (text, \" \\n\", startBounds);", "+\t\t\t\t\t\tif (sentenceEnd2 == length) {", "+\t\t\t\t\t\t\tendBounds = startBounds;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsentenceEnd2 = nextIndexOfChar (text, \"!?.\", sentenceEnd2);", "+\t\t\t\t\t\tif (sentenceEnd2 == -1) {", "+\t\t\t\t\t\t\tendBounds = startBounds;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \"!?.\", sentenceEnd2);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START: {", "+\t\t\t\t\t\tstartBounds = previousIndexOfChar (text, \"\\n\", offset) + 1;", "+\t\t\t\t\t\tint lineEnd2 = nextIndexOfChar (text, \"\\n\", startBounds);", "+\t\t\t\t\t\tif (lineEnd2 < length) lineEnd2++;", "+\t\t\t\t\t\tendBounds = lineEnd2;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: {", "+\t\t\t\t\t\tint lineEnd1 = previousIndexOfChar (text, \"\\n\", offset);", "+\t\t\t\t\t\tif (lineEnd1 == -1) {", "+\t\t\t\t\t\t\tstartBounds = endBounds = 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstartBounds = lineEnd1;", "+\t\t\t\t\t\tendBounds = nextIndexOfChar (text, \"\\n\", lineEnd1 + 1);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "+\t\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "+\t\t\t\ttext = text.substring (startBounds, endBounds);", "+\t\t\t\treturn getStringPtr (text);", "+\t\t\t} ", "+\t\t}"]}], "num": 17048}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fc67dc0181c0b0870399b4422735361", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3df8a9c9a000007038f208df91fe012", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "5279fb43a214afc43b3c9cdcd1dfd93d23a5a5bd", "commitAfterChange": "d94d01b4d71bbf5e85d7f9e44c609b877ecde200", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  LRESULT CDDS_SUBITEMPREPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_SUBITEMPREPAINT (int wParam, int lParam)", "diff": ["-\t* Feature in Windows.  When the font is set for one cell in a table,", "-\t* Windows does not reset the font for the next cell.  As a result,", "-\t* all subsequent cells are drawn using the new font.  The fix is to", "-\t* reset the font to the default.", "-\t* ", "-\t* NOTE: This does not happen for foreground and background.", "+\t* Bug in Windows.  When the attibutes are for one cell in a table,", "+\t* Windows does not reset them for the next cell.  As a result, all", "+\t* subsequent cells are drawn using the previous font, foreground and", "+\t* background colors.  The fix is to set the all attributes when any", "+\t* attribute could have changed.", "-\t\t\tif (columnCount == 1) hasAttributes = false;", "+\t\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\tif (count == 1) hasAttributes = false;", "-\t\t\t\tif (control.backgroundImage == null && !hooks (SWT.EraseItem)) {", "-\t\t\t\t\tnmcd.clrTextBk = control.getBackgroundPixel ();", "-\t\t\t\t}", "+\t\t\t\tnmcd.clrTextBk  = control.backgroundImage == null ? control.getBackgroundPixel () : OS.CLR_NONE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81f744f39fe7e28c9a1292ea134bb3e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "03e23cf4c81d13094d1e2c6633bcf96224d8fef7", "commitAfterChange": "863121f0640947eb492912796128b0819e60eeef", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tsuper.createHandle ();", "+\t/*", "+\t* Feature in Windows.  When the selection changes in a combo box,", "+\t* Windows draws the selection, even when the combo box does not", "+\t* have focus.  Strictly speaking, this is the correct Windows", "+\t* behavior because the combo box sets ES_NOHIDESEL on the text", "+\t* control that it creates.  Despite this, it looks strange because", "+\t* Windows also clears the selection and selects all the text when", "+\t* the combo box gets focus.  The fix is use the CBT hook to clear", "+\t* the ES_NOHIDESEL style bit when the text control is created.", "+\t*/", "+\tif (OS.IsWinCE || (style & (SWT.READ_ONLY | SWT.SIMPLE)) != 0) {", "+\t\tsuper.createHandle ();", "+\t} else {", "+\t\tint threadId = OS.GetCurrentThreadId ();", "+\t\tCallback cbtCallback = new Callback (this, \"CBTProc\", 3); //$NON-NLS-1$", "+\t\tint cbtProc = cbtCallback.getAddress ();", "+\t\tif (cbtProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tint cbtHook = OS.SetWindowsHookEx (OS.WH_CBT, cbtProc, 0, threadId);", "+\t\tsuper.createHandle ();", "+\t\tif (cbtHook != 0) OS.UnhookWindowsHookEx (cbtHook);", "+\t\tcbtCallback.dispose ();", "+\t}"]}], "num": 16972}
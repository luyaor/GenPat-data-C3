{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "480ca248c518395bdc6bb9846369103e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc2f93b0e30555910a401788cad5ca94", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "19a3ddd19fed46a429f6c36f8cac59dd43f727f3", "commitAfterChange": "babefdbe16d76e76e5ebaa7f5314f9033a6ac58c", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  boolean doCommandBySelector (int id, int sel, int selector)", "signatureAfterChange": "  void doCommandBySelector (int id, int sel, int selector)", "diff": ["-boolean doCommandBySelector (int /*long*/ id, int /*long*/ sel, int /*long*/ selector) {", "+void doCommandBySelector (int /*long*/ id, int /*long*/ sel, int /*long*/ selector) {", "-\t\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return false;", "-\t\t\tif (isDisposed ()) return false;", "-\t\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return false;", "-\t\t\tif (consume [0]) return false;", "+\t\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return;", "+\t\t\tif (isDisposed ()) return;", "+\t\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return;", "+\t\t\tif (consume [0]) return;", "-\t\tif ((state & CANVAS) != 0) return true;", "+\t\tif ((state & CANVAS) != 0) return;", "-\treturn super.doCommandBySelector (id, sel, selector);", "+\tsuper.doCommandBySelector (id, sel, selector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ba9c88641368e4bf6ca855dceecffe3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "fc8b4b1d665c300460078e3661baa1d3a5329d01", "commitAfterChange": "a0c8a0ee053daa27480af496dfe5071f5dddc909", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  void keyDown (int id, int sel, int theEvent)", "signatureAfterChange": "  void keyDown (int id, int sel, int theEvent)", "diff": ["-\tDisplay display = this.display;", "-\tdisplay.keyInputHappened = false;", "+\t\tShell s = this.getShell();", "+\t\ts.keyInputHappened = false;", "+\t\t\t// Not a text field, so send a key event here.", "-\t\t\tdisplay.keyInputHappened = true;", "+\t\t} else {", "+\t\t\t// Control is some kind of text field, so the key event will be sent from insertText: or doCommandBySelector:", "+\t\t\tsuper.keyDown (id, sel, theEvent);", "+\t\t\t", "+\t\t\t// If none of those methods triggered a key event send one now.", "+\t\t\tif (!s.keyInputHappened) {", "+\t\t\t\tNSEvent nsEvent = new NSEvent (theEvent);", "+\t\t\t\tboolean [] consume = new boolean [1];", "+\t\t\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return;", "+\t\t\t\tif (isDisposed ()) return;", "+\t\t\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return;", "+\t\t\t\tif (consume [0]) return;", "+\t\t\t}", "+\t\t\t", "+\t\t\treturn;", "-\t", "-\tif (!display.keyInputHappened) {", "-\t\tNSEvent nsEvent = new NSEvent (theEvent);", "-\t\tif (isDisposed ()) return;", "-\t\tsendKeyEvent (nsEvent, SWT.KeyDown);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2906cf27e907c0ab78cdbcd131e0f458", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "50b584631690d5c2c8ad5fdd401f2599d4e81bd7", "commitAfterChange": "ebb464b79e37bf70ef4074a7175a560768482510", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  boolean doCommandBySelector (int id, int sel, int selector)", "signatureAfterChange": "  boolean doCommandBySelector (int id, int sel, int selector)", "diff": ["-\tNSEvent nsEvent = NSApplication.sharedApplication ().currentEvent ();", "-\tif (nsEvent != null && nsEvent.type () == OS.NSKeyDown) {", "-\t\tboolean [] consume = new boolean [1];", "-\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return false;", "-\t\tif (isDisposed ()) return false;", "-\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return false;", "-\t\tif (consume [0]) return false;", "+\tif (view.window ().firstResponder ().id == id) {", "+\t\tNSEvent nsEvent = NSApplication.sharedApplication ().currentEvent ();", "+\t\tif (nsEvent != null && nsEvent.type () == OS.NSKeyDown) {", "+\t\t\tboolean [] consume = new boolean [1];", "+\t\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return false;", "+\t\t\tif (isDisposed ()) return false;", "+\t\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return false;", "+\t\t\tif (consume [0]) return false;", "+\t\t}", "+\t\tif ((state & CANVAS) != 0) return true;", "-\tif ((state & CANVAS) == 0) {", "-\t\treturn super.doCommandBySelector (id, sel, selector);", "-\t}", "-\treturn true;", "+\treturn super.doCommandBySelector (id, sel, selector);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4648d7f898c2a6c4ab4444c563cf27c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ccb3f7f0e08a5a4dde44acb96c8dac1d9f1ae48a", "commitAfterChange": "46122b3930811494ac5f7b01c7dfcc2d7b0f32a3", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  void doCommandBySelector (int id, int sel, int selector)", "signatureAfterChange": "  void doCommandBySelector (int id, int sel, int selector)", "diff": ["-\t\t\t// TODO is this workaround ok?", "-\t\t\t * multiple events for these keys, do not send a KeyDown if the", "-\t\t\t * selector is moveToBeginningOfParagraph or moveToEndOfParagraph.", "+\t\t\t * multiple events for these keys, do not send a KeyDown if we already sent one", "+\t\t\t * during this keystroke. ", "-\t\t\tif (selector == OS.sel_moveToBeginningOfParagraph_|| selector == OS.sel_moveToEndOfParagraph_) return;", "-", "-\t\t\tboolean [] consume = new boolean [1];", "-\t\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return;", "-\t\t\tif (isDisposed ()) return;", "-\t\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return;", "-\t\t\tif (consume [0]) return;", "+\t\t\tif (keyInputHappened == false) {", "+\t\t\t\tkeyInputHappened = true;", "+\t\t\t\tboolean [] consume = new boolean [1];", "+\t\t\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return;", "+\t\t\t\tif (isDisposed ()) return;", "+\t\t\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return;", "+\t\t\t\tif (consume [0]) return;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bb0d4c774760d1bc8b80b9316f28b30", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "1f489e59974b4a9250c42dc4fa2e314235083be7", "commitAfterChange": "38a4564f45bb94d6fbc14b05cd8ef1c7922c4ac2", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void keyDown (int id, int sel, int theEvent)", "signatureAfterChange": "  void keyDown (int id, int sel, int theEvent)", "diff": ["-\tif ((state & CANVAS) != 0) {", "-\t\tNSArray array = NSArray.arrayWithObject (new NSEvent (theEvent));", "-\t\tkeyInputHappened = false;", "-\t\tview.interpretKeyEvents (array);", "-\t\tif (!keyInputHappened) {", "-\t\t\tNSEvent nsEvent = new NSEvent (theEvent);", "-\t\t\tboolean [] consume = new boolean [1];", "-\t\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return;", "-\t\t\tif (isDisposed ()) return;", "-\t\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return;", "-\t\t\tif (consume [0]) return;", "+\tif (view.window ().firstResponder ().id == id) {", "+\t\tif ((state & CANVAS) != 0) {", "+\t\t\tNSArray array = NSArray.arrayWithObject (new NSEvent (theEvent));", "+\t\t\tkeyInputHappened = false;", "+\t\t\tview.interpretKeyEvents (array);", "+\t\t\tif (!keyInputHappened) {", "+\t\t\t\tNSEvent nsEvent = new NSEvent (theEvent);", "+\t\t\t\tboolean [] consume = new boolean [1];", "+\t\t\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return;", "+\t\t\t\tif (isDisposed ()) return;", "+\t\t\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return;", "+\t\t\t\tif (consume [0]) return;", "+\t\t\t}", "+\t\t\treturn;", "-\t\treturn;"]}], "num": 50267}
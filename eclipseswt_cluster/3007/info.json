{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a190dc9da2fe41c84ae8e6db3902e51f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a567673af09170dcfecf09d6aa886734", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public Tree2 (Composite parent, int style)", "signatureAfterChange": " public Tree2(Composite parent, int style)", "diff": ["-", "-public Tree2 (Composite parent, int style) {", "-\tsuper (parent, checkStyle (style | SWT.H_SCROLL | SWT.V_SCROLL | SWT.NO_REDRAW_RESIZE));", "-\tDisplay display = getDisplay ();", "-\tsetForeground (display.getSystemColor (SWT.COLOR_LIST_FOREGROUND));", "-\tsetBackground (display.getSystemColor (SWT.COLOR_LIST_BACKGROUND));", "-\tGC gc = new GC (this);", "-\tfontHeight = gc.getFontMetrics ().getHeight ();", "-\tgc.dispose ();", "-\titemHeight = fontHeight + (2 * getCellPadding ());", "-\tif (LineColor == null) {", "-\t\tLineColor = display.getSystemColor (SWT.COLOR_BLACK);", "-\t\tHighlightShadowColor = display.getSystemColor (SWT.COLOR_WIDGET_HIGHLIGHT_SHADOW);", "-\t\tNormalShadowColor = display.getSystemColor (SWT.COLOR_WIDGET_NORMAL_SHADOW);", "-\t\tResizeCursor = display.getSystemCursor (SWT.CURSOR_SIZEWE);", "-\tListener listener = new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\thandleEvents (event);", "+ */", "+public Tree2(Composite parent, int style) {", "+\tsuper(parent, checkStyle (style));", "+\tCONNECTOR_LINE_COLOR = new Color(display, 170, 170, 170);\t// Light gray;", "+}", "-\t};", "-\taddListener (SWT.Paint, listener);", "-\taddListener (SWT.MouseDown, listener);", "-\taddListener (SWT.MouseUp, listener);", "-\taddListener (SWT.MouseDoubleClick, listener);", "-\taddListener (SWT.Dispose, listener);\t", "-\taddListener (SWT.Resize, listener);", "-\taddListener (SWT.KeyDown, listener);", "-\taddListener (SWT.FocusOut, listener);", "-\taddListener (SWT.FocusIn, listener);", "-\taddListener (SWT.Traverse, listener);", "-\theader = new Canvas (this, SWT.NO_REDRAW_RESIZE | SWT.NO_FOCUS);", "-\theader.setVisible (false);", "-\theader.setLocation (0,0);", "-\theader.addListener (SWT.Paint, listener);", "-\theader.addListener (SWT.MouseDown, listener);", "-\theader.addListener (SWT.MouseUp, listener);", "-\theader.addListener (SWT.MouseMove, listener);", "-\theader.addListener (SWT.MouseExit, listener);", "-", "-\tScrollBar vBar = getVerticalBar ();", "-\tvBar.setMaximum (1);", "-\tvBar.addListener (SWT.Selection, listener);", "-\tScrollBar hBar = getHorizontalBar ();", "-\thBar.addListener (SWT.Selection, listener);", "-\thBar.setMaximum (1);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f755ff0d91edf956736acc1d02115e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "927bee3c0babae659ca291b20dd1146357b6edc3", "commitAfterChange": "1f877493a0233d9a91b99a868c482a5ee0e404c2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public DateTime (Composite parent, int style)", "signatureAfterChange": " public DateTime (Composite parent, int style)", "diff": ["-\t\tcalendar = Calendar.getInstance();", "-\t\tformatSymbols = new DateFormatSymbols();", "-\t\ttext = new Text(this, SWT.SINGLE);", "-\t\t/* disable the native drag and drop for the date/time text field */", "-\t\tOS.gtk_drag_dest_unset(text.handle);", "-\t\tif ((this.style & SWT.DATE) != 0) {", "-\t\t\tsetFormat((this.style & SWT.SHORT) != 0 ? DEFAULT_SHORT_DATE_FORMAT : (this.style & SWT.LONG) != 0 ? DEFAULT_LONG_DATE_FORMAT : DEFAULT_MEDIUM_DATE_FORMAT);", "-\t\t} else { // SWT.TIME", "-\t\t\tsetFormat((this.style & SWT.SHORT) != 0 ? DEFAULT_SHORT_TIME_FORMAT : (this.style & SWT.LONG) != 0 ? DEFAULT_LONG_TIME_FORMAT : DEFAULT_MEDIUM_TIME_FORMAT);", "+\t\tcreateText((this.style & SWT.DROP_DOWN) != 0);", "+\t}", "+\tinitAccessible ();", "+}", "-\t\ttext.setText(getFormattedString(this.style));", "-\t\tListener listener = new Listener() {", "-\t\t\tpublic void handleEvent(Event event) {", "-\t\t\t\tswitch(event.type) {", "-\t\t\t\t\tcase SWT.KeyDown: onKeyDown(event); break;", "-\t\t\t\t\tcase SWT.FocusIn: onFocusIn(event); break;", "-\t\t\t\t\tcase SWT.FocusOut: onFocusOut(event); break;", "-\t\t\t\t\tcase SWT.MouseDown: onMouseClick(event); break;", "-\t\t\t\t\tcase SWT.MouseUp: onMouseClick(event); break;", "-\t\t\t\t\tcase SWT.Verify: onVerify(event); break;", "-\t\t\t\t}", "-\t\t};", "-\t\ttext.addListener(SWT.KeyDown, listener);", "-\t\ttext.addListener(SWT.FocusIn, listener);", "-\t\ttext.addListener(SWT.FocusOut, listener);", "-\t\ttext.addListener(SWT.MouseDown, listener);", "-\t\ttext.addListener(SWT.MouseUp, listener);", "-\t\ttext.addListener(SWT.Verify, listener);", "-\t\taddListener(SWT.Resize, new Listener() {", "-\t\t\tpublic void handleEvent(Event event) {", "-\t\t\t\tonResize(event);", "-\t\t\t}", "-\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64990aa500d8ed57dd105edee798d4f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "7742fa8997652dbfdc64a471dfaf1c221b9bf26e", "commitAfterChange": "7d75e7ceefc7de5bbd8f0f302b0814668b4f3922", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public DateTime (Composite parent, int style)", "signatureAfterChange": " public DateTime (Composite parent, int style)", "diff": ["-\t\tcalendar = Calendar.getInstance();", "-\t\tformatSymbols = new DateFormatSymbols();", "-\t\ttext = new Text(this, SWT.SINGLE);", "-\t\t/* disable the native drag and drop for the date/time text field */", "-\t\tOS.gtk_drag_dest_unset(text.handle);", "-\t\tif ((this.style & SWT.DATE) != 0) {", "-\t\t\tsetFormat((this.style & SWT.SHORT) != 0 ? DEFAULT_SHORT_DATE_FORMAT : (this.style & SWT.LONG) != 0 ? DEFAULT_LONG_DATE_FORMAT : DEFAULT_MEDIUM_DATE_FORMAT);", "-\t\t} else { // SWT.TIME", "-\t\t\tsetFormat((this.style & SWT.SHORT) != 0 ? DEFAULT_SHORT_TIME_FORMAT : (this.style & SWT.LONG) != 0 ? DEFAULT_LONG_TIME_FORMAT : DEFAULT_MEDIUM_TIME_FORMAT);", "+\t\tcreateText((this.style & SWT.DROP_DOWN) != 0);", "+\t}", "+\tinitAccessible ();", "+}", "-\t\ttext.setText(getFormattedString(this.style));", "-\t\tListener listener = new Listener() {", "-\t\t\tpublic void handleEvent(Event event) {", "-\t\t\t\tswitch(event.type) {", "-\t\t\t\t\tcase SWT.KeyDown: onKeyDown(event); break;", "-\t\t\t\t\tcase SWT.FocusIn: onFocusIn(event); break;", "-\t\t\t\t\tcase SWT.FocusOut: onFocusOut(event); break;", "-\t\t\t\t\tcase SWT.MouseDown: onMouseClick(event); break;", "-\t\t\t\t\tcase SWT.MouseUp: onMouseClick(event); break;", "-\t\t\t\t\tcase SWT.Verify: onVerify(event); break;", "-\t\t\t\t}", "-\t\t};", "-\t\ttext.addListener(SWT.KeyDown, listener);", "-\t\ttext.addListener(SWT.FocusIn, listener);", "-\t\ttext.addListener(SWT.FocusOut, listener);", "-\t\ttext.addListener(SWT.MouseDown, listener);", "-\t\ttext.addListener(SWT.MouseUp, listener);", "-\t\ttext.addListener(SWT.Verify, listener);", "-\t\taddListener(SWT.Resize, new Listener() {", "-\t\t\tpublic void handleEvent(Event event) {", "-\t\t\t\tonResize(event);", "-\t\t\t}", "-\t\t});"]}], "num": 3007}
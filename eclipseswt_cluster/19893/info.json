{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86b97cd67c91d7b6cc21d01f8f54c53a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab43d3b5c016e08aff1283a14e54516b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 426, "methodNumberAfterChange": 294, "signatureBeforeChange": " public void setStyleRange(StyleRange range)", "signatureAfterChange": " public void setStyleRange(StyleRange range)", "diff": ["-\t", "-\t// this API can not be used if the client is providing the line styles", "-\tif (userLineStyle) {", "-\t\treturn;", "-\t}", "- \t// check the range, make sure it falls within the range of the text ", "-\tif (range != null && range.start + range.length > content.getCharCount()) {", "-\t\tSWT.error(SWT.ERROR_INVALID_RANGE);", "-\t} \t", "-\tdefaultLineStyler.setStyleRange(range);", "+\tif (isListening(LineGetStyle)) return;", "-\t\tint firstLine = content.getLineAtOffset(range.start);", "-\t\tint lastLine = content.getLineAtOffset(range.start + range.length);", "-\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "-", "-\t\t// if the style is not visible, there is no need to redraw", "-\t\tif (isAreaVisible(firstLine, lastLine)) {", "-\t\t\tint redrawY = firstLine * lineHeight - verticalScrollOffset;", "-\t\t\tint redrawStopY = (lastLine + 1) * lineHeight - verticalScrollOffset;\t\t", "-\t\t\tdraw(0, redrawY, getClientArea().width, redrawStopY - redrawY, true);", "-\t\t}", "+\t\tsetStyleRanges(range.start, 0, null, new StyleRange[]{range}, false);", "-\t\t// clearing all styles", "-\t\tlineCache.reset(0, content.getLineCount(), false);", "-\t\tredraw();", "+\t\tsetStyleRanges(0, 0, null, null, true);", "-\t", "-\t// make sure that the caret is positioned correctly.", "-\t// caret location may change if font style changes.", "-\t// fixes 1G8FODP", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b013a8aa0df85a8d66bf3fbc93d7c64", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "60a9b0215b046632b51b65b9dcf0569516e0686e", "commitAfterChange": "610b674161bbe6c03029856ff3ee4570430b9973", "methodNumberBeforeChange": 239, "methodNumberAfterChange": 241, "signatureBeforeChange": " public void replaceStyleRanges(int start, int length, StyleRange[] ranges)", "signatureAfterChange": " public void replaceStyleRanges(int start, int length, StyleRange[] ranges)", "diff": ["-\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "-", "+\tfor (int i = 0; i < ranges.length; i++) {", "+\t\tStyleRange range = ranges[i];", "+\t\tif (range != null && range.font != null) {", "+\t\t\tif (!isFixedLineHeight()) {", "+\t\t\t\tlineCache.setAllLinesDefaultHeight();", "+\t\t\t}", "+\t\t\tsetLineHeightVariable();", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\tresetCache(firstLine, lastLine - firstLine + 1);", "+\t", "-\t\tdraw(0, redrawTop, getClientArea().width, redrawBottom - redrawTop, true);", "+\t\tsuper.redraw(0, redrawTop, getClientArea().width, redrawBottom - redrawTop, false);", "-", "-\t// make sure that the caret is positioned correctly.", "-\t// caret location may change if font style changes.", "-\t// fixes 1G8FODP"]}], "num": 19893}
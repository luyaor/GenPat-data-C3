{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db77a4d3934fb6373da797f83f5e9142", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bff9e115fc803b8a9b410905ca3622b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/win32/org/eclipse/swt/browser/WebResourceLoadDelegate.java", "commitBeforeChange": "73bece2a93a84ede732dede8b40b2d8c17119094", "commitAfterChange": "3684f6f68db473f62f594c1867c30510d320282b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  int didReceiveAuthenticationChallenge (int webView, int identifier, int challenge, int dataSource)", "signatureAfterChange": "  int didReceiveAuthenticationChallenge (int webView, int identifier, int challenge, int dataSource)", "diff": ["-\tIWebURLAuthenticationChallenge iweburlChallenge = new IWebURLAuthenticationChallenge (challenge);", "+\tIWebURLAuthenticationChallenge authenticationChallenge = new IWebURLAuthenticationChallenge (challenge);", "-\tint [] count = new int [1];", "-\tint hr = iweburlChallenge.previousFailureCount (count);", "-\tif (hr != COM.S_OK) {", "-\t\treturn COM.S_OK;", "-\t}", "-\tint /*long*/ [] result = new int /*long*/ [1];", "-\tif (count[0] < 3) {", "+\tint[] count = new int[1];", "+\tint hr = authenticationChallenge.previousFailureCount (count);", "+\tint /*long*/[] result = new int /*long*/[1];", "+\tif (hr == COM.S_OK && count[0] < 3) {", "-\t\t\t\thr = iweburlChallenge.sender (result);", "+\t\t\t\thr = authenticationChallenge.sender (result);", "-\t\t\t\thr = iweburlChallenge.sender (result);", "-\t\t\t\tif (hr != COM.S_OK || result[0] == 0) {", "-\t\t\t\t\treturn COM.S_OK;", "-\t\t\t\t}", "+\t\t\t\thr = authenticationChallenge.sender (result);", "+\t\t\t\tif (hr != COM.S_OK || result[0] == 0) continue;", "+", "-\t\t\t\t\tchallengeSender.useCredential (result[0], challenge);", "+\t\t\t\t\tchallengeSender.useCredential (credential.getAddress (), challenge);", "+", "-\thr = iweburlChallenge.proposedCredential (result);", "+\thr = authenticationChallenge.proposedCredential (result);", "-\t\t\tint [] value = new int [1];", "+\t\t\tint[] value = new int[1];", "-\thr = iweburlChallenge.protectionSpace (result);", "+\thr = authenticationChallenge.protectionSpace (result);", "-\t\tint [] port = new int [1];", "+\t\tint[] port = new int[1];", "-\t\t\thost += \":\" + port[0];", "+\t\t\thost += \":\" + port[0]; //$NON-NLS-1$", "-\t\t\tspace.Release ();", "+\tspace.Release ();", "-\thr = iweburlChallenge.sender (result);", "+\thr = authenticationChallenge.sender (result);", "-    \treturn COM.S_OK;", "-    }", "+\t\treturn COM.S_OK;", "+\t}", "-\t\tchallengeSender.useCredential (result[0], challenge);", "+\t\tchallengeSender.useCredential (credential.getAddress (), challenge);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427b152d687483997ea3a6cf0edd40f2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "3a6b848c1b53a6acdc29c5142dc62bdb44ce6285", "commitAfterChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   int getInterfaces (int count, int array)", "signatureAfterChange": "   int getInterfaces (int count, int array)", "diff": ["-\tint /*long*/ arrayOfIIDs = C.malloc (nsID.sizeof * 2);", "-\tint /*long*/ arrayOfPtrs = C.malloc (C.PTR_SIZEOF * 2);", "-\tXPCOM.memmove (arrayOfIIDs, nsISecurityCheckedComponent.NS_ISECURITYCHECKEDCOMPONENT_IID, nsID.sizeof);", "-\tXPCOM.memmove (arrayOfPtrs, new int /*long*/[] {arrayOfIIDs}, C.PTR_SIZEOF);", "-\tXPCOM.memmove (arrayOfIIDs + nsID.sizeof, EXTERNAL_IID, nsID.sizeof);", "-\tXPCOM.memmove (arrayOfPtrs + C.PTR_SIZEOF, new int /*long*/[] {arrayOfIIDs + nsID.sizeof}, C.PTR_SIZEOF);", "-\tC.memmove (array, new int /*long*/[] {arrayOfPtrs}, C.PTR_SIZEOF);", "+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "+\tint /*long*/ securityCheckedComponentIID = memory.Alloc (nsID.sizeof);", "+\tXPCOM.memmove (securityCheckedComponentIID, nsISecurityCheckedComponent.NS_ISECURITYCHECKEDCOMPONENT_IID, nsID.sizeof);", "+\tint /*long*/ externalIID = memory.Alloc (nsID.sizeof);", "+\tXPCOM.memmove (externalIID, EXTERNAL_IID, nsID.sizeof);", "+\tint /*long*/ ptrArray = memory.Alloc (2 * C.PTR_SIZEOF);", "+\tC.memmove (ptrArray, new int /*long*/[] {securityCheckedComponentIID}, C.PTR_SIZEOF);", "+\tC.memmove (ptrArray + C.PTR_SIZEOF, new int /*long*/[] {externalIID}, C.PTR_SIZEOF);", "+\tC.memmove (array, new int /*long*/[] {ptrArray}, C.PTR_SIZEOF);", "+\tmemory.Release ();", "+"]}], "num": 29695}
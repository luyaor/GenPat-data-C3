{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ada6965c2b059a8f8d124b3de32f42ea", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d51c266fda15b42d01dc05cec8f10c9c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "5b9a0d491fbcdf2b8ad38517c1e8eee5fab5d63d", "commitAfterChange": "ef5ec85d7350e1af54756db5434c54bfc135401f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  int handleCallback(int nextHandler, int theEvent)", "signatureAfterChange": "  int handleCallback(int nextHandler, int theEvent)", "diff": ["-\t/*", "-\t* Bug in Safari. The WebView blocks the propagation of certain Carbon events", "-\t* such as kEventRawKeyDown. On the Mac, Carbon events propagate from the", "-\t* Focus Target Handler to the Control Target Handler, Window Target and finally", "-\t* the Application Target Handler. It is assumed that WebView hooks its events", "-\t* on the Window Target and does not pass kEventRawKeyDown to the next handler.", "-\t* Since kEventRawKeyDown events never make it to the Application Target Handler,", "-\t* the Application Target Handler never gets to emit kEventTextInputUnicodeForKeyEvent", "-\t* used by SWT to send a SWT.KeyDown event.", "-\t* The workaround is to hook kEventRawKeyDown on the Control Target Handler which gets", "-\t* called before the WebView hook on the Window Target Handler. Then, forward this event", "-\t* directly to the Application Target Handler. Note that if in certain conditions Safari", "-\t* does not block the kEventRawKeyDown, then multiple kEventTextInputUnicodeForKeyEvent", "-\t* events might be generated as a result of this workaround.", "-\t*/", "-\tif (OS.GetEventKind(theEvent) == OS.kEventRawKeyDown) {", "-\t\tOS.SendEventToEventTarget(theEvent, OS.GetApplicationEventTarget());", "+\tint eventKind = OS.GetEventKind(theEvent);", "+\tswitch (eventKind) {", "+\t\tcase OS.kEventRawKeyDown: {", "+\t\t\t/*", "+\t\t\t* Bug in Safari. The WebView blocks the propagation of certain Carbon events", "+\t\t\t* such as kEventRawKeyDown. On the Mac, Carbon events propagate from the", "+\t\t\t* Focus Target Handler to the Control Target Handler, Window Target and finally", "+\t\t\t* the Application Target Handler. It is assumed that WebView hooks its events", "+\t\t\t* on the Window Target and does not pass kEventRawKeyDown to the next handler.", "+\t\t\t* Since kEventRawKeyDown events never make it to the Application Target Handler,", "+\t\t\t* the Application Target Handler never gets to emit kEventTextInputUnicodeForKeyEvent", "+\t\t\t* used by SWT to send a SWT.KeyDown event.", "+\t\t\t* The workaround is to hook kEventRawKeyDown on the Control Target Handler which gets", "+\t\t\t* called before the WebView hook on the Window Target Handler. Then, forward this event", "+\t\t\t* directly to the Application Target Handler. Note that if in certain conditions Safari", "+\t\t\t* does not block the kEventRawKeyDown, then multiple kEventTextInputUnicodeForKeyEvent", "+\t\t\t* events might be generated as a result of this workaround.", "+\t\t\t*/", "+\t\t\tdoit = false;", "+\t\t\tint result = OS.SendEventToEventTarget(theEvent, OS.GetApplicationEventTarget());", "+\t\t\tif (!doit) return OS.noErr;", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase OS.kEventTextInputUnicodeForKeyEvent: {", "+\t\t\t/*", "+\t\t\t* Note.  This event is received from the Window Target therefore after it was received", "+\t\t\t* by the Focus Target. The SWT.KeyDown event is sent by SWT on the Focus Target. If it", "+\t\t\t* is received here, then the SWT.KeyDown doit flag must have been left to the value", "+\t\t\t* true.  For package visibility reasons we cannot access the doit flag directly.", "+\t\t\t* ", "+\t\t\t* Sequence of events when the user presses a key down", "+\t\t\t* ", "+\t\t\t* .Control Target - kEventRawKeyDown", "+\t\t\t* \t.forward to ApplicationEventTarget", "+\t\t\t* \t\t.Focus Target kEventTextInputUnicodeForKeyEvent - SWT emits SWT.KeyDown - ", "+\t\t\t* \t\t\tblocks further propagation if doit false. Browser does not know directly about", "+\t\t\t* \t\t\tthe doit flag value.", "+\t\t\t* \t\t\t.Window Target kEventTextInputUnicodeForKeyEvent - if received, Browser knows ", "+\t\t\t* \t\t\tSWT.KeyDown is not blocked and event should be sent to WebKit", "+\t\t\t*  Return from Control Target - kEventRawKeyDown: let the event go to WebKit if doit true ", "+\t\t\t*  (eventNotHandledErr) or stop it (noErr).", "+\t\t\t*/", "+\t\t\tdoit = true;", "+\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fa54fb3fa87c12820e3c9c5ca0ffe30", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "4011a75a1162d702acf821f83a40ad60e2f9460f", "commitAfterChange": "c6f4735c1aeae2db927268662b09b6f63b467ab9", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public boolean readAndDispatch ()", "signatureAfterChange": " public boolean readAndDispatch ()", "diff": ["-\tif (OS.ReceiveNextEvent(null, OS.kEventDurationNoWait, true, evt) == OS.kNoErr) {", "-\t\tOS.SendEventToEventTarget(evt[0], OS.GetEventDispatcherTarget());\t\t\t\t\t", "+\tint rc= OS.ReceiveNextEvent(null, OS.kEventDurationNoWait, true, evt);", "+\t", "+\tswitch (rc) {", "+\tcase OS.kNoErr:", "+\t\tint target= OS.GetEventDispatcherTarget();", "+\t\tOS.SendEventToEventTarget(evt[0], target);", "+\t\t", "+\tcase OS.eventLoopTimedOutErr:", "+\t\tbreak;\t// no event: run async", "+\t\t", "+\tdefault:", "+\t\tSystem.out.println(\"readAndDispatch: error \" + rc);", "+\t\tbreak;"]}], "num": 50357}
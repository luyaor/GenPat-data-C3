{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3a2909c36bde3fe73c1c8063eeda8313", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5be1c034c4667633f5f40043b2568a5e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "ff915b6fd2c7ce8700ffd3b748d1d9aa6cfbed47", "commitAfterChange": "3876ff531add8d32f9c402f543007eba72ce70f3", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " @Override Point getWindowOrigin ()", "signatureAfterChange": " @Override Point getWindowOrigin ()", "diff": ["-\t/*", "-\t * Need to overide this since the handle attribute will not be intialized", "-\t * if the shell is not made visible. So need to get the location from the shell handle", "-\t * getLocation() method in shell will provide us the location of the control", "-\t */", "-", "-\treturn getLocation();", "+\tif (!mapped) {", "+\t\t/*", "+\t\t * Special case: The handle attributes are not initialized until the", "+\t\t * shell is made visible, so gdk_window_get_origin () will return {0, 0}.", "+\t\t * ", "+\t\t * Once the shell is realized, gtk_window_get_position () includes", "+\t\t * window trims etc. from the window manager. That's why getLocation ()", "+\t\t * is not safe to use after the shell has been made visible.", "+\t\t */", "+\t\treturn getLocation ();", "+\t}", "+\treturn super.getWindowOrigin( );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ddbb60392db06e91da3dd4dc1bd393d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "5bfcad3a03f44ca55cafc1c2e35ef23873e209b8", "commitAfterChange": "865e3942831d3760ee7191d48e9ab4f68e79460e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static int getDesktop(Display display)", "signatureAfterChange": " static int getDesktop(Display display)", "diff": ["-\tif (isGnomeDesktop() && gnome_init()) desktop = DESKTOP_GNOME;", "+\t/*", "+\t * Feature in Linux Desktop. There is currently no official way to", "+\t * determine whether the Gnome window manager or gnome-vfs is", "+\t * available. Earlier versions including Red Hat 9 and Suse 9 provide", "+\t * a documented Gnome specific property on the root window ", "+\t * WIN_SUPPORTING_WM_CHECK. This property is no longer supported in newer", "+\t * versions such as Fedora Core 2.", "+\t * The workaround is to simply check that the window manager is a ", "+\t * compliant one (property _NET_SUPPORTING_WM_CHECK) and to attempt to load ", "+\t * our native library that depends on gnome-vfs.", "+\t */", "+", "+\tif (isWindowManagerCompliant() && gnome_init()) desktop = DESKTOP_GNOME;"]}], "num": 5947}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3953b9e5f6d67ac92a97a525ae9d3353", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91535a85d8cdb0e55dccd5b804699f3b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 160, "signatureBeforeChange": "\r void handleTextChanged(TextChangedEvent event)", "signatureAfterChange": "\r void handleTextChanged(TextChangedEvent event)", "diff": ["-\tint firstLine;\t\r", "-\tint firstLineOffset;\r", "-\tint offsetInLine;\r", "-\tString firstLineText;\r", "-\tint stopLine;\r", "-\tboolean isMultiLineChange = event.replacedLineCount > 0 || event.newLineCount > 0;\r", "-\tint textChangeX = -1;\r", "-\tint textChangeY;\r", "-\tint oldTabX = 0;\r", "-\tint textChangeStopX = -1;\r", "+\tint firstLine = content.getLineAtOffset(lastTextChangeStart);\r", "+\tint stopLine;\r", "-\tif (event.replacedCharCount < 0) {\r", "-\t\tevent.start += event.replacedCharCount;\r", "-\t\tevent.replacedCharCount *= -1;\r", "-\t}\r", "-\tfirstLine = content.getLineAtOffset(event.start);\r", "-\tfirstLineText = content.getLine(firstLine);\r", "-\tfirstLineOffset = content.getOffsetAtLine(firstLine);\r", "-\toffsetInLine = event.start - firstLineOffset;\r", "-\tif (isMultiLineChange == false) {\r", "-\t\t// get location of nearest tab and replace stop offset in old text\r", "-\t\tint oldTabIndex;\r", "-\t\tString oldLine;\r", "-\t\tStringBuffer oldLineText = new StringBuffer(firstLineText);\t\t\r", "-\t\toldLineText.delete(offsetInLine, offsetInLine + event.newCharCount);\r", "-\t\tif (event.replacedText != null && event.replacedText.length() > 0) {\r", "-\t\t\toldLineText.insert(offsetInLine, event.replacedText);\r", "-\t\t}\r", "-\t\toldLine = oldLineText.toString();\r", "-\t\toldTabIndex = oldLine.indexOf(TAB, offsetInLine + event.replacedCharCount);\r", "-\t\toldTabX = getXAtOffset(oldLine, firstLine, oldTabIndex + 1);\t\t\t\r", "-\t\tif (event.newCharCount == 0) {\r", "-\t\t\t// characters were deleted. find out where the last deleted \r", "-\t\t\t// character stopped drawing\r", "-\t\t\ttextChangeStopX = getXAtOffset(\r", "-\t\t\t\toldLine, \r", "-\t\t\t\tfirstLine, \r", "-\t\t\t\toffsetInLine + event.replacedCharCount);\r", "-\t\t}\r", "-\t\telse\r", "-\t\tif (event.replacedCharCount == 0) {\r", "-\t\t\t// characters were added. find out where before the styles are \r", "-\t\t\t// updated to reflect the text change\r", "-\t\t\ttextChangeX = getXAtOffset(oldLine, firstLine, offsetInLine);\r", "-\t\t}\r", "-\t}\r", "-\t// notify default line styler about text change\r", "-\tif (defaultLineStyler != null) {\r", "-\t\tdefaultLineStyler.textChanged(event);\r", "-\t}\r", "-\tstopLine = firstLine + event.newLineCount + 1;\r", "-\tif (stopLine > topIndex && firstLine < topIndex + visibleItemCount) {\t\t\r", "+\tstopLine = firstLine + lastTextChangeNewLineCount + 1;\r", "+\tif (stopLine > topIndex && firstLine < topIndex + visibleItemCount) {\r", "-\t\tcalculateContentWidth(startLine, Math.min(stopLine, topIndex + visibleItemCount) - startLine);\r", "+\t\tcalculateContentWidth(\r", "+\t\t\tstartLine, \r", "+\t\t\tMath.min(stopLine, topIndex + visibleItemCount) - startLine);\r", "-\ttextChangeY = firstLine * lineHeight - verticalScrollOffset;\r", "-\tif (textChangeX == -1) {\r", "-\t\ttextChangeX = getXAtOffset(firstLineText, firstLine, offsetInLine);\r", "-\t}\r", "-\tif (isMultiLineChange) {\r", "-\t\tredrawMultiLineChange(textChangeX, textChangeY, event.newLineCount, event.replacedLineCount);\r", "-\t}\r", "-\telse {\r", "-\t\tint newTabIndex = firstLineText.indexOf(TAB, offsetInLine + event.newCharCount);\r", "-\t\tif (newTabIndex != -1) {\r", "-\t\t\t// there is at least one tab after the text change\r", "-\t\t\tint newTabX = getXAtOffset(firstLineText, firstLine, newTabIndex + 1);\r", "-\t\t\tredrawSingleLineTabChange(textChangeX, textChangeY,\tnewTabX, oldTabX);\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tif (textChangeStopX == -1) {\r", "-\t\t\t\ttextChangeStopX = getXAtOffset(\r", "-\t\t\t\t\tfirstLineText, \r", "-\t\t\t\t\tfirstLine, \r", "-\t\t\t\t\toffsetInLine + event.newCharCount);\r", "-\t\t\t}\r", "-\t\t\tredrawSingleLineChange(\r", "-\t\t\t\ttextChangeX, \r", "-\t\t\t\ttextChangeY, \r", "-\t\t\t\tevent.newCharCount, \r", "-\t\t\t\tevent.replacedCharCount, \r", "-\t\t\t\ttextChangeStopX);\r", "-\t\t}\r", "-\t}\r", "-\tupdateSelection(event.start, event.replacedCharCount, event.newCharCount);\r", "+\tupdateSelection(\r", "+\t\tlastTextChangeStart, \r", "+\t\tlastTextChangeReplaceCharCount, \r", "+\t\tlastTextChangeNewCharCount);\r", "+\t\t\r", "+\tint newVerticalOffset = getLineCount() * getLineHeight() - getClientArea().height;\r", "+\tif (newVerticalOffset < verticalScrollOffset) {\r", "+\t\t// Scroll up so that empty lines below last text line are used.\r", "+\t\t// Fixes 1GEYJM0\r", "+\t\tsetVerticalScrollOffset(Math.max(0, newVerticalOffset), true);\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8994064190564f319f3732c87d0d5369", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 162, "methodNumberAfterChange": 178, "signatureBeforeChange": "\r void handleTextChanging(TextChangingEvent event)", "signatureAfterChange": "\r void handleTextChanging(TextChangingEvent event)", "diff": ["-\tint firstLineOffset;\r", "-\tint offsetInLine;\r", "-\tString firstLineText;\r", "-\tint stopLine;\r", "-\tboolean isMultiLineChange = event.replaceLineCount > 0 || event.newLineCount > 0;\r", "-\tint textChangeX = -1;\r", "-\tint oldTabX = 0;\r", "-\tint textChangeStopX = -1;\r", "-\tint visibleItemCount = (int) Math.ceil((float) getClientArea().height / lineHeight);\r", "+\tboolean isMultiLineChange = event.replaceLineCount > 0 || event.newLineCount > 0;\r", "+\tlastTextChangeReplaceLineCount = event.replaceLineCount;\r", "-\tfirstLineText = content.getLine(firstLine);\r", "-\tfirstLineOffset = content.getOffsetAtLine(firstLine);\r", "-\toffsetInLine = event.start - firstLineOffset;\r", "-\tif (isMultiLineChange == false) {\r", "-\t\t// get location of nearest tab and replace stop offset in old text\r", "-\t\tint oldTabIndex = firstLineText.indexOf(TAB, offsetInLine + event.replaceCharCount);\r", "-\t\toldTabX = getXAtOffset(firstLineText, firstLine, oldTabIndex + 1);\r", "-\t\tif (event.newCharCount == 0) {\r", "-\t\t\t// characters are going to be deleted. find out where the last deleted\r", "-\t\t\t// character stops drawing.\r", "-\t\t\t// This will be used in redrawSingleLineChange as the bit blit source\r", "-\t\t\t// x position. It has to be calculated before the styles are updated\r", "-\t\t\t// because the deleted text may be bold. If the styles are deleted\r", "-\t\t\t// before the calculation, the resulting x position would not reflect \r", "-\t\t\t// the bold style thus causing incorrect blitting to occur.\r", "-\t\t\ttextChangeStopX = getXAtOffset(\r", "-\t\t\t\tfirstLineText, \r", "-\t\t\t\tfirstLine, \r", "-\t\t\t\toffsetInLine + event.replaceCharCount);\r", "-\t\t}\r", "-\t}\r", "-\t\ttextChangeX = getXAtOffset(firstLineText, firstLine, offsetInLine);\r", "-\t\tredrawMultiLineChange(\r", "-\t\t\ttextChangeX, \r", "-\t\t\ttextChangeY, \r", "-\t\t\tevent.newLineCount, \r", "-\t\t\tevent.replaceLineCount);\r", "-\t\t// notify default line styler about text change\r", "-\t\tif (defaultLineStyler != null) {\r", "-\t\t\tdefaultLineStyler.textChanging(event);\r", "-\t\t}\r", "+\t\tredrawMultiLineChange(textChangeY, event.newLineCount, event.replaceLineCount);\r", "-\t\t// get location of nearest tab and replace stop offset in new text\r", "-\t\tint newTabIndex;\r", "-\t\tString newLine;\r", "-\t\tStringBuffer newLineText = new StringBuffer(firstLineText);\t\t\r", "-\t\tnewLineText.delete(offsetInLine, offsetInLine + event.replaceCharCount);\r", "-\t\tif (event.newText != null && event.newText.length() > 0) {\r", "-\t\t\tnewLineText.insert(offsetInLine, event.newText);\r", "-\t\t}\r", "-\t\tnewLine = newLineText.toString();\r", "-\t\tnewTabIndex = newLine.indexOf(TAB, offsetInLine + event.newCharCount);\r", "-\r", "-\t\t// flush pending redraws before changing the line styles to reflect\r", "-\t\t// the pending text change\r", "-\t\tupdate();\t\t\r", "-\t\t// notify default line styler about text change\r", "-\t\tif (defaultLineStyler != null) {\r", "-\t\t\tdefaultLineStyler.textChanging(event);\r", "-\t\t}\r", "-\t\t// it is safe to calculate the change start x position after the\r", "-\t\t// styles have been updated since the styles only change behind the\r", "-\t\t// change start offset, not before.\r", "-\t\ttextChangeX = getXAtOffset(firstLineText, firstLine, offsetInLine);\t\t\r", "-\t\tif (newTabIndex != -1) {\r", "-\t\t\t// there is at least one tab character after the text change\r", "-\t\t\tint newTabX = getXAtOffset(newLine, firstLine, newTabIndex + 1);\r", "-\t\t\tredrawSingleLineTabChange(textChangeX, textChangeY, newTabX, oldTabX);\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tif (textChangeStopX == -1) {\r", "-\t\t\t\t// text change stop x position has not been calculated yet.\r", "-\t\t\t\t// This means that text is going to be inserted. Calculate \r", "-\t\t\t\t// the x position behind the inserted text. It will be used \r", "-\t\t\t\t// in redrawSingleLineChange as the bit blit destination x \r", "-\t\t\t\t// position. The x position has to be calculated after the \r", "-\t\t\t\t// styles have been updated because the calculation uses the \r", "-\t\t\t\t// styles of the new text which otherwise may not exist yet.\r", "-\t\t\t\ttextChangeStopX = getXAtOffset(\r", "-\t\t\t\t\tnewLine, \r", "-\t\t\t\t\tfirstLine, \r", "-\t\t\t\t\toffsetInLine + event.newCharCount);\r", "-\t\t\t}\r", "-\t\t\tredrawSingleLineChange(\r", "-\t\t\t\ttextChangeX, \r", "-\t\t\t\ttextChangeY, \r", "-\t\t\t\tevent.newCharCount, \r", "-\t\t\t\tevent.replaceCharCount, \r", "-\t\t\t\ttextChangeStopX);\r", "-\t\t}\r", "+\t\tredraw(0, textChangeY, getClientArea().width, lineHeight, true);\t\r", "+\t}\r", "+\t// notify default line styler about text change\r", "+\tif (defaultLineStyler != null) {\r", "+\t\tdefaultLineStyler.textChanging(event);\r"]}], "num": 46660}
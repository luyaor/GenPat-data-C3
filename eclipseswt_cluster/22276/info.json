{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a98cf173aed20d8b2d10c14aedfcb110", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "392790338aee351ec9d00eda52c471ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "14fbe017d1e3dc78020213280156fbd51d492d0a", "commitAfterChange": "e204c746a54241ff7faf790f527aebbdadf8a989", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r void init (Device device, FontData fd)", "signatureAfterChange": "\r \r void init (Device device, FontData[] fds)", "diff": ["-void init (Device device, FontData fd) {\r", "+\r", "+void init (Device device, FontData[] fds) {\r", "-\tint fontListEntry;\r", "-//\tint fontStruct = loadFont(xDisplay, fd);\r", "-//\tif (fontStruct == 0) {\r", "-//\t\t/*\r", "-//\t\t* If the desired font can not be loaded, the XLFD fields are wildcard\r", "-//\t\t* in order to preserve the font style and height. If there is no\r", "-//\t\t* font with the desired style and height, the slant, weight and points\r", "-//\t\t* are wildcard in that order, until a font can be loaded.\r", "-//\t\t*/\r", "-//\t\tFontData newFD = new FontData();\r", "-//\t\tnewFD.slant = fd.slant;\r", "-//\t\tnewFD.weight = fd.weight;\r", "-//\t\tnewFD.points = fd.points;\r", "-//\t\tnewFD.characterSetName = fd.characterSetName;\r", "-//\t\tif (newFD.characterSetName == null) {\r", "-//\t\t\tnewFD.characterSetName = device.characterSetName;\r", "-//\t\t}\r", "-//\t\tnewFD.characterSetRegistry = fd.characterSetRegistry;\r", "-//\t\tif (newFD.characterSetRegistry == null) {\r", "-//\t\t\tnewFD.characterSetRegistry = device.characterSetRegistry;\r", "-//\t\t}\r", "-//\t\tfontStruct = matchFont(xDisplay, newFD, false);\r", "-//\r", "-//\t\t/* Failed to load any font. Use the system font. */\r", "-//\t\tif (fontStruct == 0) {\r", "-//\t\t\thandle = device.systemFont;\r", "-//\t\t\tif (handle != 0) return;\r", "-//\t\t}\r", "-//\t}\r", "-//\tfontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONT, fontStruct);\r", "-\tint horizontalResolution = fd.horizontalResolution;\r", "-\tint verticalResolution = fd.verticalResolution;\r", "-\tif (device.setDPI) {\r", "-\t\tPoint dpi = device.getDPI();\r", "-\t\tif (fd.horizontalResolution == 0) fd.horizontalResolution  = dpi.x;\r", "-\t\tif (fd.verticalResolution == 0)\tfd.verticalResolution = dpi.y;\r", "-\t}\r", "-\tif (fd.lang != null) {\r", "-\t\tString lang = fd.lang;\r", "-\t\tString country = fd.country;\r", "-\t\tString variant = fd.variant;\r", "+\t\r", "+\t/* A alternative locale have to be set in the first font data */\r", "+\tFontData firstFd = fds[0];\r", "+\tif (firstFd.lang != null) {\r", "+\t\tString lang = firstFd.lang;\r", "+\t\tString country = firstFd.country;\r", "+\t\tString variant = firstFd.variant;\r", "-\tint fontSet = loadFontSet(xDisplay, fd);\r", "-\tif (fontSet == 0) {\r", "-\t\t/*\r", "-\t\t* If the desired font can not be loaded, the XLFD fields are wildcard\r", "-\t\t* in order to preserve the font style and height. If there is no\r", "-\t\t* font with the desired style and height, the slant, weight and points\r", "-\t\t* are wildcard in that order, until a font can be loaded.\r", "-\t\t*/\r", "-\t\tFontData newFD = new FontData();\r", "-\t\tnewFD.slant = fd.slant;\r", "-\t\tnewFD.weight = fd.weight;\r", "-\t\tnewFD.points = fd.points;\r", "-\t\tnewFD.horizontalResolution = fd.horizontalResolution;\r", "-\t\tnewFD.verticalResolution = fd.verticalResolution;\r", "-\t\tnewFD.characterSetName = fd.characterSetName;\r", "-\t\tif (newFD.characterSetName == null) {\r", "-\t\t\tnewFD.characterSetName = device.characterSetName;\r", "-\t\t}\r", "-\t\tnewFD.characterSetRegistry = fd.characterSetRegistry;\r", "-\t\tif (newFD.characterSetRegistry == null) {\r", "-\t\t\tnewFD.characterSetRegistry = device.characterSetRegistry;\r", "-\t\t}\r", "-\t\tfontSet = matchFont(xDisplay, newFD, true);\r", "-\t}\r", "-\tif (fd.lang != null) OS.setlocale (OS.LC_CTYPE, new byte [0]);\r", "-\t/* Failed to load any font. Use the system font. */\r", "+\t/* Copy font datas since they might be simplified. */\r", "+\tPoint dpi = null;\r", "+\tif (device.setDPI) dpi = device.getDPI();\r", "+\tFontData[] newFds = new FontData [fds.length];\r", "+\tfor (int i = 0; i < fds.length; i++) {\r", "+\t\tFontData newFd = newFds[i] = new FontData();\r", "+\t\tFontData fd = fds[i];\r", "+\t\tnewFd.foundry = fd.foundry;\r", "+\t\tnewFd.fontFamily = fd.fontFamily;\r", "+\t\tnewFd.weight = fd.weight;\r", "+\t\tnewFd.slant = fd.slant;\r", "+\t\tnewFd.setWidth = fd.setWidth;\r", "+\t\tnewFd.addStyle = fd.addStyle;\r", "+\t\tnewFd.pixels = fd.pixels;\r", "+\t\tnewFd.points = fd.points;\r", "+\t\tif (dpi != null) {\r", "+\t\t\tnewFd.horizontalResolution = dpi.x;\r", "+\t\t\tnewFd.verticalResolution = dpi.y;\r", "+\t\t} else {\r", "+\t\t\tnewFd.horizontalResolution = fd.horizontalResolution;\r", "+\t\t\tnewFd.verticalResolution = fd.verticalResolution;\r", "+\t\t}\r", "+\t\tnewFd.spacing = fd.spacing;\r", "+\t\tnewFd.averageWidth = fd.averageWidth;\r", "+\t\tnewFd.characterSetRegistry = fd.characterSetRegistry;\r", "+\t\tnewFd.characterSetName = fd.characterSetName;\r", "+\t}\r", "+\t\r", "+\t/* Load desired font. */\r", "+\tint[] missingCharset = new int[1];\r", "+\tint[] missingCharsetCount = new int[1];\r", "+\tint[] defString = new int[1];\r", "+\tStringBuffer stringBuffer = new StringBuffer(newFds[0].getXlfd());\t\r", "+\tfor (int i = 1; i < newFds.length; i++) {\r", "+\t\tstringBuffer.append (',');\r", "+\t\tstringBuffer.append (newFds[i].getXlfd());\r", "+\t}\r", "+\tbyte[] buffer = Converter.wcsToMbcs (null, stringBuffer.toString() , true);\r", "+\tint fontSet = OS.XCreateFontSet (xDisplay, buffer, missingCharset, missingCharsetCount, defString);\r", "+\t\r", "+\t/*\r", "+\t* If failed to load desired font or there are missing character\r", "+\t* sets, simplify XLFDs and try again.\r", "+\t*/\r", "+\tif (fontSet == 0 || missingCharsetCount[0] != 0) {\r", "+\t\tint index = 0;\r", "+\t\tint lastMissingCharsetCount = 0xFFFF;\r", "+\t\tString loadedXlfds = getXlfds(fontSet);\r", "+\t\twhile ((index = wildcardXfld(newFds, index)) < fds.length) {\r", "+\t\t\tstringBuffer.setLength(0);\r", "+\t\t\tstringBuffer.append(loadedXlfds);\r", "+\t\t\tif (stringBuffer.length() != 0) stringBuffer.append(\",\");\r", "+\t\t\tstringBuffer.append(newFds[index].getXlfd());\r", "+\t\t\tbuffer = Converter.wcsToMbcs(null, stringBuffer.toString(), true);\r", "+\t\t\tif (fontSet != 0) OS.XFreeFontSet(xDisplay, fontSet);\r", "+\t\t\tfontSet = OS.XCreateFontSet(xDisplay, buffer, missingCharset, missingCharsetCount, defString);\r", "+\t  \t\tif (fontSet != 0) {\r", "+\t  \t\t\tif (missingCharsetCount[0] == 0) {\r", "+\t  \t\t\t\tbreak;\r", "+\t  \t\t\t} else {\r", "+\t  \t\t\t\tif (lastMissingCharsetCount > missingCharsetCount[0]) {\r", "+\t\t  \t\t\t\tlastMissingCharsetCount = missingCharsetCount[0];\r", "+\t\t  \t\t\t\tloadedXlfds = getXlfds(fontSet);\r", "+\t  \t\t\t\t}\t\t\t\t\r", "+\t  \t\t\t}\r", "+\t  \t\t}\r", "+\t\t}\r", "+\t}\r", "+\t\r", "+\t/* If no font could be loaded, use system font. */\r", "-\t\thandle = device.systemFont.handle;\r", "+\t\tFont systemFont = device.systemFont;\r", "+\t\thandle = systemFont.handle;\r", "+\t\tcodePage = systemFont.codePage;\r", "-\t\tfontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONTSET, fontSet);\r", "-\t\tif (fontListEntry == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "-\t\thandle = OS.XmFontListAppendEntry(0, fontListEntry);\r", "-\t\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "+\t\tint fontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONTSET, fontSet);\r", "+\t\tif (fontListEntry != 0) {\r", "+\t\t\thandle = OS.XmFontListAppendEntry(0, fontListEntry);\r", "+\t\t\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "+\t\t\tint codesetPtr = OS.nl_langinfo(OS.CODESET);\r", "+\t\t\tint length = OS.strlen(codesetPtr);\r", "+\t\t\tbyte[] codeset = new byte[length];\r", "+\t\t\tOS.memmove(codeset, codesetPtr, length);\r", "+\t\t\tcodePage = new String(codeset);\r", "+\t\t}\r", "-\tfd.horizontalResolution = horizontalResolution;\r", "-\tfd.verticalResolution = verticalResolution;\r", "+\r", "+\t/* Reset locale */\r", "+\tif (firstFd.lang != null) OS.setlocale(OS.LC_CTYPE, new byte[0]);\r", "+\r", "-\t\r", "-\tcodePage = getCodePage(xDisplay, handle);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffc3b60745e77424b455e75ad70e8ed1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/ClipboardProxy.java", "commitBeforeChange": "ea2088161ff11ba4c1bcfcca3d37b7e836f9e64f", "commitAfterChange": "0e625ec767979d6e48049d14afe483143aa90d70", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  boolean setData(Object[] data, Transfer[] dataTypes)", "signatureAfterChange": "  boolean setData(Clipboard owner, Object[] data, Transfer[] dataTypes, int clipboards)", "diff": ["-boolean setData(Object[] data, Transfer[] dataTypes) {", "-\treturn setData(data, dataTypes, DND.CLIPBOARD);", "-}", "+boolean setData(Clipboard owner, Object[] data, Transfer[] dataTypes, int clipboards) {\t", "+\t\t\tif (activeClipboard != null) OS.gtk_clipboard_clear(Clipboard.GTKCLIPBOARD);", "+\t\t\tint getFuncProc = getFunc.getAddress();", "+\t\t\tint clearFuncProc = clearFunc.getAddress();", "+\t\t\tif (!OS.gtk_clipboard_set_with_data(Clipboard.GTKCLIPBOARD, pTargetsList, entries.length, getFuncProc, clearFuncProc, 0)) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tactiveClipboard = owner;", "+\t\t\tif (activePrimaryClipboard != null) OS.gtk_clipboard_clear(Clipboard.GTKPRIMARYCLIPBOARD);", "+\t\t\tint getFuncProc = getFunc.getAddress();", "+\t\t\tint clearFuncProc = clearFunc.getAddress();", "+\t\t\tif (!OS.gtk_clipboard_set_with_data(Clipboard.GTKPRIMARYCLIPBOARD, pTargetsList, entries.length, getFuncProc, clearFuncProc, 0)) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\tactivePrimaryClipboard = owner;", "+\t\treturn true;"]}], "num": 22276}
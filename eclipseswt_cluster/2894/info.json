{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34e4ef74a8a7e0683c8cbfc15530647b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b9c41bfc53d592ebc524e7bc7a1a203", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 137, "signatureBeforeChange": "   \tpublic void textChanged(int startOffset, int newLineCount, int replaceLineCount, int newCharCount, int replaceCharCount)", "signatureAfterChange": " int getLineIndex(int y)", "diff": ["-\t */  ", "-\tpublic void textChanged(int startOffset, int newLineCount, int replaceLineCount, int newCharCount, int replaceCharCount) {", "-\t\tint startLine = visualContent.getLineAtOffset(startOffset);", "-\t\tvisualContent.textChanged(startOffset, newLineCount, replaceLineCount, newCharCount, replaceCharCount);", "-", "-\t\t// if we are wrapping then it is possible for a deletion on the last", "-\t\t// line of text to shorten the total text length by a line.  If this", "-\t\t// occurs then the startIndex must be adjusted such that a redraw will", "-\t\t// be performed if a visible region is affected.  fixes bug 42947.", "-\t\tif (wordWrap) {", "-\t\t\tint lineCount = content.getLineCount();", "-\t\t\tif (startLine >= lineCount) startLine = lineCount - 1;  ", "-\t\t}", "-\t\tif (startLine <= getPartialBottomIndex()) {", "-\t\t\t// only redraw if the text change affects text inside or above ", "-\t\t\t// the visible lines. if it is below the visible lines it will", "-\t\t\t// not affect the word wrapping. fixes bug 14047.", "-\t\t\tparent.internalRedraw();", "-\t\t}", "-\t}", "+ */", "+int getLineIndex(int y) {", "+\ty -= topMargin;", "+\tif (isFixedLineHeight()) {", "+\t\tint lineHeight = renderer.getLineHeight();", "+\t\tint lineIndex = (y + getVerticalScrollOffset()) / lineHeight;", "+\t\tint lineCount = content.getLineCount();", "+\t\tif (lineIndex >= lineCount) {", "+\t\t\tlineIndex = lineCount - 1;", "+\t\t}", "+\t\treturn lineIndex;", "+\t}", "+\t", "+\tint line = topIndex;", "+\tif (y < 0) {", "+\t\tif (line == 0) return 0;", "+\t\tline--;", "+\t\ty += renderer.getLineHeight(line) - partialHeight;", "+\t\twhile (y < 0 && line > 0) {", "+\t\t\tline--;", "+\t\t\ty += renderer.getLineHeight(line);", "+\t\t}", "+\t} else {", "+\t\tif (partialHeight > y) return line - 1;", "+\t\ty -= partialHeight;", "+\t\tint lineCount = content.getLineCount();", "+\t\twhile (line < lineCount - 1) {", "+\t\t\tint lineHeight = renderer.getLineHeight(line);", "+\t\t\tif (lineHeight > y) break;", "+\t\t\ty -= lineHeight;", "+\t\t\tline++;", "+\t\t}", "+\t}", "+\treturn line;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a0618aae8070d52657bb51a81edf9c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 13, "signatureBeforeChange": " void headerDoPaint(Event event)", "signatureAfterChange": "  public Point computeSize(int wHint, int hHint, boolean changed)", "diff": ["+public Point computeSize(int wHint, int hHint, boolean changed) {", "+\tcheckWidget();", "+\tPoint size = super.computeSize(wHint, hHint, changed);", "+\tGC gc;", "+\tfinal int WidthCalculationCount = 50;\t\t// calculate item width for the first couple of items only", "+\tTreeRoots root = getRoot();", "+\tTreeItem2 item;", "+\tImage itemImage;", "+\tString itemText;", "+\tint width;", "+\tint newItemWidth = 0;", "+\t\t", "+\tif (wHint == SWT.DEFAULT && getContentWidth() == 0 && getItemCount() > 0) {", "+\t\tgc = new GC(this);", "+\t\tfor (int i = 0; i < WidthCalculationCount; i++) {", "+\t\t\titem = root.getVisibleItem(i);", "+\t\t\tif (item == null) {", "+\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t// no more items", "+\t\t\titemImage = item.getImage();", "+\t\t\titemText = item.getText();", "+\t\t\twidth = 0;", "+\t\t\tif (itemImage != null) {", "+\t\t\t\twidth += itemImage.getBounds().width;", "+\t\t\tif (itemText != null) {", "+\t\t\t\tgc.setFont(item.getFont());", "+\t\t\t\twidth += gc.stringExtent(itemText).x;", "+\t\t\tnewItemWidth = Math.max(newItemWidth, width);", "+\t\tif (newItemWidth > 0) {", "+\t\t\tsize.x = newItemWidth;", "+\t\t}\t\t", "+\treturn size;", "-}", "-void headerDoPaint(Event event) {", "-\tint numColumns = getColumnCount();", "-\tGC gc = event.gc;", "-\tRectangle clipping = gc.getClipping ();", "-\tint startColumn = -1, endColumn = -1;", "-\tif (numColumns > 0) {", "-\t\tstartColumn = computeColumnIntersect(clipping.x, 0);", "-\t\tif (startColumn != -1) {\t/* the click fell within a column's bounds */", "-\t\t\tendColumn = computeColumnIntersect(clipping.x + clipping.width, startColumn);", "-\t\t\tif (endColumn == -1) endColumn = numColumns - 1;", "-\t\t}", "-\t} else {", "-\t\tstartColumn = endColumn = 0;", "-\t}", "-\t", "-\t/* paint the column header shadow that spans the full header width */", "-\tRectangle paintBounds = new Rectangle (clipping.x, 0, clipping.width, getSize().y);", "-\theaderPaintShadow(gc, paintBounds, true, false);", "-\t", "-\t/* if damage occurred to the right of the last column then finished */", "-\tif (startColumn == -1) return;", "-\t", "-\t/* paint each of the column headers */", "-\tint headerHeight = getHeaderHeight ();", "-\tif (numColumns == 0) return;", "-\tint padding = getHeaderPadding();", "-\tint twoPaddings = padding + padding; ", "-\tfor (int i = startColumn; i <= endColumn; i++) {", "-\t\theaderPaintShadow(gc, columns[i].getBounds(), false, true);", "-\t\tcolumns[i].paint(gc);", "-\t}", "-}"]}], "num": 2894}
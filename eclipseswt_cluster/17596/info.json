{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80b336a1d39d71dcfef7491696ae554a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ced244e35cf714df729e383e0f23a65f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "72406362de2e688cb6448b551ad7245007f84f7c", "commitAfterChange": "c7c7673edd66d2503669300dbcbf68a065b2d742", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tint atkText_get_text_after_offset (int offset, int boundary_type, int start_offset, int end_offset)", "signatureAfterChange": "  \tint atkText_get_text_after_offset (int offset, int boundary_type, int start_offset, int end_offset)", "diff": ["-\t\t// TODO according to new gnome doc this determined text wrong", "+\t\t\tint length = text.length ();", "+\t\t\tint startBounds = offset;", "-\t\t\tString afterText = text.substring (offset);", "-\t\t\t\t\tif (afterText.length () > 0) endBounds++;", "+\t\t\t\t\tif (text.length () > offset) endBounds++;", "-\t\t\t\tcase OS.ATK_TEXT_BOUNDARY_LINE_START:", "-\t\t\t\tcase OS.ATK_TEXT_BOUNDARY_LINE_END: {", "-\t\t\t\t\tint newlineIndex = afterText.indexOf ('\\n');\t//TODO use platform line delimiter?", "-\t\t\t\t\tif (newlineIndex == -1) newlineIndex = afterText.length ();", "-\t\t\t\t\tendBounds += newlineIndex;", "+\t\t\t\tcase OS.ATK_TEXT_BOUNDARY_WORD_START: {", "+\t\t\t\t\tint wordStart1 = getIndexOfChar (text, \" !?.\\n\", offset);", "+\t\t\t\t\tif (wordStart1 == -1) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (wordStart1 < length) {", "+\t\t\t\t\t\tchar current = text.charAt (wordStart1); ", "+\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "+\t\t\t\t\t\twordStart1++;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (wordStart1 == length) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tstartBounds = wordStart1;", "+\t\t\t\t\tint wordStart2 = getIndexOfChar (text, \" !?.\\n\", wordStart1);", "+\t\t\t\t\tif (wordStart2 == -1) {", "+\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (wordStart2 < length) {", "+\t\t\t\t\t\tchar current = text.charAt (wordStart2); ", "+\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "+\t\t\t\t\t\twordStart2++;", "+\t\t\t\t\t}", "+\t\t\t\t\tendBounds = wordStart2;", "-\t\t\t\tcase OS.ATK_TEXT_BOUNDARY_SENTENCE_START:", "-\t\t\t\tcase OS.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "-\t\t\t\t\t// TODO ask the client for eligible separators?", "-\t\t\t\t\tint separatorIndex = afterText.length ();", "-\t\t\t\t\tint periodIndex = afterText.indexOf ('.');", "-\t\t\t\t\tif (periodIndex != -1) separatorIndex = Math.min (separatorIndex, periodIndex + 1);", "-\t\t\t\t\tint questionIndex = afterText.indexOf ('?');", "-\t\t\t\t\tif (questionIndex != -1) separatorIndex = Math.min (separatorIndex, questionIndex + 1);", "-\t\t\t\t\tint exclaimationIndex = afterText.indexOf ('!');", "-\t\t\t\t\tif (exclaimationIndex != -1) separatorIndex = Math.min (separatorIndex, exclaimationIndex + 1);", "-\t\t\t\t\tendBounds += separatorIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OS.ATK_TEXT_BOUNDARY_WORD_START:", "-\t\t\t\t\t// TODO ask the client for eligible separators?", "-\t\t\t\t\tint separatorIndex = afterText.length ();", "-\t\t\t\t\tint spaceIndex = afterText.indexOf (' ');", "-\t\t\t\t\tif (spaceIndex != -1) separatorIndex = Math.min (separatorIndex, spaceIndex);", "-\t\t\t\t\tint newlineIndex = afterText.indexOf ('\\n');", "-\t\t\t\t\tif (newlineIndex != -1) separatorIndex = Math.min (separatorIndex, newlineIndex);", "-\t\t\t\t\tendBounds += separatorIndex;", "+\t\t\t\t\tint wordEnd1 = getIndexOfChar (text, \" !?.\\n\", offset);", "+\t\t\t\t\tif (wordEnd1 == -1) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tstartBounds = wordEnd1;", "+\t\t\t\t\tint wordEnd2 = wordEnd1;", "+\t\t\t\t\twhile (wordEnd2 < length) {", "+\t\t\t\t\t\tchar current = text.charAt (wordEnd2); ", "+\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "+\t\t\t\t\t\twordEnd2++;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (wordEnd2 == length) {", "+\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\twordEnd2 = getIndexOfChar (text, \" !?.\\n\", wordEnd2);", "+\t\t\t\t\tif (wordEnd2 == -1) {", "+\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tendBounds = wordEnd2;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+", "+\t\t\t\tcase OS.ATK_TEXT_BOUNDARY_SENTENCE_START: {", "+\t\t\t\t\tint sentenceStart1 = getIndexOfChar (text, \"!?.\", offset);", "+\t\t\t\t\tif (sentenceStart1 == -1) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (sentenceStart1 < length) {", "+\t\t\t\t\t\tchar current = text.charAt (sentenceStart1); ", "+\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "+\t\t\t\t\t\tsentenceStart1++;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (sentenceStart1 == length) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tstartBounds = sentenceStart1;", "+\t\t\t\t\tint sentenceStart2 = getIndexOfChar (text, \"!?.\", sentenceStart1);", "+\t\t\t\t\tif (sentenceStart2 == -1) {", "+\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (sentenceStart2 < length) {", "+\t\t\t\t\t\tchar current = text.charAt (sentenceStart2); ", "+\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "+\t\t\t\t\t\tsentenceStart2++;", "+\t\t\t\t\t}", "+\t\t\t\t\tendBounds = sentenceStart2;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+", "+\t\t\t\tcase OS.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "+\t\t\t\t\tint sentenceEnd1 = getIndexOfChar (text, \"!?.\", offset);", "+\t\t\t\t\tif (sentenceEnd1 == -1) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tstartBounds = sentenceEnd1;", "+\t\t\t\t\tint sentenceEnd2 = sentenceEnd1;", "+\t\t\t\t\twhile (sentenceEnd2 < length) {", "+\t\t\t\t\t\tchar current = text.charAt (sentenceEnd2); ", "+\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "+\t\t\t\t\t\tsentenceEnd2++;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (sentenceEnd2 == length) {", "+\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tsentenceEnd2 = getIndexOfChar (text, \"!?.\", sentenceEnd2);", "+\t\t\t\t\tif (sentenceEnd2 == -1) {", "+\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tendBounds = sentenceEnd2;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+", "+\t\t\t\tcase OS.ATK_TEXT_BOUNDARY_LINE_START: {", "+\t\t\t\t\tint lineStart1 = text.indexOf ('\\n', offset);", "+\t\t\t\t\tif (lineStart1 == -1) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (lineStart1 < length) {", "+\t\t\t\t\t\tif (text.charAt (lineStart1) != '\\n') break;", "+\t\t\t\t\t\tlineStart1++;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (lineStart1 == length) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tstartBounds = lineStart1;", "+\t\t\t\t\tint lineStart2 = text.indexOf ('\\n', lineStart1);", "+\t\t\t\t\tif (lineStart2 == -1) {", "+\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\twhile (lineStart2 < length) {", "+\t\t\t\t\t\tif (text.charAt (lineStart2) != '\\n') break;", "+\t\t\t\t\t\tlineStart2++;", "+\t\t\t\t\t}", "+\t\t\t\t\tendBounds = lineStart2;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase OS.ATK_TEXT_BOUNDARY_LINE_END: {", "+\t\t\t\t\tint lineEnd1 = text.indexOf ('\\n', offset);", "+\t\t\t\t\tif (lineEnd1 == -1) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tstartBounds = lineEnd1;", "+\t\t\t\t\tint lineEnd2 = lineEnd1;", "+\t\t\t\t\twhile (lineEnd2 < length) {", "+\t\t\t\t\t\tif (text.charAt (lineEnd2) != '\\n') break;", "+\t\t\t\t\t\tlineEnd2++;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (lineEnd2 == length) {", "+\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tlineEnd2 = text.indexOf ('\\n', lineEnd2);", "+\t\t\t\t\tif (lineEnd2 == -1) {", "+\t\t\t\t\t\tendBounds = length;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tendBounds = lineEnd2;", "+\t\t\t\t\t}", "-\t\t\tOS.memmove (start_offset, new int[] {offset}, 4);", "-\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "-//\t\t\ttext = text.substring (start_offset, end_offset);", "+//\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "+//\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "+\t\t\ttext = text.substring (startBounds, endBounds);", "+System.out.println(\"result: \\\"\" + text + \"\\\"\");", "-//\t\t\tTODO gnopernicus bug? freeing previous string can cause gp", "+\t\t\t// TODO gnopernicus bug? freeing previous string can cause gp"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f736d5593e7a725ace9eff7070effb9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "b40aaea056def887e2580119f19385d674e3e5e8", "commitAfterChange": "ec0fd72dfafa3580c8b3685a082cc525b5e48635", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tint atkText_get_text_after_offset (int offset, int boundary_type, int start_offset, int end_offset)", "signatureAfterChange": "  \tint atkText_get_text_after_offset (int offset, int boundary_type, int start_offset, int end_offset)", "diff": ["-\t\t\t\t\tint wordStart1 = getIndexOfChar (text, \" !?.\\n\", offset);", "+\t\t\t\t\tint wordStart1 = nextIndexOfChar (text, \" !?.\\n\", offset);", "-\t\t\t\t\twhile (wordStart1 < length) {", "-\t\t\t\t\t\tchar current = text.charAt (wordStart1); ", "-\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "-\t\t\t\t\t\twordStart1++;", "-\t\t\t\t\t}", "+\t\t\t\t\twordStart1 = nextIndexOfNotChar (text, \" !?.\\n\", wordStart1);", "-\t\t\t\t\tint wordStart2 = getIndexOfChar (text, \" !?.\\n\", wordStart1);", "+\t\t\t\t\tint wordStart2 = nextIndexOfChar (text, \" !?.\\n\", wordStart1);", "-\t\t\t\t\twhile (wordStart2 < length) {", "-\t\t\t\t\t\tchar current = text.charAt (wordStart2); ", "-\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "-\t\t\t\t\t\twordStart2++;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = wordStart2;", "+\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \" !?.\\n\", wordStart2);", "-\t\t\t\t\tint wordEnd1 = getIndexOfChar (text, \" !?.\\n\", offset);", "+\t\t\t\t\tint wordEnd1 = nextIndexOfChar (text, \" !?.\\n\", offset);", "-\t\t\t\t\tstartBounds = wordEnd1;", "-\t\t\t\t\tint wordEnd2 = wordEnd1;", "-\t\t\t\t\twhile (wordEnd2 < length) {", "-\t\t\t\t\t\tchar current = text.charAt (wordEnd2); ", "-\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "-\t\t\t\t\t\twordEnd2++;", "+\t\t\t\t\twordEnd1 = nextIndexOfNotChar (text, \"!?.\", wordEnd1);", "+\t\t\t\t\tif (wordEnd1 == length) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tstartBounds = wordEnd1;", "+\t\t\t\t\tint wordEnd2 = nextIndexOfNotChar (text, \" \\n\", wordEnd1);", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\twordEnd2 = nextIndexOfChar (text, \" !?.\\n\", wordEnd2);", "+\t\t\t\t\tif (wordEnd2 == -1) {", "-\t\t\t\t\twordEnd2 = getIndexOfChar (text, \" !?.\\n\", wordEnd2);", "-\t\t\t\t\tif (wordEnd2 == -1) {", "-\t\t\t\t\t\tendBounds = length;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tendBounds = wordEnd2;", "-\t\t\t\t\t}", "+\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \"!?.\", wordEnd2);", "-", "-\t\t\t\t\tint sentenceStart1 = getIndexOfChar (text, \"!?.\", offset);", "+\t\t\t\t\tint sentenceStart1 = nextIndexOfChar (text, \"!?.\", offset);", "-\t\t\t\t\twhile (sentenceStart1 < length) {", "-\t\t\t\t\t\tchar current = text.charAt (sentenceStart1); ", "-\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "-\t\t\t\t\t\tsentenceStart1++;", "-\t\t\t\t\t}", "+\t\t\t\t\tsentenceStart1 = nextIndexOfNotChar (text, \" !?.\\n\", sentenceStart1);", "-\t\t\t\t\tint sentenceStart2 = getIndexOfChar (text, \"!?.\", sentenceStart1);", "+\t\t\t\t\tint sentenceStart2 = nextIndexOfChar (text, \"!?.\", sentenceStart1);", "-\t\t\t\t\twhile (sentenceStart2 < length) {", "-\t\t\t\t\t\tchar current = text.charAt (sentenceStart2); ", "-\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "-\t\t\t\t\t\tsentenceStart2++;", "-\t\t\t\t\t}", "-\t\t\t\t\tendBounds = sentenceStart2;", "+\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \" !?.\\n\", sentenceStart2);", "-", "-\t\t\t\t\tint sentenceEnd1 = getIndexOfChar (text, \"!?.\", offset);", "+\t\t\t\t\tint sentenceEnd1 = nextIndexOfChar (text, \"!?.\", offset);", "-\t\t\t\t\tstartBounds = sentenceEnd1;", "-\t\t\t\t\tint sentenceEnd2 = sentenceEnd1;", "-\t\t\t\t\twhile (sentenceEnd2 < length) {", "-\t\t\t\t\t\tchar current = text.charAt (sentenceEnd2); ", "-\t\t\t\t\t\tif (current != ' ' && current != '!' && current != '?' && current != '.' && current != '\\n') break;", "-\t\t\t\t\t\tsentenceEnd2++;", "+\t\t\t\t\tsentenceEnd1 = nextIndexOfNotChar (text, \"!?.\", sentenceEnd1);", "+\t\t\t\t\tif (sentenceEnd1 == length) {", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tstartBounds = sentenceEnd1;", "+\t\t\t\t\tint sentenceEnd2 = nextIndexOfNotChar (text, \" \\n\", sentenceEnd1);", "+\t\t\t\t\t\tstartBounds = endBounds = length;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tsentenceEnd2 = nextIndexOfChar (text, \"!?.\", sentenceEnd2);", "+\t\t\t\t\tif (sentenceEnd2 == -1) {", "-\t\t\t\t\tsentenceEnd2 = getIndexOfChar (text, \"!?.\", sentenceEnd2);", "-\t\t\t\t\tif (sentenceEnd2 == -1) {", "-\t\t\t\t\t\tendBounds = length;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tendBounds = sentenceEnd2;", "-\t\t\t\t\t}", "+\t\t\t\t\tendBounds = nextIndexOfNotChar (text, \"!?.\", sentenceEnd2);", "-", "-\t\t\t\t\twhile (lineStart1 < length) {", "-\t\t\t\t\t\tif (text.charAt (lineStart1) != '\\n') break;", "-\t\t\t\t\t\tlineStart1++;", "-\t\t\t\t\t}", "+\t\t\t\t\tlineStart1 = nextIndexOfNotChar (text, \"\\n\", lineStart1);", "-\t\t\t\t\twhile (lineStart2 < length) {", "-\t\t\t\t\t\tif (text.charAt (lineStart2) != '\\n') break;", "-\t\t\t\t\t\tlineStart2++;", "-\t\t\t\t\t}", "+\t\t\t\t\tlineStart2 = nextIndexOfNotChar (text, \"\\n\", lineStart2);", "-\t\t\t\t\tint lineEnd1 = text.indexOf ('\\n', offset);", "+\t\t\t\t\tint lineEnd1 = nextIndexOfChar (text, \"\\n\", offset);", "-\t\t\t\t\tint lineEnd2 = lineEnd1;", "-\t\t\t\t\twhile (lineEnd2 < length) {", "-\t\t\t\t\t\tif (text.charAt (lineEnd2) != '\\n') break;", "-\t\t\t\t\t\tlineEnd2++;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (lineEnd2 == length) {", "+\t\t\t\t\tif (startBounds == length) {", "-\t\t\t\t\tlineEnd2 = text.indexOf ('\\n', lineEnd2);", "+\t\t\t\t\tint lineEnd2 = nextIndexOfChar (text, \"\\n\", lineEnd1 + 1);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tendBounds = lineEnd2;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tendBounds = lineEnd2;", "-//\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "-//\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "+\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "+\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "-System.out.println(\"result: \\\"\" + text + \"\\\"\");"]}], "num": 17596}
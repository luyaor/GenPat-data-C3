{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41efedfefb37c1253121c2544f443a21", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9710b480ab0daa710e73fbfe6324b600", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "b796db7a88d068fbce3590cf91dcc3e9c7f9c320", "commitAfterChange": "37c57c08e60a278244a46818f49a47ece9a0e524", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 23, "signatureBeforeChange": "  boolean setEventData(int theDrag, DNDEvent event)", "signatureAfterChange": "  boolean setEventData(NSObject draggingState, DNDEvent event)", "diff": ["-boolean setEventData(int theDrag, DNDEvent event) {", "-//\tif (theDrag == 0) return false;", "-//\t", "-//\t// get allowed operations", "-//\tint style = getStyle();", "-//\tint[] outActions = new int[1];", "-//\tOS.GetDragAllowableActions(theDrag, outActions);", "-//\tint operations = osOpToOp(outActions[0]) & style;", "-//\tif (operations == DND.DROP_NONE) return false;", "-//\t", "-//\t//get current operation", "-//\tint operation =  getOperationFromKeyState(theDrag);", "-//\tkeyOperation = operation;", "-//\tif (operation == DND.DROP_DEFAULT) {", "-//\t\t if ((style & DND.DROP_DEFAULT) == 0) {", "-//\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "-//\t\t }", "-//\t} else {", "-//\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "-//\t}", "-//\t", "-//\t// get allowed transfer types", "-//\tshort[] numItems = new short[1];", "-//\tOS.CountDragItems(theDrag, numItems);", "-//\tint[] flavors = new int[10];", "-//\tint index = -1;", "-//\t//Get a unique list of flavors", "-//\tfor (short i = 0; i < numItems[0]; i++) {", "-//\t\tint[] theItemRef = new int[1];", "-//\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "-//\t\tshort[] numFlavors = new short[1];", "-//\t\tOS.CountDragItemFlavors(theDrag, theItemRef[0], numFlavors);", "-//\t\tint[] theType = new int[1];", "-//\t\tfor (int j = 0; j < numFlavors[0]; j++) {", "-//\t\t\ttheType[0] = 0;", "-//\t\t\tif (OS.GetFlavorType(theDrag, theItemRef[0], (short) (j+1), theType) == OS.noErr) {", "-//\t\t\t\tboolean unique = true;", "-//\t\t\t\tfor (int k = 0; k < flavors.length; k++) {", "-//\t\t\t\t\tif (flavors[k] == theType[0]) {", "-//\t\t\t\t\t\tunique = false;", "-//\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t\tif (unique) {", "-//\t\t\t\t\tif (index == flavors.length - 1) {", "-//\t\t\t\t\t\tint[] temp = new int[flavors.length + 10];", "-//\t\t\t\t\t\tSystem.arraycopy(flavors, 0, temp, 0, flavors.length);", "-//\t\t\t\t\t\tflavors = temp;", "-//\t\t\t\t\t}", "-//\t\t\t\t\tflavors[++index] = theType[0];", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\tif (index == -1) return false;", "-//\t", "-//\tTransferData[] dataTypes = new TransferData[index+1];", "-//\tindex = -1;", "-//\tfor (int i = 0; i < dataTypes.length; i++) {", "-//\t\tif (flavors[i] != 0) {", "-//\t\t\tTransferData data = new TransferData();", "-//\t\t\tdata.type = flavors[i];", "-//\t\t\tfor (int j = 0; j < transferAgents.length; j++) {", "-//\t\t\t\tTransfer transfer = transferAgents[j];", "-//\t\t\t\tif (transfer != null && transfer.isSupportedType(data)) {", "-//\t\t\t\t\tdataTypes[++index] = data;", "-//\t\t\t\t\tbreak;", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\tif (index == -1) return false;", "-//\t", "-//\tif (index < dataTypes.length - 1) {", "-//\t\tTransferData[] temp = new TransferData[index + 1];", "-//\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "-//\t\tdataTypes = temp;", "-//\t}", "-//", "-//\tPoint mouse = new Point();", "-//\tOS.GetDragMouse(theDrag, mouse, null);", "+boolean setEventData(NSObject draggingState, DNDEvent event) {", "+\tif (draggingState == null) return false;", "-\tint operation = DND.DROP_NONE;", "+\t// get allowed operations", "+\tint style = getStyle();", "+\tint allowedActions = draggingState.draggingSourceOperationMask();", "+\tint operations = osOpToOp(allowedActions) & style;", "+\tif (operations == DND.DROP_NONE) return false;", "+", "+\t// get current operation", "+\tint operation = getOperationFromKeyState();", "+\tkeyOperation = operation;", "+\tif (operation == DND.DROP_DEFAULT) {", "+\t\t if ((style & DND.DROP_DEFAULT) == 0) {", "+\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "+\t\t }", "+\t} else {", "+\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "+\t}", "+\t", "+\t", "+\t// get allowed transfer types", "+\tNSPasteboard dragPBoard = draggingState.draggingPasteboard();", "+\tNSArray draggedTypes = dragPBoard.types();", "+\tif (draggedTypes == null) return false;", "+\t", "+\tint draggedTypeCount = draggedTypes.count();", "+\t", "+\tTransferData[] dataTypes = new TransferData[draggedTypeCount];", "+\tint index = -1;", "+\tfor (int i = 0; i < draggedTypeCount; i++) {", "+\t\tid draggedType = draggedTypes.objectAtIndex(i);", "+\t\tNSString nativeDataType = new NSString(draggedType);", "+\t\tTransferData data = new TransferData();", "+\t\tdata.type = Transfer.registerType(nativeDataType.getString());", "+\t\t", "+\t\tfor (int j = 0; j < transferAgents.length; j++) {", "+\t\t\tTransfer transfer = transferAgents[j];", "+\t\t\tif (transfer != null && transfer.isSupportedType(data)) {", "+\t\t\t\tdataTypes[++index] = data;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (index == -1) return false;", "+\t", "+\tif (index < dataTypes.length - 1) {", "+\t\tTransferData[] temp = new TransferData[index + 1];", "+\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "+\t\tdataTypes = temp;", "+\t}", "+", "+\t// Convert from window-relative to global coordinates, and flip it.", "+\tNSPoint mouse = draggingState.draggingLocation();", "+\tNSPoint globalMouse = draggingState.draggingDestinationWindow().convertBaseToScreen(mouse);", "+\tNSArray screens = NSScreen.screens();", "+\tNSRect screenRect = new NSScreen(screens.objectAtIndex(0)).frame();", "+\tglobalMouse.y = screenRect.height - globalMouse.y;", "-//\tevent.x = mouse.h;", "-//\tevent.y = mouse.v;", "+\tevent.x = (int)globalMouse.x;", "+\tevent.y = (int)globalMouse.y;", "-//\tevent.dataTypes = dataTypes;", "-//\tevent.dataType = dataTypes[0];", "-//\tevent.operations = operations;", "+\tevent.dataTypes = dataTypes;", "+\tevent.dataType = dataTypes[0];", "+\tevent.operations = operations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e76b55363ec5964477906b32fb1c6b32", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "14581ca5a7841e362a4bb6a68c76d00675c70760", "commitAfterChange": "2882bbd7423650466596733b7f7109e5d58042c8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static Program [] getPrograms ()", "signatureAfterChange": " public static Program [] getPrograms ()", "diff": ["-\treturn new Program [] {", "-\t\tgetProgram(\".html\"),", "-\t};", "+\tHashtable bundles = new Hashtable();", "+\tString[] extensions = getExtensions();", "+\tfor (int i = 0; i < extensions.length; i++) {", "+\t\tString extension = extensions[i];", "+\t\tchar[] chars = new char[extension.length() - 1];", "+\t\textension.getChars(1, extension.length(), chars, 0);", "+\t\tint ext = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "+\t\tif (ext != 0) {", "+\t\t\tint utis = OS.UTTypeCreateAllIdentifiersForTag(OS.kUTTagClassFilenameExtension(), ext, 0);", "+\t\t\tif (utis != 0) {", "+\t\t\t\tint utiCount = OS.CFArrayGetCount(utis);", "+\t\t\t\tfor (int j = 0; j < utiCount; j++) {", "+\t\t\t\t\tint uti = OS.CFArrayGetValueAtIndex(utis, j);", "+\t\t\t\t\tif (uti != 0) {", "+\t\t\t\t\t\tint apps = OS.LSCopyAllRoleHandlersForContentType(uti, 0xFFFFFFFF);", "+\t\t\t\t\t\tif (apps != 0) {", "+\t\t\t\t\t\t\tint appCount = OS.CFArrayGetCount(apps);", "+\t\t\t\t\t\t\tfor (int k = 0; k < appCount; k++) {", "+\t\t\t\t\t\t\t\tint app = OS.CFArrayGetValueAtIndex(apps, k);", "+\t\t\t\t\t\t\t\tif (app != 0) {", "+\t\t\t\t\t\t\t\t\tint length = OS.CFStringGetLength(app);", "+\t\t\t\t\t\t\t\t\tif (length != 0) {", "+\t\t\t\t\t\t\t\t\t\tchar[] buffer= new char[length];", "+\t\t\t\t\t\t\t\t\t\tCFRange range = new CFRange();", "+\t\t\t\t\t\t\t\t\t\trange.length = length;", "+\t\t\t\t\t\t\t\t\t\tOS.CFStringGetCharacters(app, range, buffer);", "+\t\t\t\t\t\t\t\t\t\tString bundleID = new String(buffer);", "+\t\t\t\t\t\t\t\t\t\tif (bundles.get(bundleID) == null) {", "+\t\t\t\t\t\t\t\t\t\t\tbyte[] fsRef = new byte[80];", "+\t\t\t\t\t\t\t\t\t\t\tif (OS.LSFindApplicationForInfo(OS.kLSUnknownCreator, app,\t0, fsRef, null) == OS.noErr) {", "+\t\t\t\t\t\t\t\t\t\t\t\tProgram program = getProgram(fsRef);", "+\t\t\t\t\t\t\t\t\t\t\t\tbundles.put(bundleID, program);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.CFRelease(apps);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.CFRelease(utis);", "+\t\t\t}", "+\t\t\tOS.CFRelease(ext);", "+\t\t}", "+\t}", "+\tint count = 0;", "+\tProgram[] programs = new Program[bundles.size()];", "+\tEnumeration values = bundles.elements();", "+\twhile (values.hasMoreElements()) {", "+\t\tprograms[count++] = (Program)values.nextElement();", "+\t}", "+\treturn programs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bab050b35a6c22ee0256384c7017d7d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "e19b8929298db4194771a475b4b9ef56a8238374", "commitAfterChange": "ca0c5209be7fe694c5578ad160491b05c77a1894", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void drawRectangles ()", "signatureAfterChange": " void drawRectangles ()", "diff": ["-\tfor (int i = 0; i < rectShapes.length; i++) {", "+\tRectangle bounds = this.bounds;", "+\tif (bounds == null) return;", "+\tint children = OS.Panel_Children (canvasHandle);", "+\tOS.UIElementCollection_Clear (children);", "+\tif (parent != null) {", "+\t\tRectangle rect = parent.getClientArea ();", "+\t\trect.intersect (bounds);", "+\t\tbounds = rect;", "+\t\tPoint pt = display.map (parent, null, bounds.x, bounds.y);", "+\t\tOS.Popup_HorizontalOffset (handle, pt.x);", "+\t\tOS.Popup_VerticalOffset (handle, pt.y);", "+\t} else {", "+\t\tOS.Popup_HorizontalOffset (handle, bounds.x);", "+\t\tOS.Popup_VerticalOffset (handle, bounds.y);", "+\t}", "+\tOS.FrameworkElement_Width (handle, bounds.width);", "+\tOS.FrameworkElement_Height (handle, bounds.height);", "+\tint stroke, brush;", "+\tif (stippled) {", "+\t\tstroke = 3;", "+\t\tint pixelFormat = OS.PixelFormats_BlackWhite ();", "+\t\tbyte [] buffer = {-86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0};", "+\t\tint image = OS.BitmapSource_Create (8, 8, 96, 96, pixelFormat, 0, buffer, buffer.length, 2);\t", "+\t\tOS.GCHandle_Free (pixelFormat);", "+\t\tbrush = OS.gcnew_ImageBrush (image);", "+\t\tOS.TileBrush_TileMode (brush, OS.TileMode_Tile);", "+\t\tOS.TileBrush_Stretch (brush, OS.Stretch_Fill);", "+\t\tOS.TileBrush_ViewportUnits (brush, OS.BrushMappingMode_Absolute);", "+\t\tint rect = OS.gcnew_Rect (0, 0, OS.BitmapSource_PixelWidth(image), OS.BitmapSource_PixelHeight(image));", "+\t\tOS.TileBrush_Viewport (brush, rect);", "+\t\tOS.GCHandle_Free (rect);", "+\t\tOS.GCHandle_Free (image);", "+\t} else {", "+\t\tstroke = 1;", "+\t\tbrush = OS.Brushes_Black ();", "+\t}", "+\tfor (int i = 0; i < rectangles.length; i++) {", "+\t\tint child = OS.gcnew_Rectangle ();", "+\t\tOS.UIElementCollection_Add (children, child);", "+\t\tOS.Shape_StrokeThickness (child, stroke);", "+\t\tOS.Shape_Stroke (child, brush);", "-\t\tint child = rectShapes [i];", "-\t\tOS.Canvas_SetLeft (child, rect.x);", "-\t\tOS.Canvas_SetTop (child, rect.y);", "+\t\tOS.Canvas_SetLeft (child, rect.x - bounds.x);", "+\t\tOS.Canvas_SetTop (child, rect.y - bounds.y);", "+\t\tOS.GCHandle_Free (child);", "+\tOS.GCHandle_Free (brush);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8ffe77932fdd45cb5bfa895e8e591d1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "ea15a960a853001410e58a3d24c8aee2da7a0620", "commitAfterChange": "20653c6768e7a089a6fded9c39628f2ae0b74cbf", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  int transparentProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int transparentProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\t\t\tbreak;", "+\t\tcase OS.WM_PAINT:", "+\t\t\tif (parent == null && !OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\tPAINTSTRUCT ps = new PAINTSTRUCT();", "+\t\t\t\tint hDC = OS.BeginPaint (hwnd, ps);", "+\t\t\t\tint hBitmap = 0, hBrush = 0, oldBrush = 0;\t\t\t", "+\t\t\t\tint transparentBrush = OS.CreateSolidBrush(0xFFFFFF);", "+\t\t\t\toldBrush = OS.SelectObject (hDC, transparentBrush);", "+\t\t\t\tOS.PatBlt (hDC, ps.left, ps.top, ps.right - ps.left, ps.bottom - ps.top, OS.PATCOPY);", "+\t\t\t\tOS.SelectObject (hDC, oldBrush);", "+\t\t\t\tOS.DeleteObject (transparentBrush);", "+\t\t\t\tint bandWidth = 1;", "+\t\t\t\tif (stippled) {", "+\t\t\t\t\tbandWidth = 3;", "+\t\t\t\t\tbyte [] bits = {-86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0};", "+\t\t\t\t\thBitmap = OS.CreateBitmap (8, 8, 1, 1, bits);", "+\t\t\t\t\thBrush = OS.CreatePatternBrush (hBitmap);", "+\t\t\t\t\toldBrush = OS.SelectObject (hDC, hBrush);", "+\t\t\t\t\tOS.SetBkColor (hDC, 0xF0F0F0);", "+\t\t\t\t} else {", "+\t\t\t\t\toldBrush = OS.SelectObject (hDC, OS.GetStockObject(OS.BLACK_BRUSH));", "+\t\t\t\t}", "+\t\t\t\tRectangle[] rects = this.rectangles;", "+\t\t\t\tfor (int i=0; i<rects.length; i++) {", "+\t\t\t\t\tRectangle rect = rects [i];", "+\t\t\t\t\tOS.PatBlt (hDC, rect.x, rect.y, rect.width, bandWidth, OS.PATCOPY);", "+\t\t\t\t\tOS.PatBlt (hDC, rect.x, rect.y + bandWidth, bandWidth, rect.height - (bandWidth * 2), OS.PATCOPY);", "+\t\t\t\t\tOS.PatBlt (hDC, rect.x + rect.width - bandWidth, rect.y + bandWidth, bandWidth, rect.height - (bandWidth * 2), OS.PATCOPY);", "+\t\t\t\t\tOS.PatBlt (hDC, rect.x, rect.y + rect.height - bandWidth, rect.width, bandWidth, OS.PATCOPY);", "+\t\t\t\t}", "+\t\t\t\tOS.SelectObject (hDC, oldBrush);", "+\t\t\t\tif (stippled) {", "+\t\t\t\t\tOS.DeleteObject (hBrush);", "+\t\t\t\t\tOS.DeleteObject (hBitmap);", "+\t\t\t\t}", "+\t\t\t\tOS.EndPaint (hwnd, ps);", "+\t\t\t\treturn 0;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0b2fcc103cb6de5613f97dd9b5462b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "da194abf36dfeaf1cef432501bc0d6c396c87dde", "commitAfterChange": "21af898a5d6ec508de2042508e5800867bc3cbcd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public OleClientSite(Composite parent, int style, String progId, File file)", "signatureAfterChange": " public OleClientSite(Composite parent, int style, String progId, File file)", "diff": ["-\t", "-", "-\t\tif (file == null || file.isDirectory() || !file.exists())", "-\t\t\tOLE.error(OLE.ERROR_INVALID_ARGUMENT);", "-\t\t\t", "+\t\tif (file == null || file.isDirectory() || !file.exists()) OLE.error(OLE.ERROR_INVALID_ARGUMENT);\t\t\t\t", "-\t\t\t// use default mechanism", "-\t\t\t// Open a temporary storage object", "+\t\t\t// Using the same application that created file, therefore, use default mechanism.", "-", "-\t\t\tif (result != COM.S_OK)", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t// use a conversion mechanism", "+\t\t\t// Not using the same application that created file, therefore, copy from original file to a new storage file", "+\t\t\tIStorage storage = null;", "+\t\t\tif (COM.StgIsStorageFile(fileName) == COM.S_OK) {", "+\t\t\t\tint[] address = new int[1];", "+\t\t\t\tint mode = COM.STGM_READ | COM.STGM_TRANSACTED | COM.STGM_SHARE_EXCLUSIVE;", "+\t\t\t\tint result = COM.StgOpenStorage(fileName, 0, mode, 0, 0, address); //Does an AddRef if successful", "+\t\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\tstorage = new IStorage(address[0]);", "+\t\t\t} else {", "+\t\t\t\t// Original file is not a Storage file so copy contents to a stream in a new storage file", "+\t\t\t\tint[] address = new int[1];", "+\t\t\t\tint mode = COM.STGM_READWRITE | COM.STGM_DIRECT | COM.STGM_SHARE_EXCLUSIVE | COM.STGM_CREATE;", "+\t\t\t\tint result = COM.StgCreateDocfile(null, mode | COM.STGM_DELETEONRELEASE, 0, address); // Increments ref count if successful", "+\t\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\tstorage = new IStorage(address[0]);", "+\t\t\t\t// Create a stream on the storage object.", "+\t\t\t\t// Word does not follow the standard and does not use \"CONTENTS\" as the name of", "+\t\t\t\t// its primary stream", "+\t\t\t\tString streamName = \"CONTENTS\"; //$NON-NLS-1$", "+\t\t\t\tGUID wordGUID = getClassID(WORDPROGID);", "+\t\t\t\tif (COM.IsEqualGUID(appClsid, wordGUID)) streamName = \"WordDocument\"; //$NON-NLS-1$", "+\t\t\t\taddress = new int[1];", "+\t\t\t\tresult = storage.CreateStream(streamName, mode, 0, 0, address); // Increments ref count if successful", "+\t\t\t\tif (result != COM.S_OK) {", "+\t\t\t\t\tstorage.Release();", "+\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\t}", "+\t\t\t\tIStream stream = new IStream(address[0]);", "+\t\t\t\ttry {", "+\t\t\t\t\t// Copy over data in file to named stream", "+\t\t\t\t\tFileInputStream fileInput = new FileInputStream(file);", "+\t\t\t\t\tint increment = 1024*4;", "+\t\t\t\t\tbyte[] buffer = new byte[increment];", "+\t\t\t\t\tint count = 0;", "+\t\t\t\t\twhile((count = fileInput.read(buffer)) > 0){", "+\t\t\t\t\t\tint pv = COM.CoTaskMemAlloc(count);", "+\t\t\t\t\t\tOS.MoveMemory(pv, buffer, count);", "+\t\t\t\t\t\tresult = stream.Write(pv, count, null) ;", "+\t\t\t\t\t\tCOM.CoTaskMemFree(pv);", "+\t\t\t\t\t\tif (result != COM.S_OK) {", "+\t\t\t\t\t\t\tfileInput.close();", "+\t\t\t\t\t\t\tstream.Release();", "+\t\t\t\t\t\t\tstorage.Release();", "+\t\t\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tfileInput.close();", "+\t\t\t\t\tstream.Commit(COM.STGC_DEFAULT);", "+\t\t\t\t\tstream.Release();", "+\t\t\t\t} catch (IOException err) {", "+\t\t\t\t\tstream.Release();", "+\t\t\t\t\tstorage.Release();", "+\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t// Word does not follow the standard and does not use \"CONTENTS\" as the name of", "-\t\t\t// its primary stream", "-\t\t\tString contentStream = \"CONTENTS\"; //$NON-NLS-1$", "-\t\t\tGUID wordGUID = getClassID(WORDPROGID);", "-\t\t\tif (COM.IsEqualGUID(appClsid, wordGUID)) contentStream = \"WordDocument\"; //$NON-NLS-1$", "-", "-\t\t\t// Copy over the contents of the file into a new temporary storage object", "-\t\t\tOleFile oleFile = new OleFile(file, contentStream, OleFile.READ);", "-\t\t\tIStorage storage = oleFile.getRootStorage();", "-\t\t\tstorage.AddRef();", "-\t\t\tif (result != COM.S_OK)", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\toleFile.dispose();", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\tif (result != COM.S_OK){\t\t", "-\t\t\t\ttempStorage.Release();", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t}", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-", "-\t\t\tif (result != COM.S_OK){", "-\t\t\t\ttempStorage.Release();", "-\t\t\t\tobjIUnknown.Release();", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t}", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-", "-\t\t\tif (result != COM.S_OK){", "-\t\t\t\ttempStorage.Release();", "-\t\t\t\ttempStorage = null;", "-\t\t\t\tobjIUnknown.Release();", "-\t\t\t\tobjIUnknown = null;", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t}", "+\t\t\tif (result != COM.S_OK)OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a96d098060a0361cc5c84d1134431d25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolTip.java", "commitBeforeChange": "4df24be727bf7df22d7972cb27d4cc6882d010fa", "commitAfterChange": "9a3f1e08acae6a5f050926a48e53d50c103a85e9", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  int gtk_expose_event (int widget, int eventPtr)", "signatureAfterChange": "  int gtk_expose_event (int widget, int eventPtr)", "diff": ["-\t//TODO: Use Cairo", "-\tint /*long*/ gdkGC = OS.gdk_gc_new (window);", "-\tOS.gdk_draw_polygon (window, gdkGC, 0, borderPolygon, borderPolygon.length / 2);", "+\tif (OS.USE_CAIRO) {", "+\t\tint /*long*/ cairo = OS.gdk_cairo_create(window);", "+\t\tif (cairo == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tint count = borderPolygon.length / 2;", "+\t\tif (count == 0) return 0;", "+\t\tCairo.cairo_set_line_width(cairo, 1);", "+\t\tCairo.cairo_move_to(cairo, borderPolygon[0], borderPolygon[1]);", "+\t\tfor (int i=1,j=2; i<count; i++,j+=2) {", "+\t\t\tCairo.cairo_line_to(cairo, borderPolygon[j]+0.5, borderPolygon[j+1]+0.5);", "+\t\t}", "+\t\tCairo.cairo_close_path(cairo);", "+\t\tCairo.cairo_stroke(cairo);", "+\t\tif (spikeAbove) y += TIP_HEIGHT;", "+\t\tif (layoutText != 0) {", "+\t\t\tbyte[] buffer = null;", "+\t\t\tint id = style & (SWT.ICON_ERROR | SWT.ICON_INFORMATION | SWT.ICON_WARNING);", "+\t\t\tswitch (id) {", "+\t\t\t\tcase SWT.ICON_ERROR: buffer = Converter.wcsToMbcs (null, \"gtk-dialog-error\", true); break; ", "+\t\t\t\tcase SWT.ICON_INFORMATION: buffer = Converter.wcsToMbcs (null, \"gtk-dialog-info\", true); break;", "+\t\t\t\tcase SWT.ICON_WARNING: buffer = Converter.wcsToMbcs (null, \"gtk-dialog-warning\", true); break;", "+\t\t\t}", "+\t\t\tif (buffer != null) {", "+\t\t\t\tint /*long*/ style = OS.gtk_widget_get_default_style ();", "+\t\t\t\tint /*long*/ pixbuf = OS.gtk_icon_set_render_icon (", "+\t\t\t\tOS.gtk_icon_factory_lookup_default (buffer), ", "+\t\t\t\t\t\t\tstyle,", "+\t\t\t\t\t\t\tOS.GTK_TEXT_DIR_NONE, ", "+\t\t\t\t\t\t\tOS.GTK_STATE_NORMAL, ", "+\t\t\t\t\t\t\tOS.GTK_ICON_SIZE_MENU,", "+\t\t\t\t\t\t\t0, ", "+\t\t\t\t\t\t\t0);", "+ \t\t\t\tOS.gdk_cairo_set_source_pixbuf(cairo, pixbuf, x, y);", "+ \t\t\t\tCairo.cairo_paint (cairo);", "+\t\t\t\tOS.g_object_unref (pixbuf);", "+\t\t\t\tx += IMAGE_SIZE;", "+\t\t\t}", "+\t\t\tx += INSET;", "+\t\t\tint [] w = new int [1], h = new int [1];", "+\t\t\tColor foreground = display.getSystemColor (SWT.COLOR_INFO_FOREGROUND);", "+\t\t\tOS.gdk_cairo_set_source_color(cairo,foreground.handle);", "+\t\t\tCairo.cairo_move_to(cairo, x,y );", "+\t\t\tOS.pango_cairo_show_layout(cairo, layoutText);", "+\t\t\tOS.pango_layout_get_size (layoutText, w, h);", "+\t\t\ty += 2 * PADDING + Math.max (IMAGE_SIZE, OS.PANGO_PIXELS (h [0]));", "+\t\t}", "+\t\tif (layoutMessage != 0) {", "+\t\t\tx = BORDER + PADDING + INSET;", "+\t\t\tColor foreground = display.getSystemColor (SWT.COLOR_INFO_FOREGROUND);", "+\t\t\tOS.gdk_cairo_set_source_color(cairo,foreground.handle);", "+\t\t\tCairo.cairo_move_to(cairo, x, y);", "+\t\t\tOS.pango_cairo_show_layout(cairo, layoutMessage);", "+\t\t}", "+\t\tCairo.cairo_destroy(cairo);", "+\t\treturn 0;", "+\t}", "+\tint /*long*/ gdkGC = OS.gdk_gc_new (window);", "+\tOS.gdk_draw_polygon (window, gdkGC, 0, borderPolygon, borderPolygon.length / 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb483d5bccce2366be15a248c444a165", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "b32f6d5637e0abc87337d749a9730895dc3ee40b", "commitAfterChange": "1c9549e9395bb497449fa4918481145da6c18d6d", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  void initClasses ()", "signatureAfterChange": "  void initClasses ()", "diff": ["-\tint /*long*/ setFrameOriginProc = OS.setFrame_CALLBACK(proc3);", "-\tint /*long*/ setFrameSizeProc = OS.setFrame_CALLBACK(proc3);", "+\tint /*long*/ setFrameOriginProc = OS.setFrameOrigin_CALLBACK(proc3);", "+\tint /*long*/ setFrameSizeProc = OS.setFrameSize_CALLBACK(proc3);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar (cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log (C.PTR_SIZEOF) / Math.log (2)), \"i\");", "+\tOS.class_addIvar (cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f84a07841699c7adb9f100d4991910dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "3be1894e65751f8fdace6da3d386ac8c0f271b36", "commitAfterChange": "8ec8763ff69792db587ad01343e591e017ba32d8", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tif (attributeName.equals (OS.kAXValueAttribute) || attributeName.equals (OS.kAXTitleAttribute)) {", "-\t\t\tString text = getText ();", "-\t\t\tbuffer = new char [text.length ()];", "-\t\t\ttext.getChars (0, buffer.length, buffer, 0);", "+\t\tif (attributeName.equals (OS.kAXValueAttribute)) {", "+\t\t\tbuffer = getText(0, -1);", "+\t\t\t}", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXNumberOfCharactersAttribute)) {", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeSInt32, 4, new int [] {getCharCount()});", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXSelectedTextAttribute)) {", "+\t\t\tPoint sel = getSelection ();", "+\t\t\tbuffer = getText(sel.x, sel.y);", "+\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXSelectedTextRangeAttribute)) {", "+\t\t\tPoint sel = getSelection ();", "+\t\t\trange = new CFRange();", "+\t\t\trange.location = sel.x;", "+\t\t\trange.length = sel.y - sel.x;", "+\t\t\tint valueRef = OS.AXValueCreate(OS.kAXValueCFRangeType, range);", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFTypeRef, 4, new int [] {valueRef});", "+\t\t\tOS.CFRelease(valueRef);", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXStringForRangeParameterizedAttribute)) {", "+\t\t\tint valueRef [] = new int [1];", "+\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeParameter, OS.typeCFTypeRef, null, 4, null, valueRef);", "+\t\t\tif (status == OS.noErr) {", "+\t\t\t\trange = new CFRange();", "+\t\t\t\tboolean ok = OS.AXValueGetValue(valueRef[0], OS.kAXValueCFRangeType, range);", "+\t\t\t\tif (ok) {", "+\t\t\t\t\tbuffer = getText (range.location, range.location + range.length);", "+\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f68b016211bf35ff468b99b4e788eca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fe01df1082b5613213a59b03292c02660626087d", "commitAfterChange": "e771e3576d1e1ba57ba12fa501dc8174c6ca74e8", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "  void initClasses ()", "signatureAfterChange": "  void initClasses ()", "diff": ["-", "+\tint markedRangeProc = OS.markedRange_CALLBACK(proc2);", "+\tint selectedRangeProc = OS.selectedRange_CALLBACK(proc2);", "+\tint setMarkedText_selectedRangeProc = OS.setMarkedText_selectedRange_CALLBACK(proc4);", "+\tint attributedSubstringFromRangeProc = OS.attributedSubstringFromRange_CALLBACK(proc3);", "+\tint characterIndexForPointProc = OS.characterIndexForPoint_CALLBACK(proc3);", "+\tint firstRectForCharacterRangeProc = OS.firstRectForCharacterRange_CALLBACK(proc3);\t", "+\t", "+\tOS.class_addProtocol(cls, OS.objc_getProtocol(\"NSTextInput\"));", "+\t", "+\t//NSTextInput protocol", "+\tOS.class_addMethod(cls, OS.sel_hasMarkedText, proc2, \"@:\");", "+\tOS.class_addMethod(cls, OS.sel_markedRange, markedRangeProc, \"@:\");", "+\tOS.class_addMethod(cls, OS.sel_selectedRange, selectedRangeProc, \"@:\");", "+\tOS.class_addMethod(cls, OS.sel_setMarkedText_1selectedRange_1, setMarkedText_selectedRangeProc, \"@:@{NSRange}\");", "+\tOS.class_addMethod(cls, OS.sel_unmarkText, proc2, \"@:\");", "+\tOS.class_addMethod(cls, OS.sel_validAttributesForMarkedText, proc2, \"@:\");", "+\tOS.class_addMethod(cls, OS.sel_attributedSubstringFromRange_1, attributedSubstringFromRangeProc, \"@:{NSRange}\");", "+\tOS.class_addMethod(cls, OS.sel_insertText_1, proc3, \"@:@\");", "+\tOS.class_addMethod(cls, OS.sel_characterIndexForPoint_1, characterIndexForPointProc, \"@:{NSPoint}\");", "+\tOS.class_addMethod(cls, OS.sel_firstRectForCharacterRange_1, firstRectForCharacterRangeProc, \"@:{NSRange}\");", "+\tOS.class_addMethod(cls, OS.sel_doCommandBySelector_1, proc3, \"@::\");", "+\t", "+\tOS.class_addMethod(cls, OS.sel_insertText_1, proc3, \"@:@\");", "+\tOS.class_addMethod(cls, OS.sel_doCommandBySelector_1, proc3, \"@::\");", "+\tOS.objc_registerClassPair(cls);", "+\t", "+\tclassName = \"SWTEditorView\";", "+\tcls = OS.objc_allocateClassPair(OS.class_NSTextView, className, 0);", "+\tOS.class_addIvar(cls, SWT_OBJECT, OS.PTR_SIZEOF, (byte)(Math.log(OS.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\tOS.class_addMethod(cls, OS.sel_keyDown_1, proc3, \"@:@\");", "+\tOS.class_addMethod(cls, OS.sel_keyUp_1, proc3, \"@:@\");", "+\tOS.class_addMethod(cls, OS.sel_insertText_1, proc3, \"@:@\");", "+\tOS.class_addMethod(cls, OS.sel_doCommandBySelector_1, proc3, \"@::\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f784158833bd88a0468cb9872a456460", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "9e6ed5ddefaae266127428adb6c5fbedbb333dc4", "commitAfterChange": "ccd2d5aea4fb2e484cfeea5d7ce086a6f7e68860", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 86, "signatureBeforeChange": "  void initializeSystemColors ()", "signatureAfterChange": "  void initializeSystemColors ()", "diff": ["+", "+\tif (OS.GTK_VERSION >= OS.VERSION (3, 0, 0)) {", "+\t\tlong /*int*/ tooltipShellHandle = OS.gtk_window_new (OS.GTK_WINDOW_POPUP);", "+\t\tif (tooltipShellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tbyte[] gtk_tooltip = Converter.wcsToMbcs (null, \"gtk-tooltip\", true); //$NON-NLS-1$", "+\t\tOS.gtk_widget_set_name (tooltipShellHandle, gtk_tooltip);", "+\t\tOS.gtk_widget_realize (tooltipShellHandle);", "+\t\tlong /*int*/ context = OS.gtk_widget_get_style_context (tooltipShellHandle);", "+\t\tOS.gtk_style_context_add_class (context, OS.GTK_STYLE_CLASS_TOOLTIP);", "+\t\tGdkRGBA rgba = new GdkRGBA();", "+\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "+\t\tCOLOR_INFO_FOREGROUND = toGdkColor (rgba);", "+\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "+\t\tCOLOR_INFO_BACKGROUND = toGdkColor (rgba);", "+\t\tOS.gtk_widget_destroy (tooltipShellHandle);\t", "+", "+\t\tcontext = OS.gtk_widget_get_style_context (shellHandle);", "+\t\t", "+\t\tCOLOR_WIDGET_DARK_SHADOW = toGdkColor (new GdkRGBA());", "+\t\tOS.gtk_style_context_get_border_color (context, OS.GTK_STATE_FLAG_INSENSITIVE, rgba);", "+\t\tCOLOR_WIDGET_NORMAL_SHADOW = toGdkColor (rgba);", "+\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_INSENSITIVE, rgba);", "+\t\tCOLOR_WIDGET_LIGHT_SHADOW = toGdkColor (rgba);", "+\t\trgba.red = rgba.green = rgba.blue = 1;", "+\t\tCOLOR_WIDGET_HIGHLIGHT_SHADOW = toGdkColor (rgba);", "+\t\t", "+\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "+\t\tCOLOR_WIDGET_FOREGROUND = toGdkColor (rgba);", "+\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "+\t\tCOLOR_WIDGET_BACKGROUND = toGdkColor (rgba);", "+\t\t", "+\t\tOS.gtk_style_context_save (context);", "+\t\tOS.gtk_style_context_add_class(context, OS.GTK_STYLE_CLASS_CELL);", "+\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "+\t\tCOLOR_LIST_FOREGROUND = toGdkColor (rgba);", "+\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "+\t\tCOLOR_LIST_BACKGROUND = toGdkColor (rgba);", "+\t\tOS.gtk_style_context_restore (context);", "+\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_SELECTED, rgba);", "+\t\tCOLOR_LIST_SELECTION_TEXT = toGdkColor (rgba);", "+\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_SELECTED, rgba);", "+\t\tCOLOR_LIST_SELECTION = toGdkColor (rgba);", "+\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_ACTIVE, rgba);", "+\t\tCOLOR_LIST_SELECTION_TEXT_INACTIVE = toGdkColor (rgba);", "+\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_ACTIVE, rgba);", "+\t\tCOLOR_LIST_SELECTION_INACTIVE = toGdkColor (rgba);", "+\t\t", "+\t\tCOLOR_TITLE_FOREGROUND = COLOR_LIST_SELECTION_TEXT;", "+\t\tCOLOR_TITLE_BACKGROUND = COLOR_LIST_SELECTION;", "+\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_SELECTED, rgba);", "+\t\tCOLOR_TITLE_BACKGROUND_GRADIENT = toGdkColor (rgba, 0.66f, 1);", "+\t\t", "+\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_INSENSITIVE, rgba);", "+\t\tCOLOR_TITLE_INACTIVE_FOREGROUND = toGdkColor (rgba);", "+\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_INSENSITIVE, rgba);", "+\t\tCOLOR_TITLE_INACTIVE_BACKGROUND = toGdkColor (rgba);", "+\t\tCOLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT = toGdkColor (rgba, 1, 2f);", "+\t\treturn;", "+\t}", "+", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "511b2bab8e00083587149e5931b234c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "86e590387fc98740eb431ea80c5942750b2c6d0c", "commitAfterChange": "b9e679d47d2b65f7ad52dcb0b148e03cb3e9caf3", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 84, "signatureBeforeChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\tboolean processSegments = false, redraw = false;", "+\tint code;", "+\tif (hooks (SWT.GetSegments) || filters (SWT.GetSegments)) {", "+\t\tswitch (msg) {", "+\t\t\tcase OS.WM_KEYDOWN: {", "+\t\t\t\tswitch (wParam) {", "+\t\t\t\t\tcase OS.VK_DELETE: {", "+\t\t\t\t\t\tprocessSegments = segments != null;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase OS.VK_LEFT:", "+\t\t\t\t\tcase OS.VK_RIGHT: {", "+\t\t\t\t\t\tif (segments != null && OS.GetKeyState (OS.VK_MENU) >= 0) {", "+\t\t\t\t\t\t\tint [] start = new int [1], newStart = new int [1], end = new int [1], newEnd = new int [1];", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\t\t\t\t\t\t\tfor (;;) {", "+\t\t\t\t\t\t\t\tcode = super.windowProc (hwnd, msg, wParam, lParam);", "+\t\t\t\t\t\t\t\tif (code != 1) return code;", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, newStart, newEnd);", "+\t\t\t\t\t\t\t\tif (newStart [0] != start [0] && untranslateOffset (newStart [0]) == untranslateOffset (start [0])) {", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (newEnd [0] != end [0] && untranslateOffset (newEnd [0]) == untranslateOffset (end [0])) {", "+\t\t\t\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn code;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.WM_COPY: {", "+\t\t\t\tprocessSegments = segments != null;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.WM_CHAR: {", "+\t\t\t\tprocessSegments = !ignoreCharacter && OS.GetKeyState (OS.VK_CONTROL) >= 0 && OS.GetKeyState (OS.VK_MENU) >= 0;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.WM_PASTE:", "+\t\t\tcase OS.WM_CUT:", "+\t\t\tcase OS.WM_CLEAR: {", "+\t\t\t\tprocessSegments = true;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (processSegments) {", "+\t\tif (getDrawing () && OS.IsWindowVisible (handle)) {", "+\t\t\tredraw = true;", "+\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\t}", "+\t\tclearSegments (true);", "+\t}", "-\treturn super.windowProc (hwnd, msg, wParam, lParam);", "+\tcode = super.windowProc (hwnd, msg, wParam, lParam);", "+\tif (processSegments) {", "+\t\tapplySegments ();", "+\t\tif (redraw) {", "+\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\tif (OS.IsWinCE) {", "+\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t} else {", "+\t\t\t\tOS.RedrawWindow (handle, null, 0, OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE); ", "+\t\t\t}", "+\t\t}", "+\t\tOS.SendMessage (handle, OS.EM_SCROLLCARET, 0, 0);", "+\t}", "+\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "566c3cfd6b9ff06f750b4430b1793cff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "012205baf28f88e5d47b66800297e2cd20c21717", "commitAfterChange": "836e6cc3c87f89284205865ba7ad30dec163f38d", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  void initClasses ()", "signatureAfterChange": "  void initClasses ()", "diff": ["-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar (cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar (cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)C.PTR_SIZEOF, \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62c3f61abf028445ca5fb26e69d67e1b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "f92aec5deb4a565ea89e04280ed631a305c98831", "commitAfterChange": "4b430f4288445278b605b873a915f11105ca8844", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\theight = DEFAULT_HEIGHT;", "-\t\t\tif (text.length () != 0) {", "-\t\t\t\tint [] ptr = new int [1];", "-\t\t\t\tint [] actualSize = new int [1];", "-\t\t\t\tOS.GetControlData (handle, (short)0 , OS.kControlStaticTextCFStringTag, 4, ptr, actualSize);", "-\t\t\t\tif (ptr [0] != 0) {", "-\t\t\t\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\t\tshort [] baseLine = new short [1];", "-\t\t\t\t\tboolean wrap = false;", "+\t\t\tFont font = getFont ();", "+\t\t\tFontInfo info = new FontInfo ();", "+\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "+\t\t\tint fontHeight = info.ascent + info.descent;", "+\t\t\theight = fontHeight;", "+\t\t\tint length = text.length (); ", "+\t\t\tif (length != 0) {", "+\t\t\t\tString string = Display.convertToLf (text);", "+\t\t\t\tint [] layout = new int [1];", "+\t\t\t\tOS.ATSUCreateTextLayout (layout);", "+\t\t\t\tif (layout [0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint [] atsuiStyle = new int [1];", "+\t\t\t\tOS.ATSUCreateStyle (atsuiStyle);", "+\t\t\t\tif (atsuiStyle [0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint ptr1 = OS.NewPtr (16);", "+\t\t\t\tOS.memcpy (ptr1, new int [] {font.handle}, 4); ", "+\t\t\t\tOS.memcpy (ptr1 + 4, new int [] {OS.X2Fix (font.size)}, 4);", "+\t\t\t\tint [] tags = new int [] {OS.kATSUFontTag, OS.kATSUSizeTag};", "+\t\t\t\tint [] sizes = new int [] {4, 4};", "+\t\t\t\tint [] values = new int [] {ptr1, ptr1 + 4};", "+\t\t\t\tOS.ATSUSetAttributes (atsuiStyle [0], tags.length, tags, sizes, values);", "+\t\t\t\tOS.DisposePtr (ptr1);", "+\t\t\t\tint ptr2 = OS.NewPtr (length * 2);", "+\t\t\t\tOS.memcpy (ptr2, string, length * 2);", "+\t\t\t\tOS.ATSUSetTextPointerLocation (layout [0], ptr2, 0, length, length);", "+\t\t\t\tOS.ATSUSetRunStyle (layout [0], atsuiStyle [0], 0, length);", "+\t\t\t\theight = 0;", "+\t\t\t\twidth = wHint != SWT.DEFAULT ? wHint : 0;", "+\t\t\t\tint [] breakCount = new int [1];", "+\t\t\t\tATSTrapezoid trapezoid = new ATSTrapezoid();", "+\t\t\t\tint start = 0, index = 0;", "+\t\t\t\tdo {", "+\t\t\t\t\tindex = string.indexOf ('\\n', start);", "+\t\t\t\t\tint end = index == -1 ? length : index;", "-\t\t\t\t\t\twrap = true;", "-\t\t\t\t\t\tbounds.h = (short) wHint;", "+\t\t\t\t\t\tOS.ATSUBatchBreakLines (layout [0], start, end - start, OS.X2Fix (wHint), breakCount);", "+\t\t\t\t\t\theight += (breakCount [0] + (index == -1 ? 1 : 0)) * fontHeight;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.ATSUGetGlyphBounds (layout [0], 0, 0, start, end - start, (short) OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "+\t\t\t\t\t\twidth = Math.max (width, OS.Fix2Long (trapezoid.upperRight_x) - OS.Fix2Long (trapezoid.upperLeft_x));", "+\t\t\t\t\t\theight += OS.Fix2Long (trapezoid.lowerRight_y) - OS.Fix2Long (trapezoid.upperRight_y);", "-\t\t\t\t\t// NEEDS work - only works for default font", "-\t\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "-\t\t\t\t\twidth = bounds.h;", "-\t\t\t\t\theight = bounds.v;", "-\t\t\t\t\tOS.CFRelease (ptr [0]);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tFont font = getFont ();", "-\t\t\t\tFontInfo info = new FontInfo ();", "-\t\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "-\t\t\t\theight = info.ascent + info.descent;", "+\t\t\t\t\tstart = index + 1;", "+\t\t\t\t} while (index != -1);", "+\t\t\t\tOS.ATSUDisposeStyle (atsuiStyle [0]);", "+\t\t\t\tOS.ATSUDisposeTextLayout (layout [0]);", "+\t\t\t\tOS.DisposePtr (ptr2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a757651b5c6468abe8328b8385675b44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "19c0222eaad94683f1cf6389644b40fecfc90bf6", "commitAfterChange": "bf219895eeed085ac7691759faac06580d81d416", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath);", "+\t\t\tLocationProvider.AddRef ();", "+", "+\t\t\t/* extract external.xpt to temp */", "+\t\t\tString tempPath = System.getProperty (\"java.io.tmpdir\"); //$NON-NLS-1$", "+\t\t\tFile componentsDir = new File (tempPath, \"eclipse/mozillaComponents\"); //$NON-NLS-1$", "+\t\t\tLocationProvider.setComponentsPath (componentsDir.getAbsolutePath ());", "+\t\t\tjava.io.InputStream is = Library.class.getResourceAsStream (\"/external.xpt\"); //$NON-NLS-1$", "+\t\t\tif (is != null) {", "+\t\t\t\tif (!componentsDir.exists ()) {", "+\t\t\t\t\tcomponentsDir.mkdir ();", "+\t\t\t\t}", "+\t\t\t\tint read;", "+\t\t\t\tbyte [] buffer = new byte [4096];", "+\t\t\t\tFile file = new File (componentsDir, \"external.xpt\"); //$NON-NLS-1$", "+\t\t\t\ttry {", "+\t\t\t\t\tFileOutputStream os = new FileOutputStream (file);", "+\t\t\t\t\twhile ((read = is.read (buffer)) != -1) {", "+\t\t\t\t\t\tos.write(buffer, 0, read);", "+\t\t\t\t\t}", "+\t\t\t\t\tos.close ();", "+\t\t\t\t\tis.close ();", "+\t\t\t\t\tif (!Platform.PLATFORM.equals (\"win32\")) { //$NON-NLS-1$", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tRuntime.getRuntime ().exec (", "+\t\t\t\t\t\t\t\tnew String [] {\"chmod\", \"755\", file.getAbsolutePath ()}).waitFor (); //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t\t\t\t\t} catch (Throwable e) {}", "+\t\t\t\t\t}", "+\t\t\t\t} catch (FileNotFoundException e) {", "+\t\t\t\t} catch (IOException e) {", "+\t\t\t\t}", "+\t\t\t}", "+", "-", "-\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath);", "-\t\t\tLocationProvider.AddRef ();", "-\t\tserviceManager.Release ();", "+\t\tcomponentRegistrar.AutoRegister (0);\t /* detect the External component */ ", "+", "-\t\t", "+", "+\t\tExternalFactory externalFactory = new ExternalFactory ();", "+\t\texternalFactory.AddRef ();", "+\t\taContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.EXTERNAL_CONTRACTID, true); ", "+\t\taClassName = MozillaDelegate.wcsToMbcs (null, \"External\", true); //$NON-NLS-1$", "+\t\trc = componentRegistrar.RegisterFactory (XPCOM.EXTERNAL_CID, aClassName, aContractID, externalFactory.getAddress ());", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\texternalFactory.Release ();", "+", "+\t\trc = serviceManager.GetService (XPCOM.NS_CATEGORYMANAGER_CID, nsICategoryManager.NS_ICATEGORYMANAGER_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tserviceManager.Release ();", "+", "+\t\tnsICategoryManager categoryManager = new nsICategoryManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\tbyte[] category = MozillaDelegate.wcsToMbcs (null, \"JavaScript global property\", true); //$NON-NLS-1$", "+\t\tbyte[] entry = MozillaDelegate.wcsToMbcs (null, \"external\", true); //$NON-NLS-1$", "+\t\trc = categoryManager.AddCategoryEntry(category, entry, aContractID, 1, 1, result);", "+\t\tresult[0] = 0;", "+\t\tcategoryManager.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82c120e440457d4de948c884e3b694c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "06dc38e623afcc69453149a4908e940401d48a28", "commitAfterChange": "0f19e4967bd7565d0b817b526213289acd242b74", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 2, "signatureBeforeChange": " String interpretOsAnswer(String osAnswer)", "signatureAfterChange": " String computeResult()", "diff": ["+String computeResult() {", "+\tGtkFileSelection selection = new GtkFileSelection ();", "+\tOS.memmove (selection, handle);", "+\tint /*long*/ entry = selection.selection_entry;", "+\tint /*long*/ entryText = OS.gtk_entry_get_text (entry);", "+\tint entryLength = OS.strlen (entryText);", "+\tif (entryLength == 0) {", "+\t\tint /*long*/ fileList = selection.file_list;", "+\t\tint /*long*/ listSelection = OS.gtk_tree_view_get_selection (fileList);", "+\t\tint /*long*/[] model = new int /*long*/[1];", "+\t\tint /*long*/ selectedList = OS.gtk_tree_selection_get_selected_rows (listSelection, model);", "+\t\tif (selectedList == 0) return null;", "+\t\tint listLength = OS.g_list_length (selectedList);", "+\t\tif (listLength == 0) {", "+\t\t\tOS.g_list_free (selectedList);", "+\t\t\treturn null;", "+\t\t}", "+\t\tint /*long*/ path = OS.g_list_nth_data (selectedList, 0);", "+\t\tint /*long*/ [] ptr = new int /*long*/[1];", "+\t\tint /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\tif (OS.gtk_tree_model_get_iter (model [0], iter, path)) {", "+\t\t\tOS.gtk_tree_model_get (model [0], iter, 0, ptr, -1);", "+\t\t}", "+\t\tOS.g_free (iter);", "+\t\tfor (int i = 0; i < listLength; i++) {", "+\t\t\tOS.gtk_tree_path_free (OS.g_list_nth_data (selectedList, i));", "+\t\t}", "+\t\tOS.g_list_free (selectedList);", "+\t\tif (ptr [0] == 0) return null;", "+\t\tint length = OS.strlen (ptr [0]);", "+\t\tbyte [] buffer = new byte [length];", "+\t\tOS.memmove (buffer, ptr [0], length);", "+\t\tOS.g_free (ptr [0]);", "+\t\tOS.gtk_entry_set_text (entry, buffer);", "+\t}", "+", "+\tint /*long*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);", "+\tint /*long*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);", "+\tint /*long*/ [] items_written = new int /*long*/ [1];", "+\tint /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "+\tentryLength = (int)/*64*/items_written [0];", "+\tchar [] buffer = new char [entryLength];", "+\tOS.memmove (buffer, utf16Ptr, entryLength * 2);", "+\tString osAnswer = new String (buffer);", "+\tOS.g_free (utf16Ptr);", "+\tOS.g_free (utf8Ptr);", "+", "+\tif (osAnswer == null) return null;", "+\tint separatorIndex = osAnswer.lastIndexOf (SEPARATOR);", "+\tif (separatorIndex+1 == osAnswer.length ()) return null;", "+\t", "+\tString answer = fullPath = osAnswer;", "+\tfileName = fullPath.substring (separatorIndex+1);", "+\tfilterPath = fullPath.substring (0, separatorIndex);", "+\tif ((style & SWT.MULTI) == 0) {", "+\t\tfileNames = new String[] {fileName};", "+\t} else {", "+\t\tint /*long*/ namesPtr = OS.gtk_file_selection_get_selections (handle);", "+\t\tint /*long*/ namesPtr1 = namesPtr;", "+\t\tint /*long*/ [] namePtr = new int /*long*/ [1];", "+\t\tOS.memmove (namePtr, namesPtr1, OS.PTR_SIZEOF);", "+\t\tint length = 0;", "+\t\twhile (namePtr[0] != 0) {", "+\t\t\tlength++;", "+\t\t\tnamesPtr1+=OS.PTR_SIZEOF;", "+\t\t\tOS.memmove(namePtr, namesPtr1, OS.PTR_SIZEOF);", "+\t\t}", "+\t\tfileNames = new String [length];", "+\t\tnamePtr = new int /*long*/ [length];", "+\t\tOS.memmove (namePtr, namesPtr, length * OS.PTR_SIZEOF);", "+\t\tfor (int i = 0; i < length; i++) {\t\t\t", "+\t\t\tutf8Ptr = OS.g_filename_to_utf8 (namePtr [i], -1, null, null, null);", "+\t\t\titems_written = new int /*long*/ [1];", "+\t\t\tutf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "+\t\t\tbuffer = new char [(int)/*64*/items_written [0]];", "+\t\t\tOS.memmove (buffer, utf16Ptr, items_written [0] * 2);", "+\t\t\tString name = new String (buffer);", "+\t\t\tfileNames [i] = name.substring (name.lastIndexOf (SEPARATOR) + 1);", "+\t\t\tOS.g_free (utf16Ptr);", "+\t\t\tOS.g_free (utf8Ptr);", "+\t\t}", "+\t\tOS.g_strfreev (namesPtr);", "+\t}", "+\treturn answer;", "+}", "-String interpretOsAnswer(String osAnswer) {", "-\tif (osAnswer==null) return null;", "-\tint separatorIndex = osAnswer.lastIndexOf (SEPARATOR);", "-\tif (separatorIndex+1 == osAnswer.length ()) return null;", "-\t", "-\tString answer = fullPath = osAnswer;", "-\tfileName = fullPath.substring (separatorIndex+1);", "-\tfilterPath = fullPath.substring (0, separatorIndex);", "-\tif ((style & SWT.MULTI) == 0) {", "-\t\tfileNames = new String[] {fileName};", "-\t} else {", "-\t\tint /*long*/ namesPtr = OS.gtk_file_selection_get_selections (handle);", "-\t\tint /*long*/ namesPtr1 = namesPtr;", "-\t\tint /*long*/ [] namePtr = new int /*long*/ [1];", "-\t\tOS.memmove (namePtr, namesPtr1, OS.PTR_SIZEOF);", "-\t\tint length = 0;", "-\t\twhile (namePtr[0] != 0) {", "-\t\t\tlength++;", "-\t\t\tnamesPtr1+=OS.PTR_SIZEOF;", "-\t\t\tOS.memmove(namePtr, namesPtr1, OS.PTR_SIZEOF);", "-\t\t}", "-\t\tfileNames = new String [length];", "-\t\tnamePtr = new int /*long*/ [length];", "-\t\tOS.memmove (namePtr, namesPtr, length * OS.PTR_SIZEOF);", "-\t\tfor (int i = 0; i < length; i++) {\t\t\t", "-\t\t\tint /*long*/ utf8Ptr = OS.g_filename_to_utf8 (namePtr [i], -1, null, null, null);", "-\t\t\tint /*long*/ [] items_written = new int /*long*/ [1];", "-\t\t\tint /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "-\t\t\tchar[] buffer = new char [(int)/*64*/items_written [0]];", "-\t\t\tOS.memmove (buffer, utf16Ptr, items_written [0] * 2);", "-\t\t\tString name = new String (buffer);", "-\t\t\tfileNames [i] = name.substring (name.lastIndexOf (SEPARATOR) + 1);", "-\t\t\tOS.g_free (utf16Ptr);", "-\t\t\tOS.g_free (utf8Ptr);", "-\t\t}", "-\t\tOS.g_strfreev (namesPtr);", "-\t}", "-\treturn answer;", "-}"]}], "num": 50046}
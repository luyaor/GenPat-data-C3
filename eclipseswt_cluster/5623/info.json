{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7cc3d1e29cf65d497a23a43796daffbc", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7680bbb0f95c3a8609ef02add4c89c6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/DisplayRenderer.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " protected  int getStyledTextWidth(String text, int textStartOffset, StyleRange[] lineStyles, int paintX, GC gc)", "signatureAfterChange": " protected  int getOrientation ()", "diff": ["+}", "+protected  int getOrientation () {", "+\treturn parent.getOrientation();", "+}", "- */", "-protected  int getStyledTextWidth(String text, int textStartOffset, StyleRange[] lineStyles, int paintX, GC gc) {", "-\tString textSegment;", "-\tint textLength = text.length();", "-\tint textIndex = 0;", "-\tGC boldGC = null;", "-\tGC normalGC = null;", "-\tint fontStyle = getCurrentFontStyle();", "-\t", "-\t// Use two gcs for performance reasons (i.e., minimize number of times setFont gets called).", "-\tif (fontStyle == SWT.NORMAL) normalGC = gc;", "-\telse boldGC = gc;", "-\tfor (int styleIndex = 0; styleIndex < lineStyles.length; styleIndex++) {", "-\t\tStyleRange style = lineStyles[styleIndex];", "-\t\tint textEnd;", "-\t\tint styleSegmentStart = style.start - textStartOffset;", "-\t\tif (styleSegmentStart + style.length < 0) {", "-\t\t\tcontinue;", "-\t\t}", "-\t\tif (textIndex > 0 && styleSegmentStart < textIndex) {", "-\t\t\t/* overlapping style line being measured, which is not valid, ignore style */", "-\t\t\tcontinue;", "-\t\t}", "-\t\tif (styleSegmentStart >= textLength) {", "-\t\t\tbreak;", "-\t\t}", "-\t\t// is there a style for the current string position?", "-\t\tif (textIndex < styleSegmentStart) {", "-\t\t\ttextSegment = text.substring(textIndex, styleSegmentStart);", "-\t\t\tif (normalGC == null) {", "-\t\t\t\tnormalGC = getGC();", "-\t\t\t\tnormalGC.setFont(regularFont);", "-\t\t\t}", "-\t\t\tpaintX += normalGC.stringExtent(textSegment).x;", "-\t\t\ttextIndex = styleSegmentStart;", "-\t\t}", "-\t\ttextEnd = Math.min(textLength, styleSegmentStart + style.length);", "-\t\ttextSegment = text.substring(textIndex, textEnd);", "-\t\tif (style.fontStyle == SWT.NORMAL) {", "-\t\t\tif (normalGC == null) {", "-\t\t\t\tnormalGC = getGC();", "-\t\t\t\tnormalGC.setFont(regularFont);", "-\t\t\t}", "-\t\t\tpaintX += normalGC.stringExtent(textSegment).x;", "-\t\t} else {", "-\t\t\tif (boldGC == null) {", "-\t\t\t\tboldGC = getGC();", "-\t\t\t\tboldGC.setFont(boldFont);", "-\t\t\t}", "-\t\t\tpaintX += boldGC.stringExtent(textSegment).x;", "-\t\t} ", "-\t\ttextIndex = textEnd;", "-\t}", "-\t// is there unmeasured and unstyled text?", "-\tif (textIndex < textLength) {", "-\t\ttextSegment = text.substring(textIndex, textLength);", "-\t\tif (normalGC == null) {", "-\t\t\tnormalGC = getGC();", "-\t\t\tnormalGC.setFont(regularFont);", "-\t\t}", "-\t\tpaintX += normalGC.stringExtent(textSegment).x;", "-\t}", "-\tif (fontStyle == SWT.NORMAL) {", "-\t\tif (boldGC != null) disposeGC(boldGC);", "-\t} else {", "-\t\tif (normalGC != null) disposeGC(normalGC);", "-\t}", "-\treturn paintX;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "000e5ee0744b97ee7494e782090222e4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/PrintRenderer.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": " protected int getStyledTextWidth(String text, int textStartOffset, StyleRange[] lineStyles, int paintX, GC gc)", "signatureAfterChange": " protected Color getSelectionBackground()", "diff": ["+}", "+protected Color getSelectionBackground() {", "+\treturn null;", "+}", "- */", "-protected int getStyledTextWidth(String text, int textStartOffset, StyleRange[] lineStyles, int paintX, GC gc) {", "-\tString textSegment;", "-\tint textLength = text.length();", "-\tint textIndex = 0;", "-", "-\tfor (int styleIndex = 0; styleIndex < lineStyles.length; styleIndex++) {", "-\t\tStyleRange style = lineStyles[styleIndex];", "-\t\tint textEnd;", "-\t\tint styleSegmentStart = style.start - textStartOffset;", "-\t\tif (styleSegmentStart + style.length < 0) {", "-\t\t\tcontinue;", "-\t\t}", "-\t\tif (styleSegmentStart >= textLength) {", "-\t\t\tbreak;", "-\t\t}", "-\t\t// is there a style for the current string position?", "-\t\tif (textIndex < styleSegmentStart) {", "-\t\t\ttextSegment = text.substring(textIndex, styleSegmentStart);", "-\t\t\tsetLineFont(gc, SWT.NORMAL);", "-\t\t\tpaintX += gc.stringExtent(textSegment).x;", "-\t\t\ttextIndex = styleSegmentStart;", "-\t\t}", "-\t\ttextEnd = Math.min(textLength, styleSegmentStart + style.length);", "-\t\ttextSegment = text.substring(textIndex, textEnd);", "-\t\tsetLineFont(gc, style.fontStyle);", "-\t\tpaintX += gc.stringExtent(textSegment).x;", "-\t\ttextIndex = textEnd;", "-\t}", "-\t// is there unmeasured and unstyled text?", "-\tif (textIndex < textLength) {", "-\t\ttextSegment = text.substring(textIndex, textLength);", "-\t\tsetLineFont(gc, SWT.NORMAL);", "-\t\tpaintX += gc.stringExtent(textSegment).x;", "-\t}", "-\treturn paintX;", "-}"]}], "num": 5623}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69b5995e9c5a0b22bf3886f44f3661db", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bffb49434b5141b76b9f85af16225e5e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "7437a3d139f18294dcb7c1d3554eb760222cd876", "commitAfterChange": "eccf3f9dfad619459ad0b8e1ee4716ddc8dc2aae", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": "\r \r LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\tsendMouseEvent (SWT.MouseDown, 1, OS.WM_LBUTTONDOWN, wParam, lParam);\r", "-\tint result = callWindowProc (OS.WM_LBUTTONDOWN, wParam, lParam);\r", "-\tif (OS.GetCapture () != handle) OS.SetCapture (handle);\r", "+\tboolean dragging = false;\r", "-\t\tif (!OS.IsWinCE) {\r", "-\t\t\t/*\r", "-\t\t\t* The DragDetect function captures the mouse and tracks its movement until the user releases\r", "-\t\t\t* the left button, presses the ESC key, or moves the mouse outside the drag rectangle around \r", "-\t\t\t* the specified point.   If the user moves the mouse outside of the drag rectangle, DragDetect\r", "-\t\t\t* returns true.\r", "-\t\t\t*/\r", "-\t\t\tif (OS.DragDetect (handle, pt)) {\r", "-\t\t\t\tpostEvent (SWT.DragDetect);\r", "-\t\t\t} else {\r", "-\t\t\t\t/*\r", "-\t\t\t\t* The Mouse up event and the ESC key event have been consumed by DragDetect so \r", "-\t\t\t\t* detect the cases and send the events.\r", "-\t\t\t\t*/\r", "-\t\t\t\tif (OS.GetKeyState (OS.VK_ESCAPE) >= 0) {\r", "-\t\t\t\t\tsendMouseEvent (SWT.MouseUp, 1, OS.WM_LBUTTONUP, wParam, lParam);\r", "-\t\t\t\t\t// widget could be disposed at this point\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\tif (!OS.IsWinCE) dragging = OS.DragDetect (handle, pt);\r", "+\t}\r", "+\tsendMouseEvent (SWT.MouseDown, 1, OS.WM_LBUTTONDOWN, wParam, lParam);\r", "+\tint result = callWindowProc (OS.WM_LBUTTONDOWN, wParam, lParam);\r", "+\tif (OS.GetCapture () != handle) OS.SetCapture (handle);\r", "+\tif (dragging) {\r", "+\t\tpostEvent (SWT.DragDetect);\r", "+\t} else {\r", "+\t\t/*\r", "+\t\t* Feature in Windows.  DragDetect() captures the mouse\r", "+\t\t* and tracks its movement until the user releases the\r", "+\t\t* left mouse button, presses the ESC key, or moves the\r", "+\t\t* mouse outside the drag rectangle.  If the user moves\r", "+\t\t* the mouse outside of the drag rectangle, DragDetect\r", "+\t\t* returns true and a drag and drop operation can be\r", "+\t\t* started.  When the left mouse button is released or\r", "+\t\t* the ESC key is pressed, these events are consumed by\r", "+\t\t* DragDetect() so that application code that matches\r", "+\t\t* mouse down/up pairs or looks for the ESC key will not\r", "+\t\t* function properly.  The fix is to send these events\r", "+\t\t* when the drag has not started.\r", "+\t\t* \r", "+\t\t* NOTE: For now, don't send a fake WM_KEYDOWN/WM_KEYUP\r", "+\t\t* events for the ESC key.  This would require computing\r", "+\t\t* wParam (the key) and lParam (the repeat count, scan code,\r", "+\t\t* extended-key flag, context code, previous key-state flag,\r", "+\t\t* and transition-state flag) which is non-trivial.\r", "+\t\t*/\r", "+\t\tif (OS.GetKeyState (OS.VK_ESCAPE) >= 0) {\r", "+\t\t\tOS.SendMessage (handle, OS.WM_LBUTTONUP, wParam, lParam);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e2b02c871eed04d30ef46fc0ed77f68", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "603b05a39f7173939b06bae6ef3e5ec76199299c", "commitAfterChange": "aee214234b2413033c234516d23a9041155855a2", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "  LRESULT wmMouseMove (int hwnd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmMouseMove (int hwnd, int wParam, int lParam)", "diff": ["+\t\t\tboolean trackMouse = (state & TRACK_MOUSE) != 0;", "-\t\t\tif (mouseEnter || mouseExit || mouseHover) {", "+\t\t\tif (trackMouse || mouseEnter || mouseExit || mouseHover) {"]}], "num": 39242}
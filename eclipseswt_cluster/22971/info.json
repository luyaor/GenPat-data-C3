{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcb7e743bc2912d4e7918987d4096471", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d8bf9a67763821bebd4afadc1d3404f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "480c0901faf29546ea8df19d2ac78fa4624fc38a", "commitAfterChange": "16783300301f2fdc3ddf4b30c55e2c7e64a03227", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void _setVisible (boolean visible)", "signatureAfterChange": "  void _setVisible (boolean visible)", "diff": ["-\tif (!visible) {", "+\tif (visible) {", "+\t\tint flags = OS.TPM_LEFTBUTTON;", "+\t\tif (OS.GetKeyState (OS.VK_LBUTTON) >= 0) flags |= OS.TPM_RIGHTBUTTON;", "+\t\tif ((style & SWT.RIGHT_TO_LEFT) != 0) flags |= OS.TPM_RIGHTALIGN;", "+\t\tif ((parent.style & SWT.MIRRORED) != 0) {", "+\t\t\tflags &= ~OS.TPM_RIGHTALIGN;", "+\t\t\tif ((style & SWT.LEFT_TO_RIGHT) != 0) flags |= OS.TPM_RIGHTALIGN;", "+\t\t}", "+\t\tint nX = x, nY = y;", "+\t\tif (!hasLocation) {", "+\t\t\tint pos = OS.GetMessagePos ();", "+\t\t\tnX = (short) (pos & 0xFFFF);", "+\t\t\tnY = (short) (pos >> 16);", "+\t\t}", "+\t\t/*", "+\t\t* Feature in Windows.  It is legal use TrackPopupMenu()", "+\t\t* to display an empty menu as long as menu items are added", "+\t\t* inside of WM_INITPOPUPMENU.  If no items are added, then", "+\t\t* TrackPopupMenu() fails and does not send an indication", "+\t\t* that the menu has been closed.  This is not strictly a", "+\t\t* bug but leads to unwanted behavior when application code", "+\t\t* assumes that every WM_INITPOPUPMENU will eventually result", "+\t\t* in a WM_MENUSELECT, wParam=0xFFFF0000, lParam=0 to indicate", "+\t\t* that the menu has been closed.  The fix is to detect the", "+\t\t* case when TrackPopupMenu() fails and the number of items in", "+\t\t* the menu is zero and issue a fake WM_MENUSELECT.", "+\t\t*/", "+\t\tboolean success = OS.TrackPopupMenu (handle, flags, nX, nY, 0, hwndParent, null);", "+\t\tif (!success && GetMenuItemCount (handle) == 0) {", "+\t\t\tOS.SendMessage (hwndParent, OS.WM_MENUSELECT, 0xFFFF0000, 0);", "+\t\t}", "+\t} else {", "-\t\treturn;", "-\t}", "-\tint flags = OS.TPM_LEFTBUTTON;", "-\tif (OS.GetKeyState (OS.VK_LBUTTON) >= 0) flags |= OS.TPM_RIGHTBUTTON;", "-\tif ((style & SWT.RIGHT_TO_LEFT) != 0) flags |= OS.TPM_RIGHTALIGN;", "-\tif ((parent.style & SWT.MIRRORED) != 0) {", "-\t\tflags &= ~OS.TPM_RIGHTALIGN;", "-\t\tif ((style & SWT.LEFT_TO_RIGHT) != 0) flags |= OS.TPM_RIGHTALIGN;", "-\t}", "-\tint nX = x, nY = y;", "-\tif (!hasLocation) {", "-\t\tint pos = OS.GetMessagePos ();", "-\t\tnX = (short) (pos & 0xFFFF);", "-\t\tnY = (short) (pos >> 16);", "-\t}", "-\t/*", "-\t* Feature in Windows.  It is legal use TrackPopupMenu ()", "-\t* to display an empty menu as long as menu items are added", "-\t* inside of WM_INITPOPUPMENU.  If no items are added, then", "-\t* TrackPopupMenu () fails and does not send an indication", "-\t* that the menu has been closed.  This is not strictly a", "-\t* bug but leads to unwanted behavior when application code", "-\t* assumes that every WM_INITPOPUPMENU will eventually result", "-\t* in a WM_MENUSELECT, wParam=0xFFFF0000, lParam=0 to indicate", "-\t* that the menu has been closed.  The fix is to detect the", "-\t* case when TrackPopupMenu fails and the number of items in", "-\t* the menu is zero and issue a fake WM_MENUSELECT.", "-\t*/", "-\tboolean success = OS.TrackPopupMenu (handle, flags, nX, nY, 0, hwndParent, null);", "-\tif (!success && GetMenuItemCount (handle) == 0) {", "-\t\tOS.SendMessage (hwndParent, OS.WM_MENUSELECT, 0xFFFF0000, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b5cc1c97719ac0cab2d146ddec29c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "e293cd5ca9ec202629c2ce24590166a853a347b7", "commitAfterChange": "c9d60234b32c9420ae860fac88795cd3b6c22a04", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void setVisible (boolean visible)", "signatureAfterChange": "\r \r public void _setVisible (boolean visible)", "diff": ["+public void _setVisible (boolean visible) {\r", "+\tif ((style & (SWT.BAR | SWT.DROP_DOWN)) != 0) return;\r", "+\tint hwndParent = parent.handle;\r", "+\tif (!visible) {\r", "+\t\tOS.SendMessage (hwndParent, OS.WM_CANCELMODE, 0, 0);\r", "+\t\treturn;\r", "+\t}\r", "+\tint flags = OS.TPM_LEFTBUTTON | OS.TPM_RIGHTBUTTON | OS.TPM_LEFTALIGN;\r", "+\tint nX = x, nY = y;\r", "+\tif (!hasLocation) {\r", "+\t\tint pos = OS.GetMessagePos ();\r", "+\t\tnX = (short) (pos & 0xFFFF);\r", "+\t\tnY = (short) (pos >> 16);\r", "+\t}\r", "+\t/*\r", "+\t* Feature in Windows.  It is legal use TrackPopupMenu ()\r", "+\t* to display an empty menu as long as menu items are added\r", "+\t* inside of WM_INITPOPUPMENU.  If no items are added, then\r", "+\t* TrackPopupMenu () fails and does not send an indication\r", "+\t* that the menu has been closed.  This is not strictly a\r", "+\t* bug but leads to unwanted behavior when application code\r", "+\t* assumes that every WM_INITPOPUPMENU will eventually result\r", "+\t* in a WM_MENUSELECT, wParam=0xFFFF0000, lParam=0 to indicate\r", "+\t* that the menu has been closed.  The fix is to detect the\r", "+\t* case when TrackPopupMenu fails and the number of items in\r", "+\t* the menu is zero and issue a fake WM_MENUSELECT.\r", "+\t*/\r", "+\tboolean success = OS.TrackPopupMenu (handle, flags, nX, nY, 0, hwndParent, null);\r", "+\tif (!success && GetMenuItemCount (handle) == 0) {\r", "+\t\tOS.SendMessage (hwndParent, OS.WM_MENUSELECT, 0xFFFF0000, 0);\r", "+\t}\r", "+}\r", "-\tint hwndParent = parent.handle;\r", "-\tif (!visible) {\r", "-\t\tOS.SendMessage (hwndParent, OS.WM_CANCELMODE, 0, 0);\r", "-\t\treturn;\r", "-\t}\r", "-\tint flags = OS.TPM_LEFTBUTTON | OS.TPM_RIGHTBUTTON | OS.TPM_LEFTALIGN;\r", "-\tint nX = x, nY = y;\r", "-\tif (!hasLocation) {\r", "-\t\tint pos = OS.GetMessagePos ();\r", "-\t\tnX = (short) (pos & 0xFFFF);\r", "-\t\tnY = (short) (pos >> 16);\r", "-\t}\r", "-\t/*\r", "-\t* Feature in Windows.  It is legal use TrackPopupMenu ()\r", "-\t* to display an empty menu as long as menu items are added\r", "-\t* inside of WM_INITPOPUPMENU.  If no items are added, then\r", "-\t* TrackPopupMenu () fails and does not send an indication\r", "-\t* that the menu has been closed.  This is not strictly a\r", "-\t* bug but leads to unwanted behavior when application code\r", "-\t* assumes that every WM_INITPOPUPMENU will eventually result\r", "-\t* in a WM_MENUSELECT, wParam=0xFFFF0000, lParam=0 to indicate\r", "-\t* that the menu has been closed.  The fix is to detect the\r", "-\t* case when TrackPopupMenu fails and the number of items in\r", "-\t* the menu is zero and issue a fake WM_MENUSELECT.\r", "-\t*/\r", "-\tboolean success = OS.TrackPopupMenu (handle, flags, nX, nY, 0, hwndParent, null);\r", "-\tif (!success && GetMenuItemCount (handle) == 0) {\r", "-\t\tOS.SendMessage (hwndParent, OS.WM_MENUSELECT, 0xFFFF0000, 0);\r"]}], "num": 22971}
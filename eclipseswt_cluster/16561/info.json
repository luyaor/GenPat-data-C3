{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa06136f3a99feb5d44a8f7f287d537e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e24aa03aa6bf8637ec39f5b7303ebb43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_custom_TableTree.java", "commitBeforeChange": "ea405f6fb0d3c326c6d6598b865868c79c617d4c", "commitAfterChange": "ca7d9417c41b11f3b661bfffad06504c3c22dc98", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public void test_selectAll()", "signatureAfterChange": "  public void test_selectAll()", "diff": ["+", "-\twarnUnimpl(\"Test test_selectAll not written\");", "+\t/* FUTURE: Should also add sub-nodes, and test both single and multi with those.", "+\t * i.e. subitems[i] = new TableTreeItem(items[i], SWT.NONE); */", "+", "+\tselectAll_helper(\"Empty table tree\", 0, new TableTreeItem[] {});", "+", "+\tint number = 8;", "+\tTableTreeItem[] items = new TableTreeItem[number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\titems[i] = new TableTreeItem(tableTree, SWT.NONE);", "+\t}", "+\tselectAll_helper(\"selectAll()\", number, items);", "+", "+\t", "+\t/* Now run the same tests on a single-select TableTree. */", "+\tsingleSelect();", "+\tselectAll_helper(\"Empty table tree\", 0, new TableTreeItem[] {});", "+", "+\titems = new TableTreeItem[number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\titems[i] = new TableTreeItem(tableTree, SWT.NONE);", "+\t}", "+\tselectAll_helper(\"selectAll()\", 0, new TableTreeItem[] {});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b9f57f0b77699af4e21e17df305748e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/performance/Test_org_eclipse_swt_graphics_GC.java", "commitBeforeChange": "3c3560a8a0694cddb84d310c44e8be981d7200ba", "commitAfterChange": "6a109d46b1134102ab2fd951d1b2441f44e33ab3", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  public void test_equalsLjava_lang_Object()", "signatureAfterChange": "  public void test_equalsLjava_lang_Object()", "diff": ["-\tassertTrue(gc.equals(gc));", "-\tCanvas canvas = new Canvas(shell, SWT.NULL);", "-\tGC testGC = new GC(canvas);", "-\tassertFalse(testGC.equals(gc));", "-\ttestGC.dispose();", "+\tGC gc1 = new GC(display);", "+\t", "+\tPerformanceMeter meter = createMeter(\"equal\");", "+\tmeter.start();", "+\tfor (int i = 0; i < COUNT; i++) {", "+\t\tgc1.equals(gc1);\t// equal", "+\t}", "+\tmeter.stop();", "+\t", "+\tgc1.dispose();", "+\t", "+\tdisposeMeter(meter);", "+\t\t", "+\tgc1 = new GC(display);", "+\tColor gc2 = new Color(display, 128, 255, 0);", "+\t", "+\tmeter = createMeter(\"not equal\");", "+\tmeter.start();", "+\tfor (int i = 0; i < COUNT; i++) {", "+\t\tgc1.equals(gc2);\t// not equal", "+\t}", "+\tmeter.stop();", "+\t", "+\tgc1.dispose();", "+\tgc2.dispose();", "+\t", "+\tdisposeMeter(meter);"]}], "num": 16561}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3cd69778b7e510af3a6be833645bd52a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "170cdad9109275c4c5b9945fed3aeed2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "1fd527c39129f45100a9be059c432ba659265e68", "commitAfterChange": "e9dfbcca84461271c73a7b41cba2f53e3b95d989", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  void resetCustomDraw ()", "signatureAfterChange": "  void resetCustomDraw ()", "diff": ["-\tif (columnCount == 0) {", "-\t\tif (firstCustomDraw) {", "-\t\t\tint column = OS.gtk_tree_view_get_column (handle, 0);", "+\tint end = Math.max (1, columnCount);", "+\tfor (int i=0; i<end; i++) {", "+\t\tboolean customDraw = columnCount != 0 ? columns [i].customDraw : firstCustomDraw;", "+\t\tif (customDraw) {", "+\t\t\tint column = OS.gtk_tree_view_get_column (handle, i);", "-\t\t\tfirstCustomDraw = false;", "-\t\t}", "-\t} else {", "-\t\tfor (int i = 0; i < columnCount; i++) {", "-\t\t\tif (columns [i].customDraw) {", "-\t\t\t\tint column = OS.gtk_tree_view_get_column (handle, i);", "-\t\t\t\tint list = OS.gtk_tree_view_column_get_cell_renderers (column);", "-\t\t\t\tint length = OS.g_list_length (list);", "-\t\t\t\tint renderer = OS.g_list_nth_data (list, length - 1);", "-\t\t\t\tOS.g_list_free (list);", "-\t\t\t\tOS.gtk_tree_view_column_set_cell_data_func (column, renderer, 0, 0, 0);", "-\t\t\t\tcolumns [i].customDraw = false;", "-\t\t\t}", "+\t\t\tif (columnCount != 0) columns [i].customDraw = false;", "+\tfirstCustomDraw = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e38af7bee67f19dab0ce635889475af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "f980f92ddaa06400d01ca6217ebe85dd24cefb9a", "commitAfterChange": "3b2084ccd7c41c3bd66bd7a2f6a555b1cfa73eff", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  void update (int value, boolean notify, boolean force)", "signatureAfterChange": "  void setSelection (int value, boolean notify)", "diff": ["+", "+void setSelection (int value, boolean notify) {", "+\tOS.SetControl32BitValue (buttonHandle, value);", "+\tString string = String.valueOf (value);", "+\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "+\t\tint [] actualSize = new int [1];", "+\t\tint [] ptr = new int [1];", "+\t\tint length = 0;", "+\t\tif (OS.GetControlData (textHandle, (short)OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, ptr, actualSize) == OS.noErr) {", "+\t\t\tlength = OS.CFStringGetLength (ptr [0]);", "+\t\t\tOS.CFRelease (ptr [0]);", "+\t\t}", "+\t\tstring = verifyText (string, 0, length, null);", "+\t\tif (string == null) return;", "+\t}", "+\tchar [] buffer = new char [string.length ()];", "+\tstring.getChars (0, buffer.length, buffer, 0);", "+\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\tif (ptr == 0) error (SWT.ERROR_CANNOT_SET_TEXT);", "+\tOS.SetControlData (textHandle, OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, new int[] {ptr});", "+\tOS.CFRelease (ptr);", "+\tsendEvent (SWT.Modify);", "+\tif (notify) postEvent (SWT.Selection);", "-", "-void update (int value, boolean notify, boolean force) {", "-\tint pos = OS.GetControl32BitValue (buttonHandle);", "-\tif (force) {", "-\t\tvalue = pos;", "-\t} else {", "-\t\tint max = OS.GetControl32BitMaximum (buttonHandle);", "-\t\tint min = OS.GetControl32BitMinimum (buttonHandle);", "-\t\t//TODO handle wrapping", "-\t\tif (value > max) value = max;", "-\t\tif (value < min) value = min;", "-\t}\t", "-\tif (value != pos || force) {", "-\t\tOS.SetControl32BitValue (buttonHandle, value);", "-\t\tString text = String.valueOf (value);", "-\t\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "-\t\t\tint [] actualSize = new int [1];", "-\t\t\tint [] ptr = new int [1];", "-\t\t\tint length = 0;", "-\t\t\tif (OS.GetControlData (textHandle, (short)OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, ptr, actualSize) == OS.noErr) {", "-\t\t\t\tlength = OS.CFStringGetLength (ptr [0]);", "-\t\t\t\tOS.CFRelease (ptr [0]);", "-\t\t\t};", "-\t\t\ttext = verifyText (text, 0, length, null);  ", "-\t\t}", "-\t\tchar [] buffer = new char [text.length ()];", "-\t\ttext.getChars (0, buffer.length, buffer, 0);", "-\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, text.length ());", "-\t\tif (ptr == 0) error (SWT.ERROR_CANNOT_SET_TEXT);\t\t", "-\t\tOS.SetControlData (textHandle, OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, new int[] {ptr});", "-\t\tOS.CFRelease (ptr);", "-\t\tsendEvent (SWT.Modify);", "-\t\tif (notify) {", "-\t\t\tpostEvent (SWT.Selection);", "-\t\t}", "-\t}"]}], "num": 47215}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f6b80c4c2f4ed015a6fe2c0587ec629", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b85bf4e0f38f45cfa48968516b5c4af9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "bf96c511171a3f65f9ce4a22c5a5b08d1dd5d976", "commitAfterChange": "7a1d67f746b314a594406116148490b4cb66e7bd", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 62, "signatureBeforeChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height, int flags)", "diff": ["+void setBounds (int x, int y, int width, int height, int flags) {", "+\t/*", "+\t* Bug in Windows.  If the table column widths are adjusted", "+\t* in WM_SIZE or WM_POSITIONCHANGED using LVM_SETCOLUMNWIDTH", "+\t* blank lines may be inserted at the top of the table.  A", "+\t* call to LVM_GETTOPINDEX will return a negative number (this", "+\t* is an impossible result).  Once the blank lines appear,", "+\t* there seems to be no way to get rid of them, other than", "+\t* destroying and recreating the table.  By observation, the", "+\t* problem happens when the height of the table is less than", "+\t* the two times the height of a line (this was tested using", "+\t* different fonts and images).  It also seems that the bug", "+\t* does not occur when the redraw is turned off for the table.", "+\t* The fix is to turn off drawing when resizing a table that", "+\t* is small enough to show the problem. ", "+\t*/", "+\tboolean fixResize = false;", "+\tif ((flags & OS.SWP_NOSIZE) == 0) {", "+\t\tRectangle rect = getBounds ();", "+\t\tfixResize = rect.height < getItemHeight () * 2;", "+\t}", "+\tif (fixResize) setRedraw (false);", "+\tsuper.setBounds (x, y, width, height, flags);", "+\tif (fixResize) setRedraw (true);", "+}", "-LRESULT WM_SIZE (int wParam, int lParam) {", "-\t/*", "-\t* Bug in Windows.  If the table column widths are adjusted", "-\t* in WM_SIZE, blank lines may be inserted at the top of the", "-\t* widget.  A call to LVM_GETTOPINDEX will return a negative", "-\t* number (this is an impossible result).  The fix is to do", "-\t* the WM_SIZE processing in WM_WINDOWPOSCHANGED after the", "-\t* table has been updated.", "-\t*/", "-\tresized = true;", "-\treturn null;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5137b91724a1d3dfe78718ec2ece7b30", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "c8a01657248adeebdb4e78d52aa7b164f5be7e36", "commitAfterChange": "cfd82e695b90b1f4e613721ac0cd7f667880a9a7", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r \r LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "\r \r void setBounds (int x, int y, int width, int height, int flags)", "diff": ["+void setBounds (int x, int y, int width, int height, int flags) {\r", "+\t/*\r", "+\t* Feature in Windows.  When the caret is moved,\r", "+\t* the text widget scrolls to show the new location.\r", "+\t* This means that the text widget may be scrolled\r", "+\t* to the right in order to show the caret when the\r", "+\t* widget is not large enough to show both the caret\r", "+\t* location and all the text.  Unfortunately, when\r", "+\t* the text widget is resized such that all the text\r", "+\t* and the caret could be visible, Windows does not\r", "+\t* scroll the widget back.  The fix is to resize the\r", "+\t* text widget, set the selection to the start of the\r", "+\t* text and then restore the selection.  This will\r", "+\t* cause the text widget compute the correct scroll\r", "+\t* position.\r", "+\t*/\r", "+\tif ((flags & OS.SWP_NOSIZE) == 0 && width != 0) {\r", "+\t\tRECT rect = new RECT ();\r", "+\t\tOS.GetWindowRect (handle, rect);\r", "+\t\tif (rect.right - rect.left == 0) {\r", "+\t\t\tint [] start = new int [1], end = new int [1];\r", "+\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);\r", "+\t\t\tif (start [0] != 0 || end [0] != 0) {\r", "+\t\t\t\tOS.SetWindowPos (handle, 0, x, y, width, height, flags);\r", "+\t\t\t\tOS.SendMessage (handle, OS.EM_SETSEL, 0, 0);\r", "+\t\t\t\tOS.SendMessage (handle, OS.EM_SETSEL, start [0], end [0]);\r", "+\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\t\r", "+\tsuper.setBounds (x, y, width, height, flags);\r", "+}\r", "-\r", "-LRESULT WM_SIZE (int wParam, int lParam) {\r", "-\tLRESULT result = super.WM_SIZE (wParam, lParam);\r", "-\t// widget may be disposed at this point\r", "-\tif (handle == 0) return result;\r", "-\t\r", "-\t/*\r", "-\t* Feature in Windows.  When the caret is moved,\r", "-\t* the text widget scrolls to show the new location.\r", "-\t* This means that the text widget may be scrolled\r", "-\t* to the left in order to show the caret when the\r", "-\t* widget is not large enough to show both the caret\r", "-\t* location and all the text.  Unfortunately, when\r", "-\t* the text widget is resized such that all the text\r", "-\t* and the caret could be visible, Windows does not\r", "-\t* scroll the widget back.  The fix is to save the\r", "-\t* current selection, set the selection to the start\r", "-\t* of the text and then restore the selection.  This\r", "-\t* will cause the text widget recompute the left\r", "-\t* scroll position.\r", "-\t*\r", "-\t* NOTE: Currently, this work around is only applied\r", "-\t* to single line text widgets that are not visible.\r", "-\t* If the widget is resized when it is visible, this\r", "-\t* is fine because the user has already seen that the\r", "-\t* text is scrolled.\r", "-\t*/\r", "-\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE); \r", "-\tif ((bits & OS.ES_MULTILINE) != 0) return result;\r", "-\tif (OS.IsWindowVisible (handle)) return result;\r", "-\tint [] start = new int [1], end = new int [1];\r", "-\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);\r", "-\tif (start [0] == 0 && end [0] == 0) return result;\r", "-\tOS.SendMessage (handle, OS.EM_SETSEL, 0, 0);\r", "-\tOS.SendMessage (handle, OS.EM_SETSEL, start [0], end [0]);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e8cbd0013c8ca65efc910fb81cb953e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ProgressBar.java", "commitBeforeChange": "a76f98786ded6e163fcbf233d1c2e903353b3e97", "commitAfterChange": "65c1946d30d7cafb1a58cba97204d0262b20b59e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 19, "signatureBeforeChange": " void disableButtonPress ()", "signatureAfterChange": " int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-void disableButtonPress () {", "-\tint xWindow = OS.XtWindow (handle);", "-\tif (xWindow == 0) return;", "-\tint xDisplay = OS.XtDisplay (handle);", "-\tif (xDisplay == 0) return;", "-\tint event_mask = OS.XtBuildEventMask (handle);", "-\tXSetWindowAttributes attributes = new XSetWindowAttributes ();", "-\tattributes.event_mask = event_mask & ~OS.ButtonPressMask;", "-\tOS.XChangeWindowAttributes (xDisplay, xWindow, OS.CWEventMask, attributes);", "-}", "+int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch) {", "+\tint result = super.XButtonPress (w, client_data, call_data, continue_to_dispatch);", "+\tint [] argList = {OS.XmNsensitive, 0};", "+\tOS.XtGetValues (handle, argList, argList.length / 2);", "+\tif (argList [1] != 0) {", "+\t\tOS.memmove (continue_to_dispatch, new int [1], 4);", "+\t\treturn 1;", "+\t}", "+\treturn result;", "+}"]}], "num": 27552}
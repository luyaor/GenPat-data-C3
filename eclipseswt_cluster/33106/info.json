{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9200686f316e785fe7831c4364667b7b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28bc11beaa89b83ec4fef561285ffab5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "436c8edf0dcf146a81b51fba0c092a0b987bdc41", "commitAfterChange": "bed34e92206b958b6f5bad5e5819bdb30bd17013", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void setItems (String [] items)", "signatureAfterChange": " public void setItems (String [] items)", "diff": ["-\tif (items.length==0) {", "-\t\t_removeAll();", "-\t\treturn;", "-\t}", "-\tint new_glist = 0;", "-\tfor (int i=0; i<items.length; i++) {", "-\t\tString string = items [i];", "-\t\t// FIXME leaked strings and glist", "-\t\tif (string == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\t\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "-\t\tint data = OS.g_malloc (buffer.length);", "-\t\tOS.memmove (data, buffer, buffer.length);", "-\t\tnew_glist = OS.g_list_append (new_glist, data);", "-\t}", "-\tOS.gtk_combo_set_popdown_strings (handle, new_glist);", "-\tif (glist != 0) {", "-\t\tint count = OS.g_list_length (glist);", "-\t\tfor (int i=0; i<count; i++) {", "-\t\t\tint data = OS.g_list_nth_data (glist, i);", "-\t\t\tif (data != 0) OS.g_free (data);", "+\tGtkCombo combo = new GtkCombo ();", "+\tOS.memmove (combo, handle, GtkCombo.sizeof);", "+\tif (items.length == 0) {", "+\t\tOS.gtk_list_clear_items (combo.list, 0, -1);", "+\t\t//LEAK", "+\t\tglist = 0;", "+\t} else {", "+\t\tint new_glist = 0;", "+\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\tString string = items [i];", "+\t\t\t// FIXME leaked strings and glist", "+\t\t\tif (string == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "+\t\t\tint data = OS.g_malloc (buffer.length);", "+\t\t\tOS.memmove (data, buffer, buffer.length);", "+\t\t\tnew_glist = OS.g_list_append (new_glist, data);", "-\t\tOS.g_list_free (glist);", "+\t\tOS.gtk_signal_handler_block_by_data (combo.entry, SWT.Modify);", "+\t\tOS.gtk_signal_handler_block_by_data (combo.list, SWT.Selection);", "+\t\tOS.gtk_combo_set_popdown_strings (handle, new_glist);", "+\t\tOS.gtk_signal_handler_unblock_by_data (combo.entry, SWT.Modify);", "+\t\tOS.gtk_signal_handler_unblock_by_data (combo.list, SWT.Selection);", "+\t\tif (glist != 0) {", "+\t\t\tint count = OS.g_list_length (glist);", "+\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\tint data = OS.g_list_nth_data (glist, i);", "+\t\t\t\tif (data != 0) OS.g_free (data);", "+\t\t\t}", "+\t\t\tOS.g_list_free (glist);", "+\t\t}", "+\t\tglist = new_glist;", "-\tglist = new_glist;", "+\tOS.gtk_signal_handler_block_by_data (combo.entry, SWT.Modify);", "+\tOS.gtk_editable_delete_text (combo.entry, 0, -1);", "+\tOS.gtk_signal_handler_unblock_by_data (combo.entry, SWT.Modify);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f000362b03f786fd171f121d684ea3ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "919a95ce466ea7b4f29ac8a85e1a96b6ec06bd76", "commitAfterChange": "a354edf1f14809623fe47dd0c26c4795be753140", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": "  static String InitDiscoverXULRunner ()", "signatureAfterChange": "  static String InitDiscoverXULRunner ()", "diff": ["+\t/*", "+\t* Up to three XULRunner detection attempts will be made:", "+\t*", "+\t* 1. A XULRunner with 1.8.1.2 <= version < 2.0, and with \"abi\" property matching", "+\t* the current runtime.  Note that XULRunner registrations began including abi", "+\t* info as of version 1.9.x, so older versions than this will not be returned.", "+\t* 2. A XULRunner with 1.8.1.2 <= version < 2.0.  XULRunner 1.8.1.2 is the oldest", "+\t* release that enables the Browser to expose its JavaXPCOM interfaces to clients.", "+\t* 3. A XULRunner with 1.8.0.1 <= version < 2.0.", "+\t*/", "+", "+\tGREProperty property = new GREProperty ();", "+\tbytes = MozillaDelegate.wcsToMbcs (null, PROPERTY_ABI, true);", "+\tint /*long*/ name = C.malloc (bytes.length);", "+\tC.memmove (name, bytes, bytes.length);", "+\tproperty.property = name;", "+\tbytes = MozillaDelegate.wcsToMbcs (null, Arch () + GCC3, true);", "+\tint /*long*/ value = C.malloc (bytes.length);", "+\tC.memmove (value, bytes, bytes.length);", "+\tproperty.value = value;", "+", "-\tint /*long*/ propertiesPtr = C.malloc (2 * C.PTR_SIZEOF);", "-\tint rc = XPCOMInit.GRE_GetGREPathWithProperties (range, 1, propertiesPtr, 0, greBuffer, length);", "+\tint rc = XPCOMInit.GRE_GetGREPathWithProperties (range, 1, property, 1, greBuffer, length);", "-\t/*", "-\t * A XULRunner was not found that supports wrapping of XPCOM handles as JavaXPCOM objects.", "-\t * Drop the lower version bound and try to detect an earlier XULRunner installation.", "-\t */", "-\t\tC.free (lower);", "-\t\tbytes = MozillaDelegate.wcsToMbcs (null, GRERANGE_LOWER_FALLBACK, true);", "-\t\tlower = C.malloc (bytes.length);", "-\t\tC.memmove (lower, bytes, bytes.length);", "-\t\trange.lower = lower;", "-\t\trc = XPCOMInit.GRE_GetGREPathWithProperties (range, 1, propertiesPtr, 0, greBuffer, length);", "+\t\t/* Fall back to attempt #2 */", "+\t\trc = XPCOMInit.GRE_GetGREPathWithProperties (range, 1, property, 0, greBuffer, length); /* note: propertiesLength is 0 */", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t/* Fall back to attempt #3 */", "+\t\t\tC.free (lower);", "+\t\t\tbytes = MozillaDelegate.wcsToMbcs (null, GRERANGE_LOWER_FALLBACK, true);", "+\t\t\tlower = C.malloc (bytes.length);", "+\t\t\tC.memmove (lower, bytes, bytes.length);", "+\t\t\trange.lower = lower;", "+\t\t\trc = XPCOMInit.GRE_GetGREPathWithProperties (range, 1, property, 0, greBuffer, length); /* note: propertiesLength is 0 */", "+\t\t}", "+\tC.free (value);", "+\tC.free (name);", "-\tC.free (propertiesPtr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c842a4585df91cca2b9deed6d45189f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk1x/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "436c8edf0dcf146a81b51fba0c092a0b987bdc41", "commitAfterChange": "bed34e92206b958b6f5bad5e5819bdb30bd17013", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void setItems (String [] items)", "signatureAfterChange": " public void setItems (String [] items)", "diff": ["-\tif (items.length==0) {", "-\t\t_removeAll();", "-\t\treturn;", "-\t}", "-\tint new_glist = 0;", "-\tfor (int i=0; i<items.length; i++) {", "-\t\tString string = items [i];", "-\t\t// FIXME leaked strings and glist", "-\t\tif (string == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\t\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "-\t\tint data = OS.g_malloc (buffer.length);", "-\t\tOS.memmove (data, buffer, buffer.length);", "-\t\tnew_glist = OS.g_list_append (new_glist, data);", "-\t}", "-\tOS.gtk_combo_set_popdown_strings (handle, new_glist);", "-\tif (glist != 0) {", "-\t\tint count = OS.g_list_length (glist);", "-\t\tfor (int i=0; i<count; i++) {", "-\t\t\tint data = OS.g_list_nth_data (glist, i);", "-\t\t\tif (data != 0) OS.g_free (data);", "+\tGtkCombo combo = new GtkCombo ();", "+\tOS.memmove (combo, handle, GtkCombo.sizeof);", "+\tif (items.length == 0) {", "+\t\tOS.gtk_list_clear_items (combo.list, 0, -1);", "+\t\t//LEAK", "+\t\tglist = 0;", "+\t} else {", "+\t\tint new_glist = 0;", "+\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\tString string = items [i];", "+\t\t\t// FIXME leaked strings and glist", "+\t\t\tif (string == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "+\t\t\tint data = OS.g_malloc (buffer.length);", "+\t\t\tOS.memmove (data, buffer, buffer.length);", "+\t\t\tnew_glist = OS.g_list_append (new_glist, data);", "-\t\tOS.g_list_free (glist);", "+\t\tOS.gtk_signal_handler_block_by_data (combo.entry, SWT.Modify);", "+\t\tOS.gtk_signal_handler_block_by_data (combo.list, SWT.Selection);", "+\t\tOS.gtk_combo_set_popdown_strings (handle, new_glist);", "+\t\tOS.gtk_signal_handler_unblock_by_data (combo.entry, SWT.Modify);", "+\t\tOS.gtk_signal_handler_unblock_by_data (combo.list, SWT.Selection);", "+\t\tif (glist != 0) {", "+\t\t\tint count = OS.g_list_length (glist);", "+\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\tint data = OS.g_list_nth_data (glist, i);", "+\t\t\t\tif (data != 0) OS.g_free (data);", "+\t\t\t}", "+\t\t\tOS.g_list_free (glist);", "+\t\t}", "+\t\tglist = new_glist;", "-\tglist = new_glist;", "+\tOS.gtk_signal_handler_block_by_data (combo.entry, SWT.Modify);", "+\tOS.gtk_editable_delete_text (combo.entry, 0, -1);", "+\tOS.gtk_signal_handler_unblock_by_data (combo.entry, SWT.Modify);"]}], "num": 33106}
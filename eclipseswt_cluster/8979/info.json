{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91ad75dbc3f3ca4a06bdcf35e6ffb1ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97dd2685c2454445d9746852ace7975d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "0ef9617c1012a47a6d1ff1554f6abcb04cfa36ad", "commitAfterChange": "26cde76ce3c88c1f3b47c43e3bb62261f679e704", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public DropTarget(Control control, int style)", "signatureAfterChange": " public DropTarget(Control control, int style)", "diff": ["-\tif (control.getData(DROPTARGETID) != null)", "+\tif (DragTrackingHandler == null || DragTrackingHandler == null) {", "+\t}", "+\tif (control.getData(DROPTARGETID) != null) {", "+\t\tDND.error(DND.ERROR_CANNOT_INIT_DROP);", "+\t}", "-\t\t\tif (time >= dragOverStart) {", "-\t\t\t\t", "+\t\t\tif (time < dragOverStart) {", "+\t\t\t\tdelay = (int)(dragOverStart - time);", "+\t\t\t} else {\t", "-\t\t\t\t", "+\t\t\t\t//pass a copy of data types in to listeners in case application modifies it", "+\t\t\t\tTransferData[] dataTypes = new TransferData[allowedTypes.length];", "+\t\t\t\tSystem.arraycopy(allowedTypes, 0, dataTypes, 0, dataTypes.length);", "+\t", "-\t\t\t\tevent.widget = DropTarget.this.control;", "-\t\t\t\tevent.time = (int)time;", "+\t\t\t\tevent.widget = dragOverEvent.widget;", "+\t\t\t\tevent.time = (int)time;", "-\t\t\t\tevent.dataTypes  = allowedTypes;", "-\t\t\t\tevent.dataType  = selectedDataType;", "-\t\t\t\tevent.operations = allowedOperations;", "+\t\t\t\tevent.dataTypes = dataTypes;", "+\t\t\t\tevent.dataType = selectedDataType;", "+\t\t\t\tevent.operations = dragOverEvent.operations;", "-\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\t", "+\t\t\t\ttry {", "+\t\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\tevent.dataType = null;", "+\t\t\t\t\tevent.detail  = DND.DROP_NONE;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t", "-\t\t\t", "+", "-\t\t\t} else {", "-\t\t\t\tdelay = (int)(dragOverStart - time);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40562f3c74a433573d034f3d8696eda7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "0ef9617c1012a47a6d1ff1554f6abcb04cfa36ad", "commitAfterChange": "26cde76ce3c88c1f3b47c43e3bb62261f679e704", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private int dragTrackingHandler(int message, int theWindow, int handlerRefCon, int theDrag)", "signatureAfterChange": "  private int dragTrackingHandler(int message, int theWindow, int handlerRefCon, int theDrag)", "diff": ["-\tif (message == OS.kDragTrackingEnterWindow) {", "-\t\tlastOperation = -1;", "-\t\tdataTypes = null;", "+\t", "+\tif (message == OS.kDragTrackingLeaveWindow) {", "+\t\tupdateDragOverHover(0, null);", "+\t\teffect.show(DND.FEEDBACK_NONE, 0, 0);", "+\t\tOS.SetThemeCursor(OS.kThemeArrowCursor);", "+\t\tif (keyOperation == -1) return OS.noErr;", "+\t\tkeyOperation = -1;", "+\t\t", "+\t\tDNDEvent event = new DNDEvent();", "+\t\tevent.widget = this;", "+\t\tevent.time = (int)System.currentTimeMillis();", "+\t\tevent.detail = DND.DROP_NONE;", "+\t\ttry {", "+\t\t\tnotifyListeners(DND.DragLeave, event);", "+\t\t} catch (Throwable e) {}", "+\t\treturn OS.noErr;", "+\tint oldKeyOperation = keyOperation;", "+\t", "-\tsetEventData(theDrag, event);", "-", "-\tif (event.operations == 0 || event.dataTypes == null || event.dataTypes.length == 0) {", "-\t\tif (message == OS.kDragTrackingLeaveWindow) {", "-\t\t\tOS.SetThemeCursor(OS.kThemeArrowCursor);", "-\t\t} else {", "-\t\t\tOS.SetThemeCursor(OS.kThemeNotAllowedCursor);", "-\t\t}", "+\tif (!setEventData(theDrag, event)) {", "+\t\tOS.SetThemeCursor(OS.kThemeNotAllowedCursor);", "-\tTransferData[] allowedTypes = event.dataTypes;", "+\tTransferData[] allowedDataTypes = new TransferData[event.dataTypes.length];", "+\tSystem.arraycopy(event.dataTypes, 0, allowedDataTypes, 0, allowedDataTypes.length);", "-\t\t\tlastOperation = event.detail;", "+\t\t\tselectedDataType = null;", "+\t\t\tselectedOperation = 0;", "-\t\t\tif (lastOperation != event.detail) {", "+\t\t\tevent.dataType = selectedDataType;", "+\t\t\tif (keyOperation != oldKeyOperation) {", "-\t\t\t\tlastOperation = event.detail;", "-\t\t\tevent.dataType = selectedDataType;", "-\t\tcase OS.kDragTrackingLeaveWindow: {", "-\t\t\tevent.type = DND.DragLeave;", "-\t\t\tevent.detail = DND.DROP_NONE;", "-\t\t\tbreak;", "-\t\t}", "+\t", "+\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\tevent.detail = DND.DROP_NONE;", "-\t\tevent.dataType = null;", "+\t\tOS.SetThemeCursor(OS.kThemeNotAllowedCursor);", "+\t\treturn OS.dragNotAcceptedErr;", "-\t\tevent.detail = DND.DROP_MOVE;", "+\t\tevent.detail = (allowedOperations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "-\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "-\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "-\t\t\t\tselectedDataType = event.dataType;", "+\t\tfor (int i = 0; i < allowedDataTypes.length; i++) {", "+\t\t\tif (allowedDataTypes[i].type == event.dataType.type) {", "+\t\t\t\tselectedDataType = allowedDataTypes[i];", "-\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "+\tif (selectedDataType != null && (allowedOperations & event.detail) != 0) {", "-\tswitch (message) {", "-\t\tcase OS.kDragTrackingEnterWindow:", "-\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\t\tdragOverHeartbeat.run();", "-\t\t\teffect.show(event.feedback, event.x, event.y);", "-\t\t\tbreak;", "-\t\tcase OS.kDragTrackingInWindow:", "-\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\t\teffect.show(event.feedback, event.x, event.y);", "-\t\t\tbreak;", "-\t\tcase OS.kDragTrackingLeaveWindow: {", "-\t\t\tupdateDragOverHover(0, null);", "-\t\t\teffect.show(DND.FEEDBACK_NONE, 0, 0);", "-\t\t\tOS.SetThemeCursor(OS.kThemeArrowCursor);", "-\t\t\treturn OS.noErr;", "-\t\t}", "-\t}", "-\t", "-\t", "+\teffect.show(event.feedback, event.x, event.y);", "+", "+  \tif (message == OS.kDragTrackingEnterWindow) {", "+\t\tdragOverHeartbeat.run();\t\t", "+\t}"]}], "num": 8979}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d5987f4252402918898bc5d5e8d6690", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "336a673cb976315edc6796cf55f68cff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java", "commitBeforeChange": "9abc23faabf8b5bcd4e6b6e2275455ee69e4f44d", "commitAfterChange": "d73a02e12c986cd7d019bde2d5ae081d9675824b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid createColorAndFontGroup ()", "signatureAfterChange": " \tvoid createColorAndFontGroup ()", "diff": ["-\t\t/* Create the group */", "-\t\tcolorGroup = new Group(controlGroup, SWT.NONE);", "-\t\tcolorGroup.setLayout (new GridLayout (2, false));", "-\t\tcolorGroup.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL));", "-\t\tcolorGroup.setText (ControlExample.getResourceString (\"Colors\"));", "-\t\tnew Label (colorGroup, SWT.NONE).setText (ControlExample.getResourceString (\"Foreground_Color\"));", "-\t\tforegroundButton = new Button (colorGroup, SWT.PUSH);", "-\t\tnew Label (colorGroup, SWT.NONE).setText (ControlExample.getResourceString (\"Background_Color\"));", "-\t\tbackgroundButton = new Button (colorGroup, SWT.PUSH);", "-\t\tnew Label (colorGroup, SWT.NONE).setText (ControlExample.getResourceString (\"Selection_Foreground_Color\"));", "-\t\tforegroundSelectionButton = new Button (colorGroup, SWT.PUSH);", "-\t\tnew Label (colorGroup, SWT.NONE).setText (ControlExample.getResourceString (\"Selection_Background_Color\"));", "-\t\tbackgroundSelectionButton = new Button (colorGroup, SWT.PUSH);", "-\t\tfontButton = new Button (colorGroup, SWT.PUSH);", "-\t\tfontButton.setText(ControlExample.getResourceString(\"Font\"));", "-\t\tfontButton.setLayoutData(new GridData (SWT.FILL, SWT.CENTER, false, false, 2, 1));", "-\t\titemFontButton = new Button (colorGroup, SWT.PUSH);", "-\t\titemFontButton.setText(ControlExample.getResourceString(\"Item_Font\"));", "-\t\titemFontButton.setLayoutData(new GridData (SWT.FILL, SWT.CENTER, false, false, 2, 1));", "-\t\tButton defaultsButton = new Button (colorGroup, SWT.PUSH);", "-\t\tdefaultsButton.setText(ControlExample.getResourceString(\"Defaults\"));", "+\t\tsuper.createColorAndFontGroup();", "+\t\t", "+\t\tTableItem item = new TableItem(colorAndFontTable, SWT.None);", "+\t\titem.setText(ControlExample.getResourceString (\"Selection_Foreground_Color\"));", "+\t\titem = new TableItem(colorAndFontTable, SWT.None);", "+\t\titem.setText(ControlExample.getResourceString (\"Selection_Background_Color\"));", "+\t\titem = new TableItem(colorAndFontTable, SWT.None);", "+\t\titem.setText(ControlExample.getResourceString (\"Item_Font\"));", "-\t\tShell shell = controlGroup.getShell ();", "-\t\tfinal ColorDialog colorDialog = new ColorDialog (shell);", "-\t\tfinal FontDialog fontDialog = new FontDialog (shell);", "-", "-\t\t/* Create images to display current colors */", "-\t\tint imageSize = 12;", "-\t\tDisplay display = shell.getDisplay ();", "-\t\tforegroundImage = new Image (display, imageSize, imageSize);", "-\t\tbackgroundImage = new Image (display, imageSize, imageSize);", "-", "-\t\t/* Add listeners to set the colors and font */", "-\t\tforegroundButton.setImage(foregroundImage); // sets the size of the button", "-\t\tforegroundButton.addSelectionListener(new SelectionAdapter() {", "-\t\t\tpublic void widgetSelected(SelectionEvent event) {", "-\t\t\t\tColor oldColor = foregroundColor;", "-\t\t\t\tif (oldColor == null) {", "-\t\t\t\t\tControl [] controls = getExampleWidgets ();", "-\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getForeground ();", "-\t\t\t\t}", "-\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB()); // seed dialog with current color", "-\t\t\t\tRGB rgb = colorDialog.open();", "-\t\t\t\tif (rgb == null) return;", "-\t\t\t\toldColor = foregroundColor; // save old foreground color to dispose when done", "-\t\t\t\tforegroundColor = new Color (event.display, rgb);", "-\t\t\t\tsetForeground = true;", "-\t\t\t\tsetExampleWidgetForeground ();", "-\t\t\t\tif (oldColor != null) oldColor.dispose ();", "-\t\t\t}", "-\t\t});", "-\t\tbackgroundButton.setImage(backgroundImage); // sets the size of the button", "-\t\tbackgroundButton.addSelectionListener(new SelectionAdapter() {", "-\t\t\tpublic void widgetSelected(SelectionEvent event) {", "-\t\t\t\tColor oldColor = backgroundColor;", "-\t\t\t\tif (oldColor == null) {", "-\t\t\t\t\tControl [] controls = getExampleWidgets ();", "-\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getBackground (); // seed dialog with current color", "-\t\t\t\t}", "-\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB());", "-\t\t\t\tRGB rgb = colorDialog.open();", "-\t\t\t\tif (rgb == null) return;", "-\t\t\t\toldColor = backgroundColor; // save old background color to dispose when done", "-\t\t\t\tbackgroundColor = new Color (event.display, rgb);", "-\t\t\t\tsetBackground = true;", "-\t\t\t\tsetExampleWidgetBackground ();", "-\t\t\t\tif (oldColor != null) oldColor.dispose ();", "-\t\t\t}", "-\t\t});", "-\t\tfontButton.addSelectionListener(new SelectionAdapter () {", "-\t\t\tpublic void widgetSelected (SelectionEvent event) {", "-\t\t\t\tFont oldFont = font;", "-\t\t\t\tif (oldFont == null) {", "-\t\t\t\t\tControl [] controls = getExampleWidgets ();", "-\t\t\t\t\tif (controls.length > 0) oldFont = controls [0].getFont ();", "-\t\t\t\t}", "-\t\t\t\tif (oldFont != null) fontDialog.setFontList(oldFont.getFontData()); // seed dialog with current font", "-\t\t\t\tFontData fontData = fontDialog.open ();", "-\t\t\t\tif (fontData == null) return;", "-\t\t\t\toldFont = font; // dispose old font when done", "-\t\t\t\tfont = new Font (event.display, fontData);", "-\t\t\t\tsetFont = true;", "-\t\t\t\tsetExampleWidgetFont ();", "-\t\t\t\tsetExampleWidgetSize ();", "-\t\t\t\tif (oldFont != null) oldFont.dispose ();", "-\t\t\t}", "-\t\t});", "-\t\tdefaultsButton.addSelectionListener(new SelectionAdapter () {", "-\t\t\tpublic void widgetSelected (SelectionEvent e) {", "-\t\t\t\tresetColorsAndFonts ();", "-\t\t\t}", "-\t\t});", "-\t\t\t\tif (foregroundImage != null) foregroundImage.dispose();", "-\t\t\t\tif (backgroundImage != null) backgroundImage.dispose();", "-\t\t\t\tif (foregroundColor != null) foregroundColor.dispose();", "-\t\t\t\tif (backgroundColor != null) backgroundColor.dispose();", "-\t\t\t\tif (font != null) font.dispose();", "-\t\t\t\tforegroundColor = null;", "-\t\t\t\tbackgroundColor = null;", "-\t\t\t\tfont = null;\t\t\t\t", "+\t\t\t\tif (selectionBackgroundColor != null) selectionBackgroundColor.dispose();", "+\t\t\t\tif (selectionForegroundColor != null) selectionForegroundColor.dispose();", "+\t\t\t\tif (itemFont != null) itemFont.dispose();", "+\t\t\t\tselectionBackgroundColor = null;", "+\t\t\t\tselectionForegroundColor = null;\t\t\t", "+\t\t\t\titemFont = null;", "-\t\tforegroundSelectionImage = new Image (display, imageSize, imageSize);", "-\t\tbackgroundSelectionImage = new Image (display, imageSize, imageSize);", "-\t\tforegroundSelectionButton.setImage(foregroundSelectionImage); // sets the size of the button", "-\t\tforegroundSelectionButton.addSelectionListener(new SelectionAdapter() {", "-\t\t\tpublic void widgetSelected(SelectionEvent event) {", "-\t\t\t\tColor oldColor = foregroundSelectionColor;", "-\t\t\t\tif (oldColor == null) {", "-\t\t\t\t\tControl [] controls = getExampleWidgets ();", "-\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getForeground ();", "-\t\t\t\t}", "-\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB()); // seed dialog with current color", "+\t}", "-\t\t\t\toldColor = foregroundSelectionColor; // save old foreground color to dispose when done", "-\t\t\t\tforegroundSelectionColor = new Color (event.display, rgb);", "-\t\t\t\tsetSelectionForeground = true;", "-\t\t});", "-\t\tbackgroundSelectionButton.setImage(backgroundSelectionImage); // sets the size of the button", "-\t\tbackgroundSelectionButton.addSelectionListener(new SelectionAdapter() {", "-\t\t\tpublic void widgetSelected(SelectionEvent event) {", "-\t\t\t\tColor oldColor = backgroundSelectionColor;", "-\t\t\t\tif (oldColor == null) {", "-\t\t\t\t\tControl [] controls = getExampleWidgets ();", "-\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getBackground (); // seed dialog with current color", "-\t\t\t\t}", "-\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB());", "-\t\t\t\toldColor = backgroundSelectionColor; // save old background color to dispose when done", "-\t\t\t\tbackgroundSelectionColor = new Color (event.display, rgb);", "-\t\t\t\tsetSelectionBackground = true;", "-\t\t});", "-\t\titemFontButton.addSelectionListener(new SelectionAdapter () {", "-\t\t\tpublic void widgetSelected (SelectionEvent event) {", "-\t\t\t\titemFont = new Font (event.display, fontData);", "-\t\t\t\tsetItemFont = true;", "-\t\t});", "-\t\tshell.addDisposeListener(new DisposeListener() {", "-\t\t\tpublic void widgetDisposed(DisposeEvent event) {", "-\t\t\t\tif (foregroundSelectionImage != null) foregroundSelectionImage.dispose();", "-\t\t\t\tif (backgroundSelectionImage != null) backgroundSelectionImage.dispose();", "-\t\t\t\tif (foregroundSelectionColor != null) foregroundSelectionColor.dispose();", "-\t\t\t\tif (backgroundSelectionColor != null) backgroundSelectionColor.dispose();", "-\t\t\t\tforegroundSelectionColor = null;", "-\t\t\t\tbackgroundSelectionColor = null;", "-\t\t\t\tif (itemFont != null) itemFont.dispose();", "-\t\t\t\titemFont = null;", "-\t\t\t}", "-\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0f8019bdde59b2c80423916ed90bc81", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java", "commitBeforeChange": "dca081370d5224f1cd2e70bba1975a4902add83c", "commitAfterChange": "61d2d6593ac92fd12ac831d8c082ce8dff8165a6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public BrowserExample(Composite parent)", "signatureAfterChange": " \t\t \tpublic BrowserExample(Composite parent, boolean top)", "diff": ["- */", "-public BrowserExample(Composite parent) {", "-\tinitResources();", "-\tfinal Display display = parent.getDisplay();", "-\tFormLayout layout = new FormLayout();", "-\tparent.setLayout(layout);", "-\tToolBar toolbar = new ToolBar(parent, SWT.NONE);", "-\tfinal ToolItem itemBack = new ToolItem(toolbar, SWT.PUSH);", "-\titemBack.setText(getResourceString(\"Back\"));", "-\tfinal ToolItem itemForward = new ToolItem(toolbar, SWT.PUSH);", "-\titemForward.setText(getResourceString(\"Forward\"));", "-\tfinal ToolItem itemStop = new ToolItem(toolbar, SWT.PUSH);", "-\titemStop.setText(getResourceString(\"Stop\"));", "-\tfinal ToolItem itemRefresh = new ToolItem(toolbar, SWT.PUSH);", "-\titemRefresh.setText(getResourceString(\"Refresh\"));", "-\tfinal ToolItem itemGo = new ToolItem(toolbar, SWT.PUSH);", "-\titemGo.setText(getResourceString(\"Go\"));", "-", "-\tlocation = new Text(parent, SWT.BORDER);", "-", "-\tfinal Canvas canvas = new Canvas(parent, SWT.NO_BACKGROUND);", "-\tfinal Rectangle rect = images[0].getBounds();", "-\tcanvas.addListener(SWT.Paint, new Listener() {", "-\t\tpublic void handleEvent(Event e) {", "-\t\t\tPoint pt = canvas.getSize();", "-\t\t\te.gc.drawImage(images[index], 0, 0, rect.width, rect.height, 0, 0, pt.x, pt.y);\t\t\t", "+\t\t", "+\tpublic BrowserExample(Composite parent, boolean top) {", "+\t\tthis.parent = parent;", "+\t\ttry {", "+\t\t\tbrowser = new Browser(parent, SWT.NONE);", "+\t\t} catch (SWTError e) {", "+\t\t\terror = e;", "+\t\t\t/* Browser widget could not be instantiated */", "+\t\t\tparent.setLayout(new FillLayout());", "+\t\t\tLabel label = new Label(parent, SWT.CENTER | SWT.WRAP);", "+\t\t\tlabel.setText(getResourceString(\"BrowserNotCreated\"));", "+\t\t\tparent.layout(true);", "+\t\t\treturn;", "-\t});", "-\tcanvas.addListener(SWT.MouseDown, new Listener() {", "-\t\tpublic void handleEvent(Event e) {", "-\t\t\tbrowser.setUrl(getResourceString(\"Startup\"));", "-\t\t}", "-\t});", "-\t", "-\tdisplay.asyncExec(new Runnable() {", "-\t\tpublic void run() {", "-\t\t\tif (canvas.isDisposed()) return;", "-\t\t\tif (busy) {", "-\t\t\t\tindex++;", "-\t\t\t\tif (index == images.length) index = 0;", "-\t\t\t\tcanvas.redraw();", "+\t\tinitResources();", "+\t\tfinal Display display = parent.getDisplay();", "+\t\tbrowser.setData(\"org.eclipse.swt.examples.browserexample.BrowserApplication\", this);", "+\t\tbrowser.addOpenWindowListener(new OpenWindowListener() {", "+\t\t\tpublic void open(WindowEvent event) {", "+\t\t\t\tShell shell = new Shell(display);", "+\t\t\t\tif (icon != null) shell.setImage(icon);", "+\t\t\t\tshell.setLayout(new FillLayout());", "+\t\t\t\tBrowserExample app = new BrowserExample(shell, false);", "+\t\t\t\tapp.setShellDecoration(icon, true);", "+\t\t\t\tevent.browser = app.getBrowser();", "-\t\t\tdisplay.timerExec(150, this);", "+\t\t});", "+\t\tbrowser.addVisibilityWindowListener(new VisibilityWindowListener() {", "+\t\t\tpublic void hide(WindowEvent e) {", "+\t\t\t}", "+\t\t\tpublic void show(WindowEvent e) {", "+\t\t\t\tBrowser browser = (Browser)e.widget;", "+\t\t\t\tBrowserExample app = (BrowserExample)browser.getData(\"org.eclipse.swt.examples.browserexample.BrowserApplication\");", "+\t\t\t\tapp.show(true, e.location, e.size, e.addressBar, e.menuBar, e.statusBar, e.toolBar);", "+\t\t\t}", "+\t\t});", "+\t\tbrowser.addCloseWindowListener(new CloseWindowListener() {", "+\t\t\tpublic void close(WindowEvent event) {", "+\t\t\t\tBrowser browser = (Browser)event.widget;", "+\t\t\t\tShell shell = browser.getShell();", "+\t\t\t\tshell.close();", "+\t\t\t}", "+\t\t});", "+\t\tif (top) {", "+\t\t\tbrowser.setUrl(getResourceString(\"Startup\"));", "+\t\t\tshow(false, null, null, true, true, true, true);", "-\t});", "-", "-\tfinal Label status = new Label(parent, SWT.NONE);", "-\tfinal ProgressBar progressBar = new ProgressBar(parent, SWT.NONE);", "-", "-\tFormData data = new FormData();", "-\tdata.top = new FormAttachment(0, 5);", "-\ttoolbar.setLayoutData(data);", "-", "-\tdata = new FormData();", "-\tdata.left = new FormAttachment(0, 0);", "-\tdata.right = new FormAttachment(100, 0);", "-\tdata.top = new FormAttachment(canvas, 5, SWT.DEFAULT);", "-\tdata.bottom = new FormAttachment(status, -5, SWT.DEFAULT);", "-\ttry {", "-\t\tbrowser = new Browser(parent, SWT.NONE);", "-\t\tbrowser.setLayoutData(data);", "-\t} catch (SWTError e) {", "-\t\t/* Browser widget could not be instantiated */", "-\t\tLabel label = new Label(parent, SWT.CENTER | SWT.WRAP);", "-\t\tlabel.setText(getResourceString(\"BrowserNotCreated\"));", "-\t\tlabel.setLayoutData(data);", "-\tdata = new FormData();", "-\tdata.width = 24;", "-\tdata.height = 24;", "-\tdata.top = new FormAttachment(0, 5);", "-\tdata.right = new FormAttachment(100, -5);", "-\tcanvas.setLayoutData(data);", "-", "-\tdata = new FormData();", "-\tdata.top = new FormAttachment(toolbar, 0, SWT.TOP);", "-\tdata.left = new FormAttachment(toolbar, 5, SWT.RIGHT);", "-\tdata.right = new FormAttachment(canvas, -5, SWT.DEFAULT);", "-\tlocation.setLayoutData(data);", "-", "-\tdata = new FormData();", "-\tdata.left = new FormAttachment(0, 5);", "-\tdata.right = new FormAttachment(progressBar, 0, SWT.DEFAULT);", "-\tdata.bottom = new FormAttachment(100, -5);", "-\tstatus.setLayoutData(data);", "-\tdata = new FormData();", "-\tdata.right = new FormAttachment(100, -5);", "-\tdata.bottom = new FormAttachment(100, -5);", "-\tprogressBar.setLayoutData(data);", "-", "-\tif (browser != null) {", "-\t\titemBack.setEnabled(browser.isBackEnabled());", "-\t\titemForward.setEnabled(browser.isForwardEnabled());", "-\t\t", "-\t\tListener listener = new Listener() {", "-\t\t\tpublic void handleEvent(Event event) {", "-\t\t\t\tToolItem item = (ToolItem)event.widget;", "-\t\t\t\tif (item == itemBack) browser.back(); ", "-\t\t\t\telse if (item == itemForward) browser.forward();", "-\t\t\t\telse if (item == itemStop) browser.stop();", "-\t\t\t\telse if (item == itemRefresh) browser.refresh();", "-\t\t\t\telse if (item == itemGo) browser.setUrl(location.getText());", "-\t\t\t}", "-\t\t};", "-\t\tbrowser.addLocationListener(new LocationListener() {", "-\t\t\tpublic void changed(LocationEvent event) {", "-\t\t\t\tbusy = true;", "-\t\t\t\tif (event.top) location.setText(event.location);", "-\t\t\t}", "-\t\t\tpublic void changing(LocationEvent event) {", "-\t\t\t}", "-\t\t});", "-\t\tbrowser.addProgressListener(new ProgressListener() {", "-\t\t\tpublic void changed(ProgressEvent event) {", "-\t\t\t\tif (event.total == 0) return;                            ", "-\t\t\t\tint ratio = event.current * 100 / event.total;", "-\t\t\t\tprogressBar.setSelection(ratio);", "-\t\t\t\tbusy = event.current != event.total;", "-\t\t\t\tif (!busy) {", "-\t\t\t\t\tindex = 0;", "-\t\t\t\t\tcanvas.redraw();", "-\t\t\tpublic void completed(ProgressEvent event) {", "-\t\t\t\titemBack.setEnabled(browser.isBackEnabled());", "-\t\t\t\titemForward.setEnabled(browser.isForwardEnabled());", "-\t\t\t\tprogressBar.setSelection(0);", "-\t\t\t\tbusy = false;", "-\t\t\t\tindex = 0;", "-\t\t\t\tcanvas.redraw();", "-\t\t\t}", "-\t\t});", "-\t\tbrowser.addStatusTextListener(new StatusTextListener() {", "-\t\t\tpublic void changed(StatusTextEvent event) {", "-\t\t\t\tstatus.setText(event.text);\t", "-\t\t\t}", "-\t\t});", "-\t\tif (parent instanceof Shell) {", "-\t\t\tfinal Shell shell = (Shell)parent;", "-\t\titemBack.addListener(SWT.Selection, listener);", "-\t\titemForward.addListener(SWT.Selection, listener);", "-\t\titemStop.addListener(SWT.Selection, listener);", "-\t\titemRefresh.addListener(SWT.Selection, listener);", "-\t\titemGo.addListener(SWT.Selection, listener);", "-\t\tlocation.addListener(SWT.DefaultSelection, new Listener() {", "-\t\t\tpublic void handleEvent(Event e) {", "-\t\t\t\tbrowser.setUrl(location.getText());", "-\t\t});", "-\t\t", "-\t\tinitialize(display, browser);", "-\t\tbrowser.setUrl(getResourceString(\"Startup\"));", "-}"]}], "num": 53754}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "573c2ff8d4db9f08fd2750445f323dfe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119b17c00b3d6754445e3ffc6d87eb2b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java", "commitBeforeChange": "646c14c459db780d16f386a9a63437d50caf1876", "commitAfterChange": "740ffee05c104bcff57a8c6063262c192e8e3207", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid createColorGroup ()", "signatureAfterChange": " \tvoid createColorGroup ()", "diff": ["-\t\tsuper.createColorGroup();", "+\t\t/* Create the group */", "+\t\tcolorGroup = new Group(controlGroup, SWT.NONE);", "+\t\tcolorGroup.setLayout (new GridLayout (2, false));", "+\t\tcolorGroup.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL));", "+\t\tcolorGroup.setText (ControlExample.getResourceString (\"Colors\"));", "-\t\titemGroup = new Group (colorGroup, SWT.NONE);", "-\t\titemGroup.setText (ControlExample.getResourceString (\"CTab_Item_Colors\"));", "-\t\tGridData data = new GridData ();", "-\t\tdata.horizontalSpan = 2;", "-\t\titemGroup.setLayoutData (data);", "-\t\titemGroup.setLayout (new GridLayout (2, false));", "-\t\titemFontButton = new Button (itemGroup, SWT.PUSH);", "-\t\titemFontButton.setText(ControlExample.getResourceString(\"Font\"));", "-\t\titemFontButton.setLayoutData(new GridData (GridData.HORIZONTAL_ALIGN_FILL));", "+\t\tnew Label (colorGroup, SWT.NONE).setText (ControlExample.getResourceString (\"Foreground_Color\"));", "+\t\tforegroundButton = new Button (colorGroup, SWT.PUSH);", "-\t\tShell shell = colorGroup.getShell ();", "+\t\tnew Label (colorGroup, SWT.NONE).setText (ControlExample.getResourceString (\"Background_Color\"));", "+\t\tbackgroundButton = new Button (colorGroup, SWT.PUSH);", "+\t\t", "+\t\tnew Label (colorGroup, SWT.NONE).setText (ControlExample.getResourceString (\"Selection_Foreground_Color\"));", "+\t\tforegroundSelectionButton = new Button (colorGroup, SWT.PUSH);", "+\t\t", "+\t\tnew Label (colorGroup, SWT.NONE).setText (ControlExample.getResourceString (\"Selection_Background_Color\"));", "+\t\tbackgroundSelectionButton = new Button (colorGroup, SWT.PUSH);", "+\t\t", "+\t\tfontButton = new Button (colorGroup, SWT.PUSH);", "+\t\tfontButton.setText(ControlExample.getResourceString(\"Font\"));", "+\t\tfontButton.setLayoutData(new GridData (SWT.FILL, SWT.CENTER, false, false, 2, 1));", "+\t", "+\t\titemFontButton = new Button (colorGroup, SWT.PUSH);", "+\t\titemFontButton.setText(ControlExample.getResourceString(\"Item_Font\"));", "+\t\titemFontButton.setLayoutData(new GridData (SWT.FILL, SWT.CENTER, false, false, 2, 1));", "+\t\t", "+\t\tButton defaultsButton = new Button (colorGroup, SWT.PUSH);", "+\t\tdefaultsButton.setText(ControlExample.getResourceString(\"Defaults\"));", "+", "+\t\tShell shell = controlGroup.getShell ();", "+\t\tfinal ColorDialog colorDialog = new ColorDialog (shell);", "+", "+\t\t/* Create images to display current colors */", "+\t\tint imageSize = 12;", "+\t\tDisplay display = shell.getDisplay ();", "+\t\tforegroundImage = new Image (display, imageSize, imageSize);", "+\t\tbackgroundImage = new Image (display, imageSize, imageSize);", "+\t\tforegroundSelectionImage = new Image (display, imageSize, imageSize);", "+\t\tbackgroundSelectionImage = new Image (display, imageSize, imageSize);", "+", "+\t\t/* Add listeners to set the colors and font */", "+\t\tforegroundButton.setImage(foregroundImage); // sets the size of the button", "+\t\tforegroundButton.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\tColor oldColor = foregroundColor;", "+\t\t\t\tif (oldColor == null) {", "+\t\t\t\t\tControl [] controls = getExampleWidgets ();", "+\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getForeground ();", "+\t\t\t\t}", "+\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB()); // seed dialog with current color", "+\t\t\t\tRGB rgb = colorDialog.open();", "+\t\t\t\tif (rgb == null) return;", "+\t\t\t\toldColor = foregroundColor; // save old foreground color to dispose when done", "+\t\t\t\tforegroundColor = new Color (event.display, rgb);", "+\t\t\t\tsetExampleWidgetForeground ();", "+\t\t\t\tif (oldColor != null) oldColor.dispose ();", "+\t\t\t}", "+\t\t});", "+\t\tbackgroundButton.setImage(backgroundImage); // sets the size of the button", "+\t\tbackgroundButton.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\tColor oldColor = backgroundColor;", "+\t\t\t\tif (oldColor == null) {", "+\t\t\t\t\tControl [] controls = getExampleWidgets ();", "+\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getBackground (); // seed dialog with current color", "+\t\t\t\t}", "+\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB());", "+\t\t\t\tRGB rgb = colorDialog.open();", "+\t\t\t\tif (rgb == null) return;", "+\t\t\t\toldColor = backgroundColor; // save old background color to dispose when done", "+\t\t\t\tbackgroundColor = new Color (event.display, rgb);", "+\t\t\t\tsetExampleWidgetBackground ();", "+\t\t\t\tif (oldColor != null) oldColor.dispose ();", "+\t\t\t}", "+\t\t});", "+\t\tforegroundSelectionButton.setImage(foregroundSelectionImage); // sets the size of the button", "+\t\tforegroundSelectionButton.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\tColor oldColor = foregroundSelectionColor;", "+\t\t\t\tif (oldColor == null) {", "+\t\t\t\t\tControl [] controls = getExampleWidgets ();", "+\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getForeground ();", "+\t\t\t\t}", "+\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB()); // seed dialog with current color", "+\t\t\t\tRGB rgb = colorDialog.open();", "+\t\t\t\tif (rgb == null) return;", "+\t\t\t\toldColor = foregroundSelectionColor; // save old foreground color to dispose when done", "+\t\t\t\tforegroundSelectionColor = new Color (event.display, rgb);", "+\t\t\t\tsetExampleWidgetForeground ();", "+\t\t\t\tif (oldColor != null) oldColor.dispose ();", "+\t\t\t}", "+\t\t});", "+\t\tbackgroundSelectionButton.setImage(backgroundSelectionImage); // sets the size of the button", "+\t\tbackgroundSelectionButton.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\tColor oldColor = backgroundSelectionColor;", "+\t\t\t\tif (oldColor == null) {", "+\t\t\t\t\tControl [] controls = getExampleWidgets ();", "+\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getBackground (); // seed dialog with current color", "+\t\t\t\t}", "+\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB());", "+\t\t\t\tRGB rgb = colorDialog.open();", "+\t\t\t\tif (rgb == null) return;", "+\t\t\t\toldColor = backgroundSelectionColor; // save old background color to dispose when done", "+\t\t\t\tbackgroundSelectionColor = new Color (event.display, rgb);", "+\t\t\t\tsetExampleWidgetBackground ();", "+\t\t\t\tif (oldColor != null) oldColor.dispose ();", "+\t\t\t}", "+\t\t});", "+\t\tfontButton.addSelectionListener(new SelectionAdapter () {", "+\t\t\tpublic void widgetSelected (SelectionEvent event) {", "+\t\t\t\tFont oldFont = font;", "+\t\t\t\tif (oldFont == null) {", "+\t\t\t\t\tControl [] controls = getExampleWidgets ();", "+\t\t\t\t\tif (controls.length > 0) oldFont = controls [0].getFont ();", "+\t\t\t\t}", "+\t\t\t\tif (oldFont != null) fontDialog.setFontList(oldFont.getFontData()); // seed dialog with current font", "+\t\t\t\tFontData fontData = fontDialog.open ();", "+\t\t\t\tif (fontData == null) return;", "+\t\t\t\toldFont = font; // dispose old font when done", "+\t\t\t\tfont = new Font (event.display, fontData);", "+\t\t\t\tsetExampleWidgetFont ();", "+\t\t\t\tsetExampleWidgetSize ();", "+\t\t\t\tif (oldFont != null) oldFont.dispose ();", "+\t\t\t}", "+\t\t});", "+\t", "+\t\t", "+\t\tdefaultsButton.addSelectionListener(new SelectionAdapter () {", "+\t\t\tpublic void widgetSelected (SelectionEvent e) {", "+\t\t\t\tresetColorsAndFonts ();", "+\t\t\t}", "+\t\t});", "+\t\t", "+\t\t\t\tif (foregroundImage != null) foregroundImage.dispose();", "+\t\t\t\tif (backgroundImage != null) backgroundImage.dispose();", "+\t\t\t\tif (foregroundColor != null) foregroundColor.dispose();", "+\t\t\t\tif (backgroundColor != null) backgroundColor.dispose();", "+\t\t\t\tif (font != null) font.dispose();", "+\t\t\t\tforegroundColor = null;", "+\t\t\t\tbackgroundColor = null;", "+\t\t\t\tfont = null;\t\t\t\t", "+\t\t\t\tif (foregroundSelectionImage != null) foregroundSelectionImage.dispose();", "+\t\t\t\tif (backgroundSelectionImage != null) backgroundSelectionImage.dispose();", "+\t\t\t\tif (foregroundSelectionColor != null) foregroundSelectionColor.dispose();", "+\t\t\t\tif (backgroundSelectionColor != null) backgroundSelectionColor.dispose();", "+\t\t\t\tforegroundSelectionColor = null;", "+\t\t\t\tbackgroundSelectionColor = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9ba76b51a68723d3131e87b3cf7d83b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java", "commitBeforeChange": "73710d9f09ebcac462a9041bda5cf1073ef9e063", "commitAfterChange": "7fbb9d1596162f9ad75a1391db3ebadea0726a58", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  private void createDragDetectHookedGroup(Composite parent)", "signatureAfterChange": " private void open()", "diff": ["-", "-private void createDragDetectHookedGroup(Composite parent) {", "-\tGroup group = new Group(parent, 0);", "-\tgroup.setLayoutData(createGridData());", "-\tgroup.setLayout(createGridLayout(1));", "-", "-\t// Create radio button", "-\tdragDetectedHooked = new Button(group, SWT.CHECK);", "-\tdragDetectedHooked.setLayoutData(createGridData());\t", "-\tdragDetectedHooked.setText(\"DragDetect hooked\");", "-\tdragDetectedHooked.addSelectionListener(sl);", "-}", "+\tDisplay display = new Display();", "+\tshell.setText(\"Drag and Drop Example\");", "+\tshell.setLayout(new FormLayout());", "+\tLabel dragLabel = new Label(shell, SWT.LEFT);", "+\tdragLabel.setText(\"Drag Source:\");", "+\t", "+\tGroup dragWidgetGroup = new Group(shell, SWT.NONE);", "+\tdragWidgetGroup.setText(\"Widget\");", "+\tcreateDragWidget(dragWidgetGroup);", "+\t", "+\tGroup dragOperationsGroup = new Group(shell, SWT.NONE);", "+\tdragOperationsGroup.setText(\"Allowed Operation(s):\");", "+\tcreateDragOperations(dragOperationsGroup);", "+\t", "+\tGroup dragTypesGroup = new Group(shell, SWT.NONE);", "+\tdragTypesGroup.setText(\"Transfer Type(s):\");", "+\tcreateDragTypes(dragTypesGroup);", "+\t", "+\tLabel dropLabel = new Label(shell, SWT.LEFT);", "+\tdropLabel.setText(\"Drop Target:\");", "+\t", "+\tGroup dropWidgetGroup = new Group(shell, SWT.NONE);", "+\tdropWidgetGroup.setText(\"Widget\");", "+\tcreateDropWidget(dropWidgetGroup);", "+\t", "+\tGroup dropOperationsGroup = new Group(shell, SWT.NONE);", "+\tdropOperationsGroup.setText(\"Allowed Operation(s):\");", "+\tcreateDropOperations(dropOperationsGroup);", "+\t", "+\tGroup dropTypesGroup = new Group(shell, SWT.NONE);", "+\tdropTypesGroup.setText(\"Transfer Type(s):\");", "+\tcreateDropTypes(dropTypesGroup);", "+\t", "+\tdragConsole = new Text(shell, SWT.READ_ONLY | SWT.BORDER |SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI);", "+\tdropConsole = new Text(shell, SWT.READ_ONLY | SWT.BORDER |SWT.V_SCROLL | SWT.H_SCROLL | SWT.MULTI);", "+", "+\tint height = 300;", "+\tFormData data = new FormData();", "+\tdata.top = new FormAttachment(0, 10);", "+\tdata.left = new FormAttachment(0, 10);", "+\tdragLabel.setLayoutData(data);", "+\t", "+\tdata = new FormData();", "+\tdata.top = new FormAttachment(dragLabel, 10);", "+\tdata.left = new FormAttachment(0, 10);", "+\tdata.right = new FormAttachment(50, -10);", "+\tdata.height = height;", "+\tdragWidgetGroup.setLayoutData(data);", "+\t", "+\tdata = new FormData();", "+\tdata.top = new FormAttachment(dragWidgetGroup, 10);", "+\tdata.left = new FormAttachment(0, 10);", "+\tdata.right = new FormAttachment(50, -10);", "+\tdata.bottom = new FormAttachment(dropTypesGroup, -10);", "+\tdragOperationsGroup.setLayoutData(data);", "+\t", "+\tdata = new FormData();", "+\tdata.top = new FormAttachment(dragOperationsGroup, 10);", "+\tdata.left = new FormAttachment(0, 10);", "+\tdata.right = new FormAttachment(50, -10);", "+\tdragTypesGroup.setLayoutData(data);", "+\t", "+\tdata = new FormData();", "+\tdata.top = new FormAttachment(0, 10);", "+\tdata.left = new FormAttachment(dragTypesGroup, 10);", "+\tdropLabel.setLayoutData(data);", "+\t", "+\tdata = new FormData();", "+\tdata.top = new FormAttachment(dropLabel, 10);", "+\tdata.left = new FormAttachment(dragTypesGroup, 10);", "+\tdata.right = new FormAttachment(100, -10);", "+\tdata.height = height;", "+\tdropWidgetGroup.setLayoutData(data);", "+\t", "+\tdata = new FormData();", "+\tdata.top = new FormAttachment(dropWidgetGroup, 10);", "+\tdata.left = new FormAttachment(dragTypesGroup, 10);", "+\tdata.right = new FormAttachment(100, -10);", "+\tdropOperationsGroup.setLayoutData(data);", "+\t", "+\tdata = new FormData();", "+\tdata.top = new FormAttachment(dropOperationsGroup, 10);", "+\tdata.left = new FormAttachment(dragTypesGroup, 10);", "+\tdata.right = new FormAttachment(100, -10);", "+\tdropTypesGroup.setLayoutData(data);", "+\t", "+\tdata = new FormData();", "+\tdata.top = new FormAttachment(dropTypesGroup, 10);", "+\tdata.bottom = new FormAttachment(100, -10);", "+\tdata.left = new FormAttachment(0, 10);", "+\tdata.right = new FormAttachment(50, -10);", "+\tdragConsole.setLayoutData(data);", "+", "+\tdata = new FormData();", "+\tdata.top = new FormAttachment(dropTypesGroup, 10);", "+\tdata.bottom = new FormAttachment(100, -10);", "+\tdata.left = new FormAttachment(50, 10);", "+\tdata.right = new FormAttachment(100, -10);", "+\tdropConsole.setLayoutData(data);", "+\t\t", "+\tshell.setSize(1000, 900);", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53499b915dffc8a2ed8a22dd46377bf0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "1c620522c51a270f40c2d23df3c326f48275d8bd", "commitAfterChange": "58c80ff0565eaf7cdcac1e8ac1379b16f9b58992", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": " void createEmptyRow ()", "signatureAfterChange": "  void createControls (Composite parent)", "diff": ["+", "+void createControls (Composite parent) {", "+\tComposite composite = new Composite (parent, SWT.NONE);", "+\tlayout.numColumns = 2;", "+\tcomposite.setLayout (layout);", "+\tComposite controls = new Composite (composite, SWT.NONE);", "+\tlayout = new GridLayout ();", "+\tlayout.marginHeight = layout.marginWidth = 0;", "+\tlayout.numColumns = 3;", "+\tcontrols.setLayout (layout);", "+\t// font sets group", "+\tGroup fontSetGroup = new Group (controls, SWT.NONE);", "+\tfontSetGroup.setText(SWT.getMessage (\"SWT_FontSet\"));", "+\tlayout = new GridLayout ();", "+\tlayout.numColumns = 2;", "+\tfontSetGroup.setLayout (layout);", "+\tGridData data = new GridData (GridData.FILL_BOTH);", "+\tdata.horizontalSpan = 3;", "+\tfontSetGroup.setLayoutData (data);", "+\tfontSetList = new List (fontSetGroup, SWT.V_SCROLL);", "+\tdata = new GridData (GridData.FILL_BOTH);", "+\tdata.grabExcessHorizontalSpace = true;", "+\tfontSetList.setLayoutData (data);", "+\tComposite buttonsGroup = new Composite (fontSetGroup, SWT.NONE);", "+\tlayout = new GridLayout ();", "+\tlayout.numColumns = 3;", "+\tlayout.makeColumnsEqualWidth = false;", "+\tlayout.marginHeight = layout.marginWidth = 0;", "+\tlayout.horizontalSpacing = layout.verticalSpacing = 0; ", "+\tbuttonsGroup.setLayout (layout);", "+\tComposite upDownButtonsGroup = new Composite (buttonsGroup, SWT.NONE);", "+\tlayout = new GridLayout ();", "+\tlayout.marginHeight = layout.marginWidth = 0;", "+\tlayout.horizontalSpacing = layout.verticalSpacing = 0; ", "+\tupDownButtonsGroup.setLayout(layout);", "+", "+\tint buttonAlignment = GridData.FILL_HORIZONTAL | GridData.VERTICAL_ALIGN_BEGINNING;", "+\tupButton = new Button (upDownButtonsGroup, SWT.PUSH);", "+\tupButton.setLayoutData (new GridData (buttonAlignment));", "+\tupButton.setText (SWT.getMessage (\"SWT_Up\"));", "+\tdownButton = new Button (upDownButtonsGroup, SWT.PUSH);", "+\tdownButton.setLayoutData (new GridData (buttonAlignment));", "+\tdownButton.setText (SWT.getMessage (\"SWT_Down\"));", "+", "+\tnew Label (buttonsGroup, SWT.SEPARATOR | SWT.VERTICAL);\t", "+", "+\tComposite newRemoveButtonsGroup = new Composite (buttonsGroup, SWT.NONE);", "+\tlayout = new GridLayout ();", "+\tlayout.marginHeight = layout.marginWidth = 0;", "+\tlayout.horizontalSpacing = layout.verticalSpacing = 0; ", "+\tnewRemoveButtonsGroup.setLayout(layout);", "+\t\t", "+\tnewButton = new Button (newRemoveButtonsGroup, SWT.PUSH);", "+\tnewButton.setLayoutData (new GridData (buttonAlignment));", "+\tnewButton.setText (SWT.getMessage (\"SWT_NewFont\"));", "+\tremoveButton = new Button (newRemoveButtonsGroup, SWT.PUSH);", "+\tremoveButton.setLayoutData (new GridData (buttonAlignment));", "+\tremoveButton.setText (SWT.getMessage (\"SWT_Remove\"));", "+\t", "+\t// labels row (1)", "+\tnew Label (controls, SWT.NONE).setText (SWT.getMessage (\"SWT_Character_set\") + \":\");", "+\tnew Label (controls, SWT.NONE).setText (SWT.getMessage (\"SWT_Font\") + \":\");", "+\tnew Label (controls, SWT.NONE).setText (SWT.getMessage (\"SWT_Extended_style\") + \":\");\t", "+", "+\t// lists row (2)", "+\tcharSetList = new List (controls, SWT.V_SCROLL);", "+\tGridData gridData = new GridData (GridData.FILL_HORIZONTAL);", "+\tgridData.heightHint = LIST_HEIGHT;", "+\tgridData.widthHint = LIST_WIDTH;", "+\tcharSetList.setLayoutData (gridData);", "+", "+\tfaceNameList = new List (controls, SWT.V_SCROLL);", "+\tgridData = new GridData (GridData.FILL_HORIZONTAL);", "+\tgridData.heightHint = LIST_HEIGHT;", "+\tgridData.widthHint = LIST_WIDTH;", "+\tfaceNameList.setLayoutData (gridData);", "+", "+\textStyleList = new List (controls, SWT.V_SCROLL | SWT.MULTI);", "+\tgridData = new GridData (GridData.FILL_HORIZONTAL);", "+\tgridData.heightHint = LIST_HEIGHT;", "+\tgridData.widthHint = EXTSTYLE_WIDTH;", "+\textStyleList.setLayoutData (gridData);", "+", "+\t// labels row (3)", "+\tnew Label (controls, SWT.NONE).setText (SWT.getMessage (\"SWT_Size\") + \":\");\t", "+\tnew Label (controls, SWT.NONE).setText (SWT.getMessage (\"SWT_Style\") + \":\");", "+\tnew Label (controls, SWT.NONE);\t\t// filler", "+", "+\t// lists row (4)", "+\tfontSizeList = new List (controls, SWT.V_SCROLL);", "+\tgridData = new GridData (GridData.FILL_HORIZONTAL);", "+\tgridData.heightHint = LIST_HEIGHT;", "+\tgridData.widthHint = LIST_WIDTH;", "+\tfontSizeList.setLayoutData (gridData);", "+", "+\tfontStyleList = new List (controls, SWT.V_SCROLL);", "+\tgridData = new GridData (GridData.FILL_HORIZONTAL);", "+\tgridData.heightHint = LIST_HEIGHT;", "+\tgridData.widthHint = LIST_WIDTH;", "+\tfontStyleList.setLayoutData (gridData);", "+", "+\tnew Label (controls, SWT.NONE);\t\t// filler", "+\t", "+\t// font sample group", "+\tGroup sampleGroup = new Group (controls, SWT.NONE);", "+\tgridData.heightHint = SAMPLE_HEIGHT;\t", "- */", "-void createEmptyRow () {", "-\tLabel fillLabel = new Label (shell, SWT.NONE);", "-\tGridData gridData = new GridData ();", "-\tgridData.heightHint = 5;", "-\tgridData.horizontalSpan = ((GridLayout) shell.getLayout ()).numColumns;", "-\tfillLabel.setLayoutData (gridData);", "-}", "+\tComposite okCancelGroup = new Composite (composite, SWT.NONE);", "+\tlayout = new GridLayout ();", "+\tlayout.marginHeight = layout.marginWidth = layout.verticalSpacing = 0;", "+\tokCancelGroup.setLayout (layout);", "+\tokCancelGroup.setLayoutData (new GridData (GridData.VERTICAL_ALIGN_BEGINNING));", "+\tcreateButtons (okCancelGroup);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b02ba324e003ecfb152bf775f4615286", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "af57b4287b6ed2d2e6984f1f8532d49577a00b42", "commitAfterChange": "7ec616b485cfbaa37753c7eddbc015ac1ca925e3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tstatic int atkEditableText_set_run_attributes (int atkObject, int attrib_set, int start_offset, int end_offset)", "signatureAfterChange": " \tstatic int atkEditableText_set_run_attributes (int atkObject, int attrib_set, int start_offset, int end_offset)", "diff": ["+\t\t\t\tDisplay display = accessible.control.getDisplay();", "+\t\t\t\tint /*long*/ fontDesc = OS.pango_font_description_new ();", "+\t\t\t\tboolean createFont = false;", "+\t\t\t\tTextStyle style = new TextStyle();", "+\t\t\t\tString [] attributes = new String [0];", "+\t\t\t\tint /*long*/ current = attrib_set;", "+\t\t\t\tint listLength = OS.g_slist_length (attrib_set);", "+\t\t\t\tfor (int i = 0; i < listLength; i++) {", "+\t\t\t\t\tint /*long*/ attrPtr = OS.g_slist_data (current);", "+\t\t\t\t\tif (attrPtr != 0) {", "+\t\t\t\t\t\tAtkAttribute attr = new AtkAttribute();", "+\t\t\t\t\t\tATK.memmove(attr, attrPtr, AtkAttribute.sizeof);", "+\t\t\t\t\t\tString name = getString(attr.name);", "+\t\t\t\t\t\tString value = getString(attr.value);", "+\t\t\t\t\t\tOS.g_free(attrPtr);", "+\t\t\t\t\t\tif (DEBUG) print(\"name=\" + name + \", value=\" + value);", "+\t\t\t\t\t\tString [] newAttributes = new String [attributes.length + 2];", "+\t\t\t\t\t\tSystem.arraycopy (attributes, 0, newAttributes, 0, attributes.length);", "+\t\t\t\t\t\tnewAttributes[attributes.length] = name;", "+\t\t\t\t\t\tnewAttributes[attributes.length + 1] = value;", "+\t\t\t\t\t\tattributes = newAttributes;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tif (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_RISE)))) {", "+\t\t\t\t\t\t\t\t// number of pixels above baseline", "+\t\t\t\t\t\t\t\tstyle.rise = Integer.parseInt(value);", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_UNDERLINE)))) {", "+\t\t\t\t\t\t\t\t// \"none\", \"single\", \"double\", \"low\", or \"error\" (also allow \"squiggle\")", "+\t\t\t\t\t\t\t\tif (value.equals(\"single\") || value.equals(\"low\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_SINGLE;", "+\t\t\t\t\t\t\t\t} else if (value.equals(\"double\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_DOUBLE;", "+\t\t\t\t\t\t\t\t} else if (value.equals(\"error\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_ERROR;", "+\t\t\t\t\t\t\t\t} else if (value.equals(\"squiggle\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_SQUIGGLE;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_STRIKETHROUGH)))) {", "+\t\t\t\t\t\t\t\t// \"true\" or \"false\" (also allow \"1\" and \"single\")", "+\t\t\t\t\t\t\t\tif (value.equals(\"true\") || value.equals(\"1\") || value.equals(\"single\")) style.strikeout = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_FAMILY_NAME)))) {", "+\t\t\t\t\t\t\t\t// font family name", "+\t\t\t\t\t\t\t\tbyte [] buffer = Converter.wcsToMbcs(null, value, true);", "+\t\t\t\t\t\t\t\tOS.pango_font_description_set_family(fontDesc, buffer);", "+\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_SIZE)))) {", "+\t\t\t\t\t\t\t\t// size of characters in points (allow fractional points)", "+\t\t\t\t\t\t\t\tfloat size = Float.parseFloat(value);", "+\t\t\t\t\t\t\t\tOS.pango_font_description_set_size(fontDesc, (int)(size * OS.PANGO_SCALE));", "+\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_STYLE)))) {", "+\t\t\t\t\t\t\t\t// \"normal\", \"italic\" or \"oblique\"", "+\t\t\t\t\t\t\t\tint fontStyle = -1;", "+\t\t\t\t\t\t\t\tif (value.equals(\"normal\")) fontStyle = OS.PANGO_STYLE_NORMAL;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"italic\")) fontStyle = OS.PANGO_STYLE_ITALIC;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"oblique\")) fontStyle = OS.PANGO_STYLE_OBLIQUE;", "+\t\t\t\t\t\t\t\tif (fontStyle != -1) {", "+\t\t\t\t\t\t\t\t\tOS.pango_font_description_set_style(fontDesc, fontStyle);", "+\t\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_VARIANT)))) {", "+\t\t\t\t\t\t\t\t// \"normal\" or \"small_caps\"", "+\t\t\t\t\t\t\t\tint variant = -1;", "+\t\t\t\t\t\t\t\tif (value.equals(\"normal\")) variant = OS.PANGO_VARIANT_NORMAL;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"small_caps\")) variant = OS.PANGO_VARIANT_SMALL_CAPS;", "+\t\t\t\t\t\t\t\tif (variant != -1) {", "+\t\t\t\t\t\t\t\t\tOS.pango_font_description_set_variant(fontDesc, variant);", "+\t\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_STRETCH)))) {", "+\t\t\t\t\t\t\t\t//\"ultra_condensed\", \"extra_condensed\", \"condensed\", \"semi_condensed\", \"normal\", \"semi_expanded\", \"expanded\", \"extra_expanded\" or \"ultra_expanded\" ", "+\t\t\t\t\t\t\t\tint stretch = -1;", "+\t\t\t\t\t\t\t\tif (value.equals(\"ultra_condensed\")) stretch = OS.PANGO_STRETCH_ULTRA_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"extra_condensed\")) stretch = OS.PANGO_STRETCH_EXTRA_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"condensed\")) stretch = OS.PANGO_STRETCH_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"semi_condensed\")) stretch = OS.PANGO_STRETCH_SEMI_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"normal\")) stretch = OS.PANGO_STRETCH_NORMAL;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"semi_expanded\")) stretch = OS.PANGO_STRETCH_SEMI_EXPANDED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"expanded\")) stretch = OS.PANGO_STRETCH_EXPANDED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"extra_expanded\")) stretch = OS.PANGO_STRETCH_EXTRA_EXPANDED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"ultra_expanded\")) stretch = OS.PANGO_STRETCH_ULTRA_EXPANDED;", "+\t\t\t\t\t\t\t\tif (stretch != -1) {", "+\t\t\t\t\t\t\t\t\tOS.pango_font_description_set_stretch(fontDesc, stretch);", "+\t\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_WEIGHT)))) {", "+\t\t\t\t\t\t\t\t// weight of the characters", "+\t\t\t\t\t\t\t\tint weight = Integer.parseInt(value);", "+\t\t\t\t\t\t\t\tOS.pango_font_description_set_weight(fontDesc, weight);", "+\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_FG_COLOR)))) {", "+\t\t\t\t\t\t\t\t// RGB value of the format \"u,u,u\"", "+\t\t\t\t\t\t\t\tstyle.foreground = colorFromString(display, value);", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_BG_COLOR)))) {", "+\t\t\t\t\t\t\t\t// RGB value of the format \"u,u,u\"", "+\t\t\t\t\t\t\t\tstyle.background = colorFromString(display, value);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t//TODO language and direction", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (NumberFormatException ex) {}", "+\t\t\t\t\t}", "+\t\t\t\t\tcurrent = OS.g_slist_next (current);", "+\t\t\t\t}", "+\t\t\t\tif (createFont) {", "+\t\t\t\t\tstyle.font = Font.gtk_new(display, fontDesc);", "+\t\t\t\t}", "+", "-\t\t\t\t// TODO: get attrib_set and set event.textStyle and event.attributes (see atkText_get_run_attributes)", "+\t\t\t\tevent.textStyle = style;", "+\t\t\t\tevent.attributes = attributes;", "-\t\t\t\t// TODO: dispose event.textStyle font/foreground/background", "+\t\t\t\tif (style.font != null) {", "+\t\t\t\t\tstyle.font.dispose();", "+\t\t\t\t}", "+\t\t\t\tif (style.foreground != null) {", "+\t\t\t\t\tstyle.foreground.dispose();", "+\t\t\t\t}", "+\t\t\t\tif (style.background != null) {", "+\t\t\t\t\tstyle.background.dispose();", "+\t\t\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f9aa52ee033927123e91b6a04b43c19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "deba00683b7e799ad97b05b6dcbb1d19c053de72", "commitAfterChange": "f295d81c96c5f0cad60547a25236d1a3bb649162", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "diff": ["-\tLRESULT result  = super.WM_IME_COMPOSITION (wParam, lParam);", "-\t/*", "-\t* Bug in Windows.  On Korean Windows XP, the IME window", "-\t* for the Korean Input System (MS-IME 2002) always opens ", "-\t* in the top left corner of the screen, despite the fact", "-\t* that ImmSetCompositionWindow() was called to position", "-\t* the IME when focus is gained.  The fix is to position", "-\t* the IME on every WM_IME_COMPOSITION message.", "-\t*/", "-\tif (!OS.IsWinCE && OS.WIN32_VERSION == OS.VERSION (5, 1)) {", "-\t\tif (OS.IsDBLocale) {", "-\t\t\tshort langID = OS.GetSystemDefaultUILanguage ();", "-\t\t\tshort primaryLang = OS.PRIMARYLANGID (langID);", "-\t\t\tif (primaryLang == OS.LANG_KOREAN) {", "-\t\t\t\tif (caret != null && caret.isFocusCaret ()) {", "-\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "-\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "-\t\t\t\t\t\tCOMPOSITIONFORM lpCompForm = new COMPOSITIONFORM ();", "-\t\t\t\t\t\tlpCompForm.dwStyle = OS.CFS_POINT;", "-\t\t\t\t\t\tlpCompForm.x = ptCurrentPos.x;", "-\t\t\t\t\t\tlpCompForm.y = ptCurrentPos.y;", "-\t\t\t\t\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "-\t\t\t\t\t\tOS.ImmSetCompositionWindow (hIMC, lpCompForm);", "-\t\t\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "+\tLRESULT result = super.WM_IME_COMPOSITION (wParam, lParam);", "+\tif (OS.IsDBLocale && hooks (SWT.ImeComposition)) {", "+\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "+\t\tif (hIMC != 0) {", "+\t\t\tTCHAR buffer = null;", "+\t\t\tif ((lParam & OS.GCS_RESULTSTR) != 0) {", "+\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, null, 0);", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tbuffer = new TCHAR (getCodePage (), length / TCHAR.sizeof);", "+\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, buffer, length);", "+\t\t\t\t\tString text = buffer.toString (); ", "+\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "+\t\t\t\t\tevent.text = text;", "+\t\t\t\t\tevent.count = text.length ();", "+\t\t\t\t\tsendEvent (SWT.ImeComposition, event);", "+\t\t\t\t\tif (event.doit) {", "+\t\t\t\t\t\tDisplay display = this.display;", "+\t\t\t\t\t\tdisplay.lastKey = 0;", "+\t\t\t\t\t\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "+\t\t\t\t\t\tlength = text.length ();", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tchar c = text.charAt (i);", "+\t\t\t\t\t\t\tdisplay.lastAscii = c;", "+\t\t\t\t\t\t\tevent = new Event ();", "+\t\t\t\t\t\t\tevent.character = c;", "+\t\t\t\t\t\t\tsendEvent (SWT.KeyDown, event);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif ((lParam & OS.GCS_COMPSTR) == 0) return LRESULT.ONE;", "+\t\t\t}", "+\t\t\t", "+\t\t\tint index = 0;", "+\t\t\tint [] ranges = null;", "+\t\t\tTextStyle [] styles = null;", "+\t\t\tint /*long*/ layout = OS.GetKeyboardLayout (0);", "+\t\t\tshort langID = (short)OS.LOWORD (layout);", "+\t\t\tif ((lParam & OS.GCS_COMPSTR) != 0) {", "+\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, null, 0);", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tbuffer = new TCHAR (getCodePage (), length / TCHAR.sizeof);", "+\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, buffer, length);", "+\t\t\t\t\tif ((lParam & OS.GCS_CURSORPOS) != 0) {", "+\t\t\t\t\t\tindex = OS.ImmGetCompositionString (hIMC, OS.GCS_CURSORPOS, null, 0);", "+\t\t\t\t\t}", "+\t\t\t\t\tint [] clauses = null;", "+\t\t\t\t\tif ((lParam & OS.GCS_COMPCLAUSE) != 0) {", "+\t\t\t\t\t\tlength = OS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, (int [])null, 0);", "+\t\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\t\tclauses = new int [length / 4];", "+\t\t\t\t\t\t\tOS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, clauses, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((lParam & OS.GCS_COMPATTR) != 0 && clauses != null) {", "+\t\t\t\t\t\tlength = OS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, (byte [])null, 0);", "+\t\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\t\tbyte [] attrs = new byte [length];", "+\t\t\t\t\t\t\tOS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, attrs, length);", "+\t\t\t\t\t\t\tlength = clauses.length - 1;", "+\t\t\t\t\t\t\tranges = new int [length * 2];", "+\t\t\t\t\t\t\tstyles = new TextStyle [length];", "+\t\t\t\t\t\t\tTF_DISPLAYATTRIBUTE attr = null; ", "+\t\t\t\t\t\t\tTextStyle style = null;", "+\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\t\tranges [i * 2] = clauses [i];", "+\t\t\t\t\t\t\t\tranges [i * 2 + 1] = clauses [i + 1] - clauses [i];", "+\t\t\t\t\t\t\t\tstyles [i] = style = new TextStyle ();", "+\t\t\t\t\t\t\t\tattr = getDisplayAttribute (langID, attrs [clauses [i]]);", "+\t\t\t\t\t\t\t\tif (attr != null) {", "+\t\t\t\t\t\t\t\t\tswitch (attr.crText.type) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, attr.crText.cr);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crText.cr);", "+\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tswitch (attr.crBk.type) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, attr.crBk.cr);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crBk.cr);", "+\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tswitch (attr.crLine.type) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, attr.crLine.cr);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crLine.cr);", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tstyle.underline = attr.lsStyle != OS.TF_LS_NONE;", "+\t\t\t\t\t\t\t\t\tswitch (attr.lsStyle) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SQUIGGLE:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_ERROR;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DASH:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DASH; ", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DOT:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DOT;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SOLID:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = attr.fBoldLine ? UNDERLINE_IME_THICK : SWT.UNDERLINE_SINGLE;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "+\t\t\t}", "+\t\t\tString text = buffer != null ? buffer.toString () : \"\";", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "+\t\t\tevent.text = text;", "+\t\t\tevent.index = index;", "+\t\t\tevent.count = 0;", "+\t\t\tevent.ranges = ranges;", "+\t\t\tevent.styles = styles;", "+\t\t\tevent.wideCaret = OS.PRIMARYLANGID (langID) == OS.LANG_KOREAN; ", "+\t\t\tsendEvent (SWT.ImeComposition, event);", "+\t\t}", "+\t\treturn LRESULT.ONE;", "+\t} else {", "+\t\t/*", "+\t\t* Bug in Windows.  On Korean Windows XP, the IME window", "+\t\t* for the Korean Input System (MS-IME 2002) always opens ", "+\t\t* in the top left corner of the screen, despite the fact", "+\t\t* that ImmSetCompositionWindow() was called to position", "+\t\t* the IME when focus is gained.  The fix is to position", "+\t\t* the IME on every WM_IME_COMPOSITION message.", "+\t\t*/", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION == OS.VERSION (5, 1)) {", "+\t\t\tif (OS.IsDBLocale) {", "+\t\t\t\tshort langID = OS.GetSystemDefaultUILanguage ();", "+\t\t\t\tshort primaryLang = OS.PRIMARYLANGID (langID);", "+\t\t\t\tif (primaryLang == OS.LANG_KOREAN) {", "+\t\t\t\t\tif (caret != null && caret.isFocusCaret ()) {", "+\t\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "+\t\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "+\t\t\t\t\t\t\tCOMPOSITIONFORM lpCompForm = new COMPOSITIONFORM ();", "+\t\t\t\t\t\t\tlpCompForm.dwStyle = OS.CFS_POINT;", "+\t\t\t\t\t\t\tlpCompForm.x = ptCurrentPos.x;", "+\t\t\t\t\t\t\tlpCompForm.y = ptCurrentPos.y;", "+\t\t\t\t\t\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "+\t\t\t\t\t\t\tOS.ImmSetCompositionWindow (hIMC, lpCompForm);", "+\t\t\t\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "+\t\t\t\t\t\t}", "+\t}", "+\treturn result;", "+}"]}], "num": 48858}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "421c4bf2b2a492c978ee21baadd704a4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "362fed7eeba57d5484413f9367ebf1c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "5d38390584adf79405cd86a4c28992ccdbd567df", "commitAfterChange": "b0a0bcf30f09c2ffbb2137bd933ec7f8ce62d60c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void _setText (String string)", "signatureAfterChange": " void _setText (String string)", "diff": ["-\tchar [] text = new char [string.length ()];", "-\tstring.getChars (0, text.length, text, 0);", "-\tint mnemonic = fixMnemonic (text);", "-\tbyte [] buffer = Converter.wcsToMbcs (getCodePage (), text, true);", "-\tint xmString = OS.XmStringParseText (", "-\t\tbuffer,", "-\t\t0,", "-\t\tOS.XmFONTLIST_DEFAULT_TAG, ", "-\t\tOS.XmCHARSET_TEXT, ", "-\t\tnull,", "-\t\t0,", "-\t\t0);\t", "+\t/* Strip out mnemonic marker symbols, and remember the mnemonic. */", "+\tchar [] unicode = new char [string.length ()];", "+\tstring.getChars (0, unicode.length, unicode, 0);", "+\tint mnemonic = fixMnemonic (unicode);", "+\t", "+\t/* Wrap the text if necessary, and convert to mbcs. */", "+\tbyte [] buffer = null;", "+\tif ((style & SWT.WRAP) != 0) {", "+\t\tint [] argList = {", "+\t\t\tOS.XmNwidth, 0,        /* 1 */", "+\t\t\tOS.XmNmarginWidth, 0,  /* 3 */", "+\t\t\tOS.XmNmarginLeft, 0,   /* 5 */", "+\t\t\tOS.XmNmarginRight, 0,  /* 7 */", "+\t\t\tOS.XmNspacing, 0,      /* 9 */", "+\t\t\tOS.XmNdefaultButtonShadowThickness, 0, /* 11 */", "+\t\t};", "+\t\tOS.XtGetValues (handle, argList, argList.length / 2);", "+\t\tint width = argList [1] - argList [3] * 2 - argList[5] - argList[7] - argList[9] - argList[11] * 2;", "+\t\tif (mnemonic != 0) string = new String (unicode);", "+\t\tstring = display.wrapText (string, font, width);", "+\t\tbuffer = Converter.wcsToMbcs (getCodePage (), string, true);", "+\t} else {", "+\t\tbuffer = Converter.wcsToMbcs (getCodePage (), unicode, true);", "+\t}", "+\t", "+\tint xmString = OS.XmStringGenerate(buffer, null, OS.XmCHARSET_TEXT, null);", "-\tif (mnemonic == 0) mnemonic = OS.XK_VoidSymbol;", "+\t\t", "+\t/*", "+\t* Bug in Solaris.  If a mnemonic is defined to be a character", "+\t* that appears in a string in a position that follows a '\\n',", "+\t* Solaris segment faults.  For example, a label with text", "+\t* \"Hello\\nthe&re\" would GP since \"r\" appears after '\\n'.", "+\t*", "+\t* The fix is to remove mnemonics from labels that contain", "+\t* '\\n', which is fine since such labels generally just act", "+\t* as descriptive texts anyways.", "+\t*/ ", "+\tif (mnemonic == 0 || string.indexOf ('\\n') != -1) {", "+\t\tmnemonic = OS.XK_VoidSymbol;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29afb4499d6da89022facd8e25a170c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "a367fc3916a2570f3fcccaa121cd9f13d3ec0a2d", "commitAfterChange": "a6b0604fa08391fbbca703d6c89f8c08569502b9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r public void setText (String string)", "signatureAfterChange": "\r public void setText (String string)", "diff": ["-\t/*\r", "-\t * Strip out mnemonic marker symbols, and remember the mnemonic.\r", "-\t * Also check for lf's while we're at it, to help with Solaris bug\r", "-\t * described down below.\r", "-\t */\r", "-\tboolean hasLf = false;\r", "+\t/* Strip out mnemonic marker symbols, and remember the mnemonic. */\r", "-\t\tif (unicode [i] == '\\n') hasLf = true;\r", "-\t\tif (mnemonic != 0) string = new String(unicode);\r", "+\t\tif (mnemonic != 0) string = new String (unicode);\r", "-\t\r", "+\t\t\r", "-\t * Bug in Solaris.  If a mnemonic is defined to be a character\r", "-\t * that only appears in a string in a position that follows\r", "-\t * a newline character then Solaris GP's since it\r", "-\t * does not find an instance of the letter to underline in\r", "-\t * the first display line.  For example, a label with text\r", "-\t * \"Hello\\nthe&re\" would GP since \"r\" does not appear in \"Hello\".\r", "-\t *\r", "-\t * The fix is to remove mnemonics from labels that contain\r", "-\t * newlines, which is fine since such labels generally just act\r", "-\t * as descriptive texts anyways.\r", "-\t */ \r", "-\tif (mnemonic == 0 || hasLf) mnemonic = OS.XK_VoidSymbol;\r", "+\t* Bug in Solaris.  If a mnemonic is defined to be a character\r", "+\t* that appears in a string in a position that follows a '\\n',\r", "+\t* Solaris segment faults.  For example, a label with text\r", "+\t* \"Hello\\nthe&re\" would GP since \"r\" appears after '\\n'.\r", "+\t*\r", "+\t* The fix is to remove mnemonics from labels that contain\r", "+\t* '\\n', which is fine since such labels generally just act\r", "+\t* as descriptive texts anyways.\r", "+\t*/ \r", "+\tif (mnemonic == 0 || string.indexOf ('\\n') != -1) {\r", "+\t\tmnemonic = OS.XK_VoidSymbol;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d39298b103910b0a585734e1f5d77337", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "2ae86819a60b98376cf75e6ce9f3c89fd6e5f9d0", "commitAfterChange": "1de0170aefb186594865f4c80fab51dd7f9df2d3", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["-\ttext = string;", "-\t/*", "-\t* Bug in Motif.  The widget will not receive mouse events, if the", "-\t* label string is empty.  The fix is to detect that and set a single", "-\t* space instead. ", "-\t*/", "-\tif (string.length () == 0) string = \" \";", "-", "-\t/* Strip out mnemonic marker symbols, and remember the mnemonic. */", "-\tchar [] unicode = new char [string.length ()];", "-\tstring.getChars (0, unicode.length, unicode, 0);", "-\tint mnemonic = fixMnemonic (unicode);", "-\t", "-\t/* Wrap the text if necessary, and convert to mbcs. */", "-\tbyte [] buffer;", "-\tif ((style & SWT.WRAP) != 0) {", "-\t\tint [] argList = {", "-\t\t\tOS.XmNwidth, 0,        /* 1 */", "-\t\t\tOS.XmNmarginLeft, 0,   /* 3 */", "-\t\t\tOS.XmNmarginRight, 0,  /* 5 */", "-\t\t\tOS.XmNborderWidth, 0,  /* 7 */", "-\t\t\tOS.XmNmarginWidth, 0,  /* 9 */", "-\t\t};", "-\t\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\t\tint width = argList [1] - argList [3] - argList [5] - argList [7] * 2 - argList [9] * 2;", "-\t\tif (mnemonic != 0) string = new String (unicode);", "-\t\tstring = display.wrapText (string, font, width);", "-\t\tbuffer = Converter.wcsToMbcs (getCodePage (), string, true);", "-\t} else {", "-\t\tbuffer = Converter.wcsToMbcs (getCodePage (), unicode, true);", "-\t}", "-\t", "-\tint xmString = OS.XmStringGenerate(buffer, null, OS.XmCHARSET_TEXT, null);", "-\tif (xmString == 0) error (SWT.ERROR_CANNOT_SET_TEXT);", "-\t\t", "-\t/*", "-\t* Bug in Solaris.  If a mnemonic is defined to be a character", "-\t* that appears in a string in a position that follows a '\\n',", "-\t* Solaris segment faults.  For example, a label with text", "-\t* \"Hello\\nthe&re\" would GP since \"r\" appears after '\\n'.", "-\t*", "-\t* The fix is to remove mnemonics from labels that contain", "-\t* '\\n', which is fine since such labels generally just act", "-\t* as descriptive texts anyways.", "-\t*/ ", "-\tif (mnemonic == 0 || string.indexOf ('\\n') != -1) {", "-\t\tmnemonic = OS.XK_VoidSymbol;", "-\t}", "-\tint [] argList = {", "-\t\tOS.XmNlabelType, OS.XmSTRING,", "-\t\tOS.XmNlabelString, xmString,", "-\t\tOS.XmNmnemonic, mnemonic,", "-\t};", "-\tOS.XtSetValues (handle, argList, argList.length / 2);", "-\tif (xmString != 0) OS.XmStringFree (xmString);", "+\t_setText (text = string);"]}], "num": 267}
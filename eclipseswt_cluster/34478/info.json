{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45e55e30fc056ef7d418a2fc0a8461a8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f6112f8dbd2af8191e2a0fd7bea1b79", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT AWT/win32/org/eclipse/swt/awt/SWT_AWT.java", "commitBeforeChange": "78c74876ae1e4097c252aedb4af0e22dbe7f50e9", "commitAfterChange": "b71aa86030e46eaf791271d308756466491057b1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static Frame new_Frame (final Composite parent)", "signatureAfterChange": " public static Frame new_Frame (final Composite parent)", "diff": ["-\tint handle = parent.handle;", "-\t/*", "-\t * Some JREs have implemented the embedded frame constructor to take an integer", "-\t * and other JREs take a long.  To handle this binary incompatability, use", "-\t * reflection to create the embedded frame.", "-\t */", "-\tClass clazz = null;", "-\ttry {", "-\t\tString className = embeddedFrameClass != null ? embeddedFrameClass : \"sun.awt.windows.WEmbeddedFrame\";", "-\t\tclazz = Class.forName(className);", "-\t} catch (Throwable e) {", "-\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, e);\t\t", "-\t}", "-\tConstructor constructor = null;", "-\ttry {", "-\t\tconstructor = clazz.getConstructor (new Class [] {int.class});", "-\t} catch (Throwable e1) {", "+\tfinal int handle = parent.handle;\t", "+\tfinal Frame[] result = new Frame[1];", "+\tfinal Throwable[] exception = new Throwable[1];", "+\tEventQueue.invokeLater(new Runnable () {", "+\t\tpublic void run () {", "+\t\t\ttry {", "+\t\t\t\t/*", "+\t\t\t\t * Some JREs have implemented the embedded frame constructor to take an integer", "+\t\t\t\t * and other JREs take a long.  To handle this binary incompatability, use", "+\t\t\t\t * reflection to create the embedded frame.", "+\t\t\t\t */", "+\t\t\t\tClass clazz = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tString className = embeddedFrameClass != null ? embeddedFrameClass : \"sun.awt.windows.WEmbeddedFrame\";", "+\t\t\t\t\tclazz = Class.forName(className);", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\texception[0] = e;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tConstructor constructor = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tconstructor = clazz.getConstructor (new Class [] {int.class});", "+\t\t\t\t} catch (Throwable e1) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tconstructor = clazz.getConstructor (new Class [] {long.class});", "+\t\t\t\t\t} catch (Throwable e2) {", "+\t\t\t\t\t\texception[0] = e2;", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tinitializeSwing ();", "+\t\t\t\tObject value = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tvalue = constructor.newInstance (new Object [] {new Integer (handle)});", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\texception[0] = e;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tfinal Frame frame = (Frame) value;", "+\t\t\t\t/*", "+\t\t\t\t * This is necessary to make lightweight components", "+\t\t\t\t * directly added to the frame receive mouse events", "+\t\t\t\t * properly.", "+\t\t\t\t */", "+\t\t\t\tframe.addNotify();", "+\t\t\t\tresult[0] = frame;", "+\t\t\t} finally {", "+\t\t\t\tsynchronized(result) {", "+\t\t\t\t\tresult.notify();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t});", "+\tboolean interrupted = false;", "+\tMSG msg = new MSG ();", "+\tint flags = OS.PM_NOREMOVE | OS.PM_NOYIELD | OS.PM_QS_SENDMESSAGE;", "+\twhile (result[0] == null && exception[0] == null) {", "+\t\tOS.PeekMessage (msg, 0, 0, 0, flags);", "-\t\t\tconstructor = clazz.getConstructor (new Class [] {long.class});", "-\t\t} catch (Throwable e2) {", "-\t\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, e2);", "+\t\t\tsynchronized (result) {", "+\t\t\t\tresult.wait(50);", "+\t\t\t}", "+\t\t} catch (InterruptedException e) {", "+\t\t\tinterrupted = true;", "-\tinitializeSwing ();", "-\tObject value = null;", "-\ttry {", "-\t\tvalue = constructor.newInstance (new Object [] {new Integer (handle)});", "-\t} catch (Throwable e) {", "-\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, e);", "+\tif (interrupted) {", "+\t\tCompatibility.interrupt();", "-\tfinal Frame frame = (Frame) value;", "-\tparent.setData(EMBEDDED_FRAME_KEY, frame);", "-\t", "-\t/*", "-\t* This is necessary to make lightweight components", "-\t* directly added to the frame receive mouse events", "-\t* properly.", "-\t*/", "-\tframe.addNotify();", "+\tif (exception[0] != null) {", "+\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, exception[0]);\t", "+\t}", "+\tfinal Frame frame = result[0];\t", "+\tparent.setData(EMBEDDED_FRAME_KEY, frame);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc99058ad1547565561403fcd858cdcf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT AWT/win32/org/eclipse/swt/awt/SWT_AWT.java", "commitBeforeChange": "0bc2696ce84b12c7d91558e96aaf3395d8aca048", "commitAfterChange": "992ce37f3799440216ec8235df107c5733bbc498", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static Frame new_Frame (final Composite parent)", "signatureAfterChange": " public static Frame new_Frame (final Composite parent)", "diff": ["-\tint /*long*/ handle = parent.handle;", "-\t/*", "-\t * Some JREs have implemented the embedded frame constructor to take an integer", "-\t * and other JREs take a long.  To handle this binary incompatibility, use", "-\t * reflection to create the embedded frame.", "-\t */", "-\tClass clazz = null;", "-\ttry {", "-\t\tString className = embeddedFrameClass != null ? embeddedFrameClass : \"sun.awt.windows.WEmbeddedFrame\";", "-\t\tclazz = Class.forName(className);", "-\t} catch (Throwable e) {", "-\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, e);", "-\t}", "-\tinitializeSwing ();", "-\tObject value = null;", "-\tConstructor constructor = null;", "-\ttry {", "-\t\tconstructor = clazz.getConstructor (new Class [] {int.class});", "-\t\tvalue = constructor.newInstance (new Object [] {new Integer ((int)/*64*/handle)});", "-\t} catch (Throwable e1) {", "-\t\ttry {", "-\t\t\tconstructor = clazz.getConstructor (new Class [] {long.class});", "-\t\t\tvalue = constructor.newInstance (new Object [] {new Long (handle)});", "-\t\t} catch (Throwable e2) {", "-\t\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, e2);", "+\tfinal int /*long*/ handle = parent.handle;", "+\tfinal Frame[] result = new Frame[1];", "+\tfinal Throwable[] exception = new Throwable[1];", "+\tRunnable runnable = new Runnable () {", "+\t\tpublic void run () {", "+\t\t\ttry {", "+\t\t\t\t/*", "+\t\t\t\t * Some JREs have implemented the embedded frame constructor to take an integer", "+\t\t\t\t * and other JREs take a long.  To handle this binary incompatibility, use", "+\t\t\t\t * reflection to create the embedded frame.", "+\t\t\t\t */", "+\t\t\t\tClass clazz = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tString className = embeddedFrameClass != null ? embeddedFrameClass : \"sun.awt.windows.WEmbeddedFrame\";", "+\t\t\t\t\tclazz = Class.forName(className);", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\texception[0] = e;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tinitializeSwing ();", "+\t\t\t\tObject value = null;", "+\t\t\t\tConstructor constructor = null;", "+\t\t\t\ttry {", "+\t\t\t\t\tconstructor = clazz.getConstructor (new Class [] {int.class});", "+\t\t\t\t\tvalue = constructor.newInstance (new Object [] {new Integer ((int)/*64*/handle)});", "+\t\t\t\t} catch (Throwable e1) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tconstructor = clazz.getConstructor (new Class [] {long.class});", "+\t\t\t\t\t\tvalue = constructor.newInstance (new Object [] {new Long (handle)});", "+\t\t\t\t\t} catch (Throwable e2) {", "+\t\t\t\t\t\texception[0] = e2;", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tfinal Frame frame = (Frame) value;", "+\t\t\t\t/*", "+\t\t\t\t * This is necessary to make lightweight components", "+\t\t\t\t * directly added to the frame receive mouse events", "+\t\t\t\t * properly.", "+\t\t\t\t */", "+\t\t\t\tframe.addNotify();", "+\t\t\t\t", "+\t\t\t\t/*", "+\t\t\t\t* TEMPORARY CODE", "+\t\t\t\t* ", "+\t\t\t\t* For some reason, the graphics configuration of the embedded", "+\t\t\t\t* frame is not initialized properly. This causes an exception", "+\t\t\t\t* when the depth of the screen is changed.", "+\t\t\t\t*/", "+\t\t\t\ttry {", "+\t\t\t\t\tclazz = Class.forName(\"sun.awt.windows.WComponentPeer\");", "+\t\t\t\t\tField field = clazz.getDeclaredField(\"winGraphicsConfig\");", "+\t\t\t\t\tfield.setAccessible(true);", "+\t\t\t\t\tfield.set(frame.getPeer(), frame.getGraphicsConfiguration());", "+\t\t\t\t} catch (Throwable e) {}", "+\t\t\t\t", "+\t\t\t\tresult[0] = frame;", "+\t\t\t} finally {", "+\t\t\t\tsynchronized(result) {", "+\t\t\t\t\tresult.notify();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t};", "+\tif (EventQueue.isDispatchThread() || parent.getDisplay().getSyncThread() != null) {", "+\t\trunnable.run();", "+\t} else {", "+\t\tEventQueue.invokeLater(runnable);", "+\t\tOS.ReplyMessage(0);", "+\t\tboolean interrupted = false;", "+\t\tMSG msg = new MSG ();", "+\t\tint flags = OS.PM_NOREMOVE | OS.PM_NOYIELD | OS.PM_QS_SENDMESSAGE;", "+\t\twhile (result[0] == null && exception[0] == null) {", "+\t\t\tOS.PeekMessage (msg, 0, 0, 0, flags);", "+\t\t\ttry {", "+\t\t\t\tsynchronized (result) {", "+\t\t\t\t\tresult.wait(50);", "+\t\t\t\t}", "+\t\t\t} catch (InterruptedException e) {", "+\t\t\t\tinterrupted = true;", "+\t\t\t}", "+\t\t}", "+\t\tif (interrupted) {", "+\t\t\tCompatibility.interrupt();", "-\tfinal Frame frame = (Frame) value;", "-\t/*", "-\t * This is necessary to make lightweight components", "-\t * directly added to the frame receive mouse events", "-\t * properly.", "-\t */", "-\tframe.addNotify();", "+\tif (exception[0] != null) {", "+\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, exception[0]);", "+\t}", "+\tfinal Frame frame = result[0];", "-\t\t\t\t\t\t\tframe.dispose ();", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tframe.dispose ();", "+\t\t\t\t\t\t\t} catch (Throwable e) {}", "-\t\t}", "-\t});", "-\t/*", "-\t* TEMPORARY CODE", "-\t* ", "-\t* For some reason, the graphics configuration of the embedded", "-\t* frame is not initialized properly. This causes an exception", "-\t* when the depth of the screen is changed.", "-\t*/", "-\tEventQueue.invokeLater(new Runnable () {", "-\t\tpublic void run () {", "-\t\t\ttry {", "-\t\t\t\tClass clazz = Class.forName(\"sun.awt.windows.WComponentPeer\");", "-\t\t\t\tField field = clazz.getDeclaredField(\"winGraphicsConfig\");", "-\t\t\t\tfield.setAccessible(true);", "-\t\t\t\tfield.set(frame.getPeer(), frame.getGraphicsConfiguration());", "-\t\t\t} catch (Throwable e) {}"]}], "num": 34478}
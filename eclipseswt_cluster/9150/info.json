{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eac4adc553d0715a529bc893c761d368", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3b5a309b5b30df8e599c149b9d1b927", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d9c3b331be881a37a3f7a5d1b698cd8946cf300a", "commitAfterChange": "9e7c084c698b4cf23366bbcf30edcac9c72dc2d6", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public int internal_new_GC (GCData data)", "signatureAfterChange": " public int internal_new_GC (GCData data)", "diff": ["-\tNSGraphicsContext context = application.context();", "+\tif (screenWindow == null) {", "+\t\tNSWindow window = (NSWindow) new NSWindow ().alloc ();", "+\t\tNSRect rect = new NSRect();", "+\t\twindow = window.initWithContentRect_styleMask_backing_defer_(rect, OS.NSBorderlessWindowMask, OS.NSBackingStoreBuffered, false);", "+\t\tscreenWindow = window;", "+\t}", "+\tNSGraphicsContext context = screenWindow.graphicsContext();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10b0b4c0bac469925eede283f7682b74", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "a0a914aabdd6c9ea4ba2f1675deb8ba2ef639121", "commitAfterChange": "2fb2c5cc4e74544222c9d75539a0e1b05af67819", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\tint [] ptr = new int [1];", "-\t\t\tint [] actualSize = new int [1];", "-\t\t\tOS.GetControlData (handle, (short)0 , OS.kControlStaticTextCFStringTag, 4, ptr, actualSize);", "-\t\t\tif (ptr [0] != 0) {", "-\t\t\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\tshort [] baseLine = new short [1];", "-\t\t\t\tboolean wrap = false;", "-\t\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "-\t\t\t\t\twrap = true;", "-\t\t\t\t\tbounds.h = (short) wHint;", "+\t\t\twidth = DEFAULT_WIDTH;", "+\t\t\theight = DEFAULT_HEIGHT;", "+\t\t\tif (text.length () != 0) {", "+\t\t\t\tint [] ptr = new int [1];", "+\t\t\t\tint [] actualSize = new int [1];", "+\t\t\t\tOS.GetControlData (handle, (short)0 , OS.kControlStaticTextCFStringTag, 4, ptr, actualSize);", "+\t\t\t\tif (ptr [0] != 0) {", "+\t\t\t\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\t\tshort [] baseLine = new short [1];", "+\t\t\t\t\tboolean wrap = false;", "+\t\t\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "+\t\t\t\t\t\twrap = true;", "+\t\t\t\t\t\tbounds.h = (short) wHint;", "+\t\t\t\t\t}", "+\t\t\t\t\t// NEEDS work - only works for default font", "+\t\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "+\t\t\t\t\twidth = bounds.h;", "+\t\t\t\t\theight = bounds.v;", "+\t\t\t\t\tOS.CFRelease (ptr [0]);", "-\t\t\t\t// NEEDS work - only works for default font", "-\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "-\t\t\t\twidth = bounds.h;", "-\t\t\t\theight = bounds.v;", "-\t\t\t\tOS.CFRelease (ptr [0]);", "-\t\t\t\twidth = DEFAULT_WIDTH;", "-\t\t\t\theight = DEFAULT_HEIGHT;", "+\t\t\t\tFont font = getFont ();", "+\t\t\t\tFontInfo info = new FontInfo ();", "+\t\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "+\t\t\t\theight = info.ascent + info.descent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0322f26096ab0ae4410e3c99ca1bc0f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 258, "signatureBeforeChange": "  \tint accDoDefaultAction(int varChild)", "signatureAfterChange": " \tint accDoDefaultAction(int varChild)", "diff": ["+\t/* accDoDefaultAction([in] varChild) */", "-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "-\t\t// Currently, we don't let the application override this. Forward to the proxy.", "-\t\tint code = iaccessible.accDoDefaultAction(varChild);", "-\t\tif (code == COM.E_INVALIDARG) code = COM.DISP_E_MEMBERNOTFOUND; // proxy doesn't know about app childID", "+\t\tif (accessibleActionListeners.size() > 0) {", "+\t\t\tVARIANT v = getVARIANT(varChild);", "+\t\t\tif (v.vt != COM.VT_I4) return COM.E_INVALIDARG;", "+\t\t\tif (v.lVal == COM.CHILDID_SELF) return doAction(0);", "+\t\t}", "+\t\tint code = COM.DISP_E_MEMBERNOTFOUND;", "+\t\tif (iaccessible != null) {", "+\t\t\t/* If there were no action listeners, forward to the proxy. */", "+\t\t\tcode = iaccessible.accDoDefaultAction(varChild);", "+\t\t\tif (code == COM.E_INVALIDARG) code = COM.DISP_E_MEMBERNOTFOUND; // proxy doesn't know about app childID", "+\t\t}"]}], "num": 9150}
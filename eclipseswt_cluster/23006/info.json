{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8d6aaf79cf487337f56d04b7dfde5a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f9a49a11461d07770510abc47ea493c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "0ad0a601d34f9b89eab0eb65f5e8c1953894af48", "commitAfterChange": "9bae3043b8c03528811ea12dd167ee4b0dbee04f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void setTabList (Control [] tabList)", "signatureAfterChange": " public void setTabList (Control [] tabList)", "diff": ["-\tif (tabList == null) error (SWT.ERROR_NULL_ARGUMENT);", "-    /* AW", "-\tint [] argList1 = new int [] {OS.XmNnavigationType, OS.XmTAB_GROUP};", "-\tControl [] children = _getChildren ();", "-\tfor (int i=0; i<children.length; i++) {", "-\t\tControl control = children [i];", "-\t\tOS.XtSetValues (control.handle, argList1, argList1.length / 2);", "-\t}", "-\tint [] argList2 = new int [] {OS.XmNnavigationType, OS.XmEXCLUSIVE_TAB_GROUP};", "-\tfor (int i=0; i<tabList.length; i++) {", "-        */", "-\t\t/*", "-\t\t* Set the XmNnavigationType twice, once to clear the", "-\t\t* old value and once to set the new.  If the old value", "-\t\t* is not cleared, Motif detects that the values are the", "-\t\t* same and does not change the tab order.", "-\t\t*/", "-\t\t/* AW", "-\t\tControl control = tabList [i];", "-\t\tOS.XtSetValues (control.handle, argList1, argList1.length / 2);", "-\t\tOS.XtSetValues (control.handle, argList2, argList2.length / 2);", "-\t}", "-\t*/", "+\tif (tabList != null) {", "+\t\tfor (int i=0; i<tabList.length; i++) {", "+\t\t\tControl control = tabList [i];", "+\t\t\tif (control == null) error (SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\tif (control.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\t/*", "+\t\t\t* This code is intentionally commented.", "+\t\t\t* Tab lists are currently only supported", "+\t\t\t* for the direct children of a composite.", "+\t\t\t*/", "+//\t\t\tShell shell = control.getShell ();", "+//\t\t\twhile (control != shell && control != this) {", "+//\t\t\t\tcontrol = control.parent;", "+//\t\t\t}", "+//\t\t\tif (control != this) error (SWT.ERROR_INVALID_PARENT);", "+\t\t\tif (control.parent != this) error (SWT.ERROR_INVALID_PARENT);", "+\t\t}", "+\t\tControl [] newList = new Control [tabList.length];", "+\t\tSystem.arraycopy (tabList, 0, newList, 0, tabList.length);", "+\t\ttabList = newList;", "+\t} ", "+\tthis.tabList = tabList;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b62e6e74d91abce479a5c61203b61e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "e31d17ab01c6499c992488bb2508d677cae42d4c", "commitAfterChange": "96ead799b163f69c971718d08e432a475bbcdbbc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  int calculateWidth (int index, GC gc)", "signatureAfterChange": "  int calculateWidth (int index, GC gc, boolean recurse)", "diff": ["-int calculateWidth (int index, GC gc) {", "-\tif (index == 0 && width != -1) return width;", "+int calculateWidth (int index, GC gc, boolean recurse) {", "-\tImage image = getImage (index);", "-\tString text = getText (index);", "-\tgc.setFont (getFont (index));", "-//\tif (image != null) width += image.getBounds ().width + parent.getGap ();", "-\tif (text != null && text.length () > 0) width += gc.stringExtent (text).x;", "-//\tif (parent.hooks (SWT.MeasureItem)) {", "-//\t\tEvent event = new Event ();", "-//\t\tevent.item = this;", "-//\t\tevent.index = index;", "-//\t\tevent.gc = gc;", "-//\t\tshort [] height = new short [1];", "-//\t\tOS.GetDataBrowserTableViewRowHeight (parent.handle, height);", "-//\t\tevent.width = width;", "-//\t\tevent.height = height [0];", "-//\t\tparent.sendEvent (SWT.MeasureItem, event);", "-//\t\tif (parent.itemHeight < event.height) {", "-//\t\t\tparent.itemHeight = event.height;", "-//\t\t\tOS.SetDataBrowserTableViewRowHeight (parent.handle, (short) event.height);", "-//\t\t}", "-//\t\twidth = event.width;", "-//\t}", "-\tif (index == 0) this.width = width;", "+\tif (index == 0 && this.width != -1) {", "+\t\twidth = this.width;", "+\t} else {", "+\t\tImage image = getImage (index);", "+\t\tString text = getText (index);", "+\t\tgc.setFont (getFont (index));", "+\t//\tif (image != null) width += image.getBounds ().width + parent.getGap ();", "+\t\tif (text != null && text.length () > 0) width += gc.stringExtent (text).x;", "+\t//\tif (parent.hooks (SWT.MeasureItem)) {", "+\t//\t\tEvent event = new Event ();", "+\t//\t\tevent.item = this;", "+\t//\t\tevent.index = index;", "+\t//\t\tevent.gc = gc;", "+\t//\t\tshort [] height = new short [1];", "+\t//\t\tOS.GetDataBrowserTableViewRowHeight (parent.handle, height);", "+\t//\t\tevent.width = width;", "+\t//\t\tevent.height = height [0];", "+\t//\t\tparent.sendEvent (SWT.MeasureItem, event);", "+\t//\t\tif (parent.itemHeight < event.height) {", "+\t//\t\t\tparent.itemHeight = event.height;", "+\t//\t\t\tOS.SetDataBrowserTableViewRowHeight (parent.handle, (short) event.height);", "+\t//\t\t}", "+\t//\t\twidth = event.width;", "+\t//\t}", "+\t\tif (index == 0) {", "+\t\t\tint level = ((NSOutlineView)parent.view).levelForItem(handle);", "+\t\t\twidth += parent.levelIndent * level;", "+\t\t\tthis.width = width;", "+\t\t}", "+\t}", "+\tif (recurse && expanded) {", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tTreeItem item = items [i];", "+\t\t\tif (item != null && item.cached) {", "+\t\t\t\twidth = Math.max(width, item.calculateWidth(index, gc, recurse));", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 23006}
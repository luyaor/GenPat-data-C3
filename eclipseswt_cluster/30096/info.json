{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98c5423350edc92a8f07477abe0c4b45", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1494bcc474bb20d716a335113922e515", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "fc9fa335d73b2faf807cf6a50bdc2f5d3e4cc2ad", "commitAfterChange": "e2645e59ad9809a9dd225c2d64b1a30145646b24", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 146, "signatureBeforeChange": "  int IsPreferred(int aContentType, int aDesiredContentType, int retval)", "signatureAfterChange": "  int IsPreferred(int aContentType, int aDesiredContentType, int retval)", "diff": ["-\t/* Note. boolean remains of size 4 on 64 bit machine */", "-\tXPCOM.memmove(retval, new int[] {1}, 4);", "+\tboolean preferred = false;", "+\tint size = XPCOM.strlen(aContentType);", "+\tif (size > 0) {", "+\t\tbyte[] typeBytes = new byte[size + 1];", "+\t\tXPCOM.memmove(typeBytes, aContentType, size);", "+\t\tString contentType = new String(typeBytes);", "+", "+\t\t/* do not attempt to handle known problematic content types */", "+\t\tif (!contentType.equals(XPCOM.CONTENT_MAYBETEXT) && !contentType.equals(XPCOM.CONTENT_MULTIPART)) {", "+\t\t\t/* determine whether browser can handle the content type */", "+\t\t\tint[] result = new int[1];", "+\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = serviceManager.GetService(XPCOM.NS_CATEGORYMANAGER_CID, nsICategoryManager.NS_ICATEGORYMANAGER_IID, result);", "+\t\t\tserviceManager.Release();", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tnsICategoryManager categoryManager = new nsICategoryManager(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbyte[] categoryBytes = Converter.wcsToMbcs(null, \"Gecko-Content-Viewers\", true);\t//$NON-NLS-1$", "+\t\t\trc = categoryManager.GetCategoryEntry(categoryBytes, typeBytes, result);", "+\t\t\tcategoryManager.Release();", "+\t\t\t/* if no viewer for the content type is registered then rc == XPCOM.NS_ERROR_NOT_AVAILABLE */", "+\t\t\tpreferred = rc == XPCOM.NS_OK;", "+\t\t}", "+\t}", "+", "+\t/* note that boolean remains of size 4 on 64 bit machines */", "+\tXPCOM.memmove(retval, new int[] {preferred ? 1 : 0}, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a731ec59c33766dcc5117eed5c8f7224", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "9e630cdfff1efebad25cc2ad394dba564071d578", "commitAfterChange": "fc9fa335d73b2faf807cf6a50bdc2f5d3e4cc2ad", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": "  int IsPreferred(int aContentType, int aDesiredContentType, int retval)", "signatureAfterChange": "  int IsPreferred(int aContentType, int aDesiredContentType, int retval)", "diff": ["-\tint preferred = 1;", "-\t", "+\tboolean preferred = false;", "-\t\tbyte[] dest = new byte[size];", "-\t\tXPCOM.memmove(dest, aContentType, size);", "-\t\tString contentType = new String(dest);", "-\t\t/*", "-\t\t* Feature in Mozilla. Implementing IsPreferred properly would require the use of", "-\t\t* unfrozen API such as nsICategoryManeger.GetCategoryEntry(\"gecko-content-viewer\")", "-\t\t* in order to determine which content can be handled.  The workaround is to always", "-\t\t* accept content except for known problematic types.", "-\t\t*/", "-\t\tif (contentType.equals(XPCOM.CONTENT_MAYBETEXT)) preferred = 0;", "-\t\tif (contentType.equals(XPCOM.CONTENT_MULTIPART)) preferred = 0;", "+\t\tbyte[] typeBytes = new byte[size + 1];", "+\t\tXPCOM.memmove(typeBytes, aContentType, size);", "+\t\tString contentType = new String(typeBytes);", "+", "+\t\t/* do not attempt to handle known problematic content types */", "+\t\tif (!contentType.equals(XPCOM.CONTENT_MAYBETEXT) && !contentType.equals(XPCOM.CONTENT_MULTIPART)) {", "+\t\t\t/* determine whether browser can handle the content type */", "+\t\t\tint[] result = new int[1];", "+\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = serviceManager.GetService(XPCOM.NS_CATEGORYMANAGER_CID, nsICategoryManager.NS_ICATEGORYMANAGER_IID, result);", "+\t\t\tserviceManager.Release();", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tnsICategoryManager categoryManager = new nsICategoryManager(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbyte[] categoryBytes = Converter.wcsToMbcs(null, \"Gecko-Content-Viewers\", true);\t//$NON-NLS-1$", "+\t\t\trc = categoryManager.GetCategoryEntry(categoryBytes, typeBytes, result);", "+\t\t\tcategoryManager.Release();", "+\t\t\t/* if no viewer for the content type is registered then rc == XPCOM.NS_ERROR_NOT_AVAILABLE */", "+\t\t\tpreferred = rc == XPCOM.NS_OK;", "+\t\t}", "-\t/* Note. boolean remains of size 4 on 64 bit machine */", "-\tXPCOM.memmove(retval, new int[] {preferred}, 4);", "+", "+\t/* note that boolean remains of size 4 on 64 bit machines */", "+\tXPCOM.memmove(retval, new int[] {preferred ? 1 : 0}, 4);"]}], "num": 30096}
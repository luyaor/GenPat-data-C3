{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bae17b0804bfd1c6f1b6fc338d3aa7e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbdb64523c3e5b47f0a805f6295f3f5c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "3a4151df7f890efbc61e9a01d33c3ead4c2645d9", "commitAfterChange": "c762252cf769015e8f116caa1f2d177bbf731286", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \r LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_SIZE (int wParam, int lParam)", "diff": ["+\t/*\r", "+\t* Feature in Windows.  When a tool bar that contains\r", "+\t* separators is wrapped, under certain circumstances,\r", "+\t* Windows redraws the entire tool bar unnecessarily\r", "+\t* when resized no item is moves.  Whether the entire\r", "+\t* toolbar is damaged or not seems to depend on the\r", "+\t* size of the tool bar and the position of the separators.\r", "+\t* The fix is to ensure that the newly exposed areas are\r", "+\t* always damaged, and avoid the redraw when no tool item\r", "+\t* moves.\r", "+\t*/\r", "+\tRECT [] rects = null;\r", "+\tint rgn = 0, oldCount = 0;\r", "+\tboolean fixRedraw = drawCount == 0 &&\r", "+\t\t(style & SWT.WRAP) != 0 &&\r", "+\t\tOS.IsWindowVisible (handle) &&\r", "+\t\tOS.SendMessage (handle, OS.TB_GETROWS, 0, 0) != 1;\r", "+\tif (fixRedraw) {\r", "+\t\trgn = OS.CreateRectRgn (0, 0, 0, 0);\r", "+\t\tOS.GetUpdateRgn (handle, rgn, false);\r", "+\t\toldCount = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);\r", "+\t\trects = new RECT [oldCount];\r", "+\t\tfor (int i=0; i<oldCount; i++) {\r", "+\t\t\trects [i] = new RECT ();\r", "+\t\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, i, rects [i]);\r", "+\t\t}\r", "+\t}\r", "+\t\r", "+\t\r", "+\tif (fixRedraw) {\r", "+\t\tint newCount = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);\r", "+\t\tif (newCount == oldCount) {\r", "+\t\t\tint index = 0;\r", "+\t\t\tRECT rect = new RECT ();\r", "+\t\t\twhile (index < newCount) {\r", "+\t\t\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, index, rect);\r", "+\t\t\t\tif (!OS.EqualRect (rects [index], rect)) break;\r", "+\t\t\t\tindex++;\r", "+\t\t\t}\r", "+\t\t\tif (index == newCount) {\r", "+\t\t\t\tOS.ValidateRect (handle, null);\r", "+\t\t\t\tOS.InvalidateRgn (handle, rgn, false);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tOS.DeleteObject (rgn);\r", "+\t}\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef4dd4f0298d630c371a83fcfbd94a4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer2.java", "commitBeforeChange": "803af91b2502e0be5abf9c99c3a910ce8743a2fa", "commitAfterChange": "ea7476519b9e21c42e4d4550669901e532bedcab", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " int drawLine(String line, int lineIndex, int paintX, int paintY, GC gc, Color widgetBackground, Color widgetForeground, boolean clearBackground)", "signatureAfterChange": " int drawLine(String line, int lineIndex, int paintX, int paintY, GC gc, Color widgetBackground, Color widgetForeground, boolean clearBackground)", "diff": ["-\tint lineOffset = getContent().getOffsetAtLine(lineIndex);", "+\tif (styledText == null) return 0;", "+\tStyledTextContent content = getContent();", "+\tint lineOffset = content.getOffsetAtLine(lineIndex);", "-\tPoint selection = getSelection();", "+\tPoint selection = styledText.internalGetSelection();", "-\tColor lineBackground = null;", "-\tRectangle client = getClientArea();", "-\tStyledTextEvent event = getLineBackgroundData(lineOffset, line);", "+\tRectangle client = styledText.getClientArea();  ", "+\tStyledTextEvent event = styledText.getLineBackgroundData(lineOffset, line);", "+\tColor lineBackground = null;", "-\t}", "-\t", "+\t}\t", "+\tboolean fullSelection = (styledText.getStyle() & SWT.FULL_SELECTION) != 0;", "-\t\t(!isFullLineSelection() || ", "+\t\t(!fullSelection || ", "-\t\tRectangle rect = layout.getLineBounds(0);", "-\t\tdrawFullLineSelection(line, lineOffset, paintX + rect.x + rect.width, paintY, gc);", "+\t\tint y = paintY;", "+\t\tint[] offsets = layout.getLineOffsets();", "+\t\tint lineCount = layout.getLineCount();", "+\t\tgc.setBackground(styledText.getSelectionBackground());", "+\t\tfor (int i = 0; i < lineCount; i++) {", "+\t\t\tint lineStart = offsets[i];", "+\t\t\tint lineEnd = Math.max(0, offsets[i + 1] - 1);", "+\t\t\tif (lineStart >= selectionEnd - lineOffset) break;", "+\t\t\tRectangle lineBounds = layout.getLineBounds(i);", "+\t\t\tif (selectionStart - lineOffset <= lineEnd && lineEnd < selectionEnd - lineOffset - 1) {", "+\t\t\t\tint x = paintX + lineBounds.x + lineBounds.width;", "+\t\t\t\tif (fullSelection) {", "+\t\t\t\t\tgc.fillRectangle(x, y, client.width - x, lineBounds.height);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (i == lineCount - 1) {", "+\t\t\t\t\t\tgc.fillRectangle(x, y, lineEndSpaceWidth, lineBounds.height);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\ty += lineBounds.height;", "+\t\t}", "-\t\tlayout.draw(gc, paintX, paintY, start, end - 1, getSelectionForeground(), getSelectionBackground());", "+\t\tColor selectionFk = styledText.getSelectionForeground();", "+\t\tColor selectionBk = styledText.getSelectionBackground();", "+\t\tlayout.draw(gc, paintX, paintY, start, end - 1, selectionFk, selectionBk);"]}], "num": 14747}
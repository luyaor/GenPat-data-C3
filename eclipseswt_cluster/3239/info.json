{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fec273966425fbadd4c45b6da27cc31", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2be2f3f195b4cb2dbeebd337d33a7535", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "79096269bec9be1584da7b8d31d5fe9573da995d", "commitAfterChange": "6509ef8bfeb70fc2d3b31e1b10ac7b68ca1e7295", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 112, "signatureBeforeChange": " public void showItem (CTabItem item)", "signatureAfterChange": " public void showItem (CTabItem item)", "diff": ["-\tif (item.isShowing()) return;", "-\tPoint size = getSize();", "-\tif (size.x <= borderLeft + borderRight || index < firstIndex) {", "-\t\tsetFirstIndex(index);", "-\t} else {", "-\t\tsetLastIndex(index);", "+\tint idx = -1;", "+\tfor (int i = 0; i < priority.length; i++) {", "+\t\tif (priority[i] == index) {", "+\t\t\tidx = i;", "+\t\t\tbreak;", "+\t\t}", "+\tboolean changed = false;", "+\tboolean oldShowChevron = showChevron;", "+\tif (mru) {", "+\t\tint[] newPriority = new int[priority.length];", "+\t\tSystem.arraycopy(priority, 0, newPriority, 1, idx);", "+\t\tSystem.arraycopy(priority, idx+1, newPriority, idx+1, priority.length - idx - 1);", "+\t\tnewPriority[0] = index;", "+\t\tpriority = newPriority;", "+\t\tif (setItemSize()) changed = true;", "+\t\tif (setItemLocation()) changed = true;", "+\t} else {", "+\t\tif (setItemSize()) changed = true;", "+\t\tif (setItemLocation()) changed = true;", "+\t\tif (!item.showing) {", "+\t\t\tif (priority[idx] >= priority[0]) {", "+\t\t\t\tint maxWidth = getRightItemEdge() - borderLeft;", "+\t\t\t\tif (!single && !simple) maxWidth -= curveWidth - 2*curveIndent;", "+\t\t\t\tint width = items[priority[idx]].width;", "+\t\t\t\twhile (idx > 1) {", "+\t\t\t\t\twidth += items[priority[idx-1]].width;", "+\t\t\t\t\tif (width > maxWidth) break;", "+\t\t\t\t\tidx--;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint[] newPriority = new int[priority.length];", "+\t\t\tSystem.arraycopy(priority, idx, newPriority, 0, priority.length - idx);", "+\t\t\tSystem.arraycopy(priority, 0, newPriority, priority.length - idx, idx);", "+\t\t\tpriority = newPriority;", "+\t\t\tif (setItemLocation()) changed = true;", "+\t\t}", "+\t}", "+\tsetButtonBounds();", "+\tif (showChevron != oldShowChevron) changed = true;", "+\tif (changed && toolTipShell != null) {", "+\t\tPoint pt = getDisplay().getCursorLocation();", "+\t\tpt = toControl(pt);", "+\t\tif (!updateToolTip(pt.x, pt.y)) hideToolTip();", "+\t}", "+\tif (changed) redrawTabs();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1246325c0c0cf52691f683084ae3cfa8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "0ec16a191637037ae868aa23c8c55cf2d8a64f40", "commitAfterChange": "d78a1f304fc5886faf978adcf843b66da4334afd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int _createColumnHandle(int index, TableColumn column)", "signatureAfterChange": "  void createColumn (TableColumn column, int index)", "diff": ["-int _createColumnHandle(int index, TableColumn column) {", "-\tint columnHandle = OS.gtk_tree_view_column_new();", "-\tif (columnHandle == 0) error(SWT.ERROR_NO_HANDLES);", "-\tint textRenderer = OS.gtk_cell_renderer_text_new();", "-\tif (textRenderer == 0) error(SWT.ERROR_NO_HANDLES);", "-\tOS.gtk_tree_view_column_pack_end(columnHandle, textRenderer, true);", "-\tOS.gtk_tree_view_column_add_attribute(columnHandle, textRenderer, \"text\", index);", "-\tOS.gtk_tree_view_column_add_attribute(columnHandle, textRenderer, \"foreground-gdk\", 2*MAX_COLUMNS+1);", "-\tOS.gtk_tree_view_column_add_attribute(columnHandle, textRenderer, \"background-gdk\", 2*MAX_COLUMNS+2);", "-\tint pixbufRenderer = OS.gtk_cell_renderer_pixbuf_new();", "-\tif (pixbufRenderer == 0) error(SWT.ERROR_NO_HANDLES);", "-\tOS.gtk_tree_view_column_pack_end(columnHandle, pixbufRenderer, false);", "-\tOS.gtk_tree_view_column_add_attribute(columnHandle, pixbufRenderer, \"pixbuf\", index+MAX_COLUMNS);", "-\tif ((style & SWT.CHECK) != 0 && (index==0)) {", "-\t\tint checkRenderer = OS.gtk_cell_renderer_toggle_new();", "-\t\tif (checkRenderer == 0) error(SWT.ERROR_NO_HANDLES);", "-\t\tOS.gtk_tree_view_column_pack_end(columnHandle, checkRenderer, false);", "-\t\tOS.gtk_tree_view_column_add_attribute(columnHandle, checkRenderer, \"active\", 2*MAX_COLUMNS);", "-\t\tOS.g_signal_connect(checkRenderer, OS.toggled, getDisplay().toggleProc, columnHandle);", "+void createColumn (TableColumn column, int index) {", "+\tint modelIndex = 3;", "+\tif (columnCount != 0) {", "+\t\tint modelLength = OS.gtk_tree_model_get_n_columns (modelHandle);", "+\t\tboolean [] usedColumns = new boolean [modelLength];", "+\t\tfor (int i=0; i<columnCount; i++) {", "+\t\t\tint columnIndex = columns [i].modelIndex;", "+\t\t\tusedColumns [columnIndex] = usedColumns [columnIndex + 1] = true;", "+\t\t}", "+\t\twhile (modelIndex < modelLength) {", "+\t\t\tif (!usedColumns [modelIndex]) break;", "+\t\t\tmodelIndex++;", "+\t\t}", "+\t\tif (modelIndex == modelLength) {", "+\t\t\tint oldModel = modelHandle;", "+\t\t\tint[] types = getColumnTypes (columnCount + 4);", "+\t\t\tint newModel = OS.gtk_list_store_newv (types.length, types);", "+\t\t\tif (newModel == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tint [] ptr = new int [1];", "+\t\t\tfor (int i=0; i<itemCount; i++) {", "+\t\t\t\tTableItem item = items [i];", "+\t\t\t\tint oldItem = item.handle;", "+\t\t\t\tint newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\t\t\tif (newItem == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tOS.gtk_list_store_insert (newModel, newItem, i);", "+\t\t\t\tfor (int j=0; j<modelLength; j++) {", "+\t\t\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);", "+\t\t\t\t\tOS.gtk_list_store_set (newModel, newItem, j, ptr [0], -1);", "+\t\t\t\t\tif (types [j] == OS.G_TYPE_STRING ()) OS.g_free ((ptr [0]));", "+\t\t\t\t}", "+\t\t\t\tOS.gtk_list_store_remove (oldModel, oldItem);", "+\t\t\t\tOS.g_free (oldItem);", "+\t\t\t\titem.handle = newItem;", "+\t\t\t}", "+\t\t\tOS.gtk_tree_view_set_model (handle, newModel);", "+\t\t\tOS.g_object_unref (oldModel);", "+\t\t\tmodelHandle = newModel;", "+\t\t}", "-\tOS.gtk_tree_view_column_set_resizable(columnHandle, true);", "-\tWidgetTable.put (columnHandle, this);", "-\tOS.gtk_tree_view_column_set_clickable(columnHandle, true);", "-\tOS.g_signal_connect(columnHandle, OS.clicked, getDisplay().windowProc2, SWT.Activate);\t", "-\tif (column!=null) {", "-\t\tcolumn.pixbufRendererHandle = pixbufRenderer;", "-\t} else {", "-\t\tfakePixbufRenderer = pixbufRenderer;", "+\tint columnHandle = OS.gtk_tree_view_column_new ();", "+\tif (columnHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tif (index == 0 && columnCount > 0) {", "+\t\tTableColumn checkColumn = columns [0];", "+\t\tcreateRenderers (checkColumn.handle, checkColumn.modelIndex, false);", "-\treturn columnHandle;", "+\tcreateRenderers (columnHandle, modelIndex, index == 0);", "+\tDisplay display = getDisplay ();", "+\tOS.g_signal_connect (columnHandle, OS.clicked, display.treeColumnSelectionProc, handle);", "+\tOS.gtk_tree_view_column_set_resizable (columnHandle, true);", "+\tOS.gtk_tree_view_column_set_clickable (columnHandle, true);", "+\tOS.gtk_tree_view_insert_column (handle, columnHandle, index);", "+\tif (column != null) {", "+\t\tcolumn.handle = columnHandle;", "+\t\tcolumn.modelIndex = modelIndex;", "+\t}", "+}"]}], "num": 3239}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69ff821686ca835da17566f0a15c171a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45cbb8c3617bdec906b018c1045b8d68", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "d71b09fe51fb78be0deeffaf3103f2e6182a162e", "commitAfterChange": "3a61b991b28289b53ad837cd80f29480fe8a2aad", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\t\t\t\tcase TitleChange : {", "+\t\t\t\t\tVariant arg1 = event.arguments[0];", "+\t\t\t\t\tif (arg1.getType() == OLE.VT_BSTR) {", "+\t\t\t\t\t\tString title = arg1.getString();", "+\t\t\t\t\t\tTitleEvent newEvent = new TitleEvent(Browser.this);", "+\t\t\t\t\t\tnewEvent.display = getDisplay();", "+\t\t\t\t\t\tnewEvent.widget = Browser.this;", "+\t\t\t\t\t\tnewEvent.title = title;", "+\t\t\t\t\t\tfor (int i = 0; i < titleListeners.length; i++)", "+\t\t\t\t\t\t\ttitleListeners[i].changed(newEvent);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\tsite.addEventListener(TitleChange, listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a627f72e54865676b67292f3ebaa35a5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "2b489aa5c5c7a18540a0f09d7b72f3a6244070d2", "commitAfterChange": "589dae5887719a2cc80e0bc07401736da4493b31", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public boolean create(Composite parent, int style)", "signatureAfterChange": "  public boolean create(Composite parent, int style)", "diff": ["+\t\t\t\t\t\tisRefresh = false; /* refreshes do not come through here */", "+", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase DownloadComplete: {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * IE feature.  Some events that swt relies on are not sent when", "+\t\t\t\t\t\t * a page is refreshed as opposed to being navigated to.  The", "+\t\t\t\t\t\t * workaround is to use DownloadComplete as an indication that a", "+\t\t\t\t\t\t * refresh has completed.   ", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\tif (!isRefresh) break;", "+\t\t\t\t\t\tisRefresh = false;", "+", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* NavigateComplete is not received for refreshes, so re-hook", "+\t\t\t\t\t\t* BrowserFunctions here. ", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tEnumeration elements = functions.elements ();", "+\t\t\t\t\t\twhile (elements.hasMoreElements ()) {", "+\t\t\t\t\t\t\tBrowserFunction function = (BrowserFunction)elements.nextElement ();", "+\t\t\t\t\t\t\texecute (function.functionString);", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * DocumentComplete is not received for refreshes, but clients may rely", "+\t\t\t\t\t\t * on this event for tasks like hooking javascript listeners, so send the", "+\t\t\t\t\t\t * event here.", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\tProgressEvent progressEvent = new ProgressEvent(browser);", "+\t\t\t\t\t\tprogressEvent.display = browser.getDisplay();", "+\t\t\t\t\t\tprogressEvent.widget = browser;", "+\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++) {", "+\t\t\t\t\t\t\tprogressListeners[i].completed(progressEvent);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+", "+\tsite.addEventListener(DownloadComplete, oleListener);"]}], "num": 53185}
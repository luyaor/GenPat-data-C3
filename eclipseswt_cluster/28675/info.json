{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "719679ebe87fa1ea46eee3a64268acc7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "859c0b1082f6c65ae2ec02f9868f4b4c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/PNGFileFormat.java", "commitBeforeChange": "89e325d639b942b9eb1dc19ad3bc15c25ad6b4a7", "commitAfterChange": "9d04a458194ac328f7e1e4857284755cf4b68cc0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void unloadIntoByteStream(ImageLoader loader)", "signatureAfterChange": " void unloadIntoByteStream(ImageLoader loader)", "diff": ["-\t/* We do not currently support writing png. */", "-\tSWT.error(SWT.ERROR_UNSUPPORTED_FORMAT);", "-\ttry {", "-\t\t/* PNG only supports single image (use MNG for multi-image). */", "-\t\tImageData imageData = loader.data[0];", "-\t", "-\t\t/* Step 1: Write PNG signature. */", "-\t\twriteSignature();", "-\t\t", "-\t\t/* Step 2: Write IHDR chunk. */", "-\t\tint width = imageData.width;", "-\t\tint height = imageData.height;", "-\t\tPaletteData palette = imageData.palette;", "-\t\tbyte colorType = PngIhdrChunk.COLOR_TYPE_RGB;", "-\t\tbyte bitDepth = 8;", "-\t\tif (!palette.isDirect) {", "-\t\t\tcolorType = PngIhdrChunk.COLOR_TYPE_PALETTE;", "-\t\t\tbitDepth = (byte) Math.min(imageData.depth, 8);", "-\t\t}", "-\t\tif (imageData.getTransparencyType() == SWT.TRANSPARENCY_ALPHA) {", "-\t\t\tcolorType = PngIhdrChunk.COLOR_TYPE_RGB_WITH_ALPHA;", "-\t\t}", "-\t\tbyte compressionMethod = 0; // must be zero", "-\t\tbyte filterMethod = 0; // must be zero", "-\t\tbyte interlaceMethod = PngIhdrChunk.INTERLACE_METHOD_NONE;", "-\t\toutputStream.write(new PngIhdrChunk(width, height, bitDepth, colorType, compressionMethod, filterMethod, interlaceMethod).getReference());", "-\t\t", "-\t\t/* Step 3: Write PLTE (palette) chunk, if any. */", "-\t\tif (!palette.isDirect) {", "-\t\t\toutputStream.write(new PngPlteChunk(palette).getReference());", "-\t\t}", "-\t\t", "-\t\t/* Step 4: Write tRNS (transparency) chunk, if any. */", "-\t\tif (imageData.transparentPixel != -1) {", "-\t\t\tRGB transparentRGB = palette.getRGB(imageData.transparentPixel);", "-\t\t\toutputStream.write(new PngTrnsChunk(transparentRGB).getReference());", "-\t\t}", "-\t\t", "-\t\t/* Step 5: Write IDAT chunk. */", "-\t\tcompress(imageData);", "-\t\toutputStream.write(new PngIdatChunk(headerByte1, headerByte2, data, adler).getReference());", "-\t\t", "-\t\t/* Step 6: Write IEND chunk. */", "-\t\toutputStream.write(new PngIendChunk().getReference());", "-\t} catch (IOException e) {", "-\t\tSWT.error(SWT.ERROR_IO, e);", "-\t}", "-}", "+\tPngEncoder encoder = new PngEncoder(loader);", "+\tencoder.encode(outputStream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d1dbb3d7d9f5ac7ce5950585826206", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/PNGFileFormat.java", "commitBeforeChange": "d3b92e32ba6e7306ac0ec642259677116bfdd0da", "commitAfterChange": "1ab3725b71ffd1c9b4175fa522e7afe028651147", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void unloadIntoByteStream(ImageLoader loader)", "signatureAfterChange": " void unloadIntoByteStream(ImageLoader loader)", "diff": ["+\ttry {", "+\t\t/* PNG only supports single image (use MNG for multi-image). */", "+\t\tImageData imageData = loader.data[0];", "+\t", "+\t\t/* Step 1: Write PNG signature. */", "+\t\twriteSignature();", "+\t\t", "+\t\t/* Step 2: Write IHDR chunk. */", "+\t\tint width = imageData.width;", "+\t\tint height = imageData.height;", "+\t\tPaletteData palette = imageData.palette;", "+\t\tbyte colorType = PngIhdrChunk.COLOR_TYPE_RGB;", "+\t\tbyte bitDepth = 8;", "+\t\tif (!palette.isDirect) {", "+\t\t\tcolorType = PngIhdrChunk.COLOR_TYPE_PALETTE;", "+\t\t\tbitDepth = (byte) Math.min(imageData.depth, 8);", "+\t\t}", "+\t\tif (imageData.getTransparencyType() == SWT.TRANSPARENCY_ALPHA) {", "+\t\t\tcolorType = PngIhdrChunk.COLOR_TYPE_RGB_WITH_ALPHA;", "+\t\t}", "+\t\tbyte compressionMethod = 0; // must be zero", "+\t\tbyte filterMethod = 0; // must be zero", "+\t\tbyte interlaceMethod = PngIhdrChunk.INTERLACE_METHOD_NONE;", "+\t\toutputStream.write(new PngIhdrChunk(width, height, bitDepth, colorType, compressionMethod, filterMethod, interlaceMethod).getReference());", "+\t\t", "+\t\t/* Step 3: Write PLTE (palette) chunk, if any. */", "+\t\tif (!palette.isDirect) {", "+\t\t\toutputStream.write(new PngPlteChunk(palette).getReference());", "+\t\t}", "+\t\t", "+\t\t/* Step 4: Write tRNS (transparency) chunk, if any. */", "+\t\tif (imageData.transparentPixel != -1) {", "+\t\t\tRGB transparentRGB = palette.getRGB(imageData.transparentPixel);", "+\t\t\toutputStream.write(new PngTrnsChunk(transparentRGB).getReference());", "+\t\t}", "+\t\t", "+\t\t/* Step 5: Write IDAT chunk. */", "+\t\tcompress(imageData);", "+\t\toutputStream.write(new PngIdatChunk(headerByte1, headerByte2, data, adler).getReference());", "+\t\t", "+\t\t/* Step 6: Write IEND chunk. */", "+\t\toutputStream.write(new PngIendChunk().getReference());", "+\t} catch (IOException e) {", "+\t\tSWT.error(SWT.ERROR_IO, e);", "+\t}", "+}"]}], "num": 28675}
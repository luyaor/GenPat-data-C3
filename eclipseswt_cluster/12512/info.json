{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d7f217eb125ce3313659565923ddb37", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0b2fcc103cb6de5613f97dd9b5462b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "da194abf36dfeaf1cef432501bc0d6c396c87dde", "commitAfterChange": "21af898a5d6ec508de2042508e5800867bc3cbcd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public OleClientSite(Composite parent, int style, String progId, File file)", "signatureAfterChange": " public OleClientSite(Composite parent, int style, String progId, File file)", "diff": ["-\t", "-", "-\t\tif (file == null || file.isDirectory() || !file.exists())", "-\t\t\tOLE.error(OLE.ERROR_INVALID_ARGUMENT);", "-\t\t\t", "+\t\tif (file == null || file.isDirectory() || !file.exists()) OLE.error(OLE.ERROR_INVALID_ARGUMENT);\t\t\t\t", "-\t\t\t// use default mechanism", "-\t\t\t// Open a temporary storage object", "+\t\t\t// Using the same application that created file, therefore, use default mechanism.", "-", "-\t\t\tif (result != COM.S_OK)", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t// use a conversion mechanism", "+\t\t\t// Not using the same application that created file, therefore, copy from original file to a new storage file", "+\t\t\tIStorage storage = null;", "+\t\t\tif (COM.StgIsStorageFile(fileName) == COM.S_OK) {", "+\t\t\t\tint[] address = new int[1];", "+\t\t\t\tint mode = COM.STGM_READ | COM.STGM_TRANSACTED | COM.STGM_SHARE_EXCLUSIVE;", "+\t\t\t\tint result = COM.StgOpenStorage(fileName, 0, mode, 0, 0, address); //Does an AddRef if successful", "+\t\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\tstorage = new IStorage(address[0]);", "+\t\t\t} else {", "+\t\t\t\t// Original file is not a Storage file so copy contents to a stream in a new storage file", "+\t\t\t\tint[] address = new int[1];", "+\t\t\t\tint mode = COM.STGM_READWRITE | COM.STGM_DIRECT | COM.STGM_SHARE_EXCLUSIVE | COM.STGM_CREATE;", "+\t\t\t\tint result = COM.StgCreateDocfile(null, mode | COM.STGM_DELETEONRELEASE, 0, address); // Increments ref count if successful", "+\t\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\tstorage = new IStorage(address[0]);", "+\t\t\t\t// Create a stream on the storage object.", "+\t\t\t\t// Word does not follow the standard and does not use \"CONTENTS\" as the name of", "+\t\t\t\t// its primary stream", "+\t\t\t\tString streamName = \"CONTENTS\"; //$NON-NLS-1$", "+\t\t\t\tGUID wordGUID = getClassID(WORDPROGID);", "+\t\t\t\tif (COM.IsEqualGUID(appClsid, wordGUID)) streamName = \"WordDocument\"; //$NON-NLS-1$", "+\t\t\t\taddress = new int[1];", "+\t\t\t\tresult = storage.CreateStream(streamName, mode, 0, 0, address); // Increments ref count if successful", "+\t\t\t\tif (result != COM.S_OK) {", "+\t\t\t\t\tstorage.Release();", "+\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\t}", "+\t\t\t\tIStream stream = new IStream(address[0]);", "+\t\t\t\ttry {", "+\t\t\t\t\t// Copy over data in file to named stream", "+\t\t\t\t\tFileInputStream fileInput = new FileInputStream(file);", "+\t\t\t\t\tint increment = 1024*4;", "+\t\t\t\t\tbyte[] buffer = new byte[increment];", "+\t\t\t\t\tint count = 0;", "+\t\t\t\t\twhile((count = fileInput.read(buffer)) > 0){", "+\t\t\t\t\t\tint pv = COM.CoTaskMemAlloc(count);", "+\t\t\t\t\t\tOS.MoveMemory(pv, buffer, count);", "+\t\t\t\t\t\tresult = stream.Write(pv, count, null) ;", "+\t\t\t\t\t\tCOM.CoTaskMemFree(pv);", "+\t\t\t\t\t\tif (result != COM.S_OK) {", "+\t\t\t\t\t\t\tfileInput.close();", "+\t\t\t\t\t\t\tstream.Release();", "+\t\t\t\t\t\t\tstorage.Release();", "+\t\t\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tfileInput.close();", "+\t\t\t\t\tstream.Commit(COM.STGC_DEFAULT);", "+\t\t\t\t\tstream.Release();", "+\t\t\t\t} catch (IOException err) {", "+\t\t\t\t\tstream.Release();", "+\t\t\t\t\tstorage.Release();", "+\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t// Word does not follow the standard and does not use \"CONTENTS\" as the name of", "-\t\t\t// its primary stream", "-\t\t\tString contentStream = \"CONTENTS\"; //$NON-NLS-1$", "-\t\t\tGUID wordGUID = getClassID(WORDPROGID);", "-\t\t\tif (COM.IsEqualGUID(appClsid, wordGUID)) contentStream = \"WordDocument\"; //$NON-NLS-1$", "-", "-\t\t\t// Copy over the contents of the file into a new temporary storage object", "-\t\t\tOleFile oleFile = new OleFile(file, contentStream, OleFile.READ);", "-\t\t\tIStorage storage = oleFile.getRootStorage();", "-\t\t\tstorage.AddRef();", "-\t\t\tif (result != COM.S_OK)", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\toleFile.dispose();", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\tif (result != COM.S_OK){\t\t", "-\t\t\t\ttempStorage.Release();", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t}", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-", "-\t\t\tif (result != COM.S_OK){", "-\t\t\t\ttempStorage.Release();", "-\t\t\t\tobjIUnknown.Release();", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t}", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-", "-\t\t\tif (result != COM.S_OK){", "-\t\t\t\ttempStorage.Release();", "-\t\t\t\ttempStorage = null;", "-\t\t\t\tobjIUnknown.Release();", "-\t\t\t\tobjIUnknown = null;", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t}", "+\t\t\tif (result != COM.S_OK)OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82c120e440457d4de948c884e3b694c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "06dc38e623afcc69453149a4908e940401d48a28", "commitAfterChange": "0f19e4967bd7565d0b817b526213289acd242b74", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 2, "signatureBeforeChange": " String interpretOsAnswer(String osAnswer)", "signatureAfterChange": " String computeResult()", "diff": ["+String computeResult() {", "+\tGtkFileSelection selection = new GtkFileSelection ();", "+\tOS.memmove (selection, handle);", "+\tint /*long*/ entry = selection.selection_entry;", "+\tint /*long*/ entryText = OS.gtk_entry_get_text (entry);", "+\tint entryLength = OS.strlen (entryText);", "+\tif (entryLength == 0) {", "+\t\tint /*long*/ fileList = selection.file_list;", "+\t\tint /*long*/ listSelection = OS.gtk_tree_view_get_selection (fileList);", "+\t\tint /*long*/[] model = new int /*long*/[1];", "+\t\tint /*long*/ selectedList = OS.gtk_tree_selection_get_selected_rows (listSelection, model);", "+\t\tif (selectedList == 0) return null;", "+\t\tint listLength = OS.g_list_length (selectedList);", "+\t\tif (listLength == 0) {", "+\t\t\tOS.g_list_free (selectedList);", "+\t\t\treturn null;", "+\t\t}", "+\t\tint /*long*/ path = OS.g_list_nth_data (selectedList, 0);", "+\t\tint /*long*/ [] ptr = new int /*long*/[1];", "+\t\tint /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\tif (OS.gtk_tree_model_get_iter (model [0], iter, path)) {", "+\t\t\tOS.gtk_tree_model_get (model [0], iter, 0, ptr, -1);", "+\t\t}", "+\t\tOS.g_free (iter);", "+\t\tfor (int i = 0; i < listLength; i++) {", "+\t\t\tOS.gtk_tree_path_free (OS.g_list_nth_data (selectedList, i));", "+\t\t}", "+\t\tOS.g_list_free (selectedList);", "+\t\tif (ptr [0] == 0) return null;", "+\t\tint length = OS.strlen (ptr [0]);", "+\t\tbyte [] buffer = new byte [length];", "+\t\tOS.memmove (buffer, ptr [0], length);", "+\t\tOS.g_free (ptr [0]);", "+\t\tOS.gtk_entry_set_text (entry, buffer);", "+\t}", "+", "+\tint /*long*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);", "+\tint /*long*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);", "+\tint /*long*/ [] items_written = new int /*long*/ [1];", "+\tint /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "+\tentryLength = (int)/*64*/items_written [0];", "+\tchar [] buffer = new char [entryLength];", "+\tOS.memmove (buffer, utf16Ptr, entryLength * 2);", "+\tString osAnswer = new String (buffer);", "+\tOS.g_free (utf16Ptr);", "+\tOS.g_free (utf8Ptr);", "+", "+\tif (osAnswer == null) return null;", "+\tint separatorIndex = osAnswer.lastIndexOf (SEPARATOR);", "+\tif (separatorIndex+1 == osAnswer.length ()) return null;", "+\t", "+\tString answer = fullPath = osAnswer;", "+\tfileName = fullPath.substring (separatorIndex+1);", "+\tfilterPath = fullPath.substring (0, separatorIndex);", "+\tif ((style & SWT.MULTI) == 0) {", "+\t\tfileNames = new String[] {fileName};", "+\t} else {", "+\t\tint /*long*/ namesPtr = OS.gtk_file_selection_get_selections (handle);", "+\t\tint /*long*/ namesPtr1 = namesPtr;", "+\t\tint /*long*/ [] namePtr = new int /*long*/ [1];", "+\t\tOS.memmove (namePtr, namesPtr1, OS.PTR_SIZEOF);", "+\t\tint length = 0;", "+\t\twhile (namePtr[0] != 0) {", "+\t\t\tlength++;", "+\t\t\tnamesPtr1+=OS.PTR_SIZEOF;", "+\t\t\tOS.memmove(namePtr, namesPtr1, OS.PTR_SIZEOF);", "+\t\t}", "+\t\tfileNames = new String [length];", "+\t\tnamePtr = new int /*long*/ [length];", "+\t\tOS.memmove (namePtr, namesPtr, length * OS.PTR_SIZEOF);", "+\t\tfor (int i = 0; i < length; i++) {\t\t\t", "+\t\t\tutf8Ptr = OS.g_filename_to_utf8 (namePtr [i], -1, null, null, null);", "+\t\t\titems_written = new int /*long*/ [1];", "+\t\t\tutf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "+\t\t\tbuffer = new char [(int)/*64*/items_written [0]];", "+\t\t\tOS.memmove (buffer, utf16Ptr, items_written [0] * 2);", "+\t\t\tString name = new String (buffer);", "+\t\t\tfileNames [i] = name.substring (name.lastIndexOf (SEPARATOR) + 1);", "+\t\t\tOS.g_free (utf16Ptr);", "+\t\t\tOS.g_free (utf8Ptr);", "+\t\t}", "+\t\tOS.g_strfreev (namesPtr);", "+\t}", "+\treturn answer;", "+}", "-String interpretOsAnswer(String osAnswer) {", "-\tif (osAnswer==null) return null;", "-\tint separatorIndex = osAnswer.lastIndexOf (SEPARATOR);", "-\tif (separatorIndex+1 == osAnswer.length ()) return null;", "-\t", "-\tString answer = fullPath = osAnswer;", "-\tfileName = fullPath.substring (separatorIndex+1);", "-\tfilterPath = fullPath.substring (0, separatorIndex);", "-\tif ((style & SWT.MULTI) == 0) {", "-\t\tfileNames = new String[] {fileName};", "-\t} else {", "-\t\tint /*long*/ namesPtr = OS.gtk_file_selection_get_selections (handle);", "-\t\tint /*long*/ namesPtr1 = namesPtr;", "-\t\tint /*long*/ [] namePtr = new int /*long*/ [1];", "-\t\tOS.memmove (namePtr, namesPtr1, OS.PTR_SIZEOF);", "-\t\tint length = 0;", "-\t\twhile (namePtr[0] != 0) {", "-\t\t\tlength++;", "-\t\t\tnamesPtr1+=OS.PTR_SIZEOF;", "-\t\t\tOS.memmove(namePtr, namesPtr1, OS.PTR_SIZEOF);", "-\t\t}", "-\t\tfileNames = new String [length];", "-\t\tnamePtr = new int /*long*/ [length];", "-\t\tOS.memmove (namePtr, namesPtr, length * OS.PTR_SIZEOF);", "-\t\tfor (int i = 0; i < length; i++) {\t\t\t", "-\t\t\tint /*long*/ utf8Ptr = OS.g_filename_to_utf8 (namePtr [i], -1, null, null, null);", "-\t\t\tint /*long*/ [] items_written = new int /*long*/ [1];", "-\t\t\tint /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "-\t\t\tchar[] buffer = new char [(int)/*64*/items_written [0]];", "-\t\t\tOS.memmove (buffer, utf16Ptr, items_written [0] * 2);", "-\t\t\tString name = new String (buffer);", "-\t\t\tfileNames [i] = name.substring (name.lastIndexOf (SEPARATOR) + 1);", "-\t\t\tOS.g_free (utf16Ptr);", "-\t\t\tOS.g_free (utf8Ptr);", "-\t\t}", "-\t\tOS.g_strfreev (namesPtr);", "-\t}", "-\treturn answer;", "-}"]}], "num": 12512}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52c9918158655328cbf60be3b8790038", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6ebd14086dceb326359d73fa312d609", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "6930fdd35d9cdffd6d05c778fb4b82a2018d7fcb", "commitAfterChange": "4b4619a6b5b2cd61a37c980601ead9593d587b9d", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  boolean updateTextDirection(int textDirection)", "signatureAfterChange": "  boolean updateTextDirection(int textDirection)", "diff": ["-\tif (super.updateTextDirection(textDirection)) {", "-\t\t/* ", "-\t\t * OS.WS_EX_RTLREADING doesn't propagate to children", "-\t\t */", "-\t\tControl[] children = _getChildren ();", "-\t\tint i = children.length;", "-\t\twhile (i-- > 0) {", "-\t\t\tif (children[i] != null && !children[i].isDisposed ()) {", "-\t\t\t\tchildren[i].updateTextDirection(textDirection);", "-\t\t\t}", "+\tsuper.updateTextDirection (textDirection);", "+\t/* ", "+\t * Always continue, communicating the direction to the children since", "+\t * OS.WS_EX_RTLREADING doesn't propagate to them natively, and since", "+\t * the direction might need to be handled by each child individually.", "+\t */", "+\tControl[] children = _getChildren ();", "+\tint i = children.length;", "+\twhile (i-- > 0) {", "+\t\tif (children[i] != null && !children[i].isDisposed ()) {", "+\t\t\tchildren[i].updateTextDirection(textDirection);", "-\t\treturn true;", "-\treturn false;", "+\t/* ", "+\t * Return value indicates whether or not to update derivatives, so in case", "+\t * of AUTO always return true regardless of the actual update.", "+\t */", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b18e0cbc7c12c09472b5681e80437dc7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 32, "signatureBeforeChange": " void calculateWidestShowingItem()", "signatureAfterChange": " public Control [] getChildren()", "diff": ["- */", "-void calculateWidestShowingItem() {", "-\tTreeItem visibleItem;", "-\tint newMaximumItemWidth = 0;", "-\tint bottomIndex = getBottomIndex();", "-\tint paintStopX;", "-", "-\t// add one to the loop end index because otherwise an item covered ", "-\t// by the horizontal scroll bar would not be taken into acount and ", "-\t// may become visible after this calculation. We're in trouble if", "-\t// that item is wider than the client area.", "-\tif (getHorizontalBar().getVisible() == true) {", "-\t\tbottomIndex++;", "-\t}", "-\tfor (int i = getTopIndex(); i < bottomIndex; i++) {", "-\t\tvisibleItem = getRoot().getVisibleItem(i);", "-\t\tif (visibleItem != null) {", "-\t\t\tpaintStopX = visibleItem.getPaintStopX();", "-\t\t\tnewMaximumItemWidth = Math.max(newMaximumItemWidth, paintStopX);", "-\t\t}", "-\t}", "-\tsetContentWidth(newMaximumItemWidth);", "+}", "+public Control [] getChildren() {", "+\tcheckWidget();", "+\tControl[] controls = _getChildren();", "+\tif (header == null) return controls;", "+\tControl[] result = new Control[controls.length - 1];", "+\t/* remove the Header from the returned set of children */", "+\tint index = 0;", "+\tfor (int i = 0; i < controls.length; i++) {", "+\t\t if (controls[i] != header) {", "+\t\t \tresult[index++] = controls[i];", "+\t\t }", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "201f1b57cb43bde2a1ad2d4d4426d7a8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " void calculateVisibleItemCount()", "signatureAfterChange": " TreeItem[] computeAllDescendents ()", "diff": ["- */", "-void calculateVisibleItemCount() {", "-\tVector children;", "-\tTreeItem child;", "-\tint visibleItemCount = 0;", "-\t", "-\t// check isExpanded field directly for performance", "-\tif (internalGetExpanded() == true) {", "-\t\tchildren = getChildren();", "-\t\tvisibleItemCount = children.size();", "-\t\tfor (int i = 0; i < children.size(); i++) {", "-\t\t\tchild = (TreeItem) children.elementAt(i);", "-\t\t\tvisibleItemCount += child.getVisibleItemCount();", "-\t\t}", "-\tsetVisibleItemCount(visibleItemCount);", "-\tcalculateVisibleItemCountParent();", "+TreeItem[] computeAllDescendents () {", "+\tint childCount = items.length;", "+\tTreeItem[][] childResults = new TreeItem[childCount][];", "+\tint count = 1;\t/* self */", "+\tfor (int i = 0; i < childCount; i++) {", "+\t\tchildResults[i] = items[i].computeAllDescendents ();", "+\t\tcount += childResults[i].length;", "+\tTreeItem[] result = new TreeItem[count];", "+\tint index = 0;", "+\tresult[index++] = this;", "+\tfor (int i = 0; i < childCount; i++) {", "+\t\tSystem.arraycopy (childResults[i], 0, result, index, childResults[i].length);", "+\t\tindex += childResults[i].length;", "+\t}", "+\treturn result;"]}], "num": 5097}
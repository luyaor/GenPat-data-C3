{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc0da185e8519635a2d6c384c5d94836", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f89b9242f88a7d66d8cff8615a7e09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "12145948a337f8260ea5a3544e7ee9d4678a6ab8", "commitAfterChange": "7f57a0f4b37b94ba73598e3a604be9f733e83a82", "methodNumberBeforeChange": 324, "methodNumberAfterChange": 324, "signatureBeforeChange": " \tint setAttributes(int startOffset, int endOffset, int pbstrAttributes)", "signatureAfterChange": " \tint setAttributes(int startOffset, int endOffset, int pbstrAttributes)", "diff": ["-\t\t\tString [] attributes = new String [0];", "-\t\t\tString [] rawAttributes = string.split(\";\");", "-\t\t\tfor (int i = 0; i < rawAttributes.length; i++) {", "-\t\t\t\tString attribute[] = rawAttributes[i].split(\":\");", "-\t\t\t\tif (attribute[0].equals(\"text-position\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"super\")) style.rise = points / 2;", "-\t\t\t\t\telse if (attribute[1].equals(\"sub\")) style.rise = - points / 2;", "-\t\t\t\t} else if (attribute[0].equals(\"text-underline-type\")) {", "+\t\t\tString [] attributes = new String [0];", "+\t\t\tint begin = 0;", "+\t\t\tint end = string.indexOf(';');", "+\t\t\twhile (end != -1 && end + 1 <= string.length()) {", "+\t\t\t\tString keyValue = string.substring(begin, end).trim();", "+\t\t\t\tint colonIndex = keyValue.indexOf(':');", "+\t\t\t\tif (colonIndex != -1 && colonIndex + 1 < keyValue.length()) {", "+\t\t\t\t\tString [] newAttributes = new String [attributes.length + 2];", "+\t\t\t\t\tSystem.arraycopy (attributes, 0, newAttributes, 0, attributes.length);", "+\t\t\t\t\tnewAttributes[attributes.length] = keyValue.substring(0, colonIndex).trim();", "+\t\t\t\t\tnewAttributes[attributes.length + 1] = keyValue.substring(colonIndex + 1).trim();", "+\t\t\t\t\tattributes = newAttributes;", "+\t\t\t\t}", "+\t\t\t\tbegin = end + 1;", "+\t\t\t\tend = string.indexOf(';', begin);", "+\t\t\t}", "+\t\t\tfor (int i = 0; i+1 < attributes.length; i+=2) {", "+\t\t\t\tString key = attributes[i];", "+\t\t\t\tString value = attributes[i+1];", "+\t\t\t\tif (key.equals(\"text-position\")) {", "+\t\t\t\t\tif (value.equals(\"super\")) style.rise = points / 2;", "+\t\t\t\t\telse if (value.equals(\"sub\")) style.rise = - points / 2;", "+\t\t\t\t} else if (key.equals(\"text-underline-type\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"double\")) style.underlineStyle = SWT.UNDERLINE_DOUBLE;", "-\t\t\t\t\telse if (attribute[1].equals(\"single\")) {", "+\t\t\t\t\tif (value.equals(\"double\")) style.underlineStyle = SWT.UNDERLINE_DOUBLE;", "+\t\t\t\t\telse if (value.equals(\"single\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"text-underline-style\") && attribute[1].equals(\"wave\")) {", "+\t\t\t\t} else if (key.equals(\"text-underline-style\") && value.equals(\"wave\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"invalid\") && attribute[1].equals(\"true\")) {", "+\t\t\t\t} else if (key.equals(\"invalid\") && value.equals(\"true\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"text-line-through-type\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"single\")) style.strikeout = true;", "-\t\t\t\t} else if (attribute[0].equals(\"font-family\")) {", "+\t\t\t\t} else if (key.equals(\"text-line-through-type\")) {", "+\t\t\t\t\tif (value.equals(\"single\")) style.strikeout = true;", "+\t\t\t\t} else if (key.equals(\"font-family\")) {", "-\t\t\t\t\tfontData.setName(attribute[1]);", "-\t\t\t\t} else if (attribute[0].equals(\"font-size\")) {", "+\t\t\t\t\tfontData.setName(value);", "+\t\t\t\t} else if (key.equals(\"font-size\")) {", "-\t\t\t\t\t\tpoints = Integer.parseInt(attribute[1].replace(\"pt\", \"\"));", "+\t\t\t\t\t\tString pts = value.endsWith(\"pt\") ? value.substring(0, value.length() - 2) : value;", "+\t\t\t\t\t\tpoints = Integer.parseInt(pts);", "-\t\t\t\t} else if (attribute[0].equals(\"font-style\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"italic\")) {", "+\t\t\t\t} else if (key.equals(\"font-style\")) {", "+\t\t\t\t\tif (value.equals(\"italic\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"font-weight\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"bold\")) {", "+\t\t\t\t} else if (key.equals(\"font-weight\")) {", "+\t\t\t\t\tif (value.equals(\"bold\")) {", "-\t\t\t\t\t\t\tint weight = Integer.parseInt(attribute[1]);", "+\t\t\t\t\t\t\tint weight = Integer.parseInt(value);", "-\t\t\t\t} else if (attribute[0].equals(\"color\")) {", "-\t\t\t\t\tstyle.foreground = colorFromString(attribute[1]);", "-\t\t\t\t} else if (attribute[0].equals(\"background-color\")) {", "-\t\t\t\t\tstyle.background = colorFromString(attribute[1]);", "+\t\t\t\t} else if (key.equals(\"color\")) {", "+\t\t\t\t\tstyle.foreground = colorFromString(value);", "+\t\t\t\t} else if (key.equals(\"background-color\")) {", "+\t\t\t\t\tstyle.background = colorFromString(value);", "-\t\t\t\t/* Pass every attribute through, in case an application wants", "-\t\t\t\t * to implement a feature in more detail than TextStyle.", "-\t\t\t\t */", "-\t\t\t\tString [] newAttributes = new String [attributes.length + 2];", "-\t\t\t\tSystem.arraycopy (attributes, 0, newAttributes, 0, attributes.length);", "-\t\t\t\tnewAttributes[attributes.length] = attribute[0];", "-\t\t\t\tnewAttributes[attributes.length + 1] = attribute[1];", "-\t\t\t\tattributes = newAttributes;", "-\t\t\tif (fontData != null) {", "-\t\t\t\tstyle.font = new Font(control.getDisplay(), fontData);", "+\t\t\tif (attributes.length > 0) {", "+\t\t\t\tevent.attributes = attributes;", "+\t\t\t\tif (fontData != null) {", "+\t\t\t\t\tstyle.font = new Font(control.getDisplay(), fontData);", "+\t\t\t\t}", "+\t\t\t\tif (!style.equals(new TextStyle())) event.textStyle = style;", "-\t\t\tevent.textStyle = style;", "-\t\t\tif (attributes.length > 0) event.attributes = attributes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b02ba324e003ecfb152bf775f4615286", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "af57b4287b6ed2d2e6984f1f8532d49577a00b42", "commitAfterChange": "7ec616b485cfbaa37753c7eddbc015ac1ca925e3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tstatic int atkEditableText_set_run_attributes (int atkObject, int attrib_set, int start_offset, int end_offset)", "signatureAfterChange": " \tstatic int atkEditableText_set_run_attributes (int atkObject, int attrib_set, int start_offset, int end_offset)", "diff": ["+\t\t\t\tDisplay display = accessible.control.getDisplay();", "+\t\t\t\tint /*long*/ fontDesc = OS.pango_font_description_new ();", "+\t\t\t\tboolean createFont = false;", "+\t\t\t\tTextStyle style = new TextStyle();", "+\t\t\t\tString [] attributes = new String [0];", "+\t\t\t\tint /*long*/ current = attrib_set;", "+\t\t\t\tint listLength = OS.g_slist_length (attrib_set);", "+\t\t\t\tfor (int i = 0; i < listLength; i++) {", "+\t\t\t\t\tint /*long*/ attrPtr = OS.g_slist_data (current);", "+\t\t\t\t\tif (attrPtr != 0) {", "+\t\t\t\t\t\tAtkAttribute attr = new AtkAttribute();", "+\t\t\t\t\t\tATK.memmove(attr, attrPtr, AtkAttribute.sizeof);", "+\t\t\t\t\t\tString name = getString(attr.name);", "+\t\t\t\t\t\tString value = getString(attr.value);", "+\t\t\t\t\t\tOS.g_free(attrPtr);", "+\t\t\t\t\t\tif (DEBUG) print(\"name=\" + name + \", value=\" + value);", "+\t\t\t\t\t\tString [] newAttributes = new String [attributes.length + 2];", "+\t\t\t\t\t\tSystem.arraycopy (attributes, 0, newAttributes, 0, attributes.length);", "+\t\t\t\t\t\tnewAttributes[attributes.length] = name;", "+\t\t\t\t\t\tnewAttributes[attributes.length + 1] = value;", "+\t\t\t\t\t\tattributes = newAttributes;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tif (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_RISE)))) {", "+\t\t\t\t\t\t\t\t// number of pixels above baseline", "+\t\t\t\t\t\t\t\tstyle.rise = Integer.parseInt(value);", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_UNDERLINE)))) {", "+\t\t\t\t\t\t\t\t// \"none\", \"single\", \"double\", \"low\", or \"error\" (also allow \"squiggle\")", "+\t\t\t\t\t\t\t\tif (value.equals(\"single\") || value.equals(\"low\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_SINGLE;", "+\t\t\t\t\t\t\t\t} else if (value.equals(\"double\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_DOUBLE;", "+\t\t\t\t\t\t\t\t} else if (value.equals(\"error\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_ERROR;", "+\t\t\t\t\t\t\t\t} else if (value.equals(\"squiggle\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_SQUIGGLE;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_STRIKETHROUGH)))) {", "+\t\t\t\t\t\t\t\t// \"true\" or \"false\" (also allow \"1\" and \"single\")", "+\t\t\t\t\t\t\t\tif (value.equals(\"true\") || value.equals(\"1\") || value.equals(\"single\")) style.strikeout = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_FAMILY_NAME)))) {", "+\t\t\t\t\t\t\t\t// font family name", "+\t\t\t\t\t\t\t\tbyte [] buffer = Converter.wcsToMbcs(null, value, true);", "+\t\t\t\t\t\t\t\tOS.pango_font_description_set_family(fontDesc, buffer);", "+\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_SIZE)))) {", "+\t\t\t\t\t\t\t\t// size of characters in points (allow fractional points)", "+\t\t\t\t\t\t\t\tfloat size = Float.parseFloat(value);", "+\t\t\t\t\t\t\t\tOS.pango_font_description_set_size(fontDesc, (int)(size * OS.PANGO_SCALE));", "+\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_STYLE)))) {", "+\t\t\t\t\t\t\t\t// \"normal\", \"italic\" or \"oblique\"", "+\t\t\t\t\t\t\t\tint fontStyle = -1;", "+\t\t\t\t\t\t\t\tif (value.equals(\"normal\")) fontStyle = OS.PANGO_STYLE_NORMAL;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"italic\")) fontStyle = OS.PANGO_STYLE_ITALIC;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"oblique\")) fontStyle = OS.PANGO_STYLE_OBLIQUE;", "+\t\t\t\t\t\t\t\tif (fontStyle != -1) {", "+\t\t\t\t\t\t\t\t\tOS.pango_font_description_set_style(fontDesc, fontStyle);", "+\t\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_VARIANT)))) {", "+\t\t\t\t\t\t\t\t// \"normal\" or \"small_caps\"", "+\t\t\t\t\t\t\t\tint variant = -1;", "+\t\t\t\t\t\t\t\tif (value.equals(\"normal\")) variant = OS.PANGO_VARIANT_NORMAL;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"small_caps\")) variant = OS.PANGO_VARIANT_SMALL_CAPS;", "+\t\t\t\t\t\t\t\tif (variant != -1) {", "+\t\t\t\t\t\t\t\t\tOS.pango_font_description_set_variant(fontDesc, variant);", "+\t\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_STRETCH)))) {", "+\t\t\t\t\t\t\t\t//\"ultra_condensed\", \"extra_condensed\", \"condensed\", \"semi_condensed\", \"normal\", \"semi_expanded\", \"expanded\", \"extra_expanded\" or \"ultra_expanded\" ", "+\t\t\t\t\t\t\t\tint stretch = -1;", "+\t\t\t\t\t\t\t\tif (value.equals(\"ultra_condensed\")) stretch = OS.PANGO_STRETCH_ULTRA_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"extra_condensed\")) stretch = OS.PANGO_STRETCH_EXTRA_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"condensed\")) stretch = OS.PANGO_STRETCH_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"semi_condensed\")) stretch = OS.PANGO_STRETCH_SEMI_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"normal\")) stretch = OS.PANGO_STRETCH_NORMAL;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"semi_expanded\")) stretch = OS.PANGO_STRETCH_SEMI_EXPANDED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"expanded\")) stretch = OS.PANGO_STRETCH_EXPANDED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"extra_expanded\")) stretch = OS.PANGO_STRETCH_EXTRA_EXPANDED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"ultra_expanded\")) stretch = OS.PANGO_STRETCH_ULTRA_EXPANDED;", "+\t\t\t\t\t\t\t\tif (stretch != -1) {", "+\t\t\t\t\t\t\t\t\tOS.pango_font_description_set_stretch(fontDesc, stretch);", "+\t\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_WEIGHT)))) {", "+\t\t\t\t\t\t\t\t// weight of the characters", "+\t\t\t\t\t\t\t\tint weight = Integer.parseInt(value);", "+\t\t\t\t\t\t\t\tOS.pango_font_description_set_weight(fontDesc, weight);", "+\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_FG_COLOR)))) {", "+\t\t\t\t\t\t\t\t// RGB value of the format \"u,u,u\"", "+\t\t\t\t\t\t\t\tstyle.foreground = colorFromString(display, value);", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_BG_COLOR)))) {", "+\t\t\t\t\t\t\t\t// RGB value of the format \"u,u,u\"", "+\t\t\t\t\t\t\t\tstyle.background = colorFromString(display, value);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t//TODO language and direction", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (NumberFormatException ex) {}", "+\t\t\t\t\t}", "+\t\t\t\t\tcurrent = OS.g_slist_next (current);", "+\t\t\t\t}", "+\t\t\t\tif (createFont) {", "+\t\t\t\t\tstyle.font = Font.gtk_new(display, fontDesc);", "+\t\t\t\t}", "+", "-\t\t\t\t// TODO: get attrib_set and set event.textStyle and event.attributes (see atkText_get_run_attributes)", "+\t\t\t\tevent.textStyle = style;", "+\t\t\t\tevent.attributes = attributes;", "-\t\t\t\t// TODO: dispose event.textStyle font/foreground/background", "+\t\t\t\tif (style.font != null) {", "+\t\t\t\t\tstyle.font.dispose();", "+\t\t\t\t}", "+\t\t\t\tif (style.foreground != null) {", "+\t\t\t\t\tstyle.foreground.dispose();", "+\t\t\t\t}", "+\t\t\t\tif (style.background != null) {", "+\t\t\t\t\tstyle.background.dispose();", "+\t\t\t\t}", "+\t}"]}], "num": 14540}
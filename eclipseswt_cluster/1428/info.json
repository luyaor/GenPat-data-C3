{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b0590c56b7debfc13743914faa8d34e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49f9acb8fbe2528ff4b944bf3cfcc157", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "f8a49688094d558698133b05dce93b1c1b429a1f", "commitAfterChange": "7a2d94369e5ad6120bc0572ea6ad8f9f75b8147c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\t\t\tboolean isDib = (bm.bmBits != 0);", "+\t\t\tboolean isDib = false;", "+\t\t\tDIBSECTION dib = null;", "+\t\t\tif (bm.bmBits != 0) {", "+\t\t\t\t/* Only use DIB if image is top-down. */", "+\t\t\t\tdib = new DIBSECTION();", "+\t\t\t\tOS.GetObject(handle, DIBSECTION.sizeof, dib);", "+\t\t\t\tif (dib.biHeight < 0) isDib = true; ", "+\t\t\t}", "+\t\t\t\t\tdib = new DIBSECTION();", "+\t\t\t\t\tOS.GetObject(handle, DIBSECTION.sizeof, dib);", "-\t\t\t}", "-\t\t\tDIBSECTION dib = null;", "-\t\t\tif (isDib) {", "-\t\t\t\tdib = new DIBSECTION();", "-\t\t\t\tOS.GetObject(handle, DIBSECTION.sizeof, dib);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e1756576c89d838fa3f4551ff9840bc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "c87aae6d3c31d8056505e084eb4ffdab48e95621", "commitAfterChange": "b332e1ecb6421f664a18c1bcf96e2b94c24f1610", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  int identity()", "signatureAfterChange": "  int identity()", "diff": ["-\t\tImage image = data.image;", "-\t\tif (image != null) {", "-\t\t\tBITMAP bm = new BITMAP();", "-\t\t\tOS.GetObject(image.handle, BITMAP.sizeof, bm);", "-\t\t\twidth = bm.bmWidth;", "-\t\t} else if (data.hwnd != 0) {", "-\t\t\tRECT rect = new RECT();", "-\t\t\tOS.GetClientRect(data.hwnd, rect);", "-\t\t\twidth = rect.right - rect.left;", "+\t\tint technology = OS.GetDeviceCaps(handle, OS.TECHNOLOGY);", "+\t\tif (technology == OS.DT_RASPRINTER) {", "+\t\t\twidth = OS.GetDeviceCaps(handle, OS.PHYSICALWIDTH);", "+\t\t} else {", "+\t\t\tImage image = data.image;", "+\t\t\tif (image != null) {", "+\t\t\t\tBITMAP bm = new BITMAP();", "+\t\t\t\tOS.GetObject(image.handle, BITMAP.sizeof, bm);", "+\t\t\t\twidth = bm.bmWidth;", "+\t\t\t} else {", "+\t\t\t\tint /*long*/ hwnd = OS.IsWinCE ? data.hwnd : OS.WindowFromDC(handle);", "+\t\t\t\tif (hwnd != 0) {", "+\t\t\t\t\tRECT rect = new RECT();", "+\t\t\t\t\tOS.GetClientRect(hwnd, rect);", "+\t\t\t\t\twidth = rect.right - rect.left;", "+\t\t\t\t} else {", "+\t\t\t\t\tint /*long*/ hBitmap = OS.GetCurrentObject(handle, OS.OBJ_BITMAP);", "+\t\t\t\t\tBITMAP bm = new BITMAP();", "+\t\t\t\t\tOS.GetObject(hBitmap, BITMAP.sizeof, bm);", "+\t\t\t\t\twidth = bm.bmWidth;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 1428}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ade9d10f7d5b79a21df43c05af040b7a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "999b28c144d7e631d93d7b4b50853455", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/javaviewer/JavaLineStyler.java", "commitBeforeChange": "58ebe84839db8cbd2eaef39398ff27d3fbf5c7d5", "commitAfterChange": "1fc579af82362f55eb881556edf61eabb46751eb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void lineGetStyle(LineStyleEvent event)", "signatureAfterChange": "\r public void lineGetStyle(LineStyleEvent event)", "diff": ["+\t// If the line is part of a block comment, create one style for the entire line.\r", "-\t\tstyles.addElement(new StyleRange(event.lineOffset, event.lineText.length(), colors[1], null));\r", "+\t\tstyles.addElement(new StyleRange(event.lineOffset, event.lineText.length(), getColor(COMMENT), null));\r", "+\tColor defaultFgColor = ((Control)event.widget).getForeground();\r", "-\t\t\t// do nothing\r", "-\t\t} else if ((token == WHITE) && (!styles.isEmpty())) {\r", "-\t\t\tint start = scanner.getStartOffset() + event.lineOffset;\r", "-\t\t\tlastStyle = (StyleRange)styles.lastElement();\r", "-\t\t\tif (lastStyle.fontStyle != SWT.NORMAL) {\r", "-\t\t\t\tif (lastStyle.start + lastStyle.length == start) {\r", "-\t\t\t\t\t// have the white space take on the style before it to minimize font style\r", "-\t\t\t\t\t// changes\r", "-\t\t\t\t\tlastStyle.length += scanner.getLength();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} else {\t\t\r", "+\t\t\t// do nothing for non-colored tokens\r", "+\t\t} else if (token != WHITE) {\r", "-\t\t\tif (color != colors[0]) {\t\t// hardcoded default foreground color, black\r", "+\t\t\t// Only create a style if the token color is different than the \r", "+\t\t\t// widget's default foreground color and the token's style is not \r", "+\t\t\t// bold.  Keywords are bolded.\r", "+\t\t\tif ((!color.equals(defaultFgColor)) || (token == KEY)) {\r", "+\t\t\t\t\t// Merge similar styles.  Doing so will improve performance.\r", "-\t\t}\r", "+\t\t} else if ((!styles.isEmpty()) && ((lastStyle=(StyleRange)styles.lastElement()).fontStyle == SWT.BOLD)) {\r", "+\t\t\tint start = scanner.getStartOffset() + event.lineOffset;\r", "+\t\t\tlastStyle = (StyleRange)styles.lastElement();\r", "+\t\t\t// A font style of SWT.BOLD implies that the last style\r", "+\t\t\t// represents a java keyword.\r", "+\t\t\tif (lastStyle.start + lastStyle.length == start) {\r", "+\t\t\t\t// Have the white space take on the style before it to \r", "+\t\t\t\t// minimize the number of style ranges created and the\r", "+\t\t\t\t// number of font style changes during rendering.\r", "+\t\t\t\tlastStyle.length += scanner.getLength();\r", "+\t\t\t}\r", "+\t\t} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c9f6735072886cb56e8ff1893f8e2c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/org/eclipse/swt/examples/javaviewer/JavaLineStyler.java", "commitBeforeChange": "58ebe84839db8cbd2eaef39398ff27d3fbf5c7d5", "commitAfterChange": "1fc579af82362f55eb881556edf61eabb46751eb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public void lineGetStyle(LineStyleEvent event)", "signatureAfterChange": "\r public void lineGetStyle(LineStyleEvent event)", "diff": ["+\t// If the line is part of a block comment, create one style for the entire line.\r", "-\t\tstyles.addElement(new StyleRange(event.lineOffset, event.lineText.length(), colors[1], null));\r", "+\t\tstyles.addElement(new StyleRange(event.lineOffset, event.lineText.length(), getColor(COMMENT), null));\r", "+\tColor defaultFgColor = ((Control)event.widget).getForeground();\r", "-\t\t\t// do nothing\r", "-\t\t} else if ((token == WHITE) && (!styles.isEmpty())) {\r", "-\t\t\tint start = scanner.getStartOffset() + event.lineOffset;\r", "-\t\t\tlastStyle = (StyleRange)styles.lastElement();\r", "-\t\t\tif (lastStyle.fontStyle != SWT.NORMAL) {\r", "-\t\t\t\tif (lastStyle.start + lastStyle.length == start) {\r", "-\t\t\t\t\t// have the white space take on the style before it to minimize font style\r", "-\t\t\t\t\t// changes\r", "-\t\t\t\t\tlastStyle.length += scanner.getLength();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t} else {\t\t\r", "+\t\t\t// do nothing for non-colored tokens\r", "+\t\t} else if (token != WHITE) {\r", "-\t\t\tif (color != colors[0]) {\t\t// hardcoded default foreground color, black\r", "+\t\t\t// Only create a style if the token color is different than the \r", "+\t\t\t// widget's default foreground color and the token's style is not \r", "+\t\t\t// bold.  Keywords are bolded.\r", "+\t\t\tif ((!color.equals(defaultFgColor)) || (token == KEY)) {\r", "+\t\t\t\t\t// Merge similar styles.  Doing so will improve performance.\r", "-\t\t}\r", "+\t\t} else if ((!styles.isEmpty()) && ((lastStyle=(StyleRange)styles.lastElement()).fontStyle == SWT.BOLD)) {\r", "+\t\t\tint start = scanner.getStartOffset() + event.lineOffset;\r", "+\t\t\tlastStyle = (StyleRange)styles.lastElement();\r", "+\t\t\t// A font style of SWT.BOLD implies that the last style\r", "+\t\t\t// represents a java keyword.\r", "+\t\t\tif (lastStyle.start + lastStyle.length == start) {\r", "+\t\t\t\t// Have the white space take on the style before it to \r", "+\t\t\t\t// minimize the number of style ranges created and the\r", "+\t\t\t\t// number of font style changes during rendering.\r", "+\t\t\t\tlastStyle.length += scanner.getLength();\r", "+\t\t\t}\r", "+\t\t} \r"]}], "num": 44663}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3bd58e13ee8bb1efd59ca815d23c911", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ced94a1aae8b3629b8455ee9e75ece4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "53eaef42c85a19c6c024eb953b35f15c33827e05", "commitAfterChange": "e8c16f7f9f6a3f2c095dfd48e874b4e7a9e7e851", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 134, "signatureBeforeChange": "\r int contentWidth(String text, int lineIndex, GC gc)", "signatureAfterChange": "\r StyleRange[] getVisualLineStyleData(StyleRange[] logicalStyles, int lineOffset, int lineLength)", "diff": ["- */\r", "-int contentWidth(String text, int lineIndex, GC gc) {\r", "-\tint paintX = 0;\r", "-\tint textLength = text.length();\r", "-\r", "-\tfor (int i = 0; i < textLength; i++) {\r", "-\t\tint tabIndex = text.indexOf(TAB, i);\r", "-\t\t// is tab not present or past the rendering range?\r", "-\t\tif (tabIndex == -1 || tabIndex > textLength) {\r", "-\t\t\ttabIndex = textLength;\r", "-\t\t}\r", "-\t\tif (tabIndex != i) {\r", "-\t\t\tString tabSegment = text.substring(i, tabIndex);\r", "-\t\t\tpaintX += gc.stringExtent(tabSegment).x;\r", "-\t\t\tif (tabIndex != textLength && tabWidth > 0) {\r", "-\t\t\t\tpaintX = getTabStop(paintX);\r", "-\t\t\t}\r", "-\t\t\ti = tabIndex;\r", "-\t\t}\r", "-\t\telse \t\t\r", "-\t\tif (tabWidth > 0) {\r", "-\t\t\tpaintX = getTabStop(paintX);\r", "-\t\t}\r", "-\t}\r", "-\treturn paintX;\r", "+ */\r", "+StyleRange[] getVisualLineStyleData(StyleRange[] logicalStyles, int lineOffset, int lineLength) {\r", "+\tint lineEnd = lineOffset + lineLength;\r", "+\tint oldStyleCount = logicalStyles.length;\r", "+\tint newStyleCount = 0;\r", "+\t\r", "+\tfor (int i = 0; i < oldStyleCount; i++) {\r", "+\t\tStyleRange style = logicalStyles[i];\r", "+\t\tif (style.start < lineEnd && style.start + style.length > lineOffset) {\r", "+\t\t\tnewStyleCount++;\r", "+\t\t}\r", "+\t}\r", "+\tif (newStyleCount != oldStyleCount) {\r", "+\t\tStyleRange[] newStyles = new StyleRange[newStyleCount];\r", "+\t\tfor (int i = 0, j = 0; i < oldStyleCount; i++) {\r", "+\t\t\tStyleRange style = logicalStyles[i];\r", "+\t\t\tif (style.start < lineEnd && style.start + style.length > lineOffset) {\r", "+\t\t\t\tnewStyles[j++] = logicalStyles[i];\t\t\t\t\t\t\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tlogicalStyles = newStyles;\r", "+\t}\r", "+\treturn logicalStyles;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cc136213b4f26d937daf1e704178694", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "df63744a83b6c4ccafd10c57535b24dd9458ba96", "commitAfterChange": "49d8ee915a6006746596a7d40978b42b50fa61b3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void arrowEvent (Event event)", "signatureAfterChange": " void arrowEvent (Event event)", "diff": ["-\t\tcase SWT.MouseDown: {", "-\t\t\tEvent mouseEvent = new Event ();", "-\t\t\tmouseEvent.button = event.button;", "-\t\t\tmouseEvent.count = event.count;", "-\t\t\tmouseEvent.stateMask = event.stateMask;", "-\t\t\tmouseEvent.time = event.time;", "-\t\t\tmouseEvent.x = event.x; mouseEvent.y = event.y;", "-\t\t\tnotifyListeners (SWT.MouseDown, mouseEvent);", "-\t\t\tevent.doit = mouseEvent.doit;", "+\t\tcase SWT.DragDetect:", "+\t\tcase SWT.MouseDown:", "+\t\tcase SWT.MouseUp:", "+\t\tcase SWT.MouseMove:", "+\t\tcase SWT.MouseEnter:", "+\t\tcase SWT.MouseExit:", "+\t\tcase SWT.MouseHover: {", "+\t\t\tPoint pt = getDisplay ().map (arrow, this, event.x, event.y);", "+\t\t\tevent.x = pt.x; event.y = pt.y;", "+\t\t\tnotifyListeners (event.type, event);", "+\t\t\tevent.type = SWT.None;", "-\t\tcase SWT.MouseUp: {", "-\t\t\tEvent mouseEvent = new Event ();", "-\t\t\tmouseEvent.button = event.button;", "-\t\t\tmouseEvent.count = event.count;", "-\t\t\tmouseEvent.stateMask = event.stateMask;", "-\t\t\tmouseEvent.time = event.time;", "-\t\t\tmouseEvent.x = event.x; mouseEvent.y = event.y;", "-\t\t\tnotifyListeners (SWT.MouseUp, mouseEvent);", "-\t\t\tevent.doit = mouseEvent.doit;", "+\t\tcase SWT.MouseWheel: {", "+\t\t\tPoint pt = getDisplay ().map (arrow, this, event.x, event.y);", "+\t\t\tevent.x = pt.x; event.y = pt.y;", "+\t\t\tnotifyListeners (SWT.MouseWheel, event);", "+\t\t\tevent.type = SWT.None;", "+\t\t\tif (isDisposed ()) break;", "+\t\t\tif (!event.doit) break;", "+\t\t\tif (event.count != 0) {", "+\t\t\t\tevent.doit = false;", "+\t\t\t\tint oldIndex = getSelectionIndex ();", "+\t\t\t\tif (event.count > 0) {", "+\t\t\t\t\tselect (Math.max (oldIndex - 1, 0));", "+\t\t\t\t} else {", "+\t\t\t\t\tselect (Math.min (oldIndex + 1, getItemCount () - 1));", "+\t\t\t\t}", "+\t\t\t\tif (oldIndex != getSelectionIndex ()) {", "+\t\t\t\t\tEvent e = new Event();", "+\t\t\t\t\te.time = event.time;", "+\t\t\t\t\te.stateMask = event.stateMask;", "+\t\t\t\t\tnotifyListeners (SWT.Selection, e);", "+\t\t\t\t}", "+\t\t\t\tif (isDisposed ()) break;", "+\t\t\t}"]}], "num": 60161}
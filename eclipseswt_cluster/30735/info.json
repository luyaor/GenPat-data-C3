{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb3fc8c32b64301ca352ebd010939563", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df1d391d0c8ff41aa1bcfa7ef386a6a7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ecbcd650bfaaa87dc3142602f57032996f2eace2", "commitAfterChange": "148b84f426929c4b1c134024d292f28a1ed47f44", "methodNumberBeforeChange": 189, "methodNumberAfterChange": 189, "signatureBeforeChange": "  void setBackgroundColor (int handle, GdkColor color)", "signatureAfterChange": "  void setBackgroundColor (int handle, GdkColor color)", "diff": ["-\tString name = color == null ? \"<parent>\" : \"<none>\";", "-\tbyte[] buffer = Converter.wcsToMbcs (null, name, true);", "-\tptr = OS.g_malloc (buffer.length);", "-\tOS.memmove (ptr, buffer, buffer.length);", "+\tptr = 0;", "+\t", "+\tString pixmapName = null;", "+\tint flags = OS.gtk_rc_style_get_color_flags (style, index);", "+\tif (color != null) {", "+\t\tflags |= OS.GTK_RC_BG;", "+\t\tpixmapName = \"<none>\";", "+\t} else {", "+\t\tflags &= ~OS.GTK_RC_BG;", "+\t\tif (backgroundImage == null && (state & PARENT_BACKGROUND) != 0) {", "+\t\t\tpixmapName = \"<parent>\";", "+\t\t}", "+\t}", "+\tif (pixmapName != null) {", "+\t\tbyte[] buffer = Converter.wcsToMbcs (null, pixmapName, true);", "+\t\tptr = OS.g_malloc (buffer.length);", "+\t\tOS.memmove (ptr, buffer, buffer.length);", "+\t}", "+\t", "-\tint flags = OS.gtk_rc_style_get_color_flags (style, index);", "-\tflags = (color == null) ? flags & ~OS.GTK_RC_BG : flags | OS.GTK_RC_BG;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3aa8ec3069431be05ae030586c903de", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "1a4f56d795428ec7c06bef86ec797cfdd29fac5c", "commitAfterChange": "ef0971ce84e4c3c81e026eea0064b04d3d2ea231", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " public int internal_new_GC (GCData data)", "signatureAfterChange": " public int internal_new_GC (GCData data)", "diff": ["-\t\tvisual = OS.gcnew_DrawingVisual();", "-\t\tif (visual == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tif ((state & CANVAS) != 0) {", "+\t\t\tvisual = OS.SWTCanvas_Visual (handle);", "+\t\t} ", "+\t\tif (visual == 0) {", "+\t\t\tvisual = OS.gcnew_DrawingVisual();", "+\t\t\tif (visual == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tif ((state & CANVAS) != 0) {", "+\t\t\t\tOS.SWTCanvas_Visual (handle, visual);", "+\t\t\t} ", "+\t\t}", "-\t\tif (dc == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\t\tif ((state & CANVAS) != 0) {", "-\t\t\tOS.SWTCanvas_Visual (handle, visual);", "-\t\t}", "+\t\tif (dc == 0) SWT.error (SWT.ERROR_NO_HANDLES);\t\t", "+\t\tint drawing = OS.DrawingVisual_Drawing(visual);", "+\t\tOS.DrawingContext_DrawDrawing(drawingContext, drawing);", "+\t\tOS.GCHandle_Free(drawing);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0da6a002481cad26f6a70e94adcf827f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "73a84b5055a6e8b9d3988630057727bfa99b8f45", "commitAfterChange": "3a3b000b99cbce518a33fdb9f12963c362140bb5", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": "  int kEventTextInputUnicodeForKeyEvent (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventTextInputUnicodeForKeyEvent (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (!isDisposed () && !hasFocus ()) {", "+\tif (!isDisposed ()) {", "-\t\tint focusHandle = focusHandle ();", "-\t\tint window = OS.GetControlOwner (focusHandle);", "-\t\tdisplay.ignoreFocus = true;", "-\t\tOS.SetKeyboardFocus (window, focusHandle, (short) focusPart ());", "-\t\tdisplay.ignoreFocus = false;", "-\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\tif (focusControl != null) {", "-\t\t\tfocusHandle = focusControl.focusHandle ();", "-\t\t\twindow = OS.GetControlOwner (focusHandle);", "+\t\tif (focusControl != this) {", "+\t\t\tint window = OS.GetControlOwner (handle), newWindow = 0;", "+\t\t\tif (focusControl != null) {", "+\t\t\t\tnewWindow = OS.GetControlOwner (focusControl.handle);", "+\t\t\t}", "-\t\t\tOS.SetKeyboardFocus (window, focusHandle, (short) focusControl.focusPart ());", "+\t\t\tif (window != newWindow) OS.SetUserFocusWindow (window);", "+\t\t\tOS.SetKeyboardFocus (window, focusHandle (), (short) focusPart ());", "-\t\t} else {", "+\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\t\tOS.ClearKeyboardFocus (window);", "+\t\t\tif (window != newWindow && newWindow != 0) OS.SetUserFocusWindow (newWindow);", "+\t\t\tif (window == newWindow && focusControl != null) {", "+\t\t\t\tOS.SetKeyboardFocus (window, focusControl.focusHandle (), (short) focusControl.focusPart ());", "+\t\t\t} else {", "+\t\t\t\tOS.ClearKeyboardFocus (window);", "+\t\t\t}", "+\t\t\treturn OS.noErr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7aecdd1e21a1f99b762c0804952e2df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ExpandBar.java", "commitBeforeChange": "a7d5fd3d9c6e5068ddcdfcd54f78631d29228ff7", "commitAfterChange": "f2fdacc1748ba70c63b400772bf7b53217fb343f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void drawWidget (GC gc, RECT clipRect)", "signatureAfterChange": "  void drawWidget (GC gc, RECT clipRect)", "diff": ["-\tint /*long*/ hCaptionFont = 0, oldFont = 0;\t", "+\tint /*long*/ hCurrentFont = 0, oldFont = 0;\t", "-\t\tif (!OS.IsWinCE && hFont == 0) {", "-\t\t\tNONCLIENTMETRICS info = OS.IsUnicode ? (NONCLIENTMETRICS) new NONCLIENTMETRICSW () : new NONCLIENTMETRICSA ();", "-\t\t\tinfo.cbSize = NONCLIENTMETRICS.sizeof;", "-\t\t\tif (OS.SystemParametersInfo (OS.SPI_GETNONCLIENTMETRICS, 0, info, 0)) {", "-\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT) ((NONCLIENTMETRICSW)info).lfCaptionFont : ((NONCLIENTMETRICSA)info).lfCaptionFont;", "-\t\t\t\thCaptionFont = OS.CreateFontIndirect (logFont);", "-\t\t\t\toldFont = OS.SelectObject (gc.handle, hCaptionFont);", "+\t\tif (hFont != 0) {", "+\t\t\thCurrentFont = hFont;", "+\t\t} else {", "+\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\tNONCLIENTMETRICS info = OS.IsUnicode ? (NONCLIENTMETRICS) new NONCLIENTMETRICSW () : new NONCLIENTMETRICSA ();", "+\t\t\t\tinfo.cbSize = NONCLIENTMETRICS.sizeof;", "+\t\t\t\tif (OS.SystemParametersInfo (OS.SPI_GETNONCLIENTMETRICS, 0, info, 0)) {", "+\t\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT) ((NONCLIENTMETRICSW)info).lfCaptionFont : ((NONCLIENTMETRICSA)info).lfCaptionFont;", "+\t\t\t\t\thCurrentFont = OS.CreateFontIndirect (logFont);", "+\t\t\t\t}", "+\t\t}", "+\t\tif (hCurrentFont != 0) {", "+\t\t\toldFont = OS.SelectObject (gc.handle, hCurrentFont);", "+\t\t}", "+\t\tif (foreground != -1) {", "+\t\t\tOS.SetTextColor (gc.handle, foreground);", "-\tif (hCaptionFont != 0) {", "+\tif (hCurrentFont != 0) {", "-\t\tOS.DeleteObject (hCaptionFont);", "+\t\tif (hCurrentFont != hFont) OS.DeleteObject (hCurrentFont);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d36c62efed00ad40cb79d76f896f9708", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "d70097b3723123dbd8abcf6b34b2f106be849ad8", "commitAfterChange": "b6666a5139ca22ba429077362792bdaf8b234877", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  static Hashtable gio_getMimeInfo()", "signatureAfterChange": "  static Hashtable gio_getMimeInfo()", "diff": ["-\tint /*long*/ mimeDatabase;", "+\tint /*long*/ mimeDatabase = 0, fileInfo = 0;", "-\tif (fileInputStream == 0) {", "-\t\tOS.g_object_unref (mimeDatabase);", "-\t\treturn null;", "-\t}", "-\tint /*long*/ [] modTimestamp = new int /*long*/ [2];", "-\tbuffer = Converter.wcsToMbcs (null, \"*\", true);", "-\tint /*long*/ fileInfo = OS.g_file_query_info(mimeDatabase, buffer, 0, 0, 0);", "-\tOS.g_file_info_get_modification_time(fileInfo, modTimestamp);", "-\tif (modTime != 0 && modTimestamp[0] == modTime) {", "-\t\treturn mimeTable;", "-\t} else {", "-\t\tmimeTable = new Hashtable();", "-\t\tmodTime = modTimestamp[0];", "-\t\tint /*long*/ reader = OS.g_data_input_stream_new (fileInputStream);", "-\t\tint[] length = new int[1];", "-\t\t", "-\t\tif (reader != 0) {", "-\t\t\tint /*long*/ linePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "-\t\t\twhile (linePtr != 0) {", "-\t\t\t\tbyte[] lineBytes = new byte[length[0]];", "-\t\t\t\tOS.memmove(lineBytes, linePtr, length[0]);", "-\t\t\t\tString line = new String (Converter.mbcsToWcs (null, lineBytes));", "-\t", "-\t\t\t\tint separatorIndex = line.indexOf (':');", "-\t\t\t\tif (separatorIndex > 0) {", "-\t\t\t\t\tVector mimeTypes = new Vector ();", "-\t\t\t\t    String mimeType = line.substring (0, separatorIndex);", "-\t\t\t\t\tString extensionFormat = line.substring (separatorIndex+1);", "-\t\t\t\t\tint extensionIndex = extensionFormat.indexOf (\".\");", "-\t\t\t\t\tif (extensionIndex > 0) {", "-\t\t\t\t\t\tString extension = extensionFormat.substring (extensionIndex);", "-\t\t\t\t\t\tmimeTypes.add (mimeType);", "-\t\t\t\t\t\tif (mimeTable.containsKey (extension)) {", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t * If mimeType already exists, it is required to update", "-\t\t\t\t\t\t\t * the existing key (mime-type) with the new extension. ", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\tVector value = (Vector) mimeTable.get (extension);", "-\t\t\t\t\t\t\tmimeTypes.addAll (value);", "+\ttry {", "+\t\tif (fileInputStream != 0) {", "+\t\t\tint /*long*/ [] modTimestamp = new int /*long*/ [2];", "+\t\t\tbuffer = Converter.wcsToMbcs (null, \"*\", true);", "+\t\t\tfileInfo = OS.g_file_query_info(mimeDatabase, buffer, 0, 0, 0);", "+\t\t\tOS.g_file_info_get_modification_time(fileInfo, modTimestamp);", "+\t\t\tif (modTime != 0 && modTimestamp[0] == modTime) {", "+\t\t\t\treturn mimeTable;", "+\t\t\t} else {", "+\t\t\t\tmimeTable = new Hashtable();", "+\t\t\t\tmodTime = modTimestamp[0];", "+\t\t\t\tint /*long*/ reader = OS.g_data_input_stream_new (fileInputStream);", "+\t\t\t\tint[] length = new int[1];", "+\t\t\t\t", "+\t\t\t\tif (reader != 0) {", "+\t\t\t\t\tint /*long*/ linePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "+\t\t\t\t\twhile (linePtr != 0) {", "+\t\t\t\t\t\tbyte[] lineBytes = new byte[length[0]];", "+\t\t\t\t\t\tOS.memmove(lineBytes, linePtr, length[0]);", "+\t\t\t\t\t\tString line = new String (Converter.mbcsToWcs (null, lineBytes));", "+\t\t\t", "+\t\t\t\t\t\tint separatorIndex = line.indexOf (':');", "+\t\t\t\t\t\tif (separatorIndex > 0) {", "+\t\t\t\t\t\t\tVector mimeTypes = new Vector ();", "+\t\t\t\t\t\t    String mimeType = line.substring (0, separatorIndex);", "+\t\t\t\t\t\t\tString extensionFormat = line.substring (separatorIndex+1);", "+\t\t\t\t\t\t\tint extensionIndex = extensionFormat.indexOf (\".\");", "+\t\t\t\t\t\t\tif (extensionIndex > 0) {", "+\t\t\t\t\t\t\t\tString extension = extensionFormat.substring (extensionIndex);", "+\t\t\t\t\t\t\t\tmimeTypes.add (mimeType);", "+\t\t\t\t\t\t\t\tif (mimeTable.containsKey (extension)) {", "+\t\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t\t * If mimeType already exists, it is required to update", "+\t\t\t\t\t\t\t\t\t * the existing key (mime-type) with the new extension. ", "+\t\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\t\tVector value = (Vector) mimeTable.get (extension);", "+\t\t\t\t\t\t\t\t\tmimeTypes.addAll (value);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tmimeTable.put (extension, mimeTypes);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tmimeTable.put (extension, mimeTypes);", "+\t\t\t\t\t\tOS.g_free(linePtr);", "+\t\t\t\t\t\tlinePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "-\t\t\t\tlinePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "+\t\t\t\tif (reader != 0) OS.g_object_unref (reader);", "+\t\t\t\treturn mimeTable;", "-\t\t}", "-\t\treturn mimeTable;", "+\t\t} ", "+\t\treturn null;", "+\t} finally {", "+\t\tif (fileInfo != 0) OS.g_object_unref(fileInfo);", "+\t\tif (fileInputStream != 0) OS.g_object_unref(fileInputStream);", "+\t\tif (mimeDatabase != 0) \tOS.g_object_unref (mimeDatabase);"]}], "num": 30735}
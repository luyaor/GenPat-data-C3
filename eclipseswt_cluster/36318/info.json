{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf3df05fdf65db12748ec2067c9b95a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf8869e852a059e255ff5b243394d74", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 30, "signatureBeforeChange": " public Rectangle getImageBounds (int columnIndex)", "signatureAfterChange": " int getPaintStopX()", "diff": ["-}", "-public Rectangle getImageBounds (int columnIndex) {", "-\tcheckWidget ();", "-\tint validColumnCount = Math.max (1, parent.getColumnCount ());", "-\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return new Rectangle (0,0,0,0);", "-\tint padding = parent.getCellPadding ();", "-\tint startX = getContentX (columnIndex);", "-\tint itemHeight = parent.getItemHeight ();", "-\tint y = parent.getItemY (this);", "-\tImage image = internalGetImage (columnIndex); ", "-\tif (image == null) {", "-\t\treturn new Rectangle (startX, y + padding, 0, itemHeight - 2 * padding);", "-\tRectangle imageBounds = image.getBounds ();", "-\t/* ", "-\t * For column 0 all images have the same width, which may be larger or smaller", "-\t * than the image to be drawn here.  Therefore the image bounds to draw must be", "-\t * specified.", "-\t */", "-\tint drawWidth;", "-\tif (columnIndex == 0) {", "-\t\tint imageSpaceX = parent.col0ImageWidth;", "-\t\tdrawWidth = Math.min (imageSpaceX, imageBounds.width);", "-\t} else {", "-\t\tdrawWidth = imageBounds.width;", "-\tint imageSpaceY = itemHeight - (2 * padding);", "-\tint drawHeight = Math.min (imageSpaceY, imageBounds.height);", "-\treturn new Rectangle(", "-\t\tstartX, y + (itemHeight - drawHeight) / 2,", "-\t\tdrawWidth, drawHeight);", "+ */", "+int getPaintStopX() {", "+\treturn (getItemStartX() + getItemExtent().x - getParent().getHorizontalOffset());", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdbf999ad8c242c8093eb0b1b77f8399", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "7860723211e8cc6ba8707f4d02beb62cf87da3ef", "commitAfterChange": "dfc28760d49abde0469544c6fd59329f9c08c067", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 276, "signatureBeforeChange": "\r public void setStyleRange(StyleRange range)", "signatureAfterChange": "\r public void setStyleRange(StyleRange range)", "diff": ["-\tboolean redrawFirstLine = false;\r", "-\tboolean redrawLastLine = false;\r", "-\t\t// the first and last line needs to be redrawn completely if the \r", "-\t\t// font style is changing from SWT.NORMAL to something else or \r", "-\t\t// vice versa. fixes 1G7M5WE.\r", "-\t\tint rangeEnd = range.start + range.length;\r", "-\t\tint firstLine = content.getLineAtOffset(range.start);\r", "-\t\tint lastLine = content.getLineAtOffset(rangeEnd);\r", "-\t\tint firstLineOffset = content.getOffsetAtLine(firstLine);\r", "-\t\tif (isStyleChanging(range, range.start, Math.min(rangeEnd, firstLineOffset + content.getLine(firstLine).length()))) {\r", "-\t\t\tredrawFirstLine = true;\r", "-\t\t}\t\t\t\t\r", "-\t\tif (lastLine != firstLine) {\r", "-\t\t\tint lastLineOffset = content.getOffsetAtLine(lastLine);\r", "-\t\t\tif (isStyleChanging(range, lastLineOffset, rangeEnd)) {\r", "-\t\t\t\tredrawLastLine = true;\r", "-\t\t\t}\t\t\t\t\r", "-\t\t}\r", "-\t}\r", "-\tif (isBidi()) {\r", "-\t\tredrawFirstLine = true;\r", "-\t\tredrawLastLine = true;\r", "-\t}\r", "-\tdefaultLineStyler.setStyleRange(range);\r", "-\tif (range != null) {\r", "+\t\tboolean redrawFirstLine = false;\r", "+\t\tboolean redrawLastLine = false;\r", "-\t\r", "-\t\t// reset all lines affected by the style change but let the redraw\r", "-\t\t// recalculate only those that are visible.\r", "-\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);\r", "-\t\tinternalRedrawRange(range.start, range.length, true);\r", "-\t\tif (redrawFirstLine) {\r", "-\t\t\t// redraw starting at the style change start offset since\r", "-\t\t\t// single line text changes, followed by style changes will\r", "-\t\t\t// flash otherwise\r", "+\r", "+\t\t// if the style is not visible, there is no need to redraw\r", "+\t\tboolean redrawLines = isAreaVisible(firstLine, lastLine);\r", "+\r", "+\t\tif (!redrawLines) {\r", "+\t\t\tdefaultLineStyler.setStyleRange(range);\r", "+\t\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);\r", "+\t\t} else {\r", "+\t\t\t// the first and last line needs to be redrawn completely if the \r", "+\t\t\t// font style is changing from SWT.NORMAL to something else or \r", "+\t\t\t// vice versa. fixes 1G7M5WE.\r", "-\t\t\tString firstLineText = content.getLine(firstLine);\r", "-\t\t\tint redrawX = getXAtOffset(firstLineText, firstLine, range.start - firstLineOffset);\r", "-\t\t\tint redrawY = firstLine * lineHeight - verticalScrollOffset;\r", "-\t\t\tsuper.redraw(\r", "-\t\t\t\tredrawX + leftMargin, redrawY + topMargin, \r", "-\t\t\t\tgetClientArea().width, lineHeight, true);\r", "+\t\t\tint lastLineOffset = content.getOffsetAtLine(lastLine);\r", "+\t\t\tif (isBidi()) {\r", "+\t\t\t\tredrawFirstLine = true;\r", "+\t\t\t\tredrawLastLine = true;\r", "+\t\t\t} else {\r", "+\t\t\t\tredrawFirstLine = isRedrawFirstLine(new StyleRange[] {range}, firstLine, firstLineOffset);\r", "+\t\t\t\tif (lastLine != firstLine) {\r", "+\t\t\t\t\tredrawLastLine = isRedrawLastLine(new StyleRange[] {range}, lastLine, lastLineOffset);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tdefaultLineStyler.setStyleRange(range);\r", "+\t\t\t// reset all lines affected by the style change but let the redraw\r", "+\t\t\t// recalculate only those that are visible.\r", "+\t\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);\r", "+\t\t\tinternalRedrawRange(range.start, range.length, true);\r", "+\t\t\tif (redrawFirstLine) {\r", "+\t\t\t\tredrawLine(firstLine, range.start - firstLineOffset);\r", "+\t\t\t}\r", "+\t\t\tif (redrawLastLine) {\r", "+\t\t\t\tredrawLine(lastLine, 0);\r", "+\t\t\t}\r", "-\t\tif (redrawLastLine) {\r", "-\t\t\t// redraw the whole line if the font style changed on the last line\t\r", "-\t\t\tint redrawY = lastLine * lineHeight - verticalScrollOffset;\r", "-\t\t\tsuper.redraw(\r", "-\t\t\t\tleftMargin, redrawY + topMargin, \r", "-\t\t\t\tgetClientArea().width, lineHeight, true);\r", "-\t\t}\r", "-\t}\r", "-\telse {\r", "-\t\t// reset all lines but let the redraw recalculate only those that \r", "-\t\t// are visible.\r", "+\t} else {\r", "+\t\t// clearing all styles\r", "+\t\tdefaultLineStyler.setStyleRange(range);\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "874b7c0511332055d8fc0bbfc2916791", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "b609e78649d0a24ab2d37dea4f5d376e9b5ef164", "commitAfterChange": "4af2139bd60e8934fe7b368dd056a1828221ecd7", "methodNumberBeforeChange": 369, "methodNumberAfterChange": 372, "signatureBeforeChange": " void setScrollBars(boolean vertical)", "signatureAfterChange": " void setScrollBars(boolean vertical)", "diff": ["-\tint inactive = 1;", "-\tif (vertical || !isFixedLineHeight()) {", "-\t\tScrollBar verticalBar = getVerticalBar();", "-\t\tif (verticalBar != null) {", "-\t\t\tint maximum = renderer.getHeight();", "-\t\t\t// only set the real values if the scroll bar can be used ", "-\t\t\t// (ie. because the thumb size is less than the scroll maximum)", "-\t\t\t// avoids flashing on Motif, fixes 1G7RE1J and 1G5SE92", "-\t\t\tif (clientAreaHeight < maximum) {", "-\t\t\t\tverticalBar.setMaximum(maximum - topMargin - bottomMargin);", "-\t\t\t\tverticalBar.setThumb(clientAreaHeight - topMargin - bottomMargin);", "-\t\t\t\tverticalBar.setPageIncrement(clientAreaHeight - topMargin - bottomMargin);", "-\t\t\t} else if (verticalBar.getThumb() != inactive || verticalBar.getMaximum() != inactive) {", "-\t\t\t\tverticalBar.setValues(", "-\t\t\t\t\tverticalBar.getSelection(),", "-\t\t\t\t\tverticalBar.getMinimum(),", "-\t\t\t\t\tinactive,", "-\t\t\t\t\tinactive,", "-\t\t\t\t\tverticalBar.getIncrement(),", "-\t\t\t\t\tinactive);", "-\t\t\t}", "-\t\t}", "-\t}", "+\tignoreResize++;", "+\tif (!isFixedLineHeight() || !alwaysShowScroll) vertical = true;", "+\tScrollBar verticalBar = vertical ? getVerticalBar() : null;", "-\tif (horizontalBar != null && horizontalBar.getVisible()) {", "-\t\tint maximum = renderer.getWidth();", "-\t\t// only set the real values if the scroll bar can be used ", "-\t\t// (ie. because the thumb size is less than the scroll maximum)", "-\t\t// avoids flashing on Motif, fixes 1G7RE1J and 1G5SE92", "-\t\tif (clientAreaWidth < maximum) {", "-\t\t\thorizontalBar.setMaximum(maximum - leftMargin - rightMargin);", "-\t\t\thorizontalBar.setThumb(clientAreaWidth - leftMargin - rightMargin);", "-\t\t\thorizontalBar.setPageIncrement(clientAreaWidth - leftMargin - rightMargin);", "-\t\t} else if (horizontalBar.getThumb() != inactive || horizontalBar.getMaximum() != inactive) {", "-\t\t\thorizontalBar.setValues(", "-\t\t\t\thorizontalBar.getSelection(),", "-\t\t\t\thorizontalBar.getMinimum(),", "-\t\t\t\tinactive,", "-\t\t\t\tinactive,", "-\t\t\t\thorizontalBar.getIncrement(),", "-\t\t\t\tinactive);", "+\tif (!alwaysShowScroll) {", "+\t\tif (verticalBar != null) verticalBar.setVisible(false);", "+\t\tif (horizontalBar != null) horizontalBar.setVisible(false);", "+\t}", "+\tif (verticalBar != null) {", "+\t\tsetScrollBar(verticalBar, clientAreaHeight, renderer.getHeight(), topMargin + bottomMargin);", "+\t}", "+\tif (horizontalBar != null) {", "+\t\tsetScrollBar(horizontalBar, clientAreaWidth, renderer.getWidth(), leftMargin + rightMargin);", "+\t\tif (!alwaysShowScroll && horizontalBar.getVisible() && verticalBar != null && !verticalBar.getVisible()) {", "+\t\t\tsetScrollBar(verticalBar, clientAreaHeight, renderer.getHeight(), topMargin + bottomMargin);", "+\tignoreResize--;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a29d50d167bf51b9f2b1db3caf8551", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java", "commitBeforeChange": "acddacf7da7550accfa2b2e69a28b70a3eb61e9c", "commitAfterChange": "615a9e44c1b1ef15ac246dcd713945b6c0812293", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 51, "signatureBeforeChange": "\r private String[][] merge(String[][] firstHalf, String[][] secondHalf, int column)", "signatureAfterChange": "\r \tpublic int compare(Object obj1, Object obj2)", "diff": ["- */\r", "-private String[][] merge(String[][] firstHalf, String[][] secondHalf, int column) {\r", "-\tint x = firstHalf.length + secondHalf.length;\r", "-\tint y = Math.max(firstHalf[0].length, secondHalf[0].length);\r", "-\tString[][] sorted = new String[x][y];\r", "-\t\r", "-\tint firstHalfIndex = 0;\r", "-\tint secondHalfIndex = 0;\r", "-\tint sortedIndex = 0;\r", "-\r", "-\t//merge\r", "-\twhile(firstHalfIndex < firstHalf.length && secondHalfIndex < secondHalf.length) {\r", "-\t\tif(firstHalf[firstHalfIndex][column].compareToIgnoreCase(secondHalf[secondHalfIndex][column]) <= 0 ) {\r", "-\t\t\tsorted[sortedIndex] = firstHalf[firstHalfIndex];\r", "-\t\t\tsortedIndex++;\r", "-\t\t\tfirstHalfIndex++;\r", "-\t\t} else {\r", "-\t\t\tsorted[sortedIndex] = secondHalf[secondHalfIndex];\r", "-\t\t\tsortedIndex++;\r", "-\t\t\tsecondHalfIndex++;\r", "-\t\t}\r", "-\t}\r", "-\t\r", "-\t//copy remaining items into sorted.\r", "-\twhile(firstHalfIndex < firstHalf.length) {\r", "-\t\tsorted[sortedIndex] = firstHalf[firstHalfIndex];\r", "-\t\tsortedIndex++;\r", "-\t\tfirstHalfIndex++;\r", "-\t}\r", "-\t\r", "-\twhile(secondHalfIndex < secondHalf.length) {\r", "-\t\tsorted[sortedIndex] = secondHalf[secondHalfIndex];\r", "-\t\tsortedIndex++;\r", "-\t\tsecondHalfIndex++;\r", "-\t}\r", "-\t\r", "-\treturn sorted;\r", "-}\r", "+\t */\r", "+\tpublic int compare(Object obj1, Object obj2) {\r", "+\t\tString[] row1 = (String[])obj1;\r", "+\t\tString[] row2 = (String[])obj2;\r", "+\t\t\r", "+\t\treturn row1[column].compareTo(row2[column]);\r", "+\t}\r"]}], "num": 36318}
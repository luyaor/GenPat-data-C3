{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7e024ec9777d5a28fbb25c71aeef951", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ddafe6052dd7f7bb32a214341d3660c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tpublic NSArray internal_accessibilityActionNames(int childID)", "signatureAfterChange": " \t \tpublic NSArray internal_accessibilityActionNames(int childID)", "diff": ["-\tpublic NSArray internal_accessibilityActionNames(int childID) {", "-\t\t// The supported action list depends on the role played by the control.", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "-\t\tevent.childID = childID;", "-\t\tevent.detail = -1;", "-\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "-\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "-\t\t\tlistener.getRole(event);", "-\t\t// No accessible listener is overriding the role of the control, so let Cocoa return the default set for the control.", "-\t\tif (event.detail == -1) {", "-\t\t\treturn null;", "-\t\tif ((childID == ACC.CHILDID_SELF) && (actionNames != null)) {", "-\t\t\treturn retainedAutoreleased(actionNames);", "-\t\t", "-\t\tNSMutableArray returnValue = NSMutableArray.arrayWithCapacity(5);", "-\t\t", "-\t\tswitch (event.detail) {", "-\t\tcase ACC.ROLE_PUSHBUTTON:", "-\t\tcase ACC.ROLE_RADIOBUTTON:", "-\t\tcase ACC.ROLE_CHECKBUTTON:", "-\t\tcase ACC.ROLE_TABITEM:", "-\t\t\treturnValue.addObject(OS.NSAccessibilityPressAction);", "-\t\t\tbreak;", "-\t\tswitch (event.detail) {", "-\t\tcase ACC.ROLE_COMBOBOX:", "-\t\t\treturnValue.addObject(OS.NSAccessibilityConfirmAction);", "-\t\t\tbreak;", "-", "-\t\tif (childID == ACC.CHILDID_SELF) {", "-\t\t\tactionNames = returnValue;", "-\t\t\tactionNames.retain();", "-\t\t\treturn retainedAutoreleased(actionNames);", "-\t\t\t// Caller must retain if they want to hold on to it.", "-\t\t\treturn returnValue;", "+\t", "+\tpublic NSArray internal_accessibilityActionNames(int childID) {", "+\t\tif (accessibleActionListeners.size() > 0) {", "+\t\t\tAccessibleActionEvent event = new AccessibleActionEvent(this);", "+\t\t\tfor (int i = 0; i < accessibleActionListeners.size(); i++) {", "+\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(i);", "+\t\t\t\tlistener.getActionCount(event);", "+\t\t\t}", "+\t\t\tNSMutableArray array = NSMutableArray.arrayWithCapacity(event.count);", "+\t\t\tfor (int i = 0; i < event.count; i++) {", "+\t\t\t\tevent.index = i;", "+\t\t\t\tfor (int j = 0; j < accessibleActionListeners.size(); j++) {", "+\t\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(j);", "+\t\t\t\t\tlistener.getName(event);", "+\t\t\t\t}", "+\t\t\t\tarray.addObject(NSString.stringWith(event.result));\t", "+\t\t\t}", "+\t\t\treturn array;", "+\t\t} else {", "+\t\t\t// The supported action list depends on the role played by the control.", "+\t\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tevent.detail = -1;", "+\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\tlistener.getRole(event);", "+\t\t\t}", "+\t", "+\t\t\t// No accessible listener is overriding the role of the control, so let Cocoa return the default set for the control.", "+\t\t\tif (event.detail == -1) {", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\t", "+\t\t\tif ((childID == ACC.CHILDID_SELF) && (actionNames != null)) {", "+\t\t\t\treturn retainedAutoreleased(actionNames);", "+\t\t\t}", "+\t\t\t", "+\t\t\tNSMutableArray returnValue = NSMutableArray.arrayWithCapacity(5);", "+\t\t\t", "+\t\t\tswitch (event.detail) {", "+\t\t\t\tcase ACC.ROLE_PUSHBUTTON:", "+\t\t\t\tcase ACC.ROLE_RADIOBUTTON:", "+\t\t\t\tcase ACC.ROLE_CHECKBUTTON:", "+\t\t\t\tcase ACC.ROLE_TABITEM:", "+\t\t\t\tcase ACC.ROLE_LINK:", "+\t\t\t\tcase ACC.ROLE_CHECK_MENU_ITEM:", "+\t\t\t\tcase ACC.ROLE_RADIO_MENU_ITEM:", "+\t\t\t\tcase ACC.ROLE_SPLITBUTTON:", "+\t\t\t\t\treturnValue.addObject(OS.NSAccessibilityPressAction);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ACC.ROLE_COMBOBOX:", "+\t\t\t\t\treturnValue.addObject(OS.NSAccessibilityConfirmAction);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ACC.ROLE_WINDOW:", "+\t\t\t\tcase ACC.ROLE_DIALOG:", "+//\t\t\t\t\tTODO", "+//\t\t\t\t\treturnValue.addObject(OS.NSAccessibilityRaiseAction);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t", "+\t", "+\t\t\tif (childID == ACC.CHILDID_SELF) {", "+\t\t\t\tactionNames = returnValue;", "+\t\t\t\tactionNames.retain();", "+\t\t\t\treturn retainedAutoreleased(actionNames);", "+\t\t\t} else {", "+\t\t\t\t// Caller must retain if they want to hold on to it.", "+\t\t\t\treturn returnValue;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaa77f19eef5abb5f90cf32e4ab79153", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 73, "signatureBeforeChange": " \t \tid getSelectedTextRangesAttribute (int childID)", "signatureAfterChange": " \t \tid getSelectedTextRangesAttribute (int childID)", "diff": ["-\t\tNSMutableArray returnValue = null; ", "-\t\tAccessibleTextEvent event = new AccessibleTextEvent(this);", "-\t\tevent.childID = childID;", "-\t\tevent.offset = -1;", "-\t\tevent.length = 0;", "-\t\t", "-\t\tfor (int i = 0; i < accessibleTextListeners.size(); i++) {", "-\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextListeners.elementAt(i);", "-\t\t\tlistener.getSelectionRange(event);", "+\t\tNSMutableArray returnValue = null;", "+\t\tif (accessibleTextExtendedListeners.size() > 0) {", "+\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "+\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "+\t\t\t\tlistener.getSelectionCount(event);", "+\t\t\t}", "+\t\t\tif (event.count > 0) {", "+\t\t\t\treturnValue = NSMutableArray.arrayWithCapacity(event.count);", "+\t\t\t\tfor (int i = 0; i < event.count; i++) {", "+\t\t\t\t\tevent.index = i;", "+\t\t\t\t\tfor (int j = 0; j < accessibleTextExtendedListeners.size(); j++) {", "+\t\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(j);", "+\t\t\t\t\t\tlistener.getSelection(event);", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\tNSRange range = new NSRange();", "+\t\t\t\t\trange.location = event.start;", "+\t\t\t\t\trange.length = event.end - event.start + 1;", "+\t\t\t\t\treturnValue.addObject(NSValue.valueWithRange(range));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tAccessibleTextEvent event = new AccessibleTextEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tevent.offset = -1;", "+\t\t\tevent.length = 0;", "+", "+\t\t\tfor (int i = 0; i < accessibleTextListeners.size(); i++) {", "+\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextListeners.elementAt(i);", "+\t\t\t\tlistener.getSelectionRange(event);", "+\t\t\t}", "+", "+\t\t\tif (event.offset != -1) {", "+\t\t\t\treturnValue = NSMutableArray.arrayWithCapacity(1);", "+\t\t\t\tNSRange range = new NSRange();", "+\t\t\t\trange.location = event.offset;", "+\t\t\t\trange.length = event.length;", "+\t\t\t\treturnValue.addObject(NSValue.valueWithRange(range));", "+\t\t\t}", "-\t\t", "-\t\tif (event.offset != -1) {", "-\t\t\treturnValue = NSMutableArray.arrayWithCapacity(1);", "-\t\t\tNSRange range = new NSRange();", "-\t\t\trange.location = event.offset;", "-\t\t\trange.length = event.length;", "-\t\t\treturnValue.addObject(NSValue.valueWithRange(range));", "-\t\t}", "-\t\t"]}], "num": 26417}
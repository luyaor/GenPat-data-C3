{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "430dba190c420c4d04775dabe583ce69", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc4e5fb1d1b01cafa433a92d752a11ed", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "815face9c5027040f3c7c99b10975d0bd5a29ae0", "commitAfterChange": "35a61cc1c43b28bcac378ce6ae2744f3a0935b9d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\t// Determine the height of the current font.", "-\t\t\tint [] currentPort = new int [1];", "-\t\t\tshort themeFont = (short) defaultThemeFont ();", "-\t\t\tif (font != null) {", "-\t\t\t\tthemeFont = OS.kThemeCurrentPortFont;", "-\t\t\t\tOS.GetPort (currentPort);", "-\t\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "-\t\t\t\tOS.TextFont (font.id);", "-\t\t\t\tOS.TextFace (font.style);", "-\t\t\t\tOS.TextSize (font.size);", "-\t\t\t}", "-\t\t\tFontInfo info = new FontInfo ();", "-\t\t\tOS.GetFontInfo (info);", "-\t\t\theight = info.ascent + info.descent;", "-\t\t\t", "-\t\t\t// Max with the height of the up/down buttons.", "-\t\t\tint [] metric = new int [1];", "-\t\t\tOS.GetThemeMetric (OS.kThemeMetricLittleArrowsHeight, metric);", "-\t\t\theight = Math.max (height, metric [0]);", "-\t\t\t", "-\t\t\t// Determine the width of the date or time string in the current font.", "-\t\t\t// TODO: All of these strings need to be locale-specific", "-\t\t\tString string = (style & SWT.SHORT) != 0 ? \"00/0000\" : \"00/00/0000\";", "-\t\t\tif ((style & SWT.TIME) != 0) string = (style & SWT.SHORT) != 0 ? \"00:00 AM\" : \"00:00:00 AM\";", "-\t\t\t", "-\t\t\tchar [] buffer = new char [string.length ()];", "-\t\t\tstring.getChars (0, buffer.length, buffer, 0);", "-\t\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tOS.GetThemeTextDimensions (ptr, themeFont, OS.kThemeStateActive, false, ioBounds, null);", "-\t\t\t\twidth = Math.max (width, ioBounds.h);", "-\t\t\t\theight = Math.max (height, ioBounds.v);", "-\t\t\t\tOS.CFRelease (ptr);", "-\t\t\t}", "-\t\t\tif (font != null) {", "-\t\t\t\tOS.SetPort (currentPort [0]);", "-\t\t\t}", "-\t\t\t", "-\t\t\t// Add the width of the up/down buttons.", "-\t\t\tOS.GetThemeMetric (OS.kThemeMetricLittleArrowsWidth, metric);", "-\t\t\twidth += metric [0];", "-\t\t\t", "-\t\t\t// Add the margin between the text and the buttons.", "-\t\t\tOS.GetThemeMetric (OS.kThemeMetricEditTextWhitespace, metric);", "-\t\t\twidth += metric [0] * 4;", "+\t\t\tRect rect = new Rect ();", "+\t\t\tOS.GetBestControlRect (handle, rect, null);", "+\t\t\twidth = rect.right - rect.left;", "+\t\t\theight = rect.bottom - rect.top;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdc3df688d0aea07fbff4ea225cdf8f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "282b9b6af8b479272175bca6f47c01c481707c5e", "commitAfterChange": "f251d3c2f248ab6b3e9e49fbef6c116097cbdf4f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\t// TODO: get the height of the current font", "-\t\t\theight = 20;", "-\t\t\t// TODO: max with the height of the up/down buttons", "-\t\t\tint upDownHeight = 24;", "-\t\t\theight = Math.max (height, upDownHeight);", "+\t\t\t// Determine the height of the current font.", "+\t\t\tint [] currentPort = new int [1];", "+\t\t\tshort themeFont = (short) defaultThemeFont ();", "+\t\t\tif (font != null) {", "+\t\t\t\tthemeFont = OS.kThemeCurrentPortFont;", "+\t\t\t\tOS.GetPort (currentPort);", "+\t\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\t\t\tOS.TextFont (font.id);", "+\t\t\t\tOS.TextFace (font.style);", "+\t\t\t\tOS.TextSize (font.size);", "+\t\t\t}", "+\t\t\tFontInfo info = new FontInfo ();", "+\t\t\tOS.GetFontInfo (info);", "+\t\t\theight = info.ascent + info.descent;", "-\t\t\t// TODO: determine the stringWidth of date or time string in current font (take code from GC)", "-\t\t\tString string = \"00/00/0000\"; // TODO: these strings should be locale-specific", "-\t\t\tif ((style & SWT.TIME) != 0) string = \"00:00:00 AM\";", "-\t\t\tGC gc = new GC(this);", "-\t\t\twidth = gc.stringExtent(string).x;", "-\t\t\tgc.dispose();", "-\t\t\t// TODO: max with the height of the up/down buttons (maybe plus some margin?)", "-\t\t\tint upDownWidth = 20;", "-\t\t\twidth += upDownWidth + 5; // MARGIN", "+\t\t\t// Max with the height of the up/down buttons.", "+\t\t\tint [] metric = new int [1];", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricLittleArrowsHeight, metric);", "+\t\t\theight = Math.max (height, metric [0]);", "+\t\t\t", "+\t\t\t// Determine the width of the date or time string in the current font.", "+\t\t\t// TODO: All of these strings need to be locale-specific", "+\t\t\tString string = (style & SWT.SHORT) != 0 ? \"00/0000\" : \"00/00/0000\";", "+\t\t\tif ((style & SWT.TIME) != 0) string = (style & SWT.SHORT) != 0 ? \"00:00 AM\" : \"00:00:00 AM\";", "+\t\t\t", "+\t\t\tchar [] buffer = new char [string.length ()];", "+\t\t\tstring.getChars (0, buffer.length, buffer, 0);", "+\t\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tOS.GetThemeTextDimensions (ptr, themeFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t\t\twidth = Math.max (width, ioBounds.h);", "+\t\t\t\theight = Math.max (height, ioBounds.v);", "+\t\t\t\tOS.CFRelease (ptr);", "+\t\t\t}", "+\t\t\tif (font != null) {", "+\t\t\t\tOS.SetPort (currentPort [0]);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// Add the width of the up/down buttons.", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricLittleArrowsWidth, metric);", "+\t\t\twidth += metric [0];", "+\t\t\t", "+\t\t\t// Add the margin between the text and the buttons.", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricEditTextWhitespace, metric);", "+\t\t\twidth += metric [0] * 4;"]}], "num": 39674}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5ab8b47be2520ca2b5d78d1cf9b214d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec74e946bcca7508c5e74b6bfd88f76a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d4eb14ad4f7b1074d4935c2b9211f94b2750616d", "commitAfterChange": "7d562ae8941ad5655a314eac8dd19e3b2aaef50c", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "signatureAfterChange": "\r public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "diff": ["-\tfinal int hHeap = OS.GetProcessHeap();\r", "-\tfinal int pMesh = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY,\r", "-\t\tGRADIENT_RECT.sizeof + TRIVERTEX.sizeof * 2);\r", "-\tfinal int pVertex = pMesh + GRADIENT_RECT.sizeof;\r", "-\r", "-\tGRADIENT_RECT gradientRect = new GRADIENT_RECT();\r", "-\tgradientRect.UpperLeft = 0;\r", "-\tgradientRect.LowerRight = 1;\r", "-\tOS.MoveMemory(pMesh, gradientRect, gradientRect.sizeof);\r", "-\r", "-\tTRIVERTEX trivertex = new TRIVERTEX();\r", "-\ttrivertex.x = x;\r", "-\ttrivertex.y = y;\r", "-\ttrivertex.Red = (short)((fromRGB.red << 8) | fromRGB.red);\r", "-\ttrivertex.Green = (short)((fromRGB.green << 8) | fromRGB.green);\r", "-\ttrivertex.Blue = (short)((fromRGB.blue << 8) | fromRGB.blue);\r", "-\ttrivertex.Alpha = -1;\r", "-\tOS.MoveMemory(pVertex, trivertex, TRIVERTEX.sizeof);\r", "+\tif (!OS.IsWinCE) {\r", "+\t\tfinal int hHeap = OS.GetProcessHeap();\r", "+\t\tfinal int pMesh = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY,\r", "+\t\t\tGRADIENT_RECT.sizeof + TRIVERTEX.sizeof * 2);\r", "+\t\tfinal int pVertex = pMesh + GRADIENT_RECT.sizeof;\r", "-\ttrivertex.x = x + width;\r", "-\ttrivertex.y = y + height;\r", "-\ttrivertex.Red = (short)((toRGB.red << 8) | toRGB.red);\r", "-\ttrivertex.Green = (short)((toRGB.green << 8) | toRGB.green);\r", "-\ttrivertex.Blue = (short)((toRGB.blue << 8) | toRGB.blue);\r", "-\ttrivertex.Alpha = -1;\r", "-\tOS.MoveMemory(pVertex + TRIVERTEX.sizeof, trivertex, TRIVERTEX.sizeof);\r", "-\r", "-\tboolean success = OS.GradientFill(handle, pVertex, 2, pMesh, 1,\r", "-\t\tvertical ? OS.GRADIENT_FILL_RECT_V : OS.GRADIENT_FILL_RECT_H);\r", "-\tOS.HeapFree(hHeap, 0, pMesh);\r", "-\tif (success) return;\r", "+\t\tGRADIENT_RECT gradientRect = new GRADIENT_RECT();\r", "+\t\tgradientRect.UpperLeft = 0;\r", "+\t\tgradientRect.LowerRight = 1;\r", "+\t\tOS.MoveMemory(pMesh, gradientRect, gradientRect.sizeof);\r", "+\t\r", "+\t\tTRIVERTEX trivertex = new TRIVERTEX();\r", "+\t\ttrivertex.x = x;\r", "+\t\ttrivertex.y = y;\r", "+\t\ttrivertex.Red = (short)((fromRGB.red << 8) | fromRGB.red);\r", "+\t\ttrivertex.Green = (short)((fromRGB.green << 8) | fromRGB.green);\r", "+\t\ttrivertex.Blue = (short)((fromRGB.blue << 8) | fromRGB.blue);\r", "+\t\ttrivertex.Alpha = -1;\r", "+\t\tOS.MoveMemory(pVertex, trivertex, TRIVERTEX.sizeof);\r", "+\t\t\r", "+\t\ttrivertex.x = x + width;\r", "+\t\ttrivertex.y = y + height;\r", "+\t\ttrivertex.Red = (short)((toRGB.red << 8) | toRGB.red);\r", "+\t\ttrivertex.Green = (short)((toRGB.green << 8) | toRGB.green);\r", "+\t\ttrivertex.Blue = (short)((toRGB.blue << 8) | toRGB.blue);\r", "+\t\ttrivertex.Alpha = -1;\r", "+\t\tOS.MoveMemory(pVertex + TRIVERTEX.sizeof, trivertex, TRIVERTEX.sizeof);\r", "+\t\r", "+\t\tboolean success = OS.GradientFill(handle, pVertex, 2, pMesh, 1,\r", "+\t\t\tvertical ? OS.GRADIENT_FILL_RECT_V : OS.GRADIENT_FILL_RECT_H);\r", "+\t\tOS.HeapFree(hHeap, 0, pMesh);\r", "+\t\tif (success) return;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b78fabb240313bbed59cbde625c5919", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "5291fb5ab98b8edb9d85f8aabfcd8636dd2d27f5", "commitAfterChange": "68eede6cc61dccf58685c545d1d833d2102b72d0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void setMenu (Menu menu)", "signatureAfterChange": " public void setMenu (Menu menu)", "diff": ["+\t\tboolean success = false;", "+\t\t", "+\t\t/*", "+\t\t* Bug in Windows.  When GetMenuItemInfo() is used to get the text,", "+\t\t* for an item that has a bitmap set using MIIM_BITMAP, the text is", "+\t\t* not returned.  This means that when SetMenuItemInfo() is used to", "+\t\t* set the submenu and the current menu state, the text is lost.", "+\t\t* The fix is to temporarily remove the bitmap and restore it after", "+\t\t* the text and submenu have been set.", "+\t\t*/", "+\t\tif (!OS.IsWinCE) {", "+\t\t\tif ((OS.WIN32_MAJOR << 16 | OS.WIN32_MINOR) >= (4 << 16 | 10)) {", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tinfo.fMask = OS.MIIM_BITMAP;", "+\t\t\t\t\tinfo.hbmpItem = 0;", "+\t\t\t\t\tsuccess = OS.SetMenuItemInfo (hMenu, id, false, info);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\tboolean success = OS.GetMenuItemInfo (hMenu, index, true, info);", "+\t\tsuccess = OS.GetMenuItemInfo (hMenu, index, true, info);", "-\t\t\t* On WinCE, InsertMenuItem is not available.  SetMenuItemInfo", "-\t\t\t* does not set the menu item state and submenu use InsertMenu", "-\t\t\t* to set these fields and SetMenuItemInfo to set the menu item", "-\t\t\t* data.  NOTE: SetMenuItemInfo is also used to set the string", "-\t\t\t* that was queried from the original menu item.", "+\t\t\t* On WinCE, InsertMenuItem() is not available.  The fix is to", "+\t\t\t* use SetMenuItemInfo() but this call does not set the menu item", "+\t\t\t* state and submenu.  The fix is to use InsertMenu() to insert", "+\t\t\t* the item, SetMenuItemInfo() to set the string and EnableMenuItem()", "+\t\t\t* and CheckMenuItem() to set the state.", "-\t\t\tTCHAR lpNewItem = new TCHAR (0, \"\", true);", "+\t\t\tTCHAR lpNewItem = new TCHAR (0, \" \", true);", "+\t\t\t/*", "+\t\t\t* Restore the bitmap that was removed to work around a problem", "+\t\t\t* in GetMenuItemInfo() and menu items that have bitmaps set with", "+\t\t\t* MIIM_BITMAP.", "+\t\t\t*/", "+\t\t\tif ((OS.WIN32_MAJOR << 16 | OS.WIN32_MINOR) >= (4 << 16 | 10)) {", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tinfo.fMask = OS.MIIM_BITMAP;", "+\t\t\t\t\tinfo.hbmpItem = OS.HBMMENU_CALLBACK;", "+\t\t\t\t\tsuccess = OS.SetMenuItemInfo (hMenu, id, false, info);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}], "num": 34212}
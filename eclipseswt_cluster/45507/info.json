{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "046ebca8fa93a2496213a5a84795fcd2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b61586ce48d015699197f491c5fe91ff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/datetime/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "a3eb8313e949f9cb4d7d769018cd74a5e335546c", "commitAfterChange": "9557ec5f83857c038e16871230af1bc8baa0d33e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public DateTime(Composite parent, int style)", "signatureAfterChange": "  public DateTime(Composite parent, int style)", "diff": ["-\tsuper(parent, checkStyle (style) | SWT.NO_REDRAW_RESIZE | (((style & SWT.CALENDAR) != 0)? 0 : SWT.BORDER));", "+\tsuper(parent, checkStyle(style) | SWT.NO_REDRAW_RESIZE | (((style & SWT.CALENDAR) != 0)? 0 : SWT.BORDER));", "-\tListener listener = new Listener() {", "-\t\tpublic void handleEvent(Event e) {", "-\t\t\tDateTime.this.handleEvent(e);", "-\t\t}", "-\t};", "+\t\tListener listener = new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tswitch(event.type) {", "+\t\t\t\t\tcase SWT.Paint:\t\thandlePaint(event); break;", "+\t\t\t\t\tcase SWT.Resize:\thandleResize(event); break;", "+\t\t\t\t\tcase SWT.MouseDown:\thandleMouseDown(event); break;", "+\t\t\t\t\tcase SWT.KeyDown:\thandleKeyDown(event); break;", "+\t\t\t\t\tcase SWT.Traverse:\thandleTraverse(event); break;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\taddListener(SWT.MouseDown, listener);", "-\t\taddListener(SWT.MouseDown, listener);", "-\t\tmonthDown = new Button(this, SWT.ARROW | SWT.LEFT);", "-\t\tmonthUp = new Button(this, SWT.ARROW | SWT.RIGHT);", "+\t\t// TODO: move tooltip strings to .properties", "+\t\tyearDown.setToolTipText(\"Last Year\");", "+\t\tmonthDown = new Button(this, SWT.ARROW | SWT.LEFT);", "+\t\tmonthDown.setToolTipText(\"Last Month\");", "+\t\tmonthUp = new Button(this, SWT.ARROW | SWT.RIGHT);", "+\t\tmonthUp.setToolTipText(\"Next Month\");", "+\t\tyearUp.setToolTipText(\"Next Year\");", "+\t\tlistener = new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tswitch(event.type) {", "+\t\t\t\t\tcase SWT.Selection: handleSelection(event); break;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\tyearDown.addListener(SWT.Selection, listener);", "-\t\tyearDown.addListener(SWT.Selection, listener);", "+\t\t// TODO: add accessibility - hmmm... win32 calendar is not accessible... but text guys are...", "-\t\tif ((this.style & SWT.TIME) != 0) {", "-\t\t\tint h = calendar.get(Calendar.HOUR);", "-\t\t\tint m = calendar.get(Calendar.MINUTE);", "-\t\t\tint s = calendar.get(Calendar.SECOND);", "-\t\t\tint a = calendar.get(Calendar.AM_PM);", "-\t\t\ttext.setText(\"\" + (h < 10 ? \"0\" : \"\") + h + \":\" + (m < 10 ? \"0\" : \"\") + m + \":\" + (s < 10 ? \"0\" : \"\") + s + \" \" + (a == Calendar.AM ? \"AM\" : \"PM\"));", "-\t\t} else { /* SWT.DATE */", "-\t\t\tint y = calendar.get(Calendar.YEAR);", "-\t\t\tint m = calendar.get(Calendar.MONTH);", "-\t\t\tint d = calendar.get(Calendar.DATE);", "-\t\t\ttext.setText(\"\" + (m < 10 ? \"0\" : \"\") + m + \"/\" + (d < 10 ? \"0\" : \"\") + d + \"/\" + y);", "-\t\t}", "+\t\tsetFormat((this.style == SWT.DATE ? defaultDateFormat : defaultTimeFormat));", "+\t\ttext.setText(getComputeSizeString(this.style));", "+\t\tListener listener = new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tswitch(event.type) {", "+\t\t\t\t\tcase SWT.KeyDown: onKeyDown(event); break;", "+\t\t\t\t\tcase SWT.FocusIn: onFocusIn(event); break;", "+\t\t\t\t\tcase SWT.FocusOut: onFocusOut(event); break;", "+\t\t\t\t\tcase SWT.MouseDown: onMouseClick(event); break;", "+\t\t\t\t\tcase SWT.MouseUp: onMouseClick(event); break;", "+\t\t\t\t\tcase SWT.Verify: onVerify(event); break;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\ttext.addListener(SWT.KeyDown, listener);", "+\t\ttext.addListener(SWT.FocusIn, listener);", "+\t\ttext.addListener(SWT.FocusOut, listener);", "+\t\ttext.addListener(SWT.MouseDown, listener);", "+\t\ttext.addListener(SWT.MouseUp, listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a155c3bb9ef364b17cc5d7279bb5e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "d99830b9dc889f9a89bda98cdd4a92b116044815", "commitAfterChange": "beca6310b5a08f08f4d4efeb88b832d208de8eb6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public DateTime (Composite parent, int style)", "signatureAfterChange": "  public DateTime (Composite parent, int style)", "diff": ["+", "+\tif ((this.style & SWT.CALENDAR) == 0) {", "+\t\t/* SWT.DATE and SWT.TIME */", "+\t\tcalendar = Calendar.getInstance();", "+\t\tformatSymbols = new DateFormatSymbols();", "+\t\ttext = new Text(this, SWT.SINGLE);", "+\t\tsetFormat((this.style == SWT.DATE ? defaultDateFormat : defaultTimeFormat));", "+\t\ttext.setText(getFormattedString(this.style));", "+\t\tListener listener = new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tswitch(event.type) {", "+\t\t\t\t\tcase SWT.KeyDown: onKeyDown(event); break;", "+\t\t\t\t\tcase SWT.FocusIn: onFocusIn(event); break;", "+\t\t\t\t\tcase SWT.FocusOut: onFocusOut(event); break;", "+\t\t\t\t\tcase SWT.MouseDown: onMouseClick(event); break;", "+\t\t\t\t\tcase SWT.MouseUp: onMouseClick(event); break;", "+\t\t\t\t\tcase SWT.Verify: onVerify(event); break;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\ttext.addListener(SWT.KeyDown, listener);", "+\t\ttext.addListener(SWT.FocusIn, listener);", "+\t\ttext.addListener(SWT.FocusOut, listener);", "+\t\ttext.addListener(SWT.MouseDown, listener);", "+\t\ttext.addListener(SWT.MouseUp, listener);", "+\t\ttext.addListener(SWT.Verify, listener);", "+\t\tup = new Button(this, SWT.ARROW | SWT.UP);", "+\t\t//up.setToolTipText(SWT.getMessage (\"SWT_Up\")); //$NON-NLS-1$", "+\t\tdown = new Button(this, SWT.ARROW | SWT.DOWN);", "+\t\t//down.setToolTipText(SWT.getMessage (\"SWT_Down\")); //$NON-NLS-1$", "+\t\tup.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tincrementField(+1);", "+\t\t\t\ttext.setFocus();", "+\t\t\t}", "+\t\t});", "+\t\tdown.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tincrementField(-1);", "+\t\t\t\ttext.setFocus();", "+\t\t\t}", "+\t\t});", "+\t\taddListener(SWT.Resize, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tonResize(event);", "+\t\t\t}", "+\t\t});", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c299720856b0941ebc3396d0d422cf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "9261515ec8255f5a441ba43146e123e19181d535", "commitAfterChange": "a1fedece41e31e9553bf3e514c2a2564f31a9dec", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public DateTime (Composite parent, int style)", "signatureAfterChange": " public DateTime (Composite parent, int style)", "diff": ["-\t\tcreateText((this.style & SWT.DROP_DOWN) != 0);", "-\t}", "-\tinitAccessible ();", "-}", "+\t\tcalendar = Calendar.getInstance();", "+\t\tformatSymbols = new DateFormatSymbols();", "+\t\ttext = new Text(this, SWT.SINGLE);", "+\t\t/* disable the native drag and drop for the date/time text field */", "+\t\tOS.gtk_drag_dest_unset(text.handle);", "+\t\tif ((this.style & SWT.DATE) != 0) {", "+\t\t\tsetFormat((this.style & SWT.SHORT) != 0 ? DEFAULT_SHORT_DATE_FORMAT : (this.style & SWT.LONG) != 0 ? DEFAULT_LONG_DATE_FORMAT : DEFAULT_MEDIUM_DATE_FORMAT);", "+\t\t} else { // SWT.TIME", "+\t\t\tsetFormat((this.style & SWT.SHORT) != 0 ? DEFAULT_SHORT_TIME_FORMAT : (this.style & SWT.LONG) != 0 ? DEFAULT_LONG_TIME_FORMAT : DEFAULT_MEDIUM_TIME_FORMAT);", "+\t\ttext.setText(getFormattedString(this.style));", "+\t\tListener listener = new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tswitch(event.type) {", "+\t\t\t\t\tcase SWT.KeyDown: onKeyDown(event); break;", "+\t\t\t\t\tcase SWT.FocusIn: onFocusIn(event); break;", "+\t\t\t\t\tcase SWT.FocusOut: onFocusOut(event); break;", "+\t\t\t\t\tcase SWT.MouseDown: onMouseClick(event); break;", "+\t\t\t\t\tcase SWT.MouseUp: onMouseClick(event); break;", "+\t\t\t\t\tcase SWT.Verify: onVerify(event); break;", "+\t\t\t\t}", "+\t\t};", "+\t\ttext.addListener(SWT.KeyDown, listener);", "+\t\ttext.addListener(SWT.FocusIn, listener);", "+\t\ttext.addListener(SWT.FocusOut, listener);", "+\t\ttext.addListener(SWT.MouseDown, listener);", "+\t\ttext.addListener(SWT.MouseUp, listener);", "+\t\ttext.addListener(SWT.Verify, listener);", "+\t\taddListener(SWT.Resize, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tonResize(event);", "+\t\t\t}", "+\t\t});"]}], "num": 45507}
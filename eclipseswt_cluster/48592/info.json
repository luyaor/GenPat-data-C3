{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b14ed0f694ead61ee8f9d47d088160c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa603e917a9881ca3bfac869cc8e0ca2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "e36b8bd87f3c0cb0244bfa422034d4e8a40488f5", "commitAfterChange": "66a1a42306555d1bc99e8fa27a27656a65ca8332", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": "  boolean setScrollWidth (TableItem item, boolean force)", "signatureAfterChange": "  boolean setScrollWidth (TableItem item, boolean force)", "diff": ["+", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  When LVM_SETCOLUMNWIDTH is sent,", "-\t\t\t* Windows draws right away instead of queuing a WM_PAINT.", "-\t\t\t* This can cause recursive calls when called from paint", "-\t\t\t* or from messages that are retrieving the item data,", "-\t\t\t* such as WM_NOTIFY, causing a stack overflow.  The fix", "-\t\t\t* is to turn off redraw and queue a repaint, collapsing", "-\t\t\t* the recursive calls.", "-\t\t\t*/", "-\t\t\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);", "-\t\t\tif (redraw) OS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, newWidth);", "-\t\t\tif (redraw) {", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "-\t\t\t\tif (OS.IsWinCE) {", "-\t\t\t\t\tint /*long*/ hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);\t", "-\t\t\t\t\tif (hwndHeader != 0) OS.InvalidateRect (hwndHeader, null, true);", "-\t\t\t\t\tOS.InvalidateRect (handle, null, true);", "-\t\t\t\t} else {", "-\t\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "-\t\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tsetScrollWidth (newWidth);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea372d3e8b4dca57db0c4cf5339ac618", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "e36b8bd87f3c0cb0244bfa422034d4e8a40488f5", "commitAfterChange": "66a1a42306555d1bc99e8fa27a27656a65ca8332", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "  boolean setScrollWidth (TableItem item, boolean force)", "signatureAfterChange": "  void setScrollWidth (int width)", "diff": ["+void setScrollWidth (int width) {", "+\tif (width != (int)/*64*/OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0)) {", "+\t\t/*", "+\t\t* Feature in Windows.  When LVM_SETCOLUMNWIDTH is sent,", "+\t\t* Windows draws right away instead of queuing a WM_PAINT.", "+\t\t* This can cause recursive calls when called from paint", "+\t\t* or from messages that are retrieving the item data,", "+\t\t* such as WM_NOTIFY, causing a stack overflow.  The fix", "+\t\t* is to turn off redraw and queue a repaint, collapsing", "+\t\t* the recursive calls.", "+\t\t*/", "+\t\tboolean redraw = false;", "+\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\tredraw = drawCount == 0 && OS.IsWindowVisible (handle);", "+\t\t}", "+\t\tif (redraw) OS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, width);", "+\t\tif (redraw) {", "+\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\tif (OS.IsWinCE) {", "+\t\t\t\tint /*long*/ hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);\t", "+\t\t\t\tif (hwndHeader != 0) OS.InvalidateRect (hwndHeader, null, true);", "+\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t} else {", "+\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "+\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "+\t\t\t}", "+\t\t}", "+\t}", "+}", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  When LVM_SETCOLUMNWIDTH is sent,", "-\t\t\t* Windows draws right away instead of queuing a WM_PAINT.", "-\t\t\t* This can cause recursive calls when called from paint", "-\t\t\t* or from messages that are retrieving the item data,", "-\t\t\t* such as WM_NOTIFY, causing a stack overflow.  The fix", "-\t\t\t* is to turn off redraw and queue a repaint, collapsing", "-\t\t\t* the recursive calls.", "-\t\t\t*/", "-\t\t\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);", "-\t\t\tif (redraw) OS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, newWidth);", "-\t\t\tif (redraw) {", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "-\t\t\t\tif (OS.IsWinCE) {", "-\t\t\t\t\tint /*long*/ hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);\t", "-\t\t\t\t\tif (hwndHeader != 0) OS.InvalidateRect (hwndHeader, null, true);", "-\t\t\t\t\tOS.InvalidateRect (handle, null, true);", "-\t\t\t\t} else {", "-\t\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "-\t\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "-\t\t\t\t}", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3375780a9c1d515fff90f201e9564c9c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "de70a0667de50f6f7db613d0fe91d2d42e704047", "commitAfterChange": "16d3df9b450bcf2b246d26812b5f119f6c95deb4", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  boolean setScrollWidth (TableItem item, boolean force)", "signatureAfterChange": "  boolean setScrollWidth (TableItem item, boolean force)", "diff": ["+\t\t\t/*", "+\t\t\t* Feature in Windows.  When LVM_SETCOLUMNWIDTH is sent,", "+\t\t\t* Windows draws right away instead of queuing a WM_PAINT.", "+\t\t\t* This can cause recursive calls when called from paint", "+\t\t\t* or from messages that are retrieving the item data,", "+\t\t\t* such as WM_NOTIFY, causing a stack overflow.  The fix", "+\t\t\t* is to turn off redraw and queue a repaint, collapsing", "+\t\t\t* the recursive calls.", "+\t\t\t*/", "+\t\t\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);", "+\t\t\tif (redraw) OS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\t\tif (redraw) {", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);\t", "+\t\t\t\t\tif (hwndHeader != 0) OS.InvalidateRect (hwndHeader, null, true);", "+\t\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t\t} else {", "+\t\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "+\t\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 48592}
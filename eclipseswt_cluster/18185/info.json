{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3f2e89d9d77633c2e786d60bd1912ce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dbcfe7ce0e8c85c2a35fcdceb3558a6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Combo.java", "commitBeforeChange": "06cfb2472f7282169dadc570fa0ea5af36fdf8fd", "commitAfterChange": "958d022d9eb894b2a4d737dc59c9428f430b1c30", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void test_addModifyListenerLorg_eclipse_swt_events_ModifyListener()", "signatureAfterChange": "  public void test_addModifyListenerLorg_eclipse_swt_events_ModifyListener()", "diff": ["-\twarnUnimpl(\"Test test_addModifyListenerLorg_eclipse_swt_events_ModifyListener not written\");", "+\tboolean exceptionThrown = false;", "+\tModifyListener listener = new ModifyListener() {", "+\t\tpublic void modifyText(ModifyEvent event) {", "+\t\t\tlistenerCalled = true;", "+\t\t}", "+\t};", "+\ttry {", "+\t\tcombo.addModifyListener(null);", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t}", "+\tassertTrue(\"Expected exception not thrown\", exceptionThrown);", "+\t", "+\t// test whether all content modifying API methods send a Modify event\t", "+\tcombo.addModifyListener(listener);", "+\tlistenerCalled = false;", "+\tcombo.setText(\"new text\");\t", "+\tassertTrue(\"setText does not send event\", listenerCalled);", "+", "+\tlistenerCalled = false;\t", "+\tcombo.removeModifyListener(listener);", "+\t// cause to call the listener. ", "+\tcombo.setText(\"line\");\t", "+\tassertTrue(\"Listener not removed\", listenerCalled == false);", "+\ttry {", "+\t\tcombo.removeModifyListener(null);", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51117cd094078373f09a89865c188f4e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Text.java", "commitBeforeChange": "06cfb2472f7282169dadc570fa0ea5af36fdf8fd", "commitAfterChange": "958d022d9eb894b2a4d737dc59c9428f430b1c30", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void test_addModifyListenerLorg_eclipse_swt_events_ModifyListener()", "signatureAfterChange": "  public void test_addModifyListenerLorg_eclipse_swt_events_ModifyListener()", "diff": ["-\twarnUnimpl(\"Test test_addModifyListenerLorg_eclipse_swt_events_ModifyListener not written\");", "+\tboolean exceptionThrown = false;", "+\tModifyListener listener = new ModifyListener() {", "+\t\tpublic void modifyText(ModifyEvent event) {", "+\t\t\tlistenerCalled = true;", "+\t\t}", "+\t};", "+\ttry {", "+\t\ttext.addModifyListener(null);", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t}", "+\tassertTrue(\"Expected exception not thrown\", exceptionThrown);", "+\t", "+\t// test whether all content modifying API methods send a Modify event\t", "+\ttext.addModifyListener(listener);", "+\tlistenerCalled = false;", "+\ttext.setText(\"new text\");\t", "+\tassertTrue(\"setText does not send event\", listenerCalled);", "+", "+\tlistenerCalled = false;\t", "+\ttext.removeModifyListener(listener);", "+\t// cause to call the listener. ", "+\ttext.setText(\"line\");\t", "+\tassertTrue(\"Listener not removed\", listenerCalled == false);", "+\ttry {", "+\t\ttext.removeModifyListener(null);", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t}"]}], "num": 18185}
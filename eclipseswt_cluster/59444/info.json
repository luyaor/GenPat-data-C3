{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "badfbbfba07833e1efc939f39ce0be86", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31af9deb6aafea4798fd71b16b6c9cf8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+", "-\tint border = getBorderWidth ();", "-\t", "-\t\t\twidth += DEFAULT_WIDTH;", "-\t\t\theight += 3;", "+\t\t\twidth = DEFAULT_WIDTH;", "+\t\t\theight = 3;", "-\t\t\twidth += 3;", "-\t\t\theight += DEFAULT_HEIGHT;", "+\t\t\twidth = 3;", "+\t\t\theight = DEFAULT_HEIGHT;", "-\t\tif (image != null) {", "+\t\tif (isImage && image != null) {", "-\t\t\twidth= r.width;", "-\t\t\theight= r.height;", "+\t\t\twidth = r.width;", "+\t\t\theight = r.height;", "-\t\t\tshort[] bounds= new short[2];", "-\t\t\tshort[] baseLine= new short[1];", "-\t\t\tboolean wrap= false;", "-\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "-\t\t\t\twrap= true;", "-\t\t\t\tbounds[1]= (short) wHint;\t// If we are wrapping text, calculate the height based on wHint.", "+\t\t\tint [] ptr = new int [1];", "+\t\t\tint [] actualSize = new int [1];", "+\t\t\tOS.GetControlData (handle, (short)0 , OS.kControlStaticTextCFStringTag, 4, ptr, actualSize);", "+\t\t\tif (ptr [0] != 0) {", "+\t\t\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\tshort [] baseLine = new short [1];", "+\t\t\t\tboolean wrap = false;", "+\t\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "+\t\t\t\t\twrap = true;", "+\t\t\t\t\tbounds.h = (short) wHint;", "+\t\t\t\t}", "+\t\t\t\t// NEEDS work - only works for default font", "+\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "+\t\t\t\twidth = bounds.h;", "+\t\t\t\theight = bounds.v;", "+\t\t\t\tOS.CFRelease (ptr [0]);", "+\t\t\t} else {", "+\t\t\t\twidth = DEFAULT_WIDTH;", "+\t\t\t\theight = DEFAULT_HEIGHT;", "-\t\t\tint sHandle= OS.CFStringCreateWithCharacters(MacUtil.removeMnemonics(text));", "-\t\t\t\t\t", "-\t\t\tGC gc= new GC(this);", "-\t\t\tgc.installFont();", "-\t\t\tOS.GetThemeTextDimensions(sHandle, OS.kThemeCurrentPortFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "-\t\t\tgc.dispose();", "-\t\t\t", "-\t\t\tOS.CFRelease(sHandle);", "-\t\t\twidth = bounds[1];", "-\t\t\theight = bounds[0];", "-\t\t/*", "-\t\t* Feature in Motif. If a label's labelType is XmSTRING but it", "-\t\t* has no label set into it yet, recomputing the size will", "-\t\t* not take into account the height of the font, as we would", "-\t\t* like it to. Take care of this case.", "-\t\t*/", "-\t\t/* AW", "-\t\tif (text.length () == 0) {", "-\t\t\theight += getFontHeight ();", "-\t\t\twidth = 0;", "-\t\t}", "-\t\t*/", "-\treturn new Point (width + 2*border, height + 2*border);", "+\treturn new Point (width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10b0b4c0bac469925eede283f7682b74", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "a0a914aabdd6c9ea4ba2f1675deb8ba2ef639121", "commitAfterChange": "2fb2c5cc4e74544222c9d75539a0e1b05af67819", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\tint [] ptr = new int [1];", "-\t\t\tint [] actualSize = new int [1];", "-\t\t\tOS.GetControlData (handle, (short)0 , OS.kControlStaticTextCFStringTag, 4, ptr, actualSize);", "-\t\t\tif (ptr [0] != 0) {", "-\t\t\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\tshort [] baseLine = new short [1];", "-\t\t\t\tboolean wrap = false;", "-\t\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "-\t\t\t\t\twrap = true;", "-\t\t\t\t\tbounds.h = (short) wHint;", "+\t\t\twidth = DEFAULT_WIDTH;", "+\t\t\theight = DEFAULT_HEIGHT;", "+\t\t\tif (text.length () != 0) {", "+\t\t\t\tint [] ptr = new int [1];", "+\t\t\t\tint [] actualSize = new int [1];", "+\t\t\t\tOS.GetControlData (handle, (short)0 , OS.kControlStaticTextCFStringTag, 4, ptr, actualSize);", "+\t\t\t\tif (ptr [0] != 0) {", "+\t\t\t\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\t\tshort [] baseLine = new short [1];", "+\t\t\t\t\tboolean wrap = false;", "+\t\t\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "+\t\t\t\t\t\twrap = true;", "+\t\t\t\t\t\tbounds.h = (short) wHint;", "+\t\t\t\t\t}", "+\t\t\t\t\t// NEEDS work - only works for default font", "+\t\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "+\t\t\t\t\twidth = bounds.h;", "+\t\t\t\t\theight = bounds.v;", "+\t\t\t\t\tOS.CFRelease (ptr [0]);", "-\t\t\t\t// NEEDS work - only works for default font", "-\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "-\t\t\t\twidth = bounds.h;", "-\t\t\t\theight = bounds.v;", "-\t\t\t\tOS.CFRelease (ptr [0]);", "-\t\t\t\twidth = DEFAULT_WIDTH;", "-\t\t\t\theight = DEFAULT_HEIGHT;", "+\t\t\t\tFont font = getFont ();", "+\t\t\t\tFontInfo info = new FontInfo ();", "+\t\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "+\t\t\t\theight = info.ascent + info.descent;"]}], "num": 59444}
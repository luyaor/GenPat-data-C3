{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4d02e5c13080b2399b43fcbf01d5719", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d87f53f860964ad395b4e30545959c3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "461bbe3bacbad35dca1e9b918ce2ba5104de6626", "commitAfterChange": "bce4377f4f8501c77d053e6fbb8d3f50682ec39c", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 63, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tLineCache computeLineCache = lineCache;", "-\t\tif (wordWrap) {", "-\t\t\t// set non-wrapping content width calculator. Ensures ideal line width ", "-\t\t\t// that does not required wrapping. Fixes bug 31195.", "-\t\t\tcomputeLineCache = new ContentWidthCache(this, logicalContent);", "-\t\t\tif (!singleLine) {", "-\t\t\t\tcount = logicalContent.getLineCount();", "-\t\t\t}", "-\t\t}", "-\t\t// Only calculate what can actually be displayed.", "-\t\t// Do this because measuring each text line is a ", "-\t\t// time-consuming process.", "-\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);", "-\t\tcomputeLineCache.calculate(0, visibleCount);", "-\t\twidth = computeLineCache.getWidth() + leftMargin + rightMargin;", "-\t} else if (wordWrap && !singleLine) {", "-\t\t// calculate to wrap to width hint. Fixes bug 20377. ", "-\t\t// don't wrap live content. Fixes bug 38344.", "-\t\tWrappedContent2 wrappedContent = new WrappedContent2(renderer, logicalContent);", "-\t\twrappedContent.wrapLines(width);", "-\t\tcount = wrappedContent.getLineCount();", "+//\t\tLineCache computeLineCache = lineCache;", "+//\t\tif (wordWrap) {", "+//\t\t\t// set non-wrapping content width calculator. Ensures ideal line width ", "+//\t\t\t// that does not required wrapping. Fixes bug 31195.", "+//\t\t\tcomputeLineCache = new ContentWidthCache(this, logicalContent);", "+//\t\t\tif (!singleLine) {", "+//\t\t\t\tcount = logicalContent.getLineCount();", "+//\t\t\t}", "+//\t\t}", "+//\t\t// Only calculate what can actually be displayed.", "+//\t\t// Do this because measuring each text line is a ", "+//\t\t// time-consuming process.", "+//\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);", "+//\t\tcomputeLineCache.calculate(0, visibleCount);", "+//\t\twidth = computeLineCache.getWidth() + leftMargin + rightMargin;", "+//\t} else if (wordWrap && !singleLine) {", "+//\t\t// calculate to wrap to width hint. Fixes bug 20377. ", "+//\t\t// don't wrap live content. Fixes bug 38344.", "+//\t\tWrappedContent2 wrappedContent = new WrappedContent2(renderer, logicalContent);", "+//\t\twrappedContent.wrapLines(width);", "+//\t\tcount = wrappedContent.getLineCount();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fb2270c0c68cd2f925f0f6939426cb6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5ea894241bdcc58c29197c49437e9f90e533b426", "commitAfterChange": "4f5c07d6b4213f3b31b43ecb01a5561168782d78", "methodNumberBeforeChange": 268, "methodNumberAfterChange": 268, "signatureBeforeChange": " void setCaretImage(int direction)", "signatureAfterChange": " void setCaretImage(int direction)", "diff": ["-\tCaret caret = getCaret();", "-\t", "-\tif (caret == null || direction == caretDirection) {", "-\t\treturn;", "-\t}", "-\tboolean updateImage = true;", "-\tImage caretImage = caret.getImage();", "-\tif (caretImage != null) {", "-\t\tupdateImage = caretImage.equals(leftCaretBitmap) || caretImage.equals(rightCaretBitmap);", "-\t}", "-\tcaretDirection = direction;", "-\tif (direction == SWT.DEFAULT) {", "-\t\tif (updateImage) caret.setImage(null);", "-\t\tcaret.setSize(caret.getSize().x, lineHeight);", "-\t}", "-\telse", "-\tif (caretDirection == SWT.LEFT) {", "-\t\tif (updateImage) caret.setImage(leftCaretBitmap);", "-\t\tBidiUtil.setKeyboardLanguage(BidiUtil.KEYBOARD_NON_BIDI);", "-\t}", "-\telse", "-\tif (caretDirection == SWT.RIGHT) {", "-\t\tif (updateImage) caret.setImage(rightCaretBitmap);", "-\t\tBidiUtil.setKeyboardLanguage(BidiUtil.KEYBOARD_BIDI);", "+\tif (defaultCaret != null) {", "+\t\tif (direction == SWT.DEFAULT) {", "+\t\t\tdefaultCaret.setImage(null);", "+\t\t\tdefaultCaret.setSize(defaultCaret.getSize().x, lineHeight);", "+\t\t} else if (caretDirection == SWT.LEFT) {", "+\t\t\tdefaultCaret.setImage(leftCaretBitmap);", "+\t\t} else if (caretDirection == SWT.RIGHT) {", "+\t\t\tdefaultCaret.setImage(rightCaretBitmap);", "+\t\t}"]}], "num": 20781}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72ac2f45bdd85f81471ae27d590c2f23", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "665c2cd74d560d051fd342f24556a801", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "343b75b252db9492ace4c4e5bfb36016e631c7a5", "commitAfterChange": "f9f60d3142533c3eebff775e8eb1159935faaba1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private String getVisibilityScope(Set<String> modifiers)", "signatureAfterChange": "     private static String getVisibilityScope(Set<String> modifiers)", "diff": ["-    private String getVisibilityScope(Set<String> modifiers)", "+    private static String getVisibilityScope(Set<String> modifiers)", "-        final String[] explicitModifiers = {\"public\", \"private\", \"protected\"};", "-        for (final String candidate : explicitModifiers) {", "-            if (modifiers.contains(candidate)) {", "-                return candidate;", "+        String accessModifier = \"package\";", "+        for (final String modifier : EXPLICIT_MODS) {", "+            if (modifiers.contains(modifier)) {", "+                accessModifier = modifier;", "+                break;", "-        return \"package\";", "+        return accessModifier;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2df7f5241caa46ce5284dee15f56611", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/HeaderCheckTest.java", "commitBeforeChange": "2a71cac7e02c012add5e75f35aaf6aca7c561401", "commitAfterChange": "b8c558e473c0a9a75c41312e31df34b8572a271b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testNoHeader()         throws Exception", "signatureAfterChange": "      public void testNoHeader()         throws Exception", "diff": ["-        final String[] expected = {", "-            \"1: Unable to check header as missing lines to check.\"", "-        };", "-", "-        verify(checkConfig, getPath(\"InputScopeAnonInner.java\"), expected);", "+        try {", "+            createChecker(checkConfig);", "+            fail();", "+        }", "+        catch (CheckstyleException ex) {", "+            // expected exception", "+        }"]}]}
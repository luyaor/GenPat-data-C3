{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71c78d10782db5580109ef8e9a716db0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1355c05aa96ef686bf75adc219f587a1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static DetailAST getArrayTypeOrIdentifier(DetailAST aArrayDeclarator)", "signatureAfterChange": "     private static DetailAST getArrayTypeOrIdentifier(DetailAST arrayDeclarator)", "diff": ["-    private static DetailAST getArrayTypeOrIdentifier(DetailAST aArrayDeclarator)", "+    private static DetailAST getArrayTypeOrIdentifier(DetailAST arrayDeclarator)", "-        DetailAST typeOrIdent = aArrayDeclarator;", "-        if (isArrayInstantiation(aArrayDeclarator)) {", "-            typeOrIdent = aArrayDeclarator.getParent().getFirstChild();", "+        DetailAST typeOrIdent = arrayDeclarator;", "+        if (isArrayInstantiation(arrayDeclarator)) {", "+            typeOrIdent = arrayDeclarator.getParent().getFirstChild();", "-        else if (isMultiDimensionalArray(aArrayDeclarator)) {", "-            if (isCstyleMultiDimensionalArrayDeclaration(aArrayDeclarator)) {", "-                if (aArrayDeclarator.getParent().getType() != TokenTypes.ARRAY_DECLARATOR) {", "-                    typeOrIdent = getArrayIdentifier(aArrayDeclarator);", "+        else if (isMultiDimensionalArray(arrayDeclarator)) {", "+            if (isCstyleMultiDimensionalArrayDeclaration(arrayDeclarator)) {", "+                if (arrayDeclarator.getParent().getType() != TokenTypes.ARRAY_DECLARATOR) {", "+                    typeOrIdent = getArrayIdentifier(arrayDeclarator);", "-                DetailAST arrayIdentifier = aArrayDeclarator.getFirstChild();", "+                DetailAST arrayIdentifier = arrayDeclarator.getFirstChild();", "-            if (isCstyleArrayDeclaration(aArrayDeclarator)) {", "-                typeOrIdent = getArrayIdentifier(aArrayDeclarator);", "+            if (isCstyleArrayDeclaration(arrayDeclarator)) {", "+                typeOrIdent = getArrayIdentifier(arrayDeclarator);", "-                typeOrIdent = aArrayDeclarator.getFirstChild();", "+                typeOrIdent = arrayDeclarator.getFirstChild();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52bbc98f4dad58514632f59afff48c5e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void processVariable(DetailAST aAST)", "signatureAfterChange": "     private void processVariable(DetailAST ast)", "diff": ["-    private void processVariable(DetailAST aAST)", "+    private void processVariable(DetailAST ast)", "-        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)", "-            || (!ScopeUtils.isLocalVariableDef(aAST)", "-            && (aAST.getType() != TokenTypes.PARAMETER_DEF)))", "+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)", "+            || (!ScopeUtils.isLocalVariableDef(ast)", "+            && (ast.getType() != TokenTypes.PARAMETER_DEF)))", "-        //local variable or parameter. Does it shadow a field?", "-        final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+        //local variable or pnameter. Does it shadow a field?", "+        final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-        if ((mCurrentFrame.containsStaticField(name)", "-             || (!inStatic(aAST) && mCurrentFrame.containsInstanceField(name)))", "-            && ((mRegexp == null) || (!getRegexp().matcher(name).find()))", "-            && !isIgnoredSetterParam(aAST, name)", "-            && !isIgnoredConstructorParam(aAST)", "-            && !isIgnoredParamOfAbstractMethod(aAST))", "+        if ((currentFrame.containsStaticField(name)", "+             || (!inStatic(ast) && currentFrame.containsInstanceField(name)))", "+            && ((regexp == null) || (!getRegexp().matcher(name).find()))", "+            && !isIgnoredSetterParam(ast, name)", "+            && !isIgnoredConstructorParam(ast)", "+            && !isIgnoredParamOfAbstractMethod(ast))"]}]}
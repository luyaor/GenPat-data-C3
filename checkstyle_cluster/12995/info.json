{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1dd913bf748a186e1bd8c4a137b87a0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26277bfaf3c75a892d6e0f1b295a53a7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "b78f144ee4613e1d503624067b4a03d10b3515a8", "commitAfterChange": "342ae1315c775fa512a5278d901bbd4fb23fd7c1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     ExpressionHandler createMethodCallHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "signatureAfterChange": "     ExpressionHandler createMethodCallHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "diff": ["-        ExpressionHandler handler =", "-            (ExpressionHandler) mCreatedHandlers.get(aAst);", "-        if (handler != null) {", "-            return handler;", "-        }", "-", "-        if (ast != null && ast.getType() == TokenTypes.METHOD_CALL) {", "-            aParent = createMethodCallHandler(aIndentCheck, ast, aParent);", "+        if (ast != null && isHandledType(ast.getType())) {", "+            aParent = getHandler(aIndentCheck, ast, aParent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9924ef054dedc563e33811f86f145aa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "6e96026ec6d95fc5eadd3044cab91c24c73c8e0c", "commitAfterChange": "e00c478dd61d9d883e41b500b780ab217582c2e7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     ExpressionHandler createMethodCallHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "signatureAfterChange": "     ExpressionHandler createMethodCallHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "diff": ["+        ExpressionHandler theParent = aParent;", "-            aParent = getHandler(aIndentCheck, ast, aParent);", "-            mCreatedHandlers.put(ast, aParent);", "+            theParent = getHandler(aIndentCheck, ast, theParent);", "+            mCreatedHandlers.put(ast, theParent);", "-        return new MethodCallHandler(aIndentCheck, aAst, aParent);", "+        return new MethodCallHandler(aIndentCheck, aAst, theParent);"]}]}
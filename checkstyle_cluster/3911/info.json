{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4f48c10794f695c88290b8cdf1fe8cb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19a32f5cd60f879dd1d10feee2613f0f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "8aec5bba7ea5d9c702db9a116d005ad81afbf1ad", "commitAfterChange": "085ce12db0983590844ccc24ea49f91686a30ed8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static void parsePropertyString(String value,                                            List<String> fragments,                                            List<String> propertyRefs)         throws CheckstyleException", "signatureAfterChange": "     private static void parsePropertyString(String value,                                            List<String> fragments,                                            List<String> propertyRefs)         throws CheckstyleException", "diff": ["-        int pos = value.indexOf('$', prev);", "+        int pos = value.indexOf(DOLLAR_SIGN, prev);", "-                fragments.add(\"$\");", "+                fragments.add(String.valueOf(DOLLAR_SIGN));", "-                if (value.charAt(pos + 1) == '$') {", "+                if (value.charAt(pos + 1) == DOLLAR_SIGN) {", "-                    fragments.add(\"$\");", "+                    fragments.add(String.valueOf(DOLLAR_SIGN));", "-            pos = value.indexOf('$', prev);", "+            pos = value.indexOf(DOLLAR_SIGN, prev);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2897ae9c373b60e3579218bfa260d4f0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "216fcb79f9f5bbd05244364e926f261a90e697d1", "commitAfterChange": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "diff": ["-                            \"javadoc.unusedTag\", \"@throws\", tag.getArg1());", "+                        \"javadoc.unusedTag\",", "+                        JavadocTagInfo.THROWS.getText(), tag.getArg1());", "-                            \"javadoc.expectedTag\", \"@throws\", fi.getText());", "+                        \"javadoc.expectedTag\",", "+                        JavadocTagInfo.THROWS.getText(), fi.getText());"]}]}
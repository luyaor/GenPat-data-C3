{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b80d5b962044f1a13b93c1ffbce2e95f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "498835edfe938e212fcf498551b59cb0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "3d8fc87ef60d4e96068658ed0485aafdb2a42691", "commitAfterChange": "e27489c7721909245ea5055eac3b9c7c659081f6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "         private String expandFromComment(             String aComment,             String aString,             RE aRegexp)", "signatureAfterChange": "         private String expandFromComment(             String aComment,             String aString,             Pattern aRegexp)", "diff": ["-            RE aRegexp)", "+            Pattern aRegexp)", "+            Matcher matcher = aRegexp.matcher(aComment);", "-            if (!aRegexp.match(aComment)) {", "+            if (!matcher.find()) {", "-            for (int i = 1; i < aRegexp.getParenCount(); i++) {", "-                // $n expands comment match like in RE.subst().", "-                result = result.replaceAll(\"\\\\$\" + i, aRegexp.getParen(i));", "+            for (int i = 0; i <= matcher.groupCount(); i++) {", "+                // $n expands comment match like in Pattern.subst().", "+                result = result.replaceAll(\"\\\\$\" + i, matcher.group(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dbbe78d6609c6c782b7990a3ad6fc70", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheck.java", "commitBeforeChange": "3d8fc87ef60d4e96068658ed0485aafdb2a42691", "commitAfterChange": "e27489c7721909245ea5055eac3b9c7c659081f6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean findNonCommentMatch(             String aLine, int aLineNumber, int aStartPosition)", "signatureAfterChange": "     private boolean findNonCommentMatch(             String aLine, int aLineNumber, int aStartPosition)", "diff": ["-        final RE regexp = getRegexp();", "-        final boolean foundMatch = regexp.match(aLine, aStartPosition);", "+        final Pattern pattern = getRegexp();", "+        final Matcher matcher = pattern.matcher(aLine);", "+        final boolean foundMatch = matcher.find(aStartPosition);", "-            final int startCol = regexp.getParenStart(0);", "-            final int endCol = regexp.getParenEnd(0);", "+            final int startCol = matcher.start(0);", "+            final int endCol = matcher.end(0);"]}]}
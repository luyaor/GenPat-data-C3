{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9e20d924029b9bca23621ba818d5bf7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e002b7d07281c4a6e99f94203851d910", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java", "commitBeforeChange": "545237e358cd5ec1492f128f500b345d0f1718a9", "commitAfterChange": "8ad4aebb66a1b90ac135e05f8062423028e3be8e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testMethodEqClass() throws Exception", "signatureAfterChange": "      @Test     public void testMethodEqClass() throws Exception", "diff": ["+        final String pattern = \"^[a-z][a-zA-Z0-9]*$\";", "+", "-            \"12:16: Method Name 'InputMethNameEqualClsName' must not equal the enclosing class name.\",", "-            \"12:16: Name 'InputMethNameEqualClsName' must match pattern '^[a-z][a-zA-Z0-9]*$'.\",", "-            \"17:17: Name 'PRIVATEInputMethNameEqualClsName' must match pattern '^[a-z][a-zA-Z0-9]*$'.\",", "-            \"23:20: Method Name 'Inner' must not equal the enclosing class name.\",", "-            \"23:20: Name 'Inner' must match pattern '^[a-z][a-zA-Z0-9]*$'.\",", "-            \"28:20: Name 'InputMethNameEqualClsName' must match pattern '^[a-z][a-zA-Z0-9]*$'.\",", "-            \"37:24: Method Name 'InputMethNameEqualClsName' must not equal the enclosing class name.\",", "-            \"37:24: Name 'InputMethNameEqualClsName' must match pattern '^[a-z][a-zA-Z0-9]*$'.\",", "-            \"47:9: Method Name 'SweetInterface' must not equal the enclosing class name.\",", "-            \"47:9: Name 'SweetInterface' must match pattern '^[a-z][a-zA-Z0-9]*$'.\",", "-            \"53:17: Method Name 'Outter' must not equal the enclosing class name.\",", "-            \"53:17: Name 'Outter' must match pattern '^[a-z][a-zA-Z0-9]*$'.\",", "+            \"12:16: \" + getCheckMessage(MSG_KEY, \"InputMethNameEqualClsName\"),", "+            \"12:16: \" + getCheckMessage(MSG_INVALID_PATTERN, \"InputMethNameEqualClsName\", pattern),", "+            \"17:17: \" + getCheckMessage(MSG_INVALID_PATTERN, \"PRIVATEInputMethNameEqualClsName\", pattern),", "+            \"23:20: \" + getCheckMessage(MSG_KEY, \"Inner\"),", "+            \"23:20: \" + getCheckMessage(MSG_INVALID_PATTERN, \"Inner\", pattern),", "+            \"28:20: \" + getCheckMessage(MSG_INVALID_PATTERN, \"InputMethNameEqualClsName\", pattern),", "+            \"37:24: \" + getCheckMessage(MSG_KEY, \"InputMethNameEqualClsName\"),", "+            \"37:24: \" + getCheckMessage(MSG_INVALID_PATTERN, \"InputMethNameEqualClsName\", pattern),", "+            \"47:9: \" + getCheckMessage(MSG_KEY, \"SweetInterface\"),", "+            \"47:9: \" + getCheckMessage(MSG_INVALID_PATTERN, \"SweetInterface\", pattern),", "+            \"53:17: \" + getCheckMessage(MSG_KEY, \"Outter\"),", "+            \"53:17: \" + getCheckMessage(MSG_INVALID_PATTERN, \"Outter\", pattern),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f241534d0e47b8a98df53180b999c39e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java", "commitBeforeChange": "41d538f9be41a0561ca7a28b159c034bcd3810e8", "commitAfterChange": "bb3f80410619472799c401651c43afb761f7906e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testIncorrect() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrect() throws Exception", "diff": ["+            \"7: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"7: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"8: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"8: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"14: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"14: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"16: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"23: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"25: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"32: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"32: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"32: \" + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),", "+            \"33: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"33: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"34: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"34: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"35: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"35: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"39: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"39: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"45: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"45: \" + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),", "+            \"48: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"50: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"50: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"51: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"51: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"61: \" + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),", "+            \"62: \" + getCheckMessage(MSG_TAG_AFTER),", "+            \"70: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"70: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"72: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"75: \" + getCheckMessage(MSG_MISPLACED_TAG),", "+            \"75: \" + getCheckMessage(MSG_LINE_BEFORE),", "+        };", "+        verify(checkConfig, getPath(\"javadoc/InputIncorrectJavaDocParagraphCheck.java\"), expected);", "+    }"]}]}
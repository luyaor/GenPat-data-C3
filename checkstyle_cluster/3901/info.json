{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd0ace7a10bedf4ab23cd7348425140a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dde0a6b7a32caaf399e9cc7c28f25bd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "commitAfterChange": "4c1148db9982918e65f8d1156e8fb9c07b206fc9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static <T extends Enum<T>> T getOption(final Class<T> enuclass,         final String string)", "signatureAfterChange": "     private static <T extends Enum<T>> T getOption(final Class<T> enuclass,         final String value)", "diff": ["-        final String string) {", "+        final String value) {", "-            return Enum.valueOf(enuclass, string.trim().toUpperCase(Locale.ENGLISH));", "+            return Enum.valueOf(enuclass, value.trim().toUpperCase(Locale.ENGLISH));", "-            throw new ConversionException(\"unable to parse \" + string, iae);", "+            throw new ConversionException(\"unable to parse \" + value, iae);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e447b8dc4d7685a209f01055ecb58284", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java", "commitBeforeChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "commitAfterChange": "4c1148db9982918e65f8d1156e8fb9c07b206fc9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static boolean startsWithChar(String string, char prefix)", "signatureAfterChange": "     public static boolean startsWithChar(String value, char prefix)", "diff": ["-    public static boolean startsWithChar(String string, char prefix) {", "-        return !string.isEmpty() && string.charAt(0) == prefix;", "+    public static boolean startsWithChar(String value, char prefix) {", "+        return !value.isEmpty() && value.charAt(0) == prefix;"]}]}
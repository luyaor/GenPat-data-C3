{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d4784e4341209835cf4ddcddc6a1ecf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d4c7e543e6ff3233a722e23d88cae9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private static boolean inStatic(DetailAST ast)", "signatureAfterChange": "     private static boolean inStatic(DetailAST ast)", "diff": ["+        boolean inStatic = false;", "+", "-            switch (parent.getType()) {", "-                case TokenTypes.STATIC_INIT:", "-                    return true;", "-                case TokenTypes.METHOD_DEF:", "-                    final DetailAST mods =", "-                        parent.findFirstToken(TokenTypes.MODIFIERS);", "-                    return mods.branchContains(TokenTypes.LITERAL_STATIC);", "-                default:", "-                    parent = parent.getParent();", "+            if (parent.getType() == TokenTypes.STATIC_INIT) {", "+                inStatic = true;", "+                break;", "+            }", "+            else if (parent.getType() == TokenTypes.METHOD_DEF) {", "+                final DetailAST mods =", "+                    parent.findFirstToken(TokenTypes.MODIFIERS);", "+                inStatic = mods.branchContains(TokenTypes.LITERAL_STATIC);", "+                break;", "+            }", "+            else {", "+                parent = parent.getParent();", "-        return false;", "+        return inStatic;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "417ad5ded0acf1fd78333104105936ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "cdf3e56bacd3895262af8a1df9ca5c81f4071970", "commitAfterChange": "69a3d541b4888e5e0e6ab09aa675667155c65381", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static boolean isReference(String ent)", "signatureAfterChange": "     public static boolean isReference(String ent)", "diff": ["-        if (ent.charAt(0) != '&' || !CommonUtils.endsWithChar(ent, ';')) {", "-            return false;", "-        }", "+        boolean reference = false;", "-        if (ent.charAt(1) == '#') {", "+        if (ent.charAt(0) != '&' || !CommonUtils.endsWithChar(ent, ';')) {", "+            reference = false;", "+        }", "+        else if (ent.charAt(1) == '#') {", "-                return true;", "+                reference = true;", "-                return false;", "+                reference = false;", "-", "-        final String name = ent.substring(1, ent.length() - 1);", "-        for (String element : ENTITIES) {", "-            if (name.equals(element)) {", "-                return true;", "+        else {", "+            final String name = ent.substring(1, ent.length() - 1);", "+            for (String element : ENTITIES) {", "+                if (name.equals(element)) {", "+                    reference = true;", "+                    break;", "+                }", "-        return false;", "+        return reference;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e21acf3d72556fda6c638363dc27a4e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java", "commitBeforeChange": "ee3ea77d620d2f21a18a0fe878a911a975545024", "commitAfterChange": "b5203fd519f61b652a6d56a24eb9d18388eb2155", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private float parseFloat(String aText, int aType)", "signatureAfterChange": "     private float parseFloat(String aText, int aType)", "diff": ["+        float result = 0;", "-            return Float.parseFloat(aText);", "+            result = Float.parseFloat(aText);", "-            return (float) Double.parseDouble(aText);", "+            result = (float) Double.parseDouble(aText);", "-                    return (float) Integer.parseInt(aText, radix);", "-                }", "-                else {", "-                    return 0;", "+                    result = (float) Integer.parseInt(aText, radix);", "-                    return (float) Long.parseLong(aText, radix);", "+                    result = (float) Long.parseLong(aText, radix);", "-                else {", "-                    return 0;", "-                } ", "-            }", "-            else {", "-                return 0;", "+        return result;"]}]}
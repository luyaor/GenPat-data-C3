{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d1677357184039351a219015cd49e58", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a4ef3927fc279650cf61b41b62e2be6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java", "commitBeforeChange": "32f5f97181f9049af5411a5b8f151b51f1c5f165", "commitAfterChange": "731b581a1c0406506266226c50be8796179464e5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST aAST) ", "-            log(aAST.getLineNo(), \"import.avoidStar\", name.getText());", "+            boolean exempt = false;", "+            for (int i = 0; i < m_excludes.length && !exempt; i++) {", "+                if (name.getText().equals(m_excludes[i])) {", "+                    exempt = true;", "+                }", "+            }", "+            if (!exempt) {", "+                log(aAST.getLineNo(), \"import.avoidStar\", name.getText());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98d074bf650e4471261fdd9d426adc5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "65989e76a40bf085059ee2bf9c695c6b45a771fb", "commitAfterChange": "fca8c918043974fcf6cc59e5d4161ada0b7c4c76", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "     void reportCComment(int aStartLineNo, int aStartColNo,                                int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     void reportCComment(int aStartLineNo, int aStartColNo,                         int aEndLineNo, int aEndColNo)", "diff": ["-                               int aEndLineNo, int aEndColNo)", "+                        int aEndLineNo, int aEndColNo)", "+        final String[] cc = extractCComment(aStartLineNo, aStartColNo,", "+                                            aEndLineNo, aEndColNo);", "+", "+        // Remember if possible Javadoc comment", "-            final String[] cc =", "-                extractCComment(aStartLineNo, aStartColNo,", "-                                aEndLineNo, aEndColNo);", "+        }", "+", "+        // Check for to-do comments", "+        for (int i = 0; i < cc.length; i++) {", "+            if (mConfig.getTodoRegexp().match(cc[i])) {", "+                log(aStartLineNo + i,", "+                    \"Comment matches to-do format '\" + mConfig.getTodoPat()", "+                    + \"'.\");", "+            }"]}]}
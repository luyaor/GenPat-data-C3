{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9aba5bce7173d1f12f5674eec3c777c4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ca8afb26ebaa771617b0d852505c991", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "77945f29623d52060c05e643679a7004e6b8e18d", "commitAfterChange": "f09c190dff9530b6b47ec14b3ac6d2162ba77b26", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-                DefaultContext context = new DefaultContext();", "-                ClassLoader loader =", "+                final DefaultContext context = new DefaultContext();", "+                final ClassLoader loader =", "-                ", "+", "-                    ModuleFactory moduleFactory =", "+                    final ModuleFactory moduleFactory =", "-                        mPackageNamesFile.getAbsolutePath());", "+                            mPackageNamesFile.getAbsolutePath());", "-                AuditListener[] listeners = getListeners();", "+                final AuditListener[] listeners = getListeners();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "effede2ba2a26b05bf022ffb27805bdc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "b0240a0200663fbf1d3146d1aefe12207fdde4af", "commitAfterChange": "9aa72722de7b5a4ffb5d50945c7bce8b58f25e8e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void fillSortedRelevantChecksums()", "signatureAfterChange": "     private void fillSortedRelevantChecksums()", "diff": ["-            int count = 0;", "-            final long[] relevant = new long[checksums.length];", "-            for (int j = 0; j < checksums.length; j++) {", "-                final long checksum = checksums[j];", "-                if (checksum != IGNORE) {", "-                    relevant[count++] = checksum;", "-                }", "-            }", "-            Arrays.sort(relevant, 0, count);", "-            final long[] result = new long[count];", "-            System.arraycopy(relevant, 0, result, 0, count);", "-            mSortedRelevantChecksums[i] = result;", "+            mChecksumInfo[i] = new ChecksumInfo(checksums);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae407556064fba38d5fe51be69e12c6f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ea1d7dad236c4f4ca0484c66070f35a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            lcurly = aAST.getFirstChild();", "+            lcurly = ast.getFirstChild();", "-            nextToken = aAST.getNextSibling();", "-            lcurly = aAST.getLastChild();", "+            nextToken = ast.getNextSibling();", "+            lcurly = ast.getLastChild();", "-                nextToken = getNextToken(aAST);", "+                nextToken = getNextToken(ast);", "-            nextToken = aAST.findFirstToken(TokenTypes.LITERAL_ELSE);", "+            nextToken = ast.findFirstToken(TokenTypes.LITERAL_ELSE);", "-                nextToken = getNextToken(aAST);", "-                lcurly = aAST.getLastChild();", "+                nextToken = getNextToken(ast);", "+                lcurly = ast.getLastChild();", "-            nextToken = getNextToken(aAST);", "-            lcurly = aAST.getFirstChild();", "+            nextToken = getNextToken(ast);", "+            lcurly = ast.getFirstChild();", "-            nextToken = getNextToken(aAST);", "-            lcurly = aAST.getFirstChild();", "+            nextToken = getNextToken(ast);", "+            lcurly = ast.getFirstChild();", "-            final DetailAST child = aAST.getLastChild();", "+            final DetailAST child = ast.getLastChild();", "-            nextToken = aAST;", "+            nextToken = ast;", "-            lcurly = aAST.findFirstToken(TokenTypes.SLIST);", "+            lcurly = ast.findFirstToken(TokenTypes.SLIST);", "-            nextToken = aAST;", "+            nextToken = ast;", "-            lcurly = aAST.findFirstToken(TokenTypes.SLIST);", "+            lcurly = ast.findFirstToken(TokenTypes.SLIST);", "-            nextToken = aAST;", "+            nextToken = ast;", "-                    + TokenTypes.getTokenName(aAST.getType()) + \")\");", "+                    + TokenTypes.getTokenName(ast.getType()) + \")\");", "-        if (!mShouldStartLine) {", "+        if (!shouldStartLine) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba20ec79cf26dd828d63e0fb861d9b5f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.IMPORT) {", "-            ident = FullIdent.createFullIdentBelow(aAST);", "+        if (ast.getType() == TokenTypes.IMPORT) {", "+            ident = FullIdent.createFullIdentBelow(ast);", "-            ident = FullIdent.createFullIdent(aAST.getFirstChild()", "+            ident = FullIdent.createFullIdent(ast.getFirstChild()", "-            if (!isStatic && mLastImportStatic) {", "-                mLastGroup = Integer.MIN_VALUE;", "-                mLastImport = \"\";", "+            if (!isStatic && lastImportStatic) {", "+                lastGroup = Integer.MIN_VALUE;", "+                lastImport = \"\";", "-            doVisitToken(ident, isStatic, (!mLastImportStatic && isStatic));", "+            doVisitToken(ident, isStatic, (!lastImportStatic && isStatic));", "-            if (isStatic && !mLastImportStatic) {", "-                mLastGroup = Integer.MIN_VALUE;", "-                mLastImport = \"\";", "+            if (isStatic && !lastImportStatic) {", "+                lastGroup = Integer.MIN_VALUE;", "+                lastImport = \"\";", "-            doVisitToken(ident, isStatic, (mLastImportStatic && !isStatic));", "+            doVisitToken(ident, isStatic, (lastImportStatic && !isStatic));", "-        mLastImportLine = aAST.findFirstToken(TokenTypes.SEMI).getLineNo();", "-        mLastImportStatic = isStatic;", "-        mBeforeFirstImport = false;", "+        lastImportLine = ast.findFirstToken(TokenTypes.SEMI).getLineNo();", "+        lastImportStatic = isStatic;", "+        beforeFirstImport = false;"]}]}
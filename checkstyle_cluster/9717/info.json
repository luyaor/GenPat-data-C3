{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4417467810d67c8b5d3de089c5a12e3d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e32a0f5174ba90778361cb6ae4abc05", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava2.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 12, "signatureBeforeChange": "           @Override           public ImmutableRangeMap<K, V> subRangeMap(Range<K> subRange)", "signatureAfterChange": "    @Override   public RangeMap<K, V> subRangeMap(Range<K> range)", "diff": ["-        subRanges, values.subList(lowerIndex, upperIndex)) {", "-          @Override", "-          public ImmutableRangeMap<K, V> subRangeMap(Range<K> subRange) {", "-            if (range.isConnected(subRange)) {", "-              return outer.subRangeMap(subRange.intersection(range));", "-            } else {", "-              return ImmutableRangeMap.of();", "-            }", "-          }", "+", "+  @Override", "+  public RangeMap<K, V> subRangeMap(Range<K> range)", "+  {", "+    return null;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c63d73c3ace00b364df048cb6a394116", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "113ea8405c8b753540ee3423d7e37e383f269155", "commitAfterChange": "7f7db38a097a95c264307123924779380fb40077", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected final void findSubtreeLines(LineSet aLines, DetailAST aTree,         boolean aAllowNesting)", "signatureAfterChange": "     protected final void findSubtreeLines(LineSet aLines, DetailAST aTree,         boolean aAllowNesting)", "diff": ["-//        if (allowNesting && tree.getColumnNo() != getLineStart(tree)) {", "-//            return;", "-//        }", "+//          if (aAllowNesting && aTree.getColumnNo() != getLineStart(aTree)) {", "+//              return;", "+//          }", "-        if (colNum == null) {", "+        if (colNum == null || (thisLineColumn < colNum.intValue())) {", "-        }", "-        else {", "-            if (expandedTabsColumnNo(aTree) < colNum.intValue()) {", "-                aLines.addLineAndCol(lineNum, thisLineColumn);", "-            }"]}]}
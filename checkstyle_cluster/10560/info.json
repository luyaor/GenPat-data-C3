{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0f9a76f61faf593fa39db1e33e568d3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "077569f6df72b46eba3002bca9cb9cd5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void processIDENT(DetailAST aAST)", "signatureAfterChange": "     private void processIDENT(DetailAST ast)", "diff": ["-    private void processIDENT(DetailAST aAST)", "+    private void processIDENT(DetailAST ast)", "-        final int parentType = aAST.getParent().getType();", "+        final int parentType = ast.getParent().getType();", "-            if (mCheckMethods && isClassMethod(aAST.getText())) {", "-                log(aAST, \"require.this.method\", aAST.getText());", "+            if (checkMethods && isClassMethod(ast.getText())) {", "+                log(ast, \"require.this.method\", ast.getText());", "-        if (!mCheckFields) {", "+        if (!checkFields) {", "-        if (ScopeUtils.getSurroundingScope(aAST) == null) {", "+        if (ScopeUtils.getSurroundingScope(ast) == null) {", "-            && (aAST.getPreviousSibling() != null))", "+            && (ast.getPreviousSibling() != null))", "-        final String name = aAST.getText();", "+        final String name = ast.getText();", "-            log(aAST, \"require.this.variable\", name);", "+            log(ast, \"require.this.variable\", name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61a283cb488c44de2ed8149498cce04a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST modifiers = aAST.getFirstChild();", "-        final AST type = aAST.findFirstToken(TokenTypes.TYPE);", "-        final AST methodName = aAST.findFirstToken(TokenTypes.IDENT);", "-        final DetailAST parameters = aAST.findFirstToken(TokenTypes.PARAMETERS);", "+        final DetailAST modifiers = ast.getFirstChild();", "+        final AST type = ast.findFirstToken(TokenTypes.TYPE);", "+        final AST methodName = ast.findFirstToken(TokenTypes.IDENT);", "+        final DetailAST parameters = ast.findFirstToken(TokenTypes.PARAMETERS);", "-            mObjBlockEquals.put(aAST.getParent(), aAST);", "+            objBlockEquals.put(ast.getParent(), ast);", "-            mObjBlockWithHashCode.add(aAST.getParent());", "+            objBlockWithHashCode.add(ast.getParent());"]}]}
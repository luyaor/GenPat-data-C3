{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "438d5d216854d4b11aeef7e6befa20c2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d8a18cd1238582d9e3322854457338e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java", "commitBeforeChange": "e971fcd9b5e44455e38308acd05ddb000591e213", "commitAfterChange": "420889115863aa3237904ad71051fbc666d7ffd2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     @Ignore     @Test     public void testCarriageReturn() throws Exception", "signatureAfterChange": "      @Test     public void testCarriageReturn() throws Exception", "diff": ["-    // Need to fix the line endings in the input file", "-    @Ignore", "-            \"14: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-            \"16: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-            \"19: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-            \"21: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "+            \"1: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "+            \"3: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-        verify(checkConfig, getPath(\"InputLineBreaks.java\"), expected);", "+", "+        final File file = temporaryFolder.newFile();", "+        Files.write(\"first line \\r\\n second line \\n\\r third line\", file, Charsets.UTF_8);", "+", "+        verify(checkConfig, file.getPath(), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e34131b3cc7fcfcc46dbdd503b9e0b6b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java", "commitBeforeChange": "d814d1352b63136a400cd8f4dffd03d68c9ccd24", "commitAfterChange": "3edd1b53a5d8d407fd33d8c514db8bc1c7274fe5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void testStaticVisibilityFromAnonymousClasses() throws Exception", "signatureAfterChange": "      @Test     public void testStaticVisibilityFromAnonymousClasses() throws Exception", "diff": ["-            \"10:95: \" + getCheckMessage(MSG_KEY, \"other\"),", "-            \"16:92: \" + getCheckMessage(MSG_KEY, \"other\"),", "-            \"24:99: \" + getCheckMessage(MSG_KEY, \"other\"),", "-            \"34:103: \" + getCheckMessage(MSG_KEY, \"other\"),", "+            \"10:97: \" + getCheckMessage(MSG_KEY, \"other\"),", "+            \"16:94: \" + getCheckMessage(MSG_KEY, \"other\"),", "+            \"24:101: \" + getCheckMessage(MSG_KEY, \"other\"),", "+            \"34:105: \" + getCheckMessage(MSG_KEY, \"other\"),", "-        verify(checkConfig, getPath(\"InputHidenFieldStaticVisibility.java\"), expected);", "+        verify(checkConfig, getPath(\"InputHiddenFieldStaticVisibility.java\"), expected);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e9203baa30d5dce02cec3319e351b32", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9daa5e694d47f9ee92545c9e826f4771", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "83b0e16b0ac0ac6bec82db210361febb762ee03e", "commitAfterChange": "d740f2e1cdb05f20a48bf7d5dcebdcd0faae6ddd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected void setupChild(Configuration childConf)         throws CheckstyleException", "signatureAfterChange": "      @Override     protected void setupChild(Configuration childConf)         throws CheckstyleException", "diff": ["+        final Object child;", "+", "-            final Object child = moduleFactory.createModule(name);", "+            child = moduleFactory.createModule(name);", "+", "-            if (child instanceof FileSetCheck) {", "-                final FileSetCheck fsc = (FileSetCheck) child;", "-                fsc.init();", "-                addFileSetCheck(fsc);", "-            }", "-            else if (child instanceof Filter) {", "-                final Filter filter = (Filter) child;", "-                addFilter(filter);", "-            }", "-            else if (child instanceof AuditListener) {", "-                final AuditListener listener = (AuditListener) child;", "-                addListener(listener);", "-            }", "-            else {", "-                throw new CheckstyleException(name", "-                        + \" is not allowed as a child in Checker\");", "-            }", "-        catch (final Exception ex) {", "+        catch (final CheckstyleException ex) {", "+        if (child instanceof FileSetCheck) {", "+            final FileSetCheck fsc = (FileSetCheck) child;", "+            fsc.init();", "+            addFileSetCheck(fsc);", "+        }", "+        else if (child instanceof Filter) {", "+            final Filter filter = (Filter) child;", "+            addFilter(filter);", "+        }", "+        else if (child instanceof AuditListener) {", "+            final AuditListener listener = (AuditListener) child;", "+            addListener(listener);", "+        }", "+        else {", "+            throw new CheckstyleException(name", "+                    + \" is not allowed as a child in Checker\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db238384bbab7402371e0e4054521f40", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "04bca2e0435d598918603ce5a457ddc99e6ae5a5", "commitAfterChange": "c3baa3fa77f4ed8e475ab52db6d0f2f860d93ef0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected void setupChild(Configuration aChildConf)         throws CheckstyleException", "signatureAfterChange": "     protected void setupChild(Configuration aChildConf)         throws CheckstyleException", "diff": ["-            final Object module = mModuleFactory.createModule(name);", "-            if (!(module instanceof FileSetCheck)) {", "-                throw new CheckstyleException(name", "-                    + \" is not allowed as a module in Checker\");", "+            final Object child = mModuleFactory.createModule(name);", "+            if (child instanceof FileSetCheck) {", "+                final FileSetCheck fsc = (FileSetCheck) child;", "+                fsc.contextualize(mChildContext);", "+                fsc.configure(aChildConf);", "+                addFileSetCheck(fsc);", "-            final FileSetCheck fsc = (FileSetCheck) module;", "-            fsc.contextualize(mChildContext);", "-            fsc.configure(aChildConf);", "-            addFileSetCheck(fsc);", "+            else if (child instanceof Filter) {", "+                final Filter filter = (Filter) child;", "+                filter.contextualize(mChildContext);", "+                filter.configure(aChildConf);", "+                addFilter(filter);", "+            }", "+            else {", "+                throw new CheckstyleException(name", "+                    + \" is not allowed as a child in Checker\");", "+            }"]}]}
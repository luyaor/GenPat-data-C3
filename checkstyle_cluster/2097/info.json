{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3bb99fd740804d3bd25be80d38d993f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0548816b379fa2c47f98e2440c7afa41", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java", "commitBeforeChange": "6e775898e7d1ac179bcb6550f3023ee9b9d70bc3", "commitAfterChange": "8607274a9205c5f15c33820b0efa6dc4c5ea9a23", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean isExempt(String classOrStaticMember)", "signatureAfterChange": "     private boolean isExempt(String classOrStaticMember)", "diff": ["-            if (classOrStaticMember.equals(exclude)) {", "+            if (classOrStaticMember.equals(exclude)", "+                    || isStarImportOfPackage(classOrStaticMember, exclude)) {", "-            else if (exclude.endsWith(\".*\")) {", "-                //this section allows explicit imports", "-                //to be exempt when configured using", "-                //a starred import", "-                final String excludeMinusDotStar =", "-                    exclude.substring(0, exclude.length() - 2);", "-                if (classOrStaticMember.startsWith(excludeMinusDotStar)", "-                        && !classOrStaticMember.equals(excludeMinusDotStar)) {", "-                    final String member =", "-                        classOrStaticMember.substring(", "-                            excludeMinusDotStar.length() + 1);", "-                    //if it contains a dot then it is not a member but a package", "-                    if (member.indexOf('.') == -1) {", "-                        exempt = true;", "-                        break;", "-                    }", "+        }", "+        return exempt;", "+    }", "-        return exempt;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "999afff2a39ab50c432ea1a370990bd7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "e16c4a8259ed7bf412bfa74ac4cb6b39c467c422", "commitAfterChange": "741454e7f18b1714499eda0c44dbdf75518683b0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "         private long reallyCalcChecksum(String aLine)", "signatureAfterChange": "         protected long calcChecksum(String aLine)", "diff": ["-         */", "-        private long reallyCalcChecksum(String aLine)", "+        protected long calcChecksum(String aLine)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd9fcb3faf44d6ce171510d46bd14772", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "fd33eb9c26eb958e03a91ac40a18245f8a41c584", "commitAfterChange": "bdda55ed1b207cab5e7f8ab3e6ebfb4d07a62a5a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getDisallowedAbbreviation(String str)", "signatureAfterChange": "     private String getDisallowedAbbreviation(String str)", "diff": ["-                    // -1 as a first capital is usually beginning of next word", "-                    final int abbrLength = endIndex - beginIndex;", "-                    if (abbrLength > allowedAbbreviationLength) {", "-                        result = str.substring(beginIndex, endIndex);", "-                        if (!allowedAbbreviations.contains(result)) {", "-                            break;", "-                        }", "-                        else {", "-                            result = null;", "-                        }", "+                    // -1 as a first capital is usually beginning of next word", "+                    result = getAbbreviationIfIllegal(str, beginIndex, endIndex);", "+                    if (result != null) {", "+                        break;", "-        if (abbrStarted) {", "+        // if abbreviation at the end of name and it is not single character (example: scaleX)", "+        if (abbrStarted && beginIndex != str.length() - 1) {", "-            final int abbrLength = endIndex - beginIndex;", "-            if (abbrLength > 1 && abbrLength > allowedAbbreviationLength) {", "-                result = str.substring(beginIndex, endIndex);", "-                if (allowedAbbreviations.contains(result)) {", "-                    result = null;", "-                }", "+            result = getAbbreviationIfIllegal(str, beginIndex, endIndex);", "+        }", "+        return result;", "+    }"]}]}
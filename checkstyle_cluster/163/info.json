{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4fc6126dc2fdb6f4102905faef63aed", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e708133cc16c7e0d8e9d38ea96ff1d3f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "a4e3e3c1af37c52f72fb4b5aaa0411ae6d53bd36", "commitAfterChange": "74566f21a2298d53f9c97935542fdb630ad5da87", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "signatureAfterChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "diff": ["-        final int type = statement.getType();", "-        if (type == TokenTypes.LITERAL_IF) {", "-            result = isSingleLineIf(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_FOR) {", "-            result = isSingleLineFor(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_DO) {", "-            result = isSingleLineDoWhile(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_WHILE) {", "-            result = isSingleLineWhile(statement);", "-        }", "-        else if (type == TokenTypes.LAMBDA) {", "-            result = isSingleLineLambda(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_CASE) {", "-            result = isSingleLineCase(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_DEFAULT) {", "-            result = isSingleLineDefault(statement);", "-        }", "-        else {", "-            result = isSingleLineElse(statement);", "+        switch (statement.getType()) {", "+            case TokenTypes.LITERAL_IF:", "+                result = isSingleLineIf(statement);", "+                break;", "+            case TokenTypes.LITERAL_FOR:", "+                result = isSingleLineFor(statement);", "+                break;", "+            case TokenTypes.LITERAL_DO:", "+                result = isSingleLineDoWhile(statement);", "+                break;", "+            case TokenTypes.LITERAL_WHILE:", "+                result = isSingleLineWhile(statement);", "+                break;", "+            case TokenTypes.LAMBDA:", "+                result = isSingleLineLambda(statement);", "+                break;", "+            case TokenTypes.LITERAL_CASE:", "+                result = isSingleLineCase(statement);", "+                break;", "+            case TokenTypes.LITERAL_DEFAULT:", "+                result = isSingleLineDefault(statement);", "+                break;", "+            default:", "+                result = isSingleLineElse(statement);", "+                break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f14a25d65c0c40f163b1fa89ff9a50f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "b9936d973566f62a6989e7909f713abc7ff9cdb0", "commitAfterChange": "eb29e863de490162290425654a7fdcbd41d084df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "signatureAfterChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "diff": ["-        switch (statement.getType()) {", "-            case TokenTypes.LITERAL_IF:", "-                result = isSingleLineIf(statement);", "-                break;", "-            case TokenTypes.LITERAL_FOR:", "-                result = isSingleLineFor(statement);", "-                break;", "-            case TokenTypes.LITERAL_DO:", "-                result = isSingleLineDoWhile(statement);", "-                break;", "-            case TokenTypes.LITERAL_WHILE:", "-                result = isSingleLineWhile(statement);", "-                break;", "-            case TokenTypes.LAMBDA:", "-                result = isSingleLineLambda(statement);", "-                break;", "-            case TokenTypes.LITERAL_CASE:", "-                result = isSingleLineCase(statement);", "-                break;", "-            case TokenTypes.LITERAL_DEFAULT:", "-                result = isSingleLineDefault(statement);", "-                break;", "-            case TokenTypes.LITERAL_ELSE:", "-                result = isSingleLineElse(statement);", "-                break;", "-            default:", "-                final String exceptionMsg = statement.getText();", "-                throw new IllegalArgumentException(\"Unsupported token: \" + exceptionMsg);", "+        final int type = statement.getType();", "+", "+        if (type == TokenTypes.LITERAL_IF) {", "+            result = isSingleLineIf(statement);", "+        else if (type == TokenTypes.LITERAL_FOR) {", "+            result = isSingleLineFor(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_DO) {", "+            result = isSingleLineDoWhile(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_WHILE) {", "+            result = isSingleLineWhile(statement);", "+        }", "+        else if (type == TokenTypes.LAMBDA) {", "+            result = isSingleLineLambda(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_CASE) {", "+            result = isSingleLineCase(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_DEFAULT) {", "+            result = isSingleLineDefault(statement);", "+        }", "+        else {", "+            result = isSingleLineElse(statement);", "+        }", "+"]}]}
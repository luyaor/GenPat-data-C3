{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "399b5ef3df3edad3146e02d1e0924615", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b5ff379c94fd7da4b5369c6e33b84c3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "59aa66c3cc43db0a7cd8bb0ea3a39b6f4339fe88", "commitAfterChange": "a24df47cafeab03fd65cf72b460aad3d2fafce3d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void notifyBegin(DetailAST aRootAST, FileContents aContents)", "signatureAfterChange": "     private void notifyBegin(DetailAST aRootAST, FileContents aContents             , AstState aAstState)", "diff": ["-    private void notifyBegin(DetailAST aRootAST, FileContents aContents)", "+    private void notifyBegin(DetailAST aRootAST, FileContents aContents", "+            , AstState aAstState)", "-        for (Check ch : mAllChecks) {", "+        Set<Check> checks;", "+", "+        if (aAstState == AstState.WITH_COMMENTS) {", "+            checks = mCommentChecks;", "+        }", "+        else {", "+            checks = mOrdinaryChecks;", "+        }", "+", "+        for (Check ch : checks) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5082a8af5778072b9cabeab2b99005a3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "59aa66c3cc43db0a7cd8bb0ea3a39b6f4339fe88", "commitAfterChange": "a24df47cafeab03fd65cf72b460aad3d2fafce3d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void notifyEnd(DetailAST aRootAST)", "signatureAfterChange": "     private void notifyEnd(DetailAST aRootAST, AstState aAstState)", "diff": ["-    private void notifyEnd(DetailAST aRootAST)", "+    private void notifyEnd(DetailAST aRootAST, AstState aAstState)", "-        for (Check ch : mAllChecks) {", "+        Set<Check> checks;", "+", "+        if (aAstState == AstState.WITH_COMMENTS) {", "+            checks = mCommentChecks;", "+        }", "+        else {", "+            checks = mOrdinaryChecks;", "+        }", "+", "+        for (Check ch : checks) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2867077eb4a6bedbc6b88fefaa1da45", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1237cf8a54ea75d48058d65acf961829", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "e81ca8290b4efd42c3454ffa0159b739f958ea48", "commitAfterChange": "f293a2107656cebb829e33cba2384ba56be54512", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST rootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-            if (!importGroup.equals(currentGroup)) {", "+            if (importGroup.equals(currentGroup)) {", "+                if (sortImportsInGroupAlphabetically", "+                        && previousImportFromCurrentGroup != null", "+                        && compareImports(fullImportIdent, previousImportFromCurrentGroup) < 0) {", "+                    log(importObject.getLineNumber(), MSG_LEX,", "+                            fullImportIdent, previousImportFromCurrentGroup);", "+                }", "+                else {", "+                    previousImportFromCurrentGroup = fullImportIdent;", "+                }", "+            }", "+            else {", "-                }", "-            }", "-            else {", "-                if (sortImportsInGroupAlphabetically", "-                    && previousImportFromCurrentGroup != null", "-                    && compareImports(fullImportIdent, previousImportFromCurrentGroup) < 0) {", "-                    log(importObject.getLineNumber(), MSG_LEX,", "-                            fullImportIdent, previousImportFromCurrentGroup);", "-                }", "-                else {", "-                    previousImportFromCurrentGroup = fullImportIdent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a313e3bc3471b21bb54dc118f442e6c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d0939d3bc93819ebc1f42642806c0265fc7908b3", "commitAfterChange": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkHtml(final DetailAST ast, final TextBlock comment)", "signatureAfterChange": "     private void checkHtml(final DetailAST ast, final TextBlock comment)", "diff": ["-            if (!tag.isCloseTag()) {", "-                //We only push html tags that are allowed", "-                if (isAllowedTag(tag)) {", "-                    htmlStack.push(tag);", "-                }", "-            }", "-            else {", "+            if (tag.isCloseTag()) {", "+            else {", "+                //We only push html tags that are allowed", "+                if (isAllowedTag(tag)) {", "+                    htmlStack.push(tag);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32edc8b518273bae9c479b5e11e80d48", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "d0939d3bc93819ebc1f42642806c0265fc7908b3", "commitAfterChange": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static boolean isInitializationSequence(             DetailAST variableUsageAst, String variableName)", "signatureAfterChange": "     private static boolean isInitializationSequence(             DetailAST variableUsageAst, String variableName)", "diff": ["-                            if (!initInstanceName.isEmpty()) {", "-                                result = false;", "+                            if (initInstanceName.isEmpty()) {", "+                                initInstanceName = instanceName;", "-                                initInstanceName = instanceName;", "+                                result = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c7b405844db05c5a6796675c0af4643", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "d0939d3bc93819ebc1f42642806c0265fc7908b3", "commitAfterChange": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static List<String> validateCli(CommandLine cmdLine)", "signatureAfterChange": "     private static List<String> validateCli(CommandLine cmdLine)", "diff": ["-        if (!cmdLine.hasOption(\"c\")) {", "-            result.add(\"Must specify a config XML file.\");", "-        }", "-        else {", "+        if (cmdLine.hasOption(\"c\")) {", "+        else {", "+            result.add(\"Must specify a config XML file.\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58ddcfd0cb4d3448146e953f08d231a4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "d1f4e8d40014f53f40f045c6f8bea7ead44761c1", "commitAfterChange": "27375d081517bbf69110f3c37f73583a5d3c60fb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void validateNewLinePosion(DetailAST brace, DetailAST startToken,                                        String braceLine)", "signatureAfterChange": "     private void validateNewLinePosion(DetailAST brace, DetailAST startToken,                                        String braceLine)", "diff": ["-            if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                log(brace, MSG_KEY_LINE_NEW, \"{\", brace.getColumnNo() + 1);", "+            if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                log(brace, MSG_KEY_LINE_PREVIOUS, \"{\", brace.getColumnNo() + 1);", "-                log(brace, MSG_KEY_LINE_PREVIOUS, \"{\", brace.getColumnNo() + 1);", "+                log(brace, MSG_KEY_LINE_NEW, \"{\", brace.getColumnNo() + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f1963a1a2a2e1c009ec1f6d162452b6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "d0939d3bc93819ebc1f42642806c0265fc7908b3", "commitAfterChange": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "diff": ["-                if (!commentMatcher.find()) {", "-                    commentContents = s; // No leading asterisks, still valid", "-                    commentOffset = 0;", "-                }", "-                else {", "+                if (commentMatcher.find()) {", "+                else {", "+                    commentContents = s; // No leading asterisks, still valid", "+                    commentOffset = 0;", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0c9a0b0070771aa0afd90cbb64ea99c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "d0939d3bc93819ebc1f42642806c0265fc7908b3", "commitAfterChange": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void registerCheck(Check check)         throws CheckstyleException", "signatureAfterChange": "     private void registerCheck(Check check)         throws CheckstyleException", "diff": ["-        if (!checkTokens.isEmpty()) {", "+        if (checkTokens.isEmpty()) {", "+            tokens = check.getDefaultTokens();", "+        }", "+        else {", "-        }", "-        else {", "-            tokens = check.getDefaultTokens();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3b49572aff862c2d30e4c60f39f319a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "d0939d3bc93819ebc1f42642806c0265fc7908b3", "commitAfterChange": "86826e1fa3fe3d793ee4723bb84ee0fc4ca38df1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void processLines(FileText text)", "signatureAfterChange": "     public void processLines(FileText text)", "diff": ["-        if (!Strings.isNullOrEmpty(options.getFormat())) {", "+        if (Strings.isNullOrEmpty(options.getFormat())) {", "+            options.getReporter().log(0, EMPTY);", "+        }", "+        else {", "-        }", "-        else {", "-            options.getReporter().log(0, EMPTY);"]}]}
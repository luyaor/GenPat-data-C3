{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b41b51c03b7aa3f191b0211537ab6c7a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ca4d44b8ec320a75a84f2b0a55625e4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "e24596db9459a3592784a544b213cc7aa919a3f6", "commitAfterChange": "caa58734b9891ec51a113f861f6f1225ae6b499d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private static boolean hasEmptyLineAfter(DetailAST token)", "signatureAfterChange": "     private boolean hasEmptyLineAfter(DetailAST token)", "diff": ["-    private static boolean hasEmptyLineAfter(DetailAST token) {", "+    private boolean hasEmptyLineAfter(DetailAST token) {", "-        return token.getNextSibling().getLineNo() - lastToken.getLineNo() > 1;", "+        // Start of the next token", "+        final int nextBegin = token.getNextSibling().getLineNo();", "+        // End of current token.", "+        final int currentEnd = lastToken.getLineNo();", "+        return hasEmptyLine(currentEnd + 1, nextBegin - 1);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6de65702c2d08ea9bed9a14d42607b21", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "4010f97130bfd93d769afb5dcfa34cf4804d822b", "commitAfterChange": "e1761d121db0df2f9e31d7f3ab4337c9584adc71", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)         throws IOException", "signatureAfterChange": "     private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)         throws IOException", "diff": ["-        aRandomAccessFile.read(lastBytes);", "+        final int readBytes = aRandomAccessFile.read(lastBytes);", "+        if (readBytes != len) {", "+            throw new IOException(\"Unable to read \" + len + \" bytes, got \"", "+                    + readBytes);", "+        }"]}]}
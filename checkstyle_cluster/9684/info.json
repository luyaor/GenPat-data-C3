{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22962bea6d4e3713dc651339f58f23bc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "111ab482638b3f35f38bbbb31554751f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testEqualsWithDefault() throws Exception", "signatureAfterChange": "     @Test     public void testEqualsWithDefault() throws Exception", "diff": ["-            \"18:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"20:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"22:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"24:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"26:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"28:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"37:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"39:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"41:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"43:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"45:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"47:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"57:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"59:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"61:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"63:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"65:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"67:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"69:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"71:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"73:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"75:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"77:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"79:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "+            \"18:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"20:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"22:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"24:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"26:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"28:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"37:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"39:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"41:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"43:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"45:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"47:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"57:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"59:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"61:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"63:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"65:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"67:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"69:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"71:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"73:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"75:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"77:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"79:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26940a352c92223e9b92d6c69923ded9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testOnlyModifiers() throws Exception", "signatureAfterChange": "      @Test     public void testOnlyModifiers() throws Exception", "diff": ["-            \"8:5: Variable access definition in wrong order.\",", "-            \"13:5: Variable access definition in wrong order.\",", "-            \"18:5: Variable access definition in wrong order.\",", "-            \"21:5: Variable access definition in wrong order.\",", "-            \"27:5: Static variable definition in wrong order.\",", "-            \"27:5: Variable access definition in wrong order.\",", "-            \"34:9: Variable access definition in wrong order.\",", "-            \"45:9: Static variable definition in wrong order.\",", "-            \"45:9: Variable access definition in wrong order.\",", "-            \"80:5: Instance variable definition in wrong order.\",", "+            \"8:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"13:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"18:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"21:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"27:5: \" + getCheckMessage(MSG_STATIC),", "+            \"27:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"34:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"45:9: \" + getCheckMessage(MSG_STATIC),", "+            \"45:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"80:5: \" + getCheckMessage(MSG_INSTANCE),", "-            \"92:9: Variable access definition in wrong order.\",", "-            \"100:9: Static variable definition in wrong order.\",", "-            \"100:9: Variable access definition in wrong order.\",", "-            \"106:5: Variable access definition in wrong order.\",", "-            \"111:5: Variable access definition in wrong order.\",", "-            \"116:5: Variable access definition in wrong order.\",", "-            \"119:5: Variable access definition in wrong order.\",", "-            \"125:5: Static variable definition in wrong order.\",", "-            \"125:5: Variable access definition in wrong order.\",", "-            \"132:9: Variable access definition in wrong order.\",", "-            \"143:9: Static variable definition in wrong order.\",", "-            \"143:9: Variable access definition in wrong order.\",", "-            \"178:5: Instance variable definition in wrong order.\",", "+            \"92:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"100:9: \" + getCheckMessage(MSG_STATIC),", "+            \"100:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"106:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"111:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"116:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"119:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"125:5: \" + getCheckMessage(MSG_STATIC),", "+            \"125:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"132:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"143:9: \" + getCheckMessage(MSG_STATIC),", "+            \"143:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"178:5: \" + getCheckMessage(MSG_INSTANCE),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d440243c0ab065bf14fc3f49abb6d2b3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testOwnPattern() throws Exception", "signatureAfterChange": "      @Test     public void testOwnPattern() throws Exception", "diff": ["-            \"14:13: Fall through from previous branch of the switch statement.\",", "-            \"38:13: Fall through from previous branch of the switch statement.\",", "-            \"53:13: Fall through from previous branch of the switch statement.\",", "-            \"70:13: Fall through from previous branch of the switch statement.\",", "-            \"87:13: Fall through from previous branch of the switch statement.\",", "-            \"105:13: Fall through from previous branch of the switch statement.\",", "-            \"123:13: Fall through from previous branch of the switch statement.\",", "-            \"145:11: Fall through from previous branch of the switch statement.\",", "-            \"170:11: Fall through from previous branch of the switch statement.\",", "-            \"186:11: Fall through from previous branch of the switch statement.\",", "-            \"204:11: Fall through from previous branch of the switch statement.\",", "-            \"222:11: Fall through from previous branch of the switch statement.\",", "-            \"241:11: Fall through from previous branch of the switch statement.\",", "-            \"252:26: Fall through from previous branch of the switch statement.\",", "-            \"266:11: Fall through from previous branch of the switch statement.\",", "-            \"281:11: Fall through from previous branch of the switch statement.\",", "-            \"284:11: Fall through from previous branch of the switch statement.\",", "-            \"288:11: Fall through from previous branch of the switch statement.\",", "-            \"290:25: Fall through from previous branch of the switch statement.\",", "-            \"306:11: Fall through from previous branch of the switch statement.\",", "-            \"309:11: Fall through from previous branch of the switch statement.\",", "-            \"311:25: Fall through from previous branch of the switch statement.\",", "-            \"327:11: Fall through from previous branch of the switch statement.\",", "-            \"330:11: Fall through from previous branch of the switch statement.\",", "-            \"332:23: Fall through from previous branch of the switch statement.\",", "-            \"348:11: Fall through from previous branch of the switch statement.\",", "-            \"351:11: Fall through from previous branch of the switch statement.\",", "-            \"353:30: Fall through from previous branch of the switch statement.\",", "+            \"14:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"38:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"53:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"70:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"87:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"105:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"123:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"145:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"170:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"186:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"204:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"222:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"241:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"252:26: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"266:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"281:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"284:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"288:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"290:25: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"306:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"309:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"311:25: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"327:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"330:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"332:23: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"348:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"351:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"353:30: \" + getCheckMessage(MSG_FALL_THROUGH),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0d3571f5695691a6d94d074010e52b7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault() throws Exception", "signatureAfterChange": "     @Test     public void testDefault() throws Exception", "diff": ["-            \"8:5: Variable access definition in wrong order.\",", "-            \"13:5: Variable access definition in wrong order.\",", "-            \"18:5: Variable access definition in wrong order.\",", "-            \"21:5: Variable access definition in wrong order.\",", "-            \"27:5: Static variable definition in wrong order.\",", "-            \"27:5: Variable access definition in wrong order.\",", "-            \"34:9: Variable access definition in wrong order.\",", "-            \"45:9: Static variable definition in wrong order.\",", "-            \"45:9: Variable access definition in wrong order.\",", "-            \"54:5: Constructor definition in wrong order.\",", "-            \"80:5: Instance variable definition in wrong order.\",", "+            \"8:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"13:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"18:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"21:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"27:5: \" + getCheckMessage(MSG_STATIC),", "+            \"27:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"34:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"45:9: \" + getCheckMessage(MSG_STATIC),", "+            \"45:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"54:5: \" + getCheckMessage(MSG_CONSTRUCTOR),", "+            \"80:5: \" + getCheckMessage(MSG_INSTANCE),", "-            \"92:9: Variable access definition in wrong order.\",", "-            \"100:9: Static variable definition in wrong order.\",", "-            \"100:9: Variable access definition in wrong order.\",", "-            \"106:5: Variable access definition in wrong order.\",", "-            \"111:5: Variable access definition in wrong order.\",", "-            \"116:5: Variable access definition in wrong order.\",", "-            \"119:5: Variable access definition in wrong order.\",", "-            \"125:5: Static variable definition in wrong order.\",", "-            \"125:5: Variable access definition in wrong order.\",", "-            \"132:9: Variable access definition in wrong order.\",", "-            \"143:9: Static variable definition in wrong order.\",", "-            \"143:9: Variable access definition in wrong order.\",", "-            \"152:5: Constructor definition in wrong order.\",", "-            \"178:5: Instance variable definition in wrong order.\",", "+            \"92:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"100:9: \" + getCheckMessage(MSG_STATIC),", "+            \"100:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"106:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"111:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"116:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"119:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"125:5: \" + getCheckMessage(MSG_STATIC),", "+            \"125:5: \" + getCheckMessage(MSG_ACCESS),", "+            \"132:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"143:9: \" + getCheckMessage(MSG_STATIC),", "+            \"143:9: \" + getCheckMessage(MSG_ACCESS),", "+            \"152:5: \" + getCheckMessage(MSG_CONSTRUCTOR),", "+            \"178:5: \" + getCheckMessage(MSG_INSTANCE),"]}]}
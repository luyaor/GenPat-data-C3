{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae8bc7a732908519e1d80e3b4766a98a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0824987e185d85ccecce0acf6886b8ad", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String normalize(String aPath)", "signatureAfterChange": "     public String normalize(String aPath)", "diff": ["-        String orig = aPath;", "+        final String orig = aPath;", "-        int colon = aPath.indexOf(\":\");", "+        final int colon = aPath.indexOf(\":\");", "-                String msg = aPath + \" is not an absolute path\";", "+                final String msg = aPath + \" is not an absolute path\";", "-                String msg = aPath + \" is not an absolute path\";", "+                final String msg = aPath + \" is not an absolute path\";", "-            char[] ca = aPath.replace('/', '\\\\').toCharArray();", "-            StringBuffer sbRoot = new StringBuffer();", "+            final char[] ca = aPath.replace('/', '\\\\').toCharArray();", "+            final StringBuffer sbRoot = new StringBuffer();", "-            StringBuffer sbPath = new StringBuffer();", "+            final StringBuffer sbPath = new StringBuffer();", "-        Stack s = new Stack();", "+        final Stack s = new Stack();", "-        StringTokenizer tok = new StringTokenizer(aPath, File.separator);", "+        final StringTokenizer tok = new StringTokenizer(aPath, File.separator);", "-            String thisToken = tok.nextToken();", "+            final String thisToken = tok.nextToken();", "-        StringBuffer sb = new StringBuffer();", "+        final StringBuffer sb = new StringBuffer();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13ecaa4d1dcb4cf0b91789936a25d354", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testClassRegularClass() throws Exception", "signatureAfterChange": "      @Test     public void testClassRegularClass() throws Exception", "diff": ["-        Class<?> tokenType = Class", "+        final Class<?> tokenType = Class", "-        Class<?> regularClassType = Class", "+        final Class<?> regularClassType = Class", "-        Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(tokenType,", "-                String.class, AbstractTypeAwareCheck.class);", "+        final Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(", "+                tokenType, String.class, AbstractTypeAwareCheck.class);", "-        Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class,", "-                int.class);", "-        Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);", "+        final Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class,", "+                int.class, int.class);", "+        final Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);", "-        Object regularClass = regularClassConstructor.newInstance(token, \"sur\",", "+        final Object regularClass = regularClassConstructor.newInstance(token, \"sur\",", "-        Method toString = regularClass.getClass().getDeclaredMethod(\"toString\");", "+        final Method toString = regularClass.getClass().getDeclaredMethod(\"toString\");", "-        String result = (String) toString.invoke(regularClass);", "+        final String result = (String) toString.invoke(regularClass);", "-        Method setClazz = regularClass.getClass().getDeclaredMethod(\"setClazz\", Class.class);", "+        final Method setClazz = regularClass.getClass().getDeclaredMethod(\"setClazz\", Class.class);", "-        Class<?> arg = null;", "+        final Class<?> arg = null;", "-        Method getClazz = regularClass.getClass().getDeclaredMethod(\"getClazz\");", "+        final Method getClazz = regularClass.getClass().getDeclaredMethod(\"getClazz\");"]}]}
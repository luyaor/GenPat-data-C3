{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ac95d06b6eb9061cbc3cf9155906837", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24d09ea1176f8c633528361e49f7059b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "880ae00b7b8c90cf4ae0b66685f59b56adaf2aff", "commitAfterChange": "a66d414ae6254d11f5c6021cc804a56d250a3595", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private static boolean isEmptyType(DetailAST ast, int parentType)", "signatureAfterChange": "     private static boolean isEmptyType(DetailAST ast)", "diff": ["-    private static boolean isEmptyType(DetailAST ast, int parentType) {", "+    private static boolean isEmptyType(DetailAST ast) {", "-        return (type == TokenTypes.RCURLY || type == TokenTypes.LCURLY)", "-                && parentType == TokenTypes.OBJBLOCK;", "+        final DetailAST nextSibling = ast.getNextSibling();", "+        final DetailAST previousSibling = ast.getPreviousSibling();", "+        return type == TokenTypes.LCURLY", "+                && nextSibling.getType() == TokenTypes.RCURLY", "+            || type == TokenTypes.RCURLY", "+                && previousSibling != null", "+                && previousSibling.getType() == TokenTypes.LCURLY;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46f49a210d5cadaa575123685197edea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAfterCheck.java", "commitBeforeChange": "081f9e7f7f70a5da494c9e1185c27f1766e16acc", "commitAfterChange": "916417fc6214ab75606d2fbc1d7b511509ffe25b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+                //empty FOR_ITERATOR?", "+                if (targetAST.getType() == TokenTypes.SEMI) {", "+                    final DetailAST sibling =", "+                        (DetailAST) targetAST.getNextSibling();", "+                    if ((sibling != null)", "+                        && (sibling.getType() == TokenTypes.FOR_ITERATOR)", "+                        && (sibling.getChildCount() == 0))", "+                    {", "+                        return;", "+                    }", "+                }   "]}]}
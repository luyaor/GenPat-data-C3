{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07cfba43498f6edcfa89b4fc2291cb1e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c59c164752372a60a9792088ea59451", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ConstantNameCheck.java", "commitBeforeChange": "e44cd4ec43a25cac72924e04d7b4ca7fa9fa10ee", "commitAfterChange": "4bbe4acd319fa60dac09d28aaa9f7b18f18dee1f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        //precondition", "-        if (aAST.getType() != TokenTypes.VARIABLE_DEF) {", "-            return;", "-        }", "-", "+        // TODO: Need to consider the case of being in an interface! In that", "+        // case, does not matter if \"static\" and \"final\" keywords are there.", "+        ", "-        if (modifiers == null", "-                || !modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "-                || !modifiers.branchContains(TokenTypes.FINAL)) {", "-            return;", "-        }      ", "-        ", "-        //name check", "-        final DetailAST name = Utils.findFirstToken(aAST.getFirstChild(),", "-                                              TokenTypes.IDENT);", "-        if (name == null) {", "-            return;", "-        }", "-        // Handle the serialVersionUID constant which is used for", "-        // Serialization. Cannot enforce rules on it. :-)", "-        if (\"serialVersionUID\".equals(name.getText())) {", "-            return;", "-        }", "-        ", "-        if (!getRegexp().match(name.getText())) {", "-            log(name.getLineNo(),", "-                name.getColumnNo(),", "-                \"name.invalidPattern\",", "-                name.getText(),", "-                getFormat());", "+        if ((modifiers != null)", "+            && modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "+            && modifiers.branchContains(TokenTypes.FINAL))", "+        {", "+            //name check", "+            final DetailAST name =", "+                Utils.findFirstToken(aAST.getFirstChild(), TokenTypes.IDENT);", "+", "+            // Handle the serialVersionUID constant which is used for", "+            // Serialization. Cannot enforce rules on it. :-)", "+            if (!\"serialVersionUID\".equals(name.getText())", "+                && !getRegexp().match(name.getText()))", "+            {", "+                log(name.getLineNo(),", "+                    name.getColumnNo(),", "+                    \"name.invalidPattern\",", "+                    name.getText(),", "+                    getFormat());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb831f083344fb992bb4a859a14f299", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "79404974eff1458f4243f8acd6a08b6a8b869342", "commitAfterChange": "fe9057366308642868c25d427c3ee94411b37170", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private Checker createChecker()", "signatureAfterChange": "     private Checker createChecker()", "diff": ["+            final ClassLoader moduleClassLoader =", "+                Checker.class.getClassLoader();", "+            context.add(\"moduleClassLoader\", moduleClassLoader);", "+", "-            //load the set of package names", "-            if (mPackageNamesFile != null) {", "-                final ModuleFactory moduleFactory = PackageNamesLoader", "-                        .loadModuleFactory(mPackageNamesFile.getAbsolutePath());", "-                c.setModuleFactory(moduleFactory);", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3afb6421b658e338aaaf27a8d9cc14af", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java", "commitBeforeChange": "5976084c38134f1b364b0b29d629cd7a314f560a", "commitAfterChange": "cb8d98fb43494b7dfc415977083f9942768dcda3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void visitSlist(DetailAST ast)", "signatureAfterChange": "     private void visitSlist(DetailAST ast)", "diff": ["-            while (parent != null) {", "-                final int type = parent.getType();", "-                if (type == TokenTypes.CTOR_DEF", "-                    || type == TokenTypes.METHOD_DEF", "-                    || type == TokenTypes.INSTANCE_INIT", "-                    || type == TokenTypes.STATIC_INIT) {", "-                    if (parent == contextAST) {", "-                        context.addCount(ast.getChildCount() / 2);", "-                    }", "-                    break;", "-                }", "+            int type = parent.getType();", "+            while (type != TokenTypes.CTOR_DEF", "+                && type != TokenTypes.METHOD_DEF", "+                && type != TokenTypes.INSTANCE_INIT", "+                && type != TokenTypes.STATIC_INIT) {", "+", "+                type = parent.getType();", "+            }", "+            if (parent == contextAST) {", "+                context.addCount(ast.getChildCount() / 2);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d89d32d2ff481ea3631ad8745dd8c033", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2409e218097386b5b06464f76410d92b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "be08323f8a58f992bc61171bf53e0e51dbd21f29", "commitAfterChange": "cc355f7e108fe222d957f1dbc8c3ba4eeb7ed941", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static boolean isSingleLineIf(DetailAST literalIf)", "signatureAfterChange": "     private static boolean isSingleLineIf(DetailAST literalIf)", "diff": ["-            DetailAST block = literalIf.getLastChild();", "-            if (block.getType() != TokenTypes.LITERAL_RETURN) {", "-                block = literalIf.getLastChild().getPreviousSibling();", "+            final DetailAST literalIfLastChild = literalIf.getLastChild();", "+            final DetailAST block;", "+            if (literalIfLastChild.getType() == TokenTypes.LITERAL_ELSE) {", "+                block = literalIfLastChild.getPreviousSibling();", "+            }", "+            else {", "+                block = literalIfLastChild;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46f49a210d5cadaa575123685197edea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAfterCheck.java", "commitBeforeChange": "081f9e7f7f70a5da494c9e1185c27f1766e16acc", "commitAfterChange": "916417fc6214ab75606d2fbc1d7b511509ffe25b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+                //empty FOR_ITERATOR?", "+                if (targetAST.getType() == TokenTypes.SEMI) {", "+                    final DetailAST sibling =", "+                        (DetailAST) targetAST.getNextSibling();", "+                    if ((sibling != null)", "+                        && (sibling.getType() == TokenTypes.FOR_ITERATOR)", "+                        && (sibling.getChildCount() == 0))", "+                    {", "+                        return;", "+                    }", "+                }   "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db9cd204ebbc3cceb806ad74eaea423c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java", "commitBeforeChange": "0b2ea87e30a285e6fb8c8f2aa4b80e1802f8d865", "commitAfterChange": "da2328d0f138c2d989056bc876f8698cc53bffe3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+", "+            // empty FOR initializer?", "+            if (aAST.getType() == TokenTypes.SEMI) {", "+                final DetailAST sibling = aAST.getPreviousSibling();", "+                if ((sibling != null)", "+                        && (sibling.getType() == TokenTypes.FOR_INIT)", "+                        && (sibling.getChildCount() == 0))", "+                {", "+                    return;", "+                }", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecd31cd3f0c5f5123f875a522947f962", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java", "commitBeforeChange": "3d9f726c2d5fcc152fbfbcdeaade390b36b5fba0", "commitAfterChange": "9ae0be5921780b18dd61d17c47b05de3c867838e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (before < 0 || Character.isWhitespace(line.charAt(before))) {", "-", "-            // empty FOR initializer?", "-            if (ast.getType() == TokenTypes.SEMI) {", "-                final DetailAST sibling = ast.getPreviousSibling();", "-                if (sibling != null", "-                        && sibling.getType() == TokenTypes.FOR_INIT", "-                        && sibling.getChildCount() == 0) {", "-                    return;", "-                }", "-            }", "+        if ((before < 0 || Character.isWhitespace(line.charAt(before)))", "+                && !isInEmptyForInitializer(ast)) {"]}]}
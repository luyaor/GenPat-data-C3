{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "524a16ba61ce4796f14fa29288de14b9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "400f7b7d7cd4ba1b0b663538adb35cb3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "0dbbf3b83a9832eb381db6dc777916e9d7fa676f", "commitAfterChange": "16ae5032c5e25ad35475c9a0f2de578ea6e640e5", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean isSamePackage(String className, int clsNameLen, int pkgNameLen,                                   String illegal, int illegalLen)", "signatureAfterChange": "     private boolean isSamePackage(String className, int pkgNameLen, String illegal)", "diff": ["-    private boolean isSamePackage(String className, int clsNameLen, int pkgNameLen,", "-                                  String illegal, int illegalLen) {", "+    private boolean isSamePackage(String className, int pkgNameLen, String illegal) {", "-                && clsNameLen == illegalLen - pkgNameLen - 1", "+                && className.length() == illegal.length() - pkgNameLen - 1"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5c227a5712e15811353dced8eb3f528", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/CheckTest.java", "commitBeforeChange": "d56a2a366c6f9e3e8639d492d548ae562b75dc81", "commitAfterChange": "77c3f223267aab46a071d93342580620c614e269", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testGetAcceptable()", "signatureAfterChange": "      @Test     public void testGetAcceptable()", "diff": ["+", "+    @Test", "-                return  ArrayUtils.EMPTY_INT_ARRAY;", "-            }", "-", "-            @Override", "-            public int[] getRequiredTokens() {", "-                return  ArrayUtils.EMPTY_INT_ARRAY;", "+                return super.getAcceptableTokens();", "-        Assert.assertNotNull(check.getAcceptableTokens());", "+        Assert.assertArrayEquals(ArrayUtils.EMPTY_INT_ARRAY, check.getAcceptableTokens());"]}]}
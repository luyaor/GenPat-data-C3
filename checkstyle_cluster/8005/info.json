{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86896fc0e3ac885194a643d4b0608925", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e4587f5571829db7373e9876b49582c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "signatureAfterChange": "     private void checkLinesIndent(LineSet lines,                                   IndentLevel indentLevel,                                   boolean firstLineMatches,                                   int firstLine)", "diff": ["-    private void checkLinesIndent(LineSet aLines,", "-                                  IndentLevel aIndentLevel,", "-                                  boolean aFirstLineMatches,", "-                                  int aFirstLine)", "+    private void checkLinesIndent(LineSet lines,", "+                                  IndentLevel indentLevel,", "+                                  boolean firstLineMatches,", "+                                  int firstLine)", "-        if (aLines.isEmpty()) {", "+        if (lines.isEmpty()) {", "-        final int startLine = aLines.firstLine();", "-        final int endLine = aLines.lastLine();", "-        final int startCol = aLines.firstLineCol();", "+        final int startLine = lines.firstLine();", "+        final int endLine = lines.lastLine();", "+        final int startCol = lines.firstLineCol();", "-            getLineStart(mIndentCheck.getLine(startLine - 1));", "+            getLineStart(indentCheck.getLine(startLine - 1));", "-            checkSingleLine(startLine, startCol, aIndentLevel,", "-                aFirstLineMatches);", "+            checkSingleLine(startLine, startCol, indentLevel,", "+                firstLineMatches);", "-        IndentLevel theLevel = aIndentLevel;", "-        if (aFirstLineMatches", "-            || ((aFirstLine > mMainAst.getLineNo()) && shouldIncreaseIndent()))", "+        IndentLevel theLevel = indentLevel;", "+        if (firstLineMatches", "+            || ((firstLine > mainAst.getLineNo()) && shouldIncreaseIndent()))", "-            theLevel = new IndentLevel(aIndentLevel, getBasicOffset());", "+            theLevel = new IndentLevel(indentLevel, getBasicOffset());", "-            final Integer col = aLines.getStartColumn(i);", "+            final Integer col = lines.getStartColumn(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "506c0c79df206adaf4608f43c5d62601", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void logWarningMessage(DetailAST aCurrentNode, int aCurrentIndent)", "signatureAfterChange": "     private void logWarningMessage(DetailAST currentNode, int currentIndent)", "diff": ["-    private void logWarningMessage(DetailAST aCurrentNode, int aCurrentIndent)", "+    private void logWarningMessage(DetailAST currentNode, int currentIndent)", "-        if (mForceStrictCondition) {", "-            if (aCurrentNode.getColumnNo() != aCurrentIndent) {", "-                mIndentCheck.indentationLog(aCurrentNode.getLineNo(),", "-                        \"indentation.error\", aCurrentNode.getText(),", "-                        aCurrentNode.getColumnNo(), aCurrentIndent);", "+        if (forceStrictCondition) {", "+            if (currentNode.getColumnNo() != currentIndent) {", "+                indentCheck.indentationLog(currentNode.getLineNo(),", "+                        \"indentation.error\", currentNode.getText(),", "+                        currentNode.getColumnNo(), currentIndent);", "-            if (aCurrentNode.getColumnNo() < aCurrentIndent) {", "-                mIndentCheck.indentationLog(aCurrentNode.getLineNo(),", "-                        \"indentation.error\", aCurrentNode.getText(),", "-                        aCurrentNode.getColumnNo(), aCurrentIndent);", "+            if (currentNode.getColumnNo() < currentIndent) {", "+                indentCheck.indentationLog(currentNode.getLineNo(),", "+                        \"indentation.error\", currentNode.getText(),", "+                        currentNode.getColumnNo(), currentIndent);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfbdf00de161c769e27975674a9a0ed4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699133c8a46b44a3c0552491d407e94c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java", "commitBeforeChange": "a09875b9f9ff2d59416331a989b09335ee57c89c", "commitAfterChange": "ef1e65fb5128452cd8a19f82d09455b06a021b65", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static boolean isEqualsMethod(DetailAST ast)", "signatureAfterChange": "     public static boolean isEqualsMethod(DetailAST ast)", "diff": ["-        if (ast.getType() != TokenTypes.METHOD_DEF) {", "-            // A node must be method def", "-            return false;", "-        }", "+        boolean equalsMethod = false;", "-        // non-static, non-abstract?", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "-            || modifiers.branchContains(TokenTypes.ABSTRACT)) {", "-            return false;", "-        }", "+        if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+            final boolean staticOrAbstract = modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "+                    || modifiers.branchContains(TokenTypes.ABSTRACT);", "-        // named \"equals\"?", "-        final DetailAST nameNode = ast.findFirstToken(TokenTypes.IDENT);", "-        final String name = nameNode.getText();", "-        if (!\"equals\".equals(name)) {", "-            return false;", "-        }", "+            if (!staticOrAbstract) {", "+                final DetailAST nameNode = ast.findFirstToken(TokenTypes.IDENT);", "+                final String name = nameNode.getText();", "-        // one parameter?", "-        final DetailAST paramsNode = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        return paramsNode.getChildCount() == 1;", "+                if (\"equals\".equals(name)) {", "+                    // one parameter?", "+                    final DetailAST paramsNode = ast.findFirstToken(TokenTypes.PARAMETERS);", "+                    equalsMethod = paramsNode.getChildCount() == 1;", "+                }", "+            }", "+        }", "+        return equalsMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f2c2e00515db1c3d9cb82cadc2099e8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "857dc7720f31430e2ba61878e0bfb3dc11ceb396", "commitAfterChange": "3ba66c7d22f0d75412a851717d976f875ef9c4d0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["+        final boolean isStaticAndNotLastImport = isStatic && !lastImportStatic;", "+        final boolean isNotStaticAndLastImport = !isStatic && lastImportStatic;", "-                if (!isStatic && lastImportStatic) {", "+                if (isNotStaticAndLastImport) {", "-                doVisitToken(ident, isStatic, !lastImportStatic && isStatic);", "+                doVisitToken(ident, isStatic, isStaticAndNotLastImport);", "-                doVisitToken(ident, isStatic, !lastImportStatic && isStatic);", "+                doVisitToken(ident, isStatic, isStaticAndNotLastImport);", "-                if (isStatic && !lastImportStatic) {", "+                if (isStaticAndNotLastImport) {", "-                doVisitToken(ident, isStatic, lastImportStatic && !isStatic);", "+                doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "-                doVisitToken(ident, isStatic, lastImportStatic && !isStatic);", "+                doVisitToken(ident, isStatic, isNotStaticAndLastImport);"]}]}
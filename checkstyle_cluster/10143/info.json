{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f2e72a6b86081b714d0d3373d70cf10", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "792c5ab1342a4cd52664c6315b97ae3b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "9dbc71956635b56a20780d484454e177897b5788", "commitAfterChange": "71d0a829e42bfcbfa3fd692a29abf8796e467fc9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final DetailAST startToken;", "-        final DetailAST brace;", "+        DetailAST startToken = null;", "+        DetailAST brace = null;", "-            case TokenTypes.CTOR_DEF :", "-            case TokenTypes.METHOD_DEF :", "+            case TokenTypes.CTOR_DEF:", "+            case TokenTypes.METHOD_DEF:", "-", "-            case TokenTypes.INTERFACE_DEF :", "-            case TokenTypes.CLASS_DEF :", "-            case TokenTypes.ANNOTATION_DEF :", "-            case TokenTypes.ENUM_DEF :", "-            case TokenTypes.ENUM_CONSTANT_DEF :", "+            case TokenTypes.INTERFACE_DEF:", "+            case TokenTypes.CLASS_DEF:", "+            case TokenTypes.ANNOTATION_DEF:", "+            case TokenTypes.ENUM_DEF:", "+            case TokenTypes.ENUM_CONSTANT_DEF:", "-                    ? null", "-                    : objBlock.getFirstChild();", "+                        ? null", "+                        : objBlock.getFirstChild();", "-", "-            case TokenTypes.LITERAL_IF :", "-            case TokenTypes.STATIC_INIT :", "+            case TokenTypes.LITERAL_IF:", "+            case TokenTypes.STATIC_INIT:", "-", "-            case TokenTypes.LITERAL_ELSE :", "+            case TokenTypes.LITERAL_ELSE:", "-                brace =", "-                    candidate.getType() == TokenTypes.SLIST", "-                    ? candidate", "-                    : null; // silently ignore", "+                brace = candidate.getType() == TokenTypes.SLIST", "+                        ? candidate", "+                        : null; // silently ignore", "+            default:", "+//                ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,", "+//                TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, TokenTypes.LITERAL_DO only.", "+//                It has been done to improve coverage to 100%. I couldn't replace it with", "+//                if-else-if block because code was ugly and didn't pass pmd check.", "-            case TokenTypes.LITERAL_SWITCH :", "-", "-            default :", "-                startToken = null;", "-                brace = null;", "-        if (brace != null && startToken != null) {", "+        if (brace != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a38b96f01b806a744e9efd632255497", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java", "commitBeforeChange": "4287706cb4a0f7b8ab39bb6d5314b8b40841026a", "commitAfterChange": "0868085098dfde138eee8817c66cd4d214633403", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean containsJavadocTag(final TextBlock javadoc)", "signatureAfterChange": "     private boolean containsJavadocTag(final TextBlock javadoc)", "diff": ["-                // Look for the rest of the comment if all we saw was", "-                // the tag and the name. Stop when we see '*/' (end of", "-                // Javadoc), '@' (start of next tag), or anything that's", "-                // not whitespace or '*' characters.", "+                found = validateTagAtTheRestOfComment(lines, found, currentLine, i);", "-                for (int reindex = i + 1;", "-                    reindex < lines.length; reindex++) {", "-                    final Matcher multilineCont =", "-                        MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT", "-                        .matcher(lines[reindex]);", "+            }", "+        }", "+        return found;", "+    }", "-                    if (multilineCont.find()) {", "-                        reindex = lines.length;", "-                        final String lFin = multilineCont.group(1);", "-                        if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)", "-                            && !lFin.equals(MissingDeprecatedCheck.END_JAVADOC)) {", "-                            if (found) {", "-                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,", "-                                    JavadocTagInfo.DEPRECATED.getText());", "-                            }", "-                            found = true;", "-                        }", "-                        else {", "-                            this.log(currentLine, MSG_KEY_JAVADOC_MISSING);", "-                            if (found) {", "-                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,", "-                                    JavadocTagInfo.DEPRECATED.getText());", "-                            }", "-                            found = true;", "-                        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c349db7136fe9b3f9c449d942a41a24f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ca6b1ca366dfbff8dd493d318fa0647", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java", "commitBeforeChange": "20caaeb1488a4dacc770f22d463228eeb213d9ad", "commitAfterChange": "3ded7a11556a6258bcddd3ebe2d69a2058675601", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     VerifierImpl(String aParamPat,                  String aStaticPat,                  String aStaticFinalPat,                  String aMemberPat,                  String aTypePat,                  int aMaxLineLength,                  boolean aAllowTabs,                  boolean aAllowProtected,                  boolean aAllowNoAuthor,                  boolean aRelaxJavadoc,                  boolean aCheckImports,                  String[] aHeaderLines,                  int aHeaderIgnoreLineNo)         throws RESyntaxException", "signatureAfterChange": "     VerifierImpl(Configuration aConfig)", "diff": ["-    VerifierImpl(String aParamPat,", "-                 String aStaticPat,", "-                 String aStaticFinalPat,", "-                 String aMemberPat,", "-                 String aTypePat,", "-                 int aMaxLineLength,", "-                 boolean aAllowTabs,", "-                 boolean aAllowProtected,", "-                 boolean aAllowNoAuthor,", "-                 boolean aRelaxJavadoc,", "-                 boolean aCheckImports,", "-                 String[] aHeaderLines,", "-                 int aHeaderIgnoreLineNo)", "-        throws RESyntaxException", "+    VerifierImpl(Configuration aConfig)", "-        mParamPat = aParamPat;", "-        mParamRegexp = new RE(aParamPat);", "-        mStaticPat = aStaticPat;", "-        mStaticRegexp = new RE(aStaticPat);", "-        mStaticFinalPat = aStaticFinalPat;", "-        mStaticFinalRegexp = new RE(aStaticFinalPat);", "-        mMemberPat = aMemberPat;", "-        mMemberRegexp = new RE(aMemberPat);", "-        mTypePat = aTypePat;", "-        mTypeRegexp = new RE(aTypePat);", "-        mMaxLineLength = aMaxLineLength;", "-        mAllowTabs = aAllowTabs;", "-        mAllowProtected = aAllowProtected;", "-        mAllowNoAuthor = aAllowNoAuthor;", "-        mRelaxJavadoc = aRelaxJavadoc;", "-        mCheckImports = aCheckImports;", "-        mHeaderLines = aHeaderLines;", "-        mHeaderIgnoreLineNo = aHeaderIgnoreLineNo;", "+        mConfig = aConfig;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1604931835987958aeae988afbb3bb31", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "897c4164bd289ea45d5c600f11816f4379bd4421", "commitAfterChange": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkTag(             int aLineNo,             String[] aCmt,             String aTag,             RE aTagRE,             RE aFormatRE,             String aFormat)", "signatureAfterChange": "     private void checkTag(int aLineNo, Vector aTags, String aTag,                           RE aFormatRE, String aFormat)", "diff": ["-    private void checkTag(", "-            int aLineNo,", "-            String[] aCmt,", "-            String aTag,", "-            RE aTagRE,", "-            RE aFormatRE,", "-            String aFormat)", "+    private void checkTag(int aLineNo, Vector aTags, String aTag,", "+                          RE aFormatRE, String aFormat)", "-        if (aTagRE == null) {", "+        if (aFormatRE == null) {", "-        for (int i = 0; i < aCmt.length; i++) {", "-            final String s = aCmt[i];", "-            if (aTagRE.match(s)) {", "-                tagCount += 1;", "-                final int contentStart = aTagRE.getParenStart(1);", "-                final String content = s.substring(contentStart);", "-                if (!aFormatRE.match(content)) {", "-                    log(aLineNo, \"type.tagFormat\", aTag, aFormat);", "+        for (int i = aTags.size() - 1; i >= 0; i--) {", "+            final JavadocTag tag = (JavadocTag) aTags.get(i);", "+            if (tag.getTag().equals(aTag)) {", "+                tagCount++;", "+                if (!aFormatRE.match(tag.getArg1())) {", "+                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);", "-", "-            log(aLineNo, \"type.missingTag\", aTag);", "+            log(aLineNo, \"type.missingTag\", \"@\" + aTag);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7d1323d663abc4d8e8c1510b3e8769", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkTag(             int aLineNo,             String[] aComment,             String aTag,             Pattern aTagRE,             Pattern aFormatRE,             String aFormat)", "signatureAfterChange": "     private void checkTag(             int lineNo,             String[] comment,             String tag,             Pattern tagRE,             Pattern formatRE,             String format)", "diff": ["-            int aLineNo,", "-            String[] aComment,", "-            String aTag,", "-            Pattern aTagRE,", "-            Pattern aFormatRE,", "-            String aFormat)", "+            int lineNo,", "+            String[] comment,", "+            String tag,", "+            Pattern tagRE,", "+            Pattern formatRE,", "+            String format)", "-        if (aTagRE == null) {", "+        if (tagRE == null) {", "-        for (int i = 0; i < aComment.length; i++) {", "-            final String s = aComment[i];", "-            final Matcher matcher = aTagRE.matcher(s);", "+        for (int i = 0; i < comment.length; i++) {", "+            final String s = comment[i];", "+            final Matcher matcher = tagRE.matcher(s);", "-                if ((aFormatRE != null) && !aFormatRE.matcher(content).find()) {", "-                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,", "-                        aFormat);", "+                if ((formatRE != null) && !formatRE.matcher(content).find()) {", "+                    log(lineNo + i - comment.length, \"type.tagFormat\", tag,", "+                        format);", "-                    logTag(aLineNo + i - aComment.length, aTag, content);", "+                    logTag(lineNo + i - comment.length, tag, content);", "-            log(aLineNo, \"type.missingTag\", aTag);", "+            log(lineNo, \"type.missingTag\", tag);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcfa095bf770c9048bfa42e55be737c5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "317cf797fb914298d52eb4d45cbf2081", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/coding/InputModifiedControl.java", "commitBeforeChange": "3a20dbe8edafe0cca300b7b9dfa48effa9a36a06", "commitAfterChange": "5026b7228df4e3d9b79d13f27846987247f9e922", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     void method1()", "signatureAfterChange": "     void method1()", "diff": ["+        for(int i=0;i < 10;) {", "+            i++;", "+        }", "+        for (int i = 0, l = 0,m=0; l < 10; i++,m=m+2) {", "+            l++;", "+            m++;", "+        }", "+        for (int i = 0; i < 10; ) {", "+            i = 11;", "+        }", "+        int w=0;", "+        for (int i=0;i<10; java.sql.Date.valueOf(\"\"),this.i++,w++) {", "+            i++;", "+            w++;", "+        }", "+        for (int i=0,k=0; i<10 && k < 10; ++i,++k) {", "+            i = i + 3;", "+            k = k + 4;", "+        }", "+        for (int i = 0,j = 0 ; i <10; i++) {", "+            j++;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64be4c049ddb7b5dca6b8d0da12b1381", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "28a4f2fe029422414814eeb6858f0b9c0cef7039", "commitAfterChange": "40f4c37a21b1c8444f39f12c5f92e79af10be34f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "         public long[] convertLines(String[] aOriginalLines)", "signatureAfterChange": "         public long[] convertLines(String[] aOriginalLines)", "diff": ["-            final long[] checkSums = new long[aOriginalLines.length];", "-            for (int i = 0; i < aOriginalLines.length; i++) {", "-                final String line = aOriginalLines[i].trim();", "+            final int lineCount = aOriginalLines.length;", "+            final long[] checkSums = new long[lineCount];", "+            for (int i = 0; i < lineCount; i++) {", "+                final String line = aOriginalLines[i];", "-            return checkSums;", "+            final int retLen = Math.max(0, lineCount - mMin + 1);", "+            final long[] ret = new long[retLen];", "+", "+            for (int i = 0; i < retLen; i++) {", "+                long blockChecksum = 0;", "+                for (int j = 0; j < mMin; j++) {", "+                    final long checksum = checkSums[i + j];", "+                    if (checksum == IGNORE) {", "+                        blockChecksum = IGNORE;", "+                        break;", "+                    }", "+                    blockChecksum += (j + 1) * BIG_PRIME * checksum;", "+                }", "+                ret[i] = blockChecksum;", "+            }", "+            return ret;"]}]}
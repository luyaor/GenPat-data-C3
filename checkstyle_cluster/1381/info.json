{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6901fa70ddbdf1ee72d64b5843106c8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0171c6a221198c95b88c9f61827689b9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkType()", "signatureAfterChange": "     private void checkType()", "diff": ["-        DetailAST type = getMainAst().findFirstToken(TokenTypes.TYPE);", "-        DetailAST ident = ExpressionHandler.getFirstToken(type);", "-        int columnNo = expandedTabsColumnNo(ident);", "+        final DetailAST type = getMainAst().findFirstToken(TokenTypes.TYPE);", "+        final DetailAST ident = ExpressionHandler.getFirstToken(type);", "+        final int columnNo = expandedTabsColumnNo(ident);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55e80fac2fe79c17b81262540f50008c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        EmptyForIteratorPadCheck emptyForIteratorPadCheckObj = new EmptyForIteratorPadCheck();", "-        int[] actual = emptyForIteratorPadCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final EmptyForIteratorPadCheck emptyForIteratorPadCheckObj = new EmptyForIteratorPadCheck();", "+        final int[] actual = emptyForIteratorPadCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "588a1752a9fcdb342705990ceb8db6da", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void setIllegalClassNames(String[] aClassNames)", "signatureAfterChange": "     public void setIllegalClassNames(String[] aClassNames)", "diff": ["-            String name = aClassNames[i];", "+            final String name = aClassNames[i];", "-            int lastDot = name.lastIndexOf(\".\");", "+            final int lastDot = name.lastIndexOf(\".\");", "-                String shortName = name.substring(name.lastIndexOf(\".\") + 1);", "+                final String shortName =", "+                    name.substring(name.lastIndexOf(\".\") + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69e5bd14dd511d991f422a2698575cb5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "       public void openFile(File aFile, final Component aParent)", "signatureAfterChange": "       public void openFile(File aFile, final Component aParent)", "diff": ["-                String[] sourceLines = Utils.getLines(aFile.getAbsolutePath());", "+                final String[] sourceLines = Utils.getLines(aFile.getAbsolutePath());", "-            catch (IOException ex) {", "+            catch (final IOException ex) {", "-            catch (ANTLRException ex) {", "+            catch (final ANTLRException ex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8409abc242e1810395789c862dafcc22", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void correctTest() throws Exception", "signatureAfterChange": "      @Test     public void correctTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "-        String filePath = builder.getFilePath(\"IndentationCorrectInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "+        final String filePath = builder.getFilePath(\"IndentationCorrectInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dd9545a31399ed02ab176171be4cd97", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void javadocParagraphCorrectTest() throws Exception", "signatureAfterChange": "      @Test     public void javadocParagraphCorrectTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"JavadocParagraph\");", "-        String filePath = builder.getFilePath(\"InputCorrectJavadocParagraphCheck\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"JavadocParagraph\");", "+        final String filePath = builder.getFilePath(\"InputCorrectJavadocParagraphCheck\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5978511b06d94cc0708cb6264d0503c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/ClassMethodTypeParameterNameTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testMethodDefault() throws Exception", "signatureAfterChange": "      @Test     public void testMethodDefault() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"MethodTypeParameterName\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"MethodTypeParameterName\");", "-        String filePath = builder.getFilePath(\"MethodTypeParameterNameInput\");", "+        final String filePath = builder.getFilePath(\"MethodTypeParameterNameInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e7d5aa19ffd195dbb68d48f31d5529", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aDetailAST)", "signatureAfterChange": "     public void visitToken(DetailAST aDetailAST)", "diff": ["-        DetailAST paramDef =", "+        final DetailAST paramDef =", "-        DetailAST excType = paramDef.findFirstToken(TokenTypes.TYPE);", "-        FullIdent ident = CheckUtils.createFullType(excType);", "+        final DetailAST excType = paramDef.findFirstToken(TokenTypes.TYPE);", "+        final FullIdent ident = CheckUtils.createFullType(excType);"]}]}
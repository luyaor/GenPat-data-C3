{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1aa00d0180b165a2c7d6889c0899a365", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12a87a72d8577691453dabc953d3d6e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "f34eba11cbd8559d4d06f96e19affa70abaf86ff", "commitAfterChange": "0e3fe5643667a53079dbd114e5b1e9aa91fde083", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     void destroy()", "signatureAfterChange": "     void destroy()", "diff": ["+", "+        // close all streamable listeners", "+        final Iterator it = mListeners.iterator();", "+        while (it.hasNext()) {", "+            final Object obj = it.next();", "+            if (obj instanceof Streamable) {", "+                final Streamable str = (Streamable) obj;", "+                final OutputStream os = str.getOutputStream();", "+                // close only those that can be closed...", "+                if ((os != System.out) && (os != System.err) && (os != null)) {", "+                    try  {", "+                        os.flush();", "+                        os.close();", "+                    }", "+                    catch (IOException ignored) {", "+                    }", "+                }", "+            }", "+            it.remove();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80c5d6e1f1d47894022e566698b23a77", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "b3133035a4fa0e086dfb0dfbefbc7f1540521bbc", "commitAfterChange": "add2bdfb27494bff5fa9c305d9782f57c6170b18", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void destroy()", "signatureAfterChange": "     public void destroy()", "diff": ["-", "-        // close all listeners", "-        final Iterator it = mListeners.iterator();", "-        while (it.hasNext()) {", "-            final AuditListener listener = (AuditListener) it.next();", "-            final OutputStream os = listener.getOutputStream();", "-            // close only those that can be closed...", "-            if ((os != System.out) && (os != System.err) && (os != null)) {", "-                try  {", "-                    os.flush();", "-                    os.close();", "-                }", "-                catch (IOException ex) {", "-                    ex.printStackTrace();", "-                }", "-            }", "-            it.remove();", "-        }", "+        mListeners.clear();"]}]}
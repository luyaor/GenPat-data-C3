{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66b0b81580ebcf202eb4a639c9f780ca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b452108ff0cbc217f39a68010a6f4cf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "commitBeforeChange": "1116ce8c8cfdfbdd1445a7f123dbe89467824077", "commitAfterChange": "cd7d040b4d2c4a80e87ef9b5be9bbd964f19e97d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected AbstractClassCouplingCheck(int aDefaultMax)", "signatureAfterChange": "     protected AbstractClassCouplingCheck(int aDefaultMax)", "diff": ["-", "-        mIgnoredClassNames.add(\"boolean\");", "-        mIgnoredClassNames.add(\"byte\");", "-        mIgnoredClassNames.add(\"char\");", "-        mIgnoredClassNames.add(\"double\");", "-        mIgnoredClassNames.add(\"float\");", "-        mIgnoredClassNames.add(\"int\");", "-        mIgnoredClassNames.add(\"long\");", "-        mIgnoredClassNames.add(\"short\");", "-        mIgnoredClassNames.add(\"void\");", "-        mIgnoredClassNames.add(\"Boolean\");", "-        mIgnoredClassNames.add(\"Byte\");", "-        mIgnoredClassNames.add(\"Character\");", "-        mIgnoredClassNames.add(\"Double\");", "-        mIgnoredClassNames.add(\"Float\");", "-        mIgnoredClassNames.add(\"Integer\");", "-        mIgnoredClassNames.add(\"Long\");", "-        mIgnoredClassNames.add(\"Object\");", "-        mIgnoredClassNames.add(\"Short\");", "-        mIgnoredClassNames.add(\"String\");", "-        mIgnoredClassNames.add(\"StringBuffer\");", "-        mIgnoredClassNames.add(\"Void\");", "-        mIgnoredClassNames.add(\"ArrayIndexOutOfBoundsException\");", "-        mIgnoredClassNames.add(\"Exception\");", "-        mIgnoredClassNames.add(\"RuntimeException\");", "-        mIgnoredClassNames.add(\"IllegalArgumentException\");", "-        mIgnoredClassNames.add(\"IllegalStateException\");", "-        mIgnoredClassNames.add(\"IndexOutOfBoundsException\");", "-        mIgnoredClassNames.add(\"NullPointerException\");", "-        mIgnoredClassNames.add(\"Throwable\");", "-        mIgnoredClassNames.add(\"SecurityException\");", "-        mIgnoredClassNames.add(\"UnsupportedOperationException\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3b5a451451dc046e0dfde877edc1f69", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "d6bdd7ee798c9c3b721483cae4efb8faa97c8f1c", "commitAfterChange": "561df9fc0c36be06c558049afad7467dbb0130ad", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode)", "signatureAfterChange": "     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode)", "diff": ["-        final JavadocNodeImpl rootJavadocNode = createJavadocNode(parseTreeNode, null, -1);", "-", "-        int childCount = parseTreeNode.getChildCount();", "-        JavadocNodeImpl[] children = new JavadocNodeImpl[childCount];", "-", "-        for (int i = 0; i < childCount; i++) {", "-            final JavadocNodeImpl child = createJavadocNode(parseTreeNode.getChild(i),", "-                    rootJavadocNode, i);", "-            children[i] = child;", "-        }", "-        rootJavadocNode.setChildren(children);", "+        final JavadocNodeImpl rootJavadocNode = createRootJavadocNode(parseTreeNode);", "-            children = (JavadocNodeImpl[]) currentJavadocParent.getChildren();", "-            childCount = children.length;", "+            final JavadocNodeImpl[] children =", "+                    (JavadocNodeImpl[]) currentJavadocParent.getChildren();", "-            for (int i = 0; i < childCount; i++) {", "-                final JavadocNodeImpl currentJavadocNode = children[i];", "-                final ParseTree currentParseTreeNodeChild = parseTreeParent.getChild(i);", "+            insertChildrenNodes(children, parseTreeParent);", "-                final JavadocNodeImpl[] subChildren =", "-                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];", "-", "-                for (int j = 0; j < subChildren.length; j++) {", "-                    final JavadocNodeImpl child =", "-                            createJavadocNode(currentParseTreeNodeChild.getChild(j),", "-                                    currentJavadocNode, j);", "-", "-                    subChildren[j] = child;", "-                }", "-                currentJavadocNode.setChildren(subChildren);", "-            }", "-", "-            if (childCount > 0) {", "+            if (children.length > 0) {"]}]}
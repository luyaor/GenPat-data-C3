{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a8b50cf6e42c5cba530c11d97a371f8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b762e4ca4c43b310ee54b4837b2f6e28", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "346387c717048391485fb28f877531aab1095de1", "commitAfterChange": "f020066f8bdfb378df36904af3df8b5bc48858fd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int process(List<File> files) throws CheckstyleException", "signatureAfterChange": "     public int process(List<File> files) throws CheckstyleException", "diff": ["-            if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {", "-                continue;", "-            }", "-            final String fileName = file.getAbsolutePath();", "-            fireFileStarted(fileName);", "-            final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "-                final FileText theText = new FileText(file.getAbsoluteFile(),", "-                        charset);", "-                for (final FileSetCheck fsc : fileSetChecks) {", "-                    fileMessages.addAll(fsc.process(file, theText));", "+                if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {", "+                    continue;", "+                final String fileName = file.getAbsolutePath();", "+                fireFileStarted(fileName);", "+                final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "+                try {", "+                    final FileText theText = new FileText(file.getAbsoluteFile(),", "+                            charset);", "+                    for (final FileSetCheck fsc : fileSetChecks) {", "+                        fileMessages.addAll(fsc.process(file, theText));", "+                    }", "+                }", "+                catch (final IOException ioe) {", "+                    LOG.debug(\"IOException occurred.\", ioe);", "+                    fileMessages.add(new LocalizedMessage(0,", "+                            Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",", "+                            new String[] {ioe.getMessage()}, null, getClass(),", "+                            null));", "+                }", "+                fireErrors(fileName, fileMessages);", "+                fireFileFinished(fileName);", "-            catch (final IOException ioe) {", "-                LOG.debug(\"IOException occurred.\", ioe);", "-                fileMessages.add(new LocalizedMessage(0,", "-                        Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",", "-                        new String[] {ioe.getMessage()}, null, getClass(),", "-                        null));", "+            catch (Exception ex) {", "+                // We need to catch all exception to put a reason failure(file name) in exception", "+                throw new CheckstyleException(\"Exception was thrown while processing \"", "+                        + file.getPath(), ex);", "-            fireErrors(fileName, fileMessages);", "-            fireFileFinished(fileName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6876c83e995caa33970a312b2b475be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "5f0d69b64d947d8ab99e8303266e68238592e00a", "commitAfterChange": "5ce7d2562fa583fdb812c6742b1198d0c99ccd6a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     void registerCheck(Check aCheck)            throws CheckstyleException", "signatureAfterChange": "     void registerCheck(Check aCheck)            throws CheckstyleException", "diff": ["-                String token = (String) it.next();", "-                int tokenId = TokenTypes.getTokenId(token);", "-                if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {", "-                    registerCheck(token, aCheck);", "+                final String token = (String) it.next();", "+                try {", "+                    int tokenId = TokenTypes.getTokenId(token);                    ", "+                    if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {", "+                        registerCheck(token, aCheck);", "+                    }", "+                    // TODO: else error message?", "-                // TODO: else error message?", "+                catch (IllegalArgumentException ex) {", "+                    throw new CheckstyleException(\"illegal token \\\"\"", "+                        + token + \"\\\" in check \" + aCheck);", "+                }"]}]}
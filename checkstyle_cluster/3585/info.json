{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5df16044cea90bc2fe240c3df819ab0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51ff8c724ca63046f7a673056ea1376d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1c7341013d0e8a34498eb49ccdb4e91419f13280", "commitAfterChange": "cd89321522d9bf7fc10547e743fb8bbb4c993791", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected boolean isSubclass(FullIdent aChild, FullIdent aParent)", "signatureAfterChange": "     protected boolean isSubclass(Class aChild, Class aParent)", "diff": ["-    protected boolean isSubclass(FullIdent aChild, FullIdent aParent)", "+    protected boolean isSubclass(Class aChild, Class aParent)", "-        final ClassResolver cr = getClassResolver();", "-        try {", "-            final Class childClass = cr.resolve(aChild.getText());", "-            try {", "-                final Class parentClass = cr.resolve(aParent.getText());", "-                return parentClass.isAssignableFrom(childClass);", "-            }", "-            catch (ClassNotFoundException e) {", "-                log(aChild.getLineNo(), aChild.getColumnNo(),", "-                    \"redundant.throws.classInfo\",", "-                    aParent.getText());", "-            }", "-        }", "-        catch (ClassNotFoundException e) {", "-            log(aChild.getLineNo(), aChild.getColumnNo(),", "-                \"redundant.throws.classInfo\",", "-                aChild.getText());", "-        }", "-", "-        return true;", "+        return (aParent != null) && (aChild != null)", "+            &&  aParent.isAssignableFrom(aChild);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "563939dec0ba54c49f2d238365d6ab87", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "0868085098dfde138eee8817c66cd4d214633403", "commitAfterChange": "ae0e7def779cddabf1e93ee744b9b341ef27647f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "signatureAfterChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "diff": ["-                // not on the same line", "-                if (startToken.getLineNo() + 1 == brace.getLineNo()) {", "-                    if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                        log(brace.getLineNo(), brace.getColumnNo(),", "-                                MSG_KEY_LINE_NEW, \"{\");", "-                    }", "-                    else if (prevLineLen + 2 <= maxLineLength) {", "-                        log(brace.getLineNo(), brace.getColumnNo(),", "-                                MSG_KEY_LINE_PREVIOUS, \"{\");", "-                    }", "-                }", "-                else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                    log(brace.getLineNo(), brace.getColumnNo(),", "-                            MSG_KEY_LINE_NEW, \"{\");", "-                }", "+", "+                validateNewLinePosion(brace, startToken, braceLine, prevLineLen);", "+"]}]}
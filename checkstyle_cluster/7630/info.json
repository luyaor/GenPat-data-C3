{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1914ea9a443f7690510b9fd0d451cf9f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "217451246ab20f6f11a2121a3bf9e4ce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "ef1e65fb5128452cd8a19f82d09455b06a021b65", "commitAfterChange": "4913b287c0739f88eed8bea42e63d416c3e1cf7c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST rootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-        int groupNumber = customImportOrderRules.indexOf(currentGroup);", "-        String previousImport = null;", "+        int currentGroupNumber = customImportOrderRules.indexOf(currentGroup);", "+        String previousImportFromCurrentGroup = null;", "-            final String fullImportIdent = importObject.importFullPath;", "+            final String fullImportIdent = importObject.getImportFullPath();", "-                if (customImportOrderRules.size() > groupNumber + 1) {", "-                    final String nextGroup = getNextImportGroup(groupNumber + 1);", "+                //not the last group, last one is always NON_GROUP", "+                if (customImportOrderRules.size() > currentGroupNumber + 1) {", "+                    final String nextGroup = getNextImportGroup(currentGroupNumber + 1);", "-                            log(importObject.getLineNumber(), MSG_LINE_SEPARATOR,", "-                                    fullImportIdent);", "+                            log(importObject.getLineNumber(), MSG_LINE_SEPARATOR, fullImportIdent);", "-                        groupNumber = customImportOrderRules.indexOf(nextGroup);", "+                        currentGroupNumber = customImportOrderRules.indexOf(nextGroup);", "+                        previousImportFromCurrentGroup = fullImportIdent;", "-            else if (sortImportsInGroupAlphabetically", "-                    && previousImport != null", "-                    && matchesImportGroup(importObject.isStaticImport(),", "-                            fullImportIdent, currentGroup)", "-                    && compareImports(fullImportIdent, previousImport) < 0) {", "-                log(importObject.getLineNumber(), MSG_LEX, fullImportIdent, previousImport);", "+            else {", "+                if (sortImportsInGroupAlphabetically", "+                    && previousImportFromCurrentGroup != null", "+                    && compareImports(fullImportIdent, previousImportFromCurrentGroup) < 0) {", "+                    log(importObject.getLineNumber(), MSG_LEX,", "+                            fullImportIdent, previousImportFromCurrentGroup);", "+                }", "+                else {", "+                    previousImportFromCurrentGroup = fullImportIdent;", "+                }", "-            previousImport = fullImportIdent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541364f6e3e8a88633bffb0809aceeee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "842c152be6b0bbcb754a346a6ce4b59c47469c17", "commitAfterChange": "fb5cf249885869256567d41798e14f2964a26192", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                    if (isTypeField(ast) && !hasEmptyLineAfter(ast)) {", "-                        if (allowNoEmptyLineBetweenFields", "-                            && nextToken.getType() != TokenTypes.VARIABLE_DEF", "-                            && nextToken.getType() != TokenTypes.RCURLY) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                                 nextToken.getText());", "-                        }", "-                        else if (!allowNoEmptyLineBetweenFields", "-                                 && nextToken.getType() != TokenTypes.RCURLY) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                                 nextToken.getText());", "-                        }", "-                    }", "-                    if (isTypeField(ast) && hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processVariableDef(ast, nextToken);", "-                    if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)", "-                        || ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)", "-                            && ast.getPreviousSibling() == null) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processImport(ast, nextToken, astType);", "-                    if (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_SHOULD_BE_SEPARATED, ast.getText());", "-                    }", "-                    if (!hasEmptyLineAfter(ast)) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processPackage(ast, nextToken);"]}]}
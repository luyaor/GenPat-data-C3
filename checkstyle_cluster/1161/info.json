{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d8b5aa0dc16023e94e9b622a36c39d5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b688ff3303369919481b1954d0be4a42", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "ee987808d13bef803ad1e7cfe7d5c8931a40eedc", "commitAfterChange": "b1123e96e452b41c5fb22de20bb7a99d376d0380", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-            try {", "-                final Properties props = createOverridingProperties();", "-                final Configuration config =", "-                    ConfigurationLoader.loadConfiguration(", "-                        mConfigLocation, new PropertiesExpander(props));", "-", "-                final DefaultContext context = new DefaultContext();", "-                final ClassLoader loader =", "-                    new AntClassLoader(getProject(), mClasspath);", "-                context.add(\"classloader\", loader);", "-", "-                c = new Checker();", "-", "-                //load the set of package names", "-                if (mPackageNamesFile != null) {", "-                    final ModuleFactory moduleFactory =", "-                        PackageNamesLoader.loadModuleFactory(", "-                            mPackageNamesFile.getAbsolutePath());", "-                    c.setModuleFactory(moduleFactory);", "-                }", "-                c.contextualize(context);", "-                c.configure(config);", "-", "-                // setup the listeners", "-                final AuditListener[] listeners = getListeners();", "-                for (int i = 0; i < listeners.length; i++) {", "-                    c.addListener(listeners[i]);", "-                }", "-            }", "-            catch (Exception e) {", "-                throw new BuildException(", "-                    \"Unable to create a Checker: \" + e.getMessage(), e);", "-            }", "+            c = createChecker();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bad3d33f1c6972da7696921ca93e1dc2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "9fdee8a722d4d2d72796a1bc8397d5f23a342843", "commitAfterChange": "03c8a0a7ee9fa35ce22491785c9630c2eb698471", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public Checker(Configuration aConfig)         throws RESyntaxException, IOException,         ParserConfigurationException, SAXException, ClassNotFoundException, InstantiationException, IllegalAccessException", "signatureAfterChange": "     public Checker(Configuration aConfig)         throws RESyntaxException, IOException,         ParserConfigurationException, SAXException,         ClassNotFoundException, InstantiationException,         IllegalAccessException, InvocationTargetException,         NoSuchMethodException", "diff": ["-        ParserConfigurationException, SAXException, ClassNotFoundException, InstantiationException, IllegalAccessException", "+        ParserConfigurationException, SAXException,", "+        ClassNotFoundException, InstantiationException,", "+        IllegalAccessException, InvocationTargetException,", "+        NoSuchMethodException", "-        // TODO: remove the dead code and make use the other constuctor", "-        mConfig = aConfig;", "+        // TODO: delete this method eventually", "+        this(aConfig, new CheckConfiguration[0]);", "-        mCache = new PropertyCacheFile(aConfig);", "-        LocalizedMessage.setLocale(new Locale(mConfig.getLocaleLanguage(),", "-                                              mConfig.getLocaleCountry()));", "-        mMessages = new LocalizedMessages(mConfig.getTabWidth());", "-        // Load the check configurations", "-        final ConfigurationLoader loader = new ConfigurationLoader();", "-        final Set configFiles = mConfig.getCheckConfigFiles();", "-        // TODO: check for null", "-        for (Iterator it = configFiles.iterator(); it.hasNext();) {", "-            final String fname = (String) it.next();", "-            loader.parseFile(fname);", "-        }", "-", "-        // Initialise the treewalker", "-        // TODO: improve the error handing", "-        mWalker = new TreeWalker(mMessages);", "-        final CheckConfiguration[] configs = loader.getConfigs();", "-        for (int i = 0; i < configs.length; i++) {", "-            final CheckConfiguration config = configs[i];", "-            mWalker.registerCheck(", "-                config.createInstance(mConfig.getClassLoader()), config);", "-        }"]}]}
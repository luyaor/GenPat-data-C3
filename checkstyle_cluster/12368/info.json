{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "488a3da236b74eb1c4e290a060aec285", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b076f62fae5e6457c8977e7ae9a3e033", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantModifierCheck.java", "commitBeforeChange": "27cb13ca3d878ebb5afa7a0ff44ff198a47b4e05", "commitAfterChange": "4b2f2e628d9423efee0bb720ad88aa8ab30b07fa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        switch (aAST.getType()) {", "-        case TokenTypes.INTERFACE_DEF:", "-            mInInterface.push(Boolean.TRUE);", "-            break;", "-        case TokenTypes.CLASS_DEF:", "-            mInInterface.push(Boolean.FALSE);", "-            break;", "-        case TokenTypes.MODIFIERS:", "-", "-            // modifiers of the interface itself (public interface X)", "-            // will be below the INTERFACE_DEF node. Example:", "-", "-            // public interface X {void y();}", "-", "-            // INTERFACE_DEF", "-            // + MODIFIERS", "-            //   + public", "-            // + OBJ_BLOCK", "-            //   + ...", "-", "-            if (inInterfaceBlock(aAST)) {", "-                DetailAST ast = (DetailAST) aAST.getFirstChild();", "-                while (ast != null) {", "-", "-                    // javac does not allow final in interface methods", "-                    // hence no need to check that this is not a method", "-", "-                    final int type = ast.getType();", "-                    if (type == TokenTypes.LITERAL_PUBLIC", "-                            || type == TokenTypes.ABSTRACT", "-                            || type == TokenTypes.FINAL)", "-                    {", "-                            String modifier = ast.getText();", "-                            log(ast.getLineNo(),", "-                                    ast.getColumnNo(),", "-                                    \"redundantModifier\",", "-                                    new String[] {modifier});", "-                            break;", "-                    }", "-", "-                    ast = (DetailAST) ast.getNextSibling();", "-                }", "-            }", "-            break;", "-        default:", "+        if (!ScopeUtils.inInterfaceBlock(aAST)) {", "-    }", "+        DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+", "+        DetailAST modifier = (DetailAST) modifiers.getFirstChild();", "+        while (modifier != null) {", "+", "+            // javac does not allow final or static in interface methods", "+            // hence no need to check that this is not a method", "+", "+            final int type = modifier.getType();", "+            if (type == TokenTypes.LITERAL_PUBLIC", "+                || type == TokenTypes.ABSTRACT", "+                || type == TokenTypes.LITERAL_STATIC", "+                || type == TokenTypes.FINAL)", "+            {", "+                log(modifier.getLineNo(),", "+                    modifier.getColumnNo(),", "+                    \"redundantModifier\",", "+                    new String[] {modifier.getText()});", "+                break;", "+            }", "+", "+            modifier = (DetailAST) modifier.getNextSibling();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7340f8fa2005386e4b80cbe60d1b14f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "86e743f60589840dc86e73a90592b0b17c7c50c1", "commitAfterChange": "17ebdc5c3740d37f29b8dc09c4ce4a42d2982b1e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean hasTypeNodeAsParent(DetailAST aCurrentNode)", "signatureAfterChange": "     private DetailAST getLastAnnotationNode(DetailAST aAtNode)", "diff": ["-     */", "-    private boolean hasTypeNodeAsParent(DetailAST aCurrentNode)", "-    {", "-        DetailAST typeNode = aCurrentNode;", "-        boolean result = false;", "-        while (typeNode != null && typeNode.getType() != TokenTypes.SLIST", "-                && typeNode.getType() != TokenTypes.OBJBLOCK)", "-        {", "-            if (typeNode.getType() == TokenTypes.TYPE", "-                    || typeNode.getType() == TokenTypes.TYPE_PARAMETERS)", "-            {", "-                result = true;", "-            typeNode = typeNode.getParent();", "-        return result;", "+     */", "+    private DetailAST getLastAnnotationNode(DetailAST aAtNode)", "+    {", "+        DetailAST lastAnnotation = aAtNode.getParent();", "+        while (lastAnnotation.getNextSibling() != null", "+                && lastAnnotation.getNextSibling().getType() == TokenTypes.ANNOTATION)", "+        {", "+            lastAnnotation = lastAnnotation.getNextSibling();", "+        }", "+        return lastAnnotation.getLastChild();"]}]}
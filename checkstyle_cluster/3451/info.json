{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d81760812605e2a8e06f983771244467", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "683cabaec13703cbc8aa466393476972", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "fe6e0fd4231aaba97cf423899f93697400880c93", "commitAfterChange": "b84b3fd04ad9c45e1466e35b707a2b59f5baf66b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public Checker(Configuration aConfig)         throws RESyntaxException, IOException", "signatureAfterChange": "      public Checker(Configuration aConfig, CheckConfiguration[] aConfigs)         throws ClassNotFoundException, InstantiationException,                IllegalAccessException", "diff": ["+", "+    public Checker(Configuration aConfig, CheckConfiguration[] aConfigs)", "+        throws ClassNotFoundException, InstantiationException,", "+               IllegalAccessException", "+    {", "+        // TODO: document to make testing easier", "+        mConfig = aConfig;", "+        mCache = new PropertyCacheFile(aConfig);", "+        LocalizedMessage.setLocale(new Locale(mConfig.getLocaleLanguage(),", "+                                              mConfig.getLocaleCountry()));", "+        mMessages = new LocalizedMessages(mConfig.getTabWidth());", "+        mWalker = new TreeWalker(mMessages);", "+        // TODO: improve the error handing", "+        for (int i = 0; i < aConfigs.length; i++) {", "+            final CheckConfiguration config = aConfigs[i];", "+            mWalker.registerCheck(", "+                config.createInstance(mConfig.getClassLoader()), config);", "+        }", "+    }", "-        throws RESyntaxException, IOException"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bad3d33f1c6972da7696921ca93e1dc2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "9fdee8a722d4d2d72796a1bc8397d5f23a342843", "commitAfterChange": "03c8a0a7ee9fa35ce22491785c9630c2eb698471", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public Checker(Configuration aConfig)         throws RESyntaxException, IOException,         ParserConfigurationException, SAXException, ClassNotFoundException, InstantiationException, IllegalAccessException", "signatureAfterChange": "     public Checker(Configuration aConfig)         throws RESyntaxException, IOException,         ParserConfigurationException, SAXException,         ClassNotFoundException, InstantiationException,         IllegalAccessException, InvocationTargetException,         NoSuchMethodException", "diff": ["-        ParserConfigurationException, SAXException, ClassNotFoundException, InstantiationException, IllegalAccessException", "+        ParserConfigurationException, SAXException,", "+        ClassNotFoundException, InstantiationException,", "+        IllegalAccessException, InvocationTargetException,", "+        NoSuchMethodException", "-        // TODO: remove the dead code and make use the other constuctor", "-        mConfig = aConfig;", "+        // TODO: delete this method eventually", "+        this(aConfig, new CheckConfiguration[0]);", "-        mCache = new PropertyCacheFile(aConfig);", "-        LocalizedMessage.setLocale(new Locale(mConfig.getLocaleLanguage(),", "-                                              mConfig.getLocaleCountry()));", "-        mMessages = new LocalizedMessages(mConfig.getTabWidth());", "-        // Load the check configurations", "-        final ConfigurationLoader loader = new ConfigurationLoader();", "-        final Set configFiles = mConfig.getCheckConfigFiles();", "-        // TODO: check for null", "-        for (Iterator it = configFiles.iterator(); it.hasNext();) {", "-            final String fname = (String) it.next();", "-            loader.parseFile(fname);", "-        }", "-", "-        // Initialise the treewalker", "-        // TODO: improve the error handing", "-        mWalker = new TreeWalker(mMessages);", "-        final CheckConfiguration[] configs = loader.getConfigs();", "-        for (int i = 0; i < configs.length; i++) {", "-            final CheckConfiguration config = configs[i];", "-            mWalker.registerCheck(", "-                config.createInstance(mConfig.getClassLoader()), config);", "-        }"]}]}
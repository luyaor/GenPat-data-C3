{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "366deaa215bd47c53669c28b35ad9500", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d4ef2d08f19365a04bad65c2f54625d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "90c0f0affe174beb80b45d5bc99ea9540d6d1c77", "commitAfterChange": "3288a81e30ddea194f76bd74f3b509500b864163", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-        final Configuration config = createConfiguration();", "+        if (mConfigFile == null) {", "+            throw new BuildException(\"Must specify 'config'.\", getLocation());", "+        }", "-                c = new Checker(config);", "+                final Configuration config = createConfiguration();", "+                final CheckConfiguration[] checkConfigs =", "+                    ConfigurationLoader.loadConfigs(", "+                        mConfigFile.getAbsolutePath());", "+                c = new Checker(config, checkConfigs);", "-                throw new BuildException(\"Unable to create a Checker\", e);", "+                throw new BuildException(", "+                    \"Unable to create a Checker: \" + e.getMessage(), e);", "-            final int numErrs = c.process(files);", "+            final int numErrs = c.processNEW(files);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eaafce838af684046b16d99083253d1e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/digester/com/puppycrawl/tools/checkstyle/DigesterLoaderTest.java", "commitBeforeChange": "b2217341ecb6ae71c6f36fa22789e6e6e78d383d", "commitAfterChange": "4bcc70534f6cfef49a52e4a6d7aadee7b9bd0044", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] args)", "signatureAfterChange": "     public static void main(String[] args)", "diff": ["+        //test rules with elements named by shortened class name", "-            System.out.println(config.toString());", "+            System.out.println(config);", "+        ", "+        //test rules with config elements", "+        try {", "+            final String inputFname = \"src/digester/checkstyle_checksB.xml\";", "+            final String rulesFname = \"src/digester/checkstyle_rulesB.xml\";", "+            final Configuration config =", "+                ConfigurationDigesterLoader.loadConfiguration(", "+                    rulesFname, inputFname, null);", "+            System.out.println(config);", "+", "+        }", "+        catch (Exception exc) {", "+            exc.printStackTrace();", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb3ef28439346a2828b6b7dbcf56bc5c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "a4ce4c6bb4714ff0b51d071509d2683d9e623a36", "commitAfterChange": "2debda611fe487021711aa4acce56651799a778f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-                final GlobalProperties config = createGlobalProperties();", "-                final CheckConfiguration[] checkConfigs =", "-                    ConfigurationLoader.loadConfigs(", "-                        mConfigFile.getAbsolutePath());", "-                c = new Checker(config, checkConfigs);", "+                final Properties props = createOverridingProperties();", "+                final Configuration config =", "+                    ConfigurationLoader.loadConfiguration(", "+                        mConfigFile.getAbsolutePath(), props);", "+                config.setClassLoader(new AntClassLoader(getProject(),", "+                                      mClasspath));", "+                c = new Checker(config);"]}]}
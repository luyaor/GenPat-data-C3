{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b652716746fcf7d00be2b1882b6d8cf1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541364f6e3e8a88633bffb0809aceeee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "842c152be6b0bbcb754a346a6ce4b59c47469c17", "commitAfterChange": "fb5cf249885869256567d41798e14f2964a26192", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                    if (isTypeField(ast) && !hasEmptyLineAfter(ast)) {", "-                        if (allowNoEmptyLineBetweenFields", "-                            && nextToken.getType() != TokenTypes.VARIABLE_DEF", "-                            && nextToken.getType() != TokenTypes.RCURLY) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                                 nextToken.getText());", "-                        }", "-                        else if (!allowNoEmptyLineBetweenFields", "-                                 && nextToken.getType() != TokenTypes.RCURLY) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                                 nextToken.getText());", "-                        }", "-                    }", "-                    if (isTypeField(ast) && hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processVariableDef(ast, nextToken);", "-                    if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)", "-                        || ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)", "-                            && ast.getPreviousSibling() == null) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processImport(ast, nextToken, astType);", "-                    if (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_SHOULD_BE_SEPARATED, ast.getText());", "-                    }", "-                    if (!hasEmptyLineAfter(ast)) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processPackage(ast, nextToken);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "583f6590783ae922d45f9fdd7fe6d1a9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "fb5cf249885869256567d41798e14f2964a26192", "commitAfterChange": "7c1d239748c9a90112bf3a59b189dc31ffe41983", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processEnd(DetailAST ast)", "signatureAfterChange": "     private void processEnd(DetailAST ast)", "diff": ["-                final char charAfter = line.charAt(after);", "-", "-                // Need to handle a number of cases. First is:", "-                //    Collections.<Object>emptySet();", "-                //                        ^", "-                //                        +--- whitespace not allowed", "-                if (ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS", "-                        && ast.getParent().getParent().getType()", "-                            == TokenTypes.DOT", "-                        && ast.getParent().getParent().getParent().getType()", "-                            == TokenTypes.METHOD_CALL", "-                        || isAfterMethodReference(ast)) {", "-                    if (Character.isWhitespace(charAfter)) {", "-                        log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                    }", "-                }", "-                else if (!Character.isWhitespace(charAfter)", "-                    && '(' != charAfter && ')' != charAfter", "-                    && ',' != charAfter && '[' != charAfter", "-                    && '.' != charAfter && ':' != charAfter", "-                    && !isAfterMethodReference(ast)) {", "-                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \">\");", "-                }", "+                processSingleGeneric(ast, line, after);", "-                // In a nested Generic type, so can only be a '>' or ',' or '&'", "-", "-                // In case of several extends definitions:", "-                //", "-                //   class IntEnumValueType<E extends Enum<E> & IntEnum>", "-                //                                          ^", "-                //   should be whitespace if followed by & -+", "-                //", "-                final int indexOfAmp = line.indexOf('&', after);", "-                if (indexOfAmp != -1", "-                    && whitespaceBetween(after, indexOfAmp, line)) {", "-                    if (indexOfAmp - after == 0) {", "-                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"&\");", "-                    }", "-                    else if (indexOfAmp - after != 1) {", "-                        log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                    }", "-                }", "-                else if (line.charAt(after) == ' ') {", "-                    log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                }", "+                processNestedGenerics(ast, line, after);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "649769ea04db0e027e9e1a5c3ad63aa1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int parentType = aAST.getParent().getType();", "+        final int parentType = ast.getParent().getType();", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            mScopeStates.push(new ScopeState());", "+            scopeStates.push(new ScopeState());", "-            state = mScopeStates.peek();", "-            if (state.mScopeState > STATE_CTOR_DEF) {", "-                if (!mIgnoreConstructors) {", "-                    log(aAST, \"declaration.order.constructor\");", "+            state = scopeStates.peek();", "+            if (state.scopeState > STATE_CTOR_DEF) {", "+                if (!ignoreConstructors) {", "+                    log(ast, \"declaration.order.constructor\");", "-                state.mScopeState = STATE_CTOR_DEF;", "+                state.scopeState = STATE_CTOR_DEF;", "-            state = mScopeStates.peek();", "+            state = scopeStates.peek();", "-            if (state.mScopeState > STATE_METHOD_DEF) {", "-                if (!mIgnoreMethods) {", "-                    log(aAST, \"declaration.order.method\");", "+            if (state.scopeState > STATE_METHOD_DEF) {", "+                if (!ignoreMethods) {", "+                    log(ast, \"declaration.order.method\");", "-                state.mScopeState = STATE_METHOD_DEF;", "+                state.scopeState = STATE_METHOD_DEF;", "-                || (aAST.getParent().getParent().getType()", "+                || (ast.getParent().getParent().getType()", "-            state = mScopeStates.peek();", "-            if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {", "-                if (state.mScopeState > STATE_STATIC_VARIABLE_DEF) {", "-                    if (!mIgnoreModifiers", "-                        || state.mScopeState > STATE_INSTANCE_VARIABLE_DEF)", "+            state = scopeStates.peek();", "+            if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {", "+                if (state.scopeState > STATE_STATIC_VARIABLE_DEF) {", "+                    if (!ignoreModifiers", "+                        || state.scopeState > STATE_INSTANCE_VARIABLE_DEF)", "-                        log(aAST, \"declaration.order.static\");", "+                        log(ast, \"declaration.order.static\");", "-                    state.mScopeState = STATE_STATIC_VARIABLE_DEF;", "+                    state.scopeState = STATE_STATIC_VARIABLE_DEF;", "-                if (state.mScopeState > STATE_INSTANCE_VARIABLE_DEF) {", "-                    log(aAST, \"declaration.order.instance\");", "+                if (state.scopeState > STATE_INSTANCE_VARIABLE_DEF) {", "+                    log(ast, \"declaration.order.instance\");", "-                else if (state.mScopeState == STATE_STATIC_VARIABLE_DEF) {", "-                    state.mDeclarationAccess = Scope.PUBLIC;", "-                    state.mScopeState = STATE_INSTANCE_VARIABLE_DEF;", "+                else if (state.scopeState == STATE_STATIC_VARIABLE_DEF) {", "+                    state.declarationAccess = Scope.PUBLIC;", "+                    state.scopeState = STATE_INSTANCE_VARIABLE_DEF;", "-            final Scope access = ScopeUtils.getScopeFromMods(aAST);", "-            if (state.mDeclarationAccess.compareTo(access) > 0) {", "-                if (!mIgnoreModifiers) {", "-                    log(aAST, \"declaration.order.access\");", "+            final Scope access = ScopeUtils.getScopeFromMods(ast);", "+            if (state.declarationAccess.compareTo(access) > 0) {", "+                if (!ignoreModifiers) {", "+                    log(ast, \"declaration.order.access\");", "-                state.mDeclarationAccess = access;", "+                state.declarationAccess = access;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce662deb4a3e1d9799368a418a7a925e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "cc6caa71f55ae33ad8c018e3b7915e6b93b7de81", "commitAfterChange": "3eca04c940bcdf575c2f9009202a4145e9a82c15", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        ScopeState state;", "-                state = scopeStates.peek();", "-                if (state.currentScopeState > STATE_CTOR_DEF) {", "-                    if (!ignoreConstructors) {", "-                        log(ast, MSG_CONSTRUCTOR);", "-                    }", "-                }", "-                else {", "-                    state.currentScopeState = STATE_CTOR_DEF;", "-                }", "+                processConstructor(ast);", "-                state = scopeStates.peek();", "+", "-                if (state.currentScopeState > STATE_METHOD_DEF) {", "-                    if (!ignoreMethods) {", "-                        log(ast, MSG_METHOD);", "-                    }", "-                }", "-                else {", "-                    state.currentScopeState = STATE_METHOD_DEF;", "-                }", "+                processMethod(ast);", "-                    || ast.getParent().getParent().getType()", "+                        || ast.getParent().getParent().getType()", "-                state = scopeStates.peek();", "-                if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {", "-                    if (state.currentScopeState > STATE_STATIC_VARIABLE_DEF) {", "-                        if (!ignoreModifiers", "-                            || state.currentScopeState > STATE_INSTANCE_VARIABLE_DEF) {", "-                            log(ast, MSG_STATIC);", "-                        }", "-                    }", "-                    else {", "-                        state.currentScopeState = STATE_STATIC_VARIABLE_DEF;", "-                    }", "-                }", "-                else {", "-                    if (state.currentScopeState > STATE_INSTANCE_VARIABLE_DEF) {", "-                        log(ast, MSG_INSTANCE);", "-                    }", "-                    else if (state.currentScopeState == STATE_STATIC_VARIABLE_DEF) {", "-                        state.declarationAccess = Scope.PUBLIC;", "-                        state.currentScopeState = STATE_INSTANCE_VARIABLE_DEF;", "-                    }", "-                }", "-", "-                final Scope access = ScopeUtils.getScopeFromMods(ast);", "-                if (state.declarationAccess.compareTo(access) > 0) {", "-                    if (!ignoreModifiers) {", "-                        log(ast, MSG_ACCESS);", "-                    }", "-                }", "-                else {", "-                    state.declarationAccess = access;", "-                }", "+                processModifiers(ast);", "+                break;", "+        }", "+    }"]}]}
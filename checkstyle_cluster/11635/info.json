{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ef25bc8ff8b45ce63735f773ca9f74e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc4560e7b05136a5db1bd61dc6dc142", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "commitBeforeChange": "a5349f581e11295b40b68ad194b3bfa10271f902", "commitAfterChange": "3a7ab7d24d0b865fd95a8c72ce7e765a801ea555", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-", "-        // method is ok if it is private or abstract or final", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)", "-            || modifiers.branchContains(TokenTypes.ABSTRACT)", "-            || modifiers.branchContains(TokenTypes.FINAL)", "-            || modifiers.branchContains(TokenTypes.LITERAL_STATIC)) {", "+        if (isPrivateOrFinalOrAbstract(ast)) {", "+        if (hasDefaultOrExplNonPrivateCtor(classDef)) {", "+            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "+            log(ast.getLineNo(), ast.getColumnNo(),", "+                MSG_KEY, name);", "+        }", "+    }", "-                    candidate.findFirstToken(TokenTypes.MODIFIERS);", "-        if (hasDefaultConstructor || hasExplNonPrivateCtor) {", "-            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "-            log(ast.getLineNo(), ast.getColumnNo(),", "-                MSG_KEY, name);", "-        }", "-", "-", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1af62c244b7108af39314de22e50a96f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (mIgnoreAnnotation && isInAnnotation(aAST)) {", "+        if (ignoreAnnotation && isInAnnotation(ast)) {", "-        if (inIgnoreList(aAST)", "-            || (mIgnoreHashCodeMethod && isInHashCodeMethod(aAST)))", "+        if (inIgnoreList(ast)", "+            || (ignoreHashCodeMethod && isInHashCodeMethod(ast)))", "-        final DetailAST constantDefAST = findContainingConstantDef(aAST);", "+        final DetailAST constantDefAST = findContainingConstantDef(ast);", "-            reportMagicNumber(aAST);", "+            reportMagicNumber(ast);", "-            DetailAST ast = aAST.getParent();", "-            while (ast != constantDefAST) {", "-                final int type = ast.getType();", "+            DetailAST astNode = ast.getParent();", "+            while (astNode != constantDefAST) {", "+                final int type = astNode.getType();", "-                    reportMagicNumber(aAST);", "+                    reportMagicNumber(ast);", "-                ast = ast.getParent();", "+                astNode = astNode.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c028f5c85cf13998278f68ac9d391f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {", "+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {", "-        final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {", "+        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {", "-        final DetailAST implementation = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST implementation = ast.findFirstToken(TokenTypes.SLIST);", "-        final DetailAST classDef = findContainingClass(aAST);", "+        final DetailAST classDef = findContainingClass(ast);", "-            final String name = aAST.findFirstToken(TokenTypes.IDENT).getText();", "-            log(aAST.getLineNo(), aAST.getColumnNo(),", "+            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "+            log(ast.getLineNo(), ast.getColumnNo(),"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be8af272953431123125b2ad9f5c441d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb2f29045044bf9c567b8789c9756fc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ConstantNameCheck.java", "commitBeforeChange": "59c9c64381dd92bc877f5a834dae7856603d5546", "commitAfterChange": "2a8aba9a54d2112b142a1b9e0c4e762e780155c1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     protected final boolean mustCheckName(DetailAST aAST)", "diff": ["-    /** @see com.puppycrawl.tools.checkstyle.api.Check */", "-    public void visitToken(DetailAST aAST)", "+    /** @see com.puppycrawl.tools.checkstyle.checks.AbstractNameCheck */", "+    protected final boolean mustCheckName(DetailAST aAST)", "-        // TODO: Need to consider the case of being in an interface! In that", "-        // case, does not matter if \"static\" and \"final\" keywords are there.", "-        ", "-        //constant?", "-        final DetailAST modifiers =", "-                    aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        if ((modifiers != null)", "-            && modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "-            && modifiers.branchContains(TokenTypes.FINAL))", "-        {", "-            //name check", "-            final DetailAST name =", "-                aAST.findFirstToken(TokenTypes.IDENT);", "+        boolean retVal = false;", "+        DetailAST modifiersAST = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final boolean isStatic = modifiersAST != null", "+            && modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);", "+        final boolean isFinal = modifiersAST != null", "+            && modifiersAST.branchContains(TokenTypes.FINAL);", "+", "+        if ((isStatic  && isFinal) || ScopeUtils.inInterfaceBlock(aAST)) {", "-            if (!\"serialVersionUID\".equals(name.getText())", "-                && !getRegexp().match(name.getText()))", "-            {", "-                log(name.getLineNo(),", "-                    name.getColumnNo(),", "-                    \"name.invalidPattern\",", "-                    name.getText(),", "-                    getFormat());", "+            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+            if ((nameAST != null)", "+                    && !(\"serialVersionUID\".equals(nameAST.getText()))) {", "+                retVal = true;", "+", "+        return retVal;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c88eda2b8f499c331779327384380732", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "5e8476f01d9306b34e6629ed27f7a2db48287ed5", "commitAfterChange": "d31d4220cc7f9cf03fe9e4cd0fe7d9e305ffe096", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        // Check for RCURLY in array initializer", "-        if ((aAST.getType() == TokenTypes.RCURLY)", "-            && (aAST.getParent().getType() == TokenTypes.ARRAY_INIT))", "+        final int type = aAST.getType();", "+        final int parentType = aAST.getParent().getType();", "+", "+        // Check for CURLY in array initializer", "+        if ((type == TokenTypes.RCURLY || type == TokenTypes.LCURLY)", "+            && (parentType == TokenTypes.ARRAY_INIT))", "-        if ((aAST.getType() == TokenTypes.STAR)", "-            && (aAST.getParent().getType() == TokenTypes.DOT))", "+        if ((type == TokenTypes.STAR)", "+            && (parentType == TokenTypes.DOT))", "-        if ((aAST.getType() == TokenTypes.SLIST)", "-            && (aAST.getParent().getType() == TokenTypes.CASE_GROUP))", "+        if ((type == TokenTypes.SLIST)", "+            && (parentType == TokenTypes.CASE_GROUP))", "-        if ((after < line.length())", "-            && !Character.isWhitespace(", "-                line.charAt(after)) // Check for \"return;\"", "-            && !((aAST.getType() == TokenTypes.LITERAL_RETURN)", "+        if (after >= line.length()) {", "+            return;", "+        }", "+", "+        final char nextChar = line.charAt(after);", "+        if (!Character.isWhitespace(nextChar)", "+            // Check for \"return;\"", "+            && !((type == TokenTypes.LITERAL_RETURN)", "-            // Check for \"})\" or \"};\". Happens with anon-inners", "-            && !((aAST.getType() == TokenTypes.RCURLY)", "-                && ((line.charAt(after) == ')')", "-                    || (line.charAt(after) == ';'))))", "+            // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners", "+            && !((type == TokenTypes.RCURLY)", "+                && ((nextChar == ')')", "+                    || (nextChar == ';')", "+                    || (nextChar == ','))))"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac591754891b9eb8ab867c5414295b6d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eda501355cb177157bde763a4735ff9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "d67d10e9f2b480f7f56fe7cda2a908cd5fe770c7", "commitAfterChange": "f65b17cbc30795247fef3077cce16a8bb53e9ffc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "      @Test     public void testIncorrectTag() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrectTag() throws Exception", "diff": ["-        catch (InvocationTargetException e) {", "-            assertTrue(e.getCause() instanceof IllegalStateException);", "-            assertEquals(\"Unknown name:\" + \"hello\" + \".\", e.getCause().getMessage());", "+        catch (InvocationTargetException ex) {", "+            assertTrue(ex.getCause() instanceof IllegalStateException);", "+            assertEquals(\"Unknown name:\" + \"hello\" + \".\", ex.getCause().getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68fb7c3346f6b6d07175391213844567", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java", "commitBeforeChange": "d67d10e9f2b480f7f56fe7cda2a908cd5fe770c7", "commitAfterChange": "f65b17cbc30795247fef3077cce16a8bb53e9ffc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testExceptionNoSuchAlgorithmException() throws Exception", "signatureAfterChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testExceptionNoSuchAlgorithmException() throws Exception", "diff": ["-        catch (InvocationTargetException e) {", "-            assertTrue(e.getCause().getCause() instanceof NoSuchAlgorithmException);", "-            assertEquals(\"Unable to calculate hashcode.\", e.getCause().getMessage());", "+        catch (InvocationTargetException ex) {", "+            assertTrue(ex.getCause().getCause() instanceof NoSuchAlgorithmException);", "+            assertEquals(\"Unable to calculate hashcode.\", ex.getCause().getMessage());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95734d934ce7fb7ed9dd4172983118a8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3410a6fa3830bc8c217ddb432809b1f3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     static boolean areOnSameLine(DetailAST aAst1, DetailAST aAst2)", "signatureAfterChange": "     static boolean areOnSameLine(DetailAST ast1, DetailAST ast2)", "diff": ["-    static boolean areOnSameLine(DetailAST aAst1, DetailAST aAst2)", "+    static boolean areOnSameLine(DetailAST ast1, DetailAST ast2)", "-        return (aAst1 != null) && (aAst2 != null)", "-            && (aAst1.getLineNo() == aAst2.getLineNo());", "+        return (ast1 != null) && (ast2 != null)", "+            && (ast1.getLineNo() == ast2.getLineNo());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60d34f1d9f964a58fb66d91b0d50ee14", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected boolean isUnchecked(Class<?> aException)", "signatureAfterChange": "     protected boolean isUnchecked(Class<?> exception)", "diff": ["-    protected boolean isUnchecked(Class<?> aException)", "+    protected boolean isUnchecked(Class<?> exception)", "-        return isSubclass(aException, RuntimeException.class)", "-            || isSubclass(aException, Error.class);", "+        return isSubclass(exception, RuntimeException.class)", "+            || isSubclass(exception, Error.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ba524ac82d263efe1cfea752bb913f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected boolean isSubclass(Class<?> aChild, Class<?> aParent)", "signatureAfterChange": "     protected boolean isSubclass(Class<?> child, Class<?> parent)", "diff": ["-    protected boolean isSubclass(Class<?> aChild, Class<?> aParent)", "+    protected boolean isSubclass(Class<?> child, Class<?> parent)", "-        return (aParent != null) && (aChild != null)", "-            &&  aParent.isAssignableFrom(aChild);", "+        return (parent != null) && (child != null)", "+            &&  parent.isAssignableFrom(child);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf50dc9558d73020399f7a1fba8654f1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91108d43dc0f1d67f1df1f8ac8bbe6c0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "7b8a3aa5bba1323a7bbb85b6dbd86835215a48fc", "commitAfterChange": "603c5bb53ea12900f6a1c8af0c4a765af36786e3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean isVerifiable(DetailAST methodOrVariableDef)", "signatureAfterChange": "     private boolean isVerifiable(DetailAST methodOrVariableDef)", "diff": ["-            if (modifiersAst.getFirstChild() != null) {", "-                for (DetailAST modifier = modifiersAst.getFirstChild(); modifier != null;", "-                         modifier = modifier.getNextSibling()) {", "-                    if (memberModifiers.contains(modifier.getType())) {", "-                        result = true;", "-                    }", "+            result = isContainVerifiableType(modifiersAst);", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e83f8262d0dd615583bd6a52dc59ebfc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "8ad4aebb66a1b90ac135e05f8062423028e3be8e", "commitAfterChange": "0b98c0389e2cf745cb125a89dece57538fc672b7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                                \"redundantModifier\", modifier.getText());", "+                                MSG_KEY, modifier.getText());", "-                            \"redundantModifier\", modifier.getText());", "+                            MSG_KEY, modifier.getText());", "-                                \"redundantModifier\", modifier.getText());", "+                                MSG_KEY, modifier.getText());"]}]}
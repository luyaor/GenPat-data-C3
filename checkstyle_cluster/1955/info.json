{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "144690e762fe9dfffa5d109288b94c16", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa63259d04ee24116a001193a27d4415", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "37af13d63384a48aaeefb8d767b0f9ebb053a4a7", "commitAfterChange": "6f089534ea0b9680f0c76bc1fb3c04d11954a278", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-        boolean foundMatch = matcher.find();", "-        while (foundMatch) {", "-            final LineColumn start = text.lineColumn(matcher.start());", "-            final LineColumn end = text.lineColumn(matcher.end());", "+        try {", "+            boolean foundMatch = matcher.find();", "-            if (!options.getSuppressor().shouldSuppress(start.getLine(),", "-                    start.getColumn(), end.getLine(), end.getColumn())) {", "-                currentMatches++;", "-                if (currentMatches > options.getMaximum()) {", "-                    if (\"\".equals(options.getMessage())) {", "-                        options.getReporter().log(start.getLine(),", "-                                REGEXP_EXCEEDED, matcher.pattern().toString());", "-                    }", "-                    else {", "-                        options.getReporter()", "-                                .log(start.getLine(), options.getMessage());", "+            while (foundMatch) {", "+                final LineColumn start = text.lineColumn(matcher.start());", "+                final LineColumn end = text.lineColumn(matcher.end());", "+", "+                if (!options.getSuppressor().shouldSuppress(start.getLine(),", "+                        start.getColumn(), end.getLine(), end.getColumn())) {", "+                    currentMatches++;", "+                    if (currentMatches > options.getMaximum()) {", "+                        if (\"\".equals(options.getMessage())) {", "+                            options.getReporter().log(start.getLine(),", "+                                    REGEXP_EXCEEDED, matcher.pattern().toString());", "+                        }", "+                        else {", "+                            options.getReporter()", "+                                    .log(start.getLine(), options.getMessage());", "+                        }", "+                foundMatch = matcher.find();", "-            foundMatch = matcher.find();", "+        // see http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6337993 et al.", "+        catch (StackOverflowError e) {", "+            // OK http://blog.igorminar.com/2008/05/catching-stackoverflowerror-and-bug-in.html", "+            // http://programmers.stackexchange.com/questions/", "+            //        209099/is-it-ever-okay-to-catch-stackoverflowerror-in-java", "+            options.getReporter().log(0, STACKOVERFLOW, matcher.pattern().toString());", "+            return;", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f43fd7770bec8f65214b7ffe5f6c822e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/testinputs/com/puppycrawl/tools/checkstyle/InputFinalParameters.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 21, "signatureBeforeChange": "     void method1()", "signatureAfterChange": "     void method1()", "diff": ["+        catch (@MyAnnotation NoClassDefFoundError e) {", "+            e.printStackTrace();", "+        }", "+        catch (@MyAnnotation final ClassCastException e) {", "+            e.printStackTrace();", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6343bd9955d199f79eb5e5af74b08d9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e47b0f853eae66af3b0a11b029b7c48", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "66d266384abccc702867da9aa68b8c84f9828d45", "commitAfterChange": "9e9b817c6558d1141617e52444716c0f802c1417", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     private static List<JavadocTag> getMultilineNoArgTags(final Matcher noargMultilineStart,             final String[] lines, final int lineIndex, final int tagLine)", "signatureAfterChange": "     private static List<JavadocTag> getMultilineNoArgTags(final Matcher noargMultilineStart,             final String[] lines, final int lineIndex, final int tagLine)", "diff": ["-            multilineCont.find();", "-            remIndex = lines.length;", "-            final String lFin = multilineCont.group(1);", "-            if (!lFin.equals(NEXT_TAG)", "-                && !lFin.equals(END_JAVADOC)) {", "-                tags.add(new JavadocTag(tagLine, col, param1));", "+            if (multilineCont.find()) {", "+                remIndex = lines.length;", "+                final String lFin = multilineCont.group(1);", "+                if (!lFin.equals(NEXT_TAG)", "+                    && !lFin.equals(END_JAVADOC)) {", "+                    tags.add(new JavadocTag(tagLine, col, param1));", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5ab7aa446c7e5496d3293b1ae2a9b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "38bba612c02504fcb3db2bdbcdf1dda2252d179f", "commitAfterChange": "319b04ff74aaf0c08b9c417274872be47b93b346", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void checkUnusedTypeParamTags(         final List<JavadocTag> tags,         final List<String> typeParamNames)", "signatureAfterChange": "     private void checkUnusedTypeParamTags(         final List<JavadocTag> tags,         final List<String> typeParamNames)", "diff": ["-                matcher.find();", "-                final String typeParamName = matcher.group(1).trim();", "-                if (!typeParamNames.contains(typeParamName)) {", "-                    log(tag.getLineNo(), tag.getColumnNo(),", "-                        UNUSED_TAG,", "-                        JavadocTagInfo.PARAM.getText(),", "-                        OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);", "+                if (matcher.find()) {", "+                    final String typeParamName = matcher.group(1).trim();", "+                    if (!typeParamNames.contains(typeParamName)) {", "+                        log(tag.getLineNo(), tag.getColumnNo(),", "+                            UNUSED_TAG,", "+                            JavadocTagInfo.PARAM.getText(),", "+                            OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);", "+                    }"]}]}
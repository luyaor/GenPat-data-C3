{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfa1560a8f122492cb571ae15a3ac676", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "063fb80135f8d5a85a904241b7957d15", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "eb6de977b5ae1d23f975ea4739f4c67d5f70b786", "commitAfterChange": "2f7481ee4e20ae785298c31ec2f979752dd7eb03", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            final DetailAST modifiers =", "-                ast.findFirstToken(TokenTypes.MODIFIERS);", "-", "-            for (final int tokenType : TOKENS_FOR_INTERFACE_MODIFIERS) {", "-                final DetailAST modifier =", "-                        modifiers.findFirstToken(tokenType);", "-                if (modifier != null) {", "-                    log(modifier.getLineNo(), modifier.getColumnNo(),", "-                            MSG_KEY, modifier.getText());", "-                }", "-            }", "+            checkInterfaceModifiers(ast);", "+        }", "+        else if (TokenTypes.CTOR_DEF == ast.getType()", "+                && isEnumMember(ast)) {", "+            checkEnumConstructorModifiers(ast);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "385b6b46277b2da6f6c15935c48fc4e1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "be7d2571b8482bf9cb0f8f258b6d06681cc8b698", "commitAfterChange": "70774706483eb0f9d04500cb64f4ce4c995b56f8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {", "+        if (TokenTypes.INTERFACE_DEF == aAST.getType()) {", "+            final DetailAST modifiers =", "+                aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            if (null != modifiers) {", "+                final DetailAST modifier =", "+                    modifiers.findFirstToken(TokenTypes.LITERAL_STATIC);", "+                if (null != modifier) {", "+                    log(modifier.getLineNo(), modifier.getColumnNo(),", "+                        \"redundantModifier\", modifier.getText());", "+                }", "+            }", "+        }", "+        else if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {"]}]}
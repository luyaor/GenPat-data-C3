{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8cf6b0b2f6c08508af7104212dd2eb3d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b193062e5b52bcf07ee118b2cfd2bca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "ef422e76c6b0bcac8fda2608a4d2d4301e09eca4", "commitAfterChange": "d282d5b8db9eba5943d1cb0269315744d5344a47", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final DetailAST lcurly = details.lcurly;", "+        final String violation;", "+        if (shouldStartLine) {", "+            final String targetSourceLine = getLines()[rcurly.getLineNo() - 1];", "+            violation = validate(details, getAbstractOption(), true, targetSourceLine);", "+        }", "+        else {", "+            violation = validate(details, getAbstractOption(), false, \"\");", "+        }", "-        validate(details, rcurly, lcurly);", "+        if (!violation.isEmpty()) {", "+            log(rcurly, violation, \"}\", rcurly.getColumnNo() + 1);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfa83f2773c65ff61104eebdd079bc45", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java", "commitBeforeChange": "e21676f52f3d68294122244cea63b4ecbe92de8f", "commitAfterChange": "0f9490c4ab86e6df2cfe90db1ffe04e906a5edad", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void visitSingleLineComment(DetailAST singleLineComment)", "signatureAfterChange": "     private void visitSingleLineComment(DetailAST singleLineComment)", "diff": ["-        final DetailAST nextStatement = singleLineComment.getNextSibling();", "-        final DetailAST prevStatement = getPrevStatementFromSwitchBlock(singleLineComment);", "+        final DetailAST prevStmt = getPreviousStatementOfSingleLineComment(singleLineComment);", "+        final DetailAST nextStmt = singleLineComment.getNextSibling();", "-        if (nextStatement != null", "-            && nextStatement.getType() != TokenTypes.RCURLY", "-            && !isTrailingSingleLineComment(singleLineComment)", "-            && !areSameLevelIndented(singleLineComment, prevStatement, nextStatement)) {", "-", "-            log(singleLineComment.getLineNo(), MSG_KEY_SINGLE, nextStatement.getLineNo(),", "-                singleLineComment.getColumnNo(), nextStatement.getColumnNo());", "+        if (!isTrailingSingleLineComment(singleLineComment)) {", "+            if (isInEmptyCaseBlock(prevStmt, nextStmt)) {", "+                handleSingleLineCommentInEmptyCaseBlock(prevStmt, singleLineComment,", "+                    nextStmt);", "+            }", "+            else if (isFallThroughSingleLineComment(prevStmt, nextStmt)) {", "+                handleFallThroughtSingleLineComment(prevStmt, singleLineComment,", "+                    nextStmt);", "+            }", "+            else if (isInEmptyCodeBlock(prevStmt, nextStmt)) {", "+                handleSingleLineCommentInEmptyCodeBlock(singleLineComment, nextStmt);", "+            }", "+            else if (isSingleLineCommentAtTheEndOfTheCodeBlock(nextStmt)) {", "+                handleSIngleLineCommentAtTheEndOfTheCodeBlock(prevStmt, singleLineComment,", "+                    nextStmt);", "+            }", "+            else if (nextStmt != null", "+                        && !areSameLevelIndented(singleLineComment, nextStmt, nextStmt)) {", "+                log(singleLineComment.getLineNo(), MSG_KEY_SINGLE, nextStmt.getLineNo(),", "+                    singleLineComment.getColumnNo(), nextStmt.getColumnNo());", "+            }", "+    }"]}]}
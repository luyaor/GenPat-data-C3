{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1a89e31f75b81a56bedcf8ecf918380", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e0059ff15bba5bede77e67abc70d360", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setLimitedTokens(String[] aLimitedTokens)", "signatureAfterChange": "     public void setLimitedTokens(String[] limitedTokensParam)", "diff": ["-    public void setLimitedTokens(String[] aLimitedTokens)", "+    public void setLimitedTokens(String[] limitedTokensParam)", "-        mLimitedTokens = new int[aLimitedTokens.length];", "+        limitedTokens = new int[limitedTokensParam.length];", "-        for (int i = 0; i < aLimitedTokens.length; i++) {", "-            mLimitedTokens[i] = TokenTypes.getTokenId(aLimitedTokens[i]);", "-            if (mLimitedTokens[i] > maxToken) {", "-                maxToken = mLimitedTokens[i];", "+        for (int i = 0; i < limitedTokensParam.length; i++) {", "+            limitedTokens[i] = TokenTypes.getTokenId(limitedTokensParam[i]);", "+            if (limitedTokens[i] > maxToken) {", "+                maxToken = limitedTokens[i];", "-        mCounts = new int[maxToken];", "+        counts = new int[maxToken];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac01411e5a73e8176aefb9e3af54b907", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java", "commitBeforeChange": "a1706551793b62548d9dcc93731b656f07b125a4", "commitAfterChange": "00fb7f0c1852eb015933c7c121284597de29caad", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected final Set getParentDirs(File[] aFiles)", "signatureAfterChange": "     public final void setFileExtensions(String[] aExtensions)", "diff": ["-     */", "-    protected final Set getParentDirs(File[] aFiles)", "-    {", "-        Set directories = new HashSet();", "-        for (int i = 0; i < aFiles.length; i++) {", "-            File file = aFiles[i].getAbsoluteFile();", "-            if (file.getName().endsWith(\".java\")) {", "-                File dir = file.getParentFile();", "-                directories.add(dir); // duplicates are handled automatically", "-            }", "-        }", "-        return directories;", "+     */", "+    public final void setFileExtensions(String[] aExtensions)", "+    {", "+        if (aExtensions == null) {", "+            mFileExtensions = null;", "+            return;", "+        }", "+        mFileExtensions = new String[aExtensions.length];", "+        for (int i = 0; i < aExtensions.length; i++) {", "+            String extension = aExtensions[i];", "+            if (extension.startsWith(\".\")) {", "+                mFileExtensions[i] = extension;", "+            }", "+            else {", "+                mFileExtensions[i] = \".\" + extension;", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3dde33ce08d67d0e81d7891d5d978fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "74738cea30770d34f8555381f666e079fe6b54f6", "commitAfterChange": "2c23e07558b15944638601a2620fa6aefd12ec2a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final ImportOrderOption abstractOption = getAbstractOption();", "-        if (abstractOption == ImportOrderOption.TOP) {", "+        if (option == ImportOrderOption.TOP) {", "-        else if (abstractOption == ImportOrderOption.BOTTOM) {", "+        else if (option == ImportOrderOption.BOTTOM) {", "-        else if (abstractOption == ImportOrderOption.ABOVE) {", "+        else if (option == ImportOrderOption.ABOVE) {", "-        else if (abstractOption == ImportOrderOption.UNDER) {", "+        else if (option == ImportOrderOption.UNDER) {", "-        else if (abstractOption == ImportOrderOption.INFLOW) {", "+        else if (option == ImportOrderOption.INFLOW) {", "-                    \"Unexpected option for static imports: \" + abstractOption);", "+                    \"Unexpected option for static imports: \" + option);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37ab3e29fc0efb1c03d39ef56ca9f820", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "222f5aa6b101423051c1863bb7334c46", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "75a289111ee8b16dd36de9f76a13908a494d65fd", "commitAfterChange": "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void processRight(DetailAST aAST)", "signatureAfterChange": "     private boolean isFollowsEmptyForIterator(DetailAST aAST)", "diff": ["-    private void processRight(DetailAST aAST)", "+    private boolean isFollowsEmptyForIterator(DetailAST aAST)", "-        final String line = getLines()[aAST.getLineNo() - 1];", "-        final int before = aAST.getColumnNo() - 1;", "-        if (before >= 0) {", "-            boolean followsEmptyForIterator = false;", "-            final DetailAST parent = aAST.getParent();", "-            if ((parent != null)", "-                && (parent.getType() == TokenTypes.LITERAL_FOR))", "-            {", "-                final DetailAST forIterator =", "-                    parent.findFirstToken(TokenTypes.FOR_ITERATOR);", "-                followsEmptyForIterator = (forIterator.getChildCount() == 0)", "-                    && (aAST == forIterator.getNextSibling());", "-            }", "-            if (followsEmptyForIterator) {", "-                return;", "-            }", "-            else if ((PadOption.NOSPACE == getAbstractOption())", "-                && Character.isWhitespace(line.charAt(before))", "-                && !Utils.whitespaceBefore(before, line))", "-            {", "-                log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");", "-            }", "-            else if ((PadOption.SPACE == getAbstractOption())", "-                && !Character.isWhitespace(line.charAt(before))", "-                && (line.charAt(before) != '('))", "-            {", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "-                    \"ws.notPreceeded\", \")\");", "-            }", "+        boolean followsEmptyForIterator = false;", "+        final DetailAST parent = aAST.getParent();", "+        if ((parent != null)", "+            && (parent.getType() == TokenTypes.LITERAL_FOR))", "+        {", "+            final DetailAST forIterator =", "+                parent.findFirstToken(TokenTypes.FOR_ITERATOR);", "+            followsEmptyForIterator = (forIterator.getChildCount() == 0)", "+                && (aAST == forIterator.getNextSibling());", "+        return followsEmptyForIterator;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e5a798a9b5c3478902f5c3b29db6ff5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java", "commitBeforeChange": "a81008fd6fd383b6acb39866355aae8a750a326f", "commitAfterChange": "14172dd01adff4bc99296f633c4acad32e3d570f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        int parenColumnNo = parenAST.getColumnNo();", "-        final String[] lines = getLines();", "-        int identLineNo = -1;", "-        int identColumnNo = -1;", "-        final String identText;", "-        final DetailAST identAST;", "-        final DetailAST dotAST = aAST.findFirstToken(TokenTypes.DOT);", "-        if (dotAST != null) {", "-            identAST = dotAST.getLastChild();", "-        }", "-        else if (aAST.getType() == TokenTypes.SUPER_CTOR_CALL) {", "-            identAST = aAST;", "+", "+        final String line = getLines()[parenAST.getLineNo() - 1];", "+        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {", "+            if (!mAllowLineBreaks) {", "+                log(parenAST, \"line.previous\", parenAST.getText());", "+            }", "-            identAST = aAST.findFirstToken(TokenTypes.IDENT);", "-        }", "-        identLineNo = identAST.getLineNo();", "-        identColumnNo = identAST.getColumnNo();", "-        identText = identAST.getText();", "-", "-        if (identLineNo == parenAST.getLineNo()) {", "-            final int after = identColumnNo + identText.length();", "-            final String line = lines[identLineNo - 1];", "+            final int before = parenAST.getColumnNo() - 1;", "-                && (Character.isWhitespace(line.charAt(after))))", "+                && (Character.isWhitespace(line.charAt(before))))", "-                log(identLineNo, after, \"ws.followed\", identText);", "+                log(parenAST , \"ws.preceded\", parenAST.getText());", "-                     && !Character.isWhitespace(line.charAt(after)))", "+                     && !Character.isWhitespace(line.charAt(before)))", "-                log(identLineNo, after, \"ws.notFollowed\", identText);", "+                log(parenAST, \"ws.notPreceded\", parenAST.getText());", "-        }", "-        else if (!mAllowLineBreaks) {", "-            log(", "-                parenAST.getLineNo(),", "-                parenColumnNo,", "-                \"line.previous\",", "-                parenAST.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf8bffb498ab4f1547460371f546ba6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "ef422e76c6b0bcac8fda2608a4d2d4301e09eca4", "commitAfterChange": "d282d5b8db9eba5943d1cb0269315744d5344a47", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void validate(Details details, DetailAST rcurly, DetailAST lcurly)", "signatureAfterChange": "     private static String validate(Details details, RightCurlyOption bracePolicy,                                    boolean shouldStartLine, String targetSourceLine)", "diff": ["-    private void validate(Details details, DetailAST rcurly, DetailAST lcurly) {", "+    private static String validate(Details details, RightCurlyOption bracePolicy,", "+                                   boolean shouldStartLine, String targetSourceLine) {", "+        final DetailAST rcurly = details.rcurly;", "+        final DetailAST lcurly = details.lcurly;", "+        String violation = \"\";", "-        if (getAbstractOption() == RightCurlyOption.SAME", "+        if (bracePolicy == RightCurlyOption.SAME", "-            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE, \"}\", rcurly.getColumnNo() + 1);", "+            violation = MSG_KEY_LINE_BREAK_BEFORE;", "-                log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);", "+                violation = MSG_KEY_LINE_ALONE;", "-        else if (getAbstractOption() == RightCurlyOption.SAME", "+        else if (bracePolicy == RightCurlyOption.SAME", "-            log(rcurly, MSG_KEY_LINE_SAME, \"}\", rcurly.getColumnNo() + 1);", "+            violation = MSG_KEY_LINE_SAME;", "-        else if (getAbstractOption() == RightCurlyOption.ALONE", "+        else if (bracePolicy == RightCurlyOption.ALONE", "-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);", "+            violation = MSG_KEY_LINE_ALONE;", "-        else if (getAbstractOption() == RightCurlyOption.ALONE_OR_SINGLELINE", "+        else if (bracePolicy == RightCurlyOption.ALONE_OR_SINGLELINE", "-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);", "+            violation = MSG_KEY_LINE_ALONE;", "-                Utils.whitespaceBefore(rcurly.getColumnNo(),", "-                    getLines()[rcurly.getLineNo() - 1]);", "+                Utils.whitespaceBefore(rcurly.getColumnNo(), targetSourceLine);", "-                log(rcurly, MSG_KEY_LINE_NEW, \"}\", rcurly.getColumnNo() + 1);", "+                violation = MSG_KEY_LINE_NEW;", "+        return violation;"]}]}
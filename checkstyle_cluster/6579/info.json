{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44846a6ae9f54f46a8762355bf7ad269", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e881368fae5996bcfbc26aade6cb1d36", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java", "commitBeforeChange": "aae2d7156dd98b3d5140002bed33ab5962bca85c", "commitAfterChange": "3a20dbe8edafe0cca300b7b9dfa48effa9a36a06", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static String getStrippedFileName(             final String basedir, final String fileName)", "signatureAfterChange": "     public static String relativizeAndNormalizePath(final String baseDirectory, final String path)", "diff": ["-    public static String getStrippedFileName(", "-            final String basedir, final String fileName)", "+    public static String relativizeAndNormalizePath(final String baseDirectory, final String path)", "-        final String stripped;", "-        if (basedir == null || !fileName.startsWith(basedir)) {", "-            stripped = fileName;", "+        if (baseDirectory == null) {", "+            return path;", "-        else {", "-            // making the assumption that there is text after basedir", "-            final int skipSep = basedir.endsWith(File.separator) ? 0 : 1;", "-            stripped = fileName.substring(basedir.length() + skipSep);", "-        }", "-        return stripped;", "+        final Path pathAbsolute = Paths.get(path).normalize();", "+        final Path pathBase = Paths.get(baseDirectory).normalize();", "+        return pathBase.relativize(pathAbsolute).toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f44e63c7e508b747bf609a548b452e29", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "10330437ddd4be125cb4109702d0d0b96ffe3303", "commitAfterChange": "d963b8bfc21b4f782e598c70be31d2123c4dbef7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private static String extractBaseName(File aFile)", "signatureAfterChange": "     private static String extractPropertyIdentifier(final File aFile)", "diff": ["-    private static String extractBaseName(File aFile)", "+    private static String extractPropertyIdentifier(final File aFile)", "-        String fileName = aFile.getPath();", "-        int k = fileName.indexOf(\"_\");", "-        if (k != -1) {", "-            return fileName.substring(0, k);", "-        }", "-        else {", "-            return fileName.substring(0, fileName.indexOf(\".\"));", "-        }", "+        final String filePath = aFile.getPath();", "+        final int dirNameEnd = filePath.lastIndexOf(File.separatorChar);", "+        final int baseNameStart = dirNameEnd + 1;", "+        final int underscoreIdx = filePath.indexOf('_', baseNameStart);", "+        final int dotIdx = filePath.indexOf('.', baseNameStart);", "+        final int cutoffIdx = (underscoreIdx != -1) ? underscoreIdx : dotIdx;", "+        return filePath.substring(0, cutoffIdx);"]}]}
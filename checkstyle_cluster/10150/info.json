{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e256786f64f7c181f4173ae3d9eb8e0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c9168fbd88b8bfe70c94221ed1291d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "e1613910f30cc63de1393ed897aa766932e1d973", "commitAfterChange": "e56f3d21ee1a0e8c0eced70ec7990fb03dcb3215", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean isOverrideMethod(DetailAST aAST)", "signatureAfterChange": "     private boolean hasAllowedAnnotations(DetailAST aMethodDef)", "diff": ["+     */", "+    private boolean hasAllowedAnnotations(DetailAST aMethodDef)", "+    {", "+        final DetailAST modifiersNode = aMethodDef.findFirstToken(TokenTypes.MODIFIERS);", "+        DetailAST annotationNode = modifiersNode.findFirstToken(TokenTypes.ANNOTATION);", "+        while (annotationNode != null && annotationNode.getType() == TokenTypes.ANNOTATION) {", "+            DetailAST identNode = annotationNode.findFirstToken(TokenTypes.IDENT);", "+            if (identNode == null) {", "+                identNode = annotationNode.findFirstToken(TokenTypes.DOT)", "+                    .findFirstToken(TokenTypes.IDENT);", "+            }", "+            if (mAllowedAnnotations.contains(identNode.getText())) {", "+                return true;", "+            }", "+            annotationNode = annotationNode.getNextSibling();", "+        }", "+        return false;", "+    }", "-     */", "-    private boolean isOverrideMethod(DetailAST aAST)", "-    {", "-        // Need it to be a method, cannot have an override on anything else.", "-        // Must also have MODIFIERS token to hold the @Override", "-        if ((TokenTypes.METHOD_DEF != aAST.getType())", "-            || (TokenTypes.MODIFIERS != aAST.getFirstChild().getType()))", "-        {", "-            return false;", "-        }", "-", "-        // Now loop over all nodes while they are annotations looking for", "-        // an \"@Override\".", "-        DetailAST node = aAST.getFirstChild().getFirstChild();", "-        while ((null != node) && (TokenTypes.ANNOTATION == node.getType())) {", "-            if ((node.getFirstChild().getType() == TokenTypes.AT)", "-                && (node.getFirstChild().getNextSibling().getType()", "-                    == TokenTypes.IDENT)", "-                && (\"Override\".equals(", "-                        node.getFirstChild().getNextSibling().getText())))", "-            {", "-                return true;", "-            }", "-            node = node.getNextSibling();", "-        }", "-        return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd40ed34cc89af7988e3a15ebc82603", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java", "commitBeforeChange": "66ed32ae55811c22434e7296566915759e921305", "commitAfterChange": "0d1bef9960d1e9f93c6ca6d83f8f4bacc1a98db7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testAllXmlExamples() throws Exception", "signatureAfterChange": "      @Test     public void testAllXmlExamples() throws Exception", "diff": ["-            final String source = Files.toString(file, UTF_8);", "-            int position = -1;", "+            final String input = Files.toString(file, UTF_8);", "+            final String fileName = file.getName();", "-            while (true) {", "-                position = source.indexOf(\"<source>\", position + 1);", "+            final Document document = getRawXml(fileName, input, input);", "+            final NodeList sources = document.getElementsByTagName(\"source\");", "-                if (position == -1) {", "-                    break;", "-                }", "-", "-                final int nextPosition = source.indexOf(\"</source>\", position);", "-                final String unserializedSource = source.substring(position + 8, nextPosition)", "-                        .trim().replace(\"&lt;\", \"<\").replace(\"&gt;\", \">\").replace(\"&quot;\", \"\\\"\")", "-                        .replace(\"&amp;\", \"&\").replace(\"...\", \"\");", "-", "-                position = nextPosition;", "+            for (int position = 0; position < sources.getLength(); position++) {", "+                final String unserializedSource = sources.item(position).getTextContent()", "+                        .replace(\"...\", \"\").trim();", "-                buildAndTestXml(file.getName(), unserializedSource);", "+                buildAndTestXml(fileName, unserializedSource);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fae5486282ef05cb418baf56fbd2efc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91d3662f89b0fd66663df564f3466edc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "         public Tag(int aLine, int aColumn, String aText, boolean aOn)             throws ConversionException", "signatureAfterChange": "         public Tag(int line, int column, String text, boolean on)             throws ConversionException", "diff": ["-        public Tag(int aLine, int aColumn, String aText, boolean aOn)", "+        public Tag(int line, int column, String text, boolean on)", "-            mLine = aLine;", "-            mColumn = aColumn;", "-            mText = aText;", "-            mOn = aOn;", "+            this.line = line;", "+            this.column = column;", "+            this.text = text;", "+            this.on = on;", "-            mTagCheckRegexp = mCheckRegexp;", "+            tagCheckRegexp = checkRegexp;", "-                if (aOn) {", "+                if (on) {", "-                        expandFromComment(aText, mCheckFormat, mOnRegexp);", "-                    mTagCheckRegexp = Pattern.compile(format);", "-                    if (mMessageFormat != null) {", "+                        expandFromCoont(text, checkFormat, onRegexp);", "+                    tagCheckRegexp = Pattern.compile(format);", "+                    if (messageFormat != null) {", "-                            expandFromComment(aText, mMessageFormat, mOnRegexp);", "-                        mTagMessageRegexp = Pattern.compile(format);", "+                            expandFromCoont(text, messageFormat, onRegexp);", "+                        tagMessageRegexp = Pattern.compile(format);", "-                        expandFromComment(aText, mCheckFormat, mOffRegexp);", "-                    mTagCheckRegexp = Pattern.compile(format);", "-                    if (mMessageFormat != null) {", "+                        expandFromCoont(text, checkFormat, offRegexp);", "+                    tagCheckRegexp = Pattern.compile(format);", "+                    if (messageFormat != null) {", "-                            expandFromComment(", "-                                aText,", "-                                mMessageFormat,", "-                                mOffRegexp);", "-                        mTagMessageRegexp = Pattern.compile(format);", "+                            expandFromCoont(", "+                                text,", "+                                messageFormat,", "+                                offRegexp);", "+                        tagMessageRegexp = Pattern.compile(format);", "-                    \"unable to parse expanded comment \" + format,", "+                    \"unable to parse expanded coont \" + format,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9368e352a0c5464706ef341d4feb8909", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "         public Tag(String aText, int aLine)             throws ConversionException", "signatureAfterChange": "         public Tag(String text, int line)             throws ConversionException", "diff": ["-        public Tag(String aText, int aLine)", "+        public Tag(String text, int line)", "-            mText = aText;", "+            this.text = text;", "-            mTagCheckRegexp = mCheckRegexp;", "+            tagCheckRegexp = checkRegexp;", "-                format = expandFromComment(aText, mCheckFormat, mCommentRegexp);", "-                mTagCheckRegexp = Pattern.compile(format);", "-                if (mMessageFormat != null) {", "-                    format = expandFromComment(", "-                         aText, mMessageFormat, mCommentRegexp);", "-                    mTagMessageRegexp = Pattern.compile(format);", "+                format = expandFrocomment(text, checkFormat, commentRegexp);", "+                tagCheckRegexp = Pattern.compile(format);", "+                if (messageFormat != null) {", "+                    format = expandFrocomment(", "+                         text, messageFormat, commentRegexp);", "+                    tagMessageRegexp = Pattern.compile(format);", "-                if (mInfluenceFormat != null) {", "-                    format = expandFromComment(", "-                        aText, mInfluenceFormat, mCommentRegexp);", "+                if (influenceFormat != null) {", "+                    format = expandFrocomment(", "+                        text, influenceFormat, commentRegexp);", "-                            \"unable to parse influence from '\" + aText", "-                                + \"' using \" + mInfluenceFormat, e);", "+                            \"unable to parse influence from '\" + text", "+                                + \"' using \" + influenceFormat, e);", "-                    mFirstLine = aLine;", "-                    mLastLine = aLine + influence;", "+                    firstLine = line;", "+                    lastLine = line + influence;", "-                    mFirstLine = aLine + influence;", "-                    mLastLine = aLine;", "+                    firstLine = line + influence;", "+                    lastLine = line;"]}]}
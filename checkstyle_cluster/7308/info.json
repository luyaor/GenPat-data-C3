{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6be4271621e4b7cc22aabe2b2f32e99a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c59c164752372a60a9792088ea59451", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ConstantNameCheck.java", "commitBeforeChange": "e44cd4ec43a25cac72924e04d7b4ca7fa9fa10ee", "commitAfterChange": "4bbe4acd319fa60dac09d28aaa9f7b18f18dee1f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        //precondition", "-        if (aAST.getType() != TokenTypes.VARIABLE_DEF) {", "-            return;", "-        }", "-", "+        // TODO: Need to consider the case of being in an interface! In that", "+        // case, does not matter if \"static\" and \"final\" keywords are there.", "+        ", "-        if (modifiers == null", "-                || !modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "-                || !modifiers.branchContains(TokenTypes.FINAL)) {", "-            return;", "-        }      ", "-        ", "-        //name check", "-        final DetailAST name = Utils.findFirstToken(aAST.getFirstChild(),", "-                                              TokenTypes.IDENT);", "-        if (name == null) {", "-            return;", "-        }", "-        // Handle the serialVersionUID constant which is used for", "-        // Serialization. Cannot enforce rules on it. :-)", "-        if (\"serialVersionUID\".equals(name.getText())) {", "-            return;", "-        }", "-        ", "-        if (!getRegexp().match(name.getText())) {", "-            log(name.getLineNo(),", "-                name.getColumnNo(),", "-                \"name.invalidPattern\",", "-                name.getText(),", "-                getFormat());", "+        if ((modifiers != null)", "+            && modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "+            && modifiers.branchContains(TokenTypes.FINAL))", "+        {", "+            //name check", "+            final DetailAST name =", "+                Utils.findFirstToken(aAST.getFirstChild(), TokenTypes.IDENT);", "+", "+            // Handle the serialVersionUID constant which is used for", "+            // Serialization. Cannot enforce rules on it. :-)", "+            if (!\"serialVersionUID\".equals(name.getText())", "+                && !getRegexp().match(name.getText()))", "+            {", "+                log(name.getLineNo(),", "+                    name.getColumnNo(),", "+                    \"name.invalidPattern\",", "+                    name.getText(),", "+                    getFormat());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb2f29045044bf9c567b8789c9756fc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ConstantNameCheck.java", "commitBeforeChange": "59c9c64381dd92bc877f5a834dae7856603d5546", "commitAfterChange": "2a8aba9a54d2112b142a1b9e0c4e762e780155c1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     protected final boolean mustCheckName(DetailAST aAST)", "diff": ["-    /** @see com.puppycrawl.tools.checkstyle.api.Check */", "-    public void visitToken(DetailAST aAST)", "+    /** @see com.puppycrawl.tools.checkstyle.checks.AbstractNameCheck */", "+    protected final boolean mustCheckName(DetailAST aAST)", "-        // TODO: Need to consider the case of being in an interface! In that", "-        // case, does not matter if \"static\" and \"final\" keywords are there.", "-        ", "-        //constant?", "-        final DetailAST modifiers =", "-                    aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        if ((modifiers != null)", "-            && modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "-            && modifiers.branchContains(TokenTypes.FINAL))", "-        {", "-            //name check", "-            final DetailAST name =", "-                aAST.findFirstToken(TokenTypes.IDENT);", "+        boolean retVal = false;", "+        DetailAST modifiersAST = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final boolean isStatic = modifiersAST != null", "+            && modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);", "+        final boolean isFinal = modifiersAST != null", "+            && modifiersAST.branchContains(TokenTypes.FINAL);", "+", "+        if ((isStatic  && isFinal) || ScopeUtils.inInterfaceBlock(aAST)) {", "-            if (!\"serialVersionUID\".equals(name.getText())", "-                && !getRegexp().match(name.getText()))", "-            {", "-                log(name.getLineNo(),", "-                    name.getColumnNo(),", "-                    \"name.invalidPattern\",", "-                    name.getText(),", "-                    getFormat());", "+            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+            if ((nameAST != null)", "+                    && !(\"serialVersionUID\".equals(nameAST.getText()))) {", "+                retVal = true;", "+", "+        return retVal;"]}]}
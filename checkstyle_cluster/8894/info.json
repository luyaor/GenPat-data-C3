{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "725638fcbe1e8e282b4e6bddc9ee265d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04f611268464f441886fbbf716e2f09c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/BaseCheckTestCase.java", "commitBeforeChange": "a1706551793b62548d9dcc93731b656f07b125a4", "commitAfterChange": "00fb7f0c1852eb015933c7c121284597de29caad", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      protected void verify(Checker aC,                           String aProcessedFilename,                           String aMessageFileName,                           String[] aExpected)         throws Exception", "signatureAfterChange": "      protected void verify(Checker aC,                           String aProcessedFilename,                           String aMessageFileName,                           String[] aExpected)         throws Exception", "diff": ["+        verify(aC,", "+            new File[] {new File(aProcessedFilename)},", "+            aMessageFileName, aExpected);", "+    }", "-        final int errs = aC.process(new File[] {new File(aProcessedFilename)});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "107071c74a410347febecb1640259f2f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "9cd5e92d947566b9ff99cebf3f10f1d3a16e935d", "commitAfterChange": "c28f32e2a8067514aefbc198f24744401c1a8c87", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static DetailAST parseFile(String aFilename)         throws IOException, ANTLRException", "signatureAfterChange": "     public static DetailAST parseFile(String aFileName)         throws IOException, ANTLRException", "diff": ["-    public static DetailAST parseFile(String aFilename)", "+    public static DetailAST parseFile(String aFileName)", "-        // Todo: remove duplicate code, see c.p.t.c.Checker", "-", "-        final String[] lines = Utils.getLines(aFilename);", "+        final String[] lines = Utils.getLines(aFileName);", "-        final Reader sar = new StringArrayReader(lines);", "-        final Java14Lexer jl = new Java14Lexer(sar);", "-        jl.setFilename(aFilename);", "-        jl.setCommentManager(cmgr);", "-", "-        final Java14Recognizer jr = new Java14Recognizer(jl);", "-        jr.setFilename(aFilename);", "-        jr.setASTNodeClass(DetailAST.class.getName());", "-        jr.compilationUnit();", "-        final DetailAST rootAST = (DetailAST) jr.getAST();", "-        return rootAST;", "+        return Checker.parse(lines, aFileName, cmgr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f486304fc7b69e107ed7e1a666bc44e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "e4282ad407f1d025c26b85c0709f2ff418b74f57", "commitAfterChange": "c9346746dc9a27d40eaa453e0afb4b0d1391665d", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public boolean hasIntersectionWithComment(int startLineNo,             int startColNo, int endLineNo, int endColNo)", "signatureAfterChange": "     public boolean hasIntersectionWithComment(int startLineNo,             int startColNo, int endLineNo, int endColNo)", "diff": ["-        // Check C comments (all comments should be checked)", "-        final Collection<List<TextBlock>> values = clangComments.values();", "-        for (final List<TextBlock> row : values) {", "-            for (final TextBlock comment : row) {", "-                if (comment.intersects(startLineNo, startColNo, endLineNo,", "-                        endColNo)) {", "-                    return true;", "-                }", "-            }", "-        }", "-", "-        // Check CPP comments (line searching is possible)", "-        for (int lineNumber = startLineNo; lineNumber <= endLineNo;", "-             lineNumber++) {", "-            final TextBlock comment = cppComments.get(lineNumber);", "-            if (comment != null", "-                    && comment.intersects(startLineNo, startColNo,", "-                            endLineNo, endColNo)) {", "-                return true;", "-            }", "-        }", "-        return false;", "+        return hasIntersectionWithCComment(startLineNo, startColNo, endLineNo, endColNo)", "+                || hasIntersectionWithCppComment(startLineNo, startColNo, endLineNo, endColNo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c5c896e9266e57e368fc4a515347171", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/BaseCheckTestCase.java", "commitBeforeChange": "6568a9b88220366da3fc9e58fc9de93af9a6520d", "commitAfterChange": "f116754656b534e1a44e797e21b06290dfcf8ad8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      protected void verify(Checker aC, String aFilename, String[] aExpected)         throws Exception", "signatureAfterChange": "      protected void verify(Checker aC, String aFileName, String[] aExpected)             throws Exception", "diff": ["-    protected void verify(Checker aC, String aFilename, String[] aExpected)", "+    protected void verify(Checker aC, String aFileName, String[] aExpected)", "+            throws Exception", "+    {", "+        verify(aC, aFileName, aFileName, aExpected);", "+    }", "-        final int errs = aC.process(new File[] {new File(aFilename)});", "-            assertEquals(aFilename + \":\" + aExpected[i], lnr.readLine());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a18af9485669da55987c7b024abae654", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c78236489ae05cae2e3f0f7f0f99754", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/CrossLanguageRegexpHeaderCheck.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void process(List<File> aFiles)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    /** {@inheritDoc} */", "-    public void process(List<File> aFiles)", "-", "-        final MessageDispatcher msgDispatcher = getMessageDispatcher();", "-        final RegexpHeaderChecker regexpHeaderChecker =", "-            new RegexpHeaderChecker(", "-                    mHeaderInfo, new FileSetCheckViolationMonitor());", "-        final List<File> files = filter(aFiles);", "-        for (final File file : files) {", "-            final String path = file.getPath();", "-            msgDispatcher.fireFileStarted(path);", "-            try {", "-                final String[] lines = Utils.getLines(path);", "-                regexpHeaderChecker.checkLines(lines);", "-            }", "-            catch (IOException ex) {", "-                log(0, \"unable to open file: \" + ex);", "-            }", "-            fireErrors(path);", "-            msgDispatcher.fireFileFinished(path);", "-        }", "+    @Override", "+    protected void processFiltered(File aFile, List<String> aLines)", "+    {", "+        mRegexpHeaderChecker.checkLines(", "+            aLines.toArray(new String[aLines.size()]));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbeb1772d62dee0ae7e4e1f108b3975b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void makeDropTarget(final Component c, boolean recursive)             throws TooManyListenersException", "signatureAfterChange": "      private void makeDropTarget(final Component component, boolean recursive)             throws TooManyListenersException", "diff": ["-    private void makeDropTarget(final Component c, boolean recursive)", "+    private void makeDropTarget(final Component component, boolean recursive)", "-        c.addHierarchyListener(new HierarchyListener() {", "+        component.addHierarchyListener(new HierarchyListener() {", "-                final Component parent = c.getParent();", "+                final Component parent = component.getParent();", "-                    c.setDropTarget(null);", "+                    component.setDropTarget(null);", "-                    new DropTarget(c, dropListener);", "+                    new DropTarget(component, dropListener);", "-        if (c.getParent() != null) {", "-            new DropTarget(c, dropListener);", "+        if (component.getParent() != null) {", "+            new DropTarget(component, dropListener);", "-        if (recursive && c instanceof Container) {", "-            final Container cont = (Container) c;", "+        if (recursive && component instanceof Container) {", "+            final Container cont = (Container) component;"]}]}
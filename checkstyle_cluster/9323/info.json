{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ecaff1cdae0ca6bae7e1b4ef7f9e2f42", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541364f6e3e8a88633bffb0809aceeee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "842c152be6b0bbcb754a346a6ce4b59c47469c17", "commitAfterChange": "fb5cf249885869256567d41798e14f2964a26192", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                    if (isTypeField(ast) && !hasEmptyLineAfter(ast)) {", "-                        if (allowNoEmptyLineBetweenFields", "-                            && nextToken.getType() != TokenTypes.VARIABLE_DEF", "-                            && nextToken.getType() != TokenTypes.RCURLY) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                                 nextToken.getText());", "-                        }", "-                        else if (!allowNoEmptyLineBetweenFields", "-                                 && nextToken.getType() != TokenTypes.RCURLY) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                                 nextToken.getText());", "-                        }", "-                    }", "-                    if (isTypeField(ast) && hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processVariableDef(ast, nextToken);", "-                    if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)", "-                        || ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)", "-                            && ast.getPreviousSibling() == null) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processImport(ast, nextToken, astType);", "-                    if (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_SHOULD_BE_SEPARATED, ast.getText());", "-                    }", "-                    if (!hasEmptyLineAfter(ast)) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processPackage(ast, nextToken);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "583f6590783ae922d45f9fdd7fe6d1a9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "fb5cf249885869256567d41798e14f2964a26192", "commitAfterChange": "7c1d239748c9a90112bf3a59b189dc31ffe41983", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processEnd(DetailAST ast)", "signatureAfterChange": "     private void processEnd(DetailAST ast)", "diff": ["-                final char charAfter = line.charAt(after);", "-", "-                // Need to handle a number of cases. First is:", "-                //    Collections.<Object>emptySet();", "-                //                        ^", "-                //                        +--- whitespace not allowed", "-                if (ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS", "-                        && ast.getParent().getParent().getType()", "-                            == TokenTypes.DOT", "-                        && ast.getParent().getParent().getParent().getType()", "-                            == TokenTypes.METHOD_CALL", "-                        || isAfterMethodReference(ast)) {", "-                    if (Character.isWhitespace(charAfter)) {", "-                        log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                    }", "-                }", "-                else if (!Character.isWhitespace(charAfter)", "-                    && '(' != charAfter && ')' != charAfter", "-                    && ',' != charAfter && '[' != charAfter", "-                    && '.' != charAfter && ':' != charAfter", "-                    && !isAfterMethodReference(ast)) {", "-                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \">\");", "-                }", "+                processSingleGeneric(ast, line, after);", "-                // In a nested Generic type, so can only be a '>' or ',' or '&'", "-", "-                // In case of several extends definitions:", "-                //", "-                //   class IntEnumValueType<E extends Enum<E> & IntEnum>", "-                //                                          ^", "-                //   should be whitespace if followed by & -+", "-                //", "-                final int indexOfAmp = line.indexOf('&', after);", "-                if (indexOfAmp != -1", "-                    && whitespaceBetween(after, indexOfAmp, line)) {", "-                    if (indexOfAmp - after == 0) {", "-                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"&\");", "-                    }", "-                    else if (indexOfAmp - after != 1) {", "-                        log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                    }", "-                }", "-                else if (line.charAt(after) == ' ') {", "-                    log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                }", "+                processNestedGenerics(ast, line, after);"]}]}
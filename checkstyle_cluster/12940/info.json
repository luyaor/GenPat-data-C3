{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2aa0df213cf84dad2553020505d81830", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d19b880d17090c8eb984febdfb76911", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "dd914fc5f3f806633a19410c22b96edee02e61b6", "commitAfterChange": "fe6158d4106f713438e769d0ab77289910cfe5bd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public int[] getAcceptableTokens()", "signatureAfterChange": "      @Override     public int[] getAcceptableTokens()", "diff": ["+            TokenTypes.IDENT,", "+            TokenTypes.CTOR_DEF,", "+            TokenTypes.METHOD_DEF,", "+            TokenTypes.INSTANCE_INIT,", "+            TokenTypes.STATIC_INIT,", "+            TokenTypes.LITERAL_FOR,", "+            TokenTypes.SLIST,", "+            TokenTypes.OBJBLOCK,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3615e6e4c69e4e0eaa25c14664b0a627", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java", "commitBeforeChange": "d471c9cd5437242b7d9e3f3c19409854fc74e50c", "commitAfterChange": "982b3963ca007c6101f69cf50c010f07292dab0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public int[] getDefaultTokens()", "signatureAfterChange": "     public int[] getDefaultTokens()", "diff": ["-        return new int[] {TokenTypes.SLIST};", "+        return new int[] {", "+            TokenTypes.LITERAL_WHILE,", "+            TokenTypes.LITERAL_TRY,", "+            TokenTypes.LITERAL_CATCH,", "+            TokenTypes.LITERAL_FINALLY,", "+            TokenTypes.LITERAL_SYNCHRONIZED,", "+            TokenTypes.LITERAL_DO,", "+            TokenTypes.LITERAL_IF,", "+            TokenTypes.LITERAL_ELSE,", "+            TokenTypes.LITERAL_FOR,", "+            TokenTypes.STATIC_INIT,", "+            // TODO: need to handle....", "+            //TokenTypes.LITERAL_SWITCH,      ", "+        };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73564172faf4512d862131e20844a310", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheck.java", "commitBeforeChange": "69ccfd3fa90239f676941f098176d5b2e8b72869", "commitAfterChange": "ed79281fff9b62deeed7b359c7fceedb6adb46c3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     protected void leaveTokenHook(DetailAST ast)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["+", "+    @Override", "+    public void leaveToken(DetailAST ast) {", "+        switch (ast.getType()) {", "+            case TokenTypes.CTOR_DEF:", "+            case TokenTypes.METHOD_DEF:", "+            case TokenTypes.INSTANCE_INIT:", "+            case TokenTypes.STATIC_INIT:", "+                leaveMethodDef(ast);", "+                break;", "+            default:", "+                break;", "+        }", "+    }", "-    @Override", "-    protected void leaveTokenHook(DetailAST ast) {", "-        // no code"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f8f1c665d883f6ab9038ec264e8775", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "5844ab2d3460cdb94e16158e9fefb69344577950", "commitAfterChange": "146e2657d319f070a4106cb0e4017fa6b3156949", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private DetailAST getAnnotationTarget(DetailAST ast)", "signatureAfterChange": "     private DetailAST getAnnotationTarget(DetailAST ast)", "diff": ["+                            case TokenTypes.ANNOTATION_FIELD_DEF:", "+                            case TokenTypes.TYPE:", "+                            case TokenTypes.LITERAL_NEW:", "+                            case TokenTypes.LITERAL_THROWS:", "+                            case TokenTypes.TYPE_ARGUMENT:", "+                            case TokenTypes.IMPLEMENTS_CLAUSE:", "+                            case TokenTypes.DOT:"]}]}
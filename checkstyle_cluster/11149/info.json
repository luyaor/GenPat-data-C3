{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21cbc224ea835f0d6cec1fd3d33317a0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "218b8b96105d31c86a3a9249209b4c74", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "3296ba06ac6ae5ad8c864ada15cec91d058785d4", "commitAfterChange": "6f1f7bd3fdcca84404e97964b3e48de6db5024ec", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "     public void beginTree(DetailAST aRootAST)", "diff": ["-        final int headerSize = getHeaderLines().length;", "-        final int fileSize = getLines().length;", "+        final String[] lines = getLines();", "+        mRegexpHeaderChecker.checkLines(lines);", "+    }", "-        if (headerSize - mMultiLines.length > fileSize) {", "-            log(1, \"header.missing\");", "-        }", "-        else {", "-            int headerLineNo = 0;", "-            int i;", "-            for (i = 0; (headerLineNo < headerSize) && (i < fileSize); i++) {", "-                boolean isMatch = isMatch(i, headerLineNo);", "-                while (!isMatch && isMultiLine(headerLineNo)) {", "-                    headerLineNo++;", "-                    isMatch = (headerLineNo == headerSize)", "-                        || isMatch(i, headerLineNo);", "-                }", "-                if (!isMatch) {", "-                    log(i + 1, \"header.mismatch\",", "-                        getHeaderLines()[headerLineNo]);", "-                    break; // stop checking", "-                }", "-                if (!isMultiLine(headerLineNo)) {", "-                    headerLineNo++;", "-                }", "-            }", "-            if (i == fileSize) {", "-                // if file finished, but we have at least one non-multi-line", "-                // header isn't completed", "-                for (; headerLineNo < headerSize; headerLineNo++) {", "-                    if (!isMultiLine(headerLineNo)) {", "-                        log(1, \"header.missing\");", "-                        break;", "-                    }", "-                }", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73aaab9e784b838fdb39888cf215bd80", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "0ce872d7cc6b0b1564655b9e3119f72911f4dddd", "commitAfterChange": "ea9ff3965d9c657b5b7bd2d969e075f430635c47", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     PropertyCacheFile(Configuration currentConfig, String fileName)", "signatureAfterChange": "     PropertyCacheFile(Configuration config, String fileName)", "diff": ["-    PropertyCacheFile(Configuration currentConfig, String fileName) {", "-        boolean setInActive = true;", "-        if (fileName != null) {", "-            FileInputStream inStream = null;", "-            // get the current config so if the file isn't found", "-            // the first time the hash will be added to output file", "-            final String currentConfigHash = getConfigHashCode(currentConfig);", "+    PropertyCacheFile(Configuration config, String fileName) {", "+        if (config == null) {", "+            throw new IllegalArgumentException(\"config can not be null\");", "+        }", "+        if (fileName == null) {", "+            throw new IllegalArgumentException(\"fileName can not be null\");", "+        }", "+        this.config = config;", "+        this.fileName = fileName;", "+    }", "-                final String cachedConfigHash =", "-                    details.getProperty(CONFIG_HASH_KEY);", "-                setInActive = false;", "-                if (cachedConfigHash == null", "-                    || !cachedConfigHash.equals(currentConfigHash)) {", "-            catch (final FileNotFoundException e) {", "-                // Ignore, the cache does not exist", "-                setInActive = false;", "-                // put the hash in the file if the file is going to be created", "-                details.put(CONFIG_HASH_KEY, currentConfigHash);", "-            }", "-            catch (final IOException e) {", "-                LOG.debug(\"Unable to open cache file, ignoring.\", e);", "-            }", "-        detailsFile = setInActive ? null : fileName;"]}]}
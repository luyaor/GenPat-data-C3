{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d33c1a05fbc819fb72ead9daf26a65ff", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58888044ff6abb4cccb672b42eb5deef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java", "commitBeforeChange": "30a744e620b52a1f33a0866f1f41cc9c6c9a3a98", "commitAfterChange": "7f103f3760306b1b4c26ca5508972bc232672ad9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "     public void beginTree(DetailAST aRootAST)", "diff": ["-            // I don't want handle several comments on one line :(", "-            // Perhaps I'm wrong :)", "-            if (cppComments.containsKey(lineNo)", "-                && cComments.containsKey(lineNo)", "-                || cComments.containsKey(lineNo)", "-                && ((List) cComments.get(lineNo)).size() > 1)", "-            {", "-                log(lineNo.intValue(), \"Too many comments.\");", "-                continue;", "-            }", "-            String lineAfter = \"\";", "-                    (TextBlock) commentList.iterator().next();", "+                    (TextBlock) commentList.get(commentList.size() - 1);", "-                    lineAfter = line.substring(comment.getEndColNo() + 1);", "+                    String lineAfter =", "+                        line.substring(comment.getEndColNo() + 1).trim();", "+                    if (!\"\".equals(lineAfter)) {", "+                        // do not check comment which doesn't end line", "+                        continue;", "+                    }", "-            lineAfter = lineAfter.trim();", "-            if (!blankLinePattern.match(lineBefore) || !\"\".equals(lineAfter)) {", "+            if (!blankLinePattern.match(lineBefore)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e771e31b9115ca1fadcbbd820538348a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java", "commitBeforeChange": "e8d025321c3d1f5741e860bd96a93e7d2169ca9c", "commitAfterChange": "661274b68096ccd5876abb8eacf7c8d42a939a0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+                final int lineNo = aAST.getLineNo();", "-                    contents.getJavadocBefore(aAST.getLineNo());", "+                    contents.getJavadocBefore(lineNo);", "-                    log(aAST.getLineNo(), \"javadoc.missing\");", "+                    log(lineNo, \"javadoc.missing\");", "-                    if ((mAuthorRE != null)", "-                        && (mAuthorRE.grep(cmt).length == 0))", "-                    {", "-                        // TODO: better error message", "-                        log(aAST.getLineNo(), \"type.missingTag\", \"@author\");", "-                    }", "-", "-                    if ((mVersionRE != null)", "-                        && (mVersionRE.grep(cmt).length == 0))", "-                    {", "-                        // TODO: better error message", "-                        log(aAST.getLineNo(), \"type.missingTag\", \"@version\");", "-                    }", "-", "+                    checkTag(lineNo, cmt, \"@author\",", "+                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);", "+                    checkTag(lineNo, cmt, \"@version\",", "+                            mVersionTagRE, mVersionFormatRE, mVersionFormat);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac595f4526b0edd5f18f87d4bb99ac3b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6636b58cd3cebfc371322a3f1a068cd9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java", "commitBeforeChange": "a1706551793b62548d9dcc93731b656f07b125a4", "commitAfterChange": "00fb7f0c1852eb015933c7c121284597de29caad", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testTranslation()          throws Exception", "signatureAfterChange": "      public void testTranslation()          throws Exception", "diff": ["+        final File[] propertyFiles = new File[] {", "+            new File(getPath(\"messages_de.properties\")),", "+            new File(getPath(\"messages.properties\"))", "+        };", "-            getPath(\"InputScopeAnonInner.java\"),", "+            propertyFiles,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5eda4fd5903c3b39064610118f34027", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "3fa2424fb3fbc30a9406cbcd29401f6d4285c77c", "commitAfterChange": "8d9d5e58ac50133f15ad8807bea302ab16aa5071", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected void logError(DetailAST aAst, String aSubtypeName,         int aActualLevel, int aExpectedLevel)", "signatureAfterChange": "     protected void logError(DetailAST aAst, String aSubtypeName,                             int aActualLevel, int aExpectedLevel)", "diff": ["-        int aActualLevel, int aExpectedLevel)", "+                            int aActualLevel, int aExpectedLevel)", "-        // TODO: i18n", "-        mIndentCheck.indentationLog(aAst.getLineNo(), mTypeName + typeStr", "-            + \" at indentation level \" + aActualLevel", "-            + \" not at correct indentation, \" + aExpectedLevel);", "+        Object[] args = new Object[] {", "+            mTypeName + typeStr,", "+            new Integer(aActualLevel),", "+            new Integer(aExpectedLevel),", "+        };", "+        mIndentCheck.indentationLog(aAst.getLineNo(),", "+                                    \"indentation.error\",", "+                                    args);"]}]}
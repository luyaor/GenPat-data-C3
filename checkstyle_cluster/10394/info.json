{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2cdd03b6770ca29b2df5e8c59196342", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56c2b49bfd2fa2761fe60521cd058cd7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java", "commitBeforeChange": "9fe85771081f675ffba46da219957c3450801c92", "commitAfterChange": "dc3ac39a9a3ad80a11c8c30e09c0e59640dc317b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testCheckOptions()", "signatureAfterChange": "      @Test     public void testCheckOptions()", "diff": ["-        Messager.preRegister(context, \"\");", "+        TestMessager testMessanger = new TestMessager(context);", "-        assertFalse(TokenTypesDoclet.checkOptions(options, Messager.instance0(context)));", "+        assertFalse(TokenTypesDoclet.checkOptions(options, testMessanger));", "-        assertTrue(TokenTypesDoclet.checkOptions(options, Messager.instance0(context)));", "+        assertTrue(TokenTypesDoclet.checkOptions(options, testMessanger));", "-        assertFalse(TokenTypesDoclet.checkOptions(options, Messager.instance0(context)));", "+        assertFalse(TokenTypesDoclet.checkOptions(options, testMessanger));", "+", "+        String[] expected = {", "+            \"Usage: javadoc -destfile file -doclet TokenTypesDoclet ...\",", "+            \"Only one -destfile option allowed.\",", "+        };", "+", "+        Assert.assertArrayEquals(expected, testMessanger.messages.toArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df96089a118b26ed2caa69a0c3e8a2bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java", "commitBeforeChange": "113ea8405c8b753540ee3423d7e37e383f269155", "commitAfterChange": "7f7db38a097a95c264307123924779380fb40077", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void checkForParams()", "signatureAfterChange": "     private void checkForParams()", "diff": ["-        checkExpressionSubtree(", "-            getMainAst().findFirstToken(TokenTypes.FOR_INIT),", "-            getLevel() + getIndentCheck().getBasicOffset(),", "-            false,", "-            false);", "-        checkExpressionSubtree(", "-            getMainAst().findFirstToken(TokenTypes.FOR_CONDITION),", "-            getLevel() + getIndentCheck().getBasicOffset(),", "-            false,", "-            false);", "-        checkExpressionSubtree(", "-            getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR),", "-            getLevel() + getIndentCheck().getBasicOffset(),", "-            false,", "-            false);", "+        IndentLevel expected = new IndentLevel(getLevel(), getBasicOffset());", "+", "+        DetailAST init = getMainAst().findFirstToken(TokenTypes.FOR_INIT);", "+        checkExpressionSubtree(init, expected, false, false);", "+", "+        DetailAST cond = getMainAst().findFirstToken(TokenTypes.FOR_CONDITION);", "+        checkExpressionSubtree(cond, expected, false, false);", "+", "+        DetailAST iter = getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR);", "+        checkExpressionSubtree(iter, expected, false, false);"]}]}
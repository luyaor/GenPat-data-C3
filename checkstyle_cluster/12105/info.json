{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "558d45622bde59d463d9b27d2e28c925", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3987938920ea0e6f850a436c2950a2c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_TRY:", "-                leaveLiteralTry();", "-                break;", "-            default:", "-                throw new IllegalStateException(ast.toString());", "+        if (ast.getType() == TokenTypes.LITERAL_TRY) {", "+            leaveLiteralTry();", "+        }", "+        else {", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d20ea1341bd53f8eb87a9b4a16d197", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private static Entry<Integer, Integer> countLinesColumns(             String text, int initialLinesCnt, int initialColumnsCnt)", "signatureAfterChange": "     private static Entry<Integer, Integer> countLinesColumns(             String text, int initialLinesCnt, int initialColumnsCnt)", "diff": ["-            switch (c) {", "-                case '\\n':", "-                    lines++;", "-                    columns = 0;", "-                    break;", "-                default:", "-                    columns++;", "+            if (c == '\\n') {", "+                lines++;", "+                columns = 0;", "+            }", "+            else {", "+                columns++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57ff7c0cc1767539266e5794e3499a18", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_IF:", "-                leaveLiteralIf(ast);", "-                break;", "-            default:", "-                throw new IllegalStateException(ast.toString());", "+        if (ast.getType() == TokenTypes.LITERAL_IF) {", "+            leaveLiteralIf(ast);", "+        }", "+        else {", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "895ad14d414351880522da2522a561b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_IF:", "-                visitLiteralIf(ast);", "-                break;", "-            default:", "-                throw new IllegalStateException(ast.toString());", "+        if (ast.getType() == TokenTypes.LITERAL_IF) {", "+            visitLiteralIf(ast);", "+        }", "+        else {", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fbee96cede2cedea8d30f66e4f80b95", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_TRY:", "-                visitLiteralTry(ast);", "-                break;", "-            default:", "-                throw new IllegalStateException(ast.toString());", "+        if (ast.getType() == TokenTypes.LITERAL_TRY) {", "+            visitLiteralTry(ast);", "+        }", "+        else {", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb2e400ec9c13f9dcc2bc26b1f9db75d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_THROWS:", "-                visitLiteralThrows(ast);", "-                break;", "-            default:", "-                throw new IllegalStateException(ast.toString());", "+        if (ast.getType() == TokenTypes.LITERAL_THROWS) {", "+            visitLiteralThrows(ast);", "+        }", "+        else {", "+            throw new IllegalStateException(ast.toString());"]}]}
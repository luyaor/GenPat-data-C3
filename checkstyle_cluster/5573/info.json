{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6be649d618d8f84f6b6cf7766813a6d9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14642e3a455617abff9a1e8655b43349", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "commitBeforeChange": "79404974eff1458f4243f8acd6a08b6a8b869342", "commitAfterChange": "fe9057366308642868c25d427c3ee94411b37170", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     PackageObjectFactory()", "signatureAfterChange": "     public PackageObjectFactory(Set<String> aPackageNames,             ClassLoader aModuleClassLoader)", "diff": ["-    PackageObjectFactory()", "+    public PackageObjectFactory(Set<String> aPackageNames,", "+            ClassLoader aModuleClassLoader)", "-    }", "+        if (aModuleClassLoader == null) {", "+            throw new IllegalArgumentException(", "+                    \"aModuleClassLoader must not be null\");", "+        }", "+        //create a copy of the given set, but retain ordering", "+        mPackages = new LinkedHashSet<String>(aPackageNames);", "+        mModuleClassLoader = aModuleClassLoader;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3be821cb1a4d9ffb35f1963ba5a1f7ab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "d6272b70eb5ad61fd8ab34091e970c50b1f67386", "commitAfterChange": "1a2c318e22a0b2b22ccc76019217c0892fe2d59b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static AuditListener createListener(String format,                                                 OutputStream out,                                                 boolean closeOut)             throws UnsupportedEncodingException, CheckstyleException", "signatureAfterChange": "     private static AuditListener createListener(String format,                                                 String outputLocation)             throws UnsupportedEncodingException, FileNotFoundException", "diff": ["-                                                OutputStream out,", "-                                                boolean closeOut)", "-            throws UnsupportedEncodingException, CheckstyleException", "+                                                String outputLocation)", "+            throws UnsupportedEncodingException, FileNotFoundException", "+", "+        // setup the output stream", "+        OutputStream out = null;", "+        boolean closeOut = false;", "+        if (outputLocation != null) {", "+            out = new FileOutputStream(outputLocation);", "+            closeOut = true;", "+        }", "+        else {", "+            out = System.out;", "+            closeOut = false;", "+        }", "+", "+        // setup a listener", "-                throw new CheckstyleException(\"Invalid output format. Found '\" + format", "+                throw new IllegalStateException(\"Invalid output format. Found '\" + format"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59aeaf90fe62b580beaa0d54c3f4820b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "59aa66c3cc43db0a7cd8bb0ea3a39b6f4339fe88", "commitAfterChange": "a24df47cafeab03fd65cf72b460aad3d2fafce3d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void notifyLeave(DetailAST aAST)", "signatureAfterChange": "     private void notifyLeave(DetailAST aAST, AstState aAstState)", "diff": ["-    private void notifyLeave(DetailAST aAST)", "+    private void notifyLeave(DetailAST aAST, AstState aAstState)", "-        final Collection<Check> visitors =", "-            mTokenToChecks.get(TokenTypes.getTokenName(aAST.getType()));", "+        Collection<Check> visitors;", "+        final String tokenType = TokenTypes.getTokenName(aAST.getType());", "+", "+        if (aAstState == AstState.WITH_COMMENTS) {", "+            visitors = mTokenToCommentChecks.get(tokenType);", "+        }", "+        else {", "+            visitors = mTokenToOrdinaryChecks.get(tokenType);", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce89823e4ae9900e6eeb1170c44b25d2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "59aa66c3cc43db0a7cd8bb0ea3a39b6f4339fe88", "commitAfterChange": "a24df47cafeab03fd65cf72b460aad3d2fafce3d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void notifyVisit(DetailAST aAST)", "signatureAfterChange": "     private void notifyVisit(DetailAST aAST, AstState aAstState)", "diff": ["+    private void notifyVisit(DetailAST aAST, AstState aAstState)", "+        Collection<Check> visitors;", "+        final String tokenType = TokenTypes.getTokenName(aAST.getType());", "+", "+        if (aAstState == AstState.WITH_COMMENTS) {", "+            visitors = mTokenToCommentChecks.get(tokenType);", "+        }", "+        else {", "+            visitors = mTokenToOrdinaryChecks.get(tokenType);", "-     */", "-    private void notifyVisit(DetailAST aAST)", "-    {", "-        final Collection<Check> visitors =", "-            mTokenToChecks.get(TokenTypes.getTokenName(aAST.getType()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec1292ff41aa6c8f9dfa1425733000d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c", "commitAfterChange": "39f40e57858c8a5c6310bf35e6649b03188b6996", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean hasTrailComment(DetailAST aAst)", "signatureAfterChange": "     private boolean hasTrailComment(DetailAST aAst)", "diff": ["+        DetailAST semi;", "-            DetailAST comma = variableDef.getNextSibling();", "+            semi = variableDef.getNextSibling();", "-            if (comma.getType() != TokenTypes.COMMA) {", "-                comma = variableDef.getLastChild();", "+            if (semi.getType() != TokenTypes.SEMI) {", "+                semi = variableDef.getLastChild();", "+        }", "+        else {", "+            semi = getSemi(aAst);", "+        }", "-            final int lineNo = comma.getLineNo();", "+        if (semi != null) {", "+            final int lineNo = semi.getLineNo();", "-            if (sCommentRegexp.matcher(currentLine).find()) {", "+            if (currentLine != null && sCommentRegexp.matcher(currentLine).find()) {", "-        return mAllowByTailComment && result;", "+", "+        return result;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4c4263c3d6c7556ebb50cafd2040184", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f57ebb22625a4cfce02960184be39f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "0406304865b4fdd6e5294f0bcd948f1158f4ae84", "commitAfterChange": "e15f70ac5b1460236e14237acc3a041102238efd", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean matchesThirdPartyImportGroup(boolean isStatic,         String currentImport, String currentGroup)", "signatureAfterChange": "     private static RuleMatchForImport findBetterPatternMatch(String importPath, String group,             Pattern regExp, RuleMatchForImport currentBestMatch)", "diff": ["-     */", "-    private boolean matchesThirdPartyImportGroup(boolean isStatic,", "-        String currentImport, String currentGroup) {", "-        return !isStatic && THIRD_PARTY_PACKAGE_RULE_GROUP.equals(currentGroup)", "-                && thirdPartyPackageRegExp.matcher(currentImport).find()", "-                && !standardPackageRegExp.matcher(currentImport).find()", "-                && !specialImportsRegExp.matcher(currentImport).find();", "+    private static RuleMatchForImport findBetterPatternMatch(String importPath, String group,", "+            Pattern regExp, RuleMatchForImport currentBestMatch) {", "+        RuleMatchForImport betterMatchCandidate = currentBestMatch;", "+        final Matcher matcher = regExp.matcher(importPath);", "+        while (matcher.find()) {", "+            final int length = matcher.end() - matcher.start();", "+            if (length > betterMatchCandidate.matchLength", "+                    || length == betterMatchCandidate.matchLength", "+                        && matcher.start() < betterMatchCandidate.matchPosition) {", "+                betterMatchCandidate = new RuleMatchForImport(group, length, matcher.start());", "+            }", "+        }", "+        return betterMatchCandidate;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f2e0e481b2ef911eb3a5ef3a8633358", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "41044d42b8f21ae00792f101a63101bf87d7fd61", "commitAfterChange": "7a4ec11d123dc0bbf7db943af715d19814d2e332", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "      protected void verify(Checker aC, String aFileName, String[] aExpected,             Integer... aWarnsExpected) throws Exception", "signatureAfterChange": "      protected Integer[] getLinesWithWarn(String fileName) throws IOException", "diff": ["-", "-    protected void verify(Checker aC, String aFileName, String[] aExpected,", "-            Integer... aWarnsExpected) throws Exception {", "-        verify(aC, aFileName, aFileName, aExpected, aWarnsExpected);", "-    }", "+", "+    protected Integer[] getLinesWithWarn(String fileName) throws IOException {", "+        final List<Integer> result = new ArrayList<>();", "+        try (BufferedReader br = new BufferedReader(new InputStreamReader(", "+                new FileInputStream(fileName), StandardCharsets.UTF_8))) {", "+            int lineNumber = 1;", "+            while (true) {", "+                final String line = br.readLine();", "+                if (line == null) {", "+                    break;", "+                }", "+                if (WARN_PATTERN.matcher(line).find()) {", "+                    result.add(lineNumber);", "+                }", "+                lineNumber++;", "+            }", "+        }", "+        return result.toArray(new Integer[result.size()]);", "+    }"]}]}
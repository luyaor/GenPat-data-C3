{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0556f67d76a72037ff696227334d28c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73d7622952da843e012363538255282d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isMatchingClassName(String aClassName)", "signatureAfterChange": "     private boolean isMatchingClassName(String className)", "diff": ["-    private boolean isMatchingClassName(String aClassName)", "+    private boolean isMatchingClassName(String className)", "-        final String shortName = aClassName.substring(aClassName.lastIndexOf(\".\") + 1);", "-        return (mIllegalClassNames.contains(aClassName)", "-                || mIllegalClassNames.contains(shortName))", "-            || (!mLegalAbstractClassNames.contains(aClassName)", "-                && getRegexp().matcher(aClassName).find());", "+        final String shortName = className.substring(className.lastIndexOf(\".\") + 1);", "+        return (illegalClassNames.contains(className)", "+                || illegalClassNames.contains(shortName))", "+            || (!legalAbstractClassNames.contains(className)", "+                && getRegexp().matcher(className).find());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d3c4298d84a4c583498619ec4525ab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "8af07e5dfd3744964ccde232393ecd64afea0aca", "commitAfterChange": "3a5f01cc66f50bf12d02002b4ded3f8aa677113a", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "     private String getIllegalInstantiation(String aClassName)", "signatureAfterChange": "     private String getIllegalInstantiation(String aClassName)", "diff": ["+        final int clsNameLen = aClassName.length();", "+        final int pkgNameLen = mPkgName.length();", "+", "+            final int illegalLen = illegal.length();", "-            if (((illegal.length() - javaLang.length()) == aClassName.length())", "+            if (((illegalLen - javaLang.length()) == clsNameLen)", "-            if (illegal.length() - mPkgName.length() == aClassName.length() + 1", "-                && illegal.charAt(mPkgName.length()) == '.'", "+", "+            // the toplevel package (mPkgName == null) is covered by the", "+            // \"illegalInsts.contains(aClassName)\" check above", "+", "+            // the test is the \"no garbage\" version of", "+            // illegal.equals(mPkgName + \".\" + aClassName)", "+            if (mPkgName != null", "+                && clsNameLen == illegalLen - pkgNameLen - 1", "+                && illegal.charAt(pkgNameLen) == '.'"]}]}
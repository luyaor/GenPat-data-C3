{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "030d825090f023a9a42766eb30035d7f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d8a18cd1238582d9e3322854457338e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java", "commitBeforeChange": "e971fcd9b5e44455e38308acd05ddb000591e213", "commitAfterChange": "420889115863aa3237904ad71051fbc666d7ffd2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     @Ignore     @Test     public void testCarriageReturn() throws Exception", "signatureAfterChange": "      @Test     public void testCarriageReturn() throws Exception", "diff": ["-    // Need to fix the line endings in the input file", "-    @Ignore", "-            \"14: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-            \"16: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-            \"19: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-            \"21: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "+            \"1: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "+            \"3: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-        verify(checkConfig, getPath(\"InputLineBreaks.java\"), expected);", "+", "+        final File file = temporaryFolder.newFile();", "+        Files.write(\"first line \\r\\n second line \\n\\r third line\", file, Charsets.UTF_8);", "+", "+        verify(checkConfig, file.getPath(), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd3c55ba3d77e6d78dab47dd21579af5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "4c124c309f63c48a52c3fe765f3e23ad5a4be9d3", "commitAfterChange": "4218884ee87436e45bc590291e5f3c7175f67930", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Ignore @Test     public void testOsBasedir() throws Exception", "signatureAfterChange": "      @Test     public void testOsBasedir() throws Exception", "diff": ["-    @Ignore @Test // Need to resolve why fails under Maven.", "+    @Test", "-        String testinputs_dir = System.getProperty(\"testinputs.dir\");", "+        String testinputs_dir = System.getProperty(\"testinputs.dir\")", "+                .replace('/', File.separatorChar)", "+                .replace('\\\\',File.separatorChar);", "-        c.setBasedir(testinputs_dir + \"indentation/./..\\\\coding\\\\\");", "-        assertEquals(c.getBasedir(), testinputs_dir + \"coding\");", "+        final String instr = testinputs_dir + \"indentation/./..\\\\coding\\\\\";", "+        c.setBasedir(instr);"]}]}
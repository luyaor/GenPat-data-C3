{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fb74482c7ff1fb7b543c6f61b110371", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dff4faaa5ed721f973ebffc88da8be1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "commitBeforeChange": "6f1840f011cea3a523d9df1278d4a0af98e1d967", "commitAfterChange": "f0e75896a4c9a79d1cd4e414ae3fc7011268eb80", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void realExecute()", "signatureAfterChange": "     private void realExecute()", "diff": ["-            // Process the files", "-            long startTime = System.currentTimeMillis();", "-            final List<File> files = scanFileSets();", "-            long endTime = System.currentTimeMillis();", "-            log(\"To locate the files took \" + (endTime - startTime) + TIME_SUFFIX,", "-                Project.MSG_VERBOSE);", "-", "-            log(\"Running Checkstyle \" + version + \" on \" + files.size()", "-                    + \" files\", Project.MSG_INFO);", "-            log(\"Using configuration \" + configLocation, Project.MSG_VERBOSE);", "-", "-            startTime = System.currentTimeMillis();", "-            final int numErrs = checker.process(files);", "-            endTime = System.currentTimeMillis();", "-            log(\"To process the files took \" + (endTime - startTime) + TIME_SUFFIX,", "-                Project.MSG_VERBOSE);", "-            final int numWarnings = warningCounter.getCount();", "-            final boolean ok = numErrs <= maxErrors", "-                    && numWarnings <= maxWarnings;", "-", "-            // Handle the return status", "-            if (!ok) {", "-                final String failureMsg =", "-                        \"Got \" + numErrs + \" errors and \" + numWarnings", "-                                + \" warnings.\";", "-                if (failureProperty != null) {", "-                    getProject().setProperty(failureProperty, failureMsg);", "-                }", "-", "-                if (failOnViolation) {", "-                    throw new BuildException(failureMsg, getLocation());", "-                }", "-            }", "+            processFiles(checker, warningCounter, version);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7bea23268cd81e4b0dafe0e91a3b83c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "44950d1ee4d8da79abe85a045d5ac4b0e1eb8750", "commitAfterChange": "a1de1005813debb8c93fe1df597e8653ccefabed", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-        final int numErrs;", "-            c = new Checker(mConfig);", "-            AuditListener[] listeners = getListeners();", "-            for (int i = 0; i < listeners.length; i++) {", "-                c.addListener(listeners[i]);", "+            try {", "+                c = new Checker(mConfig);", "+                // setup the listeners", "+                AuditListener[] listeners = getListeners();", "+                for (int i = 0; i < listeners.length; i++) {", "+                    c.addListener(listeners[i]);", "+                }", "+            catch (Exception e) {", "+                throw new BuildException(\"Unable to create a Checker\", e);", "+            }", "+", "+            // Process the files", "-            numErrs = c.process(files);", "-        }", "-        catch (Exception e) {", "-            throw new BuildException(\"Unable to create a Checker\", e);", "+            final int numErrs = c.process(files);", "+", "+            // Handle the return status", "+            if ((numErrs > 0) && mFailureProperty != null) {", "+                getProject().setProperty(mFailureProperty, \"true\");", "+            }", "+", "+            if ((numErrs > 0) && mFailOnViolation) {", "+                throw new BuildException(\"Got \" + numErrs + \" errors.\",", "+                                         location);", "+            }", "-        }", "-", "-        if ((numErrs > 0) && mFailureProperty != null) {", "-            getProject().setProperty(mFailureProperty, \"true\");", "-        }", "-", "-        if ((numErrs > 0) && mFailOnViolation) {", "-            throw new BuildException(\"Got \" + numErrs + \" errors.\", location);"]}]}
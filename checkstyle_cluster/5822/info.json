{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47763fe035c019c1b36dc25eae8b57b5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30bf68012a11bc6e7a8d133e66925e1f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "dc764f3b6ad475854cd0d22655db3f96e7eb7ed3", "commitAfterChange": "a1cecb5e0658862f957e60a8d5b2ade13b592101", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethod(MethodSignature aSig)", "signatureAfterChange": "     void verifyMethod(MethodSignature aSig)", "diff": ["-            log(aSig.getLineNo(), \"redundant 'public' modifier.\");", "+            log(aSig.getModSet().getFirstLineNo(),", "+                aSig.getModSet().getFirstColNo(),", "+                \"redundant 'public' modifier.\");", "-        final String[] jd = getJavadocBefore(aSig.getLineNo() - 1);", "+        final String[] jd = getJavadocBefore(aSig.getFirstLineNo() - 1);", "-            log(aSig.getLineNo(), \"method is missing a Javadoc comment.\");", "+            log(aSig.getFirstLineNo(), \"method is missing a Javadoc comment.\");", "-            final List tags = getMethodTags(jd, aSig.getLineNo() - 1);", "+            final List tags = getMethodTags(jd, aSig.getFirstLineNo() - 1);", "-                    checkReturnTag(tags, aSig.getLineNo());", "+                    checkReturnTag(tags, aSig.getFirstLineNo());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ba71d3e4a7cf9bf792af4e7b17d338f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java", "commitBeforeChange": "a24df47cafeab03fd65cf72b460aad3d2fafce3d", "commitAfterChange": "3bd25d71c993420cfeb4782530882d1cdb620fca", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void checkBadComments(FileContents aContents)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+    public void visitToken(DetailAST aAST)", "+        final String[] lines = aAST.getText().split(\"\\n\");", "-     */", "-    private void checkBadComments(FileContents aContents)", "-    {", "-        final Map<Integer, List<TextBlock>> allComments = aContents", "-                .getCComments();", "-        for (Map.Entry<Integer, List<TextBlock>> entry : allComments.entrySet())", "-        {", "-            for (TextBlock line : entry.getValue()) {", "-                final String[] cmt = line.getText();", "-                for (int i = 0; i < cmt.length; i++) {", "-                    if (getRegexp().matcher(cmt[i]).find()) {", "-                        log(entry.getKey().intValue() + i, \"todo.match\",", "-                                getFormat());", "-                    }", "-                }", "+        for (int i = 0; i < lines.length; i++) {", "+            if (mRegexp.matcher(lines[i]).find()) {", "+                log(aAST.getLineNo() + i, \"todo.match\", mFormat);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "814e2a46ffad5ba8d642bc95c60bf31f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java", "commitBeforeChange": "4a0b798adbce23e37a9d2445079503cb8d624eed", "commitAfterChange": "ee8467d36723b5b3562b4f101e84950a4320ecf1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            final String line = getLines()[aAST.getLineNo() - 1];", "-            final int after = aAST.getColumnNo() - 1;", "+            //empty for iterator. test pad after semi.", "+            final DetailAST semi = aAST.getPreviousSibling();", "+            final String line = getLines()[semi.getLineNo() - 1];", "+            final int after = semi.getColumnNo() + 1;", "+            //don't check if at end of line", "-                    log(aAST.getLineNo(), after, \"ws.followed\", \";\");", "+                    log(semi.getLineNo(), after, \"ws.followed\", \";\");", "-                         && !Character.isWhitespace(line.charAt(after))", "-                         && (line.charAt(after) != ')'))", "+                         && !Character.isWhitespace(line.charAt(after)))", "-                    log(aAST.getLineNo(), after, \"ws.notFollowed\", \";\");", "+                    log(semi.getLineNo(), after, \"ws.notFollowed\", \";\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd9eda308ec417dd6cfc68cb9c2e3b91", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processEnd(DetailAST ast)", "signatureAfterChange": "     private void processEnd(DetailAST ast)", "diff": ["-            log(ast.getLineNo(), before, \"ws.preceded\", \">\");", "+            log(ast.getLineNo(), before, WS_PRECEDED, \">\");", "-                        log(ast.getLineNo(), after, \"ws.followed\", \">\");", "+                        log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                    log(ast.getLineNo(), after, \"ws.illegalFollow\", \">\");", "+                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \">\");", "-                        log(ast.getLineNo(), after, \"ws.notPreceded\", \"&\");", "+                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"&\");", "-                        log(ast.getLineNo(), after, \"ws.followed\", \">\");", "+                        log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                    log(ast.getLineNo(), after, \"ws.followed\", \">\");", "+                    log(ast.getLineNo(), after, WS_FOLLOWED, \">\");"]}]}
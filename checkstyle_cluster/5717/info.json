{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b0d13585dbe87a243677924d2573e4b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c9d27316918c86461ed122645ffb370", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java", "commitBeforeChange": "dee81b907af4f8875caa188d54792910d442a282", "commitAfterChange": "f8946ef5332dd318bb5108567581b9bd857a51bd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+        final DetailAST declAST = typeAST.getParent();", "+        if (declAST.getType() == TokenTypes.METHOD_DEF) {", "+            // Do not check method's return type.", "+            // We have no alternatives here.", "+            return;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cc33ab65f377711fc57b08f69e96f1f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/AssignHandler.java", "commitBeforeChange": "2c02a737d97980eb4c984056c33265b8a917a717", "commitAfterChange": "c9a1ce7de0a2142413aff3eb122a4a9b2c389e11", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public IndentLevel suggestedChildLevel(ExpressionHandler aChild)", "signatureAfterChange": "     public IndentLevel suggestedChildLevel(ExpressionHandler aChild)", "diff": ["+        final DetailAST child = aChild.getMainAst();", "+", "+        if (child == assign.getFirstChild()) {", "+            // left side of assignment should have the same", "+            // indentation as \"assignment\"", "+            return getLevel();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "477adadc81dd08f52f6c61768797a68c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "7f7db38a097a95c264307123924779380fb40077", "commitAfterChange": "60847a32d538e9a0f1c1de3e349e8b3833741506", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean inIgnoreList(DetailAST aAST)", "signatureAfterChange": "     private boolean inIgnoreList(DetailAST aAST)", "diff": ["-        final float value = parseFloat(aAST.getText(), aAST.getType());", "+        float value = parseFloat(aAST.getText(), aAST.getType());", "+        final DetailAST parent = aAST.getParent();", "+        if (parent.getType() == TokenTypes.UNARY_MINUS) {", "+            value = -1 * value;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49d58fcc50c28d1229e5fe8d247d0d2b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "032b3801aa80bff181235ddd05244d07cc5f43f8", "commitAfterChange": "ef5716560b2b52a5fcd233ac9ad546a53749339f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["+        Properties properties = System.getProperties();", "+            }", "+            else if (\"-p\".equals(aArgs[i])) {", "+                properties = loadProperties(new File(aArgs[++i]));", "-            c = new Checker(new Configuration(System.getProperties(),", "-                                              System.out));", "+            c = new Checker(new Configuration(properties, System.out));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77144637823250aff912a4217058efa9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheckTest.java", "commitBeforeChange": "ead1a5e5dca96e2ad15426696f48a9c244385aff", "commitAfterChange": "75ddaad1c5cf714873e8d0fbd1de737f9b5a1754", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testBadFile() throws Exception", "signatureAfterChange": "      @Test     public void testBadFile() throws Exception", "diff": ["+        String exceptionMessage = \" (No such file or directory)\";", "+        if (System.getProperty(\"os.name\")", "+                .toLowerCase().startsWith(\"windows\")) {", "+            exceptionMessage = \" (The system cannot find the file specified)\";", "+        }", "+", "-            \"0: Got an exception - \" + path + \" (No such file or directory)\",", "+            \"0: Got an exception - \" + path + exceptionMessage,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cd0624a7e1a1d10a8d16be3cb0e86b4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "b0240a0200663fbf1d3146d1aefe12207fdde4af", "commitAfterChange": "9aa72722de7b5a4ffb5d50945c7bce8b58f25e8e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "         public long[] convertLines(String[] aOriginalLines)", "signatureAfterChange": "         public long[] convertLines(String[] aOriginalLines)", "diff": ["+                boolean onlyEmptyLines = true;", "+                    if (aOriginalLines[i + j].length() > 0) {", "+                        onlyEmptyLines = false;", "+                    }", "-                ret[i] = blockChecksum;", "+                ret[i] = onlyEmptyLines ? IGNORE : blockChecksum;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe32cc487867dc9e7a31d07d59e1961c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "7e36b3cbd1ae5cf41fd9101ac8c69fe751200d58", "commitAfterChange": "688dc9c547d92cf86d13733c6c0856dc43984676", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        if ((slistAST == null) && !isElseIf) {", "+        boolean skipStatement = false;", "+        if (aAST.getType() == TokenTypes.LITERAL_IF) {", "+            skipStatement = isSkipIfBlock(aAST);", "+        }", "+        if ((slistAST == null) && !isElseIf && !skipStatement) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2dd652c14375c9cf19878e20b2f0472f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19ad990bfa77f2cfb3e5c7f576982c13", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java", "commitBeforeChange": "37e0bc051f37fff6f6d004ae57073cc98df95122", "commitAfterChange": "169729f60b9aba5736b15f3514ae41ed994512f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(final DetailAST aAST)", "diff": ["-", "+                switch (fChild.getType()) {", "-                if (fChild.getType() == TokenTypes.STRING_LITERAL) {", "+                case TokenTypes.STRING_LITERAL:", "-", "-     //conditional case", "-     //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")", "-                }", "-                else if (fChild.getType() == TokenTypes.QUESTION) {", "+                    break;", "+                //conditional case", "+                //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")", "+                case TokenTypes.QUESTION:", "-                }", "-                else {", "-                    assert false : \"Should never get here, type: \"", "-                        + fChild.getType() + \" text: \" + fChild.getText();", "+                    break;", "+                //param in constant case", "+                //ex: public static final String UNCHECKED = \"unchecked\";", "+                //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)", "+                case TokenTypes.IDENT:", "+                case TokenTypes.DOT:", "+                    break;", "+                default:", "+                    throw new IllegalStateException(\"Should never get here, type: \"", "+                        + fChild.getType() + \" text: \" + fChild.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0b7168756b37cf290ec49e873dabfc1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "28e8f33dfdccf2d34d44bea42c28567776313628", "commitAfterChange": "6d3dbe2fd3d64b491ee39ac1d42d0ee88938d190", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (ast.getType() == TokenTypes.GENERIC_START) {", "-            processStart(ast);", "-            depth++;", "-        }", "-        else if (ast.getType() == TokenTypes.GENERIC_END) {", "-            processEnd(ast);", "-            depth--;", "+        switch (ast.getType()) {", "+            case TokenTypes.GENERIC_START:", "+                processStart(ast);", "+                depth++;", "+                break;", "+            case TokenTypes.GENERIC_END:", "+                processEnd(ast);", "+                depth--;", "+                break;", "+            default:", "+                throw new IllegalArgumentException(\"Unknown type \" + ast);"]}]}
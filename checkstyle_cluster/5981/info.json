{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64cdbafad5f1b83af38ee644c05f538f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6aaee9aef077b7be14acdcfa57b80bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java", "commitBeforeChange": "d5a6a78a590fa688a4405d80adb81e067e997b14", "commitAfterChange": "9df0df10bf2b1cd0613967ab85fbdcf02b94ef0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean inIgnoreList(DetailAST aAST)", "signatureAfterChange": "     private boolean inIgnoreList(DetailAST aAST)", "diff": ["-      float value = 0; //value of aAST", "-      switch (aAST.getType()) {", "-          case TokenTypes.NUM_DOUBLE :", "-              value = (float) Double.parseDouble(aAST.getText());", "-              break;", "-          case TokenTypes.NUM_FLOAT :", "-              value = Float.parseFloat(aAST.getText());", "-              break;", "-          case TokenTypes.NUM_INT :", "-              value = Integer.parseInt(aAST.getText());", "-              break;", "-          case TokenTypes.NUM_LONG :", "-              // Long.parseLong requires that the text ends with neither 'L'", "-              // nor 'l'.", "-              String text = aAST.getText();", "-              if ((text.endsWith(\"L\")) || (text.endsWith(\"l\"))) {", "-                  text = text.substring(0, text.length() - 1); ", "-              }", "-              value = Long.parseLong(text);", "-              break;", "-          default :", "-              break;", "-      }", "-      return (Arrays.binarySearch(mIgnoreNumbers, value) >= 0);", "+        final float value = parseFloat(aAST.getText(), aAST.getType());", "+        return (Arrays.binarySearch(mIgnoreNumbers, value) >= 0);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa103cfe5f45ec098beb331b47df544d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java", "commitBeforeChange": "69a3d541b4888e5e0e6ab09aa675667155c65381", "commitAfterChange": "fb0f73fc9c382d9279d573bfc3779b872f795aac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean isLegalComment(final TextBlock comment)", "signatureAfterChange": "     private boolean isLegalComment(final TextBlock comment)", "diff": ["-        if (legalComment == null) {", "-            return false;", "-        }", "+        boolean legal;", "+", "-        if (comment.getStartLineNo() != comment.getEndLineNo()) {", "-            return false;", "+        if (legalComment == null || comment.getStartLineNo() != comment.getEndLineNo()) {", "+            legal = false;", "-        String commentText = comment.getText()[0];", "-        // remove chars which start comment", "-        commentText = commentText.substring(2);", "-        // if this is a C-style comment we need to remove its end", "-        if (commentText.endsWith(\"*/\")) {", "-            commentText = commentText.substring(0, commentText.length() - 2);", "+        else {", "+            String commentText = comment.getText()[0];", "+            // remove chars which start comment", "+            commentText = commentText.substring(2);", "+            // if this is a C-style comment we need to remove its end", "+            if (commentText.endsWith(\"*/\")) {", "+                commentText = commentText.substring(0, commentText.length() - 2);", "+            }", "+            commentText = commentText.trim();", "+            legal = legalComment.matcher(commentText).find();", "-        commentText = commentText.trim();", "-        return legalComment.matcher(commentText).find();", "+        return legal;"]}]}
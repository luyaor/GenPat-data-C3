{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be37f9970477f374fbf1fa189bb4aaa0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e4587f5571829db7373e9876b49582c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "signatureAfterChange": "     private void checkLinesIndent(LineSet lines,                                   IndentLevel indentLevel,                                   boolean firstLineMatches,                                   int firstLine)", "diff": ["-    private void checkLinesIndent(LineSet aLines,", "-                                  IndentLevel aIndentLevel,", "-                                  boolean aFirstLineMatches,", "-                                  int aFirstLine)", "+    private void checkLinesIndent(LineSet lines,", "+                                  IndentLevel indentLevel,", "+                                  boolean firstLineMatches,", "+                                  int firstLine)", "-        if (aLines.isEmpty()) {", "+        if (lines.isEmpty()) {", "-        final int startLine = aLines.firstLine();", "-        final int endLine = aLines.lastLine();", "-        final int startCol = aLines.firstLineCol();", "+        final int startLine = lines.firstLine();", "+        final int endLine = lines.lastLine();", "+        final int startCol = lines.firstLineCol();", "-            getLineStart(mIndentCheck.getLine(startLine - 1));", "+            getLineStart(indentCheck.getLine(startLine - 1));", "-            checkSingleLine(startLine, startCol, aIndentLevel,", "-                aFirstLineMatches);", "+            checkSingleLine(startLine, startCol, indentLevel,", "+                firstLineMatches);", "-        IndentLevel theLevel = aIndentLevel;", "-        if (aFirstLineMatches", "-            || ((aFirstLine > mMainAst.getLineNo()) && shouldIncreaseIndent()))", "+        IndentLevel theLevel = indentLevel;", "+        if (firstLineMatches", "+            || ((firstLine > mainAst.getLineNo()) && shouldIncreaseIndent()))", "-            theLevel = new IndentLevel(aIndentLevel, getBasicOffset());", "+            theLevel = new IndentLevel(indentLevel, getBasicOffset());", "-            final Integer col = aLines.getStartColumn(i);", "+            final Integer col = lines.getStartColumn(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89daf69be0075098e706955484a94886", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "7347cc361b9251beb9f13acfbcb966f887925da5", "commitAfterChange": "661a9b0ddb10922458082573d79e0791ba6f38c2", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected void checkLinesIndent(LineSet aLines,                                     int aIndentLevel,                                     boolean aFirstLineMatches)", "signatureAfterChange": "     protected final void checkLinesIndent(LineSet aLines,                                           int aIndentLevel,                                           boolean aFirstLineMatches,                                           int aFirstLine)", "diff": ["-    protected void checkLinesIndent(LineSet aLines,", "-                                    int aIndentLevel,", "-                                    boolean aFirstLineMatches)", "+    protected final void checkLinesIndent(LineSet aLines,", "+                                          int aIndentLevel,", "+                                          boolean aFirstLineMatches,", "+                                          int aFirstLine)", "-        int realStartCol = getLineStart(", "-            mIndentCheck.getLines()[startLine - 1]);", "+        int realStartCol = getLineStart(mIndentCheck.getLines()[startLine - 1]);", "-", "-            // if first line starts the line, following lines are indented", "-            // one level; but if the first line of this expression is", "-            // nested with the previous expression (which is assumed if it", "-            // doesn't start the line) then don't indent more, the first", "-            // indentation is absorbed by the nesting", "-", "-        if (aFirstLineMatches || startLine > mMainAst.getLineNo()) {", "+        // if first line starts the line, following lines are indented", "+        // one level; but if the first line of this expression is", "+        // nested with the previous expression (which is assumed if it", "+        // doesn't start the line) then don't indent more, the first", "+        // indentation is absorbed by the nesting", "+", "+        if (aFirstLineMatches || aFirstLine > mMainAst.getLineNo()) {"]}]}
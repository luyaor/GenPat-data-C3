{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2727e74b1101cadd6c0b718e449c5f8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e5d3f216369d1e252324b8c00fe4fe4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java", "commitBeforeChange": "2e50ca968c3edffa06a700d2585345181c238cd4", "commitAfterChange": "d9bd21f3f7e589bfce3177a654f38a2e33ddf375", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST aAST)", "diff": ["+", "+    @Override", "+    public void visitToken(final DetailAST aAST)", "+    {", "+        if (!mAllowClassImports", "+            && aAST.getType() == TokenTypes.IMPORT)", "+        {", "+            final DetailAST startingDot =", "+                aAST.getFirstChild();", "+            logsStarredImportViolation(startingDot, mExcludes);", "+        }", "+        else if (!mAllowStaticMemberImports", "+            && aAST.getType() == TokenTypes.STATIC_IMPORT)", "+        {", "+            //must navigate past the static keyword", "+            final DetailAST startingDot =", "+                aAST.getFirstChild().getNextSibling();", "+            logsStarredImportViolation(startingDot, mExcludes);", "+        }", "+    }", "-    @Override", "-    public void visitToken(DetailAST aAST)", "-        final FullIdent name = FullIdent.createFullIdentBelow(aAST);", "-        if ((name != null) && name.getText().endsWith(\".*\")) {", "-            boolean exempt = false;", "-            for (int i = 0; (i < mExcludes.length) && !exempt; i++) {", "-                if (name.getText().equals(mExcludes[i])) {", "-                    exempt = true;", "-                }", "-            }", "-            if (!exempt) {", "-                log(aAST.getLineNo(), \"import.avoidStar\", name.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef2e5ec46c263d06f7b3d21a42db19e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "73ec35d35bcf970c588278cb18300dfdf814a704", "commitAfterChange": "987d2d67d56e054adbe5ec56136dddb49f533137", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "          @SuppressWarnings(\"unchecked\")         @Override         public Object convert(Class aType, Object aValue)             throws ConversionException", "signatureAfterChange": "         @SuppressWarnings(\"unchecked\")         public Object convert(Class aType, Object aValue)", "diff": ["-", "+        /** {@inheritDoc} */", "-        @Override", "-            throws ConversionException", "-            // Deal with a null value", "-            if (aValue == null) {", "-                if (useDefault) {", "-                    return (defaultValue);", "-                }", "-                throw new ConversionException(\"No value specified\");", "+            if (null == aType) {", "+                throw new ConversionException(\"Cannot convert from null.\");", "-            // Deal with the no-conversion-needed case", "-            if (MODEL.getClass() == aValue.getClass()) {", "-                return (aValue);", "-            }", "-", "-            // Parse the input value as a String into elements", "-            // and convert to the appropriate type", "-            try {", "-                final List list = parseElements(aValue.toString());", "-                final String[] results = new String[list.size()];", "-", "-                for (int i = 0; i < results.length; i++) {", "-                    results[i] = (String) list.get(i);", "-                }", "-                return (results);", "-            }", "-            catch (final Exception e) {", "-                if (useDefault) {", "-                    return (defaultValue);", "-                }", "-                throw new ConversionException(aValue.toString(), e);", "-            }", "-        }", "+            // Convert to a String and trim it for the tokenizer.", "+            final StringTokenizer st = new StringTokenizer(", "+                aValue.toString().trim(), \",\");", "+            final List<String> result = Lists.newArrayList();", "+                result.add(token.trim());", "+            return result.toArray(new String[result.size()]);"]}]}
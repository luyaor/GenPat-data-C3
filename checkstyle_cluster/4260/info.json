{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fdfe91bac3952741db36b5717dda5fa9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d48f0eec8d0530afe887c7a2d083c9c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "5b4a81a4e1449e2baf5adca4b821c23bc87f4de2", "commitAfterChange": "b69e47845e1903966ddf39efdf49e103ff5a5248", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "signatureAfterChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "diff": ["-                if (!beforeFirstImport && separated) {", "-                    // This check should be made more robust to handle", "-                    // comments and imports that span more than one line.", "-                    if (line - lastImportLine < 2) {", "-                        log(line, MSG_SEPARATION, name);", "-                    }", "+                // This check should be made more robust to handle", "+                // comments and imports that span more than one line.", "+                if (!beforeFirstImport && separated && line - lastImportLine < 2) {", "+                    log(line, MSG_SEPARATION, name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7d675ad99c67dfb0b2b91214f2a3bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "10f348bbfd91fd8c2bd7776aff3c03f549380a44", "commitAfterChange": "6c04cd63af392376159dc7aae41d85bbc348e96d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void processIdent(DetailAST ast)", "signatureAfterChange": "     private void processIdent(DetailAST ast)", "diff": ["-                if (checkMethods && isClassMethod(ast)) {", "-                    log(ast, MSG_METHOD, ast.getText());", "+                if (checkMethods) {", "+                    final AbstractFrame frame = checkMethod(ast);", "+                    if (frame != null) {", "+                        logViolation(MSG_METHOD, ast, frame);", "+                    }", "-                    processField(ast, parentType);", "+                    final AbstractFrame frame = processField(ast, parentType);", "+                    if (frame != null) {", "+                        logViolation(MSG_VARIABLE, ast, frame);", "+                    }", "+        }", "+    }"]}]}
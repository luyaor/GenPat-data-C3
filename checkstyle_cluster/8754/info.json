{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e4d2d38c900b5316e9ff6764054d54f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c9168fbd88b8bfe70c94221ed1291d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "e1613910f30cc63de1393ed897aa766932e1d973", "commitAfterChange": "e56f3d21ee1a0e8c0eced70ec7990fb03dcb3215", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean isOverrideMethod(DetailAST aAST)", "signatureAfterChange": "     private boolean hasAllowedAnnotations(DetailAST aMethodDef)", "diff": ["+     */", "+    private boolean hasAllowedAnnotations(DetailAST aMethodDef)", "+    {", "+        final DetailAST modifiersNode = aMethodDef.findFirstToken(TokenTypes.MODIFIERS);", "+        DetailAST annotationNode = modifiersNode.findFirstToken(TokenTypes.ANNOTATION);", "+        while (annotationNode != null && annotationNode.getType() == TokenTypes.ANNOTATION) {", "+            DetailAST identNode = annotationNode.findFirstToken(TokenTypes.IDENT);", "+            if (identNode == null) {", "+                identNode = annotationNode.findFirstToken(TokenTypes.DOT)", "+                    .findFirstToken(TokenTypes.IDENT);", "+            }", "+            if (mAllowedAnnotations.contains(identNode.getText())) {", "+                return true;", "+            }", "+            annotationNode = annotationNode.getNextSibling();", "+        }", "+        return false;", "+    }", "-     */", "-    private boolean isOverrideMethod(DetailAST aAST)", "-    {", "-        // Need it to be a method, cannot have an override on anything else.", "-        // Must also have MODIFIERS token to hold the @Override", "-        if ((TokenTypes.METHOD_DEF != aAST.getType())", "-            || (TokenTypes.MODIFIERS != aAST.getFirstChild().getType()))", "-        {", "-            return false;", "-        }", "-", "-        // Now loop over all nodes while they are annotations looking for", "-        // an \"@Override\".", "-        DetailAST node = aAST.getFirstChild().getFirstChild();", "-        while ((null != node) && (TokenTypes.ANNOTATION == node.getType())) {", "-            if ((node.getFirstChild().getType() == TokenTypes.AT)", "-                && (node.getFirstChild().getNextSibling().getType()", "-                    == TokenTypes.IDENT)", "-                && (\"Override\".equals(", "-                        node.getFirstChild().getNextSibling().getText())))", "-            {", "-                return true;", "-            }", "-            node = node.getNextSibling();", "-        }", "-        return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a757da64598958c48992cd1388c25a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java", "commitBeforeChange": "0fe31dfdf954242756eec703576cda4c8f561f1d", "commitAfterChange": "2057a77c3a524b86dff382ac8abdca71dd03764a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static DetailAST getPreviousStmt(DetailAST comment)", "signatureAfterChange": "     private static DetailAST getPrevCaseToken(DetailAST parentStatement)", "diff": ["-    private static DetailAST getPreviousStmt(DetailAST comment) {", "-        final DetailAST parentStatement = comment.getParent();", "-            DetailAST prevBlock;", "-                prevBlock = parentStatement.getPreviousSibling();", "-                if (prevBlock.getLastChild() != null) {", "-                    DetailAST blockBody = prevBlock.getLastChild().getLastChild();", "-                    if (blockBody.getPreviousSibling() != null) {", "-                        blockBody = blockBody.getPreviousSibling();", "-                    }", "-                    if (blockBody.getType() == TokenTypes.EXPR) {", "-                        prevStmt = blockBody.getFirstChild().getFirstChild();", "-                    }", "-                    else {", "-                        prevStmt = blockBody;", "-", "-                    }", "-                }", "-                final DetailAST parentBlock = parentStatement.getParent();", "-", "-                if (parentBlock != null && parentBlock.getParent() != null", "-                    && parentBlock.getParent().getPreviousSibling() != null", "-                    && parentBlock.getParent().getPreviousSibling()", "-                        .getType() == TokenTypes.LITERAL_CASE) {", "-", "-                    prevBlock = parentBlock.getParent().getPreviousSibling();", "-                    prevStmt = prevBlock;", "-                }", "+     */", "+    private static DetailAST getPrevCaseToken(DetailAST parentStatement) {", "+        final DetailAST prevCaseToken;", "+        final DetailAST parentBlock = parentStatement.getParent();", "+        if (parentBlock != null && parentBlock.getParent() != null", "+            && parentBlock.getParent().getPreviousSibling() != null", "+            && parentBlock.getParent().getPreviousSibling()", "+                .getType() == TokenTypes.LITERAL_CASE) {", "+", "+            prevCaseToken = parentBlock.getParent().getPreviousSibling();", "+        }", "+        else {", "+            prevCaseToken = null;", "+        }", "+        return prevCaseToken;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecde6ef54a2d20f5e8b58316b9f8fdfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "86e743f60589840dc86e73a90592b0b17c7c50c1", "commitAfterChange": "17ebdc5c3740d37f29b8dc09c4ce4a42d2982b1e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkAnnotationIndentation(DetailAST aModifiersNode,             NavigableMap<Integer, DetailAST> aFirstNodesOnLines)", "signatureAfterChange": "     private void checkAnnotationIndentation(DetailAST aAtNode,             NavigableMap<Integer, DetailAST> aFirstNodesOnLines)", "diff": ["-    private void checkAnnotationIndentation(DetailAST aModifiersNode,", "+    private void checkAnnotationIndentation(DetailAST aAtNode,", "-        final int currentIndent = aModifiersNode.getColumnNo() + mIndentLevel;", "-        final int firstNodeIndent = aModifiersNode.getColumnNo();", "+        final int currentIndent = aAtNode.getColumnNo() + mIndentLevel;", "+        final int firstNodeIndent = aAtNode.getColumnNo();", "+        final DetailAST lastAnnotationNode = getLastAnnotationNode(aAtNode);", "+        final int lastAnnotationLine = lastAnnotationNode.getLineNo();", "+        final int lastAnnotattionColumn = lastAnnotationNode.getColumnNo();", "-            final int parentType = node.getParent().getType();", "-            if (node.getType() == TokenTypes.AT) {", "-", "-                if (isAnnotationAloneOnLine(node.getParent())) {", "-                    logWarningMessage(node, firstNodeIndent);", "-                    itr.remove();", "-                }", "-            }", "-            else if (parentType != TokenTypes.MODIFIERS", "-                    && !hasTypeNodeAsParent(node)", "-                    && parentType != TokenTypes.ENUM_DEF", "-                    && parentType != TokenTypes.CTOR_DEF", "-                    && node.getType() != TokenTypes.LITERAL_CLASS)", "+            if (node.getLineNo() < lastAnnotationLine", "+                    || node.getLineNo() == lastAnnotationLine", "+                    && node.getColumnNo() <= lastAnnotattionColumn)", "-                logWarningMessage(node, currentIndent);", "+                final DetailAST parentNode = node.getParent();", "+                if (node.getType() == TokenTypes.AT", "+                        && parentNode.getParent().getType() == TokenTypes.MODIFIERS)", "+                {", "+                    logWarningMessage(node, firstNodeIndent);", "+                }", "+                else {", "+                    logWarningMessage(node, currentIndent);", "+                }", "-        }", "-    }", "+            else {", "+                break;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e9f75f63cb5e2809201da69ad56c8e5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ae71936a3e39cb4f81c26097ce0b7aa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "87ef77fe452f7821066ad4906e1c0cf643fa1334", "commitAfterChange": "09f1ba2f35f928d4377637fa284d1ac334617a22", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        //we do not want to check colon for cases and defaults", "-        if ((type == TokenTypes.COLON)", "-            && ((parentType == TokenTypes.LITERAL_DEFAULT)", "-                || (parentType == TokenTypes.LITERAL_CASE)))", "-        {", "-            return;", "+        if ((type == TokenTypes.COLON)) {", "+            //we do not want to check colon for cases and defaults", "+            if (parentType == TokenTypes.LITERAL_DEFAULT", "+                || parentType == TokenTypes.LITERAL_CASE)", "+            {", "+                return;", "+            }", "+            else if (parentType == TokenTypes.FOR_EACH_CLAUSE", "+                && this.mIgnoreEnhancedForColon)", "+            {", "+                return;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5defe79b7bc0eb60cd458cd00c3f1ad9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java", "commitBeforeChange": "bca492cc217f781c64091ec00cccf17d60be893c", "commitAfterChange": "d74f5bb61c9d8a45af94f5539b2001d25e1f3076", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public MissingSwitchDefaultCheck()", "signatureAfterChange": "     private static boolean containsDefaultSwitch(DetailAST caseGroupAst)", "diff": ["-    /** Creates new instance of the check. */", "-    public MissingSwitchDefaultCheck() {", "-        setLimitedTokens(TokenUtils.getTokenName(TokenTypes.LITERAL_DEFAULT));", "-        setMinimumNumber(1);", "-        setMaximumDepth(2);", "-        setMinimumMessage(MSG_KEY);", "-    }", "+     */", "+    private static boolean containsDefaultSwitch(DetailAST caseGroupAst) {", "+        DetailAST nextAst = caseGroupAst;", "+        boolean found = false;", "+", "+        while (nextAst != null) {", "+            if (nextAst.findFirstToken(TokenTypes.LITERAL_DEFAULT) != null) {", "+                found = true;", "+                break;", "+            }", "+", "+            nextAst = nextAst.getNextSibling();", "+        }", "+", "+        return found;", "+    }"]}]}
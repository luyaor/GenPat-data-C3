{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac3b4d0c3a2541aab578e091c4c1597a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eb175532cd5296b4ab5459180638946", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "81dab0c14131c72066f28cf8dbbddd1db3ea3a38", "commitAfterChange": "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     void verifyWSAroundBegin(int aLineNo, int aColNo, String aText)", "signatureAfterChange": "     void verifyWSAroundBegin(int aLineNo, int aColNo, String aText)", "diff": ["-        if (mConfig.isIgnoreWhitespace()) {", "-            return;", "-        }", "-", "-        final String line = mLines[aLineNo - 1];", "-        final int before = aColNo - 2;", "-        final int after = aColNo + aText.length() - 1;", "-", "-        if ((before >= 0) && !Character.isWhitespace(line.charAt(before))) {", "-            mMessages.add(aLineNo, before + 1, \"ws.notPreceeded\", aText);", "-        }", "-", "-        if ((after < line.length())", "-            && !Character.isWhitespace(line.charAt(after)))", "-        {", "-            mMessages.add(aLineNo, after, \"ws.notFollowed\", aText);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71329fa5e8c338c1464b0b77ef01bb1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "1050efd1ce522fd9ff11d0be769008e2e4a242b3", "commitAfterChange": "404fcfba9c9f1e00e241c0f220781d944a07ce78", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     void setLines(String[] aLines)", "signatureAfterChange": "     void setLines(String[] aLines)", "diff": ["-", "-        // Iterate over the lines looking for:", "-        //    - long lines", "-        for (int i = 0; i < mLines.length; i++) {", "-            // check for long line, but possibly allow imports", "-            final String line = mLines[i];", "-            final int realLength = Utils.lengthExpandedTabs(", "-                line, line.length(), mConfig.getTabWidth());", "-            if ((realLength > mConfig.getMaxLineLength())", "-                && !(mConfig.getIgnoreLineLengthRegexp().match(line))", "-                && !(mConfig.isIgnoreImportLength()", "-                     && line.trim().startsWith(\"import\")))", "-            {", "-                mMessages.add(i + 1, \"maxLineLen\",", "-                              new Integer(mConfig.getMaxLineLength()));", "-            }", "-        }"]}]}
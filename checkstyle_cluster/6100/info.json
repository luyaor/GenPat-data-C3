{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3f258d8b5c51c5f5dc36796202a1955", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7f02c8c80e3d3dd10f77fd5d0873e6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "6d20b67e0f1bfedc2132a887257d72edde4c857b", "commitAfterChange": "99f8726600ebd9f73b86eacf5e44d0335266d8fc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private static List<String> getAnnotationValues(DetailAST ast)", "signatureAfterChange": "     private static List<String> getAnnotationValues(DetailAST ast)", "diff": ["-                final List<String> valueList = Lists.newLinkedList();", "-                DetailAST childAST = ast.getFirstChild();", "-                while (childAST != null) {", "-                    if (childAST.getType() == TokenTypes.EXPR) {", "-                        valueList.add(getStringExpr(childAST));", "-                    }", "-                    childAST = childAST.getNextSibling();", "-                }", "-                return valueList;", "+                return findAllExpressionsInChildren(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd8b887f79d4b287f48b6fbe34181ef6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "bdda55ed1b207cab5e7f8ab3e6ebfb4d07a62a5a", "commitAfterChange": "b4cec8170a1d89159620b327a453ce13215d4eea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            DetailAST astNode = ast.getParent();", "-            while (astNode != constantDefAST) {", "-                final int type = astNode.getType();", "-                if (Arrays.binarySearch(ALLOWED_PATH_TOKENTYPES, type) < 0) {", "-                    reportMagicNumber(ast);", "-                    break;", "-                }", "+            final boolean found = isMagicNumberExists(ast, constantDefAST);", "+            if (found) {", "+                reportMagicNumber(ast);", "-                astNode = astNode.getParent();"]}]}
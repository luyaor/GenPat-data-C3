{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81492ecdbd2215732188f65ac39772fe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6aa835589d3ba304f6fb48b4b6a710e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java", "commitBeforeChange": "522a6b31b62d65bf5f8eb051107bbf3223fa32c5", "commitAfterChange": "023b564417ff157c7333acc2f04b6ddba289c463", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aDetailAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aDetailAST)", "diff": ["-        final DetailAST excType = paramDef.findFirstToken(TokenTypes.TYPE);", "-        final FullIdent ident = CheckUtils.createFullType(excType);", "+        final DetailAST excTypeParent =", "+                paramDef.findFirstToken(TokenTypes.TYPE);", "+        final List<DetailAST> excTypes = getAllExceptionTypes(excTypeParent);", "-        if (isIllegalClassName(ident.getText())) {", "-            log(aDetailAST, \"illegal.catch\", ident.getText());", "+        for (DetailAST excType : excTypes) {", "+            final FullIdent ident = FullIdent.createFullIdent(excType);", "+", "+            if (isIllegalClassName(ident.getText())) {", "+                log(aDetailAST, \"illegal.catch\", ident.getText());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd1743def78a4bbda0f9db785c0f8710", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "244eb9d0a9768cfba0b3b0561657ff3f56517c5d", "commitAfterChange": "5f68bb50fd191fec409f5edb90755a18fce3e0ac", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST rootAst)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAst)", "diff": ["-        final List<String> shortNames = getClassShortNames(immutableClassCanonicalNames);", "-        immutableClassShortNames.addAll(shortNames);", "+        final List<String> classShortNames =", "+                getClassShortNames(immutableClassCanonicalNames);", "+        immutableClassShortNames.addAll(classShortNames);", "+", "+        ignoreAnnotationShortNames.clear();", "+        final List<String> annotationShortNames =", "+                getClassShortNames(ignoreAnnotationCanonicalNames);", "+        ignoreAnnotationShortNames.addAll(annotationShortNames);"]}]}
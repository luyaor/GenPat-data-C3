{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a461265910975e3c9c70a5db7caae504", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0c84da7d3b002fa4c340cdc660f37d4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java", "commitBeforeChange": "2628fc197d9b12bb03324c46478ef840166cc075", "commitAfterChange": "6f6179fb52b2a104adc1c60bf92f8bdf3818255a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        // Only check first declaration", "-        if (mSeenFirstToken) {", "-            return;", "+        final String outerTypeName = aAST.findFirstToken(TokenTypes.IDENT).getText();", "+        if (!mSeenFirstToken) {", "+", "+            if (mFileName.equals(outerTypeName)) {", "+                mValidFirst = true;", "+            }", "+            else {", "+                mWrongType = aAST;", "+            }", "+        }", "+        else {", "+            final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            if (modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null", "+                    && aAST.getParent() == null)", "+            {", "+                mHasPublic = true;", "+            }", "+    }", "-        final String outerTypeName =", "-            aAST.findFirstToken(TokenTypes.IDENT).getText();", "-        // Calculate the file name without the leading path or", "-        // the trailing .java suffix. Will be lax and just remove whatever", "-        // is after the '.' character.", "-", "-        if (!(fname.equals(outerTypeName))) {", "-            log(aAST.getLineNo(), \"type.file.mismatch\");", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7d1b0d457f3120330437d89daa78697", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EqualsHashCodeCheck.java", "commitBeforeChange": "65d7c52cf5b46d184cdf240a6c890cf0c90ddee6", "commitAfterChange": "acc3f40015ffe1263cfa684ca4b29939249e9aed", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void visitToken(DetailAST aAST)", "signatureAfterChange": "      public void visitToken(DetailAST aAST)", "diff": ["-        AST modifiers = aAST.getFirstChild();", "-        final Set mods = new HashSet();", "-        AST modifier = modifiers.getFirstChild();", "-        while (modifier != null) {", "-            mods.add(modifier.getText());", "-            modifier = modifier.getNextSibling();", "-        }", "+        DetailAST modifiers = (DetailAST) aAST.getFirstChild();", "-                && mods.contains(\"public\")", "+                && modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)", "-//                && modifiers.subTreeContains(TokenTypes.LITERAL_PUBLIC)", "+                && modifiers.branchContains(TokenTypes.LITERAL_PUBLIC)"]}]}
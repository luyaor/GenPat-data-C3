{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b3487f9615585f5587769f075ad4443", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0902b1b0c836435a91a78c7bcba2b47f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "8787efc822fd27a4a3f3dd795c34525ccc08d297", "commitAfterChange": "2fe9f501d86b6e70aa64f4474ae0863bb0b928d5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void processIDENT(DetailAST aAST)", "signatureAfterChange": "     private void processIDENT(DetailAST aAST)", "diff": ["-            if (mCheckMethods) {", "+            if (mCheckMethods && isClassField(aAST.getText())) {", "-            // it is not a class or inteface it's", "+            // it is not a class or interface it's"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "100bd8a0dfe5fbabd914bff59ce8291d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "4d8f0c80663bb4015475669e6b85c6f3e1a1aec7", "commitAfterChange": "43c3cc74863fc9b5248b28ef4ffe9134736975f6", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     void verifyRParen(int aLineNo, int aColNo)", "signatureAfterChange": "     void verifyRParen(int aLineNo, int aColNo)", "diff": ["-            if (Character.isWhitespace(line.charAt(before))) {", "+            if (Character.isWhitespace(line.charAt(before))", "+                && !Utils.whitespaceBefore(before, line))", "+            {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29904551d5854a201a760cdf00399457", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "78e9ce870170ca3ef88fd78f8e0af0681c958eb3", "commitAfterChange": "ea4085cd15fefe1e70a495798187c425295c74b6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean isMatchingClassName(String aClassName)", "signatureAfterChange": "     private boolean isMatchingClassName(String aClassName)", "diff": ["-            || getRegexp().matcher(aClassName).find();", "+            || (!mLegalAbstractClassNames.contains(aClassName)", "+                && getRegexp().matcher(aClassName).find());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c36f95b9d27ffdb866cae3228fb54c7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java", "commitBeforeChange": "68dbad577945e3b731064808b6766d69c73ab381", "commitAfterChange": "fd33eb9c26eb958e03a91ac40a18245f8a41c584", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean isExempt(String classOrStaticMember)", "signatureAfterChange": "     private boolean isExempt(String classOrStaticMember)", "diff": ["-                if (classOrStaticMember.startsWith(excludeMinusDotStar)) {", "+                if (classOrStaticMember.startsWith(excludeMinusDotStar)", "+                        && !classOrStaticMember.equals(excludeMinusDotStar)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dc703b384f31358521e7153939cc51e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java", "commitBeforeChange": "d868a951ca1bdd8a6313fe10820bc9140ea030ff", "commitAfterChange": "fdc81723bdfd6af2ffc2c901cd8dd5b2fe948267", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     @Override\r     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "\r     @Override\r     public void visitToken(final DetailAST aAST)", "diff": ["-            AnnotationUtility.containsAnnotation(aAST, DEPRECATED);\r", "+            AnnotationUtility.containsAnnotation(aAST, DEPRECATED)\r", "+            || AnnotationUtility.containsAnnotation(aAST, FQ_DEPRECATED);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9261f580b185690514b0e9f4c0cbbdf8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java", "commitBeforeChange": "fe3a1a71008698b777215dd3c2836b2da8b1a3a5", "commitAfterChange": "166157213b0889e2a9d95f46826bbd5eb42ab9e8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected final boolean mustCheckName(DetailAST aAST)", "signatureAfterChange": "     protected final boolean mustCheckName(DetailAST aAST)", "diff": ["-            // Handle the serialVersionUID constant which is used for", "-            // Serialization. Cannot enforce rules on it. :-)", "+            // Handle the serialVersionUID and serialPersistentFields  constants", "+            // which are used for Serialization. Cannot enforce rules on it. :-)", "-                && !(\"serialVersionUID\".equals(nameAST.getText())))", "+                && !(\"serialVersionUID\".equals(nameAST.getText()))", "+                && !(\"serialPersistentFields\".equals(nameAST.getText())))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "935cffaf96a1b5cf1c4f071ee9d20d1e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "a00160b33c89916e57bf80a6256e4944407b4de4", "commitAfterChange": "611722a893e0c6362b693f5c629a902a83590cbf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void checkFirstSentence(DetailAST aAST, String[] aComment)", "signatureAfterChange": "     private void checkFirstSentence(DetailAST aAST, String[] aComment)", "diff": ["-            && !getEndOfSentenceRE().match(commentText))", "+            && !getEndOfSentenceRE().match(commentText)", "+            && !\"{@inheritDoc}\".equals(commentText))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942a6287be934926ff277becbc3bbafe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "bcbea917043b2657aa39c735ec70494c9b1185c1", "commitAfterChange": "c6d30db2009efde248f42fe2642ee5a8b252ec18", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private static List<File> getFilesToProcess(CommandLine aLine)", "signatureAfterChange": "     private static List<File> getFilesToProcess(CommandLine aLine)", "diff": ["-        if (files.isEmpty()) {", "+        if (files.isEmpty() && !aLine.hasOption(\"r\")) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf8a4da6b46f26303ee7d6266b06b26a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "commitBeforeChange": "c569113723151912d6f2f4c4bf54b032b5589b26", "commitAfterChange": "63899599306fcc479647169278fdc15d1677c45e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-            && !desc.isWithNonPrivateCtor()) {", "+            && !desc.isWithNonPrivateCtor()", "+            && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc6358ab852f42224add8a8e67b546c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "b4bbea4c05f785ff41cad65475886dd960172aa4", "commitAfterChange": "74e9b64d933a28eb3eb914245ed6f9c9961e7daf", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static boolean isSuppressed(String sourceName, int line,         int column)", "signatureAfterChange": "     public static boolean isSuppressed(String sourceName, int line,         int column)", "diff": ["-                entry.getCheckName().equals(checkAlias);", "+                ALL_WARNING_MATCHING_ID.equals(entry.getCheckName())", "+                    || entry.getCheckName().equals(checkAlias);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db079271c463f818f94b73ab4061c53b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "d868a951ca1bdd8a6313fe10820bc9140ea030ff", "commitAfterChange": "fdc81723bdfd6af2ffc2c901cd8dd5b2fe948267", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r     @Override\r     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "\r     @Override\r     public void visitToken(final DetailAST aAST)", "diff": ["-            && !AnnotationUtility.containsAnnotation(aAST, OVERRIDE))\r", "+            && (!AnnotationUtility.containsAnnotation(aAST, OVERRIDE)\r", "+            && !AnnotationUtility.containsAnnotation(aAST, FQ_OVERRIDE)))\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f22d9e68e11f474e53c262f086d52335", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "3f691ec451055c2752ae2d6b25f9a3c050a10783", "commitAfterChange": "425fd5a27cd567d5784bd246729c55cf8cda3dbd", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private AbstractFrame checkMethod(DetailAST ast)", "signatureAfterChange": "     private AbstractFrame checkMethod(DetailAST ast)", "diff": ["-                && ((ClassFrame) frame).hasInstanceMethod(ast)) {", "+            && ((ClassFrame) frame).hasInstanceMethod(ast)", "+            && !((ClassFrame) frame).hasStaticMethod(ast)) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72f50a3a9a2a36a226eacf8c8fb47342", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0160f37787fd11e360a5a316285589a4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "e4434ebe00405dca6bc2009666d6cfea7b15cfd5", "commitAfterChange": "0fdfc2f36086a108407fc7d51edc5b8c934b658a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public int[] getDefaultTokens()", "signatureAfterChange": "     public int[] getDefaultTokens()", "diff": ["-        // TODO: add all operators", "-        return new int[] {JavaTokenTypes.ASSIGN};", "+        return new int[] {", "+            QUESTION,          // '?'", "+            // COLON,             // ':' TODO: dont flag after \"case\"", "+            ASSIGN,            // '='", "+            EQUAL,             // \"==\"", "+            NOT_EQUAL,         // \"!=\"", "+            DIV,               // '/'", "+            DIV_ASSIGN,        // \"/=\"", "+            // PLUS,              //' +' TODO: unaray plus", "+            PLUS_ASSIGN,       // \"+=\"", "+            // MINUS,             // '-' TODO: unary minus", "+            MINUS_ASSIGN,      //\"-=\"", "+            STAR,              // '*'", "+            STAR_ASSIGN,       // \"*=\"", "+            MOD,               // '%'", "+            MOD_ASSIGN,        // \"%=\"", "+            SR,                // \">>\"", "+            SR_ASSIGN,         // \">>=\"", "+            BSR,               // \">>>\"", "+            BSR_ASSIGN,        // \">>>=\"", "+            GE,                // \">=\"", "+            GT,                // \">\"", "+            SL,                // \"<<\"", "+            SL_ASSIGN,         // \"<<=\"", "+            LE,                // \"<=\"", "+            LT,                // '<'", "+            BXOR,              // '^'", "+            BXOR_ASSIGN,       // \"^=\"", "+            BOR,               // '|'", "+            BOR_ASSIGN,        // \"|=\"", "+            LOR,               // \"||\"", "+            BAND,              // '&'", "+            BAND_ASSIGN,       // \"&=\"", "+            LAND,              // \"&&\"", "+            LITERAL_if,", "+            LITERAL_else,", "+            LITERAL_for,", "+            LITERAL_do,", "+            // LITERAL_return,    // TODO: \"return;\" is OK, return(2) is not", "+            LITERAL_try,", "+            LITERAL_catch,", "+            LITERAL_finally,", "+            LITERAL_synchronized,", "+            ASSERT                // TODO: why is it not LITERAL_assert?", "+                                  // maybe it's a bug in the grammar?", "+        };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89eb0a3862bde7d05012a1ff8b5ad86b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java", "commitBeforeChange": "41d538f9be41a0561ca7a28b159c034bcd3810e8", "commitAfterChange": "bb3f80410619472799c401651c43afb761f7906e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          @Test     public void javadocParagraphIncorrectTest() throws IOException, Exception", "signatureAfterChange": "          @Test     public void javadocParagraphIncorrectTest() throws IOException, Exception", "diff": ["+        String msgMisplaced = getCheckMessage(JavadocParagraphCheck.class, \"javadoc.paragraph.misplaced.tag\");", "-        \t\"5: \" + msgBefore,", "-        \t\"6: \" + msgBefore,", "-        \t\"12: \" + msgBefore,", "-        \t\"21: \" + msgBefore,", "-        \t\"30: \" + msgRed,", "-        \t\"31: \" + msgBefore,", "-        \t\"32: \" + msgBefore,", "-        \t\"33: \" + msgBefore,", "-        \t\"37: \" + msgBefore,", "-        \t\"43: \" + msgRed,", "-        \t\"48: \" + msgBefore,", "-        \t\"49: \" + msgBefore,", "-        \t\"59: \" + msgRed,", "-        \t\"68: \" + msgBefore,", "-        \t\"73: \" + msgBefore,", "+                \"5: \" + msgMisplaced,", "+                \"5: \" + msgBefore,", "+                \"6: \" + msgMisplaced,", "+                \"6: \" + msgBefore,", "+                \"12: \" + msgMisplaced,", "+                \"12: \" + msgBefore,", "+                \"14: \" + msgMisplaced,", "+                \"21: \" + msgBefore,", "+                \"30: \" + msgRed,", "+                \"31: \" + msgMisplaced,", "+                \"31: \" + msgBefore,", "+                \"32: \" + msgMisplaced,", "+                \"32: \" + msgBefore,", "+                \"33: \" + msgMisplaced,", "+                \"33: \" + msgBefore,", "+                \"37: \" + msgMisplaced,", "+                \"37: \" + msgBefore,", "+                \"43: \" + msgMisplaced,", "+                \"43: \" + msgRed,", "+                \"46: \" + msgMisplaced,", "+                \"48: \" + msgMisplaced,", "+                \"48: \" + msgBefore,", "+                \"49: \" + msgMisplaced,", "+                \"49: \" + msgBefore,", "+                \"59: \" + msgRed,", "+                \"68: \" + msgMisplaced,", "+                \"68: \" + msgBefore,", "+                \"70: \" + msgMisplaced,", "+                \"73: \" + msgMisplaced,", "+                \"73: \" + msgBefore,"]}]}
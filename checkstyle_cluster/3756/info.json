{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2eaf4f90d60446e69f48d4218c10689", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "290d19eb2a2f1163edfd689e341a01ad", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "e16c4a8259ed7bf412bfa74ac4cb6b39c467c422", "commitAfterChange": "741454e7f18b1714499eda0c44dbdf75518683b0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "         private long calcChecksum(String aLine)", "signatureAfterChange": "         protected long calcChecksum(String aLine)", "diff": ["-        private long calcChecksum(String aLine)", "-        {", "-            if (aLine.startsWith(\"import \")) {", "-                return IGNORE;", "-            }", "-            else {", "-                return reallyCalcChecksum(aLine);", "-            }", "-        }", "+         */", "+        protected long calcChecksum(String aLine)", "+        {", "+            if (aLine.startsWith(\"import \")) {", "+                return IGNORE;", "+            }", "+            else {", "+                return super.calcChecksum(aLine);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dd8c9477a5b2c7ef3b0f53b46b393b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "f010eb47869bae692609de487d6140373e02f3a3", "commitAfterChange": "907a19906f790ce8faea7aa74e12608538dca1b6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 5, "signatureBeforeChange": "         LexicalFrame findFrame(String aNameToFind)", "signatureAfterChange": "     private LexicalFrame findFrame(String aName)", "diff": ["+     */", "+    private LexicalFrame findFrame(String aName)", "+    {", "+        if (mCurrent != null) {", "+            return mCurrent.getIfContains(aName);", "+        }", "+        else {", "+            return null;", "+        }", "-         */", "-        LexicalFrame findFrame(String aNameToFind)", "-        {", "-            for (LexicalFrame thisFrame : mFrameList) {", "-                if (thisFrame.contains(aNameToFind)) {", "-                    return thisFrame;", "-                }", "-            }", "-            return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13dc24b0c3a048a029c914aa75b008f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheck.java", "commitBeforeChange": "889f470ea6ca16b3067e35e2463282d9678f7bf0", "commitAfterChange": "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean findNonCommentMatch(             String aLine, int aLineNumber, int aStartPosition)", "signatureAfterChange": "     private boolean findNonCommentMatch(             String aLine, int aLineNumber, int aStartPosition)", "diff": ["-                else {", "-                    // end of line reached", "-                    return false;", "-                }", "+                // end of line reached", "+                return false;", "-            else {", "-                // not intersecting with comment", "-                return true;", "-            }", "+            // not intersecting with comment", "+            return true;", "-        else {", "-            // no match is found", "-            return false;", "-        }", "+        // no match is found", "+        return false;"]}]}
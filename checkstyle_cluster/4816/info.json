{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d85071b519432457dd14ef6f51a0511", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80da9d9735a685563b4870c4248e8fab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "         public void checkCount(DetailAST aAST)", "signatureAfterChange": "         public void checkCount(DetailAST ast)", "diff": ["-        public void checkCount(DetailAST aAST)", "+        public void checkCount(DetailAST ast)", "-            if (mChecking && (mCount > getMax())) {", "-                final DetailAST parentAST = aAST.getParent();", "+            if (checking && (count > getMax())) {", "+                final DetailAST parentAST = ast.getParent();", "-                    \"booleanExpressionComplexity\", mCount, getMax());", "+                    \"booleanExpressionComplexity\", count, getMax());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b60008ee913ea8a89d6f6eb889445375", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "         public void checkCount(DetailAST aAST)", "signatureAfterChange": "         public void checkCount(DetailAST ast)", "diff": ["-        public void checkCount(DetailAST aAST)", "+        public void checkCount(DetailAST ast)", "-            if (mChecking && (mCount > getMax())) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"return.count\",", "-                    mCount, getMax());", "+            if (checking && (count > getMax())) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"return.count\",", "+                    count, getMax());"]}]}
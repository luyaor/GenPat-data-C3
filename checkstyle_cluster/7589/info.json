{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39e603e9a8b0dd0e1c88aaf034cef08d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08942436f9820b5f5c2933f889c763ce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "commitBeforeChange": "476f90c5d38c6cc2b3ed6776ad4a3120ea627338", "commitAfterChange": "5c3762cef2a69a10241801916a815f9066bca5f8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            final boolean isFinal =", "-                (modifiers != null)", "+            final boolean isFinal = (modifiers != null)", "-            mClasses.push(new ClassDesc(isFinal));", "+            final boolean isAbstract = (modifiers != null)", "+                    && modifiers.branchContains(TokenTypes.ABSTRACT);", "+            mClasses.push(new ClassDesc(isFinal, isAbstract));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13389433c709bf56f747500c479aa25", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "ee33ed57cd2c88888e9821a2047f587f07283d98", "commitAfterChange": "d10b2c45ffc6c390bade5218b4d315a128485bcf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkAnnotationIndentation(DetailAST atNode,             NavigableMap<Integer, DetailAST> firstNodesOnLines)", "signatureAfterChange": "     private void checkAnnotationIndentation(DetailAST atNode,             NavigableMap<Integer, DetailAST> firstNodesOnLines)", "diff": ["-            if (node.getLineNo() < lastAnnotationLine", "-                    || node.getLineNo() == lastAnnotationLine) {", "+            if (node.getLineNo() <= lastAnnotationLine) {", "-                if (node.getType() == TokenTypes.AT", "+                final boolean isCurrentNodeCloseAnnotationAloneInLine =", "+                        node.getLineNo() == lastAnnotationLine", "+                        && node.equals(lastAnnotationNode);", "+                if (isCurrentNodeCloseAnnotationAloneInLine", "+                        || node.getType() == TokenTypes.AT"]}]}
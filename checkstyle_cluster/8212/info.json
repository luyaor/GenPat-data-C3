{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60b5ac6ebea27d128ee81ac2b63c8fb6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07ce7ece3de4e26d58e5a44baab39d09", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/internal/CheckUtil.java", "commitBeforeChange": "948e489ba62f19d0d9c51d800c25e0470b4b4e1c", "commitAfterChange": "4cdfe5c510b5a9975320aee2f58ebc9357ad6d68", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static Set<String> getCheckStyleChecksReferencedInConfig(             String configFilePath) throws Exception", "signatureAfterChange": "     private static Set<String> getCheckStyleChecksReferencedInConfig(String configFilePath)", "diff": ["-    private static Set<String> getCheckStyleChecksReferencedInConfig(", "-            String configFilePath) throws Exception {", "-        final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "+    private static Set<String> getCheckStyleChecksReferencedInConfig(String configFilePath) {", "+        try {", "+            final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();", "-        // Validations of XML file make parsing too slow, that is why we disable all", "-        // validations.", "-        factory.setNamespaceAware(false);", "-        factory.setValidating(false);", "-        factory.setFeature(\"http://xml.org/sax/features/namespaces\", false);", "-        factory.setFeature(\"http://xml.org/sax/features/validation\", false);", "-        factory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",", "-                false);", "-        factory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\",", "-                false);", "+            // Validations of XML file make parsing too slow, that is why we", "+            // disable all validations.", "+            factory.setNamespaceAware(false);", "+            factory.setValidating(false);", "+            factory.setFeature(\"http://xml.org/sax/features/namespaces\", false);", "+            factory.setFeature(\"http://xml.org/sax/features/validation\", false);", "+            factory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",", "+                    false);", "+            factory.setFeature(\"http://apache.org/xml/features/nonvalidating/load-external-dtd\",", "+                    false);", "-        final DocumentBuilder builder = factory.newDocumentBuilder();", "-        final Document document = builder.parse(new File(configFilePath));", "+            final DocumentBuilder builder = factory.newDocumentBuilder();", "+            final Document document = builder.parse(new File(configFilePath));", "-        // optional, but recommended", "-        // FYI:", "-        // http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-", "-        // does-it-work", "-        document.getDocumentElement().normalize();", "+            // optional, but recommended", "+            // FYI:", "+            // http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-", "+            // how-does-it-work", "+            document.getDocumentElement().normalize();", "-        final NodeList nodeList = document.getElementsByTagName(\"module\");", "+            final NodeList nodeList = document.getElementsByTagName(\"module\");", "-        final Set<String> checksReferencedInCheckstyleChecksXml = new HashSet<>();", "-        for (int i = 0; i < nodeList.getLength(); i++) {", "-            final Node currentNode = nodeList.item(i);", "-            if (currentNode.getNodeType() == Node.ELEMENT_NODE) {", "-                final Element module = (Element) currentNode;", "-                final String checkName = module.getAttribute(\"name\");", "-                if (!\"Checker\".equals(checkName) && !\"TreeWalker\".equals(checkName)) {", "-                    checksReferencedInCheckstyleChecksXml.add(checkName);", "+            final Set<String> checksReferencedInCheckstyleChecksXml = new HashSet<>();", "+            for (int i = 0; i < nodeList.getLength(); i++) {", "+                final Node currentNode = nodeList.item(i);", "+                if (currentNode.getNodeType() == Node.ELEMENT_NODE) {", "+                    final Element module = (Element) currentNode;", "+                    final String checkName = module.getAttribute(\"name\");", "+                    if (!\"Checker\".equals(checkName) && !\"TreeWalker\".equals(checkName)) {", "+                        checksReferencedInCheckstyleChecksXml.add(checkName);", "+                    }", "+            return checksReferencedInCheckstyleChecksXml;", "-        return checksReferencedInCheckstyleChecksXml;", "+        catch (Exception exception) {", "+            throw new IllegalStateException(exception);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6eadfe46dd30d6cd01810576e5a8a4f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "bbe51f6884ac0a961f55310e15ec90411709d970", "commitAfterChange": "b3133035a4fa0e086dfb0dfbefbc7f1540521bbc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void setProperties(File aProps)", "signatureAfterChange": "     public void setProperties(File aProps)", "diff": ["+        catch (FileNotFoundException e) {", "+            throw new BuildException(", "+                \"Could not find Properties file '\" + aProps + \"'\", e, location);", "+        }", "-                \"Could not find Properties file '\" + aProps + \"'\", location);", "+                \"Error loading Properties file '\" + aProps + \"'\", e, location);"]}]}
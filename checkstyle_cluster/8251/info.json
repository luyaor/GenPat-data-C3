{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96c74475bfb227295c0d582327b8986f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5808b9fddf6007607e02908b6bdddea3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "fbbbc950e751fa629d57a5cbe08762999cfc8218", "commitAfterChange": "e030d1463c307836bbb201a202d15e81a41bcb0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+            processInterfaceOrAnnotation(ast);", "+        }", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            processMethods(ast);", "+        }", "+    }", "-", "-                // javac does not allow final or static in interface methods", "-                // order annotation fields hence no need to check that this", "-                // is not a method or annotation field", "-", "-                if (type == TokenTypes.LITERAL_PUBLIC", "-                    || type == TokenTypes.LITERAL_STATIC", "-                            && ast.getType() != TokenTypes.METHOD_DEF", "-                    || type == TokenTypes.ABSTRACT", "-                    || type == TokenTypes.FINAL) {", "-", "-            }", "-        }", "-        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "-            final DetailAST modifiers =", "-                            ast.findFirstToken(TokenTypes.MODIFIERS);", "-            // private method?", "-            boolean checkFinal =", "-                modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);", "-            // declared in a final class?", "-            DetailAST parent = ast.getParent();", "-            while (parent != null) {", "-                if (parent.getType() == TokenTypes.CLASS_DEF) {", "-                    final DetailAST classModifiers =", "-                        parent.findFirstToken(TokenTypes.MODIFIERS);", "-                    checkFinal |=", "-                        classModifiers.branchContains(TokenTypes.FINAL);", "-                    break;", "-                }", "-                parent = parent.getParent();", "-            }", "-            if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {", "-                DetailAST modifier = modifiers.getFirstChild();", "-                while (modifier != null) {", "-                    final int type = modifier.getType();", "-                    if (type == TokenTypes.FINAL) {", "-                        log(modifier.getLineNo(), modifier.getColumnNo(),", "-                                MSG_KEY, modifier.getText());", "-                        break;", "-                    }", "-                    modifier = modifier.getNextSibling();", "-                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c52c0c6c19f52d05e43278a598baee88", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java", "commitBeforeChange": "3a7ab7d24d0b865fd95a8c72ce7e765a801ea555", "commitAfterChange": "7874cc4909f6e5104f42060528b9069669993533", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-", "-        final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);", "-        DetailAST child = objBlock.getFirstChild();", "-        boolean hasMethodOrField = false;", "-        boolean hasNonStaticMethodOrField = false;", "-        boolean hasNonPrivateStaticMethodOrField = false;", "-        boolean hasDefaultCtor = true;", "-        boolean hasPublicCtor = false;", "-        while (child != null) {", "-            final int type = child.getType();", "-            if (type == TokenTypes.METHOD_DEF", "-                    || type == TokenTypes.VARIABLE_DEF) {", "-                hasMethodOrField = true;", "-                final DetailAST modifiers =", "-                    child.findFirstToken(TokenTypes.MODIFIERS);", "-                final boolean isStatic =", "-                    modifiers.branchContains(TokenTypes.LITERAL_STATIC);", "-                final boolean isPrivate =", "-                    modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);", "+        final Details details = new Details(ast);", "+        details.invoke();", "-                if (!isStatic && !isPrivate) {", "-                    hasNonStaticMethodOrField = true;", "-                }", "-                if (isStatic && !isPrivate) {", "-                    hasNonPrivateStaticMethodOrField = true;", "-                }", "-            }", "-            if (type == TokenTypes.CTOR_DEF) {", "-                hasDefaultCtor = false;", "-                final DetailAST modifiers =", "-                    child.findFirstToken(TokenTypes.MODIFIERS);", "-                if (!modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)", "-                    && !modifiers.branchContains(TokenTypes.LITERAL_PROTECTED)) {", "-                    // treat package visible as public", "-                    // for the purpose of this Check", "-                    hasPublicCtor = true;", "-                }", "-", "-            }", "-            child = child.getNextSibling();", "-        }", "+        final boolean hasDefaultCtor = details.isHasDefaultCtor();", "+        final boolean hasPublicCtor = details.isHasPublicCtor();", "+        final boolean hasMethodOrField = details.isHasMethodOrField();", "+        final boolean hasNonStaticMethodOrField = details.isHasNonStaticMethodOrField();", "+        final boolean hasNonPrivateStaticMethodOrField =", "+                details.isHasNonPrivateStaticMethodOrField();"]}]}
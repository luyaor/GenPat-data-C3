{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f206611bf573e68e88c16fb314f5af94", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a12b764a0fee3b80413077ebe31e3bd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": "        @Override       <K, V> ReferenceEntry<K, V> copyEntry(           Segment<K, V> segment, ReferenceEntry<K, V> original, ReferenceEntry<K, V> newNext)", "signatureAfterChange": "        <K, V> ReferenceEntry<K, V> copyEntry(           Segment<K, V> segment, ReferenceEntry<K, V> original, ReferenceEntry<K, V> newNext)", "diff": ["-      @Override", "-        ReferenceEntry<K, V> newEntry = super.copyEntry(segment, original, newNext);", "-        copyAccessEntry(original, newEntry);", "-        copyWriteEntry(original, newEntry);", "-        return newEntry;", "+        return newNext;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b56584c397faec077f73f20d81cb4f54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "        @Override       <K, V> ReferenceEntry<K, V> copyEntry(           Segment<K, V> segment, ReferenceEntry<K, V> original, ReferenceEntry<K, V> newNext)", "signatureAfterChange": "        <K, V> ReferenceEntry<K, V> copyEntry(           Segment<K, V> segment, ReferenceEntry<K, V> original, ReferenceEntry<K, V> newNext)", "diff": ["-      @Override", "-        ReferenceEntry<K, V> newEntry = super.copyEntry(segment, original, newNext);", "-        copyAccessEntry(original, newEntry);", "-        copyWriteEntry(original, newEntry);", "-        return newEntry;", "+        return newNext;"]}]}
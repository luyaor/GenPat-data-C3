{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62c9d83c50730e5cad1aba0dac8fdf2d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "396adfadbe3c89ac95e4a40d6843a7c7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void notifyLeave(DetailAST aAST)", "signatureAfterChange": "     private void notifyLeave(DetailAST aAST)", "diff": ["-        final ArrayList visitors =", "-            (ArrayList) mTokenToChecks.get(", "-                TokenTypes.getTokenName(aAST.getType()));", "+        final List<Check> visitors = mTokenToChecks.get(TokenTypes", "+                .getTokenName(aAST.getType()));", "-            for (int i = 0; i < visitors.size(); i++) {", "-                final Check check = (Check) visitors.get(i);", "-                check.leaveToken(aAST);", "+            for (Check ch : visitors) {", "+                ch.leaveToken(aAST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed64cdb3b9ebf5552a2d36d1a6090dd1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void notifyVisit(DetailAST aAST)", "signatureAfterChange": "     private void notifyVisit(DetailAST aAST)", "diff": ["-        final ArrayList visitors =", "-            (ArrayList) mTokenToChecks.get(", "-                TokenTypes.getTokenName(aAST.getType()));", "+        final List<Check> visitors = mTokenToChecks.get(TokenTypes", "+                .getTokenName(aAST.getType()));", "-            for (int i = 0; i < visitors.size(); i++) {", "-                final Check check = (Check) visitors.get(i);", "-                check.visitToken(aAST);", "+            for (Check c : visitors) {", "+                c.visitToken(aAST);"]}]}
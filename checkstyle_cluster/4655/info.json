{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a55f8da9939fd097c1160ce7f03c1c95", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0349b6b05c06957c6b19ce0557fb3b91", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "b3133035a4fa0e086dfb0dfbefbc7f1540521bbc", "commitAfterChange": "add2bdfb27494bff5fa9c305d9782f57c6170b18", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "         public void setType(FormatterType aType)", "signatureAfterChange": "         public void setType(FormatterType aType)", "diff": ["-            if (E_XML.equals(val)) {", "-                setClassname(XMLLogger.class.getName());", "-            }", "-            else if (E_PLAIN.equals(val)) {", "-                setClassname(DefaultLogger.class.getName());", "-            }", "-            else {", "+            if (!E_XML.equals(val) && !E_PLAIN.equals(val)) {", "-        }", "+            mFormatterType = aType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6ea7291a09430b22ee2ff7e98f1e8cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java", "commitBeforeChange": "f7e41edb947dad22e10eeaa2e68e6f44b4bfa747", "commitAfterChange": "0b4ae9160bb82574a8d21d9a03dbfc8aaa45fdae", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers)", "signatureAfterChange": "     static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers)", "diff": ["-        DetailAST modifier;", "-        do {", "-            modifier = it.next();", "-        }", "-        while (it.hasNext() && modifier.getType() == TokenTypes.ANNOTATION);", "+        DetailAST modifier = skipAnnotations(it);", "-            while (modifier != null) {", "+            while (modifier != null", "+                    && offendingModifier == null) {", "+", "-                    break;"]}]}
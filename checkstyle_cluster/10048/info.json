{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b3bc1624627c8d1ff6fbfc1bf1c471d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae27dca9b289f2d751627428a7e59153", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheckTest.java", "commitBeforeChange": "df5e519a3d2d6a468558161e1e61ff4634e7b533", "commitAfterChange": "09a7ca60414ea04b64f45bb190eaa26c767086be", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testDefault()         throws Exception", "signatureAfterChange": "      @Test     public void testDefault()         throws Exception", "diff": ["-                buildMesssage(3, 7, \"inputHeaderClass\",", "-                        TypeNameCheck.DEFAULT_PATTERN),", "-                buildMesssage(5, 22, \"inputHeaderInterface\",", "-                        TypeNameCheck.DEFAULT_PATTERN),", "-                buildMesssage(7, 17, \"inputHeaderEnum\",", "-                        TypeNameCheck.DEFAULT_PATTERN),", "-                buildMesssage(9, 23, \"inputHeaderAnnotation\",", "-                    TypeNameCheck.DEFAULT_PATTERN),", "+            \"3:7: \" + getCheckMessage(MSG_INVALID_PATTERN,", "+                    \"inputHeaderClass\", DEFAULT_PATTERN),", "+            \"5:22: \" + getCheckMessage(MSG_INVALID_PATTERN,", "+                    \"inputHeaderInterface\", DEFAULT_PATTERN),", "+            \"7:17: \" + getCheckMessage(MSG_INVALID_PATTERN,", "+                    \"inputHeaderEnum\", DEFAULT_PATTERN),", "+            \"9:23: \" + getCheckMessage(MSG_INVALID_PATTERN,", "+                    \"inputHeaderAnnotation\", DEFAULT_PATTERN),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0b624c8bcb54b1b43fe2b2f0c0a1c32", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testMissingBraces() throws Exception", "signatureAfterChange": "      @Test     public void testMissingBraces() throws Exception", "diff": ["-            \"12:1: '{' should be on the previous line.\",", "-            \"15:5: '{' should be on the previous line.\",", "-            \"21:5: '{' should be on the previous line.\",", "-            \"34:5: '{' should be on the previous line.\",", "-            \"51:5: '{' should be on the previous line.\",", "-            \"69:5: '{' should be on the previous line.\",", "-            \"105:5: '{' should be on the previous line.\",", "+            \"12:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"15:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"21:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"34:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"51:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"69:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"105:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),"]}]}
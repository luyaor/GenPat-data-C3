{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73e0c2dcc69d532d03ef55cdb830c3d3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d6f1880bbdc0cf32fac65bab698f31", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "commitBeforeChange": "c4d4b6139c74a873184d21a9d61c84a61273c692", "commitAfterChange": "f3fe388937df6497e4afe551c952cacb548337c8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+", "+        // GT/LT aren't operators if they're part of type arguments or parameters", "+        if ((aAST.getType() == TokenTypes.GT || aAST.getType() == TokenTypes.LT) &&", "+            (aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS", "+            || aAST.getParent().getType() == TokenTypes.TYPE_PARAMETERS))", "+        {", "+            return;", "+        }", "+", "+        //QUESTION is not an operator if it's part of a type argument", "+        if (aAST.getType() == TokenTypes.QUESTION &&", "+            aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENT)", "+        {", "+            return;", "+        }", "+", "+        //BAND is not an operator if it's part of a type argument", "+        if (aAST.getType() == TokenTypes.BAND &&", "+            (aAST.getParent().getType() == TokenTypes.TYPE_UPPER_BOUNDS", "+            || aAST.getParent().getType() == TokenTypes.TYPE_LOWER_BOUNDS))", "+        {", "+            return;", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80b53d4b5b96facf01a90be5b57ba184", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "169729f60b9aba5736b15f3514ae41ed994512f2", "commitAfterChange": "095fa6743c995a0c89056456a3724a9480c69e50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        else {", "+            if (targetAST.getType() == TokenTypes.ARRAY_DECLARATOR) {", "+                final DetailAST arrayType = targetAST.getFirstChild();", "+                if (!isCstyleArrayDeclaration(targetAST)) {", "+                    targetAST = arrayType;", "+                }", "+                else {", "+                    targetAST = targetAST.getParent().getNextSibling();", "+                }", "+            }", "+        }", "-        final int after =", "-            targetAST.getColumnNo() + targetAST.getText().length();", "+        int after = 0;", "+        //If target of possible redundant whitespace is in method definition", "+        if (targetAST.getType() == TokenTypes.IDENT", "+                && targetAST.getNextSibling().getType() == TokenTypes.LPAREN)", "+        {", "+            final DetailAST methodDef = targetAST.getParent();", "+            final DetailAST endOfParams = methodDef.findFirstToken(TokenTypes.RPAREN);", "+            after = endOfParams.getColumnNo() + 1;", "+        }", "+        else {", "+            after = targetAST.getColumnNo() + targetAST.getText().length();", "+        }"]}]}
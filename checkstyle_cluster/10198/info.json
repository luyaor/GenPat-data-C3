{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f9ef20223c845923e479d3f69558377", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d5d7834b8d468a5a3d734f06ae4f25", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        DetailAST assign = aAST.findFirstToken(TokenTypes.ASSIGN);", "+", "+        final DetailAST assign = aAST.findFirstToken(TokenTypes.ASSIGN);", "-        DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        DetailAST type = aAST.findFirstToken(TokenTypes.TYPE);", "-        DetailAST ident = aAST.findFirstToken(TokenTypes.IDENT);", "-        DetailAST exprStart =", "+        final DetailAST type = aAST.findFirstToken(TokenTypes.TYPE);", "+        final DetailAST ident = aAST.findFirstToken(TokenTypes.IDENT);", "+        final DetailAST exprStart =", "-        int primitiveType = type.getFirstChild().getType();", "+", "+        final int primitiveType = type.getFirstChild().getType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6c46bf402935ef330e5bc495e9a3f9f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public boolean hasIntersectionWithComment(             int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public boolean hasIntersectionWithComment(             int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)", "diff": ["-        Collection values = mCComments.values();", "+        final Collection values = mCComments.values();", "-        Iterator it = values.iterator();", "+        final Iterator it = values.iterator();", "-            List row = (List) it.next();", "-            Iterator rowIterator = row.iterator();", "+            final List row = (List) it.next();", "+            final Iterator rowIterator = row.iterator();", "-                TextBlock comment = (TextBlock) rowIterator.next();", "+                final TextBlock comment = (TextBlock) rowIterator.next();", "-            TextBlock comment =", "+            final TextBlock comment ="]}]}
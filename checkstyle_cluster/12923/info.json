{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ed1ab9dba09142744b0947f026a636d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4490749131775f24e1e527310516bb93", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java", "commitBeforeChange": "d2af4accdde3eac0a2103353f490e97bf62f61d2", "commitAfterChange": "d4b933799af120cf4a8490db98f396b6348430e9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setOption(String aOption)         throws ConversionException", "signatureAfterChange": "     public void setOption(String aOption) throws ConversionException", "diff": ["-    public void setOption(String aOption)", "-        throws ConversionException", "+    public void setOption(String aOption) throws ConversionException", "-        mOption = mOption.decode(aOption);", "-        if (mOption == null) {", "-            throw new ConversionException(\"unable to parse \" + aOption);", "+        try {", "+            mOption = Enum.valueOf(mOptionClass, aOption.trim().toUpperCase());", "+        }", "+        catch (IllegalArgumentException iae) {", "+            throw new ConversionException(\"unable to parse \" + aOption, iae);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54050740cb6ab2af354306391a15fbfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "d2af4accdde3eac0a2103353f490e97bf62f61d2", "commitAfterChange": "d4b933799af120cf4a8490db98f396b6348430e9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setLineSeparator(String aLineSeparator)", "signatureAfterChange": "     public void setLineSeparator(String aLineSeparator)", "diff": ["-        final AbstractOption option =", "-            LineSeparatorOption.SYSTEM.decode(aLineSeparator);", "-", "-        if (option == null) {", "-            throw new ConversionException(\"unable to parse \" + aLineSeparator);", "+        try {", "+            mLineSeparator =", "+                Enum.valueOf(LineSeparatorOption.class, aLineSeparator.trim()", "+                    .toUpperCase());", "-", "-        mLineSeparator = (LineSeparatorOption) option;", "+        catch (IllegalArgumentException iae) {", "+            throw new ConversionException(\"unable to parse \" + aLineSeparator,", "+                iae);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc09bc2d1138b7a345f2256f0c049b5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java", "commitBeforeChange": "fdd5ed77fd1ea61768683ee8cfacf78190a2d3aa", "commitAfterChange": "bf9325be913ce46a1427232c455f4830b574ba44", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testLogIOException() throws Exception", "signatureAfterChange": "      @Test     public void testLogIoException() throws Exception", "diff": ["-    public void testLogIOException() throws Exception {", "+    public void testLogIoException() throws Exception {", "-        final Method logIOException = check.getClass().getDeclaredMethod(\"logIOException\",", "+        final Method logIoException = check.getClass().getDeclaredMethod(\"logIoException\",", "-        logIOException.setAccessible(true);", "-        logIOException.invoke(check, new IOException(\"test exception\"), new File(\"\"));", "+        logIoException.setAccessible(true);", "+        logIoException.invoke(check, new IOException(\"test exception\"), new File(\"\"));"]}]}
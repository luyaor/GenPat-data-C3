{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "badd7b0d18a27b48c357f257ad57f912", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d4c7e543e6ff3233a722e23d88cae9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private static boolean inStatic(DetailAST ast)", "signatureAfterChange": "     private static boolean inStatic(DetailAST ast)", "diff": ["+        boolean inStatic = false;", "+", "-            switch (parent.getType()) {", "-                case TokenTypes.STATIC_INIT:", "-                    return true;", "-                case TokenTypes.METHOD_DEF:", "-                    final DetailAST mods =", "-                        parent.findFirstToken(TokenTypes.MODIFIERS);", "-                    return mods.branchContains(TokenTypes.LITERAL_STATIC);", "-                default:", "-                    parent = parent.getParent();", "+            if (parent.getType() == TokenTypes.STATIC_INIT) {", "+                inStatic = true;", "+                break;", "+            }", "+            else if (parent.getType() == TokenTypes.METHOD_DEF) {", "+                final DetailAST mods =", "+                    parent.findFirstToken(TokenTypes.MODIFIERS);", "+                inStatic = mods.branchContains(TokenTypes.LITERAL_STATIC);", "+                break;", "+            }", "+            else {", "+                parent = parent.getParent();", "-        return false;", "+        return inStatic;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf4ae5a577e66a7b30f733212f1eb5d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OtherLeftCurlyCheck.java", "commitBeforeChange": "b657e696ffd7333d43327160303f149174ccb49e", "commitAfterChange": "4a5ccfb6fe4d4d2cf9d74419b3292bbb46ad4149", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                brace = aAST.getLastChild();", "-                break;", "-                brace = (DetailAST) aAST.getFirstChild();", "+            case TokenTypes.LITERAL_IF:", "+                brace = aAST.findFirstToken(TokenTypes.SLIST);", "+                ", "-                if (candidate.getType() == TokenTypes.SLIST) {", "-                    brace = candidate;", "-                }", "-                else {", "-                    // silently ignore", "-                    brace = null;", "-                }", "+                brace =", "+                    (candidate.getType() == TokenTypes.SLIST)", "+                        ? candidate", "+                        : null; // silently ignore", "-            case TokenTypes.LITERAL_SWITCH:", "-            case TokenTypes.LITERAL_IF:", "-                brace = (DetailAST) aAST.getFirstChild().getNextSibling()", "-                    .getNextSibling().getNextSibling();", "+                ", "+            case TokenTypes.LITERAL_SWITCH :", "+                brace = aAST.findFirstToken(TokenTypes.LCURLY);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9fab45f52a73f89b7a60ab99041eb54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "commitAfterChange": "5a3f05ec8038daa674666bbaa82d59127aa74f92", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean isSuperCall(DetailAST literalSuperAst)", "signatureAfterChange": "     private boolean isSuperCall(DetailAST literalSuperAst)", "diff": ["-        if (literalSuperAst.getType() != TokenTypes.LITERAL_SUPER) {", "-            return false;", "-        }", "-        // dot operator?", "-        DetailAST dotAst = literalSuperAst.getParent();", "-        if (dotAst.getType() != TokenTypes.DOT", "-            || isSameNameMethod(literalSuperAst)", "-            || hasArguments(dotAst)) {", "-            return false;", "-        }", "+        boolean superCall = false;", "-        // in an overriding method for this check?", "+        if (literalSuperAst.getType() == TokenTypes.LITERAL_SUPER) {", "+            // dot operator?", "+            final DetailAST dotAst = literalSuperAst.getParent();", "+", "+            if (dotAst.getType() == TokenTypes.DOT", "+                && !isSameNameMethod(literalSuperAst)", "+                && !hasArguments(dotAst)) {", "+                superCall = isSuperCallInOverridingMethod(dotAst);", "+            }", "+        }", "+        return superCall;", "+    }", "-                return isOverridingMethod(dotAst);", "-                return false;", "-        return false;"]}]}
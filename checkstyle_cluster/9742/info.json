{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "309c63a361066fce7867d3a6db3e52ba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d325171c677e354264e8f5946e54989d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "99ce97725cd037d152c571e5ff58eac9247d072d", "commitAfterChange": "9241c0a692ed65fab3b3fdb3c4ff1c118794337c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isSkipCase(DetailAST ast)", "signatureAfterChange": "     private static boolean isSkipCase(DetailAST ast)", "diff": ["+        boolean skipCase = true;", "+", "-        if (ScopeUtils.isLocalVariableDef(ast)", "-            || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "-            return true;", "-        }", "+        if (!ScopeUtils.isLocalVariableDef(ast)", "+                && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "+            final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        if (assign == null) {", "-            // no assign - no check", "-            return true;", "+            if (assign != null) {", "+                final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+                skipCase = modifiers.branchContains(TokenTypes.FINAL);", "+            }", "-", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        return modifiers.branchContains(TokenTypes.FINAL);", "+        return skipCase;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa103cfe5f45ec098beb331b47df544d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java", "commitBeforeChange": "69a3d541b4888e5e0e6ab09aa675667155c65381", "commitAfterChange": "fb0f73fc9c382d9279d573bfc3779b872f795aac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean isLegalComment(final TextBlock comment)", "signatureAfterChange": "     private boolean isLegalComment(final TextBlock comment)", "diff": ["-        if (legalComment == null) {", "-            return false;", "-        }", "+        boolean legal;", "+", "-        if (comment.getStartLineNo() != comment.getEndLineNo()) {", "-            return false;", "+        if (legalComment == null || comment.getStartLineNo() != comment.getEndLineNo()) {", "+            legal = false;", "-        String commentText = comment.getText()[0];", "-        // remove chars which start comment", "-        commentText = commentText.substring(2);", "-        // if this is a C-style comment we need to remove its end", "-        if (commentText.endsWith(\"*/\")) {", "-            commentText = commentText.substring(0, commentText.length() - 2);", "+        else {", "+            String commentText = comment.getText()[0];", "+            // remove chars which start comment", "+            commentText = commentText.substring(2);", "+            // if this is a C-style comment we need to remove its end", "+            if (commentText.endsWith(\"*/\")) {", "+                commentText = commentText.substring(0, commentText.length() - 2);", "+            }", "+            commentText = commentText.trim();", "+            legal = legalComment.matcher(commentText).find();", "-        commentText = commentText.trim();", "-        return legalComment.matcher(commentText).find();", "+        return legal;"]}]}
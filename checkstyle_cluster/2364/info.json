{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3ec91e2b1f42c5ad6600fc231dd9a0e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22cb74816985faa36a5e07a98c1644e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "db642355f8888d294815c7be72b09e2e61459c00", "commitAfterChange": "ee5d8ec0360a1e7f9790a050bc7a00ac362e2015", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static boolean isSingleLineFor(DetailAST literalFor)", "signatureAfterChange": "     private static boolean isSingleLineFor(DetailAST literalFor)", "diff": ["-            final DetailAST block = findExpressionBlockInForLoop(literalFor);", "-            if (block == null) {", "-                result = literalFor.getLineNo() == literalFor.getLastChild().getLineNo();", "-            }", "-            else {", "-                result = literalFor.getLineNo() == block.getLineNo();", "-            }", "+            result = literalFor.getLineNo() == literalFor.getLastChild().getLineNo();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb563178ebc1e1f9b4f4122c63014abe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "6a977155274fa6ff7e3055ca3701c206d9e0d34d", "commitAfterChange": "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "         @Override         public void syntaxError(                 Recognizer<?, ?> recognizer, Object offendingSymbol,                 int line, int charPositionInLine,                 String msg, RecognitionException ex)", "signatureAfterChange": "         @Override         public void syntaxError(                 Recognizer<?, ?> recognizer, Object offendingSymbol,                 int line, int charPositionInLine,                 String msg, RecognitionException ex)", "diff": ["-                final RuleContext ruleContext = ex.getCtx();", "-                if (ruleContext != null) {", "-                    final int ruleIndex = ex.getCtx().getRuleIndex();", "-                    final String ruleName = recognizer.getRuleNames()[ruleIndex];", "-                    final String upperCaseRuleName = CaseFormat.UPPER_CAMEL.to(", "-                            CaseFormat.UPPER_UNDERSCORE, ruleName);", "+                final int ruleIndex = ex.getCtx().getRuleIndex();", "+                final String ruleName = recognizer.getRuleNames()[ruleIndex];", "+                final String upperCaseRuleName = CaseFormat.UPPER_CAMEL.to(", "+                        CaseFormat.UPPER_UNDERSCORE, ruleName);", "-                    errorMessage = new ParseErrorMessage(lineNumber,", "-                            JAVADOC_PARSE_RULE_ERROR, charPositionInLine, msg, upperCaseRuleName);", "-                }", "-                else {", "-                    errorMessage = new ParseErrorMessage(lineNumber, JAVADOC_PARSE_TOKEN_ERROR,", "-                            charPositionInLine, msg, charPositionInLine);", "-                }", "+                errorMessage = new ParseErrorMessage(lineNumber,", "+                        JAVADOC_PARSE_RULE_ERROR, charPositionInLine, msg, upperCaseRuleName);"]}]}
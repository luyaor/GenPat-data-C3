{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e45af22515d116364869df9b42e7098d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "540f5e4851a348af08ca98de497144a0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java", "commitBeforeChange": "96c668724bc05a11ceb031dda71efe1e9e69480d", "commitAfterChange": "788b41973d5747c7b4699a853b62168cf0001df6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public boolean equals(Object aObject)", "signatureAfterChange": "     public boolean equals(Object aObject)", "diff": ["-            if (!this.mCheckPattern.equals(other.mCheckPattern)) {", "+            if (mCheckPattern != null) {", "+                if (!mCheckPattern.equals(other.mCheckPattern)) {", "+                    return false;", "+                }", "+            }", "+            else if (other.mCheckPattern != null) {", "+                return false;", "+            }", "+", "+            // same module id?", "+            if (mModuleId != null) {", "+                if (!mModuleId.equals(other.mModuleId)) {", "+                    return false;", "+                }", "+            }", "+            else if (other.mModuleId != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db9cd204ebbc3cceb806ad74eaea423c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java", "commitBeforeChange": "0b2ea87e30a285e6fb8c8f2aa4b80e1802f8d865", "commitAfterChange": "da2328d0f138c2d989056bc876f8698cc53bffe3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+", "+            // empty FOR initializer?", "+            if (aAST.getType() == TokenTypes.SEMI) {", "+                final DetailAST sibling = aAST.getPreviousSibling();", "+                if ((sibling != null)", "+                        && (sibling.getType() == TokenTypes.FOR_INIT)", "+                        && (sibling.getChildCount() == 0))", "+                {", "+                    return;", "+                }", "+            }", "+"]}]}
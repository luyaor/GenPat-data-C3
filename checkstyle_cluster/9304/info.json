{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "467dd9b43c8c48e8d38c6e5050af5682", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "050749024e1747791587d42c7f833b1c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java", "commitBeforeChange": "531327f8c7789d60c937d0f320bbf7e29abe0e27", "commitAfterChange": "e2f265251a601054b36a9464d0f6e389371723d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testMisc() throws ClassNotFoundException", "signatureAfterChange": "     @Test     public void testMisc() throws ClassNotFoundException", "diff": ["-        cr = new ClassResolver(Thread.currentThread().getContextClassLoader(), null, imps);", "-        cr.resolve(\"ChoiceFormat\", \"\");", "+        ClassResolver newClassResolver = new ClassResolver(Thread.currentThread().getContextClassLoader(), null, imps);", "+        newClassResolver.resolve(\"ChoiceFormat\", \"\");", "-        cr = new ClassResolver(Thread.currentThread().getContextClassLoader(),", "-                               \"java.util\", imps);", "-        cr.resolve(\"List\", \"\");", "+        ClassResolver javaUtilClassResolver = new ClassResolver(", "+                Thread.currentThread().getContextClassLoader(), \"java.util\", imps);", "+        javaUtilClassResolver.resolve(\"List\", \"\");", "-            cr.resolve(\"two.nil.england\", \"\");", "+            javaUtilClassResolver.resolve(\"two.nil.england\", \"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de39117e91be97681557f226c77ee830", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/utils/CommonUtilsTest.java", "commitBeforeChange": "531327f8c7789d60c937d0f320bbf7e29abe0e27", "commitAfterChange": "e2f265251a601054b36a9464d0f6e389371723d5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testFileExtensions()", "signatureAfterChange": "      @Test     public void testFileExtensions()", "diff": ["-        File file = new File(\"file.pdf\");", "-        assertFalse(CommonUtils.matchesFileExtension(file, fileExtensions));", "-        assertTrue(CommonUtils.matchesFileExtension(file, (String[]) null));", "-        file = new File(\"file.java\");", "-        assertTrue(CommonUtils.matchesFileExtension(file, fileExtensions));", "-        file = new File(\"file.\");", "-        assertTrue(CommonUtils.matchesFileExtension(file, \"\"));", "+        File pdfFile = new File(\"file.pdf\");", "+        assertFalse(CommonUtils.matchesFileExtension(pdfFile, fileExtensions));", "+        assertTrue(CommonUtils.matchesFileExtension(pdfFile, (String[]) null));", "+        File javaFile = new File(\"file.java\");", "+        assertTrue(CommonUtils.matchesFileExtension(javaFile, fileExtensions));", "+        File emptyExtensionFile = new File(\"file.\");", "+        assertTrue(CommonUtils.matchesFileExtension(emptyExtensionFile, \"\"));"]}]}
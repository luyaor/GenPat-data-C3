{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f00a64ebc9d573610a6735567b61385", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25a264313fadb04d7de420a8d058c469", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "65989e76a40bf085059ee2bf9c695c6b45a771fb", "commitAfterChange": "fca8c918043974fcf6cc59e5d4161ada0b7c4c76", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     void setLines(String[] aLines)", "signatureAfterChange": "     void setLines(String[] aLines)", "diff": ["-        // Iterate over the lines looking for long lines and tabs.", "+        // Iterate over the lines looking for:", "+        //    - long lines", "+        //    - tabs", "-            String line = mLines[i];", "-            int realLength = Utils.lengthExpandedTabs(", "+            final String line = mLines[i];", "+            final int realLength = Utils.lengthExpandedTabs(", "-            if ((realLength > mConfig.getMaxLineLength()) &&", "-                !(mConfig.getIgnoreLineLengthRegexp().match(line)) &&", "-                !(mConfig.isIgnoreImportLength() &&", "-                  line.trim().startsWith(\"import\")))", "+            if ((realLength > mConfig.getMaxLineLength())", "+                && !(mConfig.getIgnoreLineLengthRegexp().match(line))", "+                && !(mConfig.isIgnoreImportLength()", "+                     && line.trim().startsWith(\"import\")))", "+            // Check for tabs"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71329fa5e8c338c1464b0b77ef01bb1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "1050efd1ce522fd9ff11d0be769008e2e4a242b3", "commitAfterChange": "404fcfba9c9f1e00e241c0f220781d944a07ce78", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     void setLines(String[] aLines)", "signatureAfterChange": "     void setLines(String[] aLines)", "diff": ["-", "-        // Iterate over the lines looking for:", "-        //    - long lines", "-        for (int i = 0; i < mLines.length; i++) {", "-            // check for long line, but possibly allow imports", "-            final String line = mLines[i];", "-            final int realLength = Utils.lengthExpandedTabs(", "-                line, line.length(), mConfig.getTabWidth());", "-            if ((realLength > mConfig.getMaxLineLength())", "-                && !(mConfig.getIgnoreLineLengthRegexp().match(line))", "-                && !(mConfig.isIgnoreImportLength()", "-                     && line.trim().startsWith(\"import\")))", "-            {", "-                mMessages.add(i + 1, \"maxLineLen\",", "-                              new Integer(mConfig.getMaxLineLength()));", "-            }", "-        }"]}]}
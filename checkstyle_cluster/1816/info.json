{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe597d9aabc82aa6adba9cdbe62d1fcc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b2b9d033125422d4ef0215697cf81e7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocVariableCheck.java", "commitBeforeChange": "c8958bcd0e5f70d3cee24eacd3901b152c2126f4", "commitAfterChange": "8dd406793d0152390b48097bd5f51696116044a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (!inCodeBlock(aAST)) {", "+        if (!ScopeUtils.inCodeBlock(aAST)) {", "-            final Scope declaredScope = getScopeFromMods(mods);", "+            final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-                inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;", "+                ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;", "-                final Scope surroundingScope = getSurroundingScope(aAST);", "+                final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea409ea6196bbec06e8a900b1e993058", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java", "commitBeforeChange": "8da777a68ad936f1a4e07d59cee17ecab2fc293e", "commitAfterChange": "7f740b18c9b4d3cd596dcf06d70785c3362fabd5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testFileExtensions()", "signatureAfterChange": "      @Test     public void testFileExtensions()", "diff": ["-        assertFalse(fileExtensionMatches(file, fileExtensions));", "-        assertTrue(fileExtensionMatches(file, null));", "+        assertFalse(Utils.fileExtensionMatches(file, fileExtensions));", "+        assertTrue(Utils.fileExtensionMatches(file, null));", "-        assertTrue(fileExtensionMatches(file, fileExtensions));", "+        assertTrue(Utils.fileExtensionMatches(file, fileExtensions));", "-        assertTrue(fileExtensionMatches(file, \"\"));", "+        assertTrue(Utils.fileExtensionMatches(file, \"\"));"]}]}
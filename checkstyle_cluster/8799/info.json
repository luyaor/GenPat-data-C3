{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afbcb9f56b5053a3707a3a6a5f8e15dc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11d0239640b7891baed1ef3b6237e64c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java", "commitBeforeChange": "39f40e57858c8a5c6310bf35e6649b03188b6996", "commitAfterChange": "0518b753a40f1857516b356654e5d01834af2109", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Before     public void setUp()", "signatureAfterChange": "      @Test     public void testAllowNoEmptyLineBetweenFields() throws Exception", "diff": ["-", "-    @Before", "-    public void setUp()", "-    {", "-        mCheckConfig = createCheckConfig(EmptyLineSeparatorCheck.class);", "-    }", "+", "+    @Test", "+    public void testAllowNoEmptyLineBetweenFields() throws Exception", "+    {", "+", "+        DefaultConfiguration checkConfig = createCheckConfig(EmptyLineSeparatorCheck.class);", "+        checkConfig.addAttribute(\"allowNoEmptyLineBetweenFields\", \"true\");", "+", "+        final String[] expected = {", "+            \"20: 'import' should be separated from previous statement.\",", "+            \"33: 'CLASS_DEF' should be separated from previous statement.\",", "+            \"37: 'STATIC_INIT' should be separated from previous statement.\",", "+            \"75: 'INTERFACE_DEF' should be separated from previous statement.\",", "+        };", "+        verify(checkConfig, getPath(\"whitespace/InputEmptyLineSeparatorCheck.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35eb1b030f4b7685fd0ec45cc1465096", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "524dd2e149045abdfbdb42282c78cf869d1f83d8", "commitAfterChange": "751fb5881113e58f492e3f2130533dca655a838a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "       @Test     public void testResourceLoadConfiguration() throws Exception", "signatureAfterChange": "       @Test     public void testResourceLoadConfiguration() throws Exception", "diff": ["+        final Properties props = new Properties();", "+        props.put(\"checkstyle.basedir\", \"basedir\");", "+", "-            \"/checkstyle/checkstyle_checks.xml\", new PropertiesExpander(new Properties()));", "-        verifyConfigNode(config, \"Checker\", 3, new Properties());", "+            \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/checkstyle_checks.xml\", new PropertiesExpander(props));", "+", "+        //verify the root, and property substitution", "+        final Properties atts = new Properties();", "+        atts.put(\"tabWidth\", \"4\");", "+        atts.put(\"basedir\", \"basedir\");", "+        verifyConfigNode(config, \"Checker\", 3, atts);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "564790d2098a126409e2a37885eca409", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c89314c46249224222a0fe07d58d987", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "e3366844c45fb800a290c0d30ed956f1d249de29", "commitAfterChange": "dcd7085ce2412a00ca97cd4fbaf7e8bf4fd4cfbe", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private static boolean checkParams(DetailAST method)", "signatureAfterChange": "     private static boolean checkParams(DetailAST method)", "diff": ["-        if (arrayType.getType() == TokenTypes.IDENT", "-            || arrayType.getType() == TokenTypes.DOT) {", "-            final FullIdent type = FullIdent.createFullIdent(arrayType);", "-            return \"String\".equals(type.getText())", "-                    || \"java.lang.String\".equals(type.getText());", "-        }", "-", "-        return false;", "+        final FullIdent type = FullIdent.createFullIdent(arrayType);", "+        return \"String\".equals(type.getText())", "+                || \"java.lang.String\".equals(type.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4857f5301d43b44ae2e17683a6ba6f92", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "094ffd52eca4f05bfc671f01cb7ad0b7d1bbe77f", "commitAfterChange": "49d100f325752b15bbee56bfcf99dac223144639", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+        if (aAST.getType() == TokenTypes.VARIABLE_DEF", "+            || aAST.getType() == TokenTypes.PARAMETER_DEF)", "+        {", "+            processVariable(aAST);", "+            return;", "+        }", "+", "-        if ((aAST.getType() == TokenTypes.CLASS_DEF)", "-            || (aAST.getType() == TokenTypes.ENUM_DEF)", "-            || (aAST.getType() == TokenTypes.ENUM_CONSTANT_DEF))", "-        {", "-            final DetailAST typeMods =", "-                aAST.findFirstToken(TokenTypes.MODIFIERS);", "-            final boolean isStaticInnerType =", "-                (typeMods == null)", "-                    ? false", "-                    : typeMods.branchContains(TokenTypes.LITERAL_STATIC);", "-            final FieldFrame frame =", "-                new FieldFrame(mCurrentFrame, isStaticInnerType);", "+        final DetailAST typeMods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final boolean isStaticInnerType =", "+            (typeMods == null)", "+            ? false", "+            : typeMods.branchContains(TokenTypes.LITERAL_STATIC);", "+        final FieldFrame frame =", "+            new FieldFrame(mCurrentFrame, isStaticInnerType);", "-            //add fields to container", "-            final DetailAST objBlock =", "-                aAST.findFirstToken(TokenTypes.OBJBLOCK);", "-            // enum constants may not have bodies", "-            if (objBlock != null) {", "-                DetailAST child = (DetailAST) objBlock.getFirstChild();", "-                while (child != null) {", "-                    if (child.getType() == TokenTypes.VARIABLE_DEF) {", "-                        final String name =", "-                            child.findFirstToken(TokenTypes.IDENT).getText();", "-                        final DetailAST mods =", "-                            child.findFirstToken(TokenTypes.MODIFIERS);", "-                        if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {", "-                            frame.addStaticField(name);", "-                        }", "-                        else {", "-                            frame.addInstanceField(name);", "-                        }", "+        //add fields to container", "+        final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);", "+        // enum constants may not have bodies", "+        if (objBlock != null) {", "+            DetailAST child = (DetailAST) objBlock.getFirstChild();", "+            while (child != null) {", "+                if (child.getType() == TokenTypes.VARIABLE_DEF) {", "+                    final String name =", "+                        child.findFirstToken(TokenTypes.IDENT).getText();", "+                    final DetailAST mods =", "+                        child.findFirstToken(TokenTypes.MODIFIERS);", "+                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {", "+                        frame.addStaticField(name);", "-                    child = (DetailAST) child.getNextSibling();", "+                    else {", "+                        frame.addInstanceField(name);", "+                    }", "+                child = (DetailAST) child.getNextSibling();", "-            // push container", "-            mCurrentFrame = frame;", "-        else {", "-            //must be VARIABLE_DEF or PARAMETER_DEF", "-            processVariable(aAST);", "-        }", "+        // push container", "+        mCurrentFrame = frame;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91f7fbf12d0cf465b4c9bebaba08cd23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "9fe0fc4f53ef0b44a63eb2cf910113fe2d779270", "commitAfterChange": "ed12c276a8adde2ce44b9834b413560476110f0e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public static boolean isOperatorTokenPartOfGenericDeclaration(final DetailAST aNode)", "signatureAfterChange": "     public static boolean isOperatorTokenPartOfGenericDeclaration(final DetailAST aNode)", "diff": ["-        {", "-            return true;", "-        }", "-        // Comparable < ? extends Serializable >", "-        else if (type == TokenTypes.QUESTION && parentType == TokenTypes.TYPE_ARGUMENT)"]}]}
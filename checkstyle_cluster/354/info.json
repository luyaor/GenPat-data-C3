{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da76dfd6ae417a3c19f928b732a48e33", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e6aae68c80b0c5850de68db2d78126c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "b0240a0200663fbf1d3146d1aefe12207fdde4af", "commitAfterChange": "9aa72722de7b5a4ffb5d50945c7bce8b58f25e8e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private int findDuplicateFromLine(         final int aI, final int aJ, final int aILine)", "signatureAfterChange": "     private void findDuplicateFromLine(         final int aI, final int aJ, final int aILine,         final int[] aJLines, final MultiMap aIgnore)", "diff": ["-    private int findDuplicateFromLine(", "-        final int aI, final int aJ, final int aILine)", "+    private void findDuplicateFromLine(", "+        final int aI, final int aJ, final int aILine,", "+        final int[] aJLines, final MultiMap aIgnore)", "-        final long checkSum = mLineBlockChecksums[aI][aILine];", "+        final long[] iCheckSums = mLineBlockChecksums[aI];", "+        final long[] jCheckSums = mLineBlockChecksums[aJ];", "-        final int iBlockCount = mLineBlockChecksums[aI].length;", "-        final int jBlockCount = mLineBlockChecksums[aJ].length;", "+        final int iBlockCount = iCheckSums.length;", "+        final int jBlockCount = jCheckSums.length;", "-        for (int jBlock = 0; jBlock < jBlockCount; jBlock++) {", "+        final long checkSum = iCheckSums[aILine];", "-            if (aI == aJ && aILine >= jBlock) {", "+        final Integer iLine = new Integer(aILine);", "+", "+        for (int jLineIdx = 0; jLineIdx < aJLines.length; jLineIdx++) {", "+", "+            int jLine = aJLines[jLineIdx];", "+", "+            if (aI == aJ && aILine >= jLine) {", "-            if (mLineBlockChecksums[aJ][jBlock] != checkSum) {", "+            if (jCheckSums[jLine] != checkSum) {", "-            int duplicateLines = verifiyDuplicateLines(aI, aJ, aILine, jBlock);", "+            final Collection ignoreEntries = (Collection) aIgnore.get(iLine);", "+            // avoid Integer constructor whenever we can", "+            if (ignoreEntries != null) {", "+                if (ignoreEntries.contains(new Integer(jLine))) {", "+                    continue;", "+                }", "+            }", "+", "+            int duplicateLines = verifiyDuplicateLines(aI, aJ, aILine, jLine);", "-                reportDuplicate(duplicateLines, aILine, mFiles[aJ], jBlock);", "-", "-                // skip to end of equivalent section", "-                return aILine + duplicateLines;", "+                reportDuplicate(duplicateLines, aILine, mFiles[aJ], jLine);", "+                int extend = duplicateLines - mMin;", "+                for (int i = 0; i < extend; i++) {", "+                    final int offset = (i + 1);", "+                    aIgnore.put(new Integer(aILine + offset),", "+                            new Integer(jLine + offset));", "+                }", "-        return aILine;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba45c48f4c57aeabcc6ab87b1389aa55", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "b0240a0200663fbf1d3146d1aefe12207fdde4af", "commitAfterChange": "9aa72722de7b5a4ffb5d50945c7bce8b58f25e8e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void findDuplicatesInFiles(int aI, int aJ)", "signatureAfterChange": "     private void findDuplicatesInFiles(int aI, int aJ)", "diff": ["+        final ChecksumInfo iChecksumInfo = mChecksumInfo[aI];", "+        final ChecksumInfo jChecksumInfo = mChecksumInfo[aJ];", "+        if (!iChecksumInfo.hasChecksumOverlapsWith(jChecksumInfo)) {", "+            return;", "+        }", "+", "-        final long[] jSortedBlockChecksums = mSortedRelevantChecksums[aJ];", "+", "+        // blocks of duplicate code might be longer than 'min'. We need to", "+        // remember the line combinations where we must ignore identical blocks", "+        // because we have already reported them for an earlier blockIdx.", "+        // Note: MultiHashMap is deprecated in the latest releases of o.a.j.c.c", "+        final MultiMap ignorePairs = new MultiHashMap();", "-        for (int blockIdx = 0; blockIdx < iBlockCount; blockIdx++) {", "+        for (int iLine = 0; iLine < iBlockCount; iLine++) {", "-            // detailed analysis only if the block does occur in jFile at all", "-            if (Arrays.binarySearch(", "-                    jSortedBlockChecksums,", "-                    iLineBlockChecksums[blockIdx]) >= 0)", "-            {", "-                blockIdx = findDuplicateFromLine(aI, aJ, blockIdx);", "+            final long iSum = iLineBlockChecksums[iLine];", "+            int[] jLines = jChecksumInfo.findLinesWithChecksum(iSum);", "+            // detailed analysis only if the iLine block occurs in jFile at all", "+            if (jLines.length > 0) {", "+                findDuplicateFromLine(aI, aJ, iLine, jLines, ignorePairs);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0d46f486510b0d7559e71976bd23dce", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50557487753c39262cf699214b6670a1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "440cf6836f278602a790d764f257777be80d8b9e", "commitAfterChange": "686afc521a11088c57632352eb6fd60a682b03d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void testCheck()         throws Exception", "signatureAfterChange": "      public void testCheckstyleChecks() throws Exception", "diff": ["-    ", "-    public void testCheck()", "-        throws Exception", "-//        Configuration config =", "-//            loadConfiguration(\"avoidstarimport_configuration.xml\");", "-//                    ", "-//        GlobalProperties globalProps =", "-//            new GlobalProperties(new Properties(), System.out);", "-//        assertEquals(\"properties\", globalProps.getProperties(),", "-//            config.getProperties());", "-//                ", "-//        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "-//        assertEquals(\"checkConfigs.length\", 1, checkConfigs.length);", "-//        ", "-//        assertTrue(\"checkConfigs[0]\",", "-//            (checkConfigs[0].createInstance(this.getClass().getClassLoader()))", "-//                instanceof AvoidStarImport);", "+", "+    public void testCheckstyleChecks() throws Exception", "+    {", "+        final Properties props = new Properties();", "+        props.put(\"checkstyle.basedir\", \"basedir\");", "+", "+        final DefaultConfiguration config =", "+            (DefaultConfiguration) loadConfiguration(", "+                \"checkstyle_checks.xml\", props);", "+", "+        //verify the root, and property substitution", "+        final Properties atts = new Properties();", "+        atts.put(\"tabWidth\", \"4\");", "+        atts.put(\"basedir\", \"basedir\");", "+        verifyConfigNode(config, \"configuration\", 3, atts);", "+", "+        //verify children", "+        final Configuration[] children = config.getChildren();", "+        atts.clear();", "+        verifyConfigNode(", "+            (DefaultConfiguration) children[1], \"PackageHtmlCheck\", 0, atts);", "+        verifyConfigNode(", "+            (DefaultConfiguration) children[2], \"TranslationCheck\", 0, atts);", "+        atts.put(\"testName\", \"testValue\");", "+        verifyConfigNode(", "+            (DefaultConfiguration) children[0], \"TreeWalker\", 8, atts);", "+", "+        //verify TreeWalker's first, last, NoWhitespaceAfterCheck", "+        final Configuration[] grandchildren = children[0].getChildren();", "+        atts.clear();", "+        verifyConfigNode(", "+            (DefaultConfiguration) grandchildren[0],", "+            \"AvoidStarImport\", 0, atts);", "+        atts.put(\"format\", \"System.out.println\");", "+        verifyConfigNode(", "+            (DefaultConfiguration) grandchildren[grandchildren.length - 1],", "+            \"GenericIllegalRegexpCheck\", 0, atts);", "+        atts.clear();", "+        atts.put(\"tokens\", \"DOT\");", "+        atts.put(\"allowLineBreaks\", \"true\");", "+        verifyConfigNode(", "+            (DefaultConfiguration) grandchildren[6],", "+            \"NoWhitespaceAfterCheck\", 0, atts);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "add5ec1d30baefb0c5881f5af4821e53", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "4a5491810944bed643a9f2acf46ef3b9da8f1be7", "commitAfterChange": "f66b504b06f8c479d338fb5b2797392dfa3ef359", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-", "-    @Override", "-        mRegexpHeaderChecker.checkLines(aLines);", "+        final int headerSize = getRegexpHeaderInfo().getHeaderLines().size();", "+        final int fileSize = aLines.size();", "+", "+        if (headerSize - getRegexpHeaderInfo().getMultLines().length > fileSize)", "+        {", "+            log(1, \"header.missing\");", "+        }", "+        else {", "+            int headerLineNo = 0;", "+            int i;", "+            for (i = 0; (headerLineNo < headerSize) && (i < fileSize); i++) {", "+                final String line = aLines.get(i);", "+                boolean isMatch = isMatch(line, headerLineNo);", "+                while (!isMatch && isMultiLine(headerLineNo)) {", "+                    headerLineNo++;", "+                    isMatch = (headerLineNo == headerSize)", "+                            || isMatch(line, headerLineNo);", "+                }", "+                if (!isMatch) {", "+                    log(i + 1, \"header.mismatch\", getHeaderLines().get(", "+                            headerLineNo));", "+                    break; // stop checking", "+                }", "+                if (!isMultiLine(headerLineNo)) {", "+                    headerLineNo++;", "+                }", "+            }", "+            if (i == fileSize) {", "+                // if file finished, but we have at least one non-multi-line", "+                // header isn't completed", "+                for (; headerLineNo < headerSize; headerLineNo++) {", "+                    if (!isMultiLine(headerLineNo)) {", "+                        log(1, \"header.missing\");", "+                        break;", "+                    }", "+                }", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b5f59bd06107a76271a1608173e941e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "087020dd53dace6a9f0dd57c967268a6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java", "commitBeforeChange": "521dacce7582a4349a9b02980c3e849e83c023fb", "commitAfterChange": "82d8e91024a57a96fbb6410dacb29d6a3f582903", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean validateTagAtTheRestOfComment(String[] lines, boolean foundBefore,                                                   int currentLine, int i)", "signatureAfterChange": "     private boolean validateTagAtTheRestOfComment(String[] lines, boolean foundBefore,                                                   int currentLine, int i)", "diff": ["-            final Matcher multilineCont =", "-                MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT", "-                .matcher(lines[reindex]);", "+            final Matcher multilineCont = MATCH_DEPRECATED_MULTILINE_CONT.matcher(lines[reindex]);", "-                if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)", "-                    && !lFin.equals(MissingDeprecatedCheck.END_JAVADOC)) {", "+                if (!lFin.equals(NEXT_TAG)", "+                    && !lFin.equals(END_JAVADOC)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10b2aa9b15b4497542692e3d7c314f5e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "7e1d5d0a2d4eeebf14b406722a16cb43f6437f1a", "commitAfterChange": "f0c74333de00353b99ff1e9bfd1365ed4560794c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void openFile(File file, final Component parent)", "signatureAfterChange": "      public void openFile(File file, final Component parent)", "diff": ["-                getLinesToPosition().clear();", "+                clearLinesToPosition();", "-                getLinesToPosition().add(0);", "+                addLineToPosition(0);", "-                    getLinesToPosition().add(textArea.getText().length());", "+                    addLineToPosition(textArea.getText().length());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29c6ae47ee9d40df1da5cb7222a93dfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheckTest.java", "commitBeforeChange": "613ac4bb77cbdb6b93d4a79360c8e4aa47f5596b", "commitAfterChange": "aa950f06974ead524a9f355ad8fb1b38852f9625", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Test     public void testIOException() throws Exception", "signatureAfterChange": "     @Test     public void testIOException() throws Exception", "diff": ["-        Assert.assertEquals(\"Wrong messages count: \" + messages.size(),", "+        assertEquals(\"Wrong messages count: \" + messages.size(),", "-        Assert.assertEquals(\"Message key '\" + retrievedMessage", "-                + \"' is not valid\", \"unable.open.cause\",", "+        assertEquals(\"Message key '\" + retrievedMessage", "+                        + \"' is not valid\", \"unable.open.cause\",", "-        Assert.assertEquals(\"Message '\" + message.getMessage()", "-                + \"' is not valid\", message.getMessage(),", "+        assertEquals(\"Message '\" + message.getMessage()", "+                        + \"' is not valid\", message.getMessage(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "961a761e25e6b0435496c12542ba036f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java", "commitBeforeChange": "f0d637e28c17dd33cf4031a1ab499abf4c1bbb03", "commitAfterChange": "59fa63c67d44757974a88e8210d7263497155272", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "      @Test     public void testIsCommentType() throws NoSuchMethodException", "signatureAfterChange": "      @Test     public void testIsCommentType() throws NoSuchMethodException", "diff": ["-        Assert.assertTrue(Utils.isCommentType(TokenTypes.SINGLE_LINE_COMMENT));", "-        Assert.assertTrue(Utils.isCommentType(TokenTypes.BLOCK_COMMENT_BEGIN));", "-        Assert.assertTrue(Utils.isCommentType(TokenTypes.BLOCK_COMMENT_END));", "-        Assert.assertTrue(Utils.isCommentType(TokenTypes.COMMENT_CONTENT));", "+        assertTrue(Utils.isCommentType(TokenTypes.SINGLE_LINE_COMMENT));", "+        assertTrue(Utils.isCommentType(TokenTypes.BLOCK_COMMENT_BEGIN));", "+        assertTrue(Utils.isCommentType(TokenTypes.BLOCK_COMMENT_END));", "+        assertTrue(Utils.isCommentType(TokenTypes.COMMENT_CONTENT));"]}]}
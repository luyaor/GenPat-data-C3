{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35d50922238bdf8cd216e29011e59380", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19556e4276726c54134251090fc6ba17", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "f1dced161ab0c818f0e1e125fc5b88b71f5b171e", "commitAfterChange": "af095344e1501d55b2dfbbd18deaf305e814601c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     private static List<JavadocTag> getMethodTags(TextBlock comment)", "signatureAfterChange": "     private static List<JavadocTag> getMethodTags(TextBlock comment)", "diff": ["-                int col = noargMultilineStart.start(1) - 1;", "-                if (i == 0) {", "-                    col += comment.getStartColNo();", "-                }", "+                final int col = noargMultilineStart.start(1) - 1;", "-                    if (multilineCont.find()) {", "-                        remIndex = lines.length;", "-                        final String lFin = multilineCont.group(1);", "-                        if (!lFin.equals(NEXT_TAG)", "-                            && !lFin.equals(END_JAVADOC)) {", "-                            tags.add(new JavadocTag(currentLine, col, p1));", "-                        }", "+                    multilineCont.find();", "+                    remIndex = lines.length;", "+                    final String lFin = multilineCont.group(1);", "+                    if (!lFin.equals(NEXT_TAG)", "+                        && !lFin.equals(END_JAVADOC)) {", "+                        tags.add(new JavadocTag(currentLine, col, p1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e47b0f853eae66af3b0a11b029b7c48", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "66d266384abccc702867da9aa68b8c84f9828d45", "commitAfterChange": "9e9b817c6558d1141617e52444716c0f802c1417", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     private static List<JavadocTag> getMultilineNoArgTags(final Matcher noargMultilineStart,             final String[] lines, final int lineIndex, final int tagLine)", "signatureAfterChange": "     private static List<JavadocTag> getMultilineNoArgTags(final Matcher noargMultilineStart,             final String[] lines, final int lineIndex, final int tagLine)", "diff": ["-            multilineCont.find();", "-            remIndex = lines.length;", "-            final String lFin = multilineCont.group(1);", "-            if (!lFin.equals(NEXT_TAG)", "-                && !lFin.equals(END_JAVADOC)) {", "-                tags.add(new JavadocTag(tagLine, col, param1));", "+            if (multilineCont.find()) {", "+                remIndex = lines.length;", "+                final String lFin = multilineCont.group(1);", "+                if (!lFin.equals(NEXT_TAG)", "+                    && !lFin.equals(END_JAVADOC)) {", "+                    tags.add(new JavadocTag(tagLine, col, param1));", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef17917944e660358b690898a4beea0a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "139609ac5d073ecb04381466f075f174b0aec8c9", "commitAfterChange": "ca9c59e8dc4b1dc4bb61149752c9e46a00e42fb4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                log(aAST, \"declaration.order.constructor\");", "+                if (!mIgnoreConstructors) {", "+                    log(aAST, \"declaration.order.constructor\");", "+                }", "-                log(aAST, \"declaration.order.method\");", "+                if (!mIgnoreMethods) {", "+                    log(aAST, \"declaration.order.method\");", "+                }", "-                    log(aAST, \"declaration.order.static\");", "+                    if (!mIgnoreModifiers) {", "+                        log(aAST, \"declaration.order.static\");", "+                    }", "-                    log(aAST, \"declaration.order.instance\");", "+                    if (!mIgnoreModifiers) {", "+                        log(aAST, \"declaration.order.instance\");", "+                    }", "-                log(aAST, \"declaration.order.access\");", "+                if (!mIgnoreModifiers) {", "+                    log(aAST, \"declaration.order.access\");", "+                }"]}]}
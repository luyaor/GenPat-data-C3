{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04c155bbe6408eb385a1768166c75c5a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41c295f0991ca1f800657d2122f2387a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "d499f72239cec254d620ab1619ac936e233e2033", "commitAfterChange": "c682b5725d22afc38bf19d9667b23a7deab6d8c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private int process(String aFileName)", "signatureAfterChange": "     private int process(String aFileName)", "diff": ["-        LineText[] errors;", "+        LocalizedMessage[] errors;", "-            errors = new LineText[] {new LineText(0, \"File not found!\")};", "+            errors = new LocalizedMessage[] {", "+                new LocalizedMessage(0, \"general.fileNotFound\", null)};", "-            errors = new LineText[] {", "-                new LineText(0, \"Got an IOException -\" + ioe.getMessage())};", "+            errors = new LocalizedMessage[] {", "+                new LocalizedMessage(0, \"general.exception\",", "+                                     new String[] {ioe.getMessage()})};", "-            errors = new LineText[] {", "-                new LineText(0,", "-                             \"Got a RecognitionException -\" + re.getMessage())};", "+            errors = new LocalizedMessage[] {", "+                new LocalizedMessage(0, \"general.exception\",", "+                                     new String[] {re.getMessage()})};", "-            errors = new LineText[] {", "-                new LineText(0,", "-                             \"Got a TokenStreamException -\" + te.getMessage())};", "+            errors = new LocalizedMessage[] {", "+                new LocalizedMessage(0, \"general.exception\",", "+                                     new String[] {te.getMessage()})};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44a7f3a458c019b4b737b14ff548015c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "3fa2424fb3fbc30a9406cbcd29401f6d4285c77c", "commitAfterChange": "8d9d5e58ac50133f15ad8807bea302ab16aa5071", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected void logError(DetailAST aAst, String aSubtypeName)", "signatureAfterChange": "     protected void logChildError(int aLine,                                  int aActualLevel,                                  int aExpectedLevel)", "diff": ["-    protected void logError(DetailAST aAst, String aSubtypeName)", "+    protected void logChildError(int aLine,", "+                                 int aActualLevel,", "+                                 int aExpectedLevel)", "-        String typeStr = (aSubtypeName == \"\" ? \"\" : (\" \" + aSubtypeName));", "-        mIndentCheck.indentationLog(aAst.getLineNo(), mTypeName + typeStr", "-            + \" at indentation level not at correct indentation, \"", "-            + getLevel());", "+        Object[] args = new Object[] {", "+            mTypeName,", "+            new Integer(aActualLevel),", "+            new Integer(aExpectedLevel),", "+        };", "+        mIndentCheck.indentationLog(aLine,", "+                                    \"indentation.child.error\",", "+                                    args);"]}]}
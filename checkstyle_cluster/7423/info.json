{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8dafcf0f9b6a9c08398265105c4553b9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b24a2542f9d0cdb22477c0e9295ae893", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java", "commitBeforeChange": "7abbd6af2f63a9e5bfa067f3058b5a3e738971de", "commitAfterChange": "8d242382f8bb77488b6da23bdd0d2d61583703fc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public boolean accept(Object aObject)", "signatureAfterChange": "     public boolean accept(Integer aInt)", "diff": ["-    public boolean accept(Object aObject)", "+    public boolean accept(Integer aInt)", "-        if (!(aObject instanceof Integer)) {", "-            return false;", "-        }", "-            final Filter filter = (Filter) it.next();", "-            if (filter.accept(aObject)) {", "+            final IntFilter filter = (IntFilter) it.next();", "+            if (filter.accept(aInt)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b48f8e73363be4b582aef60c5eef166c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java", "commitBeforeChange": "7abbd6af2f63a9e5bfa067f3058b5a3e738971de", "commitAfterChange": "8d242382f8bb77488b6da23bdd0d2d61583703fc", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public boolean accept(Object aObject)", "signatureAfterChange": "     public boolean accept(Integer aInt)", "diff": ["-    /** @see com.puppycrawl.tools.checkstyle.api.Filter */", "-    public boolean accept(Object aObject)", "+    /** @see com.puppycrawl.tools.checkstyle.filters.IntFilter */", "+    public boolean accept(Integer aInt)", "-        if (!(aObject instanceof Integer)) {", "-            return false;", "-        }", "-        return ((mLowerBound.compareTo(aObject) <= 0)", "-            && (mUpperBound.compareTo(aObject) >= 0));", "+        return ((mLowerBound.compareTo(aInt) <= 0)", "+            && (mUpperBound.compareTo(aInt) >= 0));"]}]}
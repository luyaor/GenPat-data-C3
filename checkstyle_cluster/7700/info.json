{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "697aa71a4ba0183bdf9907f6d0aa217e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dae8c8609fc5e2f78c51aba1c472b9d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatter.java", "commitBeforeChange": "1c16dc90c24f098731284f1b44ddb4b869dd83eb", "commitAfterChange": "5a2b09b7a3b5313f94eeb39d40d04058ae400cf5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private static String getCheckShortName(AuditEvent event)", "signatureAfterChange": "     private static String getCheckShortName(AuditEvent event)", "diff": ["-        return checkFullName.substring(checkFullName.lastIndexOf('.') + 1,", "-            checkFullName.lastIndexOf(\"Check\"));", "+        final String checkShortName;", "+        final int lastDotIndex = checkFullName.lastIndexOf('.');", "+        if (lastDotIndex == -1) {", "+            if (checkFullName.endsWith(SUFFIX)) {", "+                checkShortName = checkFullName.substring(0, checkFullName.lastIndexOf(SUFFIX));", "+            }", "+            else {", "+                checkShortName = checkFullName.substring(0, checkFullName.length());", "+            }", "+        }", "+        else {", "+            if (checkFullName.endsWith(SUFFIX)) {", "+                checkShortName = checkFullName.substring(lastDotIndex + 1,", "+                    checkFullName.lastIndexOf(SUFFIX));", "+            }", "+            else {", "+                checkShortName = checkFullName.substring(lastDotIndex + 1, checkFullName.length());", "+            }", "+        }", "+        return checkShortName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b193062e5b52bcf07ee118b2cfd2bca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "ef422e76c6b0bcac8fda2608a4d2d4301e09eca4", "commitAfterChange": "d282d5b8db9eba5943d1cb0269315744d5344a47", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final DetailAST lcurly = details.lcurly;", "+        final String violation;", "+        if (shouldStartLine) {", "+            final String targetSourceLine = getLines()[rcurly.getLineNo() - 1];", "+            violation = validate(details, getAbstractOption(), true, targetSourceLine);", "+        }", "+        else {", "+            violation = validate(details, getAbstractOption(), false, \"\");", "+        }", "-        validate(details, rcurly, lcurly);", "+        if (!violation.isEmpty()) {", "+            log(rcurly, violation, \"}\", rcurly.getColumnNo() + 1);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52f3facd83a52d3fcb1e186565954aa9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheck.java", "commitBeforeChange": "1c7341013d0e8a34498eb49ccdb4e91419f13280", "commitAfterChange": "cd89321522d9bf7fc10547e743fb8bbb4c993791", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "signatureAfterChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "diff": ["+        // Let's trye to load class.", "+        Class excClass = null;", "+", "+        if (!mAllowUnchecked || !mAllowSubclasses) {", "+            excClass = resolveClass(aExc.getText());", "+            if (excClass == null) {", "+                log(aExc.getLineNo(), aExc.getColumnNo(),", "+                    \"redundant.throws.classInfo\", aExc.getText());", "+            }", "+        }", "+", "-            if (isUnchecked(aExc)) {", "+            if (isUnchecked(excClass)) {", "-            final FullIdent fi = (FullIdent) known.next();", "+            final ClassInfo ci = (ClassInfo) known.next();", "+            final FullIdent fi = ci.getName();", "+", "-                if (isSubclass(fi, aExc)) {", "+                if (isSubclass(ci.getClazz(), excClass)) {", "-                else if (isSubclass(aExc, fi)) {", "+                else if (isSubclass(excClass, ci.getClazz())) {", "-            aKnownExcs.add(aExc);", "+            aKnownExcs.add(new ClassInfo(aExc, excClass));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d68e2842242a781f160c5c3c1ce8fc6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "c4853b445219fd3d31d290c37184e46a8c4161ed", "commitAfterChange": "8d800ef546e11c6d593154f4071e39cdc4f66f34", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setGroups(String[] aGroups)", "signatureAfterChange": "     public void setGroups(String[] aGroups)", "diff": ["-        // set the default wildcard group to be after the last named group.", "-        mWildcardGroupIndex = aGroups.length;", "-", "-        mGroups = new String[aGroups.length];", "+        mGroups = new Pattern[aGroups.length];", "+            Pattern grp;", "-            // if the pkg name is the wildcard, record the", "-            // position for later reference", "+            // if the pkg name is the wildcard, make it match zero chars", "+            // from any name, so it will always be used as last resort.", "-                mWildcardGroupIndex = i;", "+                grp = Pattern.compile(\"\"); // matches any package", "-            else if (!pkg.endsWith(\".\")) {", "-                pkg = pkg + \".\";", "+            else if (pkg.startsWith(\"/\")) {", "+                if (!pkg.endsWith(\"/\")) {", "+                    throw new IllegalArgumentException(\"Invalid group\");", "+                }", "+                pkg = pkg.substring(1, pkg.length() - 1);", "+                grp = Pattern.compile(pkg);", "+            }", "+            else {", "+                if (!pkg.endsWith(\".\")) {", "+                    pkg = pkg + \".\";", "+                }", "+                grp = Pattern.compile(\"^\" + Pattern.quote(pkg));", "-            mGroups[i] = pkg;", "+            mGroups[i] = grp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a11c7b7f9dcc5073144276c885abfdb7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "41044d42b8f21ae00792f101a63101bf87d7fd61", "commitAfterChange": "7a4ec11d123dc0bbf7db943af715d19814d2e332", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected static String getSrcPath(String aFilename) throws IOException", "signatureAfterChange": "      protected static Configuration getCheckConfig(String checkName) throws CheckstyleException", "diff": ["-    protected static String getSrcPath(String aFilename) throws IOException {", "-", "-        return new File(\"src/test/java/com/puppycrawl/tools/checkstyle/\" + aFilename)", "-            .getCanonicalPath();", "+    protected static Configuration getCheckConfig(String checkName) throws CheckstyleException {", "+        Configuration result = null;", "+        for (Configuration currentConfig : getConfiguration().getChildren()) {", "+            if (\"TreeWalker\".equals(currentConfig.getName())) {", "+                for (Configuration checkConfig : currentConfig.getChildren()) {", "+                    if (checkName.equals(checkConfig.getName())) {", "+                        result = checkConfig;", "+                        break;", "+                    }", "+                }", "+            }", "+            else if (checkName.equals(currentConfig.getName())) {", "+                result = currentConfig;", "+                break;", "+            }", "+        }", "+        return result;", "+    }"]}]}
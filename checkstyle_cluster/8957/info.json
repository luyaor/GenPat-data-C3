{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37c41a30343ccdddac92922feedb27ad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cc2f49cd91b9305507209f26e1ff7d0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "1ac7fc3f8fc856547085bcc88e17fd1f4bbe0ddd", "commitAfterChange": "083ab98e4a451f1a982db89616535d9c0388b50b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public static DetailAST parse(         FileContents aContents)         throws RecognitionException, TokenStreamException", "signatureAfterChange": "     public static DetailAST parse(         FileContents aContents)         throws RecognitionException, TokenStreamException", "diff": ["-        DetailAST rootAST;", "+        DetailAST rootAST = null;", "-            rootAST = parse(", "-                GeneratedJava15Lexer.class, SilentJava15Recognizer.class,", "-                aContents);", "+            rootAST = parse(aContents, true, true, true);", "-            rootAST = parse(", "-                GeneratedJavaLexer.class, GeneratedJavaRecognizer.class,", "-                aContents);", "+            try {", "+                rootAST = parse(aContents, true, true, false);", "+            }", "+            catch (RecognitionException exception2) {", "+                rootAST = parse(aContents, false, false, false);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2ee45cc1e3a3a83ec62d0718a418462", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "cbfe72383be737abacb4e78ddbb59a3036798605", "commitAfterChange": "06865630aa3da0b36064b9e00e0e95ff681f234e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void flushAndCloseOutStream(OutputStream stream)", "signatureAfterChange": "     private void flushAndCloseOutStream(OutputStream stream)", "diff": ["-        if (stream != null) {", "-            try {", "-                stream.flush();", "-            }", "-            catch (final IOException ex) {", "-                Utils.getExceptionLogger()", "-                    .debug(\"Unable to flush output stream.\", ex);", "-            }", "-            finally {", "-                Utils.closeQuietly(stream);", "-            }", "+        try {", "+            Flushables.flush(stream, false);", "+            Closeables.close(stream, false);", "+        }", "+        catch (final IOException ex) {", "+            Utils.getExceptionLogger()", "+                    .debug(\"Unable to flush and close output stream.\", ex);"]}]}
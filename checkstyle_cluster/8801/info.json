{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f8b83f22aa65d8a48e34c40a73ecf5d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26fbfb942ddbed229c6b685cba8456c9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "2d1687465f841ead6eaf930f36040b17871e672e", "commitAfterChange": "bb1db4938ccae0f7149461ea372398fb8a53f2a8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String aClassName)", "signatureAfterChange": "     private String getIllegalInstantiation(String aClassName)", "diff": ["-                return illegal;", "+                // java.lang needs no import, but a class without import might", "+                // also come from the same file or be in the same package.", "+                // E.g. if a class defines an inner class \"Boolean\",", "+                // the expression \"new Boolean()\" refers to that class,", "+                // not to java.lang.Boolean", "+", "+                boolean isSameFile = mClassNames.contains(aClassName);", "+", "+                boolean isSamePackage = false;", "+                try {", "+                    final ClassLoader classLoader = getClassLoader();", "+                    if (classLoader != null) {", "+                        final String fqName = mPkgName + \".\" + aClassName;", "+                        classLoader.loadClass(fqName);", "+                        // no ClassNotFoundException, fqName is a known class", "+                        isSamePackage = true;", "+                    }", "+                }", "+                catch (ClassNotFoundException ex) {", "+                    // not a class from the same package", "+                    isSamePackage = false;", "+                }", "+", "+                if (!(isSameFile || isSamePackage)) {", "+                    return illegal;", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d49319d3810d0f390ce72d2d907807bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java", "commitBeforeChange": "9cff1673f1d42910c654e0af5365d68591f104f0", "commitAfterChange": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setHeader(String aHeader)", "signatureAfterChange": "     public void setHeader(String aHeader)", "diff": ["-        mHeaderInfo.setHeader(aHeader);", "+        if ((aHeader == null) || (aHeader.trim().length() == 0)) {", "+            return;", "+        }", "+", "+        checkHeaderNotInitialized();", "+", "+        final String headerExpandedNewLines = aHeader.replaceAll(\"\\\\\\\\n\", \"\\n\");", "+", "+        final Reader headerReader = new StringReader(headerExpandedNewLines);", "+        try {", "+            loadHeader(headerReader);", "+        }", "+        catch (final IOException ex) {", "+            throw new ConversionException(\"unable to load header\", ex);", "+        }", "+        finally {", "+            Utils.closeQuietly(headerReader);", "+        }", "+    }"]}]}
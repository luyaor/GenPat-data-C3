{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa95b3fbeb9eb7bae1cc15d522b4a951", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3801322c4b664e59c7cb1ecf699aa2ab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheckTest.java", "commitBeforeChange": "545237e358cd5ec1492f128f500b345d0f1718a9", "commitAfterChange": "8ad4aebb66a1b90ac135e05f8062423028e3be8e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testIllegalAbstractClassName() throws Exception", "signatureAfterChange": "     @Test     public void testIllegalAbstractClassName() throws Exception", "diff": ["+        final String pattern = \"^Abstract.+$|^.*Factory$\";", "+", "-            \"3:1: Name 'InputAbstractClassName' must match pattern '^Abstract.+$|^.*Factory$'.\",", "-            \"6:1: Name 'NonAbstractClassName' must match pattern '^Abstract.+$|^.*Factory$'.\",", "-            \"9:1: Name 'FactoryWithBadName' must match pattern '^Abstract.+$|^.*Factory$'.\",", "-            \"13:5: Name 'NonAbstractInnerClass' must match pattern '^Abstract.+$|^.*Factory$'.\",", "+            \"3:1: \" + getCheckMessage(ILLEGAL_ABSTRACT_CLASS_NAME, \"InputAbstractClassName\", pattern),", "+            \"6:1: \" + getCheckMessage(ILLEGAL_ABSTRACT_CLASS_NAME, \"NonAbstractClassName\", pattern),", "+            \"9:1: \" + getCheckMessage(ILLEGAL_ABSTRACT_CLASS_NAME, \"FactoryWithBadName\", pattern),", "+            \"13:5: \" + getCheckMessage(ILLEGAL_ABSTRACT_CLASS_NAME, \"NonAbstractInnerClass\", pattern),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3a2d39161d7b068c319c1135198b81", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheckTest.java", "commitBeforeChange": "ac5dbc736320f6e5807cef97964a8a2928123687", "commitAfterChange": "93c68168f3b6ef88cfdcd31e059fd22dda7eaeb9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testAllVariants() throws Exception", "signatureAfterChange": "      @Test     public void testAllVariants() throws Exception", "diff": ["-        final String pattern = \"^Abstract.+$|^.*Factory$\";", "+        final String pattern = \"^Abstract.+$\";", "-            \"9:1: \" + getCheckMessage(ILLEGAL_ABSTRACT_CLASS_NAME, \"FactoryWithBadName\", pattern),", "-            \"13:5: \" + getCheckMessage(ILLEGAL_ABSTRACT_CLASS_NAME, \"NonAbstractInnerClass\", pattern),", "-            \"26:1: \" + getCheckMessage(NO_ABSTRACT_CLASS_MODIFIER, \"AbstractClass\"),", "-            \"29:1: \" + getCheckMessage(NO_ABSTRACT_CLASS_MODIFIER, \"Class1Factory\"),", "-            \"33:5: \" + getCheckMessage(NO_ABSTRACT_CLASS_MODIFIER, \"AbstractInnerClass\"),", "-            \"38:5: \" + getCheckMessage(NO_ABSTRACT_CLASS_MODIFIER, \"WellNamedFactory\"),", "+            \"10:5: \" + getCheckMessage(ILLEGAL_ABSTRACT_CLASS_NAME, \"NonAbstractInnerClass\", pattern),", "+            \"18:1: \" + getCheckMessage(NO_ABSTRACT_CLASS_MODIFIER, \"AbstractClass\"),", "+            \"22:5: \" + getCheckMessage(NO_ABSTRACT_CLASS_MODIFIER, \"AbstractInnerClass\"),"]}]}
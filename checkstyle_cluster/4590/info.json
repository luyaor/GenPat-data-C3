{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ecb02296ed9277d3c61fa7471f5ac62", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f57ebb22625a4cfce02960184be39f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "0406304865b4fdd6e5294f0bcd948f1158f4ae84", "commitAfterChange": "e15f70ac5b1460236e14237acc3a041102238efd", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean matchesThirdPartyImportGroup(boolean isStatic,         String currentImport, String currentGroup)", "signatureAfterChange": "     private static RuleMatchForImport findBetterPatternMatch(String importPath, String group,             Pattern regExp, RuleMatchForImport currentBestMatch)", "diff": ["-     */", "-    private boolean matchesThirdPartyImportGroup(boolean isStatic,", "-        String currentImport, String currentGroup) {", "-        return !isStatic && THIRD_PARTY_PACKAGE_RULE_GROUP.equals(currentGroup)", "-                && thirdPartyPackageRegExp.matcher(currentImport).find()", "-                && !standardPackageRegExp.matcher(currentImport).find()", "-                && !specialImportsRegExp.matcher(currentImport).find();", "+    private static RuleMatchForImport findBetterPatternMatch(String importPath, String group,", "+            Pattern regExp, RuleMatchForImport currentBestMatch) {", "+        RuleMatchForImport betterMatchCandidate = currentBestMatch;", "+        final Matcher matcher = regExp.matcher(importPath);", "+        while (matcher.find()) {", "+            final int length = matcher.end() - matcher.start();", "+            if (length > betterMatchCandidate.matchLength", "+                    || length == betterMatchCandidate.matchLength", "+                        && matcher.start() < betterMatchCandidate.matchPosition) {", "+                betterMatchCandidate = new RuleMatchForImport(group, length, matcher.start());", "+            }", "+        }", "+        return betterMatchCandidate;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c564b7798468c0f4412607dcf07e17b3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "697895a2056ecb1fdde0ba1f21a10cb96fc91322", "commitAfterChange": "35de50c9405825eeb68357df2625b693d2748ed9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final boolean isNotStaticAndLastImport = !isStatic && lastImportStatic;", "+        final boolean isLastImportAndNonStatic = lastImportStatic && !isStatic;", "-            if (isNotStaticAndLastImport) {", "+            if (isLastImportAndNonStatic) {", "-            doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "+            doVisitToken(ident, isStatic, isLastImportAndNonStatic);", "-            doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "+            doVisitToken(ident, isStatic, isLastImportAndNonStatic);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "366832f5a44ca74e0522e7e40cc80012", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56883049de2f4d79f529bd5bad076a2e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void testLineBreakAfter() throws Exception", "signatureAfterChange": "      @Test     public void testLineBreakAfter() throws Exception", "diff": ["-            \"9:1: '{' should be on the previous line.\",", "-            \"12:5: '{' should be on the previous line.\",", "-            \"16:9: '{' should be on the previous line.\",", "-            \"18:13: '{' should be on the previous line.\",", "-            \"20:17: '{' should be on the previous line.\",", "-            \"26:22: '{' should have line break after.\",", "-            \"28:17: '{' should be on the previous line.\",", "-            \"35:33: '{' should have line break after.\",", "-            \"36:21: '{' should have line break after.\",", "-            \"39:29: '{' should have line break after.\",", "-            \"39:34: '{' should have line break after.\",", "-            \"45:37: '{' should have line break after.\",", "-            \"54:5: '{' should be on the previous line.\",", "-            \"56:27: '{' should have line break after.\",", "-            \"66:1: '{' should be on the previous line.\",", "+            \"9:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"12:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"16:9: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"18:13: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"20:17: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"26:22: \" + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, \"{\"),", "+            \"28:17: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"35:33: \" + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, \"{\"),", "+            \"36:21: \" + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, \"{\"),", "+            \"39:29: \" + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, \"{\"),", "+            \"39:34: \" + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, \"{\"),", "+            \"45:37: \" + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, \"{\"),", "+            \"54:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"56:27: \" + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, \"{\"),", "+            \"66:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea17045351c4c0a0fe9f870c8869062b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheckTest.java", "commitBeforeChange": "d8f8de2b53a6abc0f8ca011acbe6f18bf9ed4ca9", "commitAfterChange": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testIncorrect() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrect() throws Exception", "diff": ["-            \"7: <p> tag should be precede with empty line.\",", "-            \"8: <p> tag should be precede with empty line.\",", "-            \"14: <p> tag should be precede with empty line.\",", "-            \"23: <p> tag should be precede with empty line.\",", "-            \"32: <p> tag should be precede with empty line.\",", "-            \"32: Redundant <p> tag.\",", "-            \"33: <p> tag should be precede with empty line.\",", "-            \"34: <p> tag should be precede with empty line.\",", "-            \"35: <p> tag should be precede with empty line.\",", "-            \"39: <p> tag should be precede with empty line.\",", "-            \"45: Redundant <p> tag.\",", "-            \"50: <p> tag should be precede with empty line.\",", "-            \"51: <p> tag should be precede with empty line.\",", "-            \"61: Redundant <p> tag.\",", "-            \"62: Empty line should be followed by <p> tag on the next line.\",", "-            \"70: <p> tag should be precede with empty line.\",", "-            \"75: <p> tag should be precede with empty line.\",", "+            \"7: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"8: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"14: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"23: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"32: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"32: \" + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),", "+            \"33: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"34: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"35: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"39: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"45: \" + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),", "+            \"50: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"51: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"61: \" + getCheckMessage(MSG_REDUNDANT_PARAGRAPH),", "+            \"62: \" + getCheckMessage(MSG_TAG_AFTER),", "+            \"70: \" + getCheckMessage(MSG_LINE_BEFORE),", "+            \"75: \" + getCheckMessage(MSG_LINE_BEFORE),"]}]}
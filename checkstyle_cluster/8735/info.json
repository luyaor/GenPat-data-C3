{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "716456d0bbd1eafb6e939fca5ed2d3b1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4966c84a9d62e1ed4f332f1a9a90bd7d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        final int tokenType = aAST.getType();", "+        final int tokenType = ast.getType();", "-            final Counter counter = mCounters.pop();", "+            final Counter counter = counters.pop();", "-            if (count > mMethodMax) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"ncss.method\",", "-                        count, mMethodMax);", "+            if (count > methodMax) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"ncss.method\",", "+                        count, methodMax);", "-            final Counter counter = mCounters.pop();", "+            final Counter counter = counters.pop();", "-            if (count > mClassMax) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"ncss.class\",", "-                        count, mClassMax);", "+            if (count > classMax) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"ncss.class\",", "+                        count, classMax);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c03004d8f39af0bd858a84790ac721", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            mScopeStack.push(new HashMap<String, DetailAST>());", "+            scopeStack.push(new HashMap<String, DetailAST>());", "-            if (ScopeUtils.inInterfaceBlock(aAST)", "-                || inAbstractOrNativeMethod(aAST))", "+            if (ScopeUtils.inInterfaceBlock(ast)", "+                || inAbstractOrNativeMethod(ast))", "-            if ((aAST.getParent().getType() != TokenTypes.OBJBLOCK)", "-                && (aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE))", "+            if ((ast.getParent().getType() != TokenTypes.OBJBLOCK)", "+                && (ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE))", "-                insertVariable(aAST);", "+                insertVariable(ast);", "-            final int parentType = aAST.getParent().getType();", "+            final int parentType = ast.getParent().getType();", "-                // TODO: is there better way to check is aAST", "+                // TODO: is there better way to check is ast", "-                if (aAST.getParent().getFirstChild() == aAST) {", "-                    removeVariable(aAST);", "+                if (ast.getParent().getFirstChild() == ast) {", "+                    removeVariable(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d38d86ae420e177dd53f8601975e4ec9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      @Override     protected final void processAST(DetailAST aAST)", "signatureAfterChange": "      @Override     protected final void processAST(DetailAST ast)", "diff": ["-    protected final void processAST(DetailAST aAST)", "+    protected final void processAST(DetailAST ast)", "-        if ((aAST.getType() == TokenTypes.METHOD_DEF || aAST.getType() == TokenTypes.CTOR_DEF)", "-            && (getMethodsNumberOfLine(aAST) <= mMinLineCount)", "-            || hasAllowedAnnotations(aAST))", "+        if ((ast.getType() == TokenTypes.METHOD_DEF || ast.getType() == TokenTypes.CTOR_DEF)", "+            && (getMethodsNumberOfLine(ast) <= minLineCount)", "+            || hasAllowedAnnotations(ast))", "-        final Scope theScope = calculateScope(aAST);", "-        if (shouldCheck(aAST, theScope)) {", "+        final Scope theScope = calculateScope(ast);", "+        if (shouldCheck(ast, theScope)) {", "-            final TextBlock cmt = contents.getJavadocBefore(aAST.getLineNo());", "+            final TextBlock cmt = contents.getJavadocBefore(ast.getLineNo());", "-                if (!isMissingJavadocAllowed(aAST)) {", "-                    log(aAST, \"javadoc.missing\");", "+                if (!isMissingJavadocAllowed(ast)) {", "+                    log(ast, \"javadoc.missing\");", "-                checkComment(aAST, cmt);", "+                checkComment(ast, cmt);"]}]}
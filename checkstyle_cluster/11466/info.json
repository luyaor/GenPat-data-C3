{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8abd04005ca071f11cec06ed24168b5f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a77fbae68599e989bb6b5058abe7db8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java", "commitBeforeChange": "78e9ce870170ca3ef88fd78f8e0af0681c958eb3", "commitAfterChange": "ea4085cd15fefe1e70a495798187c425295c74b6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testFormat() throws Exception", "signatureAfterChange": "      public void testFormat() throws Exception", "diff": ["-        DefaultConfiguration checkConfig = createCheckConfig(IllegalTypeCheck.class);", "-        checkConfig.addAttribute(\"format\", \"^$\");", "+        mCheckConfig.addAttribute(\"format\", \"^$\");", "-        verify(checkConfig, getPath(\"coding\" + File.separator + \"InputIllegalType.java\"), expected);", "+        verify(mCheckConfig, getPath(\"coding\" + File.separator + \"InputIllegalType.java\"), expected);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c39a4e1fbfc787b115a9b980577e1b80", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java", "commitBeforeChange": "78e9ce870170ca3ef88fd78f8e0af0681c958eb3", "commitAfterChange": "ea4085cd15fefe1e70a495798187c425295c74b6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testIgnoreMethodNames() throws Exception", "signatureAfterChange": "      public void testIgnoreMethodNames() throws Exception", "diff": ["-        DefaultConfiguration checkConfig = createCheckConfig(IllegalTypeCheck.class);", "-        checkConfig.addAttribute(\"ignoredMethodNames\", \"table2\");", "+        mCheckConfig.addAttribute(\"ignoredMethodNames\", \"table2\");", "-        verify(checkConfig, getPath(\"coding\" + File.separator + \"InputIllegalType.java\"), expected);", "+        verify(mCheckConfig, getPath(\"coding\" + File.separator + \"InputIllegalType.java\"), expected);"]}]}
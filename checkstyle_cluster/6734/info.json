{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9b49bf76837c6e53ae9c0a39f70c3ab", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2075293c452db3eeb9647f6bd866193d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "4ebf621616e3c9ea2284e7109d19abbbe1a94efc", "commitAfterChange": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows,         boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "diff": ["-    private void checkThrowsTags(List aTags, List aThrows,", "-        boolean aReportExpectedTags)", "+    private void checkThrowsTags(List<JavadocTag> aTags,", "+            List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "-        final Set foundThrows = new HashSet(); //used for performance only", "-        final ListIterator tagIt = aTags.listIterator();", "+        // The foundThrows used for performance only", "+        final Set<String> foundThrows = new HashSet<String>();", "+        final ListIterator<JavadocTag> tagIt = aTags.listIterator();", "-            final JavadocTag tag = (JavadocTag) tagIt.next();", "+            final JavadocTag tag = tagIt.next();", "-            final ListIterator throwIt = aThrows.listIterator();", "+            final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();", "-                final ExceptionInfo ei = (ExceptionInfo) throwIt.next();", "+                final ExceptionInfo ei = throwIt.next();", "-            final ListIterator throwIt = aThrows.listIterator();", "+            final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();", "-                final ExceptionInfo ei = (ExceptionInfo) throwIt.next();", "+                final ExceptionInfo ei = throwIt.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3efd150fff6bf4a8bb6abd71a20a2c5e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java", "commitBeforeChange": "7c20c36cea276a2b9abb09e8b19eb5825e6a921a", "commitAfterChange": "262209477f39964a63103613f3e2c985da083371", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkBadComments(FileContents aContents)", "signatureAfterChange": "     private void checkBadComments(FileContents aContents)", "diff": ["-        final Map allComments = aContents.getCComments();", "-        final Iterator allIter = allComments.keySet().iterator();", "+        final Map<Integer, List<TextBlock>> allComments = aContents", "+                .getCComments();", "+        final Iterator<Integer> allIter = allComments.keySet().iterator();", "-            final Integer key = (Integer) allIter.next();", "-            final List lineComments = (List) allComments.get(key);", "-            final Iterator lineIter = lineComments.iterator();", "+            final Integer key = allIter.next();", "+            final List<TextBlock> lineComments = allComments.get(key);", "+            final Iterator<TextBlock> lineIter = lineComments.iterator();", "-                final String[] cmt = ((TextBlock) lineIter.next()).getText();", "+                final String[] cmt = (lineIter.next()).getText();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d83f6e6b2075eaf2ed791c5ae7571e7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     static String replaceProperties(             String aValue, PropertyResolver aProps, String aDefaultValue)         throws CheckstyleException", "signatureAfterChange": "     static String replaceProperties(             String aValue, PropertyResolver aProps, String aDefaultValue)         throws CheckstyleException", "diff": ["-        final List fragments = new ArrayList();", "-        final List propertyRefs = new ArrayList();", "+        final List<String> fragments = new ArrayList<String>();", "+        final List<String> propertyRefs = new ArrayList<String>();", "-        final Iterator i = fragments.iterator();", "-        final Iterator j = propertyRefs.iterator();", "+        final Iterator<String> i = fragments.iterator();", "+        final Iterator<String> j = propertyRefs.iterator();", "-            String fragment = (String) i.next();", "+            String fragment = i.next();", "-                final String propertyName = (String) j.next();", "+                final String propertyName = j.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af098b850fbf72039b0aee6cb76e30a6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "4ebf621616e3c9ea2284e7109d19abbbe1a94efc", "commitAfterChange": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkUnclosedTags(Stack aHtmlStack, String aToken)", "signatureAfterChange": "     private void checkUnclosedTags(Stack<HtmlTag> aHtmlStack, String aToken)", "diff": ["-    private void checkUnclosedTags(Stack aHtmlStack, String aToken)", "+    private void checkUnclosedTags(Stack<HtmlTag> aHtmlStack, String aToken)", "-        final Stack unclosedTags = new Stack();", "-        HtmlTag lastOpenTag = (HtmlTag) aHtmlStack.pop();", "+        final Stack<HtmlTag> unclosedTags = new Stack<HtmlTag>();", "+        HtmlTag lastOpenTag = aHtmlStack.pop();", "-                lastOpenTag = (HtmlTag) aHtmlStack.pop();", "+                lastOpenTag = aHtmlStack.pop();", "-                lastOpenTag = (HtmlTag) aHtmlStack.pop();", "+                lastOpenTag = aHtmlStack.pop();", "-            lastOpenTag = (HtmlTag) unclosedTags.get(i);", "+            lastOpenTag = unclosedTags.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d463e70cd8170388ec606aa554302e23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Class resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "signatureAfterChange": "     public Class<?> resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "diff": ["-    public Class resolve(String aName, String aCurrentClass)", "+    public Class<?> resolve(String aName, String aCurrentClass)", "-        Class clazz = resolveQualifiedName(aName);", "+        Class<?> clazz = resolveQualifiedName(aName);", "-        Iterator it = mImports.iterator();", "+        Iterator<String> it = mImports.iterator();", "-            final String imp = (String) it.next();", "+            final String imp = it.next();", "-            final String imp = (String) it.next();", "+            final String imp = it.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e37d71e7f659dd6cfe7f425ac05bdc8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "7c20c36cea276a2b9abb09e8b19eb5825e6a921a", "commitAfterChange": "262209477f39964a63103613f3e2c985da083371", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public boolean hasIntersectionWithComment(             int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public boolean hasIntersectionWithComment(int aStartLineNo,             int aStartColNo, int aEndLineNo, int aEndColNo)", "diff": ["-    public boolean hasIntersectionWithComment(", "-            int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)", "+    public boolean hasIntersectionWithComment(int aStartLineNo,", "+            int aStartColNo, int aEndLineNo, int aEndColNo)", "-        final Collection values = mCComments.values();", "+        final Collection<List<TextBlock>> values = mCComments.values();", "-        final Iterator it = values.iterator();", "+        final Iterator<List<TextBlock>> it = values.iterator();", "-            final List row = (List) it.next();", "-            final Iterator rowIterator = row.iterator();", "+            final List<TextBlock> row = it.next();", "+            final Iterator<TextBlock> rowIterator = row.iterator();", "-                final TextBlock comment = (TextBlock) rowIterator.next();", "-                if (comment.intersects(", "-                        aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))", "+                final TextBlock comment = rowIterator.next();", "+                if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,", "+                        aEndColNo))", "-            lineNumber++)", "+             lineNumber++)", "-            final TextBlock comment =", "-                (TextBlock) mCPlusPlusComments.get(new Integer(lineNumber));", "+            final TextBlock comment = mCPlusPlusComments", "+                    .get(new Integer(lineNumber));", "-                && comment.intersects(aStartLineNo, aStartColNo,", "-                                      aEndLineNo, aEndColNo))", "+                    && comment.intersects(aStartLineNo, aStartColNo,", "+                            aEndLineNo, aEndColNo))"]}]}
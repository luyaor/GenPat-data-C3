{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89eb9d01f777cb8dc42b65e9c5d8cd26", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "401de94220c2192dbd3b4c1e8ee39de2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "423ed9e469db620671459827b58c89025d8f6c66", "commitAfterChange": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static Entry<DetailAST, Integer> calculateDistanceBetweenScopes(             DetailAST ast, DetailAST variable)", "signatureAfterChange": "     private static Entry<DetailAST, Integer> calculateDistanceBetweenScopes(             DetailAST ast, DetailAST variable)", "diff": ["-                if (exprWithVariableUsage != null) {", "-                    variableUsageAst = exprWithVariableUsage;", "+                if (exprWithVariableUsage == null) {", "+                    variableUsageAst = blockWithVariableUsage;", "-                    variableUsageAst = blockWithVariableUsage;", "+                    variableUsageAst = exprWithVariableUsage;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "436b8c5e420228f3cb85a0175740f260", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "98c8a0db55496e84aa8af901db50fa952e9b1ec4", "commitAfterChange": "7f06106f4e41e1c250bb5bafccbf4f8d9a7909bc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     void verifyVariable(MyVariable aVar)", "signatureAfterChange": "     void verifyVariable(MyVariable aVar)", "diff": ["+            // Record the name of the variable for detection of unused", "+            Map typeVars = (Map) mTypeFieldsMap.get(mCurrentTypeName);", "+            if (typeVars == null) {", "+                typeVars = new HashMap();", "+                mTypeFieldsMap.put(mCurrentTypeName, typeVars);", "+            }", "+            typeVars.put(aVar.getText(), aVar);", "+"]}]}
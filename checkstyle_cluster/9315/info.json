{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cc73bd50c13955439e17c344b4fd0dd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fff5ed86cc5274f1c862f528c76669c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheck.java", "commitBeforeChange": "bb1db4938ccae0f7149461ea372398fb8a53f2a8", "commitAfterChange": "15b8debf99b3b0c600084fccde54d9562bd48b71", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "signatureAfterChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "diff": ["-        // Let's trye to load class.", "-        Class excClass = null;", "-", "-        if (!mAllowUnchecked || !mAllowSubclasses) {", "-            excClass = resolveClass(aExc.getText());", "-            if (excClass == null) {", "-                log(aExc.getLineNo(), aExc.getColumnNo(),", "-                    \"redundant.throws.classInfo\", aExc.getText());", "-            }", "-        }", "+        // Let's try to load class.", "+        ClassInfo newClassInfo = new ClassInfo(aExc);", "-            if (isUnchecked(excClass)) {", "+            if (isUnchecked(newClassInfo.getClazz())) {", "-                if (isSubclass(ci.getClazz(), excClass)) {", "+                if (isSubclass(ci.getClazz(), newClassInfo.getClazz())) {", "-                else if (isSubclass(excClass, ci.getClazz())) {", "+                else if (isSubclass(newClassInfo.getClazz(), ci.getClazz())) {", "-            aKnownExcs.add(new ClassInfo(aExc, excClass));", "+            aKnownExcs.add(newClassInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52f3facd83a52d3fcb1e186565954aa9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheck.java", "commitBeforeChange": "1c7341013d0e8a34498eb49ccdb4e91419f13280", "commitAfterChange": "cd89321522d9bf7fc10547e743fb8bbb4c993791", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "signatureAfterChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "diff": ["+        // Let's trye to load class.", "+        Class excClass = null;", "+", "+        if (!mAllowUnchecked || !mAllowSubclasses) {", "+            excClass = resolveClass(aExc.getText());", "+            if (excClass == null) {", "+                log(aExc.getLineNo(), aExc.getColumnNo(),", "+                    \"redundant.throws.classInfo\", aExc.getText());", "+            }", "+        }", "+", "-            if (isUnchecked(aExc)) {", "+            if (isUnchecked(excClass)) {", "-            final FullIdent fi = (FullIdent) known.next();", "+            final ClassInfo ci = (ClassInfo) known.next();", "+            final FullIdent fi = ci.getName();", "+", "-                if (isSubclass(fi, aExc)) {", "+                if (isSubclass(ci.getClazz(), excClass)) {", "-                else if (isSubclass(aExc, fi)) {", "+                else if (isSubclass(excClass, ci.getClazz())) {", "-            aKnownExcs.add(aExc);", "+            aKnownExcs.add(new ClassInfo(aExc, excClass));"]}]}
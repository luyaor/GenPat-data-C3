{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f1655d08d76b884d1cd8621f2ef7a63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6084b85638e6245688e71a89d8d14cda", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java", "commitBeforeChange": "78cec4f822cd966a1293ce0c743d4514517385dc", "commitAfterChange": "2cf54ade2182e29c413f23e2235a896247d7a2ad", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testLoadFromURL() throws Exception", "signatureAfterChange": "      @Test     public void testLoadFromURL() throws Exception", "diff": ["-        boolean online = isInternetReachable();", "+        final String[] urlCandidates = {", "+            \"http://checkstyle.sourceforge.net/files/suppressions_none.xml\",", "+            \"https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/site/resources/files/suppressions_none.xml\",", "+        };", "+        FilterSet actualFilterSet = null;", "-        Assume.assumeTrue(online);", "+        for (String url : urlCandidates) {", "+            actualFilterSet = loadFilterSet(url);", "-        FilterSet fc = null;", "-", "-        int attemptCount = 0;", "-        final int attemptLimit = 5;", "-        while (attemptCount <= attemptLimit) {", "-            try {", "-", "-                fc = SuppressionsLoader", "-                        .loadSuppressions(\"http://checkstyle.sourceforge.net/files/suppressions_none.xml\");", "+            if (actualFilterSet != null) {", "-", "-            }", "-            catch (CheckstyleException ex) {", "-                // for some reason Travis CI failed some times(unstable) on reading this file", "-                if (attemptCount < attemptLimit", "-                        && ex.getMessage().contains(\"Unable to read\")) {", "-                    attemptCount++;", "-                    // wait for bad/disconnection time to pass", "-                    Thread.sleep(1000);", "-                }", "-                else {", "-                    throw ex;", "-                }", "-", "-        final FilterSet fc2 = new FilterSet();", "-        assertEquals(fc, fc2);", "+        // Use Assume.assumeNotNull(actualFilterSet) instead of the if-condition", "+        // when https://github.com/jayway/powermock/issues/428 will be fixed", "+        if (actualFilterSet != null) {", "+            final FilterSet expectedFilterSet = new FilterSet();", "+            assertEquals(expectedFilterSet, actualFilterSet);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfe39debcd53a8e9632c8d6acd807d34", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "a34fe7f0897d4cb6153cb2ba2fa038d724607c58", "commitAfterChange": "e6638c3344a90ec1716feb1830790efe430a123a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        DetailAST targetAST = aAST;", "-        if (targetAST.getType() == TokenTypes.TYPECAST) {", "-            targetAST = targetAST.findFirstToken(TokenTypes.RPAREN);", "-        }", "-        final String line = getLine(aAST.getLineNo() - 1);", "-        final int after =", "-            targetAST.getColumnNo() + targetAST.getText().length();", "-", "-        if ((after >= line.length())", "-            || Character.isWhitespace(line.charAt(after)))", "+        DetailAST ast = aAST;", "+        if (aAST.getType() == TokenTypes.ARRAY_DECLARATOR", "+                 || aAST.getType() == TokenTypes.TYPECAST)", "-            boolean flag = !mAllowLineBreaks;", "-            for (int i = after + 1; !flag && (i < line.length()); i++) {", "-                if (!Character.isWhitespace(line.charAt(i))) {", "-                    flag = true;", "+            ast = getPreceded(aAST);", "+        }", "+", "+        final String line = getLine(aAST.getLineNo() - 1);", "+        final int after = getPositionAfter(ast);", "+", "+        if ((after >= line.length() || Character.isWhitespace(line.charAt(after)))", "+                 && hasRedundantWhitespace(line, after))", "+        {", "+            log(ast.getLineNo(), after,", "+                \"ws.followed\", ast.getText());", "+        }", "+    }", "-            if (flag) {", "-                log(targetAST.getLineNo(), after,", "-                    \"ws.followed\", targetAST.getText());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49a55a4d2800a8927a3b9c108c4ce82e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dd8c9477a5b2c7ef3b0f53b46b393b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "f010eb47869bae692609de487d6140373e02f3a3", "commitAfterChange": "907a19906f790ce8faea7aa74e12608538dca1b6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 5, "signatureBeforeChange": "         LexicalFrame findFrame(String aNameToFind)", "signatureAfterChange": "     private LexicalFrame findFrame(String aName)", "diff": ["+     */", "+    private LexicalFrame findFrame(String aName)", "+    {", "+        if (mCurrent != null) {", "+            return mCurrent.getIfContains(aName);", "+        }", "+        else {", "+            return null;", "+        }", "-         */", "-        LexicalFrame findFrame(String aNameToFind)", "-        {", "-            for (LexicalFrame thisFrame : mFrameList) {", "-                if (thisFrame.contains(aNameToFind)) {", "-                    return thisFrame;", "-                }", "-            }", "-            return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8037cca7ff7154b2404dfd6406c7786b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "e0471bb7f2840ebfa4adaa5fea697b4b3c31f782", "commitAfterChange": "1b3e900ee47bd289ddbf72e3fd69e8a15e51b20a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean isSamePackage(String className, int clsNameLen, int pkgNameLen,                                   String illegal, int illegalLen)", "signatureAfterChange": "     private boolean isSamePackage(String className, int clsNameLen, int pkgNameLen,                                   String illegal, int illegalLen)", "diff": ["-        if (pkgName != null", "-            && clsNameLen == illegalLen - pkgNameLen - 1", "-            && illegal.charAt(pkgNameLen) == '.'", "-            && illegal.endsWith(className)", "-            && illegal.startsWith(pkgName)) {", "-            return true;", "-        }", "-        return false;", "+        return pkgName != null", "+                && clsNameLen == illegalLen - pkgNameLen - 1", "+                && illegal.charAt(pkgNameLen) == '.'", "+                && illegal.endsWith(className)", "+                && illegal.startsWith(pkgName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d303142c153cb943a693d06ea92c18ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "commitBeforeChange": "423ed9e469db620671459827b58c89025d8f6c66", "commitAfterChange": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void startElement(final String namespaceURI,                              final String localName,                              final String qName,                              final Attributes attributes)         throws SAXException", "signatureAfterChange": "      @Override     public void startElement(final String namespaceURI,                              final String localName,                              final String qName,                              final Attributes attributes)         throws SAXException", "diff": ["-            if (pkg != null) {", "-                final boolean exactMatch =", "-                        attributes.getValue(\"exact-match\") != null;", "-                guard = new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);", "-            }", "-            else {", "+            if (pkg == null) {", "+            else {", "+                final boolean exactMatch =", "+                        attributes.getValue(\"exact-match\") != null;", "+                guard = new Guard(isAllow, isLocalOnly, pkg, exactMatch, regex);", "+            }"]}]}
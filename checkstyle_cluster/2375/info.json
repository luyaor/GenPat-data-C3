{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "782fe9e4abf082e52cc279faa79cd46d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c76035a5f3bc73b8e3c9a457cdff5c04", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java", "commitBeforeChange": "0ce872d7cc6b0b1564655b9e3119f72911f4dddd", "commitAfterChange": "ea9ff3965d9c657b5b7bd2d969e075f430635c47", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testNonExistingCacheFileDoesNotThrowException()", "signatureAfterChange": "      @Test     public void testNonExistingCacheFileDoesNotThrowException() throws Exception", "diff": ["-    public void testNonExistingCacheFileDoesNotThrowException() {", "+    public void testNonExistingCacheFileDoesNotThrowException() throws Exception {", "+        treeWalker.configure(new DefaultConfiguration(\"default config\"));", "-        treeWalker.destroy();", "+        treeWalker.finishLocalSetup();", "+        try {", "+            treeWalker.destroy();", "+            fail();", "+        }", "+        catch (IllegalStateException ex) {", "+            assertTrue(ex.getCause() instanceof IOException);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c86a757d371242ffecb18ceae544725a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java", "commitBeforeChange": "8f12d2b92568c8fca42dfbd26f3d1f0b17100a7b", "commitAfterChange": "050d1e55a819d639fe9116ec3ebd99902530c3f9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testContextualize1() throws CheckstyleException", "signatureAfterChange": "      @Test     public void testContextualize_ConversionException()", "diff": ["-    public void testContextualize1() throws CheckstyleException {", "-        context.add(\"val\", 123f);", "-        testBean.contextualize(context);", "+", "+    @Test", "+    public void testContextualize_ConversionException() {", "+        final TestBean testBean = new TestBean();", "+        DefaultContext context = new DefaultContext();", "+        context.add(\"intVal\", \"some string\");", "+        try {", "+            testBean.contextualize(context);", "+            fail();", "+        }", "+        catch (CheckstyleException ex) {", "+            assertTrue(ex.getCause() instanceof ConversionException);", "+            assertTrue(ex.getMessage().startsWith(\"illegal value \"));", "+        }", "+    }"]}]}
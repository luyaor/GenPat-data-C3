{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c18f0df312b9973e84faeccc348cd17", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19cf99534bf6fe563234dbb3d072b250", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "bd757c37dd4ba1384c761a98f31bdbbd22d1daf8", "commitAfterChange": "73ec35d35bcf970c588278cb18300dfdf814a704", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean isInHashCodeMethod(DetailAST aAST)", "signatureAfterChange": "     private boolean isInHashCodeMethod(DetailAST aAST)", "diff": ["-     */", "-    private boolean isInHashCodeMethod(DetailAST aAST)", "-    {", "-        // if not in a code block, can't be in hashCode()", "-        if (!ScopeUtils.inCodeBlock(aAST)) {", "-            return false;", "-        }", "-", "-        // find the method definition AST", "-        DetailAST methodDefAST = aAST.getParent();", "-        while (methodDefAST != null", "-                && methodDefAST.getType() != TokenTypes.METHOD_DEF)", "-        {", "-            methodDefAST = methodDefAST.getParent();", "-        }", "-", "-        if (methodDefAST == null) {", "-            return false;", "-        }", "-", "-        // chech for 'hashCode' name", "-        final DetailAST identAST =", "-                methodDefAST.findFirstToken(TokenTypes.IDENT);", "-        System.out.println(identAST);", "-        if (!\"hashCode\".equals(identAST.getText())) {", "-            return false;", "-        }", "-", "-        // check for no arguments", "-        final DetailAST paramAST =", "-                methodDefAST.findFirstToken(TokenTypes.PARAMETERS);", "-        if (paramAST.getChildCount() != 0) {", "-            return false;", "-        }", "-", "-        // we are in a 'public int hashCode()' method!", "-        return true;", "-    }", "+     */", "+    private boolean isInHashCodeMethod(DetailAST aAST)", "+    {", "+        // if not in a code block, can't be in hashCode()", "+        if (!ScopeUtils.inCodeBlock(aAST)) {", "+            return false;", "+        }", "+    ", "+        // find the method definition AST", "+        DetailAST methodDefAST = aAST.getParent();", "+        while ((null != methodDefAST)", "+                && (TokenTypes.METHOD_DEF != methodDefAST.getType()))", "+        {", "+            methodDefAST = methodDefAST.getParent();", "+        }", "+    ", "+        if (null == methodDefAST) {", "+            return false;", "+        }", "+    ", "+        // Check for 'hashCode' name.", "+        final DetailAST identAST =", "+            methodDefAST.findFirstToken(TokenTypes.IDENT);", "+        if (!\"hashCode\".equals(identAST.getText())) {", "+            return false;", "+        }", "+    ", "+        // Check for no arguments.", "+        final DetailAST paramAST =", "+            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);", "+        if (0 != paramAST.getChildCount()) {", "+            return false;", "+        }", "+    ", "+        // we are in a 'public int hashCode()' method! The compiler will ensure", "+        // the method returns an 'int' and is public.", "+        return true;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f30804d51e2f0b7cc7863ac42271877", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Comment.java", "commitBeforeChange": "342ae1315c775fa512a5278d901bbd4fb23fd7c1", "commitAfterChange": "4c1700ebe1041b5f3be839024ae553bd8983db91", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean intersects(int aStartLineNo, int aStartColNo,                               int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public boolean intersects(int aStartLineNo, int aStartColNo,                               int aEndLineNo, int aEndColNo)", "diff": ["-        return ((thisStart < inStart) && (inStart < thisEnd))", "-            || ((thisStart < inEnd) && (inEnd < thisEnd));", "+        return !((thisEnd < inStart) || (inEnd < thisStart));", "+    }"]}]}
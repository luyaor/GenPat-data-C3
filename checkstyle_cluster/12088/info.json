{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68e44d6bc17ff5fcdc939bf75c2d13fa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8be9655a452e21c98f8c9a2b54952cad", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "6125beffc437f970eae276b4a6542265c6547784", "commitAfterChange": "1ac7fc3f8fc856547085bcc88e17fd1f4bbe0ddd", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 3, "signatureBeforeChange": "         public ClassInfo(FullIdent aName, Class aClass)", "signatureAfterChange": "     public final void leaveToken(DetailAST aAST)", "diff": ["+    /** @see com.puppycrawl.tools.checkstyle.api.Check */", "+    public final void leaveToken(DetailAST aAST)", "+    {", "+        if (aAST.getType() == TokenTypes.CLASS_DEF) {", "+            int dotIdx = mCurrentClass.lastIndexOf(\".\");", "+            if (dotIdx == -1) {", "+                mCurrentClass = \"\";", "+            }", "+            else {", "+                mCurrentClass = mCurrentClass.substring(0, dotIdx);", "+            }", "-        public ClassInfo(FullIdent aName, Class aClass)", "-        {", "-            if (aName == null && aClass == null) {", "-                throw new NullPointerException(", "-                    \"ClassInfo's name or class should be non-null\");", "-            }", "-            mName = aName;", "-            setClazz(aClass);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4bec039b533c2857292682916f4675c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "7a9a4c2045552032b51a9ad7bd821b64ce3197f6", "commitAfterChange": "ff08629ef8d0623ef77edd32877da1992cf0ea18", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 40, "signatureBeforeChange": "     public void setMethodPattern(String aPat)", "signatureAfterChange": "     public void setMethodPattern(final String aPat)", "diff": ["-    public void setMethodPattern(String aPat)", "+    public void setMethodPattern(final String aPat)", "-        try {", "-            mConfig.setMethodPat(aPat);", "-        }", "-        catch (RESyntaxException ex) {", "-            throw new BuildException(\"Unable to parse methodPattern - \", ex);", "-        }", "+        mOptionMemory.add(new Runnable()", "+            {", "+                public void run()", "+                {", "+                    try {", "+                        mConfig.setMethodPat(aPat);", "+                    }", "+                    catch (RESyntaxException ex) {", "+                        throw new BuildException(", "+                            \"Unable to parse methodPattern - \", ex);", "+                    }", "+                }", "+            });"]}]}
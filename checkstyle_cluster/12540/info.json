{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef405cc6c772782ba7785e02bc3d7905", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21ba08b651c7fde258ba32ced9c45217", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "26d7dd555a9d64b0682e1fb08de7a181cdb97b12", "commitAfterChange": "43cdf3d62b35408cf11257af0c33c49a47c9daf9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isIgnoredSetterParam(DetailAST aAST, String aName)", "signatureAfterChange": "     private boolean isIgnoredSetterParam(DetailAST aAST, String aName)", "diff": ["-        if (!(aAST.getType() == TokenTypes.PARAMETER_DEF)", "+        if (aAST.getType() != TokenTypes.PARAMETER_DEF", "-        //property setter name?", "-        final String expectedName =", "-            \"set\" + aName.substring(0, 1).toUpperCase() + aName.substring(1);", "-        final DetailAST methodNameAST =", "-            methodAST.findFirstToken(TokenTypes.IDENT);", "-        final String methodName = methodNameAST.getText();", "-        if (!methodName.equals(expectedName)) {", "-            return false;", "-        }", "-        return typeAST.branchContains(TokenTypes.LITERAL_VOID);", "+        if (!typeAST.branchContains(TokenTypes.LITERAL_VOID)) {", "+            return false;", "+        }", "+", "+        //property setter name?", "+        final String methodName =", "+                methodAST.findFirstToken(TokenTypes.IDENT).getText();", "+        final String expectedName = \"set\" + capitalize(aName);", "+        return methodName.equals(expectedName);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23f836c0e80d0600c67bcb7e00e7fc53", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "804e50ee31b1653a27eab9bb5370b5af9c486eb1", "commitAfterChange": "5fb27c0fe21ed36f057767862e96017d46a72686", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private String getCommentText(String[] aComments)", "signatureAfterChange": "     private String getCommentText(String[] aComments)", "diff": ["-                // Look for Javadoc tag that's neither a @link nor a", "-                // @inheritDoc since they can appear", "-                // within the comment text.", "+                // Look for Javadoc tag that's not an inline tag", "+                // it can appear within the comment text.", "+                // Inline tags are denoted by curly braces: {@tag}", "-                    && !line.regionMatches(ndx + 1, \"link\", 0, \"link\".length())", "-                    && !line.regionMatches(", "-                        ndx + 1,", "-                        \"inheritDoc\",", "-                        0,", "-                        \"inheritDoc\".length()))", "+                    && (ndx == 0 || line.charAt(ndx - 1) != '{'))"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bbff94b142b44e57bf2aa25b4952dbd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1211e0577b5af6a21c168baba4e4899c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "commitBeforeChange": "3c0c72f96477afb542ee37b3336f4b7b7613ff29", "commitAfterChange": "6f0a3dee5efc6217383f9bfd6d7a3a116b1c885b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void visitClassDef(DetailAST aAST)", "signatureAfterChange": "     private void visitClassDef(DetailAST aAST)", "diff": ["-            if (mCheckName && !isMatchingClassName(className)) {", "+            if (!mIgnoreName && !isMatchingClassName(className)) {", "-        else {", "-            // if class without abstract modifier", "-            if (mCheckAbstractModifier", "-                    && isMatchingClassName(className))", "-            {", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "-                        \"no.abstract.class.modifier\", className);", "-            }", "+        else if (!mIgnoreModifier && isMatchingClassName(className)) {", "+            log(aAST.getLineNo(), aAST.getColumnNo(),", "+                \"no.abstract.class.modifier\", className);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5f7e681520a19aa3814a59acd386258", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "commitBeforeChange": "b9cfa0969468d97aade2ec022dfff34dc33e7b1a", "commitAfterChange": "9d11682be9f541bcc21cfc533ede5e0b5a7862f4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void visitClassDef(DetailAST aAST)", "signatureAfterChange": "     private void visitClassDef(DetailAST aAST)", "diff": ["+        final String className =", "+            aAST.findFirstToken(TokenTypes.IDENT).getText();", "-            final String className =", "-                aAST.findFirstToken(TokenTypes.IDENT).getText();", "-", "-            if (!isMatchingClassName(className)) {", "+            // if class has abstract modifier", "+            if (mCheckName && !isMatchingClassName(className)) {", "+        else {", "+            // if class without abstract modifier", "+            if (mCheckAbstractModifier", "+                    && isMatchingClassName(className))", "+            {", "+                log(aAST.getLineNo(), aAST.getColumnNo(),", "+                        \"no.abstract.class.modifier\", className);", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8de85939949b9e83939885c2edab7cc2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24a6f7f8671a9e102595c7a1b325c39b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "5e7932be70b20345b77f6fc2adb8423f2d6a091c", "commitAfterChange": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected final void processAST(DetailAST aAST)", "signatureAfterChange": "     protected final void processAST(DetailAST aAST)", "diff": ["-        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-        final Scope targetScope =", "-            ScopeUtils.inInterfaceBlock(aAST)", "-                ? Scope.PUBLIC", "-                : declaredScope;", "+        if (shouldCheck(aAST)) {", "+            final FileContents contents = getFileContents();", "+            final TextBlock cmt = contents.getJavadocBefore(aAST.getLineNo());", "-        if (targetScope.isIn(mScope)) {", "-            final Scope surroundingScope =", "-                ScopeUtils.getSurroundingScope(aAST);", "-", "-            if (surroundingScope.isIn(mScope)) {", "-                final FileContents contents = getFileContents();", "-                final TextBlock cmt =", "-                    contents.getJavadocBefore(aAST.getLineNo());", "-", "-                if (cmt == null) {", "-                    log(aAST, \"javadoc.missing\");", "-                }", "-                else {", "-                    checkComment(aAST, cmt);", "-                }", "+            if (cmt == null) {", "+                log(aAST, \"javadoc.missing\");", "+            }", "+            else {", "+                checkComment(aAST, cmt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69cea8b4b27ccbb967c4fd2ab3e19f0c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java", "commitBeforeChange": "5e7932be70b20345b77f6fc2adb8423f2d6a091c", "commitAfterChange": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (!ScopeUtils.inCodeBlock(aAST)) {", "-            final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-            final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-            final Scope variableScope =", "-                ScopeUtils.inInterfaceBlock(aAST)", "-                    ? Scope.PUBLIC", "-                    : declaredScope;", "+        if (shouldCheck(aAST)) {", "+            final FileContents contents = getFileContents();", "+            final TextBlock cmt =", "+                contents.getJavadocBefore(aAST.getLineNo());", "-            if (variableScope.isIn(mScope)) {", "-                final Scope surroundingScope =", "-                    ScopeUtils.getSurroundingScope(aAST);", "-", "-                if (surroundingScope.isIn(mScope)) {", "-                    final FileContents contents = getFileContents();", "-                    final TextBlock cmt =", "-                        contents.getJavadocBefore(aAST.getLineNo());", "-", "-                    if (cmt == null) {", "-                        log(aAST, \"javadoc.missing\");", "-                    }", "-                }", "+            if (cmt == null) {", "+                log(aAST, \"javadoc.missing\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd361c0ee2647e9ce139acb4bd9233e8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "5e7932be70b20345b77f6fc2adb8423f2d6a091c", "commitAfterChange": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (!ScopeUtils.inCodeBlock(aAST)) {", "-            final DetailAST mods =", "-                aAST.findFirstToken(TokenTypes.MODIFIERS);", "-            final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-            final Scope variableScope =", "-                ScopeUtils.inInterfaceBlock(aAST)", "-                    ? Scope.PUBLIC", "-                    : declaredScope;", "+        if (shouldCheck(aAST)) {", "+            final FileContents contents = getFileContents();", "+            final TextBlock cmt =", "+                contents.getJavadocBefore(aAST.getLineNo());", "-            if (variableScope.isIn(mScope)) {", "-                final Scope surroundingScope =", "-                    ScopeUtils.getSurroundingScope(aAST);", "-", "-                if ((surroundingScope == null)", "-                    || surroundingScope.isIn(mScope))", "-                {", "-                    final FileContents contents = getFileContents();", "-                    final TextBlock cmt =", "-                        contents.getJavadocBefore(aAST.getLineNo());", "-", "-                    checkComment(cmt);", "-                }", "-            }", "+            checkComment(cmt);", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27c3ad6f7b0415e2cc9cece29e222bdd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10f5a94449a6f7d6eb8b518d2ff092ad", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "730ade67d5f3f286c1004ce9a772fd4bc3bc9307", "commitAfterChange": "f8459eb6742402c5c33f7b80e4c5844998a258ac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)             throws SAXException", "signatureAfterChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)             throws SAXException", "diff": ["-            if (name == null) {", "-                throw new SAXException(\"missing config name\");", "-            }", "-                DefaultConfiguration top =", "+                final DefaultConfiguration top =", "-", "-            String value = aAtts.getValue(\"value\");", "-", "-            // expand properties", "-            if (mOverrideProps != null) {", "-                try {", "-                    value = Utils.replaceProperties(value, mOverrideProps);", "-                }", "-                catch (CheckstyleException ex) {", "-                    throw new SAXException(ex.getMessage());", "-                }", "+            final String value;", "+            try {", "+                value = Utils.replaceProperties(aAtts.getValue(\"value\"),", "+                                                mOverrideProps);", "+            }", "+            catch (CheckstyleException ex) {", "+                throw new SAXException(ex.getMessage());", "-            if (!mConfigStack.isEmpty()) {", "-                final DefaultConfiguration top =", "-                        (DefaultConfiguration) mConfigStack.peek();", "-                top.addAttribute(name, value);", "-            }", "-            else {", "-                throw new SAXException(", "-                            \"property \" + name + \"has no config parent\");", "-            }", "+            final DefaultConfiguration top =", "+                (DefaultConfiguration) mConfigStack.peek();", "+            top.addAttribute(name, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1f2dc1a397573a264232af4cda1da7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "e03dd7a0a03f9cf91e466ebee911ef0fa10130a4", "commitAfterChange": "9eb27f99a33fb67020c697bc2e4c5643aee0ae03", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            final DetailAST definer = getDefiner(aAST);", "-            final int type = definer.getType();", "-            if ((type == TokenTypes.CLASS_DEF)", "-                || (type == TokenTypes.LITERAL_NEW))", "-            {", "+            if (isEqualsMethod(aAST) && !ScopeUtils.inInterfaceBlock(aAST)) {", "+                final DetailAST definer = getDefiner(aAST);", "-                final ClassAttributes attrs =", "-                        (ClassAttributes) mClassStack.getLast();", "+                ClassAttributes attrs =", "+                    (ClassAttributes) mClassStack.getLast();", "-                    mClassStack.add(new ClassAttributes(definer));", "+                    final ClassAttributes definerAttrs =", "+                        new ClassAttributes(definer);", "+                    mClassStack.add(definerAttrs);", "+                    attrs = definerAttrs;", "-                if (!ScopeUtils.inInterfaceBlock(aAST)", "-                    && isEqualsMethod(aAST))", "-                {", "-                    if (hasObjectParameter(aAST)) {", "-                        attrs.setHasEqualsObject();", "-                    }", "-                    else {", "-                        attrs.addEqualsNode(aAST);", "-                    }", "+                if (hasObjectParameter(aAST)) {", "+                    attrs.setHasEqualsObject();", "+                }", "+                else {", "+                    attrs.addEqualsNode(aAST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c466da6d06410cfedd15b327506b4c3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "9309a784711a3510b8e8de08b3543fcc4cdb4813", "commitAfterChange": "e03dd7a0a03f9cf91e466ebee911ef0fa10130a4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (aAST.getType() == TokenTypes.CLASS_DEF) {", "-            //push", "-            mClassStack.add(new ClassAttributes());", "-        }", "-        else {", "-            // METHOD_DEF", "-            if (!ScopeUtils.inInterfaceBlock(aAST) && isEqualsMethod(aAST)) {", "-                final ClassAttributes attrs =", "-                    (ClassAttributes) mClassStack.getLast();", "-                if (hasObjectParameter(aAST)) {", "-                    attrs.setHasEqualsObject();", "+        if (aAST.getType() == TokenTypes.METHOD_DEF) {", "+            final DetailAST definer = getDefiner(aAST);", "+            final int type = definer.getType();", "+            if ((type == TokenTypes.CLASS_DEF)", "+                || (type == TokenTypes.LITERAL_NEW))", "+            {", "+                if (mClassStack.isEmpty()) {", "+                    mClassStack.add(new ClassAttributes(definer));", "-                else {", "-                    attrs.addEqualsNode(aAST);", "+                final ClassAttributes attrs =", "+                        (ClassAttributes) mClassStack.getLast();", "+                final DetailAST currentRoot = attrs.getRootAST();", "+                if (definer != currentRoot) {", "+                    mClassStack.add(new ClassAttributes(definer));", "+                }", "+                if (!ScopeUtils.inInterfaceBlock(aAST)", "+                    && isEqualsMethod(aAST))", "+                {", "+                    if (hasObjectParameter(aAST)) {", "+                        attrs.setHasEqualsObject();", "+                    }", "+                    else {", "+                        attrs.addEqualsNode(aAST);", "+                    }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d05bc80e007650656315ead01e2e532", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "9309a784711a3510b8e8de08b3543fcc4cdb4813", "commitAfterChange": "e03dd7a0a03f9cf91e466ebee911ef0fa10130a4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "     public void leaveToken(DetailAST aAST)", "diff": ["-        if (aAST.getType() == TokenTypes.CLASS_DEF) {", "-            //pop and report equals errors", "-            final ClassAttributes attrs =", "-                (ClassAttributes) mClassStack.removeLast();", "-            final Set equalsNodes = attrs.getEqualsNodes();", "-            final Iterator it = equalsNodes.iterator();", "-            while (it.hasNext()) {", "-                final DetailAST equalsAST = (DetailAST) it.next();", "-                final DetailAST nameNode =", "-                    equalsAST.findFirstToken(TokenTypes.IDENT);", "-                log(nameNode.getLineNo(), nameNode.getColumnNo(),", "-                        \"covariant.equals\");", "+        final int type = aAST.getType();", "+        if ((type == TokenTypes.LITERAL_NEW)", "+            || (type == TokenTypes.CLASS_DEF))", "+        {", "+            // pop class stack", "+            if (!mClassStack.isEmpty()) {", "+                final ClassAttributes attrs =", "+                    (ClassAttributes) mClassStack.getLast();", "+                if (attrs.getRootAST() == aAST) {", "+                    mClassStack.removeLast();", "+                    final Set equalsNodes = attrs.getEqualsNodes();", "+                    final Iterator it = equalsNodes.iterator();", "+                    while (it.hasNext()) {", "+                        final DetailAST equalsAST = (DetailAST) it.next();", "+                        final DetailAST nameNode =", "+                            equalsAST.findFirstToken(TokenTypes.IDENT);", "+                        log(nameNode.getLineNo(), nameNode.getColumnNo(),", "+                            \"covariant.equals\");", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b688ff3303369919481b1954d0be4a42", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "ee987808d13bef803ad1e7cfe7d5c8931a40eedc", "commitAfterChange": "b1123e96e452b41c5fb22de20bb7a99d376d0380", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-            try {", "-                final Properties props = createOverridingProperties();", "-                final Configuration config =", "-                    ConfigurationLoader.loadConfiguration(", "-                        mConfigLocation, new PropertiesExpander(props));", "-", "-                final DefaultContext context = new DefaultContext();", "-                final ClassLoader loader =", "-                    new AntClassLoader(getProject(), mClasspath);", "-                context.add(\"classloader\", loader);", "-", "-                c = new Checker();", "-", "-                //load the set of package names", "-                if (mPackageNamesFile != null) {", "-                    final ModuleFactory moduleFactory =", "-                        PackageNamesLoader.loadModuleFactory(", "-                            mPackageNamesFile.getAbsolutePath());", "-                    c.setModuleFactory(moduleFactory);", "-                }", "-                c.contextualize(context);", "-                c.configure(config);", "-", "-                // setup the listeners", "-                final AuditListener[] listeners = getListeners();", "-                for (int i = 0; i < listeners.length; i++) {", "-                    c.addListener(listeners[i]);", "-                }", "-            }", "-            catch (Exception e) {", "-                throw new BuildException(", "-                    \"Unable to create a Checker: \" + e.getMessage(), e);", "-            }", "+            c = createChecker();"]}]}
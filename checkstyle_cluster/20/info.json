{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "275aaceb87440be7ac13be3b117fc016", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ca57fd963f92a415bc4e301085b0260", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "59aa66c3cc43db0a7cd8bb0ea3a39b6f4339fe88", "commitAfterChange": "a24df47cafeab03fd65cf72b460aad3d2fafce3d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void processRec(DetailAST aAST)", "signatureAfterChange": "     private static DetailAST appendHiddenCommentNodes(DetailAST aRoot)", "diff": ["-    private void processRec(DetailAST aAST)", "-        if (aAST == null) {", "-            return;", "-        notifyVisit(aAST);", "-", "-        final DetailAST child = aAST.getFirstChild();", "-        if (child != null) {", "-            processRec(child);", "-        }", "-", "-        notifyLeave(aAST);", "-", "-        final DetailAST sibling = aAST.getNextSibling();", "-        if (sibling != null) {", "-            processRec(sibling);", "-        }", "-    }", "+     */", "+    private static DetailAST appendHiddenCommentNodes(DetailAST aRoot)", "+    {", "+        DetailAST result = aRoot;", "+        DetailAST curNode = aRoot;", "+        DetailAST lastNode = aRoot;", "+", "+        while (curNode != null) {", "+            if (isPositionGreater(curNode, lastNode)) {", "+                lastNode = curNode;", "+            }", "+", "+            CommonHiddenStreamToken tokenBefore = curNode.getHiddenBefore();", "+            DetailAST currentSibling = curNode;", "+            while (tokenBefore != null) { // threat multiple comments", "+                final DetailAST newCommentNode =", "+                         createCommentAstFromToken(tokenBefore);", "+", "+                currentSibling.addPreviousSibling(newCommentNode);", "+", "+                if (currentSibling == result) {", "+                    result = newCommentNode;", "+                }", "+", "+                currentSibling = newCommentNode;", "+                tokenBefore = tokenBefore.getHiddenBefore();", "+            }", "+", "+            DetailAST toVisit = curNode.getFirstChild();", "+            while ((curNode != null) && (toVisit == null)) {", "+                toVisit = curNode.getNextSibling();", "+                if (toVisit == null) {", "+                    curNode = curNode.getParent();", "+                }", "+            }", "+            curNode = toVisit;", "+        }", "+        if (lastNode != null) {", "+            CommonHiddenStreamToken tokenAfter = lastNode.getHiddenAfter();", "+            DetailAST currentSibling = lastNode;", "+            while (tokenAfter != null) {", "+                final DetailAST newCommentNode =", "+                        createCommentAstFromToken(tokenAfter);", "+", "+                currentSibling.addNextSibling(newCommentNode);", "+", "+                currentSibling = newCommentNode;", "+                tokenAfter = tokenAfter.getHiddenAfter();", "+            }", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd9c6c3776119ada9795c5ab8ceb957b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static DetailAST getAnnotation(final DetailAST aAST,         String aAnnotation)", "signatureAfterChange": "     public static DetailAST getAnnotation(final DetailAST ast,         String annotation)", "diff": ["-    public static DetailAST getAnnotation(final DetailAST aAST,", "-        String aAnnotation)", "+    public static DetailAST getAnnotation(final DetailAST ast,", "+        String annotation)", "-        if (aAST == null) {", "-            throw new NullPointerException(\"the aAST is null\");", "+        if (ast == null) {", "+            throw new NullPointerException(\"the ast is null\");", "-        if (aAnnotation == null) {", "-            throw new NullPointerException(\"the aAnnotation is null\");", "+        if (annotation == null) {", "+            throw new NullPointerException(\"the annotation is null\");", "-        if (aAnnotation.trim().length() == 0) {", "-            throw new IllegalArgumentException(\"the aAnnotation\"", "+        if (annotation.trim().length() == 0) {", "+            throw new IllegalArgumentException(\"the annotation\"", "-        final DetailAST holder = AnnotationUtility.getAnnotationHolder(aAST);", "+        final DetailAST holder = AnnotationUtility.getAnnotationHolder(ast);", "-                final String aName =", "+                final String name =", "-                if (aAnnotation.equals(aName)) {", "+                if (annotation.equals(name)) {"]}]}
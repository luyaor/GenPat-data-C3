{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30d87a030aac134c7fbc93232e542282", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39d1dd46fdd5847d11dd5aab98c5d393", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean hasRedundantWhitespace(String line, int after)", "signatureAfterChange": "     private static DetailAST getIdentLastToken(DetailAST ast)", "diff": ["+     */", "+    private static DetailAST getIdentLastToken(DetailAST ast) {", "+        // single identifier token as a name is the most common case", "+        DetailAST result = ast.findFirstToken(TokenTypes.IDENT);", "+        if (result == null) {", "+            final DetailAST dot = ast.findFirstToken(TokenTypes.DOT);", "+            // method call case", "+            if (dot == null) {", "+                final DetailAST methodCall = ast.findFirstToken(TokenTypes.METHOD_CALL);", "+                if (methodCall != null) {", "+                    result = methodCall.findFirstToken(TokenTypes.RPAREN);", "+                }", "+            }", "+            // qualified name case", "+            else {", "+                if (dot.findFirstToken(TokenTypes.DOT) == null) {", "+                    result = dot.getFirstChild().getNextSibling();", "+                    result = dot.findFirstToken(TokenTypes.IDENT);", "-     */", "-    private boolean hasRedundantWhitespace(String line, int after) {", "-        boolean result = !allowLineBreaks;", "-        for (int i = after + 1; !result && i < line.length(); i++) {", "-            if (!Character.isWhitespace(line.charAt(i))) {", "-                result = true;", "-            }", "-        }", "-        return result;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9deb27ca5f2026dfe1102fddb1aebf23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            startToken = skipAnnotationOnlyLines(aAST);", "-            brace = aAST.findFirstToken(TokenTypes.SLIST);", "+            startToken = skipAnnotationOnlyLines(ast);", "+            brace = ast.findFirstToken(TokenTypes.SLIST);", "-            startToken = skipAnnotationOnlyLines(aAST);", "-            final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);", "+            startToken = skipAnnotationOnlyLines(ast);", "+            final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);", "-            startToken = aAST;", "-            brace = aAST.findFirstToken(TokenTypes.SLIST);", "+            startToken = ast;", "+            brace = ast.findFirstToken(TokenTypes.SLIST);", "-            startToken = aAST;", "-            final DetailAST candidate = aAST.getFirstChild();", "+            startToken = ast;", "+            final DetailAST candidate = ast.getFirstChild();", "-            startToken = aAST;", "-            brace = aAST.findFirstToken(TokenTypes.LCURLY);", "+            startToken = ast;", "+            brace = ast.findFirstToken(TokenTypes.LCURLY);"]}]}
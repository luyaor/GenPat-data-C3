{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5af8c72162b322b5914d215d71ecbe2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171bace79c0ce630c1e727d21f9725f9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "7347cc361b9251beb9f13acfbcb966f887925da5", "commitAfterChange": "661a9b0ddb10922458082573d79e0791ba6f38c2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void checkChildren(DetailAST aParent, int[] aTokenTypes,         int aStartLevel,         boolean aFirstLineMatches, boolean aAllowNesting)", "signatureAfterChange": "     protected final void checkChildren(DetailAST aParent, int[] aTokenTypes,         int aStartLevel,         boolean aFirstLineMatches, boolean aAllowNesting)", "diff": ["-     */", "-    protected void checkChildren(DetailAST aParent, int[] aTokenTypes,", "-        int aStartLevel,", "-        boolean aFirstLineMatches, boolean aAllowNesting)", "-    {", "-        Arrays.sort(aTokenTypes);", "-        for (DetailAST child = (DetailAST) aParent.getFirstChild();", "-                child != null;", "-                child = (DetailAST) child.getNextSibling())", "-        {", "-            if (Arrays.binarySearch(aTokenTypes, child.getType()) >= 0) {", "-                checkExpressionSubtree(child, aStartLevel,", "-                    aFirstLineMatches, aAllowNesting);", "-            }", "-        }", "-    }", "+     */", "+    protected final void checkChildren(DetailAST aParent, int[] aTokenTypes,", "+        int aStartLevel,", "+        boolean aFirstLineMatches, boolean aAllowNesting)", "+    {", "+        Arrays.sort(aTokenTypes);", "+        for (DetailAST child = (DetailAST) aParent.getFirstChild();", "+                child != null;", "+                child = (DetailAST) child.getNextSibling())", "+        {", "+            if (Arrays.binarySearch(aTokenTypes, child.getType()) >= 0) {", "+                checkExpressionSubtree(child, aStartLevel,", "+                    aFirstLineMatches, aAllowNesting);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec7d2cef5761d200195e4a8f2b8d73f8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected final void checkChildren(DetailAST aParent,                                        int[] aTokenTypes,                                        IndentLevel aStartLevel,                                        boolean aFirstLineMatches,                                        boolean aAllowNesting)", "signatureAfterChange": "     protected final void checkChildren(DetailAST parent,                                        int[] tokenTypes,                                        IndentLevel startLevel,                                        boolean firstLineMatches,                                        boolean allowNesting)", "diff": ["-    protected final void checkChildren(DetailAST aParent,", "-                                       int[] aTokenTypes,", "-                                       IndentLevel aStartLevel,", "-                                       boolean aFirstLineMatches,", "-                                       boolean aAllowNesting)", "+    protected final void checkChildren(DetailAST parent,", "+                                       int[] tokenTypes,", "+                                       IndentLevel startLevel,", "+                                       boolean firstLineMatches,", "+                                       boolean allowNesting)", "-        Arrays.sort(aTokenTypes);", "-        for (DetailAST child = aParent.getFirstChild();", "+        Arrays.sort(tokenTypes);", "+        for (DetailAST child = parent.getFirstChild();", "-            if (Arrays.binarySearch(aTokenTypes, child.getType()) >= 0) {", "-                checkExpressionSubtree(child, aStartLevel,", "-                    aFirstLineMatches, aAllowNesting);", "+            if (Arrays.binarySearch(tokenTypes, child.getType()) >= 0) {", "+                checkExpressionSubtree(child, startLevel,", "+                    firstLineMatches, allowNesting);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b75070593ff2c21dd0f9a82f9c55e560", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af098b850fbf72039b0aee6cb76e30a6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "4ebf621616e3c9ea2284e7109d19abbbe1a94efc", "commitAfterChange": "85a9c1f13f06baf70c00e62d8bb91507aeb3a72d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkUnclosedTags(Stack aHtmlStack, String aToken)", "signatureAfterChange": "     private void checkUnclosedTags(Stack<HtmlTag> aHtmlStack, String aToken)", "diff": ["-    private void checkUnclosedTags(Stack aHtmlStack, String aToken)", "+    private void checkUnclosedTags(Stack<HtmlTag> aHtmlStack, String aToken)", "-        final Stack unclosedTags = new Stack();", "-        HtmlTag lastOpenTag = (HtmlTag) aHtmlStack.pop();", "+        final Stack<HtmlTag> unclosedTags = new Stack<HtmlTag>();", "+        HtmlTag lastOpenTag = aHtmlStack.pop();", "-                lastOpenTag = (HtmlTag) aHtmlStack.pop();", "+                lastOpenTag = aHtmlStack.pop();", "-                lastOpenTag = (HtmlTag) aHtmlStack.pop();", "+                lastOpenTag = aHtmlStack.pop();", "-            lastOpenTag = (HtmlTag) unclosedTags.get(i);", "+            lastOpenTag = unclosedTags.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e37d71e7f659dd6cfe7f425ac05bdc8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "7c20c36cea276a2b9abb09e8b19eb5825e6a921a", "commitAfterChange": "262209477f39964a63103613f3e2c985da083371", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public boolean hasIntersectionWithComment(             int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public boolean hasIntersectionWithComment(int aStartLineNo,             int aStartColNo, int aEndLineNo, int aEndColNo)", "diff": ["-    public boolean hasIntersectionWithComment(", "-            int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)", "+    public boolean hasIntersectionWithComment(int aStartLineNo,", "+            int aStartColNo, int aEndLineNo, int aEndColNo)", "-        final Collection values = mCComments.values();", "+        final Collection<List<TextBlock>> values = mCComments.values();", "-        final Iterator it = values.iterator();", "+        final Iterator<List<TextBlock>> it = values.iterator();", "-            final List row = (List) it.next();", "-            final Iterator rowIterator = row.iterator();", "+            final List<TextBlock> row = it.next();", "+            final Iterator<TextBlock> rowIterator = row.iterator();", "-                final TextBlock comment = (TextBlock) rowIterator.next();", "-                if (comment.intersects(", "-                        aStartLineNo, aStartColNo, aEndLineNo, aEndColNo))", "+                final TextBlock comment = rowIterator.next();", "+                if (comment.intersects(aStartLineNo, aStartColNo, aEndLineNo,", "+                        aEndColNo))", "-            lineNumber++)", "+             lineNumber++)", "-            final TextBlock comment =", "-                (TextBlock) mCPlusPlusComments.get(new Integer(lineNumber));", "+            final TextBlock comment = mCPlusPlusComments", "+                    .get(new Integer(lineNumber));", "-                && comment.intersects(aStartLineNo, aStartColNo,", "-                                      aEndLineNo, aEndColNo))", "+                    && comment.intersects(aStartLineNo, aStartColNo,", "+                            aEndLineNo, aEndColNo))"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55819cb13a39944f5970975798ae80fb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0113f8103e452f557f8aaf7fd100d96e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private static boolean isCommentConsistent(String comment)", "signatureAfterChange": "      private static boolean isCommentConsistent(String comment)", "diff": ["-        Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "+        final Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "-        Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "+        final Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "-        Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);", "+        final Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0171c6a221198c95b88c9f61827689b9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkType()", "signatureAfterChange": "     private void checkType()", "diff": ["-        DetailAST type = getMainAst().findFirstToken(TokenTypes.TYPE);", "-        DetailAST ident = ExpressionHandler.getFirstToken(type);", "-        int columnNo = expandedTabsColumnNo(ident);", "+        final DetailAST type = getMainAst().findFirstToken(TokenTypes.TYPE);", "+        final DetailAST ident = ExpressionHandler.getFirstToken(type);", "+        final int columnNo = expandedTabsColumnNo(ident);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "026c4880d2cd6ccb9604e86b3fdfeb83", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "       private void makeDropTarget(final Component c, boolean recursive)             throws TooManyListenersException", "signatureAfterChange": "       private void makeDropTarget(final Component c, boolean recursive)             throws TooManyListenersException", "diff": ["-                Component parent = c.getParent();", "+                final Component parent = c.getParent();", "-            Container cont = (Container) c;", "-            Component[] comps = cont.getComponents();", "+            final Container cont = (Container) c;", "+            final Component[] comps = cont.getComponents();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02dcdbd10b28afceef4122889d12efb2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        MethodParamPadCheck methodParamPadCheckObj = new MethodParamPadCheck();", "-        int[] actual = methodParamPadCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final MethodParamPadCheck methodParamPadCheckObj = new MethodParamPadCheck();", "+        final int[] actual = methodParamPadCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05a6e193955a8466535948e8567cf3b9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        ImportControlCheck testCheckObject =", "+        final ImportControlCheck testCheckObject =", "-        int[] actual = testCheckObject.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = testCheckObject.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "060719ab64fabf185a62a96c9c80c2f0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testGetRequiredTokens()", "signatureAfterChange": "      @Test     public void testGetRequiredTokens()", "diff": ["-        JavadocStyleCheck javadocStyleCheck = new JavadocStyleCheck();", "-        int[] actual = javadocStyleCheck.getRequiredTokens();", "-        int[] expected = {", "+        final JavadocStyleCheck javadocStyleCheck = new JavadocStyleCheck();", "+        final int[] actual = javadocStyleCheck.getRequiredTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08e80ba69e2676fd489913cec2b8553c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void outerTypeFilenameTest2() throws Exception", "signatureAfterChange": "      @Test     public void outerTypeFilenameTest2() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"OuterTypeFilename\");", "-        String filePath = builder.getFilePath(\"OuterTypeFilenameInput_2\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OuterTypeFilename\");", "+        final String filePath = builder.getFilePath(\"OuterTypeFilenameInput_2\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b7066bfb73e1dfcb45920ad49ab4fe5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        AnnotationUseStyleCheck constantNameCheckObj = new AnnotationUseStyleCheck();", "-        int[] actual = constantNameCheckObj.getAcceptableTokens();", "-        int[] expected = {TokenTypes.ANNOTATION };", "+        final AnnotationUseStyleCheck constantNameCheckObj = new AnnotationUseStyleCheck();", "+        final int[] actual = constantNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.ANNOTATION };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d680c71e19777cc8d77d4701fbb54fb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      @Test     public void unclosedAndClosedParagraphs()         throws IOException", "signatureAfterChange": "      @Test     public void unclosedAndClosedParagraphs()         throws IOException", "diff": ["-        String filename = getHtmlPath(\"InputUnclosedAndClosedParagraphs.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeUnclosedAndClosedParagraphs();", "+        final String filename = getHtmlPath(\"InputUnclosedAndClosedParagraphs.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeUnclosedAndClosedParagraphs();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dfbf3b9c0ac19b4feb1995011906fda", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testListFilesNotFile() throws Exception", "signatureAfterChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testListFilesNotFile() throws Exception", "diff": ["-        Method method = Main.class.getDeclaredMethod(\"listFiles\", File.class);", "+        final Method method = Main.class.getDeclaredMethod(\"listFiles\", File.class);", "-        File fileMock = mock(File.class);", "+        final File fileMock = mock(File.class);", "-        List<File> result = (List<File>) method.invoke(null, fileMock);", "+        final List<File> result = (List<File>) method.invoke(null, fileMock);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eaf53e867beba6724638334a2c96bb6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testGetRequiredTokens()", "signatureAfterChange": "      @Test     public void testGetRequiredTokens()", "diff": ["-        AbstractClassNameCheck classNameCheckObj = new AbstractClassNameCheck();", "-        int[] actual = classNameCheckObj.getRequiredTokens();", "-        int[] expected = {", "+        final AbstractClassNameCheck classNameCheckObj = new AbstractClassNameCheck();", "+        final int[] actual = classNameCheckObj.getRequiredTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fb58a3bdc6de5138bc8c46e4602e5d3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        WhitespaceAroundCheck whitespaceAroundCheckObj = new WhitespaceAroundCheck();", "-        int[] actual = whitespaceAroundCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final WhitespaceAroundCheck whitespaceAroundCheckObj = new WhitespaceAroundCheck();", "+        final int[] actual = whitespaceAroundCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "139b805f1e2763f3a268e0e225756791", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        NPathComplexityCheck npathComplexityCheckObj = new NPathComplexityCheck();", "-        int[] actual = npathComplexityCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final NPathComplexityCheck npathComplexityCheckObj = new NPathComplexityCheck();", "+        final int[] actual = npathComplexityCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13f8c12de66d0a07dfc619cd3909a832", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "      @Test     public void dollarInLink()         throws IOException", "signatureAfterChange": "      @Test     public void dollarInLink()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputDollarInLink.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeDollarInLink();", "+        final String filename = getDocPath(\"InputDollarInLink.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeDollarInLink();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16146b41470bf9d8b2eba8acfb193c36", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        LeftCurlyCheck check = new LeftCurlyCheck();", "-        int[] actual = check.getAcceptableTokens();", "-        int[] expected = {", "+        final LeftCurlyCheck check = new LeftCurlyCheck();", "+        final int[] actual = check.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "164626675d49f5896dba683bef8cf8f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtilsTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testEmptyJavadocCommentAst()", "signatureAfterChange": "      @Test     public void testEmptyJavadocCommentAst()", "diff": ["-        DetailAST commentBegin = new DetailAST();", "+        final DetailAST commentBegin = new DetailAST();", "-        DetailAST javadocCommentContent = new DetailAST();", "+        final DetailAST javadocCommentContent = new DetailAST();", "-        DetailAST commentEnd = new DetailAST();", "+        final DetailAST commentEnd = new DetailAST();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1897921e1026cc560e0345bbaed10bb7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     PropertyCacheFile(Configuration aCurrentConfig, String aFileName)", "signatureAfterChange": "     PropertyCacheFile(Configuration aCurrentConfig, String aFileName)", "diff": ["-            catch (FileNotFoundException e) {", "+            catch (final FileNotFoundException e) {", "-            catch (IOException e) {", "+            catch (final IOException e) {", "-                    catch (IOException ex) {", "+                    catch (final IOException ex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1936405b52a04c300d70d2b3900c350d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void leftCurlyAnnotationsTest() throws Exception", "signatureAfterChange": "      @Test     public void leftCurlyAnnotationsTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"LeftCurly\");", "-        String filePath = builder.getFilePath(\"LeftCurlyInput_Annotations\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"LeftCurly\");", "+        final String filePath = builder.getFilePath(\"LeftCurlyInput_Annotations\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "193a1541ca787c4053c1170862515e8d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        UnusedImportsCheck testCheckObject =", "+        final UnusedImportsCheck testCheckObject =", "-        int[] actual = testCheckObject.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = testCheckObject.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a4bca764626dc5b8558006039521cf0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void leadingAsterisks()         throws IOException", "signatureAfterChange": "      @Test     public void leadingAsterisks()         throws IOException", "diff": ["-        String filename = getPath(\"InputLeadingAsterisks.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeLeadingAsterisks();", "+        final String filename = getPath(\"InputLeadingAsterisks.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeLeadingAsterisks();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1be0097b3e117f749472700b9eac19e3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/JUnitTestCaseCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isPublicOrProtected(DetailAST aAST)", "signatureAfterChange": "     private boolean isPublicOrProtected(DetailAST aAST)", "diff": ["-        DetailAST modifiersAST = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        DetailAST publicAST =", "+        final DetailAST modifiersAST =", "+            aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST publicAST =", "-        DetailAST protectedAST =", "+        final DetailAST protectedAST ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2038ee2e5f3baebd0806c73e18010b4b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void customImportTest2() throws Exception", "signatureAfterChange": "      @Test     public void customImportTest2() throws Exception", "diff": ["-            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "+            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\",", "+                \"java.io.File.createTempFile\"),", "-            \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),", "+            \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL,", "+                \"java.util.concurrent.AbstractExecutorService\"),", "-            \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),", "-            \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD, \"com.google.common.reflect.*\"),", "+            \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR,", "+                \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),", "+            \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD,", "+                \"com.google.common.reflect.*\"),", "-        Configuration checkConfig = builder.getCheckConfig(\"CustomImportOrder\");", "-        String filePath = builder.getFilePath(\"CustomImportOrderInput_2\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"CustomImportOrder\");", "+        final String filePath = builder.getFilePath(\"CustomImportOrderInput_2\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "204c9c08259dfe7fb509d40060dea2cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testCorrect() throws Exception", "signatureAfterChange": "      @Test     public void testCorrect() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"SummaryJavadocCheck\");", "-        String filePath = builder.getFilePath(\"InputCorrectSummaryJavaDocCheck\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"SummaryJavadocCheck\");", "+        final String filePath = builder.getFilePath(\"InputCorrectSummaryJavaDocCheck\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "209886ec3aac655d6e0174b4417a9d5d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void customImportTest1() throws Exception", "signatureAfterChange": "      @Test     public void customImportTest1() throws Exception", "diff": ["-            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "+            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\",", "+                \"java.io.File.createTempFile\"),", "-        Configuration checkConfig = builder.getCheckConfig(\"CustomImportOrder\");", "-        String filePath = builder.getFilePath(\"CustomImportOrderInput_1\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"CustomImportOrder\");", "+        final String filePath = builder.getFilePath(\"CustomImportOrderInput_1\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22214d76365efa1983766d69e0faf231", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule44cloumunlimit/LineLengthTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void lineLengthTest() throws Exception", "signatureAfterChange": "      @Test     public void lineLengthTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"LineLength\");", "-        String filePath = builder.getFilePath(\"LineLengthInput2\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"LineLength\");", "+        final String filePath = builder.getFilePath(\"LineLengthInput2\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "233b8c02f007a3f8542d6315ec6b3f31", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public int[] getHandledTypes()", "signatureAfterChange": "     public int[] getHandledTypes()", "diff": ["-        Set typeSet = mTypeHandlers.keySet();", "-        int[] types = new int[typeSet.size()];", "+        final Set typeSet = mTypeHandlers.keySet();", "+        final int[] types = new int[typeSet.size()];", "-        for (Iterator i = typeSet.iterator(); i.hasNext(); index++) {", "+        for (final Iterator i = typeSet.iterator(); i.hasNext(); index++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "233f894f7fbe15b6a7b04dc175f53b51", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter6programpractice/rule62donotignoreexceptions/EmptyBlockTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void emptyBlockTestCatch() throws Exception", "signatureAfterChange": "      @Test     public void emptyBlockTestCatch() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"EmptyBlock\");", "-        String filePath = builder.getFilePath(\"EmptyBlockInputCatch\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"EmptyBlock\");", "+        final String filePath = builder.getFilePath(\"EmptyBlockInputCatch\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24ace5953fa1dbdc31cefec7831ecb02", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void testGetRequiredTokens()", "signatureAfterChange": "      @Test     public void testGetRequiredTokens()", "diff": ["-        RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();", "-        int[] actual = redundantModifierCheckObj.getRequiredTokens();", "-        int[] expected = ArrayUtils.EMPTY_INT_ARRAY;", "+        final RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();", "+        final int[] actual = redundantModifierCheckObj.getRequiredTokens();", "+        final int[] expected = ArrayUtils.EMPTY_INT_ARRAY;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "271d5ed2c7b67ad31915340c9e4a6b43", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      @Test     public void since()         throws IOException", "signatureAfterChange": "      @Test     public void since()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputSince.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeSince();", "+        final String filename = getDocPath(\"InputSince.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeSince();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2961c6ff690f00136eb9894cb7081769", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        MemberNameCheck memberNameCheckObj = new MemberNameCheck();", "-        int[] actual = memberNameCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final MemberNameCheck memberNameCheckObj = new MemberNameCheck();", "+        final int[] actual = memberNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ab82c2294a5adb7a9129a7226fb5541", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static PkgControl load(final InputSource aSource,         final String aSourceName) throws CheckstyleException", "signatureAfterChange": "     private static PkgControl load(final InputSource aSource,         final String aSourceName) throws CheckstyleException", "diff": ["-        catch (ParserConfigurationException e) {", "+        catch (final ParserConfigurationException e) {", "-        catch (SAXException e) {", "+        catch (final SAXException e) {", "-        catch (IOException e) {", "+        catch (final IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3041af6976df7479ac021f5ff99b51e6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void correctWhileTest() throws Exception", "signatureAfterChange": "      @Test     public void correctWhileTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "-        String filePath = builder.getFilePath(\"IndentationCorrectWhileDoWhileAndParameterInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "+        final String filePath = builder", "+            .getFilePath(\"IndentationCorrectWhileDoWhileAndParameterInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "335636c8a58f6df7b1aefd1e42d37ce3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void emptyBlockTestCatch() throws Exception", "signatureAfterChange": "      @Test     public void emptyBlockTestCatch() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"EmptyCatchBlock\");", "-        String filePath = builder.getFilePath(\"EmptyBlockInputCatch\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"EmptyCatchBlock\");", "+        final String filePath = builder.getFilePath(\"EmptyBlockInputCatch\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37256a215a93f2a69fe8cc062a58beea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void setIllegalClassNames(String[] aClassNames)", "signatureAfterChange": "     public void setIllegalClassNames(String[] aClassNames)", "diff": ["-            String name = aClassNames[i];", "+            final String name = aClassNames[i];", "-            int lastDot = name.lastIndexOf(\".\");", "+            final int lastDot = name.lastIndexOf(\".\");", "-                String shortName = name.substring(name.lastIndexOf(\".\") + 1);", "+                final String shortName =", "+                    name.substring(name.lastIndexOf(\".\") + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38f8a7511700a473959921bae230dd9f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "      @Test     public void docRootInheritDoc()         throws IOException", "signatureAfterChange": "      @Test     public void docRootInheritDoc()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputDocRootInheritDoc.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeDocRootInheritDoc();", "+        final String filename = getDocPath(\"InputDocRootInheritDoc.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeDocRootInheritDoc();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "409f12519c2a6e84014f246d27b890bd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testListFilesDirectoryWithNull() throws Exception", "signatureAfterChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testListFilesDirectoryWithNull() throws Exception", "diff": ["-        Method method = Main.class.getDeclaredMethod(\"listFiles\", File.class);", "+        final Method method = Main.class.getDeclaredMethod(\"listFiles\", File.class);", "-        File fileMock = mock(File.class);", "+        final File fileMock = mock(File.class);", "-        List<File> result = (List<File>) method.invoke(null, fileMock);", "+        final List<File> result = (List<File>) method.invoke(null, fileMock);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "420293352df556bcfafe0ea58db975da", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "         protected void updateSelectedPathsFromSelectedRows()", "signatureAfterChange": "         protected void updateSelectedPathsFromSelectedRows()", "diff": ["-                    int min = listSelectionModel.getMinSelectionIndex();", "-                    int max = listSelectionModel.getMaxSelectionIndex();", "+                    final int min = listSelectionModel.getMinSelectionIndex();", "+                    final int max = listSelectionModel.getMaxSelectionIndex();", "-                                TreePath selPath = tree.getPathForRow", "+                                final TreePath selPath = tree.getPathForRow"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42029fe0c362c81bb26a83e111e1cb97", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void checkParamTags(final List aTags, final DetailAST aParent,         boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkParamTags(final List aTags, final DetailAST aParent,         boolean aReportExpectedTags)", "diff": ["-        List params = getParameters(aParent);", "-        List typeParams = CheckUtils.getTypeParameters(aParent);", "+        final List params = getParameters(aParent);", "+        final List typeParams = CheckUtils.getTypeParameters(aParent);", "-                Iterator typeParamsIt = typeParams.iterator();", "+                final Iterator typeParamsIt = typeParams.iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44411df9cffb77fabd623f6110373547", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/PackageAnnotationTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        PackageAnnotationCheck constantNameCheckObj = new PackageAnnotationCheck();", "-        int[] actual = constantNameCheckObj.getAcceptableTokens();", "-        int[] expected = {TokenTypes.PACKAGE_DEF };", "+        final PackageAnnotationCheck constantNameCheckObj = new PackageAnnotationCheck();", "+        final int[] actual = constantNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.PACKAGE_DEF };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47dfdc3c09b95b6c24028982404fd078", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        AvoidNestedBlocksCheck constantNameCheckObj = new AvoidNestedBlocksCheck();", "-        int[] actual = constantNameCheckObj.getAcceptableTokens();", "-        int[] expected = {TokenTypes.SLIST };", "+        final AvoidNestedBlocksCheck constantNameCheckObj = new AvoidNestedBlocksCheck();", "+        final int[] actual = constantNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.SLIST };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a5351feb4c025c9298507b1e11a2c39", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyBlockTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void emptyBlockTestCatch() throws Exception", "signatureAfterChange": "      @Test     public void emptyBlockTestCatch() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"EmptyBlock\");", "-        String filePath = builder.getFilePath(\"EmptyBlockInputCatch\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"EmptyBlock\");", "+        final String filePath = builder.getFilePath(\"EmptyBlockInputCatch\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ae7415df6c45e5015024a577d416b16", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForInitializerPadCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        EmptyForInitializerPadCheck emptyForInitializerPadCheckObj =", "+        final EmptyForInitializerPadCheck emptyForInitializerPadCheckObj =", "-        int[] actual = emptyForInitializerPadCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = emptyForInitializerPadCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b16335b9d90c470a84ddd679fd7006c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        MethodCountCheck methodCountCheckObj =", "+        final MethodCountCheck methodCountCheckObj =", "-        int[] actual = methodCountCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = methodCountCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d3df6f84734047e42cdf7c157e57e37", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      @Test     public void htmlComments()         throws IOException", "signatureAfterChange": "      @Test     public void htmlComments()         throws IOException", "diff": ["-        String filename = getHtmlPath(\"InputComments.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeComments();", "+        final String filename = getHtmlPath(\"InputComments.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeComments();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ed02689bf65a92a478fbfc76c14392d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testCustomMessage() throws Exception", "signatureAfterChange": "      @Test     public void testCustomMessage() throws Exception", "diff": ["-        DefaultConfiguration config = createCheckConfig(emptyCheck.getClass());", "+        final DefaultConfiguration config = createCheckConfig(emptyCheck.getClass());", "-        LocalizedMessages collector = new LocalizedMessages();", "+        final LocalizedMessages collector = new LocalizedMessages();", "-        SortedSet<LocalizedMessage> messages = collector.getMessages();", "+        final SortedSet<LocalizedMessage> messages = collector.getMessages();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef4e3772957bd0d8f462fa3310c50d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void htmlTagsInParagraph()         throws IOException", "signatureAfterChange": "      @Test     public void htmlTagsInParagraph()         throws IOException", "diff": ["-        String filename = getHtmlPath(\"InputHtmlTagsInParagraph.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeHtmlTagsInParagraph();", "+        final String filename = getHtmlPath(\"InputHtmlTagsInParagraph.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeHtmlTagsInParagraph();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ff7364ec480c3e027c4d350e617a837", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        JavadocStyleCheck javadocStyleCheck = new JavadocStyleCheck();", "+        final JavadocStyleCheck javadocStyleCheck = new JavadocStyleCheck();", "-        int[] actual = javadocStyleCheck.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = javadocStyleCheck.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50bb0cb607660ed7cf141450465d4122", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        JavadocVariableCheck javadocVariableCheck = new JavadocVariableCheck();", "+        final JavadocVariableCheck javadocVariableCheck = new JavadocVariableCheck();", "-        int[] actual = javadocVariableCheck.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = javadocVariableCheck.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d1862d4880d23cb1ede84d982826ae", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Test     public void paramWithGeneric()         throws IOException", "signatureAfterChange": "      @Test     public void paramWithGeneric()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputParamWithGeneric.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeParamWithGeneric();", "+        final String filename = getDocPath(\"InputParamWithGeneric.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeParamWithGeneric();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5142427b082f635443af841cfac18275", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void checkIndentation()", "signatureAfterChange": "     public void checkIndentation()", "diff": ["-        DetailAST methodName = (DetailAST) getMainAst().getFirstChild();", "+        final DetailAST methodName = (DetailAST) getMainAst().getFirstChild();", "-        DetailAST lparen = getMainAst();", "-        DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);", "+        final DetailAST lparen = getMainAst();", "+        final DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524f00ac75eb473dc16c44e85bb105d4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void javadocTagDescriptionWithInlineTags()         throws IOException", "signatureAfterChange": "      @Test     public void javadocTagDescriptionWithInlineTags()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputJavadocTagDescriptionWithInlineTags.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeJavadocTagDescriptionWithInlineTags();", "+        final String filename = getDocPath(\"InputJavadocTagDescriptionWithInlineTags.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeJavadocTagDescriptionWithInlineTags();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5436679821987696142308578d510975", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        JavadocTypeCheck javadocTypeCheck = new JavadocTypeCheck();", "+        final JavadocTypeCheck javadocTypeCheck = new JavadocTypeCheck();", "-        int[] actual = javadocTypeCheck.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = javadocTypeCheck.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54624fd320c00aad374f36d9c52bfbfe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/JUnitTestCaseCheck.java", "commitBeforeChange": "d7ec6a95ac09e00b8d72b7db4f664a6ffa7e9562", "commitAfterChange": "2f70947ed74ab968324fdcf83f808ff1d88df1fb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isPublicAndStatic(DetailAST aAST)", "signatureAfterChange": "     private boolean isPublicAndStatic(DetailAST aAST)", "diff": ["-        DetailAST modifiersAST = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        DetailAST publicAST =", "+        final DetailAST modifiersAST =", "+            aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST publicAST =", "-        DetailAST staticAST =", "+        final DetailAST staticAST ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55e80fac2fe79c17b81262540f50008c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        EmptyForIteratorPadCheck emptyForIteratorPadCheckObj = new EmptyForIteratorPadCheck();", "-        int[] actual = emptyForIteratorPadCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final EmptyForIteratorPadCheck emptyForIteratorPadCheckObj = new EmptyForIteratorPadCheck();", "+        final int[] actual = emptyForIteratorPadCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "562dd32a29bcd3b34208d1da15e438cd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testViolationsByVariableName() throws Exception", "signatureAfterChange": "      @Test     public void testViolationsByVariableName() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"EmptyCatchBlock\");", "-        String filePath = builder.getFilePath(\"EmptyCatchBlockViolationsByVariableNameInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"EmptyCatchBlock\");", "+        final String filePath = builder.getFilePath(\"EmptyCatchBlockViolationsByVariableNameInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "588a1752a9fcdb342705990ceb8db6da", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void setIllegalClassNames(String[] aClassNames)", "signatureAfterChange": "     public void setIllegalClassNames(String[] aClassNames)", "diff": ["-            String name = aClassNames[i];", "+            final String name = aClassNames[i];", "-            int lastDot = name.lastIndexOf(\".\");", "+            final int lastDot = name.lastIndexOf(\".\");", "-                String shortName = name.substring(name.lastIndexOf(\".\") + 1);", "+                final String shortName =", "+                    name.substring(name.lastIndexOf(\".\") + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bfcdefe23a5747a68433295e2c3136b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testGetRequiredTokens()", "signatureAfterChange": "      @Test     public void testGetRequiredTokens()", "diff": ["-        UnusedImportsCheck testCheckObject =", "+        final UnusedImportsCheck testCheckObject =", "-        int[] actual = testCheckObject.getRequiredTokens();", "-        int[] expected = {", "+        final int[] actual = testCheckObject.getRequiredTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c35ebf0d989119dc7b4bb9cf62f8d8f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        IllegalImportCheck testCheckObject =", "+        final IllegalImportCheck testCheckObject =", "-        int[] actual = testCheckObject.getAcceptableTokens();", "-        int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};", "+        final int[] actual = testCheckObject.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c4195eab76838de369dbd987546a932", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetRequiredTokens()", "signatureAfterChange": "      @Test     public void testGetRequiredTokens()", "diff": ["-        NPathComplexityCheck npathComplexityCheckObj = new NPathComplexityCheck();", "-        int[] actual = npathComplexityCheckObj.getRequiredTokens();", "-        int[] expected = {", "+        final NPathComplexityCheck npathComplexityCheckObj = new NPathComplexityCheck();", "+        final int[] actual = npathComplexityCheckObj.getRequiredTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc13d863c7924db0fd509c9e111b9ae", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void customJavadocTags()         throws IOException", "signatureAfterChange": "      @Test     public void customJavadocTags()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputCustomJavadocTags.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeCustomJavadocTags();", "+        final String filename = getDocPath(\"InputCustomJavadocTags.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeCustomJavadocTags();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fe15e71274aabb89d0012cb727f80bc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                Vector tags = getJavadocTags(cmt);", "+                final Vector tags = getJavadocTags(cmt);", "-                List typeParamNames = CheckUtils.getTypeParameterNames(aAST);", "+                final List typeParamNames =", "+                    CheckUtils.getTypeParameterNames(aAST);", "+", "-                    for (Iterator typeParamNameIt = typeParamNames.iterator();", "+                    for (final Iterator typeParamNameIt =", "+                             typeParamNames.iterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6149ca32bbb1c698bf8c009e8225389b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetRequiredTokens()", "signatureAfterChange": "      @Test     public void testGetRequiredTokens()", "diff": ["-        JavaNCSSCheck javaNcssCheckObj = new JavaNCSSCheck();", "-        int[] actual = javaNcssCheckObj.getRequiredTokens();", "-        int[] expected = {", "+        final JavaNCSSCheck javaNcssCheckObj = new JavaNCSSCheck();", "+        final int[] actual = javaNcssCheckObj.getRequiredTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "622d30a6d77ccd8fc346dc13d038a64a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void correctFieldTest() throws Exception", "signatureAfterChange": "      @Test     public void correctFieldTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "-        String filePath = builder.getFilePath(\"IndentationCorrectFieldAndParameterInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "+        final String filePath = builder.getFilePath(\"IndentationCorrectFieldAndParameterInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63ae86202814eb54c2d38578612c7114", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void whitespaceAroundEmptyTypesCyclesTest() throws Exception", "signatureAfterChange": "      @Test     public void whitespaceAroundEmptyTypesCyclesTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"WhitespaceAround\");", "-        String filePath = builder.getFilePath(\"WhitespaceAroundInput_EmptyTypesAndCycles\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"WhitespaceAround\");", "+        final String filePath = builder.getFilePath(\"WhitespaceAroundInput_EmptyTypesAndCycles\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6503ff2645e2de4317b2baa3e26516c8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testGetRequiredTokens()", "signatureAfterChange": "      @Test     public void testGetRequiredTokens()", "diff": ["-        JavadocVariableCheck javadocVariableCheck = new JavadocVariableCheck();", "-        int[] actual = javadocVariableCheck.getRequiredTokens();", "-        int[] expected = {", "+        final JavadocVariableCheck javadocVariableCheck = new JavadocVariableCheck();", "+        final int[] actual = javadocVariableCheck.getRequiredTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6668b71b8bc471c9b652d383c596d885", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/FullIdentTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testNonValidCoordinates()", "signatureAfterChange": "      @Test     public void testNonValidCoordinates()", "diff": ["-        DetailAST ast = new DetailAST();", "+        final DetailAST ast = new DetailAST();", "-        DetailAST ast2 = new DetailAST();", "+        final DetailAST ast2 = new DetailAST();", "-        DetailAST ast1 = new DetailAST();", "+        final DetailAST ast1 = new DetailAST();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68f6e49b833407339d4386fb80b5139c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private Object createObject(String aClassName)         throws CheckstyleException", "signatureAfterChange": "     private Object createObject(String aClassName)         throws CheckstyleException", "diff": ["-        catch (ClassNotFoundException e) {", "+        catch (final ClassNotFoundException e) {", "-        catch (InstantiationException e) {", "+        catch (final InstantiationException e) {", "-        catch (IllegalAccessException e) {", "+        catch (final IllegalAccessException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69e5bd14dd511d991f422a2698575cb5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "       public void openFile(File aFile, final Component aParent)", "signatureAfterChange": "       public void openFile(File aFile, final Component aParent)", "diff": ["-                String[] sourceLines = Utils.getLines(aFile.getAbsolutePath());", "+                final String[] sourceLines = Utils.getLines(aFile.getAbsolutePath());", "-            catch (IOException ex) {", "+            catch (final IOException ex) {", "-            catch (ANTLRException ex) {", "+            catch (final ANTLRException ex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ad7ec9a19573b95a2eebf77d596a4c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void testWrongSeparatorLength() throws Exception", "signatureAfterChange": "      @Test     public void testWrongSeparatorLength() throws Exception", "diff": ["-        NewlineAtEndOfFileCheck check = new NewlineAtEndOfFileCheck();", "+        final NewlineAtEndOfFileCheck check = new NewlineAtEndOfFileCheck();", "-        Method method = NewlineAtEndOfFileCheck.class", "+        final Method method = NewlineAtEndOfFileCheck.class", "-        RandomAccessFile file = mock(RandomAccessFile.class);", "+        final RandomAccessFile file = mock(RandomAccessFile.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d579a33e4a3a265f12052404bfe01d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/ClassFanOutComplexityCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        ClassFanOutComplexityCheck classFanOutComplexityCheckObj = new ClassFanOutComplexityCheck();", "-        int[] actual = classFanOutComplexityCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final ClassFanOutComplexityCheck classFanOutComplexityCheckObj =", "+            new ClassFanOutComplexityCheck();", "+        final int[] actual = classFanOutComplexityCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e80eb6ebdb0138d08de1f3cfca53846", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test(expected = InvocationTargetException.class     public void testLoadThrowsException() throws InvocationTargetException", "signatureAfterChange": "      @Test(expected = InvocationTargetException.class     public void testLoadThrowsException() throws InvocationTargetException", "diff": ["-        InputSource source = new InputSource();", "+        final InputSource source = new InputSource();", "-            Class<?> clazz = ImportControlLoader.class;", "-            Method privateMethod = clazz.getDeclaredMethod(\"load\", InputSource.class, URI.class);", "+            final Class<?> clazz = ImportControlLoader.class;", "+            final Method privateMethod = clazz.getDeclaredMethod(\"load\", InputSource.class,", "+                URI.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7268cbd9591e95ed197f9b87731d33a2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "      @Test     public void allJavadocInlineTags()         throws IOException", "signatureAfterChange": "      @Test     public void allJavadocInlineTags()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputAllJavadocInlineTags.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeAllJavadocInlineTags();", "+        final String filename = getDocPath(\"InputAllJavadocInlineTags.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeAllJavadocInlineTags();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73ca5282e4db64c697f5ac876f1df6d0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void goodTest() throws Exception", "signatureAfterChange": "      @Test     public void goodTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"OneTopLevelClass\");", "-        String filePath = builder.getFilePath(\"OneTopLevelClassInputGood\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OneTopLevelClass\");", "+        final String filePath = builder.getFilePath(\"OneTopLevelClassInputGood\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "744312171f25e6441c0352d4fd1bfdab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        RedundantImportCheck testCheckObject =", "+        final RedundantImportCheck testCheckObject =", "-        int[] actual = testCheckObject.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = testCheckObject.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "751a7c6d9756a71cda55dbc52f738cdb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        AvoidEscapedUnicodeCharactersCheck check = new AvoidEscapedUnicodeCharactersCheck();", "-        int[] actual = check.getAcceptableTokens();", "-        int[] expected = {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL };", "+        final AvoidEscapedUnicodeCharactersCheck check = new AvoidEscapedUnicodeCharactersCheck();", "+        final int[] actual = check.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.STRING_LITERAL, TokenTypes.CHAR_LITERAL };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7837d0593e7c994048ce8f66ededa46e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testLogIOException() throws Exception", "signatureAfterChange": "      @Test     public void testLogIOException() throws Exception", "diff": ["-        TranslationCheck check = new TranslationCheck();", "-        DefaultConfiguration checkConfig = createCheckConfig(TranslationCheck.class);", "+        final TranslationCheck check = new TranslationCheck();", "+        final DefaultConfiguration checkConfig = createCheckConfig(TranslationCheck.class);", "-        Method logIOException = check.getClass().getDeclaredMethod(\"logIOException\",", "+        final Method logIOException = check.getClass().getDeclaredMethod(\"logIOException\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78479bfb7b382d7bd351733b1166ae34", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void outerTypeFilenameTest3() throws Exception", "signatureAfterChange": "      @Test     public void outerTypeFilenameTest3() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"OuterTypeFilename\");", "-        String filePath = builder.getFilePath(\"OuterTypeFilenameInput_3\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OuterTypeFilename\");", "+        final String filePath = builder.getFilePath(\"OuterTypeFilenameInput_3\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "795434373fc9b86e35f3535ded7a4a68", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        AbstractClassNameCheck classNameCheckObj = new AbstractClassNameCheck();", "-        int[] actual = classNameCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final AbstractClassNameCheck classNameCheckObj = new AbstractClassNameCheck();", "+        final int[] actual = classNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d29b98deef8d2b92716c994cb8722a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected final void findSubtreeLines(LineSet aLines, DetailAST aTree,         boolean aAllowNesting)", "signatureAfterChange": "     protected final void findSubtreeLines(LineSet aLines, DetailAST aTree,         boolean aAllowNesting)", "diff": ["-        Integer lineNum = new Integer(aTree.getLineNo());", "-        Integer colNum = aLines.getStartColumn(lineNum);", "+        final Integer lineNum = new Integer(aTree.getLineNo());", "+        final Integer colNum = aLines.getStartColumn(lineNum);", "-        int thisLineColumn = expandedTabsColumnNo(aTree);", "+        final int thisLineColumn = expandedTabsColumnNo(aTree);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b78aa5443177fc21e6d65f267f85bfe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoaderTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test(expected = InvocationTargetException.class     public void testSafeGetThrowsException() throws InvocationTargetException", "signatureAfterChange": "      @Test(expected = InvocationTargetException.class     public void testSafeGetThrowsException() throws InvocationTargetException", "diff": ["-        AttributesImpl attr = new AttributesImpl() {", "+        final AttributesImpl attr = new AttributesImpl() {", "-            Class<?> clazz = ImportControlLoader.class;", "-            Method privateMethod = clazz.getDeclaredMethod(\"safeGet\",", "+            final Class<?> clazz = ImportControlLoader.class;", "+            final Method privateMethod = clazz.getDeclaredMethod(\"safeGet\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7df6a49ad6992fab084b4147a02ea629", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testCustomMessageWithParameters() throws Exception", "signatureAfterChange": "      @Test     public void testCustomMessageWithParameters() throws Exception", "diff": ["-        DefaultConfiguration config = createCheckConfig(emptyCheck.getClass());", "+        final DefaultConfiguration config = createCheckConfig(emptyCheck.getClass());", "-        LocalizedMessages collector = new LocalizedMessages();", "+        final LocalizedMessages collector = new LocalizedMessages();", "-        SortedSet<LocalizedMessage> messages = collector.getMessages();", "+        final SortedSet<LocalizedMessage> messages = collector.getMessages();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f25b23bb457d09b7f0441dff5969373", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void validTest() throws Exception", "signatureAfterChange": "      @Test     public void validTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"CustomImportOrder\");", "-        String filePath = builder.getFilePath(\"CustomImportOrderValidInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"CustomImportOrder\");", "+        final String filePath = builder.getFilePath(\"CustomImportOrderValidInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ca4c1d6c99ee726dbf283c4d40ac3d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/utils/CommonUtilsTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testFileExtensions()", "signatureAfterChange": "      @Test     public void testFileExtensions()", "diff": ["-        File pdfFile = new File(\"file.pdf\");", "+        final File pdfFile = new File(\"file.pdf\");", "-        File javaFile = new File(\"file.java\");", "+        final File javaFile = new File(\"file.java\");", "-        File emptyExtensionFile = new File(\"file.\");", "+        final File emptyExtensionFile = new File(\"file.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "824eca735cf3845fef1cc60bed09ba82", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void correctIfTest() throws Exception", "signatureAfterChange": "      @Test     public void correctIfTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "-        String filePath = builder.getFilePath(\"IndentationCorrectIfAndParameterInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "+        final String filePath = builder.getFilePath(\"IndentationCorrectIfAndParameterInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8409abc242e1810395789c862dafcc22", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void correctTest() throws Exception", "signatureAfterChange": "      @Test     public void correctTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "-        String filePath = builder.getFilePath(\"IndentationCorrectInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "+        final String filePath = builder.getFilePath(\"IndentationCorrectInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84bfdfe0b5e6a790812a0dc379544f2f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void goodLineWrapTest() throws Exception", "signatureAfterChange": "      @Test     public void goodLineWrapTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"NoLineWrap\");", "-        String filePath = builder.getFilePath(\"NoLineWrap_Good\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"NoLineWrap\");", "+        final String filePath = builder.getFilePath(\"NoLineWrap_Good\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85217dbc6e7e2a6e19ca0bd4bb61caed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Test     public void linkInlineTags()         throws IOException", "signatureAfterChange": "      @Test     public void linkInlineTags()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputLinkInlineTags.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeLinkInlineTags();", "+        final String filename = getDocPath(\"InputLinkInlineTags.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeLinkInlineTags();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85d5f6e59ab6ff25a139ea45c0192450", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtilsTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testInEnumBlockWithEnum() throws ReflectiveOperationException", "signatureAfterChange": "      @Test     public void testInEnumBlockWithEnum() throws ReflectiveOperationException", "diff": ["-        DetailAST ast0 = new DetailAST();", "+        final DetailAST ast0 = new DetailAST();", "-        DetailAST ast1 = new DetailAST();", "+        final DetailAST ast1 = new DetailAST();", "-        DetailAST ast2 = new DetailAST();", "+        final DetailAST ast2 = new DetailAST();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "871babce6b0dcb4ce79940a12694d8c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/JavadocTagContinuationIndentationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void testWithDefaultConfiguration() throws Exception", "signatureAfterChange": "      @Test     public void testWithDefaultConfiguration() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"JavadocTagContinuationIndentation\");", "-        String filePath = builder.getFilePath(\"InputJavaDocTagContinuationIndentation\");", "+        final Configuration checkConfig = builder", "+            .getCheckConfig(\"JavadocTagContinuationIndentation\");", "+        final String filePath = builder.getFilePath(\"InputJavaDocTagContinuationIndentation\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8787e9c9c205ec4b7611866c2cdf27df", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        ParameterNumberCheck paramNumberCheckObj =", "+        final ParameterNumberCheck paramNumberCheckObj =", "-        int[] actual = paramNumberCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = paramNumberCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89f0cbd712450124e418871fe26d20e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void customImportTest3() throws Exception", "signatureAfterChange": "      @Test     public void customImportTest3() throws Exception", "diff": ["-            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "+            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\",", "+                \"java.io.File.createTempFile\"),", "-            \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),", "+            \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL,", "+                \"java.util.concurrent.AbstractExecutorService\"),", "-            \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),", "-            \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD, \"com.google.common.reflect.*\"),", "+            \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR,", "+                \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),", "+            \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD,", "+                \"com.google.common.reflect.*\"),", "-        Configuration checkConfig = builder.getCheckConfig(\"CustomImportOrder\");", "-        String filePath = builder.getFilePath(\"CustomImportOrderInput_3\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"CustomImportOrder\");", "+        final String filePath = builder.getFilePath(\"CustomImportOrderInput_3\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b0beaac28ddd8bf6d4fd26f99a9397e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      @Test     public void seeReferenceWithFewNestedClasses()         throws IOException", "signatureAfterChange": "      @Test     public void seeReferenceWithFewNestedClasses()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputSeeReferenceWithFewNestedClasses.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeSeeReferenceWithFewNestedClasses();", "+        final String filename = getDocPath(\"InputSeeReferenceWithFewNestedClasses.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeSeeReferenceWithFewNestedClasses();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c767581961aa2d329fb2a87cb8e6fc5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @Test     public void serial()         throws IOException", "signatureAfterChange": "      @Test     public void serial()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputSerial.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeSerial();", "+        final String filename = getDocPath(\"InputSerial.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeSerial();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ca0470bdc39ff2270f3bb28bfabcaa5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public static List getTypeParameters(final DetailAST aNode)", "signatureAfterChange": "     public static List getTypeParameters(final DetailAST aNode)", "diff": ["-        DetailAST typeParameters =", "+        final DetailAST typeParameters =", "-        List typeParams = new ArrayList();", "+        final List typeParams = new ArrayList();", "-            DetailAST typeParam =", "+            final DetailAST typeParam ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dd9545a31399ed02ab176171be4cd97", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void javadocParagraphCorrectTest() throws Exception", "signatureAfterChange": "      @Test     public void javadocParagraphCorrectTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"JavadocParagraph\");", "-        String filePath = builder.getFilePath(\"InputCorrectJavadocParagraphCheck\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"JavadocParagraph\");", "+        final String filePath = builder.getFilePath(\"InputCorrectJavadocParagraphCheck\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f836fa6cea885f33cdf3e15d43eba3f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public static List getTypeParameterNames(final DetailAST aNode)", "signatureAfterChange": "     public static List getTypeParameterNames(final DetailAST aNode)", "diff": ["-        DetailAST typeParameters =", "+        final DetailAST typeParameters =", "-        List typeParamNames = new ArrayList();", "+        final List typeParamNames = new ArrayList();", "-            DetailAST typeParam =", "+            final DetailAST typeParam ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9095aa8f93ee65d2e8e60c475dfb983f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        AvoidStarImportCheck testCheckObject =", "+        final AvoidStarImportCheck testCheckObject =", "-        int[] actual = testCheckObject.getAcceptableTokens();", "-        int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};", "+        final int[] actual = testCheckObject.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90bc3e1370ee3384c52e8ef842d127d2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private String getConfigHashCode(Serializable aConfiguration)", "signatureAfterChange": "     private String getConfigHashCode(Serializable aConfiguration)", "diff": ["-            ByteArrayOutputStream baos = new ByteArrayOutputStream();", "-            ObjectOutputStream oos = new ObjectOutputStream(baos);", "+            final ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+            final ObjectOutputStream oos = new ObjectOutputStream(baos);", "-            MessageDigest md = MessageDigest.getInstance(\"SHA\");", "+            final MessageDigest md = MessageDigest.getInstance(\"SHA\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92f7252ba61d5c783da702db71b9bc2a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void authorWithMailto()         throws IOException", "signatureAfterChange": "      @Test     public void authorWithMailto()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputAuthorWithMailto.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeAuthorWithMailto();", "+        final String filename = getDocPath(\"InputAuthorWithMailto.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeAuthorWithMailto();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "939cbbcfc045c86c8587daf78d8222ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();", "-        int[] actual = redundantModifierCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final RedundantModifierCheck redundantModifierCheckObj = new RedundantModifierCheck();", "+        final int[] actual = redundantModifierCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95786e80bafe35c76e03f6ce381f9359", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        JavadocMethodCheck javadocMethodCheck = new JavadocMethodCheck();", "+        final JavadocMethodCheck javadocMethodCheck = new JavadocMethodCheck();", "-        int[] actual = javadocMethodCheck.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = javadocMethodCheck.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "967a5ed7dc46d02e41ce1f29932cb86c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void correctClassTest() throws Exception", "signatureAfterChange": "      @Test     public void correctClassTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "-        String filePath = builder.getFilePath(\"IndentationCorrectClassInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "+        final String filePath = builder.getFilePath(\"IndentationCorrectClassInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97065c0e4ac759b25ef410d03dd29442", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/TypeParameterNameTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        AbstractTypeParameterNameCheck typeParameterNameCheckObj =", "+        final AbstractTypeParameterNameCheck typeParameterNameCheckObj =", "-        int[] actual = typeParameterNameCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = typeParameterNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97f88356eacc6677c5f2fae9f1f5ada0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtilityTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testContainsAnnotationTrue() throws ReflectiveOperationException", "signatureAfterChange": "      @Test     public void testContainsAnnotationTrue() throws ReflectiveOperationException", "diff": ["-        DetailAST ast = new DetailAST();", "+        final DetailAST ast = new DetailAST();", "-        DetailAST ast2 = new DetailAST();", "+        final DetailAST ast2 = new DetailAST();", "-        DetailAST ast3 = new DetailAST();", "+        final DetailAST ast3 = new DetailAST();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98db8de8b1afb526aae443dfa63bf1e5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/utils/TokenUtilsTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testTokenValueIncorrect2() throws Exception", "signatureAfterChange": "      @Test     public void testTokenValueIncorrect2() throws Exception", "diff": ["-        Integer id = 0;", "+        final Integer id = 0;", "-            Field[] fields = TokenUtils.class.getDeclaredFields();", "+            final Field[] fields = TokenUtils.class.getDeclaredFields();", "-                    Field modifiersField = Field.class.getDeclaredField(\"modifiers\");", "+                    final Field modifiersField = Field.class.getDeclaredField(\"modifiers\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99a1ece40378420c5a432e3f9e7216f3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testImproperToken()", "signatureAfterChange": "      @Test     public void testImproperToken()", "diff": ["-        DetailAST parent = new DetailAST();", "+        final DetailAST parent = new DetailAST();", "-        DetailAST array = new DetailAST();", "+        final DetailAST array = new DetailAST();", "-        DeclarationOrderCheck check = new DeclarationOrderCheck();", "+        final DeclarationOrderCheck check = new DeclarationOrderCheck();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a8319f233458953d415794e92c01acc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        OuterTypeFilenameCheck check = new OuterTypeFilenameCheck();", "-        int[] actual = check.getAcceptableTokens();", "-        int[] expected = {", "+        final OuterTypeFilenameCheck check = new OuterTypeFilenameCheck();", "+        final int[] actual = check.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ac89c6d3f8169e06f79112272c894a2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule32packagestate/LineLengthTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void lineLengthTest() throws Exception", "signatureAfterChange": "      @Test     public void lineLengthTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"LineLength\");", "-        String filePath = builder.getFilePath(\"LineLengthInput2\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"LineLength\");", "+        final String filePath = builder.getFilePath(\"LineLengthInput2\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f08f12fb7f011add11ea55729258efd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        OuterTypeNumberCheck outerTypeNumberObj =", "+        final OuterTypeNumberCheck outerTypeNumberObj =", "-        int[] actual = outerTypeNumberObj.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = outerTypeNumberObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a00e8b2c5ee5215360270794137289f7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        AnonInnerLengthCheck anonInnerLengthCheckObj =", "+        final AnonInnerLengthCheck anonInnerLengthCheckObj =", "-        int[] actual = anonInnerLengthCheckObj.getAcceptableTokens();", "-        int[] expected = {TokenTypes.LITERAL_NEW};", "+        final int[] actual = anonInnerLengthCheckObj.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.LITERAL_NEW};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0bea28f5f32770766b6759d17f0f675", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void correctReturnTest() throws Exception", "signatureAfterChange": "      @Test     public void correctReturnTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "-        String filePath = builder.getFilePath(\"IndentationCorrectReturnAndParameterInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "+        final String filePath = builder.getFilePath(\"IndentationCorrectReturnAndParameterInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0bed5b3c6f735b701d86d1927e9d60a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void checkThrows()", "signatureAfterChange": "     private void checkThrows()", "diff": ["-        DetailAST throwsAst =", "+        final DetailAST throwsAst =", "-        int columnNo = expandedTabsColumnNo(throwsAst);", "-        IndentLevel expectedColumnNo =", "+        final int columnNo = expandedTabsColumnNo(throwsAst);", "+        final IndentLevel expectedColumnNo ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a118acc7ccf8cb444ff6b305d4e047cf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      @Test     public void negativeNumberInAttribute()         throws IOException", "signatureAfterChange": "      @Test     public void negativeNumberInAttribute()         throws IOException", "diff": ["-        String filename = getHtmlPath(\"InputNegativeNumberInAttribute.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeNegativeNumberInAttribute();", "+        final String filename = getHtmlPath(\"InputNegativeNumberInAttribute.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeNegativeNumberInAttribute();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2b189e712a34e0a8b801d8777420745", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected void checkRCurly()", "signatureAfterChange": "     protected void checkRCurly()", "diff": ["-        DetailAST lcurly = getLCurly();", "-        DetailAST rcurly = getRCurly();", "-        int rcurlyPos = expandedTabsColumnNo(rcurly);", "+        final DetailAST lcurly = getLCurly();", "+        final DetailAST rcurly = getRCurly();", "+        final int rcurlyPos = expandedTabsColumnNo(rcurly);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a84943d87f545e3a3e515440cdd1507a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyBlockTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void emptyBlockTest() throws Exception", "signatureAfterChange": "      @Test     public void emptyBlockTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"EmptyBlock\");", "-        String filePath = builder.getFilePath(\"EmptyBlockInput_Basic\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"EmptyBlock\");", "+        final String filePath = builder.getFilePath(\"EmptyBlockInput_Basic\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa3d62f7731a8bcd4fe4ef92db3bfb44", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testAcceptableTokens()", "signatureAfterChange": "      @Test     public void testAcceptableTokens()", "diff": ["-        int[] expected = {TokenTypes.NUM_LONG };", "-        UpperEllCheck check = new UpperEllCheck();", "-        int[] actual = check.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.NUM_LONG };", "+        final UpperEllCheck check = new UpperEllCheck();", "+        final int[] actual = check.getAcceptableTokens();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac9758bef617aacf0f70ca3810dde4f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/DefaultLoggerTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void testCtor()", "signatureAfterChange": "      @Test     public void testCtor()", "diff": ["-        OutputStream infoStream = new ByteArrayOutputStream();", "-        OutputStream errorStream = new ByteArrayOutputStream();", "-        DefaultLogger dl = new DefaultLogger(infoStream, true, errorStream, true);", "+        final OutputStream infoStream = new ByteArrayOutputStream();", "+        final OutputStream errorStream = new ByteArrayOutputStream();", "+        final DefaultLogger dl = new DefaultLogger(infoStream, true, errorStream, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b099c7adf49fadfe84bae5898fd48907", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/SeparatorWrapTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void separatorWrapTest() throws Exception", "signatureAfterChange": "      @Test     public void separatorWrapTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"SeparatorWrap\");", "-        String filePath = builder.getFilePath(\"SeparatorWrapInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"SeparatorWrap\");", "+        final String filePath = builder.getFilePath(\"SeparatorWrapInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1a121ac67717c37afdc88221ab4e5f9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        StaticVariableNameCheck staticVariableNameCheckObj = new StaticVariableNameCheck();", "-        int[] actual = staticVariableNameCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final StaticVariableNameCheck staticVariableNameCheckObj = new StaticVariableNameCheck();", "+        final int[] actual = staticVariableNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b52cd1e7e2de37fb2233df90ec408fef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/JUnitTestCaseCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkSuiteMethod(DetailAST aAST, String aActualName)", "signatureAfterChange": "     private void checkSuiteMethod(DetailAST aAST, String aActualName)", "diff": ["-        DetailAST typeAST = aAST.findFirstToken(TokenTypes.TYPE);", "-        boolean isArray =", "+        final DetailAST typeAST = aAST.findFirstToken(TokenTypes.TYPE);", "+        final boolean isArray =", "-        String type = CheckUtils.createFullType(typeAST).getText();", "+        final String type = CheckUtils.createFullType(typeAST).getText();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6d919b97adab04212d9fef1a0c19a08", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtilsTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testEmptyBlockCommentAst()", "signatureAfterChange": "      @Test     public void testEmptyBlockCommentAst()", "diff": ["-        DetailAST commentBegin = new DetailAST();", "+        final DetailAST commentBegin = new DetailAST();", "-        DetailAST commentContent = new DetailAST();", "+        final DetailAST commentContent = new DetailAST();", "-        DetailAST commentEnd = new DetailAST();", "+        final DetailAST commentEnd = new DetailAST();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74f9d721d7201dfc2f52de160a2d913", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testNoViolations() throws Exception", "signatureAfterChange": "      @Test     public void testNoViolations() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"EmptyCatchBlock\");", "-        String filePath = builder.getFilePath(\"EmptyCatchBlockNoViolationsInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"EmptyCatchBlock\");", "+        final String filePath = builder.getFilePath(\"EmptyCatchBlockNoViolationsInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7745eff21f9396392f6b812799ab044", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ElseHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void checkToplevelToken()", "signatureAfterChange": "     protected void checkToplevelToken()", "diff": ["-        DetailAST ifAST = getMainAst().getParent();", "+        final DetailAST ifAST = getMainAst().getParent();", "-            DetailAST slist = ifAST.findFirstToken(TokenTypes.SLIST);", "+            final DetailAST slist = ifAST.findFirstToken(TokenTypes.SLIST);", "-                DetailAST lcurly = slist.getLastChild();", "+                final DetailAST lcurly = slist.getLastChild();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b85381cbb337cc0ae5fe8d334743ee6d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter2filebasic/rule232specialescape/IllegalTokenTextTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void illegalTokensTest() throws Exception", "signatureAfterChange": "      @Test     public void illegalTokensTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"IllegalTokenText\");", "-        String filePath = builder.getFilePath(\"IllegalTokenTextInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"IllegalTokenText\");", "+        final String filePath = builder.getFilePath(\"IllegalTokenTextInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8c15d4482f7029066d8d40b21754bc9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private void register(int aType, Class aHandlerClass)", "signatureAfterChange": "     private void register(int aType, Class aHandlerClass)", "diff": ["-            Constructor ctor = aHandlerClass.getConstructor(new Class[] {", "+            final Constructor ctor = aHandlerClass.getConstructor(new Class[] {", "-        catch (NoSuchMethodException e) {", "+        catch (final NoSuchMethodException e) {", "-        catch (SecurityException e) {", "+        catch (final SecurityException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8ed17e7b97cd62a7d6625b562c2defa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/InnerAssignmentCheck.java", "commitBeforeChange": "40496d0f8c01bf1f9718e6925b76f13db5b2ae3d", "commitAfterChange": "675c037c85af8347d5b95b0b45f166b8599a9b27", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        DetailAST parent1 = aAST.getParent();", "-        DetailAST parent2 = parent1.getParent();", "-        DetailAST parent3 = parent2.getParent();", "+        final DetailAST parent1 = aAST.getParent();", "+        final DetailAST parent2 = parent1.getParent();", "+        final DetailAST parent3 = parent2.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9117e64e4cb30f0dbb6eb5a2b0d7912", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void rightCurlyTestSame() throws Exception", "signatureAfterChange": "      @Test     public void rightCurlyTestSame() throws Exception", "diff": ["-        DefaultConfiguration newCheckConfig = createCheckConfig(RightCurlyCheck.class);", "+        final DefaultConfiguration newCheckConfig = createCheckConfig(RightCurlyCheck.class);", "-        String filePath = builder.getFilePath(\"RightCurlyInputSame\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final String filePath = builder.getFilePath(\"RightCurlyInputSame\");", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb6bd85654643f7b72d3d04446edc48a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        JavaNCSSCheck javaNcssCheckObj = new JavaNCSSCheck();", "-        int[] actual = javaNcssCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final JavaNCSSCheck javaNcssCheckObj = new JavaNCSSCheck();", "+        final int[] actual = javaNcssCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfe7b8593726e9ef2071ed180d4f1d81", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        MethodLengthCheck methodLengthCheckObj =", "+        final MethodLengthCheck methodLengthCheckObj =", "-        int[] actual = methodLengthCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = methodLengthCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c03553e5d9bec0e7606e9aa154c0a63c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void leftCurlyMethodsTest() throws Exception", "signatureAfterChange": "      @Test     public void leftCurlyMethodsTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"LeftCurly\");", "-        String filePath = builder.getFilePath(\"LeftCurlyInput_Method\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"LeftCurly\");", "+        final String filePath = builder.getFilePath(\"LeftCurlyInput_Method\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2c67aadea88460f1db09ac441f4bfeb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/PackageNameCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        PackageNameCheck packageNameCheckObj = new PackageNameCheck();", "-        int[] actual = packageNameCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final PackageNameCheck packageNameCheckObj = new PackageNameCheck();", "+        final int[] actual = packageNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c42c1aa60f6d4e5529585c9714a4a227", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void rightCurlyTestAlone() throws Exception", "signatureAfterChange": "      @Test     public void rightCurlyTestAlone() throws Exception", "diff": ["-        DefaultConfiguration newCheckConfig = createCheckConfig(RightCurlyCheck.class);", "+        final DefaultConfiguration newCheckConfig = createCheckConfig(RightCurlyCheck.class);", "-        String filePath = builder.getFilePath(\"RightCurlyInput_Other\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final String filePath = builder.getFilePath(\"RightCurlyInput_Other\");", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c43ff277d9738149ce83449f62db7969", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      @Test     public void fewWhiteSpacesAsSeparator()         throws IOException", "signatureAfterChange": "      @Test     public void fewWhiteSpacesAsSeparator()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputFewWhiteSpacesAsSeparator.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeFewWhiteSpacesAsSeparator();", "+        final String filename = getDocPath(\"InputFewWhiteSpacesAsSeparator.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeFewWhiteSpacesAsSeparator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cacba7ca01155fed05a832148eb2fb99", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule332nolinewrap/NoLineWrapTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void badLineWrapTest() throws Exception", "signatureAfterChange": "      @Test     public void badLineWrapTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"NoLineWrap\");", "-        String filePath = builder.getFilePath(\"NoLineWrap_Bad\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"NoLineWrap\");", "+        final String filePath = builder.getFilePath(\"NoLineWrap_Bad\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caecc1917ccdf8dc3a93bf42459741a6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule331nowildcard/AvoidStarImportTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void starImportTest() throws Exception", "signatureAfterChange": "      @Test     public void starImportTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"AvoidStarImport\");", "-        String filePath = builder.getFilePath(\"AvoidStarImportInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"AvoidStarImport\");", "+        final String filePath = builder.getFilePath(\"AvoidStarImportInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc883bb339fbac8dba877adf963bba15", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "      @Test     public void unclosedParagraphFollowedByJavadocTag()         throws IOException", "signatureAfterChange": "      @Test     public void unclosedParagraphFollowedByJavadocTag()         throws IOException", "diff": ["-        String filename = getHtmlPath(\"InputUnclosedParagraphFollowedByJavadocTag.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeUnclosedParagraphFollowedByJavadocTag();", "+        final String filename = getHtmlPath(\"InputUnclosedParagraphFollowedByJavadocTag.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeUnclosedParagraphFollowedByJavadocTag();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccadac0db96d33605d478231324fd86c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4861blockcommentstyle/CommentsIndentationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void commentsIndentationTest() throws Exception", "signatureAfterChange": "      @Test     public void commentsIndentationTest() throws Exception", "diff": ["-            \"1: \" + getCheckMessage(CommentsIndentationCheck.class, \"comments.indentation.single\", 2, 1, 0),", "-            \"13: \" + getCheckMessage(CommentsIndentationCheck.class, \"comments.indentation.single\", 14, 8, 6),", "-            \"23: \" + getCheckMessage(CommentsIndentationCheck.class, \"comments.indentation.block\", 24, 8, 4),", "-            \"25: \" + getCheckMessage(CommentsIndentationCheck.class, \"comments.indentation.block\", 27, 8, 4),", "-            \"28: \" + getCheckMessage(CommentsIndentationCheck.class, \"comments.indentation.block\", 31, 8, 4),", "-            \"50: \" + getCheckMessage(CommentsIndentationCheck.class, \"comments.indentation.single\", 51, 23, 19),", "-            \"51: \" + getCheckMessage(CommentsIndentationCheck.class, \"comments.indentation.block\", 53, 19, 32),", "+            \"1: \" + getCheckMessage(CommentsIndentationCheck.class,", "+                \"comments.indentation.single\", 2, 1, 0),", "+            \"13: \" + getCheckMessage(CommentsIndentationCheck.class,", "+                \"comments.indentation.single\", 14, 8, 6),", "+            \"23: \" + getCheckMessage(CommentsIndentationCheck.class,", "+                \"comments.indentation.block\", 24, 8, 4),", "+            \"25: \" + getCheckMessage(CommentsIndentationCheck.class,", "+                \"comments.indentation.block\", 27, 8, 4),", "+            \"28: \" + getCheckMessage(CommentsIndentationCheck.class,", "+                \"comments.indentation.block\", 31, 8, 4),", "+            \"50: \" + getCheckMessage(CommentsIndentationCheck.class,", "+                \"comments.indentation.single\", 51, 23, 19),", "+            \"51: \" + getCheckMessage(CommentsIndentationCheck.class,", "+                \"comments.indentation.block\", 53, 19, 32),", "-        Configuration checkConfig = builder.getCheckConfig(\"CommentsIndentation\");", "-        String filePath = builder.getFilePath(\"CommentsIndentationInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"CommentsIndentation\");", "+        final String filePath = builder.getFilePath(\"CommentsIndentationInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccde6124ed8da7308055d4719916bb53", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        CustomImportOrderCheck testCheckObject =", "+        final CustomImportOrderCheck testCheckObject =", "-        int[] actual = testCheckObject.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = testCheckObject.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd490b03dc4744fbdf5374b9f2232098", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testPackagesWithSaxException() throws Exception", "signatureAfterChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testPackagesWithSaxException() throws Exception", "diff": ["-        URL url = getMockUrl(mockConnection);", "+        final URL url = getMockUrl(mockConnection);", "-        Enumeration<URL> enumeration = (Enumeration<URL>) mock(Enumeration.class);", "+        final Enumeration<URL> enumeration = (Enumeration<URL>) mock(Enumeration.class);", "-        ClassLoader classLoader = mock(ClassLoader.class);", "+        final ClassLoader classLoader = mock(ClassLoader.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf9d777796039af733a7cffca57037ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void outerTypeFilenameTest1() throws Exception", "signatureAfterChange": "      @Test     public void outerTypeFilenameTest1() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"OuterTypeFilename\");", "-        String filePath = builder.getFilePath(\"OuterTypeFilenameInput_1\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OuterTypeFilename\");", "+        final String filePath = builder.getFilePath(\"OuterTypeFilenameInput_1\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfa3f37407367533460b541924349245", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CommitValidationTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testCommitMessageHasProperStructure() throws Exception", "signatureAfterChange": "      @Test     public void testCommitMessageHasProperStructure() throws Exception", "diff": ["-            String commitId = commit.getId().getName();", "-            String commitMessage = commit.getFullMessage();", "-            Matcher matcher = ACCEPTED_COMMIT_MESSAGE_PATTERN.matcher(commitMessage);", "+            final String commitId = commit.getId().getName();", "+            final String commitMessage = commit.getFullMessage();", "+            final Matcher matcher = ACCEPTED_COMMIT_MESSAGE_PATTERN.matcher(commitMessage);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0958d6628880b1d5c12ddb2685acd3e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test(expected = IllegalArgumentException.class)     public void testCustomMessageWithParametersNegative() throws Exception", "signatureAfterChange": "      @Test(expected = IllegalArgumentException.class)     public void testCustomMessageWithParametersNegative() throws Exception", "diff": ["-        DefaultConfiguration config = createCheckConfig(emptyCheck.getClass());", "+        final DefaultConfiguration config = createCheckConfig(emptyCheck.getClass());", "-        LocalizedMessages collector = new LocalizedMessages();", "+        final LocalizedMessages collector = new LocalizedMessages();", "-        SortedSet<LocalizedMessage> messages = collector.getMessages();", "+        final SortedSet<LocalizedMessage> messages = collector.getMessages();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d12aa4175b3ac8ad3cfbd52dc3d26ed7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        EmptyCatchBlockCheck constantNameCheckObj = new EmptyCatchBlockCheck();", "-        int[] actual = constantNameCheckObj.getAcceptableTokens();", "-        int[] expected = {TokenTypes.LITERAL_CATCH };", "+        final EmptyCatchBlockCheck constantNameCheckObj = new EmptyCatchBlockCheck();", "+        final int[] actual = constantNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.LITERAL_CATCH };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d41ccdea5509191dbb193ad580f8dc1a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void leftCurlyBracesTest() throws Exception", "signatureAfterChange": "      @Test     public void leftCurlyBracesTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"LeftCurly\");", "-        String filePath = builder.getFilePath(\"LeftCurlyInput_Braces\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"LeftCurly\");", "+        final String filePath = builder.getFilePath(\"LeftCurlyInput_Braces\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4225f1d70d7ab731e517c6acd2992c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        EmptyLineSeparatorCheck emptyLineSeparatorCheckObj = new EmptyLineSeparatorCheck();", "-        int[] actual = emptyLineSeparatorCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final EmptyLineSeparatorCheck emptyLineSeparatorCheckObj = new EmptyLineSeparatorCheck();", "+        final int[] actual = emptyLineSeparatorCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d469fdd69a74a13262bee3f850055483", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/metrics/CyclomaticComplexityCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        CyclomaticComplexityCheck cyclomaticComplexityCheckObj = new CyclomaticComplexityCheck();", "-        int[] actual = cyclomaticComplexityCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final CyclomaticComplexityCheck cyclomaticComplexityCheckObj =", "+            new CyclomaticComplexityCheck();", "+        final int[] actual = cyclomaticComplexityCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d542bdefa4c2f3e3a33393f2b66e0253", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        TypecastParenPadCheck typecastParenPadCheckObj = new TypecastParenPadCheck();", "-        int[] actual = typecastParenPadCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final TypecastParenPadCheck typecastParenPadCheckObj = new TypecastParenPadCheck();", "+        final int[] actual = typecastParenPadCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5978511b06d94cc0708cb6264d0503c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/ClassMethodTypeParameterNameTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testMethodDefault() throws Exception", "signatureAfterChange": "      @Test     public void testMethodDefault() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"MethodTypeParameterName\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"MethodTypeParameterName\");", "-        String filePath = builder.getFilePath(\"MethodTypeParameterNameInput\");", "+        final String filePath = builder.getFilePath(\"MethodTypeParameterNameInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6b2d22fe87e68f8a5678ceacbaa178b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4841indentation/IndentationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void correctForTest() throws Exception", "signatureAfterChange": "      @Test     public void correctForTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "-        String filePath = builder.getFilePath(\"IndentationCorrectForAndParameterInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"Indentation\");", "+        final String filePath = builder.getFilePath(\"IndentationCorrectForAndParameterInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7761b5bbc4802456d7bb3b42bf8a3bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      @Test     public void mixedCaseOfHtmlTags()         throws IOException", "signatureAfterChange": "      @Test     public void mixedCaseOfHtmlTags()         throws IOException", "diff": ["-        String filename = getHtmlPath(\"InputMixedCaseOfHtmlTags.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeMixedCaseOfHtmlTags();", "+        final String filename = getHtmlPath(\"InputMixedCaseOfHtmlTags.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeMixedCaseOfHtmlTags();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de70ac3000b62a73fae36d0ebed80948", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java", "commitBeforeChange": "dce9ad9e885de3ebb17cce482a512bdaf64f36ae", "commitAfterChange": "6abdc24080fe87995f39bd54bed99976dace4652", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-            int type = child.getType();", "+            final int type = child.getType();", "-                boolean isStatic =", "+                final boolean isStatic =", "-                boolean isPrivate =", "+                final boolean isPrivate ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dea30c30d6ad22733656757bf74a86ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule711generalform/SingleLineJavadocTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void singleLineJavadocTest() throws Exception", "signatureAfterChange": "      @Test     public void singleLineJavadocTest() throws Exception", "diff": ["-        String msg = getCheckMessage(SingleLineJavadocCheck.class, \"singleline.javadoc\");", "+        final String msg = getCheckMessage(SingleLineJavadocCheck.class, \"singleline.javadoc\");", "-        String filePath = builder.getFilePath(\"InputSingleLineJavadocCheck\");", "+        final String filePath = builder.getFilePath(\"InputSingleLineJavadocCheck\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e04c0a09c5489490c9c596ed2b4adf8c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void oneSimpleHtmlTag()         throws IOException", "signatureAfterChange": "      @Test     public void oneSimpleHtmlTag()         throws IOException", "diff": ["-        String filename = getHtmlPath(\"InputOneSimpleHtmlTag.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeOneSimpleHtmlTag();", "+        final String filename = getHtmlPath(\"InputOneSimpleHtmlTag.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeOneSimpleHtmlTag();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2f888ec7dbf33677db0566c55528011", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetDefaultTokens()", "signatureAfterChange": "      @Test     public void testGetDefaultTokens()", "diff": ["-        SeparatorWrapCheck separatorWrapCheckObj = new SeparatorWrapCheck();", "-        int[] actual = separatorWrapCheckObj.getDefaultTokens();", "-        int[] expected = {", "+        final SeparatorWrapCheck separatorWrapCheckObj = new SeparatorWrapCheck();", "+        final int[] actual = separatorWrapCheckObj.getDefaultTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e355e140f99f995e92cd3bbe61c1a99a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        int[] expected = {TokenTypes.COMMENT_CONTENT };", "-        TodoCommentCheck check = new TodoCommentCheck();", "-        int[] actual = check.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.COMMENT_CONTENT };", "+        final TodoCommentCheck check = new TodoCommentCheck();", "+        final int[] actual = check.getAcceptableTokens();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5644804d879b3cd427197f017c89c54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ParameterNameCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        ParameterNameCheck parameterNameCheckObj = new ParameterNameCheck();", "-        int[] actual = parameterNameCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final ParameterNameCheck parameterNameCheckObj = new ParameterNameCheck();", "+        final int[] actual = parameterNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5926cab966375ddd91543ce5a3a20ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testPackagesWithIoException() throws Exception", "signatureAfterChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testPackagesWithIoException() throws Exception", "diff": ["-        URL url = getMockUrl(mockConnection);", "+        final URL url = getMockUrl(mockConnection);", "-        Enumeration<URL> enumer = (Enumeration<URL>) mock(Enumeration.class);", "+        final Enumeration<URL> enumer = (Enumeration<URL>) mock(Enumeration.class);", "-        ClassLoader classLoader = mock(ClassLoader.class);", "+        final ClassLoader classLoader = mock(ClassLoader.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5d673572c5ec9159200ec776b5b6ce3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testGetRequiredTokens()", "signatureAfterChange": "      @Test     public void testGetRequiredTokens()", "diff": ["-        AvoidStarImportCheck testCheckObject =", "+        final AvoidStarImportCheck testCheckObject =", "-        int[] actual = testCheckObject.getRequiredTokens();", "-        int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};", "+        final int[] actual = testCheckObject.getRequiredTokens();", "+        final int[] expected = {TokenTypes.IMPORT, TokenTypes.STATIC_IMPORT};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e75f5916f52064009ea56381ba67c02f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "      @Test     public void testLoadPropertiesIOException() throws Exception", "signatureAfterChange": "      @Test     public void testLoadPropertiesIOException() throws Exception", "diff": ["-        Class<?>[] param = new Class<?>[1];", "+        final Class<?>[] param = new Class<?>[1];", "-        Method method = Main.class.getDeclaredMethod(\"loadProperties\", param);", "+        final Method method = Main.class.getDeclaredMethod(\"loadProperties\", param);", "-                File file = new File(File.separator + \":invalid\");", "+                final File file = new File(File.separator + \":invalid\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81f9e2257753acc25dd51153d38f802", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalFinalVariableNameCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        LocalFinalVariableNameCheck localFinalVariableNameCheckObj =", "+        final LocalFinalVariableNameCheck localFinalVariableNameCheckObj =", "-        int[] actual = localFinalVariableNameCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final int[] actual = localFinalVariableNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e886cfab116abdf212e62f66607be738", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        MethodNameCheck methodNameCheckObj = new MethodNameCheck();", "-        int[] actual = methodNameCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final MethodNameCheck methodNameCheckObj = new MethodNameCheck();", "+        final int[] actual = methodNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e7d5aa19ffd195dbb68d48f31d5529", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aDetailAST)", "signatureAfterChange": "     public void visitToken(DetailAST aDetailAST)", "diff": ["-        DetailAST paramDef =", "+        final DetailAST paramDef =", "-        DetailAST excType = paramDef.findFirstToken(TokenTypes.TYPE);", "-        FullIdent ident = CheckUtils.createFullType(excType);", "+        final DetailAST excType = paramDef.findFirstToken(TokenTypes.TYPE);", "+        final FullIdent ident = CheckUtils.createFullType(excType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eae43a5d8f2c375875462008b12ce359", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      @Test     public void listWithUnclosedItemInUnclosedParagraph()         throws IOException", "signatureAfterChange": "      @Test     public void listWithUnclosedItemInUnclosedParagraph()         throws IOException", "diff": ["-        String filename = getHtmlPath(\"InputListWithUnclosedItemInUnclosedParagraph.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeListWithUnclosedItemInUnclosedParagraph();", "+        final String filename = getHtmlPath(\"InputListWithUnclosedItemInUnclosedParagraph.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder", "+                .treeListWithUnclosedItemInUnclosedParagraph();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebb67ef9e6165b74cc246fc788115a4f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void checkType()", "signatureAfterChange": "     private void checkType()", "diff": ["-        DetailAST type = getMainAst().findFirstToken(TokenTypes.TYPE);", "-        DetailAST ident = ExpressionHandler.getFirstToken(type);", "-        int columnNo = expandedTabsColumnNo(ident);", "+        final DetailAST type = getMainAst().findFirstToken(TokenTypes.TYPE);", "+        final DetailAST ident = ExpressionHandler.getFirstToken(type);", "+        final int columnNo = expandedTabsColumnNo(ident);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec31a7945beecf4747257193137fd9b9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Test     public void testGetAnnotationValuesWrongArg() throws ReflectiveOperationException", "signatureAfterChange": "      @Test     public void testGetAnnotationValuesWrongArg() throws ReflectiveOperationException", "diff": ["-        SuppressWarningsHolder holder = new SuppressWarningsHolder();", "-        Method getAllAnnotationValues = holder.getClass()", "+        final SuppressWarningsHolder holder = new SuppressWarningsHolder();", "+        final Method getAllAnnotationValues = holder.getClass()", "-        DetailAST methodDef = new DetailAST();", "+        final DetailAST methodDef = new DetailAST();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed4742ff736b70db9a26649981efd924", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule413emptyblocks/EmptyCatchBlockTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testViolationsByComment() throws Exception", "signatureAfterChange": "      @Test     public void testViolationsByComment() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"EmptyCatchBlock\");", "-        String filePath = builder.getFilePath(\"EmptyCatchBlockViolationsByCommentInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"EmptyCatchBlock\");", "+        final String filePath = builder.getFilePath(\"EmptyCatchBlockViolationsByCommentInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee6534e643bd30982594a509b0f083c8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void textBeforeJavadocTags()         throws IOException", "signatureAfterChange": "      @Test     public void textBeforeJavadocTags()         throws IOException", "diff": ["-        String filename = getDocPath(\"InputTextBeforeJavadocTags.txt\");", "-        ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "-        ParseTree expectedTree = ParseTreeBuilder.treeTextBeforeJavadocTags();", "+        final String filename = getDocPath(\"InputTextBeforeJavadocTags.txt\");", "+        final ParseTree generatedTree = parseJavadoc(getFileContent(new File(filename)));", "+        final ParseTree expectedTree = ParseTreeBuilder.treeTextBeforeJavadocTags();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f15c2cab1a3f91f2e9ddd50d33f09dd0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "b4e77fd043c8546f6abf99cc0196c4d47e6084b1", "commitAfterChange": "829ae4c34f89ac06043265cdb3d80639988d85d8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testAddFilter() throws Exception", "signatureAfterChange": "      @Test     public void testAddFilter() throws Exception", "diff": ["-        DebugChecker c= new DebugChecker();", "-        DebugFilter f = new DebugFilter();", "+        final DebugChecker c= new DebugChecker();", "+        final DebugFilter f = new DebugFilter();", "-        TreeSet<LocalizedMessage> msgs = Sets.newTreeSet();", "+        final TreeSet<LocalizedMessage> msgs = Sets.newTreeSet();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1885312dbaf995287b2d85c7ee375cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        AnnotationLocationCheck constantNameCheckObj = new AnnotationLocationCheck();", "-        int[] actual = constantNameCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final AnnotationLocationCheck constantNameCheckObj = new AnnotationLocationCheck();", "+        final int[] actual = constantNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f291b0091fdc2ae2b33aeeee7900a4b4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        int[] expected = {TokenTypes.ARRAY_DECLARATOR };", "-        ArrayTypeStyleCheck check = new ArrayTypeStyleCheck();", "-        int[] actual = check.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.ARRAY_DECLARATOR };", "+        final ArrayTypeStyleCheck check = new ArrayTypeStyleCheck();", "+        final int[] actual = check.getAcceptableTokens();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7016514040c66ecb2b1e48a3e0a5b12", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ImportHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void checkIndentation()", "signatureAfterChange": "     public void checkIndentation()", "diff": ["-        int lineStart = getMainAst().getLineNo();", "-        DetailAST semi = getMainAst().findFirstToken(TokenTypes.SEMI);", "-        int lineEnd = semi.getLineNo();", "+        final int lineStart = getMainAst().getLineNo();", "+        final DetailAST semi = getMainAst().findFirstToken(TokenTypes.SEMI);", "+        final int lineEnd = semi.getLineNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f74f8ac9800edbe6d8dfa0d0d87ba963", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private static CommentType getCommentType(String comment)", "signatureAfterChange": "      private static CommentType getCommentType(String comment)", "diff": ["-        Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "+        final Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "-            Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "+            final Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "-                Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);", "+                final Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f86ea2e8d1b1cae786083b7922dff8b6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testMisc() throws ClassNotFoundException", "signatureAfterChange": "     @Test     public void testMisc() throws ClassNotFoundException", "diff": ["-        ClassResolver classResolver =", "+        final ClassResolver classResolver =", "-        ClassResolver newClassResolver = new ClassResolver(", "+        final ClassResolver newClassResolver = new ClassResolver(", "-        ClassResolver javaUtilClassResolver = new ClassResolver(", "+        final ClassResolver javaUtilClassResolver = new ClassResolver("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f95a52f6883e450eb5dc78049a43f822", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        GenericWhitespaceCheck genericWhitespaceCheckObj = new GenericWhitespaceCheck();", "-        int[] actual = genericWhitespaceCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final GenericWhitespaceCheck genericWhitespaceCheckObj = new GenericWhitespaceCheck();", "+        final int[] actual = genericWhitespaceCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99c4f0d05cab4dff96f35fb44c3a3d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens() throws Exception", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens() throws Exception", "diff": ["-        int[] expectedTokens = {TokenTypes.METHOD_DEF };", "-        MissingOverrideCheck check = new MissingOverrideCheck();", "-        int[] actual = check.getAcceptableTokens();", "+        final int[] expectedTokens = {TokenTypes.METHOD_DEF };", "+        final MissingOverrideCheck check = new MissingOverrideCheck();", "+        final int[] actual = check.getAcceptableTokens();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9b21d609d7ec59fe692acac3cf5d613", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/AtclauseOrderTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testCorrect() throws Exception", "signatureAfterChange": "      @Test     public void testCorrect() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"AtclauseOrder\");", "-        String filePath = builder.getFilePath(\"InputCorrectAtClauseOrderCheck\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"AtclauseOrder\");", "+        final String filePath = builder.getFilePath(\"InputCorrectAtClauseOrderCheck\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa1bde509d669c4d3b53c178ca3241f7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        AvoidStaticImportCheck testCheckObject =", "+        final AvoidStaticImportCheck testCheckObject =", "-        int[] actual = testCheckObject.getAcceptableTokens();", "-        int[] expected = {TokenTypes.STATIC_IMPORT};", "+        final int[] actual = testCheckObject.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.STATIC_IMPORT};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa78020ae3a63794a8b1aaac331745c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        ConstantNameCheck constantNameCheckObj = new ConstantNameCheck();", "-        int[] actual = constantNameCheckObj.getAcceptableTokens();", "-        int[] expected = {", "+        final ConstantNameCheck constantNameCheckObj = new ConstantNameCheck();", "+        final int[] actual = constantNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fad0e32e56b3c0c897048aa79dd07e93", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule488numericliterals/UpperEllTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void upperEllTest() throws Exception", "signatureAfterChange": "      @Test     public void upperEllTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"UpperEll\");", "-        String filePath = builder.getFilePath(\"InputUpperEll\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"UpperEll\");", "+        final String filePath = builder.getFilePath(\"InputUpperEll\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc1c2173b3dba9f0b11513be2055f7f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/NewHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void checkIndentation()", "signatureAfterChange": "     public void checkIndentation()", "diff": ["-        DetailAST type = (DetailAST) getMainAst().getFirstChild();", "+        final DetailAST type = (DetailAST) getMainAst().getFirstChild();", "-        DetailAST lparen = getMainAst().findFirstToken(TokenTypes.LPAREN);", "-        DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);", "+        final DetailAST lparen = getMainAst().findFirstToken(TokenTypes.LPAREN);", "+        final DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e233eeaf492e4e9d999bbbf19cb0fac3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63785b887ef5a1c3e350f33d4ab387fb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "410111f1dcee8241b7649a83675281693a3067ec", "commitAfterChange": "e853ed726fc5ea30084202fa72c8117147fedb2b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static Configuration loadConfiguration(String aConfigFname,                                                   Properties aOverrideProps)         throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(         String aConfig, Properties aOverrideProps)         throws CheckstyleException", "diff": ["-    public static Configuration loadConfiguration(String aConfigFname,", "-                                                  Properties aOverrideProps)", "+    public static Configuration loadConfiguration(", "+        String aConfig, Properties aOverrideProps)", "-            loader.parseFile(aConfigFname);", "+            // figure out if this is a File or a URL", "+            InputStream configStream;", "+            try {", "+                URL url = new URL(aConfig);", "+                configStream = url.openStream();", "+            }", "+            catch (MalformedURLException ex) {", "+                configStream = new FileInputStream(aConfig);", "+            }", "+            final InputStream bufferedStream =", "+                new BufferedInputStream(configStream);", "+            loader.parseInputStream(bufferedStream);", "+            bufferedStream.close();", "-                \"unable to find \" + aConfigFname, e);", "+                \"unable to find \" + aConfig, e);", "-                \"unable to parse \" + aConfigFname, e);", "+                \"unable to parse \" + aConfig, e);", "-                    + aConfigFname + \" - \" + e.getMessage(), e);", "+                    + aConfig + \" - \" + e.getMessage(), e);", "-            throw new CheckstyleException(\"unable to read \" + aConfigFname, e);", "+            throw new CheckstyleException(\"unable to read \" + aConfig, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a59d1f4b65554be9f0ddadd7a27dd2a9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "e5f09c7fd2b5115bd164a5ed4f0a5e376c2dc2d7", "commitAfterChange": "c1a79b112296dac813d0b4326043590f2eb2c378", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["+            SeverityLevelCounter warningCounter =", "+                    new SeverityLevelCounter(SeverityLevel.WARNING);", "+            c.addListener(warningCounter);", "+", "+            final int numWarnings = warningCounter.getCount();", "+            final boolean ok = numErrs <= mMaxErrors", "+                    && numWarnings <= mMaxWarnings;", "-            if ((numErrs > 0) && mFailureProperty != null) {", "+            if (!ok && mFailureProperty != null) {", "-            if ((numErrs > 0) && mFailOnViolation) {", "-                throw new BuildException(\"Got \" + numErrs + \" errors.\",", "+            if (!ok && mFailOnViolation) {", "+                throw new BuildException(", "+                        \"Got \" + numErrs + \" errors and \"", "+                        + numWarnings + \" warnings.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb38975bd6155ffd73ff29dafc2269f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/BaseCheckTestCase.java", "commitBeforeChange": "0fb155232fd68c4a4546ec34e676fa655d7fe223", "commitAfterChange": "8bb244d50b7ef1b8028fa5492009d3ea367b1a19", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected Checker createChecker(Configuration aConfig)         throws Exception", "signatureAfterChange": "      protected Checker createChecker(Configuration aCheckConfig)         throws Exception", "diff": ["-    protected Checker createChecker(Configuration aConfig)", "+    protected Checker createChecker(Configuration aCheckConfig)", "-        throw new IllegalStateException(\"not implemented yet\");", "-//        final DefaultConfiguration dc = new DefaultConfiguration(\"root\");", "-//        dc.addChild(aConfig);", "-//        final Checker c = new Checker();", "-//        c.configure(aConfig);", "-//        c.addListener(new BriefLogger(mStream));", "-//        return c;", "+        final DefaultConfiguration dc = new DefaultConfiguration(\"root\");", "+        final DefaultConfiguration twConf = createCheckConfig(TreeWalker.class);", "+        dc.addChild(twConf);", "+        twConf.addChild(aCheckConfig);", "+        final Checker c = new Checker();", "+        c.configure(dc);", "+        c.addListener(new BriefLogger(mStream));", "+        return c;"]}]}
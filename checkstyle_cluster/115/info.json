{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7415b021573aee47ce54a33e04367fad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b82d5711c908c1ef0814e753b75bd0b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "1c7341013d0e8a34498eb49ccdb4e91419f13280", "commitAfterChange": "cd89321522d9bf7fc10547e743fb8bbb4c993791", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["+            Class documentedClass = null;", "+            if (!found", "+                && (mAllowThrowsTagsForSubclasses || mAllowUndeclaredRTE))", "+            {", "+                documentedClass = resolveClass(documentedEx);", "+                if (documentedClass == null) {", "+                    log(tag.getLineNo(), \"javadoc.classInfo\",", "+                        \"@throws\", documentedEx);", "+                }", "+            }", "+", "-                final FullIdent fi = ei.getFullIdent();", "+                final FullIdent fi = ei.getName();", "-                else if (mAllowThrowsTagsForSubclasses) {", "-                    final ClassResolver cr = getClassResolver();", "-                    try {", "-                        final Class documentedClass = cr.resolve(documentedEx);", "-                        try {", "-                            final Class declaredClass = cr.resolve(declaredEx);", "-                            found =", "-                                declaredClass.isAssignableFrom(documentedClass);", "-                            if (found) {", "-                                ei.setFound();", "-                            }", "-                        }", "-                        catch (ClassNotFoundException e) {", "-                            log(tag.getLineNo(), \"javadoc.classInfo\",", "+                else if (mAllowThrowsTagsForSubclasses", "+                         && documentedClass != null)", "+                {", "+                    if (ei.isLoadable() && ei.getClazz() == null) {", "+                        // if the class is not loaded yet.", "+                        // try to load it.", "+                        ei.setClazz(resolveClass(declaredEx));", "+                        if (!ei.isLoadable()) {", "+                            log(fi.getLineNo(), \"javadoc.classInfo\",", "-                    catch (ClassNotFoundException e) {", "-                        log(tag.getLineNo(), \"javadoc.classInfo\",", "-                                      \"@throws\", documentedEx);", "+", "+                    found = isSubclass(documentedClass, ei.getClazz());", "+                    if (found) {", "+                        ei.setFound();", "-                if (mAllowUndeclaredRTE) {", "-                    final ClassResolver cr = getClassResolver();", "-                    try {", "-                        final Class clazz = cr.resolve(tag.getArg1());", "-                        reqd =", "-                            !RuntimeException.class.isAssignableFrom(clazz)", "-                                && !Error.class.isAssignableFrom(clazz);", "-                    }", "-                    catch (ClassNotFoundException e) {", "-                        log(tag.getLineNo(), \"javadoc.classInfo\",", "-                                      \"@throws\", tag.getArg1());", "-                    }", "+                if (mAllowUndeclaredRTE && documentedClass != null) {", "+                    reqd = !isUnchecked(documentedClass);", "-                    final FullIdent fi = ei.getFullIdent();", "+                    final FullIdent fi = ei.getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5ee6886f11a39dd76239dd6989bc03a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "73ec35d35bcf970c588278cb18300dfdf814a704", "commitAfterChange": "987d2d67d56e054adbe5ec56136dddb49f533137", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private static BeanUtilsBean createBeanUtilsBean()", "signatureAfterChange": "     private static BeanUtilsBean createBeanUtilsBean()", "diff": ["-", "-", "-        final boolean[] booleanArray = new boolean[0];", "-        final byte[] byteArray = new byte[0];", "-        final char[] charArray = new char[0];", "-        final double[] doubleArray = new double[0];", "-        final float[] floatArray = new float[0];", "-        final int[] intArray = new int[0];", "-        final long[] longArray = new long[0];", "-        final short[] shortArray = new short[0];", "-", "-", "-        cub.register(", "-            new BooleanArrayConverter(), booleanArray.getClass());", "+        cub.register(new ArrayConverter(", "+            boolean[].class, new BooleanConverter()), boolean[].class);", "-        cub.register(", "-            new ByteArrayConverter(byteArray), byteArray.getClass());", "+        cub.register(new ArrayConverter(byte[].class, new ByteConverter()),", "+            byte[].class);", "-        cub.register(", "-            new CharacterArrayConverter(), charArray.getClass());", "+        cub.register(new ArrayConverter(char[].class, new CharacterConverter()),", "+            char[].class);", "-        cub.register(", "-            new DoubleArrayConverter(doubleArray), doubleArray.getClass());", "+        cub.register(new ArrayConverter(double[].class, new DoubleConverter()),", "+            double[].class);", "-        cub.register(new FloatArrayConverter(), floatArray.getClass());", "+        cub.register(new ArrayConverter(float[].class, new FloatConverter()),", "+            float[].class);", "-        cub.register(new IntegerArrayConverter(), intArray.getClass());", "+        cub.register(new ArrayConverter(int[].class, new IntegerConverter()),", "+            int[].class);", "-        cub.register(new LongArrayConverter(), longArray.getClass());", "+        cub.register(new ArrayConverter(long[].class, new LongConverter()),", "+            long[].class);", "-        cub.register(new ShortArrayConverter(), shortArray.getClass());", "-        // TODO: investigate:", "-        // StringArrayConverter doesn't properly convert an array of tokens with", "-        // elements containing an underscore, \"_\".", "-        // Hacked a replacement class :(", "-        //        cub.register(new StringArrayConverter(),", "-        //                        String[].class);", "-        cub.register(new StrArrayConverter(), String[].class);", "-        cub.register(new IntegerArrayConverter(), Integer[].class);", "+        cub.register(new ArrayConverter(short[].class, new ShortConverter()),", "+            short[].class);", "+        cub.register(new RelaxedStringArrayConverter(), String[].class);"]}]}
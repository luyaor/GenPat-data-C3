{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c983e4dc26f6f4c5f06c344cdf6660ad", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e69ff4b5e687449b04e82188b2ef8ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java", "commitBeforeChange": "79e2149b37d91efaaeee891b491a3a9e0dfb6ac2", "commitAfterChange": "f5b4b3d452ee9fb96edb7b0a534351e5dab6dad7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private static Node findChildElementByTag(Node node, String tag)", "signatureAfterChange": "      private static Set<Node> findChildElementsByTag(Node node, String tag)", "diff": ["-    private static Node findChildElementByTag(Node node, String tag) {", "-        Node result = null;", "+    private static Set<Node> findChildElementsByTag(Node node, String tag) {", "+        final Set<Node> result = new LinkedHashSet<>();", "-                result = child;", "-                break;", "+                result.add(child);", "-", "-            if (child.hasChildNodes()) {", "-                result = findChildElementByTag(child, tag);", "-", "-                if (result != null) {", "-                    break;", "-                }", "+            else if (child.hasChildNodes()) {", "+                result.addAll(findChildElementsByTag(child, tag));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "665c2cd74d560d051fd342f24556a801", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "343b75b252db9492ace4c4e5bfb36016e631c7a5", "commitAfterChange": "f9f60d3142533c3eebff775e8eb1159935faaba1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private String getVisibilityScope(Set<String> modifiers)", "signatureAfterChange": "     private static String getVisibilityScope(Set<String> modifiers)", "diff": ["-    private String getVisibilityScope(Set<String> modifiers)", "+    private static String getVisibilityScope(Set<String> modifiers)", "-        final String[] explicitModifiers = {\"public\", \"private\", \"protected\"};", "-        for (final String candidate : explicitModifiers) {", "-            if (modifiers.contains(candidate)) {", "-                return candidate;", "+        String accessModifier = \"package\";", "+        for (final String modifier : EXPLICIT_MODS) {", "+            if (modifiers.contains(modifier)) {", "+                accessModifier = modifier;", "+                break;", "-        return \"package\";", "+        return accessModifier;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe5582c7223f17cf053e854be492df71", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static void traverse(File aNode, List<File> aFiles)", "signatureAfterChange": "     private static void traverse(File node, List<File> files)", "diff": ["-    private static void traverse(File aNode, List<File> aFiles)", "+    private static void traverse(File node, List<File> files)", "-        if (aNode.canRead()) {", "-            if (aNode.isDirectory()) {", "-                final File[] nodes = aNode.listFiles();", "+        if (node.canRead()) {", "+            if (node.isDirectory()) {", "+                final File[] nodes = node.listFiles();", "-                    traverse(element, aFiles);", "+                    traverse(element, files);", "-            else if (aNode.isFile()) {", "-                aFiles.add(aNode);", "+            else if (node.isFile()) {", "+                files.add(node);"]}]}
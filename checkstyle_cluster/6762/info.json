{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f6f0fb6472ab2adf2b69801de492904", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf9d777796039af733a7cffca57037ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter2filebasic/rule21filename/OuterTypeFilenameTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void outerTypeFilenameTest1() throws Exception", "signatureAfterChange": "      @Test     public void outerTypeFilenameTest1() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"OuterTypeFilename\");", "-        String filePath = builder.getFilePath(\"OuterTypeFilenameInput_1\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OuterTypeFilename\");", "+        final String filePath = builder.getFilePath(\"OuterTypeFilenameInput_1\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f74f8ac9800edbe6d8dfa0d0d87ba963", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private static CommentType getCommentType(String comment)", "signatureAfterChange": "      private static CommentType getCommentType(String comment)", "diff": ["-        Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "+        final Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "-            Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "+            final Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "-                Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);", "+                final Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);"]}]}
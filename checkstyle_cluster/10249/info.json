{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c0c0e83c6569036ec82e7d8da361d0e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6835c36cde16d32e8fb4acd5fc8a4426", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean isExtendedClassNamedAsException(DetailAST aAST)", "signatureAfterChange": "     private boolean isExtendedClassNamedAsException(DetailAST ast)", "diff": ["-    private boolean isExtendedClassNamedAsException(DetailAST aAST)", "+    private boolean isExtendedClassNamedAsException(DetailAST ast)", "-        final DetailAST extendsClause = aAST.findFirstToken(TokenTypes.EXTENDS_CLAUSE);", "+        final DetailAST extendsClause = ast.findFirstToken(TokenTypes.EXTENDS_CLAUSE);", "-                return extendedClassName.matches(mExtendedClassNameFormat);", "+                return extendedClassName.matches(extendedClassNameFormat);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dae9c6bb0bcf4ae4b84e11d42aa1f6bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "3f735c43e4b0b17aa6a63ce18c9c8564c84568a3", "commitAfterChange": "881f9b5079ed22cc6d39b9c27e581f1d1f1a7702", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean checkSwitch(final DetailAST ast, boolean useContinue)", "signatureAfterChange": "     private boolean checkSwitch(final DetailAST literalSwitchAst, boolean useContinue)", "diff": ["-    private boolean checkSwitch(final DetailAST ast, boolean useContinue) {", "-        DetailAST caseGroup = ast.findFirstToken(TokenTypes.CASE_GROUP);", "+    private boolean checkSwitch(final DetailAST literalSwitchAst, boolean useContinue) {", "+        DetailAST caseGroup = literalSwitchAst.findFirstToken(TokenTypes.CASE_GROUP);", "-        while (isTerminated && caseGroup != null", "-               && caseGroup.getType() != TokenTypes.RCURLY) {", "+        while (isTerminated && caseGroup.getType() != TokenTypes.RCURLY) {"]}]}
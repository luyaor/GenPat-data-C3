{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f19e528df36518ab773e5a1ba5dcc6d2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19ad990bfa77f2cfb3e5c7f576982c13", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java", "commitBeforeChange": "37e0bc051f37fff6f6d004ae57073cc98df95122", "commitAfterChange": "169729f60b9aba5736b15f3514ae41ed994512f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(final DetailAST aAST)", "diff": ["-", "+                switch (fChild.getType()) {", "-                if (fChild.getType() == TokenTypes.STRING_LITERAL) {", "+                case TokenTypes.STRING_LITERAL:", "-", "-     //conditional case", "-     //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")", "-                }", "-                else if (fChild.getType() == TokenTypes.QUESTION) {", "+                    break;", "+                //conditional case", "+                //ex: @SuppressWarnings((false) ? (true) ? \"unchecked\" : \"foo\" : \"unused\")", "+                case TokenTypes.QUESTION:", "-                }", "-                else {", "-                    assert false : \"Should never get here, type: \"", "-                        + fChild.getType() + \" text: \" + fChild.getText();", "+                    break;", "+                //param in constant case", "+                //ex: public static final String UNCHECKED = \"unchecked\";", "+                //@SuppressWarnings(UNCHECKED) or @SuppressWarnings(SomeClass.UNCHECKED)", "+                case TokenTypes.IDENT:", "+                case TokenTypes.DOT:", "+                    break;", "+                default:", "+                    throw new IllegalStateException(\"Should never get here, type: \"", "+                        + fChild.getType() + \" text: \" + fChild.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41c295f0991ca1f800657d2122f2387a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "d499f72239cec254d620ab1619ac936e233e2033", "commitAfterChange": "c682b5725d22afc38bf19d9667b23a7deab6d8c3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private int process(String aFileName)", "signatureAfterChange": "     private int process(String aFileName)", "diff": ["-        LineText[] errors;", "+        LocalizedMessage[] errors;", "-            errors = new LineText[] {new LineText(0, \"File not found!\")};", "+            errors = new LocalizedMessage[] {", "+                new LocalizedMessage(0, \"general.fileNotFound\", null)};", "-            errors = new LineText[] {", "-                new LineText(0, \"Got an IOException -\" + ioe.getMessage())};", "+            errors = new LocalizedMessage[] {", "+                new LocalizedMessage(0, \"general.exception\",", "+                                     new String[] {ioe.getMessage()})};", "-            errors = new LineText[] {", "-                new LineText(0,", "-                             \"Got a RecognitionException -\" + re.getMessage())};", "+            errors = new LocalizedMessage[] {", "+                new LocalizedMessage(0, \"general.exception\",", "+                                     new String[] {re.getMessage()})};", "-            errors = new LineText[] {", "-                new LineText(0,", "-                             \"Got a TokenStreamException -\" + te.getMessage())};", "+            errors = new LocalizedMessage[] {", "+                new LocalizedMessage(0, \"general.exception\",", "+                                     new String[] {te.getMessage()})};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5506f0101cd77227ac6c4d9bd34c9712", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "ccb3b8a5a972d71f26eda2cc11ef3ed5655372ec", "commitAfterChange": "365ff682dba7da5132da20174a09f5d74d2498ee", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void checkUnusedTypeParamTags(         final List<JavadocTag> tags,         final List<String> typeParamNames)", "signatureAfterChange": "     private void checkUnusedTypeParamTags(         final List<JavadocTag> tags,         final List<String> typeParamNames)", "diff": ["-                if (tag.getArg1() != null) {", "-", "-                    final Matcher matcher = pattern.matcher(tag.getArg1());", "-                    String typeParamName = null;", "-", "-                    if (matcher.matches()) {", "-                        typeParamName = matcher.group(1).trim();", "-                        if (!typeParamNames.contains(typeParamName)) {", "-                            log(tag.getLineNo(), tag.getColumnNo(),", "-                                UNUSED_TAG,", "-                                JavadocTagInfo.PARAM.getText(),", "-                                \"<\" + typeParamName + \">\");", "-                        }", "-                    }", "-                    else {", "-                        log(tag.getLineNo(), tag.getColumnNo(),", "-                            UNUSED_TAG_GENERAL);", "-                    }", "-                }", "-                else {", "+                final Matcher matcher = pattern.matcher(tag.getArg1());", "+                matcher.find();", "+                final String typeParamName = matcher.group(1).trim();", "+                if (!typeParamNames.contains(typeParamName)) {", "-                        UNUSED_TAG_GENERAL);", "+                        UNUSED_TAG,", "+                        JavadocTagInfo.PARAM.getText(),", "+                        \"<\" + typeParamName + \">\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f32f02d8521e91923725f3ae9407b24", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "         @Override         public boolean isCellEditable(EventObject e)", "signatureAfterChange": "         @Override         public boolean isCellEditable(EventObject event)", "diff": ["-        public boolean isCellEditable(EventObject e) {", "-            if (e instanceof MouseEvent) {", "+        public boolean isCellEditable(EventObject event) {", "+            if (event instanceof MouseEvent) {", "-                        final MouseEvent me = (MouseEvent) e;", "-                        final MouseEvent newME = new MouseEvent(tree, me.getID(),", "-                                me.getWhen(), me.getModifiers(),", "-                                me.getX() - getCellRect(0, counter, true).x,", "-                                me.getY(), me.getClickCount(),", "-                                me.isPopupTrigger());", "-                        tree.dispatchEvent(newME);", "+                        final MouseEvent mouseEvent = (MouseEvent) event;", "+                        final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),", "+                                mouseEvent.getWhen(), mouseEvent.getModifiers(),", "+                                mouseEvent.getX() - getCellRect(0, counter, true).x,", "+                                mouseEvent.getY(), mouseEvent.getClickCount(),", "+                                mouseEvent.isPopupTrigger());", "+                        tree.dispatchEvent(newMouseEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd6b3b1f392c1c70113f35294a21e1fb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "b42c26a8cd52e64e78c632e6b751df0cf6a48f59", "commitAfterChange": "aa0f77eb9294588b0d891dbde516bc43a5af4f5a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-                final LineColumn end = text.lineColumn(matcher.end());", "-", "-                if (!options.getSuppressor().shouldSuppress(start.getLine(),", "-                        start.getColumn(), end.getLine(), end.getColumn())) {", "-                    currentMatches++;", "-                    if (currentMatches > options.getMaximum()) {", "-                        if (options.getMessage().isEmpty()) {", "-                            options.getReporter().log(start.getLine(),", "-                                    REGEXP_EXCEEDED, matcher.pattern().toString());", "-                        }", "-                        else {", "-                            options.getReporter()", "-                                    .log(start.getLine(), options.getMessage());", "-                        }", "+                currentMatches++;", "+                if (currentMatches > options.getMaximum()) {", "+                    if (options.getMessage().isEmpty()) {", "+                        options.getReporter().log(start.getLine(),", "+                                REGEXP_EXCEEDED, matcher.pattern().toString());", "+                    }", "+                    else {", "+                        options.getReporter()", "+                                .log(start.getLine(), options.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1ef9e0f867f46f61e1284641f4ceaf0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "655a496c88fb075c62147484be2baa4e4c7e3f4d", "commitAfterChange": "8c3e4a50749044ae3177fc4c84db9c4fd93abca2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static List<String> validateCli(CommandLine cmdLine)", "signatureAfterChange": "     private static List<String> validateCli(CommandLine cmdLine)", "diff": ["-        if (cmdLine.hasOption(\"c\")) {", "+        if (cmdLine.hasOption(OPTION_C_NAME)) {", "-            if (cmdLine.hasOption(\"f\")) {", "-                final String format = cmdLine.getOptionValue(\"f\");", "-                if (!\"plain\".equals(format) && !\"xml\".equals(format)) {", "+            if (cmdLine.hasOption(OPTION_F_NAME)) {", "+                final String format = cmdLine.getOptionValue(OPTION_F_NAME);", "+                if (!PLAIN_FORMAT_NAME.equals(format) && !XML_FORMAT_NAME.equals(format)) {", "-                            + \" Found '%s' but expected 'plain' or 'xml'.\", format));", "+                            + \" Found '%s' but expected '%s' or '%s'.\",", "+                            format, PLAIN_FORMAT_NAME, XML_FORMAT_NAME));", "-            if (cmdLine.hasOption(\"p\")) {", "-                final String propertiesLocation = cmdLine.getOptionValue(\"p\");", "+            if (cmdLine.hasOption(OPTION_P_NAME)) {", "+                final String propertiesLocation = cmdLine.getOptionValue(OPTION_P_NAME);", "-            if (cmdLine.hasOption(\"o\")) {", "-                final String outputLocation = cmdLine.getOptionValue(\"o\");", "+            if (cmdLine.hasOption(OPTION_O_NAME)) {", "+                final String outputLocation = cmdLine.getOptionValue(OPTION_O_NAME);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c54bc225c48d751f94668a3e8867e5f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c71977d75612aa7d6c0134bd8f3de36", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getNextImportGroup(int aCurrentGroupNumber)", "signatureAfterChange": "     private String getNextImportGroup(int currentGroupNumber)", "diff": ["-    private String getNextImportGroup(int aCurrentGroupNumber)", "+    private String getNextImportGroup(int currentGroupNumber)", "-        int nextGroupNumber = aCurrentGroupNumber;", "+        int nextGroupNumber = currentGroupNumber;", "-        while (mCustomImportOrderRules.size() > nextGroupNumber + 1) {", "-            if (hasAnyImportInCurrentGroup(mCustomImportOrderRules.get(nextGroupNumber)))", "+        while (customImportOrderRules.size() > nextGroupNumber + 1) {", "+            if (hasAnyImportInCurrentGroup(customImportOrderRules.get(nextGroupNumber)))", "-        return mCustomImportOrderRules.get(nextGroupNumber);", "+        return customImportOrderRules.get(nextGroupNumber);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60dda9c64a529c60971706fbdf0964dc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-    public void finishTree(DetailAST aRootAST)", "+    public void finishTree(DetailAST rootAST)", "-        if (!(mValidFirst || mHasPublic) && mWrongType != null) {", "-            log(mWrongType.getLineNo(), \"type.file.mismatch\");", "+        if (!(validFirst || hasPublic) && wrongType != null) {", "+            log(wrongType.getLineNo(), \"type.file.mismatch\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "973d4de123bcbe01f41fe1e7b6bb03ef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "         public AuditListener createListener(Task aTask) throws IOException", "signatureAfterChange": "         public AuditListener createListener(Task task) throws IOException", "diff": ["-        public AuditListener createListener(Task aTask) throws IOException", "+        public AuditListener createListener(Task task) throws IOException", "-            if ((mFormatterType != null)", "-                    && E_XML.equals(mFormatterType.getValue()))", "+            if ((formatterType != null)", "+                    && E_XML.equals(formatterType.getValue()))", "-                return createXMLLogger(aTask);", "+                return createXMLLogger(task);", "-            return createDefaultLogger(aTask);", "+            return createDefaultLogger(task);"]}]}
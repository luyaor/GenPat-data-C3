{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3253cb76bebb3c877a089ebbff93981c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cff88a3c492ddf882ca3892d114d781e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "dfd04eb16b568e1db9200c0d9f5ea6151ccff762", "commitAfterChange": "bad81c81c2be3e67099c512e4e0aada291323566", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private static boolean isClassPublic(DetailAST classDef)", "signatureAfterChange": "     private static boolean isClassPublic(DetailAST ast)", "diff": ["-    private static boolean isClassPublic(DetailAST classDef) {", "-        final DetailAST classModifiers =", "-                classDef.findFirstToken(TokenTypes.MODIFIERS);", "-        return classModifiers.branchContains(TokenTypes.LITERAL_PUBLIC);", "+    private static boolean isClassPublic(DetailAST ast) {", "+        boolean isAccessibleFromPublic = false;", "+        final boolean isMostOuterScope = ast.getParent() == null;", "+        final DetailAST modifiersAst = ast.findFirstToken(TokenTypes.MODIFIERS);", "+        final boolean hasPublicModifier = modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);", "+", "+        if (isMostOuterScope) {", "+            isAccessibleFromPublic = hasPublicModifier;", "+        }", "+        else {", "+            final DetailAST parentClassAst = ast.getParent().getParent();", "+", "+            if (parentClassAst.getType() == TokenTypes.INTERFACE_DEF || hasPublicModifier) {", "+                isAccessibleFromPublic = isClassPublic(parentClassAst);", "+            }", "+        }", "+", "+        return isAccessibleFromPublic;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fac1d428aa1a364271976255544309d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "commitBeforeChange": "28c5d6f06244f45a5673a3ef5bd0d927b0042496", "commitAfterChange": "a5d30bf353dde01376d45fb031d9236b11a835d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void startElement(final String aNamespaceURI,         final String aLocalName, final String aQName, final Attributes aAtts)         throws SAXException", "signatureAfterChange": "     public void startElement(final String aNamespaceURI,                              final String aLocalName,                              final String aQName,                              final Attributes aAtts)         throws SAXException", "diff": ["-        final String aLocalName, final String aQName, final Attributes aAtts)", "+                             final String aLocalName,", "+                             final String aQName,", "+                             final Attributes aAtts)", "-            final String pkg = safeGet(aAtts, \"pkg\");", "+            // Need to handle either \"pkg\" or \"class\" attribute.", "+            // May have \"exact-match\" for \"pkg\"", "+            // May have \"local-only\"", "+            final boolean isAllow = aQName.equals(\"allow\");", "+            final boolean isLocalOnly = (aAtts.getValue(\"local-only\") != null);", "+            final String pkg = aAtts.getValue(\"pkg\");", "+            final Guard g;", "+            if (pkg != null) {", "+                final boolean exactMatch =", "+                    (aAtts.getValue(\"exact-match\") != null);", "+                g = new Guard(isAllow, isLocalOnly, pkg, exactMatch);", "+            }", "+            else {", "+                final String clazz = safeGet(aAtts, \"class\");", "+                g = new Guard(isAllow, isLocalOnly, clazz);", "+            }", "+", "-            pc.addGuard(new Guard(aQName.equals(\"allow\"), pkg));", "+            pc.addGuard(g);"]}]}
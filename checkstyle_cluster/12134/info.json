{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f98b2c5998cb08856435d3ff01c93ffd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39206a1a4b2d93751df3ef30aa4dd8d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/IndentationCheck.java", "commitBeforeChange": "bf6758b29dbb6f0e22d4951ea3bd25fdf45299fc", "commitAfterChange": "eaad55fdba73e17e103dc6600867f26fd6a3896b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 13, "signatureBeforeChange": "         private HandlerFactory()", "signatureAfterChange": "     public HandlerFactory getHandlerFactory()", "diff": ["-        /** creates a HandlerFactory */", "-        private HandlerFactory()", "-        {", "-            register(TokenTypes.CASE_GROUP, CaseHandler.class);", "-            register(TokenTypes.LITERAL_SWITCH, SwitchHandler.class);", "-            register(TokenTypes.SLIST, SlistHandler.class);", "-            register(TokenTypes.PACKAGE_DEF, PackageDefHandler.class);", "-            register(TokenTypes.LITERAL_ELSE, ElseHandler.class);", "-            register(TokenTypes.LITERAL_IF, IfHandler.class);", "-            register(TokenTypes.LITERAL_TRY, TryHandler.class);", "-            register(TokenTypes.LITERAL_CATCH, CatchHandler.class);", "-            register(TokenTypes.LITERAL_FINALLY, FinallyHandler.class);", "-            register(TokenTypes.LITERAL_DO, DoWhileHandler.class);", "-            register(TokenTypes.LITERAL_WHILE, WhileHandler.class);", "-            register(TokenTypes.LITERAL_FOR, ForHandler.class);", "-            register(TokenTypes.METHOD_DEF, MethodDefHandler.class);", "-            register(TokenTypes.CTOR_DEF, MethodDefHandler.class);", "-            register(TokenTypes.CLASS_DEF, ClassDefHandler.class);", "-            register(TokenTypes.OBJBLOCK, ObjectBlockHandler.class);", "-            register(TokenTypes.INTERFACE_DEF, ClassDefHandler.class);", "-            register(TokenTypes.IMPORT, ImportHandler.class);", "-            register(TokenTypes.ARRAY_INIT, ArrayInitHandler.class);", "-            register(TokenTypes.METHOD_CALL, MethodCallHandler.class);", "-            register(TokenTypes.CTOR_CALL, MethodCallHandler.class);", "-            register(TokenTypes.LABELED_STAT, LabelHandler.class);", "-            register(TokenTypes.LABELED_STAT, LabelHandler.class);", "-            register(TokenTypes.STATIC_INIT, StaticInitHandler.class);", "-        }", "+     */", "+    public HandlerFactory getHandlerFactory()", "+    {", "+        return mHandlerFactory;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc44bc3a685b445000359dae3561c0e4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "096100222d830beeab6674c1d468b7cd9e942e70", "commitAfterChange": "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void processIDENT(DetailAST ast)", "signatureAfterChange": "     private void processIDENT(DetailAST ast)", "diff": ["-", "-        if (parentType == TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR", "-            || parentType == TokenTypes.ANNOTATION", "-            || parentType == TokenTypes.ANNOTATION_FIELD_DEF) {", "-            //cannot refer to 'this' from annotations", "-            return;", "-        }", "-", "-        // let's check method calls", "-        if (parentType == TokenTypes.METHOD_CALL) {", "-            if (checkMethods && isClassMethod(ast.getText())) {", "-                log(ast, \"require.this.method\", ast.getText());", "+        switch (parentType) {", "+            case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:", "+            case TokenTypes.ANNOTATION:", "+            case TokenTypes.ANNOTATION_FIELD_DEF:", "+                // no need to check annotations content", "+                break;", "+            case TokenTypes.METHOD_CALL: {", "+                // let's check method calls", "+                if (checkMethods && isClassMethod(ast.getText())) {", "+                    log(ast, \"require.this.method\", ast.getText());", "+                }", "+                break;", "-            return;", "+            default: {", "+                if (checkFields) {", "+                    processField(ast, parentType);", "+                }", "+                break;", "+            }", "+    }", "-        // let's check fields", "-        if (!checkFields) {", "-            // we shouldn't check fields", "-            return;", "-        }", "-", "-            && ast.getPreviousSibling() != null) {", "-            || parentType == TokenTypes.LITERAL_NEW) {", "-        if (parentType == TokenTypes.VARIABLE_DEF", "-            || parentType == TokenTypes.CTOR_DEF", "-            || parentType == TokenTypes.METHOD_DEF", "-            || parentType == TokenTypes.CLASS_DEF", "-            || parentType == TokenTypes.ENUM_DEF", "-            || parentType == TokenTypes.INTERFACE_DEF", "-            || parentType == TokenTypes.PARAMETER_DEF", "-            || parentType == TokenTypes.TYPE_ARGUMENT) {"]}]}
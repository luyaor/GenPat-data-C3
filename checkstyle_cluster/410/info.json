{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d3063b0d09ab4ce7fb718f2958fafdd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a9d0d8451c593b924c87bd2a102725e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "b4c351b03d4a9d7dffc9a3502d17a41fb3e440b4", "commitAfterChange": "3989e7b80324ca7da7e3620e766d650ead68a67a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void processSingleGeneric(DetailAST ast, String line, int after)", "signatureAfterChange": "     private void processSingleGeneric(DetailAST ast, String line, int after)", "diff": ["-        else if (!Character.isWhitespace(charAfter)", "-            && charAfter != '(' && charAfter != ')'", "-            && charAfter != ',' && charAfter != '['", "-            && charAfter != '.' && charAfter != ':') {", "+        else if (!isCharacterValidAfterGenericEnd(charAfter)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98602b78234e595c5ee24f040df4ec53", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "da2d75a1780c1691dc4aa45489f9e9674b1c652e", "commitAfterChange": "36b91a59d62c9505b835717f00f470c499cf9b30", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["+    @Override", "+    public void leaveToken(DetailAST ast) {", "+        switch (ast.getType()) {", "+            case TokenTypes.OBJBLOCK:", "+            case TokenTypes.SLIST:", "+            case TokenTypes.CTOR_DEF:", "+            case TokenTypes.METHOD_DEF:", "+                final Map<String, DetailAST> scope = scopeStack.pop().scope;", "+                for (DetailAST node : scope.values()) {", "+                    log(node.getLineNo(), node.getColumnNo(), MSG_KEY, node", "+                        .getText());", "+                }", "+                break;", "+            default:", "+                // do nothing", "+        }", "-    @Override", "-    public void leaveToken(DetailAST ast) {", "-        super.leaveToken(ast);", "-        switch (ast.getType()) {", "-            case TokenTypes.OBJBLOCK:", "-            case TokenTypes.SLIST:", "-            case TokenTypes.LITERAL_FOR:", "-            case TokenTypes.CTOR_DEF:", "-            case TokenTypes.STATIC_INIT:", "-            case TokenTypes.INSTANCE_INIT:", "-            case TokenTypes.METHOD_DEF:", "-                final Map<String, DetailAST> state = scopeStack.pop();", "-                for (DetailAST node : state.values()) {", "-                    log(node.getLineNo(), node.getColumnNo(), MSG_KEY, node", "-                        .getText());", "-                }", "-                break;", "-", "-            default:", "-        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed872747b3dcc1bafc4391669471337e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30f02b9bb6cf36179880026e76a9640b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     protected final void findSubtreeLines(LineSet aLines, DetailAST aTree,         boolean aAllowNesting)", "signatureAfterChange": "     protected final void findSubtreeLines(LineSet lines, DetailAST tree,         boolean allowNesting)", "diff": ["-    protected final void findSubtreeLines(LineSet aLines, DetailAST aTree,", "-        boolean aAllowNesting)", "+    protected final void findSubtreeLines(LineSet lines, DetailAST tree,", "+        boolean allowNesting)", "-        if (getIndentCheck().getHandlerFactory().isHandledType(aTree.getType())", "-            || (aTree.getLineNo() < 0))", "+        if (getIndentCheck().getHandlerFactory().isHandledType(tree.getType())", "+            || (tree.getLineNo() < 0))", "-        final int lineNum = aTree.getLineNo();", "-        final Integer colNum = aLines.getStartColumn(lineNum);", "+        final int lineNum = tree.getLineNo();", "+        final Integer colNum = lines.getStartColumn(lineNum);", "-        final int thisLineColumn = expandedTabsColumnNo(aTree);", "+        final int thisLineColumn = expandedTabsColumnNo(tree);", "-            aLines.addLineAndCol(lineNum, thisLineColumn);", "+            lines.addLineAndCol(lineNum, thisLineColumn);", "-        for (DetailAST node = aTree.getFirstChild();", "+        for (DetailAST node = tree.getFirstChild();", "-            findSubtreeLines(aLines, node, aAllowNesting);", "+            findSubtreeLines(lines, node, allowNesting);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec7d2cef5761d200195e4a8f2b8d73f8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected final void checkChildren(DetailAST aParent,                                        int[] aTokenTypes,                                        IndentLevel aStartLevel,                                        boolean aFirstLineMatches,                                        boolean aAllowNesting)", "signatureAfterChange": "     protected final void checkChildren(DetailAST parent,                                        int[] tokenTypes,                                        IndentLevel startLevel,                                        boolean firstLineMatches,                                        boolean allowNesting)", "diff": ["-    protected final void checkChildren(DetailAST aParent,", "-                                       int[] aTokenTypes,", "-                                       IndentLevel aStartLevel,", "-                                       boolean aFirstLineMatches,", "-                                       boolean aAllowNesting)", "+    protected final void checkChildren(DetailAST parent,", "+                                       int[] tokenTypes,", "+                                       IndentLevel startLevel,", "+                                       boolean firstLineMatches,", "+                                       boolean allowNesting)", "-        Arrays.sort(aTokenTypes);", "-        for (DetailAST child = aParent.getFirstChild();", "+        Arrays.sort(tokenTypes);", "+        for (DetailAST child = parent.getFirstChild();", "-            if (Arrays.binarySearch(aTokenTypes, child.getType()) >= 0) {", "-                checkExpressionSubtree(child, aStartLevel,", "-                    aFirstLineMatches, aAllowNesting);", "+            if (Arrays.binarySearch(tokenTypes, child.getType()) >= 0) {", "+                checkExpressionSubtree(child, startLevel,", "+                    firstLineMatches, allowNesting);"]}]}
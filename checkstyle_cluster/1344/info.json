{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08643d55a414dd9d011c835cdf1cd27a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13a317fdcc5a21bb2232b7f3f3e0c236", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void visitSlist(DetailAST aAST)", "signatureAfterChange": "     private void visitSlist(DetailAST ast)", "diff": ["-    private void visitSlist(DetailAST aAST)", "+    private void visitSlist(DetailAST ast)", "-        if (mContext != null) {", "+        if (context != null) {", "-            final DetailAST contextAST = mContext.getAST();", "-            DetailAST parent = aAST.getParent();", "+            final DetailAST contextAST = context.getAST();", "+            DetailAST parent = ast.getParent();", "-                        mContext.addCount(aAST.getChildCount() / 2);", "+                        context.addCount(ast.getChildCount() / 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70759f8d7e21fece7874e2d3ec19d30d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-    public void finishTree(DetailAST aRootAST)", "+    public void finishTree(DetailAST rootAST)", "-        final Counter counter = mCounters.pop();", "+        final Counter counter = counters.pop();", "-        if (count > mFileMax) {", "-            log(aRootAST.getLineNo(), aRootAST.getColumnNo(), \"ncss.file\",", "-                    count, mFileMax);", "+        if (count > fileMax) {", "+            log(rootAST.getLineNo(), rootAST.getColumnNo(), \"ncss.file\",", "+                    count, fileMax);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7791a420eba4c3c57ed1f5f8b9b4f950", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void checkException(FullIdent aExc, List<ClassInfo> aKnownExcs)", "signatureAfterChange": "     private void checkException(FullIdent aExc, List<ClassInfo> aKnownExcs)", "diff": ["-        if (!mAllowUnchecked) {", "-            if (isUnchecked(newClassInfo.getClazz())) {", "-                log(aExc.getLineNo(), aExc.getColumnNo(),", "-                    \"redundant.throws.unchecked\", aExc.getText());", "-            }", "+        if (!mAllowUnchecked && isUnchecked(newClassInfo.getClazz())) {", "+            log(aExc.getLineNo(), aExc.getColumnNo(),", "+                \"redundant.throws.unchecked\", aExc.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80da9d9735a685563b4870c4248e8fab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "         public void checkCount(DetailAST aAST)", "signatureAfterChange": "         public void checkCount(DetailAST ast)", "diff": ["-        public void checkCount(DetailAST aAST)", "+        public void checkCount(DetailAST ast)", "-            if (mChecking && (mCount > getMax())) {", "-                final DetailAST parentAST = aAST.getParent();", "+            if (checking && (count > getMax())) {", "+                final DetailAST parentAST = ast.getParent();", "-                    \"booleanExpressionComplexity\", mCount, getMax());", "+                    \"booleanExpressionComplexity\", count, getMax());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b60008ee913ea8a89d6f6eb889445375", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "         public void checkCount(DetailAST aAST)", "signatureAfterChange": "         public void checkCount(DetailAST ast)", "diff": ["-        public void checkCount(DetailAST aAST)", "+        public void checkCount(DetailAST ast)", "-            if (mChecking && (mCount > getMax())) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"return.count\",", "-                    mCount, getMax());", "+            if (checking && (count > getMax())) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"return.count\",", "+                    count, getMax());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f191c650512093b3261a5c22ba1266", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java", "commitBeforeChange": "a077b7282714b38286a09dcea10b710e5121a246", "commitAfterChange": "e6f4dad587d318233ff9343c5b66d831b7035fcf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void visitLiteralThrows(DetailAST ast)", "signatureAfterChange": "     private void visitLiteralThrows(DetailAST ast)", "diff": ["-        // Account for all the commas!", "-        final int count = (ast.getChildCount() + 1) / 2;", "-        if (count > getMax()) {", "-            log(ast.getLineNo(),  ast.getColumnNo(), MSG_KEY,", "-                count, getMax());", "+        if (!isOverriding(ast)) {", "+            // Account for all the commas!", "+            final int count = (ast.getChildCount() + 1) / 2;", "+            if (count > getMax()) {", "+                log(ast.getLineNo(),  ast.getColumnNo(), MSG_KEY,", "+                    count, getMax());", "+            }"]}]}
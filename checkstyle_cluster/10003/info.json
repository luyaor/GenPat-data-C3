{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b1fb1cc85170e02b1c005f50b82ca2d", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14667532430fa527114aa59151e3c026", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "9d11d6a0b07b63e3581468183f2ec359bafbf300", "commitAfterChange": "ee2e1a5cb3c7dd02bf6b63c418126e41735ee0ea", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private Properties createOverridingProperties()", "signatureAfterChange": "     private Properties createOverridingProperties()", "diff": ["-        // Now override the properties specified", "+        // override with Ant properties like ${basedir}", "+        Hashtable antProps = this.getProject().getProperties();", "+        for (Iterator it = antProps.keySet().iterator(); it.hasNext();) {", "+            final String key = (String) it.next();", "+            final String value = String.valueOf(antProps.get(key));", "+            retVal.put(key, value);", "+        }", "+", "+        // override with properties specified in subelements"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93a329282d8ed3e21bef9230176f7cdf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckConfiguration.java", "commitBeforeChange": "9fdee8a722d4d2d72796a1bc8397d5f23a342843", "commitAfterChange": "03c8a0a7ee9fa35ce22491785c9630c2eb698471", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     Check createInstance(ClassLoader aLoader)         throws ClassNotFoundException, InstantiationException,         IllegalAccessException", "signatureAfterChange": "     Check createInstance(ClassLoader aLoader)         throws ClassNotFoundException, InstantiationException,         IllegalAccessException, InvocationTargetException,         NoSuchMethodException", "diff": ["-        IllegalAccessException", "+        IllegalAccessException, InvocationTargetException,", "+        NoSuchMethodException", "+        // Loop setting the properties", "+        final Iterator keyIt = mProperties.keySet().iterator();", "+        while (keyIt.hasNext()) {", "+            final String key = (String) keyIt.next();", "+            final String value = (String) mProperties.get(key);", "+            PropertyUtils.setSimpleProperty(check, key, value);", "+        }"]}]}
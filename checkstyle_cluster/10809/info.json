{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22bedcc205c09b89deaf55d3a6721fdf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfe39debcd53a8e9632c8d6acd807d34", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "a34fe7f0897d4cb6153cb2ba2fa038d724607c58", "commitAfterChange": "e6638c3344a90ec1716feb1830790efe430a123a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        DetailAST targetAST = aAST;", "-        if (targetAST.getType() == TokenTypes.TYPECAST) {", "-            targetAST = targetAST.findFirstToken(TokenTypes.RPAREN);", "-        }", "-        final String line = getLine(aAST.getLineNo() - 1);", "-        final int after =", "-            targetAST.getColumnNo() + targetAST.getText().length();", "-", "-        if ((after >= line.length())", "-            || Character.isWhitespace(line.charAt(after)))", "+        DetailAST ast = aAST;", "+        if (aAST.getType() == TokenTypes.ARRAY_DECLARATOR", "+                 || aAST.getType() == TokenTypes.TYPECAST)", "-            boolean flag = !mAllowLineBreaks;", "-            for (int i = after + 1; !flag && (i < line.length()); i++) {", "-                if (!Character.isWhitespace(line.charAt(i))) {", "-                    flag = true;", "+            ast = getPreceded(aAST);", "+        }", "+", "+        final String line = getLine(aAST.getLineNo() - 1);", "+        final int after = getPositionAfter(ast);", "+", "+        if ((after >= line.length() || Character.isWhitespace(line.charAt(after)))", "+                 && hasRedundantWhitespace(line, after))", "+        {", "+            log(ast.getLineNo(), after,", "+                \"ws.followed\", ast.getText());", "+        }", "+    }", "-            if (flag) {", "-                log(targetAST.getLineNo(), after,", "-                    \"ws.followed\", targetAST.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d066ecbd1e50a9e323c201880300530f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java", "commitBeforeChange": "05d7d8d6c90d09ee77db1da426770d4676fc2985", "commitAfterChange": "18172eab38e9443539633d6ee3a30818c10c7bb1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final Object[] message;", "-        final DetailAST targetAST;", "+        final String line = getLine(ast.getLineNo() - 1);", "-            targetAST = ast.findFirstToken(TokenTypes.RPAREN);", "-            message = new Object[]{\"cast\"};", "+            final DetailAST targetAST = ast.findFirstToken(TokenTypes.RPAREN);", "+            if (!isFollowedByWhitespace(targetAST, line)) {", "+                log(targetAST.getLineNo(),", "+                    targetAST.getColumnNo() + targetAST.getText().length(),", "+                    WS_TYPECAST);", "+            }", "-            targetAST = ast;", "-            message = new Object[]{ast.getText()};", "+            if (!isFollowedByWhitespace(ast, line)) {", "+                final Object[] message = new Object[]{ast.getText()};", "+                log(ast.getLineNo(),", "+                    ast.getColumnNo() + ast.getText().length(),", "+                    WS_NOT_FOLLOWED,", "+                    message);", "+            }", "-        final String line = getLine(targetAST.getLineNo() - 1);", "+    }", "-                return;", "-            if (!Character.isWhitespace(charAfter) && !isEmptyForIterator(targetAST)) {", "-", "-                log(targetAST.getLineNo(),", "-                        targetAST.getColumnNo() + targetAST.getText().length(),", "-                        WS_NOT_FOLLOWED,", "-                        message);"]}]}
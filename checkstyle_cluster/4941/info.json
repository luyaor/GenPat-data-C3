{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b46dd639d0639d9063bb725b53c4338c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fba7437b4b9814325c84b19b3eded54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "e380ac8df92c051d843d380d5e8a6fe90af9df9d", "commitAfterChange": "ab2f93f9bf61816d84154e636d32c81c05854e24", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private static void traverse(File node, List<File> files)", "signatureAfterChange": "     private static List<File> listFiles(File node)", "diff": ["-    private static void traverse(File node, List<File> files)", "+     */", "+    private static List<File> listFiles(File node)", "+    {", "+        // could be replaced with org.apache.commons.io.FileUtils.list() method", "+        // if only we add commons-io library", "+        final List<File> files = Lists.newLinkedList();", "+", "-                final File[] nodes = node.listFiles();", "-                for (File element : nodes) {", "-                    traverse(element, files);", "+                for (File element : node.listFiles()) {", "+                    files.addAll(listFiles(element));", "+        return files;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe5582c7223f17cf053e854be492df71", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static void traverse(File aNode, List<File> aFiles)", "signatureAfterChange": "     private static void traverse(File node, List<File> files)", "diff": ["-    private static void traverse(File aNode, List<File> aFiles)", "+    private static void traverse(File node, List<File> files)", "-        if (aNode.canRead()) {", "-            if (aNode.isDirectory()) {", "-                final File[] nodes = aNode.listFiles();", "+        if (node.canRead()) {", "+            if (node.isDirectory()) {", "+                final File[] nodes = node.listFiles();", "-                    traverse(element, aFiles);", "+                    traverse(element, files);", "-            else if (aNode.isFile()) {", "-                aFiles.add(aNode);", "+            else if (node.isFile()) {", "+                files.add(node);"]}]}
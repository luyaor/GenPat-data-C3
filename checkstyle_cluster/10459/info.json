{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3de75b8e015ad33fd4b7596b0a8112d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc617c92ec77207416b5977a7222b35d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "98f0c51ab05243ce556dfb5afcd9c7ae4b5af7aa", "commitAfterChange": "63664e0b012593e18c5bb93ba528f27fd93fe0d4", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     void reportReference(String aType)", "signatureAfterChange": "     void reportReference(String aType)", "diff": ["-        mReferenced.add(aType);", "-", "-        // we might have multiple levels of inner classes,", "-        // all of them have to be marked as referenced", "-", "-        // as an unwanted side effect we also add package names like", "-        // \"com\", \"java\", etc., but that probably doesn't hurt", "-        // and could be fixed by getting more info using the classloader", "-        int lastDot = aType.lastIndexOf('.');", "-        while (lastDot != -1) {", "-            mReferenced.add(aType.substring(0, lastDot));", "-            lastDot = aType.lastIndexOf('.', lastDot - 1);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7d29ede8d24ec598acc28ae11364efc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java", "commitBeforeChange": "9aa9d751071e0597b268235f2dff4fc6373b2d5f", "commitAfterChange": "67da361a9a70df8baa4264b61c3ad5ea77e57dcc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public IllegalCatchCheck()", "signatureAfterChange": "     public IllegalCatchCheck()", "diff": ["-        mIllegalClassNames.add(\"Exception\");", "-        mIllegalClassNames.add(\"Error\");", "-        mIllegalClassNames.add(\"RuntimeException\");", "-        mIllegalClassNames.add(\"Throwable\");", "-        mIllegalClassNames.add(\"java.lang.Error\");", "-        mIllegalClassNames.add(\"java.lang.Exception\");", "-        mIllegalClassNames.add(\"java.lang.RuntimeException\");", "-        mIllegalClassNames.add(\"java.lang.Throwable\");", "+        setIllegalClassNames(new String[] {\"Exception\", \"Error\",", "+                                           \"RuntimeException\", \"Throwable\",", "+                                           \"java.lang.Error\",", "+                                           \"java.lang.Exception\",", "+                                           \"java.lang.RuntimeException\",", "+                                           \"java.lang.Throwable\",", "+        });"]}]}
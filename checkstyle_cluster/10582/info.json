{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b08cc10f29a886bbaee40fd6bf769933", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c11f7ee432d65072cb7538c698e9fbce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "a3b229b5d8dcafc164007ac9d0a7f5b2599c0dd6", "commitAfterChange": "33ab409c4e5a4c5c29a5c19eb4b45f079f17d481", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private String checkImportStatements(String className)", "signatureAfterChange": "     private String checkImportStatements(String className)", "diff": ["-            final String importArg = importLineText.getText();", "+            String importArg = importLineText.getText();", "-                final String fqClass =", "-                    importArg.substring(0, importArg.length() - 1)", "-                    + className;", "-                // assume that illegalInstances only contain existing classes", "-                // or else we might create a false alarm here", "-                if (illegalClasses.contains(fqClass)) {", "-                    illegalType = fqClass;", "-                    break;", "-                }", "+                importArg = importArg.substring(0, importArg.length() - 1)", "+                        + className;", "-            else {", "-                if (CommonUtils.baseClassName(importArg).equals(className)", "+            if (CommonUtils.baseClassName(importArg).equals(className)", "-                    illegalType = importArg;", "-                    break;", "-                }", "+                illegalType = importArg;", "+                break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb0cbf4033e7b532995027c501233477", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "eaad55fdba73e17e103dc6600867f26fd6a3896b", "commitAfterChange": "5cf355fad4b8bc613962aac2f52b48d5726f2acc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public boolean isReference(String aEnt)", "signatureAfterChange": "     public boolean isReference(String aEnt)", "diff": ["+            int prefixLength = 2; // \"&#\"", "+            int radix = BASE_10;", "-                try {", "-                    Integer.parseInt(aEnt.substring(3, aEnt.length() - 1), 16);", "-                    return true;", "-                }", "-                catch (NumberFormatException nfe) {", "-                    return false;", "-                }", "+                prefixLength++;", "+                radix = BASE_16;", "-            else {", "-                try {", "-                    Integer.parseInt(aEnt.substring(2, aEnt.length() - 1));", "-                    return true;", "-                }", "-                catch (NumberFormatException nfe) {", "-                    return false;", "-                }", "+            try {", "+                Integer.parseInt(", "+                    aEnt.substring(prefixLength, aEnt.length() - 1), radix);", "+                return true;", "+            }", "+            catch (NumberFormatException nfe) {", "+                return false;"]}]}
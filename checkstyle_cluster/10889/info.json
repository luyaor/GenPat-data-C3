{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ef2d9a7f3f107025bcca9c506c34993", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d946670e5f55263d5ee15ca19766850", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "ce4df1ec00d6eaa2547b9c1bdcbeec2b22f0fe0f", "commitAfterChange": "e8d0f037a2a300da55df6ab28d3459a6af9990d8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private static String getStringExpr(DetailAST ast)", "signatureAfterChange": "     private static String getStringExpr(DetailAST ast)", "diff": ["-        if (ast != null && ast.getType() == TokenTypes.EXPR) {", "-            final DetailAST firstChild = ast.getFirstChild();", "-            String expr = \"\";", "+        final DetailAST firstChild = ast.getFirstChild();", "+        String expr = \"\";", "-            switch (firstChild.getType()) {", "-                case TokenTypes.STRING_LITERAL:", "-                    // NOTE: escaped characters are not unescaped", "-                    final String quotedText = firstChild.getText();", "-                    expr = quotedText.substring(1, quotedText.length() - 1);", "-                    break;", "-                case TokenTypes.IDENT:", "-                    expr = firstChild.getText();", "-                    break;", "-                case TokenTypes.DOT:", "-                    expr = firstChild.getLastChild().getText();", "-                    break;", "-                default:", "-                    // annotations with complex expressions cannot suppress warnings", "-            }", "-            return expr;", "+        switch (firstChild.getType()) {", "+            case TokenTypes.STRING_LITERAL:", "+                // NOTE: escaped characters are not unescaped", "+                final String quotedText = firstChild.getText();", "+                expr = quotedText.substring(1, quotedText.length() - 1);", "+                break;", "+            case TokenTypes.IDENT:", "+                expr = firstChild.getText();", "+                break;", "+            case TokenTypes.DOT:", "+                expr = firstChild.getLastChild().getText();", "+                break;", "+            default:", "+                // annotations with complex expressions cannot suppress warnings", "-        throw new IllegalArgumentException(\"Expression AST expected: \" + ast);", "+        return expr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa8ad93be26b611faee51d4419ddb1ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "fab2296f6259c55589b4b93c5cea2eb4a90b3569", "commitAfterChange": "196522bba723231c31e34e71df1ebc438f34bf87", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public final void leaveToken(DetailAST ast)", "signatureAfterChange": "      @Override     public final void leaveToken(DetailAST ast)", "diff": ["-        else if (ast.getType() != TokenTypes.PACKAGE_DEF", "-                 && ast.getType() != TokenTypes.IMPORT) {", "-            leaveAST(ast);", "-        }", "-    }"]}]}
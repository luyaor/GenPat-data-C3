{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74287919f2334aaf1e70d83baebf49e1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "904c021eb783b193a07138bbd2fa490d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "9cf023696c619a53947da589d90078e2e40a592d", "commitAfterChange": "3e0159aeb562cd8f29296fbe919b27438ff8891f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (type == TokenTypes.ASSIGN", "-            && parent.getType() == TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {", "-            // shouldn't process assign in annotation pairs", "-            return;", "-        }", "+        if (type != TokenTypes.ASSIGN", "+            || parent.getType() != TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR) {", "-        // An identifier surrounded by parentheses.", "-        final boolean surrounded = isSurrounded(ast);", "-        if (surrounded && type == TokenTypes.IDENT) {", "-            parentToSkip = ast.getParent();", "-            log(ast, MSG_IDENT, ast.getText());", "-            return;", "-        }", "-", "-        // A literal (numeric or string) surrounded by parentheses.", "-        if (surrounded && isInTokenList(type, LITERALS)) {", "-            parentToSkip = ast.getParent();", "-            if (type == TokenTypes.STRING_LITERAL) {", "-                log(ast, MSG_STRING,", "-                    chopString(ast.getText()));", "+            final boolean surrounded = isSurrounded(ast);", "+            // An identifier surrounded by parentheses.", "+            if (surrounded && type == TokenTypes.IDENT) {", "+                parentToSkip = ast.getParent();", "+                log(ast, MSG_IDENT, ast.getText());", "-            else {", "-                log(ast, MSG_LITERAL, ast.getText());", "+            // A literal (numeric or string) surrounded by parentheses.", "+            else if (surrounded && isInTokenList(type, LITERALS)) {", "+                parentToSkip = ast.getParent();", "+                if (type == TokenTypes.STRING_LITERAL) {", "+                    log(ast, MSG_STRING,", "+                        chopString(ast.getText()));", "+                }", "+                else {", "+                    log(ast, MSG_LITERAL, ast.getText());", "+                }", "-            return;", "-        }", "-", "-        // The rhs of an assignment surrounded by parentheses.", "-        if (isInTokenList(type, ASSIGNMENTS)) {", "-            assignDepth++;", "-            final DetailAST last = ast.getLastChild();", "-            if (last.getType() == TokenTypes.RPAREN) {", "-                log(ast, MSG_ASSIGN);", "+            // The rhs of an assignment surrounded by parentheses.", "+            else if (isInTokenList(type, ASSIGNMENTS)) {", "+                assignDepth++;", "+                final DetailAST last = ast.getLastChild();", "+                if (last.getType() == TokenTypes.RPAREN) {", "+                    log(ast, MSG_ASSIGN);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd58705488bc2773c4cf2e646fd59edd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-", "-                if (parentType != TokenTypes.OBJBLOCK) {", "-                    return;", "+                if (parentType == TokenTypes.OBJBLOCK) {", "+                    processConstructor(ast);", "-", "-                processConstructor(ast);", "-", "-", "-                if (parentType != TokenTypes.OBJBLOCK) {", "-                    return;", "+                if (parentType == TokenTypes.OBJBLOCK) {", "+                    processMethod(ast);", "-", "-                processMethod(ast);", "-", "-                if (parentType != TokenTypes.VARIABLE_DEF", "-                        || ast.getParent().getParent().getType()", "-                        != TokenTypes.OBJBLOCK) {", "-                    return;", "+                if (parentType == TokenTypes.VARIABLE_DEF", "+                        && ast.getParent().getParent().getType() == TokenTypes.OBJBLOCK) {", "+                    processModifiers(ast);", "-", "-                processModifiers(ast);", "-"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ca5f7100222be01cf0a2e0fa336fa9b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a581d0af25c90cc1baa92d37b16012c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c", "commitAfterChange": "39f40e57858c8a5c6310bf35e6649b03188b6996", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean isOnlyUnicodeControlChars(String aLiteral)", "signatureAfterChange": "     private boolean isOnlyUnicodeValidChars(String aLiteral, Pattern aPattern)", "diff": ["-    private boolean isOnlyUnicodeControlChars(String aLiteral)", "+    private boolean isOnlyUnicodeValidChars(String aLiteral, Pattern aPattern)", "-        return mAllowEscapesForControlCharacters", "-                && sUnicodeControl.matcher(aLiteral).find();", "+        final int unicodeMatchesCounter =", "+                countMatches(sUnicodeRegexp, aLiteral);", "+        final int unicodeValidMatchesCouter =", "+                countMatches(aPattern, aLiteral);", "+        return unicodeMatchesCounter - unicodeValidMatchesCouter == 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d3c4298d84a4c583498619ec4525ab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "8af07e5dfd3744964ccde232393ecd64afea0aca", "commitAfterChange": "3a5f01cc66f50bf12d02002b4ded3f8aa677113a", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "     private String getIllegalInstantiation(String aClassName)", "signatureAfterChange": "     private String getIllegalInstantiation(String aClassName)", "diff": ["+        final int clsNameLen = aClassName.length();", "+        final int pkgNameLen = mPkgName.length();", "+", "+            final int illegalLen = illegal.length();", "-            if (((illegal.length() - javaLang.length()) == aClassName.length())", "+            if (((illegalLen - javaLang.length()) == clsNameLen)", "-            if (illegal.length() - mPkgName.length() == aClassName.length() + 1", "-                && illegal.charAt(mPkgName.length()) == '.'", "+", "+            // the toplevel package (mPkgName == null) is covered by the", "+            // \"illegalInsts.contains(aClassName)\" check above", "+", "+            // the test is the \"no garbage\" version of", "+            // illegal.equals(mPkgName + \".\" + aClassName)", "+            if (mPkgName != null", "+                && clsNameLen == illegalLen - pkgNameLen - 1", "+                && illegal.charAt(pkgNameLen) == '.'"]}]}
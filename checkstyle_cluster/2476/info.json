{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b792c0f27624becd567f4d410f965f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ebfd19ba28a1640c399ef66db5863c7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ImportCheck.java", "commitBeforeChange": "11fad553fd96cc00f33e95ae0bc2d6b32a8e1c54", "commitAfterChange": "aa5dbacdcbf20a9b56e2f7ecb577bb47778b0c54", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected String getImportText(DetailAST aAST)", "signatureAfterChange": "     protected FullIdent getImportText(DetailAST aAST)", "diff": ["-    protected String getImportText(DetailAST aAST)", "+    protected FullIdent getImportText(DetailAST aAST)", "-        String text = (String) getTokenContext().get(TEXT_KEY);", "+        FullIdent text = (FullIdent) getTokenContext().get(TEXT_KEY);", "-        final StringBuffer buf = new StringBuffer();", "-        extractIdent(buf, (DetailAST) aAST.getFirstChild());", "-        text = buf.toString();", "+        text = FullIdent.createFullIdent((DetailAST) aAST.getFirstChild());", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61bf1b58629df0661229e050598fc2bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/Resolver.java", "commitBeforeChange": "2dda964c91b5bc5dc42b78a6d0d74060b7062613", "commitAfterChange": "ddff555c2df8c132d70e4e2fa4dce7e7c8335e29", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      private IClass resolveArrayAccess(         SymTabAST node,         Scope location,         IClass context,         boolean referencePhase)", "signatureAfterChange": "      private IClass resolveArrayAccess(         SymTabAST node,         Scope location,         IClass context,         boolean referencePhase)", "diff": ["+        //resolve index expressions", "+        while (arrayNode.getType() == TokenTypes.INDEX_OP) {", "+            resolveExpression(exprNode, location, context, referencePhase);", "+            arrayNode = (SymTabAST) (arrayNode.getFirstChild());", "+            exprNode = (SymTabAST) (arrayNode.getNextSibling()); ", "+        }", "+        ", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da293ff54245fad6dacfa2d573870ea4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2162761f46668081a1230e1345cbecd2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetDefaultTokens()", "signatureAfterChange": "      @Test     public void testGetDefaultTokens()", "diff": ["-        ModifierOrderCheck modifierOrderCheckObj = new ModifierOrderCheck();", "-        int[] actual = modifierOrderCheckObj.getDefaultTokens();", "-        int[] expected = {TokenTypes.MODIFIERS};", "-        int[] unexpectedEmptyArray = ArrayUtils.EMPTY_INT_ARRAY;", "-        int[] unexpectedArray = {", "+        final ModifierOrderCheck modifierOrderCheckObj = new ModifierOrderCheck();", "+        final int[] actual = modifierOrderCheckObj.getDefaultTokens();", "+        final int[] expected = {TokenTypes.MODIFIERS};", "+        final int[] unexpectedEmptyArray = ArrayUtils.EMPTY_INT_ARRAY;", "+        final int[] unexpectedArray = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4abca3a52fff845486becfb9ca6a9585", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CommitValidationTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private static List<RevCommit> getCommitsByLastCommitAuthor(             Iterator<RevCommit> previousCommitsIterator)", "signatureAfterChange": "      private static List<RevCommit> getCommitsByLastCommitAuthor(             Iterator<RevCommit> previousCommitsIterator)", "diff": ["-        List<RevCommit> commits = new LinkedList<>();", "+        final List<RevCommit> commits = new LinkedList<>();", "-            RevCommit lastCommit = previousCommitsIterator.next();", "-            String lastCommitAuthor = lastCommit.getAuthorIdent().getName();", "+            final RevCommit lastCommit = previousCommitsIterator.next();", "+            final String lastCommitAuthor = lastCommit.getAuthorIdent().getName();", "-                RevCommit currentCommit = previousCommitsIterator.next();", "-                String currentCommitAuthor = currentCommit.getAuthorIdent().getName();", "+                final RevCommit currentCommit = previousCommitsIterator.next();", "+                final String currentCommitAuthor = currentCommit.getAuthorIdent().getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55fd10f34da037aaee608058357889b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/EmptyLineSeparatorTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void emptyLineSeparatorTest() throws Exception", "signatureAfterChange": "      @Test     public void emptyLineSeparatorTest() throws Exception", "diff": ["-        Class<EmptyLineSeparatorCheck> clazz = EmptyLineSeparatorCheck.class;", "-        String messageKey = \"empty.line.separator\";", "+        final Class<EmptyLineSeparatorCheck> clazz = EmptyLineSeparatorCheck.class;", "+        final String messageKey = \"empty.line.separator\";", "-        Configuration checkConfig = builder.getCheckConfig(\"EmptyLineSeparator\");", "-        String filePath = builder.getFilePath(\"EmptyLineSeparatorInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"EmptyLineSeparator\");", "+        final String filePath = builder.getFilePath(\"EmptyLineSeparatorInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d01b0b1116b943a1e3a5f2e8ec59d49", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        ModifierOrderCheck modifierOrderCheckObj = new ModifierOrderCheck();", "-        int[] actual = modifierOrderCheckObj.getAcceptableTokens();", "-        int[] expected = {TokenTypes.MODIFIERS};", "-        int[] unexpectedEmptyArray = ArrayUtils.EMPTY_INT_ARRAY;", "-        int[] unexpectedArray = {", "+        final ModifierOrderCheck modifierOrderCheckObj = new ModifierOrderCheck();", "+        final int[] actual = modifierOrderCheckObj.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.MODIFIERS};", "+        final int[] unexpectedEmptyArray = ArrayUtils.EMPTY_INT_ARRAY;", "+        final int[] unexpectedArray = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f0cfcc06a390add7af773da4a3bbccd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "signatureAfterChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "diff": ["-        int startLine = aLines.firstLine();", "-        int endLine = aLines.lastLine();", "-        int startCol = aLines.firstLineCol();", "+        final int startLine = aLines.firstLine();", "+        final int endLine = aLines.lastLine();", "+        final int startCol = aLines.firstLineCol();", "-        int realStartCol = getLineStart(mIndentCheck.getLines()[startLine - 1]);", "+        final int realStartCol =", "+            getLineStart(mIndentCheck.getLines()[startLine - 1]);", "-            Integer col = aLines.getStartColumn(new Integer(i));", "+            final Integer col = aLines.getStartColumn(new Integer(i));"]}]}
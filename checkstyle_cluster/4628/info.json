{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "601434f70670e523d973c36fb1dd3b49", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93895ef8db1e5b9196a51f2d4e69523e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java", "commitBeforeChange": "edd5ba536dfe706caf27fb4745105d646f572021", "commitAfterChange": "3d8fc87ef60d4e96068658ed0485aafdb2a42691", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void checkForParams()", "signatureAfterChange": "     private void checkForParams()", "diff": ["-        checkExpressionSubtree(init, expected, false, false);", "+        if (init != null) {", "+            checkExpressionSubtree(init, expected, false, false);", "-        DetailAST cond = getMainAst().findFirstToken(TokenTypes.FOR_CONDITION);", "-        checkExpressionSubtree(cond, expected, false, false);", "+            DetailAST cond =", "+                getMainAst().findFirstToken(TokenTypes.FOR_CONDITION);", "+            checkExpressionSubtree(cond, expected, false, false);", "-        DetailAST iter = getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR);", "-        checkExpressionSubtree(iter, expected, false, false);", "+            DetailAST iter =", "+                getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR);", "+            checkExpressionSubtree(iter, expected, false, false);", "+        }", "+        // for each", "+        else {", "+            DetailAST forEach =", "+                getMainAst().findFirstToken(TokenTypes.FOR_EACH_CLAUSE);", "+            checkExpressionSubtree(forEach, expected, false, false);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df96089a118b26ed2caa69a0c3e8a2bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java", "commitBeforeChange": "113ea8405c8b753540ee3423d7e37e383f269155", "commitAfterChange": "7f7db38a097a95c264307123924779380fb40077", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void checkForParams()", "signatureAfterChange": "     private void checkForParams()", "diff": ["-        checkExpressionSubtree(", "-            getMainAst().findFirstToken(TokenTypes.FOR_INIT),", "-            getLevel() + getIndentCheck().getBasicOffset(),", "-            false,", "-            false);", "-        checkExpressionSubtree(", "-            getMainAst().findFirstToken(TokenTypes.FOR_CONDITION),", "-            getLevel() + getIndentCheck().getBasicOffset(),", "-            false,", "-            false);", "-        checkExpressionSubtree(", "-            getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR),", "-            getLevel() + getIndentCheck().getBasicOffset(),", "-            false,", "-            false);", "+        IndentLevel expected = new IndentLevel(getLevel(), getBasicOffset());", "+", "+        DetailAST init = getMainAst().findFirstToken(TokenTypes.FOR_INIT);", "+        checkExpressionSubtree(init, expected, false, false);", "+", "+        DetailAST cond = getMainAst().findFirstToken(TokenTypes.FOR_CONDITION);", "+        checkExpressionSubtree(cond, expected, false, false);", "+", "+        DetailAST iter = getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR);", "+        checkExpressionSubtree(iter, expected, false, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe733a6022bb1cec91600ecb95edac44", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java", "commitBeforeChange": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65", "commitAfterChange": "88830ca708e2deb22cae333057ebddd15f7f9c57", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void checkForParams()", "signatureAfterChange": "     private void checkForParams()", "diff": ["-        if (init != null) {", "+        if (init == null) {", "+            // for each", "+            final DetailAST forEach =", "+                    getMainAst().findFirstToken(TokenTypes.FOR_EACH_CLAUSE);", "+            checkExpressionSubtree(forEach, expected, false, false);", "+        }", "+        else {", "-                getMainAst().findFirstToken(TokenTypes.FOR_CONDITION);", "+                    getMainAst().findFirstToken(TokenTypes.FOR_CONDITION);", "-                getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR);", "+                    getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR);", "-        }", "-        // for each", "-        else {", "-            final DetailAST forEach =", "-                getMainAst().findFirstToken(TokenTypes.FOR_EACH_CLAUSE);", "-            checkExpressionSubtree(forEach, expected, false, false);"]}]}
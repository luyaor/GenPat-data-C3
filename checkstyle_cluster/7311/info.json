{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ebfdec259bb118be81147e6c76f0b5e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08287a4a1f494ecd2dbb9b58367afdfe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "10f348bbfd91fd8c2bd7776aff3c03f549380a44", "commitAfterChange": "6c04cd63af392376159dc7aae41d85bbc348e96d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean isClassField(DetailAST ident)", "signatureAfterChange": "     private AbstractFrame checkField(DetailAST ast)", "diff": ["-    private boolean isClassField(DetailAST ident) {", "-        final LexicalFrame frame = findFrame(ident, false);", "-        return frame instanceof ClassFrame", "-                && ((ClassFrame) frame).hasInstanceMember(ident);", "+    private AbstractFrame checkField(DetailAST ast) {", "+        final AbstractFrame frame = findFrame(ast, false);", "+        if (frame != null", "+                && frame.getType() == FrameType.CLASS_FRAME", "+                && ((ClassFrame) frame).hasInstanceMember(ast)) {", "+            return frame;", "+        }", "+        return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "545b2bfcbe5f70eb5a4e061d14bb40e9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "10f348bbfd91fd8c2bd7776aff3c03f549380a44", "commitAfterChange": "6c04cd63af392376159dc7aae41d85bbc348e96d", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private boolean isClassMethod(DetailAST ident)", "signatureAfterChange": "     private AbstractFrame checkMethod(DetailAST ast)", "diff": ["-    private boolean isClassMethod(DetailAST ident) {", "-        final LexicalFrame frame = findFrame(ident, true);", "-        return frame instanceof ClassFrame", "-                && ((ClassFrame) frame).hasInstanceMethod(ident);", "+    private AbstractFrame checkMethod(DetailAST ast) {", "+        final AbstractFrame frame = findFrame(ast, true);", "+        if (frame != null", "+                && ((ClassFrame) frame).hasInstanceMethod(ast)) {", "+            return frame;", "+        }", "+        return null;"]}]}
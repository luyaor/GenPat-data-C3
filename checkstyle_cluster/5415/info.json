{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ecdee1485e20624c79781c51f3a8cfd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28d1bc36106e81075f6ce5684d60027a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "01d27913a71c29d6a769ed98ca7dd4ba01fe31eb", "commitAfterChange": "4cbd709c019cf1b69796858506d673f7b66d37c7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static DetailAST parse(FileContents aContents)         throws TokenStreamException, RecognitionException", "signatureAfterChange": "     public static DetailAST parse(FileContents aContents)         throws TokenStreamException, RecognitionException", "diff": ["-            final Java14Lexer jl = new Java14Lexer(sar);", "+            final GeneratedJava14Lexer jl = new GeneratedJava14Lexer(sar);", "-            final Java14Recognizer jr =", "-                new NEWSilentJava14Recognizer(jl);", "+            final GeneratedJava14Recognizer jr =", "+                new SilentJava14Recognizer(jl);", "-            final JavaLexer jl = new JavaLexer(sar);", "+            final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);", "-            final JavaRecognizer jr = new JavaRecognizer(jl);", "+            final GeneratedJavaRecognizer jr = new GeneratedJavaRecognizer(jl);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bb1e895016300029228cfc2bff12d32", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-        final boolean foundMatch = mMatcher.find();", "+        final boolean foundMatch = matcher.find();", "-        final LineColumn start = mText.lineColumn(mMatcher.start());", "-        final LineColumn end = mText.lineColumn(mMatcher.end());", "+        final LineColumn start = text.lineColumn(matcher.start());", "+        final LineColumn end = text.lineColumn(matcher.end());", "-        if (!mOptions.getSuppressor().shouldSuppress(start.getLine(),", "+        if (!options.getSuppressor().shouldSuppress(start.getLine(),", "-            mCurrentMatches++;", "-            if (mCurrentMatches > mOptions.getMaximum()) {", "-                if (\"\".equals(mOptions.getMessage())) {", "-                    mOptions.getReporter().log(start.getLine(),", "-                            \"regexp.exceeded\", mMatcher.pattern().toString());", "+            currentMatches++;", "+            if (currentMatches > options.getMaximum()) {", "+                if (\"\".equals(options.getMessage())) {", "+                    options.getReporter().log(start.getLine(),", "+                            \"regexp.exceeded\", matcher.pattern().toString());", "-                    mOptions.getReporter()", "-                            .log(start.getLine(), mOptions.getMessage());", "+                    options.getReporter()", "+                            .log(start.getLine(), options.getMessage());"]}]}
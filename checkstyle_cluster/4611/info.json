{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4563d0c0f949fc15c47497ed8f345501", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0aff9fa5e08a21bc086fc19aeb974a1f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "signatureAfterChange": "     private void checkException(FullIdent aExc, List<ClassInfo> aKnownExcs)", "diff": ["-    private void checkException(FullIdent aExc, List aKnownExcs)", "+    private void checkException(FullIdent aExc, List<ClassInfo> aKnownExcs)", "-        for (final Iterator known = aKnownExcs.iterator(); known.hasNext();) {", "-            final ClassInfo ci = (ClassInfo) known.next();", "+        for (final Iterator<ClassInfo> known = aKnownExcs.iterator(); known", "+                .hasNext();)", "+        {", "+            final ClassInfo ci = known.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f4529548b96a4270bec23fdcef95811", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "7c20c36cea276a2b9abb09e8b19eb5825e6a921a", "commitAfterChange": "262209477f39964a63103613f3e2c985da083371", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void tagSuppressions(Collection aComments)", "signatureAfterChange": "     private void tagSuppressions(Collection<TextBlock> aComments)", "diff": ["-    private void tagSuppressions(Collection aComments)", "+    private void tagSuppressions(Collection<TextBlock> aComments)", "-        for (final Iterator iter = aComments.iterator(); iter.hasNext();) {", "-            final TextBlock comment = (TextBlock) iter.next();", "+        for (final Iterator<TextBlock> iter = aComments.iterator(); iter", "+                .hasNext();)", "+        {", "+            final TextBlock comment = iter.next();"]}]}
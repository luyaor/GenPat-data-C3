{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96bf510dd1902549e731181f47e7255e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1660f53b35269214d3903d8f44203abf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java", "commitBeforeChange": "b2991ef9e72bd4c69797779357fd9dc2eab7a3ae", "commitAfterChange": "384ecfc7d5a8ec7f0711c8baae661118297272a2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public boolean matches(byte... bytes)", "signatureAfterChange": "     public boolean matches(byte... bytes)", "diff": ["-        final String s = new String(bytes);", "-        return s.equals(lineSeparator);", "+        if (this == LF_CR_CRLF) {", "+            // this silently assumes CRLF and ANY have the same length", "+            // and LF and CR are of length 1", "+            return CRLF.matches(bytes)", "+                || LF.matches(Arrays.copyOfRange(bytes, 1, 2))", "+                || CR.matches(Arrays.copyOfRange(bytes, 1, 2));", "+        }", "+        else {", "+            return Arrays.equals(bytes, lineSeparator);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9d043eb4d8653212d52739b79f71199", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "3ded7a11556a6258bcddd3ebe2d69a2058675601", "commitAfterChange": "69138e40225407ef560fd9d06d2903de37c83c2c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 1, "signatureBeforeChange": "     String[] getHeaderLines()", "signatureAfterChange": "     Configuration()         throws IllegalStateException", "diff": ["+     */", "+    Configuration()", "+        throws IllegalStateException", "+    {", "+        try {", "+            setParamPat(PARAMETER_PATTERN);", "+            setStaticPat(STATIC_PATTERN);", "+            setStaticFinalPat(CONST_PATTERN);", "+            setMemberPat(MEMBER_PATTERN);", "+            setTypePat(TYPE_PATTERN);", "+        }", "+        catch (RESyntaxException ex) {", "+            ex.printStackTrace();", "+            throw new IllegalStateException(ex.getMessage());", "+        }", "+    }"]}]}
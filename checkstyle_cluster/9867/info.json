{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3afc08551eaa5fd0de985063dca5a2e1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79eecc1975a056fa5600a66e7f98559d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheck.java", "commitBeforeChange": "d74f5bb61c9d8a45af94f5539b2001d25e1f3076", "commitAfterChange": "50a13cf5bd17bf65f82c719fcdc8e7429d59e898", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (!modifiers.branchContains(TokenTypes.ABSTRACT)) {", "-            super.visitToken(ast);", "+        if (!modifiers.branchContains(TokenTypes.ABSTRACT)", "+                && ast.findFirstToken(TokenTypes.OBJBLOCK)", "+                    .findFirstToken(TokenTypes.CTOR_DEF) == null) {", "+            log(ast.getLineNo(), MSG_KEY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa25f703a3bddf434297282a99eec509", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "0d66a67b0d3920031422d5bb02f0fc02ce580bae", "commitAfterChange": "c9c475a6c7a8cb728ba1c091b386db46f11a781f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                if (ScopeUtils.inInterfaceBlock(ast)", "-                    || inAbstractOrNativeMethod(ast)", "-                    || inLambda(ast)) {", "-                    break;", "+                if (!inLambda(ast)", "+                        && !ast.branchContains(TokenTypes.FINAL)", "+                        && !inAbstractOrNativeMethod(ast)", "+                        && !ScopeUtils.inInterfaceBlock(ast)) {", "+                    insertVariable(ast);", "+                break;", "-                        && shouldCheckEnhancedForLoopVariable(ast)", "+                        && shouldCheckEnhancedForLoopVariable(ast)"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f83f8742bc0e587b230f6b7a653c836", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b656ee6f4b3ee01dbbacbd08600e991", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "96c668724bc05a11ceb031dda71efe1e9e69480d", "commitAfterChange": "788b41973d5747c7b4699a853b62168cf0001df6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-        final Scope typeScope =", "-            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd6e403e32812062a716e71d1c887c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d9ef0ac5eed2084dc0298ec981f6fc04cf628e85", "commitAfterChange": "0a72322796c28266f07df8af6f7e000aa9cf0e48", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST aAST)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST aAST, final Scope aScope)", "diff": ["-    private boolean shouldCheck(final DetailAST aAST)", "+    private boolean shouldCheck(final DetailAST aAST, final Scope aScope)", "-        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-        final Scope scope = ScopeUtils.inInterfaceOrAnnotationBlock(aAST)", "-            ? Scope.PUBLIC", "-            : declaredScope;", "-        return scope.isIn(mScope)", "-            && surroundingScope.isIn(mScope)", "-            && ((mExcludeScope == null) || !scope.isIn(mExcludeScope)", "-                || !surroundingScope.isIn(mExcludeScope));", "+        return aScope.isIn(mScope)", "+                && surroundingScope.isIn(mScope)", "+                && ((mExcludeScope == null) || !aScope.isIn(mExcludeScope)", "+                    || !surroundingScope.isIn(mExcludeScope));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2942de22b9e61ae75ae50163c91e94e3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a57e60cb2ea0c4ebe57f66ad15800c7a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      protected void verify(Checker aC,                           File[] aProcessedFiles,                           String aMessageFileName,                           String[] aExpected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker c,                           File[] processedFiles,                           String messageFileName,                           String[] expected)             throws Exception", "diff": ["-    protected void verify(Checker aC,", "-                          File[] aProcessedFiles,", "-                          String aMessageFileName,", "-                          String[] aExpected)", "+    protected void verify(Checker c,", "+                          File[] processedFiles,", "+                          String messageFileName,", "+                          String[] expected)", "-        mStream.flush();", "+        stream.flush();", "-        Collections.addAll(theFiles, aProcessedFiles);", "-        final int errs = aC.process(theFiles);", "+        Collections.addAll(theFiles, processedFiles);", "+        final int errs = c.process(theFiles);", "-                new ByteArrayInputStream(mBAOS.toByteArray());", "+                new ByteArrayInputStream(BAOS.toByteArray());", "-        for (int i = 0; i < aExpected.length; i++) {", "-            final String expected = aMessageFileName + \":\" + aExpected[i];", "+        for (int i = 0; i < expected.length; i++) {", "+            final String expectedResult = messageFileName + \":\" + expected[i];", "-            assertEquals(\"error message \" + i, expected, actual);", "+            assertEquals(\"error message \" + i, expectedResult, actual);", "-                aExpected.length, errs);", "-        aC.destroy();", "+                expected.length, errs);", "+        c.destroy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e290408b8371418cc9bfb8aa2c8470fa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java", "commitBeforeChange": "1ef7197d95faaa734cf4a506bebc8229bcd4d1f1", "commitAfterChange": "e68f47ce99313c7dafade4ac4a55fccf12c09d5e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @Test     public void testGetTokenFieldValue() throws NoSuchMethodException", "signatureAfterChange": "      @Test     public void testGetIntFromInaccessibleField() throws NoSuchFieldException", "diff": ["+", "+    @Test", "+    public void testGetIntFromInaccessibleField() throws NoSuchFieldException {", "+        Field field = Integer.class.getDeclaredField(\"value\");", "+", "+        try {", "+            Utils.getIntFromField(field, 0);", "+        }", "+        catch (IllegalStateException expected) {", "+            // expected", "+        }", "+    }", "-", "-    @Test", "-    public void testGetTokenFieldValue() throws NoSuchMethodException {", "-        Integer id = 0;", "-        try {", "-            // overwrite static field with new value", "-            Method method = Utils.class.getDeclaredMethod(\"getTokenFieldValue\",", "-                    Field.class, String.class);", "-            method.setAccessible(true);", "-            method.invoke(null, Field.class.getDeclaredField(\"modifiers\"), \"smth_strange\");", "-", "-            fail();", "-        }", "-        catch (InvocationTargetException expected) {", "-            // in method we throw IllegalStateException,", "-            // but JDK wrap that in InvocationTargetException", "-            assertEquals(IllegalStateException.class, expected.getCause().getClass());", "-            assertEquals(\"Failed to instantiate collection of Java tokens\",", "-                    expected.getCause().getMessage());", "-        }", "-        catch (Exception e) {", "-            fail();", "-        }", "-    }"]}]}
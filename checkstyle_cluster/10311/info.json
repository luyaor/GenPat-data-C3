{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09a47b1657812b6683d5b36144e071e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a38b96f01b806a744e9efd632255497", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java", "commitBeforeChange": "4287706cb4a0f7b8ab39bb6d5314b8b40841026a", "commitAfterChange": "0868085098dfde138eee8817c66cd4d214633403", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean containsJavadocTag(final TextBlock javadoc)", "signatureAfterChange": "     private boolean containsJavadocTag(final TextBlock javadoc)", "diff": ["-                // Look for the rest of the comment if all we saw was", "-                // the tag and the name. Stop when we see '*/' (end of", "-                // Javadoc), '@' (start of next tag), or anything that's", "-                // not whitespace or '*' characters.", "+                found = validateTagAtTheRestOfComment(lines, found, currentLine, i);", "-                for (int reindex = i + 1;", "-                    reindex < lines.length; reindex++) {", "-                    final Matcher multilineCont =", "-                        MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT", "-                        .matcher(lines[reindex]);", "+            }", "+        }", "+        return found;", "+    }", "-                    if (multilineCont.find()) {", "-                        reindex = lines.length;", "-                        final String lFin = multilineCont.group(1);", "-                        if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)", "-                            && !lFin.equals(MissingDeprecatedCheck.END_JAVADOC)) {", "-                            if (found) {", "-                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,", "-                                    JavadocTagInfo.DEPRECATED.getText());", "-                            }", "-                            found = true;", "-                        }", "-                        else {", "-                            this.log(currentLine, MSG_KEY_JAVADOC_MISSING);", "-                            if (found) {", "-                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,", "-                                    JavadocTagInfo.DEPRECATED.getText());", "-                            }", "-                            found = true;", "-                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb9f8d14f1a122afec495401d1e3a6d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "2a8aba9a54d2112b142a1b9e0c4e762e780155c1", "commitAfterChange": "7fa61f5c0b05fc44c9f55a23c816e8e072dcec0e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType)", "signatureAfterChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType)", "diff": ["-        //", "-        // Only Javadoc testing below", "-        //", "-        final Scope typeScope =", "-            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "-", "-        if (!inCheckScope(typeScope)) {", "-            return; // no need to really check anything", "-        }", "-", "-        final int lineNo = (aMods.size() > 0)", "-            ? aMods.getFirstLineNo()", "-            : aType.getLineNo();", "-", "-        final String[] jd = getJavadocBefore(lineNo - 1);", "-        if (jd == null) {", "-//            mMessages.add(lineNo, \"javadoc.missing\");", "-        }", "-        else if (mInScope.size() == 0) {", "-            // don't check author/version for inner classes", "-            if (!mConfig.isAllowNoAuthor()", "-                && (MATCH_JAVADOC_AUTHOR.grep(jd).length == 0))", "-            {", "-                mMessages.add(lineNo, \"type.missingTag\", \"@author\");", "-            }", "-            if (mConfig.isRequireVersion()", "-                && (MATCH_JAVADOC_VERSION.grep(jd).length == 0))", "-            {", "-                mMessages.add(lineNo, \"type.missingTag\", \"@version\");", "-            }", "-        }"]}]}
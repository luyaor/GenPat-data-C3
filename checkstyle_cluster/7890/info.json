{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b8e99063f49d9a39fca42e4106cf357", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d05aab91976e3ea29add2bcccebd840", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java", "commitBeforeChange": "6985c4758d4a3252951a6a26b8efdd7b5f0adff4", "commitAfterChange": "b405880b6e79f143c3ba3651fe6c8b68324fca51", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            case TokenTypes.EXPR:", "-                visitExpr(ast);", "-                break;", "-                visitSemi(ast);", "+                DetailAST currentStatement = ast;", "+                if (isMultilineStatement(currentStatement)) {", "+                    currentStatement = ast.getPreviousSibling();", "+                }", "+                if (isOnTheSameLine(currentStatement, lastStatementEnd,", "+                        forStatementEnd) && !inForHeader) {", "+                    log(ast, MSG_KEY);", "+                }", "-            case TokenTypes.FOR_INIT:", "-                inForHeader = true;", "+            case TokenTypes.FOR_ITERATOR:", "+                forStatementEnd = ast.getLineNo();", "+                inForHeader = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0c3c98c3d1d290760db57e015d3f536", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java", "commitBeforeChange": "b17515919bd8064e7c6c245956395407bd59a3e7", "commitAfterChange": "af047afee8216a4b0db9027dd013a1aad2be9494", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                DetailAST currentStatement = ast;", "-                final boolean hasResourcesPrevSibling =", "-                        currentStatement.getPreviousSibling() != null", "-                        && currentStatement.getPreviousSibling().getType() == TokenTypes.RESOURCES;", "-                if (!hasResourcesPrevSibling && isMultilineStatement(currentStatement)) {", "-                    currentStatement = ast.getPreviousSibling();", "-                }", "-                if (!inForHeader", "-                        && isOnTheSameLine(currentStatement, lastStatementEnd, forStatementEnd)) {", "-                    log(ast, MSG_KEY);", "-                }", "+                checkIfSemicolonIsInDifferentLineThanPrevious(ast);", "+                break;", "+            case TokenTypes.LAMBDA:", "+                isInLambda = true;", "+                countOfSemiInLambda.push(0);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd9b0916c83ff7b59c2bb3aea23c723e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01557ff816f8ec1ac01a752909a863ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "2ed00e0af3ede8d8a276bbde08c5492a42df842d", "commitAfterChange": "e81ca8290b4efd42c3454ffa0159b739f958ea48", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void visitLiteralFor(DetailAST ast)", "signatureAfterChange": "     private void visitLiteralFor(DetailAST ast)", "diff": ["-        DetailAST parenAst = ast.findFirstToken(TokenTypes.LPAREN);", "-        if (!isPrecedingEmptyForInit(parenAst)) {", "-            processLeft(parenAst);", "+        final DetailAST lparen = ast.findFirstToken(TokenTypes.LPAREN);", "+        if (!isPrecedingEmptyForInit(lparen)) {", "+            processLeft(lparen);", "-        parenAst = ast.findFirstToken(TokenTypes.RPAREN);", "-        if (!isFollowsEmptyForIterator(parenAst)) {", "-            processRight(parenAst);", "+        final DetailAST rparen = ast.findFirstToken(TokenTypes.RPAREN);", "+        if (!isFollowsEmptyForIterator(rparen)) {", "+            processRight(rparen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56a98a85ee7ce45bc67222795ddc4a36", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "commitBeforeChange": "5670252b46f4915b276e647fa000361915eb4ff4", "commitAfterChange": "2dda964c91b5bc5dc42b78a6d0d74060b7062613", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        // method is ok if it is empty", "-        DetailAST implemetation = aAST.findFirstToken(TokenTypes.SLIST);", "-        if (implemetation.getFirstChild().getType() == TokenTypes.RCURLY) {", "+        // method is ok if it is implementation can verified to be empty", "+        // Note: native methods don't have impl in java code, so", "+        // implementation can be null even if method not abstract", "+        DetailAST implementation = aAST.findFirstToken(TokenTypes.SLIST);", "+        if (implementation != null", "+            && implementation.getFirstChild().getType() == TokenTypes.RCURLY)", "+        {"]}]}
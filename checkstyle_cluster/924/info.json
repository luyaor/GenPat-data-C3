{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b71795b97dfc58473d005e4d5e57e52", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64253f36f3cca5a7beb68696f1c3a97e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "14f2b27f8f5947d09384867c4483422bfbbb3e14", "commitAfterChange": "4509e18f16ec2819feee6fa6393c0821d74965dc", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["+                    final ClassResolver cr = new ClassResolver(", "+                        Thread.currentThread().getContextClassLoader(),", "+                        mPkgName, mImports);", "-                        reqd = !Utils.isRuntimeException(", "-                            tag.getArg1(),", "-                            this.getClass().getClassLoader());", "+                        reqd = !RuntimeException.class.isAssignableFrom(", "+                            cr.resolve(tag.getArg1()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f862aaa3d8455ed2320c4bedbcee594", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "ecc852d48b9d26398926b255e3cd68572119c106", "commitAfterChange": "751257987b2ef5f301e2deb3b55302196e5015af", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethod(MethodSignature aSig)", "signatureAfterChange": "     void verifyMethod(MethodSignature aSig)", "diff": ["-            log(aSig.getName().getLineNo(),", "-                aSig.getName().getColumnNo(),", "-                \"name.invalidPattern\",", "-                \"method\",", "-                aSig.getName().getText(),", "-                mConfig.getMethodPat());", "+            mMessages.add(aSig.getName().getLineNo(),", "+                          aSig.getName().getColumnNo(),", "+                          \"name.invalidPattern\",", "+                          \"method\",", "+                          aSig.getName().getText(),", "+                          mConfig.getMethodPat());", "-            log(aSig.getFirstLineNo(),", "-                aSig.getFirstColNo(),", "-                \"maxParam\", new Integer(mConfig.getMaxParameters()));", "+            mMessages.add(aSig.getFirstLineNo(),", "+                          aSig.getFirstColNo(),", "+                          \"maxParam\", new Integer(mConfig.getMaxParameters()));", "-            log(aSig.getModSet().getFirstLineNo(),", "-                aSig.getModSet().getFirstColNo(),", "-                \"redundantModifier\", \"public\");", "+            mMessages.add(aSig.getModSet().getFirstLineNo(),", "+                          aSig.getModSet().getFirstColNo(),", "+                          \"redundantModifier\", \"public\");", "-            log(aSig.getModSet().getFirstLineNo(),", "-                aSig.getModSet().getFirstColNo(),", "-                \"redundantModifier\", \"abstract\");", "+            mMessages.add(aSig.getModSet().getFirstLineNo(),", "+                          aSig.getModSet().getFirstColNo(),", "+                          \"redundantModifier\", \"abstract\");", "-            log(aSig.getFirstLineNo(),", "-                aSig.getFirstColNo(),", "-                \"javadoc.missing\", \"method\");", "+            mMessages.add(aSig.getFirstLineNo(),", "+                          aSig.getFirstColNo(),", "+                          \"javadoc.missing\", \"method\");", "-                        log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");", "+                        mMessages.add(jt.getLineNo(),", "+                                      \"javadoc.unusedTagGeneral\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba13e7df3778f432ab695bbc58234a80", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java", "commitBeforeChange": "8aec5bba7ea5d9c702db9a116d005ad81afbf1ad", "commitAfterChange": "085ce12db0983590844ccc24ea49f91686a30ed8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static FilterSet loadSuppressions(             InputSource source, String sourceName)         throws CheckstyleException", "signatureAfterChange": "     private static FilterSet loadSuppressions(             InputSource source, String sourceName)         throws CheckstyleException", "diff": ["-            throw new CheckstyleException(\"Unable to parse \"", "-                    + sourceName + \" - \" + e.getMessage(), e);", "+            final String message = String.format(\"Unable to parse %s - %s\",", "+                    sourceName, e.getMessage());", "+            throw new CheckstyleException(message, e);", "-            throw new CheckstyleException(\"Number format exception \"", "-                + sourceName + \" - \" + e.getMessage(), e);", "+            final String message = String.format(\"Number format exception %s - %s\",", "+                    sourceName, e.getMessage());", "+            throw new CheckstyleException(message, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d90eefdad9753ce81962ba0ccf468b12", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "f747835b6b4bd894eed2ef17eb059a003fb4d988", "commitAfterChange": "6ebcf2733b6c635d5f044aa35caf2a610c7723ff", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean containsOneArg(final AST expr)", "signatureAfterChange": "     private static boolean containsOneArgument(DetailAST methodCall)", "diff": ["+     */", "+    private static boolean containsOneArgument(DetailAST methodCall) {", "+        final DetailAST elist = methodCall.findFirstToken(TokenTypes.ELIST);", "+        return elist.getChildCount() == 1;", "-     */", "-    private boolean containsOneArg(final AST expr) {", "-        return !containsNoArgs(expr) && !containsMultiArgs(expr);"]}]}
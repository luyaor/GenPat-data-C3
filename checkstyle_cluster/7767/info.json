{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bea24453005b0aea11c6527b445046c2", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dee23aa186541785bd429568ca9e186", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r     public void process(final List<File> aFiles)", "signatureAfterChange": "\r \r     @Override\r     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    /** {@inheritDoc} */\r", "-    public void process(final List<File> aFiles)\r", "+\r", "+    @Override\r", "+    protected void processFiltered(File aFile, List<String> aLines)\r", "-        final MessageDispatcher msgDispatcher = getMessageDispatcher();\r", "-        for (final File file : aFiles) {\r", "-            final String path = file.getPath();\r", "-            msgDispatcher.fireFileStarted(path);\r", "-            LineNumberReader lnr = null;\r", "-            try {\r", "-                lnr = new LineNumberReader(new FileReader(file));\r", "-                while (true) {\r", "-                    final String line = lnr.readLine();\r", "-                    if (null == line) {\r", "-                        break;\r", "-                    }\r", "-                    final int tabPosition = line.indexOf('\\t');\r", "-                    if (tabPosition != -1) {\r", "-                        if (mEachLine) {\r", "-                            log(lnr.getLineNumber(), tabPosition + 1,\r", "-                                \"containsTab\");\r", "-                        }\r", "-                        else {\r", "-                            log(lnr.getLineNumber(), tabPosition + 1,\r", "-                                \"file.containsTab\");\r", "-                            break;\r", "-                        }\r", "-                    }\r", "+        int lineNum = 0;\r", "+        for (final String line : aLines) {\r", "+            lineNum++;\r", "+            final int tabPosition = line.indexOf('\\t');\r", "+            if (tabPosition != -1) {\r", "+                if (mEachLine) {\r", "+                    log(lineNum, tabPosition + 1, \"containsTab\");\r", "+                }\r", "+                else {\r", "+                    log(lineNum, tabPosition + 1, \"file.containsTab\");\r", "+                    break;\r", "-            catch (IOException ioe) {\r", "-                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\r", "-                log(0, \"Unable to read file: \" + ioe);\r", "-            }\r", "-            finally {\r", "-                Utils.closeQuietly(lnr);\r", "-            }\r", "-            fireErrors(path);\r", "-            msgDispatcher.fireFileFinished(path);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "304d3518892689ae0139df5fc3bc0c19", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        Arrays.fill(mCounts, 0);", "-        countTokens(aAST, 0);", "+        Arrays.fill(counts, 0);", "+        countTokens(ast, 0);", "-        final String name = TokenTypes.getTokenName(aAST.getType());", "+        final String name = TokenTypes.getTokenName(ast.getType());", "-        if (mSumTokenCounts) {", "+        if (sumTokenCounts) {", "-            for (int element : mLimitedTokens) {", "-                total += mCounts[element - 1];", "+            for (int element : limitedTokens) {", "+                total += counts[element - 1];", "-            if (total < mMinimumNumber) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "-                        (null == mMinimumMessage) ? \"descendant.token.sum.min\"", "-                                : mMinimumMessage,", "+            if (total < minimumNumber) {", "+                log(ast.getLineNo(), ast.getColumnNo(),", "+                        (null == minimumMessage) ? \"descendant.token.sum.min\"", "+                                : minimumMessage,", "-                        String.valueOf(mMinimumNumber), name);", "+                        String.valueOf(minimumNumber), name);", "-            if (total > mMaximumNumber) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "-                        (null == mMaximumMessage) ? \"descendant.token.sum.max\"", "-                                : mMaximumMessage,", "+            if (total > maximumNumber) {", "+                log(ast.getLineNo(), ast.getColumnNo(),", "+                        (null == maximumMessage) ? \"descendant.token.sum.max\"", "+                                : maximumMessage,", "-                        String.valueOf(mMaximumNumber),", "+                        String.valueOf(maximumNumber),", "-            for (int element : mLimitedTokens) {", "-                final int tokenCount = mCounts[element - 1];", "-                if (tokenCount < mMinimumNumber) {", "+            for (int element : limitedTokens) {", "+                final int tokenCount = counts[element - 1];", "+                if (tokenCount < minimumNumber) {", "-                    log(aAST.getLineNo(), aAST.getColumnNo(),", "-                            (null == mMinimumMessage) ? \"descendant.token.min\"", "-                                    : mMinimumMessage,", "+                    log(ast.getLineNo(), ast.getColumnNo(),", "+                            (null == minimumMessage) ? \"descendant.token.min\"", "+                                    : minimumMessage,", "-                            String.valueOf(mMinimumNumber),", "+                            String.valueOf(minimumNumber),", "-                if (tokenCount > mMaximumNumber) {", "+                if (tokenCount > maximumNumber) {", "-                    log(aAST.getLineNo(), aAST.getColumnNo(),", "-                            (null == mMaximumMessage) ? \"descendant.token.max\"", "-                                    : mMaximumMessage,", "+                    log(ast.getLineNo(), ast.getColumnNo(),", "+                            (null == maximumMessage) ? \"descendant.token.max\"", "+                                    : maximumMessage,", "-                            String.valueOf(mMaximumNumber),", "+                            String.valueOf(maximumNumber),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a652bb9f14cbe278e73878871788b7a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "fa7617c2223dae31f3ad486002f60201667e7a95", "commitAfterChange": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Class resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "signatureAfterChange": "     public Class resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "diff": ["-        if (isLoadable(aName)) {", "-            return safeLoad(aName);", "-        }", "-        //Perhaps it's fully-qualified inner class", "-        int dotIdx = aName.lastIndexOf(\".\");", "-        if (dotIdx != -1) {", "-            final String cn = aName.substring(0, dotIdx) + \"$\"", "-                + aName.substring(dotIdx + 1);", "-            if (isLoadable(cn)) {", "-                return safeLoad(cn);", "-            }", "+        Class clazz = resolveQualifiedName(aName);", "+        if (clazz != null) {", "+            return clazz;", "-                if (isLoadable(imp)) {", "-                    return safeLoad(imp);", "+                clazz = resolveQualifiedName(imp);", "+                if (clazz != null) {", "+                    return clazz;", "-                // perhaps this is a import for inner class", "-                // let's try load it.", "-                final int dot = imp.lastIndexOf(\".\");", "-                if (dot != -1) {", "-                    final String innerName = imp.substring(0, dot) + \"$\"", "-                        + imp.substring(dot + 1);", "-                    if (isLoadable(innerName)) {", "-                        return safeLoad(innerName);", "-                    }", "-                }", "+", "-            final String fqn = mPkg + \".\" + aName;", "-            if (isLoadable(fqn)) {", "-                return safeLoad(fqn);", "+            clazz = resolveQualifiedName(mPkg + \".\" + aName);", "+            if (clazz != null) {", "+                return clazz;", "-        // try \"java.lang.\"", "-        final String langClass = \"java.lang.\" + aName;", "-        if (isLoadable(langClass)) {", "-            return safeLoad(langClass);", "-        }", "-", "-                if (isLoadable(fqn)) {", "-                    return safeLoad(fqn);", "+                clazz = resolveQualifiedName(fqn);", "+                if (clazz != null) {", "+                    return clazz;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d243e73aaab1bb5419cce005d83134e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "3d56a294c07f425b7cf8fc9b48e41c3e531c8385", "commitAfterChange": "6a5d1ff83441b0163195dbac42aa872edf5dbee7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-", "-        for (int element : mLimitedTokens) {", "-            final int tokenCount = mCounts[element - 1];", "-            if (tokenCount < mMinimumNumber) {", "-                final String descendantName =", "-                    TokenTypes.getTokenName(element);", "-                log(aAST.getLineNo(), aAST.getColumnNo(), mMinimumMessage,", "-                    \"\" + tokenCount, \"\" + mMinimumNumber,", "-                    name, descendantName);", "+        if (mSumTokenCounts) {", "+            int total = 0;", "+            for (int element : mLimitedTokens) {", "+                total += mCounts[element - 1];", "-            if (tokenCount > mMaximumNumber) {", "-                final String descendantName =", "-                    TokenTypes.getTokenName(element);", "-                log(aAST.getLineNo(), aAST.getColumnNo(), mMaximumMessage,", "-                    \"\" + tokenCount, \"\" + mMaximumNumber,", "-                    name, descendantName);", "+            if (total < mMinimumNumber) {", "+                log(aAST.getLineNo(), aAST.getColumnNo(),", "+                        (null == mMinimumMessage) ? \"descendant.token.sum.min\"", "+                                : mMinimumMessage,", "+                        String.valueOf(total),", "+                        String.valueOf(mMinimumNumber), name);", "+            }", "+            if (total > mMaximumNumber) {", "+                log(aAST.getLineNo(), aAST.getColumnNo(),", "+                        (null == mMaximumMessage) ? \"descendant.token.sum.max\"", "+                                : mMaximumMessage,", "+                        String.valueOf(total),", "+                        String.valueOf(mMaximumNumber),", "+                        name);", "+            }", "+        }", "+        else {", "+            for (int element : mLimitedTokens) {", "+                final int tokenCount = mCounts[element - 1];", "+                if (tokenCount < mMinimumNumber) {", "+                    final String descendantName = TokenTypes", "+                            .getTokenName(element);", "+                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+                            (null == mMinimumMessage) ? \"descendant.token.min\"", "+                                    : mMinimumMessage,", "+                            String.valueOf(tokenCount),", "+                            String.valueOf(mMinimumNumber),", "+                            name,", "+                            descendantName);", "+                }", "+                if (tokenCount > mMaximumNumber) {", "+                    final String descendantName = TokenTypes", "+                            .getTokenName(element);", "+                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+                            (null == mMaximumMessage) ? \"descendant.token.max\"", "+                                    : mMaximumMessage,", "+                            String.valueOf(tokenCount),", "+                            String.valueOf(mMaximumNumber),", "+                            name,", "+                            descendantName);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9a10a46c9a583e0d1e9244876a2bc43", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "6c11cedd3bc24183534dd10d6442149d267693b5", "commitAfterChange": "40bb6812631517615cfc45efeb5bdcc93b95a8ae", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["+        if (sumTokenCounts) {", "+            logAsTotal(ast);", "+        }", "+        else {", "+            logAsSeparated(ast);", "+        }", "+    }", "-        if (sumTokenCounts) {", "-            int total = 0;", "-            for (int element : limitedTokens) {", "-                total += counts[element - 1];", "-            }", "-            if (total < minimumNumber) {", "-                        null == minimumMessage ? MSG_KEY_SUM_MIN", "-                        String.valueOf(total),", "-                        String.valueOf(minimumNumber), name);", "-            if (total > maximumNumber) {", "-                        null == maximumMessage ? MSG_KEY_SUM_MAX", "-                        String.valueOf(total),", "-                        name);", "-        else {", "-            for (int element : limitedTokens) {", "-                final int tokenCount = counts[element - 1];", "-                if (tokenCount < minimumNumber) {", "-                    final String descendantName = Utils", "-                            .getTokenName(element);", "-                    log(ast.getLineNo(), ast.getColumnNo(),", "-                            null == minimumMessage ? MSG_KEY_MIN", "-                                    : minimumMessage,", "-                            String.valueOf(tokenCount),", "-                            String.valueOf(minimumNumber),", "-                            name,", "-                            descendantName);", "-                }", "-                if (tokenCount > maximumNumber) {", "-                    final String descendantName = Utils", "-                            .getTokenName(element);", "-                    log(ast.getLineNo(), ast.getColumnNo(),", "-                            null == maximumMessage ? MSG_KEY_MAX", "-                                    : maximumMessage,", "-                            String.valueOf(tokenCount),", "-                            String.valueOf(maximumNumber),", "-                            name,", "-                            descendantName);", "-                }", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd57948cd93a42ebd081e3e3c066589", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     public void process(List<File> aFiles)", "signatureAfterChange": "\r \r     @Override\r     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    /** {@inheritDoc} */\r", "-    public void process(List<File> aFiles)\r", "-        final List<File> javaFiles = filter(aFiles);\r", "-        final Set<File> directories = getParentDirs(javaFiles);\r", "-        for (File dir : directories) {\r", "-            // Check for the preferred file.\r", "-            final MessageDispatcher dispatcher = getMessageDispatcher();\r", "-            final File packageInfo = new File(dir, \"package-info.java\");\r", "-            final File packageHtml = new File(dir, \"package.html\");\r", "-            final String path;\r", "-\r", "-            if (packageInfo.exists()) {\r", "-                path = packageInfo.getPath();\r", "-                dispatcher.fireFileStarted(path);\r", "-                if (packageHtml.exists()) {\r", "-                    log(0, \"javadoc.legacyPackageHtml\");\r", "-                }\r", "-            }\r", "-            else if (mAllowLegacy && packageHtml.exists()) {\r", "-                path = packageHtml.getPath();\r", "-                dispatcher.fireFileStarted(path);\r", "-            }\r", "-            else {\r", "-                path = packageInfo.getPath();\r", "-                dispatcher.fireFileStarted(path);\r", "-                log(0, \"javadoc.packageInfo\");\r", "-            }\r", "-            fireErrors(path);\r", "-            dispatcher.fireFileFinished(path);\r", "-        }\r", "+    @Override\r", "+    protected void processFiltered(File aFile, List<String> aLines)\r", "+        // Check if already processed directory\r", "+        final File dir = aFile.getParentFile();\r", "+        if (mDirectoriesChecked.contains(dir)) {\r", "+            return;\r", "+        mDirectoriesChecked.add(dir);\r", "+        \r", "+        // Check for the preferred file.\r", "+        final File packageInfo = new File(dir, \"package-info.java\");\r", "+        final File packageHtml = new File(dir, \"package.html\");\r", "+\r", "+        if (packageInfo.exists()) {\r", "+            if (packageHtml.exists()) {\r", "+                log(0, \"javadoc.legacyPackageHtml\");\r", "+            }\r", "+        }   \r", "+        else if (mAllowLegacy && packageHtml.exists()) {\r", "+        }\r", "+        else {\r", "+            log(0, \"javadoc.packageInfo\");\r", "+        }\r"]}]}
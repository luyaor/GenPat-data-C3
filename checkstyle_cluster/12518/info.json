{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe9d601247276a3203fa921db125228a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0267b35859eb96c307db75e57d83651e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java", "commitBeforeChange": "44b3fe0b146d93d297e718c393dddf2d8a63809e", "commitAfterChange": "d938bf243b995b18a52ebbbd552497c78c6e5e30", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void logsStarredImportViolation(DetailAST startingDot)", "signatureAfterChange": "     private void logsStarredImportViolation(DetailAST startingDot)", "diff": ["-        if (isStaredImport(name) && !excludes.contains(name.getText())) {", "-            log(startingDot.getLineNo(), MSG_KEY, name.getText());", "+        final String importText = name.getText();", "+        if (importText.endsWith(\".*\") && !excludes.contains(importText)) {", "+            log(startingDot.getLineNo(), MSG_KEY, importText);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54514baa682fa761fbcc50e921a56448", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "897c4164bd289ea45d5c600f11816f4379bd4421", "commitAfterChange": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                    checkTag(lineNo, cmt.getText(), \"@author\",", "-                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);", "-                    checkTag(lineNo, cmt.getText(), \"@version\",", "-                            mVersionTagRE, mVersionFormatRE, mVersionFormat);", "+                    Vector tags = getJavadocTags(cmt);", "+                    checkTag(lineNo, tags, \"author\",", "+                             mAuthorFormatRE, mAuthorFormat);", "+                    checkTag(lineNo, tags, \"version\",", "+                             mVersionFormatRE, mVersionFormat);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "814e2a46ffad5ba8d642bc95c60bf31f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyForIteratorPadCheck.java", "commitBeforeChange": "4a0b798adbce23e37a9d2445079503cb8d624eed", "commitAfterChange": "ee8467d36723b5b3562b4f101e84950a4320ecf1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            final String line = getLines()[aAST.getLineNo() - 1];", "-            final int after = aAST.getColumnNo() - 1;", "+            //empty for iterator. test pad after semi.", "+            final DetailAST semi = aAST.getPreviousSibling();", "+            final String line = getLines()[semi.getLineNo() - 1];", "+            final int after = semi.getColumnNo() + 1;", "+            //don't check if at end of line", "-                    log(aAST.getLineNo(), after, \"ws.followed\", \";\");", "+                    log(semi.getLineNo(), after, \"ws.followed\", \";\");", "-                         && !Character.isWhitespace(line.charAt(after))", "-                         && (line.charAt(after) != ')'))", "+                         && !Character.isWhitespace(line.charAt(after)))", "-                    log(aAST.getLineNo(), after, \"ws.notFollowed\", \";\");", "+                    log(semi.getLineNo(), after, \"ws.notFollowed\", \";\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e85e5579ccadd156b0fdb05b864c4b33", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java", "commitBeforeChange": "d91236c5ca052899bfd21ac5f378dcaf8e864750", "commitAfterChange": "943e07af07c27cda9b6d7298863484ef1e28a3ad", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aDetailAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aDetailAST)", "diff": ["+        final DetailAST methodDef = aDetailAST.getParent();", "-        if (!(shouldIgnoreMethod(aDetailAST.getParent().findFirstToken(", "-                                     TokenTypes.IDENT).getText())))", "-        {", "+        if (!isIgnorableMethod(methodDef)) {", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05729f08d227c1ce4b4bcc4acc788617", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39f6079463cb59a99848caaa7811d97b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "c09a1ecf33f1ab0451bdf8686ceb240cef4c4496", "commitAfterChange": "f7309c44049963f36cd332c369cc267244aaaf63", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean hasObjectParameter(DetailAST ast)", "signatureAfterChange": "     private static boolean isFirstParameterObject(DetailAST methodDefAst)", "diff": ["-    private boolean hasObjectParameter(DetailAST ast) {", "-        // one parameter?", "-        final DetailAST paramsNode = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        if (paramsNode.getChildCount() != 1) {", "-            return false;", "-        }", "+    private static boolean isFirstParameterObject(DetailAST methodDefAst) {", "+        final DetailAST paramsNode = methodDefAst.findFirstToken(TokenTypes.PARAMETERS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54406641326a3ec3567a15a3d79c3e14", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "10f348bbfd91fd8c2bd7776aff3c03f549380a44", "commitAfterChange": "6c04cd63af392376159dc7aae41d85bbc348e96d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static void collectVariableDeclarations(DetailAST ast, LexicalFrame frame)", "signatureAfterChange": "     private static void collectVariableDeclarations(DetailAST ast, AbstractFrame frame)", "diff": ["-    private static void collectVariableDeclarations(DetailAST ast, LexicalFrame frame) {", "-        final DetailAST ident =", "-                ast.findFirstToken(TokenTypes.IDENT);", "-        if (frame instanceof ClassFrame) {", "+    private static void collectVariableDeclarations(DetailAST ast, AbstractFrame frame) {", "+        final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);", "+        if (frame.getType() == FrameType.CLASS_FRAME) {"]}]}
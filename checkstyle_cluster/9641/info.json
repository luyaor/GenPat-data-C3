{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "200ad9b0095b6ce654887e95627cd688", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ebaa172ef26278867bdd9088c99fbc4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ExpressionHandler getHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "signatureAfterChange": "     public ExpressionHandler getHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "diff": ["-        ExpressionHandler handler =", "+        final ExpressionHandler handler =", "-        Integer type = new Integer(aAst.getType());", "+        final Integer type = new Integer(aAst.getType());", "-            Constructor handlerCtor = (Constructor) mTypeHandlers.get(type);", "+            final Constructor handlerCtor =", "+                (Constructor) mTypeHandlers.get(type);", "-        catch (InstantiationException e) {", "+        catch (final InstantiationException e) {", "-        catch (IllegalAccessException e) {", "+        catch (final IllegalAccessException e) {", "-        catch (InvocationTargetException e) {", "+        catch (final InvocationTargetException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2da0407c544c3e18e9b69e6bc24d1e68", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "d7ec6a95ac09e00b8d72b7db4f664a6ffa7e9562", "commitAfterChange": "2f70947ed74ab968324fdcf83f808ff1d88df1fb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public synchronized void process(File[] aFiles)", "signatureAfterChange": "     public synchronized void process(File[] aFiles)", "diff": ["-        long start = System.currentTimeMillis();", "+        final long start = System.currentTimeMillis();", "-                File file = mFiles[i];", "-                String[] lines = Utils.getLines(file.getPath(), getCharset());", "-                ChecksumGenerator transformer = findChecksumGenerator(file);", "+                final File file = mFiles[i];", "+                final String[] lines =", "+                    Utils.getLines(file.getPath(), getCharset());", "+                final ChecksumGenerator transformer =", "+                    findChecksumGenerator(file);", "-        long endReading = System.currentTimeMillis();", "+        final long endReading = System.currentTimeMillis();", "-        long endSearching = System.currentTimeMillis();", "+        final long endSearching = System.currentTimeMillis();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4074af9715493235c97ba52d2ad02ad3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public final void configure(Configuration aConfiguration)         throws CheckstyleException", "signatureAfterChange": "     public final void configure(Configuration aConfiguration)         throws CheckstyleException", "diff": ["-        BeanUtilsBean beanUtils = createBeanUtilsBean();", "+        final BeanUtilsBean beanUtils = createBeanUtilsBean();", "-            catch (InvocationTargetException e) {", "+            catch (final InvocationTargetException e) {", "-            catch (IllegalAccessException e) {", "+            catch (final IllegalAccessException e) {", "-            catch (NoSuchMethodException e) {", "+            catch (final NoSuchMethodException e) {", "-            catch (IllegalArgumentException e) {", "+            catch (final IllegalArgumentException e) {", "-            catch (ConversionException e) {", "+            catch (final ConversionException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c41f71dd352a16e9fd9be06975e0934", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void processTypeParams(DetailAST aAST)", "signatureAfterChange": "     private void processTypeParams(DetailAST aAST)", "diff": ["-        Map paramsMap = new HashMap();", "+        final Map paramsMap = new HashMap();", "-                DetailAST param = child;", "-                String alias = param.findFirstToken(TokenTypes.IDENT).getText();", "-                DetailAST bounds =", "+                final DetailAST param = child;", "+                final String alias =", "+                    param.findFirstToken(TokenTypes.IDENT).getText();", "+                final DetailAST bounds =", "-                    FullIdent name = FullIdent.createFullIdentBelow(bounds);", "-                    ClassInfo ci =", "+                    final FullIdent name =", "+                        FullIdent.createFullIdentBelow(bounds);", "+                    final ClassInfo ci ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d5d7834b8d468a5a3d734f06ae4f25", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        DetailAST assign = aAST.findFirstToken(TokenTypes.ASSIGN);", "+", "+        final DetailAST assign = aAST.findFirstToken(TokenTypes.ASSIGN);", "-        DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        DetailAST type = aAST.findFirstToken(TokenTypes.TYPE);", "-        DetailAST ident = aAST.findFirstToken(TokenTypes.IDENT);", "-        DetailAST exprStart =", "+        final DetailAST type = aAST.findFirstToken(TokenTypes.TYPE);", "+        final DetailAST ident = aAST.findFirstToken(TokenTypes.IDENT);", "+        final DetailAST exprStart =", "-        int primitiveType = type.getFirstChild().getType();", "+", "+        final int primitiveType = type.getFirstChild().getType();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b2f6405c1c2cf0986caf2b5c35fe2bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "          public void drop(DropTargetDropEvent evt)", "signatureAfterChange": "          public void drop(DropTargetDropEvent evt)", "diff": ["-                Transferable tr = evt.getTransferable();", "+                final Transferable tr = evt.getTransferable();", "-                    List fileList = (List) tr.getTransferData(", "+                    final List fileList = (List) tr.getTransferData(", "-                    File[] files = new File[fileList.size()];", "+                    final File[] files = new File[fileList.size()];", "-            catch (IOException io) {", "+            catch (final IOException io) {", "-            catch (UnsupportedFlavorException ufe) {", "+            catch (final UnsupportedFlavorException ufe) {", "-                    JComponent jc = (JComponent) mC;", "+                    final JComponent jc = (JComponent) mC;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7decf2019e7f73555686f1f4b12dd576", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule712paragraphs/JavadocParagraphTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void javadocParagraphIncorrectTest() throws Exception", "signatureAfterChange": "      @Test     public void javadocParagraphIncorrectTest() throws Exception", "diff": ["-        String msgBefore = getCheckMessage(JavadocParagraphCheck.class, \"javadoc.paragraph.line.before\");", "-        String msgRed = getCheckMessage(JavadocParagraphCheck.class, \"javadoc.paragraph.redundant.paragraph\");", "-        String msgMisplaced = getCheckMessage(JavadocParagraphCheck.class, \"javadoc.paragraph.misplaced.tag\");", "+        final String msgBefore = getCheckMessage(JavadocParagraphCheck.class,", "+                \"javadoc.paragraph.line.before\");", "+        final String msgRed = getCheckMessage(JavadocParagraphCheck.class,", "+                \"javadoc.paragraph.redundant.paragraph\");", "+        final String msgMisplaced = getCheckMessage(JavadocParagraphCheck.class,", "+                \"javadoc.paragraph.misplaced.tag\");", "-        Configuration checkConfig = builder.getCheckConfig(\"JavadocParagraph\");", "-        String filePath = builder.getFilePath(\"InputIncorrectJavadocParagraphCheck\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"JavadocParagraph\");", "+        final String filePath = builder.getFilePath(\"InputIncorrectJavadocParagraphCheck\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89e18ace2a8e5123691cb6fc67a6219d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule485annotations/AnnotationLocationTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void annotationTest() throws Exception", "signatureAfterChange": "      @Test     public void annotationTest() throws Exception", "diff": ["-        Class<AnnotationLocationCheck> clazz = AnnotationLocationCheck.class;", "+        final Class<AnnotationLocationCheck> clazz = AnnotationLocationCheck.class;", "-        Configuration checkConfig = builder.getCheckConfig(\"AnnotationLocation\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"AnnotationLocation\");", "-        String msgLocationAlone = \"annotation.location.alone\";", "-        String msgLocation = \"annotation.location\";", "+        final String msgLocationAlone = \"annotation.location.alone\";", "+        final String msgLocation = \"annotation.location\";", "-        String filePath = builder.getFilePath(\"AnnotationLocationInput\");", "+        final String filePath = builder.getFilePath(\"AnnotationLocationInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6c46bf402935ef330e5bc495e9a3f9f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public boolean hasIntersectionWithComment(             int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public boolean hasIntersectionWithComment(             int aStartLineNo, int aStartColNo, int aEndLineNo, int aEndColNo)", "diff": ["-        Collection values = mCComments.values();", "+        final Collection values = mCComments.values();", "-        Iterator it = values.iterator();", "+        final Iterator it = values.iterator();", "-            List row = (List) it.next();", "-            Iterator rowIterator = row.iterator();", "+            final List row = (List) it.next();", "+            final Iterator rowIterator = row.iterator();", "-                TextBlock comment = (TextBlock) rowIterator.next();", "+                final TextBlock comment = (TextBlock) rowIterator.next();", "-            TextBlock comment =", "+            final TextBlock comment ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcf2d55bcb9af16a359d46a6aa76ba13", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "     public void finishTree(DetailAST aRootAST)", "diff": ["-        Set keys = mStringMap.keySet();", "-        Iterator keyIterator = keys.iterator();", "+        final Set keys = mStringMap.keySet();", "+        final Iterator keyIterator = keys.iterator();", "-            String key = (String) keyIterator.next();", "-            ArrayList hits = (ArrayList) mStringMap.get(key);", "+            final String key = (String) keyIterator.next();", "+            final ArrayList hits = (ArrayList) mStringMap.get(key);", "-                StringInfo firstFinding = (StringInfo) hits.get(0);", "-                int line = firstFinding.getLine();", "+                final StringInfo firstFinding = (StringInfo) hits.get(0);", "+                final int line = firstFinding.getLine();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3bb2fd55cac51d336cffff1746028f2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void process(File aFile)", "signatureAfterChange": "     private void process(File aFile)", "diff": ["-        catch (FileNotFoundException fnfe) {", "+        catch (final FileNotFoundException fnfe) {", "-        catch (IOException ioe) {", "+        catch (final IOException ioe) {", "-        catch (RecognitionException re) {", "+        catch (final RecognitionException re) {", "-        catch (TokenStreamRecognitionException tre) {", "+        catch (final TokenStreamRecognitionException tre) {", "-        catch (TokenStreamException te) {", "+        catch (final TokenStreamException te) {", "-        catch (Throwable err) {", "+        catch (final Throwable err) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbd905b7a8c460bff927c0da470510d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "      @Test(expected = IllegalStateException.class)     public void testVisitTokenSwitchReflection() throws Exception", "signatureAfterChange": "      @Test(expected = IllegalStateException.class)     public void testVisitTokenSwitchReflection() throws Exception", "diff": ["-        ImportOrderOption importOrderOptionMock = PowerMockito.mock(ImportOrderOption.class);", "+        final ImportOrderOption importOrderOptionMock = PowerMockito.mock(ImportOrderOption.class);", "-        DetailAST astImport = mockAST(TokenTypes.IMPORT, \"import\", \"mockfile\", 0, 0);", "-        DetailAST astIdent = mockAST(TokenTypes.IDENT, \"myTestImport\", \"mockfile\", 0, 0);", "+        final DetailAST astImport = mockAST(TokenTypes.IMPORT, \"import\", \"mockfile\", 0, 0);", "+        final DetailAST astIdent = mockAST(TokenTypes.IDENT, \"myTestImport\", \"mockfile\", 0, 0);", "-        DetailAST astSemi = mockAST(TokenTypes.SEMI, \";\", \"mockfile\", 0, 0);", "+        final DetailAST astSemi = mockAST(TokenTypes.SEMI, \";\", \"mockfile\", 0, 0);", "-        ImportOrderCheck check = new ImportOrderCheck() {", "+        final ImportOrderCheck check = new ImportOrderCheck() {", "-                ImportOrderOption importOrderOption = PowerMockito.mock(ImportOrderOption.class);", "+                final ImportOrderOption importOrderOption = PowerMockito", "+                    .mock(ImportOrderOption.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc158093caa4dd485842ce620ed9efdc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule487modifiers/ModifierOrderTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void modifierOrderTest() throws Exception", "signatureAfterChange": "      @Test     public void modifierOrderTest() throws Exception", "diff": ["-        Class<ModifierOrderCheck> clazz = ModifierOrderCheck.class;", "-        String msgMod = \"mod.order\";", "-        String msgAnnotation = \"annotation.order\";", "+        final Class<ModifierOrderCheck> clazz = ModifierOrderCheck.class;", "+        final String msgMod = \"mod.order\";", "+        final String msgAnnotation = \"annotation.order\";", "-        Configuration checkConfig = builder.getCheckConfig(\"ModifierOrder\");", "-        String filePath = builder.getFilePath(\"ModifierOrderInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"ModifierOrder\");", "+        final String filePath = builder.getFilePath(\"ModifierOrderInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}]}
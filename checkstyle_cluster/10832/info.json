{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84d61d7c30a8d861b093718907d675ed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13ed974cfb1f6015530cd5956a790e48", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "commitBeforeChange": "a4df304720e2c71cbb22667cc3f7148e89464b9a", "commitAfterChange": "2a9fd54faa88518c5f1fab50215f766eef19802d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        // GT/LT aren't operators if they're part of type arguments or parameters", "-        if ((aAST.getType() == TokenTypes.GT || aAST.getType() == TokenTypes.LT) &&", "-            (aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS", "-            || aAST.getParent().getType() == TokenTypes.TYPE_PARAMETERS))", "-        {", "-            return;", "-        }", "-", "-        //QUESTION is not an operator if it's part of a type argument", "-        if (aAST.getType() == TokenTypes.QUESTION &&", "-            aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENT)", "-        {", "-            return;", "-        }", "-", "-        //BAND is not an operator if it's part of a type argument", "-        if (aAST.getType() == TokenTypes.BAND &&", "-            (aAST.getParent().getType() == TokenTypes.TYPE_UPPER_BOUNDS", "-            || aAST.getParent().getType() == TokenTypes.TYPE_LOWER_BOUNDS))", "-        {", "-            return;", "-        }", "-", "-        if (wOp == OperatorWrapOption.NL", "-            && !text.equals(currentLine.trim())", "-            && (currentLine.substring(colNo + text.length())", "-                .trim().length() == 0))", "+        if (CheckUtils.isOperatorTokenPartOfGenericDeclaration(aAST))", "+        {", "+            return;", "+        }", "+        else if (wOp == OperatorWrapOption.NL", "+                && !text.equals(currentLine.trim())", "+                && (currentLine.substring(colNo + text.length())", "+                    .trim().length() == 0))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d6f1880bbdc0cf32fac65bab698f31", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "commitBeforeChange": "c4d4b6139c74a873184d21a9d61c84a61273c692", "commitAfterChange": "f3fe388937df6497e4afe551c952cacb548337c8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+", "+        // GT/LT aren't operators if they're part of type arguments or parameters", "+        if ((aAST.getType() == TokenTypes.GT || aAST.getType() == TokenTypes.LT) &&", "+            (aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS", "+            || aAST.getParent().getType() == TokenTypes.TYPE_PARAMETERS))", "+        {", "+            return;", "+        }", "+", "+        //QUESTION is not an operator if it's part of a type argument", "+        if (aAST.getType() == TokenTypes.QUESTION &&", "+            aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENT)", "+        {", "+            return;", "+        }", "+", "+        //BAND is not an operator if it's part of a type argument", "+        if (aAST.getType() == TokenTypes.BAND &&", "+            (aAST.getParent().getType() == TokenTypes.TYPE_UPPER_BOUNDS", "+            || aAST.getParent().getType() == TokenTypes.TYPE_LOWER_BOUNDS))", "+        {", "+            return;", "+        }", "+"]}]}
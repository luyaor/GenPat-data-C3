{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "824f2f979f7b9b97d68b5eca6dbf67ea", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36aee565e28c5ce581246cf54dffa19a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static DetailAST getArrayIdentifier(DetailAST arrayDeclarator)", "signatureAfterChange": "     private static DetailAST getIndexOpPreviousElement(DetailAST ast)", "diff": ["+     */", "+    private static DetailAST getIndexOpPreviousElement(DetailAST ast) {", "+        DetailAST result;", "+        final DetailAST firstChild = ast.getFirstChild();", "+        if (firstChild.getType() == TokenTypes.INDEX_OP) {", "+            // second or higher array index", "+            result = firstChild.findFirstToken(TokenTypes.RBRACK);", "+        }", "+        else {", "+            final DetailAST ident = getIdentLastToken(ast);", "+            if (ident == null) {", "+                // construction like ((byte[]) pixels)[0]", "+                result = ast.findFirstToken(TokenTypes.RPAREN);", "+                result = ident;", "+            }", "+        }", "+        return result;", "+    }", "-     */", "-    private static DetailAST getArrayIdentifier(DetailAST arrayDeclarator) {", "-        return arrayDeclarator.getParent().getNextSibling();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf0579239cfb2418370f8f500f381a2e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private static boolean isMultiDimensionalArray(DetailAST arrayDeclaration)", "signatureAfterChange": "     private static DetailAST getTypeLastNode(DetailAST ast)", "diff": ["+     */", "+    private static DetailAST getTypeLastNode(DetailAST ast) {", "+        DetailAST result = ast.findFirstToken(TokenTypes.TYPE_ARGUMENTS);", "+        if (result == null) {", "+            result = getIdentLastToken(ast);", "+            if (result == null) {", "+                //primitive literal expected", "+                result = ast.getFirstChild();", "+            result = result.findFirstToken(TokenTypes.GENERIC_END);", "+        }", "+        return result;", "+    }", "-     */", "-    private static boolean isMultiDimensionalArray(DetailAST arrayDeclaration) {", "-        return arrayDeclaration.getParent().getType() == TokenTypes.ARRAY_DECLARATOR", "-                || arrayDeclaration.getFirstChild().getType() == TokenTypes.ARRAY_DECLARATOR;", "-    }"]}]}
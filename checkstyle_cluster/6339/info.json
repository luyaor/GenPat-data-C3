{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "095696f18a373f58883f232058259924", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6af8c9936ce7dd014c6cbe1970e18b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final DetailAST astNode = getPreceded(ast);", "-        final String line = getLine(ast.getLineNo() - 1);", "-        final int after = getPositionAfter(astNode);", "+        final DetailAST whitespaceFollowedAst = getWhitespaceFollowedNode(ast);", "-        if ((after >= line.length() || Character.isWhitespace(line.charAt(after)))", "-                 && hasRedundantWhitespace(line, after)) {", "-            log(astNode.getLineNo(), after,", "-                MSG_KEY, astNode.getText());", "+        final int whitespaceColumnNo = getPositionAfter(whitespaceFollowedAst);", "+        final int whitespaceLineNo = whitespaceFollowedAst.getLineNo();", "+", "+        if (hasTrailingWhitespace(ast, whitespaceColumnNo, whitespaceLineNo)) {", "+            log(whitespaceLineNo, whitespaceColumnNo,", "+                MSG_KEY, whitespaceFollowedAst.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb0cbf4033e7b532995027c501233477", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "eaad55fdba73e17e103dc6600867f26fd6a3896b", "commitAfterChange": "5cf355fad4b8bc613962aac2f52b48d5726f2acc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public boolean isReference(String aEnt)", "signatureAfterChange": "     public boolean isReference(String aEnt)", "diff": ["+            int prefixLength = 2; // \"&#\"", "+            int radix = BASE_10;", "-                try {", "-                    Integer.parseInt(aEnt.substring(3, aEnt.length() - 1), 16);", "-                    return true;", "-                }", "-                catch (NumberFormatException nfe) {", "-                    return false;", "-                }", "+                prefixLength++;", "+                radix = BASE_16;", "-            else {", "-                try {", "-                    Integer.parseInt(aEnt.substring(2, aEnt.length() - 1));", "-                    return true;", "-                }", "-                catch (NumberFormatException nfe) {", "-                    return false;", "-                }", "+            try {", "+                Integer.parseInt(", "+                    aEnt.substring(prefixLength, aEnt.length() - 1), radix);", "+                return true;", "+            }", "+            catch (NumberFormatException nfe) {", "+                return false;"]}]}
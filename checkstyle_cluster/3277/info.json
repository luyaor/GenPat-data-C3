{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8ad54c40ffcb459e6332546cae5abfb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a1694ed840242c75787d2bf94cc6267", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "c22f9f0d79455160c65820f9df2a592a400af446", "commitAfterChange": "209b22885ab63ab87c939a24c3ab5d9cf43d911d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (nextToken != null) {", "+        if (nextToken != null && nextToken.getType() != TokenTypes.RCURLY) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                            log(nextToken.getLineNo(), \"empty.line.separator\",", "-                        else if (!allowNoEmptyLineBetweenFields || !allowMultipleEmptyLines) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                        else if (!allowNoEmptyLineBetweenFields) {", "+                            log(nextToken.getLineNo(), \"empty.line.separator\",", "-                    }", "-                    if (!allowMultipleEmptyLines && isTypeField(ast)", "-                             && isPrePreviousLineEmpty(ast))", "-                    {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "+                        log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());", "-                        log(ast.getLineNo(), MSG_SHOULD_BE_SEPARATED, ast.getText());", "-                    }", "-                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "+                        log(ast.getLineNo(), \"empty.line.separator\", ast.getText());", "-                    if (nextToken.getType() != TokenTypes.RCURLY && !hasEmptyLineAfter(ast)) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "+                    if (!hasEmptyLineAfter(ast)) {", "+                        log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daa41e6cd89470d0d9905f7b2edc35bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "ae0e7def779cddabf1e93ee744b9b341ef27647f", "commitAfterChange": "c99f34002b7340ec8d0888f8f9b3992df798e408", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["+", "+        validate(details, rcurly, lcurly);", "+", "+        if (!shouldStartLine) {", "+            return;", "+        }", "+        final boolean startsLine =", "+                Utils.whitespaceBefore(rcurly.getColumnNo(),", "+                        getLines()[rcurly.getLineNo() - 1]);", "+", "+        if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {", "+            log(rcurly, MSG_KEY_LINE_NEW, \"}\");", "+        }", "+    }", "-        }", "-", "-        if (!shouldStartLine) {", "-            return;", "-        }", "-        final boolean startsLine =", "-                Utils.whitespaceBefore(rcurly.getColumnNo(),", "-                        getLines()[rcurly.getLineNo() - 1]);", "-", "-        if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {", "-            log(rcurly, MSG_KEY_LINE_NEW, \"}\");"]}]}
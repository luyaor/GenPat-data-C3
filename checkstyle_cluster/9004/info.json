{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "659fc1f3570309ff5a73774b389fe66c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0971fb3048be29a2f0065a9a72dac9c9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public static DetailAST parse(FileContents aContents)         throws RecognitionException, TokenStreamException", "signatureAfterChange": "     public static DetailAST parse(         FileContents aContents)         throws RecognitionException, TokenStreamException", "diff": ["-    public static DetailAST parse(FileContents aContents)", "+    public static DetailAST parse(", "+        FileContents aContents)", "+", "-            // try the 1.4 grammar first, this will succeed for", "-            // all code that compiles without any warnings in JDK 1.4,", "-            // that should cover most cases", "-            final Reader sar = new StringArrayReader(aContents.getLines());", "-            final GeneratedJava14Lexer jl = new GeneratedJava14Lexer(sar);", "-            jl.setFilename(aContents.getFilename());", "-            jl.setCommentListener(aContents);", "-", "-            final GeneratedJava14Recognizer jr =", "-                new SilentJava14Recognizer(jl);", "-            jr.setFilename(aContents.getFilename());", "-            jr.setASTNodeClass(DetailAST.class.getName());", "-            jr.compilationUnit();", "-            rootAST = (DetailAST) jr.getAST();", "+            rootAST = parse(", "+                GeneratedJava15Lexer.class, SilentJava15Recognizer.class,", "+                aContents);", "-        catch (RecognitionException re) {", "-            // Parsing might have failed because the checked", "-            // file contains \"assert\" as an identifier. Retry with a", "-            // grammar that treats \"assert\" as an identifier", "-            // and not as a keyword", "-", "-            // Arghh - the pain - duplicate code!", "-            final Reader sar = new StringArrayReader(aContents.getLines());", "-            final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);", "-            jl.setFilename(aContents.getFilename());", "-            jl.setCommentListener(aContents);", "-", "-            final GeneratedJavaRecognizer jr = new GeneratedJavaRecognizer(jl);", "-            jr.setFilename(aContents.getFilename());", "-            jr.setASTNodeClass(DetailAST.class.getName());", "-            jr.compilationUnit();", "-            rootAST = (DetailAST) jr.getAST();", "+        catch (RecognitionException exception) {", "+            rootAST = parse(", "+                GeneratedJavaLexer.class, GeneratedJavaRecognizer.class,", "+                aContents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1965e54852c9c169e1323499ce9f4b69", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "4a859be12ad9dcd56e5689407e0cfcbdbb0003ea", "commitAfterChange": "e2ec464f27b2e30ee66802cb9f8f1899b2dc4a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private int process(String aFileName)", "signatureAfterChange": "     private int process(String aFileName)", "diff": ["-            VerifierSingleton.getInstance().clearMessages();", "-            VerifierSingleton.getInstance().setLines(lines);", "-            final Reader sar = new StringArrayReader(lines);", "-            final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);", "-            jl.setFilename(aFileName);", "-            final GeneratedJavaRecognizer jr = new GeneratedJavaRecognizer(jl);", "-            jr.setFilename(aFileName);", "-            jr.setASTNodeClass(MyCommonAST.class.getName());", "-            jr.compilationUnit();", "+            try {", "+                VerifierSingleton.getInstance().clearMessages();", "+                VerifierSingleton.getInstance().setLines(lines);", "+                final Reader sar = new StringArrayReader(lines);", "+                final GeneratedJava14Lexer jl = new GeneratedJava14Lexer(sar);", "+                jl.setFilename(aFileName);", "+                final GeneratedJava14Recognizer jr =", "+                    new SilentJava14Recognizer(jl);", "+                jr.setFilename(aFileName);", "+                jr.setASTNodeClass(MyCommonAST.class.getName());", "+                jr.compilationUnit();", "+            }", "+            catch (RecognitionException re) {", "+", "+                // Parsing might have failed because the checked", "+                // filecontains \"assert\" statement. Retry with a", "+                // grammar that treats \"assert\" as an identifier", "+                // and not as a keyword", "+", "+                // Arghh - the pain - duplicate code!", "+", "+                VerifierSingleton.getInstance().clearMessages();", "+                VerifierSingleton.getInstance().setLines(lines);", "+                final Reader sar = new StringArrayReader(lines);", "+                final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);", "+                jl.setFilename(aFileName);", "+                final GeneratedJavaRecognizer jr =", "+                    new GeneratedJavaRecognizer(jl);", "+                jr.setFilename(aFileName);", "+                jr.setASTNodeClass(MyCommonAST.class.getName());", "+                jr.compilationUnit();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "611f61e9f2764ab535ba7c091e5dc4ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "9cd5e92d947566b9ff99cebf3f10f1d3a16e935d", "commitAfterChange": "c28f32e2a8067514aefbc198f24744401c1a8c87", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private int processNEW(String aFileName)", "signatureAfterChange": "     private int processNEW(String aFileName)", "diff": ["-            DetailAST rootAST;", "-            try {", "-                // try the 1.4 grammar first, this will succeed for", "-                // all code that compiles without any warnings in JDK 1.4,", "-                // that should cover most cases", "-                final Reader sar = new StringArrayReader(lines);", "-                final Java14Lexer jl = new Java14Lexer(sar);", "-                jl.setFilename(aFileName);", "-                jl.setCommentManager(cmgr);", "-", "-                final Java14Recognizer jr =", "-                    new NEWSilentJava14Recognizer(jl);", "-                jr.setFilename(aFileName);", "-                jr.setASTNodeClass(DetailAST.class.getName());", "-                jr.compilationUnit();", "-                rootAST = (DetailAST) jr.getAST();", "-            }", "-            catch (RecognitionException re) {", "-                // Parsing might have failed because the checked", "-                // file contains \"assert\" as an identifier. Retry with a", "-                // grammar that treats \"assert\" as an identifier", "-                // and not as a keyword", "-", "-                // Arghh - the pain - duplicate code!", "-                final Reader sar = new StringArrayReader(lines);", "-                final JavaLexer jl = new JavaLexer(sar);", "-                jl.setFilename(aFileName);", "-                jl.setCommentManager(cmgr);", "-", "-                final JavaRecognizer jr = new JavaRecognizer(jl);", "-                jr.setFilename(aFileName);", "-                jr.setASTNodeClass(DetailAST.class.getName());", "-                jr.compilationUnit();", "-                rootAST = (DetailAST) jr.getAST();", "-            }", "+            DetailAST rootAST = parse(lines, aFileName, cmgr);"]}]}
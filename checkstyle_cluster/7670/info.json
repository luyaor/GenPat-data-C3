{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74c4b8ec7a43e99c9c57afc05883eb55", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60085f174af41b10fcc4a5e3bad79b9b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "commitBeforeChange": "2279ec2a489d1104f2741f2aa3458857d862ac34", "commitAfterChange": "6970485b88600343de72af03a6bf87cf78e6cf55", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void addError(AuditEvent aEvt)", "signatureAfterChange": "     public void addError(AuditEvent aEvt)", "diff": ["-        // Print an Emacs compliant line.", "-        mWriter.println(aEvt.getFileName() + \":\" + aEvt.getLine()", "-                        + \": \" + aEvt.getMessage());", "+        // Print an Emacs compliant line. If the column number is non zero,", "+        // then also display it.", "+        if (aEvt.getColumn() > 0) {", "+            mWriter.println(aEvt.getFileName()", "+                            + \":\" + aEvt.getLine()", "+                            + \":\" + aEvt.getColumn()", "+                            + \": \" + aEvt.getMessage());", "+        }", "+        else {", "+            mWriter.println(aEvt.getFileName()", "+                            + \":\" + aEvt.getLine()", "+                            + \": \" + aEvt.getMessage());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6628e9b73717559a6eacb97d3ac9ace6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "59aa66c3cc43db0a7cd8bb0ea3a39b6f4339fe88", "commitAfterChange": "a24df47cafeab03fd65cf72b460aad3d2fafce3d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void registerCheck(String aToken, Check aCheck)", "signatureAfterChange": "     private void registerCheck(String aToken, Check aCheck)", "diff": ["-        mTokenToChecks.put(aToken, aCheck);", "+        if (aCheck.isCommentNodesRequired()) {", "+            mTokenToCommentChecks.put(aToken, aCheck);", "+        }", "+        else if (TokenTypes.isCommentType(aToken)) {", "+            LOG.warn(\"Check '\"", "+                    + aCheck.getClass().getName()", "+                    + \"' waits for comment type token ('\"", "+                    + aToken", "+                    + \"') and should override 'isCommentNodesRequred()'\"", "+                    + \" method to return 'true'\");", "+        }", "+        else {", "+            mTokenToOrdinaryChecks.put(aToken, aCheck);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e3f52d37f0fe751188ac5a7d0569a2f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "af52963008a800390e8b356db5811886572f37a3", "commitAfterChange": "3a5a73d5c110418f712f5a9a838c6b4106506fdd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void validate(Details details, DetailAST rcurly, DetailAST lcurly)", "signatureAfterChange": "     private void validate(Details details, DetailAST rcurly, DetailAST lcurly)", "diff": ["-            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE);", "+            log(rcurly, MSG_KEY_LINE_BREAK_BEFORE, \"}\", rcurly.getColumnNo() + 1);", "-                log(rcurly, MSG_KEY_LINE_ALONE, \"}\");", "+                log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);", "-            log(rcurly, MSG_KEY_LINE_SAME, \"}\");", "+            log(rcurly, MSG_KEY_LINE_SAME, \"}\", rcurly.getColumnNo() + 1);", "-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");", "+            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);", "-            log(rcurly, MSG_KEY_LINE_ALONE, \"}\");", "+            log(rcurly, MSG_KEY_LINE_ALONE, \"}\", rcurly.getColumnNo() + 1);", "-                log(rcurly, MSG_KEY_LINE_NEW, \"}\");", "+                log(rcurly, MSG_KEY_LINE_NEW, \"}\", rcurly.getColumnNo() + 1);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0be17789b42e35eb7bf0a5d2b583747b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "583f6590783ae922d45f9fdd7fe6d1a9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "fb5cf249885869256567d41798e14f2964a26192", "commitAfterChange": "7c1d239748c9a90112bf3a59b189dc31ffe41983", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processEnd(DetailAST ast)", "signatureAfterChange": "     private void processEnd(DetailAST ast)", "diff": ["-                final char charAfter = line.charAt(after);", "-", "-                // Need to handle a number of cases. First is:", "-                //    Collections.<Object>emptySet();", "-                //                        ^", "-                //                        +--- whitespace not allowed", "-                if (ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS", "-                        && ast.getParent().getParent().getType()", "-                            == TokenTypes.DOT", "-                        && ast.getParent().getParent().getParent().getType()", "-                            == TokenTypes.METHOD_CALL", "-                        || isAfterMethodReference(ast)) {", "-                    if (Character.isWhitespace(charAfter)) {", "-                        log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                    }", "-                }", "-                else if (!Character.isWhitespace(charAfter)", "-                    && '(' != charAfter && ')' != charAfter", "-                    && ',' != charAfter && '[' != charAfter", "-                    && '.' != charAfter && ':' != charAfter", "-                    && !isAfterMethodReference(ast)) {", "-                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \">\");", "-                }", "+                processSingleGeneric(ast, line, after);", "-                // In a nested Generic type, so can only be a '>' or ',' or '&'", "-", "-                // In case of several extends definitions:", "-                //", "-                //   class IntEnumValueType<E extends Enum<E> & IntEnum>", "-                //                                          ^", "-                //   should be whitespace if followed by & -+", "-                //", "-                final int indexOfAmp = line.indexOf('&', after);", "-                if (indexOfAmp != -1", "-                    && whitespaceBetween(after, indexOfAmp, line)) {", "-                    if (indexOfAmp - after == 0) {", "-                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"&\");", "-                    }", "-                    else if (indexOfAmp - after != 1) {", "-                        log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                    }", "-                }", "-                else if (line.charAt(after) == ' ') {", "-                    log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                }", "+                processNestedGenerics(ast, line, after);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a1694ed840242c75787d2bf94cc6267", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "c22f9f0d79455160c65820f9df2a592a400af446", "commitAfterChange": "209b22885ab63ab87c939a24c3ab5d9cf43d911d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (nextToken != null) {", "+        if (nextToken != null && nextToken.getType() != TokenTypes.RCURLY) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                            log(nextToken.getLineNo(), \"empty.line.separator\",", "-                        else if (!allowNoEmptyLineBetweenFields || !allowMultipleEmptyLines) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                        else if (!allowNoEmptyLineBetweenFields) {", "+                            log(nextToken.getLineNo(), \"empty.line.separator\",", "-                    }", "-                    if (!allowMultipleEmptyLines && isTypeField(ast)", "-                             && isPrePreviousLineEmpty(ast))", "-                    {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "+                        log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());", "-                        log(ast.getLineNo(), MSG_SHOULD_BE_SEPARATED, ast.getText());", "-                    }", "-                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "+                        log(ast.getLineNo(), \"empty.line.separator\", ast.getText());", "-                    if (nextToken.getType() != TokenTypes.RCURLY && !hasEmptyLineAfter(ast)) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "+                    if (!hasEmptyLineAfter(ast)) {", "+                        log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());", "-    }"]}]}
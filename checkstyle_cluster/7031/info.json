{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7a644992211f5f8de0a6a107002db3e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f26987ca41185a9633fa3135cf7dc98", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/ExecutableStatementCountCheck.java", "commitBeforeChange": "b8f9b199ad7de16619cec1f288bd751fad8bc4a9", "commitAfterChange": "b0bb7e1b50237a03ce4e977af15665c07e20f078", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void visitSlist(DetailAST aAST)", "signatureAfterChange": "     private void visitSlist(DetailAST aAST)", "diff": ["-            mContext.addCount(aAST.getChildCount() / 2);", "+            // find member AST for the statement list", "+            final DetailAST contextAST = mContext.getAST();", "+            DetailAST parent = aAST.getParent();", "+            while (parent != null) {", "+                final int type = parent.getType();", "+                if ((type == TokenTypes.CTOR_DEF)", "+                    || (type == TokenTypes.METHOD_DEF)", "+                    || (type == TokenTypes.INSTANCE_INIT)", "+                    || (type == TokenTypes.STATIC_INIT))", "+                {", "+                    if (parent == contextAST) {", "+                        mContext.addCount(aAST.getChildCount() / 2);", "+                    }", "+                    break;", "+                }", "+                parent = parent.getParent();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd58705488bc2773c4cf2e646fd59edd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-", "-                if (parentType != TokenTypes.OBJBLOCK) {", "-                    return;", "+                if (parentType == TokenTypes.OBJBLOCK) {", "+                    processConstructor(ast);", "-", "-                processConstructor(ast);", "-", "-", "-                if (parentType != TokenTypes.OBJBLOCK) {", "-                    return;", "+                if (parentType == TokenTypes.OBJBLOCK) {", "+                    processMethod(ast);", "-", "-                processMethod(ast);", "-", "-                if (parentType != TokenTypes.VARIABLE_DEF", "-                        || ast.getParent().getParent().getType()", "-                        != TokenTypes.OBJBLOCK) {", "-                    return;", "+                if (parentType == TokenTypes.VARIABLE_DEF", "+                        && ast.getParent().getParent().getType() == TokenTypes.OBJBLOCK) {", "+                    processModifiers(ast);", "-", "-                processModifiers(ast);", "-"]}]}
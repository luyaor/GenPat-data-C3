{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "caf5b887f8cc24f29084bc41709431ee", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84967a573f1e7fb34aac8bcba4344cd4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "c4d036af767e343bb730f67f87fb74b2e3355356", "commitAfterChange": "a6df885ae1a2b681c4d6f739aa190f622c6b4106", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testBraces()         throws Exception", "signatureAfterChange": "      public void testBraces()         throws Exception", "diff": ["+        final String filepath = getPath(\"InputBraces.java\");", "-            \"InputBraces.java:29: 'do' construct must use '{}'s.\",", "-            \"InputBraces.java:41: 'while' construct must use '{}'s.\",", "-            \"InputBraces.java:41: ';' is not preceeded with whitespace.\",", "-            \"InputBraces.java:42: 'while' construct must use '{}'s.\",", "-            \"InputBraces.java:44: 'while' construct must use '{}'s.\",", "-            \"InputBraces.java:45: 'if' construct must use '{}'s.\",", "-            \"InputBraces.java:58: 'for' construct must use '{}'s.\",", "-            \"InputBraces.java:58: ';' is not preceeded with whitespace.\",", "-            \"InputBraces.java:59: 'for' construct must use '{}'s.\",", "-            \"InputBraces.java:61: 'for' construct must use '{}'s.\",", "-            \"InputBraces.java:62: 'if' construct must use '{}'s.\",", "-            \"InputBraces.java:81: 'if' construct must use '{}'s.\",", "-            \"InputBraces.java:81: ';' is not preceeded with whitespace.\",", "-            \"InputBraces.java:82: 'if' construct must use '{}'s.\",", "-            \"InputBraces.java:84: 'if' construct must use '{}'s.\",", "-            \"InputBraces.java:84: 'else' construct must use '{}'s.\",", "-            \"InputBraces.java:88: 'if' construct must use '{}'s.\",", "-            \"InputBraces.java:93: 'else' construct must use '{}'s.\",", "-            \"InputBraces.java:98: 'if' construct must use '{}'s.\",", "-            \"InputBraces.java:99: 'if' construct must use '{}'s.\"", "+            filepath + \":29: 'do' construct must use '{}'s.\",", "+            filepath + \":41: 'while' construct must use '{}'s.\",", "+            filepath + \":41: ';' is not preceeded with whitespace.\",", "+            filepath + \":42: 'while' construct must use '{}'s.\",", "+            filepath + \":44: 'while' construct must use '{}'s.\",", "+            filepath + \":45: 'if' construct must use '{}'s.\",", "+            filepath + \":58: 'for' construct must use '{}'s.\",", "+            filepath + \":58: ';' is not preceeded with whitespace.\",", "+            filepath + \":59: 'for' construct must use '{}'s.\",", "+            filepath + \":61: 'for' construct must use '{}'s.\",", "+            filepath + \":62: 'if' construct must use '{}'s.\",", "+            filepath + \":81: 'if' construct must use '{}'s.\",", "+            filepath + \":81: ';' is not preceeded with whitespace.\",", "+            filepath + \":82: 'if' construct must use '{}'s.\",", "+            filepath + \":84: 'if' construct must use '{}'s.\",", "+            filepath + \":84: 'else' construct must use '{}'s.\",", "+            filepath + \":88: 'if' construct must use '{}'s.\",", "+            filepath + \":93: 'else' construct must use '{}'s.\",", "+            filepath + \":98: 'if' construct must use '{}'s.\",", "+            filepath + \":99: 'if' construct must use '{}'s.\"", "-        verify(c, \"InputBraces.java\", expected);", "+        verify(c, filepath, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee11de36f8b03d526956dc9ce9199493", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "c4d036af767e343bb730f67f87fb74b2e3355356", "commitAfterChange": "a6df885ae1a2b681c4d6f739aa190f622c6b4106", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void testTags()         throws Exception", "signatureAfterChange": "      public void testTags()         throws Exception", "diff": ["+        final String filepath = getPath(\"InputTags.java\");", "-            \"InputTags.java:8: type is missing a Javadoc comment.\",", "-            \"InputTags.java:11: variable 'mMissingJavadoc' missing Javadoc.\",", "-            \"InputTags.java:14: method is missing a Javadoc comment.\",", "-            \"InputTags.java:18: Unused @param tag for 'unused'.\",", "-            \"InputTags.java:24: Expected an @return tag.\",", "-            \"InputTags.java:33: Expected an @return tag.\",", "-            \"InputTags.java:40: Expected @throws tag for 'Exception'.\",", "-            \"InputTags.java:49: Expected @throws tag for 'Exception'.\",", "-            \"InputTags.java:53: Unused @throws tag for 'WrongException'.\",", "-            \"InputTags.java:55: Expected @throws tag for 'Exception'.\",", "-            \"InputTags.java:55: Expected @throws tag for 'NullPointerException'.\",", "-            \"InputTags.java:60: Expected @param tag for 'aOne'.\",", "-            \"InputTags.java:68: Expected @param tag for 'aOne'.\",", "-            \"InputTags.java:72: Unused @param tag for 'WrongParam'.\",", "-            \"InputTags.java:73: Expected @param tag for 'aOne'.\",", "-            \"InputTags.java:73: Expected @param tag for 'aTwo'.\",", "-            \"InputTags.java:78: Unused @param tag for 'Unneeded'.\",", "-            \"InputTags.java:79: Unused Javadoc tag.\",", "-            \"InputTags.java:87: Duplicate @return tag.\"", "+            filepath + \":8: type is missing a Javadoc comment.\",", "+            filepath + \":11: variable 'mMissingJavadoc' missing Javadoc.\",", "+            filepath + \":14: method is missing a Javadoc comment.\",", "+            filepath + \":18: Unused @param tag for 'unused'.\",", "+            filepath + \":24: Expected an @return tag.\",", "+            filepath + \":33: Expected an @return tag.\",", "+            filepath + \":40: Expected @throws tag for 'Exception'.\",", "+            filepath + \":49: Expected @throws tag for 'Exception'.\",", "+            filepath + \":53: Unused @throws tag for 'WrongException'.\",", "+            filepath + \":55: Expected @throws tag for 'Exception'.\",", "+            filepath + \":55: Expected @throws tag for 'NullPointerException'.\",", "+            filepath + \":60: Expected @param tag for 'aOne'.\",", "+            filepath + \":68: Expected @param tag for 'aOne'.\",", "+            filepath + \":72: Unused @param tag for 'WrongParam'.\",", "+            filepath + \":73: Expected @param tag for 'aOne'.\",", "+            filepath + \":73: Expected @param tag for 'aTwo'.\",", "+            filepath + \":78: Unused @param tag for 'Unneeded'.\",", "+            filepath + \":79: Unused Javadoc tag.\",", "+            filepath + \":87: Duplicate @return tag.\"", "-        verify(c, \"InputTags.java\", expected);", "+        verify(c, filepath, expected);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7480e076e75c9add6bbfe209f0b0851", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00662f28e715561090a0b121efbcb91d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     void setLines(String[] aLines);", "signatureAfterChange": "     void setLines(String[] aLines)", "diff": ["-    void setLines(String[] aLines);", "+    void setLines(String[] aLines)", "+    {", "+        mLines = aLines;", "+", "+        checkHeader();", "+", "+        // Iterate over the lines looking for long lines and tabs.", "+        for (int i = 0; i < mLines.length; i++) {", "+            // check for long line, but possibly allow imports", "+            if ((mLines[i].length() > mConfig.getMaxLineLength()) &&", "+                !(mConfig.isIgnoreImportLength() &&", "+                  mLines[i].trim().startsWith(\"import\")))", "+            {", "+                log(i + 1,", "+                    \"line longer than \" + mConfig.getMaxLineLength() +", "+                    \" characters\");", "+            }", "+", "+            if (!mConfig.isAllowTabs() && (mLines[i].indexOf('\\t') != -1)) {", "+                log(i + 1, \"line contains a tab character\");", "+            }", "+        }", "+", "+        // Check excessive number of lines", "+        if (mLines.length > mConfig.getMaxFileLength()) {", "+            log(1,", "+                \"file length is \" + mLines.length + \" lines (max allowed is \" +", "+                mConfig.getMaxFileLength() + \").\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13bbf0764903dafd604f2c91da892bed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType);", "signatureAfterChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType)", "diff": ["-    void verifyType(MyModifierSet aMods, MyCommonAST aType);", "+    void verifyType(MyModifierSet aMods, MyCommonAST aType)", "+    {", "+        if (!mConfig.getTypeRegexp().match(aType.getText())) {", "+            log(aType.getLineNo(),", "+                \"type name '\" + aType.getText() +", "+                \"' must match pattern '\" + mConfig.getTypePat() + \"'.\");", "+        }", "+", "+        //", "+        // Only Javadoc testing below", "+        //", "+        final Scope typeScope =", "+            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "+", "+        if (!inCheckScope(typeScope)) {", "+            return; // no need to really check anything", "+        }", "+", "+        final int lineNo = (aMods.size() > 0)", "+            ? aMods.getFirstLineNo()", "+            : aType.getLineNo();", "+", "+        final String[] jd = getJavadocBefore(lineNo - 1);", "+        if (jd == null) {", "+            log(lineNo, \"type is missing a Javadoc comment.\");", "+        }", "+        else if (!mConfig.isAllowNoAuthor() &&", "+                 mInScope.size() == 0 && // don't check author for inner classes", "+                 (MATCH_JAVADOC_AUTHOR.grep(jd).length == 0))", "+        {", "+            log(lineNo, \"type Javadoc comment is missing an @author tag.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a0ddda6b329439b40aa2bdf44252671", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "b95ced53e3c47c9a9db5022767a18e714fc3bebd", "commitAfterChange": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private List getMethodTags(TextBlock aComment)", "signatureAfterChange": "     private List getMethodTags(TextBlock aComment)", "diff": ["-                tags.add(new JavadocTag(currentLine,", "+                int col = javadocArgMatcher.start(1) - 1;", "+                if (i == 0) {", "+                    col += aComment.getStartColNo();", "+                }", "+                tags.add(new JavadocTag(currentLine, col,", "-                tags.add(new JavadocTag(currentLine,", "+                int col = javadocNoargMatcher.start(1) - 1;", "+                if (i == 0) {", "+                    col += aComment.getStartColNo();", "+                }", "+                tags.add(new JavadocTag(currentLine, col,", "-                tags.add(new JavadocTag(currentLine,", "+                int col = noargCurlyMatcher.start(1) - 1;", "+                if (i == 0) {", "+                    col += aComment.getStartColNo();", "+                }", "+                tags.add(new JavadocTag(currentLine, col,", "+                int col = argMultilineStart.start(1) - 1;", "+                if (i == 0) {", "+                    col += aComment.getStartColNo();", "+                }", "-                            tags.add(new JavadocTag(currentLine, p1, p2));", "+                            tags.add(new JavadocTag(currentLine, col, p1, p2));", "+                int col = noargMultilineStart.start(1) - 1;", "+                if (i == 0) {", "+                    col += aComment.getStartColNo();", "+                }", "-                            tags.add(new JavadocTag(currentLine, p1));", "+                            tags.add(new JavadocTag(currentLine, col, p1));"]}]}
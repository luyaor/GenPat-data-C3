{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4551878825012ca20778fbec2abd17f1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08f50bf93a3984525ee1f4176a75a6c9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "cbce85c08c1f792b01082ffaf2e15bf433a093b9", "commitAfterChange": "6e676cac5dcb94b6df07466801629d0230385279", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     void verifyVariable(MyVariable aVar)", "signatureAfterChange": "     void verifyVariable(MyVariable aVar)", "diff": ["-        final MyModifierSet mods = aVar.getModifierSet();", "-        final Scope declaredScope = mods.getVisibilityScope();", "-        final Scope variableScope =", "-            inInterfaceBlock() ? Scope.PUBLIC : declaredScope;", "-", "-        }", "-        else {", "-            // Record the name of the variable for detection of unused", "-            Map typeVars = (Map) mTypeFieldsMap.get(mCurrentTypeName);", "-            if (typeVars == null) {", "-                typeVars = new HashMap();", "-                mTypeFieldsMap.put(mCurrentTypeName, typeVars);", "-            }", "-            typeVars.put(aVar.getText(), aVar);", "-", "-            ///////////////////////////////////////////////////////////////////", "-            // THIS BLOCK NEEDS REFACTORING!!", "-            ///////////////////////////////////////////////////////////////////", "-            final boolean isPckg = Scope.PACKAGE.equals(variableScope);", "-            final boolean isProt = Scope.PROTECTED.equals(variableScope);", "-", "-            if (mods.containsStatic()) {", "-                if (!mods.containsFinal()) {", "-                    if (Scope.PRIVATE.equals(variableScope)", "-                        || (mConfig.isAllowPackage() && isPckg)", "-                        || (mConfig.isAllowProtected() && isProt))", "-                    {", "-                        checkVariable(aVar,", "-                                      mConfig.getStaticRegexp(),", "-                                      mConfig.getStaticPat());", "-                    }", "-                }", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec15e1113dce21688f131124b71f7804", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "9241c0a692ed65fab3b3fdb3c4ff1c118794337c", "commitAfterChange": "4ee4d60e07a763be669173c3f45ed9b29eedca7c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean hasFallTruComment(DetailAST currentCase,             DetailAST nextCase)", "signatureAfterChange": "     private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase)", "diff": ["-    private boolean hasFallTruComment(DetailAST currentCase,", "-            DetailAST nextCase) {", "-", "+    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {", "+        boolean allThroughComment = false;", "-            return true;", "+            allThroughComment = true;", "-", "-        /*", "-         * Handle:", "-         *    case 1:", "-         *    .....", "-         *    // FALLTHRU", "-         *    case 2:", "-         *    ....", "-         * and", "-         *    switch(i) {", "-         *    default:", "-         *    // FALLTHRU", "-         *    }", "-         */", "-        final int startLineNo = currentCase.getLineNo();", "-        for (int i = endLineNo - 2; i > startLineNo - 1; i--) {", "-            if (!lines[i].trim().isEmpty()) {", "-                return commentMatch(regExp, lines[i], i + 1);", "+        else {", "+            /*", "+             * Handle:", "+             *    case 1:", "+             *    .....", "+             *    // FALLTHRU", "+             *    case 2:", "+             *    ....", "+             * and", "+             *    switch(i) {", "+             *    default:", "+             *    // FALLTHRU", "+             *    }", "+             */", "+            final int startLineNo = currentCase.getLineNo();", "+            for (int i = endLineNo - 2; i > startLineNo - 1; i--) {", "+                if (!lines[i].trim().isEmpty()) {", "+                    allThroughComment = commentMatch(regExp, lines[i], i + 1);", "+                    break;", "+                }", "-", "-        // Well -- no relief comment found.", "-        return false;", "+        return allThroughComment;"]}]}
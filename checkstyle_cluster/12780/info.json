{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60f77613f2ce50860d01dde027c5b242", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85f410f7b5a7abc80ee732e0a5d154c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int type = aAST.getType();", "-        final boolean surrounded = isSurrounded(aAST);", "-        final DetailAST parent = aAST.getParent();", "+        final int type = ast.getType();", "+        final boolean surrounded = isSurrounded(ast);", "+        final DetailAST parent = ast.getParent();", "-            mParentToSkip = aAST.getParent();", "-            log(aAST, \"unnecessary.paren.ident\", aAST.getText());", "+            parentToSkip = ast.getParent();", "+            log(ast, \"unnecessary.paren.ident\", ast.getText());", "-            mParentToSkip = aAST.getParent();", "+            parentToSkip = ast.getParent();", "-                log(aAST, \"unnecessary.paren.string\",", "-                    chopString(aAST.getText()));", "+                log(ast, \"unnecessary.paren.string\",", "+                    chopString(ast.getText()));", "-                log(aAST, \"unnecessary.paren.literal\", aAST.getText());", "+                log(ast, \"unnecessary.paren.literal\", ast.getText());", "-            mAssignDepth++;", "-            final DetailAST last = aAST.getLastChild();", "+            assignDepth++;", "+            final DetailAST last = ast.getLastChild();", "-                log(aAST, \"unnecessary.paren.assign\");", "+                log(ast, \"unnecessary.paren.assign\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "977a8755b4c0f53c888c49991cb6af48", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void append(DetailAST aAST)", "signatureAfterChange": "     private void append(DetailAST ast)", "diff": ["-    private void append(DetailAST aAST)", "+    private void append(DetailAST ast)", "-        mBuffer.append(aAST.getText());", "-        if (mLineNo == 0) {", "-            mLineNo = aAST.getLineNo();", "+        buffer.append(ast.getText());", "+        if (lineNo == 0) {", "+            lineNo = ast.getLineNo();", "-        else if (aAST.getLineNo() > 0) {", "-            mLineNo = Math.min(mLineNo, aAST.getLineNo());", "+        else if (ast.getLineNo() > 0) {", "+            lineNo = Math.min(lineNo, ast.getLineNo());", "-        if (mColNo == 0) {", "-            mColNo = aAST.getColumnNo();", "+        if (colNo == 0) {", "+            colNo = ast.getColumnNo();", "-        else if (aAST.getColumnNo() > 0) {", "-            mColNo = Math.min(mColNo, aAST.getColumnNo());", "+        else if (ast.getColumnNo() > 0) {", "+            colNo = Math.min(colNo, ast.getColumnNo());"]}]}
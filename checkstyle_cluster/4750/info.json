{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea6b5006741c851323af441cbc8ac1f1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a2c749e85271d29c6106fa5f220a0d2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FilterSet.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean accept(AuditEvent aEvent)", "signatureAfterChange": "     public boolean accept(AuditEvent aEvent)", "diff": ["-        final Iterator it = mFilters.iterator();", "-        while (it.hasNext()) {", "-            final Filter filter = (Filter) it.next();", "+        for (Filter filter : mFilters) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1091b5ea20eef89227bf94f9d4f0eb92", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public int[] getAcceptableTokens()", "signatureAfterChange": "     @Override     public int[] getAcceptableTokens()", "diff": ["+    @Override", "-        final Set tokenNames = getTokenNames();", "+        final Set<String> tokenNames = getTokenNames();", "-        final Iterator it = tokenNames.iterator();", "-        while (it.hasNext()) {", "-            final String name = (String) it.next();", "+        for (String name : tokenNames) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "173b8d4f3d17df4bc7e7838215ca009d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "     @Override     public void finishTree(DetailAST aRootAST)", "diff": ["+    @Override", "-        final Iterator it = mImports.iterator();", "-        while (it.hasNext()) {", "-            final FullIdent imp = (FullIdent) it.next();", "-", "+        for (FullIdent imp : mImports) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "217224ad794837c71e8ccee5fadb10ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     PkgControl locateFinest(final String aForPkg)", "signatureAfterChange": "     PkgControl locateFinest(final String aForPkg)", "diff": ["-        final Iterator it = mChildren.iterator();", "-        while (it.hasNext()) {", "-            final PkgControl pc = (PkgControl) it.next();", "+        for (PkgControl pc : mChildren) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24a53364316eea0adbe778080e1fcaab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "190ce3850f4e26e1283782e98b1c373c8e88806c", "commitAfterChange": "e1a2e66b262be83708d65b7c5f2ba4014c97e384", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private void checkComment(DetailAST ast, TextBlock comment)", "signatureAfterChange": "     private void checkComment(DetailAST ast, TextBlock comment)", "diff": ["-        final Iterator<JavadocTag> unusedTagIt = tags.iterator();", "-        while (unusedTagIt.hasNext()) {", "-            final JavadocTag jt = unusedTagIt.next();", "-            if (!jt.isSeeOrInheritDocTag()) {", "-                log(jt.getLineNo(), MSG_UNUSED_TAG_GENERAL);", "+        for (JavadocTag javadocTag : tags) {", "+            if (!javadocTag.isSeeOrInheritDocTag()) {", "+                log(javadocTag.getLineNo(), MSG_UNUSED_TAG_GENERAL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d06ba8cedc5218efe84509167f5579e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void fireFileStarted(String aFileName)", "signatureAfterChange": "     public void fireFileStarted(String aFileName)", "diff": ["-        final Iterator it = mListeners.iterator();", "-        while (it.hasNext()) {", "-            final AuditListener listener = (AuditListener) it.next();", "+        for (AuditListener listener : mListeners) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5589a834cb1399ba067e87e52aeb02b7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void notifyBegin(DetailAST aRootAST, FileContents aContents)", "signatureAfterChange": "     private void notifyBegin(DetailAST aRootAST, FileContents aContents)", "diff": ["-        final Iterator it = mAllChecks.iterator();", "-        while (it.hasNext()) {", "-            final Check check = (Check) it.next();", "-            check.setFileContents(aContents);", "-            check.beginTree(aRootAST);", "+        for (Check ch : mAllChecks) {", "+            ch.setFileContents(aContents);", "+            ch.beginTree(aRootAST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ecb319ddeb47038af093445d078fdab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected void fireAuditStarted()", "signatureAfterChange": "     protected void fireAuditStarted()", "diff": ["-        final Iterator it = mListeners.iterator();", "-        while (it.hasNext()) {", "-            final AuditListener listener = (AuditListener) it.next();", "+        for (AuditListener listener : mListeners) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c3c410d1608758ba211fd0c1a25af19", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private AccessResult localCheckAccess(final String aForImport,         final String aInPkg)", "signatureAfterChange": "     private AccessResult localCheckAccess(final String aForImport,         final String aInPkg)", "diff": ["-        final Iterator it = mGuards.iterator();", "-        while (it.hasNext()) {", "-            final Guard g = (Guard) it.next();", "+        for (Guard g : mGuards) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93db513b3ba2211796eda2a7ff5a8b32", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public void fireFileFinished(String aFileName)", "signatureAfterChange": "     public void fireFileFinished(String aFileName)", "diff": ["-        final Iterator it = mListeners.iterator();", "-        while (it.hasNext()) {", "-            final AuditListener listener = (AuditListener) it.next();", "+        for (AuditListener listener : mListeners) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ca3f16d0f8f977e73c10c6d367a478", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(DetailAST aAST)", "diff": ["+    @Override", "-                final Iterator it = mEqualsMethods.iterator();", "-                while (it.hasNext()) {", "-                    final DetailAST equalsAST = (DetailAST) it.next();", "-                    final DetailAST nameNode =", "-                        equalsAST.findFirstToken(TokenTypes.IDENT);", "-                    log(", "-                        nameNode.getLineNo(),", "-                        nameNode.getColumnNo(),", "-                        \"covariant.equals\");", "+                for (DetailAST equalsAST : mEqualsMethods) {", "+                    final DetailAST nameNode = equalsAST", "+                            .findFirstToken(TokenTypes.IDENT);", "+                    log(nameNode.getLineNo(), nameNode.getColumnNo(),", "+                            \"covariant.equals\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4db6ef39a7465a45807ff75d69ca730", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private String getPackageName()", "signatureAfterChange": "     private String getPackageName()", "diff": ["-        final Iterator it = mPackageStack.iterator();", "-        while (it.hasNext()) {", "-            final String subPackage = (String) it.next();", "+        for (String subPackage : mPackageStack) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bded51d7eb4415de43339466350fbc40", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected void fireAuditFinished()", "signatureAfterChange": "     protected void fireAuditFinished()", "diff": ["-        final Iterator it = mListeners.iterator();", "-        while (it.hasNext()) {", "-            final AuditListener listener = (AuditListener) it.next();", "+        for (AuditListener listener : mListeners) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c900c0b24e8d739d5c7f0e888f3e196f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "     @Override     public void finishTree(DetailAST aRootAST)", "diff": ["+    @Override", "-        final Set keys = mStringMap.keySet();", "-        final Iterator keyIterator = keys.iterator();", "-        while (keyIterator.hasNext()) {", "-            final String key = (String) keyIterator.next();", "-            final ArrayList hits = (ArrayList) mStringMap.get(key);", "+        final Set<String> keys = mStringMap.keySet();", "+        for (String key : keys) {", "+            final List<StringInfo> hits = mStringMap.get(key);", "-                final StringInfo firstFinding = (StringInfo) hits.get(0);", "+                final StringInfo firstFinding = hits.get(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce1639648494e7de83c1646848c0db90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public int[] getAcceptableTokens()", "signatureAfterChange": "     @Override     public int[] getAcceptableTokens()", "diff": ["+    @Override", "-        final Set tokenNames = getTokenNames();", "+        final Set<String> tokenNames = getTokenNames();", "-            final Iterator it = tokenNames.iterator();", "-            while (it.hasNext()) {", "-                final String name = (String) it.next();", "+            for (String name : tokenNames) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf4dc560017c01c89b6a97b9f85b4b83", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void notifyEnd(DetailAST aRootAST)", "signatureAfterChange": "     private void notifyEnd(DetailAST aRootAST)", "diff": ["-        final Iterator it = mAllChecks.iterator();", "-        while (it.hasNext()) {", "-            final Check check = (Check) it.next();", "-            check.finishTree(aRootAST);", "+        for (Check ch : mAllChecks) {", "+            ch.finishTree(aRootAST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db47d74aad45efead86ff62d4031ad39", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void fireErrors(String aFileName, LocalizedMessage[] aErrors)", "signatureAfterChange": "     public void fireErrors(String aFileName, LocalizedMessage[] aErrors)", "diff": ["-                final Iterator it = mListeners.iterator();", "-                while (it.hasNext()) {", "-                    final AuditListener listener = (AuditListener) it.next();", "+                for (AuditListener listener : mListeners) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb06d9a80bf75e714d0ed1ba0487ecbe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void registerCheck(Check aCheck)         throws CheckstyleException", "signatureAfterChange": "     private void registerCheck(Check aCheck)         throws CheckstyleException", "diff": ["-        final Set checkTokens = aCheck.getTokenNames();", "+        final Set<String> checkTokens = aCheck.getTokenNames();", "-            final Iterator it = checkTokens.iterator();", "-            while (it.hasNext()) {", "-                final String token = (String) it.next();", "+            for (String token : checkTokens) {"]}]}
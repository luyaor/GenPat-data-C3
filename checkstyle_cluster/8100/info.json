{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "441c298ac9b98adce5b00ac9037e2d81", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aba90b16ad56f427ee0abd656f386cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheckTest.java", "commitBeforeChange": "bd4ec9a98edaced73f14c5422f64c39fad3ce596", "commitAfterChange": "fc17c983239b6e6a6d3e41f53cb134bd22488db1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public void testIntegersOnly()         throws Exception", "signatureAfterChange": "          public void testIntegersOnly()         throws Exception", "diff": ["-            \"91:14: '0xffffffffL' is a magic number.\",", "-            \"99:30: '+3' is a magic number.\",", "-            \"100:29: '-2' is a magic number.\",", "-            \"110:35: '0x80000000' is a magic number.\",", "-            \"111:36: '0x8000000000000000L' is a magic number.\",", "-            \"114:37: '020000000000' is a magic number.\",", "-            \"115:38: '01000000000000000000000L' is a magic number.\",", "+            \"92:14: '0xffffffffL' is a magic number.\",", "+            \"100:30: '+3' is a magic number.\",", "+            \"101:29: '-2' is a magic number.\",", "+            \"111:35: '0x80000000' is a magic number.\",", "+            \"112:36: '0x8000000000000000L' is a magic number.\",", "+            \"115:37: '020000000000' is a magic number.\",", "+            \"116:38: '01000000000000000000000L' is a magic number.\",", "+            \"131:32: '378' is a magic number.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce739455f49030490f58d2a30458e945", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheckTest.java", "commitBeforeChange": "3c0c72f96477afb542ee37b3336f4b7b7613ff29", "commitAfterChange": "6f0a3dee5efc6217383f9bfd6d7a3a116b1c885b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testAllVariants() throws Exception", "signatureAfterChange": "      @Test     public void testAllVariants() throws Exception", "diff": ["-        checkConfig.addAttribute(\"checkName\", \"true\");", "-        checkConfig.addAttribute(\"checkModifier\", \"true\");", "+        checkConfig.addAttribute(\"ignoreName\", \"false\");", "+        checkConfig.addAttribute(\"ignoreModifier\", \"false\");", "-            \"26:1: Class 'AbstractClass' must has abstract modifier.\",", "-            \"29:1: Class 'Class1Factory' must has abstract modifier.\",", "-            \"33:5: Class 'AbstractInnerClass' must has abstract modifier.\",", "-            \"38:5: Class 'WellNamedFactory' must has abstract modifier.\",};", "+            \"26:1: Class 'AbstractClass' must be declared as 'abstract'.\",", "+            \"29:1: Class 'Class1Factory' must be declared as 'abstract'.\",", "+            \"33:5: Class 'AbstractInnerClass' must be declared as 'abstract'.\",", "+            \"38:5: Class 'WellNamedFactory' must be declared as 'abstract'.\",", "+        };"]}]}
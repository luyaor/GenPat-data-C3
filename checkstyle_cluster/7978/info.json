{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec44fad2fcf4e8b9f8cd078093fdd25f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13bbf0764903dafd604f2c91da892bed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType);", "signatureAfterChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType)", "diff": ["-    void verifyType(MyModifierSet aMods, MyCommonAST aType);", "+    void verifyType(MyModifierSet aMods, MyCommonAST aType)", "+    {", "+        if (!mConfig.getTypeRegexp().match(aType.getText())) {", "+            log(aType.getLineNo(),", "+                \"type name '\" + aType.getText() +", "+                \"' must match pattern '\" + mConfig.getTypePat() + \"'.\");", "+        }", "+", "+        //", "+        // Only Javadoc testing below", "+        //", "+        final Scope typeScope =", "+            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "+", "+        if (!inCheckScope(typeScope)) {", "+            return; // no need to really check anything", "+        }", "+", "+        final int lineNo = (aMods.size() > 0)", "+            ? aMods.getFirstLineNo()", "+            : aType.getLineNo();", "+", "+        final String[] jd = getJavadocBefore(lineNo - 1);", "+        if (jd == null) {", "+            log(lineNo, \"type is missing a Javadoc comment.\");", "+        }", "+        else if (!mConfig.isAllowNoAuthor() &&", "+                 mInScope.size() == 0 && // don't check author for inner classes", "+                 (MATCH_JAVADOC_AUTHOR.grep(jd).length == 0))", "+        {", "+            log(lineNo, \"type Javadoc comment is missing an @author tag.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "410de81b306f8e26106ff3728d2b092e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java", "commitBeforeChange": "2a8aba9a54d2112b142a1b9e0c4e762e780155c1", "commitAfterChange": "7fa61f5c0b05fc44c9f55a23c816e8e072dcec0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-//                else if (mInScope.size() == 0) {", "-//                    // don't check author/version for inner classes", "-//                    if (!mConfig.isAllowNoAuthor()", "-//                        && (MATCH_JAVADOC_AUTHOR.grep(cmt).length == 0)) {", "-//                        mMessages.add(lineNo, \"type.missingTag\", \"@author\");", "-//                    }", "-//                    if (mConfig.isRequireVersion()", "-//                        && (MATCH_JAVADOC_VERSION.grep(cmt).length == 0)) {", "-//                        mMessages.add(lineNo, \"type.missingTag\", \"@version\");", "-//                    }", "-//                }", "+                else if (ScopeUtils.isOuterMostType(aAST)) {", "+                    // don't check author/version for inner classes", "+                    if (!mAllowNoAuthor", "+                        && (MATCH_JAVADOC_AUTHOR.grep(cmt).length == 0))", "+                    {", "+                        log(aAST.getLineNo(), \"type.missingTag\", \"@author\");", "+                    }", "+                    ", "+                    if (mRequireVersion", "+                        && (MATCH_JAVADOC_VERSION.grep(cmt).length == 0))", "+                    {", "+                        log(aAST.getLineNo(), \"type.missingTag\", \"@version\");", "+                    }", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d3bd9b4a7d2ddac08a51b9adc8bb00f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ac2efaef44223f90d377597829968dc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/TableMaker.java", "commitBeforeChange": "0bef5991348beca2e84a2b711d734b689c494f15", "commitAfterChange": "3f09770c89ed82c8157fbb11047a52e4c5c2a75e", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "   public void processConstructorDef(SymTabAST tree)", "signatureAfterChange": "   public void processConstructorDef(SymTabAST tree)", "diff": ["-    String name = tree.findFirstToken(TokenTypes.IDENT).getText();", "-    MethodDef constructor = new MethodDef(name, symbolTable.getCurrentScope(),", "-                                          tree);", "-    symbolTable.defineMethod( constructor );", "-", "-    symbolTable.pushScope( constructor );", "-    walkTree(tree.findFirstToken(TokenTypes.SLIST), false);", "-    symbolTable.popScope();", "+    processMethodDef(tree);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5129d66c474d0751e9f577280f43589", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "9a8acc01fdfd4cea9891b0da6e01ff41226900ff", "commitAfterChange": "2b8786f133631d37cb7b9c6f334fe0ebb5f4017a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     void verifyWSAfter(int aLineNo, int aColNo, MyToken aConstruct)", "signatureAfterChange": "     void verifyWSAfter(int aLineNo, int aColNo, MyToken aConstruct)", "diff": ["-        if (mConfig.isIgnoreWhitespace() ||", "-            ((MyToken.CAST == aConstruct) && mConfig.isIgnoreCastWhitespace()))", "-        {", "-            return;", "-        }", "+        verifyWSAfter(aLineNo, aColNo, aConstruct, \"\");", "+    }", "-        final String line = mLines[aLineNo - 1];", "-        if ((aColNo < line.length()) &&", "-            !Character.isWhitespace(line.charAt(aColNo)))", "-        {", "-            log(aLineNo,", "-                aConstruct.getText() + \" needs to be followed by whitespace.\");", "-        }"]}]}
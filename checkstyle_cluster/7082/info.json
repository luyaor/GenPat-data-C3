{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2b786f36b4fcf0e5f2137c8ed55d01f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbebadcffb5f6c10adf509a62bd1ab2a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "e1a27939aea00c2bb9fa3f54a5256559a410846e", "commitAfterChange": "c3dc1a94f3f89751c5297fb55cd60ea975509d5f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public ParseTreeInfoPanel()", "signatureAfterChange": "     public ParseTreeInfoPanel()", "diff": ["-        final DetailAST treeRoot = null;", "-        parseTreeModel = new ParseTreeModel(treeRoot);", "+        parseTreeModel = new ParseTreeModel(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f81afba818c4c8c1de1ac977736918b0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java", "commitBeforeChange": "52e2087c404986f8e12cd8579be7b2333961e1a3", "commitAfterChange": "c38185458ab824874b8465c46b4dc42646440aaa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Integer getStartColumn(Integer aLineNum)", "signatureAfterChange": "     public Integer getStartColumn(Integer aLineNum)", "diff": ["-        Integer colNum = (Integer) mLines.get(aLineNum);", "-        return colNum;", "+        return (Integer) mLines.get(aLineNum);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f910bc93ad19ba01e9429232368268cc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java", "commitBeforeChange": "5635ac93dc03ba38265f118885fa00bdabffda6c", "commitAfterChange": "94facbbd4dd5038a891b682217b2b5821fe9e729", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private static DetailAST createArtificialTreeRoot()", "signatureAfterChange": "      private static DetailAST createArtificialTreeRoot()", "diff": ["-        DetailAST retVal = (DetailAST) factory.create(0, \"ROOT\");", "-        return retVal;", "+        // TODO: Need to resolve if need a fake root node....", "+        return (DetailAST) factory.create(1, \"ROOT\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cb8105a2f3349e9150642e85cf4b923", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f07a0381c54b0f4aa8095bb835676dd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java", "commitBeforeChange": "64c05f5391bdf55a60da22a685488022827aee84", "commitAfterChange": "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testIsSuppressed() throws Exception", "signatureAfterChange": "      @Test     public void testIsSuppressed() throws Exception", "diff": ["-        Constructor<?> entryConstr = entry.getDeclaredConstructor(String.class, int.class,", "+        Constructor<?> entryConstructor = entry.getDeclaredConstructor(String.class, int.class,", "-        entryConstr.setAccessible(true);", "+        entryConstructor.setAccessible(true);", "-        Object entryInstance = entryConstr.newInstance(\"MockEntry\", 100, 100, 350, 350);", "+        Object entryInstance = entryConstructor.newInstance(\"MockEntry\", 100, 100, 350, 350);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7118894c38a5e108512ab2b23383c88b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "43fe1ad269809f293b375dc4d0a4313798bf2124", "commitAfterChange": "50559c68761e235f57e48cd2dc28928b417d7745", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public MethodCallHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "signatureAfterChange": "     public MethodCallHandler(IndentationCheck aIndentCheck,         DetailAST aAST, ExpressionHandler aParent)", "diff": ["-        DetailAST aAst, ExpressionHandler aParent)", "+        DetailAST aAST, ExpressionHandler aParent)", "-            aAst.getType() == TokenTypes.CTOR_CALL", "-                ? \"ctor call\" : \"method call\",", "-            aAst,", "+            aAST.getType() == TokenTypes.METHOD_CALL", "+                ? \"method call\" : \"ctor call\",", "+            aAST,"]}]}
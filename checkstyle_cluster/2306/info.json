{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "833af5ac30ac9a2baac258f9f5b08518", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1013c82341b3d961a68ecbf79b9710c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "25603b312f6436a2518fdd8a32838c389837d992", "commitAfterChange": "3b3672d4694524ffe687d20e2be5970d4f85a26c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r     private void processEnd(DetailAST aAST)", "signatureAfterChange": "\r     private void processEnd(DetailAST aAST)", "diff": ["+\r", "-            // or a '(),'.\r", "+            // or a '(),[.'.\r", "-                if (!Character.isWhitespace(charAfter) && ('(' != charAfter)\r", "-                        && (')' != charAfter) && (',' != charAfter))\r", "+\r", "+                // Need to handle a number of cases. First is:\r", "+                //    Collections.<Object>emptySet();\r", "+                //                        ^\r", "+                //                        +--- whitespace not allowed\r", "+                if ((aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)\r", "+                    && (aAST.getParent().getParent().getType()\r", "+                        == TokenTypes.DOT)\r", "+                    && (aAST.getParent().getParent().getParent().getType()\r", "+                        == TokenTypes.METHOD_CALL))\r", "+                {\r", "+                    if (Character.isWhitespace(charAfter)) {\r", "+                        log(aAST.getLineNo(), after, \"ws.followed\", \">\");\r", "+                    }\r", "+                }\r", "+                else if (!Character.isWhitespace(charAfter)\r", "+                    && ('(' != charAfter) && (')' != charAfter)\r", "+                    && (',' != charAfter) && ('[' != charAfter)\r", "+                    && ('.' != charAfter))\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20c9168fbd88b8bfe70c94221ed1291d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "e1613910f30cc63de1393ed897aa766932e1d973", "commitAfterChange": "e56f3d21ee1a0e8c0eced70ec7990fb03dcb3215", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean isOverrideMethod(DetailAST aAST)", "signatureAfterChange": "     private boolean hasAllowedAnnotations(DetailAST aMethodDef)", "diff": ["+     */", "+    private boolean hasAllowedAnnotations(DetailAST aMethodDef)", "+    {", "+        final DetailAST modifiersNode = aMethodDef.findFirstToken(TokenTypes.MODIFIERS);", "+        DetailAST annotationNode = modifiersNode.findFirstToken(TokenTypes.ANNOTATION);", "+        while (annotationNode != null && annotationNode.getType() == TokenTypes.ANNOTATION) {", "+            DetailAST identNode = annotationNode.findFirstToken(TokenTypes.IDENT);", "+            if (identNode == null) {", "+                identNode = annotationNode.findFirstToken(TokenTypes.DOT)", "+                    .findFirstToken(TokenTypes.IDENT);", "+            }", "+            if (mAllowedAnnotations.contains(identNode.getText())) {", "+                return true;", "+            }", "+            annotationNode = annotationNode.getNextSibling();", "+        }", "+        return false;", "+    }", "-     */", "-    private boolean isOverrideMethod(DetailAST aAST)", "-    {", "-        // Need it to be a method, cannot have an override on anything else.", "-        // Must also have MODIFIERS token to hold the @Override", "-        if ((TokenTypes.METHOD_DEF != aAST.getType())", "-            || (TokenTypes.MODIFIERS != aAST.getFirstChild().getType()))", "-        {", "-            return false;", "-        }", "-", "-        // Now loop over all nodes while they are annotations looking for", "-        // an \"@Override\".", "-        DetailAST node = aAST.getFirstChild().getFirstChild();", "-        while ((null != node) && (TokenTypes.ANNOTATION == node.getType())) {", "-            if ((node.getFirstChild().getType() == TokenTypes.AT)", "-                && (node.getFirstChild().getNextSibling().getType()", "-                    == TokenTypes.IDENT)", "-                && (\"Override\".equals(", "-                        node.getFirstChild().getNextSibling().getText())))", "-            {", "-                return true;", "-            }", "-            node = node.getNextSibling();", "-        }", "-        return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "222f5aa6b101423051c1863bb7334c46", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "75a289111ee8b16dd36de9f76a13908a494d65fd", "commitAfterChange": "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void processRight(DetailAST aAST)", "signatureAfterChange": "     private boolean isFollowsEmptyForIterator(DetailAST aAST)", "diff": ["-    private void processRight(DetailAST aAST)", "+    private boolean isFollowsEmptyForIterator(DetailAST aAST)", "-        final String line = getLines()[aAST.getLineNo() - 1];", "-        final int before = aAST.getColumnNo() - 1;", "-        if (before >= 0) {", "-            boolean followsEmptyForIterator = false;", "-            final DetailAST parent = aAST.getParent();", "-            if ((parent != null)", "-                && (parent.getType() == TokenTypes.LITERAL_FOR))", "-            {", "-                final DetailAST forIterator =", "-                    parent.findFirstToken(TokenTypes.FOR_ITERATOR);", "-                followsEmptyForIterator = (forIterator.getChildCount() == 0)", "-                    && (aAST == forIterator.getNextSibling());", "-            }", "-            if (followsEmptyForIterator) {", "-                return;", "-            }", "-            else if ((PadOption.NOSPACE == getAbstractOption())", "-                && Character.isWhitespace(line.charAt(before))", "-                && !Utils.whitespaceBefore(before, line))", "-            {", "-                log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");", "-            }", "-            else if ((PadOption.SPACE == getAbstractOption())", "-                && !Character.isWhitespace(line.charAt(before))", "-                && (line.charAt(before) != '('))", "-            {", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "-                    \"ws.notPreceeded\", \")\");", "-            }", "+        boolean followsEmptyForIterator = false;", "+        final DetailAST parent = aAST.getParent();", "+        if ((parent != null)", "+            && (parent.getType() == TokenTypes.LITERAL_FOR))", "+        {", "+            final DetailAST forIterator =", "+                parent.findFirstToken(TokenTypes.FOR_ITERATOR);", "+            followsEmptyForIterator = (forIterator.getChildCount() == 0)", "+                && (aAST == forIterator.getNextSibling());", "+        return followsEmptyForIterator;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b9e73114ba3985db475b16ea0f0040a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void processEnd(DetailAST aAST)", "signatureAfterChange": "     private void processEnd(DetailAST ast)", "diff": ["-    private void processEnd(DetailAST aAST)", "+    private void processEnd(DetailAST ast)", "-        final String line = getLine(aAST.getLineNo() - 1);", "-        final int before = aAST.getColumnNo() - 1;", "-        final int after = aAST.getColumnNo() + 1;", "+        final String line = getLine(ast.getLineNo() - 1);", "+        final int before = ast.getColumnNo() - 1;", "+        final int after = ast.getColumnNo() + 1;", "-            log(aAST.getLineNo(), before, \"ws.preceded\", \">\");", "+            log(ast.getLineNo(), before, \"ws.preceded\", \">\");", "-            if (1 == mDepth) {", "+            if (1 == depth) {", "-                if ((aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)", "-                    && (aAST.getParent().getParent().getType()", "+                if ((ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)", "+                    && (ast.getParent().getParent().getType()", "-                    && (aAST.getParent().getParent().getParent().getType()", "+                    && (ast.getParent().getParent().getParent().getType()", "-                        log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                        log(ast.getLineNo(), after, \"ws.followed\", \">\");", "-                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \">\");", "+                    log(ast.getLineNo(), after, \"ws.illegalFollow\", \">\");", "-                //   class IntEnumValueType<E extends Enum<E> & IntEnum>", "+                //   class IntEnuvalueType<E extends Enum<E> & IntEnum>", "-                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"&\");", "+                        log(ast.getLineNo(), after, \"ws.notPreceded\", \"&\");", "-                        log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                        log(ast.getLineNo(), after, \"ws.followed\", \">\");", "-                    log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                    log(ast.getLineNo(), after, \"ws.followed\", \">\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc1f1d066d56d1a7972604ef1e8e344", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "c6edc74a2cf7a5e2c9affef6d0e1e931f783b462", "commitAfterChange": "e76ae6ed8d34160d87b490f5f3ee92f7ba74f5aa", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void processEnd(DetailAST aAST)", "signatureAfterChange": "     private void processEnd(DetailAST aAST)", "diff": ["-                // In a nested Generic type, so can only be a '>' or ','", "-                if ((line.charAt(after) != '>') && (line.charAt(after) != ','))", "+                // In a nested Generic type, so can only be a '>' or ',' or '&'", "+", "+                // In case of several extends definitions:", "+                //", "+                //   class IntEnumValueType<E extends Enum<E> & IntEnum>", "+                //                                          ^", "+                //   should be whitespace if followed by & -+", "+                //", "+                int indexOfAmp = line.indexOf('&', after);", "+                if ((indexOfAmp != -1) && whitespaceBetween(after, indexOfAmp, line))", "+                {", "+                    if (indexOfAmp - after == 0)", "+                    {", "+                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"&\");", "+                    }", "+                    else if (indexOfAmp - after != 1)", "+                    {", "+                        log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                    }", "+                }", "+                else if ((line.charAt(after) != '>') && (line.charAt(after) != ','))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e5a798a9b5c3478902f5c3b29db6ff5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheck.java", "commitBeforeChange": "a81008fd6fd383b6acb39866355aae8a750a326f", "commitAfterChange": "14172dd01adff4bc99296f633c4acad32e3d570f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        int parenColumnNo = parenAST.getColumnNo();", "-        final String[] lines = getLines();", "-        int identLineNo = -1;", "-        int identColumnNo = -1;", "-        final String identText;", "-        final DetailAST identAST;", "-        final DetailAST dotAST = aAST.findFirstToken(TokenTypes.DOT);", "-        if (dotAST != null) {", "-            identAST = dotAST.getLastChild();", "-        }", "-        else if (aAST.getType() == TokenTypes.SUPER_CTOR_CALL) {", "-            identAST = aAST;", "+", "+        final String line = getLines()[parenAST.getLineNo() - 1];", "+        if (Utils.whitespaceBefore(parenAST.getColumnNo(), line)) {", "+            if (!mAllowLineBreaks) {", "+                log(parenAST, \"line.previous\", parenAST.getText());", "+            }", "-            identAST = aAST.findFirstToken(TokenTypes.IDENT);", "-        }", "-        identLineNo = identAST.getLineNo();", "-        identColumnNo = identAST.getColumnNo();", "-        identText = identAST.getText();", "-", "-        if (identLineNo == parenAST.getLineNo()) {", "-            final int after = identColumnNo + identText.length();", "-            final String line = lines[identLineNo - 1];", "+            final int before = parenAST.getColumnNo() - 1;", "-                && (Character.isWhitespace(line.charAt(after))))", "+                && (Character.isWhitespace(line.charAt(before))))", "-                log(identLineNo, after, \"ws.followed\", identText);", "+                log(parenAST , \"ws.preceded\", parenAST.getText());", "-                     && !Character.isWhitespace(line.charAt(after)))", "+                     && !Character.isWhitespace(line.charAt(before)))", "-                log(identLineNo, after, \"ws.notFollowed\", identText);", "+                log(parenAST, \"ws.notPreceded\", parenAST.getText());", "-        }", "-        else if (!mAllowLineBreaks) {", "-            log(", "-                parenAST.getLineNo(),", "-                parenColumnNo,", "-                \"line.previous\",", "-                parenAST.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b4a7a70b08db72857e7ce2ce519f888", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ParenPadCheck.java", "commitBeforeChange": "081f9e7f7f70a5da494c9e1185c27f1766e16acc", "commitAfterChange": "916417fc6214ab75606d2fbc1d7b511509ffe25b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processRight(DetailAST aAST)", "signatureAfterChange": "     private void processRight(DetailAST aAST)", "diff": ["-            if ((PadOption.NOSPACE == getAbstractOption())", "+            boolean followsEmptyForIterator = false;", "+            final DetailAST parent = aAST.getParent();", "+            if ((parent != null) ", "+                && (parent.getType() == TokenTypes.LITERAL_FOR))", "+            {", "+                final DetailAST forIterator =", "+                    parent.findFirstToken(TokenTypes.FOR_ITERATOR);", "+                followsEmptyForIterator = (forIterator.getChildCount() == 0)", "+                    && (aAST == forIterator.getNextSibling());", "+            }", "+            if (followsEmptyForIterator) {", "+                return;", "+//                if (mPadEmptyForIterator", "+//                    && !Character.isWhitespace(line.charAt(before)))", "+//                {", "+//                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+//                        \"ws.notPreceeded\", \")\");", "+//                }", "+//                else if (!mPadEmptyForIterator", "+//                    && Character.isWhitespace(line.charAt(before)))", "+//                {", "+//                    log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");", "+//                }  ", "+            }", "+            else if ((PadOption.NOSPACE == getAbstractOption())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a757da64598958c48992cd1388c25a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java", "commitBeforeChange": "0fe31dfdf954242756eec703576cda4c8f561f1d", "commitAfterChange": "2057a77c3a524b86dff382ac8abdca71dd03764a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static DetailAST getPreviousStmt(DetailAST comment)", "signatureAfterChange": "     private static DetailAST getPrevCaseToken(DetailAST parentStatement)", "diff": ["-    private static DetailAST getPreviousStmt(DetailAST comment) {", "-        final DetailAST parentStatement = comment.getParent();", "-            DetailAST prevBlock;", "-                prevBlock = parentStatement.getPreviousSibling();", "-                if (prevBlock.getLastChild() != null) {", "-                    DetailAST blockBody = prevBlock.getLastChild().getLastChild();", "-                    if (blockBody.getPreviousSibling() != null) {", "-                        blockBody = blockBody.getPreviousSibling();", "-                    }", "-                    if (blockBody.getType() == TokenTypes.EXPR) {", "-                        prevStmt = blockBody.getFirstChild().getFirstChild();", "-                    }", "-                    else {", "-                        prevStmt = blockBody;", "-", "-                    }", "-                }", "-                final DetailAST parentBlock = parentStatement.getParent();", "-", "-                if (parentBlock != null && parentBlock.getParent() != null", "-                    && parentBlock.getParent().getPreviousSibling() != null", "-                    && parentBlock.getParent().getPreviousSibling()", "-                        .getType() == TokenTypes.LITERAL_CASE) {", "-", "-                    prevBlock = parentBlock.getParent().getPreviousSibling();", "-                    prevStmt = prevBlock;", "-                }", "+     */", "+    private static DetailAST getPrevCaseToken(DetailAST parentStatement) {", "+        final DetailAST prevCaseToken;", "+        final DetailAST parentBlock = parentStatement.getParent();", "+        if (parentBlock != null && parentBlock.getParent() != null", "+            && parentBlock.getParent().getPreviousSibling() != null", "+            && parentBlock.getParent().getPreviousSibling()", "+                .getType() == TokenTypes.LITERAL_CASE) {", "+", "+            prevCaseToken = parentBlock.getParent().getPreviousSibling();", "+        }", "+        else {", "+            prevCaseToken = null;", "+        }", "+        return prevCaseToken;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddf825898be2d8057786eaa1fb8fc451", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "b9f232ffe08853fbfd0239d53d683d4fe5c6b817", "commitAfterChange": "1bd30555eac039d0486dffb3fc43b7a34117909b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processEnd(DetailAST ast)", "signatureAfterChange": "     private void processEnd(DetailAST ast)", "diff": ["-        if ((0 <= before) && Character.isWhitespace(line.charAt(before))", "+        if (0 <= before && Character.isWhitespace(line.charAt(before))", "-                if ((ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)", "-                        && ((ast.getParent().getParent().getType()", "-                            == TokenTypes.DOT)", "-                        && (ast.getParent().getParent().getParent().getType()", "-                            == TokenTypes.METHOD_CALL))", "-                    || isAfterMethodReference(ast))", "+                if (ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS", "+                        && ast.getParent().getParent().getType()", "+                            == TokenTypes.DOT", "+                        && ast.getParent().getParent().getParent().getType()", "+                            == TokenTypes.METHOD_CALL", "+                        || isAfterMethodReference(ast))", "-                    && ('(' != charAfter) && (')' != charAfter)", "-                    && (',' != charAfter) && ('[' != charAfter)", "-                    && ('.' != charAfter) && (':' != charAfter)", "+                    && '(' != charAfter && ')' != charAfter", "+                    && ',' != charAfter && '[' != charAfter", "+                    && '.' != charAfter && ':' != charAfter", "-                if ((indexOfAmp != -1)", "+                if (indexOfAmp != -1"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e779aae7c82986d9a4e1ee04abcb3803", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "70c89f71ecaedc22708cd60d0f200a7b8893ca34", "commitAfterChange": "325b265cc583468dd495088e95f316a2ba10c4af", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r     private void processStart(DetailAST aAST)", "signatureAfterChange": "\r     private void processStart(DetailAST aAST)", "diff": ["-        if ((0 <= before) && Character.isWhitespace(line.charAt(before))\r", "+        // Need to handle two cases as in:\r", "+        //\r", "+        //   public static <T> Callable<T> callable(Runnable task, T result)\r", "+        //                 ^           ^\r", "+        //      ws reqd ---+           +--- whitespace NOT required\r", "+        //\r", "+        if (0 <= before) {\r", "+            // Detect if the first case\r", "+            final DetailAST parent = aAST.getParent();\r", "+            final DetailAST grandparent = parent.getParent();\r", "+            if ((TokenTypes.TYPE_PARAMETERS == parent.getType())\r", "+                && (TokenTypes.METHOD_DEF == grandparent.getType()))\r", "+            {\r", "+                // Require whitespace\r", "+                if (!Character.isWhitespace(line.charAt(before))) {\r", "+                    log(aAST.getLineNo(), before, \"ws.notPreceded\", \"<\");\r", "+                }\r", "+            }\r", "+            // Whitespace not required\r", "+            else if (Character.isWhitespace(line.charAt(before))\r", "-        {\r", "-            log(aAST.getLineNo(), before, \"ws.preceded\", \"<\");\r", "+            {\r", "+                log(aAST.getLineNo(), before, \"ws.preceded\", \"<\");\r", "+            }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecde6ef54a2d20f5e8b58316b9f8fdfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "86e743f60589840dc86e73a90592b0b17c7c50c1", "commitAfterChange": "17ebdc5c3740d37f29b8dc09c4ce4a42d2982b1e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkAnnotationIndentation(DetailAST aModifiersNode,             NavigableMap<Integer, DetailAST> aFirstNodesOnLines)", "signatureAfterChange": "     private void checkAnnotationIndentation(DetailAST aAtNode,             NavigableMap<Integer, DetailAST> aFirstNodesOnLines)", "diff": ["-    private void checkAnnotationIndentation(DetailAST aModifiersNode,", "+    private void checkAnnotationIndentation(DetailAST aAtNode,", "-        final int currentIndent = aModifiersNode.getColumnNo() + mIndentLevel;", "-        final int firstNodeIndent = aModifiersNode.getColumnNo();", "+        final int currentIndent = aAtNode.getColumnNo() + mIndentLevel;", "+        final int firstNodeIndent = aAtNode.getColumnNo();", "+        final DetailAST lastAnnotationNode = getLastAnnotationNode(aAtNode);", "+        final int lastAnnotationLine = lastAnnotationNode.getLineNo();", "+        final int lastAnnotattionColumn = lastAnnotationNode.getColumnNo();", "-            final int parentType = node.getParent().getType();", "-            if (node.getType() == TokenTypes.AT) {", "-", "-                if (isAnnotationAloneOnLine(node.getParent())) {", "-                    logWarningMessage(node, firstNodeIndent);", "-                    itr.remove();", "-                }", "-            }", "-            else if (parentType != TokenTypes.MODIFIERS", "-                    && !hasTypeNodeAsParent(node)", "-                    && parentType != TokenTypes.ENUM_DEF", "-                    && parentType != TokenTypes.CTOR_DEF", "-                    && node.getType() != TokenTypes.LITERAL_CLASS)", "+            if (node.getLineNo() < lastAnnotationLine", "+                    || node.getLineNo() == lastAnnotationLine", "+                    && node.getColumnNo() <= lastAnnotattionColumn)", "-                logWarningMessage(node, currentIndent);", "+                final DetailAST parentNode = node.getParent();", "+                if (node.getType() == TokenTypes.AT", "+                        && parentNode.getParent().getType() == TokenTypes.MODIFIERS)", "+                {", "+                    logWarningMessage(node, firstNodeIndent);", "+                }", "+                else {", "+                    logWarningMessage(node, currentIndent);", "+                }", "-        }", "-    }", "+            else {", "+                break;", "+    }"]}]}
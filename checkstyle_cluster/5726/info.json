{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f0bfef5e184906b58bb37f24eaad437", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "625a5e3838f3ba022eb6f8d21ed7db59", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "39a7271a2a950a2ec71d73b95b6eef8d1079d487", "commitAfterChange": "615219883bbd43946f88da4da14ada0a86ab34e4", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 78, "signatureBeforeChange": "     public void setAllowEmptyCatch(final boolean aAllowed)", "signatureAfterChange": "     public void setCatchBlock(final String aTo)", "diff": ["+    /** @param aTo the catch block option **/", "+    public void setCatchBlock(final String aTo)", "+    {", "+        mOptionMemory.add(new Runnable()", "+            {", "+                public void run()", "+                {", "+                    mConfig.setCatchBlock(extractCatchBlockOption(aTo));", "+                }", "+            });", "+    }", "-    /** @param aAllowed whether empty catch blocks are allowed **/", "-    public void setAllowEmptyCatch(final boolean aAllowed)", "-    {", "-        mOptionMemory.add(new Runnable()", "-            {", "-                public void run()", "-                {", "-                    mConfig.setAllowEmptyCatch(aAllowed);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f3796bb5942eb88849d98eb11d1fb3b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "f464a296056168259e1f84333507fcb797d93cdc", "commitAfterChange": "3ded17ac3d61b4284299319f5f60ee220154fded", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 39, "signatureBeforeChange": "     public void setIgnoreParenWhitespace(boolean aIgnore)", "signatureAfterChange": "     public void setParenPad(String aTo)", "diff": ["-    /** @param aIgnore whether to ignore whitespace around parenthesis **/", "-    public void setIgnoreParenWhitespace(boolean aIgnore)", "-    {", "-        mConfig.setIgnoreParenWhitespace(aIgnore);", "-    }", "+    /** @param aTo the parenthesis padding option **/", "+    public void setParenPad(String aTo)", "+    {", "+        mConfig.setParenPadOption(extractPadOption(aTo));"]}]}
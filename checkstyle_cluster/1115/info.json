{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fa2639a8203da5915ee06023d33a1df", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61bf1b58629df0661229e050598fc2bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/Resolver.java", "commitBeforeChange": "2dda964c91b5bc5dc42b78a6d0d74060b7062613", "commitAfterChange": "ddff555c2df8c132d70e4e2fa4dce7e7c8335e29", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      private IClass resolveArrayAccess(         SymTabAST node,         Scope location,         IClass context,         boolean referencePhase)", "signatureAfterChange": "      private IClass resolveArrayAccess(         SymTabAST node,         Scope location,         IClass context,         boolean referencePhase)", "diff": ["+        //resolve index expressions", "+        while (arrayNode.getType() == TokenTypes.INDEX_OP) {", "+            resolveExpression(exprNode, location, context, referencePhase);", "+            arrayNode = (SymTabAST) (arrayNode.getFirstChild());", "+            exprNode = (SymTabAST) (arrayNode.getNextSibling()); ", "+        }", "+        ", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d2c3b7054eeea9eed6e4e771b8f89e2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        final FullIdent ident = FullIdent.createFullIdentBelow(aAST);", "+        final FullIdent ident;", "+        boolean isStatic;", "+        if (aAST.getType() == TokenTypes.IMPORT) {", "+            ident = FullIdent.createFullIdentBelow(aAST);", "+            isStatic = false;", "+        }", "+        else {", "+            ident = FullIdent.createFullIdent(", "+                (DetailAST) aAST.getFirstChild().getNextSibling());", "+            isStatic = true;", "+        }", "-                        shouldFireError = (mLastImport.compareTo(name) >= 0);", "+                        shouldFireError =", "+                            //current and previous static or current and", "+                            //previous non-static", "+                            (!(mLastImportStatic ^ isStatic)", "+                            &&", "+                            //and out of lexicographic order", "+                            (mLastImport.compareTo(name) >= 0))", "+                            ||", "+                            //previous static but current is non-static", "+                            (mLastImportStatic && !isStatic);", "-                            (mLastImport.compareToIgnoreCase(name) >= 0);", "+                                //current and previous static or current and", "+                                //previous non-static", "+                                (!(mLastImportStatic ^ isStatic)", "+                                &&", "+                                //and out of lexicographic order", "+                                (mLastImport.compareToIgnoreCase(name) >= 0))", "+                                ||", "+                                //previous static but current is non-static", "+                                (mLastImportStatic && !isStatic);", "+            mLastImportStatic = isStatic;"]}]}
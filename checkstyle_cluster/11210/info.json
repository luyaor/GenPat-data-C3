{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce339ad91be2cbe155f277de3f0750bf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "887a896964514caf16c068d5e3963ab8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "01d27913a71c29d6a769ed98ca7dd4ba01fe31eb", "commitAfterChange": "4cbd709c019cf1b69796858506d673f7b66d37c7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public int[] getDefaultTokens()", "signatureAfterChange": "     public int[] getDefaultTokens()", "diff": ["-            RCURLY,            // '}'", "-            QUESTION,          // '?'", "-            COLON,             // ':' TODO: dont flag after \"case\"", "-            ASSIGN,            // '='", "-            EQUAL,             // \"==\"", "-            NOT_EQUAL,         // \"!=\"", "-            DIV,               // '/'", "-            DIV_ASSIGN,        // \"/=\"", "-            PLUS,              //' +' (unaray plus is UNARY_PLUS)", "-            PLUS_ASSIGN,       // \"+=\"", "-            MINUS,             // '-' (unary minus is UNARY_MINUS)", "-            MINUS_ASSIGN,      //\"-=\"", "-            STAR,              // '*'", "-            STAR_ASSIGN,       // \"*=\"", "-            MOD,               // '%'", "-            MOD_ASSIGN,        // \"%=\"", "-            SR,                // \">>\"", "-            SR_ASSIGN,         // \">>=\"", "-            BSR,               // \">>>\"", "-            BSR_ASSIGN,        // \">>>=\"", "-            GE,                // \">=\"", "-            GT,                // \">\"", "-            SL,                // \"<<\"", "-            SL_ASSIGN,         // \"<<=\"", "-            LE,                // \"<=\"", "-            LT,                // '<'", "-            BXOR,              // '^'", "-            BXOR_ASSIGN,       // \"^=\"", "-            BOR,               // '|'", "-            BOR_ASSIGN,        // \"|=\"", "-            LOR,               // \"||\"", "-            BAND,              // '&'", "-            BAND_ASSIGN,       // \"&=\"", "-            LAND,              // \"&&\"", "-            LITERAL_catch,", "-            LITERAL_do,", "-            LITERAL_else,", "-            LITERAL_finally,", "-            LITERAL_for,", "-            LITERAL_if,", "-            LITERAL_return,", "-            LITERAL_synchronized,", "-            LITERAL_try,", "-            LITERAL_while,", "-            ASSERT                // TODO: why is it not LITERAL_assert?", "+            TokenTypes.RCURLY,            // '}'", "+            TokenTypes.QUESTION,          // '?'", "+            TokenTypes.COLON,             // ':' TODO: dont flag after \"case\"", "+            TokenTypes.ASSIGN,            // '='", "+            TokenTypes.EQUAL,             // \"==\"", "+            TokenTypes.NOT_EQUAL,         // \"!=\"", "+            TokenTypes.DIV,               // '/'", "+            TokenTypes.DIV_ASSIGN,        // \"/=\"", "+            TokenTypes.PLUS,              //' +' (unaray plus is UNARY_PLUS)", "+            TokenTypes.PLUS_ASSIGN,       // \"+=\"", "+            TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)", "+            TokenTypes.MINUS_ASSIGN,      //\"-=\"", "+            TokenTypes.STAR,              // '*'", "+            TokenTypes.STAR_ASSIGN,       // \"*=\"", "+            TokenTypes.MOD,               // '%'", "+            TokenTypes.MOD_ASSIGN,        // \"%=\"", "+            TokenTypes.SR,                // \">>\"", "+            TokenTypes.SR_ASSIGN,         // \">>=\"", "+            TokenTypes.BSR,               // \">>>\"", "+            TokenTypes.BSR_ASSIGN,        // \">>>=\"", "+            TokenTypes.GE,                // \">=\"", "+            TokenTypes.GT,                // \">\"", "+            TokenTypes.SL,                // \"<<\"", "+            TokenTypes.SL_ASSIGN,         // \"<<=\"", "+            TokenTypes.LE,                // \"<=\"", "+            TokenTypes.LT,                // '<'", "+            TokenTypes.BXOR,              // '^'", "+            TokenTypes.BXOR_ASSIGN,       // \"^=\"", "+            TokenTypes.BOR,               // '|'", "+            TokenTypes.BOR_ASSIGN,        // \"|=\"", "+            TokenTypes.LOR,               // \"||\"", "+            TokenTypes.BAND,              // '&'", "+            TokenTypes.BAND_ASSIGN,       // \"&=\"", "+            TokenTypes.LAND,              // \"&&\"", "+            TokenTypes.LITERAL_CATCH,", "+            TokenTypes.LITERAL_DO,", "+            TokenTypes.LITERAL_ELSE,", "+            TokenTypes.LITERAL_FINALLY,", "+            TokenTypes.LITERAL_FOR,", "+            TokenTypes.LITERAL_IF,", "+            TokenTypes.LITERAL_RETURN,", "+            TokenTypes.LITERAL_SYNCHRONIZED,", "+            TokenTypes.LITERAL_TRY,", "+            TokenTypes.LITERAL_WHILE,", "+            TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d440243c0ab065bf14fc3f49abb6d2b3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testOwnPattern() throws Exception", "signatureAfterChange": "      @Test     public void testOwnPattern() throws Exception", "diff": ["-            \"14:13: Fall through from previous branch of the switch statement.\",", "-            \"38:13: Fall through from previous branch of the switch statement.\",", "-            \"53:13: Fall through from previous branch of the switch statement.\",", "-            \"70:13: Fall through from previous branch of the switch statement.\",", "-            \"87:13: Fall through from previous branch of the switch statement.\",", "-            \"105:13: Fall through from previous branch of the switch statement.\",", "-            \"123:13: Fall through from previous branch of the switch statement.\",", "-            \"145:11: Fall through from previous branch of the switch statement.\",", "-            \"170:11: Fall through from previous branch of the switch statement.\",", "-            \"186:11: Fall through from previous branch of the switch statement.\",", "-            \"204:11: Fall through from previous branch of the switch statement.\",", "-            \"222:11: Fall through from previous branch of the switch statement.\",", "-            \"241:11: Fall through from previous branch of the switch statement.\",", "-            \"252:26: Fall through from previous branch of the switch statement.\",", "-            \"266:11: Fall through from previous branch of the switch statement.\",", "-            \"281:11: Fall through from previous branch of the switch statement.\",", "-            \"284:11: Fall through from previous branch of the switch statement.\",", "-            \"288:11: Fall through from previous branch of the switch statement.\",", "-            \"290:25: Fall through from previous branch of the switch statement.\",", "-            \"306:11: Fall through from previous branch of the switch statement.\",", "-            \"309:11: Fall through from previous branch of the switch statement.\",", "-            \"311:25: Fall through from previous branch of the switch statement.\",", "-            \"327:11: Fall through from previous branch of the switch statement.\",", "-            \"330:11: Fall through from previous branch of the switch statement.\",", "-            \"332:23: Fall through from previous branch of the switch statement.\",", "-            \"348:11: Fall through from previous branch of the switch statement.\",", "-            \"351:11: Fall through from previous branch of the switch statement.\",", "-            \"353:30: Fall through from previous branch of the switch statement.\",", "+            \"14:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"38:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"53:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"70:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"87:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"105:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"123:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"145:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"170:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"186:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"204:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"222:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"241:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"252:26: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"266:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"281:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"284:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"288:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"290:25: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"306:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"309:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"311:25: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"327:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"330:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"332:23: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"348:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"351:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"353:30: \" + getCheckMessage(MSG_FALL_THROUGH),"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efe912fbb33eb64d557bbac149de20d0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03a829bbe46abc038099d9f364830c51", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "7f65ac9c09d4e0ae5afa5b4709c7a8a136b6bd7f", "commitAfterChange": "c9cf116fcb4d295c3dd6fa80d73648bc7f34301c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        // Attempt to locate the tokens to do the check", "-        DetailAST rcurly;", "-        DetailAST lcurly;", "-        DetailAST nextToken;", "-        boolean shouldCheckLastRcurly = false;", "-", "-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_TRY:", "-                lcurly = ast.getFirstChild();", "-                nextToken = lcurly.getNextSibling();", "-                rcurly = lcurly.getLastChild();", "-                break;", "-            case TokenTypes.LITERAL_CATCH:", "-                nextToken = ast.getNextSibling();", "-                lcurly = ast.getLastChild();", "-                rcurly = lcurly.getLastChild();", "-                if (nextToken == null) {", "-                    shouldCheckLastRcurly = true;", "-                    nextToken = getNextToken(ast);", "-                }", "-                break;", "-            case TokenTypes.LITERAL_IF:", "-                nextToken = ast.findFirstToken(TokenTypes.LITERAL_ELSE);", "-                if (nextToken != null) {", "-                    lcurly = nextToken.getPreviousSibling();", "-                    rcurly = lcurly.getLastChild();", "-                }", "-                else {", "-                    shouldCheckLastRcurly = true;", "-                    nextToken = getNextToken(ast);", "-                    lcurly = ast.getLastChild();", "-                    rcurly = lcurly.getLastChild();", "-                }", "-                break;", "-            case TokenTypes.LITERAL_ELSE:", "-                shouldCheckLastRcurly = true;", "-                nextToken = getNextToken(ast);", "-                lcurly = ast.getFirstChild();", "-                rcurly = lcurly.getLastChild();", "-                break;", "-            case TokenTypes.LITERAL_FINALLY:", "-                shouldCheckLastRcurly = true;", "-                nextToken = getNextToken(ast);", "-                lcurly = ast.getFirstChild();", "-                rcurly = lcurly.getLastChild();", "-                break;", "-            case TokenTypes.CLASS_DEF:", "-                final DetailAST child = ast.getLastChild();", "-                lcurly = child.getFirstChild();", "-                rcurly = child.getLastChild();", "-                nextToken = ast;", "-                break;", "-            case TokenTypes.CTOR_DEF:", "-            case TokenTypes.STATIC_INIT:", "-            case TokenTypes.INSTANCE_INIT:", "-                lcurly = ast.findFirstToken(TokenTypes.SLIST);", "-                rcurly = lcurly.getLastChild();", "-                nextToken = ast;", "-                break;", "-            case TokenTypes.METHOD_DEF:", "-            case TokenTypes.LITERAL_FOR:", "-            case TokenTypes.LITERAL_WHILE:", "-            case TokenTypes.LITERAL_DO:", "-                lcurly = ast.findFirstToken(TokenTypes.SLIST);", "-                //SLIST could be absent if method is abstract, and code like \"while(true);\"", "-                if (lcurly == null) {", "-                    return;", "-                }", "-                rcurly = lcurly.getLastChild();", "-                nextToken = ast;", "-                break;", "-            default:", "-                throw new RuntimeException(\"Unexpected token type (\"", "-                    + TokenTypes.getTokenName(ast.getType()) + \")\");", "-        }", "+        final Details details = getDetails(ast);", "+        final DetailAST rcurly = details.rcurly;", "+        final DetailAST lcurly = details.lcurly;", "+        final DetailAST nextToken = details.nextToken;", "+        final boolean shouldCheckLastRcurly = details.shouldCheckLastRcurly;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e1b935c2a2a7e303a4bbb72dbc585f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "768256c32a3e397f837ce27602bda49e3c5e0062", "commitAfterChange": "784842200f5307597d721ba0190c912cfab1b77f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["-        // Load the config file", "-        Configuration config = null;", "-        try {", "-            config = ConfigurationLoader.loadConfiguration(", "-                    line.getOptionValue(\"c\"), new PropertiesExpander(props));", "-        }", "-        catch (CheckstyleException e) {", "-            System.out.println(\"Error loading configuration file\");", "-            e.printStackTrace(System.out);", "-            System.exit(1);", "-        }", "+        final Configuration config = loadConfig(line, props);", "-            try {", "-                moduleFactory = PackageNamesLoader.loadModuleFactory(", "-                    line.getOptionValue(\"n\"));", "-            }", "-            catch (CheckstyleException e) {", "-                System.out.println(\"Error loading package names file\");", "-                e.printStackTrace(System.out);", "-                System.exit(1);", "-            }", "+            moduleFactory = loadPackages(line);", "-        // create the appropriate listener", "-        final String format =", "-            line.hasOption(\"f\") ? line.getOptionValue(\"f\") : \"plain\";", "+        final AuditListener listener = createListener(line, out, closeOut);", "+        final List files = getFilesToProcess(line);", "+        final Checker c = createChecker(config, moduleFactory, listener);", "+        addCustomListeners(c, line);", "-        AuditListener listener = null;", "-        if (\"xml\".equals(format)) {", "-            listener = new XMLLogger(out, closeOut);", "-        }", "-        else if (\"plain\".equals(format)) {", "-            listener = new DefaultLogger(out, closeOut);", "-        }", "-        else {", "-            System.out.println(\"Invalid format: (\" + format", "-                               + \"). Must be 'plain' or 'xml'.\");", "-            usage();", "-        }", "+        final File[] processedFiles = new File[files.size()];", "+        files.toArray(processedFiles);", "+        final int numErrs = c.process(processedFiles);", "+        c.destroy();", "+        System.exit(numErrs);", "+    }", "-        // Get all the Java files", "-        final List files = new LinkedList();", "-        if (line.hasOption(\"r\")) {", "-            final String[] values = line.getOptionValues(\"r\");", "-            for (int i = 0; i < values.length; i++) {", "-                traverse(new File(values[i]), files);", "-            }", "-        }", "-", "-        final String[] remainingArgs = line.getArgs();", "-        for (int i = 0; i < remainingArgs.length; i++) {", "-            files.add(new File(remainingArgs[i]));", "-        }", "-", "-        if (files.isEmpty()) {", "-            System.out.println(\"Must specify files to process\");", "-            usage();", "-        }", "-", "-        // create the checker", "-        Checker c = null;", "-        try {", "-            c = new Checker();", "-            c.setModuleFactory(moduleFactory);", "-            c.configure(config);", "-            c.addListener(listener);", "-        }", "-        catch (Exception e) {", "-            System.out.println(\"Unable to create Checker: \"", "-                               + e.getMessage());", "-            e.printStackTrace(System.out);", "-            System.exit(1);", "-        }", "-", "-        // add custom listeners", "-        if (line.hasOption(\"l\")) {", "-            final String listeners = line.getOptionValue(\"l\");", "-                c.addListener(customListener);", "-        final File[] processedFiles = new File[files.size()];", "-        files.toArray(processedFiles);", "-        final int numErrs = c.process(processedFiles);", "-        c.destroy();", "-        System.exit(numErrs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15bbcece335029f000460def77a380f1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "f0e75896a4c9a79d1cd4e414ae3fc7011268eb80", "commitAfterChange": "5b01236f52f59b632659cac386768805f7a9006f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     private static List<JavadocTag> getMethodTags(TextBlock comment)", "signatureAfterChange": "     private static List<JavadocTag> getMethodTags(TextBlock comment)", "diff": ["+        final int startColumnNumber = comment.getStartColNo();", "-                int col = javadocArgMatcher.start(1) - 1;", "-                if (i == 0) {", "-                    col += comment.getStartColNo();", "-                }", "-                tags.add(new JavadocTag(currentLine, col, javadocArgMatcher", "-                        .group(1), javadocArgMatcher.group(2)));", "+                final int col = calculateTagColumn(javadocArgMatcher, i, startColumnNumber);", "+                tags.add(new JavadocTag(currentLine, col, javadocArgMatcher.group(1),", "+                        javadocArgMatcher.group(2)));", "-                int col = javadocNoargMatcher.start(1) - 1;", "-                if (i == 0) {", "-                    col += comment.getStartColNo();", "-                }", "-                tags.add(new JavadocTag(currentLine, col, javadocNoargMatcher", "-                        .group(1)));", "+                final int col = calculateTagColumn(javadocNoargMatcher, i, startColumnNumber);", "+                tags.add(new JavadocTag(currentLine, col, javadocNoargMatcher.group(1)));", "-                int col = noargCurlyMatcher.start(1) - 1;", "-                if (i == 0) {", "-                    col += comment.getStartColNo();", "-                }", "-                tags.add(new JavadocTag(currentLine, col, noargCurlyMatcher", "-                        .group(1)));", "+                final int col = calculateTagColumn(noargCurlyMatcher, i, startColumnNumber);", "+                tags.add(new JavadocTag(currentLine, col, noargCurlyMatcher.group(1)));", "-                final String p1 = argMultilineStart.group(1);", "-                final String p2 = argMultilineStart.group(2);", "-                int col = argMultilineStart.start(1) - 1;", "-                if (i == 0) {", "-                    col += comment.getStartColNo();", "-                }", "-", "-                // Look for the rest of the comment if all we saw was", "-                // the tag and the name. Stop when we see '*/' (end of", "-                // Javadoc), '@' (start of next tag), or anything that's", "-                // not whitespace or '*' characters.", "-                int remIndex = i + 1;", "-                while (remIndex < lines.length) {", "-                    final Matcher multilineCont = MATCH_JAVADOC_MULTILINE_CONT", "-                            .matcher(lines[remIndex]);", "-                    if (multilineCont.find()) {", "-                        remIndex = lines.length;", "-                        final String lFin = multilineCont.group(1);", "-                        if (!lFin.equals(NEXT_TAG)", "-                            && !lFin.equals(END_JAVADOC)) {", "-                            tags.add(new JavadocTag(currentLine, col, p1, p2));", "-                        }", "-                    }", "-                    remIndex++;", "-                }", "+                final int col = calculateTagColumn(argMultilineStart, i, startColumnNumber);", "+                tags.addAll(getMultilineArgTags(argMultilineStart, col, lines, i, currentLine));", "-                final String p1 = noargMultilineStart.group(1);", "-                final int col = noargMultilineStart.start(1) - 1;", "-", "-                // Look for the rest of the comment if all we saw was", "-                // the tag and the name. Stop when we see '*/' (end of", "-                // Javadoc), '@' (start of next tag), or anything that's", "-                // not whitespace or '*' characters.", "-                int remIndex = i + 1;", "-                while (remIndex < lines.length) {", "-                    final Matcher multilineCont = MATCH_JAVADOC_MULTILINE_CONT", "-                            .matcher(lines[remIndex]);", "-                    multilineCont.find();", "-                    remIndex = lines.length;", "-                    final String lFin = multilineCont.group(1);", "-                    if (!lFin.equals(NEXT_TAG)", "-                        && !lFin.equals(END_JAVADOC)) {", "-                        tags.add(new JavadocTag(currentLine, col, p1));", "-                    }", "-                    remIndex++;", "-                }", "+                tags.addAll(getMultilineNoArgTags(noargMultilineStart, lines, i, currentLine));", "+        return tags;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39206a1a4b2d93751df3ef30aa4dd8d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/IndentationCheck.java", "commitBeforeChange": "bf6758b29dbb6f0e22d4951ea3bd25fdf45299fc", "commitAfterChange": "eaad55fdba73e17e103dc6600867f26fd6a3896b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 13, "signatureBeforeChange": "         private HandlerFactory()", "signatureAfterChange": "     public HandlerFactory getHandlerFactory()", "diff": ["-        /** creates a HandlerFactory */", "-        private HandlerFactory()", "-        {", "-            register(TokenTypes.CASE_GROUP, CaseHandler.class);", "-            register(TokenTypes.LITERAL_SWITCH, SwitchHandler.class);", "-            register(TokenTypes.SLIST, SlistHandler.class);", "-            register(TokenTypes.PACKAGE_DEF, PackageDefHandler.class);", "-            register(TokenTypes.LITERAL_ELSE, ElseHandler.class);", "-            register(TokenTypes.LITERAL_IF, IfHandler.class);", "-            register(TokenTypes.LITERAL_TRY, TryHandler.class);", "-            register(TokenTypes.LITERAL_CATCH, CatchHandler.class);", "-            register(TokenTypes.LITERAL_FINALLY, FinallyHandler.class);", "-            register(TokenTypes.LITERAL_DO, DoWhileHandler.class);", "-            register(TokenTypes.LITERAL_WHILE, WhileHandler.class);", "-            register(TokenTypes.LITERAL_FOR, ForHandler.class);", "-            register(TokenTypes.METHOD_DEF, MethodDefHandler.class);", "-            register(TokenTypes.CTOR_DEF, MethodDefHandler.class);", "-            register(TokenTypes.CLASS_DEF, ClassDefHandler.class);", "-            register(TokenTypes.OBJBLOCK, ObjectBlockHandler.class);", "-            register(TokenTypes.INTERFACE_DEF, ClassDefHandler.class);", "-            register(TokenTypes.IMPORT, ImportHandler.class);", "-            register(TokenTypes.ARRAY_INIT, ArrayInitHandler.class);", "-            register(TokenTypes.METHOD_CALL, MethodCallHandler.class);", "-            register(TokenTypes.CTOR_CALL, MethodCallHandler.class);", "-            register(TokenTypes.LABELED_STAT, LabelHandler.class);", "-            register(TokenTypes.LABELED_STAT, LabelHandler.class);", "-            register(TokenTypes.STATIC_INIT, StaticInitHandler.class);", "-        }", "+     */", "+    public HandlerFactory getHandlerFactory()", "+    {", "+        return mHandlerFactory;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5188aeeb81bc5d8b3671d19b8bf5d437", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "1818ae8ab189515f24a711aa3fc520377bd71380", "commitAfterChange": "7b7eea6e9a4d4053912f83cda41c46c0f4474607", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Configuration(Properties aProps, PrintStream aLog)         throws RESyntaxException, FileNotFoundException, IOException", "signatureAfterChange": "     public Configuration(Properties aProps, PrintStream aLog)         throws RESyntaxException, FileNotFoundException, IOException", "diff": ["-        setPatternProperty(aProps, Defn.TODO_PATTERN_PROP, TODO_PATTERN);", "-        setPatternProperty(aProps, Defn.PARAMETER_PATTERN_PROP,", "-                           PARAMETER_PATTERN);", "-        setPatternProperty(aProps, Defn.STATIC_PATTERN_PROP, STATIC_PATTERN);", "-        setPatternProperty(aProps, Defn.CONST_PATTERN_PROP, CONST_PATTERN);", "-        setPatternProperty(aProps, Defn.MEMBER_PATTERN_PROP, MEMBER_PATTERN);", "-        setPatternProperty(aProps, Defn.PUBLIC_MEMBER_PATTERN_PROP,", "-                           PUBLIC_MEMBER_PATTERN);", "-        setPatternProperty(aProps, Defn.TYPE_PATTERN_PROP, TYPE_PATTERN);", "-        setPatternProperty(aProps, Defn.LOCAL_VAR_PATTERN_PROP,", "-                           LOCAL_VAR_PATTERN);", "-        setPatternProperty(aProps, Defn.LOCAL_FINAL_VAR_PATTERN_PROP,", "-                           LOCAL_FINAL_VAR_PATTERN);", "-        setPatternProperty(aProps, Defn.METHOD_PATTERN_PROP, METHOD_PATTERN);", "-        setPatternProperty(aProps, Defn.IGNORE_LINE_LENGTH_PATTERN_PROP,", "-                           IGNORE_LINE_LENGTH_PATTERN);", "-        setIntProperty(aProps, aLog, Defn.MAX_LINE_LENGTH_PROP,", "-                       MAX_LINE_LENGTH);", "-        setIntProperty(aProps, aLog, Defn.MAX_METHOD_LENGTH_PROP,", "-                       MAX_METHOD_LENGTH);", "-        setIntProperty(aProps, aLog, Defn.MAX_CONSTRUCTOR_LENGTH_PROP,", "-                       MAX_CONSTRUCTOR_LENGTH);", "-        setIntProperty(aProps, aLog, Defn.MAX_FILE_LENGTH_PROP,", "-                       MAX_FILE_LENGTH);", "-", "-        setBooleanProperty(aProps, Defn.ALLOW_TABS_PROP);", "-        setIntProperty(aProps, aLog, Defn.TAB_WIDTH_PROP, TAB_WIDTH);", "-        setBooleanProperty(aProps, Defn.ALLOW_PROTECTED_PROP);", "-        setBooleanProperty(aProps, Defn.ALLOW_PACKAGE_PROP);", "-        setBooleanProperty(aProps, Defn.ALLOW_NO_AUTHOR_PROP);", "-        setBooleanProperty(aProps, Defn.REQUIRE_VERSION_PROP);", "+        // Init the special properties", "+        setHeaderIgnoreLines(aProps.getProperty(Defn.HEADER_IGNORE_LINE_PROP));", "+        setRCurly(getRightCurlyOptionProperty(", "+                      aProps, Defn.RCURLY_PROP, RightCurlyOption.SAME, aLog));", "-        setBooleanProperty(aProps, Defn.REQUIRE_PACKAGE_HTML_PROP);", "-        setBooleanProperty(aProps, Defn.IGNORE_IMPORTS_PROP);", "-        setIllegalImports(", "-            aProps.getProperty(Defn.ILLEGAL_IMPORTS_PROP, ILLEGAL_IMPORTS));", "-        setIllegalInstantiations(", "-            aProps.getProperty(Defn.ILLEGAL_INSTANTIATIONS_PROP,", "-                               ILLEGAL_INSTANTIATIONS));", "-        setBooleanProperty(aProps, Defn.IGNORE_WHITESPACE_PROP);", "-        setBooleanProperty(aProps, Defn.IGNORE_CAST_WHITESPACE_PROP);", "-        setBooleanProperty(aProps, Defn.IGNORE_BRACES_PROP);", "-        setBooleanProperty(aProps, Defn.IGNORE_LONG_ELL_PROP);", "-        setBooleanProperty(aProps, Defn.IGNORE_PUBLIC_IN_INTERFACE_PROP);", "-        setStringProperty(aProps, Defn.CACHE_FILE_PROP);", "-        setStringProperty(aProps, Defn.LOCALE_LANGUAGE_PROP);", "-        setStringProperty(aProps, Defn.LOCALE_COUNTRY_PROP);", "-        setBooleanProperty(aProps, Defn.IGNORE_IMPORT_LENGTH_PROP);", "-        setHeaderIgnoreLines(aProps.getProperty(Defn.HEADER_IGNORE_LINE_PROP));", "-        setBooleanProperty(aProps, Defn.HEADER_LINES_REGEXP_PROP);", "-        setBooleanProperty(aProps, Defn.JAVADOC_CHECK_UNUSED_THROWS_PROP);", "-", "-        final String fname = aProps.getProperty(Defn.HEADER_FILE_PROP);", "-        if (fname != null) {", "-            setHeaderFile(fname);", "-        }", "-", "-        setLeftCurlyOptionProperty(aProps, Defn.LCURLY_METHOD_PROP, aLog);", "-        setLeftCurlyOptionProperty(aProps, Defn.LCURLY_TYPE_PROP, aLog);", "-        setLeftCurlyOptionProperty(aProps, Defn.LCURLY_OTHER_PROP, aLog);", "-        setRCurly(getRightCurlyOptionProperty(", "-                      aProps, Defn.RCURLY_PROP, RightCurlyOption.SAME, aLog));", "-        setBlockOptionProperty(aProps, Defn.TRY_BLOCK_PROP, aLog);", "-        setBlockOptionProperty(aProps, Defn.CATCH_BLOCK_PROP, aLog);", "-        setBlockOptionProperty(aProps, Defn.FINALLY_BLOCK_PROP, aLog);", "-        setStringProperty(aProps, Defn.BASEDIR_PROP);", "+        setHeaderFile(aProps.getProperty(Defn.HEADER_FILE_PROP));", "+", "+        // Initialise the general properties", "+        for (int i = 0; i < Defn.ALL_BOOLEAN_PROPS.length; i++) {", "+            setBooleanProperty(aProps, Defn.ALL_BOOLEAN_PROPS[i]);", "+        }", "+", "+        for (int i = 0; i < Defn.ALL_PATTERN_PROPS.length; i++) {", "+            setPatternProperty(aProps, Defn.ALL_PATTERN_PROPS[i]);", "+        }", "+", "+        for (int i = 0; i < Defn.ALL_INT_PROPS.length; i++) {", "+            setIntProperty(aProps, aLog, Defn.ALL_INT_PROPS[i]);", "+        }", "+", "+        for (int i = 0; i < Defn.ALL_BLOCK_PROPS.length; i++) {", "+            setBlockOptionProperty(aProps, Defn.ALL_BLOCK_PROPS[i], aLog);", "+        }", "+", "+        for (int i = 0; i < Defn.ALL_STRING_PROPS.length; i++) {", "+            setStringProperty(aProps, Defn.ALL_STRING_PROPS[i]);", "+        }", "+", "+        for (int i = 0; i < Defn.ALL_LCURLY_PROPS.length; i++) {", "+            setLeftCurlyOptionProperty(aProps, Defn.ALL_LCURLY_PROPS[i], aLog);", "+        }", "+", "+        for (int i = 0; i < Defn.ALL_STRING_SET_PROPS.length; i++) {", "+            setStringSetProperty(aProps, Defn.ALL_STRING_SET_PROPS[i]);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541364f6e3e8a88633bffb0809aceeee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "842c152be6b0bbcb754a346a6ce4b59c47469c17", "commitAfterChange": "fb5cf249885869256567d41798e14f2964a26192", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                    if (isTypeField(ast) && !hasEmptyLineAfter(ast)) {", "-                        if (allowNoEmptyLineBetweenFields", "-                            && nextToken.getType() != TokenTypes.VARIABLE_DEF", "-                            && nextToken.getType() != TokenTypes.RCURLY) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                                 nextToken.getText());", "-                        }", "-                        else if (!allowNoEmptyLineBetweenFields", "-                                 && nextToken.getType() != TokenTypes.RCURLY) {", "-                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                                 nextToken.getText());", "-                        }", "-                    }", "-                    if (isTypeField(ast) && hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processVariableDef(ast, nextToken);", "-                    if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)", "-                        || ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)", "-                            && ast.getPreviousSibling() == null) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processImport(ast, nextToken, astType);", "-                    if (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_SHOULD_BE_SEPARATED, ast.getText());", "-                    }", "-                    if (!hasEmptyLineAfter(ast)) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "-                    }", "-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    }", "+                    processPackage(ast, nextToken);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5808b9fddf6007607e02908b6bdddea3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "fbbbc950e751fa629d57a5cbe08762999cfc8218", "commitAfterChange": "e030d1463c307836bbb201a202d15e81a41bcb0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+            processInterfaceOrAnnotation(ast);", "+        }", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            processMethods(ast);", "+        }", "+    }", "-", "-                // javac does not allow final or static in interface methods", "-                // order annotation fields hence no need to check that this", "-                // is not a method or annotation field", "-", "-                if (type == TokenTypes.LITERAL_PUBLIC", "-                    || type == TokenTypes.LITERAL_STATIC", "-                            && ast.getType() != TokenTypes.METHOD_DEF", "-                    || type == TokenTypes.ABSTRACT", "-                    || type == TokenTypes.FINAL) {", "-", "-            }", "-        }", "-        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "-            final DetailAST modifiers =", "-                            ast.findFirstToken(TokenTypes.MODIFIERS);", "-            // private method?", "-            boolean checkFinal =", "-                modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);", "-            // declared in a final class?", "-            DetailAST parent = ast.getParent();", "-            while (parent != null) {", "-                if (parent.getType() == TokenTypes.CLASS_DEF) {", "-                    final DetailAST classModifiers =", "-                        parent.findFirstToken(TokenTypes.MODIFIERS);", "-                    checkFinal |=", "-                        classModifiers.branchContains(TokenTypes.FINAL);", "-                    break;", "-                }", "-                parent = parent.getParent();", "-            }", "-            if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {", "-                DetailAST modifier = modifiers.getFirstChild();", "-                while (modifier != null) {", "-                    final int type = modifier.getType();", "-                    if (type == TokenTypes.FINAL) {", "-                        log(modifier.getLineNo(), modifier.getColumnNo(),", "-                                MSG_KEY, modifier.getText());", "-                        break;", "-                    }", "-                    modifier = modifier.getNextSibling();", "-                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "583f6590783ae922d45f9fdd7fe6d1a9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "fb5cf249885869256567d41798e14f2964a26192", "commitAfterChange": "7c1d239748c9a90112bf3a59b189dc31ffe41983", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processEnd(DetailAST ast)", "signatureAfterChange": "     private void processEnd(DetailAST ast)", "diff": ["-                final char charAfter = line.charAt(after);", "-", "-                // Need to handle a number of cases. First is:", "-                //    Collections.<Object>emptySet();", "-                //                        ^", "-                //                        +--- whitespace not allowed", "-                if (ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS", "-                        && ast.getParent().getParent().getType()", "-                            == TokenTypes.DOT", "-                        && ast.getParent().getParent().getParent().getType()", "-                            == TokenTypes.METHOD_CALL", "-                        || isAfterMethodReference(ast)) {", "-                    if (Character.isWhitespace(charAfter)) {", "-                        log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                    }", "-                }", "-                else if (!Character.isWhitespace(charAfter)", "-                    && '(' != charAfter && ')' != charAfter", "-                    && ',' != charAfter && '[' != charAfter", "-                    && '.' != charAfter && ':' != charAfter", "-                    && !isAfterMethodReference(ast)) {", "-                    log(ast.getLineNo(), after, WS_ILLEGAL_FOLLOW, \">\");", "-                }", "+                processSingleGeneric(ast, line, after);", "-                // In a nested Generic type, so can only be a '>' or ',' or '&'", "-", "-                // In case of several extends definitions:", "-                //", "-                //   class IntEnumValueType<E extends Enum<E> & IntEnum>", "-                //                                          ^", "-                //   should be whitespace if followed by & -+", "-                //", "-                final int indexOfAmp = line.indexOf('&', after);", "-                if (indexOfAmp != -1", "-                    && whitespaceBetween(after, indexOfAmp, line)) {", "-                    if (indexOfAmp - after == 0) {", "-                        log(ast.getLineNo(), after, WS_NOT_PRECEDED, \"&\");", "-                    }", "-                    else if (indexOfAmp - after != 1) {", "-                        log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                    }", "-                }", "-                else if (line.charAt(after) == ' ') {", "-                    log(ast.getLineNo(), after, WS_FOLLOWED, \">\");", "-                }", "+                processNestedGenerics(ast, line, after);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "937aa3b926ad22740248c718b1bb094f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/WhitespaceAroundTest.java", "commitBeforeChange": "e3134ab9b1e8b2eabe29d8dbdb668656b077e86f", "commitAfterChange": "49b2c723738d731c903c471ba41fceb8837ecf65", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testIt()         throws Exception", "signatureAfterChange": "      public void testIt()         throws Exception", "diff": ["-        final LocalizedMessages msgs = new LocalizedMessages(8);", "-        final TreeWalker walker = new TreeWalker(msgs);", "-        final CheckConfiguration config = new CheckConfiguration();", "-        config.setClassname(WhitespaceAroundCheck.class.getName());", "-        final Check c = config.createInstance(", "-            Thread.currentThread().getContextClassLoader());", "-        walker.registerCheck(c, config);", "-        final String fname = CheckerTest.getPath(\"InputWhitespace.java\");", "-        final String[] lines = getLines(fname);", "-        walker.walk(getAST(fname, lines), lines, fname);", "-        assertEquals(29, msgs.getMessages().length);", "-        int idx = 0;", "-        verifyMessage(msgs, idx++, 16, 22, \"'=' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 16, 23, \"'=' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 18, 24, \"'=' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 26, 14, \"'=' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 27, 10, \"'=' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 27, 11, \"'=' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 28, 10, \"'+=' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 28, 12, \"'+=' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 29, 13, \"'-=' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 37, 21, \"'synchronized' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 39, 12, \"'try' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 41, 14, \"'catch' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 58, 11, \"'if' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 76, 19, \"'return' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 97, 29, \"'?' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 97, 30, \"'?' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 98, 15, \"'==' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 98, 17, \"'==' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 104, 20, \"'*' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 104, 21, \"'*' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 119, 18, \"'%' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 120, 20, \"'%' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 121, 18, \"'%' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 121, 19, \"'%' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 123, 18, \"'/' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 124, 20, \"'/' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 125, 18, \"'/' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 125, 19, \"'/' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 153, 15, \"'assert' is not followed by whitespace.\");", "+        final CheckConfiguration checkConfig = new CheckConfiguration();", "+        checkConfig.setClassname(WhitespaceAroundCheck.class.getName());", "+        final Checker c = createChecker(checkConfig);", "+        final String fname = getPath(\"InputWhitespace.java\");", "+        final String[] expected = {", "+            \"16:22: '=' is not preceeded with whitespace.\",", "+            \"16:23: '=' is not followed by whitespace.\",", "+            \"18:24: '=' is not followed by whitespace.\",", "+            \"26:14: '=' is not preceeded with whitespace.\",", "+            \"27:10: '=' is not preceeded with whitespace.\",", "+            \"27:11: '=' is not followed by whitespace.\",", "+            \"28:10: '+=' is not preceeded with whitespace.\",", "+            \"28:12: '+=' is not followed by whitespace.\",", "+            \"29:13: '-=' is not followed by whitespace.\",", "+            \"37:21: 'synchronized' is not followed by whitespace.\",", "+            \"39:12: 'try' is not followed by whitespace.\",", "+            \"41:14: 'catch' is not followed by whitespace.\",", "+            \"58:11: 'if' is not followed by whitespace.\",", "+            \"76:19: 'return' is not followed by whitespace.\",", "+            \"97:29: '?' is not preceeded with whitespace.\",", "+            \"97:30: '?' is not followed by whitespace.\",", "+            \"98:15: '==' is not preceeded with whitespace.\",", "+            \"98:17: '==' is not followed by whitespace.\",", "+            \"104:20: '*' is not followed by whitespace.\",", "+            \"104:21: '*' is not preceeded with whitespace.\",", "+            \"119:18: '%' is not preceeded with whitespace.\",", "+            \"120:20: '%' is not followed by whitespace.\",", "+            \"121:18: '%' is not preceeded with whitespace.\",", "+            \"121:19: '%' is not followed by whitespace.\",", "+            \"123:18: '/' is not preceeded with whitespace.\",", "+            \"124:20: '/' is not followed by whitespace.\",", "+            \"125:18: '/' is not preceeded with whitespace.\",", "+            \"125:19: '/' is not followed by whitespace.\",", "+            \"153:15: 'assert' is not followed by whitespace.\",", "+        };", "+        verify(c, fname, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c921d9b85f629c77d81c3ef65d40f8c4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "290ae38a14021785018fbfa7c2651200534a88ca", "commitAfterChange": "1dacd5303bfe94b9d5476059b6a5676146d96708", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-        catch (final RecognitionException re) {", "-            final String exceptionMsg = String.format(msg, \"RecognitionException\", fileName);", "-            Utils.getExceptionLogger().error(exceptionMsg);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    re.getLine(),", "-                    re.getColumn(),", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.exception\",", "-                    new String[] {re.getMessage()},", "-                    getId(),", "-                    this.getClass(), null));", "-        }", "+            String message = \"TokenStreamRecognitionException occured\";", "-                getMessageCollector().add(", "-                    new LocalizedMessage(", "-                        re.getLine(),", "-                        re.getColumn(),", "-                        Defn.CHECKSTYLE_BUNDLE,", "-                        \"general.exception\",", "-                        new String[] {re.getMessage()},", "-                        getId(),", "-                        this.getClass(), null));", "+                message = re.getMessage();", "-            else {", "-                getMessageCollector().add(", "-                    new LocalizedMessage(", "-                        0,", "-                        Defn.CHECKSTYLE_BUNDLE,", "-                        \"general.exception\",", "-                        new String[]", "-                        {\"TokenStreamRecognitionException occured.\"},", "-                        getId(),", "-                        this.getClass(), null));", "-            }", "+            getMessageCollector().add(createLocalizedMessage(message));", "-        catch (final TokenStreamException te) {", "-            final String exceptionMsg = String.format(msg,", "-                    \"TokenStreamException\", fileName);", "+        // RecognitionException and any other (need to check if needed)", "+        catch (Throwable ex) {", "+            final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    0,", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.exception\",", "-                    new String[] {te.getMessage()},", "-                    getId(),", "-                    this.getClass(), null));", "-        }", "-        catch (final Throwable err) {", "-            final String exceptionMsg = String.format(msg, \"Exception\", fileName);", "-            Utils.getExceptionLogger().error(exceptionMsg);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    0,", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.exception\",", "-                    new String[] {\"\" + err},", "-                    getId(),", "-                    this.getClass(), null));", "+            getMessageCollector().add(createLocalizedMessage(ex.getMessage()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80776bfe806a9068c0219b9450d1f3f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "f010eb47869bae692609de487d6140373e02f3a3", "commitAfterChange": "907a19906f790ce8faea7aa74e12608538dca1b6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        final LexicalFrame frame = this.mFrames.current();", "+        switch (aAST.getType()) {", "+        case TokenTypes.CLASS_DEF :", "+        case TokenTypes.INTERFACE_DEF :", "+        case TokenTypes.ENUM_DEF :", "+        case TokenTypes.ANNOTATION_DEF :", "+        case TokenTypes.SLIST :", "+        case TokenTypes.METHOD_DEF :", "+        case TokenTypes.CTOR_DEF :", "+            this.mCurrent = this.mFrames.get(aAST);", "+            break;", "+        default :", "+            // do nothing", "+        }", "+    } // end visitToken", "-            this.mFrames.enter(new ClassFrame());", "-            this.mFrames.enter(new BlockFrame());", "-            this.mFrames.enter(new MethodFrame());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb9370bf29346458f1805f6520f8b1ce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "54a09706ec1db32435b09e6b6910813325558f8d", "commitAfterChange": "abff1a2489ea8af10e1bc0a335551262d22f44e7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void process(File aFile)", "signatureAfterChange": "     public int process(File[] aFiles)", "diff": ["+        for (int i = 0; i < mFileSetChecks.size(); i++) {", "+            FileSetCheck fileSetCheck = (FileSetCheck) mFileSetChecks.get(i);", "+            fileSetCheck.process(aFiles);", "-     **/", "-    private void process(File aFile)", "-    {", "-        // check if already checked and passed the file", "-        final String fileName = aFile.getPath();", "-        final long timestamp = aFile.lastModified();", "-        if (mCache.alreadyChecked(fileName, timestamp)) {", "-            return;", "-        }", "-", "-        mMessages.reset();", "-        try {", "-            fireFileStarted(fileName);", "-            final String[] lines = Utils.getLines(fileName);", "-            final FileContents contents = new FileContents(fileName, lines);", "-            final DetailAST rootAST = TreeWalker.parse(contents);", "-            mWalker.walk(rootAST, contents, mConfig.getClassLoader());", "-        }", "-        catch (FileNotFoundException fnfe) {", "-            mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,", "-                                               \"general.fileNotFound\", null));", "-        }", "-        catch (IOException ioe) {", "-            mMessages.add(new LocalizedMessage(", "-                              0, Defn.CHECKSTYLE_BUNDLE,", "-                              \"general.exception\",", "-                              new String[] {ioe.getMessage()}));", "-        }", "-        catch (RecognitionException re) {", "-            mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,", "-                                               \"general.exception\",", "-                                               new String[] {re.getMessage()}));", "-        }", "-        catch (TokenStreamException te) {", "-            mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,", "-                                               \"general.exception\",", "-                                               new String[] {te.getMessage()}));", "-        }", "-", "-        if (mMessages.size() == 0) {", "-            mCache.checkedOk(fileName, timestamp);", "-        }", "-        else {", "-            fireErrors(fileName, mMessages.getMessages());", "-        }", "-", "-        fireFileFinished(fileName);", "-    }"]}]}
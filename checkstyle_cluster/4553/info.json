{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d85e020fbad7bc5855017f4ad6298186", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eea56018456f39357f69ad01a95f98c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0", "commitAfterChange": "78e9ce870170ca3ef88fd78f8e0af0681c958eb3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testNLOW()         throws Exception", "signatureAfterChange": "      public void testNLOW() throws Exception", "diff": ["-    public void testNLOW()", "-        throws Exception", "+    public void testNLOW() throws Exception", "-        final DefaultConfiguration checkConfig =", "-            createCheckConfig(LeftCurlyCheck.class);", "-        checkConfig.addAttribute(\"option\", LeftCurlyOption.NLOW.toString());", "+        mCheckConfig.addAttribute(\"option\", LeftCurlyOption.NLOW.toString());", "-        verify(checkConfig, getPath(\"InputScopeInnerInterfaces.java\"), expected);", "+        verify(mCheckConfig, getPath(\"InputScopeInnerInterfaces.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35d30d8abc4541a45c5eeb603ff9e76d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheckTest.java", "commitBeforeChange": "67e304551be06c0ee482a81669fdd4e053786240", "commitAfterChange": "fc8a5ae78cffc8f6d5951a72fc722c52dedc1d04", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private void runIt(String aMax, String[] aExpected) throws Exception", "signatureAfterChange": "     @Override     protected DefaultConfiguration createCheckerConfig(         Configuration aCheckConfig)", "diff": ["-    private void runIt(String aMax, String[] aExpected) throws Exception", "+    @Override", "+    protected DefaultConfiguration createCheckerConfig(", "+        Configuration aCheckConfig)", "-        final DefaultConfiguration checkConfig =", "-            createCheckConfig(FileLengthCheck.class);", "-        checkConfig.addAttribute(\"max\", aMax);", "-        verify(checkConfig, getPath(\"InputSimple.java\"), aExpected);", "+        DefaultConfiguration dc = new DefaultConfiguration(\"root\");", "+        dc.addChild(aCheckConfig);", "+        return dc;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5f40ed2bff12064d4fda899f433057f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68df9510a06c94c5670e6e6a0fe60020", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "aa0f77eb9294588b0d891dbde516bc43a5af4f5a", "commitAfterChange": "c4339df8b3d6b58b327b6cfcaca7413e9c526dcf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private static boolean isVariableInOperatorExpr(             DetailAST operator, DetailAST variable)", "signatureAfterChange": "     private static boolean isVariableInOperatorExpr(             DetailAST operator, DetailAST variable)", "diff": ["-        if (openingBracket != null) {", "-            // Get EXPR between brackets", "-            DetailAST exprBetweenBrackets = openingBracket", "-                    .getNextSibling();", "+        // Get EXPR between brackets", "+        DetailAST exprBetweenBrackets = openingBracket.getNextSibling();", "-            // Look if variable is in operator expression", "-            while (exprBetweenBrackets.getType() != TokenTypes.RPAREN) {", "+        // Look if variable is in operator expression", "+        while (exprBetweenBrackets.getType() != TokenTypes.RPAREN) {", "-                if (isChild(exprBetweenBrackets, variable)) {", "-                    isVarInOperatorDeclr = true;", "-                    break;", "-                }", "-                exprBetweenBrackets = exprBetweenBrackets.getNextSibling();", "+            if (isChild(exprBetweenBrackets, variable)) {", "+                isVarInOperatorDeclr = true;", "+                break;", "+            exprBetweenBrackets = exprBetweenBrackets.getNextSibling();", "+        }", "-            // Variable may be met in ELSE declaration or in CASE declaration.", "-            // So, check variable usage in these declarations.", "-            if (!isVarInOperatorDeclr) {", "-                switch (operator.getType()) {", "-                    case TokenTypes.LITERAL_IF:", "-                        final DetailAST elseBlock = operator.getLastChild();", "+        // Variable may be met in ELSE declaration or in CASE declaration.", "+        // So, check variable usage in these declarations.", "+        if (!isVarInOperatorDeclr) {", "+            switch (operator.getType()) {", "+            case TokenTypes.LITERAL_IF:", "+                final DetailAST elseBlock = operator.getLastChild();", "-                        if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {", "-                            // Get IF followed by ELSE", "-                            final DetailAST firstNodeInsideElseBlock = elseBlock", "-                                .getFirstChild();", "+                if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {", "+                    // Get IF followed by ELSE", "+                    final DetailAST firstNodeInsideElseBlock = elseBlock.getFirstChild();", "-                            if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {", "-                                isVarInOperatorDeclr |=", "-                                    isVariableInOperatorExpr(", "-                                        firstNodeInsideElseBlock,", "-                                            variable);", "-                            }", "+                    if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {", "+                        isVarInOperatorDeclr |= isVariableInOperatorExpr(firstNodeInsideElseBlock, variable);", "-                        break;", "-", "-                    case TokenTypes.LITERAL_SWITCH:", "-                        DetailAST currentCaseBlock = operator", "-                            .findFirstToken(TokenTypes.CASE_GROUP);", "-", "-                        while (currentCaseBlock != null", "-                            && currentCaseBlock.getType() == TokenTypes.CASE_GROUP) {", "-                            final DetailAST firstNodeInsideCaseBlock =", "-                                currentCaseBlock.getFirstChild();", "-", "-                            if (isChild(firstNodeInsideCaseBlock,", "-                                variable)) {", "-                                isVarInOperatorDeclr = true;", "-                                break;", "-                            }", "-                            currentCaseBlock = currentCaseBlock.getNextSibling();", "-                        }", "-                        break;", "-", "-                    default:", "-                        // no code", "+                break;", "+", "+            case TokenTypes.LITERAL_SWITCH:", "+                DetailAST currentCaseBlock = operator.findFirstToken(TokenTypes.CASE_GROUP);", "+", "+                while (currentCaseBlock != null && currentCaseBlock.getType() == TokenTypes.CASE_GROUP) {", "+                    final DetailAST firstNodeInsideCaseBlock = currentCaseBlock.getFirstChild();", "+", "+                    if (isChild(firstNodeInsideCaseBlock, variable)) {", "+                        isVarInOperatorDeclr = true;", "+                        break;", "+                        }", "+                    currentCaseBlock = currentCaseBlock.getNextSibling();", "+                }", "+                break;", "+", "+            default:", "+                // no code"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc87308a31b258f93026252bb88f1581", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "94e8285d4cb6d5e0b49acade6dbba5b8654b42dd", "commitAfterChange": "22136c67e9c83494e7aa977ffe7a79beee1b4175", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+", "+    @Override", "+    public void visitToken(DetailAST aAST)", "+    {", "+        final FullIdent ident;", "+        final boolean isStatic;", "+", "+        if (aAST.getType() == TokenTypes.IMPORT) {", "+            ident = FullIdent.createFullIdentBelow(aAST);", "+            isStatic = false;", "+        }", "+        else {", "+            ident = FullIdent.createFullIdent((DetailAST) aAST.getFirstChild()", "+                    .getNextSibling());", "+            isStatic = true;", "+        }", "+", "+        switch (getAbstractOption()) {", "+        case TOP:", "+            if (!isStatic && mLastImportStatic) {", "+                mLastGroup = Integer.MIN_VALUE;", "+                mLastImport = \"\";", "+            }", "+            // no break;", "+", "+        case ABOVE:", "+            // previous non-static but current is static", "+            doVisitToken(ident, isStatic, (!mLastImportStatic && isStatic));", "+            break;", "+", "+        case INFLOW:", "+            // previous argument is useless here", "+            doVisitToken(ident, isStatic, true);", "+            break;", "+", "+        case BOTTOM:", "+            if (isStatic && !mLastImportStatic) {", "+                mLastGroup = Integer.MIN_VALUE;", "+                mLastImport = \"\";", "+            }", "+            // no break;", "+", "+        case UNDER:", "+            // previous static but current is non-static", "+            doVisitToken(ident, isStatic, (mLastImportStatic && !isStatic));", "+            break;", "+", "+        default:", "+            break;", "+        }", "+", "+        mLastImportLine = aAST.findFirstToken(TokenTypes.SEMI).getLineNo();", "+        mLastImportStatic = isStatic;", "+        mBeforeFirstImport = false;", "+    }", "-", "-    @Override", "-    public void visitToken(DetailAST aAST)", "-    {", "-        final FullIdent ident;", "-        boolean isStatic;", "-        if (aAST.getType() == TokenTypes.IMPORT) {", "-            ident = FullIdent.createFullIdentBelow(aAST);", "-            isStatic = false;", "-        }", "-        else {", "-            ident = FullIdent.createFullIdent(", "-                (DetailAST) aAST.getFirstChild().getNextSibling());", "-            isStatic = true;", "-        if (ident != null) {", "-            final String name = ident.getText();", "-            final int groupIdx = getGroupNumber(name);", "-            final int line = ident.getLineNo();", "-", "-            if (groupIdx > mLastGroup) {", "-                if (!mBeforeFirstImport && mSeparated) {", "-                    // This check should be made more robust to handle", "-                    // comments and imports that span more than one line.", "-                    if (line - mLastImportLine < 2) {", "-                        log(line, \"import.separation\", name);", "-                    }", "-                }", "-            }", "-            else if (groupIdx == mLastGroup) {", "-                if (mOrdered) {", "-                    boolean shouldFireError = false;", "-                    if (mCaseSensitive) {", "-                        shouldFireError =", "-                            //current and previous static or current and", "-                            //previous non-static", "-                            (!(mLastImportStatic ^ isStatic)", "-                            &&", "-                            //and out of lexicographic order", "-                            (mLastImport.compareTo(name) >= 0))", "-                            ||", "-                            //previous static but current is non-static", "-                            (mLastImportStatic && !isStatic);", "-                    }", "-                    else {", "-                        shouldFireError =", "-                                //current and previous static or current and", "-                                //previous non-static", "-                                (!(mLastImportStatic ^ isStatic)", "-                                &&", "-                                //and out of lexicographic order", "-                                (mLastImport.compareToIgnoreCase(name) >= 0))", "-                                ||", "-                                //previous static but current is non-static", "-                                (mLastImportStatic && !isStatic);", "-                    }", "-                    if (shouldFireError) {", "-                        log(line, \"import.ordering\", name);", "-                    }", "-                }", "-            }", "-            else {", "-                log(line, \"import.ordering\", name);", "-            }", "-", "-            mLastGroup = groupIdx;", "-            mLastImport = name;", "-            mLastImportLine = aAST.findFirstToken(TokenTypes.SEMI).getLineNo();", "-            mLastImportStatic = isStatic;", "-            mBeforeFirstImport = false;", "-        }"]}]}
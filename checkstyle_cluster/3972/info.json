{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fea79cf55e782131076c71a647f85c5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00662f28e715561090a0b121efbcb91d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     void setLines(String[] aLines);", "signatureAfterChange": "     void setLines(String[] aLines)", "diff": ["-    void setLines(String[] aLines);", "+    void setLines(String[] aLines)", "+    {", "+        mLines = aLines;", "+", "+        checkHeader();", "+", "+        // Iterate over the lines looking for long lines and tabs.", "+        for (int i = 0; i < mLines.length; i++) {", "+            // check for long line, but possibly allow imports", "+            if ((mLines[i].length() > mConfig.getMaxLineLength()) &&", "+                !(mConfig.isIgnoreImportLength() &&", "+                  mLines[i].trim().startsWith(\"import\")))", "+            {", "+                log(i + 1,", "+                    \"line longer than \" + mConfig.getMaxLineLength() +", "+                    \" characters\");", "+            }", "+", "+            if (!mConfig.isAllowTabs() && (mLines[i].indexOf('\\t') != -1)) {", "+                log(i + 1, \"line contains a tab character\");", "+            }", "+        }", "+", "+        // Check excessive number of lines", "+        if (mLines.length > mConfig.getMaxFileLength()) {", "+            log(1,", "+                \"file length is \" + mLines.length + \" lines (max allowed is \" +", "+                mConfig.getMaxFileLength() + \").\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "476e25c82843d2e0aaf1a99dc8dda71f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "67ac0b2adecabccf9c94a0e5389a80b1cd83cc41", "commitAfterChange": "c0a8e0ff6c885ce4444a37408f72e8555fb9ea6b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     void verifyDot(MyCommonAST aAST)", "signatureAfterChange": "     void verifyDot(MyCommonAST aAST)", "diff": ["-        if (mConfig.isIgnoreWhitespace()) {", "-            return;", "-        }", "-", "-        final String line = mLines[aAST.getLineNo() - 1];", "-", "-        // check before", "-        final int before = aAST.getColumnNo() - 1;", "-        if ((before >= 0) && Character.isWhitespace(line.charAt(before))) {", "-            // verify all characters before '.' are whitespace", "-            for (int i = 0; i < before; i++) {", "-                if (!Character.isWhitespace(line.charAt(i))) {", "-                    mMessages.add(aAST.getLineNo(), aAST.getColumnNo() - 1,", "-                                  \"ws.preceeded\", \".\");", "-                    break;", "-                }", "-            }", "-        }", "-", "-        // check after", "-        final int after = aAST.getColumnNo() + 1;", "-        if ((after < line.length())", "-            && Character.isWhitespace(line.charAt(after)))", "-        {", "-            for (int i = after + 1; i < line.length(); i++) {", "-                if (!Character.isWhitespace(line.charAt(i))) {", "-                    mMessages.add(aAST.getLineNo(), after, \"ws.followed\", \".\");", "-                    break;", "-                }", "-            }", "-        }"]}]}
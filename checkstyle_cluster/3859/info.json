{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "282405e32e0cba58068f8f1d5fea4602", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a17ecf33736e8650b9a60c48cd95014", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public String getMessage()", "signatureAfterChange": "     public String getMessage()", "diff": ["+        String message = getCustomMessage();", "-        final String message = getCustomMessage();", "-        if (message != null) {", "-            return message;", "+        if (message == null) {", "+            try {", "+                // Important to use the default class loader, and not the one in", "+                // the GlobalProperties object. This is because the class loader in", "+                // the GlobalProperties is specified by the user for resolving", "+                // custom classes.", "+                final ResourceBundle resourceBundle = getBundle(this.bundle);", "+                final String pattern = resourceBundle.getString(key);", "+                message = MessageFormat.format(pattern, args);", "+            }", "+            catch (final MissingResourceException ignored) {", "+                // If the Check author didn't provide i18n resource bundles", "+                // and logs error messages directly, this will return", "+                // the author's original message", "+                message = MessageFormat.format(key, args);", "+            }", "-", "-        try {", "-            // Important to use the default class loader, and not the one in", "-            // the GlobalProperties object. This is because the class loader in", "-            // the GlobalProperties is specified by the user for resolving", "-            // custom classes.", "-            final ResourceBundle resourceBundle = getBundle(this.bundle);", "-            final String pattern = resourceBundle.getString(key);", "-            return MessageFormat.format(pattern, args);", "-        }", "-        catch (final MissingResourceException ignored) {", "-            // If the Check author didn't provide i18n resource bundles", "-            // and logs error messages directly, this will return", "-            // the author's original message", "-            return MessageFormat.format(key, args);", "-        }", "+        return message;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9350132dd49015ac52cff7107663c429", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "18ce1a9f667788fe10875f4ed0775500285c15cc", "commitAfterChange": "4880b50a3a89db93e7e7c1b8bae8036ec06e186b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public String getMessage()", "signatureAfterChange": "     public String getMessage()", "diff": ["-        // Very simple approach - wait for performance problems.", "-        // Important to use the default class loader, and not the one in the", "-        // Configuration object. This is because the class loader in the", "-        // Configuration is specified by the user for resolving custom classes.", "-        final ResourceBundle bundle =", "-            ResourceBundle.getBundle(MESSAGE_BUNDLE, sLocale);", "-        final String pattern = bundle.getString(mKey);", "-        return MessageFormat.format(pattern, mArgs);", "+        try {", "+            // PERF: Very simple approach - wait for performance problems.", "+            // Important to use the default class loader, and not the one in the", "+            // Configuration object. This is because the class loader in the", "+            // Configuration is specified by the user for resolving custom", "+            // classes.", "+            final ResourceBundle bundle =", "+                    ResourceBundle.getBundle(mBundle, sLocale);", "+            final String pattern = bundle.getString(mKey);", "+            return MessageFormat.format(pattern, mArgs);", "+        }", "+        catch (MissingResourceException ex) {", "+            // If the Check author didn't provide i18n resource bundles", "+            // and logs error messages directly, this will return", "+            // the author's original message", "+            return MessageFormat.format(mKey, mArgs);", "+        }"]}]}
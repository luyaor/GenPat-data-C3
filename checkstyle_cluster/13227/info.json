{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af946dd648e870e9ec9c25309ced1a64", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a7609ed2f46ef9608622e807c472e70", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        final String fileName = aFile.getPath();", "-        final long timestamp = aFile.lastModified();", "-        if (mCache.alreadyChecked(fileName, timestamp)) {", "+        final String fileName = file.getPath();", "+        final long timestamp = file.lastModified();", "+        if (cache.alreadyChecked(fileName, timestamp)) {", "-            final FileText text = FileText.fromLines(aFile, aLines);", "+            final FileText text = FileText.fromLines(file, lines);", "-            mCache.checkedOk(fileName, timestamp);", "+            cache.checkedOk(fileName, timestamp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff49277c9c832417c8043c35260996e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "3ef918920c58c550169ccef3cfe1706aede11a6e", "commitAfterChange": "5922d5a6730d7582d7d66121eb911ef9426f9e24", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines) throws CheckstyleException", "diff": ["-    protected void processFiltered(File file, List<String> lines) {", "+    protected void processFiltered(File file, List<String> lines) throws CheckstyleException {", "-            LOG.error(exceptionMsg);", "-            final RecognitionException re = tre.recog;", "-            final String message = re.getMessage();", "-            getMessageCollector().add(createLocalizedMessage(message));", "+            throw new CheckstyleException(exceptionMsg, tre);", "-        // RecognitionException and any other (need to check if needed)", "-        catch (Throwable ex) {", "+        catch (RecognitionException | TokenStreamException ex) {", "-            LOG.error(exceptionMsg, ex);", "-            getMessageCollector().add(createLocalizedMessage(ex.getMessage()));", "+            throw new CheckstyleException(exceptionMsg, ex);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2e520a7719fa8f2c82ca578f588bef1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected AbstractLoader(Map<String, String> aPublicIdToResourceNameMap)         throws SAXException, ParserConfigurationException", "signatureAfterChange": "     protected AbstractLoader(Map<String, String> publicIdToResourceNameMap)         throws SAXException, ParserConfigurationException", "diff": ["-    protected AbstractLoader(Map<String, String> aPublicIdToResourceNameMap)", "+    protected AbstractLoader(Map<String, String> publicIdToResourceNameMap)", "-        mPublicIdToResourceNameMap =", "-            Maps.newHashMap(aPublicIdToResourceNameMap);", "+        this.publicIdToResourceNameMap =", "+            Maps.newHashMap(publicIdToResourceNameMap);", "-        mParser = factory.newSAXParser().getXMLReader();", "-        mParser.setContentHandler(this);", "-        mParser.setEntityResolver(this);", "-        mParser.setErrorHandler(this);", "+        parser = factory.newSAXParser().getXMLReader();", "+        parser.setContentHandler(this);", "+        parser.setEntityResolver(this);", "+        parser.setErrorHandler(this);"]}]}
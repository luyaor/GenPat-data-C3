{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b11a13b3151799e15c68c0569656d76c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4966c84a9d62e1ed4f332f1a9a90bd7d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        final int tokenType = aAST.getType();", "+        final int tokenType = ast.getType();", "-            final Counter counter = mCounters.pop();", "+            final Counter counter = counters.pop();", "-            if (count > mMethodMax) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"ncss.method\",", "-                        count, mMethodMax);", "+            if (count > methodMax) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"ncss.method\",", "+                        count, methodMax);", "-            final Counter counter = mCounters.pop();", "+            final Counter counter = counters.pop();", "-            if (count > mClassMax) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"ncss.class\",", "-                        count, mClassMax);", "+            if (count > classMax) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"ncss.class\",", "+                        count, classMax);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d03854b0ccb1e08d28ccda8af1393892", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "38bd8f7f3e30a8667792dccd591d8dc0461082df", "commitAfterChange": "91db1968e34b4f777ab146e37a827c20b35e5c52", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(DetailAST aAST)", "diff": ["-                log(aAST.getLineNo(),", "-                    aAST.getColumnNo(),", "-                    mMinimumMessage,", "-                    new String[] {", "-                        \"\" + tokenCount,", "-                        \"\" + mMinimumNumber,", "-                        name,", "-                        descendantName,", "-                    });", "+                log(aAST.getLineNo(), aAST.getColumnNo(), mMinimumMessage,", "+                    \"\" + tokenCount, \"\" + mMinimumNumber,", "+                    name, descendantName);", "-                log(aAST.getLineNo(),", "-                    aAST.getColumnNo(),", "-                    mMaximumMessage,", "-                    new String[] {", "-                        \"\" + tokenCount,", "-                        \"\" + mMaximumNumber,", "-                        name,", "-                        descendantName,", "-                    });", "+                log(aAST.getLineNo(), aAST.getColumnNo(), mMaximumMessage,", "+                    \"\" + tokenCount, \"\" + mMaximumNumber,", "+                    name, descendantName);"]}]}
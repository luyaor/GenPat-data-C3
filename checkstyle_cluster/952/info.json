{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5256d5f39930c4c3310f2201a73ce361", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85f410f7b5a7abc80ee732e0a5d154c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int type = aAST.getType();", "-        final boolean surrounded = isSurrounded(aAST);", "-        final DetailAST parent = aAST.getParent();", "+        final int type = ast.getType();", "+        final boolean surrounded = isSurrounded(ast);", "+        final DetailAST parent = ast.getParent();", "-            mParentToSkip = aAST.getParent();", "-            log(aAST, \"unnecessary.paren.ident\", aAST.getText());", "+            parentToSkip = ast.getParent();", "+            log(ast, \"unnecessary.paren.ident\", ast.getText());", "-            mParentToSkip = aAST.getParent();", "+            parentToSkip = ast.getParent();", "-                log(aAST, \"unnecessary.paren.string\",", "-                    chopString(aAST.getText()));", "+                log(ast, \"unnecessary.paren.string\",", "+                    chopString(ast.getText()));", "-                log(aAST, \"unnecessary.paren.literal\", aAST.getText());", "+                log(ast, \"unnecessary.paren.literal\", ast.getText());", "-            mAssignDepth++;", "-            final DetailAST last = aAST.getLastChild();", "+            assignDepth++;", "+            final DetailAST last = ast.getLastChild();", "-                log(aAST, \"unnecessary.paren.assign\");", "+                log(ast, \"unnecessary.paren.assign\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec23a01b8e6f33f5a5249fa76e768fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        final int type = aAST.getType();", "-        final DetailAST parent = aAST.getParent();", "+        final int type = ast.getType();", "+        final DetailAST parent = ast.getParent();", "-            // If 'mParentToSkip' == 'aAST', then we've already logged a", "+            // If 'parentToSkip' == 'ast', then we've already logged a", "-            if ((mParentToSkip != aAST) && exprSurrounded(aAST)) {", "-                if (mAssignDepth >= 1) {", "-                    log(aAST, \"unnecessary.paren.assign\");", "+            if ((parentToSkip != ast) && exprSurrounded(ast)) {", "+                if (assignDepth >= 1) {", "+                    log(ast, \"unnecessary.paren.assign\");", "-                else if (aAST.getParent().getType()", "+                else if (ast.getParent().getType()", "-                    log(aAST, \"unnecessary.paren.return\");", "+                    log(ast, \"unnecessary.paren.return\");", "-                    log(aAST, \"unnecessary.paren.expr\");", "+                    log(ast, \"unnecessary.paren.expr\");", "-            mParentToSkip = null;", "+            parentToSkip = null;", "-            mAssignDepth--;", "+            assignDepth--;", "-        super.leaveToken(aAST);", "+        super.leaveToken(ast);"]}]}
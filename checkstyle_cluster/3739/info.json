{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74f68d4df70e5d1594fc94e3d4d7a372", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27e21cf4f80bd68f61c8a1c44016fc9d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        DetailAST ast = aAST;", "-        if (aAST.getType() == TokenTypes.ARRAY_DECLARATOR", "-                 || aAST.getType() == TokenTypes.TYPECAST)", "+        DetailAST astNode = ast;", "+        if (ast.getType() == TokenTypes.ARRAY_DECLARATOR", "+                 || ast.getType() == TokenTypes.TYPECAST)", "-            ast = getPreceded(aAST);", "+            astNode = getPreceded(ast);", "-        final String line = getLine(aAST.getLineNo() - 1);", "-        final int after = getPositionAfter(ast);", "+        final String line = getLine(ast.getLineNo() - 1);", "+        final int after = getPositionAfter(astNode);", "-            log(ast.getLineNo(), after,", "-                \"ws.followed\", ast.getText());", "+            log(astNode.getLineNo(), after,", "+                \"ws.followed\", astNode.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "406f61d53cc2f8c51c97e3d5036b5141", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST slistToken = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST slistToken = ast.findFirstToken(TokenTypes.SLIST);", "-                ? slistToken : aAST.findFirstToken(TokenTypes.LCURLY);", "+                ? slistToken : ast.findFirstToken(TokenTypes.LCURLY);", "-                            MSG_KEY_BLOCK_NO_STMT,", "-                        aAST.getText());", "+                        MSG_KEY_BLOCK_NO_STMT,", "+                        ast.getText());", "-                        MSG_KEY_BLOCK_EMPTY,", "-                    aAST.getText());", "+                    MSG_KEY_BLOCK_EMPTY,", "+                    ast.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57eb63814309f5f68c829046e3c7c486", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST slistAST = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST slistAST = ast.findFirstToken(TokenTypes.SLIST);", "-        if ((aAST.getType() == TokenTypes.LITERAL_ELSE)", "-            && (aAST.findFirstToken(TokenTypes.LITERAL_IF) != null))", "+        if ((ast.getType() == TokenTypes.LITERAL_ELSE)", "+            && (ast.findFirstToken(TokenTypes.LITERAL_IF) != null))", "-        if (aAST.getType() == TokenTypes.LITERAL_IF) {", "-            skipStatement = isSkipIfBlock(aAST);", "+        if (ast.getType() == TokenTypes.LITERAL_IF) {", "+            skipStatement = isSkipIfBlock(ast);", "-            log(aAST.getLineNo(), MSG_KEY_NEED_BRACES, aAST.getText());", "+            log(ast.getLineNo(), MSG_KEY_NEED_BRACES, ast.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a856e42528fe23a801b1b718bcc7e5d4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private int getFirstNodeIndent(DetailAST aNode)", "signatureAfterChange": "     private int getFirstNodeIndent(DetailAST node)", "diff": ["-    private int getFirstNodeIndent(DetailAST aNode)", "+    private int getFirstNodeIndent(DetailAST node)", "-        int indentLevel = aNode.getColumnNo();", "+        int indentLevel = node.getColumnNo();", "-        if (aNode.getType() == TokenTypes.LITERAL_IF", "-                && aNode.getParent().getType() == TokenTypes.LITERAL_ELSE)", "+        if (node.getType() == TokenTypes.LITERAL_IF", "+                && node.getParent().getType() == TokenTypes.LITERAL_ELSE)", "-            final DetailAST lcurly = aNode.getParent().getPreviousSibling();", "+            final DetailAST lcurly = node.getParent().getPreviousSibling();", "-                    && rcurly.getLineNo() == aNode.getLineNo())", "+                    && rcurly.getLineNo() == node.getLineNo())", "-                indentLevel = aNode.getParent().getColumnNo();", "+                indentLevel = node.getParent().getColumnNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ae2e8d75cefddb75c9613fe7c60327", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (aAST.getType() == TokenTypes.CLASS_DEF) {", "+        if (ast.getType() == TokenTypes.CLASS_DEF) {", "-            mClasses.push(new ClassDesc(isFinal, isAbstract));", "+            classes.push(new ClassDesc(isFinal, isAbstract));", "-        else if (!ScopeUtils.inEnumBlock(aAST)) { //ctors in enums don't matter", "-            final ClassDesc desc = mClasses.peek();", "+        else if (!ScopeUtils.inEnumBlock(ast)) { //ctors in enums don't matter", "+            final ClassDesc desc = classes.peek();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c47afeaaf0770bb16d68f14ba0a42af7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71266b72e50726e4d08cb17f865fb8cc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "edc63f0d669bc7e02eb3d9cbf83b6c7dcb92501c", "commitAfterChange": "37af13d63384a48aaeefb8d767b0f9ebb053a4a7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-    /** recursive method that finds the matches. */", "+    /** Method that finds the matches. */", "-        final boolean foundMatch = matcher.find();", "-        if (!foundMatch) {", "-            return;", "-        }", "+        boolean foundMatch = matcher.find();", "+        while (foundMatch) {", "+            final LineColumn start = text.lineColumn(matcher.start());", "+            final LineColumn end = text.lineColumn(matcher.end());", "-        final LineColumn start = text.lineColumn(matcher.start());", "-        final LineColumn end = text.lineColumn(matcher.end());", "-", "-        if (!options.getSuppressor().shouldSuppress(start.getLine(),", "-                start.getColumn(), end.getLine(), end.getColumn())) {", "-            currentMatches++;", "-            if (currentMatches > options.getMaximum()) {", "-                if (\"\".equals(options.getMessage())) {", "-                    options.getReporter().log(start.getLine(),", "-                            REGEXP_EXCEEDED, matcher.pattern().toString());", "-                }", "-                else {", "-                    options.getReporter()", "-                            .log(start.getLine(), options.getMessage());", "+            if (!options.getSuppressor().shouldSuppress(start.getLine(),", "+                    start.getColumn(), end.getLine(), end.getColumn())) {", "+                currentMatches++;", "+                if (currentMatches > options.getMaximum()) {", "+                    if (\"\".equals(options.getMessage())) {", "+                        options.getReporter().log(start.getLine(),", "+                                REGEXP_EXCEEDED, matcher.pattern().toString());", "+                    }", "+                    else {", "+                        options.getReporter()", "+                                .log(start.getLine(), options.getMessage());", "+                    }", "+            foundMatch = matcher.find();", "-        findMatch();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91ec715520e45c971dacf6d1f29d98cd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java", "commitBeforeChange": "d58096b2b6cec63781bffdab93b92c9d2836c6cb", "commitAfterChange": "2959d83ed2a3b8217d9d3c8aefa748cdacdcd393", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private static DetailAST getOneLinePreviousStatementOfSingleLineComment(DetailAST comment)", "signatureAfterChange": "     private static DetailAST getOneLinePreviousStatementOfSingleLineComment(DetailAST comment)", "diff": ["+        DetailAST previousStatement = null;", "-                final DetailAST previousStatement =", "-                    findPreviousStatementOfSingleLineComment(comment, root);", "+                previousStatement = findPreviousStatementOfSingleLineComment(comment, root);", "-                    return previousStatement;", "+                    root = null;", "+                    stack.clear();", "+                    break;", "-        return null;", "+        return previousStatement;"]}]}
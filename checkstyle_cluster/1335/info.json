{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fdb576fd33cd43f896edb95deb916731", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f21e78638134f159c06f1f0e2cf6c8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "ddd153f70798bcf1e33629e98407db8f9dbe0dcc", "commitAfterChange": "adce874628730a881c533bb04db2688d03a60fc6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "         public void endElement(String aNamespaceURI,                                String aLocalName,                                String aQName)", "signatureAfterChange": "         public void endElement(String aNamespaceURI,                                String aLocalName,                                String aQName)             throws SAXException", "diff": ["+            throws SAXException", "-                mConfigStack.pop();", "+", "+                Configuration recentModule = (Configuration) mConfigStack.pop();", "+", "+                // remove modules with severity ignore if these modules should", "+                // be omitted", "+                SeverityLevel level = null;", "+                try {", "+                    final String severity = recentModule.getAttribute(SEVERITY);", "+                    level = SeverityLevel.getInstance(severity);", "+                }", "+                catch (CheckstyleException e) {", "+                    //severity not set -> ignore", "+                    ;", "+                }", "+", "+                // omit this module if these should be omitted and the module", "+                // has the severity 'ignore'", "+                final boolean omitModule = mOmitIgnoredModules", "+                    && SeverityLevel.IGNORE.equals(level);", "+", "+                if (omitModule && !mConfigStack.isEmpty()) {", "+                    final DefaultConfiguration parentModule =", "+                        (DefaultConfiguration) mConfigStack.peek();", "+                    parentModule.removeChild(recentModule);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc461a658e130bf4fe1c02b7f86cd3d6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean checkTry(final DetailAST aAST, boolean aUseBreak,                              boolean aUseContinue)", "signatureAfterChange": "     private boolean checkTry(final DetailAST ast, boolean useBreak,                              boolean useContinue)", "diff": ["-    private boolean checkTry(final DetailAST aAST, boolean aUseBreak,", "-                             boolean aUseContinue)", "+    private boolean checkTry(final DetailAST ast, boolean useBreak,", "+                             boolean useContinue)", "-        final DetailAST finalStmt = aAST.getLastChild();", "+        final DetailAST finalStmt = ast.getLastChild();", "-                                aUseBreak, aUseContinue);", "+                                useBreak, useContinue);", "-        boolean isTerminated = isTerminated(aAST.getFirstChild(),", "-                                            aUseBreak, aUseContinue);", "+        boolean isTerminated = isTerminated(ast.getFirstChild(),", "+                                            useBreak, useContinue);", "-        DetailAST catchStmt = aAST.findFirstToken(TokenTypes.LITERAL_CATCH);", "+        DetailAST catchStmt = ast.findFirstToken(TokenTypes.LITERAL_CATCH);", "-            isTerminated &= isTerminated(catchBody, aUseBreak, aUseContinue);", "+            isTerminated &= isTerminated(catchBody, useBreak, useContinue);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7fb3fed94a224d0af82167f4a305d85", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00662f28e715561090a0b121efbcb91d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     void setLines(String[] aLines);", "signatureAfterChange": "     void setLines(String[] aLines)", "diff": ["-    void setLines(String[] aLines);", "+    void setLines(String[] aLines)", "+    {", "+        mLines = aLines;", "+", "+        checkHeader();", "+", "+        // Iterate over the lines looking for long lines and tabs.", "+        for (int i = 0; i < mLines.length; i++) {", "+            // check for long line, but possibly allow imports", "+            if ((mLines[i].length() > mConfig.getMaxLineLength()) &&", "+                !(mConfig.isIgnoreImportLength() &&", "+                  mLines[i].trim().startsWith(\"import\")))", "+            {", "+                log(i + 1,", "+                    \"line longer than \" + mConfig.getMaxLineLength() +", "+                    \" characters\");", "+            }", "+", "+            if (!mConfig.isAllowTabs() && (mLines[i].indexOf('\\t') != -1)) {", "+                log(i + 1, \"line contains a tab character\");", "+            }", "+        }", "+", "+        // Check excessive number of lines", "+        if (mLines.length > mConfig.getMaxFileLength()) {", "+            log(1,", "+                \"file length is \" + mLines.length + \" lines (max allowed is \" +", "+                mConfig.getMaxFileLength() + \").\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d243e73aaab1bb5419cce005d83134e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "3d56a294c07f425b7cf8fc9b48e41c3e531c8385", "commitAfterChange": "6a5d1ff83441b0163195dbac42aa872edf5dbee7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-", "-        for (int element : mLimitedTokens) {", "-            final int tokenCount = mCounts[element - 1];", "-            if (tokenCount < mMinimumNumber) {", "-                final String descendantName =", "-                    TokenTypes.getTokenName(element);", "-                log(aAST.getLineNo(), aAST.getColumnNo(), mMinimumMessage,", "-                    \"\" + tokenCount, \"\" + mMinimumNumber,", "-                    name, descendantName);", "+        if (mSumTokenCounts) {", "+            int total = 0;", "+            for (int element : mLimitedTokens) {", "+                total += mCounts[element - 1];", "-            if (tokenCount > mMaximumNumber) {", "-                final String descendantName =", "-                    TokenTypes.getTokenName(element);", "-                log(aAST.getLineNo(), aAST.getColumnNo(), mMaximumMessage,", "-                    \"\" + tokenCount, \"\" + mMaximumNumber,", "-                    name, descendantName);", "+            if (total < mMinimumNumber) {", "+                log(aAST.getLineNo(), aAST.getColumnNo(),", "+                        (null == mMinimumMessage) ? \"descendant.token.sum.min\"", "+                                : mMinimumMessage,", "+                        String.valueOf(total),", "+                        String.valueOf(mMinimumNumber), name);", "+            }", "+            if (total > mMaximumNumber) {", "+                log(aAST.getLineNo(), aAST.getColumnNo(),", "+                        (null == mMaximumMessage) ? \"descendant.token.sum.max\"", "+                                : mMaximumMessage,", "+                        String.valueOf(total),", "+                        String.valueOf(mMaximumNumber),", "+                        name);", "+            }", "+        }", "+        else {", "+            for (int element : mLimitedTokens) {", "+                final int tokenCount = mCounts[element - 1];", "+                if (tokenCount < mMinimumNumber) {", "+                    final String descendantName = TokenTypes", "+                            .getTokenName(element);", "+                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+                            (null == mMinimumMessage) ? \"descendant.token.min\"", "+                                    : mMinimumMessage,", "+                            String.valueOf(tokenCount),", "+                            String.valueOf(mMinimumNumber),", "+                            name,", "+                            descendantName);", "+                }", "+                if (tokenCount > mMaximumNumber) {", "+                    final String descendantName = TokenTypes", "+                            .getTokenName(element);", "+                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+                            (null == mMaximumMessage) ? \"descendant.token.max\"", "+                                    : mMaximumMessage,", "+                            String.valueOf(tokenCount),", "+                            String.valueOf(mMaximumNumber),", "+                            name,", "+                            descendantName);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d372ef4b95c41afcf3b954aab1f4553b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "3ded7a11556a6258bcddd3ebe2d69a2058675601", "commitAfterChange": "69138e40225407ef560fd9d06d2903de37c83c2c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      Configuration(Properties aProps)", "signatureAfterChange": "     Configuration(Properties aProps, PrintStream aLog)         throws RESyntaxException, FileNotFoundException, IOException", "diff": ["-    Configuration(Properties aProps)", "+     */", "+    Configuration(Properties aProps, PrintStream aLog)", "+        throws RESyntaxException, FileNotFoundException, IOException", "-//          aProps.getProperty(PARAMETER_PATTERN_PROP,", "-//                             PARAMETER_PATTERN),", "-//              aProps.getProperty(STATIC_PATTERN_PROP,", "-//                                 STATIC_PATTERN),", "-//                  aProps.getProperty(CONST_PATTERN_PROP,", "-//                                     CONST_PATTERN),", "-//                  aProps.getProperty(MEMBER_PATTERN_PROP,", "-//                                     MEMBER_PATTERN),", "-//                  aProps.getProperty(TYPE_PATTERN_PROP,", "-//                                     TYPE_PATTERN),", "-//                  getIntProperty(aProps, MAX_LINE_LENGTH_PROP, MAX_LINE_LENGTH),", "-//                  getAllowTabs(aProps),", "-//                  getAllowProtected(aProps),", "-//                  getAllowNoAuthor(aProps),", "-//                  getRelaxJavadoc(aProps),", "-//                  getCheckImports(aProps),", "-//                  getHeaderLines(aProps),", "-//                  getIntProperty(aProps, HEADER_IGNORE_LINE_PROP, -1));", "+        setParamPat(aProps.getProperty(PARAMETER_PATTERN_PROP,", "+                                       PARAMETER_PATTERN));", "+        setStaticPat(aProps.getProperty(STATIC_PATTERN_PROP,", "+                                        STATIC_PATTERN));", "+        setStaticFinalPat(aProps.getProperty(CONST_PATTERN_PROP,", "+                                             CONST_PATTERN));", "+        setMemberPat(aProps.getProperty(MEMBER_PATTERN_PROP,", "+                                        MEMBER_PATTERN));", "+        setTypePat(aProps.getProperty(TYPE_PATTERN_PROP,", "+                                      TYPE_PATTERN));", "+        setMaxLineLength(getIntProperty(", "+            aProps, aLog, MAX_LINE_LENGTH_PROP, MAX_LINE_LENGTH));", "+", "+        setAllowTabs(getBooleanProperty(aProps, ALLOW_TABS_PROP, mAllowTabs));", "+        setAllowProtected(", "+            getBooleanProperty(aProps, ALLOW_PROTECTED_PROP, mAllowProtected));", "+        setAllowNoAuthor(", "+            getBooleanProperty(aProps, ALLOW_NO_AUTHOR_PROP, mAllowNoAuthor));", "+        setRelaxJavadoc(", "+            getBooleanProperty(aProps, RELAX_JAVADOC_PROP, mRelaxJavadoc));", "+        setIgnoreImports(", "+            getBooleanProperty(aProps, IGNORE_IMPORTS_PROP, mIgnoreImports));", "+        setHeaderIgnoreLineNo(", "+            getIntProperty(aProps, aLog, HEADER_IGNORE_LINE_PROP,", "+                           mHeaderIgnoreLineNo));", "+", "+        final String fname = aProps.getProperty(HEADER_FILE_PROP);", "+        if (fname != null) {", "+            setHeaderFile(fname);", "+        }", "+"]}]}
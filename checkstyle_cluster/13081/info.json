{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "148d59c3633d32a74d3601b4f74642f9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a137002eba908ffba575080b3ac732cd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "ec426aa0db5829cd799814d5e0e61b4cd2e42a46", "commitAfterChange": "779aa37ffc447d1d85ea1b082759e4040657191d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final int parentType = ast.getParent().getType();", "-", "-        // Check for CURLY in array initializer", "-        if ((currentType == TokenTypes.RCURLY", "-                || currentType == TokenTypes.LCURLY)", "-            && (parentType == TokenTypes.ARRAY_INIT", "-                || parentType == TokenTypes.ANNOTATION_ARRAY_INIT)) {", "-            return;", "-        }", "-", "-        // Check for import pkg.name.*;", "-        if (currentType == TokenTypes.STAR", "-            && parentType == TokenTypes.DOT) {", "-            return;", "-        }", "-", "-        // Check for an SLIST that has a parent CASE_GROUP. It is not a '{'.", "-        if (currentType == TokenTypes.SLIST", "-            && parentType == TokenTypes.CASE_GROUP) {", "-            return;", "-        }", "-", "-        if (currentType == TokenTypes.COLON) {", "-            //we do not want to check colon for cases and defaults", "-            if (parentType == TokenTypes.LITERAL_DEFAULT", "-                || parentType == TokenTypes.LITERAL_CASE) {", "-                return;", "-            }", "-            else if (parentType == TokenTypes.FOR_EACH_CLAUSE", "-                && this.ignoreEnhancedForColon) {", "-                return;", "-            }", "-        }", "-", "-        // Checks if empty methods, ctors or loops are allowed.", "-        if (isEmptyMethodBlock(ast, parentType)", "-                || isEmptyCtorBlock(ast, parentType)", "-                || isEmptyLoop(ast, parentType)) {", "-            return;", "-        }", "-", "-        // Checks if empty classes, interfaces or enums are allowed", "-        if (allowEmptyTypes && isEmptyType(ast, parentType)) {", "+        if (isNotRelevantSituation(ast, currentType)) {", "-            // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners", "-            && !(currentType == TokenTypes.RCURLY", "-                && (nextChar == ')'", "-                    || nextChar == ';'", "-                    || nextChar == ','", "-                    || nextChar == '.'))) {", "+            && !isAnnonimousInnerClassEnd(currentType, nextChar)) {", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc44bc3a685b445000359dae3561c0e4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "096100222d830beeab6674c1d468b7cd9e942e70", "commitAfterChange": "5a9b7249e3d092a78ac8e7d48aeeb62bf1c44e20", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void processIDENT(DetailAST ast)", "signatureAfterChange": "     private void processIDENT(DetailAST ast)", "diff": ["-", "-        if (parentType == TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR", "-            || parentType == TokenTypes.ANNOTATION", "-            || parentType == TokenTypes.ANNOTATION_FIELD_DEF) {", "-            //cannot refer to 'this' from annotations", "-            return;", "-        }", "-", "-        // let's check method calls", "-        if (parentType == TokenTypes.METHOD_CALL) {", "-            if (checkMethods && isClassMethod(ast.getText())) {", "-                log(ast, \"require.this.method\", ast.getText());", "+        switch (parentType) {", "+            case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:", "+            case TokenTypes.ANNOTATION:", "+            case TokenTypes.ANNOTATION_FIELD_DEF:", "+                // no need to check annotations content", "+                break;", "+            case TokenTypes.METHOD_CALL: {", "+                // let's check method calls", "+                if (checkMethods && isClassMethod(ast.getText())) {", "+                    log(ast, \"require.this.method\", ast.getText());", "+                }", "+                break;", "-            return;", "+            default: {", "+                if (checkFields) {", "+                    processField(ast, parentType);", "+                }", "+                break;", "+            }", "+    }", "-        // let's check fields", "-        if (!checkFields) {", "-            // we shouldn't check fields", "-            return;", "-        }", "-", "-            && ast.getPreviousSibling() != null) {", "-            || parentType == TokenTypes.LITERAL_NEW) {", "-        if (parentType == TokenTypes.VARIABLE_DEF", "-            || parentType == TokenTypes.CTOR_DEF", "-            || parentType == TokenTypes.METHOD_DEF", "-            || parentType == TokenTypes.CLASS_DEF", "-            || parentType == TokenTypes.ENUM_DEF", "-            || parentType == TokenTypes.INTERFACE_DEF", "-            || parentType == TokenTypes.PARAMETER_DEF", "-            || parentType == TokenTypes.TYPE_ARGUMENT) {"]}]}
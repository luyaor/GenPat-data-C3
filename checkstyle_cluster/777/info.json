{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bd1729e3f8bd3007946c34e2dead1fe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2f03211b19331974c177dd6da0cec5d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "ea01eaaa85409442aeece8763f0388066bd07bf5", "commitAfterChange": "d4f1261a61913b28d746aeb929bd23f372372a4c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethod(MyModifierSet aMods,                       MyCommonAST aReturnType,                       MethodSignature aSig)", "signatureAfterChange": "     void verifyMethod(MethodSignature aSig)", "diff": ["-    void verifyMethod(MyModifierSet aMods,", "-                      MyCommonAST aReturnType,", "-                      MethodSignature aSig)", "+    void verifyMethod(MethodSignature aSig)", "-        // Calculate line number. Unfortunately aReturnType does not contain a", "-        // valid line number", "-        final int lineNo = (aMods.size() > 0)", "-            ? aMods.getFirstLineNo()", "-            : aSig.getLineNo();", "-", "-        if (aReturnType != null &&", "-            !mConfig.getMethodRegexp().match(aSig.getName())) {", "-            log(lineNo,", "+        if (!aSig.isConstructor() &&", "+            !mConfig.getMethodRegexp().match(aSig.getName()))", "+        {", "+            log(aSig.getLineNo(),", "-        final Scope methodScope =", "-            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "+        final Scope methodScope = inInterfaceBlock()", "+            ? Scope.PUBLIC", "+            : aSig.getModSet().getVisibilityScope();", "-        final boolean isFunction = (aReturnType == null)", "-            ? false", "-            : !\"void\".equals(aReturnType.getText().trim());", "-", "-        final String[] jd = getJavadocBefore(lineNo - 1);", "+        final String[] jd = getJavadocBefore(aSig.getLineNo() - 1);", "-            log(lineNo, \"method is missing a Javadoc comment.\");", "+            log(aSig.getLineNo(), \"method is missing a Javadoc comment.\");", "-            final List tags = getMethodTags(jd, lineNo - 1);", "+            final List tags = getMethodTags(jd, aSig.getLineNo() - 1);", "-                if (isFunction) {", "-                    checkReturnTag(tags, lineNo);", "+                if (aSig.isFunction()) {", "+                    checkReturnTag(tags, aSig.getLineNo());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4d2a52d0372b9c744e8456182292aac", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethodJavadoc(MyModifierSet aMods,                              MyCommonAST aReturnType,                              MethodSignature aSig);", "signatureAfterChange": "     void verifyMethod(MyModifierSet aMods,                       MyCommonAST aReturnType,                       MethodSignature aSig)", "diff": ["-    void verifyMethodJavadoc(MyModifierSet aMods,", "+    void verifyMethod(MyModifierSet aMods,", "+                      MyCommonAST aReturnType,", "+                      MethodSignature aSig)", "+    {", "+        // Always verify the parameters are ok", "+        for (Iterator it = aSig.getParams().iterator(); it.hasNext(); ) {", "+            verifyParameter((LineText) it.next());", "+        }", "+", "+", "+        // now check the javadoc", "+        final Scope methodScope =", "+            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "+", "+        if (!inCheckScope(methodScope)) {", "+            return; // no need to really check anything", "+        }", "+", "+        // Calculate line number. Unfortunately aReturnType does not contain a", "+        // valid line number", "+        final int lineNo = (aMods.size() > 0)", "+            ? aMods.getFirstLineNo()", "+            : aSig.getLineNo();", "+", "+        final boolean isFunction = (aReturnType == null)", "+            ? false", "+            : !\"void\".equals(aReturnType.getText().trim());", "+", "+        final String[] jd = getJavadocBefore(lineNo - 1);", "+        if (jd == null) {", "+            log(lineNo, \"method is missing a Javadoc comment.\");", "+        }", "+        else {", "+            final List tags = getMethodTags(jd, lineNo - 1);", "+            // Check for only one @see tag", "+            if ((tags.size() != 1) ||", "+                !((JavadocTag) tags.get(0)).isSeeTag())", "+            {", "+                checkParamTags(tags, aSig.getParams());", "+                checkThrowsTags(tags, aSig.getThrows());", "+                if (isFunction) {", "+                    checkReturnTag(tags, lineNo);", "+                }", "+", "+                // Dump out all unused tags", "+                final Iterator it = tags.iterator();", "+                while (it.hasNext()) {", "+                    final JavadocTag jt = (JavadocTag) it.next();", "+                    if (!jt.isSeeTag()) {", "+                        log(jt.getLineNo(), \"Unused Javadoc tag.\");", "+                    }", "+                }", "+            }", "+        }", "+    }"]}]}
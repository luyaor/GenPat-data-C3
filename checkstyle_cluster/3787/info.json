{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f3d580375ed23d985ae535366429dc6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0548816b379fa2c47f98e2440c7afa41", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java", "commitBeforeChange": "6e775898e7d1ac179bcb6550f3023ee9b9d70bc3", "commitAfterChange": "8607274a9205c5f15c33820b0efa6dc4c5ea9a23", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean isExempt(String classOrStaticMember)", "signatureAfterChange": "     private boolean isExempt(String classOrStaticMember)", "diff": ["-            if (classOrStaticMember.equals(exclude)) {", "+            if (classOrStaticMember.equals(exclude)", "+                    || isStarImportOfPackage(classOrStaticMember, exclude)) {", "-            else if (exclude.endsWith(\".*\")) {", "-                //this section allows explicit imports", "-                //to be exempt when configured using", "-                //a starred import", "-                final String excludeMinusDotStar =", "-                    exclude.substring(0, exclude.length() - 2);", "-                if (classOrStaticMember.startsWith(excludeMinusDotStar)", "-                        && !classOrStaticMember.equals(excludeMinusDotStar)) {", "-                    final String member =", "-                        classOrStaticMember.substring(", "-                            excludeMinusDotStar.length() + 1);", "-                    //if it contains a dot then it is not a member but a package", "-                    if (member.indexOf('.') == -1) {", "-                        exempt = true;", "-                        break;", "-                    }", "+        }", "+        return exempt;", "+    }", "-        return exempt;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119f5603260ff81046ee2b5d44015c05", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "28a4f2fe029422414814eeb6858f0b9c0cef7039", "commitAfterChange": "40f4c37a21b1c8444f39f12c5f92e79af10be34f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public synchronized void process(File[] aFiles)", "signatureAfterChange": "     public synchronized void process(File[] aFiles)", "diff": ["-        mLoc = 0;", "-        mLineChecksums = new long[mFiles.length][];", "+        mLineBlockChecksums = new long[mFiles.length][];", "-            LOG.debug(\"Reading input files\");", "+            LOG.debug(\"Reading \" + mFiles.length + \" input files\");", "+            final File file = mFiles[i];", "-                final File file = mFiles[i];", "-                final String[] lines =", "-                    Utils.getLines(file.getPath(), getCharset());", "+                final String[] lines = getTrimmedLines(file);", "-                mLineChecksums[i] = transformer.convertLines(lines);", "+                mLineBlockChecksums[i] = transformer.convertLines(lines);", "-                LOG.error(\"Cannot access files to check, giving up: \"", "-                        + ex.getMessage(), ex);", "+                LOG.error(\"Cannot access \" + file + \" (\"", "+                          + ex.getMessage() + \"), ignoring\", ex);", "-                mLineChecksums = new long[0][0];", "+                mLineBlockChecksums = new long[0][0];", "-        mLineChecksums = null;", "+        mLineBlockChecksums = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39781113314e62cd8a11131c1d13afd4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "c3674faad8a38656e910750fb22a7eef714fb8a7", "commitAfterChange": "c3c1b9ae062635d0be858088ed2c1fcf366ec33f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "         public boolean isMatch(AuditEvent event)", "signatureAfterChange": "         public boolean isMatch(AuditEvent event)", "diff": ["-            if (line < firstLine) {", "-                return false;", "+            boolean match = false;", "+", "+            if (line >= firstLine && line <= lastLine) {", "+                final Matcher tagMatcher = tagCheckRegexp.matcher(event.getSourceName());", "+", "+                if (tagMatcher.find()) {", "+                    match = true;", "+                }", "+                else if (tagMessageRegexp != null) {", "+                    final Matcher messageMatcher = tagMessageRegexp.matcher(event.getMessage());", "+                    match = messageMatcher.find();", "+                }", "-            if (line > lastLine) {", "-                return false;", "-            }", "-            final Matcher tagMatcher =", "-                tagCheckRegexp.matcher(event.getSourceName());", "-            if (tagMatcher.find()) {", "-                return true;", "-            }", "-            if (tagMessageRegexp != null) {", "-                final Matcher messageMatcher =", "-                    tagMessageRegexp.matcher(event.getMessage());", "-                return messageMatcher.find();", "-            }", "-            return false;", "+            return match;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64be4c049ddb7b5dca6b8d0da12b1381", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "28a4f2fe029422414814eeb6858f0b9c0cef7039", "commitAfterChange": "40f4c37a21b1c8444f39f12c5f92e79af10be34f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "         public long[] convertLines(String[] aOriginalLines)", "signatureAfterChange": "         public long[] convertLines(String[] aOriginalLines)", "diff": ["-            final long[] checkSums = new long[aOriginalLines.length];", "-            for (int i = 0; i < aOriginalLines.length; i++) {", "-                final String line = aOriginalLines[i].trim();", "+            final int lineCount = aOriginalLines.length;", "+            final long[] checkSums = new long[lineCount];", "+            for (int i = 0; i < lineCount; i++) {", "+                final String line = aOriginalLines[i];", "-            return checkSums;", "+            final int retLen = Math.max(0, lineCount - mMin + 1);", "+            final long[] ret = new long[retLen];", "+", "+            for (int i = 0; i < retLen; i++) {", "+                long blockChecksum = 0;", "+                for (int j = 0; j < mMin; j++) {", "+                    final long checksum = checkSums[i + j];", "+                    if (checksum == IGNORE) {", "+                        blockChecksum = IGNORE;", "+                        break;", "+                    }", "+                    blockChecksum += (j + 1) * BIG_PRIME * checksum;", "+                }", "+                ret[i] = blockChecksum;", "+            }", "+            return ret;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2d98341f14674243ef502d60a7aab8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "7b26e83b92f03e6142af4c37f4308df275989d39", "commitAfterChange": "8da3b6dea4b446e055bb86b2bffb619008ee97b5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private static ParseTree getNextSibling(ParseTree node)", "signatureAfterChange": "     private static ParseTree getNextSibling(ParseTree node)", "diff": ["-        if (node.getParent() == null) {", "-            return null;", "-        }", "+        ParseTree nextSibling = null;", "-        final ParseTree parent = node.getParent();", "-        final int childCount = parent.getChildCount();", "+        if (node.getParent() != null) {", "+            final ParseTree parent = node.getParent();", "+            final int childCount = parent.getChildCount();", "-        int i = 0;", "-        while (true) {", "-            final ParseTree currentNode = parent.getChild(i);", "-            if (currentNode.equals(node)) {", "-                if (i == childCount - 1) {", "-                    return null;", "+            int i = 0;", "+            while (true) {", "+                final ParseTree currentNode = parent.getChild(i);", "+                if (currentNode.equals(node)) {", "+                    if (i != childCount - 1) {", "+                        nextSibling = parent.getChild(i + 1);", "+                    }", "+                    break;", "-                return parent.getChild(i + 1);", "+                i++;", "-            i++;", "+        return nextSibling;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd8f3a79f90f32787e829544dab64ef7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c847b536182ee3b1f95ea0c3e19cb5d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "fb2ec00cc72fa6edc0894e337b8176adcc2eb974", "commitAfterChange": "3b26b571a8dae611366c481aa1fce606ca1f1cfa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final DetailAST nextToken = ast.getNextSibling();", "+        if (hasMultipleLinesBefore(ast)) {", "+            log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "+        }", "+        final DetailAST nextToken = ast.getNextSibling();", "-                    if (nextToken.getType() != TokenTypes.RCURLY && !hasEmptyLineAfter(ast)) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "+                    if (nextToken.getType() == TokenTypes.RCURLY) {", "+                        if (hasNotAllowedTwoEmptyLinesBefore(nextToken)) {", "+                            log(ast.getLineNo(), MSG_MULTIPLE_LINES_AFTER, ast.getText());", "+                        }", "-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "+                    else if (!hasEmptyLineAfter(ast)) {", "+                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                            nextToken.getText());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aca0a40f35ebdc97b2a43bd1e60453f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "1fdf65bf0191425f8de6e9838973e53adbd81fc2", "commitAfterChange": "f8a53831f0fa98f317ea7dbc6490b5e91b6cc5d9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     void verifyVariable(MyVariable aVar)", "signatureAfterChange": "     void verifyVariable(MyVariable aVar)", "diff": ["-            checkVariable(aVar,", "-                          mConfig.getLocalVarRegexp(),", "-                          mConfig.getLocalVarPat());", "+            if (aVar.getModifierSet().containsFinal()) {", "+                checkVariable(aVar,", "+                              mConfig.getLocalFinalVarRegexp(),", "+                              mConfig.getLocalFinalVarPat());", "+            }", "+            else {", "+                checkVariable(aVar,", "+                              mConfig.getLocalVarRegexp(),", "+                              mConfig.getLocalVarPat());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b0b657510d9d53a7ccc48f9f634b9e7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "59ffd34e431c4b8b1c6c1a958d8a724bddb54b7b", "commitAfterChange": "d6966ec1f74912d6bfe3bb1c68bf67436da23f7e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public static void setLocale(Locale locale)", "signatureAfterChange": "     public static void setLocale(Locale locale)", "diff": ["-        sLocale = locale;", "+        if (Locale.ENGLISH.getLanguage().equals(locale.getLanguage())) {", "+            sLocale = Locale.ROOT;", "+        }", "+        else {", "+            sLocale = locale;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8808c9f6afb1edd37556ad7abf16282f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "d3aa5da76d137f8ab6c1238b02285fc16d29079f", "commitAfterChange": "00447a8fe3741b163901128b01ab7087392fc7c6", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "     private void checkImports()", "signatureAfterChange": "     private void checkImports()", "diff": ["+            else if (isIllegalImport(imp.getText())) {", "+                log(imp.getLineNo(),", "+                    \"Import from illegal package - \" + imp.getText());", "+            }"]}]}
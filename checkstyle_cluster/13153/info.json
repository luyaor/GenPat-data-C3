{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "182f63988b8aeaf2e6364e3d516de84d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fe9a21c0962377f147405889135d02b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String aClassName)", "signatureAfterChange": "     private String getIllegalInstantiation(String aClassName)", "diff": ["-        final Iterator illIter = mIllegalClasses.iterator();", "-        while (illIter.hasNext()) {", "-            final String illegal = (String) illIter.next();", "+        for (String illegal : mIllegalClasses) {", "-            final Iterator importIter = mImports.iterator();", "-            while (importIter.hasNext()) {", "-                final FullIdent importLineText = (FullIdent) importIter.next();", "+            for (FullIdent importLineText : mImports) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c6aa19925e6904a153f9d256e33a43c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(DetailAST aAST)", "diff": ["+    @Override", "-            final Iterator it = mImports.iterator();", "-            while (it.hasNext()) {", "-                final FullIdent full = (FullIdent) it.next();", "+            for (FullIdent full : mImports) {", "-            final Iterator it = mStaticImports.iterator();", "-            while (it.hasNext()) {", "-                final FullIdent full = (FullIdent) it.next();", "+            for (FullIdent full : mStaticImports) {"]}]}
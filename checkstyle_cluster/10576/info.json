{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd5098d24e715fcc412b710446915230", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a652bb9f14cbe278e73878871788b7a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "fa7617c2223dae31f3ad486002f60201667e7a95", "commitAfterChange": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Class resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "signatureAfterChange": "     public Class resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "diff": ["-        if (isLoadable(aName)) {", "-            return safeLoad(aName);", "-        }", "-        //Perhaps it's fully-qualified inner class", "-        int dotIdx = aName.lastIndexOf(\".\");", "-        if (dotIdx != -1) {", "-            final String cn = aName.substring(0, dotIdx) + \"$\"", "-                + aName.substring(dotIdx + 1);", "-            if (isLoadable(cn)) {", "-                return safeLoad(cn);", "-            }", "+        Class clazz = resolveQualifiedName(aName);", "+        if (clazz != null) {", "+            return clazz;", "-                if (isLoadable(imp)) {", "-                    return safeLoad(imp);", "+                clazz = resolveQualifiedName(imp);", "+                if (clazz != null) {", "+                    return clazz;", "-                // perhaps this is a import for inner class", "-                // let's try load it.", "-                final int dot = imp.lastIndexOf(\".\");", "-                if (dot != -1) {", "-                    final String innerName = imp.substring(0, dot) + \"$\"", "-                        + imp.substring(dot + 1);", "-                    if (isLoadable(innerName)) {", "-                        return safeLoad(innerName);", "-                    }", "-                }", "+", "-            final String fqn = mPkg + \".\" + aName;", "-            if (isLoadable(fqn)) {", "-                return safeLoad(fqn);", "+            clazz = resolveQualifiedName(mPkg + \".\" + aName);", "+            if (clazz != null) {", "+                return clazz;", "-        // try \"java.lang.\"", "-        final String langClass = \"java.lang.\" + aName;", "-        if (isLoadable(langClass)) {", "-            return safeLoad(langClass);", "-        }", "-", "-                if (isLoadable(fqn)) {", "-                    return safeLoad(fqn);", "+                clazz = resolveQualifiedName(fqn);", "+                if (clazz != null) {", "+                    return clazz;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e7811e8f6b51356d133fae773432d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "3c99349a8403f878ea4e3d1295b700db8c1cbe67", "commitAfterChange": "d64bdf0caa867be3913f2665ef4fcc654524937e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String className)", "signatureAfterChange": "     private String getIllegalInstantiation(String className)", "diff": ["+", "-", "-            // class from java.lang", "-            if (illegalLen - JAVA_LANG.length() == clsNameLen", "-                && illegal.endsWith(className)", "-                && illegal.startsWith(JAVA_LANG)) {", "-                // java.lang needs no import, but a class without import might", "-                // also come from the same file or be in the same package.", "-                // E.g. if a class defines an inner class \"Boolean\",", "-                // the expression \"new Boolean()\" refers to that class,", "-                // not to java.lang.Boolean", "-", "-                final boolean isSameFile = classNames.contains(className);", "-", "-                boolean isSamePackage = false;", "-                try {", "-                    final ClassLoader classLoader = getClassLoader();", "-                    if (classLoader != null) {", "-                        final String fqName = pkgName + \".\" + className;", "-                        classLoader.loadClass(fqName);", "-                        // no ClassNotFoundException, fqName is a known class", "-                        isSamePackage = true;", "-                    }", "-                }", "-                catch (final ClassNotFoundException ex) {", "-                    // not a class from the same package", "-                    isSamePackage = false;", "-                }", "-", "-                if (!(isSameFile || isSamePackage)) {", "-                    return illegal;", "-                }", "-            }", "-", "-            // class from same package", "-", "-            // the toplevel package (pkgName == null) is covered by the", "-            // \"illegalInsts.contains(className)\" check above", "-", "-            // the test is the \"no garbage\" version of", "-            // illegal.equals(pkgName + \".\" + className)", "-            if (pkgName != null", "-                && clsNameLen == illegalLen - pkgNameLen - 1", "-                && illegal.charAt(pkgNameLen) == '.'", "-                && illegal.endsWith(className)", "-                && illegal.startsWith(pkgName)) {", "+            if (isStandardClass(className, clsNameLen, illegal, illegalLen)) {", "-            // import statements", "-            for (FullIdent importLineText : imports) {", "-                final String importArg = importLineText.getText();", "-                if (importArg.endsWith(\".*\")) {", "-                    final String fqClass =", "-                        importArg.substring(0, importArg.length() - 1)", "-                        + className;", "-                    // assume that illegalInsts only contain existing classes", "-                    // or else we might create a false alarm here", "-                    if (illegalClasses.contains(fqClass)) {", "-                        return fqClass;", "-                    }", "+            if (isSamePackage(className, clsNameLen, pkgNameLen, illegal, illegalLen)) {", "+                return illegal;", "+            }", "+            final String importArg = checkImportStatements(className);", "+            if (importArg != null) {", "+                return importArg;", "+            }", "+        }", "+        return null;", "+    }", "-                else {", "-                    if (Utils.baseClassname(importArg).equals(className)", "-                        && illegalClasses.contains(importArg)) {", "-                        return importArg;", "-                    }"]}]}
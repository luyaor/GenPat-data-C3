{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e7d43297ac478ee2340b724d38f68c4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dee23aa186541785bd429568ca9e186", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r     public void process(final List<File> aFiles)", "signatureAfterChange": "\r \r     @Override\r     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    /** {@inheritDoc} */\r", "-    public void process(final List<File> aFiles)\r", "+\r", "+    @Override\r", "+    protected void processFiltered(File aFile, List<String> aLines)\r", "-        final MessageDispatcher msgDispatcher = getMessageDispatcher();\r", "-        for (final File file : aFiles) {\r", "-            final String path = file.getPath();\r", "-            msgDispatcher.fireFileStarted(path);\r", "-            LineNumberReader lnr = null;\r", "-            try {\r", "-                lnr = new LineNumberReader(new FileReader(file));\r", "-                while (true) {\r", "-                    final String line = lnr.readLine();\r", "-                    if (null == line) {\r", "-                        break;\r", "-                    }\r", "-                    final int tabPosition = line.indexOf('\\t');\r", "-                    if (tabPosition != -1) {\r", "-                        if (mEachLine) {\r", "-                            log(lnr.getLineNumber(), tabPosition + 1,\r", "-                                \"containsTab\");\r", "-                        }\r", "-                        else {\r", "-                            log(lnr.getLineNumber(), tabPosition + 1,\r", "-                                \"file.containsTab\");\r", "-                            break;\r", "-                        }\r", "-                    }\r", "+        int lineNum = 0;\r", "+        for (final String line : aLines) {\r", "+            lineNum++;\r", "+            final int tabPosition = line.indexOf('\\t');\r", "+            if (tabPosition != -1) {\r", "+                if (mEachLine) {\r", "+                    log(lineNum, tabPosition + 1, \"containsTab\");\r", "+                }\r", "+                else {\r", "+                    log(lineNum, tabPosition + 1, \"file.containsTab\");\r", "+                    break;\r", "-            catch (IOException ioe) {\r", "-                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\r", "-                log(0, \"Unable to read file: \" + ioe);\r", "-            }\r", "-            finally {\r", "-                Utils.closeQuietly(lnr);\r", "-            }\r", "-            fireErrors(path);\r", "-            msgDispatcher.fireFileFinished(path);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd57948cd93a42ebd081e3e3c066589", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     public void process(List<File> aFiles)", "signatureAfterChange": "\r \r     @Override\r     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    /** {@inheritDoc} */\r", "-    public void process(List<File> aFiles)\r", "-        final List<File> javaFiles = filter(aFiles);\r", "-        final Set<File> directories = getParentDirs(javaFiles);\r", "-        for (File dir : directories) {\r", "-            // Check for the preferred file.\r", "-            final MessageDispatcher dispatcher = getMessageDispatcher();\r", "-            final File packageInfo = new File(dir, \"package-info.java\");\r", "-            final File packageHtml = new File(dir, \"package.html\");\r", "-            final String path;\r", "-\r", "-            if (packageInfo.exists()) {\r", "-                path = packageInfo.getPath();\r", "-                dispatcher.fireFileStarted(path);\r", "-                if (packageHtml.exists()) {\r", "-                    log(0, \"javadoc.legacyPackageHtml\");\r", "-                }\r", "-            }\r", "-            else if (mAllowLegacy && packageHtml.exists()) {\r", "-                path = packageHtml.getPath();\r", "-                dispatcher.fireFileStarted(path);\r", "-            }\r", "-            else {\r", "-                path = packageInfo.getPath();\r", "-                dispatcher.fireFileStarted(path);\r", "-                log(0, \"javadoc.packageInfo\");\r", "-            }\r", "-            fireErrors(path);\r", "-            dispatcher.fireFileFinished(path);\r", "-        }\r", "+    @Override\r", "+    protected void processFiltered(File aFile, List<String> aLines)\r", "+        // Check if already processed directory\r", "+        final File dir = aFile.getParentFile();\r", "+        if (mDirectoriesChecked.contains(dir)) {\r", "+            return;\r", "+        mDirectoriesChecked.add(dir);\r", "+        \r", "+        // Check for the preferred file.\r", "+        final File packageInfo = new File(dir, \"package-info.java\");\r", "+        final File packageHtml = new File(dir, \"package.html\");\r", "+\r", "+        if (packageInfo.exists()) {\r", "+            if (packageHtml.exists()) {\r", "+                log(0, \"javadoc.legacyPackageHtml\");\r", "+            }\r", "+        }   \r", "+        else if (mAllowLegacy && packageHtml.exists()) {\r", "+        }\r", "+        else {\r", "+            log(0, \"javadoc.packageInfo\");\r", "+        }\r"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fe33c40691af534ec12f042c48f674b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06afa91384d956572cfebad08021935d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public final void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public final void visitToken(DetailAST ast)", "diff": ["-    public final void visitToken(DetailAST aAST)", "+    public final void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {", "-            processPackage(aAST);", "+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {", "+            processPackage(ast);", "-        else if (aAST.getType() == TokenTypes.IMPORT) {", "-            processImport(aAST);", "+        else if (ast.getType() == TokenTypes.IMPORT) {", "+            processImport(ast);", "-        else if ((aAST.getType() == TokenTypes.CLASS_DEF)", "-                 || (aAST.getType() == TokenTypes.INTERFACE_DEF)", "-                 || (aAST.getType() == TokenTypes.ENUM_DEF))", "+        else if ((ast.getType() == TokenTypes.CLASS_DEF)", "+                 || (ast.getType() == TokenTypes.INTERFACE_DEF)", "+                 || (ast.getType() == TokenTypes.ENUM_DEF))", "-            processClass(aAST);", "+            processClass(ast);", "-            if (aAST.getType() == TokenTypes.METHOD_DEF) {", "-                processTypeParams(aAST);", "+            if (ast.getType() == TokenTypes.METHOD_DEF) {", "+                processTypeParams(ast);", "-            processAST(aAST);", "+            processAST(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9deb27ca5f2026dfe1102fddb1aebf23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            startToken = skipAnnotationOnlyLines(aAST);", "-            brace = aAST.findFirstToken(TokenTypes.SLIST);", "+            startToken = skipAnnotationOnlyLines(ast);", "+            brace = ast.findFirstToken(TokenTypes.SLIST);", "-            startToken = skipAnnotationOnlyLines(aAST);", "-            final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);", "+            startToken = skipAnnotationOnlyLines(ast);", "+            final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);", "-            startToken = aAST;", "-            brace = aAST.findFirstToken(TokenTypes.SLIST);", "+            startToken = ast;", "+            brace = ast.findFirstToken(TokenTypes.SLIST);", "-            startToken = aAST;", "-            final DetailAST candidate = aAST.getFirstChild();", "+            startToken = ast;", "+            final DetailAST candidate = ast.getFirstChild();", "-            startToken = aAST;", "-            brace = aAST.findFirstToken(TokenTypes.LCURLY);", "+            startToken = ast;", "+            brace = ast.findFirstToken(TokenTypes.LCURLY);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48ef01a0500125ae3367416e63fce7bc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c0a70ea996dbcedf1497f8bd3404a22", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/naming/TypeNameCheckTest.java", "commitBeforeChange": "f1cff12b20f8c89069d202ab0419ab8bd1d71db6", "commitAfterChange": "686d009cf4d21d0ace52b9e7dccc848e8b9ce91a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testDefault()         throws Exception", "signatureAfterChange": "      @Test     public void testDefault()         throws Exception", "diff": ["-            createCheckConfig(TypeNameCheck.class);", "+                createCheckConfig(TypeNameCheck.class);", "-            \"1:48: Name 'inputHeader' must match pattern '^[A-Z][a-zA-Z0-9]*$'.\",", "+                buildMesssage(3, 7, \"inputHeaderClass\",", "+                        TypeNameCheck.DEFAULT_PATTERN),", "+                buildMesssage(5, 22, \"inputHeaderInterface\",", "+                        TypeNameCheck.DEFAULT_PATTERN),", "+                buildMesssage(7, 17, \"inputHeaderEnum\",", "+                        TypeNameCheck.DEFAULT_PATTERN),", "-        verify(checkConfig, getPath(\"inputHeader.java\"), expected);", "+        verify(checkConfig, inputFilename, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc153209da75782c9455e91a087813f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "e200d9bf3d07b103e633d56215280e5e7d7a980b", "commitAfterChange": "caf539ded2c2efb3706c7819264d9e1c9e8e87df", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethod(MethodSignature aSig)", "signatureAfterChange": "     void verifyMethod(MethodSignature aSig)", "diff": ["+        // JLS, chapter 9.4 - public in interface is strongly discouraged", "+        if (!mConfig.isIgnorePublicInInterface() &&", "+            inInterfaceBlock() && aSig.getModSet().containsPublic())", "+        {", "+            log(aSig.getLineNo(), \"redundant 'public' modifier.\");", "+        }", "+"]}]}
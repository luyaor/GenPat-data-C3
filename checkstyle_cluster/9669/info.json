{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3183e0e38ee2a53d531d01b4fb75ed55", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a87fc59ff881e3de25d098677c5bf2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "diff": ["-                || (!mIgnoreEqualsIgnoreCase && \"equalsIgnoreCase\"", "-                        .equals(method.getText())))", "+            && containsOneArg(expr) && containsAllSafeTokens(expr))", "-            if (containsOneArg(expr) && containsAllSafeTokens(expr)) {", "-                log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "-                    \"equals\".equals(method.getText())", "-                    ? \"equals.avoid.null\"", "-                    : \"equalsIgnoreCase.avoid.null\");", "-            }", "+            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "+                \"equals.avoid.null\");", "+        }", "+", "+        if (!mIgnoreEqualsIgnoreCase", "+            && \"equalsIgnoreCase\".equals(method.getText())", "+            && containsOneArg(expr) && containsAllSafeTokens(expr))", "+        {", "+            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "+                \"equalsIgnoreCase.avoid.null\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79eecc1975a056fa5600a66e7f98559d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingCtorCheck.java", "commitBeforeChange": "d74f5bb61c9d8a45af94f5539b2001d25e1f3076", "commitAfterChange": "50a13cf5bd17bf65f82c719fcdc8e7429d59e898", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (!modifiers.branchContains(TokenTypes.ABSTRACT)) {", "-            super.visitToken(ast);", "+        if (!modifiers.branchContains(TokenTypes.ABSTRACT)", "+                && ast.findFirstToken(TokenTypes.OBJBLOCK)", "+                    .findFirstToken(TokenTypes.CTOR_DEF) == null) {", "+            log(ast.getLineNo(), MSG_KEY);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7044fbc0cb8685bb4fc51f6f6ad457ba", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "332770624c60e36ef8a5aa4b29b565bd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private static boolean isChild(DetailAST aParent, DetailAST aAST)", "signatureAfterChange": "     private static boolean isChild(DetailAST parent, DetailAST ast)", "diff": ["-    private static boolean isChild(DetailAST aParent, DetailAST aAST)", "+    private static boolean isChild(DetailAST parent, DetailAST ast)", "-        final ASTEnumeration astList = aParent.findAllPartial(aAST);", "+        final ASTEnumeration astList = parent.findAllPartial(ast);", "-            final DetailAST ast = (DetailAST) astList.nextNode();", "-            DetailAST astParent = ast.getParent();", "+            final DetailAST astNode = (DetailAST) astList.nextNode();", "+            DetailAST astParent = astNode.getParent();", "-                if (astParent.equals(aParent)", "-                        && astParent.getLineNo() == aParent.getLineNo())", "+                if (astParent.equals(parent)", "+                        && astParent.getLineNo() == parent.getLineNo())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76c1cd40f248bc4850225bc7282668f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java", "commitBeforeChange": "e21676f52f3d68294122244cea63b4ecbe92de8f", "commitAfterChange": "0f9490c4ab86e6df2cfe90db1ffe04e906a5edad", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private static boolean areSameLevelIndented(DetailAST singleLineComment,                                                 DetailAST prevStmt, DetailAST nextStmt)", "signatureAfterChange": "     private static boolean areSameLevelIndented(DetailAST comment, DetailAST prevStmt,                                                 DetailAST nextStmt)", "diff": ["-    private static boolean areSameLevelIndented(DetailAST singleLineComment,", "-                                                DetailAST prevStmt, DetailAST nextStmt) {", "+    private static boolean areSameLevelIndented(DetailAST comment, DetailAST prevStmt,", "+                                                DetailAST nextStmt) {", "-            result = singleLineComment.getColumnNo() == nextStmt.getColumnNo();", "+            result = comment.getColumnNo() == nextStmt.getColumnNo();", "-            result = singleLineComment.getColumnNo() == nextStmt.getColumnNo()", "-                || singleLineComment.getColumnNo() == prevStmt.getColumnNo();", "+            result = comment.getColumnNo() == nextStmt.getColumnNo()", "+                || comment.getColumnNo() == prevStmt.getColumnNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f19d6e4c053f6451fc197e7637320091", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean isCorrectLocation(DetailAST aAnnotation, boolean aHasParams)", "signatureAfterChange": "     private boolean isCorrectLocation(DetailAST annotation, boolean hasParams)", "diff": ["-    private boolean isCorrectLocation(DetailAST aAnnotation, boolean aHasParams)", "+    private boolean isCorrectLocation(DetailAST annotation, boolean hasParams)", "-        final boolean allowingCondition = aHasParams ? mAllowSamelineParametrizedAnnotation", "-            : mAllowSamelineSingleParameterlessAnnotation;", "-        return allowingCondition && !hasNodeBefore(aAnnotation)", "-            || !allowingCondition && !hasNodeBeside(aAnnotation)", "-            || mAllowSamelineMultipleAnnotations;", "+        final boolean allowingCondition = hasParams ? allowSamelineParametrizedAnnotation", "+            : allowSamelineSingleParameterlessAnnotation;", "+        return allowingCondition && !hasNodeBefore(annotation)", "+            || !allowingCondition && !hasNodeBeside(annotation)", "+            || allowSamelineMultipleAnnotations;"]}]}
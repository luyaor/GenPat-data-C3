{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ac904001212bb7771e591992c249a4ed", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "551def994adbf1bede37e65df95acabc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "efc6142fb04bfdaf04775ea2e61a3885b7ee3861", "commitAfterChange": "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private void register(int type, Class<?> handlerClass)", "signatureAfterChange": "     private void register(int type, Class<?> handlerClass)", "diff": ["-        catch (final NoSuchMethodException e) {", "-            throw new RuntimeException(\"couldn't find ctor for \"", "-                                       + handlerClass);", "-        }", "-        catch (final SecurityException e) {", "-            LOG.debug(\"couldn't find ctor for \" + handlerClass, e);", "-            throw new RuntimeException(\"couldn't find ctor for \"", "-                                       + handlerClass);", "+        catch (final NoSuchMethodException | SecurityException e) {", "+            final String message = \"couldn't find ctor for \" + handlerClass;", "+            LOG.debug(message, e);", "+            throw new RuntimeException(message);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d804f35feaa579472e445f05fe9bddd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "efc6142fb04bfdaf04775ea2e61a3885b7ee3861", "commitAfterChange": "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, ExpressionHandler parent)", "signatureAfterChange": "     public ExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, ExpressionHandler parent)", "diff": ["-        catch (final InstantiationException e) {", "-            LOG.debug(\"couldn't instantiate constructor for \" + ast, e);", "-            throw new RuntimeException(\"couldn't instantiate constructor for \"", "-                                       + ast);", "+        catch (final InstantiationException | InvocationTargetException e) {", "+            final String message = \"couldn't instantiate constructor for \" + ast;", "+            LOG.debug(message, e);", "+            throw new RuntimeException(message);", "-            LOG.debug(\"couldn't access constructor for \" + ast, e);", "-            throw new RuntimeException(\"couldn't access constructor for \"", "-                                       + ast);", "-        }", "-        catch (final InvocationTargetException e) {", "-            LOG.debug(\"couldn't instantiate constructor for \" + ast, e);", "-            throw new RuntimeException(\"couldn't instantiate constructor for \"", "-                                       + ast);", "+            final String message = \"couldn't access constructor for \" + ast;", "+            LOG.debug(message, e);", "+            throw new RuntimeException(message);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bad3d827ee2d23aec4188ce972e7cef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d225209486084198c4617383f88c2ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java", "commitBeforeChange": "2915ccf21a2f350034d9170d0b2e075e61f091ff", "commitAfterChange": "57d522e2095abd90e35aa7602d4826c55d5d3bdf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public TreeTableModelAdapter(TreeTableModel treeTableModel, JTree tree)", "signatureAfterChange": "      public TreeTableModelAdapter(TreeTableModel treeTableModel, JTree tree)", "diff": ["-        tree.addTreeExpansionListener(new TreeExpansionListener() {", "-            // Don't use fireTableRowsInserted() here; the selection model", "-            // would get updated twice.", "-            @Override", "-            public void treeExpanded(TreeExpansionEvent event) {", "-                fireTableDataChanged();", "-            }", "-", "-            @Override", "-            public void treeCollapsed(TreeExpansionEvent event) {", "-                fireTableDataChanged();", "-            }", "-        });", "+        tree.addTreeExpansionListener(new UpdatingTreeExpansionListener());", "-        treeTableModel.addTreeModelListener(new TreeModelListener() {", "-            @Override", "-            public void treeNodesChanged(TreeModelEvent e) {", "-                delayedFireTableDataChanged();", "-            }", "-", "-            @Override", "-            public void treeNodesInserted(TreeModelEvent e) {", "-                delayedFireTableDataChanged();", "-            }", "-", "-            @Override", "-            public void treeNodesRemoved(TreeModelEvent e) {", "-                delayedFireTableDataChanged();", "-            }", "-", "-            @Override", "-            public void treeStructureChanged(TreeModelEvent e) {", "-                delayedFireTableDataChanged();", "-            }", "-        });", "+        treeTableModel.addTreeModelListener(new UpdatingTreeModelListener());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4281ba17fc58e48049f29b8e8075c81", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java", "commitBeforeChange": "74738cea30770d34f8555381f666e079fe6b54f6", "commitAfterChange": "2c23e07558b15944638601a2620fa6aefd12ec2a", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "      @Test(expected = IllegalStateException.class)     public void testVisitTokenSwitchReflection() throws Exception", "signatureAfterChange": "      @Test(expected = IllegalStateException.class)     public void testVisitTokenSwitchReflection() throws Exception", "diff": ["-        final ImportOrderOption importOrderOptionMock = PowerMockito.mock(ImportOrderOption.class);", "-        Whitebox.setInternalState(importOrderOptionMock, \"name\", \"NEW_OPTION_FOR_UT\");", "-        Whitebox.setInternalState(importOrderOptionMock, \"ordinal\", 5);", "-", "+        // Create mock ast", "-        final ImportOrderCheck check = new ImportOrderCheck() {", "-            @Override", "-            public ImportOrderOption getAbstractOption() {", "-                final ImportOrderOption importOrderOption = PowerMockito", "-                    .mock(ImportOrderOption.class);", "-                Whitebox.setInternalState(importOrderOption, \"name\", \"NEW_OPTION_FOR_UT\");", "-                Whitebox.setInternalState(importOrderOption, \"ordinal\", 5);", "-                return importOrderOption;", "-                }", "-        };", "+        // Set unsupported option", "+        final ImportOrderCheck mock = new ImportOrderCheck();", "+        final ImportOrderOption importOrderOptionMock = PowerMockito.mock(ImportOrderOption.class);", "+        Whitebox.setInternalState(importOrderOptionMock, \"name\", \"NEW_OPTION_FOR_UT\");", "+        Whitebox.setInternalState(importOrderOptionMock, \"ordinal\", 5);", "+        Whitebox.setInternalState(mock, \"option\", importOrderOptionMock);", "+", "-        check.visitToken(astImport);", "+        mock.visitToken(astImport);"]}]}
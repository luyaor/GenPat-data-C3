{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25f26f92d4d716d378f283db194932c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62dc86502e48f5f438ed819843648401", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java", "commitBeforeChange": "a2c4566348d41c5eed923c33670cb48bf30c951b", "commitAfterChange": "e292d5fa53a78828d45565e27d305eb3f7cb9d6a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     AccessResult verifyImport(final String aForImport)", "signatureAfterChange": "     AccessResult verifyImport(final String aForImport)", "diff": ["-            final boolean classMatch = mClassName.equals(aForImport);", "+            final boolean classMatch = mRegExp", "+                ? aForImport.matches(mClassName)", "+                : aForImport.equals(mClassName);", "-        //boolean pkgMatch = aForImport.startsWith(mPkgName + \".\");", "-        boolean pkgMatch = aForImport.startsWith(mPkgName + \".\");", "-        if (pkgMatch && mExactMatch) {", "-            pkgMatch = (aForImport.indexOf('.', (mPkgName.length() + 1)) == -1);", "+        boolean pkgMatch;", "+        if (mRegExp) {", "+            pkgMatch = aForImport.matches(mPkgName + \"\\\\..*\");", "+            if (pkgMatch && mExactMatch) {", "+                pkgMatch = !aForImport.matches(mPkgName + \"\\\\..*\\\\..*\");", "+            }", "+        }", "+        else {", "+            pkgMatch = aForImport.startsWith(mPkgName + \".\");", "+            if (pkgMatch && mExactMatch) {", "+                pkgMatch = (aForImport.indexOf('.',", "+                    (mPkgName.length() + 1)) == -1);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c78606bde57af1ef70fd0d54e63091", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     AccessResult verifyImport(final String aForImport)", "signatureAfterChange": "     AccessResult verifyImport(final String forImport)", "diff": ["-    AccessResult verifyImport(final String aForImport)", "+    AccessResult verifyImport(final String forImport)", "-        assert aForImport != null;", "-        if (mClassName != null) {", "-            final boolean classMatch = mRegExp", "-                ? aForImport.matches(mClassName)", "-                : aForImport.equals(mClassName);", "+        assert forImport != null;", "+        if (className != null) {", "+            final boolean classMatch = regExp", "+                ? forImport.matches(className)", "+                : forImport.equals(className);", "-        assert mPkgName != null;", "+        assert pkgName != null;", "-        if (mRegExp) {", "-            pkgMatch = aForImport.matches(mPkgName + \"\\\\..*\");", "-            if (pkgMatch && mExactMatch) {", "-                pkgMatch = !aForImport.matches(mPkgName + \"\\\\..*\\\\..*\");", "+        if (regExp) {", "+            pkgMatch = forImport.matches(pkgName + \"\\\\..*\");", "+            if (pkgMatch && exactMatch) {", "+                pkgMatch = !forImport.matches(pkgName + \"\\\\..*\\\\..*\");", "-            pkgMatch = aForImport.startsWith(mPkgName + \".\");", "-            if (pkgMatch && mExactMatch) {", "-                pkgMatch = (aForImport.indexOf('.',", "-                    (mPkgName.length() + 1)) == -1);", "+            pkgMatch = forImport.startsWith(pkgName + \".\");", "+            if (pkgMatch && exactMatch) {", "+                pkgMatch = (forImport.indexOf('.',", "+                    (pkgName.length() + 1)) == -1);"]}]}
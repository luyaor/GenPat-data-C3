{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d20af49a99a0ee7acd3dc0b5b8ae4e7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f988536ea9ed0cc44b5aebf47a63d3b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "1d15536b16b53389fc8eb8897a87688599dd0b30", "commitAfterChange": "cba6fc8b0a653a795107566f895d2b8f73e2c6c9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void verifyBrace(final DetailAST aBrace,                              final DetailAST aStartToken)", "signatureAfterChange": "     private void verifyBrace(final DetailAST aBrace,                              final DetailAST aStartToken)", "diff": ["-        final String braceLine = getLines()[aBrace.getLineNo() - 1];", "+        final String braceLine = getLine(aBrace.getLineNo() - 1);", "-            : Utils.lengthMinusTrailingWhitespace(", "-                getLines()[aBrace.getLineNo() - 2]);", "+            : Utils.lengthMinusTrailingWhitespace(getLine(aBrace.getLineNo() - 2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75535a484bef1830c980ac80fe916284", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java", "commitBeforeChange": "46146514c3c40ee8077578ad39f1289395afb3de", "commitAfterChange": "0340dcb26d5db9625e8e1f093f39165b8bdb18bf", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected boolean isMatch(int aLineNumber)", "signatureAfterChange": "     protected boolean isMatch(int aLineNumber)", "diff": ["-        final String[] lines = getLines();", "-        return mHeaderLines[aLineNumber].equals(lines[aLineNumber]);", "-    }", "+        final String line = getLines()[aLineNumber];", "+        // skip lines we are meant to ignore", "+        return isIgnoreLine(aLineNumber + 1)", "+            || getHeaderLines()[aLineNumber].equals(line);"]}]}
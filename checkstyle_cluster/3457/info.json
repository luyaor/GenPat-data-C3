{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f61176823d6486f88cca32737ab50d6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "066c67512958452b6232158b775729cd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      void verify(Checker aC,             File[] aProcessedFiles,             String aMessageFileName,             String[] aExpected,             Integer... aWarnsExpected)         throws Exception", "signatureAfterChange": "      void verify(Checker aC,             File[] aProcessedFiles,             String aMessageFileName,             String[] aExpected,             Integer... aWarnsExpected)         throws Exception", "diff": ["-                String actual = lnr.readLine();", "+                final String actual = lnr.readLine();", "-                int lineNumber = Integer.parseInt(parseInt);", "+                final int lineNumber = Integer.parseInt(parseInt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3caf11cdc5ae5102fb4399efb857cbcf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static String safeGet(final Attributes attributes, final String name)         throws SAXException", "signatureAfterChange": "     private static String safeGet(final Attributes attributes, final String name)         throws SAXException", "diff": ["-        final String retVal = attributes.getValue(name);", "-        if (retVal == null) {", "+        final String returnValue = attributes.getValue(name);", "+        if (returnValue == null) {", "-        return retVal;", "+        return returnValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e6b24a78a7d501e68ff8a73f57d73f2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/BaseCheckTestCase.java", "commitBeforeChange": "29390c5b02771f217129181de8c1617bd668dd05", "commitAfterChange": "2fdb7b43e7bdffbbcb86ab4e09f76dd2517d3329", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      protected void verify(Checker aC,                           File[] aProcessedFiles,                           String aMessageFileName,                           String[] aExpected)         throws Exception", "signatureAfterChange": "      protected void verify(Checker aC,                           File[] aProcessedFiles,                           String aMessageFileName,                           String[] aExpected)         throws Exception", "diff": ["-            assertEquals(aMessageFileName + \":\" + aExpected[i], lnr.readLine());", "+            final String expected = aMessageFileName + \":\" + aExpected[i];", "+            final String actual = lnr.readLine();", "+            assertEquals(expected, actual);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "981c33ae1c4031e5ebeb3fd421df7cf1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "commitBeforeChange": "53197d9be9366ccf9ebccc1e6e31270c1dff8e95", "commitAfterChange": "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void checkReturnTag(List aTags, int aLineNo)", "signatureAfterChange": "     private void checkReturnTag(List aTags, int aLineNo)", "diff": ["-        // Handle there being no @return tags", "-        if (!found) {", "+        // Handle there being no @return tags :- unless", "+        // the user has chosen to suppress these problems", "+        if (!found && !mAllowMissingReturnTag) {"]}]}
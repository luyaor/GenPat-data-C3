{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c602ad0975fd2c1d15e0357b2b564d31", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c735e17fd79e193010aab808979bfcc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "ce59d6abb3385213248b188f5b80f9e9a2ca3507", "commitAfterChange": "b433c987fa86905ffa686d6b45180508d759d450", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean exprSurrounded(DetailAST ast)", "signatureAfterChange": "     private boolean isExprSurrounded(DetailAST ast)", "diff": ["-    private boolean exprSurrounded(DetailAST ast) {", "-        if (ast.getType() != TokenTypes.EXPR) {", "-            throw new IllegalArgumentException(\"Not an expression node.\");", "-        }", "-        boolean surrounded = false;", "-        if (ast.getChildCount() >= MIN_CHILDREN_FOR_MATCH) {", "-            final AST n1 = ast.getFirstChild();", "-            final AST nn = ast.getLastChild();", "-", "-            surrounded = n1.getType() == TokenTypes.LPAREN", "-                && nn.getType() == TokenTypes.RPAREN;", "-        }", "-        return surrounded;", "+    private boolean isExprSurrounded(DetailAST ast) {", "+        return ast.getFirstChild().getType() == TokenTypes.LPAREN;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8def032bef408c9e62ae9d3557bb11ca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1c7341013d0e8a34498eb49ccdb4e91419f13280", "commitAfterChange": "cd89321522d9bf7fc10547e743fb8bbb4c993791", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected boolean isUnchecked(FullIdent aException)", "signatureAfterChange": "     protected boolean isUnchecked(Class aException)", "diff": ["-    protected boolean isUnchecked(FullIdent aException)", "+    protected boolean isUnchecked(Class aException)", "-        final ClassResolver cr = getClassResolver();", "-        try {", "-            final Class clazz = cr.resolve(aException.getText());", "-            return (RuntimeException.class.isAssignableFrom(clazz)", "-                    || Error.class.isAssignableFrom(clazz));", "-        }", "-        catch (ClassNotFoundException e) {", "-            log(aException.getLineNo(), aException.getColumnNo(),", "-                \"redundant.throws.classInfo\",", "-                aException.getText());", "-        }", "-", "-        // return false to prefent from additional errors", "-        return false;", "+        return isSubclass(aException, RuntimeException.class)", "+            || isSubclass(aException, Error.class);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28416921d0f9efc88ae4246b642e7f9f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "620699203c5d240260698a0447e5bcbd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java", "commitBeforeChange": "dba2da926c7a35cc1c68a739934b846c14d9b7ae", "commitAfterChange": "779d30b7599259bb25f5178cbb28f2a038992553", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static boolean isInContext(DetailAST ast, int[]... contextSet)", "signatureAfterChange": "     private static boolean isInContext(DetailAST ast, int[]... contextSet)", "diff": ["+        boolean found = false;", "-                if (current == null || current.getType() != expectedType) {", "+                if (current.getType() != expectedType) {", "+                    found = false;", "-                if (j == len - 1) {", "-                    return true;", "+                else {", "+                    found = true;", "+", "+            if (found) {", "+                break;", "+            }", "-        return false;", "+        return found;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce3bf3e80068acc3678d1e4d7eb36ae2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "3f691ec451055c2752ae2d6b25f9a3c050a10783", "commitAfterChange": "425fd5a27cd567d5784bd246729c55cf8cda3dbd", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 43, "signatureBeforeChange": "         boolean contains(DetailAST nameToFind)", "signatureAfterChange": "         private boolean containsMethodDef(Set<DetailAST> set, DetailAST ident)", "diff": ["-        boolean contains(DetailAST nameToFind) {", "-            return containsName(varIdents, nameToFind);", "+         */", "+        private boolean containsMethodDef(Set<DetailAST> set, DetailAST ident) {", "+            boolean result = false;", "+            for (DetailAST ast: set) {", "+                if (isSimilarSignature(ident, ast)) {", "+                    result = true;", "+                    break;", "+                }", "+            }", "+            return result;", "+        }"]}]}
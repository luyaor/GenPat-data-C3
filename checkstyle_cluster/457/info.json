{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81e1b4740f06a94f88fa60bbf10b8836", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1d83390dfa494b55eb1fdf6e3d828c9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/PropertyCacheFileTest.java", "commitBeforeChange": "1ef123bf60e8f4ba348f2e6399175dee62f016b2", "commitAfterChange": "bc034f53c0b807bc1a4234a3c0313d3761ed5b62", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void testNonAccessibleFile() throws IOException", "signatureAfterChange": "      @Test     public void testNonAccessibleFile() throws IOException", "diff": ["-", "-        new PropertyCacheFile(config, file.getAbsolutePath());", "+        try {", "+            new PropertyCacheFile(config, file.getAbsolutePath()).persist();", "+            fail(\"FileNotFoundException is expected, since access to the file was denied!\");", "+        }", "+        catch (FileNotFoundException ex) {", "+            assertThat(ex.getMessage(), anyOf(endsWith(\"file.output (Permission denied)\"),", "+                endsWith(\"file.output (Access is denied)\")));", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c86a757d371242ffecb18ceae544725a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java", "commitBeforeChange": "8f12d2b92568c8fca42dfbd26f3d1f0b17100a7b", "commitAfterChange": "050d1e55a819d639fe9116ec3ebd99902530c3f9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testContextualize1() throws CheckstyleException", "signatureAfterChange": "      @Test     public void testContextualize_ConversionException()", "diff": ["-    public void testContextualize1() throws CheckstyleException {", "-        context.add(\"val\", 123f);", "-        testBean.contextualize(context);", "+", "+    @Test", "+    public void testContextualize_ConversionException() {", "+        final TestBean testBean = new TestBean();", "+        DefaultContext context = new DefaultContext();", "+        context.add(\"intVal\", \"some string\");", "+        try {", "+            testBean.contextualize(context);", "+            fail();", "+        }", "+        catch (CheckstyleException ex) {", "+            assertTrue(ex.getCause() instanceof ConversionException);", "+            assertTrue(ex.getMessage().startsWith(\"illegal value \"));", "+        }", "+    }"]}]}
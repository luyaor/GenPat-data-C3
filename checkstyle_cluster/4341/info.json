{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c86446f00c2fb8dc4b954e604f628f5d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0160f37787fd11e360a5a316285589a4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "e4434ebe00405dca6bc2009666d6cfea7b15cfd5", "commitAfterChange": "0fdfc2f36086a108407fc7d51edc5b8c934b658a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public int[] getDefaultTokens()", "signatureAfterChange": "     public int[] getDefaultTokens()", "diff": ["-        // TODO: add all operators", "-        return new int[] {JavaTokenTypes.ASSIGN};", "+        return new int[] {", "+            QUESTION,          // '?'", "+            // COLON,             // ':' TODO: dont flag after \"case\"", "+            ASSIGN,            // '='", "+            EQUAL,             // \"==\"", "+            NOT_EQUAL,         // \"!=\"", "+            DIV,               // '/'", "+            DIV_ASSIGN,        // \"/=\"", "+            // PLUS,              //' +' TODO: unaray plus", "+            PLUS_ASSIGN,       // \"+=\"", "+            // MINUS,             // '-' TODO: unary minus", "+            MINUS_ASSIGN,      //\"-=\"", "+            STAR,              // '*'", "+            STAR_ASSIGN,       // \"*=\"", "+            MOD,               // '%'", "+            MOD_ASSIGN,        // \"%=\"", "+            SR,                // \">>\"", "+            SR_ASSIGN,         // \">>=\"", "+            BSR,               // \">>>\"", "+            BSR_ASSIGN,        // \">>>=\"", "+            GE,                // \">=\"", "+            GT,                // \">\"", "+            SL,                // \"<<\"", "+            SL_ASSIGN,         // \"<<=\"", "+            LE,                // \"<=\"", "+            LT,                // '<'", "+            BXOR,              // '^'", "+            BXOR_ASSIGN,       // \"^=\"", "+            BOR,               // '|'", "+            BOR_ASSIGN,        // \"|=\"", "+            LOR,               // \"||\"", "+            BAND,              // '&'", "+            BAND_ASSIGN,       // \"&=\"", "+            LAND,              // \"&&\"", "+            LITERAL_if,", "+            LITERAL_else,", "+            LITERAL_for,", "+            LITERAL_do,", "+            // LITERAL_return,    // TODO: \"return;\" is OK, return(2) is not", "+            LITERAL_try,", "+            LITERAL_catch,", "+            LITERAL_finally,", "+            LITERAL_synchronized,", "+            ASSERT                // TODO: why is it not LITERAL_assert?", "+                                  // maybe it's a bug in the grammar?", "+        };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ba0383e76f113ca222dd371114a731f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "fff24e89001ce2ad9c30d1f573639cd640183669", "commitAfterChange": "d877cb15cfeae5f06a5d546dcc860c2aa32caac4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private static DetailAST getAnnotationTarget(DetailAST ast)", "signatureAfterChange": "     private static DetailAST getAnnotationTarget(DetailAST ast)", "diff": ["-        if (parentAST != null) {", "-            switch (parentAST.getType()) {", "-                case TokenTypes.MODIFIERS:", "-                case TokenTypes.ANNOTATIONS:", "-                    parentAST = parentAST.getParent();", "-                    if (parentAST != null) {", "-                        switch (parentAST.getType()) {", "-                            case TokenTypes.ANNOTATION_DEF:", "-                            case TokenTypes.PACKAGE_DEF:", "-                            case TokenTypes.CLASS_DEF:", "-                            case TokenTypes.INTERFACE_DEF:", "-                            case TokenTypes.ENUM_DEF:", "-                            case TokenTypes.ENUM_CONSTANT_DEF:", "-                            case TokenTypes.CTOR_DEF:", "-                            case TokenTypes.METHOD_DEF:", "-                            case TokenTypes.PARAMETER_DEF:", "-                            case TokenTypes.VARIABLE_DEF:", "-                            case TokenTypes.ANNOTATION_FIELD_DEF:", "-                            case TokenTypes.TYPE:", "-                            case TokenTypes.LITERAL_NEW:", "-                            case TokenTypes.LITERAL_THROWS:", "-                            case TokenTypes.TYPE_ARGUMENT:", "-                            case TokenTypes.IMPLEMENTS_CLAUSE:", "-                            case TokenTypes.DOT:", "-                                targetAST = parentAST;", "-                                break;", "-", "-                            default:", "-                                // unexpected target type", "-                        }", "-                    }", "-                    break;", "-", "-                default:", "-                    // unexpected container type", "-            }", "+        switch (parentAST.getType()) {", "+            case TokenTypes.MODIFIERS:", "+            case TokenTypes.ANNOTATIONS:", "+                parentAST = parentAST.getParent();", "+                switch (parentAST.getType()) {", "+                    case TokenTypes.ANNOTATION_DEF:", "+                    case TokenTypes.PACKAGE_DEF:", "+                    case TokenTypes.CLASS_DEF:", "+                    case TokenTypes.INTERFACE_DEF:", "+                    case TokenTypes.ENUM_DEF:", "+                    case TokenTypes.ENUM_CONSTANT_DEF:", "+                    case TokenTypes.CTOR_DEF:", "+                    case TokenTypes.METHOD_DEF:", "+                    case TokenTypes.PARAMETER_DEF:", "+                    case TokenTypes.VARIABLE_DEF:", "+                    case TokenTypes.ANNOTATION_FIELD_DEF:", "+                    case TokenTypes.TYPE:", "+                    case TokenTypes.LITERAL_NEW:", "+                    case TokenTypes.LITERAL_THROWS:", "+                    case TokenTypes.TYPE_ARGUMENT:", "+                    case TokenTypes.IMPLEMENTS_CLAUSE:", "+                    case TokenTypes.DOT:", "+                        targetAST = parentAST;", "+                        break;", "+                    default:", "+                        // unexpected target type", "+                }", "+                break;", "+            default:", "+                // unexpected container type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4501cb8c4bb618ceb2b0a3e825e47e90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "5cd9806d4b7900f41eb855d197eb334abade3ac8", "commitAfterChange": "98a9266a8091c1c6b26d41b4e17e1a32458f1bac", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                if (TokenTypes.POST_DEC        == parentType", "-                    || TokenTypes.DEC          == parentType", "-                    || TokenTypes.POST_INC     == parentType", "-                    || TokenTypes.INC          == parentType", "-                    || TokenTypes.ASSIGN       == parentType", "-                    || TokenTypes.PLUS_ASSIGN  == parentType", "-                    || TokenTypes.MINUS_ASSIGN == parentType", "-                    || TokenTypes.DIV_ASSIGN   == parentType", "-                    || TokenTypes.STAR_ASSIGN  == parentType", "-                    || TokenTypes.MOD_ASSIGN   == parentType", "-                    || TokenTypes.SR_ASSIGN    == parentType", "-                    || TokenTypes.BSR_ASSIGN   == parentType", "-                    || TokenTypes.SL_ASSIGN    == parentType", "-                    || TokenTypes.BXOR_ASSIGN  == parentType", "-                    || TokenTypes.BOR_ASSIGN   == parentType", "-                    || TokenTypes.BAND_ASSIGN  == parentType)", "+                // TODO: is there better way to check is ast", "+                // in left part of assignment?", "+                if ((TokenTypes.POST_DEC == parentType", "+                        || TokenTypes.DEC == parentType", "+                        || TokenTypes.POST_INC == parentType", "+                        || TokenTypes.INC == parentType", "+                        || TokenTypes.ASSIGN == parentType", "+                        || TokenTypes.PLUS_ASSIGN == parentType", "+                        || TokenTypes.MINUS_ASSIGN == parentType", "+                        || TokenTypes.DIV_ASSIGN == parentType", "+                        || TokenTypes.STAR_ASSIGN == parentType", "+                        || TokenTypes.MOD_ASSIGN == parentType", "+                        || TokenTypes.SR_ASSIGN == parentType", "+                        || TokenTypes.BSR_ASSIGN == parentType", "+                        || TokenTypes.SL_ASSIGN == parentType", "+                        || TokenTypes.BXOR_ASSIGN == parentType", "+                        || TokenTypes.BOR_ASSIGN == parentType", "+                        || TokenTypes.BAND_ASSIGN == parentType)", "+                        && ast.getParent().getFirstChild() == ast)", "-                    // TODO: is there better way to check is ast", "-                    // in left part of assignment?", "-                    if (ast.getParent().getFirstChild() == ast) {", "-                        removeVariable(ast);", "-                    }", "+                    removeVariable(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "887a896964514caf16c068d5e3963ab8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "01d27913a71c29d6a769ed98ca7dd4ba01fe31eb", "commitAfterChange": "4cbd709c019cf1b69796858506d673f7b66d37c7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public int[] getDefaultTokens()", "signatureAfterChange": "     public int[] getDefaultTokens()", "diff": ["-            RCURLY,            // '}'", "-            QUESTION,          // '?'", "-            COLON,             // ':' TODO: dont flag after \"case\"", "-            ASSIGN,            // '='", "-            EQUAL,             // \"==\"", "-            NOT_EQUAL,         // \"!=\"", "-            DIV,               // '/'", "-            DIV_ASSIGN,        // \"/=\"", "-            PLUS,              //' +' (unaray plus is UNARY_PLUS)", "-            PLUS_ASSIGN,       // \"+=\"", "-            MINUS,             // '-' (unary minus is UNARY_MINUS)", "-            MINUS_ASSIGN,      //\"-=\"", "-            STAR,              // '*'", "-            STAR_ASSIGN,       // \"*=\"", "-            MOD,               // '%'", "-            MOD_ASSIGN,        // \"%=\"", "-            SR,                // \">>\"", "-            SR_ASSIGN,         // \">>=\"", "-            BSR,               // \">>>\"", "-            BSR_ASSIGN,        // \">>>=\"", "-            GE,                // \">=\"", "-            GT,                // \">\"", "-            SL,                // \"<<\"", "-            SL_ASSIGN,         // \"<<=\"", "-            LE,                // \"<=\"", "-            LT,                // '<'", "-            BXOR,              // '^'", "-            BXOR_ASSIGN,       // \"^=\"", "-            BOR,               // '|'", "-            BOR_ASSIGN,        // \"|=\"", "-            LOR,               // \"||\"", "-            BAND,              // '&'", "-            BAND_ASSIGN,       // \"&=\"", "-            LAND,              // \"&&\"", "-            LITERAL_catch,", "-            LITERAL_do,", "-            LITERAL_else,", "-            LITERAL_finally,", "-            LITERAL_for,", "-            LITERAL_if,", "-            LITERAL_return,", "-            LITERAL_synchronized,", "-            LITERAL_try,", "-            LITERAL_while,", "-            ASSERT                // TODO: why is it not LITERAL_assert?", "+            TokenTypes.RCURLY,            // '}'", "+            TokenTypes.QUESTION,          // '?'", "+            TokenTypes.COLON,             // ':' TODO: dont flag after \"case\"", "+            TokenTypes.ASSIGN,            // '='", "+            TokenTypes.EQUAL,             // \"==\"", "+            TokenTypes.NOT_EQUAL,         // \"!=\"", "+            TokenTypes.DIV,               // '/'", "+            TokenTypes.DIV_ASSIGN,        // \"/=\"", "+            TokenTypes.PLUS,              //' +' (unaray plus is UNARY_PLUS)", "+            TokenTypes.PLUS_ASSIGN,       // \"+=\"", "+            TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)", "+            TokenTypes.MINUS_ASSIGN,      //\"-=\"", "+            TokenTypes.STAR,              // '*'", "+            TokenTypes.STAR_ASSIGN,       // \"*=\"", "+            TokenTypes.MOD,               // '%'", "+            TokenTypes.MOD_ASSIGN,        // \"%=\"", "+            TokenTypes.SR,                // \">>\"", "+            TokenTypes.SR_ASSIGN,         // \">>=\"", "+            TokenTypes.BSR,               // \">>>\"", "+            TokenTypes.BSR_ASSIGN,        // \">>>=\"", "+            TokenTypes.GE,                // \">=\"", "+            TokenTypes.GT,                // \">\"", "+            TokenTypes.SL,                // \"<<\"", "+            TokenTypes.SL_ASSIGN,         // \"<<=\"", "+            TokenTypes.LE,                // \"<=\"", "+            TokenTypes.LT,                // '<'", "+            TokenTypes.BXOR,              // '^'", "+            TokenTypes.BXOR_ASSIGN,       // \"^=\"", "+            TokenTypes.BOR,               // '|'", "+            TokenTypes.BOR_ASSIGN,        // \"|=\"", "+            TokenTypes.LOR,               // \"||\"", "+            TokenTypes.BAND,              // '&'", "+            TokenTypes.BAND_ASSIGN,       // \"&=\"", "+            TokenTypes.LAND,              // \"&&\"", "+            TokenTypes.LITERAL_CATCH,", "+            TokenTypes.LITERAL_DO,", "+            TokenTypes.LITERAL_ELSE,", "+            TokenTypes.LITERAL_FINALLY,", "+            TokenTypes.LITERAL_FOR,", "+            TokenTypes.LITERAL_IF,", "+            TokenTypes.LITERAL_RETURN,", "+            TokenTypes.LITERAL_SYNCHRONIZED,", "+            TokenTypes.LITERAL_TRY,", "+            TokenTypes.LITERAL_WHILE,", "+            TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac1c071f0ee99e44fefe9ddbf599ee34", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "672244cf2f75c7425087a69beafe1133a45f130b", "commitAfterChange": "aa1032931c3bcb327e77c5d21f63f48a27e947a5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public int[] getDefaultTokens()", "signatureAfterChange": "     public int[] getDefaultTokens()", "diff": ["-            TokenTypes.RCURLY,            // '}'", "-            TokenTypes.QUESTION,          // '?'", "-            TokenTypes.COLON,             // ':' TODO: dont flag after \"case\"", "-            TokenTypes.ASSIGN,            // '='", "-            TokenTypes.EQUAL,             // \"==\"", "-            TokenTypes.NOT_EQUAL,         // \"!=\"", "-            TokenTypes.DIV,               // '/'", "-            TokenTypes.DIV_ASSIGN,        // \"/=\"", "-            TokenTypes.PLUS,              //' +' (unaray plus is UNARY_PLUS)", "-            TokenTypes.PLUS_ASSIGN,       // \"+=\"", "-            TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)", "-            TokenTypes.MINUS_ASSIGN,      //\"-=\"", "-            TokenTypes.STAR,              // '*'", "-            TokenTypes.STAR_ASSIGN,       // \"*=\"", "-            TokenTypes.MOD,               // '%'", "-            TokenTypes.MOD_ASSIGN,        // \"%=\"", "-            TokenTypes.SR,                // \">>\"", "-            TokenTypes.SR_ASSIGN,         // \">>=\"", "-            TokenTypes.BSR,               // \">>>\"", "-            TokenTypes.BSR_ASSIGN,        // \">>>=\"", "-            TokenTypes.GE,                // \">=\"", "-            TokenTypes.GT,                // \">\"", "-            TokenTypes.SL,                // \"<<\"", "-            TokenTypes.SL_ASSIGN,         // \"<<=\"", "-            TokenTypes.LE,                // \"<=\"", "-            TokenTypes.LT,                // '<'", "-            TokenTypes.BXOR,              // '^'", "-            TokenTypes.BXOR_ASSIGN,       // \"^=\"", "-            TokenTypes.BOR,               // '|'", "-            TokenTypes.BOR_ASSIGN,        // \"|=\"", "-            TokenTypes.LOR,               // \"||\"", "-            TokenTypes.BAND,              // '&'", "-            TokenTypes.BAND_ASSIGN,       // \"&=\"", "-            TokenTypes.LAND,              // \"&&\"", "+            TokenTypes.ASSIGN,", "+            TokenTypes.BAND,", "+            TokenTypes.BAND_ASSIGN,", "+            TokenTypes.BOR,", "+            TokenTypes.BOR_ASSIGN,", "+            TokenTypes.BSR,", "+            TokenTypes.BSR_ASSIGN,", "+            TokenTypes.BXOR,", "+            TokenTypes.BXOR_ASSIGN,", "+            TokenTypes.COLON, // TODO: dont flag after \"case\"", "+            TokenTypes.DIV,", "+            TokenTypes.DIV_ASSIGN,", "+            TokenTypes.EQUAL,", "+            TokenTypes.GE,", "+            TokenTypes.GT,", "+            TokenTypes.LAND,", "+            TokenTypes.LCURLY,", "+            TokenTypes.LE,", "+            TokenTypes.LOR,", "+            TokenTypes.LT,", "+            TokenTypes.MINUS,", "+            TokenTypes.MINUS_ASSIGN,", "+            TokenTypes.MOD,", "+            TokenTypes.MOD_ASSIGN,", "+            TokenTypes.NOT_EQUAL,", "+            TokenTypes.PLUS,", "+            TokenTypes.PLUS_ASSIGN,", "+            TokenTypes.QUESTION,", "+            TokenTypes.RCURLY,", "+            TokenTypes.SL,", "+            TokenTypes.SL_ASSIGN,", "+            TokenTypes.SR,", "+            TokenTypes.SR_ASSIGN,", "+            TokenTypes.STAR,", "+            TokenTypes.STAR_ASSIGN,"]}]}
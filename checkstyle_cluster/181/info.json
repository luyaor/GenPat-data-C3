{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d3a2235923e4dc741c1e7a98734bb0c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bf5a430a6f9e099c3d54f3be47bf188", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testCustom() throws Exception", "signatureAfterChange": "     @Test     public void testCustom() throws Exception", "diff": ["-            \"4: Wrong lexicographical order for 'java.awt.Button.ABORT' import.\",", "-            \"7: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group.\",", "-            \"8: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group.\",", "-            \"9: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group.\",", "-            \"10: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group.\",", "-            \"11: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group.\",", "-            \"12: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group.\",", "-            \"13: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group.\",", "-            \"14: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group.\",", "-            \"15: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group.\",", "-            \"16: Import statement is in the wrong order. Should be in the 'STANDARD_JAVA_PACKAGE' group.\",", "+            \"4: \" + getCheckMessage(MSG_LEX, \"java.awt.Button.ABORT\"),", "+            \"7: \" + getCheckMessage(MSG_ORDER, \"STANDARD_JAVA_PACKAGE\"),", "+            \"8: \" + getCheckMessage(MSG_ORDER, \"STANDARD_JAVA_PACKAGE\"),", "+            \"9: \" + getCheckMessage(MSG_ORDER, \"STANDARD_JAVA_PACKAGE\"),", "+            \"10: \" + getCheckMessage(MSG_ORDER, \"STANDARD_JAVA_PACKAGE\"),", "+            \"11: \" + getCheckMessage(MSG_ORDER, \"STANDARD_JAVA_PACKAGE\"),", "+            \"12: \" + getCheckMessage(MSG_ORDER, \"STANDARD_JAVA_PACKAGE\"),", "+            \"13: \" + getCheckMessage(MSG_ORDER, \"STANDARD_JAVA_PACKAGE\"),", "+            \"14: \" + getCheckMessage(MSG_ORDER, \"STANDARD_JAVA_PACKAGE\"),", "+            \"15: \" + getCheckMessage(MSG_ORDER, \"STANDARD_JAVA_PACKAGE\"),", "+            \"16: \" + getCheckMessage(MSG_ORDER, \"STANDARD_JAVA_PACKAGE\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cf020555847201869b33a79c8b8299c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheckTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testDefault() throws Exception", "signatureAfterChange": "      @Test     public void testDefault() throws Exception", "diff": ["-            \"5:14: '.' is followed by whitespace.\",", "-            \"6:12: '.' is followed by whitespace.\",", "-            \"29:14: '-' is followed by whitespace.\",", "-            \"29:21: '+' is followed by whitespace.\",", "-            \"31:15: '++' is followed by whitespace.\",", "-            \"31:22: '--' is followed by whitespace.\",", "-            \"111:22: '!' is followed by whitespace.\",", "-            \"112:23: '~' is followed by whitespace.\",", "-            \"129:24: '.' is followed by whitespace.\",", "-            \"132:11: '.' is followed by whitespace.\",", "-            \"136:12: '.' is followed by whitespace.\",", "+            \"5:14: \" + getCheckMessage(MSG_KEY, \".\"),", "+            \"6:12: \" + getCheckMessage(MSG_KEY, \".\"),", "+            \"29:14: \" + getCheckMessage(MSG_KEY, \"-\"),", "+            \"29:21: \" + getCheckMessage(MSG_KEY, \"+\"),", "+            \"31:15: \" + getCheckMessage(MSG_KEY, \"++\"),", "+            \"31:22: \" + getCheckMessage(MSG_KEY, \"--\"),", "+            \"111:22: \" + getCheckMessage(MSG_KEY, \"!\"),", "+            \"112:23: \" + getCheckMessage(MSG_KEY, \"~\"),", "+            \"129:24: \" + getCheckMessage(MSG_KEY, \".\"),", "+            \"132:11: \" + getCheckMessage(MSG_KEY, \".\"),", "+            \"136:12: \" + getCheckMessage(MSG_KEY, \".\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40dafe419be1eccfeaa3b3174430055f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "commitBeforeChange": "cee4f351944dc6bad1c0b91eb8aaa118eed59fcc", "commitAfterChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testAndroidStyle() throws Exception", "signatureAfterChange": "      @Test     public void testAndroidStyle() throws Exception", "diff": ["-            \"28: 'extends' have incorrect indentation level 3, expected level should be 8.\",", "-            \"30: 'member def type' have incorrect indentation level 3, expected level should be 4.\",", "-            \"33: 'foo' have incorrect indentation level 8, expected level should be 12.\",", "-            \"36: 'int' have incorrect indentation level 8, expected level should be 12.\",", "-            \"39: 'true' have incorrect indentation level 13, expected level should be 16.\",", "-            \"42: '+' have incorrect indentation level 16, expected level should be 20.\",", "-            \"43: 'if' have incorrect indentation level 8, expected level should be 12.\",", "-            \"46: 'if rcurly' have incorrect indentation level 11, expected level should be 12.\",", "-            \"48: 'method def' child have incorrect indentation level 7, expected level should be 8.\",", "+            \"28: \" + getCheckMessage(MSG_ERROR, \"extends\", 3, 8),", "+            \"30: \" + getCheckMessage(MSG_ERROR, \"member def type\", 3, 4),", "+            \"33: \" + getCheckMessage(MSG_ERROR, \"foo\", 8, 12),", "+            \"36: \" + getCheckMessage(MSG_ERROR, \"int\", 8, 12),", "+            \"39: \" + getCheckMessage(MSG_ERROR, \"true\", 13, 16),", "+            \"42: \" + getCheckMessage(MSG_ERROR, \"+\", 16, 20),", "+            \"43: \" + getCheckMessage(MSG_ERROR, \"if\", 8, 12),", "+            \"46: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 11, 12),", "+            \"48: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 7, 8),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56ad7273a4509d8df6d40daececa07e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheckTest.java", "commitBeforeChange": "27149f3504a2f350b74f456a9bffbae76a460060", "commitAfterChange": "5ede09997c283b4c418f0f540848e006be04fa87", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefaultTokens() throws Exception", "signatureAfterChange": "     @Test     public void testDefaultTokens() throws Exception", "diff": ["-            \"23:26: Parameter s should be final.\",", "-            \"38:26: Parameter i should be final.\",", "-            \"43:26: Parameter s should be final.\",", "-            \"53:17: Parameter s should be final.\",", "-            \"69:17: Parameter s should be final.\",", "-            \"75:17: Parameter s should be final.\",", "-            \"90:45: Parameter e should be final.\",", "-            \"93:36: Parameter e should be final.\",", "-            \"110:18: Parameter aParam should be final.\",", "-            \"113:18: Parameter args should be final.\",", "-            \"116:18: Parameter args should be final.\",", "+            \"23:26: \" + getCheckMessage(MSG_KEY, \"s\"),", "+            \"38:26: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"43:26: \" + getCheckMessage(MSG_KEY, \"s\"),", "+            \"53:17: \" + getCheckMessage(MSG_KEY, \"s\"),", "+            \"69:17: \" + getCheckMessage(MSG_KEY, \"s\"),", "+            \"75:17: \" + getCheckMessage(MSG_KEY, \"s\"),", "+            \"90:45: \" + getCheckMessage(MSG_KEY, \"e\"),", "+            \"93:36: \" + getCheckMessage(MSG_KEY, \"e\"),", "+            \"110:18: \" + getCheckMessage(MSG_KEY, \"aParam\"),", "+            \"113:18: \" + getCheckMessage(MSG_KEY, \"args\"),", "+            \"116:18: \" + getCheckMessage(MSG_KEY, \"args\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f79bc5338f35c3ec28f55c4047fabe8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testDefault2() throws Exception", "signatureAfterChange": "      @Test     public void testDefault2() throws Exception", "diff": ["-            \"12:1: '{' should be on the previous line.\",", "-            \"17:5: '{' should be on the previous line.\",", "-            \"24:5: '{' should be on the previous line.\",", "-            \"31:5: '{' should be on the previous line.\",", "-            \"39:1: '{' should be on the previous line.\",", "-            \"41:5: '{' should be on the previous line.\",", "-            \"46:9: '{' should be on the previous line.\",", "-            \"53:9: '{' should be on the previous line.\",", "-            \"69:5: '{' should be on the previous line.\",", "-            \"77:5: '{' should be on the previous line.\",", "-            \"84:5: '{' should be on the previous line.\",", "+            \"12:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"17:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"24:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"31:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"39:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"41:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"46:9: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"53:9: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"69:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"77:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"84:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a97f6d7b5d9f7fb78eaf289d44978fd6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testNLOW() throws Exception", "signatureAfterChange": "      @Test     public void testNLOW() throws Exception", "diff": ["-            \"8:1: '{' should be on the previous line.\",", "-            \"12:5: '{' should be on the previous line.\",", "-            \"21:5: '{' should be on the previous line.\",", "-            \"30:5: '{' should be on the previous line.\",", "-            \"39:5: '{' should be on the previous line.\",", "-            \"49:14: '{' should be on a new line.\",", "-            \"53:14: '{' should be on a new line.\",", "-            \"58:18: '{' should be on a new line.\",", "-            \"62:18: '{' should be on a new line.\",", "-            \"67:12: '{' should be on a new line.\",", "-            \"72:18: '{' should be on a new line.\",", "+            \"8:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"12:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"21:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"30:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"39:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"49:14: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"53:14: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"58:18: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"62:18: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"67:12: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"72:18: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),"]}]}
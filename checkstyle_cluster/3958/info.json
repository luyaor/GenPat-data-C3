{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c15672222258a256f9db61a02f522b84", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01557ff816f8ec1ac01a752909a863ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "2ed00e0af3ede8d8a276bbde08c5492a42df842d", "commitAfterChange": "e81ca8290b4efd42c3454ffa0159b739f958ea48", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void visitLiteralFor(DetailAST ast)", "signatureAfterChange": "     private void visitLiteralFor(DetailAST ast)", "diff": ["-        DetailAST parenAst = ast.findFirstToken(TokenTypes.LPAREN);", "-        if (!isPrecedingEmptyForInit(parenAst)) {", "-            processLeft(parenAst);", "+        final DetailAST lparen = ast.findFirstToken(TokenTypes.LPAREN);", "+        if (!isPrecedingEmptyForInit(lparen)) {", "+            processLeft(lparen);", "-        parenAst = ast.findFirstToken(TokenTypes.RPAREN);", "-        if (!isFollowsEmptyForIterator(parenAst)) {", "-            processRight(parenAst);", "+        final DetailAST rparen = ast.findFirstToken(TokenTypes.RPAREN);", "+        if (!isFollowsEmptyForIterator(rparen)) {", "+            processRight(rparen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84402169c3e6e911cec4dea2b6120b0f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "2ed00e0af3ede8d8a276bbde08c5492a42df842d", "commitAfterChange": "e81ca8290b4efd42c3454ffa0159b739f958ea48", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static String getTagId(String[] javadocText, Point tagStart)", "signatureAfterChange": "     private static String getTagId(String[] javadocText, Point tagStart)", "diff": ["-        column = 0;", "+        int position = 0;", "-        while (column < text.length()", "-            && (Character.isJavaIdentifierStart(text.charAt(column))", "-                || Character.isJavaIdentifierPart(text.charAt(column)))) {", "-            column++;", "+        while (position < text.length()", "+            && (Character.isJavaIdentifierStart(text.charAt(position))", "+                || Character.isJavaIdentifierPart(text.charAt(position)))) {", "+            position++;", "-        return text.substring(0, column);", "+        return text.substring(0, position);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8220d6a47c7808b8d34fc12ce09f0902", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a62468d7a421a4ffa22a9cc16bf25e75", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private Scope calculateScope(final DetailAST aAST)", "signatureAfterChange": "     private Scope calculateScope(final DetailAST ast)", "diff": ["-    private Scope calculateScope(final DetailAST aAST)", "+    private Scope calculateScope(final DetailAST ast)", "-        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        return ScopeUtils.inInterfaceOrAnnotationBlock(aAST) ? Scope.PUBLIC", "+        return ScopeUtils.inInterfaceOrAnnotationBlock(ast) ? Scope.PUBLIC"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5d545150ceaf943e73acb68a8bb9a75", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static FullIdent createFullType(DetailAST aTypeAST)", "signatureAfterChange": "     public static FullIdent createFullType(DetailAST typeAST)", "diff": ["-    public static FullIdent createFullType(DetailAST aTypeAST)", "+    public static FullIdent createFullType(DetailAST typeAST)", "-            aTypeAST.findFirstToken(TokenTypes.ARRAY_DECLARATOR);", "+            typeAST.findFirstToken(TokenTypes.ARRAY_DECLARATOR);", "-        return createFullTypeNoArrays(arrayDeclAST == null ? aTypeAST", "+        return createFullTypeNoArrays(arrayDeclAST == null ? typeAST"]}]}
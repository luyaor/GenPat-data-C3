{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f37cad5884b8202adb72bef48fba07f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b9e73114ba3985db475b16ea0f0040a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void processEnd(DetailAST aAST)", "signatureAfterChange": "     private void processEnd(DetailAST ast)", "diff": ["-    private void processEnd(DetailAST aAST)", "+    private void processEnd(DetailAST ast)", "-        final String line = getLine(aAST.getLineNo() - 1);", "-        final int before = aAST.getColumnNo() - 1;", "-        final int after = aAST.getColumnNo() + 1;", "+        final String line = getLine(ast.getLineNo() - 1);", "+        final int before = ast.getColumnNo() - 1;", "+        final int after = ast.getColumnNo() + 1;", "-            log(aAST.getLineNo(), before, \"ws.preceded\", \">\");", "+            log(ast.getLineNo(), before, \"ws.preceded\", \">\");", "-            if (1 == mDepth) {", "+            if (1 == depth) {", "-                if ((aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)", "-                    && (aAST.getParent().getParent().getType()", "+                if ((ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)", "+                    && (ast.getParent().getParent().getType()", "-                    && (aAST.getParent().getParent().getParent().getType()", "+                    && (ast.getParent().getParent().getParent().getType()", "-                        log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                        log(ast.getLineNo(), after, \"ws.followed\", \">\");", "-                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \">\");", "+                    log(ast.getLineNo(), after, \"ws.illegalFollow\", \">\");", "-                //   class IntEnumValueType<E extends Enum<E> & IntEnum>", "+                //   class IntEnuvalueType<E extends Enum<E> & IntEnum>", "-                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"&\");", "+                        log(ast.getLineNo(), after, \"ws.notPreceded\", \"&\");", "-                        log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                        log(ast.getLineNo(), after, \"ws.followed\", \">\");", "-                    log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                    log(ast.getLineNo(), after, \"ws.followed\", \">\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d68c654318c238bda86db4425f0c440", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public final void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public final void leaveToken(DetailAST ast)", "diff": ["-    public final void leaveToken(DetailAST aAST)", "+    public final void leaveToken(DetailAST ast)", "-        if ((aAST.getType() == TokenTypes.CLASS_DEF)", "-            || (aAST.getType() == TokenTypes.ENUM_DEF))", "+        if ((ast.getType() == TokenTypes.CLASS_DEF)", "+            || (ast.getType() == TokenTypes.ENUM_DEF))", "-            int dotIdx = mCurrentClass.lastIndexOf(\"$\");", "+            int dotIdx = currentClass.lastIndexOf(\"$\");", "-                dotIdx = mCurrentClass.lastIndexOf(\".\");", "+                dotIdx = currentClass.lastIndexOf(\".\");", "-                mCurrentClass = \"\";", "+                currentClass = \"\";", "-                mCurrentClass = mCurrentClass.substring(0, dotIdx);", "+                currentClass = currentClass.substring(0, dotIdx);", "-            mTypeParams.pop();", "+            typeParams.pop();", "-        else if (aAST.getType() == TokenTypes.METHOD_DEF) {", "-            mTypeParams.pop();", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            typeParams.pop();", "-        else if ((aAST.getType() != TokenTypes.PACKAGE_DEF)", "-                 && (aAST.getType() != TokenTypes.IMPORT))", "+        else if ((ast.getType() != TokenTypes.PACKAGE_DEF)", "+                 && (ast.getType() != TokenTypes.IMPORT))", "-            leaveAST(aAST);", "+            leaveAST(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0161c98521b74f9ff70dc3421f458d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "6e96026ec6d95fc5eadd3044cab91c24c73c8e0c", "commitAfterChange": "e00c478dd61d9d883e41b500b780ab217582c2e7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        DetailAST theAst = aAST;", "-        if (aAST.getType() != TokenTypes.RPAREN) {", "-            if ((aAST.getType() == TokenTypes.CTOR_CALL)", "-                || (aAST.getType() == TokenTypes.SUPER_CTOR_CALL))", "+        if (theAst.getType() != TokenTypes.RPAREN) {", "+            if ((theAst.getType() == TokenTypes.CTOR_CALL)", "+                || (theAst.getType() == TokenTypes.SUPER_CTOR_CALL))", "-                aAST = aAST.getFirstChild();", "+                theAst = theAst.getFirstChild();", "-            if (!isPreceedsEmptyForInit(aAST)) {", "-                processLeft(aAST);", "+            if (!isPreceedsEmptyForInit(theAst)) {", "+                processLeft(theAst);", "-        else if ((aAST.getParent() == null)", "-                 || (aAST.getParent().getType() != TokenTypes.TYPECAST)", "-                 || (aAST.getParent().findFirstToken(TokenTypes.RPAREN)", "-                     != aAST))", "+        else if ((theAst.getParent() == null)", "+                 || (theAst.getParent().getType() != TokenTypes.TYPECAST)", "+                 || (theAst.getParent().findFirstToken(TokenTypes.RPAREN)", "+                     != theAst))", "-            if (!isFollowsEmptyForIterator(aAST)) {", "-                processRight(aAST);", "+            if (!isFollowsEmptyForIterator(theAst)) {", "+                processRight(theAst);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e20e55d303f393f758532c721738f310", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void collectDeclarations(Deque<LexicalFrame> aFrameStack,         DetailAST aAST)", "signatureAfterChange": "     private void collectDeclarations(Deque<LexicalFrame> frameStack,         DetailAST ast)", "diff": ["-    private void collectDeclarations(Deque<LexicalFrame> aFrameStack,", "-        DetailAST aAST)", "+    private void collectDeclarations(Deque<LexicalFrame> frameStack,", "+        DetailAST ast)", "-        final LexicalFrame frame = aFrameStack.peek();", "-        switch (aAST.getType()) {", "+        final LexicalFrame frame = frameStack.peek();", "+        switch (ast.getType()) {", "-                    aAST.findFirstToken(TokenTypes.IDENT).getText();", "+                    ast.findFirstToken(TokenTypes.IDENT).getText();", "-                    aAST.findFirstToken(TokenTypes.MODIFIERS);", "-                if (ScopeUtils.inInterfaceBlock(aAST)", "+                    ast.findFirstToken(TokenTypes.MODIFIERS);", "+                if (ScopeUtils.inInterfaceBlock(ast)", "-            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-            aFrameStack.addFirst(new ClassFrame(frame));", "+            frameStack.addFirst(new ClassFrame(frame));", "-            aFrameStack.addFirst(new BlockFrame(frame));", "+            frameStack.addFirst(new BlockFrame(frame));", "-            final String name = aAST.findFirstToken(TokenTypes.IDENT).getText();", "+            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "-                    aAST.findFirstToken(TokenTypes.MODIFIERS);", "+                    ast.findFirstToken(TokenTypes.MODIFIERS);", "-            aFrameStack.addFirst(new MethodFrame(frame));", "+            frameStack.addFirst(new MethodFrame(frame));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec23a01b8e6f33f5a5249fa76e768fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        final int type = aAST.getType();", "-        final DetailAST parent = aAST.getParent();", "+        final int type = ast.getType();", "+        final DetailAST parent = ast.getParent();", "-            // If 'mParentToSkip' == 'aAST', then we've already logged a", "+            // If 'parentToSkip' == 'ast', then we've already logged a", "-            if ((mParentToSkip != aAST) && exprSurrounded(aAST)) {", "-                if (mAssignDepth >= 1) {", "-                    log(aAST, \"unnecessary.paren.assign\");", "+            if ((parentToSkip != ast) && exprSurrounded(ast)) {", "+                if (assignDepth >= 1) {", "+                    log(ast, \"unnecessary.paren.assign\");", "-                else if (aAST.getParent().getType()", "+                else if (ast.getParent().getType()", "-                    log(aAST, \"unnecessary.paren.return\");", "+                    log(ast, \"unnecessary.paren.return\");", "-                    log(aAST, \"unnecessary.paren.expr\");", "+                    log(ast, \"unnecessary.paren.expr\");", "-            mParentToSkip = null;", "+            parentToSkip = null;", "-            mAssignDepth--;", "+            assignDepth--;", "-        super.leaveToken(aAST);", "+        super.leaveToken(ast);"]}]}
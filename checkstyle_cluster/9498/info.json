{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9d60fd7286c12122db59ed85f0ba3be", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "396314e74a1f494657202c765e25108c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java", "commitBeforeChange": "28c8ed692f83ff95e0814bd101177c4bb7794806", "commitAfterChange": "b5c738e6d0118111481daee0afd93b2a2d7d916a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void processIdent(DetailAST aAST)", "signatureAfterChange": "     private void processIdent(DetailAST aAST)", "diff": ["-        // TODO: should be a lot smarter in selection. Currently use", "-        // same algorithm as real checkstyle", "-        if (parent.getType() == TokenTypes.DOT) {", "-            if (aAST.getNextSibling() != null) {", "+        final int parentType = parent.getType();", "+        if (parentType != TokenTypes.DOT", "+            && parentType != TokenTypes.METHOD_DEF", "+            || parentType == TokenTypes.DOT && aAST.getNextSibling() != null)", "+        {", "+            if (!isDeclared(aAST.getText())) {", "-        }", "-        else {", "-            mReferenced.add(aAST.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de1335258f5c2f0d95cf58a9d3048514", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantModifierCheck.java", "commitBeforeChange": "a9ad125a4c6e2d0edc7a7a460ba3cd249b0a0817", "commitAfterChange": "9a05522373905e39aa764009d1c543092c14f691", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                    String modifier = ast.getText();", "-                    if (\"public\".equals(modifier)", "-                        || \"abstract\".equals(modifier))", "+", "+                    // javac does not allow final in interface methods", "+                    // hence no need to check that this is not a method", "+", "+                    final int type = ast.getType();", "+                    if (type == TokenTypes.LITERAL_PUBLIC", "+                            || type == TokenTypes.ABSTRACT", "+                            || type == TokenTypes.FINAL)", "-                        log(ast.getLineNo(),", "-                            ast.getColumnNo(),", "-                            \"redundantModifier\",", "-                            new String[] {modifier});", "+                            String modifier = ast.getText();", "+                            log(ast.getLineNo(),", "+                                    ast.getColumnNo(),", "+                                    \"redundantModifier\",", "+                                    new String[] {modifier});", "+                            break;", "+"]}]}
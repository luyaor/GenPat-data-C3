{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d6a8ef2cc51e0ccfd800e9088940ffa", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eaee6c6d29f440712e4e4b0a052acbc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/AvoidStarImportTest.java", "commitBeforeChange": "e4434ebe00405dca6bc2009666d6cfea7b15cfd5", "commitAfterChange": "0fdfc2f36086a108407fc7d51edc5b8c934b658a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testIt()         throws Exception", "signatureAfterChange": "      public void testIt()         throws Exception", "diff": ["-        assertEquals(msgs.getMessages()[0].getLineNo(), 7);", "-        assertEquals(msgs.getMessages()[1].getLineNo(), 9);", "-        assertEquals(msgs.getMessages()[2].getLineNo(), 10);", "-        assertEquals(", "-          \"Avoid using the '.*' form of import.\",", "-          msgs.getMessages()[0].getMessage());", "-        assertEquals(", "-          \"Avoid using the '.*' form of import.\",", "-          msgs.getMessages()[1].getMessage());", "-        assertEquals(", "-          \"Avoid using the '.*' form of import.\",", "-          msgs.getMessages()[2].getMessage());", "+        verifyMessage(msgs, 0, 7, 1, \"Avoid using the '.*' form of import.\");", "+        verifyMessage(msgs, 1, 9, 1, \"Avoid using the '.*' form of import.\");", "+        verifyMessage(msgs, 2, 10, 1, \"Avoid using the '.*' form of import.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e290408b8371418cc9bfb8aa2c8470fa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java", "commitBeforeChange": "1ef7197d95faaa734cf4a506bebc8229bcd4d1f1", "commitAfterChange": "e68f47ce99313c7dafade4ac4a55fccf12c09d5e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @Test     public void testGetTokenFieldValue() throws NoSuchMethodException", "signatureAfterChange": "      @Test     public void testGetIntFromInaccessibleField() throws NoSuchFieldException", "diff": ["+", "+    @Test", "+    public void testGetIntFromInaccessibleField() throws NoSuchFieldException {", "+        Field field = Integer.class.getDeclaredField(\"value\");", "+", "+        try {", "+            Utils.getIntFromField(field, 0);", "+        }", "+        catch (IllegalStateException expected) {", "+            // expected", "+        }", "+    }", "-", "-    @Test", "-    public void testGetTokenFieldValue() throws NoSuchMethodException {", "-        Integer id = 0;", "-        try {", "-            // overwrite static field with new value", "-            Method method = Utils.class.getDeclaredMethod(\"getTokenFieldValue\",", "-                    Field.class, String.class);", "-            method.setAccessible(true);", "-            method.invoke(null, Field.class.getDeclaredField(\"modifiers\"), \"smth_strange\");", "-", "-            fail();", "-        }", "-        catch (InvocationTargetException expected) {", "-            // in method we throw IllegalStateException,", "-            // but JDK wrap that in InvocationTargetException", "-            assertEquals(IllegalStateException.class, expected.getCause().getClass());", "-            assertEquals(\"Failed to instantiate collection of Java tokens\",", "-                    expected.getCause().getMessage());", "-        }", "-        catch (Exception e) {", "-            fail();", "-        }", "-    }"]}]}
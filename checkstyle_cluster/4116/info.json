{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3408be4f554ed2d6dc87dbf2d88ddcf4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1965e54852c9c169e1323499ce9f4b69", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "4a859be12ad9dcd56e5689407e0cfcbdbb0003ea", "commitAfterChange": "e2ec464f27b2e30ee66802cb9f8f1899b2dc4a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private int process(String aFileName)", "signatureAfterChange": "     private int process(String aFileName)", "diff": ["-            VerifierSingleton.getInstance().clearMessages();", "-            VerifierSingleton.getInstance().setLines(lines);", "-            final Reader sar = new StringArrayReader(lines);", "-            final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);", "-            jl.setFilename(aFileName);", "-            final GeneratedJavaRecognizer jr = new GeneratedJavaRecognizer(jl);", "-            jr.setFilename(aFileName);", "-            jr.setASTNodeClass(MyCommonAST.class.getName());", "-            jr.compilationUnit();", "+            try {", "+                VerifierSingleton.getInstance().clearMessages();", "+                VerifierSingleton.getInstance().setLines(lines);", "+                final Reader sar = new StringArrayReader(lines);", "+                final GeneratedJava14Lexer jl = new GeneratedJava14Lexer(sar);", "+                jl.setFilename(aFileName);", "+                final GeneratedJava14Recognizer jr =", "+                    new SilentJava14Recognizer(jl);", "+                jr.setFilename(aFileName);", "+                jr.setASTNodeClass(MyCommonAST.class.getName());", "+                jr.compilationUnit();", "+            }", "+            catch (RecognitionException re) {", "+", "+                // Parsing might have failed because the checked", "+                // filecontains \"assert\" statement. Retry with a", "+                // grammar that treats \"assert\" as an identifier", "+                // and not as a keyword", "+", "+                // Arghh - the pain - duplicate code!", "+", "+                VerifierSingleton.getInstance().clearMessages();", "+                VerifierSingleton.getInstance().setLines(lines);", "+                final Reader sar = new StringArrayReader(lines);", "+                final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);", "+                jl.setFilename(aFileName);", "+                final GeneratedJavaRecognizer jr =", "+                    new GeneratedJavaRecognizer(jl);", "+                jr.setFilename(aFileName);", "+                jr.setASTNodeClass(MyCommonAST.class.getName());", "+                jr.compilationUnit();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da4ca87b0ddfe298203f37dea268b3a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/examples/checks/com/mycompany/checks/LimitImplementationFiles.java", "commitBeforeChange": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "commitAfterChange": "c8a0d72210badeb7f1d43e873328bbb2a9d36e48", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void process(File[] files)", "signatureAfterChange": "     public void process(File[] files)", "diff": ["-            // Build the error list. Here we fire only one error", "-            LocalizedMessage[] errors = new LocalizedMessage[1];", "-", "-            // get the resource bundle to use for the message", "-            // will return \"com.mycompany.checks.messages\"", "-            final String bundle = getMessageBundle();", "-", "-            // create the message arguments", "-            Object[] msgArgs = new Object[]{new Integer(max)};", "-", "-            // create the actual message", "-            errors[0] = new LocalizedMessage(", "-                0, bundle, \"max.files.exceeded\", msgArgs);", "-", "-            // fire the errors to the AuditListeners", "+            // figure out the file that contains the error", "-            getMessageDispatcher().fireErrors(path, errors);", "+", "+            // message collector is used to collect error messages,", "+            // needs to be reset before starting to collect error messages", "+            // for a file.", "+            getMessageCollector().reset();", "+", "+            // message dispatcher is used to fire AuditEvents", "+            MessageDispatcher dispatcher = getMessageDispatcher();", "+", "+            // signal start of file to AuditListeners", "+            dispatcher.fireFileStarted(path);", "+", "+            // log the message", "+            log(0, \"max.files.exceeded\", new Integer(max));", "+", "+            // you can call log() multiple times to flag multiple", "+            // errors in the same file", "+", "+            // fire the errors for this file to the AuditListeners", "+            dispatcher.fireErrors(path, getMessageCollector().getMessages());", "+", "+            // signal end of file to AuditListeners", "+            dispatcher.fireFileFinished(path);"]}]}
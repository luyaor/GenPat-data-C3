{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d2fe542f10a0d073057841eb00e75d9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8521d16f7fee498742cc2c08fda2721e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "bd4ec9a98edaced73f14c5422f64c39fad3ce596", "commitAfterChange": "fc17c983239b6e6a6d3e41f53cb134bd22488db1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (!inIgnoreList(aAST) && !isConstantDefinition(aAST)) {", "-            String text = aAST.getText();", "-            final DetailAST parent = aAST.getParent();", "-            DetailAST reportAST = aAST;", "-            if (parent.getType() == TokenTypes.UNARY_MINUS) {", "-                reportAST = parent;", "-                text = \"-\" + text;", "-            }", "-            else if (parent.getType() == TokenTypes.UNARY_PLUS) {", "-                reportAST = parent;", "-                text = \"+\" + text;", "-            }", "-            log(reportAST.getLineNo(),", "-                reportAST.getColumnNo(),", "-                \"magic.number\",", "-                text);", "+        if (inIgnoreList(aAST)) {", "+        \treturn;", "+        ", "+        DetailAST constantDefAST = findContainingConstantDef(aAST);", "+        ", "+    \tif (constantDefAST == null) {", "+            reportMagicNumber(aAST);", "+        }", "+    \telse {", "+    \t\tDetailAST ast = aAST.getParent();", "+    \t\twhile (ast != constantDefAST) {", "+    \t\t\tint type = ast.getType();", "+    \t\t\tif (Arrays.binarySearch(ALLOWED_PATH_TOKENTYPES, type) < 0) {", "+    \t\t\t\treportMagicNumber(aAST);", "+    \t\t\t\tbreak;", "+    \t\t\t}", "+    \t\t\t\t", "+    \t\t\tast = ast.getParent();", "+    \t\t}", "+    \t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eb2f29045044bf9c567b8789c9756fc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ConstantNameCheck.java", "commitBeforeChange": "59c9c64381dd92bc877f5a834dae7856603d5546", "commitAfterChange": "2a8aba9a54d2112b142a1b9e0c4e762e780155c1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     protected final boolean mustCheckName(DetailAST aAST)", "diff": ["-    /** @see com.puppycrawl.tools.checkstyle.api.Check */", "-    public void visitToken(DetailAST aAST)", "+    /** @see com.puppycrawl.tools.checkstyle.checks.AbstractNameCheck */", "+    protected final boolean mustCheckName(DetailAST aAST)", "-        // TODO: Need to consider the case of being in an interface! In that", "-        // case, does not matter if \"static\" and \"final\" keywords are there.", "-        ", "-        //constant?", "-        final DetailAST modifiers =", "-                    aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        if ((modifiers != null)", "-            && modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "-            && modifiers.branchContains(TokenTypes.FINAL))", "-        {", "-            //name check", "-            final DetailAST name =", "-                aAST.findFirstToken(TokenTypes.IDENT);", "+        boolean retVal = false;", "+        DetailAST modifiersAST = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final boolean isStatic = modifiersAST != null", "+            && modifiersAST.branchContains(TokenTypes.LITERAL_STATIC);", "+        final boolean isFinal = modifiersAST != null", "+            && modifiersAST.branchContains(TokenTypes.FINAL);", "+", "+        if ((isStatic  && isFinal) || ScopeUtils.inInterfaceBlock(aAST)) {", "-            if (!\"serialVersionUID\".equals(name.getText())", "-                && !getRegexp().match(name.getText()))", "-            {", "-                log(name.getLineNo(),", "-                    name.getColumnNo(),", "-                    \"name.invalidPattern\",", "-                    name.getText(),", "-                    getFormat());", "+            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+            if ((nameAST != null)", "+                    && !(\"serialVersionUID\".equals(nameAST.getText()))) {", "+                retVal = true;", "+", "+        return retVal;"]}]}
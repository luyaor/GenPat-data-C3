{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e806ecc1068dbb524c6e59d8694294b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34292461abfe7080bc148ff6e475b408", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void setLegalAbstractClassNames(String[] aClassNames)", "signatureAfterChange": "     public void setLegalAbstractClassNames(String[] classNames)", "diff": ["-    public void setLegalAbstractClassNames(String[] aClassNames)", "+    public void setLegalAbstractClassNames(String[] classNames)", "-        mLegalAbstractClassNames.clear();", "-        for (String element : aClassNames) {", "-            mLegalAbstractClassNames.add(element);", "+        legalAbstractClassNames.clear();", "+        for (String element : classNames) {", "+            legalAbstractClassNames.add(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d933039d5a426e4a42e0917e7e60333f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setExcludes(String[] aExcludes)", "signatureAfterChange": "     public void setExcludes(String[] excludesParam)", "diff": ["-    public void setExcludes(String[] aExcludes)", "+    public void setExcludes(String[] excludesParam)", "-        mExcludes.clear();", "-        for (final String exclude : aExcludes) {", "-            mExcludes.add(exclude.endsWith(\".*\") ? exclude : exclude + \".*\");", "+        excludes.clear();", "+        for (final String exclude : excludesParam) {", "+            excludes.add(exclude.endsWith(\".*\") ? exclude : exclude + \".*\");"]}]}
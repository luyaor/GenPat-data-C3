{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c367b54f9c9f9f17f66cee72ed75139a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ca57fd963f92a415bc4e301085b0260", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "59aa66c3cc43db0a7cd8bb0ea3a39b6f4339fe88", "commitAfterChange": "a24df47cafeab03fd65cf72b460aad3d2fafce3d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void processRec(DetailAST aAST)", "signatureAfterChange": "     private static DetailAST appendHiddenCommentNodes(DetailAST aRoot)", "diff": ["-    private void processRec(DetailAST aAST)", "-        if (aAST == null) {", "-            return;", "-        notifyVisit(aAST);", "-", "-        final DetailAST child = aAST.getFirstChild();", "-        if (child != null) {", "-            processRec(child);", "-        }", "-", "-        notifyLeave(aAST);", "-", "-        final DetailAST sibling = aAST.getNextSibling();", "-        if (sibling != null) {", "-            processRec(sibling);", "-        }", "-    }", "+     */", "+    private static DetailAST appendHiddenCommentNodes(DetailAST aRoot)", "+    {", "+        DetailAST result = aRoot;", "+        DetailAST curNode = aRoot;", "+        DetailAST lastNode = aRoot;", "+", "+        while (curNode != null) {", "+            if (isPositionGreater(curNode, lastNode)) {", "+                lastNode = curNode;", "+            }", "+", "+            CommonHiddenStreamToken tokenBefore = curNode.getHiddenBefore();", "+            DetailAST currentSibling = curNode;", "+            while (tokenBefore != null) { // threat multiple comments", "+                final DetailAST newCommentNode =", "+                         createCommentAstFromToken(tokenBefore);", "+", "+                currentSibling.addPreviousSibling(newCommentNode);", "+", "+                if (currentSibling == result) {", "+                    result = newCommentNode;", "+                }", "+", "+                currentSibling = newCommentNode;", "+                tokenBefore = tokenBefore.getHiddenBefore();", "+            }", "+", "+            DetailAST toVisit = curNode.getFirstChild();", "+            while ((curNode != null) && (toVisit == null)) {", "+                toVisit = curNode.getNextSibling();", "+                if (toVisit == null) {", "+                    curNode = curNode.getParent();", "+                }", "+            }", "+            curNode = toVisit;", "+        }", "+        if (lastNode != null) {", "+            CommonHiddenStreamToken tokenAfter = lastNode.getHiddenAfter();", "+            DetailAST currentSibling = lastNode;", "+            while (tokenAfter != null) {", "+                final DetailAST newCommentNode =", "+                        createCommentAstFromToken(tokenAfter);", "+", "+                currentSibling.addNextSibling(newCommentNode);", "+", "+                currentSibling = newCommentNode;", "+                tokenAfter = tokenAfter.getHiddenAfter();", "+            }", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0955b1cc3f239d367eec15440a482c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "cc822a77b4846b180eef883288627aff2d85384d", "commitAfterChange": "a03dc8c1c9b1a7308be5e92324efab3413f6a771", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "         public void addEqualsNode(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-         */", "-        public void addEqualsNode(DetailAST aAST)", "-        {", "-            if (!mHasEqualsObject) {", "-                mEqualsNodes.add(aAST);", "-            }", "-        }", "+        mEqualsMethods.clear();", "+        mHasEqualsObject = false;", "+", "+        // examine method definitions for equals methods", "+        final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);", "+        DetailAST child = (DetailAST) objBlock.getFirstChild();", "+        while (child != null) {", "+            if (child.getType() == TokenTypes.METHOD_DEF) {", "+                if (isEqualsMethod(child)) {", "+                    if (hasObjectParameter(child)) {", "+                        mHasEqualsObject = true;", "+                    }", "+                    else {", "+                        mEqualsMethods.add(child);", "+                    }", "+            child = (DetailAST) child.getNextSibling();", "+        // report equals method definitions", "+        if (!mHasEqualsObject) {", "+            final Iterator it = mEqualsMethods.iterator();", "+            while (it.hasNext()) {", "+                final DetailAST equalsAST = (DetailAST) it.next();", "+                final DetailAST nameNode =", "+                    equalsAST.findFirstToken(TokenTypes.IDENT);", "+                log(", "+                    nameNode.getLineNo(),", "+                    nameNode.getColumnNo(),", "+                    \"covariant.equals\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6e262d9aebf6e29de575debfd7fb89c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java", "commitBeforeChange": "79404974eff1458f4243f8acd6a08b6a8b869342", "commitAfterChange": "fe9057366308642868c25d427c3ee94411b37170", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private ModuleFactory getModuleFactory()", "signatureAfterChange": "     public static Set<String> getPackageNames(ClassLoader aClassLoader)         throws CheckstyleException", "diff": ["-     */", "-    private ModuleFactory getModuleFactory()", "-    {", "-        return mModuleFactory;", "-    }", "+    public static Set<String> getPackageNames(ClassLoader aClassLoader)", "+        Enumeration<URL> packageFiles = null;", "+        try {", "+            packageFiles = aClassLoader.getResources(CHECKSTYLE_PACKAGES);", "+        }", "+        catch (IOException e) {", "+            throw new CheckstyleException(", "+                    \"unable to get package file resources\", e);", "+        }", "+", "+        //create the loader outside the loop to prevent PackageObjectFactory", "+        //being created anew for each file", "+        final PackageNamesLoader namesLoader = newPackageNamesLoader();", "+", "+        while ((null != packageFiles) && packageFiles.hasMoreElements()) {", "+            final URL aPackageFile = packageFiles.nextElement();", "+            InputStream stream = null;", "+", "+            try {", "+                stream = new BufferedInputStream(aPackageFile.openStream());", "+                final InputSource source = new InputSource(stream);", "+                loadPackageNamesSource(source, \"default package names\",", "+                    namesLoader);", "+            }", "+            catch (IOException e) {", "+                throw new CheckstyleException(", "+                        \"unable to open \" + aPackageFile, e);", "+            }", "+            finally {", "+                if (stream != null) {", "+                    try {", "+                        stream.close();", "+                    }", "+                    catch (IOException e) {", "+                        throw new CheckstyleException(", "+                                \"error closing stream\", e);", "+                    }", "+                }", "+            }", "+        }", "+        return namesLoader.getPackageNames();"]}]}
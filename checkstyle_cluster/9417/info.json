{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5802cf1b57a1791a6737a7a6fbecc016", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8493d9db35627033d098f0ef10b636c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "1c2c822688b560351d016f29946fd6697f3fa9b8", "commitAfterChange": "9c3b17b9db6c0884d4d456b4d6219abc03a453d4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            case TokenTypes.SLIST:", "-", "+            case TokenTypes.SLIST:", "+                if (ast.getParent().getType() != TokenTypes.CASE_GROUP", "+                    || ast.getParent().getParent().findFirstToken(TokenTypes.CASE_GROUP)", "+                    == ast.getParent()) {", "+                    scopeStack.push(new ScopeData());", "+                }", "+                break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6d92977c1b7466e7e4d8610544efac", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "1c2c822688b560351d016f29946fd6697f3fa9b8", "commitAfterChange": "9c3b17b9db6c0884d4d456b4d6219abc03a453d4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["+        Map<String, DetailAST> scope = null;", "-            case TokenTypes.SLIST:", "-                final Map<String, DetailAST> scope = scopeStack.pop().scope;", "-                for (DetailAST node : scope.values()) {", "-                    log(node.getLineNo(), node.getColumnNo(), MSG_KEY, node", "-                        .getText());", "+                scope = scopeStack.pop().scope;", "+                break;", "+            case TokenTypes.SLIST:", "+                if (ast.getParent().getType() != TokenTypes.CASE_GROUP", "+                    || findLastToken(ast.getParent().getParent(), TokenTypes.CASE_GROUP,", "+                        TokenTypes.SLIST) == ast.getParent()) {", "+                    scope = scopeStack.pop().scope;", "+        if (scope != null) {", "+            for (DetailAST node : scope.values()) {", "+                log(node.getLineNo(), node.getColumnNo(), MSG_KEY, node.getText());", "+            }", "+        }", "+    }"]}]}
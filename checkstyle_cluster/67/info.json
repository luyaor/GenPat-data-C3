{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d5190ea20db62eb8fb2f7a688511e273", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56c1086ef228927b5b214e9515eda8d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "b9f232ffe08853fbfd0239d53d683d4fe5c6b817", "commitAfterChange": "1bd30555eac039d0486dffb3fc43b7a34117909b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName)", "signatureAfterChange": "     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName)", "diff": ["-                (mods.contains(\"static\") && mods.contains(\"final\"))", "-                || (isPackageAllowed() && \"package\".equals(variableScope))", "-                || (isProtectedAllowed() && \"protected\".equals(variableScope))", "-                || (\"public\".equals(variableScope)", "+                mods.contains(\"static\") && mods.contains(\"final\")", "+                || isPackageAllowed() && \"package\".equals(variableScope)", "+                || isProtectedAllowed() && \"protected\".equals(variableScope)", "+                || \"public\".equals(variableScope)", "-                   || (allowPublicImmutableFields", "-                      && classModifiers.contains(\"final\") && isImmutableField(variableDef)));", "+                   || allowPublicImmutableFields", "+                      && classModifiers.contains(\"final\") && isImmutableField(variableDef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f3747b70f8258209ae54950a4ed659f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "b9f232ffe08853fbfd0239d53d683d4fe5c6b817", "commitAfterChange": "1bd30555eac039d0486dffb3fc43b7a34117909b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Override     public void visitToken(final DetailAST ast)", "signatureAfterChange": "     @Override     public void visitToken(final DetailAST ast)", "diff": ["-            && (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)", "-            && !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)))", "+            && !AnnotationUtility.containsAnnotation(ast, OVERRIDE)", "+            && !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "921867b2ef0dfd539326f72b207a8d06", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java", "commitBeforeChange": "b9f232ffe08853fbfd0239d53d683d4fe5c6b817", "commitAfterChange": "1bd30555eac039d0486dffb3fc43b7a34117909b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final boolean hasAccessibleCtor = (hasDefaultCtor || hasPublicCtor);", "+        final boolean hasAccessibleCtor = hasDefaultCtor || hasPublicCtor;", "-        if (isUtilClass && (hasAccessibleCtor && !hasStaticModifier)) {", "+        if (isUtilClass && hasAccessibleCtor && !hasStaticModifier) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddf825898be2d8057786eaa1fb8fc451", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "b9f232ffe08853fbfd0239d53d683d4fe5c6b817", "commitAfterChange": "1bd30555eac039d0486dffb3fc43b7a34117909b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processEnd(DetailAST ast)", "signatureAfterChange": "     private void processEnd(DetailAST ast)", "diff": ["-        if ((0 <= before) && Character.isWhitespace(line.charAt(before))", "+        if (0 <= before && Character.isWhitespace(line.charAt(before))", "-                if ((ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)", "-                        && ((ast.getParent().getParent().getType()", "-                            == TokenTypes.DOT)", "-                        && (ast.getParent().getParent().getParent().getType()", "-                            == TokenTypes.METHOD_CALL))", "-                    || isAfterMethodReference(ast))", "+                if (ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS", "+                        && ast.getParent().getParent().getType()", "+                            == TokenTypes.DOT", "+                        && ast.getParent().getParent().getParent().getType()", "+                            == TokenTypes.METHOD_CALL", "+                        || isAfterMethodReference(ast))", "-                    && ('(' != charAfter) && (')' != charAfter)", "-                    && (',' != charAfter) && ('[' != charAfter)", "-                    && ('.' != charAfter) && (':' != charAfter)", "+                    && '(' != charAfter && ')' != charAfter", "+                    && ',' != charAfter && '[' != charAfter", "+                    && '.' != charAfter && ':' != charAfter", "-                if ((indexOfAmp != -1)", "+                if (indexOfAmp != -1"]}]}
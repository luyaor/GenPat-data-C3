{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1777060649be5c9eddf9f3919a59f228", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7905b96bfd9705eb78d912516d1a9ab2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "af8d57317fd308e72ab9041200df10506b96870f", "commitAfterChange": "ec19316322d0540f0734f3812c9a16394dae9c3a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        case TokenTypes.CLASS_DEF:", "+            lcurly = aAST.getLastChild().getFirstChild();", "+            rcurly = aAST.getLastChild().getLastChild();", "+            nextToken = aAST;", "+            break;", "+        case TokenTypes.CTOR_DEF:", "+            lcurly = aAST.getLastChild();", "+            rcurly = lcurly.getLastChild();", "+            nextToken = aAST;", "+            break;", "+        case TokenTypes.METHOD_DEF:", "+            lcurly = aAST.getLastChild();", "+            rcurly = lcurly.getLastChild();", "+            nextToken = aAST;", "+            break;", "-            && (rcurly.getLineNo() != nextToken.getLineNo()))", "+                && (rcurly.getLineNo() != nextToken.getLineNo()))", "-                 && (rcurly.getLineNo() == nextToken.getLineNo()))", "+                && (rcurly.getLineNo() == nextToken.getLineNo()))", "-            Utils.whitespaceBefore(rcurly.getColumnNo(),", "-                                   getLines()[rcurly.getLineNo() - 1]);", "+                Utils.whitespaceBefore(rcurly.getColumnNo(),", "+                        getLines()[rcurly.getLineNo() - 1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82330712b39ae566b5c7adb8b8b6eec5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "a123763c92761d644fed6010c05ff01cece025ae", "commitAfterChange": "12a1aec08012575b94c262d2b825a439bd69fde3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-            lcurly = aAST.getLastChild().getFirstChild();", "-            rcurly = aAST.getLastChild().getLastChild();", "+            final DetailAST child = aAST.getLastChild();", "+            lcurly = child.getFirstChild();", "+            rcurly = child.getLastChild();", "-            lcurly = aAST.getLastChild();", "+        case TokenTypes.STATIC_INIT:", "+        case TokenTypes.INSTANCE_INIT:", "+            lcurly = aAST.findFirstToken(TokenTypes.SLIST);", "-            lcurly = aAST.getLastChild();", "+        case TokenTypes.LITERAL_FOR:", "+        case TokenTypes.LITERAL_WHILE:", "+        case TokenTypes.LITERAL_DO:", "+            lcurly = aAST.findFirstToken(TokenTypes.SLIST);", "+            //SLIST could be absent if method is abstract, and code like \"while(true);\"", "+            if (lcurly == null) {", "+                return;", "+            }", "+        }", "+", "+        if (getAbstractOption() == RightCurlyOption.SAME && !hasLineBreakBefore(rcurly)) {", "+            log(rcurly, \"line.break.before\");"]}]}
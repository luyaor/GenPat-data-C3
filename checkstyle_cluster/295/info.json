{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04ce8448fc6304780c355d16a27555ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "070e16cdf522ca741ea6c017f5465789", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java", "commitBeforeChange": "aeb68b7da9776ef599b02e3d0fcb449aabcaf809", "commitAfterChange": "ef58cc5a0d38ef2fbe1b18b1889bba57509980e8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testUnableToReadSuppressions() throws Exception", "signatureAfterChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testUnableToReadSuppressions() throws Exception", "diff": ["-        mockStatic(SuppressionsLoader.class);", "+        Class<SuppressionsLoader> loaderClass = SuppressionsLoader.class;", "+        Method loadSuppressions =", "+            loaderClass.getDeclaredMethod(\"loadSuppressions\", InputSource.class, String.class);", "+        loadSuppressions.setAccessible(true);", "-        String fileName = \"suppressions_none.xml\";", "-        InputSource source = mock(InputSource.class);", "+        String sourceName = \"suppressions_none.xml\";", "+        InputSource inputSource = new InputSource();", "-        when(source.getByteStream()).thenThrow(IOException.class);", "-        when(SuppressionsLoader.class, \"loadSuppressions\", source, fileName).thenCallRealMethod();", "+        thrown.expect(CheckstyleException.class);", "+        thrown.expectMessage(\"unable to read \" + sourceName);", "-        try {", "-            Whitebox.invokeMethod(SuppressionsLoader.class, \"loadSuppressions\", source, fileName);", "-            fail(\"Exception is expected\");", "-        }", "-        catch (CheckstyleException ex) {", "-            assertTrue(ex.getCause() instanceof  IOException);", "-            assertEquals(\"unable to read \" + fileName, ex.getMessage());", "-        }", "+        loadSuppressions.invoke(loaderClass, inputSource, sourceName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "887c7c744c5a9acdc9c678d4d125c13f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoaderTest.java", "commitBeforeChange": "aeb68b7da9776ef599b02e3d0fcb449aabcaf809", "commitAfterChange": "ef58cc5a0d38ef2fbe1b18b1889bba57509980e8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testUnableToFindSuppressions() throws Exception", "signatureAfterChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testUnableToFindSuppressions() throws Exception", "diff": ["-        mockStatic(SuppressionsLoader.class);", "+        Class<SuppressionsLoader> loaderClass = SuppressionsLoader.class;", "+        Method loadSuppressions =", "+            loaderClass.getDeclaredMethod(\"loadSuppressions\", InputSource.class, String.class);", "+        loadSuppressions.setAccessible(true);", "-        String fileName = \"suppressions_none.xml\";", "-        InputSource source = mock(InputSource.class);", "+        String sourceName = \"suppressions_none.xml\";", "+        InputSource inputSource = new InputSource(sourceName);", "-        when(source.getByteStream()).thenThrow(FileNotFoundException.class);", "-        when(SuppressionsLoader.class, \"loadSuppressions\", source, fileName).thenCallRealMethod();", "+        thrown.expect(CheckstyleException.class);", "+        thrown.expectMessage(\"unable to find \" + sourceName);", "-        try {", "-            Whitebox.invokeMethod(SuppressionsLoader.class, \"loadSuppressions\", source, fileName);", "-            fail(\"Exception is expected\");", "-        }", "-        catch (CheckstyleException ex) {", "-            assertTrue(ex.getCause() instanceof  FileNotFoundException);", "-            assertEquals(\"unable to find \" + fileName, ex.getMessage());", "-        }", "+        loadSuppressions.invoke(loaderClass, inputSource, sourceName);"]}]}
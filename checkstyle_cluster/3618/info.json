{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6492c4be5e972f5e0664a5fc5437c2a0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d56fee9e52bb13d186257bd416a510c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.IMPORT) {", "-            imp = FullIdent.createFullIdentBelow(aAST);", "+        if (ast.getType() == TokenTypes.IMPORT) {", "+            imp = FullIdent.createFullIdentBelow(ast);", "-                aAST.getFirstChild().getNextSibling());", "+                ast.getFirstChild().getNextSibling());", "-            log(aAST.getLineNo(),", "-                aAST.getColumnNo(),", "+            log(ast.getLineNo(),", "+                ast.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d2d9793255343b85699c0d811198bd1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);", "+            ast.findFirstToken(TokenTypes.LITERAL_ELSE);", "-        final AST condition = aAST.getFirstChild().getNextSibling();", "+        final AST condition = ast.getFirstChild().getNextSibling();", "-            log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");", "+            log(ast.getLineNo(), ast.getColumnNo(), \"simplify.boolreturn\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b88080f7f00370c2231a0b5e79dd6296", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/InterfaceIsTypeCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-                aAST.findFirstToken(TokenTypes.OBJBLOCK);", "+                ast.findFirstToken(TokenTypes.OBJBLOCK);", "-                !mAllowMarkerInterfaces || (variableDef != null);", "+                !allowMarkerInterfaces || (variableDef != null);", "-            log(aAST.getLineNo(), \"interface.type\");", "+            log(ast.getLineNo(), \"interface.type\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc4ecdd3b078f3a4271b7bd0ca3008e4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.COLON) {", "-            final DetailAST parent = aAST.getParent();", "+        if (ast.getType() == TokenTypes.COLON) {", "+            final DetailAST parent = ast.getParent();", "-        final String text = aAST.getText();", "-        final int colNo = aAST.getColumnNo();", "-        final int lineNo = aAST.getLineNo();", "+        final String text = ast.getText();", "+        final int colNo = ast.getColumnNo();", "+        final int lineNo = ast.getLineNo();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a46a6065c9d5fa95f8bec087a9da86dd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f4bbffaa5ad622fa8e49f5fa35a91c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void verifyBrace(final DetailAST aBrace,                              final DetailAST aStartToken)", "signatureAfterChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "diff": ["-    private void verifyBrace(final DetailAST aBrace,", "-                             final DetailAST aStartToken)", "+    private void verifyBrace(final DetailAST brace,", "+                             final DetailAST startToken)", "-        final String braceLine = getLine(aBrace.getLineNo() - 1);", "+        final String braceLine = getLine(brace.getLineNo() - 1);", "-        final int prevLineLen = (aBrace.getLineNo() == 1)", "-            ? mMaxLineLength", "-            : Utils.lengthMinusTrailingWhitespace(getLine(aBrace.getLineNo() - 2));", "+        final int prevLineLen = (brace.getLineNo() == 1)", "+            ? maxLineLength", "+            : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));", "-        if ((braceLine.length() > (aBrace.getColumnNo() + 1))", "-            && (braceLine.charAt(aBrace.getColumnNo() + 1) == '}'))", "+        if ((braceLine.length() > (brace.getColumnNo() + 1))", "+            && (braceLine.charAt(brace.getColumnNo() + 1) == '}'))", "-            if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "-                        MSG_KEY_LINE_NEW, \"{\");", "+            if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                log(brace.getLineNo(), brace.getColumnNo(),", "+                    MSG_KEY_LINE_NEW, \"{\");", "-            if (Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)", "-                && ((prevLineLen + 2) <= mMaxLineLength))", "+            if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)", "+                && ((prevLineLen + 2) <= maxLineLength))", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "-                        MSG_KEY_LINE_PREVIOUS, \"{\");", "+                log(brace.getLineNo(), brace.getColumnNo(),", "+                    MSG_KEY_LINE_PREVIOUS, \"{\");", "-            if (!hasLineBreakAfter(aBrace)) {", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);", "+            if (!hasLineBreakAfter(brace)) {", "+                log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);", "-            if (aStartToken.getLineNo() == aBrace.getLineNo()) {", "+            if (startToken.getLineNo() == brace.getLineNo()) {", "-            else if ((aStartToken.getLineNo() + 1) == aBrace.getLineNo()) {", "-                if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                    log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+            else if ((startToken.getLineNo() + 1) == brace.getLineNo()) {", "+                if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                    log(brace.getLineNo(), brace.getColumnNo(),", "-                else if ((prevLineLen + 2) <= mMaxLineLength) {", "-                    log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+                else if ((prevLineLen + 2) <= maxLineLength) {", "+                    log(brace.getLineNo(), brace.getColumnNo(),", "-            else if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+            else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                log(brace.getLineNo(), brace.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "304d3518892689ae0139df5fc3bc0c19", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        Arrays.fill(mCounts, 0);", "-        countTokens(aAST, 0);", "+        Arrays.fill(counts, 0);", "+        countTokens(ast, 0);", "-        final String name = TokenTypes.getTokenName(aAST.getType());", "+        final String name = TokenTypes.getTokenName(ast.getType());", "-        if (mSumTokenCounts) {", "+        if (sumTokenCounts) {", "-            for (int element : mLimitedTokens) {", "-                total += mCounts[element - 1];", "+            for (int element : limitedTokens) {", "+                total += counts[element - 1];", "-            if (total < mMinimumNumber) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "-                        (null == mMinimumMessage) ? \"descendant.token.sum.min\"", "-                                : mMinimumMessage,", "+            if (total < minimumNumber) {", "+                log(ast.getLineNo(), ast.getColumnNo(),", "+                        (null == minimumMessage) ? \"descendant.token.sum.min\"", "+                                : minimumMessage,", "-                        String.valueOf(mMinimumNumber), name);", "+                        String.valueOf(minimumNumber), name);", "-            if (total > mMaximumNumber) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "-                        (null == mMaximumMessage) ? \"descendant.token.sum.max\"", "-                                : mMaximumMessage,", "+            if (total > maximumNumber) {", "+                log(ast.getLineNo(), ast.getColumnNo(),", "+                        (null == maximumMessage) ? \"descendant.token.sum.max\"", "+                                : maximumMessage,", "-                        String.valueOf(mMaximumNumber),", "+                        String.valueOf(maximumNumber),", "-            for (int element : mLimitedTokens) {", "-                final int tokenCount = mCounts[element - 1];", "-                if (tokenCount < mMinimumNumber) {", "+            for (int element : limitedTokens) {", "+                final int tokenCount = counts[element - 1];", "+                if (tokenCount < minimumNumber) {", "-                    log(aAST.getLineNo(), aAST.getColumnNo(),", "-                            (null == mMinimumMessage) ? \"descendant.token.min\"", "-                                    : mMinimumMessage,", "+                    log(ast.getLineNo(), ast.getColumnNo(),", "+                            (null == minimumMessage) ? \"descendant.token.min\"", "+                                    : minimumMessage,", "-                            String.valueOf(mMinimumNumber),", "+                            String.valueOf(minimumNumber),", "-                if (tokenCount > mMaximumNumber) {", "+                if (tokenCount > maximumNumber) {", "-                    log(aAST.getLineNo(), aAST.getColumnNo(),", "-                            (null == mMaximumMessage) ? \"descendant.token.max\"", "-                                    : mMaximumMessage,", "+                    log(ast.getLineNo(), ast.getColumnNo(),", "+                            (null == maximumMessage) ? \"descendant.token.max\"", "+                                    : maximumMessage,", "-                            String.valueOf(mMaximumNumber),", "+                            String.valueOf(maximumNumber),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "649769ea04db0e027e9e1a5c3ad63aa1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int parentType = aAST.getParent().getType();", "+        final int parentType = ast.getParent().getType();", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            mScopeStates.push(new ScopeState());", "+            scopeStates.push(new ScopeState());", "-            state = mScopeStates.peek();", "-            if (state.mScopeState > STATE_CTOR_DEF) {", "-                if (!mIgnoreConstructors) {", "-                    log(aAST, \"declaration.order.constructor\");", "+            state = scopeStates.peek();", "+            if (state.scopeState > STATE_CTOR_DEF) {", "+                if (!ignoreConstructors) {", "+                    log(ast, \"declaration.order.constructor\");", "-                state.mScopeState = STATE_CTOR_DEF;", "+                state.scopeState = STATE_CTOR_DEF;", "-            state = mScopeStates.peek();", "+            state = scopeStates.peek();", "-            if (state.mScopeState > STATE_METHOD_DEF) {", "-                if (!mIgnoreMethods) {", "-                    log(aAST, \"declaration.order.method\");", "+            if (state.scopeState > STATE_METHOD_DEF) {", "+                if (!ignoreMethods) {", "+                    log(ast, \"declaration.order.method\");", "-                state.mScopeState = STATE_METHOD_DEF;", "+                state.scopeState = STATE_METHOD_DEF;", "-                || (aAST.getParent().getParent().getType()", "+                || (ast.getParent().getParent().getType()", "-            state = mScopeStates.peek();", "-            if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {", "-                if (state.mScopeState > STATE_STATIC_VARIABLE_DEF) {", "-                    if (!mIgnoreModifiers", "-                        || state.mScopeState > STATE_INSTANCE_VARIABLE_DEF)", "+            state = scopeStates.peek();", "+            if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {", "+                if (state.scopeState > STATE_STATIC_VARIABLE_DEF) {", "+                    if (!ignoreModifiers", "+                        || state.scopeState > STATE_INSTANCE_VARIABLE_DEF)", "-                        log(aAST, \"declaration.order.static\");", "+                        log(ast, \"declaration.order.static\");", "-                    state.mScopeState = STATE_STATIC_VARIABLE_DEF;", "+                    state.scopeState = STATE_STATIC_VARIABLE_DEF;", "-                if (state.mScopeState > STATE_INSTANCE_VARIABLE_DEF) {", "-                    log(aAST, \"declaration.order.instance\");", "+                if (state.scopeState > STATE_INSTANCE_VARIABLE_DEF) {", "+                    log(ast, \"declaration.order.instance\");", "-                else if (state.mScopeState == STATE_STATIC_VARIABLE_DEF) {", "-                    state.mDeclarationAccess = Scope.PUBLIC;", "-                    state.mScopeState = STATE_INSTANCE_VARIABLE_DEF;", "+                else if (state.scopeState == STATE_STATIC_VARIABLE_DEF) {", "+                    state.declarationAccess = Scope.PUBLIC;", "+                    state.scopeState = STATE_INSTANCE_VARIABLE_DEF;", "-            final Scope access = ScopeUtils.getScopeFromMods(aAST);", "-            if (state.mDeclarationAccess.compareTo(access) > 0) {", "-                if (!mIgnoreModifiers) {", "-                    log(aAST, \"declaration.order.access\");", "+            final Scope access = ScopeUtils.getScopeFromMods(ast);", "+            if (state.declarationAccess.compareTo(access) > 0) {", "+                if (!ignoreModifiers) {", "+                    log(ast, \"declaration.order.access\");", "-                state.mDeclarationAccess = access;", "+                state.declarationAccess = access;"]}]}
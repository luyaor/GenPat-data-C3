{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "065737f5b3bfa7c94939edda7167dcc9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62b3364c604b36222a4d29b9aa62631e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "c4339df8b3d6b58b327b6cfcaca7413e9c526dcf", "commitAfterChange": "495d54c7532363c906bb2b1acf4e010663d6693f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private static DetailAST getFirstNodeInsideSwitchBlock(             DetailAST block, DetailAST variable)", "signatureAfterChange": "     private static DetailAST getFirstNodeInsideSwitchBlock(             DetailAST block, DetailAST variable)", "diff": ["-        if (!isVariableInOperatorExpr(block, variable)) {", "-            DetailAST currentNode = block", "-                    .findFirstToken(TokenTypes.CASE_GROUP);", "-            final List<DetailAST> variableUsageExpressions =", "-                    new ArrayList<>();", "+        DetailAST currentNode = block", "+                .findFirstToken(TokenTypes.CASE_GROUP);", "+        final List<DetailAST> variableUsageExpressions =", "+                new ArrayList<>();", "-            // Checking variable usage inside all CASE blocks.", "-            while (currentNode != null", "-                    && currentNode.getType() == TokenTypes.CASE_GROUP) {", "-                final DetailAST lastNodeInCaseGroup =", "-                        currentNode.getLastChild();", "+        // Checking variable usage inside all CASE blocks.", "+        while (currentNode.getType() == TokenTypes.CASE_GROUP) {", "+            final DetailAST lastNodeInCaseGroup =", "+                    currentNode.getLastChild();", "-                if (isChild(lastNodeInCaseGroup, variable)) {", "-                    variableUsageExpressions.add(lastNodeInCaseGroup);", "-                }", "-                currentNode = currentNode.getNextSibling();", "+            if (isChild(lastNodeInCaseGroup, variable)) {", "+                variableUsageExpressions.add(lastNodeInCaseGroup);", "+            currentNode = currentNode.getNextSibling();", "+        }", "-            // If variable usage exists in several related blocks, then", "-            // firstNodeInsideBlock = null, otherwise if variable usage exists", "-            // only inside one block, then get node from", "-            // variableUsageExpressions.", "-            if (variableUsageExpressions.size() == 1) {", "-                firstNodeInsideBlock = variableUsageExpressions.get(0);", "-            }", "+        // If variable usage exists in several related blocks, then", "+        // firstNodeInsideBlock = null, otherwise if variable usage exists", "+        // only inside one block, then get node from", "+        // variableUsageExpressions.", "+        if (variableUsageExpressions.size() == 1) {", "+            firstNodeInsideBlock = variableUsageExpressions.get(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2828a9a1baf975d5b3b6774280936d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "c4339df8b3d6b58b327b6cfcaca7413e9c526dcf", "commitAfterChange": "495d54c7532363c906bb2b1acf4e010663d6693f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private static boolean isVariableInOperatorExpr(             DetailAST operator, DetailAST variable)", "signatureAfterChange": "     private static boolean isVariableInOperatorExpr(             DetailAST operator, DetailAST variable)", "diff": ["-        // Variable may be met in ELSE declaration or in CASE declaration.", "+        // Variable may be met in ELSE declaration", "-        if (!isVarInOperatorDeclr) {", "-            switch (operator.getType()) {", "-            case TokenTypes.LITERAL_IF:", "-                final DetailAST elseBlock = operator.getLastChild();", "+        if (!isVarInOperatorDeclr && operator.getType() == TokenTypes.LITERAL_IF) {", "+            final DetailAST elseBlock = operator.getLastChild();", "-                if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {", "-                    // Get IF followed by ELSE", "-                    final DetailAST firstNodeInsideElseBlock = elseBlock.getFirstChild();", "+            if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {", "+                // Get IF followed by ELSE", "+                final DetailAST firstNodeInsideElseBlock = elseBlock.getFirstChild();", "-                    if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {", "-                        isVarInOperatorDeclr |= isVariableInOperatorExpr(firstNodeInsideElseBlock, variable);", "-                        }", "+                if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {", "+                    isVarInOperatorDeclr |=", "+                            isVariableInOperatorExpr(", "+                                firstNodeInsideElseBlock,", "+                                    variable);", "-                break;", "-", "-            case TokenTypes.LITERAL_SWITCH:", "-                DetailAST currentCaseBlock = operator.findFirstToken(TokenTypes.CASE_GROUP);", "-", "-                while (currentCaseBlock != null && currentCaseBlock.getType() == TokenTypes.CASE_GROUP) {", "-                    final DetailAST firstNodeInsideCaseBlock = currentCaseBlock.getFirstChild();", "-", "-                    if (isChild(firstNodeInsideCaseBlock, variable)) {", "-                        isVarInOperatorDeclr = true;", "-                        break;", "-                        }", "-                    currentCaseBlock = currentCaseBlock.getNextSibling();", "-                }", "-                break;", "-", "-            default:", "-                // no code"]}]}
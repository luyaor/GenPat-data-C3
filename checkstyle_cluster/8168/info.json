{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6259feb6e59f81c2fa1b3cf88ce32e44", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4913833048203fd63c6d9e758faff635", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "2650bf757b9a281f18c9be4248fd8ae0e83bcb6c", "commitAfterChange": "5bd22fd6136bd16e82d32c5a386bcf033004d8eb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private int compare(String string1, String string2,             boolean caseSensitive)", "signatureAfterChange": "     private static int compare(String string1, String string2,             boolean caseSensitive)", "diff": ["-    private int compare(String string1, String string2,", "+    private static int compare(String string1, String string2,", "+        int result;", "-            return string1.compareTo(string2);", "+            result = string1.compareTo(string2);", "+        }", "+        else {", "+            result = string1.compareToIgnoreCase(string2);", "-        return string1.compareToIgnoreCase(string2);", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a83b8727883a976c13891fe38a94ec", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "e121ec185c0b5feb08da976f07e479070194095d", "commitAfterChange": "93e0187129d7ac919a2a366ad75f5f9f7ed4f553", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static List<File> listFiles(File node)", "signatureAfterChange": "     private static List<File> listFiles(File node)", "diff": ["-        final List<File> files = Lists.newLinkedList();", "+        final List<File> result = Lists.newLinkedList();", "-                for (File element : node.listFiles()) {", "-                    files.addAll(listFiles(element));", "+                final File[] files = node.listFiles();", "+                // listFiles() can return null, so we need to check it", "+                if (files != null) {", "+                    for (File element : files) {", "+                        result.addAll(listFiles(element));", "+                    }", "-                files.add(node);", "+                result.add(node);", "-        return files;", "+        return result;"]}]}
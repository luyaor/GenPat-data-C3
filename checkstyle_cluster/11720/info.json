{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a5911529f37be3551935bbd2968e73b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28828f21210ae855f2eb3a043343548d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java", "commitBeforeChange": "4adb6b2ad2b04e37aab274a3b55038c4e9da3578", "commitAfterChange": "1ca93bdf66b630e58d979ad2aa40f02e678db5cf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST aRootAST)", "diff": ["-        mCharacters.clear();", "-        final String[] lines = getLines();", "-        final StringBuffer sb = new StringBuffer();", "-        for (int i = 0; i < lines.length; i++) {", "-            sb.append(lines[i]);", "-            sb.append('\\n');", "-            for (int j = 0; j < (lines[i].length() + 1); j++) {", "-                mCharacters.add(new Integer[] {i + 1, j});", "-            }", "-        }", "-        mMatcher = pattern.matcher(sb.toString());", "+        mMatcher = pattern.matcher(getFileContents().getText().getFullText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bfa1524cd50fe0aa53f9a81ea7f97b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "78a5fd3494e8f3fe6e5edd0925f46b43583451fe", "commitAfterChange": "3cd6646941eca3da7d3b9a221c88e4c1d214876e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r     public void processLines(List<String> aLines)", "signatureAfterChange": "     public void processLines(FileText aText)", "diff": ["-     */\r", "-    public void processLines(List<String> aLines)\r", "-    {\r", "-        resetState();\r", "-        final StringBuffer sb = new StringBuffer();\r", "-        int lineno = 1;\r", "-        for (String line : aLines) {\r", "-            sb.append(line);\r", "-            sb.append('\\n');\r", "-            for (int j = 0; j < (line.length() + 1); j++) {\r", "-                mCharacters.add(new Integer[] {lineno, j});\r", "-            }\r", "-            lineno++;\r", "-        }\r", "-        mMatcher = mOptions.getPattern().matcher(sb.toString());\r", "-        findMatch();\r", "-        finish();\r", "-    }\r", "+     */", "+    public void processLines(FileText aText)", "+    {", "+        mText = aText;", "+        resetState();", "+        mMatcher = mOptions.getPattern().matcher(mText.getFullText());", "+        findMatch();", "+        finish();", "+    }"]}]}
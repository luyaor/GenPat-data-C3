{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1acfaf923864fdbfddd766abf256ca92", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f2e0e481b2ef911eb3a5ef3a8633358", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "41044d42b8f21ae00792f101a63101bf87d7fd61", "commitAfterChange": "7a4ec11d123dc0bbf7db943af715d19814d2e332", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": "      protected void verify(Checker aC, String aFileName, String[] aExpected,             Integer... aWarnsExpected) throws Exception", "signatureAfterChange": "      protected Integer[] getLinesWithWarn(String fileName) throws IOException", "diff": ["-", "-    protected void verify(Checker aC, String aFileName, String[] aExpected,", "-            Integer... aWarnsExpected) throws Exception {", "-        verify(aC, aFileName, aFileName, aExpected, aWarnsExpected);", "-    }", "+", "+    protected Integer[] getLinesWithWarn(String fileName) throws IOException {", "+        final List<Integer> result = new ArrayList<>();", "+        try (BufferedReader br = new BufferedReader(new InputStreamReader(", "+                new FileInputStream(fileName), StandardCharsets.UTF_8))) {", "+            int lineNumber = 1;", "+            while (true) {", "+                final String line = br.readLine();", "+                if (line == null) {", "+                    break;", "+                }", "+                if (WARN_PATTERN.matcher(line).find()) {", "+                    result.add(lineNumber);", "+                }", "+                lineNumber++;", "+            }", "+        }", "+        return result.toArray(new Integer[result.size()]);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a11c7b7f9dcc5073144276c885abfdb7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "41044d42b8f21ae00792f101a63101bf87d7fd61", "commitAfterChange": "7a4ec11d123dc0bbf7db943af715d19814d2e332", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected static String getSrcPath(String aFilename) throws IOException", "signatureAfterChange": "      protected static Configuration getCheckConfig(String checkName) throws CheckstyleException", "diff": ["-    protected static String getSrcPath(String aFilename) throws IOException {", "-", "-        return new File(\"src/test/java/com/puppycrawl/tools/checkstyle/\" + aFilename)", "-            .getCanonicalPath();", "+    protected static Configuration getCheckConfig(String checkName) throws CheckstyleException {", "+        Configuration result = null;", "+        for (Configuration currentConfig : getConfiguration().getChildren()) {", "+            if (\"TreeWalker\".equals(currentConfig.getName())) {", "+                for (Configuration checkConfig : currentConfig.getChildren()) {", "+                    if (checkName.equals(checkConfig.getName())) {", "+                        result = checkConfig;", "+                        break;", "+                    }", "+                }", "+            }", "+            else if (checkName.equals(currentConfig.getName())) {", "+                result = currentConfig;", "+                break;", "+            }", "+        }", "+        return result;", "+    }"]}]}
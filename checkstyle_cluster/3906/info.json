{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0ebb4c8576280595118cb32c52ca42e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dfe9514ab0b057ea769a894c8fec25a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "commitAfterChange": "189da7314d1b29f0e14479210c2fd567305a64d2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "signatureAfterChange": "     protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "diff": ["+     */", "-        final Map<String, List<String>> expectedMessages = new HashMap<>(1);", "-        expectedMessages.put(messageFileName, asList(expected));", "-        verify(checker, processedFiles, expectedMessages);", "+        stream.flush();", "+        final List<File> theFiles = Lists.newArrayList();", "+        Collections.addAll(theFiles, processedFiles);", "+        final int errs = checker.process(theFiles);", "+", "+        // process each of the lines", "+        final ByteArrayInputStream inputStream =", "+                new ByteArrayInputStream(stream.toByteArray());", "+        try (final LineNumberReader lnr = new LineNumberReader(", "+                new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {", "+", "+            for (int i = 0; i < expected.length; i++) {", "+                final String expectedResult = messageFileName + \":\" + expected[i];", "+                final String actual = lnr.readLine();", "+                assertEquals(\"error message \" + i, expectedResult, actual);", "+            }", "+", "+            assertEquals(\"unexpected output: \" + lnr.readLine(),", "+                    expected.length, errs);", "+        }", "+", "+        checker.destroy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95a29b069a6b1263332d8f7933cf5814", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "f14025ac008f8a2ef506b9e7cfcc820c637d28d5", "commitAfterChange": "44cc8b53c90117295151ea6723f859287f51dda5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "diff": ["+        final Map<String, List<String>> expectedMessages = new HashMap<>(1);", "+        expectedMessages.put(messageFileName, asList(expected));", "+        verify(checker, processedFiles, expectedMessages);", "+    }", "-            for (int i = 0; i < expected.length; i++) {", "-                final String expectedResult = messageFileName + \":\" + expected[i];", "-                final String actual = lnr.readLine();", "-                assertEquals(\"error message \" + i, expectedResult, actual);", "-            assertEquals(\"unexpected output: \" + lnr.readLine(),", "-                    expected.length, errs);"]}]}
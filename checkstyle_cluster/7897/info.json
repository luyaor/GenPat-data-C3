{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b63a70dafc43cda186b870509a10c2d0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47bfd0ca111371b027da81795f5bec5a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java", "commitBeforeChange": "bd7cfcb3e58603a5115829d5677267d71e75a731", "commitAfterChange": "1c35230164ef3745a246bb2d8a3f6fb116916221", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void verifyVariable(MyVariable aVar, boolean aInInterface)", "signatureAfterChange": "     public void verifyVariable(MyVariable aVar)", "diff": ["-    public void verifyVariable(MyVariable aVar, boolean aInInterface)", "+    public void verifyVariable(MyVariable aVar)", "+        if (inMethodBlock()) {", "+            return;", "+        }", "+", "-        if (aInInterface) {", "+        if (inInterfaceBlock()) {", "-", "-            // Logic to detect unused variables", "-            //if (mods.containsPrivate()) {", "-            //    System.out.println(\"Need to check for \" + aVar.getText());", "-            //}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a20558086378f9176ba550921bdc432d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "e70cb13b07f5b2c17dec74a42c05e7e32bb33ffb", "commitAfterChange": "a865663e990e225a3b614c6245aae571817a3f2a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean isBooleanLiteralReturnStatement(AST aAST)", "signatureAfterChange": "     private boolean isBooleanLiteralReturnStatement(AST aAST)", "diff": ["-        if (aAST.getType() != TokenTypes.LITERAL_RETURN) {", "+        if (aAST == null || aAST.getType() != TokenTypes.LITERAL_RETURN) {", "+", "+        if (expr == null) {", "+            return false;", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1f3c1efe9b086786326b3c666c278d4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "db7dc96346a2b21e1680ac9b2e473584085f5532", "commitAfterChange": "ac5dbc736320f6e5807cef97964a8a2928123687", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void addRuleastoList(String ruleStr)", "signatureAfterChange": "     private void addRuleastoList(String ruleStr)", "diff": ["+            if (samePackageMatchingDepth <= 0) {", "+                throw new IllegalArgumentException(", "+                        \"SAME_PACKAGE rule parameter should be positive integer: \" + ruleStr);", "+            }"]}]}
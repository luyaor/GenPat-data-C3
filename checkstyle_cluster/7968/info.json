{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a080d0f49252230a906b097cf693f3ab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02f74020bcd9f04077e84e0eba421b03", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void process(List<File> aFiles)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    /** {@inheritDoc} */", "-    public void process(List<File> aFiles)", "+    @Override", "+    protected void processFiltered(File aFile, List<String> aLines)", "-        final List<File> files = filter(aFiles);", "-        final MessageDispatcher dispatcher = getMessageDispatcher();", "-        for (final File file : files) {", "-            final String path = file.getPath();", "-            dispatcher.fireFileStarted(path);", "-            RandomAccessFile randomAccessFile = null;", "-            try {", "-                randomAccessFile = new RandomAccessFile(file, \"r\");", "-                if (!endsWithNewline(randomAccessFile)) {", "-                    log(0, \"noNewlineAtEOF\", path);", "-                }", "+        // Cannot use aLines as the line separators have been removed!", "+        RandomAccessFile randomAccessFile = null;", "+        try {", "+            randomAccessFile = new RandomAccessFile(aFile, \"r\");", "+            if (!endsWithNewline(randomAccessFile)) {", "+                log(0, \"noNewlineAtEOF\", aFile.getPath());", "-            catch (final IOException e) {", "-                ///CLOVER:OFF", "-                logIOException(e);", "-                ///CLOVER:ON", "-            }", "-            finally {", "-                Utils.closeQuietly(randomAccessFile);", "-            }", "-            fireErrors(path);", "-            dispatcher.fireFileFinished(path);", "+        }", "+        catch (final IOException e) {", "+            log(0, \"unable.open\", aFile.getPath());", "+        }", "+        finally {", "+            Utils.closeQuietly(randomAccessFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ba71d3e4a7cf9bf792af4e7b17d338f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java", "commitBeforeChange": "a24df47cafeab03fd65cf72b460aad3d2fafce3d", "commitAfterChange": "3bd25d71c993420cfeb4782530882d1cdb620fca", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void checkBadComments(FileContents aContents)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+    public void visitToken(DetailAST aAST)", "+        final String[] lines = aAST.getText().split(\"\\n\");", "-     */", "-    private void checkBadComments(FileContents aContents)", "-    {", "-        final Map<Integer, List<TextBlock>> allComments = aContents", "-                .getCComments();", "-        for (Map.Entry<Integer, List<TextBlock>> entry : allComments.entrySet())", "-        {", "-            for (TextBlock line : entry.getValue()) {", "-                final String[] cmt = line.getText();", "-                for (int i = 0; i < cmt.length; i++) {", "-                    if (getRegexp().matcher(cmt[i]).find()) {", "-                        log(entry.getKey().intValue() + i, \"todo.match\",", "-                                getFormat());", "-                    }", "-                }", "+        for (int i = 0; i < lines.length; i++) {", "+            if (mRegexp.matcher(lines[i]).find()) {", "+                log(aAST.getLineNo() + i, \"todo.match\", mFormat);"]}]}
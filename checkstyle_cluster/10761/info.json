{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76f3fefa15f00eb065d2986327328b67", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3987938920ea0e6f850a436c2950a2c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_TRY:", "-                leaveLiteralTry();", "-                break;", "-            default:", "-                throw new IllegalStateException(ast.toString());", "+        if (ast.getType() == TokenTypes.LITERAL_TRY) {", "+            leaveLiteralTry();", "+        }", "+        else {", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fbee96cede2cedea8d30f66e4f80b95", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_TRY:", "-                visitLiteralTry(ast);", "-                break;", "-            default:", "-                throw new IllegalStateException(ast.toString());", "+        if (ast.getType() == TokenTypes.LITERAL_TRY) {", "+            visitLiteralTry(ast);", "+        }", "+        else {", "+            throw new IllegalStateException(ast.toString());"]}]}
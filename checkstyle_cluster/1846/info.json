{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6837b5be5229e269e73fb5224d5b3626", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9192c504050b650e3b499bc81b38d7a5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST aAST)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast)", "diff": ["-    private boolean shouldCheck(final DetailAST aAST)", "+    private boolean shouldCheck(final DetailAST ast)", "-        if (ScopeUtils.inCodeBlock(aAST) || isIgnored(aAST)) {", "+        if (ScopeUtils.inCodeBlock(ast) || isIgnored(ast)) {", "-        if (aAST.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "+        if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "-            final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);", "-                ScopeUtils.inInterfaceOrAnnotationBlock(aAST)", "+                ScopeUtils.inInterfaceOrAnnotationBlock(ast)", "-        final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);", "+        final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);", "-        return scope.isIn(mScope) && surroundingScope.isIn(mScope)", "-            && ((mExcludeScope == null)", "-                || !scope.isIn(mExcludeScope)", "-                || !surroundingScope.isIn(mExcludeScope));", "+        return scope.isIn(this.scope) && surroundingScope.isIn(this.scope)", "+            && ((excludeScope == null)", "+                || !scope.isIn(excludeScope)", "+                || !surroundingScope.isIn(excludeScope));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7e460c4b35f6c5ca415f8f37d61284c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST aAST)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast)", "diff": ["-    private boolean shouldCheck(final DetailAST aAST)", "+    private boolean shouldCheck(final DetailAST ast)", "-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {", "+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {", "-        if (ScopeUtils.inCodeBlock(aAST)) {", "+        if (ScopeUtils.inCodeBlock(ast)) {", "-        if (aAST.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "+        if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "-                aAST.findFirstToken(TokenTypes.MODIFIERS));", "+                ast.findFirstToken(TokenTypes.MODIFIERS));", "-            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)", "+            ScopeUtils.inInterfaceOrAnnotationBlock(ast)", "-        final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);", "+        final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);", "-        return scope.isIn(mScope)", "-            && ((surroundingScope == null) || surroundingScope.isIn(mScope))", "-            && ((mExcludeScope == null)", "-                || !scope.isIn(mExcludeScope)", "+        return scope.isIn(this.scope)", "+            && ((surroundingScope == null) || surroundingScope.isIn(this.scope))", "+            && ((excludeScope == null)", "+                || !scope.isIn(excludeScope)", "-                && !surroundingScope.isIn(mExcludeScope)));", "+                && !surroundingScope.isIn(excludeScope)));"]}]}
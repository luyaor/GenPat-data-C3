{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9bc96df0bc38b37330484217b748cc4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b57f37ae3105199a7ee31770b0ea618", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java", "commitBeforeChange": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7", "commitAfterChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testFileWithFewTopLevelClasses() throws Exception", "signatureAfterChange": "      @Test     public void testFileWithFewTopLevelClasses() throws Exception", "diff": ["-            \"25: Top-level class NoSuperClone has to reside in its own source file.\",", "-            \"33: Top-level class InnerClone has to reside in its own source file.\",", "-            \"50: Top-level class CloneWithTypeArguments has to reside in its own source file.\",", "-            \"58: Top-level class CloneWithTypeArgumentsAndNoSuper has to reside in its own source file.\",", "-            \"67: Top-level class MyClassWithGenericSuperMethod has to reside in its own source file.\",", "-            \"84: Top-level class AnotherClass has to reside in its own source file.\",", "+            \"25: \" + getCheckMessage(MSG_KEY, \"NoSuperClone\"),", "+            \"33: \" + getCheckMessage(MSG_KEY, \"InnerClone\"),", "+            \"50: \" + getCheckMessage(MSG_KEY, \"CloneWithTypeArguments\"),", "+            \"58: \" + getCheckMessage(MSG_KEY, \"CloneWithTypeArgumentsAndNoSuper\"),", "+            \"67: \" + getCheckMessage(MSG_KEY, \"MyClassWithGenericSuperMethod\"),", "+            \"84: \" + getCheckMessage(MSG_KEY, \"AnotherClass\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9305e03d0edbf5f98960a1a468bb1eb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testSameFileNameGeneral() throws Exception", "signatureAfterChange": "      @Test     public void testSameFileNameGeneral() throws Exception", "diff": ["-            \"10:5: Declaring variables, return values or parameters of type 'GregorianCalendar' is not allowed.\",", "-            \"16:23: Declaring variables, return values or parameters of type 'GregorianCalendar' is not allowed.\",", "-            \"24:9: Declaring variables, return values or parameters of type 'List' is not allowed.\",", "-            \"25:9: Declaring variables, return values or parameters of type 'java.io.File' is not allowed.\",", "-            \"27:5: Declaring variables, return values or parameters of type 'java.util.List' is not allowed.\",", "-            \"28:13: Declaring variables, return values or parameters of type 'ArrayList' is not allowed.\",", "+            \"10:5: \" + getCheckMessage(MSG_KEY, \"GregorianCalendar\"),", "+            \"16:23: \" + getCheckMessage(MSG_KEY, \"GregorianCalendar\"),", "+            \"24:9: \" + getCheckMessage(MSG_KEY, \"List\"),", "+            \"25:9: \" + getCheckMessage(MSG_KEY, \"java.io.File\"),", "+            \"27:5: \" + getCheckMessage(MSG_KEY, \"java.util.List\"),", "+            \"28:13: \" + getCheckMessage(MSG_KEY, \"ArrayList\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee7dc6ba2e164d718190e684e101a871", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testMemberModifiers() throws Exception", "signatureAfterChange": "      @Test     public void testMemberModifiers() throws Exception", "diff": ["-            \"6:13: Declaring variables, return values or parameters of type 'AbstractClass' is not allowed.\",", "-            \"9:13: Declaring variables, return values or parameters of type \"", "-                + \"'com.puppycrawl.tools.checkstyle.coding.InputIllegalTypeMemberModifiers.AbstractClass'\"", "-                + \" is not allowed.\",", "-            \"16:13: Declaring variables, return values or parameters of type 'java.util.TreeSet' is not allowed.\",", "-            \"17:13: Declaring variables, return values or parameters of type 'TreeSet' is not allowed.\",", "-            \"23:15: Declaring variables, return values or parameters of type \"", "-                    + \"'com.puppycrawl.tools.checkstyle.coding.InputIllegalTypeMemberModifiers.AbstractClass'\"", "-                    + \" is not allowed.\",", "-            \"25:25: Declaring variables, return values or parameters of type 'java.util.TreeSet' is not allowed.\",", "-            \"33:15: Declaring variables, return values or parameters of type 'AbstractClass' is not allowed.\",", "+            \"6:13: \" + getCheckMessage(MSG_KEY, \"AbstractClass\"),", "+            \"9:13: \" + getCheckMessage(MSG_KEY, \"com.puppycrawl.tools.checkstyle.coding.InputIllegalTypeMemberModifiers.AbstractClass\"),", "+            \"16:13: \" + getCheckMessage(MSG_KEY, \"java.util.TreeSet\"),", "+            \"17:13: \" + getCheckMessage(MSG_KEY, \"TreeSet\"),", "+            \"23:15: \" + getCheckMessage(MSG_KEY, \"com.puppycrawl.tools.checkstyle.coding.InputIllegalTypeMemberModifiers.AbstractClass\"),", "+            \"25:25: \" + getCheckMessage(MSG_KEY, \"java.util.TreeSet\"),", "+            \"33:15: \" + getCheckMessage(MSG_KEY, \"AbstractClass\"),"]}]}
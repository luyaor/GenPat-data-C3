{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a63930708b87bdf4fb20d577658a898", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f4bbffaa5ad622fa8e49f5fa35a91c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void verifyBrace(final DetailAST aBrace,                              final DetailAST aStartToken)", "signatureAfterChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "diff": ["-    private void verifyBrace(final DetailAST aBrace,", "-                             final DetailAST aStartToken)", "+    private void verifyBrace(final DetailAST brace,", "+                             final DetailAST startToken)", "-        final String braceLine = getLine(aBrace.getLineNo() - 1);", "+        final String braceLine = getLine(brace.getLineNo() - 1);", "-        final int prevLineLen = (aBrace.getLineNo() == 1)", "-            ? mMaxLineLength", "-            : Utils.lengthMinusTrailingWhitespace(getLine(aBrace.getLineNo() - 2));", "+        final int prevLineLen = (brace.getLineNo() == 1)", "+            ? maxLineLength", "+            : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));", "-        if ((braceLine.length() > (aBrace.getColumnNo() + 1))", "-            && (braceLine.charAt(aBrace.getColumnNo() + 1) == '}'))", "+        if ((braceLine.length() > (brace.getColumnNo() + 1))", "+            && (braceLine.charAt(brace.getColumnNo() + 1) == '}'))", "-            if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "-                        MSG_KEY_LINE_NEW, \"{\");", "+            if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                log(brace.getLineNo(), brace.getColumnNo(),", "+                    MSG_KEY_LINE_NEW, \"{\");", "-            if (Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)", "-                && ((prevLineLen + 2) <= mMaxLineLength))", "+            if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)", "+                && ((prevLineLen + 2) <= maxLineLength))", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "-                        MSG_KEY_LINE_PREVIOUS, \"{\");", "+                log(brace.getLineNo(), brace.getColumnNo(),", "+                    MSG_KEY_LINE_PREVIOUS, \"{\");", "-            if (!hasLineBreakAfter(aBrace)) {", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);", "+            if (!hasLineBreakAfter(brace)) {", "+                log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);", "-            if (aStartToken.getLineNo() == aBrace.getLineNo()) {", "+            if (startToken.getLineNo() == brace.getLineNo()) {", "-            else if ((aStartToken.getLineNo() + 1) == aBrace.getLineNo()) {", "-                if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                    log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+            else if ((startToken.getLineNo() + 1) == brace.getLineNo()) {", "+                if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                    log(brace.getLineNo(), brace.getColumnNo(),", "-                else if ((prevLineLen + 2) <= mMaxLineLength) {", "-                    log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+                else if ((prevLineLen + 2) <= maxLineLength) {", "+                    log(brace.getLineNo(), brace.getColumnNo(),", "-            else if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+            else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                log(brace.getLineNo(), brace.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c26d4fdd629281f395349c66535b2eb2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "6e96026ec6d95fc5eadd3044cab91c24c73c8e0c", "commitAfterChange": "e00c478dd61d9d883e41b500b780ab217582c2e7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String normalize(String aPath)", "signatureAfterChange": "     public String normalize(String aPath)", "diff": ["-        final String orig = aPath;", "-", "-        aPath = aPath.replace('/', File.separatorChar).replace('\\\\',", "-                File.separatorChar);", "+        String path = aPath.replace('/', File.separatorChar).replace('\\\\',", "+            File.separatorChar);", "-        final int colon = aPath.indexOf(\":\");", "+        final int colon = path.indexOf(\":\");", "-            if (!aPath.startsWith(File.separator)", "-                && !((aPath.length() >= 2)", "-                     && Character.isLetter(aPath.charAt(0)) && (colon == 1)))", "+            if (!path.startsWith(File.separator)", "+                && !((path.length() >= 2)", "+                     && Character.isLetter(path.charAt(0)) && (colon == 1)))", "-                final String msg = aPath + \" is not an absolute path\";", "+                final String msg = path + \" is not an absolute path\";", "-            if (!aPath.startsWith(File.separator) && (colon == -1)) {", "-                final String msg = aPath + \" is not an absolute path\";", "+            if (!path.startsWith(File.separator) && (colon == -1)) {", "+                final String msg = path + \" is not an absolute path\";", "-        if ((!onNetWare && (aPath.length() >= 2)", "-             && Character.isLetter(aPath.charAt(0)) && (aPath.charAt(1) == ':'))", "+        if ((!onNetWare && (path.length() >= 2)", "+             && Character.isLetter(path.charAt(0)) && (path.charAt(1) == ':'))", "-            final char[] ca = aPath.replace('/', '\\\\').toCharArray();", "+            final char[] ca = path.replace('/', '\\\\').toCharArray();", "-            if (colon + 1 < aPath.length()) {", "+            if (colon + 1 < path.length()) {", "-            aPath = sbPath.toString().replace('\\\\', File.separatorChar);", "+            path = sbPath.toString().replace('\\\\', File.separatorChar);", "-            if (aPath.length() == 1) {", "+            if (path.length() == 1) {", "-                aPath = \"\";", "+                path = \"\";", "-            else if (aPath.charAt(1) == File.separatorChar) {", "+            else if (path.charAt(1) == File.separatorChar) {", "-                aPath = aPath.substring(2);", "+                path = path.substring(2);", "-                aPath = aPath.substring(1);", "+                path = path.substring(1);", "-        final StringTokenizer tok = new StringTokenizer(aPath, File.separator);", "+        final StringTokenizer tok = new StringTokenizer(path, File.separator);", "-                            + orig);", "+                            + aPath);", "-        aPath = sb.toString();", "+        path = sb.toString();", "-            aPath = aPath.replace('/', '\\\\');", "+            path = path.replace('/', '\\\\');", "-        return aPath;", "+        return path;"]}]}
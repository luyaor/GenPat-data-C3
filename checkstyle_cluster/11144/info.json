{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbd68bf47a5a5d3da00fc028ba9b00f2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04c4795e7224b859ad202a6d481081dd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final void setIllegalClassNames(final String[] aClassNames)", "signatureAfterChange": "     public final void setIllegalClassNames(final String[] classNames)", "diff": ["-    public final void setIllegalClassNames(final String[] aClassNames)", "+    public final void setIllegalClassNames(final String[] classNames)", "-        assert aClassNames != null;", "-        mIllegalClassNames.clear();", "-        for (final String name : aClassNames) {", "-            mIllegalClassNames.add(name);", "+        assert classNames != null;", "+        illegalClassNames.clear();", "+        for (final String name : classNames) {", "+            illegalClassNames.add(name);", "-                mIllegalClassNames.add(shortName);", "+                illegalClassNames.add(shortName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4a5c36ec90f7f910f3df8ce8cfb4447", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/AnonymousInnerClass.java", "commitBeforeChange": "c6bbd6774988073dfeea8e6f9bea0689f0de19bb", "commitAfterChange": "154df915b9085bfccd0c92e6da4785b234474f1c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "    public void finishMakingDefinition()", "signatureAfterChange": "    public void finishMakingDefinition()", "diff": ["-    String extendedClassName = ASTUtil.constructDottedName(_classExtended);", "-    IClass superclass = getClassDefinition(extendedClassName);", "-", "-    if (superclass != null) {", "-      setSuperclass(superclass);", "-      superclass.addSubclass(this);", "+    if (_classExtended != null) {", "+        String extendedClassName = ASTUtil.constructDottedName(_classExtended);", "+        IClass superclass = getClassDefinition(extendedClassName);", "+    ", "+        if (superclass != null) {", "+          setSuperclass(superclass);", "+          superclass.addSubclass(this);", "+        }"]}]}
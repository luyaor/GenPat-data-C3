{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f67e7f244442b135d1ec2ffc0744c4c0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0267b35859eb96c307db75e57d83651e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java", "commitBeforeChange": "44b3fe0b146d93d297e718c393dddf2d8a63809e", "commitAfterChange": "d938bf243b995b18a52ebbbd552497c78c6e5e30", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void logsStarredImportViolation(DetailAST startingDot)", "signatureAfterChange": "     private void logsStarredImportViolation(DetailAST startingDot)", "diff": ["-        if (isStaredImport(name) && !excludes.contains(name.getText())) {", "-            log(startingDot.getLineNo(), MSG_KEY, name.getText());", "+        final String importText = name.getText();", "+        if (importText.endsWith(\".*\") && !excludes.contains(importText)) {", "+            log(startingDot.getLineNo(), MSG_KEY, importText);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2409e218097386b5b06464f76410d92b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "be08323f8a58f992bc61171bf53e0e51dbd21f29", "commitAfterChange": "cc355f7e108fe222d957f1dbc8c3ba4eeb7ed941", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static boolean isSingleLineIf(DetailAST literalIf)", "signatureAfterChange": "     private static boolean isSingleLineIf(DetailAST literalIf)", "diff": ["-            DetailAST block = literalIf.getLastChild();", "-            if (block.getType() != TokenTypes.LITERAL_RETURN) {", "-                block = literalIf.getLastChild().getPreviousSibling();", "+            final DetailAST literalIfLastChild = literalIf.getLastChild();", "+            final DetailAST block;", "+            if (literalIfLastChild.getType() == TokenTypes.LITERAL_ELSE) {", "+                block = literalIfLastChild.getPreviousSibling();", "+            }", "+            else {", "+                block = literalIfLastChild;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54514baa682fa761fbcc50e921a56448", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "897c4164bd289ea45d5c600f11816f4379bd4421", "commitAfterChange": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                    checkTag(lineNo, cmt.getText(), \"@author\",", "-                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);", "-                    checkTag(lineNo, cmt.getText(), \"@version\",", "-                            mVersionTagRE, mVersionFormatRE, mVersionFormat);", "+                    Vector tags = getJavadocTags(cmt);", "+                    checkTag(lineNo, tags, \"author\",", "+                             mAuthorFormatRE, mAuthorFormat);", "+                    checkTag(lineNo, tags, \"version\",", "+                             mVersionFormatRE, mVersionFormat);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91d74e503874d22c4948a9a7d2945634", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "9f93c2258ef0512b743f5927be201ff55a9d5c57", "commitAfterChange": "23c8774d2e2fd245de1e5df02758fd23702c565e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static boolean isInterfaceOrAnnotationMember(DetailAST ast)", "signatureAfterChange": "     private static boolean isInterfaceOrAnnotationMember(DetailAST ast)", "diff": ["-        final DetailAST parentTypeDef =", "-                ast.getParent() != null ? ast.getParent().getParent() : null;", "+        DetailAST parentTypeDef = ast.getParent();", "+", "+        if (parentTypeDef != null) {", "+            parentTypeDef = parentTypeDef.getParent();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e85e5579ccadd156b0fdb05b864c4b33", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java", "commitBeforeChange": "d91236c5ca052899bfd21ac5f378dcaf8e864750", "commitAfterChange": "943e07af07c27cda9b6d7298863484ef1e28a3ad", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aDetailAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aDetailAST)", "diff": ["+        final DetailAST methodDef = aDetailAST.getParent();", "-        if (!(shouldIgnoreMethod(aDetailAST.getParent().findFirstToken(", "-                                     TokenTypes.IDENT).getText())))", "-        {", "+        if (!isIgnorableMethod(methodDef)) {", "+    }"]}]}
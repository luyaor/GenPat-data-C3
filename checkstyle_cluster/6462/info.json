{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f708cb5dba6ac667519b10a4690335a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06b8bebd214bd94a45235f0706b40e90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheckTest.java", "commitBeforeChange": "c5dfb268770999ece0efcab2f47f007dec339264", "commitAfterChange": "5f0f6d3929dc2c7f1570c03f24a652bffe61db6f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testMessageProperty()         throws Exception", "signatureAfterChange": "      public void testMessageProperty()         throws Exception", "diff": ["-        final DefaultConfiguration checkConfig =", "-            createCheckConfig(GenericIllegalRegexpCheck.class);", "-        checkConfig.addAttribute(\"format\", illegal);", "-        checkConfig.addAttribute(\"message\", message);", "+        mCheckConfig.addAttribute(\"format\", illegal);", "+        mCheckConfig.addAttribute(\"message\", message);", "-        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e04f7a4b52cf4c8c90d5ff02e5ee7db", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheckTest.java", "commitBeforeChange": "c5dfb268770999ece0efcab2f47f007dec339264", "commitAfterChange": "5f0f6d3929dc2c7f1570c03f24a652bffe61db6f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testIgnoreCaseTrue()             throws Exception", "signatureAfterChange": "      public void testIgnoreCaseTrue()             throws Exception", "diff": ["-        final DefaultConfiguration checkConfig =", "-            createCheckConfig(GenericIllegalRegexpCheck.class);", "-        checkConfig.addAttribute(\"format\", illegal);", "-        checkConfig.addAttribute(\"ignoreCase\", \"true\");", "+        mCheckConfig.addAttribute(\"format\", illegal);", "+        mCheckConfig.addAttribute(\"ignoreCase\", \"true\");", "-        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);"]}]}
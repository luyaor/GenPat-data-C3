{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad17249efc2338fe9624651f6d805d2b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fba7437b4b9814325c84b19b3eded54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "e380ac8df92c051d843d380d5e8a6fe90af9df9d", "commitAfterChange": "ab2f93f9bf61816d84154e636d32c81c05854e24", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private static void traverse(File node, List<File> files)", "signatureAfterChange": "     private static List<File> listFiles(File node)", "diff": ["-    private static void traverse(File node, List<File> files)", "+     */", "+    private static List<File> listFiles(File node)", "+    {", "+        // could be replaced with org.apache.commons.io.FileUtils.list() method", "+        // if only we add commons-io library", "+        final List<File> files = Lists.newLinkedList();", "+", "-                final File[] nodes = node.listFiles();", "-                for (File element : nodes) {", "-                    traverse(element, files);", "+                for (File element : node.listFiles()) {", "+                    files.addAll(listFiles(element));", "+        return files;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64cb7e93067a7afe77679a87b52bb168", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "e287c5e741ce8b13d19e7f0885977792a0d0fcc9", "commitAfterChange": "f38d8abd42c3e824635e542e6031b3da1997c02e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public synchronized void process(File[] aFiles)", "signatureAfterChange": "     public synchronized void process(List<File> aFiles)", "diff": ["-    public synchronized void process(File[] aFiles)", "+    public synchronized void process(List<File> aFiles)", "-        mLineBlockChecksums = new int[mFiles.length][];", "-        mChecksumInfo = new ChecksumInfo[mFiles.length];", "+        mLineBlockChecksums = new int[mFiles.size()][];", "+        mChecksumInfo = new ChecksumInfo[mFiles.size()];", "-            LOG.debug(\"Reading \" + mFiles.length + \" input files\");", "+            LOG.debug(\"Reading \" + mFiles.size() + \" input files\");", "-        for (int i = 0; i < mFiles.length; i++) {", "-            final File file = mFiles[i];", "+        for (int i = 0; i < mFiles.size(); i++) {", "+            final File file = mFiles.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9142eaa8fa336a0c856e9c4c5d744f9c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java", "commitBeforeChange": "fc8a5ae78cffc8f6d5951a72fc722c52dedc1d04", "commitAfterChange": "bf16d371dab210594755d04afc4697269ed088c0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    protected void processFiltered(File aFile, List<String> aLines)", "-        if (getHeaderLines().length > getLines().length) {", "+        if (getHeaderLines().size() > aLines.size()) {", "-            for (int i = 0; i < getHeaderLines().length; i++) {", "-                if (!isMatch(i)) {", "-                    log(i + 1, \"header.mismatch\", getHeaderLines()[i]);", "+            for (int i = 0; i < getHeaderLines().size(); i++) {", "+                if (!isMatch(i, aLines.get(i))) {", "+                    log(i + 1, \"header.mismatch\", getHeaderLines().get(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dba5d43eea5419c8c366f8800d198de4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderChecker.java", "commitBeforeChange": "fc8a5ae78cffc8f6d5951a72fc722c52dedc1d04", "commitAfterChange": "bf16d371dab210594755d04afc4697269ed088c0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     void checkLines(final String[] aLines)", "signatureAfterChange": "     void checkLines(final List<String> aLines)", "diff": ["-    void checkLines(final String[] aLines)", "+    void checkLines(final List<String> aLines)", "-        final int headerSize = mHeaderLines.length;", "-        final int fileSize = aLines.length;", "+        final int headerSize = mHeaderLines.size();", "+        final int fileSize = aLines.size();", "-                final String line = aLines[i];", "+                final String line = aLines.get(i);", "-                            i + 1, mHeaderLines[headerLineNo]);", "+                            i + 1, mHeaderLines.get(headerLineNo));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeed8a0cc176044167606dea371de5d2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "commitBeforeChange": "02da493e64154d6bbac09a64d67a025f0e72cad1", "commitAfterChange": "7a6bf01c4dac8aedcdbd52aeed7500ba7a3ab0f8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     static PkgControl load(final String aFilename) throws CheckstyleException", "signatureAfterChange": "     static PkgControl load(final URI aUri) throws CheckstyleException", "diff": ["-    static PkgControl load(final String aFilename) throws CheckstyleException", "+    static PkgControl load(final URI aUri) throws CheckstyleException", "-        FileInputStream fis = null;", "+        InputStream is = null;", "-            fis = new FileInputStream(aFilename);", "+            is = aUri.toURL().openStream();", "-        catch (final FileNotFoundException e) {", "-            throw new CheckstyleException(\"unable to find \" + aFilename, e);", "+        catch (final MalformedURLException e) {", "+            throw new CheckstyleException(\"syntax error in url \" + aUri, e);", "-        final InputSource source = new InputSource(fis);", "-        return load(source, aFilename);", "+        catch (final IOException e) {", "+            throw new CheckstyleException(\"unable to find \" + aUri, e);", "+        }", "+        final InputSource source = new InputSource(is);", "+        return load(source, aUri);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f50e89b9199211392cb787a4e7eb737", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a137002eba908ffba575080b3ac732cd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "ec426aa0db5829cd799814d5e0e61b4cd2e42a46", "commitAfterChange": "779aa37ffc447d1d85ea1b082759e4040657191d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final int parentType = ast.getParent().getType();", "-", "-        // Check for CURLY in array initializer", "-        if ((currentType == TokenTypes.RCURLY", "-                || currentType == TokenTypes.LCURLY)", "-            && (parentType == TokenTypes.ARRAY_INIT", "-                || parentType == TokenTypes.ANNOTATION_ARRAY_INIT)) {", "-            return;", "-        }", "-", "-        // Check for import pkg.name.*;", "-        if (currentType == TokenTypes.STAR", "-            && parentType == TokenTypes.DOT) {", "-            return;", "-        }", "-", "-        // Check for an SLIST that has a parent CASE_GROUP. It is not a '{'.", "-        if (currentType == TokenTypes.SLIST", "-            && parentType == TokenTypes.CASE_GROUP) {", "-            return;", "-        }", "-", "-        if (currentType == TokenTypes.COLON) {", "-            //we do not want to check colon for cases and defaults", "-            if (parentType == TokenTypes.LITERAL_DEFAULT", "-                || parentType == TokenTypes.LITERAL_CASE) {", "-                return;", "-            }", "-            else if (parentType == TokenTypes.FOR_EACH_CLAUSE", "-                && this.ignoreEnhancedForColon) {", "-                return;", "-            }", "-        }", "-", "-        // Checks if empty methods, ctors or loops are allowed.", "-        if (isEmptyMethodBlock(ast, parentType)", "-                || isEmptyCtorBlock(ast, parentType)", "-                || isEmptyLoop(ast, parentType)) {", "-            return;", "-        }", "-", "-        // Checks if empty classes, interfaces or enums are allowed", "-        if (allowEmptyTypes && isEmptyType(ast, parentType)) {", "+        if (isNotRelevantSituation(ast, currentType)) {", "-            // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners", "-            && !(currentType == TokenTypes.RCURLY", "-                && (nextChar == ')'", "-                    || nextChar == ';'", "-                    || nextChar == ','", "-                    || nextChar == '.'))) {", "+            && !isAnnonimousInnerClassEnd(currentType, nextChar)) {", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c88eda2b8f499c331779327384380732", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "5e8476f01d9306b34e6629ed27f7a2db48287ed5", "commitAfterChange": "d31d4220cc7f9cf03fe9e4cd0fe7d9e305ffe096", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        // Check for RCURLY in array initializer", "-        if ((aAST.getType() == TokenTypes.RCURLY)", "-            && (aAST.getParent().getType() == TokenTypes.ARRAY_INIT))", "+        final int type = aAST.getType();", "+        final int parentType = aAST.getParent().getType();", "+", "+        // Check for CURLY in array initializer", "+        if ((type == TokenTypes.RCURLY || type == TokenTypes.LCURLY)", "+            && (parentType == TokenTypes.ARRAY_INIT))", "-        if ((aAST.getType() == TokenTypes.STAR)", "-            && (aAST.getParent().getType() == TokenTypes.DOT))", "+        if ((type == TokenTypes.STAR)", "+            && (parentType == TokenTypes.DOT))", "-        if ((aAST.getType() == TokenTypes.SLIST)", "-            && (aAST.getParent().getType() == TokenTypes.CASE_GROUP))", "+        if ((type == TokenTypes.SLIST)", "+            && (parentType == TokenTypes.CASE_GROUP))", "-        if ((after < line.length())", "-            && !Character.isWhitespace(", "-                line.charAt(after)) // Check for \"return;\"", "-            && !((aAST.getType() == TokenTypes.LITERAL_RETURN)", "+        if (after >= line.length()) {", "+            return;", "+        }", "+", "+        final char nextChar = line.charAt(after);", "+        if (!Character.isWhitespace(nextChar)", "+            // Check for \"return;\"", "+            && !((type == TokenTypes.LITERAL_RETURN)", "-            // Check for \"})\" or \"};\". Happens with anon-inners", "-            && !((aAST.getType() == TokenTypes.RCURLY)", "-                && ((line.charAt(after) == ')')", "-                    || (line.charAt(after) == ';'))))", "+            // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners", "+            && !((type == TokenTypes.RCURLY)", "+                && ((nextChar == ')')", "+                    || (nextChar == ';')", "+                    || (nextChar == ','))))"]}]}
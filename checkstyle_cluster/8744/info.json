{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65c07672184e4475d453240b34ba718d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "332770624c60e36ef8a5aa4b29b565bd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private static boolean isChild(DetailAST aParent, DetailAST aAST)", "signatureAfterChange": "     private static boolean isChild(DetailAST parent, DetailAST ast)", "diff": ["-    private static boolean isChild(DetailAST aParent, DetailAST aAST)", "+    private static boolean isChild(DetailAST parent, DetailAST ast)", "-        final ASTEnumeration astList = aParent.findAllPartial(aAST);", "+        final ASTEnumeration astList = parent.findAllPartial(ast);", "-            final DetailAST ast = (DetailAST) astList.nextNode();", "-            DetailAST astParent = ast.getParent();", "+            final DetailAST astNode = (DetailAST) astList.nextNode();", "+            DetailAST astParent = astNode.getParent();", "-                if (astParent.equals(aParent)", "-                        && astParent.getLineNo() == aParent.getLineNo())", "+                if (astParent.equals(parent)", "+                        && astParent.getLineNo() == parent.getLineNo())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59904f79bf945c87970c02e69ac807af", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     void setParent(DetailAST aParent)", "signatureAfterChange": "     void setParent(DetailAST parent)", "diff": ["-    void setParent(DetailAST aParent)", "+    void setParent(DetailAST parent)", "-        mParent = aParent;", "+        this.parent = parent;", "-            nextSibling.setParent(aParent);", "+            nextSibling.setParent(parent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81ba524ac82d263efe1cfea752bb913f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected boolean isSubclass(Class<?> aChild, Class<?> aParent)", "signatureAfterChange": "     protected boolean isSubclass(Class<?> child, Class<?> parent)", "diff": ["-    protected boolean isSubclass(Class<?> aChild, Class<?> aParent)", "+    protected boolean isSubclass(Class<?> child, Class<?> parent)", "-        return (aParent != null) && (aChild != null)", "-            &&  aParent.isAssignableFrom(aChild);", "+        return (parent != null) && (child != null)", "+            &&  parent.isAssignableFrom(child);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0895ab8097f6b151aa558960edd123c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "         protected LexicalFrame(LexicalFrame aParent)", "signatureAfterChange": "         protected LexicalFrame(LexicalFrame parent)", "diff": ["-        protected LexicalFrame(LexicalFrame aParent)", "+        protected LexicalFrame(LexicalFrame parent)", "-            mParent = aParent;", "-            mVarNames = Sets.newHashSet();", "+            this.parent = parent;", "+            varNames = Sets.newHashSet();"]}]}
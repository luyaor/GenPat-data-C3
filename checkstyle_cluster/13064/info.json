{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f039ed2a3b34cb78561633784f3fa379", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15bbcece335029f000460def77a380f1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "f0e75896a4c9a79d1cd4e414ae3fc7011268eb80", "commitAfterChange": "5b01236f52f59b632659cac386768805f7a9006f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     private static List<JavadocTag> getMethodTags(TextBlock comment)", "signatureAfterChange": "     private static List<JavadocTag> getMethodTags(TextBlock comment)", "diff": ["+        final int startColumnNumber = comment.getStartColNo();", "-                int col = javadocArgMatcher.start(1) - 1;", "-                if (i == 0) {", "-                    col += comment.getStartColNo();", "-                }", "-                tags.add(new JavadocTag(currentLine, col, javadocArgMatcher", "-                        .group(1), javadocArgMatcher.group(2)));", "+                final int col = calculateTagColumn(javadocArgMatcher, i, startColumnNumber);", "+                tags.add(new JavadocTag(currentLine, col, javadocArgMatcher.group(1),", "+                        javadocArgMatcher.group(2)));", "-                int col = javadocNoargMatcher.start(1) - 1;", "-                if (i == 0) {", "-                    col += comment.getStartColNo();", "-                }", "-                tags.add(new JavadocTag(currentLine, col, javadocNoargMatcher", "-                        .group(1)));", "+                final int col = calculateTagColumn(javadocNoargMatcher, i, startColumnNumber);", "+                tags.add(new JavadocTag(currentLine, col, javadocNoargMatcher.group(1)));", "-                int col = noargCurlyMatcher.start(1) - 1;", "-                if (i == 0) {", "-                    col += comment.getStartColNo();", "-                }", "-                tags.add(new JavadocTag(currentLine, col, noargCurlyMatcher", "-                        .group(1)));", "+                final int col = calculateTagColumn(noargCurlyMatcher, i, startColumnNumber);", "+                tags.add(new JavadocTag(currentLine, col, noargCurlyMatcher.group(1)));", "-                final String p1 = argMultilineStart.group(1);", "-                final String p2 = argMultilineStart.group(2);", "-                int col = argMultilineStart.start(1) - 1;", "-                if (i == 0) {", "-                    col += comment.getStartColNo();", "-                }", "-", "-                // Look for the rest of the comment if all we saw was", "-                // the tag and the name. Stop when we see '*/' (end of", "-                // Javadoc), '@' (start of next tag), or anything that's", "-                // not whitespace or '*' characters.", "-                int remIndex = i + 1;", "-                while (remIndex < lines.length) {", "-                    final Matcher multilineCont = MATCH_JAVADOC_MULTILINE_CONT", "-                            .matcher(lines[remIndex]);", "-                    if (multilineCont.find()) {", "-                        remIndex = lines.length;", "-                        final String lFin = multilineCont.group(1);", "-                        if (!lFin.equals(NEXT_TAG)", "-                            && !lFin.equals(END_JAVADOC)) {", "-                            tags.add(new JavadocTag(currentLine, col, p1, p2));", "-                        }", "-                    }", "-                    remIndex++;", "-                }", "+                final int col = calculateTagColumn(argMultilineStart, i, startColumnNumber);", "+                tags.addAll(getMultilineArgTags(argMultilineStart, col, lines, i, currentLine));", "-                final String p1 = noargMultilineStart.group(1);", "-                final int col = noargMultilineStart.start(1) - 1;", "-", "-                // Look for the rest of the comment if all we saw was", "-                // the tag and the name. Stop when we see '*/' (end of", "-                // Javadoc), '@' (start of next tag), or anything that's", "-                // not whitespace or '*' characters.", "-                int remIndex = i + 1;", "-                while (remIndex < lines.length) {", "-                    final Matcher multilineCont = MATCH_JAVADOC_MULTILINE_CONT", "-                            .matcher(lines[remIndex]);", "-                    multilineCont.find();", "-                    remIndex = lines.length;", "-                    final String lFin = multilineCont.group(1);", "-                    if (!lFin.equals(NEXT_TAG)", "-                        && !lFin.equals(END_JAVADOC)) {", "-                        tags.add(new JavadocTag(currentLine, col, p1));", "-                    }", "-                    remIndex++;", "-                }", "+                tags.addAll(getMultilineNoArgTags(noargMultilineStart, lines, i, currentLine));", "+        return tags;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c921d9b85f629c77d81c3ef65d40f8c4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "290ae38a14021785018fbfa7c2651200534a88ca", "commitAfterChange": "1dacd5303bfe94b9d5476059b6a5676146d96708", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-        catch (final RecognitionException re) {", "-            final String exceptionMsg = String.format(msg, \"RecognitionException\", fileName);", "-            Utils.getExceptionLogger().error(exceptionMsg);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    re.getLine(),", "-                    re.getColumn(),", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.exception\",", "-                    new String[] {re.getMessage()},", "-                    getId(),", "-                    this.getClass(), null));", "-        }", "+            String message = \"TokenStreamRecognitionException occured\";", "-                getMessageCollector().add(", "-                    new LocalizedMessage(", "-                        re.getLine(),", "-                        re.getColumn(),", "-                        Defn.CHECKSTYLE_BUNDLE,", "-                        \"general.exception\",", "-                        new String[] {re.getMessage()},", "-                        getId(),", "-                        this.getClass(), null));", "+                message = re.getMessage();", "-            else {", "-                getMessageCollector().add(", "-                    new LocalizedMessage(", "-                        0,", "-                        Defn.CHECKSTYLE_BUNDLE,", "-                        \"general.exception\",", "-                        new String[]", "-                        {\"TokenStreamRecognitionException occured.\"},", "-                        getId(),", "-                        this.getClass(), null));", "-            }", "+            getMessageCollector().add(createLocalizedMessage(message));", "-        catch (final TokenStreamException te) {", "-            final String exceptionMsg = String.format(msg,", "-                    \"TokenStreamException\", fileName);", "+        // RecognitionException and any other (need to check if needed)", "+        catch (Throwable ex) {", "+            final String exceptionMsg = String.format(msg, ex.getClass().getSimpleName(), fileName);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    0,", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.exception\",", "-                    new String[] {te.getMessage()},", "-                    getId(),", "-                    this.getClass(), null));", "-        }", "-        catch (final Throwable err) {", "-            final String exceptionMsg = String.format(msg, \"Exception\", fileName);", "-            Utils.getExceptionLogger().error(exceptionMsg);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    0,", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.exception\",", "-                    new String[] {\"\" + err},", "-                    getId(),", "-                    this.getClass(), null));", "+            getMessageCollector().add(createLocalizedMessage(ex.getMessage()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80776bfe806a9068c0219b9450d1f3f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "f010eb47869bae692609de487d6140373e02f3a3", "commitAfterChange": "907a19906f790ce8faea7aa74e12608538dca1b6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        final LexicalFrame frame = this.mFrames.current();", "+        switch (aAST.getType()) {", "+        case TokenTypes.CLASS_DEF :", "+        case TokenTypes.INTERFACE_DEF :", "+        case TokenTypes.ENUM_DEF :", "+        case TokenTypes.ANNOTATION_DEF :", "+        case TokenTypes.SLIST :", "+        case TokenTypes.METHOD_DEF :", "+        case TokenTypes.CTOR_DEF :", "+            this.mCurrent = this.mFrames.get(aAST);", "+            break;", "+        default :", "+            // do nothing", "+        }", "+    } // end visitToken", "-            this.mFrames.enter(new ClassFrame());", "-            this.mFrames.enter(new BlockFrame());", "-            this.mFrames.enter(new MethodFrame());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb9370bf29346458f1805f6520f8b1ce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "54a09706ec1db32435b09e6b6910813325558f8d", "commitAfterChange": "abff1a2489ea8af10e1bc0a335551262d22f44e7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void process(File aFile)", "signatureAfterChange": "     public int process(File[] aFiles)", "diff": ["+        for (int i = 0; i < mFileSetChecks.size(); i++) {", "+            FileSetCheck fileSetCheck = (FileSetCheck) mFileSetChecks.get(i);", "+            fileSetCheck.process(aFiles);", "-     **/", "-    private void process(File aFile)", "-    {", "-        // check if already checked and passed the file", "-        final String fileName = aFile.getPath();", "-        final long timestamp = aFile.lastModified();", "-        if (mCache.alreadyChecked(fileName, timestamp)) {", "-            return;", "-        }", "-", "-        mMessages.reset();", "-        try {", "-            fireFileStarted(fileName);", "-            final String[] lines = Utils.getLines(fileName);", "-            final FileContents contents = new FileContents(fileName, lines);", "-            final DetailAST rootAST = TreeWalker.parse(contents);", "-            mWalker.walk(rootAST, contents, mConfig.getClassLoader());", "-        }", "-        catch (FileNotFoundException fnfe) {", "-            mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,", "-                                               \"general.fileNotFound\", null));", "-        }", "-        catch (IOException ioe) {", "-            mMessages.add(new LocalizedMessage(", "-                              0, Defn.CHECKSTYLE_BUNDLE,", "-                              \"general.exception\",", "-                              new String[] {ioe.getMessage()}));", "-        }", "-        catch (RecognitionException re) {", "-            mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,", "-                                               \"general.exception\",", "-                                               new String[] {re.getMessage()}));", "-        }", "-        catch (TokenStreamException te) {", "-            mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,", "-                                               \"general.exception\",", "-                                               new String[] {te.getMessage()}));", "-        }", "-", "-        if (mMessages.size() == 0) {", "-            mCache.checkedOk(fileName, timestamp);", "-        }", "-        else {", "-            fireErrors(fileName, mMessages.getMessages());", "-        }", "-", "-        fireFileFinished(fileName);", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a77988c81f3989992118a10cadf39bf2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a757da64598958c48992cd1388c25a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java", "commitBeforeChange": "0fe31dfdf954242756eec703576cda4c8f561f1d", "commitAfterChange": "2057a77c3a524b86dff382ac8abdca71dd03764a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static DetailAST getPreviousStmt(DetailAST comment)", "signatureAfterChange": "     private static DetailAST getPrevCaseToken(DetailAST parentStatement)", "diff": ["-    private static DetailAST getPreviousStmt(DetailAST comment) {", "-        final DetailAST parentStatement = comment.getParent();", "-            DetailAST prevBlock;", "-                prevBlock = parentStatement.getPreviousSibling();", "-                if (prevBlock.getLastChild() != null) {", "-                    DetailAST blockBody = prevBlock.getLastChild().getLastChild();", "-                    if (blockBody.getPreviousSibling() != null) {", "-                        blockBody = blockBody.getPreviousSibling();", "-                    }", "-                    if (blockBody.getType() == TokenTypes.EXPR) {", "-                        prevStmt = blockBody.getFirstChild().getFirstChild();", "-                    }", "-                    else {", "-                        prevStmt = blockBody;", "-", "-                    }", "-                }", "-                final DetailAST parentBlock = parentStatement.getParent();", "-", "-                if (parentBlock != null && parentBlock.getParent() != null", "-                    && parentBlock.getParent().getPreviousSibling() != null", "-                    && parentBlock.getParent().getPreviousSibling()", "-                        .getType() == TokenTypes.LITERAL_CASE) {", "-", "-                    prevBlock = parentBlock.getParent().getPreviousSibling();", "-                    prevStmt = prevBlock;", "-                }", "+     */", "+    private static DetailAST getPrevCaseToken(DetailAST parentStatement) {", "+        final DetailAST prevCaseToken;", "+        final DetailAST parentBlock = parentStatement.getParent();", "+        if (parentBlock != null && parentBlock.getParent() != null", "+            && parentBlock.getParent().getPreviousSibling() != null", "+            && parentBlock.getParent().getPreviousSibling()", "+                .getType() == TokenTypes.LITERAL_CASE) {", "+", "+            prevCaseToken = parentBlock.getParent().getPreviousSibling();", "+        }", "+        else {", "+            prevCaseToken = null;", "+        }", "+        return prevCaseToken;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89f874fdbbf6385b89204e26d524dd4c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/j2ee/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/j2ee/HomeInterfaceCheck.java", "commitBeforeChange": "7a2c495da7f2fdb2632df53491a90570d2449187", "commitAfterChange": "1bca9cc4434f512d1908982dcd628680578a2a1a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void checkMethods(DetailAST aAST)", "signatureAfterChange": "     protected void checkMethods(DetailAST aAST)", "diff": ["-        final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);", "-        if (objBlock != null) {", "-            DetailAST child = (DetailAST) objBlock.getFirstChild();", "-            while (child != null) {", "-                if (child.getType() == TokenTypes.METHOD_DEF) {", "-                    if (!Utils.hasThrows(child, \"java.rmi.RemoteException\")) {", "-                        final DetailAST nameAST =", "-                            child.findFirstToken(TokenTypes.IDENT);", "-                        final String name = nameAST.getText();", "-                        log(nameAST.getLineNo(), nameAST.getColumnNo(),", "-                            \"missingthrows.bean\",", "-                             new Object[] {name, \"java.rmi.RemoteException\"});", "-                    }", "-                }", "-                child = (DetailAST) child.getNextSibling();", "-            }", "-        }", "+        checkThrows(aAST, \"java.rmi.RemoteException\");", "+        ", "+        // a home interface must have a findByPrimaryKey method", "+        checkFindByPrimaryKey(aAST);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0151d7623731749433b1b77f282024d5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aa788cda4f8a57ff13ba660123f6675", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedTest.java", "commitBeforeChange": "df5e519a3d2d6a468558161e1e61ff4634e7b533", "commitAfterChange": "09a7ca60414ea04b64f45bb190eaa26c767086be", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Test     public void testSpecialCaseDeprecated() throws Exception", "signatureAfterChange": "     @Test     public void testSpecialCaseDeprecated() throws Exception", "diff": ["-            \"5: Duplicate @deprecated tag.\",", "-            \"12: Duplicate @deprecated tag.\",", "-            \"14: Must include both @java.lang.Deprecated annotation and @deprecated Javadoc tag with description.\",", "-            \"17: Missing a Javadoc comment.\",", "-            \"19: Must include both @java.lang.Deprecated annotation and @deprecated Javadoc tag with description.\",", "-            \"24: Missing a Javadoc comment.\",", "-            \"32: Missing a Javadoc comment.\",", "-            \"33: Duplicate @deprecated tag.\",", "-            \"33: Missing a Javadoc comment.\",", "-            \"42: Duplicate @deprecated tag.\",", "-            \"42: Missing a Javadoc comment.\",", "-            \"50: Missing a Javadoc comment.\",", "-            \"51: Duplicate @deprecated tag.\",", "+            \"5: \" + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, \"@deprecated\"),", "+            \"12: \" + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, \"@deprecated\"),", "+            \"14: \" + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),", "+            \"17: \" + getCheckMessage(MSG_KEY_JAVADOC_MISSING),", "+            \"19: \" + getCheckMessage(MSG_KEY_ANNOTATION_MISSING_DEPRECATED),", "+            \"24: \" + getCheckMessage(MSG_KEY_JAVADOC_MISSING),", "+            \"32: \" + getCheckMessage(MSG_KEY_JAVADOC_MISSING),", "+            \"33: \" + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, \"@deprecated\"),", "+            \"33: \" + getCheckMessage(MSG_KEY_JAVADOC_MISSING),", "+            \"42: \" + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, \"@deprecated\"),", "+            \"42: \" + getCheckMessage(MSG_KEY_JAVADOC_MISSING),", "+            \"50: \" + getCheckMessage(MSG_KEY_JAVADOC_MISSING),", "+            \"51: \" + getCheckMessage(MSG_KEY_JAVADOC_DUPLICATE_TAG, \"@deprecated\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b3bee3541ab8daef8d6d3ef14ed7089", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java", "commitBeforeChange": "df5e519a3d2d6a468558161e1e61ff4634e7b533", "commitAfterChange": "09a7ca60414ea04b64f45bb190eaa26c767086be", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testCommaAlwaysViolations() throws Exception", "signatureAfterChange": "      @Test     public void testCommaAlwaysViolations() throws Exception", "diff": ["-            \"3:20: Annotation array values must contain trailing comma.\",", "-            \"6:30: Annotation array values must contain trailing comma.\",", "-            \"10:40: Annotation array values must contain trailing comma.\",", "-            \"13:44: Annotation array values must contain trailing comma.\",", "-            \"16:54: Annotation array values must contain trailing comma.\",", "-            \"24:37: Annotation array values must contain trailing comma.\",", "-            \"24:65: Annotation array values must contain trailing comma.\",", "-            \"26:21: Annotation array values must contain trailing comma.\",", "-            \"26:30: Annotation array values must contain trailing comma.\",", "-            \"29:39: Annotation array values must contain trailing comma.\",", "-            \"29:49: Annotation array values must contain trailing comma.\",", "-            \"32:21: Annotation array values must contain trailing comma.\",", "-            \"32:56: Annotation array values must contain trailing comma.\",", "+            \"3:20: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"6:30: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"10:40: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"13:44: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"16:54: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"24:37: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"24:65: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"26:21: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"26:30: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"29:39: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"29:49: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"32:21: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),", "+            \"32:56: \" + getCheckMessage(MSG_KEY_ANNOTATION_TRAILING_COMMA_MISSING),"]}]}
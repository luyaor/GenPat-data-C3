{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc4586df82ef480ec71bfaafd2a25d6a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "567f2592eccd0b7568cf29601fef383e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java", "commitBeforeChange": "2da168644500c915660b7cfac9668b44317d81fc", "commitAfterChange": "70c83141b4983d3c6073fb645158fc2755d5a6f0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 16, "signatureBeforeChange": "      @Test     public void testOnlySamePackage() throws Exception", "signatureAfterChange": "      @Test     public void testSamePackageDepth3() throws Exception", "diff": ["-    public void testOnlySamePackage() throws Exception {", "-        final DefaultConfiguration checkConfig =", "-                createCheckConfig(CustomImportOrderCheck.class);", "-        checkConfig.addAttribute(\"customImportOrderRules\", \"SAME_PACKAGE(3)\");", "-        checkConfig.addAttribute(\"sortImportsInGroupAlphabetically\", \"true\");", "-        final String[] expected = {", "-            \"4: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "-            \"6: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "-            \"7: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "-            \"8: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "-            \"9: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "-        };", "-", "-        verify(checkConfig, new File(\"src/test/resources-noncompilable/com/puppycrawl/tools/\"", "-                + \"checkstyle/imports/\"", "-                + \"InputCustomImportOrderSamePackage2.java\").getCanonicalPath(), expected);", "-    }", "+", "+    @Test", "+    public void testSamePackageDepth3() throws Exception {", "+        final DefaultConfiguration checkConfig =", "+                createCheckConfig(CustomImportOrderCheck.class);", "+        checkConfig.addAttribute(\"sortImportsInGroupAlphabetically\", \"false\");", "+        checkConfig.addAttribute(\"separateLineBetweenGroups\", \"false\");", "+        checkConfig.addAttribute(\"customImportOrderRules\",", "+                \"SAME_PACKAGE(3)\");", "+        final String[] expected = {", "+            \"10: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "+            \"11: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "+            \"12: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "+            };", "+", "+        verify(checkConfig, new File(\"src/test/resources-noncompilable/com/puppycrawl/tools/\"", "+                + \"checkstyle/imports/\"", "+                + \"InputCustomImportOrderSamePackageDepth2-5.java\").getCanonicalPath(), expected);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c35fb61420658157d5cae806e4717ba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheckTest.java", "commitBeforeChange": "839778122441a69ad3607375d9fe5a320499c1cd", "commitAfterChange": "b930ba24beb9c8c165b4ba1bf530cee4c2d87b0f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testIncorrectCustom() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrectCustom() throws Exception", "diff": ["-        final String tagOrder = \"[@author, @version, @param, @return, @throws, @exception, @see,\"", "-                + \" @since, @serial, @serialField, @serialData, @deprecated]\";", "+        final String tagOrder = \"[@since, @version, @param, @return, @throws, @exception,\"", "+                + \" @deprecated, @see, @serial, @serialField, @serialData, @author]\";", "+        final String customOrder = \" @since,  @version, @param,@return,@throws, @exception,\"", "+                + \"@deprecated, @see,@serial,   @serialField,  @serialData,@author\";", "+", "+        checkConfig.addAttribute(\"tagOrder\", customOrder);", "-            \"9: \" + getCheckMessage(MSG_KEY, tagOrder),", "-            \"11: \" + getCheckMessage(MSG_KEY, tagOrder),", "-            \"12: \" + getCheckMessage(MSG_KEY, tagOrder),", "-            \"115: \" + getCheckMessage(MSG_KEY, tagOrder),", "+            \"113: \" + getCheckMessage(MSG_KEY, tagOrder),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc5e287339f2fcf37c422034f8eb6337", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheckTest.java", "commitBeforeChange": "5f68bb50fd191fec409f5edb90755a18fce3e0ac", "commitAfterChange": "b436b3cd9860529718b95c36dafe565fe68f6293", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testSigleLineIfBlock() throws Exception", "signatureAfterChange": "      @Test     public void testSigleLineLambda() throws Exception", "diff": ["-    public void testSigleLineIfBlock() throws Exception", "-        checkConfig.addAttribute(\"allowSingleLineIf\", \"true\");", "-        verify(checkConfig, getPath(\"InputBracesSingleLineIfBlock.java\"), expected);", "+", "+    @Test", "+    public void testSigleLineLambda() throws Exception", "+    {", "+        final DefaultConfiguration checkConfig =", "+            createCheckConfig(NeedBracesCheck.class);", "+        checkConfig.addAttribute(\"tokens\", \"LAMBDA\");", "+        checkConfig.addAttribute(\"allowSingleLineStatement\", \"true\");", "+        final String[] expected = {", "+        };", "+        verify(checkConfig, new File(\"src/test/resources-noncompilable/com/puppycrawl/\"", "+                + \"tools/checkstyle/blocks/InputSingleLineLambda.java\").getCanonicalPath(),", "+                expected);", "+    }"]}]}
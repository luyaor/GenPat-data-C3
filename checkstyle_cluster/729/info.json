{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3c03a6fc8ffc41f9747f17df5cb379b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fa45b2547f7a8919429ffac7cd46103", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ModifierOrderCheck.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                log(error.getLineNo(), error.getColumnNo(),", "-                        \"mod.order\", error.getText());", "+                if (error.getType() == TokenTypes.ANNOTATION) {", "+                    log(error.getLineNo(), error.getColumnNo(),", "+                            \"annotation.order\",", "+                             error.getFirstChild().getText()", "+                             + error.getFirstChild().getNextSibling()", "+                                .getText());", "+                }", "+                else {", "+                    log(error.getLineNo(), error.getColumnNo(),", "+                            \"mod.order\", error.getText());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9b1ddcc8bfadeccc976ef2b142049af", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java", "commitBeforeChange": "c24b03f33ff0c43463e471346a1d2c6857ba4f5e", "commitAfterChange": "9c56d5765626a01b8388481229eef4d7c9ff60ce", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private void checkImports()", "signatureAfterChange": "     private void checkImports()", "diff": ["-        // Loop checking for unused imports", "+        // Loop checking imports", "-            if (!mReferenced.contains(basename(imp.getText()))) {", "+", "+            if (fromPackage(imp.getText(), \"java.lang\")) {", "+                log(imp.getLineNo(),", "+                    \"Redundant import from the java.lang package.\");", "+            }", "+            else if (fromPackage(imp.getText(), mPkgName)) {", "+                log(imp.getLineNo(), \"Redundant import from the same package.\");", "+            }", "+            else if (!imp.getText().endsWith(\".*\") &&", "+                     !mReferenced.contains(basename(imp.getText())))", "+            {"]}]}
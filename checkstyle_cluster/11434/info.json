{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e919af0dfacbf1667cf5755ba4d9fe9d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10988c31a9905afcd76e5d7f9efc8593", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAst)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAst)", "+    public void visitToken(DetailAST ast)", "-        switch (aAst.getType()) {", "+        switch (ast.getType()) {", "-            visitPackageDef(aAst);", "+            visitPackageDef(ast);", "-            visitClassDef(aAst);", "+            visitClassDef(ast);", "-            visitMethodDef(aAst);", "+            visitMethodDef(ast);", "-            throw new IllegalStateException(aAst.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6717f869033428e7ea85aa787639f29f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (isOverridingMethod(aAST)) {", "-            mMethodStack.add(new MethodNode(aAST));", "+        if (isOverridingMethod(ast)) {", "+            methodStack.add(new MethodNode(ast));", "-        else if (isSuperCall(aAST)) {", "-            final MethodNode methodNode = mMethodStack.getLast();", "+        else if (isSuperCall(ast)) {", "+            final MethodNode methodNode = methodStack.getLast();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ec540812fcf3b13c7e05e13a4ce2d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            visitMethodDef(aAST);", "+            visitMethodDef(ast);", "-            visitAssign(aAST);", "+            visitAssign(ast);", "-            visitIncDec(aAST);", "+            visitIncDec(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae48ecf68ff4919e3c3f9ee4d81c2bae", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "       @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "       @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            leaveForIter(aAST.getParent());", "+            leaveForIter(ast.getParent());", "-            leaveForEach(aAST);", "+            leaveForEach(ast);", "-            leaveForDef(aAST);", "+            leaveForDef(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}]}
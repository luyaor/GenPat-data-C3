{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fc983535447205e2abe568f3212417b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d291adf90dfa0ce464309ed63adcd598", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "1ef123bf60e8f4ba348f2e6399175dee62f016b2", "commitAfterChange": "bc034f53c0b807bc1a4234a3c0313d3761ed5b62", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     void persist() throws IOException", "signatureAfterChange": "     void persist() throws IOException", "diff": ["+        try {", "+            final Path directory = Paths.get(fileName).getParent();", "+            if (directory != null) {", "+                Files.createDirectories(directory);", "+            }", "+        }", "+        catch (InvalidPathException | AccessDeniedException ex) {", "+            throw new IllegalStateException(ex.getMessage(), ex);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc238ca968f46cc62ef9791c11029b3a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "e7b146aa34bbe3b15281109837d18777adb73d02", "commitAfterChange": "be8127a604bfdd91ff7cd32a1f825c9851d791ec", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static Configuration loadConfiguration(String aConfig,         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)         throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(String aConfig,         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)         throws CheckstyleException", "diff": ["-                if (!file.exists()) {", "-                    throw new FileNotFoundException(aConfig);", "+                if (file.exists()) {", "+                    uri = file.toURI();", "-                uri = file.toURI();", "+                else {", "+                    // check to see if the file is in the classpath", "+                    try {", "+                        final URL configUrl = ConfigurationLoader.class", "+                                .getResource(aConfig);", "+                        if (configUrl == null) {", "+                            throw new FileNotFoundException(aConfig);", "+                        }", "+                        uri = configUrl.toURI();", "+                    }", "+                    catch (final URISyntaxException e) {", "+                        throw new FileNotFoundException(aConfig);", "+                    }", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc2bc51b5cadad0df7533a41f0eae499", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "181ec718599ba5707e76cc682e8db7a8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ModifierOrderCheck.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     DetailAST checkOrderSuggestedByJLS(List aModifiers)", "signatureAfterChange": "     DetailAST checkOrderSuggestedByJLS(List aModifiers)", "diff": ["+        //No modifiers, no problems", "+        if (!it.hasNext()) {", "+            return null;", "+        }", "+", "+        //Speed past all initial annotations", "-            if (!it.hasNext()) {", "-                return null;", "+            modifier = (DetailAST) it.next();", "+        }", "+        while (it.hasNext() && (modifier.getType() == TokenTypes.ANNOTATION));", "+", "+        //All modifiers are annotations, no problem", "+        if (modifier.getType() == TokenTypes.ANNOTATION) {", "+            return null;", "+        }", "+", "+        while (i < JLS_ORDER.length) {", "+            if (modifier.getType() == TokenTypes.ANNOTATION) {", "+                //Annotation not at start of modifiers, bad", "+                return modifier;", "-            modifier = (DetailAST) it.next();", "-        } while (i < JLS_ORDER.length);", "+", "+            if (i == JLS_ORDER.length) {", "+                //Current modifier is out of JLS order", "+                return modifier;", "+            }", "+            else if (!it.hasNext()) {", "+                //Reached end of modifiers without problem", "+                return null;", "+            }", "+            else {", "+                modifier = (DetailAST) it.next();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26fbfb942ddbed229c6b685cba8456c9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "2d1687465f841ead6eaf930f36040b17871e672e", "commitAfterChange": "bb1db4938ccae0f7149461ea372398fb8a53f2a8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String aClassName)", "signatureAfterChange": "     private String getIllegalInstantiation(String aClassName)", "diff": ["-                return illegal;", "+                // java.lang needs no import, but a class without import might", "+                // also come from the same file or be in the same package.", "+                // E.g. if a class defines an inner class \"Boolean\",", "+                // the expression \"new Boolean()\" refers to that class,", "+                // not to java.lang.Boolean", "+", "+                boolean isSameFile = mClassNames.contains(aClassName);", "+", "+                boolean isSamePackage = false;", "+                try {", "+                    final ClassLoader classLoader = getClassLoader();", "+                    if (classLoader != null) {", "+                        final String fqName = mPkgName + \".\" + aClassName;", "+                        classLoader.loadClass(fqName);", "+                        // no ClassNotFoundException, fqName is a known class", "+                        isSamePackage = true;", "+                    }", "+                }", "+                catch (ClassNotFoundException ex) {", "+                    // not a class from the same package", "+                    isSamePackage = false;", "+                }", "+", "+                if (!(isSameFile || isSamePackage)) {", "+                    return illegal;", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36aee565e28c5ce581246cf54dffa19a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static DetailAST getArrayIdentifier(DetailAST arrayDeclarator)", "signatureAfterChange": "     private static DetailAST getIndexOpPreviousElement(DetailAST ast)", "diff": ["+     */", "+    private static DetailAST getIndexOpPreviousElement(DetailAST ast) {", "+        DetailAST result;", "+        final DetailAST firstChild = ast.getFirstChild();", "+        if (firstChild.getType() == TokenTypes.INDEX_OP) {", "+            // second or higher array index", "+            result = firstChild.findFirstToken(TokenTypes.RBRACK);", "+        }", "+        else {", "+            final DetailAST ident = getIdentLastToken(ast);", "+            if (ident == null) {", "+                // construction like ((byte[]) pixels)[0]", "+                result = ast.findFirstToken(TokenTypes.RPAREN);", "+                result = ident;", "+            }", "+        }", "+        return result;", "+    }", "-     */", "-    private static DetailAST getArrayIdentifier(DetailAST arrayDeclarator) {", "-        return arrayDeclarator.getParent().getNextSibling();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "385b6b46277b2da6f6c15935c48fc4e1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "be7d2571b8482bf9cb0f8f258b6d06681cc8b698", "commitAfterChange": "70774706483eb0f9d04500cb64f4ce4c995b56f8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {", "+        if (TokenTypes.INTERFACE_DEF == aAST.getType()) {", "+            final DetailAST modifiers =", "+                aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            if (null != modifiers) {", "+                final DetailAST modifier =", "+                    modifiers.findFirstToken(TokenTypes.LITERAL_STATIC);", "+                if (null != modifier) {", "+                    log(modifier.getLineNo(), modifier.getColumnNo(),", "+                        \"redundantModifier\", modifier.getText());", "+                }", "+            }", "+        }", "+        else if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57734a9c7bf52894a562b24df9ac5c23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "176301250bfd2063f405fed4a960064e0a3e0230", "commitAfterChange": "61afa5374e2df61b421357868481edcc4e94845f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private static boolean containsAllSafeTokens(final DetailAST expr)", "signatureAfterChange": "     private boolean containsAllSafeTokens(final DetailAST expr)", "diff": ["-    private static boolean containsAllSafeTokens(final DetailAST expr) {", "+    private boolean containsAllSafeTokens(final DetailAST expr) {", "-        if (arg.branchContains(TokenTypes.METHOD_CALL)) {", "-            return false;", "-        }", "-        //Plus assignment can have ill affects", "-        //do not want to recommend moving expression", "-        //See example:", "-        //String s = \"SweetString\";", "-        //s.equals(s += \"SweetString\"); //false", "-        //s = \"SweetString\";", "-        //(s += \"SweetString\").equals(s); //true", "+        boolean argIsNotNull = false;", "+        if (arg.getType() == TokenTypes.PLUS) {", "+            DetailAST child = arg.getFirstChild();", "+            while (child != null", "+                    && !argIsNotNull) {", "+                argIsNotNull = child.getType() == TokenTypes.STRING_LITERAL", "+                        || child.getType() == TokenTypes.IDENT;", "+                child = child.getNextSibling();", "+            }", "+        }", "-        return !arg.branchContains(TokenTypes.PLUS_ASSIGN)", "-                && !arg.branchContains(TokenTypes.IDENT)", "-                && !arg.branchContains(TokenTypes.LITERAL_NULL);", "+        return argIsNotNull", "+                || !arg.branchContains(TokenTypes.IDENT)", "+                    && !arg.branchContains(TokenTypes.LITERAL_NULL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aa699ca44f8d2be56337d4e1487582c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "7f7db38a097a95c264307123924779380fb40077", "commitAfterChange": "60847a32d538e9a0f1c1de3e349e8b3833741506", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+            String text = aAST.getText();", "+            int columnNo = aAST.getColumnNo();", "+            final DetailAST parent = aAST.getParent();", "+            if (parent.getType() == TokenTypes.UNARY_MINUS) {", "+                columnNo--;", "+                text = \"-\" + text;", "+            }", "+            else if (parent.getType() == TokenTypes.UNARY_PLUS) {", "+                columnNo--;", "+                text = \"+\" + text;", "+            }", "-                aAST.getColumnNo(),", "+                columnNo,", "-                aAST.getText());", "+                text);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b4a7a70b08db72857e7ce2ce519f888", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ParenPadCheck.java", "commitBeforeChange": "081f9e7f7f70a5da494c9e1185c27f1766e16acc", "commitAfterChange": "916417fc6214ab75606d2fbc1d7b511509ffe25b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processRight(DetailAST aAST)", "signatureAfterChange": "     private void processRight(DetailAST aAST)", "diff": ["-            if ((PadOption.NOSPACE == getAbstractOption())", "+            boolean followsEmptyForIterator = false;", "+            final DetailAST parent = aAST.getParent();", "+            if ((parent != null) ", "+                && (parent.getType() == TokenTypes.LITERAL_FOR))", "+            {", "+                final DetailAST forIterator =", "+                    parent.findFirstToken(TokenTypes.FOR_ITERATOR);", "+                followsEmptyForIterator = (forIterator.getChildCount() == 0)", "+                    && (aAST == forIterator.getNextSibling());", "+            }", "+            if (followsEmptyForIterator) {", "+                return;", "+//                if (mPadEmptyForIterator", "+//                    && !Character.isWhitespace(line.charAt(before)))", "+//                {", "+//                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+//                        \"ws.notPreceeded\", \")\");", "+//                }", "+//                else if (!mPadEmptyForIterator", "+//                    && Character.isWhitespace(line.charAt(before)))", "+//                {", "+//                    log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");", "+//                }  ", "+            }", "+            else if ((PadOption.NOSPACE == getAbstractOption())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad89465870854b1058b1cc5c46b4fe2b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java", "commitBeforeChange": "daf8230919a8ffc9058a7ce129f5c60309739a00", "commitAfterChange": "a0012d03eb6a7ebc42f1986f09a8fe698c09eeb0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        final DetailAST slistAST = aAST.findFirstToken(TokenTypes.SLIST);", "-        if (slistAST != null) {", "+        final DetailAST slistToken = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST leftCurly = slistToken != null", "+                ? slistToken : aAST.findFirstToken(TokenTypes.LCURLY);", "+        if (leftCurly != null) {", "-                if (slistAST.getChildCount() <= 1) {", "-                    log(slistAST.getLineNo(),", "-                        slistAST.getColumnNo(),", "+                boolean emptyBlock;", "+                if (leftCurly.getType() == TokenTypes.LCURLY) {", "+                    emptyBlock = leftCurly.getNextSibling().getType() != TokenTypes.CASE_GROUP;", "+                }", "+                else {", "+                    emptyBlock = leftCurly.getChildCount() <= 1;", "+                }", "+                if (emptyBlock) {", "+                    log(leftCurly.getLineNo(),", "+                        leftCurly.getColumnNo(),", "-                    && !hasText(slistAST))", "+                    && !hasText(leftCurly))", "-                log(slistAST.getLineNo(),", "-                    slistAST.getColumnNo(),", "+                log(leftCurly.getLineNo(),", "+                    leftCurly.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdcbd2303cde8acdd736b27fca585342", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "f8f6ded7b447d5136ae01ad878966e2955ca730a", "commitAfterChange": "3c0608f33a6c41cf96056c52ae99070cbe5062d5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)", "signatureAfterChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)", "diff": ["-        if (\"check\".equals(aQName)) {", "+        if (\"global\".equals(aQName)) {", "+            isInGlobalElement = true;", "+        }", "+        else if (\"check\".equals(aQName)) {", "-            mCurrent.addProperty(aAtts.getValue(\"name\"),", "-                                 aAtts.getValue(\"value\"));", "+            final String name = aAtts.getValue(\"name\");", "+            String value = aAtts.getValue(\"value\");", "+            ", "+            if (value == null) {", "+                //global?", "+                String globalKey = aAtts.getValue(\"from-global\");", "+                value = (String) mProps.get(globalKey); ", "+            }", "+                ", "+            if (isInGlobalElement) {", "+                mProps.setProperty(name, value);", "+            }", "+            else {", "+                mCurrent.addProperty(name, value);", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0a620fc3cbeee430a1973a5fa5c3ade", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java", "commitBeforeChange": "6985c4758d4a3252951a6a26b8efdd7b5f0adff4", "commitAfterChange": "b405880b6e79f143c3ba3651fe6c8b68324fca51", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void visitSemi(DetailAST ast)", "signatureAfterChange": "     private static boolean isMultilineStatement(DetailAST ast)", "diff": ["-    private void visitSemi(DetailAST ast) {", "-        if (exprDepth == 0) {", "-            lastStatementEnd = ast.getLineNo();", "+    private static boolean isMultilineStatement(DetailAST ast) {", "+        final boolean multiline;", "+        if (ast.getPreviousSibling() != null) {", "+            final DetailAST prevSibling = ast.getPreviousSibling();", "+            if (prevSibling.getLineNo() != ast.getLineNo()", "+                    && ast.getParent() != null) {", "+                multiline = true;", "+            }", "+            else {", "+                multiline = false;", "+            }", "+        else {", "+            multiline = false;", "+        }", "+        return multiline;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d49319d3810d0f390ce72d2d907807bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java", "commitBeforeChange": "9cff1673f1d42910c654e0af5365d68591f104f0", "commitAfterChange": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setHeader(String aHeader)", "signatureAfterChange": "     public void setHeader(String aHeader)", "diff": ["-        mHeaderInfo.setHeader(aHeader);", "+        if ((aHeader == null) || (aHeader.trim().length() == 0)) {", "+            return;", "+        }", "+", "+        checkHeaderNotInitialized();", "+", "+        final String headerExpandedNewLines = aHeader.replaceAll(\"\\\\\\\\n\", \"\\n\");", "+", "+        final Reader headerReader = new StringReader(headerExpandedNewLines);", "+        try {", "+            loadHeader(headerReader);", "+        }", "+        catch (final IOException ex) {", "+            throw new ConversionException(\"unable to load header\", ex);", "+        }", "+        finally {", "+            Utils.closeQuietly(headerReader);", "+        }", "+    }"]}]}
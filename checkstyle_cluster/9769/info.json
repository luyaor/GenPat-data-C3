{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec5419e6eededb62acd1c8ffc6b50649", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c66095b83249ef7456b92b840bb3bc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private int findTextStart(String aLine)", "signatureAfterChange": "     private int findTextStart(String line)", "diff": ["-    private int findTextStart(String aLine)", "+    private int findTextStart(String line)", "-        for (int i = 0; i < aLine.length(); i++) {", "-            if (!Character.isWhitespace(aLine.charAt(i))) {", "-                if (aLine.regionMatches(i, \"/**\", 0, \"/**\".length())) {", "+        for (int i = 0; i < line.length(); i++) {", "+            if (!Character.isWhitespace(line.charAt(i))) {", "+                if (line.regionMatches(i, \"/**\", 0, \"/**\".length())) {", "-                else if (aLine.regionMatches(i, \"*/\", 0, 2)) {", "+                else if (line.regionMatches(i, \"*/\", 0, 2)) {", "-                else if (aLine.charAt(i) != '*') {", "+                else if (line.charAt(i) != '*') {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd9fcb3faf44d6ce171510d46bd14772", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "fd33eb9c26eb958e03a91ac40a18245f8a41c584", "commitAfterChange": "bdda55ed1b207cab5e7f8ab3e6ebfb4d07a62a5a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getDisallowedAbbreviation(String str)", "signatureAfterChange": "     private String getDisallowedAbbreviation(String str)", "diff": ["-                    // -1 as a first capital is usually beginning of next word", "-                    final int abbrLength = endIndex - beginIndex;", "-                    if (abbrLength > allowedAbbreviationLength) {", "-                        result = str.substring(beginIndex, endIndex);", "-                        if (!allowedAbbreviations.contains(result)) {", "-                            break;", "-                        }", "-                        else {", "-                            result = null;", "-                        }", "+                    // -1 as a first capital is usually beginning of next word", "+                    result = getAbbreviationIfIllegal(str, beginIndex, endIndex);", "+                    if (result != null) {", "+                        break;", "-        if (abbrStarted) {", "+        // if abbreviation at the end of name and it is not single character (example: scaleX)", "+        if (abbrStarted && beginIndex != str.length() - 1) {", "-            final int abbrLength = endIndex - beginIndex;", "-            if (abbrLength > 1 && abbrLength > allowedAbbreviationLength) {", "-                result = str.substring(beginIndex, endIndex);", "-                if (allowedAbbreviations.contains(result)) {", "-                    result = null;", "-                }", "+            result = getAbbreviationIfIllegal(str, beginIndex, endIndex);", "+        }", "+        return result;", "+    }"]}]}
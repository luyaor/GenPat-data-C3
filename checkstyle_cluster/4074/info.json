{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7bbc24f2227ad5b5acbb81d81612937", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "189cf77f62e61cb8e895db6f95dbba50", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/j2ee/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/j2ee/EntityBeanEjbSelectCheck.java", "commitBeforeChange": "772107d27c1d79cee70b5013e6cab369b8abfe19", "commitAfterChange": "d0fbb100b68800de625f53db27e6296beda76cc4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+            if (!Utils.hasThrows(aAST, \"javax.ejb.FinderException\")) {", "+                log(nameAST.getLineNo(), nameAST.getColumnNo(),", "+                    \"missingthrows.bean\",", "+                    new Object[] {name, \"javax.ejb.FinderException\"});", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "735d6caa21c2bce168a68ff78e730cd5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "d2debccc01255ba1a0fe5779968c73a3e666e998", "commitAfterChange": "a2c4566348d41c5eed923c33670cb48bf30c951b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private List<JavadocTag> getJavadocTags(TextBlock aCmt)", "signatureAfterChange": "     private List<JavadocTag> getJavadocTags(TextBlock aCmt)", "diff": ["+", "-                tags.add(new JavadocTag(aCmt.getStartLineNo() + i, col,", "-                                        tagName, content.trim()));", "+", "+                if (JavadocTagInfo.isValidName(tagName)) {", "+                    tags.add(new JavadocTag(aCmt.getStartLineNo() + i, col,", "+                            tagName, content.trim()));", "+                }", "+                else if (!mAllowUnknownTags) {", "+                    log(aCmt.getStartLineNo() + i, col,", "+                            \"javadoc.unknownTag\", tagName);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78de26cbc55c598a16c60b73a407e250", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "e4434ebe00405dca6bc2009666d6cfea7b15cfd5", "commitAfterChange": "0fdfc2f36086a108407fc7d51edc5b8c934b658a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void visitToken(DetailAST aAST)", "signatureAfterChange": "      public void visitToken(DetailAST aAST)", "diff": ["-        // TODO: i18n", "-            log(aAST.getLineNo(), \"NO LEADING SPACE for \" + aAST.getText());", "+            log(aAST.getLineNo(), aAST.getColumnNo(),", "+                    \"ws.notPreceeded\", new Object[]{aAST.getText()});", "-            log(aAST.getLineNo(), \"NO TRAILING SPACE for \" + aAST.getText());", "+            log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),", "+                    \"ws.notFollowed\", new Object[]{aAST.getText()});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5f7e681520a19aa3814a59acd386258", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "commitBeforeChange": "b9cfa0969468d97aade2ec022dfff34dc33e7b1a", "commitAfterChange": "9d11682be9f541bcc21cfc533ede5e0b5a7862f4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void visitClassDef(DetailAST aAST)", "signatureAfterChange": "     private void visitClassDef(DetailAST aAST)", "diff": ["+        final String className =", "+            aAST.findFirstToken(TokenTypes.IDENT).getText();", "-            final String className =", "-                aAST.findFirstToken(TokenTypes.IDENT).getText();", "-", "-            if (!isMatchingClassName(className)) {", "+            // if class has abstract modifier", "+            if (mCheckName && !isMatchingClassName(className)) {", "+        else {", "+            // if class without abstract modifier", "+            if (mCheckAbstractModifier", "+                    && isMatchingClassName(className))", "+            {", "+                log(aAST.getLineNo(), aAST.getColumnNo(),", "+                        \"no.abstract.class.modifier\", className);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec5faa29f87611b84741339df7cad66a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/j2ee/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/j2ee/AbstractBeanCheck.java", "commitBeforeChange": "d0fbb100b68800de625f53db27e6296beda76cc4", "commitAfterChange": "135b7a010b6671f2457b1be90b8a06daae116efe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void checkBean(DetailAST aAST, String aBeanType)", "signatureAfterChange": "     protected void checkBean(DetailAST aAST, String aBeanType)", "diff": ["+        if (Utils.isAbstract(aAST)) {", "+            log(nameAST.getLineNo(), nameAST.getColumnNo(),", "+                \"illegalmodifier.bean\",", "+            new Object[] {aBeanType, \"abstract\"});", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17877118475fa495421724a8f84f7d76", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23ec352c1789de9cff69ea29229a0c1a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "ead8bd33ba69eb06ce1c411bb80af54cecf8d76d", "commitAfterChange": "a8b8375b1db65b131938111ff283baed771161ed", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["+        final String msg = \"%s occurred during the analysis of file %s .\";", "+", "-            Utils.getExceptionLogger()", "-                .debug(\"RecognitionException occured.\", re);", "+            final String exceptionMsg = String.format(msg, \"RecognitionException\", fileName);", "+            Utils.getExceptionLogger().error(exceptionMsg);", "-            Utils.getExceptionLogger()", "-                .debug(\"TokenStreamRecognitionException occured.\", tre);", "+            final String exceptionMsg = String.format(msg, \"TokenStreamRecognitionException\",", "+                     fileName);", "+            Utils.getExceptionLogger().error(exceptionMsg);", "-            Utils.getExceptionLogger()", "-                .debug(\"TokenStreamException occured.\", te);", "+            final String exceptionMsg = String.format(msg,", "+                    \"TokenStreamException\", fileName);", "+            Utils.getExceptionLogger().error(exceptionMsg);", "+            final String exceptionMsg = String.format(msg, \"Exception\", fileName);", "+            Utils.getExceptionLogger().error(exceptionMsg);", "-            Utils.getExceptionLogger().debug(\"Throwable occured.\", err);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae44168bb0efa3bb8980198e9551c0b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava2.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "        @Override       public Range<K> get(int index)", "signatureAfterChange": "    public V get(int index)", "diff": ["-      @Override", "-      public Range<K> get(int index) {", "-        checkElementIndex(index, len);", "-        if (index == 0 || index == len - 1) {", "-          return ranges.get(index + off).intersection(range);", "-        } else {", "-          return ranges.get(index + off);", "-        }", "-      }", "+  public V get(int index) {", "+    K key = null;", "+    int len = 0;", "+    checkElementIndex(index, len);", "+    int off;", "+    RangeMap<K, V> ranges = null;", "+    if (index == 0 || index == len - 1) {", "+      Object range;", "+      return ranges.get(key);", "+    } else {", "+      return ranges.get(key);", "+    }", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba2087f7b038337053bb010490a589eb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/bcel/src/checkstyle/com/puppycrawl/tools/checkstyle/bcel/ClassFileSetCheck.java", "commitBeforeChange": "65603924fdf47c194fc2ef9e0bc60bfc81ee4166", "commitAfterChange": "2707ab4393bd5a585f1f794c43515b8a1b900078", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void fireErrors()", "signatureAfterChange": "     private void fireErrors()", "diff": ["-        final LocalizedMessage[] errors = getMessageCollector().getMessages();", "-        getMessageCollector().reset();", "-        getMessageDispatcher().fireErrors(\"\", errors);", "+        Set keys = mMessageMap.keySet();", "+        Iterator iter = keys.iterator();", "+        while (iter.hasNext()) {", "+            String key = (String) iter.next();", "+            getMessageDispatcher().fireFileStarted(key);", "+            LocalizedMessages localizedMessages = (LocalizedMessages) mMessageMap.get(key);", "+            final LocalizedMessage[] errors = localizedMessages.getMessages();", "+            localizedMessages.reset();", "+            getMessageDispatcher().fireErrors(key, errors);", "+            getMessageDispatcher().fireFileFinished(key);", "+        }"]}]}
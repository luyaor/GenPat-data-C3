{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "91cb87fc9b0c87d3ab582ab9177fb5b2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19802be5beaffd3ede37c2c040cb13fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/OperatorWrapTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void operatorWrapTest() throws Exception", "signatureAfterChange": "      @Test     public void operatorWrapTest() throws Exception", "diff": ["-        Class<OperatorWrapCheck> clazz = OperatorWrapCheck.class;", "-        String messageKey = \"line.new\";", "+        final Class<OperatorWrapCheck> clazz = OperatorWrapCheck.class;", "+        final String messageKey = \"line.new\";", "-        Configuration checkConfig = builder.getCheckConfig(\"OperatorWrap\");", "-        String filePath = builder.getFilePath(\"OperatorWrapInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OperatorWrap\");", "+        final String filePath = builder.getFilePath(\"OperatorWrapInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4933253289b65febcfb06a422f60832c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "     public void leaveToken(DetailAST aAST)", "diff": ["-        int tokenType = aAST.getType();", "+        final int tokenType = aAST.getType();", "-            Counter counter = (Counter) mCounters.pop();", "+            final Counter counter = (Counter) mCounters.pop();", "-            int count = counter.getCount();", "+            final int count = counter.getCount();", "-            Counter counter = (Counter) mCounters.pop();", "+            final Counter counter = (Counter) mCounters.pop();", "-            int count = counter.getCount();", "+            final int count = counter.getCount();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6905084e35be77b179d07401c245b8df", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4821onevariablepreline/MultipleVariableDeclarationsTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void multipleVariableDeclarationsTest() throws Exception", "signatureAfterChange": "      @Test     public void multipleVariableDeclarationsTest() throws Exception", "diff": ["-        String msgComma = getCheckMessage(MultipleVariableDeclarationsCheck.class, \"multiple.variable.declarations.comma\");", "-        String msg = getCheckMessage(MultipleVariableDeclarationsCheck.class, \"multiple.variable.declarations\");", "+        final String msgComma = getCheckMessage(MultipleVariableDeclarationsCheck.class,", "+            \"multiple.variable.declarations.comma\");", "+        final String msg = getCheckMessage(MultipleVariableDeclarationsCheck.class,", "+            \"multiple.variable.declarations\");", "-        Configuration checkConfig = builder.getCheckConfig(\"MultipleVariableDeclarations\");", "-        String filePath = builder.getFilePath(\"MultipleVariableDeclarationsInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"MultipleVariableDeclarations\");", "+        final String filePath = builder.getFilePath(\"MultipleVariableDeclarationsInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad24917a5a7b671fa5f9a603372ffdb6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testNotConstants() throws Exception", "signatureAfterChange": "      @Test     public void testNotConstants() throws Exception", "diff": ["-        ListBuffer<String[]> options = new ListBuffer<>();", "+        final ListBuffer<String[]> options = new ListBuffer<>();", "-        ListBuffer<String> names = new ListBuffer<>();", "+        final ListBuffer<String> names = new ListBuffer<>();", "-        Context context = new Context();", "+        final Context context = new Context();", "-        JavadocTool javadocTool = JavadocTool.make0(context);", "-        RootDoc rootDoc = getRootDoc(javadocTool, options, names);", "+        final JavadocTool javadocTool = JavadocTool.make0(context);", "+        final RootDoc rootDoc = getRootDoc(javadocTool, options, names);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad31877a2b69f0be89cd26afc1427578", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void checkIndentation()", "signatureAfterChange": "     public void checkIndentation()", "diff": ["-        LineSet lines = new LineSet();", "+        final LineSet lines = new LineSet();", "-        DetailAST ident = getMainAst().findFirstToken(TokenTypes.IDENT);", "-        int lineStart = getLineStart(ident);", "+        final DetailAST ident = getMainAst().findFirstToken(TokenTypes.IDENT);", "+        final int lineStart = getLineStart(ident);", "-        DetailAST impl = getMainAst().findFirstToken(", "+        final DetailAST impl = getMainAst().findFirstToken(", "-        DetailAST ext = getMainAst().findFirstToken(TokenTypes.EXTENDS_CLAUSE);", "+        final DetailAST ext =", "+            getMainAst().findFirstToken(TokenTypes.EXTENDS_CLAUSE);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25cf4be45b3611add831631c8508b084", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39206a1a4b2d93751df3ef30aa4dd8d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/IndentationCheck.java", "commitBeforeChange": "bf6758b29dbb6f0e22d4951ea3bd25fdf45299fc", "commitAfterChange": "eaad55fdba73e17e103dc6600867f26fd6a3896b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 13, "signatureBeforeChange": "         private HandlerFactory()", "signatureAfterChange": "     public HandlerFactory getHandlerFactory()", "diff": ["-        /** creates a HandlerFactory */", "-        private HandlerFactory()", "-        {", "-            register(TokenTypes.CASE_GROUP, CaseHandler.class);", "-            register(TokenTypes.LITERAL_SWITCH, SwitchHandler.class);", "-            register(TokenTypes.SLIST, SlistHandler.class);", "-            register(TokenTypes.PACKAGE_DEF, PackageDefHandler.class);", "-            register(TokenTypes.LITERAL_ELSE, ElseHandler.class);", "-            register(TokenTypes.LITERAL_IF, IfHandler.class);", "-            register(TokenTypes.LITERAL_TRY, TryHandler.class);", "-            register(TokenTypes.LITERAL_CATCH, CatchHandler.class);", "-            register(TokenTypes.LITERAL_FINALLY, FinallyHandler.class);", "-            register(TokenTypes.LITERAL_DO, DoWhileHandler.class);", "-            register(TokenTypes.LITERAL_WHILE, WhileHandler.class);", "-            register(TokenTypes.LITERAL_FOR, ForHandler.class);", "-            register(TokenTypes.METHOD_DEF, MethodDefHandler.class);", "-            register(TokenTypes.CTOR_DEF, MethodDefHandler.class);", "-            register(TokenTypes.CLASS_DEF, ClassDefHandler.class);", "-            register(TokenTypes.OBJBLOCK, ObjectBlockHandler.class);", "-            register(TokenTypes.INTERFACE_DEF, ClassDefHandler.class);", "-            register(TokenTypes.IMPORT, ImportHandler.class);", "-            register(TokenTypes.ARRAY_INIT, ArrayInitHandler.class);", "-            register(TokenTypes.METHOD_CALL, MethodCallHandler.class);", "-            register(TokenTypes.CTOR_CALL, MethodCallHandler.class);", "-            register(TokenTypes.LABELED_STAT, LabelHandler.class);", "-            register(TokenTypes.LABELED_STAT, LabelHandler.class);", "-            register(TokenTypes.STATIC_INIT, StaticInitHandler.class);", "-        }", "+     */", "+    public HandlerFactory getHandlerFactory()", "+    {", "+        return mHandlerFactory;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5808b9fddf6007607e02908b6bdddea3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "fbbbc950e751fa629d57a5cbe08762999cfc8218", "commitAfterChange": "e030d1463c307836bbb201a202d15e81a41bcb0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+            processInterfaceOrAnnotation(ast);", "+        }", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            processMethods(ast);", "+        }", "+    }", "-", "-                // javac does not allow final or static in interface methods", "-                // order annotation fields hence no need to check that this", "-                // is not a method or annotation field", "-", "-                if (type == TokenTypes.LITERAL_PUBLIC", "-                    || type == TokenTypes.LITERAL_STATIC", "-                            && ast.getType() != TokenTypes.METHOD_DEF", "-                    || type == TokenTypes.ABSTRACT", "-                    || type == TokenTypes.FINAL) {", "-", "-            }", "-        }", "-        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "-            final DetailAST modifiers =", "-                            ast.findFirstToken(TokenTypes.MODIFIERS);", "-            // private method?", "-            boolean checkFinal =", "-                modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);", "-            // declared in a final class?", "-            DetailAST parent = ast.getParent();", "-            while (parent != null) {", "-                if (parent.getType() == TokenTypes.CLASS_DEF) {", "-                    final DetailAST classModifiers =", "-                        parent.findFirstToken(TokenTypes.MODIFIERS);", "-                    checkFinal |=", "-                        classModifiers.branchContains(TokenTypes.FINAL);", "-                    break;", "-                }", "-                parent = parent.getParent();", "-            }", "-            if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {", "-                DetailAST modifier = modifiers.getFirstChild();", "-                while (modifier != null) {", "-                    final int type = modifier.getType();", "-                    if (type == TokenTypes.FINAL) {", "-                        log(modifier.getLineNo(), modifier.getColumnNo(),", "-                                MSG_KEY, modifier.getText());", "-                        break;", "-                    }", "-                    modifier = modifier.getNextSibling();", "-                }"]}]}
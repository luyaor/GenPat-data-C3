{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40d2984595914925b004b6f8c5e60bdb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61a283cb488c44de2ed8149498cce04a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST modifiers = aAST.getFirstChild();", "-        final AST type = aAST.findFirstToken(TokenTypes.TYPE);", "-        final AST methodName = aAST.findFirstToken(TokenTypes.IDENT);", "-        final DetailAST parameters = aAST.findFirstToken(TokenTypes.PARAMETERS);", "+        final DetailAST modifiers = ast.getFirstChild();", "+        final AST type = ast.findFirstToken(TokenTypes.TYPE);", "+        final AST methodName = ast.findFirstToken(TokenTypes.IDENT);", "+        final DetailAST parameters = ast.findFirstToken(TokenTypes.PARAMETERS);", "-            mObjBlockEquals.put(aAST.getParent(), aAST);", "+            objBlockEquals.put(ast.getParent(), ast);", "-            mObjBlockWithHashCode.add(aAST.getParent());", "+            objBlockWithHashCode.add(ast.getParent());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69f6cff43490cbd54f85151f643666c4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (ScopeUtils.isLocalVariableDef(aAST)", "-            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))", "+        if (ScopeUtils.isLocalVariableDef(ast)", "+            || ScopeUtils.inInterfaceOrAnnotationBlock(ast))", "-        final DetailAST assign = aAST.findFirstToken(TokenTypes.ASSIGN);", "+        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        final DetailAST type = aAST.findFirstToken(TokenTypes.TYPE);", "-        final DetailAST ident = aAST.findFirstToken(TokenTypes.IDENT);", "+        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "+        final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c028f5c85cf13998278f68ac9d391f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {", "+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {", "-        final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {", "+        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {", "-        final DetailAST implementation = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST implementation = ast.findFirstToken(TokenTypes.SLIST);", "-        final DetailAST classDef = findContainingClass(aAST);", "+        final DetailAST classDef = findContainingClass(ast);", "-            final String name = aAST.findFirstToken(TokenTypes.IDENT).getText();", "-            log(aAST.getLineNo(), aAST.getColumnNo(),", "+            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "+            log(ast.getLineNo(), ast.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d325171c677e354264e8f5946e54989d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "99ce97725cd037d152c571e5ff58eac9247d072d", "commitAfterChange": "9241c0a692ed65fab3b3fdb3c4ff1c118794337c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isSkipCase(DetailAST ast)", "signatureAfterChange": "     private static boolean isSkipCase(DetailAST ast)", "diff": ["+        boolean skipCase = true;", "+", "-        if (ScopeUtils.isLocalVariableDef(ast)", "-            || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "-            return true;", "-        }", "+        if (!ScopeUtils.isLocalVariableDef(ast)", "+                && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "+            final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        if (assign == null) {", "-            // no assign - no check", "-            return true;", "+            if (assign != null) {", "+                final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+                skipCase = modifiers.branchContains(TokenTypes.FINAL);", "+            }", "-", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        return modifiers.branchContains(TokenTypes.FINAL);", "+        return skipCase;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea3053a61a410ddd3dcda05171fc56e7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if ((aAST.getType() == TokenTypes.VARIABLE_DEF)", "-            || (aAST.getType() == TokenTypes.PARAMETER_DEF))", "+        if ((ast.getType() == TokenTypes.VARIABLE_DEF)", "+            || (ast.getType() == TokenTypes.PARAMETER_DEF))", "-            processVariable(aAST);", "+            processVariable(ast);", "-        final DetailAST typeMods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST typeMods = ast.findFirstToken(TokenTypes.MODIFIERS);", "-                new FieldFrame(mCurrentFrame, isStaticInnerType);", "+                new FieldFrame(currentFrame, isStaticInnerType);", "-        final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);", "+        final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);", "-        mCurrentFrame = frame;", "+        currentFrame = frame;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef3487c3f4c2c47ece45577193cfd115", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "57f395fa2b2dcea7dd369ab3dd52d3d42f0e0893", "commitAfterChange": "6d9d894a62caf7e7419fcb07e7d972499e4306d7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        // do not check local variables and", "-        // fields declared in interface/annotations", "-        if (ScopeUtils.isLocalVariableDef(ast)", "-            || ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {", "+        if (isSkipCase(ast)) {", "-        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        if (assign == null) {", "-            // no assign - no check", "-            return;", "-        }", "-", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiers != null", "-            && modifiers.branchContains(TokenTypes.FINAL)) {", "-            // do not check final variables", "-            return;", "-        }", "-", "-        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "+        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "+        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "-            && (isZero(exprStart)", "-                || exprStart.getType() == TokenTypes.CHAR_LITERAL", "-                && \"'\\\\0'\".equals(exprStart.getText()))) {", "+            && isZeroChar(exprStart)) {"]}]}
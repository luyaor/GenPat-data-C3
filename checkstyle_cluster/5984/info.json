{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "103223096922cb8812e3e5e75b314290", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "085b33c1dd9090e2e397a31389d8341f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean isEmptyBody(DetailAST aLcurly)", "signatureAfterChange": "     private boolean isEmptyBody(DetailAST lcurly)", "diff": ["-    private boolean isEmptyBody(DetailAST aLcurly)", "+    private boolean isEmptyBody(DetailAST lcurly)", "-        if (aLcurly.getParent().getType() == TokenTypes.OBJBLOCK) {", "-            if (aLcurly.getNextSibling().getType() == TokenTypes.RCURLY) {", "+        if (lcurly.getParent().getType() == TokenTypes.OBJBLOCK) {", "+            if (lcurly.getNextSibling().getType() == TokenTypes.RCURLY) {", "-        else if (aLcurly.getFirstChild().getType() == TokenTypes.RCURLY) {", "+        else if (lcurly.getFirstChild().getType() == TokenTypes.RCURLY) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "225a0f6afdf7b7a75bd1bed3aa548b8e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean hasLineBreakBefore(DetailAST aRightCurly)", "signatureAfterChange": "     private boolean hasLineBreakBefore(DetailAST rightCurly)", "diff": ["-    private boolean hasLineBreakBefore(DetailAST aRightCurly)", "+    private boolean hasLineBreakBefore(DetailAST rightCurly)", "-        if (aRightCurly != null) {", "-            final DetailAST previousToken = aRightCurly.getPreviousSibling();", "-            if (previousToken != null && aRightCurly.getLineNo() == previousToken.getLineNo()) {", "+        if (rightCurly != null) {", "+            final DetailAST previousToken = rightCurly.getPreviousSibling();", "+            if (previousToken != null && rightCurly.getLineNo() == previousToken.getLineNo()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63b68e43f087e2e2f8e9af3b49dfc232", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ArrayTrailingCommaCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aArrayInit)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST arrayInit)", "diff": ["-    public void visitToken(DetailAST aArrayInit)", "+    public void visitToken(DetailAST arrayInit)", "-        final DetailAST rcurly = aArrayInit.findFirstToken(TokenTypes.RCURLY);", "+        final DetailAST rcurly = arrayInit.findFirstToken(TokenTypes.RCURLY);", "-        if ((aArrayInit.getLineNo() == rcurly.getLineNo())", "-            || (aArrayInit.getChildCount() == 1))", "+        if ((arrayInit.getLineNo() == rcurly.getLineNo())", "+            || (arrayInit.getChildCount() == 1))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6ea45f142a703479a94bbe45afb414", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java", "commitBeforeChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "commitAfterChange": "29027109bf962f47b6a6000fdca69b5679ce4b43", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void setHeader(String aHeader)", "signatureAfterChange": "     public void setHeader(String header)", "diff": ["-    public void setHeader(String aHeader)", "+    public void setHeader(String header)", "-        if ((aHeader == null) || (aHeader.trim().length() == 0)) {", "+        if ((header == null) || (header.trim().length() == 0)) {", "-        final String headerExpandedNewLines = aHeader.replaceAll(\"\\\\\\\\n\", \"\\n\");", "+        final String headerExpandedNewLines = header.replaceAll(\"\\\\\\\\n\", \"\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e88de4d1ab1ee90489164ffadec078b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void verifyLines(String[] aExpectedLines)         throws IOException", "signatureAfterChange": "     private void verifyLines(String[] expectedLines)         throws IOException", "diff": ["-    private void verifyLines(String[] aExpectedLines)", "+    private void verifyLines(String[] expectedLines)", "-        assertEquals(\"length.\", aExpectedLines.length + 3, lines.length);", "+        assertEquals(\"length.\", expectedLines.length + 3, lines.length);", "-        for (int i = 0; i < aExpectedLines.length; i++) {", "-            assertEquals(\"line \" + i + \".\", aExpectedLines[i], lines[i + 2]);", "+        for (int i = 0; i < expectedLines.length; i++) {", "+            assertEquals(\"line \" + i + \".\", expectedLines[i], lines[i + 2]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "725dd6ab9ed167753555ff4e5ce3293e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java", "commitBeforeChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "commitAfterChange": "29027109bf962f47b6a6000fdca69b5679ce4b43", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void loadHeader(final Reader aHeaderReader) throws IOException", "signatureAfterChange": "     private void loadHeader(final Reader headerReader) throws IOException", "diff": ["-    private void loadHeader(final Reader aHeaderReader) throws IOException", "+    private void loadHeader(final Reader headerReader) throws IOException", "-        final LineNumberReader lnr = new LineNumberReader(aHeaderReader);", "-        mHeaderLines.clear();", "+        final LineNumberReader lnr = new LineNumberReader(headerReader);", "+        readerLines.clear();", "-            mHeaderLines.add(l);", "+            readerLines.add(l);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfda8d4f492974c38d082e11e5b2eae6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void addFileSetCheck(FileSetCheck aFileSetCheck)", "signatureAfterChange": "     public void addFileSetCheck(FileSetCheck fileSetCheck)", "diff": ["-    public void addFileSetCheck(FileSetCheck aFileSetCheck)", "+    public void addFileSetCheck(FileSetCheck fileSetCheck)", "-        aFileSetCheck.setMessageDispatcher(this);", "-        mFileSetChecks.add(aFileSetCheck);", "+        fileSetCheck.setMessageDispatcher(this);", "+        fileSetChecks.add(fileSetCheck);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb4bc45a62833c7e7a48e92db9acf7c8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void checkEmptyLine(DetailNode aNewline)", "signatureAfterChange": "     private void checkEmptyLine(DetailNode newline)", "diff": ["-    private void checkEmptyLine(DetailNode aNewline)", "+    private void checkEmptyLine(DetailNode newline)", "-        final DetailNode nearestToken = getNearestNode(aNewline);", "-        if (!isLastEmptyLine(aNewline) && nearestToken != null", "+        final DetailNode nearestToken = getNearestNode(newline);", "+        if (!isLastEmptyLine(newline) && nearestToken != null", "-            log(aNewline.getLineNumber(), \"javadoc.paragraph.tag.after\");", "+            log(newline.getLineNumber(), \"javadoc.paragraph.tag.after\");"]}]}
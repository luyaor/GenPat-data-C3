{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a710af3b71fbc8608926d1a4d622a71d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e867401f702e4416d9e1bc16baec8c2d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java", "commitBeforeChange": "e030d1463c307836bbb201a202d15e81a41bcb0b", "commitAfterChange": "842c152be6b0bbcb754a346a6ce4b59c47469c17", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-        int startColumn;", "-        int endLine;", "-        int endColumn;", "-        if (!foundMatch && !illegalPattern && matchCount == 0) {", "-            logMessage(0);", "-        }", "-        else if (foundMatch) {", "+        if (foundMatch) {", "-            final LineColumn end;", "-            if (matcher.end() == 0) {", "-                end = text.lineColumn(0);", "-            }", "-            else {", "-                end = text.lineColumn(matcher.end() - 1);", "-            }", "-            startColumn = start.getColumn();", "-            endLine = end.getLine();", "-            endColumn = end.getColumn();", "-            if (ignoreComments) {", "-                final FileContents theFileContents = getFileContents();", "-                ignore = theFileContents.hasIntersectionWithComment(startLine,", "-                    startColumn, endLine, endColumn);", "-            }", "+", "+            ignore = isIgnore(startLine, text, start);", "+", "-            if (errorCount < errorLimit", "-                    && (ignore || illegalPattern || checkForDuplicates)) {", "+            if (canContinueValidation(ignore)) {", "+        else if (!illegalPattern && matchCount == 0) {", "+            logMessage(0);", "+        }", "+", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff08abb27761b9a572a0efca52c5df4e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-        foundMatch = mMatcher.find();", "-        if (!foundMatch && !mIllegalPattern && (mMatchCount == 0)) {", "+        foundMatch = matcher.find();", "+        if (!foundMatch && !illegalPattern && (matchCount == 0)) {", "-            final LineColumn start = text.lineColumn(mMatcher.start());", "-            final LineColumn end = text.lineColumn(mMatcher.end() - 1);", "+            final LineColumn start = text.lineColumn(matcher.start());", "+            final LineColumn end = text.lineColumn(matcher.end() - 1);", "-            if (mIgnoreComments) {", "+            if (ignoreComments) {", "-                mMatchCount++;", "-                if (mIllegalPattern || (mCheckForDuplicates", "-                        && ((mMatchCount - 1) > mDuplicateLimit)))", "+                matchCount++;", "+                if (illegalPattern || (checkForDuplicates", "+                        && ((matchCount - 1) > duplicateLimit)))", "-                    mErrorCount++;", "+                    errorCount++;", "-            if ((mErrorCount < mErrorLimit)", "-                    && (ignore || mIllegalPattern || mCheckForDuplicates))", "+            if ((errorCount < errorLimit)", "+                    && (ignore || illegalPattern || checkForDuplicates))"]}]}
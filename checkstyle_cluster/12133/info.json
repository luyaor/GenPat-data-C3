{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4b3784199d3d6ff6fbbbc6c42c924e5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0358ac54b63c53ec27ec0af04f1c5b72", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "f34eba11cbd8559d4d06f96e19affa70abaf86ff", "commitAfterChange": "0e3fe5643667a53079dbd114e5b1e9aa91fde083", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-        Checker c;", "+        final int numErrs;", "+        Checker c = null;", "+            AuditListener[] listeners = getListeners();", "+            for (int i = 0; i < listeners.length; i++) {", "+                c.addListener( listeners[i] );", "+            }", "+            final String[] files = scanFileSets();", "+            numErrs = c.process(files);", "-        catch (RESyntaxException e){", "-            e.printStackTrace();", "-            throw new BuildException(\"Unable to create a Checker\", location);", "+        catch (Exception e) {", "+            throw new BuildException(\"Unable to create a Checker\", e);", "-", "-        // Process the files", "-        int numErrs = 0;", "-        if (mFileName != null) {", "-            numErrs += c.process(mFileName);", "+        finally {", "+            if (c != null) {", "+                c.destroy();", "+            }", "-", "-        final Iterator it = mFileSets.iterator();", "-        while (it.hasNext()) {", "-            final FileSet fs = (FileSet) it.next();", "-            final DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            numErrs += process(fs.getDir(project).getAbsolutePath(),", "-                               ds.getIncludedFiles(),", "-                               c);", "-        }", "-", "-        c.destroy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c2d33ed76ff94965cf3109b070e748d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "commitBeforeChange": "3ef918920c58c550169ccef3cfe1706aede11a6e", "commitAfterChange": "5922d5a6730d7582d7d66121eb911ef9426f9e24", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void processFiles(Checker checker, final SeverityLevelCounter warningCounter,             final String checkstyleVersion)", "signatureAfterChange": "     private void processFiles(Checker checker, final SeverityLevelCounter warningCounter,             final String checkstyleVersion)", "diff": ["-        final long processingStartTime = System.currentTimeMillis();", "-        final int numErrs = checker.process(files);", "-        final long processingEndTime = System.currentTimeMillis();", "-        log(\"To process the files took \" + (processingEndTime - processingStartTime) + TIME_SUFFIX,", "-            Project.MSG_VERBOSE);", "+        int numErrs = 0;", "+", "+        try {", "+            final long processingStartTime = System.currentTimeMillis();", "+            numErrs = checker.process(files);", "+            final long processingEndTime = System.currentTimeMillis();", "+            log(\"To process the files took \" + (processingEndTime - processingStartTime)", "+                + TIME_SUFFIX, Project.MSG_VERBOSE);", "+        }", "+        catch (CheckstyleException e) {", "+            throw new BuildException(\"Unable to process files: \" + files, e);", "+        }", "-        final boolean ok = numErrs <= maxErrors", "-                && numWarnings <= maxWarnings;", "+        final boolean ok = numErrs <= maxErrors && numWarnings <= maxWarnings;"]}]}
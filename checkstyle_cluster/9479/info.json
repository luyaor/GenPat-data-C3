{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77cf9d74569e4dd809bc0303856ec73d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "773ff94cd2f11e61ce244a7d12a72891", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 20, "signatureBeforeChange": "     void reportImport(int aLineNo, String aType);", "signatureAfterChange": "     void reportImport(int aLineNo, String aType)", "diff": ["-    void reportImport(int aLineNo, String aType);", "+    void reportImport(int aLineNo, String aType)", "+    {", "+        if (!mConfig.isIgnoreImports()) {", "+            // Check for a duplicate import", "+            final Iterator it = mImports.iterator();", "+            while (it.hasNext()) {", "+                final LineText lt = (LineText) it.next();", "+                if (aType.equals(lt.getText())) {", "+                    log(aLineNo,", "+                        \"Duplicate import to line \" + lt.getLineNo() + \".\");", "+                }", "+            }", "+            // Add to list to check for duplicates and usage", "+            mImports.add(new LineText(aLineNo, aType));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc1f8131187cbcae98b1ed703c52a4c0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "7514320e04e4d35a4317172876e5f11e69a2c891", "commitAfterChange": "01d27913a71c29d6a769ed98ca7dd4ba01fe31eb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void readObject(ObjectInputStream aStream)         throws IOException, ClassNotFoundException", "signatureAfterChange": "     private void readObject(ObjectInputStream aStream)         throws IOException, ClassNotFoundException", "diff": ["-        mRegexps = new HashMap();", "-", "-        try {", "-            // Loop on the patterns creating the RE's", "-            final Iterator keys = mPatterns.keySet().iterator();", "-            while (keys.hasNext()) {", "-                final String k = (String) keys.next();", "-                mRegexps.put(k, new RE((String) mPatterns.get(k)));", "-            }", "-        }", "-        catch (RESyntaxException ex) {", "-            // This should never happen, as the serialized regexp patterns", "-            // somehow must have passed a setPattern() method.", "-            throw new InvalidObjectException(", "-                \"invalid regular expression syntax\");", "-        }"]}]}
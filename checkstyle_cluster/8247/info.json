{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ba96e46706b3f1a49cbdca2746ae95e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de1335258f5c2f0d95cf58a9d3048514", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantModifierCheck.java", "commitBeforeChange": "a9ad125a4c6e2d0edc7a7a460ba3cd249b0a0817", "commitAfterChange": "9a05522373905e39aa764009d1c543092c14f691", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                    String modifier = ast.getText();", "-                    if (\"public\".equals(modifier)", "-                        || \"abstract\".equals(modifier))", "+", "+                    // javac does not allow final in interface methods", "+                    // hence no need to check that this is not a method", "+", "+                    final int type = ast.getType();", "+                    if (type == TokenTypes.LITERAL_PUBLIC", "+                            || type == TokenTypes.ABSTRACT", "+                            || type == TokenTypes.FINAL)", "-                        log(ast.getLineNo(),", "-                            ast.getColumnNo(),", "-                            \"redundantModifier\",", "-                            new String[] {modifier});", "+                            String modifier = ast.getText();", "+                            log(ast.getLineNo(),", "+                                    ast.getColumnNo(),", "+                                    \"redundantModifier\",", "+                                    new String[] {modifier});", "+                            break;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e771e31b9115ca1fadcbbd820538348a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java", "commitBeforeChange": "e8d025321c3d1f5741e860bd96a93e7d2169ca9c", "commitAfterChange": "661274b68096ccd5876abb8eacf7c8d42a939a0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+                final int lineNo = aAST.getLineNo();", "-                    contents.getJavadocBefore(aAST.getLineNo());", "+                    contents.getJavadocBefore(lineNo);", "-                    log(aAST.getLineNo(), \"javadoc.missing\");", "+                    log(lineNo, \"javadoc.missing\");", "-                    if ((mAuthorRE != null)", "-                        && (mAuthorRE.grep(cmt).length == 0))", "-                    {", "-                        // TODO: better error message", "-                        log(aAST.getLineNo(), \"type.missingTag\", \"@author\");", "-                    }", "-", "-                    if ((mVersionRE != null)", "-                        && (mVersionRE.grep(cmt).length == 0))", "-                    {", "-                        // TODO: better error message", "-                        log(aAST.getLineNo(), \"type.missingTag\", \"@version\");", "-                    }", "-", "+                    checkTag(lineNo, cmt, \"@author\",", "+                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);", "+                    checkTag(lineNo, cmt, \"@version\",", "+                            mVersionTagRE, mVersionFormatRE, mVersionFormat);"]}]}
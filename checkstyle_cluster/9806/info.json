{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef6455e2f02353645ba669c6324b064a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4869e2c51eb8b2b8b2c7b931b1dfe59d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private Properties createOverridingProperties()", "signatureAfterChange": "     private Properties createOverridingProperties()", "diff": ["-        final Properties retVal = new Properties();", "+        final Properties returnValue = new Properties();", "-                retVal.load(inStream);", "+                returnValue.load(inStream);", "-            retVal.setProperty(entry.getKey(), value);", "+            returnValue.setProperty(entry.getKey(), value);", "-            retVal.setProperty(p.getKey(), p.getValue());", "+            returnValue.setProperty(p.getKey(), p.getValue());", "-        return retVal;", "+        return returnValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ed234bfba8263403680679154c8a928", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static Scope getScopeFromMods(DetailAST aMods)", "signatureAfterChange": "     public static Scope getScopeFromMods(DetailAST aMods)", "diff": ["-        Scope retVal = Scope.PACKAGE;", "+        Scope returnValue = Scope.PACKAGE;", "-                && retVal == Scope.PACKAGE;", "+                && returnValue == Scope.PACKAGE;", "-                retVal = Scope.PUBLIC;", "+                returnValue = Scope.PUBLIC;", "-                retVal = Scope.PROTECTED;", "+                returnValue = Scope.PROTECTED;", "-                retVal = Scope.PRIVATE;", "+                returnValue = Scope.PRIVATE;", "-        return retVal;", "+        return returnValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e49ae38358eb9a4803fae6e0a68b8bf9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected boolean hasText(final DetailAST slistAST)", "signatureAfterChange": "     protected boolean hasText(final DetailAST slistAST)", "diff": ["-        boolean retVal = false;", "+        boolean returnValue = false;", "-                retVal = true;", "+                returnValue = true;", "-                retVal = !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);", "+                returnValue = !checkIsAllLinesAreWhitespace(lines, slistLineNo, rcurlyLineNo);", "-                retVal = true;", "+                returnValue = true;", "-        return retVal;", "+        return returnValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec876f5674d9c3fbaba47151cf3e4574", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static Scope getSurroundingScope(DetailAST aAST)", "signatureAfterChange": "     public static Scope getSurroundingScope(DetailAST aAST)", "diff": ["-        Scope retVal = null;", "+        Scope returnValue = null;", "-                if (retVal == null || retVal.isIn(modScope)) {", "-                    retVal = modScope;", "+                if (returnValue == null || returnValue.isIn(modScope)) {", "+                    returnValue = modScope;", "-                retVal = Scope.ANONINNER;", "+                returnValue = Scope.ANONINNER;", "-        return retVal;", "+        return returnValue;"]}]}
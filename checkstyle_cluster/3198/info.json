{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d5f75750f5159a275f94ee1e188faf6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19d993ca9ee44eb5a304764087b88ca3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testNoParameters()         throws Exception", "signatureAfterChange": "     @Test     public void testNoParameters()         throws Exception", "diff": ["-            \"18:13: 'hidden' hides a field.\",", "-            \"27:13: 'hidden' hides a field.\",", "-            \"32:18: 'hidden' hides a field.\",", "-            \"46:17: 'innerHidden' hides a field.\",", "-            \"55:17: 'innerHidden' hides a field.\",", "-            \"56:17: 'hidden' hides a field.\",", "-            \"61:22: 'innerHidden' hides a field.\",", "-            \"64:22: 'hidden' hides a field.\",", "-            \"76:17: 'innerHidden' hides a field.\",", "-            \"77:17: 'hidden' hides a field.\",", "-            \"82:13: 'hidden' hides a field.\",", "-            \"138:13: 'hidden' hides a field.\",", "-            \"143:13: 'hidden' hides a field.\",", "-            \"148:13: 'hidden' hides a field.\",", "-            \"152:13: 'hidden' hides a field.\",", "-            \"200:17: 'hidden' hides a field.\",", "-            \"217:13: 'hidden' hides a field.\",", "-            \"223:13: 'hiddenStatic' hides a field.\",", "+            \"18:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"27:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"32:18: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"46:17: \" + getCheckMessage(MSG_KEY, \"innerHidden\"),", "+            \"55:17: \" + getCheckMessage(MSG_KEY, \"innerHidden\"),", "+            \"56:17: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"61:22: \" + getCheckMessage(MSG_KEY, \"innerHidden\"),", "+            \"64:22: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"76:17: \" + getCheckMessage(MSG_KEY, \"innerHidden\"),", "+            \"77:17: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"82:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"138:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"143:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"148:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"152:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"200:17: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"217:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"223:13: \" + getCheckMessage(MSG_KEY, \"hiddenStatic\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ad5d7ed74c004c0b1f33248e5c9da50", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheckTest.java", "commitBeforeChange": "3e25a4911d0f0e4ea1b9c22f1b65158794f7d093", "commitAfterChange": "7f452f66c8ac18a9d0093c0cb05009ddae0b8ea9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testNospaceWithComplexInput() throws Exception", "signatureAfterChange": "      @Test     public void testNospaceWithComplexInput() throws Exception", "diff": ["+            \"112:17: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"113:23: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"113:25: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"113:31: \" + getCheckMessage(WS_PRECEDED, \")\"),", "+            \"114:26: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"114:28: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"114:34: \" + getCheckMessage(WS_PRECEDED, \")\"),", "+            \"114:50: \" + getCheckMessage(WS_PRECEDED, \")\"),", "+            \"115:26: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"115:28: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"115:35: \" + getCheckMessage(WS_PRECEDED, \")\"),", "+            \"115:53: \" + getCheckMessage(WS_PRECEDED, \")\"),", "+            \"115:55: \" + getCheckMessage(WS_PRECEDED, \")\"),", "+            \"119:17: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"119:22: \" + getCheckMessage(WS_PRECEDED, \")\"),", "+            \"123:30: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"123:44: \" + getCheckMessage(WS_PRECEDED, \")\"),", "+            \"126:22: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"126:22: \" + getCheckMessage(WS_PRECEDED, \")\"),", "+            \"130:19: \" + getCheckMessage(WS_FOLLOWED, \"(\"),", "+            \"130:19: \" + getCheckMessage(WS_PRECEDED, \")\"),", "+        };", "+        verify(checkConfig, getPath(\"whitespace/InputParenPad.java\"), expected);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53382659357ab686f88b4f8504c79b9e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     @Test     public void testReordered()         throws Exception", "signatureAfterChange": "     @Test     public void testReordered()         throws Exception", "diff": ["-            \"18:13: 'hidden' hides a field.\",", "-            \"21:40: 'hidden' hides a field.\",", "-            \"27:13: 'hidden' hides a field.\",", "-            \"32:18: 'hidden' hides a field.\",", "-            \"36:33: 'hidden' hides a field.\",", "-            \"46:17: 'innerHidden' hides a field.\",", "-            \"49:26: 'innerHidden' hides a field.\",", "-            \"55:17: 'innerHidden' hides a field.\",", "-            \"56:17: 'hidden' hides a field.\",", "-            \"61:22: 'innerHidden' hides a field.\",", "-            \"64:22: 'hidden' hides a field.\",", "-            \"69:17: 'innerHidden' hides a field.\",", "-            \"70:17: 'hidden' hides a field.\",", "-            \"76:17: 'innerHidden' hides a field.\",", "-            \"77:17: 'hidden' hides a field.\",", "-            \"83:13: 'hidden' hides a field.\",", "-            \"105:17: 'hidden' hides a field.\",", "-            \"118:21: 'hidden' hides a field.\",", "-            \"125:13: 'hidden' hides a field.\",", "-            \"131:13: 'hiddenStatic' hides a field.\",", "+            \"18:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"21:40: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"27:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"32:18: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"36:33: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"46:17: \" + getCheckMessage(MSG_KEY, \"innerHidden\"),", "+            \"49:26: \" + getCheckMessage(MSG_KEY, \"innerHidden\"),", "+            \"55:17: \" + getCheckMessage(MSG_KEY, \"innerHidden\"),", "+            \"56:17: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"61:22: \" + getCheckMessage(MSG_KEY, \"innerHidden\"),", "+            \"64:22: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"69:17: \" + getCheckMessage(MSG_KEY, \"innerHidden\"),", "+            \"70:17: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"76:17: \" + getCheckMessage(MSG_KEY, \"innerHidden\"),", "+            \"77:17: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"83:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"105:17: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"118:21: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"125:13: \" + getCheckMessage(MSG_KEY, \"hidden\"),", "+            \"131:13: \" + getCheckMessage(MSG_KEY, \"hiddenStatic\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b01b70fdb5922d586ec950de2d69d9f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testIt() throws Exception", "signatureAfterChange": "     @Test     public void testIt() throws Exception", "diff": ["-            \"29: 'do' construct must use '{}'s.\" ,", "-            \"41: 'while' construct must use '{}'s.\" ,", "-            \"42: 'while' construct must use '{}'s.\" ,", "-            \"44: 'while' construct must use '{}'s.\" ,", "-            \"45: 'if' construct must use '{}'s.\" ,", "-            \"58: 'for' construct must use '{}'s.\" ,", "-            \"59: 'for' construct must use '{}'s.\" ,", "-            \"61: 'for' construct must use '{}'s.\" ,", "-            \"63: 'if' construct must use '{}'s.\" ,", "-            \"82: 'if' construct must use '{}'s.\" ,", "-            \"83: 'if' construct must use '{}'s.\" ,", "-            \"85: 'if' construct must use '{}'s.\" ,", "-            \"87: 'else' construct must use '{}'s.\" ,", "-            \"89: 'if' construct must use '{}'s.\" ,", "-            \"97: 'else' construct must use '{}'s.\" ,", "-            \"99: 'if' construct must use '{}'s.\" ,", "-            \"100: 'if' construct must use '{}'s.\" ,", "+            \"29: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"do\"),", "+            \"41: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"while\"),", "+            \"42: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"while\"),", "+            \"44: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"while\"),", "+            \"45: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"if\"),", "+            \"58: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"for\"),", "+            \"59: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"for\"),", "+            \"61: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"for\"),", "+            \"63: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"if\"),", "+            \"82: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"if\"),", "+            \"83: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"if\"),", "+            \"85: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"if\"),", "+            \"87: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"else\"),", "+            \"89: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"if\"),", "+            \"97: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"else\"),", "+            \"99: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"if\"),", "+            \"100: \" + getCheckMessage(MSG_KEY_NEED_BRACES, \"if\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ed40052637212f4464531c6c4c28c4c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsTest.java", "commitBeforeChange": "df5e519a3d2d6a468558161e1e61ff4634e7b533", "commitAfterChange": "09a7ca60414ea04b64f45bb190eaa26c767086be", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Test     public void testSingleNoUnWildcard() throws Exception", "signatureAfterChange": "     @Test     public void testSingleNoUnWildcard() throws Exception", "diff": ["-            \"5:19: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"17:23: The warning 'unused' cannot be suppressed at this location.\",", "-            \"20:27: The warning 'unforgiven' cannot be suppressed at this location.\",", "-            \"25:31: The warning 'unused' cannot be suppressed at this location.\",", "-            \"29:35: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"37:23: The warning 'abcun' cannot be suppressed at this location.\",", "-            \"44:23: The warning 'abcun' cannot be suppressed at this location.\",", "-            \"47:27: The warning 'unused' cannot be suppressed at this location.\",", "-            \"56:27: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"59:48: The warning 'unchecked' cannot be suppressed at this location.\",", "+            \"5:19: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"17:23: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unused\"),", "+            \"20:27: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unforgiven\"),", "+            \"25:31: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unused\"),", "+            \"29:35: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"37:23: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"abcun\"),", "+            \"44:23: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"abcun\"),", "+            \"47:27: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unused\"),", "+            \"56:27: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"59:48: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "-            \"64:33: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"67:42: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"72:54: The warning 'unused' cannot be suppressed at this location.\",", "-            \"72:65: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"77:37: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"77:68: The warning 'unused' cannot be suppressed at this location.\",", "-            \"82:47: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"82:115: The warning 'unused' cannot be suppressed at this location.\",", "+            \"64:33: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"67:42: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"72:54: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unused\"),", "+            \"72:65: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"77:37: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"77:68: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unused\"),", "+            \"82:47: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"82:115: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unused\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4f32230d99c68cf785c9f0510df5a6c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault() throws Exception", "signatureAfterChange": "     @Test     public void testDefault() throws Exception", "diff": ["-            \"4:17: Variable 'x' explicitly initialized to '0' (default value for its type).\",", "-            \"5:20: Variable 'bar' explicitly initialized to 'null' (default value for its type).\",", "-            \"9:18: Variable 'y4' explicitly initialized to '0' (default value for its type).\",", "-            \"10:21: Variable 'b1' explicitly initialized to 'false' (default value for its type).\",", "-            \"14:22: Variable 'str1' explicitly initialized to 'null' (default value for its type).\",", "-            \"14:35: Variable 'str3' explicitly initialized to 'null' (default value for its type).\",", "-            \"15:9: Variable 'ar1' explicitly initialized to 'null' (default value for its type).\",", "-            \"18:11: Variable 'f1' explicitly initialized to '0' (default value for its type).\",", "-            \"19:12: Variable 'd1' explicitly initialized to '0' (default value for its type).\",", "-            \"22:17: Variable 'ch1' explicitly initialized to '\\\\0' (default value for its type).\",", "-            \"23:17: Variable 'ch2' explicitly initialized to '\\\\0' (default value for its type).\",", "-            \"39:25: Variable 'bar' explicitly initialized to 'null' (default value for its type).\",", "-            \"40:27: Variable 'barArray' explicitly initialized to 'null' (default value for its type).\",", "-            \"47:21: Variable 'x' explicitly initialized to '0' (default value for its type).\",", "-            \"48:29: Variable 'bar' explicitly initialized to 'null' (default value for its type).\",", "-            \"49:31: Variable 'barArray' explicitly initialized to 'null' (default value for its type).\",", "-            \"52:17: Variable 'x' explicitly initialized to '0' (default value for its type).\",", "-            \"53:25: Variable 'bar' explicitly initialized to 'null' (default value for its type).\",", "-            \"54:27: Variable 'barArray' explicitly initialized to 'null' (default value for its type).\",", "+            \"4:17: \" + getCheckMessage(MSG_KEY, \"x\", 0),", "+            \"5:20: \" + getCheckMessage(MSG_KEY, \"bar\", \"null\"),", "+            \"9:18: \" + getCheckMessage(MSG_KEY, \"y4\", 0),", "+            \"10:21: \" + getCheckMessage(MSG_KEY, \"b1\", \"false\"),", "+            \"14:22: \" + getCheckMessage(MSG_KEY, \"str1\", \"null\"),", "+            \"14:35: \" + getCheckMessage(MSG_KEY, \"str3\", \"null\"),", "+            \"15:9: \" + getCheckMessage(MSG_KEY, \"ar1\", \"null\"),", "+            \"18:11: \" + getCheckMessage(MSG_KEY, \"f1\", 0),", "+            \"19:12: \" + getCheckMessage(MSG_KEY, \"d1\", 0),", "+            \"22:17: \" + getCheckMessage(MSG_KEY, \"ch1\", \"\\\\0\"),", "+            \"23:17: \" + getCheckMessage(MSG_KEY, \"ch2\", \"\\\\0\"),", "+            \"39:25: \" + getCheckMessage(MSG_KEY, \"bar\", \"null\"),", "+            \"40:27: \" + getCheckMessage(MSG_KEY, \"barArray\", \"null\"),", "+            \"47:21: \" + getCheckMessage(MSG_KEY, \"x\", 0),", "+            \"48:29: \" + getCheckMessage(MSG_KEY, \"bar\", \"null\"),", "+            \"49:31: \" + getCheckMessage(MSG_KEY, \"barArray\", \"null\"),", "+            \"52:17: \" + getCheckMessage(MSG_KEY, \"x\", 0),", "+            \"53:25: \" + getCheckMessage(MSG_KEY, \"bar\", \"null\"),", "+            \"54:27: \" + getCheckMessage(MSG_KEY, \"barArray\", \"null\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac65065b23af63cb5992d9b21a4d6f69", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheckTest.java", "commitBeforeChange": "df5e519a3d2d6a468558161e1e61ff4634e7b533", "commitAfterChange": "09a7ca60414ea04b64f45bb190eaa26c767086be", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testIncorrect() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrect() throws Exception", "diff": ["-            \"6: Annotation 'MyAnnotation1' should be alone on line.\",", "-            \"11: Annotation 'MyAnnotation1' should be alone on line.\",", "-            \"17: Annotation 'MyAnnotation1' have incorrect indentation level 8, expected level should be 4.\",", "-            \"25: Annotation 'MyAnnotation1' have incorrect indentation level 8, expected level should be 4.\",", "-            \"29: Annotation 'MyAnnotation1' should be alone on line.\",", "-            \"29: Annotation 'MyAnnotation2' should be alone on line.\",", "-            \"32: Annotation 'MyAnnotation2' have incorrect indentation level 7, expected level should be 4.\",", "-            \"36: Annotation 'MyAnnotation2' have incorrect indentation level 8, expected level should be 4.\",", "-            \"37: Annotation 'MyAnnotation3' have incorrect indentation level 6, expected level should be 4.\",", "-            \"38: Annotation 'MyAnnotation4' have incorrect indentation level 10, expected level should be 4.\",", "-            \"41: Annotation 'MyAnnotation1' should be alone on line.\",", "-            \"48: Annotation 'MyAnnotation1' have incorrect indentation level 12, expected level should be 8.\",", "-            \"61: Annotation 'MyAnnotation2' have incorrect indentation level 12, expected level should be 8.\",", "-            \"65: Annotation 'MyAnnotation2' have incorrect indentation level 12, expected level should be 8.\",", "-            \"70: Annotation 'MyAnnotation2' have incorrect indentation level 7, expected level should be 4.\",", "-            \"73: Annotation 'MyAnnotation1' should be alone on line.\",", "-            \"85: Annotation 'MyAnnotation2' have incorrect indentation level 11, expected level should be 8.\",", "-            \"88: Annotation 'MyAnnotation2' have incorrect indentation level 10, expected level should be 8.\",", "-            \"98: Annotation 'MyAnnotation2' have incorrect indentation level 0, expected level should be 3.\",", "+            \"6: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE, \"MyAnnotation1\"),", "+            \"11: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE, \"MyAnnotation1\"),", "+            \"17: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation1\", 8, 4),", "+            \"25: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation1\", 8, 4),", "+            \"29: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE, \"MyAnnotation1\"),", "+            \"29: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE, \"MyAnnotation2\"),", "+            \"32: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation2\", 7, 4),", "+            \"36: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation2\", 8, 4),", "+            \"37: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation3\", 6, 4),", "+            \"38: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation4\", 10, 4),", "+            \"41: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE, \"MyAnnotation1\"),", "+            \"48: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation1\", 12, 8),", "+            \"61: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation2\", 12, 8),", "+            \"65: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation2\", 12, 8),", "+            \"70: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation2\", 7, 4),", "+            \"73: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION_ALONE, \"MyAnnotation1\"),", "+            \"85: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation2\", 11, 8),", "+            \"88: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation2\", 10, 8),", "+            \"98: \" + getCheckMessage(MSG_KEY_ANNOTATION_LOCATION, \"MyAnnotation2\", 0, 3),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b42ef3a6ba9e6075ddd330d2edeee573", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault() throws Exception", "signatureAfterChange": "     @Test     public void testDefault() throws Exception", "diff": ["-            \"9:13: Variable 'i' should be declared final.\",", "-            \"9:16: Variable 'j' should be declared final.\",", "-            \"10:18: Variable 'runnable' should be declared final.\",", "-            \"20:13: Variable 'i' should be declared final.\",", "-            \"24:13: Variable 'z' should be declared final.\",", "-            \"26:16: Variable 'obj' should be declared final.\",", "-            \"30:16: Variable 'x' should be declared final.\",", "-            \"36:18: Variable 'runnable' should be declared final.\",", "-            \"40:21: Variable 'q' should be declared final.\",", "-            \"56:13: Variable 'i' should be declared final.\",", "-            \"60:13: Variable 'z' should be declared final.\",", "-            \"62:16: Variable 'obj' should be declared final.\",", "-            \"66:16: Variable 'x' should be declared final.\",", "-            \"74:21: Variable 'w' should be declared final.\",", "-            \"75:26: Variable 'runnable' should be declared final.\",", "-            \"96:17: Variable 'weird' should be declared final.\",", "-            \"97:17: Variable 'j' should be declared final.\",", "-            \"98:17: Variable 'k' should be declared final.\",", "+            \"9:13: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"9:16: \" + getCheckMessage(MSG_KEY, \"j\"),", "+            \"10:18: \" + getCheckMessage(MSG_KEY, \"runnable\"),", "+            \"20:13: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"24:13: \" + getCheckMessage(MSG_KEY, \"z\"),", "+            \"26:16: \" + getCheckMessage(MSG_KEY, \"obj\"),", "+            \"30:16: \" + getCheckMessage(MSG_KEY, \"x\"),", "+            \"36:18: \" + getCheckMessage(MSG_KEY, \"runnable\"),", "+            \"40:21: \" + getCheckMessage(MSG_KEY, \"q\"),", "+            \"56:13: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"60:13: \" + getCheckMessage(MSG_KEY, \"z\"),", "+            \"62:16: \" + getCheckMessage(MSG_KEY, \"obj\"),", "+            \"66:16: \" + getCheckMessage(MSG_KEY, \"x\"),", "+            \"74:21: \" + getCheckMessage(MSG_KEY, \"w\"),", "+            \"75:26: \" + getCheckMessage(MSG_KEY, \"runnable\"),", "+            \"96:17: \" + getCheckMessage(MSG_KEY, \"weird\"),", "+            \"97:17: \" + getCheckMessage(MSG_KEY, \"j\"),", "+            \"98:17: \" + getCheckMessage(MSG_KEY, \"k\"),"]}]}
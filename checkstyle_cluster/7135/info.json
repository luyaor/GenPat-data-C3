{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68156fc9c2abb15b105c2ff3f8b63f63", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "484dead1f30d5d956b50251cdf69dcea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "b95ced53e3c47c9a9db5022767a18e714fc3bebd", "commitAfterChange": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows,                                  boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows,                                  boolean aReportExpectedTags)", "diff": ["+            Token token = new Token(tag.getArg1(), tag.getLineNo(),", "+                                    tag.getColumnNo());", "+            ClassInfo documentedCI =", "+                createClassInfo(token, getCurrentClassName());", "-            Class documentedClass = null;", "-            boolean classLoaded = false;", "-                final FullIdent fi = ei.getName();", "+                final Token fi = ei.getName();", "-                    if (!classLoaded) {", "-                        documentedClass = loadClassForTag(tag);", "-                        classLoaded = true;", "-                    }", "-                    found = isSubclass(documentedClass, ei.getClazz());", "+                    found = isSubclass(documentedCI.getClazz(), ei.getClazz());", "-                    if (!classLoaded) {", "-                        documentedClass = loadClassForTag(tag);", "-                        classLoaded = true;", "-                    }", "-                    reqd = !isUnchecked(documentedClass);", "+                    reqd = !isUnchecked(documentedCI.getClazz());", "-                    log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag", "-                        .getArg1());", "+                    log(tag.getLineNo(), tag.getColumnNo(),", "+                        \"javadoc.unusedTag\", \"@throws\", tag.getArg1());", "+", "-                    final FullIdent fi = ei.getName();", "+                    final Token fi = ei.getName();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55fc6612f603cfcd4bd9cd224580cb54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "9acdd1b97e561748ae8cc61e11dcc145885ecb6d", "commitAfterChange": "c617457933a978f5fd861d7ea43d05bccf045c16", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     void verifyVariable(MyVariable aVar)", "signatureAfterChange": "     void verifyVariable(MyVariable aVar)", "diff": ["-        if (inMethodBlock()) {", "+        if (inMethodBlock())", "+        {", "+            checkVariable(aVar,", "+                          mConfig.getLocalVarRegexp(),", "+                          mConfig.getLocalVarPat());", "-        final Scope declaredScope =", "-            aVar.getModifierSet().getVisibilityScope();", "+        final MyModifierSet mods = aVar.getModifierSet();", "+        final Scope declaredScope = mods.getVisibilityScope();", "-            final MyModifierSet mods = aVar.getModifierSet();", "-                    if (mods.containsPrivate()) {", "+                    if (Scope.PRIVATE.equals(variableScope)) {", "-                if (mods.containsPrivate() ||", "-                    (mConfig.isAllowProtected() && mods.containsProtected()))", "+                final boolean isPckg = Scope.PACKAGE.equals(variableScope);", "+                final boolean isProt = Scope.PROTECTED.equals(variableScope);", "+                if (Scope.PRIVATE.equals(variableScope) ||", "+                    (mConfig.isAllowPackage() && isPckg) ||", "+                    (mConfig.isAllowProtected() && isProt))"]}]}
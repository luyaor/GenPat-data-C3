{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb76f8be4b816efccd6a2420cb9aaf8f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c41f71dd352a16e9fd9be06975e0934", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void processTypeParams(DetailAST aAST)", "signatureAfterChange": "     private void processTypeParams(DetailAST aAST)", "diff": ["-        Map paramsMap = new HashMap();", "+        final Map paramsMap = new HashMap();", "-                DetailAST param = child;", "-                String alias = param.findFirstToken(TokenTypes.IDENT).getText();", "-                DetailAST bounds =", "+                final DetailAST param = child;", "+                final String alias =", "+                    param.findFirstToken(TokenTypes.IDENT).getText();", "+                final DetailAST bounds =", "-                    FullIdent name = FullIdent.createFullIdentBelow(bounds);", "-                    ClassInfo ci =", "+                    final FullIdent name =", "+                        FullIdent.createFullIdentBelow(bounds);", "+                    final ClassInfo ci ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b2f6405c1c2cf0986caf2b5c35fe2bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "          public void drop(DropTargetDropEvent evt)", "signatureAfterChange": "          public void drop(DropTargetDropEvent evt)", "diff": ["-                Transferable tr = evt.getTransferable();", "+                final Transferable tr = evt.getTransferable();", "-                    List fileList = (List) tr.getTransferData(", "+                    final List fileList = (List) tr.getTransferData(", "-                    File[] files = new File[fileList.size()];", "+                    final File[] files = new File[fileList.size()];", "-            catch (IOException io) {", "+            catch (final IOException io) {", "-            catch (UnsupportedFlavorException ufe) {", "+            catch (final UnsupportedFlavorException ufe) {", "-                    JComponent jc = (JComponent) mC;", "+                    final JComponent jc = (JComponent) mC;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbd905b7a8c460bff927c0da470510d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "      @Test(expected = IllegalStateException.class)     public void testVisitTokenSwitchReflection() throws Exception", "signatureAfterChange": "      @Test(expected = IllegalStateException.class)     public void testVisitTokenSwitchReflection() throws Exception", "diff": ["-        ImportOrderOption importOrderOptionMock = PowerMockito.mock(ImportOrderOption.class);", "+        final ImportOrderOption importOrderOptionMock = PowerMockito.mock(ImportOrderOption.class);", "-        DetailAST astImport = mockAST(TokenTypes.IMPORT, \"import\", \"mockfile\", 0, 0);", "-        DetailAST astIdent = mockAST(TokenTypes.IDENT, \"myTestImport\", \"mockfile\", 0, 0);", "+        final DetailAST astImport = mockAST(TokenTypes.IMPORT, \"import\", \"mockfile\", 0, 0);", "+        final DetailAST astIdent = mockAST(TokenTypes.IDENT, \"myTestImport\", \"mockfile\", 0, 0);", "-        DetailAST astSemi = mockAST(TokenTypes.SEMI, \";\", \"mockfile\", 0, 0);", "+        final DetailAST astSemi = mockAST(TokenTypes.SEMI, \";\", \"mockfile\", 0, 0);", "-        ImportOrderCheck check = new ImportOrderCheck() {", "+        final ImportOrderCheck check = new ImportOrderCheck() {", "-                ImportOrderOption importOrderOption = PowerMockito.mock(ImportOrderOption.class);", "+                final ImportOrderOption importOrderOption = PowerMockito", "+                    .mock(ImportOrderOption.class);"]}]}
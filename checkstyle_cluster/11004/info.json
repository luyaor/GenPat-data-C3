{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b67bc1a592ac4cfc751f7c5f601d36f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5defe79b7bc0eb60cd458cd00c3f1ad9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java", "commitBeforeChange": "bca492cc217f781c64091ec00cccf17d60be893c", "commitAfterChange": "d74f5bb61c9d8a45af94f5539b2001d25e1f3076", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public MissingSwitchDefaultCheck()", "signatureAfterChange": "     private static boolean containsDefaultSwitch(DetailAST caseGroupAst)", "diff": ["-    /** Creates new instance of the check. */", "-    public MissingSwitchDefaultCheck() {", "-        setLimitedTokens(TokenUtils.getTokenName(TokenTypes.LITERAL_DEFAULT));", "-        setMinimumNumber(1);", "-        setMaximumDepth(2);", "-        setMinimumMessage(MSG_KEY);", "-    }", "+     */", "+    private static boolean containsDefaultSwitch(DetailAST caseGroupAst) {", "+        DetailAST nextAst = caseGroupAst;", "+        boolean found = false;", "+", "+        while (nextAst != null) {", "+            if (nextAst.findFirstToken(TokenTypes.LITERAL_DEFAULT) != null) {", "+                found = true;", "+                break;", "+            }", "+", "+            nextAst = nextAst.getNextSibling();", "+        }", "+", "+        return found;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f734dee95287d0c31225dc80242b52c0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "3300c3c835982e11c24b89e7c11ec9d7333cfb52", "commitAfterChange": "795968d20ed78e558a95fdd35702366327a4bdc1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean isInAnnotation(DetailAST ast)", "signatureAfterChange": "     private static boolean isChildOf(DetailAST ast, int type)", "diff": ["-    private boolean isInAnnotation(DetailAST ast)", "+    private static boolean isChildOf(DetailAST ast, int type)", "-        return TokenTypes.ANNOTATION == ast.getParent().getParent().getType()", "-                || TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR", "-                        == ast.getParent().getParent().getType();", "+        boolean result = false;", "+        DetailAST node = ast;", "+        do {", "+            if (node.getType() == type) {", "+                result = true;", "+            }", "+            node = node.getParent();", "+        } while (node != null && !result);", "+", "+        return result;"]}]}
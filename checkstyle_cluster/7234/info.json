{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "965626016d83f336c76b18a4fdcc424f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "261e3170454e2240d76edb2b033b3731", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "aa0f77eb9294588b0d891dbde516bc43a5af4f5a", "commitAfterChange": "c4339df8b3d6b58b327b6cfcaca7413e9c526dcf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(             DetailAST block, DetailAST variable)", "signatureAfterChange": "     private static DetailAST getFirstNodeInsideForWhileDoWhileBlocks(             DetailAST block, DetailAST variable)", "diff": ["-                currentNode = block.findFirstToken(TokenTypes.RPAREN);", "-                if (currentNode != null) {", "-                    currentNode = currentNode.getNextSibling();", "-                }", "+                currentNode = block.findFirstToken(TokenTypes.RPAREN).getNextSibling();", "-            if (currentNode != null) {", "-                final int currentNodeType = currentNode.getType();", "+            final int currentNodeType = currentNode.getType();", "-                if (currentNodeType == TokenTypes.SLIST) {", "-                    firstNodeInsideBlock = currentNode.getFirstChild();", "-                }", "-                else if (currentNodeType != TokenTypes.VARIABLE_DEF", "-                        && currentNodeType != TokenTypes.EXPR) {", "-                    firstNodeInsideBlock = currentNode;", "-                }", "+            if (currentNodeType == TokenTypes.SLIST) {", "+                firstNodeInsideBlock = currentNode.getFirstChild();", "+            }", "+            else if (currentNodeType != TokenTypes.VARIABLE_DEF", "+                    && currentNodeType != TokenTypes.EXPR) {", "+                firstNodeInsideBlock = currentNode;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c266f4e7f16bafc69af842a668a665", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java", "commitBeforeChange": "343e946b076a5344e380c76e5b3ea23438b6fc93", "commitAfterChange": "e3a48d1527341456a798c3f0c1986de6898a8c60", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void checkIndentation()", "signatureAfterChange": "      @Override     public void checkIndentation()", "diff": ["+    @Override", "+    public void checkIndentation()", "+        final DetailAST modifiersNode = getMainAst().findFirstToken(TokenTypes.MODIFIERS);", "+        if (modifiersNode.getChildCount() != 0) {", "+            checkModifiers();", "+        }", "+        else {", "+            checkType();", "+        }", "+        final LineWrappingHandler lineWrap =", "+            new LineWrappingHandler(getIndentCheck(), getMainAst()) {", "+                @Override", "+                public DetailAST findLastNode(DetailAST aFirstNode)", "+                {", "+                    DetailAST lastNode = getFirstNode().getLastChild();", "+                    if (lastNode.getType() != TokenTypes.SEMI) {", "+                        lastNode = getFirstNode().getNextSibling();", "+                    }", "+                    return lastNode;", "+                }", "+            };", "+        if (lineWrap.getLastNode() != null && !isArrayDeclaration(getMainAst())) {", "+            lineWrap.checkIndentation();", "+        }", "+    }", "-    @Override", "-    public void checkIndentation()", "-        checkModifiers();", "-        checkType();", "-        checkIdent();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451921ae859ec82a9bdc06479639e8e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "0024de5711531372850e883c970414563ab8e3ad", "commitAfterChange": "ee84bccfe190e288447b417bc5e1a3cf94d7b218", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static Entry<DetailAST, Integer> calculateDistanceBetweenScopes(             DetailAST ast, DetailAST variable)", "signatureAfterChange": "     private static Entry<DetailAST, Integer> calculateDistanceBetweenScopes(             DetailAST ast, DetailAST variable)", "diff": ["-            final List<DetailAST> variableUsageExpressions = new ArrayList<>();", "-            DetailAST currentStatementAst = currentScopeAst;", "+            final Entry<List<DetailAST>, Integer> searchResult =", "+                    searchVariableUsageExpressions(variable, currentScopeAst);", "+", "-            while (currentStatementAst != null", "-                    && currentStatementAst.getType() != TokenTypes.RCURLY) {", "-                if (currentStatementAst.getFirstChild() != null) {", "-                    if (isChild(currentStatementAst, variable)) {", "-                        variableUsageExpressions.add(currentStatementAst);", "-                    }", "-                    // If expression doesn't contain variable and this variable", "-                    // hasn't been met yet, than distance + 1.", "-                    else if (variableUsageExpressions.isEmpty()", "-                            && currentStatementAst.getType() != TokenTypes.VARIABLE_DEF) {", "-                        dist++;", "-                    }", "-                }", "-                currentStatementAst = currentStatementAst.getNextSibling();", "-            }", "+", "+            final List<DetailAST> variableUsageExpressions = searchResult.getKey();", "+            dist += searchResult.getValue();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed061a58746fb9fe64216bef6cf7f181", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "af047afee8216a4b0db9027dd013a1aad2be9494", "commitAfterChange": "ee33ed57cd2c88888e9821a2047f587f07283d98", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public JTreeTable(ParseTreeTableModel treeTableModel)", "signatureAfterChange": "     public JTreeTable(ParseTreeTableModel treeTableModel)", "diff": ["-                @Override", "-                public void actionPerformed(ActionEvent event) {", "-                    final TreePath selected = tree.getSelectionPath();", "-                    final DetailAST ast = (DetailAST) selected.getLastPathComponent();", "-                    new CodeSelector(ast, editor, linePositionMap).select();", "-", "-                    if (tree.isExpanded(selected)) {", "-                        tree.collapsePath(selected);", "-                    }", "-                    else {", "-                        tree.expandPath(selected);", "-                    }", "-                    tree.setSelectionPath(selected);", "-                }", "-            };", "+            @Override", "+            public void actionPerformed(ActionEvent event) {", "+                doExpandByEnter();", "+            }", "+        };", "+", "+        addMouseListener(new MouseAdapter() {", "+            @Override", "+            public void mouseClicked(MouseEvent event) {", "+                if (event.getClickCount() == 2) {", "+                    makeCodeSelection();", "+                }", "+            }", "+        });", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01ba94b1902c362f012ac65c63340c6f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d5557712b45045d57fa2d9d4118092c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            processLiteralNew(aAST);", "+            processLiteralNew(ast);", "-            processPackageDef(aAST);", "+            processPackageDef(ast);", "-            processImport(aAST);", "+            processImport(ast);", "-            processClassDef(aAST);", "+            processClassDef(ast);", "-            throw new IllegalArgumentException(\"Unknown type \" + aAST);", "+            throw new IllegalArgumentException(\"Unknown type \" + ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2787961f5a8a641bcaa8a4796c33c82d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static int getPositionAfter(DetailAST aAST)", "signatureAfterChange": "     private static int getPositionAfter(DetailAST ast)", "diff": ["-    private static int getPositionAfter(DetailAST aAST)", "+    private static int getPositionAfter(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.IDENT", "-                && aAST.getNextSibling() != null", "-                && aAST.getNextSibling().getType() == TokenTypes.LPAREN)", "+        if (ast.getType() == TokenTypes.IDENT", "+                && ast.getNextSibling() != null", "+                && ast.getNextSibling().getType() == TokenTypes.LPAREN)", "-            final DetailAST methodDef = aAST.getParent();", "+            final DetailAST methodDef = ast.getParent();", "-            after = aAST.getColumnNo() + aAST.getText().length();", "+            after = ast.getColumnNo() + ast.getText().length();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d19d58a394fa1f3be77a48110895b5a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            visitMethodDef(aAST);", "+            visitMethodDef(ast);", "-            visitVariableDef(aAST);", "+            visitVariableDef(ast);", "-            visitParameterDef(aAST);", "+            visitParameterDef(ast);", "-            visitImport(aAST);", "+            visitImport(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69f6cff43490cbd54f85151f643666c4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (ScopeUtils.isLocalVariableDef(aAST)", "-            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))", "+        if (ScopeUtils.isLocalVariableDef(ast)", "+            || ScopeUtils.inInterfaceOrAnnotationBlock(ast))", "-        final DetailAST assign = aAST.findFirstToken(TokenTypes.ASSIGN);", "+        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        final DetailAST type = aAST.findFirstToken(TokenTypes.TYPE);", "-        final DetailAST ident = aAST.findFirstToken(TokenTypes.IDENT);", "+        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "+        final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7454bf08f8f6da2ff5ae1d9e5fabf229", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (isAbstract(aAST)) {", "+        if (isAbstract(ast)) {", "-        final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);", "+        final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);", "-        final boolean hasStaticModifier = isStatic(aAST);", "+        final boolean hasStaticModifier = isStatic(ast);", "-            aAST.findFirstToken(TokenTypes.EXTENDS_CLAUSE) == null;", "+            ast.findFirstToken(TokenTypes.EXTENDS_CLAUSE) == null;", "-            log(aAST.getLineNo(), aAST.getColumnNo(), \"hide.utility.class\");", "+            log(ast.getLineNo(), ast.getColumnNo(), \"hide.utility.class\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceb12e73ece70c6bc0a472158d7e9abb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST container = aAST.getParent().getParent();", "+        final DetailAST container = ast.getParent().getParent();", "-        if (aAST.getType() == TokenTypes.LITERAL_CATCH) {", "-            visitCatch(aAST);", "+        if (ast.getType() == TokenTypes.LITERAL_CATCH) {", "+            visitCatch(ast);", "-        else if (aAST.getType() == TokenTypes.FOR_EACH_CLAUSE) {", "-            visitForEachClause(aAST);", "+        else if (ast.getType() == TokenTypes.FOR_EACH_CLAUSE) {", "+            visitForEachClause(ast);", "-            visitMethod(aAST);", "+            visitMethod(ast);"]}]}
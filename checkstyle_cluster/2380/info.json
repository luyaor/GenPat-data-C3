{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4816f7c7bd2f2bb91dfde8e0be342ff0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01557ff816f8ec1ac01a752909a863ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "2ed00e0af3ede8d8a276bbde08c5492a42df842d", "commitAfterChange": "e81ca8290b4efd42c3454ffa0159b739f958ea48", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void visitLiteralFor(DetailAST ast)", "signatureAfterChange": "     private void visitLiteralFor(DetailAST ast)", "diff": ["-        DetailAST parenAst = ast.findFirstToken(TokenTypes.LPAREN);", "-        if (!isPrecedingEmptyForInit(parenAst)) {", "-            processLeft(parenAst);", "+        final DetailAST lparen = ast.findFirstToken(TokenTypes.LPAREN);", "+        if (!isPrecedingEmptyForInit(lparen)) {", "+            processLeft(lparen);", "-        parenAst = ast.findFirstToken(TokenTypes.RPAREN);", "-        if (!isFollowsEmptyForIterator(parenAst)) {", "-            processRight(parenAst);", "+        final DetailAST rparen = ast.findFirstToken(TokenTypes.RPAREN);", "+        if (!isFollowsEmptyForIterator(rparen)) {", "+            processRight(rparen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74389e3270c533aba6f45148507c7392", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "199d3003aeb4cc7d748090fab7ee94a87e24058d", "commitAfterChange": "302f80bd65e3670d296bba40de712be7a0932bd3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected List parseElements(String aValue)         throws NullPointerException", "signatureAfterChange": "     protected List parseElements(final String aValue)         throws NullPointerException", "diff": ["-    protected List parseElements(String aValue)", "+    protected List parseElements(final String aValue)", "-        aValue = aValue.trim();", "-", "-        if (aValue.startsWith(\"{\") && aValue.endsWith(\"}\")) {", "-            aValue = aValue.substring(1, aValue.length() - 1);", "+        String str = aValue.trim();", "+        if (str.startsWith(\"{\") && str.endsWith(\"}\")) {", "+            str = str.substring(1, str.length() - 1);", "-        final StringTokenizer st = new StringTokenizer(aValue, \",\");", "+        final StringTokenizer st = new StringTokenizer(str, \",\");"]}]}
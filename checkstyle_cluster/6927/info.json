{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "016ac359dd21937608a3d31bdae8bf2d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cfb31a49d4b47b34a4096a095c47857", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "343b75b252db9492ace4c4e5bfb36016e631c7a5", "commitAfterChange": "f9f60d3142533c3eebff775e8eb1159935faaba1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if ((ast.getType() != TokenTypes.VARIABLE_DEF)", "-            || (ast.getParent().getType() != TokenTypes.OBJBLOCK))", "-        {", "-            return;", "+        switch (ast.getType()) {", "+            case TokenTypes.VARIABLE_DEF:", "+                if (!isAnonymousClassVariable(ast)) {", "+                    visitVariableDef(ast);", "+                }", "+                break;", "+            case TokenTypes.IMPORT:", "+                visitImport(ast);", "+                break;", "+            default:", "+                final String exceptionMsg = \"Unexpected token type: \" + ast.getText();", "+                throw new IllegalArgumentException(exceptionMsg);", "+    }", "-        final DetailAST varNameAST = getVarNameAST(ast);", "-        final String varName = varNameAST.getText();", "-            ScopeUtils.inInterfaceOrAnnotationBlock(ast);", "-        final Set<String> mods = getModifiers(ast);", "-        final String declaredScope = getVisibilityScope(mods);", "-        final String variableScope =", "-             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;", "-        if (!(\"private\".equals(variableScope)", "-                || inInterfaceOrAnnotationBlock // implicitly static and final", "-                || (mods.contains(\"static\") && mods.contains(\"final\"))", "-                || (\"package\".equals(variableScope) && isPackageAllowed())", "-                || (\"protected\".equals(variableScope) && isProtectedAllowed())", "-                || (\"public\".equals(variableScope)", "-                   && getPublicMemberRegexp().matcher(varName).find())))", "-        {", "-            log(varNameAST.getLineNo(), varNameAST.getColumnNo(),", "-                    MSG_KEY, varName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61479c2750f0f5566172279bc29082cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "6f937bff1da1183d58b20f48e3cc401dc9eb06f4", "commitAfterChange": "0024de5711531372850e883c970414563ab8e3ad", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST methodCall)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST ast)", "diff": ["-    public void visitToken(final DetailAST methodCall) {", "+", "+    @Override", "+    public void visitToken(final DetailAST ast) {", "+        switch (ast.getType()) {", "+            case TokenTypes.VARIABLE_DEF:", "+            case TokenTypes.PARAMETER_DEF:", "+                currentFrame.addField(ast);", "+                break;", "+            case TokenTypes.METHOD_CALL:", "+                processMethodCall(ast);", "+                break;", "+            case TokenTypes.SLIST:", "+                processSlist(ast);", "+                break;", "+            case TokenTypes.LITERAL_NEW:", "+                processLiteralNew(ast);", "+                break;", "+            default:", "+                processFrame(ast);", "+        }", "+    }", "-        if (dot.getType() != TokenTypes.DOT) {", "-            return;", "-        final DetailAST objCalledOn = dot.getFirstChild();", "-            return;", "-        final DetailAST method = objCalledOn.getNextSibling();", "-        final DetailAST expr = dot.getNextSibling().getFirstChild();", "-", "-        if (\"equals\".equals(method.getText())", "-            && containsOneArgument(methodCall) && containsAllSafeTokens(expr)) {", "-            log(methodCall.getLineNo(), methodCall.getColumnNo(),", "-                MSG_EQUALS_AVOID_NULL);", "-        }", "-", "-        if (!ignoreEqualsIgnoreCase", "-            && \"equalsIgnoreCase\".equals(method.getText())", "-            && containsOneArgument(methodCall) && containsAllSafeTokens(expr)) {", "-            log(methodCall.getLineNo(), methodCall.getColumnNo(),", "-                MSG_EQUALS_IGNORE_CASE_AVOID_NULL);", "-        }"]}]}
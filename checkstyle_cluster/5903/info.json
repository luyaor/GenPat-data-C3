{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b0bc4094736cdd689412226428d0213", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64e70aba5febc85bf976209dafe1021a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkLine(int aLineno, String aLine, Matcher aMatcher,             int aStartPosition)", "signatureAfterChange": "     private void checkLine(int lineno, String line, Matcher matcher,             int startPosition)", "diff": ["-    private void checkLine(int aLineno, String aLine, Matcher aMatcher,", "-            int aStartPosition)", "+    private void checkLine(int lineno, String line, Matcher matcher,", "+            int startPosition)", "-        final boolean foundMatch = aMatcher.find(aStartPosition);", "+        final boolean foundMatch = matcher.find(startPosition);", "-        final int startCol = aMatcher.start(0);", "-        final int endCol = aMatcher.end(0);", "+        final int startCol = matcher.start(0);", "+        final int endCol = matcher.end(0);", "-        if (mOptions.getSuppressor()", "-                .shouldSuppress(aLineno, startCol, aLineno, endCol - 1))", "+        if (options.getSuppressor()", "+                .shouldSuppress(lineno, startCol, lineno, endCol - 1))", "-            if (endCol < aLine.length()) {", "+            if (endCol < line.length()) {", "-                checkLine(aLineno, aLine, aMatcher, endCol);", "+                checkLine(lineno, line, matcher, endCol);", "-        mCurrentMatches++;", "-        if (mCurrentMatches > mOptions.getMaximum()) {", "-            if (\"\".equals(mOptions.getMessage())) {", "-                mOptions.getReporter().log(aLineno, \"regexp.exceeded\",", "-                        aMatcher.pattern().toString());", "+        currentMatches++;", "+        if (currentMatches > options.getMaximum()) {", "+            if (\"\".equals(options.getMessage())) {", "+                options.getReporter().log(lineno, \"regexp.exceeded\",", "+                        matcher.pattern().toString());", "-                mOptions.getReporter().log(aLineno, mOptions.getMessage());", "+                options.getReporter().log(lineno, options.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4fd99be5c9e65f2a9a530a1a5c2cdba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "957f644aeff928017aba3d0a920c1ce721296851", "commitAfterChange": "4065b439221c56ab2a11f97cb50c246d8ba2c913", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Configuration(Properties aProps, PrintStream aLog)         throws RESyntaxException, FileNotFoundException, IOException", "signatureAfterChange": "     public Configuration(Properties aProps, PrintStream aLog)         throws RESyntaxException, FileNotFoundException, IOException", "diff": ["-        setBooleanFlag(aProps, ALLOW_TABS_PROP);", "+        setBooleanProperty(aProps, ALLOW_TABS_PROP);", "-        setBooleanFlag(aProps, ALLOW_PROTECTED_PROP);", "-        setBooleanFlag(aProps, ALLOW_PACKAGE_PROP);", "-        setBooleanFlag(aProps, ALLOW_NO_AUTHOR_PROP);", "+        setBooleanProperty(aProps, ALLOW_PROTECTED_PROP);", "+        setBooleanProperty(aProps, ALLOW_PACKAGE_PROP);", "+        setBooleanProperty(aProps, ALLOW_NO_AUTHOR_PROP);", "-        setBooleanFlag(aProps, REQUIRE_PACKAGE_HTML_PROP);", "-        setBooleanFlag(aProps, IGNORE_IMPORTS_PROP);", "+        setBooleanProperty(aProps, REQUIRE_PACKAGE_HTML_PROP);", "+        setBooleanProperty(aProps, IGNORE_IMPORTS_PROP);", "-        setBooleanFlag(aProps, IGNORE_WHITESPACE_PROP);", "-        setBooleanFlag(aProps, IGNORE_CAST_WHITESPACE_PROP);", "-        setBooleanFlag(aProps, IGNORE_OP_WRAP_PROP);", "-        setBooleanFlag(aProps, IGNORE_BRACES_PROP);", "-        setBooleanFlag(aProps, IGNORE_LONG_ELL_PROP);", "-        setBooleanFlag(aProps, IGNORE_PUBLIC_IN_INTERFACE_PROP);", "+        setBooleanProperty(aProps, IGNORE_WHITESPACE_PROP);", "+        setBooleanProperty(aProps, IGNORE_CAST_WHITESPACE_PROP);", "+        setBooleanProperty(aProps, IGNORE_OP_WRAP_PROP);", "+        setBooleanProperty(aProps, IGNORE_BRACES_PROP);", "+        setBooleanProperty(aProps, IGNORE_LONG_ELL_PROP);", "+        setBooleanProperty(aProps, IGNORE_PUBLIC_IN_INTERFACE_PROP);", "-        setBooleanFlag(aProps, IGNORE_IMPORT_LENGTH_PROP);", "+        setBooleanProperty(aProps, IGNORE_IMPORT_LENGTH_PROP);", "-        setBooleanFlag(aProps, HEADER_LINES_REGEXP_PROP);", "+        setBooleanProperty(aProps, HEADER_LINES_REGEXP_PROP);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff08abb27761b9a572a0efca52c5df4e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-        foundMatch = mMatcher.find();", "-        if (!foundMatch && !mIllegalPattern && (mMatchCount == 0)) {", "+        foundMatch = matcher.find();", "+        if (!foundMatch && !illegalPattern && (matchCount == 0)) {", "-            final LineColumn start = text.lineColumn(mMatcher.start());", "-            final LineColumn end = text.lineColumn(mMatcher.end() - 1);", "+            final LineColumn start = text.lineColumn(matcher.start());", "+            final LineColumn end = text.lineColumn(matcher.end() - 1);", "-            if (mIgnoreComments) {", "+            if (ignoreComments) {", "-                mMatchCount++;", "-                if (mIllegalPattern || (mCheckForDuplicates", "-                        && ((mMatchCount - 1) > mDuplicateLimit)))", "+                matchCount++;", "+                if (illegalPattern || (checkForDuplicates", "+                        && ((matchCount - 1) > duplicateLimit)))", "-                    mErrorCount++;", "+                    errorCount++;", "-            if ((mErrorCount < mErrorLimit)", "-                    && (ignore || mIllegalPattern || mCheckForDuplicates))", "+            if ((errorCount < errorLimit)", "+                    && (ignore || illegalPattern || checkForDuplicates))"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7e95d201448a4efa20517ca3438d9e7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c342fe72e5fac074a2a855a0c93ef8f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java", "commitBeforeChange": "2aeea0413772d6083e90882838c7d41a488f5423", "commitAfterChange": "ca15d3d758a857dffcfd8fb7a739b32caef797e1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void noFinalizerBasicTest() throws Exception", "signatureAfterChange": "      @Test     public void testSpaceSequence() throws Exception", "diff": ["-    public void noFinalizerBasicTest() throws Exception {", "-        ", "-        String msg = getCheckMessage(NoFinalizerCheck.class, \"avoid.finalizer.method\");", "-            \"5: \" + msg,", "-        Configuration checkConfig = builder.getCheckConfig(\"NoFinalizer\");", "-        String filePath = builder.getFilePath(\"NoFinalizerInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+", "+    public void testSpaceSequence() throws Exception {", "+        String msg = getCheckMessage(NonEmptyAtclauseDescriptionCheck.class, \"non.empty.atclause\");", "+            \"27: \" + msg,", "+            \"28: \" + msg,", "+            \"29: \" + msg,", "+            \"38: \" + msg,", "+            \"39: \" + msg,", "+            \"40: \" + msg,", "+        Configuration checkConfig = builder.getCheckConfig(\"NonEmptyAtclauseDescription\");", "+        String filePath = builder.getFilePath(\"InputNonEmptyAtclauseDescriptionCheckSpaceSeq\");", "+        Integer[] warnList = getLineNumbersFromExpected(expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6954d09ed79690ae5db1fa4254c21998", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java", "commitBeforeChange": "2aeea0413772d6083e90882838c7d41a488f5423", "commitAfterChange": "ca15d3d758a857dffcfd8fb7a739b32caef797e1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "          @Test     public void noFinalizerExtendedTest() throws Exception", "signatureAfterChange": "     private static Integer[] getLineNumbersFromExpected(String[] expected)", "diff": ["-    ", "-    public void noFinalizerExtendedTest() throws Exception {", "-        ", "-        String msg = getCheckMessage(NoFinalizerCheck.class, \"avoid.finalizer.method\");", "-            \"9: \" + msg,", "-            \"21: \" + msg,", "-            \"33: \" + msg,", "-            \"45: \" + msg,", "-            \"57: \" + msg,", "-            \"69: \" + msg,", "-            \"79: \" + msg,", "-            \"119: \" + msg,", "-            \"136: \" + msg,", "-        Configuration checkConfig = builder.getCheckConfig(\"NoFinalizer\");", "-        String filePath = builder.getFilePath(\"NoFinalizeExtendInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+     */", "+    private static Integer[] getLineNumbersFromExpected(String[] expected) {", "+        Integer[] result = new Integer[expected.length];", "+        for (int i = 0; i < expected.length; i++) {", "+            result[i] = Integer.valueOf(expected[i].substring(0, expected[i].indexOf(':')));", "+        }", "+        return result;", "+    }"]}]}
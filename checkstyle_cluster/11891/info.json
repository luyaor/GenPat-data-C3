{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6624d565ecb228232ed1ce9b7fad31bd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be5906c6aed0b32c976d6660fd9deab9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST aAST, final Scope aScope)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast, final Scope scope)", "diff": ["-    private boolean shouldCheck(final DetailAST aAST, final Scope aScope)", "+    private boolean shouldCheck(final DetailAST ast, final Scope scope)", "-        final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);", "+        final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);", "-        return aScope.isIn(mScope)", "-                && surroundingScope.isIn(mScope)", "-                && ((mExcludeScope == null) || !aScope.isIn(mExcludeScope)", "-                    || !surroundingScope.isIn(mExcludeScope));", "+        return scope.isIn(this.scope)", "+                && surroundingScope.isIn(this.scope)", "+                && ((excludeScope == null) || !scope.isIn(excludeScope)", "+                    || !surroundingScope.isIn(excludeScope));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd6e403e32812062a716e71d1c887c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d9ef0ac5eed2084dc0298ec981f6fc04cf628e85", "commitAfterChange": "0a72322796c28266f07df8af6f7e000aa9cf0e48", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST aAST)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST aAST, final Scope aScope)", "diff": ["-    private boolean shouldCheck(final DetailAST aAST)", "+    private boolean shouldCheck(final DetailAST aAST, final Scope aScope)", "-        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-        final Scope scope = ScopeUtils.inInterfaceOrAnnotationBlock(aAST)", "-            ? Scope.PUBLIC", "-            : declaredScope;", "-        return scope.isIn(mScope)", "-            && surroundingScope.isIn(mScope)", "-            && ((mExcludeScope == null) || !scope.isIn(mExcludeScope)", "-                || !surroundingScope.isIn(mExcludeScope));", "+        return aScope.isIn(mScope)", "+                && surroundingScope.isIn(mScope)", "+                && ((mExcludeScope == null) || !aScope.isIn(mExcludeScope)", "+                    || !surroundingScope.isIn(mExcludeScope));"]}]}
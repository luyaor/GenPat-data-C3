{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cf2909c83c8f80d9073b292420af48e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19cf99534bf6fe563234dbb3d072b250", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "bd757c37dd4ba1384c761a98f31bdbbd22d1daf8", "commitAfterChange": "73ec35d35bcf970c588278cb18300dfdf814a704", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean isInHashCodeMethod(DetailAST aAST)", "signatureAfterChange": "     private boolean isInHashCodeMethod(DetailAST aAST)", "diff": ["-     */", "-    private boolean isInHashCodeMethod(DetailAST aAST)", "-    {", "-        // if not in a code block, can't be in hashCode()", "-        if (!ScopeUtils.inCodeBlock(aAST)) {", "-            return false;", "-        }", "-", "-        // find the method definition AST", "-        DetailAST methodDefAST = aAST.getParent();", "-        while (methodDefAST != null", "-                && methodDefAST.getType() != TokenTypes.METHOD_DEF)", "-        {", "-            methodDefAST = methodDefAST.getParent();", "-        }", "-", "-        if (methodDefAST == null) {", "-            return false;", "-        }", "-", "-        // chech for 'hashCode' name", "-        final DetailAST identAST =", "-                methodDefAST.findFirstToken(TokenTypes.IDENT);", "-        System.out.println(identAST);", "-        if (!\"hashCode\".equals(identAST.getText())) {", "-            return false;", "-        }", "-", "-        // check for no arguments", "-        final DetailAST paramAST =", "-                methodDefAST.findFirstToken(TokenTypes.PARAMETERS);", "-        if (paramAST.getChildCount() != 0) {", "-            return false;", "-        }", "-", "-        // we are in a 'public int hashCode()' method!", "-        return true;", "-    }", "+     */", "+    private boolean isInHashCodeMethod(DetailAST aAST)", "+    {", "+        // if not in a code block, can't be in hashCode()", "+        if (!ScopeUtils.inCodeBlock(aAST)) {", "+            return false;", "+        }", "+    ", "+        // find the method definition AST", "+        DetailAST methodDefAST = aAST.getParent();", "+        while ((null != methodDefAST)", "+                && (TokenTypes.METHOD_DEF != methodDefAST.getType()))", "+        {", "+            methodDefAST = methodDefAST.getParent();", "+        }", "+    ", "+        if (null == methodDefAST) {", "+            return false;", "+        }", "+    ", "+        // Check for 'hashCode' name.", "+        final DetailAST identAST =", "+            methodDefAST.findFirstToken(TokenTypes.IDENT);", "+        if (!\"hashCode\".equals(identAST.getText())) {", "+            return false;", "+        }", "+    ", "+        // Check for no arguments.", "+        final DetailAST paramAST =", "+            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);", "+        if (0 != paramAST.getChildCount()) {", "+            return false;", "+        }", "+    ", "+        // we are in a 'public int hashCode()' method! The compiler will ensure", "+        // the method returns an 'int' and is public.", "+        return true;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab3fe1d61552fd24bbf8cb38f4c9dada", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "9ddad74e484384e5ca2d88ab0fe21922189e2b85", "commitAfterChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static boolean isInHashCodeMethod(DetailAST ast)", "signatureAfterChange": "     private static boolean isInHashCodeMethod(DetailAST ast)", "diff": ["+        boolean inHashCodeMethod = false;", "+", "-        if (!ScopeUtils.isInCodeBlock(ast)) {", "-            return false;", "-        }", "+        if (ScopeUtils.isInCodeBlock(ast)) {", "+            // find the method definition AST", "+            DetailAST methodDefAST = ast.getParent();", "+            while (methodDefAST != null", "+                    && methodDefAST.getType() != TokenTypes.METHOD_DEF) {", "+                methodDefAST = methodDefAST.getParent();", "+            }", "-        // find the method definition AST", "-        DetailAST methodDefAST = ast.getParent();", "-        while (methodDefAST != null", "-                && methodDefAST.getType() != TokenTypes.METHOD_DEF) {", "-            methodDefAST = methodDefAST.getParent();", "-        }", "+            if (methodDefAST != null) {", "+                // Check for 'hashCode' name.", "+                final DetailAST identAST = methodDefAST.findFirstToken(TokenTypes.IDENT);", "-        if (methodDefAST == null) {", "-            return false;", "+                if (\"hashCode\".equals(identAST.getText())) {", "+                    // Check for no arguments.", "+                    final DetailAST paramAST = methodDefAST.findFirstToken(TokenTypes.PARAMETERS);", "+                    // we are in a 'public int hashCode()' method! The compiler will ensure", "+                    // the method returns an 'int' and is public.", "+                    inHashCodeMethod = paramAST.getChildCount() == 0;", "+                }", "+            }", "-", "-        // Check for 'hashCode' name.", "-        final DetailAST identAST =", "-            methodDefAST.findFirstToken(TokenTypes.IDENT);", "-        if (!\"hashCode\".equals(identAST.getText())) {", "-            return false;", "-        }", "-", "-        // Check for no arguments.", "-        final DetailAST paramAST =", "-            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);", "-        // we are in a 'public int hashCode()' method! The compiler will ensure", "-        // the method returns an 'int' and is public.", "-        return paramAST.getChildCount() == 0;", "+        return inHashCodeMethod;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33b52a0aa19a696418840579d78607e9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c86f2b1b6fcbed910b718e8f0cbc660", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "440cf6836f278602a790d764f257777be80d8b9e", "commitAfterChange": "686afc521a11088c57632352eb6fd60a682b03d6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void endElement(String aNamespaceURI,                            String aLocalName,                            String aQName)", "signatureAfterChange": "     public void endElement(String aNamespaceURI,                            String aLocalName,                            String aQName)", "diff": ["-        mConfigStack.pop();", "+        if (aQName.equals(\"config\")) {", "+            mConfigStack.pop();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfd4f79419ed2903696f8feda53077be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java", "commitBeforeChange": "42fc689da0fd2f8b9d6e1ea42da65479f5ad9121", "commitAfterChange": "38be87d86ccef8820fb52315c612fe0d16188013", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST rootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-        if (!publicTypeFound) {", "-            // skip first top-level type.", "-            lineNumberTypeMap.remove(lineNumberTypeMap.firstKey());", "-        }", "+        if (!lineNumberTypeMap.isEmpty()) {", "+            if (!publicTypeFound) {", "+                // skip first top-level type.", "+                lineNumberTypeMap.remove(lineNumberTypeMap.firstKey());", "+            }", "-        for (Map.Entry<Integer, String> entry", "-                : lineNumberTypeMap.entrySet())", "-        {", "-            log(entry.getKey(), MSG_KEY, entry.getValue());", "+            for (Map.Entry<Integer, String> entry", "+                    : lineNumberTypeMap.entrySet())", "+            {", "+                log(entry.getKey(), MSG_KEY, entry.getValue());", "+            }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e680060d30073dd0568e9c85d9fcde42", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessages.java", "commitBeforeChange": "bf31a252e3e45d28fd7ae7971bbe925d3ab03489", "commitAfterChange": "c67842e01546aefb4231a1ef712f6313a258b41c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void add(LocalizedMessage aMsg)", "signatureAfterChange": "     public void add(LocalizedMessage aMsg)", "diff": ["-        mMessages.add(aMsg);", "+        if (!mMessages.contains(aMsg)) {", "+            mMessages.add(aMsg);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8f191c650512093b3261a5c22ba1266", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java", "commitBeforeChange": "a077b7282714b38286a09dcea10b710e5121a246", "commitAfterChange": "e6f4dad587d318233ff9343c5b66d831b7035fcf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void visitLiteralThrows(DetailAST ast)", "signatureAfterChange": "     private void visitLiteralThrows(DetailAST ast)", "diff": ["-        // Account for all the commas!", "-        final int count = (ast.getChildCount() + 1) / 2;", "-        if (count > getMax()) {", "-            log(ast.getLineNo(),  ast.getColumnNo(), MSG_KEY,", "-                count, getMax());", "+        if (!isOverriding(ast)) {", "+            // Account for all the commas!", "+            final int count = (ast.getChildCount() + 1) / 2;", "+            if (count > getMax()) {", "+                log(ast.getLineNo(),  ast.getColumnNo(), MSG_KEY,", "+                    count, getMax());", "+            }"]}]}
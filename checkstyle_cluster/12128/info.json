{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "493c95d68f7b3f14576aee596792b523", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fdd9594c63640e7c361564cc66bf720", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "f464a296056168259e1f84333507fcb797d93cdc", "commitAfterChange": "3ded17ac3d61b4284299319f5f60ee220154fded", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 88, "signatureBeforeChange": "     public boolean isIgnoreParenWhitespace()", "signatureAfterChange": "     private static PadOption getPadOptionProperty(         Properties aProps,         String aName,         PadOption aDefault,         PrintStream aLog)", "diff": ["-    /** @return whether to ignore checks for whitespace around parenthesis **/", "-    public boolean isIgnoreParenWhitespace()", "-    {", "-        return mIgnoreParenWhitespace;", "+     */", "+    private static PadOption getPadOptionProperty(", "+        Properties aProps,", "+        String aName,", "+        PadOption aDefault,", "+        PrintStream aLog)", "+    {", "+        PadOption retVal = aDefault;", "+        final String strRep = aProps.getProperty(aName);", "+        if (strRep != null) {", "+            retVal = PadOption.decode(strRep);", "+            if (retVal == null) {", "+                aLog.println(\"Unable to parse \" + aName +", "+                             \" property with value \" + strRep +", "+                             \", defaulting to \" + aDefault + \".\");", "+            }", "+        }", "+        return retVal;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6808d7aa030592a4e9fed1a0d668a674", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "3230cfbc88352b27acf9d95bf95c7f19e20caca1", "commitAfterChange": "e543c01abdcbae8eb457ec9d3dd45191bbbd4259", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 86, "signatureBeforeChange": "     public boolean isIgnoreOpWrap()", "signatureAfterChange": "     private static WrapOpOption getWrapOpOptionProperty(         Properties aProps,         String aName,         WrapOpOption aDefault,         PrintStream aLog)", "diff": ["-    /** @return whether to ignore checks for operator wrapping **/", "-    public boolean isIgnoreOpWrap()", "-    {", "-        return getBooleanProperty(Defn.IGNORE_OP_WRAP_PROP);", "-    }", "+     */", "+    private static WrapOpOption getWrapOpOptionProperty(", "+        Properties aProps,", "+        String aName,", "+        WrapOpOption aDefault,", "+        PrintStream aLog)", "+    {", "+        WrapOpOption retVal = aDefault;", "+        final String strRep = aProps.getProperty(aName);", "+        if (strRep != null) {", "+            retVal = WrapOpOption.decode(strRep);", "+            if (retVal == null) {", "+                aLog.println(\"Unable to parse \" + aName", "+                             + \" property with value \" + strRep", "+                             + \", defaulting to \" + aDefault + \".\");", "+            }", "+        }", "+        return retVal;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f395ee4d5d67a79a8873821f920488c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11d0239640b7891baed1ef3b6237e64c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java", "commitBeforeChange": "39f40e57858c8a5c6310bf35e6649b03188b6996", "commitAfterChange": "0518b753a40f1857516b356654e5d01834af2109", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Before     public void setUp()", "signatureAfterChange": "      @Test     public void testAllowNoEmptyLineBetweenFields() throws Exception", "diff": ["-", "-    @Before", "-    public void setUp()", "-    {", "-        mCheckConfig = createCheckConfig(EmptyLineSeparatorCheck.class);", "-    }", "+", "+    @Test", "+    public void testAllowNoEmptyLineBetweenFields() throws Exception", "+    {", "+", "+        DefaultConfiguration checkConfig = createCheckConfig(EmptyLineSeparatorCheck.class);", "+        checkConfig.addAttribute(\"allowNoEmptyLineBetweenFields\", \"true\");", "+", "+        final String[] expected = {", "+            \"20: 'import' should be separated from previous statement.\",", "+            \"33: 'CLASS_DEF' should be separated from previous statement.\",", "+            \"37: 'STATIC_INIT' should be separated from previous statement.\",", "+            \"75: 'INTERFACE_DEF' should be separated from previous statement.\",", "+        };", "+        verify(checkConfig, getPath(\"whitespace/InputEmptyLineSeparatorCheck.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eee91e269149268ef88f91e8b88817aa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheckTest.java", "commitBeforeChange": "9aa9d751071e0597b268235f2dff4fc6373b2d5f", "commitAfterChange": "67da361a9a70df8baa4264b61c3ad5ea77e57dcc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void test() throws Exception", "signatureAfterChange": "      public void testIllegalClassNames() throws Exception", "diff": ["-    public void test() throws Exception", "+", "+    public void testIllegalClassNames() throws Exception", "+    {", "+        DefaultConfiguration checkConfig = createCheckConfig(IllegalCatchCheck.class);", "+        checkConfig.addAttribute(\"illegalClassNames\", ", "+                                 \"java.lang.Error, java.lang.Exception, java.lang.Throwable\");", "+", "+        String[] expected = {", "+            \"7:11: Catching 'Exception' is not allowed.\",", "+            \"8:11: Catching 'Throwable' is not allowed.\",", "+            \"15:11: Catching 'java.lang.Exception' is not allowed.\",", "+            \"16:11: Catching 'java.lang.Throwable' is not allowed.\",", "+        };", "+", "+        verify(checkConfig, getPath(\"coding\" + File.separator + \"InputIllegalCatchCheck.java\"), expected);", "+    }"]}]}
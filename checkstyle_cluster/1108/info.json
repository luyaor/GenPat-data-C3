{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e816dbd5c37600a4e7208076b04a3e94", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ba897890e5eb9e065df496c8530f18", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "8787efc822fd27a4a3f3dd795c34525ccc08d297", "commitAfterChange": "2fe9f501d86b6e70aa64f4474ae0863bb0b928d5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        final LexicalFrame frame = this.mFrames.current();", "-        case TokenTypes.PARAMETER_DEF :", "-        case TokenTypes.VARIABLE_DEF : {", "+        case TokenTypes.VARIABLE_DEF :  {", "+            final String name =", "+                    aAST.findFirstToken(TokenTypes.IDENT).getText();", "+            if (frame instanceof ClassFrame) {", "+                final DetailAST mods =", "+                    aAST.findFirstToken(TokenTypes.MODIFIERS);", "+                if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {", "+                    ((ClassFrame) frame).addStaticMember(name);", "+                }", "+                else {", "+                    ((ClassFrame) frame).addInstanceMember(name);", "+                }", "+            }", "+            else {", "+                frame.addName(name);", "+            }", "+            break;", "+        }", "+        case TokenTypes.PARAMETER_DEF : {", "-            this.mFrames.current().addName(nameAST.getText());", "+            frame.addName(nameAST.getText());", "-            this.mFrames.current().addName(nameAST.getText());", "+            frame.addName(nameAST.getText());", "-        case TokenTypes.METHOD_DEF :", "+        case TokenTypes.METHOD_DEF : {", "+            final String name = aAST.findFirstToken(TokenTypes.IDENT).getText();", "+            if (frame instanceof ClassFrame) {", "+                final DetailAST mods =", "+                    aAST.findFirstToken(TokenTypes.MODIFIERS);", "+                if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {", "+                    ((ClassFrame) frame).addStaticMember(name);", "+                }", "+                else {", "+                    ((ClassFrame) frame).addInstanceMember(name);", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "989737de6b41ae9d193584bce0ad7b90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "d6272b70eb5ad61fd8ab34091e970c50b1f67386", "commitAfterChange": "1a2c318e22a0b2b22ccc76019217c0892fe2d59b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static void main(String... args) throws UnsupportedEncodingException", "signatureAfterChange": "     public static void main(String... args) throws UnsupportedEncodingException             , CheckstyleException, FileNotFoundException", "diff": ["+            , CheckstyleException, FileNotFoundException", "-        boolean parseResult = false;", "+        int errorCounter = 0;", "+        boolean cliViolations = false;", "+", "-            processCommandLine(parseCli(args));", "-            parseResult = true;", "+            //parse CLI arguments", "+            final CommandLine commandLine = parseCli(args);", "+", "+            // show version and exit if it is requested", "+            if (commandLine.hasOption(\"v\")) {", "+                System.out.println(\"Checkstyle version: \"", "+                        + Main.class.getPackage().getImplementationVersion());", "+            }", "+            else {", "+                // return error is smth is wrong in arguments", "+                final List<String> messages = validateCli(commandLine);", "+                cliViolations = !messages.isEmpty();", "+                if (messages.isEmpty()) {", "+", "+                    // create config helper object", "+                    final CliOptions config = convertCliToPojo(commandLine);", "+                    // run Checker", "+                    errorCounter = runCheckstyle(config);", "+", "+                }", "+                else {", "+                    errorCounter = 1;", "+                    for (String message : messages) {", "+                        System.out.println(message);", "+                    }", "+                }", "+            }", "-        catch (final ParseException e) {", "-            System.err.println(\"Could not parse parameters: \" + e.getMessage());", "-            e.printStackTrace();", "+        catch (ParseException pex) {", "+            // smth wrong with arguments - print error and manual", "+            cliViolations = true;", "+            errorCounter = 1;", "+            System.out.println(pex.getMessage());", "+            printUsage();", "-        catch (final Exception e) {", "-            System.err.println(\"Could not execute Checkstyle: \" + e.getMessage());", "-            e.printStackTrace();", "+        catch (Exception ex) {", "+            // smth wrong during processing", "+            errorCounter = 1;", "+            throw ex;", "-            if (!parseResult) {", "-                usage();", "+            // return exit code base on validation of Checker", "+            if (errorCounter != 0 && !cliViolations) {", "+                System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));", "-            System.exit(parseResult ? 0 : 1);", "+            System.exit(errorCounter);"]}]}
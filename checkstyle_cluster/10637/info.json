{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7df32651d199b4930f4424e61b7a580e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1237cf8a54ea75d48058d65acf961829", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "e81ca8290b4efd42c3454ffa0159b739f958ea48", "commitAfterChange": "f293a2107656cebb829e33cba2384ba56be54512", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST rootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-            if (!importGroup.equals(currentGroup)) {", "+            if (importGroup.equals(currentGroup)) {", "+                if (sortImportsInGroupAlphabetically", "+                        && previousImportFromCurrentGroup != null", "+                        && compareImports(fullImportIdent, previousImportFromCurrentGroup) < 0) {", "+                    log(importObject.getLineNumber(), MSG_LEX,", "+                            fullImportIdent, previousImportFromCurrentGroup);", "+                }", "+                else {", "+                    previousImportFromCurrentGroup = fullImportIdent;", "+                }", "+            }", "+            else {", "-                }", "-            }", "-            else {", "-                if (sortImportsInGroupAlphabetically", "-                    && previousImportFromCurrentGroup != null", "-                    && compareImports(fullImportIdent, previousImportFromCurrentGroup) < 0) {", "-                    log(importObject.getLineNumber(), MSG_LEX,", "-                            fullImportIdent, previousImportFromCurrentGroup);", "-                }", "-                else {", "-                    previousImportFromCurrentGroup = fullImportIdent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83084a24206ad58ad533e098e13cb1c7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "da2d75a1780c1691dc4aa45489f9e9674b1c652e", "commitAfterChange": "36b91a59d62c9505b835717f00f470c499cf9b30", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void removeVariable(DetailAST ast)", "signatureAfterChange": "     private void removeVariable(DetailAST ast)", "diff": ["+     */", "+    private void removeVariable(DetailAST ast) {", "+        final Iterator<ScopeData> iterator = scopeStack.descendingIterator();", "+        while (iterator.hasNext()) {", "+            final ScopeData scopeData = iterator.next();", "+            final Map<String, DetailAST> scope = scopeData.scope;", "+            final DetailAST storedVariable = scope.get(ast.getText());", "+            if (storedVariable != null && isSameVariables(storedVariable, ast)) {", "+                if (shouldRemoveVariable(scopeData, ast)) {", "+                    scope.remove(ast.getText());", "+                }", "+                break;", "+            }", "+        }", "+    }", "-    private void removeVariable(DetailAST ast) {", "-        final Iterator<Map<String, DetailAST>> iterator = scopeStack.descendingIterator();", "-        while (iterator.hasNext()) {", "-            final Map<String, DetailAST> state = iterator.next();", "-            final DetailAST storedVariable = state.get(ast.getText());", "-            if (storedVariable != null && isSameVariables(storedVariable, ast)) {", "-                state.remove(ast.getText());", "-                break;", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc446be33f6b905300ed2cf437d723d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "91a49a90d40c6adad5f973f792c6b80003a69263", "commitAfterChange": "a172cb76e245dfeb01e9957cfe196f26bde555d7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private boolean isCalledOnStringField(DetailAST objCalledOn)", "signatureAfterChange": "     private boolean isCalledOnStringFieldOrVariable(DetailAST objCalledOn)", "diff": ["-    private boolean isCalledOnStringField(DetailAST objCalledOn) {", "-        boolean result = false;", "+    private boolean isCalledOnStringFieldOrVariable(DetailAST objCalledOn) {", "+        boolean result;", "-        final String name = objCalledOn.getText();", "-            FieldFrame frame = currentFrame;", "-            while (frame != null) {", "-                final DetailAST field = frame.findField(name);", "-                if (field != null", "-                        && (frame.isClassOrEnumOrEnumConstDef()", "-                                || checkLineNo(field, objCalledOn))) {", "-                    result = STRING.equals(getFieldType(field));", "-                    break;", "-                }", "-                frame = frame.getParent();", "-            }", "+            result = isStringFieldOrVariable(objCalledOn);", "-                final DetailAST field = getObjectFrame(currentFrame).findField(name);", "-                result = STRING.equals(getFieldType(field));", "+                result = isStringFieldOrVariableFromThisInstance(objCalledOn);", "-                FieldFrame frame = getObjectFrame(currentFrame);", "-                while (frame != null) {", "-                    if (className.equals(frame.getFrameName())) {", "-                        final DetailAST field = frame.findField(name);", "-                        result = STRING.equals(getFieldType(field));", "-                        break;", "-                    }", "-                    frame = getObjectFrame(frame.getParent());", "-                }", "+                result = isStringFieldOrVariableFromClass(objCalledOn, className);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdb18cb1bd9085701c01bdc06eaac0f9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "423ed9e469db620671459827b58c89025d8f6c66", "commitAfterChange": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private boolean isCalledOnStringField(DetailAST objCalledOn)", "signatureAfterChange": "     private boolean isCalledOnStringField(DetailAST objCalledOn)", "diff": ["-        if (previousSiblingAst != null) {", "+        if (previousSiblingAst == null) {", "+            FieldFrame frame = currentFrame;", "+            while (frame != null) {", "+                final DetailAST field = frame.findField(name);", "+                if (field != null", "+                        && (frame.isClassOrEnumOrEnumConstDef()", "+                                || checkLineNo(field, objCalledOn))) {", "+                    result = STRING.equals(getFieldType(field));", "+                    break;", "+                }", "+                frame = frame.getParent();", "+            }", "+        }", "+        else {", "-            }", "-        }", "-        else {", "-            FieldFrame frame = currentFrame;", "-            while (frame != null) {", "-                final DetailAST field = frame.findField(name);", "-                if (field != null", "-                        && (frame.isClassOrEnumOrEnumConstDef()", "-                                || checkLineNo(field, objCalledOn))) {", "-                    result = STRING.equals(getFieldType(field));", "-                    break;", "-                }", "-                frame = frame.getParent();"]}]}
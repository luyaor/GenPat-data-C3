{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18ab9eb5e945bd8ce73da88f3ca57b1a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a66c0aa501581527dcf876fb9caf6be3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/PackageObjectFactoryTest.java", "commitBeforeChange": "8f86620e72849120dc5fba45c3cc54ed38e24447", "commitAfterChange": "d345f3beb27f3d8e3fde06f7e2c7612ddf691b95", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testMakeObectNoClass()", "signatureAfterChange": "      @Test     public void testMakeObjectNoClass()", "diff": ["-    public void testMakeObectNoClass() {", "+    public void testMakeObjectNoClass() {", "-            fail(\"Instantiated non-existant class\");", "+            fail(\"Instantiated non-existent class\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b61fbe9360261961d583b2aad8647537", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java", "commitBeforeChange": "782da01103fc7ec8e69a3da7a5ef800dac866a8b", "commitAfterChange": "68959eeefff4d4a5b295cefbec242c643d523c6b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private static void collectDeclarations(Deque<LexicalFrame> frameStack,         DetailAST ast)", "signatureAfterChange": "     private static void collectDeclarations(Deque<LexicalFrame> frameStack,         DetailAST ast)", "diff": ["-            case TokenTypes.VARIABLE_DEF :  {", "+            case TokenTypes.VARIABLE_DEF :", "-            }", "-            case TokenTypes.PARAMETER_DEF : {", "-                final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-                frame.addName(nameAST.getText());", "+            case TokenTypes.PARAMETER_DEF :", "+                final DetailAST parameterAST = ast.findFirstToken(TokenTypes.IDENT);", "+                frame.addName(parameterAST.getText());", "-            }", "-            case TokenTypes.ANNOTATION_DEF : {", "-                final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-                frame.addName(nameAST.getText());", "+            case TokenTypes.ANNOTATION_DEF :", "+                final DetailAST classAST = ast.findFirstToken(TokenTypes.IDENT);", "+                frame.addName(classAST.getText());", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13dc24b0c3a048a029c914aa75b008f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheck.java", "commitBeforeChange": "889f470ea6ca16b3067e35e2463282d9678f7bf0", "commitAfterChange": "80c8e1c7a8f32c0dd263fdd30d9d87ade317f51c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean findNonCommentMatch(             String aLine, int aLineNumber, int aStartPosition)", "signatureAfterChange": "     private boolean findNonCommentMatch(             String aLine, int aLineNumber, int aStartPosition)", "diff": ["-                else {", "-                    // end of line reached", "-                    return false;", "-                }", "+                // end of line reached", "+                return false;", "-            else {", "-                // not intersecting with comment", "-                return true;", "-            }", "+            // not intersecting with comment", "+            return true;", "-        else {", "-            // no match is found", "-            return false;", "-        }", "+        // no match is found", "+        return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8161b03ba62d3eeb8dc7cad2d9649f0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "782da01103fc7ec8e69a3da7a5ef800dac866a8b", "commitAfterChange": "68959eeefff4d4a5b295cefbec242c643d523c6b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void checkStyleType(final DetailAST annotation)", "signatureAfterChange": "     private void checkStyleType(final DetailAST annotation)", "diff": ["-", "-            case COMPACT_NO_ARRAY: {", "+            case COMPACT_NO_ARRAY:", "-            }", "-", "-            case COMPACT: {", "+            case COMPACT:", "-            }", "-", "-            case EXPANDED: {", "+            case EXPANDED:", "-            }"]}]}
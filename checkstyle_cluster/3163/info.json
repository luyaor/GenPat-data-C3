{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "669edeb6c7a3fa66c911f1bae743c4a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "139763daeabc1ddaf84fb34abeeca5e9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "969678107261e649c968b56dbace0064304bfb56", "commitAfterChange": "803dafc96a33bd987f84d930b9ae3ebf7a23e097", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void reportCppComment(int aStartLineNo, int aStartColNo)", "signatureAfterChange": "     public void reportCppComment(int aStartLineNo, int aStartColNo)", "diff": ["-        final String cmt = mLines[aStartLineNo - 1].substring(aStartColNo);", "-        mCPlusPlusComments.put(new Integer(aStartLineNo), cmt);", "+        final String line = mLines[aStartLineNo - 1];", "+        final String[] txt = new String[] {line.substring(aStartColNo)};", "+        final Comment comment =", "+            new Comment(txt, aStartColNo, aStartLineNo, line.length() - 1);", "+        mCPlusPlusComments.put(new Integer(aStartLineNo), comment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "346b5cb558fc8ebdc3c902a2f50898f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "54a09706ec1db32435b09e6b6910813325558f8d", "commitAfterChange": "abff1a2489ea8af10e1bc0a335551262d22f44e7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public Checker(GlobalProperties aConfig, CheckConfiguration[] aConfigs)         throws CheckstyleException", "signatureAfterChange": "     public Checker(GlobalProperties aConfig, CheckConfiguration[] aConfigs)         throws CheckstyleException", "diff": ["-        mCache = new PropertyCacheFile(aConfig);", "-        mWalker = new TreeWalker(mMessages, mConfig.getTabWidth());", "+", "+        // TODO: create, configure and register the FileSetChecks from config", "+        // file instead of hardcoding it here in the Checker constructor.", "+        // Probably the addFileSetCheck mthod must be called from outside", "+        // the checker, just like the TreeWalker is not concerned with", "+        // finding all the checks it has to execute (IOC principle).", "+", "+        // TODO: uncommenting the addFileSetCheck calls breaks the tests", "+        // because the packageHtml check is always executed and yields", "+        // additional errors that are not expected in the current test code", "+        // (which should stay like it currently is!)", "+", "+        FileSetCheck translationCheck = new TranslationCheck();", "+        // addFileSetCheck(translationCheck);", "+", "+        FileSetCheck packageHtmlCheck = new PackageHtmlCheck();", "+        // addFileSetCheck(packageHtmlCheck);", "+", "+        TreeWalker mWalker = new TreeWalker(mConfig);", "+        addFileSetCheck(mWalker);", "+", "+    }"]}]}
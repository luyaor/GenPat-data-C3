{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fa866e090a39803a709677e5495156c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "898446eda3f2b33993ae704e0876c104", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "260d2b935c0b25688a11077ada9405b791857fd8", "commitAfterChange": "ad42ed29799a13b9426a05cc94b4a4aaba709c2c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        switch (getAbstractOption()) {", "+        final ImportOrderOption abstractOption = getAbstractOption();", "+        switch (abstractOption) {", "-                // previous static but current is non-static", "-                break;", "+                throw new IllegalStateException(", "+                        \"Unexpected option for static imports: \" + abstractOption.toString());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b762e4ca4c43b310ee54b4837b2f6e28", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "346387c717048391485fb28f877531aab1095de1", "commitAfterChange": "f020066f8bdfb378df36904af3df8b5bc48858fd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int process(List<File> files) throws CheckstyleException", "signatureAfterChange": "     public int process(List<File> files) throws CheckstyleException", "diff": ["-            if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {", "-                continue;", "-            }", "-            final String fileName = file.getAbsolutePath();", "-            fireFileStarted(fileName);", "-            final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "-                final FileText theText = new FileText(file.getAbsoluteFile(),", "-                        charset);", "-                for (final FileSetCheck fsc : fileSetChecks) {", "-                    fileMessages.addAll(fsc.process(file, theText));", "+                if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {", "+                    continue;", "+                final String fileName = file.getAbsolutePath();", "+                fireFileStarted(fileName);", "+                final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "+                try {", "+                    final FileText theText = new FileText(file.getAbsoluteFile(),", "+                            charset);", "+                    for (final FileSetCheck fsc : fileSetChecks) {", "+                        fileMessages.addAll(fsc.process(file, theText));", "+                    }", "+                }", "+                catch (final IOException ioe) {", "+                    LOG.debug(\"IOException occurred.\", ioe);", "+                    fileMessages.add(new LocalizedMessage(0,", "+                            Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",", "+                            new String[] {ioe.getMessage()}, null, getClass(),", "+                            null));", "+                }", "+                fireErrors(fileName, fileMessages);", "+                fireFileFinished(fileName);", "-            catch (final IOException ioe) {", "-                LOG.debug(\"IOException occurred.\", ioe);", "-                fileMessages.add(new LocalizedMessage(0,", "-                        Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",", "-                        new String[] {ioe.getMessage()}, null, getClass(),", "-                        null));", "+            catch (Exception ex) {", "+                // We need to catch all exception to put a reason failure(file name) in exception", "+                throw new CheckstyleException(\"Exception was thrown while processing \"", "+                        + file.getPath(), ex);", "-            fireErrors(fileName, fileMessages);", "-            fireFileFinished(fileName);"]}]}
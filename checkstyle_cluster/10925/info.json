{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "671aabfdefa451ad7f208c4161060500", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d6af2e1864796344acc4d1bd2398194", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "commitBeforeChange": "e7556f4af60fa1602c1b74289c6c64e1a83e4235", "commitAfterChange": "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["-                    final ClassResolver cr = new ClassResolver(", "-                        Thread.currentThread().getContextClassLoader(),", "-                        mPackageFullIdent.getText(), mImports);", "+                    final ClassResolver cr =", "+                        new ClassResolver(", "+                            getClassLoader(),", "+                            mPackageFullIdent.getText(),", "+                            mImports);", "-                        reqd = !RuntimeException.class.isAssignableFrom(clazz)", "-                            && !Error.class.isAssignableFrom(clazz);", "+                        reqd =", "+                            !RuntimeException.class.isAssignableFrom(clazz)", "+                                && !Error.class.isAssignableFrom(clazz);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a28775a27d29c9ef0190490ef39909dd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "9acdd1b97e561748ae8cc61e11dcc145885ecb6d", "commitAfterChange": "c617457933a978f5fd861d7ea43d05bccf045c16", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethod(MyModifierSet aMods,                       MyCommonAST aReturnType,                       MethodSignature aSig)", "signatureAfterChange": "     void verifyMethod(MyModifierSet aMods,                       MyCommonAST aReturnType,                       MethodSignature aSig)", "diff": ["+        // Calculate line number. Unfortunately aReturnType does not contain a", "+        // valid line number", "+        final int lineNo = (aMods.size() > 0)", "+            ? aMods.getFirstLineNo()", "+            : aSig.getLineNo();", "+", "+        // no need to check constructor names", "+        if (aReturnType != null &&", "+            !mConfig.getMethodRegexp().match(aSig.getName())) {", "+            log(lineNo,", "+                \"method name '\" + aSig.getName() +", "+                \"' must match pattern '\" + mConfig.getMethodPat() + \"'.\");", "+        }", "+", "-", "-", "-        // Calculate line number. Unfortunately aReturnType does not contain a", "-        // valid line number", "-        final int lineNo = (aMods.size() > 0)", "-            ? aMods.getFirstLineNo()", "-            : aSig.getLineNo();"]}]}
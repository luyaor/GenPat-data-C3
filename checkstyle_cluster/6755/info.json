{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b50b5b008ad1343f5be40f8005b59509", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39c5d088d47d3f4a017b827a1bc842c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderInfo.java", "commitBeforeChange": "fc8a5ae78cffc8f6d5951a72fc722c52dedc1d04", "commitAfterChange": "bf16d371dab210594755d04afc4697269ed088c0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     protected void postprocessHeaderLines()", "signatureAfterChange": "      @Override     protected void postprocessHeaderLines()", "diff": ["-        final String[] headerLines = getHeaderLines();", "-        if (headerLines != null) {", "-            mHeaderRegexps = new Pattern[headerLines.length];", "-            for (int i = 0; i < headerLines.length; i++) {", "-                try {", "-                    // TODO: Not sure if cache in Utils is still necessary", "-                    mHeaderRegexps[i] = Utils.getPattern(headerLines[i]);", "-                }", "-                catch (final PatternSyntaxException ex) {", "-                    throw new ConversionException(", "-                            \"line \" + (i + 1) + \" in header specification\"", "-                            + \" is not a regular expression\");", "-                }", "+        final List<String> headerLines = getHeaderLines();", "+        mHeaderRegexps.clear();", "+        for (String line : headerLines) {", "+            try {", "+                // TODO: Not sure if cache in Utils is still necessary", "+                mHeaderRegexps.add(Utils.getPattern(line));", "+            }", "+            catch (final PatternSyntaxException ex) {", "+                throw new ConversionException(\"line \"", "+                        + (mHeaderRegexps.size() + 1)", "+                        + \" in header specification\"", "+                        + \" is not a regular expression\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d68e2842242a781f160c5c3c1ce8fc6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "c4853b445219fd3d31d290c37184e46a8c4161ed", "commitAfterChange": "8d800ef546e11c6d593154f4071e39cdc4f66f34", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setGroups(String[] aGroups)", "signatureAfterChange": "     public void setGroups(String[] aGroups)", "diff": ["-        // set the default wildcard group to be after the last named group.", "-        mWildcardGroupIndex = aGroups.length;", "-", "-        mGroups = new String[aGroups.length];", "+        mGroups = new Pattern[aGroups.length];", "+            Pattern grp;", "-            // if the pkg name is the wildcard, record the", "-            // position for later reference", "+            // if the pkg name is the wildcard, make it match zero chars", "+            // from any name, so it will always be used as last resort.", "-                mWildcardGroupIndex = i;", "+                grp = Pattern.compile(\"\"); // matches any package", "-            else if (!pkg.endsWith(\".\")) {", "-                pkg = pkg + \".\";", "+            else if (pkg.startsWith(\"/\")) {", "+                if (!pkg.endsWith(\"/\")) {", "+                    throw new IllegalArgumentException(\"Invalid group\");", "+                }", "+                pkg = pkg.substring(1, pkg.length() - 1);", "+                grp = Pattern.compile(pkg);", "+            }", "+            else {", "+                if (!pkg.endsWith(\".\")) {", "+                    pkg = pkg + \".\";", "+                }", "+                grp = Pattern.compile(\"^\" + Pattern.quote(pkg));", "-            mGroups[i] = pkg;", "+            mGroups[i] = grp;"]}]}
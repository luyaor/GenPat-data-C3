{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54ad88665f2aebd72410bdc973a7647e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82330712b39ae566b5c7adb8b8b6eec5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "a123763c92761d644fed6010c05ff01cece025ae", "commitAfterChange": "12a1aec08012575b94c262d2b825a439bd69fde3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-            lcurly = aAST.getLastChild().getFirstChild();", "-            rcurly = aAST.getLastChild().getLastChild();", "+            final DetailAST child = aAST.getLastChild();", "+            lcurly = child.getFirstChild();", "+            rcurly = child.getLastChild();", "-            lcurly = aAST.getLastChild();", "+        case TokenTypes.STATIC_INIT:", "+        case TokenTypes.INSTANCE_INIT:", "+            lcurly = aAST.findFirstToken(TokenTypes.SLIST);", "-            lcurly = aAST.getLastChild();", "+        case TokenTypes.LITERAL_FOR:", "+        case TokenTypes.LITERAL_WHILE:", "+        case TokenTypes.LITERAL_DO:", "+            lcurly = aAST.findFirstToken(TokenTypes.SLIST);", "+            //SLIST could be absent if method is abstract, and code like \"while(true);\"", "+            if (lcurly == null) {", "+                return;", "+            }", "+        }", "+", "+        if (getAbstractOption() == RightCurlyOption.SAME && !hasLineBreakBefore(rcurly)) {", "+            log(rcurly, \"line.break.before\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed6547b14059541def4098461542ca07", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "f010eb47869bae692609de487d6140373e02f3a3", "commitAfterChange": "907a19906f790ce8faea7aa74e12608538dca1b6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST aRootAST)", "diff": ["-        mFrames = new FrameStack();", "+        final FrameStack aFrameStack = new FrameStack();", "+        mFrames = Maps.newHashMap();", "+", "+        DetailAST curNode = aRootAST;", "+        while (curNode != null) {", "+            collectDeclarations(aFrameStack, curNode);", "+            DetailAST toVisit = curNode.getFirstChild();", "+            while (curNode != null && toVisit == null) {", "+                endCollectingDeclarations(aFrameStack, curNode);", "+                toVisit = curNode.getNextSibling();", "+                if (toVisit == null) {", "+                    curNode = curNode.getParent();", "+                }", "+            }", "+            curNode = toVisit;", "+        }"]}]}
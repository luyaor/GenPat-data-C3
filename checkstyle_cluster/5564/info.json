{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9df90c9d250c58db670f1e10c60b45cc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5db7de82222eadb7b33afb58400829cf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "27045d71a3d9d415d96a7734724b08d84b891694", "commitAfterChange": "f6cb72258856fdae0b89c66a0ba750712674cdee", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        switch (abstractOption) {", "-            case TOP:", "-                if (isNotStaticAndLastImport) {", "-                    lastGroup = Integer.MIN_VALUE;", "-                    lastImport = \"\";", "-                }", "-                doVisitToken(ident, isStatic, isStaticAndNotLastImport);", "-                break;", "-            case BOTTOM:", "-                if (isStaticAndNotLastImport) {", "-                    lastGroup = Integer.MIN_VALUE;", "-                    lastImport = \"\";", "-                }", "-                doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "-                break;", "+        // using set of IF instead of SWITCH to analyze Enum options to satisfy coverage.", "+        // https://github.com/checkstyle/checkstyle/issues/1387", "+        if (abstractOption == ImportOrderOption.TOP) {", "-            case ABOVE:", "-                // previous non-static but current is static", "-                doVisitToken(ident, isStatic, isStaticAndNotLastImport);", "-                break;", "+            if (isNotStaticAndLastImport) {", "+                lastGroup = Integer.MIN_VALUE;", "+                lastImport = \"\";", "+            }", "+            doVisitToken(ident, isStatic, isStaticAndNotLastImport);", "-            case UNDER:", "-                doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "-                break;", "+        }", "+        else if (abstractOption == ImportOrderOption.BOTTOM) {", "-            case INFLOW:", "-                // previous argument is useless here", "-                doVisitToken(ident, isStatic, true);", "-                break;", "+            if (isStaticAndNotLastImport) {", "+                lastGroup = Integer.MIN_VALUE;", "+                lastImport = \"\";", "+            }", "+            doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "-            default:", "-                throw new IllegalStateException(", "-                        \"Unexpected option for static imports: \" + abstractOption.toString());", "+        }", "+        else if (abstractOption == ImportOrderOption.ABOVE) {", "+            // previous non-static but current is static", "+            doVisitToken(ident, isStatic, isStaticAndNotLastImport);", "+        else if (abstractOption == ImportOrderOption.UNDER) {", "+            doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "+", "+        }", "+        else if (abstractOption == ImportOrderOption.INFLOW) {", "+            // \"previous\" argument is useless here", "+            doVisitToken(ident, isStatic, true);", "+", "+        }", "+        else {", "+            throw new IllegalStateException(", "+                    \"Unexpected option for static imports: \" + abstractOption.toString());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f14a25d65c0c40f163b1fa89ff9a50f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "b9936d973566f62a6989e7909f713abc7ff9cdb0", "commitAfterChange": "eb29e863de490162290425654a7fdcbd41d084df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "signatureAfterChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "diff": ["-        switch (statement.getType()) {", "-            case TokenTypes.LITERAL_IF:", "-                result = isSingleLineIf(statement);", "-                break;", "-            case TokenTypes.LITERAL_FOR:", "-                result = isSingleLineFor(statement);", "-                break;", "-            case TokenTypes.LITERAL_DO:", "-                result = isSingleLineDoWhile(statement);", "-                break;", "-            case TokenTypes.LITERAL_WHILE:", "-                result = isSingleLineWhile(statement);", "-                break;", "-            case TokenTypes.LAMBDA:", "-                result = isSingleLineLambda(statement);", "-                break;", "-            case TokenTypes.LITERAL_CASE:", "-                result = isSingleLineCase(statement);", "-                break;", "-            case TokenTypes.LITERAL_DEFAULT:", "-                result = isSingleLineDefault(statement);", "-                break;", "-            case TokenTypes.LITERAL_ELSE:", "-                result = isSingleLineElse(statement);", "-                break;", "-            default:", "-                final String exceptionMsg = statement.getText();", "-                throw new IllegalArgumentException(\"Unsupported token: \" + exceptionMsg);", "+        final int type = statement.getType();", "+", "+        if (type == TokenTypes.LITERAL_IF) {", "+            result = isSingleLineIf(statement);", "+        else if (type == TokenTypes.LITERAL_FOR) {", "+            result = isSingleLineFor(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_DO) {", "+            result = isSingleLineDoWhile(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_WHILE) {", "+            result = isSingleLineWhile(statement);", "+        }", "+        else if (type == TokenTypes.LAMBDA) {", "+            result = isSingleLineLambda(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_CASE) {", "+            result = isSingleLineCase(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_DEFAULT) {", "+            result = isSingleLineDefault(statement);", "+        }", "+        else {", "+            result = isSingleLineElse(statement);", "+        }", "+"]}]}
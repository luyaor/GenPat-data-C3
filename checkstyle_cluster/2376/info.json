{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "240b3680c30d3076ca7ebf3746a67935", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "441b7b131a0a33debf11a55ed3795e8e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "83092cdaaaf4190bb1160537a09b5abe8f813f6f", "commitAfterChange": "d9ef0ac5eed2084dc0298ec981f6fc04cf628e85", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static Configuration loadConfiguration(         String aConfig,         PropertyResolver aOverridePropsResolver,         boolean aOmitIgnoredModules)         throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(String aConfig,         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)         throws CheckstyleException", "diff": ["-    public static Configuration loadConfiguration(", "-        String aConfig,", "-        PropertyResolver aOverridePropsResolver,", "-        boolean aOmitIgnoredModules)", "+    public static Configuration loadConfiguration(String aConfig,", "+        PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)", "+        InputStream bufferedStream = null;", "-            final ConfigurationLoader loader =", "-                new ConfigurationLoader(aOverridePropsResolver,", "-                                        aOmitIgnoredModules);", "-            final InputStream bufferedStream =", "-                new BufferedInputStream(configStream);", "-            loader.parseInputStream(bufferedStream);", "-            bufferedStream.close();", "-            return loader.getConfiguration();", "+            bufferedStream = new BufferedInputStream(configStream);", "+", "+            return loadConfiguration(bufferedStream, aOverridePropsResolver,", "+                    aOmitIgnoredModules);", "-            throw new CheckstyleException(", "-                \"unable to find \" + aConfig, e);", "-        }", "-        catch (ParserConfigurationException e) {", "-            throw new CheckstyleException(", "-                \"unable to parse \" + aConfig, e);", "-        }", "-        catch (SAXParseException e) {", "-            throw new CheckstyleException(\"unable to parse \"", "-                    + aConfig + \" - \" + e.getMessage() + \":\" + e.getLineNumber()", "-                    + \":\" + e.getColumnNumber(), e);", "-        }", "-        catch (SAXException e) {", "-            throw new CheckstyleException(\"unable to parse \"", "-                    + aConfig + \" - \" + e.getMessage(), e);", "+            throw new CheckstyleException(\"unable to find \" + aConfig, e);", "+        catch (CheckstyleException e) {", "+                //wrap again to add file name info", "+            throw new CheckstyleException(\"unable to read \" + aConfig + \" - \"", "+                    + e.getMessage(), e);", "+        }", "+        finally {", "+            if (bufferedStream != null) {", "+                try {", "+                    bufferedStream.close();", "+                }", "+                catch (IOException e) {", "+                    // cannot throw another exception.", "+                    ;", "+                }", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f862aaa3d8455ed2320c4bedbcee594", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "ecc852d48b9d26398926b255e3cd68572119c106", "commitAfterChange": "751257987b2ef5f301e2deb3b55302196e5015af", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethod(MethodSignature aSig)", "signatureAfterChange": "     void verifyMethod(MethodSignature aSig)", "diff": ["-            log(aSig.getName().getLineNo(),", "-                aSig.getName().getColumnNo(),", "-                \"name.invalidPattern\",", "-                \"method\",", "-                aSig.getName().getText(),", "-                mConfig.getMethodPat());", "+            mMessages.add(aSig.getName().getLineNo(),", "+                          aSig.getName().getColumnNo(),", "+                          \"name.invalidPattern\",", "+                          \"method\",", "+                          aSig.getName().getText(),", "+                          mConfig.getMethodPat());", "-            log(aSig.getFirstLineNo(),", "-                aSig.getFirstColNo(),", "-                \"maxParam\", new Integer(mConfig.getMaxParameters()));", "+            mMessages.add(aSig.getFirstLineNo(),", "+                          aSig.getFirstColNo(),", "+                          \"maxParam\", new Integer(mConfig.getMaxParameters()));", "-            log(aSig.getModSet().getFirstLineNo(),", "-                aSig.getModSet().getFirstColNo(),", "-                \"redundantModifier\", \"public\");", "+            mMessages.add(aSig.getModSet().getFirstLineNo(),", "+                          aSig.getModSet().getFirstColNo(),", "+                          \"redundantModifier\", \"public\");", "-            log(aSig.getModSet().getFirstLineNo(),", "-                aSig.getModSet().getFirstColNo(),", "-                \"redundantModifier\", \"abstract\");", "+            mMessages.add(aSig.getModSet().getFirstLineNo(),", "+                          aSig.getModSet().getFirstColNo(),", "+                          \"redundantModifier\", \"abstract\");", "-            log(aSig.getFirstLineNo(),", "-                aSig.getFirstColNo(),", "-                \"javadoc.missing\", \"method\");", "+            mMessages.add(aSig.getFirstLineNo(),", "+                          aSig.getFirstColNo(),", "+                          \"javadoc.missing\", \"method\");", "-                        log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");", "+                        mMessages.add(jt.getLineNo(),", "+                                      \"javadoc.unusedTagGeneral\");"]}]}
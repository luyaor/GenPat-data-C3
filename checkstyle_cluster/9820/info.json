{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "76b041c881911ec80739bc808263475b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08de70acb45471ec2851618bead2e8ca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/HeaderInfo.java", "commitBeforeChange": "fc8a5ae78cffc8f6d5951a72fc722c52dedc1d04", "commitAfterChange": "bf16d371dab210594755d04afc4697269ed088c0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void loadHeader(final Reader aHeaderReader) throws IOException", "signatureAfterChange": "     private void loadHeader(final Reader aHeaderReader) throws IOException", "diff": ["-        final ArrayList<String> lines = Lists.newArrayList();", "+        mHeaderLines.clear();", "-            lines.add(l);", "+            mHeaderLines.add(l);", "-        mHeaderLines = lines.toArray(new String[lines.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1678cd06235da1f91271ffe29671c52d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public boolean accept(Integer aInt)", "signatureAfterChange": "     public boolean accept(Integer aInt)", "diff": ["-        final Iterator<IntFilter> it = getFilters().iterator();", "-        while (it.hasNext()) {", "-            final IntFilter filter = it.next();", "+        for (IntFilter filter : getFilters()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34f677377308e67220dc2aeafc462f41", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     LexicalFrame findFrame(String aNameToFind)", "signatureAfterChange": "     LexicalFrame findFrame(String aNameToFind)", "diff": ["-        final Iterator<LexicalFrame> it = mFrameList.iterator();", "-        while (it.hasNext()) {", "-            final LexicalFrame thisFrame = it.next();", "+        for (LexicalFrame thisFrame : mFrameList) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56eccfdb210dd3eced1363c9a464b7f3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/j2ee/EntityBeanMethodChecker.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void checkCreateMatch()", "signatureAfterChange": "     protected void checkCreateMatch()", "diff": ["-        final Iterator<DetailAST> it = mEjbCreates.iterator();", "-        while (it.hasNext()) {", "-            final DetailAST createMethod = it.next();", "+        for (DetailAST createMethod : mEjbCreates) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b55a8c653d8b8ea1fa0cdee17319a54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "     @Override     public void beginTree(DetailAST aRootAST)", "diff": ["-        final Iterator<Integer> linesIter = lines.iterator();", "-        while (linesIter.hasNext()) {", "-            final Integer lineNo = linesIter.next();", "-", "+        for (Integer lineNo : lines) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "911b5de3b52e0a5e9d6fc8a4b4d3e470", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "diff": ["-            final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();", "-            while (throwIt.hasNext()) {", "-                final ExceptionInfo ei = throwIt.next();", "+            for (ExceptionInfo ei : aThrows) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eac0de3e03340607943c0ea831643968", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public int[] getAcceptableTokens()", "signatureAfterChange": "     @Override     public int[] getAcceptableTokens()", "diff": ["-        final Iterator<String> it = tokenNames.iterator();", "-        while (it.hasNext()) {", "-            final String name = it.next();", "-            result[i] = TokenTypes.getTokenId(name);", "-            i++;", "+        for (String name : tokenNames) {", "+            result[i++] = TokenTypes.getTokenId(name);"]}]}
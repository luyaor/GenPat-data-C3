{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e21d21c799178ceac334ad870d202d4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12c2809c6336db503a22a5231c43c128", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "113081ffce0d8a2fae01d54f739d524dc1a3f47c", "commitAfterChange": "7514320e04e4d35a4317172876e5f11e69a2c891", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void reportCComment(int aStartLineNo, int aStartColNo,                                int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public void reportCComment(int aStartLineNo, int aStartColNo,                                int aEndLineNo, int aEndColNo)", "diff": ["+        // save the comment", "+        final Integer key = new Integer(aStartLineNo);", "+        if (mCComments.containsKey(key)) {", "+            final List entries = (List) mCComments.get(key);", "+            entries.add(cc);", "+        }", "+        else {", "+            final List entries = new ArrayList();", "+            entries.add(cc);", "+            mCComments.put(key, entries);", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caf30bbef9776a9a6c68afc07fa14deb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "3d8fc87ef60d4e96068658ed0485aafdb2a42691", "commitAfterChange": "e27489c7721909245ea5055eac3b9c7c659081f6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private List getMethodTags(TextBlock aComment)", "signatureAfterChange": "     private List getMethodTags(TextBlock aComment)", "diff": ["-            if (MATCH_JAVADOC_ARG.match(lines[i])) {", "+            Matcher javadocArgMatcher = MATCH_JAVADOC_ARG.matcher(lines[i]);", "+            Matcher javadocNoargMatcher =", "+                MATCH_JAVADOC_NOARG.matcher(lines[i]);", "+            Matcher noargCurlyMatcher =", "+                MATCH_JAVADOC_NOARG_CURLY.matcher(lines[i]);", "+            Matcher argMultilineStart =", "+                MATCH_JAVADOC_ARG_MULTILINE_START.matcher(lines[i]);", "+            Matcher noargMultilineStart =", "+                MATCH_JAVADOC_NOARG_MULTILINE_START.matcher(lines[i]);", "+            if (javadocArgMatcher.find()) {", "-                                        MATCH_JAVADOC_ARG.getParen(1),", "-                                        MATCH_JAVADOC_ARG.getParen(2)));", "+                                        javadocArgMatcher.group(1),", "+                                        javadocArgMatcher.group(2)));", "-            else if (MATCH_JAVADOC_NOARG.match(lines[i])) {", "+            else if (javadocNoargMatcher.find()) {", "-                                        MATCH_JAVADOC_NOARG.getParen(1)));", "+                                        javadocNoargMatcher.group(1)));", "-            else if (MATCH_JAVADOC_NOARG_CURLY.match(lines[i])) {", "+            else if (noargCurlyMatcher.find()) {", "-                                        MATCH_JAVADOC_NOARG_CURLY.getParen(1)));", "+                                        noargCurlyMatcher.group(1)));", "-            else if (MATCH_JAVADOC_ARG_MULTILINE_START.match(lines[i])) {", "-                final String p1 = MATCH_JAVADOC_ARG_MULTILINE_START.getParen(1);", "-                final String p2 = MATCH_JAVADOC_ARG_MULTILINE_START.getParen(2);", "+            else if (argMultilineStart.find()) {", "+                final String p1 = argMultilineStart.group(1);", "+                final String p2 = argMultilineStart.group(2);", "-                    if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {", "+                    Matcher multilineCont =", "+                        MATCH_JAVADOC_MULTILINE_CONT.matcher(lines[remIndex]);", "+                    if (multilineCont.find()) {", "-                        String lFin = MATCH_JAVADOC_MULTILINE_CONT.getParen(1);", "+                        String lFin = multilineCont.group(1);", "-            else if (MATCH_JAVADOC_NOARG_MULTILINE_START.match(lines[i])) {", "-                final String p1 = MATCH_JAVADOC_NOARG_MULTILINE_START", "-                    .getParen(1);", "+            else if (noargMultilineStart.find()) {", "+                final String p1 = noargMultilineStart.group(1);", "-                    if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {", "+                    Matcher multilineCont =", "+                        MATCH_JAVADOC_MULTILINE_CONT.matcher(lines[remIndex]);", "+                    if (multilineCont.find()) {", "-                        String lFin = MATCH_JAVADOC_MULTILINE_CONT.getParen(1);", "+                        String lFin = multilineCont.group(1);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9648e8d881d8e96b6c9bfb4f36ea3444", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "945db2a8ff67aceb3bf2e6fa13bd5373", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava2.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    @Override   public ImmutableRangeMap<K, V> subRangeMap(final Range<K> range)", "signatureAfterChange": "    public FromGuava2<K, V> subRangeMap1(final Range<K> range)", "diff": ["-  @Override", "-  public ImmutableRangeMap<K, V> subRangeMap(final Range<K> range) {", "+", "+  public FromGuava2<K, V> subRangeMap1(final Range<K> range) {", "+    Range<K> ranges = null;", "-      return ImmutableRangeMap.of();", "-    int lowerIndex = SortedLists.binarySearch(", "-        ranges, Range.<K>upperBoundFn(), range.lowerBound,", "-        KeyPresentBehavior.FIRST_AFTER, KeyAbsentBehavior.NEXT_HIGHER);", "-    int upperIndex = SortedLists.binarySearch(ranges, ", "-        Range.<K>lowerBoundFn(), range.upperBound,", "-        KeyPresentBehavior.ANY_PRESENT, KeyAbsentBehavior.NEXT_HIGHER);", "+    int lowerIndex = SortedLists.binarySearch();", "+    int upperIndex = SortedLists.binarySearch();", "-      return ImmutableRangeMap.of();", "+      return null;", "-    ImmutableList<Range<K>> subRanges = new ImmutableList<Range<K>>() {", "-      @Override", "-      public int size() {", "-        return len;", "-      }", "+    FromGuava2<K, V> outer = null;", "+    return outer;", "+  }", "-      @Override", "-      public Range<K> get(int index) {", "-        checkElementIndex(index, len);", "-        if (index == 0 || index == len - 1) {", "-          return ranges.get(index + off).intersection(range);", "-        } else {", "-          return ranges.get(index + off);", "-        }", "-      }", "-      @Override", "-      boolean isPartialView() {", "-        return true;", "-      }", "-    };", "-    final ImmutableRangeMap<K, V> outer = this;", "-    return new ImmutableRangeMap<K, V>(", "-        subRanges, values.subList(lowerIndex, upperIndex)) {", "-          @Override", "-          public ImmutableRangeMap<K, V> subRangeMap(Range<K> subRange) {", "-            if (range.isConnected(subRange)) {", "-              return outer.subRangeMap(subRange.intersection(range));", "-            } else {", "-              return ImmutableRangeMap.of();", "-            }", "-          }", "-    };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3c2e7393d647dbc35a335a7bbaf53a1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "c85ec6f26ade692103ac27383a87c3402b4d66ca", "commitAfterChange": "fd24216f46eef6dfaaedd957d30d6935c5a0606d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     void verifyMethodLCurly(int aMethodLine, MyCommonAST aBrace)", "signatureAfterChange": "     void verifyLCurlyMethod(int aMethodLine, MyCommonAST aBrace)", "diff": ["-    void verifyMethodLCurly(int aMethodLine, MyCommonAST aBrace)", "+    void verifyLCurlyMethod(int aMethodLine, MyCommonAST aBrace)", "-        final String prevLine = mLines[aBrace.getLineNo() - 2];", "-        final String braceLine = mLines[aBrace.getLineNo() - 1];", "-        final LeftCurlyOption option = mConfig.getLCurlyMethod();", "+        checkLCurly(aMethodLine, aBrace, mConfig.getLCurlyMethod());", "+    }", "-        // Check for being told to ignore, or have '{}' which is a special case", "-        if ((option == LeftCurlyOption.IGNORE)", "-            || ((braceLine.length() > (aBrace.getColumnNo() + 1))", "-                && (braceLine.charAt(aBrace.getColumnNo() + 1) == '}')))", "-        {", "-            // ignore", "-        }", "-        else if (option == LeftCurlyOption.NL) {", "-            if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "-            }", "-        }", "-        else if (option == LeftCurlyOption.EOL) {", "-            if (Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)", "-                && ((Utils.lengthMinusTrailingWhitespace(prevLine) + 2)", "-                    <= mConfig.getMaxLineLength()))", "-            {", "-                log(aBrace.getLineNo(), \"'{' should be on the previous line.\");", "-            }", "-        }", "-        else if (option == LeftCurlyOption.NLOW) {", "-            if (aMethodLine == aBrace.getLineNo()) {", "-                // all ok as on the same line", "-            }", "-            else if ((aMethodLine + 1) == aBrace.getLineNo()) {", "-                if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                    log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "-                }", "-                else if ((Utils.lengthMinusTrailingWhitespace(prevLine) + 2)", "-                         <= mConfig.getMaxLineLength()) {", "-                    log(aBrace.getLineNo(),", "-                        \"'{' should be on the previous line.\");", "-                }", "-            }", "-            else if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babb70c73ff5b489d8daa86f8f8c20a5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "dc92fd1b89e33067adc5b2bf51df76b8d488b0bf", "commitAfterChange": "4018efa9fefa66e599369ace1cb189b02ae64fa7", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "     void reportCatchBlock(MyCommonAST[] aBraces, boolean aNoStmt)", "signatureAfterChange": "     void reportCatchBlock(MyCommonAST[] aBraces, boolean aNoStmt)", "diff": ["-        if (aNoStmt && (mConfig.getCatchBlock() == CatchBlockOption.STMT)) {", "-            log(aBraces[0].getLineNo(),", "-                aBraces[0].getColumnNo(),", "-                \"Must have at least one statement.\");", "-        }", "-        else if (mConfig.getCatchBlock() == CatchBlockOption.TEXT) {", "-            if (aBraces[0].getLineNo() == aBraces[1].getLineNo()) {", "-                // Handle braces on the same line", "-                final String txt = mLines[aBraces[0].getLineNo() - 1]", "-                    .substring(aBraces[0].getColumnNo() + 1,", "-                               aBraces[1].getColumnNo());", "-                if (txt.trim().length() == 0) {", "-                    log(aBraces[0].getLineNo(),", "-                        aBraces[0].getColumnNo(),", "-                        \"Empty catch block.\");", "-                }", "-            }", "-            else {", "-                // check only whitespace of first & last lines", "-                if ((mLines[aBraces[0].getLineNo() - 1]", "-                     .substring(aBraces[0].getColumnNo() + 1).trim().length()", "-                     == 0)", "-                    && (mLines[aBraces[1].getLineNo() - 1]", "-                        .substring(0, aBraces[1].getColumnNo()).trim().length()", "-                        == 0))", "-                {", "+        checkBlock(\"catch\", mConfig.getCatchBlock(), aBraces, aNoStmt);", "+    }", "-                    // Need to check if all lines are also only whitespace", "-                    boolean isBlank = true;", "-                    for (int i = aBraces[0].getLineNo();", "-                         i < (aBraces[1].getLineNo() - 1);", "-                         i++)", "-                    {", "-                        if (mLines[i].trim().length() > 0) {", "-                            isBlank = false;", "-                            break;", "-                        }", "-                    }", "-", "-                    if (isBlank) {", "-                        log(aBraces[0].getLineNo(),", "-                            aBraces[0].getColumnNo(),", "-                            \"Empty catch block.\");", "-                    }", "-                }", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9a10a46c9a583e0d1e9244876a2bc43", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "6c11cedd3bc24183534dd10d6442149d267693b5", "commitAfterChange": "40bb6812631517615cfc45efeb5bdcc93b95a8ae", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["+        if (sumTokenCounts) {", "+            logAsTotal(ast);", "+        }", "+        else {", "+            logAsSeparated(ast);", "+        }", "+    }", "-        if (sumTokenCounts) {", "-            int total = 0;", "-            for (int element : limitedTokens) {", "-                total += counts[element - 1];", "-            }", "-            if (total < minimumNumber) {", "-                        null == minimumMessage ? MSG_KEY_SUM_MIN", "-                        String.valueOf(total),", "-                        String.valueOf(minimumNumber), name);", "-            if (total > maximumNumber) {", "-                        null == maximumMessage ? MSG_KEY_SUM_MAX", "-                        String.valueOf(total),", "-                        name);", "-        else {", "-            for (int element : limitedTokens) {", "-                final int tokenCount = counts[element - 1];", "-                if (tokenCount < minimumNumber) {", "-                    final String descendantName = Utils", "-                            .getTokenName(element);", "-                    log(ast.getLineNo(), ast.getColumnNo(),", "-                            null == minimumMessage ? MSG_KEY_MIN", "-                                    : minimumMessage,", "-                            String.valueOf(tokenCount),", "-                            String.valueOf(minimumNumber),", "-                            name,", "-                            descendantName);", "-                }", "-                if (tokenCount > maximumNumber) {", "-                    final String descendantName = Utils", "-                            .getTokenName(element);", "-                    log(ast.getLineNo(), ast.getColumnNo(),", "-                            null == maximumMessage ? MSG_KEY_MAX", "-                                    : maximumMessage,", "-                            String.valueOf(tokenCount),", "-                            String.valueOf(maximumNumber),", "-                            name,", "-                            descendantName);", "-                }", "-            }"]}]}
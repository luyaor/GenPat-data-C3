{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "309b59aec10cab37f4591cf245bdb6e7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0808f0da0b2a5b8ffec36a3028c9e517", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "343e946b076a5344e380c76e5b3ea23438b6fc93", "commitAfterChange": "e3a48d1527341456a798c3f0c1986de6898a8c60", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void checkIndentation()", "signatureAfterChange": "      @Override     public void checkIndentation()", "diff": ["+        final DetailAST exprNode = getMainAst().getParent();", "+        if (exprNode.getParent().getType() != TokenTypes.LCURLY", "+            && exprNode.getParent().getType() != TokenTypes.SLIST)", "+        {", "+            return;", "+        }", "-        // if this method name is on the same line as a containing", "-        // method, don't indent, this allows expressions like:", "-        //    method(\"my str\" + method2(", "-        //        \"my str2\"));", "-        // as well as", "-        //    method(\"my str\" +", "-        //        method2(", "-        //            \"my str2\"));", "-        //", "-", "+        final LineWrappingHandler lineWrap =", "+            new LineWrappingHandler(getIndentCheck(), getMainAst()) {", "+                @Override", "+                public DetailAST findLastNode(DetailAST aFirstNode)", "+                {", "+                    DetailAST lastNode;", "+                    if (getFirstNode().getNextSibling() == null) {", "+                        lastNode = getFirstNode().getLastChild();", "+                    }", "+                    else {", "+                        lastNode = getFirstNode().getNextSibling();", "+                    }", "+                    return lastNode;", "+                }", "+", "+                @Override", "+                public int getCurrentIndentation()", "+                {", "+                    DetailAST curNode = getFirstNode();", "+                    while (curNode.getType() != TokenTypes.IDENT) {", "+                        curNode = curNode.getFirstChild();", "+                    }", "+                    return curNode.getColumnNo() + getIndentLevel();", "+                }", "+            };", "+        lineWrap.checkIndentation();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c266f4e7f16bafc69af842a668a665", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MemberDefHandler.java", "commitBeforeChange": "343e946b076a5344e380c76e5b3ea23438b6fc93", "commitAfterChange": "e3a48d1527341456a798c3f0c1986de6898a8c60", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void checkIndentation()", "signatureAfterChange": "      @Override     public void checkIndentation()", "diff": ["+    @Override", "+    public void checkIndentation()", "+        final DetailAST modifiersNode = getMainAst().findFirstToken(TokenTypes.MODIFIERS);", "+        if (modifiersNode.getChildCount() != 0) {", "+            checkModifiers();", "+        }", "+        else {", "+            checkType();", "+        }", "+        final LineWrappingHandler lineWrap =", "+            new LineWrappingHandler(getIndentCheck(), getMainAst()) {", "+                @Override", "+                public DetailAST findLastNode(DetailAST aFirstNode)", "+                {", "+                    DetailAST lastNode = getFirstNode().getLastChild();", "+                    if (lastNode.getType() != TokenTypes.SEMI) {", "+                        lastNode = getFirstNode().getNextSibling();", "+                    }", "+                    return lastNode;", "+                }", "+            };", "+        if (lineWrap.getLastNode() != null && !isArrayDeclaration(getMainAst())) {", "+            lineWrap.checkIndentation();", "+        }", "+    }", "-    @Override", "-    public void checkIndentation()", "-        checkModifiers();", "-        checkType();", "-        checkIdent();", "-    }"]}]}
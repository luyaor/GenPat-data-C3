{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a4aa1cf45f82aba832f92e77e951f08", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fff5ed86cc5274f1c862f528c76669c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheck.java", "commitBeforeChange": "bb1db4938ccae0f7149461ea372398fb8a53f2a8", "commitAfterChange": "15b8debf99b3b0c600084fccde54d9562bd48b71", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "signatureAfterChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "diff": ["-        // Let's trye to load class.", "-        Class excClass = null;", "-", "-        if (!mAllowUnchecked || !mAllowSubclasses) {", "-            excClass = resolveClass(aExc.getText());", "-            if (excClass == null) {", "-                log(aExc.getLineNo(), aExc.getColumnNo(),", "-                    \"redundant.throws.classInfo\", aExc.getText());", "-            }", "-        }", "+        // Let's try to load class.", "+        ClassInfo newClassInfo = new ClassInfo(aExc);", "-            if (isUnchecked(excClass)) {", "+            if (isUnchecked(newClassInfo.getClazz())) {", "-                if (isSubclass(ci.getClazz(), excClass)) {", "+                if (isSubclass(ci.getClazz(), newClassInfo.getClazz())) {", "-                else if (isSubclass(excClass, ci.getClazz())) {", "+                else if (isSubclass(newClassInfo.getClazz(), ci.getClazz())) {", "-            aKnownExcs.add(new ClassInfo(aExc, excClass));", "+            aKnownExcs.add(newClassInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc6fdbaf13f0551e6c1293aaf8147794", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "f293a2107656cebb829e33cba2384ba56be54512", "commitAfterChange": "b372cfa0a8632735da877de0f703c3b3c9ce5f63", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void processVariableDef(DetailAST ast, DetailAST nextToken)", "signatureAfterChange": "     private void processVariableDef(DetailAST ast, DetailAST nextToken)", "diff": ["-        if (isTypeField(ast) && !hasEmptyLineAfter(ast)) {", "-            if (allowNoEmptyLineBetweenFields", "-                && nextToken.getType() != TokenTypes.VARIABLE_DEF", "-                && nextToken.getType() != TokenTypes.RCURLY) {", "-                log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                     nextToken.getText());", "-            }", "-            else if (!allowNoEmptyLineBetweenFields", "-                     && nextToken.getType() != TokenTypes.RCURLY) {", "-                log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                     nextToken.getText());", "-            }", "+        if (isTypeField(ast) && !hasEmptyLineAfter(ast)", "+                && isViolatingEmptyLineBetweenFieldsPolicy(nextToken)) {", "+            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                    nextToken.getText());"]}]}
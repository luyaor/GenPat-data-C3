{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b466e1f59590e252c57378dee62b1ab0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb1abc4130b207d66c2c98035349ec28", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "b5f92edbe545596878aa10bd50742b5f2c43c08a", "commitAfterChange": "8da777a68ad936f1a4e07d59cee17ecab2fc293e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private static DetailAST createCommentAstFromToken(Token token)", "signatureAfterChange": "     private static DetailAST createCommentAstFromToken(Token token)", "diff": ["-        switch (token.getType()) {", "-            case TokenTypes.SINGLE_LINE_COMMENT:", "-                return createSlCommentNode(token);", "-            case TokenTypes.BLOCK_COMMENT_BEGIN:", "-                return createBlockCommentNode(token);", "-            default:", "-                throw new IllegalArgumentException(\"Unknown comment type\");", "+        if (token.getType() == TokenTypes.SINGLE_LINE_COMMENT) {", "+            return createSlCommentNode(token);", "+        }", "+        else {", "+            return createBlockCommentNode(token);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb2e400ec9c13f9dcc2bc26b1f9db75d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_THROWS:", "-                visitLiteralThrows(ast);", "-                break;", "-            default:", "-                throw new IllegalStateException(ast.toString());", "+        if (ast.getType() == TokenTypes.LITERAL_THROWS) {", "+            visitLiteralThrows(ast);", "+        }", "+        else {", "+            throw new IllegalStateException(ast.toString());"]}]}
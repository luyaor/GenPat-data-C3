{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0840831ca35b7d9cc100c3405c592bf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38ed44462f8fbed8a9d0f1f57007a64e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {", "-            mPkgName = FullIdent.createFullIdent(", "-                    aAST.getLastChild().getPreviousSibling()).getText();", "+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {", "+            pkgName = FullIdent.createFullIdent(", "+                    ast.getLastChild().getPreviousSibling()).getText();", "-        else if (aAST.getType() == TokenTypes.IMPORT) {", "-            final FullIdent imp = FullIdent.createFullIdentBelow(aAST);", "+        else if (ast.getType() == TokenTypes.IMPORT) {", "+            final FullIdent imp = FullIdent.createFullIdentBelow(ast);", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",", "+                log(ast.getLineNo(), ast.getColumnNo(), \"import.lang\",", "-            else if (fromPackage(imp.getText(), mPkgName)) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",", "+            else if (fromPackage(imp.getText(), pkgName)) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"import.same\",", "-            for (FullIdent full : mImports) {", "+            for (FullIdent full : imports) {", "-                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+                    log(ast.getLineNo(), ast.getColumnNo(),", "-            mImports.add(imp);", "+            imports.add(imp);", "-                    aAST.getLastChild().getPreviousSibling());", "-            for (FullIdent full : mStaticImports) {", "+                    ast.getLastChild().getPreviousSibling());", "+            for (FullIdent full : staticImports) {", "-                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+                    log(ast.getLineNo(), ast.getColumnNo(),", "-            mStaticImports.add(imp);", "+            staticImports.add(imp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a228f3f7e2451477d9751a7fc245befa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int currentType = aAST.getType();", "-        final int parentType = aAST.getParent().getType();", "+        final int currentType = ast.getType();", "+        final int parentType = ast.getParent().getType();", "-                && this.mIgnoreEnhancedForColon)", "+                && this.ignoreEnhancedForColon)", "-        if (isEmptyMethodBlock(aAST, parentType)", "-                || isEmptyCtorBlock(aAST, parentType)", "-                || isEmptyLoop(aAST, parentType))", "+        if (isEmptyMethodBlock(ast, parentType)", "+                || isEmptyCtorBlock(ast, parentType)", "+                || isEmptyLoop(ast, parentType))", "-        if (mAllowEmptyTypes && (isEmptyType(aAST, parentType))) {", "+        if (allowEmptyTypes && (isEmptyType(ast, parentType))) {", "-        final String line = getLine(aAST.getLineNo() - 1);", "-        final int before = aAST.getColumnNo() - 1;", "-        final int after = aAST.getColumnNo() + aAST.getText().length();", "+        final String line = getLine(ast.getLineNo() - 1);", "+        final int before = ast.getColumnNo() - 1;", "+        final int after = ast.getColumnNo() + ast.getText().length();", "-            log(aAST.getLineNo(), aAST.getColumnNo(),", "-                    \"ws.notPreceded\", aAST.getText());", "+            log(ast.getLineNo(), ast.getColumnNo(),", "+                    \"ws.notPreceded\", ast.getText());", "-                && (aAST.getFirstChild().getType() == TokenTypes.SEMI))", "+                && (ast.getFirstChild().getType() == TokenTypes.SEMI))", "-            log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),", "-                    \"ws.notFollowed\", aAST.getText());", "+            log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),", "+                    \"ws.notFollowed\", ast.getText());"]}]}
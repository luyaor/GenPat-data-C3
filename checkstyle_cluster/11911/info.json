{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "112f3bf51766c6a9a94ac98433a0a448", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4a7b1fab222bd28f99366ba9dc17e08", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java", "commitBeforeChange": "8f12d2b92568c8fca42dfbd26f3d1f0b17100a7b", "commitAfterChange": "050d1e55a819d639fe9116ec3ebd99902530c3f9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testNoWrongSetterImplementation() throws CheckstyleException", "signatureAfterChange": "      @Test     public void testConfigure_NoSuchAttribute2()", "diff": ["-    public void testNoWrongSetterImplementation() throws CheckstyleException {", "+    public void testConfigure_NoSuchAttribute2() {", "-        conf.addAttribute(\"wrong\", \"123\");", "-        testBean.configure(conf);", "+        final DefaultConfiguration conf = new DefaultConfiguration(\"testConf\");", "+        conf.addAttribute(\"privateField\", \"doesn't matter\");", "+        try {", "+            testBean.configure(conf);", "+        }", "+        catch (CheckstyleException ex) {", "+            assertNull(ex.getCause());", "+            assertTrue(ex.getMessage().startsWith(\"Property '\" + \"privateField\" + \"' in module \"));", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c86a757d371242ffecb18ceae544725a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java", "commitBeforeChange": "8f12d2b92568c8fca42dfbd26f3d1f0b17100a7b", "commitAfterChange": "050d1e55a819d639fe9116ec3ebd99902530c3f9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testContextualize1() throws CheckstyleException", "signatureAfterChange": "      @Test     public void testContextualize_ConversionException()", "diff": ["-    public void testContextualize1() throws CheckstyleException {", "-        context.add(\"val\", 123f);", "-        testBean.contextualize(context);", "+", "+    @Test", "+    public void testContextualize_ConversionException() {", "+        final TestBean testBean = new TestBean();", "+        DefaultContext context = new DefaultContext();", "+        context.add(\"intVal\", \"some string\");", "+        try {", "+            testBean.contextualize(context);", "+            fail();", "+        }", "+        catch (CheckstyleException ex) {", "+            assertTrue(ex.getCause() instanceof ConversionException);", "+            assertTrue(ex.getMessage().startsWith(\"illegal value \"));", "+        }", "+    }"]}]}
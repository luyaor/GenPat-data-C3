{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b279a163bf21efade72ef89c78a5d8f6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e827c2b2755986a0f981de18bb8cb33", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void checkComment(DetailAST aAST, TextBlock aComment)", "signatureAfterChange": "     private void checkComment(DetailAST aAST, TextBlock aComment)", "diff": ["-        // Check for inheritDoc", "-        boolean hasInheritDocTag = false;", "-        while (it.hasNext() && !hasInheritDocTag) {", "-            hasInheritDocTag |=", "-                ((JavadocTag) it.next()).isInheritDocTag();", "-        }", "+        if (aAST.getType() != TokenTypes.ANNOTATION_FIELD_DEF) {", "+            // Check for inheritDoc", "+            boolean hasInheritDocTag = false;", "+            while (it.hasNext() && !hasInheritDocTag) {", "+                hasInheritDocTag |=", "+                    ((JavadocTag) it.next()).isInheritDocTag();", "+            }", "-        checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);", "-        checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);", "-        if (isFunction(aAST)) {", "-            checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);", "+            checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);", "+            checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);", "+            if (isFunction(aAST)) {", "+                checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a7647ec0d44617cc0bfd7e0c0c3bbc3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "commitBeforeChange": "8b42624fe986d5d5837fe24ec704fc07b7838aa8", "commitAfterChange": "4039611539fec37edd9abeb85f68563ec6702cf1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+        // method is ok if containing class is not visible in API and", "+        // cannot be extended by 3rd parties (bug #884035)", "+        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED))", "+        {", "+            return;", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5502fb333ffd17793ac9ad3fcdc2f64c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java", "commitBeforeChange": "acc526251af53865b8af68574d6235f9426cab4b", "commitAfterChange": "68c1541bb3d6a6128bf6f895bc82f8925d26c00d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                log(firstNode, \"multiple.variable.declarations.comma\");", "+                // Check if the multiple variable declarations are in a", "+                // for loop initializer. If they are, then no warning", "+                // should be displayed. Declaring multiple variables in", "+                // a for loop initializer is a good way to minimize", "+                // variable scope. Refer Feature Request Id - 2895985", "+                // for more details", "+                if (aAST.getParent().getType() != TokenTypes.FOR_INIT) {", "+                    log(firstNode, \"multiple.variable.declarations.comma\");", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1e862713901ed73b8befa385a0e10f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "a75e6d670fe78327d9d34324d08b819a791f32df", "commitAfterChange": "839cd1b10edb01feb771832a69cf351a6c1c91ef", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void processLiteralNew(DetailAST aAST)", "signatureAfterChange": "     private void processLiteralNew(DetailAST aAST)", "diff": ["+        if (aAST.getParent().getType() == TokenTypes.METHOD_REF) {", "+            return;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a9d81870892d298a50bc9c3f70d4dbb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "c83b8eeeacc1d425089c1b315bd2ec9d7fb3fff0", "commitAfterChange": "9bcd88cf20db457966d0a83d2728a7c51a7d8623", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            if (aAST.getParent().getType() != TokenTypes.OBJBLOCK) {", "+            if (aAST.getParent().getType() != TokenTypes.OBJBLOCK", "+                && aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE)", "+            {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "962e7893375033923eb600278216a62f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/NewHandler.java", "commitBeforeChange": "343e946b076a5344e380c76e5b3ea23438b6fc93", "commitAfterChange": "e3a48d1527341456a798c3f0c1986de6898a8c60", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void checkIndentation()", "signatureAfterChange": "      @Override     public void checkIndentation()", "diff": ["+        if (getMainAst().getType() != TokenTypes.OBJBLOCK) {", "+            return;", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1b626e76aa1aa1e000fdd0f360afada", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/DefaultComesLastCheck.java", "commitBeforeChange": "836bb79348590f1a473f66553ea2ce3c9dec2786", "commitAfterChange": "fab025f0d1561155fc05e1b1d4156e5b219517fc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        final DetailAST switchAST = defaultGroupAST.getParent();", "-        final DetailAST lastGroupAST =", "-            switchAST.getLastChild().getPreviousSibling();", "-", "-        if (defaultGroupAST.getLineNo() != lastGroupAST.getLineNo()", "-            || defaultGroupAST.getColumnNo() != lastGroupAST.getColumnNo())", "+        //default keywords used in annotations too - not what we're", "+        //interested in", "+        if (defaultGroupAST.getType() != TokenTypes.ANNOTATION_FIELD_DEF)", "-            log(aAST, \"default.comes.last\");", "+            final DetailAST switchAST = defaultGroupAST.getParent();", "+            final DetailAST lastGroupAST =", "+                switchAST.getLastChild().getPreviousSibling();", "+", "+            if (defaultGroupAST.getLineNo() != lastGroupAST.getLineNo()", "+                || defaultGroupAST.getColumnNo() != lastGroupAST.getColumnNo())", "+            {", "+                log(aAST, \"default.comes.last\");", "+            }"]}]}
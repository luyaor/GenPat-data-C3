{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7002210666c3b5f371a4fd27f4a4c859", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5e877e2a3187e4327ce1049e401ab3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/UnusedParameterCheck.java", "commitBeforeChange": "3d734ac4162e457e4d3679487a6726e94c17db5b", "commitAfterChange": "c91964b8d95ec0d220472c0efcfb3c1a0a7f6cc0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean mustCheckReferenceCount(DetailAST aAST)", "signatureAfterChange": "     public boolean mustCheckReferenceCount(DetailAST aAST)", "diff": ["-                    if (grandparent.getType() == TokenTypes.METHOD_DEF) {", "-                        final DetailAST modifiersAST =", "-                            grandparent.findFirstToken(TokenTypes.MODIFIERS);", "-                        if ((modifiersAST != null)", "-                            && !modifiersAST.branchContains(TokenTypes.ABSTRACT)", "-                            && !ScopeUtils.inInterfaceBlock(aAST))", "-                        {", "-                            result = true;", "-                        }", "-                    }", "-                    else if (grandparent.getType() == TokenTypes.CTOR_DEF) {", "-                        result = true;", "-                    }", "+                    result = hasBody(grandparent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef3487c3f4c2c47ece45577193cfd115", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "57f395fa2b2dcea7dd369ab3dd52d3d42f0e0893", "commitAfterChange": "6d9d894a62caf7e7419fcb07e7d972499e4306d7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        // do not check local variables and", "-        // fields declared in interface/annotations", "-        if (ScopeUtils.isLocalVariableDef(ast)", "-            || ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {", "+        if (isSkipCase(ast)) {", "-        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        if (assign == null) {", "-            // no assign - no check", "-            return;", "-        }", "-", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiers != null", "-            && modifiers.branchContains(TokenTypes.FINAL)) {", "-            // do not check final variables", "-            return;", "-        }", "-", "-        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "+        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "+        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "-            && (isZero(exprStart)", "-                || exprStart.getType() == TokenTypes.CHAR_LITERAL", "-                && \"'\\\\0'\".equals(exprStart.getText()))) {", "+            && isZeroChar(exprStart)) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc248c3fe4d1bdd38c575bf616e7f374", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb54b0d8ea9355188e6c497b86ba436", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "28a4f2fe029422414814eeb6858f0b9c0cef7039", "commitAfterChange": "40f4c37a21b1c8444f39f12c5f92e79af10be34f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private int findDuplicateFromLine(int aI, int aJ, int aILine)", "signatureAfterChange": "     private int findDuplicateFromLine(         final int aI, final int aJ, final int aILine)", "diff": ["-    private int findDuplicateFromLine(int aI, int aJ, int aILine)", "+    private int findDuplicateFromLine(", "+        final int aI, final int aJ, final int aILine)", "-        final int iFileLength = mLineChecksums[aI].length;", "-        final int jFileLength = mLineChecksums[aJ].length;", "+        final long checkSum = mLineBlockChecksums[aI][aILine];", "-        for (int jLine = 0; jLine < jFileLength - mMin; jLine++) {", "+        final int iBlockCount = mLineBlockChecksums[aI].length;", "+        final int jBlockCount = mLineBlockChecksums[aJ].length;", "-            if ((aI == aJ) && (aILine == jLine)) {", "+        for (int jBlock = 0; jBlock < jBlockCount; jBlock++) {", "+", "+            if (aI == aJ && aILine >= jBlock) {", "-            int equivalent = 0;", "-            while ((aILine + equivalent < iFileLength)", "-                    && (jLine + equivalent < jFileLength)", "-                    && (mLineChecksums[aI][aILine + equivalent] != IGNORE)", "-                    && (mLineChecksums[aI][aILine + equivalent]", "-                       == mLineChecksums[aJ][jLine + equivalent]))", "-            {", "-                equivalent += 1;", "+            if (mLineBlockChecksums[aJ][jBlock] != checkSum) {", "+                continue;", "-            if (((aI != aJ) || (aILine < jLine)) && (equivalent >= mMin)) {", "-                reportDuplicate(equivalent, aILine, mFiles[aJ], jLine);", "-                aILine += equivalent; // skip to end of equivalent section", "+            int duplicateLines = verifiyDuplicateLines(aI, aJ, aILine, jBlock);", "+            if (duplicateLines >= mMin) {", "+                reportDuplicate(duplicateLines, aILine, mFiles[aJ], jBlock);", "+", "+                // skip to end of equivalent section", "+                return aILine + duplicateLines;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e1190dfd5f81ecc831111fff5a70c99", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "28a4f2fe029422414814eeb6858f0b9c0cef7039", "commitAfterChange": "40f4c37a21b1c8444f39f12c5f92e79af10be34f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void findDuplicatesInFiles(int aI, int aJ)", "signatureAfterChange": "     private void findDuplicatesInFiles(int aI, int aJ)", "diff": ["-        final int iFileLength = mLineChecksums[aI].length;", "+        final int iBlockCount = mLineBlockChecksums[aI].length;", "-        // build up some supporting data structures", "-        final boolean[] iLineOccurInJ = new boolean[iFileLength];", "-        for (int iLine = 0; iLine < iFileLength; iLine++) {", "-            iLineOccurInJ[iLine] = (Arrays.binarySearch(", "-                mSortedRelevantChecksums[aJ], mLineChecksums[aI][iLine]) >= 0);", "-        }", "+        // go through all the blocks in iFile and", "+        // check if the following mMin lines occur in jFile", "+        for (int blockIdx = 0; blockIdx < iBlockCount; blockIdx++) {", "-        // go through all the lines in iFile and check if the following", "-        // mMin lines occur in jFile", "-        for (int iLine = 0; iLine < iFileLength - mMin; iLine++) {", "-", "-            // fast exit if one of the lines does not occur in jFile at all", "-            boolean fastExit = false;", "-            final int kLimit = iFileLength - iLine;", "-            for (int k = 0; k < Math.min(mMin, kLimit); k++) {", "-                if (!iLineOccurInJ[iLine + k]) {", "-                    fastExit = true;", "-                    break;", "-                }", "-            }", "-", "-            if (!fastExit) {", "-                // all lines do occur -> brute force searching", "-                mCacheMisses += 1;", "-                iLine = findDuplicateFromLine(aI, aJ, iLine);", "-            }", "-            else {", "-                mCacheHits += 1;", "+            // detailed analysis only if the block does occur in jFile at all", "+            if (Arrays.binarySearch(", "+                    mSortedRelevantChecksums[aJ],", "+                    mLineBlockChecksums[aI][blockIdx]) >= 0)", "+            {", "+                blockIdx = findDuplicateFromLine(aI, aJ, blockIdx);"]}]}
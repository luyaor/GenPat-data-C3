{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e5948335be43bf7e91039deea315c35", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "103bb0eb7794c584378bb8157c0b8f15", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "9aa8268e473071cbe26aa9d3a8631f1902e3fef0", "commitAfterChange": "1fdf65bf0191425f8de6e9838973e53adbd81fc2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     void verifyRParen(int aLineNo, int aColNo)", "signatureAfterChange": "     void verifyRParen(int aLineNo, int aColNo)", "diff": ["-            if (Character.isWhitespace(line.charAt(before))", "+            if ((PadOption.NOSPACE == mConfig.getParenPadOption())", "+                && Character.isWhitespace(line.charAt(before))", "+            else if ((PadOption.SPACE == mConfig.getParenPadOption())", "+                     && !Character.isWhitespace(line.charAt(before))", "+                     && (line.charAt(before) != '('))", "+            {", "+                mMessages.add(aLineNo, before, \"ws.notPreceeded\", \")\");", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4d2310f6ed89e1b1bce6edb0a772ba3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "92ea4cfb5182dbe4ba625ab10e8a95a683607f19", "commitAfterChange": "3fecb73fb3ea4da6bef4e5e9f3a5d555568f0a34", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "signatureAfterChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "diff": ["-        // Check if rest of line is whitespace, and not just the operator by", "-        // itself. This last bit is to handle the operator on a line by itself", "-        if ((mConfig.getWrapOpOption() != WrapOpOption.IGNORE)", "-            && !aText.equals(mLines[aLineNo - 1].trim())", "-            && (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "-                .trim().length() == 0))", "-        {", "-            mMessages.add(aLineNo, aColNo - 1, \"line.new\", aText);", "+        final WrapOpOption wOp = mConfig.getWrapOpOption();", "+", "+        if (wOp != WrapOpOption.IGNORE) {", "+", "+            // Check if rest of line is whitespace, and not just the operator", "+            // by itself. This last bit is to handle the operator on a line by", "+            // itself.", "+            if (wOp == WrapOpOption.NL", "+                && !aText.equals(mLines[aLineNo - 1].trim())", "+                && (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "+                    .trim().length() == 0))", "+            {", "+                mMessages.add(aLineNo, aColNo - 1, \"line.new\", aText);", "+            }", "+            else if (wOp == WrapOpOption.EOL", "+                     && Utils.whitespaceBefore(aColNo - 1, mLines[aLineNo - 1]))", "+            {", "+                mMessages.add(aLineNo, aColNo - 1, \"line.previous\", aText);", "+            }"]}]}
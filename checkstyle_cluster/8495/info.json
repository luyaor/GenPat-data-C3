{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fd11a54c77fb736ec65bd69b8d9b615", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5975e7430d14b52cf43d4f85af9b98a4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "e21177aefee3694a53edd75b41c6c1760bf1301a", "commitAfterChange": "3bee3800f4c10f34f2bd0736cc09830a7f9eb6ab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public JTreeTable(TreeTableModel treeTableModel)", "signatureAfterChange": "      public JTreeTable(TreeTableModel treeTableModel)", "diff": ["+", "+        Action expand = new AbstractAction() {", "+                public void actionPerformed(ActionEvent e) {", "+                    TreePath selected = tree.getSelectionPath();", "+                    if (tree.isExpanded(selected)) {", "+                        tree.collapsePath(selected);", "+                    }", "+                    else {", "+                        tree.expandPath(selected);", "+                    }", "+                    tree.setSelectionPath(selected);", "+                }", "+            };", "+        KeyStroke stroke = KeyStroke.getKeyStroke(\"ENTER\");", "+        String command = \"expand/collapse\";", "+        getInputMap().put(stroke, command);", "+        getActionMap().put(command, expand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f21e78638134f159c06f1f0e2cf6c8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "ddd153f70798bcf1e33629e98407db8f9dbe0dcc", "commitAfterChange": "adce874628730a881c533bb04db2688d03a60fc6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "         public void endElement(String aNamespaceURI,                                String aLocalName,                                String aQName)", "signatureAfterChange": "         public void endElement(String aNamespaceURI,                                String aLocalName,                                String aQName)             throws SAXException", "diff": ["+            throws SAXException", "-                mConfigStack.pop();", "+", "+                Configuration recentModule = (Configuration) mConfigStack.pop();", "+", "+                // remove modules with severity ignore if these modules should", "+                // be omitted", "+                SeverityLevel level = null;", "+                try {", "+                    final String severity = recentModule.getAttribute(SEVERITY);", "+                    level = SeverityLevel.getInstance(severity);", "+                }", "+                catch (CheckstyleException e) {", "+                    //severity not set -> ignore", "+                    ;", "+                }", "+", "+                // omit this module if these should be omitted and the module", "+                // has the severity 'ignore'", "+                final boolean omitModule = mOmitIgnoredModules", "+                    && SeverityLevel.IGNORE.equals(level);", "+", "+                if (omitModule && !mConfigStack.isEmpty()) {", "+                    final DefaultConfiguration parentModule =", "+                        (DefaultConfiguration) mConfigStack.peek();", "+                    parentModule.removeChild(recentModule);", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46c17c106b1bc82593d315449326b288", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a5944bc87d3c5915cea653509d66452", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java", "commitBeforeChange": "7b8a3aa5bba1323a7bbb85b6dbd86835215a48fc", "commitAfterChange": "603c5bb53ea12900f6a1c8af0c4a765af36786e3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST rootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-                if (comment.getText().length == 1) {", "-                    final String lineAfter =", "-                        line.substring(comment.getEndColNo() + 1).trim();", "-                    if (!lineAfter.isEmpty()) {", "-                        // do not check comment which doesn't end line", "-                        continue;", "-                    }", "+", "+                // do not check comment which doesn't end line", "+                if (comment.getText().length == 1", "+                        && !line.substring(comment.getEndColNo() + 1).trim().isEmpty()) {", "+                    continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d5906bfc34d258b4f3701e447fded7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java", "commitBeforeChange": "756e47a05af9db14879e349f7bde1dfa64b83af8", "commitAfterChange": "a6471e8a2608cbe29b26da7c442aff2ebe4de236", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAst)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAst)", "diff": ["-            if (method.getText().equals(classIdent.getText())) {", "+            // Following logic is to handle when a classIdent can not be", "+            // found. This is when you have a Literal_New keyword followed", "+            // a DOT, which is when you have:", "+            // new Outclass.InnerInterface(x) { ... }", "+            // Such a rare case, will not have the logic to handle parsing", "+            // down the tree looking for the first ident.", "+            if ((null != classIdent)", "+                && method.getText().equals(classIdent.getText()))", "+            {"]}]}
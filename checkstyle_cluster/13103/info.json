{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0babf8a68d819ec53fcd1c8d8e8cbdfe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3c2e7393d647dbc35a335a7bbaf53a1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "c85ec6f26ade692103ac27383a87c3402b4d66ca", "commitAfterChange": "fd24216f46eef6dfaaedd957d30d6935c5a0606d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     void verifyMethodLCurly(int aMethodLine, MyCommonAST aBrace)", "signatureAfterChange": "     void verifyLCurlyMethod(int aMethodLine, MyCommonAST aBrace)", "diff": ["-    void verifyMethodLCurly(int aMethodLine, MyCommonAST aBrace)", "+    void verifyLCurlyMethod(int aMethodLine, MyCommonAST aBrace)", "-        final String prevLine = mLines[aBrace.getLineNo() - 2];", "-        final String braceLine = mLines[aBrace.getLineNo() - 1];", "-        final LeftCurlyOption option = mConfig.getLCurlyMethod();", "+        checkLCurly(aMethodLine, aBrace, mConfig.getLCurlyMethod());", "+    }", "-        // Check for being told to ignore, or have '{}' which is a special case", "-        if ((option == LeftCurlyOption.IGNORE)", "-            || ((braceLine.length() > (aBrace.getColumnNo() + 1))", "-                && (braceLine.charAt(aBrace.getColumnNo() + 1) == '}')))", "-        {", "-            // ignore", "-        }", "-        else if (option == LeftCurlyOption.NL) {", "-            if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "-            }", "-        }", "-        else if (option == LeftCurlyOption.EOL) {", "-            if (Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)", "-                && ((Utils.lengthMinusTrailingWhitespace(prevLine) + 2)", "-                    <= mConfig.getMaxLineLength()))", "-            {", "-                log(aBrace.getLineNo(), \"'{' should be on the previous line.\");", "-            }", "-        }", "-        else if (option == LeftCurlyOption.NLOW) {", "-            if (aMethodLine == aBrace.getLineNo()) {", "-                // all ok as on the same line", "-            }", "-            else if ((aMethodLine + 1) == aBrace.getLineNo()) {", "-                if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                    log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "-                }", "-                else if ((Utils.lengthMinusTrailingWhitespace(prevLine) + 2)", "-                         <= mConfig.getMaxLineLength()) {", "-                    log(aBrace.getLineNo(),", "-                        \"'{' should be on the previous line.\");", "-                }", "-            }", "-            else if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcfcd034233e2b347efa52fe3fab0d64", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TypeLeftCurlyCheck.java", "commitBeforeChange": "57d8e4b099c3ff185e85b9633cb9a911bf37d8cc", "commitAfterChange": "2213adc2bc733b0878c662c314b183b4f7dff1e7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        final String braceLine = getLines()[brace.getLineNo() - 1];", "-", "-        // calculate the previous line length without trailing whitespace. Need", "-        // to handle the case where there is no previous line, cause the line", "-        // being check is the first line in the file.", "-        final int prevLineLen = (brace.getLineNo() == 1)", "-            ? mMaxLineLength", "-            : Utils.lengthMinusTrailingWhitespace(", "-                getLines()[brace.getLineNo() - 2]);", "-", "-        // Check for being told to ignore, or have '{}' which is a special case", "-        if ((mOption == LeftCurlyOption.IGNORE)", "-            || ((braceLine.length() > (brace.getColumnNo() + 1))", "-                && (braceLine.charAt(brace.getColumnNo() + 1) == '}')))", "-        {", "-            // ignore", "-        }", "-        else if (mOption == LeftCurlyOption.NL) {", "-            if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                log(brace.getLineNo(), brace.getColumnNo(),", "-                    \"line.new\", \"{\");", "-            }", "-        }", "-        else if (mOption == LeftCurlyOption.EOL) {", "-            if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)", "-                && ((prevLineLen + 2) <= mMaxLineLength))", "-            {", "-                log(brace.getLineNo(), brace.getColumnNo(),", "-                    \"line.previous\", \"{\");", "-            }", "-        }", "-        else if (mOption == LeftCurlyOption.NLOW) {", "-            if (startToken.getLineNo() == brace.getLineNo()) {", "-                // all ok as on the same line", "-            }", "-            else if ((startToken.getLineNo() + 1) == brace.getLineNo()) {", "-                if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                    log(brace.getLineNo(), brace.getColumnNo(),", "-                        \"line.new\", \"{\");", "-                }", "-                else if ((prevLineLen + 2) <= mMaxLineLength) {", "-                    log(brace.getLineNo(), brace.getColumnNo(),", "-                        \"line.previous\", \"{\");", "-                }", "-            }", "-            else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                log(brace.getLineNo(), brace.getColumnNo(),", "-                    \"line.new\", \"{\");", "-            }", "-        }", "-    }", "+        verifyBrace(brace, startToken);"]}]}
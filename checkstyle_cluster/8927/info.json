{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd2480306094807b14c7c7496b8559f9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50557487753c39262cf699214b6670a1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "440cf6836f278602a790d764f257777be80d8b9e", "commitAfterChange": "686afc521a11088c57632352eb6fd60a682b03d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void testCheck()         throws Exception", "signatureAfterChange": "      public void testCheckstyleChecks() throws Exception", "diff": ["-    ", "-    public void testCheck()", "-        throws Exception", "-//        Configuration config =", "-//            loadConfiguration(\"avoidstarimport_configuration.xml\");", "-//                    ", "-//        GlobalProperties globalProps =", "-//            new GlobalProperties(new Properties(), System.out);", "-//        assertEquals(\"properties\", globalProps.getProperties(),", "-//            config.getProperties());", "-//                ", "-//        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "-//        assertEquals(\"checkConfigs.length\", 1, checkConfigs.length);", "-//        ", "-//        assertTrue(\"checkConfigs[0]\",", "-//            (checkConfigs[0].createInstance(this.getClass().getClassLoader()))", "-//                instanceof AvoidStarImport);", "+", "+    public void testCheckstyleChecks() throws Exception", "+    {", "+        final Properties props = new Properties();", "+        props.put(\"checkstyle.basedir\", \"basedir\");", "+", "+        final DefaultConfiguration config =", "+            (DefaultConfiguration) loadConfiguration(", "+                \"checkstyle_checks.xml\", props);", "+", "+        //verify the root, and property substitution", "+        final Properties atts = new Properties();", "+        atts.put(\"tabWidth\", \"4\");", "+        atts.put(\"basedir\", \"basedir\");", "+        verifyConfigNode(config, \"configuration\", 3, atts);", "+", "+        //verify children", "+        final Configuration[] children = config.getChildren();", "+        atts.clear();", "+        verifyConfigNode(", "+            (DefaultConfiguration) children[1], \"PackageHtmlCheck\", 0, atts);", "+        verifyConfigNode(", "+            (DefaultConfiguration) children[2], \"TranslationCheck\", 0, atts);", "+        atts.put(\"testName\", \"testValue\");", "+        verifyConfigNode(", "+            (DefaultConfiguration) children[0], \"TreeWalker\", 8, atts);", "+", "+        //verify TreeWalker's first, last, NoWhitespaceAfterCheck", "+        final Configuration[] grandchildren = children[0].getChildren();", "+        atts.clear();", "+        verifyConfigNode(", "+            (DefaultConfiguration) grandchildren[0],", "+            \"AvoidStarImport\", 0, atts);", "+        atts.put(\"format\", \"System.out.println\");", "+        verifyConfigNode(", "+            (DefaultConfiguration) grandchildren[grandchildren.length - 1],", "+            \"GenericIllegalRegexpCheck\", 0, atts);", "+        atts.clear();", "+        atts.put(\"tokens\", \"DOT\");", "+        atts.put(\"allowLineBreaks\", \"true\");", "+        verifyConfigNode(", "+            (DefaultConfiguration) grandchildren[6],", "+            \"NoWhitespaceAfterCheck\", 0, atts);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7750383b1215586625f48f659d4be4aa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "440cf6836f278602a790d764f257777be80d8b9e", "commitAfterChange": "686afc521a11088c57632352eb6fd60a682b03d6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": "          public void testCheckOption()         throws Exception", "signatureAfterChange": "      private void verifyConfigNode(         DefaultConfiguration aConfig, String aName, int aChildrenLength,         Properties atts) throws Exception", "diff": ["-    ", "-    public void testCheckOption()", "-        throws Exception", "-//        Configuration config =", "-//            loadConfiguration(\"rightcurlycheck_configuration.xml\");", "-//                    ", "-//        GlobalProperties globalProps =", "-//            new GlobalProperties(new Properties(), System.out);", "-//        assertEquals(\"properties\", globalProps.getProperties(),", "-//            config.getProperties());", "-//                ", "-//        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "-//        assertEquals(\"checkConfigs.length\", 1, checkConfigs.length);", "-//        ", "-//        RightCurlyCheck rightCurly =", "-//            (RightCurlyCheck) (checkConfigs[0].", "-//                createInstance(this.getClass().getClassLoader()));", "-//        RightCurlyOption option =", "-//            (RightCurlyOption) rightCurly.getAbstractOption();", "-//        assertEquals(\"option\", \"alone\", option.toString());", "+", "+    private void verifyConfigNode(", "+        DefaultConfiguration aConfig, String aName, int aChildrenLength,", "+        Properties atts) throws Exception", "+    {", "+        assertEquals(\"name.\", aName, aConfig.getName());", "+        assertEquals(", "+            \"children.length.\", aChildrenLength, aConfig.getChildren().length);", "+", "+        final String[] attNames = aConfig.getAttributeNames();", "+        assertEquals(\"attributes.length\", atts.size(), attNames.length);", "+", "+        for (int i = 0; i < attNames.length; i++) {", "+            assertEquals(", "+                \"attribute[\" + attNames[i] + \"]\", atts.get(attNames[i]),", "+                aConfig.getAttribute(attNames[i]));", "+        }", "+    }"]}]}
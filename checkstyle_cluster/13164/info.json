{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d298a1c35e52cc98253526a420061842", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "177f5a13b6d88c48085c57ad2d181606", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void leaveMethodDef(DetailAST aAST)", "signatureAfterChange": "     private void leaveMethodDef(DetailAST ast)", "diff": ["-    private void leaveMethodDef(DetailAST aAST)", "+    private void leaveMethodDef(DetailAST ast)", "-        final BigInteger max = BigInteger.valueOf(mMax);", "-        if (mCurrentValue.compareTo(max) > 0) {", "-            log(aAST, getMessageID(), mCurrentValue, max);", "+        final BigInteger bigIntegerMax = BigInteger.valueOf(max);", "+        if (currentValue.compareTo(bigIntegerMax) > 0) {", "+            log(ast, getMessageID(), currentValue, bigIntegerMax);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91ba2b3bf833191b5f3c844a0b2b3ca4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java", "commitBeforeChange": "17fe0633fdc7ecf2a34171c1f103c0eca1fead4a", "commitAfterChange": "237dbc6866249f18545d695d75b4577b1f2dfed6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "      @Override     protected void leaveTokenHook(DetailAST ast)", "signatureAfterChange": "     private void leaveMethodDef(DetailAST ast)", "diff": ["-    @Override", "-    protected void leaveTokenHook(DetailAST ast) {", "-        // no code", "+     */", "+    private void leaveMethodDef(DetailAST ast) {", "+        final BigInteger bigIntegerMax = BigInteger.valueOf(max);", "+        if (currentValue.compareTo(bigIntegerMax) > 0) {", "+            log(ast, MSG_KEY, currentValue, bigIntegerMax);", "+        }", "+        popValue();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2891f03ef7b6baa8aeb6464901a8fde6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14aa7bd108223b69ac98d85a68df8eb4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "54b9235aedc7f62e887c1a90b68ad465da08dd65", "commitAfterChange": "f1ef403f5e8fab7f9c68100f5089bb24ecf46bb9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+        // LITERAL_IF has the following four or five children:", "+        // '('", "+        // condition", "+        // ')'", "+        // thenstatement", "+        // [ LITERAL_ELSE (with the elseStatement as a child) ]", "+", "-        if (aAST.getChildCount() != 3) {", "+        if (aAST.getChildCount() != 5) {", "-        AST condition = aAST.getFirstChild();", "-        AST thenStatement = condition.getNextSibling();", "-        AST elseStatement = thenStatement.getNextSibling();", "+        // skip '(' and ')'", "+        // TODO: Introduce helpers in DetailAST", "+        AST condition = aAST.getFirstChild().getNextSibling();", "+        AST thenStatement = condition.getNextSibling().getNextSibling();", "+        AST elseStatement = thenStatement.getNextSibling().getFirstChild();", "-            log(aAST.getLineNo(), \"Remove conditional logic.\");", "+            // TODO: i18n", "+            log(aAST.getLineNo(), aAST.getColumnNo(), \"Remove conditional logic.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22ad2bc960a55c4e94550e4ce64903fb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void logMessage(int aLineNumber)", "signatureAfterChange": "     private void logMessage(int lineNumber)", "diff": ["-    private void logMessage(int aLineNumber)", "+    private void logMessage(int lineNumber)", "-        String message = \"\".equals(getMessage()) ? getFormat() : mMessage;", "-        if (mErrorCount >= mErrorLimit) {", "-            message = ERROR_LIMIT_EXCEEDED_MESSAGE + message;", "+        String msg = \"\".equals(getMessage()) ? getFormat() : message;", "+        if (errorCount >= errorLimit) {", "+            msg = ERROR_LIMIT_EXCEEDED_MESSAGE + msg;", "-        if (mIllegalPattern) {", "-            log(aLineNumber, \"illegal.regexp\", message);", "+        if (illegalPattern) {", "+            log(lineNumber, \"illegal.regexp\", msg);", "-            if (aLineNumber > 0) {", "-                log(aLineNumber, \"duplicate.regexp\", message);", "+            if (lineNumber > 0) {", "+                log(lineNumber, \"duplicate.regexp\", msg);", "-                log(aLineNumber, \"required.regexp\", message);", "+                log(lineNumber, \"required.regexp\", msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f67f6c2932464ff7e0617a4456511c9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processStart(DetailAST aAST)", "signatureAfterChange": "     private void processStart(DetailAST ast)", "diff": ["-    private void processStart(DetailAST aAST)", "+    private void processStart(DetailAST ast)", "-        final String line = getLine(aAST.getLineNo() - 1);", "-        final int before = aAST.getColumnNo() - 1;", "-        final int after = aAST.getColumnNo() + 1;", "+        final String line = getLine(ast.getLineNo() - 1);", "+        final int before = ast.getColumnNo() - 1;", "+        final int after = ast.getColumnNo() + 1;", "-            final DetailAST parent = aAST.getParent();", "+            final DetailAST parent = ast.getParent();", "-                    log(aAST.getLineNo(), before, \"ws.notPreceded\", \"<\");", "+                    log(ast.getLineNo(), before, \"ws.notPreceded\", \"<\");", "-                log(aAST.getLineNo(), before, \"ws.preceded\", \"<\");", "+                log(ast.getLineNo(), before, \"ws.preceded\", \"<\");", "-            log(aAST.getLineNo(), after, \"ws.followed\", \"<\");", "+            log(ast.getLineNo(), after, \"ws.followed\", \"<\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1b626e76aa1aa1e000fdd0f360afada", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/DefaultComesLastCheck.java", "commitBeforeChange": "836bb79348590f1a473f66553ea2ce3c9dec2786", "commitAfterChange": "fab025f0d1561155fc05e1b1d4156e5b219517fc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        final DetailAST switchAST = defaultGroupAST.getParent();", "-        final DetailAST lastGroupAST =", "-            switchAST.getLastChild().getPreviousSibling();", "-", "-        if (defaultGroupAST.getLineNo() != lastGroupAST.getLineNo()", "-            || defaultGroupAST.getColumnNo() != lastGroupAST.getColumnNo())", "+        //default keywords used in annotations too - not what we're", "+        //interested in", "+        if (defaultGroupAST.getType() != TokenTypes.ANNOTATION_FIELD_DEF)", "-            log(aAST, \"default.comes.last\");", "+            final DetailAST switchAST = defaultGroupAST.getParent();", "+            final DetailAST lastGroupAST =", "+                switchAST.getLastChild().getPreviousSibling();", "+", "+            if (defaultGroupAST.getLineNo() != lastGroupAST.getLineNo()", "+                || defaultGroupAST.getColumnNo() != lastGroupAST.getColumnNo())", "+            {", "+                log(aAST, \"default.comes.last\");", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a2707526be7d3aa090923287883a1b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkAnnotationIndentation(DetailAST aAtNode,             NavigableMap<Integer, DetailAST> aFirstNodesOnLines)", "signatureAfterChange": "     private void checkAnnotationIndentation(DetailAST atNode,             NavigableMap<Integer, DetailAST> firstNodesOnLines)", "diff": ["-    private void checkAnnotationIndentation(DetailAST aAtNode,", "-            NavigableMap<Integer, DetailAST> aFirstNodesOnLines)", "+    private void checkAnnotationIndentation(DetailAST atNode,", "+            NavigableMap<Integer, DetailAST> firstNodesOnLines)", "-        final int currentIndent = aAtNode.getColumnNo() + mIndentLevel;", "-        final int firstNodeIndent = aAtNode.getColumnNo();", "-        final Collection<DetailAST> values = aFirstNodesOnLines.values();", "-        final DetailAST lastAnnotationNode = getLastAnnotationNode(aAtNode);", "+        final int currentIndent = atNode.getColumnNo() + indentLevel;", "+        final int firstNodeIndent = atNode.getColumnNo();", "+        final Collection<DetailAST> values = firstNodesOnLines.values();", "+        final DetailAST lastAnnotationNode = getLastAnnotationNode(atNode);", "-        while (itr.hasNext() && aFirstNodesOnLines.size() > 1) {", "+        while (itr.hasNext() && firstNodesOnLines.size() > 1) {"]}]}
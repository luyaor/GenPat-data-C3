{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "526d54779743d240b22345f92a22e2b0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "505a731e754a0bb2b4389b8e23102235", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "576d593f6cb309d0959639fa707d0a01f28a6609", "commitAfterChange": "9dbc71956635b56a20780d484454e177897b5788", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public static DetailNode getPreviousSibling(DetailNode node)", "signatureAfterChange": "     public static DetailNode getPreviousSibling(DetailNode node)", "diff": ["-        if (parent != null) {", "-            final int previousSiblingIndex = node.getIndex() - 1;", "-            final DetailNode[] children = parent.getChildren();", "-            if (previousSiblingIndex >= 0) {", "-                return children[previousSiblingIndex];", "-            }", "+        final int previousSiblingIndex = node.getIndex() - 1;", "+        final DetailNode[] children = parent.getChildren();", "+        if (previousSiblingIndex >= 0) {", "+            return children[previousSiblingIndex];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab7dc5a41187d699ef04aed75e89f733", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void addPreviousSibling(DetailAST ast)", "signatureAfterChange": "     public void addPreviousSibling(DetailAST ast)", "diff": ["-            final DetailAST previousSibling = getPreviousSibling();", "+            final DetailAST previousSiblingNode = getPreviousSibling();", "-            if (previousSibling != null) {", "-                ast.setPreviousSibling(previousSibling);", "-                previousSibling.setNextSibling(ast);", "+            if (previousSiblingNode != null) {", "+                ast.setPreviousSibling(previousSiblingNode);", "+                previousSiblingNode.setNextSibling(ast);"]}]}
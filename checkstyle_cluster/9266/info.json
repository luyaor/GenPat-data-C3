{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cd84ef6eef06cac4c3dc3ba86bed12d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1865be3508d629ba66bfe65ead4fe622", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Class<?> resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "signatureAfterChange": "     public Class<?> resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "diff": ["-        Iterator<String> it = mImports.iterator();", "-        while (it.hasNext()) {", "-            final String imp = it.next();", "+        for (String imp : mImports) {", "-        it = mImports.iterator();", "-        while (it.hasNext()) {", "-            final String imp = it.next();", "+        for (String imp : mImports) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3ba9bc6d1c25e536d3fe2a79e516abf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void checkParamTags(final List<JavadocTag> aTags,             final DetailAST aParent, boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkParamTags(final List<JavadocTag> aTags,             final DetailAST aParent, boolean aReportExpectedTags)", "diff": ["-            final Iterator<DetailAST> paramIt = params.iterator();", "-            while (paramIt.hasNext()) {", "-                final DetailAST param = paramIt.next();", "+            for (DetailAST param : params) {", "-            final Iterator<DetailAST> typeParamsIt = typeParams.iterator();", "-            while (typeParamsIt.hasNext()) {", "-                final DetailAST typeParam = typeParamsIt.next();", "+            for (DetailAST typeParam : typeParams) {"]}]}
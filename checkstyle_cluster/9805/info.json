{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94fdac9e3b4364d741d4163bee9fb9c3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ab11b6b03bdc3c862a57690b7e14c1c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     void verifyVariable(MyVariable aVar);", "signatureAfterChange": "     void verifyVariable(MyVariable aVar)", "diff": ["-    void verifyVariable(MyVariable aVar);", "+    void verifyVariable(MyVariable aVar)", "+    {", "+        if (inMethodBlock()) {", "+            return;", "+        }", "+", "+        final Scope declaredScope =", "+            aVar.getModifierSet().getVisibilityScope();", "+        final Scope variableScope =", "+            inInterfaceBlock() ? Scope.PUBLIC : declaredScope;", "+", "+        if (inCheckScope(variableScope) &&", "+            getJavadocBefore(aVar.getLineNo() - 1) == null)", "+        {", "+            log(aVar.getLineNo(),", "+                \"variable '\" + aVar.getText() + \"' missing Javadoc.\");", "+        }", "+", "+        // Check correct format", "+        if (inInterfaceBlock()) {", "+            // The only declarations allowed in interfaces are all static final,", "+            // even if not declared that way.", "+            checkVariable(aVar,", "+                          mConfig.getStaticFinalRegexp(),", "+                          mConfig.getStaticFinalPat());", "+        }", "+        else {", "+            final MyModifierSet mods = aVar.getModifierSet();", "+", "+            if (mods.containsStatic()) {", "+                if (mods.containsFinal()) {", "+                    // Handle the serialVersionUID constant which is used for", "+                    // Serialization. Cannot enforce rules on it. :-)", "+                    if (!\"serialVersionUID\".equals(aVar.getText())) {", "+                        checkVariable(aVar,", "+                                      mConfig.getStaticFinalRegexp(),", "+                                      mConfig.getStaticFinalPat());", "+                    }", "+                }", "+                else {", "+                    if (mods.containsPrivate()) {", "+                        checkVariable(aVar,", "+                                      mConfig.getStaticRegexp(),", "+                                      mConfig.getStaticPat());", "+                }", "+                    else {", "+                        log(aVar.getLineNo(),", "+                            \"variable '\" + aVar.getText() +", "+                            \"' must be private and have accessor methods.\");", "+                    }", "+                }", "+            }", "+            else {", "+                // These are the non-static variables", "+                if (mods.containsPrivate() ||", "+                    (mConfig.isAllowProtected() && mods.containsProtected()))", "+                {", "+                    checkVariable(aVar,", "+                                  mConfig.getMemberRegexp(),", "+                                  mConfig.getMemberPat());", "+                }", "+                else if (mods.containsPublic() &&", "+                         mConfig.getPublicMemberRegexp().match(aVar.getText()))", "+                {", "+                    // silently allow", "+                }", "+                else {", "+                    log(aVar.getLineNo(),", "+                        \"variable '\" + aVar.getText() +", "+                        \"' must be private and have accessor methods.\");", "+                }", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4d2a52d0372b9c744e8456182292aac", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethodJavadoc(MyModifierSet aMods,                              MyCommonAST aReturnType,                              MethodSignature aSig);", "signatureAfterChange": "     void verifyMethod(MyModifierSet aMods,                       MyCommonAST aReturnType,                       MethodSignature aSig)", "diff": ["-    void verifyMethodJavadoc(MyModifierSet aMods,", "+    void verifyMethod(MyModifierSet aMods,", "+                      MyCommonAST aReturnType,", "+                      MethodSignature aSig)", "+    {", "+        // Always verify the parameters are ok", "+        for (Iterator it = aSig.getParams().iterator(); it.hasNext(); ) {", "+            verifyParameter((LineText) it.next());", "+        }", "+", "+", "+        // now check the javadoc", "+        final Scope methodScope =", "+            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "+", "+        if (!inCheckScope(methodScope)) {", "+            return; // no need to really check anything", "+        }", "+", "+        // Calculate line number. Unfortunately aReturnType does not contain a", "+        // valid line number", "+        final int lineNo = (aMods.size() > 0)", "+            ? aMods.getFirstLineNo()", "+            : aSig.getLineNo();", "+", "+        final boolean isFunction = (aReturnType == null)", "+            ? false", "+            : !\"void\".equals(aReturnType.getText().trim());", "+", "+        final String[] jd = getJavadocBefore(lineNo - 1);", "+        if (jd == null) {", "+            log(lineNo, \"method is missing a Javadoc comment.\");", "+        }", "+        else {", "+            final List tags = getMethodTags(jd, lineNo - 1);", "+            // Check for only one @see tag", "+            if ((tags.size() != 1) ||", "+                !((JavadocTag) tags.get(0)).isSeeTag())", "+            {", "+                checkParamTags(tags, aSig.getParams());", "+                checkThrowsTags(tags, aSig.getThrows());", "+                if (isFunction) {", "+                    checkReturnTag(tags, lineNo);", "+                }", "+", "+                // Dump out all unused tags", "+                final Iterator it = tags.iterator();", "+                while (it.hasNext()) {", "+                    final JavadocTag jt = (JavadocTag) it.next();", "+                    if (!jt.isSeeTag()) {", "+                        log(jt.getLineNo(), \"Unused Javadoc tag.\");", "+                    }", "+                }", "+            }", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe2b9f4c21aea8fa85db2b13e95282ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05e57ad54d1336e649ed4431d34379e7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public final void configure(Configuration aConfiguration)         throws CheckstyleException", "signatureAfterChange": "     @Override     public final void configure(Configuration configuration)         throws CheckstyleException", "diff": ["-    public final void configure(Configuration aConfiguration)", "+    public final void configure(Configuration configuration)", "-        mConfiguration = aConfiguration;", "+        this.configuration = configuration;", "-        final String[] attributes = aConfiguration.getAttributeNames();", "+        final String[] attributes = configuration.getAttributeNames();", "-            final String value = aConfiguration.getAttribute(key);", "+            final String value = configuration.getAttribute(key);", "-                        + aConfiguration.getName()", "+                        + configuration.getName()", "-                    + aConfiguration.getName() + \" to '\" + value", "+                    + configuration.getName() + \" to '\" + value", "-                    + \"' of module \" + aConfiguration.getName(), e);", "+                    + \"' of module \" + configuration.getName(), e);", "-                    + \"' of module \" + aConfiguration.getName(), e);", "+                    + \"' of module \" + configuration.getName(), e);", "-        final Configuration[] childConfigs = aConfiguration.getChildren();", "+        final Configuration[] childConfigs = configuration.getChildren();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b95bd26a05d04bfe055d690f7bdc23fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void registerCheck(Check aCheck)         throws CheckstyleException", "signatureAfterChange": "     private void registerCheck(Check check)         throws CheckstyleException", "diff": ["-    private void registerCheck(Check aCheck)", "+    private void registerCheck(Check check)", "-        final Set<String> checkTokens = aCheck.getTokenNames();", "+        final Set<String> checkTokens = check.getTokenNames();", "-            tokens = aCheck.getRequiredTokens();", "+            tokens = check.getRequiredTokens();", "-            final int[] acceptableTokens = aCheck.getAcceptableTokens();", "+            final int[] acceptableTokens = check.getAcceptableTokens();", "-                        registerCheck(token, aCheck);", "+                        registerCheck(token, check);", "-                        + token + \"\\\" in check \" + aCheck, ex);", "+                        + token + \"\\\" in check \" + check, ex);", "-            tokens = aCheck.getDefaultTokens();", "+            tokens = check.getDefaultTokens();", "-            registerCheck(element, aCheck);", "+            registerCheck(element, check);", "-        if (aCheck.isCommentNodesRequired()) {", "-            mCommentChecks.add(aCheck);", "+        if (check.isCommentNodesRequired()) {", "+            commentChecks.add(check);", "-            mOrdinaryChecks.add(aCheck);", "+            ordinaryChecks.add(check);"]}]}
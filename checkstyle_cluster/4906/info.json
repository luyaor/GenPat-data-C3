{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48e2fe479c4bab2582714ca7756a9de5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13ecaa4d1dcb4cf0b91789936a25d354", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testClassRegularClass() throws Exception", "signatureAfterChange": "      @Test     public void testClassRegularClass() throws Exception", "diff": ["-        Class<?> tokenType = Class", "+        final Class<?> tokenType = Class", "-        Class<?> regularClassType = Class", "+        final Class<?> regularClassType = Class", "-        Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(tokenType,", "-                String.class, AbstractTypeAwareCheck.class);", "+        final Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(", "+                tokenType, String.class, AbstractTypeAwareCheck.class);", "-        Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class,", "-                int.class);", "-        Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);", "+        final Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class,", "+                int.class, int.class);", "+        final Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);", "-        Object regularClass = regularClassConstructor.newInstance(token, \"sur\",", "+        final Object regularClass = regularClassConstructor.newInstance(token, \"sur\",", "-        Method toString = regularClass.getClass().getDeclaredMethod(\"toString\");", "+        final Method toString = regularClass.getClass().getDeclaredMethod(\"toString\");", "-        String result = (String) toString.invoke(regularClass);", "+        final String result = (String) toString.invoke(regularClass);", "-        Method setClazz = regularClass.getClass().getDeclaredMethod(\"setClazz\", Class.class);", "+        final Method setClazz = regularClass.getClass().getDeclaredMethod(\"setClazz\", Class.class);", "-        Class<?> arg = null;", "+        final Class<?> arg = null;", "-        Method getClazz = regularClass.getClass().getDeclaredMethod(\"getClazz\");", "+        final Method getClazz = regularClass.getClass().getDeclaredMethod(\"getClazz\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1d546f877d3db4f3dc2cb43303d6e46", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testClassAliasToString() throws Exception", "signatureAfterChange": "      @Test     public void testClassAliasToString() throws Exception", "diff": ["-        Class<?> tokenType = Class", "+        final Class<?> tokenType = Class", "-        Class<?> regularClassType = Class", "+        final Class<?> regularClassType = Class", "-        Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(tokenType,", "-                String.class, AbstractTypeAwareCheck.class);", "+        final Constructor<?> regularClassConstructor = regularClassType.getDeclaredConstructor(", "+                tokenType, String.class, AbstractTypeAwareCheck.class);", "-        Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class,", "-                int.class);", "-        Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);", "+        final Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class,", "+                int.class, int.class);", "+        final Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);", "-        Object regularClass = regularClassConstructor.newInstance(token, \"sur\",", "+        final Object regularClass = regularClassConstructor.newInstance(token, \"sur\",", "-        Class<?> classAliasType = Class.forName(", "+        final Class<?> classAliasType = Class.forName(", "-        Class<?> abstractTypeInfoType = Class.forName(", "+        final Class<?> abstractTypeInfoType = Class.forName(", "-        Constructor<?> classAliasConstructor = classAliasType", "+        final Constructor<?> classAliasConstructor = classAliasType", "-        Object classAlias = classAliasConstructor.newInstance(token, regularClass);", "-        Method toString = classAlias.getClass().getDeclaredMethod(\"toString\");", "+        final Object classAlias = classAliasConstructor.newInstance(token, regularClass);", "+        final Method toString = classAlias.getClass().getDeclaredMethod(\"toString\");", "-        String result = (String) toString.invoke(classAlias);", "+        final String result = (String) toString.invoke(classAlias);"]}]}
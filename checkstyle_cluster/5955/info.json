{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6851c965d554035ffcdba6dd4726c70f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50412382afc3d92b66da9e56fa4a21f0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     void reportNeedBraces(Token aStmt);", "signatureAfterChange": "     void reportNeedBraces(Token aStmt)", "diff": ["-    void reportNeedBraces(Token aStmt);", "+    void reportNeedBraces(Token aStmt)", "+    {", "+        if (mConfig.isIgnoreBraces()) {", "+            return;", "+        }", "+        log(aStmt.getLine(),", "+            \"'\" + aStmt.getText() + \"' construct must use '{}'s.\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6db114c5d1dae61860c93d6cc4eab8a4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     LineText[] getMessages();", "signatureAfterChange": "     LineText[] getMessages()", "diff": ["-    LineText[] getMessages();", "+    LineText[] getMessages()", "+    {", "+        checkImports();", "+        Collections.sort(mMessages);", "+        return (LineText[]) mMessages.toArray(new LineText[0]);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "add41b0f5bd90726c8d1d3ccc2d30a56", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java", "commitBeforeChange": "7d82fd670a2111e78de45cd09da5f184fc93d6ee", "commitAfterChange": "17d3b314bbb0f23622b719c089c1b3ca1607c1da", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public void reportStartTypeBlock(boolean aIsInterface)", "signatureAfterChange": "     public void reportStartTypeBlock(Scope aScope, boolean aIsInterface)", "diff": ["-    public void reportStartTypeBlock(boolean aIsInterface)", "+    public void reportStartTypeBlock(Scope aScope, boolean aIsInterface)", "-        mInInterface.push(new Boolean(aIsInterface));", "+        mInScope.push(aScope);", "+        mInInterface.push(aIsInterface ? Boolean.TRUE : Boolean.FALSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd0727465f8dd6ad07215e351e4980a5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 21, "signatureBeforeChange": "     void reportStarImport(int aLineNo, String aPkg);", "signatureAfterChange": "     void reportStarImport(int aLineNo, String aPkg)", "diff": ["-    void reportStarImport(int aLineNo, String aPkg);", "+    void reportStarImport(int aLineNo, String aPkg)", "+    {", "+        if (!mConfig.isIgnoreImports()) {", "+            log(aLineNo, \"Avoid using the '.*' form of import.\");", "+            mImports.add(new LineText(aLineNo, aPkg));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0a2947039dfffa07aa6c229c261f90c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 22, "signatureBeforeChange": "     void reportStartTypeBlock(Scope aScope, boolean aIsInterface);", "signatureAfterChange": "     void reportStartTypeBlock(Scope aScope, boolean aIsInterface)", "diff": ["-    void reportStartTypeBlock(Scope aScope, boolean aIsInterface);", "+    void reportStartTypeBlock(Scope aScope, boolean aIsInterface)", "+    {", "+        mInScope.push(aScope);", "+        mInInterface.push(aIsInterface ? Boolean.TRUE : Boolean.FALSE);", "+    }"]}]}
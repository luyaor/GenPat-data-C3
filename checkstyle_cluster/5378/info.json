{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "018cf3915499b386740c4f1035c78c6a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3587bb53e79778bbe7f0fa25d9008792", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/blocks/AvoidNestedBlocksCheckTest.java", "commitBeforeChange": "6db0b3effd48f02d741b2202338d710b1b254910", "commitAfterChange": "59de966a7e8a2225da2b1e12624ca24beab509ac", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testIt()         throws Exception", "signatureAfterChange": "      public void testAllowSwitchInCase()         throws Exception", "diff": ["-    public void testIt()", "-            \"38:17: Avoid nested blocks.\",", "+", "+    public void testAllowSwitchInCase()", "+        throws Exception", "+    {", "+        final DefaultConfiguration checkConfig =", "+            createCheckConfig(AvoidNestedBlocksCheck.class);", "+        checkConfig.addAttribute(\"allowInSwitchCase\", Boolean.TRUE.toString());", "+", "+        final String[] expected = {", "+            \"22:9: Avoid nested blocks.\",", "+            \"44:17: Avoid nested blocks.\",", "+            \"58:17: Avoid nested blocks.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "370a776125b5beacf8380582f212ad2d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheckTest.java", "commitBeforeChange": "2a01965deb18e6301b72cb8b2b131cba896b7a4e", "commitAfterChange": "c18071b7561b99767e871be9d4d7711eb15b76f1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testIntegerOverflow() throws Exception", "signatureAfterChange": "      public void testIntegerOverflow() throws Exception", "diff": ["+", "+        final long largerThanMaxInt = 3486784401L;", "+        // use i18n for number formating so test wont fail in non-english environments", "+        final String expectedComplexity = NumberFormat.getInstance().format(largerThanMaxInt);", "+", "-            \"9:5: NPath Complexity is 3,486,784,401 (max allowed is 0).\" // larger than MAXINT", "+            \"9:5: NPath Complexity is \" + expectedComplexity + \" (max allowed is 0).\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48c04172facda0b65aa2199eeaa30c80", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java", "commitBeforeChange": "ab1e3089135d74b0d8c3296d0074244ca89a55e2", "commitAfterChange": "9d8134f4e8f2400519d4097a96a87c1b533dc9d2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testIt() throws Exception", "signatureAfterChange": "          public void testLastCaseGroup() throws Exception", "diff": ["-", "-    public void testIt() throws Exception", "+    ", "+    public void testLastCaseGroup() throws Exception", "+        DefaultConfiguration checkConfig = createCheckConfig(FallThroughCheck.class);", "+            \"367:11: Fall through from previous branch of the switch statement.\",", "+            \"370:11: Fall through from previous branch of the switch statement.\",", "+            \"372:40: Fall through from previous branch of the switch statement.\",", "+            \"374:11: Fall through from the last branch of the switch statement.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e506b448bfe6d5a679aa21138e1302b5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportTest.java", "commitBeforeChange": "32f5f97181f9049af5411a5b8f151b51f1c5f165", "commitAfterChange": "731b581a1c0406506266226c50be8796179464e5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void testWithChecker()         throws Exception", "signatureAfterChange": "      public void testExcludes()         throws Exception", "diff": ["-    public void testWithChecker()", "+", "+    public void testExcludes()", "+        throws Exception", "+    {", "+        final DefaultConfiguration checkConfig =", "+            createCheckConfig(AvoidStarImportCheck.class);", "+        checkConfig.addAttribute(\"excludes\", \"java.io,java.lang\");", "+        // allow the java.io/java.lang star imports", "+        final String[] expected2 = new String[] {", "+            \"7: Using the '.*' form of import should be avoided - com.puppycrawl.tools.checkstyle.*.\"", "+        };", "+        verify(checkConfig, getPath(\"InputImport.java\"), expected2);", "+    }"]}]}
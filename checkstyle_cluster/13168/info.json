{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08c0c66f4fbfb9cb5f2d1cdf7a2861b4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dadd0d9dc809977f513faeede3c79e3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "d6272b70eb5ad61fd8ab34091e970c50b1f67386", "commitAfterChange": "1a2c318e22a0b2b22ccc76019217c0892fe2d59b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static void processCommandLine(CommandLine line)             throws CheckstyleException, UnsupportedEncodingException", "signatureAfterChange": "     private static CliOptions convertCliToPojo(CommandLine cmdLine)", "diff": ["+     */", "+    private static CliOptions convertCliToPojo(CommandLine cmdLine)", "+    {", "+        final CliOptions conf = new CliOptions();", "+        conf.format = cmdLine.getOptionValue(\"f\");", "+        if (conf.format == null) {", "+            conf.format = \"plain\";", "+        }", "+        conf.outputLocation = cmdLine.getOptionValue(\"o\");", "+        conf.configLocation = cmdLine.getOptionValue(\"c\");", "+        conf.propertiesLocation = cmdLine.getOptionValue(\"p\");", "+        conf.files = getFilesToProcess(cmdLine.getArgs());", "+        return conf;", "+    }", "-    private static void processCommandLine(CommandLine line)", "-            throws CheckstyleException, UnsupportedEncodingException", "-        // show version and exit", "-        if (line.hasOption(\"v\")) {", "-            System.out.println(\"Checkstyle version: \"", "-                    + Main.class.getPackage().getImplementationVersion());", "-            return;", "-        }", "-", "-        // ensure a configuration file is specified", "-        if (!line.hasOption(\"c\")) {", "-            System.out.println(\"Must specify a config XML file.\");", "-            return;", "-        }", "-", "-                line.hasOption(\"p\")", "-                        ? loadProperties(new File(line.getOptionValue(\"p\")))", "-        final String configFormat = line.getOptionValue(\"c\");", "-        final Configuration config = loadConfig(configFormat, props);", "-        // setup the output stream", "-        OutputStream out = null;", "-        boolean closeOut = false;", "-        if (line.hasOption(\"o\")) {", "-            final String fname = line.getOptionValue(\"o\");", "-            try {", "-                out = new FileOutputStream(fname);", "-                closeOut = true;", "-            }", "-            catch (final FileNotFoundException e) {", "-                throw new CheckstyleException(String.format(", "-                        \"Could not find file '%s': %s \", fname, e.getMessage()));", "-            }", "-        }", "-        else {", "-            out = System.out;", "-            closeOut = false;", "-        }", "-        final String format = line.hasOption(\"f\") ? line.getOptionValue(\"f\") : \"plain\";", "-        final AuditListener listener = createListener(format, out, closeOut);", "-        final List<File> files = getFilesToProcess(line.getArgs());", "-        if (files.isEmpty()) {", "-            throw new CheckstyleException(\"Must specify files to process, found 0.\");", "-        }", "-        final Checker checker = createChecker(config, listener);", "-        final int errorCounter = checker.process(files);", "-        checker.destroy();", "-        if (errorCounter != 0) {", "-            throw new CheckstyleException(String.format(", "-                    \"Checkstyle ends with %d errors.\", errorCounter));", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "989737de6b41ae9d193584bce0ad7b90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "d6272b70eb5ad61fd8ab34091e970c50b1f67386", "commitAfterChange": "1a2c318e22a0b2b22ccc76019217c0892fe2d59b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static void main(String... args) throws UnsupportedEncodingException", "signatureAfterChange": "     public static void main(String... args) throws UnsupportedEncodingException             , CheckstyleException, FileNotFoundException", "diff": ["+            , CheckstyleException, FileNotFoundException", "-        boolean parseResult = false;", "+        int errorCounter = 0;", "+        boolean cliViolations = false;", "+", "-            processCommandLine(parseCli(args));", "-            parseResult = true;", "+            //parse CLI arguments", "+            final CommandLine commandLine = parseCli(args);", "+", "+            // show version and exit if it is requested", "+            if (commandLine.hasOption(\"v\")) {", "+                System.out.println(\"Checkstyle version: \"", "+                        + Main.class.getPackage().getImplementationVersion());", "+            }", "+            else {", "+                // return error is smth is wrong in arguments", "+                final List<String> messages = validateCli(commandLine);", "+                cliViolations = !messages.isEmpty();", "+                if (messages.isEmpty()) {", "+", "+                    // create config helper object", "+                    final CliOptions config = convertCliToPojo(commandLine);", "+                    // run Checker", "+                    errorCounter = runCheckstyle(config);", "+", "+                }", "+                else {", "+                    errorCounter = 1;", "+                    for (String message : messages) {", "+                        System.out.println(message);", "+                    }", "+                }", "+            }", "-        catch (final ParseException e) {", "-            System.err.println(\"Could not parse parameters: \" + e.getMessage());", "-            e.printStackTrace();", "+        catch (ParseException pex) {", "+            // smth wrong with arguments - print error and manual", "+            cliViolations = true;", "+            errorCounter = 1;", "+            System.out.println(pex.getMessage());", "+            printUsage();", "-        catch (final Exception e) {", "-            System.err.println(\"Could not execute Checkstyle: \" + e.getMessage());", "-            e.printStackTrace();", "+        catch (Exception ex) {", "+            // smth wrong during processing", "+            errorCounter = 1;", "+            throw ex;", "-            if (!parseResult) {", "-                usage();", "+            // return exit code base on validation of Checker", "+            if (errorCounter != 0 && !cliViolations) {", "+                System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));", "-            System.exit(parseResult ? 0 : 1);", "+            System.exit(errorCounter);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8837d7ebde50158e682b5127a543f09a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36225615633bbc1a97173bb3b37fbdcc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java", "commitBeforeChange": "3514294e655ea9e2e35f21ec1c94cef8f4c6d945", "commitAfterChange": "53ad5f4a6bf3a073b7ccaea51ce4ac85151ca672", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public IllegalCatchCheck()", "signatureAfterChange": "     public void setIllegalClassNames(final String... classNames)", "diff": ["-    /** Creates new instance of the check. */", "-    public IllegalCatchCheck() {", "-        super(\"Exception\", \"Error\", \"RuntimeException\", \"Throwable\", \"java.lang.Error\",", "-                \"java.lang.Exception\", \"java.lang.RuntimeException\", \"java.lang.Throwable\");", "+     */", "+    public void setIllegalClassNames(final String... classNames) {", "+        illegalClassNames.clear();", "+        for (final String name : classNames) {", "+            illegalClassNames.add(name);", "+            final int lastDot = name.lastIndexOf('.');", "+            if (lastDot > 0 && lastDot < name.length() - 1) {", "+                final String shortName = name", "+                        .substring(name.lastIndexOf('.') + 1);", "+                illegalClassNames.add(shortName);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60c6a7ecb1b381d70e7e0daa6e1429fe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java", "commitBeforeChange": "181c2b0600991da6a512071c968a59f36e616074", "commitAfterChange": "f4d416e749e743a0c559c43460094e1cfb761a22", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public IllegalThrowsCheck()", "signatureAfterChange": "     public void setIllegalClassNames(final String... classNames)", "diff": ["-    /** Creates new instance of the check. */", "-    public IllegalThrowsCheck() {", "-        super(\"Error\", \"RuntimeException\", \"Throwable\", \"java.lang.Error\",", "-                \"java.lang.RuntimeException\", \"java.lang.Throwable\");", "-        setIgnoredMethodNames(DEFAULT_IGNORED_METHOD_NAMES);", "+     */", "+    public void setIllegalClassNames(final String... classNames) {", "+        illegalClassNames.clear();", "+        for (final String name : classNames) {", "+            illegalClassNames.add(name);", "+            final int lastDot = name.lastIndexOf('.');", "+            if (lastDot > 0 && lastDot < name.length() - 1) {", "+                final String shortName = name", "+                        .substring(name.lastIndexOf('.') + 1);", "+                illegalClassNames.add(shortName);", "+            }", "+        }"]}]}
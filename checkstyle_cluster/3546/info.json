{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9c6ad5313d4f74fd71d9d4b46d5c175", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b5260a54f69f5d64c3e60ae2e40674f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected final void checkExpressionSubtree(         DetailAST aTree,         IndentLevel aLevel,         boolean aFirstLineMatches,         boolean aAllowNesting     )", "signatureAfterChange": "     protected final void checkExpressionSubtree(         DetailAST tree,         IndentLevel level,         boolean firstLineMatches,         boolean allowNesting     )", "diff": ["-        DetailAST aTree,", "-        IndentLevel aLevel,", "-        boolean aFirstLineMatches,", "-        boolean aAllowNesting", "+        DetailAST tree,", "+        IndentLevel level,", "+        boolean firstLineMatches,", "+        boolean allowNesting", "-        final int firstLine = getFirstLine(Integer.MAX_VALUE, aTree);", "-        if (aFirstLineMatches && !aAllowNesting) {", "+        final int firstLine = getFirstLine(Integer.MAX_VALUE, tree);", "+        if (firstLineMatches && !allowNesting) {", "-                getLineStart(mIndentCheck.getLine(firstLine - 1)));", "+                getLineStart(indentCheck.getLine(firstLine - 1)));", "-        findSubtreeLines(subtreeLines, aTree, aAllowNesting);", "+        findSubtreeLines(subtreeLines, tree, allowNesting);", "-        checkLinesIndent(subtreeLines, aLevel, aFirstLineMatches, firstLine);", "+        checkLinesIndent(subtreeLines, level, firstLineMatches, firstLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7f0afdd0c189bb3cdc062616c1434bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void checkCounters(MethodCounter aCounter, DetailAST aAst)", "signatureAfterChange": "     private void checkCounters(MethodCounter counter, DetailAST ast)", "diff": ["-    private void checkCounters(MethodCounter aCounter, DetailAST aAst)", "+    private void checkCounters(MethodCounter counter, DetailAST ast)", "-        checkMax(mMaxPrivate, aCounter.value(Scope.PRIVATE),", "-                 \"too.many.privateMethods\", aAst);", "-        checkMax(mMaxPackage, aCounter.value(Scope.PACKAGE),", "-                 \"too.many.packageMethods\", aAst);", "-        checkMax(mMaxProtected, aCounter.value(Scope.PROTECTED),", "-                 \"too.many.protectedMethods\", aAst);", "-        checkMax(mMaxPublic, aCounter.value(Scope.PUBLIC),", "-                 \"too.many.publicMethods\", aAst);", "-        checkMax(mMaxTotal, aCounter.getTotal(), \"too.many.methods\", aAst);", "+        checkMax(maxPrivate, counter.value(Scope.PRIVATE),", "+                 \"too.many.privateMethods\", ast);", "+        checkMax(maxPackage, counter.value(Scope.PACKAGE),", "+                 \"too.many.packageMethods\", ast);", "+        checkMax(maxProtected, counter.value(Scope.PROTECTED),", "+                 \"too.many.protectedMethods\", ast);", "+        checkMax(maxPublic, counter.value(Scope.PUBLIC),", "+                 \"too.many.publicMethods\", ast);", "+        checkMax(maxTotal, counter.getTotal(), \"too.many.methods\", ast);"]}]}
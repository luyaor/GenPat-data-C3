{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20d7c9517f554375f2103002c1efc7fc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2e7ccf3bf56653cabcfc0ba51d8ecbb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "b821f5eb95ef5f175921e4387ac6b15fce370824", "commitAfterChange": "6cbcc2f1ee6d1c17cb1e542a9e81a894b5d91f77", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void findDuplicatesInFiles(int aI, int aJ)", "signatureAfterChange": "     private void findDuplicatesInFiles(int aI, int aJ)", "diff": ["-        final int iBlockCount = mLineBlockChecksums[aI].length;", "+        final long[] iLineBlockChecksums = mLineBlockChecksums[aI];", "+        final long[] jSortedBlockChecksums = mSortedRelevantChecksums[aJ];", "+        final int iBlockCount = iLineBlockChecksums.length;", "-                    mSortedRelevantChecksums[aJ],", "-                    mLineBlockChecksums[aI][blockIdx]) >= 0)", "+                    jSortedBlockChecksums,", "+                    iLineBlockChecksums[blockIdx]) >= 0)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc2799928da0ada7947b16a756ed060b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(DetailAST aAST)", "diff": ["-        for (int i = 0; i < mLimitedTokens.length; i++) {", "-            final int tokenCount = mCounts[mLimitedTokens[i] - 1];", "+        for (int element : mLimitedTokens) {", "+            final int tokenCount = mCounts[element - 1];", "-                    TokenTypes.getTokenName(mLimitedTokens[i]);", "+                    TokenTypes.getTokenName(element);", "-                    TokenTypes.getTokenName(mLimitedTokens[i]);", "+                    TokenTypes.getTokenName(element);"]}]}
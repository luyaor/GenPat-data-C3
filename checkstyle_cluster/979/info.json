{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1869a3afec5709b92ad02e602e19ba14", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62655c3c20358eb2ea23755094c447c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "3a20dbe8edafe0cca300b7b9dfa48effa9a36a06", "commitAfterChange": "5026b7228df4e3d9b79d13f27846987247f9e922", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void leaveForIter(DetailAST ast)", "signatureAfterChange": "     private void leaveForIter(DetailAST ast)", "diff": ["-        final DetailAST forInitAST = ast.findFirstToken(TokenTypes.FOR_INIT);", "-        DetailAST parameterDefAST =", "-            forInitAST.findFirstToken(TokenTypes.VARIABLE_DEF);", "-", "-        for (; parameterDefAST != null;", "-             parameterDefAST = parameterDefAST.getNextSibling())", "-        {", "-            if (parameterDefAST.getType() == TokenTypes.VARIABLE_DEF) {", "-                final DetailAST param =", "-                    parameterDefAST.findFirstToken(TokenTypes.IDENT);", "-                currentVariables.push(param.getText());", "-            }", "+        final Set<String> variablesToPutInScope = getVariablesManagedByForLoop(ast);", "+        for (String variableName : variablesToPutInScope) {", "+            getCurrentVariables().push(variableName);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b79d944c639584747f7785759eaa8bfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isIgnoredSetterParam(DetailAST ast, String name)", "signatureAfterChange": "     private boolean isIgnoredSetterParam(DetailAST ast, String name)", "diff": ["-        if (ast.getType() != TokenTypes.PARAMETER_DEF", "-            || !ignoreSetter)", "-        {", "-            return false;", "+        if (ast.getType() == TokenTypes.PARAMETER_DEF && ignoreSetter) {", "+            final DetailAST parametersAST = ast.getParent();", "+            final DetailAST methodAST = parametersAST.getParent();", "+            if (parametersAST.getChildCount() == 1", "+                && methodAST.getType() == TokenTypes.METHOD_DEF", "+                && isSetterMethod(methodAST, name))", "+            {", "+                return true;", "+            }", "-        //single pnameter?", "-        final DetailAST parametersAST = ast.getParent();", "-        if (parametersAST.getChildCount() != 1) {", "-            return false;", "-        }", "-        //method pnameter, not constructor pnameter?", "-        final DetailAST methodAST = parametersAST.getParent();", "-        if (methodAST.getType() != TokenTypes.METHOD_DEF) {", "-            return false;", "-        }", "-        //void?", "-        final DetailAST typeAST = methodAST.findFirstToken(TokenTypes.TYPE);", "-        if (!typeAST.branchContains(TokenTypes.LITERAL_VOID)) {", "-            return false;", "+        return false;", "+    }", "-        //property setter name?", "-        final String methodName =", "-                methodAST.findFirstToken(TokenTypes.IDENT).getText();", "-        final String expectedName = \"set\" + capitalize(name);", "-        return methodName.equals(expectedName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9fab45f52a73f89b7a60ab99041eb54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "commitAfterChange": "5a3f05ec8038daa674666bbaa82d59127aa74f92", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean isSuperCall(DetailAST literalSuperAst)", "signatureAfterChange": "     private boolean isSuperCall(DetailAST literalSuperAst)", "diff": ["-        if (literalSuperAst.getType() != TokenTypes.LITERAL_SUPER) {", "-            return false;", "-        }", "-        // dot operator?", "-        DetailAST dotAst = literalSuperAst.getParent();", "-        if (dotAst.getType() != TokenTypes.DOT", "-            || isSameNameMethod(literalSuperAst)", "-            || hasArguments(dotAst)) {", "-            return false;", "-        }", "+        boolean superCall = false;", "-        // in an overriding method for this check?", "+        if (literalSuperAst.getType() == TokenTypes.LITERAL_SUPER) {", "+            // dot operator?", "+            final DetailAST dotAst = literalSuperAst.getParent();", "+", "+            if (dotAst.getType() == TokenTypes.DOT", "+                && !isSameNameMethod(literalSuperAst)", "+                && !hasArguments(dotAst)) {", "+                superCall = isSuperCallInOverridingMethod(dotAst);", "+            }", "+        }", "+        return superCall;", "+    }", "-                return isOverridingMethod(dotAst);", "-                return false;", "-        return false;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1328f723ca7a07d484f6b178c1d8403", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c291f8761b4a1fd2498e2255541f8c3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "b1a8aac7066f4115f94ebd49c63b36a33b5187aa", "commitAfterChange": "d790eb1dc26141d6ce4c3637a31e06597a54e0e7", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "diff": ["-            final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();", "+            // First look for matches on the exception name", "+            ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();", "+            while (!found && throwIt.hasNext()) {", "+                final ExceptionInfo ei = throwIt.next();", "+", "+                if (ei.getName().getText().equals(", "+                        documentedCI.getName().getText()))", "+                {", "+                    found = true;", "+                    ei.setFound();", "+                    foundThrows.add(documentedEx);", "+                }", "+            }", "+", "+            // Now match on the exception type", "+            throwIt = aThrows.listIterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c04a7ef55a285e0c6de715300b8ed40a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "1a205d4b436650a301ef088ed86a3821b99551f2", "commitAfterChange": "faa8a0b7a427385fab564d2959244355f8d9813f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "signatureAfterChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "diff": ["-                // Loop looking for matching type param", "-                final Iterator<DetailAST> typeParamsIt = typeParams.iterator();", "-                while (typeParamsIt.hasNext()) {", "-                    final DetailAST typeParam = typeParamsIt.next();", "-                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()", "-                            .equals(", "-                                    arg1.substring(1,", "-                                        arg1.length() - 1))) {", "-                        found = true;", "-                        typeParamsIt.remove();", "-                        break;", "-                    }", "-                }", "+                found = searchMatchingTypeParameter(typeParams,", "+                        arg1.substring(1, arg1.length() - 1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5e15d2fd7a793b4f0b67d949475fd5a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "0f543a21fee9dec9b388bb6f2c42540fe8bf02ec", "commitAfterChange": "a2b8be14bb1230f1b184701bae8bcc7af102bb25", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "signatureAfterChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "diff": ["+            final String arg1 = tag.getArg1();", "-                if (param.getText().equals(tag.getArg1())) {", "+                if (param.getText().equals(arg1)) {", "-            if (tag.getArg1().startsWith(\"<\") && tag.getArg1().endsWith(\">\")) {", "+            if (Utils.startsWithChar(arg1, '<') && Utils.endsWithChar(arg1, '>')) {", "-                                    tag.getArg1().substring(1,", "-                                            tag.getArg1().length() - 1)))", "+                                    arg1.substring(1,", "+                                        arg1.length() - 1)))", "-                        \"@param\", tag.getArg1());", "+                        \"@param\", arg1);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "840c05b9b1064b5aa89f8b9c7f09a497", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12a87a72d8577691453dabc953d3d6e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "f34eba11cbd8559d4d06f96e19affa70abaf86ff", "commitAfterChange": "0e3fe5643667a53079dbd114e5b1e9aa91fde083", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     void destroy()", "signatureAfterChange": "     void destroy()", "diff": ["+", "+        // close all streamable listeners", "+        final Iterator it = mListeners.iterator();", "+        while (it.hasNext()) {", "+            final Object obj = it.next();", "+            if (obj instanceof Streamable) {", "+                final Streamable str = (Streamable) obj;", "+                final OutputStream os = str.getOutputStream();", "+                // close only those that can be closed...", "+                if ((os != System.out) && (os != System.err) && (os != null)) {", "+                    try  {", "+                        os.flush();", "+                        os.close();", "+                    }", "+                    catch (IOException ignored) {", "+                    }", "+                }", "+            }", "+            it.remove();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1965e54852c9c169e1323499ce9f4b69", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "4a859be12ad9dcd56e5689407e0cfcbdbb0003ea", "commitAfterChange": "e2ec464f27b2e30ee66802cb9f8f1899b2dc4a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private int process(String aFileName)", "signatureAfterChange": "     private int process(String aFileName)", "diff": ["-            VerifierSingleton.getInstance().clearMessages();", "-            VerifierSingleton.getInstance().setLines(lines);", "-            final Reader sar = new StringArrayReader(lines);", "-            final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);", "-            jl.setFilename(aFileName);", "-            final GeneratedJavaRecognizer jr = new GeneratedJavaRecognizer(jl);", "-            jr.setFilename(aFileName);", "-            jr.setASTNodeClass(MyCommonAST.class.getName());", "-            jr.compilationUnit();", "+            try {", "+                VerifierSingleton.getInstance().clearMessages();", "+                VerifierSingleton.getInstance().setLines(lines);", "+                final Reader sar = new StringArrayReader(lines);", "+                final GeneratedJava14Lexer jl = new GeneratedJava14Lexer(sar);", "+                jl.setFilename(aFileName);", "+                final GeneratedJava14Recognizer jr =", "+                    new SilentJava14Recognizer(jl);", "+                jr.setFilename(aFileName);", "+                jr.setASTNodeClass(MyCommonAST.class.getName());", "+                jr.compilationUnit();", "+            }", "+            catch (RecognitionException re) {", "+", "+                // Parsing might have failed because the checked", "+                // filecontains \"assert\" statement. Retry with a", "+                // grammar that treats \"assert\" as an identifier", "+                // and not as a keyword", "+", "+                // Arghh - the pain - duplicate code!", "+", "+                VerifierSingleton.getInstance().clearMessages();", "+                VerifierSingleton.getInstance().setLines(lines);", "+                final Reader sar = new StringArrayReader(lines);", "+                final GeneratedJavaLexer jl = new GeneratedJavaLexer(sar);", "+                jl.setFilename(aFileName);", "+                final GeneratedJavaRecognizer jr =", "+                    new GeneratedJavaRecognizer(jl);", "+                jr.setFilename(aFileName);", "+                jr.setASTNodeClass(MyCommonAST.class.getName());", "+                jr.compilationUnit();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f9b1b3fe31b0d490a2c2e348948af3c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "d622cf7e4255dd35e2592a71653c51e7c2b698f0", "commitAfterChange": "44e3d33fc25d44157486288d5c77de75156984cb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void process(File aFile)", "signatureAfterChange": "     private void process(File aFile)", "diff": ["-                    0,", "+                    re.getLine(),", "+                    re.getColumn(),", "+        catch (TokenStreamRecognitionException tre) {", "+            Utils.getExceptionLogger()", "+                .debug(\"TokenStreamRecognitionException occured.\", tre);", "+            final RecognitionException re = tre.recog;", "+            if (re != null) {", "+                getMessageCollector().add(", "+                    new LocalizedMessage(", "+                        re.getLine(),", "+                        re.getColumn(),", "+                        Defn.CHECKSTYLE_BUNDLE,", "+                        \"general.exception\",", "+                        new String[] {re.getMessage()},", "+                        this.getClass()));", "+            }", "+            else {", "+                getMessageCollector().add(", "+                    new LocalizedMessage(", "+                        0,", "+                        Defn.CHECKSTYLE_BUNDLE,", "+                        \"general.exception\",", "+                        new String[] {re.getMessage()},", "+                        this.getClass()));", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29a4de8b1ee2451a783141524b5ad731", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0531d890bb92d1e8b02f2ea69bd6686a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java", "commitBeforeChange": "ff2f5fe363c60cede0af7fc4eb2e2936a765b9be", "commitAfterChange": "2b36d7dec160fdd7f5a92366709ddc2d586ebef5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void beginTree()", "signatureAfterChange": "     public void beginTree()", "diff": ["-        if (mHeaderLines != null) {", "+        if (mHeaderLines == null) {", "+            log(1, \"Unable to check as missing lines to check.\");", "+            return;", "+        }", "-            final String[] lines = getLines();", "+        final String[] lines = getLines();", "-            if (mHeaderLines.length > lines.length) {", "-                log(1, \"header.missing\");", "-            }", "-            else {", "-                for (int i = 0; i < mHeaderLines.length; i++) {", "-                    // skip lines we are meant to ignore", "-                    if (isIgnoreLine(i + 1)) {", "-                        continue;", "-                    }", "+        if (mHeaderLines.length > lines.length) {", "+            log(1, \"header.missing\");", "+        }", "+        else {", "+            for (int i = 0; i < mHeaderLines.length; i++) {", "+                // skip lines we are meant to ignore", "+                if (isIgnoreLine(i + 1)) {", "+                    continue;", "+                }", "-                    if (!isMatch(i)) {", "-                        log(i + 1, \"header.mismatch\", mHeaderLines[i]);", "-                        break; // stop checking", "-                    }", "+                if (!isMatch(i)) {", "+                    log(i + 1, \"header.mismatch\", mHeaderLines[i]);", "+                    break; // stop checking"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "353723711887af4bc829a9dea2087db6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java", "commitBeforeChange": "46146514c3c40ee8077578ad39f1289395afb3de", "commitAfterChange": "0340dcb26d5db9625e8e1f093f39165b8bdb18bf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "     public void beginTree(DetailAST aRootAST)", "diff": ["-    /** @see com.puppycrawl.tools.checkstyle.api.Check */", "-    public void beginTree(DetailAST aRootAST)", "-    {", "-", "-        final String[] lines = getLines();", "-", "-        if (mHeaderLines.length > lines.length) {", "-            log(1, \"header.missing\");", "-        }", "-        else {", "-            for (int i = 0; i < mHeaderLines.length; i++) {", "-                // skip lines we are meant to ignore", "-                if (isIgnoreLine(i + 1)) {", "-                    continue;", "-                }", "-", "-                if (!isMatch(i)) {", "-                    log(i + 1, \"header.mismatch\", mHeaderLines[i]);", "-                    break; // stop checking", "-                }", "-            }", "-        }", "-    }", "+    /** {@inheritDoc} */", "+    public void beginTree(DetailAST aRootAST)", "+        if (getHeaderLines().length > getLines().length) {", "+            log(1, \"header.missing\");", "+        }", "+        else {", "+            for (int i = 0; i < getHeaderLines().length; i++) {", "+                if (!isMatch(i)) {", "+                    log(i + 1, \"header.mismatch\", getHeaderLines()[i]);", "+                    break; // stop checking", "+                }", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec6af9b6dda64aca1368b6c35745346c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ba0383e76f113ca222dd371114a731f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "fff24e89001ce2ad9c30d1f573639cd640183669", "commitAfterChange": "d877cb15cfeae5f06a5d546dcc860c2aa32caac4", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private static DetailAST getAnnotationTarget(DetailAST ast)", "signatureAfterChange": "     private static DetailAST getAnnotationTarget(DetailAST ast)", "diff": ["-        if (parentAST != null) {", "-            switch (parentAST.getType()) {", "-                case TokenTypes.MODIFIERS:", "-                case TokenTypes.ANNOTATIONS:", "-                    parentAST = parentAST.getParent();", "-                    if (parentAST != null) {", "-                        switch (parentAST.getType()) {", "-                            case TokenTypes.ANNOTATION_DEF:", "-                            case TokenTypes.PACKAGE_DEF:", "-                            case TokenTypes.CLASS_DEF:", "-                            case TokenTypes.INTERFACE_DEF:", "-                            case TokenTypes.ENUM_DEF:", "-                            case TokenTypes.ENUM_CONSTANT_DEF:", "-                            case TokenTypes.CTOR_DEF:", "-                            case TokenTypes.METHOD_DEF:", "-                            case TokenTypes.PARAMETER_DEF:", "-                            case TokenTypes.VARIABLE_DEF:", "-                            case TokenTypes.ANNOTATION_FIELD_DEF:", "-                            case TokenTypes.TYPE:", "-                            case TokenTypes.LITERAL_NEW:", "-                            case TokenTypes.LITERAL_THROWS:", "-                            case TokenTypes.TYPE_ARGUMENT:", "-                            case TokenTypes.IMPLEMENTS_CLAUSE:", "-                            case TokenTypes.DOT:", "-                                targetAST = parentAST;", "-                                break;", "-", "-                            default:", "-                                // unexpected target type", "-                        }", "-                    }", "-                    break;", "-", "-                default:", "-                    // unexpected container type", "-            }", "+        switch (parentAST.getType()) {", "+            case TokenTypes.MODIFIERS:", "+            case TokenTypes.ANNOTATIONS:", "+                parentAST = parentAST.getParent();", "+                switch (parentAST.getType()) {", "+                    case TokenTypes.ANNOTATION_DEF:", "+                    case TokenTypes.PACKAGE_DEF:", "+                    case TokenTypes.CLASS_DEF:", "+                    case TokenTypes.INTERFACE_DEF:", "+                    case TokenTypes.ENUM_DEF:", "+                    case TokenTypes.ENUM_CONSTANT_DEF:", "+                    case TokenTypes.CTOR_DEF:", "+                    case TokenTypes.METHOD_DEF:", "+                    case TokenTypes.PARAMETER_DEF:", "+                    case TokenTypes.VARIABLE_DEF:", "+                    case TokenTypes.ANNOTATION_FIELD_DEF:", "+                    case TokenTypes.TYPE:", "+                    case TokenTypes.LITERAL_NEW:", "+                    case TokenTypes.LITERAL_THROWS:", "+                    case TokenTypes.TYPE_ARGUMENT:", "+                    case TokenTypes.IMPLEMENTS_CLAUSE:", "+                    case TokenTypes.DOT:", "+                        targetAST = parentAST;", "+                        break;", "+                    default:", "+                        // unexpected target type", "+                }", "+                break;", "+            default:", "+                // unexpected container type"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "887a896964514caf16c068d5e3963ab8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "01d27913a71c29d6a769ed98ca7dd4ba01fe31eb", "commitAfterChange": "4cbd709c019cf1b69796858506d673f7b66d37c7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public int[] getDefaultTokens()", "signatureAfterChange": "     public int[] getDefaultTokens()", "diff": ["-            RCURLY,            // '}'", "-            QUESTION,          // '?'", "-            COLON,             // ':' TODO: dont flag after \"case\"", "-            ASSIGN,            // '='", "-            EQUAL,             // \"==\"", "-            NOT_EQUAL,         // \"!=\"", "-            DIV,               // '/'", "-            DIV_ASSIGN,        // \"/=\"", "-            PLUS,              //' +' (unaray plus is UNARY_PLUS)", "-            PLUS_ASSIGN,       // \"+=\"", "-            MINUS,             // '-' (unary minus is UNARY_MINUS)", "-            MINUS_ASSIGN,      //\"-=\"", "-            STAR,              // '*'", "-            STAR_ASSIGN,       // \"*=\"", "-            MOD,               // '%'", "-            MOD_ASSIGN,        // \"%=\"", "-            SR,                // \">>\"", "-            SR_ASSIGN,         // \">>=\"", "-            BSR,               // \">>>\"", "-            BSR_ASSIGN,        // \">>>=\"", "-            GE,                // \">=\"", "-            GT,                // \">\"", "-            SL,                // \"<<\"", "-            SL_ASSIGN,         // \"<<=\"", "-            LE,                // \"<=\"", "-            LT,                // '<'", "-            BXOR,              // '^'", "-            BXOR_ASSIGN,       // \"^=\"", "-            BOR,               // '|'", "-            BOR_ASSIGN,        // \"|=\"", "-            LOR,               // \"||\"", "-            BAND,              // '&'", "-            BAND_ASSIGN,       // \"&=\"", "-            LAND,              // \"&&\"", "-            LITERAL_catch,", "-            LITERAL_do,", "-            LITERAL_else,", "-            LITERAL_finally,", "-            LITERAL_for,", "-            LITERAL_if,", "-            LITERAL_return,", "-            LITERAL_synchronized,", "-            LITERAL_try,", "-            LITERAL_while,", "-            ASSERT                // TODO: why is it not LITERAL_assert?", "+            TokenTypes.RCURLY,            // '}'", "+            TokenTypes.QUESTION,          // '?'", "+            TokenTypes.COLON,             // ':' TODO: dont flag after \"case\"", "+            TokenTypes.ASSIGN,            // '='", "+            TokenTypes.EQUAL,             // \"==\"", "+            TokenTypes.NOT_EQUAL,         // \"!=\"", "+            TokenTypes.DIV,               // '/'", "+            TokenTypes.DIV_ASSIGN,        // \"/=\"", "+            TokenTypes.PLUS,              //' +' (unaray plus is UNARY_PLUS)", "+            TokenTypes.PLUS_ASSIGN,       // \"+=\"", "+            TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)", "+            TokenTypes.MINUS_ASSIGN,      //\"-=\"", "+            TokenTypes.STAR,              // '*'", "+            TokenTypes.STAR_ASSIGN,       // \"*=\"", "+            TokenTypes.MOD,               // '%'", "+            TokenTypes.MOD_ASSIGN,        // \"%=\"", "+            TokenTypes.SR,                // \">>\"", "+            TokenTypes.SR_ASSIGN,         // \">>=\"", "+            TokenTypes.BSR,               // \">>>\"", "+            TokenTypes.BSR_ASSIGN,        // \">>>=\"", "+            TokenTypes.GE,                // \">=\"", "+            TokenTypes.GT,                // \">\"", "+            TokenTypes.SL,                // \"<<\"", "+            TokenTypes.SL_ASSIGN,         // \"<<=\"", "+            TokenTypes.LE,                // \"<=\"", "+            TokenTypes.LT,                // '<'", "+            TokenTypes.BXOR,              // '^'", "+            TokenTypes.BXOR_ASSIGN,       // \"^=\"", "+            TokenTypes.BOR,               // '|'", "+            TokenTypes.BOR_ASSIGN,        // \"|=\"", "+            TokenTypes.LOR,               // \"||\"", "+            TokenTypes.BAND,              // '&'", "+            TokenTypes.BAND_ASSIGN,       // \"&=\"", "+            TokenTypes.LAND,              // \"&&\"", "+            TokenTypes.LITERAL_CATCH,", "+            TokenTypes.LITERAL_DO,", "+            TokenTypes.LITERAL_ELSE,", "+            TokenTypes.LITERAL_FINALLY,", "+            TokenTypes.LITERAL_FOR,", "+            TokenTypes.LITERAL_IF,", "+            TokenTypes.LITERAL_RETURN,", "+            TokenTypes.LITERAL_SYNCHRONIZED,", "+            TokenTypes.LITERAL_TRY,", "+            TokenTypes.LITERAL_WHILE,", "+            TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?"]}]}
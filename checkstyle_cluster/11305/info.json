{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1878d29b8399d9727376a87cc8fa152d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57ff7c0cc1767539266e5794e3499a18", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_IF:", "-                leaveLiteralIf(ast);", "-                break;", "-            default:", "-                throw new IllegalStateException(ast.toString());", "+        if (ast.getType() == TokenTypes.LITERAL_IF) {", "+            leaveLiteralIf(ast);", "+        }", "+        else {", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "895ad14d414351880522da2522a561b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java", "commitBeforeChange": "4f9b3cdad8c3205a9d9c2529aee5fc674cc6a34b", "commitAfterChange": "193474f51804bf6255bfcec58befcb1dc8ff8329", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_IF:", "-                visitLiteralIf(ast);", "-                break;", "-            default:", "-                throw new IllegalStateException(ast.toString());", "+        if (ast.getType() == TokenTypes.LITERAL_IF) {", "+            visitLiteralIf(ast);", "+        }", "+        else {", "+            throw new IllegalStateException(ast.toString());"]}]}
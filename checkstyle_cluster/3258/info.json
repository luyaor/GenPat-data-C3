{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80528353a2fc178eca25978e0c7c1aec", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eada5334b5c39334745e769d9136367", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int process(List<File> aFiles)", "signatureAfterChange": "     public int process(List<File> aFiles)", "diff": ["+        // Prepare to start", "-            fsc.process(aFiles);", "+            fsc.beginProcessing();", "+        }", "+", "+        // Process each file", "+        for (File f : aFiles) {", "+            final String fileName = f.getAbsolutePath();", "+            fireFileStarted(fileName);", "+            final TreeSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "+            try {", "+                // TODO: Need to use , getCharset()", "+                final String[] lines = Utils.getLines(f.getAbsolutePath());", "+                final List<String> theLines = Lists.newArrayList(lines);", "+                for (FileSetCheck fsc : mFileSetChecks) {", "+                    fileMessages.addAll(fsc.process(f, theLines));", "+                }", "+            }", "+            catch (final FileNotFoundException fnfe) {", "+                Utils.getExceptionLogger().debug(", "+                        \"FileNotFoundException occured.\", fnfe);", "+                fileMessages.add(new LocalizedMessage(0,", "+                        Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,", "+                        null, this.getClass(), null));", "+            }", "+            catch (final IOException ioe) {", "+                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);", "+                fileMessages.add(new LocalizedMessage(0,", "+                        Defn.CHECKSTYLE_BUNDLE, \"general.exception\",", "+                        new String[] {ioe.getMessage()}, null, this.getClass(),", "+                        null));", "+            }", "+            fireErrors(fileName, fileMessages);", "+            fireFileFinished(fileName);", "+        }", "+", "+        // Finish up", "+        for (FileSetCheck fsc : mFileSetChecks) {", "+            // They may also log!!!", "+            fsc.finishProcessing();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fb2961e1ce73a56d4a8762a2d81905e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void process(File aFile)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-     **/", "-    private void process(File aFile)", "+    @Override", "+    protected void processFiltered(File aFile, List<String> aLines)", "-            getMessageDispatcher().fireFileStarted(fileName);", "-            final String[] lines = Utils.getLines(fileName, getCharset());", "-            final FileContents contents = new FileContents(fileName, lines);", "+            final FileContents contents = new FileContents(fileName, aLines", "+                    .toArray(new String[aLines.size()]));", "-        }", "-        catch (final FileNotFoundException fnfe) {", "-            Utils.getExceptionLogger()", "-                .debug(\"FileNotFoundException occured.\", fnfe);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    0,", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.fileNotFound\",", "-                    null,", "-                    getId(),", "-                    this.getClass(), null));", "-        }", "-        catch (final IOException ioe) {", "-            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    0,", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.exception\",", "-                    new String[] {ioe.getMessage()},", "-                    getId(),", "-                    this.getClass(), null));", "-        else {", "-            fireErrors(fileName);", "-        }", "-", "-        getMessageDispatcher().fireFileFinished(fileName);"]}]}
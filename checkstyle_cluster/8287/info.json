{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10be64e491717ea20b2275f127b2d24d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27cc77f9ff09370be3e0d9a44fff3d49", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault()         throws Exception", "signatureAfterChange": "     @Test     public void testDefault()         throws Exception", "diff": ["-            \"9:15: Assignment of parameter 'field' is not allowed.\",", "-            \"10:15: Assignment of parameter 'field' is not allowed.\",", "-            \"12:14: Assignment of parameter 'field' is not allowed.\",", "-            \"20:30: Assignment of parameter 'field1' is not allowed.\",", "+            \"9:15: \" + getCheckMessage(MSG_KEY, \"field\"),", "+            \"10:15: \" + getCheckMessage(MSG_KEY, \"field\"),", "+            \"12:14: \" + getCheckMessage(MSG_KEY, \"field\"),", "+            \"20:30: \" + getCheckMessage(MSG_KEY, \"field1\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cbba3164fa222fdf2907d35db73304f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testMemberExcludes()         throws Exception", "signatureAfterChange": "      @Test     public void testMemberExcludes()         throws Exception", "diff": ["-            \"25: Using a static member import should be avoided - javax.swing.WindowConstants.*.\",", "-            \"26: Using a static member import should be avoided - javax.swing.WindowConstants.*.\",", "-            \"27: Using a static member import should be avoided - java.io.File.createTempFile.\",", "-            \"28: Using a static member import should be avoided - java.io.File.pathSeparator.\",", "+            \"25: \" + getCheckMessage(MSG_KEY, \"javax.swing.WindowConstants.*\"),", "+            \"26: \" + getCheckMessage(MSG_KEY, \"javax.swing.WindowConstants.*\"),", "+            \"27: \" + getCheckMessage(MSG_KEY, \"java.io.File.createTempFile\"),", "+            \"28: \" + getCheckMessage(MSG_KEY, \"java.io.File.pathSeparator\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98f509639b3830faf5717633818ab3c1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testMultipleTypes() throws Exception", "signatureAfterChange": "      @Test     public void testMultipleTypes() throws Exception", "diff": ["-            \"7:11: Catching 'RuntimeException' is not allowed.\",", "-            \"10:11: Catching 'RuntimeException' is not allowed.\",", "-            \"13:11: Catching 'RuntimeException' is not allowed.\",", "-            \"16:11: Catching 'RuntimeException' is not allowed.\",", "+            \"7:11: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),", "+            \"10:11: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),", "+            \"13:11: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),", "+            \"16:11: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "add0daa73160caac4ed7efa26561fd3d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testIllegalClassNames() throws Exception", "signatureAfterChange": "      @Test     public void testIllegalClassNames() throws Exception", "diff": ["-            \"7:11: Catching 'Exception' is not allowed.\",", "-            \"8:11: Catching 'Throwable' is not allowed.\",", "-            \"15:11: Catching 'java.lang.Exception' is not allowed.\",", "-            \"16:11: Catching 'java.lang.Throwable' is not allowed.\",", "+            \"7:11: \" + getCheckMessage(MSG_KEY, \"Exception\"),", "+            \"8:11: \" + getCheckMessage(MSG_KEY, \"Throwable\"),", "+            \"15:11: \" + getCheckMessage(MSG_KEY, \"java.lang.Exception\"),", "+            \"16:11: \" + getCheckMessage(MSG_KEY, \"java.lang.Throwable\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dde0efe02a61279f2f65033ccb6cf5ed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java", "commitBeforeChange": "27149f3504a2f350b74f456a9bffbae76a460060", "commitAfterChange": "5ede09997c283b4c418f0f540848e006be04fa87", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testIt() throws Exception", "signatureAfterChange": "     @Test     public void testIt() throws Exception", "diff": ["-            \"161: Comment matches to-do format 'FIXME:'.\",", "-            \"162: Comment matches to-do format 'FIXME:'.\",", "-            \"163: Comment matches to-do format 'FIXME:'.\",", "-            \"167: Comment matches to-do format 'FIXME:'.\",", "+            \"161: \" + getCheckMessage(MSG_KEY, \"FIXME:\"),", "+            \"162: \" + getCheckMessage(MSG_KEY, \"FIXME:\"),", "+            \"163: \" + getCheckMessage(MSG_KEY, \"FIXME:\"),", "+            \"167: \" + getCheckMessage(MSG_KEY, \"FIXME:\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f060de824c6c241e19c3923e6184a40a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testCustomTokensLineWrapping()         throws Exception", "signatureAfterChange": "      @Test     public void testCustomTokensLineWrapping()         throws Exception", "diff": ["-            \"6: import statement should not be line-wrapped.\",", "-            \"10: CLASS_DEF statement should not be line-wrapped.\",", "-            \"13: METHOD_DEF statement should not be line-wrapped.\",", "-            \"20: ENUM_DEF statement should not be line-wrapped.\",", "+            \"6: \" + getCheckMessage(MSG_KEY, \"import\"),", "+            \"10: \" + getCheckMessage(MSG_KEY, \"CLASS_DEF\"),", "+            \"13: \" + getCheckMessage(MSG_KEY, \"METHOD_DEF\"),", "+            \"20: \" + getCheckMessage(MSG_KEY, \"ENUM_DEF\"),"]}]}
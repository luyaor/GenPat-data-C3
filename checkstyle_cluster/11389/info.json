{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7abf8007db3319691f628a3e2def2ddd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4490749131775f24e1e527310516bb93", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java", "commitBeforeChange": "d2af4accdde3eac0a2103353f490e97bf62f61d2", "commitAfterChange": "d4b933799af120cf4a8490db98f396b6348430e9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setOption(String aOption)         throws ConversionException", "signatureAfterChange": "     public void setOption(String aOption) throws ConversionException", "diff": ["-    public void setOption(String aOption)", "-        throws ConversionException", "+    public void setOption(String aOption) throws ConversionException", "-        mOption = mOption.decode(aOption);", "-        if (mOption == null) {", "-            throw new ConversionException(\"unable to parse \" + aOption);", "+        try {", "+            mOption = Enum.valueOf(mOptionClass, aOption.trim().toUpperCase());", "+        }", "+        catch (IllegalArgumentException iae) {", "+            throw new ConversionException(\"unable to parse \" + aOption, iae);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54050740cb6ab2af354306391a15fbfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "d2af4accdde3eac0a2103353f490e97bf62f61d2", "commitAfterChange": "d4b933799af120cf4a8490db98f396b6348430e9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setLineSeparator(String aLineSeparator)", "signatureAfterChange": "     public void setLineSeparator(String aLineSeparator)", "diff": ["-        final AbstractOption option =", "-            LineSeparatorOption.SYSTEM.decode(aLineSeparator);", "-", "-        if (option == null) {", "-            throw new ConversionException(\"unable to parse \" + aLineSeparator);", "+        try {", "+            mLineSeparator =", "+                Enum.valueOf(LineSeparatorOption.class, aLineSeparator.trim()", "+                    .toUpperCase());", "-", "-        mLineSeparator = (LineSeparatorOption) option;", "+        catch (IllegalArgumentException iae) {", "+            throw new ConversionException(\"unable to parse \" + aLineSeparator,", "+                iae);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ff68a8cbbfff7289623302dc56aa3d1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setOption(String aOption) throws ConversionException", "signatureAfterChange": "     public void setOption(String optionStr) throws ConversionException", "diff": ["-    public void setOption(String aOption) throws ConversionException", "+    public void setOption(String optionStr) throws ConversionException", "-            mOption = Enum.valueOf(mOptionClass, aOption.trim().toUpperCase());", "+            option = Enum.valueOf(optionClass, optionStr.trim().toUpperCase());", "-            throw new ConversionException(\"unable to parse \" + aOption, iae);", "+            throw new ConversionException(\"unable to parse \" + option, iae);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f7368669aef9baeb2904c638ba7dbc1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setLineSeparator(String aLineSeparator)", "signatureAfterChange": "     public void setLineSeparator(String lineSeparatorParam)", "diff": ["-    public void setLineSeparator(String aLineSeparator)", "+    public void setLineSeparator(String lineSeparatorParam)", "-            mLineSeparator =", "-                Enum.valueOf(LineSeparatorOption.class, aLineSeparator.trim()", "+            lineSeparator =", "+                Enum.valueOf(LineSeparatorOption.class, lineSeparatorParam.trim()", "-            throw new ConversionException(\"unable to parse \" + aLineSeparator,", "+            throw new ConversionException(\"unable to parse \" + lineSeparatorParam,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a921e59c2c39d23fb75bae5d6c31e739", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private <T extends Enum<T>> T getOption(final Class<T> aEnumClass,         final String aString)", "signatureAfterChange": "     private <T extends Enum<T>> T getOption(final Class<T> enuclass,         final String string)", "diff": ["-    private <T extends Enum<T>> T getOption(final Class<T> aEnumClass,", "-        final String aString)", "+    private <T extends Enum<T>> T getOption(final Class<T> enuclass,", "+        final String string)", "-            return Enum.valueOf(aEnumClass, aString.trim().toUpperCase());", "+            return Enum.valueOf(enuclass, string.trim().toUpperCase());", "-            throw new ConversionException(\"unable to parse \" + aString, iae);", "+            throw new ConversionException(\"unable to parse \" + string, iae);"]}]}
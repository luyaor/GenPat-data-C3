{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fc3609a9dec56c4a5c37ec1fe1aa36f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39c5d088d47d3f4a017b827a1bc842c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderInfo.java", "commitBeforeChange": "fc8a5ae78cffc8f6d5951a72fc722c52dedc1d04", "commitAfterChange": "bf16d371dab210594755d04afc4697269ed088c0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     protected void postprocessHeaderLines()", "signatureAfterChange": "      @Override     protected void postprocessHeaderLines()", "diff": ["-        final String[] headerLines = getHeaderLines();", "-        if (headerLines != null) {", "-            mHeaderRegexps = new Pattern[headerLines.length];", "-            for (int i = 0; i < headerLines.length; i++) {", "-                try {", "-                    // TODO: Not sure if cache in Utils is still necessary", "-                    mHeaderRegexps[i] = Utils.getPattern(headerLines[i]);", "-                }", "-                catch (final PatternSyntaxException ex) {", "-                    throw new ConversionException(", "-                            \"line \" + (i + 1) + \" in header specification\"", "-                            + \" is not a regular expression\");", "-                }", "+        final List<String> headerLines = getHeaderLines();", "+        mHeaderRegexps.clear();", "+        for (String line : headerLines) {", "+            try {", "+                // TODO: Not sure if cache in Utils is still necessary", "+                mHeaderRegexps.add(Utils.getPattern(line));", "+            }", "+            catch (final PatternSyntaxException ex) {", "+                throw new ConversionException(\"line \"", "+                        + (mHeaderRegexps.size() + 1)", "+                        + \" in header specification\"", "+                        + \" is not a regular expression\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49bfc949fa5e002998244f367dd34f1a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "3296ba06ac6ae5ad8c864ada15cec91d058785d4", "commitAfterChange": "6f1f7bd3fdcca84404e97964b3e48de6db5024ec", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void initHeaderRegexps()", "signatureAfterChange": "     protected RegexpHeaderInfo getRegexpHeaderInfo()", "diff": ["+    protected RegexpHeaderInfo getRegexpHeaderInfo()", "+        return (RegexpHeaderInfo) getHeaderInfo();", "-     */", "-    private void initHeaderRegexps()", "-    {", "-        final String[] headerLines = getHeaderLines();", "-        if (headerLines != null) {", "-            mHeaderRegexps = new Pattern[headerLines.length];", "-            for (int i = 0; i < headerLines.length; i++) {", "-                try {", "-                    // TODO: Not sure if chache in Utils is still necessary", "-                    mHeaderRegexps[i] = Utils.getPattern(headerLines[i]);", "-                }", "-                catch (final PatternSyntaxException ex) {", "-                    throw new ConversionException(", "-                            \"line \" + i + \" in header specification\"", "-                            + \" is not a regular expression\");", "-                }", "-            }", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9c1ae160d85df9d2f07f5759aa07ca6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "9cff1673f1d42910c654e0af5365d68591f104f0", "commitAfterChange": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected RegexpHeaderInfo getRegexpHeaderInfo()", "signatureAfterChange": "      @Override     protected void postprocessHeaderLines()", "diff": ["-     */", "-    protected RegexpHeaderInfo getRegexpHeaderInfo()", "-    {", "-        return (RegexpHeaderInfo) getHeaderInfo();", "-    }", "+", "+    @Override", "+    protected void postprocessHeaderLines()", "+    {", "+        final List<String> headerLines = getHeaderLines();", "+        mHeaderRegexps.clear();", "+        for (String line : headerLines) {", "+            try {", "+                // TODO: Not sure if cache in Utils is still necessary", "+                mHeaderRegexps.add(Utils.getPattern(line));", "+            }", "+            catch (final PatternSyntaxException ex) {", "+                throw new ConversionException(\"line \"", "+                        + (mHeaderRegexps.size() + 1)", "+                        + \" in header specification\"", "+                        + \" is not a regular expression\");", "+            }", "+        }", "+    }"]}]}
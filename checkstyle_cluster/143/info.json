{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fb5b070df801d788570bad68de0c8e5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33379be750df37d2569143349502d9be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "bd503e1576ded224169c1f15b9ca6cb8d08f9cb2", "commitAfterChange": "f2b01a44a216e88957eb6cb22e4b0e39429a6c84", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected AuditListener[] getListeners()         throws ClassNotFoundException, InstantiationException,         IllegalAccessException, IOException", "signatureAfterChange": "     protected AuditListener[] getListeners()         throws ClassNotFoundException, InstantiationException,         IllegalAccessException, IOException", "diff": ["-        final int listenerCount = Math.max(1, mFormatters.size());", "+        final int formatterCount = Math.max(1, mFormatters.size());", "+        final int listenerCount = mCustomListeners.size();", "-        final AuditListener[] listeners = new AuditListener[listenerCount];", "+        final AuditListener[] listeners =", "+            new AuditListener[formatterCount + listenerCount];", "+        // formatters", "-            return listeners;", "-", "-        for (int i = 0; i < listeners.length; i++) {", "-            final Formatter f = (Formatter) mFormatters.get(i);", "-            listeners[i] = f.createListener(this);", "+        else {", "+            for (int i = 0; i < formatterCount; i++) {", "+                final Formatter f = (Formatter) mFormatters.get(i);", "+                listeners[i] = f.createListener(this);", "+            }", "+        }", "+        //custom listeners", "+        for (int i = 0; i < listenerCount; i++) {", "+            final Listener listener = (Listener) mCustomListeners.get(i);", "+            listeners[formatterCount + i] = createCustomListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98d074bf650e4471261fdd9d426adc5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "65989e76a40bf085059ee2bf9c695c6b45a771fb", "commitAfterChange": "fca8c918043974fcf6cc59e5d4161ada0b7c4c76", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "     void reportCComment(int aStartLineNo, int aStartColNo,                                int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     void reportCComment(int aStartLineNo, int aStartColNo,                         int aEndLineNo, int aEndColNo)", "diff": ["-                               int aEndLineNo, int aEndColNo)", "+                        int aEndLineNo, int aEndColNo)", "+        final String[] cc = extractCComment(aStartLineNo, aStartColNo,", "+                                            aEndLineNo, aEndColNo);", "+", "+        // Remember if possible Javadoc comment", "-            final String[] cc =", "-                extractCComment(aStartLineNo, aStartColNo,", "-                                aEndLineNo, aEndColNo);", "+        }", "+", "+        // Check for to-do comments", "+        for (int i = 0; i < cc.length; i++) {", "+            if (mConfig.getTodoRegexp().match(cc[i])) {", "+                log(aStartLineNo + i,", "+                    \"Comment matches to-do format '\" + mConfig.getTodoPat()", "+                    + \"'.\");", "+            }"]}]}
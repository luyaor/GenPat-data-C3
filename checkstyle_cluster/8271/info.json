{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "496ed811c06c637aaca85102ca8fd33b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ba985440a48dad668cd165ee5ebd6a0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheckTest.java", "commitBeforeChange": "a49a54133714df69aaad1c0730f0d01b24318dbe", "commitAfterChange": "65865d1adcf6e1579b7323d56117186db1ad96eb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void testTypeNamesForZeroPermittedCapitalLetter() throws Exception", "signatureAfterChange": "      @Test     public void testTypeNamesForZeroPermittedCapitalLetter() throws Exception", "diff": ["-        warningMessage = getCheckMessage(MSG_KEY, expectedCapitalCount);", "-            \"3: \" + warningMessage,", "-            \"6: \" + warningMessage,", "-            \"9: \" + warningMessage,", "-            \"12: \" + warningMessage,", "-            \"32: \" + warningMessage,", "-            \"37: \" + warningMessage,", "-            \"38: \" + warningMessage,", "-            \"39: \" + warningMessage,", "-            \"40: \" + warningMessage,", "-            \"46: \" + warningMessage,", "-            \"47: \" + warningMessage,", "-            \"48: \" + warningMessage,", "-            \"49: \" + warningMessage,", "-            \"57: \" + warningMessage,", "-            \"58: \" + warningMessage,", "-            \"59: \" + warningMessage,", "-            \"60: \" + warningMessage,", "-            \"61: \" + warningMessage,", "-            \"66: \" + warningMessage,", "-            \"72: \" + warningMessage,", "-            \"78: \" + warningMessage,", "-            \"84: \" + warningMessage,", "-            \"88: \" + warningMessage,", "-            \"90: \" + warningMessage,", "-            \"98: \" + warningMessage,", "+            \"3: \" + getWarningMessage(\"IIIInputAbstractClassName\", expectedCapitalCount),", "+            \"6: \" + getWarningMessage(\"NonAAAAbstractClassName\", expectedCapitalCount),", "+            \"9: \" + getWarningMessage(\"FactoryWithBADNAme\", expectedCapitalCount),", "+            \"12: \" + getWarningMessage(\"AbstractCLASSName\", expectedCapitalCount),", "+            \"32: \" + getWarningMessage(\"AbstractINNERRClass\", expectedCapitalCount),", "+            \"37: \" + getWarningMessage(\"WellNamedFACTORY\", expectedCapitalCount),", "+            \"38: \" + getWarningMessage(\"marazmaticMETHODName\", expectedCapitalCount),", "+            \"39: \" + getWarningMessage(\"marazmaticVARIABLEName\", expectedCapitalCount),", "+            \"40: \" + getWarningMessage(\"MARAZMATICVariableName\", expectedCapitalCount),", "+            \"46: \" + getWarningMessage(\"RIGHT\", expectedCapitalCount),", "+            \"47: \" + getWarningMessage(\"LEFT\", expectedCapitalCount),", "+            \"48: \" + getWarningMessage(\"UP\", expectedCapitalCount),", "+            \"49: \" + getWarningMessage(\"DOWN\", expectedCapitalCount),", "+            \"57: \" + getWarningMessage(\"NonAAAAbstractClassName2\", expectedCapitalCount),", "+            \"58: \" + getWarningMessage(\"serialNUMBER\", expectedCapitalCount),", "+            \"59: \" + getWarningMessage(\"s1erialNUMBER\", expectedCapitalCount),", "+            \"60: \" + getWarningMessage(\"s2erialNUMBER\", expectedCapitalCount),", "+            \"61: \" + getWarningMessage(\"s3erialNUMBER\", expectedCapitalCount),", "+            \"66: \" + getWarningMessage(\"VALUEEEE\", expectedCapitalCount),", "+            \"72: \" + getWarningMessage(\"VALUEEEE\", expectedCapitalCount),", "+            \"78: \" + getWarningMessage(\"VALUEEEE\", expectedCapitalCount),", "+            \"84: \" + getWarningMessage(\"VALUEEEE\", expectedCapitalCount),", "+            \"88: \" + getWarningMessage(\"FIleNameFormatException\", expectedCapitalCount),", "+            \"90: \" + getWarningMessage(\"serialVersionUID\", expectedCapitalCount),", "+            \"98: \" + getWarningMessage(\"userID\", expectedCapitalCount),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "111ab482638b3f35f38bbbb31554751f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testEqualsWithDefault() throws Exception", "signatureAfterChange": "     @Test     public void testEqualsWithDefault() throws Exception", "diff": ["-            \"18:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"20:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"22:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"24:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"26:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"28:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"37:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"39:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"41:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"43:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"45:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"47:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"57:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"59:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"61:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"63:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"65:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"67:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"69:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"71:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"73:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"75:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"77:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "-            \"79:27: String literal expressions should be on the left side of an equalsIgnoreCase comparison.\",", "+            \"18:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"20:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"22:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"24:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"26:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"28:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"37:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"39:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"41:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"43:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"45:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"47:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"57:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"59:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"61:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"63:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"65:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"67:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"69:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"71:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"73:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"75:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"77:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),", "+            \"79:27: \" + getCheckMessage(MSG_EQUALS_IGNORE_CASE_AVOID_NULL),"]}]}
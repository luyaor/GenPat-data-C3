{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ea6f6b8cc6c80bec60e519e06220493", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42bd48ea7e531cee682910cbd5b80a5c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "e380ac8df92c051d843d380d5e8a6fe90af9df9d", "commitAfterChange": "ab2f93f9bf61816d84154e636d32c81c05854e24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static AuditListener createListener(CommandLine line,                                                 OutputStream out,                                                 boolean closeOut)             throws UnsupportedEncodingException", "signatureAfterChange": "     private static AuditListener createListener(String format,                                                 OutputStream out,                                                 boolean closeOut)             throws UnsupportedEncodingException, CheckstyleException", "diff": ["-    private static AuditListener createListener(CommandLine line,", "+    private static AuditListener createListener(String format,", "-            throws UnsupportedEncodingException", "+            throws UnsupportedEncodingException, CheckstyleException", "-        final String format =", "-            line.hasOption(\"f\") ? line.getOptionValue(\"f\") : \"plain\";", "-", "-        if (\"xml\".equals(format)) {", "-            listener = new XMLLogger(out, closeOut);", "+        switch (format) {", "+            case \"xml\":", "+                listener = new XMLLogger(out, closeOut);", "+                break;", "+", "+            case \"plain\":", "+                listener = new DefaultLogger(out, closeOut);", "+                break;", "+", "+            default:", "+                throw new CheckstyleException(\"Invalid output format. Found '\" + format", "+                        + \"' but expected 'plain' or 'xml'.\");", "-        else if (\"plain\".equals(format)) {", "-            listener = new DefaultLogger(out, closeOut);", "-        }", "-        else {", "-            System.out.println(\"Invalid format: (\" + format", "-                               + \"). Must be 'plain' or 'xml'.\");", "-            usage();", "-        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e708133cc16c7e0d8e9d38ea96ff1d3f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "a4e3e3c1af37c52f72fb4b5aaa0411ae6d53bd36", "commitAfterChange": "74566f21a2298d53f9c97935542fdb630ad5da87", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "signatureAfterChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "diff": ["-        final int type = statement.getType();", "-        if (type == TokenTypes.LITERAL_IF) {", "-            result = isSingleLineIf(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_FOR) {", "-            result = isSingleLineFor(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_DO) {", "-            result = isSingleLineDoWhile(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_WHILE) {", "-            result = isSingleLineWhile(statement);", "-        }", "-        else if (type == TokenTypes.LAMBDA) {", "-            result = isSingleLineLambda(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_CASE) {", "-            result = isSingleLineCase(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_DEFAULT) {", "-            result = isSingleLineDefault(statement);", "-        }", "-        else {", "-            result = isSingleLineElse(statement);", "+        switch (statement.getType()) {", "+            case TokenTypes.LITERAL_IF:", "+                result = isSingleLineIf(statement);", "+                break;", "+            case TokenTypes.LITERAL_FOR:", "+                result = isSingleLineFor(statement);", "+                break;", "+            case TokenTypes.LITERAL_DO:", "+                result = isSingleLineDoWhile(statement);", "+                break;", "+            case TokenTypes.LITERAL_WHILE:", "+                result = isSingleLineWhile(statement);", "+                break;", "+            case TokenTypes.LAMBDA:", "+                result = isSingleLineLambda(statement);", "+                break;", "+            case TokenTypes.LITERAL_CASE:", "+                result = isSingleLineCase(statement);", "+                break;", "+            case TokenTypes.LITERAL_DEFAULT:", "+                result = isSingleLineDefault(statement);", "+                break;", "+            default:", "+                result = isSingleLineElse(statement);", "+                break;"]}]}
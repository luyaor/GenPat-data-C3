{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d36f9237bb14735ba733b7dc2eaffd9c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ee8888cb27921b8fb80cd375022d42b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "41758923b8e4dcb9aae1ee967407826bda38d97b", "commitAfterChange": "e464c231eccec72f964131d9aeb5e49982c4b3bb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ExpressionHandler getHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "signatureAfterChange": "     public ExpressionHandler getHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "diff": ["-        int type = aAst.getType();", "+        if (aAst.getType() == TokenTypes.METHOD_CALL) {", "+            return createMethodCallHandler(aIndentCheck, aAst, aParent);", "+        }", "+", "+        Integer type = new Integer(aAst.getType());", "-            Constructor handlerCtor = (Constructor) mTypeHandlers.get(", "-                new Integer(type));", "+            Constructor handlerCtor = (Constructor) mTypeHandlers.get(type);", "+        ///CLOVER:OFF", "+        ///CLOVER:ON"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49d58fcc50c28d1229e5fe8d247d0d2b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "032b3801aa80bff181235ddd05244d07cc5f43f8", "commitAfterChange": "ef5716560b2b52a5fcd233ac9ad546a53749339f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["+        Properties properties = System.getProperties();", "+            }", "+            else if (\"-p\".equals(aArgs[i])) {", "+                properties = loadProperties(new File(aArgs[++i]));", "-            c = new Checker(new Configuration(System.getProperties(),", "-                                              System.out));", "+            c = new Checker(new Configuration(properties, System.out));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cd0624a7e1a1d10a8d16be3cb0e86b4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "b0240a0200663fbf1d3146d1aefe12207fdde4af", "commitAfterChange": "9aa72722de7b5a4ffb5d50945c7bce8b58f25e8e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "         public long[] convertLines(String[] aOriginalLines)", "signatureAfterChange": "         public long[] convertLines(String[] aOriginalLines)", "diff": ["+                boolean onlyEmptyLines = true;", "+                    if (aOriginalLines[i + j].length() > 0) {", "+                        onlyEmptyLines = false;", "+                    }", "-                ret[i] = blockChecksum;", "+                ret[i] = onlyEmptyLines ? IGNORE : blockChecksum;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de1335258f5c2f0d95cf58a9d3048514", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantModifierCheck.java", "commitBeforeChange": "a9ad125a4c6e2d0edc7a7a460ba3cd249b0a0817", "commitAfterChange": "9a05522373905e39aa764009d1c543092c14f691", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                    String modifier = ast.getText();", "-                    if (\"public\".equals(modifier)", "-                        || \"abstract\".equals(modifier))", "+", "+                    // javac does not allow final in interface methods", "+                    // hence no need to check that this is not a method", "+", "+                    final int type = ast.getType();", "+                    if (type == TokenTypes.LITERAL_PUBLIC", "+                            || type == TokenTypes.ABSTRACT", "+                            || type == TokenTypes.FINAL)", "-                        log(ast.getLineNo(),", "-                            ast.getColumnNo(),", "-                            \"redundantModifier\",", "-                            new String[] {modifier});", "+                            String modifier = ast.getText();", "+                            log(ast.getLineNo(),", "+                                    ast.getColumnNo(),", "+                                    \"redundantModifier\",", "+                                    new String[] {modifier});", "+                            break;", "+"]}]}
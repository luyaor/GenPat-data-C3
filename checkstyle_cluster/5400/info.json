{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf83e74f05c6ad92f95ec1d5a4b82ede", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f0dcfe9a67f4cceb77a0d57f07b69d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "6a30bbf32961d8bc124754b78abbfe2b32d3158f", "commitAfterChange": "5ace8fc09d4e301959a420f0f36de73c84f7a820", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          public void testEmptyConfiguration()         throws Exception", "signatureAfterChange": "          public void testEmptyConfiguration()         throws Exception", "diff": ["-        Configuration config =", "-            loadConfiguration(\"empty_configuration.xml\");", "-                    ", "-        GlobalProperties globalProps =", "-            new GlobalProperties(new Properties(), System.out);", "-        assertEquals(\"properties\", globalProps.getProperties(),", "-            config.getProperties());", "-                ", "-        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "-        assertEquals(\"checkConfigs.length\", 0, checkConfigs.length);", "+//        Configuration config =", "+//            loadConfiguration(\"empty_configuration.xml\");", "+//                    ", "+//        GlobalProperties globalProps =", "+//            new GlobalProperties(new Properties(), System.out);", "+//        assertEquals(\"properties\", globalProps.getProperties(),", "+//            config.getProperties());", "+//                ", "+//        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "+//        assertEquals(\"checkConfigs.length\", 0, checkConfigs.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52413bce097184999b6ee8ff64f6adfc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "6a30bbf32961d8bc124754b78abbfe2b32d3158f", "commitAfterChange": "5ace8fc09d4e301959a420f0f36de73c84f7a820", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public void testCheckOption()         throws Exception", "signatureAfterChange": "          public void testCheckOption()         throws Exception", "diff": ["-        Configuration config =", "-            loadConfiguration(\"rightcurlycheck_configuration.xml\");", "-                    ", "-        GlobalProperties globalProps =", "-            new GlobalProperties(new Properties(), System.out);", "-        assertEquals(\"properties\", globalProps.getProperties(),", "-            config.getProperties());", "-                ", "-        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "-        assertEquals(\"checkConfigs.length\", 1, checkConfigs.length);", "-        ", "-        RightCurlyCheck rightCurly =", "-            (RightCurlyCheck) (checkConfigs[0].", "-                createInstance(this.getClass().getClassLoader()));", "-        RightCurlyOption option =", "-            (RightCurlyOption) rightCurly.getAbstractOption();", "-        assertEquals(\"option\", \"alone\", option.toString());", "+//        Configuration config =", "+//            loadConfiguration(\"rightcurlycheck_configuration.xml\");", "+//                    ", "+//        GlobalProperties globalProps =", "+//            new GlobalProperties(new Properties(), System.out);", "+//        assertEquals(\"properties\", globalProps.getProperties(),", "+//            config.getProperties());", "+//                ", "+//        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "+//        assertEquals(\"checkConfigs.length\", 1, checkConfigs.length);", "+//        ", "+//        RightCurlyCheck rightCurly =", "+//            (RightCurlyCheck) (checkConfigs[0].", "+//                createInstance(this.getClass().getClassLoader()));", "+//        RightCurlyOption option =", "+//            (RightCurlyOption) rightCurly.getAbstractOption();", "+//        assertEquals(\"option\", \"alone\", option.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7750383b1215586625f48f659d4be4aa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "440cf6836f278602a790d764f257777be80d8b9e", "commitAfterChange": "686afc521a11088c57632352eb6fd60a682b03d6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": "          public void testCheckOption()         throws Exception", "signatureAfterChange": "      private void verifyConfigNode(         DefaultConfiguration aConfig, String aName, int aChildrenLength,         Properties atts) throws Exception", "diff": ["-    ", "-    public void testCheckOption()", "-        throws Exception", "-//        Configuration config =", "-//            loadConfiguration(\"rightcurlycheck_configuration.xml\");", "-//                    ", "-//        GlobalProperties globalProps =", "-//            new GlobalProperties(new Properties(), System.out);", "-//        assertEquals(\"properties\", globalProps.getProperties(),", "-//            config.getProperties());", "-//                ", "-//        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "-//        assertEquals(\"checkConfigs.length\", 1, checkConfigs.length);", "-//        ", "-//        RightCurlyCheck rightCurly =", "-//            (RightCurlyCheck) (checkConfigs[0].", "-//                createInstance(this.getClass().getClassLoader()));", "-//        RightCurlyOption option =", "-//            (RightCurlyOption) rightCurly.getAbstractOption();", "-//        assertEquals(\"option\", \"alone\", option.toString());", "+", "+    private void verifyConfigNode(", "+        DefaultConfiguration aConfig, String aName, int aChildrenLength,", "+        Properties atts) throws Exception", "+    {", "+        assertEquals(\"name.\", aName, aConfig.getName());", "+        assertEquals(", "+            \"children.length.\", aChildrenLength, aConfig.getChildren().length);", "+", "+        final String[] attNames = aConfig.getAttributeNames();", "+        assertEquals(\"attributes.length\", atts.size(), attNames.length);", "+", "+        for (int i = 0; i < attNames.length; i++) {", "+            assertEquals(", "+                \"attribute[\" + attNames[i] + \"]\", atts.get(attNames[i]),", "+                aConfig.getAttribute(attNames[i]));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a91c024c00baaf020fb0db4fc00422b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "6a30bbf32961d8bc124754b78abbfe2b32d3158f", "commitAfterChange": "5ace8fc09d4e301959a420f0f36de73c84f7a820", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testCheck()         throws Exception", "signatureAfterChange": "          public void testCheck()         throws Exception", "diff": ["-        Configuration config =", "-            loadConfiguration(\"avoidstarimport_configuration.xml\");", "-                    ", "-        GlobalProperties globalProps =", "-            new GlobalProperties(new Properties(), System.out);", "-        assertEquals(\"properties\", globalProps.getProperties(),", "-            config.getProperties());", "-                ", "-        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "-        assertEquals(\"checkConfigs.length\", 1, checkConfigs.length);", "-        ", "-        assertTrue(\"checkConfigs[0]\",", "-            (checkConfigs[0].createInstance(this.getClass().getClassLoader()))", "-                instanceof AvoidStarImport);", "+//        Configuration config =", "+//            loadConfiguration(\"avoidstarimport_configuration.xml\");", "+//                    ", "+//        GlobalProperties globalProps =", "+//            new GlobalProperties(new Properties(), System.out);", "+//        assertEquals(\"properties\", globalProps.getProperties(),", "+//            config.getProperties());", "+//                ", "+//        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "+//        assertEquals(\"checkConfigs.length\", 1, checkConfigs.length);", "+//        ", "+//        assertTrue(\"checkConfigs[0]\",", "+//            (checkConfigs[0].createInstance(this.getClass().getClassLoader()))", "+//                instanceof AvoidStarImport);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9270bca3b133c29fa1a44eb1eff12906", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "440cf6836f278602a790d764f257777be80d8b9e", "commitAfterChange": "686afc521a11088c57632352eb6fd60a682b03d6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testEmptyConfiguration()         throws Exception", "signatureAfterChange": "      public void testEmptyConfiguration() throws Exception", "diff": ["-    ", "-    public void testEmptyConfiguration()", "-        throws Exception", "+", "+    public void testEmptyConfiguration() throws Exception", "-//        Configuration config =", "-//            loadConfiguration(\"empty_configuration.xml\");", "-//                    ", "-//        GlobalProperties globalProps =", "-//            new GlobalProperties(new Properties(), System.out);", "-//        assertEquals(\"properties\", globalProps.getProperties(),", "-//            config.getProperties());", "-//                ", "-//        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "-//        assertEquals(\"checkConfigs.length\", 0, checkConfigs.length);", "+        final DefaultConfiguration config =", "+            (DefaultConfiguration) loadConfiguration(\"empty_configuration.xml\");", "+        verifyConfigNode(config, \"configuration\", 0, new Properties());"]}]}
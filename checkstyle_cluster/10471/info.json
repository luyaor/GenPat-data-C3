{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d840bdabf3537e70f78bf1ed009dbc44", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3db10c4a2743c13cc9cae82cba3ab31", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java", "commitBeforeChange": "d471c9cd5437242b7d9e3f3c19409854fc74e50c", "commitAfterChange": "982b3963ca007c6101f69cf50c010f07292dab0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        // defend against users that change the token set in the config file.", "-        if (aAST.getType() != TokenTypes.SLIST) {", "-            return;", "-        }", "-", "-        // TODO: port BlockOption.TEXT", "-        if (aAST.getChildCount() == 0) {", "-            DetailAST parent = aAST.getParent();", "-            String parentText = parent.getText();", "-            if (mCheckFor.contains(parentText)) {", "-                // TODO: i18n", "-                log(aAST.getLineNo(), \"empty \" + parentText + \" block\");", "+        final DetailAST slistAST = aAST.findFirstToken(TokenTypes.SLIST);", "+        if (slistAST != null) {", "+            if (mOption == BlockOption.STMT) {", "+                if (slistAST.getChildCount() <= 1) {      ", "+                    log(slistAST.getLineNo(),", "+                        slistAST.getColumnNo(),", "+                        \"block.noStmt\",", "+                        aAST.getText());", "+                }   ", "+            }", "+            else if (mOption == BlockOption.TEXT) {", "+                if (!hasText(slistAST)) {", "+                        log(slistAST.getLineNo(),", "+                        slistAST.getColumnNo(),", "+                        \"block.empty\",", "+                        aAST.getText());", "+                }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecde6ef54a2d20f5e8b58316b9f8fdfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "86e743f60589840dc86e73a90592b0b17c7c50c1", "commitAfterChange": "17ebdc5c3740d37f29b8dc09c4ce4a42d2982b1e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkAnnotationIndentation(DetailAST aModifiersNode,             NavigableMap<Integer, DetailAST> aFirstNodesOnLines)", "signatureAfterChange": "     private void checkAnnotationIndentation(DetailAST aAtNode,             NavigableMap<Integer, DetailAST> aFirstNodesOnLines)", "diff": ["-    private void checkAnnotationIndentation(DetailAST aModifiersNode,", "+    private void checkAnnotationIndentation(DetailAST aAtNode,", "-        final int currentIndent = aModifiersNode.getColumnNo() + mIndentLevel;", "-        final int firstNodeIndent = aModifiersNode.getColumnNo();", "+        final int currentIndent = aAtNode.getColumnNo() + mIndentLevel;", "+        final int firstNodeIndent = aAtNode.getColumnNo();", "+        final DetailAST lastAnnotationNode = getLastAnnotationNode(aAtNode);", "+        final int lastAnnotationLine = lastAnnotationNode.getLineNo();", "+        final int lastAnnotattionColumn = lastAnnotationNode.getColumnNo();", "-            final int parentType = node.getParent().getType();", "-            if (node.getType() == TokenTypes.AT) {", "-", "-                if (isAnnotationAloneOnLine(node.getParent())) {", "-                    logWarningMessage(node, firstNodeIndent);", "-                    itr.remove();", "-                }", "-            }", "-            else if (parentType != TokenTypes.MODIFIERS", "-                    && !hasTypeNodeAsParent(node)", "-                    && parentType != TokenTypes.ENUM_DEF", "-                    && parentType != TokenTypes.CTOR_DEF", "-                    && node.getType() != TokenTypes.LITERAL_CLASS)", "+            if (node.getLineNo() < lastAnnotationLine", "+                    || node.getLineNo() == lastAnnotationLine", "+                    && node.getColumnNo() <= lastAnnotattionColumn)", "-                logWarningMessage(node, currentIndent);", "+                final DetailAST parentNode = node.getParent();", "+                if (node.getType() == TokenTypes.AT", "+                        && parentNode.getParent().getType() == TokenTypes.MODIFIERS)", "+                {", "+                    logWarningMessage(node, firstNodeIndent);", "+                }", "+                else {", "+                    logWarningMessage(node, currentIndent);", "+                }", "-        }", "-    }", "+            else {", "+                break;", "+    }"]}]}
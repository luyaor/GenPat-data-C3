{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da35a12a2440e47aba058a4c4904a1a6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5347be5e3286e3565d68fdf0559b04fe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65", "commitAfterChange": "88830ca708e2deb22cae333057ebddd15f7f9c57", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void parseTags(String[] text, int lineNo)", "signatureAfterChange": "     private void parseTags(String[] text, int lineNo)", "diff": ["-            else if (!isTag(text, position)) {", "-                position = getNextCharPos(text, position);", "+            else if (isTag(text, position)) {", "+                position = parseTag(text, lineNo, nLines, position);", "-                // find end of tag", "-                final Point endTag = findChar(text, '>', position);", "-                final boolean incompleteTag = endTag.getLineNo() >= nLines;", "-                // get tag id (one word)", "-                final String tagId;", "-", "-                if (incompleteTag) {", "-                    tagId = \"\";", "-                }", "-                else {", "-                    tagId = getTagId(text, position);", "-                }", "-                // is this closed tag", "-                final boolean closedTag =", "-                        endTag.getLineNo() < nLines", "-                         && text[endTag.getLineNo()]", "-                         .charAt(endTag.getColumnNo() - 1) == '/';", "-                // add new tag", "-                add(new HtmlTag(tagId,", "-                                position.getLineNo() + lineNo,", "-                                position.getColumnNo(),", "-                                closedTag,", "-                                incompleteTag,", "-                                text[position.getLineNo()]));", "-                position = endTag;", "+                position = getNextCharPos(text, position);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61dca2b4b62cd5081bf45bb6c1074c72", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "dfd7310b964c3a3a35e07c91789b166d2b26aa39", "commitAfterChange": "7b849d58d5a6da2a1384091e3fc7ebb07ba1d957", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "     private void checkHeader()", "signatureAfterChange": "     private void checkHeader()", "diff": ["-", "-                // TODO: RE creation should be cached to avoid", "-                // re-compilation when multiple files are checked. Will wait", "-                // until this is shown to be a performance problem. Really", "-                // should create a factory method for creating RE objects.", "-                final boolean match =", "-                    mConfig.getHeaderLinesRegexp() ?", "-                    createRE(headerLine).match(mLines[i]) :", "-                    headerLine.equals(mLines[i]);", "-", "-                if (!match) {", "+                try {", "+                    final boolean match =", "+                        mConfig.getHeaderLinesRegexp()", "+                        ? Utils.getRE(headerLine).match(mLines[i])", "+                        : headerLine.equals(mLines[i]);", "+    ", "+                    if (!match) {", "+                        log(i + 1,", "+                            \"Line does not match expected header line of '\" +", "+                            mConfig.getHeaderLines()[i] + \"'.\");", "+                        break; // stop checking", "+                    }", "+                }", "+                catch (RESyntaxException e) {", "-                        \"Line does not match expected header line of '\" +", "-                        mConfig.getHeaderLines()[i] + \"'.\");", "-                    break; // stop checking", "+                        \"Unable to parse regular expression '\"", "+                        + headerLine + \"'.\");"]}]}
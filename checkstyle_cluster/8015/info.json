{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2882405ba7c9d43781b165c9b32856f8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0358ac54b63c53ec27ec0af04f1c5b72", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "f34eba11cbd8559d4d06f96e19affa70abaf86ff", "commitAfterChange": "0e3fe5643667a53079dbd114e5b1e9aa91fde083", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-        Checker c;", "+        final int numErrs;", "+        Checker c = null;", "+            AuditListener[] listeners = getListeners();", "+            for (int i = 0; i < listeners.length; i++) {", "+                c.addListener( listeners[i] );", "+            }", "+            final String[] files = scanFileSets();", "+            numErrs = c.process(files);", "-        catch (RESyntaxException e){", "-            e.printStackTrace();", "-            throw new BuildException(\"Unable to create a Checker\", location);", "+        catch (Exception e) {", "+            throw new BuildException(\"Unable to create a Checker\", e);", "-", "-        // Process the files", "-        int numErrs = 0;", "-        if (mFileName != null) {", "-            numErrs += c.process(mFileName);", "+        finally {", "+            if (c != null) {", "+                c.destroy();", "+            }", "-", "-        final Iterator it = mFileSets.iterator();", "-        while (it.hasNext()) {", "-            final FileSet fs = (FileSet) it.next();", "-            final DirectoryScanner ds = fs.getDirectoryScanner(project);", "-            numErrs += process(fs.getDir(project).getAbsolutePath(),", "-                               ds.getIncludedFiles(),", "-                               c);", "-        }", "-", "-        c.destroy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "449bfb1573b2edc27345e738c3705920", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/doclets/CheckDocsDoclet.java", "commitBeforeChange": "a91de9a50e4707848d31d7391966cca8b08e1559", "commitAfterChange": "0a60a189ed4236fd9be3c26bbb2f27be95e5d967", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static boolean start(RootDoc aRoot) throws IOException", "signatureAfterChange": "     public static boolean start(RootDoc aRoot) throws IOException", "diff": ["-        final Map allChecks = new TreeMap();", "-        for (int i = 0; i < classDocs.length; i++) {", "-            ClassDoc classDoc = classDocs[i];", "-            // TODO: introduce a \"CheckstyleModule\" interface", "-            // so we can do better in the next line...", "-            if (classDoc.typeName().endsWith(\"Check\")", "-                    && !classDoc.isAbstract())", "-            {", "-                DocumentationPage page = findDocumentationPage(classDoc);", "-                page.addCheck(classDoc);", "-                allChecks.put(getCheckName(classDoc), page);", "-            }", "-        }", "-", "-        // TODO: close files in finally blocks", "-        PrintWriter fileWriter = new PrintWriter(", "+        final PrintWriter fileWriter = new PrintWriter(", "-        for (Iterator it = allChecks.keySet().iterator(); it.hasNext();) {", "-            String checkName = (String) it.next();", "-            DocumentationPage page =", "-                    (DocumentationPage) allChecks.get(checkName);", "-            String descr = page.getDescription(checkName);", "-            fileWriter.println(\"<tr>\"", "-                    + \"<td><a href=\\\"\"", "-                    + \"config_\" + getPageName(page) + \".html#\" + checkName", "-                    + \"\\\">\" + checkName + \"</a></td><td>\"", "-                    + descr", "-                    + \"</td></tr>\");", "+        Arrays.sort(classDocs, new ClassDocByCheckNameComparator());", "+", "+        for (int i = 0; i < classDocs.length; i++) {", "+", "+            final ClassDoc classDoc = classDocs[i];", "+", "+            // TODO: introduce a \"CheckstyleModule\" interface", "+            // so we can do better in the next line...", "+            if (classDoc.typeName().endsWith(\"Check\")", "+                    && !classDoc.isAbstract())", "+            {", "+                String pageName = getPageName(classDoc);", "+", "+                // allow checks to override pageName when", "+                // java package hierarchy is not reflected in doc structure", "+                final Tag[] docPageTags = classDoc.tags(\"checkstyle-docpage\");", "+                if (docPageTags != null && docPageTags.length > 0) {", "+                    pageName = docPageTags[0].text();", "+                }", "+", "+                final String descr = getDescription(classDoc);", "+                final String checkName = getCheckName(classDoc);", "+", "+", "+                fileWriter.println(\"<tr>\"", "+                        + \"<td><a href=\\\"\"", "+                        + \"config_\" + pageName + \".html#\" + checkName", "+                        + \"\\\">\" + checkName + \"</a></td><td>\"", "+                        + descr", "+                        + \"</td></tr>\");", "+            }", "+"]}]}
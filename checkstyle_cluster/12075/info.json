{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d97220773657a8fded93a573468afcb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15c30b37d992897781cf9572cf7a7e9a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/ScopeTest.java", "commitBeforeChange": "e7c2ee96044adc4c63d98545defb70f809548f9e", "commitAfterChange": "258b1ffed6d6357fdc765aa8adb371c7cd4677a9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testIsInNothing()", "signatureAfterChange": "      @Test     public void testIsInNothing()", "diff": ["-        assertTrue(!Scope.PUBLIC.isIn(Scope.NOTHING));", "-        assertTrue(!Scope.PROTECTED.isIn(Scope.NOTHING));", "-        assertTrue(!Scope.PACKAGE.isIn(Scope.NOTHING));", "-        assertTrue(!Scope.PRIVATE.isIn(Scope.NOTHING));", "-        assertTrue(!Scope.ANONINNER.isIn(Scope.NOTHING));", "+        assertFalse(Scope.PUBLIC.isIn(Scope.NOTHING));", "+        assertFalse(Scope.PROTECTED.isIn(Scope.NOTHING));", "+        assertFalse(Scope.PACKAGE.isIn(Scope.NOTHING));", "+        assertFalse(Scope.PRIVATE.isIn(Scope.NOTHING));", "+        assertFalse(Scope.ANONINNER.isIn(Scope.NOTHING));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89693e9b0ecb05dbf8ed61805076e0a8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/ScopeTest.java", "commitBeforeChange": "e7c2ee96044adc4c63d98545defb70f809548f9e", "commitAfterChange": "258b1ffed6d6357fdc765aa8adb371c7cd4677a9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testIsInPublic()", "signatureAfterChange": "      @Test     public void testIsInPublic()", "diff": ["-        assertTrue(!Scope.PROTECTED.isIn(Scope.PUBLIC));", "-        assertTrue(!Scope.PACKAGE.isIn(Scope.PUBLIC));", "-        assertTrue(!Scope.PRIVATE.isIn(Scope.PUBLIC));", "-        assertTrue(!Scope.ANONINNER.isIn(Scope.PUBLIC));", "+        assertFalse(Scope.PROTECTED.isIn(Scope.PUBLIC));", "+        assertFalse(Scope.PACKAGE.isIn(Scope.PUBLIC));", "+        assertFalse(Scope.PRIVATE.isIn(Scope.PUBLIC));", "+        assertFalse(Scope.ANONINNER.isIn(Scope.PUBLIC));"]}]}
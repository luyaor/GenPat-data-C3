{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fe4fddfff15d52f306fc1bf332bbea6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "988d12254a984ba0c9afd625f85d8a2c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "e7778ef9e22a12ce1db913b46c5c39e743b2354f", "commitAfterChange": "db5ec5f654316e862f7b5d3f5faa897ce0ca2352", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private int[] getBranchTokenTypes()", "signatureAfterChange": "     private BitSet getBranchTokenTypes()", "diff": ["-    private int[] getBranchTokenTypes()", "+    private BitSet getBranchTokenTypes()", "-            // TODO: improve algorithm to avoid most array creation", "-            int[] bag = new int[] {getType()};", "+            mBranchTokenTypes = new BitSet();", "+            mBranchTokenTypes.set(getType());", "-                final int[] childTypes = child.getBranchTokenTypes();", "-                final int[] savedBag = bag;", "-                bag = new int[savedBag.length + childTypes.length];", "-                System.arraycopy(savedBag, 0, bag, 0, savedBag.length);", "-                System.arraycopy(childTypes, 0, bag, savedBag.length,", "-                        childTypes.length);", "+                final BitSet childTypes = child.getBranchTokenTypes();", "+                mBranchTokenTypes.or(childTypes);", "+", "-            // TODO: remove duplicates to speed up searching", "-            mBranchTokenTypes = bag;", "-            Arrays.sort(mBranchTokenTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "effede2ba2a26b05bf022ffb27805bdc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "b0240a0200663fbf1d3146d1aefe12207fdde4af", "commitAfterChange": "9aa72722de7b5a4ffb5d50945c7bce8b58f25e8e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void fillSortedRelevantChecksums()", "signatureAfterChange": "     private void fillSortedRelevantChecksums()", "diff": ["-            int count = 0;", "-            final long[] relevant = new long[checksums.length];", "-            for (int j = 0; j < checksums.length; j++) {", "-                final long checksum = checksums[j];", "-                if (checksum != IGNORE) {", "-                    relevant[count++] = checksum;", "-                }", "-            }", "-            Arrays.sort(relevant, 0, count);", "-            final long[] result = new long[count];", "-            System.arraycopy(relevant, 0, result, 0, count);", "-            mSortedRelevantChecksums[i] = result;", "+            mChecksumInfo[i] = new ChecksumInfo(checksums);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "541691342895703c49840057e3ec2e52", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "553c4e4890dc12f88cf042d1a7566fa0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "4011bf37400a7932f6c7a6f8fe1686673cea31c7", "commitAfterChange": "fd6a743fd4b3c9283d62174327dd978bda694892", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void checkHtml(DetailAST aAST, String[] aComment)", "signatureAfterChange": "     private void checkHtml(DetailAST aAST, String[] aComment)", "diff": ["-        for (int i = 0; i < aComment.length; i++) {", "-            TagParser parser = null;", "-            try {", "-                // Can throw NoSuchElementException when tokenizing encounters", "-                // \"<\" at end of aComment[i].", "-                parser = new TagParser(aComment[i], lineno + i);", "-            }", "-            catch (NoSuchElementException e) {", "-                log(", "-                    lineno + i,", "-                    \"javadoc.incompleteTag\",", "-                    new Object[] {aComment[i]});", "+        TagParser parser = null;", "+        try {", "+            // Can throw NoSuchElementException when tokenizing encounters", "+            // \"<\" at end of aComment[i].", "+            parser = new TagParser(aComment, lineno);", "+        }", "+        catch (NoSuchElementException e) {", "+            log(lineno, \"javadoc.incompleteTag\", new Object[] {aComment[0]});", "+            return;", "+        }", "+", "+        while (parser.hasNextTag()) {", "+            final HtmlTag tag = parser.nextTag();", "+", "+            if (tag.isIncompleteTag()) {", "+                log(tag.getLineno(), \"javadoc.incompleteTag\",", "+                    new Object[] {aComment[tag.getLineno() - lineno]});", "-            while (parser.hasNextTag()) {", "-                final HtmlTag tag = parser.nextTag();", "-", "-                if (!tag.isCloseTag()) {", "-                    htmlStack.push(tag);", "+            if (tag.isClosedTag()) {", "+                //do nothing", "+                continue;", "+            }", "+            if (!tag.isCloseTag()) {", "+                htmlStack.push(tag);", "+            }", "+            else {", "+                // We have found a close tag.", "+                if (isExtraHtml(tag.getId(), htmlStack)) {", "+                    // No corresponding open tag was found on the stack.", "+                    log(tag.getLineno(),", "+                        tag.getPosition(),", "+                        EXTRA_HTML,", "+                        tag);", "-                    // We have found a close tag.", "-                    if (isExtraHtml(tag.getId(), htmlStack)) {", "-                        // No corresponding open tag was found on the stack.", "-                        log(tag.getLineno(),", "-                            tag.getPosition(),", "-                            EXTRA_HTML,", "-                            tag);", "-                    }", "-                    else {", "-                        // See if there are any unclosed tags that were opened", "-                        // after this one.", "-                        checkUnclosedTags(htmlStack, tag.getId());", "-                    }", "+                    // See if there are any unclosed tags that were opened", "+                    // after this one.", "+                    checkUnclosedTags(htmlStack, tag.getId());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62dc86502e48f5f438ed819843648401", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java", "commitBeforeChange": "a2c4566348d41c5eed923c33670cb48bf30c951b", "commitAfterChange": "e292d5fa53a78828d45565e27d305eb3f7cb9d6a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     AccessResult verifyImport(final String aForImport)", "signatureAfterChange": "     AccessResult verifyImport(final String aForImport)", "diff": ["-            final boolean classMatch = mClassName.equals(aForImport);", "+            final boolean classMatch = mRegExp", "+                ? aForImport.matches(mClassName)", "+                : aForImport.equals(mClassName);", "-        //boolean pkgMatch = aForImport.startsWith(mPkgName + \".\");", "-        boolean pkgMatch = aForImport.startsWith(mPkgName + \".\");", "-        if (pkgMatch && mExactMatch) {", "-            pkgMatch = (aForImport.indexOf('.', (mPkgName.length() + 1)) == -1);", "+        boolean pkgMatch;", "+        if (mRegExp) {", "+            pkgMatch = aForImport.matches(mPkgName + \"\\\\..*\");", "+            if (pkgMatch && mExactMatch) {", "+                pkgMatch = !aForImport.matches(mPkgName + \"\\\\..*\\\\..*\");", "+            }", "+        }", "+        else {", "+            pkgMatch = aForImport.startsWith(mPkgName + \".\");", "+            if (pkgMatch && mExactMatch) {", "+                pkgMatch = (aForImport.indexOf('.',", "+                    (mPkgName.length() + 1)) == -1);", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33e2bd08954facfbeba230604ca54a08", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b828fb8113e221c648b5b268234f3d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/checks/indentation/InputInvalidLabelIndent.java", "commitBeforeChange": "992678f1baf3a7f6a1cf579232457bd97d408e4d", "commitAfterChange": "edb810c10e121b34f4222a4bba9012add00f1e41", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public InputInvalidLabelIndent()", "signatureAfterChange": "     public InputInvalidLabelIndent()", "diff": ["-            System.out.println(\"label test\"); //indent:12 exp:12", "+            System.identityHashCode(\"label test\"); //indent:12 exp:12", "-                System.out.println(\"more testing\"); //indent:16 exp:16", "+                System.identityHashCode(\"more testing\"); //indent:16 exp:16", "-        System.out.println(\"toplevel\"); //indent:8 exp:8", "+        System.identityHashCode(\"toplevel\"); //indent:8 exp:8", "-                  System.out.println(\"toplevel\"); //indent:18 exp:8,12 warn", "-                  System.out.println(\"toplevel\"); //indent:18 exp:8 warn", "+                  System.identityHashCode(\"toplevel\"); //indent:18 exp:8,12 warn", "+                  System.identityHashCode(\"toplevel\"); //indent:18 exp:8 warn", "-      System.out.println(\"toplevel\"); //indent:6 exp:8,12 warn", "+      System.identityHashCode(\"toplevel\"); //indent:6 exp:8,12 warn"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91c9b92b1f78978df128ccb3e8cecd20", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "49862970ac522ae85fa014b5ac4985e56645fcff", "commitAfterChange": "a8e60736f4d66e806ffe1d250da3b58bf5dc2132", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "diff": ["-        if (\"equals\".equals(method.getText()) && containsOneArg(expr)) {", "-            if (containsAllSafeTokens(expr)) {", "+", "+        if (\"equals\".equals(method.getText())", "+                || (mPerformEqualsIgnoreCaseCheck && \"equalsIgnoreCase\"", "+                        .equals(method.getText())))", "+        {", "+            if (containsOneArg(expr) && containsAllSafeTokens(expr)) {", "-                        \"equals.avoid.null\");", "-            }", "-        } else if(performEqualsIgnoreCaseCheck) {", "-            if(\"equalsIgnoreCase\".equals(method.getText()) && containsOneArg(expr)) {", "-                if (containsAllSafeTokens(expr)) {", "-                    log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "-                            \"equalsIgnoreCase.avoid.null\");", "-                }", "+                    \"equals\".equals(method.getText())", "+                    ? \"equals.avoid.null\"", "+                    : \"equalsIgnoreCase.avoid.null\");"]}]}
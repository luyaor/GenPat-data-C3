{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67943bc7049c381b31cdb9dd10cdd152", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13421b0d522536d4a8e2d91ff8035aa0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "9ddad74e484384e5ca2d88ab0fe21922189e2b85", "commitAfterChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static DetailAST findContainingConstantDef(DetailAST ast)", "signatureAfterChange": "     private static DetailAST findContainingConstantDef(DetailAST ast)", "diff": ["+        DetailAST constantDef = null;", "-        if (varDefAST == null) {", "-            return null;", "-        }", "+        if (varDefAST != null) {", "+            // implicit constant?", "+            if (ScopeUtils.isInInterfaceOrAnnotationBlock(varDefAST)", "+                    || varDefAST.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "+                constantDef = varDefAST;", "+            }", "+            else {", "+                // explicit constant", "+                final DetailAST modifiersAST = varDefAST.findFirstToken(TokenTypes.MODIFIERS);", "-        // implicit constant?", "-        if (ScopeUtils.isInInterfaceOrAnnotationBlock(varDefAST)", "-            || varDefAST.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "-            return varDefAST;", "+                if (modifiersAST.branchContains(TokenTypes.FINAL)) {", "+                    constantDef = varDefAST;", "+                }", "+            }", "-", "-        // explicit constant", "-        final DetailAST modifiersAST =", "-                varDefAST.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiersAST.branchContains(TokenTypes.FINAL)) {", "-            return varDefAST;", "-        }", "-", "-        return null;", "+        return constantDef;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2f2ac3636d20df66bdfcdbe81b6655a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java", "commitBeforeChange": "c3af7d4b0e9ffd5bdf1fa55273170f45b3b3d9e0", "commitAfterChange": "a827b7cbbf1f29e24e3f814149809941e754c93c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers)", "signatureAfterChange": "     static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers)", "diff": ["+        DetailAST offendingModifier = null;", "+", "-        if (modifier.getType() == TokenTypes.ANNOTATION) {", "-            return null;", "-        }", "+        if (modifier.getType() != TokenTypes.ANNOTATION) {", "+            int i = 0;", "-        int i = 0;", "-        while (modifier != null) {", "-            if (modifier.getType() == TokenTypes.ANNOTATION) {", "-                //Annotation not at start of modifiers, bad", "-                return modifier;", "-            }", "+            while (modifier != null) {", "+                if (modifier.getType() == TokenTypes.ANNOTATION) {", "+                    //Annotation not at start of modifiers, bad", "+                    offendingModifier = modifier;", "+                    break;", "+                }", "-            while (i < JLS_ORDER.length", "-                   && !JLS_ORDER[i].equals(modifier.getText())) {", "-                i++;", "-            }", "+                while (i < JLS_ORDER.length", "+                       && !JLS_ORDER[i].equals(modifier.getText())) {", "+                    i++;", "+                }", "-            if (i == JLS_ORDER.length) {", "-                //Current modifier is out of JLS order", "-                return modifier;", "-            }", "-            else if (it.hasNext()) {", "-                modifier = it.next();", "-            }", "-            else {", "-                //Reached end of modifiers without problem", "-                modifier = null;", "+                if (i == JLS_ORDER.length) {", "+                    //Current modifier is out of JLS order", "+                    offendingModifier = modifier;", "+                    break;", "+                }", "+                else if (it.hasNext()) {", "+                    modifier = it.next();", "+                }", "+                else {", "+                    //Reached end of modifiers without problem", "+                    modifier = null;", "+                }", "-", "-        return null;", "+        return offendingModifier;"]}]}
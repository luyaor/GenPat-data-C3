{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6d1be0b66341ba29573981d070cfe58", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2134dce4f781d3150844d5808cfe7bb1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheckTest.java", "commitBeforeChange": "5f3eced2d85c10407b5ba1f38c06af05715d9bd7", "commitAfterChange": "de60ea7b86b5ea25338dfe8a300db9d179004812", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testStringLiteralEquality() throws Exception", "signatureAfterChange": "      @Test     public void testStringLiteralEquality() throws Exception", "diff": ["-            \"11:18: Literal Strings should be compared using equals(), not '=='.\",", "-            \"16:20: Literal Strings should be compared using equals(), not '=='.\",", "-            \"21:22: Literal Strings should be compared using equals(), not '=='.\",", "+            \"7:18: Literal Strings should be compared using equals(), not '=='.\",", "+            \"12:20: Literal Strings should be compared using equals(), not '=='.\",", "+            \"17:22: Literal Strings should be compared using equals(), not '=='.\",", "-        verify(checkConfig, getPath(\"coding\" + File.separator + \"InputStringLiteralEquality.java\"), expected);", "+        verify(checkConfig, getPath(\"checks\" + File.separator + \"InputStringLiteralEquality.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53c3ecb7fae99a47b37e34e501a549c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0", "commitAfterChange": "78e9ce870170ca3ef88fd78f8e0af0681c958eb3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testNL3()         throws Exception", "signatureAfterChange": "      public void testNL3() throws Exception", "diff": ["-    public void testNL3()", "-        throws Exception", "+    public void testNL3() throws Exception", "-        final DefaultConfiguration checkConfig =", "-            createCheckConfig(LeftCurlyCheck.class);", "-        checkConfig.addAttribute(\"option\", LeftCurlyOption.NL.toString());", "+        mCheckConfig.addAttribute(\"option\", LeftCurlyOption.NL.toString());", "-            \"26:33: '{' should be on a new line.\"", "+            \"26:33: '{' should be on a new line.\",", "+            \"91:19: '{' should be on a new line.\",", "+            \"97:19: '{' should be on a new line.\",", "-        verify(checkConfig, getPath(\"InputLeftCurlyOther.java\"), expected);", "+        verify(mCheckConfig, getPath(\"InputLeftCurlyOther.java\"), expected);"]}]}
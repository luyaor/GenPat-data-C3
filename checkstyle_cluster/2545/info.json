{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0bb996e2f115a246e7318784ed99229", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59a318bede08ba6380e0d4927b9ffbb7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilter.java", "commitBeforeChange": "7abbd6af2f63a9e5bfa067f3058b5a3e738971de", "commitAfterChange": "8d242382f8bb77488b6da23bdd0d2d61583703fc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean accept(Object aObject)", "signatureAfterChange": "     public boolean accept(AuditEvent aEvent)", "diff": ["-    public boolean accept(Object aObject)", "+    public boolean accept(AuditEvent aEvent)", "-        if (!(aObject instanceof AuditEvent)) {", "-            return false;", "-        }", "-", "-        final AuditEvent event = (AuditEvent) aObject;", "-        boolean result = mSeverityLevel.equals(event.getSeverityLevel());", "+        boolean result = mSeverityLevel.equals(aEvent.getSeverityLevel());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9926b78b3412345eded7328833222882", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "339a7f5475169e8c9c492d000938059a4ea24785", "commitAfterChange": "c85ec6f26ade692103ac27383a87c3402b4d66ca", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void destroy()", "signatureAfterChange": "     public void destroy()", "diff": ["-        // close all streamable listeners", "+        // close all listeners", "-            final Object obj = it.next();", "-            if (obj instanceof Streamable) {", "-                final Streamable str = (Streamable) obj;", "-                final OutputStream os = str.getOutputStream();", "-                // close only those that can be closed...", "-                if ((os != System.out) && (os != System.err) && (os != null)) {", "-                    try  {", "-                        os.flush();", "-                        os.close();", "-                    }", "-                    catch (IOException ignored) {", "-                    }", "+            final AuditListener listener = (AuditListener) it.next();", "+            final OutputStream os = listener.getOutputStream();", "+            // close only those that can be closed...", "+            if ((os != System.out) && (os != System.err) && (os != null)) {", "+                try  {", "+                    os.flush();", "+                    os.close();", "+                }", "+                catch (IOException ignored) {", "-            it.remove();", "+        it.remove();"]}]}
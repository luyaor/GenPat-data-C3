{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08b1ae78b3d9277d2046e761735d13de", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b11c3d5b1914a78a66ee591136da4ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0", "commitAfterChange": "78e9ce870170ca3ef88fd78f8e0af0681c958eb3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+        DetailAST lcurly = null;", "-        if (aAST.getType() == TokenTypes.LITERAL_ELSE) {", "-            nextToken = aAST;", "-            final DetailAST thenAST = aAST.getPreviousSibling();", "-            rcurly = thenAST.getLastChild();", "-        }", "-        else if (aAST.getType() == TokenTypes.LITERAL_CATCH) {", "+        boolean shouldCheckLastRcurly = false;", "+", "+        switch (aAST.getType()) {", "+        case TokenTypes.LITERAL_TRY:", "+            lcurly = (DetailAST) aAST.getFirstChild();", "+            nextToken = (DetailAST) lcurly.getNextSibling();", "+            rcurly = lcurly.getLastChild();", "+            break;", "+        case TokenTypes.LITERAL_CATCH:", "-            rcurly = aAST.getLastChild().getLastChild();", "-        }", "-        else if (aAST.getType() == TokenTypes.LITERAL_TRY) {", "-            final DetailAST firstChild = (DetailAST) aAST.getFirstChild();", "-            nextToken = (DetailAST) firstChild.getNextSibling();", "-            rcurly = firstChild.getLastChild();", "+            lcurly = aAST.getLastChild();", "+            rcurly = lcurly.getLastChild();", "+            if (nextToken == null) {", "+                shouldCheckLastRcurly = true;", "+                nextToken = getNextToken(aAST);", "+            }", "+            break;", "+        case TokenTypes.LITERAL_IF:", "+            nextToken = aAST.findFirstToken(TokenTypes.LITERAL_ELSE);", "+            if (nextToken != null) {", "+                lcurly = nextToken.getPreviousSibling();", "+                rcurly = lcurly.getLastChild();", "+            }", "+            else {", "+                shouldCheckLastRcurly = true;", "+                nextToken = getNextToken(aAST);", "+                lcurly = aAST.getLastChild();", "+                rcurly = lcurly.getLastChild();", "+            }", "+            break;", "+        case TokenTypes.LITERAL_ELSE:", "+            shouldCheckLastRcurly = true;", "+            nextToken = getNextToken(aAST);", "+            lcurly = (DetailAST) aAST.getFirstChild();", "+            rcurly = lcurly.getLastChild();", "+            break;", "+        case TokenTypes.LITERAL_FINALLY:", "+            shouldCheckLastRcurly = true;", "+            nextToken = getNextToken(aAST);", "+            lcurly = (DetailAST) aAST.getFirstChild();", "+            rcurly = lcurly.getLastChild();", "+            break;", "+        default:", "+            throw new RuntimeException(\"Unexpected token type (\"", "+                    + TokenTypes.getTokenName(aAST.getType()) + \")\");", "-        // handle if-then-else without curlies:", "-        // if (cond)", "-        //     return 1;", "-        // else", "-        //     return 2;", "+            // we need to have both tokens to perform the check", "-        // If have both tokens, perform the check", "-        if (nextToken != null) {", "-            if ((getAbstractOption() == RightCurlyOption.SAME)", "-                && (rcurly.getLineNo() != nextToken.getLineNo()))", "-            {", "-                log(rcurly.getLineNo(), rcurly.getColumnNo(),", "-                    \"line.same\", \"}\");", "-            }", "-            else if ((getAbstractOption() == RightCurlyOption.ALONE)", "-                       && (rcurly.getLineNo() == nextToken.getLineNo()))", "-            {", "-                log(rcurly.getLineNo(), rcurly.getColumnNo(),", "-                    \"line.alone\", \"}\");", "+        if (shouldCheckLastRcurly) {", "+            if (rcurly.getLineNo() == nextToken.getLineNo()) {", "+                log(rcurly, \"line.alone\", \"}\");", "+        else if ((getAbstractOption() == RightCurlyOption.SAME)", "+            && (rcurly.getLineNo() != nextToken.getLineNo()))", "+        {", "+            log(rcurly, \"line.same\", \"}\");", "+        }", "+        else if ((getAbstractOption() == RightCurlyOption.ALONE)", "+                 && (rcurly.getLineNo() == nextToken.getLineNo()))", "+        {", "+            log(rcurly, \"line.alone\", \"}\");", "+        }", "+", "+        if (!mShouldStartLine) {", "+            return;", "+        }", "+        final boolean startsLine =", "+            Utils.whitespaceBefore(rcurly.getColumnNo(),", "+                                   getLines()[rcurly.getLineNo() - 1]);", "+", "+        if (!startsLine && (lcurly.getLineNo() != rcurly.getLineNo())) {", "+            log(rcurly, \"line.new\", \"}\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4d8a385fcad4f1a425b85869e594562", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "39a7271a2a950a2ec71d73b95b6eef8d1079d487", "commitAfterChange": "615219883bbd43946f88da4da14ada0a86ab34e4", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     void reportCatchBlock(int aLineNo, int aColNo, boolean aIsEmpty)", "signatureAfterChange": "     void reportCatchBlock(MyCommonAST[] aBraces, boolean aNoStmt)", "diff": ["-    void reportCatchBlock(int aLineNo, int aColNo, boolean aIsEmpty)", "+    void reportCatchBlock(MyCommonAST[] aBraces, boolean aNoStmt)", "-        if (aIsEmpty && !mConfig.isAllowEmptyCatch()) {", "-            log(aLineNo, aColNo - 1, \"Empty catch block.\");", "+        if (aNoStmt && (mConfig.getCatchBlock() == CatchBlockOption.STMT)) {", "+            log(aBraces[0].getLineNo(),", "+                aBraces[0].getColumnNo(),", "+                \"Must have at least one statement.\");", "+        }", "+        else if (mConfig.getCatchBlock() == CatchBlockOption.TEXT) {", "+            if (aBraces[0].getLineNo() == aBraces[1].getLineNo()) {", "+                // Handle braces on the same line", "+                final String txt = mLines[aBraces[0].getLineNo() - 1]", "+                    .substring(aBraces[0].getColumnNo() + 1,", "+                               aBraces[1].getColumnNo());", "+                if (txt.trim().length() == 0) {", "+                    log(aBraces[0].getLineNo(),", "+                        aBraces[0].getColumnNo(),", "+                        \"Empty catch block.\");", "+                }", "+            }", "+            else {", "+                // check only whitespace of first & last lines", "+                if ((mLines[aBraces[0].getLineNo() - 1]", "+                     .substring(aBraces[0].getColumnNo() + 1).trim().length()", "+                     == 0)", "+                    &&", "+                    (mLines[aBraces[1].getLineNo() - 1]", "+                     .substring(0, aBraces[1].getColumnNo()).trim().length()", "+                     == 0))", "+                {", "+", "+                    // Need to check if all lines are also only whitespace", "+                    boolean isBlank = true;", "+                    for (int i = aBraces[0].getLineNo();", "+                         i < (aBraces[1].getLineNo() - 1);", "+                         i++)", "+                    {", "+                        if (mLines[i].trim().length() > 0) {", "+                            isBlank = false;", "+                            break;", "+                        }", "+                    }", "+", "+                    if (isBlank) {", "+                        log(aBraces[0].getLineNo(),", "+                            aBraces[0].getColumnNo(),", "+                            \"Empty catch block.\");", "+                    }", "+                }", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb0e73d41b11b8aa1f4e93a60766d6b0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61dca2b4b62cd5081bf45bb6c1074c72", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "dfd7310b964c3a3a35e07c91789b166d2b26aa39", "commitAfterChange": "7b849d58d5a6da2a1384091e3fc7ebb07ba1d957", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "     private void checkHeader()", "signatureAfterChange": "     private void checkHeader()", "diff": ["-", "-                // TODO: RE creation should be cached to avoid", "-                // re-compilation when multiple files are checked. Will wait", "-                // until this is shown to be a performance problem. Really", "-                // should create a factory method for creating RE objects.", "-                final boolean match =", "-                    mConfig.getHeaderLinesRegexp() ?", "-                    createRE(headerLine).match(mLines[i]) :", "-                    headerLine.equals(mLines[i]);", "-", "-                if (!match) {", "+                try {", "+                    final boolean match =", "+                        mConfig.getHeaderLinesRegexp()", "+                        ? Utils.getRE(headerLine).match(mLines[i])", "+                        : headerLine.equals(mLines[i]);", "+    ", "+                    if (!match) {", "+                        log(i + 1,", "+                            \"Line does not match expected header line of '\" +", "+                            mConfig.getHeaderLines()[i] + \"'.\");", "+                        break; // stop checking", "+                    }", "+                }", "+                catch (RESyntaxException e) {", "-                        \"Line does not match expected header line of '\" +", "-                        mConfig.getHeaderLines()[i] + \"'.\");", "-                    break; // stop checking", "+                        \"Unable to parse regular expression '\"", "+                        + headerLine + \"'.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6876c83e995caa33970a312b2b475be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "5f0d69b64d947d8ab99e8303266e68238592e00a", "commitAfterChange": "5ce7d2562fa583fdb812c6742b1198d0c99ccd6a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     void registerCheck(Check aCheck)            throws CheckstyleException", "signatureAfterChange": "     void registerCheck(Check aCheck)            throws CheckstyleException", "diff": ["-                String token = (String) it.next();", "-                int tokenId = TokenTypes.getTokenId(token);", "-                if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {", "-                    registerCheck(token, aCheck);", "+                final String token = (String) it.next();", "+                try {", "+                    int tokenId = TokenTypes.getTokenId(token);                    ", "+                    if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {", "+                        registerCheck(token, aCheck);", "+                    }", "+                    // TODO: else error message?", "-                // TODO: else error message?", "+                catch (IllegalArgumentException ex) {", "+                    throw new CheckstyleException(\"illegal token \\\"\"", "+                        + token + \"\\\" in check \" + aCheck);", "+                }"]}]}
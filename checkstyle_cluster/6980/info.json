{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1830394f7d782ebc9ff9173456e0bd43", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "389f5675bd833e027e0be0045a5440e2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "commitAfterChange": "5a3f05ec8038daa674666bbaa82d59127aa74f92", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean isOverridingMethod(DetailAST ast)", "signatureAfterChange": "     private boolean isOverridingMethod(DetailAST ast)", "diff": ["-        if (ast.getType() != TokenTypes.METHOD_DEF", "-            || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "-            return false;", "+        boolean overridingMethod = false;", "+", "+        if (ast.getType() == TokenTypes.METHOD_DEF", "+                && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "+            final String name = nameAST.getText();", "+            final DetailAST modifiersAST = ast.findFirstToken(TokenTypes.MODIFIERS);", "+", "+            if (getMethodName().equals(name)", "+                    && !modifiersAST.branchContains(TokenTypes.LITERAL_NATIVE)) {", "+                final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "+                overridingMethod = params.getChildCount() == 0;", "+            }", "-        final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-        final String name = nameAST.getText();", "-        final DetailAST modifiersAST = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (!getMethodName().equals(name)", "-                || modifiersAST.branchContains(TokenTypes.LITERAL_NATIVE)) {", "-            return false;", "-        }", "-        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        return params.getChildCount() == 0;", "+        return overridingMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699133c8a46b44a3c0552491d407e94c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java", "commitBeforeChange": "a09875b9f9ff2d59416331a989b09335ee57c89c", "commitAfterChange": "ef1e65fb5128452cd8a19f82d09455b06a021b65", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static boolean isEqualsMethod(DetailAST ast)", "signatureAfterChange": "     public static boolean isEqualsMethod(DetailAST ast)", "diff": ["-        if (ast.getType() != TokenTypes.METHOD_DEF) {", "-            // A node must be method def", "-            return false;", "-        }", "+        boolean equalsMethod = false;", "-        // non-static, non-abstract?", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "-            || modifiers.branchContains(TokenTypes.ABSTRACT)) {", "-            return false;", "-        }", "+        if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+            final boolean staticOrAbstract = modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "+                    || modifiers.branchContains(TokenTypes.ABSTRACT);", "-        // named \"equals\"?", "-        final DetailAST nameNode = ast.findFirstToken(TokenTypes.IDENT);", "-        final String name = nameNode.getText();", "-        if (!\"equals\".equals(name)) {", "-            return false;", "-        }", "+            if (!staticOrAbstract) {", "+                final DetailAST nameNode = ast.findFirstToken(TokenTypes.IDENT);", "+                final String name = nameNode.getText();", "-        // one parameter?", "-        final DetailAST paramsNode = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        return paramsNode.getChildCount() == 1;", "+                if (\"equals\".equals(name)) {", "+                    // one parameter?", "+                    final DetailAST paramsNode = ast.findFirstToken(TokenTypes.PARAMETERS);", "+                    equalsMethod = paramsNode.getChildCount() == 1;", "+                }", "+            }", "+        }", "+        return equalsMethod;"]}]}
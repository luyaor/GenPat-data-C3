{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf6f7f5caa0d0258bf315336245b8ae7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "983170077b25648116dc417ca98e8983", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "ae9d1d6217ad7dbc2e6f1faa890298c68726dcb4", "commitAfterChange": "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Override     public final void visitToken(DetailAST aBlockCommentAst)", "signatureAfterChange": "      @Override     public final void visitToken(DetailAST aBlockCommentAst)", "diff": ["-        mBlockCommentAst = aBlockCommentAst;", "+        if (JavadocUtils.isJavadocComment(aBlockCommentAst)) {", "+            mBlockCommentAst = aBlockCommentAst;", "-        final String commentContent = JavadocUtils.getBlockCommentContent(aBlockCommentAst);", "+            final String treeCacheKey = aBlockCommentAst.getLineNo() + \":\"", "+                    + aBlockCommentAst.getColumnNo();", "-        if (JavadocUtils.isJavadocComment(commentContent)) {", "+            ParseStatus ps;", "-            final String javadocComment = commentContent.substring(1);", "-", "-            // Log messages should have line number in scope of file,", "-            // not in scope of Javadoc comment.", "-            // Offset is line number of beginning of Javadoc comment.", "-            mErrorListener.setOffset(aBlockCommentAst.getLineNo() - 1);", "-", "-            try {", "-                final ParseTree parseTree = parseJavadoc(javadocComment);", "-", "-                final DetailNode node = convertParseTree2DetailNode(parseTree);", "-", "-                processTree(node);", "+            if (TREE_CACHE.containsKey(treeCacheKey)) {", "+                ps = TREE_CACHE.get(treeCacheKey);", "-            catch (IOException e) {", "-                // Antlr can not initiate its ANTLRInputStream", "-                log(aBlockCommentAst.getLineNo(), \"javadoc.parse.error\",", "-                        e.getMessage());", "+            else {", "+                ps = parseJavadocAsDetailNode(aBlockCommentAst);", "+                TREE_CACHE.put(treeCacheKey, ps);", "-            catch (ParseCancellationException e) {", "-                // If syntax error occurs then message is printed by error listener", "-                // and parser throws this runtime exception to stop parsing.", "-                // Just stop processing current Javadoc comment.", "-                return;", "+", "+            if (ps.getParseErrorMessage() == null) {", "+                processTree(ps.getTree());", "+            }", "+            else {", "+                final LocalizedMessage parseErrorMessage = ps.getParseErrorMessage();", "+                log(parseErrorMessage.getLineNo(), parseErrorMessage.getColumnNo()", "+                        , parseErrorMessage.getMessage());", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eece3953006154257cf34b04e6c07ebf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java", "commitBeforeChange": "37a393ae29949480ebd8d02fd903d0d18ee574f3", "commitAfterChange": "ffd17e5ad649a03e4c9044005d2cb707be1261a1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public boolean equals(Object object)", "signatureAfterChange": "      @Override     public boolean equals(Object o)", "diff": ["-    public boolean equals(Object object) {", "-        if (object instanceof SuppressElement) {", "-            final SuppressElement other = (SuppressElement) object;", "-", "-            // same file pattern?", "-            if (!this.filePattern.equals(other.filePattern)) {", "-                return false;", "-            }", "-", "-            // same check pattern?", "-            if (checkPattern != null) {", "-                if (!checkPattern.equals(other.checkPattern)) {", "-                    return false;", "-                }", "-            }", "-            else if (other.checkPattern != null) {", "-                return false;", "-            }", "-", "-            // same module id?", "-            if (moduleId != null) {", "-                if (!moduleId.equals(other.moduleId)) {", "-                    return false;", "-                }", "-            }", "-            else if (other.moduleId != null) {", "-                return false;", "-            }", "-", "-            // same line number filter?", "-            if (lineFilter != null) {", "-                if (!lineFilter.equals(other.lineFilter)) {", "-                    return false;", "-                }", "-            }", "-            else if (other.lineFilter != null) {", "-                return false;", "-            }", "-", "-            // same column number filter?", "-            if (columnFilter != null) {", "-                if (!columnFilter.equals(other.columnFilter)) {", "-                    return false;", "-                }", "-            }", "-            else if (other.columnFilter != null) {", "-                return false;", "-            }", "-", "-            // everything is the same", "+    public boolean equals(Object o) {", "+        if (this == o) {", "-        return false;", "+        if (o == null || getClass() != o.getClass()) {", "+            return false;", "+        }", "+        final SuppressElement that = (SuppressElement) o;", "+        return Objects.equals(filePattern, that.filePattern)", "+                && Objects.equals(checkPattern, that.checkPattern)", "+                && Objects.equals(moduleId, that.moduleId)", "+                && Objects.equals(linesCSV, that.linesCSV)", "+                && Objects.equals(columnsCSV, that.columnsCSV);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55975ded7853d48e8778ffd95ec49e59", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "495fdd189707a40cfcfca8042ddbd75d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java", "commitBeforeChange": "425fd5a27cd567d5784bd246729c55cf8cda3dbd", "commitAfterChange": "6438bb246b9e6b2b6cd31e1c028853440d52d64b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void testIsSuppressedWithAllArgument() throws Exception", "signatureAfterChange": "      @Test     public void testIsSuppressedWithAllArgument() throws Exception", "diff": ["-        assertFalse(SuppressWarningsHolder.isSuppressed(\"SourceName\", 100, 10));", "+        final Checker source = new Checker();", "+        final LocalizedMessage firstMessageForTest =", "+            new LocalizedMessage(100, 10, null, null, null, \"id\", MemberNameCheck.class, \"msg\");", "+        final AuditEvent firstEventForTest =", "+            new AuditEvent(source, \"fileName\", firstMessageForTest);", "+        assertFalse(SuppressWarningsHolder.isSuppressed(firstEventForTest));", "-        assertTrue(SuppressWarningsHolder.isSuppressed(\"SourceName\", 100, 150));", "+        final LocalizedMessage secondMessageForTest =", "+            new LocalizedMessage(100, 150, null, null, null, \"id\", MemberNameCheck.class, \"msg\");", "+        final AuditEvent secondEventForTest =", "+            new AuditEvent(source, \"fileName\", secondMessageForTest);", "+        assertTrue(SuppressWarningsHolder.isSuppressed(secondEventForTest));", "-        assertTrue(SuppressWarningsHolder.isSuppressed(\"SourceName\", 200, 1));", "+        final LocalizedMessage thirdMessageForTest =", "+            new LocalizedMessage(200, 1, null, null, null, \"id\", MemberNameCheck.class, \"msg\");", "+        final AuditEvent thirdEventForTest =", "+            new AuditEvent(source, \"fileName\", thirdMessageForTest);", "+        assertTrue(SuppressWarningsHolder.isSuppressed(thirdEventForTest));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5975e7430d14b52cf43d4f85af9b98a4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "e21177aefee3694a53edd75b41c6c1760bf1301a", "commitAfterChange": "3bee3800f4c10f34f2bd0736cc09830a7f9eb6ab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public JTreeTable(TreeTableModel treeTableModel)", "signatureAfterChange": "      public JTreeTable(TreeTableModel treeTableModel)", "diff": ["+", "+        Action expand = new AbstractAction() {", "+                public void actionPerformed(ActionEvent e) {", "+                    TreePath selected = tree.getSelectionPath();", "+                    if (tree.isExpanded(selected)) {", "+                        tree.collapsePath(selected);", "+                    }", "+                    else {", "+                        tree.expandPath(selected);", "+                    }", "+                    tree.setSelectionPath(selected);", "+                }", "+            };", "+        KeyStroke stroke = KeyStroke.getKeyStroke(\"ENTER\");", "+        String command = \"expand/collapse\";", "+        getInputMap().put(stroke, command);", "+        getActionMap().put(command, expand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71f687d1a720dc699f5699aa77439fe7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "bd503e1576ded224169c1f15b9ca6cb8d08f9cb2", "commitAfterChange": "f2b01a44a216e88957eb6cb22e4b0e39429a6c84", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["+        // add custom listeners", "+        if (line.hasOption(\"l\")) {", "+            final String listeners = line.getOptionValue(\"l\");", "+            final StringTokenizer t = new StringTokenizer(listeners, \",\");", "+            while (t.hasMoreTokens()) {", "+                final String className = t.nextToken();", "+                AuditListener customListener = null;", "+                try {", "+                    customListener =", "+                        (AuditListener) Class.forName(className).newInstance();", "+                }", "+                catch (Exception e) {", "+                    System.out.println(\"Unable to create listener '\"", "+                        + className + \"': \" + e);", "+                    e.printStackTrace(System.out);", "+                    System.exit(1);", "+                }", "+                c.addListener(customListener);", "+            }", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d670e6442e1a5ae9794fe38f046a12", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java", "commitBeforeChange": "84a9ea5f6b3f000b840f184100ed3d2ebc096978", "commitAfterChange": "ca39f3af5a1e4fa088e42dde4ab3fc0f8daac723", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        if (mIgnoreDirectoryName) {", "+            return;", "+        }", "+", "+        // Calculate the directory name, but stripping off the last", "+        // part.", "+        final String fname = getFileContents().getFilename();", "+        final int lastPos = fname.lastIndexOf(File.separatorChar);", "+        final String dirname = fname.substring(0, lastPos);", "+", "+        // Convert the found package name into the expected directory name.", "+        final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();", "+        final FullIdent full = FullIdent.createFullIdent(nameAST);", "+        final String expected = full.getText().replace('.', File.separatorChar);", "+", "+        // Finally see that the real directory ends with the expected directory", "+        if (!dirname.endsWith(expected)) {", "+            log(full.getLineNo(),", "+                full.getColumnNo(),", "+                \"package.dir.mismatch\",", "+                expected);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f21e78638134f159c06f1f0e2cf6c8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "ddd153f70798bcf1e33629e98407db8f9dbe0dcc", "commitAfterChange": "adce874628730a881c533bb04db2688d03a60fc6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "         public void endElement(String aNamespaceURI,                                String aLocalName,                                String aQName)", "signatureAfterChange": "         public void endElement(String aNamespaceURI,                                String aLocalName,                                String aQName)             throws SAXException", "diff": ["+            throws SAXException", "-                mConfigStack.pop();", "+", "+                Configuration recentModule = (Configuration) mConfigStack.pop();", "+", "+                // remove modules with severity ignore if these modules should", "+                // be omitted", "+                SeverityLevel level = null;", "+                try {", "+                    final String severity = recentModule.getAttribute(SEVERITY);", "+                    level = SeverityLevel.getInstance(severity);", "+                }", "+                catch (CheckstyleException e) {", "+                    //severity not set -> ignore", "+                    ;", "+                }", "+", "+                // omit this module if these should be omitted and the module", "+                // has the severity 'ignore'", "+                final boolean omitModule = mOmitIgnoredModules", "+                    && SeverityLevel.IGNORE.equals(level);", "+", "+                if (omitModule && !mConfigStack.isEmpty()) {", "+                    final DefaultConfiguration parentModule =", "+                        (DefaultConfiguration) mConfigStack.peek();", "+                    parentModule.removeChild(recentModule);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f4ba43006fbe72c14845236eede0b8d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "commitBeforeChange": "205cbab8af785b1cddb9c4123ff3fa8b63dcbe1c", "commitAfterChange": "4e1f8ef98e9e43d6101a00bdecd040377472f852", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["-        final Set foundThrows = new HashSet();", "+        final Set foundThrows = new HashSet(); //used for performance only", "-                final FullIdent fi = (FullIdent) throwIt.next();", "+                final ExceptionInfo ei = (ExceptionInfo) throwIt.next();", "+                final FullIdent fi = ei.getFullIdent();", "-                    throwIt.remove();", "+                    ei.setFound();", "+                }", "+                else if (mAllowThrowsTagsForSubclasses) {", "+                    final ClassResolver cr = getClassResolver();", "+                    try {", "+                        final Class documentedClass = cr.resolve(documentedEx);", "+                        try {", "+                            final Class declaredClass = cr.resolve(declaredEx);", "+                            found = ", "+                                declaredClass.isAssignableFrom(documentedClass);", "+                            if (found) {", "+                                ei.setFound();", "+                            }", "+                        }", "+                        catch (ClassNotFoundException e) {", "+                            log(tag.getLineNo(), \"javadoc.classInfo\",", "+                                \"@throws\", declaredEx);", "+                        }", "+                    }", "+                    catch (ClassNotFoundException e) {", "+                        log(tag.getLineNo(), \"javadoc.classInfo\",", "+                                      \"@throws\", documentedEx);", "+                    }", "-                    final ClassResolver cr =", "-                        new ClassResolver(", "-                            getClassLoader(),", "-                            mPackageFullIdent.getText(),", "-                            mImports);", "+                    final ClassResolver cr = getClassResolver();", "-                final FullIdent fi = (FullIdent) throwIt.next();", "-                log(fi.getLineNo(), fi.getColumnNo(),", "-                    \"javadoc.expectedTag\", \"@throws\", fi.getText());", "+                final ExceptionInfo ei = (ExceptionInfo) throwIt.next();", "+                if (!ei.isFound()) {", "+                    final FullIdent fi = ei.getFullIdent();", "+                    log(fi.getLineNo(), fi.getColumnNo(),", "+                        \"javadoc.expectedTag\", \"@throws\", fi.getText());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9701d26047bbe32d0277f2d812afb9d1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java", "commitBeforeChange": "82fc3397f8b8776ef41b5aa2d3404e78a8b15ff7", "commitAfterChange": "7b3a329cf8645625097a2e17eb62a3430d9bb35a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        if (mIgnoreDirectoryName) {", "-            return;", "-        }", "-", "-        // Calculate the directory name, but stripping off the last", "-        // part.", "-        final String fname = getFileContents().getFilename();", "-        final int lastPos = fname.lastIndexOf(File.separatorChar);", "-        final String dirname = fname.substring(0, lastPos);", "-", "-        // Convert the found package name into the expected directory name.", "-        final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();", "-        final FullIdent full = FullIdent.createFullIdent(nameAST);", "-        final String expected = full.getText().replace('.', File.separatorChar);", "-", "-        // Finally see that the real directory ends with the expected directory", "-        if (!dirname.endsWith(expected)) {", "-            log(full.getLineNo(),", "-                full.getColumnNo(),", "-                \"package.dir.mismatch\",", "-                expected);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c08783af6dbceaaccd1d6f693c41159e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "cd32cd1ab02fa47192c87af5dcfa9e579681723f", "commitAfterChange": "2effcfd0bcdfa7fc25bfff22e6f893ac6fb4478b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["-        Properties properties = System.getProperties();", "+        Properties props = System.getProperties();", "+        final List foundFiles = new ArrayList();", "-                traverse(new File(aArgs[++i]), files);", "+                traverse(new File(aArgs[++i]), foundFiles);", "-                properties = loadProperties(new File(aArgs[++i]));", "+                props = loadProperties(new File(aArgs[++i]));", "+        // Check that I have a config file", "+        if (files.isEmpty()) {", "+            System.out.println(\"Need to specify a config file\");", "+            usage();", "+        }", "+", "+        // Load the config file", "+        final String configFname = (String) files.remove(0);", "+        CheckConfiguration[] checkConfigs = null;", "+        try {", "+            checkConfigs = loadConfigs(configFname);", "+        }", "+        catch (CheckstyleException e) {", "+            System.out.println(\"Error loading configuration file\");", "+            e.printStackTrace(System.out);", "+            System.exit(1);", "+        }", "+", "-            c = new Checker(new Configuration(properties, System.out));", "+            c = new Checker(new Configuration(props, System.out), checkConfigs);", "+        files.addAll(foundFiles);", "-            c.process((String[]) files.toArray(new String[files.size()]));", "+            c.processNEW((String[]) files.toArray(new String[files.size()]));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c40a24a131a8ec33790fe98a61bbde87", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "798aac8ff0ec17573d316b64ea1b86ecf387f12f", "commitAfterChange": "5a4f991d2738c824f70f361b21d9da193ff3751c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public IndentLevel getLevelImpl()", "signatureAfterChange": "     public IndentLevel getLevelImpl()", "diff": ["+", "+                // we should increase indentation only if this is the first", "+                // chained method call which was moved to the next line", "+                DetailAST main = getMainAst();", "+                DetailAST dot = (DetailAST) main.getFirstChild();", "+                DetailAST target = (DetailAST) dot.getFirstChild();", "+", "+                if (dot.getType() == TokenTypes.DOT", "+                    && target.getType() == TokenTypes.METHOD_CALL)", "+                {", "+                    DetailAST dot1 = (DetailAST) target.getFirstChild();", "+                    DetailAST target1 = (DetailAST) dot1.getFirstChild();", "+", "+                    if (dot1.getType() == TokenTypes.DOT", "+                        && target1.getType() == TokenTypes.METHOD_CALL)", "+                    {", "+                        return container.getLevel();", "+                    }", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77e0d0c608d13ee750b87fbe231a5180", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "177f5a13b6d88c48085c57ad2d181606", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void leaveMethodDef(DetailAST aAST)", "signatureAfterChange": "     private void leaveMethodDef(DetailAST ast)", "diff": ["-    private void leaveMethodDef(DetailAST aAST)", "+    private void leaveMethodDef(DetailAST ast)", "-        final BigInteger max = BigInteger.valueOf(mMax);", "-        if (mCurrentValue.compareTo(max) > 0) {", "-            log(aAST, getMessageID(), mCurrentValue, max);", "+        final BigInteger bigIntegerMax = BigInteger.valueOf(max);", "+        if (currentValue.compareTo(bigIntegerMax) > 0) {", "+            log(ast, getMessageID(), currentValue, bigIntegerMax);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1c88beea4e2507e655ce50f32773ddc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setIgnoreNamePattern(String aRegexp)", "signatureAfterChange": "     public void setIgnoreNamePattern(String regexp)", "diff": ["-    public void setIgnoreNamePattern(String aRegexp)", "+    public void setIgnoreNamePattern(String regexp)", "-        mIgnoreNameRegexp = aRegexp;", "-        if (!(aRegexp == null || aRegexp.length() == 0)) {", "-            mIgnoreNamePattern = Pattern.compile(aRegexp);", "+        ignoreNameRegexp = regexp;", "+        if (!(regexp == null || regexp.length() == 0)) {", "+            ignoreNamePattern = Pattern.compile(regexp);", "-            mIgnoreNamePattern = null;", "+            ignoreNamePattern = null;"]}]}
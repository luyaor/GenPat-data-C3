{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "208bf8285952d8d129044822612bcf81", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84d25c377d428dc4fb8e25c291a0176d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/Resolver.java", "commitBeforeChange": "a6990c84f05a74679588549df56143d3a5d053d1", "commitAfterChange": "748df52c1317e298203bf28e48545d3e50db59f1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void handleIf(BlockDef block)", "signatureAfterChange": "     private void handleIf(BlockDef block)", "diff": ["-        if (body != null && body.getType() == TokenTypes.SLIST) {", "-            handleSList(body, block);", "-        }", "-        else {", "-            resolveExpression(body, block, null, true);", "-        }", "+        if (body != null) {", "+        \tif (body.getType() == TokenTypes.SLIST) {", "+            \thandleSList(body, block);", "+        \t}", "+        \telse {", "+            \tresolveExpression(body, block, null, true);", "+        \t}", "-        SymTabAST elseBody = (SymTabAST) body.getNextSibling();", "-        //handle Checkstyle grammar", "-        while ((elseBody != null)", "-            && (elseBody.getType() != TokenTypes.LITERAL_ELSE)) {", "-            elseBody = (SymTabAST) elseBody.getNextSibling();", "-        }", "-        /*", "-         if (elseBody != null && elseBody.getType() == TokenTypes.SLIST) {", "-             handleSList(elseBody, block);", "-         }else{", "-             resolveExpression(elseBody, block, null, true);", "-         }", "-         */", "-        if (elseBody != null) {", "-            elseBody = (SymTabAST) elseBody.getFirstChild();", "-        }", "-        if (elseBody != null) {", "-            resolveExpression(elseBody, block.getParentScope(), null, true);", "-        }", "+\t        SymTabAST elseBody = (SymTabAST) body.getNextSibling();", "+\t        //handle Checkstyle grammar", "+\t        while ((elseBody != null)", "+\t            && (elseBody.getType() != TokenTypes.LITERAL_ELSE)) {", "+\t            elseBody = (SymTabAST) elseBody.getNextSibling();", "+\t        }", "+\t        /*", "+\t         if (elseBody != null && elseBody.getType() == TokenTypes.SLIST) {", "+\t             handleSList(elseBody, block);", "+\t         }else{", "+\t             resolveExpression(elseBody, block, null, true);", "+\t         }", "+\t         */", "+\t        if (elseBody != null) {", "+\t            elseBody = (SymTabAST) elseBody.getFirstChild();", "+\t        }", "+\t        if (elseBody != null) {", "+\t            resolveExpression(elseBody, block.getParentScope(), null, true);", "+\t        }", "+\t    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8efd3908113de2ba9b0933f18cea264f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "0406304865b4fdd6e5294f0bcd948f1158f4ae84", "commitAfterChange": "e15f70ac5b1460236e14237acc3a041102238efd", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private String getImportGroup(boolean isStatic, String importPath)", "signatureAfterChange": "     private String getImportGroup(boolean isStatic, String importPath)", "diff": ["-        for (String group : customImportOrderRules) {", "-            if (matchesImportGroup(isStatic, importPath, group)) {", "-                return group;", "+        RuleMatchForImport bestMatch = new RuleMatchForImport(NON_GROUP_RULE_GROUP, 0, 0);", "+        if (isStatic && customImportOrderRules.contains(STATIC_RULE_GROUP)) {", "+            bestMatch.group = STATIC_RULE_GROUP;", "+            bestMatch.matchLength = importPath.length();", "+        }", "+        else if (customImportOrderRules.contains(SAME_PACKAGE_RULE_GROUP)) {", "+            final String importPathTrimmedToSamePackageDepth =", "+                    getFirstNDomainsFromIdent(samePackageMatchingDepth, importPath);", "+            if (samePackageDomainsRegExp.equals(importPathTrimmedToSamePackageDepth)) {", "+                bestMatch.group = SAME_PACKAGE_RULE_GROUP;", "+                bestMatch.matchLength = importPath.length();", "-        return NON_GROUP_RULE_GROUP;", "+        if (bestMatch.group.equals(NON_GROUP_RULE_GROUP)) {", "+            for (String group : customImportOrderRules) {", "+                if (STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(group)) {", "+                    bestMatch = findBetterPatternMatch(importPath,", "+                            STANDARD_JAVA_PACKAGE_RULE_GROUP, standardPackageRegExp, bestMatch);", "+                }", "+                if (SPECIAL_IMPORTS_RULE_GROUP.equals(group)) {", "+                    bestMatch = findBetterPatternMatch(importPath,", "+                            SPECIAL_IMPORTS_RULE_GROUP, specialImportsRegExp, bestMatch);", "+                }", "+            }", "+        }", "+        if (bestMatch.group.equals(NON_GROUP_RULE_GROUP)", "+                && customImportOrderRules.contains(THIRD_PARTY_PACKAGE_RULE_GROUP)", "+                && thirdPartyPackageRegExp.matcher(importPath).find()) {", "+            bestMatch.group = THIRD_PARTY_PACKAGE_RULE_GROUP;", "+        }", "+        return bestMatch.group;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfa83f2773c65ff61104eebdd079bc45", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java", "commitBeforeChange": "e21676f52f3d68294122244cea63b4ecbe92de8f", "commitAfterChange": "0f9490c4ab86e6df2cfe90db1ffe04e906a5edad", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void visitSingleLineComment(DetailAST singleLineComment)", "signatureAfterChange": "     private void visitSingleLineComment(DetailAST singleLineComment)", "diff": ["-        final DetailAST nextStatement = singleLineComment.getNextSibling();", "-        final DetailAST prevStatement = getPrevStatementFromSwitchBlock(singleLineComment);", "+        final DetailAST prevStmt = getPreviousStatementOfSingleLineComment(singleLineComment);", "+        final DetailAST nextStmt = singleLineComment.getNextSibling();", "-        if (nextStatement != null", "-            && nextStatement.getType() != TokenTypes.RCURLY", "-            && !isTrailingSingleLineComment(singleLineComment)", "-            && !areSameLevelIndented(singleLineComment, prevStatement, nextStatement)) {", "-", "-            log(singleLineComment.getLineNo(), MSG_KEY_SINGLE, nextStatement.getLineNo(),", "-                singleLineComment.getColumnNo(), nextStatement.getColumnNo());", "+        if (!isTrailingSingleLineComment(singleLineComment)) {", "+            if (isInEmptyCaseBlock(prevStmt, nextStmt)) {", "+                handleSingleLineCommentInEmptyCaseBlock(prevStmt, singleLineComment,", "+                    nextStmt);", "+            }", "+            else if (isFallThroughSingleLineComment(prevStmt, nextStmt)) {", "+                handleFallThroughtSingleLineComment(prevStmt, singleLineComment,", "+                    nextStmt);", "+            }", "+            else if (isInEmptyCodeBlock(prevStmt, nextStmt)) {", "+                handleSingleLineCommentInEmptyCodeBlock(singleLineComment, nextStmt);", "+            }", "+            else if (isSingleLineCommentAtTheEndOfTheCodeBlock(nextStmt)) {", "+                handleSIngleLineCommentAtTheEndOfTheCodeBlock(prevStmt, singleLineComment,", "+                    nextStmt);", "+            }", "+            else if (nextStmt != null", "+                        && !areSameLevelIndented(singleLineComment, nextStmt, nextStmt)) {", "+                log(singleLineComment.getLineNo(), MSG_KEY_SINGLE, nextStmt.getLineNo(),", "+                    singleLineComment.getColumnNo(), nextStmt.getColumnNo());", "+            }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e708133cc16c7e0d8e9d38ea96ff1d3f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "a4e3e3c1af37c52f72fb4b5aaa0411ae6d53bd36", "commitAfterChange": "74566f21a2298d53f9c97935542fdb630ad5da87", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "signatureAfterChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "diff": ["-        final int type = statement.getType();", "-        if (type == TokenTypes.LITERAL_IF) {", "-            result = isSingleLineIf(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_FOR) {", "-            result = isSingleLineFor(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_DO) {", "-            result = isSingleLineDoWhile(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_WHILE) {", "-            result = isSingleLineWhile(statement);", "-        }", "-        else if (type == TokenTypes.LAMBDA) {", "-            result = isSingleLineLambda(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_CASE) {", "-            result = isSingleLineCase(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_DEFAULT) {", "-            result = isSingleLineDefault(statement);", "-        }", "-        else {", "-            result = isSingleLineElse(statement);", "+        switch (statement.getType()) {", "+            case TokenTypes.LITERAL_IF:", "+                result = isSingleLineIf(statement);", "+                break;", "+            case TokenTypes.LITERAL_FOR:", "+                result = isSingleLineFor(statement);", "+                break;", "+            case TokenTypes.LITERAL_DO:", "+                result = isSingleLineDoWhile(statement);", "+                break;", "+            case TokenTypes.LITERAL_WHILE:", "+                result = isSingleLineWhile(statement);", "+                break;", "+            case TokenTypes.LAMBDA:", "+                result = isSingleLineLambda(statement);", "+                break;", "+            case TokenTypes.LITERAL_CASE:", "+                result = isSingleLineCase(statement);", "+                break;", "+            case TokenTypes.LITERAL_DEFAULT:", "+                result = isSingleLineDefault(statement);", "+                break;", "+            default:", "+                result = isSingleLineElse(statement);", "+                break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f14a25d65c0c40f163b1fa89ff9a50f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "b9936d973566f62a6989e7909f713abc7ff9cdb0", "commitAfterChange": "eb29e863de490162290425654a7fdcbd41d084df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "signatureAfterChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "diff": ["-        switch (statement.getType()) {", "-            case TokenTypes.LITERAL_IF:", "-                result = isSingleLineIf(statement);", "-                break;", "-            case TokenTypes.LITERAL_FOR:", "-                result = isSingleLineFor(statement);", "-                break;", "-            case TokenTypes.LITERAL_DO:", "-                result = isSingleLineDoWhile(statement);", "-                break;", "-            case TokenTypes.LITERAL_WHILE:", "-                result = isSingleLineWhile(statement);", "-                break;", "-            case TokenTypes.LAMBDA:", "-                result = isSingleLineLambda(statement);", "-                break;", "-            case TokenTypes.LITERAL_CASE:", "-                result = isSingleLineCase(statement);", "-                break;", "-            case TokenTypes.LITERAL_DEFAULT:", "-                result = isSingleLineDefault(statement);", "-                break;", "-            case TokenTypes.LITERAL_ELSE:", "-                result = isSingleLineElse(statement);", "-                break;", "-            default:", "-                final String exceptionMsg = statement.getText();", "-                throw new IllegalArgumentException(\"Unsupported token: \" + exceptionMsg);", "+        final int type = statement.getType();", "+", "+        if (type == TokenTypes.LITERAL_IF) {", "+            result = isSingleLineIf(statement);", "+        else if (type == TokenTypes.LITERAL_FOR) {", "+            result = isSingleLineFor(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_DO) {", "+            result = isSingleLineDoWhile(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_WHILE) {", "+            result = isSingleLineWhile(statement);", "+        }", "+        else if (type == TokenTypes.LAMBDA) {", "+            result = isSingleLineLambda(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_CASE) {", "+            result = isSingleLineCase(statement);", "+        }", "+        else if (type == TokenTypes.LITERAL_DEFAULT) {", "+            result = isSingleLineDefault(statement);", "+        }", "+        else {", "+            result = isSingleLineElse(statement);", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5efcd6460b423aeeaab119825a12f7f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "3e25a4911d0f0e4ea1b9c22f1b65158794f7d093", "commitAfterChange": "7f452f66c8ac18a9d0093c0cb05009ddae0b8ea9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        DetailAST theAst = ast;", "-        // Strange logic in this method to guard against checking RPAREN tokens", "-        // that are associated with a TYPECAST token.", "-        if (theAst.getType() != TokenTypes.RPAREN) {", "-            if (theAst.getType() == TokenTypes.CTOR_CALL", "-                || theAst.getType() == TokenTypes.SUPER_CTOR_CALL) {", "-                theAst = theAst.getFirstChild();", "-            }", "-            if (!isPreceedsEmptyForInit(theAst)) {", "-                processLeft(theAst);", "+        switch (ast.getType()) {", "+            case TokenTypes.METHOD_CALL:", "+                processLeft(ast);", "+                processRight(ast.findFirstToken(TokenTypes.RPAREN));", "+                processExpression(ast);", "+                break;", "+            case TokenTypes.EXPR:", "+            case TokenTypes.QUESTION:", "+                processExpression(ast);", "+                break;", "+            case TokenTypes.LITERAL_FOR:", "+                visitLiteralFor(ast);", "+                break;", "+            case TokenTypes.ANNOTATION:", "+            case TokenTypes.ENUM_CONSTANT_DEF:", "+            case TokenTypes.LITERAL_NEW:", "+            case TokenTypes.LITERAL_SYNCHRONIZED:", "+                visitNewEnumConstDefAnnotationSync(ast);", "+                break;", "+            default:", "+                processLeft(ast.findFirstToken(TokenTypes.LPAREN));", "+                processRight(ast.findFirstToken(TokenTypes.RPAREN));", "+        }", "+    }", "-        else if ((theAst.getParent() == null", "-                 || theAst.getParent().getType() != TokenTypes.TYPECAST", "-                 || theAst.getParent().findFirstToken(TokenTypes.RPAREN)", "-                     != theAst)", "-                 && !isFollowsEmptyForIterator(theAst)) {", "-            processRight(theAst);"]}]}
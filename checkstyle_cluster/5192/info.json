{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcb3167d5e9c3484f8c9fc5d7df8d434", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd9fcb3faf44d6ce171510d46bd14772", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "fd33eb9c26eb958e03a91ac40a18245f8a41c584", "commitAfterChange": "bdda55ed1b207cab5e7f8ab3e6ebfb4d07a62a5a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getDisallowedAbbreviation(String str)", "signatureAfterChange": "     private String getDisallowedAbbreviation(String str)", "diff": ["-                    // -1 as a first capital is usually beginning of next word", "-                    final int abbrLength = endIndex - beginIndex;", "-                    if (abbrLength > allowedAbbreviationLength) {", "-                        result = str.substring(beginIndex, endIndex);", "-                        if (!allowedAbbreviations.contains(result)) {", "-                            break;", "-                        }", "-                        else {", "-                            result = null;", "-                        }", "+                    // -1 as a first capital is usually beginning of next word", "+                    result = getAbbreviationIfIllegal(str, beginIndex, endIndex);", "+                    if (result != null) {", "+                        break;", "-        if (abbrStarted) {", "+        // if abbreviation at the end of name and it is not single character (example: scaleX)", "+        if (abbrStarted && beginIndex != str.length() - 1) {", "-            final int abbrLength = endIndex - beginIndex;", "-            if (abbrLength > 1 && abbrLength > allowedAbbreviationLength) {", "-                result = str.substring(beginIndex, endIndex);", "-                if (allowedAbbreviations.contains(result)) {", "-                    result = null;", "-                }", "+            result = getAbbreviationIfIllegal(str, beginIndex, endIndex);", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f686fef21208f1d782f5f47d180b1c95", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private String getDisallowedAbbreviation(String aString)", "signatureAfterChange": "     private String getDisallowedAbbreviation(String string)", "diff": ["-    private String getDisallowedAbbreviation(String aString)", "+    private String getDisallowedAbbreviation(String string)", "-        for (int index = 0; index < aString.length(); index++) {", "-            final char symbol = aString.charAt(index);", "+        for (int index = 0; index < string.length(); index++) {", "+            final char symbol = string.charAt(index);", "-                    if (abbrLength > mAllowedAbbreviationLength) {", "-                        result = aString.substring(beginIndex, endIndex);", "-                        if (!mAllowedAbbreviations.contains(result)) {", "+                    if (abbrLength > allowedAbbreviationLength) {", "+                        result = string.substring(beginIndex, endIndex);", "+                        if (!allowedAbbreviations.contains(result)) {", "-            final int endIndex = aString.length();", "+            final int endIndex = string.length();", "-            if (abbrLength > 1 && abbrLength > mAllowedAbbreviationLength) {", "-                result = aString.substring(beginIndex, endIndex);", "-                if (mAllowedAbbreviations.contains(result)) {", "+            if (abbrLength > 1 && abbrLength > allowedAbbreviationLength) {", "+                result = string.substring(beginIndex, endIndex);", "+                if (allowedAbbreviations.contains(result)) {"]}]}
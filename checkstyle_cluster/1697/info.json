{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "51b2d2790671ac611a978491d46d753b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a442dec9b0b9866b0cc025850739d64", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java", "commitBeforeChange": "1ef123bf60e8f4ba348f2e6399175dee62f016b2", "commitAfterChange": "bc034f53c0b807bc1a4234a3c0313d3761ed5b62", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testDestroyNonExistingCache() throws Exception", "signatureAfterChange": "      @Test     public void testDestroyNonExistingCache() throws Exception", "diff": ["+", "+        // We use assumption to satisfy coverage rate on OS Windows, since persist() method of", "+        // class PropertyCacheFile does not throw IOException on OS Linux when path to a cache", "+        // directory is invalid on OS Windows.", "+        Assume.assumeTrue(System.getProperty(\"os.name\")", "+            .toLowerCase(Locale.ENGLISH).startsWith(\"windows\"));", "+", "+        final TreeWalker treeWalker = new TreeWalker();", "+        treeWalker.configure(new DefaultConfiguration(\"default config\"));", "+        final String tempFilePath = temporaryFolder.newFile().getPath() + \".\\\\\\'\";", "+        treeWalker.setCacheFile(tempFilePath);", "+        try {", "+            treeWalker.destroy();", "+            fail(\"Exception did not happen\");", "+        }", "+        catch (IllegalStateException ex) {", "+            assertTrue(ex.getCause() instanceof IOException);", "+        }", "+    }", "-            assertTrue(ex.getCause() instanceof IOException);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31de441f0efe95fe3c155d55215d6936", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "78a5fd3494e8f3fe6e5edd0925f46b43583451fe", "commitAfterChange": "3cd6646941eca3da7d3b9a221c88e4c1d214876e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private String[] extractCComment(int aStartLineNo, int aStartColNo,             int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     private String[] extractCComment(int aStartLineNo, int aStartColNo,             int aEndLineNo, int aEndColNo)", "diff": ["-            retVal[0] = mLines[aStartLineNo - 1].substring(aStartColNo,", "+            retVal[0] = line(aStartLineNo - 1).substring(aStartColNo,", "-            retVal[0] = mLines[aStartLineNo - 1].substring(aStartColNo);", "+            retVal[0] = line(aStartLineNo - 1).substring(aStartColNo);", "-                retVal[i - aStartLineNo + 1] = mLines[i];", "+                retVal[i - aStartLineNo + 1] = line(i);", "-            retVal[retVal.length - 1] = mLines[aEndLineNo - 1].substring(0,", "+            retVal[retVal.length - 1] = line(aEndLineNo - 1).substring(0,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "353723711887af4bc829a9dea2087db6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java", "commitBeforeChange": "46146514c3c40ee8077578ad39f1289395afb3de", "commitAfterChange": "0340dcb26d5db9625e8e1f093f39165b8bdb18bf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "     public void beginTree(DetailAST aRootAST)", "diff": ["-    /** @see com.puppycrawl.tools.checkstyle.api.Check */", "-    public void beginTree(DetailAST aRootAST)", "-    {", "-", "-        final String[] lines = getLines();", "-", "-        if (mHeaderLines.length > lines.length) {", "-            log(1, \"header.missing\");", "-        }", "-        else {", "-            for (int i = 0; i < mHeaderLines.length; i++) {", "-                // skip lines we are meant to ignore", "-                if (isIgnoreLine(i + 1)) {", "-                    continue;", "-                }", "-", "-                if (!isMatch(i)) {", "-                    log(i + 1, \"header.mismatch\", mHeaderLines[i]);", "-                    break; // stop checking", "-                }", "-            }", "-        }", "-    }", "+    /** {@inheritDoc} */", "+    public void beginTree(DetailAST aRootAST)", "+        if (getHeaderLines().length > getLines().length) {", "+            log(1, \"header.missing\");", "+        }", "+        else {", "+            for (int i = 0; i < getHeaderLines().length; i++) {", "+                if (!isMatch(i)) {", "+                    log(i + 1, \"header.mismatch\", getHeaderLines()[i]);", "+                    break; // stop checking", "+                }", "+            }", "+        }"]}]}
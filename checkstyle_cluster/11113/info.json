{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "049e58445f6c8d33713d161bc1c19eea", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b72949ab12893392ac2ecdf7c2c1a96", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "b0240a0200663fbf1d3146d1aefe12207fdde4af", "commitAfterChange": "9aa72722de7b5a4ffb5d50945c7bce8b58f25e8e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void findDuplicates()", "signatureAfterChange": "     private void findDuplicates()", "diff": ["-        for (int i = 0; i < mFiles.length; i++) {", "+        final int len = mFiles.length;", "+        for (int i = 0; i < len; i++) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "229e8dfa107cde1981a2490d547eff7b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "19708f981163ccbe8e4247e5f1b91caef788953b", "commitAfterChange": "7f35e143a2472ecb49625cc841bd0482fe3dfeea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public int getEditingRow()", "signatureAfterChange": "     public int getEditingRow()", "diff": ["-        return (getColumnClass(editingColumn) == TreeTableModel.class) ? -1 :", "-                editingRow;", "+        final Class editingClass = getColumnClass(editingColumn);", "+        return (editingClass == TreeTableModel.class) ? -1 : editingRow;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c30341944b1b4b70a9a30e83a84e7ab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "commitBeforeChange": "cf0644576fc953744def62e8888a4e48214f4b80", "commitAfterChange": "8ef4a669c0ac0cc625c2396c8166037019f51ac9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            counters.push(new MethodCounter(", "-                TokenTypes.INTERFACE_DEF == ast.getType()));", "+            final boolean inInterface = TokenTypes.INTERFACE_DEF == ast.getType();", "+            counters.push(new MethodCounter(inInterface));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dd1f09f155321301a4c33c519eaec83", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java", "commitBeforeChange": "8aec5bba7ea5d9c702db9a116d005ad81afbf1ad", "commitAfterChange": "085ce12db0983590844ccc24ea49f91686a30ed8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static String getFirstSentence(DetailNode ast)", "signatureAfterChange": "     private static String getFirstSentence(DetailNode ast)", "diff": ["+        final String periodSuffix = PERIOD + ' ';", "-                && child.getText().contains(\". \")) {", "+                && child.getText().contains(periodSuffix)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8314187e642224dc12ff6960355c4956", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/InputArrays.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override   public byte[] asBytes()", "signatureAfterChange": "      public byte[] asBytes()", "diff": ["-  @Override", "+    byte hash = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84ebf5f2e9e4eeada3a453d261195580", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/j2ee/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/j2ee/EntityBeanEjbCreateCheck.java", "commitBeforeChange": "24a774b1e89f010f7ac70c66f2c0d75e5ce53b87", "commitAfterChange": "9f4164a450bed42bb632400bc2d53ffcc9775235", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (nameAST.getText().equals(\"ejbCreate\")", "+        final String name = nameAST.getText();", "+        if (name.startsWith(\"ejbCreate\")", "-                    \"voidmethod.bean\", \"ejbCreate\");", "+                    \"voidmethod.bean\", name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9586a16a5362285ed46434d138477942", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/BaseCheckTestCase.java", "commitBeforeChange": "d31d4220cc7f9cf03fe9e4cd0fe7d9e305ffe096", "commitAfterChange": "a7d98740745af8c79e8d8a56c7b3ed75837b1695", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected Checker createChecker(Configuration aCheckConfig)         throws Exception", "signatureAfterChange": "      protected Checker createChecker(Configuration aCheckConfig)         throws Exception", "diff": ["-        c.setLocaleCountry(Locale.getDefault().getCountry());", "-        c.setLocaleLanguage(Locale.getDefault().getLanguage());", "+        // make sure the tests always run with english error messages", "+        // so the tests don't fail in supported locales like german", "+        final Locale locale = Locale.ENGLISH;", "+        c.setLocaleCountry(locale.getCountry());", "+        c.setLocaleLanguage(locale.getLanguage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "996080b305c56ee1eb9dce8dda31c263", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/comments/InputFullOfBlockComments.java", "commitBeforeChange": "d8aa0a462b5a8a0e9689aea5dae529879363258a", "commitAfterChange": "2c93af9335403f4a85ea5e99ff6d569e516a834f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "public static String main(String[] args)", "signatureAfterChange": "public static String main(String[] args)", "diff": ["+\t\tInteger[] array = null;", "+\t\treturn line;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa42d463e9aa83b498c65595bc051e95", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "987da3a4c5fac3476a4461892c919c0f6d9248bd", "commitAfterChange": "08d6efe49d2960d9bd61bfb9cca65910f0c19b58", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void setCacheFile(String aFileName)", "signatureAfterChange": "     public void setCacheFile(String aFileName)", "diff": ["-        mCache = new PropertyCacheFile(mConfig, aFileName);", "+        final Configuration configuration = getConfiguration();", "+        mCache = new PropertyCacheFile(configuration, aFileName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af581823f659ef7c673db0932881ae21", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "8aec5bba7ea5d9c702db9a116d005ad81afbf1ad", "commitAfterChange": "085ce12db0983590844ccc24ea49f91686a30ed8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,                           Pattern formatPattern, String format)", "signatureAfterChange": "     private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,                           Pattern formatPattern, String format)", "diff": ["+        final String tagPrefix = \"@\";", "-                    log(lineNo, TAG_FORMAT, \"@\" + tagName, format);", "+                    log(lineNo, TAG_FORMAT, tagPrefix + tagName, format);", "-            log(lineNo, MISSING_TAG, \"@\" + tagName);", "+            log(lineNo, MISSING_TAG, tagPrefix + tagName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2aedc560f328b85097026b53dea9ee4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "commitBeforeChange": "5ce6ad4df6ccdd575168b54e712707e9f77bb524", "commitAfterChange": "28d1968038af94b1f169eca09a12f19164daac04", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["-                if (fi.getText().equals(documentedEx)) {", "+                final String declaredEx = fi.getText();", "+                if (isSameType(declaredEx, documentedEx)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a0a8cdad72eb82f2dedf6fecec3782", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "d808a4e4d918ca30d11f21affa3d597aa16e4019", "commitAfterChange": "242028813d3d993bbb8a61af6c4f214705c4d7da", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["+                    String checkName = value;", "-                        value = value.substring(CHECKSTYLE_PREFIX.length());", "+                        checkName = checkName.substring(CHECKSTYLE_PREFIX.length());", "-                    entries.add(new Entry(value, firstLine, firstColumn,", "+                    entries.add(new Entry(checkName, firstLine, firstColumn,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ec7628327c2692d071c75053a7a929", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "6e96026ec6d95fc5eadd3044cab91c24c73c8e0c", "commitAfterChange": "e00c478dd61d9d883e41b500b780ab217582c2e7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "signatureAfterChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "diff": ["+        IndentLevel theLevel = aIndentLevel;", "-            aIndentLevel = new IndentLevel(aIndentLevel, getBasicOffset());", "+            theLevel = new IndentLevel(aIndentLevel, getBasicOffset());", "-                checkSingleLine(i, col.intValue(), aIndentLevel, false);", "+                checkSingleLine(i, col.intValue(), theLevel, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd658e8f8b4670e3349df9bce28d0170", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "958d0dae4d97b4122c7e54ce1b1bc23c0b00e6a0", "commitAfterChange": "fedf99f9a85f1a9db30f14ae072769d4ab6ac010", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected void setupChild(Configuration aChildConf)             throws CheckstyleException", "signatureAfterChange": "     protected void setupChild(Configuration aChildConf)             throws CheckstyleException", "diff": ["+            final String[] packageNames = getPackageNames();", "-                            getPackageNames(),", "+                            packageNames,", "-            fsc.setPackageNames(getPackageNames());", "+            fsc.setPackageNames(packageNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c440efbeed5b4f16221d93bfcb36ad85", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "16ba5b35f9f346e7cea294afaad7f9211605ecaa", "commitAfterChange": "06f9b6d2558f73962f2e7d984001db0086819c1d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void configure(Configuration aConfiguration)             throws CheckstyleException", "signatureAfterChange": "      public void configure(Configuration aConfiguration)             throws CheckstyleException", "diff": ["+            final String[] packageNames = getPackageNames();", "-                        mPackageNames, this.getClass().getClassLoader(), name);", "+                        packageNames, this.getClass().getClassLoader(), name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c60c70f014385eb32a96f31a14ab7de9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/grammars/java8/InputDefaultMethodsTest2.java", "commitBeforeChange": "3822f0d95ae2f2048ee0137d30c870e3de9b0df8", "commitAfterChange": "c589c8dce26371f852394b5c8524ee453ecab96f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic void doSomething()", "signatureAfterChange": " \t \tpublic void doSomething()", "diff": ["-\t\t\t\t", "+\t\tint a = 5;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb03d580d8ee8cea8fdf93ad4748d3ba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "280807188a150c5f51bfdfdb1b3e2031d14ae2f3", "commitAfterChange": "bc9eae330a4fc5c37eb368c85753ae11f2f2c322", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            final int lastLine, lastColumn;", "+            final int lastLine;", "+            final int lastColumn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f62ba0f815ad7eaa8d32cca0797284d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java", "commitBeforeChange": "00fb7f0c1852eb015933c7c121284597de29caad", "commitAfterChange": "ebfc07bcbd7a531f0daeb5aaa7956340a9238ec0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected final File[] filter(File[] aFiles)", "signatureAfterChange": "     protected final File[] filter(File[] aFiles)", "diff": ["+            final String fileName = file.getName();", "-                if (file.getName().endsWith(fileExtension)) {", "+                if (fileName.endsWith(fileExtension)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9924ef054dedc563e33811f86f145aa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "6e96026ec6d95fc5eadd3044cab91c24c73c8e0c", "commitAfterChange": "e00c478dd61d9d883e41b500b780ab217582c2e7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     ExpressionHandler createMethodCallHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "signatureAfterChange": "     ExpressionHandler createMethodCallHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "diff": ["+        ExpressionHandler theParent = aParent;", "-            aParent = getHandler(aIndentCheck, ast, aParent);", "-            mCreatedHandlers.put(ast, aParent);", "+            theParent = getHandler(aIndentCheck, ast, theParent);", "+            mCreatedHandlers.put(ast, theParent);", "-        return new MethodCallHandler(aIndentCheck, aAst, aParent);", "+        return new MethodCallHandler(aIndentCheck, aAst, theParent);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "232a1c9305cc4ee1973363bba75dcae3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "370a776125b5beacf8380582f212ad2d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheckTest.java", "commitBeforeChange": "2a01965deb18e6301b72cb8b2b131cba896b7a4e", "commitAfterChange": "c18071b7561b99767e871be9d4d7711eb15b76f1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testIntegerOverflow() throws Exception", "signatureAfterChange": "      public void testIntegerOverflow() throws Exception", "diff": ["+", "+        final long largerThanMaxInt = 3486784401L;", "+        // use i18n for number formating so test wont fail in non-english environments", "+        final String expectedComplexity = NumberFormat.getInstance().format(largerThanMaxInt);", "+", "-            \"9:5: NPath Complexity is 3,486,784,401 (max allowed is 0).\" // larger than MAXINT", "+            \"9:5: NPath Complexity is \" + expectedComplexity + \" (max allowed is 0).\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce475666752f6ded8309c51a282bed33", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter5naming/rule528typevariablenames/ClassTypeParameterNameTest.java", "commitBeforeChange": "41044d42b8f21ae00792f101a63101bf87d7fd61", "commitAfterChange": "7a4ec11d123dc0bbf7db943af715d19814d2e332", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testClassDefault() throws Exception", "signatureAfterChange": "      @Test     public void testClassDefault() throws Exception", "diff": ["+        final Configuration configuration = getCheckConfig(\"ClassTypeParameterName\");", "+        final String format = configuration.getAttribute(\"format\");", "-        final String filePath = builder.getFilePath(\"InputClassTypeParameterName\");", "+        final String filePath = getPath(\"InputClassTypeParameterName.java\");", "-        final Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf463511291fb5f1e8f7d32035eff907", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java", "commitBeforeChange": "6d74014969c04dd78a399644bbee772457d608c8", "commitAfterChange": "4c43406153cb5abc6c394a32625af9a7b1c6811e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public InputSource resolveEntity(String aPublicId, String aSystemId)         throws SAXException", "signatureAfterChange": "     public InputSource resolveEntity(String aPublicId, String aSystemId)         throws SAXException", "diff": ["-        if (mPublicId.equals(aPublicId)) {", "+        if (mPublicIdToResourceNameMap.keySet().contains(aPublicId)) {", "+            final String dtdResourceName =", "+                    (String) mPublicIdToResourceNameMap.get(aPublicId);", "-                .getResourceAsStream(mDtdResourceName);", "+                .getResourceAsStream(dtdResourceName);", "-                    \"Unable to load internal dtd \" + mDtdResourceName);", "+                    \"Unable to load internal dtd \" + dtdResourceName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffab33c66ba18ae01eecfd0e091399d1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "703368166431ff7895b910417e971c61c0083c53", "commitAfterChange": "7968b294181371d74866361b41e5119d898b8136", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void auditStarted(AuditEvent aEvt)", "signatureAfterChange": "     public void auditStarted(AuditEvent aEvt)", "diff": ["-        mWriter.println(\"<checkstyle>\");", "+", "+        final ResourceBundle compilationProperties =", "+            ResourceBundle.getBundle(\"checkstylecompilation\");", "+        final String version =", "+            compilationProperties.getString(\"checkstyle.compile.version\");", "+", "+        mWriter.println(\"<checkstyle version=\\\"\" + version + \"\\\">\");"]}]}
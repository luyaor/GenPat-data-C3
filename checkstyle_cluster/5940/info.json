{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0a407a21526d74dbef6dd788ce1d7cd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "063fb80135f8d5a85a904241b7957d15", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "eb6de977b5ae1d23f975ea4739f4c67d5f70b786", "commitAfterChange": "2f7481ee4e20ae785298c31ec2f979752dd7eb03", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            final DetailAST modifiers =", "-                ast.findFirstToken(TokenTypes.MODIFIERS);", "-", "-            for (final int tokenType : TOKENS_FOR_INTERFACE_MODIFIERS) {", "-                final DetailAST modifier =", "-                        modifiers.findFirstToken(tokenType);", "-                if (modifier != null) {", "-                    log(modifier.getLineNo(), modifier.getColumnNo(),", "-                            MSG_KEY, modifier.getText());", "-                }", "-            }", "+            checkInterfaceModifiers(ast);", "+        }", "+        else if (TokenTypes.CTOR_DEF == ast.getType()", "+                && isEnumMember(ast)) {", "+            checkEnumConstructorModifiers(ast);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eecf14fa676fef5cd9f4da4d8fa9611c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "11eb99681a05047aecc2ce4b4bc51c849d1cfd44", "commitAfterChange": "b576ccf8793690e8459a6620cc1611531f3f9890", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static String validate(Details details, RightCurlyOption bracePolicy,                                    boolean shouldStartLine, String targetSourceLine)", "signatureAfterChange": "     private static String validate(Details details, RightCurlyOption bracePolicy,                                    boolean shouldStartLine, String targetSourceLine)", "diff": ["-        else if (bracePolicy == RightCurlyOption.SAME", "-                && rcurly.getLineNo() != nextToken.getLineNo()) {", "+        else if (shouldBeOnSameLine(bracePolicy, details)) {", "-        else if (shouldBeAloneOnLine(details, bracePolicy)) {", "+        else if (shouldBeAloneOnLine(bracePolicy, details)) {", "-        else if (shouldStartLine) {", "-            final boolean startsLine =", "-                    CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);", "-", "-            if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {", "-                violation = MSG_KEY_LINE_NEW;", "-            }", "+        else if (shouldStartLine && !startsLine(details, targetSourceLine)) {", "+            violation = MSG_KEY_LINE_NEW;"]}]}
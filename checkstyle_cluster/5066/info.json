{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "155ba308e32917af646c147f339a0891", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ac1f1b9ac6b7005f70dc8000fd50534", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/MethodCountCheck.java", "commitBeforeChange": "afa1c0d8cd66b51f02b750594cbb9c9855e3e74a", "commitAfterChange": "fead6ef45a093f2a4ffbff013802959c89e7a6c6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkCounters(DetailAST aAst)", "signatureAfterChange": "     private void checkCounters(MethodCounter aCounter, DetailAST aAst)", "diff": ["-    private void checkCounters(DetailAST aAst)", "+    private void checkCounters(MethodCounter aCounter, DetailAST aAst)", "-        final MethodCounter actualCounter = mCounters.peek();", "-        if (mCheckDefaultMethods) {", "-            if (actualCounter.value(Scope.PACKAGE) > mMax) {", "-                log(aAst.getLineNo(), \"too.many.defaultMethods\",", "-                    actualCounter.value(Scope.PACKAGE), mMax);", "-            }", "-        }", "-        if (mCheckPrivateMethods) {", "-            if (actualCounter.value(Scope.PRIVATE) > mMax) {", "-                log(aAst.getLineNo(), \"too.many.privateMethods\",", "-                    actualCounter.value(Scope.PRIVATE), mMax);", "-            }", "-        }", "-        if (mCheckProtectedMethods) {", "-            if (actualCounter.value(Scope.PROTECTED) > mMax) {", "-                log(aAst.getLineNo(), \"too.many.protectedMethods\",", "-                    actualCounter.value(Scope.PROTECTED), mMax);", "-            }", "-        }", "-        if (mCheckPublicMethods) {", "-            if (actualCounter.value(Scope.PUBLIC) > mMax) {", "-                log(aAst.getLineNo(), \"too.many.publicMethods\",", "-                    actualCounter.value(Scope.PUBLIC), mMax);", "-            }", "-        }", "+        checkMax(mMaxPrivate, aCounter.value(Scope.PRIVATE),", "+                 \"too.many.privateMethods\", aAst);", "+        checkMax(mMaxPackage, aCounter.value(Scope.PACKAGE),", "+                 \"too.many.packageMethods\", aAst);", "+        checkMax(mMaxProtected, aCounter.value(Scope.PROTECTED),", "+                 \"too.many.protectedMethods\", aAst);", "+        checkMax(mMaxPublic, aCounter.value(Scope.PUBLIC),", "+                 \"too.many.publicMethods\", aAst);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7f0afdd0c189bb3cdc062616c1434bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void checkCounters(MethodCounter aCounter, DetailAST aAst)", "signatureAfterChange": "     private void checkCounters(MethodCounter counter, DetailAST ast)", "diff": ["-    private void checkCounters(MethodCounter aCounter, DetailAST aAst)", "+    private void checkCounters(MethodCounter counter, DetailAST ast)", "-        checkMax(mMaxPrivate, aCounter.value(Scope.PRIVATE),", "-                 \"too.many.privateMethods\", aAst);", "-        checkMax(mMaxPackage, aCounter.value(Scope.PACKAGE),", "-                 \"too.many.packageMethods\", aAst);", "-        checkMax(mMaxProtected, aCounter.value(Scope.PROTECTED),", "-                 \"too.many.protectedMethods\", aAst);", "-        checkMax(mMaxPublic, aCounter.value(Scope.PUBLIC),", "-                 \"too.many.publicMethods\", aAst);", "-        checkMax(mMaxTotal, aCounter.getTotal(), \"too.many.methods\", aAst);", "+        checkMax(maxPrivate, counter.value(Scope.PRIVATE),", "+                 \"too.many.privateMethods\", ast);", "+        checkMax(maxPackage, counter.value(Scope.PACKAGE),", "+                 \"too.many.packageMethods\", ast);", "+        checkMax(maxProtected, counter.value(Scope.PROTECTED),", "+                 \"too.many.protectedMethods\", ast);", "+        checkMax(maxPublic, counter.value(Scope.PUBLIC),", "+                 \"too.many.publicMethods\", ast);", "+        checkMax(maxTotal, counter.getTotal(), \"too.many.methods\", ast);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d31bc1038f0c3658ce07c2f6f7ceebca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaf43019fe87cf6fe3428c168dc0f7e2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationTest.java", "commitBeforeChange": "52d9d94ca6700e0f2b151a0a55a7f0d5a8c19694", "commitAfterChange": "08f2b317d60e44b8a4f94c77a96fe2bf48e990b8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void testGetProperties()", "signatureAfterChange": "          public void testGetProperties()", "diff": ["-        int expectedSize = Defn.ALL_BOOLEAN_PROPS.length", "-                           + Defn.ALL_STRING_PROPS.length", "+        int expectedSize = Defn.ALL_STRING_PROPS.length", "-        for (int i = 0; i < Defn.ALL_BOOLEAN_PROPS.length; i++) {", "-            final String key = Defn.ALL_BOOLEAN_PROPS[i];", "-            assertTrue(\"Missing property: \" + key,", "-                       props.containsKey(key));", "-        }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebb1c49901c61dba9bfbc3af22e9f015", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "1846dacad6c2a3a04b3350b45bb8b05835192296", "commitAfterChange": "dd477210aefeabb265e105a9fe8120c8310605e8", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected AuditListener[] getListeners()         throws ClassNotFoundException, InstantiationException,         IllegalAccessException, IOException", "signatureAfterChange": "     protected AuditListener[] getListeners()         throws ClassNotFoundException, InstantiationException,         IllegalAccessException, IOException", "diff": ["-        final int listenerCount = mCustomListeners.size();", "-            new AuditListener[formatterCount + listenerCount];", "+            new AuditListener[formatterCount];", "-        //custom listeners", "-        for (int i = 0; i < listenerCount; i++) {", "-            final Listener listener = (Listener) mCustomListeners.get(i);", "-            listeners[formatterCount + i] = createCustomListener(listener);", "-        }", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c114222b0052f8806b1f1e1db0cced07", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5ab7aa446c7e5496d3293b1ae2a9b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "38bba612c02504fcb3db2bdbcdf1dda2252d179f", "commitAfterChange": "319b04ff74aaf0c08b9c417274872be47b93b346", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void checkUnusedTypeParamTags(         final List<JavadocTag> tags,         final List<String> typeParamNames)", "signatureAfterChange": "     private void checkUnusedTypeParamTags(         final List<JavadocTag> tags,         final List<String> typeParamNames)", "diff": ["-                matcher.find();", "-                final String typeParamName = matcher.group(1).trim();", "-                if (!typeParamNames.contains(typeParamName)) {", "-                    log(tag.getLineNo(), tag.getColumnNo(),", "-                        UNUSED_TAG,", "-                        JavadocTagInfo.PARAM.getText(),", "-                        OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);", "+                if (matcher.find()) {", "+                    final String typeParamName = matcher.group(1).trim();", "+                    if (!typeParamNames.contains(typeParamName)) {", "+                        log(tag.getLineNo(), tag.getColumnNo(),", "+                            UNUSED_TAG,", "+                            JavadocTagInfo.PARAM.getText(),", "+                            OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b37fc59a453210f213562e330b6cd135", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "c09131defe36dde56b2d9767d1953d93e20bd200", "commitAfterChange": "9df81b38a8207ee85a55644b2f7a4c8828433f4b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            else if (ScopeUtils.isOuterMostType(ast)) {", "-                // don't check author/version for inner classes", "+            else {", "-                checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),", "-                         authorFormatPattern, authorFormat);", "-                checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),", "-                         versionFormatPattern, versionFormat);", "+                if (ScopeUtils.isOuterMostType(ast)) {", "+                    // don't check author/version for inner classes", "+                    checkTag(lineNo, tags, JavadocTagInfo.AUTHOR.getName(),", "+                            authorFormatPattern, authorFormat);", "+                    checkTag(lineNo, tags, JavadocTagInfo.VERSION.getName(),", "+                            versionFormatPattern, versionFormat);", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5f17e8cfbaa639d23a46f9fbf6725f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cde5cfe352f921b447fda4734579fe8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "8313819dcbf3e9cc0700120014c78a99706d88bb", "commitAfterChange": "daf94e4e8e5b97ccbf9cdf7b45b2f054772f7de1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public int[] getDefaultTokens()", "signatureAfterChange": "     public int[] getDefaultTokens()", "diff": ["-            // PLUS,              //' +' TODO: unaray plus", "+            PLUS,              //' +' (unaray plus is UNARY_PLUS)", "-            // MINUS,             // '-' TODO: unary minus", "+            MINUS,             // '-' (unary minus is UNARY_MINUS)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13271fe8d0aaf5f23b09f04a0dec89c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "commitBeforeChange": "798aac8ff0ec17573d316b64ea1b86ecf387f12f", "commitAfterChange": "5a4f991d2738c824f70f361b21d9da193ff3751c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void testInvalidClassDefWithChecker()         throws Exception", "signatureAfterChange": "     public void testInvalidClassDefWithChecker()         throws Exception", "diff": ["-            \"138: object def lcurly at indentation level 6 not at correct indentation, 8\",", "-            \"142: object def rcurly at indentation level 6 not at correct indentation, 8\",", "+            \"138: object def lcurly at indentation level 6 not at correct indentation, [8, 12]\",", "+", "+            \"139: method def modifier at indentation level 12 not at correct indentation, 10\",", "+            \"141: method def rcurly at indentation level 12 not at correct indentation, 10\",", "+", "+            \"142: object def rcurly at indentation level 6 not at correct indentation, [8, 12]\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3efa421bac316008bf853a8ce381c842", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java", "commitBeforeChange": "dc5b2532bed4c868b8f74d9d37328eedc7dc066e", "commitAfterChange": "ceb894bc7a7a2dcb92d3ee4ba064110b2ffcf2f1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testTranslation()          throws Exception", "signatureAfterChange": "      @Test     public void testTranslation() throws Exception", "diff": ["-    public void testTranslation()", "-         throws Exception", "+    public void testTranslation() throws Exception", "-            \"0: Key 'only.english' missing.\"", "+            \"0: Key 'only.english' missing.\",", "-            new File(getPath(\"messages.properties\"))", "+            new File(getPath(\"messages.properties\")),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b12ead9ac16e26ffb3028ed3a8ce696", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java", "commitBeforeChange": "9dd69b267b626af533ddf8bc0d37b4fd3744fa6e", "commitAfterChange": "57b908199dfa5c2c9bf9388d92925ccfb312812f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static FilterSet loadSuppressions(             InputSource source, String sourceName)         throws CheckstyleException", "signatureAfterChange": "     private static FilterSet loadSuppressions(             InputSource source, String sourceName)         throws CheckstyleException", "diff": ["-            throw new CheckstyleException(\"unable to find \" + sourceName, e);", "+            throw new CheckstyleException(UNABLE_TO_FIND_ERROR_MESSAGE + sourceName, e);", "-            throw new CheckstyleException(\"unable to parse \"", "+            throw new CheckstyleException(\"Unable to parse \"", "-            throw new CheckstyleException(\"unable to read \" + sourceName, e);", "+            throw new CheckstyleException(\"Unable to read \" + sourceName, e);", "-            throw new CheckstyleException(\"number format exception \"", "+            throw new CheckstyleException(\"Number format exception \""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "655a3ac75aedfa3fcce1de69be6848a8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testDefault() throws Exception", "signatureAfterChange": "     public void testDefault() throws Exception", "diff": ["-            \"8: Wrong order for 'java.io.File' import.\",", "+            \"7: Wrong order for 'javax.swing.JComponent' import.\",", "+            \"9: Wrong order for 'java.io.File' import.\",", "+            \"11: Wrong order for 'java.io.IOException' import.\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a9a52ac281358db007056cab0cf1e50", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/LocalizedMessage.java", "commitBeforeChange": "495227c6086c83d4cb4547f7a3fe7ff8976853ea", "commitAfterChange": "20483ae032296610315fafb9a8774cfdd0e13857", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     String getMessage()", "signatureAfterChange": "     String getMessage()", "diff": ["-        final ResourceBundle bundle = ResourceBundle.getBundle(MESSAGE_BUNDLE);", "+        final ResourceBundle bundle =", "+            ResourceBundle.getBundle(MESSAGE_BUNDLE, sLocale, sLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f84a1ae2e1412c1325c1c30c2a8fd9a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java", "commitBeforeChange": "a395eeeb9b1df682d7e4d02794e246ee07a7c2b4", "commitAfterChange": "7f0e2b8f92ef375f2de3f59b9464746a0113b126", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "          private void validateFactory(ModuleFactory aModuleFactory)", "signatureAfterChange": "          private void validateFactory(ModuleFactory aModuleFactory)", "diff": ["-        String[] checkstylePackages = {", "+        final String[] checkstylePackages = {", "-            \"com.puppycrawl.tools.checkstyle.checks.\"", "+            \"com.puppycrawl.tools.checkstyle.checks.\",", "+            \"com.puppycrawl.tools.checkstyle.checks.javadoc.\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2a6993186bab7e90b17637e286b7d49", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheckTest.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testInterface()         throws Exception", "signatureAfterChange": "      public void testInterfaceAndAnnotation()         throws Exception", "diff": ["-    public void testInterface()", "+    public void testInterfaceAndAnnotation()", "-            \"24:16: Name 'data' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.\"", "+            \"24:16: Name 'data' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.\",", "+            \"64:16: Name 'data' must match pattern '^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$'.\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae0a13583d1d60423969073685f13a35", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "0b9d1c616f5cbb03e4bbad644c17d2ae892759fc", "commitAfterChange": "04b0bd64047e8eee752405a01de145b67f5fb845", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void walk(DetailAST aAST, FileContents aContents)", "signatureAfterChange": "     private void walk(DetailAST aAST, FileContents aContents)", "diff": ["-        notifyBegin(aContents);", "+        notifyBegin(aAST, aContents);", "-        notifyEnd();", "+        notifyEnd(aAST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f84eb5d9a1c66f6f81924d5f010a14", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheckTest.java", "commitBeforeChange": "3c0c72f96477afb542ee37b3336f4b7b7613ff29", "commitAfterChange": "6f0a3dee5efc6217383f9bfd6d7a3a116b1c885b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testIllegalAbstractClassName() throws Exception", "signatureAfterChange": "     @Test     public void testIllegalAbstractClassName() throws Exception", "diff": ["-        checkConfig.addAttribute(\"checkName\", \"true\");", "-        checkConfig.addAttribute(\"checkModifier\", \"false\");", "+        checkConfig.addAttribute(\"ignoreName\", \"false\");", "+        checkConfig.addAttribute(\"ignoreModifier\", \"true\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2617c59fcecad9d91aa909f2d910565", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "ba60fc038fcea18546b532064596149bcd5effe2", "commitAfterChange": "139609ac5d073ecb04381466f075f174b0aec8c9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void doVisitTokenInSameGroup(FullIdent aIdent, boolean aIsStatic,             boolean aPrevious, String aName, int aLine)", "signatureAfterChange": "     private void doVisitTokenInSameGroup(FullIdent aIdent, boolean aIsStatic,             boolean aPrevious, String aName, int aLine)", "diff": ["-            if (compare(mLastImport, aName, mCaseSensitive) >= 0) {", "+            if (compare(mLastImport, aName, mCaseSensitive) > 0) {", "-                (compare(mLastImport, aName, mCaseSensitive) >= 0))", "+                (compare(mLastImport, aName, mCaseSensitive) > 0))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e45b32ab6dbff368df1aa38d824c4786", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/testinputs/com/puppycrawl/tools/checkstyle/indentation/InputValidCommaIndent.java", "commitBeforeChange": "9a15d83aa778a856b091fdddf6b1807b239d3db8", "commitAfterChange": "be3f6d793cf12cba115d7a1aafd6d1affe0a4338", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "         public void method1(int x, int y, int z)", "signatureAfterChange": "         public void method1(int x, int y, int z)", "diff": ["-        boolean test;        ", "+        boolean test = true;        "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5f52f89b1a07958a5aa60497b69176e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "0dbbf3b83a9832eb381db6dc777916e9d7fa676f", "commitAfterChange": "16ae5032c5e25ad35475c9a0f2de578ea6e640e5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void processLiteralNew(DetailAST ast)", "signatureAfterChange": "     private void processLiteralNew(DetailAST ast)", "diff": ["-        if (ast.getParent().getType() == TokenTypes.METHOD_REF) {", "-            return;", "+        if (ast.getParent().getType() != TokenTypes.METHOD_REF) {", "+            instantiations.add(ast);", "-        instantiations.add(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed21dcd6e2d6cbff7bb605974550a70b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65", "commitAfterChange": "88830ca708e2deb22cae333057ebddd15f7f9c57", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "         public Tag(int line, int column, String text, boolean reportingOn,                    SuppressionCommentFilter filter)", "signatureAfterChange": "         public Tag(int line, int column, String text, boolean reportingOn,                    SuppressionCommentFilter filter)", "diff": ["-                    if (filter.messageFormat != null) {", "-                        format =", "-                            expandFromComment(text, filter.messageFormat, filter.onRegexp);", "-                        tagMessageRegexp = Pattern.compile(format);", "+                    if (filter.messageFormat == null) {", "+                        tagMessageRegexp = null;", "-                        tagMessageRegexp = null;", "+                        format =", "+                                expandFromComment(text, filter.messageFormat, filter.onRegexp);", "+                        tagMessageRegexp = Pattern.compile(format);", "-                    if (filter.messageFormat != null) {", "-                        format =", "-                            expandFromComment(", "-                                    text,", "-                                    filter.messageFormat,", "-                                    filter.offRegexp);", "-                        tagMessageRegexp = Pattern.compile(format);", "+                    if (filter.messageFormat == null) {", "+                        tagMessageRegexp = null;", "-                        tagMessageRegexp = null;", "+                        format =", "+                                expandFromComment(", "+                                        text,", "+                                        filter.messageFormat,", "+                                        filter.offRegexp);", "+                        tagMessageRegexp = Pattern.compile(format);"]}]}
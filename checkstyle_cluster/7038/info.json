{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1b3784bdb255230bd73427a902aa389", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5b8df4344786144bcb7d64ce900c55e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java", "commitBeforeChange": "798aac8ff0ec17573d316b64ea1b86ecf387f12f", "commitAfterChange": "5a4f991d2738c824f70f361b21d9da193ff3751c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected IndentLevel getChildrenExpectedLevel()", "signatureAfterChange": "     protected IndentLevel getChildrenExpectedLevel()", "diff": ["+        // if we have multileveled expected level then we should", "+        // try to suggest single level to children using curlies'", "+        // levels.", "+        if (getLevel().isMultiLevel() && hasCurlys()", "+            && !areOnSameLine(getLCurly(), getRCurly()))", "+        {", "+            if (startsLine(getLCurly())) {", "+                return new IndentLevel(expandedTabsColumnNo(getLCurly())", "+                                       + getBasicOffset());", "+            }", "+            else if (startsLine(getRCurly())) {", "+                return new IndentLevel(expandedTabsColumnNo(getRCurly())", "+                                       + getBasicOffset());", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ba58b4132fc83832409dcc0505e438", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "592d5d86b9cedfa04ad9990d23b244414aaad685", "commitAfterChange": "a5031acb330edaa2311acbce4945f7b44fc76b29", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                if (isTypeField(aAST) && !hasBlankLineAfter(aAST)) {", "-                    log(nextToken.getLineNo(),", "-                            \"empty.line.separator\", nextToken.getText());", "+                if (isTypeField(aAST) && !hasEmptyLineAfter(aAST)) {", "+                    log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());", "-                if (astType != nextToken.getType()", "-                    && !hasBlankLineAfter(aAST))", "+                if (astType != nextToken.getType() && !hasEmptyLineAfter(aAST)", "+                    || (aAST.getLineNo() > 1 && !hasEmptyLineBefore(aAST)", "+                            && aAST.getPreviousSibling() == null))", "-                    log(nextToken.getLineNo(),", "-                            \"empty.line.separator\", nextToken.getText());", "+                    log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());", "+            case TokenTypes.PACKAGE_DEF:", "+                if (aAST.getLineNo() > 1 && !hasEmptyLineBefore(aAST)) {", "+                    log(aAST.getLineNo(), \"empty.line.separator\", aAST.getText());", "+                }", "-                if (!hasBlankLineAfter(aAST)) {", "-                    log(nextToken.getLineNo(),", "-                            \"empty.line.separator\", nextToken.getText());", "+                if (!hasEmptyLineAfter(aAST)) {", "+                    log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());"]}]}
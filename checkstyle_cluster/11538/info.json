{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "559c3fda98d8e96ad712b7c95bba9b86", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d297ad82c71fc22fc4be34dbab78d81d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/TableMaker.java", "commitBeforeChange": "78d8f443ddff397eb9cefc8ab49ac1ad8924e002", "commitAfterChange": "458086242f4b8f1a837400b7b7f4b6fe67601ba6", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public void processFor(SymTabAST tree)", "signatureAfterChange": "   public void processFor(SymTabAST tree)", "diff": ["-    walkTree(tree.findFirstToken(TokenTypes.FOR_INIT), false);", "-    walkTree(tree.findFirstToken(TokenTypes.FOR_CONDITION), false);", "+    SymTabAST body;", "+    SymTabAST forEach = tree.findFirstToken(TokenTypes.FOR_EACH_CLAUSE);", "+    if (forEach != null) {", "+        walkTree(forEach, false);", "+        body = (SymTabAST)forEach.getNextSibling();", "+    }", "+    else {", "+        walkTree(tree.findFirstToken(TokenTypes.FOR_INIT), false);", "+        walkTree(tree.findFirstToken(TokenTypes.FOR_CONDITION), false);", "-    SymTabAST forIter = tree.findFirstToken(TokenTypes.FOR_ITERATOR);", "-    walkTree(forIter, false);", "+        SymTabAST forIter = tree.findFirstToken(TokenTypes.FOR_ITERATOR);", "+        walkTree(forIter, false);", "+        body = (SymTabAST)forIter.getNextSibling();", "+    }", "-    SymTabAST body = (SymTabAST)forIter.getNextSibling();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df96089a118b26ed2caa69a0c3e8a2bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java", "commitBeforeChange": "113ea8405c8b753540ee3423d7e37e383f269155", "commitAfterChange": "7f7db38a097a95c264307123924779380fb40077", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void checkForParams()", "signatureAfterChange": "     private void checkForParams()", "diff": ["-        checkExpressionSubtree(", "-            getMainAst().findFirstToken(TokenTypes.FOR_INIT),", "-            getLevel() + getIndentCheck().getBasicOffset(),", "-            false,", "-            false);", "-        checkExpressionSubtree(", "-            getMainAst().findFirstToken(TokenTypes.FOR_CONDITION),", "-            getLevel() + getIndentCheck().getBasicOffset(),", "-            false,", "-            false);", "-        checkExpressionSubtree(", "-            getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR),", "-            getLevel() + getIndentCheck().getBasicOffset(),", "-            false,", "-            false);", "+        IndentLevel expected = new IndentLevel(getLevel(), getBasicOffset());", "+", "+        DetailAST init = getMainAst().findFirstToken(TokenTypes.FOR_INIT);", "+        checkExpressionSubtree(init, expected, false, false);", "+", "+        DetailAST cond = getMainAst().findFirstToken(TokenTypes.FOR_CONDITION);", "+        checkExpressionSubtree(cond, expected, false, false);", "+", "+        DetailAST iter = getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR);", "+        checkExpressionSubtree(iter, expected, false, false);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bd705993ac195a4425053f92b2e7004", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5502fb333ffd17793ac9ad3fcdc2f64c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java", "commitBeforeChange": "acc526251af53865b8af68574d6235f9426cab4b", "commitAfterChange": "68c1541bb3d6a6128bf6f895bc82f8925d26c00d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                log(firstNode, \"multiple.variable.declarations.comma\");", "+                // Check if the multiple variable declarations are in a", "+                // for loop initializer. If they are, then no warning", "+                // should be displayed. Declaring multiple variables in", "+                // a for loop initializer is a good way to minimize", "+                // variable scope. Refer Feature Request Id - 2895985", "+                // for more details", "+                if (aAST.getParent().getType() != TokenTypes.FOR_INIT) {", "+                    log(firstNode, \"multiple.variable.declarations.comma\");", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a9d81870892d298a50bc9c3f70d4dbb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "c83b8eeeacc1d425089c1b315bd2ec9d7fb3fff0", "commitAfterChange": "9bcd88cf20db457966d0a83d2728a7c51a7d8623", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            if (aAST.getParent().getType() != TokenTypes.OBJBLOCK) {", "+            if (aAST.getParent().getType() != TokenTypes.OBJBLOCK", "+                && aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE)", "+            {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1336ff65254530fd3c7ad5e68dde8fb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "7cbf72f1871c3b0830c9ab401c54e620e9c440e9", "commitAfterChange": "f768f75438e1d71413a65d11a73208f7f8b449ea", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static boolean isInterfaceOrAnnotationMember(DetailAST ast)", "signatureAfterChange": "     private static boolean isInterfaceOrAnnotationMember(DetailAST ast)", "diff": ["-        final DetailAST parentTypeDef = ast.getParent().getParent();", "-        return parentTypeDef.getType() == TokenTypes.INTERFACE_DEF", "-               || parentTypeDef.getType() == TokenTypes.ANNOTATION_DEF;", "+        final DetailAST parentTypeDef =", "+                ast.getParent() != null ? ast.getParent().getParent() : null;", "+        return parentTypeDef != null", "+                && (parentTypeDef.getType() == TokenTypes.INTERFACE_DEF", "+                    || parentTypeDef.getType() == TokenTypes.ANNOTATION_DEF);"]}]}
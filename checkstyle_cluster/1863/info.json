{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68cac959067f9b720dd1591ab6a0e457", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d398d4a884ac0210f558ba3204caf5c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void testDefault() throws Exception", "signatureAfterChange": "      @Test     public void testDefault() throws Exception", "diff": ["-            \"21: 'import' should be separated from previous statement.\",", "-            \"35: 'CLASS_DEF' should be separated from previous statement.\",", "-            \"38: 'VARIABLE_DEF' should be separated from previous statement.\",", "-            \"39: 'STATIC_INIT' should be separated from previous statement.\",", "-            \"77: 'INTERFACE_DEF' should be separated from previous statement.\",", "+            \"21: \" + getCheckMessage(MSG_SHOULD_BE_SEPARATED, \"import\"),", "+            \"35: \" + getCheckMessage(MSG_SHOULD_BE_SEPARATED, \"CLASS_DEF\"),", "+            \"38: \" + getCheckMessage(MSG_SHOULD_BE_SEPARATED, \"VARIABLE_DEF\"),", "+            \"39: \" + getCheckMessage(MSG_SHOULD_BE_SEPARATED, \"STATIC_INIT\"),", "+            \"77: \" + getCheckMessage(MSG_SHOULD_BE_SEPARATED, \"INTERFACE_DEF\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd6e7166ca9d91d01df45cf99e9d21cd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testDefault() throws Exception", "signatureAfterChange": "      @Test     public void testDefault() throws Exception", "diff": ["-            \"8:1: '{' should be on the previous line.\",", "-            \"12:5: '{' should be on the previous line.\",", "-            \"21:5: '{' should be on the previous line.\",", "-            \"30:5: '{' should be on the previous line.\",", "-            \"39:5: '{' should be on the previous line.\",", "+            \"8:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"12:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"21:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"30:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"39:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),"]}]}
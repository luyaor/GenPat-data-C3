{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5365c5305b934c0d559e20700b4f1a3b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e1b935c2a2a7e303a4bbb72dbc585f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "768256c32a3e397f837ce27602bda49e3c5e0062", "commitAfterChange": "784842200f5307597d721ba0190c912cfab1b77f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["-        // Load the config file", "-        Configuration config = null;", "-        try {", "-            config = ConfigurationLoader.loadConfiguration(", "-                    line.getOptionValue(\"c\"), new PropertiesExpander(props));", "-        }", "-        catch (CheckstyleException e) {", "-            System.out.println(\"Error loading configuration file\");", "-            e.printStackTrace(System.out);", "-            System.exit(1);", "-        }", "+        final Configuration config = loadConfig(line, props);", "-            try {", "-                moduleFactory = PackageNamesLoader.loadModuleFactory(", "-                    line.getOptionValue(\"n\"));", "-            }", "-            catch (CheckstyleException e) {", "-                System.out.println(\"Error loading package names file\");", "-                e.printStackTrace(System.out);", "-                System.exit(1);", "-            }", "+            moduleFactory = loadPackages(line);", "-        // create the appropriate listener", "-        final String format =", "-            line.hasOption(\"f\") ? line.getOptionValue(\"f\") : \"plain\";", "+        final AuditListener listener = createListener(line, out, closeOut);", "+        final List files = getFilesToProcess(line);", "+        final Checker c = createChecker(config, moduleFactory, listener);", "+        addCustomListeners(c, line);", "-        AuditListener listener = null;", "-        if (\"xml\".equals(format)) {", "-            listener = new XMLLogger(out, closeOut);", "-        }", "-        else if (\"plain\".equals(format)) {", "-            listener = new DefaultLogger(out, closeOut);", "-        }", "-        else {", "-            System.out.println(\"Invalid format: (\" + format", "-                               + \"). Must be 'plain' or 'xml'.\");", "-            usage();", "-        }", "+        final File[] processedFiles = new File[files.size()];", "+        files.toArray(processedFiles);", "+        final int numErrs = c.process(processedFiles);", "+        c.destroy();", "+        System.exit(numErrs);", "+    }", "-        // Get all the Java files", "-        final List files = new LinkedList();", "-        if (line.hasOption(\"r\")) {", "-            final String[] values = line.getOptionValues(\"r\");", "-            for (int i = 0; i < values.length; i++) {", "-                traverse(new File(values[i]), files);", "-            }", "-        }", "-", "-        final String[] remainingArgs = line.getArgs();", "-        for (int i = 0; i < remainingArgs.length; i++) {", "-            files.add(new File(remainingArgs[i]));", "-        }", "-", "-        if (files.isEmpty()) {", "-            System.out.println(\"Must specify files to process\");", "-            usage();", "-        }", "-", "-        // create the checker", "-        Checker c = null;", "-        try {", "-            c = new Checker();", "-            c.setModuleFactory(moduleFactory);", "-            c.configure(config);", "-            c.addListener(listener);", "-        }", "-        catch (Exception e) {", "-            System.out.println(\"Unable to create Checker: \"", "-                               + e.getMessage());", "-            e.printStackTrace(System.out);", "-            System.exit(1);", "-        }", "-", "-        // add custom listeners", "-        if (line.hasOption(\"l\")) {", "-            final String listeners = line.getOptionValue(\"l\");", "-                c.addListener(customListener);", "-        final File[] processedFiles = new File[files.size()];", "-        files.toArray(processedFiles);", "-        final int numErrs = c.process(processedFiles);", "-        c.destroy();", "-        System.exit(numErrs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88426e984c6e8c29c9d50b3948f51b32", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "7ae04fd647ca3584216920114ed7aba5ffc6c587", "commitAfterChange": "1cea3765893e83e0d58ca110113e0d05b15a798a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["-        if (aArgs.length == 0) {", "+        // parse the parameters", "+        final CommandLineParser clp = new PosixParser();", "+        CommandLine line = null;", "+        try {", "+            line = clp.parse(OPTS, aArgs);", "+        }", "+        catch (ParseException e) {", "+            e.printStackTrace();", "+        ", "+        // setup the properties", "+        final Properties props =", "+            line.hasOption(\"p\")", "+                ? loadProperties(new File(line.getOptionValue(\"p\")))", "+                : System.getProperties();", "-        // be brain dead about arguments parsing", "-        String format = \"plain\";", "-        String output = null;", "-        Properties props = System.getProperties();", "-        final List foundFiles = new ArrayList();", "-        final ArrayList files = new ArrayList();", "-        for (int i = 0; i < aArgs.length; i++) {", "-            if (\"-f\".equals(aArgs[i])) {", "-                format = aArgs[++i];", "-            }", "-            else if (\"-o\".equals(aArgs[i])) {", "-                output = aArgs[++i];", "-            }", "-            else if (\"-r\".equals(aArgs[i])) {", "-                traverse(new File(aArgs[++i]), foundFiles);", "-            }", "-            else if (\"-p\".equals(aArgs[i])) {", "-                props = loadProperties(new File(aArgs[++i]));", "-            }", "-            else {", "-                files.add(aArgs[i]);", "-            }", "+        // ensure a config file is specified", "+        if (!line.hasOption(\"c\")) {", "+            System.out.println(\"Must specify a config XML file.\");", "+            usage();", "+        }", "+        ", "+        // Load the config file", "+        CheckConfiguration[] checkConfigs = null;", "+        try {", "+            checkConfigs =", "+                ConfigurationLoader.loadConfigs(line.getOptionValue(\"c\"));", "+        }", "+        catch (CheckstyleException e) {", "+            System.out.println(\"Error loading configuration file\");", "+            e.printStackTrace(System.out);", "+            System.exit(1);", "-        // create the appropriate listener", "-        OutputStream out = System.out;", "+        // setup the output stream", "+        OutputStream out = null;", "-        if (output != null) {", "+        if (line.hasOption(\"o\")) {", "+            final String fname = line.getOptionValue(\"o\"); ", "-                out = new FileOutputStream(output);", "+                out = new FileOutputStream(fname);", "-                System.out.println(\"Could not find file: '\" + output + \"'\");", "+                System.out.println(\"Could not find file: '\" + fname + \"'\");", "+        else {", "+            out = System.out;", "+            closeOut = false;", "+        }", "+        ", "+        // create the appropriate listener", "+        final String format =", "+            line.hasOption(\"f\") ? line.getOptionValue(\"f\") : \"plain\";", "+        ", "-        // Check that I have a config file", "+        // Get all the Java files", "+        final List files = new ArrayList();", "+        if (line.hasOption(\"r\")) {", "+            final String[] values = line.getOptionValues(\"r\");", "+            for (int i = 0; i < values.length; i++) {", "+                traverse(new File(values[i]), files);", "+            }", "+        }", "+ ", "+        final String[] remainingArgs = line.getArgs();", "+        for (int i = 0; i < remainingArgs.length; i++) {", "+            files.add(remainingArgs[i]);", "+        } ", "+", "-            System.out.println(\"Need to specify a config file\");", "+            System.out.println(\"Must specify files to process\");", "-        }", "+        }         ", "-        // Load the config file", "-        final String configFname = (String) files.remove(0);", "-        CheckConfiguration[] checkConfigs = null;", "-        try {", "-            checkConfigs = ConfigurationLoader.loadConfigs(configFname);", "-        }", "-        catch (CheckstyleException e) {", "-            System.out.println(\"Error loading configuration file\");", "-            e.printStackTrace(System.out);", "-            System.exit(1);", "-        }", "-", "+        // create the checker", "-        files.addAll(foundFiles);"]}]}
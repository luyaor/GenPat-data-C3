{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1c86fa6949c7d8591bf7a9ca93eb23f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc16f5bc087dcc38f7bbeca91c5e2d75", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST ast)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast)", "diff": ["-        final Scope scope;", "+        final Scope customScope;", "-            scope = Scope.PUBLIC;", "+            customScope = Scope.PUBLIC;", "-            scope =", "+            customScope =", "-        return scope.isIn(this.scope) && surroundingScope.isIn(this.scope)", "+        return customScope.isIn(this.scope) && surroundingScope.isIn(this.scope)", "-                || !scope.isIn(excludeScope)", "+                || !customScope.isIn(excludeScope)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee30d63fdb2029dc5b790db00a3e0b43", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "6c04cd63af392376159dc7aae41d85bbc348e96d", "commitAfterChange": "6ee4a0f805d528cdee03cfc175502d15b5722dab", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST ast, final Scope nodeScope)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast, final Scope nodeScope)", "diff": ["-        return nodeScope.isIn(scope)", "-                && surroundingScope.isIn(scope)", "-                && (excludeScope == null || nodeScope != excludeScope", "-                    && surroundingScope != excludeScope);", "+        return (excludeScope == null", "+                || nodeScope != excludeScope", "+                && surroundingScope != excludeScope)", "+            && nodeScope.isIn(scope)", "+            && surroundingScope.isIn(scope);"]}]}
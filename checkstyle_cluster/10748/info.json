{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85f05f620774db36def932f62db72df7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626e7495b5f3dabafa8c72e1b912080b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)         throws IOException", "signatureAfterChange": "     private boolean endsWithNewline(RandomAccessFile randomAccessFile)         throws IOException", "diff": ["-    private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)", "+    private boolean endsWithNewline(RandomAccessFile randomAccessFile)", "-        final int len = mLineSeparator.length();", "-        if (aRandomAccessFile.length() < len) {", "+        final int len = lineSeparator.length();", "+        if (randomAccessFile.length() < len) {", "-        aRandomAccessFile.seek(aRandomAccessFile.length() - len);", "+        randomAccessFile.seek(randomAccessFile.length() - len);", "-        final int readBytes = aRandomAccessFile.read(lastBytes);", "+        final int readBytes = randomAccessFile.read(lastBytes);", "-        return mLineSeparator.matches(lastBytes);", "+        return lineSeparator.matches(lastBytes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64cb7e93067a7afe77679a87b52bb168", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "e287c5e741ce8b13d19e7f0885977792a0d0fcc9", "commitAfterChange": "f38d8abd42c3e824635e542e6031b3da1997c02e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public synchronized void process(File[] aFiles)", "signatureAfterChange": "     public synchronized void process(List<File> aFiles)", "diff": ["-    public synchronized void process(File[] aFiles)", "+    public synchronized void process(List<File> aFiles)", "-        mLineBlockChecksums = new int[mFiles.length][];", "-        mChecksumInfo = new ChecksumInfo[mFiles.length];", "+        mLineBlockChecksums = new int[mFiles.size()][];", "+        mChecksumInfo = new ChecksumInfo[mFiles.size()];", "-            LOG.debug(\"Reading \" + mFiles.length + \" input files\");", "+            LOG.debug(\"Reading \" + mFiles.size() + \" input files\");", "-        for (int i = 0; i < mFiles.length; i++) {", "-            final File file = mFiles[i];", "+        for (int i = 0; i < mFiles.size(); i++) {", "+            final File file = mFiles.get(i);"]}]}
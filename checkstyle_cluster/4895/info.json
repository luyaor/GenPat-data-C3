{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60d1e572d6da33ca2bb2af7d10f0e9bb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dd549855a70fff0071cf06db038ab01", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if ((ast.getType() == TokenTypes.VARIABLE_DEF)", "-            || (ast.getType() == TokenTypes.PARAMETER_DEF))", "-        {", "-            processVariable(ast);", "-            return;", "-        }", "+        final int type = ast.getType();", "+        switch (type) {", "+            case TokenTypes.VARIABLE_DEF:", "+            case TokenTypes.PARAMETER_DEF:", "+                processVariable(ast);", "+                break;", "+            default:", "+                visitOtherTokens(ast, type);", "+        }", "+    }", "-                new FieldFrame(currentFrame, isStaticInnerType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc4560e7b05136a5db1bd61dc6dc142", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "commitBeforeChange": "a5349f581e11295b40b68ad194b3bfa10271f902", "commitAfterChange": "3a7ab7d24d0b865fd95a8c72ce7e765a801ea555", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-", "-        // method is ok if it is private or abstract or final", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)", "-            || modifiers.branchContains(TokenTypes.ABSTRACT)", "-            || modifiers.branchContains(TokenTypes.FINAL)", "-            || modifiers.branchContains(TokenTypes.LITERAL_STATIC)) {", "+        if (isPrivateOrFinalOrAbstract(ast)) {", "+        if (hasDefaultOrExplNonPrivateCtor(classDef)) {", "+            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "+            log(ast.getLineNo(), ast.getColumnNo(),", "+                MSG_KEY, name);", "+        }", "+    }", "-                    candidate.findFirstToken(TokenTypes.MODIFIERS);", "-        if (hasDefaultConstructor || hasExplNonPrivateCtor) {", "-            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "-            log(ast.getLineNo(), ast.getColumnNo(),", "-                MSG_KEY, name);", "-        }", "-", "-", "-"]}]}
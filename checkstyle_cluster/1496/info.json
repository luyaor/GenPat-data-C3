{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52015c960b24e98f7d45daf8115a2215", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a9a9e5b5c6636131e9ad8f9dc0b27ec", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "3d8fc87ef60d4e96068658ed0485aafdb2a42691", "commitAfterChange": "e27489c7721909245ea5055eac3b9c7c659081f6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "         public Tag(int aLine, int aColumn, String aText, boolean aOn)             throws ConversionException", "signatureAfterChange": "         public Tag(int aLine, int aColumn, String aText, boolean aOn)             throws ConversionException", "diff": ["-            //Does not intern REs with Utils.getRE()", "+            //Does not intern Patterns with Utils.getPattern()", "-                    mTagCheckRegexp = new RE(format);", "+                    mTagCheckRegexp = Pattern.compile(format);", "-                        mTagMessageRegexp = new RE(format);", "+                        mTagMessageRegexp = Pattern.compile(format);", "-                    mTagCheckRegexp = new RE(format);", "+                    mTagCheckRegexp = Pattern.compile(format);", "-                        mTagMessageRegexp = new RE(format);", "+                        mTagMessageRegexp = Pattern.compile(format);", "-            catch (RESyntaxException e) {", "+            catch (PatternSyntaxException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e03acc8b2e66d6b0770d5fef631d6f1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "9183d6c2407b843c66d379498b66626a766f92f3", "commitAfterChange": "6e775898e7d1ac179bcb6550f3023ee9b9d70bc3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private String getDisallowedAbbreviation(String str)", "signatureAfterChange": "     private String getDisallowedAbbreviation(String str)", "diff": ["-            else {", "-                if (abbrStarted) {", "-                    abbrStarted = false;", "+            else if (abbrStarted) {", "+                abbrStarted = false;", "-                    final int endIndex = index - 1;", "-                    // -1 as a first capital is usually beginning of next word", "-                    result = getAbbreviationIfIllegal(str, beginIndex, endIndex);", "-                    if (result != null) {", "-                        break;", "-                    }", "-                    beginIndex = -1;", "+                final int endIndex = index - 1;", "+                // -1 as a first capital is usually beginning of next word", "+                result = getAbbreviationIfIllegal(str, beginIndex, endIndex);", "+                if (result != null) {", "+                    break;", "+                beginIndex = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "578c02715ed451811db8e9ebd602b980", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "2af34e2adcd4d120d7400103d2dac3d5ee20f65b", "commitAfterChange": "aa4e40e550403d61ce550a2056407fda43a22936", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "         public boolean isMatch(AuditEvent event)", "signatureAfterChange": "         public boolean isMatch(AuditEvent event)", "diff": ["-            final Matcher tagMatcher =", "-                tagCheckRegexp.matcher(event.getSourceName());", "+            boolean match = false;", "+            final Matcher tagMatcher = tagCheckRegexp.matcher(event.getSourceName());", "-                    final Matcher messageMatcher =", "-                            tagMessageRegexp.matcher(event.getMessage());", "-                    return messageMatcher.find();", "+                    final Matcher messageMatcher = tagMessageRegexp.matcher(event.getMessage());", "+                    match = messageMatcher.find();", "-                return true;", "+                else {", "+                    match = true;", "+                }", "-            return false;", "+            return match;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8af8b2aeb9b71264c26def1949b2250", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "c4853b445219fd3d31d290c37184e46a8c4161ed", "commitAfterChange": "8d800ef546e11c6d593154f4071e39cdc4f66f34", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private int getGroupNumber(String aName)", "signatureAfterChange": "     private int getGroupNumber(String aName)", "diff": ["+        int bestIndex = mGroups.length;", "+        int bestLength = -1;", "+        int bestPos = 0;", "+", "-            if (aName.startsWith(mGroups[i])) {", "-                return i;", "+            final Matcher matcher = mGroups[i].matcher(aName);", "+            while (matcher.find()) {", "+                final int length = matcher.end() - matcher.start();", "+                if ((length > bestLength)", "+                    || ((length == bestLength) && (matcher.start() < bestPos)))", "+                {", "+                    bestIndex = i;", "+                    bestLength = length;", "+                    bestPos = matcher.start();", "+                }", "-        // no match, so we return the wildcard group", "-        return mWildcardGroupIndex;", "+        return bestIndex;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bef9a97cca6700ede4919f13380f24c8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "fb0f73fc9c382d9279d573bfc3779b872f795aac", "commitAfterChange": "f981e5845436464b45fc937e601f7fc9fdbc5a7c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean containsJavadocTag(final TextBlock javadoc)", "signatureAfterChange": "     private static boolean containsJavadocTag(final TextBlock javadoc)", "diff": ["-        if (javadoc == null) {", "-            return false;", "-        }", "+        boolean javadocTag = false;", "-        final String[] lines = javadoc.getText();", "+        if (javadoc != null) {", "+            final String[] lines = javadoc.getText();", "-        for (final String line : lines) {", "-            final Matcher matchInheritDoc =", "-                MATCH_INHERITDOC.matcher(line);", "+            for (final String line : lines) {", "+                final Matcher matchInheritDoc =", "+                    MATCH_INHERITDOC.matcher(line);", "-            if (matchInheritDoc.find()) {", "-                return true;", "+                if (matchInheritDoc.find()) {", "+                    javadocTag = true;", "+                    break;", "+                }", "-        return false;", "+        return javadocTag;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e64f993ace4412945bc8b427a6bf5034", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java", "commitBeforeChange": "c2afeecbf7b6c8e2ed6b50516adbe788fd105f31", "commitAfterChange": "f24c8ee834e006c406c0538dbfccc2fe6c07279c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void beginTree()", "signatureAfterChange": "     public void beginTree()", "diff": ["-        String[] lines = getLines();", "-        log(0, \"file has \" + lines.length + \" lines\");", "+        System.out.println(\"HeaderCheck.beginTree\");", "+        if (mHeaderLines != null) {", "+", "+            final String[] lines = getLines();", "+", "+            if (mHeaderLines.length > lines.length) {", "+                log(1, \"header.missing\");", "+            }", "+            else {", "+                for (int i = 0; i < mHeaderLines.length; i++) {", "+                    // skip lines we are meant to ignore", "+                    if (isIgnoreLine(i + 1)) {", "+                        continue;", "+                    }", "+", "+                    if (!isMatch(i)) {", "+                        log(i + 1, \"header.mismatch\", mHeaderLines[i]);", "+                        break; // stop checking", "+                    }", "+                }", "+            }", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "381634cdd23fce7355fa55c9bd231306", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36028dadb64f5943470d3cae8e54c21f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheckTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testSpace()         throws Exception", "signatureAfterChange": "      @Test     public void testSpace()         throws Exception", "diff": ["-            \"87:21: '(' is not followed by whitespace.\",", "-            \"87:27: ')' is not preceded with whitespace.\",", "-            \"88:14: '(' is not followed by whitespace.\",", "-            \"88:20: ')' is not preceded with whitespace.\",", "-            \"90:14: '(' is not followed by whitespace.\",", "-            \"90:20: ')' is not preceded with whitespace.\",", "-            \"241:18: '(' is not followed by whitespace.\",", "-            \"241:21: ')' is not preceded with whitespace.\",", "+            \"87:21: \" + getCheckMessage(WS_NOT_FOLLOWED, \"(\"),", "+            \"87:27: \" + getCheckMessage(WS_NOT_PRECEDED, \")\"),", "+            \"88:14: \" + getCheckMessage(WS_NOT_FOLLOWED, \"(\"),", "+            \"88:20: \" + getCheckMessage(WS_NOT_PRECEDED, \")\"),", "+            \"90:14: \" + getCheckMessage(WS_NOT_FOLLOWED, \"(\"),", "+            \"90:20: \" + getCheckMessage(WS_NOT_PRECEDED, \")\"),", "+            \"241:18: \" + getCheckMessage(WS_NOT_FOLLOWED, \"(\"),", "+            \"241:21: \" + getCheckMessage(WS_NOT_PRECEDED, \")\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45dd6e3fc15cd90dd44a11df70092358", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java", "commitBeforeChange": "8ad4aebb66a1b90ac135e05f8062423028e3be8e", "commitAfterChange": "0b98c0389e2cf745cb125a89dece57538fc672b7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testIt() throws Exception", "signatureAfterChange": "     @Test     public void testIt() throws Exception", "diff": ["-            \"14:10: 'final' modifier out of order with the JLS suggestions.\",", "-            \"18:12: 'private' modifier out of order with the JLS suggestions.\",", "-            \"24:14: 'private' modifier out of order with the JLS suggestions.\",", "-            \"34:13: '@MyAnnotation2' annotation modifier does not preceed non-annotation modifiers.\",", "-            \"39:13: '@MyAnnotation2' annotation modifier does not preceed non-annotation modifiers.\",", "-            \"49:35: '@MyAnnotation4' annotation modifier does not preceed non-annotation modifiers.\",", "+            \"14:10: \" + getCheckMessage(MSG_MODIFIER_ORDER, \"final\"),", "+            \"18:12: \" + getCheckMessage(MSG_MODIFIER_ORDER, \"private\"),", "+            \"24:14: \" + getCheckMessage(MSG_MODIFIER_ORDER, \"private\"),", "+            \"34:13: \" + getCheckMessage(MSG_ANNOTATION_ORDER, \"@MyAnnotation2\"),", "+            \"39:13: \" + getCheckMessage(MSG_ANNOTATION_ORDER, \"@MyAnnotation2\"),", "+            \"49:35: \" + getCheckMessage(MSG_ANNOTATION_ORDER, \"@MyAnnotation4\"),"]}]}
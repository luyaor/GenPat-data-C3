{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee8e1719a0d8c1d103c30811280d505a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a1c2ffe45ad22458a271d4856b1a47b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java", "commitBeforeChange": "5b01236f52f59b632659cac386768805f7a9006f", "commitAfterChange": "41740f2d68baba3ae185e8303038f841e7d6fc5a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "diff": ["-                // Match Javadoc text after comment characters", "-                final Pattern commentPattern = Pattern.compile(\"^\\\\s*(?:/\\\\*{2,}|\\\\*+)\\\\s*(.*)\");", "-                final Matcher commentMatcher = commentPattern.matcher(s);", "-                final String commentContents;", "-", "-                // offset including comment characters", "-                final int commentOffset;", "-", "-                if (commentMatcher.find()) {", "-                    commentContents = commentMatcher.group(1);", "-                    commentOffset = commentMatcher.start(1) - 1;", "-                }", "-                else {", "-                    // No leading asterisks, still valid", "-                    commentContents = s;", "-                    commentOffset = 0;", "-                }", "-                final Pattern tagPattern = Pattern.compile(\".*?\\\\{@(\\\\p{Alpha}+)\\\\s+(.*?)\\\\}\");", "-                final Matcher tagMatcher = tagPattern.matcher(commentContents);", "-                while (tagMatcher.find()) {", "-                    final String tagName = tagMatcher.group(1);", "-                    final String tagValue = tagMatcher.group(2).trim();", "-                    final int line = cmt.getStartLineNo() + i;", "-                    int col = commentOffset + tagMatcher.start(1) - 1;", "-                    if (i == 0) {", "-                        col += cmt.getStartColNo();", "-                    }", "-                    if (JavadocTagInfo.isValidName(tagName)) {", "-                        tags.add(new JavadocTag(line, col, tagName,", "-                                tagValue));", "-                    }", "-                    else {", "-                        invalidTags.add(new InvalidJavadocTag(line, col,", "-                                tagName));", "-                    }", "-                    // else Error: Unexpected match count for inline Javadoc", "-                    // tag!", "-                }", "+                lookForInlineTags(cmt, i, tags, invalidTags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a0ddda6b329439b40aa2bdf44252671", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "b95ced53e3c47c9a9db5022767a18e714fc3bebd", "commitAfterChange": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private List getMethodTags(TextBlock aComment)", "signatureAfterChange": "     private List getMethodTags(TextBlock aComment)", "diff": ["-                tags.add(new JavadocTag(currentLine,", "+                int col = javadocArgMatcher.start(1) - 1;", "+                if (i == 0) {", "+                    col += aComment.getStartColNo();", "+                }", "+                tags.add(new JavadocTag(currentLine, col,", "-                tags.add(new JavadocTag(currentLine,", "+                int col = javadocNoargMatcher.start(1) - 1;", "+                if (i == 0) {", "+                    col += aComment.getStartColNo();", "+                }", "+                tags.add(new JavadocTag(currentLine, col,", "-                tags.add(new JavadocTag(currentLine,", "+                int col = noargCurlyMatcher.start(1) - 1;", "+                if (i == 0) {", "+                    col += aComment.getStartColNo();", "+                }", "+                tags.add(new JavadocTag(currentLine, col,", "+                int col = argMultilineStart.start(1) - 1;", "+                if (i == 0) {", "+                    col += aComment.getStartColNo();", "+                }", "-                            tags.add(new JavadocTag(currentLine, p1, p2));", "+                            tags.add(new JavadocTag(currentLine, col, p1, p2));", "+                int col = noargMultilineStart.start(1) - 1;", "+                if (i == 0) {", "+                    col += aComment.getStartColNo();", "+                }", "-                            tags.add(new JavadocTag(currentLine, p1));", "+                            tags.add(new JavadocTag(currentLine, col, p1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91a69ebbe490c0e651a13188dbba7ba0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "576d593f6cb309d0959639fa707d0a01f28a6609", "commitAfterChange": "9dbc71956635b56a20780d484454e177897b5788", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "diff": ["-                    if (tagMatcher.groupCount() == 2) {", "-                        final String tagName = tagMatcher.group(1);", "-                        final String tagValue = tagMatcher.group(2).trim();", "-                        final int line = cmt.getStartLineNo() + i;", "-                        int col = commentOffset + tagMatcher.start(1) - 1;", "-                        if (i == 0) {", "-                            col += cmt.getStartColNo();", "-                        }", "-                        if (JavadocTagInfo.isValidName(tagName)) {", "-                            tags.add(new JavadocTag(line, col, tagName,", "-                                    tagValue));", "-                        }", "-                        else {", "-                            invalidTags.add(new InvalidJavadocTag(line, col,", "-                                    tagName));", "-                        }", "+                    final String tagName = tagMatcher.group(1);", "+                    final String tagValue = tagMatcher.group(2).trim();", "+                    final int line = cmt.getStartLineNo() + i;", "+                    int col = commentOffset + tagMatcher.start(1) - 1;", "+                    if (i == 0) {", "+                        col += cmt.getStartColNo();", "+                    }", "+                    if (JavadocTagInfo.isValidName(tagName)) {", "+                        tags.add(new JavadocTag(line, col, tagName,", "+                                tagValue));", "+                    }", "+                    else {", "+                        invalidTags.add(new InvalidJavadocTag(line, col,", "+                                tagName));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1dd96cb762a37529256f3d91050877a3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1013c82341b3d961a68ecbf79b9710c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "25603b312f6436a2518fdd8a32838c389837d992", "commitAfterChange": "3b3672d4694524ffe687d20e2be5970d4f85a26c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r     private void processEnd(DetailAST aAST)", "signatureAfterChange": "\r     private void processEnd(DetailAST aAST)", "diff": ["+\r", "-            // or a '(),'.\r", "+            // or a '(),[.'.\r", "-                if (!Character.isWhitespace(charAfter) && ('(' != charAfter)\r", "-                        && (')' != charAfter) && (',' != charAfter))\r", "+\r", "+                // Need to handle a number of cases. First is:\r", "+                //    Collections.<Object>emptySet();\r", "+                //                        ^\r", "+                //                        +--- whitespace not allowed\r", "+                if ((aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)\r", "+                    && (aAST.getParent().getParent().getType()\r", "+                        == TokenTypes.DOT)\r", "+                    && (aAST.getParent().getParent().getParent().getType()\r", "+                        == TokenTypes.METHOD_CALL))\r", "+                {\r", "+                    if (Character.isWhitespace(charAfter)) {\r", "+                        log(aAST.getLineNo(), after, \"ws.followed\", \">\");\r", "+                    }\r", "+                }\r", "+                else if (!Character.isWhitespace(charAfter)\r", "+                    && ('(' != charAfter) && (')' != charAfter)\r", "+                    && (',' != charAfter) && ('[' != charAfter)\r", "+                    && ('.' != charAfter))\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4705584c3286eb9e068396ac21496613", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java", "commitBeforeChange": "2da46d26c19466929d404e20e0e7f38cd7db9aee", "commitAfterChange": "0759e2257417baf28eb663636cd788f807ce953d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        boolean hasMethod = false;", "-        boolean hasNonStaticMethod = false;", "+        boolean hasMethodOrField = false;", "+        boolean hasNonStaticMethodOrField = false;", "-            if (child.getType() == TokenTypes.METHOD_DEF) {", "-                hasMethod = true;", "+            int type = child.getType();", "+            if (type == TokenTypes.METHOD_DEF", "+                    || type == TokenTypes.VARIABLE_DEF)", "+            {", "+                hasMethodOrField = true;", "-                if (!modifiers.branchContains(TokenTypes.LITERAL_STATIC)) {", "-                    hasNonStaticMethod = true;", "+                boolean isStatic =", "+                    modifiers.branchContains(TokenTypes.LITERAL_STATIC);", "+                boolean isPrivate =", "+                    modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);", "+", "+                if (!isStatic && !isPrivate) {", "+                    hasNonStaticMethodOrField = true;", "-            if (child.getType() == TokenTypes.CTOR_DEF) {", "+            if (type == TokenTypes.CTOR_DEF) {", "-        if (extendsJLO", "-                && hasMethod && !hasNonStaticMethod && hasAccessibleCtor)", "-        {", "+        final boolean isUtilClass =", "+            extendsJLO && hasMethodOrField && !hasNonStaticMethodOrField;", "+", "+        if (isUtilClass && hasAccessibleCtor) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c466da6d06410cfedd15b327506b4c3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "9309a784711a3510b8e8de08b3543fcc4cdb4813", "commitAfterChange": "e03dd7a0a03f9cf91e466ebee911ef0fa10130a4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (aAST.getType() == TokenTypes.CLASS_DEF) {", "-            //push", "-            mClassStack.add(new ClassAttributes());", "-        }", "-        else {", "-            // METHOD_DEF", "-            if (!ScopeUtils.inInterfaceBlock(aAST) && isEqualsMethod(aAST)) {", "-                final ClassAttributes attrs =", "-                    (ClassAttributes) mClassStack.getLast();", "-                if (hasObjectParameter(aAST)) {", "-                    attrs.setHasEqualsObject();", "+        if (aAST.getType() == TokenTypes.METHOD_DEF) {", "+            final DetailAST definer = getDefiner(aAST);", "+            final int type = definer.getType();", "+            if ((type == TokenTypes.CLASS_DEF)", "+                || (type == TokenTypes.LITERAL_NEW))", "+            {", "+                if (mClassStack.isEmpty()) {", "+                    mClassStack.add(new ClassAttributes(definer));", "-                else {", "-                    attrs.addEqualsNode(aAST);", "+                final ClassAttributes attrs =", "+                        (ClassAttributes) mClassStack.getLast();", "+                final DetailAST currentRoot = attrs.getRootAST();", "+                if (definer != currentRoot) {", "+                    mClassStack.add(new ClassAttributes(definer));", "+                }", "+                if (!ScopeUtils.inInterfaceBlock(aAST)", "+                    && isEqualsMethod(aAST))", "+                {", "+                    if (hasObjectParameter(aAST)) {", "+                        attrs.setHasEqualsObject();", "+                    }", "+                    else {", "+                        attrs.addEqualsNode(aAST);", "+                    }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d05bc80e007650656315ead01e2e532", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "9309a784711a3510b8e8de08b3543fcc4cdb4813", "commitAfterChange": "e03dd7a0a03f9cf91e466ebee911ef0fa10130a4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "     public void leaveToken(DetailAST aAST)", "diff": ["-        if (aAST.getType() == TokenTypes.CLASS_DEF) {", "-            //pop and report equals errors", "-            final ClassAttributes attrs =", "-                (ClassAttributes) mClassStack.removeLast();", "-            final Set equalsNodes = attrs.getEqualsNodes();", "-            final Iterator it = equalsNodes.iterator();", "-            while (it.hasNext()) {", "-                final DetailAST equalsAST = (DetailAST) it.next();", "-                final DetailAST nameNode =", "-                    equalsAST.findFirstToken(TokenTypes.IDENT);", "-                log(nameNode.getLineNo(), nameNode.getColumnNo(),", "-                        \"covariant.equals\");", "+        final int type = aAST.getType();", "+        if ((type == TokenTypes.LITERAL_NEW)", "+            || (type == TokenTypes.CLASS_DEF))", "+        {", "+            // pop class stack", "+            if (!mClassStack.isEmpty()) {", "+                final ClassAttributes attrs =", "+                    (ClassAttributes) mClassStack.getLast();", "+                if (attrs.getRootAST() == aAST) {", "+                    mClassStack.removeLast();", "+                    final Set equalsNodes = attrs.getEqualsNodes();", "+                    final Iterator it = equalsNodes.iterator();", "+                    while (it.hasNext()) {", "+                        final DetailAST equalsAST = (DetailAST) it.next();", "+                        final DetailAST nameNode =", "+                            equalsAST.findFirstToken(TokenTypes.IDENT);", "+                        log(nameNode.getLineNo(), nameNode.getColumnNo(),", "+                            \"covariant.equals\");", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7905b96bfd9705eb78d912516d1a9ab2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "af8d57317fd308e72ab9041200df10506b96870f", "commitAfterChange": "ec19316322d0540f0734f3812c9a16394dae9c3a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        case TokenTypes.CLASS_DEF:", "+            lcurly = aAST.getLastChild().getFirstChild();", "+            rcurly = aAST.getLastChild().getLastChild();", "+            nextToken = aAST;", "+            break;", "+        case TokenTypes.CTOR_DEF:", "+            lcurly = aAST.getLastChild();", "+            rcurly = lcurly.getLastChild();", "+            nextToken = aAST;", "+            break;", "+        case TokenTypes.METHOD_DEF:", "+            lcurly = aAST.getLastChild();", "+            rcurly = lcurly.getLastChild();", "+            nextToken = aAST;", "+            break;", "-            && (rcurly.getLineNo() != nextToken.getLineNo()))", "+                && (rcurly.getLineNo() != nextToken.getLineNo()))", "-                 && (rcurly.getLineNo() == nextToken.getLineNo()))", "+                && (rcurly.getLineNo() == nextToken.getLineNo()))", "-            Utils.whitespaceBefore(rcurly.getColumnNo(),", "-                                   getLines()[rcurly.getLineNo() - 1]);", "+                Utils.whitespaceBefore(rcurly.getColumnNo(),", "+                        getLines()[rcurly.getLineNo() - 1]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82330712b39ae566b5c7adb8b8b6eec5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "a123763c92761d644fed6010c05ff01cece025ae", "commitAfterChange": "12a1aec08012575b94c262d2b825a439bd69fde3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-            lcurly = aAST.getLastChild().getFirstChild();", "-            rcurly = aAST.getLastChild().getLastChild();", "+            final DetailAST child = aAST.getLastChild();", "+            lcurly = child.getFirstChild();", "+            rcurly = child.getLastChild();", "-            lcurly = aAST.getLastChild();", "+        case TokenTypes.STATIC_INIT:", "+        case TokenTypes.INSTANCE_INIT:", "+            lcurly = aAST.findFirstToken(TokenTypes.SLIST);", "-            lcurly = aAST.getLastChild();", "+        case TokenTypes.LITERAL_FOR:", "+        case TokenTypes.LITERAL_WHILE:", "+        case TokenTypes.LITERAL_DO:", "+            lcurly = aAST.findFirstToken(TokenTypes.SLIST);", "+            //SLIST could be absent if method is abstract, and code like \"while(true);\"", "+            if (lcurly == null) {", "+                return;", "+            }", "+        }", "+", "+        if (getAbstractOption() == RightCurlyOption.SAME && !hasLineBreakBefore(rcurly)) {", "+            log(rcurly, \"line.break.before\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f26987ca41185a9633fa3135cf7dc98", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/ExecutableStatementCountCheck.java", "commitBeforeChange": "b8f9b199ad7de16619cec1f288bd751fad8bc4a9", "commitAfterChange": "b0bb7e1b50237a03ce4e977af15665c07e20f078", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void visitSlist(DetailAST aAST)", "signatureAfterChange": "     private void visitSlist(DetailAST aAST)", "diff": ["-            mContext.addCount(aAST.getChildCount() / 2);", "+            // find member AST for the statement list", "+            final DetailAST contextAST = mContext.getAST();", "+            DetailAST parent = aAST.getParent();", "+            while (parent != null) {", "+                final int type = parent.getType();", "+                if ((type == TokenTypes.CTOR_DEF)", "+                    || (type == TokenTypes.METHOD_DEF)", "+                    || (type == TokenTypes.INSTANCE_INIT)", "+                    || (type == TokenTypes.STATIC_INIT))", "+                {", "+                    if (parent == contextAST) {", "+                        mContext.addCount(aAST.getChildCount() / 2);", "+                    }", "+                    break;", "+                }", "+                parent = parent.getParent();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e554e9eb866dfc24e7809b1df4cb3197", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "5f68bb50fd191fec409f5edb90755a18fce3e0ac", "commitAfterChange": "b436b3cd9860529718b95c36dafe565fe68f6293", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isSkipIfBlock(DetailAST literalIf)", "signatureAfterChange": "     private static boolean isSingleLineFor(DetailAST literalFor)", "diff": ["-    private boolean isSkipIfBlock(DetailAST literalIf)", "-        return allowSingleLineIf && isSingleLineIf(literalIf);", "+     */", "+    private static boolean isSingleLineFor(DetailAST literalFor)", "+    {", "+        boolean result = false;", "+        if (literalFor.getLastChild().getType() == TokenTypes.EMPTY_STAT) {", "+            result = true;", "+        }", "+        else if (literalFor.getParent().getType() == TokenTypes.SLIST", "+                && literalFor.getLastChild().getType() != TokenTypes.SLIST)", "+        {", "+            final DetailAST block = literalFor.findFirstToken(TokenTypes.EXPR);", "+            if (block != null) {", "+                result = literalFor.getLineNo() == block.getLineNo();", "+            }", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e779aae7c82986d9a4e1ee04abcb3803", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "70c89f71ecaedc22708cd60d0f200a7b8893ca34", "commitAfterChange": "325b265cc583468dd495088e95f316a2ba10c4af", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r     private void processStart(DetailAST aAST)", "signatureAfterChange": "\r     private void processStart(DetailAST aAST)", "diff": ["-        if ((0 <= before) && Character.isWhitespace(line.charAt(before))\r", "+        // Need to handle two cases as in:\r", "+        //\r", "+        //   public static <T> Callable<T> callable(Runnable task, T result)\r", "+        //                 ^           ^\r", "+        //      ws reqd ---+           +--- whitespace NOT required\r", "+        //\r", "+        if (0 <= before) {\r", "+            // Detect if the first case\r", "+            final DetailAST parent = aAST.getParent();\r", "+            final DetailAST grandparent = parent.getParent();\r", "+            if ((TokenTypes.TYPE_PARAMETERS == parent.getType())\r", "+                && (TokenTypes.METHOD_DEF == grandparent.getType()))\r", "+            {\r", "+                // Require whitespace\r", "+                if (!Character.isWhitespace(line.charAt(before))) {\r", "+                    log(aAST.getLineNo(), before, \"ws.notPreceded\", \"<\");\r", "+                }\r", "+            }\r", "+            // Whitespace not required\r", "+            else if (Character.isWhitespace(line.charAt(before))\r", "-        {\r", "-            log(aAST.getLineNo(), before, \"ws.preceded\", \"<\");\r", "+            {\r", "+                log(aAST.getLineNo(), before, \"ws.preceded\", \"<\");\r", "+            }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed6547b14059541def4098461542ca07", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "f010eb47869bae692609de487d6140373e02f3a3", "commitAfterChange": "907a19906f790ce8faea7aa74e12608538dca1b6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST aRootAST)", "diff": ["-        mFrames = new FrameStack();", "+        final FrameStack aFrameStack = new FrameStack();", "+        mFrames = Maps.newHashMap();", "+", "+        DetailAST curNode = aRootAST;", "+        while (curNode != null) {", "+            collectDeclarations(aFrameStack, curNode);", "+            DetailAST toVisit = curNode.getFirstChild();", "+            while (curNode != null && toVisit == null) {", "+                endCollectingDeclarations(aFrameStack, curNode);", "+                toVisit = curNode.getNextSibling();", "+                if (toVisit == null) {", "+                    curNode = curNode.getParent();", "+                }", "+            }", "+            curNode = toVisit;", "+        }"]}]}
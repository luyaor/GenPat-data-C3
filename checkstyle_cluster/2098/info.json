{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9232fafc034095910e82ccf671d7e06e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26fbfb942ddbed229c6b685cba8456c9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "2d1687465f841ead6eaf930f36040b17871e672e", "commitAfterChange": "bb1db4938ccae0f7149461ea372398fb8a53f2a8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String aClassName)", "signatureAfterChange": "     private String getIllegalInstantiation(String aClassName)", "diff": ["-                return illegal;", "+                // java.lang needs no import, but a class without import might", "+                // also come from the same file or be in the same package.", "+                // E.g. if a class defines an inner class \"Boolean\",", "+                // the expression \"new Boolean()\" refers to that class,", "+                // not to java.lang.Boolean", "+", "+                boolean isSameFile = mClassNames.contains(aClassName);", "+", "+                boolean isSamePackage = false;", "+                try {", "+                    final ClassLoader classLoader = getClassLoader();", "+                    if (classLoader != null) {", "+                        final String fqName = mPkgName + \".\" + aClassName;", "+                        classLoader.loadClass(fqName);", "+                        // no ClassNotFoundException, fqName is a known class", "+                        isSamePackage = true;", "+                    }", "+                }", "+                catch (ClassNotFoundException ex) {", "+                    // not a class from the same package", "+                    isSamePackage = false;", "+                }", "+", "+                if (!(isSameFile || isSamePackage)) {", "+                    return illegal;", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6617079ef0294a2d23b2fc8442ae71f2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "af095344e1501d55b2dfbbd18deaf305e814601c", "commitAfterChange": "e3366844c45fb800a290c0d30ed956f1d249de29", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "         public Tag(String text, int line, SuppressWithNearbyCommentFilter filter)             throws ConversionException", "signatureAfterChange": "         public Tag(String text, int line, SuppressWithNearbyCommentFilter filter)             throws ConversionException", "diff": ["-                if (filter.influenceFormat != null) {", "-                    format = expandFrocomment(", "-                        text, filter.influenceFormat, filter.commentRegexp);", "-                    try {", "-                        if (Utils.startsWithChar(format, '+')) {", "-                            format = format.substring(1);", "-                        }", "-                        influence = Integer.parseInt(format);", "+                format = expandFrocomment(", "+                    text, filter.influenceFormat, filter.commentRegexp);", "+                try {", "+                    if (Utils.startsWithChar(format, '+')) {", "+                        format = format.substring(1);", "-                    catch (final NumberFormatException e) {", "-                        throw new ConversionException(", "-                            \"unable to parse influence from '\" + text", "-                                + \"' using \" + filter.influenceFormat, e);", "-                    }", "+                    influence = Integer.parseInt(format);", "+                }", "+                catch (final NumberFormatException e) {", "+                    throw new ConversionException(", "+                        \"unable to parse influence from '\" + text", "+                            + \"' using \" + filter.influenceFormat, e);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8fade81965be4741da83cb610e5cd260", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523d28dd4b9355944719a7a23f2ece0d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static DetailNode findFirstToken(DetailNode node, int type)", "signatureAfterChange": "     public static DetailNode findFirstToken(DetailNode detailNode, int type)", "diff": ["-    public static DetailNode findFirstToken(DetailNode node, int type) {", "+    public static DetailNode findFirstToken(DetailNode detailNode, int type) {", "-        for (DetailNode i = getFirstChild(node); i != null; i = getNextSibling(i)) {", "-            if (i.getType() == type) {", "-                retVal = i;", "+        DetailNode node = getFirstChild(detailNode);", "+        while (node != null) {", "+            if (node.getType() == type) {", "+                retVal = node;", "+            node = getNextSibling(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc2799928da0ada7947b16a756ed060b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(DetailAST aAST)", "diff": ["-        for (int i = 0; i < mLimitedTokens.length; i++) {", "-            final int tokenCount = mCounts[mLimitedTokens[i] - 1];", "+        for (int element : mLimitedTokens) {", "+            final int tokenCount = mCounts[element - 1];", "-                    TokenTypes.getTokenName(mLimitedTokens[i]);", "+                    TokenTypes.getTokenName(element);", "-                    TokenTypes.getTokenName(mLimitedTokens[i]);", "+                    TokenTypes.getTokenName(element);"]}]}
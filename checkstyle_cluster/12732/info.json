{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0032e88f3f36b139c0c144b224201c05", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "003648499cdccd98b43148a321e277c1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "aa5dbacdcbf20a9b56e2f7ecb577bb47778b0c54", "commitAfterChange": "84c1f8375fa540e7b0313b95af6be6000e3c4c71", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "     void reportImport(int aLineNo, String aType)", "signatureAfterChange": "     void reportImport(int aLineNo, String aType)", "diff": ["-        if (!mConfig.isIgnoreImports()) {", "-            // Check for a duplicate import", "-            final Iterator it = mImports.iterator();", "-            while (it.hasNext()) {", "-                final LineText lt = (LineText) it.next();", "-                if (aType.equals(lt.getText())) {", "-                    mMessages.add(aLineNo, \"import.duplicate\",", "-                                  new Integer(lt.getLineNo()));", "-                }", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7b4e5250a7d8c4b2c55e162a14d358e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f7b0ed0a76147c82b98d87f425d2722e3b20d53a", "commitAfterChange": "d7c1da9a93994f9a6125dcbde13976aea3f4b924", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     void setLines(String[] aLines)", "signatureAfterChange": "     void setLines(String[] aLines)", "diff": ["-        //    - tabs", "-", "-            // Check for tabs", "-            if (!mConfig.isAllowTabs()) {", "-                final int tabPosition = mLines[i].indexOf('\\t');", "-                if (tabPosition != -1) {", "-                    mMessages.add(i + 1, tabPosition, \"containsTab\");", "-                }", "-            }", "-        }", "-", "-        // Check excessive number of lines", "-        if (mLines.length > mConfig.getMaxFileLength()) {", "-            mMessages.add(1, \"maxLen.file\",", "-                          new Integer(mLines.length),", "-                          new Integer(mConfig.getMaxFileLength()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc1f8131187cbcae98b1ed703c52a4c0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "7514320e04e4d35a4317172876e5f11e69a2c891", "commitAfterChange": "01d27913a71c29d6a769ed98ca7dd4ba01fe31eb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void readObject(ObjectInputStream aStream)         throws IOException, ClassNotFoundException", "signatureAfterChange": "     private void readObject(ObjectInputStream aStream)         throws IOException, ClassNotFoundException", "diff": ["-        mRegexps = new HashMap();", "-", "-        try {", "-            // Loop on the patterns creating the RE's", "-            final Iterator keys = mPatterns.keySet().iterator();", "-            while (keys.hasNext()) {", "-                final String k = (String) keys.next();", "-                mRegexps.put(k, new RE((String) mPatterns.get(k)));", "-            }", "-        }", "-        catch (RESyntaxException ex) {", "-            // This should never happen, as the serialized regexp patterns", "-            // somehow must have passed a setPattern() method.", "-            throw new InvalidObjectException(", "-                \"invalid regular expression syntax\");", "-        }"]}]}
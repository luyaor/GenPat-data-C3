{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78254fc60d0f550ec53d446b67704bba", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04232f5421a2e7f91c09c94c6c42e166", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": "       @Override       <K, V> ReferenceEntry<K, V> newEntry(           Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next)", "signatureAfterChange": "       <K, V> StrongEntry<K, V> newEntry(           Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next)", "diff": ["-      @Override", "-      <K, V> ReferenceEntry<K, V> newEntry(", "+      <K, V> StrongEntry<K, V> newEntry(", "-        return new WeakWriteEntry<K, V>(segment.keyReferenceQueue, key, hash, next);", "+        return new StrongEntry<K, V>();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad5ad3b0dbbdb9b450dac319e5000bfc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "       @Override       <K, V> ReferenceEntry<K, V> newEntry(           Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next)", "signatureAfterChange": "       <K, V> StrongEntry<K, V> newEntry(           Segment<K, V> segment, K key, int hash, @Nullable ReferenceEntry<K, V> next)", "diff": ["-      @Override", "-      <K, V> ReferenceEntry<K, V> newEntry(", "+      <K, V> StrongEntry<K, V> newEntry(", "-        return new WeakEntry<K, V>(segment.keyReferenceQueue, key, hash, next);", "+        return new StrongEntry<K, V>();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4144343f9bf9bb92dd261905b0fd33c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b19efd12e402d7446695dfea48f1e89", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java", "commitBeforeChange": "4adb6b2ad2b04e37aab274a3b55038c4e9da3578", "commitAfterChange": "1ca93bdf66b630e58d979ad2aa40f02e678db5cf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-            startLine = (mCharacters.get(mMatcher.start()))[0].", "-                    intValue();", "-            startColumn = (mCharacters.get(mMatcher.start()))[1].", "-                    intValue();", "-            endLine = (mCharacters.get(mMatcher.end() - 1))[0].", "-                    intValue();", "-            endColumn = (mCharacters.get(mMatcher.end() - 1))[1].", "-                    intValue();", "+            final FileText text = getFileContents().getText();", "+            final LineColumn start = text.lineColumn(mMatcher.start());", "+            final LineColumn end = text.lineColumn(mMatcher.end() - 1);", "+            startLine = start.getLine();", "+            startColumn = start.getColumn();", "+            endLine = end.getLine();", "+            endColumn = end.getColumn();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c19b733d4007dc68804725774ed4c5f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileText.java", "commitBeforeChange": "4e4a635fab94bc1107dbe47ba944a687736b9d67", "commitAfterChange": "c6edc74a2cf7a5e2c9affef6d0e1e931f783b462", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public FileText(File aFile, String aCharsetName) throws IOException", "signatureAfterChange": "     public FileText(File aFile, String aCharsetName) throws IOException", "diff": ["-        final String[] lines = LINE_TERMINATOR.split(mFullText, -1);", "-        if (lines.length > 0 && lines[lines.length - 1].length() == 0) {", "-            // drop empty line after last newline", "-            mLines = new String[lines.length - 1];", "-            System.arraycopy(lines, 0, mLines, 0, lines.length - 1);", "+        // Use the BufferedReader to break down the lines as this", "+        // is about 30% faster than using the", "+        // LINE_TERMINATOR.split(mFullText, -1) method", "+        final ArrayList<String> lines = new ArrayList<String>();", "+        final BufferedReader br =", "+            new BufferedReader(new StringReader(mFullText));", "+        for (;;) {", "+            final String l = br.readLine();", "+            if (null == l) {", "+                break;", "+            }", "+            lines.add(l);", "-        else {", "-            // no newline at end, so we keep the last line as is", "-            mLines = lines;", "-        }", "+        mLines = lines.toArray(new String[lines.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc73bbff30fddabac14e4542d296f33f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "a8ad56697b9348de2a242654d5c56b127d78e876", "commitAfterChange": "a21164df1fbaff36ba020968b3a6128ab8476756", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private static boolean isFunction(DetailAST ast)", "signatureAfterChange": "     private boolean removeMatchingParam(List<DetailAST> params, String paramName)", "diff": ["-    private static boolean isFunction(DetailAST ast) {", "-        boolean retVal = false;", "-        if (ast.getType() == TokenTypes.METHOD_DEF) {", "-            final DetailAST typeAST = ast.findFirstToken(TokenTypes.TYPE);", "-            if (typeAST.findFirstToken(TokenTypes.LITERAL_VOID) == null) {", "-                retVal = true;", "+    private boolean removeMatchingParam(List<DetailAST> params, String paramName) {", "+        boolean found = false;", "+        final Iterator<DetailAST> paramIt = params.iterator();", "+        while (paramIt.hasNext()) {", "+            final DetailAST param = paramIt.next();", "+            if (param.getText().equals(paramName)) {", "+                found = true;", "+                paramIt.remove();", "+                break;", "-        return retVal;", "+        return found;"]}]}
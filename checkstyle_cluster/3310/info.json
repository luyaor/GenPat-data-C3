{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74698ef63d9db0c28ba91b897516a882", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63e8909103d1e4e20f4f4d747f502618", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private ParseStatus parseJavadocAsDetailNode(DetailAST aJavadocCommentAst)", "signatureAfterChange": "     private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst)", "diff": ["-    private ParseStatus parseJavadocAsDetailNode(DetailAST aJavadocCommentAst)", "+    private ParseStatus parseJavadocAsDetailNode(DetailAST javadocCommentAst)", "-        final String javadocComment = JavadocUtils.getJavadocCommentContent(aJavadocCommentAst);", "+        final String javadocComment = JavadocUtils.getJavadocCommentContent(javadocCommentAst);", "-        mErrorListener.setOffset(aJavadocCommentAst.getLineNo() - 1);", "+        errorListener.setOffset(javadocCommentAst.getLineNo() - 1);", "-            parseErrorMessage = new ParseErrorMessage(aJavadocCommentAst.getLineNo(),", "+            parseErrorMessage = new ParseErrorMessage(javadocCommentAst.getLineNo(),", "-                    aJavadocCommentAst.getColumnNo(), e.getMessage());", "+                    javadocCommentAst.getColumnNo(), e.getMessage());", "-            parseErrorMessage = mErrorListener.getErrorMessage();", "+            parseErrorMessage = errorListener.getErrorMessage();", "-                parseErrorMessage = new ParseErrorMessage(aJavadocCommentAst.getLineNo(),", "+                parseErrorMessage = new ParseErrorMessage(javadocCommentAst.getLineNo(),", "-                        aJavadocCommentAst.getColumnNo(), e.getMessage());", "+                        javadocCommentAst.getColumnNo(), e.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e0059ff15bba5bede77e67abc70d360", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setLimitedTokens(String[] aLimitedTokens)", "signatureAfterChange": "     public void setLimitedTokens(String[] limitedTokensParam)", "diff": ["-    public void setLimitedTokens(String[] aLimitedTokens)", "+    public void setLimitedTokens(String[] limitedTokensParam)", "-        mLimitedTokens = new int[aLimitedTokens.length];", "+        limitedTokens = new int[limitedTokensParam.length];", "-        for (int i = 0; i < aLimitedTokens.length; i++) {", "-            mLimitedTokens[i] = TokenTypes.getTokenId(aLimitedTokens[i]);", "-            if (mLimitedTokens[i] > maxToken) {", "-                maxToken = mLimitedTokens[i];", "+        for (int i = 0; i < limitedTokensParam.length; i++) {", "+            limitedTokens[i] = TokenTypes.getTokenId(limitedTokensParam[i]);", "+            if (limitedTokens[i] > maxToken) {", "+                maxToken = limitedTokens[i];", "-        mCounts = new int[maxToken];", "+        counts = new int[maxToken];"]}]}
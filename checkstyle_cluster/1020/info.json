{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03bbbde85de852b2405b128a1c1b7a79", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71f687d1a720dc699f5699aa77439fe7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "bd503e1576ded224169c1f15b9ca6cb8d08f9cb2", "commitAfterChange": "f2b01a44a216e88957eb6cb22e4b0e39429a6c84", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["+        // add custom listeners", "+        if (line.hasOption(\"l\")) {", "+            final String listeners = line.getOptionValue(\"l\");", "+            final StringTokenizer t = new StringTokenizer(listeners, \",\");", "+            while (t.hasMoreTokens()) {", "+                final String className = t.nextToken();", "+                AuditListener customListener = null;", "+                try {", "+                    customListener =", "+                        (AuditListener) Class.forName(className).newInstance();", "+                }", "+                catch (Exception e) {", "+                    System.out.println(\"Unable to create listener '\"", "+                        + className + \"': \" + e);", "+                    e.printStackTrace(System.out);", "+                    System.exit(1);", "+                }", "+                c.addListener(customListener);", "+            }", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f4ba43006fbe72c14845236eede0b8d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "commitBeforeChange": "205cbab8af785b1cddb9c4123ff3fa8b63dcbe1c", "commitAfterChange": "4e1f8ef98e9e43d6101a00bdecd040377472f852", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["-        final Set foundThrows = new HashSet();", "+        final Set foundThrows = new HashSet(); //used for performance only", "-                final FullIdent fi = (FullIdent) throwIt.next();", "+                final ExceptionInfo ei = (ExceptionInfo) throwIt.next();", "+                final FullIdent fi = ei.getFullIdent();", "-                    throwIt.remove();", "+                    ei.setFound();", "+                }", "+                else if (mAllowThrowsTagsForSubclasses) {", "+                    final ClassResolver cr = getClassResolver();", "+                    try {", "+                        final Class documentedClass = cr.resolve(documentedEx);", "+                        try {", "+                            final Class declaredClass = cr.resolve(declaredEx);", "+                            found = ", "+                                declaredClass.isAssignableFrom(documentedClass);", "+                            if (found) {", "+                                ei.setFound();", "+                            }", "+                        }", "+                        catch (ClassNotFoundException e) {", "+                            log(tag.getLineNo(), \"javadoc.classInfo\",", "+                                \"@throws\", declaredEx);", "+                        }", "+                    }", "+                    catch (ClassNotFoundException e) {", "+                        log(tag.getLineNo(), \"javadoc.classInfo\",", "+                                      \"@throws\", documentedEx);", "+                    }", "-                    final ClassResolver cr =", "-                        new ClassResolver(", "-                            getClassLoader(),", "-                            mPackageFullIdent.getText(),", "-                            mImports);", "+                    final ClassResolver cr = getClassResolver();", "-                final FullIdent fi = (FullIdent) throwIt.next();", "-                log(fi.getLineNo(), fi.getColumnNo(),", "-                    \"javadoc.expectedTag\", \"@throws\", fi.getText());", "+                final ExceptionInfo ei = (ExceptionInfo) throwIt.next();", "+                if (!ei.isFound()) {", "+                    final FullIdent fi = ei.getFullIdent();", "+                    log(fi.getLineNo(), fi.getColumnNo(),", "+                        \"javadoc.expectedTag\", \"@throws\", fi.getText());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c08783af6dbceaaccd1d6f693c41159e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "cd32cd1ab02fa47192c87af5dcfa9e579681723f", "commitAfterChange": "2effcfd0bcdfa7fc25bfff22e6f893ac6fb4478b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["-        Properties properties = System.getProperties();", "+        Properties props = System.getProperties();", "+        final List foundFiles = new ArrayList();", "-                traverse(new File(aArgs[++i]), files);", "+                traverse(new File(aArgs[++i]), foundFiles);", "-                properties = loadProperties(new File(aArgs[++i]));", "+                props = loadProperties(new File(aArgs[++i]));", "+        // Check that I have a config file", "+        if (files.isEmpty()) {", "+            System.out.println(\"Need to specify a config file\");", "+            usage();", "+        }", "+", "+        // Load the config file", "+        final String configFname = (String) files.remove(0);", "+        CheckConfiguration[] checkConfigs = null;", "+        try {", "+            checkConfigs = loadConfigs(configFname);", "+        }", "+        catch (CheckstyleException e) {", "+            System.out.println(\"Error loading configuration file\");", "+            e.printStackTrace(System.out);", "+            System.exit(1);", "+        }", "+", "-            c = new Checker(new Configuration(properties, System.out));", "+            c = new Checker(new Configuration(props, System.out), checkConfigs);", "+        files.addAll(foundFiles);", "-            c.process((String[]) files.toArray(new String[files.size()]));", "+            c.processNEW((String[]) files.toArray(new String[files.size()]));", "+    }"]}]}
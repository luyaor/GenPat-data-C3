{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0c1c2f34b75d3b0b195aab5f7bc7a5d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "322de217276cde4c6fe80a6728efe20c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java", "commitBeforeChange": "7abbd6af2f63a9e5bfa067f3058b5a3e738971de", "commitAfterChange": "8d242382f8bb77488b6da23bdd0d2d61583703fc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "          public void setUp()", "signatureAfterChange": "          public void setUp()", "diff": ["-        filter = new FilterSet();", "+        filter = new CSVFilter(\"\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "501d3c343c1e53d92eb5269ca2c31c9a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/j2ee/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/j2ee/SessionBeanEjbCreateCheck.java", "commitBeforeChange": "cb72198165086caf36293c23521c2ad418d1eb3c", "commitAfterChange": "9089e7a210285af0b2f539c0bf03525d20fdf611", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (nameAST.getText().equals(\"ejbCreate\")", "+        if (nameAST.getText().startsWith(\"ejbCreate\")", "-            checkMethod(aAST);", "+            // cannot be final", "+            checkMethod(aAST, false);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9adb6aa05e9c4eeadc317a5ae0db6ef0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java", "commitBeforeChange": "2f5b39d41f21f2243d457b6c322e909b1911be5d", "commitAfterChange": "66325cbd72882454193765322efa716537ce9c93", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static ModuleFactory loadModuleFactory(ClassLoader aClassLoader)         throws CheckstyleException", "signatureAfterChange": "     public static ModuleFactory loadModuleFactory(ClassLoader aClassLoader)         throws CheckstyleException", "diff": ["-        return loadModuleFactory(source, \"default package names\");", "+        return loadModuleFactory(source, \"default package names\", aClassLoader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c843ae3535ee26d960be9864581c38d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "7347cc361b9251beb9f13acfbcb966f887925da5", "commitAfterChange": "661a9b0ddb10922458082573d79e0791ba6f38c2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void checkExpressionSubtree(         DetailAST aTree,         int aLevel,         boolean aFirstLineMatches,         boolean aAllowNesting     )", "signatureAfterChange": "     protected final void checkExpressionSubtree(         DetailAST aTree,         int aLevel,         boolean aFirstLineMatches,         boolean aAllowNesting     )", "diff": ["-     */", "-    protected void checkExpressionSubtree(", "-        DetailAST aTree,", "-        int aLevel,", "-        boolean aFirstLineMatches,", "-        boolean aAllowNesting", "-    )", "-    {", "-        LineSet subtreeLines = new LineSet();", "-        if (aFirstLineMatches && !aAllowNesting) {", "-            int firstLine = getFirstLine(Integer.MAX_VALUE, aTree);", "-            subtreeLines.addLineAndCol(new Integer(firstLine),", "-                getLineStart(", "-                    mIndentCheck.getLines()[firstLine - 1]));", "-        }", "-        findSubtreeLines(subtreeLines, aTree, aAllowNesting);", "-", "-        checkLinesIndent(subtreeLines, aLevel, aFirstLineMatches);", "-    }", "+     */", "+    protected final void checkExpressionSubtree(", "+        DetailAST aTree,", "+        int aLevel,", "+        boolean aFirstLineMatches,", "+        boolean aAllowNesting", "+    )", "+    {", "+        LineSet subtreeLines = new LineSet();", "+        int firstLine = getFirstLine(Integer.MAX_VALUE, aTree);", "+        if (aFirstLineMatches && !aAllowNesting) {", "+            subtreeLines.addLineAndCol(new Integer(firstLine),", "+                getLineStart(", "+                    mIndentCheck.getLines()[firstLine - 1]));", "+        }", "+        findSubtreeLines(subtreeLines, aTree, aAllowNesting);", "+", "+        checkLinesIndent(subtreeLines, aLevel, aFirstLineMatches,", "+                         firstLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef2f5160a76df760a8666aa292d41e07", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "6cdcfc135ab45c2ab0c69080b89b4baa360fed16", "commitAfterChange": "56743942d548686fb90ebd8b7a17fed5977e49dc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-            LOG.error(exceptionMsg);", "+            LOG.error(exceptionMsg, ex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efdebcfa0eaffcbbcf67681b930a8fb3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "commitBeforeChange": "89488c9d424cc61dc990ccffaaabec0621c52ad4", "commitAfterChange": "eeba08c1028a79bdc2140476b24ce8d60f04657a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public Object createModule(String aName)         throws CheckstyleException", "signatureAfterChange": "     public Object createModule(String aName)         throws CheckstyleException", "diff": ["-                    \"Unable to instantiate \" + aName);", "+                    \"Unable to instantiate \" + aName, ex2);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7241168ecdcdf54a60a15d36cd7ac4d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "476e25c82843d2e0aaf1a99dc8dda71f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "67ac0b2adecabccf9c94a0e5389a80b1cd83cc41", "commitAfterChange": "c0a8e0ff6c885ce4444a37408f72e8555fb9ea6b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     void verifyDot(MyCommonAST aAST)", "signatureAfterChange": "     void verifyDot(MyCommonAST aAST)", "diff": ["-        if (mConfig.isIgnoreWhitespace()) {", "-            return;", "-        }", "-", "-        final String line = mLines[aAST.getLineNo() - 1];", "-", "-        // check before", "-        final int before = aAST.getColumnNo() - 1;", "-        if ((before >= 0) && Character.isWhitespace(line.charAt(before))) {", "-            // verify all characters before '.' are whitespace", "-            for (int i = 0; i < before; i++) {", "-                if (!Character.isWhitespace(line.charAt(i))) {", "-                    mMessages.add(aAST.getLineNo(), aAST.getColumnNo() - 1,", "-                                  \"ws.preceeded\", \".\");", "-                    break;", "-                }", "-            }", "-        }", "-", "-        // check after", "-        final int after = aAST.getColumnNo() + 1;", "-        if ((after < line.length())", "-            && Character.isWhitespace(line.charAt(after)))", "-        {", "-            for (int i = after + 1; i < line.length(); i++) {", "-                if (!Character.isWhitespace(line.charAt(i))) {", "-                    mMessages.add(aAST.getLineNo(), after, \"ws.followed\", \".\");", "-                    break;", "-                }", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a1c2ffe45ad22458a271d4856b1a47b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java", "commitBeforeChange": "5b01236f52f59b632659cac386768805f7a9006f", "commitAfterChange": "41740f2d68baba3ae185e8303038f841e7d6fc5a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "diff": ["-                // Match Javadoc text after comment characters", "-                final Pattern commentPattern = Pattern.compile(\"^\\\\s*(?:/\\\\*{2,}|\\\\*+)\\\\s*(.*)\");", "-                final Matcher commentMatcher = commentPattern.matcher(s);", "-                final String commentContents;", "-", "-                // offset including comment characters", "-                final int commentOffset;", "-", "-                if (commentMatcher.find()) {", "-                    commentContents = commentMatcher.group(1);", "-                    commentOffset = commentMatcher.start(1) - 1;", "-                }", "-                else {", "-                    // No leading asterisks, still valid", "-                    commentContents = s;", "-                    commentOffset = 0;", "-                }", "-                final Pattern tagPattern = Pattern.compile(\".*?\\\\{@(\\\\p{Alpha}+)\\\\s+(.*?)\\\\}\");", "-                final Matcher tagMatcher = tagPattern.matcher(commentContents);", "-                while (tagMatcher.find()) {", "-                    final String tagName = tagMatcher.group(1);", "-                    final String tagValue = tagMatcher.group(2).trim();", "-                    final int line = cmt.getStartLineNo() + i;", "-                    int col = commentOffset + tagMatcher.start(1) - 1;", "-                    if (i == 0) {", "-                        col += cmt.getStartColNo();", "-                    }", "-                    if (JavadocTagInfo.isValidName(tagName)) {", "-                        tags.add(new JavadocTag(line, col, tagName,", "-                                tagValue));", "-                    }", "-                    else {", "-                        invalidTags.add(new InvalidJavadocTag(line, col,", "-                                tagName));", "-                    }", "-                    // else Error: Unexpected match count for inline Javadoc", "-                    // tag!", "-                }", "+                lookForInlineTags(cmt, i, tags, invalidTags);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8389652703f7a6bb67ad57f53cabe9d9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b3cc80b1064c98decb51ac413f8a415", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "6df3e84393d095000c982b2087344de84a91f9ef", "commitAfterChange": "ea01eaaa85409442aeece8763f0388066bd07bf5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private int checkPackageHtml(String[] aFiles)", "signatureAfterChange": "     private int checkPackageHtml(String[] aFiles)", "diff": ["-        int packageHtmlErrors = 0;", "-", "-        if (aFiles != null && mConfig.isRequirePackageHtml())", "+        if (!mConfig.isRequirePackageHtml())", "-            final HashSet checkedPackages = new HashSet();", "-            for (int i = 0; i < aFiles.length; i++)", "+            return 0;", "+        }", "+", "+        int packageHtmlErrors = 0;", "+        final HashSet checkedPackages = new HashSet();", "+        for (int i = 0; i < aFiles.length; i++)", "+        {", "+            final File file = new File(aFiles[i]);", "+            final File packageDir = file.getParentFile();", "+            if (!checkedPackages.contains(packageDir))", "-                final File file = new File(aFiles[i]);", "-                final File packageDir = file.getParentFile();", "-                if (!checkedPackages.contains(packageDir))", "+                final File packageDoc =", "+                    new File(packageDir, \"package.html\");", "+                final String docFile = packageDoc.toString();", "+                fireFileStarted(docFile);", "+                if (!packageDoc.exists())", "-                    final File packageDoc =", "-                        new File(packageDir, \"package.html\");", "-                    final String docFile = packageDoc.toString();", "-                    fireFileStarted(docFile);", "-                    if (!packageDoc.exists())", "-                    {", "-                        final LineText error = new LineText(0,", "-                            \"missing package documentation file.\");", "-                        fireErrors(docFile, new LineText[]{error} );", "-                        packageHtmlErrors++;", "-                    }", "-                    fireFileFinished(docFile);", "-                    checkedPackages.add(packageDir);", "+                    final LineText error =", "+                        new LineText(0, \"missing package documentation file.\");", "+                    fireErrors(docFile, new LineText[]{error} );", "+                    packageHtmlErrors++;", "+                fireFileFinished(docFile);", "+                checkedPackages.add(packageDir);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "550ec68f7dfe5f1ba00daf48b9b7b316", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "5e7932be70b20345b77f6fc2adb8423f2d6a091c", "commitAfterChange": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-        final Scope typeScope =", "-            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;", "-        if (typeScope.isIn(mScope)) {", "-            final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);", "-            if ((surroundingScope == null) || surroundingScope.isIn(mScope)) {", "-                final FileContents contents = getFileContents();", "-                final int lineNo = aAST.getLineNo();", "-                final TextBlock cmt = contents.getJavadocBefore(lineNo);", "-                if (cmt == null) {", "-                    log(lineNo, \"javadoc.missing\");", "-                }", "-                else if (ScopeUtils.isOuterMostType(aAST)) {", "-                    // don't check author/version for inner classes", "-                    Vector tags = getJavadocTags(cmt);", "-                    checkTag(lineNo, tags, \"author\",", "-                             mAuthorFormatRE, mAuthorFormat);", "-                    checkTag(lineNo, tags, \"version\",", "-                             mVersionFormatRE, mVersionFormat);", "-                }", "+        if (shouldCheck(aAST)) {", "+            final FileContents contents = getFileContents();", "+            final int lineNo = aAST.getLineNo();", "+            final TextBlock cmt = contents.getJavadocBefore(lineNo);", "+            if (cmt == null) {", "+                log(lineNo, \"javadoc.missing\");", "+            }", "+            else if (ScopeUtils.isOuterMostType(aAST)) {", "+                // don't check author/version for inner classes", "+                Vector tags = getJavadocTags(cmt);", "+                checkTag(lineNo, tags, \"author\",", "+                         mAuthorFormatRE, mAuthorFormat);", "+                checkTag(lineNo, tags, \"version\",", "+                         mVersionFormatRE, mVersionFormat);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a1c2ffe45ad22458a271d4856b1a47b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java", "commitBeforeChange": "5b01236f52f59b632659cac386768805f7a9006f", "commitAfterChange": "41740f2d68baba3ae185e8303038f841e7d6fc5a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "diff": ["-                // Match Javadoc text after comment characters", "-                final Pattern commentPattern = Pattern.compile(\"^\\\\s*(?:/\\\\*{2,}|\\\\*+)\\\\s*(.*)\");", "-                final Matcher commentMatcher = commentPattern.matcher(s);", "-                final String commentContents;", "-", "-                // offset including comment characters", "-                final int commentOffset;", "-", "-                if (commentMatcher.find()) {", "-                    commentContents = commentMatcher.group(1);", "-                    commentOffset = commentMatcher.start(1) - 1;", "-                }", "-                else {", "-                    // No leading asterisks, still valid", "-                    commentContents = s;", "-                    commentOffset = 0;", "-                }", "-                final Pattern tagPattern = Pattern.compile(\".*?\\\\{@(\\\\p{Alpha}+)\\\\s+(.*?)\\\\}\");", "-                final Matcher tagMatcher = tagPattern.matcher(commentContents);", "-                while (tagMatcher.find()) {", "-                    final String tagName = tagMatcher.group(1);", "-                    final String tagValue = tagMatcher.group(2).trim();", "-                    final int line = cmt.getStartLineNo() + i;", "-                    int col = commentOffset + tagMatcher.start(1) - 1;", "-                    if (i == 0) {", "-                        col += cmt.getStartColNo();", "-                    }", "-                    if (JavadocTagInfo.isValidName(tagName)) {", "-                        tags.add(new JavadocTag(line, col, tagName,", "-                                tagValue));", "-                    }", "-                    else {", "-                        invalidTags.add(new InvalidJavadocTag(line, col,", "-                                tagName));", "-                    }", "-                    // else Error: Unexpected match count for inline Javadoc", "-                    // tag!", "-                }", "+                lookForInlineTags(cmt, i, tags, invalidTags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "983170077b25648116dc417ca98e8983", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "ae9d1d6217ad7dbc2e6f1faa890298c68726dcb4", "commitAfterChange": "2e1382c5bb1aa61cc01d7958a589e2a3831f56b5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Override     public final void visitToken(DetailAST aBlockCommentAst)", "signatureAfterChange": "      @Override     public final void visitToken(DetailAST aBlockCommentAst)", "diff": ["-        mBlockCommentAst = aBlockCommentAst;", "+        if (JavadocUtils.isJavadocComment(aBlockCommentAst)) {", "+            mBlockCommentAst = aBlockCommentAst;", "-        final String commentContent = JavadocUtils.getBlockCommentContent(aBlockCommentAst);", "+            final String treeCacheKey = aBlockCommentAst.getLineNo() + \":\"", "+                    + aBlockCommentAst.getColumnNo();", "-        if (JavadocUtils.isJavadocComment(commentContent)) {", "+            ParseStatus ps;", "-            final String javadocComment = commentContent.substring(1);", "-", "-            // Log messages should have line number in scope of file,", "-            // not in scope of Javadoc comment.", "-            // Offset is line number of beginning of Javadoc comment.", "-            mErrorListener.setOffset(aBlockCommentAst.getLineNo() - 1);", "-", "-            try {", "-                final ParseTree parseTree = parseJavadoc(javadocComment);", "-", "-                final DetailNode node = convertParseTree2DetailNode(parseTree);", "-", "-                processTree(node);", "+            if (TREE_CACHE.containsKey(treeCacheKey)) {", "+                ps = TREE_CACHE.get(treeCacheKey);", "-            catch (IOException e) {", "-                // Antlr can not initiate its ANTLRInputStream", "-                log(aBlockCommentAst.getLineNo(), \"javadoc.parse.error\",", "-                        e.getMessage());", "+            else {", "+                ps = parseJavadocAsDetailNode(aBlockCommentAst);", "+                TREE_CACHE.put(treeCacheKey, ps);", "-            catch (ParseCancellationException e) {", "-                // If syntax error occurs then message is printed by error listener", "-                // and parser throws this runtime exception to stop parsing.", "-                // Just stop processing current Javadoc comment.", "-                return;", "+", "+            if (ps.getParseErrorMessage() == null) {", "+                processTree(ps.getTree());", "+            }", "+            else {", "+                final LocalizedMessage parseErrorMessage = ps.getParseErrorMessage();", "+                log(parseErrorMessage.getLineNo(), parseErrorMessage.getColumnNo()", "+                        , parseErrorMessage.getMessage());", "+"]}]}
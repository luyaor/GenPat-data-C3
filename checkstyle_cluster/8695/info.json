{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8e64a59117c73d4639ba8e581fe3134", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b5260a54f69f5d64c3e60ae2e40674f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected final void checkExpressionSubtree(         DetailAST aTree,         IndentLevel aLevel,         boolean aFirstLineMatches,         boolean aAllowNesting     )", "signatureAfterChange": "     protected final void checkExpressionSubtree(         DetailAST tree,         IndentLevel level,         boolean firstLineMatches,         boolean allowNesting     )", "diff": ["-        DetailAST aTree,", "-        IndentLevel aLevel,", "-        boolean aFirstLineMatches,", "-        boolean aAllowNesting", "+        DetailAST tree,", "+        IndentLevel level,", "+        boolean firstLineMatches,", "+        boolean allowNesting", "-        final int firstLine = getFirstLine(Integer.MAX_VALUE, aTree);", "-        if (aFirstLineMatches && !aAllowNesting) {", "+        final int firstLine = getFirstLine(Integer.MAX_VALUE, tree);", "+        if (firstLineMatches && !allowNesting) {", "-                getLineStart(mIndentCheck.getLine(firstLine - 1)));", "+                getLineStart(indentCheck.getLine(firstLine - 1)));", "-        findSubtreeLines(subtreeLines, aTree, aAllowNesting);", "+        findSubtreeLines(subtreeLines, tree, allowNesting);", "-        checkLinesIndent(subtreeLines, aLevel, aFirstLineMatches, firstLine);", "+        checkLinesIndent(subtreeLines, level, firstLineMatches, firstLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c843ae3535ee26d960be9864581c38d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "7347cc361b9251beb9f13acfbcb966f887925da5", "commitAfterChange": "661a9b0ddb10922458082573d79e0791ba6f38c2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected void checkExpressionSubtree(         DetailAST aTree,         int aLevel,         boolean aFirstLineMatches,         boolean aAllowNesting     )", "signatureAfterChange": "     protected final void checkExpressionSubtree(         DetailAST aTree,         int aLevel,         boolean aFirstLineMatches,         boolean aAllowNesting     )", "diff": ["-     */", "-    protected void checkExpressionSubtree(", "-        DetailAST aTree,", "-        int aLevel,", "-        boolean aFirstLineMatches,", "-        boolean aAllowNesting", "-    )", "-    {", "-        LineSet subtreeLines = new LineSet();", "-        if (aFirstLineMatches && !aAllowNesting) {", "-            int firstLine = getFirstLine(Integer.MAX_VALUE, aTree);", "-            subtreeLines.addLineAndCol(new Integer(firstLine),", "-                getLineStart(", "-                    mIndentCheck.getLines()[firstLine - 1]));", "-        }", "-        findSubtreeLines(subtreeLines, aTree, aAllowNesting);", "-", "-        checkLinesIndent(subtreeLines, aLevel, aFirstLineMatches);", "-    }", "+     */", "+    protected final void checkExpressionSubtree(", "+        DetailAST aTree,", "+        int aLevel,", "+        boolean aFirstLineMatches,", "+        boolean aAllowNesting", "+    )", "+    {", "+        LineSet subtreeLines = new LineSet();", "+        int firstLine = getFirstLine(Integer.MAX_VALUE, aTree);", "+        if (aFirstLineMatches && !aAllowNesting) {", "+            subtreeLines.addLineAndCol(new Integer(firstLine),", "+                getLineStart(", "+                    mIndentCheck.getLines()[firstLine - 1]));", "+        }", "+        findSubtreeLines(subtreeLines, aTree, aAllowNesting);", "+", "+        checkLinesIndent(subtreeLines, aLevel, aFirstLineMatches,", "+                         firstLine);"]}]}
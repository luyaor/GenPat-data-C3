{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e38c27045dd2ad9626d2e5e6d2e84d3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d48f0eec8d0530afe887c7a2d083c9c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "5b4a81a4e1449e2baf5adca4b821c23bc87f4de2", "commitAfterChange": "b69e47845e1903966ddf39efdf49e103ff5a5248", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "signatureAfterChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "diff": ["-                if (!beforeFirstImport && separated) {", "-                    // This check should be made more robust to handle", "-                    // comments and imports that span more than one line.", "-                    if (line - lastImportLine < 2) {", "-                        log(line, MSG_SEPARATION, name);", "-                    }", "+                // This check should be made more robust to handle", "+                // comments and imports that span more than one line.", "+                if (!beforeFirstImport && separated && line - lastImportLine < 2) {", "+                    log(line, MSG_SEPARATION, name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4501cb8c4bb618ceb2b0a3e825e47e90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "5cd9806d4b7900f41eb855d197eb334abade3ac8", "commitAfterChange": "98a9266a8091c1c6b26d41b4e17e1a32458f1bac", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                if (TokenTypes.POST_DEC        == parentType", "-                    || TokenTypes.DEC          == parentType", "-                    || TokenTypes.POST_INC     == parentType", "-                    || TokenTypes.INC          == parentType", "-                    || TokenTypes.ASSIGN       == parentType", "-                    || TokenTypes.PLUS_ASSIGN  == parentType", "-                    || TokenTypes.MINUS_ASSIGN == parentType", "-                    || TokenTypes.DIV_ASSIGN   == parentType", "-                    || TokenTypes.STAR_ASSIGN  == parentType", "-                    || TokenTypes.MOD_ASSIGN   == parentType", "-                    || TokenTypes.SR_ASSIGN    == parentType", "-                    || TokenTypes.BSR_ASSIGN   == parentType", "-                    || TokenTypes.SL_ASSIGN    == parentType", "-                    || TokenTypes.BXOR_ASSIGN  == parentType", "-                    || TokenTypes.BOR_ASSIGN   == parentType", "-                    || TokenTypes.BAND_ASSIGN  == parentType)", "+                // TODO: is there better way to check is ast", "+                // in left part of assignment?", "+                if ((TokenTypes.POST_DEC == parentType", "+                        || TokenTypes.DEC == parentType", "+                        || TokenTypes.POST_INC == parentType", "+                        || TokenTypes.INC == parentType", "+                        || TokenTypes.ASSIGN == parentType", "+                        || TokenTypes.PLUS_ASSIGN == parentType", "+                        || TokenTypes.MINUS_ASSIGN == parentType", "+                        || TokenTypes.DIV_ASSIGN == parentType", "+                        || TokenTypes.STAR_ASSIGN == parentType", "+                        || TokenTypes.MOD_ASSIGN == parentType", "+                        || TokenTypes.SR_ASSIGN == parentType", "+                        || TokenTypes.BSR_ASSIGN == parentType", "+                        || TokenTypes.SL_ASSIGN == parentType", "+                        || TokenTypes.BXOR_ASSIGN == parentType", "+                        || TokenTypes.BOR_ASSIGN == parentType", "+                        || TokenTypes.BAND_ASSIGN == parentType)", "+                        && ast.getParent().getFirstChild() == ast)", "-                    // TODO: is there better way to check is ast", "-                    // in left part of assignment?", "-                    if (ast.getParent().getFirstChild() == ast) {", "-                        removeVariable(ast);", "-                    }", "+                    removeVariable(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58acfba8617ca4c1630e0e3416a997f7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void findDuplicateFromLine(         final int aI, final int aJ, final int aILine,         final int[] aJLines, final Multimap<Integer, Integer> aIgnore)", "signatureAfterChange": "     private void findDuplicateFromLine(         final int aI, final int aJ, final int aILine,         final int[] aJLines, final Multimap<Integer, Integer> aIgnore)", "diff": ["-            // avoid Integer constructor whenever we can", "-            if (ignoreEntries != null) {", "-                if (ignoreEntries.contains(jLine)) {", "-                    continue;", "-                }", "+            if (ignoreEntries != null && ignoreEntries.contains(jLine)) {", "+                continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68380b73850a36b1fac318811257e83a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        if (!isTerminated(slist, true, true)) {", "-            if (!hasFallTruComment(aAST, nextGroup)) {", "-                if (!isLastGroup) {", "-                    log(nextGroup, \"fall.through\");", "-                }", "-                else {", "-                    log(aAST, \"fall.through.last\");", "-                }", "+        if (!isTerminated(slist, true, true)", "+            && !hasFallTruComment(aAST, nextGroup))", "+        {", "+            if (!isLastGroup) {", "+                log(nextGroup, \"fall.through\");", "+            }", "+            else {", "+                log(aAST, \"fall.through.last\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7791a420eba4c3c57ed1f5f8b9b4f950", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void checkException(FullIdent aExc, List<ClassInfo> aKnownExcs)", "signatureAfterChange": "     private void checkException(FullIdent aExc, List<ClassInfo> aKnownExcs)", "diff": ["-        if (!mAllowUnchecked) {", "-            if (isUnchecked(newClassInfo.getClazz())) {", "-                log(aExc.getLineNo(), aExc.getColumnNo(),", "-                    \"redundant.throws.unchecked\", aExc.getText());", "-            }", "+        if (!mAllowUnchecked && isUnchecked(newClassInfo.getClazz())) {", "+            log(aExc.getLineNo(), aExc.getColumnNo(),", "+                \"redundant.throws.unchecked\", aExc.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b9fd8f4579b99dabd0afed01bf491ed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                if (child.getType() == TokenTypes.METHOD_DEF) {", "-                    if (CheckUtils.isEqualsMethod(child)) {", "-                        if (hasObjectParameter(child)) {", "-                            hasEqualsObject = true;", "-                        }", "-                        else {", "-                            mEqualsMethods.add(child);", "-                        }", "+                if (child.getType() == TokenTypes.METHOD_DEF", "+                        && CheckUtils.isEqualsMethod(child))", "+                {", "+                    if (hasObjectParameter(child)) {", "+                        hasEqualsObject = true;", "+                    }", "+                    else {", "+                        mEqualsMethods.add(child);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b42e7dd2865b6f441e47684a80035fe1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        else if ((theAst.getParent() == null)", "+        else if (((theAst.getParent() == null)", "+                 && !isFollowsEmptyForIterator(theAst))", "-            if (!isFollowsEmptyForIterator(theAst)) {", "-                processRight(theAst);", "-            }", "+            processRight(theAst);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa365974cfa6d4b1bd26a784a28edd87", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-            else if (getAbstractOption() == BlockOption.TEXT) {", "-                if (!hasText(slistAST)) {", "-                    log(slistAST.getLineNo(),", "-                        slistAST.getColumnNo(),", "-                        \"block.empty\",", "-                        aAST.getText());", "-                }", "+            else if (getAbstractOption() == BlockOption.TEXT", "+                    && !hasText(slistAST))", "+            {", "+                log(slistAST.getLineNo(),", "+                    slistAST.getColumnNo(),", "+                    \"block.empty\",", "+                    aAST.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feddd440e653b39c35ea76d2e710071d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "5b4a81a4e1449e2baf5adca4b821c23bc87f4de2", "commitAfterChange": "b69e47845e1903966ddf39efdf49e103ff5a5248", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (hasUnicodeChar(literal)) {", "-            if (!(allowByTailComment && haastrailComment(ast)", "-                    || isAllCharactersEscaped(literal)", "-                    || allowEscapesForControlCharacters", "-                            && isOnlyUnicodeValidChars(literal, sUnicodeControl)", "-                    || allowNonPrintableEscapes", "-                            && isOnlyUnicodeValidChars(literal, sNonPrintableChars)))", "-            {", "-                log(ast.getLineNo(), \"forbid.escaped.unicode.char\");", "-            }", "+        if (hasUnicodeChar(literal) && !(allowByTailComment && haastrailComment(ast)", "+                || isAllCharactersEscaped(literal)", "+                || allowEscapesForControlCharacters", "+                        && isOnlyUnicodeValidChars(literal, sUnicodeControl)", "+                || allowNonPrintableEscapes", "+                        && isOnlyUnicodeValidChars(literal, sNonPrintableChars)))", "+        {", "+            log(ast.getLineNo(), \"forbid.escaped.unicode.char\");"]}]}
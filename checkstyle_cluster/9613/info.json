{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b4e8bb4cfa2671213330fcfb800772c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a17ecf33736e8650b9a60c48cd95014", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public String getMessage()", "signatureAfterChange": "     public String getMessage()", "diff": ["+        String message = getCustomMessage();", "-        final String message = getCustomMessage();", "-        if (message != null) {", "-            return message;", "+        if (message == null) {", "+            try {", "+                // Important to use the default class loader, and not the one in", "+                // the GlobalProperties object. This is because the class loader in", "+                // the GlobalProperties is specified by the user for resolving", "+                // custom classes.", "+                final ResourceBundle resourceBundle = getBundle(this.bundle);", "+                final String pattern = resourceBundle.getString(key);", "+                message = MessageFormat.format(pattern, args);", "+            }", "+            catch (final MissingResourceException ignored) {", "+                // If the Check author didn't provide i18n resource bundles", "+                // and logs error messages directly, this will return", "+                // the author's original message", "+                message = MessageFormat.format(key, args);", "+            }", "-", "-        try {", "-            // Important to use the default class loader, and not the one in", "-            // the GlobalProperties object. This is because the class loader in", "-            // the GlobalProperties is specified by the user for resolving", "-            // custom classes.", "-            final ResourceBundle resourceBundle = getBundle(this.bundle);", "-            final String pattern = resourceBundle.getString(key);", "-            return MessageFormat.format(pattern, args);", "-        }", "-        catch (final MissingResourceException ignored) {", "-            // If the Check author didn't provide i18n resource bundles", "-            // and logs error messages directly, this will return", "-            // the author's original message", "-            return MessageFormat.format(key, args);", "-        }", "+        return message;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3fae061748696a4c39a36e6a12ecd0e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java", "commitBeforeChange": "b7f5b3fbed8e2906f8abd72c1a602bea03ac2157", "commitAfterChange": "a619bc13918d23861116ec46dd858aa69d698498", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void setIgnoreCase(boolean caseInsensitive)", "signatureAfterChange": "     public void setIgnoreCase(boolean caseInsensitive)", "diff": ["-            setCompileFlags(Pattern.CASE_INSENSITIVE);", "+            compileFlags = Pattern.CASE_INSENSITIVE;", "+        else {", "+            compileFlags = 0;", "+        }", "+", "+        updateRegexp();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef24ce8e446a3ef4e81ef6004f6f7102", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "901d777e3d2c4f5417db791080a814f424c80b58", "commitAfterChange": "257983bcbfcd026266cb2cb6c556d701f2b9ba93", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "         public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter)", "signatureAfterChange": "         public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter)", "diff": ["+                    else {", "+                        tagMessageRegexp = null;", "+                    }", "+                    else {", "+                        tagMessageRegexp = null;", "+                    }"]}]}
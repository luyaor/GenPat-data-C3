{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b1922c771cb1e91b6217905a694ce0d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1678cd06235da1f91271ffe29671c52d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public boolean accept(Integer aInt)", "signatureAfterChange": "     public boolean accept(Integer aInt)", "diff": ["-        final Iterator<IntFilter> it = getFilters().iterator();", "-        while (it.hasNext()) {", "-            final IntFilter filter = it.next();", "+        for (IntFilter filter : getFilters()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34f677377308e67220dc2aeafc462f41", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     LexicalFrame findFrame(String aNameToFind)", "signatureAfterChange": "     LexicalFrame findFrame(String aNameToFind)", "diff": ["-        final Iterator<LexicalFrame> it = mFrameList.iterator();", "-        while (it.hasNext()) {", "-            final LexicalFrame thisFrame = it.next();", "+        for (LexicalFrame thisFrame : mFrameList) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56eccfdb210dd3eced1363c9a464b7f3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/j2ee/EntityBeanMethodChecker.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void checkCreateMatch()", "signatureAfterChange": "     protected void checkCreateMatch()", "diff": ["-        final Iterator<DetailAST> it = mEjbCreates.iterator();", "-        while (it.hasNext()) {", "-            final DetailAST createMethod = it.next();", "+        for (DetailAST createMethod : mEjbCreates) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86abf05466df67ddeaf2d6706b8bc60f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void tagSuppressions()", "signatureAfterChange": "     private void tagSuppressions()", "diff": ["-            final Iterator<List<TextBlock>> iter = cComments.iterator();", "-            while (iter.hasNext()) {", "-                final List<TextBlock> element = iter.next();", "+            for (List<TextBlock> element : cComments) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b55a8c653d8b8ea1fa0cdee17319a54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "     @Override     public void beginTree(DetailAST aRootAST)", "diff": ["-        final Iterator<Integer> linesIter = lines.iterator();", "-        while (linesIter.hasNext()) {", "-            final Integer lineNo = linesIter.next();", "-", "+        for (Integer lineNo : lines) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "911b5de3b52e0a5e9d6fc8a4b4d3e470", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "diff": ["-            final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();", "-            while (throwIt.hasNext()) {", "-                final ExceptionInfo ei = throwIt.next();", "+            for (ExceptionInfo ei : aThrows) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96b532693e8a4c19816e547ce4dab77c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "c0dfe4f3f2e4f88c12cce0fe595abb2e4081a4a0", "commitAfterChange": "29469b29d57869b0421bfb0e16439dd2767ed424", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r     private void tagSuppressions()", "signatureAfterChange": "\r     private void tagSuppressions()", "diff": ["-            final Collection cComments = contents.getCComments().values();\r", "-            final Iterator iter = cComments.iterator();\r", "-            while (iter.hasNext()) {\r", "-                final Collection element = (Collection) iter.next();\r", "+            final Collection<List<TextBlock>> cComments =\r", "+                contents.getCComments().values();\r", "+            for (List<TextBlock> element : cComments) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7dd91d7ce4ae615e09df6a3abe7ec92", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "     @Override     public void leaveToken(DetailAST aAST)", "diff": ["+    @Override", "-            final HashMap state = (HashMap) mScopeStack.pop();", "-            final Iterator finalVars = state.values().iterator();", "-", "-            while (finalVars.hasNext()) {", "-                final DetailAST var = (DetailAST) finalVars.next();", "-                log(var.getLineNo(), var.getColumnNo(),", "-                    \"final.variable\", var.getText());", "+            final Map<String, DetailAST> state = mScopeStack.pop();", "+            for (DetailAST var : state.values()) {", "+                log(var.getLineNo(), var.getColumnNo(), \"final.variable\", var", "+                        .getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eac0de3e03340607943c0ea831643968", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public int[] getAcceptableTokens()", "signatureAfterChange": "     @Override     public int[] getAcceptableTokens()", "diff": ["-        final Iterator<String> it = tokenNames.iterator();", "-        while (it.hasNext()) {", "-            final String name = it.next();", "-            result[i] = TokenTypes.getTokenId(name);", "-            i++;", "+        for (String name : tokenNames) {", "+            result[i++] = TokenTypes.getTokenId(name);"]}]}
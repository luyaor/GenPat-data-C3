{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "635989c0c46baef0bd24e96a5b454ad3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f8b3f80bb3601f5eaa7ecef10a6d91a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java", "commitBeforeChange": "72faf5617ac6ed96b46ad71c60cf0eda95947531", "commitAfterChange": "0406304865b4fdd6e5294f0bcd948f1158f4ae84", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testNotConstants() throws Exception", "signatureAfterChange": "      @Test     public void testNotConstants() throws Exception", "diff": ["-        options.add(new String[]{\"-doclet\", \"file.java\"});", "-        options.add(new String[]{\"-destfile\", \"target/file.java\"});", "+        options.add(new String[]{\"-doclet\", \"TokenTypesDoclet\"});", "+        options.add(new String[]{\"-destfile\", \"target/tokentypes.properties\"});", "-        names.add(\"com.puppycrawl.tools.checkstyle.doclets.InputTokenTypesDocletNotConstants\");", "+        names.add(\"src/test/resources/com/puppycrawl/tools/\"", "+                + \"checkstyle/doclets/InputTokenTypesDocletNotConstants.java\");", "-        Messager.preRegister(context, \"\");", "+        new TestMessager(context);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28cc1ea7016d1f426f178d163e362034", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "d499f72239cec254d620ab1619ac936e233e2033", "commitAfterChange": "c682b5725d22afc38bf19d9667b23a7deab6d8c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethod(MethodSignature aSig)", "signatureAfterChange": "     void verifyMethod(MethodSignature aSig)", "diff": ["-                \"method name '\" + aSig.getName().getText()", "-                + \"' must match pattern '\" + mConfig.getMethodPat() + \"'.\");", "+                \"name.invalidPattern\",", "+                \"method\",", "+                aSig.getName().getText(),", "+                mConfig.getMethodPat());", "-                \"More than \" + mConfig.getMaxParameters() + \" parameters.\");", "+                \"maxParam\", new Integer(mConfig.getMaxParameters()));", "-                \"redundant 'public' modifier.\");", "+                \"redundantModifier\", \"public\");", "-                \"redundant 'abstract' modifier.\");", "+                \"redundantModifier\", \"abstract\");", "-                \"method is missing a Javadoc comment.\");", "+                \"javadoc.missing\", \"method\");", "-                        log(jt.getLineNo(), \"Unused Javadoc tag.\");", "+                        log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");"]}]}
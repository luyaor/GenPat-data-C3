{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33283800d144646ede6f07d039aa7802", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4049136065e0f9d71fa9e2e996d68522", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilter.java", "commitBeforeChange": "a9bfdceec2a2d86a622c03fbd4052f007b5e70cc", "commitAfterChange": "1e7d8eef0641edcf97316618c8fab40bd248133d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public int decide(Object aObject)", "signatureAfterChange": "     public boolean accept(Object aObject)", "diff": ["-    public int decide(Object aObject)", "+    public boolean accept(Object aObject)", "-            return Filter.NEUTRAL;", "+            return false;", "-        if (mSeverityLevel == null) {", "-            return Filter.NEUTRAL;", "-        }", "-", "-        boolean matchOccurred = false;", "-        if (mSeverityLevel.equals(event.getSeverityLevel())) {", "-            matchOccurred = true;", "-        }", "-", "-        if (matchOccurred) {", "-            if (mAcceptOnMatch) {", "-                return Filter.ACCEPT;", "-            }", "-            else {", "-                return Filter.DENY;", "-            }", "-        }", "-        else {", "-            return Filter.NEUTRAL;", "-        }", "+        return mSeverityLevel.equals(event.getSeverityLevel());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae44168bb0efa3bb8980198e9551c0b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava2.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "        @Override       public Range<K> get(int index)", "signatureAfterChange": "    public V get(int index)", "diff": ["-      @Override", "-      public Range<K> get(int index) {", "-        checkElementIndex(index, len);", "-        if (index == 0 || index == len - 1) {", "-          return ranges.get(index + off).intersection(range);", "-        } else {", "-          return ranges.get(index + off);", "-        }", "-      }", "+  public V get(int index) {", "+    K key = null;", "+    int len = 0;", "+    checkElementIndex(index, len);", "+    int off;", "+    RangeMap<K, V> ranges = null;", "+    if (index == 0 || index == len - 1) {", "+      Object range;", "+      return ranges.get(key);", "+    } else {", "+      return ranges.get(key);", "+    }", "+  }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5f71041f8cfa6e29994b272a16ae491", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73edebb4dde7e2a7c86ace1ebdb961d2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private boolean commentMatch(Pattern aPattern, String aLine, int aLineNo     )", "signatureAfterChange": "     private boolean commentMatch(Pattern pattern, String line, int lineNo     )", "diff": ["-    private boolean commentMatch(Pattern aPattern, String aLine, int aLineNo", "+    private boolean commentMatch(Pattern pattern, String line, int lineNo", "-        final Matcher matcher = aPattern.matcher(aLine);", "+        final Matcher matcher = pattern.matcher(line);", "-            return getFileContents().hasIntersectionWithComment(aLineNo,", "-                    startMatch, aLineNo, endMatch);", "+            return getFileContents().hasIntersectionWithComment(lineNo,", "+                    startMatch, lineNo, endMatch);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdd311e221f262856e1990ea3b4b35c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/CommentSuppressor.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public boolean shouldSuppress(int aStartLineNo, int aStartColNo,             int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public boolean shouldSuppress(int startLineNo, int startColNo,             int endLineNo, int endColNo)", "diff": ["-    public boolean shouldSuppress(int aStartLineNo, int aStartColNo,", "-            int aEndLineNo, int aEndColNo)", "+    public boolean shouldSuppress(int startLineNo, int startColNo,", "+            int endLineNo, int endColNo)", "-        return (null != mCurrentContents)", "-                && mCurrentContents.hasIntersectionWithComment(aStartLineNo,", "-                        aStartColNo, aEndLineNo, aEndColNo);", "+        return (null != currentContents)", "+                && currentContents.hasIntersectionWithComment(startLineNo,", "+                        startColNo, endLineNo, endColNo);"]}]}
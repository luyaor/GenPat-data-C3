{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a953c5d82de3ee4be945a3aeeeadc902", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e4587f5571829db7373e9876b49582c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "signatureAfterChange": "     private void checkLinesIndent(LineSet lines,                                   IndentLevel indentLevel,                                   boolean firstLineMatches,                                   int firstLine)", "diff": ["-    private void checkLinesIndent(LineSet aLines,", "-                                  IndentLevel aIndentLevel,", "-                                  boolean aFirstLineMatches,", "-                                  int aFirstLine)", "+    private void checkLinesIndent(LineSet lines,", "+                                  IndentLevel indentLevel,", "+                                  boolean firstLineMatches,", "+                                  int firstLine)", "-        if (aLines.isEmpty()) {", "+        if (lines.isEmpty()) {", "-        final int startLine = aLines.firstLine();", "-        final int endLine = aLines.lastLine();", "-        final int startCol = aLines.firstLineCol();", "+        final int startLine = lines.firstLine();", "+        final int endLine = lines.lastLine();", "+        final int startCol = lines.firstLineCol();", "-            getLineStart(mIndentCheck.getLine(startLine - 1));", "+            getLineStart(indentCheck.getLine(startLine - 1));", "-            checkSingleLine(startLine, startCol, aIndentLevel,", "-                aFirstLineMatches);", "+            checkSingleLine(startLine, startCol, indentLevel,", "+                firstLineMatches);", "-        IndentLevel theLevel = aIndentLevel;", "-        if (aFirstLineMatches", "-            || ((aFirstLine > mMainAst.getLineNo()) && shouldIncreaseIndent()))", "+        IndentLevel theLevel = indentLevel;", "+        if (firstLineMatches", "+            || ((firstLine > mainAst.getLineNo()) && shouldIncreaseIndent()))", "-            theLevel = new IndentLevel(aIndentLevel, getBasicOffset());", "+            theLevel = new IndentLevel(indentLevel, getBasicOffset());", "-            final Integer col = aLines.getStartColumn(i);", "+            final Integer col = lines.getStartColumn(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bcf68ba24e8a7df286b98e60d6d7ab2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "b9b72f969209ac4edb9c6b02aaf8e2f590d0b737", "commitAfterChange": "24ba45a971569b9702e6bf78c5c07c48beb25464", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private List getMethodTags(String[] aLines, int aLastLineNo)", "signatureAfterChange": "     private List getMethodTags(Comment aComment)", "diff": ["-     **/", "-    private List getMethodTags(String[] aLines, int aLastLineNo)", "+     */", "+    private List getMethodTags(Comment aComment)", "+        final String[] lines = aComment.getText();", "-        int currentLine = aLastLineNo - aLines.length;", "-        for (int i = 0; i < aLines.length; i++) {", "+        int currentLine = aComment.getFirstLineNo() - 1;", "+", "+        for (int i = 0; i < lines.length; i++) {", "-            if (MATCH_JAVADOC_ARG.match(aLines[i])) {", "+            if (MATCH_JAVADOC_ARG.match(lines[i])) {", "-            else if (MATCH_JAVADOC_NOARG.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_NOARG.match(lines[i])) {", "-            else if (MATCH_JAVADOC_NOARG_CURLY.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_NOARG_CURLY.match(lines[i])) {", "-            else if (MATCH_JAVADOC_ARG_MULTILINE_START.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_ARG_MULTILINE_START.match(lines[i])) {", "-                while (remIndex < aLines.length) {", "-                    if (MATCH_JAVADOC_MULTILINE_CONT.match(aLines[remIndex])) {", "-                        remIndex = aLines.length;", "+                while (remIndex < lines.length) {", "+                    if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {", "+                        remIndex = lines.length;", "-            else if (MATCH_JAVADOC_NOARG_MULTILINE_START.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_NOARG_MULTILINE_START.match(lines[i])) {", "-                while (remIndex < aLines.length) {", "-                    if (MATCH_JAVADOC_MULTILINE_CONT.match(aLines[remIndex])) {", "-                        remIndex = aLines.length;", "+                while (remIndex < lines.length) {", "+                    if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {", "+                        remIndex = lines.length;"]}]}
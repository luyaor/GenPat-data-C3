{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30a2d63234f8f9232ef159c423e1c9d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f795c1575321d43e5d03e9a8910e79", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java", "commitBeforeChange": "267ba659ac62583f14c8c25d3cf4587070e1966c", "commitAfterChange": "b142c593512c9ef1179f4254ec406c23d180ed2f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        if (isAbstract(aAST)) {", "+            // abstract class could not have private constructor", "+            return;", "+        }", "+", "+        final boolean hasStaticModifier = isStatic(aAST);", "+        boolean hasNonPrivateStaticMethodOrField = false;", "+                }", "+                if (isStatic && !isPrivate) {", "+                    hasNonPrivateStaticMethodOrField = true;", "-        final boolean isUtilClass =", "-            extendsJLO && hasMethodOrField && !hasNonStaticMethodOrField;", "+        final boolean isUtilClass = extendsJLO && hasMethodOrField", "+            && !hasNonStaticMethodOrField && hasNonPrivateStaticMethodOrField;", "-        if (isUtilClass && hasAccessibleCtor) {", "+        if (isUtilClass && (hasAccessibleCtor && !hasStaticModifier)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ea853c8d0ca835d0a6b0cef8b5a3874", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/LocalVariableNameCheck.java", "commitBeforeChange": "ec19316322d0540f0734f3812c9a16394dae9c3a", "commitAfterChange": "32ca737edcd6f6a2a1e55f0b4ffcef6cce511812", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     protected final boolean mustCheckName(DetailAST aAST)", "signatureAfterChange": "      @Override     protected final boolean mustCheckName(DetailAST aAST)", "diff": ["+        if (mAllowOneCharVarInForLoop && isForLoopVariable(aAST)) {", "+            final String variableName =", "+                    aAST.findFirstToken(TokenTypes.IDENT).getText();", "+            return !sSingleChar.matcher(variableName).find();", "+        }"]}]}
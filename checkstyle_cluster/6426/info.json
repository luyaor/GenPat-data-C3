{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b362de167c6f156105dd1889ed46fa7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f6b349b61115eb162987fd36863722f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testExcludes()         throws Exception", "signatureAfterChange": "      @Test     public void testExcludes()         throws Exception", "diff": ["-            \"7: Using the '.*' form of import should be avoided - com.puppycrawl.tools.checkstyle.imports.*.\",", "-            \"28: Using the '.*' form of import should be avoided - java.io.File.*.\",", "+            \"7: \" + getCheckMessage(MSG_KEY, \"com.puppycrawl.tools.checkstyle.imports.*\"),", "+            \"28: \" + getCheckMessage(MSG_KEY, \"java.io.File.*\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "288059c9b10633d968b9a0916c7f3152", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testStarExcludes()         throws Exception", "signatureAfterChange": "      @Test     public void testStarExcludes()         throws Exception", "diff": ["-            \"25: Using a static member import should be avoided - javax.swing.WindowConstants.*.\",", "-            \"26: Using a static member import should be avoided - javax.swing.WindowConstants.*.\",", "+            \"25: \" + getCheckMessage(MSG_KEY, \"javax.swing.WindowConstants.*\"),", "+            \"26: \" + getCheckMessage(MSG_KEY, \"javax.swing.WindowConstants.*\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d268b736b047ccceb6577a71a1f87db", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testStaticImports() throws Exception", "signatureAfterChange": "      @Test     public void testStaticImports() throws Exception", "diff": ["-            \"13:6: Declaring variables, return values or parameters of type 'SomeStaticClass' is not allowed.\",", "-            \"15:31: Declaring variables, return values or parameters of type 'SomeStaticClass' is not allowed.\",", "+            \"13:6: \" + getCheckMessage(MSG_KEY, \"SomeStaticClass\"),", "+            \"15:31: \" + getCheckMessage(MSG_KEY, \"SomeStaticClass\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b36e7a7aa1ea441f729d814fd69bcea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java", "commitBeforeChange": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7", "commitAfterChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testIgnoreAccess()         throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreAccess()         throws Exception", "diff": ["-            \"17:20: Variable 'fData' must be private and have accessor methods.\",", "-            \"77:20: Variable 'someValue' must be private and have accessor methods.\",", "+            \"17:20: \" + getCheckMessage(MSG_KEY, \"fData\"),", "+            \"77:20: \" + getCheckMessage(MSG_KEY, \"someValue\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b4341a3f6157840f16852f15856342e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testSameFileNameFalsePositive() throws Exception", "signatureAfterChange": "      @Test     public void testSameFileNameFalsePositive() throws Exception", "diff": ["-            \"12:5: Declaring variables, return values or parameters of type 'SubCalendar' is not allowed.\",", "-            \"27:5: Declaring variables, return values or parameters of type 'java.util.List' is not allowed.\",", "+            \"12:5: \" + getCheckMessage(MSG_KEY, \"SubCalendar\"),", "+            \"27:5: \" + getCheckMessage(MSG_KEY, \"java.util.List\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bc34e2b4632b7444d6bcb6dab964054", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheckTest.java", "commitBeforeChange": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7", "commitAfterChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testIt() throws Exception", "signatureAfterChange": "     @Test     public void testIt() throws Exception", "diff": ["-            \"46:5: Method 'doh' is not designed for extension - needs to be abstract, final or empty.\",", "-            \"54:5: Method 'aNativeMethod' is not designed for extension - needs to be abstract, final or empty.\",", "+            \"46:5: \" + getCheckMessage(MSG_KEY, \"doh\"),", "+            \"54:5: \" + getCheckMessage(MSG_KEY, \"aNativeMethod\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72786ecba689cac970f6b23c89cde1ab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testIllegalClassNames() throws Exception", "signatureAfterChange": "      @Test     public void testIllegalClassNames() throws Exception", "diff": ["-            \"5:33: Throwing 'NullPointerException' is not allowed.\",", "-            \"14:73: Throwing 'java.lang.Error' is not allowed.\",", "+            \"5:33: \" + getCheckMessage(MSG_KEY, \"NullPointerException\"),", "+            \"14:73: \" + getCheckMessage(MSG_KEY, \"java.lang.Error\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7531ecfac2c191a8761df2723e4a23c1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheckTest.java", "commitBeforeChange": "27149f3504a2f350b74f456a9bffbae76a460060", "commitAfterChange": "5ede09997c283b4c418f0f540848e006be04fa87", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testForEachClauseToken() throws Exception", "signatureAfterChange": "      @Test     public void testForEachClauseToken() throws Exception", "diff": ["-            \"150:13: Parameter s should be final.\",", "-            \"158:13: Parameter s should be final.\",", "+            \"150:13: \" + getCheckMessage(MSG_KEY, \"s\"),", "+            \"158:13: \" + getCheckMessage(MSG_KEY, \"s\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e31d69e9f357e7e049135f4b007bee3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Test     public void testIllegalClassNamesWithIgnoreMethodNames() throws Exception", "signatureAfterChange": "     @Test     public void testIllegalClassNamesWithIgnoreMethodNames() throws Exception", "diff": ["-            \"5:33: Throwing 'NullPointerException' is not allowed.\",", "-            \"18:35: Throwing 'Throwable' is not allowed.\",", "+            \"5:33: \" + getCheckMessage(MSG_KEY, \"NullPointerException\"),", "+            \"18:35: \" + getCheckMessage(MSG_KEY, \"Throwable\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c764cfd2745048f6cb159a3807581b5e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheckTest.java", "commitBeforeChange": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7", "commitAfterChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault() throws Exception", "signatureAfterChange": "     @Test     public void testDefault() throws Exception", "diff": ["-            \"6:9: The field 'errorCode' must be declared final.\",", "-            \"23:9: The field 'errorCode' must be declared final.\",", "+            \"6:9: \" + getCheckMessage(MSG_KEY, \"errorCode\"),", "+            \"23:9: \" + getCheckMessage(MSG_KEY, \"errorCode\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cddad5b2a3fc71730ecc3b85ceeeedd8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testDefaultTokensLineWrapping() throws Exception", "signatureAfterChange": "      @Test     public void testDefaultTokensLineWrapping() throws Exception", "diff": ["-            \"1: package statement should not be line-wrapped.\",", "-            \"6: import statement should not be line-wrapped.\",", "+            \"1: \" + getCheckMessage(MSG_KEY, \"package\"),", "+            \"6: \" + getCheckMessage(MSG_KEY, \"import\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d650c13f696fef989eafd8b7cc78ae19", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheckTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testWithDefault()         throws Exception", "signatureAfterChange": "      @Test     public void testWithDefault()         throws Exception", "diff": ["-            \"15:1: Import from illegal package - sun.applet.*.\",", "-            \"28:1: Import from illegal package - sun.*.\",", "+            \"15:1: \" + getCheckMessage(MSG_KEY, \"sun.applet.*\"),", "+            \"28:1: \" + getCheckMessage(MSG_KEY, \"sun.*\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1a2ea95ff128c14a0e07bfd2b0e4fe2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testCaseInSensitive()         throws Exception", "signatureAfterChange": "      @Test     public void testCaseInSensitive()         throws Exception", "diff": ["-            \"24:28: Token text matches the illegal pattern 'a href'.\",", "-            \"25:32: Token text matches the illegal pattern 'a href'.\",", "+            \"24:28: \" + getCheckMessage(MSG_KEY, \"a href\"),", "+            \"25:32: \" + getCheckMessage(MSG_KEY, \"a href\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8d63ee216e07d0ff4f9e16517bf51df", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Test     public void testIgnoreMethodNames() throws Exception", "signatureAfterChange": "     @Test     public void testIgnoreMethodNames() throws Exception", "diff": ["-            \"9:51: Throwing 'RuntimeException' is not allowed.\",", "-            \"18:35: Throwing 'Throwable' is not allowed.\",", "+            \"9:51: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),", "+            \"18:35: \" + getCheckMessage(MSG_KEY, \"Throwable\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2599c229817fdc726ad5fbd0c2273e5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testFormat() throws Exception", "signatureAfterChange": "      @Test     public void testFormat() throws Exception", "diff": ["-            \"16:13: Declaring variables, return values or parameters of type 'java.util.TreeSet' is not allowed.\",", "-            \"17:13: Declaring variables, return values or parameters of type 'TreeSet' is not allowed.\",", "+            \"16:13: \" + getCheckMessage(MSG_KEY, \"java.util.TreeSet\"),", "+            \"17:13: \" + getCheckMessage(MSG_KEY, \"TreeSet\"),"]}]}
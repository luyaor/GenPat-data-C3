{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e8489f16190b4a141520de0f0ff8395", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88426e984c6e8c29c9d50b3948f51b32", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "7ae04fd647ca3584216920114ed7aba5ffc6c587", "commitAfterChange": "1cea3765893e83e0d58ca110113e0d05b15a798a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["-        if (aArgs.length == 0) {", "+        // parse the parameters", "+        final CommandLineParser clp = new PosixParser();", "+        CommandLine line = null;", "+        try {", "+            line = clp.parse(OPTS, aArgs);", "+        }", "+        catch (ParseException e) {", "+            e.printStackTrace();", "+        ", "+        // setup the properties", "+        final Properties props =", "+            line.hasOption(\"p\")", "+                ? loadProperties(new File(line.getOptionValue(\"p\")))", "+                : System.getProperties();", "-        // be brain dead about arguments parsing", "-        String format = \"plain\";", "-        String output = null;", "-        Properties props = System.getProperties();", "-        final List foundFiles = new ArrayList();", "-        final ArrayList files = new ArrayList();", "-        for (int i = 0; i < aArgs.length; i++) {", "-            if (\"-f\".equals(aArgs[i])) {", "-                format = aArgs[++i];", "-            }", "-            else if (\"-o\".equals(aArgs[i])) {", "-                output = aArgs[++i];", "-            }", "-            else if (\"-r\".equals(aArgs[i])) {", "-                traverse(new File(aArgs[++i]), foundFiles);", "-            }", "-            else if (\"-p\".equals(aArgs[i])) {", "-                props = loadProperties(new File(aArgs[++i]));", "-            }", "-            else {", "-                files.add(aArgs[i]);", "-            }", "+        // ensure a config file is specified", "+        if (!line.hasOption(\"c\")) {", "+            System.out.println(\"Must specify a config XML file.\");", "+            usage();", "+        }", "+        ", "+        // Load the config file", "+        CheckConfiguration[] checkConfigs = null;", "+        try {", "+            checkConfigs =", "+                ConfigurationLoader.loadConfigs(line.getOptionValue(\"c\"));", "+        }", "+        catch (CheckstyleException e) {", "+            System.out.println(\"Error loading configuration file\");", "+            e.printStackTrace(System.out);", "+            System.exit(1);", "-        // create the appropriate listener", "-        OutputStream out = System.out;", "+        // setup the output stream", "+        OutputStream out = null;", "-        if (output != null) {", "+        if (line.hasOption(\"o\")) {", "+            final String fname = line.getOptionValue(\"o\"); ", "-                out = new FileOutputStream(output);", "+                out = new FileOutputStream(fname);", "-                System.out.println(\"Could not find file: '\" + output + \"'\");", "+                System.out.println(\"Could not find file: '\" + fname + \"'\");", "+        else {", "+            out = System.out;", "+            closeOut = false;", "+        }", "+        ", "+        // create the appropriate listener", "+        final String format =", "+            line.hasOption(\"f\") ? line.getOptionValue(\"f\") : \"plain\";", "+        ", "-        // Check that I have a config file", "+        // Get all the Java files", "+        final List files = new ArrayList();", "+        if (line.hasOption(\"r\")) {", "+            final String[] values = line.getOptionValues(\"r\");", "+            for (int i = 0; i < values.length; i++) {", "+                traverse(new File(values[i]), files);", "+            }", "+        }", "+ ", "+        final String[] remainingArgs = line.getArgs();", "+        for (int i = 0; i < remainingArgs.length; i++) {", "+            files.add(remainingArgs[i]);", "+        } ", "+", "-            System.out.println(\"Need to specify a config file\");", "+            System.out.println(\"Must specify files to process\");", "-        }", "+        }         ", "-        // Load the config file", "-        final String configFname = (String) files.remove(0);", "-        CheckConfiguration[] checkConfigs = null;", "-        try {", "-            checkConfigs = ConfigurationLoader.loadConfigs(configFname);", "-        }", "-        catch (CheckstyleException e) {", "-            System.out.println(\"Error loading configuration file\");", "-            e.printStackTrace(System.out);", "-            System.exit(1);", "-        }", "-", "+        // create the checker", "-        files.addAll(foundFiles);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0ae6a907d6ae9a48887acf5c98aacbe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "4065b439221c56ab2a11f97cb50c246d8ba2c913", "commitAfterChange": "1a7694f787314c10700fb3d038c524e33542b950", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Configuration(Properties aProps, PrintStream aLog)         throws RESyntaxException, FileNotFoundException, IOException", "signatureAfterChange": "     public Configuration(Properties aProps, PrintStream aLog)         throws RESyntaxException, FileNotFoundException, IOException", "diff": ["-        setTodoPat(aProps.getProperty(TODO_PATTERN_PROP, TODO_PATTERN));", "-        setParamPat(aProps.getProperty(PARAMETER_PATTERN_PROP,", "-                                       PARAMETER_PATTERN));", "-        setStaticPat(aProps.getProperty(STATIC_PATTERN_PROP, STATIC_PATTERN));", "-        setStaticFinalPat(aProps.getProperty(CONST_PATTERN_PROP,", "-                                             CONST_PATTERN));", "-        setMemberPat(aProps.getProperty(MEMBER_PATTERN_PROP, MEMBER_PATTERN));", "-        setPublicMemberPat(aProps.getProperty(PUBLIC_MEMBER_PATTERN_PROP,", "-                                              PUBLIC_MEMBER_PATTERN));", "-        setTypePat(aProps.getProperty(TYPE_PATTERN_PROP, TYPE_PATTERN));", "-        setLocalVarPat(aProps.getProperty(LOCAL_VAR_PATTERN_PROP,", "-                                          LOCAL_VAR_PATTERN));", "-        setMethodPat(aProps.getProperty(METHOD_PATTERN_PROP, METHOD_PATTERN));", "-        setIgnoreLineLengthPat(aProps.getProperty(", "-            IGNORE_LINE_LENGTH_PATTERN_PROP, IGNORE_LINE_LENGTH_PATTERN));", "-        setIntProperty(aProps, aLog, MAX_LINE_LENGTH_PROP, MAX_LINE_LENGTH);", "-        setIntProperty(aProps, aLog, MAX_METHOD_LENGTH_PROP, MAX_METHOD_LENGTH);", "-        setIntProperty(aProps, aLog,", "-                       MAX_CONSTRUCTOR_LENGTH_PROP, MAX_CONSTRUCTOR_LENGTH);", "-        setIntProperty(aProps, aLog, MAX_FILE_LENGTH_PROP, MAX_FILE_LENGTH);", "+        setPatternProperty(aProps, Defn.TODO_PATTERN_PROP, TODO_PATTERN);", "+        setPatternProperty(aProps, Defn.PARAMETER_PATTERN_PROP,", "+                           PARAMETER_PATTERN);", "+        setPatternProperty(aProps, Defn.STATIC_PATTERN_PROP, STATIC_PATTERN);", "+        setPatternProperty(aProps, Defn.CONST_PATTERN_PROP, CONST_PATTERN);", "+        setPatternProperty(aProps, Defn.MEMBER_PATTERN_PROP, MEMBER_PATTERN);", "+        setPatternProperty(aProps, Defn.PUBLIC_MEMBER_PATTERN_PROP,", "+                           PUBLIC_MEMBER_PATTERN);", "+        setPatternProperty(aProps, Defn.TYPE_PATTERN_PROP, TYPE_PATTERN);", "+        setPatternProperty(aProps, Defn.LOCAL_VAR_PATTERN_PROP,", "+                           LOCAL_VAR_PATTERN);", "+        setPatternProperty(aProps, Defn.METHOD_PATTERN_PROP, METHOD_PATTERN);", "+        setPatternProperty(aProps, Defn.IGNORE_LINE_LENGTH_PATTERN_PROP,", "+                           IGNORE_LINE_LENGTH_PATTERN);", "+        setIntProperty(aProps, aLog, Defn.MAX_LINE_LENGTH_PROP,", "+                       MAX_LINE_LENGTH);", "+        setIntProperty(aProps, aLog, Defn.MAX_METHOD_LENGTH_PROP,", "+                       MAX_METHOD_LENGTH);", "+        setIntProperty(aProps, aLog, Defn.MAX_CONSTRUCTOR_LENGTH_PROP,", "+                       MAX_CONSTRUCTOR_LENGTH);", "+        setIntProperty(aProps, aLog, Defn.MAX_FILE_LENGTH_PROP,", "+                       MAX_FILE_LENGTH);", "-        setBooleanProperty(aProps, ALLOW_TABS_PROP);", "-        setIntProperty(aProps, aLog, TAB_WIDTH_PROP, TAB_WIDTH);", "-        setBooleanProperty(aProps, ALLOW_PROTECTED_PROP);", "-        setBooleanProperty(aProps, ALLOW_PACKAGE_PROP);", "-        setBooleanProperty(aProps, ALLOW_NO_AUTHOR_PROP);", "+        setBooleanProperty(aProps, Defn.ALLOW_TABS_PROP);", "+        setIntProperty(aProps, aLog, Defn.TAB_WIDTH_PROP, TAB_WIDTH);", "+        setBooleanProperty(aProps, Defn.ALLOW_PROTECTED_PROP);", "+        setBooleanProperty(aProps, Defn.ALLOW_PACKAGE_PROP);", "+        setBooleanProperty(aProps, Defn.ALLOW_NO_AUTHOR_PROP);", "-            Scope.getInstance(aProps.getProperty(JAVADOC_CHECKSCOPE_PROP,", "+            Scope.getInstance(aProps.getProperty(Defn.JAVADOC_CHECKSCOPE_PROP,", "-        setBooleanProperty(aProps, REQUIRE_PACKAGE_HTML_PROP);", "-        setBooleanProperty(aProps, IGNORE_IMPORTS_PROP);", "+        setBooleanProperty(aProps, Defn.REQUIRE_PACKAGE_HTML_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_IMPORTS_PROP);", "-            aProps.getProperty(ILLEGAL_IMPORTS_PROP, ILLEGAL_IMPORTS));", "-        setIllegalInstantiations(aProps.getProperty(ILLEGAL_INSTANTIATIONS_PROP,", "-                                                   ILLEGAL_INSTANTIATIONS));", "-        setBooleanProperty(aProps, IGNORE_WHITESPACE_PROP);", "-        setBooleanProperty(aProps, IGNORE_CAST_WHITESPACE_PROP);", "-        setBooleanProperty(aProps, IGNORE_OP_WRAP_PROP);", "-        setBooleanProperty(aProps, IGNORE_BRACES_PROP);", "-        setBooleanProperty(aProps, IGNORE_LONG_ELL_PROP);", "-        setBooleanProperty(aProps, IGNORE_PUBLIC_IN_INTERFACE_PROP);", "-        setCacheFile(aProps.getProperty(CACHE_FILE_PROP));", "-        setBooleanProperty(aProps, IGNORE_IMPORT_LENGTH_PROP);", "-        setHeaderIgnoreLines(aProps.getProperty(HEADER_IGNORE_LINE_PROP));", "-        setBooleanProperty(aProps, HEADER_LINES_REGEXP_PROP);", "+            aProps.getProperty(Defn.ILLEGAL_IMPORTS_PROP, ILLEGAL_IMPORTS));", "+        setIllegalInstantiations(", "+            aProps.getProperty(Defn.ILLEGAL_INSTANTIATIONS_PROP,", "+                               ILLEGAL_INSTANTIATIONS));", "+        setBooleanProperty(aProps, Defn.IGNORE_WHITESPACE_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_CAST_WHITESPACE_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_OP_WRAP_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_BRACES_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_LONG_ELL_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_PUBLIC_IN_INTERFACE_PROP);", "+        setCacheFile(aProps.getProperty(Defn.CACHE_FILE_PROP));", "+        setBooleanProperty(aProps, Defn.IGNORE_IMPORT_LENGTH_PROP);", "+        setHeaderIgnoreLines(aProps.getProperty(Defn.HEADER_IGNORE_LINE_PROP));", "+        setBooleanProperty(aProps, Defn.HEADER_LINES_REGEXP_PROP);", "-        final String fname = aProps.getProperty(HEADER_FILE_PROP);", "+        final String fname = aProps.getProperty(Defn.HEADER_FILE_PROP);", "-        setLCurlyMethod(getLeftCurlyOptionProperty(", "-                            aProps, LCURLY_METHOD_PROP,", "-                            LeftCurlyOption.EOL, aLog));", "-        setLCurlyType(getLeftCurlyOptionProperty(", "-                          aProps, LCURLY_TYPE_PROP,", "-                          LeftCurlyOption.EOL, aLog));", "-        setLCurlyOther(getLeftCurlyOptionProperty(", "-                           aProps, LCURLY_OTHER_PROP,", "-                           LeftCurlyOption.EOL, aLog));", "+        setLeftCurlyOptionProperty(aProps, Defn.LCURLY_METHOD_PROP, aLog);", "+        setLeftCurlyOptionProperty(aProps, Defn.LCURLY_TYPE_PROP, aLog);", "+        setLeftCurlyOptionProperty(aProps, Defn.LCURLY_OTHER_PROP, aLog);", "-                      aProps, RCURLY_PROP, RightCurlyOption.SAME, aLog));", "-        setTryBlock(", "-            getBlockOptionProperty(", "-                aProps, TRY_BLOCK_PROP, BlockOption.TEXT, aLog));", "-        setCatchBlock(", "-            getBlockOptionProperty(", "-                aProps, CATCH_BLOCK_PROP, BlockOption.TEXT, aLog));", "-        setFinallyBlock(", "-            getBlockOptionProperty(", "-                aProps, FINALLY_BLOCK_PROP, BlockOption.TEXT, aLog));", "+                      aProps, Defn.RCURLY_PROP, RightCurlyOption.SAME, aLog));", "+        setBlockOptionProperty(aProps, Defn.TRY_BLOCK_PROP, aLog);", "+        setBlockOptionProperty(aProps, Defn.CATCH_BLOCK_PROP, aLog);", "+        setBlockOptionProperty(aProps, Defn.FINALLY_BLOCK_PROP, aLog);", "-                                               PAREN_PAD_PROP,", "+                                               Defn.PAREN_PAD_PROP,"]}]}
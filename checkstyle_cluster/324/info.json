{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f29f6d9288a9d1ead451324f89fd2ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c45d765ba546b27bda773298eb32534", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CommitValidationTest.java", "commitBeforeChange": "d1c5d416666252a520696d079945d17f50c83968", "commitAfterChange": "e7edc7118da8c40cba7b1497fa336e6b61d70031", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private static List<RevCommit> getCommitsToCheck() throws Exception", "signatureAfterChange": "      private static List<RevCommit> getCommitsToCheck() throws Exception", "diff": ["-        Repository repo = new FileRepositoryBuilder().findGitDir().build();", "-", "-        RevCommitsPair revCommitsPair = resolveRevCommitsPair(repo);", "-        if (COMMITS_RESOLUTION_MODE == CommitsResolutionMode.BY_COUNTER) {", "-            commits = getCommitsByCounter(revCommitsPair.getFirst());", "-            commits.addAll(getCommitsByCounter(revCommitsPair.getSecond()));", "-        }", "-        else {", "-            commits = getCommitsByLastCommitAuthor(revCommitsPair.getFirst());", "-            commits.addAll(getCommitsByLastCommitAuthor(revCommitsPair.getSecond()));", "+        try (Repository repo = new FileRepositoryBuilder().findGitDir().build()) {", "+            RevCommitsPair revCommitsPair = resolveRevCommitsPair(repo);", "+            if (COMMITS_RESOLUTION_MODE == CommitsResolutionMode.BY_COUNTER) {", "+                commits = getCommitsByCounter(revCommitsPair.getFirst());", "+                commits.addAll(getCommitsByCounter(revCommitsPair.getSecond()));", "+            }", "+            else {", "+                commits = getCommitsByLastCommitAuthor(revCommitsPair.getFirst());", "+                commits.addAll(getCommitsByLastCommitAuthor(revCommitsPair.getSecond()));", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33379be750df37d2569143349502d9be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "bd503e1576ded224169c1f15b9ca6cb8d08f9cb2", "commitAfterChange": "f2b01a44a216e88957eb6cb22e4b0e39429a6c84", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected AuditListener[] getListeners()         throws ClassNotFoundException, InstantiationException,         IllegalAccessException, IOException", "signatureAfterChange": "     protected AuditListener[] getListeners()         throws ClassNotFoundException, InstantiationException,         IllegalAccessException, IOException", "diff": ["-        final int listenerCount = Math.max(1, mFormatters.size());", "+        final int formatterCount = Math.max(1, mFormatters.size());", "+        final int listenerCount = mCustomListeners.size();", "-        final AuditListener[] listeners = new AuditListener[listenerCount];", "+        final AuditListener[] listeners =", "+            new AuditListener[formatterCount + listenerCount];", "+        // formatters", "-            return listeners;", "-", "-        for (int i = 0; i < listeners.length; i++) {", "-            final Formatter f = (Formatter) mFormatters.get(i);", "-            listeners[i] = f.createListener(this);", "+        else {", "+            for (int i = 0; i < formatterCount; i++) {", "+                final Formatter f = (Formatter) mFormatters.get(i);", "+                listeners[i] = f.createListener(this);", "+            }", "+        }", "+        //custom listeners", "+        for (int i = 0; i < listenerCount; i++) {", "+            final Listener listener = (Listener) mCustomListeners.get(i);", "+            listeners[formatterCount + i] = createCustomListener(listener);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da4b7712bb876a63ce9f3ae7e1b94cbd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "276f033d467d3fa2afa4684b049e33fc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "be8127a604bfdd91ff7cd32a1f825c9851d791ec", "commitAfterChange": "7d097b6fa682f8dcfedd95da2db8fed980c51705", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private List<JavadocTag> getJavadocTags(TextBlock aCmt)", "signatureAfterChange": "     private List<JavadocTag> getJavadocTags(TextBlock aCmt)", "diff": ["-        final String[] text = aCmt.getText();", "-        final List<JavadocTag> tags = Lists.newArrayList();", "-        Pattern tagPattern = Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "-        for (int i = 0; i < text.length; i++) {", "-            final String s = text[i];", "-            final Matcher tagMatcher = tagPattern.matcher(s);", "-            if (tagMatcher.find()) {", "-                final String tagName = tagMatcher.group(1);", "-", "-                String content = s.substring(tagMatcher.end(1));", "-                if (content.endsWith(\"*/\")) {", "-                    content = content.substring(0, content.length() - 2);", "-                }", "-                int col = tagMatcher.start(1) - 1;", "-                if (i == 0) {", "-                    col += aCmt.getStartColNo();", "-                }", "-", "-                if (JavadocTagInfo.isValidName(tagName)) {", "-                    tags.add(new JavadocTag(aCmt.getStartLineNo() + i, col,", "-                            tagName, content.trim()));", "-                }", "-                else if (!mAllowUnknownTags) {", "-                    log(aCmt.getStartLineNo() + i, col,", "-                            \"javadoc.unknownTag\", tagName);", "-                }", "+        JavadocTags tags =", "+            JavadocUtils.getJavadocTags(aCmt, JavadocTagType.BLOCK);", "+        if (!mAllowUnknownTags) {", "+            for (InvalidJavadocTag tag : tags.invalidTags) {", "+                log(tag.line, tag.col, \"javadoc.unknownTag\", tag.name);", "-            tagPattern = Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "-        return tags;", "+        return tags.validTags;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ef2e5ec46c263d06f7b3d21a42db19e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "73ec35d35bcf970c588278cb18300dfdf814a704", "commitAfterChange": "987d2d67d56e054adbe5ec56136dddb49f533137", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "          @SuppressWarnings(\"unchecked\")         @Override         public Object convert(Class aType, Object aValue)             throws ConversionException", "signatureAfterChange": "         @SuppressWarnings(\"unchecked\")         public Object convert(Class aType, Object aValue)", "diff": ["-", "+        /** {@inheritDoc} */", "-        @Override", "-            throws ConversionException", "-            // Deal with a null value", "-            if (aValue == null) {", "-                if (useDefault) {", "-                    return (defaultValue);", "-                }", "-                throw new ConversionException(\"No value specified\");", "+            if (null == aType) {", "+                throw new ConversionException(\"Cannot convert from null.\");", "-            // Deal with the no-conversion-needed case", "-            if (MODEL.getClass() == aValue.getClass()) {", "-                return (aValue);", "-            }", "-", "-            // Parse the input value as a String into elements", "-            // and convert to the appropriate type", "-            try {", "-                final List list = parseElements(aValue.toString());", "-                final String[] results = new String[list.size()];", "-", "-                for (int i = 0; i < results.length; i++) {", "-                    results[i] = (String) list.get(i);", "-                }", "-                return (results);", "-            }", "-            catch (final Exception e) {", "-                if (useDefault) {", "-                    return (defaultValue);", "-                }", "-                throw new ConversionException(aValue.toString(), e);", "-            }", "-        }", "+            // Convert to a String and trim it for the tokenizer.", "+            final StringTokenizer st = new StringTokenizer(", "+                aValue.toString().trim(), \",\");", "+            final List<String> result = Lists.newArrayList();", "+                result.add(token.trim());", "+            return result.toArray(new String[result.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91a69ebbe490c0e651a13188dbba7ba0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "576d593f6cb309d0959639fa707d0a01f28a6609", "commitAfterChange": "9dbc71956635b56a20780d484454e177897b5788", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "diff": ["-                    if (tagMatcher.groupCount() == 2) {", "-                        final String tagName = tagMatcher.group(1);", "-                        final String tagValue = tagMatcher.group(2).trim();", "-                        final int line = cmt.getStartLineNo() + i;", "-                        int col = commentOffset + tagMatcher.start(1) - 1;", "-                        if (i == 0) {", "-                            col += cmt.getStartColNo();", "-                        }", "-                        if (JavadocTagInfo.isValidName(tagName)) {", "-                            tags.add(new JavadocTag(line, col, tagName,", "-                                    tagValue));", "-                        }", "-                        else {", "-                            invalidTags.add(new InvalidJavadocTag(line, col,", "-                                    tagName));", "-                        }", "+                    final String tagName = tagMatcher.group(1);", "+                    final String tagValue = tagMatcher.group(2).trim();", "+                    final int line = cmt.getStartLineNo() + i;", "+                    int col = commentOffset + tagMatcher.start(1) - 1;", "+                    if (i == 0) {", "+                        col += cmt.getStartColNo();", "+                    }", "+                    if (JavadocTagInfo.isValidName(tagName)) {", "+                        tags.add(new JavadocTag(line, col, tagName,", "+                                tagValue));", "+                    }", "+                    else {", "+                        invalidTags.add(new InvalidJavadocTag(line, col,", "+                                tagName));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6b712d0d09c4f632715f24106c7c55f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "260d2b935c0b25688a11077ada9405b791857fd8", "commitAfterChange": "ad42ed29799a13b9426a05cc94b4a4aaba709c2c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "signatureAfterChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "diff": ["-        if (ident != null) {", "-            final String name = ident.getText();", "-            final int groupIdx = getGroupNumber(name);", "-            final int line = ident.getLineNo();", "+        final String name = ident.getText();", "+        final int groupIdx = getGroupNumber(name);", "+        final int line = ident.getLineNo();", "-            if (groupIdx > lastGroup) {", "-                // This check should be made more robust to handle", "-                // comments and imports that span more than one line.", "-                if (!beforeFirstImport && separated && line - lastImportLine < 2) {", "-                    log(line, MSG_SEPARATION, name);", "-                }", "+        if (groupIdx > lastGroup) {", "+            // This check should be made more robust to handle", "+            // comments and imports that span more than one line.", "+            if (!beforeFirstImport && separated && line - lastImportLine < 2) {", "+                log(line, MSG_SEPARATION, name);", "-            else if (groupIdx == lastGroup || sortStaticImportsAlphabetically", "-                     && isAlphabeticallySortableStaticImport(isStatic)) {", "-                doVisitTokenInSameGroup(isStatic, previous, name, line);", "-            }", "-            else {", "-                log(line, MSG_ORDERING, name);", "-            }", "-", "-            lastGroup = groupIdx;", "-            lastImport = name;", "+        else if (groupIdx == lastGroup || sortStaticImportsAlphabetically", "+                 && isAlphabeticallySortableStaticImport(isStatic)) {", "+            doVisitTokenInSameGroup(isStatic, previous, name, line);", "+        }", "+        else {", "+            log(line, MSG_ORDERING, name);", "+        }", "+", "+        lastGroup = groupIdx;", "+        lastImport = name;"]}]}
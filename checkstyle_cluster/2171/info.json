{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4aeb6db820b1861de65ac356a4397648", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24a6f7f8671a9e102595c7a1b325c39b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "5e7932be70b20345b77f6fc2adb8423f2d6a091c", "commitAfterChange": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected final void processAST(DetailAST aAST)", "signatureAfterChange": "     protected final void processAST(DetailAST aAST)", "diff": ["-        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-        final Scope targetScope =", "-            ScopeUtils.inInterfaceBlock(aAST)", "-                ? Scope.PUBLIC", "-                : declaredScope;", "+        if (shouldCheck(aAST)) {", "+            final FileContents contents = getFileContents();", "+            final TextBlock cmt = contents.getJavadocBefore(aAST.getLineNo());", "-        if (targetScope.isIn(mScope)) {", "-            final Scope surroundingScope =", "-                ScopeUtils.getSurroundingScope(aAST);", "-", "-            if (surroundingScope.isIn(mScope)) {", "-                final FileContents contents = getFileContents();", "-                final TextBlock cmt =", "-                    contents.getJavadocBefore(aAST.getLineNo());", "-", "-                if (cmt == null) {", "-                    log(aAST, \"javadoc.missing\");", "-                }", "-                else {", "-                    checkComment(aAST, cmt);", "-                }", "+            if (cmt == null) {", "+                log(aAST, \"javadoc.missing\");", "+            }", "+            else {", "+                checkComment(aAST, cmt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "550ec68f7dfe5f1ba00daf48b9b7b316", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "5e7932be70b20345b77f6fc2adb8423f2d6a091c", "commitAfterChange": "cdf0ac0f4c4fb8ab63c4bb7d144a71682c6e400a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-        final Scope typeScope =", "-            ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;", "-        if (typeScope.isIn(mScope)) {", "-            final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);", "-            if ((surroundingScope == null) || surroundingScope.isIn(mScope)) {", "-                final FileContents contents = getFileContents();", "-                final int lineNo = aAST.getLineNo();", "-                final TextBlock cmt = contents.getJavadocBefore(lineNo);", "-                if (cmt == null) {", "-                    log(lineNo, \"javadoc.missing\");", "-                }", "-                else if (ScopeUtils.isOuterMostType(aAST)) {", "-                    // don't check author/version for inner classes", "-                    Vector tags = getJavadocTags(cmt);", "-                    checkTag(lineNo, tags, \"author\",", "-                             mAuthorFormatRE, mAuthorFormat);", "-                    checkTag(lineNo, tags, \"version\",", "-                             mVersionFormatRE, mVersionFormat);", "-                }", "+        if (shouldCheck(aAST)) {", "+            final FileContents contents = getFileContents();", "+            final int lineNo = aAST.getLineNo();", "+            final TextBlock cmt = contents.getJavadocBefore(lineNo);", "+            if (cmt == null) {", "+                log(lineNo, \"javadoc.missing\");", "+            }", "+            else if (ScopeUtils.isOuterMostType(aAST)) {", "+                // don't check author/version for inner classes", "+                Vector tags = getJavadocTags(cmt);", "+                checkTag(lineNo, tags, \"author\",", "+                         mAuthorFormatRE, mAuthorFormat);", "+                checkTag(lineNo, tags, \"version\",", "+                         mVersionFormatRE, mVersionFormat);"]}]}
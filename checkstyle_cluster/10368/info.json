{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfaeb60a84273c9baa9e39c9d4a2aace", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20ac70f2670c5f80feb3350af91445be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "a07cae0aca9f9072256b3a5fd05779e8d69b9748", "commitAfterChange": "8f19f1d70630f210f33ebd51d42d04ca9727ff36", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void register(int type, Class<?> handlerClass)", "signatureAfterChange": "     private void register(int type, Class<?> handlerClass)", "diff": ["-        try {", "-            final Constructor<?> ctor = handlerClass", "-                .getConstructor(new Class[] {IndentationCheck.class,", "-                    DetailAST.class, // current AST", "-                    AbstractExpressionHandler.class, // parent", "-                });", "-            typeHandlers.put(type, ctor);", "-        }", "-        catch (final NoSuchMethodException | SecurityException e) {", "-            final String message = \"couldn't find ctor for \" + handlerClass;", "-            LOG.debug(message, e);", "-            throw new RuntimeException(message);", "-        }", "+        final Constructor<?> ctor = Utils.getConstructor(handlerClass,", "+                IndentationCheck.class,", "+                DetailAST.class, // current AST", "+                AbstractExpressionHandler.class // parent", "+        );", "+        typeHandlers.put(type, ctor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33a6667cf5018adf7250b533c7de4d13", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "4b2962136f5b47b80b43e32a94b6e260f686c77d", "commitAfterChange": "fca6580f48d852d7cc416612e206df99e35d3fc2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static Configuration loadConfiguration(String config,         PropertyResolver overridePropsResolver, boolean omitIgnoredModules)         throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(String config,         PropertyResolver overridePropsResolver, boolean omitIgnoredModules)         throws CheckstyleException", "diff": ["+        // figure out if this is a File or a URL", "+        URI uri;", "-            // figure out if this is a File or a URL", "-            URI uri;", "-            try {", "-                final URL url = new URL(config);", "-                uri = url.toURI();", "+            final URL url = new URL(config);", "+            uri = url.toURI();", "+        }", "+        catch (final MalformedURLException ex) {", "+            uri = null;", "+        }", "+        catch (final URISyntaxException ex) {", "+            // URL violating RFC 2396", "+            uri = null;", "+        }", "+        if (uri == null) {", "+            final File file = new File(config);", "+            if (file.exists()) {", "+                uri = file.toURI();", "-            catch (final MalformedURLException ex) {", "-                uri = null;", "-            }", "-            catch (final URISyntaxException ex) {", "-                // URL violating RFC 2396", "-                uri = null;", "-            }", "-            if (uri == null) {", "-                final File file = new File(config);", "-                if (file.exists()) {", "-                    uri = file.toURI();", "+            else {", "+                // check to see if the file is in the classpath", "+                try {", "+                    final URL configUrl = ConfigurationLoader.class", "+                            .getResource(config);", "+                    if (configUrl == null) {", "+                        throw new CheckstyleException(\"unable to find \" + config);", "+                    }", "+                    uri = configUrl.toURI();", "-                else {", "-                    // check to see if the file is in the classpath", "-                    try {", "-                        final URL configUrl = ConfigurationLoader.class", "-                                .getResource(config);", "-                        if (configUrl == null) {", "-                            throw new FileNotFoundException(config);", "-                        }", "-                        uri = configUrl.toURI();", "-                    }", "-                    catch (final URISyntaxException e) {", "-                        throw new FileNotFoundException(config);", "-                    }", "+                catch (final URISyntaxException e) {", "+                    throw new CheckstyleException(\"unable to find \" + config);", "-            final InputSource source = new InputSource(uri.toString());", "-            return loadConfiguration(source, overridePropsResolver,", "-                    omitIgnoredModules);", "-        catch (final FileNotFoundException e) {", "-            throw new CheckstyleException(\"unable to find \" + config, e);", "-        }", "-        catch (final CheckstyleException e) {", "-                //wrap again to add file name info", "-            throw new CheckstyleException(\"unable to read \" + config + \" - \"", "-                    + e.getMessage(), e);", "-        }", "+        final InputSource source = new InputSource(uri.toString());", "+        return loadConfiguration(source, overridePropsResolver,", "+                omitIgnoredModules);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b5945f84fa10dee1db54b1ea97fd981", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0168e55c0d07a3367bff2f512d41e10c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MethodLengthCheck.java", "commitBeforeChange": "ce177456e7042b22b1842cb0309b6b285dc900d4", "commitAfterChange": "ba8a851e90352e893b7036bec5521b89ab1d37fd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (aAST.getType() != TokenTypes.METHOD_DEF) {", "-            return;", "-        }", "-", "-        DetailAST openingBrace = aAST.getLastChild();", "-        DetailAST closingBrace = openingBrace.getLastChild();", "-        int methodBodyStart = openingBrace.getLineNo();", "-        int methodBodyEnd = closingBrace.getLineNo();", "-        int length = methodBodyEnd - methodBodyStart + 1;", "-        if (length > mMax) {", "-            // TODO: This is old style but shouldn'r we use aAST.getLineNo() ?", "-            log(openingBrace.getLineNo(), \"maxLen.method\",", "-                    new Integer(length), new Integer(mMax));", "+        final DetailAST openingBrace = aAST.findFirstToken(TokenTypes.SLIST);", "+        if (openingBrace != null) {", "+            final DetailAST closingBrace =", "+                openingBrace.findFirstToken(TokenTypes.RCURLY);", "+            final int length =", "+                closingBrace.getLineNo() - openingBrace.getLineNo() + 1;", "+            if (length > mMax) {", "+                log(aAST.getLineNo(),", "+                    aAST.getColumnNo(),", "+                    \"maxLen.method\",", "+                    new Integer(length),", "+                    new Integer(mMax));", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8521d16f7fee498742cc2c08fda2721e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "bd4ec9a98edaced73f14c5422f64c39fad3ce596", "commitAfterChange": "fc17c983239b6e6a6d3e41f53cb134bd22488db1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (!inIgnoreList(aAST) && !isConstantDefinition(aAST)) {", "-            String text = aAST.getText();", "-            final DetailAST parent = aAST.getParent();", "-            DetailAST reportAST = aAST;", "-            if (parent.getType() == TokenTypes.UNARY_MINUS) {", "-                reportAST = parent;", "-                text = \"-\" + text;", "-            }", "-            else if (parent.getType() == TokenTypes.UNARY_PLUS) {", "-                reportAST = parent;", "-                text = \"+\" + text;", "-            }", "-            log(reportAST.getLineNo(),", "-                reportAST.getColumnNo(),", "-                \"magic.number\",", "-                text);", "+        if (inIgnoreList(aAST)) {", "+        \treturn;", "+        ", "+        DetailAST constantDefAST = findContainingConstantDef(aAST);", "+        ", "+    \tif (constantDefAST == null) {", "+            reportMagicNumber(aAST);", "+        }", "+    \telse {", "+    \t\tDetailAST ast = aAST.getParent();", "+    \t\twhile (ast != constantDefAST) {", "+    \t\t\tint type = ast.getType();", "+    \t\t\tif (Arrays.binarySearch(ALLOWED_PATH_TOKENTYPES, type) < 0) {", "+    \t\t\t\treportMagicNumber(aAST);", "+    \t\t\t\tbreak;", "+    \t\t\t}", "+    \t\t\t\t", "+    \t\t\tast = ast.getParent();", "+    \t\t}", "+    \t}"]}]}
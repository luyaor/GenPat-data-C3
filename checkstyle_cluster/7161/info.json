{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce2f58f5481b437372c4941d05c8ab9e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d0914880bc4eccb23f83de14d9e8cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "29027109bf962f47b6a6000fdca69b5679ce4b43", "commitAfterChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (TokenTypes.INTERFACE_DEF == aAST.getType()) {", "+        if (TokenTypes.INTERFACE_DEF == ast.getType()) {", "-                aAST.findFirstToken(TokenTypes.MODIFIERS);", "+                ast.findFirstToken(TokenTypes.MODIFIERS);", "-        else if (isInterfaceOrAnnotationMember(aAST)) {", "-            final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        else if (isInterfaceOrAnnotationMember(ast)) {", "+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-                            && aAST.getType() != TokenTypes.METHOD_DEF)", "+                            && ast.getType() != TokenTypes.METHOD_DEF)", "-        else if (aAST.getType() == TokenTypes.METHOD_DEF) {", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "-                            aAST.findFirstToken(TokenTypes.MODIFIERS);", "+                            ast.findFirstToken(TokenTypes.MODIFIERS);", "-            DetailAST parent = aAST.getParent();", "+            DetailAST parent = ast.getParent();", "-            if (checkFinal && !isAnnotatedWithSafeVarargs(aAST)) {", "+            if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9deb27ca5f2026dfe1102fddb1aebf23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            startToken = skipAnnotationOnlyLines(aAST);", "-            brace = aAST.findFirstToken(TokenTypes.SLIST);", "+            startToken = skipAnnotationOnlyLines(ast);", "+            brace = ast.findFirstToken(TokenTypes.SLIST);", "-            startToken = skipAnnotationOnlyLines(aAST);", "-            final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);", "+            startToken = skipAnnotationOnlyLines(ast);", "+            final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);", "-            startToken = aAST;", "-            brace = aAST.findFirstToken(TokenTypes.SLIST);", "+            startToken = ast;", "+            brace = ast.findFirstToken(TokenTypes.SLIST);", "-            startToken = aAST;", "-            final DetailAST candidate = aAST.getFirstChild();", "+            startToken = ast;", "+            final DetailAST candidate = ast.getFirstChild();", "-            startToken = aAST;", "-            brace = aAST.findFirstToken(TokenTypes.LCURLY);", "+            startToken = ast;", "+            brace = ast.findFirstToken(TokenTypes.LCURLY);"]}]}
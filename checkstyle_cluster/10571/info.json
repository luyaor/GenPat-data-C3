{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86d1d55c4f00adc9665df92db4e58d4c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "389f5675bd833e027e0be0045a5440e2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "commitAfterChange": "5a3f05ec8038daa674666bbaa82d59127aa74f92", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean isOverridingMethod(DetailAST ast)", "signatureAfterChange": "     private boolean isOverridingMethod(DetailAST ast)", "diff": ["-        if (ast.getType() != TokenTypes.METHOD_DEF", "-            || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "-            return false;", "+        boolean overridingMethod = false;", "+", "+        if (ast.getType() == TokenTypes.METHOD_DEF", "+                && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "+            final String name = nameAST.getText();", "+            final DetailAST modifiersAST = ast.findFirstToken(TokenTypes.MODIFIERS);", "+", "+            if (getMethodName().equals(name)", "+                    && !modifiersAST.branchContains(TokenTypes.LITERAL_NATIVE)) {", "+                final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "+                overridingMethod = params.getChildCount() == 0;", "+            }", "-        final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-        final String name = nameAST.getText();", "-        final DetailAST modifiersAST = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (!getMethodName().equals(name)", "-                || modifiersAST.branchContains(TokenTypes.LITERAL_NATIVE)) {", "-            return false;", "-        }", "-        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        return params.getChildCount() == 0;", "+        return overridingMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699133c8a46b44a3c0552491d407e94c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java", "commitBeforeChange": "a09875b9f9ff2d59416331a989b09335ee57c89c", "commitAfterChange": "ef1e65fb5128452cd8a19f82d09455b06a021b65", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static boolean isEqualsMethod(DetailAST ast)", "signatureAfterChange": "     public static boolean isEqualsMethod(DetailAST ast)", "diff": ["-        if (ast.getType() != TokenTypes.METHOD_DEF) {", "-            // A node must be method def", "-            return false;", "-        }", "+        boolean equalsMethod = false;", "-        // non-static, non-abstract?", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "-            || modifiers.branchContains(TokenTypes.ABSTRACT)) {", "-            return false;", "-        }", "+        if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+            final boolean staticOrAbstract = modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "+                    || modifiers.branchContains(TokenTypes.ABSTRACT);", "-        // named \"equals\"?", "-        final DetailAST nameNode = ast.findFirstToken(TokenTypes.IDENT);", "-        final String name = nameNode.getText();", "-        if (!\"equals\".equals(name)) {", "-            return false;", "-        }", "+            if (!staticOrAbstract) {", "+                final DetailAST nameNode = ast.findFirstToken(TokenTypes.IDENT);", "+                final String name = nameNode.getText();", "-        // one parameter?", "-        final DetailAST paramsNode = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        return paramsNode.getChildCount() == 1;", "+                if (\"equals\".equals(name)) {", "+                    // one parameter?", "+                    final DetailAST paramsNode = ast.findFirstToken(TokenTypes.PARAMETERS);", "+                    equalsMethod = paramsNode.getChildCount() == 1;", "+                }", "+            }", "+        }", "+        return equalsMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab3fe1d61552fd24bbf8cb38f4c9dada", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "9ddad74e484384e5ca2d88ab0fe21922189e2b85", "commitAfterChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static boolean isInHashCodeMethod(DetailAST ast)", "signatureAfterChange": "     private static boolean isInHashCodeMethod(DetailAST ast)", "diff": ["+        boolean inHashCodeMethod = false;", "+", "-        if (!ScopeUtils.isInCodeBlock(ast)) {", "-            return false;", "-        }", "+        if (ScopeUtils.isInCodeBlock(ast)) {", "+            // find the method definition AST", "+            DetailAST methodDefAST = ast.getParent();", "+            while (methodDefAST != null", "+                    && methodDefAST.getType() != TokenTypes.METHOD_DEF) {", "+                methodDefAST = methodDefAST.getParent();", "+            }", "-        // find the method definition AST", "-        DetailAST methodDefAST = ast.getParent();", "-        while (methodDefAST != null", "-                && methodDefAST.getType() != TokenTypes.METHOD_DEF) {", "-            methodDefAST = methodDefAST.getParent();", "-        }", "+            if (methodDefAST != null) {", "+                // Check for 'hashCode' name.", "+                final DetailAST identAST = methodDefAST.findFirstToken(TokenTypes.IDENT);", "-        if (methodDefAST == null) {", "-            return false;", "+                if (\"hashCode\".equals(identAST.getText())) {", "+                    // Check for no arguments.", "+                    final DetailAST paramAST = methodDefAST.findFirstToken(TokenTypes.PARAMETERS);", "+                    // we are in a 'public int hashCode()' method! The compiler will ensure", "+                    // the method returns an 'int' and is public.", "+                    inHashCodeMethod = paramAST.getChildCount() == 0;", "+                }", "+            }", "-", "-        // Check for 'hashCode' name.", "-        final DetailAST identAST =", "-            methodDefAST.findFirstToken(TokenTypes.IDENT);", "-        if (!\"hashCode\".equals(identAST.getText())) {", "-            return false;", "-        }", "-", "-        // Check for no arguments.", "-        final DetailAST paramAST =", "-            methodDefAST.findFirstToken(TokenTypes.PARAMETERS);", "-        // we are in a 'public int hashCode()' method! The compiler will ensure", "-        // the method returns an 'int' and is public.", "-        return paramAST.getChildCount() == 0;", "+        return inHashCodeMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d93d6d2f516b68caa7e59ad179112f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean isIgnoredConstructorParam(DetailAST ast)", "signatureAfterChange": "     private boolean isIgnoredConstructorParam(DetailAST ast)", "diff": ["-        if ((ast.getType() != TokenTypes.PARAMETER_DEF)", "-            || !ignoreConstructorParameter)", "+        boolean result = false;", "+        if ((ast.getType() == TokenTypes.PARAMETER_DEF)", "+            && ignoreConstructorParameter)", "-            return false;", "+            final DetailAST parametersAST = ast.getParent();", "+            final DetailAST constructorAST = parametersAST.getParent();", "+            result = (constructorAST.getType() == TokenTypes.CTOR_DEF);", "-        final DetailAST parametersAST = ast.getParent();", "-        final DetailAST constructorAST = parametersAST.getParent();", "-        return (constructorAST.getType() == TokenTypes.CTOR_DEF);", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cba789f5275a72186fa323bb33b674ae", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean isIgnoredParamOfAbstractMethod(DetailAST ast)", "signatureAfterChange": "     private boolean isIgnoredParamOfAbstractMethod(DetailAST ast)", "diff": ["-        if ((ast.getType() != TokenTypes.PARAMETER_DEF)", "-            || !ignoreAbstractMethods)", "+        boolean result = false;", "+        if ((ast.getType() == TokenTypes.PARAMETER_DEF)", "+            && ignoreAbstractMethods)", "-            return false;", "+            final DetailAST method = ast.getParent().getParent();", "+            if (method.getType() == TokenTypes.METHOD_DEF) {", "+                final DetailAST mods = method.findFirstToken(TokenTypes.MODIFIERS);", "+                result = ((mods != null) && mods.branchContains(TokenTypes.ABSTRACT));", "+            }", "-        final DetailAST method = ast.getParent().getParent();", "-        if (method.getType() != TokenTypes.METHOD_DEF) {", "-            return false;", "-        }", "-        final DetailAST mods = method.findFirstToken(TokenTypes.MODIFIERS);", "-        return ((mods != null) && mods.branchContains(TokenTypes.ABSTRACT));", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d325171c677e354264e8f5946e54989d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "99ce97725cd037d152c571e5ff58eac9247d072d", "commitAfterChange": "9241c0a692ed65fab3b3fdb3c4ff1c118794337c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isSkipCase(DetailAST ast)", "signatureAfterChange": "     private static boolean isSkipCase(DetailAST ast)", "diff": ["+        boolean skipCase = true;", "+", "-        if (ScopeUtils.isLocalVariableDef(ast)", "-            || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "-            return true;", "-        }", "+        if (!ScopeUtils.isLocalVariableDef(ast)", "+                && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "+            final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        if (assign == null) {", "-            // no assign - no check", "-            return true;", "+            if (assign != null) {", "+                final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+                skipCase = modifiers.branchContains(TokenTypes.FINAL);", "+            }", "-", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        return modifiers.branchContains(TokenTypes.FINAL);", "+        return skipCase;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa103cfe5f45ec098beb331b47df544d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java", "commitBeforeChange": "69a3d541b4888e5e0e6ab09aa675667155c65381", "commitAfterChange": "fb0f73fc9c382d9279d573bfc3779b872f795aac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean isLegalComment(final TextBlock comment)", "signatureAfterChange": "     private boolean isLegalComment(final TextBlock comment)", "diff": ["-        if (legalComment == null) {", "-            return false;", "-        }", "+        boolean legal;", "+", "-        if (comment.getStartLineNo() != comment.getEndLineNo()) {", "-            return false;", "+        if (legalComment == null || comment.getStartLineNo() != comment.getEndLineNo()) {", "+            legal = false;", "-        String commentText = comment.getText()[0];", "-        // remove chars which start comment", "-        commentText = commentText.substring(2);", "-        // if this is a C-style comment we need to remove its end", "-        if (commentText.endsWith(\"*/\")) {", "-            commentText = commentText.substring(0, commentText.length() - 2);", "+        else {", "+            String commentText = comment.getText()[0];", "+            // remove chars which start comment", "+            commentText = commentText.substring(2);", "+            // if this is a C-style comment we need to remove its end", "+            if (commentText.endsWith(\"*/\")) {", "+                commentText = commentText.substring(0, commentText.length() - 2);", "+            }", "+            commentText = commentText.trim();", "+            legal = legalComment.matcher(commentText).find();", "-        commentText = commentText.trim();", "-        return legalComment.matcher(commentText).find();", "+        return legal;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e0f8995de32f7dbf2e71da16cfa0523", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47dea9e404d2dc57dedafa2fac9c2c59", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private boolean hasAllowedAnnotations(DetailAST aMethodDef)", "signatureAfterChange": "     private boolean hasAllowedAnnotations(DetailAST methodDef)", "diff": ["-    private boolean hasAllowedAnnotations(DetailAST aMethodDef)", "+    private boolean hasAllowedAnnotations(DetailAST methodDef)", "-        final DetailAST modifiersNode = aMethodDef.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiersNode = methodDef.findFirstToken(TokenTypes.MODIFIERS);", "-            if (mAllowedAnnotations.contains(identNode.getText())) {", "+            if (allowedAnnotations.contains(identNode.getText())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e335921b0d4fe78fe7fa2b818c10d86", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isIgnoredParam(DetailAST aParamDef)", "signatureAfterChange": "     private boolean isIgnoredParam(DetailAST paramDef)", "diff": ["-    private boolean isIgnoredParam(DetailAST aParamDef)", "+    private boolean isIgnoredParam(DetailAST paramDef)", "-        if (mIgnorePrimitiveTypes) {", "-            final DetailAST parameterType = aParamDef.", "+        if (ignorePrimitiveTypes) {", "+            final DetailAST parameterType = paramDef.", "-            if (mPrimitiveDataTypes.contains(parameterType.getType())) {", "+            if (primitiveDataTypes.contains(parameterType.getType())) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90c903345475c8f6f61f2e983ebb9b4d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "728baa975bceceeeb88fcf94ec300bfa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "85d6fcba9ce1ac53db7f92ef4ba3d4de5bda3fbc", "commitAfterChange": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Override     public void visitToken(final DetailAST ast)", "signatureAfterChange": "     @Override     public void visitToken(final DetailAST ast)", "diff": ["-            this.getFileContents().getJavadocBefore(ast.getLineNo());", "+            getFileContents().getJavadocBefore(ast.getLineNo());", "-            this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,", "+            log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,", "-        if (this.javaFiveCompatibility) {", "+        if (javaFiveCompatibility) {", "-            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);", "+            log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95e4ece96ece1a865af54aae181ed239", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java", "commitBeforeChange": "85d6fcba9ce1ac53db7f92ef4ba3d4de5bda3fbc", "commitAfterChange": "6d5c0da42fa54ceabbc1959e9db354ed64a2ff86", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public int compareTo(LineColumn lineColumn)", "signatureAfterChange": "     @Override     public int compareTo(LineColumn lineColumn)", "diff": ["-        return this.getLine() != lineColumn.getLine()", "-            ? Integer.compare(this.getLine(), lineColumn.getLine())", "-            : Integer.compare(this.getColumn(), lineColumn.getColumn());", "+        return getLine() != lineColumn.getLine()", "+            ? Integer.compare(getLine(), lineColumn.getLine())", "+            : Integer.compare(getColumn(), lineColumn.getColumn());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9005c68858a2d81d497b0a4bd6dcf8a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "113ea8405c8b753540ee3423d7e37e383f269155", "commitAfterChange": "7f7db38a097a95c264307123924779380fb40077", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "signatureAfterChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "diff": ["-            aIndentLevel = new IndentLevel(aIndentLevel,", "-                                           mIndentCheck.getBasicOffset());", "+            aIndentLevel = new IndentLevel(aIndentLevel, getBasicOffset());", "-                aIndentLevel = new IndentLevel(aIndentLevel,", "-                                               mIndentCheck.getBasicOffset());", "+                aIndentLevel = new IndentLevel(aIndentLevel, getBasicOffset());"]}]}
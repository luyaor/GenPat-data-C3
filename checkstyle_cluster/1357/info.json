{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e495a99a9b72a6b77cb48d7220570b1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e7457626d102a3e568677643c6adb8f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/usage/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/Resolver.java", "commitBeforeChange": "2a96f3f8909df111882e075196adc2f1545e23f6", "commitAfterChange": "5063a410cfab79733c04ac0dc52ef9756e18c6f0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void handleClass(ClassDef classDef)", "signatureAfterChange": "     protected void handleClass(ClassDef classDef)", "diff": ["-            SymTabAST extendedClassNode =", "-                (SymTabAST) extendsClause.getFirstChild();", "-            while (extendedClassNode != null) {", "-                IClass superClass =", "-                    resolveClass(extendedClassNode, classDef, null, true);", "-                extendedClassNode.setDefinition(superClass, classDef, true);", "-                extendedClassNode =", "-                    (SymTabAST) extendedClassNode.getNextSibling();", "+            if(extendsClause != null) {", "+                SymTabAST extendedClassNode =", "+                    (SymTabAST) extendsClause.getFirstChild();", "+", "+                while (extendedClassNode != null) {", "+                    IClass superClass =", "+                        resolveClass(extendedClassNode, classDef, null, true);", "+                    extendedClassNode.setDefinition(superClass, classDef, true);", "+                    extendedClassNode =", "+                        (SymTabAST) extendedClassNode.getNextSibling();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d89e1fc22182d47eb81e4068d634f294", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "82f4a9852de874b4849a67f53f4e541d13db869b", "commitAfterChange": "24c13109a52b0b5085b5db2e8b0ae96655d9480c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "                 @Override                 public DetailAST findLastNode(DetailAST firstNode)", "signatureAfterChange": "     private static DetailAST getMethodCallLastNode(DetailAST firstNode)", "diff": ["-            new LineWrappingHandler(getIndentCheck(), getMainAst()) {", "-                @Override", "-                public DetailAST findLastNode(DetailAST firstNode)", "-                {", "-                    DetailAST lastNode;", "-                    if (getFirstNode().getNextSibling() == null) {", "-                        lastNode = getFirstNode().getLastChild();", "-                    }", "-                    else {", "-                        lastNode = getFirstNode().getNextSibling();", "-                    }", "-                    return lastNode;", "-                }", "+     */", "+    private static DetailAST getMethodCallLastNode(DetailAST firstNode)", "+    {", "+        DetailAST lastNode;", "+        if (firstNode.getNextSibling() == null) {", "+            lastNode = firstNode.getLastChild();", "+        }", "+        else {", "+            lastNode = firstNode.getNextSibling();", "+        }", "+        return lastNode;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7340f8fa2005386e4b80cbe60d1b14f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "86e743f60589840dc86e73a90592b0b17c7c50c1", "commitAfterChange": "17ebdc5c3740d37f29b8dc09c4ce4a42d2982b1e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean hasTypeNodeAsParent(DetailAST aCurrentNode)", "signatureAfterChange": "     private DetailAST getLastAnnotationNode(DetailAST aAtNode)", "diff": ["-     */", "-    private boolean hasTypeNodeAsParent(DetailAST aCurrentNode)", "-    {", "-        DetailAST typeNode = aCurrentNode;", "-        boolean result = false;", "-        while (typeNode != null && typeNode.getType() != TokenTypes.SLIST", "-                && typeNode.getType() != TokenTypes.OBJBLOCK)", "-        {", "-            if (typeNode.getType() == TokenTypes.TYPE", "-                    || typeNode.getType() == TokenTypes.TYPE_PARAMETERS)", "-            {", "-                result = true;", "-            typeNode = typeNode.getParent();", "-        return result;", "+     */", "+    private DetailAST getLastAnnotationNode(DetailAST aAtNode)", "+    {", "+        DetailAST lastAnnotation = aAtNode.getParent();", "+        while (lastAnnotation.getNextSibling() != null", "+                && lastAnnotation.getNextSibling().getType() == TokenTypes.ANNOTATION)", "+        {", "+            lastAnnotation = lastAnnotation.getNextSibling();", "+        }", "+        return lastAnnotation.getLastChild();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b906303ea39366abadccc5b562ebf3b4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17c4bd7306c7fc45da20d2cc2622afa4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean ignoreNumberOfParameters(DetailAST aAST)", "signatureAfterChange": "     private boolean ignoreNumberOfParameters(DetailAST ast)", "diff": ["-    private boolean ignoreNumberOfParameters(DetailAST aAST)", "+    private boolean ignoreNumberOfParameters(DetailAST ast)", "-        return mIgnoreOverriddenMethods", "-                && (AnnotationUtility.containsAnnotation(aAST, OVERRIDE)", "-                || AnnotationUtility.containsAnnotation(aAST, CANONICAL_OVERRIDE));", "+        return ignoreOverriddenMethods", "+                && (AnnotationUtility.containsAnnotation(ast, OVERRIDE)", "+                || AnnotationUtility.containsAnnotation(ast, CANONICAL_OVERRIDE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdb2254b37e3cedc30d4ef6c165c859f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean isIgnorableMethod(DetailAST aMethodDef)", "signatureAfterChange": "     private boolean isIgnorableMethod(DetailAST methodDef)", "diff": ["-    private boolean isIgnorableMethod(DetailAST aMethodDef)", "+    private boolean isIgnorableMethod(DetailAST methodDef)", "-        return shouldIgnoreMethod(aMethodDef.findFirstToken(TokenTypes.IDENT).getText())", "-            || mIgnoreOverridenMethods", "-               && (AnnotationUtility.containsAnnotation(aMethodDef, \"Override\")", "-                  || AnnotationUtility.containsAnnotation(aMethodDef, \"java.lang.Override\"));", "+        return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())", "+            || ignoreOverridenMethods", "+               && (AnnotationUtility.containsAnnotation(methodDef, \"Override\")", "+                  || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));"]}]}
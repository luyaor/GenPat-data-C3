{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e1473d0a3b4bf60ae566292d7d5ee23", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bef9a97cca6700ede4919f13380f24c8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "fb0f73fc9c382d9279d573bfc3779b872f795aac", "commitAfterChange": "f981e5845436464b45fc937e601f7fc9fdbc5a7c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean containsJavadocTag(final TextBlock javadoc)", "signatureAfterChange": "     private static boolean containsJavadocTag(final TextBlock javadoc)", "diff": ["-        if (javadoc == null) {", "-            return false;", "-        }", "+        boolean javadocTag = false;", "-        final String[] lines = javadoc.getText();", "+        if (javadoc != null) {", "+            final String[] lines = javadoc.getText();", "-        for (final String line : lines) {", "-            final Matcher matchInheritDoc =", "-                MATCH_INHERITDOC.matcher(line);", "+            for (final String line : lines) {", "+                final Matcher matchInheritDoc =", "+                    MATCH_INHERITDOC.matcher(line);", "-            if (matchInheritDoc.find()) {", "-                return true;", "+                if (matchInheritDoc.find()) {", "+                    javadocTag = true;", "+                    break;", "+                }", "-        return false;", "+        return javadocTag;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e64f993ace4412945bc8b427a6bf5034", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java", "commitBeforeChange": "c2afeecbf7b6c8e2ed6b50516adbe788fd105f31", "commitAfterChange": "f24c8ee834e006c406c0538dbfccc2fe6c07279c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void beginTree()", "signatureAfterChange": "     public void beginTree()", "diff": ["-        String[] lines = getLines();", "-        log(0, \"file has \" + lines.length + \" lines\");", "+        System.out.println(\"HeaderCheck.beginTree\");", "+        if (mHeaderLines != null) {", "+", "+            final String[] lines = getLines();", "+", "+            if (mHeaderLines.length > lines.length) {", "+                log(1, \"header.missing\");", "+            }", "+            else {", "+                for (int i = 0; i < mHeaderLines.length; i++) {", "+                    // skip lines we are meant to ignore", "+                    if (isIgnoreLine(i + 1)) {", "+                        continue;", "+                    }", "+", "+                    if (!isMatch(i)) {", "+                        log(i + 1, \"header.mismatch\", mHeaderLines[i]);", "+                        break; // stop checking", "+                    }", "+                }", "+            }", "+        }"]}]}
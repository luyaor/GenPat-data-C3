{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d690f7f60120c26b017668141509d41e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13ed974cfb1f6015530cd5956a790e48", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "commitBeforeChange": "a4df304720e2c71cbb22667cc3f7148e89464b9a", "commitAfterChange": "2a9fd54faa88518c5f1fab50215f766eef19802d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        // GT/LT aren't operators if they're part of type arguments or parameters", "-        if ((aAST.getType() == TokenTypes.GT || aAST.getType() == TokenTypes.LT) &&", "-            (aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS", "-            || aAST.getParent().getType() == TokenTypes.TYPE_PARAMETERS))", "-        {", "-            return;", "-        }", "-", "-        //QUESTION is not an operator if it's part of a type argument", "-        if (aAST.getType() == TokenTypes.QUESTION &&", "-            aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENT)", "-        {", "-            return;", "-        }", "-", "-        //BAND is not an operator if it's part of a type argument", "-        if (aAST.getType() == TokenTypes.BAND &&", "-            (aAST.getParent().getType() == TokenTypes.TYPE_UPPER_BOUNDS", "-            || aAST.getParent().getType() == TokenTypes.TYPE_LOWER_BOUNDS))", "-        {", "-            return;", "-        }", "-", "-        if (wOp == OperatorWrapOption.NL", "-            && !text.equals(currentLine.trim())", "-            && (currentLine.substring(colNo + text.length())", "-                .trim().length() == 0))", "+        if (CheckUtils.isOperatorTokenPartOfGenericDeclaration(aAST))", "+        {", "+            return;", "+        }", "+        else if (wOp == OperatorWrapOption.NL", "+                && !text.equals(currentLine.trim())", "+                && (currentLine.substring(colNo + text.length())", "+                    .trim().length() == 0))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fd5057e94a35260985d26c8408348ec", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "0343b58a763bf13c151acdca4954906fea56e06b", "commitAfterChange": "1d41878f29431d9102aec57c3f0c67a2085c4974", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        else {", "-            if (targetAST.getType() == TokenTypes.ARRAY_DECLARATOR) {", "-                final DetailAST arrayType = targetAST.getFirstChild();", "-                if (!isCstyleArrayDeclaration(targetAST)) {", "-                    targetAST = arrayType;", "-                }", "-                else {", "-                    targetAST = targetAST.getParent().getNextSibling();", "-                }", "-            }", "-        }", "-        int after = 0;", "-        //If target of possible redundant whitespace is in method definition", "-        if (targetAST.getType() == TokenTypes.IDENT", "-                && targetAST.getNextSibling().getType() == TokenTypes.LPAREN)", "-        {", "-            final DetailAST methodDef = targetAST.getParent();", "-            final DetailAST endOfParams = methodDef.findFirstToken(TokenTypes.RPAREN);", "-            after = endOfParams.getColumnNo() + 1;", "-        }", "-        else {", "-            after = targetAST.getColumnNo() + targetAST.getText().length();", "-        }", "+        final int after =", "+            targetAST.getColumnNo() + targetAST.getText().length();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2df435c8efa761028b038f3f358e43a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "217451246ab20f6f11a2121a3bf9e4ce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "ef1e65fb5128452cd8a19f82d09455b06a021b65", "commitAfterChange": "4913b287c0739f88eed8bea42e63d416c3e1cf7c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST rootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-        int groupNumber = customImportOrderRules.indexOf(currentGroup);", "-        String previousImport = null;", "+        int currentGroupNumber = customImportOrderRules.indexOf(currentGroup);", "+        String previousImportFromCurrentGroup = null;", "-            final String fullImportIdent = importObject.importFullPath;", "+            final String fullImportIdent = importObject.getImportFullPath();", "-                if (customImportOrderRules.size() > groupNumber + 1) {", "-                    final String nextGroup = getNextImportGroup(groupNumber + 1);", "+                //not the last group, last one is always NON_GROUP", "+                if (customImportOrderRules.size() > currentGroupNumber + 1) {", "+                    final String nextGroup = getNextImportGroup(currentGroupNumber + 1);", "-                            log(importObject.getLineNumber(), MSG_LINE_SEPARATOR,", "-                                    fullImportIdent);", "+                            log(importObject.getLineNumber(), MSG_LINE_SEPARATOR, fullImportIdent);", "-                        groupNumber = customImportOrderRules.indexOf(nextGroup);", "+                        currentGroupNumber = customImportOrderRules.indexOf(nextGroup);", "+                        previousImportFromCurrentGroup = fullImportIdent;", "-            else if (sortImportsInGroupAlphabetically", "-                    && previousImport != null", "-                    && matchesImportGroup(importObject.isStaticImport(),", "-                            fullImportIdent, currentGroup)", "-                    && compareImports(fullImportIdent, previousImport) < 0) {", "-                log(importObject.getLineNumber(), MSG_LEX, fullImportIdent, previousImport);", "+            else {", "+                if (sortImportsInGroupAlphabetically", "+                    && previousImportFromCurrentGroup != null", "+                    && compareImports(fullImportIdent, previousImportFromCurrentGroup) < 0) {", "+                    log(importObject.getLineNumber(), MSG_LEX,", "+                            fullImportIdent, previousImportFromCurrentGroup);", "+                }", "+                else {", "+                    previousImportFromCurrentGroup = fullImportIdent;", "+                }", "-            previousImport = fullImportIdent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec1292ff41aa6c8f9dfa1425733000d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c", "commitAfterChange": "39f40e57858c8a5c6310bf35e6649b03188b6996", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean hasTrailComment(DetailAST aAst)", "signatureAfterChange": "     private boolean hasTrailComment(DetailAST aAst)", "diff": ["+        DetailAST semi;", "-            DetailAST comma = variableDef.getNextSibling();", "+            semi = variableDef.getNextSibling();", "-            if (comma.getType() != TokenTypes.COMMA) {", "-                comma = variableDef.getLastChild();", "+            if (semi.getType() != TokenTypes.SEMI) {", "+                semi = variableDef.getLastChild();", "+        }", "+        else {", "+            semi = getSemi(aAst);", "+        }", "-            final int lineNo = comma.getLineNo();", "+        if (semi != null) {", "+            final int lineNo = semi.getLineNo();", "-            if (sCommentRegexp.matcher(currentLine).find()) {", "+            if (currentLine != null && sCommentRegexp.matcher(currentLine).find()) {", "-        return mAllowByTailComment && result;", "+", "+        return result;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6badba3629f04bab42067b0d5ceec12f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699384355061aacf7de3ca38bd000f35", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java", "commitBeforeChange": "8d9d5e58ac50133f15ad8807bea302ab16aa5071", "commitAfterChange": "df8c04113133f9e449cf842695495a9f65b3c496", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected final void log(int aLineNo, String aKey,              Object aArg0, Object aArg1, Object aArg2)", "signatureAfterChange": "     protected final void log(int aLineNo, int aColNo, String aKey)", "diff": ["-     */", "-    protected final void log(int aLineNo, String aKey,", "-             Object aArg0, Object aArg1, Object aArg2)", "-    {", "-        log(aLineNo, aKey, new Object[] {aArg0, aArg1, aArg2});", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7adb99cd3599d9961299c2a93ea3529f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "f38d8abd42c3e824635e542e6031b3da1997c02e", "commitAfterChange": "7065b0d9dc232313d2dfd43fa882d24736e87ade", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private static DetailAST parse(         FileContents aContents,         boolean aSilentlyConsumeErrors,         boolean aTreatAssertAsKeyword,         boolean aTreatEnumAsKeyword)         throws RecognitionException, TokenStreamException", "signatureAfterChange": "     public static DetailAST parse(FileContents aContents)         throws RecognitionException, TokenStreamException", "diff": ["-     */", "-    private static DetailAST parse(", "-        FileContents aContents,", "-        boolean aSilentlyConsumeErrors,", "-        boolean aTreatAssertAsKeyword,", "-        boolean aTreatEnumAsKeyword)", "-        throws RecognitionException, TokenStreamException", "-    {", "-        lexer.setTreatAssertAsKeyword(aTreatAssertAsKeyword);", "-        lexer.setTreatEnumAsKeyword(aTreatEnumAsKeyword);", "+        lexer.setTreatAssertAsKeyword(true);", "+        lexer.setTreatEnumAsKeyword(true);", "-            aSilentlyConsumeErrors", "-                ? new SilentJavaRecognizer(lexer)", "-                : new GeneratedJavaRecognizer(lexer);", "+            new GeneratedJavaRecognizer(lexer);"]}]}
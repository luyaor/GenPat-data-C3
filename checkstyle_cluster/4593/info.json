{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0050f15e49632d83e2ce6fd4fefb87ee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58acfba8617ca4c1630e0e3416a997f7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void findDuplicateFromLine(         final int aI, final int aJ, final int aILine,         final int[] aJLines, final Multimap<Integer, Integer> aIgnore)", "signatureAfterChange": "     private void findDuplicateFromLine(         final int aI, final int aJ, final int aILine,         final int[] aJLines, final Multimap<Integer, Integer> aIgnore)", "diff": ["-            // avoid Integer constructor whenever we can", "-            if (ignoreEntries != null) {", "-                if (ignoreEntries.contains(jLine)) {", "-                    continue;", "-                }", "+            if (ignoreEntries != null && ignoreEntries.contains(jLine)) {", "+                continue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7791a420eba4c3c57ed1f5f8b9b4f950", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void checkException(FullIdent aExc, List<ClassInfo> aKnownExcs)", "signatureAfterChange": "     private void checkException(FullIdent aExc, List<ClassInfo> aKnownExcs)", "diff": ["-        if (!mAllowUnchecked) {", "-            if (isUnchecked(newClassInfo.getClazz())) {", "-                log(aExc.getLineNo(), aExc.getColumnNo(),", "-                    \"redundant.throws.unchecked\", aExc.getText());", "-            }", "+        if (!mAllowUnchecked && isUnchecked(newClassInfo.getClazz())) {", "+            log(aExc.getLineNo(), aExc.getColumnNo(),", "+                \"redundant.throws.unchecked\", aExc.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b9fd8f4579b99dabd0afed01bf491ed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                if (child.getType() == TokenTypes.METHOD_DEF) {", "-                    if (CheckUtils.isEqualsMethod(child)) {", "-                        if (hasObjectParameter(child)) {", "-                            hasEqualsObject = true;", "-                        }", "-                        else {", "-                            mEqualsMethods.add(child);", "-                        }", "+                if (child.getType() == TokenTypes.METHOD_DEF", "+                        && CheckUtils.isEqualsMethod(child))", "+                {", "+                    if (hasObjectParameter(child)) {", "+                        hasEqualsObject = true;", "+                    }", "+                    else {", "+                        mEqualsMethods.add(child);"]}]}
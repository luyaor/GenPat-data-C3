{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9ae8cbd5e3831ceaea67d66e30d466b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a59d1f4b65554be9f0ddadd7a27dd2a9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "e5f09c7fd2b5115bd164a5ed4f0a5e376c2dc2d7", "commitAfterChange": "c1a79b112296dac813d0b4326043590f2eb2c378", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["+            SeverityLevelCounter warningCounter =", "+                    new SeverityLevelCounter(SeverityLevel.WARNING);", "+            c.addListener(warningCounter);", "+", "+            final int numWarnings = warningCounter.getCount();", "+            final boolean ok = numErrs <= mMaxErrors", "+                    && numWarnings <= mMaxWarnings;", "-            if ((numErrs > 0) && mFailureProperty != null) {", "+            if (!ok && mFailureProperty != null) {", "-            if ((numErrs > 0) && mFailOnViolation) {", "-                throw new BuildException(\"Got \" + numErrs + \" errors.\",", "+            if (!ok && mFailOnViolation) {", "+                throw new BuildException(", "+                        \"Got \" + numErrs + \" errors and \"", "+                        + numWarnings + \" warnings.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8e683304ca9b2f1779d0162ee090276", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected boolean shouldCheckInScope(DetailAST aModifiers)", "signatureAfterChange": "     protected boolean shouldCheckInScope(DetailAST modifiers)", "diff": ["-    protected boolean shouldCheckInScope(DetailAST aModifiers)", "+    protected boolean shouldCheckInScope(DetailAST modifiers)", "-        if (aModifiers == null) {", "+        if (modifiers == null) {", "-            return mApplyToPackage;", "+            return applyToPackage;", "-        final boolean isPublic = aModifiers", "+        final boolean isPublic = modifiers", "-        final boolean isProtected = aModifiers", "+        final boolean isProtected = modifiers", "-        final boolean isPrivate = aModifiers", "+        final boolean isPrivate = modifiers", "-        return (mApplyToPublic && isPublic)", "-                || (mApplyToProtected && isProtected)", "-                || (mApplyToPackage && isPackage)", "-                || (mApplyToPrivate && isPrivate);", "+        return (applyToPublic && isPublic)", "+                || (applyToProtected && isProtected)", "+                || (applyToPackage && isPackage)", "+                || (applyToPrivate && isPrivate);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c79c79a6b6e2e27cd6ba0eca9db78af", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4966c84a9d62e1ed4f332f1a9a90bd7d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        final int tokenType = aAST.getType();", "+        final int tokenType = ast.getType();", "-            final Counter counter = mCounters.pop();", "+            final Counter counter = counters.pop();", "-            if (count > mMethodMax) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"ncss.method\",", "-                        count, mMethodMax);", "+            if (count > methodMax) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"ncss.method\",", "+                        count, methodMax);", "-            final Counter counter = mCounters.pop();", "+            final Counter counter = counters.pop();", "-            if (count > mClassMax) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"ncss.class\",", "-                        count, mClassMax);", "+            if (count > classMax) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"ncss.class\",", "+                        count, classMax);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc642b96956b601949a5bd0d2e88295", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/bcel/src/checkstyle/com/puppycrawl/tools/checkstyle/bcel/classfile/JavaClassDefinition.java", "commitBeforeChange": "ed7fc0e632848e74d78992a9081ad689fa85e855", "commitAfterChange": "3da302031b2db9966ce7791053e2c0dba095083d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public JavaClassDefinition(JavaClass aJavaClass)", "signatureAfterChange": "     public JavaClassDefinition(         JavaClass aJavaClass,         Set aFieldScopes,         Set aMethodScopes)", "diff": ["-    public JavaClassDefinition(JavaClass aJavaClass)", "+    public JavaClassDefinition(", "+        JavaClass aJavaClass,", "+        Set aFieldScopes,", "+        Set aMethodScopes)", "-        // store method definitions", "+        // create method definitions, restricted by scope", "+        final Set methodSet = new HashSet();", "-            mMethodDefs[i] = new MethodDefinition(methods[i]);", "+            if (Utils.inScope(methods[i], aMethodScopes)) {", "+                methodSet.add(new MethodDefinition(methods[i]));", "+            }", "+        mMethodDefs =", "+            (MethodDefinition[]) methodSet.toArray(", "+                new MethodDefinition[methodSet.size()]);", "-        // store field definitions", "+        // create field definitions, restricted by scope", "-            mFieldDefs.put(fields[i].getName(), new FieldDefinition(fields[i]));", "+            if (Utils.inScope(fields[i], aFieldScopes)) {", "+                mFieldDefs.put(", "+                    fields[i].getName(),", "+                    new FieldDefinition(fields[i]));", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "825bc436250f696482be730eac5ecc07", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d25775f6c987e846364a85218de3d38", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "10d3015752ad509cd8f7956d98b6eb9c92641a45", "commitAfterChange": "d35dc970390f16309861f1438038c08dc59ac290", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 13, "signatureBeforeChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           Map<String, List<String>> expectedViolations)             throws Exception", "signatureAfterChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           Map<String, List<String>> expectedViolations)             throws Exception", "diff": ["+        final Map<String, List<String>> actualViolations = getActualViolations(errs);", "+        final Map<String, List<String>> realExpectedViolations = Maps.filterValues(expectedViolations, new Predicate<List<String>>() {", "+            @Override", "+            public boolean apply(List<String> input) {", "+                return !input.isEmpty();", "+            }", "+        });", "+        final MapDifference<String, List<String>> violationDifferences = Maps.difference(realExpectedViolations, actualViolations);", "+", "+        final Map<String, List<String>> missingViolations = violationDifferences.entriesOnlyOnLeft();", "+        final Map<String, List<String>> unexpectedViolations = violationDifferences.entriesOnlyOnRight();", "+        final Map<String, ValueDifference<List<String>>> differingViolations = violationDifferences.entriesDiffering();", "+", "+        final StringBuilder message = new StringBuilder();", "+        if (!missingViolations.isEmpty()) {", "+            message.append(\"missing violations: \").append(missingViolations);", "+        }", "+        if (!unexpectedViolations.isEmpty()) {", "+            if (message.length() > 0) {", "+                message.append('\\n');", "+            }", "+            message.append(\"unexpected violations: \").append(unexpectedViolations);", "+        }", "+        if (!differingViolations.isEmpty()) {", "+            if (message.length() > 0) {", "+                message.append('\\n');", "+            }", "+            message.append(\"differing violations: \").append(differingViolations);", "+        }", "+", "+        assertTrue(message.toString(),", "+            missingViolations.isEmpty()", "+            && unexpectedViolations.isEmpty()", "+            && differingViolations.isEmpty());", "+", "+        checker.destroy();", "+    }", "-            for (String line = lnr.readLine(); line != null && lnr.getLineNumber() <= errs; line = lnr.readLine()) {", "-            final Map<String, List<String>> realExpectedViolations = Maps.filterValues(expectedViolations, new Predicate<List<String>>() {", "-                @Override", "-                public boolean apply(List<String> input) {", "-                    return !input.isEmpty();", "-                }", "-            });", "-            final MapDifference<String, List<String>> violationDifferences = Maps.difference(realExpectedViolations, actualViolations);", "-", "-            final Map<String, List<String>> missingViolations = violationDifferences.entriesOnlyOnLeft();", "-            final Map<String, List<String>> unexpectedViolations = violationDifferences.entriesOnlyOnRight();", "-            final Map<String, ValueDifference<List<String>>> differingViolations = violationDifferences.entriesDiffering();", "-", "-            final StringBuilder message = new StringBuilder();", "-            if (!missingViolations.isEmpty()) {", "-                message.append(\"missing violations: \").append(missingViolations);", "-            }", "-            if (!unexpectedViolations.isEmpty()) {", "-                if (message.length() > 0) {", "-                    message.append('\\n');", "-                }", "-                message.append(\"unexpected violations: \").append(unexpectedViolations);", "-            }", "-            if (!differingViolations.isEmpty()) {", "-                if (message.length() > 0) {", "-                    message.append('\\n');", "-                }", "-                message.append(\"differing violations: \").append(differingViolations);", "-            }", "-", "-            assertTrue(message.toString(),", "-                missingViolations.isEmpty()", "-                && unexpectedViolations.isEmpty()", "-                && differingViolations.isEmpty());", "-        checker.destroy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95a29b069a6b1263332d8f7933cf5814", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "f14025ac008f8a2ef506b9e7cfcc820c637d28d5", "commitAfterChange": "44cc8b53c90117295151ea6723f859287f51dda5", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "diff": ["+        final Map<String, List<String>> expectedMessages = new HashMap<>(1);", "+        expectedMessages.put(messageFileName, asList(expected));", "+        verify(checker, processedFiles, expectedMessages);", "+    }", "-            for (int i = 0; i < expected.length; i++) {", "-                final String expectedResult = messageFileName + \":\" + expected[i];", "-                final String actual = lnr.readLine();", "-                assertEquals(\"error message \" + i, expectedResult, actual);", "-            assertEquals(\"unexpected output: \" + lnr.readLine(),", "-                    expected.length, errs);"]}]}
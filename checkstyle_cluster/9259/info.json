{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "63ec2a32a5012255fcaec912db6b7ef1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89182d2019fc3e190a76df89e58b3efa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java", "commitBeforeChange": "7d82fd670a2111e78de45cd09da5f184fc93d6ee", "commitAfterChange": "17d3b314bbb0f23622b719c089c1b3ca1607c1da", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void verifyVariable(MyVariable aVar, boolean aInInterface)", "signatureAfterChange": "     public void verifyVariable(MyVariable aVar, boolean aInInterface)", "diff": ["-        if (!mConfig.isIgnoreJavadoc()) {", "-            if (getJavadocBefore(aVar.getLineNo() - 1) == null) {", "-                if (!mConfig.isRelaxJavadoc() || inInterfaceBlock() ||", "-                    (aVar.getModifierSet().containsProtected() ||", "-                     aVar.getModifierSet().containsPublic()))", "-                {", "-                    log(aVar.getLineNo(),", "-                        \"variable '\" + aVar.getText() + \"' missing Javadoc.\");", "-                }", "-            }", "+        final Scope declaredScope =", "+            aVar.getModifierSet().getVisibilityScope();", "+        final Scope variableScope =", "+            inInterfaceBlock() ? Scope.PUBLIC : declaredScope;", "+", "+        if (inCheckScope(variableScope) &&", "+            getJavadocBefore(aVar.getLineNo() - 1) == null)", "+        {", "+            log(aVar.getLineNo(),", "+                \"variable '\" + aVar.getText() + \"' missing Javadoc.\");", "-            // Checks for Javadoc"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d001505b1c254d281cf48eb317536e8e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java", "commitBeforeChange": "7d82fd670a2111e78de45cd09da5f184fc93d6ee", "commitAfterChange": "17d3b314bbb0f23622b719c089c1b3ca1607c1da", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void verifyMethodJavadoc(MyModifierSet aMods,                                     MyCommonAST aReturnType,                                     MethodSignature aSig)", "signatureAfterChange": "     public void verifyMethodJavadoc(MyModifierSet aMods,                                     MyCommonAST aReturnType,                                     MethodSignature aSig)", "diff": ["-        if (mConfig.isIgnoreJavadoc()) {", "+        final Scope methodScope =", "+            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "+", "+        if (!inCheckScope(methodScope)) {", "-            // logic below is:", "-            // - if in not in a method block (cause if we are, then this is an", "-            // anonymous class); AND", "-            // - one of:", "-            //    o javadoc checking not relaxed; OR", "-            //    o in an interface block (all methods must have javadoc); OR", "-            //    o method is protected or public.", "-            if (!inMethodBlock() &&", "-                (!mConfig.isRelaxJavadoc() || inInterfaceBlock() ||", "-                 (aMods.containsProtected() || aMods.containsPublic())))", "-            {", "-                log(lineNo, \"method is missing a Javadoc comment.\");", "-            }", "+            log(lineNo, \"method is missing a Javadoc comment.\");"]}]}
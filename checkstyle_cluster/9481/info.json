{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0a459335d3a2f9938055abdb14674ca", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0440185fa790adba805099d279651cd8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java", "commitBeforeChange": "8aa747f8ac92b55212445789548369dd628cb260", "commitAfterChange": "54ed230519fc78c7a5ca48d9dd05cce4f4ff4b1b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isLastEmptyLine(DetailNode aNewLine)", "signatureAfterChange": "     private boolean isLastEmptyLine(DetailNode aNewLine)", "diff": ["-        boolean result = false;", "-        DetailNode nextSibling = JavadocUtils.getNextSibling(aNewLine);", "-        if (nextSibling.getType() == JavadocTokenTypes.TEXT", "-                && nextSibling.getChildren().length == 1)", "-        {", "-            result =  true;", "-        }", "-        else {", "-            nextSibling = JavadocUtils.getNextSibling(nextSibling);", "-            if (JavadocUtils.getNextSibling(nextSibling).getType()", "-                    == JavadocTokenTypes.JAVADOC_TAG)", "+        DetailNode nextNode = JavadocUtils.getNextSibling(aNewLine);", "+        while (nextNode != null && nextNode.getType() != JavadocTokenTypes.JAVADOC_TAG) {", "+            if (nextNode.getType() == JavadocTokenTypes.TEXT", "+                    && nextNode.getChildren().length > 1", "+                    || nextNode.getType() == JavadocTokenTypes.HTML_ELEMENT)", "-                result =  true;", "+                return false;", "+            nextNode = JavadocUtils.getNextSibling(nextNode);", "-        return result;", "+        return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13421b0d522536d4a8e2d91ff8035aa0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "9ddad74e484384e5ca2d88ab0fe21922189e2b85", "commitAfterChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static DetailAST findContainingConstantDef(DetailAST ast)", "signatureAfterChange": "     private static DetailAST findContainingConstantDef(DetailAST ast)", "diff": ["+        DetailAST constantDef = null;", "-        if (varDefAST == null) {", "-            return null;", "-        }", "+        if (varDefAST != null) {", "+            // implicit constant?", "+            if (ScopeUtils.isInInterfaceOrAnnotationBlock(varDefAST)", "+                    || varDefAST.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "+                constantDef = varDefAST;", "+            }", "+            else {", "+                // explicit constant", "+                final DetailAST modifiersAST = varDefAST.findFirstToken(TokenTypes.MODIFIERS);", "-        // implicit constant?", "-        if (ScopeUtils.isInInterfaceOrAnnotationBlock(varDefAST)", "-            || varDefAST.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "-            return varDefAST;", "+                if (modifiersAST.branchContains(TokenTypes.FINAL)) {", "+                    constantDef = varDefAST;", "+                }", "+            }", "-", "-        // explicit constant", "-        final DetailAST modifiersAST =", "-                varDefAST.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiersAST.branchContains(TokenTypes.FINAL)) {", "-            return varDefAST;", "-        }", "-", "-        return null;", "+        return constantDef;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d4c7e543e6ff3233a722e23d88cae9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private static boolean inStatic(DetailAST ast)", "signatureAfterChange": "     private static boolean inStatic(DetailAST ast)", "diff": ["+        boolean inStatic = false;", "+", "-            switch (parent.getType()) {", "-                case TokenTypes.STATIC_INIT:", "-                    return true;", "-                case TokenTypes.METHOD_DEF:", "-                    final DetailAST mods =", "-                        parent.findFirstToken(TokenTypes.MODIFIERS);", "-                    return mods.branchContains(TokenTypes.LITERAL_STATIC);", "-                default:", "-                    parent = parent.getParent();", "+            if (parent.getType() == TokenTypes.STATIC_INIT) {", "+                inStatic = true;", "+                break;", "+            }", "+            else if (parent.getType() == TokenTypes.METHOD_DEF) {", "+                final DetailAST mods =", "+                    parent.findFirstToken(TokenTypes.MODIFIERS);", "+                inStatic = mods.branchContains(TokenTypes.LITERAL_STATIC);", "+                break;", "+            }", "+            else {", "+                parent = parent.getParent();", "-        return false;", "+        return inStatic;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf4ae5a577e66a7b30f733212f1eb5d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OtherLeftCurlyCheck.java", "commitBeforeChange": "b657e696ffd7333d43327160303f149174ccb49e", "commitAfterChange": "4a5ccfb6fe4d4d2cf9d74419b3292bbb46ad4149", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                brace = aAST.getLastChild();", "-                break;", "-                brace = (DetailAST) aAST.getFirstChild();", "+            case TokenTypes.LITERAL_IF:", "+                brace = aAST.findFirstToken(TokenTypes.SLIST);", "+                ", "-                if (candidate.getType() == TokenTypes.SLIST) {", "-                    brace = candidate;", "-                }", "-                else {", "-                    // silently ignore", "-                    brace = null;", "-                }", "+                brace =", "+                    (candidate.getType() == TokenTypes.SLIST)", "+                        ? candidate", "+                        : null; // silently ignore", "-            case TokenTypes.LITERAL_SWITCH:", "-            case TokenTypes.LITERAL_IF:", "-                brace = (DetailAST) aAST.getFirstChild().getNextSibling()", "-                    .getNextSibling().getNextSibling();", "+                ", "+            case TokenTypes.LITERAL_SWITCH :", "+                brace = aAST.findFirstToken(TokenTypes.LCURLY);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cff88a3c492ddf882ca3892d114d781e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "dfd04eb16b568e1db9200c0d9f5ea6151ccff762", "commitAfterChange": "bad81c81c2be3e67099c512e4e0aada291323566", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private static boolean isClassPublic(DetailAST classDef)", "signatureAfterChange": "     private static boolean isClassPublic(DetailAST ast)", "diff": ["-    private static boolean isClassPublic(DetailAST classDef) {", "-        final DetailAST classModifiers =", "-                classDef.findFirstToken(TokenTypes.MODIFIERS);", "-        return classModifiers.branchContains(TokenTypes.LITERAL_PUBLIC);", "+    private static boolean isClassPublic(DetailAST ast) {", "+        boolean isAccessibleFromPublic = false;", "+        final boolean isMostOuterScope = ast.getParent() == null;", "+        final DetailAST modifiersAst = ast.findFirstToken(TokenTypes.MODIFIERS);", "+        final boolean hasPublicModifier = modifiersAst.branchContains(TokenTypes.LITERAL_PUBLIC);", "+", "+        if (isMostOuterScope) {", "+            isAccessibleFromPublic = hasPublicModifier;", "+        }", "+        else {", "+            final DetailAST parentClassAst = ast.getParent().getParent();", "+", "+            if (parentClassAst.getType() == TokenTypes.INTERFACE_DEF || hasPublicModifier) {", "+                isAccessibleFromPublic = isClassPublic(parentClassAst);", "+            }", "+        }", "+", "+        return isAccessibleFromPublic;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9fab45f52a73f89b7a60ab99041eb54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "commitAfterChange": "5a3f05ec8038daa674666bbaa82d59127aa74f92", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean isSuperCall(DetailAST literalSuperAst)", "signatureAfterChange": "     private boolean isSuperCall(DetailAST literalSuperAst)", "diff": ["-        if (literalSuperAst.getType() != TokenTypes.LITERAL_SUPER) {", "-            return false;", "-        }", "-        // dot operator?", "-        DetailAST dotAst = literalSuperAst.getParent();", "-        if (dotAst.getType() != TokenTypes.DOT", "-            || isSameNameMethod(literalSuperAst)", "-            || hasArguments(dotAst)) {", "-            return false;", "-        }", "+        boolean superCall = false;", "-        // in an overriding method for this check?", "+        if (literalSuperAst.getType() == TokenTypes.LITERAL_SUPER) {", "+            // dot operator?", "+            final DetailAST dotAst = literalSuperAst.getParent();", "+", "+            if (dotAst.getType() == TokenTypes.DOT", "+                && !isSameNameMethod(literalSuperAst)", "+                && !hasArguments(dotAst)) {", "+                superCall = isSuperCallInOverridingMethod(dotAst);", "+            }", "+        }", "+        return superCall;", "+    }", "-                return isOverridingMethod(dotAst);", "-                return false;", "-        return false;"]}]}
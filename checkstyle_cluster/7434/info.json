{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3b24822a8d866b572782fbea153a7477", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68ef02c953cc0a56841d59e2625f095c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/doclets/CheckDocsDoclet.java", "commitBeforeChange": "a91de9a50e4707848d31d7391966cca8b08e1559", "commitAfterChange": "0a60a189ed4236fd9be3c26bbb2f27be95e5d967", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 0, "signatureBeforeChange": "         private void addCheck(ClassDoc aClassDoc)", "signatureAfterChange": "         public int compare(Object aObject1, Object aObject2)", "diff": ["+        /** @see Comparator#compare */", "+        public int compare(Object aObject1, Object aObject2)", "+        {", "+            final ClassDoc classDoc1 = (ClassDoc) aObject1;", "+            final ClassDoc classDoc2 = (ClassDoc) aObject2;", "+            final String checkName1 = getCheckName(classDoc1);", "+            final String checkName2 = getCheckName(classDoc2);", "+            return checkName1.compareTo(checkName2);", "+        }", "-         */", "-        private void addCheck(ClassDoc aClassDoc)", "-        {", "-            String checkName = getCheckName(aClassDoc);", "-            mChecks.put(checkName, aClassDoc);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba45c48f4c57aeabcc6ab87b1389aa55", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "b0240a0200663fbf1d3146d1aefe12207fdde4af", "commitAfterChange": "9aa72722de7b5a4ffb5d50945c7bce8b58f25e8e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void findDuplicatesInFiles(int aI, int aJ)", "signatureAfterChange": "     private void findDuplicatesInFiles(int aI, int aJ)", "diff": ["+        final ChecksumInfo iChecksumInfo = mChecksumInfo[aI];", "+        final ChecksumInfo jChecksumInfo = mChecksumInfo[aJ];", "+        if (!iChecksumInfo.hasChecksumOverlapsWith(jChecksumInfo)) {", "+            return;", "+        }", "+", "-        final long[] jSortedBlockChecksums = mSortedRelevantChecksums[aJ];", "+", "+        // blocks of duplicate code might be longer than 'min'. We need to", "+        // remember the line combinations where we must ignore identical blocks", "+        // because we have already reported them for an earlier blockIdx.", "+        // Note: MultiHashMap is deprecated in the latest releases of o.a.j.c.c", "+        final MultiMap ignorePairs = new MultiHashMap();", "-        for (int blockIdx = 0; blockIdx < iBlockCount; blockIdx++) {", "+        for (int iLine = 0; iLine < iBlockCount; iLine++) {", "-            // detailed analysis only if the block does occur in jFile at all", "-            if (Arrays.binarySearch(", "-                    jSortedBlockChecksums,", "-                    iLineBlockChecksums[blockIdx]) >= 0)", "-            {", "-                blockIdx = findDuplicateFromLine(aI, aJ, blockIdx);", "+            final long iSum = iLineBlockChecksums[iLine];", "+            int[] jLines = jChecksumInfo.findLinesWithChecksum(iSum);", "+            // detailed analysis only if the iLine block occurs in jFile at all", "+            if (jLines.length > 0) {", "+                findDuplicateFromLine(aI, aJ, iLine, jLines, ignorePairs);"]}]}
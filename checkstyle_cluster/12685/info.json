{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa8cc421022c3a34b3f0ab7164ee14f4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e03acc8b2e66d6b0770d5fef631d6f1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "9183d6c2407b843c66d379498b66626a766f92f3", "commitAfterChange": "6e775898e7d1ac179bcb6550f3023ee9b9d70bc3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private String getDisallowedAbbreviation(String str)", "signatureAfterChange": "     private String getDisallowedAbbreviation(String str)", "diff": ["-            else {", "-                if (abbrStarted) {", "-                    abbrStarted = false;", "+            else if (abbrStarted) {", "+                abbrStarted = false;", "-                    final int endIndex = index - 1;", "-                    // -1 as a first capital is usually beginning of next word", "-                    result = getAbbreviationIfIllegal(str, beginIndex, endIndex);", "-                    if (result != null) {", "-                        break;", "-                    }", "-                    beginIndex = -1;", "+                final int endIndex = index - 1;", "+                // -1 as a first capital is usually beginning of next word", "+                result = getAbbreviationIfIllegal(str, beginIndex, endIndex);", "+                if (result != null) {", "+                    break;", "+                beginIndex = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef8eaa0290e0b98c7742f7f1c8fdff4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "e389849df6d5ee4ba99aba175fbb0f4d6ade40ee", "commitAfterChange": "7823165cce4d7978fe928d8ada0a4861c950ff0f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean isSingleTag(HtmlTag aTag)", "signatureAfterChange": "     private boolean isSingleTag(HtmlTag aTag)", "diff": ["-        boolean isSingleTag = false;", "-        for (String element : SINGLE_TAG) {", "-            // If its a singleton tag (<p>, <br>, etc.), ignore it", "-            // Can't simply not put them on the stack, since singletons", "-            // like <dt> and <dd> (unhappily) may either be terminated", "-            // or not terminated. Both options are legal.", "-            if (aTag.getId().equalsIgnoreCase(element)) {", "-                isSingleTag = true;", "-            }", "-        }", "-        return isSingleTag;", "+        // If its a singleton tag (<p>, <br>, etc.), ignore it", "+        // Can't simply not put them on the stack, since singletons", "+        // like <dt> and <dd> (unhappily) may either be terminated", "+        // or not terminated. Both options are legal.", "+        return SINGLE_TAGS.contains(aTag.getId().toLowerCase());", "+    }"]}]}
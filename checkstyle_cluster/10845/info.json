{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e9bcf0d627ed8bb54b4669e8fb6842a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "389f5675bd833e027e0be0045a5440e2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "commitAfterChange": "5a3f05ec8038daa674666bbaa82d59127aa74f92", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean isOverridingMethod(DetailAST ast)", "signatureAfterChange": "     private boolean isOverridingMethod(DetailAST ast)", "diff": ["-        if (ast.getType() != TokenTypes.METHOD_DEF", "-            || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "-            return false;", "+        boolean overridingMethod = false;", "+", "+        if (ast.getType() == TokenTypes.METHOD_DEF", "+                && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "+            final String name = nameAST.getText();", "+            final DetailAST modifiersAST = ast.findFirstToken(TokenTypes.MODIFIERS);", "+", "+            if (getMethodName().equals(name)", "+                    && !modifiersAST.branchContains(TokenTypes.LITERAL_NATIVE)) {", "+                final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "+                overridingMethod = params.getChildCount() == 0;", "+            }", "-        final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-        final String name = nameAST.getText();", "-        final DetailAST modifiersAST = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (!getMethodName().equals(name)", "-                || modifiersAST.branchContains(TokenTypes.LITERAL_NATIVE)) {", "-            return false;", "-        }", "-        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        return params.getChildCount() == 0;", "+        return overridingMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "620699203c5d240260698a0447e5bcbd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java", "commitBeforeChange": "dba2da926c7a35cc1c68a739934b846c14d9b7ae", "commitAfterChange": "779d30b7599259bb25f5178cbb28f2a038992553", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static boolean isInContext(DetailAST ast, int[]... contextSet)", "signatureAfterChange": "     private static boolean isInContext(DetailAST ast, int[]... contextSet)", "diff": ["+        boolean found = false;", "-                if (current == null || current.getType() != expectedType) {", "+                if (current.getType() != expectedType) {", "+                    found = false;", "-                if (j == len - 1) {", "-                    return true;", "+                else {", "+                    found = true;", "+", "+            if (found) {", "+                break;", "+            }", "-        return false;", "+        return found;"]}]}
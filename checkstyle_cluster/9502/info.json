{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2eccf3ac05ef35af8fd0e32c2b663ac7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171bace79c0ce630c1e727d21f9725f9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "7347cc361b9251beb9f13acfbcb966f887925da5", "commitAfterChange": "661a9b0ddb10922458082573d79e0791ba6f38c2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected void checkChildren(DetailAST aParent, int[] aTokenTypes,         int aStartLevel,         boolean aFirstLineMatches, boolean aAllowNesting)", "signatureAfterChange": "     protected final void checkChildren(DetailAST aParent, int[] aTokenTypes,         int aStartLevel,         boolean aFirstLineMatches, boolean aAllowNesting)", "diff": ["-     */", "-    protected void checkChildren(DetailAST aParent, int[] aTokenTypes,", "-        int aStartLevel,", "-        boolean aFirstLineMatches, boolean aAllowNesting)", "-    {", "-        Arrays.sort(aTokenTypes);", "-        for (DetailAST child = (DetailAST) aParent.getFirstChild();", "-                child != null;", "-                child = (DetailAST) child.getNextSibling())", "-        {", "-            if (Arrays.binarySearch(aTokenTypes, child.getType()) >= 0) {", "-                checkExpressionSubtree(child, aStartLevel,", "-                    aFirstLineMatches, aAllowNesting);", "-            }", "-        }", "-    }", "+     */", "+    protected final void checkChildren(DetailAST aParent, int[] aTokenTypes,", "+        int aStartLevel,", "+        boolean aFirstLineMatches, boolean aAllowNesting)", "+    {", "+        Arrays.sort(aTokenTypes);", "+        for (DetailAST child = (DetailAST) aParent.getFirstChild();", "+                child != null;", "+                child = (DetailAST) child.getNextSibling())", "+        {", "+            if (Arrays.binarySearch(aTokenTypes, child.getType()) >= 0) {", "+                checkExpressionSubtree(child, aStartLevel,", "+                    aFirstLineMatches, aAllowNesting);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65aa8a1d5d8f167f033522306f3fe747", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "7347cc361b9251beb9f13acfbcb966f887925da5", "commitAfterChange": "661a9b0ddb10922458082573d79e0791ba6f38c2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "     protected void checkExpressionSubtree(DetailAST aTree, int aLevel)", "signatureAfterChange": "     protected final void checkExpressionSubtree(DetailAST aTree, int aLevel)", "diff": ["-     */", "-    protected void checkExpressionSubtree(DetailAST aTree, int aLevel)", "-    {", "-        checkExpressionSubtree(aTree, aLevel, false, false);", "-    }", "+     */", "+    protected final void checkExpressionSubtree(DetailAST aTree, int aLevel)", "+    {", "+        checkExpressionSubtree(aTree, aLevel, false, false);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1f8e8859ab66b57d5faa21fb6eb8c47", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "7347cc361b9251beb9f13acfbcb966f887925da5", "commitAfterChange": "661a9b0ddb10922458082573d79e0791ba6f38c2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 15, "signatureBeforeChange": "     protected int getLineStart(String aLine)", "signatureAfterChange": "     protected final int getLineStart(String aLine)", "diff": ["-     */", "-    protected int getLineStart(String aLine)", "-    {", "-        for (int start = 0; start < aLine.length(); start++) {", "-            char c = aLine.charAt(start);", "-", "-            if (!Character.isWhitespace(c)) {", "-                return Utils.lengthExpandedTabs(", "-                    aLine, start, mIndentCheck.getIndentationTabWidth());", "-            }", "-        }", "-        return 0;", "-    }", "+     */", "+    protected final int getLineStart(String aLine)", "+    {", "+        for (int start = 0; start < aLine.length(); start++) {", "+            char c = aLine.charAt(start);", "+", "+            if (!Character.isWhitespace(c)) {", "+                return Utils.lengthExpandedTabs(", "+                    aLine, start, mIndentCheck.getIndentationTabWidth());", "+            }", "+        }", "+        return 0;", "+    }"]}]}
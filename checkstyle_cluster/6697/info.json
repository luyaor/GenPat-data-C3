{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ba1024ac0fd4cb003f608058c2f5270", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf0579239cfb2418370f8f500f381a2e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private static boolean isMultiDimensionalArray(DetailAST arrayDeclaration)", "signatureAfterChange": "     private static DetailAST getTypeLastNode(DetailAST ast)", "diff": ["+     */", "+    private static DetailAST getTypeLastNode(DetailAST ast) {", "+        DetailAST result = ast.findFirstToken(TokenTypes.TYPE_ARGUMENTS);", "+        if (result == null) {", "+            result = getIdentLastToken(ast);", "+            if (result == null) {", "+                //primitive literal expected", "+                result = ast.getFirstChild();", "+            result = result.findFirstToken(TokenTypes.GENERIC_END);", "+        }", "+        return result;", "+    }", "-     */", "-    private static boolean isMultiDimensionalArray(DetailAST arrayDeclaration) {", "-        return arrayDeclaration.getParent().getType() == TokenTypes.ARRAY_DECLARATOR", "-                || arrayDeclaration.getFirstChild().getType() == TokenTypes.ARRAY_DECLARATOR;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce3bf3e80068acc3678d1e4d7eb36ae2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "3f691ec451055c2752ae2d6b25f9a3c050a10783", "commitAfterChange": "425fd5a27cd567d5784bd246729c55cf8cda3dbd", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 43, "signatureBeforeChange": "         boolean contains(DetailAST nameToFind)", "signatureAfterChange": "         private boolean containsMethodDef(Set<DetailAST> set, DetailAST ident)", "diff": ["-        boolean contains(DetailAST nameToFind) {", "-            return containsName(varIdents, nameToFind);", "+         */", "+        private boolean containsMethodDef(Set<DetailAST> set, DetailAST ident) {", "+            boolean result = false;", "+            for (DetailAST ast: set) {", "+                if (isSimilarSignature(ident, ast)) {", "+                    result = true;", "+                    break;", "+                }", "+            }", "+            return result;", "+        }"]}]}
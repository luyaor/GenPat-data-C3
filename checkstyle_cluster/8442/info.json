{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "604937b6101e0a8147e52fcb83abde50", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a9e4df22fbc4247e13da1224867dcf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "d92ceb81a67bb10b98f5ce305f839ba535a1c6ee", "commitAfterChange": "9aa8268e473071cbe26aa9d3a8631f1902e3fef0", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "      public void testPackageHtml()         throws Exception", "signatureAfterChange": "      public void testPackageHtml()         throws Exception", "diff": ["-            packageHtmlPath + \":0: missing package documentation file.\",", "+            packageHtmlPath + \":0: Missing package documentation file.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "234ef9f20333359576831e590a192f37", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/MethodParamPadTest.java", "commitBeforeChange": "21c8c76f930874dd6556ac5ad059c69a2c32642f", "commitAfterChange": "339e0ff9a6694e2724027c5e41028d2cd7b138cb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void operatorWrapTest() throws Exception", "signatureAfterChange": "      @Test     public void operatorWrapTest() throws Exception", "diff": ["-        final String filePath = builder.getFilePath(\"MethodParamPadInput\");", "+        final String filePath = builder.getFilePath(\"InputMethodParamPad\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25afbfddf64e0a0966b7557375871fdd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheckTest.java", "commitBeforeChange": "c5de8a31c8287b8a7946a9f4f981a35a190a9735", "commitAfterChange": "10d3015752ad509cd8f7956d98b6eb9c92641a45", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testDefaultSettings()         throws Exception", "signatureAfterChange": "      @Test     public void testDefaultSettings()         throws Exception", "diff": ["-        verify(checkConfig, getPath(\"InputJavadocStyleCheck.java\"), expected);", "+        verify(checkConfig, getPath(\"InputJavadocStyle.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "373465a3cc9d6c3aac24fb55f683c7fc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule412nonemptyblocks/LeftCurlyRightCurlyTest.java", "commitBeforeChange": "21c8c76f930874dd6556ac5ad059c69a2c32642f", "commitAfterChange": "339e0ff9a6694e2724027c5e41028d2cd7b138cb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void rightCurlyTestAlone() throws Exception", "signatureAfterChange": "      @Test     public void rightCurlyTestAlone() throws Exception", "diff": ["-        final String filePath = builder.getFilePath(\"RightCurlyInput_Other\");", "+        final String filePath = builder.getFilePath(\"InputRightCurlyOther\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "403d100b9f67d2a80f022b190691a9a8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule713atclauses/NonEmptyAtclauseDescriptionTest.java", "commitBeforeChange": "8becd3328d9f043288f1b747af9ee50aaccd48dc", "commitAfterChange": "13087245589b5c5ea7d732bb939c6ab2504fcd26", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @BeforeClass     public static void setConfigurationBuilder() throws CheckstyleException, IOException", "signatureAfterChange": "      @BeforeClass     public static void setConfigurationBuilder() throws CheckstyleException, IOException", "diff": ["-        builder = new ConfigurationBuilder(new File(\"src/\"));", "+        builder = new ConfigurationBuilder(new File(\"src/it/\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d181ca427058370114c27168e3c0f39", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/OperatorWrapTest.java", "commitBeforeChange": "21c8c76f930874dd6556ac5ad059c69a2c32642f", "commitAfterChange": "339e0ff9a6694e2724027c5e41028d2cd7b138cb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void operatorWrapTest() throws Exception", "signatureAfterChange": "      @Test     public void operatorWrapTest() throws Exception", "diff": ["-        final String filePath = builder.getFilePath(\"OperatorWrapInput\");", "+        final String filePath = builder.getFilePath(\"InputOperatorWrap\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8090b8509ecd02e5b6846bb7f9fa18b1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "d499f72239cec254d620ab1619ac936e233e2033", "commitAfterChange": "c682b5725d22afc38bf19d9667b23a7deab6d8c3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      public void testIgnoreAccess()         throws Exception", "signatureAfterChange": "      public void testIgnoreAccess()         throws Exception", "diff": ["-            filepath + \":24:16: variable 'data' must match pattern '^[A-Z](_?[A-Z0-9]+)*$'.\",", "+            filepath + \":24:16: variable name 'data' must match pattern '^[A-Z](_?[A-Z0-9]+)*$'.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "892ec803d4abb144754c35ebc1712636", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/HexFloatsTest.java", "commitBeforeChange": "2fe5ade8b31c0c7b32fab4e25f1ec73c9ab31b8d", "commitAfterChange": "ab6b9b8330a3e11e778731feb78e4e9067fbb0ab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Test     public void testCanParse()         throws Exception", "signatureAfterChange": "      @Test     public void testCanParse()         throws Exception", "diff": ["+", "-        verify(checkConfig, getPath(\"grammars/InputHexFloat.java\"), expected);", "+        verify(checkConfig, getPath(\"InputHexFloat.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a04f7d2bd0a0b0dca8646d918119b830", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "9e9b817c6558d1141617e52444716c0f802c1417", "commitAfterChange": "94e56037a53433ffd11f77995c2676c3b2d4753b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void customJavadocTags()         throws IOException", "signatureAfterChange": "      @Test     public void customJavadocTags()         throws IOException", "diff": ["-        String filename = getDocPath(\"CustomJavadocTags.txt\");", "+        String filename = getDocPath(\"InputCustomJavadocTags.txt\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "becb9e9fb0168237a6a3d48e31e29b20", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/java8/LambdaTest.java", "commitBeforeChange": "c5de8a31c8287b8a7946a9f4f981a35a190a9735", "commitAfterChange": "10d3015752ad509cd8f7956d98b6eb9c92641a45", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      @Test     public void testInTernary()         throws Exception", "signatureAfterChange": "      @Test     public void testInTernary()         throws Exception", "diff": ["-        verify(checkConfig, getNonCompilablePath(\"InputLambdaTest18.java\"), expected);", "+        verify(checkConfig, getNonCompilablePath(\"InputLambda18.java\"), expected);"]}]}
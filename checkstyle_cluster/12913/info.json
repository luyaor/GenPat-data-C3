{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "066bac9b53f1f18c8d91e8c3ec15936a", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "484dead1f30d5d956b50251cdf69dcea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "b95ced53e3c47c9a9db5022767a18e714fc3bebd", "commitAfterChange": "cbe38280adb03f058f89e8ea81bc0e3be2fc5b94", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows,                                  boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows,                                  boolean aReportExpectedTags)", "diff": ["+            Token token = new Token(tag.getArg1(), tag.getLineNo(),", "+                                    tag.getColumnNo());", "+            ClassInfo documentedCI =", "+                createClassInfo(token, getCurrentClassName());", "-            Class documentedClass = null;", "-            boolean classLoaded = false;", "-                final FullIdent fi = ei.getName();", "+                final Token fi = ei.getName();", "-                    if (!classLoaded) {", "-                        documentedClass = loadClassForTag(tag);", "-                        classLoaded = true;", "-                    }", "-                    found = isSubclass(documentedClass, ei.getClazz());", "+                    found = isSubclass(documentedCI.getClazz(), ei.getClazz());", "-                    if (!classLoaded) {", "-                        documentedClass = loadClassForTag(tag);", "-                        classLoaded = true;", "-                    }", "-                    reqd = !isUnchecked(documentedClass);", "+                    reqd = !isUnchecked(documentedCI.getClazz());", "-                    log(tag.getLineNo(), \"javadoc.unusedTag\", \"@throws\", tag", "-                        .getArg1());", "+                    log(tag.getLineNo(), tag.getColumnNo(),", "+                        \"javadoc.unusedTag\", \"@throws\", tag.getArg1());", "+", "-                    final FullIdent fi = ei.getName();", "+                    final Token fi = ei.getName();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad94731ca22950459d3024a0e0e4057", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "bb1db4938ccae0f7149461ea372398fb8a53f2a8", "commitAfterChange": "15b8debf99b3b0c600084fccde54d9562bd48b71", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["-            if (!found", "-                && (mAllowThrowsTagsForSubclasses || mAllowUndeclaredRTE))", "-            {", "-                documentedClass = resolveClass(documentedEx);", "-                if (documentedClass == null) {", "-                    log(tag.getLineNo(), \"javadoc.classInfo\",", "-                        \"@throws\", documentedEx);", "-                }", "-            }", "+            boolean classLoaded = false;", "-                else if (mAllowThrowsTagsForSubclasses", "-                         && documentedClass != null)", "-                {", "-                    if (ei.isLoadable() && ei.getClazz() == null) {", "-                        // if the class is not loaded yet.", "-                        // try to load it.", "-                        ei.setClazz(resolveClass(declaredEx));", "-                        if (!ei.isLoadable()) {", "-                            log(fi.getLineNo(), \"javadoc.classInfo\",", "-                                \"@throws\", declaredEx);", "-                        }", "+                else if (mAllowThrowsTagsForSubclasses) {", "+                    if (!classLoaded) {", "+                        documentedClass = loadClassForTag(tag);", "+                        classLoaded = true;", "-", "-                if (mAllowUndeclaredRTE && documentedClass != null) {", "+                if (mAllowUndeclaredRTE) {", "+                    if (!classLoaded) {", "+                        documentedClass = loadClassForTag(tag);", "+                        classLoaded = true;", "+                    }"]}]}
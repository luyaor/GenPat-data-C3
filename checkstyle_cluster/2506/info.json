{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dba26bf97921df31967859da99627bee", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92077d40088d35a45c1809d009394f28", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "ecc5239c78ca71db775de187b6b70481d8b08284", "commitAfterChange": "d2af4accdde3eac0a2103353f490e97bf62f61d2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private String getConfigHashCode(Serializable aConfiguration)", "signatureAfterChange": "     private String getConfigHashCode(Serializable aConfiguration)", "diff": ["-            final ObjectOutputStream oos = new ObjectOutputStream(baos);", "-            oos.writeObject(aConfiguration);", "-            oos.flush();", "-            oos.close();", "+            ObjectOutputStream oos = null;", "+            try {", "+                oos = new ObjectOutputStream(baos);", "+                oos.writeObject(aConfiguration);", "+            }", "+            finally {", "+                this.flushAndCloseOutStream(oos);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c2ee094740de5a821c49d05e05a357e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDoclet.java", "commitBeforeChange": "ecc5239c78ca71db775de187b6b70481d8b08284", "commitAfterChange": "d2af4accdde3eac0a2103353f490e97bf62f61d2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static boolean start(RootDoc aRoot) throws FileNotFoundException", "signatureAfterChange": "     public static boolean start(RootDoc aRoot) throws FileNotFoundException", "diff": ["-        final PrintStream ps = new PrintStream(fos);", "-        final ClassDoc[] classes = aRoot.classes();", "-        if ((classes.length != 1) || !\"TokenTypes\".equals(classes[0].name())) {", "-            final String message =", "-                \"The doclet should be used for TokenTypes only\";", "-            throw new IllegalArgumentException(message);", "-        }", "-", "-        final FieldDoc[] fields = classes[0].fields();", "-        for (final FieldDoc field : fields) {", "-            if (field.isStatic() && field.isPublic() && field.isFinal()", "-                && \"int\".equals((field.type().qualifiedTypeName())))", "+        PrintStream ps = null;", "+        try {", "+            ps = new PrintStream(fos);", "+            final ClassDoc[] classes = aRoot.classes();", "+            if ((classes.length != 1)", "+                || !\"TokenTypes\".equals(classes[0].name()))", "-                if (field.firstSentenceTags().length != 1) {", "-                    final String message = \"Should be only one tag.\";", "-                    throw new IllegalArgumentException(message);", "+                final String message =", "+                    \"The doclet should be used for TokenTypes only\";", "+                throw new IllegalArgumentException(message);", "+            }", "+", "+            final FieldDoc[] fields = classes[0].fields();", "+            for (final FieldDoc field : fields) {", "+                if (field.isStatic() && field.isPublic() && field.isFinal()", "+                    && \"int\".equals((field.type().qualifiedTypeName())))", "+                {", "+                    if (field.firstSentenceTags().length != 1) {", "+                        final String message = \"Should be only one tag.\";", "+                        throw new IllegalArgumentException(message);", "+                    }", "+                    ps.println(field.name() + \"=\"", "+                        + field.firstSentenceTags()[0].text());", "-                ps.println(field.name() + \"=\"", "-                           + field.firstSentenceTags()[0].text());", "+            }", "+        }", "+        finally {", "+            if (ps != null) {", "+                ps.close();", "-        ps.close();"]}]}
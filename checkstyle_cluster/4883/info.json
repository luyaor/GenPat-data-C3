{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7523994729b054aeaa7302d2666ab046", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39d1dd46fdd5847d11dd5aab98c5d393", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean hasRedundantWhitespace(String line, int after)", "signatureAfterChange": "     private static DetailAST getIdentLastToken(DetailAST ast)", "diff": ["+     */", "+    private static DetailAST getIdentLastToken(DetailAST ast) {", "+        // single identifier token as a name is the most common case", "+        DetailAST result = ast.findFirstToken(TokenTypes.IDENT);", "+        if (result == null) {", "+            final DetailAST dot = ast.findFirstToken(TokenTypes.DOT);", "+            // method call case", "+            if (dot == null) {", "+                final DetailAST methodCall = ast.findFirstToken(TokenTypes.METHOD_CALL);", "+                if (methodCall != null) {", "+                    result = methodCall.findFirstToken(TokenTypes.RPAREN);", "+                }", "+            }", "+            // qualified name case", "+            else {", "+                if (dot.findFirstToken(TokenTypes.DOT) == null) {", "+                    result = dot.getFirstChild().getNextSibling();", "+                    result = dot.findFirstToken(TokenTypes.IDENT);", "-     */", "-    private boolean hasRedundantWhitespace(String line, int after) {", "-        boolean result = !allowLineBreaks;", "-        for (int i = after + 1; !result && i < line.length(); i++) {", "-            if (!Character.isWhitespace(line.charAt(i))) {", "-                result = true;", "-            }", "-        }", "-        return result;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "734c33573a81558e2235e8357109ca01", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static boolean isCStyleArrayDeclaration(DetailAST arrayDeclaration)", "signatureAfterChange": "     private static DetailAST getPreviousNodeWithParentOfTypeAst(DetailAST ast, DetailAST parent)", "diff": ["+     */", "+    private static DetailAST getPreviousNodeWithParentOfTypeAst(DetailAST ast, DetailAST parent) {", "+        final DetailAST previousElement;", "+        final DetailAST ident = getIdentLastToken(parent.getParent());", "+        final DetailAST lastTypeNode = getTypeLastNode(ast);", "+        // sometimes there are ident-less sentences", "+        // i.e. \"(Object[]) null\", but in casual case should be", "+        // checked whether ident or lastTypeNode has preceding position", "+        // determining if it is java style or C style", "+        if (ident == null || ident.getLineNo() > ast.getLineNo()) {", "+            previousElement = lastTypeNode;", "+        }", "+        else if (ident.getLineNo() < ast.getLineNo()) {", "+            previousElement = ident;", "+        }", "+        //ident and lastTypeNode lay on one line", "+        else {", "+            if (ident.getColumnNo() > ast.getColumnNo()", "+                || lastTypeNode.getColumnNo() > ident.getColumnNo()) {", "+                previousElement = lastTypeNode;", "+                previousElement = ident;", "+            }", "+        }", "+        return previousElement;", "+    }", "-     */", "-    private static boolean isCStyleArrayDeclaration(DetailAST arrayDeclaration) {", "-        boolean result = false;", "-        final DetailAST identifier = getArrayIdentifier(arrayDeclaration);", "-        if (identifier != null) {", "-            final int arrayDeclarationStart = arrayDeclaration.getColumnNo();", "-            final int identifierEnd = identifier.getColumnNo() + identifier.getText().length();", "-            result = arrayDeclarationStart == identifierEnd", "-                     || arrayDeclarationStart > identifierEnd;", "-        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6e8b702f32da0a54a43aed02bab45cb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5197abc836ef9c1287c3e15751f8b8d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "89f4e3c8b106394adab068520f89a158867b168d", "commitAfterChange": "c09131defe36dde56b2d9767d1953d93e20bd200", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "signatureAfterChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "diff": ["-        if (groupIdx > lastGroup) {", "-            // This check should be made more robust to handle", "-            // comments and imports that span more than one line.", "+        if (!beforeFirstImport && isAlphabeticallySortableStaticImport(isStatic)", "+                || groupIdx == lastGroup) {", "+            doVisitTokenInSameGroup(isStatic, previous, name, line);", "+        }", "+        else if (groupIdx > lastGroup) {", "-        }", "-        else if (groupIdx == lastGroup || sortStaticImportsAlphabetically", "-                 && isAlphabeticallySortableStaticImport(isStatic)) {", "-            doVisitTokenInSameGroup(isStatic, previous, name, line);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5502fb333ffd17793ac9ad3fcdc2f64c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java", "commitBeforeChange": "acc526251af53865b8af68574d6235f9426cab4b", "commitAfterChange": "68c1541bb3d6a6128bf6f895bc82f8925d26c00d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                log(firstNode, \"multiple.variable.declarations.comma\");", "+                // Check if the multiple variable declarations are in a", "+                // for loop initializer. If they are, then no warning", "+                // should be displayed. Declaring multiple variables in", "+                // a for loop initializer is a good way to minimize", "+                // variable scope. Refer Feature Request Id - 2895985", "+                // for more details", "+                if (aAST.getParent().getType() != TokenTypes.FOR_INIT) {", "+                    log(firstNode, \"multiple.variable.declarations.comma\");", "+                }"]}]}
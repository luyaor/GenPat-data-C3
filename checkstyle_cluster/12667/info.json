{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc96ed39569aad64822c2963db58fa02", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a7bd98a0d65236c87e4bc35a080dfc3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testIt2()         throws Exception", "signatureAfterChange": "      @Test     public void testIt2()         throws Exception", "diff": ["-            \"153:27: '=' is not followed by whitespace.\",", "-            \"154:27: '=' is not followed by whitespace.\",", "-            \"155:27: '=' is not followed by whitespace.\",", "-            \"156:27: '=' is not followed by whitespace.\",", "-            \"157:27: '=' is not followed by whitespace.\",", "-            \"158:27: '=' is not followed by whitespace.\",", "+            \"153:27: \" + getCheckMessage(WS_NOT_FOLLOWED, \"=\"),", "+            \"154:27: \" + getCheckMessage(WS_NOT_FOLLOWED, \"=\"),", "+            \"155:27: \" + getCheckMessage(WS_NOT_FOLLOWED, \"=\"),", "+            \"156:27: \" + getCheckMessage(WS_NOT_FOLLOWED, \"=\"),", "+            \"157:27: \" + getCheckMessage(WS_NOT_FOLLOWED, \"=\"),", "+            \"158:27: \" + getCheckMessage(WS_NOT_FOLLOWED, \"=\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fb43387791467ca3b748167d7f2dc8e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testIt() throws Exception", "signatureAfterChange": "     @Test     public void testIt() throws Exception", "diff": ["-            \"19:21: Instantiation of java.lang.Boolean should be avoided.\",", "-            \"24:21: Instantiation of java.lang.Boolean should be avoided.\",", "-            \"31:16: Instantiation of java.lang.Boolean should be avoided.\",", "-            \"38:21: Instantiation of \"", "-                + \"com.puppycrawl.tools.checkstyle.InputModifier \"", "-                + \"should be avoided.\",", "-            \"41:18: Instantiation of java.io.File should be avoided.\",", "-            \"44:21: Instantiation of java.awt.Color should be avoided.\",", "+            \"19:21: \" + getCheckMessage(MSG_KEY, \"java.lang.Boolean\"),", "+            \"24:21: \" + getCheckMessage(MSG_KEY, \"java.lang.Boolean\"),", "+            \"31:16: \" + getCheckMessage(MSG_KEY, \"java.lang.Boolean\"),", "+            \"38:21: \" + getCheckMessage(MSG_KEY, \"com.puppycrawl.tools.checkstyle.InputModifier\"),", "+            \"41:18: \" + getCheckMessage(MSG_KEY, \"java.io.File\"),", "+            \"44:21: \" + getCheckMessage(MSG_KEY, \"java.awt.Color\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f8592b8bf2276449242003b47eeb094", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java", "commitBeforeChange": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7", "commitAfterChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testInner()         throws Exception", "signatureAfterChange": "      @Test     public void testInner()         throws Exception", "diff": ["-            \"30:24: Variable 'rData' must be private and have accessor methods.\",", "-            \"33:27: Variable 'protectedVariable' must be private and have accessor methods.\",", "-            \"36:17: Variable 'packageVariable' must be private and have accessor methods.\",", "-            \"41:29: Variable 'sWeird' must be private and have accessor methods.\",", "-            \"43:19: Variable 'sWeird2' must be private and have accessor methods.\",", "-            \"77:20: Variable 'someValue' must be private and have accessor methods.\",", "+            \"30:24: \" + getCheckMessage(MSG_KEY, \"rData\"),", "+            \"33:27: \" + getCheckMessage(MSG_KEY, \"protectedVariable\"),", "+            \"36:17: \" + getCheckMessage(MSG_KEY, \"packageVariable\"),", "+            \"41:29: \" + getCheckMessage(MSG_KEY, \"sWeird\"),", "+            \"43:19: \" + getCheckMessage(MSG_KEY, \"sWeird2\"),", "+            \"77:20: \" + getCheckMessage(MSG_KEY, \"someValue\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d9f527b2976a61b82171d0ab56478ed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testNL() throws Exception", "signatureAfterChange": "      @Test     public void testNL() throws Exception", "diff": ["-            \"49:14: '{' should be on a new line.\",", "-            \"53:14: '{' should be on a new line.\",", "-            \"58:18: '{' should be on a new line.\",", "-            \"62:18: '{' should be on a new line.\",", "-            \"67:12: '{' should be on a new line.\",", "-            \"72:18: '{' should be on a new line.\",", "+            \"49:14: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"53:14: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"58:18: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"62:18: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"67:12: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"72:18: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45dd6e3fc15cd90dd44a11df70092358", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java", "commitBeforeChange": "8ad4aebb66a1b90ac135e05f8062423028e3be8e", "commitAfterChange": "0b98c0389e2cf745cb125a89dece57538fc672b7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testIt() throws Exception", "signatureAfterChange": "     @Test     public void testIt() throws Exception", "diff": ["-            \"14:10: 'final' modifier out of order with the JLS suggestions.\",", "-            \"18:12: 'private' modifier out of order with the JLS suggestions.\",", "-            \"24:14: 'private' modifier out of order with the JLS suggestions.\",", "-            \"34:13: '@MyAnnotation2' annotation modifier does not preceed non-annotation modifiers.\",", "-            \"39:13: '@MyAnnotation2' annotation modifier does not preceed non-annotation modifiers.\",", "-            \"49:35: '@MyAnnotation4' annotation modifier does not preceed non-annotation modifiers.\",", "+            \"14:10: \" + getCheckMessage(MSG_MODIFIER_ORDER, \"final\"),", "+            \"18:12: \" + getCheckMessage(MSG_MODIFIER_ORDER, \"private\"),", "+            \"24:14: \" + getCheckMessage(MSG_MODIFIER_ORDER, \"private\"),", "+            \"34:13: \" + getCheckMessage(MSG_ANNOTATION_ORDER, \"@MyAnnotation2\"),", "+            \"39:13: \" + getCheckMessage(MSG_ANNOTATION_ORDER, \"@MyAnnotation2\"),", "+            \"49:35: \" + getCheckMessage(MSG_ANNOTATION_ORDER, \"@MyAnnotation4\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b57f37ae3105199a7ee31770b0ea618", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java", "commitBeforeChange": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7", "commitAfterChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testFileWithFewTopLevelClasses() throws Exception", "signatureAfterChange": "      @Test     public void testFileWithFewTopLevelClasses() throws Exception", "diff": ["-            \"25: Top-level class NoSuperClone has to reside in its own source file.\",", "-            \"33: Top-level class InnerClone has to reside in its own source file.\",", "-            \"50: Top-level class CloneWithTypeArguments has to reside in its own source file.\",", "-            \"58: Top-level class CloneWithTypeArgumentsAndNoSuper has to reside in its own source file.\",", "-            \"67: Top-level class MyClassWithGenericSuperMethod has to reside in its own source file.\",", "-            \"84: Top-level class AnotherClass has to reside in its own source file.\",", "+            \"25: \" + getCheckMessage(MSG_KEY, \"NoSuperClone\"),", "+            \"33: \" + getCheckMessage(MSG_KEY, \"InnerClone\"),", "+            \"50: \" + getCheckMessage(MSG_KEY, \"CloneWithTypeArguments\"),", "+            \"58: \" + getCheckMessage(MSG_KEY, \"CloneWithTypeArgumentsAndNoSuper\"),", "+            \"67: \" + getCheckMessage(MSG_KEY, \"MyClassWithGenericSuperMethod\"),", "+            \"84: \" + getCheckMessage(MSG_KEY, \"AnotherClass\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c29d8be74689b8c5b5176523a824fa9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testInFlow() throws Exception", "signatureAfterChange": "      @Test     public void testInFlow() throws Exception", "diff": ["-            \"6: Wrong order for 'java.awt.Dialog' import.\",", "-            \"11: Wrong order for 'javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE' import.\",", "-            \"12: Wrong order for 'javax.swing.WindowConstants.*' import.\",", "-            \"13: Wrong order for 'javax.swing.JTable' import.\",", "-            \"15: Wrong order for 'java.io.File.createTempFile' import.\",", "-            \"16: Wrong order for 'java.io.File' import.\",", "+            \"6: \" + getCheckMessage(MSG_ORDERING, \"java.awt.Dialog\"),", "+            \"11: \" + getCheckMessage(MSG_ORDERING,", "+                     \"javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE\"),", "+            \"12: \" + getCheckMessage(MSG_ORDERING, \"javax.swing.WindowConstants.*\"),", "+            \"13: \" + getCheckMessage(MSG_ORDERING, \"javax.swing.JTable\"),", "+            \"15: \" + getCheckMessage(MSG_ORDERING, \"java.io.File.createTempFile\"),", "+            \"16: \" + getCheckMessage(MSG_ORDERING, \"java.io.File\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6133adf76cd997f0ac44f5f4d458e50f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheckTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testWithChecker()         throws Exception", "signatureAfterChange": "     @Test     public void testWithChecker()         throws Exception", "diff": ["-            \"7:1: Redundant import from the same package - com.puppycrawl.tools.checkstyle.imports.*.\",", "-            \"8:1: Redundant import from the same package - com.puppycrawl.tools.checkstyle.imports.InputImportBug.\",", "-            \"10:1: Redundant import from the java.lang package - java.lang.*.\",", "-            \"11:1: Redundant import from the java.lang package - java.lang.String.\",", "-            \"14:1: Duplicate import to line 13 - java.util.List.\",", "-            \"26:1: Duplicate import to line 25 - javax.swing.WindowConstants.*.\",", "+            \"7:1: \" + getCheckMessage(MSG_SAME, \"com.puppycrawl.tools.checkstyle.imports.*\"),", "+            \"8:1: \" + getCheckMessage(MSG_SAME, \"com.puppycrawl.tools.checkstyle.imports.InputImportBug\"),", "+            \"10:1: \" + getCheckMessage(MSG_LANG, \"java.lang.*\"),", "+            \"11:1: \" + getCheckMessage(MSG_LANG, \"java.lang.String\"),", "+            \"14:1: \" + getCheckMessage(MSG_DUPLICATE, 13, \"java.util.List\"),", "+            \"26:1: \" + getCheckMessage(MSG_DUPLICATE, 25, \"javax.swing.WindowConstants.*\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6139b3ea78237d1a36393c56248a2722", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault() throws Exception", "signatureAfterChange": "     @Test     public void testDefault() throws Exception", "diff": ["-            \"6:11: Catching 'RuntimeException' is not allowed.\",", "-            \"7:11: Catching 'Exception' is not allowed.\",", "-            \"8:11: Catching 'Throwable' is not allowed.\",", "-            \"14:11: Catching 'java.lang.RuntimeException' is not allowed.\",", "-            \"15:11: Catching 'java.lang.Exception' is not allowed.\",", "-            \"16:11: Catching 'java.lang.Throwable' is not allowed.\",", "+            \"6:11: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),", "+            \"7:11: \" + getCheckMessage(MSG_KEY, \"Exception\"),", "+            \"8:11: \" + getCheckMessage(MSG_KEY, \"Throwable\"),", "+            \"14:11: \" + getCheckMessage(MSG_KEY, \"java.lang.RuntimeException\"),", "+            \"15:11: \" + getCheckMessage(MSG_KEY, \"java.lang.Exception\"),", "+            \"16:11: \" + getCheckMessage(MSG_KEY, \"java.lang.Throwable\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69d88e00d01a6a00907906871f51e9b7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testIt3()         throws Exception", "signatureAfterChange": "      @Test     public void testIt3()         throws Exception", "diff": ["-            \"41:14: 'while' is not followed by whitespace.\",", "-            \"58:12: 'for' is not followed by whitespace.\",", "+            \"41:14: \" + getCheckMessage(WS_NOT_FOLLOWED, \"while\"),", "+            \"58:12: \" + getCheckMessage(WS_NOT_FOLLOWED, \"for\"),", "-            \"115:27: '{' is not followed by whitespace.\",", "-            \"115:27: '}' is not preceded with whitespace.\",", "-            \"118:40: '{' is not followed by whitespace.\",", "-            \"118:40: '}' is not preceded with whitespace.\",", "+            \"115:27: \" + getCheckMessage(WS_NOT_FOLLOWED, \"{\"),", "+            \"115:27: \" + getCheckMessage(WS_NOT_PRECEDED, \"}\"),", "+            \"118:40: \" + getCheckMessage(WS_NOT_FOLLOWED, \"{\"),", "+            \"118:40: \" + getCheckMessage(WS_NOT_PRECEDED, \"}\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d5e13975a82d87650c5a58cd8c58f10", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testEmptyTypes() throws Exception", "signatureAfterChange": "      @Test     public void testEmptyTypes() throws Exception", "diff": ["-            \"29:95: '{' is not followed by whitespace.\",", "-            \"29:95: '}' is not preceded with whitespace.\",", "-            \"30:33: '{' is not followed by whitespace.\",", "-            \"30:33: '}' is not preceded with whitespace.\",", "-            \"31:21: '{' is not followed by whitespace.\",", "-            \"31:21: '}' is not preceded with whitespace.\",", "+            \"29:95: \" + getCheckMessage(WS_NOT_FOLLOWED, \"{\"),", "+            \"29:95: \" + getCheckMessage(WS_NOT_PRECEDED, \"}\"),", "+            \"30:33: \" + getCheckMessage(WS_NOT_FOLLOWED, \"{\"),", "+            \"30:33: \" + getCheckMessage(WS_NOT_PRECEDED, \"}\"),", "+            \"31:21: \" + getCheckMessage(WS_NOT_FOLLOWED, \"{\"),", "+            \"31:21: \" + getCheckMessage(WS_NOT_PRECEDED, \"}\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953a2b3e0fbe2bd97f8854eef9690aaa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefaultOperation()         throws Exception", "signatureAfterChange": "     @Test     public void testDefaultOperation()         throws Exception", "diff": ["-            \"7: Using the '.*' form of import should be avoided - com.puppycrawl.tools.checkstyle.imports.*.\",", "-            \"9: Using the '.*' form of import should be avoided - java.io.*.\",", "-            \"10: Using the '.*' form of import should be avoided - java.lang.*.\",", "-            \"25: Using the '.*' form of import should be avoided - javax.swing.WindowConstants.*.\",", "-            \"26: Using the '.*' form of import should be avoided - javax.swing.WindowConstants.*.\",", "-            \"28: Using the '.*' form of import should be avoided - java.io.File.*.\",", "+            \"7: \" + getCheckMessage(MSG_KEY, \"com.puppycrawl.tools.checkstyle.imports.*\"),", "+            \"9: \" + getCheckMessage(MSG_KEY, \"java.io.*\"),", "+            \"10: \" + getCheckMessage(MSG_KEY, \"java.lang.*\"),", "+            \"25: \" + getCheckMessage(MSG_KEY, \"javax.swing.WindowConstants.*\"),", "+            \"26: \" + getCheckMessage(MSG_KEY, \"javax.swing.WindowConstants.*\"),", "+            \"28: \" + getCheckMessage(MSG_KEY, \"java.io.File.*\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9305e03d0edbf5f98960a1a468bb1eb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testSameFileNameGeneral() throws Exception", "signatureAfterChange": "      @Test     public void testSameFileNameGeneral() throws Exception", "diff": ["-            \"10:5: Declaring variables, return values or parameters of type 'GregorianCalendar' is not allowed.\",", "-            \"16:23: Declaring variables, return values or parameters of type 'GregorianCalendar' is not allowed.\",", "-            \"24:9: Declaring variables, return values or parameters of type 'List' is not allowed.\",", "-            \"25:9: Declaring variables, return values or parameters of type 'java.io.File' is not allowed.\",", "-            \"27:5: Declaring variables, return values or parameters of type 'java.util.List' is not allowed.\",", "-            \"28:13: Declaring variables, return values or parameters of type 'ArrayList' is not allowed.\",", "+            \"10:5: \" + getCheckMessage(MSG_KEY, \"GregorianCalendar\"),", "+            \"16:23: \" + getCheckMessage(MSG_KEY, \"GregorianCalendar\"),", "+            \"24:9: \" + getCheckMessage(MSG_KEY, \"List\"),", "+            \"25:9: \" + getCheckMessage(MSG_KEY, \"java.io.File\"),", "+            \"27:5: \" + getCheckMessage(MSG_KEY, \"java.util.List\"),", "+            \"28:13: \" + getCheckMessage(MSG_KEY, \"ArrayList\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afa50148e16d3df7ab6fd38daa22ec33", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsTest.java", "commitBeforeChange": "df5e519a3d2d6a468558161e1e61ff4634e7b533", "commitAfterChange": "09a7ca60414ea04b64f45bb190eaa26c767086be", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Test     public void testSingleNoUncheckedTokens() throws Exception", "signatureAfterChange": "     @Test     public void testSingleNoUncheckedTokens() throws Exception", "diff": ["-            \"5:19: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"29:35: The warning 'unchecked' cannot be suppressed at this location.\",", "+            \"5:19: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"29:35: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "-            \"64:33: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"72:65: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"77:37: The warning 'unchecked' cannot be suppressed at this location.\",", "-            \"82:47: The warning 'unchecked' cannot be suppressed at this location.\",", "+            \"64:33: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"72:65: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"77:37: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),", "+            \"82:47: \" + getCheckMessage(MSG_KEY_SUPPRESSED_WARNING_NOT_ALLOWED, \"unchecked\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afbf1427681fed236f6dfc659d55d340", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java", "commitBeforeChange": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7", "commitAfterChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testSimple() throws Exception", "signatureAfterChange": "      @Test     public void testSimple() throws Exception", "diff": ["-            \"39:19: Variable 'mNumCreated2' must be private and have accessor methods.\",", "-            \"49:23: Variable 'sTest1' must be private and have accessor methods.\",", "-            \"51:26: Variable 'sTest3' must be private and have accessor methods.\",", "-            \"53:16: Variable 'sTest2' must be private and have accessor methods.\",", "-            \"56:9: Variable 'mTest1' must be private and have accessor methods.\",", "-            \"58:16: Variable 'mTest2' must be private and have accessor methods.\",", "+            \"39:19: \" + getCheckMessage(MSG_KEY, \"mNumCreated2\"),", "+            \"49:23: \" + getCheckMessage(MSG_KEY, \"sTest1\"),", "+            \"51:26: \" + getCheckMessage(MSG_KEY, \"sTest3\"),", "+            \"53:16: \" + getCheckMessage(MSG_KEY, \"sTest2\"),", "+            \"56:9: \" + getCheckMessage(MSG_KEY, \"mTest1\"),", "+            \"58:16: \" + getCheckMessage(MSG_KEY, \"mTest2\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec87e52470739c051f0a2bc931413317", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testText()         throws Exception", "signatureAfterChange": "      @Test     public void testText()         throws Exception", "diff": ["-            \"52:65: Empty catch block.\",", "-            \"72:52: Empty catch block.\",", "-            \"73:45: Empty catch block.\",", "-            \"75:13: Empty try block.\",", "-            \"77:17: Empty finally block.\",", "-            \"178:5: Empty INSTANCE_INIT block.\",", "+            \"52:65: \" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, \"catch\"),", "+            \"72:52: \" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, \"catch\"),", "+            \"73:45: \" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, \"catch\"),", "+            \"75:13: \" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, \"try\"),", "+            \"77:17: \" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, \"finally\"),", "+            \"178:5: \" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, \"INSTANCE_INIT\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbaa4e1548e65f7600bd1f7ea6d5bf77", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testModifiedControlVariable() throws Exception", "signatureAfterChange": "     @Test     public void testModifiedControlVariable() throws Exception", "diff": ["-            \"14:14: Control variable 'i' is modified.\",", "-            \"17:15: Control variable 'i' is modified.\",", "-            \"20:37: Control variable 'i' is modified.\",", "-            \"21:17: Control variable 'i' is modified.\",", "-            \"25:14: Control variable 'j' is modified.\",", "-            \"49:15: Control variable 's' is modified.\",", "+            \"14:14: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"17:15: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"20:37: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"21:17: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"25:14: \" + getCheckMessage(MSG_KEY, \"j\"),", "+            \"49:15: \" + getCheckMessage(MSG_KEY, \"s\"),"]}]}
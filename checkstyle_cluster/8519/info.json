{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4ea4c6136800503dc97cc77dff3c60a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02f74020bcd9f04077e84e0eba421b03", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void process(List<File> aFiles)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    /** {@inheritDoc} */", "-    public void process(List<File> aFiles)", "+    @Override", "+    protected void processFiltered(File aFile, List<String> aLines)", "-        final List<File> files = filter(aFiles);", "-        final MessageDispatcher dispatcher = getMessageDispatcher();", "-        for (final File file : files) {", "-            final String path = file.getPath();", "-            dispatcher.fireFileStarted(path);", "-            RandomAccessFile randomAccessFile = null;", "-            try {", "-                randomAccessFile = new RandomAccessFile(file, \"r\");", "-                if (!endsWithNewline(randomAccessFile)) {", "-                    log(0, \"noNewlineAtEOF\", path);", "-                }", "+        // Cannot use aLines as the line separators have been removed!", "+        RandomAccessFile randomAccessFile = null;", "+        try {", "+            randomAccessFile = new RandomAccessFile(aFile, \"r\");", "+            if (!endsWithNewline(randomAccessFile)) {", "+                log(0, \"noNewlineAtEOF\", aFile.getPath());", "-            catch (final IOException e) {", "-                ///CLOVER:OFF", "-                logIOException(e);", "-                ///CLOVER:ON", "-            }", "-            finally {", "-                Utils.closeQuietly(randomAccessFile);", "-            }", "-            fireErrors(path);", "-            dispatcher.fireFileFinished(path);", "+        }", "+        catch (final IOException e) {", "+            log(0, \"unable.open\", aFile.getPath());", "+        }", "+        finally {", "+            Utils.closeQuietly(randomAccessFile);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fb2961e1ce73a56d4a8762a2d81905e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void process(File aFile)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-     **/", "-    private void process(File aFile)", "+    @Override", "+    protected void processFiltered(File aFile, List<String> aLines)", "-            getMessageDispatcher().fireFileStarted(fileName);", "-            final String[] lines = Utils.getLines(fileName, getCharset());", "-            final FileContents contents = new FileContents(fileName, lines);", "+            final FileContents contents = new FileContents(fileName, aLines", "+                    .toArray(new String[aLines.size()]));", "-        }", "-        catch (final FileNotFoundException fnfe) {", "-            Utils.getExceptionLogger()", "-                .debug(\"FileNotFoundException occured.\", fnfe);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    0,", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.fileNotFound\",", "-                    null,", "-                    getId(),", "-                    this.getClass(), null));", "-        }", "-        catch (final IOException ioe) {", "-            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    0,", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.exception\",", "-                    new String[] {ioe.getMessage()},", "-                    getId(),", "-                    this.getClass(), null));", "-        else {", "-            fireErrors(fileName);", "-        }", "-", "-        getMessageDispatcher().fireFileFinished(fileName);"]}]}
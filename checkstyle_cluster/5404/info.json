{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e813c5b44ca420df165d79514967fe4", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "247703f240a516a3138103f793aebb79", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/filters/IntRangeFilterTest.java", "commitBeforeChange": "a9bfdceec2a2d86a622c03fbd4052f007b5e70cc", "commitAfterChange": "1e7d8eef0641edcf97316618c8fab40bd248133d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testDecide()", "signatureAfterChange": "     public void testDecide()", "diff": ["-        assertEquals(\"less than\", Filter.NEUTRAL, filter.decide(new Integer(-1)));", "-        assertEquals(\"in range\", Filter.ACCEPT, filter.decide(new Integer(0)));", "-        assertEquals(\"in range\", Filter.ACCEPT, filter.decide(new Integer(5)));", "-        assertEquals(\"in range\", Filter.ACCEPT, filter.decide(new Integer(10)));", "-        assertEquals(\"greater than\", Filter.NEUTRAL, filter.decide(new Integer(11)));", "+        assertFalse(\"less than\", filter.accept(new Integer(-1)));", "+        assertTrue(\"in range\", filter.accept(new Integer(0)));", "+        assertTrue(\"in range\", filter.accept(new Integer(5)));", "+        assertTrue(\"in range\", filter.accept(new Integer(10)));", "+        assertFalse(\"greater than\", filter.accept(new Integer(11)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf29c87437f53515bd34d9c40bc2f3e5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/filters/CSVFilterTest.java", "commitBeforeChange": "a9bfdceec2a2d86a622c03fbd4052f007b5e70cc", "commitAfterChange": "1e7d8eef0641edcf97316618c8fab40bd248133d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "          public void testDecideRange()", "signatureAfterChange": "          public void testDecideRange()", "diff": ["-        assertEquals(\"less than\", Filter.NEUTRAL, filter.decide(new Integer(-1)));", "-        assertEquals(\"equal 0\", Filter.ACCEPT, filter.decide(new Integer(0)));", "-        assertEquals(\"equal 1\", Filter.ACCEPT, filter.decide(new Integer(1)));", "-        assertEquals(\"equal 2\", Filter.ACCEPT, filter.decide(new Integer(2)));", "-        assertEquals(\"greater than\", Filter.NEUTRAL, filter.decide(new Integer(3)));", "+        assertFalse(\"less than\", filter.accept(new Integer(-1)));", "+        assertTrue(\"equal 0\", filter.accept(new Integer(0)));", "+        assertTrue(\"equal 1\", filter.accept(new Integer(1)));", "+        assertTrue(\"equal 2\", filter.accept(new Integer(2)));", "+        assertFalse(\"greater than\", filter.accept(new Integer(3)));"]}]}
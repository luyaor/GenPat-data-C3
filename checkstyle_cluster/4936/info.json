{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4694538d9dc0540f8fa626a2d7851b5f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0168e55c0d07a3367bff2f512d41e10c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MethodLengthCheck.java", "commitBeforeChange": "ce177456e7042b22b1842cb0309b6b285dc900d4", "commitAfterChange": "ba8a851e90352e893b7036bec5521b89ab1d37fd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (aAST.getType() != TokenTypes.METHOD_DEF) {", "-            return;", "-        }", "-", "-        DetailAST openingBrace = aAST.getLastChild();", "-        DetailAST closingBrace = openingBrace.getLastChild();", "-        int methodBodyStart = openingBrace.getLineNo();", "-        int methodBodyEnd = closingBrace.getLineNo();", "-        int length = methodBodyEnd - methodBodyStart + 1;", "-        if (length > mMax) {", "-            // TODO: This is old style but shouldn'r we use aAST.getLineNo() ?", "-            log(openingBrace.getLineNo(), \"maxLen.method\",", "-                    new Integer(length), new Integer(mMax));", "+        final DetailAST openingBrace = aAST.findFirstToken(TokenTypes.SLIST);", "+        if (openingBrace != null) {", "+            final DetailAST closingBrace =", "+                openingBrace.findFirstToken(TokenTypes.RCURLY);", "+            final int length =", "+                closingBrace.getLineNo() - openingBrace.getLineNo() + 1;", "+            if (length > mMax) {", "+                log(aAST.getLineNo(),", "+                    aAST.getColumnNo(),", "+                    \"maxLen.method\",", "+                    new Integer(length),", "+                    new Integer(mMax));", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3db10c4a2743c13cc9cae82cba3ab31", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java", "commitBeforeChange": "d471c9cd5437242b7d9e3f3c19409854fc74e50c", "commitAfterChange": "982b3963ca007c6101f69cf50c010f07292dab0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        // defend against users that change the token set in the config file.", "-        if (aAST.getType() != TokenTypes.SLIST) {", "-            return;", "-        }", "-", "-        // TODO: port BlockOption.TEXT", "-        if (aAST.getChildCount() == 0) {", "-            DetailAST parent = aAST.getParent();", "-            String parentText = parent.getText();", "-            if (mCheckFor.contains(parentText)) {", "-                // TODO: i18n", "-                log(aAST.getLineNo(), \"empty \" + parentText + \" block\");", "+        final DetailAST slistAST = aAST.findFirstToken(TokenTypes.SLIST);", "+        if (slistAST != null) {", "+            if (mOption == BlockOption.STMT) {", "+                if (slistAST.getChildCount() <= 1) {      ", "+                    log(slistAST.getLineNo(),", "+                        slistAST.getColumnNo(),", "+                        \"block.noStmt\",", "+                        aAST.getText());", "+                }   ", "+            }", "+            else if (mOption == BlockOption.TEXT) {", "+                if (!hasText(slistAST)) {", "+                        log(slistAST.getLineNo(),", "+                        slistAST.getColumnNo(),", "+                        \"block.empty\",", "+                        aAST.getText());", "+                }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad89465870854b1058b1cc5c46b4fe2b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java", "commitBeforeChange": "daf8230919a8ffc9058a7ce129f5c60309739a00", "commitAfterChange": "a0012d03eb6a7ebc42f1986f09a8fe698c09eeb0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        final DetailAST slistAST = aAST.findFirstToken(TokenTypes.SLIST);", "-        if (slistAST != null) {", "+        final DetailAST slistToken = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST leftCurly = slistToken != null", "+                ? slistToken : aAST.findFirstToken(TokenTypes.LCURLY);", "+        if (leftCurly != null) {", "-                if (slistAST.getChildCount() <= 1) {", "-                    log(slistAST.getLineNo(),", "-                        slistAST.getColumnNo(),", "+                boolean emptyBlock;", "+                if (leftCurly.getType() == TokenTypes.LCURLY) {", "+                    emptyBlock = leftCurly.getNextSibling().getType() != TokenTypes.CASE_GROUP;", "+                }", "+                else {", "+                    emptyBlock = leftCurly.getChildCount() <= 1;", "+                }", "+                if (emptyBlock) {", "+                    log(leftCurly.getLineNo(),", "+                        leftCurly.getColumnNo(),", "-                    && !hasText(slistAST))", "+                    && !hasText(leftCurly))", "-                log(slistAST.getLineNo(),", "-                    slistAST.getColumnNo(),", "+                log(leftCurly.getLineNo(),", "+                    leftCurly.getColumnNo(),"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ca15970b8fe8f6350bdee3ddad12e4f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f23650cdfcd05e6dc281d630cd01cca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "commitBeforeChange": "9f93c2258ef0512b743f5927be201ff55a9d5c57", "commitAfterChange": "23c8774d2e2fd245de1e5df02758fd23702c565e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public DefaultLogger(OutputStream infoStream,                          boolean closeInfoAfterUse,                          OutputStream errorStream,                          boolean closeErrorAfterUse) throws UnsupportedEncodingException", "signatureAfterChange": "     public DefaultLogger(OutputStream infoStream,                          boolean closeInfoAfterUse,                          OutputStream errorStream,                          boolean closeErrorAfterUse) throws UnsupportedEncodingException", "diff": ["-        errorWriter = infoStream == errorStream", "-            ? infoWriter", "-            : new PrintWriter(errorStreamWriter);", "+", "+        if (infoStream == errorStream) {", "+            errorWriter = infoWriter;", "+        }", "+        else {", "+            errorWriter = new PrintWriter(errorStreamWriter);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc6593dde96d26e3ef925b2df705ddba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "9f93c2258ef0512b743f5927be201ff55a9d5c57", "commitAfterChange": "23c8774d2e2fd245de1e5df02758fd23702c565e", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private static Scope calculateScope(final DetailAST ast)", "signatureAfterChange": "     private static Scope calculateScope(final DetailAST ast)", "diff": ["-        return ScopeUtils.inInterfaceOrAnnotationBlock(ast) ? Scope.PUBLIC", "-                : declaredScope;", "+", "+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {", "+            return Scope.PUBLIC;", "+        }", "+        else {", "+            return declaredScope;", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6ecffad9b67b6d0f3ebcaa5d64cc621", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21ba08b651c7fde258ba32ced9c45217", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "26d7dd555a9d64b0682e1fb08de7a181cdb97b12", "commitAfterChange": "43cdf3d62b35408cf11257af0c33c49a47c9daf9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isIgnoredSetterParam(DetailAST aAST, String aName)", "signatureAfterChange": "     private boolean isIgnoredSetterParam(DetailAST aAST, String aName)", "diff": ["-        if (!(aAST.getType() == TokenTypes.PARAMETER_DEF)", "+        if (aAST.getType() != TokenTypes.PARAMETER_DEF", "-        //property setter name?", "-        final String expectedName =", "-            \"set\" + aName.substring(0, 1).toUpperCase() + aName.substring(1);", "-        final DetailAST methodNameAST =", "-            methodAST.findFirstToken(TokenTypes.IDENT);", "-        final String methodName = methodNameAST.getText();", "-        if (!methodName.equals(expectedName)) {", "-            return false;", "-        }", "-        return typeAST.branchContains(TokenTypes.LITERAL_VOID);", "+        if (!typeAST.branchContains(TokenTypes.LITERAL_VOID)) {", "+            return false;", "+        }", "+", "+        //property setter name?", "+        final String methodName =", "+                methodAST.findFirstToken(TokenTypes.IDENT).getText();", "+        final String expectedName = \"set\" + capitalize(aName);", "+        return methodName.equals(expectedName);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cba789f5275a72186fa323bb33b674ae", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean isIgnoredParamOfAbstractMethod(DetailAST ast)", "signatureAfterChange": "     private boolean isIgnoredParamOfAbstractMethod(DetailAST ast)", "diff": ["-        if ((ast.getType() != TokenTypes.PARAMETER_DEF)", "-            || !ignoreAbstractMethods)", "+        boolean result = false;", "+        if ((ast.getType() == TokenTypes.PARAMETER_DEF)", "+            && ignoreAbstractMethods)", "-            return false;", "+            final DetailAST method = ast.getParent().getParent();", "+            if (method.getType() == TokenTypes.METHOD_DEF) {", "+                final DetailAST mods = method.findFirstToken(TokenTypes.MODIFIERS);", "+                result = ((mods != null) && mods.branchContains(TokenTypes.ABSTRACT));", "+            }", "-        final DetailAST method = ast.getParent().getParent();", "-        if (method.getType() != TokenTypes.METHOD_DEF) {", "-            return false;", "-        }", "-        final DetailAST mods = method.findFirstToken(TokenTypes.MODIFIERS);", "-        return ((mods != null) && mods.branchContains(TokenTypes.ABSTRACT));", "+        return result;"]}]}
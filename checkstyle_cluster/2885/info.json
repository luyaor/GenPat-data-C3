{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf97be8a170f60582c4435fbb508e636", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c5b5d344b8fb12f2aa8e1c76b380d8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheck.java", "commitBeforeChange": "3d8fc87ef60d4e96068658ed0485aafdb2a42691", "commitAfterChange": "e27489c7721909245ea5055eac3b9c7c659081f6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public RE getRegexp()", "signatureAfterChange": "     public Pattern getRegexp()", "diff": ["-    public RE getRegexp()", "+    public Pattern getRegexp()", "-        final RE regexp = super.getRegexp();", "+        Pattern regexp = super.getRegexp();", "-        // we caching RE and another check (or instance", "+        // we caching Pattern and another check (or instance", "-            regexp.setMatchFlags(RE.MATCH_CASEINDEPENDENT);", "-        }", "-        else {", "-            regexp.setMatchFlags(RE.MATCH_NORMAL);", "+            regexp =", "+                Pattern.compile(regexp.pattern(), Pattern.CASE_INSENSITIVE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dbbe78d6609c6c782b7990a3ad6fc70", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheck.java", "commitBeforeChange": "3d8fc87ef60d4e96068658ed0485aafdb2a42691", "commitAfterChange": "e27489c7721909245ea5055eac3b9c7c659081f6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean findNonCommentMatch(             String aLine, int aLineNumber, int aStartPosition)", "signatureAfterChange": "     private boolean findNonCommentMatch(             String aLine, int aLineNumber, int aStartPosition)", "diff": ["-        final RE regexp = getRegexp();", "-        final boolean foundMatch = regexp.match(aLine, aStartPosition);", "+        final Pattern pattern = getRegexp();", "+        final Matcher matcher = pattern.matcher(aLine);", "+        final boolean foundMatch = matcher.find(aStartPosition);", "-            final int startCol = regexp.getParenStart(0);", "-            final int endCol = regexp.getParenEnd(0);", "+            final int startCol = matcher.start(0);", "+            final int endCol = matcher.end(0);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94c9869a07c313506cc0e30d9e7abebb", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bcf68ba24e8a7df286b98e60d6d7ab2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "b9b72f969209ac4edb9c6b02aaf8e2f590d0b737", "commitAfterChange": "24ba45a971569b9702e6bf78c5c07c48beb25464", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private List getMethodTags(String[] aLines, int aLastLineNo)", "signatureAfterChange": "     private List getMethodTags(Comment aComment)", "diff": ["-     **/", "-    private List getMethodTags(String[] aLines, int aLastLineNo)", "+     */", "+    private List getMethodTags(Comment aComment)", "+        final String[] lines = aComment.getText();", "-        int currentLine = aLastLineNo - aLines.length;", "-        for (int i = 0; i < aLines.length; i++) {", "+        int currentLine = aComment.getFirstLineNo() - 1;", "+", "+        for (int i = 0; i < lines.length; i++) {", "-            if (MATCH_JAVADOC_ARG.match(aLines[i])) {", "+            if (MATCH_JAVADOC_ARG.match(lines[i])) {", "-            else if (MATCH_JAVADOC_NOARG.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_NOARG.match(lines[i])) {", "-            else if (MATCH_JAVADOC_NOARG_CURLY.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_NOARG_CURLY.match(lines[i])) {", "-            else if (MATCH_JAVADOC_ARG_MULTILINE_START.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_ARG_MULTILINE_START.match(lines[i])) {", "-                while (remIndex < aLines.length) {", "-                    if (MATCH_JAVADOC_MULTILINE_CONT.match(aLines[remIndex])) {", "-                        remIndex = aLines.length;", "+                while (remIndex < lines.length) {", "+                    if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {", "+                        remIndex = lines.length;", "-            else if (MATCH_JAVADOC_NOARG_MULTILINE_START.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_NOARG_MULTILINE_START.match(lines[i])) {", "-                while (remIndex < aLines.length) {", "-                    if (MATCH_JAVADOC_MULTILINE_CONT.match(aLines[remIndex])) {", "-                        remIndex = aLines.length;", "+                while (remIndex < lines.length) {", "+                    if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {", "+                        remIndex = lines.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92b18ea63d40fdb6a2b2e75fb63602c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private List getMethodTags(TextBlock aComment)", "signatureAfterChange": "     private List getMethodTags(TextBlock aComment)", "diff": ["-            Matcher javadocArgMatcher = MATCH_JAVADOC_ARG.matcher(lines[i]);", "-            Matcher javadocNoargMatcher = MATCH_JAVADOC_NOARG.matcher(lines[i]);", "-            Matcher noargCurlyMatcher = MATCH_JAVADOC_NOARG_CURLY", "-                    .matcher(lines[i]);", "-            Matcher argMultilineStart = MATCH_JAVADOC_ARG_MULTILINE_START", "-                    .matcher(lines[i]);", "-            Matcher noargMultilineStart = MATCH_JAVADOC_NOARG_MULTILINE_START", "-                    .matcher(lines[i]);", "+            final Matcher javadocArgMatcher =", "+                MATCH_JAVADOC_ARG.matcher(lines[i]);", "+            final Matcher javadocNoargMatcher =", "+                MATCH_JAVADOC_NOARG.matcher(lines[i]);", "+            final Matcher noargCurlyMatcher =", "+                MATCH_JAVADOC_NOARG_CURLY.matcher(lines[i]);", "+            final Matcher argMultilineStart =", "+                MATCH_JAVADOC_ARG_MULTILINE_START.matcher(lines[i]);", "+            final Matcher noargMultilineStart =", "+                MATCH_JAVADOC_NOARG_MULTILINE_START.matcher(lines[i]);", "+", "-                    Matcher multilineCont = MATCH_JAVADOC_MULTILINE_CONT", "+                    final Matcher multilineCont = MATCH_JAVADOC_MULTILINE_CONT", "-                        String lFin = multilineCont.group(1);", "+                        final String lFin = multilineCont.group(1);", "-                    Matcher multilineCont = MATCH_JAVADOC_MULTILINE_CONT", "+                    final Matcher multilineCont = MATCH_JAVADOC_MULTILINE_CONT", "-                        String lFin = multilineCont.group(1);", "+                        final String lFin = multilineCont.group(1);"]}]}
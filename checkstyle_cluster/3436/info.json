{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "540c3af98bd4736d9126cc8a8915b5e8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d5557712b45045d57fa2d9d4118092c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            processLiteralNew(aAST);", "+            processLiteralNew(ast);", "-            processPackageDef(aAST);", "+            processPackageDef(ast);", "-            processImport(aAST);", "+            processImport(ast);", "-            processClassDef(aAST);", "+            processClassDef(ast);", "-            throw new IllegalArgumentException(\"Unknown type \" + aAST);", "+            throw new IllegalArgumentException(\"Unknown type \" + ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f110c861c0c7d34bcb354670c79ad870", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void visitMethodDef(DetailAST aMethod)", "signatureAfterChange": "     private void visitMethodDef(DetailAST method)", "diff": ["-    private void visitMethodDef(DetailAST aMethod)", "+    private void visitMethodDef(DetailAST method)", "-        if (mClassDepth != 1) {", "+        if (classDepth != 1) {", "-            && checkName(aMethod)", "-            && checkModifiers(aMethod)", "-            && checkType(aMethod)", "-            && checkParams(aMethod))", "+            && checkName(method)", "+            && checkModifiers(method)", "+            && checkType(method)", "+            && checkParams(method))", "-            log(aMethod.getLineNo(), \"uncommented.main\");", "+            log(method.getLineNo(), \"uncommented.main\");"]}]}
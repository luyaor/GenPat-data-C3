{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29346dc2801b285a511bf62def7d352c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "608077d99d1bb35f4d7992c9738d12fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "474e266acdfd9320c999fd12df4e53293a9587b6", "commitAfterChange": "ff0a2c04796d958e40a75353b1aacfda9d44b39d", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "signatureAfterChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "diff": ["-        if (mConfig.isIgnoreWhitespace()) {", "-            return;", "-        }", "-", "-//        if (!aText.equals(mLines[aLineNo - 1].trim())", "-//            &&", "-//            (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "-//             .trim().length() == 0))", "-//        {", "-//            log(aLineNo, aColNo - 1,", "-//                \"'\" + aText + \"' should be on a new line.\");", "-//        }", "+        if (!mConfig.isIgnoreOpWrap()", "+            && !aText.equals(mLines[aLineNo - 1].trim())", "+            && (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "+                .trim().length() == 0))", "+        {", "+            log(aLineNo, aColNo - 1,", "+                \"'\" + aText + \"' should be on a new line.\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afa4d454798192b0cb0da55898488ee6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java", "commitBeforeChange": "1c5d01c3b48ab48fcfb0e7f3764e98d46727870e", "commitAfterChange": "e5d51331954f15890c08de2ae68f8791e7127180", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testAllCheckSections() throws Exception", "signatureAfterChange": "      @Test     public void testAllCheckSections() throws Exception", "diff": ["+            String lastSectioName = null;", "+                    Assert.assertNull(fileName + \" section '\" + sectionName + \"' should be first\",", "+                            lastSectioName);", "+                if (lastSectioName != null) {", "+                    Assert.assertTrue(", "+                            fileName + \" section '\" + sectionName", "+                                    + \"' is out of order compared to '\" + lastSectioName + \"'\",", "+                            sectionName.toLowerCase(Locale.ENGLISH).compareTo(", "+                                    lastSectioName.toLowerCase(Locale.ENGLISH)) >= 0);", "+                }", "+", "+                lastSectioName = sectionName;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9825ad5649d1566721082f7a30605f84", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02f96ebe0966be3fe53c9a38427cfc0d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java", "commitBeforeChange": "e7547bb7ddccec6737cea118a41864fc349ea1d2", "commitAfterChange": "d220d7c3cc74490c7f2923f2ea85d00133afe98c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testIsSubclassWithNulls() throws Exception", "signatureAfterChange": "      @Test     public void testIsSubclassWithNulls() throws Exception", "diff": ["-        Method isSublclass = check.getClass().getSuperclass()", "+        Method isSubclass = check.getClass().getSuperclass()", "-        isSublclass.setAccessible(true);", "-        assertFalse((boolean) isSublclass.invoke(check, null, null));", "+        isSubclass.setAccessible(true);", "+        assertFalse((boolean) isSubclass.invoke(check, null, null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3410a6fa3830bc8c217ddb432809b1f3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     static boolean areOnSameLine(DetailAST aAst1, DetailAST aAst2)", "signatureAfterChange": "     static boolean areOnSameLine(DetailAST ast1, DetailAST ast2)", "diff": ["-    static boolean areOnSameLine(DetailAST aAst1, DetailAST aAst2)", "+    static boolean areOnSameLine(DetailAST ast1, DetailAST ast2)", "-        return (aAst1 != null) && (aAst2 != null)", "-            && (aAst1.getLineNo() == aAst2.getLineNo());", "+        return (ast1 != null) && (ast2 != null)", "+            && (ast1.getLineNo() == ast2.getLineNo());"]}]}
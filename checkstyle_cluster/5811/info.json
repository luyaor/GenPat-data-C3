{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ba5de86863d0d0903f4e4e9c78d7c98", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "608077d99d1bb35f4d7992c9738d12fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "474e266acdfd9320c999fd12df4e53293a9587b6", "commitAfterChange": "ff0a2c04796d958e40a75353b1aacfda9d44b39d", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "signatureAfterChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "diff": ["-        if (mConfig.isIgnoreWhitespace()) {", "-            return;", "-        }", "-", "-//        if (!aText.equals(mLines[aLineNo - 1].trim())", "-//            &&", "-//            (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "-//             .trim().length() == 0))", "-//        {", "-//            log(aLineNo, aColNo - 1,", "-//                \"'\" + aText + \"' should be on a new line.\");", "-//        }", "+        if (!mConfig.isIgnoreOpWrap()", "+            && !aText.equals(mLines[aLineNo - 1].trim())", "+            && (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "+                .trim().length() == 0))", "+        {", "+            log(aLineNo, aColNo - 1,", "+                \"'\" + aText + \"' should be on a new line.\");", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cffa2f2b8b58d7f657b2c25a5fc968cc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "da940af3627944ad412904c15187627151e834e5", "commitAfterChange": "474e266acdfd9320c999fd12df4e53293a9587b6", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "signatureAfterChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "diff": ["-        if (!aText.equals(mLines[aLineNo - 1].trim())", "-            &&", "-            (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "-             .trim().length() == 0))", "-        {", "-            log(aLineNo, aColNo - 1,", "-                \"'\" + aText + \"' should be on a new line.\");", "-        }", "+//        if (!aText.equals(mLines[aLineNo - 1].trim())", "+//            &&", "+//            (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "+//             .trim().length() == 0))", "+//        {", "+//            log(aLineNo, aColNo - 1,", "+//                \"'\" + aText + \"' should be on a new line.\");", "+//        }"]}]}
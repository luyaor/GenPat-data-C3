{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30dbc9b28daa392b96597687f14c7a1b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "785ced785c2847ebb5d74af822f59cae", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "c3674faad8a38656e910750fb22a7eef714fb8a7", "commitAfterChange": "c3c1b9ae062635d0be858088ed2c1fcf366ec33f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public boolean accept(AuditEvent event)", "signatureAfterChange": "      @Override     public boolean accept(AuditEvent event)", "diff": ["-        if (event.getLocalizedMessage() == null) {", "-            // A special event", "-            return true;", "-        }", "+        boolean accepted = true;", "-        // Lazy update. If the first event for the current file, update file", "-        // contents and tag suppressions", "-        final FileContents currentContents = FileContentsHolder.getContents();", "-        if (currentContents == null) {", "-            // we have no contents, so we can not filter.", "-            return true;", "-        }", "-        if (getFileContents() != currentContents) {", "-            setFileContents(currentContents);", "-            tagSuppressions();", "-        }", "-        for (final Tag tag : tags) {", "-            if (tag.isMatch(event)) {", "-                return false;", "+        if (event.getLocalizedMessage() != null) {", "+            // Lazy update. If the first event for the current file, update file", "+            // contents and tag suppressions", "+            final FileContents currentContents = FileContentsHolder.getContents();", "+", "+            if (currentContents != null) {", "+                if (getFileContents() != currentContents) {", "+                    setFileContents(currentContents);", "+                    tagSuppressions();", "+                }", "+                if (matchTag(event)) {", "+                    accepted = false;", "+                }", "-        return true;", "+        return accepted;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce0bb0c45bbb72e1ede2661b90c392f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "94f9754acb5cc92a32bf36d2a789325fed384325", "commitAfterChange": "83f2b92b18eb10f3849b6a3be99a7b55b886cae0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isBooleanLiteralReturnStatement(AST ast)", "signatureAfterChange": "     private static boolean isBooleanLiteralReturnStatement(AST ast)", "diff": ["-        if (ast == null || ast.getType() != TokenTypes.LITERAL_RETURN) {", "-            return false;", "+        boolean booleanReturnStatement = false;", "+", "+        if (ast != null && ast.getType() == TokenTypes.LITERAL_RETURN) {", "+            final AST expr = ast.getFirstChild();", "+", "+            if (expr.getType() != TokenTypes.SEMI) {", "+                final AST value = expr.getFirstChild();", "+                booleanReturnStatement = isBooleanLiteralType(value.getType());", "+            }", "-", "-        final AST expr = ast.getFirstChild();", "-", "-        if (expr.getType() == TokenTypes.SEMI) {", "-            return false;", "-        }", "-", "-        final AST value = expr.getFirstChild();", "-        return isBooleanLiteralType(value.getType());", "+        return booleanReturnStatement;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2d98341f14674243ef502d60a7aab8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "7b26e83b92f03e6142af4c37f4308df275989d39", "commitAfterChange": "8da3b6dea4b446e055bb86b2bffb619008ee97b5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private static ParseTree getNextSibling(ParseTree node)", "signatureAfterChange": "     private static ParseTree getNextSibling(ParseTree node)", "diff": ["-        if (node.getParent() == null) {", "-            return null;", "-        }", "+        ParseTree nextSibling = null;", "-        final ParseTree parent = node.getParent();", "-        final int childCount = parent.getChildCount();", "+        if (node.getParent() != null) {", "+            final ParseTree parent = node.getParent();", "+            final int childCount = parent.getChildCount();", "-        int i = 0;", "-        while (true) {", "-            final ParseTree currentNode = parent.getChild(i);", "-            if (currentNode.equals(node)) {", "-                if (i == childCount - 1) {", "-                    return null;", "+            int i = 0;", "+            while (true) {", "+                final ParseTree currentNode = parent.getChild(i);", "+                if (currentNode.equals(node)) {", "+                    if (i != childCount - 1) {", "+                        nextSibling = parent.getChild(i + 1);", "+                    }", "+                    break;", "-                return parent.getChild(i + 1);", "+                i++;", "-            i++;", "+        return nextSibling;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6f7115cf765cc50e97672f286375ee4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "c3c1b9ae062635d0be858088ed2c1fcf366ec33f", "commitAfterChange": "e66c64585f4af36b70b1371a55a3b145ac9c0661", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public boolean accept(AuditEvent event)", "signatureAfterChange": "      @Override     public boolean accept(AuditEvent event)", "diff": ["-        if (event.getLocalizedMessage() == null) {", "-            // A special event", "-            return true;", "-        }", "+        boolean accepted = true;", "-        // Lazy update. If the first event for the current file, update file", "-        // contents and tag suppressions", "-        final FileContents currentContents = FileContentsHolder.getContents();", "-        if (currentContents == null) {", "-            // we have no contents, so we can not filter.", "-            return true;", "+        if (event.getLocalizedMessage() != null) {", "+            // Lazy update. If the first event for the current file, update file", "+            // contents and tag suppressions", "+            final FileContents currentContents = FileContentsHolder.getContents();", "+", "+            if (currentContents != null) {", "+                if (getFileContents() != currentContents) {", "+                    setFileContents(currentContents);", "+                    tagSuppressions();", "+                }", "+                final Tag matchTag = findNearestMatch(event);", "+                accepted = matchTag == null || matchTag.isOn();", "+            }", "-        if (getFileContents() != currentContents) {", "-            setFileContents(currentContents);", "-            tagSuppressions();", "-        }", "-        final Tag matchTag = findNearestMatch(event);", "-        return matchTag == null || matchTag.isOn();", "+        return accepted;"]}]}
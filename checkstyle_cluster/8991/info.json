{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54106493a5d0146abaf839cd5ba89762", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dee23aa186541785bd429568ca9e186", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/FileTabCharacterCheck.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r     public void process(final List<File> aFiles)", "signatureAfterChange": "\r \r     @Override\r     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    /** {@inheritDoc} */\r", "-    public void process(final List<File> aFiles)\r", "+\r", "+    @Override\r", "+    protected void processFiltered(File aFile, List<String> aLines)\r", "-        final MessageDispatcher msgDispatcher = getMessageDispatcher();\r", "-        for (final File file : aFiles) {\r", "-            final String path = file.getPath();\r", "-            msgDispatcher.fireFileStarted(path);\r", "-            LineNumberReader lnr = null;\r", "-            try {\r", "-                lnr = new LineNumberReader(new FileReader(file));\r", "-                while (true) {\r", "-                    final String line = lnr.readLine();\r", "-                    if (null == line) {\r", "-                        break;\r", "-                    }\r", "-                    final int tabPosition = line.indexOf('\\t');\r", "-                    if (tabPosition != -1) {\r", "-                        if (mEachLine) {\r", "-                            log(lnr.getLineNumber(), tabPosition + 1,\r", "-                                \"containsTab\");\r", "-                        }\r", "-                        else {\r", "-                            log(lnr.getLineNumber(), tabPosition + 1,\r", "-                                \"file.containsTab\");\r", "-                            break;\r", "-                        }\r", "-                    }\r", "+        int lineNum = 0;\r", "+        for (final String line : aLines) {\r", "+            lineNum++;\r", "+            final int tabPosition = line.indexOf('\\t');\r", "+            if (tabPosition != -1) {\r", "+                if (mEachLine) {\r", "+                    log(lineNum, tabPosition + 1, \"containsTab\");\r", "+                }\r", "+                else {\r", "+                    log(lineNum, tabPosition + 1, \"file.containsTab\");\r", "+                    break;\r", "-            catch (IOException ioe) {\r", "-                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);\r", "-                log(0, \"Unable to read file: \" + ioe);\r", "-            }\r", "-            finally {\r", "-                Utils.closeQuietly(lnr);\r", "-            }\r", "-            fireErrors(path);\r", "-            msgDispatcher.fireFileFinished(path);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fb2961e1ce73a56d4a8762a2d81905e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void process(File aFile)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-     **/", "-    private void process(File aFile)", "+    @Override", "+    protected void processFiltered(File aFile, List<String> aLines)", "-            getMessageDispatcher().fireFileStarted(fileName);", "-            final String[] lines = Utils.getLines(fileName, getCharset());", "-            final FileContents contents = new FileContents(fileName, lines);", "+            final FileContents contents = new FileContents(fileName, aLines", "+                    .toArray(new String[aLines.size()]));", "-        }", "-        catch (final FileNotFoundException fnfe) {", "-            Utils.getExceptionLogger()", "-                .debug(\"FileNotFoundException occured.\", fnfe);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    0,", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.fileNotFound\",", "-                    null,", "-                    getId(),", "-                    this.getClass(), null));", "-        }", "-        catch (final IOException ioe) {", "-            Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);", "-            getMessageCollector().add(", "-                new LocalizedMessage(", "-                    0,", "-                    Defn.CHECKSTYLE_BUNDLE,", "-                    \"general.exception\",", "-                    new String[] {ioe.getMessage()},", "-                    getId(),", "-                    this.getClass(), null));", "-        else {", "-            fireErrors(fileName);", "-        }", "-", "-        getMessageDispatcher().fireFileFinished(fileName);"]}]}
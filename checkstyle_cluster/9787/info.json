{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8033db9d98cdd08e0cea45c46541a4e0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5059e130fb0715184ad4bd43d95514d4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/NewHandler.java", "commitBeforeChange": "50559c68761e235f57e48cd2dc28928b417d7745", "commitAfterChange": "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void checkIndentation()", "signatureAfterChange": "     public void checkIndentation()", "diff": ["-        checkLParen();", "-        DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);", "+        DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);", "+        checkLParen(lparen);", "-        checkRParen();", "+        checkRParen(lparen, rparen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89ffcccb57f2fa3add1d8d066e3076c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "50559c68761e235f57e48cd2dc28928b417d7745", "commitAfterChange": "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void checkIndentation()", "signatureAfterChange": "     public void checkIndentation()", "diff": ["-        checkLParen();", "-        DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);", "+        DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);", "+        checkLParen(lparen);", "-        if (rparen.getLineNo() != lparen.getLineNo()) {", "-", "-            // if this method name is on the same line as a containing", "-            // method, don't indent, this allows expressions like:", "-            //    method(\"my str\" + method2(", "-            //        \"my str2\"));", "-            // as well as", "-            //    method(\"my str\" +", "-            //        method2(", "-            //            \"my str2\"));", "-            //", "-", "-            checkExpressionSubtree(", "-                getMainAst().findFirstToken(TokenTypes.ELIST),", "-                new IndentLevel(getLevel(), getBasicOffset()),", "-                false, true);", "-", "-            checkRParen();", "+        if (rparen.getLineNo() == lparen.getLineNo()) {", "+            return;", "+", "+        // if this method name is on the same line as a containing", "+        // method, don't indent, this allows expressions like:", "+        //    method(\"my str\" + method2(", "+        //        \"my str2\"));", "+        // as well as", "+        //    method(\"my str\" +", "+        //        method2(", "+        //            \"my str2\"));", "+        //", "+", "+        checkExpressionSubtree(", "+            getMainAst().findFirstToken(TokenTypes.ELIST),", "+            new IndentLevel(getLevel(), getBasicOffset()),", "+            false, true);", "+", "+        checkRParen(lparen, rparen);"]}]}
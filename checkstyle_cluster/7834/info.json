{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f789dc4d104debea82335191a004ab1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "447d2aedaf71372cc4592766333805d1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheckTest.java", "commitBeforeChange": "27149f3504a2f350b74f456a9bffbae76a460060", "commitAfterChange": "5ede09997c283b4c418f0f540848e006be04fa87", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @Test     public void testWithSumDefaultMsg() throws Exception", "signatureAfterChange": "      @Test     public void testWithSumDefaultMsg() throws Exception", "diff": ["-            \"22:32: Total count of 2 exceeds maximum count 1 under 'EQUAL'.\",", "-            \"22:50: Total count of 2 exceeds maximum count 1 under 'EQUAL'.\",", "-            \"23:33: Total count of 2 exceeds maximum count 1 under 'NOT_EQUAL'.\",", "-            \"23:51: Total count of 2 exceeds maximum count 1 under 'NOT_EQUAL'.\",", "+            \"22:32: \" + getCheckMessage(MSG_KEY_SUM_MAX, 2, 1, \"EQUAL\"),", "+            \"22:50: \" + getCheckMessage(MSG_KEY_SUM_MAX, 2, 1, \"EQUAL\"),", "+            \"23:33: \" + getCheckMessage(MSG_KEY_SUM_MAX, 2, 1, \"NOT_EQUAL\"),", "+            \"23:51: \" + getCheckMessage(MSG_KEY_SUM_MAX, 2, 1, \"NOT_EQUAL\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a47ae15ef15dbba1803640b81185aef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault() throws Exception", "signatureAfterChange": "     @Test     public void testDefault() throws Exception", "diff": ["-            \"28: Overload methods should not be split. Previous overloaded method located at line '17'.\",", "-            \"56: Overload methods should not be split. Previous overloaded method located at line '45'.\",", "-            \"68: Overload methods should not be split. Previous overloaded method located at line '66'.\",", "-            \"111: Overload methods should not be split. Previous overloaded method located at line '100'.\",", "+            \"28: \" + getCheckMessage(MSG_KEY, 17),", "+            \"56: \" + getCheckMessage(MSG_KEY, 45),", "+            \"68: \" + getCheckMessage(MSG_KEY, 66),", "+            \"111: \" + getCheckMessage(MSG_KEY, 100),"]}]}
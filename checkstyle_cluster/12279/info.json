{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab0dc439ec1f1c6fc9ce7f9288ab624c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4423272593027ab063b8e7694323382d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "4687b0b801bdcc50c763268e33eabd370ad8a85d", "commitAfterChange": "a29f01a95b9dee1e64ec7ed91b4d0876eb82c0bf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "signatureAfterChange": "      protected void verify(Configuration aConfig, boolean printSeveriy,                           String filename, String... expected) throws Exception", "diff": ["+    protected void verify(Configuration aConfig, boolean printSeveriy,", "+                          String filename, String... expected) throws Exception {", "+        verify(createChecker(aConfig, printSeveriy), filename, filename, expected);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3b5a451451dc046e0dfde877edc1f69", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "d6bdd7ee798c9c3b721483cae4efb8faa97c8f1c", "commitAfterChange": "561df9fc0c36be06c558049afad7467dbb0130ad", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode)", "signatureAfterChange": "     private DetailNode convertParseTreeToDetailNode(ParseTree parseTreeNode)", "diff": ["-        final JavadocNodeImpl rootJavadocNode = createJavadocNode(parseTreeNode, null, -1);", "-", "-        int childCount = parseTreeNode.getChildCount();", "-        JavadocNodeImpl[] children = new JavadocNodeImpl[childCount];", "-", "-        for (int i = 0; i < childCount; i++) {", "-            final JavadocNodeImpl child = createJavadocNode(parseTreeNode.getChild(i),", "-                    rootJavadocNode, i);", "-            children[i] = child;", "-        }", "-        rootJavadocNode.setChildren(children);", "+        final JavadocNodeImpl rootJavadocNode = createRootJavadocNode(parseTreeNode);", "-            children = (JavadocNodeImpl[]) currentJavadocParent.getChildren();", "-            childCount = children.length;", "+            final JavadocNodeImpl[] children =", "+                    (JavadocNodeImpl[]) currentJavadocParent.getChildren();", "-            for (int i = 0; i < childCount; i++) {", "-                final JavadocNodeImpl currentJavadocNode = children[i];", "-                final ParseTree currentParseTreeNodeChild = parseTreeParent.getChild(i);", "+            insertChildrenNodes(children, parseTreeParent);", "-                final JavadocNodeImpl[] subChildren =", "-                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];", "-", "-                for (int j = 0; j < subChildren.length; j++) {", "-                    final JavadocNodeImpl child =", "-                            createJavadocNode(currentParseTreeNodeChild.getChild(j),", "-                                    currentJavadocNode, j);", "-", "-                    subChildren[j] = child;", "-                }", "-                currentJavadocNode.setChildren(subChildren);", "-            }", "-", "-            if (childCount > 0) {", "+            if (children.length > 0) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cd1ca9e9a4704c8342301de154bd3e7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bef9a97cca6700ede4919f13380f24c8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "fb0f73fc9c382d9279d573bfc3779b872f795aac", "commitAfterChange": "f981e5845436464b45fc937e601f7fc9fdbc5a7c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean containsJavadocTag(final TextBlock javadoc)", "signatureAfterChange": "     private static boolean containsJavadocTag(final TextBlock javadoc)", "diff": ["-        if (javadoc == null) {", "-            return false;", "-        }", "+        boolean javadocTag = false;", "-        final String[] lines = javadoc.getText();", "+        if (javadoc != null) {", "+            final String[] lines = javadoc.getText();", "-        for (final String line : lines) {", "-            final Matcher matchInheritDoc =", "-                MATCH_INHERITDOC.matcher(line);", "+            for (final String line : lines) {", "+                final Matcher matchInheritDoc =", "+                    MATCH_INHERITDOC.matcher(line);", "-            if (matchInheritDoc.find()) {", "-                return true;", "+                if (matchInheritDoc.find()) {", "+                    javadocTag = true;", "+                    break;", "+                }", "-        return false;", "+        return javadocTag;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1e7ed5fbde1454ae46e0ae22e22b636", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java", "commitBeforeChange": "044889b26a868b1b7200526ceeb40cdbe1e903fc", "commitAfterChange": "adebc9da6f1c59de41426400149d2da0339e797e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean isExempt(String classOrStaticMember)", "signatureAfterChange": "     private boolean isExempt(String classOrStaticMember)", "diff": ["+        boolean exempt = false;", "+", "-                return true;", "+                exempt = true;", "+                break;", "-                        return true;", "+                        exempt = true;", "+                        break;", "-        return false;", "+        return exempt;"]}]}
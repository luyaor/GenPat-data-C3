{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "faf2387a9e827f27e82af20d4ab8e461", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33379be750df37d2569143349502d9be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "bd503e1576ded224169c1f15b9ca6cb8d08f9cb2", "commitAfterChange": "f2b01a44a216e88957eb6cb22e4b0e39429a6c84", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected AuditListener[] getListeners()         throws ClassNotFoundException, InstantiationException,         IllegalAccessException, IOException", "signatureAfterChange": "     protected AuditListener[] getListeners()         throws ClassNotFoundException, InstantiationException,         IllegalAccessException, IOException", "diff": ["-        final int listenerCount = Math.max(1, mFormatters.size());", "+        final int formatterCount = Math.max(1, mFormatters.size());", "+        final int listenerCount = mCustomListeners.size();", "-        final AuditListener[] listeners = new AuditListener[listenerCount];", "+        final AuditListener[] listeners =", "+            new AuditListener[formatterCount + listenerCount];", "+        // formatters", "-            return listeners;", "-", "-        for (int i = 0; i < listeners.length; i++) {", "-            final Formatter f = (Formatter) mFormatters.get(i);", "-            listeners[i] = f.createListener(this);", "+        else {", "+            for (int i = 0; i < formatterCount; i++) {", "+                final Formatter f = (Formatter) mFormatters.get(i);", "+                listeners[i] = f.createListener(this);", "+            }", "+        }", "+        //custom listeners", "+        for (int i = 0; i < listenerCount; i++) {", "+            final Listener listener = (Listener) mCustomListeners.get(i);", "+            listeners[formatterCount + i] = createCustomListener(listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3efd150fff6bf4a8bb6abd71a20a2c5e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java", "commitBeforeChange": "7c20c36cea276a2b9abb09e8b19eb5825e6a921a", "commitAfterChange": "262209477f39964a63103613f3e2c985da083371", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkBadComments(FileContents aContents)", "signatureAfterChange": "     private void checkBadComments(FileContents aContents)", "diff": ["-        final Map allComments = aContents.getCComments();", "-        final Iterator allIter = allComments.keySet().iterator();", "+        final Map<Integer, List<TextBlock>> allComments = aContents", "+                .getCComments();", "+        final Iterator<Integer> allIter = allComments.keySet().iterator();", "-            final Integer key = (Integer) allIter.next();", "-            final List lineComments = (List) allComments.get(key);", "-            final Iterator lineIter = lineComments.iterator();", "+            final Integer key = allIter.next();", "+            final List<TextBlock> lineComments = allComments.get(key);", "+            final Iterator<TextBlock> lineIter = lineComments.iterator();", "-                final String[] cmt = ((TextBlock) lineIter.next()).getText();", "+                final String[] cmt = (lineIter.next()).getText();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0f5f31ecc4618ea94371348e48e09f8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java", "commitBeforeChange": "7c20c36cea276a2b9abb09e8b19eb5825e6a921a", "commitAfterChange": "262209477f39964a63103613f3e2c985da083371", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "     @Override     public void beginTree(DetailAST aRootAST)", "diff": ["+    @Override", "-        final Map cppComments = getFileContents().getCppComments();", "-        final Map cComments = getFileContents().getCComments();", "-        final Set lines = new HashSet();", "+        final Map<Integer, TextBlock> cppComments = getFileContents()", "+                .getCppComments();", "+        final Map<Integer, List<TextBlock>> cComments = getFileContents()", "+                .getCComments();", "+        final Set<Integer> lines = new HashSet<Integer>();", "-        final Iterator linesIter = lines.iterator();", "+        final Iterator<Integer> linesIter = lines.iterator();", "-            final Integer lineNo = (Integer) linesIter.next();", "+            final Integer lineNo = linesIter.next();", "-                comment = (TextBlock) cppComments.get(lineNo);", "+                comment = cppComments.get(lineNo);", "-                final List commentList = (List) cComments.get(lineNo);", "-                comment = (TextBlock) commentList.get(commentList.size() - 1);", "+                final List<TextBlock> commentList = cComments.get(lineNo);", "+                comment = commentList.get(commentList.size() - 1);"]}]}
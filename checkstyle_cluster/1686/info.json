{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e88d6d26b3ec3dca8247a32c19cf0b8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "417ad5ded0acf1fd78333104105936ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "cdf3e56bacd3895262af8a1df9ca5c81f4071970", "commitAfterChange": "69a3d541b4888e5e0e6ab09aa675667155c65381", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static boolean isReference(String ent)", "signatureAfterChange": "     public static boolean isReference(String ent)", "diff": ["-        if (ent.charAt(0) != '&' || !CommonUtils.endsWithChar(ent, ';')) {", "-            return false;", "-        }", "+        boolean reference = false;", "-        if (ent.charAt(1) == '#') {", "+        if (ent.charAt(0) != '&' || !CommonUtils.endsWithChar(ent, ';')) {", "+            reference = false;", "+        }", "+        else if (ent.charAt(1) == '#') {", "-                return true;", "+                reference = true;", "-                return false;", "+                reference = false;", "-", "-        final String name = ent.substring(1, ent.length() - 1);", "-        for (String element : ENTITIES) {", "-            if (name.equals(element)) {", "-                return true;", "+        else {", "+            final String name = ent.substring(1, ent.length() - 1);", "+            for (String element : ENTITIES) {", "+                if (name.equals(element)) {", "+                    reference = true;", "+                    break;", "+                }", "-        return false;", "+        return reference;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e79847d86b6c688526a8e5ace13198d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java", "commitBeforeChange": "e3741d10267df217664f47fdf68169286e2d31bc", "commitAfterChange": "2554557c1c4dda6cb348ba053a60c17d8ada9f73", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean isAssignment(DetailAST aAST)", "signatureAfterChange": "     private static boolean isInContext(DetailAST aAST, int[][] aContextSet)", "diff": ["-    private boolean isAssignment(DetailAST aAST)", "-        // TODO: make actual tokens available to Check and loop over actual", "-        // tokens here?", "-        final int[] tokens = getDefaultTokens();", "-        for (int i = 0; i < tokens.length; i++) {", "-            final int tokenType = tokens[i];", "-            if (astType == tokenType) {", "-                return true;", "+     */", "+    private static boolean isInContext(DetailAST aAST, int[][] aContextSet)", "+    {", "+        for (int i = 0; i < aContextSet.length; i++) {", "+            DetailAST current = aAST;", "+            final int len = aContextSet[i].length;", "+            for (int j = 0; j < len; j++) {", "+                current = current.getParent();", "+                final int expectedType = aContextSet[i][j];", "+                if (current == null || current.getType() != expectedType) {", "+                    break;", "+                }", "+                if (j == len - 1) {", "+                    return true;", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c11f7ee432d65072cb7538c698e9fbce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "a3b229b5d8dcafc164007ac9d0a7f5b2599c0dd6", "commitAfterChange": "33ab409c4e5a4c5c29a5c19eb4b45f079f17d481", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private String checkImportStatements(String className)", "signatureAfterChange": "     private String checkImportStatements(String className)", "diff": ["-            final String importArg = importLineText.getText();", "+            String importArg = importLineText.getText();", "-                final String fqClass =", "-                    importArg.substring(0, importArg.length() - 1)", "-                    + className;", "-                // assume that illegalInstances only contain existing classes", "-                // or else we might create a false alarm here", "-                if (illegalClasses.contains(fqClass)) {", "-                    illegalType = fqClass;", "-                    break;", "-                }", "+                importArg = importArg.substring(0, importArg.length() - 1)", "+                        + className;", "-            else {", "-                if (CommonUtils.baseClassName(importArg).equals(className)", "+            if (CommonUtils.baseClassName(importArg).equals(className)", "-                    illegalType = importArg;", "-                    break;", "-                }", "+                illegalType = importArg;", "+                break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb0cbf4033e7b532995027c501233477", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "eaad55fdba73e17e103dc6600867f26fd6a3896b", "commitAfterChange": "5cf355fad4b8bc613962aac2f52b48d5726f2acc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public boolean isReference(String aEnt)", "signatureAfterChange": "     public boolean isReference(String aEnt)", "diff": ["+            int prefixLength = 2; // \"&#\"", "+            int radix = BASE_10;", "-                try {", "-                    Integer.parseInt(aEnt.substring(3, aEnt.length() - 1), 16);", "-                    return true;", "-                }", "-                catch (NumberFormatException nfe) {", "-                    return false;", "-                }", "+                prefixLength++;", "+                radix = BASE_16;", "-            else {", "-                try {", "-                    Integer.parseInt(aEnt.substring(2, aEnt.length() - 1));", "-                    return true;", "-                }", "-                catch (NumberFormatException nfe) {", "-                    return false;", "-                }", "+            try {", "+                Integer.parseInt(", "+                    aEnt.substring(prefixLength, aEnt.length() - 1), radix);", "+                return true;", "+            }", "+            catch (NumberFormatException nfe) {", "+                return false;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d3fb58246c649a349dc6fdcbdf4436b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "437e7ad139efbc6a06ecd657a634e7ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java", "commitBeforeChange": "ec6582beb1c026f1c3a9477d318d723e1caacb4a", "commitAfterChange": "679f818267161d9501a73ffdcc0d991537233633", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private float parseFloat(String aText, int aType)", "signatureAfterChange": "     private float parseFloat(String aText, int aType)", "diff": ["-        if (aType == TokenTypes.NUM_FLOAT) {", "-            result = Float.parseFloat(aText);", "-        }", "-        if (aType == TokenTypes.NUM_DOUBLE) {", "+        switch (aType) {", "+        case TokenTypes.NUM_FLOAT:", "+        case TokenTypes.NUM_DOUBLE:", "-        }", "-        else {", "+            break;", "+        case TokenTypes.NUM_INT:", "+        case TokenTypes.NUM_LONG:", "-            if (aType == TokenTypes.NUM_INT) {", "-                if (aText.length() > 0) {", "-                    result = (float) Integer.parseInt(aText, radix);", "-                }", "+            // Long.parseLong requires that the text ends with neither 'L'", "+            // nor 'l'.", "+            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {", "+                aText = aText.substring(0, aText.length() - 1);", "-            else if (aType == TokenTypes.NUM_LONG) {", "-                // Long.parseLong requires that the text ends with neither 'L'", "-                // nor 'l'.", "-                if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {", "-                    aText = aText.substring(0, aText.length() - 1);", "-                }", "-                if (aText.length() > 0) {", "-                    result = (float) Long.parseLong(aText, radix);", "-                }", "+            if (aText.length() > 0) {", "+                result = (float) Long.parseLong(aText, radix);", "+            break;", "+        default:", "+            break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a1d1b60efda8db8bb24fe1e83655a90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "6e96026ec6d95fc5eadd3044cab91c24c73c8e0c", "commitAfterChange": "e00c478dd61d9d883e41b500b780ab217582c2e7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static double parseDouble(String aText, int aType)", "signatureAfterChange": "     public static double parseDouble(String aText, int aType)", "diff": ["+        String txt = aText;", "-            result = Double.parseDouble(aText);", "+            result = Double.parseDouble(txt);", "-            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {", "+            if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {", "-                aText = aText.substring(2);", "+                txt = txt.substring(2);", "-            else if (aText.charAt(0) == '0') {", "+            else if (txt.charAt(0) == '0') {", "-                aText = aText.substring(1);", "+                txt = txt.substring(1);", "-            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {", "-                aText = aText.substring(0, aText.length() - 1);", "+            if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {", "+                txt = txt.substring(0, txt.length() - 1);", "-            if (aText.length() > 0) {", "+            if (txt.length() > 0) {", "-                    result = parseInt(aText, radix);", "+                    result = parseInt(txt, radix);", "-                    result = parseLong(aText, radix);", "+                    result = parseLong(txt, radix);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6aaee9aef077b7be14acdcfa57b80bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java", "commitBeforeChange": "d5a6a78a590fa688a4405d80adb81e067e997b14", "commitAfterChange": "9df0df10bf2b1cd0613967ab85fbdcf02b94ef0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean inIgnoreList(DetailAST aAST)", "signatureAfterChange": "     private boolean inIgnoreList(DetailAST aAST)", "diff": ["-      float value = 0; //value of aAST", "-      switch (aAST.getType()) {", "-          case TokenTypes.NUM_DOUBLE :", "-              value = (float) Double.parseDouble(aAST.getText());", "-              break;", "-          case TokenTypes.NUM_FLOAT :", "-              value = Float.parseFloat(aAST.getText());", "-              break;", "-          case TokenTypes.NUM_INT :", "-              value = Integer.parseInt(aAST.getText());", "-              break;", "-          case TokenTypes.NUM_LONG :", "-              // Long.parseLong requires that the text ends with neither 'L'", "-              // nor 'l'.", "-              String text = aAST.getText();", "-              if ((text.endsWith(\"L\")) || (text.endsWith(\"l\"))) {", "-                  text = text.substring(0, text.length() - 1); ", "-              }", "-              value = Long.parseLong(text);", "-              break;", "-          default :", "-              break;", "-      }", "-      return (Arrays.binarySearch(mIgnoreNumbers, value) >= 0);", "+        final float value = parseFloat(aAST.getText(), aAST.getType());", "+        return (Arrays.binarySearch(mIgnoreNumbers, value) >= 0);", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "648636e64e41fdc4594961223db3242c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4070dbf90d90adc942ca0a1030387a53", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "commitBeforeChange": "d740f2e1cdb05f20a48bf7d5dcebdcd0faae6ddd", "commitAfterChange": "3ef918920c58c550169ccef3cfe1706aede11a6e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private AuditListener[] getListeners() throws IOException", "signatureAfterChange": "     private AuditListener[] getListeners()", "diff": ["-    private AuditListener[] getListeners() throws IOException {", "+    private AuditListener[] getListeners() {", "-        if (formatters.isEmpty()) {", "-            final OutputStream debug = new LogOutputStream(this,", "-                    Project.MSG_DEBUG);", "-            final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);", "-            listeners[0] = new DefaultLogger(debug, true, err, true);", "-        }", "-        else {", "-            for (int i = 0; i < formatterCount; i++) {", "-                final Formatter formatter = formatters.get(i);", "-                listeners[i] = formatter.createListener(this);", "+        try {", "+            if (formatters.isEmpty()) {", "+                final OutputStream debug = new LogOutputStream(this, Project.MSG_DEBUG);", "+                final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);", "+                listeners[0] = new DefaultLogger(debug, true, err, true);", "+            else {", "+                for (int i = 0; i < formatterCount; i++) {", "+                    final Formatter formatter = formatters.get(i);", "+                    listeners[i] = formatter.createListener(this);", "+                }", "+            }", "+        }", "+        catch (IOException e) {", "+            throw new BuildException(String.format(\"Unable to create listeners: \"", "+                    + \"formatters {%s}.\", formatters), e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "675936c7c54039763580b4215b176858", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "d6272b70eb5ad61fd8ab34091e970c50b1f67386", "commitAfterChange": "1a2c318e22a0b2b22ccc76019217c0892fe2d59b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static Checker createChecker(Configuration config,             AuditListener auditListener)             throws CheckstyleException", "signatureAfterChange": "     private static int runCheckstyle(CliOptions cliOptions)             throws CheckstyleException, UnsupportedEncodingException, FileNotFoundException", "diff": ["+    private static int runCheckstyle(CliOptions cliOptions)", "+            throws CheckstyleException, UnsupportedEncodingException, FileNotFoundException", "+                cliOptions.propertiesLocation != null", "+                        ? loadProperties(new File(cliOptions.propertiesLocation))", "+        // create a configuration", "+        final Configuration config = ConfigurationLoader.loadConfiguration(", "+                cliOptions.configLocation, new PropertiesExpander(props));", "+        // create a listener for output", "+        final AuditListener listener = createListener(cliOptions.format, cliOptions.outputLocation);", "-     */", "-    private static Checker createChecker(Configuration config,", "-            AuditListener auditListener)", "-            throws CheckstyleException", "-    {", "+        // create Checker object and run it", "+        int errorCounter = 0;", "-        final ClassLoader moduleClassLoader = Checker.class.getClassLoader();", "-        checker.setModuleClassLoader(moduleClassLoader);", "-        checker.configure(config);", "-        checker.addListener(auditListener);", "+        try {", "-        return checker;", "+            final ClassLoader moduleClassLoader = Checker.class.getClassLoader();", "+            checker.setModuleClassLoader(moduleClassLoader);", "+            checker.configure(config);", "+            checker.addListener(listener);", "+", "+            // run Checker", "+            errorCounter = checker.process(cliOptions.files);", "+", "+        }", "+        finally {", "+            checker.destroy();", "+        }", "+", "+        return errorCounter;"]}]}
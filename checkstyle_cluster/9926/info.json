{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64872547c5d678c1aa6975a0b7b6954b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "346b5cb558fc8ebdc3c902a2f50898f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "54a09706ec1db32435b09e6b6910813325558f8d", "commitAfterChange": "abff1a2489ea8af10e1bc0a335551262d22f44e7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public Checker(GlobalProperties aConfig, CheckConfiguration[] aConfigs)         throws CheckstyleException", "signatureAfterChange": "     public Checker(GlobalProperties aConfig, CheckConfiguration[] aConfigs)         throws CheckstyleException", "diff": ["-        mCache = new PropertyCacheFile(aConfig);", "-        mWalker = new TreeWalker(mMessages, mConfig.getTabWidth());", "+", "+        // TODO: create, configure and register the FileSetChecks from config", "+        // file instead of hardcoding it here in the Checker constructor.", "+        // Probably the addFileSetCheck mthod must be called from outside", "+        // the checker, just like the TreeWalker is not concerned with", "+        // finding all the checks it has to execute (IOC principle).", "+", "+        // TODO: uncommenting the addFileSetCheck calls breaks the tests", "+        // because the packageHtml check is always executed and yields", "+        // additional errors that are not expected in the current test code", "+        // (which should stay like it currently is!)", "+", "+        FileSetCheck translationCheck = new TranslationCheck();", "+        // addFileSetCheck(translationCheck);", "+", "+        FileSetCheck packageHtmlCheck = new PackageHtmlCheck();", "+        // addFileSetCheck(packageHtmlCheck);", "+", "+        TreeWalker mWalker = new TreeWalker(mConfig);", "+        addFileSetCheck(mWalker);", "+", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f585ad92936d814c13dcbc5d0d805ab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "65ca7775ba7d0b649c16cfdc8a1447f41867c870", "commitAfterChange": "6ffc8dd26075456b055ffcd35d3915c23049bfbb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public Checker(GlobalProperties aConfig, CheckConfiguration[] aConfigs)         throws CheckstyleException", "signatureAfterChange": "      private ClassLoader getClassLoader()", "diff": ["-    public Checker(GlobalProperties aConfig, CheckConfiguration[] aConfigs)", "-        mConfig = aConfig;", "-        LocalizedMessage.setLocale(new Locale(mConfig.getLocaleLanguage(),", "-                                              mConfig.getLocaleCountry()));", "-", "-        // TODO: create, configure and register the FileSetChecks from config", "-        // file instead of hardcoding it here in the Checker constructor.", "-        // Probably the addFileSetCheck mthod must be called from outside", "-        // the checker, just like the TreeWalker is not concerned with", "-        // finding all the checks it has to execute (IOC principle).", "-", "-        // TODO: uncommenting the addFileSetCheck calls breaks the tests", "-        // because the packageHtml check is always executed and yields", "-        // additional errors that are not expected in the current test code", "-        // (which should stay like it currently is!)", "-", "-        //FileSetCheck translationCheck = new TranslationCheck();", "-        // addFileSetCheck(translationCheck);", "-", "-        //FileSetCheck packageHtmlCheck = new PackageHtmlCheck();", "-        // addFileSetCheck(packageHtmlCheck);", "-", "-        final TreeWalker walker = new TreeWalker(mConfig);", "-        // TODO: improve the error handing", "-        for (int i = 0; i < aConfigs.length; i++) {", "-            final CheckConfiguration config = aConfigs[i];", "-            // IMPORTANT! Need to use the same class loader that created this", "-            // class. Otherwise can get ClassCastException problems.", "-            walker.registerCheck(", "-                config.createInstance(this.getClass().getClassLoader()),", "-                config);", "-        }", "-        addFileSetCheck(walker);", "-", "+", "+    private ClassLoader getClassLoader()", "+    {", "+        return mLoader;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "418af5affd9b439693609e1b7e3e6a5c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43d19e6456b283b51a1b81931535abba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Override     protected void verify(Checker aC,                           File[] aProcessedFiles,                           String aMessageFileName,                           String[] aExpected)         throws Exception", "signatureAfterChange": "      @Override     protected void verify(Checker c,                           File[] processedFiles,                           String messageFileName,                           String[] expected)         throws Exception", "diff": ["-    protected void verify(Checker aC,", "-                          File[] aProcessedFiles,", "-                          String aMessageFileName,", "-                          String[] aExpected)", "+    protected void verify(Checker c,", "+                          File[] processedFiles,", "+                          String messageFileName,", "+                          String[] expected)", "-        mStream.flush();", "+        stream.flush();", "-        Collections.addAll(theFiles, aProcessedFiles);", "-        final int errs = aC.process(theFiles);", "+        Collections.addAll(theFiles, processedFiles);", "+        final int errs = c.process(theFiles);", "-            new ByteArrayInputStream(mBAOS.toByteArray());", "+            new ByteArrayInputStream(BAOS.toByteArray());", "-        for (int i = 0; i < aExpected.length; i++) {", "-            final String expected = aMessageFileName + \":\" + aExpected[i];", "+        for (int i = 0; i < expected.length; i++) {", "+            final String expectedResult = messageFileName + \":\" + expected[i];", "-            assertEquals(\"error message \" + i, expected, actual);", "+            assertEquals(\"error message \" + i, expectedResult, actual);", "-                   aExpected.length >= errs);", "+                   expected.length >= errs);", "-        aC.destroy();", "+        c.destroy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa570899b358450ad62632820d819ed7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "41044d42b8f21ae00792f101a63101bf87d7fd61", "commitAfterChange": "7a4ec11d123dc0bbf7db943af715d19814d2e332", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "      void verify(Checker aC,             File[] aProcessedFiles,             String aMessageFileName,             String[] aExpected,             Integer... aWarnsExpected)         throws Exception", "signatureAfterChange": "      protected void verify(Checker checker,             File[] processedFiles,             String messageFileName,             String[] expected,             Integer... warnsExpected)         throws Exception", "diff": ["-", "-    void verify(Checker aC,", "-            File[] aProcessedFiles,", "-            String aMessageFileName,", "-            String[] aExpected,", "-            Integer... aWarnsExpected)", "+    protected void verify(Checker checker,", "+            File[] processedFiles,", "+            String messageFileName,", "+            String[] expected,", "+            Integer... warnsExpected)", "-        Collections.addAll(theFiles, aProcessedFiles);", "-        final int errs = aC.process(theFiles);", "+        Collections.addAll(theFiles, processedFiles);", "+        final List<Integer> theWarnings = Lists.newArrayList();", "+        Collections.addAll(theWarnings, warnsExpected);", "+        final int errs = checker.process(theFiles);", "-        final ByteArrayInputStream localStream =", "-            new ByteArrayInputStream(stream.toByteArray());", "+        final ByteArrayInputStream inputStream =", "+                new ByteArrayInputStream(stream.toByteArray());", "-                new InputStreamReader(localStream, StandardCharsets.UTF_8))) {", "+                new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {", "-            for (int i = 0; i < aExpected.length; i++) {", "-                final String expected = aMessageFileName + \":\" + aExpected[i];", "+            for (int i = 0; i < expected.length; i++) {", "+                final String expectedResult = messageFileName + \":\" + expected[i];", "-                assertEquals(\"error message \" + i, expected, actual);", "+                assertEquals(\"error message \" + i, expectedResult, actual);", "+", "-                Integer integer = 0;", "-                if (Arrays.asList(aWarnsExpected).contains(lineNumber)) {", "-                    integer = lineNumber;", "-                }", "-                assertEquals(\"error message \" + i, (long) integer, lineNumber);", "+                assertNotNull(\"expected input file to have warning comment on line number \"", "+                        + lineNumber, theWarnings.remove((Integer) lineNumber));", "-                    aExpected.length, errs);", "+                    expected.length, errs);", "+            assertTrue(\"unexpected warnings \" + theWarnings, theWarnings.size() == 0);", "-        aC.destroy();", "+", "+        checker.destroy();"]}]}
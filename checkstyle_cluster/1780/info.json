{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2aee2817bb58b063c992f34341228866", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e1cd156aaf956451afa51215ed0eb3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "ddd153f70798bcf1e33629e98407db8f9dbe0dcc", "commitAfterChange": "adce874628730a881c533bb04db2688d03a60fc6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static Configuration loadConfiguration(         String aConfig, PropertyResolver aOverridePropsResolver)         throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(String aConfig,             PropertyResolver aOverridePropsResolver) throws CheckstyleException", "diff": ["+    public static Configuration loadConfiguration(String aConfig,", "+            PropertyResolver aOverridePropsResolver) throws CheckstyleException", "+    {", "+        return loadConfiguration(aConfig, aOverridePropsResolver, false);", "+    }", "-        String aConfig, PropertyResolver aOverridePropsResolver)", "-                new ConfigurationLoader(aOverridePropsResolver);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "441b7b131a0a33debf11a55ed3795e8e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "83092cdaaaf4190bb1160537a09b5abe8f813f6f", "commitAfterChange": "d9ef0ac5eed2084dc0298ec981f6fc04cf628e85", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static Configuration loadConfiguration(         String aConfig,         PropertyResolver aOverridePropsResolver,         boolean aOmitIgnoredModules)         throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(String aConfig,         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)         throws CheckstyleException", "diff": ["-    public static Configuration loadConfiguration(", "-        String aConfig,", "-        PropertyResolver aOverridePropsResolver,", "-        boolean aOmitIgnoredModules)", "+    public static Configuration loadConfiguration(String aConfig,", "+        PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)", "+        InputStream bufferedStream = null;", "-            final ConfigurationLoader loader =", "-                new ConfigurationLoader(aOverridePropsResolver,", "-                                        aOmitIgnoredModules);", "-            final InputStream bufferedStream =", "-                new BufferedInputStream(configStream);", "-            loader.parseInputStream(bufferedStream);", "-            bufferedStream.close();", "-            return loader.getConfiguration();", "+            bufferedStream = new BufferedInputStream(configStream);", "+", "+            return loadConfiguration(bufferedStream, aOverridePropsResolver,", "+                    aOmitIgnoredModules);", "-            throw new CheckstyleException(", "-                \"unable to find \" + aConfig, e);", "-        }", "-        catch (ParserConfigurationException e) {", "-            throw new CheckstyleException(", "-                \"unable to parse \" + aConfig, e);", "-        }", "-        catch (SAXParseException e) {", "-            throw new CheckstyleException(\"unable to parse \"", "-                    + aConfig + \" - \" + e.getMessage() + \":\" + e.getLineNumber()", "-                    + \":\" + e.getColumnNumber(), e);", "-        }", "-        catch (SAXException e) {", "-            throw new CheckstyleException(\"unable to parse \"", "-                    + aConfig + \" - \" + e.getMessage(), e);", "+            throw new CheckstyleException(\"unable to find \" + aConfig, e);", "+        catch (CheckstyleException e) {", "+                //wrap again to add file name info", "+            throw new CheckstyleException(\"unable to read \" + aConfig + \" - \"", "+                    + e.getMessage(), e);", "+        }", "+        finally {", "+            if (bufferedStream != null) {", "+                try {", "+                    bufferedStream.close();", "+                }", "+                catch (IOException e) {", "+                    // cannot throw another exception.", "+                    ;", "+                }", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ceaa6dcd5530c0a57dde4a875895c16", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "e2329c7a98dadb9e2717aae92216964a6ab40329", "commitAfterChange": "073d09569f471061fd82899efac4f823269dd265", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public static Configuration loadConfiguration(InputStream aConfigStream,         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)         throws CheckstyleException", "signatureAfterChange": "     @Deprecated     public static Configuration loadConfiguration(InputStream aConfigStream,         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)         throws CheckstyleException", "diff": ["+    @Deprecated", "+        PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)", "+        throws CheckstyleException", "+    {", "+        return loadConfiguration(new InputSource(aConfigStream),", "+                                 aOverridePropsResolver, aOmitIgnoredModules);", "+    }", "-            loader.parseInputStream(aConfigStream);"]}]}
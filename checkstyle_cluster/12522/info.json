{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee73632f38ec5cb18cc66328631ae1d8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bba740fa92984b5dda860d1cfa610ef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/Resolver.java", "commitBeforeChange": "b0bed9351186a8d190d0ae26bbaca4be616c193b", "commitAfterChange": "4ba49828aca981a9e533acfa4f34d016612c42f1", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private IClass resolveTypecast(         SymTabAST node,         Scope location,         IClass context,         boolean referencePhase)", "signatureAfterChange": "      private IClass resolveTypecast(         SymTabAST node,         Scope location,         IClass context,         boolean referencePhase)", "diff": ["+        // TODO: Checkstyle change.", "+        // Do not create references from typecast.", "+        // Original transmogrify code is equivalent to", "+        // final boolean createReference = referencePhase;", "+        // which creates non-existant references for variables.", "+        final boolean createReference = false;", "-                        referencePhase));", "+                        createReference));", "-            type = resolveType(typeNode, location, context, referencePhase);", "+            type = resolveType(typeNode, location, context, createReference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cb150276d3b4c9c682d97a4ac503201", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/Resolver.java", "commitBeforeChange": "b0bed9351186a8d190d0ae26bbaca4be616c193b", "commitAfterChange": "4ba49828aca981a9e533acfa4f34d016612c42f1", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     public IClass resolveType(         SymTabAST expr,         Scope location,         IClass context,         boolean referencePhase)", "signatureAfterChange": "     public IClass resolveType(         SymTabAST expr,         Scope location,         IClass context,         boolean referencePhase)", "diff": ["+        // TODO: Checkstyle change.", "+        // Do not create references from typecast.", "+        // Original transmogrify code is equivalent to", "+        // final boolean createReference = referencePhase;", "+        // which creates non-existant references for variables.", "+        final boolean createReference = false;", "-                resolveDottedName(nameNode, location, context, referencePhase);", "+                resolveDottedName(nameNode, location, context, createReference);", "-                resolveClassIdent(nameNode, location, context, referencePhase);", "+                resolveClassIdent(nameNode, location, context, createReference);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f64df09fee667d559ca800b8a278fa1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "commitAfterChange": "289ef67e9e9ee424723b8aa22ae7a6d31f126d23", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "signatureAfterChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "diff": ["-        // calculate the previous line length without trailing whitespace. Need", "-        // to handle the case where there is no previous line, cause the line", "-        // being check is the first line in the file.", "-        final int prevLineLen = brace.getLineNo() == 1", "-            ? maxLineLength", "-            : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));", "-", "-                validateEol(brace, braceLine, prevLineLen);", "+                validateEol(brace, braceLine);", "-                validateNewLinePosion(brace, startToken, braceLine, prevLineLen);", "+                validateNewLinePosion(brace, startToken, braceLine);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e31dcd9a7461cace1495030d98ed968", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ccd368b728ea5438761c9e4e3e312fa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     void verifyNoWSAfter(MyCommonAST aAST);", "signatureAfterChange": "     void verifyNoWSAfter(MyCommonAST aAST)", "diff": ["-    void verifyNoWSAfter(MyCommonAST aAST);", "+    void verifyNoWSAfter(MyCommonAST aAST)", "+    {", "+        if (mConfig.isIgnoreWhitespace()) {", "+            return;", "+        }", "+", "+        final String line = mLines[aAST.getLineNo() - 1];", "+        final int after = aAST.getColumnNo() + aAST.getText().length();", "+        if ((after >= line.length()) ||", "+            Character.isWhitespace(line.charAt(after)))", "+        {", "+            log(aAST.getLineNo(),", "+                \"'\" + aAST.getText() + \"' is proceeded with whitespace.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29d6fa50049e539e6c26fc35df849ded", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/StringArrayReaderTest.java", "commitBeforeChange": "fb97056b9b58f7b33c53348da592c2896b72e575", "commitAfterChange": "d471c9cd5437242b7d9e3f3c19409854fc74e50c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testMisc()", "signatureAfterChange": "      public void testLineBreakSingleChar()", "diff": ["-    public void testMisc()", "+", "+    public void testLineBreakSingleChar()", "+    {", "+        final StringArrayReader o = new StringArrayReader(new String[] {\"a\", \"bc\"});", "+        try {", "+            int a = o.read();", "+            assertEquals('a', a);", "+            int nl1 = o.read();", "+            assertEquals('\\n', nl1);", "+            int b = o.read();", "+            assertEquals('b', b);", "+            int c = o.read();", "+            assertEquals('c', c);", "+            int nl2 = o.read();", "+            assertEquals('\\n', nl2);", "+            int eof = o.read();", "+            assertEquals(-1, eof);", "+        }", "+        catch (IOException ex) {", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50522cbbeb1dfbfb8532fe69abe3ef0d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     void verifyWSAroundBegin(int aLineNo, int aColNo, String aText);", "signatureAfterChange": "     void verifyWSAroundBegin(int aLineNo, int aColNo, String aText)", "diff": ["-    void verifyWSAroundBegin(int aLineNo, int aColNo, String aText);", "+    void verifyWSAroundBegin(int aLineNo, int aColNo, String aText)", "+    {", "+        if (mConfig.isIgnoreWhitespace()) {", "+            return;", "+        }", "+", "+        final String line = mLines[aLineNo - 1];", "+        final int before = aColNo - 2;", "+        final int after = aColNo + aText.length() - 1;", "+", "+        if ((before >= 0) && !Character.isWhitespace(line.charAt(before))) {", "+            log(aLineNo, \"'\" + aText + \"' is not preceeded with whitespace.\");", "+        }", "+", "+        if ((after < line.length()) &&", "+            !Character.isWhitespace(line.charAt(after)))", "+        {", "+            log(aLineNo, \"'\" + aText + \"' is not proceeded with whitespace.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8af8b2aeb9b71264c26def1949b2250", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "c4853b445219fd3d31d290c37184e46a8c4161ed", "commitAfterChange": "8d800ef546e11c6d593154f4071e39cdc4f66f34", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private int getGroupNumber(String aName)", "signatureAfterChange": "     private int getGroupNumber(String aName)", "diff": ["+        int bestIndex = mGroups.length;", "+        int bestLength = -1;", "+        int bestPos = 0;", "+", "-            if (aName.startsWith(mGroups[i])) {", "-                return i;", "+            final Matcher matcher = mGroups[i].matcher(aName);", "+            while (matcher.find()) {", "+                final int length = matcher.end() - matcher.start();", "+                if ((length > bestLength)", "+                    || ((length == bestLength) && (matcher.start() < bestPos)))", "+                {", "+                    bestIndex = i;", "+                    bestLength = length;", "+                    bestPos = matcher.start();", "+                }", "-        // no match, so we return the wildcard group", "-        return mWildcardGroupIndex;", "+        return bestIndex;"]}]}
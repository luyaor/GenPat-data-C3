{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eebe71fffde43b66d3a9b23b317bd9c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119e88d2d78b47278cdeea1aaefdf945", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheckTest.java", "commitBeforeChange": "067896807847df81ba6e65195e4f39069dc3aea7", "commitAfterChange": "bc0bf95daedb6f0e658187d6e44410a60f46dbe2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void allowNonPrintableEscapes() throws Exception", "signatureAfterChange": "      @Test     public void allowNonPrintableEscapes() throws Exception", "diff": ["-            \"7: \" + MSG,", "-            \"9: \" + MSG,", "-            \"11: \" + MSG,", "-            \"15: \" + MSG,", "-            \"16: \" + MSG,", "-            \"24: \" + MSG,", "-            \"25: \" + MSG,", "-            \"31: \" + MSG,", "-            \"32: \" + MSG,", "-            \"33: \" + MSG,", "-            \"34: \" + MSG,", "-            \"42: \" + MSG,", "+            \"7: \" + msg,", "+            \"9: \" + msg,", "+            \"11: \" + msg,", "+            \"15: \" + msg,", "+            \"16: \" + msg,", "+            \"24: \" + msg,", "+            \"25: \" + msg,", "+            \"31: \" + msg,", "+            \"32: \" + msg,", "+            \"33: \" + msg,", "+            \"34: \" + msg,", "+            \"42: \" + msg,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22ad2bc960a55c4e94550e4ce64903fb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void logMessage(int aLineNumber)", "signatureAfterChange": "     private void logMessage(int lineNumber)", "diff": ["-    private void logMessage(int aLineNumber)", "+    private void logMessage(int lineNumber)", "-        String message = \"\".equals(getMessage()) ? getFormat() : mMessage;", "-        if (mErrorCount >= mErrorLimit) {", "-            message = ERROR_LIMIT_EXCEEDED_MESSAGE + message;", "+        String msg = \"\".equals(getMessage()) ? getFormat() : message;", "+        if (errorCount >= errorLimit) {", "+            msg = ERROR_LIMIT_EXCEEDED_MESSAGE + msg;", "-        if (mIllegalPattern) {", "-            log(aLineNumber, \"illegal.regexp\", message);", "+        if (illegalPattern) {", "+            log(lineNumber, \"illegal.regexp\", msg);", "-            if (aLineNumber > 0) {", "-                log(aLineNumber, \"duplicate.regexp\", message);", "+            if (lineNumber > 0) {", "+                log(lineNumber, \"duplicate.regexp\", msg);", "-                log(aLineNumber, \"required.regexp\", message);", "+                log(lineNumber, \"required.regexp\", msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bac0246a7a3b8a11b10de947e1ee3bfd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java", "commitBeforeChange": "7fcefa2c26063f6ae888c02ccfc3eaabca6e6c0e", "commitAfterChange": "33b6e5d9fc6fae514f508e580d84626dd202c0bb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static void parsePropertyString(String aValue, Vector aFragments,                                            Vector aPropertyRefs)         throws CheckstyleException", "signatureAfterChange": "     public static void parsePropertyString(String aValue,                                            List aFragments,                                            List aPropertyRefs)         throws CheckstyleException", "diff": ["-    public static void parsePropertyString(String aValue, Vector aFragments,", "-                                           Vector aPropertyRefs)", "+    public static void parsePropertyString(String aValue,", "+                                           List aFragments,", "+                                           List aPropertyRefs)", "-                aFragments.addElement(aValue.substring(prev, pos));", "+                aFragments.add(aValue.substring(prev, pos));", "-                aFragments.addElement(\"$\");", "+                aFragments.add(\"$\");", "-                    aFragments.addElement(\"$\");", "+                    aFragments.add(\"$\");", "-                    aFragments.addElement(aValue.substring(pos, pos + 2));", "+                    aFragments.add(aValue.substring(pos, pos + 2));", "-                aFragments.addElement(null);", "-                aPropertyRefs.addElement(propertyName);", "+                aFragments.add(null);", "+                aPropertyRefs.add(propertyName);", "-            aFragments.addElement(aValue.substring(prev));", "+            aFragments.add(aValue.substring(prev));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0a69454d6a5857339bcb961505aee78", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50557487753c39262cf699214b6670a1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "440cf6836f278602a790d764f257777be80d8b9e", "commitAfterChange": "686afc521a11088c57632352eb6fd60a682b03d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public void testCheck()         throws Exception", "signatureAfterChange": "      public void testCheckstyleChecks() throws Exception", "diff": ["-    ", "-    public void testCheck()", "-        throws Exception", "-//        Configuration config =", "-//            loadConfiguration(\"avoidstarimport_configuration.xml\");", "-//                    ", "-//        GlobalProperties globalProps =", "-//            new GlobalProperties(new Properties(), System.out);", "-//        assertEquals(\"properties\", globalProps.getProperties(),", "-//            config.getProperties());", "-//                ", "-//        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "-//        assertEquals(\"checkConfigs.length\", 1, checkConfigs.length);", "-//        ", "-//        assertTrue(\"checkConfigs[0]\",", "-//            (checkConfigs[0].createInstance(this.getClass().getClassLoader()))", "-//                instanceof AvoidStarImport);", "+", "+    public void testCheckstyleChecks() throws Exception", "+    {", "+        final Properties props = new Properties();", "+        props.put(\"checkstyle.basedir\", \"basedir\");", "+", "+        final DefaultConfiguration config =", "+            (DefaultConfiguration) loadConfiguration(", "+                \"checkstyle_checks.xml\", props);", "+", "+        //verify the root, and property substitution", "+        final Properties atts = new Properties();", "+        atts.put(\"tabWidth\", \"4\");", "+        atts.put(\"basedir\", \"basedir\");", "+        verifyConfigNode(config, \"configuration\", 3, atts);", "+", "+        //verify children", "+        final Configuration[] children = config.getChildren();", "+        atts.clear();", "+        verifyConfigNode(", "+            (DefaultConfiguration) children[1], \"PackageHtmlCheck\", 0, atts);", "+        verifyConfigNode(", "+            (DefaultConfiguration) children[2], \"TranslationCheck\", 0, atts);", "+        atts.put(\"testName\", \"testValue\");", "+        verifyConfigNode(", "+            (DefaultConfiguration) children[0], \"TreeWalker\", 8, atts);", "+", "+        //verify TreeWalker's first, last, NoWhitespaceAfterCheck", "+        final Configuration[] grandchildren = children[0].getChildren();", "+        atts.clear();", "+        verifyConfigNode(", "+            (DefaultConfiguration) grandchildren[0],", "+            \"AvoidStarImport\", 0, atts);", "+        atts.put(\"format\", \"System.out.println\");", "+        verifyConfigNode(", "+            (DefaultConfiguration) grandchildren[grandchildren.length - 1],", "+            \"GenericIllegalRegexpCheck\", 0, atts);", "+        atts.clear();", "+        atts.put(\"tokens\", \"DOT\");", "+        atts.put(\"allowLineBreaks\", \"true\");", "+        verifyConfigNode(", "+            (DefaultConfiguration) grandchildren[6],", "+            \"NoWhitespaceAfterCheck\", 0, atts);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abce50442b5e0d8e26c14228656f7c17", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java", "commitBeforeChange": "79e2149b37d91efaaeee891b491a3a9e0dfb6ac2", "commitAfterChange": "f5b4b3d452ee9fb96edb7b0a534351e5dab6dad7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      private static void validateUsageExample(String fileName, String sectionName, Node subSection)", "signatureAfterChange": "      private static void validateUsageExample(String fileName, String sectionName, Node subSection)", "diff": ["-        Assert.assertNull(fileName + \" section '\" + sectionName", "-                + \"' should have no xml examples, they belong in 'Examples'\",", "-                findChildElementByTag(subSection, \"source\"));", "+        final String text = subSection.getTextContent().replace(\"Checkstyle Style\", \"\")", "+                .replace(\"Google Style\", \"\").replace(\"Sun Style\", \"\").trim();", "+", "+        Assert.assertTrue(fileName + \" section '\" + sectionName", "+                + \"' has unknown text in 'Example of Usage': \" + text, text.isEmpty());", "+", "+        for (Node node : findChildElementsByTag(subSection, \"a\")) {", "+            final String url = node.getAttributes().getNamedItem(\"href\").getTextContent();", "+            final String linkText = node.getTextContent().trim();", "+            String expectedUrl = null;", "+", "+            if (\"Checkstyle Style\".equals(linkText)) {", "+                expectedUrl = \"https://github.com/search?q=\"", "+                        + \"path%3Aconfig+filename%3Acheckstyle_checks.xml+\"", "+                        + \"repo%3Acheckstyle%2Fcheckstyle+\" + sectionName;", "+            }", "+            else if (\"Google Style\".equals(linkText)) {", "+                expectedUrl = \"https://github.com/search?q=\"", "+                        + \"path%3Asrc%2Fmain%2Fresources+filename%3Agoogle_checks.xml+\"", "+                        + \"repo%3Acheckstyle%2Fcheckstyle+\"", "+                        + sectionName;", "+            }", "+            else if (\"Sun Style\".equals(linkText)) {", "+                expectedUrl = \"https://github.com/search?q=\"", "+                        + \"path%3Asrc%2Fmain%2Fresources+filename%3Asun_checks.xml+\"", "+                        + \"repo%3Acheckstyle%2Fcheckstyle+\"", "+                        + sectionName;", "+            }", "+", "+            Assert.assertEquals(fileName + \" section '\" + sectionName", "+                    + \"' should have matching url\", expectedUrl, url);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7895fd2438bbac36cdf37f0692b68c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/doclets/CheckDocsDoclet.java", "commitBeforeChange": "76e9e8ee631399e45f641c12a164dd140939db50", "commitAfterChange": "c4d8550b2e36a0ae7c5c410e62ca798980b45c5c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public static boolean start(RootDoc aRoot) throws IOException", "signatureAfterChange": "     public static boolean start(RootDoc aRoot) throws IOException", "diff": ["+        final Map allChecks = new TreeMap();", "+                allChecks.put(getCheckName(classDoc), page);", "+", "+        // TODO: close files in finally blocks", "+        final File checksIndexFile = new File(destDir, \"availablechecks.xml\");", "+        PrintWriter fileWriter = new PrintWriter(", "+                new FileWriter(checksIndexFile));", "+        writeXdocsHeader(fileWriter, \"Available Checks\");", "+", "+        fileWriter.println(\"<p>Checkstyle provides many checks that you can\"", "+                + \" apply to your sourcecode. Below is an alphabetical\"", "+                + \" reference, the site navigation menu provides a reference\"", "+                + \" organized by functionality.</p>\");", "+        fileWriter.println(\"<table>\");", "+", "+        for (Iterator it = allChecks.keySet().iterator(); it.hasNext();) {", "+            String checkName = (String) it.next();", "+            DocumentationPage page =", "+                    (DocumentationPage) allChecks.get(checkName);", "+            String descr = page.getDescription(checkName);", "+            fileWriter.println(\"<tr>\"", "+                    + \"<td><a href=\\\"\"", "+                    + \"config_\" + getPageName(page) + \".html#\" + checkName", "+                    + \"\\\">\" + checkName + \"</a></td><td>\"", "+                    + descr", "+                    + \"</td></tr>\");", "+        }", "+        fileWriter.println(\"</table>\");", "+        writeXdocsFooter(fileWriter);", "+        fileWriter.close();", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9287fa953e0b3e399eb71ab2916c259d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abb624518d90c914d5132d0bbd359139", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST aAST)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast)", "diff": ["-    private boolean shouldCheck(final DetailAST aAST)", "+    private boolean shouldCheck(final DetailAST ast)", "-        final DetailAST mods = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST mods = ast.findFirstToken(TokenTypes.MODIFIERS);", "-            ScopeUtils.inInterfaceOrAnnotationBlock(aAST)", "+            ScopeUtils.inInterfaceOrAnnotationBlock(ast)", "-        final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);", "+        final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);", "-        return scope.isIn(mScope)", "-            && ((surroundingScope == null) || surroundingScope.isIn(mScope))", "-            && ((mExcludeScope == null)", "-                || !scope.isIn(mExcludeScope)", "+        return scope.isIn(this.scope)", "+            && ((surroundingScope == null) || surroundingScope.isIn(this.scope))", "+            && ((excludeScope == null)", "+                || !scope.isIn(excludeScope)", "-                && !surroundingScope.isIn(mExcludeScope)));", "+                && !surroundingScope.isIn(excludeScope)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be5906c6aed0b32c976d6660fd9deab9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST aAST, final Scope aScope)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast, final Scope scope)", "diff": ["-    private boolean shouldCheck(final DetailAST aAST, final Scope aScope)", "+    private boolean shouldCheck(final DetailAST ast, final Scope scope)", "-        final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);", "+        final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);", "-        return aScope.isIn(mScope)", "-                && surroundingScope.isIn(mScope)", "-                && ((mExcludeScope == null) || !aScope.isIn(mExcludeScope)", "-                    || !surroundingScope.isIn(mExcludeScope));", "+        return scope.isIn(this.scope)", "+                && surroundingScope.isIn(this.scope)", "+                && ((excludeScope == null) || !scope.isIn(excludeScope)", "+                    || !surroundingScope.isIn(excludeScope));"]}]}
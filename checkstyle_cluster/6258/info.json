{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35ffc8ba1da20aa2edb5934dad2962c5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1110b2b5043797b781fd7de5480e45b1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/ConstantNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected final boolean mustCheckName(DetailAST aAST)", "signatureAfterChange": "      @Override     protected final boolean mustCheckName(DetailAST ast)", "diff": ["-    protected final boolean mustCheckName(DetailAST aAST)", "+    protected final boolean mustCheckName(DetailAST ast)", "-            aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            ast.findFirstToken(TokenTypes.MODIFIERS);", "-                || ScopeUtils.inAnnotationBlock(aAST)", "-                || (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)", "-                        && !ScopeUtils.inCodeBlock(aAST)))", "+                || ScopeUtils.inAnnotationBlock(ast)", "+                || (ScopeUtils.inInterfaceOrAnnotationBlock(ast)", "+                        && !ScopeUtils.inCodeBlock(ast)))", "-            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d56fee9e52bb13d186257bd416a510c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.IMPORT) {", "-            imp = FullIdent.createFullIdentBelow(aAST);", "+        if (ast.getType() == TokenTypes.IMPORT) {", "+            imp = FullIdent.createFullIdentBelow(ast);", "-                aAST.getFirstChild().getNextSibling());", "+                ast.getFirstChild().getNextSibling());", "-            log(aAST.getLineNo(),", "-                aAST.getColumnNo(),", "+            log(ast.getLineNo(),", "+                ast.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "504d4c7ab81603c199e7cc71b5d8de18", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if ((aAST.getType() != TokenTypes.VARIABLE_DEF)", "-            || (aAST.getParent().getType() != TokenTypes.OBJBLOCK))", "+        if ((ast.getType() != TokenTypes.VARIABLE_DEF)", "+            || (ast.getParent().getType() != TokenTypes.OBJBLOCK))", "-        final DetailAST varNameAST = getVarNameAST(aAST);", "+        final DetailAST varNameAST = getVarNameAST(ast);", "-            ScopeUtils.inInterfaceOrAnnotationBlock(aAST);", "-        final Set<String> mods = getModifiers(aAST);", "+            ScopeUtils.inInterfaceOrAnnotationBlock(ast);", "+        final Set<String> mods = getModifiers(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88d1dee09a6d90144af437375b27d292", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        String identifier = getIdentifier(getNthChild(aAST, 1));", "+        String identifier = getIdentifier(getNthChild(ast, 1));", "-            final DetailAST lparenAST = aAST.findFirstToken(TokenTypes.LPAREN);", "+            final DetailAST lparenAST = ast.findFirstToken(TokenTypes.LPAREN);", "-                log(aAST, \"suppress.warnings.missing.value\");", "+                log(ast, \"suppress.warnings.missing.value\");", "-            DetailAST parentAST = aAST.getParent();", "+            DetailAST parentAST = ast.getParent();", "-                log(aAST, \"suppress.warnings.invalid.target\");", "+                log(ast, \"suppress.warnings.invalid.target\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ec540812fcf3b13c7e05e13a4ce2d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            visitMethodDef(aAST);", "+            visitMethodDef(ast);", "-            visitAssign(aAST);", "+            visitAssign(ast);", "-            visitIncDec(aAST);", "+            visitIncDec(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d41f6e076b48e174973359de6dc585d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "     private boolean isGetterMethod(final DetailAST aAST)", "signatureAfterChange": "     private boolean isGetterMethod(final DetailAST ast)", "diff": ["-    private boolean isGetterMethod(final DetailAST aAST)", "+    private boolean isGetterMethod(final DetailAST ast)", "-        if ((aAST.getType() != TokenTypes.METHOD_DEF)", "-                || (aAST.getChildCount() != MAX_CHILDREN))", "+        if ((ast.getType() != TokenTypes.METHOD_DEF)", "+                || (ast.getChildCount() != MAX_CHILDREN))", "-        final DetailAST type = aAST.findFirstToken(TokenTypes.TYPE);", "+        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "-        final DetailAST params = aAST.findFirstToken(TokenTypes.PARAMETERS);", "+        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        final DetailAST slist = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ada2b7a8275f859d0abfb83f486880c0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private boolean isSetterMethod(final DetailAST aAST)", "signatureAfterChange": "     private boolean isSetterMethod(final DetailAST ast)", "diff": ["-    private boolean isSetterMethod(final DetailAST aAST)", "+    private boolean isSetterMethod(final DetailAST ast)", "-        if ((aAST.getType() != TokenTypes.METHOD_DEF)", "-                || (aAST.getChildCount() != MAX_CHILDREN))", "+        if ((ast.getType() != TokenTypes.METHOD_DEF)", "+                || (ast.getChildCount() != MAX_CHILDREN))", "-        final DetailAST type = aAST.findFirstToken(TokenTypes.TYPE);", "+        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "-        final DetailAST params = aAST.findFirstToken(TokenTypes.PARAMETERS);", "+        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        final DetailAST slist = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae48ecf68ff4919e3c3f9ee4d81c2bae", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "       @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "       @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            leaveForIter(aAST.getParent());", "+            leaveForIter(ast.getParent());", "-            leaveForEach(aAST);", "+            leaveForEach(ast);", "-            leaveForDef(aAST);", "+            leaveForDef(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f133f47f0242bac324f0bd5a604ee85d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (isInContext(aAST, ALLOWED_ASSIGMENT_CONTEXT)) {", "+        if (isInContext(ast, ALLOWED_ASSIGMENT_CONTEXT)) {", "-        if (isInNoBraceControlStatement(aAST)) {", "+        if (isInNoBraceControlStatement(ast)) {", "-        if (isInWhileIdiom(aAST)) {", "+        if (isInWhileIdiom(ast)) {", "-        log(aAST.getLineNo(), aAST.getColumnNo(), \"assignment.inner.avoid\");", "+        log(ast.getLineNo(), ast.getColumnNo(), \"assignment.inner.avoid\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f946cfaf0411aba72dadceb118acbed6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected void processRight(DetailAST aAST)", "signatureAfterChange": "     protected void processRight(DetailAST ast)", "diff": ["-    protected void processRight(DetailAST aAST)", "+    protected void processRight(DetailAST ast)", "-        final String line = getLines()[aAST.getLineNo() - 1];", "-        final int before = aAST.getColumnNo() - 1;", "+        final String line = getLines()[ast.getLineNo() - 1];", "+        final int before = ast.getColumnNo() - 1;", "-                log(aAST.getLineNo(), before, \"ws.preceded\", \")\");", "+                log(ast.getLineNo(), before, \"ws.preceded\", \")\");", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "+                log(ast.getLineNo(), ast.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc4ecdd3b078f3a4271b7bd0ca3008e4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/OperatorWrapCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.COLON) {", "-            final DetailAST parent = aAST.getParent();", "+        if (ast.getType() == TokenTypes.COLON) {", "+            final DetailAST parent = ast.getParent();", "-        final String text = aAST.getText();", "-        final int colNo = aAST.getColumnNo();", "-        final int lineNo = aAST.getLineNo();", "+        final String text = ast.getText();", "+        final int colNo = ast.getColumnNo();", "+        final int lineNo = ast.getLineNo();"]}]}
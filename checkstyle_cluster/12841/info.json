{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab38e59325d947e42bf53f7e33fc8dcf", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b82d5711c908c1ef0814e753b75bd0b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "1c7341013d0e8a34498eb49ccdb4e91419f13280", "commitAfterChange": "cd89321522d9bf7fc10547e743fb8bbb4c993791", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["+            Class documentedClass = null;", "+            if (!found", "+                && (mAllowThrowsTagsForSubclasses || mAllowUndeclaredRTE))", "+            {", "+                documentedClass = resolveClass(documentedEx);", "+                if (documentedClass == null) {", "+                    log(tag.getLineNo(), \"javadoc.classInfo\",", "+                        \"@throws\", documentedEx);", "+                }", "+            }", "+", "-                final FullIdent fi = ei.getFullIdent();", "+                final FullIdent fi = ei.getName();", "-                else if (mAllowThrowsTagsForSubclasses) {", "-                    final ClassResolver cr = getClassResolver();", "-                    try {", "-                        final Class documentedClass = cr.resolve(documentedEx);", "-                        try {", "-                            final Class declaredClass = cr.resolve(declaredEx);", "-                            found =", "-                                declaredClass.isAssignableFrom(documentedClass);", "-                            if (found) {", "-                                ei.setFound();", "-                            }", "-                        }", "-                        catch (ClassNotFoundException e) {", "-                            log(tag.getLineNo(), \"javadoc.classInfo\",", "+                else if (mAllowThrowsTagsForSubclasses", "+                         && documentedClass != null)", "+                {", "+                    if (ei.isLoadable() && ei.getClazz() == null) {", "+                        // if the class is not loaded yet.", "+                        // try to load it.", "+                        ei.setClazz(resolveClass(declaredEx));", "+                        if (!ei.isLoadable()) {", "+                            log(fi.getLineNo(), \"javadoc.classInfo\",", "-                    catch (ClassNotFoundException e) {", "-                        log(tag.getLineNo(), \"javadoc.classInfo\",", "-                                      \"@throws\", documentedEx);", "+", "+                    found = isSubclass(documentedClass, ei.getClazz());", "+                    if (found) {", "+                        ei.setFound();", "-                if (mAllowUndeclaredRTE) {", "-                    final ClassResolver cr = getClassResolver();", "-                    try {", "-                        final Class clazz = cr.resolve(tag.getArg1());", "-                        reqd =", "-                            !RuntimeException.class.isAssignableFrom(clazz)", "-                                && !Error.class.isAssignableFrom(clazz);", "-                    }", "-                    catch (ClassNotFoundException e) {", "-                        log(tag.getLineNo(), \"javadoc.classInfo\",", "-                                      \"@throws\", tag.getArg1());", "-                    }", "+                if (mAllowUndeclaredRTE && documentedClass != null) {", "+                    reqd = !isUnchecked(documentedClass);", "-                    final FullIdent fi = ei.getFullIdent();", "+                    final FullIdent fi = ei.getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f4ba43006fbe72c14845236eede0b8d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "commitBeforeChange": "205cbab8af785b1cddb9c4123ff3fa8b63dcbe1c", "commitAfterChange": "4e1f8ef98e9e43d6101a00bdecd040377472f852", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["-        final Set foundThrows = new HashSet();", "+        final Set foundThrows = new HashSet(); //used for performance only", "-                final FullIdent fi = (FullIdent) throwIt.next();", "+                final ExceptionInfo ei = (ExceptionInfo) throwIt.next();", "+                final FullIdent fi = ei.getFullIdent();", "-                    throwIt.remove();", "+                    ei.setFound();", "+                }", "+                else if (mAllowThrowsTagsForSubclasses) {", "+                    final ClassResolver cr = getClassResolver();", "+                    try {", "+                        final Class documentedClass = cr.resolve(documentedEx);", "+                        try {", "+                            final Class declaredClass = cr.resolve(declaredEx);", "+                            found = ", "+                                declaredClass.isAssignableFrom(documentedClass);", "+                            if (found) {", "+                                ei.setFound();", "+                            }", "+                        }", "+                        catch (ClassNotFoundException e) {", "+                            log(tag.getLineNo(), \"javadoc.classInfo\",", "+                                \"@throws\", declaredEx);", "+                        }", "+                    }", "+                    catch (ClassNotFoundException e) {", "+                        log(tag.getLineNo(), \"javadoc.classInfo\",", "+                                      \"@throws\", documentedEx);", "+                    }", "-                    final ClassResolver cr =", "-                        new ClassResolver(", "-                            getClassLoader(),", "-                            mPackageFullIdent.getText(),", "-                            mImports);", "+                    final ClassResolver cr = getClassResolver();", "-                final FullIdent fi = (FullIdent) throwIt.next();", "-                log(fi.getLineNo(), fi.getColumnNo(),", "-                    \"javadoc.expectedTag\", \"@throws\", fi.getText());", "+                final ExceptionInfo ei = (ExceptionInfo) throwIt.next();", "+                if (!ei.isFound()) {", "+                    final FullIdent fi = ei.getFullIdent();", "+                    log(fi.getLineNo(), fi.getColumnNo(),", "+                        \"javadoc.expectedTag\", \"@throws\", fi.getText());", "+                }"]}]}
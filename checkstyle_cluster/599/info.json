{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3463f08590953f3b861c7935e481e82", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "071c23f8d293cce6c40ac872b40530cf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "     private void addRulesToList(String aRule)", "signatureAfterChange": "     private void addRuleastoList(String ruleStr)", "diff": ["-    private void addRulesToList(String aRule)", "+    private void addRuleastoList(String ruleStr)", "-        if (STATIC_RULE_GROUP.equals(aRule)", "-                || THIRD_PARTY_PACKAGE_RULE_GROUP.equals(aRule)", "-                || STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(aRule)", "-                || SPECIAL_IMPORTS_RULE_GROUP.equals(aRule))", "+        if (STATIC_RULE_GROUP.equals(ruleStr)", "+                || THIRD_PARTY_PACKAGE_RULE_GROUP.equals(ruleStr)", "+                || STANDARD_JAVA_PACKAGE_RULE_GROUP.equals(ruleStr)", "+                || SPECIAL_IMPORTS_RULE_GROUP.equals(ruleStr))", "-            mCustomImportOrderRules.add(aRule);", "+            customImportOrderRules.add(ruleStr);", "-        else if (aRule.startsWith(SAME_PACKAGE_RULE_GROUP)) {", "+        else if (ruleStr.startsWith(SAME_PACKAGE_RULE_GROUP)) {", "-            final String rule = aRule.substring(aRule.indexOf(\"(\") + 1,", "-                    aRule.indexOf(\")\"));", "+            final String rule = ruleStr.substring(ruleStr.indexOf(\"(\") + 1,", "+                    ruleStr.indexOf(\")\"));", "-                mSamePackageMatchingDepth = Integer.parseInt(rule);", "+                samePackageMatchingDepth = Integer.parseInt(rule);", "-                mSamePackageDomainsRegExp = rule;", "+                samePackageDomainsRegExp = rule;", "-            mCustomImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);", "+            customImportOrderRules.add(SAME_PACKAGE_RULE_GROUP);", "-            throw new RuntimeException(\"Unexpected rule: \" + aRule);", "+            throw new RuntimeException(\"Unexpected rule: \" + ruleStr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a1d56d708b6648b8ebd3bf6fc7cd3ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST nextToken = aAST.getNextSibling();", "+        final DetailAST nextToken = ast.getNextSibling();", "-            final int astType = aAST.getType();", "+            final int astType = ast.getType();", "-                if (isTypeField(aAST) && !hasEmptyLineAfter(aAST)) {", "-                    if (mAllowNoEmptyLineBetweenFields", "+                if (iastypeField(ast) && !hasEmptyLineAfter(ast)) {", "+                    if (allowNoEmptyLineBetweenFields", "-                    else if (!mAllowNoEmptyLineBetweenFields) {", "+                    else if (!allowNoEmptyLineBetweenFields) {", "-                if (astType != nextToken.getType() && !hasEmptyLineAfter(aAST)", "-                    || (aAST.getLineNo() > 1 && !hasEmptyLineBefore(aAST)", "-                            && aAST.getPreviousSibling() == null))", "+                if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)", "+                    || (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)", "+                            && ast.getPreviousSibling() == null))", "-                if (aAST.getLineNo() > 1 && !hasEmptyLineBefore(aAST)) {", "-                    log(aAST.getLineNo(), \"empty.line.separator\", aAST.getText());", "+                if (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)) {", "+                    log(ast.getLineNo(), \"empty.line.separator\", ast.getText());", "-                if (!hasEmptyLineAfter(aAST)) {", "+                if (!hasEmptyLineAfter(ast)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad1317aea51f6763323d8687f0a363f7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST ast)", "diff": ["-    public void visitToken(final DetailAST aAST)", "+    public void visitToken(final DetailAST ast)", "-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {", "-            final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();", "+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {", "+            final DetailAST nameAST = ast.getLastChild().getPreviousSibling();", "-            if (mRoot == null) {", "+            if (root == null) {", "-                mInPkg = full.getText();", "-                mCurrentLeaf = mRoot.locateFinest(mInPkg);", "-                if (mCurrentLeaf == null) {", "+                inPkg = full.getText();", "+                currentLeaf = root.locateFinest(inPkg);", "+                if (currentLeaf == null) {", "-        else if (mCurrentLeaf != null) {", "+        else if (currentLeaf != null) {", "-            if (aAST.getType() == TokenTypes.IMPORT) {", "-                imp = FullIdent.createFullIdentBelow(aAST);", "+            if (ast.getType() == TokenTypes.IMPORT) {", "+                imp = FullIdent.createFullIdentBelow(ast);", "-                imp = FullIdent.createFullIdent(aAST", "+                imp = FullIdent.createFullIdent(ast", "-            final AccessResult access = mCurrentLeaf.checkAccess(imp.getText(),", "-                    mInPkg);", "+            final AccessResult access = currentLeaf.checkAccess(imp.getText(),", "+                    inPkg);", "-                log(aAST, \"import.control.disallowed\", imp.getText());", "+                log(ast, \"import.control.disallowed\", imp.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba20ec79cf26dd828d63e0fb861d9b5f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.IMPORT) {", "-            ident = FullIdent.createFullIdentBelow(aAST);", "+        if (ast.getType() == TokenTypes.IMPORT) {", "+            ident = FullIdent.createFullIdentBelow(ast);", "-            ident = FullIdent.createFullIdent(aAST.getFirstChild()", "+            ident = FullIdent.createFullIdent(ast.getFirstChild()", "-            if (!isStatic && mLastImportStatic) {", "-                mLastGroup = Integer.MIN_VALUE;", "-                mLastImport = \"\";", "+            if (!isStatic && lastImportStatic) {", "+                lastGroup = Integer.MIN_VALUE;", "+                lastImport = \"\";", "-            doVisitToken(ident, isStatic, (!mLastImportStatic && isStatic));", "+            doVisitToken(ident, isStatic, (!lastImportStatic && isStatic));", "-            if (isStatic && !mLastImportStatic) {", "-                mLastGroup = Integer.MIN_VALUE;", "-                mLastImport = \"\";", "+            if (isStatic && !lastImportStatic) {", "+                lastGroup = Integer.MIN_VALUE;", "+                lastImport = \"\";", "-            doVisitToken(ident, isStatic, (mLastImportStatic && !isStatic));", "+            doVisitToken(ident, isStatic, (lastImportStatic && !isStatic));", "-        mLastImportLine = aAST.findFirstToken(TokenTypes.SEMI).getLineNo();", "-        mLastImportStatic = isStatic;", "-        mBeforeFirstImport = false;", "+        lastImportLine = ast.findFirstToken(TokenTypes.SEMI).getLineNo();", "+        lastImportStatic = isStatic;", "+        beforeFirstImport = false;"]}]}
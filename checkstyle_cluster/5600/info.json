{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36486c52e7319a6f47402c59ef1721a8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f81123d560767159e002cdf5a67ca34", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java", "commitBeforeChange": "aab0718232e060bd8f289770ab81780b3a2705a2", "commitAfterChange": "eae75a529f1c6c10f10e0806fd2a274bb630c9e3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setIgnoredTags(String tags)", "signatureAfterChange": "     public void setIgnoredTags(String tags)", "diff": ["-        final List<String> tagList = new ArrayList<>();", "-        final String[] sTags = tags.split(\",\");", "-        for (String sTag : sTags) {", "-            tagList.add(sTag.trim());", "-        }", "-        ignoredTags = tagList;", "+        ignoredTags =", "+            Lists.newArrayList(Splitter.on(\",\").omitEmptyStrings().trimResults().split(tags));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88dec9076a56c78c50311513b3b07f4e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java", "commitBeforeChange": "1efd41aa924264e0899f5819e1b30a55d715f98b", "commitAfterChange": "e20d45697c937fbb8ae3eb3b43bffb43e211237f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void setIgnoreLines(String aList)", "signatureAfterChange": "     public void setIgnoreLines(int[] aList)", "diff": ["-    public void setIgnoreLines(String aList)", "+    public void setIgnoreLines(int[] aList)", "-        mIgnoreLines.clear();", "-        if (aList != null) {", "-            final StringTokenizer tokens = new StringTokenizer(aList, \",\");", "-            while (tokens.hasMoreTokens()) {", "-                final String ignoreLine = tokens.nextToken();", "-                mIgnoreLines.add(new Integer(ignoreLine));", "-            }", "+        if (aList == null || aList.length == 0) {", "+            mIgnoreLines = EMPTY_INT_ARRAY;", "+            return;", "+", "+        mIgnoreLines = new int[aList.length];", "+        System.arraycopy(aList, 0, mIgnoreLines, 0, aList.length);", "+        Arrays.sort(mIgnoreLines);"]}]}
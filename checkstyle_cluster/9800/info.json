{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "21fd20010a082ed5ec8675d4ebb35290", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820f500ce1c40f0e9ffdc550f5d7ecdd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "commitBeforeChange": "69976b5365b7c33a602dd814337e2db1136288fc", "commitAfterChange": "ac8eadea0b1fb183d56cd809a34a7b9047b47d47", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 33, "signatureBeforeChange": "      @Test     public void testInvalidClassDefWithChecker()         throws Exception", "signatureAfterChange": "      @Test     public void testInvalidClassDefWithChecker()         throws Exception", "diff": ["-        final Checker c = createChecker(checkConfig);", "+", "+        checkConfig.addAttribute(\"arrayInitIndent\", \"4\");", "+        checkConfig.addAttribute(\"basicOffset\", \"4\");", "+        checkConfig.addAttribute(\"braceAdjustment\", \"0\");", "+        checkConfig.addAttribute(\"caseIndent\", \"4\");", "+        checkConfig.addAttribute(\"forceStrictCondition\", \"false\");", "+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"4\");", "+        checkConfig.addAttribute(\"tabWidth\", \"4\");", "+        checkConfig.addAttribute(\"throwsIndent\", \"4\");", "-            \"19: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),", "-            \"25: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),", "-            \"28: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "-            \"31: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 0),", "-            \"35: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "-            \"40: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "-            \"41: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),", "-            \"47: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "-            \"55: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),", "-            \"56: \" + getCheckMessage(MSG_ERROR, \"java\", 2, 4),", "-            \"61: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),", "-            \"62: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),", "-            \"70: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "-            \"74: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "-            \"83: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),", "-            \"85: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),", "-            \"88: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),", "-            \"92: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),", "-            \"98: \" + getCheckMessage(MSG_ERROR, \"int\", 10, 12),", "-            \"103: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),", "-            \"108: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 6, 4),", "-            \"110: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),", "-            \"116: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 8),", "-            \"119: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 10, 8),", "-            \"121: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 10, 8),", "-            \"124: \" + getCheckMessage(MSG_ERROR, \"member def type\", 10, 12),", "-            \"129: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 10, 8),", "-            \"130: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 8, \"10, 14\"),", "-            \"134: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 8, \"10, 14\"),", "-            \"138: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 6, \"8, 12\"),", "-", "-            \"139: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 12, 10),", "-            \"141: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 12, 10),", "-", "-            \"142: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 6, \"8, 12\"),", "-            \"147: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 10, 12),", "-            \"149: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 10, 12),", "-            \"185: \" + getCheckMessage(MSG_ERROR, \"class\", 0, 4),", "+            \"22: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),", "+            \"28: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),", "+            \"31: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "+            \"34: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 0),", "+            \"38: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "+            \"43: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "+            \"44: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),", "+            \"50: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "+            \"58: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),", "+            \"59: \" + getCheckMessage(MSG_ERROR, \"java\", 2, 4),", "+            \"64: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),", "+            \"65: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),", "+            \"73: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "+            \"77: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "+            \"86: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),", "+            \"88: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),", "+            \"91: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),", "+            \"95: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),", "+            \"101: \" + getCheckMessage(MSG_ERROR, \"int\", 10, 12),", "+            \"106: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),", "+            \"111: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 6, 4),", "+            \"113: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),", "+            \"119: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 8),", "+            \"122: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 10, 8),", "+            \"124: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 10, 8),", "+            \"127: \" + getCheckMessage(MSG_ERROR, \"member def type\", 10, 12),", "+            \"132: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 10, 8),", "+            \"133: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 8, \"10, 14\"),", "+            \"137: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 8, \"10, 14\"),", "+            \"141: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 6, \"8, 12\"),", "+            \"142: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 12, 10),", "+            \"144: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 12, 10),", "+            \"145: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 6, \"8, 12\"),", "+            \"150: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 10, 12),", "+            \"152: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 10, 12),", "+            \"188: \" + getCheckMessage(MSG_ERROR, \"class\", 0, 4),", "-        verify(c, fname, expected);", "+        verifyWarns(checkConfig, fname, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "889c7920105bcf6d07b97ac18a0fc30e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "commitBeforeChange": "69976b5365b7c33a602dd814337e2db1136288fc", "commitAfterChange": "ac8eadea0b1fb183d56cd809a34a7b9047b47d47", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 30, "signatureBeforeChange": "      @Test     public void testInvalidArrayInitWithChecker()         throws Exception", "signatureAfterChange": "      @Test     public void testInvalidArrayInitWithChecker()         throws Exception", "diff": ["-        final Checker c = createChecker(checkConfig);", "+", "+        checkConfig.addAttribute(\"arrayInitIndent\", \"4\");", "+        checkConfig.addAttribute(\"basicOffset\", \"4\");", "+        checkConfig.addAttribute(\"braceAdjustment\", \"0\");", "+        checkConfig.addAttribute(\"caseIndent\", \"4\");", "+        checkConfig.addAttribute(\"forceStrictCondition\", \"false\");", "+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"4\");", "+        checkConfig.addAttribute(\"tabWidth\", \"4\");", "+        checkConfig.addAttribute(\"throwsIndent\", \"4\");", "-            \"17: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),", "-            \"18: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),", "-            \"20: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),", "-            \"24: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),", "-            \"25: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 8, 10),", "-            \"26: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 4, \"6, 10\"),", "-            \"29: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 9, 8),", "-            \"30: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 7, 8),", "-            \"31: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 9, 8),", "-            \"36: \" + getCheckMessage(MSG_ERROR, \"array initialization lcurly\", 2, 4),", "-            \"40: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"4, 8\"),", "-            \"44: \" + getCheckMessage(MSG_ERROR, \"array initialization lcurly\", 2, 4),", "-            \"48: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 20, \"8, 31, 33\"),", "-            \"49: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 4, \"8, 31, 33\"),", "-            \"54: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 6, 8),", "-            \"59: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),", "-            \"61: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),", "-            \"62: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 2, \"6, 10\"),", "-            \"65: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 6, 8),", "-            \"72: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 10, 12),", "-            \"85: \" + getCheckMessage(MSG_ERROR, \"1\", 8, 12),", "-            \"85: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 8, 12),", "-            \"96: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 10, 12),", "-            \"97: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 14, 12),", "+            \"21: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),", "+            \"22: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),", "+            \"24: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),", "+            \"28: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),", "+            \"29: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 8, 10),", "+            \"30: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 4, \"6, 10\"),", "+            \"33: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 9, 8),", "+            \"34: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 7, 8),", "+            \"35: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 9, 8),", "+            \"40: \" + getCheckMessage(MSG_ERROR, \"array initialization lcurly\", 2, 4),", "+            \"44: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"4, 8\"),", "+            \"48: \" + getCheckMessage(MSG_ERROR, \"array initialization lcurly\", 2, 4),", "+            \"52: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 20, \"8, 31, 33\"),", "+            \"53: \" + getCheckMessage(MSG_CHILD_ERROR_MULTI, \"array initialization\", 4, \"8, 31, 33\"),", "+            \"58: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 6, 8),", "+            \"63: \" + getCheckMessage(MSG_ERROR, \"member def type\", 2, 4),", "+            \"65: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 4),", "+            \"66: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 2, \"6, 10\"),", "+            \"69: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 6, 8),", "+            \"76: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 10, 12),", "+            \"89: \" + getCheckMessage(MSG_ERROR, \"1\", 8, 12),", "+            \"89: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 8, 12),", "-            \"102: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),", "-            \"105: \" + getCheckMessage(MSG_ERROR, \"array initialization lcurly\", 6, 8),", "-            \"106: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 14, 12),", "-            \"107: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 10, 12),", "-            \"108: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),", "+            \"104: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 10, 12),", "+            \"105: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 14, 12),", "+            \"106: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),", "+            \"109: \" + getCheckMessage(MSG_ERROR, \"array initialization lcurly\", 6, 8),", "+            \"110: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 14, 12),", "+            \"111: \" + getCheckMessage(MSG_CHILD_ERROR, \"array initialization\", 10, 12),", "+            \"112: \" + getCheckMessage(MSG_ERROR_MULTI, \"array initialization rcurly\", 6, \"8, 12\"),", "-        verify(c, fname, expected);", "+", "+        //Test input for this test case is not checked due to issue #693.", "+        verify(checkConfig, fname, expected);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a57c28c001de76e2be59837dac135db", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03a829bbe46abc038099d9f364830c51", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "7f65ac9c09d4e0ae5afa5b4709c7a8a136b6bd7f", "commitAfterChange": "c9cf116fcb4d295c3dd6fa80d73648bc7f34301c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        // Attempt to locate the tokens to do the check", "-        DetailAST rcurly;", "-        DetailAST lcurly;", "-        DetailAST nextToken;", "-        boolean shouldCheckLastRcurly = false;", "-", "-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_TRY:", "-                lcurly = ast.getFirstChild();", "-                nextToken = lcurly.getNextSibling();", "-                rcurly = lcurly.getLastChild();", "-                break;", "-            case TokenTypes.LITERAL_CATCH:", "-                nextToken = ast.getNextSibling();", "-                lcurly = ast.getLastChild();", "-                rcurly = lcurly.getLastChild();", "-                if (nextToken == null) {", "-                    shouldCheckLastRcurly = true;", "-                    nextToken = getNextToken(ast);", "-                }", "-                break;", "-            case TokenTypes.LITERAL_IF:", "-                nextToken = ast.findFirstToken(TokenTypes.LITERAL_ELSE);", "-                if (nextToken != null) {", "-                    lcurly = nextToken.getPreviousSibling();", "-                    rcurly = lcurly.getLastChild();", "-                }", "-                else {", "-                    shouldCheckLastRcurly = true;", "-                    nextToken = getNextToken(ast);", "-                    lcurly = ast.getLastChild();", "-                    rcurly = lcurly.getLastChild();", "-                }", "-                break;", "-            case TokenTypes.LITERAL_ELSE:", "-                shouldCheckLastRcurly = true;", "-                nextToken = getNextToken(ast);", "-                lcurly = ast.getFirstChild();", "-                rcurly = lcurly.getLastChild();", "-                break;", "-            case TokenTypes.LITERAL_FINALLY:", "-                shouldCheckLastRcurly = true;", "-                nextToken = getNextToken(ast);", "-                lcurly = ast.getFirstChild();", "-                rcurly = lcurly.getLastChild();", "-                break;", "-            case TokenTypes.CLASS_DEF:", "-                final DetailAST child = ast.getLastChild();", "-                lcurly = child.getFirstChild();", "-                rcurly = child.getLastChild();", "-                nextToken = ast;", "-                break;", "-            case TokenTypes.CTOR_DEF:", "-            case TokenTypes.STATIC_INIT:", "-            case TokenTypes.INSTANCE_INIT:", "-                lcurly = ast.findFirstToken(TokenTypes.SLIST);", "-                rcurly = lcurly.getLastChild();", "-                nextToken = ast;", "-                break;", "-            case TokenTypes.METHOD_DEF:", "-            case TokenTypes.LITERAL_FOR:", "-            case TokenTypes.LITERAL_WHILE:", "-            case TokenTypes.LITERAL_DO:", "-                lcurly = ast.findFirstToken(TokenTypes.SLIST);", "-                //SLIST could be absent if method is abstract, and code like \"while(true);\"", "-                if (lcurly == null) {", "-                    return;", "-                }", "-                rcurly = lcurly.getLastChild();", "-                nextToken = ast;", "-                break;", "-            default:", "-                throw new RuntimeException(\"Unexpected token type (\"", "-                    + TokenTypes.getTokenName(ast.getType()) + \")\");", "-        }", "+        final Details details = getDetails(ast);", "+        final DetailAST rcurly = details.rcurly;", "+        final DetailAST lcurly = details.lcurly;", "+        final DetailAST nextToken = details.nextToken;", "+        final boolean shouldCheckLastRcurly = details.shouldCheckLastRcurly;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b11c3d5b1914a78a66ee591136da4ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0", "commitAfterChange": "78e9ce870170ca3ef88fd78f8e0af0681c958eb3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+        DetailAST lcurly = null;", "-        if (aAST.getType() == TokenTypes.LITERAL_ELSE) {", "-            nextToken = aAST;", "-            final DetailAST thenAST = aAST.getPreviousSibling();", "-            rcurly = thenAST.getLastChild();", "-        }", "-        else if (aAST.getType() == TokenTypes.LITERAL_CATCH) {", "+        boolean shouldCheckLastRcurly = false;", "+", "+        switch (aAST.getType()) {", "+        case TokenTypes.LITERAL_TRY:", "+            lcurly = (DetailAST) aAST.getFirstChild();", "+            nextToken = (DetailAST) lcurly.getNextSibling();", "+            rcurly = lcurly.getLastChild();", "+            break;", "+        case TokenTypes.LITERAL_CATCH:", "-            rcurly = aAST.getLastChild().getLastChild();", "-        }", "-        else if (aAST.getType() == TokenTypes.LITERAL_TRY) {", "-            final DetailAST firstChild = (DetailAST) aAST.getFirstChild();", "-            nextToken = (DetailAST) firstChild.getNextSibling();", "-            rcurly = firstChild.getLastChild();", "+            lcurly = aAST.getLastChild();", "+            rcurly = lcurly.getLastChild();", "+            if (nextToken == null) {", "+                shouldCheckLastRcurly = true;", "+                nextToken = getNextToken(aAST);", "+            }", "+            break;", "+        case TokenTypes.LITERAL_IF:", "+            nextToken = aAST.findFirstToken(TokenTypes.LITERAL_ELSE);", "+            if (nextToken != null) {", "+                lcurly = nextToken.getPreviousSibling();", "+                rcurly = lcurly.getLastChild();", "+            }", "+            else {", "+                shouldCheckLastRcurly = true;", "+                nextToken = getNextToken(aAST);", "+                lcurly = aAST.getLastChild();", "+                rcurly = lcurly.getLastChild();", "+            }", "+            break;", "+        case TokenTypes.LITERAL_ELSE:", "+            shouldCheckLastRcurly = true;", "+            nextToken = getNextToken(aAST);", "+            lcurly = (DetailAST) aAST.getFirstChild();", "+            rcurly = lcurly.getLastChild();", "+            break;", "+        case TokenTypes.LITERAL_FINALLY:", "+            shouldCheckLastRcurly = true;", "+            nextToken = getNextToken(aAST);", "+            lcurly = (DetailAST) aAST.getFirstChild();", "+            rcurly = lcurly.getLastChild();", "+            break;", "+        default:", "+            throw new RuntimeException(\"Unexpected token type (\"", "+                    + TokenTypes.getTokenName(aAST.getType()) + \")\");", "-        // handle if-then-else without curlies:", "-        // if (cond)", "-        //     return 1;", "-        // else", "-        //     return 2;", "+            // we need to have both tokens to perform the check", "-        // If have both tokens, perform the check", "-        if (nextToken != null) {", "-            if ((getAbstractOption() == RightCurlyOption.SAME)", "-                && (rcurly.getLineNo() != nextToken.getLineNo()))", "-            {", "-                log(rcurly.getLineNo(), rcurly.getColumnNo(),", "-                    \"line.same\", \"}\");", "-            }", "-            else if ((getAbstractOption() == RightCurlyOption.ALONE)", "-                       && (rcurly.getLineNo() == nextToken.getLineNo()))", "-            {", "-                log(rcurly.getLineNo(), rcurly.getColumnNo(),", "-                    \"line.alone\", \"}\");", "+        if (shouldCheckLastRcurly) {", "+            if (rcurly.getLineNo() == nextToken.getLineNo()) {", "+                log(rcurly, \"line.alone\", \"}\");", "+        else if ((getAbstractOption() == RightCurlyOption.SAME)", "+            && (rcurly.getLineNo() != nextToken.getLineNo()))", "+        {", "+            log(rcurly, \"line.same\", \"}\");", "+        }", "+        else if ((getAbstractOption() == RightCurlyOption.ALONE)", "+                 && (rcurly.getLineNo() == nextToken.getLineNo()))", "+        {", "+            log(rcurly, \"line.alone\", \"}\");", "+        }", "+", "+        if (!mShouldStartLine) {", "+            return;", "+        }", "+        final boolean startsLine =", "+            Utils.whitespaceBefore(rcurly.getColumnNo(),", "+                                   getLines()[rcurly.getLineNo() - 1]);", "+", "+        if (!startsLine && (lcurly.getLineNo() != rcurly.getLineNo())) {", "+            log(rcurly, \"line.new\", \"}\");", "+        }", "+    }"]}]}
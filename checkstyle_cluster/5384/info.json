{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3502d749499d0d4811418b2bf83ace75", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119f5603260ff81046ee2b5d44015c05", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "28a4f2fe029422414814eeb6858f0b9c0cef7039", "commitAfterChange": "40f4c37a21b1c8444f39f12c5f92e79af10be34f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public synchronized void process(File[] aFiles)", "signatureAfterChange": "     public synchronized void process(File[] aFiles)", "diff": ["-        mLoc = 0;", "-        mLineChecksums = new long[mFiles.length][];", "+        mLineBlockChecksums = new long[mFiles.length][];", "-            LOG.debug(\"Reading input files\");", "+            LOG.debug(\"Reading \" + mFiles.length + \" input files\");", "+            final File file = mFiles[i];", "-                final File file = mFiles[i];", "-                final String[] lines =", "-                    Utils.getLines(file.getPath(), getCharset());", "+                final String[] lines = getTrimmedLines(file);", "-                mLineChecksums[i] = transformer.convertLines(lines);", "+                mLineBlockChecksums[i] = transformer.convertLines(lines);", "-                LOG.error(\"Cannot access files to check, giving up: \"", "-                        + ex.getMessage(), ex);", "+                LOG.error(\"Cannot access \" + file + \" (\"", "+                          + ex.getMessage() + \"), ignoring\", ex);", "-                mLineChecksums = new long[0][0];", "+                mLineBlockChecksums = new long[0][0];", "-        mLineChecksums = null;", "+        mLineBlockChecksums = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64be4c049ddb7b5dca6b8d0da12b1381", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "28a4f2fe029422414814eeb6858f0b9c0cef7039", "commitAfterChange": "40f4c37a21b1c8444f39f12c5f92e79af10be34f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "         public long[] convertLines(String[] aOriginalLines)", "signatureAfterChange": "         public long[] convertLines(String[] aOriginalLines)", "diff": ["-            final long[] checkSums = new long[aOriginalLines.length];", "-            for (int i = 0; i < aOriginalLines.length; i++) {", "-                final String line = aOriginalLines[i].trim();", "+            final int lineCount = aOriginalLines.length;", "+            final long[] checkSums = new long[lineCount];", "+            for (int i = 0; i < lineCount; i++) {", "+                final String line = aOriginalLines[i];", "-            return checkSums;", "+            final int retLen = Math.max(0, lineCount - mMin + 1);", "+            final long[] ret = new long[retLen];", "+", "+            for (int i = 0; i < retLen; i++) {", "+                long blockChecksum = 0;", "+                for (int j = 0; j < mMin; j++) {", "+                    final long checksum = checkSums[i + j];", "+                    if (checksum == IGNORE) {", "+                        blockChecksum = IGNORE;", "+                        break;", "+                    }", "+                    blockChecksum += (j + 1) * BIG_PRIME * checksum;", "+                }", "+                ret[i] = blockChecksum;", "+            }", "+            return ret;"]}]}
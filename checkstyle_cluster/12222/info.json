{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a3f9a6f64bb50d9ce3cc79fe1da60b6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00601817d6271067674caeb926e18506", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setIgnoreMethodNamesRegex(String aRegex)", "signatureAfterChange": "     public void setIgnoreMethodNamesRegex(String regex)", "diff": ["-    public void setIgnoreMethodNamesRegex(String aRegex)", "+    public void setIgnoreMethodNamesRegex(String regex)", "-        mIgnoreMethodNamesRegex = Utils.createPattern(aRegex);", "+        ignoreMethodNamesRegex = Utils.createPattern(regex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00f75a405e3f0481c1598658de6616ef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private int[] findLineBreaks()", "signatureAfterChange": "     private int[] findLineBreaks()", "diff": ["-            final int[] lineBreaks = new int[size() + 1];", "-            lineBreaks[0] = 0;", "+            final int[] lineBreakPositions = new int[size() + 1];", "+            lineBreakPositions[0] = 0;", "-                lineBreaks[lineNo] = matcher.end();", "+                lineBreakPositions[lineNo] = matcher.end();", "-            if (lineNo < lineBreaks.length) {", "-                lineBreaks[lineNo] = fullText.length();", "+            if (lineNo < lineBreakPositions.length) {", "+                lineBreakPositions[lineNo] = fullText.length();", "-            this.lineBreaks = lineBreaks;", "+            this.lineBreaks = lineBreakPositions;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "014fdcbc3cfa0d5642305e120f66b67f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "97956e1ae5d6842401ea0bfab121e8fb8d51c14d", "commitAfterChange": "d4ef19e679f276411a0de3b07e579c217d15f098", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      protected void verify(Checker c, String fileName, String... expected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker checker, String fileName, String... expected)             throws Exception", "diff": ["-    protected void verify(Checker c, String fileName, String... expected)", "+    protected void verify(Checker checker, String fileName, String... expected)", "-        verify(c, fileName, fileName, expected);", "+        verify(checker, fileName, fileName, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01cd6a3e38f924c3716f7ba7dc65f817", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private boolean hasShortCircuitTag(final DetailAST aAST,             final List<JavadocTag> aTags)", "signatureAfterChange": "     private boolean hasShortCircuitTag(final DetailAST ast,             final List<JavadocTag> tags)", "diff": ["-    private boolean hasShortCircuitTag(final DetailAST aAST,", "-            final List<JavadocTag> aTags)", "+    private boolean hasShortCircuitTag(final DetailAST ast,", "+            final List<JavadocTag> tags)", "-        if ((aTags.size() != 1)", "-                || !(aTags.get(0)).isInheritDocTag())", "+        if ((tags.size() != 1)", "+                || !(tags.get(0)).isInheritDocTag())", "-        if (!JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {", "-            log(aAST, \"javadoc.invalidInheritDoc\");", "+        if (!JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {", "+            log(ast, \"javadoc.invalidInheritDoc\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02160be0723b49412cbcd96f9c21cdf2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/AnonInnerLengthCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST openingBrace = aAST.findFirstToken(TokenTypes.OBJBLOCK);", "+        final DetailAST openingBrace = ast.findFirstToken(TokenTypes.OBJBLOCK);", "-            if (length > mMax) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"maxLen.anonInner\",", "-                        length, mMax);", "+            if (length > max) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"maxLen.anonInner\",", "+                        length, max);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02504965e3bb1c8820bd65dd19d8ca4e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "6839ac4fd83dde7060c8f6f28e75aa3d6ff2456b", "commitAfterChange": "31f6765fdcf2233ca6c53730c2fc196576557f66", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static DetailAST findLastAnnotation(DetailAST modifiers)", "signatureAfterChange": "     private static DetailAST findLastAnnotation(DetailAST modifiers)", "diff": ["-        DetailAST annot = modifiers.findFirstToken(TokenTypes.ANNOTATION);", "-        while (annot != null && annot.getNextSibling() != null", "-               && annot.getNextSibling().getType() == TokenTypes.ANNOTATION) {", "-            annot = annot.getNextSibling();", "+        DetailAST annotation = modifiers.findFirstToken(TokenTypes.ANNOTATION);", "+        while (annotation != null && annotation.getNextSibling() != null", "+               && annotation.getNextSibling().getType() == TokenTypes.ANNOTATION) {", "+            annotation = annotation.getNextSibling();", "-        return annot;", "+        return annotation;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0281d94510e088d34c51d5b4a98b84c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        // Cannot use aLines as the line separators have been removed!", "+        // Cannot use lines as the line separators have been removed!", "-            randomAccessFile = new RandomAccessFile(aFile, \"r\");", "+            randomAccessFile = new RandomAccessFile(file, \"r\");", "-                log(0, \"noNewlineAtEOF\", aFile.getPath());", "+                log(0, \"noNewlineAtEOF\", file.getPath());", "-            log(0, \"unable.open\", aFile.getPath());", "+            log(0, \"unable.open\", file.getPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02ce4b36326afe9ecc3f83e4c807c4dd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "fdd5ed77fd1ea61768683ee8cfacf78190a2d3aa", "commitAfterChange": "bf9325be913ce46a1427232c455f4830b574ba44", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "     private boolean isInThrows(List<ExceptionInfo> throwsList,             AbstractClassInfo documentedCI, Set<String> foundThrows)", "signatureAfterChange": "     private boolean isInThrows(List<ExceptionInfo> throwsList,             AbstractClassInfo documentedClassInfo, Set<String> foundThrows)", "diff": ["-            AbstractClassInfo documentedCI, Set<String> foundThrows) {", "+            AbstractClassInfo documentedClassInfo, Set<String> foundThrows) {", "-                    documentedCI.getName().getText())) {", "+                    documentedClassInfo.getName().getText())) {", "-            if (documentedCI.getClazz() == exceptionInfo.getClazz()) {", "+            if (documentedClassInfo.getClazz() == exceptionInfo.getClazz()) {", "-                found = isSubclass(documentedCI.getClazz(), exceptionInfo.getClazz());", "+                found = isSubclass(documentedClassInfo.getClazz(), exceptionInfo.getClazz());", "-            foundThrows.add(documentedCI.getName().getText());", "+            foundThrows.add(documentedClassInfo.getName().getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02f96ebe0966be3fe53c9a38427cfc0d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java", "commitBeforeChange": "e7547bb7ddccec6737cea118a41864fc349ea1d2", "commitAfterChange": "d220d7c3cc74490c7f2923f2ea85d00133afe98c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testIsSubclassWithNulls() throws Exception", "signatureAfterChange": "      @Test     public void testIsSubclassWithNulls() throws Exception", "diff": ["-        Method isSublclass = check.getClass().getSuperclass()", "+        Method isSubclass = check.getClass().getSuperclass()", "-        isSublclass.setAccessible(true);", "-        assertFalse((boolean) isSublclass.invoke(check, null, null));", "+        isSubclass.setAccessible(true);", "+        assertFalse((boolean) isSubclass.invoke(check, null, null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03a70d4b6c281d9c42ff7d196447c28c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "         @SuppressWarnings({\"unchecked\", \"rawtypes\"})         @Override         public Object convert(Class type, Object value)", "signatureAfterChange": "         @SuppressWarnings({\"unchecked\", \"rawtypes\"})         @Override         public Object convert(Class type, Object value)", "diff": ["-            final StringTokenizer st = new StringTokenizer(", "+            final StringTokenizer tokenizer = new StringTokenizer(", "-            while (st.hasMoreTokens()) {", "-                final String token = st.nextToken();", "+            while (tokenizer.hasMoreTokens()) {", "+                final String token = tokenizer.nextToken();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03b66d7e1135f14bf9d037116fb2149f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private boolean matchesSkipRegex(DetailAST aMethodDef)", "signatureAfterChange": "     private boolean matchesSkipRegex(DetailAST methodDef)", "diff": ["-    private boolean matchesSkipRegex(DetailAST aMethodDef)", "+    private boolean matchesSkipRegex(DetailAST methodDef)", "-        if (mIgnoreMethodNamesRegex != null) {", "-            final DetailAST ident = aMethodDef.findFirstToken(TokenTypes.IDENT);", "+        if (ignoreMethodNamesRegex != null) {", "+            final DetailAST ident = methodDef.findFirstToken(TokenTypes.IDENT);", "-            final Matcher matcher = mIgnoreMethodNamesRegex.matcher(methodName);", "+            final Matcher matcher = ignoreMethodNamesRegex.matcher(methodName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "049a9e3a2b2fab8ddf658ec68647774b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void closeStreams()", "signatureAfterChange": "     protected void closeStreams()", "diff": ["-        mInfoWriter.flush();", "-        if (mCloseInfo) {", "-            mInfoWriter.close();", "+        infoWriter.flush();", "+        if (closeInfo) {", "+            infoWriter.close();", "-        mErrorWriter.flush();", "-        if (mCloseError) {", "-            mErrorWriter.close();", "+        errorWriter.flush();", "+        if (closeError) {", "+            errorWriter.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04c4795e7224b859ad202a6d481081dd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final void setIllegalClassNames(final String[] aClassNames)", "signatureAfterChange": "     public final void setIllegalClassNames(final String[] classNames)", "diff": ["-    public final void setIllegalClassNames(final String[] aClassNames)", "+    public final void setIllegalClassNames(final String[] classNames)", "-        assert aClassNames != null;", "-        mIllegalClassNames.clear();", "-        for (final String name : aClassNames) {", "-            mIllegalClassNames.add(name);", "+        assert classNames != null;", "+        illegalClassNames.clear();", "+        for (final String name : classNames) {", "+            illegalClassNames.add(name);", "-                mIllegalClassNames.add(shortName);", "+                illegalClassNames.add(shortName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0531610f9d030392d3d34fbb399c86a8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean isAllCharactersEscaped(String aLiteral)", "signatureAfterChange": "     private boolean isAllCharactersEscaped(String literal)", "diff": ["-    private boolean isAllCharactersEscaped(String aLiteral)", "+    private boolean isAllCharactersEscaped(String literal)", "-        return mAllowIfAllCharactersEscaped", "-                && sAllEscapedChars.matcher(aLiteral.substring(1,", "-                        aLiteral.length() - 1)).find();", "+        return allowIfAllCharactersEscaped", "+                && sAllEscapedChars.matcher(literal.substring(1,", "+                        literal.length() - 1)).find();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0562dbcfeebd7f6b1c162694a165acaf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean isLegalComment(final TextBlock aComment)", "signatureAfterChange": "     private boolean isLegalComment(final TextBlock comment)", "diff": ["-    private boolean isLegalComment(final TextBlock aComment)", "+    private boolean isLegalComment(final TextBlock comment)", "-        if (mLegalComment == null) {", "+        if (legalComment == null) {", "-        if (aComment.getStartLineNo() != aComment.getEndLineNo()) {", "+        if (comment.getStartLineNo() != comment.getEndLineNo()) {", "-        String commentText = aComment.getText()[0];", "+        String commentText = comment.getText()[0];", "-        return mLegalComment.matcher(commentText).find();", "+        return legalComment.matcher(commentText).find();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "059b806de6555c68dc0b3985b6c63456", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "97956e1ae5d6842401ea0bfab121e8fb8d51c14d", "commitAfterChange": "d4ef19e679f276411a0de3b07e579c217d15f098", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected void verify(Checker c,                           String processedFilename,                           String messageFileName,                           String... expected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker checker,                           String processedFilename,                           String messageFileName,                           String... expected)             throws Exception", "diff": ["-    protected void verify(Checker c,", "+    protected void verify(Checker checker,", "-        verify(c,", "+        verify(checker,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05f2d11d5a82972907f7248a36ccedf8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static DetailAST getPreceded(DetailAST aArrayOrTypeCast)", "signatureAfterChange": "     private static DetailAST getPreceded(DetailAST arrayOrTypeCast)", "diff": ["-    private static DetailAST getPreceded(DetailAST aArrayOrTypeCast)", "+    private static DetailAST getPreceded(DetailAST arrayOrTypeCast)", "-        DetailAST preceded = aArrayOrTypeCast;", "-        switch (aArrayOrTypeCast.getType()) {", "+        DetailAST preceded = arrayOrTypeCast;", "+        switch (arrayOrTypeCast.getType()) {", "-            preceded = aArrayOrTypeCast.findFirstToken(TokenTypes.RPAREN);", "+            preceded = arrayOrTypeCast.findFirstToken(TokenTypes.RPAREN);", "-            preceded = getArrayTypeOrIdentifier(aArrayOrTypeCast);", "+            preceded = getArrayTypeOrIdentifier(arrayOrTypeCast);", "-            throw new IllegalStateException(aArrayOrTypeCast.toString());", "+            throw new IllegalStateException(arrayOrTypeCast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06ade4eb2d68d350a25ecd41d278b437", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public AuditEvent(Object aSrc, String aFileName)", "signatureAfterChange": "     public AuditEvent(Object src, String fileName)", "diff": ["-    public AuditEvent(Object aSrc, String aFileName)", "+    public AuditEvent(Object src, String fileName)", "-        this(aSrc, aFileName, null);", "+        this(src, fileName, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06ea395c578359c46c300b3fe7361f27", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void registerCheck(String aToken, Check aCheck)", "signatureAfterChange": "     private void registerCheck(String token, Check check)", "diff": ["-    private void registerCheck(String aToken, Check aCheck)", "+    private void registerCheck(String token, Check check)", "-        if (aCheck.isCommentNodesRequired()) {", "-            mTokenToCommentChecks.put(aToken, aCheck);", "+        if (check.isCommentNodesRequired()) {", "+            tokenToCommentChecks.put(token, check);", "-        else if (TokenTypes.isCommentType(aToken)) {", "+        else if (TokenTypes.isCommentType(token)) {", "-                    + aCheck.getClass().getName()", "+                    + check.getClass().getName()", "-                    + aToken", "+                    + token", "-            mTokenToOrdinaryChecks.put(aToken, aCheck);", "+            tokenToOrdinaryChecks.put(token, check);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073fd8af1a7d75b64cd7ceffe1f15d8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FullIdent.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static void extractFullIdent(FullIdent aFull, DetailAST aAST)", "signatureAfterChange": "     private static void extractFullIdent(FullIdent full, DetailAST ast)", "diff": ["-    private static void extractFullIdent(FullIdent aFull, DetailAST aAST)", "+    private static void extractFullIdent(FullIdent full, DetailAST ast)", "-        if (aAST == null) {", "+        if (ast == null) {", "-        if (aAST.getType() == TokenTypes.DOT) {", "-            extractFullIdent(aFull, aAST.getFirstChild());", "-            aFull.append(\".\");", "+        if (ast.getType() == TokenTypes.DOT) {", "+            extractFullIdent(full, ast.getFirstChild());", "+            full.append(\".\");", "-                aFull, aAST.getFirstChild().getNextSibling());", "+                full, ast.getFirstChild().getNextSibling());", "-            aFull.append(aAST);", "+            full.append(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07c15cf19603cf3ea4703d3e28bae436", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setCacheFile(String aFileName)", "signatureAfterChange": "     public void setCacheFile(String fileName)", "diff": ["-    /** @param aFileName the cache file */", "-    public void setCacheFile(String aFileName)", "+    /** @param fileName the cache file */", "+    public void setCacheFile(String fileName)", "-        mCache = new PropertyCacheFile(configuration, aFileName);", "+        cache = new PropertyCacheFile(configuration, fileName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07d696f4f76db508642195800635a55f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public void addException(AuditEvent aEvt, Throwable aThrowable)", "signatureAfterChange": "     @Override     public void addException(AuditEvent evt, Throwable throwable)", "diff": ["-    public void addException(AuditEvent aEvt, Throwable aThrowable)", "+    public void addException(AuditEvent evt, Throwable throwable)", "-        synchronized (mErrorWriter) {", "-            mErrorWriter.println(\"Error auditing \" + aEvt.getFileName());", "-            aThrowable.printStackTrace(mErrorWriter);", "+        synchronized (errorWriter) {", "+            errorWriter.println(\"Error auditing \" + evt.getFileName());", "+            throwable.printStackTrace(errorWriter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "089382580df390538bbb25fa8d943684", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     void setPreviousSibling(DetailAST aAST)", "signatureAfterChange": "     void setPreviousSibling(DetailAST ast)", "diff": ["-    void setPreviousSibling(DetailAST aAST)", "+    void setPreviousSibling(DetailAST ast)", "-        mPreviousSibling = aAST;", "+        previousSibling = ast;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a25d2a48a65f0abb615f807115e756", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public TagParser(String[] aText, int aLineNo)", "signatureAfterChange": "     public TagParser(String[] text, int lineNo)", "diff": ["-    public TagParser(String[] aText, int aLineNo)", "+    public TagParser(String[] text, int lineNo)", "-        parseTags(aText, aLineNo);", "+        parseTags(text, lineNo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0946a8d91ca074b503a1bf90d54cd2a4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkOrderInTagSection(DetailNode aJavadoc)", "signatureAfterChange": "     private void checkOrderInTagSection(DetailNode javadoc)", "diff": ["-    private void checkOrderInTagSection(DetailNode aJavadoc)", "+    private void checkOrderInTagSection(DetailNode javadoc)", "-        for (DetailNode node : aJavadoc.getChildren()) {", "+        for (DetailNode node : javadoc.getChildren()) {", "-                indexOrderOfCurrentTag = mTagOrder.indexOf(tagText);", "+                indexOrderOfCurrentTag = tagOrder.indexOf(tagText);", "-                if (mTagOrder.contains(tagText)", "+                if (tagOrder.contains(tagText)", "-                    log(node.getLineNumber(), \"at.clause.order\", mTagOrder.toString());", "+                    log(node.getLineNumber(), \"at.clause.order\", tagOrder.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0954f7652441e893fc6f3f78c74180b9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static FileText fromLines(File aFile, List<String> aLines)", "signatureAfterChange": "     public static FileText fromLines(File file, List<String> lines)", "diff": ["-    public static FileText fromLines(File aFile, List<String> aLines)", "+    public static FileText fromLines(File file, List<String> lines)", "-        return (aLines instanceof FileText)", "-            ? (FileText) aLines", "-            : new FileText(aFile, aLines);", "+        return (lines instanceof FileText)", "+            ? (FileText) lines", "+            : new FileText(file, lines);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09979690578c965eae8638a612bd0faa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "a13ebd482ce5dd891ba99d4c22a7cd5ff7d8e2dc", "commitAfterChange": "dad4fa599aa3570980fcaff4cb5f37941847a7a1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testAddFilter() throws Exception", "signatureAfterChange": "      @Test     public void testAddFilter() throws Exception", "diff": ["-        final DebugChecker c = new DebugChecker();", "-        final DebugFilter f = new DebugFilter();", "+        final DebugChecker checker = new DebugChecker();", "+        final DebugFilter filter = new DebugFilter();", "-        c.addFilter(f);", "+        checker.addFilter(filter);", "-        f.resetFilter();", "+        filter.resetFilter();", "-        c.fireErrors(\"Some File Name\", msgs);", "-        assertTrue(\"Checker.fireErrors() doesn't call filter\", f.wasCalled());", "+        checker.fireErrors(\"Some File Name\", msgs);", "+        assertTrue(\"Checker.fireErrors() doesn't call filter\", filter.wasCalled());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0997c8484d52940562ab76b9059fb490", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagContinuationIndentationCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitJavadocToken(DetailNode aAst)", "signatureAfterChange": "      @Override     public void visitJavadocToken(DetailNode ast)", "diff": ["-    public void visitJavadocToken(DetailNode aAst)", "+    public void visitJavadocToken(DetailNode ast)", "-        final List<DetailNode> textNodes = getAllNewlineNodes(aAst);", "-        if (isInlineDescription(aAst)) {", "+        final List<DetailNode> textNodes = getAllNewlineNodes(ast);", "+        if (isInlineDescription(ast)) {", "-                        && whitespace.getText().length() - 1 < mOffset)", "+                        && whitespace.getText().length() - 1 < offset)", "-                    log(textNode.getLineNumber(), \"tag.continuation.indent\", mOffset);", "+                    log(textNode.getLineNumber(), \"tag.continuation.indent\", offset);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09d3b32fc32ec716669406c097cbc42b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/testinputs/com/puppycrawl/tools/checkstyle/InputNestedBlocks.java", "commitBeforeChange": "9a15d83aa778a856b091fdddf6b1807b239d3db8", "commitAfterChange": "be3f6d793cf12cba115d7a1aafd6d1affe0a4338", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void method()", "signatureAfterChange": "      public void method()", "diff": ["-            int x = 1;", "-            int y = x;", "+            int z = 1;", "+            int y = z;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09d44bf6f556096f6b3a357f2011b60a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void tagSuppressions(Collection<TextBlock> aComments)", "signatureAfterChange": "     private void tagSuppressions(Collection<TextBlock> comments)", "diff": ["-    private void tagSuppressions(Collection<TextBlock> aComments)", "+    private void tagSuppressions(Collection<TextBlock> comments)", "-        for (TextBlock comment : aComments) {", "+        for (TextBlock comment : comments) {", "-            tagCommentLine(text[0], startLineNo, comment.getStartColNo());", "+            tagCoontLine(text[0], startLineNo, comment.getStartColNo());", "-                tagCommentLine(text[i], startLineNo + i, 0);", "+                tagCoontLine(text[i], startLineNo + i, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a7609ed2f46ef9608622e807c472e70", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        final String fileName = aFile.getPath();", "-        final long timestamp = aFile.lastModified();", "-        if (mCache.alreadyChecked(fileName, timestamp)) {", "+        final String fileName = file.getPath();", "+        final long timestamp = file.lastModified();", "+        if (cache.alreadyChecked(fileName, timestamp)) {", "-            final FileText text = FileText.fromLines(aFile, aLines);", "+            final FileText text = FileText.fromLines(file, lines);", "-            mCache.checkedOk(fileName, timestamp);", "+            cache.checkedOk(fileName, timestamp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b8a2a3d6f80a98d2dcbf8f546da9d66", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean hasUnicodeChar(String aLiteral)", "signatureAfterChange": "     private boolean hasUnicodeChar(String literal)", "diff": ["-    private boolean hasUnicodeChar(String aLiteral)", "+    private boolean hasUnicodeChar(String literal)", "-        return sUnicodeRegexp.matcher(aLiteral).find();", "+        return sUnicodeRegexp.matcher(literal).find();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bc057076d656b5b69c7f78bd805a201", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     protected AbstractLoader(String aPublicId, String aDtdResourceName)         throws SAXException, ParserConfigurationException", "signatureAfterChange": "     protected AbstractLoader(String publicId, String dtdResourceName)         throws SAXException, ParserConfigurationException", "diff": ["-    protected AbstractLoader(String aPublicId, String aDtdResourceName)", "+    protected AbstractLoader(String publicId, String dtdResourceName)", "-        mPublicIdToResourceNameMap.put(aPublicId, aDtdResourceName);", "+        publicIdToResourceNameMap.put(publicId, dtdResourceName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c30b4d2efa8929aca83611e7ca64648", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public void addError(AuditEvent evt)", "signatureAfterChange": "     @Override     public void addError(AuditEvent event)", "diff": ["-    public void addError(AuditEvent evt) {", "-        final SeverityLevel severityLevel = evt.getSeverityLevel();", "+    public void addError(AuditEvent event) {", "+        final SeverityLevel severityLevel = event.getSeverityLevel();", "-            final String fileName = evt.getFileName();", "-            final String message = evt.getMessage();", "+            final String fileName = event.getFileName();", "+            final String message = event.getMessage();", "-            sb.append(fileName).append(':').append(evt.getLine());", "-            if (evt.getColumn() > 0) {", "-                sb.append(':').append(evt.getColumn());", "+            sb.append(fileName).append(':').append(event.getLine());", "+            if (event.getColumn() > 0) {", "+                sb.append(':').append(event.getColumn());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c88bd909e69daac7ea31b01fdb7dd76", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAst)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAst)", "+    public void visitToken(DetailAST ast)", "-        if (0 == mCurrentDepth) {", "-            mOuterNum++;", "+        if (0 == currentDepth) {", "+            outerNum++;", "-        mCurrentDepth++;", "+        currentDepth++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cf61e3025d77d5d2c614f8c5475b2fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean checkParams(DetailAST aMethod)", "signatureAfterChange": "     private boolean checkParams(DetailAST method)", "diff": ["-    private boolean checkParams(DetailAST aMethod)", "+    private boolean checkParams(DetailAST method)", "-        final DetailAST params = aMethod.findFirstToken(TokenTypes.PARAMETERS);", "+        final DetailAST params = method.findFirstToken(TokenTypes.PARAMETERS);", "-        final DetailAST paramType = (params.getFirstChild())", "+        final DetailAST paratype = (params.getFirstChild())", "-            paramType.findFirstToken(TokenTypes.ARRAY_DECLARATOR);", "+            paratype.findFirstToken(TokenTypes.ARRAY_DECLARATOR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d5cfdcc64b5d8c5e3cfadbabb205ff3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void visitPackageDef(DetailAST aPkg)", "signatureAfterChange": "     private void visitPackageDef(DetailAST pkg)", "diff": ["-    private void visitPackageDef(DetailAST aPkg)", "+    private void visitPackageDef(DetailAST pkg)", "-        final FullIdent ident = FullIdent.createFullIdent(aPkg.getLastChild()", "+        final FullIdent ident = FullIdent.createFullIdent(pkg.getLastChild()", "-        mPackageName = ident.getText();", "+        packageName = ident.getText();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0dc1e4d4e992e8f4d66ac61dd663d7bc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            this.mCurrent = this.mFrames.get(aAST);", "+            this.current = this.frames.get(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0df8b74e0db345cfc541e95c50958953", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "16512bb1e7e31bedece4a745dad9c5960f141fca", "commitAfterChange": "abfc952fd0ed88f6246b1d969a8a980ea63f0bd6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public LocalizedMessage(int lineNo,                             int colNo,                             String bundle,                             String key,                             Object[] args,                             SeverityLevel severityLevel,                             String moduleId,                             Class<?> sourceClass,                             String customMessage)", "signatureAfterChange": "     public LocalizedMessage(int lineNo,                             int columnNo,                             String bundle,                             String key,                             Object[] args,                             SeverityLevel severityLevel,                             String moduleId,                             Class<?> sourceClass,                             String customMessage)", "diff": ["-                            int colNo,", "+                            int columnNo,", "-        this.colNo = colNo;", "+        this.columnNo = columnNo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb2d892dbf4a9a11c043b9c7e87d33c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private static String getFullImportIdent(DetailAST aToken)", "signatureAfterChange": "     private static String getFullImportIdent(DetailAST token)", "diff": ["-    private static String getFullImportIdent(DetailAST aToken)", "+    private static String getFullImportIdent(DetailAST token)", "-        return aToken != null ? FullIdent.createFullIdent(aToken.", "+        return token != null ? FullIdent.createFullIdent(token."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f52cb923579f548e007c783ac5fd525", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void checkParagraphTag(DetailNode aTag)", "signatureAfterChange": "     private void checkParagraphTag(DetailNode tag)", "diff": ["-    private void checkParagraphTag(DetailNode aTag)", "+    private void checkParagraphTag(DetailNode tag)", "-        final DetailNode newLine = getNearestEmptyLine(aTag);", "-        if (isFirstParagraph(aTag)) {", "-            log(aTag.getLineNumber(), \"javadoc.paragraph.redundant.paragraph\");", "+        final DetailNode newLine = getNearestEmptyLine(tag);", "+        if (isFirstPtagraph(tag)) {", "+            log(tag.getLineNumber(), \"javadoc.paragraph.redundant.paragraph\");", "-        else if (newLine == null || aTag.getLineNumber() - newLine.getLineNumber() != 1) {", "-            log(aTag.getLineNumber(), \"javadoc.paragraph.line.before\");", "+        else if (newLine == null || tag.getLineNumber() - newLine.getLineNumber() != 1) {", "+            log(tag.getLineNumber(), \"javadoc.paragraph.line.before\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fbba1192c1da952580f69c32100bbf7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void setUrl(final String aUrl)", "signatureAfterChange": "     public void setUrl(final String url)", "diff": ["-    public void setUrl(final String aUrl)", "+    public void setUrl(final String url)", "-        if ((aUrl == null) || (aUrl.trim().length() == 0)) {", "+        if ((url == null) || (url.trim().length() == 0)) {", "-            uri = URI.create(aUrl);", "+            uri = URI.create(url);", "-            throw new ConversionException(\"syntax error in url \" + aUrl, ex);", "+            throw new ConversionException(\"syntax error in url \" + url, ex);", "-            mRoot = ImportControlLoader.load(uri);", "+            root = ImportControlLoader.load(uri);", "-            throw new ConversionException(\"Unable to load \" + aUrl, ex);", "+            throw new ConversionException(\"Unable to load \" + url, ex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "101ff22eacfe46560dcce1d2fe5290e9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "commitBeforeChange": "02da493e64154d6bbac09a64d67a025f0e72cad1", "commitAfterChange": "7a6bf01c4dac8aedcdbd52aeed7500ba7a3ab0f8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static PkgControl load(final InputSource aSource,         final String aSourceName) throws CheckstyleException", "signatureAfterChange": "     private static PkgControl load(final InputSource aSource,         final URI aUri) throws CheckstyleException", "diff": ["-        final String aSourceName) throws CheckstyleException", "+        final URI aUri) throws CheckstyleException", "-            throw new CheckstyleException(\"unable to parse \" + aSourceName, e);", "+            throw new CheckstyleException(\"unable to parse \" + aUri, e);", "-            throw new CheckstyleException(\"unable to parse \" + aSourceName", "+            throw new CheckstyleException(\"unable to parse \" + aUri", "-            throw new CheckstyleException(\"unable to read \" + aSourceName, e);", "+            throw new CheckstyleException(\"unable to read \" + aUri, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10988c31a9905afcd76e5d7f9efc8593", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAst)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAst)", "+    public void visitToken(DetailAST ast)", "-        switch (aAst.getType()) {", "+        switch (ast.getType()) {", "-            visitPackageDef(aAst);", "+            visitPackageDef(ast);", "-            visitClassDef(aAst);", "+            visitClassDef(ast);", "-            visitMethodDef(aAst);", "+            visitMethodDef(ast);", "-            throw new IllegalStateException(aAst.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10c8a7793d04c0ea19dba1fffcf548ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static String baseClassname(String aType)", "signatureAfterChange": "     public static String baseClassname(String type)", "diff": ["-    public static String baseClassname(String aType)", "+    public static String baseClassname(String type)", "-        final int i = aType.lastIndexOf(\".\");", "-        return (i == -1) ? aType : aType.substring(i + 1);", "+        final int i = type.lastIndexOf(\".\");", "+        return (i == -1) ? type : type.substring(i + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10cc447dea6e293d13bacabcdf2626ef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java", "commitBeforeChange": "64c05f5391bdf55a60da22a685488022827aee84", "commitAfterChange": "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public Object getChild(Object parent, int index)", "signatureAfterChange": "      @Override     public Object getChild(Object parent, int index)", "diff": ["-        int indx = 0;", "+        int currentIndex = 0;", "-        while (indx < index) {", "+        while (currentIndex < index) {", "-            indx++;", "+            currentIndex++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11a69c4984bf2028347ed3d249c5fd71", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "         private AuditListener createDefaultLogger(Task aTask)             throws IOException", "signatureAfterChange": "         private AuditListener createDefaultLogger(Task task)             throws IOException", "diff": ["-        private AuditListener createDefaultLogger(Task aTask)", "+        private AuditListener createDefaultLogger(Task task)", "-            if ((mToFile == null) || !mUseFile) {", "+            if ((toFile == null) || !useFile) {", "-                    new LogOutputStream(aTask, Project.MSG_DEBUG),", "-                    true, new LogOutputStream(aTask, Project.MSG_ERR), true);", "+                    new LogOutputStream(task, Project.MSG_DEBUG),", "+                    true, new LogOutputStream(task, Project.MSG_ERR), true);", "-            return new DefaultLogger(new FileOutputStream(mToFile), true);", "+            return new DefaultLogger(new FileOutputStream(toFile), true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12ac5ad6352c13ef3144885bb7107c1b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mParameterNamesStack.clear();", "-        mParameterNames = null;", "+        parameterNamesStack.clear();", "+        parameterNames = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "130b71e9da7ad6a23f64b6851c89b353", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "46a52f84c014e4d25379f429f11ed3de11fe8ae7", "commitAfterChange": "07b24dd81c7648f093f2a789a7fa288d8e7eeef4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST ast)", "diff": ["-        final boolean containastag = containsJavadocTag(javadoc);", "-        if (containastag && !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {", "+        final boolean containsTag = containsJavadocTag(javadoc);", "+        if (containsTag && !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {", "-        if (containastag", "+        if (containsTag"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13103f8bf8e4da1e83ccae0920d63b96", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int parentType = aAST.getParent().getType();", "-        final DetailAST modifiers = aAST.getFirstChild();", "+        final int parentType = ast.getParent().getType();", "+        final DetailAST modifiers = ast.getFirstChild();", "-        if ((mIgnoreFinal && modifiers.branchContains(TokenTypes.FINAL))", "+        if ((ignoreFinal && modifiers.branchContains(TokenTypes.FINAL))", "-            final DetailAST variable = aAST.findFirstToken(TokenTypes.IDENT);", "+            final DetailAST variable = ast.findFirstToken(TokenTypes.IDENT);", "-                final DetailAST semicolonAst = aAST.getNextSibling();", "+                final DetailAST semicolonAst = ast.getNextSibling();", "-                if (mValidateBetweenScopes) {", "+                if (validateBetweenScopes) {", "-                if (dist > mAllowedDistance", "+                if (dist > allowedDistance", "-                    if (mIgnoreFinal) {", "+                    if (ignoreFinal) {", "-                                MSG_KEY_EXT, variable.getText(), dist, mAllowedDistance);", "+                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);", "-                                MSG_KEY, variable.getText(), dist, mAllowedDistance);", "+                                MSG_KEY, variable.getText(), dist, allowedDistance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "136708b5ee891af5d79ab875fb889b59", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "ed12c276a8adde2ce44b9834b413560476110f0e", "commitAfterChange": "66d6361c27586d58ba478b0223e60c6f1c5aa7b4", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "         public ClassInfo(FullIdent aName, String aCurrentClass)", "signatureAfterChange": "         public ClassInfo(final FullIdent aName, final String aSurroundingClass)", "diff": ["-        public ClassInfo(FullIdent aName, String aCurrentClass)", "+        public ClassInfo(final FullIdent aName, final String aSurroundingClass)", "-            mCurrentClass = aCurrentClass;", "+            mSurroundingClass = aSurroundingClass;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "138122123d7638186fd8f6581ff7e0cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAst)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAst)", "+    public void leaveToken(DetailAST ast)", "-        switch (aAst.getType()) {", "+        switch (ast.getType()) {", "-            mInForHeader = false;", "+            inForHeader = false;", "-            mExprDepth--;", "+            exprDepth--;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13cf3737fe6f5dfc676c707fa0798291", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/doclets/CheckDocsDoclet.java", "commitBeforeChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "commitAfterChange": "319f297e13e5c175a62489ff555cff7c463d3c7b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static void writeXdocsHeader(             final PrintWriter aPrintWriter,             final String aTitle)", "signatureAfterChange": "     private static void writeXdocsHeader(             final PrintWriter printWriter,             final String title)", "diff": ["-            final PrintWriter aPrintWriter,", "-            final String aTitle)", "+            final PrintWriter printWriter,", "+            final String title)", "-        aPrintWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");", "-        aPrintWriter.println(\"<document>\");", "-        aPrintWriter.println(\"<properties>\");", "-        aPrintWriter.println(\"<title>\" + aTitle + \"</title>\");", "-        aPrintWriter.println(\"<author \"", "+        printWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");", "+        printWriter.println(\"<document>\");", "+        printWriter.println(\"<properties>\");", "+        printWriter.println(\"<title>\" + title + \"</title>\");", "+        printWriter.println(\"<author \"", "-        aPrintWriter.println(\"</properties>\");", "-        aPrintWriter.println(\"<body>\");", "-        aPrintWriter.flush();", "+        printWriter.println(\"</properties>\");", "+        printWriter.println(\"<body>\");", "+        printWriter.flush();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15da647ec370dfc0488726e335a1e0e8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java", "commitBeforeChange": "859c809b0562032ab6a24956d20a28e1ff6431dc", "commitAfterChange": "e8c6134660cb1fb726f990469db235d3557af2a0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "      @Test(expected = IllegalStateException.class)     public void testVisitTokenSwitchReflection() throws Exception", "signatureAfterChange": "      @Test(expected = IllegalStateException.class)     public void testVisitTokenSwitchReflection() throws Exception", "diff": ["-        ImportOrderOption C = PowerMockito.mock(ImportOrderOption.class);", "-        Whitebox.setInternalState(C, \"name\", \"NEW_OPTION_FOR_UT\");", "-        Whitebox.setInternalState(C, \"ordinal\", 5);", "+        ImportOrderOption importOrderOptionMock = PowerMockito.mock(ImportOrderOption.class);", "+        Whitebox.setInternalState(importOrderOptionMock, \"name\", \"NEW_OPTION_FOR_UT\");", "+        Whitebox.setInternalState(importOrderOptionMock, \"ordinal\", 5);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16e9cda352b53307d115b9f0fa27b20d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "52e2087c404986f8e12cd8579be7b2333961e1a3", "commitAfterChange": "c38185458ab824874b8465c46b4dc42646440aaa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setIgnoreStringsRegexp(String aIgnoreStringsRegexp)", "signatureAfterChange": "     public void setIgnoreStringsRegexp(String aIgnoreStringsRegexp)", "diff": ["-        mIgnoreStringsRegexp = aIgnoreStringsRegexp;", "-        if ((mIgnoreStringsRegexp != null)", "-            && (mIgnoreStringsRegexp.length() > 0))", "+        if ((aIgnoreStringsRegexp != null)", "+            && (aIgnoreStringsRegexp.length() > 0))", "-            mPattern = Utils.getPattern(mIgnoreStringsRegexp);", "+            mPattern = Utils.getPattern(aIgnoreStringsRegexp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "178d0967262d8c7682b61677d3896d32", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/CheckstyleException.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public CheckstyleException(String aMessage, Throwable aCause)", "signatureAfterChange": "     public CheckstyleException(String message, Throwable cause)", "diff": ["-    public CheckstyleException(String aMessage, Throwable aCause)", "+    public CheckstyleException(String message, Throwable cause)", "-        super(aMessage, aCause);", "+        super(message, cause);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17c4bd7306c7fc45da20d2cc2622afa4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean ignoreNumberOfParameters(DetailAST aAST)", "signatureAfterChange": "     private boolean ignoreNumberOfParameters(DetailAST ast)", "diff": ["-    private boolean ignoreNumberOfParameters(DetailAST aAST)", "+    private boolean ignoreNumberOfParameters(DetailAST ast)", "-        return mIgnoreOverriddenMethods", "-                && (AnnotationUtility.containsAnnotation(aAST, OVERRIDE)", "-                || AnnotationUtility.containsAnnotation(aAST, CANONICAL_OVERRIDE));", "+        return ignoreOverriddenMethods", "+                && (AnnotationUtility.containsAnnotation(ast, OVERRIDE)", "+                || AnnotationUtility.containsAnnotation(ast, CANONICAL_OVERRIDE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18531f27daa48de21f8230ec191909b9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mExprDepth = 0;", "-        mInForHeader = false;", "-        mLastStatementEnd = -1;", "+        exprDepth = 0;", "+        inForHeader = false;", "+        lastStatementEnd = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1899b28a5503ad5f61acdf118cf8d5b4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "64c05f5391bdf55a60da22a685488022827aee84", "commitAfterChange": "1487e5161886d95cb8c82e4fb1a8b447fa7e32d0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void checkHtmlTags(final DetailAST ast, final TextBlock comment)", "signatureAfterChange": "     private void checkHtmlTags(final DetailAST ast, final TextBlock comment)", "diff": ["-        for (final HtmlTag htag : htmlStack) {", "-            if (!isSingleTag(htag)", "-                && !htag.getId().equals(lastFound)", "-                && !typeParameters.contains(htag.getId())) {", "-                log(htag.getLineNo(), htag.getPosition(), UNCLOSED_HTML, htag);", "-                lastFound = htag.getId();", "+        for (final HtmlTag htmlTag : htmlStack) {", "+            if (!isSingleTag(htmlTag)", "+                && !htmlTag.getId().equals(lastFound)", "+                && !typeParameters.contains(htmlTag.getId())) {", "+                log(htmlTag.getLineNo(), htmlTag.getPosition(), UNCLOSED_HTML, htmlTag);", "+                lastFound = htmlTag.getId();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18a6587febf1d155ae54a797390807d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void setNextSibling(AST aAST)", "signatureAfterChange": "      @Override     public void setNextSibling(AST ast)", "diff": ["-    public void setNextSibling(AST aAST)", "+    public void setNextSibling(AST ast)", "-        super.setNextSibling(aAST);", "-        if ((aAST != null) && (mParent != null)) {", "-            ((DetailAST) aAST).setParent(mParent);", "+        super.setNextSibling(ast);", "+        if ((ast != null) && (parent != null)) {", "+            ((DetailAST) ast).setParent(parent);", "-        if (aAST != null) {", "-            ((DetailAST) aAST).setPreviousSibling(this);", "+        if (ast != null) {", "+            ((DetailAST) ast).setPreviousSibling(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "194a66244267c59521101492ceb9e6c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "91aa6578321ceb08f4b0d715f994b7a9f4abe9d7", "commitAfterChange": "3430721be200cbe2acf55c3b3d52a528638123b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void logIOException(IOException e, File file)", "signatureAfterChange": "     private void logIOException(IOException aEx, File aFile)", "diff": ["-    private void logIOException(IOException e, File file)", "+    private void logIOException(IOException aEx, File aFile)", "-        if (!(e instanceof FileNotFoundException)) {", "-            args = new String[] {e.getMessage()};", "+        if (!(aEx instanceof FileNotFoundException)) {", "+            args = new String[] {aEx.getMessage()};", "-        getMessageDispatcher().fireErrors(file.getPath(), messages);", "+        getMessageDispatcher().fireErrors(aFile.getPath(), messages);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1962c1183ae6745bbc4739441ebd34cf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocNodeImpl.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void setType(int aType)", "signatureAfterChange": "      public void setType(int type)", "diff": ["-    public void setType(int aType)", "+    public void setType(int type)", "-        this.mType = aType;", "+        this.type = type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "197ee5bb15782e569f20f804edebd527", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private Set<Object> loadKeys(File file)", "signatureAfterChange": "     private Set<Object> loadKeys(File file)", "diff": ["-            final Enumeration<?> e = props.propertyNames();", "-            while (e.hasMoreElements()) {", "-                keys.add(e.nextElement());", "+            final Enumeration<?> element = props.propertyNames();", "+            while (element.hasMoreElements()) {", "+                keys.add(element.nextElement());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1987a226a6d165e672bad0948237f407", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "93587ecf374c8dd9f040fd3667efc47a3d84ff5d", "commitAfterChange": "b06e2e0015944ceaa74a10134bf06ac5c9e53782", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void visitMethodDef(DetailAST aAST)", "signatureAfterChange": "     private void visitMethodDef(DetailAST aMethodDef)", "diff": ["-    private void visitMethodDef(DetailAST aAST)", "+    private void visitMethodDef(DetailAST aMethodDef)", "-        if (isCheckedMethod(aAST)) {", "-            checkClassName(aAST);", "+        if (isCheckedMethod(aMethodDef)) {", "+            checkClassName(aMethodDef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19dd276b41c453f1763ea849fa317bff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void visitClassDef(DetailAST aClassDef)", "signatureAfterChange": "     private void visitClassDef(DetailAST classDef)", "diff": ["-    private void visitClassDef(DetailAST aClassDef)", "+    private void visitClassDef(DetailAST classDef)", "-        mContextStack.push(mContext);", "+        contextStack.push(context);", "-            aClassDef.findFirstToken(TokenTypes.IDENT).getText();", "-        mContext = new Context(className,", "-                               aClassDef.getLineNo(),", "-                               aClassDef.getColumnNo());", "+            classDef.findFirstToken(TokenTypes.IDENT).getText();", "+        context = new Context(className,", "+                               classDef.getLineNo(),", "+                               classDef.getColumnNo());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19e99ea4db6b281a3dee2fe85f42af30", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "a13ebd482ce5dd891ba99d4c22a7cd5ff7d8e2dc", "commitAfterChange": "dad4fa599aa3570980fcaff4cb5f37941847a7a1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testRemoveListener() throws Exception", "signatureAfterChange": "      @Test     public void testRemoveListener() throws Exception", "diff": ["-        final DebugChecker c = new DebugChecker();", "+        final DebugChecker checker = new DebugChecker();", "-        c.addListener(auditAdapter);", "-        c.addListener(aa2);", "-        c.removeListener(auditAdapter);", "+        checker.addListener(auditAdapter);", "+        checker.addListener(aa2);", "+        checker.removeListener(auditAdapter);", "-        c.fireAuditStarted();", "+        checker.fireAuditStarted();", "-        c.fireAuditFinished();", "+        checker.fireAuditFinished();", "-        c.fireFileStarted(\"Some File Name\");", "+        checker.fireFileStarted(\"Some File Name\");", "-        c.fireFileFinished(\"Some File Name\");", "+        checker.fireFileFinished(\"Some File Name\");", "-        c.fireErrors(\"Some File Name\", msgs);", "+        checker.fireErrors(\"Some File Name\", msgs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19ed823155bc50332ce2830592825f4a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected final void log(DetailAST aAST, String aKey, Object... aArgs)", "signatureAfterChange": "     protected final void log(DetailAST ast, String key, Object... args)", "diff": ["-    protected final void log(DetailAST aAST, String aKey, Object... aArgs)", "+    protected final void log(DetailAST ast, String key, Object... args)", "-        log(aAST.getLineNo(), aAST.getColumnNo(), aKey, aArgs);", "+        log(ast.getLineNo(), ast.getColumnNo(), key, args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b0f1e1bebc0fe8e950cbbb9f4baccd5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocNodeImpl.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      public void setParent(DetailNode aParent)", "signatureAfterChange": "      public void setParent(DetailNode parent)", "diff": ["-    public void setParent(DetailNode aParent)", "+    public void setParent(DetailNode parent)", "-        this.mParent = aParent;", "+        this.parent = parent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b62dab5dbaffae9b1cc4390a117ee46", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean containsJavadocTag(final TextBlock aJavadoc)", "signatureAfterChange": "     private boolean containsJavadocTag(final TextBlock javadoc)", "diff": ["-    private boolean containsJavadocTag(final TextBlock aJavadoc)", "+    private boolean containsJavadocTag(final TextBlock javadoc)", "-        if (aJavadoc == null) {", "+        if (javadoc == null) {", "-        final String[] lines = aJavadoc.getText();", "+        final String[] lines = javadoc.getText();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b75840194685eba1d389037a2459c49", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void visitParameterDef(DetailAST aParamDef)", "signatureAfterChange": "     private void visitParameterDef(DetailAST paradef)", "diff": ["-    private void visitParameterDef(DetailAST aParamDef)", "+    private void visitParameterDef(DetailAST paradef)", "-        final DetailAST grandParentAST = aParamDef.getParent().getParent();", "+        final DetailAST grandParentAST = paradef.getParent().getParent();", "-            checkClassName(aParamDef);", "+            checkClassName(paradef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c7357260c1346a0d4e881b751b43187", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void addFileset(FileSet aFS)", "signatureAfterChange": "     public void addFileset(FileSet fS)", "diff": ["-    public void addFileset(FileSet aFS)", "+    public void addFileset(FileSet fS)", "-        mFileSets.add(aFS);", "+        fileSets.add(fS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1caae0d049cd0cf76d5ac37485d37631", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean fileExtensionMatches(File aFile)", "signatureAfterChange": "     private boolean fileExtensionMatches(File file)", "diff": ["-    private boolean fileExtensionMatches(File aFile)", "+    private boolean fileExtensionMatches(File file)", "-        if ((null == mFileExtensions) || (mFileExtensions.length == 0)) {", "+        if ((null == fileExtensions) || (fileExtensions.length == 0)) {", "-        final String[] withDotExtensions = new String[mFileExtensions.length];", "-        for (int i = 0; i < mFileExtensions.length; i++) {", "-            final String extension = mFileExtensions[i];", "+        final String[] withDotExtensions = new String[fileExtensions.length];", "+        for (int i = 0; i < fileExtensions.length; i++) {", "+            final String extension = fileExtensions[i];", "-        final String fileName = aFile.getName();", "+        final String fileName = file.getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cbb1c7772d236db396465cf6da33e08", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mCollect = false;", "-        mImports.clear();", "-        mReferenced.clear();", "+        collect = false;", "+        imports.clear();", "+        referenced.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f1bb325e3aa92ee027291dfe82e6f82", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "commitAfterChange": "4c1148db9982918e65f8d1156e8fb9c07b206fc9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public boolean equals(Object object)", "signatureAfterChange": "      @Override     public boolean equals(Object object)", "diff": ["-        final LocalizedMessage that = (LocalizedMessage) object;", "-        return Objects.equals(lineNo, that.lineNo)", "-                && Objects.equals(colNo, that.colNo)", "-                && Objects.equals(severityLevel, that.severityLevel)", "-                && Objects.equals(moduleId, that.moduleId)", "-                && Objects.equals(key, that.key)", "-                && Objects.equals(bundle, that.bundle)", "-                && Objects.equals(sourceClass, that.sourceClass)", "-                && Objects.equals(customMessage, that.customMessage)", "-                && Arrays.equals(args, that.args);", "+        final LocalizedMessage localizedMessage = (LocalizedMessage) object;", "+        return Objects.equals(lineNo, localizedMessage.lineNo)", "+                && Objects.equals(colNo, localizedMessage.colNo)", "+                && Objects.equals(severityLevel, localizedMessage.severityLevel)", "+                && Objects.equals(moduleId, localizedMessage.moduleId)", "+                && Objects.equals(key, localizedMessage.key)", "+                && Objects.equals(bundle, localizedMessage.bundle)", "+                && Objects.equals(sourceClass, localizedMessage.sourceClass)", "+                && Objects.equals(customMessage, localizedMessage.customMessage)", "+                && Arrays.equals(args, localizedMessage.args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f239050fc97de57650c233dc87d20a7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public final void contextualize(Context aContext)         throws CheckstyleException", "signatureAfterChange": "     @Override     public final void contextualize(Context context)         throws CheckstyleException", "diff": ["-    public final void contextualize(Context aContext)", "+    public final void contextualize(Context context)", "-        final Collection<String> attributes = aContext.getAttributeNames();", "+        final Collection<String> attributes = context.getAttributeNames();", "-            final Object value = aContext.get(key);", "+            final Object value = context.get(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20192b6ff9c0fafcdf5371d57099585e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     @Override     public void addError(AuditEvent aEvt)", "signatureAfterChange": "     @Override     public void addError(AuditEvent evt)", "diff": ["-    public void addError(AuditEvent aEvt)", "+    public void addError(AuditEvent evt)", "-        if (!SeverityLevel.IGNORE.equals(aEvt.getSeverityLevel())) {", "-            mWriter.print(\"<error\" + \" line=\\\"\" + aEvt.getLine() + \"\\\"\");", "-            if (aEvt.getColumn() > 0) {", "-                mWriter.print(\" column=\\\"\" + aEvt.getColumn() + \"\\\"\");", "+        if (!SeverityLevel.IGNORE.equals(evt.getSeverityLevel())) {", "+            writer.print(\"<error\" + \" line=\\\"\" + evt.getLine() + \"\\\"\");", "+            if (evt.getColumn() > 0) {", "+                writer.print(\" column=\\\"\" + evt.getColumn() + \"\\\"\");", "-            mWriter.print(\" severity=\\\"\"", "-                + aEvt.getSeverityLevel().getName()", "+            writer.print(\" severity=\\\"\"", "+                + evt.getSeverityLevel().getName()", "-            mWriter.print(\" message=\\\"\"", "-                + encode(aEvt.getMessage())", "+            writer.print(\" message=\\\"\"", "+                + encode(evt.getMessage())", "-            mWriter.println(\" source=\\\"\"", "-                + encode(aEvt.getSourceName())", "+            writer.println(\" source=\\\"\"", "+                + encode(evt.getSourceName())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20a230e8c234bc6bb666357b4af6fd0b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private List<JavadocTag> getJavadocTags(TextBlock cmt)", "signatureAfterChange": "     private List<JavadocTag> getJavadocTags(TextBlock textBlock)", "diff": ["-    private List<JavadocTag> getJavadocTags(TextBlock cmt) {", "-        final JavadocTags tags = JavadocUtils.getJavadocTags(cmt,", "+    private List<JavadocTag> getJavadocTags(TextBlock textBlock) {", "+        final JavadocTags tags = JavadocUtils.getJavadocTags(textBlock,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2111e28722d69922f7386307c6a76f82", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public void setEndOfSentenceFormat(String aFormat)", "signatureAfterChange": "     public void setEndOfSentenceFormat(String format)", "diff": ["-    public void setEndOfSentenceFormat(String aFormat)", "+    public void setEndOfSentenceFormat(String format)", "-        mEndOfSentenceFormat = aFormat;", "+        endOfSentenceFormat = format;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2197fb475557f44c5f6bd5a15d4bd726", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private int compare(String aCurrentImport, String aPreviousImport)", "signatureAfterChange": "     private int compare(String currentImport, String previousImport)", "diff": ["-    private int compare(String aCurrentImport, String aPreviousImport)", "+    private int compare(String currentImport, String previousImport)", "-        final int currentImportDomainCount = countDomains(aCurrentImport);", "-        final int previousImportDomainCount = countDomains(aPreviousImport);", "+        final int currentImportDomainCount = countDomains(currentImport);", "+        final int previousImportDomainCount = countDomains(previousImport);", "-        while (aCurrentImport.lastIndexOf(\".\") != indexOfPreviousDotCurrent - 1", "-                && aPreviousImport.lastIndexOf(\".\") != indexOfPreviousDotPrevious - 1)", "+        while (currentImport.lastIndexOf(\".\") != indexOfPreviousDotCurrent - 1", "+                && previousImport.lastIndexOf(\".\") != indexOfPreviousDotPrevious - 1)", "-            indexOfNextDotCurrent = aCurrentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);", "-            indexOfNextDotPrevious = aPreviousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);", "-            tokenCurrent = aCurrentImport.substring(indexOfPreviousDotCurrent,", "+            indexOfNextDotCurrent = currentImport.indexOf(\".\", indexOfPreviousDotCurrent + 1);", "+            indexOfNextDotPrevious = previousImport.indexOf(\".\", indexOfPreviousDotPrevious + 1);", "+            tokenCurrent = currentImport.substring(indexOfPreviousDotCurrent,", "-            tokenPrevious = aPreviousImport.substring(indexOfPreviousDotPrevious,", "+            tokenPrevious = previousImport.substring(indexOfPreviousDotPrevious,", "-        if (result == 0 && (aCurrentImport.lastIndexOf(\".\") == indexOfPreviousDotCurrent - 1", "-                || aPreviousImport.lastIndexOf(\".\") == indexOfPreviousDotPrevious - 1))", "+        if (result == 0 && (currentImport.lastIndexOf(\".\") == indexOfPreviousDotCurrent - 1", "+                || previousImport.lastIndexOf(\".\") == indexOfPreviousDotPrevious - 1))", "-                getClassName(indexOfNextDotPrevious, aPreviousImport);", "+                getClassName(indexOfNextDotPrevious, previousImport);", "-                getClassName(indexOfNextDotPrevious, aPreviousImport);", "+                getClassName(indexOfNextDotPrevious, previousImport);", "-                        aCurrentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,", "-                                aPreviousImport));", "+                        currentImport).compareToIgnoreCase(getClassName(indexOfNextDotPrevious,", "+                                previousImport));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21995900f49b3796b8dead1140b94712", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077", "commitAfterChange": "cb5a59fc6baf5de204e3cc99be6ba9865e44350a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static DetailAST skipAnnotationOnlyLines(DetailAST ast)", "signatureAfterChange": "     private static DetailAST skipAnnotationOnlyLines(DetailAST ast)", "diff": ["-        DetailAST lastAnnot = findLastAnnotation(modifiers);", "-        if (lastAnnot == null) {", "+        DetailAST lastAnnotation = findLastAnnotation(modifiers);", "+        if (lastAnnotation == null) {", "-        if (lastAnnot.getNextSibling() == null) {", "+        if (lastAnnotation.getNextSibling() == null) {", "-            tokenAfterLast = lastAnnot.getNextSibling();", "+            tokenAfterLast = lastAnnotation.getNextSibling();", "-        if (tokenAfterLast.getLineNo() > lastAnnot.getLineNo()) {", "+        if (tokenAfterLast.getLineNo() > lastAnnotation.getLineNo()) {", "-        final int lastAnnotLineNumber = lastAnnot.getLineNo();", "-        while (lastAnnot.getPreviousSibling() != null", "-               && lastAnnot.getPreviousSibling().getLineNo() == lastAnnotLineNumber) {", "-            lastAnnot = lastAnnot.getPreviousSibling();", "+        final int lastAnnotationLineNumber = lastAnnotation.getLineNo();", "+        while (lastAnnotation.getPreviousSibling() != null", "+               && lastAnnotation.getPreviousSibling().getLineNo() == lastAnnotationLineNumber) {", "+            lastAnnotation = lastAnnotation.getPreviousSibling();", "-        return lastAnnot;", "+        return lastAnnotation;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22014124ff0719ea16bda19fbf20212a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void leaveForIter(DetailAST aAST)", "signatureAfterChange": "     private void leaveForIter(DetailAST ast)", "diff": ["-    private void leaveForIter(DetailAST aAST)", "+    private void leaveForIter(DetailAST ast)", "-        final DetailAST forInitAST = aAST.findFirstToken(TokenTypes.FOR_INIT);", "+        final DetailAST forInitAST = ast.findFirstToken(TokenTypes.FOR_INIT);", "-                mCurrentVariables.push(param.getText());", "+                currentVariables.push(param.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "232fe61d25ff8058b2b6a6d800736426", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void addFormatter(Formatter aFormatter)", "signatureAfterChange": "     public void addFormatter(Formatter formatter)", "diff": ["-    public void addFormatter(Formatter aFormatter)", "+    public void addFormatter(Formatter formatter)", "-        mFormatters.add(aFormatter);", "+        formatters.add(formatter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "235868ca5310ac2a0b5deec2e18e4b30", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private DetailAST getFirstNodeInsideForWhileDoWhileBlocks(             DetailAST aBlock, DetailAST aVariable)", "signatureAfterChange": "     private DetailAST getFirstNodeInsideForWhileDoWhileBlocks(             DetailAST block, DetailAST variable)", "diff": ["-            DetailAST aBlock, DetailAST aVariable)", "+            DetailAST block, DetailAST variable)", "-        if (!isVariableInOperatorExpr(aBlock, aVariable)) {", "+        if (!isVariableInOperatorExpr(block, variable)) {", "-            if (aBlock.getType() == TokenTypes.LITERAL_DO) {", "-                currentNode = aBlock.getFirstChild();", "+            if (block.getType() == TokenTypes.LITERAL_DO) {", "+                currentNode = block.getFirstChild();", "-                currentNode = aBlock.findFirstToken(TokenTypes.RPAREN);", "+                currentNode = block.findFirstToken(TokenTypes.RPAREN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2369533bf639782443909ffe8e276c6d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SingleLineJavadocCheck.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean hasJavadocTags(DetailNode javadocRoot)", "signatureAfterChange": "     private boolean hasJavadocTags(DetailNode javadocRoot)", "diff": ["-        final DetailNode javdocTagSection =", "+        final DetailNode javadocTagSection =", "-        return javdocTagSection != null;", "+        return javadocTagSection != null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "237988b799666c7ac165ade85629f429", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     protected boolean hasText(final DetailAST aSlistAST)", "signatureAfterChange": "     protected boolean hasText(final DetailAST slistAST)", "diff": ["-    protected boolean hasText(final DetailAST aSlistAST)", "+    protected boolean hasText(final DetailAST slistAST)", "-        final DetailAST rightCurly = aSlistAST.findFirstToken(TokenTypes.RCURLY);", "+        final DetailAST rightCurly = slistAST.findFirstToken(TokenTypes.RCURLY);", "-                ? rightCurly : aSlistAST.getParent().findFirstToken(TokenTypes.RCURLY);", "+                ? rightCurly : slistAST.getParent().findFirstToken(TokenTypes.RCURLY);", "-            final int slistLineNo = aSlistAST.getLineNo();", "-            final int slistColNo = aSlistAST.getColumnNo();", "+            final int slistLineNo = slistAST.getLineNo();", "+            final int slistColNo = slistAST.getColumnNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c66095b83249ef7456b92b840bb3bc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private int findTextStart(String aLine)", "signatureAfterChange": "     private int findTextStart(String line)", "diff": ["-    private int findTextStart(String aLine)", "+    private int findTextStart(String line)", "-        for (int i = 0; i < aLine.length(); i++) {", "-            if (!Character.isWhitespace(aLine.charAt(i))) {", "-                if (aLine.regionMatches(i, \"/**\", 0, \"/**\".length())) {", "+        for (int i = 0; i < line.length(); i++) {", "+            if (!Character.isWhitespace(line.charAt(i))) {", "+                if (line.regionMatches(i, \"/**\", 0, \"/**\".length())) {", "-                else if (aLine.regionMatches(i, \"*/\", 0, 2)) {", "+                else if (line.regionMatches(i, \"*/\", 0, 2)) {", "-                else if (aLine.charAt(i) != '*') {", "+                else if (line.charAt(i) != '*') {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25168212c0c685c5daef77088ac20f16", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static String getDefaultAlias(String aSourceName)", "signatureAfterChange": "     public static String getDefaultAlias(String sourceName)", "diff": ["-    public static String getDefaultAlias(String aSourceName)", "+    public static String getDefaultAlias(String sourceName)", "-        final int startIndex = aSourceName.lastIndexOf('.') + 1;", "-        int endIndex = aSourceName.length();", "-        if (aSourceName.endsWith(CHECK_SUFFIX)) {", "+        final int startIndex = sourceName.lastIndexOf('.') + 1;", "+        int endIndex = sourceName.length();", "+        if (sourceName.endsWith(CHECK_SUFFIX)) {", "-        return aSourceName.substring(startIndex, endIndex).toLowerCase();", "+        return sourceName.substring(startIndex, endIndex).toLowerCase();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25753940d773d31aef3357433c561127", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     protected final boolean startsLine(DetailAST aAst)", "signatureAfterChange": "     protected final boolean startsLine(DetailAST ast)", "diff": ["-    protected final boolean startsLine(DetailAST aAst)", "+    protected final boolean startsLine(DetailAST ast)", "-        return getLineStart(aAst) == expandedTabsColumnNo(aAst);", "+        return getLineStart(ast) == expandedTabsColumnNo(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25a45347867bb7e902dd1f66ade3cf3e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private void register(int aType, Class<?> aHandlerClass)", "signatureAfterChange": "     private void register(int type, Class<?> handlerClass)", "diff": ["-    private void register(int aType, Class<?> aHandlerClass)", "+    private void register(int type, Class<?> handlerClass)", "-            final Constructor<?> ctor = aHandlerClass", "+            final Constructor<?> ctor = handlerClass", "-            mTypeHandlers.put(aType, ctor);", "+            typeHandlers.put(type, ctor);", "-                                       + aHandlerClass);", "+                                       + handlerClass);", "-            LOG.debug(\"couldn't find ctor for \" + aHandlerClass, e);", "+            LOG.debug(\"couldn't find ctor for \" + handlerClass, e);", "-                                       + aHandlerClass);", "+                                       + handlerClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25aa7c541d5e0d5ee68bc6918b24faf0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "commitBeforeChange": "d67d10e9f2b480f7f56fe7cda2a908cd5fe770c7", "commitAfterChange": "f65b17cbc30795247fef3077cce16a8bb53e9ffc", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "      @Test     public void testLoadPropertiesIoException() throws Exception", "signatureAfterChange": "      @Test     public void testLoadPropertiesIoException() throws Exception", "diff": ["-        catch (InvocationTargetException e) {", "-            assertTrue(e.getCause() instanceof CheckstyleException);", "+        catch (InvocationTargetException ex) {", "+            assertTrue(ex.getCause() instanceof CheckstyleException);", "-            assertTrue(e.getCause().getMessage()", "+            assertTrue(ex.getCause().getMessage()", "-            assertTrue(e.getCause().getMessage().endsWith(\":invalid'.\"));", "+            assertTrue(ex.getCause().getMessage().endsWith(\":invalid'.\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25f927c778fc26589052ef274c8c818b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "b0240a0200663fbf1d3146d1aefe12207fdde4af", "commitAfterChange": "9aa72722de7b5a4ffb5d50945c7bce8b58f25e8e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public synchronized void process(File[] aFiles)", "signatureAfterChange": "     public synchronized void process(File[] aFiles)", "diff": ["-        mSortedRelevantChecksums = new long[mFiles.length][];", "+        mChecksumInfo = new ChecksumInfo[mFiles.length];", "-        mSortedRelevantChecksums = null;", "+        mChecksumInfo = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26e9e15d8cb107519d1937e40c02efb0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static Pattern getPattern(String aPattern, int aCompileFlags)         throws PatternSyntaxException", "signatureAfterChange": "     public static Pattern getPattern(String pattern, int compileFlags)         throws PatternSyntaxException", "diff": ["-    public static Pattern getPattern(String aPattern, int aCompileFlags)", "+    public static Pattern getPattern(String pattern, int compileFlags)", "-        final String key = aPattern + \":flags-\" + aCompileFlags;", "+        final String key = pattern + \":flags-\" + compileFlags;", "-            retVal = Pattern.compile(aPattern, aCompileFlags);", "+            retVal = Pattern.compile(pattern, compileFlags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26ed025d25c7a72097c8b81f56c06394", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "10330437ddd4be125cb4109702d0d0b96ffe3303", "commitAfterChange": "d963b8bfc21b4f782e598c70be31d2123c4dbef7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private static Map arrangePropertyFiles(Set aPropFiles)", "signatureAfterChange": "     private static Map arrangePropertyFiles(Set aPropFiles)", "diff": ["-            String baseName = extractBaseName(file);", "+            String identifier = extractPropertyIdentifier(file);", "-            Set fileSet = (Set) propFileMap.get(baseName);", "+            Set fileSet = (Set) propFileMap.get(identifier);", "-                propFileMap.put(baseName, fileSet);", "+                propFileMap.put(identifier, fileSet);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28200a0917c681ed0f8214a17e66026d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void flushAndCloseOutStream(OutputStream aStream)", "signatureAfterChange": "     private void flushAndCloseOutStream(OutputStream stream)", "diff": ["-    private void flushAndCloseOutStream(OutputStream aStream)", "+    private void flushAndCloseOutStream(OutputStream stream)", "-        if (aStream != null) {", "+        if (stream != null) {", "-                aStream.flush();", "+                stream.flush();", "-                Utils.closeQuietly(aStream);", "+                Utils.closeQuietly(stream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29eaa84b16f3ffb3ee871dfc5f4e869f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static boolean isCommentType(int aType)", "signatureAfterChange": "     public static boolean isCommentType(int type)", "diff": ["-    public static boolean isCommentType(int aType)", "+    public static boolean isCommentType(int type)", "-        return aType == TokenTypes.SINGLE_LINE_COMMENT", "-                || aType == TokenTypes.BLOCK_COMMENT_BEGIN", "-                || aType == TokenTypes.BLOCK_COMMENT_END", "-                || aType == TokenTypes.COMMENT_CONTENT;", "+        return type == TokenTypes.SINGLE_LINE_COMMENT", "+                || type == TokenTypes.BLOCK_COMMENT_BEGIN", "+                || type == TokenTypes.BLOCK_COMMENT_END", "+                || type == TokenTypes.COMMENT_CONTENT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a816c51d787ab6d9fc85904a79e9beb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/LineLengthCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-            if ((realLength > mMax)", "-                && !mIgnorePattern.matcher(line).find())", "+            if ((realLength > max)", "+                && !ignorePattern.matcher(line).find())", "-                log(i + 1, \"maxLineLen\", mMax, realLength);", "+                log(i + 1, \"maxLineLen\", max, realLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a8cdaaccec65579cf66dd93a03601f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void registerCheck(int aTokenID, Check aCheck)", "signatureAfterChange": "     private void registerCheck(int tokenID, Check check)", "diff": ["-    private void registerCheck(int aTokenID, Check aCheck)", "+    private void registerCheck(int tokenID, Check check)", "-        registerCheck(TokenTypes.getTokenName(aTokenID), aCheck);", "+        registerCheck(TokenTypes.getTokenName(tokenID), check);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ab1e31ad8d77e1e1fc2c406d04189ca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected Checker createChecker(Configuration aCheckConfig)             throws Exception", "signatureAfterChange": "      protected Checker createChecker(Configuration checkConfig)             throws Exception", "diff": ["-    protected Checker createChecker(Configuration aCheckConfig)", "+    protected Checker createChecker(Configuration checkConfig)", "-        final DefaultConfiguration dc = createCheckerConfig(aCheckConfig);", "+        final DefaultConfiguration dc = createCheckerConfig(checkConfig);", "-        c.addListener(new BriefLogger(mStream));", "+        c.addListener(new BriefLogger(stream));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b2b7e4d381534a06d424a6911895e9a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocNodeImpl.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      public void setChildren(DetailNode[] aChildren)", "signatureAfterChange": "      public void setChildren(DetailNode[] children)", "diff": ["-    public void setChildren(DetailNode[] aChildren)", "+    public void setChildren(DetailNode[] children)", "-        this.mChildren = aChildren;", "+        this.children = children;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b8bf951283dc13b739c0abd5982c59b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setIgnoreStringsRegexp(String aIgnoreStringsRegexp)", "signatureAfterChange": "     public void setIgnoreStringsRegexp(String ignoreStringsRegexp)", "diff": ["-    public void setIgnoreStringsRegexp(String aIgnoreStringsRegexp)", "+    public void setIgnoreStringsRegexp(String ignoreStringsRegexp)", "-        if ((aIgnoreStringsRegexp != null)", "-            && (aIgnoreStringsRegexp.length() > 0))", "+        if ((ignoreStringsRegexp != null)", "+            && (ignoreStringsRegexp.length() > 0))", "-            mPattern = Utils.getPattern(aIgnoreStringsRegexp);", "+            pattern = Utils.getPattern(ignoreStringsRegexp);", "-            mPattern = null;", "+            pattern = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c21376a9f03e9de10326f620790f0f7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        final Deque<LexicalFrame> aFrameStack = Lists.newLinkedList();", "-        aFrameStack.add(new GlobalFrame());", "+        final Deque<LexicalFrame> frameStack = Lists.newLinkedList();", "+        frameStack.add(new GlobalFrame());", "-        mFrames = Maps.newHashMap();", "+        frames = Maps.newHashMap();", "-        DetailAST curNode = aRootAST;", "+        DetailAST curNode = rootAST;", "-            collectDeclarations(aFrameStack, curNode);", "+            collectDeclarations(frameStack, curNode);", "-                endCollectingDeclarations(aFrameStack, curNode);", "+                endCollectingDeclarations(frameStack, curNode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d2ee324b3c1c30ff5643d09e7c4e7a9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "7d097b6fa682f8dcfedd95da2db8fed980c51705", "commitAfterChange": "d8286130e83dc672d30cd00eddbf6b5f77112521", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock aCmt,                                              JavadocTagType tagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock aCmt,                                              JavadocTagType aTagType)", "diff": ["-                                             JavadocTagType tagType)", "+                                             JavadocTagType aTagType)", "-        Pattern blockTagPattern = Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "+        Pattern blockTagPattern =", "+            Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "-            if ((tagType.equals(JavadocTagType.ALL) ||", "-                  tagType.equals(JavadocTagType.BLOCK))", "-                && blockTagMatcher.find()) {", "+            if ((aTagType.equals(JavadocTagType.ALL) || aTagType", "+                    .equals(JavadocTagType.BLOCK)) && blockTagMatcher.find())", "+            {", "-                int line = aCmt.getStartLineNo() + i;", "+                final int line = aCmt.getStartLineNo() + i;", "-                    tags.add(new JavadocTag(line, col, tagName, content.trim()));", "+                    tags.add(", "+                        new JavadocTag(line, col, tagName, content.trim()));", "-            else if (tagType.equals(JavadocTagType.ALL) ||", "-                     tagType.equals(JavadocTagType.INLINE)) {", "+            else if (aTagType.equals(JavadocTagType.ALL)", "+                    || aTagType.equals(JavadocTagType.INLINE))", "+            {", "-                Pattern commentPattern = Utils.getPattern(\"^\\\\s*(?:/\\\\*{2,}|\\\\*+)\\\\s*(.*)\");", "-                Matcher commentMatcher = commentPattern.matcher(s);", "+                final Pattern commentPattern =", "+                    Utils.getPattern(\"^\\\\s*(?:/\\\\*{2,}|\\\\*+)\\\\s*(.*)\");", "+                final Matcher commentMatcher = commentPattern.matcher(s);", "-                Pattern tagPattern = Utils.getPattern(\".*?\\\\{@(\\\\p{Alpha}+)\\\\s+(.*?)\\\\}\");", "-                Matcher tagMatcher = tagPattern.matcher(commentContents);", "+                final Pattern tagPattern =", "+                    Utils.getPattern(\".*?\\\\{@(\\\\p{Alpha}+)\\\\s+(.*?)\\\\}\");", "+                final Matcher tagMatcher = tagPattern.matcher(commentContents);", "-                        String tagName = tagMatcher.group(1);", "-                        String tagValue = tagMatcher.group(2).trim();", "-                        int line = aCmt.getStartLineNo() + i;", "+                        final String tagName = tagMatcher.group(1);", "+                        final String tagValue = tagMatcher.group(2).trim();", "+                        final int line = aCmt.getStartLineNo() + i;", "-                            tags.add(new JavadocTag(", "-                                line, col, tagName, tagValue));", "+                            tags.add(new JavadocTag(line, col, tagName,", "+                                    tagValue));", "-                            invalidTags.add(new InvalidJavadocTag(", "-                                line, col, tagName));", "+                            invalidTags.add(new InvalidJavadocTag(line, col,", "+                                    tagName));", "-                    //else Error: Unexpected match count for inline JavaDoc tag!", "+                    // else Error: Unexpected match count for inline JavaDoc", "+                    // tag!", "-            blockTagPattern = Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "+            blockTagPattern =", "+                Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d30dd98bcd857c5f7e917c6efc840f0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public static List<String> getTypeParameterNames(final DetailAST aNode)", "signatureAfterChange": "     public static List<String> getTypeParameterNames(final DetailAST node)", "diff": ["-    public static List<String> getTypeParameterNames(final DetailAST aNode)", "+    public static List<String> getTypeParameterNames(final DetailAST node)", "-            aNode.findFirstToken(TokenTypes.TYPE_PARAMETERS);", "+            node.findFirstToken(TokenTypes.TYPE_PARAMETERS);", "-        final List<String> typeParamNames = Lists.newArrayList();", "+        final List<String> typeParanames = Lists.newArrayList();", "-            typeParamNames.add(", "+            typeParanames.add(", "-                    typeParamNames.add(", "+                    typeParanames.add(", "-        return typeParamNames;", "+        return typeParanames;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e9b869c10b3f62857d99c2b8e811edf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mCurrentVariables.clear();", "-        mVariableStack.clear();", "+        currentVariables.clear();", "+        variableStack.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed8b431ef9c0d2b19740b83b5c18f23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void visitClassDef(DetailAST aAST)", "signatureAfterChange": "     private void visitClassDef(DetailAST ast)", "diff": ["-    private void visitClassDef(DetailAST aAST)", "+    private void visitClassDef(DetailAST ast)", "-            aAST.findFirstToken(TokenTypes.IDENT).getText();", "-        if (isAbstract(aAST)) {", "+            ast.findFirstToken(TokenTypes.IDENT).getText();", "+        if (isAbstract(ast)) {", "-            if (!mIgnoreName && !isMatchingClassName(className)) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "+            if (!ignoreName && !isMatchingClassName(className)) {", "+                log(ast.getLineNo(), ast.getColumnNo(),", "-        else if (!mIgnoreModifier && isMatchingClassName(className)) {", "-            log(aAST.getLineNo(), aAST.getColumnNo(),", "+        else if (!ignoreModifier && isMatchingClassName(className)) {", "+            log(ast.getLineNo(), ast.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2edef23a48a4aff95185e5ccd6f1df95", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void setPublicMemberPattern(String aPattern)", "signatureAfterChange": "     public void setPublicMemberPattern(String pattern)", "diff": ["-    public void setPublicMemberPattern(String aPattern)", "+    public void setPublicMemberPattern(String pattern)", "-            mPublicMemberPattern = Utils.getPattern(aPattern);", "-            mPublicMemberFormat = aPattern;", "+            publicMemberPattern = Utils.getPattern(pattern);", "+            publicMemberFormat = pattern;", "-            throw new ConversionException(\"unable to parse \" + aPattern, e);", "+            throw new ConversionException(\"unable to parse \" + pattern, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2edf0e01f5398a81b0cb8ce2afe1ba70", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected int getLineNumber(List<String> aLines, String aKeyNane)", "signatureAfterChange": "     protected int getLineNumber(List<String> lines, String keyName)", "diff": ["-    protected int getLineNumber(List<String> aLines, String aKeyNane)", "+    protected int getLineNumber(List<String> lines, String keyName)", "-                \"^\" + aKeyNane.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:=].*$\";", "+                \"^\" + keyName.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:=].*$\";", "-        for (String line : aLines) {", "+        for (String line : lines) {", "-        if (lineNumber > aLines.size()) {", "+        if (lineNumber > lines.size()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f682d1e804464b2d1eca1b2413c4e3a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWarningsFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Override     public boolean accept(AuditEvent aEvent)", "signatureAfterChange": "     @Override     public boolean accept(AuditEvent event)", "diff": ["-    public boolean accept(AuditEvent aEvent)", "+    public boolean accept(AuditEvent event)", "-        return !SuppressWarningsHolder.isSuppressed(aEvent.getSourceName(),", "-            aEvent.getLine(), aEvent.getColumn());", "+        return !SuppressWarningsHolder.isSuppressed(event.getSourceName(),", "+            event.getLine(), event.getColumn());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ff22d94a47c6f894743d1b1fd00b54f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "7166b6a1d07452b72cf6f62ae2afe9846b96ad91", "commitAfterChange": "47802121745d9113b54cdb2d8ccef59e74ce3e72", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static Configuration loadConfiguration(         String aConfig, Properties aOverrideProps)         throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(         String aConfig, PropertyResolver aOverridePropsResolver)         throws CheckstyleException", "diff": ["-        String aConfig, Properties aOverrideProps)", "+        String aConfig, PropertyResolver aOverridePropsResolver)", "-                new ConfigurationLoader(aOverrideProps);", "+                new ConfigurationLoader(aOverridePropsResolver);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30364c989bbf9f05410eca0b16e047d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void visitMethod(final DetailAST aMethod)", "signatureAfterChange": "     private void visitMethod(final DetailAST method)", "diff": ["-    private void visitMethod(final DetailAST aMethod)", "+    private void visitMethod(final DetailAST method)", "-        if (!aMethod.branchContains(TokenTypes.PARAMETER_DEF)) {", "+        if (!method.branchContains(TokenTypes.PARAMETER_DEF)) {", "-            aMethod.findFirstToken(TokenTypes.MODIFIERS);", "+            method.findFirstToken(TokenTypes.MODIFIERS);", "-            aMethod.findFirstToken(TokenTypes.PARAMETERS);", "+            method.findFirstToken(TokenTypes.PARAMETERS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "305f23bd7202646836fea0dfc8a3ef4f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int lineNo = aAST.getLineNo();", "+        final int lineNo = ast.getLineNo();", "-            log(lineNo, \"type.missingTag\", mTag);", "+            log(lineNo, \"type.missingTag\", tag);", "-            checkTag(lineNo, cmt.getText(), mTag, mTagRE, mTagFormatRE,", "-                mTagFormat);", "+            checkTag(lineNo, cmt.getText(), tag, tagRE, tagFormatRE,", "+                tagFormat);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30aa1c2b0e6d5930eaa69ab10b717d53", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ParameterNumberCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST params = aAST.findFirstToken(TokenTypes.PARAMETERS);", "+        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        if (count > mMax && !ignoreNumberOfParameters(aAST)) {", "-            final DetailAST name = aAST.findFirstToken(TokenTypes.IDENT);", "-            log(name.getLineNo(), name.getColumnNo(), \"maxParam\", mMax, count);", "+        if (count > max && !ignoreNumberOfParameters(ast)) {", "+            final DetailAST name = ast.findFirstToken(TokenTypes.IDENT);", "+            log(name.getLineNo(), name.getColumnNo(), \"maxParam\", max, count);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30d04e42121fc285f4afa5c6d3d4fdbb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableCellRenderer.java", "commitBeforeChange": "d814d1352b63136a400cd8f4dffd03d68c9ccd24", "commitAfterChange": "3edd1b53a5d8d407fd33d8c514db8bc1c7274fe5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public void updateUI()", "signatureAfterChange": "     @Override     public void updateUI()", "diff": ["-            final DefaultTreeCellRenderer dtcr = (DefaultTreeCellRenderer) tcr;", "+            final DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) tcr;", "-            // dtcr.setBorderSelectionColor(null);", "-            dtcr.setTextSelectionColor(UIManager.getColor(\"Table.selectionForeground\"));", "-            dtcr.setBackgroundSelectionColor(UIManager.getColor(\"Table.selectionBackground\"));", "+            // renderer.setBorderSelectionColor(null);", "+            renderer.setTextSelectionColor(UIManager.getColor(\"Table.selectionForeground\"));", "+            renderer.setBackgroundSelectionColor(UIManager.getColor(\"Table.selectionBackground\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "317df19e23606762143f861667bd692d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public boolean matches(byte[] aBytes)", "signatureAfterChange": "     public boolean matches(byte[] bytes)", "diff": ["-    public boolean matches(byte[] aBytes)", "+    public boolean matches(byte[] bytes)", "-        final String s = new String(aBytes);", "-        return s.equals(mLineSeparator);", "+        final String s = new String(bytes);", "+        return s.equals(lineSeparator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31cafca8b1ab2f7749f626a13b773b87", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "a13ebd482ce5dd891ba99d4c22a7cd5ff7d8e2dc", "commitAfterChange": "dad4fa599aa3570980fcaff4cb5f37941847a7a1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testNoClassLoaderNoModuleFactory() throws Exception", "signatureAfterChange": "      @Test     public void testNoClassLoaderNoModuleFactory() throws Exception", "diff": ["-        final Checker c = new Checker();", "+        final Checker checker = new Checker();", "-            c.finishLocalSetup();", "+            checker.finishLocalSetup();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3219455c6ea595d93313fbba9d5d4832", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void checkStyleType(final DetailAST aAnnotation)", "signatureAfterChange": "     private void checkStyleType(final DetailAST annotation)", "diff": ["-    private void checkStyleType(final DetailAST aAnnotation)", "+    private void checkStyleType(final DetailAST annotation)", "-        if (ElementStyle.IGNORE.equals(this.mStyle)", "-            || this.mStyle == null)", "+        if (ElementStyle.IGNORE.equals(this.style)", "+            || this.style == null)", "-        if (ElementStyle.COMPACT_NO_ARRAY.equals(this.mStyle)) {", "-            this.checkCompactNoArrayStyle(aAnnotation);", "+        if (ElementStyle.COMPACT_NO_ARRAY.equals(this.style)) {", "+            this.checkCompactNoArrayStyle(annotation);", "-        else if (ElementStyle.COMPACT.equals(this.mStyle)) {", "-            this.checkCompactStyle(aAnnotation);", "+        else if (ElementStyle.COMPACT.equals(this.style)) {", "+            this.checkCompactStyle(annotation);", "-        else if (ElementStyle.EXPANDED.equals(this.mStyle)) {", "-            this.checkExpandedStyle(aAnnotation);", "+        else if (ElementStyle.EXPANDED.equals(this.style)) {", "+            this.checkExpandedStyle(annotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "325fcfe4466711560e7ba026b6b33c2b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "02ae6023b5b6f66e495393a6f87e4beb4b4ab3d0", "commitAfterChange": "584f7ee1232be96284255540e7249023c327ca8f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "         public Token(String text, int line, int column)", "signatureAfterChange": "         public Token(String text, int lineNo, int columnNo)", "diff": ["-        public Token(String text, int line, int column) {", "+        public Token(String text, int lineNo, int columnNo) {", "-            this.line = line;", "-            this.column = column;", "+            this.lineNo = lineNo;", "+            this.columnNo = columnNo;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33311e1127d85f9db1936f622b4ffaf5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/testinputs/com/puppycrawl/tools/checkstyle/InputEmptyStatement.java", "commitBeforeChange": "9a15d83aa778a856b091fdddf6b1807b239d3db8", "commitAfterChange": "be3f6d793cf12cba115d7a1aafd6d1affe0a4338", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void EmptyStatements()", "signatureAfterChange": "     public void EmptyStatements(boolean cond)", "diff": ["-   public void EmptyStatements()", "+   public void EmptyStatements(boolean cond)", "-      for (;;);", "+      for (;cond;);", "-      for (;;)", "+      for (;cond;)", "-      if (true)", "+      if (cond)", "-      while (true);", "+      while (cond);", "-      while (true)", "+      while (cond)", "-      while (true);", "+      while (cond);", "-      while (true);", "+      while (cond);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33c1fd0db7759a3909049c4e6c961c5e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static boolean fromPackage(String aImport, String aPkg)", "signatureAfterChange": "     private static boolean fromPackage(String importName, String pkg)", "diff": ["-    private static boolean fromPackage(String aImport, String aPkg)", "+    private static boolean fromPackage(String importName, String pkg)", "-        if (aPkg == null) {", "+        if (pkg == null) {", "-            retVal = (aImport.indexOf('.') == -1);", "+            retVal = (importName.indexOf('.') == -1);", "-            final int index = aImport.lastIndexOf('.');", "+            final int index = importName.lastIndexOf('.');", "-                final String front = aImport.substring(0, index);", "-                retVal = front.equals(aPkg);", "+                final String front = importName.substring(0, index);", "+                retVal = front.equals(pkg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34d94c265530cd9eb010011dd3f204f9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public boolean accept(int aInt)", "signatureAfterChange": "     @Override     public boolean accept(int intValue)", "diff": ["-    public boolean accept(int aInt)", "+    public boolean accept(int intValue)", "-        return mMatchValue == aInt;", "+        return matchValue == intValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3542c7d9d130960acfd9bd2ee688f59a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aAst)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST ast)", "diff": ["-    public void beginTree(DetailAST aAst)", "+    public void beginTree(DetailAST ast)", "-        mCurrentDepth = 0;", "-        mOuterNum = 0;", "+        currentDepth = 0;", "+        outerNum = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3567595d42f099f6635b5dd2be4afb83", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private ConfigurationLoader(final PropertyResolver aOverrideProps,                                 final boolean aOmitIgnoredModules)         throws ParserConfigurationException, SAXException", "signatureAfterChange": "     private ConfigurationLoader(final PropertyResolver overrideProps,                                 final boolean omitIgnoredModules)         throws ParserConfigurationException, SAXException", "diff": ["-    private ConfigurationLoader(final PropertyResolver aOverrideProps,", "-                                final boolean aOmitIgnoredModules)", "+    private ConfigurationLoader(final PropertyResolver overrideProps,", "+                                final boolean omitIgnoredModules)", "-        mSaxHandler = new InternalLoader();", "-        mOverridePropsResolver = aOverrideProps;", "-        mOmitIgnoredModules = aOmitIgnoredModules;", "+        saxHandler = new InternalLoader();", "+        overridePropsResolver = overrideProps;", "+        this.omitIgnoredModules = omitIgnoredModules;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "358a4b6ebb8c79e5e817dea254884fdf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public InputSource resolveEntity(String aPublicId, String aSystemId)         throws SAXException, IOException", "signatureAfterChange": "      @Override     public InputSource resolveEntity(String publicId, String systemId)         throws SAXException, IOException", "diff": ["-    public InputSource resolveEntity(String aPublicId, String aSystemId)", "+    public InputSource resolveEntity(String publicId, String systemId)", "-        if (mPublicIdToResourceNameMap.keySet().contains(aPublicId)) {", "+        if (publicIdToResourceNameMap.keySet().contains(publicId)) {", "-                    mPublicIdToResourceNameMap.get(aPublicId);", "+                    publicIdToResourceNameMap.get(publicId);", "-        return super.resolveEntity(aPublicId, aSystemId);", "+        return super.resolveEntity(publicId, systemId);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3616ec87a27369940c0cb114ae5bbbfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public static boolean whitespaceBefore(int aIndex, String aLine)", "signatureAfterChange": "     public static boolean whitespaceBefore(int index, String line)", "diff": ["-    public static boolean whitespaceBefore(int aIndex, String aLine)", "+    public static boolean whitespaceBefore(int index, String line)", "-        for (int i = 0; i < aIndex; i++) {", "-            if (!Character.isWhitespace(aLine.charAt(i))) {", "+        for (int i = 0; i < index; i++) {", "+            if (!Character.isWhitespace(line.charAt(i))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "362376a67419bceffc4d2cc8a679435f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "b14f255427c0b12054de2873fe300b4f4e691bd4", "commitAfterChange": "cc7aeaec906dc3c864477e3050510009b2a946ee", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void visitParameterDef(DetailAST paradef)", "signatureAfterChange": "     private void visitParameterDef(DetailAST parameterDef)", "diff": ["-    private void visitParameterDef(DetailAST paradef) {", "-        final DetailAST grandParentAST = paradef.getParent().getParent();", "+    private void visitParameterDef(DetailAST parameterDef) {", "+        final DetailAST grandParentAST = parameterDef.getParent().getParent();", "-            checkClassName(paradef);", "+            checkClassName(parameterDef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3702c57eb1611ed940dddd12d56f1d64", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void processClass(DetailAST aAST)", "signatureAfterChange": "     private void processClass(DetailAST ast)", "diff": ["-    private void processClass(DetailAST aAST)", "+    private void processClass(DetailAST ast)", "-        final DetailAST ident = aAST.findFirstToken(TokenTypes.IDENT);", "-        mCurrentClass += (\"\".equals(mCurrentClass) ? \"\" : \"$\")", "+        final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);", "+        currentClass += (\"\".equals(currentClass) ? \"\" : \"$\")", "-        processTypeParams(aAST);", "+        processTypeParams(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37369e57d646ac6d83d18ccf552b8052", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java", "commitBeforeChange": "f0ea60f77bbc5e524320b042d7a90eefbf2bd00d", "commitAfterChange": "7eb80732e99d1018810eb8cba29d2e3bec9b7ae0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public static List<String> getTypeParameterNames(final DetailAST node)", "signatureAfterChange": "     public static List<String> getTypeParameterNames(final DetailAST node)", "diff": ["-        final List<String> typeParanames = Lists.newArrayList();", "+        final List<String> typeParameterNames = Lists.newArrayList();", "-            typeParanames.add(", "-                typeParam.findFirstToken(TokenTypes.IDENT).getText());", "+            typeParameterNames.add(", "+                    typeParam.findFirstToken(TokenTypes.IDENT).getText());", "-                    typeParanames.add(", "-                        sibling.findFirstToken(TokenTypes.IDENT).getText());", "+                    typeParameterNames.add(", "+                            sibling.findFirstToken(TokenTypes.IDENT).getText());", "-        return typeParanames;", "+        return typeParameterNames;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37c2b7ba32300372cc8104e674feddae", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAst)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAst)", "+    public void leaveToken(DetailAST ast)", "-        if (aAst.getType() == TokenTypes.CLASS_DEF) {", "-            if (mClassDepth == 1) {", "-                mCurrentClass = null;", "+        if (ast.getType() == TokenTypes.CLASS_DEF) {", "+            if (classDepth == 1) {", "+                currentClass = null;", "-            mClassDepth--;", "+            classDepth--;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37d1cceb93398f99dd8a378ddfb02f94", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private DetailAST getFirstNodeInsideSwitchBlock(             DetailAST aBlock, DetailAST aVariable)", "signatureAfterChange": "     private DetailAST getFirstNodeInsideSwitchBlock(             DetailAST block, DetailAST variable)", "diff": ["-            DetailAST aBlock, DetailAST aVariable)", "+            DetailAST block, DetailAST variable)", "-        if (!isVariableInOperatorExpr(aBlock, aVariable)) {", "-            DetailAST currentNode = aBlock", "+        if (!isVariableInOperatorExpr(block, variable)) {", "+            DetailAST currentNode = block", "-                if (isChild(lastNodeInCaseGroup, aVariable)) {", "+                if (isChild(lastNodeInCaseGroup, variable)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3807111ddcc87c2a13ce8c7185d93861", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private List<JavadocTag> getValidTags(TextBlock aCmt,             JavadocUtils.JavadocTagType aTagType)", "signatureAfterChange": "     private List<JavadocTag> getValidTags(TextBlock cmt,             JavadocUtils.JavadocTagType tagType)", "diff": ["-    private List<JavadocTag> getValidTags(TextBlock aCmt,", "-            JavadocUtils.JavadocTagType aTagType)", "+    private List<JavadocTag> getValidTags(TextBlock cmt,", "+            JavadocUtils.JavadocTagType tagType)", "-        return JavadocUtils.getJavadocTags(aCmt, aTagType).getValidTags();", "+        return JavadocUtils.getJavadocTags(cmt, tagType).getValidTags();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "390532d3264064cfe9ee83e6c2c08add", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/NonEmptyAtclauseDescriptionCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitJavadocToken(DetailNode aAst)", "signatureAfterChange": "      @Override     public void visitJavadocToken(DetailNode ast)", "diff": ["-    public void visitJavadocToken(DetailNode aAst)", "+    public void visitJavadocToken(DetailNode ast)", "-        if (isEmptyTag(aAst.getParent())) {", "-            log(aAst.getLineNumber(), \"non.empty.atclause\", aAst.getText());", "+        if (isEmptyTag(ast.getParent())) {", "+            log(ast.getLineNumber(), \"non.empty.atclause\", ast.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "394e41f50cf3c3e4fa9d64558acd43b0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "     private List<ExceptionInfo> getThrows(DetailAST ast)", "signatureAfterChange": "     private List<ExceptionInfo> getThrows(DetailAST ast)", "diff": ["-                    final FullIdent fi = FullIdent.createFullIdent(child);", "-                    final ExceptionInfo ei = new ExceptionInfo(createClassInfo(new Token(fi),", "-                            getCurrentClassName()));", "-                    retVal.add(ei);", "+                    final FullIdent ident = FullIdent.createFullIdent(child);", "+                    final ExceptionInfo exceptionInfo = new ExceptionInfo(", "+                            createClassInfo(new Token(ident), getCurrentClassName()));", "+                    retVal.add(exceptionInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a8af59d752f0c2f655aaa4acdd85f65", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DescendantTokenCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void countTokens(AST aAST, int aDepth)", "signatureAfterChange": "     private void countTokens(AST ast, int depth)", "diff": ["-    private void countTokens(AST aAST, int aDepth)", "+    private void countTokens(AST ast, int depth)", "-        if (aDepth <= mMaximumDepth) {", "+        if (depth <= maximumDepth) {", "-            if (aDepth >= mMinimumDepth) {", "-                final int type = aAST.getType();", "-                if (type <= mCounts.length) {", "-                    mCounts[type - 1]++;", "+            if (depth >= minimumDepth) {", "+                final int type = ast.getType();", "+                if (type <= counts.length) {", "+                    counts[type - 1]++;", "-            AST child = aAST.getFirstChild();", "-            final int nextDepth = aDepth + 1;", "+            AST child = ast.getFirstChild();", "+            final int nextDepth = depth + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b1323ea8850becfd725532346102302", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String normalize(String aPath)", "signatureAfterChange": "     public String normalize(String normalizingPath)", "diff": ["-    public String normalize(String aPath)", "+    public String normalize(String normalizingPath)", "-        if (aPath == null) {", "-            return aPath;", "+        if (normalizingPath == null) {", "+            return normalizingPath;", "-        String path = aPath.replace('/', File.separatorChar).replace('\\\\',", "+        String path = normalizingPath.replace('/', File.separatorChar).replace('\\\\',", "-                            + aPath);", "+                            + path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b1641cb982536c41683e98c0344ef63", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setIgnoreOverriddenMethods(boolean aIgnoreOverriddenMethods)", "signatureAfterChange": "     public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods)", "diff": ["-    public void setIgnoreOverriddenMethods(boolean aIgnoreOverriddenMethods)", "+    public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods)", "-        this.mIgnoreOverriddenMethods = aIgnoreOverriddenMethods;", "+        this.ignoreOverriddenMethods = ignoreOverriddenMethods;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c1f8285412422bb0168d5a3d62473ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static DetailAST getAnnotationHolder(DetailAST aAST)", "signatureAfterChange": "     public static DetailAST getAnnotationHolder(DetailAST ast)", "diff": ["-    public static DetailAST getAnnotationHolder(DetailAST aAST)", "+    public static DetailAST getAnnotationHolder(DetailAST ast)", "-        if (aAST == null) {", "-            throw new NullPointerException(\"the aAST is null\");", "+        if (ast == null) {", "+            throw new NullPointerException(\"the ast is null\");", "-        if (aAST.getType() == TokenTypes.ENUM_CONSTANT_DEF", "-            || aAST.getType() == TokenTypes.PACKAGE_DEF)", "+        if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF", "+            || ast.getType() == TokenTypes.PACKAGE_DEF)", "-            annotationHolder = aAST.findFirstToken(TokenTypes.ANNOTATIONS);", "+            annotationHolder = ast.findFirstToken(TokenTypes.ANNOTATIONS);", "-            annotationHolder = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            annotationHolder = ast.findFirstToken(TokenTypes.MODIFIERS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cc2f1b205467e34fa2af9de71937d16", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public LineColumn lineColumn(int pos)", "signatureAfterChange": "     public LineColumn lineColumn(int pos)", "diff": ["-        final int[] lineBreaks = findLineBreaks();", "-        int lineNo = Arrays.binarySearch(lineBreaks, pos);", "+        final int[] lineBreakPositions = findLineBreaks();", "+        int lineNo = Arrays.binarySearch(lineBreakPositions, pos);", "-        final int startOfLine = lineBreaks[lineNo];", "+        final int startOfLine = lineBreakPositions[lineNo];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cef0d25ebbdc30faea7ad92ace1f944", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void checkCheckClosingParens(final DetailAST aAST)", "signatureAfterChange": "     private void checkCheckClosingParens(final DetailAST ast)", "diff": ["-    private void checkCheckClosingParens(final DetailAST aAST)", "+    private void checkCheckClosingParens(final DetailAST ast)", "-        if (ClosingParens.IGNORE.equals(this.mParens)", "-            || this.mParens == null)", "+        if (ClosingParens.IGNORE.equals(this.parens)", "+            || this.parens == null)", "-        final DetailAST paren = aAST.getLastChild();", "+        final DetailAST paren = ast.getLastChild();", "-        if (ClosingParens.ALWAYS.equals(this.mParens)", "+        if (ClosingParens.ALWAYS.equals(this.parens)", "-            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_PARENS_MISSING);", "+            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_PARENS_MISSING);", "-        else if (ClosingParens.NEVER.equals(this.mParens)", "-            && !aAST.branchContains(TokenTypes.EXPR)", "-            && !aAST.branchContains(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)", "-            && !aAST.branchContains(TokenTypes.ANNOTATION_ARRAY_INIT)", "+        else if (ClosingParens.NEVER.equals(this.parens)", "+            && !ast.branchContains(TokenTypes.EXPR)", "+            && !ast.branchContains(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)", "+            && !ast.branchContains(TokenTypes.ANNOTATION_ARRAY_INIT)", "-            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_PARENS_PRESENT);", "+            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_PARENS_PRESENT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3db966387e5b9e0f103653213f13a4a0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "          @Override         @SuppressWarnings(\"unchecked\")         public void drop(DropTargetDropEvent evt)", "signatureAfterChange": "          @Override         @SuppressWarnings(\"unchecked\")         public void drop(DropTargetDropEvent event)", "diff": ["-        public void drop(DropTargetDropEvent evt) {", "+        public void drop(DropTargetDropEvent event) {", "-                final Transferable transferable = evt.getTransferable();", "+                final Transferable transferable = event.getTransferable();", "-                    evt.acceptDrop(DnDConstants.ACTION_COPY);", "+                    event.acceptDrop(DnDConstants.ACTION_COPY);", "-                    evt.getDropTargetContext().dropComplete(true);", "+                    event.getDropTargetContext().dropComplete(true);", "-                    evt.rejectDrop();", "+                    event.rejectDrop();", "-                evt.rejectDrop();", "+                event.rejectDrop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dbf761601e2fb318f8ffa85c96f4a72", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "a13ebd482ce5dd891ba99d4c22a7cd5ff7d8e2dc", "commitAfterChange": "dad4fa599aa3570980fcaff4cb5f37941847a7a1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @SuppressWarnings(\"deprecation\")     @Test     public void testSetters() throws Exception", "signatureAfterChange": "      @SuppressWarnings(\"deprecation\")     @Test     public void testSetters() throws Exception", "diff": ["-        final Checker c = new Checker();", "-        c.setClassLoader(getClass().getClassLoader());", "-        c.setClassloader(getClass().getClassLoader());", "-        c.setBasedir(\"some\");", "-        c.setSeverity(\"ignore\");", "+        final Checker checker = new Checker();", "+        checker.setClassLoader(getClass().getClassLoader());", "+        checker.setClassloader(getClass().getClassLoader());", "+        checker.setBasedir(\"some\");", "+        checker.setSeverity(\"ignore\");", "-        c.setModuleFactory(factory);", "+        checker.setModuleFactory(factory);", "-        c.setFileExtensions((String[]) null);", "-        c.setFileExtensions(\".java\", \"xml\");", "+        checker.setFileExtensions((String[]) null);", "+        checker.setFileExtensions(\".java\", \"xml\");", "-            c.setCharset(\"UNKNOW-CHARSET\");", "+            checker.setCharset(\"UNKNOW-CHARSET\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e15afaebac48ccad025667064fece3d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private Entry<DetailAST, Integer> calculateDistanceBetweenScopes(             DetailAST aAST, DetailAST aVariable)", "signatureAfterChange": "     private Entry<DetailAST, Integer> calculateDistanceBetweenScopes(             DetailAST ast, DetailAST variable)", "diff": ["-            DetailAST aAST, DetailAST aVariable)", "+            DetailAST ast, DetailAST variable)", "-        DetailAST currentScopeAst = aAST;", "+        DetailAST currentScopeAst = ast;", "-                    if (isChild(currentStatementAst, aVariable)) {", "+                    if (isChild(currentStatementAst, variable)) {", "-                            blockWithVariableUsage, aVariable);", "+                            blockWithVariableUsage, variable);", "-                            blockWithVariableUsage, aVariable);", "+                            blockWithVariableUsage, variable);", "-                            blockWithVariableUsage, aVariable);", "+                            blockWithVariableUsage, variable);", "-                        getFirstNodeInsideTryCatchFinallyBlocks(blockWithVariableUsage, aVariable);", "+                        getFirstNodeInsideTryCatchFinallyBlocks(blockWithVariableUsage, variable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e5920ccb2ccc63d6002ced250adfad1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public DetailAST findLastNode(DetailAST aFirstNode)", "signatureAfterChange": "     public DetailAST findLastNode(DetailAST firstNode)", "diff": ["-    public DetailAST findLastNode(DetailAST aFirstNode)", "+    public DetailAST findLastNode(DetailAST firstNode)", "-        return aFirstNode.getLastChild().getPreviousSibling();", "+        return firstNode.getLastChild().getPreviousSibling();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e972c3e1243e5aee2505cb803be9ce8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/SummaryJavadocCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setForbiddenSummaryFragments(String aPattern)", "signatureAfterChange": "     public void setForbiddenSummaryFragments(String pattern)", "diff": ["-    public void setForbiddenSummaryFragments(String aPattern)", "+    public void setForbiddenSummaryFragments(String pattern)", "-        mForbiddenSummaryFragments = Utils.createPattern(aPattern);", "+        forbiddenSummaryFragments = Utils.createPattern(pattern);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eaa8d36a91b150508190935a81a9596", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PropertiesExpander.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public String resolve(String aPropertyName)", "signatureAfterChange": "     @Override     public String resolve(String propertyName)", "diff": ["-    public String resolve(String aPropertyName)", "+    public String resolve(String propertyName)", "-        return mProperties.getProperty(aPropertyName);", "+        return properties.getProperty(propertyName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3efb01f4015724cb0a1c62ba7acee07f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "18e561669b0f1c086eaa942696ab32e25b33029a", "commitAfterChange": "672244cf2f75c7425087a69beafe1133a45f130b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private static String extractBaseName(String aFileName)", "signatureAfterChange": "     private static String extractBaseName(File aFile)", "diff": ["-    private static String extractBaseName(String aFileName)", "+    private static String extractBaseName(File aFile)", "-        int k = aFileName.indexOf(\"_\");", "+        String fileName = aFile.getPath();", "+        int k = fileName.indexOf(\"_\");", "-            return aFileName.substring(0, k);", "+            return fileName.substring(0, k);", "-            return aFileName.substring(0, aFileName.indexOf(\".\"));", "+            return fileName.substring(0, fileName.indexOf(\".\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f24ba49987d43410547e3a543c239bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "ed12c276a8adde2ce44b9834b413560476110f0e", "commitAfterChange": "66d6361c27586d58ba478b0223e60c6f1c5aa7b4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setRowHeight(int rowHeight)", "signatureAfterChange": "     public void setRowHeight(int newRowHeight)", "diff": ["-    public void setRowHeight(int rowHeight)", "+    public void setRowHeight(int newRowHeight)", "-        super.setRowHeight(rowHeight);", "-        if (tree != null && tree.getRowHeight() != rowHeight) {", "+        super.setRowHeight(newRowHeight);", "+        if (tree != null && tree.getRowHeight() != newRowHeight) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f4dbe4fad807440c9becaa325bf79de", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static DetailAST annotatingWhat(DetailAST aAST)", "signatureAfterChange": "     public static DetailAST annotatingWhat(DetailAST ast)", "diff": ["-    public static DetailAST annotatingWhat(DetailAST aAST)", "+    public static DetailAST annotatingWhat(DetailAST ast)", "-        if (aAST == null) {", "-            throw new NullPointerException(\"the aAST is null\");", "+        if (ast == null) {", "+            throw new NullPointerException(\"the ast is null\");", "-        if (aAST.getType() != TokenTypes.ANNOTATION) {", "+        if (ast.getType() != TokenTypes.ANNOTATION) {", "-                \"The aAST is not an annotation. AST: \" + aAST);", "+                \"The ast is not an annotation. AST: \" + ast);", "-        return aAST.getParent().getParent();", "+        return ast.getParent().getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f9309cb49a081e6702e6a09d6424dd3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "         public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter)", "signatureAfterChange": "         public Tag(int line, int column, String text, boolean reportingOn,                    SuppressionCommentFilter filter)", "diff": ["-        public Tag(int line, int column, String text, boolean on, SuppressionCommentFilter filter) {", "+        public Tag(int line, int column, String text, boolean reportingOn,", "+                   SuppressionCommentFilter filter) {", "-            this.on = on;", "+            this.reportingOn = reportingOn;", "-                if (on) {", "+                if (reportingOn) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc90505373433bff70ac4ec558c6dc5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "91aa6578321ceb08f4b0d715f994b7a9f4abe9d7", "commitAfterChange": "3430721be200cbe2acf55c3b3d52a528638123b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void process(File[] files)", "signatureAfterChange": "     public void process(File[] aFiles)", "diff": ["-    public void process(File[] files)", "+    public void process(File[] aFiles)", "-        Set dirs = getParentDirs(files);", "+        Set dirs = getParentDirs(aFiles);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fecfbb02c0f7777785bfd995304678a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounter.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public void addException(AuditEvent aEvt, Throwable aThrowable)", "signatureAfterChange": "     @Override     public void addException(AuditEvent evt, Throwable throwable)", "diff": ["-    public void addException(AuditEvent aEvt, Throwable aThrowable)", "+    public void addException(AuditEvent evt, Throwable throwable)", "-        if (SeverityLevel.ERROR.equals(mLevel)) {", "-            mCount++;", "+        if (SeverityLevel.ERROR.equals(level)) {", "+            count++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40252177f8dd5f7e97a5547882b98df2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkTag(             int lineNo,             String[] comment,             String tag,             Pattern tagRE,             Pattern formatRE,             String format)", "signatureAfterChange": "     private void checkTag(             int lineNo,             String[] comment,             String tagName,             Pattern tagRegexp,             Pattern formatRE,             String format)", "diff": ["-            String tag,", "-            Pattern tagRE,", "+            String tagName,", "+            Pattern tagRegexp,", "-        if (tagRE == null) {", "+        if (tagRegexp == null) {", "-            final Matcher matcher = tagRE.matcher(s);", "+            final Matcher matcher = tagRegexp.matcher(s);", "-                    log(lineNo + i - comment.length, TAG_FORMAT, tag,", "+                    log(lineNo + i - comment.length, TAG_FORMAT, tagName,", "-                    logTag(lineNo + i - comment.length, tag, content);", "+                    logTag(lineNo + i - comment.length, tagName, content);", "-            log(lineNo, MISSING_TAG, tag);", "+            log(lineNo, MISSING_TAG, tagName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "409045afcb6497796e1d6a7fd6d820cc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final void setFormat(String aFormat)         throws ConversionException", "signatureAfterChange": "     public final void setFormat(String format)         throws ConversionException", "diff": ["-    public final void setFormat(String aFormat)", "+    public final void setFormat(String format)", "-        updateRegexp(aFormat, mCompileFlags);", "+        updateRegexp(format, compileFlags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "413c08bcc6e748a3130bbf4029e107ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void checkIdent(DetailAST aAST)", "signatureAfterChange": "     private void checkIdent(DetailAST ast)", "diff": ["-    private void checkIdent(DetailAST aAST)", "+    private void checkIdent(DetailAST ast)", "-        if ((mParameterNames != null) && !mParameterNames.isEmpty()) {", "-            final DetailAST identAST = aAST.getFirstChild();", "+        if ((parameterNames != null) && !parameterNames.isEmpty()) {", "+            final DetailAST identAST = ast.getFirstChild();", "-                && mParameterNames.contains(identAST.getText()))", "+                && parameterNames.contains(identAST.getText()))", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "+                log(ast.getLineNo(), ast.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41575dce64a972379f524942528ae800", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public IndentLevel suggestedChildLevel(ExpressionHandler aChild)", "signatureAfterChange": "      @Override     public IndentLevel suggestedChildLevel(ExpressionHandler child)", "diff": ["-    public IndentLevel suggestedChildLevel(ExpressionHandler aChild)", "+    public IndentLevel suggestedChildLevel(ExpressionHandler child)", "-        if (!areOnSameLine(aChild.getMainAst().getFirstChild(),", "+        if (!areOnSameLine(child.getMainAst().getFirstChild(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41c2fc2de8f6c83bf0c99c194e15c0cf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected final Class<?> resolveClass(String className,             String currentClass)", "signatureAfterChange": "     protected final Class<?> resolveClass(String resolvableClassName,             String currentClassName)", "diff": ["-    protected final Class<?> resolveClass(String className,", "-            String currentClass) {", "+    protected final Class<?> resolveClass(String resolvableClassName,", "+            String currentClassName) {", "-            return getClassResolver().resolve(className, currentClass);", "+            return getClassResolver().resolve(resolvableClassName, currentClassName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4243ce846e9258c28b5efd4dd50af30c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void addTag(String text, int line, int column, boolean on)", "signatureAfterChange": "     private void addTag(String text, int line, int column, boolean reportingOn)", "diff": ["-    private void addTag(String text, int line, int column, boolean on) {", "-        final Tag tag = new Tag(line, column, text, on, this);", "+    private void addTag(String text, int line, int column, boolean reportingOn) {", "+        final Tag tag = new Tag(line, column, text, reportingOn, this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4274df8c9f1439ad41401a193edcd5e5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void setMessage(String aMessage)", "signatureAfterChange": "     public void setMessage(String message)", "diff": ["-    public void setMessage(String aMessage)", "+    public void setMessage(String message)", "-        mMessage = (null == aMessage) ? \"\" : aMessage;", "+        message = (null == message) ? \"\" : message;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4289e5b1b55d2d8db56d6bc9c0be7dad", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static String getAlias(String aSourceName)", "signatureAfterChange": "     public static String getAlias(String sourceName)", "diff": ["-    public static String getAlias(String aSourceName)", "+    public static String getAlias(String sourceName)", "-        String checkAlias = CHECK_ALIAS_MAP.get(aSourceName);", "+        String checkAlias = CHECK_ALIAS_MAP.get(sourceName);", "-            checkAlias = getDefaultAlias(aSourceName);", "+            checkAlias = getDefaultAlias(sourceName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ba02cdde32bc65b64e677815a0ac08", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java", "commitBeforeChange": "e7547bb7ddccec6737cea118a41864fc349ea1d2", "commitAfterChange": "d220d7c3cc74490c7f2923f2ea85d00133afe98c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void checkForParams()", "signatureAfterChange": "     private void checkForParams()", "diff": ["-            final DetailAST iter =", "+            final DetailAST forIterator =", "-            checkExpressionSubtree(iter, expected, false, false);", "+            checkExpressionSubtree(forIterator, expected, false, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f0b54e024fe165986037387ac44811", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.GENERIC_START) {", "-            processStart(aAST);", "-            mDepth++;", "+        if (ast.getType() == TokenTypes.GENERIC_START) {", "+            processStart(ast);", "+            depth++;", "-        else if (aAST.getType() == TokenTypes.GENERIC_END) {", "-            processEnd(aAST);", "-            mDepth--;", "+        else if (ast.getType() == TokenTypes.GENERIC_END) {", "+            processEnd(ast);", "+            depth--;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4312534717a3cd487b1197e9ffdc4a09", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-    public void finishTree(DetailAST aRootAST)", "+    public void finishTree(DetailAST rootAST)", "-        final Set<String> keys = mStringMap.keySet();", "+        final Set<String> keys = stringMap.keySet();", "-            final List<StringInfo> hits = mStringMap.get(key);", "-            if (hits.size() > mAllowedDuplicates) {", "+            final List<StringInfo> hits = stringMap.get(key);", "+            if (hits.size() > allowedDuplicates) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "438039002999ffc57ecb62b03d341270", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private String safeGet(final Attributes aAtts, final String aName)         throws SAXException", "signatureAfterChange": "     private String safeGet(final Attributes atts, final String name)         throws SAXException", "diff": ["-    private String safeGet(final Attributes aAtts, final String aName)", "+    private String safeGet(final Attributes atts, final String name)", "-        final String retVal = aAtts.getValue(aName);", "+        final String retVal = atts.getValue(name);", "-            throw new SAXException(\"missing attribute \" + aName);", "+            throw new SAXException(\"missing attribute \" + name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4391a2c346bb91f7ab77391ea50fc5a9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void checkIdent(DetailAST aAST)", "signatureAfterChange": "     private void checkIdent(DetailAST ast)", "diff": ["-    private void checkIdent(DetailAST aAST)", "+    private void checkIdent(DetailAST ast)", "-        if ((mCurrentVariables != null) && !mCurrentVariables.isEmpty()) {", "-            final DetailAST identAST = aAST.getFirstChild();", "+        if ((currentVariables != null) && !currentVariables.isEmpty()) {", "+            final DetailAST identAST = ast.getFirstChild();", "-                && mCurrentVariables.contains(identAST.getText()))", "+                && currentVariables.contains(identAST.getText()))", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "+                log(ast.getLineNo(), ast.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44e7ceaf18ab1a9b3bda75251087ccb9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/AbstractCheckTestCase.java", "commitBeforeChange": "85db5df9c1941b1c6046769baaace4d253834e3e", "commitAfterChange": "fe6e0fd4231aaba97cf423899f93697400880c93", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public AbstractCheckTestCase(String s)", "signatureAfterChange": "      public AbstractCheckTestCase(String aName)", "diff": ["-    public AbstractCheckTestCase(String s)", "+    public AbstractCheckTestCase(String aName)", "-        super(s);", "+        super(aName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "458c1ed9939033e85b7dce9b750262e1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public static String getStrippedFileName(             final String aBasedir, final String aFileName)", "signatureAfterChange": "     public static String getStrippedFileName(             final String basedir, final String fileName)", "diff": ["-            final String aBasedir, final String aFileName)", "+            final String basedir, final String fileName)", "-        if ((aBasedir == null) || !aFileName.startsWith(aBasedir)) {", "-            stripped = aFileName;", "+        if ((basedir == null) || !fileName.startsWith(basedir)) {", "+            stripped = fileName;", "-            final int skipSep = aBasedir.endsWith(File.separator) ? 0 : 1;", "-            stripped = aFileName.substring(aBasedir.length() + skipSep);", "+            final int skipSep = basedir.endsWith(File.separator) ? 0 : 1;", "+            stripped = fileName.substring(basedir.length() + skipSep);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45d0914880bc4eccb23f83de14d9e8cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "29027109bf962f47b6a6000fdca69b5679ce4b43", "commitAfterChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (TokenTypes.INTERFACE_DEF == aAST.getType()) {", "+        if (TokenTypes.INTERFACE_DEF == ast.getType()) {", "-                aAST.findFirstToken(TokenTypes.MODIFIERS);", "+                ast.findFirstToken(TokenTypes.MODIFIERS);", "-        else if (isInterfaceOrAnnotationMember(aAST)) {", "-            final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        else if (isInterfaceOrAnnotationMember(ast)) {", "+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-                            && aAST.getType() != TokenTypes.METHOD_DEF)", "+                            && ast.getType() != TokenTypes.METHOD_DEF)", "-        else if (aAST.getType() == TokenTypes.METHOD_DEF) {", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "-                            aAST.findFirstToken(TokenTypes.MODIFIERS);", "+                            ast.findFirstToken(TokenTypes.MODIFIERS);", "-            DetailAST parent = aAST.getParent();", "+            DetailAST parent = ast.getParent();", "-            if (checkFinal && !isAnnotatedWithSafeVarargs(aAST)) {", "+            if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46920c6867d77c89739fc567d78fd29a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtils.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static String getTokenName(int iD)", "signatureAfterChange": "     public static String getTokenName(int id)", "diff": ["-    public static String getTokenName(int iD) {", "-        if (iD > TOKEN_VALUE_TO_NAME.length - 1) {", "-            throw new IllegalArgumentException(TOKEN_ID_EXCEPTION_PREFIX + iD);", "+    public static String getTokenName(int id) {", "+        if (id > TOKEN_VALUE_TO_NAME.length - 1) {", "+            throw new IllegalArgumentException(TOKEN_ID_EXCEPTION_PREFIX + id);", "-        final String name = TOKEN_VALUE_TO_NAME[iD];", "+        final String name = TOKEN_VALUE_TO_NAME[id];", "-            throw new IllegalArgumentException(TOKEN_ID_EXCEPTION_PREFIX + iD);", "+            throw new IllegalArgumentException(TOKEN_ID_EXCEPTION_PREFIX + id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "470833a2b6671dcf4c488c380e18736f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java", "commitBeforeChange": "46a52f84c014e4d25379f429f11ed3de11fe8ae7", "commitAfterChange": "07b24dd81c7648f093f2a789a7fa288d8e7eeef4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean containsJavadocTag(final TextBlock javadoc)", "signatureAfterChange": "     private boolean containsJavadocTag(final TextBlock javadoc)", "diff": ["-            final Matcher javadocNoargMatcher =", "+            final Matcher javadocNoArgMatcher =", "-            final Matcher noargMultilineStart = MATCH_DEPRECATED_MULTILINE_START.matcher(line);", "+            final Matcher noArgMultilineStart = MATCH_DEPRECATED_MULTILINE_START.matcher(line);", "-            if (javadocNoargMatcher.find()) {", "+            if (javadocNoArgMatcher.find()) {", "-            else if (noargMultilineStart.find()) {", "+            else if (noArgMultilineStart.find()) {", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47abafb403c4537ffab755fee0d00ef7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void setFirstChild(AST aAST)", "signatureAfterChange": "      @Override     public void setFirstChild(AST ast)", "diff": ["-    public void setFirstChild(AST aAST)", "+    public void setFirstChild(AST ast)", "-        mChildCount = NOT_INITIALIZED;", "-        super.setFirstChild(aAST);", "-        if (aAST != null) {", "-            ((DetailAST) aAST).setParent(this);", "+        childCount = NOT_INITIALIZED;", "+        super.setFirstChild(ast);", "+        if (ast != null) {", "+            ((DetailAST) ast).setParent(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47dea9e404d2dc57dedafa2fac9c2c59", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private boolean hasAllowedAnnotations(DetailAST aMethodDef)", "signatureAfterChange": "     private boolean hasAllowedAnnotations(DetailAST methodDef)", "diff": ["-    private boolean hasAllowedAnnotations(DetailAST aMethodDef)", "+    private boolean hasAllowedAnnotations(DetailAST methodDef)", "-        final DetailAST modifiersNode = aMethodDef.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiersNode = methodDef.findFirstToken(TokenTypes.MODIFIERS);", "-            if (mAllowedAnnotations.contains(identNode.getText())) {", "+            if (allowedAnnotations.contains(identNode.getText())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48938410c09a11e69a5e3a1734ef88f0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public void setProperties(File aProps)", "signatureAfterChange": "     public void setProperties(File props)", "diff": ["-    public void setProperties(File aProps)", "+    public void setProperties(File props)", "-        mPropertiesFile = aProps;", "+        propertiesFile = props;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48c58ec177105f38f479a093ad11c217", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void checkEmptyJavadoc(TextBlock aComment)", "signatureAfterChange": "     private void checkEmptyJavadoc(TextBlock comment)", "diff": ["-    private void checkEmptyJavadoc(TextBlock aComment)", "+    private void checkEmptyJavadoc(TextBlock comment)", "-        final String commentText = getCommentText(aComment.getText());", "+        final String commentText = getCommentText(comment.getText());", "-            log(aComment.getStartLineNo(), \"javadoc.empty\");", "+            log(comment.getStartLineNo(), \"javadoc.empty\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aaeffc0774fa5e662c77e1889672667", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        super.beginTree(aRootAST);", "-        mStringMap.clear();", "+        super.beginTree(rootAST);", "+        stringMap.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b28ece466b0946f0a541e389d2313d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock aCmt,             JavadocTagType aTagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "diff": ["-    public static JavadocTags getJavadocTags(TextBlock aCmt,", "-            JavadocTagType aTagType)", "+    public static JavadocTags getJavadocTags(TextBlock cmt,", "+            JavadocTagType tagType)", "-        final String[] text = aCmt.getText();", "+        final String[] text = cmt.getText();", "-            if ((aTagType.equals(JavadocTagType.ALL) || aTagType", "+            if ((tagType.equals(JavadocTagType.ALL) || tagType", "-                final int line = aCmt.getStartLineNo() + i;", "+                final int line = cmt.getStartLineNo() + i;", "-                    col += aCmt.getStartColNo();", "+                    col += cmt.getStartColNo();", "-            else if (aTagType.equals(JavadocTagType.ALL)", "-                    || aTagType.equals(JavadocTagType.INLINE))", "+            else if (tagType.equals(JavadocTagType.ALL)", "+                    || tagType.equals(JavadocTagType.INLINE))", "-                // Match JavaDoc text after comment characters", "+                // Match Javadoc text after comment characters", "-                        final int line = aCmt.getStartLineNo() + i;", "+                        final int line = cmt.getStartLineNo() + i;", "-                            col += aCmt.getStartColNo();", "+                            col += cmt.getStartColNo();", "-                    // else Error: Unexpected match count for inline JavaDoc", "+                    // else Error: Unexpected match count for inline Javadoc"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b624f051d14c3e7be11f663b13f9c98", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void addException(AuditEvent evt, Throwable throwable)", "signatureAfterChange": "      @Override     public void addException(AuditEvent evt, Throwable throwable)", "diff": ["-        final StringWriter sw = new StringWriter();", "-        final PrintWriter pw = new PrintWriter(sw);", "-        pw.println(\"<exception>\");", "-        pw.println(\"<![CDATA[\");", "-        throwable.printStackTrace(pw);", "-        pw.println(\"]]>\");", "-        pw.println(\"</exception>\");", "-        pw.flush();", "-        writer.println(encode(sw.toString()));", "+        final StringWriter stringWriter = new StringWriter();", "+        final PrintWriter printer = new PrintWriter(stringWriter);", "+        printer.println(\"<exception>\");", "+        printer.println(\"<![CDATA[\");", "+        throwable.printStackTrace(printer);", "+        printer.println(\"]]>\");", "+        printer.println(\"</exception>\");", "+        printer.flush();", "+        this.writer.println(encode(stringWriter.toString()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bb7399f1043a1a2e4a3bd40af18cd70", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void logsStarredImportViolation(DetailAST aStartingDot)", "signatureAfterChange": "     private void logsStarredImportViolation(DetailAST startingDot)", "diff": ["-    private void logsStarredImportViolation(DetailAST aStartingDot)", "+    private void logsStarredImportViolation(DetailAST startingDot)", "-        final FullIdent name = FullIdent.createFullIdent(aStartingDot);", "-        if (isStaredImport(name) && !mExcludes.contains(name.getText())) {", "-            log(aStartingDot.getLineNo(), \"import.avoidStar\", name.getText());", "+        final FullIdent name = FullIdent.createFullIdent(startingDot);", "+        if (isStaredImport(name) && !excludes.contains(name.getText())) {", "+            log(startingDot.getLineNo(), \"import.avoidStar\", name.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bd208a62deadbe48283f35d4e47fa27", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void checkUnusedTypeParamTags(         final List<JavadocTag> aTags,         final List<String> aTypeParamNames)", "signatureAfterChange": "     private void checkUnusedTypeParamTags(         final List<JavadocTag> tags,         final List<String> typeParamNames)", "diff": ["-        final List<JavadocTag> aTags,", "-        final List<String> aTypeParamNames)", "+        final List<JavadocTag> tags,", "+        final List<String> typeParamNames)", "-        for (int i = aTags.size() - 1; i >= 0; i--) {", "-            final JavadocTag tag = aTags.get(i);", "+        for (int i = tags.size() - 1; i >= 0; i--) {", "+            final JavadocTag tag = tags.get(i);", "-                        if (!aTypeParamNames.contains(typeParamName)) {", "+                        if (!typeParamNames.contains(typeParamName)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bfaf56e56ea9f1c65332a139697a5db", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-            int i;", "-            for (i = 0; headerLineNo < headerSize && i < fileSize; i++) {", "-                final String line = lines.get(i);", "+            int index;", "+            for (index = 0; headerLineNo < headerSize && index < fileSize; index++) {", "+                final String line = lines.get(index);", "-                    log(i + 1, MSG_HEADER_MISMATCH, getHeaderLines().get(", "+                    log(index + 1, MSG_HEADER_MISMATCH, getHeaderLines().get(", "-            if (i == fileSize) {", "+            if (index == fileSize) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c8f3b55cfbe4b059de84d0645ba8ff0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private DetailAST getFirstNodeInsideIfBlock(             DetailAST aBlock, DetailAST aVariable)", "signatureAfterChange": "     private DetailAST getFirstNodeInsideIfBlock(             DetailAST block, DetailAST variable)", "diff": ["-            DetailAST aBlock, DetailAST aVariable)", "+            DetailAST block, DetailAST variable)", "-        if (!isVariableInOperatorExpr(aBlock, aVariable)) {", "-            DetailAST currentNode = aBlock.getLastChild();", "+        if (!isVariableInOperatorExpr(block, variable)) {", "+            DetailAST currentNode = block.getLastChild();", "-                if (isChild(previousNode, aVariable)) {", "+                if (isChild(previousNode, variable)) {", "-                else if (isChild(currentNode, aVariable)) {", "+                else if (isChild(currentNode, variable)) {", "-                    && isChild(currentNode, aVariable))", "+                    && isChild(currentNode, variable))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d18753b887dd0dd50faf582280a08a4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void raiseCounter(DetailAST aMethod)", "signatureAfterChange": "     private void raiseCounter(DetailAST method)", "diff": ["-    private void raiseCounter(DetailAST aMethod)", "+    private void raiseCounter(DetailAST method)", "-        final MethodCounter actualCounter = mCounters.peek();", "-        final DetailAST temp = aMethod.findFirstToken(TokenTypes.MODIFIERS);", "+        final MethodCounter actualCounter = counters.peek();", "+        final DetailAST temp = method.findFirstToken(TokenTypes.MODIFIERS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4dddf9291c21ab4936bf44606ad3d608", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FilterSet.java", "commitBeforeChange": "7abbd6af2f63a9e5bfa067f3058b5a3e738971de", "commitAfterChange": "8d242382f8bb77488b6da23bdd0d2d61583703fc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public boolean accept(Object aObject)", "signatureAfterChange": "     public boolean accept(AuditEvent aEvent)", "diff": ["-    public boolean accept(Object aObject)", "+    public boolean accept(AuditEvent aEvent)", "-            if (!filter.accept(aObject)) {", "+            if (!filter.accept(aEvent)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e06415da64983248b3882436dfeae4d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setGroups(String[] aGroups)", "signatureAfterChange": "     public void setGroups(String[] packageGroups)", "diff": ["-    public void setGroups(String[] aGroups)", "+    public void setGroups(String[] packageGroups)", "-        mGroups = new Pattern[aGroups.length];", "+        groups = new Pattern[packageGroups.length];", "-        for (int i = 0; i < aGroups.length; i++) {", "-            String pkg = aGroups[i];", "+        for (int i = 0; i < packageGroups.length; i++) {", "+            String pkg = packageGroups[i];", "-            mGroups[i] = grp;", "+            groups[i] = grp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e4f83a880f6a345a5c0276ac79c0a42", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void setIgnoreComments(boolean aIgnore)", "signatureAfterChange": "     public void setIgnoreComments(boolean ignore)", "diff": ["-    public void setIgnoreComments(boolean aIgnore)", "+    public void setIgnoreComments(boolean ignore)", "-        if (aIgnore) {", "-            mOptions.setSuppressor(mSuppressor);", "+        if (ignore) {", "+            options.setSuppressor(suppressor);", "-            mOptions.setSuppressor(NeverSuppress.INSTANCE);", "+            options.setSuppressor(NeverSuppress.INSTANCE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5028ad0165ae60dc0e29cd4f2172d0c8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private Class<?> resolveQualifiedName(final String aName)", "signatureAfterChange": "     private Class<?> resolveQualifiedName(final String name)", "diff": ["-    private Class<?> resolveQualifiedName(final String aName)", "+    private Class<?> resolveQualifiedName(final String name)", "-            if (isLoadable(aName)) {", "-                return safeLoad(aName);", "+            if (isLoadable(name)) {", "+                return safeLoad(name);", "-            final int dot = aName.lastIndexOf(\".\");", "+            final int dot = name.lastIndexOf(\".\");", "-                    aName.substring(0, dot) + \"$\" + aName.substring(dot + 1);", "+                    name.substring(0, dot) + \"$\" + name.substring(dot + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "507c088ec37d7cc0157667efece584d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public final void setCustomImportOrderRules(final String aInputCustomImportOrder)", "signatureAfterChange": "     public final void setCustomImportOrderRules(final String inputCustoimportOrder)", "diff": ["-    public final void setCustomImportOrderRules(final String aInputCustomImportOrder)", "+    public final void setCustomImportOrderRules(final String inputCustoimportOrder)", "-        mCustomImportOrderRules.clear();", "+        customImportOrderRules.clear();", "-            for (String currentState : aInputCustomImportOrder", "+            for (String currentState : inputCustoimportOrder", "-                addRulesToList(currentState);", "+                addRuleastoList(currentState);", "-            mCustomImportOrderRules.add(NON_GROUP_RULE_GROUP);", "+            customImportOrderRules.add(NON_GROUP_RULE_GROUP);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50f74e3ce65381194f7b1065590eb09d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private static DetailAST getNthChild(DetailAST aAST, int aIndex)", "signatureAfterChange": "     private static DetailAST getNthChild(DetailAST ast, int index)", "diff": ["-    private static DetailAST getNthChild(DetailAST aAST, int aIndex)", "+    private static DetailAST getNthChild(DetailAST ast, int index)", "-        DetailAST child = aAST.getFirstChild();", "+        DetailAST child = ast.getFirstChild();", "-            for (int i = 0; i < aIndex && child != null; ++i) {", "+            for (int i = 0; i < index && child != null; ++i) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51192b2b8735544419d53af4a6199da0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)", "signatureAfterChange": "     private void checkAnnotations(DetailAST modifierNode, int correctLevel)", "diff": ["-    private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)", "+    private void checkAnnotations(DetailAST modifierNode, int correctLevel)", "-        DetailAST annotation = aModifierNode.getFirstChild();", "+        DetailAST annotation = modifierNode.getFirstChild();", "-            else if (annotation.getColumnNo() != aCorrectLevel && !hasNodeBefore(annotation)) {", "+            else if (annotation.getColumnNo() != correctLevel && !hasNodeBefore(annotation)) {", "-                    getAnnotationName(annotation), annotation.getColumnNo(), aCorrectLevel);", "+                    getAnnotationName(annotation), annotation.getColumnNo(), correctLevel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51475e03447bfaf0fdc8b6ddbc7f03fa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/DetectorOptions.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public DetectorOptions setSuppressor(MatchSuppressor aSup)", "signatureAfterChange": "     public DetectorOptions setSuppressor(MatchSuppressor sup)", "diff": ["-    public DetectorOptions setSuppressor(MatchSuppressor aSup)", "+    public DetectorOptions setSuppressor(MatchSuppressor sup)", "-        mSuppressor = aSup;", "+        suppressor = sup;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "515ce61b44302d82dc97a51da5128270", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public boolean isReference(String aEnt)", "signatureAfterChange": "     public boolean isReference(String ent)", "diff": ["-    public boolean isReference(String aEnt)", "+    public boolean isReference(String ent)", "-        if (!(aEnt.charAt(0) == '&') || !aEnt.endsWith(\";\")) {", "+        if (!(ent.charAt(0) == '&') || !ent.endsWith(\";\")) {", "-        if (aEnt.charAt(1) == '#') {", "+        if (ent.charAt(1) == '#') {", "-            if (aEnt.charAt(2) == 'x') {", "+            if (ent.charAt(2) == 'x') {", "-                    aEnt.substring(prefixLength, aEnt.length() - 1), radix);", "+                    ent.substring(prefixLength, ent.length() - 1), radix);", "-        final String name = aEnt.substring(1, aEnt.length() - 1);", "+        final String name = ent.substring(1, ent.length() - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "526b1fd04c944bf67e1f47d481559afd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      protected void verify(Checker aC,                           String aProcessedFilename,                           String aMessageFileName,                           String[] aExpected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker c,                           String processedFilename,                           String messageFileName,                           String[] expected)             throws Exception", "diff": ["-    protected void verify(Checker aC,", "-                          String aProcessedFilename,", "-                          String aMessageFileName,", "-                          String[] aExpected)", "+    protected void verify(Checker c,", "+                          String processedFilename,", "+                          String messageFileName,", "+                          String[] expected)", "-        verify(aC,", "-                new File[]{new File(aProcessedFilename)},", "-                aMessageFileName, aExpected);", "+        verify(c,", "+                new File[]{new File(processedFilename)},", "+                messageFileName, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53d07be5da0bfa73d215bf9bd06aac64", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/OuterTypeNumberCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST aAst)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST ast)", "diff": ["-    public void finishTree(DetailAST aAst)", "+    public void finishTree(DetailAST ast)", "-        if (mMax < mOuterNum) {", "-            log(aAst, \"maxOuterTypes\", mOuterNum, mMax);", "+        if (max < outerNum) {", "+            log(ast, \"maxOuterTypes\", outerNum, max);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "544f441944aeb228be75167074b14084", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static Set<String> collectReferencesFromJavadoc(TextBlock cmt)", "signatureAfterChange": "     private static Set<String> collectReferencesFromJavadoc(TextBlock textBlock)", "diff": ["-    private static Set<String> collectReferencesFromJavadoc(TextBlock cmt) {", "+    private static Set<String> collectReferencesFromJavadoc(TextBlock textBlock) {", "-                : getValidTags(cmt, JavadocUtils.JavadocTagType.INLINE)) {", "+                : getValidTags(textBlock, JavadocUtils.JavadocTagType.INLINE)) {", "-                : getValidTags(cmt, JavadocUtils.JavadocTagType.BLOCK)) {", "+                : getValidTags(textBlock, JavadocUtils.JavadocTagType.BLOCK)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "548b1516e833c9e6bc3673afd685d938", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     private static List<JavadocTag> getMultilineArgTags(final Matcher argMultilineStart,             final int column, final String[] lines, final int lineIndex, final int tagLine)", "signatureAfterChange": "     private static List<JavadocTag> getMultilineArgTags(final Matcher argMultilineStart,             final int column, final String[] lines, final int lineIndex, final int tagLine)", "diff": ["-        final String p1 = argMultilineStart.group(1);", "-        final String p2 = argMultilineStart.group(2);", "+        final String param1 = argMultilineStart.group(1);", "+        final String param2 = argMultilineStart.group(2);", "-                    tags.add(new JavadocTag(tagLine, column, p1, p2));", "+                    tags.add(new JavadocTag(tagLine, column, param1, param2));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55472ea1f9d3f01029e0abe030f548a5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java", "commitBeforeChange": "dfc803a1cc442bafeb5aa375f0d9f0a31d655ff2", "commitAfterChange": "351d79582d7a6cea56af9d61f45973d3cf73a484", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void setIgnoreOverridenMethods(boolean ignoreOverridenMethods)", "signatureAfterChange": "     public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods)", "diff": ["-    public void setIgnoreOverridenMethods(boolean ignoreOverridenMethods)", "+    public void setIgnoreOverriddenMethods(boolean ignoreOverriddenMethods)", "-        this.ignoreOverridenMethods = ignoreOverridenMethods;", "+        this.ignoreOverriddenMethods = ignoreOverriddenMethods;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ef092dcbe17b3e17515c44a49681d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        super.beginTree(aRootAST);", "-        mPkgName = null;", "-        mImports.clear();", "-        mInstantiations.clear();", "-        mClassNames.clear();", "+        super.beginTree(rootAST);", "+        pkgName = null;", "+        imports.clear();", "+        instantiations.clear();", "+        classNames.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "569607c7319c90687a477857572d141e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private static DetailAST createSlCommentNode(Token aToken)", "signatureAfterChange": "     private static DetailAST createSlCommentNode(Token token)", "diff": ["-    private static DetailAST createSlCommentNode(Token aToken)", "+    private static DetailAST createSlCommentNode(Token token)", "-        slComment.setColumnNo(aToken.getColumn() - 1);", "-        slComment.setLineNo(aToken.getLine());", "+        slComment.setColumnNo(token.getColumn() - 1);", "+        slComment.setLineNo(token.getLine());", "-        slCommentContent.initialize(aToken);", "+        slCommentContent.initialize(token);", "-        slCommentContent.setColumnNo(aToken.getColumn() - 1 + 2);", "-        slCommentContent.setLineNo(aToken.getLine());", "-        slCommentContent.setText(aToken.getText());", "+        slCommentContent.setColumnNo(token.getColumn() - 1 + 2);", "+        slCommentContent.setLineNo(token.getLine());", "+        slCommentContent.setText(token.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56a0cb64cd951a77dd3ca64ae1796220", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public int compareTo(LineColumn aLineColumn)", "signatureAfterChange": "     @Override     public int compareTo(LineColumn lineColumn)", "diff": ["-    public int compareTo(LineColumn aLineColumn)", "+    public int compareTo(LineColumn lineColumn)", "-        return (this.getLine() != aLineColumn.getLine())", "-            ? this.getLine() - aLineColumn.getLine()", "-            : this.getColumn() - aLineColumn.getColumn();", "+        return (this.getLine() != lineColumn.getLine())", "+            ? this.getLine() - lineColumn.getLine()", "+            : this.getColumn() - lineColumn.getColumn();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "570f937f72e3c55b325a0f60d3c66b08", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void setOmitIgnoredModules(boolean aOmit)", "signatureAfterChange": "     public void setOmitIgnoredModules(boolean omit)", "diff": ["-    /** @param aOmit whether to omit ignored modules */", "-    public void setOmitIgnoredModules(boolean aOmit)", "+    /** @param omit whether to omit ignored modules */", "+    public void setOmitIgnoredModules(boolean omit)", "-        mOmitIgnoredModules = aOmit;", "+        omitIgnoredModules = omit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5719e4baf601caa25e11aae4ef2123f9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "52e2087c404986f8e12cd8579be7b2333961e1a3", "commitAfterChange": "c38185458ab824874b8465c46b4dc42646440aaa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     PropertyCacheFile(Configuration aCurrentConfig, String aFileName)", "signatureAfterChange": "     PropertyCacheFile(Configuration aCurrentConfig, String aFileName)", "diff": ["-        final String fileName = aFileName;", "-        if (fileName != null) {", "+        if (aFileName != null) {", "-                inStream = new FileInputStream(fileName);", "+                inStream = new FileInputStream(aFileName);", "-        mDetailsFile = (setInActive) ? null : fileName;", "+        mDetailsFile = (setInActive) ? null : aFileName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57437942b33f535a09f14823ecfbe0eb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public final void setFileExtensions(String[] aExtensions)", "signatureAfterChange": "     public final void setFileExtensions(String[] extensions)", "diff": ["-    public final void setFileExtensions(String[] aExtensions)", "+    public final void setFileExtensions(String[] extensions)", "-        if (aExtensions == null) {", "-            mFileExtensions = null;", "+        if (extensions == null) {", "+            fileExtensions = null;", "-        mFileExtensions = new String[aExtensions.length];", "-        for (int i = 0; i < aExtensions.length; i++) {", "-            final String extension = aExtensions[i];", "+        fileExtensions = new String[extensions.length];", "+        for (int i = 0; i < extensions.length; i++) {", "+            final String extension = extensions[i];", "-                mFileExtensions[i] = extension;", "+                fileExtensions[i] = extension;", "-                mFileExtensions[i] = \".\" + extension;", "+                fileExtensions[i] = \".\" + extension;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "574be362965699f83385170a86440a8a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public void auditStarted(AuditEvent aEvt)", "signatureAfterChange": "     @Override     public void auditStarted(AuditEvent evt)", "diff": ["-    public void auditStarted(AuditEvent aEvt)", "+    public void auditStarted(AuditEvent evt)", "-        mWriter.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");", "+        writer.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");", "-        mWriter.println(\"<checkstyle version=\\\"\" + version + \"\\\">\");", "+        writer.println(\"<checkstyle version=\\\"\" + version + \"\\\">\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57f600e5aca65911e78e731b236f5a01", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     @Override     public void addException(AuditEvent aEvt, Throwable aThrowable)", "signatureAfterChange": "     @Override     public void addException(AuditEvent evt, Throwable throwable)", "diff": ["-    public void addException(AuditEvent aEvt, Throwable aThrowable)", "+    public void addException(AuditEvent evt, Throwable throwable)", "-        aThrowable.printStackTrace(pw);", "+        throwable.printStackTrace(pw);", "-        mWriter.println(encode(sw.toString()));", "+        writer.println(encode(sw.toString()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5836dcaaeb8f9182f78752cf6a9ef40a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public void reportSingleLineComment(String aType, int aStartLineNo,             int aStartColNo)", "signatureAfterChange": "     @Override     public void reportSingleLineComment(String type, int startLineNo,             int startColNo)", "diff": ["-    public void reportSingleLineComment(String aType, int aStartLineNo,", "-            int aStartColNo)", "+    public void reportSingleLineComment(String type, int startLineNo,", "+            int startColNo)", "-        reportCppComment(aStartLineNo, aStartColNo);", "+        reportCppComment(startLineNo, startColNo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59bba05f0cf08c1d917aeec01eb221c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected boolean isMissingJavadocAllowed(final DetailAST aAST)", "signatureAfterChange": "     protected boolean isMissingJavadocAllowed(final DetailAST ast)", "diff": ["-    protected boolean isMissingJavadocAllowed(final DetailAST aAST)", "+    protected boolean isMissingJavadocAllowed(final DetailAST ast)", "-        return mAllowMissingJavadoc", "-            || (mAllowMissingPropertyJavadoc", "-                && (isSetterMethod(aAST) || isGetterMethod(aAST)))", "-            || matchesSkipRegex(aAST);", "+        return allowMissingJavadoc", "+            || (allowMissingPropertyJavadoc", "+                && (isSetterMethod(ast) || isGetterMethod(ast)))", "+            || matchesSkipRegex(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ad0500a4f0bd4909d5b330be18d32ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public static void registerAlias(String aSourceName, String aCheckAlias)", "signatureAfterChange": "     public static void registerAlias(String sourceName, String checkAlias)", "diff": ["-    public static void registerAlias(String aSourceName, String aCheckAlias)", "+    public static void registerAlias(String sourceName, String checkAlias)", "-        CHECK_ALIAS_MAP.put(aSourceName, aCheckAlias);", "+        CHECK_ALIAS_MAP.put(sourceName, checkAlias);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b567fd351a96475be1c458bda5333c7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "93587ecf374c8dd9f040fd3667efc47a3d84ff5d", "commitAfterChange": "b06e2e0015944ceaa74a10134bf06ac5c9e53782", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void visitParameterDef(DetailAST aAST)", "signatureAfterChange": "     private void visitParameterDef(DetailAST aParamDef)", "diff": ["-    private void visitParameterDef(DetailAST aAST)", "+    private void visitParameterDef(DetailAST aParamDef)", "-        final DetailAST grandParentAST = aAST.getParent().getParent();", "+        final DetailAST grandParentAST = aParamDef.getParent().getParent();", "-            checkClassName(aAST);", "+            checkClassName(aParamDef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c573ca9e6b41cfa2adb57e124ee2004", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "         int value(Scope aScope)", "signatureAfterChange": "         int value(Scope scope)", "diff": ["-        int value(Scope aScope)", "+        int value(Scope scope)", "-            final Integer value = mCounts.get(aScope);", "+            final Integer value = counts.get(scope);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c6022007262c035f54dde43fa405b5a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void parseTags(String[] aText, int aLineNo)", "signatureAfterChange": "     private void parseTags(String[] text, int lineNo)", "diff": ["-    private void parseTags(String[] aText, int aLineNo)", "+    private void parseTags(String[] text, int lineNo)", "-        final int nLines = aText.length;", "+        final int nLines = text.length;", "-        position = findChar(aText, '<', position);", "+        position = findChar(text, '<', position);", "-            if (isCommentTag(aText, position)) {", "-                position = skipHtmlComment(aText, position);", "+            if (isCommentTag(text, position)) {", "+                position = skipHtmlComment(text, position);", "-            else if (!isTag(aText, position)) {", "-                position = getNextCharPos(aText, position);", "+            else if (!isTag(text, position)) {", "+                position = getNextCharPos(text, position);", "-                final Point endTag = findChar(aText, '>', position);", "+                final Point endTag = findChar(text, '>', position);", "-                    (incompleteTag ? \"\" : getTagId(aText, position));", "+                    (incompleteTag ? \"\" : getTagId(text, position));", "-                     && (aText[endTag.getLineNo()]", "+                     && (text[endTag.getLineNo()]", "-                                position.getLineNo() + aLineNo,", "+                                position.getLineNo() + lineNo,", "-                                aText[position.getLineNo()]));", "+                                text[position.getLineNo()]));", "-            position = findChar(aText, '<', position);", "+            position = findChar(text, '<', position);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c7d0b7940238154c98773f093d2ac0d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     @Override     public int compareTo(LocalizedMessage aOther)", "signatureAfterChange": "     @Override     public int compareTo(LocalizedMessage other)", "diff": ["-    public int compareTo(LocalizedMessage aOther)", "+    public int compareTo(LocalizedMessage other)", "-        if (getLineNo() == aOther.getLineNo()) {", "-            if (getColumnNo() == aOther.getColumnNo()) {", "-                return getMessage().compareTo(aOther.getMessage());", "+        if (getLineNo() == other.getLineNo()) {", "+            if (getColumnNo() == other.getColumnNo()) {", "+                return getMessage().compareTo(other.getMessage());", "-            return (getColumnNo() < aOther.getColumnNo()) ? -1 : 1;", "+            return (getColumnNo() < other.getColumnNo()) ? -1 : 1;", "-        return (getLineNo() < aOther.getLineNo()) ? -1 : 1;", "+        return (getLineNo() < other.getLineNo()) ? -1 : 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dfa30724bfe83f5574ed7c1ab7648d2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java", "commitBeforeChange": "91aa6578321ceb08f4b0d715f994b7a9f4abe9d7", "commitAfterChange": "3430721be200cbe2acf55c3b3d52a528638123b3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean hasText(final DetailAST slistAST)", "signatureAfterChange": "     private boolean hasText(final DetailAST aSlistAST)", "diff": ["-    private boolean hasText(final DetailAST slistAST)", "+    private boolean hasText(final DetailAST aSlistAST)", "-        final DetailAST rcurlyAST = slistAST.findFirstToken(TokenTypes.RCURLY);", "+        final DetailAST rcurlyAST = aSlistAST.findFirstToken(TokenTypes.RCURLY);", "-            final int slistLineNo = slistAST.getLineNo();", "-            final int slistColNo = slistAST.getColumnNo();", "+            final int slistLineNo = aSlistAST.getLineNo();", "+            final int slistColNo = aSlistAST.getColumnNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e335921b0d4fe78fe7fa2b818c10d86", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isIgnoredParam(DetailAST aParamDef)", "signatureAfterChange": "     private boolean isIgnoredParam(DetailAST paramDef)", "diff": ["-    private boolean isIgnoredParam(DetailAST aParamDef)", "+    private boolean isIgnoredParam(DetailAST paramDef)", "-        if (mIgnorePrimitiveTypes) {", "-            final DetailAST parameterType = aParamDef.", "+        if (ignorePrimitiveTypes) {", "+            final DetailAST parameterType = paramDef.", "-            if (mPrimitiveDataTypes.contains(parameterType.getType())) {", "+            if (primitiveDataTypes.contains(parameterType.getType())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e6bc115a5ffb13bfde44d3fa25337b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final String outerTypeName = aAST.findFirstToken(TokenTypes.IDENT).getText();", "-        if (!mSeenFirstToken) {", "+        final String outerTypeName = ast.findFirstToken(TokenTypes.IDENT).getText();", "+        if (!seenFirstToken) {", "-            if (mFileName.equals(outerTypeName)) {", "-                mValidFirst = true;", "+            if (fileName.equals(outerTypeName)) {", "+                validFirst = true;", "-                mWrongType = aAST;", "+                wrongType = ast;", "-            final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-                    && aAST.getParent() == null)", "+                    && ast.getParent() == null)", "-                mHasPublic = true;", "+                hasPublic = true;", "-        mSeenFirstToken = true;", "+        seenFirstToken = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ea23e3efa1998b4dd9a6768e6e7a173", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean inTokenList(int aType, int[] aTokens)", "signatureAfterChange": "     private boolean inTokenList(int type, int[] tokens)", "diff": ["-    private boolean inTokenList(int aType, int[] aTokens)", "+    private boolean inTokenList(int type, int[] tokens)", "-        for (int i = 0; (i < aTokens.length) && !found; i++) {", "-            found = aTokens[i] == aType;", "+        for (int i = 0; (i < tokens.length) && !found; i++) {", "+            found = tokens[i] == type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f2bcf9bfb92f965b31854750b5fc146", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/CodeSelector.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private int findLastPosition(final DetailAST ast)", "signatureAfterChange": "      private int findLastPosition(final DetailAST astNode)", "diff": ["-    private int findLastPosition(final DetailAST ast) {", "-        if (ast.getChildCount() == 0) {", "-            return lines2position.get(ast.getLineNo()) + ast.getColumnNo()", "-                + ast.getText().length();", "+    private int findLastPosition(final DetailAST astNode) {", "+        if (astNode.getChildCount() == 0) {", "+            return lines2position.get(astNode.getLineNo()) + astNode.getColumnNo()", "+                + astNode.getText().length();", "-            return findLastPosition(ast.getLastChild());", "+            return findLastPosition(astNode.getLastChild());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ff68a8cbbfff7289623302dc56aa3d1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractOptionCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setOption(String aOption) throws ConversionException", "signatureAfterChange": "     public void setOption(String optionStr) throws ConversionException", "diff": ["-    public void setOption(String aOption) throws ConversionException", "+    public void setOption(String optionStr) throws ConversionException", "-            mOption = Enum.valueOf(mOptionClass, aOption.trim().toUpperCase());", "+            option = Enum.valueOf(optionClass, optionStr.trim().toUpperCase());", "-            throw new ConversionException(\"unable to parse \" + aOption, iae);", "+            throw new ConversionException(\"unable to parse \" + option, iae);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "606213e902adffb759c1f5e989d9965b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void checkSingleLine(int aLineNum, IndentLevel aIndentLevel)", "signatureAfterChange": "     private void checkSingleLine(int lineNum, IndentLevel indentLevel)", "diff": ["-    private void checkSingleLine(int aLineNum, IndentLevel aIndentLevel)", "+    private void checkSingleLine(int lineNum, IndentLevel indentLevel)", "-        final String line = mIndentCheck.getLine(aLineNum - 1);", "+        final String line = indentCheck.getLine(lineNum - 1);", "-        if (aIndentLevel.gt(start)) {", "-            logChildError(aLineNum, start, aIndentLevel);", "+        if (indentLevel.gt(start)) {", "+            logChildError(lineNum, start, indentLevel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60b8303b469509b0432f538c520d1880", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setFailureProperty(String aPropertyName)", "signatureAfterChange": "     public void setFailureProperty(String propertyName)", "diff": ["-    public void setFailureProperty(String aPropertyName)", "+    public void setFailureProperty(String propertyName)", "-        mFailureProperty = aPropertyName;", "+        failureProperty = propertyName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60d34f1d9f964a58fb66d91b0d50ee14", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected boolean isUnchecked(Class<?> aException)", "signatureAfterChange": "     protected boolean isUnchecked(Class<?> exception)", "diff": ["-    protected boolean isUnchecked(Class<?> aException)", "+    protected boolean isUnchecked(Class<?> exception)", "-        return isSubclass(aException, RuntimeException.class)", "-            || isSubclass(aException, Error.class);", "+        return isSubclass(exception, RuntimeException.class)", "+            || isSubclass(exception, Error.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61c6f3fde0e342ee43599f02a6135120", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java", "commitBeforeChange": "9cc86b38df9a086713d1fcdf01b451b41c0d6f65", "commitAfterChange": "e9ec5bfbd5ab91852c3ec1b30492df5c06cdd3b1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testCacheFile_changeInConfig() throws Exception", "signatureAfterChange": "      @Test     public void testCacheFile_changeInConfig() throws Exception", "diff": ["-        checker = new Checker();", "-        checker.setLocaleCountry(locale.getCountry());", "-        checker.setLocaleLanguage(locale.getLanguage());", "-        checker.setModuleClassLoader(Thread.currentThread().getContextClassLoader());", "-        checker.configure(checkerConfig);", "-        checker.addListener(new BriefLogger(stream));", "+        Checker otherChecker = new Checker();", "+        otherChecker.setLocaleCountry(locale.getCountry());", "+        otherChecker.setLocaleLanguage(locale.getLanguage());", "+        otherChecker.setModuleClassLoader(Thread.currentThread().getContextClassLoader());", "+        otherChecker.configure(checkerConfig);", "+        otherChecker.addListener(new BriefLogger(stream));", "-        verify(checker, pathToEmptyFile, pathToEmptyFile, expected);", "+        verify(otherChecker, pathToEmptyFile, pathToEmptyFile, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6242befe41191c26537ed1e12d917bb9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static void loadPackageNamesSource(             InputSource aSource, String aSourceName,             PackageNamesLoader aNameLoader)         throws CheckstyleException", "signatureAfterChange": "     private static void loadPackageNamesSource(             InputSource source, String sourceName,             PackageNamesLoader nameLoader)         throws CheckstyleException", "diff": ["-            InputSource aSource, String aSourceName,", "-            PackageNamesLoader aNameLoader)", "+            InputSource source, String sourceName,", "+            PackageNamesLoader nameLoader)", "-            aNameLoader.parseInputSource(aSource);", "+            nameLoader.parseInputSource(source);", "-                    + aSourceName + \" - \" + e.getMessage(), e);", "+                    + sourceName + \" - \" + e.getMessage(), e);", "-            throw new CheckstyleException(\"unable to read \" + aSourceName, e);", "+            throw new CheckstyleException(\"unable to read \" + sourceName, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "626e7495b5f3dabafa8c72e1b912080b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)         throws IOException", "signatureAfterChange": "     private boolean endsWithNewline(RandomAccessFile randomAccessFile)         throws IOException", "diff": ["-    private boolean endsWithNewline(RandomAccessFile aRandomAccessFile)", "+    private boolean endsWithNewline(RandomAccessFile randomAccessFile)", "-        final int len = mLineSeparator.length();", "-        if (aRandomAccessFile.length() < len) {", "+        final int len = lineSeparator.length();", "+        if (randomAccessFile.length() < len) {", "-        aRandomAccessFile.seek(aRandomAccessFile.length() - len);", "+        randomAccessFile.seek(randomAccessFile.length() - len);", "-        final int readBytes = aRandomAccessFile.read(lastBytes);", "+        final int readBytes = randomAccessFile.read(lastBytes);", "-        return mLineSeparator.matches(lastBytes);", "+        return lineSeparator.matches(lastBytes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "629028f6d401ebda43e7aa9c67ea8890", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public boolean equals(Object aObject)", "signatureAfterChange": "      @Override     public boolean equals(Object object)", "diff": ["-    public boolean equals(Object aObject)", "+    public boolean equals(Object object)", "-        if (aObject instanceof IntRangeFilter) {", "-            final IntRangeFilter other = (IntRangeFilter) aObject;", "-            return (this.mLowerBound.equals(other.mLowerBound)", "-                && this.mUpperBound.equals(other.mUpperBound));", "+        if (object instanceof IntRangeFilter) {", "+            final IntRangeFilter other = (IntRangeFilter) object;", "+            return (this.lowerBound.equals(other.lowerBound)", "+                && this.upperBound.equals(other.upperBound));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63100f14580d7a324ca24dc88a324590", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void visitExpr(DetailAST aAst)", "signatureAfterChange": "     private void visitExpr(DetailAST ast)", "diff": ["-    private void visitExpr(DetailAST aAst)", "+    private void visitExpr(DetailAST ast)", "-        mExprDepth++;", "-        if (mExprDepth == 1", "-                && !mInForHeader", "-                && (mLastStatementEnd == aAst.getLineNo()))", "+        exprDepth++;", "+        if (exprDepth == 1", "+                && !inForHeader", "+                && (lastStatementEnd == ast.getLineNo()))", "-            log(aAst, \"multiple.statements.line\");", "+            log(ast, \"multiple.statements.line\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63767062606eecab918170d0236c1143", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private ResourceBundle getBundle(String bundleName)", "signatureAfterChange": "     private ResourceBundle getBundle(String bundleName)", "diff": ["-            ResourceBundle bundle = BUNDLE_CACHE", "+            ResourceBundle resourceBundle = BUNDLE_CACHE", "-            if (bundle == null) {", "-                bundle = ResourceBundle.getBundle(bundleName, sLocale,", "+            if (resourceBundle == null) {", "+                resourceBundle = ResourceBundle.getBundle(bundleName, sLocale,", "-                BUNDLE_CACHE.put(bundleName, bundle);", "+                BUNDLE_CACHE.put(bundleName, resourceBundle);", "-            return bundle;", "+            return resourceBundle;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "638fc922d55fcc2dad8f0475844a1fd6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private boolean isVariableInOperatorExpr(             DetailAST aOperator, DetailAST aVariable)", "signatureAfterChange": "     private boolean isVariableInOperatorExpr(             DetailAST operator, DetailAST variable)", "diff": ["-            DetailAST aOperator, DetailAST aVariable)", "+            DetailAST operator, DetailAST variable)", "-                aOperator.findFirstToken(TokenTypes.LPAREN);", "+                operator.findFirstToken(TokenTypes.LPAREN);", "-                if (isChild(exprBetweenBrackets, aVariable)) {", "+                if (isChild(exprBetweenBrackets, variable)) {", "-                switch (aOperator.getType()) {", "+                switch (operator.getType()) {", "-                    final DetailAST elseBlock = aOperator.getLastChild();", "+                    final DetailAST elseBlock = operator.getLastChild();", "-                                            aVariable);", "+                                            variable);", "-                    DetailAST currentCaseBlock = aOperator", "+                    DetailAST currentCaseBlock = operator", "-                                aVariable))", "+                                variable))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63b79da52f003b06d90bf3d3f394c182", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static Point skipHtmlComment(String[] text, Point from)", "signatureAfterChange": "     private static Point skipHtmlComment(String[] text, Point fromPoint)", "diff": ["-    private static Point skipHtmlComment(String[] text, Point from) {", "-        Point to = from;", "-        to = findChar(text, '>', to);", "-        while (!text[to.getLineNo()]", "-               .substring(0, to.getColumnNo() + 1).endsWith(\"-->\")) {", "-            to = findChar(text, '>', getNextCharPos(text, to));", "+    private static Point skipHtmlComment(String[] text, Point fromPoint) {", "+        Point toPoint = fromPoint;", "+        toPoint = findChar(text, '>', toPoint);", "+        while (!text[toPoint.getLineNo()]", "+               .substring(0, toPoint.getColumnNo() + 1).endsWith(\"-->\")) {", "+            toPoint = findChar(text, '>', getNextCharPos(text, toPoint));", "-        return to;", "+        return toPoint;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63ece3bd1fcfab3b5ff4ba33895ee6d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "commitBeforeChange": "2cf54ade2182e29c413f23e2235a896247d7a2ad", "commitAfterChange": "d282053d9ce02c13c779decfd079a8305086f752", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean hasDefaultOrExplNonPrivateCtor(DetailAST classDef)", "signatureAfterChange": "     private static boolean hasDefaultOrExplicitNonPrivateCtor(DetailAST classDef)", "diff": ["-    private static boolean hasDefaultOrExplNonPrivateCtor(DetailAST classDef) {", "+    private static boolean hasDefaultOrExplicitNonPrivateCtor(DetailAST classDef) {", "-        boolean hasExplNonPrivateCtor = false;", "+        boolean hasExplicitNonPrivateCtor = false;", "-                    hasExplNonPrivateCtor = true;", "+                    hasExplicitNonPrivateCtor = true;", "-        return hasDefaultConstructor || hasExplNonPrivateCtor;", "+        return hasDefaultConstructor || hasExplicitNonPrivateCtor;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "644bab7fb1892dfe1a140d1e5a7cc0c7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void setIgnoreNumbers(double[] aList)", "signatureAfterChange": "     public void setIgnoreNumbers(double[] list)", "diff": ["-    public void setIgnoreNumbers(double[] aList)", "+    public void setIgnoreNumbers(double[] list)", "-        if ((aList == null) || (aList.length == 0)) {", "+        if ((list == null) || (list.length == 0)) {", "-            mIgnoreNumbers = new double[aList.length];", "-            System.arraycopy(aList, 0, mIgnoreNumbers, 0, aList.length);", "+            mIgnoreNumbers = new double[list.length];", "+            System.arraycopy(list, 0, mIgnoreNumbers, 0, list.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "648d0017a2d9aeb88eaeca88eccc5335", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "969678107261e649c968b56dbace0064304bfb56", "commitAfterChange": "803dafc96a33bd987f84d930b9ae3ebf7a23e097", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void reportCComment(int aStartLineNo, int aStartColNo,                                int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public void reportCComment(int aStartLineNo, int aStartColNo,                                int aEndLineNo, int aEndColNo)", "diff": ["+        final Comment comment = new Comment(cc, aStartColNo, aEndLineNo,", "+                                            aEndColNo);", "-            entries.add(cc);", "+            entries.add(comment);", "-            entries.add(cc);", "+            entries.add(comment);", "-            Comment comment = new Comment(cc, aStartColNo, aEndLineNo);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64f6825be39334a3d0d12e2e161b1a87", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isInContext(DetailAST aAST, int[][] aContextSet)", "signatureAfterChange": "     private static boolean isInContext(DetailAST ast, int[][] contextSet)", "diff": ["-    private static boolean isInContext(DetailAST aAST, int[][] aContextSet)", "+    private static boolean isInContext(DetailAST ast, int[][] contextSet)", "-        for (int[] element : aContextSet) {", "-            DetailAST current = aAST;", "+        for (int[] element : contextSet) {", "+            DetailAST current = ast;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6518c77e6ff380123148e277886a090d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "         @Override         public boolean accept(File f)", "signatureAfterChange": "         @Override         public boolean accept(File file)", "diff": ["-        public boolean accept(File f) {", "-            if (f == null) {", "+        public boolean accept(File file) {", "+            if (file == null) {", "-            return f.isDirectory() || f.getName().endsWith(\".java\");", "+            return file.isDirectory() || file.getName().endsWith(\".java\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "652694e47862475b15a7ea6226128d66", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public final void setCompileFlags(int aCompileFlags)", "signatureAfterChange": "     public final void setCompileFlags(int compileFlags)", "diff": ["-    public final void setCompileFlags(int aCompileFlags)", "+    public final void setCompileFlags(int compileFlags)", "-        updateRegexp(mFormat, aCompileFlags);", "+        updateRegexp(format, compileFlags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65272a198fe5ef9a7ffbe9cf6aa6412a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void addError(AuditEvent evt)", "signatureAfterChange": "      @Override     public void addError(AuditEvent event)", "diff": ["-    public void addError(AuditEvent evt) {", "-        if (evt.getSeverityLevel() != SeverityLevel.IGNORE) {", "-            writer.print(\"<error\" + \" line=\\\"\" + evt.getLine() + \"\\\"\");", "-            if (evt.getColumn() > 0) {", "-                writer.print(\" column=\\\"\" + evt.getColumn() + \"\\\"\");", "+    public void addError(AuditEvent event) {", "+        if (event.getSeverityLevel() != SeverityLevel.IGNORE) {", "+            writer.print(\"<error\" + \" line=\\\"\" + event.getLine() + \"\\\"\");", "+            if (event.getColumn() > 0) {", "+                writer.print(\" column=\\\"\" + event.getColumn() + \"\\\"\");", "-                + evt.getSeverityLevel().getName()", "+                + event.getSeverityLevel().getName()", "-                + encode(evt.getMessage())", "+                + encode(event.getMessage())", "-                + encode(evt.getSourceName())", "+                + encode(event.getSourceName())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6712e4b8442b69046b50d28764f297cd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean containsJavadocTag(final TextBlock aJavadoc)", "signatureAfterChange": "     private boolean containsJavadocTag(final TextBlock javadoc)", "diff": ["-    private boolean containsJavadocTag(final TextBlock aJavadoc)", "+    private boolean containsJavadocTag(final TextBlock javadoc)", "-        if (aJavadoc == null) {", "+        if (javadoc == null) {", "-        final String[] lines = aJavadoc.getText();", "+        final String[] lines = javadoc.getText();", "-        int currentLine = aJavadoc.getStartLineNo() - 1;", "+        int currentLine = javadoc.getStartLineNo() - 1;", "-                for (int remIndex = i + 1;", "-                    remIndex < lines.length; remIndex++)", "+                for (int reindex = i + 1;", "+                    reindex < lines.length; reindex++)", "-                        .matcher(lines[remIndex]);", "+                        .matcher(lines[reindex]);", "-                        remIndex = lines.length;", "+                        reindex = lines.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a253977c8c4ed182170c30816523af6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private List<JavadocTag> getJavadocTags(TextBlock aCmt)", "signatureAfterChange": "     private List<JavadocTag> getJavadocTags(TextBlock cmt)", "diff": ["-    private List<JavadocTag> getJavadocTags(TextBlock aCmt)", "+    private List<JavadocTag> getJavadocTags(TextBlock cmt)", "-        final JavadocTags tags = JavadocUtils.getJavadocTags(aCmt,", "+        final JavadocTags tags = JavadocUtils.getJavadocTags(cmt,", "-        if (!mAllowUnknownTags) {", "+        if (!allowUnknownTags) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a3674bc06af56de071f88f10fea6ad6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AbstractFormatCheck(String aDefaultFormat)         throws ConversionException", "signatureAfterChange": "     public AbstractFormatCheck(String defaultFormat)         throws ConversionException", "diff": ["-    public AbstractFormatCheck(String aDefaultFormat)", "+    public AbstractFormatCheck(String defaultFormat)", "-        this(aDefaultFormat, 0);", "+        this(defaultFormat, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a6fa1b6b69aafbe63ffe96ff3f42a87", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private LineSeparatorOption(String aSep)", "signatureAfterChange": "     private LineSeparatorOption(String sep)", "diff": ["-    private LineSeparatorOption(String aSep)", "+    private LineSeparatorOption(String sep)", "-        mLineSeparator = aSep;", "+        lineSeparator = sep;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aa306f8f94fd40648bec593480c6b01", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "ed12c276a8adde2ce44b9834b413560476110f0e", "commitAfterChange": "66d6361c27586d58ba478b0223e60c6f1c5aa7b4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "         public void setRowHeight(int rowHeight)", "signatureAfterChange": "         public void setRowHeight(int newRowHeight)", "diff": ["-        public void setRowHeight(int rowHeight)", "+        public void setRowHeight(int newRowHeight)", "-            if (rowHeight > 0) {", "-                super.setRowHeight(rowHeight);", "+            if (newRowHeight > 0) {", "+                super.setRowHeight(newRowHeight);", "-                        JTreeTable.this.getRowHeight() != rowHeight) {", "+                        JTreeTable.this.getRowHeight() != newRowHeight) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6acfb88f436de9633dda7e92e0c2546d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected final void checkExpressionSubtree(         DetailAST tree,         IndentLevel level,         boolean firstLineMatches,         boolean allowNesting     )", "signatureAfterChange": "     protected final void checkExpressionSubtree(         DetailAST tree,         IndentLevel indentLevel,         boolean firstLineMatches,         boolean allowNesting     )", "diff": ["-        IndentLevel level,", "+        IndentLevel indentLevel,", "-        checkLinesIndent(subtreeLines, level, firstLineMatches, firstLine);", "+        checkLinesIndent(subtreeLines, indentLevel, firstLineMatches, firstLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b8e00ec0ce1009941435e7e14f3d612", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "feda6ebbfbe510a7572d403f581e8c5f78a6d987", "commitAfterChange": "59af65d194da001d34a48da91ba296e6c5d439cb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public boolean equals(Object o)", "signatureAfterChange": "     public boolean equals(Object aObject)", "diff": ["-    public boolean equals(Object o)", "+    public boolean equals(Object aObject)", "-        if (this == o) return true;", "-        if (!(o instanceof LocalizedMessage)) return false;", "+        if (this == aObject) {", "+            return true;", "+        }", "+        if (!(aObject instanceof LocalizedMessage)) {", "+            return false;", "+        }", "-        final LocalizedMessage localizedMessage = (LocalizedMessage) o;", "+        final LocalizedMessage localizedMessage = (LocalizedMessage) aObject;", "-        if (mColNo != localizedMessage.mColNo) return false;", "-        if (mLineNo != localizedMessage.mLineNo) return false;", "-        if (!mKey.equals(localizedMessage.mKey)) return false;", "+        if (mColNo != localizedMessage.mColNo) {", "+            return false;", "+        }", "+        if (mLineNo != localizedMessage.mLineNo) {", "+            return false;", "+        }", "+        if (!mKey.equals(localizedMessage.mKey)) {", "+            return false;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b9450d002723996b9a89c527671663c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AuditEvent.java", "commitBeforeChange": "16512bb1e7e31bedece4a745dad9c5960f141fca", "commitAfterChange": "abfc952fd0ed88f6246b1d969a8a980ea63f0bd6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public AuditEvent(Object src, String fileName, LocalizedMessage message)", "signatureAfterChange": "     public AuditEvent(Object src, String fileName, LocalizedMessage localizedMessage)", "diff": ["-    public AuditEvent(Object src, String fileName, LocalizedMessage message) {", "+    public AuditEvent(Object src, String fileName, LocalizedMessage localizedMessage) {", "-        this.message = message;", "+        this.localizedMessage = localizedMessage;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c0ea4c873d9222cb7abaead83890e3b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean isExtraHtml(String aToken, FastStack<HtmlTag> aHtmlStack)", "signatureAfterChange": "     private boolean isExtraHtml(String token, FastStack<HtmlTag> htmlStack)", "diff": ["-    private boolean isExtraHtml(String aToken, FastStack<HtmlTag> aHtmlStack)", "+    private boolean isExtraHtml(String token, FastStack<HtmlTag> htmlStack)", "-        for (final HtmlTag td : aHtmlStack) {", "+        for (final HtmlTag td : htmlStack) {", "-            if (aToken.equalsIgnoreCase(td.getId())) {", "+            if (token.equalsIgnoreCase(td.getId())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c5db83e584b947e407a4ac9eed60e3e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private Object createObject(String aClassName)         throws CheckstyleException", "signatureAfterChange": "     private Object createObject(String className)         throws CheckstyleException", "diff": ["-    private Object createObject(String aClassName)", "+    private Object createObject(String className)", "-            final Class<?> clazz = Class.forName(aClassName, true,", "-                    mModuleClassLoader);", "+            final Class<?> clazz = Class.forName(className, true,", "+                    moduleClassLoader);", "-                \"Unable to find class for \" + aClassName, e);", "+                \"Unable to find class for \" + className, e);", "-                \"Unable to instantiate \" + aClassName, e);", "+                \"Unable to instantiate \" + className, e);", "-                \"Unable to instantiate \" + aClassName, e);", "+                \"Unable to instantiate \" + className, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cda14fd95f3c957283c0efc907eae9e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FastStack.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public E peek(int aIndex)", "signatureAfterChange": "     public E peek(int index)", "diff": ["-    public E peek(int aIndex)", "+    public E peek(int index)", "-        if ((aIndex < 0) || (aIndex >= mEntries.size())) {", "+        if ((index < 0) || (index >= entries.size())) {", "-        return mEntries.get(aIndex);", "+        return entries.get(index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d714085d60401a9f81d2d1d99d9c21a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock cmt,             JavadocTagType tagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock textBlock,             JavadocTagType tagType)", "diff": ["-    public static JavadocTags getJavadocTags(TextBlock cmt,", "+    public static JavadocTags getJavadocTags(TextBlock textBlock,", "-        final String[] text = cmt.getText();", "+        final String[] text = textBlock.getText();", "-                final int line = cmt.getStartLineNo() + i;", "+                final int line = textBlock.getStartLineNo() + i;", "-                    col += cmt.getStartColNo();", "+                    col += textBlock.getStartColNo();", "-                lookForInlineTags(cmt, i, tags, invalidTags);", "+                lookForInlineTags(textBlock, i, tags, invalidTags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6db159bdbc10590c8e34f480a09b0ecf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "43fe1ad269809f293b375dc4d0a4313798bf2124", "commitAfterChange": "50559c68761e235f57e48cd2dc28928b417d7745", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected final int expandedTabsColumnNo(DetailAST aAst)", "signatureAfterChange": "     protected final int expandedTabsColumnNo(DetailAST aAST)", "diff": ["-    protected final int expandedTabsColumnNo(DetailAST aAst)", "+    protected final int expandedTabsColumnNo(DetailAST aAST)", "-            mIndentCheck.getLines()[aAst.getLineNo() - 1];", "+            mIndentCheck.getLines()[aAST.getLineNo() - 1];", "-        return Utils.lengthExpandedTabs(line, aAst.getColumnNo(),", "+        return Utils.lengthExpandedTabs(line, aAST.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e5f60a365246b880abfc8e678fc9b20", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "31b643724b87eaaf2d83f63116c8b313f06aa688", "commitAfterChange": "585f7c20a1e9e3ca4a04ffedf4e1cedc449acd97", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkTag(             int aLineNo,             String[] aCmt,             String aTag,             Pattern aTagRE,             Pattern aFormatRE,             String aFormat)", "signatureAfterChange": "     private void checkTag(             int aLineNo,             String[] aComment,             String aTag,             Pattern aTagRE,             Pattern aFormatRE,             String aFormat)", "diff": ["-            String[] aCmt,", "+            String[] aComment,", "-        for (int i = 0; i < aCmt.length; i++) {", "-            final String s = aCmt[i];", "+        for (int i = 0; i < aComment.length; i++) {", "+            final String s = aComment[i];", "-                    log(aLineNo + i - aCmt.length, \"type.tagFormat\", aTag,", "+                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,", "-                    logTag(aLineNo + i - aCmt.length, aTag, content);", "+                    logTag(aLineNo + i - aComment.length, aTag, content);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ece027d6b1511857fe59e8e79792b91", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean whitespaceBetween(         int aFromIndex, int aToIndex, String aLine)", "signatureAfterChange": "     private static boolean whitespaceBetween(         int froindex, int toIndex, String line)", "diff": ["-        int aFromIndex, int aToIndex, String aLine)", "+        int froindex, int toIndex, String line)", "-        for (int i = aFromIndex; i < aToIndex; i++) {", "-            if (!Character.isWhitespace(aLine.charAt(i))) {", "+        for (int i = froindex; i < toIndex; i++) {", "+            if (!Character.isWhitespace(line.charAt(i))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f07aa96d4665c754dbfe2ab13ae64df", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private static Checker createChecker(Configuration aConfig,                                          AuditListener aNosy)", "signatureAfterChange": "     private static Checker createChecker(Configuration config,                                          AuditListener nosy)", "diff": ["-    private static Checker createChecker(Configuration aConfig,", "-                                         AuditListener aNosy)", "+    private static Checker createChecker(Configuration config,", "+                                         AuditListener nosy)", "-            c.configure(aConfig);", "-            c.addListener(aNosy);", "+            c.configure(config);", "+            c.addListener(nosy);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "702a5a4bd8574696086875ed599e0856", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void addLineAndCol(int aLineNum, int aCol)", "signatureAfterChange": "     public void addLineAndCol(int lineNum, int col)", "diff": ["-    public void addLineAndCol(int aLineNum, int aCol)", "+    public void addLineAndCol(int lineNum, int col)", "-        mLines.put(aLineNum, aCol);", "+        lines.put(lineNum, col);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70759f8d7e21fece7874e2d3ec19d30d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-    public void finishTree(DetailAST aRootAST)", "+    public void finishTree(DetailAST rootAST)", "-        final Counter counter = mCounters.pop();", "+        final Counter counter = counters.pop();", "-        if (count > mFileMax) {", "-            log(aRootAST.getLineNo(), aRootAST.getColumnNo(), \"ncss.file\",", "-                    count, mFileMax);", "+        if (count > fileMax) {", "+            log(rootAST.getLineNo(), rootAST.getColumnNo(), \"ncss.file\",", "+                    count, fileMax);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "713536ca8d5fcdeba70223ab57d5a462", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void visitLiteralIf(DetailAST aIf)", "signatureAfterChange": "     private void visitLiteralIf(DetailAST literalIf)", "diff": ["-    private void visitLiteralIf(DetailAST aIf)", "+    private void visitLiteralIf(DetailAST literalIf)", "-        if (!CheckUtils.isElseIf(aIf)) {", "-            nestIn(aIf, \"nested.if.depth\");", "+        if (!CheckUtils.isElseIf(literalIf)) {", "+            nestIn(literalIf, \"nested.if.depth\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7151c9cdad4ce73c19dc3c50f35cf6c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void extendIllegalClassNamesWithShortName(String aCanonicalName)", "signatureAfterChange": "     private void extendIllegalClassNamesWithShortName(String canonicalName)", "diff": ["-    private void extendIllegalClassNamesWithShortName(String aCanonicalName)", "+    private void extendIllegalClassNamesWithShortName(String canonicalName)", "-        if (mIllegalClassNames.contains(aCanonicalName)) {", "-            final String shortName = aCanonicalName.", "-                substring(aCanonicalName.lastIndexOf(\".\") + 1);", "-            mIllegalClassNames.add(shortName);", "+        if (illegalClassNames.contains(canonicalName)) {", "+            final String shortName = canonicalName.", "+                substring(canonicalName.lastIndexOf(\".\") + 1);", "+            illegalClassNames.add(shortName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71982f7f05e9658751b9e028f346bd09", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private DetailAST findLastAnnotation(DetailAST aModifiers)", "signatureAfterChange": "     private DetailAST findLastAnnotation(DetailAST modifiers)", "diff": ["-    private DetailAST findLastAnnotation(DetailAST aModifiers)", "+    private DetailAST findLastAnnotation(DetailAST modifiers)", "-        DetailAST aAnnot = aModifiers.findFirstToken(TokenTypes.ANNOTATION);", "-        while (aAnnot != null && aAnnot.getNextSibling() != null", "-               && aAnnot.getNextSibling().getType() == TokenTypes.ANNOTATION)", "+        DetailAST annot = modifiers.findFirstToken(TokenTypes.ANNOTATION);", "+        while (annot != null && annot.getNextSibling() != null", "+               && annot.getNextSibling().getType() == TokenTypes.ANNOTATION)", "-            aAnnot = aAnnot.getNextSibling();", "+            annot = annot.getNextSibling();", "-        return aAnnot;", "+        return annot;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71c712669607b899753e8321c1246f7b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public final void setMessageDispatcher(MessageDispatcher dispatcher)", "signatureAfterChange": "      @Override     public final void setMessageDispatcher(MessageDispatcher messageDispatcher)", "diff": ["-    public final void setMessageDispatcher(MessageDispatcher dispatcher) {", "-        this.dispatcher = dispatcher;", "+    public final void setMessageDispatcher(MessageDispatcher messageDispatcher) {", "+        this.messageDispatcher = messageDispatcher;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e6bd03244fb529de02b7343b10f6de", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "95604498dadc98608c4294760a8f74c6d2ca2c68", "commitAfterChange": "b43c32ad0a3674fcda782d2e28d0975b72382470", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "          @Override         public void startElement(String namespaceURI,                                  String localName,                                  String qName,                                  Attributes atts)             throws SAXException", "signatureAfterChange": "          @Override         public void startElement(String uri,                                  String localName,                                  String qName,                                  Attributes attributes)             throws SAXException", "diff": ["-        public void startElement(String namespaceURI,", "+        public void startElement(String uri,", "-                                 Attributes atts)", "+                                 Attributes attributes)", "-                final String name = atts.getValue(NAME);", "+                final String name = attributes.getValue(NAME);", "-                    value = replaceProperties(atts.getValue(VALUE),", "-                        overridePropsResolver, atts.getValue(DEFAULT));", "+                    value = replaceProperties(attributes.getValue(VALUE),", "+                        overridePropsResolver, attributes.getValue(DEFAULT));", "-                final String name = atts.getValue(NAME);", "+                final String name = attributes.getValue(NAME);", "-                final String key = atts.getValue(KEY);", "-                final String value = atts.getValue(VALUE);", "+                final String key = attributes.getValue(KEY);", "+                final String value = attributes.getValue(VALUE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73d7622952da843e012363538255282d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isMatchingClassName(String aClassName)", "signatureAfterChange": "     private boolean isMatchingClassName(String className)", "diff": ["-    private boolean isMatchingClassName(String aClassName)", "+    private boolean isMatchingClassName(String className)", "-        final String shortName = aClassName.substring(aClassName.lastIndexOf(\".\") + 1);", "-        return (mIllegalClassNames.contains(aClassName)", "-                || mIllegalClassNames.contains(shortName))", "-            || (!mLegalAbstractClassNames.contains(aClassName)", "-                && getRegexp().matcher(aClassName).find());", "+        final String shortName = className.substring(className.lastIndexOf(\".\") + 1);", "+        return (illegalClassNames.contains(className)", "+                || illegalClassNames.contains(shortName))", "+            || (!legalAbstractClassNames.contains(className)", "+                && getRegexp().matcher(className).find());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73e461039f1e5c0f2da04e2f68d0cfd8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean hasTrailComment(DetailAST aAst)", "signatureAfterChange": "     private boolean haastrailComment(DetailAST ast)", "diff": ["-    private boolean hasTrailComment(DetailAST aAst)", "+    private boolean haastrailComment(DetailAST ast)", "-        final DetailAST variableDef = getVariableDef(aAst);", "+        final DetailAST variableDef = getVariableDef(ast);", "-            semi = getSemi(aAst);", "+            semi = getSemi(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7435bad2cdf6d0a16c6bfa22d8603725", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void addTag(String aText, int aLine)", "signatureAfterChange": "     private void addTag(String text, int line)", "diff": ["-    private void addTag(String aText, int aLine)", "+    private void addTag(String text, int line)", "-        final Tag tag = new Tag(aText, aLine);", "-        mTags.add(tag);", "+        final Tag tag = new Tag(text, line);", "+        tags.add(tag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7525eb85608ff9969efd5f4913c06c44", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean isFirstParagraph(DetailNode aParagraphTag)", "signatureAfterChange": "     private boolean isFirstPtagraph(DetailNode paragraphTag)", "diff": ["-    private boolean isFirstParagraph(DetailNode aParagraphTag)", "+    private boolean isFirstPtagraph(DetailNode paragraphTag)", "-        DetailNode previousNode = JavadocUtils.getPreviousSibling(aParagraphTag);", "+        DetailNode previousNode = JavadocUtils.getPreviousSibling(paragraphTag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7572504b7aff057dadafac6b77f85037", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "         public Token(FullIdent aFullIdent)", "signatureAfterChange": "         public Token(FullIdent fullIdent)", "diff": ["-        public Token(FullIdent aFullIdent)", "+        public Token(FullIdent fullIdent)", "-            mText = aFullIdent.getText();", "-            mLine = aFullIdent.getLineNo();", "-            mColumn = aFullIdent.getColumnNo();", "+            text = fullIdent.getText();", "+            line = fullIdent.getLineNo();", "+            column = fullIdent.getColumnNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75ddcfaf381b7cd49bb8fc0d84e7e130", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static String capitalize(final String aName)", "signatureAfterChange": "     private static String capitalize(final String name)", "diff": ["-    private static String capitalize(final String aName)", "+    private static String capitalize(final String name)", "-        if (aName == null || aName.length() == 0) {", "-            return aName;", "+        if (name == null || name.length() == 0) {", "+            return name;", "-        // one is a capital one, since according to JavaBeans spec", "+        // one is a capital one, since according to Javbeans spec", "-        if (aName.length() > 1 && Character.isUpperCase(aName.charAt(1))) {", "-            return aName;", "+        if (name.length() > 1 && Character.isUpperCase(name.charAt(1))) {", "+            return name;", "-        return aName.substring(0, 1).toUpperCase() + aName.substring(1);", "+        return name.substring(0, 1).toUpperCase() + name.substring(1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7673566cc21b03f027d1e503fc1f0341", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     private void checkThrowsTags(List<JavadocTag> tags,             List<ExceptionInfo> throwsList, boolean reportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> tags,             List<ExceptionInfo> throwsList, boolean reportExpectedTags)", "diff": ["-                    final Token fi = ei.getName();", "-                    log(fi.getLineNo(), fi.getColumnNo(),", "+                    final Token token = ei.getName();", "+                    log(token.getLineNo(), token.getColumnNo(),", "-                        JavadocTagInfo.THROWS.getText(), fi.getText());", "+                            JavadocTagInfo.THROWS.getText(), token.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76bdd46efa786bce491f0d554ff70deb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void initialize(AST aAST)", "signatureAfterChange": "      @Override     public void initialize(AST ast)", "diff": ["-    public void initialize(AST aAST)", "+    public void initialize(AST ast)", "-        final DetailAST da = (DetailAST) aAST;", "+        final DetailAST da = (DetailAST) ast;", "-        mLineNo = da.getLineNo();", "-        mColumnNo = da.getColumnNo();", "+        lineNo = da.getLineNo();", "+        columnNo = da.getColumnNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "775011a7f79b7ed1328181b8d9293d0b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "commitAfterChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void openAst(DetailAST parseTree, final Component aParent)", "signatureAfterChange": "      public void openAst(DetailAST parseTree, final Component parent)", "diff": ["-    public void openAst(DetailAST parseTree, final Component aParent)", "+    public void openAst(DetailAST parseTree, final Component parent)", "-        mParseTreeModel.setParseTree(parseTree);", "+        parseTreeModel.setParseTree(parseTree);", "-        if (mJTextArea.getText().length() != 0) {", "-            mJTextArea.replaceRange(\"\", 0, mJTextArea.getText().length());", "+        if (jTextArea.getText().length() != 0) {", "+            jTextArea.replaceRange(\"\", 0, jTextArea.getText().length());", "-        mJTextArea.moveCaretPosition(0);", "+        jTextArea.moveCaretPosition(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7761d0b33d0aa42d630a46700224e3df", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public AbstractFormatCheck(String aDefaultFormat, int aCompileFlags)         throws ConversionException", "signatureAfterChange": "     public AbstractFormatCheck(String defaultFormat, int compileFlags)         throws ConversionException", "diff": ["-    public AbstractFormatCheck(String aDefaultFormat, int aCompileFlags)", "+    public AbstractFormatCheck(String defaultFormat, int compileFlags)", "-        updateRegexp(aDefaultFormat, aCompileFlags);", "+        updateRegexp(defaultFormat, compileFlags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7761f926ed10013f3767fedd166f82c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "commitAfterChange": "4c1148db9982918e65f8d1156e8fb9c07b206fc9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                    for (final String string : typeParamNames) {", "+                    for (final String typeParamName : typeParamNames) {", "-                            lineNo, tags, string);", "+                            lineNo, tags, typeParamName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7798446946cea9a6d1c9e0e73a352274", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if ((TokenTypes.CLASS_DEF == aAST.getType())", "-            || (TokenTypes.INTERFACE_DEF == aAST.getType())", "-            || (TokenTypes.ENUM_CONSTANT_DEF == aAST.getType())", "-            || (TokenTypes.ENUM_DEF == aAST.getType()))", "+        if ((TokenTypes.CLASS_DEF == ast.getType())", "+            || (TokenTypes.INTERFACE_DEF == ast.getType())", "+            || (TokenTypes.ENUM_CONSTANT_DEF == ast.getType())", "+            || (TokenTypes.ENUM_DEF == ast.getType()))", "-            mCounters.push(new MethodCounter(", "-                TokenTypes.INTERFACE_DEF == aAST.getType()));", "+            counters.push(new MethodCounter(", "+                TokenTypes.INTERFACE_DEF == ast.getType()));", "-        else if (TokenTypes.METHOD_DEF == aAST.getType()) {", "-            raiseCounter(aAST);", "+        else if (TokenTypes.METHOD_DEF == ast.getType()) {", "+            raiseCounter(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78142cddbcf2deb6c3010943658f32c1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static Pattern createPattern(String aPattern)         throws ConversionException", "signatureAfterChange": "     public static Pattern createPattern(String pattern)         throws ConversionException", "diff": ["-    public static Pattern createPattern(String aPattern)", "+    public static Pattern createPattern(String pattern)", "-            retVal = getPattern(aPattern);", "+            retVal = getPattern(pattern);", "-                \"Failed to initialise regexp expression \" + aPattern, e);", "+                \"Failed to initialise regexp expression \" + pattern, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78cd460b67fb1b74fa3c982fd6077d96", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAst)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAst)", "+    public void visitToken(DetailAST ast)", "-        switch (aAst.getType()) {", "+        switch (ast.getType()) {", "-            visitExpr(aAst);", "+            visitExpr(ast);", "-            visitSemi(aAst);", "+            visitSemi(ast);", "-            mInForHeader = true;", "+            inForHeader = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79b992150b4c5b630ab8813a4e049985", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableCellRenderer.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Override     public void paint(Graphics g)", "signatureAfterChange": "     @Override     public void paint(Graphics graph)", "diff": ["-    public void paint(Graphics g) {", "-        g.translate(0, -visibleRow * getRowHeight());", "-        super.paint(g);", "+    public void paint(Graphics graph) {", "+        graph.translate(0, -visibleRow * getRowHeight());", "+        super.paint(graph);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79febd8e985ca1c8be1f0b0f769bff2d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "commitAfterChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public ParseTreeInfoPanel()", "signatureAfterChange": "     public ParseTreeInfoPanel()", "diff": ["-        mParseTreeModel = new ParseTreeModel(treeRoot);", "-        mTreeTable = new JTreeTable(mParseTreeModel);", "-        final JScrollPane sp = new JScrollPane(mTreeTable);", "+        parseTreeModel = new ParseTreeModel(treeRoot);", "+        treeTable = new JTreeTable(parseTreeModel);", "+        final JScrollPane sp = new JScrollPane(treeTable);", "-        mJTextArea = new JTextArea(20, 15);", "-        mJTextArea.setEditable(false);", "-        mTreeTable.setEditor(mJTextArea);", "-        mTreeTable.setLinePositionMap(lines2position);", "+        jTextArea = new JTextArea(20, 15);", "+        jTextArea.setEditable(false);", "+        treeTable.setEditor(jTextArea);", "+        treeTable.setLinePositionMap(lines2position);", "-        final JScrollPane sp2 = new JScrollPane(mJTextArea);", "+        final JScrollPane sp2 = new JScrollPane(jTextArea);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b4638043c93a0fb7225c3f61d1956f6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public String getMessage()", "signatureAfterChange": "     public String getMessage()", "diff": ["-        final String customMessage = getCustomMessage();", "-        if (customMessage != null) {", "-            return customMessage;", "+        final String message = getCustomMessage();", "+        if (message != null) {", "+            return message;", "-            final ResourceBundle bundle = getBundle(this.bundle);", "-            final String pattern = bundle.getString(key);", "+            final ResourceBundle resourceBundle = getBundle(this.bundle);", "+            final String pattern = resourceBundle.getString(key);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bb4c55cf809df66be3eac81fec1ae13", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheck.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mSuppressor.setCurrentContents(getFileContents());", "-        mDetector.processLines(Arrays.asList(getLines()));", "+        suppressor.setCurrentContents(getFileContents());", "+        detector.processLines(Arrays.asList(getLines()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7be5f5e18c5355832c089417510730e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractNestedDepthCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AbstractNestedDepthCheck(int aMax)", "signatureAfterChange": "     public AbstractNestedDepthCheck(int max)", "diff": ["-    public AbstractNestedDepthCheck(int aMax)", "+    public AbstractNestedDepthCheck(int max)", "-        setMax(aMax);", "+        setMax(max);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c0c33fc3b6f6017c5e1c52b1088a4a3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/CSVFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public boolean accept(int aInt)", "signatureAfterChange": "     @Override     public boolean accept(int intValue)", "diff": ["-    public boolean accept(int aInt)", "+    public boolean accept(int intValue)", "-            if (filter.accept(aInt)) {", "+            if (filter.accept(intValue)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2ab73fae1d227f19f11f8651b04437", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void walkConditional(final DetailAST aCond)", "signatureAfterChange": "     private void walkConditional(final DetailAST cond)", "diff": ["-    private void walkConditional(final DetailAST aCond)", "+    private void walkConditional(final DetailAST cond)", "-        if (aCond.getType() != TokenTypes.QUESTION) {", "+        if (cond.getType() != TokenTypes.QUESTION) {", "-                this.removeQuotes(aCond.getText());", "-            this.logMatch(aCond.getLineNo(), aCond.getColumnNo(), warningText);", "+                this.removeQuotes(cond.getText());", "+            this.logMatch(cond.getLineNo(), cond.getColumnNo(), warningText);", "-        this.walkConditional(this.getCondLeft(aCond));", "-        this.walkConditional(this.getCondRight(aCond));", "+        this.walkConditional(this.getCondLeft(cond));", "+        this.walkConditional(this.getCondRight(cond));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ede3c041502f77ededb59bffde76a1a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/TokenTypes.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static String getTokenName(int aID)", "signatureAfterChange": "     public static String getTokenName(int iD)", "diff": ["-    public static String getTokenName(int aID)", "+    public static String getTokenName(int iD)", "-        if (aID > TOKEN_VALUE_TO_NAME.length - 1) {", "-            throw new IllegalArgumentException(\"given id \" + aID);", "+        if (iD > TOKEN_VALUE_TO_NAME.length - 1) {", "+            throw new IllegalArgumentException(\"given id \" + iD);", "-        final String name = TOKEN_VALUE_TO_NAME[aID];", "+        final String name = TOKEN_VALUE_TO_NAME[iD];", "-            throw new IllegalArgumentException(\"given id \" + aID);", "+            throw new IllegalArgumentException(\"given id \" + iD);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f2ef735ef5603ce19d78929f62ccf18", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void setArrayInitIndent(int aArrayInitIndent)", "signatureAfterChange": "     public void setArrayInitIndent(int arrayInitIndent)", "diff": ["-    public void setArrayInitIndent(int aArrayInitIndent)", "+    public void setArrayInitIndent(int arrayInitIndent)", "-        mArrayInitIndentationAmount = aArrayInitIndent;", "+        arrayInitIndentationAmount = arrayInitIndent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f703e7f699df05fa0dfedc3a88c89b3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void processIter(DetailAST aRoot, AstState aAstState)", "signatureAfterChange": "     private void processIter(DetailAST root, AstState astState)", "diff": ["-    private void processIter(DetailAST aRoot, AstState aAstState)", "+    private void processIter(DetailAST root, AstState astState)", "-        DetailAST curNode = aRoot;", "+        DetailAST curNode = root;", "-            notifyVisit(curNode, aAstState);", "+            notifyVisit(curNode, astState);", "-                notifyLeave(curNode, aAstState);", "+                notifyLeave(curNode, astState);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f7368669aef9baeb2904c638ba7dbc1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setLineSeparator(String aLineSeparator)", "signatureAfterChange": "     public void setLineSeparator(String lineSeparatorParam)", "diff": ["-    public void setLineSeparator(String aLineSeparator)", "+    public void setLineSeparator(String lineSeparatorParam)", "-            mLineSeparator =", "-                Enum.valueOf(LineSeparatorOption.class, aLineSeparator.trim()", "+            lineSeparator =", "+                Enum.valueOf(LineSeparatorOption.class, lineSeparatorParam.trim()", "-            throw new ConversionException(\"unable to parse \" + aLineSeparator,", "+            throw new ConversionException(\"unable to parse \" + lineSeparatorParam,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fbe3f78d82b2751eb2e8dfe70c6f566", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "a13ebd482ce5dd891ba99d4c22a7cd5ff7d8e2dc", "commitAfterChange": "dad4fa599aa3570980fcaff4cb5f37941847a7a1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testFileExtensions() throws Exception", "signatureAfterChange": "      @Test     public void testFileExtensions() throws Exception", "diff": ["-        final Checker c = new Checker();", "+        final Checker checker = new Checker();", "-        File f = new File(\"file.pdf\");", "-        files.add(f);", "-        f = new File(\"file.java\");", "-        files.add(f);", "+        File file = new File(\"file.pdf\");", "+        files.add(file);", "+        file = new File(\"file.java\");", "+        files.add(file);", "-        c.setFileExtensions(fileExtensions);", "-        final int counter = c.process(files);", "+        checker.setFileExtensions(fileExtensions);", "+        final int counter = checker.process(files);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8010320f745118ad63377456ee0c4385", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     protected final Class<?> tryLoadClass(Token aIdent, String aCurrentClass)", "signatureAfterChange": "     protected final Class<?> tryLoadClass(Token ident, String currentClass)", "diff": ["-    protected final Class<?> tryLoadClass(Token aIdent, String aCurrentClass)", "+    protected final Class<?> tryLoadClass(Token ident, String currentClass)", "-        final Class<?> clazz = resolveClass(aIdent.getText(), aCurrentClass);", "+        final Class<?> clazz = resolveClass(ident.getText(), currentClass);", "-            logLoadError(aIdent);", "+            logLoadError(ident);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "806e7bd47f46944c33113442e3ebf79d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "6839ac4fd83dde7060c8f6f28e75aa3d6ff2456b", "commitAfterChange": "31f6765fdcf2233ca6c53730c2fc196576557f66", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static boolean canReturnOnlyBooleanLiteral(AST ast)", "signatureAfterChange": "     private static boolean canReturnOnlyBooleanLiteral(AST ast)", "diff": ["-        final AST firstStmnt = ast.getFirstChild();", "-        return isBooleanLiteralReturnStatement(firstStmnt);", "+        final AST firstStatement = ast.getFirstChild();", "+        return isBooleanLiteralReturnStatement(firstStatement);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8080357f08891a585324c0f5e8553e90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineSet.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Integer getStartColumn(Integer aLineNum)", "signatureAfterChange": "     public Integer getStartColumn(Integer lineNum)", "diff": ["-    public Integer getStartColumn(Integer aLineNum)", "+    public Integer getStartColumn(Integer lineNum)", "-        return mLines.get(aLineNum);", "+        return lines.get(lineNum);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "809c593191782189ceaceb1329148529", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/TreeTableModelAdapter.java", "commitBeforeChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "commitAfterChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public TreeTableModelAdapter(TreeTableModel aTreeTableModel, JTree aTree)", "signatureAfterChange": "      public TreeTableModelAdapter(TreeTableModel treeTableModel, JTree tree)", "diff": ["-    public TreeTableModelAdapter(TreeTableModel aTreeTableModel, JTree aTree)", "+    public TreeTableModelAdapter(TreeTableModel treeTableModel, JTree tree)", "-        this.mTree = aTree;", "-        this.mTreeTableModel = aTreeTableModel;", "+        this.tree = tree;", "+        this.treeTableModel = treeTableModel;", "-        aTree.addTreeExpansionListener(new TreeExpansionListener()", "+        tree.addTreeExpansionListener(new TreeExpansionListener()", "-        aTreeTableModel.addTreeModelListener(new TreeModelListener()", "+        treeTableModel.addTreeModelListener(new TreeModelListener()"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80bb2c8c1889b439ee1968ed43bc7c57", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public FileText(File file, String charsetName) throws IOException", "signatureAfterChange": "     public FileText(File file, String charsetName) throws IOException", "diff": ["-        final ArrayList<String> lines = new ArrayList<>();", "+        final ArrayList<String> textLines = new ArrayList<>();", "-            lines.add(line);", "+            textLines.add(line);", "-        this.lines = lines.toArray(new String[lines.size()]);", "+        this.lines = textLines.toArray(new String[textLines.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80da9d9735a685563b4870c4248e8fab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "         public void checkCount(DetailAST aAST)", "signatureAfterChange": "         public void checkCount(DetailAST ast)", "diff": ["-        public void checkCount(DetailAST aAST)", "+        public void checkCount(DetailAST ast)", "-            if (mChecking && (mCount > getMax())) {", "-                final DetailAST parentAST = aAST.getParent();", "+            if (checking && (count > getMax())) {", "+                final DetailAST parentAST = ast.getParent();", "-                    \"booleanExpressionComplexity\", mCount, getMax());", "+                    \"booleanExpressionComplexity\", count, getMax());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80e681f4989853d4bb2181f3b68bcbdc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mLastGroup = Integer.MIN_VALUE;", "-        mLastImportLine = Integer.MIN_VALUE;", "-        mLastImport = \"\";", "-        mLastImportStatic = false;", "-        mBeforeFirstImport = true;", "+        lastGroup = Integer.MIN_VALUE;", "+        lastImportLine = Integer.MIN_VALUE;", "+        lastImport = \"\";", "+        lastImportStatic = false;", "+        beforeFirstImport = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "812d0dccedbf9b3c5bb420706b48484f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static double parseFloat(String aText, int aType)", "signatureAfterChange": "     public static double parseFloat(String text, int type)", "diff": ["-    public static double parseFloat(String aText, int aType)", "+    public static double parseFloat(String text, int type)", "-        return (float) parseDouble(aText, aType);", "+        return (float) parseDouble(text, type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "815909042bec5049a9ca4c910e16cddf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "          @Override         public boolean equals(Object o)", "signatureAfterChange": "          @Override         public boolean equals(Object other)", "diff": ["-        public boolean equals(Object o) {", "-            if (this == o) {", "+        public boolean equals(Object other) {", "+            if (this == other) {", "-            if (o == null || getClass() != o.getClass()) {", "+            if (other == null || getClass() != other.getClass()) {", "-            final Tag tag = (Tag) o;", "+            final Tag tag = (Tag) other;", "-                    && Objects.equals(on, tag.on)", "+                    && Objects.equals(reportingOn, tag.reportingOn)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "815a6aadbec85e1cac7366135cd863ed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void visitMethodDef(DetailAST aMethodDef)", "signatureAfterChange": "     private void visitMethodDef(DetailAST methodDef)", "diff": ["-    private void visitMethodDef(DetailAST aMethodDef)", "+    private void visitMethodDef(DetailAST methodDef)", "-        if (isCheckedMethod(aMethodDef)) {", "-            checkClassName(aMethodDef);", "+        if (isCheckedMethod(methodDef)) {", "+            checkClassName(methodDef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81c303f4c4d325645105269597fef526", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/LineSeparatorOption.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public int length()", "signatureAfterChange": "     public int length()", "diff": ["-        return mLineSeparator.length();", "+        return lineSeparator.length();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82fb3ccdcf53739bc8a5e262a9235b9d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void setCaseIndent(int aAmount)", "signatureAfterChange": "     public void setCaseIndent(int amount)", "diff": ["-    public void setCaseIndent(int aAmount)", "+    public void setCaseIndent(int amount)", "-        mCaseIndentationAmount = aAmount;", "+        caseIndentationAmount = amount;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83251ffb42eeb0d11209e1e7cbc6ae90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private void processTypeParams(DetailAST ast)", "signatureAfterChange": "     private void processTypeParams(DetailAST ast)", "diff": ["-                    final AbstractClassInfo ci =", "+                    final AbstractClassInfo classInfo =", "-                    paramsMap.put(alias, ci);", "+                    paramsMap.put(alias, classInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "836e5951b5eeea1a6f633512bf9a875f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-    public void finishTree(DetailAST aRootAST)", "+    public void finishTree(DetailAST rootAST)", "-        if (mImportToGroupList.isEmpty()) {", "+        if (importToGroupList.isEmpty()) {", "-        final ImportDetails firstImport = mImportToGroupList.get(0);", "+        final ImportDetails firstImport = importToGroupList.get(0);", "-        int groupNumber = mCustomImportOrderRules.indexOf(currentGroup);", "+        int groupNumber = customImportOrderRules.indexOf(currentGroup);", "-        for (ImportDetails importObject : mImportToGroupList) {", "+        for (ImportDetails importObject : importToGroupList) {", "-            final String fullImportIdent = importObject.mImportFullPath;", "+            final String fullImportIdent = importObject.importFullPath;", "-                if (mCustomImportOrderRules.size() > groupNumber + 1) {", "+                if (customImportOrderRules.size() > groupNumber + 1) {", "-                        if (mSeparateLineBetweenGroups && previousImport != null", "+                        if (separateLineBetweenGroups && previousImport != null", "-                        groupNumber = mCustomImportOrderRules.indexOf(nextGroup);", "+                        groupNumber = customImportOrderRules.indexOf(nextGroup);", "-            else if (mSortImportsInGroupAlphabetically", "+            else if (sortImportsInGroupAlphabetically"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8403fc55d653f83bf537a2a69281ed97", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/doclets/CheckDocsDoclet.java", "commitBeforeChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "commitAfterChange": "319f297e13e5c175a62489ff555cff7c463d3c7b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static void writeXdocsFooter(final PrintWriter aPrintWriter)", "signatureAfterChange": "     private static void writeXdocsFooter(final PrintWriter printWriter)", "diff": ["-    private static void writeXdocsFooter(final PrintWriter aPrintWriter)", "+    private static void writeXdocsFooter(final PrintWriter printWriter)", "-        aPrintWriter.println(\"</body>\");", "-        aPrintWriter.println(\"</document>\");", "-        aPrintWriter.flush();", "+        printWriter.println(\"</body>\");", "+        printWriter.println(\"</document>\");", "+        printWriter.flush();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "843686105c7f1e52f908bc6b4c02ec52", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java", "commitBeforeChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "commitAfterChange": "4c1148db9982918e65f8d1156e8fb9c07b206fc9", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Override     public boolean equals(Object o)", "signatureAfterChange": "     @Override     public boolean equals(Object o)", "diff": ["-        final LineColumn that = (LineColumn) o;", "-        return Objects.equals(line, that.line)", "-                && Objects.equals(col, that.col);", "+        final LineColumn lineColumn = (LineColumn) o;", "+        return Objects.equals(line, lineColumn.line)", "+                && Objects.equals(col, lineColumn.col);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84ba2b2eb843f1bddaaa25a8f3ef4c9b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private String getDisallowedAbbreviation(String string)", "signatureAfterChange": "     private String getDisallowedAbbreviation(String str)", "diff": ["-    private String getDisallowedAbbreviation(String string)", "+    private String getDisallowedAbbreviation(String str)", "-        for (int index = 0; index < string.length(); index++) {", "-            final char symbol = string.charAt(index);", "+        for (int index = 0; index < str.length(); index++) {", "+            final char symbol = str.charAt(index);", "-                        result = string.substring(beginIndex, endIndex);", "+                        result = str.substring(beginIndex, endIndex);", "-            final int endIndex = string.length();", "+            final int endIndex = str.length();", "-                result = string.substring(beginIndex, endIndex);", "+                result = str.substring(beginIndex, endIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84f11f89a2bbb6e90aa62e3cbc547268", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static Map<String, Set<File>> arrangePropertyFiles(         List<File> aPropFiles, String aBasenameSeparator)", "signatureAfterChange": "     private static Map<String, Set<File>> arrangePropertyFiles(         List<File> propFiles, String basenameSeparator)", "diff": ["-        List<File> aPropFiles, String aBasenameSeparator)", "+        List<File> propFiles, String basenameSeparator)", "-        for (final File f : aPropFiles) {", "+        for (final File f : propFiles) {", "-                aBasenameSeparator);", "+                basenameSeparator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852ade0b2a3ff95ee808ef891dca7605", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected final int getFirstLine(int aStartLine, DetailAST aTree)", "signatureAfterChange": "     protected final int getFirstLine(int startLine, DetailAST tree)", "diff": ["-    protected final int getFirstLine(int aStartLine, DetailAST aTree)", "+    protected final int getFirstLine(int startLine, DetailAST tree)", "-        int realStart = aStartLine;", "-        final int currLine = aTree.getLineNo();", "+        int realStart = startLine;", "+        final int currLine = tree.getLineNo();", "-        for (DetailAST node = aTree.getFirstChild();", "+        for (DetailAST node = tree.getFirstChild();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "854483f32f232b181e518502c7169277", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private Entry<DetailAST, Integer> calculateDistanceInSingleScope(             DetailAST aSemicolonAst, DetailAST aVariableIdentAst)", "signatureAfterChange": "     private Entry<DetailAST, Integer> calculateDistanceInSingleScope(             DetailAST semicolonAst, DetailAST variableIdentAst)", "diff": ["-            DetailAST aSemicolonAst, DetailAST aVariableIdentAst)", "+            DetailAST semicolonAst, DetailAST variableIdentAst)", "-        DetailAST currentAst = aSemicolonAst;", "+        DetailAST currentAst = semicolonAst;", "-                if (isChild(currentAst, aVariableIdentAst)) {", "+                if (isChild(currentAst, variableIdentAst)) {", "-                        if (isVariableInOperatorExpr(currentAst, aVariableIdentAst)) {", "+                        if (isVariableInOperatorExpr(currentAst, variableIdentAst)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8579e84f8191cfad0d321c86fe944ed9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean isHandledType(int aType)", "signatureAfterChange": "     public boolean isHandledType(int type)", "diff": ["-    public boolean isHandledType(int aType)", "+    public boolean isHandledType(int type)", "-        final Set<Integer> typeSet = mTypeHandlers.keySet();", "-        return typeSet.contains(aType);", "+        final Set<Integer> typeSet = typeHandlers.keySet();", "+        return typeSet.contains(type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85efcb39227f4cc738b09272fbc09d67", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "e2329c7a98dadb9e2717aae92216964a6ab40329", "commitAfterChange": "073d09569f471061fd82899efac4f823269dd265", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static Configuration loadConfiguration(InputStream aConfigStream,         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)         throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(InputSource aConfigSource,         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)         throws CheckstyleException", "diff": ["+     */", "+    public static Configuration loadConfiguration(InputSource aConfigSource,", "-            loader.parseInputStream(aConfigStream);", "+            loader.parseInputSource(aConfigSource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8639c3883d9591652eba8ab8a12769bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalMethodCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        final String methodName = mid.getText();", "+        final String name = mid.getText();", "-        if (mMethodName.equals(methodName)) {", "+        if (methodName.equals(name)) {", "-                log(aAST.getLineNo(), mErrorKey);", "+                log(aAST.getLineNo(), errorKey);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87368e2bf2b0d12186bb925da0b102a3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "cb2862b73a3aa9192fad25015da2c2fed87f8a91", "commitAfterChange": "822384a711290170148b43b5ae390dd4e8cfaf4f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private int process(String aFileName)", "signatureAfterChange": "     private int process(File aFile)", "diff": ["-    private int process(String aFileName)", "+    private int process(File aFile)", "-        final File f = new File(aFileName);", "-        final long timestamp = f.lastModified();", "-        if (mCache.alreadyChecked(aFileName, timestamp)) {", "+        final String fileName = aFile.getPath();", "+        final long timestamp = aFile.lastModified();", "+        if (mCache.alreadyChecked(fileName, timestamp)) {", "-        if ((basedir == null) || !aFileName.startsWith(basedir)) {", "-            stripped = aFileName;", "+        if ((basedir == null) || !fileName.startsWith(basedir)) {", "+            stripped = fileName;", "-            stripped = aFileName.substring(basedir.length() + skipSep);", "+            stripped = fileName.substring(basedir.length() + skipSep);", "-            final String[] lines = Utils.getLines(aFileName);", "-            final FileContents contents = new FileContents(aFileName, lines);", "+            final String[] lines = Utils.getLines(fileName);", "+            final FileContents contents = new FileContents(fileName, lines);", "-            mCache.checkedOk(aFileName, timestamp);", "+            mCache.checkedOk(fileName, timestamp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87d883308d9044e3f1b4150a19885b99", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void setFile(final String aName)", "signatureAfterChange": "     public void setFile(final String name)", "diff": ["-    public void setFile(final String aName)", "+    public void setFile(final String name)", "-        if ((aName == null) || (aName.trim().length() == 0)) {", "+        if ((name == null) || (name.trim().length() == 0)) {", "-            mRoot = ImportControlLoader.load(new File(aName).toURI());", "+            root = ImportControlLoader.load(new File(name).toURI());", "-            throw new ConversionException(\"Unable to load \" + aName, ex);", "+            throw new ConversionException(\"Unable to load \" + name, ex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "882ad91ed7c30c35982125e6e325d475", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void updateRegexp(String format, int compileFlagsParam)", "signatureAfterChange": "     private void updateRegexp(String regexpFormat, int compileFlagsParam)", "diff": ["-    private void updateRegexp(String format, int compileFlagsParam) {", "+    private void updateRegexp(String regexpFormat, int compileFlagsParam) {", "-            regexp = Pattern.compile(format, compileFlagsParam);", "-            this.format = format;", "+            regexp = Pattern.compile(regexpFormat, compileFlagsParam);", "+            this.format = regexpFormat;", "-            throw new ConversionException(\"unable to parse \" + format, e);", "+            throw new ConversionException(\"unable to parse \" + regexpFormat, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "890dacf9b431de2c872c060d9aef8794", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/AnnotationUtility.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static DetailAST getAnnotation(final DetailAST ast,         String annotation)", "signatureAfterChange": "     public static DetailAST getAnnotation(final DetailAST ast,         String annotation)", "diff": ["-                final DetailAST at = child.getFirstChild();", "+                final DetailAST firstChild = child.getFirstChild();", "-                    FullIdent.createFullIdent(at.getNextSibling()).getText();", "+                    FullIdent.createFullIdent(firstChild.getNextSibling()).getText();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "890ef470606cce052c93b1ede4969763", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mPackageFullIdent = FullIdent.createFullIdent(null);", "-        mImports.clear();", "+        packageFullIdent = FullIdent.createFullIdent(null);", "+        imports.clear();", "-        mImports.add(\"java.lang.*\");", "-        mClassResolver = null;", "-        mCurrentClass = \"\";", "-        mTypeParams.clear();", "+        imports.add(\"java.lang.*\");", "+        classResolver = null;", "+        currentClass = \"\";", "+        typeParams.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8958b8ecc69421d10c7831394b598b43", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean checkTagAtTheRestOfComment(String[] lines, boolean foundBefore,             int currentLine, int i)", "signatureAfterChange": "     private boolean checkTagAtTheRestOfComment(String[] lines, boolean foundBefore,             int currentLine, int index)", "diff": ["-            int currentLine, int i) {", "+            int currentLine, int index) {", "-        for (int reindex = i + 1;", "+        for (int reindex = index + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89dc3268b83b26a458534c5f94df4210", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java", "commitBeforeChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "commitAfterChange": "4c1148db9982918e65f8d1156e8fb9c07b206fc9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public boolean equals(Object o)", "signatureAfterChange": "      @Override     public boolean equals(Object o)", "diff": ["-        final IntRangeFilter that = (IntRangeFilter) o;", "-        return Objects.equals(lowerBound, that.lowerBound)", "-                && Objects.equals(upperBound, that.upperBound);", "+        final IntRangeFilter intRangeFilter = (IntRangeFilter) o;", "+        return Objects.equals(lowerBound, intRangeFilter.lowerBound)", "+                && Objects.equals(upperBound, intRangeFilter.upperBound);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a1d1b60efda8db8bb24fe1e83655a90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "6e96026ec6d95fc5eadd3044cab91c24c73c8e0c", "commitAfterChange": "e00c478dd61d9d883e41b500b780ab217582c2e7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static double parseDouble(String aText, int aType)", "signatureAfterChange": "     public static double parseDouble(String aText, int aType)", "diff": ["+        String txt = aText;", "-            result = Double.parseDouble(aText);", "+            result = Double.parseDouble(txt);", "-            if (aText.startsWith(\"0x\") || aText.startsWith(\"0X\")) {", "+            if (txt.startsWith(\"0x\") || txt.startsWith(\"0X\")) {", "-                aText = aText.substring(2);", "+                txt = txt.substring(2);", "-            else if (aText.charAt(0) == '0') {", "+            else if (txt.charAt(0) == '0') {", "-                aText = aText.substring(1);", "+                txt = txt.substring(1);", "-            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {", "-                aText = aText.substring(0, aText.length() - 1);", "+            if ((txt.endsWith(\"L\")) || (txt.endsWith(\"l\"))) {", "+                txt = txt.substring(0, txt.length() - 1);", "-            if (aText.length() > 0) {", "+            if (txt.length() > 0) {", "-                    result = parseInt(aText, radix);", "+                    result = parseInt(txt, radix);", "-                    result = parseLong(aText, radix);", "+                    result = parseLong(txt, radix);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a5765a2670d28e9b765c0b1d955581a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "commitAfterChange": "29027109bf962f47b6a6000fdca69b5679ce4b43", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean isMatch(String aLine, int aHeaderLineNo)", "signatureAfterChange": "     private boolean isMatch(String line, int headerLineNo)", "diff": ["-    private boolean isMatch(String aLine, int aHeaderLineNo)", "+    private boolean isMatch(String line, int headerLineNo)", "-        return mHeaderRegexps.get(aHeaderLineNo).matcher(aLine).find();", "+        return headerRegexps.get(headerLineNo).matcher(line).find();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a85ad706fcb01f7a71aaea25be1e91e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/IntMatchFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public boolean equals(Object aObject)", "signatureAfterChange": "      @Override     public boolean equals(Object object)", "diff": ["-    public boolean equals(Object aObject)", "+    public boolean equals(Object object)", "-        if (aObject instanceof IntMatchFilter) {", "-            final IntMatchFilter other = (IntMatchFilter) aObject;", "-            return this.mMatchValue == other.mMatchValue;", "+        if (object instanceof IntMatchFilter) {", "+            final IntMatchFilter other = (IntMatchFilter) object;", "+            return this.matchValue == other.matchValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a9b22fcd93bd40548488a1a723b9f02", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        DetailAST currentNode = aRootAST;", "+        DetailAST currentNode = rootAST;", "-                    mPublicTypeFound = true;", "+                    publicTypeFound = true;", "-                    mLineNumberTypeMap.put(currentNode.getLineNo(), typeName);", "+                    lineNumberTypeMap.put(currentNode.getLineNo(), typeName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aa06d3a3b685f6222d878e4b6df2d61", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     FileDrop(             final Component c,             final Border dragBorder,             final boolean recursive,             final Listener listener)             throws TooManyListenersException", "signatureAfterChange": "     FileDrop(             final Component component,             final Border dragBorder,             final boolean recursive,             final Listener listener)             throws TooManyListenersException", "diff": ["-            final Component c,", "+            final Component component,", "-        dropListener = new FileDropTargetListener(c, dragBorder, listener);", "-        makeDropTarget(c, recursive);", "+        dropListener = new FileDropTargetListener(component, dragBorder, listener);", "+        makeDropTarget(component, recursive);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8abf46adebfee9c3353b493bccfd9a45", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static PkgControl load(final InputSource aSource,         final URI aUri) throws CheckstyleException", "signatureAfterChange": "     private static PkgControl load(final InputSource source,         final URI uri) throws CheckstyleException", "diff": ["-    private static PkgControl load(final InputSource aSource,", "-        final URI aUri) throws CheckstyleException", "+    private static PkgControl load(final InputSource source,", "+        final URI uri) throws CheckstyleException", "-            loader.parseInputSource(aSource);", "+            loader.parseInputSource(source);", "-            throw new CheckstyleException(\"unable to parse \" + aUri, e);", "+            throw new CheckstyleException(\"unable to parse \" + uri, e);", "-            throw new CheckstyleException(\"unable to parse \" + aUri", "+            throw new CheckstyleException(\"unable to parse \" + uri", "-            throw new CheckstyleException(\"unable to read \" + aUri, e);", "+            throw new CheckstyleException(\"unable to read \" + uri, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b5275cb064f777d732290f3c47fac3f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void visitClassDef(DetailAST aAST)", "signatureAfterChange": "     private void visitClassDef(DetailAST ast)", "diff": ["-    private void visitClassDef(DetailAST aAST)", "+    private void visitClassDef(DetailAST ast)", "-        mCheckingStack.push(mChecking ? Boolean.TRUE : Boolean.FALSE);", "-        mChecking = isNamedAsException(aAST) && isExtendedClassNamedAsException(aAST);", "+        checkingStack.push(checking ? Boolean.TRUE : Boolean.FALSE);", "+        checking = isNamedAsException(ast) && isExtendedClassNamedAsException(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8caa8563cddd1c0a6d32a2002c81e2d2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public void auditFinished(AuditEvent aEvt)", "signatureAfterChange": "     @Override     public void auditFinished(AuditEvent evt)", "diff": ["-    public void auditFinished(AuditEvent aEvt)", "+    public void auditFinished(AuditEvent evt)", "-        mWriter.println(\"</checkstyle>\");", "-        if (mCloseStream) {", "-            mWriter.close();", "+        writer.println(\"</checkstyle>\");", "+        if (closeStream) {", "+            writer.close();", "-            mWriter.flush();", "+            writer.flush();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d11dca48861b6c1a9af0084f5b68014", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private String getClassName(int aStartFrom, String aImport)", "signatureAfterChange": "     private String getClassName(int startFrom, String importStr)", "diff": ["-    private String getClassName(int aStartFrom, String aImport)", "+    private String getClassName(int startFrom, String importStr)", "-        String className = aImport;", "-        className = className.substring(aStartFrom, className.length());", "+        String className = importStr;", "+        className = className.substring(startFrom, className.length());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e9c795b13892e24ef8226184624d59b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static Configuration loadConfiguration(String aConfig,             PropertyResolver aOverridePropsResolver) throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(String config,             PropertyResolver overridePropsResolver) throws CheckstyleException", "diff": ["-    public static Configuration loadConfiguration(String aConfig,", "-            PropertyResolver aOverridePropsResolver) throws CheckstyleException", "+    public static Configuration loadConfiguration(String config,", "+            PropertyResolver overridePropsResolver) throws CheckstyleException", "-        return loadConfiguration(aConfig, aOverridePropsResolver, false);", "+        return loadConfiguration(config, overridePropsResolver, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90511beeaf5fe5dd52d99cc1c5242169", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean hasFallTruComment(DetailAST aCurrentCase,             DetailAST aNextCase)", "signatureAfterChange": "     private boolean hasFallTruComment(DetailAST currentCase,             DetailAST nextCase)", "diff": ["-    private boolean hasFallTruComment(DetailAST aCurrentCase,", "-            DetailAST aNextCase)", "+    private boolean hasFallTruComment(DetailAST currentCase,", "+            DetailAST nextCase)", "-        final int startLineNo = aCurrentCase.getLineNo();", "-        final int endLineNo = aNextCase.getLineNo();", "-        final int endColNo = aNextCase.getColumnNo();", "+        final int startLineNo = currentCase.getLineNo();", "+        final int endLineNo = nextCase.getLineNo();", "+        final int endColNo = nextCase.getColumnNo();", "-        if (commentMatch(mRegExp, linepart, endLineNo)) {", "+        if (commentMatch(regExp, linepart, endLineNo)) {", "-                return commentMatch(mRegExp, lines[i], i + 1);", "+                return commentMatch(regExp, lines[i], i + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ed6e77ea97b9ea46ed944eb1d18386", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void visitSemi(DetailAST aAst)", "signatureAfterChange": "     private void visitSemi(DetailAST ast)", "diff": ["-    private void visitSemi(DetailAST aAst)", "+    private void visitSemi(DetailAST ast)", "-        if (mExprDepth == 0) {", "-            mLastStatementEnd = aAst.getLineNo();", "+        if (exprDepth == 0) {", "+            lastStatementEnd = ast.getLineNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9106947a490c381fc7c29497a205a7fe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/testinputs/com/puppycrawl/tools/checkstyle/coding/InputFallThrough.java", "commitBeforeChange": "9a15d83aa778a856b091fdddf6b1807b239d3db8", "commitAfterChange": "be3f6d793cf12cba115d7a1aafd6d1affe0a4338", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     void method(int i, int j)", "signatureAfterChange": "     void method(int i, int j, boolean cond)", "diff": ["-    void method(int i, int j) {", "+    void method(int i, int j, boolean cond) {", "-                for (int j = 0; j < 10; j++) {", "+                for (int j1 = 0; j1 < 10; j1++) {", "-                while(false) {", "+                while(cond) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9141bd76ca2b201d1cf36e6d11c16182", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "62ca98db3434596d34c28134576b3eca549319b3", "commitAfterChange": "2d315277b6e1c152fd78da9fb91f214c43b31996", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setProperties(File props)", "signatureAfterChange": "     public void setProperties(File aProps)", "diff": ["-    public void setProperties(File props)", "+    public void setProperties(File aProps)", "-            mProperties.load(new FileInputStream(props));", "+            mProperties.load(new FileInputStream(aProps));", "-                \"Could not find Properties file '\" + props + \"'\", location);", "+                \"Could not find Properties file '\" + aProps + \"'\", location);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "920b6c1d0802f1eb90ab4500bdb8e66c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static Map<String, Set<File>> arrangePropertyFiles(         List<File> propFiles, String basenameSeparator)", "signatureAfterChange": "     private static Map<String, Set<File>> arrangePropertyFiles(         List<File> propFiles, String basenameSeparator)", "diff": ["-        for (final File f : propFiles) {", "-            final String identifier = extractPropertyIdentifier(f,", "+        for (final File file : propFiles) {", "+            final String identifier = extractPropertyIdentifier(file,", "-            fileSet.add(f);", "+            fileSet.add(file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92a942df80a44f2c926b3d994c36ba74", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     PkgControl locateFinest(final String aForPkg)", "signatureAfterChange": "     PkgControl locateFinest(final String forPkg)", "diff": ["-    PkgControl locateFinest(final String aForPkg)", "+    PkgControl locateFinest(final String forPkg)", "-        if (!aForPkg.startsWith(getFullPackage())) {", "+        if (!forPkg.startsWith(getFullPackage())) {", "-        for (PkgControl pc : mChildren) {", "-            final PkgControl match = pc.locateFinest(aForPkg);", "+        for (PkgControl pc : children) {", "+            final PkgControl match = pc.locateFinest(forPkg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92aad2865bd1d1da48bc4ea48f7d8ebf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/BooleanExpressionComplexityCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void visitExpr()", "signatureAfterChange": "     private void visitExpr()", "diff": ["-        mContextStack.push(mContext);", "-        mContext = new Context((mContext == null) || mContext.isChecking());", "+        contextStack.push(context);", "+        context = new Context((context == null) || context.isChecking());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92fbcc0572c05475121a2eb8cc14196c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void setIgnoreOverridenMethods(boolean aIgnoreOverridenMethods)", "signatureAfterChange": "     public void setIgnoreOverridenMethods(boolean ignoreOverridenMethods)", "diff": ["-    public void setIgnoreOverridenMethods(boolean aIgnoreOverridenMethods)", "+    public void setIgnoreOverridenMethods(boolean ignoreOverridenMethods)", "-        this.mIgnoreOverridenMethods = aIgnoreOverridenMethods;", "+        this.ignoreOverridenMethods = ignoreOverridenMethods;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "931f26a50eac7df152e7837cc1a13a8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void setMethodMaximum(int methodMax)", "signatureAfterChange": "     public void setMethodMaximum(int methodMaximum)", "diff": ["-    public void setMethodMaximum(int methodMax) {", "-        this.methodMax = methodMax;", "+    public void setMethodMaximum(int methodMaximum) {", "+        this.methodMaximum = methodMaximum;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9520b3f55160b3cd3059b006fd3251af", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void checkTrailingComma(final DetailAST aAnnotation)", "signatureAfterChange": "     private void checkTrailingComma(final DetailAST annotation)", "diff": ["-    private void checkTrailingComma(final DetailAST aAnnotation)", "+    private void checkTrailingComma(final DetailAST annotation)", "-        if (TrailingArrayComma.IGNORE.equals(this.mComma)", "-            || this.mComma == null)", "+        if (TrailingArrayComma.IGNORE.equals(this.comma)", "+            || this.comma == null)", "-        DetailAST child = aAnnotation.getFirstChild();", "+        DetailAST child = annotation.getFirstChild();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "952dce5763ab1afc0cbfa8ccc9e7d986", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mMatcher = pattern.matcher(getFileContents().getText().getFullText());", "-        mMatchCount = 0;", "-        mErrorCount = 0;", "+        matcher = pattern.matcher(getFileContents().getText().getFullText());", "+        matchCount = 0;", "+        errorCount = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9655d298fa7cc90d903698b96625bb11", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setClosingParens(final String aParens)", "signatureAfterChange": "     public void setClosingParens(final String parens)", "diff": ["-    public void setClosingParens(final String aParens)", "+    public void setClosingParens(final String parens)", "-        this.mParens = this.getOption(ClosingParens.class, aParens);", "+        this.parens = this.getOption(ClosingParens.class, parens);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9678a1dacc3293028506c1f4eaf7374f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LineColumn.java", "commitBeforeChange": "16512bb1e7e31bedece4a745dad9c5960f141fca", "commitAfterChange": "abfc952fd0ed88f6246b1d969a8a980ea63f0bd6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public LineColumn(int line, int col)", "signatureAfterChange": "     public LineColumn(int line, int column)", "diff": ["-    public LineColumn(int line, int col) {", "+    public LineColumn(int line, int column) {", "-        this.col = col;", "+        this.column = column;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9760412534f9115738d119c8ae1169cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     @Override     public boolean accept(AuditEvent aEvent)", "signatureAfterChange": "     @Override     public boolean accept(AuditEvent event)", "diff": ["-    public boolean accept(AuditEvent aEvent)", "+    public boolean accept(AuditEvent event)", "-        if (aEvent.getLocalizedMessage() == null) {", "+        if (event.getLocalizedMessage() == null) {", "-        for (final Iterator<Tag> iter = mTags.iterator(); iter.hasNext();) {", "+        for (final Iterator<Tag> iter = tags.iterator(); iter.hasNext();) {", "-            if (tag.isMatch(aEvent)) {", "+            if (tag.isMatch(event)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97de1e3809fef514980bd981adc73425", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "bdd55605c098cb581884a790286dfec5e57710c8", "commitAfterChange": "913028d7f2698018bb9414d763110d3ef25be875", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public void setHeaderIgnoreLine(int aNum)", "signatureAfterChange": "     public void setHeaderIgnoreLine(String aList)", "diff": ["-    /** @param aNum **/", "-    public void setHeaderIgnoreLine(int aNum)", "+    /** @param aList Comma separated list of line numbers **/", "+    public void setHeaderIgnoreLine(String aList)", "-        mConfig.setHeaderIgnoreLineNo(aNum);", "+        mConfig.setHeaderIgnoreLines(aList);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "981cc776dde8f43dc5b5add9a3e5df47", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private boolean matchesStaticImportGroup(boolean aStatic, String aCurrentGroup)", "signatureAfterChange": "     private boolean matchesStaticImportGroup(boolean isStatic, String currentGroup)", "diff": ["-    private boolean matchesStaticImportGroup(boolean aStatic, String aCurrentGroup)", "+    private boolean matchesStaticImportGroup(boolean isStatic, String currentGroup)", "-        return aStatic && STATIC_RULE_GROUP.equals(aCurrentGroup);", "+        return isStatic && STATIC_RULE_GROUP.equals(currentGroup);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98699c3f7e3101aaf9d2670ccc650cdc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void compareKeySets(Set<Object> aKeys,             Map<File, Set<Object>> aFileMap)", "signatureAfterChange": "     private void compareKeySets(Set<Object> keys,             Map<File, Set<Object>> fileMap)", "diff": ["-    private void compareKeySets(Set<Object> aKeys,", "-            Map<File, Set<Object>> aFileMap)", "+    private void compareKeySets(Set<Object> keys,", "+            Map<File, Set<Object>> fileMap)", "-        final Set<Entry<File, Set<Object>>> fls = aFileMap.entrySet();", "+        final Set<Entry<File, Set<Object>>> fls = fileMap.entrySet();", "-            final Set<Object> keysClone = Sets.newHashSet(aKeys);", "+            final Set<Object> keysClone = Sets.newHashSet(keys);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "987b1858595acbde610dc7f54f7b79c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "de39a36a6b81521c17e3a4afa0e98e30deccf082", "commitAfterChange": "2b4a02d2c8a498a8a1ee38e9396426209fa65fad", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static String getConfigHashCode(Serializable object)", "signatureAfterChange": "     private static String getConfigHashCode(Serializable object)", "diff": ["-            final ByteArrayOutputStream baos = new ByteArrayOutputStream();", "+            final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();", "-                oos = new ObjectOutputStream(baos);", "+                oos = new ObjectOutputStream(outputStream);", "-            md.update(baos.toByteArray());", "+            md.update(outputStream.toByteArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98b2a02da2b39229fc4c9a04beca106f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private String getImportGroup(boolean aStatic, String aImportPath)", "signatureAfterChange": "     private String getImportGroup(boolean isStatic, String importPath)", "diff": ["-    private String getImportGroup(boolean aStatic, String aImportPath)", "+    private String getImportGroup(boolean isStatic, String importPath)", "-        for (String group : mCustomImportOrderRules) {", "-            if (matchesImportGroup(aStatic, aImportPath, group)) {", "+        for (String group : customImportOrderRules) {", "+            if (matchesImportGroup(isStatic, importPath, group)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "991b9fa140c6ef499a0f964b4f84049b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean isOnlyUnicodeValidChars(String aLiteral, Pattern aPattern)", "signatureAfterChange": "     private boolean isOnlyUnicodeValidChars(String literal, Pattern pattern)", "diff": ["-    private boolean isOnlyUnicodeValidChars(String aLiteral, Pattern aPattern)", "+    private boolean isOnlyUnicodeValidChars(String literal, Pattern pattern)", "-                countMatches(sUnicodeRegexp, aLiteral);", "+                countMatches(sUnicodeRegexp, literal);", "-                countMatches(aPattern, aLiteral);", "+                countMatches(pattern, literal);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99b70ed0879b1b04f0f0eb1f9a63f937", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private Tag findNearestMatch(AuditEvent aEvent)", "signatureAfterChange": "     private Tag findNearestMatch(AuditEvent event)", "diff": ["-    private Tag findNearestMatch(AuditEvent aEvent)", "+    private Tag findNearestMatch(AuditEvent event)", "-        // TODO: try binary search if sequential search becomes a performance", "+        // TODO: try binary search if sequential search becomes a perforonce", "-        for (Tag tag : mTags) {", "-            if ((tag.getLine() > aEvent.getLine())", "-                || ((tag.getLine() == aEvent.getLine())", "-                    && (tag.getColumn() > aEvent.getColumn())))", "+        for (Tag tag : tags) {", "+            if ((tag.getLine() > event.getLine())", "+                || ((tag.getLine() == event.getLine())", "+                    && (tag.getColumn() > event.getColumn())))", "-            if (tag.isMatch(aEvent)) {", "+            if (tag.isMatch(event)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a0ccc5f070bd60d580237dfbfe834a2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean isNumericType(int aType)", "signatureAfterChange": "     private boolean isNumericType(int type)", "diff": ["-    private boolean isNumericType(int aType)", "+    private boolean isNumericType(int type)", "-        return ((aType == TokenTypes.LITERAL_BYTE)", "-                || (aType == TokenTypes.LITERAL_SHORT)", "-                || (aType == TokenTypes.LITERAL_INT)", "-                || (aType == TokenTypes.LITERAL_FLOAT)", "-                || (aType == TokenTypes.LITERAL_LONG)", "-                || (aType == TokenTypes.LITERAL_DOUBLE));", "+        return ((type == TokenTypes.LITERAL_BYTE)", "+                || (type == TokenTypes.LITERAL_SHORT)", "+                || (type == TokenTypes.LITERAL_INT)", "+                || (type == TokenTypes.LITERAL_FLOAT)", "+                || (type == TokenTypes.LITERAL_LONG)", "+                || (type == TokenTypes.LITERAL_DOUBLE));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a306005cbfaeaf6016f3c13ad11588a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java", "commitBeforeChange": "b6d9344d1c152f225a22ce9ce09341b3cc9488af", "commitAfterChange": "72faf5617ac6ed96b46ad71c60cf0eda95947531", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testMisc() throws ClassNotFoundException", "signatureAfterChange": "     @Test     public void testMisc() throws ClassNotFoundException", "diff": ["-        final Set<String> imps = Sets.newHashSet();", "-        imps.add(\"java.io.File\");", "-        imps.add(\"nothing.will.match.*\");", "-        imps.add(\"java.applet.*\");", "-        ClassResolver cr =", "+        final Set<String> imports = Sets.newHashSet();", "+        imports.add(\"java.io.File\");", "+        imports.add(\"nothing.will.match.*\");", "+        imports.add(\"java.applet.*\");", "+        ClassResolver classResolver =", "-                              null, imps);", "-        assertNotNull(cr);", "+                null, imports);", "+        assertNotNull(classResolver);", "-            cr.resolve(\"who.will.win.the.world.cup\", \"\");", "+            classResolver.resolve(\"who.will.win.the.world.cup\", \"\");", "-        cr.resolve(\"java.lang.String\", \"\");", "-        cr.resolve(\"StringBuffer\", \"\");", "-        cr.resolve(\"AppletContext\", \"\");", "+        classResolver.resolve(\"java.lang.String\", \"\");", "+        classResolver.resolve(\"StringBuffer\", \"\");", "+        classResolver.resolve(\"AppletContext\", \"\");", "-            cr.resolve(\"ChoiceFormat\", \"\");", "+            classResolver.resolve(\"ChoiceFormat\", \"\");", "-        imps.add(\"java.text.ChoiceFormat\");", "-        ClassResolver newClassResolver = new ClassResolver(Thread.currentThread().getContextClassLoader(), null, imps);", "+        imports.add(\"java.text.ChoiceFormat\");", "+        ClassResolver newClassResolver = new ClassResolver(", "+                Thread.currentThread().getContextClassLoader(), null, imports);", "-                Thread.currentThread().getContextClassLoader(), \"java.util\", imps);", "+                Thread.currentThread().getContextClassLoader(), \"java.util\", imports);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a9e66fda84d40ce540c675c5455c879", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDoclet.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static boolean start(RootDoc root)             throws FileNotFoundException", "signatureAfterChange": "     public static boolean start(RootDoc root)             throws FileNotFoundException", "diff": ["-        final PrintWriter pw = new PrintWriter(osw, false);", "+        final PrintWriter writer = new PrintWriter(osw, false);", "-                    pw.println(field.name() + \"=\"", "-                        + field.firstSentenceTags()[0].text());", "+                    writer.println(field.name() + \"=\"", "+                            + field.firstSentenceTags()[0].text());", "-            pw.close();", "+            writer.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b2e50e19721c70526da5c883f8bf753", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "a13ebd482ce5dd891ba99d4c22a7cd5ff7d8e2dc", "commitAfterChange": "dad4fa599aa3570980fcaff4cb5f37941847a7a1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDestroy() throws Exception", "signatureAfterChange": "     @Test     public void testDestroy() throws Exception", "diff": ["-        final DebugChecker c = new DebugChecker();", "+        final DebugChecker checker = new DebugChecker();", "-        c.addListener(auditAdapter);", "-        final DebugFilter f = new DebugFilter();", "-        c.addFilter(f);", "+        checker.addListener(auditAdapter);", "+        final DebugFilter filter = new DebugFilter();", "+        checker.addFilter(filter);", "-        c.destroy(); // should remove al listeners and filters", "+        checker.destroy(); // should remove al listeners and filters", "-        c.fireAuditStarted();", "-        c.fireAuditFinished();", "-        c.fireFileStarted(\"Some File Name\");", "-        c.fireFileFinished(\"Some File Name\");", "+        checker.fireAuditStarted();", "+        checker.fireAuditFinished();", "+        checker.fireFileStarted(\"Some File Name\");", "+        checker.fireFileFinished(\"Some File Name\");", "-        c.fireErrors(\"Some File Name\", msgs);", "+        checker.fireErrors(\"Some File Name\", msgs);", "-        assertFalse(\"Checker.destroy() doesn't remove filters.\", f.wasCalled());", "+        assertFalse(\"Checker.destroy() doesn't remove filters.\", filter.wasCalled());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b7d7d176f1b95473647d2c6cb3b1114", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private String getConfigHashCode(Serializable aConfiguration)", "signatureAfterChange": "     private String getConfigHashCode(Serializable configuration)", "diff": ["-    private String getConfigHashCode(Serializable aConfiguration)", "+    private String getConfigHashCode(Serializable configuration)", "-                oos.writeObject(aConfiguration);", "+                oos.writeObject(configuration);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ba7bcc335516aa0ffc127613f3569f1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "0ce872d7cc6b0b1564655b9e3119f72911f4dddd", "commitAfterChange": "ea9ff3965d9c657b5b7bd2d969e075f430635c47", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static String getConfigHashCode(Serializable configuration)", "signatureAfterChange": "     private static String getConfigHashCode(Serializable object)", "diff": ["-    private static String getConfigHashCode(Serializable configuration) {", "+    private static String getConfigHashCode(Serializable object) {", "-                oos.writeObject(configuration);", "+                oos.writeObject(object);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bb5e83bf17f313d14771ba85803bda7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int process(List<File> files)", "signatureAfterChange": "     public int process(List<File> files)", "diff": ["-        for (final File f : files) {", "-            if (!Utils.fileExtensionMatches(f, fileExtensions)) {", "+        for (final File file : files) {", "+            if (!Utils.fileExtensionMatches(file, fileExtensions)) {", "-            final String fileName = f.getAbsolutePath();", "+            final String fileName = file.getAbsolutePath();", "-                final FileText theText = new FileText(f.getAbsoluteFile(),", "+                final FileText theText = new FileText(file.getAbsoluteFile(),", "-                    fileMessages.addAll(fsc.process(f, theText));", "+                    fileMessages.addAll(fsc.process(file, theText));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d0bcc563929a53319a42dca10de3545", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "bf529ef600fa9ef2034d0412c198b2121f2b94f2", "commitAfterChange": "ce196814d857a4244a80c51d5151cc35e90b6749", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     @Override     public void fireErrors(String fileName, SortedSet<LocalizedMessage> errors)", "signatureAfterChange": "     @Override     public void fireErrors(String fileName, SortedSet<LocalizedMessage> errors)", "diff": ["-            final AuditEvent evt = new AuditEvent(this, stripped, element);", "-            if (filters.accept(evt)) {", "+            final AuditEvent event = new AuditEvent(this, stripped, element);", "+            if (filters.accept(event)) {", "-                    listener.addError(evt);", "+                    listener.addError(event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d1ac03a42c56779730e8bcc6bdaecfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "         @Override         public int compareTo(Tag aOther)", "signatureAfterChange": "         @Override         public int compareTo(Tag other)", "diff": ["-        public int compareTo(Tag aOther)", "+        public int compareTo(Tag other)", "-            if (mFirstLine == aOther.mFirstLine) {", "-                return mLastLine - aOther.mLastLine;", "+            if (firstLine == other.firstLine) {", "+                return lastLine - other.lastLine;", "-            return (mFirstLine - aOther.mFirstLine);", "+            return (firstLine - other.firstLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d377a3ae9485183d499a92b172c88b4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "5dffb5a301b2605c730d1de3f312ba4a7f95355e", "commitAfterChange": "4d8d047f465f9eb101390da63ee62a735fbedba5", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "      @Test     public void testIncorrectTag() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrectTag() throws Exception", "diff": ["-            for (Constructor<?> constr: parentConstructors) {", "-                constr.setAccessible(true);", "-                ctorParent = constr;", "+            for (Constructor<?> parentConstructor: parentConstructors) {", "+                parentConstructor.setAccessible(true);", "+                ctorParent = parentConstructor;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d586ce0c72483c49fa44d26cb725be7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java", "commitBeforeChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "commitAfterChange": "4c1148db9982918e65f8d1156e8fb9c07b206fc9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public boolean equals(Object o)", "signatureAfterChange": "      @Override     public boolean equals(Object o)", "diff": ["-        final SuppressElement that = (SuppressElement) o;", "-        return Objects.equals(filePattern, that.filePattern)", "-                && Objects.equals(checkPattern, that.checkPattern)", "-                && Objects.equals(moduleId, that.moduleId)", "-                && Objects.equals(linesCSV, that.linesCSV)", "-                && Objects.equals(columnsCSV, that.columnsCSV);", "+        final SuppressElement suppressElement = (SuppressElement) o;", "+        return Objects.equals(filePattern, suppressElement.filePattern)", "+                && Objects.equals(checkPattern, suppressElement.checkPattern)", "+                && Objects.equals(moduleId, suppressElement.moduleId)", "+                && Objects.equals(linesCSV, suppressElement.linesCSV)", "+                && Objects.equals(columnsCSV, suppressElement.columnsCSV);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dbd649f85ba99ff906000ccaec2d9bc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public String getAttribute(String aName) throws CheckstyleException", "signatureAfterChange": "     @Override     public String getAttribute(String name) throws CheckstyleException", "diff": ["-    public String getAttribute(String aName) throws CheckstyleException", "+    public String getAttribute(String name) throws CheckstyleException", "-        if (!mAttributeMap.containsKey(aName)) {", "+        if (!attributeMap.containsKey(name)) {", "-                    \"missing key '\" + aName + \"' in \" + getName());", "+                    \"missing key '\" + name + \"' in \" + getName());", "-        return mAttributeMap.get(aName);", "+        return attributeMap.get(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e81d8ff7ca86e5e9fade24599f81457", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java", "commitBeforeChange": "2cf54ade2182e29c413f23e2235a896247d7a2ad", "commitAfterChange": "d282053d9ce02c13c779decfd079a8305086f752", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkLine(int lineno, String line, Matcher matcher,             int startPosition)", "signatureAfterChange": "     private void checkLine(int lineNo, String line, Matcher matcher,             int startPosition)", "diff": ["-    private void checkLine(int lineno, String line, Matcher matcher,", "+    private void checkLine(int lineNo, String line, Matcher matcher,", "-                .shouldSuppress(lineno, startCol, lineno, endCol - 1)) {", "+                .shouldSuppress(lineNo, startCol, lineNo, endCol - 1)) {", "-                checkLine(lineno, line, matcher, endCol);", "+                checkLine(lineNo, line, matcher, endCol);", "-                options.getReporter().log(lineno, \"regexp.exceeded\",", "+                options.getReporter().log(lineNo, \"regexp.exceeded\",", "-                options.getReporter().log(lineno, options.getMessage());", "+                options.getReporter().log(lineNo, options.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ecd0591661fdc2259b5e87292c8114b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void endCollectingDeclarations(Queue<LexicalFrame> aFrameStack,         DetailAST aAST)", "signatureAfterChange": "     private void endCollectingDeclarations(Queue<LexicalFrame> frameStack,         DetailAST ast)", "diff": ["-    private void endCollectingDeclarations(Queue<LexicalFrame> aFrameStack,", "-        DetailAST aAST)", "+    private void endCollectingDeclarations(Queue<LexicalFrame> frameStack,", "+        DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            this.mFrames.put(aAST, aFrameStack.poll());", "+            this.frames.put(ast, frameStack.poll());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f32f02d8521e91923725f3ae9407b24", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "         @Override         public boolean isCellEditable(EventObject e)", "signatureAfterChange": "         @Override         public boolean isCellEditable(EventObject event)", "diff": ["-        public boolean isCellEditable(EventObject e) {", "-            if (e instanceof MouseEvent) {", "+        public boolean isCellEditable(EventObject event) {", "+            if (event instanceof MouseEvent) {", "-                        final MouseEvent me = (MouseEvent) e;", "-                        final MouseEvent newME = new MouseEvent(tree, me.getID(),", "-                                me.getWhen(), me.getModifiers(),", "-                                me.getX() - getCellRect(0, counter, true).x,", "-                                me.getY(), me.getClickCount(),", "-                                me.isPopupTrigger());", "-                        tree.dispatchEvent(newME);", "+                        final MouseEvent mouseEvent = (MouseEvent) event;", "+                        final MouseEvent newMouseEvent = new MouseEvent(tree, mouseEvent.getID(),", "+                                mouseEvent.getWhen(), mouseEvent.getModifiers(),", "+                                mouseEvent.getX() - getCellRect(0, counter, true).x,", "+                                mouseEvent.getY(), mouseEvent.getClickCount(),", "+                                mouseEvent.isPopupTrigger());", "+                        tree.dispatchEvent(newMouseEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f59438ba8ae65e21384f9249031ffed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.IDENT) {", "-            if (mCollect) {", "-                processIdent(aAST);", "+        if (ast.getType() == TokenTypes.IDENT) {", "+            if (collect) {", "+                processIdent(ast);", "-        else if (aAST.getType() == TokenTypes.IMPORT) {", "-            processImport(aAST);", "+        else if (ast.getType() == TokenTypes.IMPORT) {", "+            processImport(ast);", "-        else if (aAST.getType() == TokenTypes.STATIC_IMPORT) {", "-            processStaticImport(aAST);", "+        else if (ast.getType() == TokenTypes.STATIC_IMPORT) {", "+            processStaticImport(ast);", "-            mCollect = true;", "-            if (mProcessJavadoc) {", "-                processJavadoc(aAST);", "+            collect = true;", "+            if (processJavadoc) {", "+                processJavadoc(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f6c4cfcd3670d38aa87e7afeb3c4d69", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "25badc206f9b8fdce3391992cec951235250a3d2", "commitAfterChange": "aab0718232e060bd8f289770ab81780b3a2705a2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     PkgControl locateFinest(final String forPkg)", "signatureAfterChange": "     PkgControl locateFinest(final String forPkg)", "diff": ["-            for (PkgControl pc : children) {", "-                final PkgControl match = pc.locateFinest(forPkg);", "+            for (PkgControl child : children) {", "+                final PkgControl match = child.locateFinest(forPkg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a040c7a720715ea7c692d1a17122ad75", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static String getCanonicalName(DetailAST aImport)", "signatureAfterChange": "     private static String getCanonicalName(DetailAST importAst)", "diff": ["-    private static String getCanonicalName(DetailAST aImport)", "+    private static String getCanonicalName(DetailAST importAst)", "-        DetailAST toVisit = aImport;", "+        DetailAST toVisit = importAst;", "-            toVisit = getNextSubTreeNode(toVisit, aImport);", "+            toVisit = getNextSubTreeNode(toVisit, importAst);", "-                final DetailAST nextSubTreeNode = getNextSubTreeNode(toVisit, aImport);", "+                final DetailAST nextSubTreeNode = getNextSubTreeNode(toVisit, importAst);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a069e1f32e2adaa73bed2fc2c017ac95", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     @Override     public void fireErrors(String aFileName,         SortedSet<LocalizedMessage> aErrors)", "signatureAfterChange": "     @Override     public void fireErrors(String fileName,         SortedSet<LocalizedMessage> errors)", "diff": ["-    public void fireErrors(String aFileName,", "-        SortedSet<LocalizedMessage> aErrors)", "+    public void fireErrors(String fileName,", "+        SortedSet<LocalizedMessage> errors)", "-        final String stripped = getStrippedFileName(aFileName);", "-        for (final LocalizedMessage element : aErrors) {", "+        final String stripped = getStrippedFileName(fileName);", "+        for (final LocalizedMessage element : errors) {", "-            if (mFilters.accept(evt)) {", "-                for (final AuditListener listener : mListeners) {", "+            if (filters.accept(evt)) {", "+                for (final AuditListener listener : listeners) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a07a2595b6e92b60e825a3b660475a9b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void setClassMaximum(int classMax)", "signatureAfterChange": "     public void setClassMaximum(int classMaximum)", "diff": ["-    public void setClassMaximum(int classMax) {", "-        this.classMax = classMax;", "+    public void setClassMaximum(int classMaximum) {", "+        this.classMaximum = classMaximum;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0cc7128c690985f01af1bbcf0c9fff4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "         @Override         public int compareTo(Tag aObject)", "signatureAfterChange": "         @Override         public int compareTo(Tag object)", "diff": ["-        public int compareTo(Tag aObject)", "+        public int compareTo(Tag object)", "-            if (mLine == aObject.mLine) {", "-                return mColumn - aObject.mColumn;", "+            if (line == object.line) {", "+                return column - object.column;", "-            return (mLine - aObject.mLine);", "+            return (line - object.line);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a174031f6cf20624090fd7a55786c767", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "         public void checkCoupling()", "signatureAfterChange": "         public void checkCoupling()", "diff": ["-            mReferencedClassNames.remove(mClassName);", "-            mReferencedClassNames.remove(mPackageName + \".\" + mClassName);", "+            referencedClassNames.remove(className);", "+            referencedClassNames.remove(packageName + \".\" + className);", "-            if (mReferencedClassNames.size() > mMax) {", "-                log(mLineNo, mColumnNo, getLogMessageId(),", "-                        mReferencedClassNames.size(), getMax(),", "-                        mReferencedClassNames.toString());", "+            if (referencedClassNames.size() > max) {", "+                log(lineNo, columnNo, getLogMessageId(),", "+                        referencedClassNames.size(), getMax(),", "+                        referencedClassNames.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1c427a15c72c5ade0b874b295d1e808", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean hasAnyImportInCurrentGroup(String aCurrentGroup)", "signatureAfterChange": "     private boolean hasAnyImportInCurrentGroup(String currentGroup)", "diff": ["-    private boolean hasAnyImportInCurrentGroup(String aCurrentGroup)", "+    private boolean hasAnyImportInCurrentGroup(String currentGroup)", "-        for (ImportDetails currentImport : mImportToGroupList) {", "-            if (aCurrentGroup.equals(currentImport.getImportGroup())) {", "+        for (ImportDetails currentImport : importToGroupList) {", "+            if (currentGroup.equals(currentImport.getImportGroup())) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a297e21842c405cf20ef9a88a7992fb1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private int getGroupNumber(String aName)", "signatureAfterChange": "     private int getGroupNumber(String name)", "diff": ["-    private int getGroupNumber(String aName)", "+    private int getGroupNumber(String name)", "-        int bestIndex = mGroups.length;", "+        int bestIndex = groups.length;", "-        // loop over mGroups and get index", "-        for (int i = 0; i < mGroups.length; i++) {", "-            final Matcher matcher = mGroups[i].matcher(aName);", "+        // loop over groups and get index", "+        for (int i = 0; i < groups.length; i++) {", "+            final Matcher matcher = groups[i].matcher(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2e520a7719fa8f2c82ca578f588bef1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected AbstractLoader(Map<String, String> aPublicIdToResourceNameMap)         throws SAXException, ParserConfigurationException", "signatureAfterChange": "     protected AbstractLoader(Map<String, String> publicIdToResourceNameMap)         throws SAXException, ParserConfigurationException", "diff": ["-    protected AbstractLoader(Map<String, String> aPublicIdToResourceNameMap)", "+    protected AbstractLoader(Map<String, String> publicIdToResourceNameMap)", "-        mPublicIdToResourceNameMap =", "-            Maps.newHashMap(aPublicIdToResourceNameMap);", "+        this.publicIdToResourceNameMap =", "+            Maps.newHashMap(publicIdToResourceNameMap);", "-        mParser = factory.newSAXParser().getXMLReader();", "-        mParser.setContentHandler(this);", "-        mParser.setEntityResolver(this);", "-        mParser.setErrorHandler(this);", "+        parser = factory.newSAXParser().getXMLReader();", "+        parser.setContentHandler(this);", "+        parser.setEntityResolver(this);", "+        parser.setErrorHandler(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3f092413a94eed8ab3ba13fa1f47742", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "          @Override         public void dragExit(DropTargetEvent evt)", "signatureAfterChange": "          @Override         public void dragExit(DropTargetEvent evt)", "diff": ["-                final JComponent jc = (JComponent) component;", "-                jc.setBorder(normalBorder);", "+                final JComponent comp = (JComponent) component;", "+                comp.setBorder(normalBorder);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a41c605ded3e3a155923310560817803", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "16512bb1e7e31bedece4a745dad9c5960f141fca", "commitAfterChange": "abfc952fd0ed88f6246b1d969a8a980ea63f0bd6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public LocalizedMessage(int lineNo,                             int colNo,                             String bundle,                             String key,                             Object[] args,                             String moduleId,                             Class<?> sourceClass,                             String customMessage)", "signatureAfterChange": "     public LocalizedMessage(int lineNo,                             int columnNo,                             String bundle,                             String key,                             Object[] args,                             String moduleId,                             Class<?> sourceClass,                             String customMessage)", "diff": ["-                            int colNo,", "+                            int columnNo,", "-             colNo,", "+                columnNo,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a48306aae52812604f3bde68ca543c4a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void setClasses(String aClassNames)", "signatureAfterChange": "     public void setClasses(String classNames)", "diff": ["-    public void setClasses(String aClassNames)", "+    public void setClasses(String classNames)", "-        mIllegalClasses.clear();", "-        final StringTokenizer tok = new StringTokenizer(aClassNames, \",\");", "+        illegalClasses.clear();", "+        final StringTokenizer tok = new StringTokenizer(classNames, \",\");", "-            mIllegalClasses.add(tok.nextToken());", "+            illegalClasses.add(tok.nextToken());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4b3e3aadf9fc30bc2e630d310fab62b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void visitMethodDef(DetailAST aAST)", "signatureAfterChange": "     private void visitMethodDef(DetailAST ast)", "diff": ["-    private void visitMethodDef(DetailAST aAST)", "+    private void visitMethodDef(DetailAST ast)", "-        mParameterNamesStack.push(mParameterNames);", "-        mParameterNames = Sets.newHashSet();", "+        parameterNamesStack.push(parameterNames);", "+        parameterNames = Sets.newHashSet();", "-        visitMethodParameters(aAST.findFirstToken(TokenTypes.PARAMETERS));", "+        visitMethodParameters(ast.findFirstToken(TokenTypes.PARAMETERS));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a52c62304e05bdbc45fa28a98394f98d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static int lengthExpandedTabs(String aString,                                          int aToIdx,                                          int aTabWidth)", "signatureAfterChange": "     public static int lengthExpandedTabs(String string,                                          int toIdx,                                          int tabWidth)", "diff": ["-    public static int lengthExpandedTabs(String aString,", "-                                         int aToIdx,", "-                                         int aTabWidth)", "+    public static int lengthExpandedTabs(String string,", "+                                         int toIdx,", "+                                         int tabWidth)", "-        for (int idx = 0; idx < aToIdx; idx++) {", "-            if (aString.charAt(idx) == '\\t') {", "-                len = (len / aTabWidth + 1) * aTabWidth;", "+        for (int idx = 0; idx < toIdx; idx++) {", "+            if (string.charAt(idx) == '\\t') {", "+                len = (len / tabWidth + 1) * tabWidth;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a54c9414692a84b9bbef5b9df126838b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            for (final Counter c : counters) {", "-                c.increment();", "+            for (final Counter counter : counters) {", "+                counter.increment();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5b2e6c20fa2028fbfa96e371fb5f4ed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     static PkgControl load(final URI aUri) throws CheckstyleException", "signatureAfterChange": "     static PkgControl load(final URI uri) throws CheckstyleException", "diff": ["-    static PkgControl load(final URI aUri) throws CheckstyleException", "+    static PkgControl load(final URI uri) throws CheckstyleException", "-            is = aUri.toURL().openStream();", "+            is = uri.toURL().openStream();", "-            throw new CheckstyleException(\"syntax error in url \" + aUri, e);", "+            throw new CheckstyleException(\"syntax error in url \" + uri, e);", "-            throw new CheckstyleException(\"unable to find \" + aUri, e);", "+            throw new CheckstyleException(\"unable to find \" + uri, e);", "-        return load(source, aUri);", "+        return load(source, uri);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a60aa8f3313f54493e1c83115ef66ab1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     protected final int getLineStart(String aLine)", "signatureAfterChange": "     protected final int getLineStart(String line)", "diff": ["-    protected final int getLineStart(String aLine)", "+    protected final int getLineStart(String line)", "-        for (int start = 0; start < aLine.length(); start++) {", "-            final char c = aLine.charAt(start);", "+        for (int start = 0; start < line.length(); start++) {", "+            final char c = line.charAt(start);", "-                    aLine, start, mIndentCheck.getIndentationTabWidth());", "+                    line, start, indentCheck.getIndentationTabWidth());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6d469f61d0af60aa66556c137a1e2f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlLoader.java", "commitBeforeChange": "7eb80732e99d1018810eb8cba29d2e3bec9b7ae0", "commitAfterChange": "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void startElement(final String namespaceURI,                              final String locqName,                              final String qName,                              final Attributes atts)         throws SAXException", "signatureAfterChange": "      @Override     public void startElement(final String namespaceURI,                              final String locqName,                              final String qName,                              final Attributes attributes)         throws SAXException", "diff": ["-                             final Attributes atts)", "+                             final Attributes attributes)", "-            final String pkg = safeGet(atts, PKG_ATTRIBUTE_NAME);", "+            final String pkg = safeGet(attributes, PKG_ATTRIBUTE_NAME);", "-            final String name = safeGet(atts, \"name\");", "+            final String name = safeGet(attributes, \"name\");", "-            final boolean isLocalOnly = atts.getValue(\"local-only\") != null;", "-            final String pkg = atts.getValue(PKG_ATTRIBUTE_NAME);", "-            final boolean regex = atts.getValue(\"regex\") != null;", "+            final boolean isLocalOnly = attributes.getValue(\"local-only\") != null;", "+            final String pkg = attributes.getValue(PKG_ATTRIBUTE_NAME);", "+            final boolean regex = attributes.getValue(\"regex\") != null;", "-                        atts.getValue(\"exact-match\") != null;", "+                        attributes.getValue(\"exact-match\") != null;", "-                final String clazz = safeGet(atts, \"class\");", "+                final String clazz = safeGet(attributes, \"class\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a76c1cd40f248bc4850225bc7282668f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/CommentsIndentationCheck.java", "commitBeforeChange": "e21676f52f3d68294122244cea63b4ecbe92de8f", "commitAfterChange": "0f9490c4ab86e6df2cfe90db1ffe04e906a5edad", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 30, "signatureBeforeChange": "     private static boolean areSameLevelIndented(DetailAST singleLineComment,                                                 DetailAST prevStmt, DetailAST nextStmt)", "signatureAfterChange": "     private static boolean areSameLevelIndented(DetailAST comment, DetailAST prevStmt,                                                 DetailAST nextStmt)", "diff": ["-    private static boolean areSameLevelIndented(DetailAST singleLineComment,", "-                                                DetailAST prevStmt, DetailAST nextStmt) {", "+    private static boolean areSameLevelIndented(DetailAST comment, DetailAST prevStmt,", "+                                                DetailAST nextStmt) {", "-            result = singleLineComment.getColumnNo() == nextStmt.getColumnNo();", "+            result = comment.getColumnNo() == nextStmt.getColumnNo();", "-            result = singleLineComment.getColumnNo() == nextStmt.getColumnNo()", "-                || singleLineComment.getColumnNo() == prevStmt.getColumnNo();", "+            result = comment.getColumnNo() == nextStmt.getColumnNo()", "+                || comment.getColumnNo() == prevStmt.getColumnNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7f9f5ad7df7d0accb1b35aafd938734", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SeverityMatchFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public boolean accept(AuditEvent aEvent)", "signatureAfterChange": "     @Override     public boolean accept(AuditEvent event)", "diff": ["-    public boolean accept(AuditEvent aEvent)", "+    public boolean accept(AuditEvent event)", "-        final boolean result = mSeverityLevel.equals(aEvent.getSeverityLevel());", "-        if (mAcceptOnMatch) {", "+        final boolean result = severityLevel.equals(event.getSeverityLevel());", "+        if (acceptOnMatch) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a856e42528fe23a801b1b718bcc7e5d4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private int getFirstNodeIndent(DetailAST aNode)", "signatureAfterChange": "     private int getFirstNodeIndent(DetailAST node)", "diff": ["-    private int getFirstNodeIndent(DetailAST aNode)", "+    private int getFirstNodeIndent(DetailAST node)", "-        int indentLevel = aNode.getColumnNo();", "+        int indentLevel = node.getColumnNo();", "-        if (aNode.getType() == TokenTypes.LITERAL_IF", "-                && aNode.getParent().getType() == TokenTypes.LITERAL_ELSE)", "+        if (node.getType() == TokenTypes.LITERAL_IF", "+                && node.getParent().getType() == TokenTypes.LITERAL_ELSE)", "-            final DetailAST lcurly = aNode.getParent().getPreviousSibling();", "+            final DetailAST lcurly = node.getParent().getPreviousSibling();", "-                    && rcurly.getLineNo() == aNode.getLineNo())", "+                    && rcurly.getLineNo() == node.getLineNo())", "-                indentLevel = aNode.getParent().getColumnNo();", "+                indentLevel = node.getParent().getColumnNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8657865e3779f3d39fc9e5c70512231", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java", "commitBeforeChange": "03f2be49f7ad3fc9d0143782b020a169f28e50a9", "commitAfterChange": "0c2a64d9f02ab5b94bbf4213cb2978f7b459b6f5", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testWrongFile() throws Exception", "signatureAfterChange": "      @Test     public void testWrongFile() throws Exception", "diff": ["-        Iterator<LocalizedMessage> iter = messages.iterator();", "-        assertEquals(\"Unable to open ''.\", iter.next().getMessage());", "+        Iterator<LocalizedMessage> iterator = messages.iterator();", "+        assertEquals(\"Unable to open ''.\", iterator.next().getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8bd2a22395dce078e3093f6e5a5d04a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTag.java", "commitBeforeChange": "443e534a3c98c0b30f24647da724fe918f17a006", "commitAfterChange": "66d73fe6189267fee3423e2e8d7fc2d68599a43f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public JavadocTag(int line, int column, String tag, String arg1)", "signatureAfterChange": "     public JavadocTag(int line, int column, String tag, String firstArg)", "diff": ["-    public JavadocTag(int line, int column, String tag, String arg1) {", "+    public JavadocTag(int line, int column, String tag, String firstArg) {", "-        this.arg1 = arg1;", "+        this.firstArg = firstArg;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8cea1fa6264a8d35ed35f2e1bcf78ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     public void setCheckHtml(boolean aFlag)", "signatureAfterChange": "     public void setCheckHtml(boolean flag)", "diff": ["-    public void setCheckHtml(boolean aFlag)", "+    public void setCheckHtml(boolean flag)", "-        mCheckHtml = aFlag;", "+        checkHtml = flag;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a921e59c2c39d23fb75bae5d6c31e739", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private <T extends Enum<T>> T getOption(final Class<T> aEnumClass,         final String aString)", "signatureAfterChange": "     private <T extends Enum<T>> T getOption(final Class<T> enuclass,         final String string)", "diff": ["-    private <T extends Enum<T>> T getOption(final Class<T> aEnumClass,", "-        final String aString)", "+    private <T extends Enum<T>> T getOption(final Class<T> enuclass,", "+        final String string)", "-            return Enum.valueOf(aEnumClass, aString.trim().toUpperCase());", "+            return Enum.valueOf(enuclass, string.trim().toUpperCase());", "-            throw new ConversionException(\"unable to parse \" + aString, iae);", "+            throw new ConversionException(\"unable to parse \" + string, iae);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a99b0bdf30b128a5c60c4c6e56b4e877", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public DefaultLogger(OutputStream os, boolean closeStreamsAfterUse)", "signatureAfterChange": "     public DefaultLogger(OutputStream outputStream, boolean closeStreamsAfterUse)", "diff": ["-    public DefaultLogger(OutputStream os, boolean closeStreamsAfterUse) {", "+    public DefaultLogger(OutputStream outputStream, boolean closeStreamsAfterUse) {", "-        this(os, closeStreamsAfterUse, os, false);", "+        this(outputStream, closeStreamsAfterUse, outputStream, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9c188cd80e090054b53d9e61b06997d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "fdd5ed77fd1ea61768683ee8cfacf78190a2d3aa", "commitAfterChange": "bf9325be913ce46a1427232c455f4830b574ba44", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     private void checkThrowsTags(List<JavadocTag> tags,             List<ExceptionInfo> throwsList, boolean reportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> tags,             List<ExceptionInfo> throwsList, boolean reportExpectedTags)", "diff": ["-            final AbstractClassInfo documentedCI = createClassInfo(token,", "+            final AbstractClassInfo documentedClassInfo = createClassInfo(token,", "-                    || isInThrows(throwsList, documentedCI, foundThrows);", "+                    || isInThrows(throwsList, documentedClassInfo, foundThrows);", "-                    reqd = !isUnchecked(documentedCI.getClazz());", "+                    reqd = !isUnchecked(documentedClassInfo.getClazz());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa5a5beae0351d3b4e59763d8950d75e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected final Class<?> resolveClass(String aClassName,             String aCurrentClass)", "signatureAfterChange": "     protected final Class<?> resolveClass(String className,             String currentClass)", "diff": ["-    protected final Class<?> resolveClass(String aClassName,", "-            String aCurrentClass)", "+    protected final Class<?> resolveClass(String className,", "+            String currentClass)", "-            return getClassResolver().resolve(aClassName, aCurrentClass);", "+            return getClassResolver().resolve(className, currentClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aabd89129e5cdb930d73af9b70edd9c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java", "commitBeforeChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "commitAfterChange": "29027109bf962f47b6a6000fdca69b5679ce4b43", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        if (getHeaderLines().size() > aLines.size()) {", "+        if (getHeaderLines().size() > lines.size()) {", "-                if (!isMatch(i, aLines.get(i))) {", "+                if (!isMatch(i, lines.get(i))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaeab096146b1e6aff8fef8b9db0affc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void doVisitTokenInSameGroup(boolean aIsStatic,             boolean aPrevious, String aName, int aLine)", "signatureAfterChange": "     private void doVisitTokenInSameGroup(boolean isStatic,             boolean previous, String name, int line)", "diff": ["-    private void doVisitTokenInSameGroup(boolean aIsStatic,", "-            boolean aPrevious, String aName, int aLine)", "+    private void doVisitTokenInSameGroup(boolean isStatic,", "+            boolean previous, String name, int line)", "-        if (!mOrdered) {", "+        if (!ordered) {", "-            if (compare(mLastImport, aName, mCaseSensitive) > 0) {", "-                log(aLine, \"import.ordering\", aName);", "+            if (compare(lastImport, name, caseSensitive) > 0) {", "+                log(line, \"import.ordering\", name);", "-                (!(mLastImportStatic ^ aIsStatic)", "+                (!(lastImportStatic ^ isStatic)", "-                (compare(mLastImport, aName, mCaseSensitive) > 0))", "+                (compare(lastImport, name, caseSensitive) > 0))", "-                aPrevious;", "+                previous;", "-                log(aLine, \"import.ordering\", aName);", "+                log(line, \"import.ordering\", name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab3715538ef9ed83e4800cccd5facf6a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/doclets/CheckDocsDoclet.java", "commitBeforeChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "commitAfterChange": "319f297e13e5c175a62489ff555cff7c463d3c7b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static void removeOpeningParagraphTag(final StringBuffer aText)", "signatureAfterChange": "     private static void removeOpeningParagraphTag(final StringBuffer text)", "diff": ["-    private static void removeOpeningParagraphTag(final StringBuffer aText)", "+    private static void removeOpeningParagraphTag(final StringBuffer text)", "-        if ((aText.length() > tagLen)", "-                && aText.substring(0, tagLen).equals(openTag))", "+        if ((text.length() > tagLen)", "+                && text.substring(0, tagLen).equals(openTag))", "-            aText.delete(0, tagLen);", "+            text.delete(0, tagLen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab5968b46a46916f57367b285a5012f1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected void verify(Configuration aConfig, String aFileName, String[] aExpected)             throws Exception", "signatureAfterChange": "      protected void verify(Configuration aConfig, String fileName, String[] expected)             throws Exception", "diff": ["-    protected void verify(Configuration aConfig, String aFileName, String[] aExpected)", "+    protected void verify(Configuration aConfig, String fileName, String[] expected)", "-        verify(createChecker(aConfig), aFileName, aFileName, aExpected);", "+        verify(createChecker(aConfig), fileName, fileName, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab7dc5a41187d699ef04aed75e89f733", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void addPreviousSibling(DetailAST ast)", "signatureAfterChange": "     public void addPreviousSibling(DetailAST ast)", "diff": ["-            final DetailAST previousSibling = getPreviousSibling();", "+            final DetailAST previousSiblingNode = getPreviousSibling();", "-            if (previousSibling != null) {", "-                ast.setPreviousSibling(previousSibling);", "-                previousSibling.setNextSibling(ast);", "+            if (previousSiblingNode != null) {", "+                ast.setPreviousSibling(previousSiblingNode);", "+                previousSiblingNode.setNextSibling(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abefc059eb1259ae047992f38e333065", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setTrailingArrayComma(final String aComma)", "signatureAfterChange": "     public void setTrailingArrayComma(final String comma)", "diff": ["-    public void setTrailingArrayComma(final String aComma)", "+    public void setTrailingArrayComma(final String comma)", "-        this.mComma = this.getOption(TrailingArrayComma.class, aComma);", "+        this.comma = this.getOption(TrailingArrayComma.class, comma);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac5777feabc3c3cab69224f6ca80a4be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        final File dir = aFile.getParentFile();", "-        if (mDirectoriesChecked.contains(dir)) {", "+        final File dir = file.getParentFile();", "+        if (directoriesChecked.contains(dir)) {", "-        mDirectoriesChecked.add(dir);", "+        directoriesChecked.add(dir);", "-        else if (!mAllowLegacy || !packageHtml.exists()) {", "+        else if (!allowLegacy || !packageHtml.exists()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad30942106e513daf35de95440104106", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAst)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAst)", "+    public void visitToken(DetailAST ast)", "-        if (!AnnotationUtility.containsAnnotation(aAst, OVERRIDE)", "-            && !AnnotationUtility.containsAnnotation(aAst, CANONICAL_OVERRIDE))", "+        if (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)", "+            && !AnnotationUtility.containsAnnotation(ast, CANONICAL_OVERRIDE))", "-            super.visitToken(aAst); // Will check the name against the format.", "+            super.visitToken(ast); // Will check the name against the format.", "-        if (!mAllowClassName) {", "+        if (!allowClassName) {", "-                aAst.findFirstToken(TokenTypes.IDENT);", "+                ast.findFirstToken(TokenTypes.IDENT);", "-            final DetailAST classDefOrNew = aAst.getParent().getParent();", "+            final DetailAST classDefOrNew = ast.getParent().getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "adc0f3051d835e3bd6e36749ba0784ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EqualsHashCodeCheck.java", "commitBeforeChange": "40496d0f8c01bf1f9718e6925b76f13db5b2ae3d", "commitAfterChange": "675c037c85af8347d5b95b0b45f166b8599a9b27", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void finishTree()", "signatureAfterChange": "     public void finishTree()", "diff": ["+     */", "-        Set equalsDefs = objBlockEquals.keySet();", "+        final Set equalsDefs = mObjBlockEquals.keySet();", "-            if (!objBlockWithHashCode.contains(objBlock)) {", "-                DetailAST equalsAST = (DetailAST) objBlockEquals.get(objBlock);", "+            if (!mObjBlockWithHashCode.contains(objBlock)) {", "+                DetailAST equalsAST = (DetailAST) mObjBlockEquals.get(objBlock);", "-        objBlockEquals.clear();", "-        objBlockWithHashCode.clear();", "+        mObjBlockEquals.clear();", "+        mObjBlockWithHashCode.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae3fcf75faa17ba6a95ea1536e986738", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java", "commitBeforeChange": "4a6e1a3541fc31dc7450de00943fd94a20d9223e", "commitAfterChange": "8c891372187779376158becd95fcaf4e28b8bb8d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected final void logError(DetailAST ast, String subtypeName,                                   int actualLevel)", "signatureAfterChange": "     protected final void logError(DetailAST ast, String subtypeName,                                   int actualIndent)", "diff": ["-                                  int actualLevel) {", "-        logError(ast, subtypeName, actualLevel, getLevel());", "+                                  int actualIndent) {", "+        logError(ast, subtypeName, actualIndent, getIndent());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae6de846fe024fb58f4e40a64d371951", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private String chopString(String aString)", "signatureAfterChange": "     private String chopString(String string)", "diff": ["-    private String chopString(String aString)", "+    private String chopString(String string)", "-        if (aString.length() > MAX_QUOTED_LENGTH) {", "-            return aString.substring(0, MAX_QUOTED_LENGTH) + \"...\\\"\";", "+        if (string.length() > MAX_QUOTED_LENGTH) {", "+            return string.substring(0, MAX_QUOTED_LENGTH) + \"...\\\"\";", "-        return aString;", "+        return string;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aebe6755afc4baccda952d5b7d3cdbdd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mObjBlockEquals.clear();", "-        mObjBlockWithHashCode.clear();", "+        objBlockEquals.clear();", "+        objBlockWithHashCode.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aec5c3a921be1dec0546ba72fa6428c4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        mPropertyFiles.add(aFile);", "+        propertyFiles.add(file);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b00127a5b73268b4457af9f3e8ef6341", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void logIOException(IOException aEx, File aFile)", "signatureAfterChange": "     private void logIOException(IOException ex, File file)", "diff": ["-    private void logIOException(IOException aEx, File aFile)", "+    private void logIOException(IOException ex, File file)", "-        if (!(aEx instanceof FileNotFoundException)) {", "-            args = new String[] {aEx.getMessage()};", "+        if (!(ex instanceof FileNotFoundException)) {", "+            args = new String[] {ex.getMessage()};", "-        getMessageDispatcher().fireErrors(aFile.getPath(), messages);", "-        Utils.getExceptionLogger().debug(\"IOException occured.\", aEx);", "+        getMessageDispatcher().fireErrors(file.getPath(), messages);", "+        Utils.getExceptionLogger().debug(\"IOException occured.\", ex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1fcc657db1e6eb5c0c2b36e46da43c7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public final void setIgnoreOccurrenceContext(String[] aStrRep)", "signatureAfterChange": "     public final void setIgnoreOccurrenceContext(String[] strRep)", "diff": ["-    public final void setIgnoreOccurrenceContext(String[] aStrRep)", "+    public final void setIgnoreOccurrenceContext(String[] strRep)", "-        mIgnoreOccurrenceContext.clear();", "-        for (final String s : aStrRep) {", "+        ignoreOccurrenceContext.clear();", "+        for (final String s : strRep) {", "-            mIgnoreOccurrenceContext.set(type);", "+            ignoreOccurrenceContext.set(type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b37c5f351d3a74142921ef5657be259a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mCounters = new FastStack<Counter>();", "+        counters = new FastStack<Counter>();", "-        mCounters.push(new Counter());", "+        counters.push(new Counter());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b391c3cc14cf2cb65970cf5f7b2e31ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public final void visitToken(DetailAST blockCommentAst)", "signatureAfterChange": "      @Override     public final void visitToken(DetailAST blockCommentNode)", "diff": ["-    public final void visitToken(DetailAST blockCommentAst) {", "-        if (JavadocUtils.isJavadocComment(blockCommentAst)) {", "-            this.blockCommentAst = blockCommentAst;", "+    public final void visitToken(DetailAST blockCommentNode) {", "+        if (JavadocUtils.isJavadocComment(blockCommentNode)) {", "+            this.blockCommentAst = blockCommentNode;", "-            final String treeCacheKey = blockCommentAst.getLineNo() + \":\"", "-                    + blockCommentAst.getColumnNo();", "+            final String treeCacheKey = blockCommentNode.getLineNo() + \":\"", "+                    + blockCommentNode.getColumnNo();", "-                ps = parseJavadocAsDetailNode(blockCommentAst);", "+                ps = parseJavadocAsDetailNode(blockCommentNode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3a8c6503032c5494b84b288f8eb53ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java", "commitBeforeChange": "c57ee4b58a2758a3b8a83a1d14dc3c4835ae2077", "commitAfterChange": "cb5a59fc6baf5de204e3cc99be6ba9865e44350a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void startElement(String namespaceURI,                              String localName,                              String qName,                              Attributes atts)         throws SAXException", "signatureAfterChange": "      @Override     public void startElement(String namespaceURI,                              String localName,                              String qName,                              Attributes attributes)         throws SAXException", "diff": ["-                             Attributes atts)", "+                             Attributes attributes)", "-            final String checks = atts.getValue(\"checks\");", "-            final String modId = atts.getValue(\"id\");", "+            final String checks = attributes.getValue(\"checks\");", "+            final String modId = attributes.getValue(\"id\");", "-                final String files = atts.getValue(\"files\");", "+                final String files = attributes.getValue(\"files\");", "-            final String lines = atts.getValue(\"lines\");", "+            final String lines = attributes.getValue(\"lines\");", "-            final String columns = atts.getValue(\"columns\");", "+            final String columns = attributes.getValue(\"columns\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5122781ceb1b17e3fd736a560a8a550", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeModel.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public Object getChild(Object parent, int index)", "signatureAfterChange": "      @Override     public Object getChild(Object parent, int index)", "diff": ["-        int i = 0;", "+        int indx = 0;", "-        while (i < index) {", "+        while (indx < index) {", "-            i++;", "+            indx++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5b740df0b9c39cfc5a86bc049d78ff9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Check.java", "commitBeforeChange": "ffb17cde0f6351bdf2f2e8cf655fa7f7a3cae827", "commitAfterChange": "672b27dd5551de63a1fb08d8ea80376d70f2aa60", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setGlobalContext(Map aGlobalContext)", "signatureAfterChange": "     public void setGlobalContext(Map aContext)", "diff": ["-    public void setGlobalContext(Map aGlobalContext)", "+    public void setGlobalContext(Map aContext)", "-        mGlobalContext = aGlobalContext;", "+        mGlobalContext = aContext;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b60008ee913ea8a89d6f6eb889445375", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "         public void checkCount(DetailAST aAST)", "signatureAfterChange": "         public void checkCount(DetailAST ast)", "diff": ["-        public void checkCount(DetailAST aAST)", "+        public void checkCount(DetailAST ast)", "-            if (mChecking && (mCount > getMax())) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"return.count\",", "-                    mCount, getMax());", "+            if (checking && (count > getMax())) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"return.count\",", "+                    count, getMax());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6342860f5518c3290e2773043980ba5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void setTag(String aTag)         throws ConversionException", "signatureAfterChange": "     public void setTag(String tag)         throws ConversionException", "diff": ["-    public void setTag(String aTag)", "+    public void setTag(String tag)", "-            mTag = aTag;", "-            mTagRE = Utils.getPattern(aTag + \"\\\\s*(.*$)\");", "+            this.tag = tag;", "+            tagRE = Utils.getPattern(tag + \"\\\\s*(.*$)\");", "-            throw new ConversionException(\"unable to parse \" + aTag, e);", "+            throw new ConversionException(\"unable to parse \" + tag, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b66f045ce9ea7aabdb894013e4c307c0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAst)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAst)", "+    public void visitToken(DetailAST ast)", "-        if (!isIgnoreSituation(aAst)) {", "+        if (!isIgnoreSituation(ast)) {", "-            final DetailAST nameAst = aAst.findFirstToken(TokenTypes.IDENT);", "+            final DetailAST nameAst = ast.findFirstToken(TokenTypes.IDENT);", "-                log(nameAst.getLineNo(), MSG_KEY, mAllowedAbbreviationLength);", "+                log(nameAst.getLineNo(), MSG_KEY, allowedAbbreviationLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b68f9c77e8f9d40232832aa808ddb24a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public XMLLogger(OutputStream os, boolean closeStream)", "signatureAfterChange": "     public XMLLogger(OutputStream outputStream, boolean closeStream)", "diff": ["-    public XMLLogger(OutputStream os, boolean closeStream) {", "-        setOutputStream(os);", "+    public XMLLogger(OutputStream outputStream, boolean closeStream) {", "+        setOutputStream(outputStream);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6941c9ea27586d862939495b6607889", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "commitBeforeChange": "d67d10e9f2b480f7f56fe7cda2a908cd5fe770c7", "commitAfterChange": "f65b17cbc30795247fef3077cce16a8bb53e9ffc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Override     public Object createModule(String name)         throws CheckstyleException", "signatureAfterChange": "     @Override     public Object createModule(String name)         throws CheckstyleException", "diff": ["-            catch (final CheckstyleException ex2) {", "+            catch (final CheckstyleException ex) {", "-                throw new CheckstyleException(exceptionMessage.getMessage(), ex2);", "+                throw new CheckstyleException(exceptionMessage.getMessage(), ex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6daf0f26ebadfda5a2f12391f69358e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         public boolean isMatch(AuditEvent aEvent)", "signatureAfterChange": "         public boolean isMatch(AuditEvent event)", "diff": ["-        public boolean isMatch(AuditEvent aEvent)", "+        public boolean isMatch(AuditEvent event)", "-                mTagCheckRegexp.matcher(aEvent.getSourceName());", "+                tagCheckRegexp.matcher(event.getSourceName());", "-                if (mTagMessageRegexp != null) {", "+                if (tagMessageRegexp != null) {", "-                            mTagMessageRegexp.matcher(aEvent.getMessage());", "+                            tagMessageRegexp.matcher(event.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7bd6c8b3c586449bad89c9c219e608d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "         private boolean isSignificant(String aClassName)", "signatureAfterChange": "         private boolean isSignificant(String className)", "diff": ["-        private boolean isSignificant(String aClassName)", "+        private boolean isSignificant(String className)", "-            return (aClassName.length() > 0)", "-                    && !mExcludedClasses.contains(aClassName)", "-                    && !aClassName.startsWith(\"java.lang.\");", "+            return (className.length() > 0)", "+                    && !excludedClasses.contains(className)", "+                    && !className.startsWith(\"java.lang.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c028f5c85cf13998278f68ac9d391f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {", "+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {", "-        final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (!ScopeUtils.getSurroundingScope(aAST).isIn(Scope.PROTECTED)) {", "+        if (!ScopeUtils.getSurroundingScope(ast).isIn(Scope.PROTECTED)) {", "-        final DetailAST implementation = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST implementation = ast.findFirstToken(TokenTypes.SLIST);", "-        final DetailAST classDef = findContainingClass(aAST);", "+        final DetailAST classDef = findContainingClass(ast);", "-            final String name = aAST.findFirstToken(TokenTypes.IDENT).getText();", "-            log(aAST.getLineNo(), aAST.getColumnNo(),", "+            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "+            log(ast.getLineNo(), ast.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8b1655e7f167787b42c2e840490dcc0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private Point getNextCharPos(String[] aText, Point aFrom)", "signatureAfterChange": "     private Point getNextCharPos(String[] text, Point from)", "diff": ["-    private Point getNextCharPos(String[] aText, Point aFrom)", "+    private Point getNextCharPos(String[] text, Point from)", "-        int line = aFrom.getLineNo();", "-        int column = aFrom.getColumnNo() + 1;", "-        while ((line < aText.length) && (column >= aText[line].length())) {", "+        int line = from.getLineNo();", "+        int column = from.getColumnNo() + 1;", "+        while ((line < text.length) && (column >= text[line].length())) {", "-            if (line < aText.length) {", "+            if (line < text.length) {", "-                final String currentLine = aText[line];", "+                final String currentLine = text[line];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8dd470f6594e82f0747c728d99ef404", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionFilter.java", "commitBeforeChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "commitAfterChange": "4c1148db9982918e65f8d1156e8fb9c07b206fc9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public boolean equals(Object obj)", "signatureAfterChange": "      @Override     public boolean equals(Object obj)", "diff": ["-        final SuppressionFilter that = (SuppressionFilter) obj;", "-        return Objects.equals(filters, that.filters);", "+        final SuppressionFilter suppressionFilter = (SuppressionFilter) obj;", "+        return Objects.equals(filters, suppressionFilter.filters);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8edafedfca8b511a28785868611765b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void reportCppComment(int aStartLineNo, int aStartColNo)", "signatureAfterChange": "     public void reportCppComment(int startLineNo, int startColNo)", "diff": ["-    public void reportCppComment(int aStartLineNo, int aStartColNo)", "+    public void reportCppComment(int startLineNo, int startColNo)", "-        final String line = line(aStartLineNo - 1);", "-        final String[] txt = new String[] {line.substring(aStartColNo)};", "-        final Comment comment = new Comment(txt, aStartColNo, aStartLineNo,", "+        final String line = line(startLineNo - 1);", "+        final String[] txt = new String[] {line.substring(startColNo)};", "+        final Comment comment = new Comment(txt, startColNo, startLineNo,", "-        mCPlusPlusComments.put(aStartLineNo, comment);", "+        cPlusPlusComments.put(startLineNo, comment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b938f92a43a214e663de727586e7edf9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void notifyBegin(DetailAST rootAST, FileContents contents,             AstState astState)", "signatureAfterChange": "     private void notifyBegin(DetailAST rootAST, FileContents contents,             AstState astState)", "diff": ["-        for (Check ch : checks) {", "-            ch.setFileContents(contents);", "-            ch.beginTree(rootAST);", "+        for (Check check : checks) {", "+            check.setFileContents(contents);", "+            check.beginTree(rootAST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b95bd26a05d04bfe055d690f7bdc23fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void registerCheck(Check aCheck)         throws CheckstyleException", "signatureAfterChange": "     private void registerCheck(Check check)         throws CheckstyleException", "diff": ["-    private void registerCheck(Check aCheck)", "+    private void registerCheck(Check check)", "-        final Set<String> checkTokens = aCheck.getTokenNames();", "+        final Set<String> checkTokens = check.getTokenNames();", "-            tokens = aCheck.getRequiredTokens();", "+            tokens = check.getRequiredTokens();", "-            final int[] acceptableTokens = aCheck.getAcceptableTokens();", "+            final int[] acceptableTokens = check.getAcceptableTokens();", "-                        registerCheck(token, aCheck);", "+                        registerCheck(token, check);", "-                        + token + \"\\\" in check \" + aCheck, ex);", "+                        + token + \"\\\" in check \" + check, ex);", "-            tokens = aCheck.getDefaultTokens();", "+            tokens = check.getDefaultTokens();", "-            registerCheck(element, aCheck);", "+            registerCheck(element, check);", "-        if (aCheck.isCommentNodesRequired()) {", "-            mCommentChecks.add(aCheck);", "+        if (check.isCommentNodesRequired()) {", "+            commentChecks.add(check);", "-            mOrdinaryChecks.add(aCheck);", "+            ordinaryChecks.add(check);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9cd1717cf3b868a5164b71e4490a5ef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "         public boolean isMatch(AuditEvent aEvent)", "signatureAfterChange": "         public boolean isMatch(AuditEvent event)", "diff": ["-        public boolean isMatch(AuditEvent aEvent)", "+        public boolean isMatch(AuditEvent event)", "-            final int line = aEvent.getLine();", "-            if (line < mFirstLine) {", "+            final int line = event.getLine();", "+            if (line < firstLine) {", "-            if (line > mLastLine) {", "+            if (line > lastLine) {", "-                mTagCheckRegexp.matcher(aEvent.getSourceName());", "+                tagCheckRegexp.matcher(event.getSourceName());", "-            if (mTagMessageRegexp != null) {", "+            if (tagMessageRegexp != null) {", "-                    mTagMessageRegexp.matcher(aEvent.getMessage());", "+                    tagMessageRegexp.matcher(event.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9cf086d4e162c8baf238bf8edc90b61", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static Configuration loadConfig(CommandLine aLine,                                             Properties aProps)", "signatureAfterChange": "     private static Configuration loadConfig(CommandLine line,                                             Properties props)", "diff": ["-    private static Configuration loadConfig(CommandLine aLine,", "-                                            Properties aProps)", "+    private static Configuration loadConfig(CommandLine line,", "+                                            Properties props)", "-                    aLine.getOptionValue(\"c\"), new PropertiesExpander(aProps));", "+                    line.getOptionValue(\"c\"), new PropertiesExpander(props));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba74bbb186434cc6c221a2f7a45ccc70", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final ExpressionHandler handler = mHandlerFactory.getHandler(this, aAST,", "-            mHandlers.peek());", "-        mHandlers.push(handler);", "+        final ExpressionHandler handler = handlerFactory.getHandler(this, ast,", "+            handlers.peek());", "+        handlers.push(handler);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb9fbefeda819b83aeb0c048f9d5b5e1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST ast, final Scope scope)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast, final Scope nodeScope)", "diff": ["-    private boolean shouldCheck(final DetailAST ast, final Scope scope) {", "+    private boolean shouldCheck(final DetailAST ast, final Scope nodeScope) {", "-        return scope.isIn(this.scope)", "+        return nodeScope.isIn(this.scope)", "-                && (excludeScope == null || !scope.isIn(excludeScope)", "+                && (excludeScope == null || !nodeScope.isIn(excludeScope)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbeb1772d62dee0ae7e4e1f108b3975b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void makeDropTarget(final Component c, boolean recursive)             throws TooManyListenersException", "signatureAfterChange": "      private void makeDropTarget(final Component component, boolean recursive)             throws TooManyListenersException", "diff": ["-    private void makeDropTarget(final Component c, boolean recursive)", "+    private void makeDropTarget(final Component component, boolean recursive)", "-        c.addHierarchyListener(new HierarchyListener() {", "+        component.addHierarchyListener(new HierarchyListener() {", "-                final Component parent = c.getParent();", "+                final Component parent = component.getParent();", "-                    c.setDropTarget(null);", "+                    component.setDropTarget(null);", "-                    new DropTarget(c, dropListener);", "+                    new DropTarget(component, dropListener);", "-        if (c.getParent() != null) {", "-            new DropTarget(c, dropListener);", "+        if (component.getParent() != null) {", "+            new DropTarget(component, dropListener);", "-        if (recursive && c instanceof Container) {", "-            final Container cont = (Container) c;", "+        if (recursive && component instanceof Container) {", "+            final Container cont = (Container) component;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc587fa7f52e7ca68b2c82af09d72fdc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "91aa6578321ceb08f4b0d715f994b7a9f4abe9d7", "commitAfterChange": "3430721be200cbe2acf55c3b3d52a528638123b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private static String extractBaseName(String fileName)", "signatureAfterChange": "     private static String extractBaseName(String aFileName)", "diff": ["-    private static String extractBaseName(String fileName)", "+    private static String extractBaseName(String aFileName)", "-        int k = fileName.indexOf(\"_\");", "+        int k = aFileName.indexOf(\"_\");", "-            return fileName.substring(0, k);", "+            return aFileName.substring(0, k);", "-            return fileName.substring(0, fileName.indexOf(\".\"));", "+            return aFileName.substring(0, aFileName.indexOf(\".\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcd25dbf8b92e3511e3680ef52d0d9ea", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private Point skipHtmlComment(String[] aText, Point aFrom)", "signatureAfterChange": "     private Point skipHtmlComment(String[] text, Point from)", "diff": ["-    private Point skipHtmlComment(String[] aText, Point aFrom)", "+    private Point skipHtmlComment(String[] text, Point from)", "-        Point to = aFrom;", "-        to = findChar(aText, '>', to);", "-        while ((to.getLineNo() < aText.length)", "-               && !aText[to.getLineNo()]", "+        Point to = from;", "+        to = findChar(text, '>', to);", "+        while ((to.getLineNo() < text.length)", "+               && !text[to.getLineNo()]", "-            to = findChar(aText, '>', getNextCharPos(aText, to));", "+            to = findChar(text, '>', getNextCharPos(text, to));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be65737697b8c945e1836dde5131631e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public final void beginTree(DetailAST aAST)", "signatureAfterChange": "      @Override     public final void beginTree(DetailAST ast)", "diff": ["-    public final void beginTree(DetailAST aAST)", "+    public final void beginTree(DetailAST ast)", "-        mPackageName = \"\";", "+        packageName = \"\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be8a1156500a4590199316c8f7fb0521", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private Object doMakeObject(String aName)         throws CheckstyleException", "signatureAfterChange": "     private Object doMakeObject(String name)         throws CheckstyleException", "diff": ["-    private Object doMakeObject(String aName)", "+    private Object doMakeObject(String name)", "-        //try aName first", "+        //try name first", "-            return createObject(aName);", "+            return createObject(name);", "-        for (String packageName : mPackages) {", "+        for (String packageName : packages) {", "-            final String className = packageName + aName;", "+            final String className = packageName + name;", "-        throw new CheckstyleException(\"Unable to instantiate \" + aName);", "+        throw new CheckstyleException(\"Unable to instantiate \" + name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beb203a5e4574e3eaf87e23d92e7cb8a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/AbstractHeaderCheck.java", "commitBeforeChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "commitAfterChange": "29027109bf962f47b6a6000fdca69b5679ce4b43", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setHeaderFile(String aFileName)", "signatureAfterChange": "     public void setHeaderFile(String fileName)", "diff": ["-    public void setHeaderFile(String aFileName)", "+    public void setHeaderFile(String fileName)", "-        if ((aFileName == null) || (aFileName.trim().length() == 0)) {", "+        if ((fileName == null) || (fileName.trim().length() == 0)) {", "-        mFilename = aFileName;", "+        filename = fileName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bee571a7ca84f829f84edd4e1f044bde", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceBeforeCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final String line = getLine(aAST.getLineNo() - 1);", "-        final int before = aAST.getColumnNo() - 1;", "+        final String line = getLine(ast.getLineNo() - 1);", "+        final int before = ast.getColumnNo() - 1;", "-            if (aAST.getType() == TokenTypes.SEMI) {", "-                final DetailAST sibling = aAST.getPreviousSibling();", "+            if (ast.getType() == TokenTypes.SEMI) {", "+                final DetailAST sibling = ast.getPreviousSibling();", "-            boolean flag = !mAllowLineBreaks;", "+            boolean flag = !allowLineBreaks;", "-                log(aAST.getLineNo(), before, \"ws.preceded\", aAST.getText());", "+                log(ast.getLineNo(), before, \"ws.preceded\", ast.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c00dc02e8666c36e7af6f7b1c64898e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     protected final Class<?> tryLoadClass(Token ident, String currentClass)", "signatureAfterChange": "     protected final Class<?> tryLoadClass(Token ident, String currentClassName)", "diff": ["-    protected final Class<?> tryLoadClass(Token ident, String currentClass) {", "-        final Class<?> clazz = resolveClass(ident.getText(), currentClass);", "+    protected final Class<?> tryLoadClass(Token ident, String currentClassName) {", "+        final Class<?> clazz = resolveClass(ident.getText(), currentClassName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c02f219ef1130d1fcad58de1016953a2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "f2efe4d020ae63dad5b14495fa6ec3d2df16b2a5", "commitAfterChange": "bf3e77cc87f01b9ea0d205933749770398fa623b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "         @Override         public ResourceBundle newBundle(String aBaseName, Locale aLocale, String aFormat,                  ClassLoader aLoader, boolean aReload) throws IOException", "signatureAfterChange": "         @Override         public ResourceBundle newBundle(String aBaseName, Locale aLocale, String aFormat,                  ClassLoader aLoader, boolean aReload) throws IOException", "diff": ["-            ResourceBundle bundle = null;", "+            ResourceBundle resourceBundle = null;", "-                    bundle = new PropertyResourceBundle(streamReader);", "+                    resourceBundle = new PropertyResourceBundle(streamReader);", "-            return bundle;", "+            return resourceBundle;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c10099dd85422f15f8ade24b5d17d887", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void leaveLiteralIf(DetailAST aIf)", "signatureAfterChange": "     private void leaveLiteralIf(DetailAST literalIf)", "diff": ["-    private void leaveLiteralIf(DetailAST aIf)", "+    private void leaveLiteralIf(DetailAST literalIf)", "-        if (!CheckUtils.isElseIf(aIf)) {", "+        if (!CheckUtils.isElseIf(literalIf)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1ad83c17aa9cd549f979f80a5da6765", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     private static List<JavadocTag> getMultilineNoArgTags(final Matcher noargMultilineStart,             final String[] lines, final int lineIndex, final int tagLine)", "signatureAfterChange": "     private static List<JavadocTag> getMultilineNoArgTags(final Matcher noargMultilineStart,             final String[] lines, final int lineIndex, final int tagLine)", "diff": ["-        final String p1 = noargMultilineStart.group(1);", "+        final String param1 = noargMultilineStart.group(1);", "-                tags.add(new JavadocTag(tagLine, col, p1));", "+                tags.add(new JavadocTag(tagLine, col, param1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2240db348771e7f2d3faaae405e4729", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java", "commitBeforeChange": "5e0f360e7b7745a362bd7a655e98654a2ad36443", "commitAfterChange": "3813f1ccbf157f463c041ccfc462399845ddff6e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static boolean isInInterfaceOrAnnotationBlock(DetailAST aAST)", "signatureAfterChange": "     public static boolean isInInterfaceOrAnnotationBlock(DetailAST node)", "diff": ["-    public static boolean isInInterfaceOrAnnotationBlock(DetailAST aAST) {", "-        return isInInterfaceBlock(aAST) || isInAnnotationBlock(aAST);", "+    public static boolean isInInterfaceOrAnnotationBlock(DetailAST node) {", "+        return isInInterfaceBlock(node) || isInAnnotationBlock(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c274773b40a972dc6ea3abff81df2a27", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public IndentLevel(IndentLevel aBase, int... aOffsets)", "signatureAfterChange": "     public IndentLevel(IndentLevel base, int... offsets)", "diff": ["-    public IndentLevel(IndentLevel aBase, int... aOffsets)", "+    public IndentLevel(IndentLevel base, int... offsets)", "-        final BitSet src = aBase.mLevels;", "+        final BitSet src = base.levels;", "-            for (int offset : aOffsets) {", "-                mLevels.set(i + offset);", "+            for (int offset : offsets) {", "+                levels.set(i + offset);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c520604f32085affa0d8a194fff6319f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     String getMessageBundle(final String aClassName)", "signatureAfterChange": "     String getMessageBundle(final String className)", "diff": ["-    String getMessageBundle(final String aClassName)", "+    String getMessageBundle(final String className)", "-        final int endIndex = aClassName.lastIndexOf('.');", "+        final int endIndex = className.lastIndexOf('.');", "-        final String packageName = aClassName.substring(0, endIndex);", "+        final String packageName = className.substring(0, endIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5335c54deb4e109b36c85196286255d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static FilterSet loadSuppressions(             InputSource aSource, String aSourceName)         throws CheckstyleException", "signatureAfterChange": "     private static FilterSet loadSuppressions(             InputSource source, String sourceName)         throws CheckstyleException", "diff": ["-            InputSource aSource, String aSourceName)", "+            InputSource source, String sourceName)", "-            suppressionsLoader.parseInputSource(aSource);", "+            suppressionsLoader.parseInputSource(source);", "-            throw new CheckstyleException(\"unable to find \" + aSourceName, e);", "+            throw new CheckstyleException(\"unable to find \" + sourceName, e);", "-            throw new CheckstyleException(\"unable to parse \" + aSourceName, e);", "+            throw new CheckstyleException(\"unable to parse \" + sourceName, e);", "-                    + aSourceName + \" - \" + e.getMessage(), e);", "+                    + sourceName + \" - \" + e.getMessage(), e);", "-            throw new CheckstyleException(\"unable to read \" + aSourceName, e);", "+            throw new CheckstyleException(\"unable to read \" + sourceName, e);", "-                + aSourceName + \" - \" + e.getMessage(), e);", "+                + sourceName + \" - \" + e.getMessage(), e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5340f254a9a8c55f643866de541ae28", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractIllegalCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected final boolean isIllegalClassName(final String aIdent)", "signatureAfterChange": "     protected final boolean isIllegalClassName(final String ident)", "diff": ["-    protected final boolean isIllegalClassName(final String aIdent)", "+    protected final boolean isIllegalClassName(final String ident)", "-        return mIllegalClassNames.contains(aIdent);", "+        return illegalClassNames.contains(ident);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c564b7798468c0f4412607dcf07e17b3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "697895a2056ecb1fdde0ba1f21a10cb96fc91322", "commitAfterChange": "35de50c9405825eeb68357df2625b693d2748ed9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final boolean isNotStaticAndLastImport = !isStatic && lastImportStatic;", "+        final boolean isLastImportAndNonStatic = lastImportStatic && !isStatic;", "-            if (isNotStaticAndLastImport) {", "+            if (isLastImportAndNonStatic) {", "-            doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "+            doVisitToken(ident, isStatic, isLastImportAndNonStatic);", "-            doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "+            doVisitToken(ident, isStatic, isLastImportAndNonStatic);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6e15a9348bbe611e49e36850d236096", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean isObjectType(DetailAST aType)", "signatureAfterChange": "     private boolean isObjectType(DetailAST type)", "diff": ["-    private boolean isObjectType(DetailAST aType)", "+    private boolean isObjectType(DetailAST type)", "-        final int type = aType.getFirstChild().getType();", "-        return ((type == TokenTypes.IDENT) || (type == TokenTypes.DOT)", "-                || (type == TokenTypes.ARRAY_DECLARATOR));", "+        final int objectType = type.getFirstChild().getType();", "+        return ((objectType == TokenTypes.IDENT) || (objectType == TokenTypes.DOT)", "+                || (objectType == TokenTypes.ARRAY_DECLARATOR));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6ecb20a3d7d8c85c48910fdf3b5f956", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "          @Override         public synchronized Object put(Object aKey, Object aValue)", "signatureAfterChange": "          @Override         public synchronized Object put(Object key, Object value)", "diff": ["-        public synchronized Object put(Object aKey, Object aValue)", "+        public synchronized Object put(Object key, Object value)", "-            final Object oldValue = super.put(aKey, aValue);", "-            if (oldValue != null && aKey instanceof String) {", "-                final String keyString = (String) aKey;", "-                mDuplicatedStrings.add(keyString);", "+            final Object oldValue = super.put(key, value);", "+            if (oldValue != null && key instanceof String) {", "+                final String keyString = (String) key;", "+                duplicatedStrings.add(keyString);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c73b5b3c9e7958e1bbff8c25f4e5bdad", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheck.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aAst)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST ast)", "diff": ["-    public void beginTree(DetailAST aAst)", "+    public void beginTree(DetailAST ast)", "-        mHandlerFactory.clearCreatedHandlers();", "-        mHandlers.clear();", "-        mHandlers.push(new PrimordialHandler(this));", "+        handlerFactory.clearCreatedHandlers();", "+        handlers.clear();", "+        handlers.push(new PrimordialHandler(this));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7d85072a13a1b0cec58d1ec1aac5d54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers)", "signatureAfterChange": "     static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers)", "diff": ["-        final Iterator<DetailAST> it = modifiers.iterator();", "+        final Iterator<DetailAST> iterator = modifiers.iterator();", "-        DetailAST modifier = skipAnnotations(it);", "+        DetailAST modifier = skipAnnotations(iterator);", "-            int i = 0;", "+            int index = 0;", "-                while (i < JLS_ORDER.length", "-                       && !JLS_ORDER[i].equals(modifier.getText())) {", "-                    i++;", "+                while (index < JLS_ORDER.length", "+                       && !JLS_ORDER[index].equals(modifier.getText())) {", "+                    index++;", "-                if (i == JLS_ORDER.length) {", "+                if (index == JLS_ORDER.length) {", "-                else if (it.hasNext()) {", "-                    modifier = it.next();", "+                else if (iterator.hasNext()) {", "+                    modifier = iterator.next();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c85019c4ac2c5f23b917c8d5c5af43d3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "a13ebd482ce5dd891ba99d4c22a7cd5ff7d8e2dc", "commitAfterChange": "dad4fa599aa3570980fcaff4cb5f37941847a7a1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testRemoveFilter() throws Exception", "signatureAfterChange": "      @Test     public void testRemoveFilter() throws Exception", "diff": ["-        final DebugChecker c = new DebugChecker();", "-        final DebugFilter f = new DebugFilter();", "+        final DebugChecker checker = new DebugChecker();", "+        final DebugFilter filter = new DebugFilter();", "-        c.addFilter(f);", "-        c.addFilter(f2);", "-        c.removeFilter(f);", "+        checker.addFilter(filter);", "+        checker.addFilter(f2);", "+        checker.removeFilter(filter);", "-        c.fireErrors(\"Some File Name\", msgs);", "+        checker.fireErrors(\"Some File Name\", msgs);", "-        assertFalse(\"Checker.fireErrors() does call removed filter\", f.wasCalled());", "+        assertFalse(\"Checker.fireErrors() does call removed filter\", filter.wasCalled());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d97f49b7fd5ed41f16e84305666f64", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/IntRangeFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public boolean accept(int aInt)", "signatureAfterChange": "     @Override     public boolean accept(int intValue)", "diff": ["-    public boolean accept(int aInt)", "+    public boolean accept(int intValue)", "-        return ((mLowerBound.compareTo(aInt) <= 0)", "-            && (mUpperBound.compareTo(aInt) >= 0));", "+        return ((lowerBound.compareTo(intValue) <= 0)", "+            && (upperBound.compareTo(intValue) >= 0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8e683304ca9b2f1779d0162ee090276", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractAccessControlNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected boolean shouldCheckInScope(DetailAST aModifiers)", "signatureAfterChange": "     protected boolean shouldCheckInScope(DetailAST modifiers)", "diff": ["-    protected boolean shouldCheckInScope(DetailAST aModifiers)", "+    protected boolean shouldCheckInScope(DetailAST modifiers)", "-        if (aModifiers == null) {", "+        if (modifiers == null) {", "-            return mApplyToPackage;", "+            return applyToPackage;", "-        final boolean isPublic = aModifiers", "+        final boolean isPublic = modifiers", "-        final boolean isProtected = aModifiers", "+        final boolean isProtected = modifiers", "-        final boolean isPrivate = aModifiers", "+        final boolean isPrivate = modifiers", "-        return (mApplyToPublic && isPublic)", "-                || (mApplyToProtected && isProtected)", "-                || (mApplyToPackage && isPackage)", "-                || (mApplyToPrivate && isPrivate);", "+        return (applyToPublic && isPublic)", "+                || (applyToProtected && isProtected)", "+                || (applyToPackage && isPackage)", "+                || (applyToPrivate && isPrivate);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9188070ca1c29fbd19f17aa8179db10", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private Set<String> matchPattern(String aIdentifier, Pattern aPattern)", "signatureAfterChange": "     private Set<String> matchPattern(String identifier, Pattern pattern)", "diff": ["-    private Set<String> matchPattern(String aIdentifier, Pattern aPattern)", "+    private Set<String> matchPattern(String identifier, Pattern pattern)", "-        final Matcher matcher = aPattern.matcher(aIdentifier);", "+        final Matcher matcher = pattern.matcher(identifier);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c964967b582ad9adc5d20d54e58a3951", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void setFileMaximum(int fileMax)", "signatureAfterChange": "     public void setFileMaximum(int fileMaximum)", "diff": ["-    public void setFileMaximum(int fileMax) {", "-        this.fileMax = fileMax;", "+    public void setFileMaximum(int fileMaximum) {", "+        this.fileMaximum = fileMaximum;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9b4f7d83d45dde5f26a5a8803aadabb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheck.java", "commitBeforeChange": "b14f255427c0b12054de2873fe300b4f4e691bd4", "commitAfterChange": "cc7aeaec906dc3c864477e3050510009b2a946ee", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST detailAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST detailAST)", "diff": ["-        final DetailAST paradef =", "+        final DetailAST parameterDef =", "-                paradef.findFirstToken(TokenTypes.TYPE);", "+                parameterDef.findFirstToken(TokenTypes.TYPE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9ccdc51daaca73683c16e923b9afa0f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {", "-            if (mCustomImportOrderRules.contains(SAME_PACKAGE_RULE_GROUP)", "-                    && mSamePackageMatchingDepth != -1)", "+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {", "+            if (customImportOrderRules.contains(SAME_PACKAGE_RULE_GROUP)", "+                    && samePackageMatchingDepth != -1)", "-                mSamePackageDomainsRegExp = createSamePackageRegexp(", "-                        mSamePackageMatchingDepth, aAST);", "+                samePackageDomainsRegExp = createSamePackageRegexp(", "+                        samePackageMatchingDepth, ast);", "-            final String importFullPath = getFullImportIdent(aAST);", "-            final int lineNo = aAST.getLineNo();", "-            final boolean isStatic = aAST.getType() == TokenTypes.STATIC_IMPORT;", "-            mImportToGroupList.add(new ImportDetails(importFullPath,", "+            final String importFullPath = getFullImportIdent(ast);", "+            final int lineNo = ast.getLineNo();", "+            final boolean isStatic = ast.getType() == TokenTypes.STATIC_IMPORT;", "+            importToGroupList.add(new ImportDetails(importFullPath,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca1febbacd0b090bfbbf5fba0e3cffcd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void setClasspathRef(Reference aClasspathRef)", "signatureAfterChange": "     public void setClasspathRef(Reference classpathRef)", "diff": ["-    public void setClasspathRef(Reference aClasspathRef)", "+    public void setClasspathRef(Reference classpathRef)", "-        createClasspath().setRefid(aClasspathRef);", "+        createClasspath().setRefid(classpathRef);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca7b0dd775c0bd1c61b799506c3a2260", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java", "commitBeforeChange": "d67d10e9f2b480f7f56fe7cda2a908cd5fe770c7", "commitAfterChange": "f65b17cbc30795247fef3077cce16a8bb53e9ffc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testMisc() throws ClassNotFoundException", "signatureAfterChange": "     @Test     public void testMisc() throws ClassNotFoundException", "diff": ["-        catch (ClassNotFoundException e) {", "+        catch (ClassNotFoundException ex) {", "-        catch (ClassNotFoundException e) {", "+        catch (ClassNotFoundException ex) {", "-        catch (ClassNotFoundException e) {", "+        catch (ClassNotFoundException ex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cabd328ff42ef9cfe4ae11fc3dcc0736", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "91aa6578321ceb08f4b0d715f994b7a9f4abe9d7", "commitAfterChange": "3430721be200cbe2acf55c3b3d52a528638123b3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void compareKeySets(Set keys, Map fileMap)", "signatureAfterChange": "     private void compareKeySets(Set aKeys, Map aFileMap)", "diff": ["-    private void compareKeySets(Set keys, Map fileMap)", "+    private void compareKeySets(Set aKeys, Map aFileMap)", "-        Set fls = fileMap.keySet();", "+        Set fls = aFileMap.keySet();", "-            Set currentKeys = (Set) fileMap.get(currentFile);", "+            Set currentKeys = (Set) aFileMap.get(currentFile);", "-            Set keysClone = new HashSet(keys);", "+            Set keysClone = new HashSet(aKeys);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cac40dab4aabcecedab2cd0e89af895b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     AccessResult checkAccess(final String aForImport, final String aInPkg)", "signatureAfterChange": "     AccessResult checkAccess(final String forImport, final String inPkg)", "diff": ["-    AccessResult checkAccess(final String aForImport, final String aInPkg)", "+    AccessResult checkAccess(final String forImport, final String inPkg)", "-        final AccessResult retVal = localCheckAccess(aForImport, aInPkg);", "+        final AccessResult retVal = localCheckAccess(forImport, inPkg);", "-        else if (mParent == null) {", "+        else if (parent == null) {", "-        return mParent.checkAccess(aForImport, aInPkg);", "+        return parent.checkAccess(forImport, inPkg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb775525f23a66fca3785adeb8018da2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "         @Override         public Object convert(@SuppressWarnings(\"rawtypes\") Class aType,             Object aValue)", "signatureAfterChange": "         @Override         public Object convert(@SuppressWarnings(\"rawtypes\") Class type,             Object value)", "diff": ["-        public Object convert(@SuppressWarnings(\"rawtypes\") Class aType,", "-            Object aValue)", "+        public Object convert(@SuppressWarnings(\"rawtypes\") Class type,", "+            Object value)", "-            if (null == aType) {", "+            if (null == type) {", "-                aValue.toString().trim(), \",\");", "+                value.toString().trim(), \",\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc13ecbbbdb87395477bba3aec3e3b5f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static FilterSet loadSuppressions(String aFilename)         throws CheckstyleException", "signatureAfterChange": "     public static FilterSet loadSuppressions(String filename)         throws CheckstyleException", "diff": ["-    public static FilterSet loadSuppressions(String aFilename)", "+    public static FilterSet loadSuppressions(String filename)", "-                final URL url = new URL(aFilename);", "+                final URL url = new URL(filename);", "-                final File file = new File(aFilename);", "+                final File file = new File(filename);", "-                                .getResource(aFilename);", "+                                .getResource(filename);", "-                            throw new FileNotFoundException(aFilename);", "+                            throw new FileNotFoundException(filename);", "-                        throw new FileNotFoundException(aFilename);", "+                        throw new FileNotFoundException(filename);", "-            return loadSuppressions(source, aFilename);", "+            return loadSuppressions(source, filename);", "-            throw new CheckstyleException(\"unable to find \" + aFilename, e);", "+            throw new CheckstyleException(\"unable to find \" + filename, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc16f5bc087dcc38f7bbeca91c5e2d75", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST ast)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast)", "diff": ["-        final Scope scope;", "+        final Scope customScope;", "-            scope = Scope.PUBLIC;", "+            customScope = Scope.PUBLIC;", "-            scope =", "+            customScope =", "-        return scope.isIn(this.scope) && surroundingScope.isIn(this.scope)", "+        return customScope.isIn(this.scope) && surroundingScope.isIn(this.scope)", "-                || !scope.isIn(excludeScope)", "+                || !customScope.isIn(excludeScope)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc8adb7e79d3b536646b7d49dae2e61c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilterTest.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected void verifySuppressed(Configuration aFilterConfig,                                     String[] aSuppressed)         throws Exception", "signatureAfterChange": "      protected void verifySuppressed(Configuration filterConfig,                                     String[] suppressed)         throws Exception", "diff": ["-    protected void verifySuppressed(Configuration aFilterConfig,", "-                                    String[] aSuppressed)", "+    protected void verifySuppressed(Configuration filterConfig,", "+                                    String[] suppressed)", "-        verify(createChecker(aFilterConfig),", "+        verify(createChecker(filterConfig),", "-               removeSuppressed(sAllMessages, aSuppressed));", "+               removeSuppressed(sAllMessages, suppressed));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cede06b35390809ce1723bdf5567c72b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     void addGuard(final Guard aThug)", "signatureAfterChange": "     void addGuard(final Guard thug)", "diff": ["-    void addGuard(final Guard aThug)", "+    void addGuard(final Guard thug)", "-        mGuards.addFirst(aThug);", "+        guards.addFirst(thug);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf109ea67c514a400b5ee5c5a67e2fc2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     private void checkComment(DetailAST aAST, TextBlock aComment)", "signatureAfterChange": "     private void checkComment(DetailAST ast, TextBlock comment)", "diff": ["-    private void checkComment(DetailAST aAST, TextBlock aComment)", "+    private void checkComment(DetailAST ast, TextBlock comment)", "-        final List<JavadocTag> tags = getMethodTags(aComment);", "+        final List<JavadocTag> tags = getMethodTags(comment);", "-        if (hasShortCircuitTag(aAST, tags)) {", "+        if (hasShortCircuitTag(ast, tags)) {", "-        if (aAST.getType() != TokenTypes.ANNOTATION_FIELD_DEF) {", "+        if (ast.getType() != TokenTypes.ANNOTATION_FIELD_DEF) {", "-            checkParamTags(tags, aAST, !hasInheritDocTag);", "-            checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);", "-            if (isFunction(aAST)) {", "-                checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);", "+            checkParamTags(tags, ast, !hasInheritDocTag);", "+            checkThrowsTags(tags, getThrows(ast), !hasInheritDocTag);", "+            if (isFunction(ast)) {", "+                checkReturnTag(tags, ast.getLineNo(), !hasInheritDocTag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf2075a2c813fc8b1dd17fd224a30d1e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean isTag(String[] aText, Point aPos)", "signatureAfterChange": "     private boolean isTag(String[] javadocText, Point pos)", "diff": ["-    private boolean isTag(String[] aText, Point aPos)", "+    private boolean isTag(String[] javadocText, Point pos)", "-        final int column = aPos.getColumnNo() + 1;", "-        final String text = aText[aPos.getLineNo()];", "+        final int column = pos.getColumnNo() + 1;", "+        final String text = javadocText[pos.getLineNo()];", "-        //Character.isJavaIdentifier... may not be a valid HTML", "+        //Character.isJavidentifier... may not be a valid HTML"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d095e965c7438f2392e928f2b45a495e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private Configuration loadConfiguration(         String aName, Properties aProps) throws CheckstyleException", "signatureAfterChange": "      private Configuration loadConfiguration(         String name, Properties props) throws CheckstyleException", "diff": ["-        String aName, Properties aProps) throws CheckstyleException", "+        String name, Properties props) throws CheckstyleException", "-            \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + aName;", "+            \"src/test/resources/com/puppycrawl/tools/checkstyle/configs/\" + name;", "-            fName, new PropertiesExpander(aProps));", "+            fName, new PropertiesExpander(props));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1517e9548dad52b88b822e6b7f75e4d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected final AbstractClassInfo createClassInfo(final Token name,                                               final String surroundingClass)", "signatureAfterChange": "     protected final AbstractClassInfo createClassInfo(final Token name,                                               final String surroundingClass)", "diff": ["-        final AbstractClassInfo ci = findClassAlias(name.getText());", "-        if (ci != null) {", "-            return new ClassAlias(name, ci);", "+        final AbstractClassInfo classInfo = findClassAlias(name.getText());", "+        if (classInfo != null) {", "+            return new ClassAlias(name, classInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16c1b370c0cc4f005f830a0384d1cc9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "         private void addReferencedClassName(String aClassName)", "signatureAfterChange": "         private void addReferencedClassName(String className)", "diff": ["-        private void addReferencedClassName(String aClassName)", "+        private void addReferencedClassName(String className)", "-            if (isSignificant(aClassName)) {", "-                mReferencedClassNames.add(aClassName);", "+            if (isSignificant(className)) {", "+                referencedClassNames.add(className);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d268f19a0df34cfea7dd97835a197991", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private static boolean isParameterized(DetailAST aAnnotation)", "signatureAfterChange": "     private static boolean isParameterized(DetailAST annotation)", "diff": ["-    private static boolean isParameterized(DetailAST aAnnotation)", "+    private static boolean isParameterized(DetailAST annotation)", "-        return aAnnotation.findFirstToken(TokenTypes.EXPR) != null;", "+        return annotation.findFirstToken(TokenTypes.EXPR) != null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c6f73c7c1a2f3e15abb5bc1d264986", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/Utils.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     @Deprecated     public static String[] getLines(String aFileName, String aCharsetName)         throws IOException", "signatureAfterChange": "     @Deprecated     public static String[] getLines(String fileName, String charsetName)         throws IOException", "diff": ["-    public static String[] getLines(String aFileName, String aCharsetName)", "+    public static String[] getLines(String fileName, String charsetName)", "-        final FileInputStream fr = new FileInputStream(aFileName);", "+        final FileInputStream fr = new FileInputStream(fileName);", "-            lnr = new LineNumberReader(new InputStreamReader(fr, aCharsetName));", "+            lnr = new LineNumberReader(new InputStreamReader(fr, charsetName));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2ff2c86a904e5f8bb2b277f3da2a7a2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "de39a36a6b81521c17e3a4afa0e98e30deccf082", "commitAfterChange": "2b4a02d2c8a498a8a1ee38e9396426209fa65fad", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "diff": ["-        final ByteArrayInputStream bais =", "+        final ByteArrayInputStream inputStream =", "-                new InputStreamReader(bais, StandardCharsets.UTF_8))) {", "+                new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3091476558bfafd465f0f18a1c8a56f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "88edaa84fdcd29fe5cce6c3497cb326244b14197", "commitAfterChange": "067896807847df81ba6e65195e4f39069dc3aea7", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private static String removeDeviceFromPathOnWindows(String string)", "signatureAfterChange": "     private static String removeDeviceFromPathOnWindows(String path)", "diff": ["-   private static String removeDeviceFromPathOnWindows(String string) {", "+   private static String removeDeviceFromPathOnWindows(String path) {", "-           return string.substring(string.indexOf(\":\") + 1);", "+           return path.substring(path.indexOf(\":\") + 1);", "-       return string;", "+       return path;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a2707526be7d3aa090923287883a1b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkAnnotationIndentation(DetailAST aAtNode,             NavigableMap<Integer, DetailAST> aFirstNodesOnLines)", "signatureAfterChange": "     private void checkAnnotationIndentation(DetailAST atNode,             NavigableMap<Integer, DetailAST> firstNodesOnLines)", "diff": ["-    private void checkAnnotationIndentation(DetailAST aAtNode,", "-            NavigableMap<Integer, DetailAST> aFirstNodesOnLines)", "+    private void checkAnnotationIndentation(DetailAST atNode,", "+            NavigableMap<Integer, DetailAST> firstNodesOnLines)", "-        final int currentIndent = aAtNode.getColumnNo() + mIndentLevel;", "-        final int firstNodeIndent = aAtNode.getColumnNo();", "-        final Collection<DetailAST> values = aFirstNodesOnLines.values();", "-        final DetailAST lastAnnotationNode = getLastAnnotationNode(aAtNode);", "+        final int currentIndent = atNode.getColumnNo() + indentLevel;", "+        final int firstNodeIndent = atNode.getColumnNo();", "+        final Collection<DetailAST> values = firstNodesOnLines.values();", "+        final DetailAST lastAnnotationNode = getLastAnnotationNode(atNode);", "-        while (itr.hasNext() && aFirstNodesOnLines.size() > 1) {", "+        while (itr.hasNext() && firstNodesOnLines.size() > 1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d469f3413e55435b3351fc50c682b0ab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java", "commitBeforeChange": "bca6d627ac2fac9aaf75c9d3a90f858619abb6ec", "commitAfterChange": "1a205d4b436650a301ef088ed86a3821b99551f2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "          @Override         public void printStackTrace(PrintWriter printWriter)", "signatureAfterChange": "          @Override         public void printStackTrace(PrintWriter s)", "diff": ["-        public void printStackTrace(PrintWriter printWriter) {", "-            printWriter.print(\"stackTrace\");", "+        public void printStackTrace(PrintWriter s) {", "+            s.print(\"stackTrace\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4af5c7f942c1929774fafc109a15ef9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void leaveForEach(DetailAST aForEach)", "signatureAfterChange": "     private void leaveForEach(DetailAST forEach)", "diff": ["-    private void leaveForEach(DetailAST aForEach)", "+    private void leaveForEach(DetailAST forEach)", "-            aForEach.findFirstToken(TokenTypes.VARIABLE_DEF);", "+            forEach.findFirstToken(TokenTypes.VARIABLE_DEF);", "-        mCurrentVariables.push(paramName.getText());", "+        currentVariables.push(paramName.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4be0e563f8d990ebd191121cc0c3786", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private Point findChar(String[] aText, char aChar, Point aFrom)", "signatureAfterChange": "     private Point findChar(String[] text, char character, Point from)", "diff": ["-    private Point findChar(String[] aText, char aChar, Point aFrom)", "+    private Point findChar(String[] text, char character, Point from)", "-        Point curr = new Point(aFrom.getLineNo(), aFrom.getColumnNo());", "-        while ((curr.getLineNo() < aText.length)", "-               && (aText[curr.getLineNo()].charAt(curr.getColumnNo()) != aChar))", "+        Point curr = new Point(from.getLineNo(), from.getColumnNo());", "+        while ((curr.getLineNo() < text.length)", "+               && (text[curr.getLineNo()].charAt(curr.getColumnNo()) != character))", "-            curr = getNextCharPos(aText, curr);", "+            curr = getNextCharPos(text, curr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4e2f57192dcb683fa0d6ed64835c7a3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "         ExceptionInfo(Token aIdent, String aCurrentClass)", "signatureAfterChange": "         ExceptionInfo(Token ident, String currentClass)", "diff": ["-        ExceptionInfo(Token aIdent, String aCurrentClass)", "+        ExceptionInfo(Token ident, String currentClass)", "-            mClassInfo = createClassInfo(aIdent, aCurrentClass);", "+            classInfo = createClassInfo(ident, currentClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6705e933b0d2900df6b0e9abece5fb7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static double parseDouble(String aText, int aType)", "signatureAfterChange": "     public static double parseDouble(String text, int type)", "diff": ["-    public static double parseDouble(String aText, int aType)", "+    public static double parseDouble(String text, int type)", "-        String txt = aText.replaceAll(\"_\", \"\");", "+        String txt = text.replaceAll(\"_\", \"\");", "-        switch (aType) {", "+        switch (type) {", "-                if (aType == TokenTypes.NUM_INT) {", "+                if (type == TokenTypes.NUM_INT) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6d616026a59c42a4ab867c6e1715789", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public static String getTokenName(int aID)", "signatureAfterChange": "     public static String getTokenName(int iD)", "diff": ["-    public static String getTokenName(int aID)", "+    public static String getTokenName(int iD)", "-        if (aID == JavadocTokenTypes.EOF) {", "+        if (iD == JavadocTokenTypes.EOF) {", "-        if (aID > TOKEN_VALUE_TO_NAME.length - 1) {", "-            throw new IllegalArgumentException(\"Unknown javadoc token id. Given id: \" + aID);", "+        if (iD > TOKEN_VALUE_TO_NAME.length - 1) {", "+            throw new IllegalArgumentException(\"Unknown javdoc token id. Given id: \" + iD);", "-        final String name = TOKEN_VALUE_TO_NAME[aID];", "+        final String name = TOKEN_VALUE_TO_NAME[iD];", "-            throw new IllegalArgumentException(\"Unknown javadoc token id. Given id: \" + aID);", "+            throw new IllegalArgumentException(\"Unknown javdoc token id. Given id: \" + iD);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d71df76c6d61534b63edff13d071bded", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final String literal = aAST.getText();", "+        final String literal = ast.getText();", "-            if (!(mAllowByTailComment && hasTrailComment(aAST)", "+            if (!(allowByTailComment && haastrailComment(ast)", "-                    || (mAllowEscapesForControlCharacters", "+                    || (allowEscapesForControlCharacters", "-                    || (mAllowNonPrintableEscapes", "+                    || (allowNonPrintableEscapes", "-                log(aAST.getLineNo(), \"forbid.escaped.unicode.char\");", "+                log(ast.getLineNo(), \"forbid.escaped.unicode.char\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b7271c888b43624588353e25b115f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static boolean isDragOk(final DropTargetDragEvent evt)", "signatureAfterChange": "     private static boolean isDragOk(final DropTargetDragEvent evt)", "diff": ["-        boolean ok = false;", "+        boolean okStatus = false;", "-        int i = 0;", "+        int index = 0;", "-        while (!ok && i < flavors.length) {", "-            if (flavors[i].equals(DataFlavor.javaFileListFlavor)) {", "-                ok = true;", "+        while (!okStatus && index < flavors.length) {", "+            if (flavors[index].equals(DataFlavor.javaFileListFlavor)) {", "+                okStatus = true;", "-            i++;", "+            index++;", "-        return ok;", "+        return okStatus;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b7c1f46711c0a424b91dde37c2ab4d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/grammars/CommentListener.java", "commitBeforeChange": "319f297e13e5c175a62489ff555cff7c463d3c7b", "commitAfterChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     void reportSingleLineComment(String aType,                                  int aStartLineNo, int aStartColNo);", "signatureAfterChange": "     void reportSingleLineComment(String type,                                  int startLineNo, int startColNo);", "diff": ["-    void reportSingleLineComment(String aType,", "+    void reportSingleLineComment(String type,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7ddab054e80e5ed6228e4c3e6b29ca1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodLengthCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST openingBrace = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST openingBrace = ast.findFirstToken(TokenTypes.SLIST);", "-            if (!mCountEmpty) {", "+            if (!countEmpty) {", "-            if (length > mMax) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"maxLen.method\",", "-                        length, mMax);", "+            if (length > max) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"maxLen.method\",", "+                        length, max);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82d90a9c761f60e96e76280a9265a91", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "         void increment(Scope aScope)", "signatureAfterChange": "         void increment(Scope scope)", "diff": ["-        void increment(Scope aScope)", "+        void increment(Scope scope)", "-            mTotal++;", "-            if (mInInterface) {", "-                mCounts.put(Scope.PUBLIC, 1 + value(Scope.PUBLIC));", "+            total++;", "+            if (inInterface) {", "+                counts.put(Scope.PUBLIC, 1 + value(Scope.PUBLIC));", "-                mCounts.put(aScope, 1 + value(aScope));", "+                counts.put(scope, 1 + value(scope));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d870d80ce2e27277dd6e818c2f74a951", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public DefaultLogger(OutputStream aOS, boolean aCloseStreamsAfterUse)", "signatureAfterChange": "     public DefaultLogger(OutputStream os, boolean closeStreamsAfterUse)", "diff": ["-    public DefaultLogger(OutputStream aOS, boolean aCloseStreamsAfterUse)", "+    public DefaultLogger(OutputStream os, boolean closeStreamsAfterUse)", "-        // no need to close aOS twice", "-        this(aOS, aCloseStreamsAfterUse, aOS, false);", "+        // no need to close oS twice", "+        this(os, closeStreamsAfterUse, os, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d89555adce6b62525bd06df11cc25348", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean hasEmptyLineBefore(DetailAST aToken)", "signatureAfterChange": "     private boolean hasEmptyLineBefore(DetailAST token)", "diff": ["-    private boolean hasEmptyLineBefore(DetailAST aToken)", "+    private boolean hasEmptyLineBefore(DetailAST token)", "-        final int lineNo = aToken.getLineNo();", "+        final int lineNo = token.getLineNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8991713504ff1a232e7c69cc57d5e4b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java", "commitBeforeChange": "d814d1352b63136a400cd8f4dffd03d68c9ccd24", "commitAfterChange": "3edd1b53a5d8d407fd33d8c514db8bc1c7274fe5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testCheckOptions()", "signatureAfterChange": "      @Test     public void testCheckOptions()", "diff": ["-        TestMessager testMessanger = new TestMessager(context);", "+        TestMessager testMessager = new TestMessager(context);", "-        assertFalse(TokenTypesDoclet.checkOptions(options, testMessanger));", "+        assertFalse(TokenTypesDoclet.checkOptions(options, testMessager));", "-        assertTrue(TokenTypesDoclet.checkOptions(options, testMessanger));", "+        assertTrue(TokenTypesDoclet.checkOptions(options, testMessager));", "-        assertFalse(TokenTypesDoclet.checkOptions(options, testMessanger));", "+        assertFalse(TokenTypesDoclet.checkOptions(options, testMessager));", "-        Assert.assertArrayEquals(expected, testMessanger.messages.toArray());", "+        Assert.assertArrayEquals(expected, testMessager.messages.toArray());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8ed3978ba2479a2e000b8689651bb92", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST ast)", "diff": ["-    public void beginTree(DetailAST aAST)", "+    public void beginTree(DetailAST ast)", "-        mFileName = getFileName();", "-        mSeenFirstToken = false;", "-        mValidFirst = false;", "-        mHasPublic = false;", "-        mWrongType = null;", "+        fileName = getFileName();", "+        seenFirstToken = false;", "+        validFirst = false;", "+        hasPublic = false;", "+        wrongType = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d90f7f7d5c745a9bc7bd3ed7d094b4b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public void addError(AuditEvent aEvt)", "signatureAfterChange": "     @Override     public void addError(AuditEvent evt)", "diff": ["-    public void addError(AuditEvent aEvt)", "+    public void addError(AuditEvent evt)", "-        final SeverityLevel severityLevel = aEvt.getSeverityLevel();", "+        final SeverityLevel severityLevel = evt.getSeverityLevel();", "-            final String fileName = aEvt.getFileName();", "-            final String message = aEvt.getMessage();", "+            final String fileName = evt.getFileName();", "+            final String message = evt.getMessage();", "-            sb.append(':').append(aEvt.getLine());", "-            if (aEvt.getColumn() > 0) {", "-                sb.append(':').append(aEvt.getColumn());", "+            sb.append(':').append(evt.getLine());", "+            if (evt.getColumn() > 0) {", "+                sb.append(':').append(evt.getColumn());", "-            mErrorWriter.println(sb.toString());", "+            errorWriter.println(sb.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d933039d5a426e4a42e0917e7e60333f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setExcludes(String[] aExcludes)", "signatureAfterChange": "     public void setExcludes(String[] excludesParam)", "diff": ["-    public void setExcludes(String[] aExcludes)", "+    public void setExcludes(String[] excludesParam)", "-        mExcludes.clear();", "-        for (final String exclude : aExcludes) {", "-            mExcludes.add(exclude.endsWith(\".*\") ? exclude : exclude + \".*\");", "+        excludes.clear();", "+        for (final String exclude : excludesParam) {", "+            excludes.add(exclude.endsWith(\".*\") ? exclude : exclude + \".*\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9623fd9f87f401b157a1928c619dd2a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     protected List<File> scanFileSets()", "signatureAfterChange": "     protected List<File> scanFileSets()", "diff": ["-            final FileSet fs = fileSets.get(i);", "-            final DirectoryScanner ds = fs.getDirectoryScanner(getProject());", "-            ds.scan();", "+            final FileSet fileSet = fileSets.get(i);", "+            final DirectoryScanner scanner = fileSet.getDirectoryScanner(getProject());", "+            scanner.scan();", "-            final String[] names = ds.getIncludedFiles();", "+            final String[] names = scanner.getIncludedFiles();", "-                    + ds.getBasedir(), Project.MSG_VERBOSE);", "+                    + scanner.getBasedir(), Project.MSG_VERBOSE);", "-                final String pathname = ds.getBasedir() + File.separator", "+                final String pathname = scanner.getBasedir() + File.separator"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9987b7952bc267a818e1f3f63460fd5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Scope.java", "commitBeforeChange": "d917b95a017b235c99f52624475352e2d79ce7b2", "commitAfterChange": "51dae59b8dcfb5a34f2a8a5b3e788eb6599a1df3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public int compareTo(Object aObject)", "signatureAfterChange": "     public int compareTo(Object aObject)", "diff": ["-        Scope scope = (Scope) aObject;", "-        return this.mCode - scope.mCode;", "+        final Scope s = (Scope) aObject;", "+        return this.mCode - s.mCode;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbfcba10f2eeb72aefbb248b6ac37cc0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java", "commitBeforeChange": "5e0f360e7b7745a362bd7a655e98654a2ad36443", "commitAfterChange": "3813f1ccbf157f463c041ccfc462399845ddff6e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static boolean isLocalVariableDef(DetailAST aAST)", "signatureAfterChange": "     public static boolean isLocalVariableDef(DetailAST node)", "diff": ["-    public static boolean isLocalVariableDef(DetailAST aAST) {", "+    public static boolean isLocalVariableDef(DetailAST node) {", "-        if (aAST.getType() == TokenTypes.VARIABLE_DEF) {", "-            final DetailAST parent = aAST.getParent();", "+        if (node.getType() == TokenTypes.VARIABLE_DEF) {", "+            final DetailAST parent = node.getParent();", "-        if (aAST.getType() == TokenTypes.PARAMETER_DEF) {", "-            final DetailAST parent = aAST.getParent();", "+        if (node.getType() == TokenTypes.PARAMETER_DEF) {", "+            final DetailAST parent = node.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc46daca4bcf40845a878b78cdc19b12", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Override     public final void visitToken(DetailAST aBlockCommentAst)", "signatureAfterChange": "      @Override     public final void visitToken(DetailAST blockCommentAst)", "diff": ["-    public final void visitToken(DetailAST aBlockCommentAst)", "+    public final void visitToken(DetailAST blockCommentAst)", "-        if (JavadocUtils.isJavadocComment(aBlockCommentAst)) {", "-            mBlockCommentAst = aBlockCommentAst;", "+        if (JavadocUtils.isJavadocComment(blockCommentAst)) {", "+            this.blockCommentAst = blockCommentAst;", "-            final String treeCacheKey = aBlockCommentAst.getLineNo() + \":\"", "-                    + aBlockCommentAst.getColumnNo();", "+            final String treeCacheKey = blockCommentAst.getLineNo() + \":\"", "+                    + blockCommentAst.getColumnNo();", "-                ps = parseJavadocAsDetailNode(aBlockCommentAst);", "+                ps = parseJavadocAsDetailNode(blockCommentAst);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddc3e4ec76ad1b9e62ced9e5695559ad", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "896af516b0028ff2a26cc1888dfaba620d3fe9e0", "commitAfterChange": "55c92042eb6986e905529de841d3d1c9a7b2b6dd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void tagSuppressions()", "signatureAfterChange": "     private void tagSuppressions()", "diff": ["-            final Collection<List<TextBlock>> cCoonts = contents", "+            final Collection<List<TextBlock>> cComments = contents", "-            for (List<TextBlock> eleont : cCoonts) {", "-                tagSuppressions(eleont);", "+            for (List<TextBlock> element : cComments) {", "+                tagSuppressions(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddcfb424212d2c6e0a9687deedddd7b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     private DetailAST findMatchingAnnotation(DetailAST variableDef)", "signatureAfterChange": "     private DetailAST findMatchingAnnotation(DetailAST variableDef)", "diff": ["-                final DetailAST at = child.getFirstChild();", "+                final DetailAST ast = child.getFirstChild();", "-                    FullIdent.createFullIdent(at.getNextSibling()).getText();", "+                    FullIdent.createFullIdent(ast.getNextSibling()).getText();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de16c33e8d60ee51e2fcbdda37ff52f2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private int countMatches(Pattern aPattern, String aTarget)", "signatureAfterChange": "     private int countMatches(Pattern pattern, String target)", "diff": ["-    private int countMatches(Pattern aPattern, String aTarget)", "+    private int countMatches(Pattern pattern, String target)", "-        final Matcher matcher = aPattern.matcher(aTarget);", "+        final Matcher matcher = pattern.matcher(target);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de730de167ac4f6db1679109506e66b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override     public void initialize(Token aTok)", "signatureAfterChange": "      @Override     public void initialize(Token tok)", "diff": ["-    public void initialize(Token aTok)", "+    public void initialize(Token tok)", "-        super.initialize(aTok);", "-        mLineNo = aTok.getLine();", "-        mColumnNo = aTok.getColumn() - 1; // expect columns to start @ 0", "+        super.initialize(tok);", "+        lineNo = tok.getLine();", "+        columnNo = tok.getColumn() - 1; // expect columns to start @ 0"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc09bc2d1138b7a345f2256f0c049b5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheckTest.java", "commitBeforeChange": "fdd5ed77fd1ea61768683ee8cfacf78190a2d3aa", "commitAfterChange": "bf9325be913ce46a1427232c455f4830b574ba44", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testLogIOException() throws Exception", "signatureAfterChange": "      @Test     public void testLogIoException() throws Exception", "diff": ["-    public void testLogIOException() throws Exception {", "+    public void testLogIoException() throws Exception {", "-        final Method logIOException = check.getClass().getDeclaredMethod(\"logIOException\",", "+        final Method logIoException = check.getClass().getDeclaredMethod(\"logIoException\",", "-        logIOException.setAccessible(true);", "-        logIOException.invoke(check, new IOException(\"test exception\"), new File(\"\"));", "+        logIoException.setAccessible(true);", "+        logIoException.invoke(check, new IOException(\"test exception\"), new File(\"\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0aebe8f4f0f422ca0c425972e5c9c1c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private static DetailAST getFirstNodeInsideTryCatchFinallyBlocks(             DetailAST aBlock, DetailAST aVariable)", "signatureAfterChange": "     private static DetailAST getFirstNodeInsideTryCatchFinallyBlocks(             DetailAST block, DetailAST variable)", "diff": ["-            DetailAST aBlock, DetailAST aVariable)", "+            DetailAST block, DetailAST variable)", "-        DetailAST currentNode = aBlock.getFirstChild();", "+        DetailAST currentNode = block.getFirstChild();", "-        if (isChild(currentNode, aVariable)) {", "+        if (isChild(currentNode, variable)) {", "-            if (isChild(catchBlock, aVariable)) {", "+            if (isChild(catchBlock, variable)) {", "-            if (isChild(finalBlock, aVariable)) {", "+            if (isChild(finalBlock, variable)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0c23983b150b31fa11b7193078809db", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void walk(DetailAST aAST, FileContents aContents             , AstState aAstState)", "signatureAfterChange": "     private void walk(DetailAST ast, FileContents contents             , AstState astState)", "diff": ["-    private void walk(DetailAST aAST, FileContents aContents", "-            , AstState aAstState)", "+    private void walk(DetailAST ast, FileContents contents", "+            , AstState astState)", "-        notifyBegin(aAST, aContents, aAstState);", "+        notifyBegin(ast, contents, astState);", "-        // empty files are not flagged by javac, will yield aAST == null", "-        if (aAST != null) {", "-            processIter(aAST, aAstState);", "+        // empty files are not flagged by javac, will yield ast == null", "+        if (ast != null) {", "+            processIter(ast, astState);", "-        notifyEnd(aAST, aAstState);", "+        notifyEnd(ast, astState);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f2e952152223bb8f65f72f729a4e5e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "41044d42b8f21ae00792f101a63101bf87d7fd61", "commitAfterChange": "7a4ec11d123dc0bbf7db943af715d19814d2e332", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected static String getPath(String aFilename)         throws IOException", "signatureAfterChange": "      protected String getPath(String fileName) throws IOException", "diff": ["-    protected static String getPath(String aFilename)", "-        throws IOException {", "-        return new File(\"src/main/java/com/google/checkstyle/test/filebasic/\" + aFilename)", "-            .getCanonicalPath();", "+    protected String getPath(String fileName) throws IOException {", "+        return new File(\"src/it/resources/com/google/checkstyle/test/\" + fileName)", "+                .getCanonicalPath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e104667ee9e00592f41a1d270d106f8e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsHashCodeCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-    public void finishTree(DetailAST aRootAST)", "+    public void finishTree(DetailAST rootAST)", "-        final Set<DetailAST> equalsDefs = mObjBlockEquals.keySet();", "+        final Set<DetailAST> equalsDefs = objBlockEquals.keySet();", "-            if (!mObjBlockWithHashCode.contains(objBlock)) {", "-                final DetailAST equalsAST = mObjBlockEquals.get(objBlock);", "+            if (!objBlockWithHashCode.contains(objBlock)) {", "+                final DetailAST equalsAST = objBlockEquals.get(objBlock);", "-        mObjBlockEquals.clear();", "-        mObjBlockWithHashCode.clear();", "+        objBlockEquals.clear();", "+        objBlockWithHashCode.clear();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10eac9bb483fd5773928f1b201d2a9c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     PropertyCacheFile(Configuration aCurrentConfig, String aFileName)", "signatureAfterChange": "     PropertyCacheFile(Configuration currentConfig, String fileName)", "diff": ["-    PropertyCacheFile(Configuration aCurrentConfig, String aFileName)", "+    PropertyCacheFile(Configuration currentConfig, String fileName)", "-        if (aFileName != null) {", "+        if (fileName != null) {", "-            final String currentConfigHash = getConfigHashCode(aCurrentConfig);", "+            final String currentConfigHash = getConfigHashCode(currentConfig);", "-                inStream = new FileInputStream(aFileName);", "-                mDetails.load(inStream);", "+                inStream = new FileInputStream(fileName);", "+                details.load(inStream);", "-                    mDetails.getProperty(CONFIG_HASH_KEY);", "+                    details.getProperty(CONFIG_HASH_KEY);", "-                    mDetails.clear();", "-                    mDetails.put(CONFIG_HASH_KEY, currentConfigHash);", "+                    details.clear();", "+                    details.put(CONFIG_HASH_KEY, currentConfigHash);", "-                mDetails.put(CONFIG_HASH_KEY, currentConfigHash);", "+                details.put(CONFIG_HASH_KEY, currentConfigHash);", "-        mDetailsFile = (setInActive) ? null : aFileName;", "+        detailsFile = (setInActive) ? null : fileName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27cbb820f607abcf3a021bb4140111d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public static String getTokenName(int iD)", "signatureAfterChange": "     public static String getTokenName(int id)", "diff": ["-    public static String getTokenName(int iD) {", "-        if (iD == JavadocTokenTypes.EOF) {", "+    public static String getTokenName(int id) {", "+        if (id == JavadocTokenTypes.EOF) {", "-        if (iD > TOKEN_VALUE_TO_NAME.length - 1) {", "-            throw new IllegalArgumentException(UNKNOWN_JAVADOC_TOKEN_ID_EXCEPTION_MESSAGE + iD);", "+        if (id > TOKEN_VALUE_TO_NAME.length - 1) {", "+            throw new IllegalArgumentException(UNKNOWN_JAVADOC_TOKEN_ID_EXCEPTION_MESSAGE + id);", "-        final String name = TOKEN_VALUE_TO_NAME[iD];", "+        final String name = TOKEN_VALUE_TO_NAME[id];", "-            throw new IllegalArgumentException(UNKNOWN_JAVADOC_TOKEN_ID_EXCEPTION_MESSAGE + iD);", "+            throw new IllegalArgumentException(UNKNOWN_JAVADOC_TOKEN_ID_EXCEPTION_MESSAGE + id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2d1de3b028dc36bbd682530a7f847ce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/BaseCheckTestCase.java", "commitBeforeChange": "6568a9b88220366da3fc9e58fc9de93af9a6520d", "commitAfterChange": "f116754656b534e1a44e797e21b06290dfcf8ad8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      protected void verify(Checker aC, String aFilename, String[] aExpected)         throws Exception", "signatureAfterChange": "      protected void verify(Checker aC, String aProcessedFilename,             String aMessageFileName, String[] aExpected)         throws Exception", "diff": ["-    protected void verify(Checker aC, String aFilename, String[] aExpected)", "+", "+    protected void verify(Checker aC, String aProcessedFilename,", "+            String aMessageFileName, String[] aExpected)", "-        final int errs = aC.process(new File[] {new File(aFilename)});", "+        final int errs = aC.process(new File[] {new File(aProcessedFilename)});", "-            assertEquals(aFilename + \":\" + aExpected[i], lnr.readLine());", "+            assertEquals(aMessageFileName + \":\" + aExpected[i], lnr.readLine());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e363dcb82443b5b15a0acfb325f09fd4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/SeverityLevelCounter.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public void addError(AuditEvent aEvt)", "signatureAfterChange": "     @Override     public void addError(AuditEvent evt)", "diff": ["-    public void addError(AuditEvent aEvt)", "+    public void addError(AuditEvent evt)", "-        if (mLevel.equals(aEvt.getSeverityLevel())) {", "-            mCount++;", "+        if (level.equals(evt.getSeverityLevel())) {", "+            count++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e44758c99a1a50304c10ab884a889c79", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private void tagCommentLine(String aText, int aLine)", "signatureAfterChange": "     private void tagCommentLine(String text, int line)", "diff": ["-    private void tagCommentLine(String aText, int aLine)", "+    private void tagCommentLine(String text, int line)", "-        final Matcher matcher = mCommentRegexp.matcher(aText);", "+        final Matcher matcher = commentRegexp.matcher(text);", "-            addTag(matcher.group(0), aLine);", "+            addTag(matcher.group(0), line);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e456d2aef616466e9a77815a854634f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public final void setTokens(String[] aStrRep)", "signatureAfterChange": "     public final void setTokens(String[] strRep)", "diff": ["-    public final void setTokens(String[] aStrRep)", "+    public final void setTokens(String[] strRep)", "-        for (final String s : aStrRep) {", "-            mTokens.add(s);", "+        for (final String s : strRep) {", "+            tokens.add(s);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e45f8601999040ea0bae0402e8465580", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void checkCompactNoArrayStyle(final DetailAST aAnnotation)", "signatureAfterChange": "     private void checkCompactNoArrayStyle(final DetailAST annotation)", "diff": ["-    private void checkCompactNoArrayStyle(final DetailAST aAnnotation)", "+    private void checkCompactNoArrayStyle(final DetailAST annotation)", "-            aAnnotation.findFirstToken(TokenTypes.ANNOTATION_ARRAY_INIT);", "+            annotation.findFirstToken(TokenTypes.ANNOTATION_ARRAY_INIT);", "-            aAnnotation.getChildCount(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);", "+            annotation.getChildCount(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);", "-            aAnnotation.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);", "+            annotation.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);", "-            this.log(aAnnotation.getLineNo(), \"annotation.incorrect.style\",", "+            this.log(annotation.getLineNo(), \"annotation.incorrect.style\",", "-                this.log(aAnnotation.getLineNo(), \"annotation.incorrect.style\",", "+                this.log(annotation.getLineNo(), \"annotation.incorrect.style\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e544ca0dee63defbb9acc3bacd651440", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractNestedDepthCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected final void nestIn(DetailAST aAST, String aMessageId)", "signatureAfterChange": "     protected final void nestIn(DetailAST ast, String messageId)", "diff": ["-    protected final void nestIn(DetailAST aAST, String aMessageId)", "+    protected final void nestIn(DetailAST ast, String messageId)", "-        if (mDepth > mMax) {", "-            log(aAST, aMessageId, mDepth, mMax);", "+        if (depth > max) {", "+            log(ast, messageId, depth, max);", "-        ++mDepth;", "+        ++depth;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e598fcc4bee9f901ebbf22938eb109b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "      @Override     protected final void logLoadError(Token aIdent)", "signatureAfterChange": "      @Override     protected final void logLoadError(Token ident)", "diff": ["-    protected final void logLoadError(Token aIdent)", "+    protected final void logLoadError(Token ident)", "-        logLoadErrorImpl(aIdent.getLineNo(), aIdent.getColumnNo(),", "+        logLoadErrorImpl(ident.getLineNo(), ident.getColumnNo(),", "-            JavadocTagInfo.THROWS.getText(), aIdent.getText());", "+            JavadocTagInfo.THROWS.getText(), ident.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e600566d5975fffe99e06068c3aee34a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void notifyVisit(DetailAST ast, AstState astState)", "signatureAfterChange": "     private void notifyVisit(DetailAST ast, AstState astState)", "diff": ["-        for (Check c : visitors) {", "-            c.visitToken(ast);", "+        for (Check check : visitors) {", "+            check.visitToken(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6145ede54335f3843790582688e5a40", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static String extractPropertyIdentifier(final File aFile,             final String aBasenameSeparator)", "signatureAfterChange": "     private static String extractPropertyIdentifier(final File file,             final String basenameSeparator)", "diff": ["-    private static String extractPropertyIdentifier(final File aFile,", "-            final String aBasenameSeparator)", "+    private static String extractPropertyIdentifier(final File file,", "+            final String basenameSeparator)", "-        final String filePath = aFile.getPath();", "+        final String filePath = file.getPath();", "-        final int underscoreIdx = filePath.indexOf(aBasenameSeparator,", "+        final int underscoreIdx = filePath.indexOf(basenameSeparator,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6398074e4665fd420149eb25d1f0bc0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int process(List<File> aFiles)", "signatureAfterChange": "     public int process(List<File> files)", "diff": ["-    public int process(List<File> aFiles)", "+    public int process(List<File> files)", "-        for (final FileSetCheck fsc : mFileSetChecks) {", "-            fsc.beginProcessing(mCharset);", "+        for (final FileSetCheck fsc : fileSetChecks) {", "+            fsc.beginProcessing(charset);", "-        for (final File f : aFiles) {", "+        for (final File f : files) {", "-                        mCharset);", "-                for (final FileSetCheck fsc : mFileSetChecks) {", "+                        charset);", "+                for (final FileSetCheck fsc : fileSetChecks) {", "-        for (final FileSetCheck fsc : mFileSetChecks) {", "+        for (final FileSetCheck fsc : fileSetChecks) {", "-        final int errorCount = mCounter.getCount();", "+        final int errorCount = counter.getCount();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6ff3a89177014d0bc6fc9c482b77b67", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "     private List<JavadocTag> getMethodTags(TextBlock aComment)", "signatureAfterChange": "     private List<JavadocTag> getMethodTags(TextBlock comment)", "diff": ["-    private List<JavadocTag> getMethodTags(TextBlock aComment)", "+    private List<JavadocTag> getMethodTags(TextBlock comment)", "-        final String[] lines = aComment.getText();", "+        final String[] lines = comment.getText();", "-        int currentLine = aComment.getStartLineNo() - 1;", "+        int currentLine = comment.getStartLineNo() - 1;", "-                    col += aComment.getStartColNo();", "+                    col += comment.getStartColNo();", "-                    col += aComment.getStartColNo();", "+                    col += comment.getStartColNo();", "-                    col += aComment.getStartColNo();", "+                    col += comment.getStartColNo();", "-                    col += aComment.getStartColNo();", "+                    col += comment.getStartColNo();", "-                    col += aComment.getStartColNo();", "+                    col += comment.getStartColNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7065088d7f1afd91db4f14e71dbfbe9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-    public void finishTree(DetailAST aRootAST)", "+    public void finishTree(DetailAST rootAST)", "-        if (!mPublicTypeFound && !mLineNumberTypeMap.isEmpty()) {", "+        if (!publicTypeFound && !lineNumberTypeMap.isEmpty()) {", "-            mLineNumberTypeMap.remove(mLineNumberTypeMap.firstKey());", "+            lineNumberTypeMap.remove(lineNumberTypeMap.firstKey());", "-                : mLineNumberTypeMap.entrySet())", "+                : lineNumberTypeMap.entrySet())", "-        mLineNumberTypeMap.clear();", "-        mPublicTypeFound = false;", "+        lineNumberTypeMap.clear();", "+        publicTypeFound = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e721491c3f58847dffb97b8c131438dc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void setOutputStream(OutputStream aOS)", "signatureAfterChange": "     private void setOutputStream(OutputStream oS)", "diff": ["-    private void setOutputStream(OutputStream aOS)", "+    private void setOutputStream(OutputStream oS)", "-            final OutputStreamWriter osw = new OutputStreamWriter(aOS, \"UTF-8\");", "-            mWriter = new PrintWriter(osw);", "+            final OutputStreamWriter osw = new OutputStreamWriter(oS, \"UTF-8\");", "+            writer = new PrintWriter(osw);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e724134d74dcf134baac201c1011b726", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "commitAfterChange": "29027109bf962f47b6a6000fdca69b5679ce4b43", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        final int fileSize = aLines.size();", "+        final int fileSize = lines.size();", "-        if (headerSize - mMultiLines.length > fileSize) {", "+        if (headerSize - multiLines.length > fileSize) {", "-                final String line = aLines.get(i);", "+                final String line = lines.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e754adc9974005a43d02969aff5dc98d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private String line(int aLineNo)", "signatureAfterChange": "     private String line(int lineNo)", "diff": ["-    private String line(int aLineNo)", "+    private String line(int lineNo)", "-        return mText.get(aLineNo);", "+        return text.get(lineNo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8108c916075a1b2474bac03b836a1f8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean isExempt(String aClassOrStaticMember)", "signatureAfterChange": "     private boolean isExempt(String classOrStaticMember)", "diff": ["-    private boolean isExempt(String aClassOrStaticMember)", "+    private boolean isExempt(String classOrStaticMember)", "-        for (String exclude : mExcludes) {", "-            if (aClassOrStaticMember.equals(exclude)) {", "+        for (String exclude : excludes) {", "+            if (classOrStaticMember.equals(exclude)) {", "-                if (aClassOrStaticMember.startsWith(excludeMinusDotStar)) {", "+                if (classOrStaticMember.startsWith(excludeMinusDotStar)) {", "-                        aClassOrStaticMember.substring(", "+                        classOrStaticMember.substring("]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9d8658c680c9f8aa3665abca4e4d0ba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkFirstSentence(final DetailAST aAST, TextBlock aComment)", "signatureAfterChange": "     private void checkFirstSentence(final DetailAST ast, TextBlock comment)", "diff": ["-    private void checkFirstSentence(final DetailAST aAST, TextBlock aComment)", "+    private void checkFirstSentence(final DetailAST ast, TextBlock comment)", "-        final String commentText = getCommentText(aComment.getText());", "+        final String commentText = getCommentText(comment.getText());", "-            && JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)))", "+            && JavadocTagInfo.INHERIT_DOC.isValidOn(ast)))", "-            log(aComment.getStartLineNo(), \"javadoc.noperiod\");", "+            log(comment.getStartLineNo(), \"javadoc.noperiod\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea56be303b7cad255649a8bf68f49095", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     PkgControl(final String aPkgName)", "signatureAfterChange": "     PkgControl(final String pkgName)", "diff": ["-    PkgControl(final String aPkgName)", "+    PkgControl(final String pkgName)", "-        assert aPkgName != null;", "-        mParent = null;", "-        mFullPackage = aPkgName;", "+        assert pkgName != null;", "+        parent = null;", "+        fullPackage = pkgName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea7b2ed9dbd329e58deae6f23cb21c42", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private static void trimTail(StringBuilder builder)", "signatureAfterChange": "     private static void trimTail(StringBuilder builder)", "diff": ["-        int i = builder.length() - 1;", "+        int index = builder.length() - 1;", "-            if (Character.isWhitespace(builder.charAt(i))) {", "-                builder.deleteCharAt(i);", "+            if (Character.isWhitespace(builder.charAt(index))) {", "+                builder.deleteCharAt(index);", "-            else if (builder.charAt(i) == '/'", "-                    && builder.charAt(i - 1) == '*') {", "-                builder.deleteCharAt(i);", "-                builder.deleteCharAt(i - 1);", "-                i--;", "-                while (builder.charAt(i - 1) == '*') {", "-                    builder.deleteCharAt(i - 1);", "-                    i--;", "+            else if (builder.charAt(index) == '/'", "+                    && builder.charAt(index - 1) == '*') {", "+                builder.deleteCharAt(index);", "+                builder.deleteCharAt(index - 1);", "+                index--;", "+                while (builder.charAt(index - 1) == '*') {", "+                    builder.deleteCharAt(index - 1);", "+                    index--;", "-            i--;", "+            index--;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eadb4b03386e29254b89dd85690b0c38", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkUnclosedTags(FastStack<HtmlTag> aHtmlStack, String aToken)", "signatureAfterChange": "     private void checkUnclosedTags(FastStack<HtmlTag> htmlStack, String token)", "diff": ["-    private void checkUnclosedTags(FastStack<HtmlTag> aHtmlStack, String aToken)", "+    private void checkUnclosedTags(FastStack<HtmlTag> htmlStack, String token)", "-        HtmlTag lastOpenTag = aHtmlStack.pop();", "-        while (!aToken.equalsIgnoreCase(lastOpenTag.getId())) {", "+        HtmlTag lastOpenTag = htmlStack.pop();", "+        while (!token.equalsIgnoreCase(lastOpenTag.getId())) {", "-                lastOpenTag = aHtmlStack.pop();", "+                lastOpenTag = htmlStack.pop();", "-                lastOpenTag = aHtmlStack.pop();", "+                lastOpenTag = htmlStack.pop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec603334d4d160b0e5a9e429588e6fa2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST)", "+    public void beginTree(DetailAST rootAST)", "-        mPackage = FullIdent.createFullIdent(null);", "-        mCurrentClass = null;", "-        mClassDepth = 0;", "+        packageName = FullIdent.createFullIdent(null);", "+        currentClass = null;", "+        classDepth = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec88b0538f302544282d8078f6c41f85", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-    public void finishTree(DetailAST aRootAST)", "+    public void finishTree(DetailAST rootAST)", "-        for (final FullIdent imp : mImports) {", "-            if (!mReferenced.contains(Utils.baseClassname(imp.getText()))) {", "+        for (final FullIdent imp : imports) {", "+            if (!referenced.contains(Utils.baseClassname(imp.getText()))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec8af1eb30864cce1ac1bf032aff3a28", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private AccessResult localCheckAccess(final String aForImport,         final String aInPkg)", "signatureAfterChange": "     private AccessResult localCheckAccess(final String forImport,         final String inPkg)", "diff": ["-    private AccessResult localCheckAccess(final String aForImport,", "-        final String aInPkg)", "+    private AccessResult localCheckAccess(final String forImport,", "+        final String inPkg)", "-        for (Guard g : mGuards) {", "+        for (Guard g : guards) {", "-            if (g.isLocalOnly() && !mFullPackage.equals(aInPkg)) {", "+            if (g.isLocalOnly() && !fullPackage.equals(inPkg)) {", "-            final AccessResult result = g.verifyImport(aForImport);", "+            final AccessResult result = g.verifyImport(forImport);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecbf901fe4a30e2a4bb2b76f391ac4c7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void add(HtmlTag aTag)", "signatureAfterChange": "     private void add(HtmlTag tag)", "diff": ["-    private void add(HtmlTag aTag)", "+    private void add(HtmlTag tag)", "-        mTags.add(aTag);", "+        tags.add(tag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed32ab04e2410ff39bc5f519022b21c0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void visitMethodDef(DetailAST aAST)", "signatureAfterChange": "     private void visitMethodDef(DetailAST ast)", "diff": ["-    private void visitMethodDef(DetailAST aAST)", "+    private void visitMethodDef(DetailAST ast)", "-        mContextStack.push(mContext);", "-        final DetailAST methodNameAST = aAST.findFirstToken(TokenTypes.IDENT);", "-        mContext =", "+        contextStack.push(context);", "+        final DetailAST methodNameAST = ast.findFirstToken(TokenTypes.IDENT);", "+        context ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed3bdb9145cdd43e333429b8223b632b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheck.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        mDetector.processLines(FileText.fromLines(aFile, aLines));", "+        detector.processLines(FileText.fromLines(file, lines));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee5094fe95975276a82ee28f77887aca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     static void remove(Component c, boolean recursive)", "signatureAfterChange": "     static void remove(Component component, boolean recursive)", "diff": ["-    static void remove(Component c, boolean recursive) {", "-        c.setDropTarget(null);", "-        if (recursive && c instanceof Container) {", "-            final Component[] comps = ((Container) c).getComponents();", "+    static void remove(Component component, boolean recursive) {", "+        component.setDropTarget(null);", "+        if (recursive && component instanceof Container) {", "+            final Component[] comps = ((Container) component).getComponents();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeaf96381c909e0d1d8975e62521af27", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java", "commitBeforeChange": "1e0de782f6702931937795d276f73ca774a3be96", "commitAfterChange": "92182aea44f5f6323673fcda29749379f6ca39f8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testIncorrect() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrect() throws Exception", "diff": ["-        String msg_first_sentence = getCheckMessage(SummaryJavadocCheck.class, \"summary.first.sentence\");", "-        String msg_forbidden_fragment = getCheckMessage(SummaryJavadocCheck.class, \"summary.javaDoc\");", "+        String msgFirstSentence = getCheckMessage(SummaryJavadocCheck.class, \"summary.first.sentence\");", "+        String msgForbiddenFragment = getCheckMessage(SummaryJavadocCheck.class, \"summary.javaDoc\");", "-            \"14: \" + msg_first_sentence,", "-            \"37: \" + msg_first_sentence,", "-            \"47: \" + msg_forbidden_fragment,", "-            \"58: \" + msg_forbidden_fragment,", "-            \"69: \" + msg_first_sentence,", "-            \"83: \" + msg_forbidden_fragment,", "-            \"103: \" + msg_first_sentence,", "+            \"14: \" + msgFirstSentence,", "+            \"37: \" + msgFirstSentence,", "+            \"47: \" + msgForbiddenFragment,", "+            \"58: \" + msgForbiddenFragment,", "+            \"69: \" + msgFirstSentence,", "+            \"83: \" + msgForbiddenFragment,", "+            \"103: \" + msgFirstSentence,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeb07b7fdd6b9aa979d80435b862efd8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean isEmptyType(DetailAST aAST, int aParentType)", "signatureAfterChange": "     private boolean isEmptyType(DetailAST ast, int parentType)", "diff": ["-    private boolean isEmptyType(DetailAST aAST, int aParentType)", "+    private boolean isEmptyType(DetailAST ast, int parentType)", "-        final int type = aAST.getType();", "+        final int type = ast.getType();", "-                && aParentType == TokenTypes.OBJBLOCK)", "+                && parentType == TokenTypes.OBJBLOCK)", "-            final DetailAST typeNode = aAST.getParent().getParent();", "+            final DetailAST typeNode = ast.getParent().getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeda5ea90d85f5559f46f91080bc0721", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (isInIgnoreOccurrenceContext(aAST)) {", "+        if (isInIgnoreOccurrenceContext(ast)) {", "-        final String currentString = aAST.getText();", "-        if ((mPattern == null) || !mPattern.matcher(currentString).find()) {", "-            List<StringInfo> hitList = mStringMap.get(currentString);", "+        final String currentString = ast.getText();", "+        if ((pattern == null) || !pattern.matcher(currentString).find()) {", "+            List<StringInfo> hitList = stringMap.get(currentString);", "-                mStringMap.put(currentString, hitList);", "+                stringMap.put(currentString, hitList);", "-            final int line = aAST.getLineNo();", "-            final int col = aAST.getColumnNo();", "+            final int line = ast.getLineNo();", "+            final int col = ast.getColumnNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f01e519a312672097963f0cc02e47ed6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "         public void setType(FormatterType aType)", "signatureAfterChange": "         public void setType(FormatterType type)", "diff": ["-        public void setType(FormatterType aType)", "+        public void setType(FormatterType type)", "-            final String val = aType.getValue();", "+            final String val = type.getValue();", "-            mFormatterType = aType;", "+            formatterType = type;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f01ff60ba18b2e8a7de1ed80e4b757f8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/comments/CompareTreesWithComments.java", "commitBeforeChange": "4b95f33697750ed910d59830fc9c649f094d88f8", "commitAfterChange": "879864502bd28685569417780ebc92308038cf2c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void beginTree(DetailAST rootAST)", "diff": ["-    public void beginTree(DetailAST aRootAST) {", "-        Assert.assertTrue(isAstEquals(expectedTree, aRootAST));", "+    public void beginTree(DetailAST rootAST) {", "+        Assert.assertTrue(isAstEquals(expectedTree, rootAST));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0234e6b835a56944fb5167517f7963d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Class<?> resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "signatureAfterChange": "     public Class<?> resolve(String name, String currentClass)         throws ClassNotFoundException", "diff": ["-    public Class<?> resolve(String aName, String aCurrentClass)", "+    public Class<?> resolve(String name, String currentClass)", "-        Class<?> clazz = resolveQualifiedName(aName);", "+        Class<?> clazz = resolveQualifiedName(name);", "-        for (String imp : mImports) {", "+        for (String imp : imports) {", "-            if (imp.endsWith(\".\" + aName)) {", "+            if (imp.endsWith(\".\" + name)) {", "-        if (!\"\".equals(mPkg)) {", "-            clazz = resolveQualifiedName(mPkg + \".\" + aName);", "+        if (!\"\".equals(pkg)) {", "+            clazz = resolveQualifiedName(pkg + \".\" + name);", "-        if (!\"\".equals(aCurrentClass)) {", "-            final String innerClass = (!\"\".equals(mPkg) ? (mPkg + \".\") : \"\")", "-                + aCurrentClass + \"$\" + aName;", "+        if (!\"\".equals(currentClass)) {", "+            final String innerClass = (!\"\".equals(pkg) ? (pkg + \".\") : \"\")", "+                + currentClass + \"$\" + name;", "-        for (String imp : mImports) {", "+        for (String imp : imports) {", "-                    + aName;", "+                    + name;", "-        return safeLoad(aName);", "+        return safeLoad(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f110c861c0c7d34bcb354670c79ad870", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void visitMethodDef(DetailAST aMethod)", "signatureAfterChange": "     private void visitMethodDef(DetailAST method)", "diff": ["-    private void visitMethodDef(DetailAST aMethod)", "+    private void visitMethodDef(DetailAST method)", "-        if (mClassDepth != 1) {", "+        if (classDepth != 1) {", "-            && checkName(aMethod)", "-            && checkModifiers(aMethod)", "-            && checkType(aMethod)", "-            && checkParams(aMethod))", "+            && checkName(method)", "+            && checkModifiers(method)", "+            && checkType(method)", "+            && checkParams(method))", "-            log(aMethod.getLineNo(), \"uncommented.main\");", "+            log(method.getLineNo(), \"uncommented.main\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f176ef0c8f85d725ce1d964681f19db1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheck.java", "commitBeforeChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "commitAfterChange": "29027109bf962f47b6a6000fdca69b5679ce4b43", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected boolean isMatch(int aLineNumber, String aLine)", "signatureAfterChange": "     protected boolean isMatch(int lineNumber, String line)", "diff": ["-    protected boolean isMatch(int aLineNumber, String aLine)", "+    protected boolean isMatch(int lineNumber, String line)", "-        return isIgnoreLine(aLineNumber + 1)", "-            || getHeaderLines().get(aLineNumber).equals(aLine);", "+        return isIgnoreLine(lineNumber + 1)", "+            || getHeaderLines().get(lineNumber).equals(line);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f19d6e4c053f6451fc197e7637320091", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean isCorrectLocation(DetailAST aAnnotation, boolean aHasParams)", "signatureAfterChange": "     private boolean isCorrectLocation(DetailAST annotation, boolean hasParams)", "diff": ["-    private boolean isCorrectLocation(DetailAST aAnnotation, boolean aHasParams)", "+    private boolean isCorrectLocation(DetailAST annotation, boolean hasParams)", "-        final boolean allowingCondition = aHasParams ? mAllowSamelineParametrizedAnnotation", "-            : mAllowSamelineSingleParameterlessAnnotation;", "-        return allowingCondition && !hasNodeBefore(aAnnotation)", "-            || !allowingCondition && !hasNodeBeside(aAnnotation)", "-            || mAllowSamelineMultipleAnnotations;", "+        final boolean allowingCondition = hasParams ? allowSamelineParametrizedAnnotation", "+            : allowSamelineSingleParameterlessAnnotation;", "+        return allowingCondition && !hasNodeBefore(annotation)", "+            || !allowingCondition && !hasNodeBeside(annotation)", "+            || allowSamelineMultipleAnnotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1c22fb19a8072eba49439cdcdc6ddb7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/Scope.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean isIn(Scope aScope)", "signatureAfterChange": "     public boolean isIn(Scope scope)", "diff": ["-    public boolean isIn(Scope aScope)", "+    public boolean isIn(Scope scope)", "-        return (compareTo(aScope) <= 0);", "+        return (compareTo(scope) <= 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2927409892ad52f9ed7d729f2b4b6a3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "b718cf1eceb743add0b4bed27a6fa353033e01f8", "commitAfterChange": "52fc35e8b6f0b710409d20192661199a20ece339", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void configure(Configuration aConfiguration)             throws CheckstyleException", "signatureAfterChange": "     public void configure(Configuration aConfig)             throws CheckstyleException", "diff": ["-    public void configure(Configuration aConfiguration)", "+    public void configure(Configuration aConfig)", "-        super.configure(aConfiguration);", "+        super.configure(aConfig);", "-        final Configuration[] fileSetChecks = aConfiguration.getChildren();", "+        final Configuration[] fileSetChecks = aConfig.getChildren();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f29f31091867a9827eaa11024175fe6d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void leaveForDef(DetailAST aAST)", "signatureAfterChange": "     private void leaveForDef(DetailAST ast)", "diff": ["-    private void leaveForDef(DetailAST aAST)", "+    private void leaveForDef(DetailAST ast)", "-        final DetailAST forInitAST = aAST.findFirstToken(TokenTypes.FOR_INIT);", "+        final DetailAST forInitAST = ast.findFirstToken(TokenTypes.FOR_INIT);", "-                    mCurrentVariables.pop();", "+                    currentVariables.pop();", "-            mCurrentVariables.pop();", "+            currentVariables.pop();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3f431426f1956f3bacddb96dc030d0a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void doVisitToken(FullIdent aIdent, boolean aIsStatic,             boolean aPrevious)", "signatureAfterChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "diff": ["-    private void doVisitToken(FullIdent aIdent, boolean aIsStatic,", "-            boolean aPrevious)", "+    private void doVisitToken(FullIdent ident, boolean isStatic,", "+            boolean previous)", "-        if (aIdent != null) {", "-            final String name = aIdent.getText();", "+        if (ident != null) {", "+            final String name = ident.getText();", "-            final int line = aIdent.getLineNo();", "+            final int line = ident.getLineNo();", "-            if (groupIdx > mLastGroup) {", "-                if (!mBeforeFirstImport && mSeparated) {", "+            if (groupIdx > lastGroup) {", "+                if (!beforeFirstImport && separated) {", "-                    if ((line - mLastImportLine) < 2) {", "+                    if ((line - lastImportLine) < 2) {", "-            else if (groupIdx == mLastGroup) {", "-                doVisitTokenInSameGroup(aIsStatic, aPrevious, name, line);", "+            else if (groupIdx == lastGroup) {", "+                doVisitTokenInSameGroup(isStatic, previous, name, line);", "-            mLastGroup = groupIdx;", "-            mLastImport = name;", "+            lastGroup = groupIdx;", "+            lastImport = name;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51f5fc070bacd843d78c3180f7a8c76", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "commitBeforeChange": "205cbab8af785b1cddb9c4123ff3fa8b63dcbe1c", "commitAfterChange": "4e1f8ef98e9e43d6101a00bdecd040377472f852", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private List getThrows(DetailAST aAST)", "signatureAfterChange": "     private List getThrows(DetailAST aAST)", "diff": ["-                    final FullIdent fi = FullIdent.createFullIdent(child);", "-                    retVal.add(fi);", "+                    final ExceptionInfo ei = ", "+                        new ExceptionInfo(FullIdent.createFullIdent(child));", "+                    retVal.add(ei);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f550defbe372b4b340cc5319fce2c35a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "41044d42b8f21ae00792f101a63101bf87d7fd61", "commitAfterChange": "7a4ec11d123dc0bbf7db943af715d19814d2e332", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected void verify(Configuration aConfig, String aFileName, String[] aExpected,             Integer... aWarnsExpected) throws Exception", "signatureAfterChange": "      protected void verify(Configuration config, String fileName, String[] expected,             Integer... warnsExpected) throws Exception", "diff": ["+    protected void verify(Configuration config, String fileName, String[] expected,", "+            Integer... warnsExpected) throws Exception {", "+        verify(createChecker(config),", "+                new File[] {new File(fileName)},", "+                fileName, expected, warnsExpected);", "-    protected void verify(Configuration aConfig, String aFileName, String[] aExpected,", "-            Integer... aWarnsExpected) throws Exception {", "-        verify(createChecker(aConfig), aFileName, aFileName, aExpected, aWarnsExpected);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f57118df8e1c5e065e29930c10fd363d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/FileLengthCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        if (aLines.size() > mMaxFileLength) {", "-            log(1, \"maxLen.file\", aLines.size(), mMaxFileLength);", "+        if (lines.size() > maxFileLength) {", "+            log(1, \"maxLen.file\", lines.size(), maxFileLength);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f686fef21208f1d782f5f47d180b1c95", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private String getDisallowedAbbreviation(String aString)", "signatureAfterChange": "     private String getDisallowedAbbreviation(String string)", "diff": ["-    private String getDisallowedAbbreviation(String aString)", "+    private String getDisallowedAbbreviation(String string)", "-        for (int index = 0; index < aString.length(); index++) {", "-            final char symbol = aString.charAt(index);", "+        for (int index = 0; index < string.length(); index++) {", "+            final char symbol = string.charAt(index);", "-                    if (abbrLength > mAllowedAbbreviationLength) {", "-                        result = aString.substring(beginIndex, endIndex);", "-                        if (!mAllowedAbbreviations.contains(result)) {", "+                    if (abbrLength > allowedAbbreviationLength) {", "+                        result = string.substring(beginIndex, endIndex);", "+                        if (!allowedAbbreviations.contains(result)) {", "-            final int endIndex = aString.length();", "+            final int endIndex = string.length();", "-            if (abbrLength > 1 && abbrLength > mAllowedAbbreviationLength) {", "-                result = aString.substring(beginIndex, endIndex);", "-                if (mAllowedAbbreviations.contains(result)) {", "+            if (abbrLength > 1 && abbrLength > allowedAbbreviationLength) {", "+                result = string.substring(beginIndex, endIndex);", "+                if (allowedAbbreviations.contains(result)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7975f23d0f5a9cef4fcce80a61c05bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "         @Override         public Component getTableCellEditorComponent(JTable table,                 Object value,                 boolean isSelected,                 int r, int c)", "signatureAfterChange": "         @Override         public Component getTableCellEditorComponent(JTable table,                 Object value,                 boolean isSelected,                 int row, int column)", "diff": ["-                int r, int c) {", "+                int row, int column) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8e1b35cff584039a87fdaf33fd2620f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void checkHtml(final DetailAST aAST, final TextBlock aComment)", "signatureAfterChange": "     private void checkHtml(final DetailAST ast, final TextBlock comment)", "diff": ["-    private void checkHtml(final DetailAST aAST, final TextBlock aComment)", "+    private void checkHtml(final DetailAST ast, final TextBlock comment)", "-        final int lineno = aComment.getStartLineNo();", "+        final int lineno = comment.getStartLineNo();", "-        final String[] text = aComment.getText();", "+        final String[] text = comment.getText();", "-            CheckUtils.getTypeParameterNames(aAST);", "+            CheckUtils.getTypeParameterNames(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f94252ccd15565b53c25c36f7a0d4572", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultConfiguration.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void addAttribute(String aName, String aValue)", "signatureAfterChange": "     public void addAttribute(String name, String value)", "diff": ["-    public void addAttribute(String aName, String aValue)", "+    public void addAttribute(String name, String value)", "-        final String current = mAttributeMap.put(aName, aValue);", "+        final String current = attributeMap.put(name, value);", "-            mAttributeMap.put(aName, aValue);", "+            attributeMap.put(name, value);", "-            mAttributeMap.put(aName, current + \",\" + aValue);", "+            attributeMap.put(name, current + \",\" + value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9951503f554694379f0ac24446b78f9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitJavadocToken(DetailNode aAst)", "signatureAfterChange": "      @Override     public void visitJavadocToken(DetailNode ast)", "diff": ["-    public void visitJavadocToken(DetailNode aAst)", "+    public void visitJavadocToken(DetailNode ast)", "-        if (aAst.getType() == JavadocTokenTypes.NEWLINE && isEmptyLine(aAst)) {", "-            checkEmptyLine(aAst);", "+        if (ast.getType() == JavadocTokenTypes.NEWLINE && isEmptyLine(ast)) {", "+            checkEmptyLine(ast);", "-        else if (aAst.getType() == JavadocTokenTypes.HTML_ELEMENT", "-                && JavadocUtils.getFirstChild(aAst).getType() == JavadocTokenTypes.P_TAG_OPEN)", "+        else if (ast.getType() == JavadocTokenTypes.HTML_ELEMENT", "+                && JavadocUtils.getFirstChild(ast).getType() == JavadocTokenTypes.P_TAG_OPEN)", "-            checkParagraphTag(aAst);", "+            checkParagraphTag(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa610219e57d15b352c6476a4187d793", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      protected void verify(Checker aC, String aFileName, String[] aExpected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker c, String fileName, String[] expected)             throws Exception", "diff": ["-    protected void verify(Checker aC, String aFileName, String[] aExpected)", "+    protected void verify(Checker c, String fileName, String[] expected)", "-        verify(aC, aFileName, aFileName, aExpected);", "+        verify(c, fileName, fileName, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa66c1f00d712d79b69dd8cca7c96d24", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private void checkSingleLine(int aLineNum, int aColNum,         IndentLevel aIndentLevel, boolean aMustMatch)", "signatureAfterChange": "      private void checkSingleLine(int lineNum, int colNum,         IndentLevel indentLevel, boolean mustMatch)", "diff": ["-    private void checkSingleLine(int aLineNum, int aColNum,", "-        IndentLevel aIndentLevel, boolean aMustMatch)", "+    private void checkSingleLine(int lineNum, int colNum,", "+        IndentLevel indentLevel, boolean mustMatch)", "-        final String line = mIndentCheck.getLine(aLineNum - 1);", "+        final String line = indentCheck.getLine(lineNum - 1);", "-        if (aMustMatch ? !aIndentLevel.accept(start)", "-            : (aColNum == start) && aIndentLevel.gt(start))", "+        if (mustMatch ? !indentLevel.accept(start)", "+            : (colNum == start) && indentLevel.gt(start))", "-            logChildError(aLineNum, start, aIndentLevel);", "+            logChildError(lineNum, start, indentLevel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc4155a0bd768d2ad2d1f5ec5b33cf09", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "3852e12bece8c5770ed1ddd7c002ef9b4e5d175b", "commitAfterChange": "d86329ca8fe253b7b830b77595944d99a7ed4cfd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean whitespaceBetween(int fromIndex, int toIndex, String aLine)", "signatureAfterChange": "     private static boolean whitespaceBetween(         int aFromIndex, int aToIndex, String aLine)", "diff": ["-    private static boolean whitespaceBetween(int fromIndex, int toIndex, String aLine)", "+    private static boolean whitespaceBetween(", "+        int aFromIndex, int aToIndex, String aLine)", "-        for (int i = fromIndex; i < toIndex; i++)", "-        {", "-            if (!Character.isWhitespace(aLine.charAt(i)))", "-            {", "+        for (int i = aFromIndex; i < aToIndex; i++) {", "+            if (!Character.isWhitespace(aLine.charAt(i))) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcc3166237b7a73ee18d740dd5578bc5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void setFile(File aFile)", "signatureAfterChange": "     public void setFile(File file)", "diff": ["-    /** @param aFile the file to be checked */", "-    public void setFile(File aFile)", "+    /** @param file the file to be checked */", "+    public void setFile(File file)", "-        mFileName = aFile.getAbsolutePath();", "+        fileName = file.getAbsolutePath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcf5ddfc7f3779604b1919e04be7a888", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public static DetailAST parse(FileContents aContents)         throws RecognitionException, TokenStreamException", "signatureAfterChange": "     public static DetailAST parse(FileContents contents)         throws RecognitionException, TokenStreamException", "diff": ["-    public static DetailAST parse(FileContents aContents)", "+    public static DetailAST parse(FileContents contents)", "-        final String fullText = aContents.getText().getFullText().toString();", "+        final String fullText = contents.getText().getFullText().toString();", "-        lexer.setFilename(aContents.getFilename());", "-        lexer.setCommentListener(aContents);", "+        lexer.setFilename(contents.getFilename());", "+        lexer.setCommentListener(contents);", "-        parser.setFilename(aContents.getFilename());", "+        parser.setFilename(contents.getFilename());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd0eb47ad153f60fe1e3b088a58e948a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "ca7f7f855630cbc816e47637ef36ae433d0e745f", "commitAfterChange": "5f5142b2325051f9ed31130167c73d154d547211", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public static String encode(String value)", "signatureAfterChange": "     public static String encode(String value)", "diff": ["-            final char c = value.charAt(i);", "-            switch (c) {", "+            final char chr = value.charAt(i);", "+            switch (chr) {", "-                    sb.append(c);", "+                    sb.append(chr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd9c6c3776119ada9795c5ab8ceb957b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AnnotationUtility.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public static DetailAST getAnnotation(final DetailAST aAST,         String aAnnotation)", "signatureAfterChange": "     public static DetailAST getAnnotation(final DetailAST ast,         String annotation)", "diff": ["-    public static DetailAST getAnnotation(final DetailAST aAST,", "-        String aAnnotation)", "+    public static DetailAST getAnnotation(final DetailAST ast,", "+        String annotation)", "-        if (aAST == null) {", "-            throw new NullPointerException(\"the aAST is null\");", "+        if (ast == null) {", "+            throw new NullPointerException(\"the ast is null\");", "-        if (aAnnotation == null) {", "-            throw new NullPointerException(\"the aAnnotation is null\");", "+        if (annotation == null) {", "+            throw new NullPointerException(\"the annotation is null\");", "-        if (aAnnotation.trim().length() == 0) {", "-            throw new IllegalArgumentException(\"the aAnnotation\"", "+        if (annotation.trim().length() == 0) {", "+            throw new IllegalArgumentException(\"the annotation\"", "-        final DetailAST holder = AnnotationUtility.getAnnotationHolder(aAST);", "+        final DetailAST holder = AnnotationUtility.getAnnotationHolder(ast);", "-                final String aName =", "+                final String name =", "-                if (aAnnotation.equals(aName)) {", "+                if (annotation.equals(name)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdb2254b37e3cedc30d4ef6c165c859f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalThrowsCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean isIgnorableMethod(DetailAST aMethodDef)", "signatureAfterChange": "     private boolean isIgnorableMethod(DetailAST methodDef)", "diff": ["-    private boolean isIgnorableMethod(DetailAST aMethodDef)", "+    private boolean isIgnorableMethod(DetailAST methodDef)", "-        return shouldIgnoreMethod(aMethodDef.findFirstToken(TokenTypes.IDENT).getText())", "-            || mIgnoreOverridenMethods", "-               && (AnnotationUtility.containsAnnotation(aMethodDef, \"Override\")", "-                  || AnnotationUtility.containsAnnotation(aMethodDef, \"java.lang.Override\"));", "+        return shouldIgnoreMethod(methodDef.findFirstToken(TokenTypes.IDENT).getText())", "+            || ignoreOverridenMethods", "+               && (AnnotationUtility.containsAnnotation(methodDef, \"Override\")", "+                  || AnnotationUtility.containsAnnotation(methodDef, \"java.lang.Override\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdc5d95b3470d0fadb81de5a3a60b00e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void visitClassDef(DetailAST aClass)", "signatureAfterChange": "     private void visitClassDef(DetailAST classDef)", "diff": ["-    private void visitClassDef(DetailAST aClass)", "+    private void visitClassDef(DetailAST classDef)", "-        if (mClassDepth == 0) {", "-            final DetailAST ident = aClass.findFirstToken(TokenTypes.IDENT);", "-            mCurrentClass = mPackage.getText() + \".\" + ident.getText();", "-            mClassDepth++;", "+        if (classDepth == 0) {", "+            final DetailAST ident = classDef.findFirstToken(TokenTypes.IDENT);", "+            currentClass = packageName.getText() + \".\" + ident.getText();", "+            classDepth++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe36f25c67ff3eed02c4c53a8c478f72", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "5e0f360e7b7745a362bd7a655e98654a2ad36443", "commitAfterChange": "3813f1ccbf157f463c041ccfc462399845ddff6e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void logIoException(IOException ex, File file)", "signatureAfterChange": "     private void logIoException(IOException exception, File file)", "diff": ["-    private void logIoException(IOException ex, File file) {", "+    private void logIoException(IOException exception, File file) {", "-        if (!(ex instanceof FileNotFoundException)) {", "-            args = new String[] {ex.getMessage()};", "+        if (!(exception instanceof FileNotFoundException)) {", "+            args = new String[] {exception.getMessage()};", "-        LOG.debug(\"IOException occurred.\", ex);", "+        LOG.debug(\"IOException occurred.\", exception);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe5582c7223f17cf053e854be492df71", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static void traverse(File aNode, List<File> aFiles)", "signatureAfterChange": "     private static void traverse(File node, List<File> files)", "diff": ["-    private static void traverse(File aNode, List<File> aFiles)", "+    private static void traverse(File node, List<File> files)", "-        if (aNode.canRead()) {", "-            if (aNode.isDirectory()) {", "-                final File[] nodes = aNode.listFiles();", "+        if (node.canRead()) {", "+            if (node.isDirectory()) {", "+                final File[] nodes = node.listFiles();", "-                    traverse(element, aFiles);", "+                    traverse(element, files);", "-            else if (aNode.isFile()) {", "-                aFiles.add(aNode);", "+            else if (node.isFile()) {", "+                files.add(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feb9b4b99a2ebbbd936f1c6c05e3786f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void addAcceptedIndent(IndentLevel aIndent)", "signatureAfterChange": "     public void addAcceptedIndent(IndentLevel indent)", "diff": ["-    public void addAcceptedIndent(IndentLevel aIndent)", "+    public void addAcceptedIndent(IndentLevel indent)", "-        mLevels.or(aIndent.mLevels);", "+        levels.or(indent.levels);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff9b92d85aace3e60efd7a65e07aac86", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void setReliefPattern(String aPattern)", "signatureAfterChange": "     public void setReliefPattern(String pattern)", "diff": ["-    public void setReliefPattern(String aPattern)", "+    public void setReliefPattern(String pattern)", "-        mReliefPattern = aPattern;", "+        reliefPattern = pattern;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffffe093e916667677285cf1a2660b51", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean hasRedundantWhitespace(String aLine, int aAfter)", "signatureAfterChange": "     private boolean hasRedundantWhitespace(String line, int after)", "diff": ["-    private boolean hasRedundantWhitespace(String aLine, int aAfter)", "+    private boolean hasRedundantWhitespace(String line, int after)", "-        boolean result = !mAllowLineBreaks;", "-        for (int i = aAfter + 1; !result && (i < aLine.length()); i++) {", "-            if (!Character.isWhitespace(aLine.charAt(i))) {", "+        boolean result = !allowLineBreaks;", "+        for (int i = after + 1; !result && (i < line.length()); i++) {", "+            if (!Character.isWhitespace(line.charAt(i))) {"]}]}
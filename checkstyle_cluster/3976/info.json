{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87559c8ec46aee1b7c40efb0d2eacfc1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "728cb3d59b23685c4f8ea109d0bd8742", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testLastCaseGroup() throws Exception", "signatureAfterChange": "      @Test     public void testLastCaseGroup() throws Exception", "diff": ["-            \"14:13: Fall through from previous branch of the switch statement.\",", "-            \"38:13: Fall through from previous branch of the switch statement.\",", "-            \"53:13: Fall through from previous branch of the switch statement.\",", "-            \"70:13: Fall through from previous branch of the switch statement.\",", "-            \"87:13: Fall through from previous branch of the switch statement.\",", "-            \"105:13: Fall through from previous branch of the switch statement.\",", "-            \"123:13: Fall through from previous branch of the switch statement.\",", "-            \"123:13: Fall through from the last branch of the switch statement.\",", "-            \"369:11: Fall through from previous branch of the switch statement.\",", "-            \"372:11: Fall through from previous branch of the switch statement.\",", "-            \"374:40: Fall through from previous branch of the switch statement.\",", "-            \"376:11: Fall through from the last branch of the switch statement.\",", "+            \"14:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"38:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"53:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"70:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"87:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"105:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"123:13: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"123:13: \" + getCheckMessage(MSG_FALL_THROUGH_LAST),", "+            \"369:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"372:11: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"374:40: \" + getCheckMessage(MSG_FALL_THROUGH),", "+            \"376:11: \" + getCheckMessage(MSG_FALL_THROUGH_LAST),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea069b765034b48b3e71bc1e834cc224", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testEqualsWithoutEqualsIgnoreCase() throws Exception", "signatureAfterChange": "      @Test     public void testEqualsWithoutEqualsIgnoreCase() throws Exception", "diff": ["-            \"18:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"20:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"22:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"24:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"26:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"28:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"57:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"59:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"61:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"63:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"65:17: String literal expressions should be on the left side of an equals comparison.\",", "-            \"67:17: String literal expressions should be on the left side of an equals comparison.\",", "+            \"18:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"20:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"22:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"24:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"26:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"28:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"57:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"59:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"61:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"63:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"65:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),", "+            \"67:17: \" + getCheckMessage(MSG_EQUALS_AVOID_NULL),"]}]}
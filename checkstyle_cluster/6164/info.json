{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef3822b99f4177422277eebc038a9d84", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1096270515e492545a1104a8412d5398", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "42d34c7e16ebc69b0a33febb73c9fa318351e212", "commitAfterChange": "72be23f288369fdd9e562999bb9b0e2ff646c897", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkComment(DetailAST aAST, TextBlock aComment)", "signatureAfterChange": "     private void checkComment(DetailAST aAST, TextBlock aComment)", "diff": ["-        // Check for only one @see tag", "-        if ((tags.size() != 1)", "-            || !((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())", "-        {", "-            checkParamTags(tags, getParameters(aAST));", "-            checkThrowsTags(tags, getThrows(aAST));", "-            if (isFunction(aAST)) {", "-                checkReturnTag(tags, aAST.getLineNo());", "-            }", "-            // Dump out all unused tags", "-            final Iterator it = tags.iterator();", "-            while (it.hasNext()) {", "-                final JavadocTag jt = (JavadocTag) it.next();", "-                if (!jt.isSeeOrInheritDocTag()) {", "-                    log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");", "-                }", "+        // Check for only one @see or inheritDoc tag", "+        if ((tags.size() == 1)", "+            && ((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())", "+        {", "+            return;", "+        }", "+", "+        // Check for inheritDoc", "+        boolean hasInheritDocTag = false;", "+        Iterator it = tags.iterator();", "+        while (it.hasNext() && !hasInheritDocTag) {", "+            hasInheritDocTag |=", "+                ((JavadocTag) it.next()).isInheritDocTag();", "+        }", "+", "+        checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);", "+        checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);", "+        if (isFunction(aAST)) {", "+            checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);", "+        }", "+", "+        // Dump out all unused tags", "+        it = tags.iterator();", "+        while (it.hasNext()) {", "+            final JavadocTag jt = (JavadocTag) it.next();", "+            if (!jt.isSeeOrInheritDocTag()) {", "+                log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24a83a036840bdcede2766378f391e16", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "commitBeforeChange": "d740f2e1cdb05f20a48bf7d5dcebdcd0faae6ddd", "commitAfterChange": "3ef918920c58c550169ccef3cfe1706aede11a6e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      @Override     public void execute()", "signatureAfterChange": "      @Override     public void execute()", "diff": ["-            realExecute();", "+            // output version info in debug mode", "+            final ResourceBundle compilationProperties = ResourceBundle", "+                    .getBundle(\"checkstylecompilation\");", "+            final String version = compilationProperties", "+                    .getString(\"checkstyle.compile.version\");", "+            final String compileTimestamp = compilationProperties", "+                    .getString(\"checkstyle.compile.timestamp\");", "+            log(\"checkstyle version \" + version, Project.MSG_VERBOSE);", "+            log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);", "+", "+            // Check for no arguments", "+            if (fileName == null && fileSets.isEmpty()) {", "+                throw new BuildException(", "+                        \"Must specify at least one of 'file' or nested 'fileset'.\",", "+                        getLocation());", "+            }", "+            if (configLocation == null) {", "+                throw new BuildException(\"Must specify 'config'.\", getLocation());", "+            }", "+            realExecute(version);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e3d132ce70959682abcc192f50a47c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "6f6e4db399353f769525820d9a7319287105d3e5", "commitAfterChange": "06c32930c34e2b10b5926883c29a4a20fe6ecf05", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+", "+                List typeParamNames = CheckUtils.getTypeParameterNames(aAST);", "+                if (!mAllowMissingParamTags) {", "+                    //Check type parameters that should exist, do", "+                    for (Iterator typeParamNameIt = typeParamNames.iterator();", "+                         typeParamNameIt.hasNext();) {", "+                        checkTypeParamTag(", "+                            lineNo, tags, (String) typeParamNameIt.next());", "+                    }", "+                }", "+", "+                checkUnusedTypeParamTags(tags, typeParamNames);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30a3f49203a55eaf7c01ffab92ca8b15", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "5b07a9df8af02f337432119e3349344ae13c7065", "commitAfterChange": "e5f09c7fd2b5115bd164a5ed4f0a5e376c2dc2d7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Class resolve(String aName) throws ClassNotFoundException", "signatureAfterChange": "     public Class resolve(String aName) throws ClassNotFoundException", "diff": ["-            if (imp.endsWith(aName) && isLoadable(imp)) {", "-                return safeLoad(imp);", "+            if (imp.endsWith(aName)) {", "+                if (isLoadable(imp)) {", "+                    return safeLoad(imp);", "+                }", "+                // perhaps this is a import for inner class", "+                // let's try load it.", "+                int dot = imp.lastIndexOf(\".\");", "+                if (dot != -1) {", "+                    final String innerName = imp.substring(0, dot) + \"$\"", "+                        + imp.substring(dot + 1);", "+                    if (isLoadable(innerName)) {", "+                        return safeLoad(innerName);", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3da16e0608753ae75637a1641cdb364a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "80da4bb9bad0e9469c0cad8701e5c19edc5adbc5", "commitAfterChange": "ba1663fc94f753cbfec512259a4ab304bdef7e9f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["+        // output version info in debug mode", "+        final ResourceBundle compilationProperties =", "+            ResourceBundle.getBundle(\"checkstylecompilation\");", "+        final String version =", "+            compilationProperties.getString(\"checkstyle.compile.version\");", "+        final String compileTimestamp =", "+            compilationProperties.getString(\"checkstyle.compile.timestamp\");", "+        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);", "+        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a00e73a2b68480dda1f5db308e7869c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "3b5c81da39e0a179d439ac18c880b3d79970037d", "commitAfterChange": "17754d363645285e49bf4323a1af5762af47a8ea", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          @Override         public void startElement(String aNamespaceURI,                                  String aLocalName,                                  String aQName,                                  Attributes aAtts)             throws SAXException", "signatureAfterChange": "          @Override         public void startElement(String aNamespaceURI,                                  String aLocalName,                                  String aQName,                                  Attributes aAtts)             throws SAXException", "diff": ["+            }", "+            else if (aQName.equals(MESSAGE)) {", "+", "+                //extract key and value", "+                final String key = aAtts.getValue(KEY);", "+                final String value = aAtts.getValue(VALUE);", "+", "+                //add to messages of configuration", "+                final DefaultConfiguration top =", "+                    mConfigStack.peek();", "+                top.addMessage(key, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ceaa2716e7613cf9298121135e04243", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/PackageHtmlCheckTest.java", "commitBeforeChange": "5ace8fc09d4e301959a420f0f36de73c84f7a820", "commitAfterChange": "fbbaff4827a55cb5d99b3f334b560b41728a7666", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public void testPackageHtml()          throws Exception", "signatureAfterChange": "      public void testPackageHtml()          throws Exception", "diff": ["-        CheckConfiguration checkConfig = new CheckConfiguration();", "-        // no Checks in config, but register new PackageHtml as a FileSetCheck", "-        Checker c = createChecker(checkConfig);", "-        final FileSetCheck fsc = new PackageHtmlCheck();", "-        c.addFileSetCheck(fsc);", "-", "-        final String packageHtmlPath = getPath(\"package.html\");", "-        final String filepath = getPath(\"InputScopeAnonInner.java\");", "-", "-        final String[] expected = {", "-            \"0: Missing package documentation file.\",", "-        };", "-        verify(c, filepath, packageHtmlPath, expected);", "+//        CheckConfiguration checkConfig = new CheckConfiguration();", "+//        // no Checks in config, but register new PackageHtml as a FileSetCheck", "+//        Checker c = createChecker(checkConfig);", "+//        final FileSetCheck fsc = new PackageHtmlCheck();", "+//        c.addFileSetCheck(fsc);", "+//", "+//        final String packageHtmlPath = getPath(\"package.html\");", "+//        final String filepath = getPath(\"InputScopeAnonInner.java\");", "+//", "+//        final String[] expected = {", "+//            \"0: Missing package documentation file.\",", "+//        };", "+//        verify(c, filepath, packageHtmlPath, expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50d1c485598351feb40b9b71b1d0472", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "6125beffc437f970eae276b4a6542265c6547784", "commitAfterChange": "1ac7fc3f8fc856547085bcc88e17fd1f4bbe0ddd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Class resolve(String aName) throws ClassNotFoundException", "signatureAfterChange": "     public Class resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "diff": ["-    public Class resolve(String aName) throws ClassNotFoundException", "+    public Class resolve(String aName, String aCurrentClass)", "+        throws ClassNotFoundException", "+        }", "+        //Perhaps it's fullyqualified inner class", "+        int dotIdx = aName.lastIndexOf(\".\");", "+        if (dotIdx != -1) {", "+            final String cn = aName.substring(0, dotIdx) + \"$\"", "+                + aName.substring(dotIdx + 1);", "+            if (isLoadable(cn)) {", "+                return safeLoad(cn);", "+            }", "+        //inner class of this class???", "+        if (!\"\".equals(aCurrentClass)) {", "+            final String innerClass = ((mPkg != null) ? (mPkg + \".\") : \"\")", "+                + aCurrentClass + \"$\" + aName;", "+            if (isLoadable(innerClass)) {", "+                return safeLoad(innerClass);", "+            }", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0c8b96ed6a665613ef72797e79a738a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/PackageHtmlCheckTest.java", "commitBeforeChange": "42015d3ea38f6cc41826525d9df6c70c95c92f96", "commitAfterChange": "e09a108f22f244f968194e738fd086243014ea2c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testPackageHtml()          throws Exception", "signatureAfterChange": "      public void testPackageHtml()          throws Exception", "diff": ["-//        CheckConfiguration checkConfig = new CheckConfiguration();", "-//        // no Checks in config, but register new PackageHtml as a FileSetCheck", "-//        Checker c = createChecker(checkConfig);", "-//        final FileSetCheck fsc = new PackageHtmlCheck();", "-//        c.addFileSetCheck(fsc);", "-//", "-//        final String packageHtmlPath = getPath(\"package.html\");", "-//        final String filepath = getPath(\"InputScopeAnonInner.java\");", "-//", "-//        final String[] expected = {", "-//            \"0: Missing package documentation file.\",", "-//        };", "-//        verify(c, filepath, packageHtmlPath, expected);", "+        Configuration checkConfig = createCheckConfig(PackageHtmlCheck.class);", "+        Checker c = createChecker(checkConfig);", "+        final String packageHtmlPath = getPath(\"package.html\");", "+        final String filepath = getPath(\"InputScopeAnonInner.java\");", "+", "+        final String[] expected = {", "+            \"0: Missing package documentation file.\",", "+        };", "+        verify(c, filepath, packageHtmlPath, expected);"]}]}
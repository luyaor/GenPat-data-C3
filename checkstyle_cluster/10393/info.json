{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c87fb1628d1578ef958191d5bd3e98f0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "029b0287e052a51e74d1be37c6a529ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/TypecastParenPadCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.TYPECAST) {", "-            processLeft(aAST);", "+        if (ast.getType() == TokenTypes.TYPECAST) {", "+            processLeft(ast);", "-        else if ((aAST.getParent() != null)", "-                 && (aAST.getParent().getType() == TokenTypes.TYPECAST)", "-                 && (aAST.getParent().findFirstToken(TokenTypes.RPAREN)", "-                     == aAST))", "+        else if ((ast.getParent() != null)", "+                 && (ast.getParent().getType() == TokenTypes.TYPECAST)", "+                 && (ast.getParent().findFirstToken(TokenTypes.RPAREN)", "+                     == ast))", "-            processRight(aAST);", "+            processRight(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9951503f554694379f0ac24446b78f9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParagraphCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitJavadocToken(DetailNode aAst)", "signatureAfterChange": "      @Override     public void visitJavadocToken(DetailNode ast)", "diff": ["-    public void visitJavadocToken(DetailNode aAst)", "+    public void visitJavadocToken(DetailNode ast)", "-        if (aAst.getType() == JavadocTokenTypes.NEWLINE && isEmptyLine(aAst)) {", "-            checkEmptyLine(aAst);", "+        if (ast.getType() == JavadocTokenTypes.NEWLINE && isEmptyLine(ast)) {", "+            checkEmptyLine(ast);", "-        else if (aAst.getType() == JavadocTokenTypes.HTML_ELEMENT", "-                && JavadocUtils.getFirstChild(aAst).getType() == JavadocTokenTypes.P_TAG_OPEN)", "+        else if (ast.getType() == JavadocTokenTypes.HTML_ELEMENT", "+                && JavadocUtils.getFirstChild(ast).getType() == JavadocTokenTypes.P_TAG_OPEN)", "-            checkParagraphTag(aAst);", "+            checkParagraphTag(ast);"]}]}
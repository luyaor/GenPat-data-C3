{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ec8c76a64542b422e7c9eadf4a12aae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a1a66a07c773c5aceeeac7b93ac5a5d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java", "commitBeforeChange": "28c5d6f06244f45a5673a3ef5bd0d927b0042496", "commitAfterChange": "a5d30bf353dde01376d45fb031d9236b11a835d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     AccessResult verify(final String aName)", "signatureAfterChange": "     AccessResult verifyImport(final String aForImport, final String aInPkg)", "diff": ["-    AccessResult verify(final String aName)", "+    AccessResult verifyImport(final String aForImport, final String aInPkg)", "-        assert aName != null;", "-        if (!aName.startsWith(mPkgName + \".\")) {", "-            return AccessResult.UNKNOWN;", "+        assert aForImport != null;", "+        if (mClassName != null) {", "+            final boolean classMatch = mClassName.equals(aForImport);", "+            return calculateResult(classMatch);", "-        return mAllowed ? AccessResult.ALLOWED : AccessResult.DISALLOWED;", "+", "+        // Must be checking a package. First check that we actually match", "+        // the package. Then check if matched and we must be an exact match.", "+        // In this case, the text after the first \".\" must not contain", "+        // another \".\" as this indicates that it is not an exact match.", "+        assert mPkgName != null;", "+        //boolean pkgMatch = aForImport.startsWith(mPkgName + \".\");", "+        boolean pkgMatch = aForImport.startsWith(mPkgName + \".\");", "+        if (pkgMatch && mExactMatch) {", "+            pkgMatch = (aForImport.indexOf('.', (mPkgName.length() + 1)) == -1);", "+        }", "+        return calculateResult(pkgMatch);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad89465870854b1058b1cc5c46b4fe2b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java", "commitBeforeChange": "daf8230919a8ffc9058a7ce129f5c60309739a00", "commitAfterChange": "a0012d03eb6a7ebc42f1986f09a8fe698c09eeb0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        final DetailAST slistAST = aAST.findFirstToken(TokenTypes.SLIST);", "-        if (slistAST != null) {", "+        final DetailAST slistToken = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST leftCurly = slistToken != null", "+                ? slistToken : aAST.findFirstToken(TokenTypes.LCURLY);", "+        if (leftCurly != null) {", "-                if (slistAST.getChildCount() <= 1) {", "-                    log(slistAST.getLineNo(),", "-                        slistAST.getColumnNo(),", "+                boolean emptyBlock;", "+                if (leftCurly.getType() == TokenTypes.LCURLY) {", "+                    emptyBlock = leftCurly.getNextSibling().getType() != TokenTypes.CASE_GROUP;", "+                }", "+                else {", "+                    emptyBlock = leftCurly.getChildCount() <= 1;", "+                }", "+                if (emptyBlock) {", "+                    log(leftCurly.getLineNo(),", "+                        leftCurly.getColumnNo(),", "-                    && !hasText(slistAST))", "+                    && !hasText(leftCurly))", "-                log(slistAST.getLineNo(),", "-                    slistAST.getColumnNo(),", "+                log(leftCurly.getLineNo(),", "+                    leftCurly.getColumnNo(),"]}]}
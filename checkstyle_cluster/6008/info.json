{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe75e4ecaebb82d1f5c7a616a1e4f499", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88a1e23adb340c236caaeca96a343f9a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "bd55b4598158c500333dae2e2194de08a643a3d5", "commitAfterChange": "f8ba0d727928aaa1275758fa09114155faab0b9e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName)", "signatureAfterChange": "     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName)", "diff": ["-        final Set<String> mods = getModifiers(variableDef);", "-        final String variableScope = getVisibilityScope(mods);", "+", "+        final String variableScope = getVisibilityScope(variableDef);", "-            final DetailAST classDef = variableDef.getParent().getParent();", "-            final Set<String> classModifiers = getModifiers(classDef);", "-", "-                mods.contains(\"static\") && mods.contains(\"final\")", "+                isStaticFinalVariable(variableDef)", "-                || \"public\".equals(variableScope)", "-                   && getPublicMemberRegexp().matcher(variableName).find()", "+                || isIgnoredPublicMember(variableName, variableScope)", "-                      && classModifiers.contains(\"final\") && isImmutableField(variableDef);", "+                      && isImmutableFieldDefinedInFinalClass(variableDef);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b30f54ab477718108f82b15988fdefd7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "d734bff020d3525c811a0b273021a5ac5665ade8", "commitAfterChange": "6c11cedd3bc24183534dd10d6442149d267693b5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void collectDeclarations(Deque<LexicalFrame> frameStack,         DetailAST ast)", "signatureAfterChange": "     private void collectDeclarations(Deque<LexicalFrame> frameStack,         DetailAST ast)", "diff": ["-                final String name =", "-                        ast.findFirstToken(TokenTypes.IDENT).getText();", "-                if (frame instanceof ClassFrame) {", "-                    final DetailAST mods =", "-                            ast.findFirstToken(TokenTypes.MODIFIERS);", "-                    if (ScopeUtils.inInterfaceBlock(ast)", "-                            || mods.branchContains(TokenTypes.LITERAL_STATIC)) {", "-                        ((ClassFrame) frame).addStaticMember(name);", "-                    }", "-                    else {", "-                        ((ClassFrame) frame).addInstanceMember(name);", "-                    }", "-                }", "-                else {", "-                    frame.addName(name);", "-                }", "+                collectVariableDeclarations(ast, frame);"]}]}
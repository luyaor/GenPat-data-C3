{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59f8e251c0a03b5c5008c7141eefe824", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5808b9fddf6007607e02908b6bdddea3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "fbbbc950e751fa629d57a5cbe08762999cfc8218", "commitAfterChange": "e030d1463c307836bbb201a202d15e81a41bcb0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+            processInterfaceOrAnnotation(ast);", "+        }", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            processMethods(ast);", "+        }", "+    }", "-", "-                // javac does not allow final or static in interface methods", "-                // order annotation fields hence no need to check that this", "-                // is not a method or annotation field", "-", "-                if (type == TokenTypes.LITERAL_PUBLIC", "-                    || type == TokenTypes.LITERAL_STATIC", "-                            && ast.getType() != TokenTypes.METHOD_DEF", "-                    || type == TokenTypes.ABSTRACT", "-                    || type == TokenTypes.FINAL) {", "-", "-            }", "-        }", "-        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "-            final DetailAST modifiers =", "-                            ast.findFirstToken(TokenTypes.MODIFIERS);", "-            // private method?", "-            boolean checkFinal =", "-                modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);", "-            // declared in a final class?", "-            DetailAST parent = ast.getParent();", "-            while (parent != null) {", "-                if (parent.getType() == TokenTypes.CLASS_DEF) {", "-                    final DetailAST classModifiers =", "-                        parent.findFirstToken(TokenTypes.MODIFIERS);", "-                    checkFinal |=", "-                        classModifiers.branchContains(TokenTypes.FINAL);", "-                    break;", "-                }", "-                parent = parent.getParent();", "-            }", "-            if (checkFinal && !isAnnotatedWithSafeVarargs(ast)) {", "-                DetailAST modifier = modifiers.getFirstChild();", "-                while (modifier != null) {", "-                    final int type = modifier.getType();", "-                    if (type == TokenTypes.FINAL) {", "-                        log(modifier.getLineNo(), modifier.getColumnNo(),", "-                                MSG_KEY, modifier.getText());", "-                        break;", "-                    }", "-                    modifier = modifier.getNextSibling();", "-                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce6470eb09ebe28b160f3c73e5c00b3a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantModifierCheck.java", "commitBeforeChange": "8acc405dd30502bbbcdaf60a75ddd60dfa2b5a50", "commitAfterChange": "3ed2fd68f81f6200362f4babc9595b29f437ddd9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (!ScopeUtils.inInterfaceBlock(aAST)) {", "-            return;", "-        }", "+        if (ScopeUtils.inInterfaceBlock(aAST)) {", "+            final DetailAST modifiers =", "+                aAST.findFirstToken(TokenTypes.MODIFIERS);", "-        DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            DetailAST modifier = (DetailAST) modifiers.getFirstChild();", "+            while (modifier != null) {", "-        DetailAST modifier = (DetailAST) modifiers.getFirstChild();", "-        while (modifier != null) {", "+                // javac does not allow final or static in interface methods", "+                // hence no need to check that this is not a method", "-            // javac does not allow final or static in interface methods", "-            // hence no need to check that this is not a method", "+                final int type = modifier.getType();", "+                if (type == TokenTypes.LITERAL_PUBLIC", "+                    || type == TokenTypes.ABSTRACT", "+                    || type == TokenTypes.LITERAL_STATIC", "+                    || type == TokenTypes.FINAL)", "+                {", "+                    log(modifier.getLineNo(),", "+                        modifier.getColumnNo(),", "+                        \"redundantModifier\",", "+                        new String[] {modifier.getText()});", "+                    break;", "+                }", "-            final int type = modifier.getType();", "-            if (type == TokenTypes.LITERAL_PUBLIC", "-                || type == TokenTypes.ABSTRACT", "-                || type == TokenTypes.LITERAL_STATIC", "-                || type == TokenTypes.FINAL)", "-            {", "-                log(modifier.getLineNo(),", "-                    modifier.getColumnNo(),", "-                    \"redundantModifier\",", "-                    new String[] {modifier.getText()});", "-                break;", "+                modifier = (DetailAST) modifier.getNextSibling();", "-", "-            modifier = (DetailAST) modifier.getNextSibling();", "+        }", "+        else if (aAST.getType() == TokenTypes.METHOD_DEF) {", "+            final DetailAST modifiers =", "+                            aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            // private method?", "+            boolean checkFinal =", "+                modifiers.branchContains(TokenTypes.LITERAL_PRIVATE);", "+            // declared in a final class?", "+            DetailAST parent = aAST.getParent();", "+            while (parent != null) {", "+                if (parent.getType() == TokenTypes.CLASS_DEF) {", "+                    final DetailAST classModifiers =", "+                        parent.findFirstToken(TokenTypes.MODIFIERS);", "+                    checkFinal |=", "+                        classModifiers.branchContains(TokenTypes.FINAL);", "+                    break;", "+                }", "+                parent = parent.getParent();", "+            }", "+            if (checkFinal) {", "+                DetailAST modifier = (DetailAST) modifiers.getFirstChild();", "+                while (modifier != null) {", "+                    final int type = modifier.getType();", "+                    if (type == TokenTypes.FINAL) {", "+                        log(modifier.getLineNo(),", "+                            modifier.getColumnNo(),", "+                            \"redundantModifier\",", "+                            new String[] {modifier.getText()});", "+                        break;", "+                    }", "+                    modifier = (DetailAST) modifier.getNextSibling();", "+                }", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67afa4ceb8f1ff424963e8caa3ca94c6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fba7437b4b9814325c84b19b3eded54", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "e380ac8df92c051d843d380d5e8a6fe90af9df9d", "commitAfterChange": "ab2f93f9bf61816d84154e636d32c81c05854e24", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private static void traverse(File node, List<File> files)", "signatureAfterChange": "     private static List<File> listFiles(File node)", "diff": ["-    private static void traverse(File node, List<File> files)", "+     */", "+    private static List<File> listFiles(File node)", "+    {", "+        // could be replaced with org.apache.commons.io.FileUtils.list() method", "+        // if only we add commons-io library", "+        final List<File> files = Lists.newLinkedList();", "+", "-                final File[] nodes = node.listFiles();", "-                for (File element : nodes) {", "-                    traverse(element, files);", "+                for (File element : node.listFiles()) {", "+                    files.addAll(listFiles(element));", "+        return files;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2a83b8727883a976c13891fe38a94ec", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "e121ec185c0b5feb08da976f07e479070194095d", "commitAfterChange": "93e0187129d7ac919a2a366ad75f5f9f7ed4f553", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static List<File> listFiles(File node)", "signatureAfterChange": "     private static List<File> listFiles(File node)", "diff": ["-        final List<File> files = Lists.newLinkedList();", "+        final List<File> result = Lists.newLinkedList();", "-                for (File element : node.listFiles()) {", "-                    files.addAll(listFiles(element));", "+                final File[] files = node.listFiles();", "+                // listFiles() can return null, so we need to check it", "+                if (files != null) {", "+                    for (File element : files) {", "+                        result.addAll(listFiles(element));", "+                    }", "-                files.add(node);", "+                result.add(node);", "-        return files;", "+        return result;"]}]}
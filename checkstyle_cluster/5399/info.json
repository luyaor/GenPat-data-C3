{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65700fac37430d212731c035bd232e1e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1604931835987958aeae988afbb3bb31", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "897c4164bd289ea45d5c600f11816f4379bd4421", "commitAfterChange": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkTag(             int aLineNo,             String[] aCmt,             String aTag,             RE aTagRE,             RE aFormatRE,             String aFormat)", "signatureAfterChange": "     private void checkTag(int aLineNo, Vector aTags, String aTag,                           RE aFormatRE, String aFormat)", "diff": ["-    private void checkTag(", "-            int aLineNo,", "-            String[] aCmt,", "-            String aTag,", "-            RE aTagRE,", "-            RE aFormatRE,", "-            String aFormat)", "+    private void checkTag(int aLineNo, Vector aTags, String aTag,", "+                          RE aFormatRE, String aFormat)", "-        if (aTagRE == null) {", "+        if (aFormatRE == null) {", "-        for (int i = 0; i < aCmt.length; i++) {", "-            final String s = aCmt[i];", "-            if (aTagRE.match(s)) {", "-                tagCount += 1;", "-                final int contentStart = aTagRE.getParenStart(1);", "-                final String content = s.substring(contentStart);", "-                if (!aFormatRE.match(content)) {", "-                    log(aLineNo, \"type.tagFormat\", aTag, aFormat);", "+        for (int i = aTags.size() - 1; i >= 0; i--) {", "+            final JavadocTag tag = (JavadocTag) aTags.get(i);", "+            if (tag.getTag().equals(aTag)) {", "+                tagCount++;", "+                if (!aFormatRE.match(tag.getArg1())) {", "+                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);", "-", "-            log(aLineNo, \"type.missingTag\", aTag);", "+            log(aLineNo, \"type.missingTag\", \"@\" + aTag);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2f03211b19331974c177dd6da0cec5d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "ea01eaaa85409442aeece8763f0388066bd07bf5", "commitAfterChange": "d4f1261a61913b28d746aeb929bd23f372372a4c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethod(MyModifierSet aMods,                       MyCommonAST aReturnType,                       MethodSignature aSig)", "signatureAfterChange": "     void verifyMethod(MethodSignature aSig)", "diff": ["-    void verifyMethod(MyModifierSet aMods,", "-                      MyCommonAST aReturnType,", "-                      MethodSignature aSig)", "+    void verifyMethod(MethodSignature aSig)", "-        // Calculate line number. Unfortunately aReturnType does not contain a", "-        // valid line number", "-        final int lineNo = (aMods.size() > 0)", "-            ? aMods.getFirstLineNo()", "-            : aSig.getLineNo();", "-", "-        if (aReturnType != null &&", "-            !mConfig.getMethodRegexp().match(aSig.getName())) {", "-            log(lineNo,", "+        if (!aSig.isConstructor() &&", "+            !mConfig.getMethodRegexp().match(aSig.getName()))", "+        {", "+            log(aSig.getLineNo(),", "-        final Scope methodScope =", "-            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "+        final Scope methodScope = inInterfaceBlock()", "+            ? Scope.PUBLIC", "+            : aSig.getModSet().getVisibilityScope();", "-        final boolean isFunction = (aReturnType == null)", "-            ? false", "-            : !\"void\".equals(aReturnType.getText().trim());", "-", "-        final String[] jd = getJavadocBefore(lineNo - 1);", "+        final String[] jd = getJavadocBefore(aSig.getLineNo() - 1);", "-            log(lineNo, \"method is missing a Javadoc comment.\");", "+            log(aSig.getLineNo(), \"method is missing a Javadoc comment.\");", "-            final List tags = getMethodTags(jd, lineNo - 1);", "+            final List tags = getMethodTags(jd, aSig.getLineNo() - 1);", "-                if (isFunction) {", "-                    checkReturnTag(tags, lineNo);", "+                if (aSig.isFunction()) {", "+                    checkReturnTag(tags, aSig.getLineNo());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5619ca769b5ad5e5a21beedddf253a77", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d8a91c5b88a0bc9f18222cf23335210", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/javadoc/ParseTreeBuilder.java", "commitBeforeChange": "65865d1adcf6e1579b7323d56117186db1ad96eb", "commitAfterChange": "b4c351b03d4a9d7dffc9a3502d17a41fb3e440b4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 17, "signatureBeforeChange": "     public static ParseTree treeCustomJavadocTags()", "signatureAfterChange": "      public static ParseTree treeCustomJavadocTags()", "diff": ["-    }", "-    public static ParseTree treeCustomJavadocTags() {", "-        JavadocContext vqeRv = new JavadocContext(null, 0);", "-        CommonToken kUYEj = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, \" *\");", "-        vqeRv.addChild(kUYEj);", "-        CommonToken VOJHC = new CommonToken(JavadocTokenTypes.WS, \" \");", "-        vqeRv.addChild(VOJHC);", "-        JavadocTagContext DYThx = new JavadocTagContext(vqeRv, 0);", "-        CommonToken ctenR = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, \"@myTag\");", "-        DYThx.addChild(ctenR);", "-        CommonToken ObxYB = new CommonToken(JavadocTokenTypes.WS, \" \");", "-        DYThx.addChild(ObxYB);", "-        DescriptionContext WuoxQ = new DescriptionContext(DYThx, 0);", "-        TextContext FaQUX = new TextContext(WuoxQ, 0);", "-        CommonToken fpyzz = new CommonToken(JavadocTokenTypes.CHAR, \"y\");", "-        FaQUX.addChild(fpyzz);", "-        CommonToken lbwtC = new CommonToken(JavadocTokenTypes.CHAR, \"e\");", "-        FaQUX.addChild(lbwtC);", "-        CommonToken xCpJd = new CommonToken(JavadocTokenTypes.CHAR, \"s\");", "-        FaQUX.addChild(xCpJd);", "-        CommonToken OOdfd = new CommonToken(JavadocTokenTypes.WS, \" \");", "-        FaQUX.addChild(OOdfd);", "-        CommonToken jTWwf = new CommonToken(JavadocTokenTypes.CHAR, \"i\");", "-        FaQUX.addChild(jTWwf);", "-        CommonToken tYuft = new CommonToken(JavadocTokenTypes.CHAR, \"t\");", "-        FaQUX.addChild(tYuft);", "-        CommonToken Rjpiw = new CommonToken(JavadocTokenTypes.WS, \" \");", "-        FaQUX.addChild(Rjpiw);", "-        CommonToken eumTC = new CommonToken(JavadocTokenTypes.CHAR, \"i\");", "-        FaQUX.addChild(eumTC);", "-        CommonToken SUdyR = new CommonToken(JavadocTokenTypes.CHAR, \"s\");", "-        FaQUX.addChild(SUdyR);", "-        WuoxQ.addChild(FaQUX);", "-        CommonToken ZcIzE = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);", "-        WuoxQ.addChild(ZcIzE);", "-        DYThx.addChild(WuoxQ);", "-        vqeRv.addChild(DYThx);", "-        CommonToken kMCCR = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, \" *\");", "-        vqeRv.addChild(kMCCR);", "-        CommonToken pFtfc = new CommonToken(JavadocTokenTypes.WS, \" \");", "-        vqeRv.addChild(pFtfc);", "-        JavadocTagContext mYbvf = new JavadocTagContext(vqeRv, 0);", "-        CommonToken JUVPH = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, \"@anotherTagWithoutParameter\");", "-        mYbvf.addChild(JUVPH);", "-        CommonToken mDykX = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);", "-        mYbvf.addChild(mDykX);", "-        vqeRv.addChild(mYbvf);", "-        CommonToken oHnTB = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, \" *\");", "-        vqeRv.addChild(oHnTB);", "-        CommonToken aLlHU = new CommonToken(JavadocTokenTypes.WS, \" \");", "-        vqeRv.addChild(aLlHU);", "-        JavadocTagContext MVTCW = new JavadocTagContext(vqeRv, 0);", "-        CommonToken ipxcL = new CommonToken(JavadocTokenTypes.AUTHOR_LITERAL, \"@author\");", "-        MVTCW.addChild(ipxcL);", "-        CommonToken AfLyL = new CommonToken(JavadocTokenTypes.WS, \" \");", "-        MVTCW.addChild(AfLyL);", "-        DescriptionContext ZXuuK = new DescriptionContext(MVTCW, 0);", "-        TextContext uXOoV = new TextContext(ZXuuK, 0);", "-        CommonToken PzlFR = new CommonToken(JavadocTokenTypes.CHAR, \"I\");", "-        uXOoV.addChild(PzlFR);", "-        ZXuuK.addChild(uXOoV);", "-        CommonToken VNXPi = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);", "-        ZXuuK.addChild(VNXPi);", "-        TextContext vUStO = new TextContext(ZXuuK, 0);", "-        CommonToken yLjDi = new CommonToken(JavadocTokenTypes.WS, \" \");", "-        vUStO.addChild(yLjDi);", "-        ZXuuK.addChild(vUStO);", "-        MVTCW.addChild(ZXuuK);", "-        vqeRv.addChild(MVTCW);", "-        CommonToken QNmAS = new CommonToken(JavadocTokenTypes.EOF, \"<EOF>\");", "-        vqeRv.addChild(QNmAS);", "-        return vqeRv;", "-    }", "+", "+    public static ParseTree treeCustomJavadocTags()", "+    {", "+        JavadocContext javadocContext0 = new JavadocContext(null, 0);", "+        CommonToken leadingAsterisk0 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, \" *\");", "+        javadocContext0.addChild(leadingAsterisk0);", "+        CommonToken ws0 = new CommonToken(JavadocTokenTypes.WS, \" \");", "+        javadocContext0.addChild(ws0);", "+        JavadocTagContext javadocTagContext0 = new JavadocTagContext(javadocContext0, 0);", "+        CommonToken customName0 = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, \"@myTag\");", "+        javadocTagContext0.addChild(customName0);", "+        CommonToken ws1 = new CommonToken(JavadocTokenTypes.WS, \" \");", "+        javadocTagContext0.addChild(ws1);", "+        DescriptionContext descriptionContext0 = new DescriptionContext(javadocTagContext0, 0);", "+        TextContext textContext0 = new TextContext(descriptionContext0, 0);", "+        CommonToken char0 = new CommonToken(JavadocTokenTypes.CHAR, \"y\");", "+        textContext0.addChild(char0);", "+        CommonToken char1 = new CommonToken(JavadocTokenTypes.CHAR, \"e\");", "+        textContext0.addChild(char1);", "+        CommonToken char2 = new CommonToken(JavadocTokenTypes.CHAR, \"s\");", "+        textContext0.addChild(char2);", "+        CommonToken ws2 = new CommonToken(JavadocTokenTypes.WS, \" \");", "+        textContext0.addChild(ws2);", "+        CommonToken char3 = new CommonToken(JavadocTokenTypes.CHAR, \"i\");", "+        textContext0.addChild(char3);", "+        CommonToken char4 = new CommonToken(JavadocTokenTypes.CHAR, \"t\");", "+        textContext0.addChild(char4);", "+        CommonToken ws3 = new CommonToken(JavadocTokenTypes.WS, \" \");", "+        textContext0.addChild(ws3);", "+        CommonToken char5 = new CommonToken(JavadocTokenTypes.CHAR, \"i\");", "+        textContext0.addChild(char5);", "+        CommonToken char6 = new CommonToken(JavadocTokenTypes.CHAR, \"s\");", "+        textContext0.addChild(char6);", "+        descriptionContext0.addChild(textContext0);", "+        CommonToken newline0 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);", "+        descriptionContext0.addChild(newline0);", "+        javadocTagContext0.addChild(descriptionContext0);", "+        javadocContext0.addChild(javadocTagContext0);", "+        CommonToken leadingAsterisk1 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, \" *\");", "+        javadocContext0.addChild(leadingAsterisk1);", "+        CommonToken ws4 = new CommonToken(JavadocTokenTypes.WS, \" \");", "+        javadocContext0.addChild(ws4);", "+        JavadocTagContext javadocTagContext1 = new JavadocTagContext(javadocContext0, 0);", "+        CommonToken customName1 = new CommonToken(JavadocTokenTypes.CUSTOM_NAME, \"@anotherTagWithoutParameter\");", "+        javadocTagContext1.addChild(customName1);", "+        CommonToken newline1 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);", "+        javadocTagContext1.addChild(newline1);", "+        javadocContext0.addChild(javadocTagContext1);", "+        CommonToken leadingAsterisk2 = new CommonToken(JavadocTokenTypes.LEADING_ASTERISK, \" *\");", "+        javadocContext0.addChild(leadingAsterisk2);", "+        CommonToken ws5 = new CommonToken(JavadocTokenTypes.WS, \" \");", "+        javadocContext0.addChild(ws5);", "+        JavadocTagContext javadocTagContext2 = new JavadocTagContext(javadocContext0, 0);", "+        CommonToken authorLiteral0 = new CommonToken(JavadocTokenTypes.AUTHOR_LITERAL, \"@author\");", "+        javadocTagContext2.addChild(authorLiteral0);", "+        CommonToken ws6 = new CommonToken(JavadocTokenTypes.WS, \" \");", "+        javadocTagContext2.addChild(ws6);", "+        DescriptionContext descriptionContext1 = new DescriptionContext(javadocTagContext2, 0);", "+        TextContext textContext1 = new TextContext(descriptionContext1, 0);", "+        CommonToken char7 = new CommonToken(JavadocTokenTypes.CHAR, \"I\");", "+        textContext1.addChild(char7);", "+        descriptionContext1.addChild(textContext1);", "+        CommonToken newline2 = new CommonToken(JavadocTokenTypes.NEWLINE, LINE_SEPARATOR);", "+        descriptionContext1.addChild(newline2);", "+        TextContext textContext2 = new TextContext(descriptionContext1, 0);", "+        CommonToken ws7 = new CommonToken(JavadocTokenTypes.WS, \" \");", "+        textContext2.addChild(ws7);", "+        descriptionContext1.addChild(textContext2);", "+        javadocTagContext2.addChild(descriptionContext1);", "+        javadocContext0.addChild(javadocTagContext2);", "+        CommonToken eof0 = new CommonToken(JavadocTokenTypes.EOF, \"<EOF>\");", "+        javadocContext0.addChild(eof0);", "+        return javadocContext0;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8872257ac1992c0ff64cfdeaf913dd15", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/AllTests.java", "commitBeforeChange": "c044038c3b932586c0d384b614254cc2d1838838", "commitAfterChange": "4701ec1304fba478198544064a305e98a7bfe3fd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public static Test suite()", "signatureAfterChange": "      public static Test suite()", "diff": ["-        //$JUnit-BEGIN$", "-        suite.addTest(new TestSuite(AbstractClassNameCheckTest.class));", "-        suite.addTest(new TestSuite(AbstractViolationReporterTest.class));", "-        suite.addTest(new TestSuite(AnonInnerLengthCheckTest.class));", "-        suite.addTest(new TestSuite(ArrayTrailingCommaCheckTest.class));", "-        suite.addTest(new TestSuite(ArrayTypeStyleCheckTest.class));", "-        suite.addTest(new TestSuite(AvoidInlineConditionalsCheckTest.class));", "-        suite.addTest(new TestSuite(AvoidNestedBlocksCheckTest.class));", "-        suite.addTest(new TestSuite(AvoidStarImportTest.class));", "-        suite.addTest(new TestSuite(BooleanExpressionComplexityCheckTest.class));", "+", "+        // test from this package", "-        suite.addTest(new TestSuite(ClassFanOutComplexityCheckTest.class));", "-        suite.addTest(new TestSuite(ClassDataAbstractionCouplingCheckTest.class));", "-        suite.addTest(new TestSuite(ConstantNameCheckTest.class));", "-        suite.addTest(new TestSuite(CovariantEqualsCheckTest.class));", "-        suite.addTest(new TestSuite(CyclomaticComplexityCheckTest.class));", "-        suite.addTest(new TestSuite(DescendantTokenCheckTest.class));", "-        suite.addTest(new TestSuite(DesignForExtensionCheckTest.class));", "-        suite.addTest(new TestSuite(DetailASTTest.class));", "-        suite.addTest(new TestSuite(DeclarationOrderCheckTest.class));", "-        suite.addTest(new TestSuite(DoubleCheckedLockingCheckTest.class));", "-        suite.addTest(new TestSuite(EmptyBlockCheckTest.class));", "-        suite.addTest(new TestSuite(EmptyForIteratorPadCheckTest.class));", "-        suite.addTest(new TestSuite(EmptyStatementCheckTest.class));", "-        suite.addTest(new TestSuite(EqualsHashCodeCheckTest.class));", "-        suite.addTest(new TestSuite(ExplicitInitializationCheckTest.class));", "-        suite.addTest(new TestSuite(FileLengthCheckTest.class));", "-        suite.addTest(new TestSuite(FileSetCheckLifecycleTest.class));", "-        suite.addTest(new TestSuite(FinalClassCheckTest.class));", "-        suite.addTest(new TestSuite(FinalLocalVariableCheckTest.class));", "-        suite.addTest(new TestSuite(FinalParametersCheckTest.class));", "-        suite.addTest(new TestSuite(GenericIllegalRegexpCheckTest.class));", "-        suite.addTest(new TestSuite(HeaderCheckTest.class));", "-        suite.addTest(new TestSuite(HiddenFieldCheckTest.class));", "-        suite.addTest(new TestSuite(HideUtilityClassConstructorCheckTest.class));", "-        suite.addTest(new TestSuite(ImportOrderCheckTest.class));", "-        suite.addTest(new TestSuite(IllegalCatchCheckTest.class));", "-        suite.addTest(new TestSuite(IllegalImportCheckTest.class));", "-        suite.addTest(new TestSuite(IllegalInstantiationCheckTest.class));", "-        suite.addTest(new TestSuite(IllegalTokenCheckTest.class));", "-        suite.addTest(new TestSuite(IllegalTokenTextCheckTest.class));", "-        suite.addTest(new TestSuite(IllegalTypeCheckTest.class));", "-        suite.addTest(new TestSuite(IndentationCheckTest.class));", "-        suite.addTest(new TestSuite(InnerAssignmentCheckTest.class));", "-        suite.addTest(new TestSuite(InterfaceIsTypeCheckTest.class));", "-        suite.addTest(new TestSuite(JUnitTestCaseCheckTest.class));", "-        suite.addTest(new TestSuite(JavadocMethodCheckTest.class));", "-        suite.addTest(new TestSuite(JavadocStyleCheckTest.class));", "-        suite.addTest(new TestSuite(JavadocTypeCheckTest.class));", "-        suite.addTest(new TestSuite(JavadocVariableCheckTest.class));", "-        suite.addTest(new TestSuite(LeftCurlyCheckTest.class));", "-        suite.addTest(new TestSuite(LineLengthCheckTest.class));", "-        suite.addTest(new TestSuite(LocalFinalVariableNameCheckTest.class));", "-        suite.addTest(new TestSuite(LocalVariableNameCheckTest.class));", "-        suite.addTest(new TestSuite(MagicNumberCheckTest.class));", "-        suite.addTest(new TestSuite(MemberNameCheckTest.class));", "-        suite.addTest(new TestSuite(MethodLengthCheckTest.class));", "-        suite.addTest(new TestSuite(MethodNameCheckTest.class));", "-        suite.addTest(new TestSuite(MissingSwitchDefaultCheckTest.class));", "-        suite.addTest(new TestSuite(ModifierOrderCheckTest.class));", "-        suite.addTest(new TestSuite(MutableExceptionCheckTest.class));", "-        suite.addTest(new TestSuite(NeedBracesCheckTest.class));", "-        suite.addTest(new TestSuite(NestedIfDepthCheckTest.class));", "-        suite.addTest(new TestSuite(NestedTryDepthCheckTest.class));", "-        suite.addTest(new TestSuite(NewlineAtEndOfFileCheckTest.class));", "-        suite.addTest(new TestSuite(NoWhitespaceAfterCheckTest.class));", "-        suite.addTest(new TestSuite(NoWhitespaceBeforeCheckTest.class));", "-        suite.addTest(new TestSuite(NPathComplexityCheckTest.class));", "-        suite.addTest(new TestSuite(OperatorWrapCheckTest.class));", "-        suite.addTest(new TestSuite(PackageDeclarationCheckTest.class));", "-        suite.addTest(new TestSuite(PackageHtmlCheckTest.class));", "-        suite.addTest(new TestSuite(PackageNameCheckTest.class));", "-        suite.addTest(new TestSuite(ParameterAssignmentCheckTest.class));", "-        suite.addTest(new TestSuite(ParameterNameCheckTest.class));", "-        suite.addTest(new TestSuite(ParameterNumberCheckTest.class));", "-        suite.addTest(new TestSuite(ParenPadCheckTest.class));", "-        suite.addTest(new TestSuite(RedundantImportCheckTest.class));", "-        suite.addTest(new TestSuite(RedundantModifierTest.class));", "-        suite.addTest(new TestSuite(RedundantThrowsCheckTest.class));", "-        suite.addTest(new TestSuite(ReturnCountCheckTest.class));", "-        suite.addTest(new TestSuite(RightCurlyCheckTest.class));", "-        suite.addTest(new TestSuite(SimplifyBooleanExpressionCheckTest.class));", "-        suite.addTest(new TestSuite(SimplifyBooleanReturnCheckTest.class));", "-        suite.addTest(new TestSuite(ExecutableStatementCountCheckTest.class));", "-        suite.addTest(new TestSuite(StaticVariableNameCheckTest.class));", "-        suite.addTest(new TestSuite(StringLiteralEqualityCheckTest.class));", "-        suite.addTest(new TestSuite(SuperCloneCheckTest.class));", "-        suite.addTest(new TestSuite(SuperFinalizeCheckTest.class));", "-        suite.addTest(new TestSuite(TabCharacterCheckTest.class));", "-        suite.addTest(new TestSuite(ThrowsCountCheckTest.class));", "-        suite.addTest(new TestSuite(TodoCommentCheckTest.class));", "-        suite.addTest(new TestSuite(TranslationCheckTest.class));", "-        suite.addTest(new TestSuite(TypeNameCheckTest.class));", "-        suite.addTest(new TestSuite(TypecastParenPadCheckTest.class));", "-        suite.addTest(new TestSuite(UncommentedMainCheckTest.class));", "-        suite.addTest(new TestSuite(UnusedImportsCheckTest.class));", "-        suite.addTest(new TestSuite(UpperEllCheckTest.class));", "-        suite.addTest(new TestSuite(VisibilityModifierCheckTest.class));", "-        suite.addTest(new TestSuite(WhitespaceAfterCheckTest.class));", "-        suite.addTest(new TestSuite(WhitespaceAroundTest.class));", "-        // j2ee tests-BEGIN", "-        suite.addTest(new TestSuite(EntityBeanCheckTest.class));", "-        suite.addTest(new TestSuite(FinalStaticCheckTest.class));", "-        suite.addTest(new TestSuite(LocalHomeInterfaceCheckTest.class));", "-        suite.addTest(new TestSuite(LocalInterfaceCheckTest.class));", "-        suite.addTest(new TestSuite(MessageBeanCheckTest.class));", "-        suite.addTest(new TestSuite(RemoteHomeInterfaceCheckTest.class));", "-        suite.addTest(new TestSuite(RemoteInterfaceCheckTest.class));", "-        suite.addTest(new TestSuite(SessionBeanCheckTest.class));", "-        suite.addTest(new TestSuite(ThisParameterCheckTest.class));", "-        suite.addTest(new TestSuite(ThisReturnCheckTest.class));", "-        // j2ee tests-END", "-        ", "-        // usage tests-BEGIN", "-        suite.addTest(new TestSuite(OneMethodPrivateFieldCheckTest.class));", "-        suite.addTest(new TestSuite(UnusedLocalVariableCheckTest.class));", "-        suite.addTest(new TestSuite(UnusedParameterCheckTest.class));", "-        suite.addTest(new TestSuite(UnusedPrivateFieldCheckTest.class));", "-        suite.addTest(new TestSuite(UnusedPrivateMethodCheckTest.class));", "-        // usage tests-END", "+        // tests from sub-packages", "+        suite.addTest(com.puppycrawl.tools.checkstyle.api.AllTests.suite());", "+        suite.addTest(com.puppycrawl.tools.checkstyle.checks.AllTests.suite());", "+        suite.addTest(com.puppycrawl.tools.checkstyle.filters.AllTests.suite());"]}]}
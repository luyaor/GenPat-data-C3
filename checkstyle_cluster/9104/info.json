{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "491ab3e382149d0ab3b9c224e4a25fe2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91e0357d30a928c78bc9daf0b3371e3e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "b8d742ecd2c3327e8f11b55d907c21206b5ccb79", "commitAfterChange": "d92ceb81a67bb10b98f5ce305f839ba535a1c6ee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType)", "signatureAfterChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType)", "diff": ["-        else if (!mConfig.isAllowNoAuthor()", "-                 && (mInScope.size() == 0)", "-                 // don't check author for inner classes", "-                 && (MATCH_JAVADOC_AUTHOR.grep(jd).length == 0))", "-        {", "-            mMessages.add(lineNo, \"type.missingAuthorTag\");", "+        else if (mInScope.size() == 0) {", "+            // don't check author/version for inner classes", "+            if (!mConfig.isAllowNoAuthor()", "+                && (MATCH_JAVADOC_AUTHOR.grep(jd).length == 0))", "+            {", "+                mMessages.add(lineNo, \"type.missingTag\", \"@author\");", "+            }", "+            if (mConfig.isRequireVersion() ", "+                && (MATCH_JAVADOC_VERSION.grep(jd).length == 0))", "+            {", "+                mMessages.add(lineNo, \"type.missingTag\", \"@version\");", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb9f8d14f1a122afec495401d1e3a6d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "2a8aba9a54d2112b142a1b9e0c4e762e780155c1", "commitAfterChange": "7fa61f5c0b05fc44c9f55a23c816e8e072dcec0e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType)", "signatureAfterChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType)", "diff": ["-        //", "-        // Only Javadoc testing below", "-        //", "-        final Scope typeScope =", "-            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "-", "-        if (!inCheckScope(typeScope)) {", "-            return; // no need to really check anything", "-        }", "-", "-        final int lineNo = (aMods.size() > 0)", "-            ? aMods.getFirstLineNo()", "-            : aType.getLineNo();", "-", "-        final String[] jd = getJavadocBefore(lineNo - 1);", "-        if (jd == null) {", "-//            mMessages.add(lineNo, \"javadoc.missing\");", "-        }", "-        else if (mInScope.size() == 0) {", "-            // don't check author/version for inner classes", "-            if (!mConfig.isAllowNoAuthor()", "-                && (MATCH_JAVADOC_AUTHOR.grep(jd).length == 0))", "-            {", "-                mMessages.add(lineNo, \"type.missingTag\", \"@author\");", "-            }", "-            if (mConfig.isRequireVersion()", "-                && (MATCH_JAVADOC_VERSION.grep(jd).length == 0))", "-            {", "-                mMessages.add(lineNo, \"type.missingTag\", \"@version\");", "-            }", "-        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a5c8b6e31c94a80ed76c9978dcc91e7d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b8b13929da0957170975005d1ea501f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "59aa66c3cc43db0a7cd8bb0ea3a39b6f4339fe88", "commitAfterChange": "a24df47cafeab03fd65cf72b460aad3d2fafce3d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void walk(DetailAST aAST, FileContents aContents)", "signatureAfterChange": "     private void walk(DetailAST aAST, FileContents aContents             , AstState aAstState)", "diff": ["-    private void walk(DetailAST aAST, FileContents aContents)", "+    private void walk(DetailAST aAST, FileContents aContents", "+            , AstState aAstState)", "-        getMessageCollector().reset();", "-        notifyBegin(aAST, aContents);", "+        notifyBegin(aAST, aContents, aAstState);", "-            if (useRecursiveAlgorithm()) {", "-                processRec(aAST);", "-            }", "-            else {", "-                processIter(aAST);", "-            }", "+            processIter(aAST, aAstState);", "-        notifyEnd(aAST);", "+        notifyEnd(aAST, aAstState);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3e07afd9d59eb10e71ef3d799312baf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "a0d00ea8940acd30064715db04d7a19a99d4cca9", "commitAfterChange": "f52306ff7799ea2b2e4d99fba7040a11b186d68a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "         private LexicalFrame getIfContains(String nameToFind)", "signatureAfterChange": "         protected LexicalFrame getIfContains(DetailAST nameToFind, boolean lookForMethod)", "diff": ["-        private LexicalFrame getIfContains(String nameToFind) {", "+        protected LexicalFrame getIfContains(DetailAST nameToFind, boolean lookForMethod) {", "-            if (contains(nameToFind)) {", "+            if (!lookForMethod", "+                && contains(nameToFind)) {", "-                frame = parent.getIfContains(nameToFind);", "+                frame = parent.getIfContains(nameToFind, lookForMethod);", "+        }"]}]}
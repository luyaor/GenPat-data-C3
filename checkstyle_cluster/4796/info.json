{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "802f53eacc0c0a248eeb741ebf22e0bc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68a87fc59ff881e3de25d098677c5bf2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "diff": ["-                || (!mIgnoreEqualsIgnoreCase && \"equalsIgnoreCase\"", "-                        .equals(method.getText())))", "+            && containsOneArg(expr) && containsAllSafeTokens(expr))", "-            if (containsOneArg(expr) && containsAllSafeTokens(expr)) {", "-                log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "-                    \"equals\".equals(method.getText())", "-                    ? \"equals.avoid.null\"", "-                    : \"equalsIgnoreCase.avoid.null\");", "-            }", "+            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "+                \"equals.avoid.null\");", "+        }", "+", "+        if (!mIgnoreEqualsIgnoreCase", "+            && \"equalsIgnoreCase\".equals(method.getText())", "+            && containsOneArg(expr) && containsAllSafeTokens(expr))", "+        {", "+            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "+                \"equalsIgnoreCase.avoid.null\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91c9b92b1f78978df128ccb3e8cecd20", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "49862970ac522ae85fa014b5ac4985e56645fcff", "commitAfterChange": "a8e60736f4d66e806ffe1d250da3b58bf5dc2132", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "diff": ["-        if (\"equals\".equals(method.getText()) && containsOneArg(expr)) {", "-            if (containsAllSafeTokens(expr)) {", "+", "+        if (\"equals\".equals(method.getText())", "+                || (mPerformEqualsIgnoreCaseCheck && \"equalsIgnoreCase\"", "+                        .equals(method.getText())))", "+        {", "+            if (containsOneArg(expr) && containsAllSafeTokens(expr)) {", "-                        \"equals.avoid.null\");", "-            }", "-        } else if(performEqualsIgnoreCaseCheck) {", "-            if(\"equalsIgnoreCase\".equals(method.getText()) && containsOneArg(expr)) {", "-                if (containsAllSafeTokens(expr)) {", "-                    log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "-                            \"equalsIgnoreCase.avoid.null\");", "-                }", "+                    \"equals\".equals(method.getText())", "+                    ? \"equals.avoid.null\"", "+                    : \"equalsIgnoreCase.avoid.null\");"]}]}
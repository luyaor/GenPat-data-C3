{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71de69502d257c2a42b8338691b7f595", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b0ba3413bc7a5dc891064812e5dd39f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "commitBeforeChange": "69976b5365b7c33a602dd814337e2db1136288fc", "commitAfterChange": "ac8eadea0b1fb183d56cd809a34a7b9047b47d47", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 25, "signatureBeforeChange": "      @Test     public void testInvalidMethodWithChecker()         throws Exception", "signatureAfterChange": "      @Test     public void testInvalidMethodWithChecker()         throws Exception", "diff": ["-        final Checker c = createChecker(checkConfig);", "+", "+        checkConfig.addAttribute(\"arrayInitIndent\", \"4\");", "+        checkConfig.addAttribute(\"basicOffset\", \"4\");", "+        checkConfig.addAttribute(\"braceAdjustment\", \"0\");", "+        checkConfig.addAttribute(\"caseIndent\", \"4\");", "+        checkConfig.addAttribute(\"forceStrictCondition\", \"false\");", "+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"4\");", "+        checkConfig.addAttribute(\"tabWidth\", \"4\");", "+        checkConfig.addAttribute(\"throwsIndent\", \"4\");", "-            \"17: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),", "-            \"20: \" + getCheckMessage(MSG_ERROR, \"ctor def modifier\", 6, 4),", "-            \"21: \" + getCheckMessage(MSG_ERROR, \"ctor def lcurly\", 2, 4),", "-            \"22: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),", "-            \"25: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 2, 4),", "-            \"26: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 6, 4),", "-            \"63: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 5, 4),", "-            \"64: \" + getCheckMessage(MSG_ERROR, \"final\", 5, 9),", "-            \"65: \" + getCheckMessage(MSG_ERROR, \"void\", 5, 9),", "-            \"66: \" + getCheckMessage(MSG_ERROR, \"method5\", 4, 9),", "-            \"74: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 3, 4),", "-            \"75: \" + getCheckMessage(MSG_ERROR, \"final\", 3, 7),", "-            \"76: \" + getCheckMessage(MSG_ERROR, \"void\", 3, 7),", "-            \"77: \" + getCheckMessage(MSG_ERROR, \"method6\", 5, 7),", "-            \"87: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 8),", "-            \"87: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),", "-            \"92: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 8),", "-            \"92: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 6, 8),", "-            \"93: \" + getCheckMessage(MSG_ERROR, \"if\", 6, 8),", "-            \"94: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),", "-            \"94: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "-            \"95: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 6, 8),", "-            \"98: \" + getCheckMessage(MSG_ERROR, \"Arrays\", 10, 12),", "-            \"107: \" + getCheckMessage(MSG_ERROR, \"+\", 10, 12),", "-            \"107: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "-            \"116: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),", "-            \"120: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),", "-            \"121: \" + getCheckMessage(MSG_ERROR, \")\", 6, 8),", "-            \"125: \" + getCheckMessage(MSG_ERROR, \"method call rparen\", 6, 8),", "-            \"139: \" + getCheckMessage(MSG_ERROR, \"6\", 10, 12),", "-            \"139: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "-            \"142: \" + getCheckMessage(MSG_ERROR, \"6\", 10, 12),", "-            \"142: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "-            \"152: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 6, 12),", "-            \"164: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),", "-            \"169: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),", "-            \"173: \" + getCheckMessage(MSG_ERROR, \"int\", 0, 8),", "-            \"174: \" + getCheckMessage(MSG_ERROR, \"method9\", 4, 8),", "-            \"184: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),", "+            \"23: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),", "+            \"26: \" + getCheckMessage(MSG_ERROR, \"ctor def modifier\", 6, 4),", "+            \"27: \" + getCheckMessage(MSG_ERROR, \"ctor def lcurly\", 2, 4),", "+            \"28: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),", "+            \"31: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 2, 4),", "+            \"32: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 6, 4),", "+            \"69: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 5, 4),", "+            \"70: \" + getCheckMessage(MSG_ERROR, \"final\", 5, 9),", "+            \"71: \" + getCheckMessage(MSG_ERROR, \"void\", 5, 9),", "+            \"72: \" + getCheckMessage(MSG_ERROR, \"method5\", 4, 9),", "+            \"80: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 3, 4),", "+            \"81: \" + getCheckMessage(MSG_ERROR, \"final\", 3, 7),", "+            \"82: \" + getCheckMessage(MSG_ERROR, \"void\", 3, 7),", "+            \"83: \" + getCheckMessage(MSG_ERROR, \"method6\", 5, 7),", "+            \"93: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 8),", "+            \"93: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),", "+            \"98: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 8),", "+            \"98: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 6, 8),", "+            \"99: \" + getCheckMessage(MSG_ERROR, \"if\", 6, 8),", "+            \"100: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),", "+            \"100: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "+            \"101: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 6, 8),", "+            \"104: \" + getCheckMessage(MSG_ERROR, \"Arrays\", 10, 12),", "+            \"113: \" + getCheckMessage(MSG_ERROR, \"+\", 10, 12),", "+            \"113: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "+            \"122: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),", "+            \"126: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),", "+            \"127: \" + getCheckMessage(MSG_ERROR, \")\", 6, 8),", "+            \"131: \" + getCheckMessage(MSG_ERROR, \"method call rparen\", 6, 8),", "+            \"145: \" + getCheckMessage(MSG_ERROR, \"6\", 10, 12),", "+            \"145: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "+            \"148: \" + getCheckMessage(MSG_ERROR, \"6\", 10, 12),", "+            \"148: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "+            \"158: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 6, 12),", "+            \"170: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),", "+            \"175: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),", "+            \"179: \" + getCheckMessage(MSG_ERROR, \"int\", 0, 8),", "+            \"180: \" + getCheckMessage(MSG_ERROR, \"method9\", 4, 8),", "+            \"190: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),", "-        verify(c, fname, expected);", "+        verifyWarns(checkConfig, fname, expected, 6);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9646596ab03e05c9757ac7680fc40e7f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "commitBeforeChange": "69976b5365b7c33a602dd814337e2db1136288fc", "commitAfterChange": "ac8eadea0b1fb183d56cd809a34a7b9047b47d47", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 34, "signatureBeforeChange": "      @Test     public void testInvalidBlockWithChecker()         throws Exception", "signatureAfterChange": "      @Test     public void testInvalidBlockWithChecker()         throws Exception", "diff": ["-        final Checker c = createChecker(checkConfig);", "+", "+        checkConfig.addAttribute(\"arrayInitIndent\", \"4\");", "+        checkConfig.addAttribute(\"basicOffset\", \"4\");", "+        checkConfig.addAttribute(\"braceAdjustment\", \"0\");", "+        checkConfig.addAttribute(\"caseIndent\", \"4\");", "+        checkConfig.addAttribute(\"forceStrictCondition\", \"false\");", "+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"4\");", "+        checkConfig.addAttribute(\"tabWidth\", \"4\");", "+        checkConfig.addAttribute(\"throwsIndent\", \"4\");", "-            \"22: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 7, 8),", "-            \"23: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),", "-            \"25: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),", "-            \"26: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 7, 8),", "-            \"28: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),", "-            \"30: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 8),", "-            \"31: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),", "-            \"34: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),", "-            \"35: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 13, 12),", "-            \"35: \" + getCheckMessage(MSG_ERROR, \"member def type\", 13, 12),", "-            \"37: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 13, 12),", "-            \"38: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 9, 8),", "-            \"41: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),", "-            \"42: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),", "-            \"42: \" + getCheckMessage(MSG_ERROR, \"member def type\", 10, 12),", "-            \"44: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),", "-            \"45: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 8),", "-            \"48: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),", "-            \"51: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),", "-            \"51: \" + getCheckMessage(MSG_ERROR, \"member def type\", 10, 12),", "-            \"55: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 10, 12),", "-            \"59: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),", "-            \"64: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),", "-            \"66: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 10, 12),", "-            \"67: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),", "-            \"67: \" + getCheckMessage(MSG_ERROR, \"member def type\", 14, 16),", "-            \"82: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),", "-            \"91: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 2, 4),", "-            \"92: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 6, 4),", "-            \"96: \" + getCheckMessage(MSG_ERROR, \"member def type\", 7, 8),", "-            \"96: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 7, 8),", "-            \"99: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 6, 4),", "-            \"101: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 2, 4),", "-            \"103: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 2, 4),", "-            \"105: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),", "+            \"26: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 7, 8),", "+            \"27: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),", "+            \"29: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),", "+            \"30: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 7, 8),", "+            \"32: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),", "+            \"34: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 8),", "+            \"35: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),", "+            \"38: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 9, 8),", "+            \"39: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 13, 12),", "+            \"39: \" + getCheckMessage(MSG_ERROR, \"member def type\", 13, 12),", "+            \"41: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 13, 12),", "+            \"42: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 9, 8),", "+            \"45: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),", "+            \"46: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),", "+            \"46: \" + getCheckMessage(MSG_ERROR, \"member def type\", 10, 12),", "+            \"48: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),", "+            \"49: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 8),", "+            \"52: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 8),", "+            \"55: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),", "+            \"55: \" + getCheckMessage(MSG_ERROR, \"member def type\", 10, 12),", "+            \"59: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 10, 12),", "+            \"63: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),", "+            \"68: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 10, 12),", "+            \"70: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 10, 12),", "+            \"71: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 14, 16),", "+            \"71: \" + getCheckMessage(MSG_ERROR, \"member def type\", 14, 16),", "+            \"86: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 10, 12),", "+            \"95: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 2, 4),", "+            \"96: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 6, 4),", "+            \"100: \" + getCheckMessage(MSG_ERROR, \"member def type\", 7, 8),", "+            \"100: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 7, 8),", "+            \"103: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 6, 4),", "+            \"105: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 2, 4),", "-            \"109: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 8),", "-            \"109: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 6, 8),", "-            \"112: \" + getCheckMessage(MSG_ERROR, \"static initialization lcurly\", 2, 4),", "+            \"109: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),", "+            \"111: \" + getCheckMessage(MSG_ERROR, \"static initialization\", 2, 4),", "-            \"114: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),", "-            \"119: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 8),", "-            \"119: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 6, 8),", "-            \"124: \" + getCheckMessage(MSG_ERROR, \"member def type\", 4, 8),", "-            \"124: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 4, 8),", "-            \"125: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 2, 4),", "-            \"130: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),", "-            \"133: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 2, 4),", "-            \"134: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 4),", "+            \"116: \" + getCheckMessage(MSG_ERROR, \"static initialization lcurly\", 2, 4),", "+            \"117: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 8),", "+            \"117: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 6, 8),", "+            \"118: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),", "+            \"123: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 8),", "+            \"123: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 6, 8),", "+            \"128: \" + getCheckMessage(MSG_ERROR, \"member def type\", 4, 8),", "+            \"128: \" + getCheckMessage(MSG_CHILD_ERROR, \"static initialization\", 4, 8),", "+            \"129: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 2, 4),", "+            \"134: \" + getCheckMessage(MSG_ERROR, \"static initialization rcurly\", 6, 4),", "-            \"139: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 4),", "-            \"141: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 4),", "-            \"143: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 2, 4),", "-            \"146: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 6, 8),", "-            \"146: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 8),", "+            \"138: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 4),", "+            \"141: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 2, 4),", "+            \"143: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 6, 4),", "+            \"145: \" + getCheckMessage(MSG_ERROR, \"block lcurly\", 6, 4),", "+            \"147: \" + getCheckMessage(MSG_ERROR, \"block rcurly\", 2, 4),", "+            \"150: \" + getCheckMessage(MSG_CHILD_ERROR, \"block\", 6, 8),", "+            \"150: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 8),", "-        verify(c, fname, expected);", "+        verifyWarns(checkConfig, fname, expected, 10);"]}]}
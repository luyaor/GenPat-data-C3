{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11d0bd7e313642cb6f0c6037a6df5850", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82377e3432ecad9e9c90e2baf7dbc4ac", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public void setInfluenceFormat(String aFormat)         throws ConversionException", "signatureAfterChange": "     public void setInfluenceFormat(String format)         throws ConversionException", "diff": ["-    public void setInfluenceFormat(String aFormat)", "+    public void setInfluenceFormat(String format)", "-        // check that aFormat parses", "+        // check that format parses", "-            Utils.getPattern(aFormat);", "+            Utils.getPattern(format);", "-            throw new ConversionException(\"unable to parse \" + aFormat, e);", "+            throw new ConversionException(\"unable to parse \" + format, e);", "-        mInfluenceFormat = aFormat;", "+        influenceFormat = format;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed98b6a9e91661c20e86d059373d72ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "         private AuditListener createXMLLogger(Task aTask) throws IOException", "signatureAfterChange": "         private AuditListener createXMLLogger(Task task) throws IOException", "diff": ["-        private AuditListener createXMLLogger(Task aTask) throws IOException", "+        private AuditListener createXMLLogger(Task task) throws IOException", "-            if ((mToFile == null) || !mUseFile) {", "-                return new XMLLogger(new LogOutputStream(aTask,", "+            if ((toFile == null) || !useFile) {", "+                return new XMLLogger(new LogOutputStream(task,", "-            return new XMLLogger(new FileOutputStream(mToFile), true);", "+            return new XMLLogger(new FileOutputStream(toFile), true);"]}]}
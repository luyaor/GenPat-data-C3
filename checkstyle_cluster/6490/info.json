{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48be007ed65410efcdf8ee0672009277", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8d5ddbc47289d15169cb7b9f9567f43", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "73e2e24fca9eceba5c8c2720bec963dbf76a1132", "commitAfterChange": "d46dc44e79ea9151e594e02a0ab3bec69786593c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (nextGroup == null || nextGroup.getType() != TokenTypes.CASE_GROUP) {", "-            // last group we shouldn't check it", "+        final boolean isLastGroup =", "+            (nextGroup == null || nextGroup.getType() != TokenTypes.CASE_GROUP);", "+        if (isLastGroup && !mCheckLastGroup) {", "+            // we do not need to check last group", "-            log(nextGroup, \"fall.through\");", "+            if (!isLastGroup) {", "+                log(nextGroup, \"fall.through\");", "+            }", "+            else {", "+                log(aAST, \"fall.through.last\");", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef17917944e660358b690898a4beea0a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "139609ac5d073ecb04381466f075f174b0aec8c9", "commitAfterChange": "ca9c59e8dc4b1dc4bb61149752c9e46a00e42fb4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                log(aAST, \"declaration.order.constructor\");", "+                if (!mIgnoreConstructors) {", "+                    log(aAST, \"declaration.order.constructor\");", "+                }", "-                log(aAST, \"declaration.order.method\");", "+                if (!mIgnoreMethods) {", "+                    log(aAST, \"declaration.order.method\");", "+                }", "-                    log(aAST, \"declaration.order.static\");", "+                    if (!mIgnoreModifiers) {", "+                        log(aAST, \"declaration.order.static\");", "+                    }", "-                    log(aAST, \"declaration.order.instance\");", "+                    if (!mIgnoreModifiers) {", "+                        log(aAST, \"declaration.order.instance\");", "+                    }", "-                log(aAST, \"declaration.order.access\");", "+                if (!mIgnoreModifiers) {", "+                    log(aAST, \"declaration.order.access\");", "+                }"]}]}
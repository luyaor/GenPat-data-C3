{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "243bc998477414a61e125337d6989aab", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f795c1575321d43e5d03e9a8910e79", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java", "commitBeforeChange": "267ba659ac62583f14c8c25d3cf4587070e1966c", "commitAfterChange": "b142c593512c9ef1179f4254ec406c23d180ed2f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        if (isAbstract(aAST)) {", "+            // abstract class could not have private constructor", "+            return;", "+        }", "+", "+        final boolean hasStaticModifier = isStatic(aAST);", "+        boolean hasNonPrivateStaticMethodOrField = false;", "+                }", "+                if (isStatic && !isPrivate) {", "+                    hasNonPrivateStaticMethodOrField = true;", "-        final boolean isUtilClass =", "-            extendsJLO && hasMethodOrField && !hasNonStaticMethodOrField;", "+        final boolean isUtilClass = extendsJLO && hasMethodOrField", "+            && !hasNonStaticMethodOrField && hasNonPrivateStaticMethodOrField;", "-        if (isUtilClass && hasAccessibleCtor) {", "+        if (isUtilClass && (hasAccessibleCtor && !hasStaticModifier)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eecf14fa676fef5cd9f4da4d8fa9611c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "11eb99681a05047aecc2ce4b4bc51c849d1cfd44", "commitAfterChange": "b576ccf8793690e8459a6620cc1611531f3f9890", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static String validate(Details details, RightCurlyOption bracePolicy,                                    boolean shouldStartLine, String targetSourceLine)", "signatureAfterChange": "     private static String validate(Details details, RightCurlyOption bracePolicy,                                    boolean shouldStartLine, String targetSourceLine)", "diff": ["-        else if (bracePolicy == RightCurlyOption.SAME", "-                && rcurly.getLineNo() != nextToken.getLineNo()) {", "+        else if (shouldBeOnSameLine(bracePolicy, details)) {", "-        else if (shouldBeAloneOnLine(details, bracePolicy)) {", "+        else if (shouldBeAloneOnLine(bracePolicy, details)) {", "-        else if (shouldStartLine) {", "-            final boolean startsLine =", "-                    CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);", "-", "-            if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {", "-                violation = MSG_KEY_LINE_NEW;", "-            }", "+        else if (shouldStartLine && !startsLine(details, targetSourceLine)) {", "+            violation = MSG_KEY_LINE_NEW;"]}]}
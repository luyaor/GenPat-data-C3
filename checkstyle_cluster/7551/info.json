{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78219f4a18d702bcb91aa1e7545fad51", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91108d43dc0f1d67f1df1f8ac8bbe6c0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "7b8a3aa5bba1323a7bbb85b6dbd86835215a48fc", "commitAfterChange": "603c5bb53ea12900f6a1c8af0c4a765af36786e3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean isVerifiable(DetailAST methodOrVariableDef)", "signatureAfterChange": "     private boolean isVerifiable(DetailAST methodOrVariableDef)", "diff": ["-            if (modifiersAst.getFirstChild() != null) {", "-                for (DetailAST modifier = modifiersAst.getFirstChild(); modifier != null;", "-                         modifier = modifier.getNextSibling()) {", "-                    if (memberModifiers.contains(modifier.getType())) {", "-                        result = true;", "-                    }", "+            result = isContainVerifiableType(modifiersAst);", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6ea7291a09430b22ee2ff7e98f1e8cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheck.java", "commitBeforeChange": "f7e41edb947dad22e10eeaa2e68e6f44b4bfa747", "commitAfterChange": "0b4ae9160bb82574a8d21d9a03dbfc8aaa45fdae", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers)", "signatureAfterChange": "     static DetailAST checkOrderSuggestedByJLS(List<DetailAST> modifiers)", "diff": ["-        DetailAST modifier;", "-        do {", "-            modifier = it.next();", "-        }", "-        while (it.hasNext() && modifier.getType() == TokenTypes.ANNOTATION);", "+        DetailAST modifier = skipAnnotations(it);", "-            while (modifier != null) {", "+            while (modifier != null", "+                    && offendingModifier == null) {", "+", "-                    break;"]}]}
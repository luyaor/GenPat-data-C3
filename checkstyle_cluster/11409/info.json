{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0291aaa97f1569cad055c9efebbaf092", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "523d28dd4b9355944719a7a23f2ece0d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static DetailNode findFirstToken(DetailNode node, int type)", "signatureAfterChange": "     public static DetailNode findFirstToken(DetailNode detailNode, int type)", "diff": ["-    public static DetailNode findFirstToken(DetailNode node, int type) {", "+    public static DetailNode findFirstToken(DetailNode detailNode, int type) {", "-        for (DetailNode i = getFirstChild(node); i != null; i = getNextSibling(i)) {", "-            if (i.getType() == type) {", "-                retVal = i;", "+        DetailNode node = getFirstChild(detailNode);", "+        while (node != null) {", "+            if (node.getType() == type) {", "+                retVal = node;", "+            node = getNextSibling(node);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df481bcdb1ef3c33a1ebf798d731b1bd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static DetailNode findFirstToken(DetailNode aNode, int aType)", "signatureAfterChange": "     public static DetailNode findFirstToken(DetailNode node, int type)", "diff": ["-    public static DetailNode findFirstToken(DetailNode aNode, int aType)", "+    public static DetailNode findFirstToken(DetailNode node, int type)", "-        for (DetailNode i = getFirstChild(aNode); i != null; i = getNextSibling(i)) {", "-            if (i.getType() == aType) {", "+        for (DetailNode i = getFirstChild(node); i != null; i = getNextSibling(i)) {", "+            if (i.getType() == type) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d486e65aebe6788ca3912647facd6bb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec7243bc7bbdcf1fce220bfc7460d95", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheckTest.java", "commitBeforeChange": "fe07d99333284482aad4729ffd17bb94030a3ab4", "commitAfterChange": "3c0c72f96477afb542ee37b3336f4b7b7613ff29", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test \tpublic void testIllegalClassType() throws Exception", "signatureAfterChange": "      @Test     public void testIllegalClassType() throws Exception", "diff": ["-    // ^Abstract.*$|^.*Factory$ --> abstract", "-\tpublic void testIllegalClassType() throws Exception {", "-\t\tfinal DefaultConfiguration checkConfig = createCheckConfig(AbstractClassNameCheck.class);", "-        final String[] expected = {", "-                \"26:1: Class 'AbstractClass' must has abstract modifier.\",", "-                \"29:1: Class 'Class1Factory' must has abstract modifier.\",", "-                \"33:5: Class 'AbstractInnerClass' must has abstract modifier.\",", "-                \"38:5: Class 'WellNamedFactory' must has abstract modifier.\",", "-                };", "+    public void testIllegalClassType() throws Exception", "+    {", "+        final DefaultConfiguration checkConfig = createCheckConfig(AbstractClassNameCheck.class);", "-\t\tverify(checkConfig, getPath(\"naming\" + File.separator + \"InputAbstractClassName.java\"), expected);", "+", "+        final String[] expected = {", "+            \"26:1: Class 'AbstractClass' must has abstract modifier.\",", "+            \"29:1: Class 'Class1Factory' must has abstract modifier.\",", "+            \"33:5: Class 'AbstractInnerClass' must has abstract modifier.\",", "+            \"38:5: Class 'WellNamedFactory' must has abstract modifier.\",", "+        };", "+", "+        verify(checkConfig, getPath(\"naming\" + File.separator + \"InputAbstractClassName.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f65ea804fbff48676503614860390b4c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java", "commitBeforeChange": "2085758156c3ac70621a95df46a2c89432bce56e", "commitAfterChange": "dd7935491a4d88781a8d95e642324f7c9c0ef7eb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testWrongFile() throws Exception", "signatureAfterChange": "      @Test     public void testWrongFile() throws Exception", "diff": ["-        File impossibleFile = new File(\"\");", "+        File impossibleFile = new File(\"\");"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2672e417b17e2ca956f1480b0edd2f58", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a2e62cd0f6b16dee74873d9172ba5fb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "82d8e91024a57a96fbb6410dacb29d6a3f582903", "commitAfterChange": "32bd618b193dc04935b9c3c11b5bc4364cca8c89", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "      @Test     public void testIncorrectTag() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrectTag() throws Exception", "diff": ["-            Constructor ctorParent = null;", "-            Constructor[] parentConstructors = aClassParent.getDeclaredConstructors();", "-            for (Constructor constr: parentConstructors) {", "+            Constructor<?> ctorParent = null;", "+            Constructor<?>[] parentConstructors = aClassParent.getDeclaredConstructors();", "+            for (Constructor<?> constr: parentConstructors) {", "-            Constructor constructor = null;", "-            Constructor[] constructors = aClass.getDeclaredConstructors();", "-            for (Constructor constr: constructors) {", "+            Constructor<?> constructor = null;", "+            Constructor<?>[] constructors = aClass.getDeclaredConstructors();", "+            for (Constructor<?> constr: constructors) {", "-            Class[] param = new Class[4];", "+            Class<?>[] param = new Class<?>[4];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd44b90ae51c7f8cf307caa854817bdc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private static Map arrangePropertyFiles(File[] aPropFiles)", "signatureAfterChange": "     private static Map<String, Set<File>> arrangePropertyFiles(             File[] aPropFiles)", "diff": ["-    private static Map arrangePropertyFiles(File[] aPropFiles)", "+    private static Map<String, Set<File>> arrangePropertyFiles(", "+            File[] aPropFiles)", "-        final Map propFileMap = new HashMap();", "+        final Map<String, Set<File>> propFileMap =", "+            new HashMap<String, Set<File>>();", "-            Set fileSet = (Set) propFileMap.get(identifier);", "+            Set<File> fileSet = propFileMap.get(identifier);", "-                fileSet = new HashSet();", "+                fileSet = new HashSet<File>();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "942e2107b199566bf36552f2ecdcc115", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306ba21dc9fe895504bacec7fcabd019", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/MyModifierSet.java", "commitBeforeChange": "22885be800d66237f4447184acdf669224d6d8e0", "commitAfterChange": "048d0cdaf4492a4c1b122320143b9d5339e5ac3b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     boolean hasOrderSuggestedByJLS()", "signatureAfterChange": "     String checkOrderSuggestedByJLS()", "diff": ["-    boolean hasOrderSuggestedByJLS()", "+    String checkOrderSuggestedByJLS()", "-        Iterator it = mModifiers.iterator();", "-        do", "-        {", "-            if (!it.hasNext())", "-            {", "-                return true;", "+        String modifier;", "+        final Iterator it = mModifiers.iterator();", "+        do {", "+            if (!it.hasNext()) {", "+                return null;", "-            final String modifier = (String) it.next();", "-            while (i < JLS_ORDER.length && !JLS_ORDER[i].equals(modifier))", "-            {", "+", "+            modifier = (String) it.next();", "+            while ((i < JLS_ORDER.length) && !JLS_ORDER[i].equals(modifier)) {", "-        return false;", "+", "+        return \"'\" + modifier", "+            + \"' modifier out of order with the JLS suggestions.\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fa4682fd03177bf77d7dad0cd6458bc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java", "commitBeforeChange": "6985c4758d4a3252951a6a26b8efdd7b5f0adff4", "commitAfterChange": "b405880b6e79f143c3ba3651fe6c8b68324fca51", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["+            case TokenTypes.SEMI:", "+                lastStatementEnd = ast.getLineNo();", "+                forStatementEnd = -1;", "+                break;", "-                break;", "-            case TokenTypes.EXPR:", "-                exprDepth--;"]}]}
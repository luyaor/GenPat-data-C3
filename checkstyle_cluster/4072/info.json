{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2dc504f523f0f9877736e276e5e04d9a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a9a9e5b5c6636131e9ad8f9dc0b27ec", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "3d8fc87ef60d4e96068658ed0485aafdb2a42691", "commitAfterChange": "e27489c7721909245ea5055eac3b9c7c659081f6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "         public Tag(int aLine, int aColumn, String aText, boolean aOn)             throws ConversionException", "signatureAfterChange": "         public Tag(int aLine, int aColumn, String aText, boolean aOn)             throws ConversionException", "diff": ["-            //Does not intern REs with Utils.getRE()", "+            //Does not intern Patterns with Utils.getPattern()", "-                    mTagCheckRegexp = new RE(format);", "+                    mTagCheckRegexp = Pattern.compile(format);", "-                        mTagMessageRegexp = new RE(format);", "+                        mTagMessageRegexp = Pattern.compile(format);", "-                    mTagCheckRegexp = new RE(format);", "+                    mTagCheckRegexp = Pattern.compile(format);", "-                        mTagMessageRegexp = new RE(format);", "+                        mTagMessageRegexp = Pattern.compile(format);", "-            catch (RESyntaxException e) {", "+            catch (PatternSyntaxException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "578c02715ed451811db8e9ebd602b980", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "2af34e2adcd4d120d7400103d2dac3d5ee20f65b", "commitAfterChange": "aa4e40e550403d61ce550a2056407fda43a22936", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "         public boolean isMatch(AuditEvent event)", "signatureAfterChange": "         public boolean isMatch(AuditEvent event)", "diff": ["-            final Matcher tagMatcher =", "-                tagCheckRegexp.matcher(event.getSourceName());", "+            boolean match = false;", "+            final Matcher tagMatcher = tagCheckRegexp.matcher(event.getSourceName());", "-                    final Matcher messageMatcher =", "-                            tagMessageRegexp.matcher(event.getMessage());", "-                    return messageMatcher.find();", "+                    final Matcher messageMatcher = tagMessageRegexp.matcher(event.getMessage());", "+                    match = messageMatcher.find();", "-                return true;", "+                else {", "+                    match = true;", "+                }", "-            return false;", "+            return match;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8af8b2aeb9b71264c26def1949b2250", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "c4853b445219fd3d31d290c37184e46a8c4161ed", "commitAfterChange": "8d800ef546e11c6d593154f4071e39cdc4f66f34", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private int getGroupNumber(String aName)", "signatureAfterChange": "     private int getGroupNumber(String aName)", "diff": ["+        int bestIndex = mGroups.length;", "+        int bestLength = -1;", "+        int bestPos = 0;", "+", "-            if (aName.startsWith(mGroups[i])) {", "-                return i;", "+            final Matcher matcher = mGroups[i].matcher(aName);", "+            while (matcher.find()) {", "+                final int length = matcher.end() - matcher.start();", "+                if ((length > bestLength)", "+                    || ((length == bestLength) && (matcher.start() < bestPos)))", "+                {", "+                    bestIndex = i;", "+                    bestLength = length;", "+                    bestPos = matcher.start();", "+                }", "-        // no match, so we return the wildcard group", "-        return mWildcardGroupIndex;", "+        return bestIndex;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f9ac003a8d1ecf2be23c7c3ea70b9c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1096270515e492545a1104a8412d5398", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "42d34c7e16ebc69b0a33febb73c9fa318351e212", "commitAfterChange": "72be23f288369fdd9e562999bb9b0e2ff646c897", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkComment(DetailAST aAST, TextBlock aComment)", "signatureAfterChange": "     private void checkComment(DetailAST aAST, TextBlock aComment)", "diff": ["-        // Check for only one @see tag", "-        if ((tags.size() != 1)", "-            || !((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())", "-        {", "-            checkParamTags(tags, getParameters(aAST));", "-            checkThrowsTags(tags, getThrows(aAST));", "-            if (isFunction(aAST)) {", "-                checkReturnTag(tags, aAST.getLineNo());", "-            }", "-            // Dump out all unused tags", "-            final Iterator it = tags.iterator();", "-            while (it.hasNext()) {", "-                final JavadocTag jt = (JavadocTag) it.next();", "-                if (!jt.isSeeOrInheritDocTag()) {", "-                    log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");", "-                }", "+        // Check for only one @see or inheritDoc tag", "+        if ((tags.size() == 1)", "+            && ((JavadocTag) tags.get(0)).isSeeOrInheritDocTag())", "+        {", "+            return;", "+        }", "+", "+        // Check for inheritDoc", "+        boolean hasInheritDocTag = false;", "+        Iterator it = tags.iterator();", "+        while (it.hasNext() && !hasInheritDocTag) {", "+            hasInheritDocTag |=", "+                ((JavadocTag) it.next()).isInheritDocTag();", "+        }", "+", "+        checkParamTags(tags, getParameters(aAST), !hasInheritDocTag);", "+        checkThrowsTags(tags, getThrows(aAST), !hasInheritDocTag);", "+        if (isFunction(aAST)) {", "+            checkReturnTag(tags, aAST.getLineNo(), !hasInheritDocTag);", "+        }", "+", "+        // Dump out all unused tags", "+        it = tags.iterator();", "+        while (it.hasNext()) {", "+            final JavadocTag jt = (JavadocTag) it.next();", "+            if (!jt.isSeeOrInheritDocTag()) {", "+                log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e3d132ce70959682abcc192f50a47c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "6f6e4db399353f769525820d9a7319287105d3e5", "commitAfterChange": "06c32930c34e2b10b5926883c29a4a20fe6ecf05", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+", "+                List typeParamNames = CheckUtils.getTypeParameterNames(aAST);", "+                if (!mAllowMissingParamTags) {", "+                    //Check type parameters that should exist, do", "+                    for (Iterator typeParamNameIt = typeParamNames.iterator();", "+                         typeParamNameIt.hasNext();) {", "+                        checkTypeParamTag(", "+                            lineNo, tags, (String) typeParamNameIt.next());", "+                    }", "+                }", "+", "+                checkUnusedTypeParamTags(tags, typeParamNames);"]}]}
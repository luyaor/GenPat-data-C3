{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aa435a98cc41c407184aa91cbf800a80", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aead43eb6da6939f33536b6a1a857db4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "de6862e0bedab5c22d54b4cf503144c28f1aea26", "commitAfterChange": "55c2560774f0624afeae9e6c29fd19ae59e8c24b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+", "-        final int type = aAST.getType();", "+        final int currentType = aAST.getType();", "-        if (((type == TokenTypes.RCURLY) || (type == TokenTypes.LCURLY))", "+        if (((currentType == TokenTypes.RCURLY)", "+                || (currentType == TokenTypes.LCURLY))", "-        if ((type == TokenTypes.STAR)", "+        if ((currentType == TokenTypes.STAR)", "-        if ((type == TokenTypes.SLIST)", "+        if ((currentType == TokenTypes.SLIST)", "-        if ((type == TokenTypes.COLON)) {", "+        if ((currentType == TokenTypes.COLON)) {", "-        // Check for allowed empty method or ctor blocks.", "-        if (emptyMethodBlockCheck(aAST, parentType)", "-            || emptyCtorBlockCheck(aAST, parentType))", "+        // Checks if empty methods, ctors or loops are allowed.", "+        if (isEmptyMethodBlock(aAST, parentType)", "+                || isEmptyCtorBlock(aAST, parentType)", "+                || isEmptyLoop(aAST, parentType))", "+            return;", "+        }", "+", "+        // Checks if empty classes, interfaces or enums are allowed", "+        if (mAllowEmptyTypes && (isEmptyType(aAST, parentType))) {", "-            && !((type == TokenTypes.LITERAL_RETURN)", "+            && !((currentType == TokenTypes.LITERAL_RETURN)", "-            && !((type == TokenTypes.RCURLY)", "+            && !((currentType == TokenTypes.RCURLY)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b275df612ac05c445758c1134aadbf4c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/SlistHandler.java", "commitBeforeChange": "3da302031b2db9966ce7791053e2c0dba095083d", "commitAfterChange": "3a75454e8dce5c5d5b2d43e80b4a4ed5dbceece3", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean hasBlockParent()", "signatureAfterChange": "     private boolean hasBlockParent()", "diff": ["-        int parentType = getMainAst().getParent().getType();", "-        return parentType == TokenTypes.LITERAL_IF", "-            || parentType == TokenTypes.LITERAL_FOR", "-            || parentType == TokenTypes.LITERAL_WHILE", "-            || parentType == TokenTypes.LITERAL_DO", "-            || parentType == TokenTypes.LITERAL_ELSE", "-            || parentType == TokenTypes.LITERAL_TRY", "-            || parentType == TokenTypes.LITERAL_CATCH", "-            || parentType == TokenTypes.LITERAL_FINALLY", "-            || parentType == TokenTypes.CTOR_DEF", "-            || parentType == TokenTypes.METHOD_DEF", "-            || parentType == TokenTypes.STATIC_INIT;", "+        final int parentType = getMainAst().getParent().getType();", "+        return (parentType == TokenTypes.LITERAL_IF)", "+            || (parentType == TokenTypes.LITERAL_FOR)", "+            || (parentType == TokenTypes.LITERAL_WHILE)", "+            || (parentType == TokenTypes.LITERAL_DO)", "+            || (parentType == TokenTypes.LITERAL_ELSE)", "+            || (parentType == TokenTypes.LITERAL_TRY)", "+            || (parentType == TokenTypes.LITERAL_CATCH)", "+            || (parentType == TokenTypes.LITERAL_FINALLY)", "+            || (parentType == TokenTypes.CTOR_DEF)", "+            || (parentType == TokenTypes.METHOD_DEF)", "+            || (parentType == TokenTypes.STATIC_INIT);"]}]}
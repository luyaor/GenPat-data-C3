{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eaf703df4e39769ee5d8a4aa8b7c9a7e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5506f0101cd77227ac6c4d9bd34c9712", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "ccb3b8a5a972d71f26eda2cc11ef3ed5655372ec", "commitAfterChange": "365ff682dba7da5132da20174a09f5d74d2498ee", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void checkUnusedTypeParamTags(         final List<JavadocTag> tags,         final List<String> typeParamNames)", "signatureAfterChange": "     private void checkUnusedTypeParamTags(         final List<JavadocTag> tags,         final List<String> typeParamNames)", "diff": ["-                if (tag.getArg1() != null) {", "-", "-                    final Matcher matcher = pattern.matcher(tag.getArg1());", "-                    String typeParamName = null;", "-", "-                    if (matcher.matches()) {", "-                        typeParamName = matcher.group(1).trim();", "-                        if (!typeParamNames.contains(typeParamName)) {", "-                            log(tag.getLineNo(), tag.getColumnNo(),", "-                                UNUSED_TAG,", "-                                JavadocTagInfo.PARAM.getText(),", "-                                \"<\" + typeParamName + \">\");", "-                        }", "-                    }", "-                    else {", "-                        log(tag.getLineNo(), tag.getColumnNo(),", "-                            UNUSED_TAG_GENERAL);", "-                    }", "-                }", "-                else {", "+                final Matcher matcher = pattern.matcher(tag.getArg1());", "+                matcher.find();", "+                final String typeParamName = matcher.group(1).trim();", "+                if (!typeParamNames.contains(typeParamName)) {", "-                        UNUSED_TAG_GENERAL);", "+                        UNUSED_TAG,", "+                        JavadocTagInfo.PARAM.getText(),", "+                        \"<\" + typeParamName + \">\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebe1c8d3a01092b8f8e03f9d8a0c0843", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "cefc92307ed110e14257c47e123426fb88e21a9b", "commitAfterChange": "2b32b003ab81c9bfcb8205b512eb4ea313e529af", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "signatureAfterChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "diff": ["-                if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)", "-                    && prevLineLen + 2 <= maxLineLength) {", "-                    log(brace.getLineNo(), brace.getColumnNo(),", "-                        MSG_KEY_LINE_PREVIOUS, \"{\");", "-                }", "-                if (!hasLineBreakAfter(brace)) {", "-                    log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);", "-                }", "+", "+                validateEol(brace, braceLine, prevLineLen);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fb0037d7f2b4b6f8c457837c06f2d32", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c45d765ba546b27bda773298eb32534", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CommitValidationTest.java", "commitBeforeChange": "d1c5d416666252a520696d079945d17f50c83968", "commitAfterChange": "e7edc7118da8c40cba7b1497fa336e6b61d70031", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private static List<RevCommit> getCommitsToCheck() throws Exception", "signatureAfterChange": "      private static List<RevCommit> getCommitsToCheck() throws Exception", "diff": ["-        Repository repo = new FileRepositoryBuilder().findGitDir().build();", "-", "-        RevCommitsPair revCommitsPair = resolveRevCommitsPair(repo);", "-        if (COMMITS_RESOLUTION_MODE == CommitsResolutionMode.BY_COUNTER) {", "-            commits = getCommitsByCounter(revCommitsPair.getFirst());", "-            commits.addAll(getCommitsByCounter(revCommitsPair.getSecond()));", "-        }", "-        else {", "-            commits = getCommitsByLastCommitAuthor(revCommitsPair.getFirst());", "-            commits.addAll(getCommitsByLastCommitAuthor(revCommitsPair.getSecond()));", "+        try (Repository repo = new FileRepositoryBuilder().findGitDir().build()) {", "+            RevCommitsPair revCommitsPair = resolveRevCommitsPair(repo);", "+            if (COMMITS_RESOLUTION_MODE == CommitsResolutionMode.BY_COUNTER) {", "+                commits = getCommitsByCounter(revCommitsPair.getFirst());", "+                commits.addAll(getCommitsByCounter(revCommitsPair.getSecond()));", "+            }", "+            else {", "+                commits = getCommitsByLastCommitAuthor(revCommitsPair.getFirst());", "+                commits.addAll(getCommitsByLastCommitAuthor(revCommitsPair.getSecond()));", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f9ea2ff42fb0efeb0b6b7d9f91af59d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "7e1062dea1fae14b90ae6461625c259ed944d1e4", "commitAfterChange": "f5e4d9b42a3ebda0adc7f7616f1b00c189f20733", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      void verify(Checker aC,             File[] aProcessedFiles,             String aMessageFileName,             String[] aExpected,             Integer... aWarnsExpected)         throws Exception", "signatureAfterChange": "      void verify(Checker aC,             File[] aProcessedFiles,             String aMessageFileName,             String[] aExpected,             Integer... aWarnsExpected)         throws Exception", "diff": ["-        final LineNumberReader lnr =", "-            new LineNumberReader(new InputStreamReader(localStream, StandardCharsets.UTF_8));", "+        try (final LineNumberReader lnr = new LineNumberReader(", "+                new InputStreamReader(localStream, StandardCharsets.UTF_8))) {", "-        for (int i = 0; i < aExpected.length; i++) {", "-            final String expected = aMessageFileName + \":\" + aExpected[i];", "-            String actual = lnr.readLine();", "-            assertEquals(\"error message \" + i, expected, actual);", "-            String parseInt = removeDeviceFromPathOnWindows(actual);", "-            parseInt = parseInt.substring(parseInt.indexOf(':') + 1);", "-            parseInt = parseInt.substring(0, parseInt.indexOf(':'));", "-            int lineNumber = Integer.parseInt(parseInt);", "-\t\t\tInteger integer = Arrays.asList(aWarnsExpected).contains(lineNumber) ? lineNumber : 0;", "-            assertEquals(\"error message \" + i, (long) integer, lineNumber);", "+            for (int i = 0; i < aExpected.length; i++) {", "+                final String expected = aMessageFileName + \":\" + aExpected[i];", "+                String actual = lnr.readLine();", "+                assertEquals(\"error message \" + i, expected, actual);", "+                String parseInt = removeDeviceFromPathOnWindows(actual);", "+                parseInt = parseInt.substring(parseInt.indexOf(':') + 1);", "+                parseInt = parseInt.substring(0, parseInt.indexOf(':'));", "+                int lineNumber = Integer.parseInt(parseInt);", "+                Integer integer = Arrays.asList(aWarnsExpected).contains(lineNumber) ? lineNumber : 0;", "+                assertEquals(\"error message \" + i, (long) integer, lineNumber);", "+            }", "+", "+            assertEquals(\"unexpected output: \" + lnr.readLine(),", "+                    aExpected.length, errs);", "-", "-        assertEquals(\"unexpected output: \" + lnr.readLine(),", "-                     aExpected.length, errs);"]}]}
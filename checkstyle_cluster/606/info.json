{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "605ca7c6330e3993091f661fa305e846", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c466da6d06410cfedd15b327506b4c3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "9309a784711a3510b8e8de08b3543fcc4cdb4813", "commitAfterChange": "e03dd7a0a03f9cf91e466ebee911ef0fa10130a4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (aAST.getType() == TokenTypes.CLASS_DEF) {", "-            //push", "-            mClassStack.add(new ClassAttributes());", "-        }", "-        else {", "-            // METHOD_DEF", "-            if (!ScopeUtils.inInterfaceBlock(aAST) && isEqualsMethod(aAST)) {", "-                final ClassAttributes attrs =", "-                    (ClassAttributes) mClassStack.getLast();", "-                if (hasObjectParameter(aAST)) {", "-                    attrs.setHasEqualsObject();", "+        if (aAST.getType() == TokenTypes.METHOD_DEF) {", "+            final DetailAST definer = getDefiner(aAST);", "+            final int type = definer.getType();", "+            if ((type == TokenTypes.CLASS_DEF)", "+                || (type == TokenTypes.LITERAL_NEW))", "+            {", "+                if (mClassStack.isEmpty()) {", "+                    mClassStack.add(new ClassAttributes(definer));", "-                else {", "-                    attrs.addEqualsNode(aAST);", "+                final ClassAttributes attrs =", "+                        (ClassAttributes) mClassStack.getLast();", "+                final DetailAST currentRoot = attrs.getRootAST();", "+                if (definer != currentRoot) {", "+                    mClassStack.add(new ClassAttributes(definer));", "+                }", "+                if (!ScopeUtils.inInterfaceBlock(aAST)", "+                    && isEqualsMethod(aAST))", "+                {", "+                    if (hasObjectParameter(aAST)) {", "+                        attrs.setHasEqualsObject();", "+                    }", "+                    else {", "+                        attrs.addEqualsNode(aAST);", "+                    }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d05bc80e007650656315ead01e2e532", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "9309a784711a3510b8e8de08b3543fcc4cdb4813", "commitAfterChange": "e03dd7a0a03f9cf91e466ebee911ef0fa10130a4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "     public void leaveToken(DetailAST aAST)", "diff": ["-        if (aAST.getType() == TokenTypes.CLASS_DEF) {", "-            //pop and report equals errors", "-            final ClassAttributes attrs =", "-                (ClassAttributes) mClassStack.removeLast();", "-            final Set equalsNodes = attrs.getEqualsNodes();", "-            final Iterator it = equalsNodes.iterator();", "-            while (it.hasNext()) {", "-                final DetailAST equalsAST = (DetailAST) it.next();", "-                final DetailAST nameNode =", "-                    equalsAST.findFirstToken(TokenTypes.IDENT);", "-                log(nameNode.getLineNo(), nameNode.getColumnNo(),", "-                        \"covariant.equals\");", "+        final int type = aAST.getType();", "+        if ((type == TokenTypes.LITERAL_NEW)", "+            || (type == TokenTypes.CLASS_DEF))", "+        {", "+            // pop class stack", "+            if (!mClassStack.isEmpty()) {", "+                final ClassAttributes attrs =", "+                    (ClassAttributes) mClassStack.getLast();", "+                if (attrs.getRootAST() == aAST) {", "+                    mClassStack.removeLast();", "+                    final Set equalsNodes = attrs.getEqualsNodes();", "+                    final Iterator it = equalsNodes.iterator();", "+                    while (it.hasNext()) {", "+                        final DetailAST equalsAST = (DetailAST) it.next();", "+                        final DetailAST nameNode =", "+                            equalsAST.findFirstToken(TokenTypes.IDENT);", "+                        log(nameNode.getLineNo(), nameNode.getColumnNo(),", "+                            \"covariant.equals\");", "+                    }", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fe6a4a939731f19514f2f0d4810f555", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "5a3f05ec8038daa674666bbaa82d59127aa74f92", "commitAfterChange": "99ce97725cd037d152c571e5ff58eac9247d072d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void processField(DetailAST ast, int parentType)", "signatureAfterChange": "     private void processField(DetailAST ast, int parentType)", "diff": ["-        if (ScopeUtils.getSurroundingScope(ast) == null) {", "-            // it is not a class or interface it's", "-            // either import or package", "-            // we shouldn't checks this", "-            return;", "-        }", "+        final boolean importOrPackage = ScopeUtils.getSurroundingScope(ast) == null;", "+        final boolean methodNameInMethodCall = parentType == TokenTypes.DOT", "+                && ast.getPreviousSibling() != null;", "+        final boolean typeName = parentType == TokenTypes.TYPE", "+                || parentType == TokenTypes.LITERAL_NEW;", "-        if (parentType == TokenTypes.DOT", "-                && ast.getPreviousSibling() != null) {", "-            // it's the method name in a method call; no problem", "-            return;", "-        }", "-        if (parentType == TokenTypes.TYPE", "-                || parentType == TokenTypes.LITERAL_NEW) {", "-            // it's a type name; no problem", "-            return;", "-        }", "-        if (isDeclarationToken(parentType)) {", "-            // it's being declared; no problem", "-            return;", "-        }", "+        if (!importOrPackage", "+                && !methodNameInMethodCall", "+                && !typeName", "+                && !isDeclarationToken(parentType)) {", "-        final String name = ast.getText();", "-        if (isClassField(name)) {", "-            log(ast, MSG_VARIABLE, name);", "+            final String name = ast.getText();", "+", "+            if (isClassField(name)) {", "+                log(ast, MSG_VARIABLE, name);", "+            }"]}]}
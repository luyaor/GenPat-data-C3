{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5919b650d230c1565e4060681d73435d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06afa91384d956572cfebad08021935d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public final void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public final void visitToken(DetailAST ast)", "diff": ["-    public final void visitToken(DetailAST aAST)", "+    public final void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {", "-            processPackage(aAST);", "+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {", "+            processPackage(ast);", "-        else if (aAST.getType() == TokenTypes.IMPORT) {", "-            processImport(aAST);", "+        else if (ast.getType() == TokenTypes.IMPORT) {", "+            processImport(ast);", "-        else if ((aAST.getType() == TokenTypes.CLASS_DEF)", "-                 || (aAST.getType() == TokenTypes.INTERFACE_DEF)", "-                 || (aAST.getType() == TokenTypes.ENUM_DEF))", "+        else if ((ast.getType() == TokenTypes.CLASS_DEF)", "+                 || (ast.getType() == TokenTypes.INTERFACE_DEF)", "+                 || (ast.getType() == TokenTypes.ENUM_DEF))", "-            processClass(aAST);", "+            processClass(ast);", "-            if (aAST.getType() == TokenTypes.METHOD_DEF) {", "-                processTypeParams(aAST);", "+            if (ast.getType() == TokenTypes.METHOD_DEF) {", "+                processTypeParams(ast);", "-            processAST(aAST);", "+            processAST(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "248033527e38a73d3115f06584bda0f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/AbbreviationAsWordInNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean isIgnoreSituation(DetailAST aAst)", "signatureAfterChange": "     private boolean isIgnoreSituation(DetailAST ast)", "diff": ["-    private boolean isIgnoreSituation(DetailAST aAst)", "+    private boolean isIgnoreSituation(DetailAST ast)", "-        final DetailAST modifiers = aAst.getFirstChild();", "+        final DetailAST modifiers = ast.getFirstChild();", "-        if (aAst.getType() == TokenTypes.VARIABLE_DEF) {", "-            if ((mIgnoreFinal || mIgnoreStatic)", "-                    && isInterfaceDeclaration(aAst))", "+        if (ast.getType() == TokenTypes.VARIABLE_DEF) {", "+            if ((ignoreFinal || ignoreStatic)", "+                    && isInterfaceDeclaration(ast))", "-                result = (mIgnoreFinal", "+                result = (ignoreFinal", "-                    || (mIgnoreStatic", "+                    || (ignoreStatic", "-        else if (aAst.getType() == TokenTypes.METHOD_DEF) {", "-            result = mIgnoreOverriddenMethods", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            result = ignoreOverriddenMethods"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d8d545e60d47bd37ea8cbcd4f745cac", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "343b75b252db9492ace4c4e5bfb36016e631c7a5", "commitAfterChange": "f9f60d3142533c3eebff775e8eb1159935faaba1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private Set<String> getModifiers(DetailAST variableDefAST)", "signatureAfterChange": "     private static Set<String> getModifiers(DetailAST defAST)", "diff": ["-    private Set<String> getModifiers(DetailAST variableDefAST)", "+    private static Set<String> getModifiers(DetailAST defAST)", "-        final AST modifiersAST = variableDefAST.getFirstChild();", "-        if (modifiersAST.getType() != TokenTypes.MODIFIERS) {", "-            throw new IllegalStateException(\"Strange parse tree\");", "+        final AST modifiersAST = defAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final Set<String> modifiersSet = new HashSet<>();", "+        if (modifiersAST != null) {", "+            AST modifier = modifiersAST.getFirstChild();", "+            while (modifier != null) {", "+                modifiersSet.add(modifier.getText());", "+                modifier = modifier.getNextSibling();", "+            }", "-        final Set<String> retVal = Sets.newHashSet();", "-        AST modifier = modifiersAST.getFirstChild();", "-        while (modifier != null) {", "-            retVal.add(modifier.getText());", "-            modifier = modifier.getNextSibling();", "-        }", "-        return retVal;", "+        return modifiersSet;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40c0e6f6b0c0b786c63969260794f97e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "f8ba0d727928aaa1275758fa09114155faab0b9e", "commitAfterChange": "af52963008a800390e8b356db5811886572f37a3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean isSuperCall(DetailAST ast)", "signatureAfterChange": "     private boolean isSuperCall(DetailAST literalSuperAst)", "diff": ["-    private boolean isSuperCall(DetailAST ast) {", "-        if (ast.getType() != TokenTypes.LITERAL_SUPER) {", "+    private boolean isSuperCall(DetailAST literalSuperAst) {", "+        if (literalSuperAst.getType() != TokenTypes.LITERAL_SUPER) {", "-        DetailAST parent = ast.getParent();", "-        if (parent == null || parent.getType() != TokenTypes.DOT) {", "-            return false;", "-        }", "-", "-        if (isSameNameMethod(ast)) {", "-            return false;", "-        }", "-        if (isZeroParameters(parent)) {", "+        DetailAST dotAst = literalSuperAst.getParent();", "+        if (dotAst.getType() != TokenTypes.DOT", "+            || isSameNameMethod(literalSuperAst)", "+            || hasArguments(dotAst)) {", "-        while (parent != null) {", "-            if (parent.getType() == TokenTypes.METHOD_DEF) {", "-                return isOverridingMethod(parent);", "+        while (dotAst != null) {", "+            if (dotAst.getType() == TokenTypes.METHOD_DEF) {", "+                return isOverridingMethod(dotAst);", "-            else if (parent.getType() == TokenTypes.CTOR_DEF", "-                || parent.getType() == TokenTypes.INSTANCE_INIT) {", "+            else if (dotAst.getType() == TokenTypes.CTOR_DEF", "+                || dotAst.getType() == TokenTypes.INSTANCE_INIT) {", "-            parent = parent.getParent();", "+            dotAst = dotAst.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57734a9c7bf52894a562b24df9ac5c23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "176301250bfd2063f405fed4a960064e0a3e0230", "commitAfterChange": "61afa5374e2df61b421357868481edcc4e94845f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private static boolean containsAllSafeTokens(final DetailAST expr)", "signatureAfterChange": "     private boolean containsAllSafeTokens(final DetailAST expr)", "diff": ["-    private static boolean containsAllSafeTokens(final DetailAST expr) {", "+    private boolean containsAllSafeTokens(final DetailAST expr) {", "-        if (arg.branchContains(TokenTypes.METHOD_CALL)) {", "-            return false;", "-        }", "-        //Plus assignment can have ill affects", "-        //do not want to recommend moving expression", "-        //See example:", "-        //String s = \"SweetString\";", "-        //s.equals(s += \"SweetString\"); //false", "-        //s = \"SweetString\";", "-        //(s += \"SweetString\").equals(s); //true", "+        boolean argIsNotNull = false;", "+        if (arg.getType() == TokenTypes.PLUS) {", "+            DetailAST child = arg.getFirstChild();", "+            while (child != null", "+                    && !argIsNotNull) {", "+                argIsNotNull = child.getType() == TokenTypes.STRING_LITERAL", "+                        || child.getType() == TokenTypes.IDENT;", "+                child = child.getNextSibling();", "+            }", "+        }", "-        return !arg.branchContains(TokenTypes.PLUS_ASSIGN)", "-                && !arg.branchContains(TokenTypes.IDENT)", "-                && !arg.branchContains(TokenTypes.LITERAL_NULL);", "+        return argIsNotNull", "+                || !arg.branchContains(TokenTypes.IDENT)", "+                    && !arg.branchContains(TokenTypes.LITERAL_NULL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d68c654318c238bda86db4425f0c440", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public final void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public final void leaveToken(DetailAST ast)", "diff": ["-    public final void leaveToken(DetailAST aAST)", "+    public final void leaveToken(DetailAST ast)", "-        if ((aAST.getType() == TokenTypes.CLASS_DEF)", "-            || (aAST.getType() == TokenTypes.ENUM_DEF))", "+        if ((ast.getType() == TokenTypes.CLASS_DEF)", "+            || (ast.getType() == TokenTypes.ENUM_DEF))", "-            int dotIdx = mCurrentClass.lastIndexOf(\"$\");", "+            int dotIdx = currentClass.lastIndexOf(\"$\");", "-                dotIdx = mCurrentClass.lastIndexOf(\".\");", "+                dotIdx = currentClass.lastIndexOf(\".\");", "-                mCurrentClass = \"\";", "+                currentClass = \"\";", "-                mCurrentClass = mCurrentClass.substring(0, dotIdx);", "+                currentClass = currentClass.substring(0, dotIdx);", "-            mTypeParams.pop();", "+            typeParams.pop();", "-        else if (aAST.getType() == TokenTypes.METHOD_DEF) {", "-            mTypeParams.pop();", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            typeParams.pop();", "-        else if ((aAST.getType() != TokenTypes.PACKAGE_DEF)", "-                 && (aAST.getType() != TokenTypes.IMPORT))", "+        else if ((ast.getType() != TokenTypes.PACKAGE_DEF)", "+                 && (ast.getType() != TokenTypes.IMPORT))", "-            leaveAST(aAST);", "+            leaveAST(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f59438ba8ae65e21384f9249031ffed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.IDENT) {", "-            if (mCollect) {", "-                processIdent(aAST);", "+        if (ast.getType() == TokenTypes.IDENT) {", "+            if (collect) {", "+                processIdent(ast);", "-        else if (aAST.getType() == TokenTypes.IMPORT) {", "-            processImport(aAST);", "+        else if (ast.getType() == TokenTypes.IMPORT) {", "+            processImport(ast);", "-        else if (aAST.getType() == TokenTypes.STATIC_IMPORT) {", "-            processStaticImport(aAST);", "+        else if (ast.getType() == TokenTypes.STATIC_IMPORT) {", "+            processStaticImport(ast);", "-            mCollect = true;", "-            if (mProcessJavadoc) {", "-                processJavadoc(aAST);", "+            collect = true;", "+            if (processJavadoc) {", "+                processJavadoc(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad1317aea51f6763323d8687f0a363f7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportControlCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST ast)", "diff": ["-    public void visitToken(final DetailAST aAST)", "+    public void visitToken(final DetailAST ast)", "-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {", "-            final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();", "+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {", "+            final DetailAST nameAST = ast.getLastChild().getPreviousSibling();", "-            if (mRoot == null) {", "+            if (root == null) {", "-                mInPkg = full.getText();", "-                mCurrentLeaf = mRoot.locateFinest(mInPkg);", "-                if (mCurrentLeaf == null) {", "+                inPkg = full.getText();", "+                currentLeaf = root.locateFinest(inPkg);", "+                if (currentLeaf == null) {", "-        else if (mCurrentLeaf != null) {", "+        else if (currentLeaf != null) {", "-            if (aAST.getType() == TokenTypes.IMPORT) {", "-                imp = FullIdent.createFullIdentBelow(aAST);", "+            if (ast.getType() == TokenTypes.IMPORT) {", "+                imp = FullIdent.createFullIdentBelow(ast);", "-                imp = FullIdent.createFullIdent(aAST", "+                imp = FullIdent.createFullIdent(ast", "-            final AccessResult access = mCurrentLeaf.checkAccess(imp.getText(),", "-                    mInPkg);", "+            final AccessResult access = currentLeaf.checkAccess(imp.getText(),", "+                    inPkg);", "-                log(aAST, \"import.control.disallowed\", imp.getText());", "+                log(ast, \"import.control.disallowed\", imp.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0161c98521b74f9ff70dc3421f458d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "6e96026ec6d95fc5eadd3044cab91c24c73c8e0c", "commitAfterChange": "e00c478dd61d9d883e41b500b780ab217582c2e7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        DetailAST theAst = aAST;", "-        if (aAST.getType() != TokenTypes.RPAREN) {", "-            if ((aAST.getType() == TokenTypes.CTOR_CALL)", "-                || (aAST.getType() == TokenTypes.SUPER_CTOR_CALL))", "+        if (theAst.getType() != TokenTypes.RPAREN) {", "+            if ((theAst.getType() == TokenTypes.CTOR_CALL)", "+                || (theAst.getType() == TokenTypes.SUPER_CTOR_CALL))", "-                aAST = aAST.getFirstChild();", "+                theAst = theAst.getFirstChild();", "-            if (!isPreceedsEmptyForInit(aAST)) {", "-                processLeft(aAST);", "+            if (!isPreceedsEmptyForInit(theAst)) {", "+                processLeft(theAst);", "-        else if ((aAST.getParent() == null)", "-                 || (aAST.getParent().getType() != TokenTypes.TYPECAST)", "-                 || (aAST.getParent().findFirstToken(TokenTypes.RPAREN)", "-                     != aAST))", "+        else if ((theAst.getParent() == null)", "+                 || (theAst.getParent().getType() != TokenTypes.TYPECAST)", "+                 || (theAst.getParent().findFirstToken(TokenTypes.RPAREN)", "+                     != theAst))", "-            if (!isFollowsEmptyForIterator(aAST)) {", "-                processRight(aAST);", "+            if (!isFollowsEmptyForIterator(theAst)) {", "+                processRight(theAst);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9ccdc51daaca73683c16e923b9afa0f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {", "-            if (mCustomImportOrderRules.contains(SAME_PACKAGE_RULE_GROUP)", "-                    && mSamePackageMatchingDepth != -1)", "+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {", "+            if (customImportOrderRules.contains(SAME_PACKAGE_RULE_GROUP)", "+                    && samePackageMatchingDepth != -1)", "-                mSamePackageDomainsRegExp = createSamePackageRegexp(", "-                        mSamePackageMatchingDepth, aAST);", "+                samePackageDomainsRegExp = createSamePackageRegexp(", "+                        samePackageMatchingDepth, ast);", "-            final String importFullPath = getFullImportIdent(aAST);", "-            final int lineNo = aAST.getLineNo();", "-            final boolean isStatic = aAST.getType() == TokenTypes.STATIC_IMPORT;", "-            mImportToGroupList.add(new ImportDetails(importFullPath,", "+            final String importFullPath = getFullImportIdent(ast);", "+            final int lineNo = ast.getLineNo();", "+            final boolean isStatic = ast.getType() == TokenTypes.STATIC_IMPORT;", "+            importToGroupList.add(new ImportDetails(importFullPath,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2137c08bbf061ab3c54f5743eb3faca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (shouldCheck(aAST)) {", "+        if (shouldCheck(ast)) {", "-            final int lineNo = aAST.getLineNo();", "+            final int lineNo = ast.getLineNo();", "-            else if (ScopeUtils.isOuterMostType(aAST)) {", "+            else if (ScopeUtils.isOuterMostType(ast)) {", "-                         mAuthorFormatPattern, mAuthorFormat);", "+                         authorFormatPattern, authorFormat);", "-                         mVersionFormatPattern, mVersionFormat);", "+                         versionFormatPattern, versionFormat);", "-                    CheckUtils.getTypeParameterNames(aAST);", "+                    CheckUtils.getTypeParameterNames(ast);", "-                if (!mAllowMissingParamTags) {", "+                if (!allowMissingParamTags) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3089ce2efd80fcbfe130e2e936ec57f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private static String getIdentifier(DetailAST aAST)", "signatureAfterChange": "     private static String getIdentifier(DetailAST ast)", "diff": ["-    private static String getIdentifier(DetailAST aAST)", "+    private static String getIdentifier(DetailAST ast)", "-        if (aAST != null) {", "-            if (aAST.getType() == TokenTypes.IDENT) {", "-                return aAST.getText();", "+        if (ast != null) {", "+            if (ast.getType() == TokenTypes.IDENT) {", "+                return ast.getText();", "-            else if (aAST.getType() == TokenTypes.DOT) {", "-                return getIdentifier(aAST.getFirstChild()) + \".\"", "-                    + getIdentifier(aAST.getLastChild());", "+            else if (ast.getType() == TokenTypes.DOT) {", "+                return getIdentifier(ast.getFirstChild()) + \".\"", "+                    + getIdentifier(ast.getLastChild());", "-        throw new IllegalArgumentException(\"Identifier AST expected: \" + aAST);", "+        throw new IllegalArgumentException(\"Identifier AST expected: \" + ast);"]}]}
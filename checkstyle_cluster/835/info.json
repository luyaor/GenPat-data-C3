{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "770f256d72d0a421970da665a58447d9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "785ced785c2847ebb5d74af822f59cae", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "c3674faad8a38656e910750fb22a7eef714fb8a7", "commitAfterChange": "c3c1b9ae062635d0be858088ed2c1fcf366ec33f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public boolean accept(AuditEvent event)", "signatureAfterChange": "      @Override     public boolean accept(AuditEvent event)", "diff": ["-        if (event.getLocalizedMessage() == null) {", "-            // A special event", "-            return true;", "-        }", "+        boolean accepted = true;", "-        // Lazy update. If the first event for the current file, update file", "-        // contents and tag suppressions", "-        final FileContents currentContents = FileContentsHolder.getContents();", "-        if (currentContents == null) {", "-            // we have no contents, so we can not filter.", "-            return true;", "-        }", "-        if (getFileContents() != currentContents) {", "-            setFileContents(currentContents);", "-            tagSuppressions();", "-        }", "-        for (final Tag tag : tags) {", "-            if (tag.isMatch(event)) {", "-                return false;", "+        if (event.getLocalizedMessage() != null) {", "+            // Lazy update. If the first event for the current file, update file", "+            // contents and tag suppressions", "+            final FileContents currentContents = FileContentsHolder.getContents();", "+", "+            if (currentContents != null) {", "+                if (getFileContents() != currentContents) {", "+                    setFileContents(currentContents);", "+                    tagSuppressions();", "+                }", "+                if (matchTag(event)) {", "+                    accepted = false;", "+                }", "-        return true;", "+        return accepted;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e54a7afec630c5c99e5ce7b738bc7da", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "8da3b6dea4b446e055bb86b2bffb619008ee97b5", "commitAfterChange": "c3af7d4b0e9ffd5bdf1fa55273170f45b3b3d9e0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST ast)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast)", "diff": ["+        boolean check = false;", "+", "-            return getFileContents().inPackageInfo();", "+            check = getFileContents().inPackageInfo();", "+        else if (!ScopeUtils.isInCodeBlock(ast)) {", "+            final Scope customScope;", "-        if (ScopeUtils.isInCodeBlock(ast)) {", "-            return false;", "-        }", "+            if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)", "+                    || ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "+                customScope = Scope.PUBLIC;", "+            }", "+            else {", "+                customScope = ScopeUtils.getScopeFromMods(ast.findFirstToken(TokenTypes.MODIFIERS));", "+            }", "+            final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);", "-        final Scope declaredScope;", "-        if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "-            declaredScope = Scope.PUBLIC;", "+            check = customScope.isIn(scope)", "+                    && (surroundingScope == null || surroundingScope.isIn(scope))", "+                    && (excludeScope == null", "+                        || !customScope.isIn(excludeScope)", "+                        || surroundingScope != null", "+                        && !surroundingScope.isIn(excludeScope));", "-        else {", "-            declaredScope = ScopeUtils.getScopeFromMods(", "-                ast.findFirstToken(TokenTypes.MODIFIERS));", "-        }", "-", "-        final Scope customScope;", "-", "-        if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "-            customScope = Scope.PUBLIC;", "-        }", "-        else {", "-            customScope = declaredScope;", "-        }", "-        final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);", "-", "-        return customScope.isIn(scope)", "-            && (surroundingScope == null || surroundingScope.isIn(scope))", "-            && (excludeScope == null", "-                || !customScope.isIn(excludeScope)", "-                || surroundingScope != null", "-                && !surroundingScope.isIn(excludeScope));", "+        return check;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea7f8571267f1b36223b6fbb0aaa129d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e6bc115a5ffb13bfde44d3fa25337b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final String outerTypeName = aAST.findFirstToken(TokenTypes.IDENT).getText();", "-        if (!mSeenFirstToken) {", "+        final String outerTypeName = ast.findFirstToken(TokenTypes.IDENT).getText();", "+        if (!seenFirstToken) {", "-            if (mFileName.equals(outerTypeName)) {", "-                mValidFirst = true;", "+            if (fileName.equals(outerTypeName)) {", "+                validFirst = true;", "-                mWrongType = aAST;", "+                wrongType = ast;", "-            final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-                    && aAST.getParent() == null)", "+                    && ast.getParent() == null)", "-                mHasPublic = true;", "+                hasPublic = true;", "-        mSeenFirstToken = true;", "+        seenFirstToken = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0c84da7d3b002fa4c340cdc660f37d4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/OuterTypeFilenameCheck.java", "commitBeforeChange": "2628fc197d9b12bb03324c46478ef840166cc075", "commitAfterChange": "6f6179fb52b2a104adc1c60bf92f8bdf3818255a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        // Only check first declaration", "-        if (mSeenFirstToken) {", "-            return;", "+        final String outerTypeName = aAST.findFirstToken(TokenTypes.IDENT).getText();", "+        if (!mSeenFirstToken) {", "+", "+            if (mFileName.equals(outerTypeName)) {", "+                mValidFirst = true;", "+            }", "+            else {", "+                mWrongType = aAST;", "+            }", "+        }", "+        else {", "+            final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            if (modifiers.findFirstToken(TokenTypes.LITERAL_PUBLIC) != null", "+                    && aAST.getParent() == null)", "+            {", "+                mHasPublic = true;", "+            }", "+    }", "-        final String outerTypeName =", "-            aAST.findFirstToken(TokenTypes.IDENT).getText();", "-        // Calculate the file name without the leading path or", "-        // the trailing .java suffix. Will be lax and just remove whatever", "-        // is after the '.' character.", "-", "-        if (!(fname.equals(outerTypeName))) {", "-            log(aAST.getLineNo(), \"type.file.mismatch\");", "-        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78e32602304c5e62903caf35af88d8d6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171e4949fe31eca84ff54d5e17933ec1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "c6a70d4cca08ebdb2b4b26eff3e7da076ada184d", "commitAfterChange": "5478613082bac0329d25cffcfae5fab219d25118", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public AbstractExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, AbstractExpressionHandler parent)", "signatureAfterChange": "     public AbstractExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, AbstractExpressionHandler parent)", "diff": ["+        AbstractExpressionHandler resultHandler;", "-            return handler;", "+            resultHandler = handler;", "-", "-        if (ast.getType() == TokenTypes.METHOD_CALL) {", "-            return createMethodCallHandler(indentCheck, ast, parent);", "+        else if (ast.getType() == TokenTypes.METHOD_CALL) {", "+            resultHandler = createMethodCallHandler(indentCheck, ast, parent);", "-", "-        final Constructor<?> handlerCtor =", "-            typeHandlers.get(ast.getType());", "-        return (AbstractExpressionHandler) CommonUtils.invokeConstructor(", "-            handlerCtor, indentCheck, ast, parent);", "+        else {", "+            final Constructor<?> handlerCtor = typeHandlers.get(ast.getType());", "+            resultHandler = (AbstractExpressionHandler) CommonUtils.invokeConstructor(", "+                handlerCtor, indentCheck, ast, parent);", "+        }", "+        return resultHandler;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d93d6d2f516b68caa7e59ad179112f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean isIgnoredConstructorParam(DetailAST ast)", "signatureAfterChange": "     private boolean isIgnoredConstructorParam(DetailAST ast)", "diff": ["-        if ((ast.getType() != TokenTypes.PARAMETER_DEF)", "-            || !ignoreConstructorParameter)", "+        boolean result = false;", "+        if ((ast.getType() == TokenTypes.PARAMETER_DEF)", "+            && ignoreConstructorParameter)", "-            return false;", "+            final DetailAST parametersAST = ast.getParent();", "+            final DetailAST constructorAST = parametersAST.getParent();", "+            result = (constructorAST.getType() == TokenTypes.CTOR_DEF);", "-        final DetailAST parametersAST = ast.getParent();", "-        final DetailAST constructorAST = parametersAST.getParent();", "-        return (constructorAST.getType() == TokenTypes.CTOR_DEF);", "+        return result;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31fb9d64c70fafb5b1b57c34a5cb6206", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451921ae859ec82a9bdc06479639e8e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "0024de5711531372850e883c970414563ab8e3ad", "commitAfterChange": "ee84bccfe190e288447b417bc5e1a3cf94d7b218", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static Entry<DetailAST, Integer> calculateDistanceBetweenScopes(             DetailAST ast, DetailAST variable)", "signatureAfterChange": "     private static Entry<DetailAST, Integer> calculateDistanceBetweenScopes(             DetailAST ast, DetailAST variable)", "diff": ["-            final List<DetailAST> variableUsageExpressions = new ArrayList<>();", "-            DetailAST currentStatementAst = currentScopeAst;", "+            final Entry<List<DetailAST>, Integer> searchResult =", "+                    searchVariableUsageExpressions(variable, currentScopeAst);", "+", "-            while (currentStatementAst != null", "-                    && currentStatementAst.getType() != TokenTypes.RCURLY) {", "-                if (currentStatementAst.getFirstChild() != null) {", "-                    if (isChild(currentStatementAst, variable)) {", "-                        variableUsageExpressions.add(currentStatementAst);", "-                    }", "-                    // If expression doesn't contain variable and this variable", "-                    // hasn't been met yet, than distance + 1.", "-                    else if (variableUsageExpressions.isEmpty()", "-                            && currentStatementAst.getType() != TokenTypes.VARIABLE_DEF) {", "-                        dist++;", "-                    }", "-                }", "-                currentStatementAst = currentStatementAst.getNextSibling();", "-            }", "+", "+            final List<DetailAST> variableUsageExpressions = searchResult.getKey();", "+            dist += searchResult.getValue();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88a1e23adb340c236caaeca96a343f9a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "bd55b4598158c500333dae2e2194de08a643a3d5", "commitAfterChange": "f8ba0d727928aaa1275758fa09114155faab0b9e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName)", "signatureAfterChange": "     private boolean hasProperAccessModifier(DetailAST variableDef, String variableName)", "diff": ["-        final Set<String> mods = getModifiers(variableDef);", "-        final String variableScope = getVisibilityScope(mods);", "+", "+        final String variableScope = getVisibilityScope(variableDef);", "-            final DetailAST classDef = variableDef.getParent().getParent();", "-            final Set<String> classModifiers = getModifiers(classDef);", "-", "-                mods.contains(\"static\") && mods.contains(\"final\")", "+                isStaticFinalVariable(variableDef)", "-                || \"public\".equals(variableScope)", "-                   && getPublicMemberRegexp().matcher(variableName).find()", "+                || isIgnoredPublicMember(variableName, variableScope)", "-                      && classModifiers.contains(\"final\") && isImmutableField(variableDef);", "+                      && isImmutableFieldDefinedInFinalClass(variableDef);", "+    }"]}]}
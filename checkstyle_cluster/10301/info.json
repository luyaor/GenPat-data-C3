{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8af3baaaf6d3b3fcd74b959298680aa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93895ef8db1e5b9196a51f2d4e69523e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java", "commitBeforeChange": "edd5ba536dfe706caf27fb4745105d646f572021", "commitAfterChange": "3d8fc87ef60d4e96068658ed0485aafdb2a42691", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void checkForParams()", "signatureAfterChange": "     private void checkForParams()", "diff": ["-        checkExpressionSubtree(init, expected, false, false);", "+        if (init != null) {", "+            checkExpressionSubtree(init, expected, false, false);", "-        DetailAST cond = getMainAst().findFirstToken(TokenTypes.FOR_CONDITION);", "-        checkExpressionSubtree(cond, expected, false, false);", "+            DetailAST cond =", "+                getMainAst().findFirstToken(TokenTypes.FOR_CONDITION);", "+            checkExpressionSubtree(cond, expected, false, false);", "-        DetailAST iter = getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR);", "-        checkExpressionSubtree(iter, expected, false, false);", "+            DetailAST iter =", "+                getMainAst().findFirstToken(TokenTypes.FOR_ITERATOR);", "+            checkExpressionSubtree(iter, expected, false, false);", "+        }", "+        // for each", "+        else {", "+            DetailAST forEach =", "+                getMainAst().findFirstToken(TokenTypes.FOR_EACH_CLAUSE);", "+            checkExpressionSubtree(forEach, expected, false, false);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6f15ac3445268cd41e2385c48faa071", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/UnusedPrivateMethodCheck.java", "commitBeforeChange": "7bef7b40114938206146b65384b666c4227c978b", "commitAfterChange": "621d9a9bf7fa8a0743dc6080c6f684a2e6b0abdd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public boolean mustCheckReferenceCount(DetailAST aAST)", "signatureAfterChange": "     public boolean mustCheckReferenceCount(DetailAST aAST)", "diff": ["-        return ((mods != null)", "-            && (ScopeUtils.getScopeFromMods(mods) == Scope.PRIVATE));", "+        if ((mods == null)", "+            || (ScopeUtils.getScopeFromMods(mods) != Scope.PRIVATE))", "+        {", "+            return false;", "+        }", "+", "+        return !mAllowSerializationMethods", "+               || !(isWriteObject(aAST) || isReadObject(aAST)", "+                    || isWriteReplaceOrReadResolve(aAST));", "+    }"]}]}
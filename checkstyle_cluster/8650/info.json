{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d0293f4cbc85c475510a779f7337295", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40c0e6f6b0c0b786c63969260794f97e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "f8ba0d727928aaa1275758fa09114155faab0b9e", "commitAfterChange": "af52963008a800390e8b356db5811886572f37a3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean isSuperCall(DetailAST ast)", "signatureAfterChange": "     private boolean isSuperCall(DetailAST literalSuperAst)", "diff": ["-    private boolean isSuperCall(DetailAST ast) {", "-        if (ast.getType() != TokenTypes.LITERAL_SUPER) {", "+    private boolean isSuperCall(DetailAST literalSuperAst) {", "+        if (literalSuperAst.getType() != TokenTypes.LITERAL_SUPER) {", "-        DetailAST parent = ast.getParent();", "-        if (parent == null || parent.getType() != TokenTypes.DOT) {", "-            return false;", "-        }", "-", "-        if (isSameNameMethod(ast)) {", "-            return false;", "-        }", "-        if (isZeroParameters(parent)) {", "+        DetailAST dotAst = literalSuperAst.getParent();", "+        if (dotAst.getType() != TokenTypes.DOT", "+            || isSameNameMethod(literalSuperAst)", "+            || hasArguments(dotAst)) {", "-        while (parent != null) {", "-            if (parent.getType() == TokenTypes.METHOD_DEF) {", "-                return isOverridingMethod(parent);", "+        while (dotAst != null) {", "+            if (dotAst.getType() == TokenTypes.METHOD_DEF) {", "+                return isOverridingMethod(dotAst);", "-            else if (parent.getType() == TokenTypes.CTOR_DEF", "-                || parent.getType() == TokenTypes.INSTANCE_INIT) {", "+            else if (dotAst.getType() == TokenTypes.CTOR_DEF", "+                || dotAst.getType() == TokenTypes.INSTANCE_INIT) {", "-            parent = parent.getParent();", "+            dotAst = dotAst.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9676af89437678ddb22bb6cdf7f3af71", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "commitAfterChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "       public void openFile(File aFile, final Component aParent)", "signatureAfterChange": "       public void openFile(File file, final Component parent)", "diff": ["-    public void openFile(File aFile, final Component aParent)", "+    public void openFile(File file, final Component parent)", "-        if (aFile != null) {", "+        if (file != null) {", "-                Main.frame.setTitle(\"Checkstyle : \" + aFile.getName());", "-                final FileText text = new FileText(aFile.getAbsoluteFile(),", "+                Main.frame.setTitle(\"Checkstyle : \" + file.getName());", "+                final FileText text = new FileText(file.getAbsoluteFile(),", "-                mParseTreeModel.setParseTree(parseTree);", "-                mCurrentFile = aFile;", "-                mLastDirectory = aFile.getParentFile();", "+                parseTreeModel.setParseTree(parseTree);", "+                currentFile = file;", "+                lastDirectory = file.getParentFile();", "-                   getLines2position().add(mJTextArea.getText().length());", "-                   mJTextArea.append(element + \"\\n\");", "+                   getLines2position().add(jTextArea.getText().length());", "+                   jTextArea.append(element + \"\\n\");", "-                if (mJTextArea.getText().length() != 0) {", "-                    mJTextArea.replaceRange(\"\", 0, mJTextArea.getText()", "+                if (jTextArea.getText().length() != 0) {", "+                    jTextArea.replaceRange(\"\", 0, jTextArea.getText()", "-                    mJTextArea.append(element + \"\\n\");", "+                    jTextArea.append(element + \"\\n\");", "-                mJTextArea.moveCaretPosition(0);", "+                jTextArea.moveCaretPosition(0);", "-                        aParent,", "-                        \"Could not open \" + aFile + \": \" + ex.getMessage());", "+                        parent,", "+                        \"Could not open \" + file + \": \" + ex.getMessage());", "-                        aParent,", "-                        \"Could not parse \" + aFile + \": \" + ex.getMessage());", "+                        parent,", "+                        \"Could not parse \" + file + \": \" + ex.getMessage());"]}]}
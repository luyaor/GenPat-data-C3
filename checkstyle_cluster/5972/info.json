{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2c93eb438c3999767ab57c4afbf7bfe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "218b8b96105d31c86a3a9249209b4c74", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "3296ba06ac6ae5ad8c864ada15cec91d058785d4", "commitAfterChange": "6f1f7bd3fdcca84404e97964b3e48de6db5024ec", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "     public void beginTree(DetailAST aRootAST)", "diff": ["-        final int headerSize = getHeaderLines().length;", "-        final int fileSize = getLines().length;", "+        final String[] lines = getLines();", "+        mRegexpHeaderChecker.checkLines(lines);", "+    }", "-        if (headerSize - mMultiLines.length > fileSize) {", "-            log(1, \"header.missing\");", "-        }", "-        else {", "-            int headerLineNo = 0;", "-            int i;", "-            for (i = 0; (headerLineNo < headerSize) && (i < fileSize); i++) {", "-                boolean isMatch = isMatch(i, headerLineNo);", "-                while (!isMatch && isMultiLine(headerLineNo)) {", "-                    headerLineNo++;", "-                    isMatch = (headerLineNo == headerSize)", "-                        || isMatch(i, headerLineNo);", "-                }", "-                if (!isMatch) {", "-                    log(i + 1, \"header.mismatch\",", "-                        getHeaderLines()[headerLineNo]);", "-                    break; // stop checking", "-                }", "-                if (!isMultiLine(headerLineNo)) {", "-                    headerLineNo++;", "-                }", "-            }", "-            if (i == fileSize) {", "-                // if file finished, but we have at least one non-multi-line", "-                // header isn't completed", "-                for (; headerLineNo < headerSize; headerLineNo++) {", "-                    if (!isMultiLine(headerLineNo)) {", "-                        log(1, \"header.missing\");", "-                        break;", "-                    }", "-                }", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "add5ec1d30baefb0c5881f5af4821e53", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "4a5491810944bed643a9f2acf46ef3b9da8f1be7", "commitAfterChange": "f66b504b06f8c479d338fb5b2797392dfa3ef359", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-", "-    @Override", "-        mRegexpHeaderChecker.checkLines(aLines);", "+        final int headerSize = getRegexpHeaderInfo().getHeaderLines().size();", "+        final int fileSize = aLines.size();", "+", "+        if (headerSize - getRegexpHeaderInfo().getMultLines().length > fileSize)", "+        {", "+            log(1, \"header.missing\");", "+        }", "+        else {", "+            int headerLineNo = 0;", "+            int i;", "+            for (i = 0; (headerLineNo < headerSize) && (i < fileSize); i++) {", "+                final String line = aLines.get(i);", "+                boolean isMatch = isMatch(line, headerLineNo);", "+                while (!isMatch && isMultiLine(headerLineNo)) {", "+                    headerLineNo++;", "+                    isMatch = (headerLineNo == headerSize)", "+                            || isMatch(line, headerLineNo);", "+                }", "+                if (!isMatch) {", "+                    log(i + 1, \"header.mismatch\", getHeaderLines().get(", "+                            headerLineNo));", "+                    break; // stop checking", "+                }", "+                if (!isMultiLine(headerLineNo)) {", "+                    headerLineNo++;", "+                }", "+            }", "+            if (i == fileSize) {", "+                // if file finished, but we have at least one non-multi-line", "+                // header isn't completed", "+                for (; headerLineNo < headerSize; headerLineNo++) {", "+                    if (!isMultiLine(headerLineNo)) {", "+                        log(1, \"header.missing\");", "+                        break;", "+                    }", "+                }", "+            }", "+        }"]}]}
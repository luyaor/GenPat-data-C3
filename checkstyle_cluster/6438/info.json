{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8dc95851931e72e0c1ca2f9e4398b8e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52b9107e1e03980ae3fb35ea8dd295b0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java", "commitBeforeChange": "bd7cfcb3e58603a5115829d5677267d71e75a731", "commitAfterChange": "1c35230164ef3745a246bb2d8a3f6fb116916221", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void verifyMethodJavadoc(MyModifierSet aMods,                                     MyCommonAST aReturnType,                                     MethodSignature aSig)", "signatureAfterChange": "     public void verifyMethodJavadoc(MyModifierSet aMods,                                     MyCommonAST aReturnType,                                     MethodSignature aSig)", "diff": ["+        // Always verify the parameters are ok", "+        for (Iterator it = aSig.getParams().iterator(); it.hasNext();) {", "+            verifyParameter((LineText)it.next());", "+        }", "+", "+", "+        // now check the javadoc", "-            : !\"void\".equals(aReturnType.getFirstChild().getText());", "+            : !\"void\".equals(aReturnType.getText().trim());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53de4db70173951bd4171bc21a505986", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "2effcfd0bcdfa7fc25bfff22e6f893ac6fb4478b", "commitAfterChange": "a2fded8ed742d341c47b818d79aaa90cc849273e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     void registerCheck(Check aCheck, CheckConfiguration aConfig)", "signatureAfterChange": "     void registerCheck(Check aCheck, CheckConfiguration aConfig)", "diff": ["+            int acceptableTokens[] = aCheck.getAcceptableTokens();", "+            Arrays.sort(acceptableTokens);", "-                registerCheck((String) it.next(), aCheck);", "+                String token = (String) it.next();", "+                int tokenId = TokenTypes.getTokenId(token);", "+                if (Arrays.binarySearch(acceptableTokens, tokenId) >= 0) {", "+                    registerCheck(token, aCheck);", "+                }", "+                // TODO: else error message?"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf4ec827e43e5b0264bd2d49c1dbe4d6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0596967f444fa377089563d1572a66ad", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "commitBeforeChange": "53197d9be9366ccf9ebccc1e6e31270c1dff8e95", "commitAfterChange": "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["-        // Now dump out all throws without tags", "-        final ListIterator throwIt = aThrows.listIterator();", "-        while (throwIt.hasNext()) {", "-            final FullIdent fi = (FullIdent) throwIt.next();", "-            log(fi.getLineNo(), fi.getColumnNo(),", "-                \"javadoc.expectedTag\", \"@throws\", fi.getText());", "+        // Now dump out all throws without tags :- unless", "+        // the user has chosen to suppress these problems", "+        if (!mAllowMissingThrowsTags) {", "+            final ListIterator throwIt = aThrows.listIterator();", "+            while (throwIt.hasNext()) {", "+                final FullIdent fi = (FullIdent) throwIt.next();", "+                log(fi.getLineNo(), fi.getColumnNo(),", "+                    \"javadoc.expectedTag\", \"@throws\", fi.getText());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df95c21471d28bb7bfa25f0b67500af3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "commitBeforeChange": "53197d9be9366ccf9ebccc1e6e31270c1dff8e95", "commitAfterChange": "4cddf4771cd0b3bb2318912a06ae2ca8089e0f49", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void checkParamTags(List aTags, List aParams)", "signatureAfterChange": "     private void checkParamTags(List aTags, List aParams)", "diff": ["-        // Now dump out all parameters without tags", "-        final Iterator paramIt = aParams.iterator();", "-        while (paramIt.hasNext()) {", "-            final DetailAST param = (DetailAST) paramIt.next();", "-            log(param.getLineNo(), param.getColumnNo(),", "-                \"javadoc.expectedTag\", \"@param\", param.getText());", "+        // Now dump out all parameters without tags :- unless", "+        // the user has chosen to suppress these problems", "+        if (!mAllowMissingParamTags) {", "+            final Iterator paramIt = aParams.iterator();", "+            while (paramIt.hasNext()) {", "+                final DetailAST param = (DetailAST) paramIt.next();", "+                log(param.getLineNo(), param.getColumnNo(),", "+                    \"javadoc.expectedTag\", \"@param\", param.getText());", "+            }"]}]}
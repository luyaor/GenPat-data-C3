{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2fcb020d55224653b5958e1b7f1d414", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03e50815bf1b1a6d70e909343fe1319b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "79404974eff1458f4243f8acd6a08b6a8b869342", "commitAfterChange": "fe9057366308642868c25d427c3ee94411b37170", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "      @Override     public void execute() throws BuildException", "signatureAfterChange": "      @Override     public void execute() throws BuildException", "diff": ["-        final ClassLoader loader = Thread.currentThread()", "-                .getContextClassLoader();", "+", "-            Thread.currentThread().setContextClassLoader(", "-                    getClass().getClassLoader());", "-            Thread.currentThread().setContextClassLoader(loader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "063fb80135f8d5a85a904241b7957d15", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "eb6de977b5ae1d23f975ea4739f4c67d5f70b786", "commitAfterChange": "2f7481ee4e20ae785298c31ec2f979752dd7eb03", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            final DetailAST modifiers =", "-                ast.findFirstToken(TokenTypes.MODIFIERS);", "-", "-            for (final int tokenType : TOKENS_FOR_INTERFACE_MODIFIERS) {", "-                final DetailAST modifier =", "-                        modifiers.findFirstToken(tokenType);", "-                if (modifier != null) {", "-                    log(modifier.getLineNo(), modifier.getColumnNo(),", "-                            MSG_KEY, modifier.getText());", "-                }", "-            }", "+            checkInterfaceModifiers(ast);", "+        }", "+        else if (TokenTypes.CTOR_DEF == ast.getType()", "+                && isEnumMember(ast)) {", "+            checkEnumConstructorModifiers(ast);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "166c8273d1fcb7f03c06e504bad8fea1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "f712557e039eab29eff53c512320216592a23cd3", "commitAfterChange": "f1dced161ab0c818f0e1e125fc5b88b71f5b171e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-", "-        if (!shouldStartLine) {", "-            return;", "-        }", "-        final boolean startsLine =", "-                Utils.whitespaceBefore(rcurly.getColumnNo(),", "-                        getLines()[rcurly.getLineNo() - 1]);", "-", "-        if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {", "-            log(rcurly, MSG_KEY_LINE_NEW, \"}\");", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d61132729e186b477cb1e159e58891", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "381544887c222baddc8d6aab9f266bf16bc118b5", "commitAfterChange": "36321e0cc61a3ef9db6a2a468e72bf79f0da6211", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public void testRemoveFilter() throws Exception", "signatureAfterChange": "      public void testRemoveFilter() throws Exception", "diff": ["-        c.fireAuditStarted();", "-        assertTrue(\"Checker.fireAuditStarted() doesn't call filter\", f2.wasCalled());", "-        assertFalse(\"Checker.fireAuditStarted() does call removed filter\", f.wasCalled());", "+ \t// we do call filter in fireErrors() only (fix for 1080343)", "+// \tc.fireAuditStarted();", "+//         assertTrue(\"Checker.fireAuditStarted() doesn't call filter\", f2.wasCalled());", "+//         assertFalse(\"Checker.fireAuditStarted() does call removed filter\", f.wasCalled());", "-        f2.resetFilter();", "-        c.fireAuditFinished();", "-        assertTrue(\"Checker.fireAuditFinished() doesn't call filter\", f2.wasCalled());", "-        assertFalse(\"Checker.fireAuditFinished() does call removed filter\", f.wasCalled());", "+ \t// we do call filter in fireErrors() only (fix for 1080343)", "+//         f2.resetFilter();", "+//         c.fireAuditFinished();", "+//         assertTrue(\"Checker.fireAuditFinished() doesn't call filter\", f2.wasCalled());", "+//         assertFalse(\"Checker.fireAuditFinished() does call removed filter\", f.wasCalled());", "-        f2.resetFilter();", "-        c.fireFileStarted(\"Some File Name\");", "-        assertTrue(\"Checker.fireFileStarted() doesn't call filter\", f2.wasCalled());", "-        assertFalse(\"Checker.fireFileStarted() does call removed filter\", f.wasCalled());", "+ \t// we do call filter in fireErrors() only (fix for 1080343)", "+//         f2.resetFilter();", "+//         c.fireFileStarted(\"Some File Name\");", "+//         assertTrue(\"Checker.fireFileStarted() doesn't call filter\", f2.wasCalled());", "+//         assertFalse(\"Checker.fireFileStarted() does call removed filter\", f.wasCalled());", "-        f2.resetFilter();", "-        c.fireFileFinished(\"Some File Name\");", "-        assertTrue(\"Checker.fireFileFinished() doesn't call filter\", f2.wasCalled());", "-        assertFalse(\"Checker.fireFileFinished() does call removed filter\", f.wasCalled());", "+ \t// we do call filter in fireErrors() only (fix for 1080343)", "+//         f2.resetFilter();", "+//         c.fireFileFinished(\"Some File Name\");", "+//         assertTrue(\"Checker.fireFileFinished() doesn't call filter\", f2.wasCalled());", "+//         assertFalse(\"Checker.fireFileFinished() does call removed filter\", f.wasCalled());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25c1a72db7323a17897af882d8b2a01d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationTest.java", "commitBeforeChange": "98d883bb3b2e5ea3774694b0529d1d16da5f3300", "commitAfterChange": "7335df239dda0b303e7de23ef6b1adf388780a0c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testGetProperties() throws Exception", "signatureAfterChange": "      public void testGetProperties() throws Exception", "diff": ["-        c.setStringSetProperty(Defn.ILLEGAL_IMPORTS_PROP, \"a,b,c,d\");", "-        assertEquals(\"a,b,c,d\",", "-                     c.getProperties().getProperty(Defn.ILLEGAL_IMPORTS_PROP));", "-        c.setStringSetProperty(Defn.ILLEGAL_IMPORTS_PROP, \"a\");", "-        assertEquals(\"a\",", "-                     c.getProperties().getProperty(Defn.ILLEGAL_IMPORTS_PROP));", "-       "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fff5ed86cc5274f1c862f528c76669c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheck.java", "commitBeforeChange": "bb1db4938ccae0f7149461ea372398fb8a53f2a8", "commitAfterChange": "15b8debf99b3b0c600084fccde54d9562bd48b71", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "signatureAfterChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "diff": ["-        // Let's trye to load class.", "-        Class excClass = null;", "-", "-        if (!mAllowUnchecked || !mAllowSubclasses) {", "-            excClass = resolveClass(aExc.getText());", "-            if (excClass == null) {", "-                log(aExc.getLineNo(), aExc.getColumnNo(),", "-                    \"redundant.throws.classInfo\", aExc.getText());", "-            }", "-        }", "+        // Let's try to load class.", "+        ClassInfo newClassInfo = new ClassInfo(aExc);", "-            if (isUnchecked(excClass)) {", "+            if (isUnchecked(newClassInfo.getClazz())) {", "-                if (isSubclass(ci.getClazz(), excClass)) {", "+                if (isSubclass(ci.getClazz(), newClassInfo.getClazz())) {", "-                else if (isSubclass(excClass, ci.getClazz())) {", "+                else if (isSubclass(newClassInfo.getClazz(), ci.getClazz())) {", "-            aKnownExcs.add(new ClassInfo(aExc, excClass));", "+            aKnownExcs.add(newClassInfo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d9981f214ff2a3e63fcdd9ba218d86d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "2282f82cb7fd2055245d3bcb4b76c6c27fdd5455", "commitAfterChange": "f1dc9b205d1ccdba85e34f4cb7adf9ffd4af2361", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static Details getDetails(DetailAST ast)", "signatureAfterChange": "     private static Details getDetails(DetailAST ast)", "diff": ["-            case TokenTypes.METHOD_DEF:", "-            case TokenTypes.LITERAL_FOR:", "-            case TokenTypes.LITERAL_WHILE:", "-            case TokenTypes.LITERAL_DO:", "+            default:", "+//              ATTENTION! We have default here, but we expect case TokenTypes.METHOD_DEF,", "+//              TokenTypes.LITERAL_FOR, TokenTypes.LITERAL_WHILE, TokenTypes.LITERAL_DO only.", "+//              It has been done to improve coverage to 100%. I couldn't replace it with", "+//              if-else-if block because code was ugly and didn't pass pmd check.", "+", "-            default:", "-                throw new IllegalStateException(\"Unexpected token type (\"", "-                        + Utils.getTokenName(ast.getType()) + \")\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65f657b9e037ad0f9d7c6874bf0bd50c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "381544887c222baddc8d6aab9f266bf16bc118b5", "commitAfterChange": "36321e0cc61a3ef9db6a2a468e72bf79f0da6211", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testAddFilter() throws Exception", "signatureAfterChange": "      public void testAddFilter() throws Exception", "diff": ["-        c.fireAuditStarted();", "-        assertTrue(\"Checker.fireAuditStarted() doesn't call filter\", f.wasCalled());", "+\t// we do not call filter in fireAuditStarted() (fix for 1080343)", "+//         c.fireAuditStarted();", "+//         assertTrue(\"Checker.fireAuditStarted() doesn't call filter\", f.wasCalled());", "-        f.resetFilter();", "-        c.fireAuditFinished();", "-        assertTrue(\"Checker.fireAuditFinished() doesn't call filter\", f.wasCalled());", "+\t// we do not call filter in fireAuditFinished() (fix for 1080343)", "+//         f.resetFilter();", "+//         c.fireAuditFinished();", "+//         assertTrue(\"Checker.fireAuditFinished() doesn't call filter\", f.wasCalled());", "-        f.resetFilter();", "-        c.fireFileStarted(\"Some File Name\");", "-        assertTrue(\"Checker.fireFileStarted() doesn't call filter\", f.wasCalled());", "+\t// we do not call filter in fireFileStarted() (fix for 1080343)", "+//         f.resetFilter();", "+//         c.fireFileStarted(\"Some File Name\");", "+//         assertTrue(\"Checker.fireFileStarted() doesn't call filter\", f.wasCalled());", "-        f.resetFilter();", "-        c.fireFileFinished(\"Some File Name\");", "-        assertTrue(\"Checker.fireFileFinished() doesn't call filter\", f.wasCalled());", "+\t// we do not call filter in fireFileFinished() (fix for 1080343)", "+//         f.resetFilter();", "+//         c.fireFileFinished(\"Some File Name\");", "+//         assertTrue(\"Checker.fireFileFinished() doesn't call filter\", f.wasCalled());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b5c9043016c5dca446d3c9f692f5c90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "dc3fc5fab0cb1cadd5793065d8e44bbd2c5f67e2", "commitAfterChange": "0855fff95e4aac170ac5ab74cd1872f20555a214", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "signatureAfterChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "diff": ["-            // TODO: not sure if this does anything, look at taking it out", "-", "-            // TODO: we can check here if this line starts or the previous", "-            // line ends in a dot.  If so, we should increase the indent.", "-", "-            // TODO: check if -2 is possible here?  but unlikely to be a", "-            // problem...", "-            String thisLine = mIndentCheck.getLines()[i - 1];", "-            String prevLine = mIndentCheck.getLines()[i - 2];", "-            if (thisLine.matches(\"^\\\\s*\\\\.\")", "-                || prevLine.matches(\"\\\\.\\\\s*$\"))", "-            {", "-                aIndentLevel = new IndentLevel(aIndentLevel, getBasicOffset());", "-            }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e84b26dc4a0a81168798d5a117af76a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java", "commitBeforeChange": "779aa37ffc447d1d85ea1b082759e4040657191d", "commitAfterChange": "68dbad577945e3b731064808b6766d69c73ab381", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     @Override     public boolean accept(AuditEvent event)", "signatureAfterChange": "     @Override     public boolean accept(AuditEvent event)", "diff": ["-        if (event.getFileName() == null", "-                || !fileRegexp.matcher(event.getFileName()).find()", "-                || event.getLocalizedMessage() == null", "-                || moduleId != null && !moduleId.equals(event", "-                        .getModuleId())", "-                || checkRegexp != null && !checkRegexp.matcher(", "-                        event.getSourceName()).find()) {", "+        if (isFileNameAndModuleMatching(event)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a610743454ff5864b36e49b5ad5d6b3a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "659af86ecdbeb36430ecfff1343cb8d6354f6c57", "commitAfterChange": "6985c4758d4a3252951a6a26b8efdd7b5f0adff4", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean isEmptyType(DetailAST ast, int parentType)", "signatureAfterChange": "     private boolean isEmptyType(DetailAST ast, int parentType)", "diff": ["-        if ((type == TokenTypes.RCURLY || type == TokenTypes.LCURLY)", "-                && parentType == TokenTypes.OBJBLOCK) {", "-            final DetailAST typeNode = ast.getParent().getParent();", "-            final int matchType = typeNode.getType();", "-            if (matchType == TokenTypes.CLASS_DEF", "-                    || matchType == TokenTypes.INTERFACE_DEF", "-                    || matchType == TokenTypes.ENUM_DEF", "-                    || matchType == TokenTypes.LITERAL_NEW", "-                    || matchType == TokenTypes.ANNOTATION_DEF) {", "-                return true;", "-            }", "-        }", "-        return false;", "+        return (type == TokenTypes.RCURLY || type == TokenTypes.LCURLY)", "+                && parentType == TokenTypes.OBJBLOCK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc9eb6af20e1891b1f94262448399fdf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "936501d034dac8a06eb77a502224fabc6a35d4f3", "commitAfterChange": "1ad7c80579044d5ade384a834bdfd8ba76e3f772", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static boolean isDeclarationToken(int parentType)", "signatureAfterChange": "     private static boolean isDeclarationToken(int parentType)", "diff": ["-        return parentType == TokenTypes.VARIABLE_DEF", "-            || parentType == TokenTypes.CTOR_DEF", "-            || parentType == TokenTypes.METHOD_DEF", "-            || parentType == TokenTypes.CLASS_DEF", "-            || parentType == TokenTypes.ENUM_DEF", "-            || parentType == TokenTypes.INTERFACE_DEF", "-            || parentType == TokenTypes.PARAMETER_DEF", "-            || parentType == TokenTypes.TYPE_ARGUMENT;", "+        return DECLARATION_TOKENS.contains(parentType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd6b3b1f392c1c70113f35294a21e1fb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "b42c26a8cd52e64e78c632e6b751df0cf6a48f59", "commitAfterChange": "aa0f77eb9294588b0d891dbde516bc43a5af4f5a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-                final LineColumn end = text.lineColumn(matcher.end());", "-", "-                if (!options.getSuppressor().shouldSuppress(start.getLine(),", "-                        start.getColumn(), end.getLine(), end.getColumn())) {", "-                    currentMatches++;", "-                    if (currentMatches > options.getMaximum()) {", "-                        if (options.getMessage().isEmpty()) {", "-                            options.getReporter().log(start.getLine(),", "-                                    REGEXP_EXCEEDED, matcher.pattern().toString());", "-                        }", "-                        else {", "-                            options.getReporter()", "-                                    .log(start.getLine(), options.getMessage());", "-                        }", "+                currentMatches++;", "+                if (currentMatches > options.getMaximum()) {", "+                    if (options.getMessage().isEmpty()) {", "+                        options.getReporter().log(start.getLine(),", "+                                REGEXP_EXCEEDED, matcher.pattern().toString());", "+                    }", "+                    else {", "+                        options.getReporter()", "+                                .log(start.getLine(), options.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c54f0351fe5b1e6c9afaf8ee6e5c6a02", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/UnusedImportsCheck.java", "commitBeforeChange": "5d31b9e6ef9b950a2f04535d2bba6eac446949bc", "commitAfterChange": "c75c77dff73b803284ea152105cd64b0fc55d58b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        else if ((aAST.getType() == TokenTypes.CLASS_DEF)", "-            || (aAST.getType() == TokenTypes.INTERFACE_DEF)", "-            || (aAST.getType() == TokenTypes.ENUM_DEF)", "-            || (aAST.getType() == TokenTypes.ANNOTATION_DEF)", "-            || (aAST.getType() == TokenTypes.PACKAGE_DEF))", "-        {", "+        else {", "+            if (mProcessJavadoc) {", "+                processJavadoc(aAST);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc6fdbaf13f0551e6c1293aaf8147794", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "f293a2107656cebb829e33cba2384ba56be54512", "commitAfterChange": "b372cfa0a8632735da877de0f703c3b3c9ce5f63", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void processVariableDef(DetailAST ast, DetailAST nextToken)", "signatureAfterChange": "     private void processVariableDef(DetailAST ast, DetailAST nextToken)", "diff": ["-        if (isTypeField(ast) && !hasEmptyLineAfter(ast)) {", "-            if (allowNoEmptyLineBetweenFields", "-                && nextToken.getType() != TokenTypes.VARIABLE_DEF", "-                && nextToken.getType() != TokenTypes.RCURLY) {", "-                log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                     nextToken.getText());", "-            }", "-            else if (!allowNoEmptyLineBetweenFields", "-                     && nextToken.getType() != TokenTypes.RCURLY) {", "-                log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                     nextToken.getText());", "-            }", "+        if (isTypeField(ast) && !hasEmptyLineAfter(ast)", "+                && isViolatingEmptyLineBetweenFieldsPolicy(nextToken)) {", "+            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                    nextToken.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db4cb936066894ab660a1536140c82f7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java", "commitBeforeChange": "debcf7e6afaa34c069f523de3fcead9264b574d5", "commitAfterChange": "7f9305442f4ba28403cac42aaddaafd5cb783514", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public int[] getDefaultTokens()", "signatureAfterChange": "     public int[] getDefaultTokens()", "diff": ["-            TokenTypes.ASSIGN,            // '='", "-            TokenTypes.DIV_ASSIGN,        // \"/=\"", "-            TokenTypes.PLUS_ASSIGN,       // \"+=\"", "-            TokenTypes.MINUS_ASSIGN,      //\"-=\"", "-            TokenTypes.STAR_ASSIGN,       // \"*=\"", "-            TokenTypes.MOD_ASSIGN,        // \"%=\"", "-            TokenTypes.SR_ASSIGN,         // \">>=\"", "-            TokenTypes.BSR_ASSIGN,        // \">>>=\"", "-            TokenTypes.SL_ASSIGN,         // \"<<=\"", "-            TokenTypes.BXOR_ASSIGN,       // \"^=\"", "-            TokenTypes.BOR_ASSIGN,        // \"|=\"", "-            TokenTypes.BAND_ASSIGN,       // \"&=\""]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec1a90629ac7cbf08b9678ce488af194", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "commitBeforeChange": "8ef4a669c0ac0cc625c2396c8166037019f51ac9", "commitAfterChange": "c2ca14da23eff6cc1a89b4d5f2ff3da7d4f8afbc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (TokenTypes.CLASS_DEF == ast.getType()", "-            || TokenTypes.INTERFACE_DEF == ast.getType()", "-            || TokenTypes.ENUM_CONSTANT_DEF == ast.getType()", "-            || TokenTypes.ENUM_DEF == ast.getType()) {", "+        if (TokenTypes.METHOD_DEF == ast.getType()) {", "+            raiseCounter(ast);", "+        }", "+        else {", "-        }", "-        else if (TokenTypes.METHOD_DEF == ast.getType()) {", "-            raiseCounter(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eecf14fa676fef5cd9f4da4d8fa9611c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "11eb99681a05047aecc2ce4b4bc51c849d1cfd44", "commitAfterChange": "b576ccf8793690e8459a6620cc1611531f3f9890", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static String validate(Details details, RightCurlyOption bracePolicy,                                    boolean shouldStartLine, String targetSourceLine)", "signatureAfterChange": "     private static String validate(Details details, RightCurlyOption bracePolicy,                                    boolean shouldStartLine, String targetSourceLine)", "diff": ["-        else if (bracePolicy == RightCurlyOption.SAME", "-                && rcurly.getLineNo() != nextToken.getLineNo()) {", "+        else if (shouldBeOnSameLine(bracePolicy, details)) {", "-        else if (shouldBeAloneOnLine(details, bracePolicy)) {", "+        else if (shouldBeAloneOnLine(bracePolicy, details)) {", "-        else if (shouldStartLine) {", "-            final boolean startsLine =", "-                    CommonUtils.hasWhitespaceBefore(rcurly.getColumnNo(), targetSourceLine);", "-", "-            if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {", "-                violation = MSG_KEY_LINE_NEW;", "-            }", "+        else if (shouldStartLine && !startsLine(details, targetSourceLine)) {", "+            violation = MSG_KEY_LINE_NEW;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "618c61a59a0ce94b046a11ee4537c03d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5347be5e3286e3565d68fdf0559b04fe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65", "commitAfterChange": "88830ca708e2deb22cae333057ebddd15f7f9c57", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void parseTags(String[] text, int lineNo)", "signatureAfterChange": "     private void parseTags(String[] text, int lineNo)", "diff": ["-            else if (!isTag(text, position)) {", "-                position = getNextCharPos(text, position);", "+            else if (isTag(text, position)) {", "+                position = parseTag(text, lineNo, nLines, position);", "-                // find end of tag", "-                final Point endTag = findChar(text, '>', position);", "-                final boolean incompleteTag = endTag.getLineNo() >= nLines;", "-                // get tag id (one word)", "-                final String tagId;", "-", "-                if (incompleteTag) {", "-                    tagId = \"\";", "-                }", "-                else {", "-                    tagId = getTagId(text, position);", "-                }", "-                // is this closed tag", "-                final boolean closedTag =", "-                        endTag.getLineNo() < nLines", "-                         && text[endTag.getLineNo()]", "-                         .charAt(endTag.getColumnNo() - 1) == '/';", "-                // add new tag", "-                add(new HtmlTag(tagId,", "-                                position.getLineNo() + lineNo,", "-                                position.getColumnNo(),", "-                                closedTag,", "-                                incompleteTag,", "-                                text[position.getLineNo()]));", "-                position = endTag;", "+                position = getNextCharPos(text, position);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e867401f702e4416d9e1bc16baec8c2d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java", "commitBeforeChange": "e030d1463c307836bbb201a202d15e81a41bcb0b", "commitAfterChange": "842c152be6b0bbcb754a346a6ce4b59c47469c17", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-        int startColumn;", "-        int endLine;", "-        int endColumn;", "-        if (!foundMatch && !illegalPattern && matchCount == 0) {", "-            logMessage(0);", "-        }", "-        else if (foundMatch) {", "+        if (foundMatch) {", "-            final LineColumn end;", "-            if (matcher.end() == 0) {", "-                end = text.lineColumn(0);", "-            }", "-            else {", "-                end = text.lineColumn(matcher.end() - 1);", "-            }", "-            startColumn = start.getColumn();", "-            endLine = end.getLine();", "-            endColumn = end.getColumn();", "-            if (ignoreComments) {", "-                final FileContents theFileContents = getFileContents();", "-                ignore = theFileContents.hasIntersectionWithComment(startLine,", "-                    startColumn, endLine, endColumn);", "-            }", "+", "+            ignore = isIgnore(startLine, text, start);", "+", "-            if (errorCount < errorLimit", "-                    && (ignore || illegalPattern || checkForDuplicates)) {", "+            if (canContinueValidation(ignore)) {", "+        else if (!illegalPattern && matchCount == 0) {", "+            logMessage(0);", "+        }", "+", "+    }"]}]}
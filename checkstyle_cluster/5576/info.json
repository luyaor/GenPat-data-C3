{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0b1ed330fc538ec4216dbf2967b0d56", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11676910992c513b5983151953497732", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean hasEmptyLineAfter(DetailAST aToken)", "signatureAfterChange": "     private boolean hasEmptyLineAfter(DetailAST token)", "diff": ["-    private boolean hasEmptyLineAfter(DetailAST aToken)", "+    private boolean hasEmptyLineAfter(DetailAST token)", "-        DetailAST lastToken = aToken.getLastChild().getLastChild();", "+        DetailAST lastToken = token.getLastChild().getLastChild();", "-            lastToken = aToken.getLastChild();", "+            lastToken = token.getLastChild();", "-        return aToken.getNextSibling().getLineNo() - lastToken.getLineNo() > 1;", "+        return token.getNextSibling().getLineNo() - lastToken.getLineNo() > 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ca4d44b8ec320a75a84f2b0a55625e4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "e24596db9459a3592784a544b213cc7aa919a3f6", "commitAfterChange": "caa58734b9891ec51a113f861f6f1225ae6b499d", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private static boolean hasEmptyLineAfter(DetailAST token)", "signatureAfterChange": "     private boolean hasEmptyLineAfter(DetailAST token)", "diff": ["-    private static boolean hasEmptyLineAfter(DetailAST token) {", "+    private boolean hasEmptyLineAfter(DetailAST token) {", "-        return token.getNextSibling().getLineNo() - lastToken.getLineNo() > 1;", "+        // Start of the next token", "+        final int nextBegin = token.getNextSibling().getLineNo();", "+        // End of current token.", "+        final int currentEnd = lastToken.getLineNo();", "+        return hasEmptyLine(currentEnd + 1, nextBegin - 1);", "+    }"]}]}
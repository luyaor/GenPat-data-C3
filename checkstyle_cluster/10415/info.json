{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e87bc39a66e883be1e5f6caeef3c18d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51192b2b8735544419d53af4a6199da0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationLocationCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)", "signatureAfterChange": "     private void checkAnnotations(DetailAST modifierNode, int correctLevel)", "diff": ["-    private void checkAnnotations(DetailAST aModifierNode, int aCorrectLevel)", "+    private void checkAnnotations(DetailAST modifierNode, int correctLevel)", "-        DetailAST annotation = aModifierNode.getFirstChild();", "+        DetailAST annotation = modifierNode.getFirstChild();", "-            else if (annotation.getColumnNo() != aCorrectLevel && !hasNodeBefore(annotation)) {", "+            else if (annotation.getColumnNo() != correctLevel && !hasNodeBefore(annotation)) {", "-                    getAnnotationName(annotation), annotation.getColumnNo(), aCorrectLevel);", "+                    getAnnotationName(annotation), annotation.getColumnNo(), correctLevel);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e2f9d7adfb980f0910aa5758b10e1b0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST methodCall)", "diff": ["-    public void visitToken(final DetailAST aMethodCall)", "+    public void visitToken(final DetailAST methodCall)", "-        final DetailAST dot = aMethodCall.getFirstChild();", "+        final DetailAST dot = methodCall.getFirstChild();", "-            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "+            log(methodCall.getLineNo(), methodCall.getColumnNo(),", "-        if (!mIgnoreEqualsIgnoreCase", "+        if (!ignoreEqualsIgnoreCase", "-            log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "+            log(methodCall.getLineNo(), methodCall.getColumnNo(),"]}]}
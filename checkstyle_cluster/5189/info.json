{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a1e78d0c55149f536e544101f7d3013", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1865be3508d629ba66bfe65ead4fe622", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Class<?> resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "signatureAfterChange": "     public Class<?> resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "diff": ["-        Iterator<String> it = mImports.iterator();", "-        while (it.hasNext()) {", "-            final String imp = it.next();", "+        for (String imp : mImports) {", "-        it = mImports.iterator();", "-        while (it.hasNext()) {", "-            final String imp = it.next();", "+        for (String imp : mImports) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fe9a21c0962377f147405889135d02b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String aClassName)", "signatureAfterChange": "     private String getIllegalInstantiation(String aClassName)", "diff": ["-        final Iterator illIter = mIllegalClasses.iterator();", "-        while (illIter.hasNext()) {", "-            final String illegal = (String) illIter.next();", "+        for (String illegal : mIllegalClasses) {", "-            final Iterator importIter = mImports.iterator();", "-            while (importIter.hasNext()) {", "-                final FullIdent importLineText = (FullIdent) importIter.next();", "+            for (FullIdent importLineText : mImports) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "329aef5749005d48c78127141355e679", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public boolean hasIntersectionWithComment(int aStartLineNo,             int aStartColNo, int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public boolean hasIntersectionWithComment(int aStartLineNo,             int aStartColNo, int aEndLineNo, int aEndColNo)", "diff": ["-", "-        final Iterator<List<TextBlock>> it = values.iterator();", "-        while (it.hasNext()) {", "-            final List<TextBlock> row = it.next();", "-            final Iterator<TextBlock> rowIterator = row.iterator();", "-            while (rowIterator.hasNext()) {", "-                final TextBlock comment = rowIterator.next();", "+        for (List<TextBlock> row : values) {", "+            for (TextBlock comment : row) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c6aa19925e6904a153f9d256e33a43c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(DetailAST aAST)", "diff": ["+    @Override", "-            final Iterator it = mImports.iterator();", "-            while (it.hasNext()) {", "-                final FullIdent full = (FullIdent) it.next();", "+            for (FullIdent full : mImports) {", "-            final Iterator it = mStaticImports.iterator();", "-            while (it.hasNext()) {", "-                final FullIdent full = (FullIdent) it.next();", "+            for (FullIdent full : mStaticImports) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3ba9bc6d1c25e536d3fe2a79e516abf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void checkParamTags(final List<JavadocTag> aTags,             final DetailAST aParent, boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkParamTags(final List<JavadocTag> aTags,             final DetailAST aParent, boolean aReportExpectedTags)", "diff": ["-            final Iterator<DetailAST> paramIt = params.iterator();", "-            while (paramIt.hasNext()) {", "-                final DetailAST param = paramIt.next();", "+            for (DetailAST param : params) {", "-            final Iterator<DetailAST> typeParamsIt = typeParams.iterator();", "-            while (typeParamsIt.hasNext()) {", "-                final DetailAST typeParam = typeParamsIt.next();", "+            for (DetailAST typeParam : typeParams) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f80e8665991310eaa7decf1c11052561", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkBadComments(FileContents aContents)", "signatureAfterChange": "     private void checkBadComments(FileContents aContents)", "diff": ["-        final Iterator<Integer> allIter = allComments.keySet().iterator();", "-        while (allIter.hasNext()) {", "-            final Integer key = allIter.next();", "+        for (Integer key : allComments.keySet()) {", "-            final Iterator<TextBlock> lineIter = lineComments.iterator();", "-            while (lineIter.hasNext()) {", "-                final String[] cmt = (lineIter.next()).getText();", "+            for (TextBlock line : lineComments) {", "+                final String[] cmt = line.getText();"]}]}
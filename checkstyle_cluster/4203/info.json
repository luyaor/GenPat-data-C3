{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40e5fe47dc6c7b5646ae04e2ed13d891", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c78236489ae05cae2e3f0f7f0f99754", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/CrossLanguageRegexpHeaderCheck.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void process(List<File> aFiles)", "signatureAfterChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    /** {@inheritDoc} */", "-    public void process(List<File> aFiles)", "-", "-        final MessageDispatcher msgDispatcher = getMessageDispatcher();", "-        final RegexpHeaderChecker regexpHeaderChecker =", "-            new RegexpHeaderChecker(", "-                    mHeaderInfo, new FileSetCheckViolationMonitor());", "-        final List<File> files = filter(aFiles);", "-        for (final File file : files) {", "-            final String path = file.getPath();", "-            msgDispatcher.fireFileStarted(path);", "-            try {", "-                final String[] lines = Utils.getLines(path);", "-                regexpHeaderChecker.checkLines(lines);", "-            }", "-            catch (IOException ex) {", "-                log(0, \"unable to open file: \" + ex);", "-            }", "-            fireErrors(path);", "-            msgDispatcher.fireFileFinished(path);", "-        }", "+    @Override", "+    protected void processFiltered(File aFile, List<String> aLines)", "+    {", "+        mRegexpHeaderChecker.checkLines(", "+            aLines.toArray(new String[aLines.size()]));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcd57948cd93a42ebd081e3e3c066589", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     public void process(List<File> aFiles)", "signatureAfterChange": "\r \r     @Override\r     protected void processFiltered(File aFile, List<String> aLines)", "diff": ["-    /** {@inheritDoc} */\r", "-    public void process(List<File> aFiles)\r", "-        final List<File> javaFiles = filter(aFiles);\r", "-        final Set<File> directories = getParentDirs(javaFiles);\r", "-        for (File dir : directories) {\r", "-            // Check for the preferred file.\r", "-            final MessageDispatcher dispatcher = getMessageDispatcher();\r", "-            final File packageInfo = new File(dir, \"package-info.java\");\r", "-            final File packageHtml = new File(dir, \"package.html\");\r", "-            final String path;\r", "-\r", "-            if (packageInfo.exists()) {\r", "-                path = packageInfo.getPath();\r", "-                dispatcher.fireFileStarted(path);\r", "-                if (packageHtml.exists()) {\r", "-                    log(0, \"javadoc.legacyPackageHtml\");\r", "-                }\r", "-            }\r", "-            else if (mAllowLegacy && packageHtml.exists()) {\r", "-                path = packageHtml.getPath();\r", "-                dispatcher.fireFileStarted(path);\r", "-            }\r", "-            else {\r", "-                path = packageInfo.getPath();\r", "-                dispatcher.fireFileStarted(path);\r", "-                log(0, \"javadoc.packageInfo\");\r", "-            }\r", "-            fireErrors(path);\r", "-            dispatcher.fireFileFinished(path);\r", "-        }\r", "+    @Override\r", "+    protected void processFiltered(File aFile, List<String> aLines)\r", "+        // Check if already processed directory\r", "+        final File dir = aFile.getParentFile();\r", "+        if (mDirectoriesChecked.contains(dir)) {\r", "+            return;\r", "+        mDirectoriesChecked.add(dir);\r", "+        \r", "+        // Check for the preferred file.\r", "+        final File packageInfo = new File(dir, \"package-info.java\");\r", "+        final File packageHtml = new File(dir, \"package.html\");\r", "+\r", "+        if (packageInfo.exists()) {\r", "+            if (packageHtml.exists()) {\r", "+                log(0, \"javadoc.legacyPackageHtml\");\r", "+            }\r", "+        }   \r", "+        else if (mAllowLegacy && packageHtml.exists()) {\r", "+        }\r", "+        else {\r", "+            log(0, \"javadoc.packageInfo\");\r", "+        }\r"]}]}
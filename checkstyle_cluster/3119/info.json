{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9854f13804666b269a5eefcb418b6e1c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b8fa9c0817e35695646c4f2c888cf0f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "232246fb939ae84f2dc124d6c59675b6c64e7802", "commitAfterChange": "8bd1d6869ba97b6a03dd2b069ffbe5a1571e1b45", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     protected IndentLevel getLevelImpl()", "signatureAfterChange": "      @Override     protected IndentLevel getLevelImpl()", "diff": ["-                final DetailAST main = getMainAst();", "-                final DetailAST dot = main.getFirstChild();", "-                final DetailAST target = dot.getFirstChild();", "-", "-                if (dot.getType() == TokenTypes.DOT", "-                    && target.getType() == TokenTypes.METHOD_CALL)", "-                {", "-                    final DetailAST dot1 = target.getFirstChild();", "-                    final DetailAST target1 = dot1.getFirstChild();", "-", "-                    if (dot1.getType() == TokenTypes.DOT", "-                        && target1.getType() == TokenTypes.METHOD_CALL)", "-                    {", "-                        return container.getLevel();", "-                    }", "+                if (isChainedMethodCallWrapped()) {", "+                    return container.getLevel();", "-                return new IndentLevel(container.getLevel(), getBasicOffset());", "+                else {", "+                    return new IndentLevel(container.getLevel(), getBasicOffset());", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d164ac565c8b931eea980e4d86b0e03f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "40bb6812631517615cfc45efeb5bdcc93b95a8ae", "commitAfterChange": "4287706cb4a0f7b8ab39bb6d5314b8b40841026a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            // get values of annotation", "-            List<String> values = null;", "-            final DetailAST lparenAST = ast.findFirstToken(TokenTypes.LPAREN);", "-            if (lparenAST != null) {", "-                final DetailAST nextAST = lparenAST.getNextSibling();", "-                if (nextAST != null) {", "-                    final int nextType = nextAST.getType();", "-                    switch (nextType) {", "-                        case TokenTypes.EXPR:", "-                        case TokenTypes.ANNOTATION_ARRAY_INIT:", "-                            values = getAnnotationValues(nextAST);", "-                            break;", "-", "-                        case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:", "-                            // expected children: IDENT ASSIGN ( EXPR |", "-                            // ANNOTATION_ARRAY_INIT )", "-                            values = getAnnotationValues(getNthChild(nextAST, 2));", "-                            break;", "-", "-                        case TokenTypes.RPAREN:", "-                            // no value present (not valid Java)", "-                            break;", "-", "-                        default:", "-                            // unknown annotation value type (new syntax?)", "-                    }", "-                }", "-            }", "+            final List<String> values = getAllAnnotationValues(ast);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ef37632029a0f05d847cdcc963c42bc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d325171c677e354264e8f5946e54989d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "99ce97725cd037d152c571e5ff58eac9247d072d", "commitAfterChange": "9241c0a692ed65fab3b3fdb3c4ff1c118794337c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isSkipCase(DetailAST ast)", "signatureAfterChange": "     private static boolean isSkipCase(DetailAST ast)", "diff": ["+        boolean skipCase = true;", "+", "-        if (ScopeUtils.isLocalVariableDef(ast)", "-            || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "-            return true;", "-        }", "+        if (!ScopeUtils.isLocalVariableDef(ast)", "+                && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "+            final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        if (assign == null) {", "-            // no assign - no check", "-            return true;", "+            if (assign != null) {", "+                final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+                skipCase = modifiers.branchContains(TokenTypes.FINAL);", "+            }", "-", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        return modifiers.branchContains(TokenTypes.FINAL);", "+        return skipCase;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef3487c3f4c2c47ece45577193cfd115", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "57f395fa2b2dcea7dd369ab3dd52d3d42f0e0893", "commitAfterChange": "6d9d894a62caf7e7419fcb07e7d972499e4306d7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        // do not check local variables and", "-        // fields declared in interface/annotations", "-        if (ScopeUtils.isLocalVariableDef(ast)", "-            || ScopeUtils.inInterfaceOrAnnotationBlock(ast)) {", "+        if (isSkipCase(ast)) {", "-        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "-        if (assign == null) {", "-            // no assign - no check", "-            return;", "-        }", "-", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiers != null", "-            && modifiers.branchContains(TokenTypes.FINAL)) {", "-            // do not check final variables", "-            return;", "-        }", "-", "-        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "+        final DetailAST assign = ast.findFirstToken(TokenTypes.ASSIGN);", "+        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "-            && (isZero(exprStart)", "-                || exprStart.getType() == TokenTypes.CHAR_LITERAL", "-                && \"'\\\\0'\".equals(exprStart.getText()))) {", "+            && isZeroChar(exprStart)) {"]}]}
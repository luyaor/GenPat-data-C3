{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0a15c253c0c2ca57d37abe96f07b310", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "505a731e754a0bb2b4389b8e23102235", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "576d593f6cb309d0959639fa707d0a01f28a6609", "commitAfterChange": "9dbc71956635b56a20780d484454e177897b5788", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public static DetailNode getPreviousSibling(DetailNode node)", "signatureAfterChange": "     public static DetailNode getPreviousSibling(DetailNode node)", "diff": ["-        if (parent != null) {", "-            final int previousSiblingIndex = node.getIndex() - 1;", "-            final DetailNode[] children = parent.getChildren();", "-            if (previousSiblingIndex >= 0) {", "-                return children[previousSiblingIndex];", "-            }", "+        final int previousSiblingIndex = node.getIndex() - 1;", "+        final DetailNode[] children = parent.getChildren();", "+        if (previousSiblingIndex >= 0) {", "+            return children[previousSiblingIndex];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68df9510a06c94c5670e6e6a0fe60020", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "aa0f77eb9294588b0d891dbde516bc43a5af4f5a", "commitAfterChange": "c4339df8b3d6b58b327b6cfcaca7413e9c526dcf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private static boolean isVariableInOperatorExpr(             DetailAST operator, DetailAST variable)", "signatureAfterChange": "     private static boolean isVariableInOperatorExpr(             DetailAST operator, DetailAST variable)", "diff": ["-        if (openingBracket != null) {", "-            // Get EXPR between brackets", "-            DetailAST exprBetweenBrackets = openingBracket", "-                    .getNextSibling();", "+        // Get EXPR between brackets", "+        DetailAST exprBetweenBrackets = openingBracket.getNextSibling();", "-            // Look if variable is in operator expression", "-            while (exprBetweenBrackets.getType() != TokenTypes.RPAREN) {", "+        // Look if variable is in operator expression", "+        while (exprBetweenBrackets.getType() != TokenTypes.RPAREN) {", "-                if (isChild(exprBetweenBrackets, variable)) {", "-                    isVarInOperatorDeclr = true;", "-                    break;", "-                }", "-                exprBetweenBrackets = exprBetweenBrackets.getNextSibling();", "+            if (isChild(exprBetweenBrackets, variable)) {", "+                isVarInOperatorDeclr = true;", "+                break;", "+            exprBetweenBrackets = exprBetweenBrackets.getNextSibling();", "+        }", "-            // Variable may be met in ELSE declaration or in CASE declaration.", "-            // So, check variable usage in these declarations.", "-            if (!isVarInOperatorDeclr) {", "-                switch (operator.getType()) {", "-                    case TokenTypes.LITERAL_IF:", "-                        final DetailAST elseBlock = operator.getLastChild();", "+        // Variable may be met in ELSE declaration or in CASE declaration.", "+        // So, check variable usage in these declarations.", "+        if (!isVarInOperatorDeclr) {", "+            switch (operator.getType()) {", "+            case TokenTypes.LITERAL_IF:", "+                final DetailAST elseBlock = operator.getLastChild();", "-                        if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {", "-                            // Get IF followed by ELSE", "-                            final DetailAST firstNodeInsideElseBlock = elseBlock", "-                                .getFirstChild();", "+                if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {", "+                    // Get IF followed by ELSE", "+                    final DetailAST firstNodeInsideElseBlock = elseBlock.getFirstChild();", "-                            if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {", "-                                isVarInOperatorDeclr |=", "-                                    isVariableInOperatorExpr(", "-                                        firstNodeInsideElseBlock,", "-                                            variable);", "-                            }", "+                    if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {", "+                        isVarInOperatorDeclr |= isVariableInOperatorExpr(firstNodeInsideElseBlock, variable);", "-                        break;", "-", "-                    case TokenTypes.LITERAL_SWITCH:", "-                        DetailAST currentCaseBlock = operator", "-                            .findFirstToken(TokenTypes.CASE_GROUP);", "-", "-                        while (currentCaseBlock != null", "-                            && currentCaseBlock.getType() == TokenTypes.CASE_GROUP) {", "-                            final DetailAST firstNodeInsideCaseBlock =", "-                                currentCaseBlock.getFirstChild();", "-", "-                            if (isChild(firstNodeInsideCaseBlock,", "-                                variable)) {", "-                                isVarInOperatorDeclr = true;", "-                                break;", "-                            }", "-                            currentCaseBlock = currentCaseBlock.getNextSibling();", "-                        }", "-                        break;", "-", "-                    default:", "-                        // no code", "+                break;", "+", "+            case TokenTypes.LITERAL_SWITCH:", "+                DetailAST currentCaseBlock = operator.findFirstToken(TokenTypes.CASE_GROUP);", "+", "+                while (currentCaseBlock != null && currentCaseBlock.getType() == TokenTypes.CASE_GROUP) {", "+                    final DetailAST firstNodeInsideCaseBlock = currentCaseBlock.getFirstChild();", "+", "+                    if (isChild(firstNodeInsideCaseBlock, variable)) {", "+                        isVarInOperatorDeclr = true;", "+                        break;", "+                        }", "+                    currentCaseBlock = currentCaseBlock.getNextSibling();", "+                }", "+                break;", "+", "+            default:", "+                // no code"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f7a199ba70e228b3e2b1814d23b5ba1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java", "commitBeforeChange": "947e230fbfe9251ecf7cb37dafd2adb46732a1e9", "commitAfterChange": "e8255c208f9b75bda2d724e901fc210fff9ab15a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean isExtendedClassNamedAsException(DetailAST ast)", "signatureAfterChange": "     private boolean isExtendedClassNamedAsException(DetailAST ast)", "diff": ["-            if (extendedClass != null) {", "-                final String extendedClassName = extendedClass.getText();", "-                return extendedClassName.matches(extendedClassNameFormat);", "-            }", "+            final String extendedClassName = extendedClass.getText();", "+            return extendedClassName.matches(extendedClassNameFormat);"]}]}
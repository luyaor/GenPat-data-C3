{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b54cca0eb5eea18fa4dd3621c61710bd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35f7c2d32277e5b9d9c027797ba93f16", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java", "commitBeforeChange": "7b0388ee96bf14872ae095da85738af97ef857d5", "commitAfterChange": "c74d7b7549dffa19bea50b0b9207706174d20c0b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Override     protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)         throws Exception", "signatureAfterChange": "      @Override     protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)         throws Exception", "diff": ["-        final LineNumberReader lnr =", "-            new LineNumberReader(new InputStreamReader(bais, StandardCharsets.UTF_8));", "+        try (final LineNumberReader lnr = new LineNumberReader(", "+                new InputStreamReader(bais, StandardCharsets.UTF_8))) {", "-        for (int i = 0; i < expected.length; i++) {", "-            final String expectedResult = messageFileName + \":\" + expected[i];", "-            final String actual = lnr.readLine();", "-            assertEquals(\"error message \" + i, expectedResult, actual);", "+            for (int i = 0; i < expected.length; i++) {", "+                final String expectedResult = messageFileName + \":\" + expected[i];", "+                final String actual = lnr.readLine();", "+                assertEquals(\"error message \" + i, expectedResult, actual);", "+            }", "+", "+            assertTrue(\"unexpected output: \" + lnr.readLine(),", "+                    expected.length >= errs);", "-", "-        assertTrue(\"unexpected output: \" + lnr.readLine(),", "-                   expected.length >= errs);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e32fef2ffa09c0a628087c760527d37f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "7b0388ee96bf14872ae095da85738af97ef857d5", "commitAfterChange": "c74d7b7549dffa19bea50b0b9207706174d20c0b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "diff": ["-        final LineNumberReader lnr =", "-                new LineNumberReader(new InputStreamReader(bais, StandardCharsets.UTF_8));", "+        try (final LineNumberReader lnr = new LineNumberReader(", "+                new InputStreamReader(bais, StandardCharsets.UTF_8))) {", "-        for (int i = 0; i < expected.length; i++) {", "-            final String expectedResult = messageFileName + \":\" + expected[i];", "-            final String actual = lnr.readLine();", "-            assertEquals(\"error message \" + i, expectedResult, actual);", "+            for (int i = 0; i < expected.length; i++) {", "+                final String expectedResult = messageFileName + \":\" + expected[i];", "+                final String actual = lnr.readLine();", "+                assertEquals(\"error message \" + i, expectedResult, actual);", "+            }", "+", "+            assertEquals(\"unexpected output: \" + lnr.readLine(),", "+                    expected.length, errs);", "-", "-        assertEquals(\"unexpected output: \" + lnr.readLine(),", "-                expected.length, errs);"]}]}
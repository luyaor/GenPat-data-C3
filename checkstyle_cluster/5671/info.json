{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8be35c217bcafb4ee77207757f1b7668", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03f325314f2e1d35655f6970c8f72869", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "4945b82e6d101325b5eff4d38d3855c08aa9cacd", "commitAfterChange": "1aa21343992de65460febdeda528f25a652972d2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void walk(DetailAST aAST, FileContents aContents)", "signatureAfterChange": "     void walk(DetailAST aAST, FileContents aContents)", "diff": ["-        aAST.setParent(null);", "-        process(aAST);", "+", "+         // empty files are not flagged by javac, will yield aAST == null", "+        if (aAST != null) {", "+            aAST.setParent(null);", "+            process(aAST);", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0531d890bb92d1e8b02f2ea69bd6686a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/HeaderCheck.java", "commitBeforeChange": "ff2f5fe363c60cede0af7fc4eb2e2936a765b9be", "commitAfterChange": "2b36d7dec160fdd7f5a92366709ddc2d586ebef5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void beginTree()", "signatureAfterChange": "     public void beginTree()", "diff": ["-        if (mHeaderLines != null) {", "+        if (mHeaderLines == null) {", "+            log(1, \"Unable to check as missing lines to check.\");", "+            return;", "+        }", "-            final String[] lines = getLines();", "+        final String[] lines = getLines();", "-            if (mHeaderLines.length > lines.length) {", "-                log(1, \"header.missing\");", "-            }", "-            else {", "-                for (int i = 0; i < mHeaderLines.length; i++) {", "-                    // skip lines we are meant to ignore", "-                    if (isIgnoreLine(i + 1)) {", "-                        continue;", "-                    }", "+        if (mHeaderLines.length > lines.length) {", "+            log(1, \"header.missing\");", "+        }", "+        else {", "+            for (int i = 0; i < mHeaderLines.length; i++) {", "+                // skip lines we are meant to ignore", "+                if (isIgnoreLine(i + 1)) {", "+                    continue;", "+                }", "-                    if (!isMatch(i)) {", "-                        log(i + 1, \"header.mismatch\", mHeaderLines[i]);", "-                        break; // stop checking", "-                    }", "+                if (!isMatch(i)) {", "+                    log(i + 1, \"header.mismatch\", mHeaderLines[i]);", "+                    break; // stop checking"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b7a3134ce56408c50cac51ac9771930", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "03b0bc8f47ba6625cd9ce89ae94c570cbbd6e8bb", "commitAfterChange": "a501b8d95ac2840ce201549e552f2cc540fde4ce", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+        if (isInIgnoreOccurrenceContext(aAST)) {", "+            return;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ec368e94a1ca1c0cfa7d2110bf43a03", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ArrayTypeStyleCheck.java", "commitBeforeChange": "5599c68a821adbf1f40749cc131d2156e4690788", "commitAfterChange": "5133219581cf14cb25c009c31d6067173430261e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        DetailAST variableAST = (DetailAST) typeAST.getNextSibling();", "-        boolean isJavaStyle = (variableAST.getColumnNo() > aAST.getColumnNo());", "+        final DetailAST variableAST = (DetailAST) typeAST.getNextSibling();", "+        if (variableAST != null) {", "+            final boolean isJavaStyle =", "+                (variableAST.getColumnNo() > aAST.getColumnNo());", "-        if (isJavaStyle != mJavaStyle) {", "-            log(aAST.getLineNo(), aAST.getColumnNo(),", "+            if (isJavaStyle != mJavaStyle) {", "+                log(", "+                    aAST.getLineNo(),", "+                    aAST.getColumnNo(),", "+            }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "574bddc735295ffcd7ce4a27737295cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java", "commitBeforeChange": "058eb9990a526674c2e28beefc1c035eb7d98001", "commitAfterChange": "3eb75145e9718172ff9c74e6148b81762625803b", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean isExtendedClassNamedAsException(DetailAST ast)", "signatureAfterChange": "     private boolean isExtendedClassNamedAsException(DetailAST ast)", "diff": ["-            final String extendedClassName = extendedClass.getText();", "-            return extendedClassName.matches(extendedClassNameFormat);", "+            if (extendedClass != null) {", "+                final String extendedClassName = extendedClass.getText();", "+                return extendedClassName.matches(extendedClassNameFormat);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cdd59f08472094c8e210d96dc544314", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "04bca2e0435d598918603ce5a457ddc99e6ae5a5", "commitAfterChange": "c3baa3fa77f4ed8e475ab52db6d0f2f860d93ef0", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": "     public void fireFileFinished(String aFileName)", "signatureAfterChange": "     public void fireFileFinished(String aFileName)", "diff": ["-        final Iterator it = mListeners.iterator();", "-        while (it.hasNext()) {", "-            final AuditListener listener = (AuditListener) it.next();", "-            listener.fileFinished(evt);", "+        if (accept(evt)) {", "+            final Iterator it = mListeners.iterator();", "+            while (it.hasNext()) {", "+                final AuditListener listener = (AuditListener) it.next();", "+                listener.fileFinished(evt);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6dda8028806e2112b195b619a214e1f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "a03dc8c1c9b1a7308be5e92324efab3413f6a771", "commitAfterChange": "d91d824ac797f1901858507d1b7b36b08c499569", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        DetailAST child = (DetailAST) objBlock.getFirstChild();", "-        while (child != null) {", "-            if (child.getType() == TokenTypes.METHOD_DEF) {", "-                if (isEqualsMethod(child)) {", "-                    if (hasObjectParameter(child)) {", "-                        mHasEqualsObject = true;", "-                    }", "-                    else {", "-                        mEqualsMethods.add(child);", "+        if (objBlock != null) {", "+            DetailAST child = (DetailAST) objBlock.getFirstChild();", "+            while (child != null) {", "+                if (child.getType() == TokenTypes.METHOD_DEF) {", "+                    if (isEqualsMethod(child)) {", "+                        if (hasObjectParameter(child)) {", "+                            mHasEqualsObject = true;", "+                        }", "+                        else {", "+                            mEqualsMethods.add(child);", "+                        }", "+                child = (DetailAST) child.getNextSibling();", "-            child = (DetailAST) child.getNextSibling();", "-        }", "-", "-        // report equals method definitions", "-        if (!mHasEqualsObject) {", "-            final Iterator it = mEqualsMethods.iterator();", "-            while (it.hasNext()) {", "-                final DetailAST equalsAST = (DetailAST) it.next();", "-                final DetailAST nameNode =", "-                    equalsAST.findFirstToken(TokenTypes.IDENT);", "-                log(", "-                    nameNode.getLineNo(),", "-                    nameNode.getColumnNo(),", "-                    \"covariant.equals\");", "+    ", "+            // report equals method definitions", "+            if (!mHasEqualsObject) {", "+                final Iterator it = mEqualsMethods.iterator();", "+                while (it.hasNext()) {", "+                    final DetailAST equalsAST = (DetailAST) it.next();", "+                    final DetailAST nameNode =", "+                        equalsAST.findFirstToken(TokenTypes.IDENT);", "+                    log(", "+                        nameNode.getLineNo(),", "+                        nameNode.getColumnNo(),", "+                        \"covariant.equals\");", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e7457626d102a3e568677643c6adb8f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/usage/src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/Resolver.java", "commitBeforeChange": "2a96f3f8909df111882e075196adc2f1545e23f6", "commitAfterChange": "5063a410cfab79733c04ac0dc52ef9756e18c6f0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected void handleClass(ClassDef classDef)", "signatureAfterChange": "     protected void handleClass(ClassDef classDef)", "diff": ["-            SymTabAST extendedClassNode =", "-                (SymTabAST) extendsClause.getFirstChild();", "-            while (extendedClassNode != null) {", "-                IClass superClass =", "-                    resolveClass(extendedClassNode, classDef, null, true);", "-                extendedClassNode.setDefinition(superClass, classDef, true);", "-                extendedClassNode =", "-                    (SymTabAST) extendedClassNode.getNextSibling();", "+            if(extendsClause != null) {", "+                SymTabAST extendedClassNode =", "+                    (SymTabAST) extendsClause.getFirstChild();", "+", "+                while (extendedClassNode != null) {", "+                    IClass superClass =", "+                        resolveClass(extendedClassNode, classDef, null, true);", "+                    extendedClassNode.setDefinition(superClass, classDef, true);", "+                    extendedClassNode =", "+                        (SymTabAST) extendedClassNode.getNextSibling();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "874c1c8d4b1481d5ec2b7696a009434e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "04bca2e0435d598918603ce5a457ddc99e6ae5a5", "commitAfterChange": "c3baa3fa77f4ed8e475ab52db6d0f2f860d93ef0", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void fireErrors(String aFileName, LocalizedMessage[] aErrors)", "signatureAfterChange": "     public void fireErrors(String aFileName, LocalizedMessage[] aErrors)", "diff": ["-            final Iterator it = mListeners.iterator();", "-            while (it.hasNext()) {", "-                final AuditListener listener = (AuditListener) it.next();", "-                listener.addError(evt);", "+            if (accept(evt)) {", "+                final Iterator it = mListeners.iterator();", "+                while (it.hasNext()) {", "+                    final AuditListener listener = (AuditListener) it.next();", "+                    listener.addError(evt);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c2ee094740de5a821c49d05e05a357e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDoclet.java", "commitBeforeChange": "ecc5239c78ca71db775de187b6b70481d8b08284", "commitAfterChange": "d2af4accdde3eac0a2103353f490e97bf62f61d2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static boolean start(RootDoc aRoot) throws FileNotFoundException", "signatureAfterChange": "     public static boolean start(RootDoc aRoot) throws FileNotFoundException", "diff": ["-        final PrintStream ps = new PrintStream(fos);", "-        final ClassDoc[] classes = aRoot.classes();", "-        if ((classes.length != 1) || !\"TokenTypes\".equals(classes[0].name())) {", "-            final String message =", "-                \"The doclet should be used for TokenTypes only\";", "-            throw new IllegalArgumentException(message);", "-        }", "-", "-        final FieldDoc[] fields = classes[0].fields();", "-        for (final FieldDoc field : fields) {", "-            if (field.isStatic() && field.isPublic() && field.isFinal()", "-                && \"int\".equals((field.type().qualifiedTypeName())))", "+        PrintStream ps = null;", "+        try {", "+            ps = new PrintStream(fos);", "+            final ClassDoc[] classes = aRoot.classes();", "+            if ((classes.length != 1)", "+                || !\"TokenTypes\".equals(classes[0].name()))", "-                if (field.firstSentenceTags().length != 1) {", "-                    final String message = \"Should be only one tag.\";", "-                    throw new IllegalArgumentException(message);", "+                final String message =", "+                    \"The doclet should be used for TokenTypes only\";", "+                throw new IllegalArgumentException(message);", "+            }", "+", "+            final FieldDoc[] fields = classes[0].fields();", "+            for (final FieldDoc field : fields) {", "+                if (field.isStatic() && field.isPublic() && field.isFinal()", "+                    && \"int\".equals((field.type().qualifiedTypeName())))", "+                {", "+                    if (field.firstSentenceTags().length != 1) {", "+                        final String message = \"Should be only one tag.\";", "+                        throw new IllegalArgumentException(message);", "+                    }", "+                    ps.println(field.name() + \"=\"", "+                        + field.firstSentenceTags()[0].text());", "-                ps.println(field.name() + \"=\"", "-                           + field.firstSentenceTags()[0].text());", "+            }", "+        }", "+        finally {", "+            if (ps != null) {", "+                ps.close();", "-        ps.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a40511dae15945e2b9e89656af1abb80", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "e389849df6d5ee4ba99aba175fbb0f4d6ade40ee", "commitAfterChange": "7823165cce4d7978fe928d8ada0a4861c950ff0f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void checkHtml(final DetailAST aAST, final TextBlock aComment)", "signatureAfterChange": "     private void checkHtml(final DetailAST aAST, final TextBlock aComment)", "diff": ["-                htmlStack.push(tag);", "+                //We only push html tags that are allowed", "+                if (isAllowedTag(tag)) {", "+                    htmlStack.push(tag);", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be5020c566c7f1d6b15543dede8f1407", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "04bca2e0435d598918603ce5a457ddc99e6ae5a5", "commitAfterChange": "c3baa3fa77f4ed8e475ab52db6d0f2f860d93ef0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": "     public void fireFileStarted(String aFileName)", "signatureAfterChange": "     public void fireFileStarted(String aFileName)", "diff": ["-        final Iterator it = mListeners.iterator();", "-        while (it.hasNext()) {", "-            final AuditListener listener = (AuditListener) it.next();", "-            listener.fileStarted(evt);", "+        if (accept(evt)) {", "+            final Iterator it = mListeners.iterator();", "+            while (it.hasNext()) {", "+                final AuditListener listener = (AuditListener) it.next();", "+                listener.fileStarted(evt);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4295d3c83595f91a6934c8f28c53372", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "04bca2e0435d598918603ce5a457ddc99e6ae5a5", "commitAfterChange": "c3baa3fa77f4ed8e475ab52db6d0f2f860d93ef0", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected void fireAuditFinished()", "signatureAfterChange": "     protected void fireAuditFinished()", "diff": ["-        final Iterator it = mListeners.iterator();", "-        while (it.hasNext()) {", "-            final AuditListener listener = (AuditListener) it.next();", "-            listener.auditFinished(evt);", "+        if (accept(evt)) {", "+            final Iterator it = mListeners.iterator();", "+            while (it.hasNext()) {", "+                final AuditListener listener = (AuditListener) it.next();", "+                listener.auditFinished(evt);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4bc0308d231bd09c6e4b394410b6f67", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "ecc5239c78ca71db775de187b6b70481d8b08284", "commitAfterChange": "d2af4accdde3eac0a2103353f490e97bf62f61d2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static Properties loadProperties(File aFile)", "signatureAfterChange": "     private static Properties loadProperties(File aFile)", "diff": ["-            fis = new FileInputStream(aFile);", "-            properties.load(fis);", "-            fis.close();", "+            try {", "+                fis = new FileInputStream(aFile);", "+                properties.load(fis);", "+            }", "+            finally {", "+                if (fis != null) {", "+                    fis.close();", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa3e3400dd25e1fb3e61541045391229", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/AbstractUsageCheck.java", "commitBeforeChange": "458086242f4b8f1a837400b7b7f4b6fe67601ba6", "commitAfterChange": "0595eb90968e5560658bbc7be74479b87b92f269", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void finishTree(DetailAST aAST)", "signatureAfterChange": "     public void finishTree(DetailAST aAST)", "diff": ["+        if (aAST == null) {", "+            // we have nothing to check", "+            return;", "+        }"]}]}
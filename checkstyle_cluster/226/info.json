{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8fd6e4787567b00ea4cc6fe4d4563fb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "185eda51d3ca91a862b2a87a47f54ff3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "302f80bd65e3670d296bba40de712be7a0932bd3", "commitAfterChange": "ef791720f010bcc2a05da76cac8021085bc71155", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      public void openFile(File aFile, final Component aParent)", "signatureAfterChange": "       public void openFile(File aFile, final Component aParent)", "diff": ["+", "-                DetailAST parseTree = parseFile(aFile.getAbsolutePath());", "+                Main.frame.setTitle(\"Checkstyle : \" + aFile.getName());", "+                final DetailAST parseTree = parseFile(aFile.getAbsolutePath());", "+", "+                String[] sourceLines = Utils.getLines(aFile.getAbsolutePath());", "+                //clean the text area before inserting the lines of the new file", "+                if (mJTextArea.getText().length() != 0) {", "+                    mJTextArea.replaceRange(\"\", 0, mJTextArea.getText()", "+                            .length());", "+                }", "+", "+                // insert the contents of the file to the text area", "+                for (int i = 0; i < sourceLines.length; i++) {", "+                    mJTextArea.append(sourceLines[i] + \"\\n\");", "+                }", "+", "+                // move back to the top of the file", "+                mJTextArea.moveCaretPosition(0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dfe9514ab0b057ea769a894c8fec25a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "commitAfterChange": "189da7314d1b29f0e14479210c2fd567305a64d2", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "signatureAfterChange": "     protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "diff": ["+     */", "-        final Map<String, List<String>> expectedMessages = new HashMap<>(1);", "-        expectedMessages.put(messageFileName, asList(expected));", "-        verify(checker, processedFiles, expectedMessages);", "+        stream.flush();", "+        final List<File> theFiles = Lists.newArrayList();", "+        Collections.addAll(theFiles, processedFiles);", "+        final int errs = checker.process(theFiles);", "+", "+        // process each of the lines", "+        final ByteArrayInputStream inputStream =", "+                new ByteArrayInputStream(stream.toByteArray());", "+        try (final LineNumberReader lnr = new LineNumberReader(", "+                new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {", "+", "+            for (int i = 0; i < expected.length; i++) {", "+                final String expectedResult = messageFileName + \":\" + expected[i];", "+                final String actual = lnr.readLine();", "+                assertEquals(\"error message \" + i, expectedResult, actual);", "+            }", "+", "+            assertEquals(\"unexpected output: \" + lnr.readLine(),", "+                    expected.length, errs);", "+        }", "+", "+        checker.destroy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7750383b1215586625f48f659d4be4aa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "440cf6836f278602a790d764f257777be80d8b9e", "commitAfterChange": "686afc521a11088c57632352eb6fd60a682b03d6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": "          public void testCheckOption()         throws Exception", "signatureAfterChange": "      private void verifyConfigNode(         DefaultConfiguration aConfig, String aName, int aChildrenLength,         Properties atts) throws Exception", "diff": ["-    ", "-    public void testCheckOption()", "-        throws Exception", "-//        Configuration config =", "-//            loadConfiguration(\"rightcurlycheck_configuration.xml\");", "-//                    ", "-//        GlobalProperties globalProps =", "-//            new GlobalProperties(new Properties(), System.out);", "-//        assertEquals(\"properties\", globalProps.getProperties(),", "-//            config.getProperties());", "-//                ", "-//        CheckConfiguration[] checkConfigs = config.getCheckConfigurations();", "-//        assertEquals(\"checkConfigs.length\", 1, checkConfigs.length);", "-//        ", "-//        RightCurlyCheck rightCurly =", "-//            (RightCurlyCheck) (checkConfigs[0].", "-//                createInstance(this.getClass().getClassLoader()));", "-//        RightCurlyOption option =", "-//            (RightCurlyOption) rightCurly.getAbstractOption();", "-//        assertEquals(\"option\", \"alone\", option.toString());", "+", "+    private void verifyConfigNode(", "+        DefaultConfiguration aConfig, String aName, int aChildrenLength,", "+        Properties atts) throws Exception", "+    {", "+        assertEquals(\"name.\", aName, aConfig.getName());", "+        assertEquals(", "+            \"children.length.\", aChildrenLength, aConfig.getChildren().length);", "+", "+        final String[] attNames = aConfig.getAttributeNames();", "+        assertEquals(\"attributes.length\", atts.size(), attNames.length);", "+", "+        for (int i = 0; i < attNames.length; i++) {", "+            assertEquals(", "+                \"attribute[\" + attNames[i] + \"]\", atts.get(attNames[i]),", "+                aConfig.getAttribute(attNames[i]));", "+        }", "+    }"]}]}
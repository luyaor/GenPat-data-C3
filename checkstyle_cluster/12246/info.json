{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2bc3571716dda732dc9614a7e4527e80", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0176a4ac68ed0f5cc5852d00dbaaf826", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java", "commitBeforeChange": "c6edc74a2cf7a5e2c9affef6d0e1e931f783b462", "commitAfterChange": "795234dba5ed1ba32827051748d3c92657ad287d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static FilterSet loadSuppressions(String aFilename)         throws CheckstyleException", "signatureAfterChange": "     public static FilterSet loadSuppressions(String aFilename)         throws CheckstyleException", "diff": ["-        InputStream fis;", "-            fis = new FileInputStream(aFilename);", "+            // figure out if this is a File or a URL", "+            URI uri;", "+            try {", "+                final URL url = new URL(aFilename);", "+                uri = url.toURI();", "+            }", "+            catch (final MalformedURLException ex) {", "+                uri = null;", "+            }", "+            catch (final URISyntaxException ex) {", "+                // URL violating RFC 2396", "+                uri = null;", "+            }", "+            if (uri == null) {", "+                final File file = new File(aFilename);", "+                if (file.exists()) {", "+                    uri = file.toURI();", "+                }", "+                else {", "+                    // check to see if the file is in the classpath", "+                    try {", "+                        final URL configUrl = SuppressionsLoader.class", "+                                .getResource(aFilename);", "+                        if (configUrl == null) {", "+                            throw new FileNotFoundException(aFilename);", "+                        }", "+                        uri = configUrl.toURI();", "+                    }", "+                    catch (final URISyntaxException e) {", "+                        throw new FileNotFoundException(aFilename);", "+                    }", "+                }", "+            }", "+            final InputSource source = new InputSource(uri.toString());", "+            return loadSuppressions(source, aFilename);", "-            if (aFilename.matches(\"^https?://.+\")) {", "-                // this is a URL, load it as such", "-                try {", "-                    fis = new URL(aFilename).openStream();", "-                }", "-                catch (MalformedURLException e1) {", "-                    throw new CheckstyleException(", "-                        \"Invalid URL: \" + aFilename, e1);", "-                }", "-                catch (IOException e1) {", "-                    throw new CheckstyleException(", "-                        \"unable to read \" + aFilename, e1);", "-                }", "-            }", "-            else {", "-                // check for the file in the classpath", "-                fis = SuppressionsLoader.class.getResourceAsStream(aFilename);", "-            }", "-            if (fis == null) {", "-                throw new CheckstyleException(\"unable to find \" + aFilename, e);", "-            }", "+            throw new CheckstyleException(\"unable to find \" + aFilename, e);", "-        final InputSource source = new InputSource(fis);", "-        return loadSuppressions(source, aFilename);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79e0f125c34464545b8616c8f29a220c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java", "commitBeforeChange": "33efb558db835d60ca54644860a096f08d802fb5", "commitAfterChange": "e689662e9d47347cb2f326e1c16901ee1c4c6367", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static Set<String> getPackageNames(ClassLoader classLoader)         throws CheckstyleException", "signatureAfterChange": "     public static Set<String> getPackageNames(ClassLoader classLoader)             throws CheckstyleException", "diff": ["-        throws CheckstyleException {", "+            throws CheckstyleException {", "-        Enumeration<URL> packageFiles = null;", "+        Set<String> result;", "-            packageFiles = classLoader.getResources(CHECKSTYLE_PACKAGES);", "+            //create the loader outside the loop to prevent PackageObjectFactory", "+            //being created anew for each file", "+            final PackageNamesLoader namesLoader = new PackageNamesLoader();", "+", "+            final Enumeration<URL> packageFiles = classLoader.getResources(CHECKSTYLE_PACKAGES);", "+", "+            while (packageFiles.hasMoreElements()) {", "+                final URL packageFile = packageFiles.nextElement();", "+                InputStream stream = null;", "+", "+                try {", "+                    stream = new BufferedInputStream(packageFile.openStream());", "+                    final InputSource source = new InputSource(stream);", "+                    namesLoader.parseInputSource(source);", "+                }", "+                catch (IOException e) {", "+                    throw new CheckstyleException(\"unable to open \" + packageFile, e);", "+                }", "+                finally {", "+                    Closeables.closeQuietly(stream);", "+                }", "+            }", "+", "+            result = namesLoader.getPackageNames();", "+", "-            throw new CheckstyleException(", "-                    \"unable to get package file resources\", e);", "+            throw new CheckstyleException(\"unable to get package file resources\", e);", "+        }", "+        catch (ParserConfigurationException | SAXException e) {", "+            throw new CheckstyleException(\"unable to open one of package files\", e);", "-        //create the loader outside the loop to prevent PackageObjectFactory", "-        //being created anew for each file", "-        final PackageNamesLoader namesLoader = newPackageNamesLoader();", "-", "-        while (packageFiles.hasMoreElements()) {", "-            final URL packageFile = packageFiles.nextElement();", "-            InputStream stream = null;", "-", "-            try {", "-                stream = new BufferedInputStream(packageFile.openStream());", "-                final InputSource source = new InputSource(stream);", "-                loadPackageNamesSource(source, \"default package names\",", "-                    namesLoader);", "-            }", "-            catch (IOException e) {", "-                throw new CheckstyleException(", "-                        \"unable to open \" + packageFile, e);", "-            }", "-            finally {", "-                Closeables.closeQuietly(stream);", "-            }", "-        }", "-        return namesLoader.getPackageNames();", "-    }", "+        return result;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9255f8ba7db0e9e0721d22f9576888b9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20ac70f2670c5f80feb3350af91445be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "a07cae0aca9f9072256b3a5fd05779e8d69b9748", "commitAfterChange": "8f19f1d70630f210f33ebd51d42d04ca9727ff36", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void register(int type, Class<?> handlerClass)", "signatureAfterChange": "     private void register(int type, Class<?> handlerClass)", "diff": ["-        try {", "-            final Constructor<?> ctor = handlerClass", "-                .getConstructor(new Class[] {IndentationCheck.class,", "-                    DetailAST.class, // current AST", "-                    AbstractExpressionHandler.class, // parent", "-                });", "-            typeHandlers.put(type, ctor);", "-        }", "-        catch (final NoSuchMethodException | SecurityException e) {", "-            final String message = \"couldn't find ctor for \" + handlerClass;", "-            LOG.debug(message, e);", "-            throw new RuntimeException(message);", "-        }", "+        final Constructor<?> ctor = Utils.getConstructor(handlerClass,", "+                IndentationCheck.class,", "+                DetailAST.class, // current AST", "+                AbstractExpressionHandler.class // parent", "+        );", "+        typeHandlers.put(type, ctor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c442e0a498cb4ec120cb6500129b5fa9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "08638b5f739d9929698860048c052da2d5f80209", "commitAfterChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     private void register(int aType, Class aHandlerClass)", "signatureAfterChange": "     private void register(int aType, Class<?> aHandlerClass)", "diff": ["-    private void register(int aType, Class aHandlerClass)", "+    private void register(int aType, Class<?> aHandlerClass)", "-            final Constructor ctor = aHandlerClass.getConstructor(new Class[] {", "-                IndentationCheck.class,", "-                DetailAST.class,             // current AST", "-                ExpressionHandler.class,     // parent", "-            });", "+            final Constructor<?> ctor = aHandlerClass", "+                    .getConstructor(new Class[] {IndentationCheck.class,", "+                        DetailAST.class, // current AST", "+                        ExpressionHandler.class, // parent", "+                    });"]}]}
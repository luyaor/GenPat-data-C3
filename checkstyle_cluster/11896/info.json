{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e264c6c754b0cde785b933df2cf4f855", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d4ef2d08f19365a04bad65c2f54625d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "90c0f0affe174beb80b45d5bc99ea9540d6d1c77", "commitAfterChange": "3288a81e30ddea194f76bd74f3b509500b864163", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-        final Configuration config = createConfiguration();", "+        if (mConfigFile == null) {", "+            throw new BuildException(\"Must specify 'config'.\", getLocation());", "+        }", "-                c = new Checker(config);", "+                final Configuration config = createConfiguration();", "+                final CheckConfiguration[] checkConfigs =", "+                    ConfigurationLoader.loadConfigs(", "+                        mConfigFile.getAbsolutePath());", "+                c = new Checker(config, checkConfigs);", "-                throw new BuildException(\"Unable to create a Checker\", e);", "+                throw new BuildException(", "+                    \"Unable to create a Checker: \" + e.getMessage(), e);", "-            final int numErrs = c.process(files);", "+            final int numErrs = c.processNEW(files);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baeaa38848bacbc39e4957fcf62ea2b5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "825d1be1521b2ff93f040da47c0c08910cd55e28", "commitAfterChange": "be6a7ca77be3de342656ec381aaa02b89da252d4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private ParseStatus parseJavadocAsDetailNode(DetailAST aJavadocCommentAst)", "signatureAfterChange": "     private ParseStatus parseJavadocAsDetailNode(DetailAST aJavadocCommentAst)", "diff": ["-                    \"javadoc.parse.error\",", "+                    PARSE_ERROR_MESSAGE_KEY,", "+", "+            // There are cases when antlr error listener does not handle syntax error", "+            if (parseErrorMessage == null) {", "+                parseErrorMessage = new ParseErrorMessage(aJavadocCommentAst.getLineNo(),", "+                        UNRECOGNIZED_ANTLR_ERROR_MESSAGE_KEY,", "+                        aJavadocCommentAst.getColumnNo(), e.getMessage());", "+            }"]}]}
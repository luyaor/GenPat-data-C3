{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef3f726f65afe8cce251726b983b5f42", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc4560e7b05136a5db1bd61dc6dc142", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/DesignForExtensionCheck.java", "commitBeforeChange": "a5349f581e11295b40b68ad194b3bfa10271f902", "commitAfterChange": "3a7ab7d24d0b865fd95a8c72ce7e765a801ea555", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-", "-        // method is ok if it is private or abstract or final", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiers.branchContains(TokenTypes.LITERAL_PRIVATE)", "-            || modifiers.branchContains(TokenTypes.ABSTRACT)", "-            || modifiers.branchContains(TokenTypes.FINAL)", "-            || modifiers.branchContains(TokenTypes.LITERAL_STATIC)) {", "+        if (isPrivateOrFinalOrAbstract(ast)) {", "+        if (hasDefaultOrExplNonPrivateCtor(classDef)) {", "+            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "+            log(ast.getLineNo(), ast.getColumnNo(),", "+                MSG_KEY, name);", "+        }", "+    }", "-                    candidate.findFirstToken(TokenTypes.MODIFIERS);", "-        if (hasDefaultConstructor || hasExplNonPrivateCtor) {", "-            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "-            log(ast.getLineNo(), ast.getColumnNo(),", "-                MSG_KEY, name);", "-        }", "-", "-", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf4f2d8e561c5297e2534a94668d3427", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "28c8ed692f83ff95e0814bd101177c4bb7794806", "commitAfterChange": "b5c738e6d0118111481daee0afd93b2a2d7d916a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-    /** {@inheritDoc} */", "-        switch (aAST.getType()) {", "-        case TokenTypes.PARAMETER_DEF :", "-        case TokenTypes.VARIABLE_DEF : {", "-            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "-            this.mFrames.current().addName(nameAST.getText());", "-            break;", "-        }", "-        case TokenTypes.CLASS_DEF : {", "-            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "-            this.mFrames.current().addName(nameAST.getText());", "-            this.mFrames.enter(new ClassFrame());", "-            break;", "-        }", "-        case TokenTypes.SLIST :", "-            this.mFrames.enter(new BlockFrame());", "-            break;", "-        case TokenTypes.METHOD_DEF :", "-        case TokenTypes.CTOR_DEF :", "-            this.mFrames.enter(new MethodFrame());", "-            break;", "-        case TokenTypes.IDENT :", "+        super.visitToken(aAST);", "+        if (aAST.getType() == TokenTypes.IDENT) {", "-            break;", "-        default:", "-            log(aAST, \"require.this.unexpected.visit\",", "-                new Integer(aAST.getType()));", "-        } // end switch", "+        }"]}]}
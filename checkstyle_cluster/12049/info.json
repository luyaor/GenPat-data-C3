{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "651244db02eba877e01fa0631ad318cc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73edebb4dde7e2a7c86ace1ebdb961d2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private boolean commentMatch(Pattern aPattern, String aLine, int aLineNo     )", "signatureAfterChange": "     private boolean commentMatch(Pattern pattern, String line, int lineNo     )", "diff": ["-    private boolean commentMatch(Pattern aPattern, String aLine, int aLineNo", "+    private boolean commentMatch(Pattern pattern, String line, int lineNo", "-        final Matcher matcher = aPattern.matcher(aLine);", "+        final Matcher matcher = pattern.matcher(line);", "-            return getFileContents().hasIntersectionWithComment(aLineNo,", "-                    startMatch, aLineNo, endMatch);", "+            return getFileContents().hasIntersectionWithComment(lineNo,", "+                    startMatch, lineNo, endMatch);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79519fb216a2b35347074711414e274a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> tags,             List<ExceptionInfo> throwsList, boolean reportExpectedTags)", "diff": ["-    private void checkThrowsTags(List<JavadocTag> aTags,", "-            List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "+    private void checkThrowsTags(List<JavadocTag> tags,", "+            List<ExceptionInfo> throwsList, boolean reportExpectedTags)", "-        final ListIterator<JavadocTag> tagIt = aTags.listIterator();", "+        final ListIterator<JavadocTag> tagIt = tags.listIterator();", "-            ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();", "+            ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();", "-            throwIt = aThrows.listIterator();", "+            throwIt = throwsList.listIterator();", "-                else if (mAllowThrowsTagsForSubclasses) {", "+                else if (allowThrowsTagsForSubclasses) {", "-                if (mAllowUndeclaredRTE) {", "+                if (allowUndeclaredRTE) {", "-                if (reqd && mValidateThrows) {", "+                if (reqd && validateThrows) {", "-        if (!mAllowMissingThrowsTags && aReportExpectedTags) {", "-            for (ExceptionInfo ei : aThrows) {", "+        if (!allowMissingThrowsTags && reportExpectedTags) {", "+            for (ExceptionInfo ei : throwsList) {"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4c306285525cfa6d134024271267064", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13103f8bf8e4da1e83ccae0920d63b96", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int parentType = aAST.getParent().getType();", "-        final DetailAST modifiers = aAST.getFirstChild();", "+        final int parentType = ast.getParent().getType();", "+        final DetailAST modifiers = ast.getFirstChild();", "-        if ((mIgnoreFinal && modifiers.branchContains(TokenTypes.FINAL))", "+        if ((ignoreFinal && modifiers.branchContains(TokenTypes.FINAL))", "-            final DetailAST variable = aAST.findFirstToken(TokenTypes.IDENT);", "+            final DetailAST variable = ast.findFirstToken(TokenTypes.IDENT);", "-                final DetailAST semicolonAst = aAST.getNextSibling();", "+                final DetailAST semicolonAst = ast.getNextSibling();", "-                if (mValidateBetweenScopes) {", "+                if (validateBetweenScopes) {", "-                if (dist > mAllowedDistance", "+                if (dist > allowedDistance", "-                    if (mIgnoreFinal) {", "+                    if (ignoreFinal) {", "-                                MSG_KEY_EXT, variable.getText(), dist, mAllowedDistance);", "+                                MSG_KEY_EXT, variable.getText(), dist, allowedDistance);", "-                                MSG_KEY, variable.getText(), dist, mAllowedDistance);", "+                                MSG_KEY, variable.getText(), dist, allowedDistance);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "836e5951b5eeea1a6f633512bf9a875f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST aRootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-    public void finishTree(DetailAST aRootAST)", "+    public void finishTree(DetailAST rootAST)", "-        if (mImportToGroupList.isEmpty()) {", "+        if (importToGroupList.isEmpty()) {", "-        final ImportDetails firstImport = mImportToGroupList.get(0);", "+        final ImportDetails firstImport = importToGroupList.get(0);", "-        int groupNumber = mCustomImportOrderRules.indexOf(currentGroup);", "+        int groupNumber = customImportOrderRules.indexOf(currentGroup);", "-        for (ImportDetails importObject : mImportToGroupList) {", "+        for (ImportDetails importObject : importToGroupList) {", "-            final String fullImportIdent = importObject.mImportFullPath;", "+            final String fullImportIdent = importObject.importFullPath;", "-                if (mCustomImportOrderRules.size() > groupNumber + 1) {", "+                if (customImportOrderRules.size() > groupNumber + 1) {", "-                        if (mSeparateLineBetweenGroups && previousImport != null", "+                        if (separateLineBetweenGroups && previousImport != null", "-                        groupNumber = mCustomImportOrderRules.indexOf(nextGroup);", "+                        groupNumber = customImportOrderRules.indexOf(nextGroup);", "-            else if (mSortImportsInGroupAlphabetically", "+            else if (sortImportsInGroupAlphabetically"]}]}
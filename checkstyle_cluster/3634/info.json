{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "648402b516a7b62ef09504894a0bd940", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1f2dc1a397573a264232af4cda1da7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "e03dd7a0a03f9cf91e466ebee911ef0fa10130a4", "commitAfterChange": "9eb27f99a33fb67020c697bc2e4c5643aee0ae03", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            final DetailAST definer = getDefiner(aAST);", "-            final int type = definer.getType();", "-            if ((type == TokenTypes.CLASS_DEF)", "-                || (type == TokenTypes.LITERAL_NEW))", "-            {", "+            if (isEqualsMethod(aAST) && !ScopeUtils.inInterfaceBlock(aAST)) {", "+                final DetailAST definer = getDefiner(aAST);", "-                final ClassAttributes attrs =", "-                        (ClassAttributes) mClassStack.getLast();", "+                ClassAttributes attrs =", "+                    (ClassAttributes) mClassStack.getLast();", "-                    mClassStack.add(new ClassAttributes(definer));", "+                    final ClassAttributes definerAttrs =", "+                        new ClassAttributes(definer);", "+                    mClassStack.add(definerAttrs);", "+                    attrs = definerAttrs;", "-                if (!ScopeUtils.inInterfaceBlock(aAST)", "-                    && isEqualsMethod(aAST))", "-                {", "-                    if (hasObjectParameter(aAST)) {", "-                        attrs.setHasEqualsObject();", "-                    }", "-                    else {", "-                        attrs.addEqualsNode(aAST);", "-                    }", "+                if (hasObjectParameter(aAST)) {", "+                    attrs.setHasEqualsObject();", "+                }", "+                else {", "+                    attrs.addEqualsNode(aAST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b688ff3303369919481b1954d0be4a42", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "ee987808d13bef803ad1e7cfe7d5c8931a40eedc", "commitAfterChange": "b1123e96e452b41c5fb22de20bb7a99d376d0380", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void execute()         throws BuildException", "signatureAfterChange": "     public void execute()         throws BuildException", "diff": ["-            try {", "-                final Properties props = createOverridingProperties();", "-                final Configuration config =", "-                    ConfigurationLoader.loadConfiguration(", "-                        mConfigLocation, new PropertiesExpander(props));", "-", "-                final DefaultContext context = new DefaultContext();", "-                final ClassLoader loader =", "-                    new AntClassLoader(getProject(), mClasspath);", "-                context.add(\"classloader\", loader);", "-", "-                c = new Checker();", "-", "-                //load the set of package names", "-                if (mPackageNamesFile != null) {", "-                    final ModuleFactory moduleFactory =", "-                        PackageNamesLoader.loadModuleFactory(", "-                            mPackageNamesFile.getAbsolutePath());", "-                    c.setModuleFactory(moduleFactory);", "-                }", "-                c.contextualize(context);", "-                c.configure(config);", "-", "-                // setup the listeners", "-                final AuditListener[] listeners = getListeners();", "-                for (int i = 0; i < listeners.length; i++) {", "-                    c.addListener(listeners[i]);", "-                }", "-            }", "-            catch (Exception e) {", "-                throw new BuildException(", "-                    \"Unable to create a Checker: \" + e.getMessage(), e);", "-            }", "+            c = createChecker();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f79d2ed4ef317de82968ac1c0f46599b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ac1f1b9ac6b7005f70dc8000fd50534", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/MethodCountCheck.java", "commitBeforeChange": "afa1c0d8cd66b51f02b750594cbb9c9855e3e74a", "commitAfterChange": "fead6ef45a093f2a4ffbff013802959c89e7a6c6", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkCounters(DetailAST aAst)", "signatureAfterChange": "     private void checkCounters(MethodCounter aCounter, DetailAST aAst)", "diff": ["-    private void checkCounters(DetailAST aAst)", "+    private void checkCounters(MethodCounter aCounter, DetailAST aAst)", "-        final MethodCounter actualCounter = mCounters.peek();", "-        if (mCheckDefaultMethods) {", "-            if (actualCounter.value(Scope.PACKAGE) > mMax) {", "-                log(aAst.getLineNo(), \"too.many.defaultMethods\",", "-                    actualCounter.value(Scope.PACKAGE), mMax);", "-            }", "-        }", "-        if (mCheckPrivateMethods) {", "-            if (actualCounter.value(Scope.PRIVATE) > mMax) {", "-                log(aAst.getLineNo(), \"too.many.privateMethods\",", "-                    actualCounter.value(Scope.PRIVATE), mMax);", "-            }", "-        }", "-        if (mCheckProtectedMethods) {", "-            if (actualCounter.value(Scope.PROTECTED) > mMax) {", "-                log(aAst.getLineNo(), \"too.many.protectedMethods\",", "-                    actualCounter.value(Scope.PROTECTED), mMax);", "-            }", "-        }", "-        if (mCheckPublicMethods) {", "-            if (actualCounter.value(Scope.PUBLIC) > mMax) {", "-                log(aAst.getLineNo(), \"too.many.publicMethods\",", "-                    actualCounter.value(Scope.PUBLIC), mMax);", "-            }", "-        }", "+        checkMax(mMaxPrivate, aCounter.value(Scope.PRIVATE),", "+                 \"too.many.privateMethods\", aAst);", "+        checkMax(mMaxPackage, aCounter.value(Scope.PACKAGE),", "+                 \"too.many.packageMethods\", aAst);", "+        checkMax(mMaxProtected, aCounter.value(Scope.PROTECTED),", "+                 \"too.many.protectedMethods\", aAst);", "+        checkMax(mMaxPublic, aCounter.value(Scope.PUBLIC),", "+                 \"too.many.publicMethods\", aAst);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f6f2e5cd66aca6c55c0494fb6487ba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/CompareTreesWithComments.java", "commitBeforeChange": "10d3015752ad509cd8f7956d98b6eb9c92641a45", "commitAfterChange": "d35dc970390f16309861f1438038c08dc59ac290", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private static boolean isAstEquals(DetailAST expected, DetailAST actual)", "signatureAfterChange": "      private static boolean isAstEquals(DetailAST expected, DetailAST actual)", "diff": ["-        boolean result = false;", "+        boolean result;", "-        } else {", "-            if (expected.getType() == actual.getType()", "-                    && expected.getLineNo() == actual.getLineNo()", "-                    && expected.getColumnNo() == actual.getColumnNo()) {", "-                if (expected.getText() == null) {", "-                    result = actual.getText() == null;", "-                }", "-                else if (expected.getText().equals(actual.getText())) {", "-                    result = true;", "-                }", "-            }", "-", "-            if (result) {", "-                DetailAST childExpected = expected.getFirstChild();", "-                DetailAST childActual = actual.getFirstChild();", "-                result = isAstEquals(childExpected, childActual);", "-                if (result) {", "-                    DetailAST nextSiblingExpected = expected.getNextSibling();", "-                    DetailAST nextSiblingActual = actual.getNextSibling();", "-                    result = isAstEquals(nextSiblingExpected, nextSiblingActual);", "-                }", "-            }", "+        }", "+        else {", "+            result = isAstEqualsSafe(expected, actual);"]}]}
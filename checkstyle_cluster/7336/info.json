{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a38cc89cc31a79374c7b37ef22a9d05", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "194ff9003d5cd5525f2ce4ec89b4c397", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "bd4ec9a98edaced73f14c5422f64c39fad3ce596", "commitAfterChange": "fc17c983239b6e6a6d3e41f53cb134bd22488db1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean isConstantDefinition(DetailAST aAST)", "signatureAfterChange": " \tprivate DetailAST findContainingConstantDef(DetailAST aAST)", "diff": ["+\t */", "+\tprivate DetailAST findContainingConstantDef(DetailAST aAST) {", "+\t\tDetailAST varDefAST = aAST;", "+        while (varDefAST != null ", "+        \t\t&& varDefAST.getType() != TokenTypes.VARIABLE_DEF)", "+        {", "+        \tvarDefAST = varDefAST.getParent();", "+        }", "+        ", "+        // no containing variable definition?", "+        if (varDefAST == null) {", "+        \treturn null;", "+        }", "+        ", "+        // implicit constant?", "+        if (ScopeUtils.inInterfaceBlock(varDefAST)) {", "+        \treturn varDefAST;", "+        }", "+        ", "+        // explicit constant", "+        final DetailAST modifiersAST =", "+            varDefAST.findFirstToken(TokenTypes.MODIFIERS);", "+        if (modifiersAST.branchContains(TokenTypes.FINAL)) {", "+        \treturn varDefAST;", "+        }", "+", "+\t\treturn null;", "+\t}", "-     */", "-    private boolean isConstantDefinition(DetailAST aAST)", "-    {", "-        if (ScopeUtils.inInterfaceBlock(aAST)) {", "-            return true;", "-        }", "-        DetailAST parent = aAST.getParent();", "-", "-        if (parent == null) {", "-            return false;", "-        }", "-", "-        //skip TYPECAST, UNARY_MINUS, UNARY_PLUS", "-        while ((parent.getType() == TokenTypes.UNARY_MINUS)", "-            || (parent.getType() == TokenTypes.UNARY_PLUS)", "-            || (parent.getType() == TokenTypes.TYPECAST))", "-        {", "-            parent = parent.getParent();", "-        }", "-", "-        //expression?", "-        if ((parent == null) || (parent.getType() != TokenTypes.EXPR)) {", "-            return false;", "-        }", "-", "-        //array init?", "-        parent = parent.getParent();", "-        if ((parent != null) && (parent.getType() == TokenTypes.ARRAY_INIT)) {", "-            parent = parent.getParent();", "-        }", "-", "-        //assignment?", "-        if ((parent == null) || (parent.getType() != TokenTypes.ASSIGN)) {", "-            return false;", "-        }", "-", "-        //variable definition?", "-        parent = parent.getParent();", "-        if ((parent == null) || (parent.getType() != TokenTypes.VARIABLE_DEF)) {", "-            return false;", "-        }", "-", "-        //final?", "-        final DetailAST modifiersAST =", "-            parent.findFirstToken(TokenTypes.MODIFIERS);", "-        return modifiersAST.branchContains(TokenTypes.FINAL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e54a7afec630c5c99e5ce7b738bc7da", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "8da3b6dea4b446e055bb86b2bffb619008ee97b5", "commitAfterChange": "c3af7d4b0e9ffd5bdf1fa55273170f45b3b3d9e0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean shouldCheck(final DetailAST ast)", "signatureAfterChange": "     private boolean shouldCheck(final DetailAST ast)", "diff": ["+        boolean check = false;", "+", "-            return getFileContents().inPackageInfo();", "+            check = getFileContents().inPackageInfo();", "+        else if (!ScopeUtils.isInCodeBlock(ast)) {", "+            final Scope customScope;", "-        if (ScopeUtils.isInCodeBlock(ast)) {", "-            return false;", "-        }", "+            if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)", "+                    || ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "+                customScope = Scope.PUBLIC;", "+            }", "+            else {", "+                customScope = ScopeUtils.getScopeFromMods(ast.findFirstToken(TokenTypes.MODIFIERS));", "+            }", "+            final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);", "-        final Scope declaredScope;", "-        if (ast.getType() == TokenTypes.ENUM_CONSTANT_DEF) {", "-            declaredScope = Scope.PUBLIC;", "+            check = customScope.isIn(scope)", "+                    && (surroundingScope == null || surroundingScope.isIn(scope))", "+                    && (excludeScope == null", "+                        || !customScope.isIn(excludeScope)", "+                        || surroundingScope != null", "+                        && !surroundingScope.isIn(excludeScope));", "-        else {", "-            declaredScope = ScopeUtils.getScopeFromMods(", "-                ast.findFirstToken(TokenTypes.MODIFIERS));", "-        }", "-", "-        final Scope customScope;", "-", "-        if (ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "-            customScope = Scope.PUBLIC;", "-        }", "-        else {", "-            customScope = declaredScope;", "-        }", "-        final Scope surroundingScope = ScopeUtils.getSurroundingScope(ast);", "-", "-        return customScope.isIn(scope)", "-            && (surroundingScope == null || surroundingScope.isIn(scope))", "-            && (excludeScope == null", "-                || !customScope.isIn(excludeScope)", "-                || surroundingScope != null", "-                && !surroundingScope.isIn(excludeScope));", "+        return check;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "858d86dbe999731683001855d48a295a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "437e7ad139efbc6a06ecd657a634e7ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java", "commitBeforeChange": "ec6582beb1c026f1c3a9477d318d723e1caacb4a", "commitAfterChange": "679f818267161d9501a73ffdcc0d991537233633", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private float parseFloat(String aText, int aType)", "signatureAfterChange": "     private float parseFloat(String aText, int aType)", "diff": ["-        if (aType == TokenTypes.NUM_FLOAT) {", "-            result = Float.parseFloat(aText);", "-        }", "-        if (aType == TokenTypes.NUM_DOUBLE) {", "+        switch (aType) {", "+        case TokenTypes.NUM_FLOAT:", "+        case TokenTypes.NUM_DOUBLE:", "-        }", "-        else {", "+            break;", "+        case TokenTypes.NUM_INT:", "+        case TokenTypes.NUM_LONG:", "-            if (aType == TokenTypes.NUM_INT) {", "-                if (aText.length() > 0) {", "-                    result = (float) Integer.parseInt(aText, radix);", "-                }", "+            // Long.parseLong requires that the text ends with neither 'L'", "+            // nor 'l'.", "+            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {", "+                aText = aText.substring(0, aText.length() - 1);", "-            else if (aType == TokenTypes.NUM_LONG) {", "-                // Long.parseLong requires that the text ends with neither 'L'", "-                // nor 'l'.", "-                if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {", "-                    aText = aText.substring(0, aText.length() - 1);", "-                }", "-                if (aText.length() > 0) {", "-                    result = (float) Long.parseLong(aText, radix);", "-                }", "+            if (aText.length() > 0) {", "+                result = (float) Long.parseLong(aText, radix);", "+            break;", "+        default:", "+            break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e708133cc16c7e0d8e9d38ea96ff1d3f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "a4e3e3c1af37c52f72fb4b5aaa0411ae6d53bd36", "commitAfterChange": "74566f21a2298d53f9c97935542fdb630ad5da87", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "signatureAfterChange": "     private static boolean isSingleLineStatement(DetailAST statement)", "diff": ["-        final int type = statement.getType();", "-        if (type == TokenTypes.LITERAL_IF) {", "-            result = isSingleLineIf(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_FOR) {", "-            result = isSingleLineFor(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_DO) {", "-            result = isSingleLineDoWhile(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_WHILE) {", "-            result = isSingleLineWhile(statement);", "-        }", "-        else if (type == TokenTypes.LAMBDA) {", "-            result = isSingleLineLambda(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_CASE) {", "-            result = isSingleLineCase(statement);", "-        }", "-        else if (type == TokenTypes.LITERAL_DEFAULT) {", "-            result = isSingleLineDefault(statement);", "-        }", "-        else {", "-            result = isSingleLineElse(statement);", "+        switch (statement.getType()) {", "+            case TokenTypes.LITERAL_IF:", "+                result = isSingleLineIf(statement);", "+                break;", "+            case TokenTypes.LITERAL_FOR:", "+                result = isSingleLineFor(statement);", "+                break;", "+            case TokenTypes.LITERAL_DO:", "+                result = isSingleLineDoWhile(statement);", "+                break;", "+            case TokenTypes.LITERAL_WHILE:", "+                result = isSingleLineWhile(statement);", "+                break;", "+            case TokenTypes.LAMBDA:", "+                result = isSingleLineLambda(statement);", "+                break;", "+            case TokenTypes.LITERAL_CASE:", "+                result = isSingleLineCase(statement);", "+                break;", "+            case TokenTypes.LITERAL_DEFAULT:", "+                result = isSingleLineDefault(statement);", "+                break;", "+            default:", "+                result = isSingleLineElse(statement);", "+                break;"]}]}
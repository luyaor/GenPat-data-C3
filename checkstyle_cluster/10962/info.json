{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9736141164df09d9203ae25677e29df8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1243428c80ca046aecfccb61a03aef13", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava2.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "        @Override       boolean isPartialView()", "signatureAfterChange": "    boolean isPartialView()", "diff": ["-      @Override", "-      boolean isPartialView() {", "-        return true;", "-      }", "+", "+  boolean isPartialView() {", "+    return true;", "+  }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b2b4f7d763e0807b578876b089709a8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava2.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 14, "signatureBeforeChange": "       @Override       public int size()", "signatureAfterChange": "     public static int binarySearch()", "diff": ["-    ImmutableList<Range<K>> subRanges = new ImmutableList<Range<K>>() {", "-      @Override", "-      public int size() {", "-        return len;", "-      }", "+  private static class SortedLists {", "+    public static int binarySearch() { return 4; }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e32a0f5174ba90778361cb6ae4abc05", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava2.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 12, "signatureBeforeChange": "           @Override           public ImmutableRangeMap<K, V> subRangeMap(Range<K> subRange)", "signatureAfterChange": "    @Override   public RangeMap<K, V> subRangeMap(Range<K> range)", "diff": ["-        subRanges, values.subList(lowerIndex, upperIndex)) {", "-          @Override", "-          public ImmutableRangeMap<K, V> subRangeMap(Range<K> subRange) {", "-            if (range.isConnected(subRange)) {", "-              return outer.subRangeMap(subRange.intersection(range));", "-            } else {", "-              return ImmutableRangeMap.of();", "-            }", "-          }", "+", "+  @Override", "+  public RangeMap<K, V> subRangeMap(Range<K> range)", "+  {", "+    return null;", "+  }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37ef40bb8d0e15522ef6eb17dfdb3af4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ec1dbbd83d0759917ab96f01c3fced2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java", "commitBeforeChange": "a09875b9f9ff2d59416331a989b09335ee57c89c", "commitAfterChange": "ef1e65fb5128452cd8a19f82d09455b06a021b65", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public static boolean isGetterMethod(final DetailAST ast)", "signatureAfterChange": "     public static boolean isGetterMethod(final DetailAST ast)", "diff": ["+        boolean getterMethod = false;", "+", "-        if (ast.getType() != TokenTypes.METHOD_DEF", "-                || ast.getChildCount() != SETTER_GETTER_MAX_CHILDREN) {", "-            return false;", "+        if (ast.getType() == TokenTypes.METHOD_DEF", "+                && ast.getChildCount() == SETTER_GETTER_MAX_CHILDREN) {", "+", "+            final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "+            final String name = type.getNextSibling().getText();", "+            final boolean matchesGetterFormat = GETTER_PATTERN.matcher(name).matches();", "+            final boolean noVoidReturnType = type.getChildCount(TokenTypes.LITERAL_VOID) == 0;", "+", "+            final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "+            final boolean noParams = params.getChildCount(TokenTypes.PARAMETER_DEF) == 0;", "+", "+            if (matchesGetterFormat && noVoidReturnType && noParams) {", "+                // Now verify that the body consists of:", "+                // SLIST -> RETURN", "+                // RCURLY", "+                final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);", "+", "+                if (slist != null && slist.getChildCount() == GETTER_BODY_SIZE) {", "+                    final DetailAST expr = slist.getFirstChild();", "+                    getterMethod = expr.getType() == TokenTypes.LITERAL_RETURN;", "+                }", "+            }", "-", "-        // Check the name matches format of getX or isX. Technically I should", "-        // check that the format isX is only used with a boolean type.", "-        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "-        final String name = type.getNextSibling().getText();", "-", "-        // Depends on JDK 1.4", "-        if (!GETTER_PATTERN.matcher(name).matches()) {", "-            return false;", "-        }", "-", "-        // Check the return type is void", "-        if (type.getChildCount(TokenTypes.LITERAL_VOID) > 0) {", "-            return false;", "-        }", "-", "-        // Check that is had only one parameter", "-        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        if (params.getChildCount(TokenTypes.PARAMETER_DEF) > 0) {", "-            return false;", "-        }", "-", "-        // Now verify that the body consists of:", "-        // SLIST -> RETURN", "-        // RCURLY", "-        final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);", "-        if (slist == null || slist.getChildCount() != GETTER_BODY_SIZE) {", "-            return false;", "-        }", "-", "-        final DetailAST expr = slist.getFirstChild();", "-        return expr.getType() == TokenTypes.LITERAL_RETURN;", "-", "+        return getterMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd8ce1be566eec20dcd5096b618cc9b9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java", "commitBeforeChange": "a09875b9f9ff2d59416331a989b09335ee57c89c", "commitAfterChange": "ef1e65fb5128452cd8a19f82d09455b06a021b65", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public static boolean isSetterMethod(final DetailAST ast)", "signatureAfterChange": "     public static boolean isSetterMethod(final DetailAST ast)", "diff": ["+        boolean setterMethod = false;", "+", "-        if (ast.getType() != TokenTypes.METHOD_DEF", "-                || ast.getChildCount() != SETTER_GETTER_MAX_CHILDREN) {", "-            return false;", "+        if (ast.getType() == TokenTypes.METHOD_DEF", "+                && ast.getChildCount() == SETTER_GETTER_MAX_CHILDREN) {", "+", "+            final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "+            final String name = type.getNextSibling().getText();", "+            final boolean matchesSetterFormat = SETTER_PATTERN.matcher(name).matches();", "+            final boolean voidReturnType = type.getChildCount(TokenTypes.LITERAL_VOID) > 0;", "+", "+            final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "+            final boolean singleParam = params.getChildCount(TokenTypes.PARAMETER_DEF) == 1;", "+", "+            if (matchesSetterFormat && voidReturnType && singleParam) {", "+                // Now verify that the body consists of:", "+                // SLIST -> EXPR -> ASSIGN", "+                // SEMI", "+                // RCURLY", "+                final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);", "+", "+                if (slist != null && slist.getChildCount() == SETTER_BODY_SIZE) {", "+                    final DetailAST expr = slist.getFirstChild();", "+                    setterMethod = expr.getFirstChild().getType() == TokenTypes.ASSIGN;", "+                }", "+            }", "-", "-        // Should I handle only being in a class????", "-", "-        // Check the name matches format setX...", "-        final DetailAST type = ast.findFirstToken(TokenTypes.TYPE);", "-        final String name = type.getNextSibling().getText();", "-", "-        // Depends on JDK 1.4", "-        if (!SETTER_PATTERN.matcher(name).matches()) {", "-            return false;", "-        }", "-", "-        // Check the return type is void", "-        if (type.getChildCount(TokenTypes.LITERAL_VOID) == 0) {", "-            return false;", "-        }", "-", "-        // Check that is had only one parameter", "-        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        if (params.getChildCount(TokenTypes.PARAMETER_DEF) != 1) {", "-            return false;", "-        }", "-", "-        // Now verify that the body consists of:", "-        // SLIST -> EXPR -> ASSIGN", "-        // SEMI", "-        // RCURLY", "-        final DetailAST slist = ast.findFirstToken(TokenTypes.SLIST);", "-        if (slist == null || slist.getChildCount() != SETTER_BODY_SIZE) {", "-            return false;", "-        }", "-", "-        final DetailAST expr = slist.getFirstChild();", "-        return expr.getFirstChild().getType() == TokenTypes.ASSIGN;", "+        return setterMethod;"]}]}
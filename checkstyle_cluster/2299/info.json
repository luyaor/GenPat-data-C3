{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "79d25d8e9c359d52a4de3dfcab053fcb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fe9a21c0962377f147405889135d02b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String aClassName)", "signatureAfterChange": "     private String getIllegalInstantiation(String aClassName)", "diff": ["-        final Iterator illIter = mIllegalClasses.iterator();", "-        while (illIter.hasNext()) {", "-            final String illegal = (String) illIter.next();", "+        for (String illegal : mIllegalClasses) {", "-            final Iterator importIter = mImports.iterator();", "-            while (importIter.hasNext()) {", "-                final FullIdent importLineText = (FullIdent) importIter.next();", "+            for (FullIdent importLineText : mImports) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "329aef5749005d48c78127141355e679", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public boolean hasIntersectionWithComment(int aStartLineNo,             int aStartColNo, int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public boolean hasIntersectionWithComment(int aStartLineNo,             int aStartColNo, int aEndLineNo, int aEndColNo)", "diff": ["-", "-        final Iterator<List<TextBlock>> it = values.iterator();", "-        while (it.hasNext()) {", "-            final List<TextBlock> row = it.next();", "-            final Iterator<TextBlock> rowIterator = row.iterator();", "-            while (rowIterator.hasNext()) {", "-                final TextBlock comment = rowIterator.next();", "+        for (List<TextBlock> row : values) {", "+            for (TextBlock comment : row) {"]}]}
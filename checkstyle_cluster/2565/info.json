{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68c82a7d89b24cf17974553fb08c8989", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40c0e6f6b0c0b786c63969260794f97e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "f8ba0d727928aaa1275758fa09114155faab0b9e", "commitAfterChange": "af52963008a800390e8b356db5811886572f37a3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean isSuperCall(DetailAST ast)", "signatureAfterChange": "     private boolean isSuperCall(DetailAST literalSuperAst)", "diff": ["-    private boolean isSuperCall(DetailAST ast) {", "-        if (ast.getType() != TokenTypes.LITERAL_SUPER) {", "+    private boolean isSuperCall(DetailAST literalSuperAst) {", "+        if (literalSuperAst.getType() != TokenTypes.LITERAL_SUPER) {", "-        DetailAST parent = ast.getParent();", "-        if (parent == null || parent.getType() != TokenTypes.DOT) {", "-            return false;", "-        }", "-", "-        if (isSameNameMethod(ast)) {", "-            return false;", "-        }", "-        if (isZeroParameters(parent)) {", "+        DetailAST dotAst = literalSuperAst.getParent();", "+        if (dotAst.getType() != TokenTypes.DOT", "+            || isSameNameMethod(literalSuperAst)", "+            || hasArguments(dotAst)) {", "-        while (parent != null) {", "-            if (parent.getType() == TokenTypes.METHOD_DEF) {", "-                return isOverridingMethod(parent);", "+        while (dotAst != null) {", "+            if (dotAst.getType() == TokenTypes.METHOD_DEF) {", "+                return isOverridingMethod(dotAst);", "-            else if (parent.getType() == TokenTypes.CTOR_DEF", "-                || parent.getType() == TokenTypes.INSTANCE_INIT) {", "+            else if (dotAst.getType() == TokenTypes.CTOR_DEF", "+                || dotAst.getType() == TokenTypes.INSTANCE_INIT) {", "-            parent = parent.getParent();", "+            dotAst = dotAst.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57734a9c7bf52894a562b24df9ac5c23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "176301250bfd2063f405fed4a960064e0a3e0230", "commitAfterChange": "61afa5374e2df61b421357868481edcc4e94845f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private static boolean containsAllSafeTokens(final DetailAST expr)", "signatureAfterChange": "     private boolean containsAllSafeTokens(final DetailAST expr)", "diff": ["-    private static boolean containsAllSafeTokens(final DetailAST expr) {", "+    private boolean containsAllSafeTokens(final DetailAST expr) {", "-        if (arg.branchContains(TokenTypes.METHOD_CALL)) {", "-            return false;", "-        }", "-        //Plus assignment can have ill affects", "-        //do not want to recommend moving expression", "-        //See example:", "-        //String s = \"SweetString\";", "-        //s.equals(s += \"SweetString\"); //false", "-        //s = \"SweetString\";", "-        //(s += \"SweetString\").equals(s); //true", "+        boolean argIsNotNull = false;", "+        if (arg.getType() == TokenTypes.PLUS) {", "+            DetailAST child = arg.getFirstChild();", "+            while (child != null", "+                    && !argIsNotNull) {", "+                argIsNotNull = child.getType() == TokenTypes.STRING_LITERAL", "+                        || child.getType() == TokenTypes.IDENT;", "+                child = child.getNextSibling();", "+            }", "+        }", "-        return !arg.branchContains(TokenTypes.PLUS_ASSIGN)", "-                && !arg.branchContains(TokenTypes.IDENT)", "-                && !arg.branchContains(TokenTypes.LITERAL_NULL);", "+        return argIsNotNull", "+                || !arg.branchContains(TokenTypes.IDENT)", "+                    && !arg.branchContains(TokenTypes.LITERAL_NULL);"]}]}
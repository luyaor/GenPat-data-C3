{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4bedb10ff1c7171142120796f2330771", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60fbe6b88f0c106b2e80148b573955a2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java", "commitBeforeChange": "e3e0c92185f2517de79f58f25be166e636fbd1f2", "commitAfterChange": "47cfb3621da4ea9f9692c79ae284f7433a2e9bda", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testRegexpHeader() throws Exception", "signatureAfterChange": "      @Test     public void testNotMatch() throws Exception", "diff": ["-    @Test", "-    public void testRegexpHeader() throws Exception {", "-        final DefaultConfiguration checkConfig =", "-            createCheckConfig(RegexpHeaderCheck.class);", "-        checkConfig.addAttribute(\"headerFile\", getPath(\"regexp.header\"));", "-        final String[] expected = {", "-            \"3: \" + getCheckMessage(MSG_MISMATCH, \"// Created: 2002\"),", "-        };", "-        verify(checkConfig, getPath(\"InputScopeAnonInner.java\"), expected);", "-    }", "+", "+    @Test", "+    public void testNotMatch() throws Exception {", "+        final DefaultConfiguration checkConfig =", "+                createCheckConfig(HeaderCheck.class);", "+        checkConfig.addAttribute(\"headerFile\", getPath(\"configs/java.header\"));", "+        checkConfig.addAttribute(\"ignoreLines\", \"\");", "+        final String[] expected = {", "+            \"2: \" + getCheckMessage(MSG_MISMATCH,", "+                    \"// checkstyle: Checks Java source code for adherence to a set of rules.\"),", "+        };", "+        verify(checkConfig, getPath(\"configs/java2.header\"), expected);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f87076ff624fe8b11f6c77d656224b0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java", "commitBeforeChange": "e3e0c92185f2517de79f58f25be166e636fbd1f2", "commitAfterChange": "47cfb3621da4ea9f9692c79ae284f7433a2e9bda", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testRegexpHeaderSmallHeader() throws Exception", "signatureAfterChange": "      @Test     public void testIgnore() throws Exception", "diff": ["-", "-    @Test", "-    public void testRegexpHeaderSmallHeader() throws Exception {", "-        final DefaultConfiguration checkConfig =", "-            createCheckConfig(RegexpHeaderCheck.class);", "-        checkConfig.addAttribute(\"headerFile\", getPath(\"regexp.header2\"));", "-        checkConfig.addAttribute(\"multiLines\", \"3, 6\");", "-        final String[] expected = {", "-        };", "-        verify(checkConfig, getPath(\"InputRegexpSmallHeader.java\"), expected);", "-    }", "+", "+    @Test", "+    public void testIgnore() throws Exception {", "+        final DefaultConfiguration checkConfig =", "+                createCheckConfig(HeaderCheck.class);", "+        checkConfig.addAttribute(\"headerFile\", getPath(\"configs/java.header\"));", "+        checkConfig.addAttribute(\"ignoreLines\", \"2\");", "+        final String[] expected = {", "+        };", "+        verify(checkConfig, getPath(\"configs/java2.header\"), expected);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91768dd5eb3b2a6fc269c35648f35bcf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheckTest.java", "commitBeforeChange": "c5dfb268770999ece0efcab2f47f007dec339264", "commitAfterChange": "5f0f6d3929dc2c7f1570c03f24a652bffe61db6f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testIgnoreCaseFalse()             throws Exception", "signatureAfterChange": "      public void testIgnoreCaseFalse()             throws Exception", "diff": ["-        final DefaultConfiguration checkConfigTrue =", "-            createCheckConfig(GenericIllegalRegexpCheck.class);", "-        checkConfigTrue.addAttribute(\"format\", illegal);", "-        checkConfigTrue.addAttribute(\"ignoreCase\", \"true\");", "-        final String[] expectedTrue = {", "-            \"69: Line matches the illegal pattern '\" + illegal + \"'.\"};", "-        verify(checkConfigTrue, getPath(\"InputSemantic.java\"), expectedTrue);", "-", "-        final DefaultConfiguration checkConfigFalse =", "-            createCheckConfig(GenericIllegalRegexpCheck.class);", "-        checkConfigFalse.addAttribute(\"format\", illegal);", "-        checkConfigFalse.addAttribute(\"ignoreCase\", \"false\");", "-        final String[] expectedFalse = {};", "-        verify(checkConfigFalse, getPath(\"InputSemantic.java\"), expectedFalse);", "+        mCheckConfig.addAttribute(\"format\", illegal);", "+        mCheckConfig.addAttribute(\"ignoreCase\", \"false\");", "+        final String[] expected = {};", "+        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);"]}]}
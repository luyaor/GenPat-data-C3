{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6860aa70108e18b05e3ccb58da7f798", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2152152914e7ccbf61f4c364d517c55c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/AbstractParenPadCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     protected void processLeft(DetailAST aAST)", "signatureAfterChange": "     protected void processLeft(DetailAST ast)", "diff": ["-    protected void processLeft(DetailAST aAST)", "+    protected void processLeft(DetailAST ast)", "-        final String line = getLines()[aAST.getLineNo() - 1];", "-        final int after = aAST.getColumnNo() + 1;", "+        final String line = getLines()[ast.getLineNo() - 1];", "+        final int after = ast.getColumnNo() + 1;", "-                log(aAST.getLineNo(), after, \"ws.followed\", \"(\");", "+                log(ast.getLineNo(), after, \"ws.followed\", \"(\");", "-                log(aAST.getLineNo(), after, \"ws.notFollowed\", \"(\");", "+                log(ast.getLineNo(), after, \"ws.notFollowed\", \"(\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24261f68e1e28d27de3a02ff8dec3609", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/StringLiteralEqualityCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final AST firstChild = aAST.getFirstChild();", "+        final AST firstChild = ast.getFirstChild();", "-            log(aAST.getLineNo(), aAST.getColumnNo(),", "-                    \"string.literal.equality\", aAST.getText());", "+            log(ast.getLineNo(), ast.getColumnNo(),", "+                    \"string.literal.equality\", ast.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2db5a18ca88523bb11c0d7039ab3aa01", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        DetailAST nextNode = aAST.getNextSibling();", "+        DetailAST nextNode = ast.getNextSibling();", "-            final DetailAST firstNode = CheckUtils.getFirstNode(aAST);", "+            final DetailAST firstNode = CheckUtils.getFirstNode(ast);", "-                if (aAST.getParent().getType() != TokenTypes.FOR_INIT) {", "+                if (ast.getParent().getType() != TokenTypes.FOR_INIT) {", "-            final DetailAST lastNode = getLastNode(aAST);", "+            final DetailAST lastNode = getLastNode(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3620ed2550096265d8222fa676414db8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isInAnnotation(DetailAST aAST)", "signatureAfterChange": "     private boolean isInAnnotation(DetailAST ast)", "diff": ["-    private boolean isInAnnotation(DetailAST aAST)", "+    private boolean isInAnnotation(DetailAST ast)", "-        if ((null == aAST.getParent())", "-                || (null == aAST.getParent().getParent()))", "+        if ((null == ast.getParent())", "+                || (null == ast.getParent().getParent()))", "-        return (TokenTypes.ANNOTATION == aAST.getParent().getParent().getType())", "+        return (TokenTypes.ANNOTATION == ast.getParent().getParent().getType())", "-                        == aAST.getParent().getParent().getType());", "+                        == ast.getParent().getParent().getType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c5b7df3a35c1d8d18f88e14a34de96c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Override     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(final DetailAST ast)", "diff": ["-    public void visitToken(final DetailAST aAST)", "+    public void visitToken(final DetailAST ast)", "-            this.getFileContents().getJavadocBefore(aAST.getLineNo());", "+            this.getFileContents().getJavadocBefore(ast.getLineNo());", "-            AnnotationUtility.containsAnnotation(aAST, DEPRECATED)", "-            || AnnotationUtility.containsAnnotation(aAST, FQ_DEPRECATED);", "+            AnnotationUtility.containsAnnotation(ast, DEPRECATED)", "+            || AnnotationUtility.containsAnnotation(ast, FQ_DEPRECATED);", "-            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_MISSING_DEPRECATED);", "+            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_DEPRECATED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "403eb4209b76ded173a72b6ec83ee966", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getLineNo() != aAST.getLastChild().getLineNo()) {", "-            log(aAST.getLineNo(), \"no.line.wrap\", aAST.getText());", "+        if (ast.getLineNo() != ast.getLastChild().getLineNo()) {", "+            log(ast.getLineNo(), \"no.line.wrap\", ast.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "406f61d53cc2f8c51c97e3d5036b5141", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST slistToken = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST slistToken = ast.findFirstToken(TokenTypes.SLIST);", "-                ? slistToken : aAST.findFirstToken(TokenTypes.LCURLY);", "+                ? slistToken : ast.findFirstToken(TokenTypes.LCURLY);", "-                            MSG_KEY_BLOCK_NO_STMT,", "-                        aAST.getText());", "+                        MSG_KEY_BLOCK_NO_STMT,", "+                        ast.getText());", "-                        MSG_KEY_BLOCK_EMPTY,", "-                    aAST.getText());", "+                    MSG_KEY_BLOCK_EMPTY,", "+                    ast.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4669e5dd3a59ace7056789802c58b034", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UpperEllCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getText().endsWith(\"l\")) {", "-            log(aAST.getLineNo(),", "-                aAST.getColumnNo() + aAST.getText().length() - 1,", "+        if (ast.getText().endsWith(\"l\")) {", "+            log(ast.getLineNo(),", "+                ast.getColumnNo() + ast.getText().length() - 1,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e996c92413b88dbd3d5baebbe7b3c90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean isOverridingMethod(DetailAST aAST)", "signatureAfterChange": "     private boolean isOverridingMethod(DetailAST ast)", "diff": ["-    private boolean isOverridingMethod(DetailAST aAST)", "+    private boolean isOverridingMethod(DetailAST ast)", "-        if ((aAST.getType() != TokenTypes.METHOD_DEF)", "-            || ScopeUtils.inInterfaceOrAnnotationBlock(aAST))", "+        if ((ast.getType() != TokenTypes.METHOD_DEF)", "+            || ScopeUtils.inInterfaceOrAnnotationBlock(ast))", "-        final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+        final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-        final DetailAST params = aAST.findFirstToken(TokenTypes.PARAMETERS);", "+        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "757dda6907ef12a52928efa61f009edd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean exprSurrounded(DetailAST aAST)", "signatureAfterChange": "     private boolean exprSurrounded(DetailAST ast)", "diff": ["-    private boolean exprSurrounded(DetailAST aAST)", "+    private boolean exprSurrounded(DetailAST ast)", "-        if (aAST.getType() != TokenTypes.EXPR) {", "+        if (ast.getType() != TokenTypes.EXPR) {", "-        if (aAST.getChildCount() >= MIN_CHILDREN_FOR_MATCH) {", "-            final AST n1 = aAST.getFirstChild();", "-            final AST nn = aAST.getLastChild();", "+        if (ast.getChildCount() >= MIN_CHILDREN_FOR_MATCH) {", "+            final AST n1 = ast.getFirstChild();", "+            final AST nn = ast.getLastChild();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d2d9793255343b85699c0d811198bd1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-            aAST.findFirstToken(TokenTypes.LITERAL_ELSE);", "+            ast.findFirstToken(TokenTypes.LITERAL_ELSE);", "-        final AST condition = aAST.getFirstChild().getNextSibling();", "+        final AST condition = ast.getFirstChild().getNextSibling();", "-            log(aAST.getLineNo(), aAST.getColumnNo(), \"simplify.boolreturn\");", "+            log(ast.getLineNo(), ast.getColumnNo(), \"simplify.boolreturn\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9b6bc2422a03aadb6ea6303a75a9f76", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static boolean isEqualsMethod(DetailAST aAST)", "signatureAfterChange": "     public static boolean isEqualsMethod(DetailAST ast)", "diff": ["-    public static boolean isEqualsMethod(DetailAST aAST)", "+    public static boolean isEqualsMethod(DetailAST ast)", "-        if (aAST.getType() != TokenTypes.METHOD_DEF) {", "+        if (ast.getType() != TokenTypes.METHOD_DEF) {", "-        final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        final DetailAST nameNode = aAST.findFirstToken(TokenTypes.IDENT);", "+        final DetailAST nameNode = ast.findFirstToken(TokenTypes.IDENT);", "-        final DetailAST paramsNode = aAST.findFirstToken(TokenTypes.PARAMETERS);", "+        final DetailAST paramsNode = ast.findFirstToken(TokenTypes.PARAMETERS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad83a029b066a1ef5ff8b6fc82fb9eeb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            visitMemberDef(aAST);", "+            visitMemberDef(ast);", "-            visitSlist(aAST);", "+            visitSlist(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba26b2bb3fce77244ea8c8a826224628", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/MutableExceptionCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            visitClassDef(aAST);", "+            visitClassDef(ast);", "-            visitVariableDef(aAST);", "+            visitVariableDef(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c62edb1572fefcea770ff14303b16e40", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private static String getStringExpr(DetailAST aAST)", "signatureAfterChange": "     private static String getStringExpr(DetailAST ast)", "diff": ["-    private static String getStringExpr(DetailAST aAST)", "+    private static String getStringExpr(DetailAST ast)", "-        if (aAST != null && aAST.getType() == TokenTypes.EXPR) {", "-            final DetailAST firstChild = aAST.getFirstChild();", "+        if (ast != null && ast.getType() == TokenTypes.EXPR) {", "+            final DetailAST firstChild = ast.getFirstChild();", "-        throw new IllegalArgumentException(\"Expression AST expected: \" + aAST);", "+        throw new IllegalArgumentException(\"Expression AST expected: \" + ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cce8bc20382377d826c1d3ed2d46bbc9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.TYPECAST) {", "-            targetAST = aAST.findFirstToken(TokenTypes.RPAREN);", "+        if (ast.getType() == TokenTypes.TYPECAST) {", "+            targetAST = ast.findFirstToken(TokenTypes.RPAREN);", "-            targetAST = aAST;", "-            message = new Object[]{aAST.getText()};", "+            targetAST = ast;", "+            message = new Object[]{ast.getText()};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d960d222bc3dd0f39b03fe7937ee4d29", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private static List<String> getAnnotationValues(DetailAST aAST)", "signatureAfterChange": "     private static List<String> getAnnotationValues(DetailAST ast)", "diff": ["-    private static List<String> getAnnotationValues(DetailAST aAST)", "+    private static List<String> getAnnotationValues(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            return ImmutableList.of(getStringExpr(aAST));", "+            return ImmutableList.of(getStringExpr(ast));", "-            DetailAST childAST = aAST.getFirstChild();", "+            DetailAST childAST = ast.getFirstChild();", "-            \"Expression or annotation array initializer AST expected: \" + aAST);", "+            \"Expression or annotation array initializer AST expected: \" + ast);"]}]}
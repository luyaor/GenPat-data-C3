{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9dc71ba6c9ece2c208ce30ef78507ef", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97bbcc1b68c25af737d192fcd11ebfc7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/UnusedImportsCheck.java", "commitBeforeChange": "11fad553fd96cc00f33e95ae0bc2d6b32a8e1c54", "commitAfterChange": "aa5dbacdcbf20a9b56e2f7ecb577bb47778b0c54", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void finishTree()", "signatureAfterChange": "     public void finishTree()", "diff": ["-            final String imp = (String) it.next();", "-            if (!mReferenced.contains(basename(imp))) {", "-                log(666, \"unused import \" + imp);", "+            final FullIdent imp = (FullIdent) it.next();", "+", "+            if (!mReferenced.contains(basename(imp.getText()))) {", "+                log(imp.getLineNo(),", "+                    imp.getColumnNo(),", "+                    \"import.unused\", imp.getText());", "+//            else if (isIllegalImport(imp.getText())) {", "+//                mMessages.add(imp.getLineNo(), \"import.illegal\", imp.getText());", "+//            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7a29221451aaed8ca7d8f6c82dc80ab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "e6860c68f6901dc27c280667fa4c515b0ada17bb", "commitAfterChange": "6db0b3effd48f02d741b2202338d710b1b254910", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void process(File aFile)", "signatureAfterChange": "     private void process(File aFile)", "diff": ["-            getMessageCollector().add(new LocalizedMessage(", "-                0, Defn.CHECKSTYLE_BUNDLE,", "-                \"general.fileNotFound\", null));", "+            getMessageCollector().add(", "+                new LocalizedMessage(", "+                    0,", "+                    Defn.CHECKSTYLE_BUNDLE,", "+                    \"general.fileNotFound\",", "+                    null,", "+                    this.getClass()));", "-            getMessageCollector().add(new LocalizedMessage(", "-                0, Defn.CHECKSTYLE_BUNDLE,", "-                \"general.exception\",", "-                new String[] {ioe.getMessage()}));", "+            getMessageCollector().add(", "+                new LocalizedMessage(", "+                    0,", "+                    Defn.CHECKSTYLE_BUNDLE,", "+                    \"general.exception\",", "+                    new String[] {ioe.getMessage()},", "+                    this.getClass()));", "-            getMessageCollector().add(new LocalizedMessage(", "-                0, Defn.CHECKSTYLE_BUNDLE,", "-                \"general.exception\",", "-                new String[] {re.getMessage()}));", "+            getMessageCollector().add(", "+                new LocalizedMessage(", "+                    0,", "+                    Defn.CHECKSTYLE_BUNDLE,", "+                    \"general.exception\",", "+                    new String[] {re.getMessage()},", "+                    this.getClass()));", "-            getMessageCollector().add(new LocalizedMessage(", "-                0, Defn.CHECKSTYLE_BUNDLE,", "-                \"general.exception\",", "-                new String[] {te.getMessage()}));", "+            getMessageCollector().add(", "+                new LocalizedMessage(", "+                    0,", "+                    Defn.CHECKSTYLE_BUNDLE,", "+                    \"general.exception\",", "+                    new String[] {te.getMessage()},", "+                    this.getClass()));", "-            getMessageCollector().add(new LocalizedMessage(", "-                0, Defn.CHECKSTYLE_BUNDLE,", "-                \"general.exception\",", "-                new String[] {\"\" + err}));", "+            getMessageCollector().add(", "+                new LocalizedMessage(", "+                    0,", "+                    Defn.CHECKSTYLE_BUNDLE,", "+                    \"general.exception\",", "+                    new String[] {\"\" + err},", "+                    this.getClass()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca2fa9374c710162bc6165f4dd005c4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "4d0adc9deed7f3df296f8016941414ec1600955b", "commitAfterChange": "1edf43ab329e96db26a3ed3a4f4a1abdaa4b1a3a", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "     private void checkLCurly(int aStartLine,                              MyCommonAST aBrace,                              LeftCurlyOption aOption)", "signatureAfterChange": "     private void checkLCurly(int aStartLine,                              MyCommonAST aBrace,                              LeftCurlyOption aOption)", "diff": ["-                log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "+                log(aBrace.getLineNo(),", "+                    aBrace.getColumnNo(),", "+                    \"'{' should be on a new line.\");", "-                log(aBrace.getLineNo(), \"'{' should be on the previous line.\");", "+                log(aBrace.getLineNo(),", "+                    aBrace.getColumnNo(),", "+                    \"'{' should be on the previous line.\");", "-                    log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "+                    log(aBrace.getLineNo(),", "+                        aBrace.getColumnNo(),", "+                        \"'{' should be on a new line.\");", "+                        aBrace.getColumnNo(),", "-                log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "+                log(aBrace.getLineNo(),", "+                    aBrace.getColumnNo(),", "+                    \"'{' should be on a new line.\");"]}]}
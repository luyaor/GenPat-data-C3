{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9df14abfd35561779f53669d96064544", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "035f3fd186cf4b9e76748200be5e0968", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Test     public void testIgnoreCommentsInlineEnd() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCommentsInlineEnd() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07ea32648f33100e50713d57758061d6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testNPE() throws Exception", "signatureAfterChange": "      @Test     public void testNPE() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"option\", RightCurlyOption.ALONE.toString());", "-        mCheckConfig.addAttribute(\"tokens\", \"CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT\");", "+        checkConfig.addAttribute(\"option\", RightCurlyOption.ALONE.toString());", "+        checkConfig.addAttribute(\"tokens\", \"CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT\");", "-        verify(mCheckConfig, getPath(\"InputRightCurlyEmptyAbstractMethod.java\"), expected);", "+        verify(checkConfig, getPath(\"InputRightCurlyEmptyAbstractMethod.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0942246cc80b796a7c018e775b4eaa27", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testEmptyTag() throws Exception", "signatureAfterChange": "      @Test     public void testEmptyTag() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"tag\", \"@emptytag\");", "-        mCheckConfig.addAttribute(\"tagFormat\", \"\");", "+        checkConfig.addAttribute(\"tag\", \"@emptytag\");", "+        checkConfig.addAttribute(\"tagFormat\", \"\");", "-        verify(mCheckConfig, getPath(\"InputWriteTag.java\"), expected);", "+        verify(checkConfig, getPath(\"InputWriteTag.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fe9a91fc8ce309a28c33b305bd9b1b5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "      @Test     public void test_generics_1() throws Exception", "signatureAfterChange": "      @Test     public void test_generics_1() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");", "-        mCheckConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");", "+        checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");", "+        checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");", "-        verify(mCheckConfig, getPath(\"javadoc/TestGenerics.java\"), expected);", "+        verify(checkConfig, getPath(\"javadoc/TestGenerics.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1369a743cafe5c622ba0bb81791a5795", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testNewLine() throws Exception", "signatureAfterChange": "      @Test     public void testNewLine() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"option\", RightCurlyOption.ALONE.toString());", "-        mCheckConfig.addAttribute(\"tokens\", \"CLASS_DEF, METHOD_DEF, CTOR_DEF\");", "+        checkConfig.addAttribute(\"option\", RightCurlyOption.ALONE.toString());", "+        checkConfig.addAttribute(\"tokens\", \"CLASS_DEF, METHOD_DEF, CTOR_DEF\");", "-        verify(mCheckConfig, getPath(\"InputLeftCurlyOther.java\"), expected);", "+        verify(checkConfig, getPath(\"InputLeftCurlyOther.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18fbd0fa0409a61c7795a7897af61094", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testIgnoreCommentsCppStyle() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCommentsCppStyle() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d55040c24bf02845ac9ed6cd457814c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testIgnoreCaseTrue() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCaseTrue() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreCase\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreCase\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a60f22b7429229a72fdc0dc6ad3fc32", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void testLineBreakAfter() throws Exception", "signatureAfterChange": "      @Test     public void testLineBreakAfter() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"option\", LeftCurlyOption.EOL.toString());", "-        mCheckConfig.addAttribute(\"maxLineLength\", \"100\");", "+        checkConfig.addAttribute(\"option\", LeftCurlyOption.EOL.toString());", "+        checkConfig.addAttribute(\"maxLineLength\", \"100\");", "-        verify(mCheckConfig, getPath(\"InputLeftCurlyLineBreakAfter.java\"), expected);", "+        verify(checkConfig, getPath(\"InputLeftCurlyLineBreakAfter.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "323f3fd1a0a872294b84571e365f3217", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void testRegularEx()         throws Exception", "signatureAfterChange": "      @Test     public void testRegularEx()         throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"tag\", \"@author\");", "-        mCheckConfig.addAttribute(\"tagFormat\", \"0*\");", "+        checkConfig.addAttribute(\"tag\", \"@author\");", "+        checkConfig.addAttribute(\"tagFormat\", \"0*\");", "-        verify(mCheckConfig, getPath(\"InputWriteTag.java\"), expected);", "+        verify(checkConfig, getPath(\"InputWriteTag.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f0b8842ac3cdd05b81fd5e4667e8e9c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @Test     public void test1371588() throws Exception", "signatureAfterChange": "      @Test     public void test1371588() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "443eeb35635ee851cd7804bb2aa88cfe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testIgnoreCommentsFalseCStyle() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCommentsFalseCStyle() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"false\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"false\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cb3fdc8b4762cee0620050621e43d19", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testIgnoreCaseFalse() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCaseFalse() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreCase\", \"false\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreCase\", \"false\");", "-        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cc6963eb4f189c34f58b56968e1b035", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void testIgnoreCommentsInlineStart() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCommentsInlineStart() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cf8705d6fcf4ab91dc7e103e35cf62f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testDoubleTag() throws Exception", "signatureAfterChange": "      @Test     public void testDoubleTag() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"tag\", \"@doubletag\");", "-        mCheckConfig.addAttribute(\"tagFormat\", \"\\\\S\");", "+        checkConfig.addAttribute(\"tag\", \"@doubletag\");", "+        checkConfig.addAttribute(\"tagFormat\", \"\\\\S\");", "-        verify(mCheckConfig, getPath(\"InputWriteTag.java\"), expected);", "+        verify(checkConfig, getPath(\"InputWriteTag.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ac17b87f5a45ccd70e53a2472a670e9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testMessageProperty()         throws Exception", "signatureAfterChange": "      @Test     public void testMessageProperty()         throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"message\", message);", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"message\", message);", "-        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75e99d8711da5c4d2b9ebc4c92064f4f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testForceLineBreakBefore() throws Exception", "signatureAfterChange": "      @Test     public void testForceLineBreakBefore() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"option\", RightCurlyOption.ALONE.toString());", "-        mCheckConfig.addAttribute(\"tokens\", \"LITERAL_FOR,\"", "+        checkConfig.addAttribute(\"option\", RightCurlyOption.ALONE.toString());", "+        checkConfig.addAttribute(\"tokens\", \"LITERAL_FOR,\"", "-        verify(mCheckConfig, getPath(\"InputRightCurlyLineBreakBefore.java\"), expected);", "+        verify(checkConfig, getPath(\"InputRightCurlyLineBreakBefore.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a14342b5d8ac9d1dc0eb57c1c9d2fa1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Test     public void testRegularExError()         throws Exception", "signatureAfterChange": "      @Test     public void testRegularExError()         throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"tag\", \"@author\");", "-        mCheckConfig.addAttribute(\"tagFormat\", \"ABC\");", "+        checkConfig.addAttribute(\"tag\", \"@author\");", "+        checkConfig.addAttribute(\"tagFormat\", \"ABC\");", "-        verify(mCheckConfig, getPath(\"InputWriteTag.java\"), expected);", "+        verify(checkConfig, getPath(\"InputWriteTag.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "802c2d1b105b80169462e4c4e9ba15e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      @Test     public void test_1168408_3() throws Exception", "signatureAfterChange": "      @Test     public void test_1168408_3() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");", "-        mCheckConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");", "+        checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");", "+        checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");", "-        verify(mCheckConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);", "+        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_03.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "931fe4c8f7ac2d0892881450b3057e66", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void testIgnoreCommentsMultiLine() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCommentsMultiLine() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bfb7565f32ad0292c3106202aace829", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "      @Test     public void test_1379666() throws Exception", "signatureAfterChange": "      @Test     public void test_1379666() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");", "-        mCheckConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");", "+        checkConfig.addAttribute(\"allowThrowsTagsForSubclasses\", \"true\");", "+        checkConfig.addAttribute(\"allowUndeclaredRTE\", \"true\");", "-        verify(mCheckConfig, getSrcPath(\"checks/javadoc/Input_1379666.java\"), expected);", "+        verify(checkConfig, getSrcPath(\"checks/javadoc/Input_1379666.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c7f101af38b4ca40e43873d612f2884", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Test     public void testIgnoreCommentsNoSpaces() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCommentsNoSpaces() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b197dffcd443d47f8c15937c34724e1e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testMessageProperty()         throws Exception", "signatureAfterChange": "      @Test     public void testMessageProperty()         throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"message\", message);", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"message\", message);", "-        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b30d68bc24d18cd4ad792a42bff52806", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testIgnoreCaseTrue() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCaseTrue() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreCase\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreCase\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc1e914e1298a8bb7d13881991704121", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testMethodCtorNamedClassClosingBrace() throws Exception", "signatureAfterChange": "      @Test     public void testMethodCtorNamedClassClosingBrace() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"option\", RightCurlyOption.ALONE.toString());", "-        mCheckConfig.addAttribute(\"shouldStartLine\", \"false\");", "+        checkConfig.addAttribute(\"option\", RightCurlyOption.ALONE.toString());", "+        checkConfig.addAttribute(\"shouldStartLine\", \"false\");", "-        verify(mCheckConfig, getPath(\"InputLeftCurlyOther.java\"), expected);", "+        verify(checkConfig, getPath(\"InputLeftCurlyOther.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be40466e70c975815147f1b0b8d12f66", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testTag() throws Exception", "signatureAfterChange": "      @Test     public void testTag() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"tag\", \"@author\");", "-        mCheckConfig.addAttribute(\"tagFormat\", \"\\\\S\");", "+        checkConfig.addAttribute(\"tag\", \"@author\");", "+        checkConfig.addAttribute(\"tagFormat\", \"\\\\S\");", "-        verify(mCheckConfig, getPath(\"InputWriteTag.java\"), expected);", "+        verify(checkConfig, getPath(\"InputWriteTag.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6c8d2de0c0754ed8100944cd6dc64e8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      @Test     public void testIgnoreCommentsInlineMiddle() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCommentsInlineMiddle() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb00bf97acd9d7f6f79beaccf7edb707", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testMessageProperty()         throws Exception", "signatureAfterChange": "      @Test     public void testMessageProperty()         throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"message\", message);", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"message\", message);", "-        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5993747106c3112e039cfc51493fba9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testStaticImports() throws Exception", "signatureAfterChange": "      @Test     public void testStaticImports() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"illegalClassNames\", \"SomeStaticClass\");", "-        mCheckConfig.addAttribute(\"ignoredMethodNames\", \"foo1\");", "+        checkConfig.addAttribute(\"illegalClassNames\", \"SomeStaticClass\");", "+        checkConfig.addAttribute(\"ignoredMethodNames\", \"foo1\");", "-        verify(mCheckConfig, getPath(\"coding\" + File.separator", "+        verify(checkConfig, getPath(\"coding\" + File.separator"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dabd896378b9cac757670360cf14852e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testIgnoreCaseTrue() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCaseTrue() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreCase\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreCase\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db3c2d511ee50d8eab0dfcbcf99a5648", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testIgnoreCaseFalse() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCaseFalse() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreCase\", \"false\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreCase\", \"false\");", "-        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0871806a6036a72350d371bb7b378c7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @Test     public void testExcludeScope() throws Exception", "signatureAfterChange": "      @Test     public void testExcludeScope() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"scope\", Scope.PRIVATE.getName());", "-        mCheckConfig.addAttribute(\"excludeScope\", Scope.PROTECTED.getName());", "+        checkConfig.addAttribute(\"scope\", Scope.PRIVATE.getName());", "+        checkConfig.addAttribute(\"excludeScope\", Scope.PROTECTED.getName());", "-        verify(mCheckConfig, getPath(\"javadoc\" + File.separator", "+        verify(checkConfig, getPath(\"javadoc\" + File.separator"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e209b0fff41da7b5c406cd660b1e9254", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testIgnoreCaseFalse() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCaseFalse() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreCase\", \"false\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreCase\", \"false\");", "-        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);", "+        verify(checkConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e87b950396d36958ef72ee397ac36557", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void testIgnoreCommentsMultipleCStyle() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCommentsMultipleCStyle() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f13e4923dcd3431eb5320d5f68df27e1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testIgnoreCommentsFalseCppStyle() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCommentsFalseCppStyle() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"false\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"false\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5e352916cb7a47201057b23f0eb5244", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testShouldStartLine() throws Exception", "signatureAfterChange": "      @Test     public void testShouldStartLine() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"option\", RightCurlyOption.ALONE.toString());", "-        mCheckConfig.addAttribute(\"shouldStartLine\", \"false\");", "+        checkConfig.addAttribute(\"option\", RightCurlyOption.ALONE.toString());", "+        checkConfig.addAttribute(\"shouldStartLine\", \"false\");", "-        verify(mCheckConfig, getPath(\"InputLeftCurlyOther.java\"), expected);", "+        verify(checkConfig, getPath(\"InputLeftCurlyOther.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe4ee463a10f244a03850889272c9a0d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineJavaCheckTest.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testIgnoreCommentsCStyle() throws Exception", "signatureAfterChange": "      @Test     public void testIgnoreCommentsCStyle() throws Exception", "diff": ["-        mCheckConfig.addAttribute(\"format\", illegal);", "-        mCheckConfig.addAttribute(\"ignoreComments\", \"true\");", "+        checkConfig.addAttribute(\"format\", illegal);", "+        checkConfig.addAttribute(\"ignoreComments\", \"true\");", "-        verify(mCheckConfig, getPath(\"InputTrailingComment.java\"), expected);", "+        verify(checkConfig, getPath(\"InputTrailingComment.java\"), expected);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f16e1d981e20a56527520fc551d56c0a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d48f0eec8d0530afe887c7a2d083c9c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "5b4a81a4e1449e2baf5adca4b821c23bc87f4de2", "commitAfterChange": "b69e47845e1903966ddf39efdf49e103ff5a5248", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "signatureAfterChange": "     private void doVisitToken(FullIdent ident, boolean isStatic,             boolean previous)", "diff": ["-                if (!beforeFirstImport && separated) {", "-                    // This check should be made more robust to handle", "-                    // comments and imports that span more than one line.", "-                    if (line - lastImportLine < 2) {", "-                        log(line, MSG_SEPARATION, name);", "-                    }", "+                // This check should be made more robust to handle", "+                // comments and imports that span more than one line.", "+                if (!beforeFirstImport && separated && line - lastImportLine < 2) {", "+                    log(line, MSG_SEPARATION, name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4501cb8c4bb618ceb2b0a3e825e47e90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "5cd9806d4b7900f41eb855d197eb334abade3ac8", "commitAfterChange": "98a9266a8091c1c6b26d41b4e17e1a32458f1bac", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-                if (TokenTypes.POST_DEC        == parentType", "-                    || TokenTypes.DEC          == parentType", "-                    || TokenTypes.POST_INC     == parentType", "-                    || TokenTypes.INC          == parentType", "-                    || TokenTypes.ASSIGN       == parentType", "-                    || TokenTypes.PLUS_ASSIGN  == parentType", "-                    || TokenTypes.MINUS_ASSIGN == parentType", "-                    || TokenTypes.DIV_ASSIGN   == parentType", "-                    || TokenTypes.STAR_ASSIGN  == parentType", "-                    || TokenTypes.MOD_ASSIGN   == parentType", "-                    || TokenTypes.SR_ASSIGN    == parentType", "-                    || TokenTypes.BSR_ASSIGN   == parentType", "-                    || TokenTypes.SL_ASSIGN    == parentType", "-                    || TokenTypes.BXOR_ASSIGN  == parentType", "-                    || TokenTypes.BOR_ASSIGN   == parentType", "-                    || TokenTypes.BAND_ASSIGN  == parentType)", "+                // TODO: is there better way to check is ast", "+                // in left part of assignment?", "+                if ((TokenTypes.POST_DEC == parentType", "+                        || TokenTypes.DEC == parentType", "+                        || TokenTypes.POST_INC == parentType", "+                        || TokenTypes.INC == parentType", "+                        || TokenTypes.ASSIGN == parentType", "+                        || TokenTypes.PLUS_ASSIGN == parentType", "+                        || TokenTypes.MINUS_ASSIGN == parentType", "+                        || TokenTypes.DIV_ASSIGN == parentType", "+                        || TokenTypes.STAR_ASSIGN == parentType", "+                        || TokenTypes.MOD_ASSIGN == parentType", "+                        || TokenTypes.SR_ASSIGN == parentType", "+                        || TokenTypes.BSR_ASSIGN == parentType", "+                        || TokenTypes.SL_ASSIGN == parentType", "+                        || TokenTypes.BXOR_ASSIGN == parentType", "+                        || TokenTypes.BOR_ASSIGN == parentType", "+                        || TokenTypes.BAND_ASSIGN == parentType)", "+                        && ast.getParent().getFirstChild() == ast)", "-                    // TODO: is there better way to check is ast", "-                    // in left part of assignment?", "-                    if (ast.getParent().getFirstChild() == ast) {", "-                        removeVariable(ast);", "-                    }", "+                    removeVariable(ast);"]}]}
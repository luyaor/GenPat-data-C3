{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0a16fdb32afb83d8f0f86c2e904c76ad", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6393ea8e26d286b2980943bf7b4a7ee0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheck.java", "commitBeforeChange": "bc034f53c0b807bc1a4234a3c0313d3761ed5b62", "commitAfterChange": "f9ff86c70140266ac432fee4daaedbae6451f963", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override     public void beginProcessing(String charset)", "signatureAfterChange": "      @Override     public void beginProcessing(String charset)", "diff": ["+        final DetectorOptions options = DetectorOptions.newBuilder()", "+            .reporter(this)", "+            .compileFlags(Pattern.MULTILINE)", "+            .format(format)", "+            .message(message)", "+            .minimum(minimum)", "+            .maximum(maximum)", "+            .ignoreCase(ignoreCase)", "+            .build();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8195878fbd30eb17ef4ae4254dda460c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpSinglelineCheck.java", "commitBeforeChange": "bc034f53c0b807bc1a4234a3c0313d3761ed5b62", "commitAfterChange": "f9ff86c70140266ac432fee4daaedbae6451f963", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override     public void beginProcessing(String charset)", "signatureAfterChange": "      @Override     public void beginProcessing(String charset)", "diff": ["+        final DetectorOptions options = DetectorOptions.newBuilder()", "+            .reporter(this)", "+            .compileFlags(0)", "+            .format(format)", "+            .message(message)", "+            .minimum(minimum)", "+            .maximum(maximum)", "+            .ignoreCase(ignoreCase)", "+            .build();"]}]}
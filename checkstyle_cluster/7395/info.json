{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7bd1292965c7972dd0426b80d5d8656", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "181ec718599ba5707e76cc682e8db7a8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ModifierOrderCheck.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     DetailAST checkOrderSuggestedByJLS(List aModifiers)", "signatureAfterChange": "     DetailAST checkOrderSuggestedByJLS(List aModifiers)", "diff": ["+        //No modifiers, no problems", "+        if (!it.hasNext()) {", "+            return null;", "+        }", "+", "+        //Speed past all initial annotations", "-            if (!it.hasNext()) {", "-                return null;", "+            modifier = (DetailAST) it.next();", "+        }", "+        while (it.hasNext() && (modifier.getType() == TokenTypes.ANNOTATION));", "+", "+        //All modifiers are annotations, no problem", "+        if (modifier.getType() == TokenTypes.ANNOTATION) {", "+            return null;", "+        }", "+", "+        while (i < JLS_ORDER.length) {", "+            if (modifier.getType() == TokenTypes.ANNOTATION) {", "+                //Annotation not at start of modifiers, bad", "+                return modifier;", "-            modifier = (DetailAST) it.next();", "-        } while (i < JLS_ORDER.length);", "+", "+            if (i == JLS_ORDER.length) {", "+                //Current modifier is out of JLS order", "+                return modifier;", "+            }", "+            else if (!it.hasNext()) {", "+                //Reached end of modifiers without problem", "+                return null;", "+            }", "+            else {", "+                modifier = (DetailAST) it.next();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de1335258f5c2f0d95cf58a9d3048514", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantModifierCheck.java", "commitBeforeChange": "a9ad125a4c6e2d0edc7a7a460ba3cd249b0a0817", "commitAfterChange": "9a05522373905e39aa764009d1c543092c14f691", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                    String modifier = ast.getText();", "-                    if (\"public\".equals(modifier)", "-                        || \"abstract\".equals(modifier))", "+", "+                    // javac does not allow final in interface methods", "+                    // hence no need to check that this is not a method", "+", "+                    final int type = ast.getType();", "+                    if (type == TokenTypes.LITERAL_PUBLIC", "+                            || type == TokenTypes.ABSTRACT", "+                            || type == TokenTypes.FINAL)", "-                        log(ast.getLineNo(),", "-                            ast.getColumnNo(),", "-                            \"redundantModifier\",", "-                            new String[] {modifier});", "+                            String modifier = ast.getText();", "+                            log(ast.getLineNo(),", "+                                    ast.getColumnNo(),", "+                                    \"redundantModifier\",", "+                                    new String[] {modifier});", "+                            break;", "+"]}]}
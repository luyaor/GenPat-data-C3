{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26ce2261b9be08165117e0a9ac4816cd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36aee565e28c5ce581246cf54dffa19a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static DetailAST getArrayIdentifier(DetailAST arrayDeclarator)", "signatureAfterChange": "     private static DetailAST getIndexOpPreviousElement(DetailAST ast)", "diff": ["+     */", "+    private static DetailAST getIndexOpPreviousElement(DetailAST ast) {", "+        DetailAST result;", "+        final DetailAST firstChild = ast.getFirstChild();", "+        if (firstChild.getType() == TokenTypes.INDEX_OP) {", "+            // second or higher array index", "+            result = firstChild.findFirstToken(TokenTypes.RBRACK);", "+        }", "+        else {", "+            final DetailAST ident = getIdentLastToken(ast);", "+            if (ident == null) {", "+                // construction like ((byte[]) pixels)[0]", "+                result = ast.findFirstToken(TokenTypes.RPAREN);", "+                result = ident;", "+            }", "+        }", "+        return result;", "+    }", "-     */", "-    private static DetailAST getArrayIdentifier(DetailAST arrayDeclarator) {", "-        return arrayDeclarator.getParent().getNextSibling();", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57734a9c7bf52894a562b24df9ac5c23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "176301250bfd2063f405fed4a960064e0a3e0230", "commitAfterChange": "61afa5374e2df61b421357868481edcc4e94845f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private static boolean containsAllSafeTokens(final DetailAST expr)", "signatureAfterChange": "     private boolean containsAllSafeTokens(final DetailAST expr)", "diff": ["-    private static boolean containsAllSafeTokens(final DetailAST expr) {", "+    private boolean containsAllSafeTokens(final DetailAST expr) {", "-        if (arg.branchContains(TokenTypes.METHOD_CALL)) {", "-            return false;", "-        }", "-        //Plus assignment can have ill affects", "-        //do not want to recommend moving expression", "-        //See example:", "-        //String s = \"SweetString\";", "-        //s.equals(s += \"SweetString\"); //false", "-        //s = \"SweetString\";", "-        //(s += \"SweetString\").equals(s); //true", "+        boolean argIsNotNull = false;", "+        if (arg.getType() == TokenTypes.PLUS) {", "+            DetailAST child = arg.getFirstChild();", "+            while (child != null", "+                    && !argIsNotNull) {", "+                argIsNotNull = child.getType() == TokenTypes.STRING_LITERAL", "+                        || child.getType() == TokenTypes.IDENT;", "+                child = child.getNextSibling();", "+            }", "+        }", "-        return !arg.branchContains(TokenTypes.PLUS_ASSIGN)", "-                && !arg.branchContains(TokenTypes.IDENT)", "-                && !arg.branchContains(TokenTypes.LITERAL_NULL);", "+        return argIsNotNull", "+                || !arg.branchContains(TokenTypes.IDENT)", "+                    && !arg.branchContains(TokenTypes.LITERAL_NULL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5aa699ca44f8d2be56337d4e1487582c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "7f7db38a097a95c264307123924779380fb40077", "commitAfterChange": "60847a32d538e9a0f1c1de3e349e8b3833741506", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+            String text = aAST.getText();", "+            int columnNo = aAST.getColumnNo();", "+            final DetailAST parent = aAST.getParent();", "+            if (parent.getType() == TokenTypes.UNARY_MINUS) {", "+                columnNo--;", "+                text = \"-\" + text;", "+            }", "+            else if (parent.getType() == TokenTypes.UNARY_PLUS) {", "+                columnNo--;", "+                text = \"+\" + text;", "+            }", "-                aAST.getColumnNo(),", "+                columnNo,", "-                aAST.getText());", "+                text);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b4a7a70b08db72857e7ce2ce519f888", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ParenPadCheck.java", "commitBeforeChange": "081f9e7f7f70a5da494c9e1185c27f1766e16acc", "commitAfterChange": "916417fc6214ab75606d2fbc1d7b511509ffe25b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processRight(DetailAST aAST)", "signatureAfterChange": "     private void processRight(DetailAST aAST)", "diff": ["-            if ((PadOption.NOSPACE == getAbstractOption())", "+            boolean followsEmptyForIterator = false;", "+            final DetailAST parent = aAST.getParent();", "+            if ((parent != null) ", "+                && (parent.getType() == TokenTypes.LITERAL_FOR))", "+            {", "+                final DetailAST forIterator =", "+                    parent.findFirstToken(TokenTypes.FOR_ITERATOR);", "+                followsEmptyForIterator = (forIterator.getChildCount() == 0)", "+                    && (aAST == forIterator.getNextSibling());", "+            }", "+            if (followsEmptyForIterator) {", "+                return;", "+//                if (mPadEmptyForIterator", "+//                    && !Character.isWhitespace(line.charAt(before)))", "+//                {", "+//                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+//                        \"ws.notPreceeded\", \")\");", "+//                }", "+//                else if (!mPadEmptyForIterator", "+//                    && Character.isWhitespace(line.charAt(before)))", "+//                {", "+//                    log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");", "+//                }  ", "+            }", "+            else if ((PadOption.NOSPACE == getAbstractOption())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0a620fc3cbeee430a1973a5fa5c3ade", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OneStatementPerLineCheck.java", "commitBeforeChange": "6985c4758d4a3252951a6a26b8efdd7b5f0adff4", "commitAfterChange": "b405880b6e79f143c3ba3651fe6c8b68324fca51", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void visitSemi(DetailAST ast)", "signatureAfterChange": "     private static boolean isMultilineStatement(DetailAST ast)", "diff": ["-    private void visitSemi(DetailAST ast) {", "-        if (exprDepth == 0) {", "-            lastStatementEnd = ast.getLineNo();", "+    private static boolean isMultilineStatement(DetailAST ast) {", "+        final boolean multiline;", "+        if (ast.getPreviousSibling() != null) {", "+            final DetailAST prevSibling = ast.getPreviousSibling();", "+            if (prevSibling.getLineNo() != ast.getLineNo()", "+                    && ast.getParent() != null) {", "+                multiline = true;", "+            }", "+            else {", "+                multiline = false;", "+            }", "+        else {", "+            multiline = false;", "+        }", "+        return multiline;"]}]}
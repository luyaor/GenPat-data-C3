{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1d9899e4075721578909030236eda7c1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "106e47e93290ff060984628628a61b8e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheckTest.java", "commitBeforeChange": "b219e2ff881703c4b0edeee01de12635531676a9", "commitAfterChange": "33efb558db835d60ca54644860a096f08d802fb5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testSpace()         throws Exception", "signatureAfterChange": "      @Test     public void testSpace()         throws Exception", "diff": ["-            \"272:26: \" + getCheckMessage(WS_NOT_FOLLOWED, \"(\"),", "-            \"272:36: \" + getCheckMessage(WS_NOT_PRECEDED, \")\"),", "-            \"274:29: \" + getCheckMessage(WS_NOT_FOLLOWED, \"(\"),", "-            \"274:42: \" + getCheckMessage(WS_NOT_PRECEDED, \")\"),", "-            \"275:18: \" + getCheckMessage(WS_NOT_FOLLOWED, \"(\"),", "-            \"275:33: \" + getCheckMessage(WS_NOT_PRECEDED, \")\"),", "+            \"273:26: \" + getCheckMessage(WS_NOT_FOLLOWED, \"(\"),", "+            \"273:36: \" + getCheckMessage(WS_NOT_PRECEDED, \")\"),", "+            \"275:29: \" + getCheckMessage(WS_NOT_FOLLOWED, \"(\"),", "+            \"275:42: \" + getCheckMessage(WS_NOT_PRECEDED, \")\"),", "+            \"276:18: \" + getCheckMessage(WS_NOT_FOLLOWED, \"(\"),", "+            \"276:33: \" + getCheckMessage(WS_NOT_PRECEDED, \")\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e6f3c9fdf0ddea6ad4aa955f5e7e00b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationLoaderTest.java", "commitBeforeChange": "04483a77e8f20ef67db6467c477a7fcba129eef6", "commitAfterChange": "4564aecb5c1d694591feef433ce067d74e36d823", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public void testCheckstyleChecks() throws Exception", "signatureAfterChange": "      public void testCheckstyleChecks() throws Exception", "diff": ["-        verifyConfigNode(config, \"configuration\", 3, atts);", "+        verifyConfigNode(config, \"Checker\", 3, atts);", "-            (DefaultConfiguration) children[1], \"PackageHtmlCheck\", 0, atts);", "+            (DefaultConfiguration) children[1], \"PackageHtml\", 0, atts);", "-            (DefaultConfiguration) children[2], \"TranslationCheck\", 0, atts);", "+            (DefaultConfiguration) children[2], \"Translation\", 0, atts);", "-            \"GenericIllegalRegexpCheck\",", "+            \"GenericIllegalRegexp\",", "-            \"NoWhitespaceAfterCheck\",", "+            \"NoWhitespaceAfter\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "312b8e7d7412a020f0297265dd645e8d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheckTest.java", "commitBeforeChange": "bd4ec9a98edaced73f14c5422f64c39fad3ce596", "commitAfterChange": "fc17c983239b6e6a6d3e41f53cb134bd22488db1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testDefault()         throws Exception", "signatureAfterChange": "     public void testDefault()         throws Exception", "diff": ["-            \"91:14: '0xffffffffL' is a magic number.\",", "-            \"99:30: '+3' is a magic number.\",", "-            \"100:29: '-2' is a magic number.\",", "-            \"101:35: '+3.5' is a magic number.\",", "-            \"102:36: '-2.5' is a magic number.\",", "-            \"110:35: '0x80000000' is a magic number.\",", "-            \"111:36: '0x8000000000000000L' is a magic number.\",", "-            \"114:37: '020000000000' is a magic number.\",", "-            \"115:38: '01000000000000000000000L' is a magic number.\",          ", "+            \"92:14: '0xffffffffL' is a magic number.\",", "+            \"100:30: '+3' is a magic number.\",", "+            \"101:29: '-2' is a magic number.\",", "+            \"102:35: '+3.5' is a magic number.\",", "+            \"103:36: '-2.5' is a magic number.\",", "+            \"111:35: '0x80000000' is a magic number.\",", "+            \"112:36: '0x8000000000000000L' is a magic number.\",", "+            \"115:37: '020000000000' is a magic number.\",", "+            \"116:38: '01000000000000000000000L' is a magic number.\",          ", "+            \"131:32: '378' is a magic number.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34069ee0c9f1fef1966d0692eb9c1d13", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/j2ee/src/tests/LocalHomeInterfaceCheckTest.java", "commitBeforeChange": "24a774b1e89f010f7ac70c66f2c0d75e5ce53b87", "commitAfterChange": "9f4164a450bed42bb632400bc2d53ffcc9775235", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testDefault()             throws Exception", "signatureAfterChange": "     public void testDefault()             throws Exception", "diff": ["-            \"12:18: Home interface has no findByPrimaryKey method.\",", "-            \"18:19: Method createSomething does not throw javax.ejb.CreateException.\",", "-            \"18:19: Method createSomething is not public.\",", "-            \"18:19: Void createSomething method.\",", "-            \"20:19: Method findSomething does not throw javax.ejb.FinderException.\",", "-            \"20:19: Method findSomething is not public.\",", "-            \"20:19: Void findSomething method.\",", "+            \"12:18: Home interface must have method findByPrimaryKey.\",", "+            \"18:19: Method createSomething must be non-void.\",", "+            \"18:19: Method createSomething must be public.\",", "+            \"18:19: Method createSomething must throw javax.ejb.CreateException.\",", "+            \"20:19: Method findSomething must be non-void.\",", "+            \"20:19: Method findSomething must be public.\",", "+            \"20:19: Method findSomething must throw javax.ejb.FinderException.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ef235d484322b219d53c9cad5d2e83", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/CheckerTest.java", "commitBeforeChange": "acc3f40015ffe1263cfa684ca4b29939249e9aed", "commitAfterChange": "c2b22a74a2e85bbb2cfd4e0e2379bb062cb58dd1", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "      public void testSemantic()         throws Exception", "signatureAfterChange": "      public void testSemantic()         throws Exception", "diff": ["-            filepath + \":51:65: Must have at least one statement.\",", "-            filepath + \":53:41: Must have at least one statement.\",", "-            filepath + \":70:38: Must have at least one statement.\",", "-            filepath + \":71:52: Must have at least one statement.\",", "-            filepath + \":72:45: Must have at least one statement.\",", "-            filepath + \":74:13: Must have at least one statement.\",", "-            filepath + \":76:17: Must have at least one statement.\",", "-            filepath + \":78:13: Must have at least one statement.\",", "-            filepath + \":81:17: Must have at least one statement.\",", "+            filepath + \":52:65: Must have at least one statement.\",", "+            filepath + \":54:41: Must have at least one statement.\",", "+            filepath + \":71:38: Must have at least one statement.\",", "+            filepath + \":72:52: Must have at least one statement.\",", "+            filepath + \":73:45: Must have at least one statement.\",", "+            filepath + \":75:13: Must have at least one statement.\",", "+            filepath + \":77:17: Must have at least one statement.\",", "+            filepath + \":79:13: Must have at least one statement.\",", "+            filepath + \":82:17: Must have at least one statement.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "650c7b153c9269d62abfa01b01f2ddb9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/JUnitTestCaseCheckTest.java", "commitBeforeChange": "448a62c9a6740c4e6e5435b4a89cd9c82e6b8957", "commitAfterChange": "91e10c298d313957c4e9263484b836d33c2d4cbe", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault() throws Exception", "signatureAfterChange": "     @Test     public void testDefault() throws Exception", "diff": ["-            \"14:5: The method 'setUp' must be public or protected.\",", "-            \"15:5: The method 'tearDown' shouldn't be static.\",", "-            \"22:5: The method 'tearDown' must be declared with a void return type.\",", "-            \"28:5: The method 'setUp' must be declared with no parameters.\",", "-            \"30:5: The method 'suite' must be declared static.\",", "-            \"31:5: The method 'tearDown' must be declared with no parameters.\",", "+            \"29:5: The method 'setUp' must be declared with no parameters.\",", "+            \"31:5: The method 'suite' must be declared static.\",", "+            \"32:5: The method 'tearDown' must be declared with no parameters.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70b645dd49e52c28ec53dcb92463c2b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4843defaultcasepresent/MissingSwitchDefaultTest.java", "commitBeforeChange": "bca492cc217f781c64091ec00cccf17d60be893c", "commitAfterChange": "d74f5bb61c9d8a45af94f5539b2001d25e1f3076", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void missingSwitchDefaultTest() throws Exception", "signatureAfterChange": "      @Test     public void missingSwitchDefaultTest() throws Exception", "diff": ["-            \"11:9: \" + msg,", "-            \"19:9: \" + msg,", "-            \"23:9: \" + msg,", "-            \"31:13: \" + msg,", "-            \"38:21: \" + msg,", "-            \"42:21: \" + msg,", "+            \"11: \" + msg,", "+            \"19: \" + msg,", "+            \"23: \" + msg,", "+            \"31: \" + msg,", "+            \"38: \" + msg,", "+            \"42: \" + msg,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f87076ff624fe8b11f6c77d656224b0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/header/HeaderCheckTest.java", "commitBeforeChange": "e3e0c92185f2517de79f58f25be166e636fbd1f2", "commitAfterChange": "47cfb3621da4ea9f9692c79ae284f7433a2e9bda", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testRegexpHeaderSmallHeader() throws Exception", "signatureAfterChange": "      @Test     public void testIgnore() throws Exception", "diff": ["-", "-    @Test", "-    public void testRegexpHeaderSmallHeader() throws Exception {", "-        final DefaultConfiguration checkConfig =", "-            createCheckConfig(RegexpHeaderCheck.class);", "-        checkConfig.addAttribute(\"headerFile\", getPath(\"regexp.header2\"));", "-        checkConfig.addAttribute(\"multiLines\", \"3, 6\");", "-        final String[] expected = {", "-        };", "-        verify(checkConfig, getPath(\"InputRegexpSmallHeader.java\"), expected);", "-    }", "+", "+    @Test", "+    public void testIgnore() throws Exception {", "+        final DefaultConfiguration checkConfig =", "+                createCheckConfig(HeaderCheck.class);", "+        checkConfig.addAttribute(\"headerFile\", getPath(\"configs/java.header\"));", "+        checkConfig.addAttribute(\"ignoreLines\", \"2\");", "+        final String[] expected = {", "+        };", "+        verify(checkConfig, getPath(\"configs/java2.header\"), expected);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c71a21a5c721e0d7bd32c6ddc44225", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/TrailingCommentCheckTest.java", "commitBeforeChange": "3994e36e8d25c3e5bc8570d371fc73b1467cf80c", "commitAfterChange": "fcb47f13dc5876474d9cbf9c3f5e8949b0d67887", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testDefaults() throws Exception", "signatureAfterChange": "      @Test     public void testDefaults() throws Exception", "diff": ["-            \"2: Don't use trailing comments.\",", "-            \"5: Don't use trailing comments.\",", "-            \"6: Don't use trailing comments.\",", "-            \"16: Don't use trailing comments.\",", "-            \"17: Don't use trailing comments.\",", "-            \"27: Don't use trailing comments.\",", "+            \"4: Don't use trailing comments.\",", "+            \"7: Don't use trailing comments.\",", "+            \"8: Don't use trailing comments.\",", "+            \"18: Don't use trailing comments.\",", "+            \"19: Don't use trailing comments.\",", "+            \"29: Don't use trailing comments.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2730cb27c078c0d3296944b73ae0900", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheckTest.java", "commitBeforeChange": "3994e36e8d25c3e5bc8570d371fc73b1467cf80c", "commitAfterChange": "fcb47f13dc5876474d9cbf9c3f5e8949b0d67887", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      @Test     public void testInheritDoc() throws Exception", "signatureAfterChange": "      @Test     public void testInheritDoc() throws Exception", "diff": ["-            \"4:5: Invalid use of the {@inheritDoc} tag.\",", "-            \"9:5: Invalid use of the {@inheritDoc} tag.\",", "-            \"29:5: Invalid use of the {@inheritDoc} tag.\",", "-            \"34:5: Invalid use of the {@inheritDoc} tag.\",", "-            \"39:5: Invalid use of the {@inheritDoc} tag.\",", "-            \"44:5: Invalid use of the {@inheritDoc} tag.\",", "+            \"6:5: Invalid use of the {@inheritDoc} tag.\",", "+            \"11:5: Invalid use of the {@inheritDoc} tag.\",", "+            \"31:5: Invalid use of the {@inheritDoc} tag.\",", "+            \"36:5: Invalid use of the {@inheritDoc} tag.\",", "+            \"41:5: Invalid use of the {@inheritDoc} tag.\",", "+            \"46:5: Invalid use of the {@inheritDoc} tag.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d540a90e41fe82276d22e64c28338be7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheckTest.java", "commitBeforeChange": "3c0c72f96477afb542ee37b3336f4b7b7613ff29", "commitAfterChange": "6f0a3dee5efc6217383f9bfd6d7a3a116b1c885b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testIllegalClassType() throws Exception", "signatureAfterChange": "      @Test     public void testIllegalClassType() throws Exception", "diff": ["-        checkConfig.addAttribute(\"checkName\", \"false\");", "-        checkConfig.addAttribute(\"checkModifier\", \"true\");", "+        checkConfig.addAttribute(\"ignoreName\", \"true\");", "+        checkConfig.addAttribute(\"ignoreModifier\", \"false\");", "-            \"26:1: Class 'AbstractClass' must has abstract modifier.\",", "-            \"29:1: Class 'Class1Factory' must has abstract modifier.\",", "-            \"33:5: Class 'AbstractInnerClass' must has abstract modifier.\",", "-            \"38:5: Class 'WellNamedFactory' must has abstract modifier.\",", "+            \"26:1: Class 'AbstractClass' must be declared as 'abstract'.\",", "+            \"29:1: Class 'Class1Factory' must be declared as 'abstract'.\",", "+            \"33:5: Class 'AbstractInnerClass' must be declared as 'abstract'.\",", "+            \"38:5: Class 'WellNamedFactory' must be declared as 'abstract'.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d896a70ce3889225173955b5b3a6ea43", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheckTest.java", "commitBeforeChange": "9a15d83aa778a856b091fdddf6b1807b239d3db8", "commitAfterChange": "be3f6d793cf12cba115d7a1aafd6d1affe0a4338", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public void testMethodToken()             throws Exception", "signatureAfterChange": "      public void testMethodToken()             throws Exception", "diff": ["-            \"52:17: Parameter s should be final.\",", "-            \"68:17: Parameter s should be final.\",", "-            \"74:17: Parameter s should be final.\",", "-            \"89:38: Parameter e should be final.\",", "-            \"92:36: Parameter e should be final.\",", "-            \"109:18: Parameter aParam should be final.\",", "-            \"112:18: Parameter args should be final.\",", "-            \"115:18: Parameter args should be final.\",", "+            \"53:17: Parameter s should be final.\",", "+            \"69:17: Parameter s should be final.\",", "+            \"75:17: Parameter s should be final.\",", "+            \"90:45: Parameter e should be final.\",", "+            \"93:36: Parameter e should be final.\",", "+            \"110:18: Parameter aParam should be final.\",", "+            \"113:18: Parameter args should be final.\",", "+            \"116:18: Parameter args should be final.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0bb07718052c088d667f162c237029c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/imports/GuardTest.java", "commitBeforeChange": "52e2087c404986f8e12cd8579be7b2333961e1a3", "commitAfterChange": "c38185458ab824874b8465c46b4dc42646440aaa", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testPkgGuard2()", "signatureAfterChange": "      public void testPkgGuard2()", "diff": ["-        assertEquals(AccessResult.UNKNOWN, g.verifyImport(\"asda\", \"ignored\"));", "-        assertEquals(AccessResult.UNKNOWN, g.verifyImport(\"p\", \"ignored\"));", "-        assertEquals(AccessResult.ALLOWED, g.verifyImport(\"pkg.a\", \"ignored\"));", "-        assertEquals(AccessResult.UNKNOWN, g.verifyImport(\"pkg.a.b\", \"ignored\"));", "-        assertEquals(AccessResult.UNKNOWN, g.verifyImport(\"pkg\", \"ignored\"));", "+        assertEquals(AccessResult.UNKNOWN, g.verifyImport(\"asda\"));", "+        assertEquals(AccessResult.UNKNOWN, g.verifyImport(\"p\"));", "+        assertEquals(AccessResult.ALLOWED, g.verifyImport(\"pkg.a\"));", "+        assertEquals(AccessResult.UNKNOWN, g.verifyImport(\"pkg.a.b\"));", "+        assertEquals(AccessResult.UNKNOWN, g.verifyImport(\"pkg\"));"]}]}
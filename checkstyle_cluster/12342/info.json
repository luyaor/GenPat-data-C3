{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a78aa903d80f319b3b506e912dcf65ef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0492a33021beb73432827bd5d1041163", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        String currentString = aAST.getText();", "-        ArrayList i = (ArrayList) mStringMap.get(currentString);", "-        if (i == null) {", "-            i = new ArrayList();", "-            mStringMap.put(currentString, i);", "+        final String currentString = aAST.getText();", "+        ArrayList hitList = (ArrayList) mStringMap.get(currentString);", "+        if (hitList == null) {", "+            hitList = new ArrayList();", "+            mStringMap.put(currentString, hitList);", "-        i.add(new StringInfo(line, col));", "+        hitList.add(new StringInfo(line, col));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "253c4dfb61e035c9d3fa4416620de308", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "      @Override     public void destroy()", "signatureAfterChange": "      @Override     public void destroy()", "diff": ["-        for (Check c : ordinaryChecks) {", "-            c.destroy();", "+        for (Check check : ordinaryChecks) {", "+            check.destroy();", "-        for (Check c : commentChecks) {", "-            c.destroy();", "+        for (Check check : commentChecks) {", "+            check.destroy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29bf3b60ed2b026c27b0aa88ba6f98d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public int getChildCount(int type)", "signatureAfterChange": "     public int getChildCount(int type)", "diff": ["-        for (AST i = getFirstChild(); i != null; i = i.getNextSibling()) {", "-            if (i.getType() == type) {", "+        for (AST ast = getFirstChild(); ast != null; ast = ast.getNextSibling()) {", "+            if (ast.getType() == type) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6782ab44120ec54b829354c6708acbbc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "2a77329c4f45c42b1e9f49773522349193f83338", "commitAfterChange": "a75c64efe39a5c4391faf8ec2fba07ae76411a0e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private static ParseTree getNextSibling(ParseTree node)", "signatureAfterChange": "     private static ParseTree getNextSibling(ParseTree node)", "diff": ["-            int i = 0;", "+            int index = 0;", "-                final ParseTree currentNode = parent.getChild(i);", "+                final ParseTree currentNode = parent.getChild(index);", "-                    if (i != childCount - 1) {", "-                        nextSibling = parent.getChild(i + 1);", "+                    if (index != childCount - 1) {", "+                        nextSibling = parent.getChild(index + 1);", "-                i++;", "+                index++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7868d82b584d425bf01cfb5176dd3be6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void setupChild(Configuration childConf)         throws CheckstyleException", "signatureAfterChange": "      @Override     public void setupChild(Configuration childConf)         throws CheckstyleException", "diff": ["-        final Check c = (Check) module;", "-        c.contextualize(childContext);", "-        c.configure(childConf);", "-        c.init();", "+        final Check check = (Check) module;", "+        check.contextualize(childContext);", "+        check.configure(childConf);", "+        check.init();", "-        registerCheck(c);", "+        registerCheck(check);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb45108596fac196c4f8fa1080050f0e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "546f336e25b26d072f96e2cda139b885858ed5b0", "commitAfterChange": "f1e80e4ecae727087ca135dfd02f72e2d6213efb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     static String replaceProperties(             String value, PropertyResolver props, String defaultValue)         throws CheckstyleException", "signatureAfterChange": "     static String replaceProperties(             String value, PropertyResolver props, String defaultValue)         throws CheckstyleException", "diff": ["-        final Iterator<String> i = fragments.iterator();", "-        final Iterator<String> j = propertyRefs.iterator();", "-        while (i.hasNext()) {", "-            String fragment = i.next();", "+        final Iterator<String> fragmentsIterator = fragments.iterator();", "+        final Iterator<String> propertyRefsIterator = propertyRefs.iterator();", "+        while (fragmentsIterator.hasNext()) {", "+            String fragment = fragmentsIterator.next();", "-                final String propertyName = j.next();", "+                final String propertyName = propertyRefsIterator.next();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "168df9c1f88dc4c251b4bfcc515a0b36", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58dd9af8ce49693f0806661c18f224a7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "6d20b67e0f1bfedc2132a887257d72edde4c857b", "commitAfterChange": "99f8726600ebd9f73b86eacf5e44d0335266d8fc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private static DetailAST getAnnotationTarget(DetailAST ast)", "signatureAfterChange": "     private static DetailAST getAnnotationTarget(DetailAST ast)", "diff": ["-        DetailAST parentAST = ast.getParent();", "+        final DetailAST parentAST = ast.getParent();", "-                parentAST = parentAST.getParent();", "-                switch (parentAST.getType()) {", "-                    case TokenTypes.ANNOTATION_DEF:", "-                    case TokenTypes.PACKAGE_DEF:", "-                    case TokenTypes.CLASS_DEF:", "-                    case TokenTypes.INTERFACE_DEF:", "-                    case TokenTypes.ENUM_DEF:", "-                    case TokenTypes.ENUM_CONSTANT_DEF:", "-                    case TokenTypes.CTOR_DEF:", "-                    case TokenTypes.METHOD_DEF:", "-                    case TokenTypes.PARAMETER_DEF:", "-                    case TokenTypes.VARIABLE_DEF:", "-                    case TokenTypes.ANNOTATION_FIELD_DEF:", "-                    case TokenTypes.TYPE:", "-                    case TokenTypes.LITERAL_NEW:", "-                    case TokenTypes.LITERAL_THROWS:", "-                    case TokenTypes.TYPE_ARGUMENT:", "-                    case TokenTypes.IMPLEMENTS_CLAUSE:", "-                    case TokenTypes.DOT:", "-                        targetAST = parentAST;", "-                        break;", "-                    default:", "-                        // it's possible case, but shouldn't be processed here", "-                }", "+                targetAST = getAcceptableParent(parentAST);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6aaee9aef077b7be14acdcfa57b80bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java", "commitBeforeChange": "d5a6a78a590fa688a4405d80adb81e067e997b14", "commitAfterChange": "9df0df10bf2b1cd0613967ab85fbdcf02b94ef0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean inIgnoreList(DetailAST aAST)", "signatureAfterChange": "     private boolean inIgnoreList(DetailAST aAST)", "diff": ["-      float value = 0; //value of aAST", "-      switch (aAST.getType()) {", "-          case TokenTypes.NUM_DOUBLE :", "-              value = (float) Double.parseDouble(aAST.getText());", "-              break;", "-          case TokenTypes.NUM_FLOAT :", "-              value = Float.parseFloat(aAST.getText());", "-              break;", "-          case TokenTypes.NUM_INT :", "-              value = Integer.parseInt(aAST.getText());", "-              break;", "-          case TokenTypes.NUM_LONG :", "-              // Long.parseLong requires that the text ends with neither 'L'", "-              // nor 'l'.", "-              String text = aAST.getText();", "-              if ((text.endsWith(\"L\")) || (text.endsWith(\"l\"))) {", "-                  text = text.substring(0, text.length() - 1); ", "-              }", "-              value = Long.parseLong(text);", "-              break;", "-          default :", "-              break;", "-      }", "-      return (Arrays.binarySearch(mIgnoreNumbers, value) >= 0);", "+        final float value = parseFloat(aAST.getText(), aAST.getType());", "+        return (Arrays.binarySearch(mIgnoreNumbers, value) >= 0);", "+    }"]}]}
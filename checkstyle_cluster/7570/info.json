{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e57a69f7be4eecf77d1f07fed80ec42f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43c705f616090530b74f1999ba411f43", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "46d57c9ca5c93972a22cd797793d6b21c820f444", "commitAfterChange": "deb4d7a38805032ea8c9e2476eff5e00e38f1015", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean inAbstractMethod(DetailAST aAST)", "signatureAfterChange": "     private static boolean inAbstractOrNativeMethod(DetailAST aAST)", "diff": ["-    private boolean inAbstractMethod(DetailAST aAST)", "+    private static boolean inAbstractOrNativeMethod(DetailAST aAST)", "-                return modifiers.branchContains(TokenTypes.ABSTRACT);", "+                return modifiers.branchContains(TokenTypes.ABSTRACT)", "+                        || modifiers.branchContains(TokenTypes.LITERAL_NATIVE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82586f1d0c010abcb86e3f018ce7ece6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "0d66a67b0d3920031422d5bb02f0fc02ce580bae", "commitAfterChange": "c9c475a6c7a8cb728ba1c091b386db46f11a781f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static boolean inAbstractOrNativeMethod(DetailAST ast)", "signatureAfterChange": "     private static boolean inAbstractOrNativeMethod(DetailAST ast)", "diff": ["+        boolean abstractOrNative = false;", "-        while (parent != null) {", "+        while (parent != null && !abstractOrNative) {", "-                return modifiers.branchContains(TokenTypes.ABSTRACT)", "+                abstractOrNative = modifiers.branchContains(TokenTypes.ABSTRACT)", "-        return false;", "+        return abstractOrNative;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6cd59f6e3dce9cde2f87fe61525e328c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c847b536182ee3b1f95ea0c3e19cb5d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "fb2ec00cc72fa6edc0894e337b8176adcc2eb974", "commitAfterChange": "3b26b571a8dae611366c481aa1fce606ca1f1cfa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final DetailAST nextToken = ast.getNextSibling();", "+        if (hasMultipleLinesBefore(ast)) {", "+            log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "+        }", "+        final DetailAST nextToken = ast.getNextSibling();", "-                    if (nextToken.getType() != TokenTypes.RCURLY && !hasEmptyLineAfter(ast)) {", "-                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "+                    if (nextToken.getType() == TokenTypes.RCURLY) {", "+                        if (hasNotAllowedTwoEmptyLinesBefore(nextToken)) {", "+                            log(ast.getLineNo(), MSG_MULTIPLE_LINES_AFTER, ast.getText());", "+                        }", "-                    if (hasNotAllowedTwoEmptyLinesBefore(ast)) {", "-                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "+                    else if (!hasEmptyLineAfter(ast)) {", "+                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                            nextToken.getText());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc6fdbaf13f0551e6c1293aaf8147794", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "f293a2107656cebb829e33cba2384ba56be54512", "commitAfterChange": "b372cfa0a8632735da877de0f703c3b3c9ce5f63", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void processVariableDef(DetailAST ast, DetailAST nextToken)", "signatureAfterChange": "     private void processVariableDef(DetailAST ast, DetailAST nextToken)", "diff": ["-        if (isTypeField(ast) && !hasEmptyLineAfter(ast)) {", "-            if (allowNoEmptyLineBetweenFields", "-                && nextToken.getType() != TokenTypes.VARIABLE_DEF", "-                && nextToken.getType() != TokenTypes.RCURLY) {", "-                log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                     nextToken.getText());", "-            }", "-            else if (!allowNoEmptyLineBetweenFields", "-                     && nextToken.getType() != TokenTypes.RCURLY) {", "-                log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                     nextToken.getText());", "-            }", "+        if (isTypeField(ast) && !hasEmptyLineAfter(ast)", "+                && isViolatingEmptyLineBetweenFieldsPolicy(nextToken)) {", "+            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                    nextToken.getText());"]}]}
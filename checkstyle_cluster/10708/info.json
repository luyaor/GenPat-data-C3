{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a6297a6a3ccce3d27d88df94026227a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a52b60d21ea7209dcb4da230c87b6e4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private static String getStringExpr(DetailAST ast)", "signatureAfterChange": "     private static String getStringExpr(DetailAST ast)", "diff": ["+            String expr = \"\";", "+", "-                    return quotedText.substring(1, quotedText.length() - 1);", "+                    expr = quotedText.substring(1, quotedText.length() - 1);", "+                    break;", "-                    return firstChild.getText();", "+                    expr = firstChild.getText();", "+                    break;", "-                    return firstChild.getLastChild().getText();", "+                    expr = firstChild.getLastChild().getText();", "+                    break;", "-                    return \"\";", "+            return expr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "171e4949fe31eca84ff54d5e17933ec1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "c6a70d4cca08ebdb2b4b26eff3e7da076ada184d", "commitAfterChange": "5478613082bac0329d25cffcfae5fab219d25118", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public AbstractExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, AbstractExpressionHandler parent)", "signatureAfterChange": "     public AbstractExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, AbstractExpressionHandler parent)", "diff": ["+        AbstractExpressionHandler resultHandler;", "-            return handler;", "+            resultHandler = handler;", "-", "-        if (ast.getType() == TokenTypes.METHOD_CALL) {", "-            return createMethodCallHandler(indentCheck, ast, parent);", "+        else if (ast.getType() == TokenTypes.METHOD_CALL) {", "+            resultHandler = createMethodCallHandler(indentCheck, ast, parent);", "-", "-        final Constructor<?> handlerCtor =", "-            typeHandlers.get(ast.getType());", "-        return (AbstractExpressionHandler) CommonUtils.invokeConstructor(", "-            handlerCtor, indentCheck, ast, parent);", "+        else {", "+            final Constructor<?> handlerCtor = typeHandlers.get(ast.getType());", "+            resultHandler = (AbstractExpressionHandler) CommonUtils.invokeConstructor(", "+                handlerCtor, indentCheck, ast, parent);", "+        }", "+        return resultHandler;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36a6080d48b627d64fb0c5430de15472", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java", "commitBeforeChange": "5478613082bac0329d25cffcfae5fab219d25118", "commitAfterChange": "2af34e2adcd4d120d7400103d2dac3d5ee20f65b", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     protected IndentLevel getChildrenExpectedLevel()", "signatureAfterChange": "     protected IndentLevel getChildrenExpectedLevel()", "diff": ["+        IndentLevel indentLevel = new IndentLevel(getLevel(), getBasicOffset());", "-                return new IndentLevel(expandedTabsColumnNo(getLCurly()) + getBasicOffset());", "+                indentLevel = new IndentLevel(expandedTabsColumnNo(getLCurly()) + getBasicOffset());", "-                return level;", "+                indentLevel = level;", "-        return new IndentLevel(getLevel(), getBasicOffset());", "+        return indentLevel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39781113314e62cd8a11131c1d13afd4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressWithNearbyCommentFilter.java", "commitBeforeChange": "c3674faad8a38656e910750fb22a7eef714fb8a7", "commitAfterChange": "c3c1b9ae062635d0be858088ed2c1fcf366ec33f", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "         public boolean isMatch(AuditEvent event)", "signatureAfterChange": "         public boolean isMatch(AuditEvent event)", "diff": ["-            if (line < firstLine) {", "-                return false;", "+            boolean match = false;", "+", "+            if (line >= firstLine && line <= lastLine) {", "+                final Matcher tagMatcher = tagCheckRegexp.matcher(event.getSourceName());", "+", "+                if (tagMatcher.find()) {", "+                    match = true;", "+                }", "+                else if (tagMessageRegexp != null) {", "+                    final Matcher messageMatcher = tagMessageRegexp.matcher(event.getMessage());", "+                    match = messageMatcher.find();", "+                }", "-            if (line > lastLine) {", "-                return false;", "-            }", "-            final Matcher tagMatcher =", "-                tagCheckRegexp.matcher(event.getSourceName());", "-            if (tagMatcher.find()) {", "-                return true;", "-            }", "-            if (tagMessageRegexp != null) {", "-                final Matcher messageMatcher =", "-                    tagMessageRegexp.matcher(event.getMessage());", "-                return messageMatcher.find();", "-            }", "-            return false;", "+            return match;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4913833048203fd63c6d9e758faff635", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "2650bf757b9a281f18c9be4248fd8ae0e83bcb6c", "commitAfterChange": "5bd22fd6136bd16e82d32c5a386bcf033004d8eb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private int compare(String string1, String string2,             boolean caseSensitive)", "signatureAfterChange": "     private static int compare(String string1, String string2,             boolean caseSensitive)", "diff": ["-    private int compare(String string1, String string2,", "+    private static int compare(String string1, String string2,", "+        int result;", "-            return string1.compareTo(string2);", "+            result = string1.compareTo(string2);", "+        }", "+        else {", "+            result = string1.compareToIgnoreCase(string2);", "-        return string1.compareToIgnoreCase(string2);", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a2ecba8a9e2bef1a720c79157b883e3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "9f93c2258ef0512b743f5927be201ff55a9d5c57", "commitAfterChange": "23c8774d2e2fd245de1e5df02758fd23702c565e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void visitOtherTokens(DetailAST ast, int type)", "signatureAfterChange": "     private void visitOtherTokens(DetailAST ast, int type)", "diff": ["+        final String frameName;", "-        final FieldFrame frame =", "-            new FieldFrame(currentFrame, isStaticInnerType,", "-                    type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF", "-                    ? ast.findFirstToken(TokenTypes.IDENT).getText()", "-                    : null", "-            );", "+        if (type == TokenTypes.CLASS_DEF || type == TokenTypes.ENUM_DEF) {", "+            frameName = ast.findFirstToken(TokenTypes.IDENT).getText();", "+        }", "+        else {", "+            frameName = null;", "+        }", "+        final FieldFrame frame = new FieldFrame(currentFrame, isStaticInnerType, frameName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f040f4c0e6c0bbc9e1578f9b876fe7f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "98a3157200a6b488a0f78b67b0741a2bd72d40fa", "commitAfterChange": "044889b26a868b1b7200526ceeb40cdbe1e903fc", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     AccessResult checkAccess(final String forImport, final String inPkg)", "signatureAfterChange": "     AccessResult checkAccess(final String forImport, final String inPkg)", "diff": ["+        AccessResult result;", "-            return retVal;", "+            result = retVal;", "-        if (parent == null) {", "+        else if (parent == null) {", "-            return AccessResult.DISALLOWED;", "+            result = AccessResult.DISALLOWED;", "-", "-        return parent.checkAccess(forImport, inPkg);", "+        else {", "+            result = parent.checkAccess(forImport, inPkg);", "+        }", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "578c02715ed451811db8e9ebd602b980", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionCommentFilter.java", "commitBeforeChange": "2af34e2adcd4d120d7400103d2dac3d5ee20f65b", "commitAfterChange": "aa4e40e550403d61ce550a2056407fda43a22936", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "         public boolean isMatch(AuditEvent event)", "signatureAfterChange": "         public boolean isMatch(AuditEvent event)", "diff": ["-            final Matcher tagMatcher =", "-                tagCheckRegexp.matcher(event.getSourceName());", "+            boolean match = false;", "+            final Matcher tagMatcher = tagCheckRegexp.matcher(event.getSourceName());", "-                    final Matcher messageMatcher =", "-                            tagMessageRegexp.matcher(event.getMessage());", "-                    return messageMatcher.find();", "+                    final Matcher messageMatcher = tagMessageRegexp.matcher(event.getMessage());", "+                    match = messageMatcher.find();", "-                return true;", "+                else {", "+                    match = true;", "+                }", "-            return false;", "+            return match;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a962aaad7e08e912cc16d9846a2d589", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/ConfigurationBuilder.java", "commitBeforeChange": "8a2cf3a7e7bd6fc01ae5b7627ee7f4f917df6a99", "commitAfterChange": "a6bf0ef27c984aebc3af17d9b1000a3c5d529abc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public Configuration getCheckConfig(String aCheckName)", "signatureAfterChange": "      public Configuration getCheckConfig(String aCheckName)", "diff": ["+        Configuration result = null;", "-                        return checkConfig;", "+                        result = checkConfig;", "+                        break;", "+                }", "+                if (result != null) {", "+                    break;", "-                return currentConfig;", "+                result = currentConfig;", "-        return null;", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82586f1d0c010abcb86e3f018ce7ece6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "0d66a67b0d3920031422d5bb02f0fc02ce580bae", "commitAfterChange": "c9c475a6c7a8cb728ba1c091b386db46f11a781f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private static boolean inAbstractOrNativeMethod(DetailAST ast)", "signatureAfterChange": "     private static boolean inAbstractOrNativeMethod(DetailAST ast)", "diff": ["+        boolean abstractOrNative = false;", "-        while (parent != null) {", "+        while (parent != null && !abstractOrNative) {", "-                return modifiers.branchContains(TokenTypes.ABSTRACT)", "+                abstractOrNative = modifiers.branchContains(TokenTypes.ABSTRACT)", "-        return false;", "+        return abstractOrNative;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d516ae5174c4b3e8bae985cb815849c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java", "commitBeforeChange": "9f93c2258ef0512b743f5927be201ff55a9d5c57", "commitAfterChange": "23c8774d2e2fd245de1e5df02758fd23702c565e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private AccessResult calculateResult(final boolean matched)", "signatureAfterChange": "     private AccessResult calculateResult(final boolean matched)", "diff": ["+        AccessResult result = AccessResult.UNKNOWN;", "+", "-            return allowed ? AccessResult.ALLOWED : AccessResult.DISALLOWED;", "+            if (allowed) {", "+                result = AccessResult.ALLOWED;", "+            }", "+            else {", "+                result = AccessResult.DISALLOWED;", "+            }", "-        return AccessResult.UNKNOWN;", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3d9f1f79ceecba01b9bcd8dd4600f13", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "f981e5845436464b45fc937e601f7fc9fdbc5a7c", "commitAfterChange": "98a3157200a6b488a0f78b67b0741a2bd72d40fa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private String checkImportStatements(String className)", "signatureAfterChange": "     private String checkImportStatements(String className)", "diff": ["+        String illegalType = null;", "-                    return fqClass;", "+                    illegalType = fqClass;", "+                    break;", "-                    return importArg;", "+                    illegalType = importArg;", "+                    break;", "-        return null;", "+        return illegalType;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bef9a97cca6700ede4919f13380f24c8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "fb0f73fc9c382d9279d573bfc3779b872f795aac", "commitAfterChange": "f981e5845436464b45fc937e601f7fc9fdbc5a7c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean containsJavadocTag(final TextBlock javadoc)", "signatureAfterChange": "     private static boolean containsJavadocTag(final TextBlock javadoc)", "diff": ["-        if (javadoc == null) {", "-            return false;", "-        }", "+        boolean javadocTag = false;", "-        final String[] lines = javadoc.getText();", "+        if (javadoc != null) {", "+            final String[] lines = javadoc.getText();", "-        for (final String line : lines) {", "-            final Matcher matchInheritDoc =", "-                MATCH_INHERITDOC.matcher(line);", "+            for (final String line : lines) {", "+                final Matcher matchInheritDoc =", "+                    MATCH_INHERITDOC.matcher(line);", "-            if (matchInheritDoc.find()) {", "-                return true;", "+                if (matchInheritDoc.find()) {", "+                    javadocTag = true;", "+                    break;", "+                }", "-        return false;", "+        return javadocTag;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1e7ed5fbde1454ae46e0ae22e22b636", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportCheck.java", "commitBeforeChange": "044889b26a868b1b7200526ceeb40cdbe1e903fc", "commitAfterChange": "adebc9da6f1c59de41426400149d2da0339e797e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean isExempt(String classOrStaticMember)", "signatureAfterChange": "     private boolean isExempt(String classOrStaticMember)", "diff": ["+        boolean exempt = false;", "+", "-                return true;", "+                exempt = true;", "+                break;", "-                        return true;", "+                        exempt = true;", "+                        break;", "-        return false;", "+        return exempt;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1f6d08cbadfc345357c2ec3d6274acb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractDeclarationCollector.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "         LexicalFrame getIfContains(String nameToFind)", "signatureAfterChange": "         LexicalFrame getIfContains(String nameToFind)", "diff": ["+            LexicalFrame frame = null;", "+", "-                return this;", "+                frame = this;", "-                return parent.getIfContains(nameToFind);", "+                frame = parent.getIfContains(nameToFind);", "-            else {", "-                return null;", "-            }", "+            return frame;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce3eae5079ad9ceb7dbda9eadd1b3e9f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "c9346746dc9a27d40eaa453e0afb4b0d1391665d", "commitAfterChange": "12bd8334067b18d9d1ed5039dd4dc673f3a1f560", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private static boolean checkParams(DetailAST method)", "signatureAfterChange": "     private static boolean checkParams(DetailAST method)", "diff": ["+        boolean checkPassed = false;", "-        if (params.getChildCount() != 1) {", "-            return false;", "-        }", "-        final DetailAST paratype = params.getFirstChild()", "-            .findFirstToken(TokenTypes.TYPE);", "-        final DetailAST arrayDecl =", "-            paratype.findFirstToken(TokenTypes.ARRAY_DECLARATOR);", "-        if (arrayDecl == null) {", "-            return false;", "-        }", "-        final DetailAST arrayType = arrayDecl.getFirstChild();", "+        if (params.getChildCount() == 1) {", "+            final DetailAST paratype = params.getFirstChild().findFirstToken(TokenTypes.TYPE);", "+            final DetailAST arrayDecl = paratype.findFirstToken(TokenTypes.ARRAY_DECLARATOR);", "-        final FullIdent type = FullIdent.createFullIdent(arrayType);", "-        return \"String\".equals(type.getText())", "-                || \"java.lang.String\".equals(type.getText());", "+            if (arrayDecl != null) {", "+                final DetailAST arrayType = arrayDecl.getFirstChild();", "+                final FullIdent type = FullIdent.createFullIdent(arrayType);", "+                checkPassed = \"String\".equals(type.getText())", "+                        || \"java.lang.String\".equals(type.getText());", "+            }", "+        }", "+        return checkPassed;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a22bc94923f75309af2832fd61a967", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "343b75b252db9492ace4c4e5bfb36016e631c7a5", "commitAfterChange": "f9f60d3142533c3eebff775e8eb1159935faaba1", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private DetailAST getVarNameAST(DetailAST variableDefAST)", "signatureAfterChange": "     private static DetailAST getVarNameAST(DetailAST variableDefAST)", "diff": ["-    private DetailAST getVarNameAST(DetailAST variableDefAST)", "+    private static DetailAST getVarNameAST(DetailAST variableDefAST)", "+        DetailAST varNameAst = null;", "-                return nextSibling;", "+                varNameAst = nextSibling;", "+                break;", "-        return null;", "+        return varNameAst;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbea809a90a244d970b2f47acb487d02", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      @Override     public int compareTo(LocalizedMessage other)", "signatureAfterChange": "      @Override     public int compareTo(LocalizedMessage other)", "diff": ["+        int result = Integer.compare(getLineNo(), other.getLineNo());", "+", "-                return getMessage().compareTo(other.getMessage());", "+                result = getMessage().compareTo(other.getMessage());", "-            return Integer.compare(getColumnNo(), other.getColumnNo());", "+            else {", "+                result = Integer.compare(getColumnNo(), other.getColumnNo());", "+            }", "-        return Integer.compare(getLineNo(), other.getLineNo());", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e79fbb10f879735d12a65fa006a72e5f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "98a3157200a6b488a0f78b67b0741a2bd72d40fa", "commitAfterChange": "044889b26a868b1b7200526ceeb40cdbe1e903fc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     PkgControl locateFinest(final String forPkg)", "signatureAfterChange": "     PkgControl locateFinest(final String forPkg)", "diff": ["+        PkgControl finestMatch = null;", "-        // This algormithm should be improved to check for a trailing \".\"", "+        // This algorithm should be improved to check for a trailing \".\"", "-        if (!forPkg.startsWith(fullPackage)) {", "-            return null;", "-        }", "-", "-        // Check if any of the children match.", "-        for (PkgControl pc : children) {", "-            final PkgControl match = pc.locateFinest(forPkg);", "-            if (match != null) {", "-                return match;", "+        if (forPkg.startsWith(fullPackage)) {", "+            // If there won't be match so I am the best there is.", "+            finestMatch = this;", "+            // Check if any of the children match.", "+            for (PkgControl pc : children) {", "+                final PkgControl match = pc.locateFinest(forPkg);", "+                if (match != null) {", "+                    finestMatch = match;", "+                    break;", "+                }", "-", "-        // No match so I am the best there is.", "-        return this;", "+        return finestMatch;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eae3e5fdf00fa6fb3cf1f8511e6170bc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static String capitalize(final String name)", "signatureAfterChange": "     private static String capitalize(final String name)", "diff": ["-        if (name == null || name.length() == 0) {", "-            return name;", "-        }", "+        String setterName = name;", "-        // one is a capital one, since according to Javbeans spec", "+        // one is a capital one, since according to JavBeans spec", "-        if (name.length() > 1 && Character.isUpperCase(name.charAt(1))) {", "-            return name;", "+        if (name != null && name.length() > 0", "+            && (name.length() > 1 && !Character.isUpperCase(name.charAt(1))))", "+        {", "+            setterName = name.substring(0, 1).toUpperCase() + name.substring(1);", "-        return name.substring(0, 1).toUpperCase() + name.substring(1);", "+        return setterName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec15e1113dce21688f131124b71f7804", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "9241c0a692ed65fab3b3fdb3c4ff1c118794337c", "commitAfterChange": "4ee4d60e07a763be669173c3f45ed9b29eedca7c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean hasFallTruComment(DetailAST currentCase,             DetailAST nextCase)", "signatureAfterChange": "     private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase)", "diff": ["-    private boolean hasFallTruComment(DetailAST currentCase,", "-            DetailAST nextCase) {", "-", "+    private boolean hasFallThroughComment(DetailAST currentCase, DetailAST nextCase) {", "+        boolean allThroughComment = false;", "-            return true;", "+            allThroughComment = true;", "-", "-        /*", "-         * Handle:", "-         *    case 1:", "-         *    .....", "-         *    // FALLTHRU", "-         *    case 2:", "-         *    ....", "-         * and", "-         *    switch(i) {", "-         *    default:", "-         *    // FALLTHRU", "-         *    }", "-         */", "-        final int startLineNo = currentCase.getLineNo();", "-        for (int i = endLineNo - 2; i > startLineNo - 1; i--) {", "-            if (!lines[i].trim().isEmpty()) {", "-                return commentMatch(regExp, lines[i], i + 1);", "+        else {", "+            /*", "+             * Handle:", "+             *    case 1:", "+             *    .....", "+             *    // FALLTHRU", "+             *    case 2:", "+             *    ....", "+             * and", "+             *    switch(i) {", "+             *    default:", "+             *    // FALLTHRU", "+             *    }", "+             */", "+            final int startLineNo = currentCase.getLineNo();", "+            for (int i = endLineNo - 2; i > startLineNo - 1; i--) {", "+                if (!lines[i].trim().isEmpty()) {", "+                    allThroughComment = commentMatch(regExp, lines[i], i + 1);", "+                    break;", "+                }", "-", "-        // Well -- no relief comment found.", "-        return false;", "+        return allThroughComment;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec305a709f1f122d7f59dae07165608e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ScopeUtils.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static boolean isLocalVariableDef(DetailAST aAST)", "signatureAfterChange": "     public static boolean isLocalVariableDef(DetailAST aAST)", "diff": ["+        boolean localVariableDef = false;", "-            return type == TokenTypes.SLIST", "+            localVariableDef = type == TokenTypes.SLIST", "-            return parent.getType() == TokenTypes.LITERAL_CATCH;", "+            localVariableDef = parent.getType() == TokenTypes.LITERAL_CATCH;", "-        return false;", "+        return localVariableDef;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f894d3b6b9c58c9e67577b1803c0c92f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private Class<?> resolveQualifiedName(final String name)", "signatureAfterChange": "     private Class<?> resolveQualifiedName(final String name)", "diff": ["+        Class<?> classObj = null;", "-                return safeLoad(name);", "+                classObj = safeLoad(name);", "-            //Perhaps it's fully-qualified inner class", "-            final int dot = name.lastIndexOf('.');", "-            if (dot != -1) {", "-                final String innerName =", "-                    name.substring(0, dot) + \"$\" + name.substring(dot + 1);", "-                if (isLoadable(innerName)) {", "-                    return safeLoad(innerName);", "+            else {", "+                //Perhaps it's fully-qualified inner class", "+                final int dot = name.lastIndexOf('.');", "+                if (dot != -1) {", "+                    final String innerName =", "+                        name.substring(0, dot) + \"$\" + name.substring(dot + 1);", "+                    if (isLoadable(innerName)) {", "+                        classObj = safeLoad(innerName);", "+                    }", "-", "-        return null;", "+        return classObj;"]}]}
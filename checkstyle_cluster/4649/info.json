{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2d81c9f39864201bb686c58f92de6b6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03b66d7e1135f14bf9d037116fb2149f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private boolean matchesSkipRegex(DetailAST aMethodDef)", "signatureAfterChange": "     private boolean matchesSkipRegex(DetailAST methodDef)", "diff": ["-    private boolean matchesSkipRegex(DetailAST aMethodDef)", "+    private boolean matchesSkipRegex(DetailAST methodDef)", "-        if (mIgnoreMethodNamesRegex != null) {", "-            final DetailAST ident = aMethodDef.findFirstToken(TokenTypes.IDENT);", "+        if (ignoreMethodNamesRegex != null) {", "+            final DetailAST ident = methodDef.findFirstToken(TokenTypes.IDENT);", "-            final Matcher matcher = mIgnoreMethodNamesRegex.matcher(methodName);", "+            final Matcher matcher = ignoreMethodNamesRegex.matcher(methodName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cf61e3025d77d5d2c614f8c5475b2fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean checkParams(DetailAST aMethod)", "signatureAfterChange": "     private boolean checkParams(DetailAST method)", "diff": ["-    private boolean checkParams(DetailAST aMethod)", "+    private boolean checkParams(DetailAST method)", "-        final DetailAST params = aMethod.findFirstToken(TokenTypes.PARAMETERS);", "+        final DetailAST params = method.findFirstToken(TokenTypes.PARAMETERS);", "-        final DetailAST paramType = (params.getFirstChild())", "+        final DetailAST paratype = (params.getFirstChild())", "-            paramType.findFirstToken(TokenTypes.ARRAY_DECLARATOR);", "+            paratype.findFirstToken(TokenTypes.ARRAY_DECLARATOR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcc06750e06c26c32819ae9e0ae37342", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean checkLoop(final DetailAST aAST)", "signatureAfterChange": "     private boolean checkLoop(final DetailAST ast)", "diff": ["-    private boolean checkLoop(final DetailAST aAST)", "+    private boolean checkLoop(final DetailAST ast)", "-        if (aAST.getType() == TokenTypes.LITERAL_DO) {", "-            final DetailAST lparen = aAST.findFirstToken(TokenTypes.DO_WHILE);", "+        if (ast.getType() == TokenTypes.LITERAL_DO) {", "+            final DetailAST lparen = ast.findFirstToken(TokenTypes.DO_WHILE);", "-            final DetailAST rparen = aAST.findFirstToken(TokenTypes.RPAREN);", "+            final DetailAST rparen = ast.findFirstToken(TokenTypes.RPAREN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbfcba10f2eeb72aefbb248b6ac37cc0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/ScopeUtils.java", "commitBeforeChange": "5e0f360e7b7745a362bd7a655e98654a2ad36443", "commitAfterChange": "3813f1ccbf157f463c041ccfc462399845ddff6e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static boolean isLocalVariableDef(DetailAST aAST)", "signatureAfterChange": "     public static boolean isLocalVariableDef(DetailAST node)", "diff": ["-    public static boolean isLocalVariableDef(DetailAST aAST) {", "+    public static boolean isLocalVariableDef(DetailAST node) {", "-        if (aAST.getType() == TokenTypes.VARIABLE_DEF) {", "-            final DetailAST parent = aAST.getParent();", "+        if (node.getType() == TokenTypes.VARIABLE_DEF) {", "+            final DetailAST parent = node.getParent();", "-        if (aAST.getType() == TokenTypes.PARAMETER_DEF) {", "-            final DetailAST parent = aAST.getParent();", "+        if (node.getType() == TokenTypes.PARAMETER_DEF) {", "+            final DetailAST parent = node.getParent();"]}]}
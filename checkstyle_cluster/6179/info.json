{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3da14e47a79781d82e15c2514154880d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc1f1d066d56d1a7972604ef1e8e344", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "c6edc74a2cf7a5e2c9affef6d0e1e931f783b462", "commitAfterChange": "e76ae6ed8d34160d87b490f5f3ee92f7ba74f5aa", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void processEnd(DetailAST aAST)", "signatureAfterChange": "     private void processEnd(DetailAST aAST)", "diff": ["-                // In a nested Generic type, so can only be a '>' or ','", "-                if ((line.charAt(after) != '>') && (line.charAt(after) != ','))", "+                // In a nested Generic type, so can only be a '>' or ',' or '&'", "+", "+                // In case of several extends definitions:", "+                //", "+                //   class IntEnumValueType<E extends Enum<E> & IntEnum>", "+                //                                          ^", "+                //   should be whitespace if followed by & -+", "+                //", "+                int indexOfAmp = line.indexOf('&', after);", "+                if ((indexOfAmp != -1) && whitespaceBetween(after, indexOfAmp, line))", "+                {", "+                    if (indexOfAmp - after == 0)", "+                    {", "+                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"&\");", "+                    }", "+                    else if (indexOfAmp - after != 1)", "+                    {", "+                        log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                    }", "+                }", "+                else if ((line.charAt(after) != '>') && (line.charAt(after) != ','))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "410de81b306f8e26106ff3728d2b092e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java", "commitBeforeChange": "2a8aba9a54d2112b142a1b9e0c4e762e780155c1", "commitAfterChange": "7fa61f5c0b05fc44c9f55a23c816e8e072dcec0e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-//                else if (mInScope.size() == 0) {", "-//                    // don't check author/version for inner classes", "-//                    if (!mConfig.isAllowNoAuthor()", "-//                        && (MATCH_JAVADOC_AUTHOR.grep(cmt).length == 0)) {", "-//                        mMessages.add(lineNo, \"type.missingTag\", \"@author\");", "-//                    }", "-//                    if (mConfig.isRequireVersion()", "-//                        && (MATCH_JAVADOC_VERSION.grep(cmt).length == 0)) {", "-//                        mMessages.add(lineNo, \"type.missingTag\", \"@version\");", "-//                    }", "-//                }", "+                else if (ScopeUtils.isOuterMostType(aAST)) {", "+                    // don't check author/version for inner classes", "+                    if (!mAllowNoAuthor", "+                        && (MATCH_JAVADOC_AUTHOR.grep(cmt).length == 0))", "+                    {", "+                        log(aAST.getLineNo(), \"type.missingTag\", \"@author\");", "+                    }", "+                    ", "+                    if (mRequireVersion", "+                        && (MATCH_JAVADOC_VERSION.grep(cmt).length == 0))", "+                    {", "+                        log(aAST.getLineNo(), \"type.missingTag\", \"@version\");", "+                    }", "+                }"]}]}
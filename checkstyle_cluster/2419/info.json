{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e08ea6fa047ad4180fa47dc8ec8bd894", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1604931835987958aeae988afbb3bb31", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "897c4164bd289ea45d5c600f11816f4379bd4421", "commitAfterChange": "9ce0ceb04ae90185f95643fb4484e525bcb0d3df", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkTag(             int aLineNo,             String[] aCmt,             String aTag,             RE aTagRE,             RE aFormatRE,             String aFormat)", "signatureAfterChange": "     private void checkTag(int aLineNo, Vector aTags, String aTag,                           RE aFormatRE, String aFormat)", "diff": ["-    private void checkTag(", "-            int aLineNo,", "-            String[] aCmt,", "-            String aTag,", "-            RE aTagRE,", "-            RE aFormatRE,", "-            String aFormat)", "+    private void checkTag(int aLineNo, Vector aTags, String aTag,", "+                          RE aFormatRE, String aFormat)", "-        if (aTagRE == null) {", "+        if (aFormatRE == null) {", "-        for (int i = 0; i < aCmt.length; i++) {", "-            final String s = aCmt[i];", "-            if (aTagRE.match(s)) {", "-                tagCount += 1;", "-                final int contentStart = aTagRE.getParenStart(1);", "-                final String content = s.substring(contentStart);", "-                if (!aFormatRE.match(content)) {", "-                    log(aLineNo, \"type.tagFormat\", aTag, aFormat);", "+        for (int i = aTags.size() - 1; i >= 0; i--) {", "+            final JavadocTag tag = (JavadocTag) aTags.get(i);", "+            if (tag.getTag().equals(aTag)) {", "+                tagCount++;", "+                if (!aFormatRE.match(tag.getArg1())) {", "+                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);", "-", "-            log(aLineNo, \"type.missingTag\", aTag);", "+            log(aLineNo, \"type.missingTag\", \"@\" + aTag);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17bed6256c68c5867e572bce538b18bd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void checkTypeParamTag(final int aLineNo,             final List<JavadocTag> aTags, final String aTypeParamName)", "signatureAfterChange": "     private void checkTypeParamTag(final int lineNo,             final List<JavadocTag> tags, final String typeParamName)", "diff": ["-    private void checkTypeParamTag(final int aLineNo,", "-            final List<JavadocTag> aTags, final String aTypeParamName)", "+    private void checkTypeParamTag(final int lineNo,", "+            final List<JavadocTag> tags, final String typeParamName)", "-        for (int i = aTags.size() - 1; i >= 0; i--) {", "-            final JavadocTag tag = aTags.get(i);", "+        for (int i = tags.size() - 1; i >= 0; i--) {", "+            final JavadocTag tag = tags.get(i);", "-                && (tag.getArg1().indexOf(\"<\" + aTypeParamName + \">\") == 0))", "+                && (tag.getArg1().indexOf(\"<\" + typeParamName + \">\") == 0))", "-            log(aLineNo, \"type.missingTag\",", "-                JavadocTagInfo.PARAM.getText() + \" <\" + aTypeParamName + \">\");", "+            log(lineNo, \"type.missingTag\",", "+                JavadocTagInfo.PARAM.getText() + \" <\" + typeParamName + \">\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40252177f8dd5f7e97a5547882b98df2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkTag(             int lineNo,             String[] comment,             String tag,             Pattern tagRE,             Pattern formatRE,             String format)", "signatureAfterChange": "     private void checkTag(             int lineNo,             String[] comment,             String tagName,             Pattern tagRegexp,             Pattern formatRE,             String format)", "diff": ["-            String tag,", "-            Pattern tagRE,", "+            String tagName,", "+            Pattern tagRegexp,", "-        if (tagRE == null) {", "+        if (tagRegexp == null) {", "-            final Matcher matcher = tagRE.matcher(s);", "+            final Matcher matcher = tagRegexp.matcher(s);", "-                    log(lineNo + i - comment.length, TAG_FORMAT, tag,", "+                    log(lineNo + i - comment.length, TAG_FORMAT, tagName,", "-                    logTag(lineNo + i - comment.length, tag, content);", "+                    logTag(lineNo + i - comment.length, tagName, content);", "-            log(lineNo, MISSING_TAG, tag);", "+            log(lineNo, MISSING_TAG, tagName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7d1323d663abc4d8e8c1510b3e8769", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkTag(             int aLineNo,             String[] aComment,             String aTag,             Pattern aTagRE,             Pattern aFormatRE,             String aFormat)", "signatureAfterChange": "     private void checkTag(             int lineNo,             String[] comment,             String tag,             Pattern tagRE,             Pattern formatRE,             String format)", "diff": ["-            int aLineNo,", "-            String[] aComment,", "-            String aTag,", "-            Pattern aTagRE,", "-            Pattern aFormatRE,", "-            String aFormat)", "+            int lineNo,", "+            String[] comment,", "+            String tag,", "+            Pattern tagRE,", "+            Pattern formatRE,", "+            String format)", "-        if (aTagRE == null) {", "+        if (tagRE == null) {", "-        for (int i = 0; i < aComment.length; i++) {", "-            final String s = aComment[i];", "-            final Matcher matcher = aTagRE.matcher(s);", "+        for (int i = 0; i < comment.length; i++) {", "+            final String s = comment[i];", "+            final Matcher matcher = tagRE.matcher(s);", "-                if ((aFormatRE != null) && !aFormatRE.matcher(content).find()) {", "-                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,", "-                        aFormat);", "+                if ((formatRE != null) && !formatRE.matcher(content).find()) {", "+                    log(lineNo + i - comment.length, \"type.tagFormat\", tag,", "+                        format);", "-                    logTag(aLineNo + i - aComment.length, aTag, content);", "+                    logTag(lineNo + i - comment.length, tag, content);", "-            log(aLineNo, \"type.missingTag\", aTag);", "+            log(lineNo, \"type.missingTag\", tag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6d3b598156341826b10691648be15b0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "553e36c2ea38f4f3f30f0e06163f2e1e1dbdd788", "commitAfterChange": "755eda4d684e71ea18bed69646e07140310b67fc", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void checkTag(             int lineNo,             String[] comment,             String tagName,             Pattern tagRegexp,             Pattern formatRE,             String format)", "signatureAfterChange": "     private void checkTag(int lineNo, String... comment)", "diff": ["-    private void checkTag(", "-            int lineNo,", "-            String[] comment,", "-            String tagName,", "-            Pattern tagRegexp,", "-            Pattern formatRE,", "-            String format) {", "-        if (tagRegexp == null) {", "+    private void checkTag(int lineNo, String... comment) {", "+        if (tagRE == null) {", "-            final Matcher matcher = tagRegexp.matcher(s);", "+            final Matcher matcher = tagRE.matcher(s);", "-                if (formatRE != null && !formatRE.matcher(content).find()) {", "-                    log(lineNo + i - comment.length, TAG_FORMAT, tagName,", "-                        format);", "+                if (tagFormatRE != null && !tagFormatRE.matcher(content).find()) {", "+                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);", "-                    logTag(lineNo + i - comment.length, tagName, content);", "+                    logTag(lineNo + i - comment.length, tag, content);", "-", "-            log(lineNo, MISSING_TAG, tagName);", "+            log(lineNo, MISSING_TAG, tag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb8f08ffe4ccd1410d811ec57ccd5464", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkTag(int aLineNo, List<JavadocTag> aTags, String aTag,                           Pattern aFormatPattern, String aFormat)", "signatureAfterChange": "     private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,                           Pattern formatPattern, String format)", "diff": ["-    private void checkTag(int aLineNo, List<JavadocTag> aTags, String aTag,", "-                          Pattern aFormatPattern, String aFormat)", "+    private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,", "+                          Pattern formatPattern, String format)", "-        if (aFormatPattern == null) {", "+        if (formatPattern == null) {", "-        for (int i = aTags.size() - 1; i >= 0; i--) {", "-            final JavadocTag tag = aTags.get(i);", "-            if (tag.getTagName().equals(aTag)) {", "+        for (int i = tags.size() - 1; i >= 0; i--) {", "+            final JavadocTag tag = tags.get(i);", "+            if (tag.getTagName().equals(tagName)) {", "-                if (!aFormatPattern.matcher(tag.getArg1()).find()) {", "-                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);", "+                if (!formatPattern.matcher(tag.getArg1()).find()) {", "+                    log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);", "-            log(aLineNo, \"type.missingTag\", \"@\" + aTag);", "+            log(lineNo, \"type.missingTag\", \"@\" + tagName);"]}]}
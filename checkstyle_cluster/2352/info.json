{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5065ce320c824763983a60b554fa2d93", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2aec68c92bfa3c7e18fe3f231509b680", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "28a4f2fe029422414814eeb6858f0b9c0cef7039", "commitAfterChange": "40f4c37a21b1c8444f39f12c5f92e79af10be34f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void dumpStats(long aStart, long aEndReading, long aEndSearching)", "signatureAfterChange": "     private void dumpStats(long aStart, long aEndReading, long aEndSearching)", "diff": ["-        if (LOG.isDebugEnabled()) {", "-            final long cacheLookups = mCacheHits + mCacheMisses;", "+        if (LOG.isInfoEnabled()) {", "-            LOG.debug(\"cache hits = \" + mCacheHits + \"/\" + cacheLookups);", "-            LOG.debug(\"loc = \" + mLoc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f64df09fee667d559ca800b8a278fa1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "commitAfterChange": "289ef67e9e9ee424723b8aa22ae7a6d31f126d23", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "signatureAfterChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "diff": ["-        // calculate the previous line length without trailing whitespace. Need", "-        // to handle the case where there is no previous line, cause the line", "-        // being check is the first line in the file.", "-        final int prevLineLen = brace.getLineNo() == 1", "-            ? maxLineLength", "-            : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));", "-", "-                validateEol(brace, braceLine, prevLineLen);", "+                validateEol(brace, braceLine);", "-                validateNewLinePosion(brace, startToken, braceLine, prevLineLen);", "+                validateNewLinePosion(brace, startToken, braceLine);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8005a00f4125aae54d4288f1bf0ee717", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63613ffd8197930d92a50ad54253fe9d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheckTest.java", "commitBeforeChange": "27149f3504a2f350b74f456a9bffbae76a460060", "commitAfterChange": "5ede09997c283b4c418f0f540848e006be04fa87", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testIgnorePrimitiveTypesParameters() throws Exception", "signatureAfterChange": "      @Test     public void testIgnorePrimitiveTypesParameters() throws Exception", "diff": ["-            \"6:22: Parameter k should be final.\",", "-            \"7:15: Parameter s should be final.\",", "-            \"7:25: Parameter o should be final.\",", "-            \"8:15: Parameter array should be final.\",", "-            \"9:31: Parameter s should be final.\",", "-            \"10:22: Parameter l should be final.\",", "-            \"10:32: Parameter s should be final.\",", "+            \"6:22: \" + getCheckMessage(MSG_KEY, \"k\"),", "+            \"7:15: \" + getCheckMessage(MSG_KEY, \"s\"),", "+            \"7:25: \" + getCheckMessage(MSG_KEY, \"o\"),", "+            \"8:15: \" + getCheckMessage(MSG_KEY, \"array\"),", "+            \"9:31: \" + getCheckMessage(MSG_KEY, \"s\"),", "+            \"10:22: \" + getCheckMessage(MSG_KEY, \"l\"),", "+            \"10:32: \" + getCheckMessage(MSG_KEY, \"s\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8439f0502236bd70f6466e9855cee36f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java", "commitBeforeChange": "df5e519a3d2d6a468558161e1e61ff4634e7b533", "commitAfterChange": "09a7ca60414ea04b64f45bb190eaa26c767086be", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testStyleExpanded() throws Exception", "signatureAfterChange": "      @Test     public void testStyleExpanded() throws Exception", "diff": ["-            \"5: Annotation style must be 'EXPANDED'.\",", "-            \"12: Annotation style must be 'EXPANDED'.\",", "-            \"20: Annotation style must be 'EXPANDED'.\",", "-            \"26: Annotation style must be 'EXPANDED'.\",", "-            \"39: Annotation style must be 'EXPANDED'.\",", "-            \"41: Annotation style must be 'EXPANDED'.\",", "-            \"58: Annotation style must be 'EXPANDED'.\",", "+            \"5: \" + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, \"EXPANDED\"),", "+            \"12: \" + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, \"EXPANDED\"),", "+            \"20: \" + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, \"EXPANDED\"),", "+            \"26: \" + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, \"EXPANDED\"),", "+            \"39: \" + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, \"EXPANDED\"),", "+            \"41: \" + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, \"EXPANDED\"),", "+            \"58: \" + getCheckMessage(MSG_KEY_ANNOTATION_INCORRECT_STYLE, \"EXPANDED\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0b624c8bcb54b1b43fe2b2f0c0a1c32", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testMissingBraces() throws Exception", "signatureAfterChange": "      @Test     public void testMissingBraces() throws Exception", "diff": ["-            \"12:1: '{' should be on the previous line.\",", "-            \"15:5: '{' should be on the previous line.\",", "-            \"21:5: '{' should be on the previous line.\",", "-            \"34:5: '{' should be on the previous line.\",", "-            \"51:5: '{' should be on the previous line.\",", "-            \"69:5: '{' should be on the previous line.\",", "-            \"105:5: '{' should be on the previous line.\",", "+            \"12:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"15:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"21:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"34:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"51:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"69:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"105:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),"]}]}
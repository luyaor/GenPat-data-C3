{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d29bf75d0c7966d5472564b2fd6bafaa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35f7c2d32277e5b9d9c027797ba93f16", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java", "commitBeforeChange": "7b0388ee96bf14872ae095da85738af97ef857d5", "commitAfterChange": "c74d7b7549dffa19bea50b0b9207706174d20c0b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Override     protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)         throws Exception", "signatureAfterChange": "      @Override     protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)         throws Exception", "diff": ["-        final LineNumberReader lnr =", "-            new LineNumberReader(new InputStreamReader(bais, StandardCharsets.UTF_8));", "+        try (final LineNumberReader lnr = new LineNumberReader(", "+                new InputStreamReader(bais, StandardCharsets.UTF_8))) {", "-        for (int i = 0; i < expected.length; i++) {", "-            final String expectedResult = messageFileName + \":\" + expected[i];", "-            final String actual = lnr.readLine();", "-            assertEquals(\"error message \" + i, expectedResult, actual);", "+            for (int i = 0; i < expected.length; i++) {", "+                final String expectedResult = messageFileName + \":\" + expected[i];", "+                final String actual = lnr.readLine();", "+                assertEquals(\"error message \" + i, expectedResult, actual);", "+            }", "+", "+            assertTrue(\"unexpected output: \" + lnr.readLine(),", "+                    expected.length >= errs);", "-", "-        assertTrue(\"unexpected output: \" + lnr.readLine(),", "-                   expected.length >= errs);", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f9ea2ff42fb0efeb0b6b7d9f91af59d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "7e1062dea1fae14b90ae6461625c259ed944d1e4", "commitAfterChange": "f5e4d9b42a3ebda0adc7f7616f1b00c189f20733", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      void verify(Checker aC,             File[] aProcessedFiles,             String aMessageFileName,             String[] aExpected,             Integer... aWarnsExpected)         throws Exception", "signatureAfterChange": "      void verify(Checker aC,             File[] aProcessedFiles,             String aMessageFileName,             String[] aExpected,             Integer... aWarnsExpected)         throws Exception", "diff": ["-        final LineNumberReader lnr =", "-            new LineNumberReader(new InputStreamReader(localStream, StandardCharsets.UTF_8));", "+        try (final LineNumberReader lnr = new LineNumberReader(", "+                new InputStreamReader(localStream, StandardCharsets.UTF_8))) {", "-        for (int i = 0; i < aExpected.length; i++) {", "-            final String expected = aMessageFileName + \":\" + aExpected[i];", "-            String actual = lnr.readLine();", "-            assertEquals(\"error message \" + i, expected, actual);", "-            String parseInt = removeDeviceFromPathOnWindows(actual);", "-            parseInt = parseInt.substring(parseInt.indexOf(':') + 1);", "-            parseInt = parseInt.substring(0, parseInt.indexOf(':'));", "-            int lineNumber = Integer.parseInt(parseInt);", "-\t\t\tInteger integer = Arrays.asList(aWarnsExpected).contains(lineNumber) ? lineNumber : 0;", "-            assertEquals(\"error message \" + i, (long) integer, lineNumber);", "+            for (int i = 0; i < aExpected.length; i++) {", "+                final String expected = aMessageFileName + \":\" + aExpected[i];", "+                String actual = lnr.readLine();", "+                assertEquals(\"error message \" + i, expected, actual);", "+                String parseInt = removeDeviceFromPathOnWindows(actual);", "+                parseInt = parseInt.substring(parseInt.indexOf(':') + 1);", "+                parseInt = parseInt.substring(0, parseInt.indexOf(':'));", "+                int lineNumber = Integer.parseInt(parseInt);", "+                Integer integer = Arrays.asList(aWarnsExpected).contains(lineNumber) ? lineNumber : 0;", "+                assertEquals(\"error message \" + i, (long) integer, lineNumber);", "+            }", "+", "+            assertEquals(\"unexpected output: \" + lnr.readLine(),", "+                    aExpected.length, errs);", "-", "-        assertEquals(\"unexpected output: \" + lnr.readLine(),", "-                     aExpected.length, errs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e32fef2ffa09c0a628087c760527d37f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "7b0388ee96bf14872ae095da85738af97ef857d5", "commitAfterChange": "c74d7b7549dffa19bea50b0b9207706174d20c0b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           String messageFileName,                           String... expected)             throws Exception", "diff": ["-        final LineNumberReader lnr =", "-                new LineNumberReader(new InputStreamReader(bais, StandardCharsets.UTF_8));", "+        try (final LineNumberReader lnr = new LineNumberReader(", "+                new InputStreamReader(bais, StandardCharsets.UTF_8))) {", "-        for (int i = 0; i < expected.length; i++) {", "-            final String expectedResult = messageFileName + \":\" + expected[i];", "-            final String actual = lnr.readLine();", "-            assertEquals(\"error message \" + i, expectedResult, actual);", "+            for (int i = 0; i < expected.length; i++) {", "+                final String expectedResult = messageFileName + \":\" + expected[i];", "+                final String actual = lnr.readLine();", "+                assertEquals(\"error message \" + i, expectedResult, actual);", "+            }", "+", "+            assertEquals(\"unexpected output: \" + lnr.readLine(),", "+                    expected.length, errs);", "-", "-        assertEquals(\"unexpected output: \" + lnr.readLine(),", "-                expected.length, errs);"]}]}
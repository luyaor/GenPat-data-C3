{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01e56218612ccc163ffcef15f6809a0c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dae8c8609fc5e2f78c51aba1c472b9d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatter.java", "commitBeforeChange": "1c16dc90c24f098731284f1b44ddb4b869dd83eb", "commitAfterChange": "5a2b09b7a3b5313f94eeb39d40d04058ae400cf5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private static String getCheckShortName(AuditEvent event)", "signatureAfterChange": "     private static String getCheckShortName(AuditEvent event)", "diff": ["-        return checkFullName.substring(checkFullName.lastIndexOf('.') + 1,", "-            checkFullName.lastIndexOf(\"Check\"));", "+        final String checkShortName;", "+        final int lastDotIndex = checkFullName.lastIndexOf('.');", "+        if (lastDotIndex == -1) {", "+            if (checkFullName.endsWith(SUFFIX)) {", "+                checkShortName = checkFullName.substring(0, checkFullName.lastIndexOf(SUFFIX));", "+            }", "+            else {", "+                checkShortName = checkFullName.substring(0, checkFullName.length());", "+            }", "+        }", "+        else {", "+            if (checkFullName.endsWith(SUFFIX)) {", "+                checkShortName = checkFullName.substring(lastDotIndex + 1,", "+                    checkFullName.lastIndexOf(SUFFIX));", "+            }", "+            else {", "+                checkShortName = checkFullName.substring(lastDotIndex + 1, checkFullName.length());", "+            }", "+        }", "+        return checkShortName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ef810ab443b2ad5bcdbcf54fce8730b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractHeaderCheck.java", "commitBeforeChange": "510bf2e6a7dd6f7da8a386fb0e33bac500fae297", "commitAfterChange": "d1a297476448ea9feec80af04416f198dc462bca", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setHeaderFile(String aFileName)         throws ConversionException", "signatureAfterChange": "     public void setHeaderFile(String aFileName)         throws ConversionException", "diff": ["+        checkHeaderNotInitialized();", "+", "+        Reader headerReader = null;", "-            final LineNumberReader lnr =", "-                    new LineNumberReader(new FileReader(aFileName));", "-            final ArrayList lines = new ArrayList();", "-            while (true) {", "-                final String l = lnr.readLine();", "-                if (l == null) {", "-                    break;", "-                }", "-                lines.add(l);", "-            }", "-            mHeaderLines = (String[]) lines.toArray(new String[0]);", "+            headerReader = new FileReader(aFileName);", "+            loadHeader(headerReader);", "+        finally {", "+            if (headerReader != null) {", "+                try {", "+                    headerReader.close();", "+                }", "+                catch (IOException ex) {", "+                    throw new ConversionException(", "+                            \"unable to close header file \" + aFileName, ex);", "+                }", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f894d3b6b9c58c9e67577b1803c0c92f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "03f41815802b1ce6a0ca906c9f28c5a98344a932", "commitAfterChange": "0da1e4d980420f6abb465af441e5ced254698273", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private Class<?> resolveQualifiedName(final String name)", "signatureAfterChange": "     private Class<?> resolveQualifiedName(final String name)", "diff": ["+        Class<?> classObj = null;", "-                return safeLoad(name);", "+                classObj = safeLoad(name);", "-            //Perhaps it's fully-qualified inner class", "-            final int dot = name.lastIndexOf('.');", "-            if (dot != -1) {", "-                final String innerName =", "-                    name.substring(0, dot) + \"$\" + name.substring(dot + 1);", "-                if (isLoadable(innerName)) {", "-                    return safeLoad(innerName);", "+            else {", "+                //Perhaps it's fully-qualified inner class", "+                final int dot = name.lastIndexOf('.');", "+                if (dot != -1) {", "+                    final String innerName =", "+                        name.substring(0, dot) + \"$\" + name.substring(dot + 1);", "+                    if (isLoadable(innerName)) {", "+                        classObj = safeLoad(innerName);", "+                    }", "-", "-        return null;", "+        return classObj;"]}]}
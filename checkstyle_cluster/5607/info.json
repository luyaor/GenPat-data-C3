{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b355686b2a0cee3c966224aa749ee51", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d68c654318c238bda86db4425f0c440", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public final void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public final void leaveToken(DetailAST ast)", "diff": ["-    public final void leaveToken(DetailAST aAST)", "+    public final void leaveToken(DetailAST ast)", "-        if ((aAST.getType() == TokenTypes.CLASS_DEF)", "-            || (aAST.getType() == TokenTypes.ENUM_DEF))", "+        if ((ast.getType() == TokenTypes.CLASS_DEF)", "+            || (ast.getType() == TokenTypes.ENUM_DEF))", "-            int dotIdx = mCurrentClass.lastIndexOf(\"$\");", "+            int dotIdx = currentClass.lastIndexOf(\"$\");", "-                dotIdx = mCurrentClass.lastIndexOf(\".\");", "+                dotIdx = currentClass.lastIndexOf(\".\");", "-                mCurrentClass = \"\";", "+                currentClass = \"\";", "-                mCurrentClass = mCurrentClass.substring(0, dotIdx);", "+                currentClass = currentClass.substring(0, dotIdx);", "-            mTypeParams.pop();", "+            typeParams.pop();", "-        else if (aAST.getType() == TokenTypes.METHOD_DEF) {", "-            mTypeParams.pop();", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            typeParams.pop();", "-        else if ((aAST.getType() != TokenTypes.PACKAGE_DEF)", "-                 && (aAST.getType() != TokenTypes.IMPORT))", "+        else if ((ast.getType() != TokenTypes.PACKAGE_DEF)", "+                 && (ast.getType() != TokenTypes.IMPORT))", "-            leaveAST(aAST);", "+            leaveAST(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0161c98521b74f9ff70dc3421f458d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "6e96026ec6d95fc5eadd3044cab91c24c73c8e0c", "commitAfterChange": "e00c478dd61d9d883e41b500b780ab217582c2e7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        DetailAST theAst = aAST;", "-        if (aAST.getType() != TokenTypes.RPAREN) {", "-            if ((aAST.getType() == TokenTypes.CTOR_CALL)", "-                || (aAST.getType() == TokenTypes.SUPER_CTOR_CALL))", "+        if (theAst.getType() != TokenTypes.RPAREN) {", "+            if ((theAst.getType() == TokenTypes.CTOR_CALL)", "+                || (theAst.getType() == TokenTypes.SUPER_CTOR_CALL))", "-                aAST = aAST.getFirstChild();", "+                theAst = theAst.getFirstChild();", "-            if (!isPreceedsEmptyForInit(aAST)) {", "-                processLeft(aAST);", "+            if (!isPreceedsEmptyForInit(theAst)) {", "+                processLeft(theAst);", "-        else if ((aAST.getParent() == null)", "-                 || (aAST.getParent().getType() != TokenTypes.TYPECAST)", "-                 || (aAST.getParent().findFirstToken(TokenTypes.RPAREN)", "-                     != aAST))", "+        else if ((theAst.getParent() == null)", "+                 || (theAst.getParent().getType() != TokenTypes.TYPECAST)", "+                 || (theAst.getParent().findFirstToken(TokenTypes.RPAREN)", "+                     != theAst))", "-            if (!isFollowsEmptyForIterator(aAST)) {", "-                processRight(aAST);", "+            if (!isFollowsEmptyForIterator(theAst)) {", "+                processRight(theAst);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c78cc560dc67496b033910fc1e6917f2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08925ba2366496834674b35c1d8d3a12", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "b3133035a4fa0e086dfb0dfbefbc7f1540521bbc", "commitAfterChange": "add2bdfb27494bff5fa9c305d9782f57c6170b18", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 67, "signatureBeforeChange": "         public AuditListener createListener(Task aTask)             throws ClassNotFoundException, InstantiationException,             IllegalAccessException, IOException", "signatureAfterChange": "         public AuditListener createListener(Task aTask)             throws IOException", "diff": ["-            throws ClassNotFoundException, InstantiationException,", "-            IllegalAccessException, IOException", "+            throws IOException", "-            final Class clazz = Class.forName(mClassName);", "-            final AuditListener listener = (AuditListener) clazz.newInstance();", "-            listener.setOutputStream(createOutputStream(aTask));", "-            return listener;", "+            if (E_XML.equals(mFormatterType.getValue())) {", "+                return createXMLLogger(aTask);", "+            }", "+            else {", "+                return createDefaultLogger(aTask);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4ecad90e0d005d1d3960c54eb1a946e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/BaseCheckTestCase.java", "commitBeforeChange": "e952d4dff48ef64b24d39649b8e2f0dc6369f3fd", "commitAfterChange": "cff42d4cd7a89827e0454b7c2d0551c820156113", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      protected Checker createChecker(CheckConfiguration aCheckConfig)         throws Exception", "signatureAfterChange": "      protected Checker createChecker(Configuration aConfig)         throws Exception", "diff": ["-    protected Checker createChecker(CheckConfiguration aCheckConfig)", "+    protected Checker createChecker(Configuration aConfig)", "-        final Checker c = new Checker(new GlobalProperties(mProps, mStream),", "-                                      new CheckConfiguration[] {aCheckConfig});", "-        final AuditListener listener = new BriefLogger(mStream);", "-        c.addListener(listener);", "-        return c;", "+        throw new IllegalStateException(\"not implemented yet\");", "+//        final DefaultConfiguration dc = new DefaultConfiguration(\"root\");", "+//        dc.addChild(aConfig);", "+//        final Checker c = new Checker();", "+//        c.configure(aConfig);", "+//        c.addListener(new BriefLogger(mStream));", "+//        return c;"]}]}
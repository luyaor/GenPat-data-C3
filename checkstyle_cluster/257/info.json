{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f6ecd701d70811990d7043008863f2c", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43d19e6456b283b51a1b81931535abba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheckTest.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Override     protected void verify(Checker aC,                           File[] aProcessedFiles,                           String aMessageFileName,                           String[] aExpected)         throws Exception", "signatureAfterChange": "      @Override     protected void verify(Checker c,                           File[] processedFiles,                           String messageFileName,                           String[] expected)         throws Exception", "diff": ["-    protected void verify(Checker aC,", "-                          File[] aProcessedFiles,", "-                          String aMessageFileName,", "-                          String[] aExpected)", "+    protected void verify(Checker c,", "+                          File[] processedFiles,", "+                          String messageFileName,", "+                          String[] expected)", "-        mStream.flush();", "+        stream.flush();", "-        Collections.addAll(theFiles, aProcessedFiles);", "-        final int errs = aC.process(theFiles);", "+        Collections.addAll(theFiles, processedFiles);", "+        final int errs = c.process(theFiles);", "-            new ByteArrayInputStream(mBAOS.toByteArray());", "+            new ByteArrayInputStream(BAOS.toByteArray());", "-        for (int i = 0; i < aExpected.length; i++) {", "-            final String expected = aMessageFileName + \":\" + aExpected[i];", "+        for (int i = 0; i < expected.length; i++) {", "+            final String expectedResult = messageFileName + \":\" + expected[i];", "-            assertEquals(\"error message \" + i, expected, actual);", "+            assertEquals(\"error message \" + i, expectedResult, actual);", "-                   aExpected.length >= errs);", "+                   expected.length >= errs);", "-        aC.destroy();", "+        c.destroy();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a57e60cb2ea0c4ebe57f66ad15800c7a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      protected void verify(Checker aC,                           File[] aProcessedFiles,                           String aMessageFileName,                           String[] aExpected)             throws Exception", "signatureAfterChange": "      protected void verify(Checker c,                           File[] processedFiles,                           String messageFileName,                           String[] expected)             throws Exception", "diff": ["-    protected void verify(Checker aC,", "-                          File[] aProcessedFiles,", "-                          String aMessageFileName,", "-                          String[] aExpected)", "+    protected void verify(Checker c,", "+                          File[] processedFiles,", "+                          String messageFileName,", "+                          String[] expected)", "-        mStream.flush();", "+        stream.flush();", "-        Collections.addAll(theFiles, aProcessedFiles);", "-        final int errs = aC.process(theFiles);", "+        Collections.addAll(theFiles, processedFiles);", "+        final int errs = c.process(theFiles);", "-                new ByteArrayInputStream(mBAOS.toByteArray());", "+                new ByteArrayInputStream(BAOS.toByteArray());", "-        for (int i = 0; i < aExpected.length; i++) {", "-            final String expected = aMessageFileName + \":\" + aExpected[i];", "+        for (int i = 0; i < expected.length; i++) {", "+            final String expectedResult = messageFileName + \":\" + expected[i];", "-            assertEquals(\"error message \" + i, expected, actual);", "+            assertEquals(\"error message \" + i, expectedResult, actual);", "-                aExpected.length, errs);", "-        aC.destroy();", "+                expected.length, errs);", "+        c.destroy();"]}]}
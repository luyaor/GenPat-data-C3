{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57bfa004bbb68222f6ad9d568ed4df57", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a1d56d708b6648b8ebd3bf6fc7cd3ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final DetailAST nextToken = aAST.getNextSibling();", "+        final DetailAST nextToken = ast.getNextSibling();", "-            final int astType = aAST.getType();", "+            final int astType = ast.getType();", "-                if (isTypeField(aAST) && !hasEmptyLineAfter(aAST)) {", "-                    if (mAllowNoEmptyLineBetweenFields", "+                if (iastypeField(ast) && !hasEmptyLineAfter(ast)) {", "+                    if (allowNoEmptyLineBetweenFields", "-                    else if (!mAllowNoEmptyLineBetweenFields) {", "+                    else if (!allowNoEmptyLineBetweenFields) {", "-                if (astType != nextToken.getType() && !hasEmptyLineAfter(aAST)", "-                    || (aAST.getLineNo() > 1 && !hasEmptyLineBefore(aAST)", "-                            && aAST.getPreviousSibling() == null))", "+                if (astType != nextToken.getType() && !hasEmptyLineAfter(ast)", "+                    || (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)", "+                            && ast.getPreviousSibling() == null))", "-                if (aAST.getLineNo() > 1 && !hasEmptyLineBefore(aAST)) {", "-                    log(aAST.getLineNo(), \"empty.line.separator\", aAST.getText());", "+                if (ast.getLineNo() > 1 && !hasEmptyLineBefore(ast)) {", "+                    log(ast.getLineNo(), \"empty.line.separator\", ast.getText());", "-                if (!hasEmptyLineAfter(aAST)) {", "+                if (!hasEmptyLineAfter(ast)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85f410f7b5a7abc80ee732e0a5d154c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int type = aAST.getType();", "-        final boolean surrounded = isSurrounded(aAST);", "-        final DetailAST parent = aAST.getParent();", "+        final int type = ast.getType();", "+        final boolean surrounded = isSurrounded(ast);", "+        final DetailAST parent = ast.getParent();", "-            mParentToSkip = aAST.getParent();", "-            log(aAST, \"unnecessary.paren.ident\", aAST.getText());", "+            parentToSkip = ast.getParent();", "+            log(ast, \"unnecessary.paren.ident\", ast.getText());", "-            mParentToSkip = aAST.getParent();", "+            parentToSkip = ast.getParent();", "-                log(aAST, \"unnecessary.paren.string\",", "-                    chopString(aAST.getText()));", "+                log(ast, \"unnecessary.paren.string\",", "+                    chopString(ast.getText()));", "-                log(aAST, \"unnecessary.paren.literal\", aAST.getText());", "+                log(ast, \"unnecessary.paren.literal\", ast.getText());", "-            mAssignDepth++;", "-            final DetailAST last = aAST.getLastChild();", "+            assignDepth++;", "+            final DetailAST last = ast.getLastChild();", "-                log(aAST, \"unnecessary.paren.assign\");", "+                log(ast, \"unnecessary.paren.assign\");"]}]}
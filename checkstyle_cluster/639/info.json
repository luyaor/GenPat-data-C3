{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "506248e310c3f3fb9ea50cfff4ed0cd7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f7c71feff14aa85ae8588b68f6a5298", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java", "commitBeforeChange": "a244f057057913003dd17e952ee76a844f0fb76b", "commitAfterChange": "dc0a1a2fccdf6a642b05dee98206c7dd487162bd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void customImportTest_3() throws IOException, Exception", "signatureAfterChange": "      @Test     public void customImportTest_3() throws IOException, Exception", "diff": ["-                \"4: \" + getCheckMessage(clazz, msgLex, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "-                \"8: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.StringTokenizer\"),", "-                \"9: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.*\"),", "-                \"10: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),", "-                \"11: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.concurrent.*\"),", "-                \"14: \" + getCheckMessage(clazz, msgSeparator, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),", "-                \"16: \" + getCheckMessage(clazz, msgOrder, SPECIAL, STD, \"com.google.common.reflect.*\"),", "+                \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "+                \"8: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.StringTokenizer\"),", "+                \"9: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.*\"),", "+                \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),", "+                \"11: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.*\"),", "+                \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),", "+                \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD, \"com.google.common.reflect.*\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "439b4f569d367b573d11d80631a5a343", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java", "commitBeforeChange": "a244f057057913003dd17e952ee76a844f0fb76b", "commitAfterChange": "dc0a1a2fccdf6a642b05dee98206c7dd487162bd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void customImportTest_1() throws IOException, Exception", "signatureAfterChange": "      @Test     public void customImportTest_1() throws IOException, Exception", "diff": ["-            \"4: \" + getCheckMessage(clazz, msgLex, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "-            \"7: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.awt.Button\"),", "-            \"8: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.awt.Frame\"),", "-            \"9: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.awt.Dialog\"),", "-            \"10: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.awt.event.ActionEvent\"),", "-            \"11: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"javax.swing.JComponent\"),", "-            \"12: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"javax.swing.JTable\"),", "-            \"13: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.io.File\"),", "-            \"14: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.io.IOException\"),", "-            \"15: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.io.InputStream\"),", "-            \"16: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.io.Reader\"),", "+            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "+            \"7: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.awt.Button\"),", "+            \"8: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.awt.Frame\"),", "+            \"9: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.awt.Dialog\"),", "+            \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.awt.event.ActionEvent\"),", "+            \"11: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"javax.swing.JComponent\"),", "+            \"12: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"javax.swing.JTable\"),", "+            \"13: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.io.File\"),", "+            \"14: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.io.IOException\"),", "+            \"15: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.io.InputStream\"),", "+            \"16: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.io.Reader\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb9fbe7a754b7d5486e714942ca2a7bd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule333orderingandsoacing/CustomImportOrderTest.java", "commitBeforeChange": "a244f057057913003dd17e952ee76a844f0fb76b", "commitAfterChange": "dc0a1a2fccdf6a642b05dee98206c7dd487162bd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void customImportTest_2() throws IOException, Exception", "signatureAfterChange": "      @Test     public void customImportTest_2() throws IOException, Exception", "diff": ["-            \"4: \" + getCheckMessage(clazz, msgLex, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "-            \"7: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.List\"),", "-            \"8: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.StringTokenizer\"),", "-            \"9: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.*\"),", "-            \"10: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),", "-            \"11: \" + getCheckMessage(clazz, msgOrder, STD, SPECIAL, \"java.util.concurrent.*\"),", "-            \"14: \" + getCheckMessage(clazz, msgSeparator, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),", "-            \"16: \" + getCheckMessage(clazz, msgOrder, SPECIAL, STD, \"com.google.common.reflect.*\"),", "+            \"4: \" + getCheckMessage(clazz, MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "+            \"7: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.List\"),", "+            \"8: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.StringTokenizer\"),", "+            \"9: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.*\"),", "+            \"10: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.AbstractExecutorService\"),", "+            \"11: \" + getCheckMessage(clazz, MSG_ORDER, STD, SPECIAL, \"java.util.concurrent.*\"),", "+            \"14: \" + getCheckMessage(clazz, MSG_SEPARATOR, \"com.sun.xml.internal.xsom.impl.scd.Iterators\"),", "+            \"16: \" + getCheckMessage(clazz, MSG_ORDER, SPECIAL, STD, \"com.google.common.reflect.*\"),"]}]}
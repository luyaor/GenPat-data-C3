{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e38b06daf7e32a4a0f6f5f79bfffdfa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "437e7ad139efbc6a06ecd657a634e7ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/MagicNumberCheck.java", "commitBeforeChange": "ec6582beb1c026f1c3a9477d318d723e1caacb4a", "commitAfterChange": "679f818267161d9501a73ffdcc0d991537233633", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private float parseFloat(String aText, int aType)", "signatureAfterChange": "     private float parseFloat(String aText, int aType)", "diff": ["-        if (aType == TokenTypes.NUM_FLOAT) {", "-            result = Float.parseFloat(aText);", "-        }", "-        if (aType == TokenTypes.NUM_DOUBLE) {", "+        switch (aType) {", "+        case TokenTypes.NUM_FLOAT:", "+        case TokenTypes.NUM_DOUBLE:", "-        }", "-        else {", "+            break;", "+        case TokenTypes.NUM_INT:", "+        case TokenTypes.NUM_LONG:", "-            if (aType == TokenTypes.NUM_INT) {", "-                if (aText.length() > 0) {", "-                    result = (float) Integer.parseInt(aText, radix);", "-                }", "+            // Long.parseLong requires that the text ends with neither 'L'", "+            // nor 'l'.", "+            if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {", "+                aText = aText.substring(0, aText.length() - 1);", "-            else if (aType == TokenTypes.NUM_LONG) {", "-                // Long.parseLong requires that the text ends with neither 'L'", "-                // nor 'l'.", "-                if ((aText.endsWith(\"L\")) || (aText.endsWith(\"l\"))) {", "-                    aText = aText.substring(0, aText.length() - 1);", "-                }", "-                if (aText.length() > 0) {", "-                    result = (float) Long.parseLong(aText, radix);", "-                }", "+            if (aText.length() > 0) {", "+                result = (float) Long.parseLong(aText, radix);", "+            break;", "+        default:", "+            break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfd9556ac71e7caa8ddade1edae49363", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "d91c50c1ae41793e2a2ecb84a0f66042a18e59dd", "commitAfterChange": "dce9c0687bdf0e40982e2afc49186626367beadb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void checkStyleType(final DetailAST annotation)", "signatureAfterChange": "     private void checkStyleType(final DetailAST annotation)", "diff": ["-        if (ElementStyle.IGNORE == this.style", "-            || this.style == null) {", "-            return;", "-        }", "-        if (ElementStyle.COMPACT_NO_ARRAY == this.style) {", "-            this.checkCompactNoArrayStyle(annotation);", "-        }", "-        else if (ElementStyle.COMPACT == this.style) {", "-            this.checkCompactStyle(annotation);", "-        }", "-        else if (ElementStyle.EXPANDED == this.style) {", "-            this.checkExpandedStyle(annotation);", "+        switch (this.style) {", "+", "+            case COMPACT_NO_ARRAY: {", "+                checkCompactNoArrayStyle(annotation);", "+                break;", "+            }", "+", "+            case COMPACT: {", "+                checkCompactStyle(annotation);", "+                break;", "+            }", "+", "+            case EXPANDED: {", "+                checkExpandedStyle(annotation);", "+                break;", "+            }", "+            default:", "+                break;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7dfe976023a2ab63578b1ab4a6d3c246", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c81974c2e7898425130cb26f5d8aa365", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "f34eba11cbd8559d4d06f96e19affa70abaf86ff", "commitAfterChange": "0e3fe5643667a53079dbd114e5b1e9aa91fde083", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void displayErrors(String aFileName, LineText[] aErrors)", "signatureAfterChange": "     protected void fireErrors(String aFileName, LineText[] aErrors)", "diff": ["-     **/", "-    private void displayErrors(String aFileName, LineText[] aErrors)", "-    {", "-        for (int i = 0; i < aErrors.length; i++) {", "-            mLog.println(aFileName + \":\" + aErrors[i].getLineNo() +", "-                         \": \" + aErrors[i].getText());", "-        }", "-    }", "+     */", "+    protected void fireErrors(String aFileName, LineText[] aErrors)", "+    {", "+        for (int i = 0; i < aErrors.length; i++) {", "+            final AuditEvent evt =", "+                new AuditEvent(this, aFileName, aErrors[i].getLineNo(),", "+                               aErrors[i].getText());", "+            final Iterator it = mListeners.iterator();", "+            while (it.hasNext()) {", "+                final AuditListener listener = (AuditListener) it.next();", "+                listener.addError(evt);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfc642b96956b601949a5bd0d2e88295", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/bcel/src/checkstyle/com/puppycrawl/tools/checkstyle/bcel/classfile/JavaClassDefinition.java", "commitBeforeChange": "ed7fc0e632848e74d78992a9081ad689fa85e855", "commitAfterChange": "3da302031b2db9966ce7791053e2c0dba095083d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public JavaClassDefinition(JavaClass aJavaClass)", "signatureAfterChange": "     public JavaClassDefinition(         JavaClass aJavaClass,         Set aFieldScopes,         Set aMethodScopes)", "diff": ["-    public JavaClassDefinition(JavaClass aJavaClass)", "+    public JavaClassDefinition(", "+        JavaClass aJavaClass,", "+        Set aFieldScopes,", "+        Set aMethodScopes)", "-        // store method definitions", "+        // create method definitions, restricted by scope", "+        final Set methodSet = new HashSet();", "-            mMethodDefs[i] = new MethodDefinition(methods[i]);", "+            if (Utils.inScope(methods[i], aMethodScopes)) {", "+                methodSet.add(new MethodDefinition(methods[i]));", "+            }", "+        mMethodDefs =", "+            (MethodDefinition[]) methodSet.toArray(", "+                new MethodDefinition[methodSet.size()]);", "-        // store field definitions", "+        // create field definitions, restricted by scope", "-            mFieldDefs.put(fields[i].getName(), new FieldDefinition(fields[i]));", "+            if (Utils.inScope(fields[i], aFieldScopes)) {", "+                mFieldDefs.put(", "+                    fields[i].getName(),", "+                    new FieldDefinition(fields[i]));", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3512ebd855bfc04feb356c87670e9987", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12c2809c6336db503a22a5231c43c128", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "113081ffce0d8a2fae01d54f739d524dc1a3f47c", "commitAfterChange": "7514320e04e4d35a4317172876e5f11e69a2c891", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void reportCComment(int aStartLineNo, int aStartColNo,                                int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     public void reportCComment(int aStartLineNo, int aStartColNo,                                int aEndLineNo, int aEndColNo)", "diff": ["+        // save the comment", "+        final Integer key = new Integer(aStartLineNo);", "+        if (mCComments.containsKey(key)) {", "+            final List entries = (List) mCComments.get(key);", "+            entries.add(cc);", "+        }", "+        else {", "+            final List entries = new ArrayList();", "+            entries.add(cc);", "+            mCComments.put(key, entries);", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb38975bd6155ffd73ff29dafc2269f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/BaseCheckTestCase.java", "commitBeforeChange": "0fb155232fd68c4a4546ec34e676fa655d7fe223", "commitAfterChange": "8bb244d50b7ef1b8028fa5492009d3ea367b1a19", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      protected Checker createChecker(Configuration aConfig)         throws Exception", "signatureAfterChange": "      protected Checker createChecker(Configuration aCheckConfig)         throws Exception", "diff": ["-    protected Checker createChecker(Configuration aConfig)", "+    protected Checker createChecker(Configuration aCheckConfig)", "-        throw new IllegalStateException(\"not implemented yet\");", "-//        final DefaultConfiguration dc = new DefaultConfiguration(\"root\");", "-//        dc.addChild(aConfig);", "-//        final Checker c = new Checker();", "-//        c.configure(aConfig);", "-//        c.addListener(new BriefLogger(mStream));", "-//        return c;", "+        final DefaultConfiguration dc = new DefaultConfiguration(\"root\");", "+        final DefaultConfiguration twConf = createCheckConfig(TreeWalker.class);", "+        dc.addChild(twConf);", "+        twConf.addChild(aCheckConfig);", "+        final Checker c = new Checker();", "+        c.configure(dc);", "+        c.addListener(new BriefLogger(mStream));", "+        return c;"]}]}
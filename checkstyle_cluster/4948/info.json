{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "226c1ce98e364784fc3417cbf98b3f9f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e1190dfd5f81ecc831111fff5a70c99", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "28a4f2fe029422414814eeb6858f0b9c0cef7039", "commitAfterChange": "40f4c37a21b1c8444f39f12c5f92e79af10be34f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void findDuplicatesInFiles(int aI, int aJ)", "signatureAfterChange": "     private void findDuplicatesInFiles(int aI, int aJ)", "diff": ["-        final int iFileLength = mLineChecksums[aI].length;", "+        final int iBlockCount = mLineBlockChecksums[aI].length;", "-        // build up some supporting data structures", "-        final boolean[] iLineOccurInJ = new boolean[iFileLength];", "-        for (int iLine = 0; iLine < iFileLength; iLine++) {", "-            iLineOccurInJ[iLine] = (Arrays.binarySearch(", "-                mSortedRelevantChecksums[aJ], mLineChecksums[aI][iLine]) >= 0);", "-        }", "+        // go through all the blocks in iFile and", "+        // check if the following mMin lines occur in jFile", "+        for (int blockIdx = 0; blockIdx < iBlockCount; blockIdx++) {", "-        // go through all the lines in iFile and check if the following", "-        // mMin lines occur in jFile", "-        for (int iLine = 0; iLine < iFileLength - mMin; iLine++) {", "-", "-            // fast exit if one of the lines does not occur in jFile at all", "-            boolean fastExit = false;", "-            final int kLimit = iFileLength - iLine;", "-            for (int k = 0; k < Math.min(mMin, kLimit); k++) {", "-                if (!iLineOccurInJ[iLine + k]) {", "-                    fastExit = true;", "-                    break;", "-                }", "-            }", "-", "-            if (!fastExit) {", "-                // all lines do occur -> brute force searching", "-                mCacheMisses += 1;", "-                iLine = findDuplicateFromLine(aI, aJ, iLine);", "-            }", "-            else {", "-                mCacheHits += 1;", "+            // detailed analysis only if the block does occur in jFile at all", "+            if (Arrays.binarySearch(", "+                    mSortedRelevantChecksums[aJ],", "+                    mLineBlockChecksums[aI][blockIdx]) >= 0)", "+            {", "+                blockIdx = findDuplicateFromLine(aI, aJ, blockIdx);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e77653260936eee7fac67a2dd1db4a69", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "f8f6ded7b447d5136ae01ad878966e2955ca730a", "commitAfterChange": "3c0608f33a6c41cf96056c52ae99070cbe5062d5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public Checker(GlobalProperties aConfig, CheckConfiguration[] aConfigs)         throws CheckstyleException", "signatureAfterChange": "     public Checker(Configuration aConfig)         throws CheckstyleException", "diff": ["+     */", "+    public Checker(Configuration aConfig)", "+        throws CheckstyleException", "+    {", "+        this(aConfig.getGlobalProperties(), aConfig.getCheckConfigurations());", "+    }"]}]}
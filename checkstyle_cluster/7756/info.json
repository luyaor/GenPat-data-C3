{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f063daa06752174c939a40b35e4acc9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bb1e895016300029228cfc2bff12d32", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-        final boolean foundMatch = mMatcher.find();", "+        final boolean foundMatch = matcher.find();", "-        final LineColumn start = mText.lineColumn(mMatcher.start());", "-        final LineColumn end = mText.lineColumn(mMatcher.end());", "+        final LineColumn start = text.lineColumn(matcher.start());", "+        final LineColumn end = text.lineColumn(matcher.end());", "-        if (!mOptions.getSuppressor().shouldSuppress(start.getLine(),", "+        if (!options.getSuppressor().shouldSuppress(start.getLine(),", "-            mCurrentMatches++;", "-            if (mCurrentMatches > mOptions.getMaximum()) {", "-                if (\"\".equals(mOptions.getMessage())) {", "-                    mOptions.getReporter().log(start.getLine(),", "-                            \"regexp.exceeded\", mMatcher.pattern().toString());", "+            currentMatches++;", "+            if (currentMatches > options.getMaximum()) {", "+                if (\"\".equals(options.getMessage())) {", "+                    options.getReporter().log(start.getLine(),", "+                            \"regexp.exceeded\", matcher.pattern().toString());", "-                    mOptions.getReporter()", "-                            .log(start.getLine(), mOptions.getMessage());", "+                    options.getReporter()", "+                            .log(start.getLine(), options.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64e70aba5febc85bf976209dafe1021a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/SinglelineDetector.java", "commitBeforeChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "commitAfterChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkLine(int aLineno, String aLine, Matcher aMatcher,             int aStartPosition)", "signatureAfterChange": "     private void checkLine(int lineno, String line, Matcher matcher,             int startPosition)", "diff": ["-    private void checkLine(int aLineno, String aLine, Matcher aMatcher,", "-            int aStartPosition)", "+    private void checkLine(int lineno, String line, Matcher matcher,", "+            int startPosition)", "-        final boolean foundMatch = aMatcher.find(aStartPosition);", "+        final boolean foundMatch = matcher.find(startPosition);", "-        final int startCol = aMatcher.start(0);", "-        final int endCol = aMatcher.end(0);", "+        final int startCol = matcher.start(0);", "+        final int endCol = matcher.end(0);", "-        if (mOptions.getSuppressor()", "-                .shouldSuppress(aLineno, startCol, aLineno, endCol - 1))", "+        if (options.getSuppressor()", "+                .shouldSuppress(lineno, startCol, lineno, endCol - 1))", "-            if (endCol < aLine.length()) {", "+            if (endCol < line.length()) {", "-                checkLine(aLineno, aLine, aMatcher, endCol);", "+                checkLine(lineno, line, matcher, endCol);", "-        mCurrentMatches++;", "-        if (mCurrentMatches > mOptions.getMaximum()) {", "-            if (\"\".equals(mOptions.getMessage())) {", "-                mOptions.getReporter().log(aLineno, \"regexp.exceeded\",", "-                        aMatcher.pattern().toString());", "+        currentMatches++;", "+        if (currentMatches > options.getMaximum()) {", "+            if (\"\".equals(options.getMessage())) {", "+                options.getReporter().log(lineno, \"regexp.exceeded\",", "+                        matcher.pattern().toString());", "-                mOptions.getReporter().log(aLineno, mOptions.getMessage());", "+                options.getReporter().log(lineno, options.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff08abb27761b9a572a0efca52c5df4e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-        foundMatch = mMatcher.find();", "-        if (!foundMatch && !mIllegalPattern && (mMatchCount == 0)) {", "+        foundMatch = matcher.find();", "+        if (!foundMatch && !illegalPattern && (matchCount == 0)) {", "-            final LineColumn start = text.lineColumn(mMatcher.start());", "-            final LineColumn end = text.lineColumn(mMatcher.end() - 1);", "+            final LineColumn start = text.lineColumn(matcher.start());", "+            final LineColumn end = text.lineColumn(matcher.end() - 1);", "-            if (mIgnoreComments) {", "+            if (ignoreComments) {", "-                mMatchCount++;", "-                if (mIllegalPattern || (mCheckForDuplicates", "-                        && ((mMatchCount - 1) > mDuplicateLimit)))", "+                matchCount++;", "+                if (illegalPattern || (checkForDuplicates", "+                        && ((matchCount - 1) > duplicateLimit)))", "-                    mErrorCount++;", "+                    errorCount++;", "-            if ((mErrorCount < mErrorLimit)", "-                    && (ignore || mIllegalPattern || mCheckForDuplicates))", "+            if ((errorCount < errorLimit)", "+                    && (ignore || illegalPattern || checkForDuplicates))"]}]}
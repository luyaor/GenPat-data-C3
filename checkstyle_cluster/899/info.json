{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c6224c48de4345e712dd320d9f70fc1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88596129647f6e9334c4c58ee91970e5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Utils.java", "commitBeforeChange": "1ef7197d95faaa734cf4a506bebc8229bcd4d1f1", "commitAfterChange": "e68f47ce99313c7dafade4ac4a55fccf12c09d5e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private static int getTokenFieldValue(Field field, String name)", "signatureAfterChange": "     public static int getIntFromField(Field field, Object object)", "diff": ["-    private static int getTokenFieldValue(Field field, String name) {", "+    public static int getIntFromField(Field field, Object object) {", "-            return field.getInt(name);", "+            return field.getInt(object);", "-        catch (final IllegalArgumentException | IllegalAccessException e) {", "-            throw new IllegalStateException(", "-                    \"Failed to instantiate collection of Java tokens\", e);", "+        catch (final IllegalAccessException exception) {", "+            throw new IllegalStateException(exception);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8014b9c81bd9afe4dca35c1fc9a7b2f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "commitBeforeChange": "fc10c00e0a6a9b0ec46714a2e6e098de10bae7ce", "commitAfterChange": "a2bfd59729017b80d4167505fdcfed28d17ca5ee", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private Object createObject(String className)         throws CheckstyleException", "signatureAfterChange": "     private Object createObject(String className)         throws CheckstyleException", "diff": ["-            return clazz.newInstance();", "+            return clazz.getDeclaredConstructor().newInstance();", "-        catch (final ClassNotFoundException | InstantiationException | IllegalAccessException e) {", "-            throw new CheckstyleException(\"Unable to find class for \" + className, e);", "+        catch (final ReflectiveOperationException exception) {", "+            throw new CheckstyleException(\"Unable to find class for \" + className, exception);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ebc4e0e88c97cec5fe53123298f1438d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24d09ea1176f8c633528361e49f7059b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "880ae00b7b8c90cf4ae0b66685f59b56adaf2aff", "commitAfterChange": "a66d414ae6254d11f5c6021cc804a56d250a3595", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private static boolean isEmptyType(DetailAST ast, int parentType)", "signatureAfterChange": "     private static boolean isEmptyType(DetailAST ast)", "diff": ["-    private static boolean isEmptyType(DetailAST ast, int parentType) {", "+    private static boolean isEmptyType(DetailAST ast) {", "-        return (type == TokenTypes.RCURLY || type == TokenTypes.LCURLY)", "-                && parentType == TokenTypes.OBJBLOCK;", "+        final DetailAST nextSibling = ast.getNextSibling();", "+        final DetailAST previousSibling = ast.getPreviousSibling();", "+        return type == TokenTypes.LCURLY", "+                && nextSibling.getType() == TokenTypes.RCURLY", "+            || type == TokenTypes.RCURLY", "+                && previousSibling != null", "+                && previousSibling.getType() == TokenTypes.LCURLY;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b5a979d0db192a859e4e165417b1029", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtilsTest.java", "commitBeforeChange": "904de34fcd984edce3d6042a5a17e2a969254588", "commitAfterChange": "46a52f84c014e4d25379f429f11ed3de11fe8ae7", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Test     public void testBranchContains()", "signatureAfterChange": "      @Test     public void testBranchContains()", "diff": ["-        assertFalse(JavadocUtils.branchContains(node, JavadocTokenTypes.AUTHOR_LITERAL));", "+        assertFalse(JavadocUtils.containsInBranch(node, JavadocTokenTypes.AUTHOR_LITERAL));", "-        assertFalse(JavadocUtils.branchContains(node, JavadocTokenTypes.AUTHOR_LITERAL));", "+        assertFalse(JavadocUtils.containsInBranch(node, JavadocTokenTypes.AUTHOR_LITERAL));", "-        assertTrue(JavadocUtils.branchContains(node, JavadocTokenTypes.AUTHOR_LITERAL));", "+        assertTrue(JavadocUtils.containsInBranch(node, JavadocTokenTypes.AUTHOR_LITERAL));"]}]}
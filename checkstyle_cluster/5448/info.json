{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0114ae87b100f15bac021b525ea4950d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c2d33ed76ff94965cf3109b070e748d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "commitBeforeChange": "3ef918920c58c550169ccef3cfe1706aede11a6e", "commitAfterChange": "5922d5a6730d7582d7d66121eb911ef9426f9e24", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private void processFiles(Checker checker, final SeverityLevelCounter warningCounter,             final String checkstyleVersion)", "signatureAfterChange": "     private void processFiles(Checker checker, final SeverityLevelCounter warningCounter,             final String checkstyleVersion)", "diff": ["-        final long processingStartTime = System.currentTimeMillis();", "-        final int numErrs = checker.process(files);", "-        final long processingEndTime = System.currentTimeMillis();", "-        log(\"To process the files took \" + (processingEndTime - processingStartTime) + TIME_SUFFIX,", "-            Project.MSG_VERBOSE);", "+        int numErrs = 0;", "+", "+        try {", "+            final long processingStartTime = System.currentTimeMillis();", "+            numErrs = checker.process(files);", "+            final long processingEndTime = System.currentTimeMillis();", "+            log(\"To process the files took \" + (processingEndTime - processingStartTime)", "+                + TIME_SUFFIX, Project.MSG_VERBOSE);", "+        }", "+        catch (CheckstyleException e) {", "+            throw new BuildException(\"Unable to process files: \" + files, e);", "+        }", "-        final boolean ok = numErrs <= maxErrors", "-                && numWarnings <= maxWarnings;", "+        final boolean ok = numErrs <= maxErrors && numWarnings <= maxWarnings;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "239a0e9aa7d4bd40a7486907a90e5862", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CommitValidationTest.java", "commitBeforeChange": "d1c5d416666252a520696d079945d17f50c83968", "commitAfterChange": "e7edc7118da8c40cba7b1497fa336e6b61d70031", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private static RevCommitsPair resolveRevCommitsPair(Repository repo)", "signatureAfterChange": "      private static RevCommitsPair resolveRevCommitsPair(Repository repo)", "diff": ["-        try {", "+", "+        try (RevWalk revWalk = new RevWalk(repo)) {", "-", "-            RevWalk revWalk = new RevWalk(repo);", "-", "-                first = new Git(repo).log().add(firstParent).call().iterator();", "-                second = new Git(repo).log().add(secondParent).call().iterator();", "+                try (Git git = new Git(repo)) {", "+                    first = git.log().add(firstParent).call().iterator();", "+                    second = git.log().add(secondParent).call().iterator();", "+                }", "-                first = new Git(repo).log().call().iterator();", "+                try (Git git = new Git(repo)) {", "+                    first = git.log().call().iterator();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63568c9083314a654f1ca7c795c51a0d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "0f8970e3901a671c3b0a331dcaec71ff269b7bc9", "commitAfterChange": "784b3270054dd61d8c6dbe413bcedfc628063171", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private void process(File aFile)", "signatureAfterChange": "     private void process(File aFile)", "diff": ["+        catch (Throwable err) {", "+            mMessages.add(new LocalizedMessage(0, Defn.CHECKSTYLE_BUNDLE,", "+                                               \"general.exception\",", "+                                               new String[] {\"\" + err}));", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf022f97c0ec81599fd38fd04855e84", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "e9cc31b2ecec62ef4e53ea576e29f25963f516e4", "commitAfterChange": "927ec62235d97ab741aae3954b9a771843df724c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void checkHtml(DetailAST aAST, String[] aComment)", "signatureAfterChange": "     private void checkHtml(DetailAST aAST, String[] aComment)", "diff": ["-            final TagParser parser = new TagParser(aComment[i], lineno + i);", "+            TagParser parser = null;", "+            try {", "+                // Can throw NoSuchElementException when tokenizing encounters", "+                // \"<\" at end of aComment[i].", "+                parser = new TagParser(aComment[i], lineno + i);", "+            }", "+            catch (NoSuchElementException e) {", "+                log(", "+                    lineno + i,", "+                    \"javadoc.incompleteTag\",", "+                    new Object[] {aComment[i]});", "+                return;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd10b4f695739ec077683420d7125162", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "59222296258fecc02db44eeae1cb65b44b68c267", "commitAfterChange": "91875d1901eaf53e869e6179ceb6e45a3ab14e77", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public ParseTreeInfoPanel()", "signatureAfterChange": "     public ParseTreeInfoPanel()", "diff": ["-        JScrollPane sp = new JScrollPane(mTreeTable);", "+        final JScrollPane sp = new JScrollPane(mTreeTable);", "-        final JButton fileSelectionButton = new JButton(new FileSectionAction());", "+        final JButton fileSelectionButton =", "+            new JButton(new FileSelectionAction());", "+", "+        try {", "+            // TODO: creating an object for the side effect of the constructor", "+            // and then ignoring the object looks strange.", "+            new FileDrop(sp, new FileDropListener(sp));", "+        }", "+        catch (TooManyListenersException ex)", "+        {", "+           showErrorDialog(null, \"Cannot initialize Drag and Drop support\");", "+        }", "+", "+    }"]}]}
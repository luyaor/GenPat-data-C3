{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2c91d19f8ef38810d55b25ee4c68ba7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dae9c6bb0bcf4ae4b84e11d42aa1f6bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "3f735c43e4b0b17aa6a63ce18c9c8564c84568a3", "commitAfterChange": "881f9b5079ed22cc6d39b9c27e581f1d1f1a7702", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean checkSwitch(final DetailAST ast, boolean useContinue)", "signatureAfterChange": "     private boolean checkSwitch(final DetailAST literalSwitchAst, boolean useContinue)", "diff": ["-    private boolean checkSwitch(final DetailAST ast, boolean useContinue) {", "-        DetailAST caseGroup = ast.findFirstToken(TokenTypes.CASE_GROUP);", "+    private boolean checkSwitch(final DetailAST literalSwitchAst, boolean useContinue) {", "+        DetailAST caseGroup = literalSwitchAst.findFirstToken(TokenTypes.CASE_GROUP);", "-        while (isTerminated && caseGroup != null", "-               && caseGroup.getType() != TokenTypes.RCURLY) {", "+        while (isTerminated && caseGroup.getType() != TokenTypes.RCURLY) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e10fadcbb8df016c334075bda87bef78", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "3f735c43e4b0b17aa6a63ce18c9c8564c84568a3", "commitAfterChange": "881f9b5079ed22cc6d39b9c27e581f1d1f1a7702", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean checkSlist(final DetailAST ast, boolean useBreak,                                boolean useContinue)", "signatureAfterChange": "     private boolean checkSlist(final DetailAST slistAst, boolean useBreak,                                boolean useContinue)", "diff": ["-    private boolean checkSlist(final DetailAST ast, boolean useBreak,", "+    private boolean checkSlist(final DetailAST slistAst, boolean useBreak,", "-        DetailAST lastStmt = ast.getLastChild();", "-        if (lastStmt == null) {", "-            // if last case in switch is empty then slist is empty", "-            // since this is a last case it is not a fall-through", "-            return true;", "-        }", "+        DetailAST lastStmt = slistAst.getLastChild();"]}]}
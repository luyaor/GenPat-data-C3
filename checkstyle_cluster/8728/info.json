{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bef79b68ee88659e3d753a748bc8054", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "181ec718599ba5707e76cc682e8db7a8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ModifierOrderCheck.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     DetailAST checkOrderSuggestedByJLS(List aModifiers)", "signatureAfterChange": "     DetailAST checkOrderSuggestedByJLS(List aModifiers)", "diff": ["+        //No modifiers, no problems", "+        if (!it.hasNext()) {", "+            return null;", "+        }", "+", "+        //Speed past all initial annotations", "-            if (!it.hasNext()) {", "-                return null;", "+            modifier = (DetailAST) it.next();", "+        }", "+        while (it.hasNext() && (modifier.getType() == TokenTypes.ANNOTATION));", "+", "+        //All modifiers are annotations, no problem", "+        if (modifier.getType() == TokenTypes.ANNOTATION) {", "+            return null;", "+        }", "+", "+        while (i < JLS_ORDER.length) {", "+            if (modifier.getType() == TokenTypes.ANNOTATION) {", "+                //Annotation not at start of modifiers, bad", "+                return modifier;", "-            modifier = (DetailAST) it.next();", "-        } while (i < JLS_ORDER.length);", "+", "+            if (i == JLS_ORDER.length) {", "+                //Current modifier is out of JLS order", "+                return modifier;", "+            }", "+            else if (!it.hasNext()) {", "+                //Reached end of modifiers without problem", "+                return null;", "+            }", "+            else {", "+                modifier = (DetailAST) it.next();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "385b6b46277b2da6f6c15935c48fc4e1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "be7d2571b8482bf9cb0f8f258b6d06681cc8b698", "commitAfterChange": "70774706483eb0f9d04500cb64f4ce4c995b56f8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {", "+        if (TokenTypes.INTERFACE_DEF == aAST.getType()) {", "+            final DetailAST modifiers =", "+                aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            if (null != modifiers) {", "+                final DetailAST modifier =", "+                    modifiers.findFirstToken(TokenTypes.LITERAL_STATIC);", "+                if (null != modifier) {", "+                    log(modifier.getLineNo(), modifier.getColumnNo(),", "+                        \"redundantModifier\", modifier.getText());", "+                }", "+            }", "+        }", "+        else if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)) {"]}]}
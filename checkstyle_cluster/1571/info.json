{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "317267a41dcdab1fba56875da8106477", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c0da9ce5d537c799b35e56b96712953", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocParseTreeTest.java", "commitBeforeChange": "4b95f33697750ed910d59830fc9c649f094d88f8", "commitAfterChange": "879864502bd28685569417780ebc92308038cf2c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "         @Override         public void syntaxError(                 Recognizer<?, ?> aRecognizer, Object aOffendingSymbol,                 int aLine, int aCharPositionInLine,                 String aMsg, RecognitionException aEx)", "signatureAfterChange": "         @Override         public void syntaxError(                 Recognizer<?, ?> recognizer, Object offendingSymbol,                 int line, int charPositionInLine,                 String msg, RecognitionException e)", "diff": ["-                Recognizer<?, ?> aRecognizer, Object aOffendingSymbol,", "-                int aLine, int aCharPositionInLine,", "-                String aMsg, RecognitionException aEx) {", "-            Assert.fail(\"[\" + aLine + \", \" + aCharPositionInLine + \"] \" + aMsg);", "+                Recognizer<?, ?> recognizer, Object offendingSymbol,", "+                int line, int charPositionInLine,", "+                String msg, RecognitionException e) {", "+            Assert.fail(\"[\" + line + \", \" + charPositionInLine + \"] \" + msg);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31c9d56172118eb0de017ca02bd18268", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void checkMax(int aMax, int aValue, String aMsg, DetailAST aAst)", "signatureAfterChange": "     private void checkMax(int max, int value, String msg, DetailAST ast)", "diff": ["-    private void checkMax(int aMax, int aValue, String aMsg, DetailAST aAst)", "+    private void checkMax(int max, int value, String msg, DetailAST ast)", "-        if (aMax < aValue) {", "-            log(aAst.getLineNo(), aMsg, aValue, aMax);", "+        if (max < value) {", "+            log(ast.getLineNo(), msg, value, max);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "351b1045ec16524975ac6691a77fda84", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/Check.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "      @Override     public final void log(int aLine, String aKey, Object... aArgs)", "signatureAfterChange": "      @Override     public final void log(int line, String key, Object... args)", "diff": ["-    public final void log(int aLine, String aKey, Object... aArgs)", "+    public final void log(int line, String key, Object... args)", "-        mMessages.add(", "+        messages.add(", "-                aLine,", "+                line,", "-                aKey,", "-                aArgs,", "+                key,", "+                args,", "-                this.getCustomMessages().get(aKey)));", "+                this.getCustomMessages().get(key)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c22f6034ac4fda1a894acaa1b987625d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isIgnoredSetterParam(DetailAST aAST, String aName)", "signatureAfterChange": "     private boolean isIgnoredSetterParam(DetailAST ast, String name)", "diff": ["-    private boolean isIgnoredSetterParam(DetailAST aAST, String aName)", "+    private boolean isIgnoredSetterParam(DetailAST ast, String name)", "-        if (aAST.getType() != TokenTypes.PARAMETER_DEF", "-            || !mIgnoreSetter)", "+        if (ast.getType() != TokenTypes.PARAMETER_DEF", "+            || !ignoreSetter)", "-        //single parameter?", "-        final DetailAST parametersAST = aAST.getParent();", "+        //single pnameter?", "+        final DetailAST parametersAST = ast.getParent();", "-        //method parameter, not constructor parameter?", "+        //method pnameter, not constructor pnameter?", "-        final String expectedName = \"set\" + capitalize(aName);", "+        final String expectedName = \"set\" + capitalize(name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c59ecbea035761ae9978f515760f96a0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isEmptyLoop(DetailAST aAST, int aParentType)", "signatureAfterChange": "     private boolean isEmptyLoop(DetailAST ast, int parentType)", "diff": ["-    private boolean isEmptyLoop(DetailAST aAST, int aParentType)", "+    private boolean isEmptyLoop(DetailAST ast, int parentType)", "-        return mAllowEmptyLoops", "-            && (isEmptyBlock(aAST, aParentType, TokenTypes.LITERAL_FOR)", "-                    || isEmptyBlock(aAST,", "-                            aParentType, TokenTypes.LITERAL_WHILE)", "-                            || isEmptyBlock(aAST,", "-                                    aParentType, TokenTypes.LITERAL_DO));", "+        return allowEmptyLoops", "+            && (isEmptyBlock(ast, parentType, TokenTypes.LITERAL_FOR)", "+                    || isEmptyBlock(ast,", "+                            parentType, TokenTypes.LITERAL_WHILE)", "+                            || isEmptyBlock(ast,", "+                                    parentType, TokenTypes.LITERAL_DO));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf9ac8995ceee06e93b310ea8a18826e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static AuditListener createListener(CommandLine aLine,                                                 OutputStream aOut,                                                 boolean aCloseOut)", "signatureAfterChange": "     private static AuditListener createListener(CommandLine line,                                                 OutputStream out,                                                 boolean closeOut)", "diff": ["-    private static AuditListener createListener(CommandLine aLine,", "-                                                OutputStream aOut,", "-                                                boolean aCloseOut)", "+    private static AuditListener createListener(CommandLine line,", "+                                                OutputStream out,", "+                                                boolean closeOut)", "-            aLine.hasOption(\"f\") ? aLine.getOptionValue(\"f\") : \"plain\";", "+            line.hasOption(\"f\") ? line.getOptionValue(\"f\") : \"plain\";", "-            listener = new XMLLogger(aOut, aCloseOut);", "+            listener = new XMLLogger(out, closeOut);", "-            listener = new DefaultLogger(aOut, aCloseOut);", "+            listener = new DefaultLogger(out, closeOut);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f796c56eda21d4144e3b99adadec9d2f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "ac18264bf62da6836d92a28c96e7599aa5fe7cbd", "commitAfterChange": "aff5047c9e29ed3fa0a502dd9713fc5aae55146e", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 63, "signatureBeforeChange": "     private void setHeaderFile(String aFileName)         throws FileNotFoundException, IOException", "signatureAfterChange": "     private void loadHeaderFile()         throws FileNotFoundException, IOException", "diff": ["-    private void setHeaderFile(String aFileName)", "+    private void loadHeaderFile()", "-        // TODO: Need to fix bug that relative paths are not handled. Need to", "-        // be given an absolute path to add to paths. This is needed for", "-        // all properties that specified paths (headerFile, baseDir).", "-", "+        final String fname = getStringProperty(Defn.HEADER_FILE_PROP);", "-        if ((aFileName == null) || (aFileName.trim().length() == 0)) {", "+        if ((fname == null) || (fname.trim().length() == 0)) {", "+        // load the file", "-            new LineNumberReader(new FileReader(aFileName));", "+            new LineNumberReader(new FileReader(getAbsoluteFilename(fname)));", "-        mHeaderFile = aFileName;", "+    }"]}]}
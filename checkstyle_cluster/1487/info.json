{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e82f9a8c3727f4b3fa0e1cf039c81442", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daa41e6cd89470d0d9905f7b2edc35bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "ae0e7def779cddabf1e93ee744b9b341ef27647f", "commitAfterChange": "c99f34002b7340ec8d0888f8f9b3992df798e408", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["+", "+        validate(details, rcurly, lcurly);", "+", "+        if (!shouldStartLine) {", "+            return;", "+        }", "+        final boolean startsLine =", "+                Utils.whitespaceBefore(rcurly.getColumnNo(),", "+                        getLines()[rcurly.getLineNo() - 1]);", "+", "+        if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {", "+            log(rcurly, MSG_KEY_LINE_NEW, \"}\");", "+        }", "+    }", "-        }", "-", "-        if (!shouldStartLine) {", "-            return;", "-        }", "-        final boolean startsLine =", "-                Utils.whitespaceBefore(rcurly.getColumnNo(),", "-                        getLines()[rcurly.getLineNo() - 1]);", "-", "-        if (!startsLine && lcurly.getLineNo() != rcurly.getLineNo()) {", "-            log(rcurly, MSG_KEY_LINE_NEW, \"}\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb9f8d14f1a122afec495401d1e3a6d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "2a8aba9a54d2112b142a1b9e0c4e762e780155c1", "commitAfterChange": "7fa61f5c0b05fc44c9f55a23c816e8e072dcec0e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType)", "signatureAfterChange": "     void verifyType(MyModifierSet aMods, MyCommonAST aType)", "diff": ["-        //", "-        // Only Javadoc testing below", "-        //", "-        final Scope typeScope =", "-            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "-", "-        if (!inCheckScope(typeScope)) {", "-            return; // no need to really check anything", "-        }", "-", "-        final int lineNo = (aMods.size() > 0)", "-            ? aMods.getFirstLineNo()", "-            : aType.getLineNo();", "-", "-        final String[] jd = getJavadocBefore(lineNo - 1);", "-        if (jd == null) {", "-//            mMessages.add(lineNo, \"javadoc.missing\");", "-        }", "-        else if (mInScope.size() == 0) {", "-            // don't check author/version for inner classes", "-            if (!mConfig.isAllowNoAuthor()", "-                && (MATCH_JAVADOC_AUTHOR.grep(jd).length == 0))", "-            {", "-                mMessages.add(lineNo, \"type.missingTag\", \"@author\");", "-            }", "-            if (mConfig.isRequireVersion()", "-                && (MATCH_JAVADOC_VERSION.grep(jd).length == 0))", "-            {", "-                mMessages.add(lineNo, \"type.missingTag\", \"@version\");", "-            }", "-        }"]}]}
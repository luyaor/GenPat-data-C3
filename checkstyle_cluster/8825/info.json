{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23743cb15d3b2058de926c82c027d0d0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ea990a27106203bafa688699be89207", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void postprocessLiteralNew(DetailAST aAST)", "signatureAfterChange": "     private void postprocessLiteralNew(DetailAST ast)", "diff": ["-    private void postprocessLiteralNew(DetailAST aAST)", "+    private void postprocessLiteralNew(DetailAST ast)", "-        final DetailAST typeNameAST = aAST.getFirstChild();", "+        final DetailAST typeNameAST = ast.getFirstChild();", "-            // aAST == \"new Boolean[]\"", "+            // ast == \"new Boolean[]\"", "-        final int lineNo = aAST.getLineNo();", "-        final int colNo = aAST.getColumnNo();", "+        final int lineNo = ast.getLineNo();", "+        final int colNo = ast.getColumnNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38b11193b5dc9814f6d1ad2d266ae8aa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/SeparatorWrapCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final String text = aAST.getText();", "-        final int colNo = aAST.getColumnNo();", "-        final int lineNo = aAST.getLineNo();", "+        final String text = ast.getText();", "+        final int colNo = ast.getColumnNo();", "+        final int lineNo = ast.getLineNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "397299158f5c8745ba4d20354b5477ab", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            leaveMethodDef(aAST);", "+            leaveMethodDef(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3babb29af2df708bd852754364d24e01", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            visitLiteralThrows(aAST);", "+            visitLiteralThrows(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40bc78dad153aee57ae21a7ec148ba12", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java", "commitBeforeChange": "075b3084de3934dbf73f108110b36e01dcf10d1e", "commitAfterChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected final boolean mustCheckName(DetailAST aAST)", "signatureAfterChange": "      @Override     protected final boolean mustCheckName(DetailAST ast)", "diff": ["-    protected final boolean mustCheckName(DetailAST aAST)", "+    protected final boolean mustCheckName(DetailAST ast)", "-            aAST.findFirstToken(TokenTypes.MODIFIERS);", "+            ast.findFirstToken(TokenTypes.MODIFIERS);", "-        return (!isStatic && !ScopeUtils.inInterfaceOrAnnotationBlock(aAST)", "-            && !ScopeUtils.isLocalVariableDef(aAST))", "+        return (!isStatic && !ScopeUtils.inInterfaceOrAnnotationBlock(ast)", "+            && !ScopeUtils.isLocalVariableDef(ast))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57e74dcddc5780cb6ea87d35ed53c210", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            checkIdent(aAST);", "+            checkIdent(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a3b0c14b8d6cae163e8dd62d4939ad0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/ExecutableStatementCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            leaveMemberDef(aAST);", "+            leaveMemberDef(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "682c0ab4e885f0df77fbbc7959ee0450", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            leaveLiteralIf(aAST);", "+            leaveLiteralIf(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75950be677ebd66b6d16de0514789acc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isCountable(DetailAST aAST)", "signatureAfterChange": "     private boolean isCountable(DetailAST ast)", "diff": ["-    private boolean isCountable(DetailAST aAST)", "+    private boolean isCountable(DetailAST ast)", "-        final int tokenType = aAST.getType();", "+        final int tokenType = ast.getType();", "-            countable = isExpressionCountable(aAST);", "+            countable = isExpressionCountable(ast);", "-            countable = isVariableDefCountable(aAST);", "+            countable = isVariableDefCountable(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3351c0ee22bd803db5944730f9c7e2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void reportMagicNumber(DetailAST aAST)", "signatureAfterChange": "     private void reportMagicNumber(DetailAST ast)", "diff": ["-    private void reportMagicNumber(DetailAST aAST)", "+    private void reportMagicNumber(DetailAST ast)", "-        String text = aAST.getText();", "-        final DetailAST parent = aAST.getParent();", "-        DetailAST reportAST = aAST;", "+        String text = ast.getText();", "+        final DetailAST parent = ast.getParent();", "+        DetailAST reportAST = ast;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f380bdad04e7392a501af9210f19c6c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void addChild(AST aAST)", "signatureAfterChange": "      @Override     public void addChild(AST ast)", "diff": ["-    public void addChild(AST aAST)", "+    public void addChild(AST ast)", "-        super.addChild(aAST);", "-        if (aAST != null) {", "-            ((DetailAST) aAST).setParent(this);", "+        super.addChild(ast);", "+        if (ast != null) {", "+            ((DetailAST) ast).setParent(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91721ff43966e650df8740e4a2762d5a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (shouldCheck(aAST)) {", "+        if (shouldCheck(ast)) {", "-                contents.getJavadocBefore(aAST.getFirstChild().getLineNo());", "+                contents.getJavadocBefore(ast.getFirstChild().getLineNo());", "-            checkComment(aAST, cmt);", "+            checkComment(ast, cmt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "958df90d962da2eb950779cfdea9c752", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static boolean isBooleanLiteralReturnStatement(AST aAST)", "signatureAfterChange": "     private static boolean isBooleanLiteralReturnStatement(AST ast)", "diff": ["-    private static boolean isBooleanLiteralReturnStatement(AST aAST)", "+    private static boolean isBooleanLiteralReturnStatement(AST ast)", "-        if ((aAST == null) || (aAST.getType() != TokenTypes.LITERAL_RETURN)) {", "+        if ((ast == null) || (ast.getType() != TokenTypes.LITERAL_RETURN)) {", "-        final AST expr = aAST.getFirstChild();", "+        final AST expr = ast.getFirstChild();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a165309c130cdadbda7803227ba8b3c8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean inIgnoreList(DetailAST aAST)", "signatureAfterChange": "     private boolean inIgnoreList(DetailAST ast)", "diff": ["-    private boolean inIgnoreList(DetailAST aAST)", "+    private boolean inIgnoreList(DetailAST ast)", "-        double value = CheckUtils.parseDouble(aAST.getText(), aAST.getType());", "-        final DetailAST parent = aAST.getParent();", "+        double value = CheckUtils.parseDouble(ast.getText(), ast.getType());", "+        final DetailAST parent = ast.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a55bb8904231728fdd7a27514f2d90a3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/CheckUtils.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static boolean isElseWithCurlyBraces(DetailAST aAST)", "signatureAfterChange": "     private static boolean isElseWithCurlyBraces(DetailAST ast)", "diff": ["-    private static boolean isElseWithCurlyBraces(DetailAST aAST)", "+    private static boolean isElseWithCurlyBraces(DetailAST ast)", "-        return (aAST.getType() == TokenTypes.SLIST)", "-            && (aAST.getChildCount() == 2)", "-            && isElse(aAST.getParent());", "+        return (ast.getType() == TokenTypes.SLIST)", "+            && (ast.getChildCount() == 2)", "+            && isElse(ast.getParent());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a936c6318ddd8ed889141ae1a9495f45", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractComplexityCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            leaveMethodDef(aAST);", "+            leaveMethodDef(ast);", "-            leaveTokenHook(aAST);", "+            leaveTokenHook(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc434fea519d3a3c62d9c2d659f9c071", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        super.visitToken(aAST);", "-        if (aAST.getType() == TokenTypes.IDENT) {", "-            processIDENT(aAST);", "+        super.visitToken(ast);", "+        if (ast.getType() == TokenTypes.IDENT) {", "+            processIDENT(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcc06750e06c26c32819ae9e0ae37342", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private boolean checkLoop(final DetailAST aAST)", "signatureAfterChange": "     private boolean checkLoop(final DetailAST ast)", "diff": ["-    private boolean checkLoop(final DetailAST aAST)", "+    private boolean checkLoop(final DetailAST ast)", "-        if (aAST.getType() == TokenTypes.LITERAL_DO) {", "-            final DetailAST lparen = aAST.findFirstToken(TokenTypes.DO_WHILE);", "+        if (ast.getType() == TokenTypes.LITERAL_DO) {", "+            final DetailAST lparen = ast.findFirstToken(TokenTypes.DO_WHILE);", "-            final DetailAST rparen = aAST.findFirstToken(TokenTypes.RPAREN);", "+            final DetailAST rparen = ast.findFirstToken(TokenTypes.RPAREN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2bf29d23c6ce761db9f0f28e03d1db1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private DetailAST skipAnnotationOnlyLines(DetailAST aAST)", "signatureAfterChange": "     private DetailAST skipAnnotationOnlyLines(DetailAST ast)", "diff": ["-    private DetailAST skipAnnotationOnlyLines(DetailAST aAST)", "+    private DetailAST skipAnnotationOnlyLines(DetailAST ast)", "-        final DetailAST modifiers = aAST.findFirstToken(TokenTypes.MODIFIERS);", "+        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-            return aAST;", "+            return ast;", "-            return aAST;", "+            return ast;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c76b4972908c665c647546a434b006ac", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocVariableCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (shouldCheck(aAST)) {", "+        if (shouldCheck(ast)) {", "-                contents.getJavadocBefore(aAST.getLineNo());", "+                contents.getJavadocBefore(ast.getLineNo());", "-                log(aAST, \"javadoc.missing\");", "+                log(ast, \"javadoc.missing\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb50a76f113567fc2c6eb1d5e825e7d1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedIfDepthCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            visitLiteralIf(aAST);", "+            visitLiteralIf(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd235ee5f2cbed776bb370c5a882ebb2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isSuperCall(DetailAST aAST)", "signatureAfterChange": "     private boolean isSuperCall(DetailAST ast)", "diff": ["-    private boolean isSuperCall(DetailAST aAST)", "+    private boolean isSuperCall(DetailAST ast)", "-        if (aAST.getType() != TokenTypes.LITERAL_SUPER) {", "+        if (ast.getType() != TokenTypes.LITERAL_SUPER) {", "-        DetailAST parent = aAST.getParent();", "+        DetailAST parent = ast.getParent();", "-        AST sibling = aAST.getNextSibling();", "+        AST sibling = ast.getNextSibling();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d015f009f586ab3d30a1bd0ab9cd8e14", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/NestedTryDepthCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            visitLiteralTry(aAST);", "+            visitLiteralTry(ast);", "-            throw new IllegalStateException(aAST.toString());", "+            throw new IllegalStateException(ast.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b28e14b7010f81a2847594c8eeb9ba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     @Override     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(final DetailAST ast)", "diff": ["-    public void visitToken(final DetailAST aAST)", "+    public void visitToken(final DetailAST ast)", "-        this.checkStyleType(aAST);", "-        this.checkCheckClosingParens(aAST);", "-        this.checkTrailingComma(aAST);", "+        this.checkStyleType(ast);", "+        this.checkCheckClosingParens(ast);", "+        this.checkTrailingComma(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d680a3edf510785e664fb2b64e6a1a06", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/ThrowsCountCheck.java", "commitBeforeChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "commitAfterChange": "50c9bb69bcd93e6fbf272670e8b9d95f2f451c5f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void visitLiteralThrows(DetailAST aAST)", "signatureAfterChange": "     private void visitLiteralThrows(DetailAST ast)", "diff": ["-    private void visitLiteralThrows(DetailAST aAST)", "+    private void visitLiteralThrows(DetailAST ast)", "-        final int count = (aAST.getChildCount() + 1) / 2;", "+        final int count = (ast.getChildCount() + 1) / 2;", "-            log(aAST.getLineNo(),  aAST.getColumnNo(), \"throws.count\",", "+            log(ast.getLineNo(),  ast.getColumnNo(), \"throws.count\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1e6960802706574005149453e464e5a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-            aAST.getLineNo(),", "-            aAST.getColumnNo(),", "+            ast.getLineNo(),", "+            ast.getColumnNo(),", "-            aAST.getText());", "+            ast.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff1b0b4dda24fa88b6fdca5424f476d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final String text = aAST.getText();", "+        final String text = ast.getText();", "-                aAST.getLineNo(),", "-                aAST.getColumnNo(),", "+                ast.getLineNo(),", "+                ast.getColumnNo(),"]}]}
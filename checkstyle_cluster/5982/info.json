{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bbd300fd62be50abc0c4cef0553d79ae", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28cc1ea7016d1f426f178d163e362034", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "d499f72239cec254d620ab1619ac936e233e2033", "commitAfterChange": "c682b5725d22afc38bf19d9667b23a7deab6d8c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethod(MethodSignature aSig)", "signatureAfterChange": "     void verifyMethod(MethodSignature aSig)", "diff": ["-                \"method name '\" + aSig.getName().getText()", "-                + \"' must match pattern '\" + mConfig.getMethodPat() + \"'.\");", "+                \"name.invalidPattern\",", "+                \"method\",", "+                aSig.getName().getText(),", "+                mConfig.getMethodPat());", "-                \"More than \" + mConfig.getMaxParameters() + \" parameters.\");", "+                \"maxParam\", new Integer(mConfig.getMaxParameters()));", "-                \"redundant 'public' modifier.\");", "+                \"redundantModifier\", \"public\");", "-                \"redundant 'abstract' modifier.\");", "+                \"redundantModifier\", \"abstract\");", "-                \"method is missing a Javadoc comment.\");", "+                \"javadoc.missing\", \"method\");", "-                        log(jt.getLineNo(), \"Unused Javadoc tag.\");", "+                        log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca2fa9374c710162bc6165f4dd005c4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "4d0adc9deed7f3df296f8016941414ec1600955b", "commitAfterChange": "1edf43ab329e96db26a3ed3a4f4a1abdaa4b1a3a", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "     private void checkLCurly(int aStartLine,                              MyCommonAST aBrace,                              LeftCurlyOption aOption)", "signatureAfterChange": "     private void checkLCurly(int aStartLine,                              MyCommonAST aBrace,                              LeftCurlyOption aOption)", "diff": ["-                log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "+                log(aBrace.getLineNo(),", "+                    aBrace.getColumnNo(),", "+                    \"'{' should be on a new line.\");", "-                log(aBrace.getLineNo(), \"'{' should be on the previous line.\");", "+                log(aBrace.getLineNo(),", "+                    aBrace.getColumnNo(),", "+                    \"'{' should be on the previous line.\");", "-                    log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "+                    log(aBrace.getLineNo(),", "+                        aBrace.getColumnNo(),", "+                        \"'{' should be on a new line.\");", "+                        aBrace.getColumnNo(),", "-                log(aBrace.getLineNo(), \"'{' should be on a new line.\");", "+                log(aBrace.getLineNo(),", "+                    aBrace.getColumnNo(),", "+                    \"'{' should be on a new line.\");"]}]}
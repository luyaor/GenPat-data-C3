{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a0cb67a9eff5fe264d7705582bb6e85", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f0b7c0f131cc44e62e03efdb53694b7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     protected final void checkExpressionSubtree(         DetailAST aTree,         IndentLevel aLevel,         boolean aFirstLineMatches,         boolean aAllowNesting     )", "signatureAfterChange": "     protected final void checkExpressionSubtree(         DetailAST aTree,         IndentLevel aLevel,         boolean aFirstLineMatches,         boolean aAllowNesting     )", "diff": ["-        LineSet subtreeLines = new LineSet();", "-        int firstLine = getFirstLine(Integer.MAX_VALUE, aTree);", "+        final LineSet subtreeLines = new LineSet();", "+        final int firstLine = getFirstLine(Integer.MAX_VALUE, aTree);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b05c160ec0de8324b9955ad15453c8a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "904de34fcd984edce3d6042a5a17e2a969254588", "commitAfterChange": "46a52f84c014e4d25379f429f11ed3de11fe8ae7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (returnsOnlyBooleanLiteral(thenStatement)", "-            && returnsOnlyBooleanLiteral(elseStatement)) {", "+        if (canReturnOnlyBooleanLiteral(thenStatement)", "+            && canReturnOnlyBooleanLiteral(elseStatement)) {"]}]}
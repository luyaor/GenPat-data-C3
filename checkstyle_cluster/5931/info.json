{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04dfc12e13e2df19eabca500757658eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cafc2f648907d870b08e70569c84af3b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ArrayInitHandler.java", "commitBeforeChange": "343e946b076a5344e380c76e5b3ea23438b6fc93", "commitAfterChange": "e3a48d1527341456a798c3f0c1986de6898a8c60", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     protected IndentLevel getChildrenExpectedLevel()", "signatureAfterChange": "      @Override     protected IndentLevel getChildrenExpectedLevel()", "diff": ["-        // now we accept", "-        // new int[] {1,", "-        //            2};", "-        // and", "-        // new int[] {1, 2,", "-        //     3};", "-", "-            new IndentLevel(getLevel(), getIndentCheck().getArrayInitIndent());", "+            new IndentLevel(getLevel(), getIndentCheck().getArrayInitIndent(),", "+                    getIndentCheck().getLineWrappingIndentation());", "+                expectedIndent.addAcceptedIndent(lcurlyPos + getLineWrappingIndent());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f573fdb2e1ce973f1daf9d4287901703", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/duplicates/StrictDuplicateCodeCheck.java", "commitBeforeChange": "e16c4a8259ed7bf412bfa74ac4cb6b39c467c422", "commitAfterChange": "741454e7f18b1714499eda0c44dbdf75518683b0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public synchronized void process(File[] aFiles)", "signatureAfterChange": "     public synchronized void process(File[] aFiles)", "diff": ["-                ex.printStackTrace(); // TODO", "+                LOG.error(\"Cannot access files to check, giving up: \"", "+                        + ex.getMessage(), ex);", "+                // TODO: better to throw an exception here?", "+                // it would be best to throw IOException from process(),", "+                // but interface definition doesn't allow that...", "+                mLineChecksums = new long[0][0];"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e3489f79965b6d4b432db3718671899", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e09de2718436596027b47b5a5a6392e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "78a5fd3494e8f3fe6e5edd0925f46b43583451fe", "commitAfterChange": "3cd6646941eca3da7d3b9a221c88e4c1d214876e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-    /** recursive method that finds the matches. */\r", "-    private void findMatch()\r", "-    {\r", "-        final boolean foundMatch = mMatcher.find();\r", "-        if (!foundMatch) {\r", "-            return;\r", "-        }\r", "-\r", "-        final int startLine = (mCharacters.get(mMatcher.start()))[0].intValue();\r", "-        final int startColumn = (mCharacters.get(mMatcher.start()))[1]\r", "-                .intValue();\r", "-        final int endLine = (mCharacters.get(mMatcher.end() - 1))[0].intValue();\r", "-        final int endColumn = (mCharacters.get(mMatcher.end() - 1))[1]\r", "-                .intValue();\r", "-\r", "-\r", "-        if (!mOptions.getSuppressor().shouldSuppress(startLine, startColumn,\r", "-                endLine, endColumn))\r", "-        {\r", "-            mCurrentMatches++;\r", "-            if (mCurrentMatches > mOptions.getMaximum()) {\r", "-                if (\"\".equals(mOptions.getMessage())) {\r", "-                    mOptions.getReporter().log(startLine, \"regexp.exceeded\",\r", "-                            mMatcher.pattern().toString());\r", "-                }\r", "-                else {\r", "-                    mOptions.getReporter()\r", "-                            .log(startLine, mOptions.getMessage());\r", "-                }\r", "-            }\r", "-        }\r", "-        findMatch();\r", "-    }\r", "+    /** recursive method that finds the matches. */", "+    private void findMatch()", "+    {", "+        final boolean foundMatch = mMatcher.find();", "+        if (!foundMatch) {", "+            return;", "+        }", "+", "+        final LineColumn start = mText.lineColumn(mMatcher.start());", "+        final LineColumn end = mText.lineColumn(mMatcher.end());", "+", "+        if (!mOptions.getSuppressor().shouldSuppress(start.getLine(),", "+                start.getColumn(), end.getLine(), end.getColumn()))", "+        {", "+            mCurrentMatches++;", "+            if (mCurrentMatches > mOptions.getMaximum()) {", "+                if (\"\".equals(mOptions.getMessage())) {", "+                    mOptions.getReporter().log(start.getLine(),", "+                            \"regexp.exceeded\", mMatcher.pattern().toString());", "+                }", "+                else {", "+                    mOptions.getReporter()", "+                            .log(start.getLine(), mOptions.getMessage());", "+                }", "+            }", "+        }", "+        findMatch();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71266b72e50726e4d08cb17f865fb8cc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "edc63f0d669bc7e02eb3d9cbf83b6c7dcb92501c", "commitAfterChange": "37af13d63384a48aaeefb8d767b0f9ebb053a4a7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-    /** recursive method that finds the matches. */", "+    /** Method that finds the matches. */", "-        final boolean foundMatch = matcher.find();", "-        if (!foundMatch) {", "-            return;", "-        }", "+        boolean foundMatch = matcher.find();", "+        while (foundMatch) {", "+            final LineColumn start = text.lineColumn(matcher.start());", "+            final LineColumn end = text.lineColumn(matcher.end());", "-        final LineColumn start = text.lineColumn(matcher.start());", "-        final LineColumn end = text.lineColumn(matcher.end());", "-", "-        if (!options.getSuppressor().shouldSuppress(start.getLine(),", "-                start.getColumn(), end.getLine(), end.getColumn())) {", "-            currentMatches++;", "-            if (currentMatches > options.getMaximum()) {", "-                if (\"\".equals(options.getMessage())) {", "-                    options.getReporter().log(start.getLine(),", "-                            REGEXP_EXCEEDED, matcher.pattern().toString());", "-                }", "-                else {", "-                    options.getReporter()", "-                            .log(start.getLine(), options.getMessage());", "+            if (!options.getSuppressor().shouldSuppress(start.getLine(),", "+                    start.getColumn(), end.getLine(), end.getColumn())) {", "+                currentMatches++;", "+                if (currentMatches > options.getMaximum()) {", "+                    if (\"\".equals(options.getMessage())) {", "+                        options.getReporter().log(start.getLine(),", "+                                REGEXP_EXCEEDED, matcher.pattern().toString());", "+                    }", "+                    else {", "+                        options.getReporter()", "+                                .log(start.getLine(), options.getMessage());", "+                    }", "+            foundMatch = matcher.find();", "-        findMatch();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa63259d04ee24116a001193a27d4415", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "37af13d63384a48aaeefb8d767b0f9ebb053a4a7", "commitAfterChange": "6f089534ea0b9680f0c76bc1fb3c04d11954a278", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-        boolean foundMatch = matcher.find();", "-        while (foundMatch) {", "-            final LineColumn start = text.lineColumn(matcher.start());", "-            final LineColumn end = text.lineColumn(matcher.end());", "+        try {", "+            boolean foundMatch = matcher.find();", "-            if (!options.getSuppressor().shouldSuppress(start.getLine(),", "-                    start.getColumn(), end.getLine(), end.getColumn())) {", "-                currentMatches++;", "-                if (currentMatches > options.getMaximum()) {", "-                    if (\"\".equals(options.getMessage())) {", "-                        options.getReporter().log(start.getLine(),", "-                                REGEXP_EXCEEDED, matcher.pattern().toString());", "-                    }", "-                    else {", "-                        options.getReporter()", "-                                .log(start.getLine(), options.getMessage());", "+            while (foundMatch) {", "+                final LineColumn start = text.lineColumn(matcher.start());", "+                final LineColumn end = text.lineColumn(matcher.end());", "+", "+                if (!options.getSuppressor().shouldSuppress(start.getLine(),", "+                        start.getColumn(), end.getLine(), end.getColumn())) {", "+                    currentMatches++;", "+                    if (currentMatches > options.getMaximum()) {", "+                        if (\"\".equals(options.getMessage())) {", "+                            options.getReporter().log(start.getLine(),", "+                                    REGEXP_EXCEEDED, matcher.pattern().toString());", "+                        }", "+                        else {", "+                            options.getReporter()", "+                                    .log(start.getLine(), options.getMessage());", "+                        }", "+                foundMatch = matcher.find();", "-            foundMatch = matcher.find();", "+        // see http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6337993 et al.", "+        catch (StackOverflowError e) {", "+            // OK http://blog.igorminar.com/2008/05/catching-stackoverflowerror-and-bug-in.html", "+            // http://programmers.stackexchange.com/questions/", "+            //        209099/is-it-ever-okay-to-catch-stackoverflowerror-in-java", "+            options.getReporter().log(0, STACKOVERFLOW, matcher.pattern().toString());", "+            return;", "+        }", "+"]}]}
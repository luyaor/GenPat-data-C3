{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "608d26fafbd337b6b27b39b6fa6a6a47", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42fe37467af5f4e260b3f37e2e930787", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/bcel/src/checkstyle/com/puppycrawl/tools/checkstyle/bcel/checks/UnusedMethodCheck.java", "commitBeforeChange": "731b581a1c0406506266226c50be8796179464e5", "commitAfterChange": "db428ff350e76d0609e192fc48314cf226677fde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "         protected boolean ignore(String aClassName, Method aMethod)", "signatureAfterChange": "     public boolean ignore(String aClassName, Method aMethod)", "diff": ["-     */    ", "-    protected boolean ignore(String aClassName, Method aMethod)", "-    {", "-        return ignore(aClassName, aMethod.getName());", "-    }", "+    public boolean ignore(String aClassName, Method aMethod)", "+        final String methodName = aMethod.getName();", "+        return (super.ignore(aClassName, aMethod)", "+            || methodName.equals(\"<init>\")", "+            || methodName.equals(\"<clinit>\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71bbec2d07011d377edeaa416b98cfbf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/bcel/src/checkstyle/com/puppycrawl/tools/checkstyle/bcel/checks/AbstractReferenceCheck.java", "commitBeforeChange": "731b581a1c0406506266226c50be8796179464e5", "commitAfterChange": "db428ff350e76d0609e192fc48314cf226677fde", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected boolean ignore(String aClassName, String aName)", "signatureAfterChange": "     protected boolean ignore(String aClassName, FieldOrMethod aFieldOrMethod)", "diff": ["-    protected boolean ignore(String aClassName, String aName)", "+    protected boolean ignore(String aClassName, FieldOrMethod aFieldOrMethod)", "-        return (mIgnoreClassNameRegexp.match(aClassName)", "-            || mIgnoreNameRegexp.match(aName));", "+        final String fieldOrMethodName = aFieldOrMethod.getName();", "+        return (!equalScope(aFieldOrMethod)", "+            || mIgnoreClassNameRegexp.match(aClassName)", "+            || mIgnoreNameRegexp.match(fieldOrMethodName));"]}]}
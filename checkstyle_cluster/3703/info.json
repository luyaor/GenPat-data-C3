{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdfec47b84196825adb823a3ba6e41a0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0998d76bea1bfd0116beefb575133f79", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/Resolver.java", "commitBeforeChange": "c608ff940a62b9717d645c05ad0954578c955430", "commitAfterChange": "69e6c6f4482b3975af3345b1831c48be1ad7f325", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     private IClass resolveBooleanExpression(         SymTabAST expression,         Scope location,         IClass context,         boolean referencePhase)", "signatureAfterChange": "     private IClass resolveBooleanExpression(         SymTabAST expression,         Scope location,         IClass context,         boolean referencePhase)", "diff": ["-        SymTabAST leftChild = (SymTabAST) (expression.getFirstChild());", "-        // handle Checkstyle grammar", "-        while (leftChild.getType() == TokenTypes.LPAREN) {", "-            leftChild = (SymTabAST) leftChild.getNextSibling();", "-        }", "+        SymTabAST leftChild = findLeftChild(expression);", "-        SymTabAST rightChild = (SymTabAST) (leftChild.getNextSibling());", "-        // handle Checkstyle grammar", "-        while (rightChild.getType() == TokenTypes.RPAREN) {", "-            rightChild = (SymTabAST) rightChild.getNextSibling();", "-        }", "+        SymTabAST rightChild = findRightSibling(leftChild);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5113f1459325b73ebd032d3f7cf724d4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/Resolver.java", "commitBeforeChange": "f0be1ede99878862d9dc12bdb32bc4d6447b2426", "commitAfterChange": "21d2edeffda955f71d7b9e545b3b18252363252a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     private MethodSignature resolveParameters(         SymTabAST elist,         Scope location,         IClass context,         boolean referencePhase)", "signatureAfterChange": "     private MethodSignature resolveParameters(         SymTabAST elist,         Scope location,         IClass context,         boolean referencePhase)", "diff": ["-                    (IClass) resolveExpression((SymTabAST) (expr", "-                        .getFirstChild()),", "-                        location,", "-                        context,", "-                        referencePhase);", "+                    resolveExpression((SymTabAST) (expr", "+\t\t\t\t    .getFirstChild()),", "+\t\t\t\t    location,", "+\t\t\t\t    context,", "+\t\t\t\t    referencePhase);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cc7277d478f15f0755ea2e3c7093ff9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dae8c8609fc5e2f78c51aba1c472b9d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/AuditEventDefaultFormatter.java", "commitBeforeChange": "1c16dc90c24f098731284f1b44ddb4b869dd83eb", "commitAfterChange": "5a2b09b7a3b5313f94eeb39d40d04058ae400cf5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private static String getCheckShortName(AuditEvent event)", "signatureAfterChange": "     private static String getCheckShortName(AuditEvent event)", "diff": ["-        return checkFullName.substring(checkFullName.lastIndexOf('.') + 1,", "-            checkFullName.lastIndexOf(\"Check\"));", "+        final String checkShortName;", "+        final int lastDotIndex = checkFullName.lastIndexOf('.');", "+        if (lastDotIndex == -1) {", "+            if (checkFullName.endsWith(SUFFIX)) {", "+                checkShortName = checkFullName.substring(0, checkFullName.lastIndexOf(SUFFIX));", "+            }", "+            else {", "+                checkShortName = checkFullName.substring(0, checkFullName.length());", "+            }", "+        }", "+        else {", "+            if (checkFullName.endsWith(SUFFIX)) {", "+                checkShortName = checkFullName.substring(lastDotIndex + 1,", "+                    checkFullName.lastIndexOf(SUFFIX));", "+            }", "+            else {", "+                checkShortName = checkFullName.substring(lastDotIndex + 1, checkFullName.length());", "+            }", "+        }", "+        return checkShortName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4988ba4c646bce840f9f989e03457f41", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     void verifyNoWSBefore(MyCommonAST aAST);", "signatureAfterChange": "     void verifyNoWSBefore(MyCommonAST aAST)", "diff": ["-    void verifyNoWSBefore(MyCommonAST aAST);", "+    void verifyNoWSBefore(MyCommonAST aAST)", "+    {", "+        if (mConfig.isIgnoreWhitespace()) {", "+            return;", "+        }", "+", "+        final String line = mLines[aAST.getLineNo() - 1];", "+        final int before = aAST.getColumnNo() - 1;", "+        if ((before < 0) || Character.isWhitespace(line.charAt(before))) {", "+            log(aAST.getLineNo(),", "+                \"'\" + aAST.getText() + \"' is preceeded with whitespace.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d68e2842242a781f160c5c3c1ce8fc6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "c4853b445219fd3d31d290c37184e46a8c4161ed", "commitAfterChange": "8d800ef546e11c6d593154f4071e39cdc4f66f34", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void setGroups(String[] aGroups)", "signatureAfterChange": "     public void setGroups(String[] aGroups)", "diff": ["-        // set the default wildcard group to be after the last named group.", "-        mWildcardGroupIndex = aGroups.length;", "-", "-        mGroups = new String[aGroups.length];", "+        mGroups = new Pattern[aGroups.length];", "+            Pattern grp;", "-            // if the pkg name is the wildcard, record the", "-            // position for later reference", "+            // if the pkg name is the wildcard, make it match zero chars", "+            // from any name, so it will always be used as last resort.", "-                mWildcardGroupIndex = i;", "+                grp = Pattern.compile(\"\"); // matches any package", "-            else if (!pkg.endsWith(\".\")) {", "-                pkg = pkg + \".\";", "+            else if (pkg.startsWith(\"/\")) {", "+                if (!pkg.endsWith(\"/\")) {", "+                    throw new IllegalArgumentException(\"Invalid group\");", "+                }", "+                pkg = pkg.substring(1, pkg.length() - 1);", "+                grp = Pattern.compile(pkg);", "+            }", "+            else {", "+                if (!pkg.endsWith(\".\")) {", "+                    pkg = pkg + \".\";", "+                }", "+                grp = Pattern.compile(\"^\" + Pattern.quote(pkg));", "-            mGroups[i] = pkg;", "+            mGroups[i] = grp;"]}]}
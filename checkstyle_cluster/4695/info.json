{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e85ba5131586d6403b523903bf6fd6fe", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12961f07448cc523d489301d0028cda7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "65277d30422d758d9a6195fac042e239131942ec", "commitAfterChange": "7e34b7d4089b49b9cefe727f62e1319ac3e4e135", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void compareKeySets(Set aKeys, Map aFileMap)", "signatureAfterChange": "     private void compareKeySets(Set aKeys, Map aFileMap)", "diff": ["-        Set fls = aFileMap.keySet();", "+        final Set fls = aFileMap.keySet();", "-            File currentFile = (File) iter.next();", "+            final File currentFile = (File) iter.next();", "-            Set currentKeys = (Set) aFileMap.get(currentFile);", "+            final Set currentKeys = (Set) aFileMap.get(currentFile);", "-            Set keysClone = new HashSet(aKeys);", "+            final Set keysClone = new HashSet(aKeys);", "-            LocalizedMessage[] errors = getMessageCollector().getMessages();", "+            final LocalizedMessage[] errors =", "+                getMessageCollector().getMessages();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "138938887fba744cdb54980602ecfa66", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDoclet.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static boolean start(RootDoc aRoot) throws FileNotFoundException", "signatureAfterChange": "     public static boolean start(RootDoc aRoot) throws FileNotFoundException", "diff": ["-        String fileName = getDestFileName(aRoot.options());", "-        FileOutputStream fos = new FileOutputStream(fileName);", "-        PrintStream ps = new PrintStream(fos);", "-        ClassDoc[] classes = aRoot.classes();", "+        final String fileName = getDestFileName(aRoot.options());", "+        final FileOutputStream fos = new FileOutputStream(fileName);", "+        final PrintStream ps = new PrintStream(fos);", "+        final ClassDoc[] classes = aRoot.classes();", "-        FieldDoc[] fields = classes[0].fields();", "+        final FieldDoc[] fields = classes[0].fields();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19802be5beaffd3ede37c2c040cb13fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/OperatorWrapTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void operatorWrapTest() throws Exception", "signatureAfterChange": "      @Test     public void operatorWrapTest() throws Exception", "diff": ["-        Class<OperatorWrapCheck> clazz = OperatorWrapCheck.class;", "-        String messageKey = \"line.new\";", "+        final Class<OperatorWrapCheck> clazz = OperatorWrapCheck.class;", "+        final String messageKey = \"line.new\";", "-        Configuration checkConfig = builder.getCheckConfig(\"OperatorWrap\");", "-        String filePath = builder.getFilePath(\"OperatorWrapInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OperatorWrap\");", "+        final String filePath = builder.getFilePath(\"OperatorWrapInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2162761f46668081a1230e1345cbecd2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testGetDefaultTokens()", "signatureAfterChange": "      @Test     public void testGetDefaultTokens()", "diff": ["-        ModifierOrderCheck modifierOrderCheckObj = new ModifierOrderCheck();", "-        int[] actual = modifierOrderCheckObj.getDefaultTokens();", "-        int[] expected = {TokenTypes.MODIFIERS};", "-        int[] unexpectedEmptyArray = ArrayUtils.EMPTY_INT_ARRAY;", "-        int[] unexpectedArray = {", "+        final ModifierOrderCheck modifierOrderCheckObj = new ModifierOrderCheck();", "+        final int[] actual = modifierOrderCheckObj.getDefaultTokens();", "+        final int[] expected = {TokenTypes.MODIFIERS};", "+        final int[] unexpectedEmptyArray = ArrayUtils.EMPTY_INT_ARRAY;", "+        final int[] unexpectedArray = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23c6d6d0e4cb4d84d703cfc773cbc665", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractTypeAwareCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testTokenToString() throws Exception", "signatureAfterChange": "      @Test     public void testTokenToString() throws Exception", "diff": ["-        Class<?> tokenType = Class", "+        final Class<?> tokenType = Class", "-        Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class, int.class,", "-                int.class);", "-        Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);", "-        Method toString = token.getClass().getDeclaredMethod(\"toString\");", "-        String result = (String) toString.invoke(token);", "+        final Constructor<?> tokenConstructor = tokenType.getDeclaredConstructor(String.class,", "+                int.class, int.class);", "+        final Object token = tokenConstructor.newInstance(\"blablabla\", 1, 1);", "+        final Method toString = token.getClass().getDeclaredMethod(\"toString\");", "+        final String result = (String) toString.invoke(token);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24878dd367db097c05b3666f35857bfd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule461verticalwhitespace/EmptyLineSeparatorTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void emptyLineSeparatorTest() throws Exception", "signatureAfterChange": "      @Test     public void emptyLineSeparatorTest() throws Exception", "diff": ["-        Class<EmptyLineSeparatorCheck> clazz = EmptyLineSeparatorCheck.class;", "-        String messageKey = \"empty.line.separator\";", "+        final Class<EmptyLineSeparatorCheck> clazz = EmptyLineSeparatorCheck.class;", "+        final String messageKey = \"empty.line.separator\";", "-        Configuration checkConfig = builder.getCheckConfig(\"EmptyLineSeparator\");", "-        String filePath = builder.getFilePath(\"EmptyLineSeparatorInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"EmptyLineSeparator\");", "+        final String filePath = builder.getFilePath(\"EmptyLineSeparatorInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a44070f4075b7666cea490f18fc6c9e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "d86a9de35b58eeed409ed9fc3cbef252fda4cb84", "commitAfterChange": "5d7063c660b241bce251f1a8c89394619f2791fb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean checkParams(DetailAST aMethod)", "signatureAfterChange": "     private boolean checkParams(DetailAST aMethod)", "diff": ["-        DetailAST params = aMethod.findFirstToken(TokenTypes.PARAMETERS);", "+        final DetailAST params = aMethod.findFirstToken(TokenTypes.PARAMETERS);", "-        DetailAST paramType = ((DetailAST) params.getFirstChild())", "+        final DetailAST paramType = ((DetailAST) params.getFirstChild())", "-        DetailAST arrayDecl =", "+        final DetailAST arrayDecl =", "-        DetailAST arrayType = (DetailAST) arrayDecl.getFirstChild();", "+        final DetailAST arrayType = (DetailAST) arrayDecl.getFirstChild();", "-            FullIdent type = FullIdent.createFullIdent(arrayType);", "+            final FullIdent type = FullIdent.createFullIdent(arrayType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e2796d7b411be8c7cef608f662b9b79", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4822variabledistance/VariableDeclarationUsageDistanceTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void arrayTypeStyleTest() throws Exception", "signatureAfterChange": "      @Test     public void arrayTypeStyleTest() throws Exception", "diff": ["-        String msgExt = \"variable.declaration.usage.distance.extend\";", "-        Class<VariableDeclarationUsageDistanceCheck> clazz = VariableDeclarationUsageDistanceCheck.class;", "+        final String msgExt = \"variable.declaration.usage.distance.extend\";", "+        final Class<VariableDeclarationUsageDistanceCheck> clazz =", "+                VariableDeclarationUsageDistanceCheck.class;", "-        Configuration checkConfig = builder.getCheckConfig(\"VariableDeclarationUsageDistance\");", "-        String filePath = builder.getFilePath(\"InputVariableDeclarationUsageDistanceCheck\");", "+        final Configuration checkConfig =", "+            builder.getCheckConfig(\"VariableDeclarationUsageDistance\");", "+        final String filePath = builder.getFilePath(\"InputVariableDeclarationUsageDistanceCheck\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f47603274775af63a9ab8b9baab4120", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter5naming/rule522typenames/TypeNameTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void typeNameTest() throws Exception", "signatureAfterChange": "      @Test     public void typeNameTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"TypeName\");", "-        String msgKey = \"name.invalidPattern\";", "-        String format = \"^[A-Z][a-zA-Z0-9]*$\";", "+        final Configuration checkConfig = builder.getCheckConfig(\"TypeName\");", "+        final String msgKey = \"name.invalidPattern\";", "+        final String format = \"^[A-Z][a-zA-Z0-9]*$\";", "-            \"3:7: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"inputHeaderClass\", format),", "-            \"5:22: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"InputHeader___Interface\", format),", "-            \"7:17: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"inputHeaderEnum\", format),", "-            \"9:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"NoValid$Name\", format),", "-            \"11:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"$NoValidName\", format),", "-            \"13:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"NoValidName$\", format),", "+            \"3:7: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"inputHeaderClass\",", "+                format),", "+            \"5:22: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"InputHeader___Interface\",", "+                format),", "+            \"7:17: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"inputHeaderEnum\",", "+                format),", "+            \"9:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"NoValid$Name\",", "+                format),", "+            \"11:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"$NoValidName\",", "+                format),", "+            \"13:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"NoValidName$\",", "+                format),", "-        String filePath = builder.getFilePath(\"TypeNameInput\");", "+        final String filePath = builder.getFilePath(\"TypeNameInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "370fb36d54f9af96850800d693cb6864", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void whitespaceAroundBasicTest() throws Exception", "signatureAfterChange": "      @Test     public void whitespaceAroundBasicTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"WhitespaceAround\");", "-        String msgPreceded = \"ws.notPreceded\";", "-        String msgFollowed = \"ws.notFollowed\";", "+        final Configuration checkConfig = builder.getCheckConfig(\"WhitespaceAround\");", "+        final String msgPreceded = \"ws.notPreceded\";", "+        final String msgFollowed = \"ws.notFollowed\";", "-        String filePath = builder.getFilePath(\"WhitespaceAroundInput_Basic\");", "+        final String filePath = builder.getFilePath(\"WhitespaceAroundInput_Basic\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ddc880472c449dc6160e8c17184dc59", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testEmptyJavadoc() throws Exception", "signatureAfterChange": "      @Test     public void testEmptyJavadoc() throws Exception", "diff": ["-        ListBuffer<String[]> options = new ListBuffer<>();", "+        final ListBuffer<String[]> options = new ListBuffer<>();", "-        ListBuffer<String> names = new ListBuffer<>();", "+        final ListBuffer<String> names = new ListBuffer<>();", "-        Context context = new Context();", "+        final Context context = new Context();", "-        JavadocTool javadocTool = JavadocTool.make0(context);", "-        RootDoc rootDoc = getRootDoc(javadocTool, options, names);", "+        final JavadocTool javadocTool = JavadocTool.make0(context);", "+        final RootDoc rootDoc = getRootDoc(javadocTool, options, names);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "446de14ebd165eda98daefb824b83d04", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static FilterSet loadSuppressions(             InputSource aSource, String aSourceName)         throws CheckstyleException", "signatureAfterChange": "     private static FilterSet loadSuppressions(             InputSource aSource, String aSourceName)         throws CheckstyleException", "diff": ["-        catch (FileNotFoundException e) {", "+        catch (final FileNotFoundException e) {", "-        catch (ParserConfigurationException e) {", "+        catch (final ParserConfigurationException e) {", "-        catch (SAXException e) {", "+        catch (final SAXException e) {", "-        catch (IOException e) {", "+        catch (final IOException e) {", "-        catch (NumberFormatException e) {", "+        catch (final NumberFormatException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4933253289b65febcfb06a422f60832c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "     public void leaveToken(DetailAST aAST)", "diff": ["-        int tokenType = aAST.getType();", "+        final int tokenType = aAST.getType();", "-            Counter counter = (Counter) mCounters.pop();", "+            final Counter counter = (Counter) mCounters.pop();", "-            int count = counter.getCount();", "+            final int count = counter.getCount();", "-            Counter counter = (Counter) mCounters.pop();", "+            final Counter counter = (Counter) mCounters.pop();", "-            int count = counter.getCount();", "+            final int count = counter.getCount();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aa60d54131a820214e540eced6d5e3d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/PackageNamesLoaderTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testPackagesWithDots() throws Exception", "signatureAfterChange": "      @Test     @SuppressWarnings(\"unchecked\")     public void testPackagesWithDots() throws Exception", "diff": ["-        Constructor<PackageNamesLoader> constructor =", "+        final Constructor<PackageNamesLoader> constructor =", "-        PackageNamesLoader loader = constructor.newInstance();", "+        final PackageNamesLoader loader = constructor.newInstance();", "-        Attributes attributes = mock(Attributes.class);", "+        final Attributes attributes = mock(Attributes.class);", "-        Field field = PackageNamesLoader.class.getDeclaredField(\"packageNames\");", "+        final Field field = PackageNamesLoader.class.getDeclaredField(\"packageNames\");", "-        Set<String> list = (Set<String>) field.get(loader);", "+        final Set<String> list = (Set<String>) field.get(loader);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4abca3a52fff845486becfb9ca6a9585", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/CommitValidationTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private static List<RevCommit> getCommitsByLastCommitAuthor(             Iterator<RevCommit> previousCommitsIterator)", "signatureAfterChange": "      private static List<RevCommit> getCommitsByLastCommitAuthor(             Iterator<RevCommit> previousCommitsIterator)", "diff": ["-        List<RevCommit> commits = new LinkedList<>();", "+        final List<RevCommit> commits = new LinkedList<>();", "-            RevCommit lastCommit = previousCommitsIterator.next();", "-            String lastCommitAuthor = lastCommit.getAuthorIdent().getName();", "+            final RevCommit lastCommit = previousCommitsIterator.next();", "+            final String lastCommitAuthor = lastCommit.getAuthorIdent().getName();", "-                RevCommit currentCommit = previousCommitsIterator.next();", "-                String currentCommitAuthor = currentCommit.getAuthorIdent().getName();", "+                final RevCommit currentCommit = previousCommitsIterator.next();", "+                final String currentCommitAuthor = currentCommit.getAuthorIdent().getName();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52be452ee85c0a62b6e00eb642a108b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testCorrect() throws Exception", "signatureAfterChange": "      @Test     public void testCorrect() throws Exception", "diff": ["-        ListBuffer<String[]> options = new ListBuffer<>();", "+        final ListBuffer<String[]> options = new ListBuffer<>();", "-        ListBuffer<String> names = new ListBuffer<>();", "+        final ListBuffer<String> names = new ListBuffer<>();", "-        Context context = new Context();", "+        final Context context = new Context();", "-        JavadocTool javadocTool = JavadocTool.make0(context);", "-        RootDoc rootDoc = getRootDoc(javadocTool, options, names);", "+        final JavadocTool javadocTool = JavadocTool.make0(context);", "+        final RootDoc rootDoc = getRootDoc(javadocTool, options, names);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55fd10f34da037aaee608058357889b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3sourcefile/EmptyLineSeparatorTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void emptyLineSeparatorTest() throws Exception", "signatureAfterChange": "      @Test     public void emptyLineSeparatorTest() throws Exception", "diff": ["-        Class<EmptyLineSeparatorCheck> clazz = EmptyLineSeparatorCheck.class;", "-        String messageKey = \"empty.line.separator\";", "+        final Class<EmptyLineSeparatorCheck> clazz = EmptyLineSeparatorCheck.class;", "+        final String messageKey = \"empty.line.separator\";", "-        Configuration checkConfig = builder.getCheckConfig(\"EmptyLineSeparator\");", "-        String filePath = builder.getFilePath(\"EmptyLineSeparatorInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"EmptyLineSeparator\");", "+        final String filePath = builder.getFilePath(\"EmptyLineSeparatorInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a4802e127e1d0975ad33129697ad898", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void badTest() throws Exception", "signatureAfterChange": "      @Test     public void badTest() throws Exception", "diff": ["-        Class<OneTopLevelClassCheck> clazz = OneTopLevelClassCheck.class;", "-        String messageKey = \"one.top.level.class\";", "+        final Class<OneTopLevelClassCheck> clazz = OneTopLevelClassCheck.class;", "+        final String messageKey = \"one.top.level.class\";", "-        Configuration checkConfig = builder.getCheckConfig(\"OneTopLevelClass\");", "-        String filePath = builder.getFilePath(\"OneTopLevelClassInput_Basic\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OneTopLevelClass\");", "+        final String filePath = builder.getFilePath(\"OneTopLevelClassInput_Basic\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6905084e35be77b179d07401c245b8df", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule4821onevariablepreline/MultipleVariableDeclarationsTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void multipleVariableDeclarationsTest() throws Exception", "signatureAfterChange": "      @Test     public void multipleVariableDeclarationsTest() throws Exception", "diff": ["-        String msgComma = getCheckMessage(MultipleVariableDeclarationsCheck.class, \"multiple.variable.declarations.comma\");", "-        String msg = getCheckMessage(MultipleVariableDeclarationsCheck.class, \"multiple.variable.declarations\");", "+        final String msgComma = getCheckMessage(MultipleVariableDeclarationsCheck.class,", "+            \"multiple.variable.declarations.comma\");", "+        final String msg = getCheckMessage(MultipleVariableDeclarationsCheck.class,", "+            \"multiple.variable.declarations\");", "-        Configuration checkConfig = builder.getCheckConfig(\"MultipleVariableDeclarations\");", "-        String filePath = builder.getFilePath(\"MultipleVariableDeclarationsInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"MultipleVariableDeclarations\");", "+        final String filePath = builder.getFilePath(\"MultipleVariableDeclarationsInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70832ced97ea0931e748d437139ba43e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void checkForParams()", "signatureAfterChange": "     private void checkForParams()", "diff": ["-        IndentLevel expected = new IndentLevel(getLevel(), getBasicOffset());", "+        final IndentLevel expected =", "+            new IndentLevel(getLevel(), getBasicOffset());", "+        final DetailAST init = getMainAst().findFirstToken(TokenTypes.FOR_INIT);", "-        DetailAST init = getMainAst().findFirstToken(TokenTypes.FOR_INIT);", "-            DetailAST cond =", "+            final DetailAST cond =", "-            DetailAST iter =", "+            final DetailAST iter =", "-            DetailAST forEach =", "+            final DetailAST forEach ="]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73a1235a2cc592f064df59768139da1a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void bad3Test() throws Exception", "signatureAfterChange": "      @Test     public void bad3Test() throws Exception", "diff": ["-        Class<OneTopLevelClassCheck> clazz = OneTopLevelClassCheck.class;", "-        String messageKey = \"one.top.level.class\";", "+        final Class<OneTopLevelClassCheck> clazz = OneTopLevelClassCheck.class;", "+        final String messageKey = \"one.top.level.class\";", "-        Configuration checkConfig = builder.getCheckConfig(\"OneTopLevelClass\");", "-        String filePath = builder.getFilePath(\"OneTopLevelClassBad3\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OneTopLevelClass\");", "+        final String filePath = builder.getFilePath(\"OneTopLevelClassBad3\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c053f69ec8dd41f0f396f1adfa5aff8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/MethodParamPadTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void operatorWrapTest() throws Exception", "signatureAfterChange": "      @Test     public void operatorWrapTest() throws Exception", "diff": ["-        Class<MethodParamPadCheck> clazz = MethodParamPadCheck.class;", "-        String messageKey = \"line.previous\";", "+        final Class<MethodParamPadCheck> clazz = MethodParamPadCheck.class;", "+        final String messageKey = \"line.previous\";", "-        Configuration checkConfig = builder.getCheckConfig(\"MethodParamPad\");", "-        String filePath = builder.getFilePath(\"MethodParamPadInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"MethodParamPad\");", "+        final String filePath = builder.getFilePath(\"MethodParamPadInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d01b0b1116b943a1e3a5f2e8ec59d49", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/modifier/ModifierOrderCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        ModifierOrderCheck modifierOrderCheckObj = new ModifierOrderCheck();", "-        int[] actual = modifierOrderCheckObj.getAcceptableTokens();", "-        int[] expected = {TokenTypes.MODIFIERS};", "-        int[] unexpectedEmptyArray = ArrayUtils.EMPTY_INT_ARRAY;", "-        int[] unexpectedArray = {", "+        final ModifierOrderCheck modifierOrderCheckObj = new ModifierOrderCheck();", "+        final int[] actual = modifierOrderCheckObj.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.MODIFIERS};", "+        final int[] unexpectedEmptyArray = ArrayUtils.EMPTY_INT_ARRAY;", "+        final int[] unexpectedArray = {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81a68709a5267514c63999b959d37712", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/api/DetailASTTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private static void checkTree(final DetailAST node,                            final DetailAST parent,                            final DetailAST prev,                            final String filename,                            final DetailAST root)", "signatureAfterChange": "      private static void checkTree(final DetailAST node,                            final DetailAST parent,                            final DetailAST prev,                            final String filename,                            final DetailAST root)", "diff": ["-        Object[] params = {", "+        final Object[] params = {", "-        MessageFormat badParentFormatter = new MessageFormat(", "+        final MessageFormat badParentFormatter = new MessageFormat(", "-        String badParentMsg = badParentFormatter.format(params);", "+        final String badParentMsg = badParentFormatter.format(params);", "-        MessageFormat badPrevFormatter = new MessageFormat(", "+        final MessageFormat badPrevFormatter = new MessageFormat(", "-        String badPrevMsg = badPrevFormatter.format(params);", "+        final String badPrevMsg = badPrevFormatter.format(params);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ba51adfdbe0cc422f6141b76d8035db", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter5naming/rule523methodnames/MethodNameTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void methodNameTest() throws Exception", "signatureAfterChange": "      @Test     public void methodNameTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"MethodName\");", "-        String msgKey = \"name.invalidPattern\";", "-        String format = \"^[a-z][a-z0-9][a-zA-Z0-9_]*$\";", "+        final Configuration checkConfig = builder.getCheckConfig(\"MethodName\");", "+        final String msgKey = \"name.invalidPattern\";", "+        final String format = \"^[a-z][a-z0-9][a-zA-Z0-9_]*$\";", "-        String filePath = builder.getFilePath(\"InputMethodName\");", "+        final String filePath = builder.getFilePath(\"InputMethodName\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91bbf3834033a433709d50399a5deec7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testIncorrect() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrect() throws Exception", "diff": ["-        String msgFirstSentence = getCheckMessage(SummaryJavadocCheck.class, \"summary.first.sentence\");", "-        String msgForbiddenFragment = getCheckMessage(SummaryJavadocCheck.class, \"summary.javaDoc\");", "+        final String msgFirstSentence = getCheckMessage(SummaryJavadocCheck.class,", "+            \"summary.first.sentence\");", "+        final String msgForbiddenFragment = getCheckMessage(SummaryJavadocCheck.class,", "+            \"summary.javaDoc\");", "-        Configuration checkConfig = builder.getCheckConfig(\"SummaryJavadocCheck\");", "-        String filePath = builder.getFilePath(\"InputIncorrectSummaryJavaDocCheck\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"SummaryJavadocCheck\");", "+        final String filePath = builder.getFilePath(\"InputIncorrectSummaryJavaDocCheck\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f0cfcc06a390add7af773da4a3bbccd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "signatureAfterChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "diff": ["-        int startLine = aLines.firstLine();", "-        int endLine = aLines.lastLine();", "-        int startCol = aLines.firstLineCol();", "+        final int startLine = aLines.firstLine();", "+        final int endLine = aLines.lastLine();", "+        final int startCol = aLines.firstLineCol();", "-        int realStartCol = getLineStart(mIndentCheck.getLines()[startLine - 1]);", "+        final int realStartCol =", "+            getLineStart(mIndentCheck.getLines()[startLine - 1]);", "-            Integer col = aLines.getStartColumn(new Integer(i));", "+            final Integer col = aLines.getStartColumn(new Integer(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a15b77497096d91e07720f8d13b10ff3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/PackageHtmlCheck.java", "commitBeforeChange": "92707fb90a88929a19ac67a440f9376c3a3f321c", "commitAfterChange": "65277d30422d758d9a6195fac042e239131942ec", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void process(File[] aFiles)", "signatureAfterChange": "     public void process(File[] aFiles)", "diff": ["-        File[] javaFiles = filter(aFiles);", "-        Set directories = getParentDirs(javaFiles);", "+        final File[] javaFiles = filter(aFiles);", "+        final Set directories = getParentDirs(javaFiles);", "-            File dir = (File) it.next();", "-            File packageHtml = new File(dir, \"package.html\");", "-            MessageDispatcher dispatcher = getMessageDispatcher();", "+            final File dir = (File) it.next();", "+            final File packageHtml = new File(dir, \"package.html\");", "+            final MessageDispatcher dispatcher = getMessageDispatcher();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad24917a5a7b671fa5f9a603372ffdb6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDocletTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void testNotConstants() throws Exception", "signatureAfterChange": "      @Test     public void testNotConstants() throws Exception", "diff": ["-        ListBuffer<String[]> options = new ListBuffer<>();", "+        final ListBuffer<String[]> options = new ListBuffer<>();", "-        ListBuffer<String> names = new ListBuffer<>();", "+        final ListBuffer<String> names = new ListBuffer<>();", "-        Context context = new Context();", "+        final Context context = new Context();", "-        JavadocTool javadocTool = JavadocTool.make0(context);", "-        RootDoc rootDoc = getRootDoc(javadocTool, options, names);", "+        final JavadocTool javadocTool = JavadocTool.make0(context);", "+        final RootDoc rootDoc = getRootDoc(javadocTool, options, names);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad31877a2b69f0be89cd26afc1427578", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public void checkIndentation()", "signatureAfterChange": "     public void checkIndentation()", "diff": ["-        LineSet lines = new LineSet();", "+        final LineSet lines = new LineSet();", "-        DetailAST ident = getMainAst().findFirstToken(TokenTypes.IDENT);", "-        int lineStart = getLineStart(ident);", "+        final DetailAST ident = getMainAst().findFirstToken(TokenTypes.IDENT);", "+        final int lineStart = getLineStart(ident);", "-        DetailAST impl = getMainAst().findFirstToken(", "+        final DetailAST impl = getMainAst().findFirstToken(", "-        DetailAST ext = getMainAst().findFirstToken(TokenTypes.EXTENDS_CLAUSE);", "+        final DetailAST ext =", "+            getMainAst().findFirstToken(TokenTypes.EXTENDS_CLAUSE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbb0275f1e54b300392805225e77a5ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     public static Configuration loadConfiguration(String aConfig,         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)         throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(String aConfig,         PropertyResolver aOverridePropsResolver, boolean aOmitIgnoredModules)         throws CheckstyleException", "diff": ["-            catch (MalformedURLException ex) {", "+            catch (final MalformedURLException ex) {", "-        catch (FileNotFoundException e) {", "+        catch (final FileNotFoundException e) {", "-        catch (IOException e) {", "+        catch (final IOException e) {", "-        catch (CheckstyleException e) {", "+        catch (final CheckstyleException e) {", "-                catch (IOException e) {", "+                catch (final IOException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf45387045daeacf2c9f23c7ad5cf943", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      @Test     public void testGetAllAnnotationValuesWrongArg() throws ReflectiveOperationException", "signatureAfterChange": "      @Test     public void testGetAllAnnotationValuesWrongArg() throws ReflectiveOperationException", "diff": ["-        SuppressWarningsHolder holder = new SuppressWarningsHolder();", "-        Method getAllAnnotationValues = holder.getClass()", "+        final SuppressWarningsHolder holder = new SuppressWarningsHolder();", "+        final Method getAllAnnotationValues = holder.getClass()", "-        DetailAST methodDef = new DetailAST();", "+        final DetailAST methodDef = new DetailAST();", "-        DetailAST lparen = new DetailAST();", "+        final DetailAST lparen = new DetailAST();", "-        DetailAST parent = new DetailAST();", "+        final DetailAST parent = new DetailAST();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbb00b347d039827490e339ac4ecda2f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreack/OperatorWrapTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void operatorWrapTestAssign() throws Exception", "signatureAfterChange": "      @Test     public void operatorWrapTestAssign() throws Exception", "diff": ["-        DefaultConfiguration newCheckConfig = createCheckConfig(OperatorWrapCheck.class);", "+        final DefaultConfiguration newCheckConfig = createCheckConfig(OperatorWrapCheck.class);", "-        String messageKey = \"line.previous\";", "-        Class<OperatorWrapCheck> clazz = OperatorWrapCheck.class;", "+        final String messageKey = \"line.previous\";", "+        final Class<OperatorWrapCheck> clazz = OperatorWrapCheck.class;", "-        String filePath = builder.getFilePath(\"OperatorWrapAssignInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final String filePath = builder.getFilePath(\"OperatorWrapAssignInput\");", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccb963726d0e259802a17bfcb2be9bfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private Properties createOverridingProperties()", "signatureAfterChange": "     private Properties createOverridingProperties()", "diff": ["-            catch (FileNotFoundException e) {", "+            catch (final FileNotFoundException e) {", "-            catch (IOException e) {", "+            catch (final IOException e) {", "-                catch (IOException e) {", "+                catch (final IOException e) {", "-        for (Iterator it = antProps.keySet().iterator(); it.hasNext();) {", "+        for (final Iterator it = antProps.keySet().iterator(); it.hasNext();) {", "-        for (Iterator it = mOverrideProps.iterator(); it.hasNext();) {", "+        for (final Iterator it = mOverrideProps.iterator(); it.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5708c4fe0dcc4f557351b56936bf74a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final void contextualize(Context aContext)         throws CheckstyleException", "signatureAfterChange": "     public final void contextualize(Context aContext)         throws CheckstyleException", "diff": ["-        BeanUtilsBean beanUtils = createBeanUtilsBean();", "+        final BeanUtilsBean beanUtils = createBeanUtilsBean();", "-            catch (InvocationTargetException e) {", "+            catch (final InvocationTargetException e) {", "-            catch (IllegalAccessException e) {", "+            catch (final IllegalAccessException e) {", "-            catch (IllegalArgumentException e) {", "+            catch (final IllegalArgumentException e) {", "-            catch (ConversionException e) {", "+            catch (final ConversionException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db87bd11297a47a457cdfb42a5587051", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule3421overloadsplit/OverloadMethodsDeclarationOrderTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void overloadMethodsTest() throws Exception", "signatureAfterChange": "      @Test     public void overloadMethodsTest() throws Exception", "diff": ["-        Class<OverloadMethodsDeclarationOrderCheck> clazz = OverloadMethodsDeclarationOrderCheck.class;", "-        String messageKey = \"overload.methods.declaration\";", "+        final Class<OverloadMethodsDeclarationOrderCheck> clazz =", "+            OverloadMethodsDeclarationOrderCheck.class;", "+        final String messageKey = \"overload.methods.declaration\";", "-        Configuration checkConfig = builder.getCheckConfig(\"OverloadMethodsDeclarationOrder\");", "-        String filePath = builder.getFilePath(\"InputOverloadMethodsDeclarationOrder\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OverloadMethodsDeclarationOrder\");", "+        final String filePath = builder.getFilePath(\"InputOverloadMethodsDeclarationOrder\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8940deb748b24bc15829b39d0261e11", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter3filestructure/rule341onetoplevel/OneTopLevelClassTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void bad2Test() throws Exception", "signatureAfterChange": "      @Test     public void bad2Test() throws Exception", "diff": ["-        Class<OneTopLevelClassCheck> clazz = OneTopLevelClassCheck.class;", "-        String messageKey = \"one.top.level.class\";", "+        final Class<OneTopLevelClassCheck> clazz = OneTopLevelClassCheck.class;", "+        final String messageKey = \"one.top.level.class\";", "-        Configuration checkConfig = builder.getCheckConfig(\"OneTopLevelClass\");", "-        String filePath = builder.getFilePath(\"OneTopLevelClassBad2\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"OneTopLevelClass\");", "+        final String filePath = builder.getFilePath(\"OneTopLevelClassBad2\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f96fcbf14b402625314340ad69446217", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule411bracesareused/NeedBracesTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void needBracesTest() throws Exception", "signatureAfterChange": "      @Test     public void needBracesTest() throws Exception", "diff": ["-        Class<NeedBracesCheck> clazz = NeedBracesCheck.class;", "-        String messageKey = \"needBraces\";", "+        final Class<NeedBracesCheck> clazz = NeedBracesCheck.class;", "+        final String messageKey = \"needBraces\";", "-        Configuration checkConfig = builder.getCheckConfig(\"NeedBraces\");", "-        String filePath = builder.getFilePath(\"NeedBracesInput\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"NeedBraces\");", "+        final String filePath = builder.getFilePath(\"NeedBracesInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc7cc03dd56b58114ba271bb29008578", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule462horizontalwhitespace/WhitespaceAroundTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void whitespaceAroundGenericsTest() throws Exception", "signatureAfterChange": "      @Test     public void whitespaceAroundGenericsTest() throws Exception", "diff": ["-        String msgPreceded = \"ws.preceded\";", "-        String msgFollowed = \"ws.followed\";", "-        Configuration checkConfig = builder.getCheckConfig(\"GenericWhitespace\");", "+        final String msgPreceded = \"ws.preceded\";", "+        final String msgFollowed = \"ws.followed\";", "+        final Configuration checkConfig = builder.getCheckConfig(\"GenericWhitespace\");", "-        String filePath = builder.getFilePath(\"WhitespaceAroundInput_Generics\");", "+        final String filePath = builder.getFilePath(\"WhitespaceAroundInput_Generics\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}]}
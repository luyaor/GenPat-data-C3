{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e4d2787d54d409eb27ca9c62349b91c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12e4a03fa014bf56c4317c25bfb0640c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/AbstractLoader.java", "commitBeforeChange": "02e614f09151d4875502b60e6eb2a1cecf80485d", "commitAfterChange": "384b21e73586345c8622cc3c0a0f1abc59168a03", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public InputSource resolveEntity(String aPublicId, String aSystemId)         throws SAXException", "signatureAfterChange": "     public InputSource resolveEntity(String aPublicId, String aSystemId)         throws SAXException", "diff": ["-", "-        return super.resolveEntity(aPublicId, aSystemId);", "+        // This is a hack to workaround problem with SAX", "+        // DefaultHeader.resolveEntity():", "+        // sometimes it throws SAX- and IO- exceptions", "+        // sometime SAX only :(", "+        try {", "+            if (false) {", "+                throw new IOException(\"\");", "+            }", "+            return super.resolveEntity(aPublicId, aSystemId);", "+        }", "+        catch (IOException e) {", "+            throw new SAXException(\"\" + e, e);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4070dbf90d90adc942ca0a1030387a53", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "commitBeforeChange": "d740f2e1cdb05f20a48bf7d5dcebdcd0faae6ddd", "commitAfterChange": "3ef918920c58c550169ccef3cfe1706aede11a6e", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private AuditListener[] getListeners() throws IOException", "signatureAfterChange": "     private AuditListener[] getListeners()", "diff": ["-    private AuditListener[] getListeners() throws IOException {", "+    private AuditListener[] getListeners() {", "-        if (formatters.isEmpty()) {", "-            final OutputStream debug = new LogOutputStream(this,", "-                    Project.MSG_DEBUG);", "-            final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);", "-            listeners[0] = new DefaultLogger(debug, true, err, true);", "-        }", "-        else {", "-            for (int i = 0; i < formatterCount; i++) {", "-                final Formatter formatter = formatters.get(i);", "-                listeners[i] = formatter.createListener(this);", "+        try {", "+            if (formatters.isEmpty()) {", "+                final OutputStream debug = new LogOutputStream(this, Project.MSG_DEBUG);", "+                final OutputStream err = new LogOutputStream(this, Project.MSG_ERR);", "+                listeners[0] = new DefaultLogger(debug, true, err, true);", "+            else {", "+                for (int i = 0; i < formatterCount; i++) {", "+                    final Formatter formatter = formatters.get(i);", "+                    listeners[i] = formatter.createListener(this);", "+                }", "+            }", "+        }", "+        catch (IOException e) {", "+            throw new BuildException(String.format(\"Unable to create listeners: \"", "+                    + \"formatters {%s}.\", formatters), e);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75646e2f86f0a41c83347812fbd72b53", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15e9dfc8272488f4fdc75919d9cae262", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/api/AutomaticBeanTest.java", "commitBeforeChange": "315033ff5647ef9896130573d9212fee6fe141db", "commitAfterChange": "fbfe160ca83f91f9093e2c8122709f1163324edf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testNoSuchAttribute()", "signatureAfterChange": "      @Test(expected = CheckstyleException.class)     public void testNoSuchAttribute() throws CheckstyleException", "diff": ["-", "-    public void testNoSuchAttribute()", "+    @Test(expected = CheckstyleException.class)", "+    public void testNoSuchAttribute() throws CheckstyleException", "-        try {", "-            mTestBean.configure(mConf);", "-            fail(\"AutomaticBean.configure() accepted nonexisting attribute name\");", "-        }", "-        catch (CheckstyleException ex)", "-        {", "-            // expected exception", "-        }", "-        assertEquals(mTestBean.mName, null);", "-", "+        mTestBean.configure(mConf);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18e4a98cf8049d29bcf5dc419d6ea4dd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/UtilsTest.java", "commitBeforeChange": "fbfe160ca83f91f9093e2c8122709f1163324edf", "commitAfterChange": "ee68e92168e132ff16622a2593dcb5128ad024e6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testBadRegex()", "signatureAfterChange": "      @Test(expected = ConversionException.class)     public void testBadRegex()", "diff": ["+    @Test(expected = ConversionException.class)", "-        try {", "-            Utils.createPattern(\"[\");", "-            fail(\"expected to get conversion exception\");", "-        }", "-        catch (ConversionException e) {", "-            ; // what is expected", "-        }", "+        Utils.createPattern(\"[\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52b4cd6d21691fbab2f71aad0d3037ff", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/api/ScopeTest.java", "commitBeforeChange": "fbfe160ca83f91f9093e2c8122709f1163324edf", "commitAfterChange": "ee68e92168e132ff16622a2593dcb5128ad024e6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testMisc()", "signatureAfterChange": "     @Test(expected = IllegalArgumentException.class)     public void testMisc()", "diff": ["+    @Test(expected = IllegalArgumentException.class)", "-        try {", "-            Scope.getInstance(\"unknown\");", "-            fail();", "-        }", "-        catch (IllegalArgumentException e) {", "-            // As expected", "-        }", "+        Scope.getInstance(\"unknown\"); // will fail"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b0e91ea77761731d81b4d46d193fe4c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheckTest.java", "commitBeforeChange": "ff6c49e6a715d8372ac77a34aa77d9eaff6db154", "commitAfterChange": "911065320fb39299f442ea08f775cfe08ba2a2ed", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testSetLineSeparatorFailure()         throws Exception", "signatureAfterChange": "      @Test(expected=CheckstyleException.class)     public void testSetLineSeparatorFailure()         throws Exception", "diff": ["-    @Test", "+    @Test(expected=CheckstyleException.class)", "-        try {", "-            createChecker(checkConfig);", "-        }", "-        catch (CheckstyleException ex) {", "-            return;", "-        }", "-        fail(\"should throw conversion exception\");", "+        createChecker(checkConfig);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98144711ebdd778080c39132eecf5cf3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/imports/AccessResultTest.java", "commitBeforeChange": "fbfe160ca83f91f9093e2c8122709f1163324edf", "commitAfterChange": "ee68e92168e132ff16622a2593dcb5128ad024e6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testBadname()", "signatureAfterChange": "      @Test(expected = IllegalArgumentException.class)     public void testBadname()", "diff": ["+    @Test(expected = IllegalArgumentException.class)", "-        try {", "-            AccessResult.getInstance(\"badname\");", "-            fail(\"should not get here\");", "-        }", "-        catch (IllegalArgumentException ex) {", "-            ;", "-        }", "+        AccessResult.getInstance(\"badname\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c211c57fe837e159cb39688d0833292e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporterTest.java", "commitBeforeChange": "17754d363645285e49bf4323a1af5762af47a8ea", "commitAfterChange": "a1422eed4e0261824f48a1ddf647dd90cb67063a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "          @Test     public void testCustomMessageWithParametersNegative() throws CheckstyleException", "signatureAfterChange": "      @Test(expected=IllegalArgumentException.class)     public void testCustomMessageWithParametersNegative() throws CheckstyleException", "diff": ["-    ", "-    @Test", "+", "+    @Test(expected=IllegalArgumentException.class)", "-        ", "+", "-        ", "+", "-        try {", "-            messages[0].getMessage();", "-            Assert.fail(\"Didn't receive expected exception.\");", "-        }", "-        catch (IllegalArgumentException e) {", "-            //expected", "-        }", "+        messages[0].getMessage();"]}]}
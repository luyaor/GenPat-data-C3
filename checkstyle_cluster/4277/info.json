{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0c77207e567a0bd91d3517563871e17", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b5c9043016c5dca446d3c9f692f5c90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "dc3fc5fab0cb1cadd5793065d8e44bbd2c5f67e2", "commitAfterChange": "0855fff95e4aac170ac5ab74cd1872f20555a214", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "signatureAfterChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "diff": ["-            // TODO: not sure if this does anything, look at taking it out", "-", "-            // TODO: we can check here if this line starts or the previous", "-            // line ends in a dot.  If so, we should increase the indent.", "-", "-            // TODO: check if -2 is possible here?  but unlikely to be a", "-            // problem...", "-            String thisLine = mIndentCheck.getLines()[i - 1];", "-            String prevLine = mIndentCheck.getLines()[i - 2];", "-            if (thisLine.matches(\"^\\\\s*\\\\.\")", "-                || prevLine.matches(\"\\\\.\\\\s*$\"))", "-            {", "-                aIndentLevel = new IndentLevel(aIndentLevel, getBasicOffset());", "-            }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f64df09fee667d559ca800b8a278fa1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "commitAfterChange": "289ef67e9e9ee424723b8aa22ae7a6d31f126d23", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "signatureAfterChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "diff": ["-        // calculate the previous line length without trailing whitespace. Need", "-        // to handle the case where there is no previous line, cause the line", "-        // being check is the first line in the file.", "-        final int prevLineLen = brace.getLineNo() == 1", "-            ? maxLineLength", "-            : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));", "-", "-                validateEol(brace, braceLine, prevLineLen);", "+                validateEol(brace, braceLine);", "-                validateNewLinePosion(brace, startToken, braceLine, prevLineLen);", "+                validateNewLinePosion(brace, startToken, braceLine);"]}]}
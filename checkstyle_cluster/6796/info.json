{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "294764d33f8f1afdd6990fe24dcb6b84", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eada5334b5c39334745e769d9136367", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int process(List<File> aFiles)", "signatureAfterChange": "     public int process(List<File> aFiles)", "diff": ["+        // Prepare to start", "-            fsc.process(aFiles);", "+            fsc.beginProcessing();", "+        }", "+", "+        // Process each file", "+        for (File f : aFiles) {", "+            final String fileName = f.getAbsolutePath();", "+            fireFileStarted(fileName);", "+            final TreeSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "+            try {", "+                // TODO: Need to use , getCharset()", "+                final String[] lines = Utils.getLines(f.getAbsolutePath());", "+                final List<String> theLines = Lists.newArrayList(lines);", "+                for (FileSetCheck fsc : mFileSetChecks) {", "+                    fileMessages.addAll(fsc.process(f, theLines));", "+                }", "+            }", "+            catch (final FileNotFoundException fnfe) {", "+                Utils.getExceptionLogger().debug(", "+                        \"FileNotFoundException occured.\", fnfe);", "+                fileMessages.add(new LocalizedMessage(0,", "+                        Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,", "+                        null, this.getClass(), null));", "+            }", "+            catch (final IOException ioe) {", "+                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);", "+                fileMessages.add(new LocalizedMessage(0,", "+                        Defn.CHECKSTYLE_BUNDLE, \"general.exception\",", "+                        new String[] {ioe.getMessage()}, null, this.getClass(),", "+                        null));", "+            }", "+            fireErrors(fileName, fileMessages);", "+            fireFileFinished(fileName);", "+        }", "+", "+        // Finish up", "+        for (FileSetCheck fsc : mFileSetChecks) {", "+            // They may also log!!!", "+            fsc.finishProcessing();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6732a8f34215f4b54b936be5710bd7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "f34eba11cbd8559d4d06f96e19affa70abaf86ff", "commitAfterChange": "0e3fe5643667a53079dbd114e5b1e9aa91fde083", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["+        // be brain dead about arguments parsing", "+        String format = \"plain\";", "+        String output = null;", "+        String[] files = null;", "+        for (int i = 0; i < aArgs.length; i++) {", "+            if (\"-f\".equals(aArgs[i])) {", "+                format = aArgs[++i];", "+            }", "+            else if (\"-o\".equals(aArgs[i])) {", "+                output = aArgs[++i];", "+            }", "+            else {", "+                files = new String[aArgs.length - i];", "+                System.arraycopy(aArgs, i, files, 0, files.length);", "+                break;", "+            }", "+        }", "+", "+        // create the appropriate listener", "+        OutputStream out = System.out;", "+        if (output != null) {", "+            try {", "+                out = new FileOutputStream(output);", "+            }", "+            catch (FileNotFoundException e) {", "+                System.out.println(\"Could not find file: '\" + output + \"'\");", "+                System.exit(1);", "+            }", "+        }", "+        AuditListener listener = null;", "+        if (\"xml\".equals(format)) {", "+            listener = new XMLLogger(out);", "+        }", "+        else if (\"plain\".equals(format)) {", "+            listener = new DefaultLogger(out);", "+        }", "+        else {", "+            System.out.println(\"Invalid format: (\" + format +", "+                               \"). Must be 'plain' or 'xml'.\");", "+            usage();", "+        }", "+", "+            c.addListener(listener);", "-        int numErrors = 0;", "-        for (int i = 0; i < aArgs.length; i++) {", "-            numErrors += c.process(aArgs[i]);", "-        }", "+        final int numErrs = c.process(files);", "-        System.exit(numErrors);", "+        System.exit(numErrs);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce66c77abc02499a40701577c0f22743", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64253f36f3cca5a7beb68696f1c3a97e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "14f2b27f8f5947d09384867c4483422bfbbb3e14", "commitAfterChange": "4509e18f16ec2819feee6fa6393c0821d74965dc", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["+                    final ClassResolver cr = new ClassResolver(", "+                        Thread.currentThread().getContextClassLoader(),", "+                        mPkgName, mImports);", "-                        reqd = !Utils.isRuntimeException(", "-                            tag.getArg1(),", "-                            this.getClass().getClassLoader());", "+                        reqd = !RuntimeException.class.isAssignableFrom(", "+                            cr.resolve(tag.getArg1()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d90eefdad9753ce81962ba0ccf468b12", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "f747835b6b4bd894eed2ef17eb059a003fb4d988", "commitAfterChange": "6ebcf2733b6c635d5f044aa35caf2a610c7723ff", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean containsOneArg(final AST expr)", "signatureAfterChange": "     private static boolean containsOneArgument(DetailAST methodCall)", "diff": ["+     */", "+    private static boolean containsOneArgument(DetailAST methodCall) {", "+        final DetailAST elist = methodCall.findFirstToken(TokenTypes.ELIST);", "+        return elist.getChildCount() == 1;", "-     */", "-    private boolean containsOneArg(final AST expr) {", "-        return !containsNoArgs(expr) && !containsMultiArgs(expr);"]}]}
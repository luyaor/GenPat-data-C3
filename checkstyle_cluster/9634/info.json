{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1dfb3a903653e6077284ec2e23515617", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0281d94510e088d34c51d5b4a98b84c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/NewlineAtEndOfFileCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        // Cannot use aLines as the line separators have been removed!", "+        // Cannot use lines as the line separators have been removed!", "-            randomAccessFile = new RandomAccessFile(aFile, \"r\");", "+            randomAccessFile = new RandomAccessFile(file, \"r\");", "-                log(0, \"noNewlineAtEOF\", aFile.getPath());", "+                log(0, \"noNewlineAtEOF\", file.getPath());", "-            log(0, \"unable.open\", aFile.getPath());", "+            log(0, \"unable.open\", file.getPath());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a7609ed2f46ef9608622e807c472e70", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "commitAfterChange": "b8ca6a585b824e91b3b8c72dd5cc53c0eb0ab0f1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        final String fileName = aFile.getPath();", "-        final long timestamp = aFile.lastModified();", "-        if (mCache.alreadyChecked(fileName, timestamp)) {", "+        final String fileName = file.getPath();", "+        final long timestamp = file.lastModified();", "+        if (cache.alreadyChecked(fileName, timestamp)) {", "-            final FileText text = FileText.fromLines(aFile, aLines);", "+            final FileText text = FileText.fromLines(file, lines);", "-            mCache.checkedOk(fileName, timestamp);", "+            cache.checkedOk(fileName, timestamp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2edf0e01f5398a81b0cb8ce2afe1ba70", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected int getLineNumber(List<String> aLines, String aKeyNane)", "signatureAfterChange": "     protected int getLineNumber(List<String> lines, String keyName)", "diff": ["-    protected int getLineNumber(List<String> aLines, String aKeyNane)", "+    protected int getLineNumber(List<String> lines, String keyName)", "-                \"^\" + aKeyNane.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:=].*$\";", "+                \"^\" + keyName.replace(\" \", \"\\\\\\\\ \") + \"[\\\\s:=].*$\";", "-        for (String line : aLines) {", "+        for (String line : lines) {", "-        if (lineNumber > aLines.size()) {", "+        if (lineNumber > lines.size()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bfaf56e56ea9f1c65332a139697a5db", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "58b28a75e171b7a0f0186a8f1161824a82cc5c8e", "commitAfterChange": "30c3a362d45721e6925fe89ba71f0fe69d0fc471", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-            int i;", "-            for (i = 0; headerLineNo < headerSize && i < fileSize; i++) {", "-                final String line = lines.get(i);", "+            int index;", "+            for (index = 0; headerLineNo < headerSize && index < fileSize; index++) {", "+                final String line = lines.get(index);", "-                    log(i + 1, MSG_HEADER_MISMATCH, getHeaderLines().get(", "+                    log(index + 1, MSG_HEADER_MISMATCH, getHeaderLines().get(", "-            if (i == fileSize) {", "+            if (index == fileSize) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87368e2bf2b0d12186bb925da0b102a3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "cb2862b73a3aa9192fad25015da2c2fed87f8a91", "commitAfterChange": "822384a711290170148b43b5ae390dd4e8cfaf4f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private int process(String aFileName)", "signatureAfterChange": "     private int process(File aFile)", "diff": ["-    private int process(String aFileName)", "+    private int process(File aFile)", "-        final File f = new File(aFileName);", "-        final long timestamp = f.lastModified();", "-        if (mCache.alreadyChecked(aFileName, timestamp)) {", "+        final String fileName = aFile.getPath();", "+        final long timestamp = aFile.lastModified();", "+        if (mCache.alreadyChecked(fileName, timestamp)) {", "-        if ((basedir == null) || !aFileName.startsWith(basedir)) {", "-            stripped = aFileName;", "+        if ((basedir == null) || !fileName.startsWith(basedir)) {", "+            stripped = fileName;", "-            stripped = aFileName.substring(basedir.length() + skipSep);", "+            stripped = fileName.substring(basedir.length() + skipSep);", "-            final String[] lines = Utils.getLines(aFileName);", "-            final FileContents contents = new FileContents(aFileName, lines);", "+            final String[] lines = Utils.getLines(fileName);", "+            final FileContents contents = new FileContents(fileName, lines);", "-            mCache.checkedOk(aFileName, timestamp);", "+            mCache.checkedOk(fileName, timestamp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ff49277c9c832417c8043c35260996e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "3ef918920c58c550169ccef3cfe1706aede11a6e", "commitAfterChange": "5922d5a6730d7582d7d66121eb911ef9426f9e24", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines) throws CheckstyleException", "diff": ["-    protected void processFiltered(File file, List<String> lines) {", "+    protected void processFiltered(File file, List<String> lines) throws CheckstyleException {", "-            LOG.error(exceptionMsg);", "-            final RecognitionException re = tre.recog;", "-            final String message = re.getMessage();", "-            getMessageCollector().add(createLocalizedMessage(message));", "+            throw new CheckstyleException(exceptionMsg, tre);", "-        // RecognitionException and any other (need to check if needed)", "-        catch (Throwable ex) {", "+        catch (RecognitionException | TokenStreamException ex) {", "-            LOG.error(exceptionMsg, ex);", "-            getMessageCollector().add(createLocalizedMessage(ex.getMessage()));", "+            throw new CheckstyleException(exceptionMsg, ex);", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f0cfcc06a390add7af773da4a3bbccd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ExpressionHandler.java", "commitBeforeChange": "f4a92dad02a3a36b5e2e988bba04debb1e2c9db9", "commitAfterChange": "35d1673788bbbac8263fdb69275dc6a63b095a24", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "signatureAfterChange": "     private void checkLinesIndent(LineSet aLines,                                   IndentLevel aIndentLevel,                                   boolean aFirstLineMatches,                                   int aFirstLine)", "diff": ["-        int startLine = aLines.firstLine();", "-        int endLine = aLines.lastLine();", "-        int startCol = aLines.firstLineCol();", "+        final int startLine = aLines.firstLine();", "+        final int endLine = aLines.lastLine();", "+        final int startCol = aLines.firstLineCol();", "-        int realStartCol = getLineStart(mIndentCheck.getLines()[startLine - 1]);", "+        final int realStartCol =", "+            getLineStart(mIndentCheck.getLines()[startLine - 1]);", "-            Integer col = aLines.getStartColumn(new Integer(i));", "+            final Integer col = aLines.getStartColumn(new Integer(i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac5777feabc3c3cab69224f6ca80a4be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocPackageCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        final File dir = aFile.getParentFile();", "-        if (mDirectoriesChecked.contains(dir)) {", "+        final File dir = file.getParentFile();", "+        if (directoriesChecked.contains(dir)) {", "-        mDirectoriesChecked.add(dir);", "+        directoriesChecked.add(dir);", "-        else if (!mAllowLegacy || !packageHtml.exists()) {", "+        else if (!allowLegacy || !packageHtml.exists()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c583ab3dfc34db83d1e78028ff8d28c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileText.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private FileText(File aFile, List<String> aLines)", "signatureAfterChange": "     private FileText(File file, List<String> lines)", "diff": ["-    private FileText(File aFile, List<String> aLines)", "+    private FileText(File file, List<String> lines)", "-        for (final String line : aLines) {", "+        for (final String line : lines) {", "-        mFile = aFile;", "-        mCharset = null;", "-        mFullText = buf.toString();", "-        mLines = aLines.toArray(new String[aLines.size()]);", "+        this.file = file;", "+        charset = null;", "+        fullText = buf.toString();", "+        this.lines = lines.toArray(new String[lines.size()]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cef259fdf5c34d8e42ab97cd5082c650", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UniquePropertiesCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-            properties.load(new FileInputStream(aFile));", "+            properties.load(new FileInputStream(file));", "-            log(0, IO_EXCEPTION_KEY, aFile.getPath(),", "+            log(0, IO_EXCEPTION_KEY, file.getPath(),", "-            final int lineNumber = getLineNumber(aLines, keyName);", "+            final int lineNumber = getLineNumber(lines, keyName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dba5d43eea5419c8c366f8800d198de4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderChecker.java", "commitBeforeChange": "fc8a5ae78cffc8f6d5951a72fc722c52dedc1d04", "commitAfterChange": "bf16d371dab210594755d04afc4697269ed088c0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     void checkLines(final String[] aLines)", "signatureAfterChange": "     void checkLines(final List<String> aLines)", "diff": ["-    void checkLines(final String[] aLines)", "+    void checkLines(final List<String> aLines)", "-        final int headerSize = mHeaderLines.length;", "-        final int fileSize = aLines.length;", "+        final int headerSize = mHeaderLines.size();", "+        final int fileSize = aLines.size();", "-                final String line = aLines[i];", "+                final String line = aLines.get(i);", "-                            i + 1, mHeaderLines[headerLineNo]);", "+                            i + 1, mHeaderLines.get(headerLineNo));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e724134d74dcf134baac201c1011b726", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "commitAfterChange": "29027109bf962f47b6a6000fdca69b5679ce4b43", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     protected void processFiltered(File aFile, List<String> aLines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-    protected void processFiltered(File aFile, List<String> aLines)", "+    protected void processFiltered(File file, List<String> lines)", "-        final int fileSize = aLines.size();", "+        final int fileSize = lines.size();", "-        if (headerSize - mMultiLines.length > fileSize) {", "+        if (headerSize - multiLines.length > fileSize) {", "-                final String line = aLines.get(i);", "+                final String line = lines.get(i);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbcd5fba3fccd68f1e4a0b938eba2e5f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "dcf0d774fa59e2131e4bb2f50523da10ce3305af", "commitAfterChange": "7af9e82fc16545a8153b529fba91df0fb310e2e6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     public static DetailAST parse(             final String[] aLines, String aFileName, final CommentManager aCmgr)             throws TokenStreamException, RecognitionException", "signatureAfterChange": "     public static DetailAST parse(FileContents aContents)         throws TokenStreamException, RecognitionException", "diff": ["-    public static DetailAST parse(", "-            final String[] aLines, String aFileName, final CommentManager aCmgr)", "-            throws TokenStreamException, RecognitionException", "+    public static DetailAST parse(FileContents aContents)", "+        throws TokenStreamException, RecognitionException", "-            final Reader sar = new StringArrayReader(aLines);", "+            final Reader sar = new StringArrayReader(aContents.getLines());", "-            jl.setFilename(aFileName);", "-            jl.setCommentManager(aCmgr);", "+            jl.setFilename(aContents.getFilename());", "+            jl.setFileContents(aContents);", "-            jr.setFilename(aFileName);", "+            jr.setFilename(aContents.getFilename());", "-            final Reader sar = new StringArrayReader(aLines);", "+            final Reader sar = new StringArrayReader(aContents.getLines());", "-            jl.setFilename(aFileName);", "-            jl.setCommentManager(aCmgr);", "+            jl.setFilename(aContents.getFilename());", "+            jl.setFileContents(aContents);", "-            jr.setFilename(aFileName);", "+            jr.setFilename(aContents.getFilename());"]}]}
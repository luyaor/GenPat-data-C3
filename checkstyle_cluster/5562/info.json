{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41c4c8b0b6f8ec9c1d50375f621889f8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cef0d25ebbdc30faea7ad92ace1f944", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private void checkCheckClosingParens(final DetailAST aAST)", "signatureAfterChange": "     private void checkCheckClosingParens(final DetailAST ast)", "diff": ["-    private void checkCheckClosingParens(final DetailAST aAST)", "+    private void checkCheckClosingParens(final DetailAST ast)", "-        if (ClosingParens.IGNORE.equals(this.mParens)", "-            || this.mParens == null)", "+        if (ClosingParens.IGNORE.equals(this.parens)", "+            || this.parens == null)", "-        final DetailAST paren = aAST.getLastChild();", "+        final DetailAST paren = ast.getLastChild();", "-        if (ClosingParens.ALWAYS.equals(this.mParens)", "+        if (ClosingParens.ALWAYS.equals(this.parens)", "-            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_PARENS_MISSING);", "+            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_PARENS_MISSING);", "-        else if (ClosingParens.NEVER.equals(this.mParens)", "-            && !aAST.branchContains(TokenTypes.EXPR)", "-            && !aAST.branchContains(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)", "-            && !aAST.branchContains(TokenTypes.ANNOTATION_ARRAY_INIT)", "+        else if (ClosingParens.NEVER.equals(this.parens)", "+            && !ast.branchContains(TokenTypes.EXPR)", "+            && !ast.branchContains(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR)", "+            && !ast.branchContains(TokenTypes.ANNOTATION_ARRAY_INIT)", "-            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_PARENS_PRESENT);", "+            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_PARENS_PRESENT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6469f17b5cd0fa756f89861bdd1b9eaf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Override     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(final DetailAST ast)", "diff": ["-    public void visitToken(final DetailAST aAST)", "+    public void visitToken(final DetailAST ast)", "-            this.getFileContents().getJavadocBefore(aAST.getLineNo());", "+            this.getFileContents().getJavadocBefore(ast.getLineNo());", "-        final boolean containsTag = this.containsJavadocTag(javadoc);", "-        if (containsTag && !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {", "-            this.log(aAST.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,", "+        final boolean containastag = this.containsJavadocTag(javadoc);", "+        if (containastag && !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {", "+            this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,", "-        if (this.mJavaFiveCompatibility) {", "-            final DetailAST defOrNew = aAST.getParent().getParent();", "+        if (this.javaFiveCompatibility) {", "+            final DetailAST defOrNew = ast.getParent().getParent();", "-        if (containsTag", "-            && (!AnnotationUtility.containsAnnotation(aAST, OVERRIDE)", "-            && !AnnotationUtility.containsAnnotation(aAST, FQ_OVERRIDE)))", "+        if (containastag", "+            && (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)", "+            && !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)))", "-            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);", "+            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);"]}]}
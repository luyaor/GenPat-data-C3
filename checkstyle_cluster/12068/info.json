{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "203ead99bf92be6e7c4b3f062f681ab1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "649769ea04db0e027e9e1a5c3ad63aa1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int parentType = aAST.getParent().getType();", "+        final int parentType = ast.getParent().getType();", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            mScopeStates.push(new ScopeState());", "+            scopeStates.push(new ScopeState());", "-            state = mScopeStates.peek();", "-            if (state.mScopeState > STATE_CTOR_DEF) {", "-                if (!mIgnoreConstructors) {", "-                    log(aAST, \"declaration.order.constructor\");", "+            state = scopeStates.peek();", "+            if (state.scopeState > STATE_CTOR_DEF) {", "+                if (!ignoreConstructors) {", "+                    log(ast, \"declaration.order.constructor\");", "-                state.mScopeState = STATE_CTOR_DEF;", "+                state.scopeState = STATE_CTOR_DEF;", "-            state = mScopeStates.peek();", "+            state = scopeStates.peek();", "-            if (state.mScopeState > STATE_METHOD_DEF) {", "-                if (!mIgnoreMethods) {", "-                    log(aAST, \"declaration.order.method\");", "+            if (state.scopeState > STATE_METHOD_DEF) {", "+                if (!ignoreMethods) {", "+                    log(ast, \"declaration.order.method\");", "-                state.mScopeState = STATE_METHOD_DEF;", "+                state.scopeState = STATE_METHOD_DEF;", "-                || (aAST.getParent().getParent().getType()", "+                || (ast.getParent().getParent().getType()", "-            state = mScopeStates.peek();", "-            if (aAST.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {", "-                if (state.mScopeState > STATE_STATIC_VARIABLE_DEF) {", "-                    if (!mIgnoreModifiers", "-                        || state.mScopeState > STATE_INSTANCE_VARIABLE_DEF)", "+            state = scopeStates.peek();", "+            if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {", "+                if (state.scopeState > STATE_STATIC_VARIABLE_DEF) {", "+                    if (!ignoreModifiers", "+                        || state.scopeState > STATE_INSTANCE_VARIABLE_DEF)", "-                        log(aAST, \"declaration.order.static\");", "+                        log(ast, \"declaration.order.static\");", "-                    state.mScopeState = STATE_STATIC_VARIABLE_DEF;", "+                    state.scopeState = STATE_STATIC_VARIABLE_DEF;", "-                if (state.mScopeState > STATE_INSTANCE_VARIABLE_DEF) {", "-                    log(aAST, \"declaration.order.instance\");", "+                if (state.scopeState > STATE_INSTANCE_VARIABLE_DEF) {", "+                    log(ast, \"declaration.order.instance\");", "-                else if (state.mScopeState == STATE_STATIC_VARIABLE_DEF) {", "-                    state.mDeclarationAccess = Scope.PUBLIC;", "-                    state.mScopeState = STATE_INSTANCE_VARIABLE_DEF;", "+                else if (state.scopeState == STATE_STATIC_VARIABLE_DEF) {", "+                    state.declarationAccess = Scope.PUBLIC;", "+                    state.scopeState = STATE_INSTANCE_VARIABLE_DEF;", "-            final Scope access = ScopeUtils.getScopeFromMods(aAST);", "-            if (state.mDeclarationAccess.compareTo(access) > 0) {", "-                if (!mIgnoreModifiers) {", "-                    log(aAST, \"declaration.order.access\");", "+            final Scope access = ScopeUtils.getScopeFromMods(ast);", "+            if (state.declarationAccess.compareTo(access) > 0) {", "+                if (!ignoreModifiers) {", "+                    log(ast, \"declaration.order.access\");", "-                state.mDeclarationAccess = access;", "+                state.declarationAccess = access;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce662deb4a3e1d9799368a418a7a925e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "cc6caa71f55ae33ad8c018e3b7915e6b93b7de81", "commitAfterChange": "3eca04c940bcdf575c2f9009202a4145e9a82c15", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        ScopeState state;", "-                state = scopeStates.peek();", "-                if (state.currentScopeState > STATE_CTOR_DEF) {", "-                    if (!ignoreConstructors) {", "-                        log(ast, MSG_CONSTRUCTOR);", "-                    }", "-                }", "-                else {", "-                    state.currentScopeState = STATE_CTOR_DEF;", "-                }", "+                processConstructor(ast);", "-                state = scopeStates.peek();", "+", "-                if (state.currentScopeState > STATE_METHOD_DEF) {", "-                    if (!ignoreMethods) {", "-                        log(ast, MSG_METHOD);", "-                    }", "-                }", "-                else {", "-                    state.currentScopeState = STATE_METHOD_DEF;", "-                }", "+                processMethod(ast);", "-                    || ast.getParent().getParent().getType()", "+                        || ast.getParent().getParent().getType()", "-                state = scopeStates.peek();", "-                if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {", "-                    if (state.currentScopeState > STATE_STATIC_VARIABLE_DEF) {", "-                        if (!ignoreModifiers", "-                            || state.currentScopeState > STATE_INSTANCE_VARIABLE_DEF) {", "-                            log(ast, MSG_STATIC);", "-                        }", "-                    }", "-                    else {", "-                        state.currentScopeState = STATE_STATIC_VARIABLE_DEF;", "-                    }", "-                }", "-                else {", "-                    if (state.currentScopeState > STATE_INSTANCE_VARIABLE_DEF) {", "-                        log(ast, MSG_INSTANCE);", "-                    }", "-                    else if (state.currentScopeState == STATE_STATIC_VARIABLE_DEF) {", "-                        state.declarationAccess = Scope.PUBLIC;", "-                        state.currentScopeState = STATE_INSTANCE_VARIABLE_DEF;", "-                    }", "-                }", "-", "-                final Scope access = ScopeUtils.getScopeFromMods(ast);", "-                if (state.declarationAccess.compareTo(access) > 0) {", "-                    if (!ignoreModifiers) {", "-                        log(ast, MSG_ACCESS);", "-                    }", "-                }", "-                else {", "-                    state.declarationAccess = access;", "-                }", "+                processModifiers(ast);", "+                break;", "+        }", "+    }"]}]}
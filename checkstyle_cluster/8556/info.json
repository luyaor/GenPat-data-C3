{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80938df0109ebf7a34c4d6f8624ea5cd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0531610f9d030392d3d34fbb399c86a8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean isAllCharactersEscaped(String aLiteral)", "signatureAfterChange": "     private boolean isAllCharactersEscaped(String literal)", "diff": ["-    private boolean isAllCharactersEscaped(String aLiteral)", "+    private boolean isAllCharactersEscaped(String literal)", "-        return mAllowIfAllCharactersEscaped", "-                && sAllEscapedChars.matcher(aLiteral.substring(1,", "-                        aLiteral.length() - 1)).find();", "+        return allowIfAllCharactersEscaped", "+                && sAllEscapedChars.matcher(literal.substring(1,", "+                        literal.length() - 1)).find();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7bd6c8b3c586449bad89c9c219e608d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "         private boolean isSignificant(String aClassName)", "signatureAfterChange": "         private boolean isSignificant(String className)", "diff": ["-        private boolean isSignificant(String aClassName)", "+        private boolean isSignificant(String className)", "-            return (aClassName.length() > 0)", "-                    && !mExcludedClasses.contains(aClassName)", "-                    && !aClassName.startsWith(\"java.lang.\");", "+            return (className.length() > 0)", "+                    && !excludedClasses.contains(className)", "+                    && !className.startsWith(\"java.lang.\");"]}]}
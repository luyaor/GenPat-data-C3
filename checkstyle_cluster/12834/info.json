{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "558e58f641115713b64f1ab746ffae95", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06afa91384d956572cfebad08021935d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public final void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public final void visitToken(DetailAST ast)", "diff": ["-    public final void visitToken(DetailAST aAST)", "+    public final void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {", "-            processPackage(aAST);", "+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {", "+            processPackage(ast);", "-        else if (aAST.getType() == TokenTypes.IMPORT) {", "-            processImport(aAST);", "+        else if (ast.getType() == TokenTypes.IMPORT) {", "+            processImport(ast);", "-        else if ((aAST.getType() == TokenTypes.CLASS_DEF)", "-                 || (aAST.getType() == TokenTypes.INTERFACE_DEF)", "-                 || (aAST.getType() == TokenTypes.ENUM_DEF))", "+        else if ((ast.getType() == TokenTypes.CLASS_DEF)", "+                 || (ast.getType() == TokenTypes.INTERFACE_DEF)", "+                 || (ast.getType() == TokenTypes.ENUM_DEF))", "-            processClass(aAST);", "+            processClass(ast);", "-            if (aAST.getType() == TokenTypes.METHOD_DEF) {", "-                processTypeParams(aAST);", "+            if (ast.getType() == TokenTypes.METHOD_DEF) {", "+                processTypeParams(ast);", "-            processAST(aAST);", "+            processAST(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b9e73114ba3985db475b16ea0f0040a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void processEnd(DetailAST aAST)", "signatureAfterChange": "     private void processEnd(DetailAST ast)", "diff": ["-    private void processEnd(DetailAST aAST)", "+    private void processEnd(DetailAST ast)", "-        final String line = getLine(aAST.getLineNo() - 1);", "-        final int before = aAST.getColumnNo() - 1;", "-        final int after = aAST.getColumnNo() + 1;", "+        final String line = getLine(ast.getLineNo() - 1);", "+        final int before = ast.getColumnNo() - 1;", "+        final int after = ast.getColumnNo() + 1;", "-            log(aAST.getLineNo(), before, \"ws.preceded\", \">\");", "+            log(ast.getLineNo(), before, \"ws.preceded\", \">\");", "-            if (1 == mDepth) {", "+            if (1 == depth) {", "-                if ((aAST.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)", "-                    && (aAST.getParent().getParent().getType()", "+                if ((ast.getParent().getType() == TokenTypes.TYPE_ARGUMENTS)", "+                    && (ast.getParent().getParent().getType()", "-                    && (aAST.getParent().getParent().getParent().getType()", "+                    && (ast.getParent().getParent().getParent().getType()", "-                        log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                        log(ast.getLineNo(), after, \"ws.followed\", \">\");", "-                    log(aAST.getLineNo(), after, \"ws.illegalFollow\", \">\");", "+                    log(ast.getLineNo(), after, \"ws.illegalFollow\", \">\");", "-                //   class IntEnumValueType<E extends Enum<E> & IntEnum>", "+                //   class IntEnuvalueType<E extends Enum<E> & IntEnum>", "-                        log(aAST.getLineNo(), after, \"ws.notPreceded\", \"&\");", "+                        log(ast.getLineNo(), after, \"ws.notPreceded\", \"&\");", "-                        log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                        log(ast.getLineNo(), after, \"ws.followed\", \">\");", "-                    log(aAST.getLineNo(), after, \"ws.followed\", \">\");", "+                    log(ast.getLineNo(), after, \"ws.followed\", \">\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4966c84a9d62e1ed4f332f1a9a90bd7d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/JavaNCSSCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        final int tokenType = aAST.getType();", "+        final int tokenType = ast.getType();", "-            final Counter counter = mCounters.pop();", "+            final Counter counter = counters.pop();", "-            if (count > mMethodMax) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"ncss.method\",", "-                        count, mMethodMax);", "+            if (count > methodMax) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"ncss.method\",", "+                        count, methodMax);", "-            final Counter counter = mCounters.pop();", "+            final Counter counter = counters.pop();", "-            if (count > mClassMax) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"ncss.class\",", "-                        count, mClassMax);", "+            if (count > classMax) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"ncss.class\",", "+                        count, classMax);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52bbc98f4dad58514632f59afff48c5e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void processVariable(DetailAST aAST)", "signatureAfterChange": "     private void processVariable(DetailAST ast)", "diff": ["-    private void processVariable(DetailAST aAST)", "+    private void processVariable(DetailAST ast)", "-        if (ScopeUtils.inInterfaceOrAnnotationBlock(aAST)", "-            || (!ScopeUtils.isLocalVariableDef(aAST)", "-            && (aAST.getType() != TokenTypes.PARAMETER_DEF)))", "+        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)", "+            || (!ScopeUtils.isLocalVariableDef(ast)", "+            && (ast.getType() != TokenTypes.PARAMETER_DEF)))", "-        //local variable or parameter. Does it shadow a field?", "-        final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+        //local variable or pnameter. Does it shadow a field?", "+        final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-        if ((mCurrentFrame.containsStaticField(name)", "-             || (!inStatic(aAST) && mCurrentFrame.containsInstanceField(name)))", "-            && ((mRegexp == null) || (!getRegexp().matcher(name).find()))", "-            && !isIgnoredSetterParam(aAST, name)", "-            && !isIgnoredConstructorParam(aAST)", "-            && !isIgnoredParamOfAbstractMethod(aAST))", "+        if ((currentFrame.containsStaticField(name)", "+             || (!inStatic(ast) && currentFrame.containsInstanceField(name)))", "+            && ((regexp == null) || (!getRegexp().matcher(name).find()))", "+            && !isIgnoredSetterParam(ast, name)", "+            && !isIgnoredConstructorParam(ast)", "+            && !isIgnoredParamOfAbstractMethod(ast))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6469f17b5cd0fa756f89861bdd1b9eaf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheck.java", "commitBeforeChange": "0fcae24380f86386ada6b2bb017c2ffe98ecb17e", "commitAfterChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     @Override     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(final DetailAST ast)", "diff": ["-    public void visitToken(final DetailAST aAST)", "+    public void visitToken(final DetailAST ast)", "-            this.getFileContents().getJavadocBefore(aAST.getLineNo());", "+            this.getFileContents().getJavadocBefore(ast.getLineNo());", "-        final boolean containsTag = this.containsJavadocTag(javadoc);", "-        if (containsTag && !JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {", "-            this.log(aAST.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,", "+        final boolean containastag = this.containsJavadocTag(javadoc);", "+        if (containastag && !JavadocTagInfo.INHERIT_DOC.isValidOn(ast)) {", "+            this.log(ast.getLineNo(), MSG_KEY_TAG_NOT_VALID_ON,", "-        if (this.mJavaFiveCompatibility) {", "-            final DetailAST defOrNew = aAST.getParent().getParent();", "+        if (this.javaFiveCompatibility) {", "+            final DetailAST defOrNew = ast.getParent().getParent();", "-        if (containsTag", "-            && (!AnnotationUtility.containsAnnotation(aAST, OVERRIDE)", "-            && !AnnotationUtility.containsAnnotation(aAST, FQ_OVERRIDE)))", "+        if (containastag", "+            && (!AnnotationUtility.containsAnnotation(ast, OVERRIDE)", "+            && !AnnotationUtility.containsAnnotation(ast, FQ_OVERRIDE)))", "-            this.log(aAST.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);", "+            this.log(ast.getLineNo(), MSG_KEY_ANNOTATION_MISSING_OVERRIDE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d68c654318c238bda86db4425f0c440", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public final void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public final void leaveToken(DetailAST ast)", "diff": ["-    public final void leaveToken(DetailAST aAST)", "+    public final void leaveToken(DetailAST ast)", "-        if ((aAST.getType() == TokenTypes.CLASS_DEF)", "-            || (aAST.getType() == TokenTypes.ENUM_DEF))", "+        if ((ast.getType() == TokenTypes.CLASS_DEF)", "+            || (ast.getType() == TokenTypes.ENUM_DEF))", "-            int dotIdx = mCurrentClass.lastIndexOf(\"$\");", "+            int dotIdx = currentClass.lastIndexOf(\"$\");", "-                dotIdx = mCurrentClass.lastIndexOf(\".\");", "+                dotIdx = currentClass.lastIndexOf(\".\");", "-                mCurrentClass = \"\";", "+                currentClass = \"\";", "-                mCurrentClass = mCurrentClass.substring(0, dotIdx);", "+                currentClass = currentClass.substring(0, dotIdx);", "-            mTypeParams.pop();", "+            typeParams.pop();", "-        else if (aAST.getType() == TokenTypes.METHOD_DEF) {", "-            mTypeParams.pop();", "+        else if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            typeParams.pop();", "-        else if ((aAST.getType() != TokenTypes.PACKAGE_DEF)", "-                 && (aAST.getType() != TokenTypes.IMPORT))", "+        else if ((ast.getType() != TokenTypes.PACKAGE_DEF)", "+                 && (ast.getType() != TokenTypes.IMPORT))", "-            leaveAST(aAST);", "+            leaveAST(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9deb27ca5f2026dfe1102fddb1aebf23", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            startToken = skipAnnotationOnlyLines(aAST);", "-            brace = aAST.findFirstToken(TokenTypes.SLIST);", "+            startToken = skipAnnotationOnlyLines(ast);", "+            brace = ast.findFirstToken(TokenTypes.SLIST);", "-            startToken = skipAnnotationOnlyLines(aAST);", "-            final DetailAST objBlock = aAST.findFirstToken(TokenTypes.OBJBLOCK);", "+            startToken = skipAnnotationOnlyLines(ast);", "+            final DetailAST objBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);", "-            startToken = aAST;", "-            brace = aAST.findFirstToken(TokenTypes.SLIST);", "+            startToken = ast;", "+            brace = ast.findFirstToken(TokenTypes.SLIST);", "-            startToken = aAST;", "-            final DetailAST candidate = aAST.getFirstChild();", "+            startToken = ast;", "+            final DetailAST candidate = ast.getFirstChild();", "-            startToken = aAST;", "-            brace = aAST.findFirstToken(TokenTypes.LCURLY);", "+            startToken = ast;", "+            brace = ast.findFirstToken(TokenTypes.LCURLY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c03004d8f39af0bd858a84790ac721", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FinalLocalVariableCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            mScopeStack.push(new HashMap<String, DetailAST>());", "+            scopeStack.push(new HashMap<String, DetailAST>());", "-            if (ScopeUtils.inInterfaceBlock(aAST)", "-                || inAbstractOrNativeMethod(aAST))", "+            if (ScopeUtils.inInterfaceBlock(ast)", "+                || inAbstractOrNativeMethod(ast))", "-            if ((aAST.getParent().getType() != TokenTypes.OBJBLOCK)", "-                && (aAST.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE))", "+            if ((ast.getParent().getType() != TokenTypes.OBJBLOCK)", "+                && (ast.getParent().getType() != TokenTypes.FOR_EACH_CLAUSE))", "-                insertVariable(aAST);", "+                insertVariable(ast);", "-            final int parentType = aAST.getParent().getType();", "+            final int parentType = ast.getParent().getType();", "-                // TODO: is there better way to check is aAST", "+                // TODO: is there better way to check is ast", "-                if (aAST.getParent().getFirstChild() == aAST) {", "-                    removeVariable(aAST);", "+                if (ast.getParent().getFirstChild() == ast) {", "+                    removeVariable(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d38d86ae420e177dd53f8601975e4ec9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      @Override     protected final void processAST(DetailAST aAST)", "signatureAfterChange": "      @Override     protected final void processAST(DetailAST ast)", "diff": ["-    protected final void processAST(DetailAST aAST)", "+    protected final void processAST(DetailAST ast)", "-        if ((aAST.getType() == TokenTypes.METHOD_DEF || aAST.getType() == TokenTypes.CTOR_DEF)", "-            && (getMethodsNumberOfLine(aAST) <= mMinLineCount)", "-            || hasAllowedAnnotations(aAST))", "+        if ((ast.getType() == TokenTypes.METHOD_DEF || ast.getType() == TokenTypes.CTOR_DEF)", "+            && (getMethodsNumberOfLine(ast) <= minLineCount)", "+            || hasAllowedAnnotations(ast))", "-        final Scope theScope = calculateScope(aAST);", "-        if (shouldCheck(aAST, theScope)) {", "+        final Scope theScope = calculateScope(ast);", "+        if (shouldCheck(ast, theScope)) {", "-            final TextBlock cmt = contents.getJavadocBefore(aAST.getLineNo());", "+            final TextBlock cmt = contents.getJavadocBefore(ast.getLineNo());", "-                if (!isMissingJavadocAllowed(aAST)) {", "-                    log(aAST, \"javadoc.missing\");", "+                if (!isMissingJavadocAllowed(ast)) {", "+                    log(ast, \"javadoc.missing\");", "-                checkComment(aAST, cmt);", "+                checkComment(ast, cmt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e20e55d303f393f758532c721738f310", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "1bd7f9bdf3dc678b70e79481971aebc50db69dc7", "commitAfterChange": "58219b9bd31c8f7fbc4f4bba0eeb811851f276b3", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void collectDeclarations(Deque<LexicalFrame> aFrameStack,         DetailAST aAST)", "signatureAfterChange": "     private void collectDeclarations(Deque<LexicalFrame> frameStack,         DetailAST ast)", "diff": ["-    private void collectDeclarations(Deque<LexicalFrame> aFrameStack,", "-        DetailAST aAST)", "+    private void collectDeclarations(Deque<LexicalFrame> frameStack,", "+        DetailAST ast)", "-        final LexicalFrame frame = aFrameStack.peek();", "-        switch (aAST.getType()) {", "+        final LexicalFrame frame = frameStack.peek();", "+        switch (ast.getType()) {", "-                    aAST.findFirstToken(TokenTypes.IDENT).getText();", "+                    ast.findFirstToken(TokenTypes.IDENT).getText();", "-                    aAST.findFirstToken(TokenTypes.MODIFIERS);", "-                if (ScopeUtils.inInterfaceBlock(aAST)", "+                    ast.findFirstToken(TokenTypes.MODIFIERS);", "+                if (ScopeUtils.inInterfaceBlock(ast)", "-            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-            final DetailAST nameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-            aFrameStack.addFirst(new ClassFrame(frame));", "+            frameStack.addFirst(new ClassFrame(frame));", "-            aFrameStack.addFirst(new BlockFrame(frame));", "+            frameStack.addFirst(new BlockFrame(frame));", "-            final String name = aAST.findFirstToken(TokenTypes.IDENT).getText();", "+            final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "-                    aAST.findFirstToken(TokenTypes.MODIFIERS);", "+                    ast.findFirstToken(TokenTypes.MODIFIERS);", "-            aFrameStack.addFirst(new MethodFrame(frame));", "+            frameStack.addFirst(new MethodFrame(frame));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec23a01b8e6f33f5a5249fa76e768fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/UnnecessaryParenthesesCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void leaveToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-    public void leaveToken(DetailAST aAST)", "+    public void leaveToken(DetailAST ast)", "-        final int type = aAST.getType();", "-        final DetailAST parent = aAST.getParent();", "+        final int type = ast.getType();", "+        final DetailAST parent = ast.getParent();", "-            // If 'mParentToSkip' == 'aAST', then we've already logged a", "+            // If 'parentToSkip' == 'ast', then we've already logged a", "-            if ((mParentToSkip != aAST) && exprSurrounded(aAST)) {", "-                if (mAssignDepth >= 1) {", "-                    log(aAST, \"unnecessary.paren.assign\");", "+            if ((parentToSkip != ast) && exprSurrounded(ast)) {", "+                if (assignDepth >= 1) {", "+                    log(ast, \"unnecessary.paren.assign\");", "-                else if (aAST.getParent().getType()", "+                else if (ast.getParent().getType()", "-                    log(aAST, \"unnecessary.paren.return\");", "+                    log(ast, \"unnecessary.paren.return\");", "-                    log(aAST, \"unnecessary.paren.expr\");", "+                    log(ast, \"unnecessary.paren.expr\");", "-            mParentToSkip = null;", "+            parentToSkip = null;", "-            mAssignDepth--;", "+            assignDepth--;", "-        super.leaveToken(aAST);", "+        super.leaveToken(ast);"]}]}
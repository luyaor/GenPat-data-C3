{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dca6b8d6f7198e62ae4b53667a41f2f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "222f5aa6b101423051c1863bb7334c46", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/ParenPadCheck.java", "commitBeforeChange": "75a289111ee8b16dd36de9f76a13908a494d65fd", "commitAfterChange": "99ed7a7d2c1861dbf327ea9a421ec56f10c92fc2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void processRight(DetailAST aAST)", "signatureAfterChange": "     private boolean isFollowsEmptyForIterator(DetailAST aAST)", "diff": ["-    private void processRight(DetailAST aAST)", "+    private boolean isFollowsEmptyForIterator(DetailAST aAST)", "-        final String line = getLines()[aAST.getLineNo() - 1];", "-        final int before = aAST.getColumnNo() - 1;", "-        if (before >= 0) {", "-            boolean followsEmptyForIterator = false;", "-            final DetailAST parent = aAST.getParent();", "-            if ((parent != null)", "-                && (parent.getType() == TokenTypes.LITERAL_FOR))", "-            {", "-                final DetailAST forIterator =", "-                    parent.findFirstToken(TokenTypes.FOR_ITERATOR);", "-                followsEmptyForIterator = (forIterator.getChildCount() == 0)", "-                    && (aAST == forIterator.getNextSibling());", "-            }", "-            if (followsEmptyForIterator) {", "-                return;", "-            }", "-            else if ((PadOption.NOSPACE == getAbstractOption())", "-                && Character.isWhitespace(line.charAt(before))", "-                && !Utils.whitespaceBefore(before, line))", "-            {", "-                log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");", "-            }", "-            else if ((PadOption.SPACE == getAbstractOption())", "-                && !Character.isWhitespace(line.charAt(before))", "-                && (line.charAt(before) != '('))", "-            {", "-                log(aAST.getLineNo(), aAST.getColumnNo(),", "-                    \"ws.notPreceeded\", \")\");", "-            }", "+        boolean followsEmptyForIterator = false;", "+        final DetailAST parent = aAST.getParent();", "+        if ((parent != null)", "+            && (parent.getType() == TokenTypes.LITERAL_FOR))", "+        {", "+            final DetailAST forIterator =", "+                parent.findFirstToken(TokenTypes.FOR_ITERATOR);", "+            followsEmptyForIterator = (forIterator.getChildCount() == 0)", "+                && (aAST == forIterator.getNextSibling());", "+        return followsEmptyForIterator;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cc18d424300f4e5d3fbbdde63c5e5bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "aede54ee77fb0887148db30be804b36758111698", "commitAfterChange": "a0411608c3ce7871e4f02234879c79e3b8922120", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     void verifyRParen(int aLineNo, int aColNo)", "signatureAfterChange": "     void verifyRParen(int aLineNo, int aColNo)", "diff": ["-        if (mConfig.isIgnoreWhitespace()", "-            || (PadOption.IGNORE == mConfig.getParenPadOption()))", "-        {", "-            return;", "-        }", "-", "-        final String line = mLines[aLineNo - 1];", "-        final int before = aColNo - 3;", "-        if (before >= 0) {", "-            if ((PadOption.NOSPACE == mConfig.getParenPadOption())", "-                && Character.isWhitespace(line.charAt(before))", "-                && !Utils.whitespaceBefore(before, line))", "-            {", "-                mMessages.add(aLineNo, before, \"ws.preceeded\", \")\");", "-            }", "-            else if ((PadOption.SPACE == mConfig.getParenPadOption())", "-                     && !Character.isWhitespace(line.charAt(before))", "-                     && (line.charAt(before) != '('))", "-            {", "-                mMessages.add(aLineNo, before, \"ws.notPreceeded\", \")\");", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6eb175532cd5296b4ab5459180638946", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "81dab0c14131c72066f28cf8dbbddd1db3ea3a38", "commitAfterChange": "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     void verifyWSAroundBegin(int aLineNo, int aColNo, String aText)", "signatureAfterChange": "     void verifyWSAroundBegin(int aLineNo, int aColNo, String aText)", "diff": ["-        if (mConfig.isIgnoreWhitespace()) {", "-            return;", "-        }", "-", "-        final String line = mLines[aLineNo - 1];", "-        final int before = aColNo - 2;", "-        final int after = aColNo + aText.length() - 1;", "-", "-        if ((before >= 0) && !Character.isWhitespace(line.charAt(before))) {", "-            mMessages.add(aLineNo, before + 1, \"ws.notPreceeded\", aText);", "-        }", "-", "-        if ((after < line.length())", "-            && !Character.isWhitespace(line.charAt(after)))", "-        {", "-            mMessages.add(aLineNo, after, \"ws.notFollowed\", aText);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71329fa5e8c338c1464b0b77ef01bb1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "1050efd1ce522fd9ff11d0be769008e2e4a242b3", "commitAfterChange": "404fcfba9c9f1e00e241c0f220781d944a07ce78", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     void setLines(String[] aLines)", "signatureAfterChange": "     void setLines(String[] aLines)", "diff": ["-", "-        // Iterate over the lines looking for:", "-        //    - long lines", "-        for (int i = 0; i < mLines.length; i++) {", "-            // check for long line, but possibly allow imports", "-            final String line = mLines[i];", "-            final int realLength = Utils.lengthExpandedTabs(", "-                line, line.length(), mConfig.getTabWidth());", "-            if ((realLength > mConfig.getMaxLineLength())", "-                && !(mConfig.getIgnoreLineLengthRegexp().match(line))", "-                && !(mConfig.isIgnoreImportLength()", "-                     && line.trim().startsWith(\"import\")))", "-            {", "-                mMessages.add(i + 1, \"maxLineLen\",", "-                              new Integer(mConfig.getMaxLineLength()));", "-            }", "-        }"]}]}
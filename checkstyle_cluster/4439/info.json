{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a79ae06761b2d94d877e42c560ddf6f9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "712a0d079c834443be0f56ba92dd3c80", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "440cf6836f278602a790d764f257777be80d8b9e", "commitAfterChange": "686afc521a11088c57632352eb6fd60a682b03d6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)             throws SAXException", "signatureAfterChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)             throws SAXException", "diff": ["-        DefaultConfiguration conf = new DefaultConfiguration(aQName);", "-        final int attCount = aAtts.getLength();", "-        for (int i = 0; i < attCount; i++) {", "-            String name = aAtts.getQName(i);", "-            String value = aAtts.getValue(i);", "-", "-            // expand properties", "-            if (value.startsWith(\"${\") && value.endsWith(\"}\")) {", "-                String propName = value.substring(2, value.length() - 1);", "-                value = mOverrideProps.getProperty(propName);", "-                if (value == null) {", "-                    throw new SAXException(", "-                            \"missing external property \" + propName);", "-                }", "+        if (aQName.equals(\"config\")) {", "+            //create configuration", "+            final String name = aAtts.getValue(\"name\");", "+            if (name == null) {", "+                throw new SAXException(\"missing config name\");", "+            }", "+            final DefaultConfiguration conf = new DefaultConfiguration(name);", "+            if (mConfiguration == null) {", "+                mConfiguration = conf;", "-            conf.addAttribute(name, value);", "+            //add configuration to it's parent", "+            if (!mConfigStack.isEmpty()) {", "+                DefaultConfiguration top =", "+                        (DefaultConfiguration) mConfigStack.peek();", "+                top.addChild(conf);", "+            }", "+            ", "+            mConfigStack.push(conf);", "-", "-        if (mConfiguration == null) {", "-            mConfiguration = conf;", "+        else if (aQName.equals(\"property\")) {", "+            ", "+            //extract name and value", "+            final String name = aAtts.getValue(\"name\");", "+            if (name == null) {", "+                throw new SAXException(\"missing property name\");", "+            }            ", "+            String value = aAtts.getValue(\"value\");", "+            if (value == null) {", "+                throw new SAXException(\"missing value for property \" + name);", "+            }", "+                ", "+            // expand properties", "+            if (mOverrideProps != null) {", "+                try {", "+                    value = Utils.replaceProperties(value, mOverrideProps);", "+                }", "+                catch (CheckstyleException ex) {", "+                    throw new SAXException(ex.getMessage());", "+                }", "+            }", "+            ", "+            //add to attributes of configuration", "+            if (!mConfigStack.isEmpty()) {", "+                DefaultConfiguration top =", "+                        (DefaultConfiguration) mConfigStack.peek();", "+                top.addAttribute(name, value);", "+            }", "+            else {", "+                throw new SAXException(", "+                            \"property \" + name + \"has no config parent\");", "+            }               ", "-", "-        if (!mConfigStack.isEmpty()) {", "-            DefaultConfiguration top =", "-                    (DefaultConfiguration) mConfigStack.peek();", "-            top.addChild(conf);", "-        }", "-", "-        mConfigStack.push(conf);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d942ea4d42740a19ccfa9365ab03fc6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "1ac7fc3f8fc856547085bcc88e17fd1f4bbe0ddd", "commitAfterChange": "083ab98e4a451f1a982db89616535d9c0388b50b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     private static DetailAST parse(         Class aLexerClass,         Class aParserClass,         FileContents aContents)         throws RecognitionException, TokenStreamException", "signatureAfterChange": "     private static DetailAST parse(         FileContents aContents,         boolean aSilentlyConsumeErrors,         boolean aTreatAssertAsKeyword,         boolean aTreatEnumAsKeyword)         throws RecognitionException, TokenStreamException", "diff": ["-        Class aLexerClass,", "-        Class aParserClass,", "-        FileContents aContents)", "+        FileContents aContents,", "+        boolean aSilentlyConsumeErrors,", "+        boolean aTreatAssertAsKeyword,", "+        boolean aTreatEnumAsKeyword)", "-        try {", "-            final Reader sar = new StringArrayReader(aContents.getLines());", "-            final TokenStream lexer = (TokenStream)", "-                aLexerClass.getConstructor(new Class[] {Reader.class})", "-                    .newInstance(new Object[] {sar});", "-            aLexerClass.getMethod(", "-                \"setFilename\",", "-                new Class[] {String.class}).invoke(", "-                    lexer, new Object[] {aContents.getFilename()});", "-            aLexerClass.getMethod(", "-                \"setCommentListener\", new Class[] {CommentListener.class})", "-                    .invoke(lexer, new Object[] {aContents});", "+        final Reader sar = new StringArrayReader(aContents.getLines());", "+        final GeneratedJavaLexer lexer = new GeneratedJavaLexer(sar);", "+        lexer.setFilename(aContents.getFilename());", "+        lexer.setCommentListener(aContents);", "+        lexer.setTreatAssertAsKeyword(aTreatAssertAsKeyword);", "+        lexer.setTreatEnumAsKeyword(aTreatEnumAsKeyword);", "-            final LLkParser parser = (LLkParser)", "-                aParserClass.getConstructor(new Class[] {TokenStream.class})", "-                    .newInstance(new Object[] {lexer});", "+        final GeneratedJavaRecognizer parser =", "+            aSilentlyConsumeErrors", "+                ? new SilentJavaRecognizer(lexer)", "+                : new GeneratedJavaRecognizer(lexer);", "+        parser.setFilename(aContents.getFilename());", "+        parser.setASTNodeClass(DetailAST.class.getName());", "+        parser.compilationUnit();", "-            parser.setFilename(aContents.getFilename());", "-            parser.setASTNodeClass(DetailAST.class.getName());", "-            aParserClass.getMethod(", "-                \"compilationUnit\", new Class[] {}).invoke(", "-                    parser, new Object[] {});", "-            return (DetailAST) parser.getAST();", "-        }", "-        catch (InvocationTargetException exception) {", "-            //Re-throw antlr exceptions, pass on runtime exceptions", "-            //and convert any other exception to a runtime exception", "-            if (RecognitionException.class.isAssignableFrom(", "-                exception.getCause().getClass()))", "-            {", "-                throw (RecognitionException) exception.getCause();", "-            }", "-            else if (TokenStreamException.class.isAssignableFrom(", "-                exception.getCause().getClass()))", "-            {", "-                throw (TokenStreamException) exception.getCause();", "-            }", "-            else if (RuntimeException.class.isAssignableFrom(", "-                exception.getCause().getClass()))", "-            {", "-                throw (RuntimeException) exception.getCause();", "-            }", "-            else {", "-                throw new RuntimeException(exception.getCause());", "-            }", "-        }", "-        catch (RuntimeException exception) {", "-            //Pass on runtime exceptions", "-            throw exception;", "-        }", "-        catch (Exception exception) {", "-            //Convert any reflection exceptions to runtime exceptions", "-            throw new RuntimeException(exception);", "-        }", "+        return (DetailAST) parser.getAST();"]}]}
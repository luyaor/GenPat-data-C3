{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b422e5318ee82ee6c3a20150c81e83d8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c496a92758bc1eacfaaf77135ccd241a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java", "commitBeforeChange": "1ca93bdf66b630e58d979ad2aa40f02e678db5cf", "commitAfterChange": "bc36fe40fcfb51e720dc531a824cd6664ccc4c8b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public String toString()", "signatureAfterChange": "      @Override     public String toString()", "diff": ["-        return Joiner.on(\", \").join(mLevels);", "+        if (mLevels.cardinality() == 1) {", "+            return String.valueOf(mLevels.nextSetBit(0));", "+        }", "+        final StringBuilder sb = new StringBuilder();", "+        for (int i = mLevels.nextSetBit(0); i >= 0;", "+            i = mLevels.nextSetBit(i + 1))", "+        {", "+            if (sb.length() > 0) {", "+                sb.append(\", \");", "+            }", "+            sb.append(i);", "+        }", "+        return sb.toString();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb33336846a42d97f03e6df7802bb007", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentLevel.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public String toString()", "signatureAfterChange": "      @Override     public String toString()", "diff": ["-        if (mLevels.cardinality() == 1) {", "-            return String.valueOf(mLevels.nextSetBit(0));", "+        if (levels.cardinality() == 1) {", "+            return String.valueOf(levels.nextSetBit(0));", "-        for (int i = mLevels.nextSetBit(0); i >= 0;", "-            i = mLevels.nextSetBit(i + 1))", "+        for (int i = levels.nextSetBit(0); i >= 0;", "+            i = levels.nextSetBit(i + 1))"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5a7d110618a240d568e1429dff7fd16", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d297ad82c71fc22fc4be34dbab78d81d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/TableMaker.java", "commitBeforeChange": "78d8f443ddff397eb9cefc8ab49ac1ad8924e002", "commitAfterChange": "458086242f4b8f1a837400b7b7f4b6fe67601ba6", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "   public void processFor(SymTabAST tree)", "signatureAfterChange": "   public void processFor(SymTabAST tree)", "diff": ["-    walkTree(tree.findFirstToken(TokenTypes.FOR_INIT), false);", "-    walkTree(tree.findFirstToken(TokenTypes.FOR_CONDITION), false);", "+    SymTabAST body;", "+    SymTabAST forEach = tree.findFirstToken(TokenTypes.FOR_EACH_CLAUSE);", "+    if (forEach != null) {", "+        walkTree(forEach, false);", "+        body = (SymTabAST)forEach.getNextSibling();", "+    }", "+    else {", "+        walkTree(tree.findFirstToken(TokenTypes.FOR_INIT), false);", "+        walkTree(tree.findFirstToken(TokenTypes.FOR_CONDITION), false);", "-    SymTabAST forIter = tree.findFirstToken(TokenTypes.FOR_ITERATOR);", "-    walkTree(forIter, false);", "+        SymTabAST forIter = tree.findFirstToken(TokenTypes.FOR_ITERATOR);", "+        walkTree(forIter, false);", "+        body = (SymTabAST)forIter.getNextSibling();", "+    }", "-    SymTabAST body = (SymTabAST)forIter.getNextSibling();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7997bbc12635ee0e7f6071019d30540", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/SuppressWarningsCheck.java", "commitBeforeChange": "4ea1896f464b0f6c0ddfca3d8d9c9f84703bae5e", "commitAfterChange": "eef13e8c5ee6922af938d9eef3d73799ce71798b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public void visitToken(final DetailAST ast)", "signatureAfterChange": "     @Override     public void visitToken(final DetailAST ast)", "diff": ["-        DetailAST warning = warningHolder.findFirstToken(TokenTypes.EXPR);", "+        final DetailAST token = warningHolder.findFirstToken(TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR);", "+        DetailAST warning;", "+", "+        if (token != null) {", "+            // case like '@SuppressWarnings(value = UNUSED)'", "+            warning = token.findFirstToken(TokenTypes.EXPR);", "+        }", "+        else {", "+            warning = warningHolder.findFirstToken(TokenTypes.EXPR);", "+        }"]}]}
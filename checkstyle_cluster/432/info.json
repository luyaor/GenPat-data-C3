{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "593a57fc894e85a3a0dc9205b5f5d5ca", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c3dc564ea2a52b29e21b11bd619272e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65", "commitAfterChange": "88830ca708e2deb22cae333057ebddd15f7f9c57", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void checkTag(int lineNo, String... comment)", "signatureAfterChange": "     private void checkTag(int lineNo, String... comment)", "diff": ["-                if (tagFormatRE != null && !tagFormatRE.matcher(content).find()) {", "-                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);", "+                if (tagFormatRE == null || tagFormatRE.matcher(content).find()) {", "+                    logTag(lineNo + i - comment.length, tag, content);", "-                    logTag(lineNo + i - comment.length, tag, content);", "+                    log(lineNo + i - comment.length, TAG_FORMAT, tag, tagFormat);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50e1a2c7e6d7e9e025e9126e3c1e6317", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleStringLiteralsCheck.java", "commitBeforeChange": "423ed9e469db620671459827b58c89025d8f6c66", "commitAfterChange": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final void setIgnoreStringsRegexp(String ignoreStringsRegexp)", "signatureAfterChange": "     public final void setIgnoreStringsRegexp(String ignoreStringsRegexp)", "diff": ["-        if (ignoreStringsRegexp != null", "-            && !ignoreStringsRegexp.isEmpty()) {", "-            pattern = CommonUtils.createPattern(ignoreStringsRegexp);", "+        if (ignoreStringsRegexp == null || ignoreStringsRegexp.isEmpty()) {", "+            pattern = null;", "-            pattern = null;", "+            pattern = CommonUtils.createPattern(ignoreStringsRegexp);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65c06eed6bf70034adb9573ac58d87f0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07242a738c26452b469ac02c7a5100ed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/PackageObjectFactory.java", "commitBeforeChange": "4cc94a581c8da49c65d139da08d70aea1b5cf1e9", "commitAfterChange": "88e89a138aa39f50f7642106cde6568f6e07783f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static Object makeObject(String[] aPackages, ClassLoader aLoader,         String aName)         throws CheckstyleException", "signatureAfterChange": "     public Object createModule(String aName)         throws CheckstyleException", "diff": ["-    public static Object makeObject(String[] aPackages, ClassLoader aLoader,", "-        String aName)", "+    public Object createModule(String aName)", "-        final PackageObjectFactory factory = new PackageObjectFactory();", "-            return factory.doMakeObject(aPackages, aLoader, aName);", "+            return doMakeObject(aName);", "-                return factory.", "-                    doMakeObject(aPackages, aLoader, aName + \"Check\");", "+                return doMakeObject(aName + \"Check\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "175cd0c110a6ca3b91fa26d98d0eda34", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "96abec9ddf3ce448d75c32e7826eddb3c857408b", "commitAfterChange": "cbce85c08c1f792b01082ffaf2e15bf433a093b9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     void verifyVariable(MyVariable aVar)", "signatureAfterChange": "     void verifyVariable(MyVariable aVar)", "diff": ["-            else {", "-                // These are the non-static variables", "-                if (Scope.PRIVATE.equals(variableScope)", "-                    || (mConfig.isAllowPackage() && isPckg)", "-                    || (mConfig.isAllowProtected() && isProt))", "-                {", "-//                    checkVariable(aVar,", "-//                                  mConfig.getMemberRegexp(),", "-//                                  mConfig.getMemberPat());", "-                }", "-            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1de7c6fc545a6f188405b30f3a0a7e1f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/FileLengthCheck.java", "commitBeforeChange": "1efd41aa924264e0899f5819e1b30a55d715f98b", "commitAfterChange": "e20d45697c937fbb8ae3eb3b43bffb43e211237f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setMax(String aLength)", "signatureAfterChange": "     public void setMax(int aLength)", "diff": ["-    // that parsing this stuff is the core job of beanutils", "-    public void setMax(String aLength)", "+    public void setMax(int aLength)", "-        try {", "-            mMaxFileLength = Integer.parseInt(aLength);", "-        }", "-        catch (NumberFormatException ex) {", "-            throw new ConversionException(\"Can't parse '\"", "-                    + aLength + \"' as maximal file length\", ex);", "-        }", "+        mMaxFileLength = aLength;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20fd665ab7ceaf382b34f5b7b708400d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDoclet.java", "commitBeforeChange": "0e7ff063f8a07d9a5bf13a8b2c22bb8b8abf8162", "commitAfterChange": "9fe85771081f675ffba46da219957c3450801c92", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static boolean start(RootDoc root)             throws FileNotFoundException, UnsupportedEncodingException", "signatureAfterChange": "     public static boolean start(RootDoc root)             throws FileNotFoundException, UnsupportedEncodingException", "diff": ["-            if (classes.length != 1", "-                || !\"TokenTypes\".equals(classes[0].name())) {", "-                final String message =", "-                    \"The doclet should be used for TokenTypes only\";", "-                throw new IllegalArgumentException(message);", "-            }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26277bfaf3c75a892d6e0f1b295a53a7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "b78f144ee4613e1d503624067b4a03d10b3515a8", "commitAfterChange": "342ae1315c775fa512a5278d901bbd4fb23fd7c1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     ExpressionHandler createMethodCallHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "signatureAfterChange": "     ExpressionHandler createMethodCallHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "diff": ["-        ExpressionHandler handler =", "-            (ExpressionHandler) mCreatedHandlers.get(aAst);", "-        if (handler != null) {", "-            return handler;", "-        }", "-", "-        if (ast != null && ast.getType() == TokenTypes.METHOD_CALL) {", "-            aParent = createMethodCallHandler(aIndentCheck, ast, aParent);", "+        if (ast != null && isHandledType(ast.getType())) {", "+            aParent = getHandler(aIndentCheck, ast, aParent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34a702ef3168d5ac18eef4e41f1a7c86", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/AllChecksTest.java", "commitBeforeChange": "9a39d19a31f06c8614d33fcc9c3f7654ec9cdd9f", "commitAfterChange": "aa89a8aa52c5fde5ede8599d3d30cea87cd06f95", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testAllCheckstyleModulesInCheckstyleConfig() throws Exception", "signatureAfterChange": "      @Test     public void testAllCheckstyleModulesInCheckstyleConfig() throws Exception", "diff": ["-            if (\"SuppressionCommentFilter\".equals(moduleName)", "-                || \"SeverityMatchFilter\".equals(moduleName)", "-                || \"SuppressWithNearbyCommentFilter\".equals(moduleName)", "-                || \"SuppressWarningsFilter\".equals(moduleName)) {", "-                continue;", "-            }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "406d3e0247c4759facf3b0d7a6cb04a4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6", "commitAfterChange": "1321eda54e2ffc4fe1755228b1bf8d02681ae79c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     void reportCComment(int aStartLineNo, int aStartColNo,                         int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     void reportCComment(int aStartLineNo, int aStartColNo,                         int aEndLineNo, int aEndColNo)", "diff": ["-        // Remember if possible Javadoc comment", "-        if (mLines[aStartLineNo - 1].indexOf(\"/**\", aStartColNo) != -1) {", "-            mComments.put(new Integer(aEndLineNo - 1), cc);", "-        }", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dd8c9477a5b2c7ef3b0f53b46b393b8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "f010eb47869bae692609de487d6140373e02f3a3", "commitAfterChange": "907a19906f790ce8faea7aa74e12608538dca1b6", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 5, "signatureBeforeChange": "         LexicalFrame findFrame(String aNameToFind)", "signatureAfterChange": "     private LexicalFrame findFrame(String aName)", "diff": ["+     */", "+    private LexicalFrame findFrame(String aName)", "+    {", "+        if (mCurrent != null) {", "+            return mCurrent.getIfContains(aName);", "+        }", "+        else {", "+            return null;", "+        }", "-         */", "-        LexicalFrame findFrame(String aNameToFind)", "-        {", "-            for (LexicalFrame thisFrame : mFrameList) {", "-                if (thisFrame.contains(aNameToFind)) {", "-                    return thisFrame;", "-                }", "-            }", "-            return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "692be12d61c7d8c499351feafe404af5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java", "commitBeforeChange": "c2c34c8408d8ef5b92b7e87c671e392765f6c3d0", "commitAfterChange": "ebd4afdebe8ee09c0e6c7d1239e2ca982f87e51c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testLengthExpandedTabs()         throws Exception", "signatureAfterChange": "     @Test     public void testLengthExpandedTabs()         throws Exception", "diff": ["-", "-        final Pattern r1 = Utils.getPattern(\"a\");", "-        final Pattern r2 = Utils.getPattern(\"a\");", "-        assertEquals(r1, r2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699384355061aacf7de3ca38bd000f35", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java", "commitBeforeChange": "8d9d5e58ac50133f15ad8807bea302ab16aa5071", "commitAfterChange": "df8c04113133f9e449cf842695495a9f65b3c496", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     protected final void log(int aLineNo, String aKey,              Object aArg0, Object aArg1, Object aArg2)", "signatureAfterChange": "     protected final void log(int aLineNo, int aColNo, String aKey)", "diff": ["-     */", "-    protected final void log(int aLineNo, String aKey,", "-             Object aArg0, Object aArg1, Object aArg2)", "-    {", "-        log(aLineNo, aKey, new Object[] {aArg0, aArg1, aArg2});", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7756c7c797a53b87487d45d692bb0ad8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/AbstractUsageCheck.java", "commitBeforeChange": "686de78ad4f137d53e412c113ac84f57ac8afed4", "commitAfterChange": "04bca2e0435d598918603ce5a457ddc99e6ae5a5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void applyTo(Set aNodes)", "signatureAfterChange": "     public void applyTo(Set aNodes)", "diff": ["-                final SymTabAST symTabAST =", "-                    ASTManager.getInstance().get(nameAST);", "-                final String fileName = symTabAST.getFile().getAbsolutePath();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7adb99cd3599d9961299c2a93ea3529f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "f38d8abd42c3e824635e542e6031b3da1997c02e", "commitAfterChange": "7065b0d9dc232313d2dfd43fa882d24736e87ade", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private static DetailAST parse(         FileContents aContents,         boolean aSilentlyConsumeErrors,         boolean aTreatAssertAsKeyword,         boolean aTreatEnumAsKeyword)         throws RecognitionException, TokenStreamException", "signatureAfterChange": "     public static DetailAST parse(FileContents aContents)         throws RecognitionException, TokenStreamException", "diff": ["-     */", "-    private static DetailAST parse(", "-        FileContents aContents,", "-        boolean aSilentlyConsumeErrors,", "-        boolean aTreatAssertAsKeyword,", "-        boolean aTreatEnumAsKeyword)", "-        throws RecognitionException, TokenStreamException", "-    {", "-        lexer.setTreatAssertAsKeyword(aTreatAssertAsKeyword);", "-        lexer.setTreatEnumAsKeyword(aTreatEnumAsKeyword);", "+        lexer.setTreatAssertAsKeyword(true);", "+        lexer.setTreatEnumAsKeyword(true);", "-            aSilentlyConsumeErrors", "-                ? new SilentJavaRecognizer(lexer)", "-                : new GeneratedJavaRecognizer(lexer);", "+            new GeneratedJavaRecognizer(lexer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80087107dfec67b73b49c48328656408", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java", "commitBeforeChange": "dedcabd90da2a85294a2b9d8891f626deddee2f3", "commitAfterChange": "ed6c2ea1336f2b46b9f64dffc417f608c8de5067", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock textBlock,             JavadocTagType tagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock textBlock,             JavadocTagType tagType)", "diff": ["-        Pattern blockTagPattern = Pattern.compile(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "-            final Matcher blockTagMatcher = blockTagPattern.matcher(textValue);", "+            final Matcher blockTagMatcher = getBlockTagPattern(i).matcher(textValue);", "-            blockTagPattern = Pattern.compile(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "807b0011731dd8cb2d505f52d4f81a12", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/doclets/CheckDocsDoclet.java", "commitBeforeChange": "7c20c36cea276a2b9abb09e8b19eb5825e6a921a", "commitAfterChange": "262209477f39964a63103613f3e2c985da083371", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "         public int compare(Object aObject1, Object aObject2)", "signatureAfterChange": "         public int compare(ClassDoc aObject1, ClassDoc aObject2)", "diff": ["-        public int compare(Object aObject1, Object aObject2)", "+        public int compare(ClassDoc aObject1, ClassDoc aObject2)", "-            final ClassDoc classDoc1 = (ClassDoc) aObject1;", "-            final ClassDoc classDoc2 = (ClassDoc) aObject2;", "-            final String checkName1 = getCheckName(classDoc1);", "-            final String checkName2 = getCheckName(classDoc2);", "+            final String checkName1 = getCheckName(aObject1);", "+            final String checkName2 = getCheckName(aObject2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8da965010996c9999e6b413475d4133d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PropertyCacheFile.java", "commitBeforeChange": "0ce872d7cc6b0b1564655b9e3119f72911f4dddd", "commitAfterChange": "ea9ff3965d9c657b5b7bd2d969e075f430635c47", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static void flushAndCloseOutStream(OutputStream stream)", "signatureAfterChange": "     private static void flushAndCloseOutStream(OutputStream stream) throws IOException", "diff": ["-    private static void flushAndCloseOutStream(OutputStream stream) {", "-        try {", "+    private static void flushAndCloseOutStream(OutputStream stream) throws IOException {", "+        if (stream != null) {", "-            Closeables.close(stream, false);", "-        catch (final IOException ex) {", "-            LOG.debug(\"Unable to flush and close output stream.\", ex);", "-        }", "+        Closeables.close(stream, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "940fe4f6ebc2b8a6c64666679043ff74", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/JavadocUtils.java", "commitBeforeChange": "dedcabd90da2a85294a2b9d8891f626deddee2f3", "commitAfterChange": "ed6c2ea1336f2b46b9f64dffc417f608c8de5067", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static void lookForInlineTags(TextBlock comment, int lineNumber,             final List<JavadocTag> validTags, final List<InvalidJavadocTag> invalidTags)", "signatureAfterChange": "     private static void lookForInlineTags(TextBlock comment, int lineNumber,             final List<JavadocTag> validTags, final List<InvalidJavadocTag> invalidTags)", "diff": ["-        final Pattern commentPattern = Pattern.compile(\"^\\\\s*(?:/\\\\*{2,}|\\\\*+)\\\\s*(.*)\");", "-        final Matcher commentMatcher = commentPattern.matcher(text);", "+        final Matcher commentMatcher = COMMENT_PATTERN.matcher(text);", "-        final Pattern tagPattern = Pattern.compile(\".*?\\\\{@(\\\\p{Alpha}+)\\\\s+(.*?)\\\\}\");", "-        final Matcher tagMatcher = tagPattern.matcher(commentContents);", "+        final Matcher tagMatcher = INLINE_TAG_PATTERN.matcher(commentContents);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acfad0d699cf2b62aac6d15f35139020", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "e2329c7a98dadb9e2717aae92216964a6ab40329", "commitAfterChange": "073d09569f471061fd82899efac4f823269dd265", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void parseInputStream(InputStream aStream)         throws IOException, SAXException", "signatureAfterChange": "     private void parseInputSource(InputSource aSource)         throws IOException, SAXException", "diff": ["-    private void parseInputStream(InputStream aStream)", "+    private void parseInputSource(InputSource aSource)", "-        final InputStream configStream =", "-            new BufferedInputStream(aStream, TWO_KB);", "-        final InputSource inputSource = new InputSource(configStream);", "-        mSaxHandler.parseInputSource(inputSource);", "+        mSaxHandler.parseInputSource(aSource);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b367c0fa92a05e877df9ade7b23478ba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/VerifierImpl.java", "commitBeforeChange": "8d1cba0676d5550f7b538d2bd28cbc70dd9a003a", "commitAfterChange": "5ab5020a270215b2ada9ad899339e078e75dfb9a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void verifyLeftCurly(String aText,                                 boolean aAllowIf,                                 String aConstruct,                                 int aLineNo)", "signatureAfterChange": "     public void reportNeedBraces(int aLineNo, String aConstruct)", "diff": ["-    public void verifyLeftCurly(String aText,", "-                                boolean aAllowIf,", "-                                String aConstruct,", "-                                int aLineNo)", "+    public void reportNeedBraces(int aLineNo, String aConstruct)", "-        if (!\"{\".equals(aText) && !(aAllowIf && \"if\".equals(aText))) {", "-            log(aLineNo, \"'\" + aConstruct + \"' construct must use '{}'s.\");", "-        }", "+        log(aLineNo, \"'\" + aConstruct + \"' construct must use '{}'s.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3c11de75c55474223d8c9ccf33370b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "4ec69ed49e3c3087bacc90e8d7c6d7e891d613ba", "commitAfterChange": "2e572720e6c20f8b34b4616df470ad7fdb3d5b16", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public TextBlock getJavadocBefore(int aLineNo)", "signatureAfterChange": "     public TextBlock getJavadocBefore(int aLineNo)", "diff": ["-        final String[] text =", "-            (String[]) mJavadocComments.get(new Integer(lineNo));", "-", "-        return (text == null ? null : new Comment(text, lineNo + 1));", "+        return (TextBlock) mJavadocComments.get(new Integer(lineNo));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da737a905559141395bb0d5381eeb8cd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "6a977155274fa6ff7e3055ca3701c206d9e0d34d", "commitAfterChange": "2c41aaf844d3206775c0a8c9e78aabf3a6d85a36", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private ParseTree parseJavadocAsParseTree(String blockComment)         throws IOException", "signatureAfterChange": "     private ParseTree parseJavadocAsParseTree(String blockComment)", "diff": ["-    private ParseTree parseJavadocAsParseTree(String blockComment)", "-        throws IOException {", "-        final Charset utf8Charset = Charset.forName(\"UTF-8\");", "-        final InputStream in = new ByteArrayInputStream(blockComment.getBytes(utf8Charset));", "-", "-        final ANTLRInputStream input = new ANTLRInputStream(in);", "+    private ParseTree parseJavadocAsParseTree(String blockComment) {", "+        final ANTLRInputStream input = new ANTLRInputStream(blockComment);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e38b975096f24041bc99832d81b0283a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "96c668724bc05a11ceb031dda71efe1e9e69480d", "commitAfterChange": "788b41973d5747c7b4699a853b62168cf0001df6", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows,                                  boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows,                                  boolean aReportExpectedTags)", "diff": ["-                final Token fi = ei.getName();", "-                final String declaredEx = fi.getText();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f19b4e7fb9bb25dd832af66e3dc1a1c6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "bf8012b13d260143d771c1ce20a557214ea1c4e8", "commitAfterChange": "3925906faee1cf9310942708e2946d3e598f5f71", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public TreeWalker()", "signatureAfterChange": "     public TreeWalker()", "diff": ["-", "-        // TODO: I (lkuehne) can't believe I wrote this! HACK HACK HACK!", "-", "-        // the parent relationship should really be managed by the DetailAST", "-        // itself but ANTLR calls setFirstChild and friends in an", "-        // unpredictable way. Introducing this hack for now to make", "-        // DetailsAST.setParent() private...", "-        try {", "-            mDetailASTmParent = DetailAST.class.getDeclaredField(\"mParent\");", "-            // this will fail in environments with security managers", "-            mDetailASTmParent.setAccessible(true);", "-        }", "-        catch (NoSuchFieldException e) {", "-            mDetailASTmParent = null;", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1d650e7b2ea8a9f3116a39cdfbc0662", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/CheckUtilsTest.java", "commitBeforeChange": "6370bd4a8ad7f2affeece4bcfcfa0dcd9b13a01d", "commitAfterChange": "a15aacf77a4fd9c678ac7f28b90d9eaadd244af8", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void testIsProperUtilsClass() throws ReflectiveOperationException", "signatureAfterChange": "      @Test     public void testIsProperUtilsClass() throws ReflectiveOperationException", "diff": ["-        try {", "-            assertUtilsClassHasPrivateConstructor(CheckUtils.class);", "-            Assert.fail();", "-        }", "-        catch (InvocationTargetException ex) {", "-            Assert.assertTrue(ex.getCause() instanceof UnsupportedOperationException);", "-        }", "+        assertUtilsClassHasPrivateConstructor(CheckUtils.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4f8cd7b47f83e4e81581a299ea79e47", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CommonUtils.java", "commitBeforeChange": "2ba55edc4e35866afbb154e3ea03cf03e56ab9bc", "commitAfterChange": "f2c6263e151e8a7300755b36fbb41511c0a0cca1", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static Pattern createPattern(String pattern)", "signatureAfterChange": "     public static Pattern createPattern(String pattern)", "diff": ["+        return createPattern(pattern, 0);", "+    }", "-            return Pattern.compile(pattern);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fea3fe2eb6cda4989b103398f7c964a1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractFormatCheck.java", "commitBeforeChange": "104e69edd63edb8d35b6ae63a17934fc5cf49267", "commitAfterChange": "81b52e27c5077f9a4f426d32b0e39a785052c715", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void setFormat(String aFormat)         throws ConversionException", "signatureAfterChange": "     public final void setFormat(String aFormat)         throws ConversionException", "diff": ["-    public void setFormat(String aFormat)", "+    public final void setFormat(String aFormat)", "-        try {", "-            mRegexp = Utils.getPattern(aFormat);", "-            mFormat = aFormat;", "-        }", "-        catch (PatternSyntaxException e) {", "-            throw new ConversionException(\"unable to parse \" + aFormat, e);", "-        }", "+        updateRegexp(aFormat, mCompileFlags);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffb99bfe446de7cc0bdd0e502e529485", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "c85ec6f26ade692103ac27383a87c3402b4d66ca", "commitAfterChange": "fd24216f46eef6dfaaedd957d30d6935c5a0606d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "     public void setLCurlyMethod(String aTo)", "signatureAfterChange": "     public void setLCurlyMethod(String aTo)", "diff": ["-        final LeftCurlyOption opt = LeftCurlyOption.decode(aTo);", "-        if (opt == null) {", "-            throw new BuildException(\"Unable to parse lcurlyMethod parameter,\",", "-                                     location);", "-        }", "-        mConfig.setLCurlyMethod(opt);", "+        mConfig.setLCurlyMethod(extractLeftCurlyOption(aTo));", "+    }"]}]}
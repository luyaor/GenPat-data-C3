{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbe5ebd8c95ad7b8f26fe33bec7f5702", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "668fd0dd7dc4e5e2bf3f86c768c59454", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "d67d10e9f2b480f7f56fe7cda2a908cd5fe770c7", "commitAfterChange": "f65b17cbc30795247fef3077cce16a8bb53e9ffc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public static Configuration loadConfiguration(InputSource configSource,             PropertyResolver overridePropsResolver, boolean omitIgnoredModules)         throws CheckstyleException", "signatureAfterChange": "     public static Configuration loadConfiguration(InputSource configSource,             PropertyResolver overridePropsResolver, boolean omitIgnoredModules)         throws CheckstyleException", "diff": ["-        catch (final SAXParseException e) {", "+        catch (final SAXParseException ex) {", "-                    e.getMessage(), e.getLineNumber(), e.getColumnNumber());", "-            throw new CheckstyleException(message, e);", "+                    ex.getMessage(), ex.getLineNumber(), ex.getColumnNumber());", "+            throw new CheckstyleException(message, ex);", "-        catch (final ParserConfigurationException | IOException | SAXException e) {", "-            throw new CheckstyleException(UNABLE_TO_PARSE_EXCEPTION_PREFIX, e);", "+        catch (final ParserConfigurationException | IOException | SAXException ex) {", "+            throw new CheckstyleException(UNABLE_TO_PARSE_EXCEPTION_PREFIX, ex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbb7fb24349c5eaa54aa2678486197b7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "commitBeforeChange": "d740f2e1cdb05f20a48bf7d5dcebdcd0faae6ddd", "commitAfterChange": "3ef918920c58c550169ccef3cfe1706aede11a6e", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "     private Checker createChecker()", "signatureAfterChange": "     private Checker createChecker()", "diff": ["-", "-", "-            // setup the listeners", "-            final AuditListener[] listeners = getListeners();", "-            for (AuditListener element : listeners) {", "-                checker.addListener(element);", "-            }", "-        catch (final Exception e) {", "-            throw new BuildException(\"Unable to create a Checker: \"", "-                    + e.getMessage(), e);", "+        catch (final CheckstyleException e) {", "+            throw new BuildException(String.format(\"Unable to create a Checker: \"", "+                    + \"configLocation {%s}, classpath {%s}.\", configLocation, classpath), e);", "-"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de97366190b79253a1b7cd8539308e3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "276f033d467d3fa2afa4684b049e33fc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "be8127a604bfdd91ff7cd32a1f825c9851d791ec", "commitAfterChange": "7d097b6fa682f8dcfedd95da2db8fed980c51705", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private List<JavadocTag> getJavadocTags(TextBlock aCmt)", "signatureAfterChange": "     private List<JavadocTag> getJavadocTags(TextBlock aCmt)", "diff": ["-        final String[] text = aCmt.getText();", "-        final List<JavadocTag> tags = Lists.newArrayList();", "-        Pattern tagPattern = Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "-        for (int i = 0; i < text.length; i++) {", "-            final String s = text[i];", "-            final Matcher tagMatcher = tagPattern.matcher(s);", "-            if (tagMatcher.find()) {", "-                final String tagName = tagMatcher.group(1);", "-", "-                String content = s.substring(tagMatcher.end(1));", "-                if (content.endsWith(\"*/\")) {", "-                    content = content.substring(0, content.length() - 2);", "-                }", "-                int col = tagMatcher.start(1) - 1;", "-                if (i == 0) {", "-                    col += aCmt.getStartColNo();", "-                }", "-", "-                if (JavadocTagInfo.isValidName(tagName)) {", "-                    tags.add(new JavadocTag(aCmt.getStartLineNo() + i, col,", "-                            tagName, content.trim()));", "-                }", "-                else if (!mAllowUnknownTags) {", "-                    log(aCmt.getStartLineNo() + i, col,", "-                            \"javadoc.unknownTag\", tagName);", "-                }", "+        JavadocTags tags =", "+            JavadocUtils.getJavadocTags(aCmt, JavadocTagType.BLOCK);", "+        if (!mAllowUnknownTags) {", "+            for (InvalidJavadocTag tag : tags.invalidTags) {", "+                log(tag.line, tag.col, \"javadoc.unknownTag\", tag.name);", "-            tagPattern = Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "-        return tags;", "+        return tags.validTags;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce662deb4a3e1d9799368a418a7a925e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "cc6caa71f55ae33ad8c018e3b7915e6b93b7de81", "commitAfterChange": "3eca04c940bcdf575c2f9009202a4145e9a82c15", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        ScopeState state;", "-                state = scopeStates.peek();", "-                if (state.currentScopeState > STATE_CTOR_DEF) {", "-                    if (!ignoreConstructors) {", "-                        log(ast, MSG_CONSTRUCTOR);", "-                    }", "-                }", "-                else {", "-                    state.currentScopeState = STATE_CTOR_DEF;", "-                }", "+                processConstructor(ast);", "-                state = scopeStates.peek();", "+", "-                if (state.currentScopeState > STATE_METHOD_DEF) {", "-                    if (!ignoreMethods) {", "-                        log(ast, MSG_METHOD);", "-                    }", "-                }", "-                else {", "-                    state.currentScopeState = STATE_METHOD_DEF;", "-                }", "+                processMethod(ast);", "-                    || ast.getParent().getParent().getType()", "+                        || ast.getParent().getParent().getType()", "-                state = scopeStates.peek();", "-                if (ast.findFirstToken(TokenTypes.LITERAL_STATIC) != null) {", "-                    if (state.currentScopeState > STATE_STATIC_VARIABLE_DEF) {", "-                        if (!ignoreModifiers", "-                            || state.currentScopeState > STATE_INSTANCE_VARIABLE_DEF) {", "-                            log(ast, MSG_STATIC);", "-                        }", "-                    }", "-                    else {", "-                        state.currentScopeState = STATE_STATIC_VARIABLE_DEF;", "-                    }", "-                }", "-                else {", "-                    if (state.currentScopeState > STATE_INSTANCE_VARIABLE_DEF) {", "-                        log(ast, MSG_INSTANCE);", "-                    }", "-                    else if (state.currentScopeState == STATE_STATIC_VARIABLE_DEF) {", "-                        state.declarationAccess = Scope.PUBLIC;", "-                        state.currentScopeState = STATE_INSTANCE_VARIABLE_DEF;", "-                    }", "-                }", "-", "-                final Scope access = ScopeUtils.getScopeFromMods(ast);", "-                if (state.declarationAccess.compareTo(access) > 0) {", "-                    if (!ignoreModifiers) {", "-                        log(ast, MSG_ACCESS);", "-                    }", "-                }", "-                else {", "-                    state.declarationAccess = access;", "-                }", "+                processModifiers(ast);", "+                break;", "+        }", "+    }"]}]}
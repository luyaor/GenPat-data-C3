{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9359a27fe16761038d697c8d66a08046", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d2ee324b3c1c30ff5643d09e7c4e7a9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocUtils.java", "commitBeforeChange": "7d097b6fa682f8dcfedd95da2db8fed980c51705", "commitAfterChange": "d8286130e83dc672d30cd00eddbf6b5f77112521", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static JavadocTags getJavadocTags(TextBlock aCmt,                                              JavadocTagType tagType)", "signatureAfterChange": "     public static JavadocTags getJavadocTags(TextBlock aCmt,                                              JavadocTagType aTagType)", "diff": ["-                                             JavadocTagType tagType)", "+                                             JavadocTagType aTagType)", "-        Pattern blockTagPattern = Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "+        Pattern blockTagPattern =", "+            Utils.getPattern(\"/\\\\*{2,}\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "-            if ((tagType.equals(JavadocTagType.ALL) ||", "-                  tagType.equals(JavadocTagType.BLOCK))", "-                && blockTagMatcher.find()) {", "+            if ((aTagType.equals(JavadocTagType.ALL) || aTagType", "+                    .equals(JavadocTagType.BLOCK)) && blockTagMatcher.find())", "+            {", "-                int line = aCmt.getStartLineNo() + i;", "+                final int line = aCmt.getStartLineNo() + i;", "-                    tags.add(new JavadocTag(line, col, tagName, content.trim()));", "+                    tags.add(", "+                        new JavadocTag(line, col, tagName, content.trim()));", "-            else if (tagType.equals(JavadocTagType.ALL) ||", "-                     tagType.equals(JavadocTagType.INLINE)) {", "+            else if (aTagType.equals(JavadocTagType.ALL)", "+                    || aTagType.equals(JavadocTagType.INLINE))", "+            {", "-                Pattern commentPattern = Utils.getPattern(\"^\\\\s*(?:/\\\\*{2,}|\\\\*+)\\\\s*(.*)\");", "-                Matcher commentMatcher = commentPattern.matcher(s);", "+                final Pattern commentPattern =", "+                    Utils.getPattern(\"^\\\\s*(?:/\\\\*{2,}|\\\\*+)\\\\s*(.*)\");", "+                final Matcher commentMatcher = commentPattern.matcher(s);", "-                Pattern tagPattern = Utils.getPattern(\".*?\\\\{@(\\\\p{Alpha}+)\\\\s+(.*?)\\\\}\");", "-                Matcher tagMatcher = tagPattern.matcher(commentContents);", "+                final Pattern tagPattern =", "+                    Utils.getPattern(\".*?\\\\{@(\\\\p{Alpha}+)\\\\s+(.*?)\\\\}\");", "+                final Matcher tagMatcher = tagPattern.matcher(commentContents);", "-                        String tagName = tagMatcher.group(1);", "-                        String tagValue = tagMatcher.group(2).trim();", "-                        int line = aCmt.getStartLineNo() + i;", "+                        final String tagName = tagMatcher.group(1);", "+                        final String tagValue = tagMatcher.group(2).trim();", "+                        final int line = aCmt.getStartLineNo() + i;", "-                            tags.add(new JavadocTag(", "-                                line, col, tagName, tagValue));", "+                            tags.add(new JavadocTag(line, col, tagName,", "+                                    tagValue));", "-                            invalidTags.add(new InvalidJavadocTag(", "-                                line, col, tagName));", "+                            invalidTags.add(new InvalidJavadocTag(line, col,", "+                                    tagName));", "-                    //else Error: Unexpected match count for inline JavaDoc tag!", "+                    // else Error: Unexpected match count for inline JavaDoc", "+                    // tag!", "-            blockTagPattern = Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");", "+            blockTagPattern =", "+                Utils.getPattern(\"^\\\\s*\\\\**\\\\s*@(\\\\p{Alpha}+)\\\\s\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7136a54d7efa65b8a2a2868d97b9ec2f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "17cfbb2442d878ae6e229f809b8b2c479b9dfdcb", "commitAfterChange": "7166b6a1d07452b72cf6f62ae2afe9846b96ad91", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)             throws SAXException", "signatureAfterChange": "         public void startElement(String aNamespaceURI,                                  String aLocalName,                                  String aQName,                                  Attributes aAtts)                 throws SAXException", "diff": ["+        /** @see org.xml.sax.helpers.DefaultHandler **/", "+        public void startElement(String aNamespaceURI,", "+                                 String aLocalName,", "+                                 String aQName,", "+                                 Attributes aAtts)", "+                throws SAXException", "+        {", "+            // TODO: debug logging for support puposes", "+            if (aQName.equals(\"module\")) {", "+                //create configuration", "+                final String name = aAtts.getValue(\"name\");", "+                DefaultConfiguration conf = new DefaultConfiguration(name);", "+                if (mConfiguration == null) {", "+                    mConfiguration = conf;", "+                }", "+", "+                //add configuration to it's parent", "+                if (!mConfigStack.isEmpty()) {", "+                    final DefaultConfiguration top =", "+                            (DefaultConfiguration) mConfigStack.peek();", "+                    top.addChild(conf);", "+                }", "+", "+                mConfigStack.push(conf);", "+            }", "+            else if (aQName.equals(\"property\")) {", "+                //extract name and value", "+                final String name = aAtts.getValue(\"name\");", "+                final String value;", "+                try {", "+                    value = replaceProperties(aAtts.getValue(\"value\"),", "+                        mOverrideProps);", "+                }", "+                catch (CheckstyleException ex) {", "+                    throw new SAXException(ex.getMessage());", "+                }", "+", "+                //add to attributes of configuration", "+                final DefaultConfiguration top =", "+                    (DefaultConfiguration) mConfigStack.peek();", "+                top.addAttribute(name, value);", "+            }", "+        }", "-    /** @see org.xml.sax.helpers.DefaultHandler **/", "-    public void startElement(String aNamespaceURI,", "-                             String aLocalName,", "-                             String aQName,", "-                             Attributes aAtts)", "-            throws SAXException", "-    {", "-        // TODO: debug logging for support puposes", "-        if (aQName.equals(\"module\")) {", "-            //create configuration", "-            final String name = aAtts.getValue(\"name\");", "-            final DefaultConfiguration conf = new DefaultConfiguration(name);", "-            if (mConfiguration == null) {", "-                mConfiguration = conf;", "-            }", "-", "-            //add configuration to it's parent", "-            if (!mConfigStack.isEmpty()) {", "-                final DefaultConfiguration top =", "-                        (DefaultConfiguration) mConfigStack.peek();", "-                top.addChild(conf);", "-            }", "-", "-            mConfigStack.push(conf);", "-        }", "-        else if (aQName.equals(\"property\")) {", "-            //extract name and value", "-            final String name = aAtts.getValue(\"name\");", "-            final String value;", "-            try {", "-                value = replaceProperties(aAtts.getValue(\"value\"),", "-                    mOverrideProps);", "-            }", "-            catch (CheckstyleException ex) {", "-                throw new SAXException(ex.getMessage());", "-            }", "-", "-            //add to attributes of configuration", "-            final DefaultConfiguration top =", "-                (DefaultConfiguration) mConfigStack.peek();", "-            top.addAttribute(name, value);", "-        }", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d25775f6c987e846364a85218de3d38", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/BaseCheckTestSupport.java", "commitBeforeChange": "10d3015752ad509cd8f7956d98b6eb9c92641a45", "commitAfterChange": "d35dc970390f16309861f1438038c08dc59ac290", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 13, "signatureBeforeChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           Map<String, List<String>> expectedViolations)             throws Exception", "signatureAfterChange": "      protected void verify(Checker checker,                           File[] processedFiles,                           Map<String, List<String>> expectedViolations)             throws Exception", "diff": ["+        final Map<String, List<String>> actualViolations = getActualViolations(errs);", "+        final Map<String, List<String>> realExpectedViolations = Maps.filterValues(expectedViolations, new Predicate<List<String>>() {", "+            @Override", "+            public boolean apply(List<String> input) {", "+                return !input.isEmpty();", "+            }", "+        });", "+        final MapDifference<String, List<String>> violationDifferences = Maps.difference(realExpectedViolations, actualViolations);", "+", "+        final Map<String, List<String>> missingViolations = violationDifferences.entriesOnlyOnLeft();", "+        final Map<String, List<String>> unexpectedViolations = violationDifferences.entriesOnlyOnRight();", "+        final Map<String, ValueDifference<List<String>>> differingViolations = violationDifferences.entriesDiffering();", "+", "+        final StringBuilder message = new StringBuilder();", "+        if (!missingViolations.isEmpty()) {", "+            message.append(\"missing violations: \").append(missingViolations);", "+        }", "+        if (!unexpectedViolations.isEmpty()) {", "+            if (message.length() > 0) {", "+                message.append('\\n');", "+            }", "+            message.append(\"unexpected violations: \").append(unexpectedViolations);", "+        }", "+        if (!differingViolations.isEmpty()) {", "+            if (message.length() > 0) {", "+                message.append('\\n');", "+            }", "+            message.append(\"differing violations: \").append(differingViolations);", "+        }", "+", "+        assertTrue(message.toString(),", "+            missingViolations.isEmpty()", "+            && unexpectedViolations.isEmpty()", "+            && differingViolations.isEmpty());", "+", "+        checker.destroy();", "+    }", "-            for (String line = lnr.readLine(); line != null && lnr.getLineNumber() <= errs; line = lnr.readLine()) {", "-            final Map<String, List<String>> realExpectedViolations = Maps.filterValues(expectedViolations, new Predicate<List<String>>() {", "-                @Override", "-                public boolean apply(List<String> input) {", "-                    return !input.isEmpty();", "-                }", "-            });", "-            final MapDifference<String, List<String>> violationDifferences = Maps.difference(realExpectedViolations, actualViolations);", "-", "-            final Map<String, List<String>> missingViolations = violationDifferences.entriesOnlyOnLeft();", "-            final Map<String, List<String>> unexpectedViolations = violationDifferences.entriesOnlyOnRight();", "-            final Map<String, ValueDifference<List<String>>> differingViolations = violationDifferences.entriesDiffering();", "-", "-            final StringBuilder message = new StringBuilder();", "-            if (!missingViolations.isEmpty()) {", "-                message.append(\"missing violations: \").append(missingViolations);", "-            }", "-            if (!unexpectedViolations.isEmpty()) {", "-                if (message.length() > 0) {", "-                    message.append('\\n');", "-                }", "-                message.append(\"unexpected violations: \").append(unexpectedViolations);", "-            }", "-            if (!differingViolations.isEmpty()) {", "-                if (message.length() > 0) {", "-                    message.append('\\n');", "-                }", "-                message.append(\"differing violations: \").append(differingViolations);", "-            }", "-", "-            assertTrue(message.toString(),", "-                missingViolations.isEmpty()", "-                && unexpectedViolations.isEmpty()", "-                && differingViolations.isEmpty());", "-        checker.destroy();"]}]}
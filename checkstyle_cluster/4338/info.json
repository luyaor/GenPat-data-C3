{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "429478206567cfe11f5165e489d89445", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "038de5940a2af3de5c9654c2e14eca6c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "65ca7775ba7d0b649c16cfdc8a1447f41867c870", "commitAfterChange": "6ffc8dd26075456b055ffcd35d3915c23049bfbb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["-//        CheckConfiguration[] checkConfigs = null;", "-//        try {", "-//            checkConfigs =", "-//                ConfigurationLoader.loadConfigs(line.getOptionValue(\"c\"));", "-//        }", "-//        catch (CheckstyleException e) {", "-//            System.out.println(\"Error loading configuration file\");", "-//            e.printStackTrace(System.out);", "-//            System.exit(1);", "-//        }", "-", "-        // Load the config file", "-            config =", "-                ConfigurationLoader.loadConfiguration(line.getOptionValue(\"c\"),", "-                                                      props);", "+            config = ConfigurationLoader.loadConfiguration(", "+                    line.getOptionValue(\"c\"), props);", "-//        // create the checker", "-//        Checker c = null;", "-//        try {", "-//            c = new Checker(new GlobalProperties(props, System.out),", "-//                            checkConfigs);", "-//            c.addListener(listener);", "-//        }", "-//        catch (Exception e) {", "-//            System.out.println(\"Unable to create Checker: \"", "-//                               + e.getMessage());", "-//            e.printStackTrace(System.out);", "-//            System.exit(1);", "-//        }", "-", "-            c = new Checker(config);", "+            c = new Checker();", "+            c.configure(config);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4a3b104599f57aac00f0ec10bcdc7d97", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "f8f6ded7b447d5136ae01ad878966e2955ca730a", "commitAfterChange": "3c0608f33a6c41cf96056c52ae99070cbe5062d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["-        CheckConfiguration[] checkConfigs = null;", "+//        CheckConfiguration[] checkConfigs = null;", "+//        try {", "+//            checkConfigs =", "+//                ConfigurationLoader.loadConfigs(line.getOptionValue(\"c\"));", "+//        }", "+//        catch (CheckstyleException e) {", "+//            System.out.println(\"Error loading configuration file\");", "+//            e.printStackTrace(System.out);", "+//            System.exit(1);", "+//        }", "+", "+        // Load the config file", "+        Configuration config = null;", "-            checkConfigs =", "-                ConfigurationLoader.loadConfigs(line.getOptionValue(\"c\"));", "+            config =", "+                ConfigurationLoader.loadConfiguration(line.getOptionValue(\"c\"));", "+//        // create the checker", "+//        Checker c = null;", "+//        try {", "+//            c = new Checker(new GlobalProperties(props, System.out),", "+//                            checkConfigs);", "+//            c.addListener(listener);", "+//        }", "+//        catch (Exception e) {", "+//            System.out.println(\"Unable to create Checker: \"", "+//                               + e.getMessage());", "+//            e.printStackTrace(System.out);", "+//            System.exit(1);", "+//        }", "+", "-            c = new Checker(new GlobalProperties(props, System.out),", "-                            checkConfigs);", "+            c = new Checker(config);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1576a0d054b52a3a05dd30cd9a2adb9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "987da3a4c5fac3476a4461892c919c0f6d9248bd", "commitAfterChange": "08d6efe49d2960d9bd61bfb9cca65910f0c19b58", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void configure(Configuration aConfiguration)             throws CheckstyleException", "signatureAfterChange": "     public void setupChild(Configuration aChildConf)             throws CheckstyleException", "diff": ["-    public void configure(Configuration aConfiguration)", "-            throws CheckstyleException", "-        super.configure(aConfiguration);", "-        mConfig = aConfiguration;", "-", "+     */", "+    public void setupChild(Configuration aChildConf)", "+            throws CheckstyleException", "+    {", "-        Configuration[] checkConfigs = aConfiguration.getChildren();", "-        for (int i = 0; i < checkConfigs.length; i++) {", "-            final Configuration config = checkConfigs[i];", "-            // IMPORTANT! Need to use the same class loader that created this", "-            // class. Otherwise can get ClassCastException problems.", "-            final String name = config.getName();", "-            final String[] packageNames = getPackageNames();", "-            final Check check =", "-                    (Check) PackageObjectFactory.makeObject(", "+", "+        // IMPORTANT! Need to use the same class loader that created this", "+        // class. Otherwise can get ClassCastException problems.", "+        final String name = aChildConf.getName();", "+        final String[] packageNames = getPackageNames();", "+        final Check check =", "+                (Check) PackageObjectFactory.makeObject(", "-            check.contextualize(checkContext);", "-            check.configure(config);", "+        check.contextualize(mChildContext);", "+        check.configure(aChildConf);", "-            registerCheck(check);", "-        }", "+        registerCheck(check);"]}]}
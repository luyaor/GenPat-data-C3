{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "badf56eb8dd49b5f2acb2e14c23c796a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b7066bfb73e1dfcb45920ad49ab4fe5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/AnnotationUseStyleTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens()", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens()", "diff": ["-        AnnotationUseStyleCheck constantNameCheckObj = new AnnotationUseStyleCheck();", "-        int[] actual = constantNameCheckObj.getAcceptableTokens();", "-        int[] expected = {TokenTypes.ANNOTATION };", "+        final AnnotationUseStyleCheck constantNameCheckObj = new AnnotationUseStyleCheck();", "+        final int[] actual = constantNameCheckObj.getAcceptableTokens();", "+        final int[] expected = {TokenTypes.ANNOTATION };"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99c4f0d05cab4dff96f35fb44c3a3d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingOverrideCheckTest.java", "commitBeforeChange": "9316d20698a52bd68060947b8567577e47351b9a", "commitAfterChange": "3a2cb4d787e3c626bb0e2e02915cc1c37deb9d0b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Test     public void testGetAcceptableTokens() throws Exception", "signatureAfterChange": "      @Test     public void testGetAcceptableTokens() throws Exception", "diff": ["-        int[] expectedTokens = {TokenTypes.METHOD_DEF };", "-        MissingOverrideCheck check = new MissingOverrideCheck();", "-        int[] actual = check.getAcceptableTokens();", "+        final int[] expectedTokens = {TokenTypes.METHOD_DEF };", "+        final MissingOverrideCheck check = new MissingOverrideCheck();", "+        final int[] actual = check.getAcceptableTokens();"]}]}
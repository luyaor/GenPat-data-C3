{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "928912bf23bd42edd4d8e25230428b1b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e09de2718436596027b47b5a5a6392e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "78a5fd3494e8f3fe6e5edd0925f46b43583451fe", "commitAfterChange": "3cd6646941eca3da7d3b9a221c88e4c1d214876e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-    /** recursive method that finds the matches. */\r", "-    private void findMatch()\r", "-    {\r", "-        final boolean foundMatch = mMatcher.find();\r", "-        if (!foundMatch) {\r", "-            return;\r", "-        }\r", "-\r", "-        final int startLine = (mCharacters.get(mMatcher.start()))[0].intValue();\r", "-        final int startColumn = (mCharacters.get(mMatcher.start()))[1]\r", "-                .intValue();\r", "-        final int endLine = (mCharacters.get(mMatcher.end() - 1))[0].intValue();\r", "-        final int endColumn = (mCharacters.get(mMatcher.end() - 1))[1]\r", "-                .intValue();\r", "-\r", "-\r", "-        if (!mOptions.getSuppressor().shouldSuppress(startLine, startColumn,\r", "-                endLine, endColumn))\r", "-        {\r", "-            mCurrentMatches++;\r", "-            if (mCurrentMatches > mOptions.getMaximum()) {\r", "-                if (\"\".equals(mOptions.getMessage())) {\r", "-                    mOptions.getReporter().log(startLine, \"regexp.exceeded\",\r", "-                            mMatcher.pattern().toString());\r", "-                }\r", "-                else {\r", "-                    mOptions.getReporter()\r", "-                            .log(startLine, mOptions.getMessage());\r", "-                }\r", "-            }\r", "-        }\r", "-        findMatch();\r", "-    }\r", "+    /** recursive method that finds the matches. */", "+    private void findMatch()", "+    {", "+        final boolean foundMatch = mMatcher.find();", "+        if (!foundMatch) {", "+            return;", "+        }", "+", "+        final LineColumn start = mText.lineColumn(mMatcher.start());", "+        final LineColumn end = mText.lineColumn(mMatcher.end());", "+", "+        if (!mOptions.getSuppressor().shouldSuppress(start.getLine(),", "+                start.getColumn(), end.getLine(), end.getColumn()))", "+        {", "+            mCurrentMatches++;", "+            if (mCurrentMatches > mOptions.getMaximum()) {", "+                if (\"\".equals(mOptions.getMessage())) {", "+                    mOptions.getReporter().log(start.getLine(),", "+                            \"regexp.exceeded\", mMatcher.pattern().toString());", "+                }", "+                else {", "+                    mOptions.getReporter()", "+                            .log(start.getLine(), mOptions.getMessage());", "+                }", "+            }", "+        }", "+        findMatch();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b19efd12e402d7446695dfea48f1e89", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/RegexpCheck.java", "commitBeforeChange": "4adb6b2ad2b04e37aab274a3b55038c4e9da3578", "commitAfterChange": "1ca93bdf66b630e58d979ad2aa40f02e678db5cf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-            startLine = (mCharacters.get(mMatcher.start()))[0].", "-                    intValue();", "-            startColumn = (mCharacters.get(mMatcher.start()))[1].", "-                    intValue();", "-            endLine = (mCharacters.get(mMatcher.end() - 1))[0].", "-                    intValue();", "-            endColumn = (mCharacters.get(mMatcher.end() - 1))[1].", "-                    intValue();", "+            final FileText text = getFileContents().getText();", "+            final LineColumn start = text.lineColumn(mMatcher.start());", "+            final LineColumn end = text.lineColumn(mMatcher.end() - 1);", "+            startLine = start.getLine();", "+            startColumn = start.getColumn();", "+            endLine = end.getLine();", "+            endColumn = end.getColumn();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c445b04cfe88b785a4db436db10e0702", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "464caf32786d8134563199d8a3710740", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAfterCheck.java", "commitBeforeChange": "a298a50d48358e58be31eaea6b9f0e263f5f046e", "commitAfterChange": "319721560e3608c84146b20f473f46f8848c65a5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-", "-        if ((after < line.length())", "-            && !Character.isWhitespace(line.charAt(after)))", "-        {", "-            log(targetAST.getLineNo(),", "-                targetAST.getColumnNo() + targetAST.getText().length(),", "-                \"ws.notFollowed\",", "-                message);", "+        if (after < line.length()) {", "+            ", "+            final char charAfter = line.charAt(after);", "+            if ((targetAST.getType() == TokenTypes.SEMI)", "+                && ((charAfter == ';') || (charAfter == ')')))", "+            {", "+                return;", "+            }", "+            if (!Character.isWhitespace(charAfter)) {", "+                log(targetAST.getLineNo(),", "+                    targetAST.getColumnNo() + targetAST.getText().length(),", "+                    \"ws.notFollowed\",", "+                    message);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85a80b9cd219dfd74ffce32ce10437c8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAfterCheck.java", "commitBeforeChange": "6475d9dc1b5f1a2793fd112974031ebc00a834fc", "commitAfterChange": "43e856a0df8002e9f362ed22ff991b7b8c1cf80a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            if (!Character.isWhitespace(charAfter)) {", "-                //empty FOR_ITERATOR?", "-                if (targetAST.getType() == TokenTypes.SEMI) {", "-                    final DetailAST sibling =", "-                        targetAST.getNextSibling();", "-                    if (sibling != null", "-                        && sibling.getType() == TokenTypes.FOR_ITERATOR", "-                        && sibling.getChildCount() == 0) {", "-                        return;", "-                    }", "-                }", "+            if (!Character.isWhitespace(charAfter) && !isEmptyForIterator(targetAST)) {", "+", "-                    targetAST.getColumnNo() + targetAST.getText().length(),", "-                    WS_NOT_FOLLOWED,", "-                    message);", "+                        targetAST.getColumnNo() + targetAST.getText().length(),", "+                        WS_NOT_FOLLOWED,", "+                        message);"]}]}
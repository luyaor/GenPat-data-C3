{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdd9c13c0b4fde253b0a55121a54f50d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e1a67e3725fd6f890629f4c5c933d7f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "6c04cd63af392376159dc7aae41d85bbc348e96d", "commitAfterChange": "6ee4a0f805d528cdee03cfc175502d15b5722dab", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private static boolean isCharacterValidAfterGenericEnd(char charAfter)", "signatureAfterChange": "     private static boolean isCharacterValidAfterGenericEnd(char charAfter)", "diff": ["-        return Character.isWhitespace(charAfter)", "-                || charAfter == '(' || charAfter == ')'", "-                || charAfter == ',' || charAfter == '['", "-                || charAfter == '.' || charAfter == ':'", "-                || charAfter == ';';", "+        return charAfter == '(' || charAfter == ')'", "+            || charAfter == ',' || charAfter == '['", "+            || charAfter == '.' || charAfter == ':'", "+            || charAfter == ';'", "+            || Character.isWhitespace(charAfter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beca7a772608dec6eb7f1d0c96884025", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void processVariable(DetailAST ast)", "signatureAfterChange": "     private void processVariable(DetailAST ast)", "diff": ["-        if (ScopeUtils.inInterfaceOrAnnotationBlock(ast)", "-            || (!ScopeUtils.isLocalVariableDef(ast)", "-            && (ast.getType() != TokenTypes.PARAMETER_DEF)))", "+        if (!ScopeUtils.inInterfaceOrAnnotationBlock(ast)", "+            && (ScopeUtils.isLocalVariableDef(ast)", "+                || (ast.getType() == TokenTypes.PARAMETER_DEF)))", "-            // do nothing", "-            return;", "-        }", "-        //local variable or pnameter. Does it shadow a field?", "-        final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-        final String name = nameAST.getText();", "-        if ((currentFrame.containsStaticField(name)", "-             || (!inStatic(ast) && currentFrame.containsInstanceField(name)))", "-            && ((regexp == null) || (!getRegexp().matcher(name).find()))", "-            && !isIgnoredSetterParam(ast, name)", "-            && !isIgnoredConstructorParam(ast)", "-            && !isIgnoredParamOfAbstractMethod(ast))", "-        {", "-            log(nameAST, \"hidden.field\", name);", "+            // local variable or parameter. Does it shadow a field?", "+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "+            final String name = nameAST.getText();", "+", "+            if ((currentFrame.containsStaticField(name)", "+                || (!inStatic(ast) && currentFrame.containsInstanceField(name)))", "+                && ((regexp == null) || (!getRegexp().matcher(name).find()))", "+                && !isIgnoredSetterParam(ast, name)", "+                && !isIgnoredConstructorParam(ast)", "+                && !isIgnoredParamOfAbstractMethod(ast))", "+            {", "+                log(nameAST, \"hidden.field\", name);", "+            }"]}]}
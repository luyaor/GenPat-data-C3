{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43f56aa1138148fe8b2aedc6fa8823f0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5db7de82222eadb7b33afb58400829cf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "27045d71a3d9d415d96a7734724b08d84b891694", "commitAfterChange": "f6cb72258856fdae0b89c66a0ba750712674cdee", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        switch (abstractOption) {", "-            case TOP:", "-                if (isNotStaticAndLastImport) {", "-                    lastGroup = Integer.MIN_VALUE;", "-                    lastImport = \"\";", "-                }", "-                doVisitToken(ident, isStatic, isStaticAndNotLastImport);", "-                break;", "-            case BOTTOM:", "-                if (isStaticAndNotLastImport) {", "-                    lastGroup = Integer.MIN_VALUE;", "-                    lastImport = \"\";", "-                }", "-                doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "-                break;", "+        // using set of IF instead of SWITCH to analyze Enum options to satisfy coverage.", "+        // https://github.com/checkstyle/checkstyle/issues/1387", "+        if (abstractOption == ImportOrderOption.TOP) {", "-            case ABOVE:", "-                // previous non-static but current is static", "-                doVisitToken(ident, isStatic, isStaticAndNotLastImport);", "-                break;", "+            if (isNotStaticAndLastImport) {", "+                lastGroup = Integer.MIN_VALUE;", "+                lastImport = \"\";", "+            }", "+            doVisitToken(ident, isStatic, isStaticAndNotLastImport);", "-            case UNDER:", "-                doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "-                break;", "+        }", "+        else if (abstractOption == ImportOrderOption.BOTTOM) {", "-            case INFLOW:", "-                // previous argument is useless here", "-                doVisitToken(ident, isStatic, true);", "-                break;", "+            if (isStaticAndNotLastImport) {", "+                lastGroup = Integer.MIN_VALUE;", "+                lastImport = \"\";", "+            }", "+            doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "-            default:", "-                throw new IllegalStateException(", "-                        \"Unexpected option for static imports: \" + abstractOption.toString());", "+        }", "+        else if (abstractOption == ImportOrderOption.ABOVE) {", "+            // previous non-static but current is static", "+            doVisitToken(ident, isStatic, isStaticAndNotLastImport);", "+        else if (abstractOption == ImportOrderOption.UNDER) {", "+            doVisitToken(ident, isStatic, isNotStaticAndLastImport);", "+", "+        }", "+        else if (abstractOption == ImportOrderOption.INFLOW) {", "+            // \"previous\" argument is useless here", "+            doVisitToken(ident, isStatic, true);", "+", "+        }", "+        else {", "+            throw new IllegalStateException(", "+                    \"Unexpected option for static imports: \" + abstractOption.toString());", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79e0f125c34464545b8616c8f29a220c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/PackageNamesLoader.java", "commitBeforeChange": "33efb558db835d60ca54644860a096f08d802fb5", "commitAfterChange": "e689662e9d47347cb2f326e1c16901ee1c4c6367", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static Set<String> getPackageNames(ClassLoader classLoader)         throws CheckstyleException", "signatureAfterChange": "     public static Set<String> getPackageNames(ClassLoader classLoader)             throws CheckstyleException", "diff": ["-        throws CheckstyleException {", "+            throws CheckstyleException {", "-        Enumeration<URL> packageFiles = null;", "+        Set<String> result;", "-            packageFiles = classLoader.getResources(CHECKSTYLE_PACKAGES);", "+            //create the loader outside the loop to prevent PackageObjectFactory", "+            //being created anew for each file", "+            final PackageNamesLoader namesLoader = new PackageNamesLoader();", "+", "+            final Enumeration<URL> packageFiles = classLoader.getResources(CHECKSTYLE_PACKAGES);", "+", "+            while (packageFiles.hasMoreElements()) {", "+                final URL packageFile = packageFiles.nextElement();", "+                InputStream stream = null;", "+", "+                try {", "+                    stream = new BufferedInputStream(packageFile.openStream());", "+                    final InputSource source = new InputSource(stream);", "+                    namesLoader.parseInputSource(source);", "+                }", "+                catch (IOException e) {", "+                    throw new CheckstyleException(\"unable to open \" + packageFile, e);", "+                }", "+                finally {", "+                    Closeables.closeQuietly(stream);", "+                }", "+            }", "+", "+            result = namesLoader.getPackageNames();", "+", "-            throw new CheckstyleException(", "-                    \"unable to get package file resources\", e);", "+            throw new CheckstyleException(\"unable to get package file resources\", e);", "+        }", "+        catch (ParserConfigurationException | SAXException e) {", "+            throw new CheckstyleException(\"unable to open one of package files\", e);", "-        //create the loader outside the loop to prevent PackageObjectFactory", "-        //being created anew for each file", "-        final PackageNamesLoader namesLoader = newPackageNamesLoader();", "-", "-        while (packageFiles.hasMoreElements()) {", "-            final URL packageFile = packageFiles.nextElement();", "-            InputStream stream = null;", "-", "-            try {", "-                stream = new BufferedInputStream(packageFile.openStream());", "-                final InputSource source = new InputSource(stream);", "-                loadPackageNamesSource(source, \"default package names\",", "-                    namesLoader);", "-            }", "-            catch (IOException e) {", "-                throw new CheckstyleException(", "-                        \"unable to open \" + packageFile, e);", "-            }", "-            finally {", "-                Closeables.closeQuietly(stream);", "-            }", "-        }", "-        return namesLoader.getPackageNames();", "-    }", "+        return result;"]}]}
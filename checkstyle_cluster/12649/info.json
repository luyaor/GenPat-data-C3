{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d410501b830c8dad1302903634ef2484", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88d26591d0bdfec09843ab7f183f7574", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "dc4e97d024fea774cecfd8d9501bf3dac4faf45c", "commitAfterChange": "6a9e1b3f93b487b86be7def11a0c9880f01ac29f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void logWarningMessage(DetailAST aCurrentNode, int aCurrentIndent)", "signatureAfterChange": "     private void logWarningMessage(DetailAST aCurrentNode, int aCurrentIndent)", "diff": ["-        if (aCurrentNode.getColumnNo() < aCurrentIndent) {", "-            mIndentCheck.indentationLog(aCurrentNode.getLineNo(),", "-                    \"indentation.error\", aCurrentNode.getText(),", "-                    aCurrentNode.getColumnNo(), aCurrentIndent);", "+        if (mForceStrictCondition) {", "+            if (aCurrentNode.getColumnNo() != aCurrentIndent) {", "+                mIndentCheck.indentationLog(aCurrentNode.getLineNo(),", "+                        \"indentation.error\", aCurrentNode.getText(),", "+                        aCurrentNode.getColumnNo(), aCurrentIndent);", "+            }", "+        }", "+        else {", "+            if (aCurrentNode.getColumnNo() < aCurrentIndent) {", "+                mIndentCheck.indentationLog(aCurrentNode.getLineNo(),", "+                        \"indentation.error\", aCurrentNode.getText(),", "+                        aCurrentNode.getColumnNo(), aCurrentIndent);", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9edf7480dca27e285eb7fe07120e3e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "dee1f30bb97acfacf9795700d11521b0e34c37b2", "commitAfterChange": "49862970ac522ae85fa014b5ac4985e56645fcff", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST aMethodCall)", "diff": ["+            }", "+        } else if(performEqualsIgnoreCaseCheck) {", "+            if(\"equalsIgnoreCase\".equals(method.getText()) && containsOneArg(expr)) {", "+                if (containsAllSafeTokens(expr)) {", "+                    log(aMethodCall.getLineNo(), aMethodCall.getColumnNo(),", "+                            \"equalsIgnoreCase.avoid.null\");", "+                }"]}]}
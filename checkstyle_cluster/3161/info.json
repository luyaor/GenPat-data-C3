{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1d8a4032aee1058c960bbe3e4336d53", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21ba08b651c7fde258ba32ced9c45217", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "26d7dd555a9d64b0682e1fb08de7a181cdb97b12", "commitAfterChange": "43cdf3d62b35408cf11257af0c33c49a47c9daf9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isIgnoredSetterParam(DetailAST aAST, String aName)", "signatureAfterChange": "     private boolean isIgnoredSetterParam(DetailAST aAST, String aName)", "diff": ["-        if (!(aAST.getType() == TokenTypes.PARAMETER_DEF)", "+        if (aAST.getType() != TokenTypes.PARAMETER_DEF", "-        //property setter name?", "-        final String expectedName =", "-            \"set\" + aName.substring(0, 1).toUpperCase() + aName.substring(1);", "-        final DetailAST methodNameAST =", "-            methodAST.findFirstToken(TokenTypes.IDENT);", "-        final String methodName = methodNameAST.getText();", "-        if (!methodName.equals(expectedName)) {", "-            return false;", "-        }", "-        return typeAST.branchContains(TokenTypes.LITERAL_VOID);", "+        if (!typeAST.branchContains(TokenTypes.LITERAL_VOID)) {", "+            return false;", "+        }", "+", "+        //property setter name?", "+        final String methodName =", "+                methodAST.findFirstToken(TokenTypes.IDENT).getText();", "+        final String expectedName = \"set\" + capitalize(aName);", "+        return methodName.equals(expectedName);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f85721139b44649330e232ed5ae587", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "2b32b003ab81c9bfcb8205b512eb4ea313e529af", "commitAfterChange": "cc6caa71f55ae33ad8c018e3b7915e6b93b7de81", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isSuperCall(DetailAST ast)", "signatureAfterChange": "     private boolean isSuperCall(DetailAST ast)", "diff": ["-        // same name of method", "-        AST sibling = ast.getNextSibling();", "-        // ignore type parameters", "-        if (sibling != null", "-            && sibling.getType() == TokenTypes.TYPE_ARGUMENTS) {", "-            sibling = sibling.getNextSibling();", "-        }", "-        if (sibling == null || sibling.getType() != TokenTypes.IDENT) {", "+        if (isSameNameMethod(ast)) {", "-        final String name = sibling.getText();", "-        if (!getMethodName().equals(name)) {", "-            return false;", "-        }", "-", "-        // 0 parameters?", "-        final DetailAST args = parent.getNextSibling();", "-        if (args == null || args.getType() != TokenTypes.ELIST) {", "-            return false;", "-        }", "-        if (args.getChildCount() != 0) {", "+        if (isZeroParameters(parent)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c2d93d6d2f516b68caa7e59ad179112f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean isIgnoredConstructorParam(DetailAST ast)", "signatureAfterChange": "     private boolean isIgnoredConstructorParam(DetailAST ast)", "diff": ["-        if ((ast.getType() != TokenTypes.PARAMETER_DEF)", "-            || !ignoreConstructorParameter)", "+        boolean result = false;", "+        if ((ast.getType() == TokenTypes.PARAMETER_DEF)", "+            && ignoreConstructorParameter)", "-            return false;", "+            final DetailAST parametersAST = ast.getParent();", "+            final DetailAST constructorAST = parametersAST.getParent();", "+            result = (constructorAST.getType() == TokenTypes.CTOR_DEF);", "-        final DetailAST parametersAST = ast.getParent();", "-        final DetailAST constructorAST = parametersAST.getParent();", "-        return (constructorAST.getType() == TokenTypes.CTOR_DEF);", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cba789f5275a72186fa323bb33b674ae", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean isIgnoredParamOfAbstractMethod(DetailAST ast)", "signatureAfterChange": "     private boolean isIgnoredParamOfAbstractMethod(DetailAST ast)", "diff": ["-        if ((ast.getType() != TokenTypes.PARAMETER_DEF)", "-            || !ignoreAbstractMethods)", "+        boolean result = false;", "+        if ((ast.getType() == TokenTypes.PARAMETER_DEF)", "+            && ignoreAbstractMethods)", "-            return false;", "+            final DetailAST method = ast.getParent().getParent();", "+            if (method.getType() == TokenTypes.METHOD_DEF) {", "+                final DetailAST mods = method.findFirstToken(TokenTypes.MODIFIERS);", "+                result = ((mods != null) && mods.branchContains(TokenTypes.ABSTRACT));", "+            }", "-        final DetailAST method = ast.getParent().getParent();", "-        if (method.getType() != TokenTypes.METHOD_DEF) {", "-            return false;", "-        }", "-        final DetailAST mods = method.findFirstToken(TokenTypes.MODIFIERS);", "-        return ((mods != null) && mods.branchContains(TokenTypes.ABSTRACT));", "+        return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce0bb0c45bbb72e1ede2661b90c392f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "94f9754acb5cc92a32bf36d2a789325fed384325", "commitAfterChange": "83f2b92b18eb10f3849b6a3be99a7b55b886cae0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isBooleanLiteralReturnStatement(AST ast)", "signatureAfterChange": "     private static boolean isBooleanLiteralReturnStatement(AST ast)", "diff": ["-        if (ast == null || ast.getType() != TokenTypes.LITERAL_RETURN) {", "-            return false;", "+        boolean booleanReturnStatement = false;", "+", "+        if (ast != null && ast.getType() == TokenTypes.LITERAL_RETURN) {", "+            final AST expr = ast.getFirstChild();", "+", "+            if (expr.getType() != TokenTypes.SEMI) {", "+                final AST value = expr.getFirstChild();", "+                booleanReturnStatement = isBooleanLiteralType(value.getType());", "+            }", "-", "-        final AST expr = ast.getFirstChild();", "-", "-        if (expr.getType() == TokenTypes.SEMI) {", "-            return false;", "-        }", "-", "-        final AST value = expr.getFirstChild();", "-        return isBooleanLiteralType(value.getType());", "+        return booleanReturnStatement;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec1292ff41aa6c8f9dfa1425733000d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c", "commitAfterChange": "39f40e57858c8a5c6310bf35e6649b03188b6996", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean hasTrailComment(DetailAST aAst)", "signatureAfterChange": "     private boolean hasTrailComment(DetailAST aAst)", "diff": ["+        DetailAST semi;", "-            DetailAST comma = variableDef.getNextSibling();", "+            semi = variableDef.getNextSibling();", "-            if (comma.getType() != TokenTypes.COMMA) {", "-                comma = variableDef.getLastChild();", "+            if (semi.getType() != TokenTypes.SEMI) {", "+                semi = variableDef.getLastChild();", "+        }", "+        else {", "+            semi = getSemi(aAst);", "+        }", "-            final int lineNo = comma.getLineNo();", "+        if (semi != null) {", "+            final int lineNo = semi.getLineNo();", "-            if (sCommentRegexp.matcher(currentLine).find()) {", "+            if (currentLine != null && sCommentRegexp.matcher(currentLine).find()) {", "-        return mAllowByTailComment && result;", "+", "+        return result;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a944da8284017e0ef813e376b551d70", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d34157a073b37a9caff415e721c6c6a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "0ce872d7cc6b0b1564655b9e3119f72911f4dddd", "commitAfterChange": "ea9ff3965d9c657b5b7bd2d969e075f430635c47", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "signatureAfterChange": "      @Override     protected void processFiltered(File file, List<String> lines)", "diff": ["-        if (cache.alreadyChecked(fileName, timestamp)", "-                 || !Utils.fileExtensionMatches(file, getFileExtensions())) {", "+        if (cache != null", "+                && (cache.inCache(fileName, timestamp)", "+                    || !Utils.fileExtensionMatches(file, getFileExtensions()))) {", "-        if (getMessageCollector().size() == 0) {", "-            cache.checkedOk(fileName, timestamp);", "+        if (cache != null && getMessageCollector().size() == 0) {", "+            cache.put(fileName, timestamp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea409ea6196bbec06e8a900b1e993058", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/UtilsTest.java", "commitBeforeChange": "8da777a68ad936f1a4e07d59cee17ecab2fc293e", "commitAfterChange": "7f740b18c9b4d3cd596dcf06d70785c3362fabd5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testFileExtensions()", "signatureAfterChange": "      @Test     public void testFileExtensions()", "diff": ["-        assertFalse(fileExtensionMatches(file, fileExtensions));", "-        assertTrue(fileExtensionMatches(file, null));", "+        assertFalse(Utils.fileExtensionMatches(file, fileExtensions));", "+        assertTrue(Utils.fileExtensionMatches(file, null));", "-        assertTrue(fileExtensionMatches(file, fileExtensions));", "+        assertTrue(Utils.fileExtensionMatches(file, fileExtensions));", "-        assertTrue(fileExtensionMatches(file, \"\"));", "+        assertTrue(Utils.fileExtensionMatches(file, \"\"));"]}]}
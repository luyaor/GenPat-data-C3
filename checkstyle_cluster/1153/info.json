{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b24f05b32a3c977b5c5ad55c260e17ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f8592b8bf2276449242003b47eeb094", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java", "commitBeforeChange": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7", "commitAfterChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testInner()         throws Exception", "signatureAfterChange": "      @Test     public void testInner()         throws Exception", "diff": ["-            \"30:24: Variable 'rData' must be private and have accessor methods.\",", "-            \"33:27: Variable 'protectedVariable' must be private and have accessor methods.\",", "-            \"36:17: Variable 'packageVariable' must be private and have accessor methods.\",", "-            \"41:29: Variable 'sWeird' must be private and have accessor methods.\",", "-            \"43:19: Variable 'sWeird2' must be private and have accessor methods.\",", "-            \"77:20: Variable 'someValue' must be private and have accessor methods.\",", "+            \"30:24: \" + getCheckMessage(MSG_KEY, \"rData\"),", "+            \"33:27: \" + getCheckMessage(MSG_KEY, \"protectedVariable\"),", "+            \"36:17: \" + getCheckMessage(MSG_KEY, \"packageVariable\"),", "+            \"41:29: \" + getCheckMessage(MSG_KEY, \"sWeird\"),", "+            \"43:19: \" + getCheckMessage(MSG_KEY, \"sWeird2\"),", "+            \"77:20: \" + getCheckMessage(MSG_KEY, \"someValue\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b57f37ae3105199a7ee31770b0ea618", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/OneTopLevelClassCheckTest.java", "commitBeforeChange": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7", "commitAfterChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testFileWithFewTopLevelClasses() throws Exception", "signatureAfterChange": "      @Test     public void testFileWithFewTopLevelClasses() throws Exception", "diff": ["-            \"25: Top-level class NoSuperClone has to reside in its own source file.\",", "-            \"33: Top-level class InnerClone has to reside in its own source file.\",", "-            \"50: Top-level class CloneWithTypeArguments has to reside in its own source file.\",", "-            \"58: Top-level class CloneWithTypeArgumentsAndNoSuper has to reside in its own source file.\",", "-            \"67: Top-level class MyClassWithGenericSuperMethod has to reside in its own source file.\",", "-            \"84: Top-level class AnotherClass has to reside in its own source file.\",", "+            \"25: \" + getCheckMessage(MSG_KEY, \"NoSuperClone\"),", "+            \"33: \" + getCheckMessage(MSG_KEY, \"InnerClone\"),", "+            \"50: \" + getCheckMessage(MSG_KEY, \"CloneWithTypeArguments\"),", "+            \"58: \" + getCheckMessage(MSG_KEY, \"CloneWithTypeArgumentsAndNoSuper\"),", "+            \"67: \" + getCheckMessage(MSG_KEY, \"MyClassWithGenericSuperMethod\"),", "+            \"84: \" + getCheckMessage(MSG_KEY, \"AnotherClass\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6139b3ea78237d1a36393c56248a2722", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault() throws Exception", "signatureAfterChange": "     @Test     public void testDefault() throws Exception", "diff": ["-            \"6:11: Catching 'RuntimeException' is not allowed.\",", "-            \"7:11: Catching 'Exception' is not allowed.\",", "-            \"8:11: Catching 'Throwable' is not allowed.\",", "-            \"14:11: Catching 'java.lang.RuntimeException' is not allowed.\",", "-            \"15:11: Catching 'java.lang.Exception' is not allowed.\",", "-            \"16:11: Catching 'java.lang.Throwable' is not allowed.\",", "+            \"6:11: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),", "+            \"7:11: \" + getCheckMessage(MSG_KEY, \"Exception\"),", "+            \"8:11: \" + getCheckMessage(MSG_KEY, \"Throwable\"),", "+            \"14:11: \" + getCheckMessage(MSG_KEY, \"java.lang.RuntimeException\"),", "+            \"15:11: \" + getCheckMessage(MSG_KEY, \"java.lang.Exception\"),", "+            \"16:11: \" + getCheckMessage(MSG_KEY, \"java.lang.Throwable\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953a2b3e0fbe2bd97f8854eef9690aaa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefaultOperation()         throws Exception", "signatureAfterChange": "     @Test     public void testDefaultOperation()         throws Exception", "diff": ["-            \"7: Using the '.*' form of import should be avoided - com.puppycrawl.tools.checkstyle.imports.*.\",", "-            \"9: Using the '.*' form of import should be avoided - java.io.*.\",", "-            \"10: Using the '.*' form of import should be avoided - java.lang.*.\",", "-            \"25: Using the '.*' form of import should be avoided - javax.swing.WindowConstants.*.\",", "-            \"26: Using the '.*' form of import should be avoided - javax.swing.WindowConstants.*.\",", "-            \"28: Using the '.*' form of import should be avoided - java.io.File.*.\",", "+            \"7: \" + getCheckMessage(MSG_KEY, \"com.puppycrawl.tools.checkstyle.imports.*\"),", "+            \"9: \" + getCheckMessage(MSG_KEY, \"java.io.*\"),", "+            \"10: \" + getCheckMessage(MSG_KEY, \"java.lang.*\"),", "+            \"25: \" + getCheckMessage(MSG_KEY, \"javax.swing.WindowConstants.*\"),", "+            \"26: \" + getCheckMessage(MSG_KEY, \"javax.swing.WindowConstants.*\"),", "+            \"28: \" + getCheckMessage(MSG_KEY, \"java.io.File.*\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9305e03d0edbf5f98960a1a468bb1eb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testSameFileNameGeneral() throws Exception", "signatureAfterChange": "      @Test     public void testSameFileNameGeneral() throws Exception", "diff": ["-            \"10:5: Declaring variables, return values or parameters of type 'GregorianCalendar' is not allowed.\",", "-            \"16:23: Declaring variables, return values or parameters of type 'GregorianCalendar' is not allowed.\",", "-            \"24:9: Declaring variables, return values or parameters of type 'List' is not allowed.\",", "-            \"25:9: Declaring variables, return values or parameters of type 'java.io.File' is not allowed.\",", "-            \"27:5: Declaring variables, return values or parameters of type 'java.util.List' is not allowed.\",", "-            \"28:13: Declaring variables, return values or parameters of type 'ArrayList' is not allowed.\",", "+            \"10:5: \" + getCheckMessage(MSG_KEY, \"GregorianCalendar\"),", "+            \"16:23: \" + getCheckMessage(MSG_KEY, \"GregorianCalendar\"),", "+            \"24:9: \" + getCheckMessage(MSG_KEY, \"List\"),", "+            \"25:9: \" + getCheckMessage(MSG_KEY, \"java.io.File\"),", "+            \"27:5: \" + getCheckMessage(MSG_KEY, \"java.util.List\"),", "+            \"28:13: \" + getCheckMessage(MSG_KEY, \"ArrayList\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afbf1427681fed236f6dfc659d55d340", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheckTest.java", "commitBeforeChange": "5d698f4a58b66958b13cb04735fefa3f4fa4b9e7", "commitAfterChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testSimple() throws Exception", "signatureAfterChange": "      @Test     public void testSimple() throws Exception", "diff": ["-            \"39:19: Variable 'mNumCreated2' must be private and have accessor methods.\",", "-            \"49:23: Variable 'sTest1' must be private and have accessor methods.\",", "-            \"51:26: Variable 'sTest3' must be private and have accessor methods.\",", "-            \"53:16: Variable 'sTest2' must be private and have accessor methods.\",", "-            \"56:9: Variable 'mTest1' must be private and have accessor methods.\",", "-            \"58:16: Variable 'mTest2' must be private and have accessor methods.\",", "+            \"39:19: \" + getCheckMessage(MSG_KEY, \"mNumCreated2\"),", "+            \"49:23: \" + getCheckMessage(MSG_KEY, \"sTest1\"),", "+            \"51:26: \" + getCheckMessage(MSG_KEY, \"sTest3\"),", "+            \"53:16: \" + getCheckMessage(MSG_KEY, \"sTest2\"),", "+            \"56:9: \" + getCheckMessage(MSG_KEY, \"mTest1\"),", "+            \"58:16: \" + getCheckMessage(MSG_KEY, \"mTest2\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbaa4e1548e65f7600bd1f7ea6d5bf77", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testModifiedControlVariable() throws Exception", "signatureAfterChange": "     @Test     public void testModifiedControlVariable() throws Exception", "diff": ["-            \"14:14: Control variable 'i' is modified.\",", "-            \"17:15: Control variable 'i' is modified.\",", "-            \"20:37: Control variable 'i' is modified.\",", "-            \"21:17: Control variable 'i' is modified.\",", "-            \"25:14: Control variable 'j' is modified.\",", "-            \"49:15: Control variable 's' is modified.\",", "+            \"14:14: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"17:15: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"20:37: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"21:17: \" + getCheckMessage(MSG_KEY, \"i\"),", "+            \"25:14: \" + getCheckMessage(MSG_KEY, \"j\"),", "+            \"49:15: \" + getCheckMessage(MSG_KEY, \"s\"),"]}]}
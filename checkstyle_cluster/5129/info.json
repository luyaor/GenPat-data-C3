{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e552329f7850f6a3dbb60558ef82a69b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b2b9d033125422d4ef0215697cf81e7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocVariableCheck.java", "commitBeforeChange": "c8958bcd0e5f70d3cee24eacd3901b152c2126f4", "commitAfterChange": "8dd406793d0152390b48097bd5f51696116044a8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (!inCodeBlock(aAST)) {", "+        if (!ScopeUtils.inCodeBlock(aAST)) {", "-            final Scope declaredScope = getScopeFromMods(mods);", "+            final Scope declaredScope = ScopeUtils.getScopeFromMods(mods);", "-                inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;", "+                ScopeUtils.inInterfaceBlock(aAST) ? Scope.PUBLIC : declaredScope;", "-                final Scope surroundingScope = getSurroundingScope(aAST);", "+                final Scope surroundingScope = ScopeUtils.getSurroundingScope(aAST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edf3419787e8a932c54c675b9880d03b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/VisibilityModifierCheck.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        final boolean inInterfaceBlock = inInterfaceBlock(aAST);", "+        final boolean inInterfaceOrAnnotationBlock =", "+            ScopeUtils.inInterfaceOrAnnotationBlock(aAST);", "-             inInterfaceBlock ? \"public\" : declaredScope;", "+             inInterfaceOrAnnotationBlock ? \"public\" : declaredScope;", "-                || inInterfaceBlock // implicitly static and final", "+                || inInterfaceOrAnnotationBlock // implicitly static and final"]}]}
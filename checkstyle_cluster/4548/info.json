{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1c5faeeb00ae3680fdf1dfe0b4fd0c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b23b17ae0e111be71175d1cd42462ef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "216fcb79f9f5bbd05244364e926f261a90e697d1", "commitAfterChange": "8a7713b4f7890e2f6493eacc5806b5eb8cfbe767", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean hasShortCircuitTag(final DetailAST aAST,             final List<JavadocTag> aTags, final Scope aScope)", "signatureAfterChange": "     private boolean hasShortCircuitTag(final DetailAST aAST,             final List<JavadocTag> aTags, final Scope aScope)", "diff": ["-        if ((aAST.getType() == TokenTypes.CTOR_DEF)", "-                || (aScope == Scope.PRIVATE)", "-                || (aAST.getType() == TokenTypes.METHOD_DEF", "-                && aAST.branchContains(TokenTypes.LITERAL_STATIC)))", "-        {", "+        if (!JavadocTagInfo.INHERIT_DOC.isValidOn(aAST)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0487e39a5c0ca19548e60338286c3a2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "1c1eadb21184c3e8361cacb25a33d927f3a4e8d4", "commitAfterChange": "9cff1673f1d42910c654e0af5365d68591f104f0", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "     private boolean hasShortCircuitTag(final DetailAST aAST,             final List<JavadocTag> aTags, final Scope aScope)", "signatureAfterChange": "     private boolean hasShortCircuitTag(final DetailAST aAST,             final List<JavadocTag> aTags, final Scope aScope)", "diff": ["-        // Invalid if private or a constructor", "+        // Invalid if private, a constructor, or a static method", "-                || (aScope == Scope.PRIVATE))", "+                || (aScope == Scope.PRIVATE)", "+                || (aAST.getType() == TokenTypes.METHOD_DEF", "+                && aAST.branchContains(TokenTypes.LITERAL_STATIC)))"]}]}
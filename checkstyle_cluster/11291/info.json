{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70c0a0d430b15ffc791db3e05eb5a02f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7bd6c8b3c586449bad89c9c219e608d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "commitBeforeChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "commitAfterChange": "1d6bf23ccda5197dfdd11d9dc2f653128e6b4d82", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "         private boolean isSignificant(String aClassName)", "signatureAfterChange": "         private boolean isSignificant(String className)", "diff": ["-        private boolean isSignificant(String aClassName)", "+        private boolean isSignificant(String className)", "-            return (aClassName.length() > 0)", "-                    && !mExcludedClasses.contains(aClassName)", "-                    && !aClassName.startsWith(\"java.lang.\");", "+            return (className.length() > 0)", "+                    && !excludedClasses.contains(className)", "+                    && !className.startsWith(\"java.lang.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba68f4da33a33ac5539a23b4067575f6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/AbstractClassCouplingCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "         private boolean isSignificant(String className)", "signatureAfterChange": "         private boolean isSignificant(String candidateClassName)", "diff": ["-        private boolean isSignificant(String className) {", "-            return !excludedClasses.contains(className)", "-                    && !className.startsWith(\"java.lang.\");", "+        private boolean isSignificant(String candidateClassName) {", "+            return !excludedClasses.contains(candidateClassName)", "+                    && !candidateClassName.startsWith(\"java.lang.\");"]}]}
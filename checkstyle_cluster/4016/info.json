{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0acd9dc1b9532911947e6ee255565b28", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "026a48bd45678d53ede8441a091ce9e0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "688dc9c547d92cf86d13733c6c0856dc43984676", "commitAfterChange": "37e0bc051f37fff6f6d004ae57073cc98df95122", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void processEnd(DetailAST aAST)", "signatureAfterChange": "     private void processEnd(DetailAST aAST)", "diff": ["-                    && ('.' != charAfter))", "+                    && ('.' != charAfter) && (':' != charAfter))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d470021f591581fe5f9f90216d362d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java", "commitBeforeChange": "d938bf243b995b18a52ebbbd552497c78c6e5e30", "commitAfterChange": "10e6bfe44834bd38bb001058e775377141c86678", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            else if (fromPackage(imp.getText(), pkgName)) {", "+            // imports from unnamed package are not allowed,", "+            // so we are checking SAME rule only for named packages", "+            else if (pkgName != null && fromPackage(imp.getText(), pkgName)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19737cd5ccea77180ab9aa8638059ae9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "bbd59b7b88696fbfafccfb3f1123d36360b0cd81", "commitAfterChange": "9b17ce22d251d3f549aa6147081c08cf0b6bb005", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        if (!isTerminated(slist, true, true)", "+        if (slist != null && !isTerminated(slist, true, true)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22fa11f6a9554b7089a217717cae28fd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "cda369e9cbe65587d46de9894e52ebe317801246", "commitAfterChange": "7fdcaa592941ee4b1cec2d863a78f22bb1f5259e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private boolean checkSwitch(final DetailAST ast, boolean useContinue)", "signatureAfterChange": "     private boolean checkSwitch(final DetailAST ast, boolean useContinue)", "diff": ["-            isTerminated &= isTerminated(caseBody, false, useContinue);", "+            isTerminated = caseBody != null && isTerminated(caseBody, false, useContinue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44d0276de6127fb2cee7e4e3dca5c2b1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "642d9c5035df84b563f702263306c11a68d350d1", "commitAfterChange": "e70cb13b07f5b2c17dec74a42c05e7e32bb33ffb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public DetailAST getLastChild()", "signatureAfterChange": "     public DetailAST getLastChild()", "diff": ["-        while (ast.getNextSibling() != null) {", "+        while (ast != null && ast.getNextSibling() != null) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7daf45d667174d363e4301a915d8a1a1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "eb9b205bfd6167e56031e9d060b4882c02907667", "commitAfterChange": "a8c32f4d0f9efd7c31e3c490d0e1a265f0d5d5c0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "         public AuditListener createListener(Task aTask)             throws IOException", "signatureAfterChange": "         public AuditListener createListener(Task aTask)             throws IOException", "diff": ["-            if (E_XML.equals(mFormatterType.getValue())) {", "+            if (mFormatterType != null", "+                && E_XML.equals(mFormatterType.getValue()))", "+            {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf005082dfff48d4eb239c6813763e40", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "16493bfb502b73de0c19ca19d99f33bc3d6ce7e4", "commitAfterChange": "536bc20b48637fa85025b790736114d5dcb7a385", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkIdent(DetailAST ast)", "signatureAfterChange": "     private void checkIdent(DetailAST ast)", "diff": ["-            if (identAST.getType() == TokenTypes.IDENT", "+            if (identAST != null && identAST.getType() == TokenTypes.IDENT"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d5906bfc34d258b4f3701e447fded7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MethodNameCheck.java", "commitBeforeChange": "756e47a05af9db14879e349f7bde1dfa64b83af8", "commitAfterChange": "a6471e8a2608cbe29b26da7c442aff2ebe4de236", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAst)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAst)", "diff": ["-            if (method.getText().equals(classIdent.getText())) {", "+            // Following logic is to handle when a classIdent can not be", "+            // found. This is when you have a Literal_New keyword followed", "+            // a DOT, which is when you have:", "+            // new Outclass.InnerInterface(x) { ... }", "+            // Such a rare case, will not have the logic to handle parsing", "+            // down the tree looking for the first ident.", "+            if ((null != classIdent)", "+                && method.getText().equals(classIdent.getText()))", "+            {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9d9a12b5148bc4d52faf42013ab1235", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MultipleVariableDeclarationsCheck.java", "commitBeforeChange": "b097b3f002ca40474b729c27c531787bc2e79f04", "commitAfterChange": "d6a255f36548fa0fe952d543ef0e5c0a5e14bad6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (nextNode.getType() == TokenTypes.VARIABLE_DEF) {", "+        if (nextNode != null", "+                && nextNode.getType() == TokenTypes.VARIABLE_DEF) {"]}]}
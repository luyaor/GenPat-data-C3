{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24fc41d0038eac59923254abe78c2bbe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26e7d3dd77cfe2d3317aba77e1f962a6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java", "commitBeforeChange": "a2ae6fa3a82abc0562772af74de80bee2f927cd8", "commitAfterChange": "d1a6a437100b26d4f3932472ca3241b3f4b05da2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private static boolean isCommentConsistent(String comment)", "signatureAfterChange": "      private static boolean isMultiLevelCommentConsistent(String comment             , int indentInComment, boolean isWarnComment)", "diff": ["+", "+    private static boolean isMultiLevelCommentConsistent(String comment", "+            , int indentInComment, boolean isWarnComment) {", "+        Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "+        multilevelMatch.matches();", "+        final String[] levels = multilevelMatch.group(1).split(\",\");", "+        final String indentInCommentStr = String.valueOf(indentInComment);", "+        final boolean containsActualLevel =", "+                Arrays.asList(levels).contains(indentInCommentStr);", "+", "+        return containsActualLevel && !isWarnComment", "+                || !containsActualLevel && isWarnComment;", "+    }", "-            final String[] levels = multilevelMatch.group(1).split(\",\");", "-            final String indentInCommentStr = String.valueOf(indentInComment);", "-            final boolean containsActualLevel =", "-                            Arrays.asList(levels).contains(indentInCommentStr);", "-", "-            return containsActualLevel && !isWarnComment", "-                    || !containsActualLevel && isWarnComment;", "-", "-        Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "-        if (singleLevelMatch.matches()) {", "-            final int expectedLevel = Integer.parseInt(singleLevelMatch.group(1));", "-", "-            return expectedLevel == indentInComment && !isWarnComment", "-                    || expectedLevel != indentInComment && isWarnComment;", "-", "-        Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);", "-        if (nonStrictLevelMatch.matches()) {", "-            final int expectedMinimalIndent = Integer.parseInt(nonStrictLevelMatch.group(1));", "-", "-            return indentInComment >= expectedMinimalIndent && !isWarnComment", "-                    || indentInComment < expectedMinimalIndent && isWarnComment;", "-        }", "-", "-        throw new IllegalArgumentException(\"Cannot determine if commit is consistent\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e466d4086a046bfb9274d9d59503ff51", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java", "commitBeforeChange": "a2ae6fa3a82abc0562772af74de80bee2f927cd8", "commitAfterChange": "d1a6a437100b26d4f3932472ca3241b3f4b05da2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private static boolean isCommentConsistent(String comment)", "signatureAfterChange": "      private static boolean isCommentConsistent(String comment)", "diff": ["+        boolean result;", "+        CommentType type = getCommentType(comment);", "+        switch (type) {", "+            case MULTILEVEL:", "+                result = isMultiLevelCommentConsistent(comment, indentInComment, isWarnComment);", "+                break;", "+", "+            case SINGLE_LEVEL:", "+                result = isSingleLevelCommentConsistent(comment, indentInComment, isWarnComment);", "+                break;", "+", "+            case NON_STRICT_LEVEL:", "+                result = isNonStrictCommentConsistent(comment, indentInComment, isWarnComment);", "+                break;", "+", "+            case UNKNOWN:", "+                throw new IllegalArgumentException(\"Cannot determine comment consistent\");", "+", "+            default:", "+                throw new IllegalStateException(\"Cannot determine comment is consistent\");", "+", "+        }", "+        return result;", "+    }", "-            final String[] levels = multilevelMatch.group(1).split(\",\");", "-            final String indentInCommentStr = String.valueOf(indentInComment);", "-            final boolean containsActualLevel =", "-                            Arrays.asList(levels).contains(indentInCommentStr);", "-", "-            return containsActualLevel && !isWarnComment", "-                    || !containsActualLevel && isWarnComment;", "-", "-        Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "-        if (singleLevelMatch.matches()) {", "-            final int expectedLevel = Integer.parseInt(singleLevelMatch.group(1));", "-", "-            return expectedLevel == indentInComment && !isWarnComment", "-                    || expectedLevel != indentInComment && isWarnComment;", "-", "-        Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);", "-        if (nonStrictLevelMatch.matches()) {", "-            final int expectedMinimalIndent = Integer.parseInt(nonStrictLevelMatch.group(1));", "-", "-            return indentInComment >= expectedMinimalIndent && !isWarnComment", "-                    || indentInComment < expectedMinimalIndent && isWarnComment;", "-        }", "-", "-        throw new IllegalArgumentException(\"Cannot determine if commit is consistent\");"]}]}
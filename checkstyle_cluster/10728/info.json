{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a4959cae46e972698370057119a396e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12a00b5e5cd7e26b3cde620e2615fa71", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/PackageHtmlCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     protected final Set<File> getParentDirs(File[] aFiles)", "signatureAfterChange": "     protected final Set<File> getParentDirs(File[] aFiles)", "diff": ["-        for (int i = 0; i < aFiles.length; i++) {", "-            final File f = aFiles[i].getAbsoluteFile();", "+        for (File element : aFiles) {", "+            final File f = element.getAbsoluteFile();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "327a6477b0cb6530e03146c768cfbfa7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public boolean isReference(String aEnt)", "signatureAfterChange": "     public boolean isReference(String aEnt)", "diff": ["-        for (int i = 0; i < ENTITIES.length; i++) {", "-            if (name.equals(ENTITIES[i])) {", "+        for (String element : ENTITIES) {", "+            if (name.equals(element)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "498b89cb4fbbd4c7963ec4963e423944", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/TreeWalker.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "     public void process(File[] aFiles)", "signatureAfterChange": "     public void process(File[] aFiles)", "diff": ["-        for (int i = 0; i < javaFiles.length; i++) {", "-            process(javaFiles[i]);", "+        for (File element : javaFiles) {", "+            process(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5823a409fac73ee5d6e179c4063bd971", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/FileDrop.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "       private void makeDropTarget(final Component c, boolean recursive)             throws TooManyListenersException", "signatureAfterChange": "       private void makeDropTarget(final Component c, boolean recursive)             throws TooManyListenersException", "diff": ["-            for (int i = 0; i < comps.length; i++)", "-                makeDropTarget(comps[i], recursive);", "+            for (Component element : comps)", "+                makeDropTarget(element, recursive);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c39537492d5a29af6cd6390c65154fc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/IllegalImportCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private boolean isIllegalImport(String aImportText)", "signatureAfterChange": "     private boolean isIllegalImport(String aImportText)", "diff": ["-        for (int i = 0; i < mIllegalPkgs.length; i++) {", "-            if (aImportText.startsWith(mIllegalPkgs[i] + \".\")) {", "+        for (String element : mIllegalPkgs) {", "+            if (aImportText.startsWith(element + \".\")) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9602a5c85aa350dcd95874e243b7bfef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void fireErrors(String aFileName, LocalizedMessage[] aErrors)", "signatureAfterChange": "     public void fireErrors(String aFileName, LocalizedMessage[] aErrors)", "diff": ["-        for (int i = 0; i < aErrors.length; i++) {", "-            final AuditEvent evt = new AuditEvent(this, stripped, aErrors[i]);", "+        for (LocalizedMessage element : aErrors) {", "+            final AuditEvent evt = new AuditEvent(this, stripped, element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c877b75f98a86ec062659df8a9737889", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     public void setLegalAbstractClassNames(String[] aClassNames)", "signatureAfterChange": "     public void setLegalAbstractClassNames(String[] aClassNames)", "diff": ["-        for (int i = 0; i < aClassNames.length; i++) {", "-            mLegalAbstractClassNames.add(aClassNames[i]);", "+        for (String element : aClassNames) {", "+            mLegalAbstractClassNames.add(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc62d8fa5ce52a3413995799c330b180", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void setIgnoredMethodNames(String[] aMethodNames)", "signatureAfterChange": "     public void setIgnoredMethodNames(String[] aMethodNames)", "diff": ["-        for (int i = 0; i < aMethodNames.length; i++) {", "-            mIgnoredMethodNames.add(aMethodNames[i]);", "+        for (String element : aMethodNames) {", "+            mIgnoredMethodNames.add(element);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e264170be4d43113288230f057c93c65", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean isSingleTag(HtmlTag aTag)", "signatureAfterChange": "     private boolean isSingleTag(HtmlTag aTag)", "diff": ["-        for (int i = 0; i < SINGLE_TAG.length; i++) {", "+        for (String element : SINGLE_TAG) {", "-            if (aTag.getId().equalsIgnoreCase(SINGLE_TAG[i])) {", "+            if (aTag.getId().equalsIgnoreCase(element)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4b8115ae938cd5a022753506b8923cb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "f1afaf83f39b83cc3bd07a2388448b262652a76b", "commitAfterChange": "e50e1fcd1c17ba1f73d11df38382907cc163a1d1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public int hashCode()", "signatureAfterChange": "     @Override     public int hashCode()", "diff": ["-        for (int i = 0; i < mArgs.length; i++) {", "-            result = HASH_MULT * result + mArgs[i].hashCode();", "+        for (Object element : mArgs) {", "+            result = HASH_MULT * result + element.hashCode();"]}]}
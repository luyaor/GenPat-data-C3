{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "219e244cc210da961908cd6db06b8297", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c291f8761b4a1fd2498e2255541f8c3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "b1a8aac7066f4115f94ebd49c63b36a33b5187aa", "commitAfterChange": "d790eb1dc26141d6ce4c3637a31e06597a54e0e7", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> aTags,             List<ExceptionInfo> aThrows, boolean aReportExpectedTags)", "diff": ["-            final ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();", "+            // First look for matches on the exception name", "+            ListIterator<ExceptionInfo> throwIt = aThrows.listIterator();", "+            while (!found && throwIt.hasNext()) {", "+                final ExceptionInfo ei = throwIt.next();", "+", "+                if (ei.getName().getText().equals(", "+                        documentedCI.getName().getText()))", "+                {", "+                    found = true;", "+                    ei.setFound();", "+                    foundThrows.add(documentedEx);", "+                }", "+            }", "+", "+            // Now match on the exception type", "+            throwIt = aThrows.listIterator();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e9bbb85ee8dbc87c54fdc4a083ef698", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "e8d0f037a2a300da55df6ab28d3459a6af9990d8", "commitAfterChange": "eeec3dc1d23916462560403a27a4ae94260d61f3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public IndentLevel suggestedChildLevel(AbstractExpressionHandler child)", "signatureAfterChange": "      @Override     public IndentLevel suggestedChildLevel(AbstractExpressionHandler child)", "diff": ["-        int indentLevel = getLineStart(first);", "+        IndentLevel suggestedLevel = new IndentLevel(getLineStart(first));", "-            indentLevel += getBasicOffset();", "+            suggestedLevel = new IndentLevel(suggestedLevel,", "+                    getBasicOffset(),", "+                    getIndentCheck().getLineWrappingIndentation());", "-        return new IndentLevel(indentLevel);", "+", "+        // If the right parenthesis is at the start of a line;", "+        // include line wrapping in suggested indent level.", "+        final DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);", "+        if (getLineStart(rparen) == rparen.getColumnNo()) {", "+            suggestedLevel.addAcceptedIndent(new IndentLevel(", "+                    getParent().suggestedChildLevel(this),", "+                    getIndentCheck().getLineWrappingIndentation()", "+            ));", "+        }", "+", "+        return suggestedLevel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "773ff94cd2f11e61ce244a7d12a72891", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 20, "signatureBeforeChange": "     void reportImport(int aLineNo, String aType);", "signatureAfterChange": "     void reportImport(int aLineNo, String aType)", "diff": ["-    void reportImport(int aLineNo, String aType);", "+    void reportImport(int aLineNo, String aType)", "+    {", "+        if (!mConfig.isIgnoreImports()) {", "+            // Check for a duplicate import", "+            final Iterator it = mImports.iterator();", "+            while (it.hasNext()) {", "+                final LineText lt = (LineText) it.next();", "+                if (aType.equals(lt.getText())) {", "+                    log(aLineNo,", "+                        \"Duplicate import to line \" + lt.getLineNo() + \".\");", "+                }", "+            }", "+            // Add to list to check for duplicates and usage", "+            mImports.add(new LineText(aLineNo, aType));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fb6e6b91e5004dd6ad4cb790443a699", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/RedundantImportCheck.java", "commitBeforeChange": "aa5dbacdcbf20a9b56e2f7ecb577bb47778b0c54", "commitAfterChange": "84c1f8375fa540e7b0313b95af6be6000e3c4c71", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+            // Check for a duplicate import", "+            final Iterator it = mImports.iterator();", "+            while (it.hasNext()) {", "+                final FullIdent full = (FullIdent) it.next();", "+                if (imp.getText().equals(full.getText())) {", "+                    log(aAST.getLineNo(),", "+                        aAST.getColumnNo(),", "+                        \"import.duplicate\",", "+                        new Integer(full.getLineNo()));", "+                }", "+            }", "+", "+            mImports.add(imp);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f7620c5fd3e5b5ff161af5fbc1c0d44", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5347be5e3286e3565d68fdf0559b04fe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "f4e5c1e2b27b975c6e7c08380fadb669d6a92b65", "commitAfterChange": "88830ca708e2deb22cae333057ebddd15f7f9c57", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void parseTags(String[] text, int lineNo)", "signatureAfterChange": "     private void parseTags(String[] text, int lineNo)", "diff": ["-            else if (!isTag(text, position)) {", "-                position = getNextCharPos(text, position);", "+            else if (isTag(text, position)) {", "+                position = parseTag(text, lineNo, nLines, position);", "-                // find end of tag", "-                final Point endTag = findChar(text, '>', position);", "-                final boolean incompleteTag = endTag.getLineNo() >= nLines;", "-                // get tag id (one word)", "-                final String tagId;", "-", "-                if (incompleteTag) {", "-                    tagId = \"\";", "-                }", "-                else {", "-                    tagId = getTagId(text, position);", "-                }", "-                // is this closed tag", "-                final boolean closedTag =", "-                        endTag.getLineNo() < nLines", "-                         && text[endTag.getLineNo()]", "-                         .charAt(endTag.getColumnNo() - 1) == '/';", "-                // add new tag", "-                add(new HtmlTag(tagId,", "-                                position.getLineNo() + lineNo,", "-                                position.getColumnNo(),", "-                                closedTag,", "-                                incompleteTag,", "-                                text[position.getLineNo()]));", "-                position = endTag;", "+                position = getNextCharPos(text, position);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c6022007262c035f54dde43fa405b5a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/TagParser.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void parseTags(String[] aText, int aLineNo)", "signatureAfterChange": "     private void parseTags(String[] text, int lineNo)", "diff": ["-    private void parseTags(String[] aText, int aLineNo)", "+    private void parseTags(String[] text, int lineNo)", "-        final int nLines = aText.length;", "+        final int nLines = text.length;", "-        position = findChar(aText, '<', position);", "+        position = findChar(text, '<', position);", "-            if (isCommentTag(aText, position)) {", "-                position = skipHtmlComment(aText, position);", "+            if (isCommentTag(text, position)) {", "+                position = skipHtmlComment(text, position);", "-            else if (!isTag(aText, position)) {", "-                position = getNextCharPos(aText, position);", "+            else if (!isTag(text, position)) {", "+                position = getNextCharPos(text, position);", "-                final Point endTag = findChar(aText, '>', position);", "+                final Point endTag = findChar(text, '>', position);", "-                    (incompleteTag ? \"\" : getTagId(aText, position));", "+                    (incompleteTag ? \"\" : getTagId(text, position));", "-                     && (aText[endTag.getLineNo()]", "+                     && (text[endTag.getLineNo()]", "-                                position.getLineNo() + aLineNo,", "+                                position.getLineNo() + lineNo,", "-                                aText[position.getLineNo()]));", "+                                text[position.getLineNo()]));", "-            position = findChar(aText, '<', position);", "+            position = findChar(text, '<', position);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61dca2b4b62cd5081bf45bb6c1074c72", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "dfd7310b964c3a3a35e07c91789b166d2b26aa39", "commitAfterChange": "7b849d58d5a6da2a1384091e3fc7ebb07ba1d957", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "     private void checkHeader()", "signatureAfterChange": "     private void checkHeader()", "diff": ["-", "-                // TODO: RE creation should be cached to avoid", "-                // re-compilation when multiple files are checked. Will wait", "-                // until this is shown to be a performance problem. Really", "-                // should create a factory method for creating RE objects.", "-                final boolean match =", "-                    mConfig.getHeaderLinesRegexp() ?", "-                    createRE(headerLine).match(mLines[i]) :", "-                    headerLine.equals(mLines[i]);", "-", "-                if (!match) {", "+                try {", "+                    final boolean match =", "+                        mConfig.getHeaderLinesRegexp()", "+                        ? Utils.getRE(headerLine).match(mLines[i])", "+                        : headerLine.equals(mLines[i]);", "+    ", "+                    if (!match) {", "+                        log(i + 1,", "+                            \"Line does not match expected header line of '\" +", "+                            mConfig.getHeaderLines()[i] + \"'.\");", "+                        break; // stop checking", "+                    }", "+                }", "+                catch (RESyntaxException e) {", "-                        \"Line does not match expected header line of '\" +", "-                        mConfig.getHeaderLines()[i] + \"'.\");", "-                    break; // stop checking", "+                        \"Unable to parse regular expression '\"", "+                        + headerLine + \"'.\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b81b67b1dfbe45a2fcfd2ffa244655be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "8e168c23bde5fed98dea0141b0cdcf11a74a7454", "commitAfterChange": "6f1840f011cea3a523d9df1278d4a0af98e1d967", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void checkThrowsTags(List<JavadocTag> tags,             List<ExceptionInfo> throwsList, boolean reportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> tags,             List<ExceptionInfo> throwsList, boolean reportExpectedTags)", "diff": ["-            boolean found = foundThrows.contains(documentedEx);", "-            // First look for matches on the exception name", "-            ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();", "-            while (!found && throwIt.hasNext()) {", "-                final ExceptionInfo ei = throwIt.next();", "-", "-                if (ei.getName().getText().equals(", "-                        documentedCI.getName().getText())) {", "-                    found = true;", "-                    ei.setFound();", "-                    foundThrows.add(documentedEx);", "-                }", "-            }", "-", "-            // Now match on the exception type", "-            throwIt = throwsList.listIterator();", "-            while (!found && throwIt.hasNext()) {", "-                final ExceptionInfo ei = throwIt.next();", "-", "-                if (documentedCI.getClazz() == ei.getClazz()) {", "-                    found = true;", "-                    ei.setFound();", "-                    foundThrows.add(documentedEx);", "-                }", "-                else if (allowThrowsTagsForSubclasses) {", "-                    found = isSubclass(documentedCI.getClazz(), ei.getClazz());", "-                }", "-            }", "+            final boolean found = foundThrows.contains(documentedEx)", "+                    || isInThrows(throwsList, documentedCI, foundThrows);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6ab7c354fe8faa35d9e0485ef362cf6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "63b127c70d40d927958546452f89833ce9ab871d", "commitAfterChange": "4ffb4d7f1b6b16e9e3cda5a7afd816cc16152433", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static boolean isSuppressed(String sourceName, int line,         int column)", "signatureAfterChange": "     public static boolean isSuppressed(String sourceName, int line,         int column)", "diff": ["-        if (checkAlias != null) {", "-            for (Entry entry : entries) {", "-                final boolean afterStart =", "-                    entry.getFirstLine() < line", "-                        || entry.getFirstLine() == line && entry", "-                            .getFirstColumn() <= column;", "-                final boolean beforeEnd =", "-                    entry.getLastLine() > line", "-                        || entry.getLastLine() == line && entry", "-                            .getLastColumn() >= column;", "-                final boolean nameMatches =", "-                    entry.getCheckName().equals(checkAlias);", "-                if (afterStart && beforeEnd && nameMatches) {", "-                    return true;", "-                }", "+        for (Entry entry : entries) {", "+            final boolean afterStart =", "+                entry.getFirstLine() < line", "+                    || entry.getFirstLine() == line && entry", "+                        .getFirstColumn() <= column;", "+            final boolean beforeEnd =", "+                entry.getLastLine() > line", "+                    || entry.getLastLine() == line && entry", "+                        .getLastColumn() >= column;", "+            final boolean nameMatches =", "+                entry.getCheckName().equals(checkAlias);", "+            if (afterStart && beforeEnd && nameMatches) {", "+                return true;"]}]}
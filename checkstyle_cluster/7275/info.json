{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9239f231095885fb329d7d3679f45f45", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08942436f9820b5f5c2933f889c763ce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "commitBeforeChange": "476f90c5d38c6cc2b3ed6776ad4a3120ea627338", "commitAfterChange": "5c3762cef2a69a10241801916a815f9066bca5f8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            final boolean isFinal =", "-                (modifiers != null)", "+            final boolean isFinal = (modifiers != null)", "-            mClasses.push(new ClassDesc(isFinal));", "+            final boolean isAbstract = (modifiers != null)", "+                    && modifiers.branchContains(TokenTypes.ABSTRACT);", "+            mClasses.push(new ClassDesc(isFinal, isAbstract));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad42cc3879cdeee4df222ca46f2c6c75", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "1e93e408645fb640c3f58405aa04a03ff23c846c", "commitAfterChange": "e508f61a11d9c30f9063b9d19dd9cd10bdfe9e7f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "     public void setMemberModifiers(String modifiers)", "signatureAfterChange": "     public void setMemberModifiers(String modifiers)", "diff": ["-        final List<Integer> modifiersList = new ArrayList<>(modifiers.length());", "-        for (String modifier : modifiers.split(\", \")) {", "-            modifiersList.add(TokenTypes.getTokenId(modifier));", "+        final List<Integer> modifiersList = new ArrayList<>();", "+        for (String modifier : modifiers.split(\",\")) {", "+            modifiersList.add(TokenTypes.getTokenId(modifier.trim()));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7518d2b1f88efdc11b100fc872fb32f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "989737de6b41ae9d193584bce0ad7b90", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "d6272b70eb5ad61fd8ab34091e970c50b1f67386", "commitAfterChange": "1a2c318e22a0b2b22ccc76019217c0892fe2d59b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static void main(String... args) throws UnsupportedEncodingException", "signatureAfterChange": "     public static void main(String... args) throws UnsupportedEncodingException             , CheckstyleException, FileNotFoundException", "diff": ["+            , CheckstyleException, FileNotFoundException", "-        boolean parseResult = false;", "+        int errorCounter = 0;", "+        boolean cliViolations = false;", "+", "-            processCommandLine(parseCli(args));", "-            parseResult = true;", "+            //parse CLI arguments", "+            final CommandLine commandLine = parseCli(args);", "+", "+            // show version and exit if it is requested", "+            if (commandLine.hasOption(\"v\")) {", "+                System.out.println(\"Checkstyle version: \"", "+                        + Main.class.getPackage().getImplementationVersion());", "+            }", "+            else {", "+                // return error is smth is wrong in arguments", "+                final List<String> messages = validateCli(commandLine);", "+                cliViolations = !messages.isEmpty();", "+                if (messages.isEmpty()) {", "+", "+                    // create config helper object", "+                    final CliOptions config = convertCliToPojo(commandLine);", "+                    // run Checker", "+                    errorCounter = runCheckstyle(config);", "+", "+                }", "+                else {", "+                    errorCounter = 1;", "+                    for (String message : messages) {", "+                        System.out.println(message);", "+                    }", "+                }", "+            }", "-        catch (final ParseException e) {", "-            System.err.println(\"Could not parse parameters: \" + e.getMessage());", "-            e.printStackTrace();", "+        catch (ParseException pex) {", "+            // smth wrong with arguments - print error and manual", "+            cliViolations = true;", "+            errorCounter = 1;", "+            System.out.println(pex.getMessage());", "+            printUsage();", "-        catch (final Exception e) {", "-            System.err.println(\"Could not execute Checkstyle: \" + e.getMessage());", "-            e.printStackTrace();", "+        catch (Exception ex) {", "+            // smth wrong during processing", "+            errorCounter = 1;", "+            throw ex;", "-            if (!parseResult) {", "-                usage();", "+            // return exit code base on validation of Checker", "+            if (errorCounter != 0 && !cliViolations) {", "+                System.out.println(String.format(\"Checkstyle ends with %d errors.\", errorCounter));", "-            System.exit(parseResult ? 0 : 1);", "+            System.exit(errorCounter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b762e4ca4c43b310ee54b4837b2f6e28", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "346387c717048391485fb28f877531aab1095de1", "commitAfterChange": "f020066f8bdfb378df36904af3df8b5bc48858fd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int process(List<File> files) throws CheckstyleException", "signatureAfterChange": "     public int process(List<File> files) throws CheckstyleException", "diff": ["-            if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {", "-                continue;", "-            }", "-            final String fileName = file.getAbsolutePath();", "-            fireFileStarted(fileName);", "-            final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "-                final FileText theText = new FileText(file.getAbsoluteFile(),", "-                        charset);", "-                for (final FileSetCheck fsc : fileSetChecks) {", "-                    fileMessages.addAll(fsc.process(file, theText));", "+                if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {", "+                    continue;", "+                final String fileName = file.getAbsolutePath();", "+                fireFileStarted(fileName);", "+                final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "+                try {", "+                    final FileText theText = new FileText(file.getAbsoluteFile(),", "+                            charset);", "+                    for (final FileSetCheck fsc : fileSetChecks) {", "+                        fileMessages.addAll(fsc.process(file, theText));", "+                    }", "+                }", "+                catch (final IOException ioe) {", "+                    LOG.debug(\"IOException occurred.\", ioe);", "+                    fileMessages.add(new LocalizedMessage(0,", "+                            Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",", "+                            new String[] {ioe.getMessage()}, null, getClass(),", "+                            null));", "+                }", "+                fireErrors(fileName, fileMessages);", "+                fireFileFinished(fileName);", "-            catch (final IOException ioe) {", "-                LOG.debug(\"IOException occurred.\", ioe);", "-                fileMessages.add(new LocalizedMessage(0,", "-                        Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",", "-                        new String[] {ioe.getMessage()}, null, getClass(),", "-                        null));", "+            catch (Exception ex) {", "+                // We need to catch all exception to put a reason failure(file name) in exception", "+                throw new CheckstyleException(\"Exception was thrown while processing \"", "+                        + file.getPath(), ex);", "-            fireErrors(fileName, fileMessages);", "-            fireFileFinished(fileName);"]}]}
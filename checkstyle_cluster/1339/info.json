{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03205dd813c8e4ce9b9c8a1c9c0ea703", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b9fd8f4579b99dabd0afed01bf491ed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "5ce771ac776af4197ce832792a049e9357ca90b8", "commitAfterChange": "1d614c3a7ecf8a3ede4df8a50da46e71792d0025", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                if (child.getType() == TokenTypes.METHOD_DEF) {", "-                    if (CheckUtils.isEqualsMethod(child)) {", "-                        if (hasObjectParameter(child)) {", "-                            hasEqualsObject = true;", "-                        }", "-                        else {", "-                            mEqualsMethods.add(child);", "-                        }", "+                if (child.getType() == TokenTypes.METHOD_DEF", "+                        && CheckUtils.isEqualsMethod(child))", "+                {", "+                    if (hasObjectParameter(child)) {", "+                        hasEqualsObject = true;", "+                    }", "+                    else {", "+                        mEqualsMethods.add(child);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a5e877e2a3187e4327ce1049e401ab3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/UnusedParameterCheck.java", "commitBeforeChange": "3d734ac4162e457e4d3679487a6726e94c17db5b", "commitAfterChange": "c91964b8d95ec0d220472c0efcfb3c1a0a7f6cc0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public boolean mustCheckReferenceCount(DetailAST aAST)", "signatureAfterChange": "     public boolean mustCheckReferenceCount(DetailAST aAST)", "diff": ["-                    if (grandparent.getType() == TokenTypes.METHOD_DEF) {", "-                        final DetailAST modifiersAST =", "-                            grandparent.findFirstToken(TokenTypes.MODIFIERS);", "-                        if ((modifiersAST != null)", "-                            && !modifiersAST.branchContains(TokenTypes.ABSTRACT)", "-                            && !ScopeUtils.inInterfaceBlock(aAST))", "-                        {", "-                            result = true;", "-                        }", "-                    }", "-                    else if (grandparent.getType() == TokenTypes.CTOR_DEF) {", "-                        result = true;", "-                    }", "+                    result = hasBody(grandparent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b30f54ab477718108f82b15988fdefd7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/DeclarationCollector.java", "commitBeforeChange": "d734bff020d3525c811a0b273021a5ac5665ade8", "commitAfterChange": "6c11cedd3bc24183534dd10d6442149d267693b5", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private void collectDeclarations(Deque<LexicalFrame> frameStack,         DetailAST ast)", "signatureAfterChange": "     private void collectDeclarations(Deque<LexicalFrame> frameStack,         DetailAST ast)", "diff": ["-                final String name =", "-                        ast.findFirstToken(TokenTypes.IDENT).getText();", "-                if (frame instanceof ClassFrame) {", "-                    final DetailAST mods =", "-                            ast.findFirstToken(TokenTypes.MODIFIERS);", "-                    if (ScopeUtils.inInterfaceBlock(ast)", "-                            || mods.branchContains(TokenTypes.LITERAL_STATIC)) {", "-                        ((ClassFrame) frame).addStaticMember(name);", "-                    }", "-                    else {", "-                        ((ClassFrame) frame).addInstanceMember(name);", "-                    }", "-                }", "-                else {", "-                    frame.addName(name);", "-                }", "+                collectVariableDeclarations(ast, frame);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c04a7ef55a285e0c6de715300b8ed40a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "1a205d4b436650a301ef088ed86a3821b99551f2", "commitAfterChange": "faa8a0b7a427385fab564d2959244355f8d9813f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "signatureAfterChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "diff": ["-                // Loop looking for matching type param", "-                final Iterator<DetailAST> typeParamsIt = typeParams.iterator();", "-                while (typeParamsIt.hasNext()) {", "-                    final DetailAST typeParam = typeParamsIt.next();", "-                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()", "-                            .equals(", "-                                    arg1.substring(1,", "-                                        arg1.length() - 1))) {", "-                        found = true;", "-                        typeParamsIt.remove();", "-                        break;", "-                    }", "-                }", "+                found = searchMatchingTypeParameter(typeParams,", "+                        arg1.substring(1, arg1.length() - 1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c292907cd949f0674575899200e51aa6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "066696714bd522b26177f6be814bac334e57b332", "commitAfterChange": "84d33e55d9735a79f1e0e9f692dd92592aa2f055", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            final HashSet fieldSet = new HashSet(); //fields container", "+            final FieldFrame frame = new FieldFrame();", "-                    fieldSet.add(name);", "+                    final DetailAST mods =", "+                        child.findFirstToken(TokenTypes.MODIFIERS);", "+                    if (mods.branchContains(TokenTypes.LITERAL_STATIC)) {", "+                        frame.addStaticField(name);", "+                    }", "+                    else {", "+                        frame.addInstanceField(name);", "+                    }", "-            mFieldsStack.addLast(fieldSet); //push container", "+            mFieldsStack.addLast(frame); //push container"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9cf86b0a46d167c50d319b25d9c1580", "detectedBy": ["DIFF_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b0ba3413bc7a5dc891064812e5dd39f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "commitBeforeChange": "69976b5365b7c33a602dd814337e2db1136288fc", "commitAfterChange": "ac8eadea0b1fb183d56cd809a34a7b9047b47d47", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 25, "signatureBeforeChange": "      @Test     public void testInvalidMethodWithChecker()         throws Exception", "signatureAfterChange": "      @Test     public void testInvalidMethodWithChecker()         throws Exception", "diff": ["-        final Checker c = createChecker(checkConfig);", "+", "+        checkConfig.addAttribute(\"arrayInitIndent\", \"4\");", "+        checkConfig.addAttribute(\"basicOffset\", \"4\");", "+        checkConfig.addAttribute(\"braceAdjustment\", \"0\");", "+        checkConfig.addAttribute(\"caseIndent\", \"4\");", "+        checkConfig.addAttribute(\"forceStrictCondition\", \"false\");", "+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"4\");", "+        checkConfig.addAttribute(\"tabWidth\", \"4\");", "+        checkConfig.addAttribute(\"throwsIndent\", \"4\");", "-            \"17: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),", "-            \"20: \" + getCheckMessage(MSG_ERROR, \"ctor def modifier\", 6, 4),", "-            \"21: \" + getCheckMessage(MSG_ERROR, \"ctor def lcurly\", 2, 4),", "-            \"22: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),", "-            \"25: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 2, 4),", "-            \"26: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 6, 4),", "-            \"63: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 5, 4),", "-            \"64: \" + getCheckMessage(MSG_ERROR, \"final\", 5, 9),", "-            \"65: \" + getCheckMessage(MSG_ERROR, \"void\", 5, 9),", "-            \"66: \" + getCheckMessage(MSG_ERROR, \"method5\", 4, 9),", "-            \"74: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 3, 4),", "-            \"75: \" + getCheckMessage(MSG_ERROR, \"final\", 3, 7),", "-            \"76: \" + getCheckMessage(MSG_ERROR, \"void\", 3, 7),", "-            \"77: \" + getCheckMessage(MSG_ERROR, \"method6\", 5, 7),", "-            \"87: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 8),", "-            \"87: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),", "-            \"92: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 8),", "-            \"92: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 6, 8),", "-            \"93: \" + getCheckMessage(MSG_ERROR, \"if\", 6, 8),", "-            \"94: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),", "-            \"94: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "-            \"95: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 6, 8),", "-            \"98: \" + getCheckMessage(MSG_ERROR, \"Arrays\", 10, 12),", "-            \"107: \" + getCheckMessage(MSG_ERROR, \"+\", 10, 12),", "-            \"107: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "-            \"116: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),", "-            \"120: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),", "-            \"121: \" + getCheckMessage(MSG_ERROR, \")\", 6, 8),", "-            \"125: \" + getCheckMessage(MSG_ERROR, \"method call rparen\", 6, 8),", "-            \"139: \" + getCheckMessage(MSG_ERROR, \"6\", 10, 12),", "-            \"139: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "-            \"142: \" + getCheckMessage(MSG_ERROR, \"6\", 10, 12),", "-            \"142: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "-            \"152: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 6, 12),", "-            \"164: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),", "-            \"169: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),", "-            \"173: \" + getCheckMessage(MSG_ERROR, \"int\", 0, 8),", "-            \"174: \" + getCheckMessage(MSG_ERROR, \"method9\", 4, 8),", "-            \"184: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),", "+            \"23: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),", "+            \"26: \" + getCheckMessage(MSG_ERROR, \"ctor def modifier\", 6, 4),", "+            \"27: \" + getCheckMessage(MSG_ERROR, \"ctor def lcurly\", 2, 4),", "+            \"28: \" + getCheckMessage(MSG_ERROR, \"ctor def rcurly\", 6, 4),", "+            \"31: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 2, 4),", "+            \"32: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 6, 4),", "+            \"69: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 5, 4),", "+            \"70: \" + getCheckMessage(MSG_ERROR, \"final\", 5, 9),", "+            \"71: \" + getCheckMessage(MSG_ERROR, \"void\", 5, 9),", "+            \"72: \" + getCheckMessage(MSG_ERROR, \"method5\", 4, 9),", "+            \"80: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 3, 4),", "+            \"81: \" + getCheckMessage(MSG_ERROR, \"final\", 3, 7),", "+            \"82: \" + getCheckMessage(MSG_ERROR, \"void\", 3, 7),", "+            \"83: \" + getCheckMessage(MSG_ERROR, \"method6\", 5, 7),", "+            \"93: \" + getCheckMessage(MSG_CHILD_ERROR, \"ctor def\", 4, 8),", "+            \"93: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 4, 8),", "+            \"98: \" + getCheckMessage(MSG_ERROR, \"member def type\", 6, 8),", "+            \"98: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 6, 8),", "+            \"99: \" + getCheckMessage(MSG_ERROR, \"if\", 6, 8),", "+            \"100: \" + getCheckMessage(MSG_CHILD_ERROR, \"if\", 10, 12),", "+            \"100: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "+            \"101: \" + getCheckMessage(MSG_ERROR, \"if rcurly\", 6, 8),", "+            \"104: \" + getCheckMessage(MSG_ERROR, \"Arrays\", 10, 12),", "+            \"113: \" + getCheckMessage(MSG_ERROR, \"+\", 10, 12),", "+            \"113: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "+            \"122: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),", "+            \"126: \" + getCheckMessage(MSG_ERROR, \"new\", 10, 12),", "+            \"127: \" + getCheckMessage(MSG_ERROR, \")\", 6, 8),", "+            \"131: \" + getCheckMessage(MSG_ERROR, \"method call rparen\", 6, 8),", "+            \"145: \" + getCheckMessage(MSG_ERROR, \"6\", 10, 12),", "+            \"145: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "+            \"148: \" + getCheckMessage(MSG_ERROR, \"6\", 10, 12),", "+            \"148: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 10, 12),", "+            \"158: \" + getCheckMessage(MSG_CHILD_ERROR, \"method call\", 6, 12),", "+            \"170: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),", "+            \"175: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 4, 8),", "+            \"179: \" + getCheckMessage(MSG_ERROR, \"int\", 0, 8),", "+            \"180: \" + getCheckMessage(MSG_ERROR, \"method9\", 4, 8),", "+            \"190: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 12, 8),", "-        verify(c, fname, expected);", "+        verifyWarns(checkConfig, fname, expected, 6);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "820f500ce1c40f0e9ffdc550f5d7ecdd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "commitBeforeChange": "69976b5365b7c33a602dd814337e2db1136288fc", "commitAfterChange": "ac8eadea0b1fb183d56cd809a34a7b9047b47d47", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 33, "signatureBeforeChange": "      @Test     public void testInvalidClassDefWithChecker()         throws Exception", "signatureAfterChange": "      @Test     public void testInvalidClassDefWithChecker()         throws Exception", "diff": ["-        final Checker c = createChecker(checkConfig);", "+", "+        checkConfig.addAttribute(\"arrayInitIndent\", \"4\");", "+        checkConfig.addAttribute(\"basicOffset\", \"4\");", "+        checkConfig.addAttribute(\"braceAdjustment\", \"0\");", "+        checkConfig.addAttribute(\"caseIndent\", \"4\");", "+        checkConfig.addAttribute(\"forceStrictCondition\", \"false\");", "+        checkConfig.addAttribute(\"lineWrappingIndentation\", \"4\");", "+        checkConfig.addAttribute(\"tabWidth\", \"4\");", "+        checkConfig.addAttribute(\"throwsIndent\", \"4\");", "-            \"19: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),", "-            \"25: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),", "-            \"28: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "-            \"31: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 0),", "-            \"35: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "-            \"40: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "-            \"41: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),", "-            \"47: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "-            \"55: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),", "-            \"56: \" + getCheckMessage(MSG_ERROR, \"java\", 2, 4),", "-            \"61: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),", "-            \"62: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),", "-            \"70: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "-            \"74: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "-            \"83: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),", "-            \"85: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),", "-            \"88: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),", "-            \"92: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),", "-            \"98: \" + getCheckMessage(MSG_ERROR, \"int\", 10, 12),", "-            \"103: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),", "-            \"108: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 6, 4),", "-            \"110: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),", "-            \"116: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 8),", "-            \"119: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 10, 8),", "-            \"121: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 10, 8),", "-            \"124: \" + getCheckMessage(MSG_ERROR, \"member def type\", 10, 12),", "-            \"129: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 10, 8),", "-            \"130: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 8, \"10, 14\"),", "-            \"134: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 8, \"10, 14\"),", "-            \"138: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 6, \"8, 12\"),", "-", "-            \"139: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 12, 10),", "-            \"141: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 12, 10),", "-", "-            \"142: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 6, \"8, 12\"),", "-            \"147: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 10, 12),", "-            \"149: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 10, 12),", "-            \"185: \" + getCheckMessage(MSG_ERROR, \"class\", 0, 4),", "+            \"22: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),", "+            \"28: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),", "+            \"31: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "+            \"34: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 0),", "+            \"38: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "+            \"43: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "+            \"44: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),", "+            \"50: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "+            \"58: \" + getCheckMessage(MSG_ERROR, \"implements\", 2, 4),", "+            \"59: \" + getCheckMessage(MSG_ERROR, \"java\", 2, 4),", "+            \"64: \" + getCheckMessage(MSG_ERROR, \"class def modifier\", 2, 0),", "+            \"65: \" + getCheckMessage(MSG_ERROR, \"class def lcurly\", 2, 0),", "+            \"73: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 2, 0),", "+            \"77: \" + getCheckMessage(MSG_ERROR, \"extends\", 2, 4),", "+            \"86: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),", "+            \"88: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),", "+            \"91: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 2, 4),", "+            \"95: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),", "+            \"101: \" + getCheckMessage(MSG_ERROR, \"int\", 10, 12),", "+            \"106: \" + getCheckMessage(MSG_ERROR, \"member def modifier\", 6, 8),", "+            \"111: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 6, 4),", "+            \"113: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 4),", "+            \"119: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 6, 8),", "+            \"122: \" + getCheckMessage(MSG_ERROR, \"class def ident\", 10, 8),", "+            \"124: \" + getCheckMessage(MSG_ERROR, \"class def rcurly\", 10, 8),", "+            \"127: \" + getCheckMessage(MSG_ERROR, \"member def type\", 10, 12),", "+            \"132: \" + getCheckMessage(MSG_CHILD_ERROR, \"method def\", 10, 8),", "+            \"133: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 8, \"10, 14\"),", "+            \"137: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 8, \"10, 14\"),", "+            \"141: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def lcurly\", 6, \"8, 12\"),", "+            \"142: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 12, 10),", "+            \"144: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 12, 10),", "+            \"145: \" + getCheckMessage(MSG_ERROR_MULTI, \"object def rcurly\", 6, \"8, 12\"),", "+            \"150: \" + getCheckMessage(MSG_ERROR, \"method def modifier\", 10, 12),", "+            \"152: \" + getCheckMessage(MSG_ERROR, \"method def rcurly\", 10, 12),", "+            \"188: \" + getCheckMessage(MSG_ERROR, \"class\", 0, 4),", "-        verify(c, fname, expected);", "+        verifyWarns(checkConfig, fname, expected);"]}]}
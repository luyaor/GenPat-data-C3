{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce197730945f147b3ec4f74396a22f3f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52f3facd83a52d3fcb1e186565954aa9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheck.java", "commitBeforeChange": "1c7341013d0e8a34498eb49ccdb4e91419f13280", "commitAfterChange": "cd89321522d9bf7fc10547e743fb8bbb4c993791", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "signatureAfterChange": "     private void checkException(FullIdent aExc, List aKnownExcs)", "diff": ["+        // Let's trye to load class.", "+        Class excClass = null;", "+", "+        if (!mAllowUnchecked || !mAllowSubclasses) {", "+            excClass = resolveClass(aExc.getText());", "+            if (excClass == null) {", "+                log(aExc.getLineNo(), aExc.getColumnNo(),", "+                    \"redundant.throws.classInfo\", aExc.getText());", "+            }", "+        }", "+", "-            if (isUnchecked(aExc)) {", "+            if (isUnchecked(excClass)) {", "-            final FullIdent fi = (FullIdent) known.next();", "+            final ClassInfo ci = (ClassInfo) known.next();", "+            final FullIdent fi = ci.getName();", "+", "-                if (isSubclass(fi, aExc)) {", "+                if (isSubclass(ci.getClazz(), excClass)) {", "-                else if (isSubclass(aExc, fi)) {", "+                else if (isSubclass(excClass, ci.getClazz())) {", "-            aKnownExcs.add(aExc);", "+            aKnownExcs.add(new ClassInfo(aExc, excClass));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a11c7b7f9dcc5073144276c885abfdb7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/BaseCheckTestSupport.java", "commitBeforeChange": "41044d42b8f21ae00792f101a63101bf87d7fd61", "commitAfterChange": "7a4ec11d123dc0bbf7db943af715d19814d2e332", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 9, "signatureBeforeChange": "      protected static String getSrcPath(String aFilename) throws IOException", "signatureAfterChange": "      protected static Configuration getCheckConfig(String checkName) throws CheckstyleException", "diff": ["-    protected static String getSrcPath(String aFilename) throws IOException {", "-", "-        return new File(\"src/test/java/com/puppycrawl/tools/checkstyle/\" + aFilename)", "-            .getCanonicalPath();", "+    protected static Configuration getCheckConfig(String checkName) throws CheckstyleException {", "+        Configuration result = null;", "+        for (Configuration currentConfig : getConfiguration().getChildren()) {", "+            if (\"TreeWalker\".equals(currentConfig.getName())) {", "+                for (Configuration checkConfig : currentConfig.getChildren()) {", "+                    if (checkName.equals(checkConfig.getName())) {", "+                        result = checkConfig;", "+                        break;", "+                    }", "+                }", "+            }", "+            else if (checkName.equals(currentConfig.getName())) {", "+                result = currentConfig;", "+                break;", "+            }", "+        }", "+        return result;", "+    }"]}]}
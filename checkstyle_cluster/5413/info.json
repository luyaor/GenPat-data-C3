{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07f0f4accb7a8ef8a62661ec270208f5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e1b935c2a2a7e303a4bbb72dbc585f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "768256c32a3e397f837ce27602bda49e3c5e0062", "commitAfterChange": "784842200f5307597d721ba0190c912cfab1b77f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["-        // Load the config file", "-        Configuration config = null;", "-        try {", "-            config = ConfigurationLoader.loadConfiguration(", "-                    line.getOptionValue(\"c\"), new PropertiesExpander(props));", "-        }", "-        catch (CheckstyleException e) {", "-            System.out.println(\"Error loading configuration file\");", "-            e.printStackTrace(System.out);", "-            System.exit(1);", "-        }", "+        final Configuration config = loadConfig(line, props);", "-            try {", "-                moduleFactory = PackageNamesLoader.loadModuleFactory(", "-                    line.getOptionValue(\"n\"));", "-            }", "-            catch (CheckstyleException e) {", "-                System.out.println(\"Error loading package names file\");", "-                e.printStackTrace(System.out);", "-                System.exit(1);", "-            }", "+            moduleFactory = loadPackages(line);", "-        // create the appropriate listener", "-        final String format =", "-            line.hasOption(\"f\") ? line.getOptionValue(\"f\") : \"plain\";", "+        final AuditListener listener = createListener(line, out, closeOut);", "+        final List files = getFilesToProcess(line);", "+        final Checker c = createChecker(config, moduleFactory, listener);", "+        addCustomListeners(c, line);", "-        AuditListener listener = null;", "-        if (\"xml\".equals(format)) {", "-            listener = new XMLLogger(out, closeOut);", "-        }", "-        else if (\"plain\".equals(format)) {", "-            listener = new DefaultLogger(out, closeOut);", "-        }", "-        else {", "-            System.out.println(\"Invalid format: (\" + format", "-                               + \"). Must be 'plain' or 'xml'.\");", "-            usage();", "-        }", "+        final File[] processedFiles = new File[files.size()];", "+        files.toArray(processedFiles);", "+        final int numErrs = c.process(processedFiles);", "+        c.destroy();", "+        System.exit(numErrs);", "+    }", "-        // Get all the Java files", "-        final List files = new LinkedList();", "-        if (line.hasOption(\"r\")) {", "-            final String[] values = line.getOptionValues(\"r\");", "-            for (int i = 0; i < values.length; i++) {", "-                traverse(new File(values[i]), files);", "-            }", "-        }", "-", "-        final String[] remainingArgs = line.getArgs();", "-        for (int i = 0; i < remainingArgs.length; i++) {", "-            files.add(new File(remainingArgs[i]));", "-        }", "-", "-        if (files.isEmpty()) {", "-            System.out.println(\"Must specify files to process\");", "-            usage();", "-        }", "-", "-        // create the checker", "-        Checker c = null;", "-        try {", "-            c = new Checker();", "-            c.setModuleFactory(moduleFactory);", "-            c.configure(config);", "-            c.addListener(listener);", "-        }", "-        catch (Exception e) {", "-            System.out.println(\"Unable to create Checker: \"", "-                               + e.getMessage());", "-            e.printStackTrace(System.out);", "-            System.exit(1);", "-        }", "-", "-        // add custom listeners", "-        if (line.hasOption(\"l\")) {", "-            final String listeners = line.getOptionValue(\"l\");", "-                c.addListener(customListener);", "-        final File[] processedFiles = new File[files.size()];", "-        files.toArray(processedFiles);", "-        final int numErrs = c.process(processedFiles);", "-        c.destroy();", "-        System.exit(numErrs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcfcd034233e2b347efa52fe3fab0d64", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TypeLeftCurlyCheck.java", "commitBeforeChange": "57d8e4b099c3ff185e85b9633cb9a911bf37d8cc", "commitAfterChange": "2213adc2bc733b0878c662c314b183b4f7dff1e7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        final String braceLine = getLines()[brace.getLineNo() - 1];", "-", "-        // calculate the previous line length without trailing whitespace. Need", "-        // to handle the case where there is no previous line, cause the line", "-        // being check is the first line in the file.", "-        final int prevLineLen = (brace.getLineNo() == 1)", "-            ? mMaxLineLength", "-            : Utils.lengthMinusTrailingWhitespace(", "-                getLines()[brace.getLineNo() - 2]);", "-", "-        // Check for being told to ignore, or have '{}' which is a special case", "-        if ((mOption == LeftCurlyOption.IGNORE)", "-            || ((braceLine.length() > (brace.getColumnNo() + 1))", "-                && (braceLine.charAt(brace.getColumnNo() + 1) == '}')))", "-        {", "-            // ignore", "-        }", "-        else if (mOption == LeftCurlyOption.NL) {", "-            if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                log(brace.getLineNo(), brace.getColumnNo(),", "-                    \"line.new\", \"{\");", "-            }", "-        }", "-        else if (mOption == LeftCurlyOption.EOL) {", "-            if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)", "-                && ((prevLineLen + 2) <= mMaxLineLength))", "-            {", "-                log(brace.getLineNo(), brace.getColumnNo(),", "-                    \"line.previous\", \"{\");", "-            }", "-        }", "-        else if (mOption == LeftCurlyOption.NLOW) {", "-            if (startToken.getLineNo() == brace.getLineNo()) {", "-                // all ok as on the same line", "-            }", "-            else if ((startToken.getLineNo() + 1) == brace.getLineNo()) {", "-                if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                    log(brace.getLineNo(), brace.getColumnNo(),", "-                        \"line.new\", \"{\");", "-                }", "-                else if ((prevLineLen + 2) <= mMaxLineLength) {", "-                    log(brace.getLineNo(), brace.getColumnNo(),", "-                        \"line.previous\", \"{\");", "-                }", "-            }", "-            else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                log(brace.getLineNo(), brace.getColumnNo(),", "-                    \"line.new\", \"{\");", "-            }", "-        }", "-    }", "+        verifyBrace(brace, startToken);"]}]}
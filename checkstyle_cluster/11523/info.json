{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d0f1b80d94de85830ae86935fb2f916", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c4ffc7ea691f18855d488cb3516e5e6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/doclets/TokenTypesDoclet.java", "commitBeforeChange": "3fe3fc67cb39111116eab03f9c91c5dfb1cdbd4f", "commitAfterChange": "b6d9344d1c152f225a22ce9ce09341b3cc9488af", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static boolean start(RootDoc root)             throws FileNotFoundException, UnsupportedEncodingException", "signatureAfterChange": "     public static boolean start(RootDoc root)             throws FileNotFoundException", "diff": ["-            throws FileNotFoundException, UnsupportedEncodingException {", "+            throws FileNotFoundException {", "-        PrintStream ps = null;", "+        final Writer osw = new OutputStreamWriter(fos, StandardCharsets.UTF_8);", "+        final PrintWriter pw = new PrintWriter(osw, false);", "+", "-            ps = new PrintStream(fos, false, \"UTF-8\");", "-                    ps.println(field.name() + \"=\"", "+                    pw.println(field.name() + \"=\"", "-            if (ps != null) {", "-                ps.close();", "-            }", "+            pw.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc646e1226e6bb458e03e4fa1086c6d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "ea704b1cfd23923b91679828ca0bca0035944478", "commitAfterChange": "5c481899d4cfcb8369dcd0851aef21c2d8c5088a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 35, "signatureBeforeChange": "     private LocalizedMessage createLogMessage(int aLine, String aKey, Object... aArgs)", "signatureAfterChange": "          public Object[] getMessageArguments()", "diff": ["-     */", "-    private LocalizedMessage createLogMessage(int aLine, String aKey, Object... aArgs)", "-    {", "-        return new LocalizedMessage(", "-                aLine,", "-                getMessageBundle(),", "-                aKey,", "-                aArgs,", "-                getSeverityLevel(),", "-                getId(),", "-                this.getClass(),", "-                this.getCustomMessages().get(aKey));", "-    }", "+", "+        public Object[] getMessageArguments()", "+        {", "+            return mMessageArguments;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1049020eaeab6230156ed9c27cbf117e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/Utils.java", "commitBeforeChange": "104e69edd63edb8d35b6ae63a17934fc5cf49267", "commitAfterChange": "81b52e27c5077f9a4f426d32b0e39a785052c715", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static Pattern getPattern(String aPattern)         throws PatternSyntaxException", "signatureAfterChange": "     public static Pattern getPattern(String aPattern)         throws PatternSyntaxException", "diff": ["-        Pattern retVal = (Pattern) CREATED_RES.get(aPattern);", "+        return getPattern(aPattern, 0);", "+    }", "-            retVal = Pattern.compile(aPattern);", "-            CREATED_RES.put(aPattern, retVal);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "132f2f83b2ba089b0738b7c9f441b55a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ExplicitInitializationCheck.java", "commitBeforeChange": "e029c0077f4bea3685bba62ea8e96a61f6ad32d4", "commitAfterChange": "db19bd67dcea375b1b94d76b7267ccbc1a5ecc0b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            log(ident.getLineNo(), ident.getColumnNo(),", "-                \"explicit.init\", ident.getText(), \"null\");", "+            log(ident, \"explicit.init\", ident.getText(), \"null\");", "-            log(ident.getLineNo(), ident.getColumnNo(),", "-                \"explicit.init\", ident.getText(), \"false\");", "+            log(ident, \"explicit.init\", ident.getText(), \"false\");", "-            log(ident.getLineNo(), ident.getColumnNo(),", "-                \"explicit.init\", ident.getText(), \"0\");", "+            log(ident, \"explicit.init\", ident.getText(), \"0\");", "-            log(ident.getLineNo(), ident.getColumnNo(),", "-                \"explicit.init\", ident.getText(), \"\\\\0\");", "+            log(ident, \"explicit.init\", ident.getText(), \"\\\\0\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13b9eb170af458cd4249b29d7c0dad5d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "eb7b7bfd3e63a926c3f3b2801d519caa0e1fffc3", "commitAfterChange": "1efd41aa924264e0899f5819e1b30a55d715f98b", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "     void reportInstantiation(MyCommonAST aNewAST, LineText aTypeName)", "signatureAfterChange": "     void reportInstantiation(MyCommonAST aNewAST, LineText aTypeName)", "diff": ["-        final String typeName = aTypeName.getText();", "-        final int lineNo = aNewAST.getLineNo();", "-        final int colNo = aNewAST.getColumnNo();", "-        final String fqClassName = getIllegalInstantiation(typeName);", "-        if (fqClassName != null) {", "-            mMessages.add(lineNo, colNo, \"instantiation.avoid\", fqClassName);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21f6fe2dbeefc7d2a5636b3e4f796348", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "7514320e04e4d35a4317172876e5f11e69a2c891", "commitAfterChange": "01d27913a71c29d6a769ed98ca7dd4ba01fe31eb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void reportCPPComment(int aStartLineNo, int aStartColNo)", "signatureAfterChange": "     void reportCPPComment(int aStartLineNo, int aStartColNo)", "diff": ["-        final String cmt = mLines[aStartLineNo - 1].substring(aStartColNo);", "-        if (mConfig.getTodoRegexp().match(cmt)) {", "-            mMessages.add(aStartLineNo, \"todo.match\", mConfig.getTodoPat());", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "253de14d0a0854672a5fe9408a60c3f8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "6125beffc437f970eae276b4a6542265c6547784", "commitAfterChange": "1ac7fc3f8fc856547085bcc88e17fd1f4bbe0ddd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void processVariable(DetailAST aAST)", "signatureAfterChange": "     private void processVariable(DetailAST aAST)", "diff": ["-                final ListIterator it =", "-                    mFieldsStack.listIterator(mFieldsStack.size());", "-                while (it.hasPrevious()) {", "-                    final FieldFrame frame = (FieldFrame) it.previous();", "-                    inStatic |= frame.isStaticType();", "-                    if ((frame.containsStaticField(name)", "-                        || (!inStatic && frame.containsInstanceField(name)))", "-                        && ((mRegexp == null) || (!getRegexp().match(name)))", "-                        && !isIgnoredSetterParam(aAST, name)", "-                        && !isIgnoredConstructorParam(aAST))", "-                    {", "-                        log(nameAST.getLineNo(), nameAST.getColumnNo(),", "-                            \"hidden.field\", name);", "-                        break;", "-                    }", "+                if ((mCurrentFrame.containsStaticField(name)", "+                     || (!inStatic(aAST)", "+                         && mCurrentFrame.containsInstanceField(name)))", "+                    && ((mRegexp == null) || (!getRegexp().match(name)))", "+                    && !isIgnoredSetterParam(aAST, name)", "+                    && !isIgnoredConstructorParam(aAST))", "+                {", "+                    log(nameAST, \"hidden.field\", name);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d63b06a862651143007c36e0c3ed0b9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "7514320e04e4d35a4317172876e5f11e69a2c891", "commitAfterChange": "01d27913a71c29d6a769ed98ca7dd4ba01fe31eb", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     void reportCComment(int aStartLineNo, int aStartColNo,                         int aEndLineNo, int aEndColNo)", "signatureAfterChange": "     void reportCComment(int aStartLineNo, int aStartColNo,                         int aEndLineNo, int aEndColNo)", "diff": ["-        final String[] cc = extractCComment(aStartLineNo, aStartColNo,", "-                                            aEndLineNo, aEndColNo);", "-", "-        // Check for to-do comments", "-        for (int i = 0; i < cc.length; i++) {", "-            if (mConfig.getTodoRegexp().match(cc[i])) {", "-                mMessages.add(aStartLineNo + i, \"todo.match\",", "-                              mConfig.getTodoPat());", "-            }", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "300dc76929f695c937112b9d6a0599b6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "b4ad010003b48f56a8724d7c97395ddb8b1f706a", "commitAfterChange": "b78f144ee4613e1d503624067b4a03d10b3515a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private String getCommentText(String[] aComments)", "signatureAfterChange": "     private String getCommentText(String[] aComments)", "diff": ["-                // Look for Javadoc tag that's not an inline tag", "-                // it can appear within the comment text.", "-                // Inline tags are denoted by curly braces: {@tag}", "-                final int ndx = line.indexOf('@');", "-                if ((ndx != -1)", "-                    && (ndx == 0 || line.charAt(ndx - 1) != '{'))", "-                {", "-                    foundTag = true;", "-                    line = line.substring(0, ndx);", "+                if (line.charAt(textStart) == '@') {", "+                    //we have found the tag section", "+                    break;", "-", "-", "-                if (foundTag) {", "-                    break;", "-                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306cbaa9849941e6df7e3febed8fcdf3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/DetailAST.java", "commitBeforeChange": "fa9bf2e0ef561ab0e112157fd55c52ffac1b5715", "commitAfterChange": "e3929c641ca2c2ef08d90ee506db556529088326", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "     public DetailAST getPreviousSibling()", "signatureAfterChange": "     public DetailAST getPreviousSibling()", "diff": ["-        final DetailAST parent = getParent();", "-        if (parent == null) {", "-            return null;", "-        }", "-", "-        AST ast = parent.getFirstChild();", "-        while (ast != null) {", "-            AST nextSibling = ast.getNextSibling();", "-            if (this == nextSibling) {", "-                return (DetailAST) ast;", "-            }", "-            ast = nextSibling;", "-        }", "-        return null;", "+        return mPreviousSibling;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34f016bda2bfa34760e99cf61b41dda9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/ParseTreeInfoPanel.java", "commitBeforeChange": "8cf07f17e86b252a393f45daf5885549a8a6db3a", "commitAfterChange": "73b6af97e4e2838ed52fb05a207be70ba4f17131", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "          public void actionPerformed(ActionEvent e)", "signatureAfterChange": "          public void actionPerformed(ActionEvent e)", "diff": ["-            JFileChooser fc = new JFileChooser();", "+            JFileChooser fc = new JFileChooser( mLastDirectory );", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3864dc59ee18c893528a08d26461caa7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AbstractViolationReporter.java", "commitBeforeChange": "36d1d1bd0f1375a8685fb90331e0190918bf8a92", "commitAfterChange": "3bf83180c94eb14314d929682b260d1ce43eadb3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     protected String getMessageBundle()", "signatureAfterChange": "     protected String getMessageBundle()", "diff": ["-        final int endIndex = className.lastIndexOf('.');", "-        final String packageName = className.substring(0, endIndex);", "-        return packageName + \".\" + \"messages\";", "+        return getMessageBundle(className);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "415ecde9b2d0f7b1f95a2a2378d91cad", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "a8ad56697b9348de2a242654d5c56b127d78e876", "commitAfterChange": "a21164df1fbaff36ba020968b3a6128ab8476756", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "signatureAfterChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "diff": ["-", "-            // Loop looking for matching param", "-            final Iterator<DetailAST> paramIt = params.iterator();", "-            while (paramIt.hasNext()) {", "-                final DetailAST param = paramIt.next();", "-                if (param.getText().equals(arg1)) {", "-                    found = true;", "-                    paramIt.remove();", "-                    break;", "-                }", "-            }", "+            found = removeMatchingParam(params, arg1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e1f2dc1a397573a264232af4cda1da7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "e03dd7a0a03f9cf91e466ebee911ef0fa10130a4", "commitAfterChange": "9eb27f99a33fb67020c697bc2e4c5643aee0ae03", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            final DetailAST definer = getDefiner(aAST);", "-            final int type = definer.getType();", "-            if ((type == TokenTypes.CLASS_DEF)", "-                || (type == TokenTypes.LITERAL_NEW))", "-            {", "+            if (isEqualsMethod(aAST) && !ScopeUtils.inInterfaceBlock(aAST)) {", "+                final DetailAST definer = getDefiner(aAST);", "-                final ClassAttributes attrs =", "-                        (ClassAttributes) mClassStack.getLast();", "+                ClassAttributes attrs =", "+                    (ClassAttributes) mClassStack.getLast();", "-                    mClassStack.add(new ClassAttributes(definer));", "+                    final ClassAttributes definerAttrs =", "+                        new ClassAttributes(definer);", "+                    mClassStack.add(definerAttrs);", "+                    attrs = definerAttrs;", "-                if (!ScopeUtils.inInterfaceBlock(aAST)", "-                    && isEqualsMethod(aAST))", "-                {", "-                    if (hasObjectParameter(aAST)) {", "-                        attrs.setHasEqualsObject();", "-                    }", "-                    else {", "-                        attrs.addEqualsNode(aAST);", "-                    }", "+                if (hasObjectParameter(aAST)) {", "+                    attrs.setHasEqualsObject();", "+                }", "+                else {", "+                    attrs.addEqualsNode(aAST);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5970a828233e8d046f7fc635d12f87f5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/doclets/CheckDocsDoclet.java", "commitBeforeChange": "76e9e8ee631399e45f641c12a164dd140939db50", "commitAfterChange": "c4d8550b2e36a0ae7c5c410e62ca798980b45c5c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "         private void write(Writer aWriter) throws IOException", "signatureAfterChange": "         private void write(Writer aWriter) throws IOException", "diff": ["+            final String title = getTitle();", "-            pw.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"ISO-8859-1\\\"?>\");", "-            pw.println(\"<document>\");", "-            pw.println(\"<properties>\");", "-            pw.println(\"<title>\" + getTitle() + \"</title>\");", "-            pw.println(\"<author email=\\\"checkstyle-devel@lists.sourceforge.net\"", "-                    + \"\\\">Checkstyle Development Team</author>\");", "-            pw.println(\"</properties>\");", "-            pw.println(\"<body>\");", "-            pw.flush();", "+            writeXdocsHeader(pw, title);", "-            pw.println(\"</body>\");", "-            pw.println(\"</document>\");", "+            writeXdocsFooter(pw);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fae9859d02387b87ee2bc314c933bc8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "3831aa913e25d2bd424ccbeb239bd06439867a58", "commitAfterChange": "a265fee823c473d632b83c446b2e6bc82960b2c0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void processVariable(DetailAST ast)", "signatureAfterChange": "     private void processVariable(DetailAST ast)", "diff": ["-            if ((currentFrame.containsStaticField(name)", "-                || !inStatic(ast) && currentFrame.containsInstanceField(name))", "-                && (regexp == null || !getRegexp().matcher(name).find())", "+            if (isStaticOrOnstanceField(ast, name)", "+                && !isMatchingRegexp(name)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b8f9de6f055294723d7cf5c851340fc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "a49d4e972a6bfd26e73e42337ff75d50b4df8959", "commitAfterChange": "54a09706ec1db32435b09e6b6910813325558f8d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static Set loadKeys(File file)", "signatureAfterChange": "     private Set loadKeys(File file)", "diff": ["-    private static Set loadKeys(File file)", "+    private Set loadKeys(File file)", "-        catch (FileNotFoundException e) {", "-            System.out.println(", "-                    \"The file \" + file.getName() + \" could not be found!\");", "-        }", "-            System.out.println(\"IOException occured\");", "+            logIOException(e, file);", "-                System.out.println(\"IOException occured\");", "+                logIOException(e, file);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91108d43dc0f1d67f1df1f8ac8bbe6c0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTypeCheck.java", "commitBeforeChange": "7b8a3aa5bba1323a7bbb85b6dbd86835215a48fc", "commitAfterChange": "603c5bb53ea12900f6a1c8af0c4a765af36786e3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private boolean isVerifiable(DetailAST methodOrVariableDef)", "signatureAfterChange": "     private boolean isVerifiable(DetailAST methodOrVariableDef)", "diff": ["-            if (modifiersAst.getFirstChild() != null) {", "-                for (DetailAST modifier = modifiersAst.getFirstChild(); modifier != null;", "-                         modifier = modifier.getNextSibling()) {", "-                    if (memberModifiers.contains(modifier.getType())) {", "-                        result = true;", "-                    }", "+            result = isContainVerifiableType(modifiersAst);", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c0a84c9c3873e08229fedc3c4052413", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "603c5bb53ea12900f6a1c8af0c4a765af36786e3", "commitAfterChange": "7e1062dea1fae14b90ae6461625c259ed944d1e4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static DetailAST skipAnnotationOnlyLines(DetailAST ast)", "signatureAfterChange": "     private static DetailAST skipAnnotationOnlyLines(DetailAST ast)", "diff": ["-            DetailAST lastAnnotation = findLastAnnotation(modifiers);", "+            final DetailAST lastAnnotation = findLastAnnotation(modifiers);", "-                    final int lastAnnotationLineNumber = lastAnnotation.getLineNo();", "-                    while (lastAnnotation.getPreviousSibling() != null", "-                           && lastAnnotation.getPreviousSibling().getLineNo()", "-                               == lastAnnotationLineNumber) {", "-", "-                        lastAnnotation = lastAnnotation.getPreviousSibling();", "-                    }", "-                    resultNode = lastAnnotation;", "+                    resultNode = getFirstAnnotationOnSameLine(lastAnnotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0cc91bb4756858c5e056ebbb9b19579", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "46e7bd70f93b22c93849e0023cc22adfe9c0234f", "commitAfterChange": "42bf43038671a4c65a47fcd9931cc2db35dbeaf7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)             throws SAXException", "signatureAfterChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)             throws SAXException", "diff": ["-        System.out.println(\"aQName = \" + aQName);", "-            System.out.println(\"  value of \" + name + \" is \" + value);", "-                System.out.println(\"  propName = \" + propName);", "-                System.out.println(\"  new value = \" + value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b38b70f7e8f7775ec58bc7c74e072a88", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/CompareTreesWithComments.java", "commitBeforeChange": "10d3015752ad509cd8f7956d98b6eb9c92641a45", "commitAfterChange": "d35dc970390f16309861f1438038c08dc59ac290", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private static boolean isAstEquals(DetailAST expected, DetailAST actual)", "signatureAfterChange": "      private static boolean isAstEqualsSafe(DetailAST expected, DetailAST actual)", "diff": ["-        boolean result = false;", "-        } else {", "-            if (expected.getType() == actual.getType()", "-                    && expected.getLineNo() == actual.getLineNo()", "-                    && expected.getColumnNo() == actual.getColumnNo()) {", "-                if (expected.getText() == null) {", "-                    result = actual.getText() == null;", "-                }", "-                else if (expected.getText().equals(actual.getText())) {", "-                    result = true;", "-                }", "-            }", "-", "-            if (result) {", "-                DetailAST childExpected = expected.getFirstChild();", "-                DetailAST childActual = actual.getFirstChild();", "-                result = isAstEquals(childExpected, childActual);", "-                if (result) {", "-                    DetailAST nextSiblingExpected = expected.getNextSibling();", "-                    DetailAST nextSiblingActual = actual.getNextSibling();", "-                    result = isAstEquals(nextSiblingExpected, nextSiblingActual);", "-                }", "-            }", "+", "+    private static boolean isAstEqualsSafe(DetailAST expected, DetailAST actual) {", "+        boolean result = false;", "+", "+        if (expected.getType() == actual.getType()", "+                && expected.getLineNo() == actual.getLineNo()", "+                && expected.getColumnNo() == actual.getColumnNo()) {", "+            if (expected.getText() == null) {", "+                result = actual.getText() == null;", "+            }", "+            else if (expected.getText().equals(actual.getText())) {", "+                result = true;", "+            }", "+        }", "+", "+        if (result) {", "+            DetailAST childExpected = expected.getFirstChild();", "+            DetailAST childActual = actual.getFirstChild();", "+            result = isAstEquals(childExpected, childActual);", "+            if (result) {", "+                DetailAST nextSiblingExpected = expected.getNextSibling();", "+                DetailAST nextSiblingActual = actual.getNextSibling();", "+                result = isAstEquals(nextSiblingExpected, nextSiblingActual);", "+            }", "+        }", "+", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7f02c8c80e3d3dd10f77fd5d0873e6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "6d20b67e0f1bfedc2132a887257d72edde4c857b", "commitAfterChange": "99f8726600ebd9f73b86eacf5e44d0335266d8fc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "     private static List<String> getAnnotationValues(DetailAST ast)", "signatureAfterChange": "     private static List<String> getAnnotationValues(DetailAST ast)", "diff": ["-                final List<String> valueList = Lists.newLinkedList();", "-                DetailAST childAST = ast.getFirstChild();", "-                while (childAST != null) {", "-                    if (childAST.getType() == TokenTypes.EXPR) {", "-                        valueList.add(getStringExpr(childAST));", "-                    }", "-                    childAST = childAST.getNextSibling();", "-                }", "-                return valueList;", "+                return findAllExpressionsInChildren(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c04a7ef55a285e0c6de715300b8ed40a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "1a205d4b436650a301ef088ed86a3821b99551f2", "commitAfterChange": "faa8a0b7a427385fab564d2959244355f8d9813f", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "signatureAfterChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "diff": ["-                // Loop looking for matching type param", "-                final Iterator<DetailAST> typeParamsIt = typeParams.iterator();", "-                while (typeParamsIt.hasNext()) {", "-                    final DetailAST typeParam = typeParamsIt.next();", "-                    if (typeParam.findFirstToken(TokenTypes.IDENT).getText()", "-                            .equals(", "-                                    arg1.substring(1,", "-                                        arg1.length() - 1))) {", "-                        found = true;", "-                        typeParamsIt.remove();", "-                        break;", "-                    }", "-                }", "+                found = searchMatchingTypeParameter(typeParams,", "+                        arg1.substring(1, arg1.length() - 1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c054975fb98bf92883bfdebb1e477ea7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "7ae04fd647ca3584216920114ed7aba5ffc6c587", "commitAfterChange": "1cea3765893e83e0d58ca110113e0d05b15a798a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private static void usage()", "signatureAfterChange": "     private static void usage()", "diff": ["-        System.out.println(", "-            \"Usage: java \" + Main.class.getName()", "-            + \" <options> config <file>......\");", "-        System.out.println(\"Options\");", "-        System.out.println(", "-            \"\\t-f <format>\\tsets output format. (plain|xml). \"", "-            + \"Default to plain.\");", "-        System.out.println(\"\\t-o <file>\\tsets output file name. \"", "-                           + \"Defaults to stdout\");", "-        System.out.println(\"\\t-r <dir>\\ttraverses the directory for Java\"", "-                           + \" source files.\");", "-        System.out.println(\"\\t-p <file>\\tuses a properties file\"", "-                           + \" instead of the system properties.\");", "+        HelpFormatter hf = new HelpFormatter();", "+        hf.printHelp(", "+            \"java \"", "+                + Main.class.getName()", "+                + \" [options] -c <config.xml> file...\",", "+            OPTS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b1d7ac319a3ae31ee9fde398bc4dda", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/IndentationCheck.java", "commitBeforeChange": "bf6758b29dbb6f0e22d4951ea3bd25fdf45299fc", "commitAfterChange": "eaad55fdba73e17e103dc6600867f26fd6a3896b", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 8, "signatureBeforeChange": "          protected int expandedTabsColumnNo(DetailAST aAst)", "signatureAfterChange": "     public int getIndentationTabWidth()", "diff": ["-", "-        protected int expandedTabsColumnNo(DetailAST aAst)", "-        {", "-            String line = ", "-                IndentationCheck.this.getLines()[aAst.getLineNo() - 1];", "-", "-            return Utils.lengthExpandedTabs(line, aAst.getColumnNo(), ", "-                getTabWidth());", "-        }", "+     */", "+    public int getIndentationTabWidth()", "+    {", "+        return getTabWidth();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd8b887f79d4b287f48b6fbe34181ef6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MagicNumberCheck.java", "commitBeforeChange": "bdda55ed1b207cab5e7f8ab3e6ebfb4d07a62a5a", "commitAfterChange": "b4cec8170a1d89159620b327a453ce13215d4eea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            DetailAST astNode = ast.getParent();", "-            while (astNode != constantDefAST) {", "-                final int type = astNode.getType();", "-                if (Arrays.binarySearch(ALLOWED_PATH_TOKENTYPES, type) < 0) {", "-                    reportMagicNumber(ast);", "-                    break;", "-                }", "+            final boolean found = isMagicNumberExists(ast, constantDefAST);", "+            if (found) {", "+                reportMagicNumber(ast);", "-                astNode = astNode.getParent();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9e74f04094081cdc0a6eef23be6c692", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/ConfigurationTest.java", "commitBeforeChange": "7335df239dda0b303e7de23ef6b1adf388780a0c", "commitAfterChange": "62354b2ad94e17a08924cdffa643d7c8c3734625", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testGetProperties() throws Exception", "signatureAfterChange": "      public void testGetProperties() throws Exception", "diff": ["-        final Configuration c = new Configuration();", "-        assertEquals(\"80\",", "-                     c.getProperties().getProperty(Defn.MAX_LINE_LENGTH_PROP));", "-        c.setIntProperty(Defn.MAX_LINE_LENGTH_PROP, 666);", "+        final Properties props = new Properties();", "+        props.setProperty(Defn.MAX_LINE_LENGTH_PROP, \"666\");", "+        props.setProperty(Defn.MEMBER_PATTERN_PROP, \"bulldogs\");", "+", "+        final Configuration c = new Configuration(props, System.out);", "-        c.setPatternProperty(Defn.MEMBER_PATTERN_PROP, \"bulldogs\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5e15d2fd7a793b4f0b67d949475fd5a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "0f543a21fee9dec9b388bb6f2c42540fe8bf02ec", "commitAfterChange": "a2b8be14bb1230f1b184701bae8bcc7af102bb25", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "signatureAfterChange": "     private void checkParamTags(final List<JavadocTag> tags,             final DetailAST parent, boolean reportExpectedTags)", "diff": ["+            final String arg1 = tag.getArg1();", "-                if (param.getText().equals(tag.getArg1())) {", "+                if (param.getText().equals(arg1)) {", "-            if (tag.getArg1().startsWith(\"<\") && tag.getArg1().endsWith(\">\")) {", "+            if (Utils.startsWithChar(arg1, '<') && Utils.endsWithChar(arg1, '>')) {", "-                                    tag.getArg1().substring(1,", "-                                            tag.getArg1().length() - 1)))", "+                                    arg1.substring(1,", "+                                        arg1.length() - 1)))", "-                        \"@param\", tag.getArg1());", "+                        \"@param\", arg1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6af8c9936ce7dd014c6cbe1970e18b2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final DetailAST astNode = getPreceded(ast);", "-        final String line = getLine(ast.getLineNo() - 1);", "-        final int after = getPositionAfter(astNode);", "+        final DetailAST whitespaceFollowedAst = getWhitespaceFollowedNode(ast);", "-        if ((after >= line.length() || Character.isWhitespace(line.charAt(after)))", "-                 && hasRedundantWhitespace(line, after)) {", "-            log(astNode.getLineNo(), after,", "-                MSG_KEY, astNode.getText());", "+        final int whitespaceColumnNo = getPositionAfter(whitespaceFollowedAst);", "+        final int whitespaceLineNo = whitespaceFollowedAst.getLineNo();", "+", "+        if (hasTrailingWhitespace(ast, whitespaceColumnNo, whitespaceLineNo)) {", "+            log(whitespaceLineNo, whitespaceColumnNo,", "+                MSG_KEY, whitespaceFollowedAst.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e771e31b9115ca1fadcbbd820538348a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocTypeCheck.java", "commitBeforeChange": "e8d025321c3d1f5741e860bd96a93e7d2169ca9c", "commitAfterChange": "661274b68096ccd5876abb8eacf7c8d42a939a0b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["+                final int lineNo = aAST.getLineNo();", "-                    contents.getJavadocBefore(aAST.getLineNo());", "+                    contents.getJavadocBefore(lineNo);", "-                    log(aAST.getLineNo(), \"javadoc.missing\");", "+                    log(lineNo, \"javadoc.missing\");", "-                    if ((mAuthorRE != null)", "-                        && (mAuthorRE.grep(cmt).length == 0))", "-                    {", "-                        // TODO: better error message", "-                        log(aAST.getLineNo(), \"type.missingTag\", \"@author\");", "-                    }", "-", "-                    if ((mVersionRE != null)", "-                        && (mVersionRE.grep(cmt).length == 0))", "-                    {", "-                        // TODO: better error message", "-                        log(aAST.getLineNo(), \"type.missingTag\", \"@version\");", "-                    }", "-", "+                    checkTag(lineNo, cmt, \"@author\",", "+                            mAuthorTagRE, mAuthorFormatRE, mAuthorFormat);", "+                    checkTag(lineNo, cmt, \"@version\",", "+                            mVersionTagRE, mVersionFormatRE, mVersionFormat);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb0cbf4033e7b532995027c501233477", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "eaad55fdba73e17e103dc6600867f26fd6a3896b", "commitAfterChange": "5cf355fad4b8bc613962aac2f52b48d5726f2acc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public boolean isReference(String aEnt)", "signatureAfterChange": "     public boolean isReference(String aEnt)", "diff": ["+            int prefixLength = 2; // \"&#\"", "+            int radix = BASE_10;", "-                try {", "-                    Integer.parseInt(aEnt.substring(3, aEnt.length() - 1), 16);", "-                    return true;", "-                }", "-                catch (NumberFormatException nfe) {", "-                    return false;", "-                }", "+                prefixLength++;", "+                radix = BASE_16;", "-            else {", "-                try {", "-                    Integer.parseInt(aEnt.substring(2, aEnt.length() - 1));", "-                    return true;", "-                }", "-                catch (NumberFormatException nfe) {", "-                    return false;", "-                }", "+            try {", "+                Integer.parseInt(", "+                    aEnt.substring(prefixLength, aEnt.length() - 1), radix);", "+                return true;", "+            }", "+            catch (NumberFormatException nfe) {", "+                return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f81f12d12987c5463e35748ad56e2e8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "6d20b67e0f1bfedc2132a887257d72edde4c857b", "commitAfterChange": "99f8726600ebd9f73b86eacf5e44d0335266d8fc", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     public static String encode(String value)", "signatureAfterChange": "     public static String encode(String value)", "diff": ["-                    final int nextSemi = value.indexOf(';', i);", "-                    if (nextSemi < 0", "-                        || !isReference(value.substring(i, nextSemi + 1))) {", "-                        sb.append(\"&amp;\");", "-                    }", "-                    else {", "-                        sb.append('&');", "-                    }", "+                    sb.append(encodeAmpersend(value, i));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe9728d54aa553d95018b5ed6b96d792", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "f747835b6b4bd894eed2ef17eb059a003fb4d988", "commitAfterChange": "6ebcf2733b6c635d5f044aa35caf2a610c7723ff", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean containsMultiArgs(final AST expr)", "signatureAfterChange": "      @Override     public int[] getRequiredTokens()", "diff": ["+", "+    @Override", "+    public int[] getRequiredTokens() {", "+        return getDefaultTokens();", "-     */", "-    private boolean containsMultiArgs(final AST expr) {", "-        final AST comma = expr.getNextSibling();", "-        return comma != null && comma.getType() == TokenTypes.COMMA;", "-    }"]}]}
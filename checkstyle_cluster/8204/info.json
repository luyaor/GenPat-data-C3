{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6db08eafcfddba39f4fb5a68e5ea1117", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4da4ca87b0ddfe298203f37dea268b3a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/examples/checks/com/mycompany/checks/LimitImplementationFiles.java", "commitBeforeChange": "55fcf189eb1c1c4d776ce3b3ad7835fb404b21d8", "commitAfterChange": "c8a0d72210badeb7f1d43e873328bbb2a9d36e48", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void process(File[] files)", "signatureAfterChange": "     public void process(File[] files)", "diff": ["-            // Build the error list. Here we fire only one error", "-            LocalizedMessage[] errors = new LocalizedMessage[1];", "-", "-            // get the resource bundle to use for the message", "-            // will return \"com.mycompany.checks.messages\"", "-            final String bundle = getMessageBundle();", "-", "-            // create the message arguments", "-            Object[] msgArgs = new Object[]{new Integer(max)};", "-", "-            // create the actual message", "-            errors[0] = new LocalizedMessage(", "-                0, bundle, \"max.files.exceeded\", msgArgs);", "-", "-            // fire the errors to the AuditListeners", "+            // figure out the file that contains the error", "-            getMessageDispatcher().fireErrors(path, errors);", "+", "+            // message collector is used to collect error messages,", "+            // needs to be reset before starting to collect error messages", "+            // for a file.", "+            getMessageCollector().reset();", "+", "+            // message dispatcher is used to fire AuditEvents", "+            MessageDispatcher dispatcher = getMessageDispatcher();", "+", "+            // signal start of file to AuditListeners", "+            dispatcher.fireFileStarted(path);", "+", "+            // log the message", "+            log(0, \"max.files.exceeded\", new Integer(max));", "+", "+            // you can call log() multiple times to flag multiple", "+            // errors in the same file", "+", "+            // fire the errors for this file to the AuditListeners", "+            dispatcher.fireErrors(path, getMessageCollector().getMessages());", "+", "+            // signal end of file to AuditListeners", "+            dispatcher.fireFileFinished(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c93f5369c0a87979f3c4ae062d4d7f7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/PackageHtmlCheck.java", "commitBeforeChange": "d4cee632835a462da2dc6794b059fb0d6b1c9bc2", "commitAfterChange": "d216ec75255a120ce7c24e51da7df63a2b9864de", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void process(File[] aFiles)", "signatureAfterChange": "     public void process(File[] aFiles)", "diff": ["-                LocalizedMessage[] errors = new LocalizedMessage[1];", "-                String bundle = getMessageBundle();", "-                errors[0] = new LocalizedMessage(", "-                        0, bundle, \"javadoc.packageHtml\", null);", "-                getMessageDispatcher().fireErrors(path, errors);", "+                log(0, \"javadoc.packageHtml\");", "+                final LocalizedMessages messageList = getMessageCollector();", "+                final LocalizedMessage[] messages = messageList.getMessages();", "+                getMessageDispatcher().fireErrors(path, messages);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a0a416ce22aef45e8f9728ab76137b3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/TranslationCheck.java", "commitBeforeChange": "d4cee632835a462da2dc6794b059fb0d6b1c9bc2", "commitAfterChange": "d216ec75255a120ce7c24e51da7df63a2b9864de", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private void compareKeySets(Set aKeys, Map aFileMap)", "signatureAfterChange": "     private void compareKeySets(Set aKeys, Map aFileMap)", "diff": ["-                    Object[] key = new Object[]{it.next()};", "-                    LocalizedMessage[] errors = new LocalizedMessage[1];", "-                    final String bundle = getMessageBundle();", "-                    errors[0] = new LocalizedMessage(", "-                            0, bundle, \"translation.missingKey\", key);", "-                    getMessageDispatcher().fireErrors(path, errors);", "+                    Object key = it.next();", "+                    log(0, \"translation.missingKey\", key);", "+            LocalizedMessage[] errors = getMessageCollector().getMessages();", "+            getMessageDispatcher().fireErrors(path, errors);"]}]}
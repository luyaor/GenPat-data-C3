{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc15aff92302bede8f82ac6289bcb8ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a18d1a5ddcc477dfc67069dfb54e9db", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "e380ac8df92c051d843d380d5e8a6fe90af9df9d", "commitAfterChange": "ab2f93f9bf61816d84154e636d32c81c05854e24", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] args) throws UnsupportedEncodingException", "signatureAfterChange": "     public static void main(String[] args) throws UnsupportedEncodingException", "diff": ["-        // parse the parameters", "-        final CommandLineParser clp = new PosixParser();", "-        CommandLine line = null;", "+        boolean parseResult = false;", "-            line = clp.parse(OPTS, args);", "+            processCommandLine(parseCli(args));", "+            parseResult = true;", "-            usage();", "+            System.err.println(\"Could not parse parameters: \" + e.getMessage());", "+            e.printStackTrace();", "-        assert line != null;", "+        catch (final Exception e) {", "+            System.err.println(\"Could not execute Checkstyle: \" + e.getMessage());", "+            e.printStackTrace();", "+        }", "+        finally {", "+            if (!parseResult) {", "+                usage();", "+            }", "+            // provide proper exit code based on results.", "+            System.exit(parseResult ? 0 : 1);", "+        }", "+    }", "-            System.exit(0);", "-            line.hasOption(\"p\")", "-                ? loadProperties(new File(line.getOptionValue(\"p\")))", "-                : System.getProperties();", "-", "-        // ensure a config file is specified", "-        if (!line.hasOption(\"c\")) {", "-            System.out.println(\"Must specify a config XML file.\");", "-            usage();", "-        }", "-", "-        final Configuration config = loadConfig(line, props);", "-                System.out.println(\"Could not find file: '\" + fname + \"'\");", "-                System.exit(1);", "-        final AuditListener listener = createListener(line, out, closeOut);", "-        final List<File> files = getFilesToProcess(line);", "-        final Checker c = createChecker(config, listener);", "-        final int numErrs = c.process(files);", "-        c.destroy();", "-        System.exit(numErrs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df6732a8f34215f4b54b936be5710bd7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Main.java", "commitBeforeChange": "f34eba11cbd8559d4d06f96e19affa70abaf86ff", "commitAfterChange": "0e3fe5643667a53079dbd114e5b1e9aa91fde083", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static void main(String[] aArgs)", "signatureAfterChange": "     public static void main(String[] aArgs)", "diff": ["+        // be brain dead about arguments parsing", "+        String format = \"plain\";", "+        String output = null;", "+        String[] files = null;", "+        for (int i = 0; i < aArgs.length; i++) {", "+            if (\"-f\".equals(aArgs[i])) {", "+                format = aArgs[++i];", "+            }", "+            else if (\"-o\".equals(aArgs[i])) {", "+                output = aArgs[++i];", "+            }", "+            else {", "+                files = new String[aArgs.length - i];", "+                System.arraycopy(aArgs, i, files, 0, files.length);", "+                break;", "+            }", "+        }", "+", "+        // create the appropriate listener", "+        OutputStream out = System.out;", "+        if (output != null) {", "+            try {", "+                out = new FileOutputStream(output);", "+            }", "+            catch (FileNotFoundException e) {", "+                System.out.println(\"Could not find file: '\" + output + \"'\");", "+                System.exit(1);", "+            }", "+        }", "+        AuditListener listener = null;", "+        if (\"xml\".equals(format)) {", "+            listener = new XMLLogger(out);", "+        }", "+        else if (\"plain\".equals(format)) {", "+            listener = new DefaultLogger(out);", "+        }", "+        else {", "+            System.out.println(\"Invalid format: (\" + format +", "+                               \"). Must be 'plain' or 'xml'.\");", "+            usage();", "+        }", "+", "+            c.addListener(listener);", "-        int numErrors = 0;", "-        for (int i = 0; i < aArgs.length; i++) {", "-            numErrors += c.process(aArgs[i]);", "-        }", "+        final int numErrs = c.process(files);", "-        System.exit(numErrors);", "+        System.exit(numErrs);"]}]}
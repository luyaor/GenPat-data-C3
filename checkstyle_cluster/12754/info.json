{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "758c715cb5a718678a7efca4dcd6e402", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45db29d20f9d62fb12bb8c16fe9d5282", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "3eca04c940bcdf575c2f9009202a4145e9a82c15", "commitAfterChange": "57f395fa2b2dcea7dd369ab3dd52d3d42f0e0893", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST methodCall)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST methodCall)", "diff": ["-", "-        //checks for calling equals on String literal and", "-        //anon object which cannot be null", "-        //Also, checks if calling using strange inner class", "-        //syntax outter.inner.equals(otherObj) by looking", "-        //for the dot operator which cannot be improved", "-        if (objCalledOn.getType() == TokenTypes.STRING_LITERAL", "-                || objCalledOn.getType() == TokenTypes.LITERAL_NEW", "-                || objCalledOn.getType() == TokenTypes.DOT) {", "+        if (isStringLiteral(objCalledOn)) {", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dca6c2cba186fc511f89bcc6f0d172ef", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/ClassDefHandler.java", "commitBeforeChange": "9f93c2258ef0512b743f5927be201ff55a9d5c57", "commitAfterChange": "23c8774d2e2fd245de1e5df02758fd23702c565e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public ClassDefHandler(IndentationCheck indentCheck,                            DetailAST ast,                            AbstractExpressionHandler parent)", "signatureAfterChange": "     public ClassDefHandler(IndentationCheck indentCheck,                            DetailAST ast,                            AbstractExpressionHandler parent)", "diff": ["-        super(indentCheck,", "-              ast.getType() == TokenTypes.CLASS_DEF", "-              ? \"class def\" : ast.getType() == TokenTypes.ENUM_DEF", "-                  ? \"enum def\" : \"interface def\",", "-              ast, parent);", "+        super(indentCheck, getHandlerName(ast), ast, parent);"]}]}
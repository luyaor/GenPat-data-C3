{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a8be78872156f47172b1c94b1c5a9ae", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef17917944e660358b690898a4beea0a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java", "commitBeforeChange": "139609ac5d073ecb04381466f075f174b0aec8c9", "commitAfterChange": "ca9c59e8dc4b1dc4bb61149752c9e46a00e42fb4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                log(aAST, \"declaration.order.constructor\");", "+                if (!mIgnoreConstructors) {", "+                    log(aAST, \"declaration.order.constructor\");", "+                }", "-                log(aAST, \"declaration.order.method\");", "+                if (!mIgnoreMethods) {", "+                    log(aAST, \"declaration.order.method\");", "+                }", "-                    log(aAST, \"declaration.order.static\");", "+                    if (!mIgnoreModifiers) {", "+                        log(aAST, \"declaration.order.static\");", "+                    }", "-                    log(aAST, \"declaration.order.instance\");", "+                    if (!mIgnoreModifiers) {", "+                        log(aAST, \"declaration.order.instance\");", "+                    }", "-                log(aAST, \"declaration.order.access\");", "+                if (!mIgnoreModifiers) {", "+                    log(aAST, \"declaration.order.access\");", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feddd440e653b39c35ea76d2e710071d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "5b4a81a4e1449e2baf5adca4b821c23bc87f4de2", "commitAfterChange": "b69e47845e1903966ddf39efdf49e103ff5a5248", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (hasUnicodeChar(literal)) {", "-            if (!(allowByTailComment && haastrailComment(ast)", "-                    || isAllCharactersEscaped(literal)", "-                    || allowEscapesForControlCharacters", "-                            && isOnlyUnicodeValidChars(literal, sUnicodeControl)", "-                    || allowNonPrintableEscapes", "-                            && isOnlyUnicodeValidChars(literal, sNonPrintableChars)))", "-            {", "-                log(ast.getLineNo(), \"forbid.escaped.unicode.char\");", "-            }", "+        if (hasUnicodeChar(literal) && !(allowByTailComment && haastrailComment(ast)", "+                || isAllCharactersEscaped(literal)", "+                || allowEscapesForControlCharacters", "+                        && isOnlyUnicodeValidChars(literal, sUnicodeControl)", "+                || allowNonPrintableEscapes", "+                        && isOnlyUnicodeValidChars(literal, sNonPrintableChars)))", "+        {", "+            log(ast.getLineNo(), \"forbid.escaped.unicode.char\");"]}]}
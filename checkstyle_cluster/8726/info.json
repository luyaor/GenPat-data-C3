{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1bcc633fc3e164e72228e72afaf8d6be", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91768dd5eb3b2a6fc269c35648f35bcf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheckTest.java", "commitBeforeChange": "c5dfb268770999ece0efcab2f47f007dec339264", "commitAfterChange": "5f0f6d3929dc2c7f1570c03f24a652bffe61db6f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      public void testIgnoreCaseFalse()             throws Exception", "signatureAfterChange": "      public void testIgnoreCaseFalse()             throws Exception", "diff": ["-        final DefaultConfiguration checkConfigTrue =", "-            createCheckConfig(GenericIllegalRegexpCheck.class);", "-        checkConfigTrue.addAttribute(\"format\", illegal);", "-        checkConfigTrue.addAttribute(\"ignoreCase\", \"true\");", "-        final String[] expectedTrue = {", "-            \"69: Line matches the illegal pattern '\" + illegal + \"'.\"};", "-        verify(checkConfigTrue, getPath(\"InputSemantic.java\"), expectedTrue);", "-", "-        final DefaultConfiguration checkConfigFalse =", "-            createCheckConfig(GenericIllegalRegexpCheck.class);", "-        checkConfigFalse.addAttribute(\"format\", illegal);", "-        checkConfigFalse.addAttribute(\"ignoreCase\", \"false\");", "-        final String[] expectedFalse = {};", "-        verify(checkConfigFalse, getPath(\"InputSemantic.java\"), expectedFalse);", "+        mCheckConfig.addAttribute(\"format\", illegal);", "+        mCheckConfig.addAttribute(\"ignoreCase\", \"false\");", "+        final String[] expected = {};", "+        verify(mCheckConfig, getPath(\"InputSemantic.java\"), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2828a9a1baf975d5b3b6774280936d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/VariableDeclarationUsageDistanceCheck.java", "commitBeforeChange": "c4339df8b3d6b58b327b6cfcaca7413e9c526dcf", "commitAfterChange": "495d54c7532363c906bb2b1acf4e010663d6693f", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private static boolean isVariableInOperatorExpr(             DetailAST operator, DetailAST variable)", "signatureAfterChange": "     private static boolean isVariableInOperatorExpr(             DetailAST operator, DetailAST variable)", "diff": ["-        // Variable may be met in ELSE declaration or in CASE declaration.", "+        // Variable may be met in ELSE declaration", "-        if (!isVarInOperatorDeclr) {", "-            switch (operator.getType()) {", "-            case TokenTypes.LITERAL_IF:", "-                final DetailAST elseBlock = operator.getLastChild();", "+        if (!isVarInOperatorDeclr && operator.getType() == TokenTypes.LITERAL_IF) {", "+            final DetailAST elseBlock = operator.getLastChild();", "-                if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {", "-                    // Get IF followed by ELSE", "-                    final DetailAST firstNodeInsideElseBlock = elseBlock.getFirstChild();", "+            if (elseBlock.getType() == TokenTypes.LITERAL_ELSE) {", "+                // Get IF followed by ELSE", "+                final DetailAST firstNodeInsideElseBlock = elseBlock.getFirstChild();", "-                    if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {", "-                        isVarInOperatorDeclr |= isVariableInOperatorExpr(firstNodeInsideElseBlock, variable);", "-                        }", "+                if (firstNodeInsideElseBlock.getType() == TokenTypes.LITERAL_IF) {", "+                    isVarInOperatorDeclr |=", "+                            isVariableInOperatorExpr(", "+                                firstNodeInsideElseBlock,", "+                                    variable);", "-                break;", "-", "-            case TokenTypes.LITERAL_SWITCH:", "-                DetailAST currentCaseBlock = operator.findFirstToken(TokenTypes.CASE_GROUP);", "-", "-                while (currentCaseBlock != null && currentCaseBlock.getType() == TokenTypes.CASE_GROUP) {", "-                    final DetailAST firstNodeInsideCaseBlock = currentCaseBlock.getFirstChild();", "-", "-                    if (isChild(firstNodeInsideCaseBlock, variable)) {", "-                        isVarInOperatorDeclr = true;", "-                        break;", "-                        }", "-                    currentCaseBlock = currentCaseBlock.getNextSibling();", "-                }", "-                break;", "-", "-            default:", "-                // no code"]}]}
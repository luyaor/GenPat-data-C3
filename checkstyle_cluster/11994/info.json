{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0e2aa78340c1c81e1e69a4e09d47e60", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f95dc34b35fc6ca286876bdb1f07db6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java", "commitBeforeChange": "36af550d96f529ecd299b568702c2e197b1c0aa9", "commitAfterChange": "468541ac37d54fbeac5061958d3661ff133a7ffe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (wOp != OperatorWrapOption.NL.IGNORE) {", "-            final String text = aAST.getText();", "-            final int colNo = aAST.getColumnNo();", "-            final int lineNo = aAST.getLineNo();", "-            // TODO: Handle comments before and after operator", "-            // Check if rest of line is whitespace, and not just the operator", "-            // by itself. This last bit is to handle the operator on a line by", "-            // itself.", "-            if (wOp == OperatorWrapOption.NL", "-                && !text.equals(getLines()[lineNo - 1].trim())", "-                && (getLines()[lineNo - 1].substring(colNo + text.length())", "-                    .trim().length() == 0))", "-            {", "-                log(lineNo, colNo, \"line.new\", text);", "-            }", "-            else if (wOp == OperatorWrapOption.EOL", "-                      && Utils.whitespaceBefore(colNo - 1,", "-                                               getLines()[lineNo - 1]))", "-            {", "-                log(lineNo, colNo, \"line.previous\", text);", "-            }", "+        final String text = aAST.getText();", "+        final int colNo = aAST.getColumnNo();", "+        final int lineNo = aAST.getLineNo();", "+        final String currentLine = getLines()[lineNo - 1];", "+        // TODO: Handle comments before and after operator", "+        // Check if rest of line is whitespace, and not just the operator", "+        // by itself. This last bit is to handle the operator on a line by", "+        // itself.", "+        if (wOp == OperatorWrapOption.NL", "+            && !text.equals(currentLine.trim())", "+            && (currentLine.substring(colNo + text.length())", "+                .trim().length() == 0))", "+        {", "+            log(lineNo, colNo, \"line.new\", text);", "-", "+        else if (wOp == OperatorWrapOption.EOL", "+                  && Utils.whitespaceBefore(colNo - 1, currentLine))", "+        {", "+            log(lineNo, colNo, \"line.previous\", text);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4d2310f6ed89e1b1bce6edb0a772ba3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "92ea4cfb5182dbe4ba625ab10e8a95a683607f19", "commitAfterChange": "3fecb73fb3ea4da6bef4e5e9f3a5d555568f0a34", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "signatureAfterChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "diff": ["-        // Check if rest of line is whitespace, and not just the operator by", "-        // itself. This last bit is to handle the operator on a line by itself", "-        if ((mConfig.getWrapOpOption() != WrapOpOption.IGNORE)", "-            && !aText.equals(mLines[aLineNo - 1].trim())", "-            && (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "-                .trim().length() == 0))", "-        {", "-            mMessages.add(aLineNo, aColNo - 1, \"line.new\", aText);", "+        final WrapOpOption wOp = mConfig.getWrapOpOption();", "+", "+        if (wOp != WrapOpOption.IGNORE) {", "+", "+            // Check if rest of line is whitespace, and not just the operator", "+            // by itself. This last bit is to handle the operator on a line by", "+            // itself.", "+            if (wOp == WrapOpOption.NL", "+                && !aText.equals(mLines[aLineNo - 1].trim())", "+                && (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "+                    .trim().length() == 0))", "+            {", "+                mMessages.add(aLineNo, aColNo - 1, \"line.new\", aText);", "+            }", "+            else if (wOp == WrapOpOption.EOL", "+                     && Utils.whitespaceBefore(aColNo - 1, mLines[aLineNo - 1]))", "+            {", "+                mMessages.add(aLineNo, aColNo - 1, \"line.previous\", aText);", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f48a5a4675c1092688a6cf130b3804bc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e1b60f0259f81aa3c57c269abfe08f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodDefHandler.java", "commitBeforeChange": "343e946b076a5344e380c76e5b3ea23438b6fc93", "commitAfterChange": "e3a48d1527341456a798c3f0c1986de6898a8c60", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkType()", "signatureAfterChange": "                 @Override                 public DetailAST findLastNode(DetailAST aFirstNode)", "diff": ["-     */", "-    private void checkType()", "-    {", "-        final DetailAST type = getMainAst().findFirstToken(TokenTypes.TYPE);", "-        final DetailAST ident = ExpressionHandler.getFirstToken(type);", "-        final int columnNo = expandedTabsColumnNo(ident);", "-        if (startsLine(ident) && !getLevel().accept(columnNo)) {", "-            logError(ident, \"return type\", columnNo);", "-        }", "-    }", "+            new LineWrappingHandler(getIndentCheck(), getMainAst()) {", "+                @Override", "+                public DetailAST findLastNode(DetailAST aFirstNode)", "+                {", "+                    return aFirstNode.getLastChild().getPreviousSibling();", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec515442cab55cdcabcf8934cdf9d4f6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/TreeWalkerTest.java", "commitBeforeChange": "fef1efe79158980ce125ab83819e02c6761427e4", "commitAfterChange": "f712557e039eab29eff53c512320216592a23cd3", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testDestroyNonExistingCache() throws Exception", "signatureAfterChange": "      @Test     public void testDestroyNonExistingCache() throws Exception", "diff": ["-        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows server\")) {", "-            // https://support.microsoft.com/en-us/kb/177506 but this only for NTFS", "-            // WindowsServer 2012 use Resilient File System (ReFS), so any name is ok", "-            File file = new File(File.separator + \":invalid\");", "-            if (!file.exists()) {", "-                file.createNewFile();", "-            }", "-            assertTrue(file.setWritable(false, false));", "-            treeWalker.setCacheFile(file.getAbsolutePath());", "-        }", "-        else if (System.getProperty(\"os.name\")", "+        if (System.getProperty(\"os.name\")", "-            File file = new File(File.separator + \":invalid\");", "+            File file = new File(\"C\\\\:invalid\");", "-"]}]}
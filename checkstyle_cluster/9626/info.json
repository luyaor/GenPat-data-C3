{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee0b36064b12111bb11345a26e145455", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0df6045101da10613b4470981b636f25", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java", "commitBeforeChange": "accb0bf5bcca0213c55996af02cc42bbc22f313c", "commitAfterChange": "cd12de2a24713a494393912e2277b67770eb79fe", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Test     public void testGoogleStyleguideConfiguraiton() throws Exception", "signatureAfterChange": "     @Test     public void testStaticStandardThird() throws Exception", "diff": ["-    public void testGoogleStyleguideConfiguraiton() throws Exception {", "+    public void testStaticStandardThird() throws Exception {", "-            \"4: \" + getCheckMessage(MSG_LEX, \"java.awt.Button.ABORT\"),", "-            \"10: \" + getCheckMessage(MSG_LEX, \"java.awt.Dialog\"),", "-            \"15: \" + getCheckMessage(MSG_LEX, \"java.io.File\"),", "-            \"22: \" + getCheckMessage(MSG_LEX, \"com.google.common.collect.*\"),", "+            \"4: \" + getCheckMessage(MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "+            \"10: \" + getCheckMessage(MSG_LEX, \"java.awt.Dialog\", \"java.awt.Frame\"),", "+            \"15: \" + getCheckMessage(MSG_LEX, \"java.io.File\", \"javax.swing.JTable\"),", "+            \"22: \" + getCheckMessage(MSG_LEX, \"com.google.common.collect.*\", \"com.puppycrawl.tools.*\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eaa4f9a4b1decb4546e2fb010820f6f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/BlockParentHandler.java", "commitBeforeChange": "50559c68761e235f57e48cd2dc28928b417d7745", "commitAfterChange": "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 18, "signatureBeforeChange": "     public void checkIndentation()", "signatureAfterChange": "     public void checkIndentation()", "diff": ["-        checkLParen();", "-        checkRParen();", "+        checkLParen(getLParen());", "+        checkRParen(getLParen(), getRParen());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bd47dcc273f0b66f2195dddd1a33e27", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTagInfoTest.java", "commitBeforeChange": "9443321a0f70b8fc1f323a9e237f95f5ac44a45c", "commitAfterChange": "28e6666a07f41519c2746a722f46eaa1e243a11d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "      @Test     public void testCoverage()", "signatureAfterChange": "      @Test     public void testCoverage()", "diff": ["-            fail();", "+            fail(\"IllegalArgumentException is expected\");", "-            fail();", "+            fail(\"IllegalArgumentException is expected\");", "-            fail();", "+            fail(\"IllegalArgumentException is expected\");", "-            fail();", "+            fail(\"IllegalArgumentException is expected\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2919e9f6a7d29a9269e460ded91bb2e9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "9acdd1b97e561748ae8cc61e11dcc145885ecb6d", "commitAfterChange": "c617457933a978f5fd861d7ea43d05bccf045c16", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Configuration()         throws IllegalStateException", "signatureAfterChange": "     public Configuration()         throws IllegalStateException", "diff": ["+            setLocalVarPat(LOCAL_VAR_PATTERN);", "+            setMethodPat(METHOD_PATTERN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e8737548154e17dd73e67f3633ee021", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "commitBeforeChange": "61dcaf5f512b026e4aad1d61946e48905d6016d4", "commitAfterChange": "88f75f5413914bea5b39ba318edf912ee706226d", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "      @Test     public void testExistingTargetFilePlainOutputToFileWithoutRwPermissions()             throws Exception", "signatureAfterChange": "      @Test     public void testExistingTargetFilePlainOutputToFileWithoutRwPermissions()             throws Exception", "diff": ["-        file.setReadable(true, true);", "-        file.setWritable(false, false);", "+        assertTrue(file.setReadable(true, true));", "+        assertTrue(file.setWritable(false, false));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30573538716baa3c33f5f48e5d71f8ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java", "commitBeforeChange": "accb0bf5bcca0213c55996af02cc42bbc22f313c", "commitAfterChange": "cd12de2a24713a494393912e2277b67770eb79fe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Test     public void testNonSpecifiedImports() throws Exception", "signatureAfterChange": "     @Test     public void testNonSpecifiedImports() throws Exception", "diff": ["-        checkConfig", "-                .addAttribute(\"customImportOrderRules\",", "-                        \"STATIC###STANDARD_JAVA_PACKAGE###THIRD_PARTY_PACKAGE###SAME_PACKAGE(3)\");", "+        checkConfig.addAttribute(\"customImportOrderRules\",", "+                \"STATIC###STANDARD_JAVA_PACKAGE###THIRD_PARTY_PACKAGE###SAME_PACKAGE(3)\");", "-            \"4: \" + getCheckMessage(MSG_LEX, \"java.awt.Button.ABORT\"),", "-            \"10: \" + getCheckMessage(MSG_LEX, \"java.awt.Dialog\"),", "-            \"15: \" + getCheckMessage(MSG_LEX, \"java.io.File\"),", "-            \"20: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "-            \"22: \" + getCheckMessage(MSG_NONGROUP_IMPORT),", "+            \"4: \" + getCheckMessage(MSG_LEX, \"java.awt.Button.ABORT\", \"java.io.File.createTempFile\"),", "+            \"10: \" + getCheckMessage(MSG_LEX, \"java.awt.Dialog\", \"java.awt.Frame\"),", "+            \"15: \" + getCheckMessage(MSG_LEX, \"java.io.File\", \"javax.swing.JTable\"),", "+            \"20: \" + getCheckMessage(MSG_ORDER, SAME, THIRD, \"com.puppycrawl.tools.*\"),", "+            \"22: \" + getCheckMessage(MSG_NONGROUP_IMPORT, \"com.google.common.collect.*\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48bf9b490e39cafb59d32a979f5aade2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/ForHandler.java", "commitBeforeChange": "661a9b0ddb10922458082573d79e0791ba6f38c2", "commitAfterChange": "7d38133e430f6c695c40d88c63af4c44f10878f9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     private void checkForParams()", "signatureAfterChange": "     private void checkForParams()", "diff": ["-            getLevel() + getIndentCheck().getBasicOffset());", "+            getLevel() + getIndentCheck().getBasicOffset(),", "+            false,", "+            false);", "-            getLevel() + getIndentCheck().getBasicOffset());", "+            getLevel() + getIndentCheck().getBasicOffset(),", "+            false,", "+            false);", "-            getLevel() + getIndentCheck().getBasicOffset());", "+            getLevel() + getIndentCheck().getBasicOffset(),", "+            false,", "+            false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aef719d88e76412575fd0e8231cb05f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "d499f72239cec254d620ab1619ac936e233e2033", "commitAfterChange": "c682b5725d22afc38bf19d9667b23a7deab6d8c3", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 73, "signatureBeforeChange": "     private void checkLCurly(int aStartLine,                              MyCommonAST aBrace,                              LeftCurlyOption aOption)", "signatureAfterChange": "     private void checkLCurly(int aStartLine,                              MyCommonAST aBrace,                              LeftCurlyOption aOption)", "diff": ["-                log(aBrace.getLineNo(),", "-                    aBrace.getColumnNo(),", "-                    \"'{' should be on a new line.\");", "+                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+                    \"line.new\", \"{\");", "-                log(aBrace.getLineNo(),", "-                    aBrace.getColumnNo(),", "-                    \"'{' should be on the previous line.\");", "+                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+                    \"line.previous\", \"{\");", "-                    log(aBrace.getLineNo(),", "-                        aBrace.getColumnNo(),", "-                        \"'{' should be on a new line.\");", "+                    log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+                        \"line.new\", \"{\");", "-                    log(aBrace.getLineNo(),", "-                        aBrace.getColumnNo(),", "-                        \"'{' should be on the previous line.\");", "+                    log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+                        \"line.previous\", \"{\");", "-                log(aBrace.getLineNo(),", "-                    aBrace.getColumnNo(),", "-                    \"'{' should be on a new line.\");", "+                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+                    \"line.new\", \"{\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cdf56a6fff92a7436b04755352f3206", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "contrib/bcel/src/checkstyle/com/puppycrawl/tools/checkstyle/bcel/AbstractCheckVisitor.java", "commitBeforeChange": "65603924fdf47c194fc2ef9e0bc60bfc81ee4166", "commitAfterChange": "2707ab4393bd5a585f1f794c43515b8a1b900078", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "     protected void log(int aLine, int aCol, String aKey, Object[] aArgs)", "signatureAfterChange": "     protected void log(int aLine, int aCol, String aKey, Object[] aArgs)", "diff": ["+          // Ignore the column, it is not relevant for .class files", "+          log(aLine, aKey, aArgs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6230c64b65fa15550b711939b717b288", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "af52963008a800390e8b356db5811886572f37a3", "commitAfterChange": "3a5a73d5c110418f712f5a9a838c6b4106506fdd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testMissingBraces() throws Exception", "signatureAfterChange": "      @Test     public void testMissingBraces() throws Exception", "diff": ["-            \"12:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "-            \"15:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "-            \"21:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "-            \"34:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "-            \"51:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "-            \"69:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "-            \"105:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"12:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\", 1),", "+            \"15:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\", 5),", "+            \"21:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\", 5),", "+            \"34:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\", 5),", "+            \"51:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\", 5),", "+            \"69:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\", 5),", "+            \"105:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\", 5),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62690b361ebe00e5d3d39e396511ff42", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java", "commitBeforeChange": "af52963008a800390e8b356db5811886572f37a3", "commitAfterChange": "3a5a73d5c110418f712f5a9a838c6b4106506fdd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testForceLineBreakBefore2() throws Exception", "signatureAfterChange": "      @Test     public void testForceLineBreakBefore2() throws Exception", "diff": ["-            \"24:33: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\"),", "-            \"32:44: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\"),", "-            \"32:63: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\"),", "-            \"52:56: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\"),", "+            \"24:33: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\", 33),", "+            \"32:44: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\", 44),", "+            \"32:63: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\", 63),", "+            \"52:48: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\", 48),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62ce41832761df1a5a4581cfc5763e9f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "af52963008a800390e8b356db5811886572f37a3", "commitAfterChange": "3a5a73d5c110418f712f5a9a838c6b4106506fdd", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void testNLWithAnnotations() throws Exception", "signatureAfterChange": "      @Test     public void testNLWithAnnotations() throws Exception", "diff": ["-            \"35:34: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "-            \"38:41: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "-            \"44:27: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "-            \"66:32: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"35:34: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 34),", "+            \"38:41: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 41),", "+            \"44:27: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 27),", "+            \"66:32: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 32),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b70c367858cfa60229afed73b6c2442", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "af52963008a800390e8b356db5811886572f37a3", "commitAfterChange": "3a5a73d5c110418f712f5a9a838c6b4106506fdd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Test     public void testNL2() throws Exception", "signatureAfterChange": "      @Test     public void testNL2() throws Exception", "diff": ["-            \"14:39: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "-            \"21:20: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "-            \"34:31: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "-            \"43:24: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "-            \"56:35: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "-            \"60:24: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "-            \"74:20: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "-            \"87:31: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"14:39: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 39),", "+            \"21:20: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 20),", "+            \"34:31: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 31),", "+            \"43:24: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 24),", "+            \"56:35: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 35),", "+            \"60:24: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 24),", "+            \"74:20: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 20),", "+            \"87:31: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\", 31),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8004bd77f5f17e13653b09a6aba10300", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "accb0bf5bcca0213c55996af02cc42bbc22f313c", "commitAfterChange": "cd12de2a24713a494393912e2277b67770eb79fe", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST rootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-                                importGroup);", "+                                importGroup, nextGroup, fullImportIdent);", "-                            importGroup);", "+                            importGroup, currentGroup, fullImportIdent);", "-                log(importObject.getLineNumber(), MSG_LEX, fullImportIdent);", "+                log(importObject.getLineNumber(), MSG_LEX, fullImportIdent, previousImport);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f8d034e9904b8614101e5b097f897bc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlTest.java", "commitBeforeChange": "28c5d6f06244f45a5673a3ef5bd0d927b0042496", "commitAfterChange": "a5d30bf353dde01376d45fb031d9236b11a835d1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testCheckAccess()", "signatureAfterChange": "      public void testCheckAccess()", "diff": ["-        assertEquals(AccessResult.DISALLOWED, pcCommon", "-                .checkAccess(\"org.springframework.something\"));", "+        assertEquals(AccessResult.DISALLOWED, pcCommon.checkAccess(", "+                \"org.springframework.something\",", "+                \"com.kazgroup.courtlink.common\"));", "-                .checkAccess(\"org.apache.commons.something\"));", "-        assertEquals(AccessResult.DISALLOWED, pcCommon", "-                .checkAccess(\"org.apache.commons\"));", "-        assertEquals(AccessResult.ALLOWED, pcCommon", "-                .checkAccess(\"org.hibernate.something\"));", "-        assertEquals(AccessResult.DISALLOWED, pcCommon", "-                .checkAccess(\"com.badpackage.something\"));", "-        assertEquals(AccessResult.DISALLOWED, pcRoot", "-                .checkAccess(\"org.hibernate.something\"));", "+                .checkAccess(\"org.apache.commons.something\",", "+                        \"com.kazgroup.courtlink.common\"));", "+        assertEquals(AccessResult.DISALLOWED, pcCommon.checkAccess(", "+                \"org.apache.commons\", \"com.kazgroup.courtlink.common\"));", "+        assertEquals(AccessResult.ALLOWED, pcCommon.checkAccess(", "+                \"org.hibernate.something\", \"com.kazgroup.courtlink.common\"));", "+        assertEquals(AccessResult.DISALLOWED, pcCommon.checkAccess(", "+                \"com.badpackage.something\", \"com.kazgroup.courtlink.common\"));", "+        assertEquals(AccessResult.DISALLOWED, pcRoot.checkAccess(", "+                \"org.hibernate.something\", \"com.kazgroup.courtlink\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce89c9b37631e6df48fdcef23b5b1a2b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/ClassResolverTest.java", "commitBeforeChange": "6125beffc437f970eae276b4a6542265c6547784", "commitAfterChange": "1ac7fc3f8fc856547085bcc88e17fd1f4bbe0ddd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void testMisc() throws ClassNotFoundException", "signatureAfterChange": "     public void testMisc() throws ClassNotFoundException", "diff": ["-            cr.resolve(\"who.will.win.the.world.cup\");", "+            cr.resolve(\"who.will.win.the.world.cup\", \"\");", "-        cr.resolve(\"java.lang.String\");", "-        cr.resolve(\"StringBuffer\");", "-        cr.resolve(\"AppletContext\");", "+        cr.resolve(\"java.lang.String\", \"\");", "+        cr.resolve(\"StringBuffer\", \"\");", "+        cr.resolve(\"AppletContext\", \"\");", "-            cr.resolve(\"ChoiceFormat\");", "+            cr.resolve(\"ChoiceFormat\", \"\");", "-        cr.resolve(\"ChoiceFormat\");", "+        cr.resolve(\"ChoiceFormat\", \"\");", "-        cr.resolve(\"List\");", "+        cr.resolve(\"List\", \"\");", "-            cr.resolve(\"two.nil.england\");", "+            cr.resolve(\"two.nil.england\", \"\");"]}]}
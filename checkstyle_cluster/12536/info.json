{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f669be79a02abdd8c8de0c333a6f2903", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c908940307988cdd40fa78bc16f6074", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(final DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST ast)", "diff": ["-    public void visitToken(final DetailAST aAST)", "+    public void visitToken(final DetailAST ast)", "-        if (!mAllowClassImports && (TokenTypes.IMPORT == aAST.getType())) {", "-            final DetailAST startingDot = aAST.getFirstChild();", "+        if (!allowClassImports && (TokenTypes.IMPORT == ast.getType())) {", "+            final DetailAST startingDot = ast.getFirstChild();", "-        else if (!mAllowStaticMemberImports", "-            && (TokenTypes.STATIC_IMPORT == aAST.getType()))", "+        else if (!allowStaticMemberImports", "+            && (TokenTypes.STATIC_IMPORT == ast.getType()))", "-            final DetailAST startingDot = aAST.getFirstChild().getNextSibling();", "+            final DetailAST startingDot = ast.getFirstChild().getNextSibling();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e5d3f216369d1e252324b8c00fe4fe4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStarImportCheck.java", "commitBeforeChange": "2e50ca968c3edffa06a700d2585345181c238cd4", "commitAfterChange": "d9bd21f3f7e589bfce3177a654f38a2e33ddf375", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(final DetailAST aAST)", "diff": ["+", "+    @Override", "+    public void visitToken(final DetailAST aAST)", "+    {", "+        if (!mAllowClassImports", "+            && aAST.getType() == TokenTypes.IMPORT)", "+        {", "+            final DetailAST startingDot =", "+                aAST.getFirstChild();", "+            logsStarredImportViolation(startingDot, mExcludes);", "+        }", "+        else if (!mAllowStaticMemberImports", "+            && aAST.getType() == TokenTypes.STATIC_IMPORT)", "+        {", "+            //must navigate past the static keyword", "+            final DetailAST startingDot =", "+                aAST.getFirstChild().getNextSibling();", "+            logsStarredImportViolation(startingDot, mExcludes);", "+        }", "+    }", "-    @Override", "-    public void visitToken(DetailAST aAST)", "-        final FullIdent name = FullIdent.createFullIdentBelow(aAST);", "-        if ((name != null) && name.getText().endsWith(\".*\")) {", "-            boolean exempt = false;", "-            for (int i = 0; (i < mExcludes.length) && !exempt; i++) {", "-                if (name.getText().equals(mExcludes[i])) {", "-                    exempt = true;", "-                }", "-            }", "-            if (!exempt) {", "-                log(aAST.getLineNo(), \"import.avoidStar\", name.getText());"]}]}
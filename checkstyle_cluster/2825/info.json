{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "711d5cca22b13e3d873b13c6d332fa12", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d164ac565c8b931eea980e4d86b0e03f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "40bb6812631517615cfc45efeb5bdcc93b95a8ae", "commitAfterChange": "4287706cb4a0f7b8ab39bb6d5314b8b40841026a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            // get values of annotation", "-            List<String> values = null;", "-            final DetailAST lparenAST = ast.findFirstToken(TokenTypes.LPAREN);", "-            if (lparenAST != null) {", "-                final DetailAST nextAST = lparenAST.getNextSibling();", "-                if (nextAST != null) {", "-                    final int nextType = nextAST.getType();", "-                    switch (nextType) {", "-                        case TokenTypes.EXPR:", "-                        case TokenTypes.ANNOTATION_ARRAY_INIT:", "-                            values = getAnnotationValues(nextAST);", "-                            break;", "-", "-                        case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:", "-                            // expected children: IDENT ASSIGN ( EXPR |", "-                            // ANNOTATION_ARRAY_INIT )", "-                            values = getAnnotationValues(getNthChild(nextAST, 2));", "-                            break;", "-", "-                        case TokenTypes.RPAREN:", "-                            // no value present (not valid Java)", "-                            break;", "-", "-                        default:", "-                            // unknown annotation value type (new syntax?)", "-                    }", "-                }", "-            }", "+            final List<String> values = getAllAnnotationValues(ast);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f00df789c06bc19bc748ffb2e67e7012", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "ce4df1ec00d6eaa2547b9c1bdcbeec2b22f0fe0f", "commitAfterChange": "e8d0f037a2a300da55df6ab28d3459a6af9990d8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static List<String> getAllAnnotationValues(DetailAST ast)", "signatureAfterChange": "     private static List<String> getAllAnnotationValues(DetailAST ast)", "diff": ["-            if (nextAST != null) {", "-                final int nextType = nextAST.getType();", "-                switch (nextType) {", "-                    case TokenTypes.EXPR:", "-                    case TokenTypes.ANNOTATION_ARRAY_INIT:", "-                        values = getAnnotationValues(nextAST);", "-                        break;", "+            final int nextType = nextAST.getType();", "+            switch (nextType) {", "+                case TokenTypes.EXPR:", "+                case TokenTypes.ANNOTATION_ARRAY_INIT:", "+                    values = getAnnotationValues(nextAST);", "+                    break;", "-                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:", "-                        // expected children: IDENT ASSIGN ( EXPR |", "-                        // ANNOTATION_ARRAY_INIT )", "-                        values = getAnnotationValues(getNthChild(nextAST, 2));", "-                        break;", "+                case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:", "+                    // expected children: IDENT ASSIGN ( EXPR |", "+                    // ANNOTATION_ARRAY_INIT )", "+                    values = getAnnotationValues(getNthChild(nextAST, 2));", "+                    break;", "-                    case TokenTypes.RPAREN:", "-                        // no value present (not valid Java)", "-                        break;", "+                case TokenTypes.RPAREN:", "+                    // no value present (not valid Java)", "+                    break;", "-                    default:", "-                        // unknown annotation value type (new syntax?)", "-                }", "+                default:", "+                    // unknown annotation value type (new syntax?)", "+                    throw new IllegalArgumentException(\"Unexpected AST: \" + nextAST);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5a6230d785d6e7c1a841453b2234538", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea7ff0a3892c730bd174a1916058f0da", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/whitespace/InputEmptyTypesAndCycles.java", "commitBeforeChange": "bc8c9509f93a8f73a0059dcf5526b801d27a0b2a", "commitAfterChange": "ab50d42d93880d48c8aef9c88c37174bd941463f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@MapFeature.Require({ALLOWS_NULL_KEYS, ALLOWS_NULL_VALUES}) \tprivate void foo()", "signatureAfterChange": "  \t@MapFeature.Require({ALLOWS_NULL_KEYS, ALLOWS_NULL_VALUES}) \tprivate void foo()", "diff": ["+", "-\t\tfor (first = 0; first < len && matches(sequence.charAt(first)); first++) {}", "-\t\twhile (i = 1) {}", "+\t\tint len = 0;", "+\t\tString sequence = null;", "+\t\tfor (int first = 0; first < len && matches(sequence.charAt(first)); first++) {}", "+\t\twhile (i == 1) {}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4d5c66aa6381dd8c829e3df0169f751", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/XMLLoggerTest.java", "commitBeforeChange": "1079f0ab995bc25218f9e38af7968552f26a5df5", "commitAfterChange": "f45fee0aa4ba2f6f286c9e0336543c20e311a681", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testIsReference()         throws IOException", "signatureAfterChange": "      @Test     public void testIsReference()         throws IOException", "diff": ["-        final String[] reference = {", "+        final String[] references = {", "-        for (int i = 0; i < reference.length; i++) {", "-            assertTrue(\"reference: \" + reference[i],", "-                       XMLLogger.isReference(reference[i]));", "+        for (String reference : references) {", "+            assertTrue(\"reference: \" + reference,", "+                    XMLLogger.isReference(reference));", "-        final String[] noReference = {", "+        final String[] noReferences = {", "-        for (int i = 0; i < noReference.length; i++) {", "-            assertFalse(\"no reference: \" + noReference[i],", "-                       XMLLogger.isReference(noReference[i]));", "+        for (String noReference : noReferences) {", "+            assertFalse(\"no reference: \" + noReference,", "+                    XMLLogger.isReference(noReference));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9dbc5b62cd9ecbbde59194c08e871169", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5975e7430d14b52cf43d4f85af9b98a4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/gui/JTreeTable.java", "commitBeforeChange": "e21177aefee3694a53edd75b41c6c1760bf1301a", "commitAfterChange": "3bee3800f4c10f34f2bd0736cc09830a7f9eb6ab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public JTreeTable(TreeTableModel treeTableModel)", "signatureAfterChange": "      public JTreeTable(TreeTableModel treeTableModel)", "diff": ["+", "+        Action expand = new AbstractAction() {", "+                public void actionPerformed(ActionEvent e) {", "+                    TreePath selected = tree.getSelectionPath();", "+                    if (tree.isExpanded(selected)) {", "+                        tree.collapsePath(selected);", "+                    }", "+                    else {", "+                        tree.expandPath(selected);", "+                    }", "+                    tree.setSelectionPath(selected);", "+                }", "+            };", "+        KeyStroke stroke = KeyStroke.getKeyStroke(\"ENTER\");", "+        String command = \"expand/collapse\";", "+        getInputMap().put(stroke, command);", "+        getActionMap().put(command, expand);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afa4d454798192b0cb0da55898488ee6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/XDocsPagesTest.java", "commitBeforeChange": "1c5d01c3b48ab48fcfb0e7f3764e98d46727870e", "commitAfterChange": "e5d51331954f15890c08de2ae68f8791e7127180", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testAllCheckSections() throws Exception", "signatureAfterChange": "      @Test     public void testAllCheckSections() throws Exception", "diff": ["+            String lastSectioName = null;", "+                    Assert.assertNull(fileName + \" section '\" + sectionName + \"' should be first\",", "+                            lastSectioName);", "+                if (lastSectioName != null) {", "+                    Assert.assertTrue(", "+                            fileName + \" section '\" + sectionName", "+                                    + \"' is out of order compared to '\" + lastSectioName + \"'\",", "+                            sectionName.toLowerCase(Locale.ENGLISH).compareTo(", "+                                    lastSectioName.toLowerCase(Locale.ENGLISH)) >= 0);", "+                }", "+", "+                lastSectioName = sectionName;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47ea142b34153011311d50e689460c6c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26e7d3dd77cfe2d3317aba77e1f962a6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java", "commitBeforeChange": "a2ae6fa3a82abc0562772af74de80bee2f927cd8", "commitAfterChange": "d1a6a437100b26d4f3932472ca3241b3f4b05da2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private static boolean isCommentConsistent(String comment)", "signatureAfterChange": "      private static boolean isMultiLevelCommentConsistent(String comment             , int indentInComment, boolean isWarnComment)", "diff": ["+", "+    private static boolean isMultiLevelCommentConsistent(String comment", "+            , int indentInComment, boolean isWarnComment) {", "+        Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "+        multilevelMatch.matches();", "+        final String[] levels = multilevelMatch.group(1).split(\",\");", "+        final String indentInCommentStr = String.valueOf(indentInComment);", "+        final boolean containsActualLevel =", "+                Arrays.asList(levels).contains(indentInCommentStr);", "+", "+        return containsActualLevel && !isWarnComment", "+                || !containsActualLevel && isWarnComment;", "+    }", "-            final String[] levels = multilevelMatch.group(1).split(\",\");", "-            final String indentInCommentStr = String.valueOf(indentInComment);", "-            final boolean containsActualLevel =", "-                            Arrays.asList(levels).contains(indentInCommentStr);", "-", "-            return containsActualLevel && !isWarnComment", "-                    || !containsActualLevel && isWarnComment;", "-", "-        Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "-        if (singleLevelMatch.matches()) {", "-            final int expectedLevel = Integer.parseInt(singleLevelMatch.group(1));", "-", "-            return expectedLevel == indentInComment && !isWarnComment", "-                    || expectedLevel != indentInComment && isWarnComment;", "-", "-        Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);", "-        if (nonStrictLevelMatch.matches()) {", "-            final int expectedMinimalIndent = Integer.parseInt(nonStrictLevelMatch.group(1));", "-", "-            return indentInComment >= expectedMinimalIndent && !isWarnComment", "-                    || indentInComment < expectedMinimalIndent && isWarnComment;", "-        }", "-", "-        throw new IllegalArgumentException(\"Cannot determine if commit is consistent\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c91b164742c1006787446b8b8b7b522b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/DefaultLogger.java", "commitBeforeChange": "0db81f33e13f9829ee7de0b261f042017084b78f", "commitAfterChange": "70a6e2e6d34fa5a404e88e45cd62a20a06e19556", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     @Override     public void addError(AuditEvent event)", "signatureAfterChange": "     @Override     public void addError(AuditEvent event)", "diff": ["-", "-            final String fileName = event.getFileName();", "-            final String message = event.getMessage();", "-", "-            // avoid StringBuffer.expandCapacity", "-            final int bufLen = fileName.length() + message.length()", "-                + BUFFER_CUSHION;", "-            final StringBuilder sb = new StringBuilder(bufLen);", "-", "-            sb.append(fileName).append(':').append(event.getLine());", "-            if (event.getColumn() > 0) {", "-                sb.append(':').append(event.getColumn());", "-            }", "-            final String errorMessageSeparator = \": \";", "-            if (printSeverity) {", "-                sb.append(errorMessageSeparator).append(severityLevel.getName());", "-            }", "-            sb.append(errorMessageSeparator).append(message);", "-            errorWriter.println(sb);", "+            final String errorMessage = formatter.format(event);", "+            errorWriter.println(errorMessage);"]}]}
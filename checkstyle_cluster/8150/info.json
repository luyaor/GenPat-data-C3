{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0be1e5093d380eec04fb603ea6c359dc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10f5a94449a6f7d6eb8b518d2ff092ad", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/ConfigurationLoader.java", "commitBeforeChange": "730ade67d5f3f286c1004ce9a772fd4bc3bc9307", "commitAfterChange": "f8459eb6742402c5c33f7b80e4c5844998a258ac", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)             throws SAXException", "signatureAfterChange": "     public void startElement(String aNamespaceURI,                              String aLocalName,                              String aQName,                              Attributes aAtts)             throws SAXException", "diff": ["-            if (name == null) {", "-                throw new SAXException(\"missing config name\");", "-            }", "-                DefaultConfiguration top =", "+                final DefaultConfiguration top =", "-", "-            String value = aAtts.getValue(\"value\");", "-", "-            // expand properties", "-            if (mOverrideProps != null) {", "-                try {", "-                    value = Utils.replaceProperties(value, mOverrideProps);", "-                }", "-                catch (CheckstyleException ex) {", "-                    throw new SAXException(ex.getMessage());", "-                }", "+            final String value;", "+            try {", "+                value = Utils.replaceProperties(aAtts.getValue(\"value\"),", "+                                                mOverrideProps);", "+            }", "+            catch (CheckstyleException ex) {", "+                throw new SAXException(ex.getMessage());", "-            if (!mConfigStack.isEmpty()) {", "-                final DefaultConfiguration top =", "-                        (DefaultConfiguration) mConfigStack.peek();", "-                top.addAttribute(name, value);", "-            }", "-            else {", "-                throw new SAXException(", "-                            \"property \" + name + \"has no config parent\");", "-            }", "+            final DefaultConfiguration top =", "+                (DefaultConfiguration) mConfigStack.peek();", "+            top.addAttribute(name, value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7895fd2438bbac36cdf37f0692b68c2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/doclets/CheckDocsDoclet.java", "commitBeforeChange": "76e9e8ee631399e45f641c12a164dd140939db50", "commitAfterChange": "c4d8550b2e36a0ae7c5c410e62ca798980b45c5c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public static boolean start(RootDoc aRoot) throws IOException", "signatureAfterChange": "     public static boolean start(RootDoc aRoot) throws IOException", "diff": ["+        final Map allChecks = new TreeMap();", "+                allChecks.put(getCheckName(classDoc), page);", "+", "+        // TODO: close files in finally blocks", "+        final File checksIndexFile = new File(destDir, \"availablechecks.xml\");", "+        PrintWriter fileWriter = new PrintWriter(", "+                new FileWriter(checksIndexFile));", "+        writeXdocsHeader(fileWriter, \"Available Checks\");", "+", "+        fileWriter.println(\"<p>Checkstyle provides many checks that you can\"", "+                + \" apply to your sourcecode. Below is an alphabetical\"", "+                + \" reference, the site navigation menu provides a reference\"", "+                + \" organized by functionality.</p>\");", "+        fileWriter.println(\"<table>\");", "+", "+        for (Iterator it = allChecks.keySet().iterator(); it.hasNext();) {", "+            String checkName = (String) it.next();", "+            DocumentationPage page =", "+                    (DocumentationPage) allChecks.get(checkName);", "+            String descr = page.getDescription(checkName);", "+            fileWriter.println(\"<tr>\"", "+                    + \"<td><a href=\\\"\"", "+                    + \"config_\" + getPageName(page) + \".html#\" + checkName", "+                    + \"\\\">\" + checkName + \"</a></td><td>\"", "+                    + descr", "+                    + \"</td></tr>\");", "+        }", "+        fileWriter.println(\"</table>\");", "+        writeXdocsFooter(fileWriter);", "+        fileWriter.close();", "+"]}]}
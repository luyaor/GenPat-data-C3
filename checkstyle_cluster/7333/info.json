{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc88965f77905bfdee2b859bfac3c30e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27cc77f9ff09370be3e0d9a44fff3d49", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/ParameterAssignmentCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault()         throws Exception", "signatureAfterChange": "     @Test     public void testDefault()         throws Exception", "diff": ["-            \"9:15: Assignment of parameter 'field' is not allowed.\",", "-            \"10:15: Assignment of parameter 'field' is not allowed.\",", "-            \"12:14: Assignment of parameter 'field' is not allowed.\",", "-            \"20:30: Assignment of parameter 'field1' is not allowed.\",", "+            \"9:15: \" + getCheckMessage(MSG_KEY, \"field\"),", "+            \"10:15: \" + getCheckMessage(MSG_KEY, \"field\"),", "+            \"12:14: \" + getCheckMessage(MSG_KEY, \"field\"),", "+            \"20:30: \" + getCheckMessage(MSG_KEY, \"field1\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cbba3164fa222fdf2907d35db73304f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/AvoidStaticImportTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testMemberExcludes()         throws Exception", "signatureAfterChange": "      @Test     public void testMemberExcludes()         throws Exception", "diff": ["-            \"25: Using a static member import should be avoided - javax.swing.WindowConstants.*.\",", "-            \"26: Using a static member import should be avoided - javax.swing.WindowConstants.*.\",", "-            \"27: Using a static member import should be avoided - java.io.File.createTempFile.\",", "-            \"28: Using a static member import should be avoided - java.io.File.pathSeparator.\",", "+            \"25: \" + getCheckMessage(MSG_KEY, \"javax.swing.WindowConstants.*\"),", "+            \"26: \" + getCheckMessage(MSG_KEY, \"javax.swing.WindowConstants.*\"),", "+            \"27: \" + getCheckMessage(MSG_KEY, \"java.io.File.createTempFile\"),", "+            \"28: \" + getCheckMessage(MSG_KEY, \"java.io.File.pathSeparator\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "350f4a7e79cd5a72d8389c4a1508779d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void testNLWithAnnotations() throws Exception", "signatureAfterChange": "      @Test     public void testNLWithAnnotations() throws Exception", "diff": ["-            \"35:34: '{' should be on a new line.\",", "-            \"38:41: '{' should be on a new line.\",", "-            \"44:27: '{' should be on a new line.\",", "-            \"58:32: '{' should be on a new line.\",", "+            \"35:34: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"38:41: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"44:27: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"58:32: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7cd8266820b5c3e8e079c9b1979bec49", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Test     public void testNL3() throws Exception", "signatureAfterChange": "      @Test     public void testNL3() throws Exception", "diff": ["-            \"26:33: '{' should be on a new line.\",", "-            \"91:19: '{' should be on a new line.\",", "-            \"97:19: '{' should be on a new line.\",", "-            \"142:37: '{' should be on a new line.\",", "+            \"26:33: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"91:19: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"97:19: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),", "+            \"142:37: \" + getCheckMessage(MSG_KEY_LINE_NEW, \"{\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "852589d7bb2f0738ba6dd038d2e5a122", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Test     public void testAbove() throws Exception", "signatureAfterChange": "      @Test     public void testAbove() throws Exception", "diff": ["-            \"5: Wrong order for 'java.awt.Button.ABORT' import.\",", "-            \"8: Wrong order for 'java.awt.Dialog' import.\",", "-            \"13: Wrong order for 'java.io.File' import.\",", "-            \"14: Wrong order for 'java.io.File.createTempFile' import.\",", "+            \"5: \" + getCheckMessage(MSG_ORDERING, \"java.awt.Button.ABORT\"),", "+            \"8: \" + getCheckMessage(MSG_ORDERING, \"java.awt.Dialog\"),", "+            \"13: \" + getCheckMessage(MSG_ORDERING, \"java.io.File\"),", "+            \"14: \" + getCheckMessage(MSG_ORDERING, \"java.io.File.createTempFile\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98f509639b3830faf5717633818ab3c1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testMultipleTypes() throws Exception", "signatureAfterChange": "      @Test     public void testMultipleTypes() throws Exception", "diff": ["-            \"7:11: Catching 'RuntimeException' is not allowed.\",", "-            \"10:11: Catching 'RuntimeException' is not allowed.\",", "-            \"13:11: Catching 'RuntimeException' is not allowed.\",", "-            \"16:11: Catching 'RuntimeException' is not allowed.\",", "+            \"7:11: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),", "+            \"10:11: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),", "+            \"13:11: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),", "+            \"16:11: \" + getCheckMessage(MSG_KEY, \"RuntimeException\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "add0daa73160caac4ed7efa26561fd3d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalCatchCheckTest.java", "commitBeforeChange": "e912c46b5bb5c085323930bd1e500b180c1bea8d", "commitAfterChange": "27149f3504a2f350b74f456a9bffbae76a460060", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testIllegalClassNames() throws Exception", "signatureAfterChange": "      @Test     public void testIllegalClassNames() throws Exception", "diff": ["-            \"7:11: Catching 'Exception' is not allowed.\",", "-            \"8:11: Catching 'Throwable' is not allowed.\",", "-            \"15:11: Catching 'java.lang.Exception' is not allowed.\",", "-            \"16:11: Catching 'java.lang.Throwable' is not allowed.\",", "+            \"7:11: \" + getCheckMessage(MSG_KEY, \"Exception\"),", "+            \"8:11: \" + getCheckMessage(MSG_KEY, \"Throwable\"),", "+            \"15:11: \" + getCheckMessage(MSG_KEY, \"java.lang.Exception\"),", "+            \"16:11: \" + getCheckMessage(MSG_KEY, \"java.lang.Throwable\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5556166d1759066beff211a5a628bd2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void testForceLineBreakBefore2() throws Exception", "signatureAfterChange": "      @Test     public void testForceLineBreakBefore2() throws Exception", "diff": ["-            \"24:33: '}' should have line break before.\",", "-            \"32:44: '}' should have line break before.\",", "-            \"32:63: '}' should have line break before.\",", "-            \"52:56: '}' should have line break before.\",", "+            \"24:33: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\"),", "+            \"32:44: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\"),", "+            \"32:63: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\"),", "+            \"52:56: \" + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, \"}\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13b3adc63ca714a20a5b83255c00114", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheckTest.java", "commitBeforeChange": "a15fcb34fb0670b0603216dfca3c3c9e12d09727", "commitAfterChange": "2ea1a3dbab2b114cfc4d0baefda80590fbd3d6c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testDefault() throws Exception", "signatureAfterChange": "     @Test     public void testDefault() throws Exception", "diff": ["-            \"5: Wrong order for 'java.awt.Dialog' import.\",", "-            \"9: Wrong order for 'javax.swing.JComponent' import.\",", "-            \"11: Wrong order for 'java.io.File' import.\",", "-            \"13: Wrong order for 'java.io.IOException' import.\",", "+            \"5: \" + getCheckMessage(MSG_ORDERING, \"java.awt.Dialog\"),", "+            \"9: \" + getCheckMessage(MSG_ORDERING, \"javax.swing.JComponent\"),", "+            \"11: \" + getCheckMessage(MSG_ORDERING, \"java.io.File\"),", "+            \"13: \" + getCheckMessage(MSG_ORDERING, \"java.io.IOException\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dde0efe02a61279f2f65033ccb6cf5ed", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/TodoCommentCheckTest.java", "commitBeforeChange": "27149f3504a2f350b74f456a9bffbae76a460060", "commitAfterChange": "5ede09997c283b4c418f0f540848e006be04fa87", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void testIt() throws Exception", "signatureAfterChange": "     @Test     public void testIt() throws Exception", "diff": ["-            \"161: Comment matches to-do format 'FIXME:'.\",", "-            \"162: Comment matches to-do format 'FIXME:'.\",", "-            \"163: Comment matches to-do format 'FIXME:'.\",", "-            \"167: Comment matches to-do format 'FIXME:'.\",", "+            \"161: \" + getCheckMessage(MSG_KEY, \"FIXME:\"),", "+            \"162: \" + getCheckMessage(MSG_KEY, \"FIXME:\"),", "+            \"163: \" + getCheckMessage(MSG_KEY, \"FIXME:\"),", "+            \"167: \" + getCheckMessage(MSG_KEY, \"FIXME:\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e967d89dc3894f50a8b6adbf54f6191e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheckTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testAllowNoEmptyLineBetweenFields() throws Exception", "signatureAfterChange": "      @Test     public void testAllowNoEmptyLineBetweenFields() throws Exception", "diff": ["-            \"21: 'import' should be separated from previous statement.\",", "-            \"35: 'CLASS_DEF' should be separated from previous statement.\",", "-            \"39: 'STATIC_INIT' should be separated from previous statement.\",", "-            \"77: 'INTERFACE_DEF' should be separated from previous statement.\",", "+            \"21: \" + getCheckMessage(MSG_SHOULD_BE_SEPARATED, \"import\"),", "+            \"35: \" + getCheckMessage(MSG_SHOULD_BE_SEPARATED, \"CLASS_DEF\"),", "+            \"39: \" + getCheckMessage(MSG_SHOULD_BE_SEPARATED, \"STATIC_INIT\"),", "+            \"77: \" + getCheckMessage(MSG_SHOULD_BE_SEPARATED, \"INTERFACE_DEF\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f060de824c6c241e19c3923e6184a40a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoLineWrapCheckTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testCustomTokensLineWrapping()         throws Exception", "signatureAfterChange": "      @Test     public void testCustomTokensLineWrapping()         throws Exception", "diff": ["-            \"6: import statement should not be line-wrapped.\",", "-            \"10: CLASS_DEF statement should not be line-wrapped.\",", "-            \"13: METHOD_DEF statement should not be line-wrapped.\",", "-            \"20: ENUM_DEF statement should not be line-wrapped.\",", "+            \"6: \" + getCheckMessage(MSG_KEY, \"import\"),", "+            \"10: \" + getCheckMessage(MSG_KEY, \"CLASS_DEF\"),", "+            \"13: \" + getCheckMessage(MSG_KEY, \"METHOD_DEF\"),", "+            \"20: \" + getCheckMessage(MSG_KEY, \"ENUM_DEF\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2f118821a052efcfdfc0cb81111535f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/AbstractClassNameCheckTest.java", "commitBeforeChange": "545237e358cd5ec1492f128f500b345d0f1718a9", "commitAfterChange": "8ad4aebb66a1b90ac135e05f8062423028e3be8e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testIllegalClassType() throws Exception", "signatureAfterChange": "      @Test     public void testIllegalClassType() throws Exception", "diff": ["-            \"26:1: Class 'AbstractClass' must be declared as 'abstract'.\",", "-            \"29:1: Class 'Class1Factory' must be declared as 'abstract'.\",", "-            \"33:5: Class 'AbstractInnerClass' must be declared as 'abstract'.\",", "-            \"38:5: Class 'WellNamedFactory' must be declared as 'abstract'.\",", "+            \"26:1: \" + getCheckMessage(NO_ABSTRACT_CLASS_MODIFIER, \"AbstractClass\"),", "+            \"29:1: \" + getCheckMessage(NO_ABSTRACT_CLASS_MODIFIER, \"Class1Factory\"),", "+            \"33:5: \" + getCheckMessage(NO_ABSTRACT_CLASS_MODIFIER, \"AbstractInnerClass\"),", "+            \"38:5: \" + getCheckMessage(NO_ABSTRACT_CLASS_MODIFIER, \"WellNamedFactory\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f421caa1aaac79b481ddfe7d91e3b4ca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyBlockCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void allowEmptyLoopsText() throws Exception", "signatureAfterChange": "      @Test     public void allowEmptyLoopsText() throws Exception", "diff": ["-            \"16:29: Empty if block.\",", "-            \"19:42: Empty if block.\",", "-            \"22:29: Empty if block.\",", "-            \"23:28: Empty switch block.\",", "+            \"16:29: \" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, \"if\"),", "+            \"19:42: \" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, \"if\"),", "+            \"22:29: \" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, \"if\"),", "+            \"23:28: \" + getCheckMessage(MSG_KEY_BLOCK_EMPTY, \"switch\"),"]}]}
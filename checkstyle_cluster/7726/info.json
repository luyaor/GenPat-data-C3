{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4eaa3b1dc99da9024664974e294edded", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08942436f9820b5f5c2933f889c763ce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/design/FinalClassCheck.java", "commitBeforeChange": "476f90c5d38c6cc2b3ed6776ad4a3120ea627338", "commitAfterChange": "5c3762cef2a69a10241801916a815f9066bca5f8", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            final boolean isFinal =", "-                (modifiers != null)", "+            final boolean isFinal = (modifiers != null)", "-            mClasses.push(new ClassDesc(isFinal));", "+            final boolean isAbstract = (modifiers != null)", "+                    && modifiers.branchContains(TokenTypes.ABSTRACT);", "+            mClasses.push(new ClassDesc(isFinal, isAbstract));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31bb3b31d52336bf3718ee29bf758618", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/ReturnCountCheck.java", "commitBeforeChange": "4a1fc903352ce5a849ab05c556a6fe3ad6b01226", "commitAfterChange": "6bfb6b7b1a711e3bea8ac47e81045794460c877c", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void visitMethodDef(DetailAST aAST)", "signatureAfterChange": "     private void visitMethodDef(DetailAST aAST)", "diff": ["-        mContext = new Context(!CheckUtils.isEqualsMethod(aAST));", "+        DetailAST methodNameAST = aAST.findFirstToken(TokenTypes.IDENT);", "+        mContext = new Context(!getRegexp().match(methodNameAST.getText()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "904fc7ffbe64ced05b03ffe89187214b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "a9884dffcebb9a8278f63c631db8a06c71690cc5", "commitAfterChange": "e7c7215349aa8131789bd0ab1b0901541fc4ce8c", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["-                        reqd = !RuntimeException.class.isAssignableFrom(", "-                            cr.resolve(tag.getArg1()));", "+                        final Class clazz = cr.resolve(tag.getArg1());", "+                        reqd = !RuntimeException.class.isAssignableFrom(clazz)", "+                            && !Error.class.isAssignableFrom(clazz);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e192bbbf5f9844131631324d5fcd6bd0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/FinalParametersCheck.java", "commitBeforeChange": "79f61c20a831c4b2e6440689d625128270567a3a", "commitAfterChange": "2af259b791c8655a2b9862099763f860d3d7ae42", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private void visitMethod(final DetailAST aMethod)", "signatureAfterChange": "     private void visitMethod(final DetailAST aMethod)", "diff": ["+        // ignore abstract method", "+        final DetailAST modifiers =", "+            aMethod.findFirstToken(TokenTypes.MODIFIERS);", "+        if (modifiers.branchContains(TokenTypes.ABSTRACT)) {", "+            return;", "+        }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "feb563d9a74d8d74995c1e976a5970d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/ModifiedControlVariableCheck.java", "commitBeforeChange": "52a0d103606992f9a3a43c3425fab88eae1ed150", "commitAfterChange": "d80e678fa0939d845583a3acc7501859254c5f2c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "       @Override     public void leaveToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void leaveToken(DetailAST ast)", "diff": ["-", "-                leaveForEach(ast);", "+                final DetailAST paramDef =", "+                    ast.findFirstToken(TokenTypes.VARIABLE_DEF);", "+                if (shouldCheckEnhancedForLoopVariable(paramDef)) {", "+                    leaveForEach(paramDef);", "+                }", "-                leaveForDef(ast);", "+                if (!getCurrentVariables().isEmpty()) {", "+                    leaveForDef(ast);", "+                }"]}]}
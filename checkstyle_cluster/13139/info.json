{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb75572037be878377023978c6060bdc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05be7f6092edaed2fddda1b642548c65", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/naming/MemberNameCheck.java", "commitBeforeChange": "19d385d84afcd37dcb1ad6a18f631eebb0d617a4", "commitAfterChange": "2bf724effc3c43a43fbe254dd81985f618be8eee", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     protected final boolean mustCheckName(DetailAST aAST)", "signatureAfterChange": "      @Override     protected final boolean mustCheckName(DetailAST aAST)", "diff": ["-            && (modifiersAST != null)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13894fee5491da2eff60615059cfc147", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/filters/FilterSetTest.java", "commitBeforeChange": "5ca472faa6ccc8a70690052528f00d0e3e75bffd", "commitAfterChange": "eb31210db6d680a80c7538251f989adf3adb9e3e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void testEmptyChain()", "signatureAfterChange": "      @Test     public void testEmptyChain()", "diff": ["-        assertFalse(\"0\", filter.accept(Integer.valueOf(0)));", "+        assertFalse(\"0\", filter.accept(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bf0c263c3b89435003f1119128af361", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java", "commitBeforeChange": "791036b2f1597a793222ee500f6deec50f379111", "commitAfterChange": "9988d4d007b7d7b1417efc1e06de9309cb7c3e54", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     static boolean areOnSameLine(DetailAST ast1, DetailAST ast2)", "signatureAfterChange": "     static boolean areOnSameLine(DetailAST ast1, DetailAST ast2)", "diff": ["-        return ast1 != null && ast2 != null", "-            && ast1.getLineNo() == ast2.getLineNo();", "+        return ast1.getLineNo() == ast2.getLineNo();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d6af2e1864796344acc4d1bd2398194", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/JavadocMethodCheck.java", "commitBeforeChange": "e7556f4af60fa1602c1b74289c6c64e1a83e4235", "commitAfterChange": "5fc3ff2bfbed94f88e1af95f38e970a832e4dbe6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["-                    final ClassResolver cr = new ClassResolver(", "-                        Thread.currentThread().getContextClassLoader(),", "-                        mPackageFullIdent.getText(), mImports);", "+                    final ClassResolver cr =", "+                        new ClassResolver(", "+                            getClassLoader(),", "+                            mPackageFullIdent.getText(),", "+                            mImports);", "-                        reqd = !RuntimeException.class.isAssignableFrom(clazz)", "-                            && !Error.class.isAssignableFrom(clazz);", "+                        reqd =", "+                            !RuntimeException.class.isAssignableFrom(clazz)", "+                                && !Error.class.isAssignableFrom(clazz);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f8c00be39e6e0be87525a86079b7f38", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "e1613910f30cc63de1393ed897aa766932e1d973", "commitAfterChange": "e56f3d21ee1a0e8c0eced70ec7990fb03dcb3215", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 19, "signatureBeforeChange": "     protected boolean isMissingJavadocAllowed(final DetailAST aAST)", "signatureAfterChange": "     protected boolean isMissingJavadocAllowed(final DetailAST aAST)", "diff": ["-        return mAllowMissingJavadoc || isOverrideMethod(aAST)", "+        return mAllowMissingJavadoc"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba53474705cc1c5615fc6ebd846659bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheck.java", "commitBeforeChange": "d27384e31de3ddc59b429561554b32e2a0c4fe05", "commitAfterChange": "8f12d2b92568c8fca42dfbd26f3d1f0b17100a7b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Override     public void finishTree(DetailAST rootAST)", "signatureAfterChange": "      @Override     public void finishTree(DetailAST rootAST)", "diff": ["-                        if (separateLineBetweenGroups && previousImport != null", "+                        if (separateLineBetweenGroups"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4081ecaac70fc9724256efabef73246", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "e40d9f41cf066f205e3c0ffd1b99a6e37d4963d9", "commitAfterChange": "2ff20f4af36062db07fa245ab6b3a1d8ab2fe16c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private NavigableMap<Integer, DetailAST> collectFirstNodes()", "signatureAfterChange": "     private NavigableMap<Integer, DetailAST> collectFirstNodes()", "diff": ["-                        || firstTokenOnLine != null", "-                        && firstTokenOnLine.getColumnNo() >= curNode.getColumnNo()) {", "+                    || firstTokenOnLine.getColumnNo() >= curNode.getColumnNo()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb9997f7e2c65e89c8643c637c7f79d2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalTokenTextCheckTest.java", "commitBeforeChange": "be3e035ce39a610881cd2c1bfdce3eef101c2e3c", "commitAfterChange": "7d5db23ad528c95e0fbdfcd1293424c6240db07b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testCustomMessage()         throws Exception", "signatureAfterChange": "      @Test     public void testCustomMessage()         throws Exception", "diff": ["-            \"24:28: \" + MessageFormat.format(customMessage, \"a href\"),", "+            \"24:28: \" + customMessage,"]}]}
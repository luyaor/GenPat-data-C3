{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5dd5836ea057ed74e82d4a1f5906400", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1219f59c6e23fa05e2f6b93f2603c5eb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String aClassName)", "signatureAfterChange": "     private String getIllegalInstantiation(String className)", "diff": ["-    private String getIllegalInstantiation(String aClassName)", "+    private String getIllegalInstantiation(String className)", "-        final String javaLang = \"java.lang.\";", "+        final String javlang = \"java.lang.\";", "-        if (mIllegalClasses.contains(aClassName)) {", "-            return aClassName;", "+        if (illegalClasses.contains(className)) {", "+            return className;", "-        final int clsNameLen = aClassName.length();", "-        final int pkgNameLen = (mPkgName == null) ? 0 : mPkgName.length();", "+        final int clsNameLen = className.length();", "+        final int pkgNameLen = (pkgName == null) ? 0 : pkgName.length();", "-        for (String illegal : mIllegalClasses) {", "+        for (String illegal : illegalClasses) {", "-            if (((illegalLen - javaLang.length()) == clsNameLen)", "-                && illegal.endsWith(aClassName)", "-                && illegal.startsWith(javaLang))", "+            if (((illegalLen - javlang.length()) == clsNameLen)", "+                && illegal.endsWith(className)", "+                && illegal.startsWith(javlang))", "-                final boolean isSameFile = mClassNames.contains(aClassName);", "+                final boolean isSameFile = classNames.contains(className);", "-                        final String fqName = mPkgName + \".\" + aClassName;", "+                        final String fqName = pkgName + \".\" + className;", "-            // the toplevel package (mPkgName == null) is covered by the", "-            // \"illegalInsts.contains(aClassName)\" check above", "+            // the toplevel package (pkgName == null) is covered by the", "+            // \"illegalInsts.contains(className)\" check above", "-            // illegal.equals(mPkgName + \".\" + aClassName)", "-            if ((mPkgName != null)", "+            // illegal.equals(pkgName + \".\" + className)", "+            if ((pkgName != null)", "-                && illegal.endsWith(aClassName)", "-                && illegal.startsWith(mPkgName))", "+                && illegal.endsWith(className)", "+                && illegal.startsWith(pkgName))", "-            for (FullIdent importLineText : mImports) {", "+            for (FullIdent importLineText : imports) {", "-                        + aClassName;", "+                        + className;", "-                    if (mIllegalClasses.contains(fqClass)) {", "+                    if (illegalClasses.contains(fqClass)) {", "-                    if (Utils.baseClassname(importArg).equals(aClassName)", "-                        && mIllegalClasses.contains(importArg))", "+                    if (Utils.baseClassname(importArg).equals(className)", "+                        && illegalClasses.contains(importArg))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1e7811e8f6b51356d133fae773432d9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "3c99349a8403f878ea4e3d1295b700db8c1cbe67", "commitAfterChange": "d64bdf0caa867be3913f2665ef4fcc654524937e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String className)", "signatureAfterChange": "     private String getIllegalInstantiation(String className)", "diff": ["+", "-", "-            // class from java.lang", "-            if (illegalLen - JAVA_LANG.length() == clsNameLen", "-                && illegal.endsWith(className)", "-                && illegal.startsWith(JAVA_LANG)) {", "-                // java.lang needs no import, but a class without import might", "-                // also come from the same file or be in the same package.", "-                // E.g. if a class defines an inner class \"Boolean\",", "-                // the expression \"new Boolean()\" refers to that class,", "-                // not to java.lang.Boolean", "-", "-                final boolean isSameFile = classNames.contains(className);", "-", "-                boolean isSamePackage = false;", "-                try {", "-                    final ClassLoader classLoader = getClassLoader();", "-                    if (classLoader != null) {", "-                        final String fqName = pkgName + \".\" + className;", "-                        classLoader.loadClass(fqName);", "-                        // no ClassNotFoundException, fqName is a known class", "-                        isSamePackage = true;", "-                    }", "-                }", "-                catch (final ClassNotFoundException ex) {", "-                    // not a class from the same package", "-                    isSamePackage = false;", "-                }", "-", "-                if (!(isSameFile || isSamePackage)) {", "-                    return illegal;", "-                }", "-            }", "-", "-            // class from same package", "-", "-            // the toplevel package (pkgName == null) is covered by the", "-            // \"illegalInsts.contains(className)\" check above", "-", "-            // the test is the \"no garbage\" version of", "-            // illegal.equals(pkgName + \".\" + className)", "-            if (pkgName != null", "-                && clsNameLen == illegalLen - pkgNameLen - 1", "-                && illegal.charAt(pkgNameLen) == '.'", "-                && illegal.endsWith(className)", "-                && illegal.startsWith(pkgName)) {", "+            if (isStandardClass(className, clsNameLen, illegal, illegalLen)) {", "-            // import statements", "-            for (FullIdent importLineText : imports) {", "-                final String importArg = importLineText.getText();", "-                if (importArg.endsWith(\".*\")) {", "-                    final String fqClass =", "-                        importArg.substring(0, importArg.length() - 1)", "-                        + className;", "-                    // assume that illegalInsts only contain existing classes", "-                    // or else we might create a false alarm here", "-                    if (illegalClasses.contains(fqClass)) {", "-                        return fqClass;", "-                    }", "+            if (isSamePackage(className, clsNameLen, pkgNameLen, illegal, illegalLen)) {", "+                return illegal;", "+            }", "+            final String importArg = checkImportStatements(className);", "+            if (importArg != null) {", "+                return importArg;", "+            }", "+        }", "+        return null;", "+    }", "-                else {", "-                    if (Utils.baseClassname(importArg).equals(className)", "-                        && illegalClasses.contains(importArg)) {", "-                        return importArg;", "-                    }"]}]}
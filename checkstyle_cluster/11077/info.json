{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "509f0c904fe0e27bdc5aa462db75d102", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fb94a86a4dd7d504d27bee3544e598e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ExpressionHandler getHandler(IndentationCheck aIndentCheck,         DetailAST aAst, ExpressionHandler aParent)", "signatureAfterChange": "     public ExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, ExpressionHandler parent)", "diff": ["-    public ExpressionHandler getHandler(IndentationCheck aIndentCheck,", "-        DetailAST aAst, ExpressionHandler aParent)", "+    public ExpressionHandler getHandler(IndentationCheck indentCheck,", "+        DetailAST ast, ExpressionHandler parent)", "-            mCreatedHandlers.get(aAst);", "+            createdHandlers.get(ast);", "-        if (aAst.getType() == TokenTypes.METHOD_CALL) {", "-            return createMethodCallHandler(aIndentCheck, aAst, aParent);", "+        if (ast.getType() == TokenTypes.METHOD_CALL) {", "+            return createMethodCallHandler(indentCheck, ast, parent);", "-                mTypeHandlers.get(aAst.getType());", "+                typeHandlers.get(ast.getType());", "-                        aIndentCheck, aAst, aParent);", "+                        indentCheck, ast, parent);", "-            LOG.debug(\"couldn't instantiate constructor for \" + aAst, e);", "+            LOG.debug(\"couldn't instantiate constructor for \" + ast, e);", "-                                       + aAst);", "+                                       + ast);", "-            LOG.debug(\"couldn't access constructor for \" + aAst, e);", "+            LOG.debug(\"couldn't access constructor for \" + ast, e);", "-                                       + aAst);", "+                                       + ast);", "-            LOG.debug(\"couldn't instantiate constructor for \" + aAst, e);", "+            LOG.debug(\"couldn't instantiate constructor for \" + ast, e);", "-                                       + aAst);", "+                                       + ast);", "-            throw new RuntimeException(\"no handler for type \" + aAst.getType());", "+            throw new RuntimeException(\"no handler for type \" + ast.getType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38ed44462f8fbed8a9d0f1f57007a64e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (aAST.getType() == TokenTypes.PACKAGE_DEF) {", "-            mPkgName = FullIdent.createFullIdent(", "-                    aAST.getLastChild().getPreviousSibling()).getText();", "+        if (ast.getType() == TokenTypes.PACKAGE_DEF) {", "+            pkgName = FullIdent.createFullIdent(", "+                    ast.getLastChild().getPreviousSibling()).getText();", "-        else if (aAST.getType() == TokenTypes.IMPORT) {", "-            final FullIdent imp = FullIdent.createFullIdentBelow(aAST);", "+        else if (ast.getType() == TokenTypes.IMPORT) {", "+            final FullIdent imp = FullIdent.createFullIdentBelow(ast);", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.lang\",", "+                log(ast.getLineNo(), ast.getColumnNo(), \"import.lang\",", "-            else if (fromPackage(imp.getText(), mPkgName)) {", "-                log(aAST.getLineNo(), aAST.getColumnNo(), \"import.same\",", "+            else if (fromPackage(imp.getText(), pkgName)) {", "+                log(ast.getLineNo(), ast.getColumnNo(), \"import.same\",", "-            for (FullIdent full : mImports) {", "+            for (FullIdent full : imports) {", "-                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+                    log(ast.getLineNo(), ast.getColumnNo(),", "-            mImports.add(imp);", "+            imports.add(imp);", "-                    aAST.getLastChild().getPreviousSibling());", "-            for (FullIdent full : mStaticImports) {", "+                    ast.getLastChild().getPreviousSibling());", "+            for (FullIdent full : staticImports) {", "-                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+                    log(ast.getLineNo(), ast.getColumnNo(),", "-            mStaticImports.add(imp);", "+            staticImports.add(imp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ea1d7dad236c4f4ca0484c66070f35a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        switch (aAST.getType()) {", "+        switch (ast.getType()) {", "-            lcurly = aAST.getFirstChild();", "+            lcurly = ast.getFirstChild();", "-            nextToken = aAST.getNextSibling();", "-            lcurly = aAST.getLastChild();", "+            nextToken = ast.getNextSibling();", "+            lcurly = ast.getLastChild();", "-                nextToken = getNextToken(aAST);", "+                nextToken = getNextToken(ast);", "-            nextToken = aAST.findFirstToken(TokenTypes.LITERAL_ELSE);", "+            nextToken = ast.findFirstToken(TokenTypes.LITERAL_ELSE);", "-                nextToken = getNextToken(aAST);", "-                lcurly = aAST.getLastChild();", "+                nextToken = getNextToken(ast);", "+                lcurly = ast.getLastChild();", "-            nextToken = getNextToken(aAST);", "-            lcurly = aAST.getFirstChild();", "+            nextToken = getNextToken(ast);", "+            lcurly = ast.getFirstChild();", "-            nextToken = getNextToken(aAST);", "-            lcurly = aAST.getFirstChild();", "+            nextToken = getNextToken(ast);", "+            lcurly = ast.getFirstChild();", "-            final DetailAST child = aAST.getLastChild();", "+            final DetailAST child = ast.getLastChild();", "-            nextToken = aAST;", "+            nextToken = ast;", "-            lcurly = aAST.findFirstToken(TokenTypes.SLIST);", "+            lcurly = ast.findFirstToken(TokenTypes.SLIST);", "-            nextToken = aAST;", "+            nextToken = ast;", "-            lcurly = aAST.findFirstToken(TokenTypes.SLIST);", "+            lcurly = ast.findFirstToken(TokenTypes.SLIST);", "-            nextToken = aAST;", "+            nextToken = ast;", "-                    + TokenTypes.getTokenName(aAST.getType()) + \")\");", "+                    + TokenTypes.getTokenName(ast.getType()) + \")\");", "-        if (!mShouldStartLine) {", "+        if (!shouldStartLine) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a228f3f7e2451477d9751a7fc245befa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        final int currentType = aAST.getType();", "-        final int parentType = aAST.getParent().getType();", "+        final int currentType = ast.getType();", "+        final int parentType = ast.getParent().getType();", "-                && this.mIgnoreEnhancedForColon)", "+                && this.ignoreEnhancedForColon)", "-        if (isEmptyMethodBlock(aAST, parentType)", "-                || isEmptyCtorBlock(aAST, parentType)", "-                || isEmptyLoop(aAST, parentType))", "+        if (isEmptyMethodBlock(ast, parentType)", "+                || isEmptyCtorBlock(ast, parentType)", "+                || isEmptyLoop(ast, parentType))", "-        if (mAllowEmptyTypes && (isEmptyType(aAST, parentType))) {", "+        if (allowEmptyTypes && (isEmptyType(ast, parentType))) {", "-        final String line = getLine(aAST.getLineNo() - 1);", "-        final int before = aAST.getColumnNo() - 1;", "-        final int after = aAST.getColumnNo() + aAST.getText().length();", "+        final String line = getLine(ast.getLineNo() - 1);", "+        final int before = ast.getColumnNo() - 1;", "+        final int after = ast.getColumnNo() + ast.getText().length();", "-            log(aAST.getLineNo(), aAST.getColumnNo(),", "-                    \"ws.notPreceded\", aAST.getText());", "+            log(ast.getLineNo(), ast.getColumnNo(),", "+                    \"ws.notPreceded\", ast.getText());", "-                && (aAST.getFirstChild().getType() == TokenTypes.SEMI))", "+                && (ast.getFirstChild().getType() == TokenTypes.SEMI))", "-            log(aAST.getLineNo(), aAST.getColumnNo() + aAST.getText().length(),", "-                    \"ws.notFollowed\", aAST.getText());", "+            log(ast.getLineNo(), ast.getColumnNo() + ast.getText().length(),", "+                    \"ws.notFollowed\", ast.getText());"]}]}
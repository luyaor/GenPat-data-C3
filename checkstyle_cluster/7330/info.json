{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0304449152a2f34f669ae2180d72891b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51ff8c724ca63046f7a673056ea1376d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1c7341013d0e8a34498eb49ccdb4e91419f13280", "commitAfterChange": "cd89321522d9bf7fc10547e743fb8bbb4c993791", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     protected boolean isSubclass(FullIdent aChild, FullIdent aParent)", "signatureAfterChange": "     protected boolean isSubclass(Class aChild, Class aParent)", "diff": ["-    protected boolean isSubclass(FullIdent aChild, FullIdent aParent)", "+    protected boolean isSubclass(Class aChild, Class aParent)", "-        final ClassResolver cr = getClassResolver();", "-        try {", "-            final Class childClass = cr.resolve(aChild.getText());", "-            try {", "-                final Class parentClass = cr.resolve(aParent.getText());", "-                return parentClass.isAssignableFrom(childClass);", "-            }", "-            catch (ClassNotFoundException e) {", "-                log(aChild.getLineNo(), aChild.getColumnNo(),", "-                    \"redundant.throws.classInfo\",", "-                    aParent.getText());", "-            }", "-        }", "-        catch (ClassNotFoundException e) {", "-            log(aChild.getLineNo(), aChild.getColumnNo(),", "-                \"redundant.throws.classInfo\",", "-                aChild.getText());", "-        }", "-", "-        return true;", "+        return (aParent != null) && (aChild != null)", "+            &&  aParent.isAssignableFrom(aChild);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8def032bef408c9e62ae9d3557bb11ca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "1c7341013d0e8a34498eb49ccdb4e91419f13280", "commitAfterChange": "cd89321522d9bf7fc10547e743fb8bbb4c993791", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected boolean isUnchecked(FullIdent aException)", "signatureAfterChange": "     protected boolean isUnchecked(Class aException)", "diff": ["-    protected boolean isUnchecked(FullIdent aException)", "+    protected boolean isUnchecked(Class aException)", "-        final ClassResolver cr = getClassResolver();", "-        try {", "-            final Class clazz = cr.resolve(aException.getText());", "-            return (RuntimeException.class.isAssignableFrom(clazz)", "-                    || Error.class.isAssignableFrom(clazz));", "-        }", "-        catch (ClassNotFoundException e) {", "-            log(aException.getLineNo(), aException.getColumnNo(),", "-                \"redundant.throws.classInfo\",", "-                aException.getText());", "-        }", "-", "-        // return false to prefent from additional errors", "-        return false;", "+        return isSubclass(aException, RuntimeException.class)", "+            || isSubclass(aException, Error.class);"]}]}
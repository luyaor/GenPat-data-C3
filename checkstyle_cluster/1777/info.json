{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae929b867884de08f25ef38e0eca1baa", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "887a896964514caf16c068d5e3963ab8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "01d27913a71c29d6a769ed98ca7dd4ba01fe31eb", "commitAfterChange": "4cbd709c019cf1b69796858506d673f7b66d37c7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public int[] getDefaultTokens()", "signatureAfterChange": "     public int[] getDefaultTokens()", "diff": ["-            RCURLY,            // '}'", "-            QUESTION,          // '?'", "-            COLON,             // ':' TODO: dont flag after \"case\"", "-            ASSIGN,            // '='", "-            EQUAL,             // \"==\"", "-            NOT_EQUAL,         // \"!=\"", "-            DIV,               // '/'", "-            DIV_ASSIGN,        // \"/=\"", "-            PLUS,              //' +' (unaray plus is UNARY_PLUS)", "-            PLUS_ASSIGN,       // \"+=\"", "-            MINUS,             // '-' (unary minus is UNARY_MINUS)", "-            MINUS_ASSIGN,      //\"-=\"", "-            STAR,              // '*'", "-            STAR_ASSIGN,       // \"*=\"", "-            MOD,               // '%'", "-            MOD_ASSIGN,        // \"%=\"", "-            SR,                // \">>\"", "-            SR_ASSIGN,         // \">>=\"", "-            BSR,               // \">>>\"", "-            BSR_ASSIGN,        // \">>>=\"", "-            GE,                // \">=\"", "-            GT,                // \">\"", "-            SL,                // \"<<\"", "-            SL_ASSIGN,         // \"<<=\"", "-            LE,                // \"<=\"", "-            LT,                // '<'", "-            BXOR,              // '^'", "-            BXOR_ASSIGN,       // \"^=\"", "-            BOR,               // '|'", "-            BOR_ASSIGN,        // \"|=\"", "-            LOR,               // \"||\"", "-            BAND,              // '&'", "-            BAND_ASSIGN,       // \"&=\"", "-            LAND,              // \"&&\"", "-            LITERAL_catch,", "-            LITERAL_do,", "-            LITERAL_else,", "-            LITERAL_finally,", "-            LITERAL_for,", "-            LITERAL_if,", "-            LITERAL_return,", "-            LITERAL_synchronized,", "-            LITERAL_try,", "-            LITERAL_while,", "-            ASSERT                // TODO: why is it not LITERAL_assert?", "+            TokenTypes.RCURLY,            // '}'", "+            TokenTypes.QUESTION,          // '?'", "+            TokenTypes.COLON,             // ':' TODO: dont flag after \"case\"", "+            TokenTypes.ASSIGN,            // '='", "+            TokenTypes.EQUAL,             // \"==\"", "+            TokenTypes.NOT_EQUAL,         // \"!=\"", "+            TokenTypes.DIV,               // '/'", "+            TokenTypes.DIV_ASSIGN,        // \"/=\"", "+            TokenTypes.PLUS,              //' +' (unaray plus is UNARY_PLUS)", "+            TokenTypes.PLUS_ASSIGN,       // \"+=\"", "+            TokenTypes.MINUS,             // '-' (unary minus is UNARY_MINUS)", "+            TokenTypes.MINUS_ASSIGN,      //\"-=\"", "+            TokenTypes.STAR,              // '*'", "+            TokenTypes.STAR_ASSIGN,       // \"*=\"", "+            TokenTypes.MOD,               // '%'", "+            TokenTypes.MOD_ASSIGN,        // \"%=\"", "+            TokenTypes.SR,                // \">>\"", "+            TokenTypes.SR_ASSIGN,         // \">>=\"", "+            TokenTypes.BSR,               // \">>>\"", "+            TokenTypes.BSR_ASSIGN,        // \">>>=\"", "+            TokenTypes.GE,                // \">=\"", "+            TokenTypes.GT,                // \">\"", "+            TokenTypes.SL,                // \"<<\"", "+            TokenTypes.SL_ASSIGN,         // \"<<=\"", "+            TokenTypes.LE,                // \"<=\"", "+            TokenTypes.LT,                // '<'", "+            TokenTypes.BXOR,              // '^'", "+            TokenTypes.BXOR_ASSIGN,       // \"^=\"", "+            TokenTypes.BOR,               // '|'", "+            TokenTypes.BOR_ASSIGN,        // \"|=\"", "+            TokenTypes.LOR,               // \"||\"", "+            TokenTypes.BAND,              // '&'", "+            TokenTypes.BAND_ASSIGN,       // \"&=\"", "+            TokenTypes.LAND,              // \"&&\"", "+            TokenTypes.LITERAL_CATCH,", "+            TokenTypes.LITERAL_DO,", "+            TokenTypes.LITERAL_ELSE,", "+            TokenTypes.LITERAL_FINALLY,", "+            TokenTypes.LITERAL_FOR,", "+            TokenTypes.LITERAL_IF,", "+            TokenTypes.LITERAL_RETURN,", "+            TokenTypes.LITERAL_SYNCHRONIZED,", "+            TokenTypes.LITERAL_TRY,", "+            TokenTypes.LITERAL_WHILE,", "+            TokenTypes.ASSERT     // TODO: why is it not LITERAL_assert?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0ae6a907d6ae9a48887acf5c98aacbe", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Configuration.java", "commitBeforeChange": "4065b439221c56ab2a11f97cb50c246d8ba2c913", "commitAfterChange": "1a7694f787314c10700fb3d038c524e33542b950", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Configuration(Properties aProps, PrintStream aLog)         throws RESyntaxException, FileNotFoundException, IOException", "signatureAfterChange": "     public Configuration(Properties aProps, PrintStream aLog)         throws RESyntaxException, FileNotFoundException, IOException", "diff": ["-        setTodoPat(aProps.getProperty(TODO_PATTERN_PROP, TODO_PATTERN));", "-        setParamPat(aProps.getProperty(PARAMETER_PATTERN_PROP,", "-                                       PARAMETER_PATTERN));", "-        setStaticPat(aProps.getProperty(STATIC_PATTERN_PROP, STATIC_PATTERN));", "-        setStaticFinalPat(aProps.getProperty(CONST_PATTERN_PROP,", "-                                             CONST_PATTERN));", "-        setMemberPat(aProps.getProperty(MEMBER_PATTERN_PROP, MEMBER_PATTERN));", "-        setPublicMemberPat(aProps.getProperty(PUBLIC_MEMBER_PATTERN_PROP,", "-                                              PUBLIC_MEMBER_PATTERN));", "-        setTypePat(aProps.getProperty(TYPE_PATTERN_PROP, TYPE_PATTERN));", "-        setLocalVarPat(aProps.getProperty(LOCAL_VAR_PATTERN_PROP,", "-                                          LOCAL_VAR_PATTERN));", "-        setMethodPat(aProps.getProperty(METHOD_PATTERN_PROP, METHOD_PATTERN));", "-        setIgnoreLineLengthPat(aProps.getProperty(", "-            IGNORE_LINE_LENGTH_PATTERN_PROP, IGNORE_LINE_LENGTH_PATTERN));", "-        setIntProperty(aProps, aLog, MAX_LINE_LENGTH_PROP, MAX_LINE_LENGTH);", "-        setIntProperty(aProps, aLog, MAX_METHOD_LENGTH_PROP, MAX_METHOD_LENGTH);", "-        setIntProperty(aProps, aLog,", "-                       MAX_CONSTRUCTOR_LENGTH_PROP, MAX_CONSTRUCTOR_LENGTH);", "-        setIntProperty(aProps, aLog, MAX_FILE_LENGTH_PROP, MAX_FILE_LENGTH);", "+        setPatternProperty(aProps, Defn.TODO_PATTERN_PROP, TODO_PATTERN);", "+        setPatternProperty(aProps, Defn.PARAMETER_PATTERN_PROP,", "+                           PARAMETER_PATTERN);", "+        setPatternProperty(aProps, Defn.STATIC_PATTERN_PROP, STATIC_PATTERN);", "+        setPatternProperty(aProps, Defn.CONST_PATTERN_PROP, CONST_PATTERN);", "+        setPatternProperty(aProps, Defn.MEMBER_PATTERN_PROP, MEMBER_PATTERN);", "+        setPatternProperty(aProps, Defn.PUBLIC_MEMBER_PATTERN_PROP,", "+                           PUBLIC_MEMBER_PATTERN);", "+        setPatternProperty(aProps, Defn.TYPE_PATTERN_PROP, TYPE_PATTERN);", "+        setPatternProperty(aProps, Defn.LOCAL_VAR_PATTERN_PROP,", "+                           LOCAL_VAR_PATTERN);", "+        setPatternProperty(aProps, Defn.METHOD_PATTERN_PROP, METHOD_PATTERN);", "+        setPatternProperty(aProps, Defn.IGNORE_LINE_LENGTH_PATTERN_PROP,", "+                           IGNORE_LINE_LENGTH_PATTERN);", "+        setIntProperty(aProps, aLog, Defn.MAX_LINE_LENGTH_PROP,", "+                       MAX_LINE_LENGTH);", "+        setIntProperty(aProps, aLog, Defn.MAX_METHOD_LENGTH_PROP,", "+                       MAX_METHOD_LENGTH);", "+        setIntProperty(aProps, aLog, Defn.MAX_CONSTRUCTOR_LENGTH_PROP,", "+                       MAX_CONSTRUCTOR_LENGTH);", "+        setIntProperty(aProps, aLog, Defn.MAX_FILE_LENGTH_PROP,", "+                       MAX_FILE_LENGTH);", "-        setBooleanProperty(aProps, ALLOW_TABS_PROP);", "-        setIntProperty(aProps, aLog, TAB_WIDTH_PROP, TAB_WIDTH);", "-        setBooleanProperty(aProps, ALLOW_PROTECTED_PROP);", "-        setBooleanProperty(aProps, ALLOW_PACKAGE_PROP);", "-        setBooleanProperty(aProps, ALLOW_NO_AUTHOR_PROP);", "+        setBooleanProperty(aProps, Defn.ALLOW_TABS_PROP);", "+        setIntProperty(aProps, aLog, Defn.TAB_WIDTH_PROP, TAB_WIDTH);", "+        setBooleanProperty(aProps, Defn.ALLOW_PROTECTED_PROP);", "+        setBooleanProperty(aProps, Defn.ALLOW_PACKAGE_PROP);", "+        setBooleanProperty(aProps, Defn.ALLOW_NO_AUTHOR_PROP);", "-            Scope.getInstance(aProps.getProperty(JAVADOC_CHECKSCOPE_PROP,", "+            Scope.getInstance(aProps.getProperty(Defn.JAVADOC_CHECKSCOPE_PROP,", "-        setBooleanProperty(aProps, REQUIRE_PACKAGE_HTML_PROP);", "-        setBooleanProperty(aProps, IGNORE_IMPORTS_PROP);", "+        setBooleanProperty(aProps, Defn.REQUIRE_PACKAGE_HTML_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_IMPORTS_PROP);", "-            aProps.getProperty(ILLEGAL_IMPORTS_PROP, ILLEGAL_IMPORTS));", "-        setIllegalInstantiations(aProps.getProperty(ILLEGAL_INSTANTIATIONS_PROP,", "-                                                   ILLEGAL_INSTANTIATIONS));", "-        setBooleanProperty(aProps, IGNORE_WHITESPACE_PROP);", "-        setBooleanProperty(aProps, IGNORE_CAST_WHITESPACE_PROP);", "-        setBooleanProperty(aProps, IGNORE_OP_WRAP_PROP);", "-        setBooleanProperty(aProps, IGNORE_BRACES_PROP);", "-        setBooleanProperty(aProps, IGNORE_LONG_ELL_PROP);", "-        setBooleanProperty(aProps, IGNORE_PUBLIC_IN_INTERFACE_PROP);", "-        setCacheFile(aProps.getProperty(CACHE_FILE_PROP));", "-        setBooleanProperty(aProps, IGNORE_IMPORT_LENGTH_PROP);", "-        setHeaderIgnoreLines(aProps.getProperty(HEADER_IGNORE_LINE_PROP));", "-        setBooleanProperty(aProps, HEADER_LINES_REGEXP_PROP);", "+            aProps.getProperty(Defn.ILLEGAL_IMPORTS_PROP, ILLEGAL_IMPORTS));", "+        setIllegalInstantiations(", "+            aProps.getProperty(Defn.ILLEGAL_INSTANTIATIONS_PROP,", "+                               ILLEGAL_INSTANTIATIONS));", "+        setBooleanProperty(aProps, Defn.IGNORE_WHITESPACE_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_CAST_WHITESPACE_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_OP_WRAP_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_BRACES_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_LONG_ELL_PROP);", "+        setBooleanProperty(aProps, Defn.IGNORE_PUBLIC_IN_INTERFACE_PROP);", "+        setCacheFile(aProps.getProperty(Defn.CACHE_FILE_PROP));", "+        setBooleanProperty(aProps, Defn.IGNORE_IMPORT_LENGTH_PROP);", "+        setHeaderIgnoreLines(aProps.getProperty(Defn.HEADER_IGNORE_LINE_PROP));", "+        setBooleanProperty(aProps, Defn.HEADER_LINES_REGEXP_PROP);", "-        final String fname = aProps.getProperty(HEADER_FILE_PROP);", "+        final String fname = aProps.getProperty(Defn.HEADER_FILE_PROP);", "-        setLCurlyMethod(getLeftCurlyOptionProperty(", "-                            aProps, LCURLY_METHOD_PROP,", "-                            LeftCurlyOption.EOL, aLog));", "-        setLCurlyType(getLeftCurlyOptionProperty(", "-                          aProps, LCURLY_TYPE_PROP,", "-                          LeftCurlyOption.EOL, aLog));", "-        setLCurlyOther(getLeftCurlyOptionProperty(", "-                           aProps, LCURLY_OTHER_PROP,", "-                           LeftCurlyOption.EOL, aLog));", "+        setLeftCurlyOptionProperty(aProps, Defn.LCURLY_METHOD_PROP, aLog);", "+        setLeftCurlyOptionProperty(aProps, Defn.LCURLY_TYPE_PROP, aLog);", "+        setLeftCurlyOptionProperty(aProps, Defn.LCURLY_OTHER_PROP, aLog);", "-                      aProps, RCURLY_PROP, RightCurlyOption.SAME, aLog));", "-        setTryBlock(", "-            getBlockOptionProperty(", "-                aProps, TRY_BLOCK_PROP, BlockOption.TEXT, aLog));", "-        setCatchBlock(", "-            getBlockOptionProperty(", "-                aProps, CATCH_BLOCK_PROP, BlockOption.TEXT, aLog));", "-        setFinallyBlock(", "-            getBlockOptionProperty(", "-                aProps, FINALLY_BLOCK_PROP, BlockOption.TEXT, aLog));", "+                      aProps, Defn.RCURLY_PROP, RightCurlyOption.SAME, aLog));", "+        setBlockOptionProperty(aProps, Defn.TRY_BLOCK_PROP, aLog);", "+        setBlockOptionProperty(aProps, Defn.CATCH_BLOCK_PROP, aLog);", "+        setBlockOptionProperty(aProps, Defn.FINALLY_BLOCK_PROP, aLog);", "-                                               PAREN_PAD_PROP,", "+                                               Defn.PAREN_PAD_PROP,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1282f29c917dd6f7e837a4eb8257b3d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static DetailAST getArrayTypeOrIdentifier(DetailAST arrayDeclarator)", "signatureAfterChange": "     private static DetailAST getArrayDeclaratorPreviousElement(DetailAST ast)", "diff": ["-    private static DetailAST getArrayTypeOrIdentifier(DetailAST arrayDeclarator) {", "-        DetailAST typeOrIdent = arrayDeclarator;", "-        if (isArrayInstantiation(arrayDeclarator)) {", "-            typeOrIdent = arrayDeclarator.getParent().getFirstChild();", "-        else if (isMultiDimensionalArray(arrayDeclarator)) {", "-            if (isCStyleMultiDimensionalArrayDeclaration(arrayDeclarator)) {", "-                if (arrayDeclarator.getParent().getType() != TokenTypes.ARRAY_DECLARATOR) {", "-                    typeOrIdent = getArrayIdentifier(arrayDeclarator);", "-                }", "+     */", "+    private static DetailAST getArrayDeclaratorPreviousElement(DetailAST ast) {", "+        final DetailAST previousElement;", "+        final DetailAST firstChild = ast.getFirstChild();", "+        if (firstChild.getType() == TokenTypes.ARRAY_DECLARATOR) {", "+            // second or higher array index", "+            previousElement = firstChild.findFirstToken(TokenTypes.RBRACK);", "+        }", "+        else {", "+            // first array index, is preceded with identifier or type", "+            final DetailAST parent = getFirstNonArrayDeclaratorParent(ast);", "+            switch (parent.getType()) {", "+                // generics", "+                case TokenTypes.TYPE_ARGUMENT:", "+                    final DetailAST wildcard = parent.findFirstToken(TokenTypes.WILDCARD_TYPE);", "+                    if (wildcard == null) {", "+                        // usual generic type argument like <char[]>", "+                        previousElement = getTypeLastNode(ast);", "+                    }", "+                    else {", "+                        // constructions with wildcard like <? extends String[]>", "+                        previousElement = getTypeLastNode(ast.getFirstChild());", "+                    }", "+                    break;", "+                // 'new' is a special case with its own subtree structure", "+                case TokenTypes.LITERAL_NEW:", "+                    previousElement = getTypeLastNode(parent);", "+                    break;", "+                // mundane array declaration, can be either java style or C style", "+                case TokenTypes.TYPE:", "+                    previousElement = getPreviousNodeWithParentOfTypeAst(ast, parent);", "+                    break;", "+                // i.e. boolean[].class", "+                case TokenTypes.DOT:", "+                    previousElement = getTypeLastNode(ast);", "+                    break;", "+                // java 8 method reference", "+                case TokenTypes.METHOD_REF:", "+                    final DetailAST ident = getIdentLastToken(ast);", "+                    if (ident == null) {", "+                        //i.e. int[]::new", "+                        previousElement = ast.getFirstChild();", "+                    }", "+                    else {", "+                        previousElement = ident;", "+                    }", "+                    break;", "+                default:", "+                    throw new IllegalStateException(\"unexpected ast syntax\" + parent);", "+            }", "+        }", "+        return previousElement;", "+    }", "-                DetailAST arrayIdentifier = arrayDeclarator.getFirstChild();", "-                while (arrayIdentifier != null) {", "-                    typeOrIdent = arrayIdentifier;", "-                    arrayIdentifier = arrayIdentifier.getFirstChild();", "-                }", "-            if (isCStyleArrayDeclaration(arrayDeclarator)) {", "-                typeOrIdent = getArrayIdentifier(arrayDeclarator);", "-                if (isArrayUsedAsTypeForGenericBoundedWildcard(arrayDeclarator)) {", "-                    typeOrIdent = arrayDeclarator.getParent();", "-                    typeOrIdent = arrayDeclarator.getFirstChild();", "-        return typeOrIdent;", "-    }"]}]}
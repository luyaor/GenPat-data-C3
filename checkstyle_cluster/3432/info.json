{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a382dc68e3d59ab6936dcc784b2ffb4c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2486244d953a81d643ca4bbc3e0d8ca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/LocalizedMessage.java", "commitBeforeChange": "f786378e2325aaa95974d70b7df07f8dc109648e", "commitAfterChange": "291cde4801ed627f52b4fc97851d5177f6a1385d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public boolean equals(Object object)", "signatureAfterChange": "      @Override     public boolean equals(Object object)", "diff": ["-        if (!(object instanceof LocalizedMessage)) {", "+        if (object == null || getClass() != object.getClass()) {", "-", "-        final LocalizedMessage localizedMessage = (LocalizedMessage) object;", "-", "-        if (colNo != localizedMessage.colNo) {", "-            return false;", "-        }", "-        if (lineNo != localizedMessage.lineNo) {", "-            return false;", "-        }", "-        if (!key.equals(localizedMessage.key)) {", "-            return false;", "-        }", "-", "-        if (!Arrays.equals(args, localizedMessage.args)) {", "-            return false;", "-        }", "-        // ignoring bundle for perf reasons.", "-", "-        // we currently never load the same error from different bundles.", "-", "-        return true;", "+        final LocalizedMessage that = (LocalizedMessage) object;", "+        return Objects.equals(lineNo, that.lineNo)", "+                && Objects.equals(colNo, that.colNo)", "+                && Objects.equals(severityLevel, that.severityLevel)", "+                && Objects.equals(moduleId, that.moduleId)", "+                && Objects.equals(key, that.key)", "+                && Objects.equals(bundle, that.bundle)", "+                && Objects.equals(sourceClass, that.sourceClass)", "+                && Objects.equals(customMessage, that.customMessage)", "+                && Arrays.equals(args, that.args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb4bf9701f405fae9b05dd6b63203168", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/RedundantImportCheck.java", "commitBeforeChange": "624f82b556974bf15cafee6a057acca3dac5eec5", "commitAfterChange": "6125beffc437f970eae276b4a6542265c6547784", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-            final DetailAST nameAST = (DetailAST) aAST.getFirstChild();", "-            mPkgName = FullIdent.createFullIdent(nameAST).getText();", "+            mPkgName =", "+                FullIdent.createFullIdent(", "+                    (DetailAST) aAST.getLastChild()", "+                        .getPreviousSibling()).getText();", "-        else {", "+        else if (aAST.getType() == TokenTypes.IMPORT) {", "+        else {", "+            // Check for a duplicate static import", "+            final FullIdent imp =", "+                FullIdent.createFullIdent(", "+                    aAST.getLastChild().getPreviousSibling());", "+            final Iterator it = mStaticImports.iterator();", "+            while (it.hasNext()) {", "+                final FullIdent full = (FullIdent) it.next();", "+                if (imp.getText().equals(full.getText())) {", "+                    log(aAST.getLineNo(),", "+                        aAST.getColumnNo(),", "+                        \"import.duplicate\",", "+                        new Integer(full.getLineNo()),", "+                        imp.getText());", "+                }", "+            }", "+", "+            mStaticImports.add(imp);", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bc516a42e890b340d2effe3e08ea850", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91de93a629ea24c371f34b0d7dcaa524", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/imports/ImportOrderCheck.java", "commitBeforeChange": "4d8c68ec207613560251735b5de1c7be4a2658c5", "commitAfterChange": "c6bbd6774988073dfeea8e6f9bea0689f0de19bb", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                    if (mLastImport.compareTo(name) >= 0) {", "+                    boolean shouldFireError = false;", "+                    if (mCaseSensitive) {", "+                        shouldFireError = (mLastImport.compareTo(name) >= 0);", "+                    }", "+                    else {", "+                        shouldFireError =", "+                            (mLastImport.compareToIgnoreCase(name) >= 0);", "+                    }", "+                    if (shouldFireError) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acdb1f02fa9e5ac43e4dd1294f56a30b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheck.java", "commitBeforeChange": "22d0ed9d4cf3c92e70d6315637ce36d572e91e98", "commitAfterChange": "3ad02e2dcdb4e4fbea22f6e8b765ff812f7887ee", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void beginTree(DetailAST aRootAST)", "signatureAfterChange": "     public void beginTree(DetailAST aRootAST)", "diff": ["+", "-            if (getRegexp().match(line)) {", "+            final boolean foundMatch;", "+            if (mIgnoreComments) {", "+                foundMatch = findNonCommentMatch(line, i + 1, 0);", "+            }", "+            else {", "+                foundMatch = getRegexp().match(line);", "+            }", "+            if (foundMatch) {"]}]}
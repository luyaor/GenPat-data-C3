{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fdb5042d29a0a9508e59c142b9008dc1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28cc1ea7016d1f426f178d163e362034", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "d499f72239cec254d620ab1619ac936e233e2033", "commitAfterChange": "c682b5725d22afc38bf19d9667b23a7deab6d8c3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethod(MethodSignature aSig)", "signatureAfterChange": "     void verifyMethod(MethodSignature aSig)", "diff": ["-                \"method name '\" + aSig.getName().getText()", "-                + \"' must match pattern '\" + mConfig.getMethodPat() + \"'.\");", "+                \"name.invalidPattern\",", "+                \"method\",", "+                aSig.getName().getText(),", "+                mConfig.getMethodPat());", "-                \"More than \" + mConfig.getMaxParameters() + \" parameters.\");", "+                \"maxParam\", new Integer(mConfig.getMaxParameters()));", "-                \"redundant 'public' modifier.\");", "+                \"redundantModifier\", \"public\");", "-                \"redundant 'abstract' modifier.\");", "+                \"redundantModifier\", \"abstract\");", "-                \"method is missing a Javadoc comment.\");", "+                \"javadoc.missing\", \"method\");", "-                        log(jt.getLineNo(), \"Unused Javadoc tag.\");", "+                        log(jt.getLineNo(), \"javadoc.unusedTagGeneral\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af17bebaffcf9d240522e40ad38bd181", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "d499f72239cec254d620ab1619ac936e233e2033", "commitAfterChange": "c682b5725d22afc38bf19d9667b23a7deab6d8c3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     void setLines(String[] aLines)", "signatureAfterChange": "     void setLines(String[] aLines)", "diff": ["-                log(i + 1,", "-                    \"line longer than \" + mConfig.getMaxLineLength()", "-                    + \" characters\");", "+                log(i + 1, \"maxLineLen\",", "+                    new Integer(mConfig.getMaxLineLength()));", "-                    log(i + 1, tabPosition, \"line contains a tab character\");", "+                    log(i + 1, tabPosition, \"containsTab\");", "-            log(1,", "-                \"file length is \" + mLines.length + \" lines (max allowed is \"", "-                + mConfig.getMaxFileLength() + \").\");", "+            log(1, \"maxLen\",", "+                \"file\",", "+                new Integer(mLines.length),", "+                new Integer(mConfig.getMaxFileLength()));"]}]}
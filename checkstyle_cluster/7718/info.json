{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc0b3ee080bc05d29a23ddbfdfe0446d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e09de2718436596027b47b5a5a6392e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/regexp/MultilineDetector.java", "commitBeforeChange": "78a5fd3494e8f3fe6e5edd0925f46b43583451fe", "commitAfterChange": "3cd6646941eca3da7d3b9a221c88e4c1d214876e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r     private void findMatch()", "signatureAfterChange": "     private void findMatch()", "diff": ["-    /** recursive method that finds the matches. */\r", "-    private void findMatch()\r", "-    {\r", "-        final boolean foundMatch = mMatcher.find();\r", "-        if (!foundMatch) {\r", "-            return;\r", "-        }\r", "-\r", "-        final int startLine = (mCharacters.get(mMatcher.start()))[0].intValue();\r", "-        final int startColumn = (mCharacters.get(mMatcher.start()))[1]\r", "-                .intValue();\r", "-        final int endLine = (mCharacters.get(mMatcher.end() - 1))[0].intValue();\r", "-        final int endColumn = (mCharacters.get(mMatcher.end() - 1))[1]\r", "-                .intValue();\r", "-\r", "-\r", "-        if (!mOptions.getSuppressor().shouldSuppress(startLine, startColumn,\r", "-                endLine, endColumn))\r", "-        {\r", "-            mCurrentMatches++;\r", "-            if (mCurrentMatches > mOptions.getMaximum()) {\r", "-                if (\"\".equals(mOptions.getMessage())) {\r", "-                    mOptions.getReporter().log(startLine, \"regexp.exceeded\",\r", "-                            mMatcher.pattern().toString());\r", "-                }\r", "-                else {\r", "-                    mOptions.getReporter()\r", "-                            .log(startLine, mOptions.getMessage());\r", "-                }\r", "-            }\r", "-        }\r", "-        findMatch();\r", "-    }\r", "+    /** recursive method that finds the matches. */", "+    private void findMatch()", "+    {", "+        final boolean foundMatch = mMatcher.find();", "+        if (!foundMatch) {", "+            return;", "+        }", "+", "+        final LineColumn start = mText.lineColumn(mMatcher.start());", "+        final LineColumn end = mText.lineColumn(mMatcher.end());", "+", "+        if (!mOptions.getSuppressor().shouldSuppress(start.getLine(),", "+                start.getColumn(), end.getLine(), end.getColumn()))", "+        {", "+            mCurrentMatches++;", "+            if (mCurrentMatches > mOptions.getMaximum()) {", "+                if (\"\".equals(mOptions.getMessage())) {", "+                    mOptions.getReporter().log(start.getLine(),", "+                            \"regexp.exceeded\", mMatcher.pattern().toString());", "+                }", "+                else {", "+                    mOptions.getReporter()", "+                            .log(start.getLine(), mOptions.getMessage());", "+                }", "+            }", "+        }", "+        findMatch();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c88eda2b8f499c331779327384380732", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/WhitespaceAroundCheck.java", "commitBeforeChange": "5e8476f01d9306b34e6629ed27f7a2db48287ed5", "commitAfterChange": "d31d4220cc7f9cf03fe9e4cd0fe7d9e305ffe096", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        // Check for RCURLY in array initializer", "-        if ((aAST.getType() == TokenTypes.RCURLY)", "-            && (aAST.getParent().getType() == TokenTypes.ARRAY_INIT))", "+        final int type = aAST.getType();", "+        final int parentType = aAST.getParent().getType();", "+", "+        // Check for CURLY in array initializer", "+        if ((type == TokenTypes.RCURLY || type == TokenTypes.LCURLY)", "+            && (parentType == TokenTypes.ARRAY_INIT))", "-        if ((aAST.getType() == TokenTypes.STAR)", "-            && (aAST.getParent().getType() == TokenTypes.DOT))", "+        if ((type == TokenTypes.STAR)", "+            && (parentType == TokenTypes.DOT))", "-        if ((aAST.getType() == TokenTypes.SLIST)", "-            && (aAST.getParent().getType() == TokenTypes.CASE_GROUP))", "+        if ((type == TokenTypes.SLIST)", "+            && (parentType == TokenTypes.CASE_GROUP))", "-        if ((after < line.length())", "-            && !Character.isWhitespace(", "-                line.charAt(after)) // Check for \"return;\"", "-            && !((aAST.getType() == TokenTypes.LITERAL_RETURN)", "+        if (after >= line.length()) {", "+            return;", "+        }", "+", "+        final char nextChar = line.charAt(after);", "+        if (!Character.isWhitespace(nextChar)", "+            // Check for \"return;\"", "+            && !((type == TokenTypes.LITERAL_RETURN)", "-            // Check for \"})\" or \"};\". Happens with anon-inners", "-            && !((aAST.getType() == TokenTypes.RCURLY)", "-                && ((line.charAt(after) == ')')", "-                    || (line.charAt(after) == ';'))))", "+            // Check for \"})\" or \"};\" or \"},\". Happens with anon-inners", "+            && !((type == TokenTypes.RCURLY)", "+                && ((nextChar == ')')", "+                    || (nextChar == ';')", "+                    || (nextChar == ','))))"]}]}
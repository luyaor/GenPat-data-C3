{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0bc581e92ed45282fc5cf9f13bc496e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "110e674a54905d9c7eb250481a84df61", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractFileSetCheck.java", "commitBeforeChange": "24a95e56f533652bb850e0646c37347ccf03da68", "commitAfterChange": "864cf936cfa75116153e5f195a833edaf64a90cf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public final void setFileExtensions(String... extensions)", "signatureAfterChange": "     public final void setFileExtensions(String... extensions)", "diff": ["-            fileExtensions = null;", "-            return;", "+            throw new IllegalArgumentException(\"Extensions array can not be null\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f00df789c06bc19bc748ffb2e67e7012", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolder.java", "commitBeforeChange": "ce4df1ec00d6eaa2547b9c1bdcbeec2b22f0fe0f", "commitAfterChange": "e8d0f037a2a300da55df6ab28d3459a6af9990d8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static List<String> getAllAnnotationValues(DetailAST ast)", "signatureAfterChange": "     private static List<String> getAllAnnotationValues(DetailAST ast)", "diff": ["-            if (nextAST != null) {", "-                final int nextType = nextAST.getType();", "-                switch (nextType) {", "-                    case TokenTypes.EXPR:", "-                    case TokenTypes.ANNOTATION_ARRAY_INIT:", "-                        values = getAnnotationValues(nextAST);", "-                        break;", "+            final int nextType = nextAST.getType();", "+            switch (nextType) {", "+                case TokenTypes.EXPR:", "+                case TokenTypes.ANNOTATION_ARRAY_INIT:", "+                    values = getAnnotationValues(nextAST);", "+                    break;", "-                    case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:", "-                        // expected children: IDENT ASSIGN ( EXPR |", "-                        // ANNOTATION_ARRAY_INIT )", "-                        values = getAnnotationValues(getNthChild(nextAST, 2));", "-                        break;", "+                case TokenTypes.ANNOTATION_MEMBER_VALUE_PAIR:", "+                    // expected children: IDENT ASSIGN ( EXPR |", "+                    // ANNOTATION_ARRAY_INIT )", "+                    values = getAnnotationValues(getNthChild(nextAST, 2));", "+                    break;", "-                    case TokenTypes.RPAREN:", "-                        // no value present (not valid Java)", "-                        break;", "+                case TokenTypes.RPAREN:", "+                    // no value present (not valid Java)", "+                    break;", "-                    default:", "-                        // unknown annotation value type (new syntax?)", "-                }", "+                default:", "+                    // unknown annotation value type (new syntax?)", "+                    throw new IllegalArgumentException(\"Unexpected AST: \" + nextAST);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efae990d01c73d116f39bd3122c04b36", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2d98341f14674243ef502d60a7aab8b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "7b26e83b92f03e6142af4c37f4308df275989d39", "commitAfterChange": "8da3b6dea4b446e055bb86b2bffb619008ee97b5", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private static ParseTree getNextSibling(ParseTree node)", "signatureAfterChange": "     private static ParseTree getNextSibling(ParseTree node)", "diff": ["-        if (node.getParent() == null) {", "-            return null;", "-        }", "+        ParseTree nextSibling = null;", "-        final ParseTree parent = node.getParent();", "-        final int childCount = parent.getChildCount();", "+        if (node.getParent() != null) {", "+            final ParseTree parent = node.getParent();", "+            final int childCount = parent.getChildCount();", "-        int i = 0;", "-        while (true) {", "-            final ParseTree currentNode = parent.getChild(i);", "-            if (currentNode.equals(node)) {", "-                if (i == childCount - 1) {", "-                    return null;", "+            int i = 0;", "+            while (true) {", "+                final ParseTree currentNode = parent.getChild(i);", "+                if (currentNode.equals(node)) {", "+                    if (i != childCount - 1) {", "+                        nextSibling = parent.getChild(i + 1);", "+                    }", "+                    break;", "-                return parent.getChild(i + 1);", "+                i++;", "-            i++;", "+        return nextSibling;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e79fbb10f879735d12a65fa006a72e5f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/PkgControl.java", "commitBeforeChange": "98a3157200a6b488a0f78b67b0741a2bd72d40fa", "commitAfterChange": "044889b26a868b1b7200526ceeb40cdbe1e903fc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     PkgControl locateFinest(final String forPkg)", "signatureAfterChange": "     PkgControl locateFinest(final String forPkg)", "diff": ["+        PkgControl finestMatch = null;", "-        // This algormithm should be improved to check for a trailing \".\"", "+        // This algorithm should be improved to check for a trailing \".\"", "-        if (!forPkg.startsWith(fullPackage)) {", "-            return null;", "-        }", "-", "-        // Check if any of the children match.", "-        for (PkgControl pc : children) {", "-            final PkgControl match = pc.locateFinest(forPkg);", "-            if (match != null) {", "-                return match;", "+        if (forPkg.startsWith(fullPackage)) {", "+            // If there won't be match so I am the best there is.", "+            finestMatch = this;", "+            // Check if any of the children match.", "+            for (PkgControl pc : children) {", "+                final PkgControl match = pc.locateFinest(forPkg);", "+                if (match != null) {", "+                    finestMatch = match;", "+                    break;", "+                }", "-", "-        // No match so I am the best there is.", "-        return this;", "+        return finestMatch;"]}]}
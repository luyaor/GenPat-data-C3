{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30062dbe8ccbaaba6d64b1588773fda2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cb9c42e5d0f409f5b866357d8468320", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/GenericIllegalRegexpCheck.java", "commitBeforeChange": "c5dfb268770999ece0efcab2f47f007dec339264", "commitAfterChange": "5f0f6d3929dc2c7f1570c03f24a652bffe61db6f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private boolean findNonCommentMatch(             String aLine, int aLineNumber, int aStartPosition)", "signatureAfterChange": "     private boolean findNonCommentMatch(             String aLine, int aLineNumber, int aStartPosition)", "diff": ["-        if (foundMatch) {", "-            // match is found, check for intersection with comment", "-            final int startCol = matcher.start(0);", "-            final int endCol = matcher.end(0) - 1;", "-            final FileContents fileContents = getFileContents();", "-            if (fileContents.hasIntersectionWithComment(aLineNumber,", "-                startCol, aLineNumber, endCol))", "-            {", "-                // was part of comment", "-                if (endCol < aLine.length()) {", "-                    // check if the expression is on the rest of the line", "-                    return findNonCommentMatch(aLine, aLineNumber, endCol);", "-                }", "-                // end of line reached", "-                return false;", "-            }", "-            // not intersecting with comment", "-            return true;", "+        if (!foundMatch) {", "+            return false;", "-        // no match is found", "-        return false;", "+        // match is found, check for intersection with comment", "+        final int startCol = matcher.start(0);", "+        final int endCol = matcher.end(0);", "+        // Note that Matcher.end(int) returns he offset AFTER the", "+        // last matched character, but hasIntersectionWithComment()", "+        // needs column number of the last character.", "+        // So we need to use (endCol - 1) here.", "+        final boolean intersectsWithComment = getFileContents()", "+            .hasIntersectionWithComment(aLineNumber, startCol,", "+                                        aLineNumber, endCol - 1);", "+        if (intersectsWithComment) {", "+            if (endCol < aLine.length()) {", "+                // check if the expression is on the rest of the line", "+                return findNonCommentMatch(aLine, aLineNumber, endCol);", "+            }", "+            // end of line reached", "+            return false;", "+        }", "+        // not intersecting with comment", "+        return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a4d8411197932e2193216bd44cfe78b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "8c80de169203a31d3ffc2368712a34a50d783165", "commitAfterChange": "850590186419416b1c02eba137fc6ec042de7f8b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "signatureAfterChange": "     void verifyOpBegin(int aLineNo, int aColNo, String aText)", "diff": ["-        final WrapOpOption wOp = mConfig.getWrapOpOption();", "-", "-        if (wOp != WrapOpOption.IGNORE) {", "-", "-            // Check if rest of line is whitespace, and not just the operator", "-            // by itself. This last bit is to handle the operator on a line by", "-            // itself.", "-            if (wOp == WrapOpOption.NL", "-                && !aText.equals(mLines[aLineNo - 1].trim())", "-                && (mLines[aLineNo - 1].substring(aColNo + aText.length() - 1)", "-                    .trim().length() == 0))", "-            {", "-                mMessages.add(aLineNo, aColNo - 1, \"line.new\", aText);", "-            }", "-            else if (wOp == WrapOpOption.EOL", "-                     && Utils.whitespaceBefore(aColNo - 1, mLines[aLineNo - 1]))", "-            {", "-                mMessages.add(aLineNo, aColNo - 1, \"line.previous\", aText);", "-            }", "-        }"]}]}
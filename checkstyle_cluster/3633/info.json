{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "832c66aa04635dc987ffee54f72f5639", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0808f0da0b2a5b8ffec36a3028c9e517", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "343e946b076a5344e380c76e5b3ea23438b6fc93", "commitAfterChange": "e3a48d1527341456a798c3f0c1986de6898a8c60", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void checkIndentation()", "signatureAfterChange": "      @Override     public void checkIndentation()", "diff": ["+        final DetailAST exprNode = getMainAst().getParent();", "+        if (exprNode.getParent().getType() != TokenTypes.LCURLY", "+            && exprNode.getParent().getType() != TokenTypes.SLIST)", "+        {", "+            return;", "+        }", "-        // if this method name is on the same line as a containing", "-        // method, don't indent, this allows expressions like:", "-        //    method(\"my str\" + method2(", "-        //        \"my str2\"));", "-        // as well as", "-        //    method(\"my str\" +", "-        //        method2(", "-        //            \"my str2\"));", "-        //", "-", "+        final LineWrappingHandler lineWrap =", "+            new LineWrappingHandler(getIndentCheck(), getMainAst()) {", "+                @Override", "+                public DetailAST findLastNode(DetailAST aFirstNode)", "+                {", "+                    DetailAST lastNode;", "+                    if (getFirstNode().getNextSibling() == null) {", "+                        lastNode = getFirstNode().getLastChild();", "+                    }", "+                    else {", "+                        lastNode = getFirstNode().getNextSibling();", "+                    }", "+                    return lastNode;", "+                }", "+", "+                @Override", "+                public int getCurrentIndentation()", "+                {", "+                    DetailAST curNode = getFirstNode();", "+                    while (curNode.getType() != TokenTypes.IDENT) {", "+                        curNode = curNode.getFirstChild();", "+                    }", "+                    return curNode.getColumnNo() + getIndentLevel();", "+                }", "+            };", "+        lineWrap.checkIndentation();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89ffcccb57f2fa3add1d8d066e3076c5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "50559c68761e235f57e48cd2dc28928b417d7745", "commitAfterChange": "bcbd31a5ecc3aa9b5f0677acb17c441142e57c6f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public void checkIndentation()", "signatureAfterChange": "     public void checkIndentation()", "diff": ["-        checkLParen();", "-        DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);", "+        DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);", "+        checkLParen(lparen);", "-        if (rparen.getLineNo() != lparen.getLineNo()) {", "-", "-            // if this method name is on the same line as a containing", "-            // method, don't indent, this allows expressions like:", "-            //    method(\"my str\" + method2(", "-            //        \"my str2\"));", "-            // as well as", "-            //    method(\"my str\" +", "-            //        method2(", "-            //            \"my str2\"));", "-            //", "-", "-            checkExpressionSubtree(", "-                getMainAst().findFirstToken(TokenTypes.ELIST),", "-                new IndentLevel(getLevel(), getBasicOffset()),", "-                false, true);", "-", "-            checkRParen();", "+        if (rparen.getLineNo() == lparen.getLineNo()) {", "+            return;", "+", "+        // if this method name is on the same line as a containing", "+        // method, don't indent, this allows expressions like:", "+        //    method(\"my str\" + method2(", "+        //        \"my str2\"));", "+        // as well as", "+        //    method(\"my str\" +", "+        //        method2(", "+        //            \"my str2\"));", "+        //", "+", "+        checkExpressionSubtree(", "+            getMainAst().findFirstToken(TokenTypes.ELIST),", "+            new IndentLevel(getLevel(), getBasicOffset()),", "+            false, true);", "+", "+        checkRParen(lparen, rparen);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8aa3db7783800bc1cba4ab468773aa2b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d804f35feaa579472e445f05fe9bddd", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "efc6142fb04bfdaf04775ea2e61a3885b7ee3861", "commitAfterChange": "ee518dfe86b29d1fa4d76f0dc0c11fb83afafda1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public ExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, ExpressionHandler parent)", "signatureAfterChange": "     public ExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, ExpressionHandler parent)", "diff": ["-        catch (final InstantiationException e) {", "-            LOG.debug(\"couldn't instantiate constructor for \" + ast, e);", "-            throw new RuntimeException(\"couldn't instantiate constructor for \"", "-                                       + ast);", "+        catch (final InstantiationException | InvocationTargetException e) {", "+            final String message = \"couldn't instantiate constructor for \" + ast;", "+            LOG.debug(message, e);", "+            throw new RuntimeException(message);", "-            LOG.debug(\"couldn't access constructor for \" + ast, e);", "-            throw new RuntimeException(\"couldn't access constructor for \"", "-                                       + ast);", "-        }", "-        catch (final InvocationTargetException e) {", "-            LOG.debug(\"couldn't instantiate constructor for \" + ast, e);", "-            throw new RuntimeException(\"couldn't instantiate constructor for \"", "-                                       + ast);", "+            final String message = \"couldn't access constructor for \" + ast;", "+            LOG.debug(message, e);", "+            throw new RuntimeException(message);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5335c54deb4e109b36c85196286255d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java", "commitBeforeChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "commitAfterChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private static FilterSet loadSuppressions(             InputSource aSource, String aSourceName)         throws CheckstyleException", "signatureAfterChange": "     private static FilterSet loadSuppressions(             InputSource source, String sourceName)         throws CheckstyleException", "diff": ["-            InputSource aSource, String aSourceName)", "+            InputSource source, String sourceName)", "-            suppressionsLoader.parseInputSource(aSource);", "+            suppressionsLoader.parseInputSource(source);", "-            throw new CheckstyleException(\"unable to find \" + aSourceName, e);", "+            throw new CheckstyleException(\"unable to find \" + sourceName, e);", "-            throw new CheckstyleException(\"unable to parse \" + aSourceName, e);", "+            throw new CheckstyleException(\"unable to parse \" + sourceName, e);", "-                    + aSourceName + \" - \" + e.getMessage(), e);", "+                    + sourceName + \" - \" + e.getMessage(), e);", "-            throw new CheckstyleException(\"unable to read \" + aSourceName, e);", "+            throw new CheckstyleException(\"unable to read \" + sourceName, e);", "-                + aSourceName + \" - \" + e.getMessage(), e);", "+                + sourceName + \" - \" + e.getMessage(), e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de6af29f9a7bd305939cb3dbc0f54232", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java", "commitBeforeChange": "d67d10e9f2b480f7f56fe7cda2a908cd5fe770c7", "commitAfterChange": "f65b17cbc30795247fef3077cce16a8bb53e9ffc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private static FilterSet loadSuppressions(             InputSource source, String sourceName)         throws CheckstyleException", "signatureAfterChange": "     private static FilterSet loadSuppressions(             InputSource source, String sourceName)         throws CheckstyleException", "diff": ["-        catch (final FileNotFoundException e) {", "-            throw new CheckstyleException(UNABLE_TO_FIND_ERROR_MESSAGE + sourceName, e);", "+        catch (final FileNotFoundException ex) {", "+            throw new CheckstyleException(UNABLE_TO_FIND_ERROR_MESSAGE + sourceName, ex);", "-        catch (final ParserConfigurationException | SAXException e) {", "+        catch (final ParserConfigurationException | SAXException ex) {", "-                    sourceName, e.getMessage());", "-            throw new CheckstyleException(message, e);", "+                    sourceName, ex.getMessage());", "+            throw new CheckstyleException(message, ex);", "-        catch (final IOException e) {", "-            throw new CheckstyleException(\"Unable to read \" + sourceName, e);", "+        catch (final IOException ex) {", "+            throw new CheckstyleException(\"Unable to read \" + sourceName, ex);", "-        catch (final NumberFormatException e) {", "+        catch (final NumberFormatException ex) {", "-                    sourceName, e.getMessage());", "-            throw new CheckstyleException(message, e);", "+                    sourceName, ex.getMessage());", "+            throw new CheckstyleException(message, ex);"]}]}
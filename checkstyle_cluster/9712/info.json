{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93f680581592419723e711f3106e862b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f8a6a82e7e15d8226324a8e822f51d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "5f68bb50fd191fec409f5edb90755a18fce3e0ac", "commitAfterChange": "b436b3cd9860529718b95c36dafe565fe68f6293", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static boolean isSingleLineIf(DetailAST literalIf)", "signatureAfterChange": "     private static boolean isSingleLineIf(DetailAST literalIf)", "diff": ["-        final DetailAST ifBlock = literalIf.getLastChild();", "-        final DetailAST lastElementInIfBlock = ifBlock.getLastChild();", "-        if (lastElementInIfBlock != null", "-            && lastElementInIfBlock.getFirstChild() == null", "-            && literalIf.getLineNo() == lastElementInIfBlock.getLineNo())", "-        {", "-            result = true;", "+        final DetailAST ifCondition = literalIf.findFirstToken(TokenTypes.EXPR);", "+        if (literalIf.getParent().getType() == TokenTypes.SLIST) {", "+            DetailAST block = literalIf.getLastChild();", "+            if (block.getType() != TokenTypes.LITERAL_RETURN) {", "+                block = literalIf.getLastChild().getPreviousSibling();", "+            }", "+            result = ifCondition.getLineNo() == block.getLineNo();", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e554e9eb866dfc24e7809b1df4cb3197", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/NeedBracesCheck.java", "commitBeforeChange": "5f68bb50fd191fec409f5edb90755a18fce3e0ac", "commitAfterChange": "b436b3cd9860529718b95c36dafe565fe68f6293", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isSkipIfBlock(DetailAST literalIf)", "signatureAfterChange": "     private static boolean isSingleLineFor(DetailAST literalFor)", "diff": ["-    private boolean isSkipIfBlock(DetailAST literalIf)", "-        return allowSingleLineIf && isSingleLineIf(literalIf);", "+     */", "+    private static boolean isSingleLineFor(DetailAST literalFor)", "+    {", "+        boolean result = false;", "+        if (literalFor.getLastChild().getType() == TokenTypes.EMPTY_STAT) {", "+            result = true;", "+        }", "+        else if (literalFor.getParent().getType() == TokenTypes.SLIST", "+                && literalFor.getLastChild().getType() != TokenTypes.SLIST)", "+        {", "+            final DetailAST block = literalFor.findFirstToken(TokenTypes.EXPR);", "+            if (block != null) {", "+                result = literalFor.getLineNo() == block.getLineNo();", "+            }", "+        }", "+        return result;", "+    }"]}]}
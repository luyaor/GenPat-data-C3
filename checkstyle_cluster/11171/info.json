{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15f40d4e75ae1da15beb7c81902682cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ae71936a3e39cb4f81c26097ce0b7aa", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "87ef77fe452f7821066ad4906e1c0cf643fa1334", "commitAfterChange": "09f1ba2f35f928d4377637fa284d1ac334617a22", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        //we do not want to check colon for cases and defaults", "-        if ((type == TokenTypes.COLON)", "-            && ((parentType == TokenTypes.LITERAL_DEFAULT)", "-                || (parentType == TokenTypes.LITERAL_CASE)))", "-        {", "-            return;", "+        if ((type == TokenTypes.COLON)) {", "+            //we do not want to check colon for cases and defaults", "+            if (parentType == TokenTypes.LITERAL_DEFAULT", "+                || parentType == TokenTypes.LITERAL_CASE)", "+            {", "+                return;", "+            }", "+            else if (parentType == TokenTypes.FOR_EACH_CLAUSE", "+                && this.mIgnoreEnhancedForColon)", "+            {", "+                return;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f74c3b136c02016f04309fb4f104e5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/MethodSignature.java", "commitBeforeChange": "a1cecb5e0658862f957e60a8d5b2ade13b592101", "commitAfterChange": "659e6ec7aa7251ea0a825f48c1a523431ff09b79", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     int getFirstLineNo()", "signatureAfterChange": "     int getFirstLineNo()", "diff": ["-        return (mModSet.size() > 0)", "-            ? mModSet.getFirstLineNo()", "-            : mName.getLineNo();", "+        if (mModSet.size() > 0) {", "+            return mModSet.getFirstLineNo();", "+        }", "+        else if (mReturnType != null) {", "+            return mReturnType.getLineNo();", "+        }", "+        else {", "+            return mName.getLineNo();", "+        }", "+    }"]}]}
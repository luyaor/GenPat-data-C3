{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7149b952b88859052a7fe4a20356e3ae", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "506c0c79df206adaf4608f43c5d62601", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/LineWrappingHandler.java", "commitBeforeChange": "8b43ebdbf7ff1abe9fb858fd5d0dbc2c903a4485", "commitAfterChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private void logWarningMessage(DetailAST aCurrentNode, int aCurrentIndent)", "signatureAfterChange": "     private void logWarningMessage(DetailAST currentNode, int currentIndent)", "diff": ["-    private void logWarningMessage(DetailAST aCurrentNode, int aCurrentIndent)", "+    private void logWarningMessage(DetailAST currentNode, int currentIndent)", "-        if (mForceStrictCondition) {", "-            if (aCurrentNode.getColumnNo() != aCurrentIndent) {", "-                mIndentCheck.indentationLog(aCurrentNode.getLineNo(),", "-                        \"indentation.error\", aCurrentNode.getText(),", "-                        aCurrentNode.getColumnNo(), aCurrentIndent);", "+        if (forceStrictCondition) {", "+            if (currentNode.getColumnNo() != currentIndent) {", "+                indentCheck.indentationLog(currentNode.getLineNo(),", "+                        \"indentation.error\", currentNode.getText(),", "+                        currentNode.getColumnNo(), currentIndent);", "-            if (aCurrentNode.getColumnNo() < aCurrentIndent) {", "-                mIndentCheck.indentationLog(aCurrentNode.getLineNo(),", "-                        \"indentation.error\", aCurrentNode.getText(),", "-                        aCurrentNode.getColumnNo(), aCurrentIndent);", "+            if (currentNode.getColumnNo() < currentIndent) {", "+                indentCheck.indentationLog(currentNode.getLineNo(),", "+                        \"indentation.error\", currentNode.getText(),", "+                        currentNode.getColumnNo(), currentIndent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7f0afdd0c189bb3cdc062616c1434bf", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/sizes/MethodCountCheck.java", "commitBeforeChange": "750b733bd124eaea34d4692a1bb8d0fd0fe90976", "commitAfterChange": "3fec4a92e39afc5b68b03c5fd023cb8d13408385", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private void checkCounters(MethodCounter aCounter, DetailAST aAst)", "signatureAfterChange": "     private void checkCounters(MethodCounter counter, DetailAST ast)", "diff": ["-    private void checkCounters(MethodCounter aCounter, DetailAST aAst)", "+    private void checkCounters(MethodCounter counter, DetailAST ast)", "-        checkMax(mMaxPrivate, aCounter.value(Scope.PRIVATE),", "-                 \"too.many.privateMethods\", aAst);", "-        checkMax(mMaxPackage, aCounter.value(Scope.PACKAGE),", "-                 \"too.many.packageMethods\", aAst);", "-        checkMax(mMaxProtected, aCounter.value(Scope.PROTECTED),", "-                 \"too.many.protectedMethods\", aAst);", "-        checkMax(mMaxPublic, aCounter.value(Scope.PUBLIC),", "-                 \"too.many.publicMethods\", aAst);", "-        checkMax(mMaxTotal, aCounter.getTotal(), \"too.many.methods\", aAst);", "+        checkMax(maxPrivate, counter.value(Scope.PRIVATE),", "+                 \"too.many.privateMethods\", ast);", "+        checkMax(maxPackage, counter.value(Scope.PACKAGE),", "+                 \"too.many.packageMethods\", ast);", "+        checkMax(maxProtected, counter.value(Scope.PROTECTED),", "+                 \"too.many.protectedMethods\", ast);", "+        checkMax(maxPublic, counter.value(Scope.PUBLIC),", "+                 \"too.many.publicMethods\", ast);", "+        checkMax(maxTotal, counter.getTotal(), \"too.many.methods\", ast);"]}]}
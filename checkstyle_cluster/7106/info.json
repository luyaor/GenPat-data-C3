{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8aa65a4894becbf5c902ab2b9932f4b7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42f85721139b44649330e232ed5ae587", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "2b32b003ab81c9bfcb8205b512eb4ea313e529af", "commitAfterChange": "cc6caa71f55ae33ad8c018e3b7915e6b93b7de81", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isSuperCall(DetailAST ast)", "signatureAfterChange": "     private boolean isSuperCall(DetailAST ast)", "diff": ["-        // same name of method", "-        AST sibling = ast.getNextSibling();", "-        // ignore type parameters", "-        if (sibling != null", "-            && sibling.getType() == TokenTypes.TYPE_ARGUMENTS) {", "-            sibling = sibling.getNextSibling();", "-        }", "-        if (sibling == null || sibling.getType() != TokenTypes.IDENT) {", "+        if (isSameNameMethod(ast)) {", "-        final String name = sibling.getText();", "-        if (!getMethodName().equals(name)) {", "-            return false;", "-        }", "-", "-        // 0 parameters?", "-        final DetailAST args = parent.getNextSibling();", "-        if (args == null || args.getType() != TokenTypes.ELIST) {", "-            return false;", "-        }", "-        if (args.getChildCount() != 0) {", "+        if (isZeroParameters(parent)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce0bb0c45bbb72e1ede2661b90c392f4", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "94f9754acb5cc92a32bf36d2a789325fed384325", "commitAfterChange": "83f2b92b18eb10f3849b6a3be99a7b55b886cae0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static boolean isBooleanLiteralReturnStatement(AST ast)", "signatureAfterChange": "     private static boolean isBooleanLiteralReturnStatement(AST ast)", "diff": ["-        if (ast == null || ast.getType() != TokenTypes.LITERAL_RETURN) {", "-            return false;", "+        boolean booleanReturnStatement = false;", "+", "+        if (ast != null && ast.getType() == TokenTypes.LITERAL_RETURN) {", "+            final AST expr = ast.getFirstChild();", "+", "+            if (expr.getType() != TokenTypes.SEMI) {", "+                final AST value = expr.getFirstChild();", "+                booleanReturnStatement = isBooleanLiteralType(value.getType());", "+            }", "-", "-        final AST expr = ast.getFirstChild();", "-", "-        if (expr.getType() == TokenTypes.SEMI) {", "-            return false;", "-        }", "-", "-        final AST value = expr.getFirstChild();", "-        return isBooleanLiteralType(value.getType());", "+        return booleanReturnStatement;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec1292ff41aa6c8f9dfa1425733000d8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "3a51c61b4aa4b8feaa7eae8648a28d94d62bab0c", "commitAfterChange": "39f40e57858c8a5c6310bf35e6649b03188b6996", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean hasTrailComment(DetailAST aAst)", "signatureAfterChange": "     private boolean hasTrailComment(DetailAST aAst)", "diff": ["+        DetailAST semi;", "-            DetailAST comma = variableDef.getNextSibling();", "+            semi = variableDef.getNextSibling();", "-            if (comma.getType() != TokenTypes.COMMA) {", "-                comma = variableDef.getLastChild();", "+            if (semi.getType() != TokenTypes.SEMI) {", "+                semi = variableDef.getLastChild();", "+        }", "+        else {", "+            semi = getSemi(aAst);", "+        }", "-            final int lineNo = comma.getLineNo();", "+        if (semi != null) {", "+            final int lineNo = semi.getLineNo();", "-            if (sCommentRegexp.matcher(currentLine).find()) {", "+            if (currentLine != null && sCommentRegexp.matcher(currentLine).find()) {", "-        return mAllowByTailComment && result;", "+", "+        return result;", "+    }"]}]}
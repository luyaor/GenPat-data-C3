{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8fa0c874e26c5cb111d86d9f35638c5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0934d7ec0c9699ec80bd201ae6038ded", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/imports/CustomImportOrderCheckTest.java", "commitBeforeChange": "fb8c630359182a9b77da5ac3800bdbfd5d67676e", "commitAfterChange": "cbfe72383be737abacb4e78ddbb59a3036798605", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     @Test     public void testNonSpecifiedImports() throws Exception", "signatureAfterChange": "     @Test     public void testNonSpecifiedImports() throws Exception", "diff": ["-            \"9: \" + getCheckMessage(MSG_LEX, \"java.awt.Dialog\"),", "-            \"13: \" + getCheckMessage(MSG_LEX, \"java.io.File\"),", "-            \"15: \" + getCheckMessage(MSG_LEX, \"java.io.InputStream\"),", "-            \"18: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "-            \"20: \" + getCheckMessage(MSG_NONGROUP_IMPORT),", "-            \"21: \" + getCheckMessage(MSG_LINE_SEPARATOR, \"org.junit.*\"),", "+            \"10: \" + getCheckMessage(MSG_LEX, \"java.awt.Dialog\"),", "+            \"15: \" + getCheckMessage(MSG_LEX, \"java.io.File\"),", "+            \"20: \" + getCheckMessage(MSG_ORDER, \"SAME_PACKAGE\"),", "+            \"22: \" + getCheckMessage(MSG_NONGROUP_IMPORT),", "+            \"23: \" + getCheckMessage(MSG_LINE_SEPARATOR, \"org.junit.*\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41f7b168c214311560e6d133903af489", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter4formatting/rule451wheretobreak/MethodParamPadTest.java", "commitBeforeChange": "648871b6c87c84d3c24d58512a2f4ecd47f62017", "commitAfterChange": "cdfa561939a3475cd4c36b47a2433a0f70c9b6ff", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void operatorWrapTest() throws Exception", "signatureAfterChange": "      @Test     public void operatorWrapTest() throws Exception", "diff": ["-        final String messageKey = \"line.previous\";", "+        final String messageKeyPrevious = \"line.previous\";", "+        final String messageKeyPreceded = \"ws.preceded\";", "-            \"83:9: \" + getCheckMessage(clazz, messageKey, \"(\"),", "-            \"128:13: \" + getCheckMessage(clazz, messageKey, \"(\"),", "-            \"130:9: \" + getCheckMessage(clazz, messageKey, \"(\"),", "+            \"83:9: \" + getCheckMessage(clazz, messageKeyPrevious, \"(\"),", "+            \"128:13: \" + getCheckMessage(clazz, messageKeyPrevious, \"(\"),", "+            \"130:9: \" + getCheckMessage(clazz, messageKeyPrevious, \"(\"),", "+            \"353:15: \" + getCheckMessage(clazz, messageKeyPreceded, \"(\"),", "+            \"358:13: \" + getCheckMessage(clazz, messageKeyPrevious, \"(\"),"]}]}
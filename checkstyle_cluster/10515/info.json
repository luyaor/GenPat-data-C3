{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4ecc04e96c351dd715eefc9246747fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "157c3b4dfa7fb936d23322dee9de5336", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "4591d6cce61c34ddc0d2381896d94ab79ce6695c", "commitAfterChange": "e8d025321c3d1f5741e860bd96a93e7d2169ca9c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public final void configure(Configuration aConfiguration)         throws CheckstyleException", "signatureAfterChange": "     public final void configure(Configuration aConfiguration)         throws CheckstyleException", "diff": ["+                // BeanUtils.copyProperties silently ignores missing setters", "+                // for key, so we have to go through great lengths here to", "+                // figure out if the bean property really exists.", "+                PropertyDescriptor pd =", "+                        PropertyUtils.getPropertyDescriptor(this, key);", "+                if (pd == null || pd.getWriteMethod() == null) {", "+                    throw new CheckstyleException(", "+                        \"Property '\" + key + \"' in module \"", "+                        + aConfiguration.getName()", "+                        + \" does not exist, please check the documentation\");", "+                }", "+", "+                // finally we can set the bean property", "-                    \"for \" + aConfiguration.getName() + \" unable to set \" + key", "-                    + \" with \" + value);", "+                    \"Cannot set property '\" + key + \"' in module\"", "+                    + aConfiguration.getName() + \" to '\" + value", "+                    + \"': \" + e.getTargetException().getMessage());", "+            catch (NoSuchMethodException e) {", "+                throw new CheckstyleException(", "+                    \"cannot access \" + key + \" in \"", "+                    + this.getClass().getName());", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eb4f54ecf17dbdbea0882cf5adf46be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckConfiguration.java", "commitBeforeChange": "cd32cd1ab02fa47192c87af5dcfa9e579681723f", "commitAfterChange": "2effcfd0bcdfa7fc25bfff22e6f893ac6fb4478b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     Check createInstance(ClassLoader aLoader)         throws ClassNotFoundException, InstantiationException,         IllegalAccessException, InvocationTargetException,         NoSuchMethodException", "signatureAfterChange": "     Check createInstance(ClassLoader aLoader)         throws CheckstyleException", "diff": ["-        throws ClassNotFoundException, InstantiationException,", "-        IllegalAccessException, InvocationTargetException,", "-        NoSuchMethodException", "+        throws CheckstyleException", "-        final Class clazz = Class.forName(mClassname, true, aLoader);", "-        final Check check = (Check) clazz.newInstance();", "-        // TODO: need to set the properties", "-        // Loop setting the properties", "-        final Iterator keyIt = mProperties.keySet().iterator();", "-        while (keyIt.hasNext()) {", "-            final String key = (String) keyIt.next();", "-            final String value = (String) mProperties.get(key);", "-            BeanUtils.copyProperty(check, key, value);", "+        try {", "+            final Class clazz = Class.forName(mClassname, true, aLoader);", "+            final Check check = (Check) clazz.newInstance();", "+            // TODO: need to set the properties", "+            // Loop setting the properties", "+            final Iterator keyIt = mProperties.keySet().iterator();", "+            while (keyIt.hasNext()) {", "+                final String key = (String) keyIt.next();", "+                final String value = (String) mProperties.get(key);", "+                try {", "+                    BeanUtils.copyProperty(check, key, value);", "+                }", "+                catch (InvocationTargetException e) {", "+                    throw new CheckstyleException(", "+                        \"for check \" + mClassname + \" unable to set \" + key", "+                        + \" with \" + value);", "+                }", "+            }", "+            return check;", "-        return check;", "+        catch (ClassNotFoundException e) {", "+            throw new CheckstyleException(", "+                \"Unable to find class for \" + mClassname);", "+        }", "+        catch (InstantiationException e) {", "+            throw new CheckstyleException(", "+                \"Unable to instantiate \" + mClassname);", "+        }", "+        catch (IllegalAccessException e) {", "+            throw new CheckstyleException(", "+                \"Unable to instantiate \" + mClassname);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71abd8f1e6bdf683e35a9ba460d90b4c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/api/AutomaticBean.java", "commitBeforeChange": "e77eef412fe4b41d89fa21b790d7dc00eacb726f", "commitAfterChange": "8ec36bc770a78f423f6c0d0c37b9efd7981815ed", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public final void contextualize(Context aContext)             throws CheckstyleException", "signatureAfterChange": "     public final void contextualize(Context aContext)             throws CheckstyleException", "diff": ["+            catch (IllegalArgumentException e) {", "+                throw new CheckstyleException(", "+                    \"illegal value '\" + value + \"' for property '\" + key", "+                    + \"' of bean \" + this.getClass().getName());", "+            }", "+            catch (ConversionException e) {", "+                throw new CheckstyleException(", "+                    \"illegal value '\" + value + \"' for property '\" + key", "+                    + \"' of bean \" + this.getClass().getName());", "+            }"]}]}
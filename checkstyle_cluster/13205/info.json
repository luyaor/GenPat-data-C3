{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3b21aefc655995f8f697e7d04d8c0c3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4d8a385fcad4f1a425b85869e594562", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "39a7271a2a950a2ec71d73b95b6eef8d1079d487", "commitAfterChange": "615219883bbd43946f88da4da14ada0a86ab34e4", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "     void reportCatchBlock(int aLineNo, int aColNo, boolean aIsEmpty)", "signatureAfterChange": "     void reportCatchBlock(MyCommonAST[] aBraces, boolean aNoStmt)", "diff": ["-    void reportCatchBlock(int aLineNo, int aColNo, boolean aIsEmpty)", "+    void reportCatchBlock(MyCommonAST[] aBraces, boolean aNoStmt)", "-        if (aIsEmpty && !mConfig.isAllowEmptyCatch()) {", "-            log(aLineNo, aColNo - 1, \"Empty catch block.\");", "+        if (aNoStmt && (mConfig.getCatchBlock() == CatchBlockOption.STMT)) {", "+            log(aBraces[0].getLineNo(),", "+                aBraces[0].getColumnNo(),", "+                \"Must have at least one statement.\");", "+        }", "+        else if (mConfig.getCatchBlock() == CatchBlockOption.TEXT) {", "+            if (aBraces[0].getLineNo() == aBraces[1].getLineNo()) {", "+                // Handle braces on the same line", "+                final String txt = mLines[aBraces[0].getLineNo() - 1]", "+                    .substring(aBraces[0].getColumnNo() + 1,", "+                               aBraces[1].getColumnNo());", "+                if (txt.trim().length() == 0) {", "+                    log(aBraces[0].getLineNo(),", "+                        aBraces[0].getColumnNo(),", "+                        \"Empty catch block.\");", "+                }", "+            }", "+            else {", "+                // check only whitespace of first & last lines", "+                if ((mLines[aBraces[0].getLineNo() - 1]", "+                     .substring(aBraces[0].getColumnNo() + 1).trim().length()", "+                     == 0)", "+                    &&", "+                    (mLines[aBraces[1].getLineNo() - 1]", "+                     .substring(0, aBraces[1].getColumnNo()).trim().length()", "+                     == 0))", "+                {", "+", "+                    // Need to check if all lines are also only whitespace", "+                    boolean isBlank = true;", "+                    for (int i = aBraces[0].getLineNo();", "+                         i < (aBraces[1].getLineNo() - 1);", "+                         i++)", "+                    {", "+                        if (mLines[i].trim().length() > 0) {", "+                            isBlank = false;", "+                            break;", "+                        }", "+                    }", "+", "+                    if (isBlank) {", "+                        log(aBraces[0].getLineNo(),", "+                            aBraces[0].getColumnNo(),", "+                            \"Empty catch block.\");", "+                    }", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "babb70c73ff5b489d8daa86f8f8c20a5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "dc92fd1b89e33067adc5b2bf51df76b8d488b0bf", "commitAfterChange": "4018efa9fefa66e599369ace1cb189b02ae64fa7", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "     void reportCatchBlock(MyCommonAST[] aBraces, boolean aNoStmt)", "signatureAfterChange": "     void reportCatchBlock(MyCommonAST[] aBraces, boolean aNoStmt)", "diff": ["-        if (aNoStmt && (mConfig.getCatchBlock() == CatchBlockOption.STMT)) {", "-            log(aBraces[0].getLineNo(),", "-                aBraces[0].getColumnNo(),", "-                \"Must have at least one statement.\");", "-        }", "-        else if (mConfig.getCatchBlock() == CatchBlockOption.TEXT) {", "-            if (aBraces[0].getLineNo() == aBraces[1].getLineNo()) {", "-                // Handle braces on the same line", "-                final String txt = mLines[aBraces[0].getLineNo() - 1]", "-                    .substring(aBraces[0].getColumnNo() + 1,", "-                               aBraces[1].getColumnNo());", "-                if (txt.trim().length() == 0) {", "-                    log(aBraces[0].getLineNo(),", "-                        aBraces[0].getColumnNo(),", "-                        \"Empty catch block.\");", "-                }", "-            }", "-            else {", "-                // check only whitespace of first & last lines", "-                if ((mLines[aBraces[0].getLineNo() - 1]", "-                     .substring(aBraces[0].getColumnNo() + 1).trim().length()", "-                     == 0)", "-                    && (mLines[aBraces[1].getLineNo() - 1]", "-                        .substring(0, aBraces[1].getColumnNo()).trim().length()", "-                        == 0))", "-                {", "+        checkBlock(\"catch\", mConfig.getCatchBlock(), aBraces, aNoStmt);", "+    }", "-                    // Need to check if all lines are also only whitespace", "-                    boolean isBlank = true;", "-                    for (int i = aBraces[0].getLineNo();", "-                         i < (aBraces[1].getLineNo() - 1);", "-                         i++)", "-                    {", "-                        if (mLines[i].trim().length() > 0) {", "-                            isBlank = false;", "-                            break;", "-                        }", "-                    }", "-", "-                    if (isBlank) {", "-                        log(aBraces[0].getLineNo(),", "-                            aBraces[0].getColumnNo(),", "-                            \"Empty catch block.\");", "-                    }", "-                }", "-            }", "-        }"]}]}
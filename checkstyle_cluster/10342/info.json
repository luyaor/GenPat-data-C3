{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd82fb5d5a47c0cb432dae4ef549163d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad94731ca22950459d3024a0e0e4057", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "bb1db4938ccae0f7149461ea372398fb8a53f2a8", "commitAfterChange": "15b8debf99b3b0c600084fccde54d9562bd48b71", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void checkThrowsTags(List aTags, List aThrows)", "signatureAfterChange": "     private void checkThrowsTags(List aTags, List aThrows)", "diff": ["-            if (!found", "-                && (mAllowThrowsTagsForSubclasses || mAllowUndeclaredRTE))", "-            {", "-                documentedClass = resolveClass(documentedEx);", "-                if (documentedClass == null) {", "-                    log(tag.getLineNo(), \"javadoc.classInfo\",", "-                        \"@throws\", documentedEx);", "-                }", "-            }", "+            boolean classLoaded = false;", "-                else if (mAllowThrowsTagsForSubclasses", "-                         && documentedClass != null)", "-                {", "-                    if (ei.isLoadable() && ei.getClazz() == null) {", "-                        // if the class is not loaded yet.", "-                        // try to load it.", "-                        ei.setClazz(resolveClass(declaredEx));", "-                        if (!ei.isLoadable()) {", "-                            log(fi.getLineNo(), \"javadoc.classInfo\",", "-                                \"@throws\", declaredEx);", "-                        }", "+                else if (mAllowThrowsTagsForSubclasses) {", "+                    if (!classLoaded) {", "+                        documentedClass = loadClassForTag(tag);", "+                        classLoaded = true;", "-", "-                if (mAllowUndeclaredRTE && documentedClass != null) {", "+                if (mAllowUndeclaredRTE) {", "+                    if (!classLoaded) {", "+                        documentedClass = loadClassForTag(tag);", "+                        classLoaded = true;", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aef6c2552f3fb18b7a6defea6e9c3b1c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/ant/CheckstyleAntTask.java", "commitBeforeChange": "d740f2e1cdb05f20a48bf7d5dcebdcd0faae6ddd", "commitAfterChange": "3ef918920c58c550169ccef3cfe1706aede11a6e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "     private void realExecute()", "signatureAfterChange": "     private void realExecute(String checkstyleVersion)", "diff": ["-    private void realExecute() {", "-        // output version info in debug mode", "-        final ResourceBundle compilationProperties = ResourceBundle", "-                .getBundle(\"checkstylecompilation\");", "-        final String version = compilationProperties", "-                .getString(\"checkstyle.compile.version\");", "-        final String compileTimestamp = compilationProperties", "-                .getString(\"checkstyle.compile.timestamp\");", "-        log(\"checkstyle version \" + version, Project.MSG_VERBOSE);", "-        log(\"compiled on \" + compileTimestamp, Project.MSG_VERBOSE);", "-", "-        // Check for no arguments", "-        if (fileName == null && fileSets.isEmpty()) {", "-            throw new BuildException(", "-                    \"Must specify at least one of 'file' or nested 'fileset'.\",", "-                    getLocation());", "-        }", "-", "-        if (configLocation == null) {", "-            throw new BuildException(\"Must specify 'config'.\", getLocation());", "-        }", "-", "+    private void realExecute(String checkstyleVersion) {", "+            // setup the listeners", "+            final AuditListener[] listeners = getListeners();", "+            for (AuditListener element : listeners) {", "+                checker.addListener(element);", "+            }", "-            processFiles(checker, warningCounter, version);", "+            processFiles(checker, warningCounter, checkstyleVersion);"]}]}
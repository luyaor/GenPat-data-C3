{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de8055b7b3f23da6f78d937fb69832e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "511019e1f85aceae61484d95d489d531", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/FileContents.java", "commitBeforeChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "commitAfterChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Deprecated public FileContents(String aFilename, String[] aLines)", "signatureAfterChange": "     @Deprecated public FileContents(String filename, String[] lines)", "diff": ["-    @Deprecated public FileContents(String aFilename, String[] aLines)", "+    @Deprecated public FileContents(String filename, String[] lines)", "-        mFilename = aFilename;", "-        mText = FileText.fromLines(new File(aFilename), Arrays.asList(aLines));", "+        this.filename = filename;", "+        text = FileText.fromLines(new File(filename), Arrays.asList(lines));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6717f869033428e7ea85aa787639f29f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-    public void visitToken(DetailAST aAST)", "+    public void visitToken(DetailAST ast)", "-        if (isOverridingMethod(aAST)) {", "-            mMethodStack.add(new MethodNode(aAST));", "+        if (isOverridingMethod(ast)) {", "+            methodStack.add(new MethodNode(ast));", "-        else if (isSuperCall(aAST)) {", "-            final MethodNode methodNode = mMethodStack.getLast();", "+        else if (isSuperCall(ast)) {", "+            final MethodNode methodNode = methodStack.getLast();"]}]}
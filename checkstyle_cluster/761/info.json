{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25273fcfa68fdc28a698f79da1a801cd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c06654185ae40d44baea5f18b771206", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "8aec5bba7ea5d9c702db9a116d005ad81afbf1ad", "commitAfterChange": "085ce12db0983590844ccc24ea49f91686a30ed8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private void checkTypeParamTag(final int lineNo,             final List<JavadocTag> tags, final String typeParamName)", "signatureAfterChange": "     private void checkTypeParamTag(final int lineNo,             final List<JavadocTag> tags, final String typeParamName)", "diff": ["-                && tag.getFirstArg().indexOf(\"<\" + typeParamName + \">\") == 0) {", "+                && tag.getFirstArg().indexOf(OPEN_ANGLE_BRACKET", "+                        + typeParamName + CLOSE_ANGLE_BRACKET) == 0) {", "-            log(lineNo, MISSING_TAG,", "-                JavadocTagInfo.PARAM.getText() + \" <\" + typeParamName + \">\");", "+            log(lineNo, MISSING_TAG, JavadocTagInfo.PARAM.getText()", "+                + \" \" + OPEN_ANGLE_BRACKET + typeParamName + CLOSE_ANGLE_BRACKET);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8f304f1ffaaab3a430cbf53936e33ba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/MainTest.java", "commitBeforeChange": "de7ba5593d58e6dc99430b3c640bfdac69082f17", "commitAfterChange": "8a3ccee4918bc1ce5f6bc2dfea51389a59684eb0", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "      @Test     public void testExistingTargetFilePlainOutputToNonExistingFile()             throws Exception", "signatureAfterChange": "      @Test     public void testExistingTargetFilePlainOutputToNonExistingFile()             throws Exception", "diff": ["-        exit.expectSystemExitWithStatus(1);", "+        exit.expectSystemExitWithStatus(0);", "-                assertEquals(\"Could not find file 'myjava.java'.\" + System.lineSeparator(),", "-                    standardLog.getLog());", "+                assertEquals(\"\", standardLog.getLog());", "-                \"-o\", \"myjava.java\",", "+                \"-o\", temporaryFolder.getRoot() + \"/output.txt\","]}]}
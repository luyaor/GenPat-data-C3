{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fec2fce74afea52afd7ca561a977b4cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a087dd1a0ce1dbf392a7b15a77eedca", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundTest.java", "commitBeforeChange": "9d41bddb46e5fbe291be4cdb347dee18ea4424fe", "commitAfterChange": "14d21b831c3901ed29579918ae27f0568c605a9f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public void testGenericsTokensAreFlagged()         throws Exception", "signatureAfterChange": "      public void testGenericsTokensAreFlagged()         throws Exception", "diff": ["-            \"6:69: '>' is not preceded with whitespace.\",", "+            \"6:91: '<' is not preceded with whitespace.\",", "+            \"6:92: '<' is not followed by whitespace.\",", "+            \"6:92: '?' is not preceded with whitespace.\",", "+            \"6:117: '>' is not preceded with whitespace.\",", "+            \"6:118: '>' is not followed by whitespace.\",", "+            \"6:118: '>' is not preceded with whitespace.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d0c0bcd88bcb9b2e3e6b040e7123922", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/coding/RedundantThrowsCheckTest.java", "commitBeforeChange": "1c7341013d0e8a34498eb49ccdb4e91419f13280", "commitAfterChange": "cd89321522d9bf7fc10547e743fb8bbb4c993791", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public void test() throws Exception", "signatureAfterChange": "     public void testDefaults() throws Exception", "diff": ["-    public void test() throws Exception", "+    public void testDefaults() throws Exception", "+            \"35:27: Unable to get class information for WrongException.\",", "+            \"39:27: Redundant throws: 'NullPointerException' is subclass of 'RuntimeException'.\",", "+            \"39:27: Redundant throws: 'NullPointerException' is unchecked exception.\",", "+            \"39:49: Redundant throws: 'RuntimeException' is unchecked exception.\","]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f8d034e9904b8614101e5b097f897bc", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/checks/imports/PkgControlTest.java", "commitBeforeChange": "28c5d6f06244f45a5673a3ef5bd0d927b0042496", "commitAfterChange": "a5d30bf353dde01376d45fb031d9236b11a835d1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      public void testCheckAccess()", "signatureAfterChange": "      public void testCheckAccess()", "diff": ["-        assertEquals(AccessResult.DISALLOWED, pcCommon", "-                .checkAccess(\"org.springframework.something\"));", "+        assertEquals(AccessResult.DISALLOWED, pcCommon.checkAccess(", "+                \"org.springframework.something\",", "+                \"com.kazgroup.courtlink.common\"));", "-                .checkAccess(\"org.apache.commons.something\"));", "-        assertEquals(AccessResult.DISALLOWED, pcCommon", "-                .checkAccess(\"org.apache.commons\"));", "-        assertEquals(AccessResult.ALLOWED, pcCommon", "-                .checkAccess(\"org.hibernate.something\"));", "-        assertEquals(AccessResult.DISALLOWED, pcCommon", "-                .checkAccess(\"com.badpackage.something\"));", "-        assertEquals(AccessResult.DISALLOWED, pcRoot", "-                .checkAccess(\"org.hibernate.something\"));", "+                .checkAccess(\"org.apache.commons.something\",", "+                        \"com.kazgroup.courtlink.common\"));", "+        assertEquals(AccessResult.DISALLOWED, pcCommon.checkAccess(", "+                \"org.apache.commons\", \"com.kazgroup.courtlink.common\"));", "+        assertEquals(AccessResult.ALLOWED, pcCommon.checkAccess(", "+                \"org.hibernate.something\", \"com.kazgroup.courtlink.common\"));", "+        assertEquals(AccessResult.DISALLOWED, pcCommon.checkAccess(", "+                \"com.badpackage.something\", \"com.kazgroup.courtlink.common\"));", "+        assertEquals(AccessResult.DISALLOWED, pcRoot.checkAccess(", "+                \"org.hibernate.something\", \"com.kazgroup.courtlink\"));"]}]}
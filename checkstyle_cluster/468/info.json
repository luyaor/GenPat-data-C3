{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af9e00ecc004b200f46c2f1392d89749", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50c090683500010710cb5d4309367262", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/EmptyBlockCheck.java", "commitBeforeChange": "d471c9cd5437242b7d9e3f3c19409854fc74e50c", "commitAfterChange": "982b3963ca007c6101f69cf50c010f07292dab0e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public EmptyBlockCheck()", "signatureAfterChange": "      private boolean hasText(final DetailAST slistAST)", "diff": ["-     */", "-    public EmptyBlockCheck()", "-    {", "-        mCheckFor.add(\"if\");", "-        mCheckFor.add(\"try\");", "-        mCheckFor.add(\"catch\");", "-        mCheckFor.add(\"finally\");", "-        // TODO: currently there is no way to differenciate between if and", "-        // else is not available as a parent token, instead if has two", "-        // statement children needs grammar change or workaround here to make", "-        // config simple", "-    }", "+    private boolean hasText(final DetailAST slistAST)", "+    {", "+        boolean retVal = false;", "+        ", "+        final DetailAST rcurlyAST = slistAST.findFirstToken(TokenTypes.RCURLY);", "+        if (rcurlyAST != null) {", "+            final int slistLineNo = slistAST.getLineNo();", "+            final int slistColNo = slistAST.getColumnNo();", "+            final int rcurlyLineNo = rcurlyAST.getLineNo();", "+            final int rcurlyColNo = rcurlyAST.getColumnNo();", "+            final String[] lines = getLines();", "+            if (slistLineNo == rcurlyLineNo) {", "+                // Handle braces on the same line", "+                final String txt = lines[slistLineNo - 1]", "+                    .substring(slistColNo + 1, rcurlyColNo);", "+                if (txt.trim().length() != 0) {", "+                     retVal = true;", "+                }", "+            }", "+            else {", "+                // check only whitespace of first & last lines", "+                if ((lines[slistLineNo - 1]", "+                     .substring(slistColNo + 1).trim().length() != 0)", "+                    || (lines[rcurlyLineNo - 1]", "+                        .substring(0, rcurlyColNo).trim().length() != 0))", "+                {", "+                    retVal = true;", "+                }", "+                else {", "+                    // check if all lines are also only whitespace", "+                    for (int i = slistLineNo; i < (rcurlyLineNo - 1); i++)", "+                    {", "+                        if (lines[i].trim().length() > 0) {", "+                            retVal = true;", "+                            break;", "+                        }", "+                    }", "+                }", "+            }", "+        }               ", "+        return retVal;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4d2a52d0372b9c744e8456182292aac", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "     void verifyMethodJavadoc(MyModifierSet aMods,                              MyCommonAST aReturnType,                              MethodSignature aSig);", "signatureAfterChange": "     void verifyMethod(MyModifierSet aMods,                       MyCommonAST aReturnType,                       MethodSignature aSig)", "diff": ["-    void verifyMethodJavadoc(MyModifierSet aMods,", "+    void verifyMethod(MyModifierSet aMods,", "+                      MyCommonAST aReturnType,", "+                      MethodSignature aSig)", "+    {", "+        // Always verify the parameters are ok", "+        for (Iterator it = aSig.getParams().iterator(); it.hasNext(); ) {", "+            verifyParameter((LineText) it.next());", "+        }", "+", "+", "+        // now check the javadoc", "+        final Scope methodScope =", "+            inInterfaceBlock() ? Scope.PUBLIC : aMods.getVisibilityScope();", "+", "+        if (!inCheckScope(methodScope)) {", "+            return; // no need to really check anything", "+        }", "+", "+        // Calculate line number. Unfortunately aReturnType does not contain a", "+        // valid line number", "+        final int lineNo = (aMods.size() > 0)", "+            ? aMods.getFirstLineNo()", "+            : aSig.getLineNo();", "+", "+        final boolean isFunction = (aReturnType == null)", "+            ? false", "+            : !\"void\".equals(aReturnType.getText().trim());", "+", "+        final String[] jd = getJavadocBefore(lineNo - 1);", "+        if (jd == null) {", "+            log(lineNo, \"method is missing a Javadoc comment.\");", "+        }", "+        else {", "+            final List tags = getMethodTags(jd, lineNo - 1);", "+            // Check for only one @see tag", "+            if ((tags.size() != 1) ||", "+                !((JavadocTag) tags.get(0)).isSeeTag())", "+            {", "+                checkParamTags(tags, aSig.getParams());", "+                checkThrowsTags(tags, aSig.getThrows());", "+                if (isFunction) {", "+                    checkReturnTag(tags, lineNo);", "+                }", "+", "+                // Dump out all unused tags", "+                final Iterator it = tags.iterator();", "+                while (it.hasNext()) {", "+                    final JavadocTag jt = (JavadocTag) it.next();", "+                    if (!jt.isSeeTag()) {", "+                        log(jt.getLineNo(), \"Unused Javadoc tag.\");", "+                    }", "+                }", "+            }", "+        }", "+    }"]}]}
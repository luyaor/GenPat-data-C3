{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0a9a40bfe1aaaa7cae93f1efe605bb8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07f4bbffaa5ad622fa8e49f5fa35a91c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "eddd0de3702b944a07cc8d2fbfb5744b7cc70bea", "commitAfterChange": "cea86a6cad3098ebcdb4a88db2e49477b07e0d93", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void verifyBrace(final DetailAST aBrace,                              final DetailAST aStartToken)", "signatureAfterChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "diff": ["-    private void verifyBrace(final DetailAST aBrace,", "-                             final DetailAST aStartToken)", "+    private void verifyBrace(final DetailAST brace,", "+                             final DetailAST startToken)", "-        final String braceLine = getLine(aBrace.getLineNo() - 1);", "+        final String braceLine = getLine(brace.getLineNo() - 1);", "-        final int prevLineLen = (aBrace.getLineNo() == 1)", "-            ? mMaxLineLength", "-            : Utils.lengthMinusTrailingWhitespace(getLine(aBrace.getLineNo() - 2));", "+        final int prevLineLen = (brace.getLineNo() == 1)", "+            ? maxLineLength", "+            : Utils.lengthMinusTrailingWhitespace(getLine(brace.getLineNo() - 2));", "-        if ((braceLine.length() > (aBrace.getColumnNo() + 1))", "-            && (braceLine.charAt(aBrace.getColumnNo() + 1) == '}'))", "+        if ((braceLine.length() > (brace.getColumnNo() + 1))", "+            && (braceLine.charAt(brace.getColumnNo() + 1) == '}'))", "-            if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "-                        MSG_KEY_LINE_NEW, \"{\");", "+            if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                log(brace.getLineNo(), brace.getColumnNo(),", "+                    MSG_KEY_LINE_NEW, \"{\");", "-            if (Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)", "-                && ((prevLineLen + 2) <= mMaxLineLength))", "+            if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)", "+                && ((prevLineLen + 2) <= maxLineLength))", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "-                        MSG_KEY_LINE_PREVIOUS, \"{\");", "+                log(brace.getLineNo(), brace.getColumnNo(),", "+                    MSG_KEY_LINE_PREVIOUS, \"{\");", "-            if (!hasLineBreakAfter(aBrace)) {", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);", "+            if (!hasLineBreakAfter(brace)) {", "+                log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);", "-            if (aStartToken.getLineNo() == aBrace.getLineNo()) {", "+            if (startToken.getLineNo() == brace.getLineNo()) {", "-            else if ((aStartToken.getLineNo() + 1) == aBrace.getLineNo()) {", "-                if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                    log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+            else if ((startToken.getLineNo() + 1) == brace.getLineNo()) {", "+                if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                    log(brace.getLineNo(), brace.getColumnNo(),", "-                else if ((prevLineLen + 2) <= mMaxLineLength) {", "-                    log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+                else if ((prevLineLen + 2) <= maxLineLength) {", "+                    log(brace.getLineNo(), brace.getColumnNo(),", "-            else if (!Utils.whitespaceBefore(aBrace.getColumnNo(), braceLine)) {", "-                log(aBrace.getLineNo(), aBrace.getColumnNo(),", "+            else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                log(brace.getLineNo(), brace.getColumnNo(),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e0be0fc0d922cbda1bfe8f4b5b5988c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "1c8180d74fbed939e5de56ee87760032f42f8df6", "commitAfterChange": "04ceb4b91f4e66439479406834f42014c5be62ed", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "signatureAfterChange": "     private void verifyBrace(final DetailAST brace,                              final DetailAST startToken)", "diff": ["-        if (braceLine.length() > brace.getColumnNo() + 1", "-            && braceLine.charAt(brace.getColumnNo() + 1) == '}')", "+        if (braceLine.length() <= brace.getColumnNo() + 1", "+                || braceLine.charAt(brace.getColumnNo() + 1) != '}')", "-            // ignore", "-        }", "-        else if (getAbstractOption() == LeftCurlyOption.NL) {", "-            if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                log(brace.getLineNo(), brace.getColumnNo(),", "-                    MSG_KEY_LINE_NEW, \"{\");", "-            }", "-        }", "-        else if (getAbstractOption() == LeftCurlyOption.EOL) {", "-            if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)", "-                && prevLineLen + 2 <= maxLineLength)", "-            {", "-                log(brace.getLineNo(), brace.getColumnNo(),", "-                    MSG_KEY_LINE_PREVIOUS, \"{\");", "-            }", "-            if (!hasLineBreakAfter(brace)) {", "-                log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);", "-            }", "-        }", "-        else if (getAbstractOption() == LeftCurlyOption.NLOW) {", "-            if (startToken.getLineNo() == brace.getLineNo()) {", "-                // all ok as on the same line", "-            }", "-            else if (startToken.getLineNo() + 1 == brace.getLineNo()) {", "+            if (getAbstractOption() == LeftCurlyOption.NL) {", "-                else if (prevLineLen + 2 <= maxLineLength) {", "+            }", "+            else if (getAbstractOption() == LeftCurlyOption.EOL) {", "+                if (Utils.whitespaceBefore(brace.getColumnNo(), braceLine)", "+                    && prevLineLen + 2 <= maxLineLength)", "+                {", "+                if (!hasLineBreakAfter(brace)) {", "+                    log(brace.getLineNo(), brace.getColumnNo(), MSG_KEY_LINE_BREAK_AFTER);", "+                }", "-            else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "-                log(brace.getLineNo(), brace.getColumnNo(),", "-                    MSG_KEY_LINE_NEW, \"{\");", "+            else if (getAbstractOption() == LeftCurlyOption.NLOW", "+                    && startToken.getLineNo() != brace.getLineNo())", "+            {", "+                // not on the same line", "+                if (startToken.getLineNo() + 1 == brace.getLineNo()) {", "+                    if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                        log(brace.getLineNo(), brace.getColumnNo(),", "+                                MSG_KEY_LINE_NEW, \"{\");", "+                    }", "+                    else if (prevLineLen + 2 <= maxLineLength) {", "+                        log(brace.getLineNo(), brace.getColumnNo(),", "+                                MSG_KEY_LINE_PREVIOUS, \"{\");", "+                    }", "+                }", "+                else if (!Utils.whitespaceBefore(brace.getColumnNo(), braceLine)) {", "+                    log(brace.getLineNo(), brace.getColumnNo(),", "+                            MSG_KEY_LINE_NEW, \"{\");", "+                }"]}]}
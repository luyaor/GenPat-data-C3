{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf80a6bf9a83c4d65c06dfa9a7c8a9ec", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d7d1323d663abc4d8e8c1510b3e8769", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/WriteTagCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private void checkTag(             int aLineNo,             String[] aComment,             String aTag,             Pattern aTagRE,             Pattern aFormatRE,             String aFormat)", "signatureAfterChange": "     private void checkTag(             int lineNo,             String[] comment,             String tag,             Pattern tagRE,             Pattern formatRE,             String format)", "diff": ["-            int aLineNo,", "-            String[] aComment,", "-            String aTag,", "-            Pattern aTagRE,", "-            Pattern aFormatRE,", "-            String aFormat)", "+            int lineNo,", "+            String[] comment,", "+            String tag,", "+            Pattern tagRE,", "+            Pattern formatRE,", "+            String format)", "-        if (aTagRE == null) {", "+        if (tagRE == null) {", "-        for (int i = 0; i < aComment.length; i++) {", "-            final String s = aComment[i];", "-            final Matcher matcher = aTagRE.matcher(s);", "+        for (int i = 0; i < comment.length; i++) {", "+            final String s = comment[i];", "+            final Matcher matcher = tagRE.matcher(s);", "-                if ((aFormatRE != null) && !aFormatRE.matcher(content).find()) {", "-                    log(aLineNo + i - aComment.length, \"type.tagFormat\", aTag,", "-                        aFormat);", "+                if ((formatRE != null) && !formatRE.matcher(content).find()) {", "+                    log(lineNo + i - comment.length, \"type.tagFormat\", tag,", "+                        format);", "-                    logTag(aLineNo + i - aComment.length, aTag, content);", "+                    logTag(lineNo + i - comment.length, tag, content);", "-            log(aLineNo, \"type.missingTag\", aTag);", "+            log(lineNo, \"type.missingTag\", tag);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb8f08ffe4ccd1410d811ec57ccd5464", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocTypeCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void checkTag(int aLineNo, List<JavadocTag> aTags, String aTag,                           Pattern aFormatPattern, String aFormat)", "signatureAfterChange": "     private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,                           Pattern formatPattern, String format)", "diff": ["-    private void checkTag(int aLineNo, List<JavadocTag> aTags, String aTag,", "-                          Pattern aFormatPattern, String aFormat)", "+    private void checkTag(int lineNo, List<JavadocTag> tags, String tagName,", "+                          Pattern formatPattern, String format)", "-        if (aFormatPattern == null) {", "+        if (formatPattern == null) {", "-        for (int i = aTags.size() - 1; i >= 0; i--) {", "-            final JavadocTag tag = aTags.get(i);", "-            if (tag.getTagName().equals(aTag)) {", "+        for (int i = tags.size() - 1; i >= 0; i--) {", "+            final JavadocTag tag = tags.get(i);", "+            if (tag.getTagName().equals(tagName)) {", "-                if (!aFormatPattern.matcher(tag.getArg1()).find()) {", "-                    log(aLineNo, \"type.tagFormat\", \"@\" + aTag, aFormat);", "+                if (!formatPattern.matcher(tag.getArg1()).find()) {", "+                    log(lineNo, \"type.tagFormat\", \"@\" + tagName, format);", "-            log(aLineNo, \"type.missingTag\", \"@\" + aTag);", "+            log(lineNo, \"type.missingTag\", \"@\" + tagName);"]}]}
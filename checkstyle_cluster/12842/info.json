{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "538fb599706fd8c80142147180ec5f8a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0176a4ac68ed0f5cc5852d00dbaaf826", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressionsLoader.java", "commitBeforeChange": "c6edc74a2cf7a5e2c9affef6d0e1e931f783b462", "commitAfterChange": "795234dba5ed1ba32827051748d3c92657ad287d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static FilterSet loadSuppressions(String aFilename)         throws CheckstyleException", "signatureAfterChange": "     public static FilterSet loadSuppressions(String aFilename)         throws CheckstyleException", "diff": ["-        InputStream fis;", "-            fis = new FileInputStream(aFilename);", "+            // figure out if this is a File or a URL", "+            URI uri;", "+            try {", "+                final URL url = new URL(aFilename);", "+                uri = url.toURI();", "+            }", "+            catch (final MalformedURLException ex) {", "+                uri = null;", "+            }", "+            catch (final URISyntaxException ex) {", "+                // URL violating RFC 2396", "+                uri = null;", "+            }", "+            if (uri == null) {", "+                final File file = new File(aFilename);", "+                if (file.exists()) {", "+                    uri = file.toURI();", "+                }", "+                else {", "+                    // check to see if the file is in the classpath", "+                    try {", "+                        final URL configUrl = SuppressionsLoader.class", "+                                .getResource(aFilename);", "+                        if (configUrl == null) {", "+                            throw new FileNotFoundException(aFilename);", "+                        }", "+                        uri = configUrl.toURI();", "+                    }", "+                    catch (final URISyntaxException e) {", "+                        throw new FileNotFoundException(aFilename);", "+                    }", "+                }", "+            }", "+            final InputSource source = new InputSource(uri.toString());", "+            return loadSuppressions(source, aFilename);", "-            if (aFilename.matches(\"^https?://.+\")) {", "-                // this is a URL, load it as such", "-                try {", "-                    fis = new URL(aFilename).openStream();", "-                }", "-                catch (MalformedURLException e1) {", "-                    throw new CheckstyleException(", "-                        \"Invalid URL: \" + aFilename, e1);", "-                }", "-                catch (IOException e1) {", "-                    throw new CheckstyleException(", "-                        \"unable to read \" + aFilename, e1);", "-                }", "-            }", "-            else {", "-                // check for the file in the classpath", "-                fis = SuppressionsLoader.class.getResourceAsStream(aFilename);", "-            }", "-            if (fis == null) {", "-                throw new CheckstyleException(\"unable to find \" + aFilename, e);", "-            }", "+            throw new CheckstyleException(\"unable to find \" + aFilename, e);", "-        final InputSource source = new InputSource(fis);", "-        return loadSuppressions(source, aFilename);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c26d4fdd629281f395349c66535b2eb2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "6e96026ec6d95fc5eadd3044cab91c24c73c8e0c", "commitAfterChange": "e00c478dd61d9d883e41b500b780ab217582c2e7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     public String normalize(String aPath)", "signatureAfterChange": "     public String normalize(String aPath)", "diff": ["-        final String orig = aPath;", "-", "-        aPath = aPath.replace('/', File.separatorChar).replace('\\\\',", "-                File.separatorChar);", "+        String path = aPath.replace('/', File.separatorChar).replace('\\\\',", "+            File.separatorChar);", "-        final int colon = aPath.indexOf(\":\");", "+        final int colon = path.indexOf(\":\");", "-            if (!aPath.startsWith(File.separator)", "-                && !((aPath.length() >= 2)", "-                     && Character.isLetter(aPath.charAt(0)) && (colon == 1)))", "+            if (!path.startsWith(File.separator)", "+                && !((path.length() >= 2)", "+                     && Character.isLetter(path.charAt(0)) && (colon == 1)))", "-                final String msg = aPath + \" is not an absolute path\";", "+                final String msg = path + \" is not an absolute path\";", "-            if (!aPath.startsWith(File.separator) && (colon == -1)) {", "-                final String msg = aPath + \" is not an absolute path\";", "+            if (!path.startsWith(File.separator) && (colon == -1)) {", "+                final String msg = path + \" is not an absolute path\";", "-        if ((!onNetWare && (aPath.length() >= 2)", "-             && Character.isLetter(aPath.charAt(0)) && (aPath.charAt(1) == ':'))", "+        if ((!onNetWare && (path.length() >= 2)", "+             && Character.isLetter(path.charAt(0)) && (path.charAt(1) == ':'))", "-            final char[] ca = aPath.replace('/', '\\\\').toCharArray();", "+            final char[] ca = path.replace('/', '\\\\').toCharArray();", "-            if (colon + 1 < aPath.length()) {", "+            if (colon + 1 < path.length()) {", "-            aPath = sbPath.toString().replace('\\\\', File.separatorChar);", "+            path = sbPath.toString().replace('\\\\', File.separatorChar);", "-            if (aPath.length() == 1) {", "+            if (path.length() == 1) {", "-                aPath = \"\";", "+                path = \"\";", "-            else if (aPath.charAt(1) == File.separatorChar) {", "+            else if (path.charAt(1) == File.separatorChar) {", "-                aPath = aPath.substring(2);", "+                path = path.substring(2);", "-                aPath = aPath.substring(1);", "+                path = path.substring(1);", "-        final StringTokenizer tok = new StringTokenizer(aPath, File.separator);", "+        final StringTokenizer tok = new StringTokenizer(path, File.separator);", "-                            + orig);", "+                            + aPath);", "-        aPath = sb.toString();", "+        path = sb.toString();", "-            aPath = aPath.replace('/', '\\\\');", "+            path = path.replace('/', '\\\\');", "-        return aPath;", "+        return path;"]}]}
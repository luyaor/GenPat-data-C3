{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a576007b920027676a20acea16474c4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34842ac914f482ef0319a9bf68edd009", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "01b9628d3451c5c999facc0d1b88aeb085cceb6c", "commitAfterChange": "a8f5fa3225e1c1ac96b28fbf16db1d51aa361a71", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "     private DetailNode convertParseTree2DetailNode(ParseTree rootParseTree)", "signatureAfterChange": "     private DetailNode convertParseTree2DetailNode(ParseTree parseTreeNode)", "diff": ["-    private DetailNode convertParseTree2DetailNode(ParseTree rootParseTree)", "+    private DetailNode convertParseTree2DetailNode(ParseTree parseTreeNode)", "-        final ParseTree currentParseTreeNode = rootParseTree;", "-        final JavadocNodeImpl rootJavadocNode = createJavadocNode(currentParseTreeNode, null, -1);", "+        final JavadocNodeImpl rootJavadocNode = createJavadocNode(parseTreeNode, null, -1);", "-        int childCount = currentParseTreeNode.getChildCount();", "-        JavadocNodeImpl[] children = (JavadocNodeImpl[]) rootJavadocNode.getChildren();", "+        int childCount = parseTreeNode.getChildCount();", "+        JavadocNodeImpl[] children = new JavadocNodeImpl[childCount];", "-            final JavadocNodeImpl child = createJavadocNode(currentParseTreeNode.getChild(i)", "+            final JavadocNodeImpl child = createJavadocNode(parseTreeNode.getChild(i)", "+        rootJavadocNode.setChildren(children);", "-        ParseTree currentParseTreeParent = currentParseTreeNode;", "+        ParseTree parseTreeParent = parseTreeNode;", "-                final ParseTree currentParseTreeNodeChild = currentParseTreeParent.getChild(i);", "+                final ParseTree currentParseTreeNodeChild = parseTreeParent.getChild(i);", "-                final JavadocNodeImpl[] subChildren = (JavadocNodeImpl[]) currentJavadocNode", "-                        .getChildren();", "+                final JavadocNodeImpl[] subChildren =", "+                        new JavadocNodeImpl[currentJavadocNode.getChildren().length];", "+                currentJavadocNode.setChildren(subChildren);", "-                currentParseTreeParent = currentParseTreeParent.getChild(0);", "+                parseTreeParent = parseTreeParent.getChild(0);", "-                ParseTree nextParseTreeSibling = getNextSibling(currentParseTreeParent);", "+                ParseTree nextParseTreeSibling = getNextSibling(parseTreeParent);", "-                    ParseTree tempParseTreeParent = currentParseTreeParent.getParent();", "+                    ParseTree tempParseTreeParent = parseTreeParent.getParent();", "-                currentParseTreeParent = nextParseTreeSibling;", "+                parseTreeParent = nextParseTreeSibling;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bcf68ba24e8a7df286b98e60d6d7ab2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "b9b72f969209ac4edb9c6b02aaf8e2f590d0b737", "commitAfterChange": "24ba45a971569b9702e6bf78c5c07c48beb25464", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private List getMethodTags(String[] aLines, int aLastLineNo)", "signatureAfterChange": "     private List getMethodTags(Comment aComment)", "diff": ["-     **/", "-    private List getMethodTags(String[] aLines, int aLastLineNo)", "+     */", "+    private List getMethodTags(Comment aComment)", "+        final String[] lines = aComment.getText();", "-        int currentLine = aLastLineNo - aLines.length;", "-        for (int i = 0; i < aLines.length; i++) {", "+        int currentLine = aComment.getFirstLineNo() - 1;", "+", "+        for (int i = 0; i < lines.length; i++) {", "-            if (MATCH_JAVADOC_ARG.match(aLines[i])) {", "+            if (MATCH_JAVADOC_ARG.match(lines[i])) {", "-            else if (MATCH_JAVADOC_NOARG.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_NOARG.match(lines[i])) {", "-            else if (MATCH_JAVADOC_NOARG_CURLY.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_NOARG_CURLY.match(lines[i])) {", "-            else if (MATCH_JAVADOC_ARG_MULTILINE_START.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_ARG_MULTILINE_START.match(lines[i])) {", "-                while (remIndex < aLines.length) {", "-                    if (MATCH_JAVADOC_MULTILINE_CONT.match(aLines[remIndex])) {", "-                        remIndex = aLines.length;", "+                while (remIndex < lines.length) {", "+                    if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {", "+                        remIndex = lines.length;", "-            else if (MATCH_JAVADOC_NOARG_MULTILINE_START.match(aLines[i])) {", "+            else if (MATCH_JAVADOC_NOARG_MULTILINE_START.match(lines[i])) {", "-                while (remIndex < aLines.length) {", "-                    if (MATCH_JAVADOC_MULTILINE_CONT.match(aLines[remIndex])) {", "-                        remIndex = aLines.length;", "+                while (remIndex < lines.length) {", "+                    if (MATCH_JAVADOC_MULTILINE_CONT.match(lines[remIndex])) {", "+                        remIndex = lines.length;"]}]}
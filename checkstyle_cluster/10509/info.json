{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e57a851f15807aa8dcf0ee8417d3c1d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56fa6a2c2c2a0a785e32c81447a288ba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "commitAfterChange": "89a51ba032fd9126651fa9efad31baf10c006ddf", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "         @Override         public void syntaxError(                 Recognizer<?, ?> aRecognizer, Object aOffendingSymbol,                 int aLine, int aCharPositionInLine,                 String aMsg, RecognitionException aEx)", "signatureAfterChange": "         @Override         public void syntaxError(                 Recognizer<?, ?> recognizer, Object offendingSymbol,                 int line, int charPositionInLine,                 String msg, RecognitionException ex)", "diff": ["-                Recognizer<?, ?> aRecognizer, Object aOffendingSymbol,", "-                int aLine, int aCharPositionInLine,", "-                String aMsg, RecognitionException aEx)", "+                Recognizer<?, ?> recognizer, Object offendingSymbol,", "+                int line, int charPositionInLine,", "+                String msg, RecognitionException ex)", "-            final int lineNumber = mOffset + aLine;", "-            final Token token = (Token) aOffendingSymbol;", "+            final int lineNumber = offset + line;", "+            final Token token = (Token) offendingSymbol;", "-            if (JAVADOC_MISSED_HTML_CLOSE.equals(aMsg)) {", "-                mErrorMessage = new ParseErrorMessage(lineNumber,", "-                        JAVADOC_MISSED_HTML_CLOSE, aCharPositionInLine, token.getText());", "+            if (JAVADOC_MISSED_HTML_CLOSE.equals(msg)) {", "+                errorMessage = new ParseErrorMessage(lineNumber,", "+                        JAVADOC_MISSED_HTML_CLOSE, charPositionInLine, token.getText());", "-            else if (JAVADOC_WRONG_SINGLETON_TAG.equals(aMsg)) {", "-                mErrorMessage = new ParseErrorMessage(lineNumber,", "-                        JAVADOC_WRONG_SINGLETON_TAG, aCharPositionInLine, token.getText());", "+            else if (JAVADOC_WRONG_SINGLETON_TAG.equals(msg)) {", "+                errorMessage = new ParseErrorMessage(lineNumber,", "+                        JAVADOC_WRONG_SINGLETON_TAG, charPositionInLine, token.getText());", "-                final RuleContext ruleContext = aEx.getCtx();", "+                final RuleContext ruleContext = ex.getCtx();", "-                    final int ruleIndex = aEx.getCtx().getRuleIndex();", "-                    final String ruleName = aRecognizer.getRuleNames()[ruleIndex];", "+                    final int ruleIndex = ex.getCtx().getRuleIndex();", "+                    final String ruleName = recognizer.getRuleNames()[ruleIndex];", "-                    mErrorMessage = new ParseErrorMessage(lineNumber,", "-                            JAVADOC_PARSE_RULE_ERROR, aCharPositionInLine, aMsg, upperCaseRuleName);", "+                    errorMessage = new ParseErrorMessage(lineNumber,", "+                            JAVADOC_PARSE_RULE_ERROR, charPositionInLine, msg, upperCaseRuleName);", "-                    mErrorMessage = new ParseErrorMessage(lineNumber, JAVADOC_PARSE_TOKEN_ERROR,", "-                            aCharPositionInLine, aMsg, aCharPositionInLine);", "+                    errorMessage = new ParseErrorMessage(lineNumber, JAVADOC_PARSE_TOKEN_ERROR,", "+                            charPositionInLine, msg, charPositionInLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbe7def8b16b227b1cee487fe51c0e05", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/WhitespaceAroundCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean isEmptyBlock(DetailAST aAST, int aParentType, int aMatch)", "signatureAfterChange": "     private boolean isEmptyBlock(DetailAST ast, int parentType, int match)", "diff": ["-    private boolean isEmptyBlock(DetailAST aAST, int aParentType, int aMatch)", "+    private boolean isEmptyBlock(DetailAST ast, int parentType, int match)", "-        final int type = aAST.getType();", "+        final int type = ast.getType();", "-            final DetailAST grandParent = aAST.getParent().getParent();", "-            return (aParentType == TokenTypes.SLIST)", "-                && (grandParent.getType() == aMatch);", "+            final DetailAST grandParent = ast.getParent().getParent();", "+            return (parentType == TokenTypes.SLIST)", "+                && (grandParent.getType() == match);", "-            && (aParentType == aMatch)", "-            && (aAST.getFirstChild().getType() == TokenTypes.RCURLY);", "+            && (parentType == match)", "+            && (ast.getFirstChild().getType() == TokenTypes.RCURLY);"]}]}
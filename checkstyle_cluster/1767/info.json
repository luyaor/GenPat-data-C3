{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce882cf98664321d17d3ca5538b9ea3d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b4a7a70b08db72857e7ce2ce519f888", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ParenPadCheck.java", "commitBeforeChange": "081f9e7f7f70a5da494c9e1185c27f1766e16acc", "commitAfterChange": "916417fc6214ab75606d2fbc1d7b511509ffe25b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void processRight(DetailAST aAST)", "signatureAfterChange": "     private void processRight(DetailAST aAST)", "diff": ["-            if ((PadOption.NOSPACE == getAbstractOption())", "+            boolean followsEmptyForIterator = false;", "+            final DetailAST parent = aAST.getParent();", "+            if ((parent != null) ", "+                && (parent.getType() == TokenTypes.LITERAL_FOR))", "+            {", "+                final DetailAST forIterator =", "+                    parent.findFirstToken(TokenTypes.FOR_ITERATOR);", "+                followsEmptyForIterator = (forIterator.getChildCount() == 0)", "+                    && (aAST == forIterator.getNextSibling());", "+            }", "+            if (followsEmptyForIterator) {", "+                return;", "+//                if (mPadEmptyForIterator", "+//                    && !Character.isWhitespace(line.charAt(before)))", "+//                {", "+//                    log(aAST.getLineNo(), aAST.getColumnNo(),", "+//                        \"ws.notPreceeded\", \")\");", "+//                }", "+//                else if (!mPadEmptyForIterator", "+//                    && Character.isWhitespace(line.charAt(before)))", "+//                {", "+//                    log(aAST.getLineNo(), before, \"ws.preceeded\", \")\");", "+//                }  ", "+            }", "+            else if ((PadOption.NOSPACE == getAbstractOption())"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e779aae7c82986d9a4e1ee04abcb3803", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/whitespace/GenericWhitespaceCheck.java", "commitBeforeChange": "70c89f71ecaedc22708cd60d0f200a7b8893ca34", "commitAfterChange": "325b265cc583468dd495088e95f316a2ba10c4af", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r     private void processStart(DetailAST aAST)", "signatureAfterChange": "\r     private void processStart(DetailAST aAST)", "diff": ["-        if ((0 <= before) && Character.isWhitespace(line.charAt(before))\r", "+        // Need to handle two cases as in:\r", "+        //\r", "+        //   public static <T> Callable<T> callable(Runnable task, T result)\r", "+        //                 ^           ^\r", "+        //      ws reqd ---+           +--- whitespace NOT required\r", "+        //\r", "+        if (0 <= before) {\r", "+            // Detect if the first case\r", "+            final DetailAST parent = aAST.getParent();\r", "+            final DetailAST grandparent = parent.getParent();\r", "+            if ((TokenTypes.TYPE_PARAMETERS == parent.getType())\r", "+                && (TokenTypes.METHOD_DEF == grandparent.getType()))\r", "+            {\r", "+                // Require whitespace\r", "+                if (!Character.isWhitespace(line.charAt(before))) {\r", "+                    log(aAST.getLineNo(), before, \"ws.notPreceded\", \"<\");\r", "+                }\r", "+            }\r", "+            // Whitespace not required\r", "+            else if (Character.isWhitespace(line.charAt(before))\r", "-        {\r", "-            log(aAST.getLineNo(), before, \"ws.preceded\", \"<\");\r", "+            {\r", "+                log(aAST.getLineNo(), before, \"ws.preceded\", \"<\");\r", "+            }\r"]}]}
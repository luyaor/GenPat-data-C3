{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ecc6c6fd3425bd5288f51e9fd70271b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2578009802da845ca8bc400592178eb6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/indentation/IndentationCheckTest.java", "commitBeforeChange": "9cc86b38df9a086713d1fcdf01b451b41c0d6f65", "commitAfterChange": "e9ec5bfbd5ab91852c3ec1b30492df5c06cdd3b1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private static boolean isCommentConsistent(String comment)", "signatureAfterChange": "      private static boolean isCommentConsistent(String comment)", "diff": ["-        Matcher match = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "-        if (match.matches()) {", "-            final String[] levels = match.group(1).split(\",\");", "+        Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "+        if (multilevelMatch.matches()) {", "+            final String[] levels = multilevelMatch.group(1).split(\",\");", "-        match = SINGLELEVEL_COMMENT_REGEX.matcher(comment);", "-        if (match.matches()) {", "-            final int expectedLevel = Integer.parseInt(match.group(1));", "+        Matcher singleLevelMatch = SINGLELEVEL_COMMENT_REGEX.matcher(comment);", "+        if (singleLevelMatch.matches()) {", "+            final int expectedLevel = Integer.parseInt(singleLevelMatch.group(1));", "-        match = NONSTRICT_LEVEL_COMMENT_REGEX.matcher(comment);", "-        if (match.matches()) {", "-            final int expectedMinimalIndent = Integer.parseInt(match.group(1));", "+        Matcher nonStrictLevelMatch = NONSTRICT_LEVEL_COMMENT_REGEX.matcher(comment);", "+        if (nonStrictLevelMatch.matches()) {", "+            final int expectedMinimalIndent = Integer.parseInt(nonStrictLevelMatch.group(1));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fb6ecfeb040ae2a9b41e671a8031541", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/base/IndentationConfigurationBuilder.java", "commitBeforeChange": "9cc86b38df9a086713d1fcdf01b451b41c0d6f65", "commitAfterChange": "e9ec5bfbd5ab91852c3ec1b30492df5c06cdd3b1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private static boolean isCommentConsistent(String comment)", "signatureAfterChange": "      private static boolean isCommentConsistent(String comment)", "diff": ["-        Matcher match = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "-        if (match.matches()) {", "-            final String[] levels = match.group(1).split(\",\");", "+        Matcher multilevelMatch = MULTILEVEL_COMMENT_REGEX.matcher(comment);", "+        if (multilevelMatch.matches()) {", "+            final String[] levels = multilevelMatch.group(1).split(\",\");", "-        match = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "-        if (match.matches()) {", "-            final int expectedLevel = Integer.parseInt(match.group(1));", "+        Matcher singleLevelMatch = SINGLE_LEVEL_COMMENT_REGEX.matcher(comment);", "+        if (singleLevelMatch.matches()) {", "+            final int expectedLevel = Integer.parseInt(singleLevelMatch.group(1));", "-        match = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);", "-        if (match.matches()) {", "-            final int expectedMinimalIndent = Integer.parseInt(match.group(1));", "+        Matcher nonStrictLevelMatch = NON_STRICT_LEVEL_COMMENT_REGEX.matcher(comment);", "+        if (nonStrictLevelMatch.matches()) {", "+            final int expectedMinimalIndent = Integer.parseInt(nonStrictLevelMatch.group(1));"]}]}
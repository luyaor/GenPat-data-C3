{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f4bb00fdf815947b0a1f8ba34cf7d57", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f8338ee3afcbe08029ce9b16ef8c05a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/HandlerFactory.java", "commitBeforeChange": "a07cae0aca9f9072256b3a5fd05779e8d69b9748", "commitAfterChange": "8f19f1d70630f210f33ebd51d42d04ca9727ff36", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     public AbstractExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, AbstractExpressionHandler parent)", "signatureAfterChange": "     public AbstractExpressionHandler getHandler(IndentationCheck indentCheck,         DetailAST ast, AbstractExpressionHandler parent)", "diff": ["-        try {", "-            final Constructor<?> handlerCtor =", "-                typeHandlers.get(ast.getType());", "-            if (handlerCtor != null) {", "-                expHandler = (AbstractExpressionHandler) handlerCtor.newInstance(", "-                        indentCheck, ast, parent);", "-            }", "-        }", "-        catch (final InstantiationException | InvocationTargetException e) {", "-            final String message = \"couldn't instantiate constructor for \" + ast;", "-            LOG.debug(message, e);", "-            throw new RuntimeException(message);", "-        }", "-        catch (final IllegalAccessException e) {", "-            final String message = \"couldn't access constructor for \" + ast;", "-            LOG.debug(message, e);", "-            throw new RuntimeException(message);", "-        }", "-        if (expHandler == null) {", "-            throw new RuntimeException(\"no handler for type \" + ast.getType());", "+        final Constructor<?> handlerCtor =", "+            typeHandlers.get(ast.getType());", "+        if (handlerCtor != null) {", "+            expHandler = (AbstractExpressionHandler) Utils.invokeConstructor(", "+                    handlerCtor, indentCheck, ast, parent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4eed7bfcc5337445551f801de6cda59", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/CheckStyleTask.java", "commitBeforeChange": "a4ce4c6bb4714ff0b51d071509d2683d9e623a36", "commitAfterChange": "2debda611fe487021711aa4acce56651799a778f", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private GlobalProperties createGlobalProperties()", "signatureAfterChange": "     private Properties createOverridingProperties()", "diff": ["-    private GlobalProperties createGlobalProperties()", "+    private Properties createOverridingProperties()", "-        final Properties props = new Properties();", "+        final Properties retVal = new Properties();", "-        // Load the properties file is specified", "+        // Load the properties file if specified", "-                props.load(new FileInputStream(mPropertiesFile));", "+                retVal.load(new FileInputStream(mPropertiesFile));", "-            props.setProperty(p.getKey(), p.getValue());", "+            retVal.put(p.getKey(), p.getValue());", "-", "-        // Create the configuration", "-        final GlobalProperties retVal;", "-        try {", "-            retVal = new GlobalProperties(props, System.out);", "-        }", "-        catch (RESyntaxException e) {", "-            throw new BuildException(\"An regular expression error exists.\",", "-                                     e, getLocation());", "-        }", "-        catch (IOException e) {", "-            throw new BuildException(", "-                \"An error loading the file '\" + e.getMessage() + \"'\",", "-                e, getLocation());", "-        }", "-", "-        // setup the classloader", "-        if (mClasspath != null) {", "-            retVal.setClassLoader(new AntClassLoader(getProject(), mClasspath));", "-        }", "-", "+        "]}]}
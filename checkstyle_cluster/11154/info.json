{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "daf5e9e2afcdde57f8ed9825befd2269", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "032b97d71bafe3af69f8739f6f781ae8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/metrics/NPathComplexityCheck.java", "commitBeforeChange": "17fe0633fdc7ecf2a34171c1f103c0eca1fead4a", "commitAfterChange": "237dbc6866249f18545d695d75b4577b1f2dfed6", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 11, "signatureBeforeChange": "      @Override     protected String getMessageID()", "signatureAfterChange": "     private BigInteger popValue()", "diff": ["-", "-    @Override", "-    protected String getMessageID() {", "-        return MSG_KEY;", "+     */", "+    private BigInteger popValue() {", "+        currentValue = valueStack.pop();", "+        return currentValue;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "306ba21dc9fe895504bacec7fcabd019", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/MyModifierSet.java", "commitBeforeChange": "22885be800d66237f4447184acdf669224d6d8e0", "commitAfterChange": "048d0cdaf4492a4c1b122320143b9d5339e5ac3b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     boolean hasOrderSuggestedByJLS()", "signatureAfterChange": "     String checkOrderSuggestedByJLS()", "diff": ["-    boolean hasOrderSuggestedByJLS()", "+    String checkOrderSuggestedByJLS()", "-        Iterator it = mModifiers.iterator();", "-        do", "-        {", "-            if (!it.hasNext())", "-            {", "-                return true;", "+        String modifier;", "+        final Iterator it = mModifiers.iterator();", "+        do {", "+            if (!it.hasNext()) {", "+                return null;", "-            final String modifier = (String) it.next();", "-            while (i < JLS_ORDER.length && !JLS_ORDER[i].equals(modifier))", "-            {", "+", "+            modifier = (String) it.next();", "+            while ((i < JLS_ORDER.length) && !JLS_ORDER[i].equals(modifier)) {", "-        return false;", "+", "+        return \"'\" + modifier", "+            + \"' modifier out of order with the JLS suggestions.\";"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85624052c281488d83a402d81995a3d8", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d951258d2e2ae349de9278bd1adbec5", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "f46ec1b073c6958ca93569b96ef27d33669f491e", "commitAfterChange": "3f853ae96a24f2079901c3d47c6e6a7fa0604654", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (nextToken != null && nextToken.getType() != TokenTypes.RCURLY) {", "+        if (nextToken != null) {", "-                            log(nextToken.getLineNo(), \"empty.line.separator\",", "+                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                        else if (!allowNoEmptyLineBetweenFields) {", "-                            log(nextToken.getLineNo(), \"empty.line.separator\",", "+                        else if (!allowNoEmptyLineBetweenFields || !allowMultipleEmptyLines) {", "+                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                    }", "+                    if (!allowMultipleEmptyLines && isTypeField(ast)", "+                             && isPrePreviousLineEmpty(ast))", "+                    {", "+                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                        log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());", "+                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "+                    }", "+                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "+                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                        log(ast.getLineNo(), \"empty.line.separator\", ast.getText());", "+                        log(ast.getLineNo(), MSG_SHOULD_BE_SEPARATED, ast.getText());", "+                    }", "+                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "+                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    if (!hasEmptyLineAfter(ast)) {", "-                        log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());", "+                    if (nextToken.getType() != TokenTypes.RCURLY && !hasEmptyLineAfter(ast)) {", "+                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "+                    }", "+                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "+                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b42056a2b4c118e4bc6752a280e61918", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/EmptyLineSeparatorCheck.java", "commitBeforeChange": "5fe5bcee40e39eb6a23864f7f55128cbf2f10641", "commitAfterChange": "2db0dab62fc4986c3bebb38a1b8cac857f37664a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        if (nextToken != null && nextToken.getType() != TokenTypes.RCURLY) {", "+        if (nextToken != null) {", "-                            && nextToken.getType() != TokenTypes.VARIABLE_DEF)", "+                            && nextToken.getType() != TokenTypes.VARIABLE_DEF", "+                            && nextToken.getType() != TokenTypes.RCURLY)", "-                            log(nextToken.getLineNo(), \"empty.line.separator\",", "+                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "-                        else if (!allowNoEmptyLineBetweenFields) {", "-                            log(nextToken.getLineNo(), \"empty.line.separator\",", "+                        else if ((!allowNoEmptyLineBetweenFields || !allowMultipleEmptyLines)", "+                                 && nextToken.getType() != TokenTypes.RCURLY)", "+                        {", "+                            log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED,", "+                    }", "+                    if (!allowMultipleEmptyLines && isTypeField(ast)", "+                             && isPrePreviousLineEmpty(ast))", "+                    {", "+                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                        log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());", "+                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "+                    }", "+                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "+                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                        log(ast.getLineNo(), \"empty.line.separator\", ast.getText());", "+                        log(ast.getLineNo(), MSG_SHOULD_BE_SEPARATED, ast.getText());", "+                    }", "+                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "+                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());", "-                    if (!hasEmptyLineAfter(ast)) {", "-                        log(nextToken.getLineNo(), \"empty.line.separator\", nextToken.getText());", "+                    if (nextToken.getType() != TokenTypes.RCURLY && !hasEmptyLineAfter(ast)) {", "+                        log(nextToken.getLineNo(), MSG_SHOULD_BE_SEPARATED, nextToken.getText());", "+                    }", "+                    if (!allowMultipleEmptyLines && isPrePreviousLineEmpty(ast)) {", "+                        log(ast.getLineNo(), MSG_MULTIPLE_LINES, ast.getText());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01a7ee6e7f5eea01c884fd70f73f7221", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1355c05aa96ef686bf75adc219f587a1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "5cfe30d7ad6b98069f66ac2494afdcebcbcc8f1d", "commitAfterChange": "d97a2df674716efb7deda50180ae933bdc46d68a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private static DetailAST getArrayTypeOrIdentifier(DetailAST aArrayDeclarator)", "signatureAfterChange": "     private static DetailAST getArrayTypeOrIdentifier(DetailAST arrayDeclarator)", "diff": ["-    private static DetailAST getArrayTypeOrIdentifier(DetailAST aArrayDeclarator)", "+    private static DetailAST getArrayTypeOrIdentifier(DetailAST arrayDeclarator)", "-        DetailAST typeOrIdent = aArrayDeclarator;", "-        if (isArrayInstantiation(aArrayDeclarator)) {", "-            typeOrIdent = aArrayDeclarator.getParent().getFirstChild();", "+        DetailAST typeOrIdent = arrayDeclarator;", "+        if (isArrayInstantiation(arrayDeclarator)) {", "+            typeOrIdent = arrayDeclarator.getParent().getFirstChild();", "-        else if (isMultiDimensionalArray(aArrayDeclarator)) {", "-            if (isCstyleMultiDimensionalArrayDeclaration(aArrayDeclarator)) {", "-                if (aArrayDeclarator.getParent().getType() != TokenTypes.ARRAY_DECLARATOR) {", "-                    typeOrIdent = getArrayIdentifier(aArrayDeclarator);", "+        else if (isMultiDimensionalArray(arrayDeclarator)) {", "+            if (isCstyleMultiDimensionalArrayDeclaration(arrayDeclarator)) {", "+                if (arrayDeclarator.getParent().getType() != TokenTypes.ARRAY_DECLARATOR) {", "+                    typeOrIdent = getArrayIdentifier(arrayDeclarator);", "-                DetailAST arrayIdentifier = aArrayDeclarator.getFirstChild();", "+                DetailAST arrayIdentifier = arrayDeclarator.getFirstChild();", "-            if (isCstyleArrayDeclaration(aArrayDeclarator)) {", "-                typeOrIdent = getArrayIdentifier(aArrayDeclarator);", "+            if (isCstyleArrayDeclaration(arrayDeclarator)) {", "+                typeOrIdent = getArrayIdentifier(arrayDeclarator);", "-                typeOrIdent = aArrayDeclarator.getFirstChild();", "+                typeOrIdent = arrayDeclarator.getFirstChild();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "734c33573a81558e2235e8357109ca01", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/whitespace/NoWhitespaceAfterCheck.java", "commitBeforeChange": "9aa49c8f6d2b30577565f87984819e1df0d62d0f", "commitAfterChange": "c56dce9222a819b4741b4c0cd664d38c58b31050", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private static boolean isCStyleArrayDeclaration(DetailAST arrayDeclaration)", "signatureAfterChange": "     private static DetailAST getPreviousNodeWithParentOfTypeAst(DetailAST ast, DetailAST parent)", "diff": ["+     */", "+    private static DetailAST getPreviousNodeWithParentOfTypeAst(DetailAST ast, DetailAST parent) {", "+        final DetailAST previousElement;", "+        final DetailAST ident = getIdentLastToken(parent.getParent());", "+        final DetailAST lastTypeNode = getTypeLastNode(ast);", "+        // sometimes there are ident-less sentences", "+        // i.e. \"(Object[]) null\", but in casual case should be", "+        // checked whether ident or lastTypeNode has preceding position", "+        // determining if it is java style or C style", "+        if (ident == null || ident.getLineNo() > ast.getLineNo()) {", "+            previousElement = lastTypeNode;", "+        }", "+        else if (ident.getLineNo() < ast.getLineNo()) {", "+            previousElement = ident;", "+        }", "+        //ident and lastTypeNode lay on one line", "+        else {", "+            if (ident.getColumnNo() > ast.getColumnNo()", "+                || lastTypeNode.getColumnNo() > ident.getColumnNo()) {", "+                previousElement = lastTypeNode;", "+                previousElement = ident;", "+            }", "+        }", "+        return previousElement;", "+    }", "-     */", "-    private static boolean isCStyleArrayDeclaration(DetailAST arrayDeclaration) {", "-        boolean result = false;", "-        final DetailAST identifier = getArrayIdentifier(arrayDeclaration);", "-        if (identifier != null) {", "-            final int arrayDeclarationStart = arrayDeclaration.getColumnNo();", "-            final int identifierEnd = identifier.getColumnNo() + identifier.getText().length();", "-            result = arrayDeclarationStart == identifierEnd", "-                     || arrayDeclarationStart > identifierEnd;", "-        }"]}]}
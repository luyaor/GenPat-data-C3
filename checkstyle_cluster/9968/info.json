{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c61d982e430855bc8be4105c88473b7d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d8a18cd1238582d9e3322854457338e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpMultilineCheckTest.java", "commitBeforeChange": "e971fcd9b5e44455e38308acd05ddb000591e213", "commitAfterChange": "420889115863aa3237904ad71051fbc666d7ffd2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     @Ignore     @Test     public void testCarriageReturn() throws Exception", "signatureAfterChange": "      @Test     public void testCarriageReturn() throws Exception", "diff": ["-    // Need to fix the line endings in the input file", "-    @Ignore", "-            \"14: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-            \"16: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-            \"19: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-            \"21: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "+            \"1: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "+            \"3: \" + getCheckMessage(REGEXP_EXCEEDED, illegal),", "-        verify(checkConfig, getPath(\"InputLineBreaks.java\"), expected);", "+", "+        final File file = temporaryFolder.newFile();", "+        Files.write(\"first line \\r\\n second line \\n\\r third line\", file, Charsets.UTF_8);", "+", "+        verify(checkConfig, file.getPath(), expected);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c35fb61420658157d5cae806e4717ba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AtclauseOrderCheckTest.java", "commitBeforeChange": "839778122441a69ad3607375d9fe5a320499c1cd", "commitAfterChange": "b930ba24beb9c8c165b4ba1bf530cee4c2d87b0f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testIncorrectCustom() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrectCustom() throws Exception", "diff": ["-        final String tagOrder = \"[@author, @version, @param, @return, @throws, @exception, @see,\"", "-                + \" @since, @serial, @serialField, @serialData, @deprecated]\";", "+        final String tagOrder = \"[@since, @version, @param, @return, @throws, @exception,\"", "+                + \" @deprecated, @see, @serial, @serialField, @serialData, @author]\";", "+        final String customOrder = \" @since,  @version, @param,@return,@throws, @exception,\"", "+                + \"@deprecated, @see,@serial,   @serialField,  @serialData,@author\";", "+", "+        checkConfig.addAttribute(\"tagOrder\", customOrder);", "-            \"9: \" + getCheckMessage(MSG_KEY, tagOrder),", "-            \"11: \" + getCheckMessage(MSG_KEY, tagOrder),", "-            \"12: \" + getCheckMessage(MSG_KEY, tagOrder),", "-            \"115: \" + getCheckMessage(MSG_KEY, tagOrder),", "+            \"113: \" + getCheckMessage(MSG_KEY, tagOrder),"]}]}
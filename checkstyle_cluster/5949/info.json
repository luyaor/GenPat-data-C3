{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d49bf3f198eb3c70701f7e159cbda689", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "07cff408613a1a531dd1e226d3071d00", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/naming/StaticVariableNameCheckTest.java", "commitBeforeChange": "c2ce485b481ba4bd26eb3ba2e3cc6c1850539e0c", "commitAfterChange": "e615817b5bff08ada2fce5f43e9e1bcae4e77c38", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void testGetRequiredTokens()", "signatureAfterChange": "      @Test     public void testGetRequiredTokens()", "diff": ["-        int[] excpected = {TokenTypes.VARIABLE_DEF};", "-        assertArrayEquals(excpected, checkObj.getRequiredTokens());", "+        int[] expected = {TokenTypes.VARIABLE_DEF};", "+        assertArrayEquals(expected, checkObj.getRequiredTokens());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46724319cc766621869f86567f8fbf6f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/FallThroughCheck.java", "commitBeforeChange": "b14f255427c0b12054de2873fe300b4f4e691bd4", "commitAfterChange": "cc7aeaec906dc3c864477e3050510009b2a946ee", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private boolean hasFallTruComment(DetailAST currentCase,             DetailAST nextCase)", "signatureAfterChange": "     private boolean hasFallTruComment(DetailAST currentCase,             DetailAST nextCase)", "diff": ["-        final String linepart = lines[endLineNo - 1].substring(0, endColNo);", "-        if (commentMatch(regExp, linepart, endLineNo)) {", "+        final String linePart = lines[endLineNo - 1].substring(0, endColNo);", "+        if (commentMatch(regExp, linePart, endLineNo)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "485f912c8f291265bb664142e52ff619", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/SimplifyBooleanReturnCheck.java", "commitBeforeChange": "6839ac4fd83dde7060c8f6f28e75aa3d6ff2456b", "commitAfterChange": "31f6765fdcf2233ca6c53730c2fc196576557f66", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private static boolean isBooleanLiteralType(final int tokenType)", "signatureAfterChange": "     private static boolean isBooleanLiteralType(final int tokenType)", "diff": ["-        final boolean iastrue = tokenType == TokenTypes.LITERAL_TRUE;", "+        final boolean isTrue = tokenType == TokenTypes.LITERAL_TRUE;", "-        return iastrue || isFalse;", "+        return isTrue || isFalse;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d8d6473bad0e675250dfc9ff6e7cdce", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/OverloadMethodsDeclarationOrderCheck.java", "commitBeforeChange": "6839ac4fd83dde7060c8f6f28e75aa3d6ff2456b", "commitAfterChange": "31f6765fdcf2233ca6c53730c2fc196576557f66", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private void checkOverloadMethodsGrouping(DetailAST objectBlock)", "signatureAfterChange": "     private void checkOverloadMethodsGrouping(DetailAST objectBlock)", "diff": ["-                    final int priviousIndex = methodIndexMap.get(methodName);", "-                    if (currentIndex - priviousIndex > allowedDistance) {", "+                    final int previousIndex = methodIndexMap.get(methodName);", "+                    if (currentIndex - previousIndex > allowedDistance) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a7c777ff8304b06fc7f6d62c09b1b1d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/EmptyCatchBlockCheck.java", "commitBeforeChange": "fca2fd4d07ad057664ec43b83a3835693a1b1c88", "commitAfterChange": "3bd699bd593414d63c7139aa410f13ec8341a027", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "     private boolean isVerifiable(DetailAST emptyCatchAst, String commentContent)", "signatureAfterChange": "     private boolean isVerifiable(DetailAST emptyCatchAst, String commentContent)", "diff": ["-        final String exceptionVariableName = getExceptionVariableName(emptyCatchAst);", "+        final String variableName = getExceptionVariableName(emptyCatchAst);", "-                .matcher(exceptionVariableName).find();", "+                .matcher(variableName).find();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9602049b43399557e65a72642dfa2c7f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/AvoidEscapedUnicodeCharactersCheck.java", "commitBeforeChange": "07b24dd81c7648f093f2a789a7fa288d8e7eeef4", "commitAfterChange": "c3674faad8a38656e910750fb22a7eef714fb8a7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static boolean isOnlyUnicodeValidChars(String literal, Pattern pattern)", "signatureAfterChange": "     private static boolean isOnlyUnicodeValidChars(String literal, Pattern pattern)", "diff": ["-        final int unicodeValidMatchesCouter =", "+        final int unicodeValidMatchesCounter =", "-        return unicodeMatchesCounter - unicodeValidMatchesCouter == 0;", "+        return unicodeMatchesCounter - unicodeValidMatchesCounter == 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af282ef352aa20e2860bd363afcdf4b1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/api/AbstractLoader.java", "commitBeforeChange": "fdd5ed77fd1ea61768683ee8cfacf78190a2d3aa", "commitAfterChange": "bf9325be913ce46a1427232c455f4830b574ba44", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public InputSource resolveEntity(String publicId, String systemId)         throws SAXException, IOException", "signatureAfterChange": "      @Override     public InputSource resolveEntity(String publicId, String systemId)         throws SAXException, IOException", "diff": ["-            final InputStream dtdIS =", "+            final InputStream dtdIs =", "-            return new InputSource(dtdIS);", "+            return new InputSource(dtdIs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7462893477bf2b9ef82b6a339d6ca24", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/NeedBracesCheck.java", "commitBeforeChange": "fde141853282bb474d3011750e10cda12e2dbdd9", "commitAfterChange": "15c641997da72c75b97abad5d0c40375f82851ea", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        final DetailAST sListAST = aAST.findFirstToken(TokenTypes.SLIST);", "+        final DetailAST slistAST = aAST.findFirstToken(TokenTypes.SLIST);", "-        if (sListAST == null && !isElseIf) {", "+        if ((slistAST == null) && !isElseIf) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b82fd0b7fa446e75c47bcc927aee7115", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/design/HideUtilityClassConstructorCheck.java", "commitBeforeChange": "fdd5ed77fd1ea61768683ee8cfacf78190a2d3aa", "commitAfterChange": "bf9325be913ce46a1427232c455f4830b574ba44", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        final boolean extendsJLO =", "+        final boolean extendsJlo =", "-        final boolean isUtilClass = extendsJLO && hasMethodOrField", "+        final boolean isUtilClass = extendsJlo && hasMethodOrField"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc92724a4cba798a48430f0ffcea6e15", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/TokenUtils.java", "commitBeforeChange": "f0ea60f77bbc5e524320b042d7a90eefbf2bd00d", "commitAfterChange": "7eb80732e99d1018810eb8cba29d2e3bec9b7ae0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     public static String getShortDescription(String name)", "signatureAfterChange": "     public static String getShortDescription(String name)", "diff": ["-        final String tokentypes =", "+        final String tokenTypes =", "-        final ResourceBundle bundle = ResourceBundle.getBundle(tokentypes);", "+        final ResourceBundle bundle = ResourceBundle.getBundle(tokenTypes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7bc78aeea417cd255dd1a6cc3590e0c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/UncommentedMainCheck.java", "commitBeforeChange": "03f2be49f7ad3fc9d0143782b020a169f28e50a9", "commitAfterChange": "0c2a64d9f02ab5b94bbf4213cb2978f7b459b6f5", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     private static boolean checkParams(DetailAST method)", "signatureAfterChange": "     private static boolean checkParams(DetailAST method)", "diff": ["-            final DetailAST paratype = params.getFirstChild().findFirstToken(TokenTypes.TYPE);", "-            final DetailAST arrayDecl = paratype.findFirstToken(TokenTypes.ARRAY_DECLARATOR);", "+            final DetailAST parameterType = params.getFirstChild().findFirstToken(TokenTypes.TYPE);", "+            final DetailAST arrayDecl = parameterType.findFirstToken(TokenTypes.ARRAY_DECLARATOR);"]}]}
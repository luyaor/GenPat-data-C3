{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "175874b5cddcb43846526331a6070fb2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21eda96d80d52be38e64752ad93b9796", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/whitespace/MethodParamPadCheckTest.java", "commitBeforeChange": "2935730a7a7a703f9923c3a6b31fed3a3b589fe2", "commitAfterChange": "4596d0b4c5a5a5db84a552ee3f6fde2e752e7adf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Test     public void testSpaceOption() throws Exception", "signatureAfterChange": "      @Test     public void testSpaceOption() throws Exception", "diff": ["-            \"6:31: '(' is not preceded with whitespace.\",", "-            \"8:14: '(' is not preceded with whitespace.\",", "-            \"17:9: '(' should be on the previous line.\",", "-            \"20:13: '(' should be on the previous line.\",", "-            \"23:23: '(' is not preceded with whitespace.\",", "-            \"32:9: '(' should be on the previous line.\",", "-            \"35:58: '(' is not preceded with whitespace.\",", "-            \"38:13: '(' should be on the previous line.\",", "-            \"41:15: '(' is not preceded with whitespace.\",", "-            \"44:13: '(' should be on the previous line.\",", "-            \"47:28: '(' is not preceded with whitespace.\",", "-            \"49:20: '(' is not preceded with whitespace.\",", "-            \"52:13: '(' should be on the previous line.\",", "-            \"54:56: '(' is not preceded with whitespace.\",", "-            \"55:17: '(' is not preceded with whitespace.\",", "-            \"58:13: '(' should be on the previous line.\",", "-            \"60:35: '(' is not preceded with whitespace.\",", "-            \"63:13: '(' should be on the previous line.\",", "-            \"66:25: '(' is not preceded with whitespace.\",", "-            \"69:66: '(' is not preceded with whitespace.\",", "-            \"70:57: '(' is not preceded with whitespace.\",", "+            \"6:31: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"8:14: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"17:9: \" + getCheckMessage(LINE_PREVIOUS, \"(\"),", "+            \"20:13: \" + getCheckMessage(LINE_PREVIOUS, \"(\"),", "+            \"23:23: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"32:9: \" + getCheckMessage(LINE_PREVIOUS, \"(\"),", "+            \"35:58: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"38:13: \" + getCheckMessage(LINE_PREVIOUS, \"(\"),", "+            \"41:15: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"44:13: \" + getCheckMessage(LINE_PREVIOUS, \"(\"),", "+            \"47:28: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"49:20: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"52:13: \" + getCheckMessage(LINE_PREVIOUS, \"(\"),", "+            \"54:56: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"55:17: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"58:13: \" + getCheckMessage(LINE_PREVIOUS, \"(\"),", "+            \"60:35: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"63:13: \" + getCheckMessage(LINE_PREVIOUS, \"(\"),", "+            \"66:25: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"69:66: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),", "+            \"70:57: \" + getCheckMessage(WS_NOT_PRECEDED, \"(\"),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f4b9000693654df752df6b9963257bb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheckTest.java", "commitBeforeChange": "f0326fd4c85c3779c47013d2800ef6daf28721b1", "commitAfterChange": "abe8ae60eefcc58483df0957b27c2b5fa5e92fd5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     @Test     public void testDefault3() throws Exception", "signatureAfterChange": "     @Test     public void testDefault3() throws Exception", "diff": ["-            \"12:1: '{' should be on the previous line.\",", "-            \"15:5: '{' should be on the previous line.\",", "-            \"19:9: '{' should be on the previous line.\",", "-            \"21:13: '{' should be on the previous line.\",", "-            \"23:17: '{' should be on the previous line.\",", "-            \"30:17: '{' should be on the previous line.\",", "-            \"34:17: '{' should be on the previous line.\",", "-            \"42:13: '{' should be on the previous line.\",", "-            \"46:13: '{' should be on the previous line.\",", "-            \"52:9: '{' should be on the previous line.\",", "-            \"54:13: '{' should be on the previous line.\",", "-            \"63:9: '{' should be on the previous line.\",", "-            \"83:5: '{' should be on the previous line.\",", "-            \"89:5: '{' should be on the previous line.\",", "-            \"97:19: '{' should have line break after.\",", "-            \"106:1: '{' should be on the previous line.\",", "-            \"109:9: '{' should be on the previous line.\",", "-            \"118:1: '{' should be on the previous line.\",", "-            \"120:9: '{' should be on the previous line.\",", "-            \"129:1: '{' should be on the previous line.\",", "-            \"131:9: '{' should be on the previous line.\",", "-            \"133:17: '{' should be on the previous line.\",", "-            \"148:1: '{' should be on the previous line.\",", "+            \"12:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"15:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"19:9: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"21:13: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"23:17: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"30:17: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"34:17: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"42:13: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"46:13: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"52:9: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"54:13: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"63:9: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"83:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"89:5: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"97:19: \" + getCheckMessage(MSG_KEY_LINE_BREAK_AFTER, \"{\"),", "+            \"106:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"109:9: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"118:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"120:9: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"129:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"131:9: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"133:17: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),", "+            \"148:1: \" + getCheckMessage(MSG_KEY_LINE_PREVIOUS, \"{\"),"]}]}
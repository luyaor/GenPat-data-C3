{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efbd082c5ad02ac27ca11d83c6777964", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1219f59c6e23fa05e2f6b93f2603c5eb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "b94bac0719851b65b59b4aafc5bd3ef029321ed7", "commitAfterChange": "bb1b29851f14bf7eaf5656e01c285c0f5f3b9000", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String aClassName)", "signatureAfterChange": "     private String getIllegalInstantiation(String className)", "diff": ["-    private String getIllegalInstantiation(String aClassName)", "+    private String getIllegalInstantiation(String className)", "-        final String javaLang = \"java.lang.\";", "+        final String javlang = \"java.lang.\";", "-        if (mIllegalClasses.contains(aClassName)) {", "-            return aClassName;", "+        if (illegalClasses.contains(className)) {", "+            return className;", "-        final int clsNameLen = aClassName.length();", "-        final int pkgNameLen = (mPkgName == null) ? 0 : mPkgName.length();", "+        final int clsNameLen = className.length();", "+        final int pkgNameLen = (pkgName == null) ? 0 : pkgName.length();", "-        for (String illegal : mIllegalClasses) {", "+        for (String illegal : illegalClasses) {", "-            if (((illegalLen - javaLang.length()) == clsNameLen)", "-                && illegal.endsWith(aClassName)", "-                && illegal.startsWith(javaLang))", "+            if (((illegalLen - javlang.length()) == clsNameLen)", "+                && illegal.endsWith(className)", "+                && illegal.startsWith(javlang))", "-                final boolean isSameFile = mClassNames.contains(aClassName);", "+                final boolean isSameFile = classNames.contains(className);", "-                        final String fqName = mPkgName + \".\" + aClassName;", "+                        final String fqName = pkgName + \".\" + className;", "-            // the toplevel package (mPkgName == null) is covered by the", "-            // \"illegalInsts.contains(aClassName)\" check above", "+            // the toplevel package (pkgName == null) is covered by the", "+            // \"illegalInsts.contains(className)\" check above", "-            // illegal.equals(mPkgName + \".\" + aClassName)", "-            if ((mPkgName != null)", "+            // illegal.equals(pkgName + \".\" + className)", "+            if ((pkgName != null)", "-                && illegal.endsWith(aClassName)", "-                && illegal.startsWith(mPkgName))", "+                && illegal.endsWith(className)", "+                && illegal.startsWith(pkgName))", "-            for (FullIdent importLineText : mImports) {", "+            for (FullIdent importLineText : imports) {", "-                        + aClassName;", "+                        + className;", "-                    if (mIllegalClasses.contains(fqClass)) {", "+                    if (illegalClasses.contains(fqClass)) {", "-                    if (Utils.baseClassname(importArg).equals(aClassName)", "-                        && mIllegalClasses.contains(importArg))", "+                    if (Utils.baseClassname(importArg).equals(className)", "+                        && illegalClasses.contains(importArg))"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c78606bde57af1ef70fd0d54e63091", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/imports/Guard.java", "commitBeforeChange": "d84869bcff9a2f0ad8d6f1d7741e07d22a78e4a6", "commitAfterChange": "16dac636b246c658cad31ee9b2e45c53b851d4f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     AccessResult verifyImport(final String aForImport)", "signatureAfterChange": "     AccessResult verifyImport(final String forImport)", "diff": ["-    AccessResult verifyImport(final String aForImport)", "+    AccessResult verifyImport(final String forImport)", "-        assert aForImport != null;", "-        if (mClassName != null) {", "-            final boolean classMatch = mRegExp", "-                ? aForImport.matches(mClassName)", "-                : aForImport.equals(mClassName);", "+        assert forImport != null;", "+        if (className != null) {", "+            final boolean classMatch = regExp", "+                ? forImport.matches(className)", "+                : forImport.equals(className);", "-        assert mPkgName != null;", "+        assert pkgName != null;", "-        if (mRegExp) {", "-            pkgMatch = aForImport.matches(mPkgName + \"\\\\..*\");", "-            if (pkgMatch && mExactMatch) {", "-                pkgMatch = !aForImport.matches(mPkgName + \"\\\\..*\\\\..*\");", "+        if (regExp) {", "+            pkgMatch = forImport.matches(pkgName + \"\\\\..*\");", "+            if (pkgMatch && exactMatch) {", "+                pkgMatch = !forImport.matches(pkgName + \"\\\\..*\\\\..*\");", "-            pkgMatch = aForImport.startsWith(mPkgName + \".\");", "-            if (pkgMatch && mExactMatch) {", "-                pkgMatch = (aForImport.indexOf('.',", "-                    (mPkgName.length() + 1)) == -1);", "+            pkgMatch = forImport.startsWith(pkgName + \".\");", "+            if (pkgMatch && exactMatch) {", "+                pkgMatch = (forImport.indexOf('.',", "+                    (pkgName.length() + 1)) == -1);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "039999d907d395bbc10c8214100e8fb1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dceaa58248cd3f72dfa456bc54362b3", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Verifier.java", "commitBeforeChange": "f8ea4c69a2228c5aca6c0b6e08a39a613d157708", "commitAfterChange": "8d6fa332a9c8b0c350dfcb1d923d70bc5f3d921b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "     void verifyWSAfter(int aLineNo, int aColNo, MyToken aToken);", "signatureAfterChange": "     void verifyWSAfter(int aLineNo, int aColNo, MyToken aConstruct)", "diff": ["-    void verifyWSAfter(int aLineNo, int aColNo, MyToken aToken);", "+    void verifyWSAfter(int aLineNo, int aColNo, MyToken aConstruct)", "+    {", "+        if (mConfig.isIgnoreWhitespace() ||", "+            ((MyToken.CAST == aConstruct) && mConfig.isIgnoreCastWhitespace()))", "+        {", "+            return;", "+        }", "+", "+        final String line = mLines[aLineNo - 1];", "+        if ((aColNo < line.length()) &&", "+            !Character.isWhitespace(line.charAt(aColNo)))", "+        {", "+            log(aLineNo,", "+                aConstruct.getText() + \" needs to be followed by whitespace.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9c1ae160d85df9d2f07f5759aa07ca6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/header/RegexpHeaderCheck.java", "commitBeforeChange": "9cff1673f1d42910c654e0af5365d68591f104f0", "commitAfterChange": "b83c9aceef9577eaada5cfd78bc7b2cd04a176d1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 4, "signatureBeforeChange": "     protected RegexpHeaderInfo getRegexpHeaderInfo()", "signatureAfterChange": "      @Override     protected void postprocessHeaderLines()", "diff": ["-     */", "-    protected RegexpHeaderInfo getRegexpHeaderInfo()", "-    {", "-        return (RegexpHeaderInfo) getHeaderInfo();", "-    }", "+", "+    @Override", "+    protected void postprocessHeaderLines()", "+    {", "+        final List<String> headerLines = getHeaderLines();", "+        mHeaderRegexps.clear();", "+        for (String line : headerLines) {", "+            try {", "+                // TODO: Not sure if cache in Utils is still necessary", "+                mHeaderRegexps.add(Utils.getPattern(line));", "+            }", "+            catch (final PatternSyntaxException ex) {", "+                throw new ConversionException(\"line \"", "+                        + (mHeaderRegexps.size() + 1)", "+                        + \" in header specification\"", "+                        + \" is not a regular expression\");", "+            }", "+        }", "+    }"]}]}
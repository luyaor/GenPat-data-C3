{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "41bd2b9bb4593948ff55ed9da9214bde", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03a829bbe46abc038099d9f364830c51", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/RightCurlyCheck.java", "commitBeforeChange": "7f65ac9c09d4e0ae5afa5b4709c7a8a136b6bd7f", "commitAfterChange": "c9cf116fcb4d295c3dd6fa80d73648bc7f34301c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-        // Attempt to locate the tokens to do the check", "-        DetailAST rcurly;", "-        DetailAST lcurly;", "-        DetailAST nextToken;", "-        boolean shouldCheckLastRcurly = false;", "-", "-        switch (ast.getType()) {", "-            case TokenTypes.LITERAL_TRY:", "-                lcurly = ast.getFirstChild();", "-                nextToken = lcurly.getNextSibling();", "-                rcurly = lcurly.getLastChild();", "-                break;", "-            case TokenTypes.LITERAL_CATCH:", "-                nextToken = ast.getNextSibling();", "-                lcurly = ast.getLastChild();", "-                rcurly = lcurly.getLastChild();", "-                if (nextToken == null) {", "-                    shouldCheckLastRcurly = true;", "-                    nextToken = getNextToken(ast);", "-                }", "-                break;", "-            case TokenTypes.LITERAL_IF:", "-                nextToken = ast.findFirstToken(TokenTypes.LITERAL_ELSE);", "-                if (nextToken != null) {", "-                    lcurly = nextToken.getPreviousSibling();", "-                    rcurly = lcurly.getLastChild();", "-                }", "-                else {", "-                    shouldCheckLastRcurly = true;", "-                    nextToken = getNextToken(ast);", "-                    lcurly = ast.getLastChild();", "-                    rcurly = lcurly.getLastChild();", "-                }", "-                break;", "-            case TokenTypes.LITERAL_ELSE:", "-                shouldCheckLastRcurly = true;", "-                nextToken = getNextToken(ast);", "-                lcurly = ast.getFirstChild();", "-                rcurly = lcurly.getLastChild();", "-                break;", "-            case TokenTypes.LITERAL_FINALLY:", "-                shouldCheckLastRcurly = true;", "-                nextToken = getNextToken(ast);", "-                lcurly = ast.getFirstChild();", "-                rcurly = lcurly.getLastChild();", "-                break;", "-            case TokenTypes.CLASS_DEF:", "-                final DetailAST child = ast.getLastChild();", "-                lcurly = child.getFirstChild();", "-                rcurly = child.getLastChild();", "-                nextToken = ast;", "-                break;", "-            case TokenTypes.CTOR_DEF:", "-            case TokenTypes.STATIC_INIT:", "-            case TokenTypes.INSTANCE_INIT:", "-                lcurly = ast.findFirstToken(TokenTypes.SLIST);", "-                rcurly = lcurly.getLastChild();", "-                nextToken = ast;", "-                break;", "-            case TokenTypes.METHOD_DEF:", "-            case TokenTypes.LITERAL_FOR:", "-            case TokenTypes.LITERAL_WHILE:", "-            case TokenTypes.LITERAL_DO:", "-                lcurly = ast.findFirstToken(TokenTypes.SLIST);", "-                //SLIST could be absent if method is abstract, and code like \"while(true);\"", "-                if (lcurly == null) {", "-                    return;", "-                }", "-                rcurly = lcurly.getLastChild();", "-                nextToken = ast;", "-                break;", "-            default:", "-                throw new RuntimeException(\"Unexpected token type (\"", "-                    + TokenTypes.getTokenName(ast.getType()) + \")\");", "-        }", "+        final Details details = getDetails(ast);", "+        final DetailAST rcurly = details.rcurly;", "+        final DetailAST lcurly = details.lcurly;", "+        final DetailAST nextToken = details.nextToken;", "+        final boolean shouldCheckLastRcurly = details.shouldCheckLastRcurly;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "937aa3b926ad22740248c718b1bb094f", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/tests/com/puppycrawl/tools/checkstyle/WhitespaceAroundTest.java", "commitBeforeChange": "e3134ab9b1e8b2eabe29d8dbdb668656b077e86f", "commitAfterChange": "49b2c723738d731c903c471ba41fceb8837ecf65", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      public void testIt()         throws Exception", "signatureAfterChange": "      public void testIt()         throws Exception", "diff": ["-        final LocalizedMessages msgs = new LocalizedMessages(8);", "-        final TreeWalker walker = new TreeWalker(msgs);", "-        final CheckConfiguration config = new CheckConfiguration();", "-        config.setClassname(WhitespaceAroundCheck.class.getName());", "-        final Check c = config.createInstance(", "-            Thread.currentThread().getContextClassLoader());", "-        walker.registerCheck(c, config);", "-        final String fname = CheckerTest.getPath(\"InputWhitespace.java\");", "-        final String[] lines = getLines(fname);", "-        walker.walk(getAST(fname, lines), lines, fname);", "-        assertEquals(29, msgs.getMessages().length);", "-        int idx = 0;", "-        verifyMessage(msgs, idx++, 16, 22, \"'=' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 16, 23, \"'=' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 18, 24, \"'=' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 26, 14, \"'=' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 27, 10, \"'=' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 27, 11, \"'=' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 28, 10, \"'+=' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 28, 12, \"'+=' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 29, 13, \"'-=' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 37, 21, \"'synchronized' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 39, 12, \"'try' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 41, 14, \"'catch' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 58, 11, \"'if' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 76, 19, \"'return' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 97, 29, \"'?' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 97, 30, \"'?' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 98, 15, \"'==' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 98, 17, \"'==' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 104, 20, \"'*' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 104, 21, \"'*' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 119, 18, \"'%' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 120, 20, \"'%' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 121, 18, \"'%' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 121, 19, \"'%' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 123, 18, \"'/' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 124, 20, \"'/' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 125, 18, \"'/' is not preceeded with whitespace.\");", "-        verifyMessage(msgs, idx++, 125, 19, \"'/' is not followed by whitespace.\");", "-        verifyMessage(msgs, idx++, 153, 15, \"'assert' is not followed by whitespace.\");", "+        final CheckConfiguration checkConfig = new CheckConfiguration();", "+        checkConfig.setClassname(WhitespaceAroundCheck.class.getName());", "+        final Checker c = createChecker(checkConfig);", "+        final String fname = getPath(\"InputWhitespace.java\");", "+        final String[] expected = {", "+            \"16:22: '=' is not preceeded with whitespace.\",", "+            \"16:23: '=' is not followed by whitespace.\",", "+            \"18:24: '=' is not followed by whitespace.\",", "+            \"26:14: '=' is not preceeded with whitespace.\",", "+            \"27:10: '=' is not preceeded with whitespace.\",", "+            \"27:11: '=' is not followed by whitespace.\",", "+            \"28:10: '+=' is not preceeded with whitespace.\",", "+            \"28:12: '+=' is not followed by whitespace.\",", "+            \"29:13: '-=' is not followed by whitespace.\",", "+            \"37:21: 'synchronized' is not followed by whitespace.\",", "+            \"39:12: 'try' is not followed by whitespace.\",", "+            \"41:14: 'catch' is not followed by whitespace.\",", "+            \"58:11: 'if' is not followed by whitespace.\",", "+            \"76:19: 'return' is not followed by whitespace.\",", "+            \"97:29: '?' is not preceeded with whitespace.\",", "+            \"97:30: '?' is not followed by whitespace.\",", "+            \"98:15: '==' is not preceeded with whitespace.\",", "+            \"98:17: '==' is not followed by whitespace.\",", "+            \"104:20: '*' is not followed by whitespace.\",", "+            \"104:21: '*' is not preceeded with whitespace.\",", "+            \"119:18: '%' is not preceeded with whitespace.\",", "+            \"120:20: '%' is not followed by whitespace.\",", "+            \"121:18: '%' is not preceeded with whitespace.\",", "+            \"121:19: '%' is not followed by whitespace.\",", "+            \"123:18: '/' is not preceeded with whitespace.\",", "+            \"124:20: '/' is not followed by whitespace.\",", "+            \"125:18: '/' is not preceeded with whitespace.\",", "+            \"125:19: '/' is not followed by whitespace.\",", "+            \"153:15: 'assert' is not followed by whitespace.\",", "+        };", "+        verify(c, fname, expected);"]}]}
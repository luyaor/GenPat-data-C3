{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05f20229831f8eef15864e9b9f28bf83", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e27a4c9e2bbb9180ae06ea6a7517e9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "fa7617c2223dae31f3ad486002f60201667e7a95", "commitAfterChange": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 36, "signatureBeforeChange": "     protected boolean isShortName(String aShortName, String aFullName)", "signatureAfterChange": "         public String toString()", "diff": ["-     */", "-    protected boolean isShortName(String aShortName, String aFullName)", "-    {", "-        if (aShortName.length() >= aFullName.length()) {", "-            return false;", "-        }", "-", "-        final String base = Utils.baseClassname(aFullName);", "-        if (aShortName.length() >= aFullName.length()", "-                || !base.equals(aShortName))", "-        {", "-            return false;", "-        }", "-", "-        // check fully qualified import", "-        if (mImports.contains(aFullName)) {", "-            return true;", "-        }", "-", "-        // check .* import", "-        final int endIndex = aFullName.length() - base.length() - 1;", "-        final String packageName = aFullName.substring(0, endIndex);", "-        final String starImport = packageName + \".*\";", "-        if (mImports.contains(starImport)) {", "-            return true;", "-        }", "-", "-        // check fully qualified class from same package", "-        return packageName.equals(mPackageFullIdent.getText());", "-    }", "+        /** {@inheritDoc} */", "+        public String toString()", "+        {", "+            return \"Token[\" + getText() + \"(\" + getLineNo()", "+                + \"x\" + getColumnNo() + \")]\";", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a38b96f01b806a744e9efd632255497", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/annotation/MissingDeprecatedCheck.java", "commitBeforeChange": "4287706cb4a0f7b8ab39bb6d5314b8b40841026a", "commitAfterChange": "0868085098dfde138eee8817c66cd4d214633403", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     private boolean containsJavadocTag(final TextBlock javadoc)", "signatureAfterChange": "     private boolean containsJavadocTag(final TextBlock javadoc)", "diff": ["-                // Look for the rest of the comment if all we saw was", "-                // the tag and the name. Stop when we see '*/' (end of", "-                // Javadoc), '@' (start of next tag), or anything that's", "-                // not whitespace or '*' characters.", "+                found = validateTagAtTheRestOfComment(lines, found, currentLine, i);", "-                for (int reindex = i + 1;", "-                    reindex < lines.length; reindex++) {", "-                    final Matcher multilineCont =", "-                        MissingDeprecatedCheck.MATCH_DEPRECATED_MULTILINE_CONT", "-                        .matcher(lines[reindex]);", "+            }", "+        }", "+        return found;", "+    }", "-                    if (multilineCont.find()) {", "-                        reindex = lines.length;", "-                        final String lFin = multilineCont.group(1);", "-                        if (!lFin.equals(MissingDeprecatedCheck.NEXT_TAG)", "-                            && !lFin.equals(MissingDeprecatedCheck.END_JAVADOC)) {", "-                            if (found) {", "-                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,", "-                                    JavadocTagInfo.DEPRECATED.getText());", "-                            }", "-                            found = true;", "-                        }", "-                        else {", "-                            this.log(currentLine, MSG_KEY_JAVADOC_MISSING);", "-                            if (found) {", "-                                this.log(currentLine, MSG_KEY_JAVADOC_DUPLICATE_TAG,", "-                                    JavadocTagInfo.DEPRECATED.getText());", "-                            }", "-                            found = true;", "-                        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc446be33f6b905300ed2cf437d723d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "91a49a90d40c6adad5f973f792c6b80003a69263", "commitAfterChange": "a172cb76e245dfeb01e9957cfe196f26bde555d7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "     private boolean isCalledOnStringField(DetailAST objCalledOn)", "signatureAfterChange": "     private boolean isCalledOnStringFieldOrVariable(DetailAST objCalledOn)", "diff": ["-    private boolean isCalledOnStringField(DetailAST objCalledOn) {", "-        boolean result = false;", "+    private boolean isCalledOnStringFieldOrVariable(DetailAST objCalledOn) {", "+        boolean result;", "-        final String name = objCalledOn.getText();", "-            FieldFrame frame = currentFrame;", "-            while (frame != null) {", "-                final DetailAST field = frame.findField(name);", "-                if (field != null", "-                        && (frame.isClassOrEnumOrEnumConstDef()", "-                                || checkLineNo(field, objCalledOn))) {", "-                    result = STRING.equals(getFieldType(field));", "-                    break;", "-                }", "-                frame = frame.getParent();", "-            }", "+            result = isStringFieldOrVariable(objCalledOn);", "-                final DetailAST field = getObjectFrame(currentFrame).findField(name);", "-                result = STRING.equals(getFieldType(field));", "+                result = isStringFieldOrVariableFromThisInstance(objCalledOn);", "-                FieldFrame frame = getObjectFrame(currentFrame);", "-                while (frame != null) {", "-                    if (className.equals(frame.getFrameName())) {", "-                        final DetailAST field = frame.findField(name);", "-                        result = STRING.equals(getFieldType(field));", "-                        break;", "-                    }", "-                    frame = getObjectFrame(frame.getParent());", "-                }", "+                result = isStringFieldOrVariableFromClass(objCalledOn, className);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b81b67b1dfbe45a2fcfd2ffa244655be", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocMethodCheck.java", "commitBeforeChange": "8e168c23bde5fed98dea0141b0cdcf11a74a7454", "commitAfterChange": "6f1840f011cea3a523d9df1278d4a0af98e1d967", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "     private void checkThrowsTags(List<JavadocTag> tags,             List<ExceptionInfo> throwsList, boolean reportExpectedTags)", "signatureAfterChange": "     private void checkThrowsTags(List<JavadocTag> tags,             List<ExceptionInfo> throwsList, boolean reportExpectedTags)", "diff": ["-            boolean found = foundThrows.contains(documentedEx);", "-            // First look for matches on the exception name", "-            ListIterator<ExceptionInfo> throwIt = throwsList.listIterator();", "-            while (!found && throwIt.hasNext()) {", "-                final ExceptionInfo ei = throwIt.next();", "-", "-                if (ei.getName().getText().equals(", "-                        documentedCI.getName().getText())) {", "-                    found = true;", "-                    ei.setFound();", "-                    foundThrows.add(documentedEx);", "-                }", "-            }", "-", "-            // Now match on the exception type", "-            throwIt = throwsList.listIterator();", "-            while (!found && throwIt.hasNext()) {", "-                final ExceptionInfo ei = throwIt.next();", "-", "-                if (documentedCI.getClazz() == ei.getClazz()) {", "-                    found = true;", "-                    ei.setFound();", "-                    foundThrows.add(documentedEx);", "-                }", "-                else if (allowThrowsTagsForSubclasses) {", "-                    found = isSubclass(documentedCI.getClazz(), ei.getClazz());", "-                }", "-            }", "+            final boolean found = foundThrows.contains(documentedEx)", "+                    || isInThrows(throwsList, documentedCI, foundThrows);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f6f2e5cd66aca6c55c0494fb6487ba", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/grammars/comments/CompareTreesWithComments.java", "commitBeforeChange": "10d3015752ad509cd8f7956d98b6eb9c92641a45", "commitAfterChange": "d35dc970390f16309861f1438038c08dc59ac290", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private static boolean isAstEquals(DetailAST expected, DetailAST actual)", "signatureAfterChange": "      private static boolean isAstEquals(DetailAST expected, DetailAST actual)", "diff": ["-        boolean result = false;", "+        boolean result;", "-        } else {", "-            if (expected.getType() == actual.getType()", "-                    && expected.getLineNo() == actual.getLineNo()", "-                    && expected.getColumnNo() == actual.getColumnNo()) {", "-                if (expected.getText() == null) {", "-                    result = actual.getText() == null;", "-                }", "-                else if (expected.getText().equals(actual.getText())) {", "-                    result = true;", "-                }", "-            }", "-", "-            if (result) {", "-                DetailAST childExpected = expected.getFirstChild();", "-                DetailAST childActual = actual.getFirstChild();", "-                result = isAstEquals(childExpected, childActual);", "-                if (result) {", "-                    DetailAST nextSiblingExpected = expected.getNextSibling();", "-                    DetailAST nextSiblingActual = actual.getNextSibling();", "-                    result = isAstEquals(nextSiblingExpected, nextSiblingActual);", "-                }", "-            }", "+        }", "+        else {", "+            result = isAstEqualsSafe(expected, actual);"]}]}
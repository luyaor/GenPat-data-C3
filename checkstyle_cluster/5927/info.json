{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b517d2cce2ad99dcd3426c8643de4b4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f47603274775af63a9ab8b9baab4120", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter5naming/rule522typenames/TypeNameTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void typeNameTest() throws Exception", "signatureAfterChange": "      @Test     public void typeNameTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"TypeName\");", "-        String msgKey = \"name.invalidPattern\";", "-        String format = \"^[A-Z][a-zA-Z0-9]*$\";", "+        final Configuration checkConfig = builder.getCheckConfig(\"TypeName\");", "+        final String msgKey = \"name.invalidPattern\";", "+        final String format = \"^[A-Z][a-zA-Z0-9]*$\";", "-            \"3:7: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"inputHeaderClass\", format),", "-            \"5:22: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"InputHeader___Interface\", format),", "-            \"7:17: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"inputHeaderEnum\", format),", "-            \"9:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"NoValid$Name\", format),", "-            \"11:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"$NoValidName\", format),", "-            \"13:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"NoValidName$\", format),", "+            \"3:7: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"inputHeaderClass\",", "+                format),", "+            \"5:22: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"InputHeader___Interface\",", "+                format),", "+            \"7:17: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"inputHeaderEnum\",", "+                format),", "+            \"9:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"NoValid$Name\",", "+                format),", "+            \"11:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"$NoValidName\",", "+                format),", "+            \"13:11: \" + getCheckMessage(checkConfig.getMessages(), msgKey, \"NoValidName$\",", "+                format),", "-        String filePath = builder.getFilePath(\"TypeNameInput\");", "+        final String filePath = builder.getFilePath(\"TypeNameInput\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ba51adfdbe0cc422f6141b76d8035db", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter5naming/rule523methodnames/MethodNameTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void methodNameTest() throws Exception", "signatureAfterChange": "      @Test     public void methodNameTest() throws Exception", "diff": ["-        Configuration checkConfig = builder.getCheckConfig(\"MethodName\");", "-        String msgKey = \"name.invalidPattern\";", "-        String format = \"^[a-z][a-z0-9][a-zA-Z0-9_]*$\";", "+        final Configuration checkConfig = builder.getCheckConfig(\"MethodName\");", "+        final String msgKey = \"name.invalidPattern\";", "+        final String format = \"^[a-z][a-z0-9][a-zA-Z0-9_]*$\";", "-        String filePath = builder.getFilePath(\"InputMethodName\");", "+        final String filePath = builder.getFilePath(\"InputMethodName\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91bbf3834033a433709d50399a5deec7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/it/java/com/google/checkstyle/test/chapter7javadoc/rule72thesummaryfragment/SummaryJavadocTest.java", "commitBeforeChange": "6b902e2af6ba7ae90e95a3f126d2a1e685c9c64d", "commitAfterChange": "344ea5c012d1814441b5758013a2b035c6e1613a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void testIncorrect() throws Exception", "signatureAfterChange": "      @Test     public void testIncorrect() throws Exception", "diff": ["-        String msgFirstSentence = getCheckMessage(SummaryJavadocCheck.class, \"summary.first.sentence\");", "-        String msgForbiddenFragment = getCheckMessage(SummaryJavadocCheck.class, \"summary.javaDoc\");", "+        final String msgFirstSentence = getCheckMessage(SummaryJavadocCheck.class,", "+            \"summary.first.sentence\");", "+        final String msgForbiddenFragment = getCheckMessage(SummaryJavadocCheck.class,", "+            \"summary.javaDoc\");", "-        Configuration checkConfig = builder.getCheckConfig(\"SummaryJavadocCheck\");", "-        String filePath = builder.getFilePath(\"InputIncorrectSummaryJavaDocCheck\");", "+        final Configuration checkConfig = builder.getCheckConfig(\"SummaryJavadocCheck\");", "+        final String filePath = builder.getFilePath(\"InputIncorrectSummaryJavaDocCheck\");", "-        Integer[] warnList = builder.getLinesWithWarn(filePath);", "+        final Integer[] warnList = builder.getLinesWithWarn(filePath);"]}]}
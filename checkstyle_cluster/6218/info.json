{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bcddd0e9db0de74ace0fc87e376d4c79", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "203ab33c0997cb4d3c84a145f3b93867", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/IllegalInstantiationCheck.java", "commitBeforeChange": "12bd8334067b18d9d1ed5039dd4dc673f3a1f560", "commitAfterChange": "46378dadb508320f14737a44c75a832dc5c8120c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private String getIllegalInstantiation(String className)", "signatureAfterChange": "     private String getIllegalInstantiation(String className)", "diff": ["-        if (illegalClasses.contains(className)) {", "-            return className;", "-        }", "-        final int pkgNameLen;", "+        String fullClassName = null;", "-        if (pkgName == null) {", "-            pkgNameLen = 0;", "+        if (illegalClasses.contains(className)) {", "+            fullClassName = className;", "-            pkgNameLen = pkgName.length();", "-        }", "+            final int pkgNameLen;", "-        for (String illegal : illegalClasses) {", "+            if (pkgName == null) {", "+                pkgNameLen = 0;", "+            }", "+            else {", "+                pkgNameLen = pkgName.length();", "+            }", "-            if (isStandardClass(className, illegal)) {", "-                return illegal;", "-            }", "-            if (isSamePackage(className, pkgNameLen, illegal)) {", "-                return illegal;", "-            }", "-            final String importArg = checkImportStatements(className);", "-            if (importArg != null) {", "-                return importArg;", "+            for (String illegal : illegalClasses) {", "+                if (isStandardClass(className, illegal)", "+                        || isSamePackage(className, pkgNameLen, illegal)) {", "+                    fullClassName = illegal;", "+                }", "+                else {", "+                    fullClassName = checkImportStatements(className);", "+                }", "+", "+                if (fullClassName != null) {", "+                    break;", "+                }", "-        return null;", "+        return fullClassName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e7c1a16025ceb956d0b1666c0956d04", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "46378dadb508320f14737a44c75a832dc5c8120c", "commitAfterChange": "9ddad74e484384e5ca2d88ab0fe21922189e2b85", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static DetailAST skipAnnotationOnlyLines(DetailAST ast)", "signatureAfterChange": "     private static DetailAST skipAnnotationOnlyLines(DetailAST ast)", "diff": ["+        DetailAST resultNode = ast;", "-        if (modifiers == null) {", "-            return ast;", "-        }", "-        DetailAST lastAnnotation = findLastAnnotation(modifiers);", "-        if (lastAnnotation == null) {", "-            // There are no annotations.", "-            return ast;", "-        }", "-        final DetailAST tokenAfterLast;", "-        if (lastAnnotation.getNextSibling() == null) {", "-            tokenAfterLast = modifiers.getNextSibling();", "-        }", "-        else {", "-            tokenAfterLast = lastAnnotation.getNextSibling();", "-        }", "+        if (modifiers != null) {", "+            DetailAST lastAnnotation = findLastAnnotation(modifiers);", "-        if (tokenAfterLast.getLineNo() > lastAnnotation.getLineNo()) {", "-            return tokenAfterLast;", "+            if (lastAnnotation != null) {", "+                final DetailAST tokenAfterLast;", "+", "+                if (lastAnnotation.getNextSibling() == null) {", "+                    tokenAfterLast = modifiers.getNextSibling();", "+                }", "+                else {", "+                    tokenAfterLast = lastAnnotation.getNextSibling();", "+                }", "+", "+                if (tokenAfterLast.getLineNo() > lastAnnotation.getLineNo()) {", "+                    resultNode = tokenAfterLast;", "+                }", "+                else {", "+                    final int lastAnnotationLineNumber = lastAnnotation.getLineNo();", "+                    while (lastAnnotation.getPreviousSibling() != null", "+                           && lastAnnotation.getPreviousSibling().getLineNo()", "+                               == lastAnnotationLineNumber) {", "+", "+                        lastAnnotation = lastAnnotation.getPreviousSibling();", "+                    }", "+                    resultNode = lastAnnotation;", "+                }", "+            }", "-        final int lastAnnotationLineNumber = lastAnnotation.getLineNo();", "-        while (lastAnnotation.getPreviousSibling() != null", "-               && lastAnnotation.getPreviousSibling().getLineNo() == lastAnnotationLineNumber) {", "-            lastAnnotation = lastAnnotation.getPreviousSibling();", "-        }", "-        return lastAnnotation;", "+        return resultNode;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0540ced17d0751ba3b2619cd52c7159", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fcdcfbbd7c4ae1f7ac87559bbaa8c1b", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "08ea556aed8265d64a5dd93963b1ce4587cc48b4", "commitAfterChange": "cf3879aa537cc597ac74aa762ba89b15883a4b39", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-                final DetailAST modifier =", "-                    modifiers.findFirstToken(TokenTypes.LITERAL_STATIC);", "-                if (null != modifier) {", "-                    log(modifier.getLineNo(), modifier.getColumnNo(),", "-                        \"redundantModifier\", modifier.getText());", "+                for (final int tokenType : new int[] {", "+                    TokenTypes.LITERAL_STATIC,", "+                    TokenTypes.ABSTRACT, })", "+                {", "+                    final DetailAST modifier =", "+                            modifiers.findFirstToken(tokenType);", "+                    if (null != modifier) {", "+                        log(modifier.getLineNo(), modifier.getColumnNo(),", "+                                \"redundantModifier\", modifier.getText());", "+                    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aa791b766ab042766393988b469bc2a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/modifier/RedundantModifierCheck.java", "commitBeforeChange": "c7087dad73ea7b87e4ccf15f2d7604f321a78c94", "commitAfterChange": "ce59d6abb3385213248b188f5b80f9e9a2ca3507", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST ast)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST ast)", "diff": ["-            if (null != modifiers) {", "-                for (final int tokenType : new int[] {", "-                    TokenTypes.LITERAL_STATIC,", "-                    TokenTypes.ABSTRACT, }) {", "-                    final DetailAST modifier =", "-                            modifiers.findFirstToken(tokenType);", "-                    if (null != modifier) {", "-                        log(modifier.getLineNo(), modifier.getColumnNo(),", "-                                MSG_KEY, modifier.getText());", "-                    }", "+", "+            for (final int tokenType : TOKENS_FOR_INTERFACE_MODIFIERS) {", "+                final DetailAST modifier =", "+                        modifiers.findFirstToken(tokenType);", "+                if (modifier != null) {", "+                    log(modifier.getLineNo(), modifier.getColumnNo(),", "+                            MSG_KEY, modifier.getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96ca3f16d0f8f977e73c10c6d367a478", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/CovariantEqualsCheck.java", "commitBeforeChange": "262209477f39964a63103613f3e2c985da083371", "commitAfterChange": "08638b5f739d9929698860048c052da2d5f80209", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     @Override     public void visitToken(DetailAST aAST)", "diff": ["+    @Override", "-                final Iterator it = mEqualsMethods.iterator();", "-                while (it.hasNext()) {", "-                    final DetailAST equalsAST = (DetailAST) it.next();", "-                    final DetailAST nameNode =", "-                        equalsAST.findFirstToken(TokenTypes.IDENT);", "-                    log(", "-                        nameNode.getLineNo(),", "-                        nameNode.getColumnNo(),", "-                        \"covariant.equals\");", "+                for (DetailAST equalsAST : mEqualsMethods) {", "+                    final DetailAST nameNode = equalsAST", "+                            .findFirstToken(TokenTypes.IDENT);", "+                    log(nameNode.getLineNo(), nameNode.getColumnNo(),", "+                            \"covariant.equals\");"]}]}
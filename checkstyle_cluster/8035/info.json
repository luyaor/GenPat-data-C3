{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "88a8b2d79f576096e1e4f89c07d2a2b0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a652bb9f14cbe278e73878871788b7a", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/ClassResolver.java", "commitBeforeChange": "fa7617c2223dae31f3ad486002f60201667e7a95", "commitAfterChange": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Class resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "signatureAfterChange": "     public Class resolve(String aName, String aCurrentClass)         throws ClassNotFoundException", "diff": ["-        if (isLoadable(aName)) {", "-            return safeLoad(aName);", "-        }", "-        //Perhaps it's fully-qualified inner class", "-        int dotIdx = aName.lastIndexOf(\".\");", "-        if (dotIdx != -1) {", "-            final String cn = aName.substring(0, dotIdx) + \"$\"", "-                + aName.substring(dotIdx + 1);", "-            if (isLoadable(cn)) {", "-                return safeLoad(cn);", "-            }", "+        Class clazz = resolveQualifiedName(aName);", "+        if (clazz != null) {", "+            return clazz;", "-                if (isLoadable(imp)) {", "-                    return safeLoad(imp);", "+                clazz = resolveQualifiedName(imp);", "+                if (clazz != null) {", "+                    return clazz;", "-                // perhaps this is a import for inner class", "-                // let's try load it.", "-                final int dot = imp.lastIndexOf(\".\");", "-                if (dot != -1) {", "-                    final String innerName = imp.substring(0, dot) + \"$\"", "-                        + imp.substring(dot + 1);", "-                    if (isLoadable(innerName)) {", "-                        return safeLoad(innerName);", "-                    }", "-                }", "+", "-            final String fqn = mPkg + \".\" + aName;", "-            if (isLoadable(fqn)) {", "-                return safeLoad(fqn);", "+            clazz = resolveQualifiedName(mPkg + \".\" + aName);", "+            if (clazz != null) {", "+                return clazz;", "-        // try \"java.lang.\"", "-        final String langClass = \"java.lang.\" + aName;", "-        if (isLoadable(langClass)) {", "-            return safeLoad(langClass);", "-        }", "-", "-                if (isLoadable(fqn)) {", "-                    return safeLoad(fqn);", "+                clazz = resolveQualifiedName(fqn);", "+                if (clazz != null) {", "+                    return clazz;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "945db2a8ff67aceb3bf2e6fa13bd5373", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/resources/com/puppycrawl/tools/checkstyle/indentation/FromGuava2.java", "commitBeforeChange": "1ad274c7029a7bdf03d96dddd4ac8c130f2bf543", "commitAfterChange": "8d88dde6f325f9696a6fcd0ed74d45c6a848031b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "    @Override   public ImmutableRangeMap<K, V> subRangeMap(final Range<K> range)", "signatureAfterChange": "    public FromGuava2<K, V> subRangeMap1(final Range<K> range)", "diff": ["-  @Override", "-  public ImmutableRangeMap<K, V> subRangeMap(final Range<K> range) {", "+", "+  public FromGuava2<K, V> subRangeMap1(final Range<K> range) {", "+    Range<K> ranges = null;", "-      return ImmutableRangeMap.of();", "-    int lowerIndex = SortedLists.binarySearch(", "-        ranges, Range.<K>upperBoundFn(), range.lowerBound,", "-        KeyPresentBehavior.FIRST_AFTER, KeyAbsentBehavior.NEXT_HIGHER);", "-    int upperIndex = SortedLists.binarySearch(ranges, ", "-        Range.<K>lowerBoundFn(), range.upperBound,", "-        KeyPresentBehavior.ANY_PRESENT, KeyAbsentBehavior.NEXT_HIGHER);", "+    int lowerIndex = SortedLists.binarySearch();", "+    int upperIndex = SortedLists.binarySearch();", "-      return ImmutableRangeMap.of();", "+      return null;", "-    ImmutableList<Range<K>> subRanges = new ImmutableList<Range<K>>() {", "-      @Override", "-      public int size() {", "-        return len;", "-      }", "+    FromGuava2<K, V> outer = null;", "+    return outer;", "+  }", "-      @Override", "-      public Range<K> get(int index) {", "-        checkElementIndex(index, len);", "-        if (index == 0 || index == len - 1) {", "-          return ranges.get(index + off).intersection(range);", "-        } else {", "-          return ranges.get(index + off);", "-        }", "-      }", "-      @Override", "-      boolean isPartialView() {", "-        return true;", "-      }", "-    };", "-    final ImmutableRangeMap<K, V> outer = this;", "-    return new ImmutableRangeMap<K, V>(", "-        subRanges, values.subList(lowerIndex, upperIndex)) {", "-          @Override", "-          public ImmutableRangeMap<K, V> subRangeMap(Range<K> subRange) {", "-            if (range.isConnected(subRange)) {", "-              return outer.subRangeMap(subRange.intersection(range));", "-            } else {", "-              return ImmutableRangeMap.of();", "-            }", "-          }", "-    };"]}]}
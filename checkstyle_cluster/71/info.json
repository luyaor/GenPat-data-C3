{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee6add894fd7449bbc053060f28d8456", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fc646e1226e6bb458e03e4fa1086c6d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.java", "commitBeforeChange": "ea704b1cfd23923b91679828ca0bca0035944478", "commitAfterChange": "5c481899d4cfcb8369dcd0851aef21c2d8c5088a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 35, "signatureBeforeChange": "     private LocalizedMessage createLogMessage(int aLine, String aKey, Object... aArgs)", "signatureAfterChange": "          public Object[] getMessageArguments()", "diff": ["-     */", "-    private LocalizedMessage createLogMessage(int aLine, String aKey, Object... aArgs)", "-    {", "-        return new LocalizedMessage(", "-                aLine,", "-                getMessageBundle(),", "-                aKey,", "-                aArgs,", "-                getSeverityLevel(),", "-                getId(),", "-                this.getClass(),", "-                this.getCustomMessages().get(aKey));", "-    }", "+", "+        public Object[] getMessageArguments()", "+        {", "+            return mMessageArguments;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "300dc76929f695c937112b9d6a0599b6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/javadoc/JavadocStyleCheck.java", "commitBeforeChange": "b4ad010003b48f56a8724d7c97395ddb8b1f706a", "commitAfterChange": "b78f144ee4613e1d503624067b4a03d10b3515a8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     private String getCommentText(String[] aComments)", "signatureAfterChange": "     private String getCommentText(String[] aComments)", "diff": ["-                // Look for Javadoc tag that's not an inline tag", "-                // it can appear within the comment text.", "-                // Inline tags are denoted by curly braces: {@tag}", "-                final int ndx = line.indexOf('@');", "-                if ((ndx != -1)", "-                    && (ndx == 0 || line.charAt(ndx - 1) != '{'))", "-                {", "-                    foundTag = true;", "-                    line = line.substring(0, ndx);", "+                if (line.charAt(textStart) == '@') {", "+                    //we have found the tag section", "+                    break;", "-", "-", "-                if (foundTag) {", "-                    break;", "-                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c0a84c9c3873e08229fedc3c4052413", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/blocks/LeftCurlyCheck.java", "commitBeforeChange": "603c5bb53ea12900f6a1c8af0c4a765af36786e3", "commitAfterChange": "7e1062dea1fae14b90ae6461625c259ed944d1e4", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "     private static DetailAST skipAnnotationOnlyLines(DetailAST ast)", "signatureAfterChange": "     private static DetailAST skipAnnotationOnlyLines(DetailAST ast)", "diff": ["-            DetailAST lastAnnotation = findLastAnnotation(modifiers);", "+            final DetailAST lastAnnotation = findLastAnnotation(modifiers);", "-                    final int lastAnnotationLineNumber = lastAnnotation.getLineNo();", "-                    while (lastAnnotation.getPreviousSibling() != null", "-                           && lastAnnotation.getPreviousSibling().getLineNo()", "-                               == lastAnnotationLineNumber) {", "-", "-                        lastAnnotation = lastAnnotation.getPreviousSibling();", "-                    }", "-                    resultNode = lastAnnotation;", "+                    resultNode = getFirstAnnotationOnSameLine(lastAnnotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe9728d54aa553d95018b5ed6b96d792", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/EqualsAvoidNullCheck.java", "commitBeforeChange": "f747835b6b4bd894eed2ef17eb059a003fb4d988", "commitAfterChange": "6ebcf2733b6c635d5f044aa35caf2a610c7723ff", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 2, "signatureBeforeChange": "     private boolean containsMultiArgs(final AST expr)", "signatureAfterChange": "      @Override     public int[] getRequiredTokens()", "diff": ["+", "+    @Override", "+    public int[] getRequiredTokens() {", "+        return getDefaultTokens();", "-     */", "-    private boolean containsMultiArgs(final AST expr) {", "-        final AST comma = expr.getNextSibling();", "-        return comma != null && comma.getType() == TokenTypes.COMMA;", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b715cb870cc5ea6b96308441201d0c49", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e27a4c9e2bbb9180ae06ea6a7517e9", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/AbstractTypeAwareCheck.java", "commitBeforeChange": "fa7617c2223dae31f3ad486002f60201667e7a95", "commitAfterChange": "dfbaeedf8bc0d68b55699b79ed0d8ff094e444f0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 36, "signatureBeforeChange": "     protected boolean isShortName(String aShortName, String aFullName)", "signatureAfterChange": "         public String toString()", "diff": ["-     */", "-    protected boolean isShortName(String aShortName, String aFullName)", "-    {", "-        if (aShortName.length() >= aFullName.length()) {", "-            return false;", "-        }", "-", "-        final String base = Utils.baseClassname(aFullName);", "-        if (aShortName.length() >= aFullName.length()", "-                || !base.equals(aShortName))", "-        {", "-            return false;", "-        }", "-", "-        // check fully qualified import", "-        if (mImports.contains(aFullName)) {", "-            return true;", "-        }", "-", "-        // check .* import", "-        final int endIndex = aFullName.length() - base.length() - 1;", "-        final String packageName = aFullName.substring(0, endIndex);", "-        final String starImport = packageName + \".*\";", "-        if (mImports.contains(starImport)) {", "-            return true;", "-        }", "-", "-        // check fully qualified class from same package", "-        return packageName.equals(mPackageFullIdent.getText());", "-    }", "+        /** {@inheritDoc} */", "+        public String toString()", "+        {", "+            return \"Token[\" + getText() + \"(\" + getLineNo()", "+                + \"x\" + getColumnNo() + \")]\";", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d19ce2957f58aa28a840199b70c3f26", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/filters/SuppressElement.java", "commitBeforeChange": "a9bfdceec2a2d86a622c03fbd4052f007b5e70cc", "commitAfterChange": "1e7d8eef0641edcf97316618c8fab40bd248133d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public int decide(Object aObject)", "signatureAfterChange": "     public boolean accept(Object aObject)", "diff": ["-    public int decide(Object aObject)", "+    public boolean accept(Object aObject)", "-            return Filter.NEUTRAL;", "+            return true;", "-            return Filter.NEUTRAL;", "+            return true;", "-        // deny if no line/column matching", "+        // reject if no line/column matching", "-            return Filter.DENY;", "+            return false;", "-        // deny line if it is accepted by the line CSV filter", "+        // reject line if it is accepted by the line CSV filter", "-            if (mLineFilter.decide(line) == Filter.ACCEPT) {", "-                return Filter.DENY;", "+            if (mLineFilter.accept(line)) {", "+                return false;", "-        // deny if column accepted by the column CSV filter", "+        // reject if column accepted by the column CSV filter", "-            if (mColumnFilter.decide(column) == Filter.ACCEPT) {", "-                return Filter.DENY;", "+            if (mColumnFilter.accept(column)) {", "+                return false;", "-        return Filter.NEUTRAL;", "+        return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "417ad5ded0acf1fd78333104105936ee", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/XMLLogger.java", "commitBeforeChange": "cdf3e56bacd3895262af8a1df9ca5c81f4071970", "commitAfterChange": "69a3d541b4888e5e0e6ab09aa675667155c65381", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public static boolean isReference(String ent)", "signatureAfterChange": "     public static boolean isReference(String ent)", "diff": ["-        if (ent.charAt(0) != '&' || !CommonUtils.endsWithChar(ent, ';')) {", "-            return false;", "-        }", "+        boolean reference = false;", "-        if (ent.charAt(1) == '#') {", "+        if (ent.charAt(0) != '&' || !CommonUtils.endsWithChar(ent, ';')) {", "+            reference = false;", "+        }", "+        else if (ent.charAt(1) == '#') {", "-                return true;", "+                reference = true;", "-                return false;", "+                reference = false;", "-", "-        final String name = ent.substring(1, ent.length() - 1);", "-        for (String element : ENTITIES) {", "-            if (name.equals(element)) {", "-                return true;", "+        else {", "+            final String name = ent.substring(1, ent.length() - 1);", "+            for (String element : ENTITIES) {", "+                if (name.equals(element)) {", "+                    reference = true;", "+                    break;", "+                }", "-        return false;", "+        return reference;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e79847d86b6c688526a8e5ace13198d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/InnerAssignmentCheck.java", "commitBeforeChange": "e3741d10267df217664f47fdf68169286e2d31bc", "commitAfterChange": "2554557c1c4dda6cb348ba053a60c17d8ada9f73", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private boolean isAssignment(DetailAST aAST)", "signatureAfterChange": "     private static boolean isInContext(DetailAST aAST, int[][] aContextSet)", "diff": ["-    private boolean isAssignment(DetailAST aAST)", "-        // TODO: make actual tokens available to Check and loop over actual", "-        // tokens here?", "-        final int[] tokens = getDefaultTokens();", "-        for (int i = 0; i < tokens.length; i++) {", "-            final int tokenType = tokens[i];", "-            if (astType == tokenType) {", "-                return true;", "+     */", "+    private static boolean isInContext(DetailAST aAST, int[][] aContextSet)", "+    {", "+        for (int i = 0; i < aContextSet.length; i++) {", "+            DetailAST current = aAST;", "+            final int len = aContextSet[i].length;", "+            for (int j = 0; j < len; j++) {", "+                current = current.getParent();", "+                final int expectedType = aContextSet[i][j];", "+                if (current == null || current.getType() != expectedType) {", "+                    break;", "+                }", "+                if (j == len - 1) {", "+                    return true;", "+                }"]}]}
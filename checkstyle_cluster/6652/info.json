{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec9756962ba661504aeac6cf8f66b49c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5654782b1f0034cda17745ab51daf1b0", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/MissingSwitchDefaultCheck.java", "commitBeforeChange": "d3ca2e08b473b7617d8b312904820c6ec16cc903", "commitAfterChange": "9837e5b5c12faeba864f635eda7ffc0f5003aaf5", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAst)", "signatureAfterChange": "     public int[] getAcceptableTokens()", "diff": ["-    /** @see Check */", "-    public void visitToken(DetailAST aAst)", "+    /** @see com.puppycrawl.tools.checkstyle.api.Check */", "+    public int[] getAcceptableTokens()", "-        DetailAST child = aAst.findFirstToken(TokenTypes.CASE_GROUP);", "-        while (child != null) {", "-            if ((child.getType() == TokenTypes.CASE_GROUP)", "-                && child.branchContains(TokenTypes.LITERAL_DEFAULT))", "-            {", "-                return;", "-            }", "-            child = (DetailAST) child.getNextSibling();", "-        }", "-        log(aAst.getLineNo(), \"missing.switch.default\");", "+        return getDefaultTokens();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7098cd8439a8cbd3f32adb2a8124fc31", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/NewHandler.java", "commitBeforeChange": "48cdb1feb456babae596f9132f8cd01cfc4bd39a", "commitAfterChange": "d4a862ea091fc7b74f34a13fcae8143239d9d4b9", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void checkIndentation()", "signatureAfterChange": "      @Override     public void checkIndentation()", "diff": ["-        final DetailAST rparen = getMainAst().findFirstToken(TokenTypes.RPAREN);", "-", "-        if (rparen == null || lparen == null", "-            || rparen.getLineNo() == lparen.getLineNo()) {", "-            return;", "-        }", "-", "-        if (getMainAst().getType() != TokenTypes.OBJBLOCK) {", "-            return;", "-        }", "-", "-        // if this method name is on the same line as a containing", "-        // method, don't indent, this allows expressions like:", "-        //    method(\"my str\" + method2(", "-        //        \"my str2\"));", "-        // as well as", "-        //    method(\"my str\" +", "-        //        method2(", "-        //            \"my str2\"));", "-        //", "-", "-        checkExpressionSubtree(", "-            getMainAst().findFirstToken(TokenTypes.ELIST),", "-            new IndentLevel(getLevel(), getBasicOffset()),", "-            false, true);", "-", "-        checkRParen(lparen, rparen);"]}]}
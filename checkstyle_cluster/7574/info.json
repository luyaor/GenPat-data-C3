{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2a71427740f4ad92f8669b98ed4f6ac", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "389f5675bd833e027e0be0045a5440e2", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/AbstractSuperCheck.java", "commitBeforeChange": "7410a9f8bfa475e37d786271b6fcceb6a73a897f", "commitAfterChange": "5a3f05ec8038daa674666bbaa82d59127aa74f92", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "     private boolean isOverridingMethod(DetailAST ast)", "signatureAfterChange": "     private boolean isOverridingMethod(DetailAST ast)", "diff": ["-        if (ast.getType() != TokenTypes.METHOD_DEF", "-            || ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "-            return false;", "+        boolean overridingMethod = false;", "+", "+        if (ast.getType() == TokenTypes.METHOD_DEF", "+                && !ScopeUtils.isInInterfaceOrAnnotationBlock(ast)) {", "+            final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "+            final String name = nameAST.getText();", "+            final DetailAST modifiersAST = ast.findFirstToken(TokenTypes.MODIFIERS);", "+", "+            if (getMethodName().equals(name)", "+                    && !modifiersAST.branchContains(TokenTypes.LITERAL_NATIVE)) {", "+                final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "+                overridingMethod = params.getChildCount() == 0;", "+            }", "-        final DetailAST nameAST = ast.findFirstToken(TokenTypes.IDENT);", "-        final String name = nameAST.getText();", "-        final DetailAST modifiersAST = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (!getMethodName().equals(name)", "-                || modifiersAST.branchContains(TokenTypes.LITERAL_NATIVE)) {", "-            return false;", "-        }", "-        final DetailAST params = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        return params.getChildCount() == 0;", "+        return overridingMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63b5459de72a90fb932d8a4f46934a9e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/j2ee/Utils.java", "commitBeforeChange": "fd6a743fd4b3c9283d62174327dd978bda694892", "commitAfterChange": "b9b72f969209ac4edb9c6b02aaf8e2f590d0b737", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public static boolean hasPublicConstructor(         DetailAST aAST,         int aParameterCount)", "signatureAfterChange": "     public static boolean hasPublicConstructor(         DetailAST aAST,         int aParameterCount)", "diff": ["-        if (objBlock != null) {", "-            DetailAST child = (DetailAST) objBlock.getFirstChild();", "-            while (child != null) {", "-                if (child.getType() == TokenTypes.CTOR_DEF) {", "-                    final DetailAST parameters =", "-                        child.findFirstToken(TokenTypes.PARAMETERS);", "-                    if (Utils.isPublic(child)", "-                        && (parameters.getChildCount() == aParameterCount))", "-                    {", "-                        return true;", "-                    }", "-                }", "-                child = (DetailAST) child.getNextSibling();", "-            }", "+        if (objBlock == null) {", "+            return false;", "-        return false;", "+        int constructorCount = 0;", "+        DetailAST child = (DetailAST) objBlock.getFirstChild();", "+        while (child != null) {", "+            if (child.getType() == TokenTypes.CTOR_DEF) {", "+                constructorCount++;", "+                final DetailAST parameters =", "+                    child.findFirstToken(TokenTypes.PARAMETERS);", "+                if (Utils.isPublic(child)", "+                    && (parameters.getChildCount() == aParameterCount))", "+                {", "+                    return true;", "+                }", "+            }", "+            child = (DetailAST) child.getNextSibling();", "+        }", "+        // implicit, no parameter constructor?", "+        return ((constructorCount == 0) && (aParameterCount == 0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "699133c8a46b44a3c0552491d407e94c", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/utils/CheckUtils.java", "commitBeforeChange": "a09875b9f9ff2d59416331a989b09335ee57c89c", "commitAfterChange": "ef1e65fb5128452cd8a19f82d09455b06a021b65", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public static boolean isEqualsMethod(DetailAST ast)", "signatureAfterChange": "     public static boolean isEqualsMethod(DetailAST ast)", "diff": ["-        if (ast.getType() != TokenTypes.METHOD_DEF) {", "-            // A node must be method def", "-            return false;", "-        }", "+        boolean equalsMethod = false;", "-        // non-static, non-abstract?", "-        final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "-        if (modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "-            || modifiers.branchContains(TokenTypes.ABSTRACT)) {", "-            return false;", "-        }", "+        if (ast.getType() == TokenTypes.METHOD_DEF) {", "+            final DetailAST modifiers = ast.findFirstToken(TokenTypes.MODIFIERS);", "+            final boolean staticOrAbstract = modifiers.branchContains(TokenTypes.LITERAL_STATIC)", "+                    || modifiers.branchContains(TokenTypes.ABSTRACT);", "-        // named \"equals\"?", "-        final DetailAST nameNode = ast.findFirstToken(TokenTypes.IDENT);", "-        final String name = nameNode.getText();", "-        if (!\"equals\".equals(name)) {", "-            return false;", "-        }", "+            if (!staticOrAbstract) {", "+                final DetailAST nameNode = ast.findFirstToken(TokenTypes.IDENT);", "+                final String name = nameNode.getText();", "-        // one parameter?", "-        final DetailAST paramsNode = ast.findFirstToken(TokenTypes.PARAMETERS);", "-        return paramsNode.getChildCount() == 1;", "+                if (\"equals\".equals(name)) {", "+                    // one parameter?", "+                    final DetailAST paramsNode = ast.findFirstToken(TokenTypes.PARAMETERS);", "+                    equalsMethod = paramsNode.getChildCount() == 1;", "+                }", "+            }", "+        }", "+        return equalsMethod;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b79d944c639584747f7785759eaa8bfb", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/HiddenFieldCheck.java", "commitBeforeChange": "204c073294cdca6756bcd546d6af85a797ad7d79", "commitAfterChange": "6784e5bcd5baa6b5086bf8b63709856d685a74c8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private boolean isIgnoredSetterParam(DetailAST ast, String name)", "signatureAfterChange": "     private boolean isIgnoredSetterParam(DetailAST ast, String name)", "diff": ["-        if (ast.getType() != TokenTypes.PARAMETER_DEF", "-            || !ignoreSetter)", "-        {", "-            return false;", "+        if (ast.getType() == TokenTypes.PARAMETER_DEF && ignoreSetter) {", "+            final DetailAST parametersAST = ast.getParent();", "+            final DetailAST methodAST = parametersAST.getParent();", "+            if (parametersAST.getChildCount() == 1", "+                && methodAST.getType() == TokenTypes.METHOD_DEF", "+                && isSetterMethod(methodAST, name))", "+            {", "+                return true;", "+            }", "-        //single pnameter?", "-        final DetailAST parametersAST = ast.getParent();", "-        if (parametersAST.getChildCount() != 1) {", "-            return false;", "-        }", "-        //method pnameter, not constructor pnameter?", "-        final DetailAST methodAST = parametersAST.getParent();", "-        if (methodAST.getType() != TokenTypes.METHOD_DEF) {", "-            return false;", "-        }", "-        //void?", "-        final DetailAST typeAST = methodAST.findFirstToken(TokenTypes.TYPE);", "-        if (!typeAST.branchContains(TokenTypes.LITERAL_VOID)) {", "-            return false;", "+        return false;", "+    }", "-        //property setter name?", "-        final String methodName =", "-                methodAST.findFirstToken(TokenTypes.IDENT).getText();", "-        final String expectedName = \"set\" + capitalize(name);", "-        return methodName.equals(expectedName);"]}]}
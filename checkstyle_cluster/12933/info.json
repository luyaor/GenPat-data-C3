{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a2d2576057bfc1424c0bda1327d17ba", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03ed7cb6663eef5b55375f719ac6eb50", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "a0d00ea8940acd30064715db04d7a19a99d4cca9", "commitAfterChange": "f52306ff7799ea2b2e4d99fba7040a11b186d68a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private static void collectDeclarations(Deque<LexicalFrame> frameStack,         DetailAST ast)", "signatureAfterChange": "     private static void collectDeclarations(Deque<LexicalFrame> frameStack,         DetailAST ast)", "diff": ["-                final DetailAST parameterAST = ast.findFirstToken(TokenTypes.IDENT);", "-                frame.addName(parameterAST.getText());", "+                final DetailAST parameterIdent = ast.findFirstToken(TokenTypes.IDENT);", "+                frame.addIdent(parameterIdent);", "-                final DetailAST classAST = ast.findFirstToken(TokenTypes.IDENT);", "-                frame.addName(classAST.getText());", "+                final DetailAST classIdent = ast.findFirstToken(TokenTypes.IDENT);", "+                frame.addIdent(classIdent);", "-                final String name = ast.findFirstToken(TokenTypes.IDENT).getText();", "+                final DetailAST ident = ast.findFirstToken(TokenTypes.IDENT);", "-                        ((ClassFrame) frame).addStaticMethod(name);", "+                        ((ClassFrame) frame).addStaticMethod(ident);", "-                        ((ClassFrame) frame).addInstanceMethod(name);", "+                        ((ClassFrame) frame).addInstanceMethod(ident);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a00035fb209e8fc641d57012214543e", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "a0d00ea8940acd30064715db04d7a19a99d4cca9", "commitAfterChange": "f52306ff7799ea2b2e4d99fba7040a11b186d68a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private static void collectVariableDeclarations(DetailAST ast, LexicalFrame frame)", "signatureAfterChange": "     private static void collectVariableDeclarations(DetailAST ast, LexicalFrame frame)", "diff": ["-        final String name =", "-                ast.findFirstToken(TokenTypes.IDENT).getText();", "+        final DetailAST ident =", "+                ast.findFirstToken(TokenTypes.IDENT);", "-                ((ClassFrame) frame).addStaticMember(name);", "+                ((ClassFrame) frame).addStaticMember(ident);", "-                ((ClassFrame) frame).addInstanceMember(name);", "+                ((ClassFrame) frame).addInstanceMember(ident);", "-            frame.addName(name);", "+            frame.addIdent(ident);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f95dc34b35fc6ca286876bdb1f07db6", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OperatorWrapCheck.java", "commitBeforeChange": "36af550d96f529ecd299b568702c2e197b1c0aa9", "commitAfterChange": "468541ac37d54fbeac5061958d3661ff133a7ffe", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-        if (wOp != OperatorWrapOption.NL.IGNORE) {", "-            final String text = aAST.getText();", "-            final int colNo = aAST.getColumnNo();", "-            final int lineNo = aAST.getLineNo();", "-            // TODO: Handle comments before and after operator", "-            // Check if rest of line is whitespace, and not just the operator", "-            // by itself. This last bit is to handle the operator on a line by", "-            // itself.", "-            if (wOp == OperatorWrapOption.NL", "-                && !text.equals(getLines()[lineNo - 1].trim())", "-                && (getLines()[lineNo - 1].substring(colNo + text.length())", "-                    .trim().length() == 0))", "-            {", "-                log(lineNo, colNo, \"line.new\", text);", "-            }", "-            else if (wOp == OperatorWrapOption.EOL", "-                      && Utils.whitespaceBefore(colNo - 1,", "-                                               getLines()[lineNo - 1]))", "-            {", "-                log(lineNo, colNo, \"line.previous\", text);", "-            }", "+        final String text = aAST.getText();", "+        final int colNo = aAST.getColumnNo();", "+        final int lineNo = aAST.getLineNo();", "+        final String currentLine = getLines()[lineNo - 1];", "+        // TODO: Handle comments before and after operator", "+        // Check if rest of line is whitespace, and not just the operator", "+        // by itself. This last bit is to handle the operator on a line by", "+        // itself.", "+        if (wOp == OperatorWrapOption.NL", "+            && !text.equals(currentLine.trim())", "+            && (currentLine.substring(colNo + text.length())", "+                .trim().length() == 0))", "+        {", "+            log(lineNo, colNo, \"line.new\", text);", "-", "+        else if (wOp == OperatorWrapOption.EOL", "+                  && Utils.whitespaceBefore(colNo - 1, currentLine))", "+        {", "+            log(lineNo, colNo, \"line.previous\", text);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a11d5854bf44056dc6ea33937d1101", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "10f348bbfd91fd8c2bd7776aff3c03f549380a44", "commitAfterChange": "6c04cd63af392376159dc7aae41d85bbc348e96d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "     private void processField(DetailAST ast, int parentType)", "signatureAfterChange": "     private AbstractFrame processField(DetailAST ast, int parentType)", "diff": ["-    private void processField(DetailAST ast, int parentType) {", "+    private AbstractFrame processField(DetailAST ast, int parentType) {", "+        AbstractFrame frame = null;", "-                && !isDeclarationToken(parentType)", "-                && isClassField(ast)) {", "-            log(ast, MSG_VARIABLE, ast.getText());", "+                && !isDeclarationToken(parentType)) {", "+            frame = checkField(ast);", "+        return frame;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e84f8a09e70c5d41644a4b7b70b610e8", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/RequireThisCheck.java", "commitBeforeChange": "a6a288813e2b86dd11ed0bd3e4af9539480813ff", "commitAfterChange": "95871dcc266d181b4c960a2ff88daa3e713ef656", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "     private void processIDENT(DetailAST aAST)", "signatureAfterChange": "     private void processIDENT(DetailAST aAST)", "diff": ["+        // let's check method calls", "-            log(aAST, \"require.this.method\", aAST.getText());", "+            if (mCheckMethods) {", "+                log(aAST, \"require.this.method\", aAST.getText());", "+            }", "+            return;", "+        }", "+", "+        // let's check fields", "+        if (!mCheckFields) {", "+            // we shouldn't check fields", "-        final LexicalFrame declared = this.mFrames.findFrame(aAST.getText());", "+        final String name = aAST.getText();", "+        final LexicalFrame declared = this.mFrames.findFrame(name);", "-            log(aAST, \"require.this.unfound.variable\", aAST.getText());", "+            log(aAST, \"require.this.unfound.variable\", name);", "-            log(aAST, \"require.this.variable\", aAST.getText());", "+            log(aAST, \"require.this.variable\", name);"]}]}
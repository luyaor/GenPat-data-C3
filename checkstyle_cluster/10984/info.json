{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ccab92963bab0980f37775abadb2d9b2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3eada5334b5c39334745e769d9136367", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "5dfb3f5a9e0206f9f80f9f067faa3dbe7766cef9", "commitAfterChange": "13b7c634337e38d20daa92ca9d5e069a2e72ec55", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int process(List<File> aFiles)", "signatureAfterChange": "     public int process(List<File> aFiles)", "diff": ["+        // Prepare to start", "-            fsc.process(aFiles);", "+            fsc.beginProcessing();", "+        }", "+", "+        // Process each file", "+        for (File f : aFiles) {", "+            final String fileName = f.getAbsolutePath();", "+            fireFileStarted(fileName);", "+            final TreeSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "+            try {", "+                // TODO: Need to use , getCharset()", "+                final String[] lines = Utils.getLines(f.getAbsolutePath());", "+                final List<String> theLines = Lists.newArrayList(lines);", "+                for (FileSetCheck fsc : mFileSetChecks) {", "+                    fileMessages.addAll(fsc.process(f, theLines));", "+                }", "+            }", "+            catch (final FileNotFoundException fnfe) {", "+                Utils.getExceptionLogger().debug(", "+                        \"FileNotFoundException occured.\", fnfe);", "+                fileMessages.add(new LocalizedMessage(0,", "+                        Defn.CHECKSTYLE_BUNDLE, \"general.fileNotFound\", null,", "+                        null, this.getClass(), null));", "+            }", "+            catch (final IOException ioe) {", "+                Utils.getExceptionLogger().debug(\"IOException occured.\", ioe);", "+                fileMessages.add(new LocalizedMessage(0,", "+                        Defn.CHECKSTYLE_BUNDLE, \"general.exception\",", "+                        new String[] {ioe.getMessage()}, null, this.getClass(),", "+                        null));", "+            }", "+            fireErrors(fileName, fileMessages);", "+            fireFileFinished(fileName);", "+        }", "+", "+        // Finish up", "+        for (FileSetCheck fsc : mFileSetChecks) {", "+            // They may also log!!!", "+            fsc.finishProcessing();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b762e4ca4c43b310ee54b4837b2f6e28", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/Checker.java", "commitBeforeChange": "346387c717048391485fb28f877531aab1095de1", "commitAfterChange": "f020066f8bdfb378df36904af3df8b5bc48858fd", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "     public int process(List<File> files) throws CheckstyleException", "signatureAfterChange": "     public int process(List<File> files) throws CheckstyleException", "diff": ["-            if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {", "-                continue;", "-            }", "-            final String fileName = file.getAbsolutePath();", "-            fireFileStarted(fileName);", "-            final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "-                final FileText theText = new FileText(file.getAbsoluteFile(),", "-                        charset);", "-                for (final FileSetCheck fsc : fileSetChecks) {", "-                    fileMessages.addAll(fsc.process(file, theText));", "+                if (!CommonUtils.matchesFileExtension(file, fileExtensions)) {", "+                    continue;", "+                final String fileName = file.getAbsolutePath();", "+                fireFileStarted(fileName);", "+                final SortedSet<LocalizedMessage> fileMessages = Sets.newTreeSet();", "+                try {", "+                    final FileText theText = new FileText(file.getAbsoluteFile(),", "+                            charset);", "+                    for (final FileSetCheck fsc : fileSetChecks) {", "+                        fileMessages.addAll(fsc.process(file, theText));", "+                    }", "+                }", "+                catch (final IOException ioe) {", "+                    LOG.debug(\"IOException occurred.\", ioe);", "+                    fileMessages.add(new LocalizedMessage(0,", "+                            Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",", "+                            new String[] {ioe.getMessage()}, null, getClass(),", "+                            null));", "+                }", "+                fireErrors(fileName, fileMessages);", "+                fireFileFinished(fileName);", "-            catch (final IOException ioe) {", "-                LOG.debug(\"IOException occurred.\", ioe);", "-                fileMessages.add(new LocalizedMessage(0,", "-                        Definitions.CHECKSTYLE_BUNDLE, \"general.exception\",", "-                        new String[] {ioe.getMessage()}, null, getClass(),", "-                        null));", "+            catch (Exception ex) {", "+                // We need to catch all exception to put a reason failure(file name) in exception", "+                throw new CheckstyleException(\"Exception was thrown while processing \"", "+                        + file.getPath(), ex);", "-            fireErrors(fileName, fileMessages);", "-            fireFileFinished(fileName);"]}]}
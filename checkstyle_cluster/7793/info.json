{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29928fa0eb5e44507c72481450b18aeb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "495fdd189707a40cfcfca8042ddbd75d", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/test/java/com/puppycrawl/tools/checkstyle/checks/SuppressWarningsHolderTest.java", "commitBeforeChange": "425fd5a27cd567d5784bd246729c55cf8cda3dbd", "commitAfterChange": "6438bb246b9e6b2b6cd31e1c028853440d52d64b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void testIsSuppressedWithAllArgument() throws Exception", "signatureAfterChange": "      @Test     public void testIsSuppressedWithAllArgument() throws Exception", "diff": ["-        assertFalse(SuppressWarningsHolder.isSuppressed(\"SourceName\", 100, 10));", "+        final Checker source = new Checker();", "+        final LocalizedMessage firstMessageForTest =", "+            new LocalizedMessage(100, 10, null, null, null, \"id\", MemberNameCheck.class, \"msg\");", "+        final AuditEvent firstEventForTest =", "+            new AuditEvent(source, \"fileName\", firstMessageForTest);", "+        assertFalse(SuppressWarningsHolder.isSuppressed(firstEventForTest));", "-        assertTrue(SuppressWarningsHolder.isSuppressed(\"SourceName\", 100, 150));", "+        final LocalizedMessage secondMessageForTest =", "+            new LocalizedMessage(100, 150, null, null, null, \"id\", MemberNameCheck.class, \"msg\");", "+        final AuditEvent secondEventForTest =", "+            new AuditEvent(source, \"fileName\", secondMessageForTest);", "+        assertTrue(SuppressWarningsHolder.isSuppressed(secondEventForTest));", "-        assertTrue(SuppressWarningsHolder.isSuppressed(\"SourceName\", 200, 1));", "+        final LocalizedMessage thirdMessageForTest =", "+            new LocalizedMessage(200, 1, null, null, null, \"id\", MemberNameCheck.class, \"msg\");", "+        final AuditEvent thirdEventForTest =", "+            new AuditEvent(source, \"fileName\", thirdMessageForTest);", "+        assertTrue(SuppressWarningsHolder.isSuppressed(thirdEventForTest));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72d670e6442e1a5ae9794fe38f046a12", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java", "commitBeforeChange": "84a9ea5f6b3f000b840f184100ed3d2ebc096978", "commitAfterChange": "ca39f3af5a1e4fa088e42dde4ab3fc0f8daac723", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["+        if (mIgnoreDirectoryName) {", "+            return;", "+        }", "+", "+        // Calculate the directory name, but stripping off the last", "+        // part.", "+        final String fname = getFileContents().getFilename();", "+        final int lastPos = fname.lastIndexOf(File.separatorChar);", "+        final String dirname = fname.substring(0, lastPos);", "+", "+        // Convert the found package name into the expected directory name.", "+        final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();", "+        final FullIdent full = FullIdent.createFullIdent(nameAST);", "+        final String expected = full.getText().replace('.', File.separatorChar);", "+", "+        // Finally see that the real directory ends with the expected directory", "+        if (!dirname.endsWith(expected)) {", "+            log(full.getLineNo(),", "+                full.getColumnNo(),", "+                \"package.dir.mismatch\",", "+                expected);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9701d26047bbe32d0277f2d812afb9d1", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/PackageDeclarationCheck.java", "commitBeforeChange": "82fc3397f8b8776ef41b5aa2d3404e78a8b15ff7", "commitAfterChange": "7b3a329cf8645625097a2e17eb62a3430d9bb35a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Override     public void visitToken(DetailAST aAST)", "signatureAfterChange": "      @Override     public void visitToken(DetailAST aAST)", "diff": ["-        if (mIgnoreDirectoryName) {", "-            return;", "-        }", "-", "-        // Calculate the directory name, but stripping off the last", "-        // part.", "-        final String fname = getFileContents().getFilename();", "-        final int lastPos = fname.lastIndexOf(File.separatorChar);", "-        final String dirname = fname.substring(0, lastPos);", "-", "-        // Convert the found package name into the expected directory name.", "-        final DetailAST nameAST = aAST.getLastChild().getPreviousSibling();", "-        final FullIdent full = FullIdent.createFullIdent(nameAST);", "-        final String expected = full.getText().replace('.', File.separatorChar);", "-", "-        // Finally see that the real directory ends with the expected directory", "-        if (!dirname.endsWith(expected)) {", "-            log(full.getLineNo(),", "-                full.getColumnNo(),", "-                \"package.dir.mismatch\",", "-                expected);", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c40a24a131a8ec33790fe98a61bbde87", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/indentation/MethodCallHandler.java", "commitBeforeChange": "798aac8ff0ec17573d316b64ea1b86ecf387f12f", "commitAfterChange": "5a4f991d2738c824f70f361b21d9da193ff3751c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "     public IndentLevel getLevelImpl()", "signatureAfterChange": "     public IndentLevel getLevelImpl()", "diff": ["+", "+                // we should increase indentation only if this is the first", "+                // chained method call which was moved to the next line", "+                DetailAST main = getMainAst();", "+                DetailAST dot = (DetailAST) main.getFirstChild();", "+                DetailAST target = (DetailAST) dot.getFirstChild();", "+", "+                if (dot.getType() == TokenTypes.DOT", "+                    && target.getType() == TokenTypes.METHOD_CALL)", "+                {", "+                    DetailAST dot1 = (DetailAST) target.getFirstChild();", "+                    DetailAST target1 = (DetailAST) dot1.getFirstChild();", "+", "+                    if (dot1.getType() == TokenTypes.DOT", "+                        && target1.getType() == TokenTypes.METHOD_CALL)", "+                    {", "+                        return container.getLevel();", "+                    }", "+                }"]}]}
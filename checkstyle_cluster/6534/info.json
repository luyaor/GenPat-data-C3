{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06e84b30667b2aadd344c8fd0603b2b1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0998d76bea1bfd0116beefb575133f79", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/usage/transmogrify/Resolver.java", "commitBeforeChange": "c608ff940a62b9717d645c05ad0954578c955430", "commitAfterChange": "69e6c6f4482b3975af3345b1831c48be1ad7f325", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "     private IClass resolveBooleanExpression(         SymTabAST expression,         Scope location,         IClass context,         boolean referencePhase)", "signatureAfterChange": "     private IClass resolveBooleanExpression(         SymTabAST expression,         Scope location,         IClass context,         boolean referencePhase)", "diff": ["-        SymTabAST leftChild = (SymTabAST) (expression.getFirstChild());", "-        // handle Checkstyle grammar", "-        while (leftChild.getType() == TokenTypes.LPAREN) {", "-            leftChild = (SymTabAST) leftChild.getNextSibling();", "-        }", "+        SymTabAST leftChild = findLeftChild(expression);", "-        SymTabAST rightChild = (SymTabAST) (leftChild.getNextSibling());", "-        // handle Checkstyle grammar", "-        while (rightChild.getType() == TokenTypes.RPAREN) {", "-            rightChild = (SymTabAST) rightChild.getNextSibling();", "-        }", "+        SymTabAST rightChild = findRightSibling(leftChild);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf4ae5a577e66a7b30f733212f1eb5d7", "repository": "https://github.com/checkstyle/checkstyle.git", "fileName": "src/checkstyle/com/puppycrawl/tools/checkstyle/checks/OtherLeftCurlyCheck.java", "commitBeforeChange": "b657e696ffd7333d43327160303f149174ccb49e", "commitAfterChange": "4a5ccfb6fe4d4d2cf9d74419b3292bbb46ad4149", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public void visitToken(DetailAST aAST)", "signatureAfterChange": "     public void visitToken(DetailAST aAST)", "diff": ["-                brace = aAST.getLastChild();", "-                break;", "-                brace = (DetailAST) aAST.getFirstChild();", "+            case TokenTypes.LITERAL_IF:", "+                brace = aAST.findFirstToken(TokenTypes.SLIST);", "+                ", "-                if (candidate.getType() == TokenTypes.SLIST) {", "-                    brace = candidate;", "-                }", "-                else {", "-                    // silently ignore", "-                    brace = null;", "-                }", "+                brace =", "+                    (candidate.getType() == TokenTypes.SLIST)", "+                        ? candidate", "+                        : null; // silently ignore", "-            case TokenTypes.LITERAL_SWITCH:", "-            case TokenTypes.LITERAL_IF:", "-                brace = (DetailAST) aAST.getFirstChild().getNextSibling()", "-                    .getNextSibling().getNextSibling();", "+                ", "+            case TokenTypes.LITERAL_SWITCH :", "+                brace = aAST.findFirstToken(TokenTypes.LCURLY);", "+"]}]}
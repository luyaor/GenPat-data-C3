{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \t@Test\r \tpublic void errorWithException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestEnsure.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "+\t@Test(expected=BadNumberException.class)\r", "-\t\tfinal BadNumberException exception = new BadNumberException();\r", "-\t\tcontext.checking(new EnsureExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,true,firstCell);\r", "-\t\t\t   will(throwException(exception));\r", "-\t\t\tone(initialRow).error(testResults,exception);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.ensure(initialRow);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t\t\tone(action).run(); will(throwException(new BadNumberException()));\r", "+\t\tassertThat(globalActionScope.ensure(action),is(false));\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test(expected=BadNumberException.class)\r \tpublic void errorWithException() throws Exception", "id": "381b4a707b98764995875007c9921377", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \t@Test\r \tpublic void errorWithEmbeddedException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestEnsure.java", "methodNumberAfterChange": 5, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t@Test\r", "-\tpublic void errorWithEmbeddedException() throws Exception {\r", "-\t\tfinal BadNumberException embeddedException = new BadNumberException();\r", "-\t\tcontext.checking(new EnsureExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,true,firstCell);\r", "-\t\t\t   will(throwException(new InvocationTargetException(embeddedException)));\r", "-\t\t\tone(initialRow).error(testResults,embeddedException);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.ensure(initialRow);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t@Test(expected=InvocationTargetException.class)\r", "+\tpublic void errorWithEmbeddedException() throws Exception {\r", "+\t\t\tone(action).run(); will(throwException(new InvocationTargetException(new BadNumberException())));\r", "+\t\tassertThat(globalActionScope.ensure(action),is(false));\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test(expected=InvocationTargetException.class)\r \tpublic void errorWithEmbeddedException() throws Exception", "id": "598ae0ecaf1eca771fde0d724e597978", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "49eb168d2eaa4e97c541030a4f0c9960", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \tpublic void parseDefinitions(Tables tables, DefineActionBodyConsumer consumer)", "fileName": "src/fitlibrary/definedAction/DefinedActionBodyCollector.java", "methodNumberAfterChange": 0, "commitBeforeChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "diff": ["-\t// Warning: 'orrible code due to Parse!\r", "+\t\tif (tables instanceof TablesOnParse)\r", "+\t\t\tparseDefinitionsWithParse(tables, consumer);\r", "+\t\telse\r", "+\t\t\tparseDefinitionsWithList(tables, consumer);\r", "+\t}\r"], "commitAfterChange": "1f73cbb5de4c1093ac1830526b85ef0e41bcdeb6", "signatureAfterChange": "\r \tpublic void parseDefinitions(Tables tables, DefineActionBodyConsumer consumer)", "id": "51820a2e53e86012d9ad062258b85af9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findMethodInEverySecondCell(Evaluator evaluator, Row row, int allArgs) throws Exception", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\tpublic CalledMethodTarget findMethodInEverySecondCell(Evaluator evaluator, Row row, int allArgs) throws Exception {\r", "-\t\tint parms = allArgs / 2 + 1;\r", "-\t\tint argCount = (allArgs + 1) / 2;\r", "-\t\tString name = row.text(0,evaluator);\r", "-\t\tfor (int i = 1; i < parms; i++)\r", "-\t\t\tname += \" \"+row.text(i*2,evaluator);\r", "-\t\tCalledMethodTarget target = findTheMethodMapped(name,argCount,evaluator);\r", "-\t\ttarget.setEverySecond(true);\r", "+\t@Override\r", "+\tpublic ICalledMethodTarget findMethodByArity(Row row, int from, int upTo,\r", "+\t\t\tboolean doStyle, Evaluator evaluator) throws Exception {\r", "+\t\tActionSignature actionSignature = ActionSignature.create(row, from, upTo, doStyle, evaluator);\r", "+\t\tICalledMethodTarget target = findTheMethodMapped(actionSignature.name,actionSignature.arity,evaluator);\r", "+\t\ttarget.setEverySecond(doStyle);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Override\r \tpublic ICalledMethodTarget findMethodByArity(Row row, int from, int upTo,\r \t\t\tboolean doStyle, Evaluator evaluator) throws Exception", "id": "8721049a59ddd7475318e49e0983c482", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "c0a25add9cfc2dd89eb1ea00cdc50e4e", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
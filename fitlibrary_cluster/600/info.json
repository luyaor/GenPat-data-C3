{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tprivate void processMultiDefinedAction(Table headerTable, Tables bodyCopy)", "fileName": "src/fitlibrary/DefineAction.java", "methodNumberAfterChange": 7, "commitBeforeChange": "b30e56d0effcc85cd5ffa49ca148e7059d6f5934", "diff": ["+\t}\r", "+    private void processMultiDefinedAction(Table headerTable, Tables bodyCopy) {\r", "+\t\tif (headerTable.size() > 2)\r", "+\t\t\terror(\"Unexpected rows in first table of defined action\",headerTable.at(0));\r", "+\t\tString definedActionName = headerTable.at(0).at(0).text();\r", "+\t\tList<String> formalParameters = getFormalParameters(headerTable.at(1),0,1);\r", "+\t\tMultiParameterBinder binder = new MultiParameterBinder(formalParameters,bodyCopy,pageName);\r", "+\t\trepository().defineMultiDefinedAction(definedActionName, binder);\r", "+\t}\r", "-\t}\r", "-\tprivate void processMultiDefinedAction(Table headerTable, Tables bodyCopy) {\r", "-\t\tString definedActionName = headerTable.at(0).at(0).text();\r", "-\t\tArrayList<String> formalParameters = new ArrayList<String>();\r", "-\t\tRow parametersRow = headerTable.at(1);\r", "-\t\tfor (int c = 0; c < parametersRow.size(); c++) {\r", "-\t\t\tString parameter = parametersRow.at(c).text();\r", "-\t\t\tif (\"\".equals(parameter))\r", "-\t\t\t\terror(\"Parameter name is blank\",parametersRow);\r", "-\t\t\tif (formalParameters.contains(parameter))\r", "-\t\t\t\terror(\"Parameter name '<b>\"+parameter+\"</b>' is duplicated\",parametersRow);\r", "-\t\t\tformalParameters.add(parameter);\r", "-\t\t}\r", "-\t\tTemporaryPlugBoardForRuntime.definedActionsRepository().defineMultiDefinedAction(definedActionName, formalParameters, bodyCopy, \"\");\r", "-\t}\r"], "commitAfterChange": "cd20838066679088607bacd4884b58979b698e68", "signatureAfterChange": "\r     private void processMultiDefinedAction(Table headerTable, Tables bodyCopy)", "id": "0dde53d5db52199bd4bc5c142f693e13", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r     public Object interpretRow(Row row, TestResults testResults, Fixture fixtureByName)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 11, "commitBeforeChange": "1a9b02fce576bf8c0ae1342055a0c5082b525445", "diff": ["-    \tsetExpectedResult(new Boolean(true));\r", "-    \t\tDoCaller[] actions = { \r", "-    \t\t\t\tnew DefinedActionCaller(row, this),\r", "-    \t\t\t\tnew MultiDefinedActionCaller(row, this),\r", "-    \t\t\t\tnew SpecialCaller(row,switchSetUp()),\r", "-    \t\t\t\tnew PostFixSpecialCaller(row,switchSetUp()),\r", "-    \t\t\t\tnew FixtureCaller(fixtureByName),\r", "-    \t\t\t\tnew ActionCaller(row,switchSetUp()) };\r", "-\t\t\tcheckForAmbiguity(actions);\r", "-\t\t\tfor (int i = 0; i < actions.length; i++)\r", "-\t\t\t\tif (actions[i].isValid()) {\r", "-\t\t\t\t\tObject result = actions[i].run(row, testResults);\r", "-\t\t\t\t\tif (testResults.isAbandoned() && !testResults.problems())\r", "-\t\t\t\t\t\trow.ignore(testResults);\r", "-\t\t\t\t\treturn result;\r", "-\t\t\t\t}\r", "-\t\t\tmethodsAreMissing(actions,row.text(0, this));\r", "+    \t\tDoCaller[] actions = createDoCallers(row, fixtureByName);\r", "+    \t\tOption<Object> result = interpretSimpleRow(row,testResults,actions,fixtureByName);\r", "+    \t\tif (result.isSome())\r", "+    \t\t\treturn result.get();\r", "+    \t\tmethodsAreMissing(actions,row.text(0, this),possibleSeq(row));\r"], "commitAfterChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "signatureAfterChange": "\r     public Object interpretRow(Row row, TestResults testResults, Fixture fixtureByName)", "id": "4791624c6f563a47024a36438eddba29", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \tpublic void parseDefinitions(Tables tables, DefineActionBodyConsumer consumer)", "fileName": "src/fitlibrary/definedAction/DefinedActionBodyCollector.java", "methodNumberAfterChange": 0, "commitBeforeChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "diff": ["-\t// Warning: 'orrible code due to Parse!\r", "+\t\tif (tables instanceof TablesOnParse)\r", "+\t\t\tparseDefinitionsWithParse(tables, consumer);\r", "+\t\telse\r", "+\t\t\tparseDefinitionsWithList(tables, consumer);\r", "+\t}\r"], "commitAfterChange": "1f73cbb5de4c1093ac1830526b85ef0e41bcdeb6", "signatureAfterChange": "\r \tpublic void parseDefinitions(Tables tables, DefineActionBodyConsumer consumer)", "id": "51820a2e53e86012d9ad062258b85af9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 40, "signatureBeforeChange": "\r \tpublic boolean harvestUsingPatternFrom(String[] vars, String pattern, String text)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 35, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["+\t}\r", "+\tprotected boolean harvestUsingPatternFrom(String[] vars, String pattern, String text) {\r", "+\t\treturn global().harvestUsingPatternFrom(vars, pattern, text);\r", "+\t}\r", "-\t}\r", "-\tpublic boolean harvestUsingPatternFrom(String[] vars, String pattern, String text) {\r", "-\t\tMatcher matcher = Pattern.compile(pattern).matcher(text);\r", "-\t    if (!matcher.find())\r", "-\t    \tthrow new FitLibraryException(\"Pattern doesn't match\");\r", "-\t    int groups = matcher.groupCount();\r", "-\t\tif (vars.length > groups)\r", "-\t\t\tthrow new FitLibraryException(\"Expected \" + expectedGroups(vars) + \", but there \" + actualGroups(groups));\r", "-\t\tfor (int v = 0; v < vars.length && v < groups; v++)\r", "-\t\t\tsetDynamicVariable(vars[v], matcher.group(v+1));\r", "-\t\treturn true;\r", "-\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprotected boolean harvestUsingPatternFrom(String[] vars, String pattern, String text)", "id": "a3efde4766af441ba3ffaed418e9fbfc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 4, "commitBeforeChange": "45cd4c7886612af0bbcf0d9d5705be6bd83dc738", "diff": ["-\t\t\t\t\t\t\tTable restOfTable = rowNo == 0 ? table : table.fromAt(rowNo);\r", "-\t\t\t\t\t\t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, restOfTable,testResults);\r", "-\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "-\t\t\t\t\t\t\t\t\tfor (int i = 0; i < restOfTable.size(); i++)\r", "-\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, restOfTable.at(i));\r", "+\t\t\t\t\t\t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t\t\t\t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, restOfTable, testResults);\r", "-\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "-\t\t\t\t\t\t\t\t\tfor (int i = 0; i < restOfTable.size(); i++)\r", "-\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, restOfTable.at(i));\r", "+\t\t\t\t\t\t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t\t\t\t\t\tTable remainingTable = restOfTable.asTableOnParse();\r", "+\t\t\t\t\t\t\t\tTable remainingTable = tableFromHere(table, rowNo).asTableOnParse();\r", "-\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "-\t\t\t\t\t\t\t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r"], "commitAfterChange": "ab6a629e809e58ed4ed57aa45aeb30760bda0f95", "signatureAfterChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "id": "bdd5299be5804ed97f4170fea25b9cfc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "35fa3979f6ccdbc44e397f78cb6bcbeb", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
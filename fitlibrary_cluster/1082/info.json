{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic SpecialCaller(Row row, DoTraverseInterpreter switchSetUp)", "fileName": "src/fitlibrary/traverse/workflow/caller/SpecialCaller.java", "methodNumberAfterChange": 0, "commitBeforeChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "diff": ["-\tpublic SpecialCaller(Row row, DoTraverseInterpreter switchSetUp) {\r", "-\t\tmethodName = row.text(0,switchSetUp);\r", "-\t\tspecialMethod = PlugBoard.lookupTarget.findSpecialMethod(switchSetUp, methodName);\r", "-\t\tif (specialMethod != null && LazySpecial.class.isAssignableFrom(specialMethod.getReturnType())) {\r", "+\tpublic SpecialCaller(IRow row, Evaluator evaluator, LookupMethodTarget lookupTarget) {\r", "+\t\tmethodName = row.text(0,evaluator);\r", "+\t\tspecialMethod = lookupTarget.findSpecialMethod(evaluator, methodName);\r", "+\t\tif (specialMethod != null && Option.class.isAssignableFrom(specialMethod.getReturnType())) {\r", "-\t\t\t\tOption<LazySpecial> lazyOption = (Option<LazySpecial>) run(row,new TestResults());\r", "+\t\t\t\tOption<LazySpecial> lazyOption = (Option<LazySpecial>) invokeSpecialMethod(row,new TestResults());\r", "+\t\t\t} catch (InvocationTargetException e) {\r", "+\t\t\t\tspecialMethod = null;\r", "+\t\t\t\tif (e.getCause() instanceof Exception)\r", "+\t\t\t\t\tsetProblem((Exception)e.getCause());\r", "+\t\t\t} catch (MissingMethodException e) {\r", "+\t\t\t\tspecialMethod = null;\r", "+\t\t\t\tsetProblem(e);\r", "+\t\t\t\te.printStackTrace();\r"], "commitAfterChange": "12148fc44971a9675907d16fb4f5c02ec935596d", "signatureAfterChange": "\r \r \tpublic SpecialCaller(IRow row, Evaluator evaluator, LookupMethodTarget lookupTarget)", "id": "6b22cedd015e92bc7d99dd0a61947d79", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \tprivate boolean fixtureThatIsRelevantSubclassOfDoFixture(Object result)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 8, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["+\t}\r", "+\tprivate void handleOtherEvaluator(TypedObject typedResult, Evaluator evaluator, Row row, TestResults testResults) {\r", "+\t\tsetRuntimeContextOf(evaluator);\r", "+\t\tcallSetUpSutChain(evaluator,row,testResults);\r", "+\t\tif (!(evaluator instanceof DefineAction)) // Don't want this as the storytest's main fixture/object\r", "+\t\t\tpushOnScope(typedResult,row,testResults);\r", "+\t\tevaluator.interpretAfterFirstRow(new TableOnParse(row), testResults); // It could be any row\r", "+\t\tsetUpTearDown.callTearDownSutChain(evaluator, row, testResults);\r", "+\t}\r", "-\tprivate boolean fixtureThatIsRelevantSubclassOfDoFixture(Object result) {\r", "-\t\treturn result instanceof SetUpFixture;\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate void handleOtherEvaluator(TypedObject typedResult, Evaluator evaluator, Row row, TestResults testResults)", "id": "74c76008c91b9f609fa46e5a73b7a67d", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "bcab50b25e4cc6a38dcc2d91a3308bb6", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
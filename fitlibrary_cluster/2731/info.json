{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 36, "signatureBeforeChange": "\r \t@Override\r \tpublic PositionedTarget findActionSpecialMethod(String[] cells, PositionedTargetFactory factory)", "fileName": "src/fitlibraryGeneric/typed/GenericTypedObject.java", "methodNumberAfterChange": 36, "commitBeforeChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "diff": ["-\tpublic PositionedTarget findActionSpecialMethod(String[] cells, PositionedTargetFactory factory) {\r", "-\t\tlogger.debug(\"Trying to find \"+ExtendedCamelCase.camel(cells[0]));\r", "+\tpublic List<PositionedTarget> findActionSpecialMethods(String[] cells, PositionedTargetFactory factory) {\r", "+//\t\tlogger.debug(\"Trying to find \"+ExtendedCamelCase.camel(cells[0]));\r", "+\t\tArrayList<PositionedTarget> list = new ArrayList<PositionedTarget>();\r", "-\t\t\t\tif (paramCount == 1 && parameterTypes[0] == DoAction.class) { // Nullary\r", "-\t\t\t\t\tlogger.debug(\"Trying against \"+method);\r", "-\t\t\t\t\tif (ExtendedCamelCase.camel(cells[0]).equals(method.getName())) {\r", "-\t\t\t\t\t\tlogger.debug(\"Found \"+method);\r", "-\t\t\t\t\t\treturn factory.create(method,1,cellCount);\r", "-\t\t\t\t\t} else if (cells[cellCount-1].equals(method.getName())) {\r", "-\t\t\t\t\t\tlogger.debug(\"Found \"+method);\r", "-\t\t\t\t\t\treturn factory.create(method,0,cellCount-1);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else if (paramCount > 1 && parameterTypes[0] == DoAction.class) { // postfix\r", "-\t\t\t\t\tint start = cellCount-2*paramCount+2;\r", "-\t\t\t\t\tString postfixName = cells[start];\r", "-\t\t\t\t\tfor (int i = 1; i < paramCount-1; i++)\r", "-\t\t\t\t\t\tpostfixName += \" \"+cells[start+i*2];\r", "-\t\t\t\t\tpostfixName = ExtendedCamelCase.camel(postfixName);\r", "-\t\t\t\t\tif (postfixName.equals(method.getName())) {\r", "-\t\t\t\t\t\tlogger.debug(\"Found \"+method);\r", "-\t\t\t\t\t\treturn factory.create(method,0,start);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t//\t\t\t\t\tstart = cellCount-2*paramCount+2-1;\r", "-\t\t\t\t\t//\t\t\t\t\tpostfixName = cells[start];\r", "-\t\t\t\t\t//\t\t\t\t\tfor (int i = 1; i < paramCount-1; i++)\r", "-\t\t\t\t\t//\t\t\t\t\t\tpostfixName += \" \"+cells[start+i*2];\r", "-\t\t\t\t\t//\t\t\t\t\tpostfixName = ExtendedCamelCase.camel(postfixName);\r", "-\t\t\t\t\t//\t\t\t\t\tif (postfixName.equals(method.getName()))\r", "-\t\t\t\t\t//\t\t\t\t\t\treturn factory.create(method,0,start);\r", "-\t\t\t\t} else if (paramCount > 1 && parameterTypes[paramCount-1] == DoAction.class) { // prefix\r", "-\t\t\t\t\tString prefixName = cells[0];\r", "-\t\t\t\t\tfor (int i = 1; i < paramCount-1; i++)\r", "-\t\t\t\t\t\tprefixName += \" \"+cells[i*2];\r", "-\t\t\t\t\tprefixName = ExtendedCamelCase.camel(prefixName);\r", "-\t\t\t\t\tif (prefixName.equals(method.getName())) {\r", "-\t\t\t\t\t\tlogger.debug(\"Found \"+method);\r", "-\t\t\t\t\t\treturn factory.create(method,paramCount*2-2,cellCount);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t//\t\t\t\t\tprefixName += \" \"+cells[paramCount*2-2];\r", "-\t\t\t\t\t//\t\t\t\t\tprefixName = ExtendedCamelCase.camel(prefixName);\r", "-\t\t\t\t\t//\t\t\t\t\tif (prefixName.equals(method.getName()))\r", "-\t\t\t\t\t//\t\t\t\t\t\treturn factory.create(method,paramCount*2-1,cellCount);\r", "+\t\t\t\tif (isNullary(parameterTypes, paramCount)) {\r", "+\t\t\t\t\tnullary(cells, factory, list, method);\r", "+\t\t\t\t} else if (isPostfix(parameterTypes, paramCount)) {\r", "+\t\t\t\t\tpostFix(cells, factory, list, method, paramCount);\r", "+\t\t\t\t} else if (isPrefix(parameterTypes, paramCount)) {\r", "+\t\t\t\t\tprefix(cells, factory, list, method, paramCount);\r", "-\t\treturn new UnfoundPositionedTarget();\r", "+\t\treturn list;\r", "+\t}\r"], "commitAfterChange": "6e2fd68caab2f02de2d8c7d77899562c496a4b1d", "signatureAfterChange": "\r \t@Override\r \tpublic List<PositionedTarget> findActionSpecialMethods(String[] cells, PositionedTargetFactory factory)", "id": "0369fcd85e5df64c36f4a2b959468531", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective)", "fileName": "src/fitlibrary/flow/WhatIsInScope.java", "methodNumberAfterChange": 1, "commitBeforeChange": "96a06134efc1fc0c7cb135114029544fb0cf938e", "diff": ["-\t\ts.append(\"<tr><td><h4>Action</h4></td><td><h4>Return type</h4></td><td><h4>Following actions</h4></td></tr>\\n\");\r", "+\t\tboolean first = true;\r", "-\t\t\tClass<?> declaringClass = method.getDeclaringClass();\r", "-\t\t\tShowSelectedActions showAnnotation = declaringClass.getAnnotation(ShowSelectedActions.class);\r", "-\t\t\tboolean locallySelective = selective || showAnnotation != null;\r", "-\t\t\tboolean ignoreDoTraverse = declaringClass == DoTraverse.class && aClass != DoTraverse.class;\r", "-\t\t\tif (\t!ignoreDoTraverse &&\r", "-\t\t\t\t\tdeclaringClass != Object.class && \r", "-\t\t\t\t\tdeclaringClass != Fixture.class && \r", "-\t\t\t\t\t!method.getName().equals(\"getSystemUnderTest\")) {\r", "-\t\t\t\tClass<?> returnType = method.getReturnType();\r", "-\t\t\t\tString returns = returnType.getSimpleName();\r", "-\t\t\t\tif (returnType == Void.TYPE || returnType == TwoStageSpecial.class)\r", "-\t\t\t\t\treturns = \"\";\r", "-\t\t\t\tAnAction action = method.getAnnotation(AnAction.class);\r", "-\t\t\t\tif (action == null) {\r", "-\t\t\t\t\tString methodName = methodName(method);\r", "-\t\t\t\t\tString nameWithoutTags = methodName.replaceAll(\"<i>\",\"\").replaceAll(\"</i>\",\"\").replaceAll(\"<b>\",\"\").replaceAll(\"</b>\",\"\");\r", "-\t\t\t\t\tboolean matches = matchAll || nameWithoutTags.contains(pattern);\r", "-\t\t\t\t\tif (!locallySelective && matches) {\r", "-\t\t\t\t\t\ts.append(\"<tr><td>\" + methodName + \"</td><td>\"+returns+\"</td></tr>\\n\");\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} else if (action.actionType() != ActionType.IGNORE) {\r", "-\t\t\t\t\tString name = action.wiki();\r", "-\t\t\t\t\tif (name.isEmpty())\r", "-\t\t\t\t\t\tname = unCamel(method.getName(),action.actionType());\r", "-\t\t\t\t\tString tooltip = action.tooltip();\r", "-\t\t\t\t\tString nameWithoutTags = name.replaceAll(\"<i>\",\"\").replaceAll(\"</i>\",\"\").replaceAll(\"<b>\",\"\").replaceAll(\"</b>\",\"\");\r", "-\t\t\t\t\tboolean matches = matchAll || nameWithoutTags.contains(pattern) || tooltip.contains(pattern);\r", "-\t\t\t\t\tif (matches) {\r", "-\t\t\t\t\t\tif (action.actionType() == ActionType.PREFIX)\r", "-\t\t\t\t\t\t\tname += \"action...|\";\r", "-\t\t\t\t\t\ts.append(\"<tr><td><span class='note' title='\"+tooltip+\"'>\" + name + \"</span></td><td>\"+returns+\"</td>\");\r", "-\t\t\t\t\t\tif (action.actionType() == ActionType.COMPOUND && !ignoreType(returnType)) {\r", "-\t\t\t\t\t\t\taddActions(s,returnType,\"\",true);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\ts.append(\"</tr>\");\r", "-\t\t\t\t\t}\r", "+\t\t\tif (!ignoreMethod(aClass,method)) {\r", "+\t\t\t\tboolean locallySelective = selective || method.getDeclaringClass().getAnnotation(ShowSelectedActions.class) != null;\r", "+\t\t\t\tActionInfo actionInfo = decodeAnnotation(method,locallySelective);\r", "+\t\t\t\tif (!actionInfo.ignore && (matchAll || actionInfo.matches(pattern))) {\r", "+\t\t\t\t\tif (first)\r", "+\t\t\t\t\t\ts.append(\"<tr><td><h4>Action</h4></td>\"+\r", "+\t\t\t\t\t\t\t\t\"<td><h4><span title='The Java return type.'>Returns</span></h4></td>\"+\r", "+\t\t\t\t\t\t\t\t\"<td><h4><span title='Actions that can occur in the rest of the table.'>Following actions</span></h4></td></tr>\\n\");\r", "+\t\t\t\t\tfirst = false;\t\t\t\t\t\r", "+\t\t\t\t\tactionInfo.display(s,returnTypeDisplay(method));\r", "+\t\t\t\t\tClass<?> returnType = method.getReturnType();\r", "+\t\t\t\t\tif (actionInfo.compound && !ignoreType(returnType))\r", "+\t\t\t\t\t\taddActions(s,returnType,\"\",true);\r", "+\t}\r"], "commitAfterChange": "366522895bf94618d718f366242c01da0d3f2bb4", "signatureAfterChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective)", "id": "be7bacedd607eab06ee8c82de650292a", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "ea62b850349a671b795343d36756c2fe", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
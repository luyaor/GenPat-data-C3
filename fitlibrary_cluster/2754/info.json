{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 14, "signatureBeforeChange": "\r     public void invokeAndCheckForSpecial(IRow row, ICell expectedCell, TestResults testResults, IRow fullRow, ICell specialCell)", "fileName": "src/fitlibrary/closure/CalledMethodTarget.java", "methodNumberAfterChange": 14, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-    public void invokeAndCheckForSpecial(IRow row, ICell expectedCell, TestResults testResults, IRow fullRow, ICell specialCell) {\r", "+    public void invokeAndCheckForSpecial(Row row, Cell expectedCell, TestResults testResults, Row fullRow, Cell specialCell) {\r", "-\t\t\tif (RecordDynamicVariables.recording() && expectedCell.unresolved(evaluator)) {\r", "+\t\t\tDynamicVariablesRecording recorder = evaluator.getRuntimeContext().getDynamicVariableRecorder();\r", "+\t\t\tif (recorder.isRecording() && expectedCell.unresolved(evaluator)) {\r", "-            \t\tRecordDynamicVariables.record(key, resultString);\r", "+            \t\trecorder.record(key,resultString);\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r     public void invokeAndCheckForSpecial(Row row, Cell expectedCell, TestResults testResults, Row fullRow, Cell specialCell)", "id": "6088ca6b333d4c7d5350a4540456affe", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 15, "signatureBeforeChange": "\r     @Override\r \tpublic void invokeAndCheckForSpecial(Row row, Cell expectedCell, TestResults testResults, Row fullRow, Cell specialCell)", "fileName": "src/fitlibrary/closure/CalledMethodTarget.java", "methodNumberAfterChange": 15, "commitBeforeChange": "767f6cb947a46bb148e39b288dc9b54a99aee022", "diff": ["-\t\t\tDynamicVariablesRecording recorder = evaluator.getRuntimeContext().getDynamicVariableRecorder();\r", "-\t\t\tif (recorder.isRecording() && expectedCell.unresolved(evaluator)) {\r", "+\t\t\tDynamicVariablesRecording recorder = runtime.getDynamicVariableRecorder();\r", "+\t\t\tif (recorder.isRecording() && expectedCell.unresolved(runtime)) {\r", "-            \t\tevaluator.setDynamicVariable(key, resultString);\r", "+\t\t\t\t\truntime.setDynamicVariable(key, resultString);\r"], "commitAfterChange": "1d44b64cbd6fe822c03990c564745b178a53b359", "signatureAfterChange": "\r     @Override\r \tpublic void invokeAndCheckForSpecial(Row row, Cell expectedCell, TestResults testResults, Row fullRow, Cell specialCell)", "id": "e96e85a3b67b24955ff015f5fda1e004", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "4ec37307926ea0e70063265f0261585f", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "    protected void bin(Map<Object, Object> result, Object key, Object row)", "fileName": "src/fit/RowFixture.java", "methodNumberAfterChange": 8, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  protected void bin(Map<Object, Object> result, Object key, Object row) {", "-    if (key.getClass().isArray()) {", "-      key = Arrays.asList((Object[]) key);", "-    }", "-    if (result.containsKey(key)) {", "-      ListUtility.uncheckedCast(Object.class, result.get(key)).add(row);", "-    } else {", "-      List<Object> list = new LinkedList<Object>();", "-      list.add(row);", "-      result.put(key, list);", "-    }", "-  }", "+\tprotected void bin(Map<Object, Object> result, Object keyInitial, Object row) {", "+\t\tObject key = keyInitial;", "+\t\tif (key.getClass().isArray()) {", "+\t\t\tkey = Arrays.asList((Object[]) key);", "+\t\t}", "+\t\tif (result.containsKey(key)) {", "+\t\t\tListUtility.uncheckedCast(Object.class, result.get(key)).add(row);", "+\t\t} else {", "+\t\t\tList<Object> list = new LinkedList<Object>();", "+\t\t\tlist.add(row);", "+\t\t\tresult.put(key, list);", "+\t\t}", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tprotected void bin(Map<Object, Object> result, Object keyInitial, Object row)", "id": "68b85634fff67fd2d627b6ab51e1c622", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 32, "signatureBeforeChange": "     public Object parse(String s)", "fileName": "src/fit/TypeAdapter.java", "methodNumberAfterChange": 32, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  static class ClassBooleanAdapter extends TypeAdapter {", "-    public Object parse(String s) {", "-      if (\"null\".equals(s)) return null;", "-      String ls = s.toLowerCase();", "-      if (ls.equals(\"true\"))", "-        return new Boolean(true);", "-      if (ls.equals(\"yes\"))", "-        return new Boolean(true);", "-      if (ls.equals(\"1\"))", "-        return new Boolean(true);", "-      if (ls.equals(\"y\"))", "-        return new Boolean(true);", "-      if (ls.equals(\"+\"))", "-        return new Boolean(true);", "-      return new Boolean(false);", "-    }", "+\tstatic class ClassBooleanAdapter extends TypeAdapter {", "+\t\t@Override", "+\t\tpublic Object parse(String s) {", "+\t\t\tif (\"null\".equals(s))", "+\t\t\t\treturn null;", "+\t\t\tString ls = s.toLowerCase();", "+\t\t\tif (ls.equals(\"true\"))", "+\t\t\t\treturn new Boolean(true);", "+\t\t\tif (ls.equals(\"yes\"))", "+\t\t\t\treturn new Boolean(true);", "+\t\t\tif (ls.equals(\"1\"))", "+\t\t\t\treturn new Boolean(true);", "+\t\t\tif (ls.equals(\"y\"))", "+\t\t\t\treturn new Boolean(true);", "+\t\t\tif (ls.equals(\"+\"))", "+\t\t\t\treturn new Boolean(true);", "+\t\t\treturn new Boolean(false);", "+\t\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": " \t\t@Override \t\tpublic Object parse(String s)", "id": "f9f8c13c9ecdcc9b754ec9568eb44992", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "5d8b875cd667e825ef80dbdc02fbf3d3", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
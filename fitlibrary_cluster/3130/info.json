{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tpublic Object interpretWholeTable(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 4, "commitBeforeChange": "8655c08986fab4cb3523c8934e8765739689b282", "diff": ["-\t}\r", "-\tpublic Object interpretWholeTable(Table table, TestResults testResults) {\r", "-\t\tSystem.out.println(\"DTI.interpretWholeTable used in \"+this);\r", "-\t\ttry {\r", "-\t\t\tFixture fixtureByName = fixtureOrDoTraverseByName(table,testResults);\r", "-\t\t\tif (fixtureByName != null && fixtureByName.getClass() == Fixture.class)\r", "-\t\t\t\tfixtureByName = null;\r", "-\t\t\tTypedObject typedResult = interpretRow(table.at(0),testResults,fixtureByName);\r", "-\t\t\tObject result = null;\r", "-\t\t\tif (typedResult != null)\r", "-\t\t\t\tresult = typedResult.getSubject();\r", "-\t\t\tif (getRuntimeContext().isAbandoned(testResults)) {\r", "-\t\t\t\tinterpretInFlow(table,testResults);\r", "-\t\t\t\treturn null;\r", "-\t\t\t}\r", "-\t\t\tif (result instanceof Evaluator) {\r", "-\t\t\t\tEvaluator evaluator = (Evaluator)result;\r", "-\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\tinterpretEvaluator(evaluator, table, testResults);\r", "-\t\t\t\treturn result;\r", "-\t\t\t}\r", "-\t\t\tif (result instanceof Fixture)\r", "-\t\t\t\tgetFitHandler().doTable((Fixture) result,table,testResults,this);\r", "-\t\t\telse // do the rest of the table with this traverse\r", "-\t\t\t\treturn interpretInFlow(table,testResults);\r", "-\t\t} catch (Throwable e) {\r", "-            table.error(testResults,e);\r", "-\t\t}\r", "-\t}\r", "+    \treturn null; // Leave it here, as override it.\r"], "commitAfterChange": "45cd4c7886612af0bbcf0d9d5705be6bd83dc738", "signatureAfterChange": "\r     public Object interpretInFlow(Table table, TestResults testResults)", "id": "7d3d19e598f139de3376e571ee0b327f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 3, "commitBeforeChange": "8655c08986fab4cb3523c8934e8765739689b282", "diff": ["-\t\tTypedObject result = null;\r", "-\t\tfor (int rowNo = 1; rowNo < table.size(); rowNo++) {\r", "-\t\t\tRow row = table.at(rowNo);\r", "-\t\t\tif (getRuntimeContext().isAbandoned(testResults))\r", "-\t\t\t\trow.ignore(testResults);\r", "-\t\t\telse\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tresult = interpretRow(row,testResults,null);\r", "-\t\t\t\t\tif (result != null) {\r", "-\t\t\t\t\t\tObject subject = result.getSubject();\r", "-\t\t\t\t\t\tif (subject instanceof DoEvaluator) {\r", "-\t\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)subject;\r", "-\t\t\t\t\t\t\tdoEvaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\t\tdoEvaluator.interpretInFlow(TableFactory.table(row),testResults);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t} else if (subject instanceof Evaluator) {\r", "-\t\t\t\t\t\t\tEvaluator evaluator = (Evaluator)subject;\r", "-\t\t\t\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\t\tinterpretEvaluator(evaluator,TableFactory.table(row),testResults);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t} else if (subject instanceof Fixture) {\r", "-\t\t\t\t\t\t\tgetFitHandler().doTable((Fixture) subject, TableFactory.table(row),testResults,this);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t} catch (Exception ex) {\r", "-\t\t\t\t\trow.error(testResults,ex);\r", "-\t\t\t\t}\r", "-\t\t}\r", "-\t\tif (result == null)\r", "-\t\t\treturn null;\r", "-\t\treturn result.getSubject();\r", "-\t}\r", "+\t\t// Now handled by DoFlow\r"], "commitAfterChange": "45cd4c7886612af0bbcf0d9d5705be6bd83dc738", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "b4caa4d9f19dfc5106dda4a0c5f4cd8f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 3, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["-\t\t\t\t\t\tDoEvaluator resultingEvaluator = (DoEvaluator)result;\r", "-\t\t\t\t\t\tresultingEvaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\tresultingEvaluator.setUp(table, testResults);\r", "-\t\t\t\t\t\tresultingEvaluator.interpretInFlow(new Table(row),testResults);\r", "-\t\t\t\t\t\tresultingEvaluator.tearDown(table, testResults);\r", "+\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)result;\r", "+\t\t\t\t\t\tdoEvaluator.setRuntimeContext(runtimeContext);\r", "+\t\t\t\t\t\tdoEvaluator.interpretInFlow(new Table(row),testResults);\r", "-\t\t\t\t\t\tinterpretEvaluator((Evaluator)result,new Table(row),testResults);\r", "+\t\t\t\t\t\tEvaluator evaluator = (Evaluator)result;\r", "+\t\t\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "+\t\t\t\t\t\tinterpretEvaluator(evaluator,new Table(row),testResults);\r", "-\t\t\t\t\t} else if (getAlienTraverseHandler().isAlienTraverse(result)) {\r", "-\t\t\t\t\t\tgetAlienTraverseHandler().doTable(result, new Table(row),testResults,this);\r", "+\t\t\t\t\t} else if (result instanceof Fixture) {\r", "+\t\t\t\t\t\tgetFitHandler().doTable(result, new Table(row),testResults,this);\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "cd8a7b7e282af1b148dc7db7065ac623", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 3, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\t\tif (testResults.isAbandoned())\r", "+\t\t\tif (getRuntimeContext().isAbandoned(testResults))\r", "-\t\t\t\t\tif (result instanceof DoEvaluator) {\r", "-\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)result;\r", "-\t\t\t\t\t\tdoEvaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\tdoEvaluator.interpretInFlow(new Table(row),testResults);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t} else if (result instanceof Evaluator) {\r", "-\t\t\t\t\t\tEvaluator evaluator = (Evaluator)result;\r", "-\t\t\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\tinterpretEvaluator(evaluator,new Table(row),testResults);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t} else if (result instanceof Fixture) {\r", "-\t\t\t\t\t\tgetFitHandler().doTable(result, new Table(row),testResults,this);\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tif (result != null) {\r", "+\t\t\t\t\t\tObject subject = result.getSubject();\r", "+\t\t\t\t\t\tif (subject instanceof DoEvaluator) {\r", "+\t\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)subject;\r", "+\t\t\t\t\t\t\tdoEvaluator.setRuntimeContext(runtimeContext);\r", "+\t\t\t\t\t\t\tdoEvaluator.interpretInFlow(new TableOnParse(row),testResults);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t} else if (subject instanceof Evaluator) {\r", "+\t\t\t\t\t\t\tEvaluator evaluator = (Evaluator)subject;\r", "+\t\t\t\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "+\t\t\t\t\t\t\tinterpretEvaluator(evaluator,new TableOnParse(row),testResults);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t} else if (subject instanceof Fixture) {\r", "+\t\t\t\t\t\t\tgetFitHandler().doTable(subject, new TableOnParse(row),testResults,this);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "e5019f7f56a3384859b3d08aee5be804", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "d0d1eaa559785388d73270f1ca05fbc9", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL"]}
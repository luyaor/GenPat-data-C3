{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \r \t\tpublic Row expect(Mockery context)", "fileName": "src/fitlibrary/matcher/TableBuilderForTests.java", "methodNumberAfterChange": 19, "commitBeforeChange": "681d5f08a03cb8efaa429831112a5d45fa950ef3", "diff": ["-\r", "-\t\tpublic Row expect(Mockery context) {\r", "-\t\t\t// TODO Auto-generated method stub\r", "-\t\t\treturn null;\r", "+\t\t}\r", "+\t\t@Override\r", "+\t\tpublic Cell expect(final Mockery context,final String path, final int index) {\r", "+\t\t\tfinal Cell cell = super.expect(context, path, index);\r", "+\t\t\tfinal String name = optionalText.isSome() ? optionalText.get() : localPath(path, index);\r", "+\t\t\tcontext.checking(new Expectations() {{\r", "+\t\t\t\tallowing(cell).text(); \r", "+\t\t\t\twill(returnValue(name));\r", "+\t\t\t\tallowing(cell).text(with(any(VariableResolver.class))); will(returnValue(name));\r", "+\t\t\t\tallowing(cell).hasEmbeddedTables(); will(returnValue(!cell.isEmpty()));\r", "+\t\t\t\tallowing(cell).getEmbeddedTables(); will(returnValue(cell));\r", "+\t\t\t}});\r", "+\t\t\treturn cell;\r", "+\t\t}\r"], "commitAfterChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "signatureAfterChange": "\r \t\t@Override\r \t\tpublic Cell expect(final Mockery context,final String path, final int index)", "id": "5d99d426e20441f9fcb81c05fa7871ef", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \t@Test\r \tpublic void nullaryInnerRunsReturningNothing() throws Exception", "fileName": "test/fitlibrary/special/TestPositionedTargetWasFound.java", "methodNumberAfterChange": 5, "commitBeforeChange": "5327f82710d64a8962e506a103d189fd75c5dbba", "diff": ["+\t\t\tallowing(evaluator).getRuntimeContext();\r", "+\t\t\twill(returnValue(runtime));\r", "+\t\t\tallowing(runtime).extendedCamel(\"find void\");\r", "+\t\t\twill(returnValue(\"findVoid\"));\r", "+\t\t\tallowing(runtime).extendedCamel(\"show void\");\r", "+\t\t\twill(returnValue(\"showVoid\"));\r", "+\t\t\tallowing(runtime).extendedCamel(\"findVoid\");\r", "+\t\t\twill(returnValue(\"findString\"));\r", "+\t\t\tallowing(runtime).extendedCamel(\"show String\");\r", "+\t\t\twill(returnValue(\"showString\"));\r", "+\t\t\tallowing(runtime).extendedCamel(\"find DoAction\");\r", "+\t\t\twill(returnValue(\"findDoAction\"));\r", "+\t\t\tallowing(runtime).extendedCamel(\"show DoAction\");\r", "+\t\t\twill(returnValue(\"showDoAction\"));\r", "+\t\t\tallowing(runtime).extendedCamel(\"find boolean\");\r", "+\t\t\twill(returnValue(\"findBoolean\"));\r", "+\t\t\tallowing(runtime).extendedCamel(\"show boolean\");\r", "+\t\t\twill(returnValue(\"showBoolean\"));\r", "+\t\t\tallowing(runtime).extendedCamel(\" n\");\r", "+\t\t\twill(returnValue(\"n\"));\r"], "commitAfterChange": "fc04ff1c33cda53766142c18fa0ccb6a92e65b68", "signatureAfterChange": "\r \t@Test\r \tpublic void nullaryInnerRunsReturningNothing() throws Exception", "id": "80e0e973e3e9d2ca03b23d91d84b0df0", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "2c552a68cefd8902cce8804d9ceb4369", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsNothingWithIgnoredException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 5, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "-\tpublic void reportsNothingWithIgnoredException() throws Exception {\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);\r", "-\t\t\t   will(throwException(new IgnoredException()));\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.PASSES_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t}\r", "+\t@Test\r", "+\tpublic void trueWithIgnoredException() throws Exception {\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).runWithNoColouring(); will(throwException(new IgnoredException()));\r", "+\t\t}});\r", "+\t\tassertThat(globalActionScope.not(action),is(true));\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test\r \tpublic void trueWithIgnoredException() throws Exception", "id": "16f88f212daf057bd8ed078bedb48e80", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \t@Test\r \tpublic void ignoredWithIgnoredException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestEnsure.java", "methodNumberAfterChange": 3, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t@Test\r", "+\t@Test(expected=IgnoredException.class)\r", "-\t\tcontext.checking(new EnsureExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,true,firstCell);\r", "-\t\t\t   will(throwException(new IgnoredException()));\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).run(); will(throwException(new IgnoredException()));\r", "-\t\tTwoStageSpecial lazySpecial = special.ensure(initialRow);\r", "-\t\tlazySpecial.run(testResults);\r", "+\t\tassertThat(globalActionScope.ensure(action),is(false));\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test(expected=IgnoredException.class)\r \tpublic void ignoredWithIgnoredException() throws Exception", "id": "aca55ec9ab2b5e2784dbe1670e356178", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "6b499a056ac2df6a6bcbde30a10ac310", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tpublic Object interpretWholeTable(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 5, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["-\t\t\t\tinterpretEvaluator((Evaluator)result, table, testResults);\r", "+\t\t\t\tEvaluator evaluator = (Evaluator)result;\r", "+\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "+\t\t\t\tinterpretEvaluator(evaluator, table, testResults);\r", "-\t\t\t} else if (getAlienTraverseHandler().isAlienTraverse(result)) {\r", "-\t\t\t\tgetAlienTraverseHandler().doTable(result,table,testResults,this);\r", "-\t\t\t} else // do the rest of the table with this traverse\r", "+\t\t\t}\r", "+\t\t\tif (result instanceof Fixture)\r", "+\t\t\t\tgetFitHandler().doTable(result,table,testResults,this);\r", "+\t\t\telse // do the rest of the table with this traverse\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r \tpublic Object interpretWholeTable(Table table, TestResults testResults)", "id": "04b6d5f902157a095a4c4118e100e334", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tprivate void runTable(Table table, TestResults testResults, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlowOnTable.java", "methodNumberAfterChange": 2, "commitBeforeChange": "3e49a68db9f888715cfae72403c05f9f5d45b868", "diff": ["+\t\t\t    \t\tlong startTime = System.currentTimeMillis();\r", "+\t\t\t    \t\taddTimeText(row,startTime);\r", "-\t\t\t    \t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "+\t\t\t    \t\t\trunEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t    \t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "+\t\t\t    \t\t\trunEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "+\t\t\t    \t\t\tstartTime = System.currentTimeMillis();\r", "+\t\t\t    \t\t\taddTimeText(row,startTime);\r"], "commitAfterChange": "e141a91176343498f8b104bfcec7615e7ba3e1f0", "signatureAfterChange": "\r \tprivate void runTable(Table table, TestResults testResults, ITableListener tableListener)", "id": "1ea2cbb8690a41ce72045c02420febe0", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 3, "commitBeforeChange": "a31639422a830880e68972b09ea7debebd2f084e", "diff": ["-\t\t\t\t\t\t\tdoEvaluator.interpretInFlow(new TableOnParse(row),testResults);\r", "+\t\t\t\t\t\t\tdoEvaluator.interpretInFlow(TableFactory.table(row),testResults);\r", "-\t\t\t\t\t\t\tinterpretEvaluator(evaluator,new TableOnParse(row),testResults);\r", "+\t\t\t\t\t\t\tinterpretEvaluator(evaluator,TableFactory.table(row),testResults);\r", "-\t\t\t\t\t\t\tgetFitHandler().doTable(subject, new TableOnParse(row),testResults,this);\r", "+\t\t\t\t\t\t\tgetFitHandler().doTable(subject, TableFactory.table(row),testResults,this);\r"], "commitAfterChange": "2c6fd716f0ddbc6f8d43a941ccbb30e98b026f07", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "f5106a9cccf46b0466f96977b82257f6", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "12dc5098e0071162f89e20bc593f60f9", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
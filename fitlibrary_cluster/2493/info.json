{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r   protected String addTo(String originalValue, Object value, int numberofTime)", "fileName": "src/fit/decorator/util/PointDataType.java", "methodNumberAfterChange": 0, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  protected String addTo(String originalValue, Object value, int numberofTime) {\r", "-    Point originalPoint = ClassDelegatePointParser.parse(originalValue);\r", "-    Point pointToBeAdded = (Point) (value);\r", "-    for (int i = 0; i < numberofTime; ++i) {\r", "-      originalPoint.translate(pointToBeAdded.x, pointToBeAdded.y);\r", "-    }\r", "-    return \"(\" + originalPoint.x + \",\" + originalPoint.y + \")\";\r", "-  }\r", "+\t@Override\r", "+\tprotected String addTo(String originalValue, Object value, int numberofTime) {\r", "+\t\tPoint originalPoint = ClassDelegatePointParser.parse(originalValue);\r", "+\t\tPoint pointToBeAdded = (Point) (value);\r", "+\t\tfor (int i = 0; i < numberofTime; ++i) {\r", "+\t\t\toriginalPoint.translate(pointToBeAdded.x, pointToBeAdded.y);\r", "+\t\t}\r", "+\t\treturn \"(\" + originalPoint.x + \",\" + originalPoint.y + \")\";\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \t@Override\r \tprotected String addTo(String originalValue, Object value, int numberofTime)", "id": "57d204844916caa8ad32b5db0bc2009b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \r   void setAlternativeArgs(Parse table)", "fileName": "src/fit/decorator/FixtureDecorator.java", "methodNumberAfterChange": 7, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  void setAlternativeArgs(Parse table) {\r", "-    List<String> argumentList = new ArrayList<String>();\r", "-    Parse columns = table.parts.parts;\r", "-    int size = columns.size();\r", "-    for (int i = 0; i < size / 2; ++i) {\r", "-      String columnValue = columns.at(i * 2 + 1).text();\r", "-      columnValue = escapeExpectedAndActualString(columnValue);\r", "-      argumentList.add(columnValue);\r", "-    }\r", "-    args = (String[]) argumentList.toArray(new String[0]);\r", "-  }\r", "+\tvoid setAlternativeArgs(Parse table) {\r", "+\t\tList<String> argumentList = new ArrayList<String>();\r", "+\t\tParse columns = table.parts.parts;\r", "+\t\tint size = columns.size();\r", "+\t\tfor (int i = 0; i < size / 2; ++i) {\r", "+\t\t\tString columnValue = columns.at(i * 2 + 1).text();\r", "+\t\t\tcolumnValue = escapeExpectedAndActualString(columnValue);\r", "+\t\t\targumentList.add(columnValue);\r", "+\t\t}\r", "+\t\targs = argumentList.toArray(new String[0]);\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tvoid setAlternativeArgs(Parse table)", "id": "ebad194bed1064782b8110f338e5e34c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "03db96ca9c42f7473ed129d813515795", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
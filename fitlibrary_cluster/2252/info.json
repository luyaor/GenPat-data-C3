{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t\tpublic From expect(final Mockery context,String path, int index)", "fileName": "src/fitlibrary/matcher/TableBuilderForTests.java", "methodNumberAfterChange": 7, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\t}\r", "-\t\tpublic From expect(final Mockery context,String path, int index) {\r", "-\t\t\tString localPath = localPath(path, index);\r", "-\t\t\tfinal From from = context.mock(type,localPath);\r", "-\t\t\tfinal List<To> listOfMockElements = new ArrayList<To>();\r", "-\t\t\tint count = 0;\r", "-\t\t\tfor (Builder builder : elements)\r", "-\t\t\t\tlistOfMockElements.add((To) builder.expect(context,localPath,(count++)));\r", "-\t\t\tcontext.checking(new Expectations() {{\r", "-\t\t\t\tallowing(from).isEmpty(); will(returnValue(listOfMockElements.isEmpty()));\r", "-\t\t\t\tallowing(from).size(); will(returnValue(listOfMockElements.size()));\r", "-\t\t\t\tallowing(from).iterator(); will(returnValue(listOfMockElements.iterator()));\r", "-\t\t\t\tallowing(from).getType(); will(returnValue(type.getSimpleName()));\r", "-\t\t\t\tfor (int i = 0; i < elements.size(); i++) {\r", "-\t\t\t\t\tfinal int ii = i;\r", "-\t\t\t\t\tallowing(from).elementAt(i); will(returnValue(listOfMockElements.get(ii)));\r", "-\t\t\t\t}\r", "-\t\t\t}});\r", "-\t\t\tif (listOfMockElements.isEmpty())\r", "-\t\t\t\tcontext.checking(new Expectations() {{\r", "-\t\t\t\t\tallowing(from).last(); will(throwException(new FitLibraryException(\"It's empty.\")));\r", "-\t\t\t\t}});\r", "-\t\t\telse \r", "-\t\t\t\tcontext.checking(new Expectations() {{\r", "-\t\t\t\t\tallowing(from).last(); will(returnValue(listOfMockElements.get(elements.size()-1)));\r", "-\t\t\t\t}});\r", "-\t\t\treturn from;\r", "-\t\t}\r", "+\t\t\tRowBuilder fresh = new RowBuilder();\r", "+\t\t\twith(fresh,els);\r", "+\t\t\treturn fresh;\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t\tpublic RowBuilder with(CellBuilder... els)", "id": "4c37c18713a46ab6d2554e29db884283", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t\tpublic Tables expect(final Mockery context)", "fileName": "src/fitlibrary/matcher/TableBuilderForTests.java", "methodNumberAfterChange": 3, "commitBeforeChange": "681d5f08a03cb8efaa429831112a5d45fa950ef3", "diff": ["+\t\t}\r", "+\t\tpublic From expect(final Mockery context,String path, int index) {\r", "+\t\t\tString localPath = localPath(path, index);\r", "+\t\t\tfinal From from = context.mock(type,localPath);\r", "+\t\t\tfinal List<To> listOfMockElements = new ArrayList<To>();\r", "+\t\t\tint count = 0;\r", "+\t\t\tfor (Builder builder : elements)\r", "+\t\t\t\tlistOfMockElements.add((To) builder.expect(context,localPath,(count++)));\r", "+\t\t\tcontext.checking(new Expectations() {{\r", "+\t\t\t\tallowing(from).isEmpty(); will(returnValue(listOfMockElements.isEmpty()));\r", "+\t\t\t\tallowing(from).size(); will(returnValue(listOfMockElements.size()));\r", "+\t\t\t\tallowing(from).iterator(); will(returnValue(listOfMockElements.iterator()));\r", "+\t\t\t\tallowing(from).getType(); will(returnValue(type.getSimpleName()));\r", "+\t\t\t\tfor (int i = 0; i < elements.size(); i++) {\r", "+\t\t\t\t\tfinal int ii = i;\r", "+\t\t\t\t\tallowing(from).elementAt(i); will(returnValue(listOfMockElements.get(ii)));\r", "+\t\t\t\t}\r", "+\t\t\t}});\r", "+\t\t\tif (listOfMockElements.isEmpty())\r", "+\t\t\t\tcontext.checking(new Expectations() {{\r", "+\t\t\t\t\tallowing(from).last(); will(throwException(new FitLibraryException(\"It's empty.\")));\r", "+\t\t\t\t}});\r", "+\t\t\telse \r", "+\t\t\t\tcontext.checking(new Expectations() {{\r", "+\t\t\t\t\tallowing(from).last(); will(returnValue(listOfMockElements.get(elements.size()-1)));\r", "+\t\t\t\t}});\r", "+\t\t\treturn from;\r", "+\t\t}\r", "-\t\tpublic Tables expect(final Mockery context) {\r", "-\t\t\tfinal List<Table> listOfTable = new ArrayList<Table>();\r", "-\t\t\tfor (TableBuilder builder : elements)\r", "-\t\t\t\tlistOfTable.add(builder.expect(context));\r", "-\t\t\tfinal Tables tables = context.mock(Tables.class);\r", "-\t\t\tcontext.checking(new Expectations() {{\r", "-\t\t\t\tallowing(tables).size(); will(returnValue(listOfTable.size()));\r", "-\t\t\t\tfor (int i = 0; i < elements.size(); i++) {\r", "-\t\t\t\t\tfinal int ii = i;\r", "-\t\t\t\t\tallowing(tables).elementAt(i); will(returnValue(listOfTable.get(ii)));\r", "-\t\t\t\t}\r", "-\t\t\t\tallowing(tables).last(); will(returnValue(listOfTable.get(elements.size()-1)));\r", "-\t\t\t\tallowing(tables).iterator(); will(returnValue(listOfTable.iterator()));\r", "-\t\t\t}});\r", "-\t\t\treturn tables;\r"], "commitAfterChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "signatureAfterChange": "\r \t\tpublic From expect(final Mockery context,String path, int index)", "id": "de5bd075f3cef6e51777acb844179e99", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "01e1a4956ed3183ce099fb6964d8e4c9", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
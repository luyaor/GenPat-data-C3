{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r \t@Override\r \tpublic void runStorytest(Tables tables, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/actor/DoFlowRunningActor.java", "methodNumberAfterChange": 1, "commitBeforeChange": "7f9594d4bf47c008bc43ec887c77a4b7e272ced0", "diff": ["-\t\tactor.start(tableListener);\r", "+\t\tactor.start(tableListener.getTestResults());\r", "-\t\t\r", "+\r", "+\t\ttry {\r", "+\t\t\twhile (true) {\r", "+\t\t\t\tReportAction action;\r", "+\t\t\t\taction = reportQueue.take();\r", "+\t\t\t\taction.run(tableListener);\r", "+\t\t\t\tif (action.isDone()) {\r", "+\t\t\t\t\tSystem.out.println(\"Finished actor version\");\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} catch (InterruptedException e) {\r", "+\t\t\tSystem.out.println(\"Finished actor version: \"+e);\r", "+\t\t}\r"], "commitAfterChange": "4b38d846a3046911780a85030235f2b46074f0f6", "signatureAfterChange": "\r \r \t@Override\r \tpublic void runStorytest(Tables tables, ITableListener tableListener)", "id": "c39c1dac7e986ed2a6eaf1ba81a6eebe", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r \tpublic static void configure(String diry)", "fileName": "src/fitlibrary/log/ConfigureLoggingThroughFiles.java", "methodNumberAfterChange": 1, "commitBeforeChange": "2f29c6a0cbf76230f858c949afe5c6528145bde6", "diff": ["-\t\tif (new File(diry + \"FitLibraryLogger.properties\").exists())\r", "-\t\t\tpropertyConfigurator.doConfigure(diry + \"FitLibraryLogger.properties\",\r", "-\t\t\t\t\tFitLibraryLogger.getOwnHierarchy());\r", "-\t\tif (new File(diry + \"FixturingLogger.properties\").exists())\r", "-\t\t\tpropertyConfigurator.doConfigure(diry + \"FixturingLogger.properties\",\r", "-\t\t\t\t\tFixturingLogger.getOwnHierarchy());\r", "-\t\tif (new File(diry + \"log4j.properties\").exists())\r", "-\t\t\tPropertyConfigurator.configure(diry + \"log4j.properties\");\r", "+\t\tif (new File(diry + \"FitLibraryLogger.properties\").exists()) {\r", "+\t\t\ttry {\r", "+\t\t\t\tpropertyConfigurator.doConfigure(diry + \"FitLibraryLogger.properties\",\r", "+\t\t\t\t\t\tFitLibraryLogger.getOwnHierarchy());\r", "+\t\t\t} catch (Exception e) {\r", "+\t\t\t\tSystem.err.println(\"Problem with FitLibraryLogger.properties \"+e.getMessage());\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (new File(diry + \"FixturingLogger.properties\").exists()) {\r", "+\t\t\ttry {\r", "+\t\t\t\tpropertyConfigurator.doConfigure(diry + \"FixturingLogger.properties\",\r", "+\t\t\t\t\t\tFixturingLogger.getOwnHierarchy());\r", "+\t\t\t} catch (Exception e) {\r", "+\t\t\t\tSystem.err.println(\"Problem with FixturingLogger.properties \"+e.getMessage());\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (new File(diry + \"log4j.properties\").exists()) {\r", "+\t\t\ttry {\r", "+\t\t\t\tPropertyConfigurator.configure(diry + \"log4j.properties\");\r", "+\t\t\t} catch (Exception e) {\r", "+\t\t\t\tSystem.err.println(\"Problem with log4j.properties \"+e.getMessage());\r", "+\t\t\t}\r", "+\t\t}\r"], "commitAfterChange": "0462c527be57b4394aa242a08d55821eb7605fb7", "signatureAfterChange": "\r \r \tpublic static void configure(String diry)", "id": "f9fd20c7e4d59f9fc3f4ad1ff97af20d", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "10d7c4e92ade218f4ea3a0ce8be4f52d", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
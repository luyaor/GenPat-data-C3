{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \t@Test\r \tpublic void rowOfOneHasSizeOf1()", "fileName": "test/fitlibrary/matcher/TestTableBuilderForTests.java", "methodNumberAfterChange": 8, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\tRowBuilder rowBuilder = row().\r", "-\t\t\twith(cell());\r", "-\t\tRow row = rowBuilder.expect(context);\r", "+\t\tRowBuilder rowBuilder = row().with(cell());\r", "+\t\tRow row = rowBuilder.mock(context);\r", "-\t\tassertThat(row.last(), sameInstance(row.elementAt(0)));\r", "+\t\tassertThat(row.last(), sameInstance(row.at(0)));\r", "-\t\tassertThat(iterator.next(), sameInstance(row.elementAt(0)));\r", "+\t\tassertThat(iterator.next(), sameInstance(row.at(0)));\r", "+\t\tassertThat(iterator.hasNext(), is(false));\r", "+\t\t\r", "+\t\tassertThat(row.size(), is(1));\r", "+\t\titerator = row.iterator();\r", "+\t\tassertThat(iterator.hasNext(), is(true));\r", "+\t\tassertThat(iterator.next(), sameInstance(row.at(0)));\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Test\r \tpublic void rowOfOneHasSizeOf1()", "id": "015a3478007f96438b5eb9218fe44597", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic PostFixSpecialCaller(Row row, DoTraverseInterpreter interpreter)", "fileName": "src/fitlibrary/traverse/workflow/caller/PostFixSpecialCaller.java", "methodNumberAfterChange": 0, "commitBeforeChange": "9069de478dc17e7793f2685307ecb6fa153f06e7", "diff": ["+\t\t// Warning: Hack to fix conflict between \"set\" and \"=\", by giving \"set\" precedence.\r", "+\t\tString firstCell = row.text(0,interpreter);\r", "+\t\tif (row.size() == 4 && \"=\".equals(row.text(2,interpreter)) && \r", "+\t\t    (\"set\".equals(firstCell) || \"setSymbolNamed\".equals(ExtendedCamelCase.camel(firstCell))))\r", "+\t\t\t\treturn;\r"], "commitAfterChange": "51f903b3dbcdee8eb97cb2b40932e27a74c2a97f", "signatureAfterChange": "\r \r \tpublic PostFixSpecialCaller(Row row, DoTraverseInterpreter interpreter)", "id": "21129b210b031782d6e1649e378cac13", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r     private static String translateUnicode(String name, boolean keepUnicode)", "fileName": "src/fitlibrary/utility/ExtendedCamelCase.java", "methodNumberAfterChange": 5, "commitBeforeChange": "0209ef28b9bcd09ff4e0df509885b3e7b6079574", "diff": ["-\t    for (int i = 0; i < name.length(); i++) {\r", "-\t        char ch =  name.charAt(i); // This needs to be updated for jdk1.5 to codePointAt()\r", "-\t\t\tif (ch < 128 || (keepUnicode && Character.isJavaIdentifierPart(ch))) // valid without translation\r", "+        if (!name.isEmpty()) {\r", "+        \tchar ch =  name.charAt(0);\r", "+\t\t\tif (ch < 128 || (keepUnicode && Character.isJavaIdentifierStart(ch)))\r", "+\t\t\t    b.append(ch);\r", "+\t\t\telse\r", "+\t\t\t    b.append(\"u\"+Integer.toHexString(ch).toUpperCase());\r", "+        }\r", "+\t    for (int i = 1; i < name.length(); i++) {\r", "+\t        char ch =  name.charAt(i);\r", "+\t\t\tif (ch < 128 || (keepUnicode && Character.isJavaIdentifierPart(ch)))\r"], "commitAfterChange": "767f6cb947a46bb148e39b288dc9b54a99aee022", "signatureAfterChange": "\r     private static String translateUnicode(String name, boolean keepUnicode)", "id": "9ed2786cf3a9c9f415757d5a9cd75456", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic static void main(String[] args) throws IOException, InterruptedException", "fileName": "test/fitlibrary/batch/TestFitLibraryRunner.java", "methodNumberAfterChange": 7, "commitBeforeChange": "5ba818354648ea599f271f8106e1431db9c61d96", "diff": ["-\r", "-\tpublic static void main(String[] args) throws IOException, InterruptedException {\r", "-\t\tString[] arguments = { \r", "-\t\t\t\t\"FitLibrary.SpecifiCations.CoreFitSpecifications.PackageImportsAndDefaults\",\r", "-\t\t\t\t\"fitnesse\",\r", "-\t\t\t\t\"runnerResults\",\r", "-\t\t\t\t\"showPasses\"};\r", "-\t\tFitLibraryRunner.main(arguments );\r", "+\t}\r", "+\t@Test\r", "+\tpublic void allAreGiven() {\r", "+\t\tString[] args = {\r", "+\t\t\t\t\"-suiteName\", \"Suite.Name\",\r", "+\t\t\t\t\"-fitNesseDiry\", \"../..\",\r", "+\t\t\t\t\"-resultsDiry\", \"TheResults\",\r", "+\t\t\t\t\"-showPasses\", \"true\",\r", "+\t\t\t\t\"-port\", \"8990\"};\r", "+\t\tRunParameters runParameters = FitLibraryRunner.getRunParameters(args);\r", "+\t\tassertThat(runParameters.get(\"suiteName\"),is(\"Suite.Name\"));\r", "+\t\tassertThat(runParameters.get(\"fitNesseDiry\"),is(\"../..\"));\r", "+\t\tassertThat(runParameters.get(\"resultsDiry\"),is(\"TheResults\"));\r", "+\t\tassertThat(runParameters.get(\"showPasses\"),is(\"true\"));\r", "+\t\tassertThat(runParameters.get(\"port\"),is(\"8990\"));\r", "+\t}\r"], "commitAfterChange": "f6e898e2c958fb69eedd2858e821919ee34de215", "signatureAfterChange": "\r \t@Test\r \tpublic void allAreGiven()", "id": "cea0ebc51f481ef4a08bcc3daac1c5cb", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tprivate void pushSut(Object sut)", "fileName": "src/fitlibrary/suite/DoFlow.java", "methodNumberAfterChange": 8, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["-\tprivate void pushSut(Object sut) {\r", "-\t\tObject currentSut = getSystemUnderTest();\r", "+\t}\r", "+\tprivate void pushSut(Object sut, Table table, TestResults testResults) {\r", "+\t\tObject currentSut = flowEvaluator.getSystemUnderTest();\r", "-\t\t\ttableStack.push(currentSut);\r", "-\t\tsetSystemUnderTest(sut);\r", "+\t\t\ttableStack.push(flowEvaluator.getTypedSystemUnderTest());\r", "+\t\tflowEvaluator.setSystemUnderTest(sut); // This will take account of any sut being type-wrapped.\r", "+\t\tcallSetUpSutChain(sut, table, testResults);\r", "+\t\tif (currentSut != null && currentSut == suiteFixture)\r", "+\t\t\tflowEvaluator.setRuntimeContext(suiteFixture.getCopyOfRuntimeContext());\r", "+\t}\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r \tprivate void pushSut(Object sut, Table table, TestResults testResults)", "id": "efa8386232e4cd1952823fb5a1ee6895", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "9b14fa346d38fb65e26153ea7c5d565b", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 38, "signatureBeforeChange": "\r \t@Override\r \tpublic CellProxy cellAt(final int i)", "fileName": "src/fitlibrary/runtime/RuntimeContextContainer.java", "methodNumberAfterChange": 38, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["+\t\tfinal Cell cell = currentRow.at(i);\r", "-\t\t\t\tcurrentRow.at(i).pass(testResults);\r", "+\t\t\t\tcell.pass(testResults);\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void pass(String msg) {\r", "+\t\t\t\tcell.pass(testResults,msg);\r", "-\t\t\t\t\tcurrentRow.at(i).fail(testResults);\r", "+\t\t\t\t\tcell.fail(testResults);\r", "-\t\t\t\t\tcurrentRow.at(i).fail(testResults,msg,dynamicVariables);\r", "+\t\t\t\t\tcell.fail(testResults,msg,dynamicVariables);\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void failHtml(String msg) {\r", "+\t\t\t\tcell.failHtml(testResults,msg);\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void fail() {\r", "+\t\t\t\tcell.fail(testResults);\r", "-\t\t\t\t\tcurrentRow.at(i).error(testResults);\r", "+\t\t\t\t\tcell.error(testResults);\r", "-\t\t\t\t\tcurrentRow.at(i).error(testResults,msg);\r", "+\t\t\t\t\tcell.error(testResults,msg);\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void error(Throwable e) {\r", "+\t\t\t\tcell.error(testResults,e);\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void error() {\r", "+\t\t\t\tcell.error(testResults);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Override\r \tpublic CellProxy cellAt(final int i)", "id": "c3264f286909043649f286b28f4080dd", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r \tprivate static void run(String[] args) throws ParseException, IOException", "fileName": "src/fitlibrary/runner/FolderRunnerTest.java", "methodNumberAfterChange": 1, "commitBeforeChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "diff": ["-\t\tReport report = new FolderRunner(args).run();\r", "+\t\tFolderRunner folderRunner = new FolderRunner(args);\r", "+\t\tfinal StringBuilder sbOut = new StringBuilder();\r", "+\t\tfinal StringBuilder sbErr = new StringBuilder();\r", "+\t\tfolderRunner.addTestListener(new StoryTestListener() {\r", "+\t\t\t@Override\r", "+\t\t\tpublic void testComplete(boolean failing, String pageCounts, String assertionCounts) {\r", "+\t\t\t\t//\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void suiteComplete() {\r", "+\t\t\t\t//\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void reportOutput(String name, String out, String output) {\r", "+\t\t\t\tif (output.isEmpty())\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\tif (out.equals(\"out\"))\r", "+\t\t\t\t\tsbOut.append(name+\": \"+\": \"+output); // sysout is temporarily redirected\r", "+\t\t\t\telse\r", "+\t\t\t\t\tsbErr.append(name+\": \"+\": \"+output); // syserr is temporarily redirected\r", "+\t\t\t}\r", "+\t\t});\r", "+\t\tReport report = folderRunner.run();\r", "+        System.out.print(sbOut);\r", "+        System.err.print(sbErr);\r"], "commitAfterChange": "d5585b9bd9597ec67ca4eaebd1dd7d580af72cbc", "signatureAfterChange": "\r \r \tprivate static void run(String[] args) throws ParseException, IOException", "id": "dd1a4d5c1bbe820f0c4cf7fe895c862f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "cd956a9ff3d58d34842b3aca55efc134", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"]}
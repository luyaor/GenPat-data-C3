{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsNothingWithIgnoredException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 5, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "-\tpublic void reportsNothingWithIgnoredException() throws Exception {\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);\r", "-\t\t\t   will(throwException(new IgnoredException()));\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.PASSES_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t}\r", "+\t@Test\r", "+\tpublic void trueWithIgnoredException() throws Exception {\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).runWithNoColouring(); will(throwException(new IgnoredException()));\r", "+\t\t}});\r", "+\t\tassertThat(globalActionScope.not(action),is(true));\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test\r \tpublic void trueWithIgnoredException() throws Exception", "id": "16f88f212daf057bd8ed078bedb48e80", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \t@Test\r \tpublic void errorWithException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestEnsure.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "+\t@Test(expected=BadNumberException.class)\r", "-\t\tfinal BadNumberException exception = new BadNumberException();\r", "-\t\tcontext.checking(new EnsureExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,true,firstCell);\r", "-\t\t\t   will(throwException(exception));\r", "-\t\t\tone(initialRow).error(testResults,exception);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.ensure(initialRow);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t\t\tone(action).run(); will(throwException(new BadNumberException()));\r", "+\t\tassertThat(globalActionScope.ensure(action),is(false));\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test(expected=BadNumberException.class)\r \tpublic void errorWithException() throws Exception", "id": "381b4a707b98764995875007c9921377", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 17, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsPassWithOtherExceptionThrown() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 7, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "-\tpublic void reportsPassWithOtherExceptionThrown() throws Exception {\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell); \r", "-\t\t\t  will(throwException(new RuntimeException(\"\")));\r", "-\t\t\tone(firstCell).pass(testResults);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.PASSES_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t}\r", "+\t@Test\r", "+\tpublic void trueWithOtherException() throws Exception {\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).runWithNoColouring(); will(throwException(new RuntimeException()));\r", "+\t\t}});\r", "+\t\tassertThat(globalActionScope.not(action),is(true));\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test\r \tpublic void trueWithOtherException() throws Exception", "id": "5524f5e0edc48dcfa41835754272a585", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \t@Test\r \tpublic void errorWithEmbeddedException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestEnsure.java", "methodNumberAfterChange": 5, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t@Test\r", "-\tpublic void errorWithEmbeddedException() throws Exception {\r", "-\t\tfinal BadNumberException embeddedException = new BadNumberException();\r", "-\t\tcontext.checking(new EnsureExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,true,firstCell);\r", "-\t\t\t   will(throwException(new InvocationTargetException(embeddedException)));\r", "-\t\t\tone(initialRow).error(testResults,embeddedException);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.ensure(initialRow);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t@Test(expected=InvocationTargetException.class)\r", "+\tpublic void errorWithEmbeddedException() throws Exception {\r", "+\t\t\tone(action).run(); will(throwException(new InvocationTargetException(new BadNumberException())));\r", "+\t\tassertThat(globalActionScope.ensure(action),is(false));\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test(expected=InvocationTargetException.class)\r \tpublic void errorWithEmbeddedException() throws Exception", "id": "598ae0ecaf1eca771fde0d724e597978", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsFailWithTrueResult() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 2, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "-\tpublic void reportsFailWithTrueResult() throws Exception {\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);will(returnValue(true));\r", "-\t\t\tone(firstCell).fail(testResults);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.PASSES_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t}\r", "+\t@Test\r", "+\tpublic void falseWithTrueResult() throws Exception {\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).runWithNoColouring(); will(returnValue(true));\r", "+\t\t}});\r", "+\t\tassertThat(globalActionScope.not(action),is(false));\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test\r \tpublic void falseWithTrueResult() throws Exception", "id": "7d89500bb8a0c65fc4fc81e17c20b83d", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \t@Test\r \tpublic void ignoredWithIgnoredException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestEnsure.java", "methodNumberAfterChange": 3, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t@Test\r", "+\t@Test(expected=IgnoredException.class)\r", "-\t\tcontext.checking(new EnsureExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,true,firstCell);\r", "-\t\t\t   will(throwException(new IgnoredException()));\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).run(); will(throwException(new IgnoredException()));\r", "-\t\tTwoStageSpecial lazySpecial = special.ensure(initialRow);\r", "-\t\tlazySpecial.run(testResults);\r", "+\t\tassertThat(globalActionScope.ensure(action),is(false));\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test(expected=IgnoredException.class)\r \tpublic void ignoredWithIgnoredException() throws Exception", "id": "aca55ec9ab2b5e2784dbe1670e356178", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsPassWithFalseResult() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 0, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "+\t\r", "-\tpublic void reportsPassWithFalseResult() throws Exception {\r", "-\t\tcontext.checking(new NotExpectations() {{\t\t\t\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);will(returnValue(false));\r", "-\t\t\tone(firstCell).pass(testResults);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.PASSES_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\tpublic void trueWithFalseResult() throws Exception {\r", "+\t\t\tone(action).runWithNoColouring(); will(returnValue(false));\r", "+\t\tassertThat(globalActionScope.not(action),is(true));\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t\r \t@Test\r \tpublic void trueWithFalseResult() throws Exception", "id": "bbc867886cef5c0d89091a8e920d9511", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsErrorWithParseExceptionThrown() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 1, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "-\tpublic void reportsErrorWithParseExceptionThrown() throws Exception {\r", "-\t\tfinal BadNumberException exception = new BadNumberException();\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);\r", "-\t\t\t  will(throwException(exception));\r", "-\t\t\tone(initialRow).error(testResults,exception);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.ERROR_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t@Test\r", "+\tpublic void trueWithException() throws Exception {\r", "+\t\t\tone(action).runWithNoColouring(); will(throwException(new BadNumberException()));\r", "+\t\tassertThat(globalActionScope.not(action),is(true));\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test\r \tpublic void trueWithException() throws Exception", "id": "c664c805ab57a8bd4c98a724e0124c52", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "821cd978dac1690afd686848534a4c17", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL"]}
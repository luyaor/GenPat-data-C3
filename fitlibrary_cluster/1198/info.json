{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \t@Override\r \t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r \tpublic TypedObject parseTyped(Cell cell, TestResults testResults) throws Exception", "fileName": "src/fitlibrary/parser/EnumParser.java", "methodNumberAfterChange": 1, "commitBeforeChange": "f7ebaaa92ebfbd1939c31f0af7fd44102b5c424c", "diff": ["-\t\tString text = cell.text(resolver);\r", "+\t\tString text = cell.text(runtime);\r", "-\t\t\tString stringValue = ExtendedCamelCase.camel(text.replaceAll(\"\\\\s+\",\"\")).toUpperCase();\r", "+\t\t\tString stringValue = runtime.extendedCamel(text.replaceAll(\"\\\\s+\",\"\")).toUpperCase();\r", "-\t\t\t\treturn typed.typedObject(Enum.valueOf(asClass, ExtendedCamelCase.camel(text.replaceAll(\"\\\\s+\",\"_\")).toUpperCase()));\r", "+\t\t\t\treturn typed.typedObject(Enum.valueOf(asClass, runtime.extendedCamel(text.replaceAll(\"\\\\s+\",\"_\")).toUpperCase()));\r"], "commitAfterChange": "0209ef28b9bcd09ff4e0df509885b3e7b6079574", "signatureAfterChange": "\r \t@Override\r \t@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r \tpublic TypedObject parseTyped(Cell cell, TestResults testResults) throws Exception", "id": "c5edd59e77a0cd520b7f920adb5182c2", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 18, "signatureBeforeChange": "\r \tpublic ICalledMethodTarget findMethodFromRow222(IRow row, int from, int less) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 19, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic ICalledMethodTarget findMethodFromRow222(IRow row, int from, int less) throws Exception {\r", "-\t\treturn findMethodByActionName(row.rowFrom(from), row.size() - less);\r", "+\tpublic ICalledMethodTarget findMethodFromRow222(Row row, int from, int less) throws Exception {\r", "+\t\treturn findMethodFromRow(row,from,less-from-1);\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic ICalledMethodTarget findMethodFromRow222(Row row, int from, int less) throws Exception", "id": "ca05b5e9542f174213770dee7d7b1373", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 86, "signatureBeforeChange": "\r \t@Override\r \tpublic void show(IRow row, String text)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 39, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["+\t//--- SHOW\r", "+\t@Override\r", "+\tpublic void show(Row row, String text) {\r", "+\t\tglobal().show(row, text);\r", "-\t}\r", "-\t@Override\r", "-\tpublic void show(IRow row, String text) {\r", "-\t\trow.addCell(text).shown();\r", "-\t\tCallManager.addShow(row);\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \t@Override\r \tpublic void show(Row row, String text)", "id": "dd4db219a5264b933b5e0ed8ff44d90e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tprivate void colourReport(Tables body, IRow row,\r \t\t\tTestResults testResults, TestResults subTestResults)", "fileName": "src/fitlibrary/traverse/workflow/caller/DefinedActionCaller.java", "methodNumberAfterChange": 8, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tprivate void colourReport(Tables body, IRow row,\r", "+\tprivate void colourReport(Tables body, Row row,\r", "-\t\tif (runtime.toExpandDefinedActions() || subTestResults.problems() || testResults.isAbandoned()) {\r", "-\t\t\tif (testResults.isAbandoned()) {\r", "+\t\tif (runtime.toExpandDefinedActions() || subTestResults.problems() || runtime.isAbandoned(testResults)) {\r", "+\t\t\tif (runtime.isAbandoned(testResults)) {\r", "-\t\t\trow.addCell(new Cell(link(pageName),body));\r", "-\t\t} else if (!testResults.isAbandoned())\r", "+\t\t\trow.addCell(new CellOnParse(link(pageName),body));\r", "+\t\t} else if (!runtime.isAbandoned(testResults))\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate void colourReport(Tables body, Row row,\r \t\t\tTestResults testResults, TestResults subTestResults)", "id": "f497308c1a55e28f184e18a7538bfdfe", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "a814d0eb58f575c0943f11d1cc40be9f", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tprotected static List<String> list(String... ss)", "fileName": "src/fitlibrary/batch/FitLibraryRunner.java", "methodNumberAfterChange": 10, "commitBeforeChange": "7bc373fdff836c5fe5554dd7cca83ec4c7ddbc73", "diff": ["-\t}\r", "-\tprotected static List<String> list(String... ss) {\r", "-\t\treturn CollectionUtility.list(ss);\r", "+\t\t\t\r", "+\t\t\tpublic static ValidParameters parseFromParameterName(String parameterName) {\r", "+\t\t\t\tfor (ValidParameters param: ValidParameters.values()) {\r", "+\t\t\t\t\tif (parameterName.equals(param.parameterName()))\r", "+\t\t\t\t\t\treturn param;\r", "+\t\t\t\t}\r", "+\t\t\t\tthrow new InvalidParameterException(parameterName);\r", "+\t\t\t}\r"], "commitAfterChange": "a1ec4135443e6b5658923cb34156b47b7ffd658c", "signatureAfterChange": "\r \t\t\t\r \t\t\tpublic static ValidParameters parseFromParameterName(String parameterName)", "id": "4330d9a4b0d74371cadaee8618e491a3", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tpublic Closure findFixturingMethod(Evaluator evaluator, String name, Class<?>[] argTypes)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 3, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\treturn findFixturedMethod(evaluator, name, argTypes, new HashSet<Object>());\r", "+\t\tIScope scope = scopeOf(evaluator);\r", "+\t\tfor (TypedObject typedObject : scope.objectsForLookup()) {\r", "+\t\t\tClosure target = typedObject.findPublicMethodClosureForTypedObject(name,argTypes);\r", "+\t\t\tif (target != null)\r", "+\t\t\t\treturn target;\r", "+\t\t}\r", "+\t\treturn null;\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic Closure findFixturingMethod(Evaluator evaluator, String name, Class<?>[] argTypes)", "id": "5b687deb3b4708422472f7a2dc5fa0e8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 10, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findMethod(String name, List<String> methodArgs, String returnType, Evaluator evaluator)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 9, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\tClosure result = asTypedObject(evaluator).findMethodForTypedObject(name,methodArgs.size());\r", "-\t\tif (result != null)\r", "-\t\t\treturn new CalledMethodTarget(result,evaluator);\r", "+\t\tint argCount = methodArgs.size();\r", "+\t\tIScope scope = scopeOf(evaluator);\r", "+\t\tfor (TypedObject typedObject : scope.objectsForLookup()) {\r", "+\t\t\tOption<CalledMethodTarget> target = typedObject.new_findSpecificMethod(name,argCount,evaluator);\r", "+\t\t\tif (target.isSome())\r", "+\t\t\t\treturn target.get();\r", "+\t\t}\r", "-\t\tthrow new MissingMethodException(signatures,identifiedClassesInOutermostContext(evaluator, true));\r", "+\t\tthrow new MissingMethodException(signatures,scope.possibleClasses());\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget findMethod(String name, List<String> methodArgs, String returnType, Evaluator evaluator)", "id": "6fbfe3340c50c30f5ec4f540e8b50ce3", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "290b082cd5fa115445a98afbc468ebd3", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
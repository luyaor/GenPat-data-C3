{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 15, "signatureBeforeChange": "\r \tpublic List<Class<?>> identifiedClassesInSUTChain(Object firstObject)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 16, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-    }\r", "-\tpublic List<Class<?>> identifiedClassesInSUTChain(Object firstObject) {\r", "-\t\tList<Class<?>> accumulatingClasses = new ArrayList<Class<?>>();\r", "-\t\tidentifiedClassListInSutChain(firstObject,accumulatingClasses,true);\r", "-\t\tif (accumulatingClasses.isEmpty())\r", "-\t\t\taccumulatingClasses.add(firstObject.getClass());\r", "-\t\treturn accumulatingClasses;\r", "-\t}\r", "+    }\r", "+\tpublic List<Class<?>> possibleClasses(Evaluator evaluator) {\r", "+\t\treturn scopeOf(evaluator).possibleClasses();\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic List<Class<?>> possibleClasses(Evaluator evaluator)", "id": "32b7d3f5f5cc638c1d154b5d77137e1a", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findGetterUpContextsToo(TypedObject typedObject, Evaluator evaluator, String propertyName, boolean considerContext)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 13, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\tCalledMethodTarget target = typedObject.optionallyFindGetterOnTypedObject(propertyName,evaluator);\r", "-\t\tif (considerContext && target == null)\r", "-\t\t\ttarget = searchForMethodTargetUpOuterContext(propertyName,evaluator.getNextOuterContext(),evaluator);\r", "+\t\tCalledMethodTarget target;\r", "+\t\tif (considerContext)\r", "+\t\t\ttarget = searchForMethodTargetUpOuterContext(propertyName,evaluator);\r", "+\t\telse\r", "+\t\t\ttarget =  typedObject.new_optionallyFindGetterOnTypedObject(propertyName,evaluator);\r", "-\t\tString getMethodName = ExtendedCamelCase.camel(\"get \"+propertyName);\r", "-\t\tthrow new MissingMethodException(signatures(\"public ResultType \"+ getMethodName+\"() { }\"),identifiedClassesInSUTChain(typedObject.getSubject()));\r", "+\t\tList<Class<?>> possibleClasses = new ArrayList<Class<?>>();\r", "+\t\tif (considerContext)\r", "+\t\t\tpossibleClasses = scopeOf(evaluator).possibleClasses();\r", "+\t\telse\r", "+\t\t\tpossibleClasses.add(typedObject.getSubject().getClass());\r", "+\t\tthrow new MissingMethodException(signatures(\"public ResultType \"+ camel(\"get \"+propertyName)+\"() { }\"),possibleClasses);\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget findGetterUpContextsToo(TypedObject typedObject, Evaluator evaluator, String propertyName, boolean considerContext)", "id": "82f75f929535258628e076edb82cef97", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "8d4df83f3751e32a4a42f8d81e6bd972", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
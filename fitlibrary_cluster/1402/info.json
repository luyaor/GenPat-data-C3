{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \t\r \t@Test\r \tpublic void runWithFixture() throws FitParseException", "fileName": "test/fitlibrary/flow/TestDoFlowWithFixture.java", "methodNumberAfterChange": 0, "commitBeforeChange": "45400291a9cb47b358ca00f896a8c7e188a58f80", "diff": ["-\t\tfinal GenericTypedObject typedResult1 = new GenericTypedObject(evaluator);\r", "-\t\tfinal Parse parse = new Parse(\"<table><tr><td>1</td></tr></table>\");\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\tallowing(tableListener).getTestResults(); will(returnValue(testResults));\r", "-\t\t\toneOf(runtime).pushTestResults(with(any(TestResults.class)));\r", "-\t\t\tallowing(runtime).isAbandoned(with(any(TestResults.class))); will(returnValue(false));\r", "+\t\tTable table0 = tables.at(0);\r", "-\t\t\toneOf(runtime).setCurrentTable(table);\r", "-\t\t\toneOf(runtime).setCurrentRow(table.at(0));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(table.at(0),testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\toneOf(table).asTableOnParse(); will(returnValue(table));\r", "-\t\t\toneOf(flowEvaluator).fitHandler(); will(returnValue(new FitHandler()));\r", "-\t\t\toneOf(table).asParse(); will(returnValue(parse));\r", "-\t\t\toneOf(mockFixture).doTable(parse);\r", "-\t\t\t\r", "-\t\t\toneOf(table).replaceAt(0, table.at(0));\r", "-\t\t\toneOf(table).replaceAt(1, table.at(1));\r", "-\t\t\toneOf(runtime).popTestResults();\r", "-\t\t}});\r", "-\t\tdoFlow.runTable(table,tableListener);\r", "+\t\tdoFlowDriver.startingOnTable(table0);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(0),evaluator);\r", "+\t\tdoFlowDriver.interpretingFixture(mockFixture, table0);\r", "+\t\tdoFlowDriver.poppingAtEndOfLastTable();\r", "+\t\tdoFlowDriver.finishingTable(table0);\r", "+\r", "+\t\tdoFlowDriver.runStorytest(tables);\r"], "commitAfterChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "signatureAfterChange": "\r \t\r \t@Test\r \tpublic void runWithFixture() throws FitParseException", "id": "18352899212cc1bfd9b948d7447b48a4", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 13, "signatureBeforeChange": "\r \t\r \t\r \tprivate void verifyScopePush(final Object result, final Object sut)", "fileName": "test/fitlibrary/flow/TestDoFlow.java", "methodNumberAfterChange": 12, "commitBeforeChange": "45400291a9cb47b358ca00f896a8c7e188a58f80", "diff": ["-\t\r", "+\r", "-\t\tfinal GenericTypedObject typedSut = new GenericTypedObject(sut);\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\toneOf(flowEvaluator).interpretRow(row0,testResults);\r", "-\t\t\t  will(returnValue(new GenericTypedObject(result)));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(0),testResults);\r", "-\t\t\t  will(returnValue(new GenericTypedObject(result)));\r", "-\t\t\texactly(2).of(scopeStack).push(typedSut);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(sut, row0, testResults);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(sut, tables.at(1).at(0), testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(sut, row0, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(sut, tables.at(1).at(0), testResults);\r", "-\t\t\toneOf(flowEvaluator).interpretRow(row1,testResults);\r", "-\t\t\t  will(returnValue(GenericTypedObject.NULL));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(1),testResults);\r", "-\t\t\t  will(returnValue(GenericTypedObject.NULL));\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfTable(); will(returnValue(list(typedSut)));\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfStorytest(); will(returnValue(list(typedSut)));\r", "-\t\t\toneOf(tableListener).tableFinished(table0);\r", "-\t\t\toneOf(tableListener).tableFinished(tables.at(1));\r", "-\t\t}});\r", "-\t\tdoFlow.runStorytest(tables,tableListener);\r", "+\t\tTable table0 = tables.at(0);\r", "+\t\tTable table1 = tables.at(1);\r", "+\r", "+\t\tdoFlowDriver.startingOnTable(table0);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(0), result);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(sut); // -- extra\r", "+\t\tdoFlowDriver.callingSetUpOn(sut,table0.at(0)); // -- extra\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(1), null);\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfTable(list(result));\r", "+\t\tdoFlowDriver.callingTearDownOn(result, table0.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table0);\r", "+\r", "+\t\tdoFlowDriver.startingOnTable(table1);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table1.at(0), result);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(sut); // -- extra\r", "+\t\tdoFlowDriver.callingSetUpOn(sut,table1.at(0)); // -- extra\r", "+\t\tdoFlowDriver.interpretingRowReturning(table1.at(1), null);\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfLastTable(list(result));\r", "+\t\tdoFlowDriver.callingTearDownOn(result, table1.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table1);\r", "+\r", "+\t\tdoFlowDriver.runStorytest(tables);\r"], "commitAfterChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "signatureAfterChange": "\r \r \tprivate void verifyScopePush(final Object result, final Object sut)", "id": "3ced7f2c8b2cf74fd00f5b2f175ebc75", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \r \tprivate void verifyWithEvaluator(final Evaluator evaluator, final Evaluator mockEvaluator)", "fileName": "test/fitlibrary/flow/TestDoFlowWithEvaluator.java", "methodNumberAfterChange": 5, "commitBeforeChange": "45400291a9cb47b358ca00f896a8c7e188a58f80", "diff": ["-\tprivate void verifyWithEvaluator(final Evaluator evaluator, final Evaluator mockEvaluator) {\r", "-\t\tfinal GenericTypedObject typedResult1 = new GenericTypedObject(evaluator);\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\tallowing(tableListener).getTestResults(); will(returnValue(testResults));\r", "-\t\t\toneOf(runtime).pushTestResults(with(any(TestResults.class)));\r", "-\t\t\tallowing(runtime).isAbandoned(with(any(TestResults.class))); will(returnValue(false));\r", "+\tprivate void verifyWithEvaluator(Evaluator evaluator, Evaluator mockEvaluator) {\r", "+\t\tdoFlowDriver.showTearDown = true;\r", "+\t\tTable table0 = tables.at(0);\r", "+\t\t\r", "+\t\tdoFlowDriver.startingOnTable(table0);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(0), evaluator);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(evaluator);\r", "+\t\tdoFlowDriver.callingSetUpOn(evaluator,table0.at(0));\r", "+\t\tdoFlowDriver.interpretingEvaluator(mockEvaluator,table0);\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfLastTable(list(evaluator));\r", "+\t\tdoFlowDriver.callingTearDownOn(evaluator, table0.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table0);\r", "-\t\t\toneOf(runtime).setCurrentTable(table);\r", "-\t\t\toneOf(runtime).setCurrentRow(table.at(0));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(table.at(0),testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(evaluator, table.at(0), testResults);\r", "-\t\t\toneOf(scopeStack).push(typedResult1);\r", "-\t\t\toneOf(mockEvaluator).interpretAfterFirstRow(table, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(evaluator, table.at(0), testResults);\r", "-\t\t\toneOf(runtime).popTestResults();\r", "-\t\t}});\r", "-\t\tdoFlow.runTable(table,tableListener);\r", "+\t\tdoFlowDriver.runStorytest(tables);\r"], "commitAfterChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "signatureAfterChange": "\r \r \tprivate void verifyWithEvaluator(Evaluator evaluator, Evaluator mockEvaluator)", "id": "6b96bc71c0907c9b7f8d73b52c09dfd1", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 14, "signatureBeforeChange": "\r \tprivate void verifyNoScopeChangeWith(final Object result)", "fileName": "test/fitlibrary/flow/TestDoFlow.java", "methodNumberAfterChange": 13, "commitBeforeChange": "45400291a9cb47b358ca00f896a8c7e188a58f80", "diff": ["-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\toneOf(flowEvaluator).interpretRow(row0,testResults);\r", "-\t\t\t  will(returnValue(new GenericTypedObject(result)));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(row1,testResults);\r", "-\t\t\t  will(returnValue(GenericTypedObject.NULL));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(0),testResults);\r", "-\t\t\t  will(returnValue(new GenericTypedObject(result)));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(1),testResults);\r", "-\t\t\t  will(returnValue(GenericTypedObject.NULL));\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfTable(); will(returnValue(list()));\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfStorytest(); will(returnValue(list()));\r", "-\t\t\toneOf(tableListener).tableFinished(table0);\r", "-\t\t\toneOf(tableListener).tableFinished(tables.at(1));\r", "-\t\t}});\r", "-\t\tdoFlow.runStorytest(tables,tableListener);\r", "+\t\tTable table0 = tables.at(0);\r", "+\t\tTable table1 = tables.at(1);\r", "+\t\t\r", "+\t\tdoFlowDriver.startingOnTable(table0);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(0),result);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(1), null);\r", "+\t\tdoFlowDriver.poppingAtEndOfTable();\r", "+\t\tdoFlowDriver.finishingTable(table0);\r", "+\r", "+\t\tdoFlowDriver.startingOnTable(table1);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table1.at(0), result);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table1.at(1), null);\r", "+\t\tdoFlowDriver.poppingAtEndOfLastTable();\r", "+\t\tdoFlowDriver.finishingTable(table1);\r", "+\r", "+\t\tdoFlowDriver.runStorytest(tables);\r"], "commitAfterChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "signatureAfterChange": "\r \tprivate void verifyNoScopeChangeWith(final Object result)", "id": "a1097cdf1da4cafc4bf24995a46c25ed", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r \t@Test\r \tpublic void twoDoTraversesSoScopeStackChange()", "fileName": "test/fitlibrary/flow/TestDoFlow.java", "methodNumberAfterChange": 11, "commitBeforeChange": "45400291a9cb47b358ca00f896a8c7e188a58f80", "diff": ["+\r", "-\t\tfinal GenericTypedObject typedResult1 = new GenericTypedObject(new DoTraverse(\"s\"));\r", "-\t\tfinal GenericTypedObject typedResult2 = new GenericTypedObject(new DoTraverse(\"t\"));\r", "-\t\tfinal GenericTypedObject genS = new GenericTypedObject(\"s\");\r", "-\t\tfinal GenericTypedObject genT = new GenericTypedObject(\"t\");\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\toneOf(flowEvaluator).interpretRow(row0,testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(0),testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\texactly(2).of(scopeStack).push(genS);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", row0, testResults);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", tables.at(1).at(0), testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", row0, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", tables.at(1).at(0), testResults);\r", "-\t\t\t\r", "-\t\t\toneOf(flowEvaluator).interpretRow(row1,testResults);\r", "-\t\t\t  will(returnValue(typedResult2));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(1),testResults);\r", "-\t\t\t  will(returnValue(typedResult2));\r", "-\t\t\texactly(2).of(scopeStack).push(genT);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", row1, testResults);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", tables.at(1).at(1), testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", row0, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", tables.at(1).at(0), testResults);\r", "-\t\t\t\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfTable(); will(returnValue(list(genT,genS)));\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfStorytest(); will(returnValue(list(genT,genS)));\r", "-\t\t\toneOf(tableListener).tableFinished(table0);\r", "-\t\t\toneOf(tableListener).tableFinished(tables.at(1));\r", "-\t\t}});\r", "-\t\tdoFlow.runStorytest(tables,tableListener);\r", "+\t\tString s = \"s\";\r", "+\t\tString t = \"t\";\r", "+\t\tfinal Object doS = new DoTraverse(s);\r", "+\t\tfinal Object doT = new DoTraverse(t);\r", "+\r", "+\t\tTable table0 = tables.at(0);\r", "+\t\tTable table1 = tables.at(1);\r", "+\t\t\r", "+\t\tdoFlowDriver.startingOnTable(table0);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(0), doS);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(s);\r", "+\t\tdoFlowDriver.callingSetUpOn(s,table0.at(0));\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(1), doT);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(t);\r", "+\t\tdoFlowDriver.callingSetUpOn(t,table0.at(1));\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfTable(list(t,s));\r", "+\t\tdoFlowDriver.callingTearDownOn(t, table0.at(0));\r", "+\t\tdoFlowDriver.callingTearDownOn(s, table0.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table0);\r", "+\r", "+\t\tdoFlowDriver.startingOnTable(table1);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table1.at(0), doS);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(s);\r", "+\t\tdoFlowDriver.callingSetUpOn(s,table1.at(0));\r", "+\t\tdoFlowDriver.interpretingRowReturning(table1.at(1), doT);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(t);\r", "+\t\tdoFlowDriver.callingSetUpOn(t,table1.at(1));\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfLastTable(list(t,s));\r", "+\t\tdoFlowDriver.callingTearDownOn(t, table1.at(0));\r", "+\t\tdoFlowDriver.callingTearDownOn(s, table1.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table1);\r", "+\r", "+\t\tdoFlowDriver.runStorytest(tables);\r"], "commitAfterChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "signatureAfterChange": "\r \r \t@Test\r \tpublic void twoDoTraversesSoScopeStackChange()", "id": "cf74091c581641ff242df603cb52246f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \r \tprivate void verifyWithEvaluator(final SuiteEvaluator suiteEvaluator)", "fileName": "test/fitlibrary/flow/TestDoFlowWithSuiteEvaluator.java", "methodNumberAfterChange": 1, "commitBeforeChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "diff": ["-\t\tfinal GenericTypedObject typedResult1 = new GenericTypedObject(suiteEvaluator);\r", "+\t\tTable table1 = storytest1.at(0);\r", "+\t\tdriver.startingOnTable(table1);\r", "+\t\tdriver.interpretingRowReturning(table1.at(0), suiteEvaluator);\r", "+\t\tdriver.injectingWithRuntime(suiteEvaluator);\r", "+\t\tdriver.callingSuiteSetUpOn(suiteEvaluator,table1.at(0));\r", "+\t\tdriver.pushingObjectOnScopeStack(suiteEvaluator);\r", "+\t\tdriver.callingSetUpOn(suiteEvaluator, table1.at(0));\r", "+\t\tdriver.poppingScopeStackAtEndOfLastTable(list());\r", "+\t\tdriver.finishingTable(table1);\r", "+\t\tdriver.runStorytest(storytest1);\r", "-\t\tstorytestWithOneTableIsRunWithoutError(storytest1,runtime);\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\tallowing(tableListener).getTestResults(); will(returnValue(testResults));\r", "-\r", "-\t\t\tallowing(suiteEvaluator).setRuntimeContext(runtime);\r", "-\t\t\toneOf(flowEvaluator).interpretRow(table1.at(0),testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\tallowing(suiteEvaluator).getSystemUnderTest(); will(returnValue(null));\r", "-\t\t\toneOf(setUpTearDown).callSuiteSetUp(suiteEvaluator, table1.at(0), testResults);\r", "-\t\t\toneOf(scopeStack).push(typedResult1);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(suiteEvaluator, table1.at(0), testResults);\r", "-\t\t}});\r", "-\t\tdoFlow.runStorytest(storytest1,tableListener);\r", "-\r", "-\t\tstorytestWithOneTableIsRunWithoutError(storytest2,runtimeCopy);\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\toneOf(flowEvaluator).setRuntimeContext(runtimeCopy);\r", "-\t\t\toneOf(suiteEvaluator).getCopyOfRuntimeContext(); will(returnValue(runtimeCopy));\r", "-\t\t\tallowing(flowEvaluator).getSystemUnderTest(); will(returnValue(null));\r", "-\r", "-\t\t\toneOf(flowEvaluator).interpretRow(table2.at(0),testResults);\r", "-\t\t\t  will(returnValue(GenericTypedObject.NULL));\r", "-\t\t}});\r", "-\t\tdoFlow.runStorytest(storytest2,tableListener);\r", "-\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\toneOf(setUpTearDown).callSuiteTearDown(with(suiteEvaluator),with(any(TestResults.class)));\r", "-\t\t}});\r", "-\t\tdoFlow.exit();\r", "+\t\tTable table2 = storytest2.at(0);\r", "+\t\tRuntimeContextInternal runtimeCopy = driver.startingStorytestWithSuite(suiteEvaluator);\r", "+\t\tdriver.startingOnTable(table2,runtimeCopy);\r", "+\t\tString s = \"s\";\r", "+\t\tdriver.interpretingRowReturning(table2.at(0),new DoTraverse(s),runtimeCopy);\r", "+\t\tdriver.pushingObjectOnScopeStack(s);\r", "+\t\tdriver.callingSetUpOn(s, table2.at(0));\r", "+\t\tdriver.poppingScopeStackAtEndOfLastTable(runtimeCopy,list(s));\r", "+\t\tdriver.callingTearDownOn(s, table2.at(0));\r", "+\t\tdriver.finishingTable(table2,runtimeCopy);\r", "+\t\tdriver.runStorytest(storytest2);\r", "+\t\t\r", "+\t\tdriver.callingSuiteTearDownOn(suiteEvaluator);\r", "+\t\tdriver.exit();\r", "+\t\t\r"], "commitAfterChange": "2a76716f62b24ecab03bf4f48402a73ac38ebe01", "signatureAfterChange": "\r \r \tprivate void verifyWithEvaluator(final SuiteEvaluator suiteEvaluator)", "id": "e0d1e2e466db778aed10539c6a8f29cd", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "7c965103d0e1333b9bce7395dff37caf", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
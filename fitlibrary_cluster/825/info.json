{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 38, "signatureBeforeChange": "\r \t@Override\r \tpublic CellProxy cellAt(final int i)", "fileName": "src/fitlibrary/runtime/RuntimeContextContainer.java", "methodNumberAfterChange": 38, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["+\t\tfinal Cell cell = currentRow.at(i);\r", "-\t\t\t\tcurrentRow.at(i).pass(testResults);\r", "+\t\t\t\tcell.pass(testResults);\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void pass(String msg) {\r", "+\t\t\t\tcell.pass(testResults,msg);\r", "-\t\t\t\t\tcurrentRow.at(i).fail(testResults);\r", "+\t\t\t\t\tcell.fail(testResults);\r", "-\t\t\t\t\tcurrentRow.at(i).fail(testResults,msg,dynamicVariables);\r", "+\t\t\t\t\tcell.fail(testResults,msg,dynamicVariables);\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void failHtml(String msg) {\r", "+\t\t\t\tcell.failHtml(testResults,msg);\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void fail() {\r", "+\t\t\t\tcell.fail(testResults);\r", "-\t\t\t\t\tcurrentRow.at(i).error(testResults);\r", "+\t\t\t\t\tcell.error(testResults);\r", "-\t\t\t\t\tcurrentRow.at(i).error(testResults,msg);\r", "+\t\t\t\t\tcell.error(testResults,msg);\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void error(Throwable e) {\r", "+\t\t\t\tcell.error(testResults,e);\r", "+\t\t\t}\r", "+\t\t\t@Override\r", "+\t\t\tpublic void error() {\r", "+\t\t\t\tcell.error(testResults);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Override\r \tpublic CellProxy cellAt(final int i)", "id": "c3264f286909043649f286b28f4080dd", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 3, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["-\t\t\t\t\t\tDoEvaluator resultingEvaluator = (DoEvaluator)result;\r", "-\t\t\t\t\t\tresultingEvaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\tresultingEvaluator.setUp(table, testResults);\r", "-\t\t\t\t\t\tresultingEvaluator.interpretInFlow(new Table(row),testResults);\r", "-\t\t\t\t\t\tresultingEvaluator.tearDown(table, testResults);\r", "+\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)result;\r", "+\t\t\t\t\t\tdoEvaluator.setRuntimeContext(runtimeContext);\r", "+\t\t\t\t\t\tdoEvaluator.interpretInFlow(new Table(row),testResults);\r", "-\t\t\t\t\t\tinterpretEvaluator((Evaluator)result,new Table(row),testResults);\r", "+\t\t\t\t\t\tEvaluator evaluator = (Evaluator)result;\r", "+\t\t\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "+\t\t\t\t\t\tinterpretEvaluator(evaluator,new Table(row),testResults);\r", "-\t\t\t\t\t} else if (getAlienTraverseHandler().isAlienTraverse(result)) {\r", "-\t\t\t\t\t\tgetAlienTraverseHandler().doTable(result, new Table(row),testResults,this);\r", "+\t\t\t\t\t} else if (result instanceof Fixture) {\r", "+\t\t\t\t\t\tgetFitHandler().doTable(result, new Table(row),testResults,this);\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "cd8a7b7e282af1b148dc7db7065ac623", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "6886034804bf527a2a789b2e2f2bfbc0", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
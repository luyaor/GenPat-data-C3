{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \t\r \t@Test\r \tpublic void innerTableIsRun()", "fileName": "test/fitlibrary/flow/TestDoFlowWithNestedTables.java", "methodNumberAfterChange": 1, "commitBeforeChange": "2a76716f62b24ecab03bf4f48402a73ac38ebe01", "diff": ["-\t\tfinal GenericTypedObject typedResult1 = new GenericTypedObject(new DoTraverse(\"s\"));\r", "-\t\tfinal GenericTypedObject typedResult2 = new GenericTypedObject(new DoTraverse(\"t\"));\r", "-\t\tfinal GenericTypedObject genS = new GenericTypedObject(\"s\");\r", "-\t\tfinal GenericTypedObject genT = new GenericTypedObject(\"t\");\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\toneOf(flowEvaluator).interpretRow(firstRow,testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\toneOf(scopeStack).push(genS);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", firstRow, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", firstRow, testResults);\r", "-\t\t\t\r", "-\t\t\toneOf(scopeStack).currentState(); will(returnValue(scopeState));\r", "-\t\t\t\r", "-\t\t\toneOf(flowEvaluator).interpretRow(innerRow,testResults);\r", "-\t\t\t  will(returnValue(typedResult2));\r", "-\t\t\toneOf(scopeStack).push(genT);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", innerRow, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", firstRow, testResults);\r", "-\t\t\t\r", "-\t\t\toneOf(scopeState).restore();\r", "+\t\tfinal String s = \"s\";\r", "+\t\tfinal String t = \"t\";\r", "+\t\tfinal Object doS = new DoTraverse(s);\r", "+\t\tfinal Object doT = new DoTraverse(t);\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfStorytest(); will(returnValue(list(genT,genS)));\r", "-\t\t\toneOf(tableListener).tableFinished(table);\r", "-\t\t}});\r", "-\t\tdoFlow.runStorytest(tables,tableListener);\r", "+\t\tfinal Table table = tables.at(0);\r", "+\t\tdriver.startingOnTable(table);\r", "+\t\tdriver.interpretingRowReturning(table.at(0), doS);\r", "+\t\tdriver.pushingObjectOnScopeStack(s);\r", "+\t\tdriver.callingSetUpOn(s,table.at(0));\r", "+\t\tfinal IScopeState scopeState = driver.startingOnInnerTablesWithCurrentScopeState();\r", "+\t\t\r", "+\t\tfinal Table innerTable = table.at(1).at(0).at(0);\r", "+\t\tdriver.startingOnTable(innerTable);\r", "+\t\tdriver.interpretingRowReturning(innerTable.at(0), doT);\r", "+\t\tdriver.pushingObjectOnScopeStack(t);\r", "+\t\tdriver.callingSetUpOn(t,innerTable.at(0));\r", "+\t\tdriver.restoringScopeGiving(scopeState,list(t));\r", "+\t\tdriver.callingTearDownOn(t, innerTable.at(0));\r", "+\t\t\r", "+\t\tdriver.poppingScopeStackAtEndOfLastTableGiving(list(s));\r", "+\t\tdriver.callingTearDownOn(s, table.at(0));\r", "+\t\tdriver.finishingTable(table);\r", "+\r", "+\t\tdriver.runStorytest(tables);\r"], "commitAfterChange": "5ba818354648ea599f271f8106e1431db9c61d96", "signatureAfterChange": "\r \t\r \t@Test\r \tpublic void innerTableIsRun()", "id": "5d60272fca076def33b99d49d1d0ee54", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \r \tprivate void verifyWithEvaluator(final SuiteEvaluator suiteEvaluator)", "fileName": "test/fitlibrary/flow/TestDoFlowWithSuiteEvaluator.java", "methodNumberAfterChange": 1, "commitBeforeChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "diff": ["-\t\tfinal GenericTypedObject typedResult1 = new GenericTypedObject(suiteEvaluator);\r", "+\t\tTable table1 = storytest1.at(0);\r", "+\t\tdriver.startingOnTable(table1);\r", "+\t\tdriver.interpretingRowReturning(table1.at(0), suiteEvaluator);\r", "+\t\tdriver.injectingWithRuntime(suiteEvaluator);\r", "+\t\tdriver.callingSuiteSetUpOn(suiteEvaluator,table1.at(0));\r", "+\t\tdriver.pushingObjectOnScopeStack(suiteEvaluator);\r", "+\t\tdriver.callingSetUpOn(suiteEvaluator, table1.at(0));\r", "+\t\tdriver.poppingScopeStackAtEndOfLastTable(list());\r", "+\t\tdriver.finishingTable(table1);\r", "+\t\tdriver.runStorytest(storytest1);\r", "-\t\tstorytestWithOneTableIsRunWithoutError(storytest1,runtime);\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\tallowing(tableListener).getTestResults(); will(returnValue(testResults));\r", "-\r", "-\t\t\tallowing(suiteEvaluator).setRuntimeContext(runtime);\r", "-\t\t\toneOf(flowEvaluator).interpretRow(table1.at(0),testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\tallowing(suiteEvaluator).getSystemUnderTest(); will(returnValue(null));\r", "-\t\t\toneOf(setUpTearDown).callSuiteSetUp(suiteEvaluator, table1.at(0), testResults);\r", "-\t\t\toneOf(scopeStack).push(typedResult1);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(suiteEvaluator, table1.at(0), testResults);\r", "-\t\t}});\r", "-\t\tdoFlow.runStorytest(storytest1,tableListener);\r", "-\r", "-\t\tstorytestWithOneTableIsRunWithoutError(storytest2,runtimeCopy);\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\toneOf(flowEvaluator).setRuntimeContext(runtimeCopy);\r", "-\t\t\toneOf(suiteEvaluator).getCopyOfRuntimeContext(); will(returnValue(runtimeCopy));\r", "-\t\t\tallowing(flowEvaluator).getSystemUnderTest(); will(returnValue(null));\r", "-\r", "-\t\t\toneOf(flowEvaluator).interpretRow(table2.at(0),testResults);\r", "-\t\t\t  will(returnValue(GenericTypedObject.NULL));\r", "-\t\t}});\r", "-\t\tdoFlow.runStorytest(storytest2,tableListener);\r", "-\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\toneOf(setUpTearDown).callSuiteTearDown(with(suiteEvaluator),with(any(TestResults.class)));\r", "-\t\t}});\r", "-\t\tdoFlow.exit();\r", "+\t\tTable table2 = storytest2.at(0);\r", "+\t\tRuntimeContextInternal runtimeCopy = driver.startingStorytestWithSuite(suiteEvaluator);\r", "+\t\tdriver.startingOnTable(table2,runtimeCopy);\r", "+\t\tString s = \"s\";\r", "+\t\tdriver.interpretingRowReturning(table2.at(0),new DoTraverse(s),runtimeCopy);\r", "+\t\tdriver.pushingObjectOnScopeStack(s);\r", "+\t\tdriver.callingSetUpOn(s, table2.at(0));\r", "+\t\tdriver.poppingScopeStackAtEndOfLastTable(runtimeCopy,list(s));\r", "+\t\tdriver.callingTearDownOn(s, table2.at(0));\r", "+\t\tdriver.finishingTable(table2,runtimeCopy);\r", "+\t\tdriver.runStorytest(storytest2);\r", "+\t\t\r", "+\t\tdriver.callingSuiteTearDownOn(suiteEvaluator);\r", "+\t\tdriver.exit();\r", "+\t\t\r"], "commitAfterChange": "2a76716f62b24ecab03bf4f48402a73ac38ebe01", "signatureAfterChange": "\r \r \tprivate void verifyWithEvaluator(final SuiteEvaluator suiteEvaluator)", "id": "e0d1e2e466db778aed10539c6a8f29cd", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "c15352e67fa55fcd0bafcc2425a6adc7", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
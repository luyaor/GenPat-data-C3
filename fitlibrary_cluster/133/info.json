{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r     public Option<Object> interpretSimpleRow(Row row, TestResults testResults, DoCaller[] actions, Fixture fixtureByName) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 12, "commitBeforeChange": "912f2299cb68da9d49ecfc90590037db64cfcc0e", "diff": ["-    public Option<Object> interpretSimpleRow(Row row, TestResults testResults, DoCaller[] actions, Fixture fixtureByName) throws Exception {\r", "-\t\tOption<Object> result = pickCaller(actions, row, testResults);\r", "+    public Option<TypedObject> interpretSimpleRow(Row row, TestResults testResults, DoCaller[] actions, Fixture fixtureByName) throws Exception {\r", "+\t\tOption<TypedObject> result = pickCaller(actions, row, testResults);\r", "-\t\t\tOption<Object> seqResult = trySequenceCall(row, testResults, fixtureByName);\r", "+\t\t\tOption<TypedObject> seqResult = trySequenceCall(row, testResults, fixtureByName);\r"], "commitAfterChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "signatureAfterChange": "\r     public Option<TypedObject> interpretSimpleRow(Row row, TestResults testResults, DoCaller[] actions, Fixture fixtureByName) throws Exception", "id": "2a21428f215e1fa2d2125ab422c952cc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 14, "signatureBeforeChange": "\r     private Option<Object> pickCaller(DoCaller[] actions, Row row, TestResults testResults) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 14, "commitBeforeChange": "912f2299cb68da9d49ecfc90590037db64cfcc0e", "diff": ["-    private Option<Object> pickCaller(DoCaller[] actions, Row row, TestResults testResults) throws Exception {\r", "+    private Option<TypedObject> pickCaller(DoCaller[] actions, Row row, TestResults testResults) throws Exception {\r", "-\t\t\t\tObject result = actions[i].run(row, testResults);\r", "+\t\t\t\tTypedObject result = actions[i].run(row, testResults);\r", "-\t\t\t\treturn new Some<Object>(result);\r", "+\t\t\t\treturn new Some<TypedObject>(result);\r"], "commitAfterChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "signatureAfterChange": "\r     private Option<TypedObject> pickCaller(DoCaller[] actions, Row row, TestResults testResults) throws Exception", "id": "8d39999ce06249ce89cd3423bf613844", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "37d2e56b94dc43c8e85849dca4c9fbfe", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
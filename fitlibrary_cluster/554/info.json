{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsFailWithTrueResult() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 2, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "-\tpublic void reportsFailWithTrueResult() throws Exception {\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);will(returnValue(true));\r", "-\t\t\tone(firstCell).fail(testResults);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.PASSES_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t}\r", "+\t@Test\r", "+\tpublic void falseWithTrueResult() throws Exception {\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).runWithNoColouring(); will(returnValue(true));\r", "+\t\t}});\r", "+\t\tassertThat(globalActionScope.not(action),is(false));\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test\r \tpublic void falseWithTrueResult() throws Exception", "id": "7d89500bb8a0c65fc4fc81e17c20b83d", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsErrorWithParseExceptionThrown() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 1, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "-\tpublic void reportsErrorWithParseExceptionThrown() throws Exception {\r", "-\t\tfinal BadNumberException exception = new BadNumberException();\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);\r", "-\t\t\t  will(throwException(exception));\r", "-\t\t\tone(initialRow).error(testResults,exception);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.ERROR_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t@Test\r", "+\tpublic void trueWithException() throws Exception {\r", "+\t\t\tone(action).runWithNoColouring(); will(throwException(new BadNumberException()));\r", "+\t\tassertThat(globalActionScope.not(action),is(true));\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test\r \tpublic void trueWithException() throws Exception", "id": "c664c805ab57a8bd4c98a724e0124c52", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "5dcd1c28b6f15ab5cffde9f8632bf954", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
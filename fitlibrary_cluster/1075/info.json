{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/xref/CrossReferenceFixture.java", "methodNumberAfterChange": 1, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\t\ttable.elementAt(0).elementAt(0).pass(testResults);\r", "+\t\t\ttable.at(0).at(0).pass(testResults);\r", "-\t\t\ttable.elementAt(0).elementAt(0).error(testResults, e);\r", "+\t\t\ttable.at(0).at(0).error(testResults, e);\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "4a6c2c6eebce8b8a85f04d873d93ca39", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tprivate void interpret(Row row, Map<Object,Object> copiedMap, Parser keyParser2, TestResults testResults)", "fileName": "src/fitlibrary/collection/map/MapTraverse.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\t\tObject key = keyParser2.parseTyped(row.elementAt(0),testResults).getSubject();\r", "+\t\t\tObject key = keyParser2.parseTyped(row.at(0),testResults).getSubject();\r", "-\t\t\t\trow.elementAt(0).expectedElementMissing(testResults);\r", "+\t\t\t\trow.at(0).expectedElementMissing(testResults);\r", "-\t\t\t\tif (valueParser3.matches(row.elementAt(1),value,testResults))\r", "+\t\t\t\tif (valueParser3.matches(row.at(1),value,testResults))\r", "-\t\t\t\t\trow.elementAt(1).fail(testResults,valueParser3.show(value),this);\r", "+\t\t\t\t\trow.at(1).fail(testResults,valueParser3.show(value),this);\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \tprivate void interpret(Row row, Map<Object,Object> copiedMap, Parser keyParser2, TestResults testResults)", "id": "5dd039b3a7740644c6e3ee2f5e9ff815", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \tprivate void processMultiDefinedAction(Table headerTable, Tables body)", "fileName": "src/fitlibrary/DefineAction.java", "methodNumberAfterChange": 7, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\tString definedActionName = headerTable.elementAt(0).elementAt(0).text();\r", "+\t\tString definedActionName = headerTable.at(0).at(0).text();\r", "-\t\tRow parametersRow = headerTable.elementAt(1);\r", "+\t\tRow parametersRow = headerTable.at(1);\r", "-\t\t\tString parameter = parametersRow.elementAt(c).text();\r", "+\t\t\tString parameter = parametersRow.at(c).text();\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \tprivate void processMultiDefinedAction(Table headerTable, Tables body)", "id": "79ae40d0981b7b587204c59ae53a7d98", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \t@Test public void setColumnSpanWithMultipleCellsWithAndWithoutColumnSpanSetAddToTheColumnSpanOfLastCell() throws Exception", "fileName": "test/fitlibrary/table/TestRowOnParse.java", "methodNumberAfterChange": 8, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\tassertThat(row.elementAt(0).getColumnSpan(),is(4));\r", "-\t\tassertThat(row.elementAt(1).getColumnSpan(), is(1));\r", "-\t\tassertThat(row.elementAt(2).getColumnSpan(),is(2));\r", "-\t\tassertThat(row.elementAt(3).getColumnSpan(),is(8));\r", "+\t\tassertThat(row.at(0).getColumnSpan(),is(4));\r", "+\t\tassertThat(row.at(1).getColumnSpan(), is(1));\r", "+\t\tassertThat(row.at(2).getColumnSpan(),is(2));\r", "+\t\tassertThat(row.at(3).getColumnSpan(),is(8));\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Test public void setColumnSpanWithMultipleCellsWithAndWithoutColumnSpanSetAddToTheColumnSpanOfLastCell() throws Exception", "id": "8fb9cc7b33720a891dd721772c47ef25", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r     public void testTable0Exception()", "fileName": "test/fitlibrary/table/TestParseTables.java", "methodNumberAfterChange": 5, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-        Table table0 = tables.elementAt(0);\r", "+        Table table0 = tables.at(0);\r", "-        assertTrue(table0.elementAt(0).elementAt(0).hadError());\r", "-        assertTrue(table0.elementAt(0).text(0,doFixture).startsWith(\"1java.lang.RuntimeException: Forced\"));\r", "+        assertTrue(table0.at(0).at(0).hadError());\r", "+        assertTrue(table0.at(0).text(0,doFixture).startsWith(\"1java.lang.RuntimeException: Forced\"));\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r     public void testTable0Exception()", "id": "d055feba96729b2b315e6ad12d65e9d5", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r     private boolean keyed(Table table)", "fileName": "src/fitlibraryGeneric/set/SetParser2.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-    \treturn (table.elementAt(0).elementExists(0) &&\r", "-    \t\t\ttable.elementAt(0).text(0,evaluator).toLowerCase().equals(\"key\")) ||\r", "-    \t\t\t( table.elementAt(0).elementExists(1) &&\r", "-    \t\t\t\t\ttable.elementAt(0).text(1,evaluator).toLowerCase().equals(\"key\"));\r", "+    \treturn (table.at(0).elementExists(0) &&\r", "+    \t\t\ttable.at(0).text(0,evaluator).toLowerCase().equals(\"key\")) ||\r", "+    \t\t\t( table.at(0).elementExists(1) &&\r", "+    \t\t\t\t\ttable.at(0).text(1,evaluator).toLowerCase().equals(\"key\"));\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r     private boolean keyed(Table table)", "id": "da0df676310128c89893b045691bc808", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "6c69f58e8f83d68c17706f3f67334978", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
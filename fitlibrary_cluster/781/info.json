{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 14, "signatureBeforeChange": "\r     private static CalledMethodTarget searchForMethodTargetUpOuterContext(String name, Evaluator outerContext, Evaluator evaluator)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 15, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-    private static CalledMethodTarget searchForMethodTargetUpOuterContext(String name, Evaluator outerContext, Evaluator evaluator) {\r", "-        if (outerContext == null)\r", "-            return null;\r", "-        CalledMethodTarget target = null;\r", "-        if (outerContext.getSystemUnderTest() != null) {\r", "-            TypedObject typedObject = outerContext.getTypedSystemUnderTest();\r", "-\t\t\ttarget = typedObject.optionallyFindGetterOnTypedObject(name,evaluator);\r", "-        }\r", "-        if (target == null)\r", "-            return searchForMethodTargetUpOuterContext(name,outerContext.getNextOuterContext(),evaluator);\r", "-        return target;\r", "-    }\r", "+    private CalledMethodTarget searchForMethodTargetUpOuterContext(String name, Evaluator evaluator) {\r", "+\t\tIScope scope = scopeOf(evaluator);\r", "+\t\tfor (TypedObject typedObject : scope.objectsForLookup()) {\r", "+\t\t\tCalledMethodTarget target = typedObject.new_optionallyFindGetterOnTypedObject(name,evaluator);\r", "+\t\t\tif (target != null)\r", "+\t\t\t\treturn target;\r", "+\t\treturn null;\r", "+    }\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r     private CalledMethodTarget searchForMethodTargetUpOuterContext(String name, Evaluator evaluator)", "id": "1ec536c7bf2dc5058840ac87899c6d53", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findSetter(String propertyName, Evaluator evaluator)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 10, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic CalledMethodTarget findSetter(String propertyName, Evaluator evaluator) {\r", "-\t\tString methodName = ExtendedCamelCase.camel(\"set \"+propertyName);\r", "-\t\tString arg = camel(propertyName);\r", "-\t\tTypedObject typedSubject = evaluator.getTypedSystemUnderTest();\r", "-    \tif (typedSubject == null)\r", "-    \t\tthrow new NoSystemUnderTestException();\r", "-\t\tCalledMethodTarget target = typedSubject.optionallyFindMethodOnTypedObject(methodName,1,evaluator, true);\r", "-\t\tif (target != null)\r", "-\t\t\treturn target;\r", "-\t\tthrow new MissingMethodException(signatures(\"public void \"+methodName+\"(ArgType \"+arg+\") { }\"),identifiedClassesInSUTChain(typedSubject.getSubject()));\r", "+\tpublic CalledMethodTarget findSetterOnSut(String propertyName, Evaluator evaluator) {\r", "+\t\treturn findMethodOnSut(camel(\"set \"+propertyName), 1, evaluator,\"ArgType \"+camel(propertyName));\r", "+\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget findSetterOnSut(String propertyName, Evaluator evaluator)", "id": "a22c9858cdc3d68c1650ef914c437276", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "2864e6972856b45e7a9ffdfbf5c22733", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findSpecificMethodOrPropertyGetter(String name,\r \t\t\tint argCount, Evaluator evaluator, List<String> signatures) throws Exception", "fileName": "src/fitlibrary/typed/NonGenericTypedObject.java", "methodNumberAfterChange": 5, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic CalledMethodTarget findSpecificMethodOrPropertyGetter(String name,\r", "-\t\t\tint argCount, Evaluator evaluator, List<String> signatures) throws Exception {\r", "-\t\tCalledMethodTarget result = optionallyFindMethodOnTypedObject(name,\r", "-\t\t\t\targCount, evaluator, true);\r", "-\t\tif (result != null)\r", "-\t\t\treturn result;\r", "-\t\ttry {\r", "-\t\t\tif (argCount == 0)\r", "-\t\t\t\treturn findGetterOnTypedObject(name, evaluator);\r", "-\t\t} catch (MissingMethodException e) {\r", "-\t\t\t// Provide a more general error message\r", "-\t\t}\r", "-\t\tthrow new MissingMethodException(signatures, PlugBoard.lookupTarget\r", "-\t\t\t\t.identifiedClassesInSUTChain(subject));\r", "+\tpublic Option<CalledMethodTarget> new_findSpecificMethod(String name, int argCount, Evaluator evaluator) {\r", "+\t\tOption<Closure> methodClosureOption = new_findMethodClosure(name, argCount);\r", "+\t\tif (methodClosureOption.isSome())\r", "+\t\t\treturn new Some<CalledMethodTarget>(methodTargetFactory.createCalledMethodTarget(methodClosureOption.get(), evaluator));\r", "+\t\treturn None.none();\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic Option<CalledMethodTarget> new_findSpecificMethod(String name, int argCount, Evaluator evaluator)", "id": "6938a78ea88619a94ffe4a785446113e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tpublic String runGiving(String testDirectoryName, String reportDirectoryName) throws Exception", "fileName": "src/fitlibrary/runner/FolderRunnerFixture.java", "methodNumberAfterChange": 1, "commitBeforeChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "diff": ["-\tpublic String runGiving(String testDirectoryName, String reportDirectoryName) throws Exception {\r", "-        long start = System.currentTimeMillis();\r", "-\t\tString separator = File.separator;\r", "-\t\tString TESTFILES = CREATIONS+separator+\"MyOwnFitReleases\"+separator;\r", "-\t\tString theCounts = new FolderRunner().run(TESTFILES+testDirectoryName,TESTFILES+reportDirectoryName).getCounts();\r", "-\t\tString fileName = TESTFILES+reportDirectoryName+separator+\"reportIndex.html\";\r", "-        long end = System.currentTimeMillis();\r", "-        return urlFile(fileName,theCounts)+\" in \"+(end-start)/1000+\" seconds\";\r", "+\r", "+\tpublic boolean runGiving(String testDirectoryName, String reportDirectoryName) throws Exception {\r", "+\t\tDifferenceInterface previousDifferenceStrategy = Traverse.getDifferenceStrategy();\r", "+\t\ttry {\r", "+\t\t\tlong start = System.currentTimeMillis();\r", "+\t\t\tReport run = new FolderRunner().run(TESTFILES + testDirectoryName,\r", "+\t\t\t\t\tTESTFILES + reportDirectoryName);\r", "+\t\t\tString theCounts = run.getCounts();\r", "+\t\t\tlong end = System.currentTimeMillis();\r", "+\t\t\t// showAfterTable(urlFile(TESTFILES+reportDirectoryName+File.separator+\"reportIndex.html\",\"report\"));\r", "+\t\t\tshowAfterTable(theCounts + \" in \" + (end - start) / 1000 + \" seconds\");\r", "+\t\t\treturn !run.failing();\r", "+\t\t} finally {\r", "+\t\t\tTraverse.setDifferenceStrategy(previousDifferenceStrategy);\r", "+\t\t}\r"], "commitAfterChange": "d5585b9bd9597ec67ca4eaebd1dd7d580af72cbc", "signatureAfterChange": "\r \r \tpublic boolean runGiving(String testDirectoryName, String reportDirectoryName) throws Exception", "id": "89031c1ac3f64a2364e3ff2542cd84a6", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "0a5e559a4d39eee0a6f45ea14458a0ce", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
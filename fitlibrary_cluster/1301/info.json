{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 73, "signatureBeforeChange": "\r \tpublic void set(final Row row, TestResults testResults) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 74, "commitBeforeChange": "9069de478dc17e7793f2685307ecb6fa153f06e7", "diff": ["-\tpublic void set(final Row row, TestResults testResults) throws Exception {\r", "-\t\tint less = 3;\r", "-\t\tif (row.size() < less)\r", "-\t\t\tthrow new MissingCellsException(\"set\");\r", "-\t\ttry {\r", "-\t\t\tif (row.text(2, this).equals(\"=\")) {\r", "-\t\t\t\tsetDynamicVariable(row.text(1, this), Ognl.getValue(row.text(3, this), null));\r", "-\t\t\t\treturn;\r", "-\t\t\t}\r", "-\t\t\tObject result = findMethodFromRow222(row,2,less).invokeForSpecial(row.rowFrom(3),testResults,true,row.cell(0));\r", "-\t\t\tsetDynamicVariable(row.text(1,this), result);\r", "-\t\t} catch (IgnoredException e) {\r", "-\t\t\t// No result, so ignore\r", "-\t\t}\r", "+\tpublic TwoStageSpecial set(final IRow row) throws Exception {\r", "+\t\treturn prefixSpecialAction.set(row);\r"], "commitAfterChange": "51f903b3dbcdee8eb97cb2b40932e27a74c2a97f", "signatureAfterChange": "\r \tpublic TwoStageSpecial set(final IRow row) throws Exception", "id": "10e9514fc6d058dfb212db0dd7ce289c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 74, "signatureBeforeChange": "\r \tpublic void setSymbolNamed(final Row row, TestResults testResults) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 75, "commitBeforeChange": "9069de478dc17e7793f2685307ecb6fa153f06e7", "diff": ["-\tpublic void setSymbolNamed(final Row row, TestResults testResults) throws Exception {\r", "-\t\tint less = 3;\r", "-\t\tif (row.size() < less)\r", "-\t\t\tthrow new MissingCellsException(\"set\");\r", "-\t\ttry {\r", "-\t\t\tif (row.text(2, this).equals(\"=\")) {\r", "-\t\t\t\tFixture.setSymbol(row.text(1, this), Ognl.getValue(row.text(3, this), null));\r", "-\t\t\t\treturn;\r", "-\t\t\t}\r", "-\t\t\tObject result = findMethodFromRow222(row,2,less).invokeForSpecial(row.rowFrom(3),testResults,true,row.cell(0));\r", "-\t\t\tFixture.setSymbol(row.text(1,this), result);\r", "-\t\t} catch (IgnoredException e) {\r", "-\t\t\t// No result, so ignore\r", "-\t\t}\r", "+\tpublic TwoStageSpecial setSymbolNamed(final IRow row) throws Exception {\r", "+\t\treturn prefixSpecialAction.setSymbolNamed(row);\r"], "commitAfterChange": "51f903b3dbcdee8eb97cb2b40932e27a74c2a97f", "signatureAfterChange": "\r \tpublic TwoStageSpecial setSymbolNamed(final IRow row) throws Exception", "id": "54e865c09f1b2238124dc560af119cbb", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 66, "signatureBeforeChange": "\r \tpublic void check(final Row row, TestResults testResults) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 66, "commitBeforeChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "diff": ["-\tpublic void check(final Row row, TestResults testResults) throws Exception {\r", "-\t\tint less = 3;\r", "-\t\tif (row.size() < less)\r", "-\t\t\tthrow new MissingCellsException(\"DoTraverseCheck\");\r", "-\t\tCalledMethodTarget target = findMethodFromRow(row,1,less);\r", "-\t\tCell expectedCell = row.last();\r", "-\t\tif (gatherExpectedForGeneration)\r", "-\t\t\texpectedResult = target.getResult(expectedCell,testResults);\r", "-\t\ttarget.invokeAndCheckForSpecial(row.rowFrom(2),expectedCell,testResults,row,row.cell(0));\r", "+//\t}\r", "+\tpublic Option<LazySpecial> check(final IRow row, final TestResults testResults) throws Exception {\r", "+\t\treturn new SpecialAction(this).check(row, testResults);\r"], "commitAfterChange": "12148fc44971a9675907d16fb4f5c02ec935596d", "signatureAfterChange": "\r \tpublic Option<LazySpecial> check(final IRow row, final TestResults testResults) throws Exception", "id": "8df80df2733647331a85380d5049c25b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "c110a9479c0b3b1892f6ee363530bc60", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 14, "signatureBeforeChange": "\r \t\r \t\r \tprivate void verifyScopePush(final Object result, final Object sut)", "fileName": "test/fitlibrary/flow/TestDoFlow.java", "methodNumberAfterChange": 12, "commitBeforeChange": "441d5688763570bf9a676799b77c2d483b043423", "diff": ["+\t\tfinal GenericTypedObject typedSut = new GenericTypedObject(sut);\r", "-\t\t\texactly(2).of(scopeStack).push(new GenericTypedObject(sut));\r", "+\t\t\texactly(2).of(scopeStack).push(typedSut);\r", "+\t\t\texactly(2).of(setUpTearDown).callSetUpSutChain(sut, row1, testResults);\r", "+\t\t\texactly(2).of(setUpTearDown).callTearDownSutChain(sut, row1, testResults);\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfTable(); will(returnValue(list(new GenericTypedObject(sut))));\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfStorytest(); will(returnValue(list(new GenericTypedObject(sut))));\r", "+\t\t\toneOf(scopeStack).poppedAtEndOfTable(); will(returnValue(list(typedSut)));\r", "+\t\t\toneOf(scopeStack).poppedAtEndOfStorytest(); will(returnValue(list(typedSut)));\r"], "commitAfterChange": "70b9358616a949679d07e6fedd212fb1df2467e5", "signatureAfterChange": "\r \t\r \t\r \tprivate void verifyScopePush(final Object result, final Object sut)", "id": "8074ab7f604824d0ce6b03b513399bcc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/spec/SpecifyFixture2.java", "methodNumberAfterChange": 1, "commitBeforeChange": "360766661a8ffa74da803b868c7287cb9ef515ab", "diff": ["+\t}\r", "-\t\tTables actualTables = table.row(0).cell(0).getEmbeddedTables();\r", "-\t\tTables expectedTables = expectedOf(table).getEmbeddedTables();\r", "-\t\tnew BatchFitLibrary().doStorytest(actualTables);\r", "+\t\t\tTables actualTables = table.elementAt(0).elementAt(0).getEmbeddedTables();\r", "+\t\t\tCell expectedCell = expectedOf(table);\r", "+\t\t\tTables expectedTables = expectedCell.getEmbeddedTables();\r", "+\t\t\trunner.doStorytest(actualTables);\r", "+\t\t\tif (reportsEqual(\"\",actualTables,expectedTables)) {\r", "+\t\t\t\texpectedCell.pass(testResults);\r", "+\t\t\t\ttestResults.getCounts().right += cellCount(actualTables) - 1;\r", "+\t\t\t}\r"], "commitAfterChange": "82ea1ae4b8bc2afce333bb1224107b9b59ed21c5", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "db5584c186221dff182ae0c714a08ccf", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "527b357a55b6c00d4335f31caf8372a7", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
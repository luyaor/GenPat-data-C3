{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \r \tprivate void verifyWithEvaluator(final Evaluator evaluator, final Evaluator mockEvaluator)", "fileName": "test/fitlibrary/flow/TestDoFlowWithEvaluator.java", "methodNumberAfterChange": 5, "commitBeforeChange": "45400291a9cb47b358ca00f896a8c7e188a58f80", "diff": ["-\tprivate void verifyWithEvaluator(final Evaluator evaluator, final Evaluator mockEvaluator) {\r", "-\t\tfinal GenericTypedObject typedResult1 = new GenericTypedObject(evaluator);\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\tallowing(tableListener).getTestResults(); will(returnValue(testResults));\r", "-\t\t\toneOf(runtime).pushTestResults(with(any(TestResults.class)));\r", "-\t\t\tallowing(runtime).isAbandoned(with(any(TestResults.class))); will(returnValue(false));\r", "+\tprivate void verifyWithEvaluator(Evaluator evaluator, Evaluator mockEvaluator) {\r", "+\t\tdoFlowDriver.showTearDown = true;\r", "+\t\tTable table0 = tables.at(0);\r", "+\t\t\r", "+\t\tdoFlowDriver.startingOnTable(table0);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(0), evaluator);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(evaluator);\r", "+\t\tdoFlowDriver.callingSetUpOn(evaluator,table0.at(0));\r", "+\t\tdoFlowDriver.interpretingEvaluator(mockEvaluator,table0);\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfLastTable(list(evaluator));\r", "+\t\tdoFlowDriver.callingTearDownOn(evaluator, table0.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table0);\r", "-\t\t\toneOf(runtime).setCurrentTable(table);\r", "-\t\t\toneOf(runtime).setCurrentRow(table.at(0));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(table.at(0),testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(evaluator, table.at(0), testResults);\r", "-\t\t\toneOf(scopeStack).push(typedResult1);\r", "-\t\t\toneOf(mockEvaluator).interpretAfterFirstRow(table, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(evaluator, table.at(0), testResults);\r", "-\t\t\toneOf(runtime).popTestResults();\r", "-\t\t}});\r", "-\t\tdoFlow.runTable(table,tableListener);\r", "+\t\tdoFlowDriver.runStorytest(tables);\r"], "commitAfterChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "signatureAfterChange": "\r \r \tprivate void verifyWithEvaluator(Evaluator evaluator, Evaluator mockEvaluator)", "id": "6b96bc71c0907c9b7f8d73b52c09dfd1", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic GenericFinder(GenericTyped typed, Evaluator evaluator)", "fileName": "src/fitlibraryGeneric/object/GenericFinder.java", "methodNumberAfterChange": 0, "commitBeforeChange": "5327f82710d64a8962e506a103d189fd75c5dbba", "diff": ["-\t\tfinal String findName = ExtendedCamelCase.camel(FIND+\" \"+shortClassName);\r", "+\t\tfinal String findName = evaluator.getRuntimeContext().extendedCamel(FIND+\" \"+shortClassName);\r", "-\t\tfinal String showMethodName = ExtendedCamelCase.camel(SHOW+\" \"+shortClassName);\r", "-\t\tList<Class<?>> potentialClasses = PlugBoard.lookupTarget.possibleClasses(evaluator.getScope());\r", "+\t\tfinal String showMethodName = evaluator.getRuntimeContext().extendedCamel(SHOW+\" \"+shortClassName);\r", "+\t\tLookupMethodTarget lookupTarget = PlugBoard.lookupTarget;\r", "+\t\tList<Class<?>> potentialClasses = lookupTarget.possibleClasses(evaluator.getScope());\r", "-\t\tfindIntMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, findName, intArg);\r", "-\t\tfindStringMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, findName, stringArg);\r", "-\t\tshowMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, showMethodName, showArg);\r", "+\t\tfindIntMethod = lookupTarget.findFixturingMethod(evaluator, findName, intArg);\r", "+\t\tfindStringMethod = lookupTarget.findFixturingMethod(evaluator, findName, stringArg);\r", "+\t\tshowMethod = lookupTarget.findFixturingMethod(evaluator, showMethodName, showArg);\r", "-\t\t\tgenericFindStringMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, findName, genericStringArg);\r", "-\t\t\tgenericShowMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, showMethodName, genericShowArg);\r", "+\t\t\tgenericFindStringMethod = lookupTarget.findFixturingMethod(evaluator, findName, genericStringArg);\r", "+\t\t\tgenericShowMethod = lookupTarget.findFixturingMethod(evaluator, showMethodName, genericShowArg);\r"], "commitAfterChange": "fc04ff1c33cda53766142c18fa0ccb6a92e65b68", "signatureAfterChange": "\r \r \tpublic GenericFinder(GenericTyped typed, Evaluator evaluator)", "id": "f261c573072cff450e7a2d22f256106c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "8acd178e58586fecb46a931c8881c98e", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
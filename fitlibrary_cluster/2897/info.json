{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic PostFixSpecialCaller(Row row, DoTraverseInterpreter switchSetUp)", "fileName": "src/fitlibrary/traverse/workflow/caller/PostFixSpecialCaller.java", "methodNumberAfterChange": 0, "commitBeforeChange": "1a9b02fce576bf8c0ae1342055a0c5082b525445", "diff": ["-\t\t\tif (specialMethod != null) {\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tswitchSetUp.findMethodFromRow(row,0,3);\r", "-\t\t\t\t} catch (Exception e) {\r", "-\t\t\t\t\tsetProblem(e);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "+\t\t\tif (specialMethod != null)\r", "+\t\t\t\tfindMethodForInnerAction(row, switchSetUp);\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "signatureAfterChange": "\r \r \tpublic PostFixSpecialCaller(Row row, DoTraverseInterpreter switchSetUp)", "id": "0715561541239f2c1940d862f2a13db9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r \t@Override\r \tpublic void runStorytest(Tables tables, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/actor/DoFlowRunningActor.java", "methodNumberAfterChange": 1, "commitBeforeChange": "717d2de4dfe658dcecf82e33dc11aca3e5b12621", "diff": ["-\t\tDoFlowActor actor = new DoFlowActor(this);\r", "-\t\t\r", "-\t\tactor.endStorytest(); // Temporary, until threaded, when this will be done in exit() below.\r", "+\t\tactor.endStorytest();\r", "-\t\tactor.run();\r", "+\t\tnew Thread(actor).start();\r", "-\t\t\r", "-\t\t\r", "-//\t\tTestResults testResults = tableListener.getTestResults();\r", "-//\t\tlogger.trace(\"Running storytest\");\r", "-//\t\tresetToStartStorytest();\r", "-//\t\tfor (int t = 0; t < tables.size(); t++) {\r", "-//\t\t\tTable table = tables.at(t);\r", "-//\t\t\trunSingleTable(testResults, table);\r", "-//\t\t\tfinishTable(table, testResults);\r", "-//\t\t\taddAccumulatedFoldingText(table);\r", "-//\t\t\ttableListener.tableFinished(table);\r", "-//\t\t}\r", "-//\t\tTable errorTable = TableFactory.table(TableFactory.row(\"<i>Error in storytest tear down: </i>\"));\r", "-//\t\tfinishLastTable(errorTable, testResults);\r", "-//\t\taddAccumulatedFoldingText(errorTable);\r", "-//\t\tif (errorTable.size() > 1 || errorTable.at(0).size() > 1 || errorTable.at(0).at(0).hadError() || !errorTable.getTrailer().isEmpty()) {\r", "-//\t\t\terrorTable.setLeader(\"\\n<br/>\");\r", "-//\t\t\ttables.add(errorTable); // Needed just for embedded tables, as with SpecifyFixture.\r", "-//\t\t\ttableListener.tableFinished(errorTable);\r", "-//\t\t}\r", "-//\t\tlogger.trace(\"Finished storytest\");\r", "-//\t\ttableListener.storytestFinished();\r"], "commitAfterChange": "7f9594d4bf47c008bc43ec887c77a4b7e272ced0", "signatureAfterChange": "\r \r \t@Override\r \tpublic void runStorytest(Tables tables, ITableListener tableListener)", "id": "07d6b6c2ec548dd8b1623383e2c2fd3e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "ca01efd7ca676b864eb2409a04aa5c3f", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
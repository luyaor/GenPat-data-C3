{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \tpublic CalledMethodTarget optionallyFindMethodOnTypedObject(String name,\r \t\t\tint argCount, Evaluator evaluator, boolean includeSut)", "fileName": "src/fitlibrary/typed/NonGenericTypedObject.java", "methodNumberAfterChange": 8, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t}\r", "-\tpublic CalledMethodTarget optionallyFindMethodOnTypedObject(String name,\r", "-\t\t\tint argCount, Evaluator evaluator, boolean includeSut) {\r", "-\t\tClosure methodClosure = findMethodClosure(name, argCount, includeSut);\r", "-\t\t\treturn null;\r", "-\t\treturn new CalledMethodTarget(methodClosure, evaluator);\r", "+\t}\r", "+\tpublic CalledMethodTarget optionallyFindMethodOnTypedObject(String name, int argCount, Evaluator evaluator, boolean includeSut) {\r", "+\t\tOption<CalledMethodTarget> targetOption = new_findSpecificMethod(name,argCount,evaluator);\r", "+\t\tif (targetOption.isSome())\r", "+\t\t\treturn targetOption.get();\r", "+\t\treturn null;\r", "+\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget optionallyFindMethodOnTypedObject(String name, int argCount, Evaluator evaluator, boolean includeSut)", "id": "5aad2222adec5236e18deecda8396a53", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 10, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findMethod(String name, List<String> methodArgs, String returnType, Evaluator evaluator)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 9, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\tClosure result = asTypedObject(evaluator).findMethodForTypedObject(name,methodArgs.size());\r", "-\t\tif (result != null)\r", "-\t\t\treturn new CalledMethodTarget(result,evaluator);\r", "+\t\tint argCount = methodArgs.size();\r", "+\t\tIScope scope = scopeOf(evaluator);\r", "+\t\tfor (TypedObject typedObject : scope.objectsForLookup()) {\r", "+\t\t\tOption<CalledMethodTarget> target = typedObject.new_findSpecificMethod(name,argCount,evaluator);\r", "+\t\t\tif (target.isSome())\r", "+\t\t\t\treturn target.get();\r", "+\t\t}\r", "-\t\tthrow new MissingMethodException(signatures,identifiedClassesInOutermostContext(evaluator, true));\r", "+\t\tthrow new MissingMethodException(signatures,scope.possibleClasses());\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget findMethod(String name, List<String> methodArgs, String returnType, Evaluator evaluator)", "id": "6fbfe3340c50c30f5ec4f540e8b50ce3", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "3fbeeb36f714f557111e84ba581d8ba8", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
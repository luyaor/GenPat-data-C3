{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 10, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsErrorWithShowExceptionWhenErrorOnException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "-\tpublic void reportsErrorWithShowExceptionWhenErrorOnException() throws Exception {\r", "-\t\tfinal FitLibraryShowException show = new FitLibraryShowException(new Show(\"\"));\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);\r", "-\t\t\t  will(throwException(show));\r", "-\t\t\tone(initialRow).error(testResults,show);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.ERROR_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t}\r", "+\t@Test\r", "+\tpublic void trueWithShowException() throws Exception {\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).runWithNoColouring(); will(throwException(new InvocationTargetException(new FitLibraryShowException(new Show(\"abc\")))));\r", "+\t\t\tone(action).show(\"abc\");\r", "+\t\t}});\r", "+\t\tassertThat(globalActionScope.not(action),is(true));\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test\r \tpublic void trueWithShowException() throws Exception", "id": "217a60ca4ceb23cc86dc94ebdff241cb", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsErrorWithShowExceptionInIgnoredExceptionWhenErrorOnException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 6, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "-\tpublic void reportsErrorWithShowExceptionInIgnoredExceptionWhenErrorOnException() throws Exception {\r", "-\t\tfinal FitLibraryShowException show = new FitLibraryShowException(new Show(\"\"));\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);\r", "-\t\t\t  will(throwException(new IgnoredException(show)));\r", "-\t\t\tone(initialRow).error(testResults,show);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.ERROR_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t}\r", "+\t@Test\r", "+\tpublic void trueAndShownWithIgnoredExceptionWithEmbedded() throws Exception {\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).runWithNoColouring(); will(throwException(new IgnoredException(new BadNumberException())));\r", "+\t\t\tone(action).show(\"Invalid Number\");\r", "+\t\t}});\r", "+\t\tassertThat(globalActionScope.not(action),is(true));\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test\r \tpublic void trueAndShownWithIgnoredExceptionWithEmbedded() throws Exception", "id": "77f456d9d635923e504b14d892bb3517", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "690fdea2d1c7ac999ad111c53d506267", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"]}
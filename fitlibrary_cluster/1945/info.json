{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 9, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findTheMethod(String name, List<String> methodArgs, String returnType, Evaluator evaluator) throws Exception", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 12, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic CalledMethodTarget findTheMethod(String name, List<String> methodArgs, String returnType, Evaluator evaluator) throws Exception {\r", "-\t\tTypedObject typedObject = asTypedObject(evaluator);\r", "-\t\treturn typedObject.findSpecificMethodOrPropertyGetter(name,methodArgs.size(),evaluator,signatures);\r", "+\t}\r", "+\tprivate CalledMethodTarget findMethodOnSut(String methodName, int argCount, Evaluator evaluator, String arg) {\r", "+\t\tTypedObject typedObject = evaluator.getTypedSystemUnderTest();\r", "+\t\twhile (true) {\r", "+\t\t\tif (typedObject.isNull())\r", "+\t\t\t\tthrow new NoSystemUnderTestException();\r", "+\t\t\tOption<CalledMethodTarget> targetOption = typedObject.new_findSpecificMethod(methodName,argCount,evaluator);\r", "+\t\t\tif (targetOption.isSome())\r", "+\t\t\t\treturn targetOption.get();\r", "+\t\t\tif (typedObject instanceof Evaluator) {\r", "+\t\t\t\ttypedObject = ((Evaluator)typedObject).getTypedSystemUnderTest();\r", "+\t\t\t}\r", "+\t\t\telse if (typedObject.getSubject() instanceof DomainAdapter) {\r", "+\t\t\t\ttypedObject = new GenericTypedObject(((DomainAdapter)typedObject.getSubject()).getSystemUnderTest());\r", "+\t\t\t}\r", "+\t\t\telse break;\r", "+\t\t}\r", "+\t\tthrow new MissingMethodException(signatures(\"public void \"+methodName+\"(\"+arg+\") { }\"),scopeOf(evaluator).possibleClasses());\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate CalledMethodTarget findMethodOnSut(String methodName, int argCount, Evaluator evaluator, String arg)", "id": "15c3f0df3b7771d1c046c460cd82972f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r \tprivate CalledMethodTarget findMethodOnSut(String methodName, int argCount, Evaluator evaluator, String arg, String returnType)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 11, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\tprivate CalledMethodTarget findMethodOnSut(String methodName, int argCount, Evaluator evaluator, String arg, String returnType) {\r", "+\tprivate ICalledMethodTarget findMethodOnSut(String methodName, int argCount, Evaluator evaluator, String arg, String returnType) {\r", "-\t\t\tOption<CalledMethodTarget> targetOption = typedObject.new_findSpecificMethod(methodName,argCount,evaluator);\r", "+\t\t\tOption<ICalledMethodTarget> targetOption = typedObject.new_findSpecificMethod(methodName,argCount,evaluator);\r", "-\t\tthrow new MissingMethodException(signatures(\"public \"+returnType+\" \"+methodName+\"(\"+arg+\") { }\"),scopeOf(evaluator).possibleClasses());\r", "+\t\tthrow new MissingMethodException(signatures(\"public \"+returnType+\" \"+methodName+\"(\"+arg+\") { }\"),evaluator.getScope().possibleClasses());\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \tprivate ICalledMethodTarget findMethodOnSut(String methodName, int argCount, Evaluator evaluator, String arg, String returnType)", "id": "6b1356b9f123da7f530c1f4dfdb6a828", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findMethodInEverySecondCell(Evaluator evaluator, Row row, int allArgs) throws Exception", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\tpublic CalledMethodTarget findMethodInEverySecondCell(Evaluator evaluator, Row row, int allArgs) throws Exception {\r", "-\t\tint parms = allArgs / 2 + 1;\r", "-\t\tint argCount = (allArgs + 1) / 2;\r", "-\t\tString name = row.text(0,evaluator);\r", "-\t\tfor (int i = 1; i < parms; i++)\r", "-\t\t\tname += \" \"+row.text(i*2,evaluator);\r", "-\t\tCalledMethodTarget target = findTheMethodMapped(name,argCount,evaluator);\r", "-\t\ttarget.setEverySecond(true);\r", "+\t@Override\r", "+\tpublic ICalledMethodTarget findMethodByArity(Row row, int from, int upTo,\r", "+\t\t\tboolean doStyle, Evaluator evaluator) throws Exception {\r", "+\t\tActionSignature actionSignature = ActionSignature.create(row, from, upTo, doStyle, evaluator);\r", "+\t\tICalledMethodTarget target = findTheMethodMapped(actionSignature.name,actionSignature.arity,evaluator);\r", "+\t\ttarget.setEverySecond(doStyle);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Override\r \tpublic ICalledMethodTarget findMethodByArity(Row row, int from, int upTo,\r \t\t\tboolean doStyle, Evaluator evaluator) throws Exception", "id": "8721049a59ddd7475318e49e0983c482", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "8754374bd3bf36d72dd1f3984f1019ad", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \tpublic void parseDefinitions(TablesOnParse tables, DefineActionBodyConsumer consumer)", "fileName": "src/fitlibrary/definedAction/DefinedActionBodyCollector.java", "methodNumberAfterChange": 0, "commitBeforeChange": "a31639422a830880e68972b09ea7debebd2f084e", "diff": ["-\tpublic void parseDefinitions(TablesOnParse tables, DefineActionBodyConsumer consumer) {\r", "-\t\tTablesOnParse innerTables = tables;\r", "+\tpublic void parseDefinitions(Tables tables, DefineActionBodyConsumer consumer) {\r", "+\t\tif (!(tables instanceof TablesOnParse))\r", "+\t\t\tthrow new InvalidParameterException(\"New code needed for other Tables implementation\");\r", "+\t\tTables innerTables = tables;\r", "-\t\t\tTableOnParse table = tables.table(i);\r", "-\t\t\tTableOnParse previousTable = tables.table(i-1);\r", "-\t\t\tif (isHR(table.parse.leader) || isHR(previousTable.parse.trailer)) {\r", "-\t\t\t\ttable.parse.leader = \"\";\r", "-\t\t\t\tpreviousTable.parse.more = null;\r", "-\t\t\t\tpreviousTable.parse.trailer = \"\";\r", "+\t\t\tTable table = tables.table(i);\r", "+\t\t\tTable previousTable = tables.table(i-1);\r", "+\t\t\tif (isHR(table.getLeader()) || isHR(previousTable.getTrailer())) {\r", "+\t\t\t\ttable.parse().leader = \"\";\r", "+\t\t\t\tpreviousTable.parse().more = null;\r", "+\t\t\t\tpreviousTable.parse().trailer = \"\";\r", "-\t\t\t\tpreviousTable.parse.more = table.parse;\r", "-\t\t\t\tinnerTables = new TablesOnParse(table);\r", "+\t\t\t\tpreviousTable.parse().more = table.parse();\r", "+\t\t\t\tinnerTables = TableFactory.tables(table);\r", "-\t}\r"], "commitAfterChange": "2c6fd716f0ddbc6f8d43a941ccbb30e98b026f07", "signatureAfterChange": "\r \tpublic void parseDefinitions(Tables tables, DefineActionBodyConsumer consumer)", "id": "6ebb683d505c39b0719bf81fa83537c8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic GenericFinder(GenericTyped typed, Evaluator evaluator)", "fileName": "src/fitlibraryGeneric/object/GenericFinder.java", "methodNumberAfterChange": 0, "commitBeforeChange": "5327f82710d64a8962e506a103d189fd75c5dbba", "diff": ["-\t\tfinal String findName = ExtendedCamelCase.camel(FIND+\" \"+shortClassName);\r", "+\t\tfinal String findName = evaluator.getRuntimeContext().extendedCamel(FIND+\" \"+shortClassName);\r", "-\t\tfinal String showMethodName = ExtendedCamelCase.camel(SHOW+\" \"+shortClassName);\r", "-\t\tList<Class<?>> potentialClasses = PlugBoard.lookupTarget.possibleClasses(evaluator.getScope());\r", "+\t\tfinal String showMethodName = evaluator.getRuntimeContext().extendedCamel(SHOW+\" \"+shortClassName);\r", "+\t\tLookupMethodTarget lookupTarget = PlugBoard.lookupTarget;\r", "+\t\tList<Class<?>> potentialClasses = lookupTarget.possibleClasses(evaluator.getScope());\r", "-\t\tfindIntMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, findName, intArg);\r", "-\t\tfindStringMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, findName, stringArg);\r", "-\t\tshowMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, showMethodName, showArg);\r", "+\t\tfindIntMethod = lookupTarget.findFixturingMethod(evaluator, findName, intArg);\r", "+\t\tfindStringMethod = lookupTarget.findFixturingMethod(evaluator, findName, stringArg);\r", "+\t\tshowMethod = lookupTarget.findFixturingMethod(evaluator, showMethodName, showArg);\r", "-\t\t\tgenericFindStringMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, findName, genericStringArg);\r", "-\t\t\tgenericShowMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, showMethodName, genericShowArg);\r", "+\t\t\tgenericFindStringMethod = lookupTarget.findFixturingMethod(evaluator, findName, genericStringArg);\r", "+\t\t\tgenericShowMethod = lookupTarget.findFixturingMethod(evaluator, showMethodName, genericShowArg);\r"], "commitAfterChange": "fc04ff1c33cda53766142c18fa0ccb6a92e65b68", "signatureAfterChange": "\r \r \tpublic GenericFinder(GenericTyped typed, Evaluator evaluator)", "id": "f261c573072cff450e7a2d22f256106c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "36cf7bf3c486547b511ac279b34bcd21", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
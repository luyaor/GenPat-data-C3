{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r     public TypedObject interpretRowBeforeWrapping(Row row, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DispatchRowInFlow.java", "methodNumberAfterChange": 1, "commitBeforeChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "diff": ["-    public TypedObject interpretRowBeforeWrapping(Row row, TestResults testResults) {\r", "+    public TypedObject interpretRow(Row row, TestResults testResults) {\r", "+    \tDoCaller[] doCallers = createDoCallers(row,sequencing);\r", "-    \t\tOption<TypedObject> result = pickCaller(createDoCallers(row,sequencing), row, testResults);\r", "+    \t\tcheckForAmbiguity(doCallers);\r", "+\t\t\tOption<TypedObject> result = pickAndRunValidCaller(doCallers, row, testResults);\r", "-        \t\t\tOption<TypedObject> seqResult = pickCaller(createDoCallers(row,true), row, testResults);\r", "+        \t\t\tDoCaller[] seqDoCallers = createDoCallers(row,true);\r", "+        \t\t\tcheckForAmbiguity(seqDoCallers);\r", "+\t\t\t\t\tOption<TypedObject> seqResult = pickAndRunValidCaller(seqDoCallers, row, testResults);\r", "-    \t\tOption<String> partialError = pickPartial(createDoCallers(row,sequencing));\r", "+    \t\tOption<String> partialError = pickPartialError(doCallers);\r", "-    \t\tmethodsAreMissing(createDoCallers(row,sequencing),possibleSeq(row));\r", "+    \t\tmethodsAreMissing(doCallers,possibleSeq(row));\r"], "commitAfterChange": "6e2fd68caab2f02de2d8c7d77899562c496a4b1d", "signatureAfterChange": "\r     public TypedObject interpretRow(Row row, TestResults testResults)", "id": "a1700fddfd1253bef4f50eba5c1a9a6f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 3, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\t\tif (testResults.isAbandoned())\r", "+\t\t\tif (getRuntimeContext().isAbandoned(testResults))\r", "-\t\t\t\t\tif (result instanceof DoEvaluator) {\r", "-\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)result;\r", "-\t\t\t\t\t\tdoEvaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\tdoEvaluator.interpretInFlow(new Table(row),testResults);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t} else if (result instanceof Evaluator) {\r", "-\t\t\t\t\t\tEvaluator evaluator = (Evaluator)result;\r", "-\t\t\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\tinterpretEvaluator(evaluator,new Table(row),testResults);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t} else if (result instanceof Fixture) {\r", "-\t\t\t\t\t\tgetFitHandler().doTable(result, new Table(row),testResults,this);\r", "-\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tif (result != null) {\r", "+\t\t\t\t\t\tObject subject = result.getSubject();\r", "+\t\t\t\t\t\tif (subject instanceof DoEvaluator) {\r", "+\t\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)subject;\r", "+\t\t\t\t\t\t\tdoEvaluator.setRuntimeContext(runtimeContext);\r", "+\t\t\t\t\t\t\tdoEvaluator.interpretInFlow(new TableOnParse(row),testResults);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t} else if (subject instanceof Evaluator) {\r", "+\t\t\t\t\t\t\tEvaluator evaluator = (Evaluator)subject;\r", "+\t\t\t\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "+\t\t\t\t\t\t\tinterpretEvaluator(evaluator,new TableOnParse(row),testResults);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t} else if (subject instanceof Fixture) {\r", "+\t\t\t\t\t\t\tgetFitHandler().doTable(subject, new TableOnParse(row),testResults,this);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "e5019f7f56a3384859b3d08aee5be804", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "c3865379f23dbc6ec702f9bc236e784d", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
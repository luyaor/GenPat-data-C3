{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 4, "commitBeforeChange": "5c75a22ff92df58ac27695ae19554e2bc4760240", "diff": ["+\t\truntime.pushTestResults(testResults);\r", "+\t\ttry {\r", "+\t\t\trunTable(table, testResults);\r", "+\t\t} finally {\r", "+\t\t\truntime.popTestResults();\r", "+\t\t}\r", "+\t}\r", "-\t\t\t    \t\thandleInnerTables(cell, tableListener);\r", "-\t\t\t    \t\tif (subject instanceof Evaluator)\r", "-\t\t\t    \t\t\t((Evaluator)subject).setRuntimeContext(flowEvaluator.getRuntimeContext());\r"], "commitAfterChange": "441d5688763570bf9a676799b77c2d483b043423", "signatureAfterChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "id": "38bfed64cd42b6ff2bd48a99ad3ebcf8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tprivate void runTable(Table table, TestResults testResults, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 14, "commitBeforeChange": "2e1ce512c447c1b651f0045e0c07d56949bf4f9e", "diff": ["-\t}\r", "-\tprivate void runTable(Table table, TestResults testResults, ITableListener tableListener) {\r", "-\t\tfor (int rowNo = 0; rowNo < table.size(); rowNo++) {\r", "-\t\t\tRow row = table.at(rowNo);\r", "-\t\t\tif (runtime.isAbandoned(testResults)) {\r", "-\t\t\t\trow.ignore(testResults);\r", "-\t\t\t} else if (domainCheck != null && row.size() == 1 && row.text(0, flowEvaluator).equals(\"checks\")) {\r", "-\t\t\t\tsetCurrentCheck(); // Remove this hack later\r", "-\t\t\t} else {\r", "-\t\t\t\ttry {\r", "-//\t\t\t\t\tSystem.out.println(\"DoFlow row \"+row);\r", "-\t\t\t\t\tfinal Cell cell = row.at(0);\r", "-\t\t\t    \tif (cell.hasEmbeddedTables()) { // Doesn't allow for other cells in row...\r", "-\t\t\t    \t\trunInnerTables(cell.getEmbeddedTables(), tableListener);\r", "-\t\t\t    \t} else {\r", "-\t\t\t    \t\trow = mapOddBalls(row,flowEvaluator);\r", "-//\t\t\t    \t\tSystem.out.println(\"DoFlow set current Row \"+row);\r", "-\t\t\t    \t\truntime.setCurrentRow(row);\r", "-//\t\t\t    \t\tSystem.out.println(\"DoFlow runtime = \"+runtime.hashCode());\r", "-\t\t\t    \t\tTypedObject typedResult = flowEvaluator.interpretRow(row,testResults);\r", "-\t\t\t    \t\tObject subject = typedResult.getSubject();\r", "-//\t\t\t    \t\tSystem.out.println(\"DoFlow got \"+subject);\r", "-\t\t\t    \t\ttypedResult.injectRuntime(runtime);\r", "-\t\t\t    \t\tif (subject == null) {\r", "-\t\t\t    \t\t\t// Can't do anything useful with a null\r", "-\t\t\t    \t\t} else if (subject.getClass() == Fixture.class) {\r", "-\t\t\t    \t\t\t// Ignore it, as it does nothing.\r", "-\t\t\t    \t\t} else if (subject.getClass() == DoFixture.class || subject.getClass() == DoTraverse.class) {\r", "-\t\t\t    \t\t\thandleActualDoFixture((DoEvaluator)subject,row,testResults);\r", "-\t\t\t    \t\t} else if (subject.getClass() == SelectFixture.class) {\r", "-\t\t\t    \t\t\truntime.showAsAfterTable(\"warning\", \"This is no longer needed\");\r", "-\t\t\t    \t\t\thandleActualDoFixture((DoEvaluator)subject,row,testResults);\r", "-\t\t\t    \t\t} else if (subject instanceof DomainFixtured || subject instanceof DomainFixture) {\r", "-\t\t\t    \t\t\thandleDomainFixture(typedResult, subject, row, testResults);\r", "-\t\t\t    \t\t} else if (subject instanceof SuiteEvaluator) {\r", "-\t\t\t    \t\t\thandleSuiteFixture((SuiteEvaluator)subject, typedResult, row, testResults);\r", "-\t\t\t    \t\t} else if (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "-\t\t\t    \t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t    \t\t\treturn;// have finished table\r", "-\t\t\t    \t\t} else if (subject instanceof DoEvaluator) {\r", "-\t\t\t    \t\t\tpushOnScope(typedResult,row,testResults);\r", "-\t\t\t    \t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "-\t\t\t    \t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t    \t\t\treturn; // have finished table\r", "-\t\t\t    \t\t} else if (subject instanceof Fixture) {\r", "-\t\t\t    \t\t\tTable remainingTable = tableFromHere(table, rowNo).asTableOnParse();\r", "-\t\t\t    \t\t\tflowEvaluator.fitHandler().doTable((Fixture) subject,remainingTable,testResults,flowEvaluator);\r", "-\t\t\t    \t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r", "-\t\t\t    \t\t\t\ttable.replaceAt(rowNo+i, remainingTable.at(i));\r", "-\t\t\t    \t\t\treturn; // have finished table\r", "-\t\t\t    \t\t}\r", "-\t\t\t    \t}\r", "-\t\t\t\t} catch (Exception ex) {\r", "-\t\t\t\t\trow.error(testResults, ex);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+\t@Override\r", "+\tpublic boolean hasDomainCheck() {\r", "+\t\treturn domainCheck != null;\r", "+\t}\r"], "commitAfterChange": "0a7f908075e2f6aacf3b37f9ed6107b6a8f29ed0", "signatureAfterChange": "\r \t@Override\r \tpublic boolean hasDomainCheck()", "id": "c059d037cc6c38414cd56e444ba579c8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "fb1c3da7628af7a5bc192e510e138880", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
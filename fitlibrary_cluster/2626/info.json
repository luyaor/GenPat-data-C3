{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \tpublic static String what(IScope scope, String initialPattern)", "fileName": "src/fitlibrary/flow/WhatIsInScope.java", "methodNumberAfterChange": 0, "commitBeforeChange": "6c86d5b1959fb6a5e111247cfeaf74970fb9f334", "diff": ["+\t\ts.append(\"These are all the actions that are available at this point in the storytest.</br></br>\");\r", "+\t\ts.append(\"Special actions are shown in <b>bold</b> (with '''...'''). Other actions are shown in <i>italics</i> (with ''...'').</br></br>\");\r", "+\t\ts.append(\"Special actions act on a (non-special) action, as shown by \\\"|action...|\\\"</br></br>\");\r", "+\t\ts.append(\"Move the mouse over an action (or header) for further information, when it's available.</br></br>\");\r", "-\t\ts.append(\"<tr><td><h4>Object of type</h4></td><td><h4>Action Details</h4></td></tr>\\n\");\r", "+\t\ts.append(\"<tr><td><h3 style='margin-top:5px; margin-bottom:5px'>Action</h3></td><td><h3 style='margin-top:5px; margin-bottom:5px'>\");\r", "+\t\tspan(s,\"Returns\",0,\"The Java type of the returned object.\");\r", "+\t\ts.append(\"</h3></td></tr>\\n\");\r", "-\t\t\ts.append(\"<tr><td>\"+aClass.getSimpleName()+\"</td>\\n\");\r", "-\t\t\taddActions(s,aClass,pattern,showAnnotation != null);\r", "-\t\t\ts.append(\"</tr>\\n\");\r", "+\t\t\ts.append(\"<tr><td colspan=2 style='background-color:#d0d0d0;'><h4 style='margin-top:3px; margin-bottom:3px;'>Actions for class \"+aClass.getSimpleName()+\":</h4></td></tr>\\n\");\r", "+\t\t\taddActions(s,aClass,pattern,showAnnotation != null,3);\r"], "commitAfterChange": "83f84db552d47a75ab94267b635e3306dd137171", "signatureAfterChange": "\r \tpublic static String what(IScope scope, String initialPattern)", "id": "02eb8e447a2ae5343eb3f246ddf99cd8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tpublic String exceptionMessage(Throwable throwable)", "fileName": "src/fitlibrary/exception/ExceptionHandlingStandard.java", "methodNumberAfterChange": 1, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-        if (exception instanceof IgnoredException)\r", "+        if (!BatchFitLibrary.SHOW_EXCEPTION_STACKS && exception instanceof IgnoredException)\r", "-        if (exception instanceof FitLibraryExceptionInHtml)\r", "+        if (!BatchFitLibrary.SHOW_EXCEPTION_STACKS && exception instanceof FitLibraryExceptionInHtml)\r", "-        if (exception instanceof FitLibraryException)\r", "+        if (!BatchFitLibrary.SHOW_EXCEPTION_STACKS && exception instanceof FitLibraryException)\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \tpublic String exceptionMessage(Throwable throwable)", "id": "349b6227067574047ff96b35cc901303", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 10, "signatureBeforeChange": "\r \tpublic void setTypedSystemUnderTest(TypedObject typedObjectUnderTest)", "fileName": "src/fitlibrary/traverse/Traverse.java", "methodNumberAfterChange": 10, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic void setTypedSystemUnderTest(TypedObject typedObjectUnderTest) {\r", "-\t\tthis.typedObjectUnderTest = typedObjectUnderTest;\r", "-\t}\r", "+\tpublic void setTypedSystemUnderTest(TypedObject typedObject) {\r", "+\t\tif (cycleSUT(this,typedObject.getSubject()))\r", "+\t\t\tthrow new CycleException(\"systemUnderTest\",this,typedObject.getSubject());\r", "+\t\tthis.typedObjectUnderTest = typedObject;\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic void setTypedSystemUnderTest(TypedObject typedObject)", "id": "4157950191616821beea443c4c898181", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 25, "signatureBeforeChange": "\r \tpublic boolean isAbandoned()", "fileName": "src/fitlibrary/utility/TestResults.java", "methodNumberAfterChange": 25, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["-\t\t\treturn parent.isAbandoned();\r", "-\t\treturn abandoned;\r", "+\t\t\treturn parent.isAbandoned() || (getThreadLocalVersion().stopOnError && problems());\r", "+\t\treturn abandoned || (getThreadLocalVersion().stopOnError && problems());\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r \tpublic boolean isAbandoned()", "id": "470fd86f750081b7d5c5ae45136c8acf", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r \tpublic ICalledMethodTarget findMethodFromRow(Row row, int from, int extrasCellsOnEnd) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 8, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "+\t// The following is needed for its obligation to the interface SpecialActionContext, which is called by specials\r", "-\t\treturn findMethodByActionName(row.fromAt(from), row.size() - from - extrasCellsOnEnd - 1);\r", "+\t\tint upTo = row.size() - extrasCellsOnEnd;\r", "+\t\treturn PlugBoard.lookupTarget.findMethodByArity(row, from, upTo, !dispatchRowInFlow.isDynamicSequencing(), this);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \tpublic ICalledMethodTarget findMethodFromRow(Row row, int from, int extrasCellsOnEnd) throws Exception", "id": "49513cad310ec8daf1c6765bf0ce0e39", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective)", "fileName": "src/fitlibrary/flow/WhatIsInScope.java", "methodNumberAfterChange": 1, "commitBeforeChange": "6c86d5b1959fb6a5e111247cfeaf74970fb9f334", "diff": ["-\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective) {\r", "+\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective, int margin) {\r", "-\t\ts.append(\"<td><table>\");\r", "-\t\tboolean first = true;\r", "-\t\t\t\t\tif (first)\r", "-\t\t\t\t\t\ts.append(\"<tr><td><h4>Action</h4></td>\"+\r", "-\t\t\t\t\t\t\t\t\"<td><h4><span title='The Java return type.'>Returns</span></h4></td>\"+\r", "-\t\t\t\t\t\t\t\t\"<td><h4><span title='Actions that can occur in the rest of the table.'>Following actions</span></h4></td></tr>\\n\");\r", "-\t\t\t\t\tfirst = false;\t\t\t\t\t\r", "-\t\t\t\t\tactionInfo.display(s,returnTypeDisplay(method));\r", "+\t\t\t\t\ts.append(\"<tr><td>\");\r", "+\t\t\t\t\tspanStart(s,margin); //<span style='margin-left:\"+margin+\"px'>\");\r", "+\t\t\t\t\tactionInfo.display(s);\r", "+\t\t\t\t\ts.append(\"</span></td><td><code>\");\r", "+\t\t\t\t\ts.append(returnTypeDisplay(method));\r", "+\t\t\t\t\ts.append(\"</code></td></tr>\");\r", "-\t\t\t\t\tif (actionInfo.compound && !ignoreType(returnType))\r", "-\t\t\t\t\t\taddActions(s,returnType,\"\",true);\r", "+\t\t\t\t\tif (actionInfo.compound && !ignoreType(returnType)) {\r", "+\t\t\t\t\t\ts.append(\"<tr><td colspan=2>\");\r", "+\t\t\t\t\t\tString simpleName = returnType.getSimpleName();\r", "+\t\t\t\t\t\tspan(s,\"Actions for class <code>\"+simpleName+\"</code> in same table:\",\r", "+\t\t\t\t\t\t\t\tmargin+50,\r", "+\t\t\t\t\t\t\t\t\"These actions are for the \"+simpleName+\" produced by the action above.\\n\"+\r", "+\t\t\t\t\t\t\t\t\"They can be used in the following rows of the table that contains the above action.\");\r", "+\t\t\t\t\t\ts.append(\"</td></tr>\");\r", "+\t\t\t\t\t\taddActions(s,returnType,\"\",true,margin+50);\r", "+\t\t\t\t\t}\r", "-\t\ts.append(\"</table></td>\");\r"], "commitAfterChange": "83f84db552d47a75ab94267b635e3306dd137171", "signatureAfterChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective, int margin)", "id": "4b125004c716391189617ba1249ffa74", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 18, "signatureBeforeChange": "\r \tpublic TwoStageSpecial set(final Row row) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/special/PrefixSpecialAction.java", "methodNumberAfterChange": 18, "commitBeforeChange": "e3f9a7058b7a695d0825f787e929954ce3c4ac47", "diff": ["-\t\tfinal Option<ICalledMethodTarget> optionalTarget = getTarget(row);\r", "+\t\tfinal Option<ICalledMethodTarget> optionalTarget = target(row);\r", "-\t\t\t\t\t} else\r", "+\t\t\t\t\t} else if (row.at(3).hasEmbeddedTables(actionContext))\r", "+\t\t\t\t\t\tactionContext.setDynamicVariable(variableName,row.at(3).getEmbeddedTables());\r", "+\t\t\t\t\telse\r"], "commitAfterChange": "6aa33f7a49e37bb18384a62861c89eb6f5a7aeb4", "signatureAfterChange": "\r \tpublic TwoStageSpecial set(final Row row) throws Exception", "id": "4c3fee0fa907dfcaae832edc5243c22a", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tprivate void runEachStorytest(Object objectInitial, Tables tables, TableListener tableListener)", "fileName": "src/fitlibrary/suite/IndependentSuiteRunner.java", "methodNumberAfterChange": 3, "commitBeforeChange": "51f903b3dbcdee8eb97cb2b40932e27a74c2a97f", "diff": ["-\t\tif (!evaluator(object))\r", "-\t\t\tobject = new DomainFixture(object);\r", "-\t\tif (object instanceof DoEvaluator) {\r", "+\t\tif (!evaluator(object)) {\r", "+\t\t\tif (Configuration.configAutoWrapPojo == ConfigAutoWrapPojo.WITH_DOMAIN_FIXURE ||\r", "+\t\t\t\t\tobject instanceof DomainFixtured)\r", "+\t\t\t\tobject = new DomainFixture(object);\r", "+\t\t\telse\r", "+\t\t\t\tobject = new DoFixture(object);\r", "+\t\t} if (object instanceof DoEvaluator) {\r"], "commitAfterChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "signatureAfterChange": "\r \tprivate void runEachStorytest(Object objectInitial, Tables tables, TableListener tableListener)", "id": "5ba3fe3f85994def44d2ce91d702fc75", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tpublic boolean equals(String actualString, String expectedString)", "fileName": "src/fitlibrary/spec/TablesCompare.java", "methodNumberAfterChange": 2, "commitBeforeChange": "effe35cbadfe924736a7707f4658729298746535", "diff": ["+\t\tif (actual.isEmpty() && expected.equals(\"&nbsp;\") ||\r", "+\t\t\t\texpected.isEmpty() && actual.equals(\"&nbsp;\"))\r", "+\t\t\treturn true;\r"], "commitAfterChange": "9c0d0f3985b0e9e1fc4b458a61bcc4144ffe5579", "signatureAfterChange": "\r \tpublic boolean equals(String actualString, String expectedString)", "id": "6a47cb52687413f525eb299a01bf416b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tprivate static DoFlow wiredUpDoFlow()", "fileName": "src/fitlibrary/suite/BatchFitLibrary.java", "methodNumberAfterChange": 3, "commitBeforeChange": "e707c5d4a5e9cc595d3860282fcc92e4bfdeb17a", "diff": ["+\t\tif (!LOGGER_STARTED)\r", "+\t\t\tLogger.getRootLogger().addAppender(new ShowAfterTableAppender(runtime,new CustomHtmlLayout()));\r", "+\t\tLOGGER_STARTED = true;\r"], "commitAfterChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "signatureAfterChange": "\r \tprivate static DoFlow wiredUpDoFlow()", "id": "77ffb6eb23ef23c08b527ba2918b215c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 33, "signatureBeforeChange": "\r     public void addToTag(String report)", "fileName": "src/fitlibrary/table/TableElementOnList.java", "methodNumberAfterChange": 33, "commitBeforeChange": "8655c08986fab4cb3523c8934e8765739689b282", "diff": ["-    \t\tat(0).addToTag(report);\r", "-    \ttagAnnotation += report;\r", "+    \t\tat(0).addToTag(report.trim());\r", "+    \tif (tagAnnotation.isEmpty())\r", "+    \t\ttagAnnotation += report.trim();\r", "+    \telse\r", "+    \t\ttagAnnotation += \" \"+report.trim();\r"], "commitAfterChange": "45cd4c7886612af0bbcf0d9d5705be6bd83dc738", "signatureAfterChange": "\r     public void addToTag(String report)", "id": "7bd59b3c7122fc7caf4806702b8c6d24", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/collection/array/ArrayTraverse.java", "methodNumberAfterChange": 3, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["+\t\tthis.parser = typedArray.getTyped().getComponentTyped().parser(this);\r", "-        int arrayLength = Array.getLength(array);\r", "+        int arrayLength = Array.getLength(typedArray.getSubject());\r", "-        return array;\r", "+        return typedArray.getSubject();\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "8c493e2f5f43a367e7905c23d612aa2a", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r     public CellOnParse()", "fileName": "src/fitlibrary/table/CellOnParse.java", "methodNumberAfterChange": 2, "commitBeforeChange": "a31639422a830880e68972b09ea7debebd2f084e", "diff": ["-    public CellOnParse() {\r", "-        this(\"\");\r", "-    }\r", "+\tpublic CellOnParse(Cell cell) {\r", "+\t\tthis(\"\");\r", "+\t\tif (cell.hasEmbeddedTable())\r", "+\t\t\tsetInnerTables(cell.getEmbeddedTables());\r", "+\t\telse\r", "+\t\t\tsetText(cell.fullText());\r"], "commitAfterChange": "2c6fd716f0ddbc6f8d43a941ccbb30e98b026f07", "signatureAfterChange": "\r \tpublic CellOnParse(Cell cell)", "id": "b7097ebc7fe1de9451f50883c57303e3", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tprivate void reset()", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 2, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\ttableStack.clear();\r", "+\t\truntime.setAbandon(false);\r", "+\t\truntime.setStopOnError(false);\r", "+\t\tscopeStack.clearAllButSuite();\r", "-\t\tflowEvaluator.setSystemUnderTest(suiteFixture); // May be null\r", "-\t\tif (suiteFixture != null)\r", "-\t\t\truntimeContext = suiteFixture.getCopyOfRuntimeContext();\r", "+\t\tif (suiteFixtureOption.isSome())\r", "+\t\t\tflowEvaluator.setRuntimeContext(suiteFixtureOption.get().getCopyOfRuntimeContext());\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate void reset()", "id": "c75d9eac04ef5263d7094588697e784b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r \tprivate static String canonicalString(String s)", "fileName": "src/fitlibrary/spec/SpecifyFixture.java", "methodNumberAfterChange": 5, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["+\t}\r", "+\tprivate String canonical(String s) {\r", "+\t\treturn s.replaceAll(\"\\t\",\" \").replaceAll(\"\\r\",\"\").replaceAll(\"<hr>\",\"<hr/>\\n\").replaceAll(\"<br>\",\"\").replaceAll(\"<br/>\",\"\").trim();\r", "+\t}\r", "-\t}\r", "-\tprivate static String canonicalString(String s) {\r", "-\t\tif (s == null)\r", "-\t\t\treturn \"\";\r", "-\t\treturn s.trim().replaceAll(\"\\t\",\" \").replaceAll(\"\\r\",\"\");\r", "-\t}\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \tprivate String canonical(String s)", "id": "d31da03ab66eb8c458f06ba504d0c6c2", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tpublic boolean isAbandoned(TestResults testResults2)", "fileName": "src/fitlibrary/runtime/SuiteWideRuntimeContext.java", "methodNumberAfterChange": 9, "commitBeforeChange": "e141a91176343498f8b104bfcec7615e7ba3e1f0", "diff": ["-\tpublic boolean isAbandoned(TestResults testResults2) {\r", "-\t\treturn scope.isAbandon() || (scope.isStopOnError() && testResults2.problems());\r", "+\tpublic boolean isAbandoned(TestResults testResults) {\r", "+\t\treturn  scope.isAbandon() || \r", "+\t\t        (scope.isStopOnError() && testResults.problems() ||\r", "+\t\t\t\t(testResults.getCounts().exceptions >= maxErrorBeforeStopping) ||\r", "+\t\t\t\t(testResults.getCounts().wrong >= maxFailsBeforeStopping)\r", "+\t\t);\r"], "commitAfterChange": "882f01dd79aca5123dd37050672ce76c8c55e32b", "signatureAfterChange": "\r \tpublic boolean isAbandoned(TestResults testResults)", "id": "dfc4305c3836208f9e4ea2ae5fc040e7", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tpublic CalledMethodTarget optionallyFindGetterOnTypedObject(\r \t\t\tString propertyName, Evaluator evaluator)", "fileName": "src/fitlibrary/typed/NonGenericTypedObject.java", "methodNumberAfterChange": 7, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t}\r", "-\tpublic CalledMethodTarget optionallyFindGetterOnTypedObject(\r", "-\t\t\tString propertyName, Evaluator evaluator) {\r", "-\t\tString getMethodName = ExtendedCamelCase.camel(\"get \" + propertyName);\r", "-\t\tCalledMethodTarget target = optionallyFindMethodOnTypedObject(\r", "-\t\t\t\tgetMethodName, 0, evaluator, true);\r", "-\t\tif (target == null) {\r", "-\t\t\tString isMethodName = ExtendedCamelCase.camel(\"is \" + propertyName);\r", "-\t\t\ttarget = optionallyFindMethodOnTypedObject(isMethodName, 0,\r", "-\t\t\t\t\tevaluator, true);\r", "-\t\t}\r", "-\t\treturn target;\r", "-\t}\r", "+\tpublic CalledMethodTarget new_optionallyFindGetterOnTypedObject(String propertyName, Evaluator evaluator) {\r", "+\t\tString getMethodName = ExtendedCamelCase.camel(\"get \" + propertyName);\r", "+\t\tOption<CalledMethodTarget> target = new_findSpecificMethod(getMethodName, 0, evaluator);\r", "+\t\tif (target.isSome())\r", "+\t\t\treturn target.get();\r", "+\t\tString isMethodName = ExtendedCamelCase.camel(\"is \" + propertyName);\r", "+\t\ttarget = new_findSpecificMethod(isMethodName, 0, evaluator);\r", "+\t\tif (target.isSome())\r", "+\t\t\treturn target.get();\r", "+\t\treturn null;\r", "+\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget new_optionallyFindGetterOnTypedObject(String propertyName, Evaluator evaluator)", "id": "e2b2a264f767ef18c6338db9bb27d646", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "226a6a2787c43029b3af497f23a76f27", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
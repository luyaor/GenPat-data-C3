{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tpublic void createMappingsForCall(List<String> actuals, LocalDynamicVariables vars)", "fileName": "src/fitlibrary/definedAction/MultiParameterBinder.java", "methodNumberAfterChange": 5, "commitBeforeChange": "6aa33f7a49e37bb18384a62861c89eb6f5a7aeb4", "diff": ["-\t}\r", "-\tpublic void createMappingsForCall(List<String> actuals, LocalDynamicVariables vars) {\r", "-\t\tif (actuals.size() != formalParameters.size())\r", "-\t\t\tthrow new RuntimeException(\"Formals and actuals don't match\");\r", "-\t\tfor (int i = 0; i < actuals.size(); i++)\r", "-\t\t\tvars.putParameter(formalParameters.get(i), actuals.get(i));\r", "+\t}\r", "+\tpublic void bindUni(Row callRow, DynamicVariables dynamicVariables) {\r", "+\t\tif (callRow.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+callRow.size());\r", "+\t\tfor (int c = 0; c < callRow.size(); c++) {\r", "+\t\t\tString parameter = formalParameters.get(c);\r", "+\t\t\tif (callRow.at(c).hasEmbeddedTables(dynamicVariables))\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.at(c).getEmbeddedTables());\r", "+\t\t\telse\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.text(c, dynamicVariables));\r"], "commitAfterChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "signatureAfterChange": "\r \tpublic void bindUni(Row callRow, DynamicVariables dynamicVariables)", "id": "492619cccd452d6ac09f4b7297022c7a", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \tprivate static void macroReplaceCell(Cell cell, String key, Object value, VariableResolver resolver)", "fileName": "src/fitlibrary/definedAction/ParameterBinder.java", "methodNumberAfterChange": 4, "commitBeforeChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "diff": ["-\tprivate static void macroReplaceCell(Cell cell, String key, Object value, VariableResolver resolver) {\r", "-\t\t// Do NOT do dynamic variable substitution at this stage; it has to be done dynamically.\r", "-\t\tif (cell.hasEmbeddedTables(resolver))\r", "-\t\t\tmacroReplaceTables(cell.getEmbeddedTables(),key,value,resolver);\r", "-\t\tString text = cell.fullText();\r", "-\t\tif (value instanceof String) {\r", "-\t\t\tString update = StringUtility.replaceString(text, key, (String)value);\r", "-\t\t\tif (!update.equals(text))\r", "-\t\t\t\tcell.setText(update);\r", "-\t\t} else { // Embedded tables: Just replace once\r", "-\t\t\tTables valueTables = (Tables) value;\r", "-\t\t\tint at = text.indexOf(key);\r", "-\t\t\tif (at < 0)\r", "-\t\t\t\treturn;\r", "-\t\t\tcell.addTables(valueTables.deepCopy());\r", "-\t\t\tcell.setLeader(text.substring(0,at));\r", "-\t\t\tcell.last().setTrailer(text.substring(at+key.length()));\r", "+\tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables) {\r", "+\t\tif (callRow.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+callRow.size());\r", "+\t\tfor (int c = 0; c < callRow.size(); c++) {\r", "+\t\t\tString parameter = parameterRow.text(c, dynamicVariables);\r", "+\t\t\tif (callRow.at(c).hasEmbeddedTables(dynamicVariables))\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.at(c).getEmbeddedTables());\r", "+\t\t\telse\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.text(c, dynamicVariables));\r"], "commitAfterChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "signatureAfterChange": "\r \tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables)", "id": "c468efc7167d504f1bffc9a7a9ee8740", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "c601573a8021350c22fbe809d7041fd2", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
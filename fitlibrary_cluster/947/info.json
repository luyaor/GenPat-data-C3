{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \t@Test(expected=RuntimeException.class)\r \tpublic void hasMissingMethod() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestShowEscaped.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t@Test(expected=RuntimeException.class)\r", "-\tpublic void hasMissingMethod() throws Exception {\r", "-\t\t\tallowing(initialRow).size();will(returnValue(3));\r", "-\t\t\tone(actionContext).findMethodFromRow(initialRow,1,0);will(throwException(new RuntimeException()));\r", "-\t\tspecial.showEscaped(initialRow);\r", "+\t}\r", "+\t@Test(expected=Exception.class)\r", "+\tpublic void exceptionIsPassedOn() throws Exception {\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).run(); will(throwException(new IgnoredException()));\r", "+\t\t}});\r", "+\t\tglobalActionScope.showEscaped(action);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test(expected=Exception.class)\r \tpublic void exceptionIsPassedOn() throws Exception", "id": "60bbf58d9857dadc45f489003a80d485", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \t@Test(expected=RuntimeException.class)\r \tpublic void hasMissingMethod() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestShow.java", "methodNumberAfterChange": 3, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t@Test(expected=RuntimeException.class)\r", "-\tpublic void hasMissingMethod() throws Exception {\r", "-\t\t\tallowing(initialRow).size();will(returnValue(3));\r", "-\t\t\tone(actionContext).findMethodFromRow(initialRow,1,0);will(throwException(new RuntimeException()));\r", "-\t\tspecial.show(initialRow);\r", "+\t}\r", "+\t@Test(expected=Exception.class)\r", "+\tpublic void exceptionIsPassedOn() throws Exception {\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).run(); will(throwException(new IgnoredException()));\r", "+\t\t}});\r", "+\t\tglobalActionScope.show(action);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test(expected=Exception.class)\r \tpublic void exceptionIsPassedOn() throws Exception", "id": "c0d8d03bd5e63e15c94c137aa6dd94a0", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "31147e2f598e2d6b16de9d8d4460b3d1", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
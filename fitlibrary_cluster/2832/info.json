{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \t@Test\r \tpublic void textIsShownEscaped() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestShowEscaped.java", "methodNumberAfterChange": 0, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-public class TestShowEscaped extends SpecialActionTest {\r", "+\t\r", "-\tpublic void textIsShownEscaped() throws Exception {\r", "+\tpublic void textIsShown() throws Exception {\r", "-\t\t\tallowing(initialRow).size();will(returnValue(3));\r", "-\t\t\tone(actionContext).findMethodFromRow(initialRow,1,0);will(returnValue(target));\r", "-\t\t\tallowing(initialRow).fromAt(2);will(returnValue(subRow));\r", "-\t\t\tallowing(initialRow).at(0);will(returnValue(firstCell));\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,true,firstCell);will(returnValue(\"result\"));\r", "-\t\t\tone(target).getResultString(\"result\");will(returnValue(\"<Result\"));\r", "-\t\t\tone(actionContext).show(initialRow,\"&lt;Result\");\r", "+\t\t\tone(action).run(); will(returnValue(\"nz\"));\r", "+\t\t\tone(action).show(\"nz\");\r", "-\t\tTwoStageSpecial lazySpecial = special.showEscaped(initialRow);\r", "-\t\tlazySpecial.run(testResults);\r", "+\t\tglobalActionScope.showEscaped(action);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t\r \t@Test\r \tpublic void textIsShown() throws Exception", "id": "3e02e1882393f5706c2eab9b72006655", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \t@Test\r \tpublic void textIsShown() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestShowAfter.java", "methodNumberAfterChange": 0, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-public class TestShowAfter extends SpecialActionTest {\r", "+\t\r", "-\t\t\tallowing(initialRow).size();will(returnValue(3));\r", "-\t\t\tone(actionContext).findMethodFromRow(initialRow,1,0);will(returnValue(target));\r", "-\t\t\tallowing(initialRow).fromAt(2);will(returnValue(subRow));\r", "-\t\t\tallowing(initialRow).at(0);will(returnValue(firstCell));\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,true,firstCell);will(returnValue(\"result\"));\r", "-\t\t\tone(target).getResultString(\"result\");will(returnValue(\"Result\"));\r", "-\t\t\tone(actionContext).showAfterTable(\"Result\");\r", "+\t\t\tone(action).run(); will(returnValue(\"nz\"));\r", "+\t\t\tone(action).showAfter(\"nz\");\r", "-\t\tTwoStageSpecial lazySpecial = special.showAfter(initialRow);\r", "-\t\tlazySpecial.run(testResults);\r", "+\t\tglobalActionScope.showAfter(action);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t\r \t@Test\r \tpublic void textIsShown() throws Exception", "id": "deb9c696bf6c93751228527b0a0d56b7", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "8d8b61e4d5d7aac3d0386cbf80778af9", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
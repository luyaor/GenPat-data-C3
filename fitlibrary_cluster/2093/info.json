{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "    public static TypeAdapter adapterFor(Class<?> type) throws UnsupportedOperationException", "fileName": "src/fit/TypeAdapter.java", "methodNumberAfterChange": 4, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public static TypeAdapter adapterFor(Class<?> type) throws UnsupportedOperationException {", "-    if (type.isPrimitive()) {", "-      if (type.equals(byte.class)) return new ByteAdapter();", "-      if (type.equals(short.class)) return new ShortAdapter();", "-      if (type.equals(int.class)) return new IntAdapter();", "-      if (type.equals(long.class)) return new LongAdapter();", "-      if (type.equals(float.class)) return new FloatAdapter();", "-      if (type.equals(double.class)) return new DoubleAdapter();", "-      if (type.equals(char.class)) return new CharAdapter();", "-      if (type.equals(boolean.class)) return new BooleanAdapter();", "-      throw new UnsupportedOperationException(\"can't yet adapt \" + type);", "-    } else {", "-      Object delegate = PARSE_DELEGATES.get(type);", "-      if (delegate instanceof DelegateClassAdapter)", "-        return (TypeAdapter) ((DelegateClassAdapter) delegate).clone();", "-      if (delegate instanceof DelegateObjectAdapter)", "-        return (TypeAdapter) ((DelegateObjectAdapter) delegate).clone();", "-      if (type.equals(Byte.class)) return new ClassByteAdapter();", "-      if (type.equals(Short.class)) return new ClassShortAdapter();", "-      if (type.equals(Integer.class)) return new ClassIntegerAdapter();", "-      if (type.equals(Long.class)) return new ClassLongAdapter();", "-      if (type.equals(Float.class)) return new ClassFloatAdapter();", "-      if (type.equals(Double.class)) return new ClassDoubleAdapter();", "-      if (type.equals(Character.class)) return new ClassCharacterAdapter();", "-      if (type.equals(Boolean.class)) return new ClassBooleanAdapter();", "-      if (type.isArray()) return new ArrayAdapter();", "-      return new TypeAdapter();", "-    }", "-  }", "+\tpublic static TypeAdapter adapterFor(Class<?> type)", "+\t\t\tthrows UnsupportedOperationException {", "+\t\tif (type.isPrimitive()) {", "+\t\t\tif (type.equals(byte.class))", "+\t\t\t\treturn new ByteAdapter();", "+\t\t\tif (type.equals(short.class))", "+\t\t\t\treturn new ShortAdapter();", "+\t\t\tif (type.equals(int.class))", "+\t\t\t\treturn new IntAdapter();", "+\t\t\tif (type.equals(long.class))", "+\t\t\t\treturn new LongAdapter();", "+\t\t\tif (type.equals(float.class))", "+\t\t\t\treturn new FloatAdapter();", "+\t\t\tif (type.equals(double.class))", "+\t\t\t\treturn new DoubleAdapter();", "+\t\t\tif (type.equals(char.class))", "+\t\t\t\treturn new CharAdapter();", "+\t\t\tif (type.equals(boolean.class))", "+\t\t\t\treturn new BooleanAdapter();", "+\t\t\tthrow new UnsupportedOperationException(\"can't yet adapt \" + type);", "+\t\t}", "+\t\tObject delegate = PARSE_DELEGATES.get(type);", "+\t\tif (delegate instanceof DelegateClassAdapter)", "+\t\t\treturn (TypeAdapter) ((DelegateClassAdapter) delegate).clone();", "+\t\tif (delegate instanceof DelegateObjectAdapter)", "+\t\t\treturn (TypeAdapter) ((DelegateObjectAdapter) delegate).clone();", "+\t\tif (type.equals(Byte.class))", "+\t\t\treturn new ClassByteAdapter();", "+\t\tif (type.equals(Short.class))", "+\t\t\treturn new ClassShortAdapter();", "+\t\tif (type.equals(Integer.class))", "+\t\t\treturn new ClassIntegerAdapter();", "+\t\tif (type.equals(Long.class))", "+\t\t\treturn new ClassLongAdapter();", "+\t\tif (type.equals(Float.class))", "+\t\t\treturn new ClassFloatAdapter();", "+\t\tif (type.equals(Double.class))", "+\t\t\treturn new ClassDoubleAdapter();", "+\t\tif (type.equals(Character.class))", "+\t\t\treturn new ClassCharacterAdapter();", "+\t\tif (type.equals(Boolean.class))", "+\t\t\treturn new ClassBooleanAdapter();", "+\t\tif (type.isArray())", "+\t\t\treturn new ArrayAdapter();", "+\t\treturn new TypeAdapter();", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic static TypeAdapter adapterFor(Class<?> type) \t\t\tthrows UnsupportedOperationException", "id": "4f879cb302f5f371d69d88484b89f3f3", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tprivate void runTable(Table table, TestResults testResults, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 14, "commitBeforeChange": "2e1ce512c447c1b651f0045e0c07d56949bf4f9e", "diff": ["-\t}\r", "-\tprivate void runTable(Table table, TestResults testResults, ITableListener tableListener) {\r", "-\t\tfor (int rowNo = 0; rowNo < table.size(); rowNo++) {\r", "-\t\t\tRow row = table.at(rowNo);\r", "-\t\t\tif (runtime.isAbandoned(testResults)) {\r", "-\t\t\t\trow.ignore(testResults);\r", "-\t\t\t} else if (domainCheck != null && row.size() == 1 && row.text(0, flowEvaluator).equals(\"checks\")) {\r", "-\t\t\t\tsetCurrentCheck(); // Remove this hack later\r", "-\t\t\t} else {\r", "-\t\t\t\ttry {\r", "-//\t\t\t\t\tSystem.out.println(\"DoFlow row \"+row);\r", "-\t\t\t\t\tfinal Cell cell = row.at(0);\r", "-\t\t\t    \tif (cell.hasEmbeddedTables()) { // Doesn't allow for other cells in row...\r", "-\t\t\t    \t\trunInnerTables(cell.getEmbeddedTables(), tableListener);\r", "-\t\t\t    \t} else {\r", "-\t\t\t    \t\trow = mapOddBalls(row,flowEvaluator);\r", "-//\t\t\t    \t\tSystem.out.println(\"DoFlow set current Row \"+row);\r", "-\t\t\t    \t\truntime.setCurrentRow(row);\r", "-//\t\t\t    \t\tSystem.out.println(\"DoFlow runtime = \"+runtime.hashCode());\r", "-\t\t\t    \t\tTypedObject typedResult = flowEvaluator.interpretRow(row,testResults);\r", "-\t\t\t    \t\tObject subject = typedResult.getSubject();\r", "-//\t\t\t    \t\tSystem.out.println(\"DoFlow got \"+subject);\r", "-\t\t\t    \t\ttypedResult.injectRuntime(runtime);\r", "-\t\t\t    \t\tif (subject == null) {\r", "-\t\t\t    \t\t\t// Can't do anything useful with a null\r", "-\t\t\t    \t\t} else if (subject.getClass() == Fixture.class) {\r", "-\t\t\t    \t\t\t// Ignore it, as it does nothing.\r", "-\t\t\t    \t\t} else if (subject.getClass() == DoFixture.class || subject.getClass() == DoTraverse.class) {\r", "-\t\t\t    \t\t\thandleActualDoFixture((DoEvaluator)subject,row,testResults);\r", "-\t\t\t    \t\t} else if (subject.getClass() == SelectFixture.class) {\r", "-\t\t\t    \t\t\truntime.showAsAfterTable(\"warning\", \"This is no longer needed\");\r", "-\t\t\t    \t\t\thandleActualDoFixture((DoEvaluator)subject,row,testResults);\r", "-\t\t\t    \t\t} else if (subject instanceof DomainFixtured || subject instanceof DomainFixture) {\r", "-\t\t\t    \t\t\thandleDomainFixture(typedResult, subject, row, testResults);\r", "-\t\t\t    \t\t} else if (subject instanceof SuiteEvaluator) {\r", "-\t\t\t    \t\t\thandleSuiteFixture((SuiteEvaluator)subject, typedResult, row, testResults);\r", "-\t\t\t    \t\t} else if (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "-\t\t\t    \t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t    \t\t\treturn;// have finished table\r", "-\t\t\t    \t\t} else if (subject instanceof DoEvaluator) {\r", "-\t\t\t    \t\t\tpushOnScope(typedResult,row,testResults);\r", "-\t\t\t    \t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "-\t\t\t    \t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t    \t\t\treturn; // have finished table\r", "-\t\t\t    \t\t} else if (subject instanceof Fixture) {\r", "-\t\t\t    \t\t\tTable remainingTable = tableFromHere(table, rowNo).asTableOnParse();\r", "-\t\t\t    \t\t\tflowEvaluator.fitHandler().doTable((Fixture) subject,remainingTable,testResults,flowEvaluator);\r", "-\t\t\t    \t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r", "-\t\t\t    \t\t\t\ttable.replaceAt(rowNo+i, remainingTable.at(i));\r", "-\t\t\t    \t\t\treturn; // have finished table\r", "-\t\t\t    \t\t}\r", "-\t\t\t    \t}\r", "-\t\t\t\t} catch (Exception ex) {\r", "-\t\t\t\t\trow.error(testResults, ex);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "+\t@Override\r", "+\tpublic boolean hasDomainCheck() {\r", "+\t\treturn domainCheck != null;\r", "+\t}\r"], "commitAfterChange": "0a7f908075e2f6aacf3b37f9ed6107b6a8f29ed0", "signatureAfterChange": "\r \t@Override\r \tpublic boolean hasDomainCheck()", "id": "c059d037cc6c38414cd56e444ba579c8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "33c7184d9dc1ca0f01ecff461e441100", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "    protected void bin(Map<Object, Object> result, Object key, Object row)", "fileName": "src/fit/RowFixture.java", "methodNumberAfterChange": 8, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  protected void bin(Map<Object, Object> result, Object key, Object row) {", "-    if (key.getClass().isArray()) {", "-      key = Arrays.asList((Object[]) key);", "-    }", "-    if (result.containsKey(key)) {", "-      ListUtility.uncheckedCast(Object.class, result.get(key)).add(row);", "-    } else {", "-      List<Object> list = new LinkedList<Object>();", "-      list.add(row);", "-      result.put(key, list);", "-    }", "-  }", "+\tprotected void bin(Map<Object, Object> result, Object keyInitial, Object row) {", "+\t\tObject key = keyInitial;", "+\t\tif (key.getClass().isArray()) {", "+\t\t\tkey = Arrays.asList((Object[]) key);", "+\t\t}", "+\t\tif (result.containsKey(key)) {", "+\t\t\tListUtility.uncheckedCast(Object.class, result.get(key)).add(row);", "+\t\t} else {", "+\t\t\tList<Object> list = new LinkedList<Object>();", "+\t\t\tlist.add(row);", "+\t\t\tresult.put(key, list);", "+\t\t}", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tprotected void bin(Map<Object, Object> result, Object keyInitial, Object row)", "id": "68b85634fff67fd2d627b6ab51e1c622", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 20, "signatureBeforeChange": "    public void exception(Parse cell, Throwable exception)", "fileName": "src/fit/Fixture.java", "methodNumberAfterChange": 20, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void exception(Parse cell, Throwable exception) {", "-    while (exception.getClass().equals(InvocationTargetException.class)) {", "-      exception = ((InvocationTargetException) exception).getTargetException();", "-    }", "-    if (isFriendlyException(exception)) {", "-      cell.addToBody(\"<hr/>\" + label(exception.getMessage()));", "-    } else {", "-      final StringWriter buf = new StringWriter();", "-      exception.printStackTrace(new PrintWriter(buf));", "-      cell.addToBody(\"<hr><pre><div class=\\\"fit_stacktrace\\\">\" + (buf.toString()) + \"</div></pre>\");", "-    }", "-    cell.addToTag(\" class=\\\"error\\\"\");", "-    counts.exceptions++;", "-  }", "+\tpublic void exception(Parse cell, Throwable exceptionInitial) {", "+\t\tThrowable exception = exceptionInitial;", "+\t\twhile (exception.getClass().equals(InvocationTargetException.class)) {", "+\t\t\texception = ((InvocationTargetException) exception)", "+\t\t\t\t\t.getTargetException();", "+\t\t}", "+\t\tif (isFriendlyException(exception)) {", "+\t\t\tcell.addToBody(\"<hr/>\" + label(exception.getMessage()));", "+\t\t} else {", "+\t\t\tfinal StringWriter buf = new StringWriter();", "+\t\t\texception.printStackTrace(new PrintWriter(buf));", "+\t\t\tcell.addToBody(\"<hr><pre><div class=\\\"fit_stacktrace\\\">\"", "+\t\t\t\t\t+ (buf.toString()) + \"</div></pre>\");", "+\t\t}", "+\t\tcell.addToTag(\" class=\\\"error\\\"\");", "+\t\tcounts.exceptions++;", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic void exception(Parse cell, Throwable exceptionInitial)", "id": "fe348829358c71feb877b5844a0edcab", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "0cc533143eb8b571192c15cf1491f17c", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
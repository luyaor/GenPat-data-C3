{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 27, "signatureBeforeChange": "   public int match_main(String text, String pattern, int loc)", "fileName": "src/fitlibrary/diff/Diff_match_patch.java", "methodNumberAfterChange": 27, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-   */", "-  public int match_main(String text, String pattern, int loc) {", "-    loc = Math.max(0, Math.min(loc, text.length()));", "-    if (text.equals(pattern)) {", "-      // Shortcut (potentially not guaranteed by the algorithm)", "-      return 0;", "-    } else if (\"\".equals(text)) {", "-      // Nothing to match.", "-      return -1;", "-    } else if (loc + pattern.length() <= text.length()", "-        && text.substring(loc, loc + pattern.length()).equals(pattern)) {", "-      // Perfect match at the perfect spot!  (Includes case of null pattern)", "-      return loc;", "-    } else {", "-      // Do a fuzzy compare.", "-      return match_bitap(text, pattern, loc);", "-    }", "-  }", "+\t */", "+\tpublic int match_main(String text, String pattern, int locInitial) {", "+\t\tint loc = locInitial;", "+\t\tloc = Math.max(0, Math.min(loc, text.length()));", "+\t\tif (text.equals(pattern)) {", "+\t\t\t// Shortcut (potentially not guaranteed by the algorithm)", "+\t\t\treturn 0;", "+\t\t} else if (\"\".equals(text)) {", "+\t\t\t// Nothing to match.", "+\t\t\treturn -1;", "+\t\t} else if (loc + pattern.length() <= text.length()", "+\t\t\t\t&& text.substring(loc, loc + pattern.length()).equals(pattern)) {", "+\t\t\t// Perfect match at the perfect spot! (Includes case of null", "+\t\t\t// pattern)", "+\t\t\treturn loc;", "+\t\t} else {", "+\t\t\t// Do a fuzzy compare.", "+\t\t\treturn match_bitap(text, pattern, loc);", "+\t\t}", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": " \tpublic int match_main(String text, String pattern, int locInitial)", "id": "fdc9b1656217108eb9164234088640fb", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 20, "signatureBeforeChange": "    public void exception(Parse cell, Throwable exception)", "fileName": "src/fit/Fixture.java", "methodNumberAfterChange": 20, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void exception(Parse cell, Throwable exception) {", "-    while (exception.getClass().equals(InvocationTargetException.class)) {", "-      exception = ((InvocationTargetException) exception).getTargetException();", "-    }", "-    if (isFriendlyException(exception)) {", "-      cell.addToBody(\"<hr/>\" + label(exception.getMessage()));", "-    } else {", "-      final StringWriter buf = new StringWriter();", "-      exception.printStackTrace(new PrintWriter(buf));", "-      cell.addToBody(\"<hr><pre><div class=\\\"fit_stacktrace\\\">\" + (buf.toString()) + \"</div></pre>\");", "-    }", "-    cell.addToTag(\" class=\\\"error\\\"\");", "-    counts.exceptions++;", "-  }", "+\tpublic void exception(Parse cell, Throwable exceptionInitial) {", "+\t\tThrowable exception = exceptionInitial;", "+\t\twhile (exception.getClass().equals(InvocationTargetException.class)) {", "+\t\t\texception = ((InvocationTargetException) exception)", "+\t\t\t\t\t.getTargetException();", "+\t\t}", "+\t\tif (isFriendlyException(exception)) {", "+\t\t\tcell.addToBody(\"<hr/>\" + label(exception.getMessage()));", "+\t\t} else {", "+\t\t\tfinal StringWriter buf = new StringWriter();", "+\t\t\texception.printStackTrace(new PrintWriter(buf));", "+\t\t\tcell.addToBody(\"<hr><pre><div class=\\\"fit_stacktrace\\\">\"", "+\t\t\t\t\t+ (buf.toString()) + \"</div></pre>\");", "+\t\t}", "+\t\tcell.addToTag(\" class=\\\"error\\\"\");", "+\t\tcounts.exceptions++;", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic void exception(Parse cell, Throwable exceptionInitial)", "id": "fe348829358c71feb877b5844a0edcab", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "8c40cecb73761f92616336edd08b10bb", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic PostFixSpecialCaller(Row row, DoTraverseInterpreter interpreter)", "fileName": "src/fitlibrary/traverse/workflow/caller/PostFixSpecialCaller.java", "methodNumberAfterChange": 0, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\tpublic PostFixSpecialCaller(Row row, DoTraverseInterpreter interpreter) {\r", "+\tpublic PostFixSpecialCaller(Row row, Evaluator evaluator, boolean sequencing) {\r", "-\t\tString firstCell = row.text(0,interpreter);\r", "-\t\tif (row.size() == 4 && \"=\".equals(row.text(2,interpreter)) && \r", "+\t\tString firstCell = row.text(0,evaluator);\r", "+\t\tif (row.size() == 4 && \"=\".equals(row.text(2,evaluator)) && \r", "-\t\t\tmethodName = row.text(row.size()-2,interpreter);\r", "-\t\t\tspecialMethod = PlugBoard.lookupTarget.findPostfixSpecialMethod(interpreter, methodName);\r", "+\t\t\tmethodName = row.text(row.size()-2,evaluator);\r", "+\t\t\tspecialMethod = PlugBoard.lookupTarget.findPostfixSpecialMethod(evaluator, methodName);\r", "-\t\t\t\tfindMethodForInnerAction(row, interpreter);\r", "+\t\t\t\tfindMethodForInnerAction(row, evaluator,sequencing);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \r \tpublic PostFixSpecialCaller(Row row, Evaluator evaluator, boolean sequencing)", "id": "267b22c06c53665d28a3ef6f3368f013", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 50, "signatureBeforeChange": "\r \t\t\t@SuppressWarnings(\"unchecked\")\r \t\t\tpublic boolean compares(Comparable actual, Comparable expected)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["+\tpublic DoTraverse(Object sut, boolean sequencing) {\r", "+\t\tsuper(sut,sequencing);\r", "+\t}\r", "-\t\tComparison compare = new Comparison() {\r", "-\t\t\t@SuppressWarnings(\"unchecked\")\r", "-\t\t\tpublic boolean compares(Comparable actual, Comparable expected) {\r", "-\t\t\t\treturn actual.compareTo(expected) >= 0;\r", "-\t\t\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \r \tpublic DoTraverse(Object sut, boolean sequencing)", "id": "a2d158f02b13edf118386543bd9e46e8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "361cf264c0662d1c52d9113b177489f7", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
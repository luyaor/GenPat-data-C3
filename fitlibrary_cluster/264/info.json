{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tprivate void runTable(Table table, TableListener tableListener)", "fileName": "src/fitlibrary/suite/DoFlow.java", "methodNumberAfterChange": 4, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["-\tprivate void runTable(Table table, TableListener tableListener) {\r", "+\t}\r", "+\tpublic void runTable(Table table, TableListener tableListener) {\r", "-\t\t\tif (testResults.isAbandoned())\r", "-\t\t\t\trow.ignore(testResults);\r", "-\t\t\telse\r", "+\t\t\tif (testResults.isAbandoned()) {\r", "+\t\t\t\tif (suiteFixture == null)\r", "+\t\t\t\t\trow.ignore(testResults);\r", "+\t\t\t} else if (domainCheck != null && row.size() == 1 && row.text(0, flowEvaluator).equals(\"checks\")) {\r", "+\t\t\t\tsetCurrentCheck(); // Remove this hack later\r", "+\t\t\t} else\r", "-\t\t\t\t\tFixture fixtureByName = fixtureOrDoTraverseByName(table,testResults);\r", "-\t\t\t\t\tif (fixtureByName != null && fixtureByName.getClass() == Fixture.class)\r", "-\t\t\t\t\t\tfixtureByName = null;\r", "-\t\t\t\t\tObject result;\r", "-\t\t\t\t\tif (fixtureByName instanceof DoFixture) {\r", "-\t\t\t\t\t\tresult = fixtureByName;\r", "-\t\t\t\t\t\tfixtureByName = null;\r", "-\t\t\t\t\t} else\r", "-\t\t\t\t\t\tresult = interpretRow(row,testResults,fixtureByName);\r", "-\t\t\t\t\tif (result instanceof DoEvaluator) {\r", "-\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator) result;\r", "-\t\t\t\t\t\tdoEvaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\tdoEvaluator.setUp(table, testResults);\r", "-\t\t\t\t\t\tpushSut(doEvaluator);\r", "-\t\t\t\t\t} else if (result instanceof Evaluator) {\r", "+//\t\t\t\t\tSystem.out.println(\"DoFlow row \"+row);\r", "+\t\t\t\t\tObject result = flowEvaluator.interpretRow(row,testResults,null);\r", "+//\t\t\t\t\tSystem.out.println(\"DoFlow got \"+result);\r", "+\t\t\t\t\tif (result == null) {\r", "+\t\t\t\t\t\t// Can't do anything useful with a null\r", "+\t\t\t\t\t} else if (result.getClass() == Fixture.class) {\r", "+\t\t\t\t\t\t// Ignore it, as it does nothing.\r", "+\t\t\t\t\t} else if (result.getClass() == DoFixture.class || result.getClass() == DoTraverse.class) {\r", "+\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)result;\r", "+\t\t\t\t\t\t// Unwrap an auto-wrap, keeping the type information, unless it has an outer context\r", "+\t\t\t\t\t\tif (doEvaluator.getNextOuterContext() != null)\r", "+\t\t\t\t\t\t\taDoEvaluator(doEvaluator,table,testResults);\r", "+\t\t\t\t\t\telse if (doEvaluator.getSystemUnderTest() != null)\r", "+\t\t\t\t\t\t\tpushSut(doEvaluator.getTypedSystemUnderTest(),table,testResults);\r", "+\t\t\t\t\t} else if (result instanceof DomainFixtured || result instanceof DomainFixture) {\r", "+\t\t\t\t\t\tpushSut(result,table,testResults);\r", "+\t\t\t\t\t\tdomainInject = new DomainInjectionTraverse(this);\r", "+\t\t\t\t\t\tdomainInject.setSystemUnderTest(result);\r", "+\t\t\t\t\t\tsetRuntimeContext(domainInject);\r", "+\t\t\t\t\t\tdomainCheck = new DomainCheckTraverse(this);\r", "+\t\t\t\t\t\tdomainCheck.setSystemUnderTest(result);\r", "+\t\t\t\t\t\tsetRuntimeContext(domainCheck);\r", "+\t\t\t\t\t\tcurrent = domainInject;\r", "+\t\t\t\t\t} else if (result instanceof SuiteEvaluator) {\r", "+\t\t\t\t\t\tsuiteFixture = (SuiteEvaluator) result;\r", "+\t\t\t\t\t\tsetRuntimeContext(suiteFixture); // Subsequent tables are global for now.\r", "+\t\t\t\t\t\tcallMethod(suiteFixture, \"suiteSetUp\", table,tableListener.getTestResults());\r", "+\t\t\t\t\t\tpushSut(result,table,testResults);\r", "+\t\t\t\t\t} else if (fixtureThatIsRelevantSubclassOfDoFixture(result)) {\r", "+\t\t\t\t\t\tflowEvaluator.fitHandler().doTable(result,new Table(row),testResults,flowEvaluator);\r", "+\t\t\t\t\t\treturn; // have finished table\r", "+\t\t\t\t\t} else if (result instanceof CollectionSetUpTraverse) {\r", "+\t\t\t\t\t\tDoTraverse doTraverse = (DoTraverse) result;\r", "+\t\t\t\t\t\tsetRuntimeContext(doTraverse);\r", "+\t\t\t\t\t\tdoTraverse.interpretAfterFirstRow(new Table(row), testResults); // It could be any row\r", "+\t\t\t\t\t\tbreak;// have finished table\r", "+\t\t\t\t\t} else if (result instanceof DoEvaluator) {\r", "+\t\t\t\t\t\taDoEvaluator((DoEvaluator) result, table, testResults);\r", "+\t\t\t\t\t} else if (result instanceof Evaluator) { // Calculate, etc\r", "-\t\t\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\tevaluator.setUp(table, testResults);\r", "-\t\t\t\t\t\tevaluator.interpretAfterFirstRow(table, testResults);\r", "-\t\t\t\t\t\tevaluator.tearDown(table, testResults);\r", "-\t\t\t\t\t\tbreak; // have finished table\r", "-\t\t\t\t\t} else if (getAlienTraverseHandler().isAlienTraverse(result)) {\r", "-\t\t\t\t\t\tgetAlienTraverseHandler().doTable(result,new Table(row),testResults,this);\r", "-\t\t\t\t\t\tbreak; // have finished table\r", "-\t\t\t\t\t} else if (result != null) {\r", "-\t\t\t\t\t\tpushSut(result);\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\t\tsetRuntimeContext(evaluator);\r", "+\t\t\t\t\t\tcallSetUpSutChain(evaluator,table, testResults);\r", "+\t\t\t\t\t\tevaluator.interpretAfterFirstRow(new Table(row), testResults); // It could be any row\r", "+\t\t\t\t\t\tcallTearDownSutChain(evaluator,table, testResults);\r", "+\t\t\t\t\t\treturn; // have finished table\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tif (result instanceof Fixture) {\r", "+\t\t\t\t\t\t\tflowEvaluator.fitHandler().doTable(result,new Table(row),testResults,flowEvaluator);\r", "+\t\t\t\t\t\t\treturn; // have finished table\r", "+\t\t\t\t\t\t} else if (CalledMethodTarget.canAutoWrap(result))\r", "+\t\t\t\t\t\t\tpushSut(result,table,testResults);\r", "+\t\t\t\t\t} // But only when it comes from a class name!\r", "-\t\tpopLocalSut(table,tableListener);\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r \tpublic void runTable(Table table, TableListener tableListener)", "id": "006861f199aedc1a25e06c6e18e77324", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String substring, boolean selective)", "fileName": "src/fitlibrary/flow/WhatIsInScope.java", "methodNumberAfterChange": 1, "commitBeforeChange": "abdca5590322cb763a5db1236b7a9c36f3d22653", "diff": ["-\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String substring, boolean selective) {\r", "+\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective) {\r", "+\t\tboolean matchAll = pattern.isEmpty();\r", "+\t\ts.append(\"<tr><td><h4>Action</h4></td><td><h4>Return type</h4></td><td><h4>Following actions</h4></td></tr>\\n\");\r", "-\t\t\tboolean matches = substring.isEmpty() || method.getName().contains(substring);\r", "-\t\t\tif (matches &&\r", "-\t\t\t\t\t!ignoreDoTraverse &&\r", "+\t\t\tif (\t!ignoreDoTraverse &&\r", "+\t\t\t\tClass<?> returnType = method.getReturnType();\r", "+\t\t\t\tString returns = returnType.getSimpleName();\r", "+\t\t\t\tif (returnType == Void.TYPE || returnType == TwoStageSpecial.class)\r", "+\t\t\t\t\treturns = \"\";\r", "-\t\t\t\t\tif (!locallySelective) {\r", "-\t\t\t\t\t\ts.append(\"<tr><td>\" + methodName(method) + \"</td></tr>\\n\");\r", "+\t\t\t\t\tString methodName = methodName(method);\r", "+\t\t\t\t\tString nameWithoutTags = methodName.replaceAll(\"<i>\",\"\").replaceAll(\"</i>\",\"\").replaceAll(\"<b>\",\"\").replaceAll(\"</b>\",\"\");\r", "+\t\t\t\t\tboolean matches = matchAll || nameWithoutTags.contains(pattern);\r", "+\t\t\t\t\tif (!locallySelective && matches) {\r", "+\t\t\t\t\t\ts.append(\"<tr><td>\" + methodName + \"</td><td>\"+returns+\"</td></tr>\\n\");\r", "-\t\t\t\t\tif (action.actionType() == ActionType.PREFIX)\r", "-\t\t\t\t\t\tname += \"action...|\";\r", "-\t\t\t\t\ts.append(\"<tr><td><span class='note' title='\"+action.tooltip()+\"'>\" + name + \"</span></td>\");\r", "-\t\t\t\t\tif (action.actionType() == ActionType.COMPOUND && !method.getReturnType().isPrimitive()) {\r", "-\t\t\t\t\t\taddActions(s, method.getReturnType(),substring,true);\r", "+\t\t\t\t\tString tooltip = action.tooltip();\r", "+\t\t\t\t\tString nameWithoutTags = name.replaceAll(\"<i>\",\"\").replaceAll(\"</i>\",\"\").replaceAll(\"<b>\",\"\").replaceAll(\"</b>\",\"\");\r", "+\t\t\t\t\tboolean matches = matchAll || nameWithoutTags.contains(pattern) || tooltip.contains(pattern);\r", "+\t\t\t\t\tif (matches) {\r", "+\t\t\t\t\t\tif (action.actionType() == ActionType.PREFIX)\r", "+\t\t\t\t\t\t\tname += \"action...|\";\r", "+\t\t\t\t\t\ts.append(\"<tr><td><span class='note' title='\"+tooltip+\"'>\" + name + \"</span></td><td>\"+returns+\"</td>\");\r", "+\t\t\t\t\t\tif (action.actionType() == ActionType.COMPOUND && !ignoreType(returnType)) {\r", "+\t\t\t\t\t\t\taddActions(s,returnType,\"\",true);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\ts.append(\"</tr>\");\r", "-\t\t\t\t\ts.append(\"</tr>\");\r"], "commitAfterChange": "96a06134efc1fc0c7cb135114029544fb0cf938e", "signatureAfterChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective)", "id": "e1cfc766fe9c742c5bcaaae1f8e50703", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "f3800784d05dd447f5df35449e85c74a", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
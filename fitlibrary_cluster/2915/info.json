{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r     private void runFile(File file, File theReportDiry, Report report, Parse fullSetUpTables, \r     \t\tParse fullTearDownTables)", "fileName": "src/fitlibrary/runner/FolderRunner.java", "methodNumberAfterChange": 11, "commitBeforeChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "diff": ["-    \tString name = file.getName();\r", "-    \tPrintStream oldOut = System.out;\r", "-    \tPrintStream oldErr = System.err;\r", "-    \tByteArrayOutputStream tempOut = new ByteArrayOutputStream();\r", "-    \tByteArrayOutputStream tempErr = new ByteArrayOutputStream();\r", "-    \ttry {\r", "-    \t\tif (isXlsFileName(name) || isHtmlFileName(name)) {\r", "-    \t\t\tSystem.setOut(new PrintStream(tempOut));\r", "-    \t\t\tSystem.setErr(new PrintStream(tempErr));\r", "-    \t\t\tFile reportFile = new File(theReportDiry,reportName(file));\r", "-    \t\t\tif (fileIsLocked(reportFile))\r", "-    \t\t\t\tthrow new RuntimeException(\"File is locked\");\r", "-    \t\t\tParse setUp = copyParse(fullSetUpTables.more);\r", "-    \t\t\tParse tearDown = copyParse(fullTearDownTables);\r", "-    \t\t\tTraverse.setContext(theReportDiry);\r", "-    \t\t\tCounts counts;\r", "-    \t\t\tif (isXlsFileName(name))\r", "-    \t\t\t\tcounts = new SpreadsheetRunner(report).run(file,reportFile,setUp,tearDown,batchFitLibrary);\r", "-    \t\t\telse\r", "-    \t\t\t\tcounts = new HtmlRunner(report).runInSuite(file,reportFile,encoding,setUp,tearDown,batchFitLibrary);\r", "-    \t\t\treport.addAssertionCountsForPage(reportFile,counts);\r", "-    \t\t} else\r", "-    \t\t\tthrow new RuntimeException(\"Not HTML nor XLS\");\r", "-    \t} catch (Exception e) {\r", "-    \t\tignoreFile(file,e);\r", "-    \t} finally {\r", "-    \t\treportOutput(name,\"out\",tempOut.toString());\r", "-    \t\treportOutput(name,\"err\",tempErr.toString());\r", "-    \t\tSystem.setOut(oldOut);                \r", "-    \t\tSystem.setErr(oldErr);                \r", "-    \t}\r", "-    }\r", "+    \trunFile.runFile(file, theReportDiry, report, fullSetUpTables, fullTearDownTables);\r"], "commitAfterChange": "d5585b9bd9597ec67ca4eaebd1dd7d580af72cbc", "signatureAfterChange": "\r     private void runFile(File file, File theReportDiry, Report report, Parse fullSetUpTables, \r     \t\tParse fullTearDownTables)", "id": "7907694fbe8d99217a710c02b14d08c6", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 10, "signatureBeforeChange": "\r \tprivate List<String> getDefinedActionParameters(Row parametersRow)", "fileName": "src/fitlibrary/DefineAction.java", "methodNumberAfterChange": 10, "commitBeforeChange": "b30e56d0effcc85cd5ffa49ca148e7059d6f5934", "diff": ["+\t}\r", "+\tprivate List<String> getFormalParameters(Row parametersRow, int start, int increment) {\r", "+\t\tList<String> formalParameters = new ArrayList<String>();\r", "+    \tif (wikiClassBased())\r", "+    \t\tformalParameters.add(\"this\");\r", "+    \tfor (int i = start; i < parametersRow.size(); i += increment)\r", "+    \t\tif (i < parametersRow.size()) {\r", "+    \t\t\tString parameter = parametersRow.text(i,this);\r", "+    \t\t\tif (\"\".equals(parameter))\r", "+    \t\t\t\terror(\"Parameter name is blank\",parametersRow);\r", "+    \t\t\tif (formalParameters.contains(parameter))\r", "+    \t\t\t\terror(\"Parameter name '<b>\"+parameter+\"</b>' is duplicated\",parametersRow);\r", "+\t\t\t\tformalParameters.add(parameter);\r", "+    \t\t}\r", "+\t\treturn formalParameters;\r", "+\t}\r", "-\t}\r", "-\tprivate List<String> getDefinedActionParameters(Row parametersRow) {\r", "-\t\tList<String> formalParameters = new ArrayList<String>();\r", "-    \tif (wikiClassBased())\r", "-    \t\tformalParameters.add(\"this\");\r", "-    \tfor (int i = 1; i < parametersRow.size(); i += 2)\r", "-    \t\tif (i < parametersRow.size()) {\r", "-    \t\t\tString parameter = parametersRow.text(i,this);\r", "-    \t\t\tif (\"\".equals(parameter))\r", "-    \t\t\t\terror(\"Parameter name is blank\",parametersRow);\r", "-    \t\t\tif (formalParameters.contains(parameter))\r", "-    \t\t\t\terror(\"Parameter name '<b>\"+parameter+\"</b>' is duplicated\",parametersRow);\r", "-\t\t\t\tformalParameters.add(parameter);\r", "-    \t\t}\r", "-\t\treturn formalParameters;\r", "-\t}\r"], "commitAfterChange": "cd20838066679088607bacd4884b58979b698e68", "signatureAfterChange": "\r \tprivate List<String> getFormalParameters(Row parametersRow, int start, int increment)", "id": "8cdf7e873c974ec997203c6f9ef83c58", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "81bd661de2e26111debd02a4f2243626", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
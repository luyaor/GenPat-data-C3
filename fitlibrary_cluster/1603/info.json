{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \tprivate void processNamedParameterDefinedAction(Table headerTable, Tables body)", "fileName": "src/fitlibrary/DefineAction.java", "methodNumberAfterChange": 7, "commitBeforeChange": "13d7f692d0259ca6dca7abebdee03a2c1c87669e", "diff": ["-\tprivate void processNamedParameterDefinedAction(Table headerTable, Tables body) {\r", "+\tprivate void processMultiDefinedAction(Table headerTable, Tables body) {\r", "-\t\tArrayList<String> parameters = new ArrayList<String>();\r", "+\t\tArrayList<String> formalParameters = new ArrayList<String>();\r", "-\t\t\t\tthrow new FitLibraryException(\"Parameter names cannot be blank.\");\r", "-\t\t\tparameters.add(parameter);\r", "+\t\t\t\terror(\"Parameter name is blank\",parametersRow);\r", "+\t\t\tif (formalParameters.contains(parameter))\r", "+\t\t\t\terror(\"Parameter name '<b>\"+parameter+\"</b>' is duplicated\",parametersRow);\r", "+\t\t\tformalParameters.add(parameter);\r", "-\t\tTemporaryPlugBoardForRuntime.definedActionsRepository().defineMultiDefinedAction(definedActionName, parameters, body.deepCopy(), \"\");\r", "+\t\tTemporaryPlugBoardForRuntime.definedActionsRepository().defineMultiDefinedAction(definedActionName, formalParameters, body.deepCopy(), \"\");\r", "+\t}\r"], "commitAfterChange": "1a9b02fce576bf8c0ae1342055a0c5082b525445", "signatureAfterChange": "\r \tprivate void processMultiDefinedAction(Table headerTable, Tables body)", "id": "24f273dde28dd28c1925bc44de42e4bc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/spec/SpecifyFixture2.java", "methodNumberAfterChange": 1, "commitBeforeChange": "681d5f08a03cb8efaa429831112a5d45fa950ef3", "diff": ["-\t\t\tTables actualTables = table.elementAt(0).elementAt(0).getEmbeddedTables();\r", "+\t\t\tCell actualTables = table.elementAt(0).elementAt(0);\r", "+\t\t\tif (actualTables.isEmpty())\r", "+\t\t\t\tthrow new FitLibraryException(\"Missing nested tables to be run\");\r", "-\t\t\t\ttestResults.getCounts().right += cellCount(actualTables) - 1;\r", "+\t\t\t\ttestResults.addRights(cellCount(actualTables) - 1);\r", "+\t\t\t} else {\r", "+\t\t\t\texpectedCell.fail(testResults);\r", "+\t\t\t\terrorReport.actualResult(actualTables);\r"], "commitAfterChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "cc9fb8062721add89ceb7aef778c640c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "ecf423b7c4cc0a45a83f82907165d71a", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 13, "signatureBeforeChange": "\r \t\r \t\r \tprivate void verifyScopePush(final Object result, final Object sut)", "fileName": "test/fitlibrary/flow/TestDoFlow.java", "methodNumberAfterChange": 12, "commitBeforeChange": "45400291a9cb47b358ca00f896a8c7e188a58f80", "diff": ["-\t\r", "+\r", "-\t\tfinal GenericTypedObject typedSut = new GenericTypedObject(sut);\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\toneOf(flowEvaluator).interpretRow(row0,testResults);\r", "-\t\t\t  will(returnValue(new GenericTypedObject(result)));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(0),testResults);\r", "-\t\t\t  will(returnValue(new GenericTypedObject(result)));\r", "-\t\t\texactly(2).of(scopeStack).push(typedSut);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(sut, row0, testResults);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(sut, tables.at(1).at(0), testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(sut, row0, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(sut, tables.at(1).at(0), testResults);\r", "-\t\t\toneOf(flowEvaluator).interpretRow(row1,testResults);\r", "-\t\t\t  will(returnValue(GenericTypedObject.NULL));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(1),testResults);\r", "-\t\t\t  will(returnValue(GenericTypedObject.NULL));\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfTable(); will(returnValue(list(typedSut)));\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfStorytest(); will(returnValue(list(typedSut)));\r", "-\t\t\toneOf(tableListener).tableFinished(table0);\r", "-\t\t\toneOf(tableListener).tableFinished(tables.at(1));\r", "-\t\t}});\r", "-\t\tdoFlow.runStorytest(tables,tableListener);\r", "+\t\tTable table0 = tables.at(0);\r", "+\t\tTable table1 = tables.at(1);\r", "+\r", "+\t\tdoFlowDriver.startingOnTable(table0);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(0), result);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(sut); // -- extra\r", "+\t\tdoFlowDriver.callingSetUpOn(sut,table0.at(0)); // -- extra\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(1), null);\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfTable(list(result));\r", "+\t\tdoFlowDriver.callingTearDownOn(result, table0.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table0);\r", "+\r", "+\t\tdoFlowDriver.startingOnTable(table1);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table1.at(0), result);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(sut); // -- extra\r", "+\t\tdoFlowDriver.callingSetUpOn(sut,table1.at(0)); // -- extra\r", "+\t\tdoFlowDriver.interpretingRowReturning(table1.at(1), null);\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfLastTable(list(result));\r", "+\t\tdoFlowDriver.callingTearDownOn(result, table1.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table1);\r", "+\r", "+\t\tdoFlowDriver.runStorytest(tables);\r"], "commitAfterChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "signatureAfterChange": "\r \r \tprivate void verifyScopePush(final Object result, final Object sut)", "id": "3ced7f2c8b2cf74fd00f5b2f175ebc75", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tpublic void runTable(Table table, TableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 4, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic void runTable(Table table, TableListener tableListener) {\r", "+\tpublic void runTable(Table table, ITableListener tableListener) {\r", "-\t\t\tif (testResults.isAbandoned()) {\r", "-\t\t\t\tif (suiteFixture == null)\r", "+\t\t\tif (row.cell(0).hadError()) {\r", "+\t\t\t\t// Already failed due to plain text problems\r", "+\t\t\t} else if (runtime.isAbandoned(testResults)) {\r", "+//\t\t\t\tif (!testResults.problems())\r", "-\t\t\t} else\r", "+\t\t\t} else {\r", "-\t\t\t\t\tTypedObject typedResult = flowEvaluator.interpretRow(row,testResults,null);\r", "-\t\t\t\t\tObject result = doAutoWrapper.wrapObjectWithTraverse(typedResult);\r", "-//\t\t\t\t\tSystem.out.println(\"DoFlow got \"+result);\r", "-\t\t\t\t\tif (result == null) {\r", "-\t\t\t\t\t\t// Can't do anything useful with a null\r", "-\t\t\t\t\t} else if (result.getClass() == Fixture.class) {\r", "-\t\t\t\t\t\t// Ignore it, as it does nothing.\r", "-\t\t\t\t\t} else if (result.getClass() == DoFixture.class || result.getClass() == DoTraverse.class) {\r", "-\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)result;\r", "-\t\t\t\t\t\t// Unwrap an auto-wrap, keeping the type information, unless it has an outer context\r", "-\t\t\t\t\t\tif (doEvaluator.getNextOuterContext() != null)\r", "-\t\t\t\t\t\t\taDoEvaluator(doEvaluator,table,testResults);\r", "-\t\t\t\t\t\telse if (doEvaluator.getSystemUnderTest() != null)\r", "-\t\t\t\t\t\t\tpushSut(doEvaluator.getTypedSystemUnderTest(),table,testResults);\r", "-\t\t\t\t\t} else if (result instanceof DomainFixtured || result instanceof DomainFixture) {\r", "-\t\t\t\t\t\tpushSut(result,table,testResults);\r", "-\t\t\t\t\t\tdomainInject = new DomainInjectionTraverse(this);\r", "-\t\t\t\t\t\tdomainInject.setSystemUnderTest(result);\r", "-\t\t\t\t\t\tsetRuntimeContext(domainInject);\r", "-\t\t\t\t\t\tdomainCheck = new DomainCheckTraverse(this);\r", "-\t\t\t\t\t\tdomainCheck.setSystemUnderTest(result);\r", "-\t\t\t\t\t\tsetRuntimeContext(domainCheck);\r", "-\t\t\t\t\t\tcurrent = domainInject;\r", "-\t\t\t\t\t} else if (result instanceof SuiteEvaluator) {\r", "-\t\t\t\t\t\tsuiteFixture = (SuiteEvaluator) result;\r", "-\t\t\t\t\t\tsetRuntimeContext(suiteFixture); // Subsequent tables are global for now.\r", "-\t\t\t\t\t\tcallMethod(suiteFixture, \"suiteSetUp\", table,tableListener.getTestResults());\r", "-\t\t\t\t\t\tpushSut(result,table,testResults);\r", "-\t\t\t\t\t} else if (fixtureThatIsRelevantSubclassOfDoFixture(result)) {\r", "-\t\t\t\t\t\tflowEvaluator.fitHandler().doTable(result,new Table(row),testResults,flowEvaluator);\r", "-\t\t\t\t\t\treturn; // have finished table\r", "-\t\t\t\t\t} else if (result instanceof CollectionSetUpTraverse) {\r", "-\t\t\t\t\t\tDoTraverse doTraverse = (DoTraverse) result;\r", "-\t\t\t\t\t\tsetRuntimeContext(doTraverse);\r", "-\t\t\t\t\t\tdoTraverse.interpretAfterFirstRow(new Table(row), testResults); // It could be any row\r", "-\t\t\t\t\t\tbreak;// have finished table\r", "-\t\t\t\t\t} else if (result instanceof DoEvaluator) {\r", "-\t\t\t\t\t\taDoEvaluator((DoEvaluator) result, table, testResults);\r", "-\t\t\t\t\t} else if (result instanceof Evaluator) { // Calculate, etc\r", "-\t\t\t\t\t\tEvaluator evaluator = (Evaluator) result;\r", "-\t\t\t\t\t\tsetRuntimeContext(evaluator);\r", "-\t\t\t\t\t\tcallSetUpSutChain(evaluator,table, testResults);\r", "-\t\t\t\t\t\tevaluator.interpretAfterFirstRow(new Table(row), testResults); // It could be any row\r", "-\t\t\t\t\t\tcallTearDownSutChain(evaluator,table, testResults);\r", "-\t\t\t\t\t\treturn; // have finished table\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tif (result instanceof Fixture) {\r", "-\t\t\t\t\t\t\tflowEvaluator.fitHandler().doTable(result,new Table(row),testResults,flowEvaluator);\r", "-\t\t\t\t\t\t\treturn; // have finished table\r", "-\t\t\t\t\t\t} else if (DoAutoWrapper.canAutoWrap(result))\r", "-\t\t\t\t\t\t\tpushSut(result,table,testResults);\r", "-\t\t\t\t\t} // But only when it comes from a class name!\r", "+\t\t\t\t\tfinal Cell cell = row.cell(0);\r", "+\t\t\t    \tif (cell.hasEmbeddedTable()) { // Doesn't allow for other cells in row...\r", "+\t\t\t    \t\thandleInnerTables(cell, tableListener);\r", "+\t\t\t    \t} else {\r", "+\t\t\t    \t\trow = mapOddBalls(row,flowEvaluator);\r", "+\t\t\t    \t\tTypedObject typedResult = flowEvaluator.interpretRow(row,testResults);\r", "+\t\t\t    \t\tObject subject = typedResult.getSubject();\r", "+//\t\t\t    \t\tSystem.out.println(\"DoFlow got \"+subject);\r", "+\t\t\t    \t\tif (subject instanceof Evaluator)\r", "+\t\t\t    \t\t\t((Evaluator)subject).setRuntimeContext(flowEvaluator.getRuntimeContext());\r", "+\t\t\t    \t\tif (subject == null) {\r", "+\t\t\t    \t\t\t// Can't do anything useful with a null\r", "+\t\t\t    \t\t} else if (subject.getClass() == Fixture.class) {\r", "+\t\t\t    \t\t\t// Ignore it, as it does nothing.\r", "+\t\t\t    \t\t} else if (subject.getClass() == DoFixture.class || subject.getClass() == DoTraverse.class) {\r", "+\t\t\t    \t\t\thandleActualDoFixture((DoEvaluator)subject,row,testResults);\r", "+\t\t\t    \t\t} else if (subject.getClass() == SelectFixture.class) {\r", "+\t\t\t    \t\t\truntime.showAsAfterTable(\"warning\", \"This is no longer needed\");\r", "+\t\t\t    \t\t\thandleActualDoFixture((DoEvaluator)subject,row,testResults);\r", "+\t\t\t    \t\t} else if (subject instanceof DomainFixtured || subject instanceof DomainFixture) {\r", "+\t\t\t    \t\t\thandleDomainFixture(typedResult, subject, row, testResults);\r", "+\t\t\t    \t\t} else if (subject instanceof SuiteEvaluator) {\r", "+\t\t\t    \t\t\thandleSuiteFixture((SuiteEvaluator)subject, typedResult, row, testResults);\r", "+\t\t\t    \t\t} else if (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "+\t\t\t    \t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, testResults);\r", "+\t\t\t    \t\t\treturn;// have finished table\r", "+\t\t\t    \t\t} else if (subject instanceof DoEvaluator) {\r", "+\t\t\t    \t\t\tpushOnScope(typedResult,row,testResults);\r", "+\t\t\t    \t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "+\t\t\t    \t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, testResults);\r", "+\t\t\t    \t\t\treturn; // have finished table\r", "+\t\t\t    \t\t} else if (subject instanceof Fixture) {\r", "+\t\t\t    \t\t\tflowEvaluator.fitHandler().doTable(subject,new TableOnParse(row),testResults,flowEvaluator);\r", "+\t\t\t    \t\t\treturn; // have finished table\r", "+\t\t\t    \t\t}\r", "+\t\t\t    \t}\r", "+\t\t\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "id": "8d308cc304f57f290bb775c33d256c65", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r \t@Test\r \tpublic void twoDoTraversesSoScopeStackChange()", "fileName": "test/fitlibrary/flow/TestDoFlow.java", "methodNumberAfterChange": 11, "commitBeforeChange": "45400291a9cb47b358ca00f896a8c7e188a58f80", "diff": ["+\r", "-\t\tfinal GenericTypedObject typedResult1 = new GenericTypedObject(new DoTraverse(\"s\"));\r", "-\t\tfinal GenericTypedObject typedResult2 = new GenericTypedObject(new DoTraverse(\"t\"));\r", "-\t\tfinal GenericTypedObject genS = new GenericTypedObject(\"s\");\r", "-\t\tfinal GenericTypedObject genT = new GenericTypedObject(\"t\");\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\toneOf(flowEvaluator).interpretRow(row0,testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(0),testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\texactly(2).of(scopeStack).push(genS);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", row0, testResults);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", tables.at(1).at(0), testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", row0, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", tables.at(1).at(0), testResults);\r", "-\t\t\t\r", "-\t\t\toneOf(flowEvaluator).interpretRow(row1,testResults);\r", "-\t\t\t  will(returnValue(typedResult2));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(1),testResults);\r", "-\t\t\t  will(returnValue(typedResult2));\r", "-\t\t\texactly(2).of(scopeStack).push(genT);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", row1, testResults);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", tables.at(1).at(1), testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", row0, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", tables.at(1).at(0), testResults);\r", "-\t\t\t\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfTable(); will(returnValue(list(genT,genS)));\r", "-\t\t\toneOf(scopeStack).poppedAtEndOfStorytest(); will(returnValue(list(genT,genS)));\r", "-\t\t\toneOf(tableListener).tableFinished(table0);\r", "-\t\t\toneOf(tableListener).tableFinished(tables.at(1));\r", "-\t\t}});\r", "-\t\tdoFlow.runStorytest(tables,tableListener);\r", "+\t\tString s = \"s\";\r", "+\t\tString t = \"t\";\r", "+\t\tfinal Object doS = new DoTraverse(s);\r", "+\t\tfinal Object doT = new DoTraverse(t);\r", "+\r", "+\t\tTable table0 = tables.at(0);\r", "+\t\tTable table1 = tables.at(1);\r", "+\t\t\r", "+\t\tdoFlowDriver.startingOnTable(table0);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(0), doS);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(s);\r", "+\t\tdoFlowDriver.callingSetUpOn(s,table0.at(0));\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(1), doT);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(t);\r", "+\t\tdoFlowDriver.callingSetUpOn(t,table0.at(1));\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfTable(list(t,s));\r", "+\t\tdoFlowDriver.callingTearDownOn(t, table0.at(0));\r", "+\t\tdoFlowDriver.callingTearDownOn(s, table0.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table0);\r", "+\r", "+\t\tdoFlowDriver.startingOnTable(table1);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table1.at(0), doS);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(s);\r", "+\t\tdoFlowDriver.callingSetUpOn(s,table1.at(0));\r", "+\t\tdoFlowDriver.interpretingRowReturning(table1.at(1), doT);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(t);\r", "+\t\tdoFlowDriver.callingSetUpOn(t,table1.at(1));\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfLastTable(list(t,s));\r", "+\t\tdoFlowDriver.callingTearDownOn(t, table1.at(0));\r", "+\t\tdoFlowDriver.callingTearDownOn(s, table1.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table1);\r", "+\r", "+\t\tdoFlowDriver.runStorytest(tables);\r"], "commitAfterChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "signatureAfterChange": "\r \r \t@Test\r \tpublic void twoDoTraversesSoScopeStackChange()", "id": "cf74091c581641ff242df603cb52246f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "271c892990667757bb486f3114f088dc", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \t@Override\r \tpublic Object run(IRow row, TestResults testResults) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/caller/DoActionCaller.java", "methodNumberAfterChange": 2, "commitBeforeChange": "912f2299cb68da9d49ecfc90590037db64cfcc0e", "diff": ["-\tpublic Object run(IRow row, TestResults testResults) throws Exception {\r", "-\t\treturn new ActionCaller(target).run(row, testResults);\r", "+\tpublic TypedObject run(IRow row, TestResults testResults) throws Exception {\r", "+\t\ttry {\r", "+\t\t\tTypedObject typedResult = target.invokeTyped(row.rowFrom(1),testResults);\r", "+\t\t\tObject result = null;\r", "+\t\t\tif (typedResult != null)\r", "+\t\t\t\tresult = typedResult.getSubject();\r", "+\t\t\tif (result instanceof Boolean)\r", "+\t\t\t\ttarget.color(row,((Boolean)result).booleanValue(),testResults);\r", "+\t\t\treturn typedResult;\r", "+\t\t} catch (AbandonException e) {\r", "+\t\t\treturn new GenericTypedObject(null);\r", "+\t\t} catch (InvocationTargetException e) {\r", "+\t\t\tThrowable throwable = PlugBoard.exceptionHandling.unwrapThrowable(e);\r", "+\t\t\tif (throwable instanceof FitLibraryShowException)\r", "+\t\t\t\trow.cell(0).error(testResults);\r", "+\t\t\tthrow e;\r", "+\t\t}\r"], "commitAfterChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "signatureAfterChange": "\r \t@Override\r \tpublic TypedObject run(IRow row, TestResults testResults) throws Exception", "id": "4066fb4ab8b9270184f6541feb37a94b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r     public TypedObject interpretRowBeforeWrapping(Row row, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 7, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-    public TypedObject interpretRowBeforeWrapping(Row row, TestResults testResults) {\r", "-    \ttry {\r", "-    \t\tDoCaller[] actions = createDoCallers(row);\r", "-    \t\tOption<TypedObject> result = interpretSimpleRow(row,testResults,actions);\r", "-    \t\tif (result.isSome())\r", "-    \t\t\treturn result.get();\r", "-    \t\tmethodsAreMissing(actions,possibleSeq(row));\r", "-    \t} catch (IgnoredException ex) {\r", "-    \t\t//\r", "-    \t} catch (AbandonException e) {\r", "-    \t\trow.ignore(testResults);\r", "-    \t} catch (Exception ex) {\r", "-    \t\trow.error(testResults, ex);\r", "-    \t}\r", "-    \treturn GenericTypedObject.NULL;\r", "+    final public TypedObject interpretRowBeforeWrapping(Row row, TestResults testResults) {\r", "+    \treturn dispatchRowInFlow.interpretRowBeforeWrapping(row, testResults);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r     final public TypedObject interpretRowBeforeWrapping(Row row, TestResults testResults)", "id": "7fae1fb71587fb5c5173574bc9363c43", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "4c37748cdefda3e242825644e9bc55ef", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
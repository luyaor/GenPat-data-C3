{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "    protected void bin(Map<Object, Object> result, Object key, Object row)", "fileName": "src/fit/RowFixture.java", "methodNumberAfterChange": 8, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  protected void bin(Map<Object, Object> result, Object key, Object row) {", "-    if (key.getClass().isArray()) {", "-      key = Arrays.asList((Object[]) key);", "-    }", "-    if (result.containsKey(key)) {", "-      ListUtility.uncheckedCast(Object.class, result.get(key)).add(row);", "-    } else {", "-      List<Object> list = new LinkedList<Object>();", "-      list.add(row);", "-      result.put(key, list);", "-    }", "-  }", "+\tprotected void bin(Map<Object, Object> result, Object keyInitial, Object row) {", "+\t\tObject key = keyInitial;", "+\t\tif (key.getClass().isArray()) {", "+\t\t\tkey = Arrays.asList((Object[]) key);", "+\t\t}", "+\t\tif (result.containsKey(key)) {", "+\t\t\tListUtility.uncheckedCast(Object.class, result.get(key)).add(row);", "+\t\t} else {", "+\t\t\tList<Object> list = new LinkedList<Object>();", "+\t\t\tlist.add(row);", "+\t\t\tresult.put(key, list);", "+\t\t}", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tprotected void bin(Map<Object, Object> result, Object keyInitial, Object row)", "id": "68b85634fff67fd2d627b6ab51e1c622", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "   private void interpretFollowingTables(Parse tables)", "fileName": "src/fit/Fixture.java", "methodNumberAfterChange": 7, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  /* Added by Rick */", "-  private void interpretFollowingTables(Parse tables) {", "-    listener.tableFinished(tables);", "-    tables = tables.more;", "-    while (tables != null) {", "-      Parse heading = tables.at(0, 0, 0);", "+\t/* Added by Rick */", "+\tprivate void interpretFollowingTables(Parse tablesInitial) {", "+\t\tParse tables = tablesInitial;", "+\t\tlistener.tableFinished(tables);", "+\t\ttables = tables.more;", "+\t\twhile (tables != null) {", "+\t\t\tParse heading = tables.at(0, 0, 0);", "-      if (forcedAbort) ignore(heading);  //Semaphores: ignore on failed lock", "-      else if (heading != null) {", "-        try {", "-          Fixture fixture = getLinkedFixtureWithArgs(tables);", "-          fixture.doTable(tables);", "-        } catch (Throwable e) {", "-          exception(heading, e);", "-        }", "-      }", "-      listener.tableFinished(tables);", "-      tables = tables.more;", "-    }", "-  }", "+\t\t\tif (forcedAbort)", "+\t\t\t\tignore(heading); // Semaphores: ignore on failed lock", "+\t\t\telse if (heading != null) {", "+\t\t\t\ttry {", "+\t\t\t\t\tFixture fixture = getLinkedFixtureWithArgs(tables);", "+\t\t\t\t\tfixture.doTable(tables);", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\texception(heading, e);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlistener.tableFinished(tables);", "+\t\t\ttables = tables.more;", "+\t\t}", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": " \tprivate void interpretFollowingTables(Parse tablesInitial)", "id": "987c164133557d2e72568f714e1f5ab9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 26, "signatureBeforeChange": "    public static String escape(String string, char from, String to)", "fileName": "src/fit/Fixture.java", "methodNumberAfterChange": 26, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public static String escape(String string, char from, String to) {", "-    int i = -1;", "-    while ((i = string.indexOf(from, i + 1)) >= 0) {", "-      if (i == 0) {", "-        string = to + string.substring(1);", "-      } else if (i == string.length()) {", "-        string = string.substring(0, i) + to;", "-      } else {", "-        string = string.substring(0, i) + to + string.substring(i + 1);", "-      }", "-    }", "-    return string;", "-  }", "+\tpublic static String escape(String s, char from, String to) {", "+\t\tString string = s;", "+\t\tint i = -1;", "+\t\twhile ((i = string.indexOf(from, i + 1)) >= 0) {", "+\t\t\tif (i == 0) {", "+\t\t\t\tstring = to + string.substring(1);", "+\t\t\t} else if (i == string.length()) {", "+\t\t\t\tstring = string.substring(0, i) + to;", "+\t\t\t} else {", "+\t\t\t\tstring = string.substring(0, i) + to + string.substring(i + 1);", "+\t\t\t}", "+\t\t}", "+\t\treturn string;", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic static String escape(String s, char from, String to)", "id": "c920c405c174e8cf0321c43e38793d45", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 14, "signatureBeforeChange": "    public void doCells(Parse cells)", "fileName": "src/fit/Fixture.java", "methodNumberAfterChange": 14, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void doCells(Parse cells) {", "-    for (int i = 0; cells != null; i++) {", "-      try {", "-        doCell(cells, i);", "-      } catch (Exception e) {", "-        exception(cells, e);", "-      }", "-      cells = cells.more;", "-    }", "-  }", "+\tpublic void doCells(Parse cellsInitial) {", "+\t\tParse cells = cellsInitial;", "+\t\tfor (int i = 0; cells != null; i++) {", "+\t\t\ttry {", "+\t\t\t\tdoCell(cells, i);", "+\t\t\t} catch (Exception e) {", "+\t\t\t\texception(cells, e);", "+\t\t\t}", "+\t\t\tcells = cells.more;", "+\t\t}", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic void doCells(Parse cellsInitial)", "id": "d077d5eb96c27cf6d6f6d74280bd4ab9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": " \tprotected void bind(Parse heads)", "fileName": "src/fit/ColumnFixture.java", "methodNumberAfterChange": 7, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-\tprotected void bind(Parse heads) {", "+", "+\tpublic void bind(Parse headsInitial) {", "+\t\tParse heads = headsInitial;"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic void bind(Parse headsInitial)", "id": "e978d126ea1e2bcc9b68a11b9de7ed75", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "    public static String unformat(String s)", "fileName": "src/fit/Parse.java", "methodNumberAfterChange": 12, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public static String unformat(String s) {", "-    int i = 0, j;", "-    while ((i = s.indexOf('<', i)) >= 0) {", "-      if ((j = s.indexOf('>', i + 1)) > 0) {", "-        s = s.substring(0, i) + s.substring(j + 1);", "-      } else", "-        break;", "-    }", "-    return s;", "-  }", "+\tpublic static String unformat(String string) {", "+\t\tString s = string;", "+\t\tint i = 0, j;", "+\t\twhile ((i = s.indexOf('<', i)) >= 0) {", "+\t\t\tif ((j = s.indexOf('>', i + 1)) > 0) {", "+\t\t\t\ts = s.substring(0, i) + s.substring(j + 1);", "+\t\t\t} else", "+\t\t\t\tbreak;", "+\t\t}", "+\t\treturn s;", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic static String unformat(String string)", "id": "f1a0716abb2978a0c4b342a31560fdab", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 20, "signatureBeforeChange": "    public void exception(Parse cell, Throwable exception)", "fileName": "src/fit/Fixture.java", "methodNumberAfterChange": 20, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void exception(Parse cell, Throwable exception) {", "-    while (exception.getClass().equals(InvocationTargetException.class)) {", "-      exception = ((InvocationTargetException) exception).getTargetException();", "-    }", "-    if (isFriendlyException(exception)) {", "-      cell.addToBody(\"<hr/>\" + label(exception.getMessage()));", "-    } else {", "-      final StringWriter buf = new StringWriter();", "-      exception.printStackTrace(new PrintWriter(buf));", "-      cell.addToBody(\"<hr><pre><div class=\\\"fit_stacktrace\\\">\" + (buf.toString()) + \"</div></pre>\");", "-    }", "-    cell.addToTag(\" class=\\\"error\\\"\");", "-    counts.exceptions++;", "-  }", "+\tpublic void exception(Parse cell, Throwable exceptionInitial) {", "+\t\tThrowable exception = exceptionInitial;", "+\t\twhile (exception.getClass().equals(InvocationTargetException.class)) {", "+\t\t\texception = ((InvocationTargetException) exception)", "+\t\t\t\t\t.getTargetException();", "+\t\t}", "+\t\tif (isFriendlyException(exception)) {", "+\t\t\tcell.addToBody(\"<hr/>\" + label(exception.getMessage()));", "+\t\t} else {", "+\t\t\tfinal StringWriter buf = new StringWriter();", "+\t\t\texception.printStackTrace(new PrintWriter(buf));", "+\t\t\tcell.addToBody(\"<hr><pre><div class=\\\"fit_stacktrace\\\">\"", "+\t\t\t\t\t+ (buf.toString()) + \"</div></pre>\");", "+\t\t}", "+\t\tcell.addToTag(\" class=\\\"error\\\"\");", "+\t\tcounts.exceptions++;", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic void exception(Parse cell, Throwable exceptionInitial)", "id": "fe348829358c71feb877b5844a0edcab", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "b31c35189e129fc481b7e6c71905e5c6", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r   public void testSetupDecoratorMustThrowInvalidInputExceptionIfMaxTimeIsNotSpecified() throws ParseException", "fileName": "src/fit/decorator/performance/MaxTimeTest.java", "methodNumberAfterChange": 1, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void testSetupDecoratorMustThrowInvalidInputExceptionIfMaxTimeIsNotSpecified() throws ParseException {\r", "-    try {\r", "-      decorator.setupDecorator(new String[0]);\r", "-      fail(\"Should blow up \");\r", "-    } catch (InvalidInputException e) {\r", "-      // expected\r", "-    }\r", "-  }\r", "+\tpublic void testSetupDecoratorMustThrowInvalidInputExceptionIfMaxTimeIsNotSpecified() {\r", "+\t\ttry {\r", "+\t\t\tdecorator.setupDecorator(new String[0]);\r", "+\t\t\tfail(\"Should blow up \");\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\t// expected\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tpublic void testSetupDecoratorMustThrowInvalidInputExceptionIfMaxTimeIsNotSpecified()", "id": "1165d96af10fb4ef5a608097dc96feb1", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \r   public void testSetupDecoratorShouldThrowInvalidInputExceptionIfCounterIsNotSpecified() throws ParseException", "fileName": "src/fit/decorator/CopyAndAppendLastRowTest.java", "methodNumberAfterChange": 2, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void testSetupDecoratorShouldThrowInvalidInputExceptionIfCounterIsNotSpecified() throws ParseException {\r", "-    try {\r", "-      decorator.setupDecorator(new String[0]);\r", "-      fail(\"Should blow up\");\r", "-    } catch (InvalidInputException e) {\r", "-      assertEquals(\"Count for number of times to add the last row must be specified\", e.getMessage());\r", "-    }\r", "-  }\r", "+\tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfCounterIsNotSpecified() {\r", "+\t\ttry {\r", "+\t\t\tdecorator.setupDecorator(new String[0]);\r", "+\t\t\tfail(\"Should blow up\");\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\tassertEquals(\r", "+\t\t\t\t\t\"Count for number of times to add the last row must be specified\",\r", "+\t\t\t\t\te.getMessage());\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfCounterIsNotSpecified()", "id": "2e0f5a15c773d4451934ec32d05bb6ef", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \r   public void testSetupDecoratorShouldThrowInvalidInputExceptionIfDeltaValueIsNotSpecified() throws ParseException", "fileName": "src/fit/decorator/IncrementColumnsValueTest.java", "methodNumberAfterChange": 6, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void testSetupDecoratorShouldThrowInvalidInputExceptionIfDeltaValueIsNotSpecified() throws ParseException {\r", "-    assertInvalidInputException(new String[]\r", "-      {\"Column1\", \"double\"}, \"Column name, Data type and Delta Value must be specified\");\r", "-  }\r", "+\tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfDeltaValueIsNotSpecified() {\r", "+\t\tassertInvalidInputException(new String[] { \"Column1\", \"double\" },\r", "+\t\t\t\t\"Column name, Data type and Delta Value must be specified\");\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfDeltaValueIsNotSpecified()", "id": "2f1a9c80f11d1b9ead633527a67fc483", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 15, "signatureBeforeChange": "\r \r   private void assertInvalidInputException(String[] args, String errorMsg) throws ParseException", "fileName": "src/fit/decorator/IncrementColumnsValueTest.java", "methodNumberAfterChange": 15, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  private void assertInvalidInputException(String[] args, String errorMsg) throws ParseException {\r", "-    try {\r", "-      decorator.setupDecorator(args);\r", "-      fail(\"Should blow up\");\r", "-    } catch (InvalidInputException e) {\r", "-      assertEquals(errorMsg, e.getMessage());\r", "-    }\r", "-  }\r", "+\tprivate void assertInvalidInputException(String[] args, String errorMsg) {\r", "+\t\ttry {\r", "+\t\t\tdecorator.setupDecorator(args);\r", "+\t\t\tfail(\"Should blow up\");\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\tassertEquals(errorMsg, e.getMessage());\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tprivate void assertInvalidInputException(String[] args, String errorMsg)", "id": "38ee13f79619855719bebae51a4606e4", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \r   public void testSetupDecoratorShouldThrowInvalidInputExceptionIfColumnNameIsNotSpecified() throws ParseException", "fileName": "src/fit/decorator/IncrementColumnsValueTest.java", "methodNumberAfterChange": 4, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void testSetupDecoratorShouldThrowInvalidInputExceptionIfColumnNameIsNotSpecified() throws ParseException {\r", "-    assertInvalidInputException(new String[]\r", "-      {}, \"Column name, Data type and Delta Value must be specified\");\r", "-  }\r", "+\tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfColumnNameIsNotSpecified() {\r", "+\t\tassertInvalidInputException(new String[] {},\r", "+\t\t\t\t\"Column name, Data type and Delta Value must be specified\");\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfColumnNameIsNotSpecified()", "id": "ab8b8d217aece0a858c3f05461a6d0bf", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \r   public void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeAndDeltaValueDoNotMatch()\r     throws ParseException", "fileName": "src/fit/decorator/IncrementColumnsValueTest.java", "methodNumberAfterChange": 7, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeAndDeltaValueDoNotMatch()\r", "-    throws ParseException {\r", "-    assertInvalidInputException(new String[]\r", "-      {\"Column1\", \"double\", \"xyz\"}, \"value 'xyz' is not a valid DataType = 'double'\");\r", "-    assertInvalidInputException(new String[]\r", "-      {\"Column1\", \"int\", \"1.2\"}, \"value '1.2' is not a valid DataType = 'int'\");\r", "-    assertInvalidInputException(new String[]\r", "-      {\"Column1\", \"date\", \"12-5-2006\"}, \"value '12-5-2006' is not a valid DataType = 'date'\");\r", "-  }\r", "+\tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeAndDeltaValueDoNotMatch() {\r", "+\t\tassertInvalidInputException(\r", "+\t\t\t\tnew String[] { \"Column1\", \"double\", \"xyz\" },\r", "+\t\t\t\t\"value 'xyz' is not a valid DataType = 'double'\");\r", "+\t\tassertInvalidInputException(new String[] { \"Column1\", \"int\", \"1.2\" },\r", "+\t\t\t\t\"value '1.2' is not a valid DataType = 'int'\");\r", "+\t\tassertInvalidInputException(new String[] { \"Column1\", \"date\",\r", "+\t\t\t\t\"12-5-2006\" },\r", "+\t\t\t\t\"value '12-5-2006' is not a valid DataType = 'date'\");\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeAndDeltaValueDoNotMatch()", "id": "b80ce945436bee08f3e193b16097084b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r   public void testSetupDecoratorShouldThrowInvalidInputExceptionIfLoopCountIsNotSpecified() throws ParseException", "fileName": "src/fit/decorator/LoopTest.java", "methodNumberAfterChange": 0, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void testSetupDecoratorShouldThrowInvalidInputExceptionIfLoopCountIsNotSpecified() throws ParseException {\r", "-    try {\r", "-      decorator.setupDecorator(new String[0]);\r", "-      fail(\"Should blow up\");\r", "-    } catch (InvalidInputException e) {\r", "-      assertEquals(\"Loop count must be specified\", e.getMessage());\r", "-    }\r", "-  }\r", "+\tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfLoopCountIsNotSpecified() {\r", "+\t\ttry {\r", "+\t\t\tdecorator.setupDecorator(new String[0]);\r", "+\t\t\tfail(\"Should blow up\");\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\tassertEquals(\"Loop count must be specified\", e.getMessage());\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfLoopCountIsNotSpecified()", "id": "c218646bd33d92a51886894ababd1e22", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \r   public void testSetupDecoratorMustThrowInvalidInputExceptionIfTimeRangeIsNotSpecified() throws ParseException", "fileName": "src/fit/decorator/performance/TimeRangeTest.java", "methodNumberAfterChange": 2, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void testSetupDecoratorMustThrowInvalidInputExceptionIfTimeRangeIsNotSpecified() throws ParseException {\r", "-    try {\r", "-      decorator.setupDecorator(new String[]\r", "-        {\"10\"});\r", "-      fail(\"Should blow up \");\r", "-    } catch (InvalidInputException e) {\r", "-      // expected\r", "-    }\r", "-  }\r", "+\tpublic void testSetupDecoratorMustThrowInvalidInputExceptionIfTimeRangeIsNotSpecified() {\r", "+\t\ttry {\r", "+\t\t\tdecorator.setupDecorator(new String[] { \"10\" });\r", "+\t\t\tfail(\"Should blow up \");\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\t// expected\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tpublic void testSetupDecoratorMustThrowInvalidInputExceptionIfTimeRangeIsNotSpecified()", "id": "d05098d24be6f0e5c97e7e22830220ae", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \r   public void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeIsNotSpecified() throws ParseException", "fileName": "src/fit/decorator/IncrementColumnsValueTest.java", "methodNumberAfterChange": 5, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeIsNotSpecified() throws ParseException {\r", "-    assertInvalidInputException(new String[]\r", "-      {\"Column1\"}, \"Column name, Data type and Delta Value must be specified\");\r", "-  }\r", "+\tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeIsNotSpecified() {\r", "+\t\tassertInvalidInputException(new String[] { \"Column1\" },\r", "+\t\t\t\t\"Column name, Data type and Delta Value must be specified\");\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeIsNotSpecified()", "id": "e91758b7d7348fa3dfac9c299cbabb34", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "8feb2366e9e8a88ead3e3cc18d4a4a8c", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \t\r \tpublic void logAsAfterTable(String title, String message)", "fileName": "src/fitlibrary/runtime/FoldingTexts.java", "methodNumberAfterChange": 0, "commitBeforeChange": "e707c5d4a5e9cc595d3860282fcc92e4bfdeb17a", "diff": ["-\t\tString messages = folds.get(title);\r", "-\t\tif (messages == null)\r", "-\t\t\tfolds.put(title,message);\r", "-\t\telse\r", "-\t\t\tfolds.put(title,messages+message);\r", "-\t}\r", "+\t\tsynchronized(folds) {\r", "+\t\t\tStringBuilder messages = folds.get(title);\r", "+\t\t\tif (messages == null)\r", "+\t\t\t\tfolds.put(title,new StringBuilder(message));\r", "+\t\t\telse\r", "+\t\t\t\tmessages.append(message);\r", "+\t\t}\r", "+}\r"], "commitAfterChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "signatureAfterChange": "\r \t\r \tpublic void logAsAfterTable(String title, String message)", "id": "3c80610a06079d58615dbcfa0689a825", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r     private void doTable(Table theTable)", "fileName": "src/fitlibrary/spec/SpecifySuiteFixture.java", "methodNumberAfterChange": 1, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-    private void doTable(Table theTable) {\r", "-        TestResults testResults = TestResults.create(counts);\r", "+    private void doTable(TableOnParse theTable) {\r", "+        TestResults testResults = new TestResults(counts);\r", "-            Row row = theTable.row(rowNo);\r", "+            RowOnParse row = theTable.row(rowNo);\r", "-\t\t\t\ttheTable.error(testResults, new RowWrongWidthException(2));\r", "+\t\t\t\trow.error(testResults, new RowWrongWidthException(2));\r", "-                theTable.error(testResults, new NestedTableExpectedException());\r", "+            \trow.error(testResults, new NestedTableExpectedException());\r", "-            batch.doStorytest(new Tables(actual));\r", "+            batch.doStorytest(new TablesOnParse(actual));\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r     private void doTable(TableOnParse theTable)", "id": "aed38dc5c6c938db7037b986b11ad782", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsFailWithParseExceptionInIgnoredException() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 8, "commitBeforeChange": "9d277f354a9817ba2a558b5341fccc0bc0fe3de2", "diff": ["+\t}\r", "+\t@Test\r", "+\tpublic void reportsErrorWithShowExceptionInIgnoredExceptionWhenErrorOnException() throws Exception {\r", "+\t\tfinal FitLibraryShowException show = new FitLibraryShowException(new Show(\"\"));\r", "+\t\tcontext.checking(new NotExpectations() {{\r", "+\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);\r", "+\t\t\t  will(throwException(new IgnoredException(show)));\r", "+\t\t\tone(initialRow).error(testResults,show);\r", "+\t\t}});\r", "+\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.ERROR_ON_EXCEPION);\r", "+\t\tlazySpecial.run(testResults);\r", "+\t}\r", "-\tpublic void reportsFailWithParseExceptionInIgnoredException() throws Exception {\r", "-\t\tfinal BadNumberException embeddedException = new BadNumberException();\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);\r", "-\t\t\t  will(throwException(new IgnoredException(embeddedException)));\r", "-\t\t\tone(initialRow).error(testResults,embeddedException);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.ERROR_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r"], "commitAfterChange": "5c75a22ff92df58ac27695ae19554e2bc4760240", "signatureAfterChange": "\r \t@Test\r \tpublic void reportsErrorWithShowExceptionInIgnoredExceptionWhenErrorOnException() throws Exception", "id": "c19ae3e0a036a160d1c006b43a7407ad", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "5f94433b3b30011d0e92755d4849f34c", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
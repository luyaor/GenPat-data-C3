{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \t@Override\r \tpublic void doTable(Parse table)", "fileName": "src/fitlibrary/spec/SpecifyFixture.java", "methodNumberAfterChange": 2, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-public class SpecifyFixture extends Fixture {\r", "+\t}\r", "-\tpublic void doTable(Parse table) {\r", "-\t\tfinal Parse firstRow = table.parts.more;\r", "-\t\tfinal Parse actual = firstRow.parts.parts;\r", "-\t\tfinal Parse secondRow = firstRow.more;\r", "-\t\tParse expectedCell;\r", "-\t\tif (secondRow != null)\r", "-\t\t\texpectedCell = secondRow.parts;\r", "-\t\telse\r", "-\t\t\texpectedCell = firstRow.parts.more;\r", "-\t\tParse expected = expectedCell.parts;\r", "+\tpublic Object interpretAfterFirstRow(Table table, TestResults testResults) {\r", "+\t\ttry {\r", "+\t\t\tCell actualCell = table.at(1).at(0);\r", "+\t\t\tif (actualCell.isEmpty())\r", "+\t\t\t\tthrow new FitLibraryException(\"Missing nested tables to be run\");\r", "+\t\t\tCell expectedCell = expectedOf(table);\r", "+\t\t\tTables expectedTables = expectedCell.getEmbeddedTables();\r", "+\t\t\tTables actualTables = actualCell.getEmbeddedTables();\r", "+\t\t\trunner.doStorytest(actualTables);\r", "+\t\t\tif (tablesEqual(\"\",actualTables,expectedTables)) {\r", "+\t\t\t\texpectedCell.pass(testResults);\r", "+\t\t\t\ttestResults.addRights(cellCount(actualTables) - 1);\r", "+\t\t\t} else {\r", "+\t\t\t\texpectedCell.fail(testResults);\r", "+\t\t\t\terrorReport.actualResult(actualTables);\r", "+\t\t\t}\r", "+\t\t} catch (Exception e) {\r", "+\t\t\ttable.error(testResults, e);\r", "+\t\t}\r", "+\t\treturn null;\r", "+\t}\r", "-\t\tnew BatchFitLibrary().doStorytest(TableFactory.tables(actual));\r", "-\t\tif (reportsEqual(actual,expected)) {\r", "-\t\t\tright(expectedCell);\r", "-\t\t\tcounts.right += cellCount(actual) - 1;\r", "-\t\t} else {\r", "-\t\t\twrong(expectedCell);\r", "-\t\t\tParseUtility.printParse(actual,\"actual\");\r", "-\t\t\taddTableToBetterShowDifferences(table,actual,expected);\r", "-\t}\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "52bfb8307ba15cc7811d4923dcfe4e41", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r     private void doTable(Table theTable)", "fileName": "src/fitlibrary/spec/SpecifySuiteFixture.java", "methodNumberAfterChange": 0, "commitBeforeChange": "1f73cbb5de4c1093ac1830526b85ef0e41bcdeb6", "diff": ["+public class SpecifySuiteFixture extends SpecifyFixture {\r", "-\t}\r", "-    private void doTable(Table theTable) {\r", "-        TestResults testResults = TestResultsFactory.testResults(counts);\r", "-        BatchFitLibrary batch = new BatchFitLibrary();\r", "-    \tfor (int rowNo = 1; rowNo < theTable.size(); rowNo++) {\r", "-            Row row = theTable.at(rowNo);\r", "+\tpublic Object interpretAfterFirstRow(Table table, TestResults testResults) {\r", "+    \tfor (int rowNo = 1; rowNo < table.size(); rowNo++) {\r", "+            Row row = table.at(rowNo);\r", "-            Cell test = row.at(0);\r", "-            Cell report = row.at(1);\r", "-            if (!test.hasEmbeddedTables()) {\r", "+            Cell testCell = row.at(0);\r", "+            Cell reportCell = row.at(1);\r", "+            if (!testCell.hasEmbeddedTables()) {\r", "-                return;\r", "+                return null;\r", "-            Parse actual = test.getEmbeddedTables().parse();\r", "-            Parse expected = report.getEmbeddedTables().parse();\r", "+            Tables actualTables = testCell.getEmbeddedTables();\r", "+            Tables expectedTables = reportCell.getEmbeddedTables();\r", "-            batch.doStorytest(TableFactory.tables(actual));\r", "-\t\t\tif (reportsEqual(actual, expected))\r", "-                report.pass(testResults);\r", "-            else {\r", "-                report.fail(testResults);\r", "-                ParseUtility.printParse(actual,\"actual\");\r", "-                addTableToBetterShowDifferences(theTable.parse(),\r", "-                        actual,expected);\r", "+            runner.doStorytest(actualTables);\r", "+\t\t\tif (tablesCompare.tablesEqual(\"\",actualTables, expectedTables)) {\r", "+                reportCell.pass(testResults);\r", "+\t\t\t\ttestResults.addRights(cellCount(actualTables) - 1);\r", "+\t\t\t} else {\r", "+                reportCell.fail(testResults);\r", "+                errorReport.actualResult(actualTables);\r", "-    \tbatch.exit();\r", "+    \treturn null;\r"], "commitAfterChange": "8655c08986fab4cb3523c8934e8765739689b282", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "7891023ce7bbec12b8f3e62fa7446850", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "6249018f11234b47b4dd26c5c65f3d3a", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 66, "signatureBeforeChange": "\r \tpublic void check(final Row row, TestResults testResults) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 66, "commitBeforeChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "diff": ["-\tpublic void check(final Row row, TestResults testResults) throws Exception {\r", "-\t\tint less = 3;\r", "-\t\tif (row.size() < less)\r", "-\t\t\tthrow new MissingCellsException(\"DoTraverseCheck\");\r", "-\t\tCalledMethodTarget target = findMethodFromRow(row,1,less);\r", "-\t\tCell expectedCell = row.last();\r", "-\t\tif (gatherExpectedForGeneration)\r", "-\t\t\texpectedResult = target.getResult(expectedCell,testResults);\r", "-\t\ttarget.invokeAndCheckForSpecial(row.rowFrom(2),expectedCell,testResults,row,row.cell(0));\r", "+//\t}\r", "+\tpublic Option<LazySpecial> check(final IRow row, final TestResults testResults) throws Exception {\r", "+\t\treturn new SpecialAction(this).check(row, testResults);\r"], "commitAfterChange": "12148fc44971a9675907d16fb4f5c02ec935596d", "signatureAfterChange": "\r \tpublic Option<LazySpecial> check(final IRow row, final TestResults testResults) throws Exception", "id": "8df80df2733647331a85380d5049c25b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tpublic Option<LazySpecial> check(final IRow row, final TestResults testResults) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/special/SpecialAction.java", "methodNumberAfterChange": 1, "commitBeforeChange": "44a0e3700bd1d17cff7e5d246ad3da64c81df532", "diff": ["-\tpublic Option<LazySpecial> check(final IRow row, final TestResults testResults) throws Exception {\r", "-\t\tint less = 3;\r", "-\t\tif (row.size() < less)\r", "-\t\t\tthrow new MissingCellsException(\"DoTraverseCheck\");\r", "-\t\t\tfinal ICalledMethodTarget target = actionContext.findMethodFromRow(row,1,less);\r", "-\t\t\tfinal ICell expectedCell = row.last();\r", "-\t\t\treturn new Some<LazySpecial>(new LazySpecial() {\r", "-\t\t\t\t@Override\r", "-\t\t\t\tpublic Object run(TestResults testResults) {\r", "-\t\t\t\t\tif (actionContext.isGatherExpectedForGeneration()) // This needs to use a copy of the row, otherwise duplicates error messages\r", "-\t\t\t\t\t\tactionContext.setExpectedResult(target.getResult(expectedCell,testResults));\r", "-\t\t\t\t\ttarget.invokeAndCheckForSpecial(row.rowFrom(2),expectedCell,testResults,row,row.cell(0));\r", "-\t\t\t\t\treturn null;\r", "+\tpublic TwoStageSpecial check(final IRow row) throws Exception {\r", "+\t\tif (row.size() <= 2)\r", "+\t\t\tthrow new MissingCellsException(\"Do\");\r", "+\t\tfinal ICalledMethodTarget target = actionContext.findMethodFromRow(row,1,1);\r", "+\t\tfinal ICell expectedCell = row.last();\r", "+\t\treturn new TwoStageSpecial() {\r", "+\t\t\t@Override\r", "+\t\t\tpublic Object run(TestResults testResults) {\r", "+\t\t\t\tif (actionContext.isGatherExpectedForGeneration()) // This needs to use a copy of the row, otherwise duplicates error messages\r", "+\t\t\t\t\tactionContext.setExpectedResult(target.getResult(expectedCell,testResults));\r", "+\t\t\t\ttarget.invokeAndCheckForSpecial(row.rowFrom(2),expectedCell,testResults,row,row.cell(0));\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r", "+\t\t};\r", "+\t}\r", "-\t\t\t});\r"], "commitAfterChange": "9069de478dc17e7793f2685307ecb6fa153f06e7", "signatureAfterChange": "\r \tpublic TwoStageSpecial check(final IRow row) throws Exception", "id": "ac3ac0db9dd76ab0a84d12ac666ad293", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "c93a47ca6afe86c86f848137b0bda0ea", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL"]}
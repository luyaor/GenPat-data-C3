{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tprivate void findMethodsFromPlainText(String textCall, List<ValidCall> results)", "fileName": "src/fitlibrary/traverse/workflow/PlainText.java", "methodNumberAfterChange": 3, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\tdoTraverse.switchSetUp().findMethodsFromPlainText(textCall,results);\r", "+\t\tPlugBoard.lookupTarget.findMethodsFromPlainText(textCall,results,doTraverse.getRuntimeContext().getScope());\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate void findMethodsFromPlainText(String textCall, List<ValidCall> results)", "id": "a4d3bc48233e35dc54dd0dfbd31592f7", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic MultiDefinedActionCaller(Row row, DoTraverseInterpreter doTraverse)", "fileName": "src/fitlibrary/traverse/workflow/caller/MultiDefinedActionCaller.java", "methodNumberAfterChange": 0, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\tfurtherRows = row.hasFurtherRows();\r", "+\t\tthis.furtherRows = doTraverse.getRuntimeContext().hasRowsAfter(row);\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \r \tpublic MultiDefinedActionCaller(Row row, DoTraverseInterpreter doTraverse)", "id": "b48635b94071c3fed60ba36ffceb1321", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 29, "signatureBeforeChange": "\r \tpublic void callStartCreatingObjectMethod(TypedObject object) throws IllegalAccessException, InvocationTargetException", "fileName": "src/fitlibrary/traverse/Traverse.java", "methodNumberAfterChange": 28, "commitBeforeChange": "1d44b64cbd6fe822c03990c564745b178a53b359", "diff": ["-\t\tIScope scope = scopeOf(this);\r", "+\t\tIScope scope = this.getRuntimeContext().getScope();\r"], "commitAfterChange": "e4ab562e1e827e062d1be5204027041002fec975", "signatureAfterChange": "\r \tpublic void callStartCreatingObjectMethod(TypedObject object) throws IllegalAccessException, InvocationTargetException", "id": "c267279e1b9d5912a1ef267aec5db034", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "81c150ff6d46b21432716d4a1911413f", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
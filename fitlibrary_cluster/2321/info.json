{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tprivate static void macroReplace(Tables tables, Map<String,Object> mapToRef, VariableResolver resolver)", "fileName": "src/fitlibrary/definedAction/ParameterBinder.java", "methodNumberAfterChange": 3, "commitBeforeChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "diff": ["-\t}\r", "-\tprivate static void macroReplace(Tables tables, Map<String,Object> mapToRef, VariableResolver resolver) {\r", "-\t\tList<String> reverseSortOrder = new ArrayList<String>(mapToRef.keySet());\r", "-\t\tCollections.sort(reverseSortOrder,new Comparator<String>() {\r", "-\t\t\tpublic int compare(String arg0, String arg1) {\r", "-\t\t\t\treturn arg1.compareTo(arg0);\r", "-\t\t\t}\r", "-\t\t});\r", "-\t\tfor (String key : reverseSortOrder)\r", "-\t\t\tmacroReplaceTables(tables, key, mapToRef.get(key),resolver);\r", "-\t}\r", "+\tpublic void verifyHeaderAgainstFormalParameters(Row row, VariableResolver resolver) {\r", "+\t\tif (row.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+row.size());\r", "+\t\tHashSet<String> set = new HashSet<String>();\r", "+\t\tfor (int c = 0; c < row.size(); c++) {\r", "+\t\t\tString headerName = row.text(c, resolver);\r", "+\t\t\tif (!formalParameters.contains(headerName))\r", "+\t\t\t\tthrow new FitLibraryException(\"Unknown parameter: '\"+headerName+\"'\");\r", "+\t\t\tif (set.contains(headerName))\r", "+\t\t\t\tthrow new FitLibraryException(\"Duplicate parameter: '\"+headerName+\"'\");\r", "+\t\t\tset.add(headerName);\r"], "commitAfterChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "signatureAfterChange": "\r \tpublic void verifyHeaderAgainstFormalParameters(Row row, VariableResolver resolver)", "id": "14eb11621a805ea725639ffd7c6b117c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \t@Override\r \tpublic void doTable(Parse table)", "fileName": "src/fitlibrary/spec/SpecifyFixture.java", "methodNumberAfterChange": 2, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-public class SpecifyFixture extends Fixture {\r", "+\t}\r", "-\tpublic void doTable(Parse table) {\r", "-\t\tfinal Parse firstRow = table.parts.more;\r", "-\t\tfinal Parse actual = firstRow.parts.parts;\r", "-\t\tfinal Parse secondRow = firstRow.more;\r", "-\t\tParse expectedCell;\r", "-\t\tif (secondRow != null)\r", "-\t\t\texpectedCell = secondRow.parts;\r", "-\t\telse\r", "-\t\t\texpectedCell = firstRow.parts.more;\r", "-\t\tParse expected = expectedCell.parts;\r", "+\tpublic Object interpretAfterFirstRow(Table table, TestResults testResults) {\r", "+\t\ttry {\r", "+\t\t\tCell actualCell = table.at(1).at(0);\r", "+\t\t\tif (actualCell.isEmpty())\r", "+\t\t\t\tthrow new FitLibraryException(\"Missing nested tables to be run\");\r", "+\t\t\tCell expectedCell = expectedOf(table);\r", "+\t\t\tTables expectedTables = expectedCell.getEmbeddedTables();\r", "+\t\t\tTables actualTables = actualCell.getEmbeddedTables();\r", "+\t\t\trunner.doStorytest(actualTables);\r", "+\t\t\tif (tablesEqual(\"\",actualTables,expectedTables)) {\r", "+\t\t\t\texpectedCell.pass(testResults);\r", "+\t\t\t\ttestResults.addRights(cellCount(actualTables) - 1);\r", "+\t\t\t} else {\r", "+\t\t\t\texpectedCell.fail(testResults);\r", "+\t\t\t\terrorReport.actualResult(actualTables);\r", "+\t\t\t}\r", "+\t\t} catch (Exception e) {\r", "+\t\t\ttable.error(testResults, e);\r", "+\t\t}\r", "+\t\treturn null;\r", "+\t}\r", "-\t\tnew BatchFitLibrary().doStorytest(TableFactory.tables(actual));\r", "-\t\tif (reportsEqual(actual,expected)) {\r", "-\t\t\tright(expectedCell);\r", "-\t\t\tcounts.right += cellCount(actual) - 1;\r", "-\t\t} else {\r", "-\t\t\twrong(expectedCell);\r", "-\t\t\tParseUtility.printParse(actual,\"actual\");\r", "-\t\t\taddTableToBetterShowDifferences(table,actual,expected);\r", "-\t}\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "52bfb8307ba15cc7811d4923dcfe4e41", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \tprivate static void macroReplaceCell(Cell cell, String key, Object value, VariableResolver resolver)", "fileName": "src/fitlibrary/definedAction/ParameterBinder.java", "methodNumberAfterChange": 4, "commitBeforeChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "diff": ["-\tprivate static void macroReplaceCell(Cell cell, String key, Object value, VariableResolver resolver) {\r", "-\t\t// Do NOT do dynamic variable substitution at this stage; it has to be done dynamically.\r", "-\t\tif (cell.hasEmbeddedTables(resolver))\r", "-\t\t\tmacroReplaceTables(cell.getEmbeddedTables(),key,value,resolver);\r", "-\t\tString text = cell.fullText();\r", "-\t\tif (value instanceof String) {\r", "-\t\t\tString update = StringUtility.replaceString(text, key, (String)value);\r", "-\t\t\tif (!update.equals(text))\r", "-\t\t\t\tcell.setText(update);\r", "-\t\t} else { // Embedded tables: Just replace once\r", "-\t\t\tTables valueTables = (Tables) value;\r", "-\t\t\tint at = text.indexOf(key);\r", "-\t\t\tif (at < 0)\r", "-\t\t\t\treturn;\r", "-\t\t\tcell.addTables(valueTables.deepCopy());\r", "-\t\t\tcell.setLeader(text.substring(0,at));\r", "-\t\t\tcell.last().setTrailer(text.substring(at+key.length()));\r", "+\tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables) {\r", "+\t\tif (callRow.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+callRow.size());\r", "+\t\tfor (int c = 0; c < callRow.size(); c++) {\r", "+\t\t\tString parameter = parameterRow.text(c, dynamicVariables);\r", "+\t\t\tif (callRow.at(c).hasEmbeddedTables(dynamicVariables))\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.at(c).getEmbeddedTables());\r", "+\t\t\telse\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.text(c, dynamicVariables));\r"], "commitAfterChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "signatureAfterChange": "\r \tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables)", "id": "c468efc7167d504f1bffc9a7a9ee8740", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "7f42022e61535c893db137b77870b097", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
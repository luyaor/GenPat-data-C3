{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 16, "signatureBeforeChange": "\r \tprivate void methodsAreMissing(DoCaller[] actions, String possibleFixtureName)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 21, "commitBeforeChange": "1a9b02fce576bf8c0ae1342055a0c5082b525445", "diff": ["-\tprivate void methodsAreMissing(DoCaller[] actions, String possibleFixtureName) {\r", "-\t\t// It would be better to pass all these exceptions on in a wrapper exception.\r", "-\t\t// Then they can be sorted and organised into <hr> lines in the cell.\r", "-\t\tfinal String OR = \" OR: \";\r", "-\t\tString missingMethods = \"\";\r", "-\t\tString missingAt = \"\";\r", "+\tprivate void methodsAreMissing(DoCaller[] actions, String possibleFixtureName, String possibleSequenceCall) {\r", "+\t\tList<String> missingMethods = new ArrayList<String>();\r", "+\t\tList<Class<?>> possibleClasses = new ArrayList<Class<?>>();\r", "-\t\t\t\t\tmissingMethods += OR+missingMethodException.getMethodSignature();\r", "-\t\t\t\t\tmissingAt = missingMethodException.getClasses();\r", "+\t\t\t\t\tmissingMethods.addAll(missingMethodException.getMethodSignature());\r", "+\t\t\t\t\tfor (Class<?> c : missingMethodException.getClasses())\r", "+\t\t\t\t\t\tif (!possibleClasses.contains(c))\r", "+\t\t\t\t\t\t\tpossibleClasses.add(c);\r", "-\t\t\t\t\tambiguousMethods += OR+ambiguousNameException.getMessage();\r", "+\t\t\t\t\tambiguousMethods += \"<li>\"+ambiguousNameException.getMessage()+\"</li>\";\r", "-\t\t\t\t\tmissingMethods += OR+exception.getMessage();\r", "+\t\t\t\t\tmissingMethods.add(exception.getMessage());\r", "-\t\t\t\t\tmissingMethods += OR+exception.getMessage();\r", "+\t\t\t\t\tmissingMethods.add(exception.getMessage());\r", "+\t\tif (!missingMethods.isEmpty() && !possibleSequenceCall.isEmpty())\r", "+\t\t\tmissingMethods.add(possibleSequenceCall);\r", "-\t\tif (!\"\".equals(missingMethods))\r", "-\t\t\tmessage += \"Missing methods: \"+missingMethods.substring(OR.length());\r", "-\t\tif (!\"\".equals(ambiguousMethods))\r", "-\t\t\tmessage += \" \"+ambiguousMethods.substring(OR.length());\r", "-\t\tif (!\"\".equals(missingAt))\r", "-\t\t\tmessage += \" in \"+missingAt;\r", "-\t\tthrow new FitLibraryException(message.trim());\r", "+\t\tif (!missingMethods.isEmpty())\r", "+\t\t\tmessage += \"Missing method. Possibly:\"+MissingMethodException.htmlListOfSignatures(missingMethods);\r", "+\t\tif (!ambiguousMethods.isEmpty())\r", "+\t\t\tmessage += \"<ul>\"+ambiguousMethods+\"</ul>\";\r", "+\t\tif (!possibleClasses.isEmpty())\r", "+\t\t\tmessage += \"<hr/>Possibly in class:\"+MissingMethodException.htmlListOfClassNames(possibleClasses);\r", "+\t\tthrow new FitLibraryExceptionInHtml(message.trim());\r"], "commitAfterChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "signatureAfterChange": "\r \tprivate void methodsAreMissing(DoCaller[] actions, String possibleFixtureName, String possibleSequenceCall)", "id": "2fe76162365fe40a8a6a73c8d7ba9b08", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tprivate boolean equals(String actual, String expected)", "fileName": "src/fitlibrary/spec/TablesCompare.java", "methodNumberAfterChange": 2, "commitBeforeChange": "aa7e035202af44c59ac4b9611ab51754bfc767f1", "diff": ["-\tprivate boolean equals(String actual, String expected) {\r", "-\t\tString canonicalActual = canonical(actual);\r", "-\t\tString canonicalExpected = canonical(expected);\r", "+\tpublic boolean equals(String actualString, String expectedString) {\r", "+\t\tString actual = canonical(actualString);\r", "+\t\tString expected = canonical(expectedString);\r", "-\t\tif (\"IGNORE\".equals(canonicalExpected))\r", "+\t\tif (\"IGNORE\".equals(expected))\r", "-\t\tint start = canonicalExpected.indexOf(stackTrace);\r", "-\t\tif (start >= 0)\r", "-\t\t\treturn canonicalActual.startsWith(canonicalExpected.substring(0,start+stackTrace.length()));\r", "+\t\tint startExpected = expected.indexOf(stackTrace);\r", "+\t\tint startActual = actual.indexOf(stackTrace);\r", "+\t\tif (startExpected != startActual)\r", "+\t\t\treturn false;\r", "+\t\tif (startExpected >= 0)\r", "+\t\t\treturn actual.startsWith(expected.substring(0,startExpected));\r", "-\t\tstart = canonicalExpected.indexOf(fitLabel);\r", "-\t\tif (start >= 0)\r", "-\t\t\treturn canonicalActual.startsWith(canonicalExpected.substring(0,start+fitLabel.length()));\r", "-\t\treturn canonicalActual.equals(canonicalExpected);\r", "+\t\tString endFitLabel = \"</span>\";\r", "+\t\twhile (true) {\r", "+\t\t\tstartExpected = expected.indexOf(fitLabel);\r", "+\t\t\tstartActual = actual.indexOf(fitLabel);\r", "+\t\t\tif (startExpected != startActual)\r", "+\t\t\t\treturn false;\r", "+\t\t\tif (startExpected < 0)\r", "+\t\t\t\treturn actual.equals(expected);\r", "+\t\t\t\r", "+\t\t\tString expectedPrefix = expected.substring(0,startExpected);\r", "+\t\t\tif (!actual.substring(0,startActual).equals(expectedPrefix))\r", "+\t\t\t\treturn false;\r", "+\t\t\tint endExpected = expected.indexOf(endFitLabel,startExpected);\r", "+\t\t\tint endActual = actual.indexOf(endFitLabel,startActual);\r", "+\t\t\tif (endExpected < 0 || endActual < 0)\r", "+\t\t\t\treturn false;\r", "+\t\t\tString actualLabel = actual.substring(startActual+fitLabel.length(),endActual);\r", "+\t\t\tString expectedLabel = expected.substring(startExpected+fitLabel.length(),endExpected);\r", "+\t\t\tif (!actualLabel.startsWith(expectedLabel))\r", "+\t\t\t\treturn false;\r", "+\t\t\tactual = actual.substring(endActual+endFitLabel.length());\r", "+\t\t\texpected = expected.substring(endExpected+endFitLabel.length());\r", "+\t\t}\r"], "commitAfterChange": "0c95be0b15a91849d3e53045090b616f855d42ad", "signatureAfterChange": "\r \tpublic boolean equals(String actualString, String expectedString)", "id": "549df21d3aecc6712d17c4fa2f5a3489", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tprivate static boolean equalBodies(Parse actual, Parse expected)", "fileName": "src/fitlibrary/spec/SpecifyFixture.java", "methodNumberAfterChange": 3, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["+\tpublic boolean tablesEqual(String path, TableElement actual, TableElement expected) {\r", "+\t\tboolean actualContainsHtmlDueToShow = false;\r", "+\t\tif (actual.getClass() != expected.getClass())\r", "+\t\t\tthrow new RuntimeException(\"In SpecifyFixture, the classes don't match: \"+\r", "+\t\t\t\t\tactual.getClass()+\" and \"+expected.getClass());\r", "+\t\tif (actual instanceof Cell) {\r", "+\t\t\tCell actualCell = (Cell) actual;\r", "+\t\t\tCell expectedCell = (Cell) expected;\r", "+\t\t\tif (!equals(actualCell.fullText(),expectedCell.fullText())) {\r", "+\t\t\t\tif (!actualCell.hasEmbeddedTables() && expectedCell.hasEmbeddedTables()) {\r", "+\t\t\t\t\ttry {\r", "+//\t\t\t\t\t\tshowAfterTable(\"Actual: \"+escape(actualCell.fullText())+\"\\n\");\r", "+\t\t\t\t\t\tTables actualTables = TableFactory.tables(new Parse(actualCell.fullText()));\r", "+\t\t\t\t\t\tif (!tablesEqual(path,actualTables,expectedCell.getEmbeddedTables()))\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\tactualContainsHtmlDueToShow = true;\r", "+\t\t\t\t\t} catch (FitParseException e) {\r", "+\t\t\t\t\t\terrorReport.cellTextWrong(path,actualCell.fullText(),expectedCell.fullText());\r", "+\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\terrorReport.cellTextWrong(path,actualCell.fullText(),expectedCell.fullText());\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tactual = actualCell.getEmbeddedTables();\r", "+\t\t\texpected = expectedCell.getEmbeddedTables();\r", "+\t\tif (!actualContainsHtmlDueToShow) {\r", "+\t\t\tif (!equals(actual.getLeader(),expected.getLeader())) {\r", "+\t\t\t\terrorReport.leaderWrong(path, actual.getLeader(), expected.getLeader());\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t\tif (!equals(actual.getTrailer(),expected.getTrailer())) {\r", "+\t\t\t\terrorReport.trailerWrong(path, actual.getTrailer(), expected.getTrailer());\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t\tif (!actual.getTagLine().equals(expected.getTagLine())) {\r", "+\t\t\t\terrorReport.tagLineWrong(path, actual.getTagLine(), expected.getTagLine());\r", "+\t\t\t\treturn false;\r", "+\t\t\t}\r", "+\t\t\tif (actual.size() != expected.size()) {\r", "+\t\t\t\terrorReport.sizeWrong(path,actual.size(),expected.size());\r", "+\t\t\t\treturn false;\r", "-\t}\r", "-\tprivate static boolean equalBodies(Parse actual, Parse expected) {\r", "-\t\tboolean result = equalBodies22(actual,expected);\r", "-\t\tif (!result) {\r", "-\t\t\tSystem.out.println(\"!SpecifyFixture.equalBodies(\\\"\\n\"+actual.body+\"\\\",\\\"\\n\"+expected.body+\"\\\")\");\r", "+\t\tIterator<TableElement> actuals = actual.iterator();\r", "+\t\tIterator<TableElement> expecteds = expected.iterator();\r", "+\t\tint count = 0;\r", "+\t\twhile (actuals.hasNext()) {\r", "+\t\t\tTableElement act = actuals.next();\r", "+\t\t\tString nameOfElement = act.getType()+\"[\"+count+\"]\";\r", "+\t\t\tString pathFurther = path.isEmpty() ? nameOfElement : path + \".\" + nameOfElement;\r", "+\t\t\tif (!tablesEqual(pathFurther,act,expecteds.next()))\r", "+\t\t\t\treturn false;\r", "+\t\t\tcount++;\r", "-\t\treturn result;\r", "+\t\treturn true;\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \r \tpublic boolean tablesEqual(String path, TableElement actual, TableElement expected)", "id": "9688cf3534b6dc599dc584071121294e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "88d27a2aa65c9e08e927f38f3b29a62e", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
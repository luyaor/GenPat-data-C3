{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tprivate void expectTwoRowsInFirstCellOfTable()", "fileName": "test/fitlibrary/flow/TestDoFlowWithNestedTables.java", "methodNumberAfterChange": 1, "commitBeforeChange": "a6c1e5e7a0e2d59a2e0ed7586d0e7ddd7317f579", "diff": ["-\tprivate void expectTwoRowsInFirstCellOfTable() {\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\tallowing(tables).size(); will(returnValue(1));\r", "-\t\t\tallowing(tables).at(0); will(returnValue(table1));\r", "-\t\t\tallowing(tables).last(); will(returnValue(table1));\r", "-\t\t\tallowing(table1).size(); will(returnValue(2));\r", "-\t\t\tallowing(table1).at(0); will(returnValue(row1));\r", "-\t\t\tallowing(row1).at(0); will(returnValue(cell1));\r", "-\t\t\tallowing(cell1).hasEmbeddedTables(); will(returnValue(false));\r", "-\t\t\tallowing(cell1).hadError(); will(returnValue(false));\r", "-\t\t\tallowing(row1).size(); will(returnValue(2));\r", "-\t\t\tallowing(row2).size(); will(returnValue(2));\r", "-\t\t\t\r", "-\t\t\tallowing(table1).isPlainTextTable(); will(returnValue(false));\r", "-\t\t\tallowing(table1).at(1); will(returnValue(row2));\r", "-\t\t\tallowing(row2).at(0); will(returnValue(cell2));\r", "-\t\t\tallowing(cell2).hasEmbeddedTables(); will(returnValue(true));\r", "-\t\t\tallowing(cell2).getEmbeddedTables(); will(returnValue(cell2));\r", "-\t\t\tallowing(cell2).hadError(); will(returnValue(false));\r", "-\t\t\tallowing(cell2).size(); will(returnValue(1));\r", "-\t\t\tIterator<Table> result = list(innerTable1).iterator();\r", "-\t\t\tallowing(cell2).iterator(); will(returnValue(result));\r", "-\t\t\tallowing(cell2).at(0); will(returnValue(innerTable1));\r", "-\t\t\tallowing(innerTable1).size(); will(returnValue(1));\r", "-\t\t\tallowing(innerTable1).at(0); will(returnValue(innerRow1));\r", "-\t\t\tallowing(innerRow1).at(0); will(returnValue(innerCell));\r", "-\t\t\tallowing(innerCell).hasEmbeddedTables(); will(returnValue(false));\r", "-\t\t\tallowing(innerCell).hadError(); will(returnValue(false));\r", "-\t\t\tallowing(innerRow1).size(); will(returnValue(2));\r", "-\t\t}});\r", "+\tprivate Tables makeTables() {\r", "+\t\treturn tables().with(table().with(\r", "+\t\t\t\trow().with(cell(),cell()),\r", "+\t\t\t\trow().with(\r", "+\t\t\t\t\t\tcell().with(\r", "+\t\t\t\t\t\t\t\ttable().with(row().with(cell()))),\r", "+\t\t\t\t\t\tcell())\r", "+\t\t)).mock(context);\r"], "commitAfterChange": "3dcd3b89a93a94255040ce519f06a01a05e62807", "signatureAfterChange": "\r \tprivate Tables makeTables()", "id": "205e29f206a8978aa338caaa5ed8a5cf", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 14, "signatureBeforeChange": "\r \tprivate void expectTwoRowsInOneTableAndOneInAnother()", "fileName": "test/fitlibrary/flow/TestDoFlow.java", "methodNumberAfterChange": 15, "commitBeforeChange": "3dcd3b89a93a94255040ce519f06a01a05e62807", "diff": ["-\tprivate void expectTwoRowsInOneTableAndOneInAnother() {\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\tallowing(tables).size(); will(returnValue(2));\r", "-\t\t\tallowing(tables).at(0); will(returnValue(table1));\r", "-\t\t\tallowing(tables).at(1); will(returnValue(table1));\r", "-\t\t\tallowing(tables).last(); will(returnValue(table1));\r", "-\t\t\tallowing(table1).size(); will(returnValue(2));\r", "-\t\t\tallowing(table1).isPlainTextTable(); will(returnValue(false));\r", "-\t\t\tallowing(table1).at(0); will(returnValue(row1));\r", "-\t\t\tallowing(table1).at(1); will(returnValue(row2));\r", "-\t\t\tallowing(table1).last(); will(returnValue(row2));\r", "-\t\t\tallowing(row1).at(0); will(returnValue(cell1));\r", "-\t\t\tallowing(row1).size(); will(returnValue(2));\r", "-\t\t\tallowing(row2).size(); will(returnValue(2));\r", "-\t\t\tallowing(cell1).hasEmbeddedTables(); will(returnValue(false));\r", "-\t\t\tallowing(row2).at(0); will(returnValue(cell1));\r", "-\t\t\tallowing(cell1).hadError(); will(returnValue(false));\r", "-\t\t}});\r", "+\t}\r", "+\tprivate TableBuilder tableWith2RowsOf2() {\r", "+\t\treturn table().with(\r", "+\t\t\t\trow().with(cell(),cell()),\r", "+\t\t\t\trow().with(cell(),cell())\r", "+\t\t);\r"], "commitAfterChange": "84c141233c25d93b724ff299ad66f0e4b13ed95b", "signatureAfterChange": "\r \tprivate TableBuilder tableWith2RowsOf2()", "id": "c9f7a2f66dc182de2aed7da37f065c2d", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "9f37682f8235f1a45ce24d27cc425c9b", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
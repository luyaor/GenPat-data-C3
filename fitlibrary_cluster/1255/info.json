{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tprivate static void macroReplace(Tables tables, Map<String,Object> mapToRef, VariableResolver resolver)", "fileName": "src/fitlibrary/definedAction/ParameterBinder.java", "methodNumberAfterChange": 3, "commitBeforeChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "diff": ["-\t}\r", "-\tprivate static void macroReplace(Tables tables, Map<String,Object> mapToRef, VariableResolver resolver) {\r", "-\t\tList<String> reverseSortOrder = new ArrayList<String>(mapToRef.keySet());\r", "-\t\tCollections.sort(reverseSortOrder,new Comparator<String>() {\r", "-\t\t\tpublic int compare(String arg0, String arg1) {\r", "-\t\t\t\treturn arg1.compareTo(arg0);\r", "-\t\t\t}\r", "-\t\t});\r", "-\t\tfor (String key : reverseSortOrder)\r", "-\t\t\tmacroReplaceTables(tables, key, mapToRef.get(key),resolver);\r", "-\t}\r", "+\tpublic void verifyHeaderAgainstFormalParameters(Row row, VariableResolver resolver) {\r", "+\t\tif (row.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+row.size());\r", "+\t\tHashSet<String> set = new HashSet<String>();\r", "+\t\tfor (int c = 0; c < row.size(); c++) {\r", "+\t\t\tString headerName = row.text(c, resolver);\r", "+\t\t\tif (!formalParameters.contains(headerName))\r", "+\t\t\t\tthrow new FitLibraryException(\"Unknown parameter: '\"+headerName+\"'\");\r", "+\t\t\tif (set.contains(headerName))\r", "+\t\t\t\tthrow new FitLibraryException(\"Duplicate parameter: '\"+headerName+\"'\");\r", "+\t\t\tset.add(headerName);\r"], "commitAfterChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "signatureAfterChange": "\r \tpublic void verifyHeaderAgainstFormalParameters(Row row, VariableResolver resolver)", "id": "14eb11621a805ea725639ffd7c6b117c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tpublic void bind(Row parameterRow, Row row, DynamicVariables dynamicVariables,\r \t\t\tVariableResolver resolver)", "fileName": "src/fitlibrary/definedAction/MultiParameterBinder.java", "methodNumberAfterChange": 4, "commitBeforeChange": "6aa33f7a49e37bb18384a62861c89eb6f5a7aeb4", "diff": ["-\tpublic void bind(Row parameterRow, Row row, DynamicVariables dynamicVariables,\r", "-\t\t\tVariableResolver resolver) {\r", "-\t\tif (row.size() != formalParameters.size())\r", "-\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+row.size());\r", "-\t\tfor (int c = 0; c < row.size(); c++) {\r", "-\t\t\tString parameter = parameterRow.text(c, resolver);\r", "-\t\t\tString actual = row.text(c, resolver);\r", "-\t\t\tdynamicVariables.putParameter(parameter, actual);\r", "+\tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables) {\r", "+\t\tif (callRow.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+callRow.size());\r", "+\t\tfor (int c = 0; c < callRow.size(); c++) {\r", "+\t\t\tString parameter = parameterRow.text(c, dynamicVariables);\r", "+\t\t\tif (callRow.at(c).hasEmbeddedTables(dynamicVariables))\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.at(c).getEmbeddedTables());\r", "+\t\t\telse\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.text(c, dynamicVariables));\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "signatureAfterChange": "\r \tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables)", "id": "2957b93e893573e65f6742dcfab38631", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "7395efde85c92cacacb2edfe41197fb0", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
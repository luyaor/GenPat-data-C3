{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findGetterUpContextsToo(TypedObject typedObject, Evaluator evaluator, String propertyName, boolean considerContext)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 13, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\tCalledMethodTarget target = typedObject.optionallyFindGetterOnTypedObject(propertyName,evaluator);\r", "-\t\tif (considerContext && target == null)\r", "-\t\t\ttarget = searchForMethodTargetUpOuterContext(propertyName,evaluator.getNextOuterContext(),evaluator);\r", "+\t\tCalledMethodTarget target;\r", "+\t\tif (considerContext)\r", "+\t\t\ttarget = searchForMethodTargetUpOuterContext(propertyName,evaluator);\r", "+\t\telse\r", "+\t\t\ttarget =  typedObject.new_optionallyFindGetterOnTypedObject(propertyName,evaluator);\r", "-\t\tString getMethodName = ExtendedCamelCase.camel(\"get \"+propertyName);\r", "-\t\tthrow new MissingMethodException(signatures(\"public ResultType \"+ getMethodName+\"() { }\"),identifiedClassesInSUTChain(typedObject.getSubject()));\r", "+\t\tList<Class<?>> possibleClasses = new ArrayList<Class<?>>();\r", "+\t\tif (considerContext)\r", "+\t\t\tpossibleClasses = scopeOf(evaluator).possibleClasses();\r", "+\t\telse\r", "+\t\t\tpossibleClasses.add(typedObject.getSubject().getClass());\r", "+\t\tthrow new MissingMethodException(signatures(\"public ResultType \"+ camel(\"get \"+propertyName)+\"() { }\"),possibleClasses);\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget findGetterUpContextsToo(TypedObject typedObject, Evaluator evaluator, String propertyName, boolean considerContext)", "id": "82f75f929535258628e076edb82cef97", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findSetter(String propertyName, Evaluator evaluator)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 10, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic CalledMethodTarget findSetter(String propertyName, Evaluator evaluator) {\r", "-\t\tString methodName = ExtendedCamelCase.camel(\"set \"+propertyName);\r", "-\t\tString arg = camel(propertyName);\r", "-\t\tTypedObject typedSubject = evaluator.getTypedSystemUnderTest();\r", "-    \tif (typedSubject == null)\r", "-    \t\tthrow new NoSystemUnderTestException();\r", "-\t\tCalledMethodTarget target = typedSubject.optionallyFindMethodOnTypedObject(methodName,1,evaluator, true);\r", "-\t\tif (target != null)\r", "-\t\t\treturn target;\r", "-\t\tthrow new MissingMethodException(signatures(\"public void \"+methodName+\"(ArgType \"+arg+\") { }\"),identifiedClassesInSUTChain(typedSubject.getSubject()));\r", "+\tpublic CalledMethodTarget findSetterOnSut(String propertyName, Evaluator evaluator) {\r", "+\t\treturn findMethodOnSut(camel(\"set \"+propertyName), 1, evaluator,\"ArgType \"+camel(propertyName));\r", "+\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget findSetterOnSut(String propertyName, Evaluator evaluator)", "id": "a22c9858cdc3d68c1650ef914c437276", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tpublic CalledMethodTarget optionallyFindGetterOnTypedObject(\r \t\t\tString propertyName, Evaluator evaluator)", "fileName": "src/fitlibrary/typed/NonGenericTypedObject.java", "methodNumberAfterChange": 7, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t}\r", "-\tpublic CalledMethodTarget optionallyFindGetterOnTypedObject(\r", "-\t\t\tString propertyName, Evaluator evaluator) {\r", "-\t\tString getMethodName = ExtendedCamelCase.camel(\"get \" + propertyName);\r", "-\t\tCalledMethodTarget target = optionallyFindMethodOnTypedObject(\r", "-\t\t\t\tgetMethodName, 0, evaluator, true);\r", "-\t\tif (target == null) {\r", "-\t\t\tString isMethodName = ExtendedCamelCase.camel(\"is \" + propertyName);\r", "-\t\t\ttarget = optionallyFindMethodOnTypedObject(isMethodName, 0,\r", "-\t\t\t\t\tevaluator, true);\r", "-\t\t}\r", "-\t\treturn target;\r", "-\t}\r", "+\tpublic CalledMethodTarget new_optionallyFindGetterOnTypedObject(String propertyName, Evaluator evaluator) {\r", "+\t\tString getMethodName = ExtendedCamelCase.camel(\"get \" + propertyName);\r", "+\t\tOption<CalledMethodTarget> target = new_findSpecificMethod(getMethodName, 0, evaluator);\r", "+\t\tif (target.isSome())\r", "+\t\t\treturn target.get();\r", "+\t\tString isMethodName = ExtendedCamelCase.camel(\"is \" + propertyName);\r", "+\t\ttarget = new_findSpecificMethod(isMethodName, 0, evaluator);\r", "+\t\tif (target.isSome())\r", "+\t\t\treturn target.get();\r", "+\t\treturn null;\r", "+\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget new_optionallyFindGetterOnTypedObject(String propertyName, Evaluator evaluator)", "id": "e2b2a264f767ef18c6338db9bb27d646", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "f15697cc785a3ebffcbae6589d427608", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL"]}
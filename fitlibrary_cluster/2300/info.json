{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r     public Object interpret(Table table, TestResults testResults)", "fileName": "src/fitlibrary/DefineAction.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-    \tif (table.elementAt(1).size() != 1)\r", "+    \tif (table.at(1).size() != 1)\r", "-    \tif (hasClass && table.elementAt(2).size() != 1)\r", "+    \tif (hasClass && table.at(2).size() != 1)\r", "-    \tif (!table.elementAt(bodyRow).elementAt(0).hasEmbeddedTables())\r", "+    \tif (!table.at(bodyRow).at(0).hasEmbeddedTables())\r", "-    \t\twikiClassName = table.elementAt(1).text(0,this);\r", "-    \tprocessDefinition(table.elementAt(1).elementAt(0).getEmbeddedTables(), testResults);\r", "+    \t\twikiClassName = table.at(1).text(0,this);\r", "+    \tprocessDefinition(table.at(1).at(0).getEmbeddedTables(), testResults);\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r     public Object interpret(Table table, TestResults testResults)", "id": "0d86e37b1f8715006b4fb0a0c1cfdcc7", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \t@Test\r \tpublic void rowOfTwoHasSizeOf2()", "fileName": "test/fitlibrary/matcher/TestTableBuilderForTests.java", "methodNumberAfterChange": 9, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\tRowBuilder rowBuilder = row().\r", "-\t\t\twith(cell(),cell());\r", "-\t\tRow row = rowBuilder.expect(context);\r", "+\t\tRowBuilder rowBuilder = row().with(cell(),cell());\r", "+\t\tRow row = rowBuilder.mock(context);\r", "-\t\tassertThat(row.last(), is(row.elementAt(1)));\r", "+\t\tassertThat(row.last(), is(row.at(1)));\r", "-\t\tassertThat(iterator.next(), sameInstance(row.elementAt(0)));\r", "+\t\tassertThat(iterator.next(), sameInstance(row.at(0)));\r", "-\t\tassertThat(iterator.next(), sameInstance(row.elementAt(1)));\r", "+\t\tassertThat(iterator.next(), sameInstance(row.at(1)));\r", "-\t\tassertThat(row.elementAt(0), not(sameInstance(row.elementAt(1))));\r", "+\t\tassertThat(row.at(0), not(sameInstance(row.at(1))));\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Test\r \tpublic void rowOfTwoHasSizeOf2()", "id": "650ccb955fe85a39bbdfd8b4301015f0", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tprivate void expectTwoRowsInFirstCellOfTable()", "fileName": "test/fitlibrary/flow/TestDoFlowWithNestedTables.java", "methodNumberAfterChange": 1, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\t\tallowing(tables).elementAt(0); will(returnValue(table1));\r", "+\t\t\tallowing(tables).at(0); will(returnValue(table1));\r", "-\t\t\tallowing(table1).elementAt(0); will(returnValue(row1));\r", "-\t\t\tallowing(row1).elementAt(0); will(returnValue(cell1));\r", "+\t\t\tallowing(table1).at(0); will(returnValue(row1));\r", "+\t\t\tallowing(row1).at(0); will(returnValue(cell1));\r", "-\t\t\tallowing(table1).elementAt(1); will(returnValue(row2));\r", "-\t\t\tallowing(row2).elementAt(0); will(returnValue(cell2));\r", "+\t\t\tallowing(table1).at(1); will(returnValue(row2));\r", "+\t\t\tallowing(row2).at(0); will(returnValue(cell2));\r", "-\t\t\tallowing(cell2).getEmbeddedTables(); will(returnValue(innerTables));\r", "+\t\t\tallowing(cell2).getEmbeddedTables(); will(returnValue(cell2));\r", "-\t\t\tallowing(innerTables).size(); will(returnValue(1));\r", "+\t\t\tallowing(cell2).size(); will(returnValue(1));\r", "-\t\t\tallowing(innerTables).iterator(); will(returnValue(result));\r", "-\t\t\tallowing(innerTables).elementAt(0); will(returnValue(innerTable1));\r", "+\t\t\tallowing(cell2).iterator(); will(returnValue(result));\r", "+\t\t\tallowing(cell2).at(0); will(returnValue(innerTable1));\r", "-\t\t\tallowing(innerTable1).elementAt(0); will(returnValue(innerRow1));\r", "-\t\t\tallowing(innerRow1).elementAt(0); will(returnValue(innerCell));\r", "+\t\t\tallowing(innerTable1).at(0); will(returnValue(innerRow1));\r", "+\t\t\tallowing(innerRow1).at(0); will(returnValue(innerCell));\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \tprivate void expectTwoRowsInFirstCellOfTable()", "id": "6c88ce1dde337cabce4e33c2033d50a8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \t\r \t@Test\r \tpublic void innerTableIsRun()", "fileName": "test/fitlibrary/flow/TestDoFlowWithNestedTables.java", "methodNumberAfterChange": 2, "commitBeforeChange": "a6c1e5e7a0e2d59a2e0ed7586d0e7ddd7317f579", "diff": ["-\t\t\toneOf(flowEvaluator).interpretRow(row1,testResults);\r", "+\t\t\toneOf(flowEvaluator).interpretRow(firstRow,testResults);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", row1, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", row1, testResults);\r", "+\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", firstRow, testResults);\r", "+\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", firstRow, testResults);\r", "-\t\t\toneOf(flowEvaluator).interpretRow(innerRow1,testResults);\r", "+\t\t\toneOf(flowEvaluator).interpretRow(innerRow,testResults);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", innerRow1, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", row1, testResults);\r", "+\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", innerRow, testResults);\r", "+\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", firstRow, testResults);\r", "-\t\t\toneOf(tableListener).tableFinished(table1);\r", "+\t\t\toneOf(tableListener).tableFinished(table);\r"], "commitAfterChange": "3dcd3b89a93a94255040ce519f06a01a05e62807", "signatureAfterChange": "\r \t\r \t@Test\r \tpublic void innerTableIsRun()", "id": "94cfc397206e146f8a51b331f2b410ed", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 16, "signatureBeforeChange": "\r \tprivate void expectTwoRowsInOneTableAndOneInAnother()", "fileName": "test/fitlibrary/flow/TestDoFlow.java", "methodNumberAfterChange": 16, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\t\tallowing(tables).elementAt(0); will(returnValue(table1));\r", "-\t\t\tallowing(tables).elementAt(1); will(returnValue(table1));\r", "+\t\t\tallowing(tables).at(0); will(returnValue(table1));\r", "+\t\t\tallowing(tables).at(1); will(returnValue(table1));\r", "-\t\t\tallowing(table1).elementAt(0); will(returnValue(row1));\r", "-\t\t\tallowing(table1).elementAt(1); will(returnValue(row2));\r", "-\t\t\tallowing(row1).elementAt(0); will(returnValue(cell1));\r", "+\t\t\tallowing(table1).at(0); will(returnValue(row1));\r", "+\t\t\tallowing(table1).at(1); will(returnValue(row2));\r", "+\t\t\tallowing(row1).at(0); will(returnValue(cell1));\r", "-\t\t\tallowing(row2).elementAt(0); will(returnValue(cell1));\r", "+\t\t\tallowing(row2).at(0); will(returnValue(cell1));\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \tprivate void expectTwoRowsInOneTableAndOneInAnother()", "id": "a732d676bf4516c1023a7fe608e0f147", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/collection/array/ArrayTraverse.java", "methodNumberAfterChange": 3, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-        \ttable.elementAt(0).elementAt(0).pass(testResults);\r", "+        \ttable.at(0).at(0).pass(testResults);\r", "-            Row row = table.elementAt(rowNo);\r", "+            Row row = table.at(rowNo);\r", "-                if (parser.matches(row.elementAt(0),get(arrayIndex),testResults)) {\r", "+                if (parser.matches(row.at(0),get(arrayIndex),testResults)) {\r", "-                    row.elementAt(0).expectedElementMissing(testResults);\r", "+                    row.at(0).expectedElementMissing(testResults);\r", "-            table.elementAt(rowNo).missing(testResults);\r", "+            table.at(rowNo).missing(testResults);\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "c9e7523f68085a99d92a8cf2b2edcf72", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 9, "signatureBeforeChange": "\r \t@Test\r \tpublic void largeTablesHasAllTheRightValues()", "fileName": "test/fitlibrary/matcher/TestTableBuilderForTests.java", "methodNumberAfterChange": 10, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\tTables tables = tablesBuilder.expect(context);\r", "+\t\tTables tables = tablesBuilder.mock(context);\r", "-\t\tassertThat(tables.last(), sameInstance(tables.elementAt(0)));\r", "+\t\tassertThat(tables.last(), sameInstance(tables.at(0)));\r", "-\t\tassertThat(iterator.next(), sameInstance(tables.elementAt(0)));\r", "+\t\tassertThat(iterator.next(), sameInstance(tables.at(0)));\r", "-\t\tTable table = tables.elementAt(0);\r", "+\t\tTable table = tables.at(0);\r", "-\t\tRow row0 = table.elementAt(0);\r", "+\t\tRow row0 = table.at(0);\r", "-\t\tCell cell0 = row0.elementAt(0);\r", "+\t\tCell cell0 = row0.at(0);\r", "-\t\tRow row1 = table.elementAt(1);\r", "+\t\tRow row1 = table.at(1);\r", "-\t\tCell cell2 = row1.elementAt(0);\r", "+\t\tCell cell2 = row1.at(0);\r", "-\t\tassertThat(iterator2.next(), sameInstance(cell2.elementAt(0)));\r", "+\t\tassertThat(iterator2.next(), sameInstance(cell2.at(0)));\r", "-\t\tTable innerTable = cell2.elementAt(0);\r", "+\t\tTable innerTable = cell2.at(0);\r", "-\t\tassertThat(innerTable.elementAt(0).size(), is(1));\r", "-\t\tassertThat(innerTable.elementAt(0).elementAt(0).text(),\r", "+\t\tassertThat(innerTable.at(0).size(), is(1));\r", "+\t\tassertThat(innerTable.at(0).at(0).text(),\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Test\r \tpublic void largeTablesHasAllTheRightValues()", "id": "f1a37c5f4e743d512eb08278cce65b54", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "84da7ab027dc14b77337bfb40976e76f", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
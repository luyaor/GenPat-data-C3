{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \t@Test\r \tpublic void testParseWithGenericListEnumFinder() throws Exception", "fileName": "test/fitlibraryGeneric/TestDirectAccessToParser.java", "methodNumberAfterChange": 4, "commitBeforeChange": "19244da227b35deeb114ad22bd267b37f601baa7", "diff": ["+\t@Test\r", "+\tpublic void testParseWithEnumFinder() throws Exception {\r", "+\t\tassertThat(ParserSelectorForType.evaluate(doFixture, En.class, \"a\"),is((Object)En.A));\r", "+\t}\r", "-\t@Test\r", "-\tpublic void testParseWithGenericListEnumFinder() throws Exception {\r", "-\t\tLocalParameterizedType innerType = new LocalParameterizedType(TestDirectAccessToParser.class, List.class, En.class);\r", "-\t\tLocalParameterizedType type = new LocalParameterizedType(TestDirectAccessToParser.class, Gen.class, innerType);\r", "-\t\tList<En> expectedList = new ArrayList<En>();\r", "-\t\texpectedList.add(En.A);\r", "-\t\texpectedList.add(En.B);\r", "-\t\tassertThat(ParserSelectorForType.evaluate(doFixture, type, \"a, b\"),is((Object)new Gen<List<En>>(expectedList)));\r", "-\t}\r"], "commitAfterChange": "4c09d4a78ae5171e97d9d95e70df7d10c6686bd5", "signatureAfterChange": "\r \t@Test\r \tpublic void testParseWithEnumFinder() throws Exception", "id": "26eb76aa28f17b2c2646ea6859acac24", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 10, "signatureBeforeChange": "\r \tprivate void colourReport(Tables body, Row row,\r \t\t\tTestResults testResults, TestResults subTestResults)", "fileName": "src/fitlibrary/traverse/workflow/caller/DefinedActionCaller.java", "methodNumberAfterChange": 10, "commitBeforeChange": "cd20838066679088607bacd4884b58979b698e68", "diff": ["-\t}\r", "-\tprivate void colourReport(Tables body, Row row,\r", "-\t\t\tTestResults testResults, TestResults subTestResults) {\r", "+\t}\r", "+\tprivate void colourRowInReport(Row row, TestResults testResults, TestResults subTestResults) {\r", "+\t\tif (runtime.toExpandDefinedActions() || subTestResults.problems()) {\r", "-\t\t\tString pageName = binder.getPageName();\r", "-\t\t\tCell cell = TableFactory.cell(body);\r", "-\t\t\tcell.at(0).setLeader(Fixture.label(link(pageName))+cell.at(0).getLeader());\r", "-\t\t\tcell.calls();\r", "-\t\t\trow.add(cell);\r"], "commitAfterChange": "e3f9a7058b7a695d0825f787e929954ce3c4ac47", "signatureAfterChange": "\r \tprivate void colourRowInReport(Row row, TestResults testResults, TestResults subTestResults)", "id": "3c6597a9c66cade48d55003c3254a5c4", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r \tpublic Closure findMethodForTypedObject(String name, int argCount)", "fileName": "src/fitlibrary/typed/NonGenericTypedObject.java", "methodNumberAfterChange": 27, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t}\r", "-\tpublic Closure findMethodForTypedObject(String name, int argCount) {\r", "-\t\tif (subject == null)\r", "-\t\t\treturn null;\r", "-\t\tClosure chosenMethod = PlugBoard.lookupClosure.findMethodClosure(this,\r", "-\t\t\t\tname, argCount);\r", "-\t\tif (chosenMethod == null && subject instanceof DomainAdapter) {\r", "-\t\t\tDomainAdapter domainAdapter = (DomainAdapter) subject;\r", "-\t\t\tchosenMethod = asTypedObject(domainAdapter.getSystemUnderTest())\r", "-\t\t\t\t\t.findMethodForTypedObject(name, argCount);\r", "-\t\t}\r", "-\t\tif (chosenMethod == null && subject instanceof Evaluator) {\r", "-\t\t\tEvaluator evaluator = (Evaluator) subject;\r", "-\t\t\tchosenMethod = asTypedObject(evaluator.getNextOuterContext())\r", "-\t\t\t\t\t.findMethodForTypedObject(name, argCount);\r", "-\t\t}\r", "-\t\treturn chosenMethod;\r", "+\t}\r", "+\t@Override\r", "+\tpublic int hashCode() {\r", "+\t\tif (subject == null)\r", "+\t\t\treturn -123;\r", "+\t\treturn subject.hashCode();\r", "+\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \t@Override\r \tpublic int hashCode()", "id": "4a77ad86a2c360fe57a0aaabe854ba9d", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tprivate void body(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/function/RuleTable.java", "methodNumberAfterChange": 3, "commitBeforeChange": "51f903b3dbcdee8eb97cb2b40932e27a74c2a97f", "diff": ["-\t\t\tboolean haveCalledExecuteForThisRow = executeMethod.isNone();\r", "-\t\t\t\tfor (int i = 0; i < row.size(); i++) {\r", "-\t\t\t\t\tCell cell = row.cell(i);\r", "-\t\t\t\t\tColumnTarget columnTarget = columnTargets.get(i);\r", "-\t\t\t\t\tif (!haveCalledExecuteForThisRow && columnTarget.isOutput()) {\r", "-\t\t\t\t\t\texecuteMethod.get().invoke();\r", "-\t\t\t\t\t\thaveCalledExecuteForThisRow = true;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tcolumnTarget.act(cell, testResults);\r", "-\t\t\t\t}\r", "+\t\t\t\trow(testResults, row);\r"], "commitAfterChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "signatureAfterChange": "\r \tprivate void body(Table table, TestResults testResults)", "id": "5a8c65557c30377cb6b143648034cbc0", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \tpublic static void main(String[] args) throws IOException, InterruptedException", "fileName": "src/fitlibrary/batch/FitLibraryRunner.java", "methodNumberAfterChange": 0, "commitBeforeChange": "5ba818354648ea599f271f8106e1431db9c61d96", "diff": ["+\t\r", "-\t\tif (args.length != 3 && args.length != 4) {\r", "-\t\t\tSystem.err.println(\"Usage: fitlibrary.batch.FitLibraryRunner suiteName fitNesseDiry resultsDiry [showPasses]\");\r", "-\t\t\tSystem.exit(-1);\r", "+\t\tif (args.length > 0 && args[0].startsWith(\"-\"))\r", "+\t\t\trunWithNewArguments(args);\r", "+\t\telse\r", "+\t\t\trunWithOldArguments(args);\r", "+\t}\r", "-\t\tSystem.out.println(\"FitLibraryRunner\");\r", "-\t\trunParallel(suiteName, fitNesseDirectoryPath, resultsDirectoryPath, showPasses);\r"], "commitAfterChange": "f6e898e2c958fb69eedd2858e821919ee34de215", "signatureAfterChange": "\r \t\r \tpublic static void main(String[] args) throws IOException, InterruptedException", "id": "5fef8adb27d55f657bd7a0bb573746a8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tpublic Closure findMethodClosure(String name, int argCount,\r \t\t\tboolean includeSut)", "fileName": "src/fitlibrary/typed/NonGenericTypedObject.java", "methodNumberAfterChange": 6, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["+\tprivate Option<Closure> new_findMethodClosure(String name, int argCount) {\r", "+\t\tClosure methodClosure = lookupClosure.findMethodClosure(this,name, argCount);\r", "+\t\t\treturn None.none();\r", "+\t\treturn new Some<Closure>(methodClosure);\r", "-\tpublic Closure findMethodClosure(String name, int argCount,\r", "-\t\t\tboolean includeSut) {\r", "-\t\tif (subject == null)\r", "-\t\t\treturn null;\r", "-\t\tClosure methodClosure = PlugBoard.lookupClosure.findMethodClosure(this,\r", "-\t\t\t\tname, argCount);\r", "-\t\tif (methodClosure == null && subject instanceof Evaluator) {\r", "-\t\t\tEvaluator evaluator = (Evaluator) subject;\r", "-\t\t\tObject sut = evaluator.getSystemUnderTest();\r", "-\t\t\tif (sut != null && (includeSut || sut instanceof DomainAdapter))\r", "-\t\t\t\tmethodClosure = evaluator.getTypedSystemUnderTest()\r", "-\t\t\t\t\t\t.findMethodClosure(name, argCount, includeSut);\r", "-\t\t}\r", "-\t\tif (methodClosure == null && subject instanceof DomainAdapter) {\r", "-\t\t\tDomainAdapter domainAdapter = (DomainAdapter) subject;\r", "-\t\t\tObject nestedSystemUnderTest = domainAdapter.getSystemUnderTest();\r", "-\t\t\tif (nestedSystemUnderTest != null\r", "-\t\t\t\t\t&& (includeSut || nestedSystemUnderTest instanceof DomainAdapter))\r", "-\t\t\t\treturn asTypedObject(nestedSystemUnderTest).findMethodClosure(\r", "-\t\t\t\t\t\tname, argCount, includeSut);\r", "-\t\t}\r", "-\t\treturn methodClosure;\r", "-\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate Option<Closure> new_findMethodClosure(String name, int argCount)", "id": "929920fd6baad6e29025f7fb32a23295", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findSetter(String propertyName, Evaluator evaluator)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 10, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic CalledMethodTarget findSetter(String propertyName, Evaluator evaluator) {\r", "-\t\tString methodName = ExtendedCamelCase.camel(\"set \"+propertyName);\r", "-\t\tString arg = camel(propertyName);\r", "-\t\tTypedObject typedSubject = evaluator.getTypedSystemUnderTest();\r", "-    \tif (typedSubject == null)\r", "-    \t\tthrow new NoSystemUnderTestException();\r", "-\t\tCalledMethodTarget target = typedSubject.optionallyFindMethodOnTypedObject(methodName,1,evaluator, true);\r", "-\t\tif (target != null)\r", "-\t\t\treturn target;\r", "-\t\tthrow new MissingMethodException(signatures(\"public void \"+methodName+\"(ArgType \"+arg+\") { }\"),identifiedClassesInSUTChain(typedSubject.getSubject()));\r", "+\tpublic CalledMethodTarget findSetterOnSut(String propertyName, Evaluator evaluator) {\r", "+\t\treturn findMethodOnSut(camel(\"set \"+propertyName), 1, evaluator,\"ArgType \"+camel(propertyName));\r", "+\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget findSetterOnSut(String propertyName, Evaluator evaluator)", "id": "a22c9858cdc3d68c1650ef914c437276", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \t@Override\r \tpublic TestResults doTables(Tables theTables)", "fileName": "src/fitlibrary/suite/BatchFitLibrarySingleStep.java", "methodNumberAfterChange": 0, "commitBeforeChange": "efcea143a0228dd9127d70e2055bf8e765b4966f", "diff": ["-\t\tDynamicVariablesRecording recorder = doFlow.getRuntimeContext().getDynamicVariableRecorder();\r", "-\t\tif (recorder.isRecording()) {\r", "-\t\t\ttry {\r", "-\t\t\t\trecorder.write();\r", "-\t\t\t} catch (IOException e) {\r", "-\t\t\t\tTable errorTable = TableFactory.table(TableFactory.row(\"note\",TableElementOnParse.label(\"Problem on writing property file:\")+\"<hr/>\"+e.getMessage()));\r", "-\t\t\t\terrorTable.at(0).at(1).error(tableListener.getTestResults());\r", "-\t\t\t\ttheTables.add(errorTable);\r", "-\t\t\t}\r", "-\t\t}\r"], "commitAfterChange": "226f3fcb3be5f39fbf870257799dab7b5a1931ec", "signatureAfterChange": "\r \t@Override\r \tpublic TestResults doTables(Tables theTables)", "id": "b8eea53ef6a71cec20ae653b868d006a", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic DefinedActionCaller(Row row, RuntimeContextInternal runtime)", "fileName": "src/fitlibrary/traverse/workflow/caller/DefinedActionCaller.java", "methodNumberAfterChange": 0, "commitBeforeChange": "b30e56d0effcc85cd5ffa49ca148e7059d6f5934", "diff": ["-\t\tparameterSubstitution = TemporaryPlugBoardForRuntime.definedActionsRepository().lookupByCamel(methodName, actualArgs.size());\r", "-\t\tif (parameterSubstitution == null) {\r", "-\t\t\tObject objectName = runtime.getDynamicVariable(\"this\");\r", "-\t\t\tif (objectName != null) {\r", "-\t\t\t\tObject className = runtime.getDynamicVariable(objectName+\".class\");\r", "-\t\t\t\tactualArgs.add(0,objectName.toString());\r", "-\t\t\t\tif (className != null && !\"\".equals(className))\r", "-\t\t\t\t\tparameterSubstitution = TemporaryPlugBoardForRuntime.definedActionsRepository().\r", "+\t\tbinder = repository().lookupByCamel(methodName, actualArgs.size());\r", "+\t\tif (binder == null)\r", "+\t\t\tlookupByClass();\r", "+\t}\r", "-\t\t\t}\r"], "commitAfterChange": "cd20838066679088607bacd4884b58979b698e68", "signatureAfterChange": "\r \r \tpublic DefinedActionCaller(Row row, RuntimeContextInternal runtime)", "id": "c415ee7a9be78781f110bf9ce6dc166c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tpublic Closure findFixturingMethod(Evaluator evaluator, String name, Class<?>[] argTypes)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 3, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["+\t\treturn findFixturedMethod(evaluator, name, argTypes, new HashSet<Object>());\r", "+\t}\r", "-\t\t\tmethod = findFixturingMethod((Evaluator)evaluator.getSystemUnderTest(),name,argTypes);\r", "-\t\tif (method == null && evaluator.getNextOuterContext() != null)\r", "-\t\t\tmethod = findFixturingMethod(evaluator.getNextOuterContext(),name,argTypes);\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r \tpublic Closure findFixturingMethod(Evaluator evaluator, String name, Class<?>[] argTypes)", "id": "e01d4c9ab15209d37284cc0ae4d6cbd7", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \tpublic static RunParameters getRunParameters(String[] args)", "fileName": "src/fitlibrary/batch/FitLibraryRunner.java", "methodNumberAfterChange": 7, "commitBeforeChange": "7bc373fdff836c5fe5554dd7cca83ec4c7ddbc73", "diff": ["-\tprivate static List<String> valids = list(SUITE_NAME,FIT_NESSE_DIRY,RESULTS_DIRY,SHOW_PASSES,PORT);\r", "-\t\tRunParameters runParameters = new RunParameters();\r", "-\t\tfor (int i = 0; i < args.length; i++) {\r", "-\t\t\tString tag = args[i];\r", "-\t\t\tif (tag.startsWith(\"-\")) {\r", "-\t\t\t\ttag = tag.substring(1);\r", "-\t\t\t\ti++;\r", "-\t\t\t\tif (valids.contains(tag) && i < args.length)\r", "-\t\t\t\t\trunParameters.put(tag,args[i]);\r", "-\t\t\t\telse\r", "-\t\t\t\t\tthrow new InvalidParameterException(tag);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (runParameters.get(\"suiteName\") == null)\r", "-\t\t\tthrow new InvalidParameterException(\"suiteName\");\r", "-\t\treturn runParameters;\r", "-\t}\r", "+\t\treturn RunParameters.getRunParameters(args);\r"], "commitAfterChange": "a1ec4135443e6b5658923cb34156b47b7ffd658c", "signatureAfterChange": "\r \tpublic static RunParameters getRunParameters(String[] args)", "id": "f3bdd6c704f4e98a606d404e32c3203e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "57e4e29c79d07c068a56d9b8a709b7b7", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findSpecificMethodOrPropertyGetter(String name,\r \t\t\tint argCount, Evaluator evaluator, List<String> signatures) throws Exception", "fileName": "src/fitlibrary/typed/NonGenericTypedObject.java", "methodNumberAfterChange": 5, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic CalledMethodTarget findSpecificMethodOrPropertyGetter(String name,\r", "-\t\t\tint argCount, Evaluator evaluator, List<String> signatures) throws Exception {\r", "-\t\tCalledMethodTarget result = optionallyFindMethodOnTypedObject(name,\r", "-\t\t\t\targCount, evaluator, true);\r", "-\t\tif (result != null)\r", "-\t\t\treturn result;\r", "-\t\ttry {\r", "-\t\t\tif (argCount == 0)\r", "-\t\t\t\treturn findGetterOnTypedObject(name, evaluator);\r", "-\t\t} catch (MissingMethodException e) {\r", "-\t\t\t// Provide a more general error message\r", "-\t\t}\r", "-\t\tthrow new MissingMethodException(signatures, PlugBoard.lookupTarget\r", "-\t\t\t\t.identifiedClassesInSUTChain(subject));\r", "+\tpublic Option<CalledMethodTarget> new_findSpecificMethod(String name, int argCount, Evaluator evaluator) {\r", "+\t\tOption<Closure> methodClosureOption = new_findMethodClosure(name, argCount);\r", "+\t\tif (methodClosureOption.isSome())\r", "+\t\t\treturn new Some<CalledMethodTarget>(methodTargetFactory.createCalledMethodTarget(methodClosureOption.get(), evaluator));\r", "+\t\treturn None.none();\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic Option<CalledMethodTarget> new_findSpecificMethod(String name, int argCount, Evaluator evaluator)", "id": "6938a78ea88619a94ffe4a785446113e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findSpecificMethodOrPropertyGetter(String name, int argCount, Evaluator evaluator, List<String> signatures)", "fileName": "src/fitlibrary/typed/NonGenericTypedObject.java", "methodNumberAfterChange": 2, "commitBeforeChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "diff": ["-\tpublic CalledMethodTarget findSpecificMethodOrPropertyGetter(String name, int argCount, Evaluator evaluator, List<String> signatures) {\r", "-\t\tCalledMethodTarget result = optionallyFindMethodOnTypedObject(name,argCount,evaluator, true);\r", "+\r", "+\tpublic CalledMethodTarget findSpecificMethodOrPropertyGetter(String name,\r", "+\t\t\tint argCount, Evaluator evaluator, List<String> signatures) throws Exception {\r", "+\t\tCalledMethodTarget result = optionallyFindMethodOnTypedObject(name,\r", "+\t\t\t\targCount, evaluator, true);\r", "-        if (argCount == 0)\r", "-\t\t\treturn findGetterOnTypedObject(name,evaluator);\r", "+\t\t\tif (argCount == 0)\r", "+\t\t\t\treturn findGetterOnTypedObject(name, evaluator);\r", "-\t\tthrow new MissingMethodException(signatures,PlugBoard.lookupTarget.identifiedClassesInSUTChain(subject));\r", "+\t\tthrow new MissingMethodException(signatures, PlugBoard.lookupTarget\r", "+\t\t\t\t.identifiedClassesInSUTChain(subject));\r"], "commitAfterChange": "12148fc44971a9675907d16fb4f5c02ec935596d", "signatureAfterChange": "\r \r \tpublic CalledMethodTarget findSpecificMethodOrPropertyGetter(String name,\r \t\t\tint argCount, Evaluator evaluator, List<String> signatures) throws Exception", "id": "756ff93d4c9484ebe5ec2811b29b091e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "d494eb2b9d4c999a97f47495a9c73094", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
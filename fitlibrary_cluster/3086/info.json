{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tpublic Object wrapObjectWithTraverse(TypedObject typedResult)", "fileName": "src/fitlibrary/flow/DoAutoWrapper.java", "methodNumberAfterChange": 1, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic Object wrapObjectWithTraverse(TypedObject typedResult) {\r", "+\tpublic TypedObject wrap(TypedObject typedResult) {\r", "-\t\t\treturn null;\r", "+\t\t\treturn GenericTypedObject.NULL;\r", "-\t\t\treturn null;\r", "+\t\t\treturn typedResult;\r", "-\t\t\treturn result;\r", "-\t\tif (result instanceof Evaluator) {\r", "-\t\t\tEvaluator resultEvaluator = (Evaluator)result;\r", "-\t\t\tif (resultEvaluator != evaluator && resultEvaluator.getNextOuterContext() == null)\r", "-\t\t\t\treturn withOuter(resultEvaluator);\r", "-\t\t    return resultEvaluator;\r", "-\t\t}\r", "-\t\tif (result instanceof Fixture)\r", "-\t\t    return result;\r", "-\t\t\r", "+\t\t\treturn typedResult;\r", "+\t\tif (result instanceof Evaluator || result instanceof Fixture)\r", "+\t\t\treturn typedResult;\r", "+\r", "-\t\t\treturn withOuter(typedResult.traverse(evaluator));\r", "+\t\t\treturn new GenericTypedObject(typedResult.traverse(evaluator));\r", "-\t\t\tCollectionTraverse traverse = (CollectionTraverse) typedResult.traverse(evaluator);\r", "+\t\t\tCollectionTraverse traverse = (CollectionTraverse)typedResult.traverse(evaluator);\r", "-\t\t\treturn withOuter(traverse);\r", "+\t\t\treturn new GenericTypedObject(traverse);\r", "-\t\t    return result;\r", "-\t\treturn withOuter(new DoTraverse(typedResult));\r", "+\t\t\treturn typedResult;\r", "+\t\treturn new GenericTypedObject(new DoTraverse(typedResult));\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic TypedObject wrap(TypedObject typedResult)", "id": "6dc7e65cedc05a3ab1b6cedfe0e5b235", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r \tprivate void handleDomainFixture(TypedObject typedResult, Object subject, Row row, TestResults testResults)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 16, "commitBeforeChange": "2e1ce512c447c1b651f0045e0c07d56949bf4f9e", "diff": ["-\t}\r", "-\tprivate void handleDomainFixture(TypedObject typedResult, Object subject, Row row, TestResults testResults) {\r", "-\t\tTypedObject sut = typedResult;\r", "-\t\tif (subject instanceof DomainFixture)\r", "-\t\t\tsut = ((DomainFixture)subject).getTypedSystemUnderTest();\r", "-\t\tpushOnScope(typedResult,row,testResults);\r", "-\t\tdomainInject = new DomainInjectionTraverse(this);\r", "-\t\tdomainInject.setTypedSystemUnderTest(sut);\r", "-\t\tsetRuntimeContextOf(domainInject);\r", "-\t\tdomainCheck = new DomainCheckTraverse(this);\r", "-\t\tdomainCheck.setTypedSystemUnderTest(sut);\r", "-\t\tsetRuntimeContextOf(domainCheck);\r", "-\t\tcurrent = domainInject;\r", "-\t}\r", "+\t}\r", "+\t@Override\r", "+\tpublic void setDomainFixture(TypedObject typedResult) {\r", "+\t\tObject subject = typedResult.getSubject();\r", "+\t\tTypedObject sut = typedResult;\r", "+\t\tif (subject instanceof DomainFixture)\r", "+\t\t\tsut = ((DomainFixture)subject).getTypedSystemUnderTest();\r", "+\t\tdomainInject = new DomainInjectionTraverse(this);\r", "+\t\tdomainInject.setTypedSystemUnderTest(sut);\r", "+\t\tsetRuntimeContextOf(domainInject);\r", "+\t\tdomainCheck = new DomainCheckTraverse(this);\r", "+\t\tdomainCheck.setTypedSystemUnderTest(sut);\r", "+\t\tsetRuntimeContextOf(domainCheck);\r", "+\t\tcurrent = domainInject;\r", "+\t}\r"], "commitAfterChange": "0a7f908075e2f6aacf3b37f9ed6107b6a8f29ed0", "signatureAfterChange": "\r \t@Override\r \tpublic void setDomainFixture(TypedObject typedResult)", "id": "93c3b9c1b0f87a7566de28490ea2326d", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "df1cf75a8ffe63aa14fd84315a9ad530", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r     public Object interpretRow(Row row, TestResults testResults, Fixture fixtureByName)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 11, "commitBeforeChange": "1a9b02fce576bf8c0ae1342055a0c5082b525445", "diff": ["-    \tsetExpectedResult(new Boolean(true));\r", "-    \t\tDoCaller[] actions = { \r", "-    \t\t\t\tnew DefinedActionCaller(row, this),\r", "-    \t\t\t\tnew MultiDefinedActionCaller(row, this),\r", "-    \t\t\t\tnew SpecialCaller(row,switchSetUp()),\r", "-    \t\t\t\tnew PostFixSpecialCaller(row,switchSetUp()),\r", "-    \t\t\t\tnew FixtureCaller(fixtureByName),\r", "-    \t\t\t\tnew ActionCaller(row,switchSetUp()) };\r", "-\t\t\tcheckForAmbiguity(actions);\r", "-\t\t\tfor (int i = 0; i < actions.length; i++)\r", "-\t\t\t\tif (actions[i].isValid()) {\r", "-\t\t\t\t\tObject result = actions[i].run(row, testResults);\r", "-\t\t\t\t\tif (testResults.isAbandoned() && !testResults.problems())\r", "-\t\t\t\t\t\trow.ignore(testResults);\r", "-\t\t\t\t\treturn result;\r", "-\t\t\t\t}\r", "-\t\t\tmethodsAreMissing(actions,row.text(0, this));\r", "+    \t\tDoCaller[] actions = createDoCallers(row, fixtureByName);\r", "+    \t\tOption<Object> result = interpretSimpleRow(row,testResults,actions,fixtureByName);\r", "+    \t\tif (result.isSome())\r", "+    \t\t\treturn result.get();\r", "+    \t\tmethodsAreMissing(actions,row.text(0, this),possibleSeq(row));\r"], "commitAfterChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "signatureAfterChange": "\r     public Object interpretRow(Row row, TestResults testResults, Fixture fixtureByName)", "id": "4791624c6f563a47024a36438eddba29", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 4, "commitBeforeChange": "45cd4c7886612af0bbcf0d9d5705be6bd83dc738", "diff": ["-\t\t\t\t\t\t\tTable restOfTable = rowNo == 0 ? table : table.fromAt(rowNo);\r", "-\t\t\t\t\t\t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, restOfTable,testResults);\r", "-\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "-\t\t\t\t\t\t\t\t\tfor (int i = 0; i < restOfTable.size(); i++)\r", "-\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, restOfTable.at(i));\r", "+\t\t\t\t\t\t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t\t\t\t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, restOfTable, testResults);\r", "-\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "-\t\t\t\t\t\t\t\t\tfor (int i = 0; i < restOfTable.size(); i++)\r", "-\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, restOfTable.at(i));\r", "+\t\t\t\t\t\t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t\t\t\t\t\tTable remainingTable = restOfTable.asTableOnParse();\r", "+\t\t\t\t\t\t\t\tTable remainingTable = tableFromHere(table, rowNo).asTableOnParse();\r", "-\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "-\t\t\t\t\t\t\t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r"], "commitAfterChange": "ab6a629e809e58ed4ed57aa45aeb30760bda0f95", "signatureAfterChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "id": "bdd5299be5804ed97f4170fea25b9cfc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "cbb1c9c92e8ddded15564867b7f63181", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
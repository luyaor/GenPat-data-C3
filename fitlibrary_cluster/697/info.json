{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tprivate void runTable(Table table, TableListener tableListener)", "fileName": "src/fitlibrary/suite/DoFlow.java", "methodNumberAfterChange": 4, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["-\tprivate void runTable(Table table, TableListener tableListener) {\r", "+\t}\r", "+\tpublic void runTable(Table table, TableListener tableListener) {\r", "-\t\t\tif (testResults.isAbandoned())\r", "-\t\t\t\trow.ignore(testResults);\r", "-\t\t\telse\r", "+\t\t\tif (testResults.isAbandoned()) {\r", "+\t\t\t\tif (suiteFixture == null)\r", "+\t\t\t\t\trow.ignore(testResults);\r", "+\t\t\t} else if (domainCheck != null && row.size() == 1 && row.text(0, flowEvaluator).equals(\"checks\")) {\r", "+\t\t\t\tsetCurrentCheck(); // Remove this hack later\r", "+\t\t\t} else\r", "-\t\t\t\t\tFixture fixtureByName = fixtureOrDoTraverseByName(table,testResults);\r", "-\t\t\t\t\tif (fixtureByName != null && fixtureByName.getClass() == Fixture.class)\r", "-\t\t\t\t\t\tfixtureByName = null;\r", "-\t\t\t\t\tObject result;\r", "-\t\t\t\t\tif (fixtureByName instanceof DoFixture) {\r", "-\t\t\t\t\t\tresult = fixtureByName;\r", "-\t\t\t\t\t\tfixtureByName = null;\r", "-\t\t\t\t\t} else\r", "-\t\t\t\t\t\tresult = interpretRow(row,testResults,fixtureByName);\r", "-\t\t\t\t\tif (result instanceof DoEvaluator) {\r", "-\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator) result;\r", "-\t\t\t\t\t\tdoEvaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\tdoEvaluator.setUp(table, testResults);\r", "-\t\t\t\t\t\tpushSut(doEvaluator);\r", "-\t\t\t\t\t} else if (result instanceof Evaluator) {\r", "+//\t\t\t\t\tSystem.out.println(\"DoFlow row \"+row);\r", "+\t\t\t\t\tObject result = flowEvaluator.interpretRow(row,testResults,null);\r", "+//\t\t\t\t\tSystem.out.println(\"DoFlow got \"+result);\r", "+\t\t\t\t\tif (result == null) {\r", "+\t\t\t\t\t\t// Can't do anything useful with a null\r", "+\t\t\t\t\t} else if (result.getClass() == Fixture.class) {\r", "+\t\t\t\t\t\t// Ignore it, as it does nothing.\r", "+\t\t\t\t\t} else if (result.getClass() == DoFixture.class || result.getClass() == DoTraverse.class) {\r", "+\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)result;\r", "+\t\t\t\t\t\t// Unwrap an auto-wrap, keeping the type information, unless it has an outer context\r", "+\t\t\t\t\t\tif (doEvaluator.getNextOuterContext() != null)\r", "+\t\t\t\t\t\t\taDoEvaluator(doEvaluator,table,testResults);\r", "+\t\t\t\t\t\telse if (doEvaluator.getSystemUnderTest() != null)\r", "+\t\t\t\t\t\t\tpushSut(doEvaluator.getTypedSystemUnderTest(),table,testResults);\r", "+\t\t\t\t\t} else if (result instanceof DomainFixtured || result instanceof DomainFixture) {\r", "+\t\t\t\t\t\tpushSut(result,table,testResults);\r", "+\t\t\t\t\t\tdomainInject = new DomainInjectionTraverse(this);\r", "+\t\t\t\t\t\tdomainInject.setSystemUnderTest(result);\r", "+\t\t\t\t\t\tsetRuntimeContext(domainInject);\r", "+\t\t\t\t\t\tdomainCheck = new DomainCheckTraverse(this);\r", "+\t\t\t\t\t\tdomainCheck.setSystemUnderTest(result);\r", "+\t\t\t\t\t\tsetRuntimeContext(domainCheck);\r", "+\t\t\t\t\t\tcurrent = domainInject;\r", "+\t\t\t\t\t} else if (result instanceof SuiteEvaluator) {\r", "+\t\t\t\t\t\tsuiteFixture = (SuiteEvaluator) result;\r", "+\t\t\t\t\t\tsetRuntimeContext(suiteFixture); // Subsequent tables are global for now.\r", "+\t\t\t\t\t\tcallMethod(suiteFixture, \"suiteSetUp\", table,tableListener.getTestResults());\r", "+\t\t\t\t\t\tpushSut(result,table,testResults);\r", "+\t\t\t\t\t} else if (fixtureThatIsRelevantSubclassOfDoFixture(result)) {\r", "+\t\t\t\t\t\tflowEvaluator.fitHandler().doTable(result,new Table(row),testResults,flowEvaluator);\r", "+\t\t\t\t\t\treturn; // have finished table\r", "+\t\t\t\t\t} else if (result instanceof CollectionSetUpTraverse) {\r", "+\t\t\t\t\t\tDoTraverse doTraverse = (DoTraverse) result;\r", "+\t\t\t\t\t\tsetRuntimeContext(doTraverse);\r", "+\t\t\t\t\t\tdoTraverse.interpretAfterFirstRow(new Table(row), testResults); // It could be any row\r", "+\t\t\t\t\t\tbreak;// have finished table\r", "+\t\t\t\t\t} else if (result instanceof DoEvaluator) {\r", "+\t\t\t\t\t\taDoEvaluator((DoEvaluator) result, table, testResults);\r", "+\t\t\t\t\t} else if (result instanceof Evaluator) { // Calculate, etc\r", "-\t\t\t\t\t\tevaluator.setRuntimeContext(runtimeContext);\r", "-\t\t\t\t\t\tevaluator.setUp(table, testResults);\r", "-\t\t\t\t\t\tevaluator.interpretAfterFirstRow(table, testResults);\r", "-\t\t\t\t\t\tevaluator.tearDown(table, testResults);\r", "-\t\t\t\t\t\tbreak; // have finished table\r", "-\t\t\t\t\t} else if (getAlienTraverseHandler().isAlienTraverse(result)) {\r", "-\t\t\t\t\t\tgetAlienTraverseHandler().doTable(result,new Table(row),testResults,this);\r", "-\t\t\t\t\t\tbreak; // have finished table\r", "-\t\t\t\t\t} else if (result != null) {\r", "-\t\t\t\t\t\tpushSut(result);\r", "-\t\t\t\t\t}\r", "+\t\t\t\t\t\tsetRuntimeContext(evaluator);\r", "+\t\t\t\t\t\tcallSetUpSutChain(evaluator,table, testResults);\r", "+\t\t\t\t\t\tevaluator.interpretAfterFirstRow(new Table(row), testResults); // It could be any row\r", "+\t\t\t\t\t\tcallTearDownSutChain(evaluator,table, testResults);\r", "+\t\t\t\t\t\treturn; // have finished table\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tif (result instanceof Fixture) {\r", "+\t\t\t\t\t\t\tflowEvaluator.fitHandler().doTable(result,new Table(row),testResults,flowEvaluator);\r", "+\t\t\t\t\t\t\treturn; // have finished table\r", "+\t\t\t\t\t\t} else if (CalledMethodTarget.canAutoWrap(result))\r", "+\t\t\t\t\t\t\tpushSut(result,table,testResults);\r", "+\t\t\t\t\t} // But only when it comes from a class name!\r", "-\t\tpopLocalSut(table,tableListener);\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r \tpublic void runTable(Table table, TableListener tableListener)", "id": "006861f199aedc1a25e06c6e18e77324", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tpublic void runTable(Table table, TableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 4, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic void runTable(Table table, TableListener tableListener) {\r", "+\tpublic void runTable(Table table, ITableListener tableListener) {\r", "-\t\t\tif (testResults.isAbandoned()) {\r", "-\t\t\t\tif (suiteFixture == null)\r", "+\t\t\tif (row.cell(0).hadError()) {\r", "+\t\t\t\t// Already failed due to plain text problems\r", "+\t\t\t} else if (runtime.isAbandoned(testResults)) {\r", "+//\t\t\t\tif (!testResults.problems())\r", "-\t\t\t} else\r", "+\t\t\t} else {\r", "-\t\t\t\t\tTypedObject typedResult = flowEvaluator.interpretRow(row,testResults,null);\r", "-\t\t\t\t\tObject result = doAutoWrapper.wrapObjectWithTraverse(typedResult);\r", "-//\t\t\t\t\tSystem.out.println(\"DoFlow got \"+result);\r", "-\t\t\t\t\tif (result == null) {\r", "-\t\t\t\t\t\t// Can't do anything useful with a null\r", "-\t\t\t\t\t} else if (result.getClass() == Fixture.class) {\r", "-\t\t\t\t\t\t// Ignore it, as it does nothing.\r", "-\t\t\t\t\t} else if (result.getClass() == DoFixture.class || result.getClass() == DoTraverse.class) {\r", "-\t\t\t\t\t\tDoEvaluator doEvaluator = (DoEvaluator)result;\r", "-\t\t\t\t\t\t// Unwrap an auto-wrap, keeping the type information, unless it has an outer context\r", "-\t\t\t\t\t\tif (doEvaluator.getNextOuterContext() != null)\r", "-\t\t\t\t\t\t\taDoEvaluator(doEvaluator,table,testResults);\r", "-\t\t\t\t\t\telse if (doEvaluator.getSystemUnderTest() != null)\r", "-\t\t\t\t\t\t\tpushSut(doEvaluator.getTypedSystemUnderTest(),table,testResults);\r", "-\t\t\t\t\t} else if (result instanceof DomainFixtured || result instanceof DomainFixture) {\r", "-\t\t\t\t\t\tpushSut(result,table,testResults);\r", "-\t\t\t\t\t\tdomainInject = new DomainInjectionTraverse(this);\r", "-\t\t\t\t\t\tdomainInject.setSystemUnderTest(result);\r", "-\t\t\t\t\t\tsetRuntimeContext(domainInject);\r", "-\t\t\t\t\t\tdomainCheck = new DomainCheckTraverse(this);\r", "-\t\t\t\t\t\tdomainCheck.setSystemUnderTest(result);\r", "-\t\t\t\t\t\tsetRuntimeContext(domainCheck);\r", "-\t\t\t\t\t\tcurrent = domainInject;\r", "-\t\t\t\t\t} else if (result instanceof SuiteEvaluator) {\r", "-\t\t\t\t\t\tsuiteFixture = (SuiteEvaluator) result;\r", "-\t\t\t\t\t\tsetRuntimeContext(suiteFixture); // Subsequent tables are global for now.\r", "-\t\t\t\t\t\tcallMethod(suiteFixture, \"suiteSetUp\", table,tableListener.getTestResults());\r", "-\t\t\t\t\t\tpushSut(result,table,testResults);\r", "-\t\t\t\t\t} else if (fixtureThatIsRelevantSubclassOfDoFixture(result)) {\r", "-\t\t\t\t\t\tflowEvaluator.fitHandler().doTable(result,new Table(row),testResults,flowEvaluator);\r", "-\t\t\t\t\t\treturn; // have finished table\r", "-\t\t\t\t\t} else if (result instanceof CollectionSetUpTraverse) {\r", "-\t\t\t\t\t\tDoTraverse doTraverse = (DoTraverse) result;\r", "-\t\t\t\t\t\tsetRuntimeContext(doTraverse);\r", "-\t\t\t\t\t\tdoTraverse.interpretAfterFirstRow(new Table(row), testResults); // It could be any row\r", "-\t\t\t\t\t\tbreak;// have finished table\r", "-\t\t\t\t\t} else if (result instanceof DoEvaluator) {\r", "-\t\t\t\t\t\taDoEvaluator((DoEvaluator) result, table, testResults);\r", "-\t\t\t\t\t} else if (result instanceof Evaluator) { // Calculate, etc\r", "-\t\t\t\t\t\tEvaluator evaluator = (Evaluator) result;\r", "-\t\t\t\t\t\tsetRuntimeContext(evaluator);\r", "-\t\t\t\t\t\tcallSetUpSutChain(evaluator,table, testResults);\r", "-\t\t\t\t\t\tevaluator.interpretAfterFirstRow(new Table(row), testResults); // It could be any row\r", "-\t\t\t\t\t\tcallTearDownSutChain(evaluator,table, testResults);\r", "-\t\t\t\t\t\treturn; // have finished table\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tif (result instanceof Fixture) {\r", "-\t\t\t\t\t\t\tflowEvaluator.fitHandler().doTable(result,new Table(row),testResults,flowEvaluator);\r", "-\t\t\t\t\t\t\treturn; // have finished table\r", "-\t\t\t\t\t\t} else if (DoAutoWrapper.canAutoWrap(result))\r", "-\t\t\t\t\t\t\tpushSut(result,table,testResults);\r", "-\t\t\t\t\t} // But only when it comes from a class name!\r", "+\t\t\t\t\tfinal Cell cell = row.cell(0);\r", "+\t\t\t    \tif (cell.hasEmbeddedTable()) { // Doesn't allow for other cells in row...\r", "+\t\t\t    \t\thandleInnerTables(cell, tableListener);\r", "+\t\t\t    \t} else {\r", "+\t\t\t    \t\trow = mapOddBalls(row,flowEvaluator);\r", "+\t\t\t    \t\tTypedObject typedResult = flowEvaluator.interpretRow(row,testResults);\r", "+\t\t\t    \t\tObject subject = typedResult.getSubject();\r", "+//\t\t\t    \t\tSystem.out.println(\"DoFlow got \"+subject);\r", "+\t\t\t    \t\tif (subject instanceof Evaluator)\r", "+\t\t\t    \t\t\t((Evaluator)subject).setRuntimeContext(flowEvaluator.getRuntimeContext());\r", "+\t\t\t    \t\tif (subject == null) {\r", "+\t\t\t    \t\t\t// Can't do anything useful with a null\r", "+\t\t\t    \t\t} else if (subject.getClass() == Fixture.class) {\r", "+\t\t\t    \t\t\t// Ignore it, as it does nothing.\r", "+\t\t\t    \t\t} else if (subject.getClass() == DoFixture.class || subject.getClass() == DoTraverse.class) {\r", "+\t\t\t    \t\t\thandleActualDoFixture((DoEvaluator)subject,row,testResults);\r", "+\t\t\t    \t\t} else if (subject.getClass() == SelectFixture.class) {\r", "+\t\t\t    \t\t\truntime.showAsAfterTable(\"warning\", \"This is no longer needed\");\r", "+\t\t\t    \t\t\thandleActualDoFixture((DoEvaluator)subject,row,testResults);\r", "+\t\t\t    \t\t} else if (subject instanceof DomainFixtured || subject instanceof DomainFixture) {\r", "+\t\t\t    \t\t\thandleDomainFixture(typedResult, subject, row, testResults);\r", "+\t\t\t    \t\t} else if (subject instanceof SuiteEvaluator) {\r", "+\t\t\t    \t\t\thandleSuiteFixture((SuiteEvaluator)subject, typedResult, row, testResults);\r", "+\t\t\t    \t\t} else if (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "+\t\t\t    \t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, testResults);\r", "+\t\t\t    \t\t\treturn;// have finished table\r", "+\t\t\t    \t\t} else if (subject instanceof DoEvaluator) {\r", "+\t\t\t    \t\t\tpushOnScope(typedResult,row,testResults);\r", "+\t\t\t    \t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "+\t\t\t    \t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, testResults);\r", "+\t\t\t    \t\t\treturn; // have finished table\r", "+\t\t\t    \t\t} else if (subject instanceof Fixture) {\r", "+\t\t\t    \t\t\tflowEvaluator.fitHandler().doTable(subject,new TableOnParse(row),testResults,flowEvaluator);\r", "+\t\t\t    \t\t\treturn; // have finished table\r", "+\t\t\t    \t\t}\r", "+\t\t\t    \t}\r", "+\t\t\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "id": "8d308cc304f57f290bb775c33d256c65", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "751f11ecaf3f42ec95562c71abf3ce11", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r   private static void addActions(StringBuilder s, Class<? extends Object> aClass, boolean selective)", "fileName": "src/fitlibrary/flow/WhatIsInScope.java", "methodNumberAfterChange": 1, "commitBeforeChange": "61117395b81dcb5282c8dd7cace95bc2fe71d3e3", "diff": ["-  private static void addActions(StringBuilder s, Class<? extends Object> aClass, boolean selective) {\r", "-\t  s.append(\"<td><table>\");\r", "-\t  Method[] methods = aClass.getMethods();\r", "-\t  Arrays.sort(methods, new Comparator<Method>() {\r", "-\t\t  public int compare(Method m1, Method m2) {\r", "-\t\t\t  return m1.getName().compareToIgnoreCase(m2.getName());\r", "-\t\t  }\r", "-\t  });\r", "-\t  for (Method method : methods) {\r", "-\t\t  if (method.getDeclaringClass() != Object.class && !method.getName().equals(\"getSystemUnderTest\")) {\r", "-\t\t\t  AnAction action = method.getAnnotation(AnAction.class);\r", "-\t\t\t  if (action == null) {\r", "-\t\t\t\t  if (!selective)\r", "-\t\t\t\t\t  s.append(\"<tr><td>\" + method.getName() + \"/\"\r", "-\t\t\t\t\t\t\t  + method.getParameterTypes().length + \"</td></tr>\\n\");\r", "-\t\t\t  } else if (action.actionType() != ActionType.IGNORE) {\r", "-\t\t\t\t  String name = action.wiki();\r", "-\t\t\t\t  if (name.isEmpty())\r", "-\t\t\t\t\t  name = unCamel(method.getName(),action.actionType());\r", "-\t\t\t\t  if (action.actionType() == ActionType.PREFIX)\r", "-\t\t\t\t\t  name += \"action...|\";\r", "-\t\t\t\t  s.append(\"<tr><td><span class='note' title='\"+action.tooltip()+\"'>\" + name + \"</span></td>\");\r", "-\t\t\t\t  if (action.actionType() == ActionType.COMPOUND && !method.getReturnType().isPrimitive()) {\r", "-\t\t\t\t\t  addActions(s, method.getReturnType(),true);\r", "-\t\t\t\t  }\r", "-\t\t\t\t  s.append(\"</tr>\");\r", "-\t\t\t  }\r", "-\t\t  }\r", "-\t  }\r", "-\t  s.append(\"</table></td>\");\r", "-  }\r", "+\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String substring, boolean selective) {\r", "+\t\ts.append(\"<td><table>\");\r", "+\t\tMethod[] methods = aClass.getMethods();\r", "+\t\tArrays.sort(methods, new Comparator<Method>() {\r", "+\t\t\tpublic int compare(Method m1, Method m2) {\r", "+\t\t\t\treturn m1.getName().compareToIgnoreCase(m2.getName());\r", "+\t\t\t}\r", "+\t\t});\r", "+\t\tfor (Method method : methods) {\r", "+\t\t\tClass<?> declaringClass = method.getDeclaringClass();\r", "+\t\t\tShowSelectedActions showAnnotation = declaringClass.getAnnotation(ShowSelectedActions.class);\r", "+\t\t\tboolean locallySelective = selective || showAnnotation != null;\r", "+\t\t\tboolean ignoreDoTraverse = declaringClass == DoTraverse.class && aClass != DoTraverse.class;\r", "+\t\t\tboolean matches = substring.isEmpty() || method.getName().contains(substring);\r", "+\t\t\tif (matches &&\r", "+\t\t\t\t\t!ignoreDoTraverse &&\r", "+\t\t\t\t\tdeclaringClass != Object.class && \r", "+\t\t\t\t\tdeclaringClass != Fixture.class && \r", "+\t\t\t\t\t!method.getName().equals(\"getSystemUnderTest\")) {\r", "+\t\t\t\tAnAction action = method.getAnnotation(AnAction.class);\r", "+\t\t\t\tif (action == null) {\r", "+\t\t\t\t\tif (!locallySelective) {\r", "+\t\t\t\t\t\ts.append(\"<tr><td>\" + methodName(method) + \"</td></tr>\\n\");\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else if (action.actionType() != ActionType.IGNORE) {\r", "+\t\t\t\t\tString name = action.wiki();\r", "+\t\t\t\t\tif (name.isEmpty())\r", "+\t\t\t\t\t\tname = unCamel(method.getName(),action.actionType());\r", "+\t\t\t\t\tif (action.actionType() == ActionType.PREFIX)\r", "+\t\t\t\t\t\tname += \"action...|\";\r", "+\t\t\t\t\ts.append(\"<tr><td><span class='note' title='\"+action.tooltip()+\"'>\" + name + \"</span></td>\");\r", "+\t\t\t\t\tif (action.actionType() == ActionType.COMPOUND && !method.getReturnType().isPrimitive()) {\r", "+\t\t\t\t\t\taddActions(s, method.getReturnType(),substring,true);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\ts.append(\"</tr>\");\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\ts.append(\"</table></td>\");\r", "+\t}\r"], "commitAfterChange": "abdca5590322cb763a5db1236b7a9c36f3d22653", "signatureAfterChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String substring, boolean selective)", "id": "2f8bbccac68a71ce45990dce9e883346", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \t@Override\r \tpublic Object run(IRow row, TestResults testResults) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/caller/DoActionCaller.java", "methodNumberAfterChange": 2, "commitBeforeChange": "912f2299cb68da9d49ecfc90590037db64cfcc0e", "diff": ["-\tpublic Object run(IRow row, TestResults testResults) throws Exception {\r", "-\t\treturn new ActionCaller(target).run(row, testResults);\r", "+\tpublic TypedObject run(IRow row, TestResults testResults) throws Exception {\r", "+\t\ttry {\r", "+\t\t\tTypedObject typedResult = target.invokeTyped(row.rowFrom(1),testResults);\r", "+\t\t\tObject result = null;\r", "+\t\t\tif (typedResult != null)\r", "+\t\t\t\tresult = typedResult.getSubject();\r", "+\t\t\tif (result instanceof Boolean)\r", "+\t\t\t\ttarget.color(row,((Boolean)result).booleanValue(),testResults);\r", "+\t\t\treturn typedResult;\r", "+\t\t} catch (AbandonException e) {\r", "+\t\t\treturn new GenericTypedObject(null);\r", "+\t\t} catch (InvocationTargetException e) {\r", "+\t\t\tThrowable throwable = PlugBoard.exceptionHandling.unwrapThrowable(e);\r", "+\t\t\tif (throwable instanceof FitLibraryShowException)\r", "+\t\t\t\trow.cell(0).error(testResults);\r", "+\t\t\tthrow e;\r", "+\t\t}\r"], "commitAfterChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "signatureAfterChange": "\r \t@Override\r \tpublic TypedObject run(IRow row, TestResults testResults) throws Exception", "id": "4066fb4ab8b9270184f6541feb37a94b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tprivate static void runParallel(String suiteName, String fitNesseDirectoryPath, String resultsDirectoryPath, boolean showPasses, int port) throws IOException, InterruptedException", "fileName": "src/fitlibrary/batch/FitLibraryRunner.java", "methodNumberAfterChange": 4, "commitBeforeChange": "7bc373fdff836c5fe5554dd7cca83ec4c7ddbc73", "diff": ["-\tprivate static void runParallel(String suiteName, String fitNesseDirectoryPath, String resultsDirectoryPath, boolean showPasses, int port) throws IOException, InterruptedException {\r", "+\tprivate static void runParallel(String suiteName, String fitNesseDirectoryPath, String resultsDirectoryPath, boolean showPasses, int port, int maxRetries) throws IOException, InterruptedException {\r", "-\t\tParallelTestRunner runner = new ParallelTestRunner(new ParallelFitNesseRepository(fitNesseDirectoryPath,port), \r", "-\t\t\t\tnew FitLibraryTestEngine(),resultsDirectoryPath,showPasses,suiteName);\r", "-\t\tCounts counts = runner.runSuite(suiteName,new ParallelSuiteResult(suiteName,showPasses));\r", "-\t\treport(start, counts);\r", "+\t\tHashSet<String> passedTestList = new HashSet<String>();\r", "+\t\tFitLibraryTestEngine testEngine = new RetryAwareFitLibraryTestEngine(passedTestList);\r", "+\t\tint numLoops = 1; \r", "+\t\tCounts counts;\r", "+\t\twhile(true) {\r", "+\t\t\tParallelTestRunner runner = new ParallelTestRunner(new ParallelFitNesseRepository(fitNesseDirectoryPath,port), testEngine,resultsDirectoryPath,showPasses,suiteName);\r", "+\t\t\tcounts = runner.runSuite(suiteName,new ParallelSuiteResult(suiteName,showPasses));\r", "+\t\t\treport(start, counts);\r", "+\t\t\tif ((counts.exceptions+counts.wrong) == 0 || numLoops++ > maxRetries) \r", "+\t\t\t\tbreak;\r", "+\t\t\t\r", "+\t\t\tSystem.out.println(\" \"); \r", "+\t\t\tSystem.out.println(\"Some tests failed... Retry #\"+(numLoops-1));\r", "+\t\t} \r", "+\t\t\r", "+\t\tSystem.exit(counts.wrong+counts.exceptions);\r"], "commitAfterChange": "a1ec4135443e6b5658923cb34156b47b7ffd658c", "signatureAfterChange": "\r \tprivate static void runParallel(String suiteName, String fitNesseDirectoryPath, String resultsDirectoryPath, boolean showPasses, int port, int maxRetries) throws IOException, InterruptedException", "id": "49d303edadcd86f09e7e66b76fdea4b9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tpublic TwoStageSpecial log(final Row row) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/special/PrefixSpecialAction.java", "methodNumberAfterChange": 3, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t\treturn show(row,PrefixSpecialAction.ShowSyle.LOGGED);\r", "-\t}\r", "+\t\tlogger.trace(\"Calling log()\");\r", "+\t\t\t\t\tlogger.trace(\"Calling \"+target);\r", "+\t\t\t\t\treportBoolean(result, row.at(1), testResults);\r", "+\t\t\t\t\treport(target.getResultString(result));\r", "+\t\t\tprivate void report(String text) {\r", "+\t\t\t\tactionContext.logMessage(text);\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \tpublic TwoStageSpecial log(final Row row) throws Exception", "id": "51ebeb6b40aa3b587a1239f6fc3cd22b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r \tprivate static boolean equalTags(Parse p1, Parse p2)", "fileName": "src/fitlibrary/spec/SpecifyFixture.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["+\r", "+\tprivate boolean equals(String actual, String expected) {\r", "+\t\tString canonicalActual = canonical(actual);\r", "+\t\tString canonicalExpected = canonical(expected);\r", "+\t\t\r", "+\t\tif (\"IGNORE\".equals(canonicalExpected))\r", "+\t\tint start = canonicalExpected.indexOf(stackTrace);\r", "+\t\tif (start >= 0)\r", "+\t\t\treturn canonicalActual.startsWith(canonicalExpected.substring(0,start+stackTrace.length()));\r", "+\t\tString fitLabel = \"<span class=\\\"fit_label\\\">\";\r", "+\t\tstart = canonicalExpected.indexOf(fitLabel);\r", "+\t\tif (start >= 0)\r", "+\t\t\treturn canonicalActual.startsWith(canonicalExpected.substring(0,start+fitLabel.length()));\r", "+\t\treturn canonicalActual.equals(canonicalExpected);\r", "+\t}\r", "-\t}\r", "-\tprivate static boolean equalTags(Parse p1, Parse p2) {\r", "-\t\treturn p1.tag.equals(p2.tag);\r", "-\t}\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \r \tprivate boolean equals(String actual, String expected)", "id": "5412cd02872bd60e83b1ccea1c1ac78c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tpublic TestResults doTables(Tables theTables)", "fileName": "src/fitlibrary/suite/FitLibraryServerSingleStep.java", "methodNumberAfterChange": 1, "commitBeforeChange": "d12d5e6196b5f1255b0419761d9c3de85d1c3d44", "diff": ["-\tpublic TestResults doTables(Tables theTables) {\r", "+\tpublic TestResults doTables(Tables tables) {\r", "+\t\tfinal ArrayBlockingQueue<ReportAction> reportQueue = new ArrayBlockingQueue<ReportAction>(\r", "+\t\t\t\t5);\r", "-\t\tbatching.doTables(theTables,tableListener);\r", "+\r", "+\t\t\r", "+\t\tDoFlowActor actor = batching.actor(reportQueue,tableListener.getTestResults());\r", "+\t\tfor (int t = 0; t < tables.size(); t++)\r", "+\t\t\tactor.addTable(tables.at(t));\r", "+\t\tactor.endStorytest();\r", "+\r", "+\t\t\r", "+\t\tSystem.out.println(\"Running actor10 version\");\r", "+\t\ttry {\r", "+\t\t\twhile (true) {\r", "+\t\t\t\tReportAction action;\r", "+\t\t\t\taction = reportQueue.take();\r", "+\t\t\t\taction.run(tableListener);\r", "+\t\t\t\tif (action.isDone()) {\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t} catch (InterruptedException e) {\r", "+\t\t\t//\r", "+\t\t}\r", "+\t\tSystem.out.println(\"Finished actor version\");\r"], "commitAfterChange": "a3ae9d648f5a9065636c2668ccd32d098a4ba7e0", "signatureAfterChange": "\r \tpublic TestResults doTables(Tables tables)", "id": "848ef11ac7c273ab93906b079d25e3a9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 4, "commitBeforeChange": "8655c08986fab4cb3523c8934e8765739689b282", "diff": ["-\t\t\t    \t\t} else if (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "-\t\t\t    \t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, testResults);\r", "-\t\t\t    \t\t\treturn;// have finished table\r", "-\t\t\t    \t\t} else if (subject instanceof DoEvaluator) {\r", "-\t\t\t    \t\t\tpushOnScope(typedResult,row,testResults);\r", "-\t\t\t    \t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "-\t\t\t    \t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, testResults);\r", "-\t\t\t    \t\t\treturn; // have finished table\r", "-\t\t\t    \t\t} else if (subject instanceof Fixture) {\r", "-\t\t\t    \t\t\tflowEvaluator.fitHandler().doTable((Fixture) subject,TableFactory.table(row),testResults,flowEvaluator);\r", "-\t\t\t    \t\t\treturn; // have finished table\r", "-\t\t\t    \t\t}\r", "+\t\t\t    \t\t} else {\r", "+\t\t\t\t\t\t\tTable restOfTable = rowNo == 0 ? table : table.fromAt(rowNo);\r", "+\t\t\t\t\t\t\tif (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "+\t\t\t\t\t\t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, restOfTable,testResults);\r", "+\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "+\t\t\t\t\t\t\t\t\tfor (int i = 0; i < restOfTable.size(); i++)\r", "+\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, restOfTable.at(i));\r", "+\t\t\t\t\t\t\t\treturn;// have finished table\r", "+\t\t\t\t\t\t\t} else if (subject instanceof DoEvaluator) {\r", "+\t\t\t\t\t\t\t\tpushOnScope(typedResult,row,testResults);\r", "+\t\t\t\t\t\t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "+\t\t\t\t\t\t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, restOfTable, testResults);\r", "+\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "+\t\t\t\t\t\t\t\t\tfor (int i = 0; i < restOfTable.size(); i++)\r", "+\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, restOfTable.at(i));\r", "+\t\t\t\t\t\t\t\treturn; // have finished table\r", "+\t\t\t\t\t\t\t} else if (subject instanceof Fixture) {\r", "+\t\t\t\t\t\t\t\tTable remainingTable = restOfTable.asTableOnParse();\r", "+\t\t\t\t\t\t\t\tflowEvaluator.fitHandler().doTable((Fixture) subject,remainingTable,testResults,flowEvaluator);\r", "+\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "+\t\t\t\t\t\t\t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r", "+\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, remainingTable.at(i));\r", "+\t\t\t\t\t\t\t\treturn; // have finished table\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r"], "commitAfterChange": "45cd4c7886612af0bbcf0d9d5705be6bd83dc738", "signatureAfterChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "id": "bea7036173d0946c3ebb367218dd58e1", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "7208e8f35d171749da6153e41a9e40a5", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
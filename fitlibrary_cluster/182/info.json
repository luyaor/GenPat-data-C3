{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tprivate static void macroReplace(Tables tables, Map<String,Object> mapToRef, VariableResolver resolver)", "fileName": "src/fitlibrary/definedAction/ParameterBinder.java", "methodNumberAfterChange": 3, "commitBeforeChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "diff": ["-\t}\r", "-\tprivate static void macroReplace(Tables tables, Map<String,Object> mapToRef, VariableResolver resolver) {\r", "-\t\tList<String> reverseSortOrder = new ArrayList<String>(mapToRef.keySet());\r", "-\t\tCollections.sort(reverseSortOrder,new Comparator<String>() {\r", "-\t\t\tpublic int compare(String arg0, String arg1) {\r", "-\t\t\t\treturn arg1.compareTo(arg0);\r", "-\t\t\t}\r", "-\t\t});\r", "-\t\tfor (String key : reverseSortOrder)\r", "-\t\t\tmacroReplaceTables(tables, key, mapToRef.get(key),resolver);\r", "-\t}\r", "+\tpublic void verifyHeaderAgainstFormalParameters(Row row, VariableResolver resolver) {\r", "+\t\tif (row.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+row.size());\r", "+\t\tHashSet<String> set = new HashSet<String>();\r", "+\t\tfor (int c = 0; c < row.size(); c++) {\r", "+\t\t\tString headerName = row.text(c, resolver);\r", "+\t\t\tif (!formalParameters.contains(headerName))\r", "+\t\t\t\tthrow new FitLibraryException(\"Unknown parameter: '\"+headerName+\"'\");\r", "+\t\t\tif (set.contains(headerName))\r", "+\t\t\t\tthrow new FitLibraryException(\"Duplicate parameter: '\"+headerName+\"'\");\r", "+\t\t\tset.add(headerName);\r"], "commitAfterChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "signatureAfterChange": "\r \tpublic void verifyHeaderAgainstFormalParameters(Row row, VariableResolver resolver)", "id": "14eb11621a805ea725639ffd7c6b117c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tpublic void bind(Row parameterRow, Row row, DynamicVariables dynamicVariables,\r \t\t\tVariableResolver resolver)", "fileName": "src/fitlibrary/definedAction/MultiParameterBinder.java", "methodNumberAfterChange": 4, "commitBeforeChange": "6aa33f7a49e37bb18384a62861c89eb6f5a7aeb4", "diff": ["-\tpublic void bind(Row parameterRow, Row row, DynamicVariables dynamicVariables,\r", "-\t\t\tVariableResolver resolver) {\r", "-\t\tif (row.size() != formalParameters.size())\r", "-\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+row.size());\r", "-\t\tfor (int c = 0; c < row.size(); c++) {\r", "-\t\t\tString parameter = parameterRow.text(c, resolver);\r", "-\t\t\tString actual = row.text(c, resolver);\r", "-\t\t\tdynamicVariables.putParameter(parameter, actual);\r", "+\tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables) {\r", "+\t\tif (callRow.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+callRow.size());\r", "+\t\tfor (int c = 0; c < callRow.size(); c++) {\r", "+\t\t\tString parameter = parameterRow.text(c, dynamicVariables);\r", "+\t\t\tif (callRow.at(c).hasEmbeddedTables(dynamicVariables))\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.at(c).getEmbeddedTables());\r", "+\t\t\telse\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.text(c, dynamicVariables));\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "signatureAfterChange": "\r \tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables)", "id": "2957b93e893573e65f6742dcfab38631", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tpublic void bindUni(List<Object> actualArgs, DynamicVariables dynamicVariables)", "fileName": "src/fitlibrary/definedAction/ParameterBinder.java", "methodNumberAfterChange": 5, "commitBeforeChange": "25d69c2691bfddbe4008da3e99ff3ccad63e476d", "diff": ["-\t\tif (actualArgs.size() != formalParameters.size())\r", "-\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+actualArgs.size());\r", "-\t\tfor (int c = 0; c < formalParameters.size(); c++) {\r", "-\t\t\tObject object = actualArgs.get(c);\r", "-\t\t\tif (object instanceof String)\r", "-\t\t\t\tobject = Fixture.escape(Parse.unescape(object.toString()));\r", "-\t\t\tdynamicVariables.putParameter(formalParameters.get(c),object);\r", "-\t\t}\r", "-\t}\r", "+        if (actualArgs.size() != formalParameters.size())\r", "+              throw new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+actualArgs.size());\r", "+        for (int c = 0; c < formalParameters.size(); c++) \r", "+              dynamicVariables.putParameter(formalParameters.get(c),actualArgs.get(c));\r", "+  }\r"], "commitAfterChange": "7bc373fdff836c5fe5554dd7cca83ec4c7ddbc73", "signatureAfterChange": "\r \tpublic void bindUni(List<Object> actualArgs, DynamicVariables dynamicVariables)", "id": "417b511140fe47bad66a2427c0f670a9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tpublic void createMappingsForCall(List<String> actuals, LocalDynamicVariables vars)", "fileName": "src/fitlibrary/definedAction/MultiParameterBinder.java", "methodNumberAfterChange": 5, "commitBeforeChange": "6aa33f7a49e37bb18384a62861c89eb6f5a7aeb4", "diff": ["-\t}\r", "-\tpublic void createMappingsForCall(List<String> actuals, LocalDynamicVariables vars) {\r", "-\t\tif (actuals.size() != formalParameters.size())\r", "-\t\t\tthrow new RuntimeException(\"Formals and actuals don't match\");\r", "-\t\tfor (int i = 0; i < actuals.size(); i++)\r", "-\t\t\tvars.putParameter(formalParameters.get(i), actuals.get(i));\r", "+\t}\r", "+\tpublic void bindUni(Row callRow, DynamicVariables dynamicVariables) {\r", "+\t\tif (callRow.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+callRow.size());\r", "+\t\tfor (int c = 0; c < callRow.size(); c++) {\r", "+\t\t\tString parameter = formalParameters.get(c);\r", "+\t\t\tif (callRow.at(c).hasEmbeddedTables(dynamicVariables))\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.at(c).getEmbeddedTables());\r", "+\t\t\telse\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.text(c, dynamicVariables));\r"], "commitAfterChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "signatureAfterChange": "\r \tpublic void bindUni(Row callRow, DynamicVariables dynamicVariables)", "id": "492619cccd452d6ac09f4b7297022c7a", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \tprivate static void macroReplaceCell(Cell cell, String key, Object value, VariableResolver resolver)", "fileName": "src/fitlibrary/definedAction/ParameterBinder.java", "methodNumberAfterChange": 4, "commitBeforeChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "diff": ["-\tprivate static void macroReplaceCell(Cell cell, String key, Object value, VariableResolver resolver) {\r", "-\t\t// Do NOT do dynamic variable substitution at this stage; it has to be done dynamically.\r", "-\t\tif (cell.hasEmbeddedTables(resolver))\r", "-\t\t\tmacroReplaceTables(cell.getEmbeddedTables(),key,value,resolver);\r", "-\t\tString text = cell.fullText();\r", "-\t\tif (value instanceof String) {\r", "-\t\t\tString update = StringUtility.replaceString(text, key, (String)value);\r", "-\t\t\tif (!update.equals(text))\r", "-\t\t\t\tcell.setText(update);\r", "-\t\t} else { // Embedded tables: Just replace once\r", "-\t\t\tTables valueTables = (Tables) value;\r", "-\t\t\tint at = text.indexOf(key);\r", "-\t\t\tif (at < 0)\r", "-\t\t\t\treturn;\r", "-\t\t\tcell.addTables(valueTables.deepCopy());\r", "-\t\t\tcell.setLeader(text.substring(0,at));\r", "-\t\t\tcell.last().setTrailer(text.substring(at+key.length()));\r", "+\tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables) {\r", "+\t\tif (callRow.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+callRow.size());\r", "+\t\tfor (int c = 0; c < callRow.size(); c++) {\r", "+\t\t\tString parameter = parameterRow.text(c, dynamicVariables);\r", "+\t\t\tif (callRow.at(c).hasEmbeddedTables(dynamicVariables))\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.at(c).getEmbeddedTables());\r", "+\t\t\telse\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.text(c, dynamicVariables));\r"], "commitAfterChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "signatureAfterChange": "\r \tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables)", "id": "c468efc7167d504f1bffc9a7a9ee8740", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "b8fdf6b73c072279edab8868fe4d92d5", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL"]}
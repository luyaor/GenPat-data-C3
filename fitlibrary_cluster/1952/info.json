{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 9, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findTheMethod(String name, List<String> methodArgs, String returnType, Evaluator evaluator) throws Exception", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 12, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic CalledMethodTarget findTheMethod(String name, List<String> methodArgs, String returnType, Evaluator evaluator) throws Exception {\r", "-\t\tTypedObject typedObject = asTypedObject(evaluator);\r", "-\t\treturn typedObject.findSpecificMethodOrPropertyGetter(name,methodArgs.size(),evaluator,signatures);\r", "+\t}\r", "+\tprivate CalledMethodTarget findMethodOnSut(String methodName, int argCount, Evaluator evaluator, String arg) {\r", "+\t\tTypedObject typedObject = evaluator.getTypedSystemUnderTest();\r", "+\t\twhile (true) {\r", "+\t\t\tif (typedObject.isNull())\r", "+\t\t\t\tthrow new NoSystemUnderTestException();\r", "+\t\t\tOption<CalledMethodTarget> targetOption = typedObject.new_findSpecificMethod(methodName,argCount,evaluator);\r", "+\t\t\tif (targetOption.isSome())\r", "+\t\t\t\treturn targetOption.get();\r", "+\t\t\tif (typedObject instanceof Evaluator) {\r", "+\t\t\t\ttypedObject = ((Evaluator)typedObject).getTypedSystemUnderTest();\r", "+\t\t\t}\r", "+\t\t\telse if (typedObject.getSubject() instanceof DomainAdapter) {\r", "+\t\t\t\ttypedObject = new GenericTypedObject(((DomainAdapter)typedObject.getSubject()).getSystemUnderTest());\r", "+\t\t\t}\r", "+\t\t\telse break;\r", "+\t\t}\r", "+\t\tthrow new MissingMethodException(signatures(\"public void \"+methodName+\"(\"+arg+\") { }\"),scopeOf(evaluator).possibleClasses());\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate CalledMethodTarget findMethodOnSut(String methodName, int argCount, Evaluator evaluator, String arg)", "id": "15c3f0df3b7771d1c046c460cd82972f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r \tprivate static boolean equalTags(Parse p1, Parse p2)", "fileName": "src/fitlibrary/spec/SpecifyFixture.java", "methodNumberAfterChange": 4, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["+\r", "+\tprivate boolean equals(String actual, String expected) {\r", "+\t\tString canonicalActual = canonical(actual);\r", "+\t\tString canonicalExpected = canonical(expected);\r", "+\t\t\r", "+\t\tif (\"IGNORE\".equals(canonicalExpected))\r", "+\t\tint start = canonicalExpected.indexOf(stackTrace);\r", "+\t\tif (start >= 0)\r", "+\t\t\treturn canonicalActual.startsWith(canonicalExpected.substring(0,start+stackTrace.length()));\r", "+\t\tString fitLabel = \"<span class=\\\"fit_label\\\">\";\r", "+\t\tstart = canonicalExpected.indexOf(fitLabel);\r", "+\t\tif (start >= 0)\r", "+\t\t\treturn canonicalActual.startsWith(canonicalExpected.substring(0,start+fitLabel.length()));\r", "+\t\treturn canonicalActual.equals(canonicalExpected);\r", "+\t}\r", "-\t}\r", "-\tprivate static boolean equalTags(Parse p1, Parse p2) {\r", "-\t\treturn p1.tag.equals(p2.tag);\r", "-\t}\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \r \tprivate boolean equals(String actual, String expected)", "id": "5412cd02872bd60e83b1ccea1c1ac78c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "5bd5b4db35ad5993e6ee6951335843d6", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
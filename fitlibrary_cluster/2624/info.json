{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tprivate void runTable(Table table, TestResults testResults)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 5, "commitBeforeChange": "a6c1e5e7a0e2d59a2e0ed7586d0e7ddd7317f579", "diff": ["-\t\t\tif (row.at(0).hadError()) {\r", "-\t\t\t\t// Already failed due to plain text problems\r", "-\t\t\t} else if (runtime.isAbandoned(testResults)) {\r", "+\t\t\tif (runtime.isAbandoned(testResults)) {\r", "-\t\t\t    \t\t} else {\r", "-\t\t\t\t\t\t\tif (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "-\t\t\t\t\t\t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t\t\t\t\t\treturn;// have finished table\r", "-\t\t\t\t\t\t\t} else if (subject instanceof DoEvaluator) {\r", "-\t\t\t\t\t\t\t\tpushOnScope(typedResult,row,testResults);\r", "-\t\t\t\t\t\t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "-\t\t\t\t\t\t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t\t\t\t\t\treturn; // have finished table\r", "-\t\t\t\t\t\t\t} else if (subject instanceof Fixture) {\r", "-\t\t\t\t\t\t\t\tTable remainingTable = tableFromHere(table, rowNo).asTableOnParse();\r", "-\t\t\t\t\t\t\t\tflowEvaluator.fitHandler().doTable((Fixture) subject,remainingTable,testResults,flowEvaluator);\r", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r", "-\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, remainingTable.at(i));\r", "-\t\t\t\t\t\t\t\treturn; // have finished table\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "+\t\t\t    \t\t} else if (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "+\t\t\t    \t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "+\t\t\t    \t\t\treturn;// have finished table\r", "+\t\t\t    \t\t} else if (subject instanceof DoEvaluator) {\r", "+\t\t\t    \t\t\tpushOnScope(typedResult,row,testResults);\r", "+\t\t\t    \t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "+\t\t\t    \t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "+\t\t\t    \t\t\treturn; // have finished table\r", "+\t\t\t    \t\t} else if (subject instanceof Fixture) {\r", "+\t\t\t    \t\t\tTable remainingTable = tableFromHere(table, rowNo).asTableOnParse();\r", "+\t\t\t    \t\t\tflowEvaluator.fitHandler().doTable((Fixture) subject,remainingTable,testResults,flowEvaluator);\r", "+\t\t\t    \t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r", "+\t\t\t    \t\t\t\ttable.replaceAt(rowNo+i, remainingTable.at(i));\r", "+\t\t\t    \t\t\treturn; // have finished table\r", "+\t\t\t    \t\t}\r"], "commitAfterChange": "3dcd3b89a93a94255040ce519f06a01a05e62807", "signatureAfterChange": "\r \tprivate void runTable(Table table, TestResults testResults)", "id": "98198078ecfa5f1dfaeb76cd0d1121bc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r     public Object interpretRow(Row row, TestResults testResults, Fixture fixtureByName)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 11, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["-    \t\tsetExpectedResult(null);\r", "-    \t\tmethodsAreMissing(actions,row.text(0, this),possibleSeq(row));\r", "+    \t\tmethodsAreMissing(actions,possibleSeq(row));\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r     public Object interpretRow(Row row, TestResults testResults, Fixture fixtureByName)", "id": "c8c4004a73064ea1af93725e07ab8304", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "a44eb8f0e096c0d797297a41e0eaeaea", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
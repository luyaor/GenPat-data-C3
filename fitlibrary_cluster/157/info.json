{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tprivate void processMultiDefinedAction(Table headerTable, Tables bodyCopy)", "fileName": "src/fitlibrary/DefineAction.java", "methodNumberAfterChange": 7, "commitBeforeChange": "b30e56d0effcc85cd5ffa49ca148e7059d6f5934", "diff": ["+\t}\r", "+    private void processMultiDefinedAction(Table headerTable, Tables bodyCopy) {\r", "+\t\tif (headerTable.size() > 2)\r", "+\t\t\terror(\"Unexpected rows in first table of defined action\",headerTable.at(0));\r", "+\t\tString definedActionName = headerTable.at(0).at(0).text();\r", "+\t\tList<String> formalParameters = getFormalParameters(headerTable.at(1),0,1);\r", "+\t\tMultiParameterBinder binder = new MultiParameterBinder(formalParameters,bodyCopy,pageName);\r", "+\t\trepository().defineMultiDefinedAction(definedActionName, binder);\r", "+\t}\r", "-\t}\r", "-\tprivate void processMultiDefinedAction(Table headerTable, Tables bodyCopy) {\r", "-\t\tString definedActionName = headerTable.at(0).at(0).text();\r", "-\t\tArrayList<String> formalParameters = new ArrayList<String>();\r", "-\t\tRow parametersRow = headerTable.at(1);\r", "-\t\tfor (int c = 0; c < parametersRow.size(); c++) {\r", "-\t\t\tString parameter = parametersRow.at(c).text();\r", "-\t\t\tif (\"\".equals(parameter))\r", "-\t\t\t\terror(\"Parameter name is blank\",parametersRow);\r", "-\t\t\tif (formalParameters.contains(parameter))\r", "-\t\t\t\terror(\"Parameter name '<b>\"+parameter+\"</b>' is duplicated\",parametersRow);\r", "-\t\t\tformalParameters.add(parameter);\r", "-\t\t}\r", "-\t\tTemporaryPlugBoardForRuntime.definedActionsRepository().defineMultiDefinedAction(definedActionName, formalParameters, bodyCopy, \"\");\r", "-\t}\r"], "commitAfterChange": "cd20838066679088607bacd4884b58979b698e68", "signatureAfterChange": "\r     private void processMultiDefinedAction(Table headerTable, Tables bodyCopy)", "id": "0dde53d5db52199bd4bc5c142f693e13", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 40, "signatureBeforeChange": "\r \tpublic boolean harvestUsingPatternFrom(String[] vars, String pattern, String text)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 35, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["+\t}\r", "+\tprotected boolean harvestUsingPatternFrom(String[] vars, String pattern, String text) {\r", "+\t\treturn global().harvestUsingPatternFrom(vars, pattern, text);\r", "+\t}\r", "-\t}\r", "-\tpublic boolean harvestUsingPatternFrom(String[] vars, String pattern, String text) {\r", "-\t\tMatcher matcher = Pattern.compile(pattern).matcher(text);\r", "-\t    if (!matcher.find())\r", "-\t    \tthrow new FitLibraryException(\"Pattern doesn't match\");\r", "-\t    int groups = matcher.groupCount();\r", "-\t\tif (vars.length > groups)\r", "-\t\t\tthrow new FitLibraryException(\"Expected \" + expectedGroups(vars) + \", but there \" + actualGroups(groups));\r", "-\t\tfor (int v = 0; v < vars.length && v < groups; v++)\r", "-\t\t\tsetDynamicVariable(vars[v], matcher.group(v+1));\r", "-\t\treturn true;\r", "-\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprotected boolean harvestUsingPatternFrom(String[] vars, String pattern, String text)", "id": "a3efde4766af441ba3ffaed418e9fbfc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "f7707f4d3f4d9ca1c6d4c4d354945967", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
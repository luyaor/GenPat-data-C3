{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tpublic void runStorytest(Tables tables, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 1, "commitBeforeChange": "fa4a5893982c4c7ff77fba66e14647e6fb29f452", "diff": ["-\t\t\tboolean plainTextFailed = false;\r", "-\t\t\tif (current == this && table.isPlainTextTable()) {\r", "-\t\t\t\tPlainTextAnalyser plainTextAnalyser = new PlainTextAnalyser(runtime,TemporaryPlugBoardForRuntime.definedActionsRepository());\r", "-\t\t\t\tTestResults testResults2 = TestResultsFactory.testResults();\r", "-\t\t\t\tplainTextAnalyser.analyseAndReplaceRowsIn(table, testResults2);\r", "-\t\t\t\tplainTextFailed = testResults2.problems();\r", "-\t\t\t\ttestResults.add(testResults2);\r", "-\t\t\t}\r", "-\t\t\tif (domainCheck != null)\r", "-\t\t\t\thandleDomainPhases(table);\r", "-\t\t\tif (!plainTextFailed)\r", "-\t\t\t\tcurrent.runTable(table,testResults);\r", "-\t\t\tif (t < tables.size() - 1) {\r", "-\t\t\t\ttearDown(scopeStack.poppedAtEndOfTable(), table.at(0), testResults);\r", "-\t\t\t\tlogger.trace(\"Finished table\");\r", "-\t\t\t} else {\r", "-\t\t\t\ttearDown(scopeStack.poppedAtEndOfStorytest(), table.at(0), testResults);\r", "-\t\t\t\tlogger.trace(\"Finished table and storytest\");\r", "-\t\t\t}\r", "-\t\t\truntime.addAccumulatedFoldingText(table);\r", "+\t\t\trunSingleTable(testResults, table);\r", "+\t\t\tif (t < tables.size() - 1)\r", "+\t\t\t\tfinishTable(table, testResults);\r", "+\t\t\telse\r", "+\t\t\t\tfinishLastTable(table, testResults);\r", "+\t\t\taddAccumulatedFoldingText(table);\r", "+\t\tlogger.trace(\"Finished storytest\");\r", "+\t}\r"], "commitAfterChange": "5024b668ff9944890338ffa045341039c3567f63", "signatureAfterChange": "\r \tpublic void runStorytest(Tables tables, ITableListener tableListener)", "id": "dbbd2f3e6e47d83eddd29fac06fe9b4a", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/caller/MultiDefinedActionTraverse.java", "methodNumberAfterChange": 1, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\t\tgetRuntimeContext().pushLocal();\r", "+\t\t\tgetRuntimeContext().pushLocalDynamicVariables();\r", "-\t\t\t\tif (testResults.isAbandoned())\r", "+\t\t\t\tif (runtime.isAbandoned(testResults))\r", "-\t\t\t\t\t\tTables body = multiParameterSubstitution.getCopyOfBody();\r", "-\t\t\t\t\t\tTestResults subTestResults = new TestResults(testResults);\r", "-\t\t\t\t\t\ttry {\r", "-\t\t\t\t\t\t\tCallManager.startCall(multiParameterSubstitution);\r", "-\t\t\t\t\t\t\tmultiParameterSubstitution.bind(parameterRow,row,getDynamicVariables(),this);\r", "-\t\t\t\t\t\t\trunBody(body,testResults,subTestResults);\r", "-\t\t\t\t\t\t\tcolourReport(row, testResults, subTestResults);\r", "-\t\t\t\t\t\t} finally {\r", "-\t\t\t\t\t\t\tCallManager.endCall(multiParameterSubstitution);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (runtime.toExpandDefinedActions() || subTestResults.problems() || testResults.isAbandoned())\r", "-\t\t\t\t\t\t\trow.addCell(new Cell(\"Defined action call:\",body));\r", "-\t\t\t\t\t\telse if (CallManager.readyToShow())\r", "-\t\t\t\t\t\t\trow.addCell(new Cell(new Tables(CallManager.getShowsTable())));\r", "+\t\t\t\t\t\trunRow(row, parameterRow, testResults);\r", "-\t\t\tgetRuntimeContext().popLocal();\r", "+\t\t\tgetRuntimeContext().popLocalDynamicVariables();\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "fe4e784487d2d56cb93e95787ad7ad10", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "3094b7841ce53fca57d5be8cae4571d8", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tpublic void bindUni(List<Object> actualArgs, DynamicVariables dynamicVariables)", "fileName": "src/fitlibrary/definedAction/ParameterBinder.java", "methodNumberAfterChange": 5, "commitBeforeChange": "25d69c2691bfddbe4008da3e99ff3ccad63e476d", "diff": ["-\t\tif (actualArgs.size() != formalParameters.size())\r", "-\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+actualArgs.size());\r", "-\t\tfor (int c = 0; c < formalParameters.size(); c++) {\r", "-\t\t\tObject object = actualArgs.get(c);\r", "-\t\t\tif (object instanceof String)\r", "-\t\t\t\tobject = Fixture.escape(Parse.unescape(object.toString()));\r", "-\t\t\tdynamicVariables.putParameter(formalParameters.get(c),object);\r", "-\t\t}\r", "-\t}\r", "+        if (actualArgs.size() != formalParameters.size())\r", "+              throw new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+actualArgs.size());\r", "+        for (int c = 0; c < formalParameters.size(); c++) \r", "+              dynamicVariables.putParameter(formalParameters.get(c),actualArgs.get(c));\r", "+  }\r"], "commitAfterChange": "7bc373fdff836c5fe5554dd7cca83ec4c7ddbc73", "signatureAfterChange": "\r \tpublic void bindUni(List<Object> actualArgs, DynamicVariables dynamicVariables)", "id": "417b511140fe47bad66a2427c0f670a9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 40, "signatureBeforeChange": "\r \tpublic boolean harvestUsingPatternFrom(String[] vars, String pattern, String text)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 35, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["+\t}\r", "+\tprotected boolean harvestUsingPatternFrom(String[] vars, String pattern, String text) {\r", "+\t\treturn global().harvestUsingPatternFrom(vars, pattern, text);\r", "+\t}\r", "-\t}\r", "-\tpublic boolean harvestUsingPatternFrom(String[] vars, String pattern, String text) {\r", "-\t\tMatcher matcher = Pattern.compile(pattern).matcher(text);\r", "-\t    if (!matcher.find())\r", "-\t    \tthrow new FitLibraryException(\"Pattern doesn't match\");\r", "-\t    int groups = matcher.groupCount();\r", "-\t\tif (vars.length > groups)\r", "-\t\t\tthrow new FitLibraryException(\"Expected \" + expectedGroups(vars) + \", but there \" + actualGroups(groups));\r", "-\t\tfor (int v = 0; v < vars.length && v < groups; v++)\r", "-\t\t\tsetDynamicVariable(vars[v], matcher.group(v+1));\r", "-\t\treturn true;\r", "-\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprotected boolean harvestUsingPatternFrom(String[] vars, String pattern, String text)", "id": "a3efde4766af441ba3ffaed418e9fbfc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "b514e22da80712605e7cac76271804d5", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
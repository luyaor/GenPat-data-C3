{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tpublic boolean equals(String actualString, String expectedString)", "fileName": "src/fitlibrary/spec/TablesCompare.java", "methodNumberAfterChange": 2, "commitBeforeChange": "ffb3a105f2dd1aba96f84ebd4186987eb580fd1c", "diff": ["-\t\t\r", "-\t\tif (actual.isEmpty() && expected.equals(\"&nbsp;\") ||\r", "-\t\t\t\texpected.isEmpty() && actual.equals(\"&nbsp;\"))\r", "-\t\t\treturn true;\r", "-\t\tString stackTrace = \"class=\\\"fit_stacktrace\\\">\";\r", "-\t\tint startExpected = expected.indexOf(stackTrace);\r", "-\t\tint startActual = actual.indexOf(stackTrace);\r", "-\t\tif (startExpected != startActual)\r", "-\t\t\treturn false;\r", "-\t\tif (startExpected >= 0)\r", "-\t\t\treturn actual.startsWith(expected.substring(0,startExpected));\r", "-\t\tString fitLabel = \"<span class=\\\"fit_label\\\">\";\r", "-\t\tString endFitLabel = \"</span>\";\r", "-\t\twhile (true) {\r", "-\t\t\tstartExpected = expected.indexOf(fitLabel);\r", "-\t\t\tstartActual = actual.indexOf(fitLabel);\r", "-\t\t\tif (startExpected != startActual)\r", "-\t\t\t\treturn false;\r", "-\t\t\tif (startExpected < 0)\r", "-\t\t\t\treturn actual.equals(expected);\r", "-\t\t\t\r", "-\t\t\tString expectedPrefix = expected.substring(0,startExpected);\r", "-\t\t\tif (!actual.substring(0,startActual).equals(expectedPrefix))\r", "-\t\t\t\treturn false;\r", "-\t\t\tint endExpected = expected.indexOf(endFitLabel,startExpected);\r", "-\t\t\tint endActual = actual.indexOf(endFitLabel,startActual);\r", "-\t\t\tif (endExpected < 0 || endActual < 0)\r", "-\t\t\t\treturn false;\r", "-\t\t\tString actualLabel = actual.substring(startActual+fitLabel.length(),endActual);\r", "-\t\t\tString expectedLabel = expected.substring(startExpected+fitLabel.length(),endExpected);\r", "-\t\t\tif (!actualLabel.startsWith(expectedLabel))\r", "-\t\t\t\treturn false;\r", "-\t\t\tactual = actual.substring(endActual+endFitLabel.length());\r", "-\t\t\texpected = expected.substring(endExpected+endFitLabel.length());\r", "-\t\t}\r", "+\t\treturn matcherPipeline.match(actual, expected);\r"], "commitAfterChange": "217037b82c662a130b6f1897ec27b10c0077de31", "signatureAfterChange": "\r \tpublic boolean equals(String actualString, String expectedString)", "id": "3ae65b1cad65900535f43de960f07baf", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \t@Override\r \tpublic void doTable(Parse table)", "fileName": "src/fitlibrary/spec/SpecifyFixture.java", "methodNumberAfterChange": 2, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-public class SpecifyFixture extends Fixture {\r", "+\t}\r", "-\tpublic void doTable(Parse table) {\r", "-\t\tfinal Parse firstRow = table.parts.more;\r", "-\t\tfinal Parse actual = firstRow.parts.parts;\r", "-\t\tfinal Parse secondRow = firstRow.more;\r", "-\t\tParse expectedCell;\r", "-\t\tif (secondRow != null)\r", "-\t\t\texpectedCell = secondRow.parts;\r", "-\t\telse\r", "-\t\t\texpectedCell = firstRow.parts.more;\r", "-\t\tParse expected = expectedCell.parts;\r", "+\tpublic Object interpretAfterFirstRow(Table table, TestResults testResults) {\r", "+\t\ttry {\r", "+\t\t\tCell actualCell = table.at(1).at(0);\r", "+\t\t\tif (actualCell.isEmpty())\r", "+\t\t\t\tthrow new FitLibraryException(\"Missing nested tables to be run\");\r", "+\t\t\tCell expectedCell = expectedOf(table);\r", "+\t\t\tTables expectedTables = expectedCell.getEmbeddedTables();\r", "+\t\t\tTables actualTables = actualCell.getEmbeddedTables();\r", "+\t\t\trunner.doStorytest(actualTables);\r", "+\t\t\tif (tablesEqual(\"\",actualTables,expectedTables)) {\r", "+\t\t\t\texpectedCell.pass(testResults);\r", "+\t\t\t\ttestResults.addRights(cellCount(actualTables) - 1);\r", "+\t\t\t} else {\r", "+\t\t\t\texpectedCell.fail(testResults);\r", "+\t\t\t\terrorReport.actualResult(actualTables);\r", "+\t\t\t}\r", "+\t\t} catch (Exception e) {\r", "+\t\t\ttable.error(testResults, e);\r", "+\t\t}\r", "+\t\treturn null;\r", "+\t}\r", "-\t\tnew BatchFitLibrary().doStorytest(TableFactory.tables(actual));\r", "-\t\tif (reportsEqual(actual,expected)) {\r", "-\t\t\tright(expectedCell);\r", "-\t\t\tcounts.right += cellCount(actual) - 1;\r", "-\t\t} else {\r", "-\t\t\twrong(expectedCell);\r", "-\t\t\tParseUtility.printParse(actual,\"actual\");\r", "-\t\t\taddTableToBetterShowDifferences(table,actual,expected);\r", "-\t}\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "52bfb8307ba15cc7811d4923dcfe4e41", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "750455a83468a326f0781b88fa8ef8cb", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
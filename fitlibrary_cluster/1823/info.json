{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tprivate IScope scopeOf(Evaluator evaluator)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 20, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\tprivate IScope scopeOf(Evaluator evaluator) {\r", "-\t\tif (evaluator.getRuntimeContext().hasScope())\r", "-\t\t\treturn evaluator.getRuntimeContext().getScope();\r", "-\t\tthrow new RuntimeException(\"No scope in runtime\");\r", "-\t}\r", "+\t@Override\r", "+\tpublic PositionedTarget findActionSpecialMethod(final Evaluator evaluator, final String[] cells, final boolean sequencing) {\r", "+\t\tfor (final TypedObject typedObject : evaluator.getScope().objectsForLookup()) {\r", "+\t\t\tPositionedTarget positioned = typedObject.findActionSpecialMethod(cells,new PositionedTargetFactory(){\r", "+\t\t\t\t@Override\r", "+\t\t\t\tpublic PositionedTarget create(Method method, int from, int upTo) {\r", "+\t\t\t\t\treturn new PositionedTargetWasFound(evaluator,cells,typedObject,method,from,upTo,sequencing,PlugBoard.lookupTarget);\r", "+\t\t\t\t}\r", "+\t\t\t});\r", "+\t\t\tif (positioned.partiallyValid())\r", "+\t\t\t\treturn positioned;\r", "+\t\t}\r", "+\t\treturn new UnfoundPositionedTarget();\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Override\r \tpublic PositionedTarget findActionSpecialMethod(final Evaluator evaluator, final String[] cells, final boolean sequencing)", "id": "428583dc84b28a9b087d6849b494ef54", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 20, "signatureBeforeChange": "\r \t@Override\r \tpublic PositionedTarget findActionSpecialMethod(final Evaluator evaluator, final String[] cells, final boolean sequencing)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 20, "commitBeforeChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "diff": ["-\tpublic PositionedTarget findActionSpecialMethod(final Evaluator evaluator, final String[] cells, final boolean sequencing) {\r", "+\tpublic List<PositionedTarget> findActionSpecialMethod(final Evaluator evaluator, final String[] cells, final boolean sequencing) {\r", "-\t\t\tPositionedTarget positioned = typedObject.findActionSpecialMethod(cells,new PositionedTargetFactory(){\r", "+\t\t\tList<PositionedTarget> positioned = typedObject.findActionSpecialMethods(cells,new PositionedTargetFactory(){\r", "-\t\t\tif (positioned.partiallyValid())\r", "+\t\t\tif (!positioned.isEmpty())\r", "-\t\treturn new UnfoundPositionedTarget();\r", "+\t\treturn new ArrayList<PositionedTarget>();\r"], "commitAfterChange": "6e2fd68caab2f02de2d8c7d77899562c496a4b1d", "signatureAfterChange": "\r \t@Override\r \tpublic List<PositionedTarget> findActionSpecialMethod(final Evaluator evaluator, final String[] cells, final boolean sequencing)", "id": "6aefd0ff1462d1732ff10ea07fad0c44", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "0632896541a9176658b4176e91f0886f", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
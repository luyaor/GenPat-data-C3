{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 17, "signatureBeforeChange": "\r \tpublic void insertTable(int offset, Table table)", "fileName": "src/fitlibrary/table/TableOnParse.java", "methodNumberAfterChange": 26, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t}\r", "-\tpublic void insertTable(int offset, Table table) {\r", "-\t\ttable.evenUpRows();\r", "-\t\tParse insertPoint = parse.at(offset);\r", "-\t\ttable.parse().more = insertPoint.more;\r", "-\t\tinsertPoint.more = table.parse();\r", "+\t@Override\r", "+\tpublic boolean hasRowsAfter(Row currentRow) {\r", "+\t\tfor (int i = 0; i < size()-1; i++)\r", "+\t\t\tif (at(i).parse() == currentRow.parse())\r", "+\t\t\t\treturn true;\r", "+\t\treturn false;\r", "+\t}\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Override\r \tpublic boolean hasRowsAfter(Row currentRow)", "id": "2f2dc29a587288a2bcc04b27cc225fd6", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic GenericFinder(GenericTyped typed, Evaluator evaluator)", "fileName": "src/fitlibraryGeneric/object/GenericFinder.java", "methodNumberAfterChange": 0, "commitBeforeChange": "5327f82710d64a8962e506a103d189fd75c5dbba", "diff": ["-\t\tfinal String findName = ExtendedCamelCase.camel(FIND+\" \"+shortClassName);\r", "+\t\tfinal String findName = evaluator.getRuntimeContext().extendedCamel(FIND+\" \"+shortClassName);\r", "-\t\tfinal String showMethodName = ExtendedCamelCase.camel(SHOW+\" \"+shortClassName);\r", "-\t\tList<Class<?>> potentialClasses = PlugBoard.lookupTarget.possibleClasses(evaluator.getScope());\r", "+\t\tfinal String showMethodName = evaluator.getRuntimeContext().extendedCamel(SHOW+\" \"+shortClassName);\r", "+\t\tLookupMethodTarget lookupTarget = PlugBoard.lookupTarget;\r", "+\t\tList<Class<?>> potentialClasses = lookupTarget.possibleClasses(evaluator.getScope());\r", "-\t\tfindIntMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, findName, intArg);\r", "-\t\tfindStringMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, findName, stringArg);\r", "-\t\tshowMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, showMethodName, showArg);\r", "+\t\tfindIntMethod = lookupTarget.findFixturingMethod(evaluator, findName, intArg);\r", "+\t\tfindStringMethod = lookupTarget.findFixturingMethod(evaluator, findName, stringArg);\r", "+\t\tshowMethod = lookupTarget.findFixturingMethod(evaluator, showMethodName, showArg);\r", "-\t\t\tgenericFindStringMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, findName, genericStringArg);\r", "-\t\t\tgenericShowMethod = PlugBoard.lookupTarget.findFixturingMethod(evaluator, showMethodName, genericShowArg);\r", "+\t\t\tgenericFindStringMethod = lookupTarget.findFixturingMethod(evaluator, findName, genericStringArg);\r", "+\t\t\tgenericShowMethod = lookupTarget.findFixturingMethod(evaluator, showMethodName, genericShowArg);\r"], "commitAfterChange": "fc04ff1c33cda53766142c18fa0ccb6a92e65b68", "signatureAfterChange": "\r \r \tpublic GenericFinder(GenericTyped typed, Evaluator evaluator)", "id": "f261c573072cff450e7a2d22f256106c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "2878ec8de5c7ad7a4952705c9afdaed0", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
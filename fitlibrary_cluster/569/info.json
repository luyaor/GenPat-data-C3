{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "    public static TypeAdapter adapterFor(Class<?> type) throws UnsupportedOperationException", "fileName": "src/fit/TypeAdapter.java", "methodNumberAfterChange": 4, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public static TypeAdapter adapterFor(Class<?> type) throws UnsupportedOperationException {", "-    if (type.isPrimitive()) {", "-      if (type.equals(byte.class)) return new ByteAdapter();", "-      if (type.equals(short.class)) return new ShortAdapter();", "-      if (type.equals(int.class)) return new IntAdapter();", "-      if (type.equals(long.class)) return new LongAdapter();", "-      if (type.equals(float.class)) return new FloatAdapter();", "-      if (type.equals(double.class)) return new DoubleAdapter();", "-      if (type.equals(char.class)) return new CharAdapter();", "-      if (type.equals(boolean.class)) return new BooleanAdapter();", "-      throw new UnsupportedOperationException(\"can't yet adapt \" + type);", "-    } else {", "-      Object delegate = PARSE_DELEGATES.get(type);", "-      if (delegate instanceof DelegateClassAdapter)", "-        return (TypeAdapter) ((DelegateClassAdapter) delegate).clone();", "-      if (delegate instanceof DelegateObjectAdapter)", "-        return (TypeAdapter) ((DelegateObjectAdapter) delegate).clone();", "-      if (type.equals(Byte.class)) return new ClassByteAdapter();", "-      if (type.equals(Short.class)) return new ClassShortAdapter();", "-      if (type.equals(Integer.class)) return new ClassIntegerAdapter();", "-      if (type.equals(Long.class)) return new ClassLongAdapter();", "-      if (type.equals(Float.class)) return new ClassFloatAdapter();", "-      if (type.equals(Double.class)) return new ClassDoubleAdapter();", "-      if (type.equals(Character.class)) return new ClassCharacterAdapter();", "-      if (type.equals(Boolean.class)) return new ClassBooleanAdapter();", "-      if (type.isArray()) return new ArrayAdapter();", "-      return new TypeAdapter();", "-    }", "-  }", "+\tpublic static TypeAdapter adapterFor(Class<?> type)", "+\t\t\tthrows UnsupportedOperationException {", "+\t\tif (type.isPrimitive()) {", "+\t\t\tif (type.equals(byte.class))", "+\t\t\t\treturn new ByteAdapter();", "+\t\t\tif (type.equals(short.class))", "+\t\t\t\treturn new ShortAdapter();", "+\t\t\tif (type.equals(int.class))", "+\t\t\t\treturn new IntAdapter();", "+\t\t\tif (type.equals(long.class))", "+\t\t\t\treturn new LongAdapter();", "+\t\t\tif (type.equals(float.class))", "+\t\t\t\treturn new FloatAdapter();", "+\t\t\tif (type.equals(double.class))", "+\t\t\t\treturn new DoubleAdapter();", "+\t\t\tif (type.equals(char.class))", "+\t\t\t\treturn new CharAdapter();", "+\t\t\tif (type.equals(boolean.class))", "+\t\t\t\treturn new BooleanAdapter();", "+\t\t\tthrow new UnsupportedOperationException(\"can't yet adapt \" + type);", "+\t\t}", "+\t\tObject delegate = PARSE_DELEGATES.get(type);", "+\t\tif (delegate instanceof DelegateClassAdapter)", "+\t\t\treturn (TypeAdapter) ((DelegateClassAdapter) delegate).clone();", "+\t\tif (delegate instanceof DelegateObjectAdapter)", "+\t\t\treturn (TypeAdapter) ((DelegateObjectAdapter) delegate).clone();", "+\t\tif (type.equals(Byte.class))", "+\t\t\treturn new ClassByteAdapter();", "+\t\tif (type.equals(Short.class))", "+\t\t\treturn new ClassShortAdapter();", "+\t\tif (type.equals(Integer.class))", "+\t\t\treturn new ClassIntegerAdapter();", "+\t\tif (type.equals(Long.class))", "+\t\t\treturn new ClassLongAdapter();", "+\t\tif (type.equals(Float.class))", "+\t\t\treturn new ClassFloatAdapter();", "+\t\tif (type.equals(Double.class))", "+\t\t\treturn new ClassDoubleAdapter();", "+\t\tif (type.equals(Character.class))", "+\t\t\treturn new ClassCharacterAdapter();", "+\t\tif (type.equals(Boolean.class))", "+\t\t\treturn new ClassBooleanAdapter();", "+\t\tif (type.isArray())", "+\t\t\treturn new ArrayAdapter();", "+\t\treturn new TypeAdapter();", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic static TypeAdapter adapterFor(Class<?> type) \t\t\tthrows UnsupportedOperationException", "id": "4f879cb302f5f371d69d88484b89f3f3", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "    private static TypeAdapter makeAdapter(Fixture fixture, String name) throws Throwable", "fileName": "src/fit/Binding.java", "methodNumberAfterChange": 1, "commitBeforeChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "diff": ["-    Matcher regexMatcher = regexMethodPattern.matcher(name);", "-    if (regexMatcher.find())", "-      return makeAdapterForRegexMethod(name, fixture, regexMatcher);", "-    else {", "-      Matcher methodMatcher = methodPattern.matcher(name);", "-      if (methodMatcher.find())", "-        return makeAdapterForMethod(name, fixture, methodMatcher);", "-      else", "-        return makeAdapterForField(name, fixture);", "-    }", "+\t  Matcher regexMatcher = regexMethodPattern.matcher(name);", "+\t  if (regexMatcher.find())", "+\t\t  return makeAdapterForRegexMethod(name, fixture, regexMatcher);", "+\t  Matcher methodMatcher = methodPattern.matcher(name);", "+\t  if (methodMatcher.find())", "+\t\t  return makeAdapterForMethod(name, fixture, methodMatcher);", "+\t  return makeAdapterForField(name, fixture);"], "commitAfterChange": "12148fc44971a9675907d16fb4f5c02ec935596d", "signatureAfterChange": "    private static TypeAdapter makeAdapter(Fixture fixture, String name) throws Throwable", "id": "ffac057f30bca4f75dc2bad3cae2521b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "4e29a2fba2623032bf5c0a0b022c78de", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
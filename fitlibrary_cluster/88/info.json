{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r     private void doTable(Table theTable)", "fileName": "src/fitlibrary/spec/SpecifySuiteFixture.java", "methodNumberAfterChange": 0, "commitBeforeChange": "1f73cbb5de4c1093ac1830526b85ef0e41bcdeb6", "diff": ["+public class SpecifySuiteFixture extends SpecifyFixture {\r", "-\t}\r", "-    private void doTable(Table theTable) {\r", "-        TestResults testResults = TestResultsFactory.testResults(counts);\r", "-        BatchFitLibrary batch = new BatchFitLibrary();\r", "-    \tfor (int rowNo = 1; rowNo < theTable.size(); rowNo++) {\r", "-            Row row = theTable.at(rowNo);\r", "+\tpublic Object interpretAfterFirstRow(Table table, TestResults testResults) {\r", "+    \tfor (int rowNo = 1; rowNo < table.size(); rowNo++) {\r", "+            Row row = table.at(rowNo);\r", "-            Cell test = row.at(0);\r", "-            Cell report = row.at(1);\r", "-            if (!test.hasEmbeddedTables()) {\r", "+            Cell testCell = row.at(0);\r", "+            Cell reportCell = row.at(1);\r", "+            if (!testCell.hasEmbeddedTables()) {\r", "-                return;\r", "+                return null;\r", "-            Parse actual = test.getEmbeddedTables().parse();\r", "-            Parse expected = report.getEmbeddedTables().parse();\r", "+            Tables actualTables = testCell.getEmbeddedTables();\r", "+            Tables expectedTables = reportCell.getEmbeddedTables();\r", "-            batch.doStorytest(TableFactory.tables(actual));\r", "-\t\t\tif (reportsEqual(actual, expected))\r", "-                report.pass(testResults);\r", "-            else {\r", "-                report.fail(testResults);\r", "-                ParseUtility.printParse(actual,\"actual\");\r", "-                addTableToBetterShowDifferences(theTable.parse(),\r", "-                        actual,expected);\r", "+            runner.doStorytest(actualTables);\r", "+\t\t\tif (tablesCompare.tablesEqual(\"\",actualTables, expectedTables)) {\r", "+                reportCell.pass(testResults);\r", "+\t\t\t\ttestResults.addRights(cellCount(actualTables) - 1);\r", "+\t\t\t} else {\r", "+                reportCell.fail(testResults);\r", "+                errorReport.actualResult(actualTables);\r", "-    \tbatch.exit();\r", "+    \treturn null;\r"], "commitAfterChange": "8655c08986fab4cb3523c8934e8765739689b282", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "7891023ce7bbec12b8f3e62fa7446850", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "   protected static int findMatchingEndTag(String lc, int matchFromHere, String tag, int offset) throws FitParseException", "fileName": "src/fit/Parse.java", "methodNumberAfterChange": 4, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  /* Added by Rick Mugridge, Feb 2005 */", "-  protected static int findMatchingEndTag(String lc, int matchFromHere, String tag, int offset) throws FitParseException {", "-    int fromHere = matchFromHere;", "-    int count = 1;", "-    int startEnd = 0;", "-    while (count > 0) {", "-      int embeddedTag = lc.indexOf(\"<\" + tag, fromHere);", "-      int embeddedTagEnd = lc.indexOf(\"</\" + tag, fromHere);", "-      // Which one is closer?", "-      if (embeddedTag < 0 && embeddedTagEnd < 0)", "-        throw new FitParseException(\"Can't find end tag '\"+tag+\"' for embedded table\", fromHere);", "-      if (embeddedTag < 0)", "-        embeddedTag = Integer.MAX_VALUE;", "-      if (embeddedTagEnd < 0)", "-        embeddedTagEnd = Integer.MAX_VALUE;", "-      if (embeddedTag < embeddedTagEnd) {", "-        count++;", "-        startEnd = embeddedTag;", "-        fromHere = lc.indexOf(\">\", embeddedTag) + 1;", "-      } else if (embeddedTagEnd < embeddedTag) {", "-        count--;", "-        startEnd = embeddedTagEnd;", "-        fromHere = lc.indexOf(\">\", embeddedTagEnd) + 1;", "-      }", "-    }", "-    return startEnd;", "-  }", "+\t/* Added by Rick Mugridge, Feb 2005 */", "+\t@SuppressWarnings(\"unused\")", "+\tprotected static int findMatchingEndTag(String lc, int matchFromHere,", "+\t\t\tString tag, int offset) throws FitParseException {", "+\t\tint fromHere = matchFromHere;", "+\t\tint count = 1;", "+\t\tint startEnd = 0;", "+\t\twhile (count > 0) {", "+\t\t\tint embeddedTag = lc.indexOf(\"<\" + tag, fromHere);", "+\t\t\tint embeddedTagEnd = lc.indexOf(\"</\" + tag, fromHere);", "+\t\t\t// Which one is closer?", "+\t\t\tif (embeddedTag < 0 && embeddedTagEnd < 0)", "+\t\t\t\tthrow new FitParseException(\"Can't find end tag '\" + tag", "+\t\t\t\t\t\t+ \"' for embedded table\", fromHere);", "+\t\t\tif (embeddedTag < 0)", "+\t\t\t\tembeddedTag = Integer.MAX_VALUE;", "+\t\t\tif (embeddedTagEnd < 0)", "+\t\t\t\tembeddedTagEnd = Integer.MAX_VALUE;", "+\t\t\tif (embeddedTag < embeddedTagEnd) {", "+\t\t\t\tcount++;", "+\t\t\t\tstartEnd = embeddedTag;", "+\t\t\t\tfromHere = lc.indexOf(\">\", embeddedTag) + 1;", "+\t\t\t} else if (embeddedTagEnd < embeddedTag) {", "+\t\t\t\tcount--;", "+\t\t\t\tstartEnd = embeddedTagEnd;", "+\t\t\t\tfromHere = lc.indexOf(\">\", embeddedTagEnd) + 1;", "+\t\t\t}", "+\t\t}", "+\t\treturn startEnd;", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": " \t@SuppressWarnings(\"unused\") \tprotected static int findMatchingEndTag(String lc, int matchFromHere, \t\t\tString tag, int offset) throws FitParseException", "id": "85e921de2a888a4fac38c4338a66af33", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "c08747b99579d6c1adeafe390cedc27f", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
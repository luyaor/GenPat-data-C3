{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r   private static void addActions(StringBuilder s, Class<? extends Object> aClass, boolean selective)", "fileName": "src/fitlibrary/flow/WhatIsInScope.java", "methodNumberAfterChange": 1, "commitBeforeChange": "61117395b81dcb5282c8dd7cace95bc2fe71d3e3", "diff": ["-  private static void addActions(StringBuilder s, Class<? extends Object> aClass, boolean selective) {\r", "-\t  s.append(\"<td><table>\");\r", "-\t  Method[] methods = aClass.getMethods();\r", "-\t  Arrays.sort(methods, new Comparator<Method>() {\r", "-\t\t  public int compare(Method m1, Method m2) {\r", "-\t\t\t  return m1.getName().compareToIgnoreCase(m2.getName());\r", "-\t\t  }\r", "-\t  });\r", "-\t  for (Method method : methods) {\r", "-\t\t  if (method.getDeclaringClass() != Object.class && !method.getName().equals(\"getSystemUnderTest\")) {\r", "-\t\t\t  AnAction action = method.getAnnotation(AnAction.class);\r", "-\t\t\t  if (action == null) {\r", "-\t\t\t\t  if (!selective)\r", "-\t\t\t\t\t  s.append(\"<tr><td>\" + method.getName() + \"/\"\r", "-\t\t\t\t\t\t\t  + method.getParameterTypes().length + \"</td></tr>\\n\");\r", "-\t\t\t  } else if (action.actionType() != ActionType.IGNORE) {\r", "-\t\t\t\t  String name = action.wiki();\r", "-\t\t\t\t  if (name.isEmpty())\r", "-\t\t\t\t\t  name = unCamel(method.getName(),action.actionType());\r", "-\t\t\t\t  if (action.actionType() == ActionType.PREFIX)\r", "-\t\t\t\t\t  name += \"action...|\";\r", "-\t\t\t\t  s.append(\"<tr><td><span class='note' title='\"+action.tooltip()+\"'>\" + name + \"</span></td>\");\r", "-\t\t\t\t  if (action.actionType() == ActionType.COMPOUND && !method.getReturnType().isPrimitive()) {\r", "-\t\t\t\t\t  addActions(s, method.getReturnType(),true);\r", "-\t\t\t\t  }\r", "-\t\t\t\t  s.append(\"</tr>\");\r", "-\t\t\t  }\r", "-\t\t  }\r", "-\t  }\r", "-\t  s.append(\"</table></td>\");\r", "-  }\r", "+\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String substring, boolean selective) {\r", "+\t\ts.append(\"<td><table>\");\r", "+\t\tMethod[] methods = aClass.getMethods();\r", "+\t\tArrays.sort(methods, new Comparator<Method>() {\r", "+\t\t\tpublic int compare(Method m1, Method m2) {\r", "+\t\t\t\treturn m1.getName().compareToIgnoreCase(m2.getName());\r", "+\t\t\t}\r", "+\t\t});\r", "+\t\tfor (Method method : methods) {\r", "+\t\t\tClass<?> declaringClass = method.getDeclaringClass();\r", "+\t\t\tShowSelectedActions showAnnotation = declaringClass.getAnnotation(ShowSelectedActions.class);\r", "+\t\t\tboolean locallySelective = selective || showAnnotation != null;\r", "+\t\t\tboolean ignoreDoTraverse = declaringClass == DoTraverse.class && aClass != DoTraverse.class;\r", "+\t\t\tboolean matches = substring.isEmpty() || method.getName().contains(substring);\r", "+\t\t\tif (matches &&\r", "+\t\t\t\t\t!ignoreDoTraverse &&\r", "+\t\t\t\t\tdeclaringClass != Object.class && \r", "+\t\t\t\t\tdeclaringClass != Fixture.class && \r", "+\t\t\t\t\t!method.getName().equals(\"getSystemUnderTest\")) {\r", "+\t\t\t\tAnAction action = method.getAnnotation(AnAction.class);\r", "+\t\t\t\tif (action == null) {\r", "+\t\t\t\t\tif (!locallySelective) {\r", "+\t\t\t\t\t\ts.append(\"<tr><td>\" + methodName(method) + \"</td></tr>\\n\");\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else if (action.actionType() != ActionType.IGNORE) {\r", "+\t\t\t\t\tString name = action.wiki();\r", "+\t\t\t\t\tif (name.isEmpty())\r", "+\t\t\t\t\t\tname = unCamel(method.getName(),action.actionType());\r", "+\t\t\t\t\tif (action.actionType() == ActionType.PREFIX)\r", "+\t\t\t\t\t\tname += \"action...|\";\r", "+\t\t\t\t\ts.append(\"<tr><td><span class='note' title='\"+action.tooltip()+\"'>\" + name + \"</span></td>\");\r", "+\t\t\t\t\tif (action.actionType() == ActionType.COMPOUND && !method.getReturnType().isPrimitive()) {\r", "+\t\t\t\t\t\taddActions(s, method.getReturnType(),substring,true);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\ts.append(\"</tr>\");\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\ts.append(\"</table></td>\");\r", "+\t}\r"], "commitAfterChange": "abdca5590322cb763a5db1236b7a9c36f3d22653", "signatureAfterChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String substring, boolean selective)", "id": "2f8bbccac68a71ce45990dce9e883346", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tprivate IScope scopeOf(Evaluator evaluator)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 20, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\tprivate IScope scopeOf(Evaluator evaluator) {\r", "-\t\tif (evaluator.getRuntimeContext().hasScope())\r", "-\t\t\treturn evaluator.getRuntimeContext().getScope();\r", "-\t\tthrow new RuntimeException(\"No scope in runtime\");\r", "-\t}\r", "+\t@Override\r", "+\tpublic PositionedTarget findActionSpecialMethod(final Evaluator evaluator, final String[] cells, final boolean sequencing) {\r", "+\t\tfor (final TypedObject typedObject : evaluator.getScope().objectsForLookup()) {\r", "+\t\t\tPositionedTarget positioned = typedObject.findActionSpecialMethod(cells,new PositionedTargetFactory(){\r", "+\t\t\t\t@Override\r", "+\t\t\t\tpublic PositionedTarget create(Method method, int from, int upTo) {\r", "+\t\t\t\t\treturn new PositionedTargetWasFound(evaluator,cells,typedObject,method,from,upTo,sequencing,PlugBoard.lookupTarget);\r", "+\t\t\t\t}\r", "+\t\t\t});\r", "+\t\t\tif (positioned.partiallyValid())\r", "+\t\t\t\treturn positioned;\r", "+\t\t}\r", "+\t\treturn new UnfoundPositionedTarget();\r", "+\t}\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Override\r \tpublic PositionedTarget findActionSpecialMethod(final Evaluator evaluator, final String[] cells, final boolean sequencing)", "id": "428583dc84b28a9b087d6849b494ef54", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "f1176a619c16d86aa597e9aeb9ec107b", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
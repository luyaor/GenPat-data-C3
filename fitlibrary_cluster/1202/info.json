{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r     public Counts runInSuite(File inFile, File theReport, String encoding, Parse setUp,\r             Parse tearDown, BatchFitLibrary batchFitLibrary) throws IOException", "fileName": "src/fitlibrary/runner/HtmlRunner.java", "methodNumberAfterChange": 2, "commitBeforeChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "diff": ["-//        if (!theReport.canWrite() && false) {//////////////////////\r", "-//            System.err.println(\"HtmlRunner: Unable to write \"+theReport.getAbsolutePath());/////\r", "-//            Counts counts = new Counts();\r", "-//            counts.ignores++;\r", "-//            return counts;\r", "-//        }\r", "-            Parse tables = new Parse(fileContents);\r", "-            Parse whole = integrateSetUpAndTearDown(tables, setUp, tearDown);\r", "-            Counts counts = batchFitLibrary.doStorytest(TableFactory.tables(whole)).getCounts();\r", "-            whole.print(output);\r", "+            Parse whole = integrateSetUpAndTearDown(new Parse(fileContents), setUp, tearDown);\r", "+            Tables tables = TableFactory.tables(whole);\r", "+\t\t\tCounts counts = batchFitLibrary.doStorytest(tables).getCounts();\r", "+\t\t\toutputHtml(output, tables);\r", "-        \te.printStackTrace();\r", "+        \tstackTrace(output, e);\r"], "commitAfterChange": "d5585b9bd9597ec67ca4eaebd1dd7d580af72cbc", "signatureAfterChange": "\r     public Counts runInSuite(File inFile, File theReport, String encoding, Parse setUp,\r             Parse tearDown, BatchFitLibrary batchFitLibrary) throws IOException", "id": "1c38c46aae05f41e8e8ad352d532f345", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tpublic TablesOnParse call(List<Object> parameters, TestResults results)", "fileName": "src/fitlibrary/definedAction/DefinedActionTraverse.java", "methodNumberAfterChange": 3, "commitBeforeChange": "a31639422a830880e68972b09ea7debebd2f084e", "diff": ["-\tpublic TablesOnParse call(List<Object> parameters, TestResults results) {\r", "-\t\tTablesOnParse copy = new TablesOnParse(ParseUtility.copyParse(body.parse()));\r", "+\tpublic Tables call(List<Object> parameters, TestResults results) {\r", "+\t\tTables copy = TableFactory.tables(body);\r"], "commitAfterChange": "2c6fd716f0ddbc6f8d43a941ccbb30e98b026f07", "signatureAfterChange": "\r \tpublic Tables call(List<Object> parameters, TestResults results)", "id": "9282294fd69e9b1ffef0e71b54e930d1", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "7026ef231dcee103fbef455eda5ec63a", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
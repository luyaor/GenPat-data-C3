{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 17, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsPassWithOtherExceptionThrown() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 7, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "-\t@Test\r", "-\tpublic void reportsPassWithOtherExceptionThrown() throws Exception {\r", "-\t\tcontext.checking(new NotExpectations() {{\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell); \r", "-\t\t\t  will(throwException(new RuntimeException(\"\")));\r", "-\t\t\tone(firstCell).pass(testResults);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.PASSES_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\t}\r", "+\t@Test\r", "+\tpublic void trueWithOtherException() throws Exception {\r", "+\t\tcontext.checking(new Expectations() {{\r", "+\t\t\tone(action).runWithNoColouring(); will(throwException(new RuntimeException()));\r", "+\t\t}});\r", "+\t\tassertThat(globalActionScope.not(action),is(true));\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t@Test\r \tpublic void trueWithOtherException() throws Exception", "id": "5524f5e0edc48dcfa41835754272a585", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \t@Test\r \tpublic void reportsPassWithFalseResult() throws Exception", "fileName": "test/fitlibrary/traverse/workflow/special/TestNot.java", "methodNumberAfterChange": 0, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t}\r", "+\t\r", "-\tpublic void reportsPassWithFalseResult() throws Exception {\r", "-\t\tcontext.checking(new NotExpectations() {{\t\t\t\r", "-\t\t\tone(target).invokeForSpecial(subRow,testResults,false,firstCell);will(returnValue(false));\r", "-\t\t\tone(firstCell).pass(testResults);\r", "-\t\t}});\r", "-\t\tTwoStageSpecial lazySpecial = special.not(initialRow,NotSyle.PASSES_ON_EXCEPION);\r", "-\t\tlazySpecial.run(testResults);\r", "-\t}\r", "+\tpublic void trueWithFalseResult() throws Exception {\r", "+\t\t\tone(action).runWithNoColouring(); will(returnValue(false));\r", "+\t\tassertThat(globalActionScope.not(action),is(true));\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \t\r \t@Test\r \tpublic void trueWithFalseResult() throws Exception", "id": "bbc867886cef5c0d89091a8e920d9511", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "9fc71febe8e5ca0f44563fb46f2b0ef7", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
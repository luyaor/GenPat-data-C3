{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \r     public void testRow0()", "fileName": "test/fitlibrary/table/TestParseTables.java", "methodNumberAfterChange": 6, "commitBeforeChange": "82ea1ae4b8bc2afce333bb1224107b9b59ed21c5", "diff": ["-        assertTrue(!row.cellExists(-1));\r", "-        assertTrue(row.cellExists(0));\r", "-        assertTrue(!row.cellExists(1));\r", "+        assertTrue(!row.elementExists(-1));\r", "+        assertTrue(row.elementExists(0));\r", "+        assertTrue(!row.elementExists(1));\r"], "commitAfterChange": "6995fe6e345fefee56693ac626ad939f91fb7522", "signatureAfterChange": "\r \r     public void testRow0()", "id": "12b56d010e6f69f5fc03b42ecb559df3", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r     public void testTable0()", "fileName": "test/fitlibrary/table/TestParseTables.java", "methodNumberAfterChange": 2, "commitBeforeChange": "82ea1ae4b8bc2afce333bb1224107b9b59ed21c5", "diff": ["-        assertTrue(!table.rowExists(-1));\r", "-        assertTrue(table.rowExists(0));\r", "-        assertTrue(table.rowExists(1));\r", "-        assertTrue(!table.rowExists(2));\r", "+        assertTrue(!table.elementExists(-1));\r", "+        assertTrue(table.elementExists(0));\r", "+        assertTrue(table.elementExists(1));\r", "+        assertTrue(!table.elementExists(2));\r"], "commitAfterChange": "6995fe6e345fefee56693ac626ad939f91fb7522", "signatureAfterChange": "\r     public void testTable0()", "id": "3ea5e2f60dacafb72cc8924506b85a5e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 15, "signatureBeforeChange": "\r \t@Test\r \tpublic void canReplaceRowAtEnd()", "fileName": "test/fitlibrary/table/TestRowOnParse.java", "methodNumberAfterChange": 15, "commitBeforeChange": "360766661a8ffa74da803b868c7287cb9ef515ab", "diff": ["-\t\ttable.addRow(row0);\r", "-\t\ttable.addRow(row1);\r", "+\t\ttable.add(row0);\r", "+\t\ttable.add(row1);\r", "-\t\tassertThat(table.row(0),is(row0));\r", "-\t\tassertThat(table.row(1),is(row2));\r", "+\t\tassertThat(table.elementAt(0),is(row0));\r", "+\t\tassertThat(table.elementAt(1),is(row2));\r"], "commitAfterChange": "82ea1ae4b8bc2afce333bb1224107b9b59ed21c5", "signatureAfterChange": "\r \t@Test\r \tpublic void canReplaceRowAtEnd()", "id": "4568e65467cd24b8e21c4e8783b7dee8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tprivate void colourReport(Tables body, Row row,\r \t\t\tTestResults testResults, TestResults subTestResults)", "fileName": "src/fitlibrary/traverse/workflow/caller/DefinedActionCaller.java", "methodNumberAfterChange": 8, "commitBeforeChange": "360766661a8ffa74da803b868c7287cb9ef515ab", "diff": ["-\t\t\t\t\trow.cell(i).error(testResults, new FitLibraryException(\"\"));\r", "+\t\t\t\t\trow.elementAt(i).error(testResults, new FitLibraryException(\"\"));\r", "-\t\t\t\t\trow.cell(i).fail(testResults);\r", "+\t\t\t\t\trow.elementAt(i).fail(testResults);\r", "-\t\t\t\t\trow.cell(i).ignore(testResults);\r", "+\t\t\t\t\trow.elementAt(i).ignore(testResults);\r", "-\t\t\trow.addCell(TableFactory.cell(link(pageName),body));\r", "+\t\t\trow.add(TableFactory.cell(link(pageName),body));\r"], "commitAfterChange": "82ea1ae4b8bc2afce333bb1224107b9b59ed21c5", "signatureAfterChange": "\r \tprivate void colourReport(Tables body, Row row,\r \t\t\tTestResults testResults, TestResults subTestResults)", "id": "74f19b023af80f104f5c6bbc6ae32a13", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 14, "signatureBeforeChange": "\r \t@Test\r \tpublic void canReplaceRowAtStart()", "fileName": "test/fitlibrary/table/TestRowOnParse.java", "methodNumberAfterChange": 14, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\tassertThat(table.elementAt(0),is(row0));\r", "-\t\tassertThat(table.elementAt(1),is(row1));\r", "+\t\tassertThat(table.at(0),is(row0));\r", "+\t\tassertThat(table.at(1),is(row1));\r", "-\t\tassertThat(table.elementAt(0),is(row2));\r", "-\t\tassertThat(table.elementAt(1),is(row1));\r", "+\t\tassertThat(table.at(0),is(row2));\r", "+\t\tassertThat(table.at(1),is(row1));\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Test\r \tpublic void canReplaceRowAtStart()", "id": "85e2496fb455174d77f0963c180049c9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r     public void testTable0()", "fileName": "test/fitlibrary/table/TestParseTables.java", "methodNumberAfterChange": 2, "commitBeforeChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "diff": ["-        assertTrue(!table.elementExists(-1));\r", "-        assertTrue(table.elementExists(0));\r", "-        assertTrue(table.elementExists(1));\r", "-        assertTrue(!table.elementExists(2));\r", "+        assertTrue(!table.atExists(-1));\r", "+        assertTrue(table.atExists(0));\r", "+        assertTrue(table.atExists(1));\r", "+        assertTrue(!table.atExists(2));\r"], "commitAfterChange": "1f73cbb5de4c1093ac1830526b85ef0e41bcdeb6", "signatureAfterChange": "\r     public void testTable0()", "id": "9592ac5896f351ad26cdb2450124c00e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r     private Object getObject(Row row, int cellNo, Object initialObject, TestResults testResults)", "fileName": "src/fitlibraryGeneric/traverse/ReferenceTraverse.java", "methodNumberAfterChange": 6, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-            Cell nextCell = row.elementAt(cellNo+1);\r", "-            if (!nextCell.matchesText(\"of\",this) && !nextCell.matchesText(\"in\",this)) {\r", "+            Cell nextCell = row.at(cellNo+1);\r", "+            if (!nextCell.matchesTextInLowerCase(\"of\",this) && !nextCell.matchesTextInLowerCase(\"in\",this)) {\r", "-        return getReferencedObject(row.elementAt(cellNo),object,last,testResults);\r", "+        return getReferencedObject(row.at(cellNo),object,last,testResults);\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r     private Object getObject(Row row, int cellNo, Object initialObject, TestResults testResults)", "id": "a0c4099359ddb64ea30dfa641b5aecad", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r   public static void assertCounts(Counts expected, Counts actual)", "fileName": "src/fit/decorator/util/TestCaseHelper.java", "methodNumberAfterChange": 0, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public static void assertCounts(Counts expected, Counts actual) {\r", "-    TestCase.assertEquals(expected.wrong, actual.wrong);\r", "-    TestCase.assertEquals(expected.exceptions, actual.exceptions);\r", "-    TestCase.assertEquals(expected.ignores, actual.ignores);\r", "-    TestCase.assertEquals(expected.right, actual.right);\r", "-  }\r", "+\tpublic static void assertCounts(Counts expected, Counts actual) {\r", "+\t\tAssert.assertEquals(expected.wrong, actual.wrong);\r", "+\t\tAssert.assertEquals(expected.exceptions, actual.exceptions);\r", "+\t\tAssert.assertEquals(expected.ignores, actual.ignores);\r", "+\t\tAssert.assertEquals(expected.right, actual.right);\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \tpublic static void assertCounts(Counts expected, Counts actual)", "id": "a8dc0718e47b830b67ce7627d5499bb4", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \r     public void testRow0()", "fileName": "test/fitlibrary/table/TestParseTables.java", "methodNumberAfterChange": 6, "commitBeforeChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "diff": ["-        assertTrue(!row.elementExists(-1));\r", "-        assertTrue(row.elementExists(0));\r", "-        assertTrue(!row.elementExists(1));\r", "+        assertTrue(!row.atExists(-1));\r", "+        assertTrue(row.atExists(0));\r", "+        assertTrue(!row.atExists(1));\r"], "commitAfterChange": "1f73cbb5de4c1093ac1830526b85ef0e41bcdeb6", "signatureAfterChange": "\r \r     public void testRow0()", "id": "b29979ae2c56cc0f53f0cda1d9802844", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r     public void testTable0Exception()", "fileName": "test/fitlibrary/table/TestParseTables.java", "methodNumberAfterChange": 5, "commitBeforeChange": "360766661a8ffa74da803b868c7287cb9ef515ab", "diff": ["-        Table table0 = tables.table(0);\r", "+        Table table0 = tables.elementAt(0);\r", "-        assertTrue(table0.row(0).cell(0).hadError());\r", "-        assertTrue(table0.row(0).text(0,doFixture).startsWith(\"1java.lang.RuntimeException: Forced\"));\r", "+        assertTrue(table0.elementAt(0).elementAt(0).hadError());\r", "+        assertTrue(table0.elementAt(0).text(0,doFixture).startsWith(\"1java.lang.RuntimeException: Forced\"));\r"], "commitAfterChange": "82ea1ae4b8bc2afce333bb1224107b9b59ed21c5", "signatureAfterChange": "\r     public void testTable0Exception()", "id": "ca73c1d92f87934e15ba946ac307f150", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r     private boolean keyed(Table table)", "fileName": "src/fitlibraryGeneric/set/SetParser2.java", "methodNumberAfterChange": 4, "commitBeforeChange": "360766661a8ffa74da803b868c7287cb9ef515ab", "diff": ["-    \treturn (table.row(0).cellExists(0) &&\r", "-    \t\t\ttable.row(0).text(0,evaluator).toLowerCase().equals(\"key\")) ||\r", "-    \t\t\t( table.row(0).cellExists(1) &&\r", "-    \t\t\t\t\ttable.row(0).text(1,evaluator).toLowerCase().equals(\"key\"));\r", "+    \treturn (table.elementAt(0).cellExists(0) &&\r", "+    \t\t\ttable.elementAt(0).text(0,evaluator).toLowerCase().equals(\"key\")) ||\r", "+    \t\t\t( table.elementAt(0).cellExists(1) &&\r", "+    \t\t\t\t\ttable.elementAt(0).text(1,evaluator).toLowerCase().equals(\"key\"));\r"], "commitAfterChange": "82ea1ae4b8bc2afce333bb1224107b9b59ed21c5", "signatureAfterChange": "\r     private boolean keyed(Table table)", "id": "d290a5a52ae0c2cffe2cfe4f84f1f40f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "49dc78dccd231ae6263f5875ecf43250", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
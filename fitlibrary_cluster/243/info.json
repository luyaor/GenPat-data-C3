{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tprivate static void runParallel(String suiteName, String fitNesseDirectoryPath, String resultsDirectoryPath, boolean showPasses, int port) throws IOException, InterruptedException", "fileName": "src/fitlibrary/batch/FitLibraryRunner.java", "methodNumberAfterChange": 4, "commitBeforeChange": "7bc373fdff836c5fe5554dd7cca83ec4c7ddbc73", "diff": ["-\tprivate static void runParallel(String suiteName, String fitNesseDirectoryPath, String resultsDirectoryPath, boolean showPasses, int port) throws IOException, InterruptedException {\r", "+\tprivate static void runParallel(String suiteName, String fitNesseDirectoryPath, String resultsDirectoryPath, boolean showPasses, int port, int maxRetries) throws IOException, InterruptedException {\r", "-\t\tParallelTestRunner runner = new ParallelTestRunner(new ParallelFitNesseRepository(fitNesseDirectoryPath,port), \r", "-\t\t\t\tnew FitLibraryTestEngine(),resultsDirectoryPath,showPasses,suiteName);\r", "-\t\tCounts counts = runner.runSuite(suiteName,new ParallelSuiteResult(suiteName,showPasses));\r", "-\t\treport(start, counts);\r", "+\t\tHashSet<String> passedTestList = new HashSet<String>();\r", "+\t\tFitLibraryTestEngine testEngine = new RetryAwareFitLibraryTestEngine(passedTestList);\r", "+\t\tint numLoops = 1; \r", "+\t\tCounts counts;\r", "+\t\twhile(true) {\r", "+\t\t\tParallelTestRunner runner = new ParallelTestRunner(new ParallelFitNesseRepository(fitNesseDirectoryPath,port), testEngine,resultsDirectoryPath,showPasses,suiteName);\r", "+\t\t\tcounts = runner.runSuite(suiteName,new ParallelSuiteResult(suiteName,showPasses));\r", "+\t\t\treport(start, counts);\r", "+\t\t\tif ((counts.exceptions+counts.wrong) == 0 || numLoops++ > maxRetries) \r", "+\t\t\t\tbreak;\r", "+\t\t\t\r", "+\t\t\tSystem.out.println(\" \"); \r", "+\t\t\tSystem.out.println(\"Some tests failed... Retry #\"+(numLoops-1));\r", "+\t\t} \r", "+\t\t\r", "+\t\tSystem.exit(counts.wrong+counts.exceptions);\r"], "commitAfterChange": "a1ec4135443e6b5658923cb34156b47b7ffd658c", "signatureAfterChange": "\r \tprivate static void runParallel(String suiteName, String fitNesseDirectoryPath, String resultsDirectoryPath, boolean showPasses, int port, int maxRetries) throws IOException, InterruptedException", "id": "49d303edadcd86f09e7e66b76fdea4b9", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tpublic String runGiving(String testDirectoryName, String reportDirectoryName) throws Exception", "fileName": "src/fitlibrary/runner/FolderRunnerFixture.java", "methodNumberAfterChange": 1, "commitBeforeChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "diff": ["-\tpublic String runGiving(String testDirectoryName, String reportDirectoryName) throws Exception {\r", "-        long start = System.currentTimeMillis();\r", "-\t\tString separator = File.separator;\r", "-\t\tString TESTFILES = CREATIONS+separator+\"MyOwnFitReleases\"+separator;\r", "-\t\tString theCounts = new FolderRunner().run(TESTFILES+testDirectoryName,TESTFILES+reportDirectoryName).getCounts();\r", "-\t\tString fileName = TESTFILES+reportDirectoryName+separator+\"reportIndex.html\";\r", "-        long end = System.currentTimeMillis();\r", "-        return urlFile(fileName,theCounts)+\" in \"+(end-start)/1000+\" seconds\";\r", "+\r", "+\tpublic boolean runGiving(String testDirectoryName, String reportDirectoryName) throws Exception {\r", "+\t\tDifferenceInterface previousDifferenceStrategy = Traverse.getDifferenceStrategy();\r", "+\t\ttry {\r", "+\t\t\tlong start = System.currentTimeMillis();\r", "+\t\t\tReport run = new FolderRunner().run(TESTFILES + testDirectoryName,\r", "+\t\t\t\t\tTESTFILES + reportDirectoryName);\r", "+\t\t\tString theCounts = run.getCounts();\r", "+\t\t\tlong end = System.currentTimeMillis();\r", "+\t\t\t// showAfterTable(urlFile(TESTFILES+reportDirectoryName+File.separator+\"reportIndex.html\",\"report\"));\r", "+\t\t\tshowAfterTable(theCounts + \" in \" + (end - start) / 1000 + \" seconds\");\r", "+\t\t\treturn !run.failing();\r", "+\t\t} finally {\r", "+\t\t\tTraverse.setDifferenceStrategy(previousDifferenceStrategy);\r", "+\t\t}\r"], "commitAfterChange": "d5585b9bd9597ec67ca4eaebd1dd7d580af72cbc", "signatureAfterChange": "\r \r \tpublic boolean runGiving(String testDirectoryName, String reportDirectoryName) throws Exception", "id": "89031c1ac3f64a2364e3ff2542cd84a6", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "9b72ad5a20a618cb7d581f85cf5fddc4", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
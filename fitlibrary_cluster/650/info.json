{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 15, "signatureBeforeChange": "\r \t\t\tpublic void tearDown(Object object)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 14, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\t\t}\r", "-\t\t\tpublic void tearDown(Object object) {\r", "-\t\t\t\tcallMethod(object,\"tearDown\",table,testResults);\r", "-\t\t\t}\r", "+\tprivate void tearDown(List<TypedObject> typedObjects, Row row, TestResults testResults) {\r", "+\t\tfor (TypedObject typedObject : typedObjects)\r", "+\t\t\tsetUpTearDown.callTearDownSutChain(typedObject.getSubject(), row, testResults);\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate void tearDown(List<TypedObject> typedObjects, Row row, TestResults testResults)", "id": "0498ff8742e17b311f6aeb14a6114a22", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 16, "signatureBeforeChange": "\r \t\t\t@Override\r \t\t\tpublic void run(TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/special/PrefixSpecialAction.java", "methodNumberAfterChange": 6, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t\treturn new TwoStageSpecial() {\r", "-\t\t\t@Override\r", "-\t\t\tpublic void run(TestResults testResults) {\r", "-\t\t\t\tCell notCell = row.at(0);\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tObject result = target.invokeForSpecial(row.fromAt(2),testResults,false,row.at(0));\r", "-\t\t\t\t    if (!(result instanceof Boolean))\r", "-\t\t\t\t        notCell.error(testResults,new NotRejectedException());\r", "-\t\t\t\t    else if (((Boolean)result).booleanValue())\r", "-\t\t\t\t        notCell.fail(testResults);\r", "-\t\t\t\t    else\r", "-\t\t\t\t        notCell.pass(testResults);\r", "-\t\t\t\t} catch (IgnoredException e) {\r", "-\t\t\t\t\tif (e.getIgnoredException() instanceof FitLibraryShowException)\r", "-\t\t\t\t\t\trow.error(testResults,e.getIgnoredException());\r", "-\t\t\t\t} catch (FitLibraryShowException e) {\r", "-\t\t\t\t\trow.error(testResults,e);\r", "-\t\t\t\t} catch (FitLibraryException e) {\r", "-\t\t\t\t\tif (notStyle == NotSyle.PASSES_ON_EXCEPION)\r", "-\t\t\t\t\t\tnotCell.pass(testResults);\r", "-\t\t\t\t\telse\r", "-\t\t\t\t\t\trow.error(testResults,e);\r", "-\t\t\t\t} catch (InvocationTargetException e) {\r", "-\t\t\t\t\tThrowable embedded = ExceptionHandler.unwrap(e);\r", "-\t\t\t\t\tif (embedded instanceof FitLibraryShowException)\r", "-\t\t\t\t\t\trow.error(testResults, embedded);\r", "-\t\t\t\t\telse if (notStyle == NotSyle.PASSES_ON_EXCEPION)\r", "-\t\t\t\t\t\tnotCell.pass(testResults);\r", "-\t\t\t\t\telse if (notStyle == NotSyle.ERROR_ON_EXCEPION)\r", "-\t\t\t\t\t\trow.error(testResults, embedded);\r", "-\t\t\t\t\telse\r", "-\t\t\t\t\t\tnotCell.pass(testResults);\r", "-\t\t\t\t} catch (Exception e) {\r", "-\t\t\t\t\tif (notStyle == NotSyle.PASSES_ON_EXCEPION)\r", "-\t\t\t\t\t\tnotCell.pass(testResults);\r", "-\t\t\t\t\telse\r", "-\t\t\t\t\t\trow.error(testResults,e);\r", "-\t\t\t\t}\r", "+\t}\r", "+\tprotected void reportBoolean(Object result, Cell cell, TestResults testResults) {\r", "+\t\tif (result instanceof Boolean)\r", "+\t\t\tif (((Boolean)result).booleanValue())\r", "+\t\t\t\tcell.pass(testResults);\r", "+\t\t\telse\r", "+\t\t\t\tcell.fail(testResults);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \tprotected void reportBoolean(Object result, Cell cell, TestResults testResults)", "id": "5c8942658bc80ef0f82523fa6a217a9e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "98b15778d4d76572d044adf932ebb8fd", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \t\r \t@Test\r \tpublic void runWithFixture() throws FitParseException", "fileName": "test/fitlibrary/flow/TestDoFlowWithFixture.java", "methodNumberAfterChange": 0, "commitBeforeChange": "45400291a9cb47b358ca00f896a8c7e188a58f80", "diff": ["-\t\tfinal GenericTypedObject typedResult1 = new GenericTypedObject(evaluator);\r", "-\t\tfinal Parse parse = new Parse(\"<table><tr><td>1</td></tr></table>\");\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\tallowing(tableListener).getTestResults(); will(returnValue(testResults));\r", "-\t\t\toneOf(runtime).pushTestResults(with(any(TestResults.class)));\r", "-\t\t\tallowing(runtime).isAbandoned(with(any(TestResults.class))); will(returnValue(false));\r", "+\t\tTable table0 = tables.at(0);\r", "-\t\t\toneOf(runtime).setCurrentTable(table);\r", "-\t\t\toneOf(runtime).setCurrentRow(table.at(0));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(table.at(0),testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\toneOf(table).asTableOnParse(); will(returnValue(table));\r", "-\t\t\toneOf(flowEvaluator).fitHandler(); will(returnValue(new FitHandler()));\r", "-\t\t\toneOf(table).asParse(); will(returnValue(parse));\r", "-\t\t\toneOf(mockFixture).doTable(parse);\r", "-\t\t\t\r", "-\t\t\toneOf(table).replaceAt(0, table.at(0));\r", "-\t\t\toneOf(table).replaceAt(1, table.at(1));\r", "-\t\t\toneOf(runtime).popTestResults();\r", "-\t\t}});\r", "-\t\tdoFlow.runTable(table,tableListener);\r", "+\t\tdoFlowDriver.startingOnTable(table0);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(0),evaluator);\r", "+\t\tdoFlowDriver.interpretingFixture(mockFixture, table0);\r", "+\t\tdoFlowDriver.poppingAtEndOfLastTable();\r", "+\t\tdoFlowDriver.finishingTable(table0);\r", "+\r", "+\t\tdoFlowDriver.runStorytest(tables);\r"], "commitAfterChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "signatureAfterChange": "\r \t\r \t@Test\r \tpublic void runWithFixture() throws FitParseException", "id": "18352899212cc1bfd9b948d7447b48a4", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \r \tprivate void verifyWithEvaluator(final Evaluator evaluator, final Evaluator mockEvaluator)", "fileName": "test/fitlibrary/flow/TestDoFlowWithEvaluator.java", "methodNumberAfterChange": 5, "commitBeforeChange": "45400291a9cb47b358ca00f896a8c7e188a58f80", "diff": ["-\tprivate void verifyWithEvaluator(final Evaluator evaluator, final Evaluator mockEvaluator) {\r", "-\t\tfinal GenericTypedObject typedResult1 = new GenericTypedObject(evaluator);\r", "-\t\tcontext.checking(new Expectations() {{\r", "-\t\t\tallowing(tableListener).getTestResults(); will(returnValue(testResults));\r", "-\t\t\toneOf(runtime).pushTestResults(with(any(TestResults.class)));\r", "-\t\t\tallowing(runtime).isAbandoned(with(any(TestResults.class))); will(returnValue(false));\r", "+\tprivate void verifyWithEvaluator(Evaluator evaluator, Evaluator mockEvaluator) {\r", "+\t\tdoFlowDriver.showTearDown = true;\r", "+\t\tTable table0 = tables.at(0);\r", "+\t\t\r", "+\t\tdoFlowDriver.startingOnTable(table0);\r", "+\t\tdoFlowDriver.interpretingRowReturning(table0.at(0), evaluator);\r", "+\t\tdoFlowDriver.pushingObjectOnScopeStack(evaluator);\r", "+\t\tdoFlowDriver.callingSetUpOn(evaluator,table0.at(0));\r", "+\t\tdoFlowDriver.interpretingEvaluator(mockEvaluator,table0);\r", "+\t\tdoFlowDriver.poppingScopeStackAtEndOfLastTable(list(evaluator));\r", "+\t\tdoFlowDriver.callingTearDownOn(evaluator, table0.at(0));\r", "+\t\tdoFlowDriver.finishingTable(table0);\r", "-\t\t\toneOf(runtime).setCurrentTable(table);\r", "-\t\t\toneOf(runtime).setCurrentRow(table.at(0));\r", "-\t\t\toneOf(flowEvaluator).interpretRow(table.at(0),testResults);\r", "-\t\t\t  will(returnValue(typedResult1));\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(evaluator, table.at(0), testResults);\r", "-\t\t\toneOf(scopeStack).push(typedResult1);\r", "-\t\t\toneOf(mockEvaluator).interpretAfterFirstRow(table, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(evaluator, table.at(0), testResults);\r", "-\t\t\toneOf(runtime).popTestResults();\r", "-\t\t}});\r", "-\t\tdoFlow.runTable(table,tableListener);\r", "+\t\tdoFlowDriver.runStorytest(tables);\r"], "commitAfterChange": "6ebb2c5d6730458a58410afad0ddf3abd98624de", "signatureAfterChange": "\r \r \tprivate void verifyWithEvaluator(Evaluator evaluator, Evaluator mockEvaluator)", "id": "6b96bc71c0907c9b7f8d73b52c09dfd1", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "41a675afca58c33e5db54c93f551cf73", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
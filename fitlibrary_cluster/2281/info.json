{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 29, "signatureBeforeChange": "\r \tpublic void toHtml(StringBuilder builder)", "fileName": "src/fitlibrary/table/ParseNode.java", "methodNumberAfterChange": 29, "commitBeforeChange": "8655c08986fab4cb3523c8934e8765739689b282", "diff": ["-\t\t//\r", "+\t\tboolean everything = this.getClass() != TablesOnParse.class;\r", "+\t\tif (everything) {\r", "+\t\t\tbuilder.append(getLeader());\r", "+\t\t\tif (parse.tag.length() > 1)\r", "+\t\t\t\tbuilder.append(parse.tag);\r", "+\t\t\tif (parse.body != null)\r", "+\t\t\t\tbuilder.append(parse.body);\r", "+\t\t}\r", "+\t\tfor (int i = 0; i < size(); i++)\r", "+\t\t\t((ParseNode)at(i)).toHtml(builder);\r", "+\t\tif (everything) {\r", "+\t\t\tbuilder.append(parse.end);\r", "+\t\t\tbuilder.append(getTrailer());\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "45cd4c7886612af0bbcf0d9d5705be6bd83dc738", "signatureAfterChange": "\r \tpublic void toHtml(StringBuilder builder)", "id": "63186584c5a5b0796fd8bfc9c8d77744", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tpublic boolean tablesEqual(String path, TableElement actual, TableElement expected)", "fileName": "src/fitlibrary/spec/TablesCompare.java", "methodNumberAfterChange": 1, "commitBeforeChange": "8655c08986fab4cb3523c8934e8765739689b282", "diff": ["-\t\tif (actual.getClass() != expected.getClass())\r", "-\t\t\tthrow new RuntimeException(\"In SpecifyFixture, the classes don't match: \"+\r", "-\t\t\t\t\tactual.getClass()+\" and \"+expected.getClass());\r", "+\t\t\tif (!actualCell.fullText().isEmpty() && expectedCell.fullText().isEmpty() && expectedCell.hasEmbeddedTables()) {\r", "+\t\t\t\texpectedCell.setText(expectedCell.last().getTrailer());\r", "+\t\t\t\texpectedCell.last().setTrailer(\"\");\r", "+\t\t\t}\r", "+\t\t\t\t\t\tTableFactory.useOnLists(false);\r", "+\t\t\t\t\t\tTableFactory.pop();\r", "-\t\t\tif (!equals(actual.getLeader(),expected.getLeader())) {\r", "+\t\t\tif (expected.getLeader().isEmpty() && actual.getLeader().equals(\"<html>\"))\r", "+\t\t\t\t;\r", "+\t\t\telse if (!equals(actual.getLeader(),expected.getLeader())) {\r", "-\t\t\tif (!equals(actual.getTrailer(),expected.getTrailer())) {\r", "+\t\t\tif (expected.getTrailer().isEmpty() && actual.getTrailer().equals(\"</html>\"))\r", "+\t\t\t\t;\r", "+\t\t\telse if (!equals(actual.getTrailer(),expected.getTrailer())) {\r", "-\t\t\tif (!actual.getTagLine().equals(expected.getTagLine())) {\r", "+\t\t\tif (expected.getTagLine().isEmpty() && actual.getTagLine().equals(\"border=\\\"1\\\" cellspacing=\\\"0\\\"\"))\r", "+\t\t\t\t;\r", "+\t\t\telse if (!actual.getTagLine().equals(expected.getTagLine())) {\r"], "commitAfterChange": "45cd4c7886612af0bbcf0d9d5705be6bd83dc738", "signatureAfterChange": "\r \tpublic boolean tablesEqual(String path, TableElement actual, TableElement expected)", "id": "6c6430084a34d7254df75b94c00b102b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "a4cf5a685e658569a67c4ba285486d44", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
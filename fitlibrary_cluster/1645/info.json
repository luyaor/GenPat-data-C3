{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "\r \tpublic static void record(String key, String value)", "fileName": "src/fitlibrary/dynamicVariable/RecordDynamicVariables.java", "methodNumberAfterChange": 6, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["-\t\tif (!value.contains(\"@{\"+key+\"}\")) // Don't record a self-reference.\r", "-\t\t\trecordings.get().record(key,value);\r", "+ \t\trecordings.get().record(key,value);\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r \tpublic static void record(String key, String value)", "id": "4fe211a5b69085e157cfcc89cc38374f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 41, "signatureBeforeChange": "\r \tpublic boolean harvestUsingPatternFrom(String[] vars, String pattern, String text)", "fileName": "src/fitlibrary/flow/GlobalActionScope.java", "methodNumberAfterChange": 41, "commitBeforeChange": "9a7776522edd7b9480d0994bad56d1f66b6f0142", "diff": ["-\t\tMatcher matcher = Pattern.compile(pattern).matcher(text);\r", "+\t\tMatcher matcher = Pattern.compile(pattern, Pattern.DOTALL).matcher(text);\r"], "commitAfterChange": "79196bb41cb3686f301b49cffbd318a9c7863af1", "signatureAfterChange": "\r \tpublic boolean harvestUsingPatternFrom(String[] vars, String pattern, String text)", "id": "6a0d8ece2f5cb77db5b07ff010d0b937", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tpublic void testAdapterWithProperty() throws Exception", "fileName": "test/fitlibrary/parser/collection/TestArrayParser.java", "methodNumberAfterChange": 4, "commitBeforeChange": "912f2299cb68da9d49ecfc90590037db64cfcc0e", "diff": ["-\t\tParser adapter = Traverse.asTyped(ints).parser(new DoFixture());\r", "+\t\tParser adapter = Traverse.asTyped(ints).parser(evaluatorWithRuntime());\r"], "commitAfterChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "signatureAfterChange": "\r \tpublic void testAdapterWithProperty() throws Exception", "id": "72a82db17709499813db37220231e3c2", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "97cbfa53596134181f11586c8a2dea89", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tprivate static void macroReplace(Tables tables, Map<String,Object> mapToRef, VariableResolver resolver)", "fileName": "src/fitlibrary/definedAction/ParameterBinder.java", "methodNumberAfterChange": 3, "commitBeforeChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "diff": ["-\t}\r", "-\tprivate static void macroReplace(Tables tables, Map<String,Object> mapToRef, VariableResolver resolver) {\r", "-\t\tList<String> reverseSortOrder = new ArrayList<String>(mapToRef.keySet());\r", "-\t\tCollections.sort(reverseSortOrder,new Comparator<String>() {\r", "-\t\t\tpublic int compare(String arg0, String arg1) {\r", "-\t\t\t\treturn arg1.compareTo(arg0);\r", "-\t\t\t}\r", "-\t\t});\r", "-\t\tfor (String key : reverseSortOrder)\r", "-\t\t\tmacroReplaceTables(tables, key, mapToRef.get(key),resolver);\r", "-\t}\r", "+\tpublic void verifyHeaderAgainstFormalParameters(Row row, VariableResolver resolver) {\r", "+\t\tif (row.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+row.size());\r", "+\t\tHashSet<String> set = new HashSet<String>();\r", "+\t\tfor (int c = 0; c < row.size(); c++) {\r", "+\t\t\tString headerName = row.text(c, resolver);\r", "+\t\t\tif (!formalParameters.contains(headerName))\r", "+\t\t\t\tthrow new FitLibraryException(\"Unknown parameter: '\"+headerName+\"'\");\r", "+\t\t\tif (set.contains(headerName))\r", "+\t\t\t\tthrow new FitLibraryException(\"Duplicate parameter: '\"+headerName+\"'\");\r", "+\t\t\tset.add(headerName);\r"], "commitAfterChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "signatureAfterChange": "\r \tpublic void verifyHeaderAgainstFormalParameters(Row row, VariableResolver resolver)", "id": "14eb11621a805ea725639ffd7c6b117c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 16, "signatureBeforeChange": "\r \tprivate void methodsAreMissing(DoCaller[] actions, String possibleFixtureName)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 21, "commitBeforeChange": "1a9b02fce576bf8c0ae1342055a0c5082b525445", "diff": ["-\tprivate void methodsAreMissing(DoCaller[] actions, String possibleFixtureName) {\r", "-\t\t// It would be better to pass all these exceptions on in a wrapper exception.\r", "-\t\t// Then they can be sorted and organised into <hr> lines in the cell.\r", "-\t\tfinal String OR = \" OR: \";\r", "-\t\tString missingMethods = \"\";\r", "-\t\tString missingAt = \"\";\r", "+\tprivate void methodsAreMissing(DoCaller[] actions, String possibleFixtureName, String possibleSequenceCall) {\r", "+\t\tList<String> missingMethods = new ArrayList<String>();\r", "+\t\tList<Class<?>> possibleClasses = new ArrayList<Class<?>>();\r", "-\t\t\t\t\tmissingMethods += OR+missingMethodException.getMethodSignature();\r", "-\t\t\t\t\tmissingAt = missingMethodException.getClasses();\r", "+\t\t\t\t\tmissingMethods.addAll(missingMethodException.getMethodSignature());\r", "+\t\t\t\t\tfor (Class<?> c : missingMethodException.getClasses())\r", "+\t\t\t\t\t\tif (!possibleClasses.contains(c))\r", "+\t\t\t\t\t\t\tpossibleClasses.add(c);\r", "-\t\t\t\t\tambiguousMethods += OR+ambiguousNameException.getMessage();\r", "+\t\t\t\t\tambiguousMethods += \"<li>\"+ambiguousNameException.getMessage()+\"</li>\";\r", "-\t\t\t\t\tmissingMethods += OR+exception.getMessage();\r", "+\t\t\t\t\tmissingMethods.add(exception.getMessage());\r", "-\t\t\t\t\tmissingMethods += OR+exception.getMessage();\r", "+\t\t\t\t\tmissingMethods.add(exception.getMessage());\r", "+\t\tif (!missingMethods.isEmpty() && !possibleSequenceCall.isEmpty())\r", "+\t\t\tmissingMethods.add(possibleSequenceCall);\r", "-\t\tif (!\"\".equals(missingMethods))\r", "-\t\t\tmessage += \"Missing methods: \"+missingMethods.substring(OR.length());\r", "-\t\tif (!\"\".equals(ambiguousMethods))\r", "-\t\t\tmessage += \" \"+ambiguousMethods.substring(OR.length());\r", "-\t\tif (!\"\".equals(missingAt))\r", "-\t\t\tmessage += \" in \"+missingAt;\r", "-\t\tthrow new FitLibraryException(message.trim());\r", "+\t\tif (!missingMethods.isEmpty())\r", "+\t\t\tmessage += \"Missing method. Possibly:\"+MissingMethodException.htmlListOfSignatures(missingMethods);\r", "+\t\tif (!ambiguousMethods.isEmpty())\r", "+\t\t\tmessage += \"<ul>\"+ambiguousMethods+\"</ul>\";\r", "+\t\tif (!possibleClasses.isEmpty())\r", "+\t\t\tmessage += \"<hr/>Possibly in class:\"+MissingMethodException.htmlListOfClassNames(possibleClasses);\r", "+\t\tthrow new FitLibraryExceptionInHtml(message.trim());\r"], "commitAfterChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "signatureAfterChange": "\r \tprivate void methodsAreMissing(DoCaller[] actions, String possibleFixtureName, String possibleSequenceCall)", "id": "2fe76162365fe40a8a6a73c8d7ba9b08", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "8a4b2b22fa2e2cf2d65958a1f4ca30cb", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
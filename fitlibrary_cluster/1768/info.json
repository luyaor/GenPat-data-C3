{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 21, "signatureBeforeChange": "\r \t@Override\r \tpublic boolean checkResult(Cell expectedCell, Object result, boolean showWrongs, boolean handleSubtype, TestResults testResults)", "fileName": "src/fitlibrary/closure/CalledMethodTarget.java", "methodNumberAfterChange": 21, "commitBeforeChange": "02e542836443af04f72003e8d730694e6f8811b7", "diff": ["-\tpublic boolean checkResult(Cell expectedCell, Object result, boolean showWrongs, boolean handleSubtype, TestResults testResults) {\r", "+\tpublic boolean checkResult(Cell expectedCell, Object initialResult, boolean showWrongs, \r", "+\t\t\tboolean handleSubtype, TestResults testResults) {\r", "+\t\tObject result = initialResult;\r", "+\t\tif (result != null && Iterator.class.isAssignableFrom(result.getClass())) {\r", "+\t\t\tIterator<?> it = (Iterator<?>) result;\r", "+\t\t\tList<Object> list = new ArrayList<Object>();\r", "+\t\t\twhile (it.hasNext())\r", "+\t\t\t\tlist.add(it.next());\r", "+\t\t\tresult = list;\r", "+\t\t}\r", "-\t\t\t\tif (result instanceof String)\r", "+\t\t\t\tif (result instanceof String) {\r", "-\t\t\t\telse\r", "+\t\t\t\t} else {\r", "+\t\t\t\t}\r"], "commitAfterChange": "3e49a68db9f888715cfae72403c05f9f5d45b868", "signatureAfterChange": "\r \t@Override\r \tpublic boolean checkResult(Cell expectedCell, Object initialResult, boolean showWrongs, \r \t\t\tboolean handleSubtype, TestResults testResults)", "id": "b51f2183bc3be03a605ac4a0895e10e2", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic SpecialCaller(Row row, DoTraverseInterpreter switchSetUp)", "fileName": "src/fitlibrary/traverse/workflow/caller/SpecialCaller.java", "methodNumberAfterChange": 0, "commitBeforeChange": "1a9b02fce576bf8c0ae1342055a0c5082b525445", "diff": ["+\t\tif (specialMethod != null && LazySpecial.class.isAssignableFrom(specialMethod.getReturnType())) {\r", "+\t\t\ttry {\r", "+\t\t\t\tOption<LazySpecial> lazyOption = (Option<LazySpecial>) run(row,new TestResults());\r", "+\t\t\t\tif (lazyOption.isSome())\r", "+\t\t\t\t\tlazySpecial = lazyOption.get();\r", "+\t\t\t\telse\r", "+\t\t\t\t\tspecialMethod = null;\r", "+\t\t\t} catch (Exception e) {\r", "+\t\t\t\tspecialMethod = null;\r", "+\t\t\t}\r", "+\t\t}\r"], "commitAfterChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "signatureAfterChange": "\r \r \tpublic SpecialCaller(Row row, DoTraverseInterpreter switchSetUp)", "id": "e12f3a80800b195ac2311df7834cfb78", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "bdff372177300cfeb96814fae6518e8a", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \tprivate static void checkForAmbiguity(DoCaller[] actions)", "fileName": "src/fitlibrary/traverse/workflow/DispatchRowInFlow.java", "methodNumberAfterChange": 7, "commitBeforeChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "diff": ["-\tprivate static void checkForAmbiguity(DoCaller[] actions) {\r", "+\tprivate static void checkForAmbiguity(DoCaller[] callers) {\r", "-\t\tList<String> valid = new ArrayList<String>();\r", "-\t\tfor (int i = 0; i < actions.length; i++) {\r", "-\t\t\tif (actions[i].isValid()) {\r", "-\t\t\t\tString ambiguityErrorMessage = actions[i].ambiguityErrorMessage();\r", "-\t\t\t\tvalid.add(ambiguityErrorMessage);\r", "-\t\t\t\tmessage += AND+ambiguityErrorMessage;\r", "+\t\tint valids = 0;\r", "+\t\tboolean locallyAmbiguous = false;\r", "+\t\tfor (int i = 0; i < callers.length; i++) {\r", "+\t\t\tDoCaller caller = callers[i];\r", "+\t\t\tif (caller.isValid()) {\r", "+\t\t\t\tvalids++;\r", "+\t\t\t\tmessage += AND+caller.ambiguityErrorMessage();\r", "+\t\t\t} else if (caller.isAmbiguous()) {\r", "+\t\t\t\tlocallyAmbiguous = true;\r", "+\t\t\t\tmessage += AND+caller.ambiguityErrorMessage();\r", "-\t\tif (valid.size() > 1)\r", "+\t\tif (locallyAmbiguous || valids > 1)\r"], "commitAfterChange": "6e2fd68caab2f02de2d8c7d77899562c496a4b1d", "signatureAfterChange": "\r \tprivate static void checkForAmbiguity(DoCaller[] callers)", "id": "7085ac4e6624271b8f17765c4d3b72e5", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 22, "signatureBeforeChange": "\r \tprivate void addObject(Object object, List<Object> accumulatingObjects)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 20, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tprivate void addObject(Object object, List<Object> accumulatingObjects) {\r", "-\t\tif (accumulatingObjects.contains(object))\r", "-\t\t\treturn;\r", "-\t\taccumulatingObjects.add(object);\r", "-\t\tif (object instanceof DomainAdapter)\r", "-\t\t\taddObject(((DomainAdapter)object).getSystemUnderTest(),accumulatingObjects);\r", "+\t@Override\r", "+\tpublic void select(String name) {\r", "+\t\tscopeStack.select(name);\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \t@Override\r \tpublic void select(String name)", "id": "b7167e3e2a59af1d40e3fd9e0fc287c7", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "7a1a07ba7c220f3fdbeca98f8ddc0e6e", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
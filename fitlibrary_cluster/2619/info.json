{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \tprivate static void checkForAmbiguity(DoCaller[] actions)", "fileName": "src/fitlibrary/traverse/workflow/DispatchRowInFlow.java", "methodNumberAfterChange": 7, "commitBeforeChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "diff": ["-\tprivate static void checkForAmbiguity(DoCaller[] actions) {\r", "+\tprivate static void checkForAmbiguity(DoCaller[] callers) {\r", "-\t\tList<String> valid = new ArrayList<String>();\r", "-\t\tfor (int i = 0; i < actions.length; i++) {\r", "-\t\t\tif (actions[i].isValid()) {\r", "-\t\t\t\tString ambiguityErrorMessage = actions[i].ambiguityErrorMessage();\r", "-\t\t\t\tvalid.add(ambiguityErrorMessage);\r", "-\t\t\t\tmessage += AND+ambiguityErrorMessage;\r", "+\t\tint valids = 0;\r", "+\t\tboolean locallyAmbiguous = false;\r", "+\t\tfor (int i = 0; i < callers.length; i++) {\r", "+\t\t\tDoCaller caller = callers[i];\r", "+\t\t\tif (caller.isValid()) {\r", "+\t\t\t\tvalids++;\r", "+\t\t\t\tmessage += AND+caller.ambiguityErrorMessage();\r", "+\t\t\t} else if (caller.isAmbiguous()) {\r", "+\t\t\t\tlocallyAmbiguous = true;\r", "+\t\t\t\tmessage += AND+caller.ambiguityErrorMessage();\r", "-\t\tif (valid.size() > 1)\r", "+\t\tif (locallyAmbiguous || valids > 1)\r"], "commitAfterChange": "6e2fd68caab2f02de2d8c7d77899562c496a4b1d", "signatureAfterChange": "\r \tprivate static void checkForAmbiguity(DoCaller[] callers)", "id": "7085ac4e6624271b8f17765c4d3b72e5", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r \tpublic CalledMethodTarget findGetterUpContextsToo(TypedObject typedObject, Evaluator evaluator, String propertyName, boolean considerContext)", "fileName": "src/fitlibrary/closure/LookupMethodTargetStandard.java", "methodNumberAfterChange": 13, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\tCalledMethodTarget target = typedObject.optionallyFindGetterOnTypedObject(propertyName,evaluator);\r", "-\t\tif (considerContext && target == null)\r", "-\t\t\ttarget = searchForMethodTargetUpOuterContext(propertyName,evaluator.getNextOuterContext(),evaluator);\r", "+\t\tCalledMethodTarget target;\r", "+\t\tif (considerContext)\r", "+\t\t\ttarget = searchForMethodTargetUpOuterContext(propertyName,evaluator);\r", "+\t\telse\r", "+\t\t\ttarget =  typedObject.new_optionallyFindGetterOnTypedObject(propertyName,evaluator);\r", "-\t\tString getMethodName = ExtendedCamelCase.camel(\"get \"+propertyName);\r", "-\t\tthrow new MissingMethodException(signatures(\"public ResultType \"+ getMethodName+\"() { }\"),identifiedClassesInSUTChain(typedObject.getSubject()));\r", "+\t\tList<Class<?>> possibleClasses = new ArrayList<Class<?>>();\r", "+\t\tif (considerContext)\r", "+\t\t\tpossibleClasses = scopeOf(evaluator).possibleClasses();\r", "+\t\telse\r", "+\t\t\tpossibleClasses.add(typedObject.getSubject().getClass());\r", "+\t\tthrow new MissingMethodException(signatures(\"public ResultType \"+ camel(\"get \"+propertyName)+\"() { }\"),possibleClasses);\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic CalledMethodTarget findGetterUpContextsToo(TypedObject typedObject, Evaluator evaluator, String propertyName, boolean considerContext)", "id": "82f75f929535258628e076edb82cef97", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "47626df000a6379eecd95d4f3e726c8c", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tprivate void runTable(Table table, TestResults testResults)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 5, "commitBeforeChange": "a6c1e5e7a0e2d59a2e0ed7586d0e7ddd7317f579", "diff": ["-\t\t\tif (row.at(0).hadError()) {\r", "-\t\t\t\t// Already failed due to plain text problems\r", "-\t\t\t} else if (runtime.isAbandoned(testResults)) {\r", "+\t\t\tif (runtime.isAbandoned(testResults)) {\r", "-\t\t\t    \t\t} else {\r", "-\t\t\t\t\t\t\tif (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "-\t\t\t\t\t\t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t\t\t\t\t\treturn;// have finished table\r", "-\t\t\t\t\t\t\t} else if (subject instanceof DoEvaluator) {\r", "-\t\t\t\t\t\t\t\tpushOnScope(typedResult,row,testResults);\r", "-\t\t\t\t\t\t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "-\t\t\t\t\t\t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "-\t\t\t\t\t\t\t\treturn; // have finished table\r", "-\t\t\t\t\t\t\t} else if (subject instanceof Fixture) {\r", "-\t\t\t\t\t\t\t\tTable remainingTable = tableFromHere(table, rowNo).asTableOnParse();\r", "-\t\t\t\t\t\t\t\tflowEvaluator.fitHandler().doTable((Fixture) subject,remainingTable,testResults,flowEvaluator);\r", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r", "-\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, remainingTable.at(i));\r", "-\t\t\t\t\t\t\t\treturn; // have finished table\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t}\r", "+\t\t\t    \t\t} else if (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "+\t\t\t    \t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "+\t\t\t    \t\t\treturn;// have finished table\r", "+\t\t\t    \t\t} else if (subject instanceof DoEvaluator) {\r", "+\t\t\t    \t\t\tpushOnScope(typedResult,row,testResults);\r", "+\t\t\t    \t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "+\t\t\t    \t\t\thandleEvaluator(typedResult, (Evaluator) subject, rowNo, table, testResults);\r", "+\t\t\t    \t\t\treturn; // have finished table\r", "+\t\t\t    \t\t} else if (subject instanceof Fixture) {\r", "+\t\t\t    \t\t\tTable remainingTable = tableFromHere(table, rowNo).asTableOnParse();\r", "+\t\t\t    \t\t\tflowEvaluator.fitHandler().doTable((Fixture) subject,remainingTable,testResults,flowEvaluator);\r", "+\t\t\t    \t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r", "+\t\t\t    \t\t\t\ttable.replaceAt(rowNo+i, remainingTable.at(i));\r", "+\t\t\t    \t\t\treturn; // have finished table\r", "+\t\t\t    \t\t}\r"], "commitAfterChange": "3dcd3b89a93a94255040ce519f06a01a05e62807", "signatureAfterChange": "\r \tprivate void runTable(Table table, TestResults testResults)", "id": "98198078ecfa5f1dfaeb76cd0d1121bc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 4, "commitBeforeChange": "8655c08986fab4cb3523c8934e8765739689b282", "diff": ["-\t\t\t    \t\t} else if (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "-\t\t\t    \t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, testResults);\r", "-\t\t\t    \t\t\treturn;// have finished table\r", "-\t\t\t    \t\t} else if (subject instanceof DoEvaluator) {\r", "-\t\t\t    \t\t\tpushOnScope(typedResult,row,testResults);\r", "-\t\t\t    \t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "-\t\t\t    \t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, testResults);\r", "-\t\t\t    \t\t\treturn; // have finished table\r", "-\t\t\t    \t\t} else if (subject instanceof Fixture) {\r", "-\t\t\t    \t\t\tflowEvaluator.fitHandler().doTable((Fixture) subject,TableFactory.table(row),testResults,flowEvaluator);\r", "-\t\t\t    \t\t\treturn; // have finished table\r", "-\t\t\t    \t\t}\r", "+\t\t\t    \t\t} else {\r", "+\t\t\t\t\t\t\tTable restOfTable = rowNo == 0 ? table : table.fromAt(rowNo);\r", "+\t\t\t\t\t\t\tif (subject instanceof CollectionSetUpTraverse || subject instanceof SetUpFixture) {\r", "+\t\t\t\t\t\t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, restOfTable,testResults);\r", "+\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "+\t\t\t\t\t\t\t\t\tfor (int i = 0; i < restOfTable.size(); i++)\r", "+\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, restOfTable.at(i));\r", "+\t\t\t\t\t\t\t\treturn;// have finished table\r", "+\t\t\t\t\t\t\t} else if (subject instanceof DoEvaluator) {\r", "+\t\t\t\t\t\t\t\tpushOnScope(typedResult,row,testResults);\r", "+\t\t\t\t\t\t\t} else if (subject instanceof Evaluator) { // Calculate, etc\r", "+\t\t\t\t\t\t\t\thandleOtherEvaluator(typedResult,(Evaluator)subject, row, restOfTable, testResults);\r", "+\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "+\t\t\t\t\t\t\t\t\tfor (int i = 0; i < restOfTable.size(); i++)\r", "+\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, restOfTable.at(i));\r", "+\t\t\t\t\t\t\t\treturn; // have finished table\r", "+\t\t\t\t\t\t\t} else if (subject instanceof Fixture) {\r", "+\t\t\t\t\t\t\t\tTable remainingTable = restOfTable.asTableOnParse();\r", "+\t\t\t\t\t\t\t\tflowEvaluator.fitHandler().doTable((Fixture) subject,remainingTable,testResults,flowEvaluator);\r", "+\t\t\t\t\t\t\t\tif (restOfTable != table)\r", "+\t\t\t\t\t\t\t\t\tfor (int i = 0; i < remainingTable.size(); i++)\r", "+\t\t\t\t\t\t\t\t\t\ttable.replaceAt(rowNo+i, remainingTable.at(i));\r", "+\t\t\t\t\t\t\t\treturn; // have finished table\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r"], "commitAfterChange": "45cd4c7886612af0bbcf0d9d5705be6bd83dc738", "signatureAfterChange": "\r \tpublic void runTable(Table table, ITableListener tableListener)", "id": "bea7036173d0946c3ebb367218dd58e1", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "1da42924b4b34cf84ddc1f52963b3b83", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
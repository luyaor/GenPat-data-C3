{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tpublic TestResults doTables(Tables theTables)", "fileName": "src/fitlibrary/suite/BatchFitLibrary.java", "methodNumberAfterChange": 4, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\tpublic TestResults doTables(Tables theTables) {\r", "+\t}\r", "+\tpublic TestResults doTables(TablesOnParse theTables) {\r", "-\t\tif (RecordDynamicVariables.recording()) {\r", "+\t\tDynamicVariablesRecording recorder = doFlow.getRuntimeContext().getDynamicVariableRecorder();\r", "+\t\tif (recorder.isRecording()) {\r", "-\t\t\t\tRecordDynamicVariables.write();\r", "+\t\t\t\trecorder.write();\r", "-\t\t\t\tTable errorTable = new Table(new Row(\"note\",ParseNode.label(\"Problem on writing property file:\")+\"<hr/>\"+e.getMessage()));\r", "+\t\t\t\tTableOnParse errorTable = new TableOnParse(new RowOnParse(\"note\",ParseNode.label(\"Problem on writing property file:\")+\"<hr/>\"+e.getMessage()));\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tpublic TestResults doTables(TablesOnParse theTables)", "id": "19ba6dbaff029c765280d6b4089b7acc", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 14, "signatureBeforeChange": "\r     public void invokeAndCheckForSpecial(IRow row, ICell expectedCell, TestResults testResults, IRow fullRow, ICell specialCell)", "fileName": "src/fitlibrary/closure/CalledMethodTarget.java", "methodNumberAfterChange": 14, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-    public void invokeAndCheckForSpecial(IRow row, ICell expectedCell, TestResults testResults, IRow fullRow, ICell specialCell) {\r", "+    public void invokeAndCheckForSpecial(Row row, Cell expectedCell, TestResults testResults, Row fullRow, Cell specialCell) {\r", "-\t\t\tif (RecordDynamicVariables.recording() && expectedCell.unresolved(evaluator)) {\r", "+\t\t\tDynamicVariablesRecording recorder = evaluator.getRuntimeContext().getDynamicVariableRecorder();\r", "+\t\t\tif (recorder.isRecording() && expectedCell.unresolved(evaluator)) {\r", "-            \t\tRecordDynamicVariables.record(key, resultString);\r", "+            \t\trecorder.record(key,resultString);\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r     public void invokeAndCheckForSpecial(Row row, Cell expectedCell, TestResults testResults, Row fullRow, Cell specialCell)", "id": "6088ca6b333d4c7d5350a4540456affe", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "00f8ada38dda03e92399fb7bb0db0ba5", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
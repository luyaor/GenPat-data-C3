{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "    public void enter() throws Exception", "fileName": "src/fit/ActionFixture.java", "methodNumberAfterChange": 2, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void enter() throws Exception {", "-    Method method = method(1);", "-    Class<?> type = method.getParameterTypes()[0];", "-    final Parse argumentCell = cells.more.more;", "-    if (argumentCell == null)", "-      throw new FitFailureException(\"You must specify an argument.\");", "-    String text = argumentCell.text();", "-    Object[] args;", "-    try {", "-      args = new Object[]{TypeAdapter.on(actor, type).parse(text)};", "-    }", "-    catch (NumberFormatException e) {", "-      throw new CouldNotParseFitFailureException(text, type.getName());", "-    }", "-    method.invoke(actor, args);", "-  }", "+\tpublic void enter() throws Exception {", "+\t\tMethod method = method(1);", "+\t\tClass<?> type = method.getParameterTypes()[0];", "+\t\tfinal Parse argumentCell = cells.more.more;", "+\t\tif (argumentCell == null)", "+\t\t\tthrow new FitFailureException(\"You must specify an argument.\");", "+\t\tString text = argumentCell.text();", "+\t\ttry {", "+\t\t\tObject[] args2 = new Object[] { TypeAdapter.on(actor, type).parse(", "+\t\t\t\t\ttext) };", "+\t\t\tmethod.invoke(actor, args2);", "+\t\t} catch (NumberFormatException e) {", "+\t\t\tthrow new CouldNotParseFitFailureException(text, type.getName());", "+\t\t}", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic void enter() throws Exception", "id": "2256f4fe991feccd056d59124bfcbaad", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 6, "signatureBeforeChange": "    protected Method method(String test, int args) throws NoSuchMethodException", "fileName": "src/fit/ActionFixture.java", "methodNumberAfterChange": 6, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  protected Method method(String test, int args) throws NoSuchMethodException {", "-    if (actor == null)", "-      throw new FitFailureException(\"You must start a fixture using the 'start' keyword.\");", "-    Method methods[] = actor.getClass().getMethods();", "-    Method result = null;", "-    for (int i = 0; i < methods.length; i++) {", "-      Method m = methods[i];", "-      if (m.getName().equals(test) && m.getParameterTypes().length == args) {", "-        if (result == null) {", "-          result = m;", "-        } else {", "-          throw new FitFailureException(\"You can only have one \" + test + \"(arg) method in your fixture.\");", "-        }", "-      }", "-    }", "-    if (result == null) {", "-      throw new NoSuchMethodFitFailureException(test);", "-    }", "-    return result;", "-  }", "+\tprotected Method method(String test, int args2) {", "+\t\tif (actor == null)", "+\t\t\tthrow new FitFailureException(", "+\t\t\t\t\t\"You must start a fixture using the 'start' keyword.\");", "+\t\tMethod methods[] = actor.getClass().getMethods();", "+\t\tMethod result = null;", "+\t\tfor (int i = 0; i < methods.length; i++) {", "+\t\t\tMethod m = methods[i];", "+\t\t\tif (m.getName().equals(test)", "+\t\t\t\t\t&& m.getParameterTypes().length == args2) {", "+\t\t\t\tif (result == null) {", "+\t\t\t\t\tresult = m;", "+\t\t\t\t} else {", "+\t\t\t\t\tthrow new FitFailureException(\"You can only have one \"", "+\t\t\t\t\t\t\t+ test + \"(arg) method in your fixture.\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (result == null) {", "+\t\t\tthrow new NoSuchMethodFitFailureException(test);", "+\t\t}", "+\t\treturn result;", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tprotected Method method(String test, int args2)", "id": "4fba7efd230cf82cec978c8d12bde059", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "    protected Method method(int args) throws NoSuchMethodException", "fileName": "src/fit/ActionFixture.java", "methodNumberAfterChange": 5, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  protected Method method(int args) throws NoSuchMethodException {", "-    final Parse methodCell = cells.more;", "-    if (methodCell == null)", "-      throw new FitFailureException(\"You must specify a method.\");", "-    return method(camel(methodCell.text()), args);", "-  }", "+\tprotected Method method(int args2) {", "+\t\tfinal Parse methodCell = cells.more;", "+\t\tif (methodCell == null)", "+\t\t\tthrow new FitFailureException(\"You must specify a method.\");", "+\t\treturn method(camel(methodCell.text()), args2);", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tprotected Method method(int args2)", "id": "ed2a47b151a798b6388eb9571cfe6deb", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "    @Override   public void doTable(Parse table)", "fileName": "src/fit/SemaphoreFixture.java", "methodNumberAfterChange": 0, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  @Override", "-  public void doTable(Parse table) {", "-    String[] args = this.getArgs();", "-    doActionOnSemaphore(args[1], args[0], table.at(0, 0));", "-    super.doTable(table);", "-  }", "+\t@Override", "+\tpublic void doTable(Parse table) {", "+\t\tString[] args2 = this.getArgs();", "+\t\tdoActionOnSemaphore(args2[1], args2[0], table.at(0, 0));", "+\t\tsuper.doTable(table);", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \t@Override \tpublic void doTable(Parse table)", "id": "fdc567ed01c79155a0f079fe1b0676dd", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "4aacb1c439315aed684d1240d9be0fe5", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
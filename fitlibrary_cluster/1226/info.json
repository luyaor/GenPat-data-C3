{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 15, "signatureBeforeChange": "\r \r   private void assertInvalidInputException(String[] args, String errorMsg) throws ParseException", "fileName": "src/fit/decorator/IncrementColumnsValueTest.java", "methodNumberAfterChange": 15, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  private void assertInvalidInputException(String[] args, String errorMsg) throws ParseException {\r", "-    try {\r", "-      decorator.setupDecorator(args);\r", "-      fail(\"Should blow up\");\r", "-    } catch (InvalidInputException e) {\r", "-      assertEquals(errorMsg, e.getMessage());\r", "-    }\r", "-  }\r", "+\tprivate void assertInvalidInputException(String[] args, String errorMsg) {\r", "+\t\ttry {\r", "+\t\t\tdecorator.setupDecorator(args);\r", "+\t\t\tfail(\"Should blow up\");\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\tassertEquals(errorMsg, e.getMessage());\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tprivate void assertInvalidInputException(String[] args, String errorMsg)", "id": "38ee13f79619855719bebae51a4606e4", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r   private void assertInvalidInputException(String dataType, String value)", "fileName": "src/fit/decorator/util/DeltaTest.java", "methodNumberAfterChange": 1, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  private void assertInvalidInputException(String dataType, String value) {\r", "-    try {\r", "-      new Delta(dataType, value);\r", "-    } catch (InvalidInputException e) {\r", "-      assertEquals(\"value '\" + value + \"' is not a valid DataType = '\" + dataType + \"'\", e.getMessage());\r", "-    }\r", "-  }\r", "+\t@SuppressWarnings(\"unused\")\r", "+\tprivate void assertInvalidInputException(String dataType, String value) {\r", "+\t\ttry {\r", "+\t\t\tnew Delta(dataType, value);\r", "+\t\t} catch (InvalidInputException e) {\r", "+\t\t\tassertEquals(\"value '\" + value + \"' is not a valid DataType = '\"\r", "+\t\t\t\t\t+ dataType + \"'\", e.getMessage());\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \t@SuppressWarnings(\"unused\")\r \tprivate void assertInvalidInputException(String dataType, String value)", "id": "ebb49638fecf31e1be8f95ec1d424a70", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "6ad70846278ecf23ee495aa79cbda956", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
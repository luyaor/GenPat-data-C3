{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r     public Object interpretRow(Row row, TestResults testResults, Fixture fixtureByName)", "fileName": "src/fitlibrary/traverse/workflow/DoTraverseInterpreter.java", "methodNumberAfterChange": 11, "commitBeforeChange": "1a9b02fce576bf8c0ae1342055a0c5082b525445", "diff": ["-    \tsetExpectedResult(new Boolean(true));\r", "-    \t\tDoCaller[] actions = { \r", "-    \t\t\t\tnew DefinedActionCaller(row, this),\r", "-    \t\t\t\tnew MultiDefinedActionCaller(row, this),\r", "-    \t\t\t\tnew SpecialCaller(row,switchSetUp()),\r", "-    \t\t\t\tnew PostFixSpecialCaller(row,switchSetUp()),\r", "-    \t\t\t\tnew FixtureCaller(fixtureByName),\r", "-    \t\t\t\tnew ActionCaller(row,switchSetUp()) };\r", "-\t\t\tcheckForAmbiguity(actions);\r", "-\t\t\tfor (int i = 0; i < actions.length; i++)\r", "-\t\t\t\tif (actions[i].isValid()) {\r", "-\t\t\t\t\tObject result = actions[i].run(row, testResults);\r", "-\t\t\t\t\tif (testResults.isAbandoned() && !testResults.problems())\r", "-\t\t\t\t\t\trow.ignore(testResults);\r", "-\t\t\t\t\treturn result;\r", "-\t\t\t\t}\r", "-\t\t\tmethodsAreMissing(actions,row.text(0, this));\r", "+    \t\tDoCaller[] actions = createDoCallers(row, fixtureByName);\r", "+    \t\tOption<Object> result = interpretSimpleRow(row,testResults,actions,fixtureByName);\r", "+    \t\tif (result.isSome())\r", "+    \t\t\treturn result.get();\r", "+    \t\tmethodsAreMissing(actions,row.text(0, this),possibleSeq(row));\r"], "commitAfterChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "signatureAfterChange": "\r     public Object interpretRow(Row row, TestResults testResults, Fixture fixtureByName)", "id": "4791624c6f563a47024a36438eddba29", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r     public TypedObject interpretRowBeforeWrapping(Row row, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/DispatchRowInFlow.java", "methodNumberAfterChange": 1, "commitBeforeChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "diff": ["-    public TypedObject interpretRowBeforeWrapping(Row row, TestResults testResults) {\r", "+    public TypedObject interpretRow(Row row, TestResults testResults) {\r", "+    \tDoCaller[] doCallers = createDoCallers(row,sequencing);\r", "-    \t\tOption<TypedObject> result = pickCaller(createDoCallers(row,sequencing), row, testResults);\r", "+    \t\tcheckForAmbiguity(doCallers);\r", "+\t\t\tOption<TypedObject> result = pickAndRunValidCaller(doCallers, row, testResults);\r", "-        \t\t\tOption<TypedObject> seqResult = pickCaller(createDoCallers(row,true), row, testResults);\r", "+        \t\t\tDoCaller[] seqDoCallers = createDoCallers(row,true);\r", "+        \t\t\tcheckForAmbiguity(seqDoCallers);\r", "+\t\t\t\t\tOption<TypedObject> seqResult = pickAndRunValidCaller(seqDoCallers, row, testResults);\r", "-    \t\tOption<String> partialError = pickPartial(createDoCallers(row,sequencing));\r", "+    \t\tOption<String> partialError = pickPartialError(doCallers);\r", "-    \t\tmethodsAreMissing(createDoCallers(row,sequencing),possibleSeq(row));\r", "+    \t\tmethodsAreMissing(doCallers,possibleSeq(row));\r"], "commitAfterChange": "6e2fd68caab2f02de2d8c7d77899562c496a4b1d", "signatureAfterChange": "\r     public TypedObject interpretRow(Row row, TestResults testResults)", "id": "a1700fddfd1253bef4f50eba5c1a9a6f", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "dc90267cd07c0d47d274610c53b30758", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 75, "signatureBeforeChange": "\r \tpublic void ensure(Row row, TestResults testResults) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 76, "commitBeforeChange": "44a0e3700bd1d17cff7e5d246ad3da64c81df532", "diff": ["-\tpublic void ensure(Row row, TestResults testResults) throws Exception {\r", "-\t\texpectedResult = new Boolean(true);\r", "-\t\ttry {\r", "-\t\t    Object result = callMethodInRow(row,testResults, true,row.cell(0));\r", "-\t\t    Boolean resultBoolean = result == null ? Boolean.TRUE : (Boolean) result;\r", "-\t\t    row.cell(0).passOrFail(testResults,resultBoolean.booleanValue());\r", "-\t\t} catch (IgnoredException e) {\r", "-\t\t\t// No result, so ignore\r", "-\t\t} catch (InvocationTargetException e) {\r", "-\t\t\tThrowable embedded = e.getTargetException();\r", "-\t\t\tif (embedded instanceof FitLibraryShowException) {\r", "-\t\t\t\trow.error(testResults, embedded);\r", "-\t\t\t}\r", "-\t\t} catch (Exception e) {\r", "-\t\t    row.cell(0).fail(testResults);\r", "-\t\t}\r", "+//\t}\r", "+\tpublic TwoStageSpecial ensure(final IRow row) throws Exception {\r", "+\t\treturn specialAction.ensure(row);\r"], "commitAfterChange": "9069de478dc17e7793f2685307ecb6fa153f06e7", "signatureAfterChange": "\r \tpublic TwoStageSpecial ensure(final IRow row) throws Exception", "id": "100f00806e5aa6f8bb6a99756140d70c", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 68, "signatureBeforeChange": "\r \tpublic void not(Row row, TestResults testResults) throws Exception", "fileName": "src/fitlibrary/traverse/workflow/DoTraverse.java", "methodNumberAfterChange": 68, "commitBeforeChange": "44a0e3700bd1d17cff7e5d246ad3da64c81df532", "diff": ["-\tpublic void not(Row row, TestResults testResults) throws Exception {\r", "-\t\tCell notCell = row.cell(0);\r", "-\t\texpectedResult = new Boolean(false);\r", "-\t\ttry {\r", "-\t\t\tObject result = callMethodInRow(row,testResults,false,row.cell(0));\r", "-\t\t    if (!(result instanceof Boolean))\r", "-\t\t        notCell.error(testResults,new NotRejectedException());\r", "-\t\t    else if (((Boolean)result).booleanValue())\r", "-\t\t        notCell.fail(testResults);\r", "-\t\t    else\r", "-\t\t        notCell.pass(testResults);\r", "-\t\t} catch (IgnoredException e) {\r", "-\t\t\t// No result, so ignore\r", "-\t\t} catch (FitLibraryException e) {\r", "-\t\t\tif (e instanceof ParseException)\r", "-\t\t\t\tnotCell.pass(testResults);\r", "-\t\t\telse\r", "-\t\t\t\trow.error(testResults,e);\r", "-\t\t} catch (InvocationTargetException e) {\r", "-\t\t\tThrowable embedded = e.getTargetException();\r", "-\t\t\tif (embedded instanceof FitLibraryShowException) {\r", "-\t\t\t\trow.error(testResults, embedded);\r", "-\t\t\t} else\r", "-\t\t\t\tnotCell.pass(testResults);\r", "-\t\t} catch (Exception e) {\r", "-\t\t    notCell.pass(testResults);\r", "-\t\t}\r", "+\tpublic TwoStageSpecial not(final IRow row) throws Exception {\r", "+\t\treturn specialAction.not(row,NotSyle.PASSES_ON_EXCEPION);\r", "+\t}\r"], "commitAfterChange": "9069de478dc17e7793f2685307ecb6fa153f06e7", "signatureAfterChange": "\r \tpublic TwoStageSpecial not(final IRow row) throws Exception", "id": "e57473992d9f645702f9ac5ca73aa557", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "8a7db2d560749db71d83fd7d176974f5", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"]}
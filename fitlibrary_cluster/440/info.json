{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective)", "fileName": "src/fitlibrary/flow/WhatIsInScope.java", "methodNumberAfterChange": 1, "commitBeforeChange": "6c86d5b1959fb6a5e111247cfeaf74970fb9f334", "diff": ["-\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective) {\r", "+\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective, int margin) {\r", "-\t\ts.append(\"<td><table>\");\r", "-\t\tboolean first = true;\r", "-\t\t\t\t\tif (first)\r", "-\t\t\t\t\t\ts.append(\"<tr><td><h4>Action</h4></td>\"+\r", "-\t\t\t\t\t\t\t\t\"<td><h4><span title='The Java return type.'>Returns</span></h4></td>\"+\r", "-\t\t\t\t\t\t\t\t\"<td><h4><span title='Actions that can occur in the rest of the table.'>Following actions</span></h4></td></tr>\\n\");\r", "-\t\t\t\t\tfirst = false;\t\t\t\t\t\r", "-\t\t\t\t\tactionInfo.display(s,returnTypeDisplay(method));\r", "+\t\t\t\t\ts.append(\"<tr><td>\");\r", "+\t\t\t\t\tspanStart(s,margin); //<span style='margin-left:\"+margin+\"px'>\");\r", "+\t\t\t\t\tactionInfo.display(s);\r", "+\t\t\t\t\ts.append(\"</span></td><td><code>\");\r", "+\t\t\t\t\ts.append(returnTypeDisplay(method));\r", "+\t\t\t\t\ts.append(\"</code></td></tr>\");\r", "-\t\t\t\t\tif (actionInfo.compound && !ignoreType(returnType))\r", "-\t\t\t\t\t\taddActions(s,returnType,\"\",true);\r", "+\t\t\t\t\tif (actionInfo.compound && !ignoreType(returnType)) {\r", "+\t\t\t\t\t\ts.append(\"<tr><td colspan=2>\");\r", "+\t\t\t\t\t\tString simpleName = returnType.getSimpleName();\r", "+\t\t\t\t\t\tspan(s,\"Actions for class <code>\"+simpleName+\"</code> in same table:\",\r", "+\t\t\t\t\t\t\t\tmargin+50,\r", "+\t\t\t\t\t\t\t\t\"These actions are for the \"+simpleName+\" produced by the action above.\\n\"+\r", "+\t\t\t\t\t\t\t\t\"They can be used in the following rows of the table that contains the above action.\");\r", "+\t\t\t\t\t\ts.append(\"</td></tr>\");\r", "+\t\t\t\t\t\taddActions(s,returnType,\"\",true,margin+50);\r", "+\t\t\t\t\t}\r", "-\t\ts.append(\"</table></td>\");\r"], "commitAfterChange": "83f84db552d47a75ab94267b635e3306dd137171", "signatureAfterChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective, int margin)", "id": "4b125004c716391189617ba1249ffa74", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String substring, boolean selective)", "fileName": "src/fitlibrary/flow/WhatIsInScope.java", "methodNumberAfterChange": 1, "commitBeforeChange": "abdca5590322cb763a5db1236b7a9c36f3d22653", "diff": ["-\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String substring, boolean selective) {\r", "+\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective) {\r", "+\t\tboolean matchAll = pattern.isEmpty();\r", "+\t\ts.append(\"<tr><td><h4>Action</h4></td><td><h4>Return type</h4></td><td><h4>Following actions</h4></td></tr>\\n\");\r", "-\t\t\tboolean matches = substring.isEmpty() || method.getName().contains(substring);\r", "-\t\t\tif (matches &&\r", "-\t\t\t\t\t!ignoreDoTraverse &&\r", "+\t\t\tif (\t!ignoreDoTraverse &&\r", "+\t\t\t\tClass<?> returnType = method.getReturnType();\r", "+\t\t\t\tString returns = returnType.getSimpleName();\r", "+\t\t\t\tif (returnType == Void.TYPE || returnType == TwoStageSpecial.class)\r", "+\t\t\t\t\treturns = \"\";\r", "-\t\t\t\t\tif (!locallySelective) {\r", "-\t\t\t\t\t\ts.append(\"<tr><td>\" + methodName(method) + \"</td></tr>\\n\");\r", "+\t\t\t\t\tString methodName = methodName(method);\r", "+\t\t\t\t\tString nameWithoutTags = methodName.replaceAll(\"<i>\",\"\").replaceAll(\"</i>\",\"\").replaceAll(\"<b>\",\"\").replaceAll(\"</b>\",\"\");\r", "+\t\t\t\t\tboolean matches = matchAll || nameWithoutTags.contains(pattern);\r", "+\t\t\t\t\tif (!locallySelective && matches) {\r", "+\t\t\t\t\t\ts.append(\"<tr><td>\" + methodName + \"</td><td>\"+returns+\"</td></tr>\\n\");\r", "-\t\t\t\t\tif (action.actionType() == ActionType.PREFIX)\r", "-\t\t\t\t\t\tname += \"action...|\";\r", "-\t\t\t\t\ts.append(\"<tr><td><span class='note' title='\"+action.tooltip()+\"'>\" + name + \"</span></td>\");\r", "-\t\t\t\t\tif (action.actionType() == ActionType.COMPOUND && !method.getReturnType().isPrimitive()) {\r", "-\t\t\t\t\t\taddActions(s, method.getReturnType(),substring,true);\r", "+\t\t\t\t\tString tooltip = action.tooltip();\r", "+\t\t\t\t\tString nameWithoutTags = name.replaceAll(\"<i>\",\"\").replaceAll(\"</i>\",\"\").replaceAll(\"<b>\",\"\").replaceAll(\"</b>\",\"\");\r", "+\t\t\t\t\tboolean matches = matchAll || nameWithoutTags.contains(pattern) || tooltip.contains(pattern);\r", "+\t\t\t\t\tif (matches) {\r", "+\t\t\t\t\t\tif (action.actionType() == ActionType.PREFIX)\r", "+\t\t\t\t\t\t\tname += \"action...|\";\r", "+\t\t\t\t\t\ts.append(\"<tr><td><span class='note' title='\"+tooltip+\"'>\" + name + \"</span></td><td>\"+returns+\"</td>\");\r", "+\t\t\t\t\t\tif (action.actionType() == ActionType.COMPOUND && !ignoreType(returnType)) {\r", "+\t\t\t\t\t\t\taddActions(s,returnType,\"\",true);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\ts.append(\"</tr>\");\r", "-\t\t\t\t\ts.append(\"</tr>\");\r"], "commitAfterChange": "96a06134efc1fc0c7cb135114029544fb0cf938e", "signatureAfterChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective)", "id": "e1cfc766fe9c742c5bcaaae1f8e50703", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "27df0258f538df8e63f286e11482b341", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
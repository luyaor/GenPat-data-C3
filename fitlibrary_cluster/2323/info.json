{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 16, "signatureBeforeChange": "\r \t\t\t@Override\r \t\t\tpublic void run(TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/special/PrefixSpecialAction.java", "methodNumberAfterChange": 6, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\t\treturn new TwoStageSpecial() {\r", "-\t\t\t@Override\r", "-\t\t\tpublic void run(TestResults testResults) {\r", "-\t\t\t\tCell notCell = row.at(0);\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tObject result = target.invokeForSpecial(row.fromAt(2),testResults,false,row.at(0));\r", "-\t\t\t\t    if (!(result instanceof Boolean))\r", "-\t\t\t\t        notCell.error(testResults,new NotRejectedException());\r", "-\t\t\t\t    else if (((Boolean)result).booleanValue())\r", "-\t\t\t\t        notCell.fail(testResults);\r", "-\t\t\t\t    else\r", "-\t\t\t\t        notCell.pass(testResults);\r", "-\t\t\t\t} catch (IgnoredException e) {\r", "-\t\t\t\t\tif (e.getIgnoredException() instanceof FitLibraryShowException)\r", "-\t\t\t\t\t\trow.error(testResults,e.getIgnoredException());\r", "-\t\t\t\t} catch (FitLibraryShowException e) {\r", "-\t\t\t\t\trow.error(testResults,e);\r", "-\t\t\t\t} catch (FitLibraryException e) {\r", "-\t\t\t\t\tif (notStyle == NotSyle.PASSES_ON_EXCEPION)\r", "-\t\t\t\t\t\tnotCell.pass(testResults);\r", "-\t\t\t\t\telse\r", "-\t\t\t\t\t\trow.error(testResults,e);\r", "-\t\t\t\t} catch (InvocationTargetException e) {\r", "-\t\t\t\t\tThrowable embedded = ExceptionHandler.unwrap(e);\r", "-\t\t\t\t\tif (embedded instanceof FitLibraryShowException)\r", "-\t\t\t\t\t\trow.error(testResults, embedded);\r", "-\t\t\t\t\telse if (notStyle == NotSyle.PASSES_ON_EXCEPION)\r", "-\t\t\t\t\t\tnotCell.pass(testResults);\r", "-\t\t\t\t\telse if (notStyle == NotSyle.ERROR_ON_EXCEPION)\r", "-\t\t\t\t\t\trow.error(testResults, embedded);\r", "-\t\t\t\t\telse\r", "-\t\t\t\t\t\tnotCell.pass(testResults);\r", "-\t\t\t\t} catch (Exception e) {\r", "-\t\t\t\t\tif (notStyle == NotSyle.PASSES_ON_EXCEPION)\r", "-\t\t\t\t\t\tnotCell.pass(testResults);\r", "-\t\t\t\t\telse\r", "-\t\t\t\t\t\trow.error(testResults,e);\r", "-\t\t\t\t}\r", "+\t}\r", "+\tprotected void reportBoolean(Object result, Cell cell, TestResults testResults) {\r", "+\t\tif (result instanceof Boolean)\r", "+\t\t\tif (((Boolean)result).booleanValue())\r", "+\t\t\t\tcell.pass(testResults);\r", "+\t\t\telse\r", "+\t\t\t\tcell.fail(testResults);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \tprotected void reportBoolean(Object result, Cell cell, TestResults testResults)", "id": "5c8942658bc80ef0f82523fa6a217a9e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic SpecialCaller(Row row, DoTraverseInterpreter switchSetUp)", "fileName": "src/fitlibrary/traverse/workflow/caller/SpecialCaller.java", "methodNumberAfterChange": 0, "commitBeforeChange": "2d301584c2e3f6bff95df3a23d038d3c26d71f76", "diff": ["-\tpublic SpecialCaller(Row row, DoTraverseInterpreter switchSetUp) {\r", "-\t\tmethodName = row.text(0,switchSetUp);\r", "-\t\tspecialMethod = PlugBoard.lookupTarget.findSpecialMethod(switchSetUp, methodName);\r", "-\t\tif (specialMethod != null && LazySpecial.class.isAssignableFrom(specialMethod.getReturnType())) {\r", "+\tpublic SpecialCaller(IRow row, Evaluator evaluator, LookupMethodTarget lookupTarget) {\r", "+\t\tmethodName = row.text(0,evaluator);\r", "+\t\tspecialMethod = lookupTarget.findSpecialMethod(evaluator, methodName);\r", "+\t\tif (specialMethod != null && Option.class.isAssignableFrom(specialMethod.getReturnType())) {\r", "-\t\t\t\tOption<LazySpecial> lazyOption = (Option<LazySpecial>) run(row,new TestResults());\r", "+\t\t\t\tOption<LazySpecial> lazyOption = (Option<LazySpecial>) invokeSpecialMethod(row,new TestResults());\r", "+\t\t\t} catch (InvocationTargetException e) {\r", "+\t\t\t\tspecialMethod = null;\r", "+\t\t\t\tif (e.getCause() instanceof Exception)\r", "+\t\t\t\t\tsetProblem((Exception)e.getCause());\r", "+\t\t\t} catch (MissingMethodException e) {\r", "+\t\t\t\tspecialMethod = null;\r", "+\t\t\t\tsetProblem(e);\r", "+\t\t\t\te.printStackTrace();\r"], "commitAfterChange": "12148fc44971a9675907d16fb4f5c02ec935596d", "signatureAfterChange": "\r \r \tpublic SpecialCaller(IRow row, Evaluator evaluator, LookupMethodTarget lookupTarget)", "id": "6b22cedd015e92bc7d99dd0a61947d79", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "83898a5b7c62d50ad17716d45a41ebbb", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
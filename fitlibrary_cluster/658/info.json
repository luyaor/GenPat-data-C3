{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \t@Override\r \tpublic String toString()", "fileName": "src/fitlibrary/definedAction/ParameterBinder.java", "methodNumberAfterChange": 5, "commitBeforeChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "diff": ["-\t}\r", "-\t@Override\r", "-\tpublic String toString() {\r", "-\t\treturn \"MacroSubstitution[\"+tables.toString()+\"]\";\r", "+\tpublic void bindUni(List<Object> actualArgs, DynamicVariables dynamicVariables) {\r", "+\t\tif (actualArgs.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+actualArgs.size());\r", "+\t\tfor (int c = 0; c < formalParameters.size(); c++)\r", "+\t\t\tdynamicVariables.putParameter(formalParameters.get(c),actualArgs.get(c));\r"], "commitAfterChange": "c9a02fbef6bcaff0b0f1bdcd96e45453e110ead4", "signatureAfterChange": "\r \tpublic void bindUni(List<Object> actualArgs, DynamicVariables dynamicVariables)", "id": "4edef53d7e158d8aa2474ed46ac7933e", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tprivate void handleOtherEvaluator(TypedObject typedResult, Evaluator evaluator, Row row, Table remainingTable, TestResults testResults)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 6, "commitBeforeChange": "45cd4c7886612af0bbcf0d9d5705be6bd83dc738", "diff": ["+\t}\r", "+\tprivate void handleEvaluator(TypedObject typedResult, Evaluator subject,\r", "+\t\t\tint rowNo, Table table, TestResults testResults) {\r", "+\t\tTable restOfTable = tableFromHere(table, rowNo);\r", "+\t\tint rest = restOfTable.size();\r", "+\t\tRow row = table.at(rowNo);\r", "+\t\tsetRuntimeContextOf(subject);\r", "+\t\tcallSetUpSutChain(subject,row,testResults);\r", "+\t\tif (!(subject instanceof DefineAction)) // Don't want this as the storytest's main fixture/object\r", "+\t\t\tpushOnScope(typedResult,row,testResults);\r", "+\t\tsubject.interpretAfterFirstRow(restOfTable, testResults);\r", "+\t\tsetUpTearDown.callTearDownSutChain(subject, row, testResults);\r", "+\t\tif (restOfTable != table && restOfTable.size() > rest)\r", "+\t\t\tfor (int i = rest; i < restOfTable.size(); i++)\r", "+\t\t\t\ttable.add(restOfTable.at(i));\r", "-\t}\r", "-\tprivate void handleOtherEvaluator(TypedObject typedResult, Evaluator evaluator, Row row, Table remainingTable, TestResults testResults) {\r", "-\t\tsetRuntimeContextOf(evaluator);\r", "-\t\tcallSetUpSutChain(evaluator,row,testResults);\r", "-\t\tif (!(evaluator instanceof DefineAction)) // Don't want this as the storytest's main fixture/object\r", "-\t\t\tpushOnScope(typedResult,row,testResults);\r", "-\t\tevaluator.interpretAfterFirstRow(remainingTable, testResults);\r", "-\t\tsetUpTearDown.callTearDownSutChain(evaluator, row, testResults);\r"], "commitAfterChange": "ab6a629e809e58ed4ed57aa45aeb30760bda0f95", "signatureAfterChange": "\r \tprivate void handleEvaluator(TypedObject typedResult, Evaluator subject,\r \t\t\tint rowNo, Table table, TestResults testResults)", "id": "d6c010fec8df72b23cd051cbb677d070", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "3dca14a2592337d72a26a74d9e3050a6", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
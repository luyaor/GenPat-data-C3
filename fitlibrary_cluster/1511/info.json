{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "fileName": "src/fitlibrary/traverse/workflow/caller/MultiDefinedActionTraverse.java", "methodNumberAfterChange": 1, "commitBeforeChange": "fc8e697e0b6ce0d0c19d98f2b34d0b0b9e21ffaa", "diff": ["-\t\tif (table.size() < 3)\r", "-\t\t\tthrow new FitLibraryException(\"Missing data rows in table\");\r", "-\t\truntime().pushLocal();\r", "-\t\tRow parameterRow = table.row(1);\r", "-\t\tmultiParameterSubstitution.verifyParameters(parameterRow,this);\r", "-\t\tparameterRow.pass(testResults);\r", "-\t\tfor (int r = 2; r < table.size(); r++) {\r", "-\t\t\tRow row = table.row(r);\r", "-\t\t\tif (testResults.isAbandoned())\r", "-\t\t\t\trow.ignore(testResults);\r", "-\t\t\telse\r", "-\t\t\t\ttry {\r", "-\t\t\t\t\tTables body = multiParameterSubstitution.getCopyOfBody();\r", "-\t\t\t\t\tTestResults subTestResults = new TestResults(testResults);\r", "+\t\ttry {\r", "+\t\t\tif (table.size() < 3)\r", "+\t\t\t\tthrow new FitLibraryException(\"Missing data rows in table\");\r", "+\t\t\tgetRuntimeContext().pushLocal();\r", "+\t\t\tRow parameterRow = table.row(1);\r", "+\t\t\tmultiParameterSubstitution.verifyParameters(parameterRow,this);\r", "+\t\t\tparameterRow.pass(testResults);\r", "+\t\t\tfor (int r = 2; r < table.size(); r++) {\r", "+\t\t\t\tRow row = table.row(r);\r", "+\t\t\t\tif (testResults.isAbandoned())\r", "+\t\t\t\t\trow.ignore(testResults);\r", "+\t\t\t\telse\r", "-\t\t\t\t\t\tCallManager.startCall(multiParameterSubstitution);\r", "-\t\t\t\t\t\tmultiParameterSubstitution.bind(parameterRow,row,getDynamicVariables(),this);\r", "-\t\t\t\t\t\trunBody(body,testResults,subTestResults);\r", "-\t\t\t\t\t\tcolourReport(row, testResults, subTestResults);\r", "-\t\t\t\t\t} finally {\r", "-\t\t\t\t\t\tCallManager.endCall(multiParameterSubstitution);\r", "+\t\t\t\t\t\tTables body = multiParameterSubstitution.getCopyOfBody();\r", "+\t\t\t\t\t\tTestResults subTestResults = new TestResults(testResults);\r", "+\t\t\t\t\t\ttry {\r", "+\t\t\t\t\t\t\tCallManager.startCall(multiParameterSubstitution);\r", "+\t\t\t\t\t\t\tmultiParameterSubstitution.bind(parameterRow,row,getDynamicVariables(),this);\r", "+\t\t\t\t\t\t\trunBody(body,testResults,subTestResults);\r", "+\t\t\t\t\t\t\tcolourReport(row, testResults, subTestResults);\r", "+\t\t\t\t\t\t} finally {\r", "+\t\t\t\t\t\t\tCallManager.endCall(multiParameterSubstitution);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (runtime.toExpandDefinedActions() || subTestResults.problems() || testResults.isAbandoned())\r", "+\t\t\t\t\t\t\trow.addCell(new Cell(\"Defined action call:\",body));\r", "+\t\t\t\t\t\telse if (CallManager.readyToShow())\r", "+\t\t\t\t\t\t\trow.addCell(new Cell(new Tables(CallManager.getShowsTable())));\r", "+\t\t\t\t\t} catch (Exception e) {\r", "+\t\t\t\t\t\trow.error(testResults, e);\r", "-\t\t\t\t\tif (doTraverse.toExpandDefinedActions() || subTestResults.problems() || testResults.isAbandoned())\r", "-\t\t\t\t\t\trow.addCell(new Cell(\"Defined action call:\",body));\r", "-\t\t\t\t\telse if (CallManager.readyToShow())\r", "-\t\t\t\t\t\trow.addCell(new Cell(new Tables(CallManager.getShowsTable())));\r", "-\t\t\t\t} catch (Exception e) {\r", "-\t\t\t\t\trow.error(testResults, e);\r", "-\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tgetRuntimeContext().popLocal();\r", "+\t\t} catch (Exception e) {\r", "+\t\t\ttable.error(testResults, e);\r", "-\t\truntime().popLocal();\r"], "commitAfterChange": "0fcaf42e2a6c9a3f5f224f6ee86c84fd493c8818", "signatureAfterChange": "\r \t@Override\r \tpublic Object interpretAfterFirstRow(Table table, TestResults testResults)", "id": "6553ed15d9733f32439d6d76622ae106", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 3, "signatureBeforeChange": "\r \tpublic void run()", "fileName": "src/fitlibrary/flow/actor/DoFlowActor.java", "methodNumberAfterChange": 3, "commitBeforeChange": "d12d5e6196b5f1255b0419761d9c3de85d1c3d44", "diff": ["+\r", "-\t\twhile (true) {\r", "-\t\t\tFlowAction action = queue.remove();\r", "-\t\t\taction.run();\r", "-\t\t\tif (action.isDone()) {\r", "-\t\t\t\tSystem.out.println(\"DoFlowActor thread done.\");\r", "-\t\t\t\treturn;\r", "+\t\ttry {\r", "+\t\t\twhile (true) {\r", "+\t\t\t\tFlowAction action;\r", "+\t\t\t\taction = queue.take();\r", "+\t\t\t\taction.run();\r", "+\t\t\t\tif (action.isDone()) {\r", "+\t\t\t\t\tSystem.out.println(\"DoFlowActor thread done.\");\r", "+\t\t\t\t\treturn;\r", "+\t\t\t\t}\r", "+\t\t} catch (InterruptedException e) {\r", "+\t\t\te.printStackTrace();\r"], "commitAfterChange": "a3ae9d648f5a9065636c2668ccd32d098a4ba7e0", "signatureAfterChange": "\r \r \tpublic void run()", "id": "dda8c7f8fcdf6f2e4f9296d20f67fc65", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "5787501cccd993a839f4ee8eae002856", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"]}
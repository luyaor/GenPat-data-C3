{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tprotected void addTableToBetterShowDifferences(Parse table, Parse actual, Parse expected)", "fileName": "src/fitlibrary/spec/SpecifyFixture.java", "methodNumberAfterChange": 22, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t}\r", "-\tprotected void addTableToBetterShowDifferences(Parse table, Parse actual, Parse expected) {\r", "-\t\tParse end = table.last();\r", "-\t\tParse cells1 = new Parse(\"td\",\"fitlibrary.CommentFixture\",null,null);\r", "-\t\tParse cells2 = new Parse(\"td\",\"actual\",null,new Parse(\"td\",\"expected\",null,null));\r", "-\t\tParse cells3 = new Parse(\"td\",show(actual),null,new Parse(\"td\",show(expected),null,null));\r", "-\t\tParse rows = new Parse(\"tr\",\"\",cells1 ,new Parse(\"tr\",\"\",cells2 ,new Parse(\"tr\",\"\",cells3 ,null)));\r", "-\t\tend.more = new Parse(\"table\",\"\",rows ,null);\r", "-\t}\r", "+\t\t}\r", "+\t\tprivate String optionalEscapedRow(String actualText, String expectedText) {\r", "+\t\t\tString actualEscaped = escape(actualText);\r", "+\t\t\tString expectedEscaped = escape(expectedText);\r", "+\t\t\tif (actualEscaped.equals(actualText) && expectedEscaped.equals(expectedText))\r", "+\t\t\t\treturn \"\";\r", "+\t\t\treturn row(actualEscaped,expectedEscaped);\r", "+\t\t}\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t\tprivate String optionalEscapedRow(String actualText, String expectedText)", "id": "3ebb2e209e1170547a3f070a9837c5e6", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 8, "signatureBeforeChange": "\r \tpublic Closure findMethodClosure(String name, int argCount,\r \t\t\tboolean includeSut)", "fileName": "src/fitlibrary/typed/NonGenericTypedObject.java", "methodNumberAfterChange": 6, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["+\tprivate Option<Closure> new_findMethodClosure(String name, int argCount) {\r", "+\t\tClosure methodClosure = lookupClosure.findMethodClosure(this,name, argCount);\r", "+\t\t\treturn None.none();\r", "+\t\treturn new Some<Closure>(methodClosure);\r", "-\tpublic Closure findMethodClosure(String name, int argCount,\r", "-\t\t\tboolean includeSut) {\r", "-\t\tif (subject == null)\r", "-\t\t\treturn null;\r", "-\t\tClosure methodClosure = PlugBoard.lookupClosure.findMethodClosure(this,\r", "-\t\t\t\tname, argCount);\r", "-\t\tif (methodClosure == null && subject instanceof Evaluator) {\r", "-\t\t\tEvaluator evaluator = (Evaluator) subject;\r", "-\t\t\tObject sut = evaluator.getSystemUnderTest();\r", "-\t\t\tif (sut != null && (includeSut || sut instanceof DomainAdapter))\r", "-\t\t\t\tmethodClosure = evaluator.getTypedSystemUnderTest()\r", "-\t\t\t\t\t\t.findMethodClosure(name, argCount, includeSut);\r", "-\t\t}\r", "-\t\tif (methodClosure == null && subject instanceof DomainAdapter) {\r", "-\t\t\tDomainAdapter domainAdapter = (DomainAdapter) subject;\r", "-\t\t\tObject nestedSystemUnderTest = domainAdapter.getSystemUnderTest();\r", "-\t\t\tif (nestedSystemUnderTest != null\r", "-\t\t\t\t\t&& (includeSut || nestedSystemUnderTest instanceof DomainAdapter))\r", "-\t\t\t\treturn asTypedObject(nestedSystemUnderTest).findMethodClosure(\r", "-\t\t\t\t\t\tname, argCount, includeSut);\r", "-\t\t}\r", "-\t\treturn methodClosure;\r", "-\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate Option<Closure> new_findMethodClosure(String name, int argCount)", "id": "929920fd6baad6e29025f7fb32a23295", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "295187f62095530616d1ef31d0562cdd", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
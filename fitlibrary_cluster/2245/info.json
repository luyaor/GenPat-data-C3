{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tprivate void expectTwoRowsInFirstCellOfTable()", "fileName": "test/fitlibrary/flow/TestDoFlowWithNestedTables.java", "methodNumberAfterChange": 1, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\t\tallowing(tables).elementAt(0); will(returnValue(table1));\r", "+\t\t\tallowing(tables).at(0); will(returnValue(table1));\r", "-\t\t\tallowing(table1).elementAt(0); will(returnValue(row1));\r", "-\t\t\tallowing(row1).elementAt(0); will(returnValue(cell1));\r", "+\t\t\tallowing(table1).at(0); will(returnValue(row1));\r", "+\t\t\tallowing(row1).at(0); will(returnValue(cell1));\r", "-\t\t\tallowing(table1).elementAt(1); will(returnValue(row2));\r", "-\t\t\tallowing(row2).elementAt(0); will(returnValue(cell2));\r", "+\t\t\tallowing(table1).at(1); will(returnValue(row2));\r", "+\t\t\tallowing(row2).at(0); will(returnValue(cell2));\r", "-\t\t\tallowing(cell2).getEmbeddedTables(); will(returnValue(innerTables));\r", "+\t\t\tallowing(cell2).getEmbeddedTables(); will(returnValue(cell2));\r", "-\t\t\tallowing(innerTables).size(); will(returnValue(1));\r", "+\t\t\tallowing(cell2).size(); will(returnValue(1));\r", "-\t\t\tallowing(innerTables).iterator(); will(returnValue(result));\r", "-\t\t\tallowing(innerTables).elementAt(0); will(returnValue(innerTable1));\r", "+\t\t\tallowing(cell2).iterator(); will(returnValue(result));\r", "+\t\t\tallowing(cell2).at(0); will(returnValue(innerTable1));\r", "-\t\t\tallowing(innerTable1).elementAt(0); will(returnValue(innerRow1));\r", "-\t\t\tallowing(innerRow1).elementAt(0); will(returnValue(innerCell));\r", "+\t\t\tallowing(innerTable1).at(0); will(returnValue(innerRow1));\r", "+\t\t\tallowing(innerRow1).at(0); will(returnValue(innerCell));\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \tprivate void expectTwoRowsInFirstCellOfTable()", "id": "6c88ce1dde337cabce4e33c2033d50a8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 9, "signatureBeforeChange": "\r \t@Test\r \tpublic void largeTablesHasAllTheRightValues()", "fileName": "test/fitlibrary/matcher/TestTableBuilderForTests.java", "methodNumberAfterChange": 10, "commitBeforeChange": "e2da601cf629ddf34f7877021df06bd4f5925d28", "diff": ["-\t\tTables tables = tablesBuilder.expect(context);\r", "+\t\tTables tables = tablesBuilder.mock(context);\r", "-\t\tassertThat(tables.last(), sameInstance(tables.elementAt(0)));\r", "+\t\tassertThat(tables.last(), sameInstance(tables.at(0)));\r", "-\t\tassertThat(iterator.next(), sameInstance(tables.elementAt(0)));\r", "+\t\tassertThat(iterator.next(), sameInstance(tables.at(0)));\r", "-\t\tTable table = tables.elementAt(0);\r", "+\t\tTable table = tables.at(0);\r", "-\t\tRow row0 = table.elementAt(0);\r", "+\t\tRow row0 = table.at(0);\r", "-\t\tCell cell0 = row0.elementAt(0);\r", "+\t\tCell cell0 = row0.at(0);\r", "-\t\tRow row1 = table.elementAt(1);\r", "+\t\tRow row1 = table.at(1);\r", "-\t\tCell cell2 = row1.elementAt(0);\r", "+\t\tCell cell2 = row1.at(0);\r", "-\t\tassertThat(iterator2.next(), sameInstance(cell2.elementAt(0)));\r", "+\t\tassertThat(iterator2.next(), sameInstance(cell2.at(0)));\r", "-\t\tTable innerTable = cell2.elementAt(0);\r", "+\t\tTable innerTable = cell2.at(0);\r", "-\t\tassertThat(innerTable.elementAt(0).size(), is(1));\r", "-\t\tassertThat(innerTable.elementAt(0).elementAt(0).text(),\r", "+\t\tassertThat(innerTable.at(0).size(), is(1));\r", "+\t\tassertThat(innerTable.at(0).at(0).text(),\r"], "commitAfterChange": "50412ddfbe4cd56a8db4cfcca0f083c1114f83fe", "signatureAfterChange": "\r \t@Test\r \tpublic void largeTablesHasAllTheRightValues()", "id": "f1a37c5f4e743d512eb08278cce65b54", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "bd77491c284f6ec5a72d4ef464217ae3", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
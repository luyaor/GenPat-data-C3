{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic PostFixSpecialCaller(Row row, DoTraverseInterpreter interpreter)", "fileName": "src/fitlibrary/traverse/workflow/caller/PostFixSpecialCaller.java", "methodNumberAfterChange": 0, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\tpublic PostFixSpecialCaller(Row row, DoTraverseInterpreter interpreter) {\r", "+\tpublic PostFixSpecialCaller(Row row, Evaluator evaluator, boolean sequencing) {\r", "-\t\tString firstCell = row.text(0,interpreter);\r", "-\t\tif (row.size() == 4 && \"=\".equals(row.text(2,interpreter)) && \r", "+\t\tString firstCell = row.text(0,evaluator);\r", "+\t\tif (row.size() == 4 && \"=\".equals(row.text(2,evaluator)) && \r", "-\t\t\tmethodName = row.text(row.size()-2,interpreter);\r", "-\t\t\tspecialMethod = PlugBoard.lookupTarget.findPostfixSpecialMethod(interpreter, methodName);\r", "+\t\t\tmethodName = row.text(row.size()-2,evaluator);\r", "+\t\t\tspecialMethod = PlugBoard.lookupTarget.findPostfixSpecialMethod(evaluator, methodName);\r", "-\t\t\t\tfindMethodForInnerAction(row, interpreter);\r", "+\t\t\t\tfindMethodForInnerAction(row, evaluator,sequencing);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \r \tpublic PostFixSpecialCaller(Row row, Evaluator evaluator, boolean sequencing)", "id": "267b22c06c53665d28a3ef6f3368f013", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \tprivate void findMethodForInnerAction(Row row, DoTraverseInterpreter interpreter)", "fileName": "src/fitlibrary/traverse/workflow/caller/PostFixSpecialCaller.java", "methodNumberAfterChange": 1, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\tprivate void findMethodForInnerAction(Row row, DoTraverseInterpreter interpreter) {\r", "+\tprivate void findMethodForInnerAction(Row row, Evaluator evaluator, boolean sequencing) {\r", "-\t\t\tinterpreter.findMethodFromRow222(row,0,3);\r", "+\t\t\tPlugBoard.lookupTarget.findMethodByArity(row, 0, row.size() - 2, !sequencing, evaluator);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \tprivate void findMethodForInnerAction(Row row, Evaluator evaluator, boolean sequencing)", "id": "26c1ffb7250baf3e1a9c69a54986df38", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \r \tpublic DoActionCaller(Row row, DoTraverseInterpreter doEvaluator)", "fileName": "src/fitlibrary/traverse/workflow/caller/DoActionCaller.java", "methodNumberAfterChange": 0, "commitBeforeChange": "e9b167853c810372fec881bd87655bfdf7a0e704", "diff": ["-\tpublic DoActionCaller(Row row, DoTraverseInterpreter doEvaluator) {\r", "-\t\tmethodName = row.methodNameForCamel(doEvaluator);\r", "+\tpublic DoActionCaller(Row row, Evaluator evaluator, boolean sequencing, LookupMethodTarget lookupTarget) {\r", "+\t\tmethodName = row.methodNameForCamel(evaluator);\r", "-\t\t\ttarget = doEvaluator.findMethodByActionName(row,row.size()-1);\r", "+\t\t\ttarget = lookupTarget.findMethodByArity(row, 0, row.size(), !sequencing, evaluator);\r"], "commitAfterChange": "3ce874ef3b0aa2d7354fe1659a67b0bd9777787a", "signatureAfterChange": "\r \r \tpublic DoActionCaller(Row row, Evaluator evaluator, boolean sequencing, LookupMethodTarget lookupTarget)", "id": "7eca4864edebcef110b59cea4b74f865", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "85660793f9bef7794a30ffd7243d09a7", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_HIERARCHICAL"]}
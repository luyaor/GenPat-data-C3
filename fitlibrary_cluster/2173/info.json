{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "    public void enter() throws Exception", "fileName": "src/fit/ActionFixture.java", "methodNumberAfterChange": 2, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void enter() throws Exception {", "-    Method method = method(1);", "-    Class<?> type = method.getParameterTypes()[0];", "-    final Parse argumentCell = cells.more.more;", "-    if (argumentCell == null)", "-      throw new FitFailureException(\"You must specify an argument.\");", "-    String text = argumentCell.text();", "-    Object[] args;", "-    try {", "-      args = new Object[]{TypeAdapter.on(actor, type).parse(text)};", "-    }", "-    catch (NumberFormatException e) {", "-      throw new CouldNotParseFitFailureException(text, type.getName());", "-    }", "-    method.invoke(actor, args);", "-  }", "+\tpublic void enter() throws Exception {", "+\t\tMethod method = method(1);", "+\t\tClass<?> type = method.getParameterTypes()[0];", "+\t\tfinal Parse argumentCell = cells.more.more;", "+\t\tif (argumentCell == null)", "+\t\t\tthrow new FitFailureException(\"You must specify an argument.\");", "+\t\tString text = argumentCell.text();", "+\t\ttry {", "+\t\t\tObject[] args2 = new Object[] { TypeAdapter.on(actor, type).parse(", "+\t\t\t\t\ttext) };", "+\t\t\tmethod.invoke(actor, args2);", "+\t\t} catch (NumberFormatException e) {", "+\t\t\tthrow new CouldNotParseFitFailureException(text, type.getName());", "+\t\t}", "+\t}"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "  \tpublic void enter() throws Exception", "id": "2256f4fe991feccd056d59124bfcbaad", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \tICalledMethodTarget findMethodFromRow(IRow row, int i, int less) throws Exception ;", "fileName": "src/fitlibrary/traverse/workflow/special/SpecialActionContext.java", "methodNumberAfterChange": 0, "commitBeforeChange": "44a0e3700bd1d17cff7e5d246ad3da64c81df532", "diff": ["-\tICalledMethodTarget findMethodFromRow(IRow row, int i, int less) throws Exception ;\r", "+\tICalledMethodTarget findMethodFromRow(IRow row, int start, int extrasCellsOnEnd) throws Exception ;\r"], "commitAfterChange": "9069de478dc17e7793f2685307ecb6fa153f06e7", "signatureAfterChange": "\r \tICalledMethodTarget findMethodFromRow(IRow row, int start, int extrasCellsOnEnd) throws Exception ;", "id": "77b5f6e33f66429edfc5bcd8ab6bee41", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "ed304ea7eb6281f1dc4f3916ee81769e", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
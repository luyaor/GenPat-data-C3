{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 12, "signatureBeforeChange": "\r \t\r \t\r \tprivate void verifyScopePush(final Object result, final Object sut)", "fileName": "test/fitlibrary/flow/TestDoFlow.java", "methodNumberAfterChange": 12, "commitBeforeChange": "3dcd3b89a93a94255040ce519f06a01a05e62807", "diff": ["-\t\texpectTwoRowsInOneTableAndOneInAnother();\r", "-\t\t\texactly(2).of(flowEvaluator).interpretRow(row1,testResults);\r", "+\t\t\toneOf(flowEvaluator).interpretRow(row0,testResults);\r", "+\t\t\t  will(returnValue(new GenericTypedObject(result)));\r", "+\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(0),testResults);\r", "-\t\t\texactly(2).of(setUpTearDown).callSetUpSutChain(sut, row1, testResults);\r", "-\t\t\texactly(2).of(setUpTearDown).callTearDownSutChain(sut, row1, testResults);\r", "-\t\t\texactly(2).of(flowEvaluator).interpretRow(row2,testResults);\r", "+\t\t\toneOf(setUpTearDown).callSetUpSutChain(sut, row0, testResults);\r", "+\t\t\toneOf(setUpTearDown).callSetUpSutChain(sut, tables.at(1).at(0), testResults);\r", "+\t\t\toneOf(setUpTearDown).callTearDownSutChain(sut, row0, testResults);\r", "+\t\t\toneOf(setUpTearDown).callTearDownSutChain(sut, tables.at(1).at(0), testResults);\r", "+\t\t\toneOf(flowEvaluator).interpretRow(row1,testResults);\r", "+\t\t\t  will(returnValue(GenericTypedObject.NULL));\r", "+\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(1),testResults);\r", "-\t\t\texactly(2).of(tableListener).tableFinished(table1);\r", "+\t\t\toneOf(tableListener).tableFinished(table0);\r", "+\t\t\toneOf(tableListener).tableFinished(tables.at(1));\r"], "commitAfterChange": "84c141233c25d93b724ff299ad66f0e4b13ed95b", "signatureAfterChange": "\r \t\r \t\r \tprivate void verifyScopePush(final Object result, final Object sut)", "id": "45fe990c597815301ff07bf3410c76d5", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \t\r \t@Test\r \tpublic void innerTableIsRun()", "fileName": "test/fitlibrary/flow/TestDoFlowWithNestedTables.java", "methodNumberAfterChange": 2, "commitBeforeChange": "a6c1e5e7a0e2d59a2e0ed7586d0e7ddd7317f579", "diff": ["-\t\t\toneOf(flowEvaluator).interpretRow(row1,testResults);\r", "+\t\t\toneOf(flowEvaluator).interpretRow(firstRow,testResults);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", row1, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", row1, testResults);\r", "+\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", firstRow, testResults);\r", "+\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", firstRow, testResults);\r", "-\t\t\toneOf(flowEvaluator).interpretRow(innerRow1,testResults);\r", "+\t\t\toneOf(flowEvaluator).interpretRow(innerRow,testResults);\r", "-\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", innerRow1, testResults);\r", "-\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", row1, testResults);\r", "+\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", innerRow, testResults);\r", "+\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", firstRow, testResults);\r", "-\t\t\toneOf(tableListener).tableFinished(table1);\r", "+\t\t\toneOf(tableListener).tableFinished(table);\r"], "commitAfterChange": "3dcd3b89a93a94255040ce519f06a01a05e62807", "signatureAfterChange": "\r \t\r \t@Test\r \tpublic void innerTableIsRun()", "id": "94cfc397206e146f8a51b331f2b410ed", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 11, "signatureBeforeChange": "\r \t@Test\r \tpublic void twoDoTraversesSoScopeStackChange()", "fileName": "test/fitlibrary/flow/TestDoFlow.java", "methodNumberAfterChange": 11, "commitBeforeChange": "3dcd3b89a93a94255040ce519f06a01a05e62807", "diff": ["-\t\texpectTwoRowsInOneTableAndOneInAnother();\r", "-\t\t\texactly(2).of(flowEvaluator).interpretRow(row1,testResults);\r", "+\t\t\toneOf(flowEvaluator).interpretRow(row0,testResults);\r", "+\t\t\t  will(returnValue(typedResult1));\r", "+\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(0),testResults);\r", "-\t\t\texactly(2).of(setUpTearDown).callSetUpSutChain(\"s\", row1, testResults);\r", "-\t\t\texactly(2).of(setUpTearDown).callTearDownSutChain(\"s\", row1, testResults);\r", "+\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", row0, testResults);\r", "+\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"s\", tables.at(1).at(0), testResults);\r", "+\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", row0, testResults);\r", "+\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"s\", tables.at(1).at(0), testResults);\r", "-\t\t\texactly(2).of(flowEvaluator).interpretRow(row2,testResults);\r", "+\t\t\toneOf(flowEvaluator).interpretRow(row1,testResults);\r", "+\t\t\t  will(returnValue(typedResult2));\r", "+\t\t\toneOf(flowEvaluator).interpretRow(tables.at(1).at(1),testResults);\r", "-\t\t\texactly(2).of(setUpTearDown).callSetUpSutChain(\"t\", row2, testResults);\r", "-\t\t\texactly(2).of(setUpTearDown).callTearDownSutChain(\"t\", row1, testResults);\r", "+\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", row1, testResults);\r", "+\t\t\toneOf(setUpTearDown).callSetUpSutChain(\"t\", tables.at(1).at(1), testResults);\r", "+\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", row0, testResults);\r", "+\t\t\toneOf(setUpTearDown).callTearDownSutChain(\"t\", tables.at(1).at(0), testResults);\r", "-\t\t\texactly(2).of(tableListener).tableFinished(table1);\r", "+\t\t\toneOf(tableListener).tableFinished(table0);\r", "+\t\t\toneOf(tableListener).tableFinished(tables.at(1));\r"], "commitAfterChange": "84c141233c25d93b724ff299ad66f0e4b13ed95b", "signatureAfterChange": "\r \t@Test\r \tpublic void twoDoTraversesSoScopeStackChange()", "id": "97aa30ce26ad507aa20258067b7b2d90", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "9a34d1849ca8e186c7d8fc7b75290dfe", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_HIERARCHICAL"]}
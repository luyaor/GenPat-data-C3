{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r \tpublic static String what(IScope scope, String initialPattern)", "fileName": "src/fitlibrary/flow/WhatIsInScope.java", "methodNumberAfterChange": 0, "commitBeforeChange": "6c86d5b1959fb6a5e111247cfeaf74970fb9f334", "diff": ["+\t\ts.append(\"These are all the actions that are available at this point in the storytest.</br></br>\");\r", "+\t\ts.append(\"Special actions are shown in <b>bold</b> (with '''...'''). Other actions are shown in <i>italics</i> (with ''...'').</br></br>\");\r", "+\t\ts.append(\"Special actions act on a (non-special) action, as shown by \\\"|action...|\\\"</br></br>\");\r", "+\t\ts.append(\"Move the mouse over an action (or header) for further information, when it's available.</br></br>\");\r", "-\t\ts.append(\"<tr><td><h4>Object of type</h4></td><td><h4>Action Details</h4></td></tr>\\n\");\r", "+\t\ts.append(\"<tr><td><h3 style='margin-top:5px; margin-bottom:5px'>Action</h3></td><td><h3 style='margin-top:5px; margin-bottom:5px'>\");\r", "+\t\tspan(s,\"Returns\",0,\"The Java type of the returned object.\");\r", "+\t\ts.append(\"</h3></td></tr>\\n\");\r", "-\t\t\ts.append(\"<tr><td>\"+aClass.getSimpleName()+\"</td>\\n\");\r", "-\t\t\taddActions(s,aClass,pattern,showAnnotation != null);\r", "-\t\t\ts.append(\"</tr>\\n\");\r", "+\t\t\ts.append(\"<tr><td colspan=2 style='background-color:#d0d0d0;'><h4 style='margin-top:3px; margin-bottom:3px;'>Actions for class \"+aClass.getSimpleName()+\":</h4></td></tr>\\n\");\r", "+\t\t\taddActions(s,aClass,pattern,showAnnotation != null,3);\r"], "commitAfterChange": "83f84db552d47a75ab94267b635e3306dd137171", "signatureAfterChange": "\r \tpublic static String what(IScope scope, String initialPattern)", "id": "02eb8e447a2ae5343eb3f246ddf99cd8", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r \tpublic void bind(Row parameterRow, Row row, DynamicVariables dynamicVariables,\r \t\t\tVariableResolver resolver)", "fileName": "src/fitlibrary/definedAction/MultiParameterBinder.java", "methodNumberAfterChange": 4, "commitBeforeChange": "6aa33f7a49e37bb18384a62861c89eb6f5a7aeb4", "diff": ["-\tpublic void bind(Row parameterRow, Row row, DynamicVariables dynamicVariables,\r", "-\t\t\tVariableResolver resolver) {\r", "-\t\tif (row.size() != formalParameters.size())\r", "-\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+row.size());\r", "-\t\tfor (int c = 0; c < row.size(); c++) {\r", "-\t\t\tString parameter = parameterRow.text(c, resolver);\r", "-\t\t\tString actual = row.text(c, resolver);\r", "-\t\t\tdynamicVariables.putParameter(parameter, actual);\r", "+\tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables) {\r", "+\t\tif (callRow.size() != formalParameters.size())\r", "+\t\t\tthrow new FitLibraryException(\"Expected \"+formalParameters.size()+\" parameters but there were \"+callRow.size());\r", "+\t\tfor (int c = 0; c < callRow.size(); c++) {\r", "+\t\t\tString parameter = parameterRow.text(c, dynamicVariables);\r", "+\t\t\tif (callRow.at(c).hasEmbeddedTables(dynamicVariables))\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.at(c).getEmbeddedTables());\r", "+\t\t\telse\r", "+\t\t\t\tdynamicVariables.putParameter(parameter, callRow.text(c, dynamicVariables));\r", "+\t\t}\r", "+\t}\r"], "commitAfterChange": "8c641f862310f1dca2920a59e226aed52b07dae9", "signatureAfterChange": "\r \tpublic void bindMulti(Row parameterRow, Row callRow, DynamicVariables dynamicVariables)", "id": "2957b93e893573e65f6742dcfab38631", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective)", "fileName": "src/fitlibrary/flow/WhatIsInScope.java", "methodNumberAfterChange": 1, "commitBeforeChange": "6c86d5b1959fb6a5e111247cfeaf74970fb9f334", "diff": ["-\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective) {\r", "+\tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective, int margin) {\r", "-\t\ts.append(\"<td><table>\");\r", "-\t\tboolean first = true;\r", "-\t\t\t\t\tif (first)\r", "-\t\t\t\t\t\ts.append(\"<tr><td><h4>Action</h4></td>\"+\r", "-\t\t\t\t\t\t\t\t\"<td><h4><span title='The Java return type.'>Returns</span></h4></td>\"+\r", "-\t\t\t\t\t\t\t\t\"<td><h4><span title='Actions that can occur in the rest of the table.'>Following actions</span></h4></td></tr>\\n\");\r", "-\t\t\t\t\tfirst = false;\t\t\t\t\t\r", "-\t\t\t\t\tactionInfo.display(s,returnTypeDisplay(method));\r", "+\t\t\t\t\ts.append(\"<tr><td>\");\r", "+\t\t\t\t\tspanStart(s,margin); //<span style='margin-left:\"+margin+\"px'>\");\r", "+\t\t\t\t\tactionInfo.display(s);\r", "+\t\t\t\t\ts.append(\"</span></td><td><code>\");\r", "+\t\t\t\t\ts.append(returnTypeDisplay(method));\r", "+\t\t\t\t\ts.append(\"</code></td></tr>\");\r", "-\t\t\t\t\tif (actionInfo.compound && !ignoreType(returnType))\r", "-\t\t\t\t\t\taddActions(s,returnType,\"\",true);\r", "+\t\t\t\t\tif (actionInfo.compound && !ignoreType(returnType)) {\r", "+\t\t\t\t\t\ts.append(\"<tr><td colspan=2>\");\r", "+\t\t\t\t\t\tString simpleName = returnType.getSimpleName();\r", "+\t\t\t\t\t\tspan(s,\"Actions for class <code>\"+simpleName+\"</code> in same table:\",\r", "+\t\t\t\t\t\t\t\tmargin+50,\r", "+\t\t\t\t\t\t\t\t\"These actions are for the \"+simpleName+\" produced by the action above.\\n\"+\r", "+\t\t\t\t\t\t\t\t\"They can be used in the following rows of the table that contains the above action.\");\r", "+\t\t\t\t\t\ts.append(\"</td></tr>\");\r", "+\t\t\t\t\t\taddActions(s,returnType,\"\",true,margin+50);\r", "+\t\t\t\t\t}\r", "-\t\ts.append(\"</table></td>\");\r"], "commitAfterChange": "83f84db552d47a75ab94267b635e3306dd137171", "signatureAfterChange": "\r \r \tprivate static void addActions(StringBuilder s, Class<? extends Object> aClass, String pattern, boolean selective, int margin)", "id": "4b125004c716391189617ba1249ffa74", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 2, "signatureBeforeChange": "\r \tprivate void reset()", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 2, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-\t\ttableStack.clear();\r", "+\t\truntime.setAbandon(false);\r", "+\t\truntime.setStopOnError(false);\r", "+\t\tscopeStack.clearAllButSuite();\r", "-\t\tflowEvaluator.setSystemUnderTest(suiteFixture); // May be null\r", "-\t\tif (suiteFixture != null)\r", "-\t\t\truntimeContext = suiteFixture.getCopyOfRuntimeContext();\r", "+\t\tif (suiteFixtureOption.isSome())\r", "+\t\t\tflowEvaluator.setRuntimeContext(suiteFixtureOption.get().getCopyOfRuntimeContext());\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate void reset()", "id": "c75d9eac04ef5263d7094588697e784b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "99b6c47f8b77d4009f848f5560c08ee5", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
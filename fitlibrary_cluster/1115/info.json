{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 19, "signatureBeforeChange": "\r \tprotected void callMethod(Object object, String methodName, Table table, TestResults results)", "fileName": "src/fitlibrary/flow/DoFlow.java", "methodNumberAfterChange": 6, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["+\t}\r", "+\tprivate void handleInnerTables(final Cell cell, ITableListener tableListener) {\r", "+\t\tTables innerTables = cell.getEmbeddedTables();\r", "+\t\tIScopeState state = scopeStack.currentState();\r", "+\t\tfor (int iTableNo = 0; iTableNo < innerTables.size(); iTableNo++) {\r", "+\t\t\tTable iTable = innerTables.table(iTableNo);\r", "+\t\t\trunTable(iTable,tableListener);\r", "+\t\t\tstate.restore();\r", "+\t\t}\r", "+\t}\r", "-\tprotected void callMethod(Object object, String methodName, Table table, TestResults results) {\r", "-\t\ttry {\r", "-\t\t\tMethod method = object.getClass().getMethod(methodName, new Class[]{});\r", "-\t\t\tmethod.invoke(object, new Object[]{});\r", "-\t\t} catch (NoSuchMethodException e) {\r", "-\t\t\t//\r", "-\t\t} catch (Exception e) {\r", "-\t\t\ttable.error(results, e);\r", "-\t\t}\r", "-\t}\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r \tprivate void handleInnerTables(final Cell cell, ITableListener tableListener)", "id": "d1792fcfdc567599892ccc64d40ee0e2", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 4, "signatureBeforeChange": "\r \tprivate RowOnParse appendTableToReport(Table callingTable, Row actualParameterNames, int errors, List<Object> parameters, TablesOnParse resultingTables)", "fileName": "src/fitlibrary/definedAction/UseTemplateTraverse.java", "methodNumberAfterChange": 4, "commitBeforeChange": "a31639422a830880e68972b09ea7debebd2f084e", "diff": ["-\tprivate RowOnParse appendTableToReport(Table callingTable, Row actualParameterNames, int errors, List<Object> parameters, TablesOnParse resultingTables) {\r", "-\t\tTable commentTable = new TableOnParse();\r", "+\tprivate Row appendTableToReport(Table callingTable, Row actualParameterNames, int errors, List<Object> parameters, Tables resultingTables) {\r", "+\t\tTable commentTable = TableFactory.table();\r", "-\t\tTableOnParse paramsTable = new TableOnParse();\r", "-\t\tRowOnParse templateRow = paramsTable.newRow();\r", "+\t\tTable paramsTable = TableFactory.table();\r", "+\t\tRow templateRow = paramsTable.newRow();\r", "-\t\tRowOnParse paramsRow = paramsTable.newRow();\r", "+\t\tRow paramsRow = paramsTable.newRow();\r", "-\t\t\tparamsRow.addCell(new CellOnParse(actualParameterNames.text(c,this)));\r", "-\t\tRowOnParse argsRow = paramsTable.newRow();\r", "+\t\t\tparamsRow.addCell(TableFactory.cell(actualParameterNames.text(c,this)));\r", "+\t\tRow argsRow = paramsTable.newRow();\r", "-\t\t\t\tnewCell.setInnerTables(new TablesOnParse((TableOnParse) paramValue));\r", "+\t\t\t\tnewCell.setInnerTables(TableFactory.tables((Table) paramValue));\r", "-\t\tcommentTable.newRow().addCell(new CellOnParse(paramsTable));\r", "-\t\tcommentTable.newRow().addCell(new CellOnParse(resultingTables));\r", "+\t\tcommentTable.newRow().addCell(TableFactory.cell(TableFactory.tables(paramsTable)));\r", "+\t\tcommentTable.newRow().addCell(TableFactory.cell(resultingTables));\r"], "commitAfterChange": "2c6fd716f0ddbc6f8d43a941ccbb30e98b026f07", "signatureAfterChange": "\r \tprivate Row appendTableToReport(Table callingTable, Row actualParameterNames, int errors, List<Object> parameters, Tables resultingTables)", "id": "f3470d688054f0dd6de0f422c04b23b1", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "10f43b2f09aed72123bdaa4b3604f836", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["AST_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 5, "signatureBeforeChange": "\r     private static String translateUnicode(String name, boolean keepUnicode)", "fileName": "src/fitlibrary/utility/ExtendedCamelCase.java", "methodNumberAfterChange": 5, "commitBeforeChange": "0209ef28b9bcd09ff4e0df509885b3e7b6079574", "diff": ["-\t    for (int i = 0; i < name.length(); i++) {\r", "-\t        char ch =  name.charAt(i); // This needs to be updated for jdk1.5 to codePointAt()\r", "-\t\t\tif (ch < 128 || (keepUnicode && Character.isJavaIdentifierPart(ch))) // valid without translation\r", "+        if (!name.isEmpty()) {\r", "+        \tchar ch =  name.charAt(0);\r", "+\t\t\tif (ch < 128 || (keepUnicode && Character.isJavaIdentifierStart(ch)))\r", "+\t\t\t    b.append(ch);\r", "+\t\t\telse\r", "+\t\t\t    b.append(\"u\"+Integer.toHexString(ch).toUpperCase());\r", "+        }\r", "+\t    for (int i = 1; i < name.length(); i++) {\r", "+\t        char ch =  name.charAt(i);\r", "+\t\t\tif (ch < 128 || (keepUnicode && Character.isJavaIdentifierPart(ch)))\r"], "commitAfterChange": "767f6cb947a46bb148e39b288dc9b54a99aee022", "signatureAfterChange": "\r     private static String translateUnicode(String name, boolean keepUnicode)", "id": "9ed2786cf3a9c9f415757d5a9cd75456", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 1, "signatureBeforeChange": "\r     private void doTable(Table theTable)", "fileName": "src/fitlibrary/spec/SpecifySuiteFixture.java", "methodNumberAfterChange": 1, "commitBeforeChange": "674c9b05d3e6a631948589b0d9b45e3bdb9c0904", "diff": ["-    private void doTable(Table theTable) {\r", "-        TestResults testResults = TestResults.create(counts);\r", "+    private void doTable(TableOnParse theTable) {\r", "+        TestResults testResults = new TestResults(counts);\r", "-            Row row = theTable.row(rowNo);\r", "+            RowOnParse row = theTable.row(rowNo);\r", "-\t\t\t\ttheTable.error(testResults, new RowWrongWidthException(2));\r", "+\t\t\t\trow.error(testResults, new RowWrongWidthException(2));\r", "-                theTable.error(testResults, new NestedTableExpectedException());\r", "+            \trow.error(testResults, new NestedTableExpectedException());\r", "-            batch.doStorytest(new Tables(actual));\r", "+            batch.doStorytest(new TablesOnParse(actual));\r"], "commitAfterChange": "a31639422a830880e68972b09ea7debebd2f084e", "signatureAfterChange": "\r     private void doTable(TableOnParse theTable)", "id": "aed38dc5c6c938db7037b986b11ad782", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "da4bacb2b09677be5fe2c9f41977ab5e", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
{"members": [{"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 0, "signatureBeforeChange": "\r   public static void assertCounts(Counts expected, Counts actual)", "fileName": "src/fit/decorator/util/TestCaseHelper.java", "methodNumberAfterChange": 0, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public static void assertCounts(Counts expected, Counts actual) {\r", "-    TestCase.assertEquals(expected.wrong, actual.wrong);\r", "-    TestCase.assertEquals(expected.exceptions, actual.exceptions);\r", "-    TestCase.assertEquals(expected.ignores, actual.ignores);\r", "-    TestCase.assertEquals(expected.right, actual.right);\r", "-  }\r", "+\tpublic static void assertCounts(Counts expected, Counts actual) {\r", "+\t\tAssert.assertEquals(expected.wrong, actual.wrong);\r", "+\t\tAssert.assertEquals(expected.exceptions, actual.exceptions);\r", "+\t\tAssert.assertEquals(expected.ignores, actual.ignores);\r", "+\t\tAssert.assertEquals(expected.right, actual.right);\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \tpublic static void assertCounts(Counts expected, Counts actual)", "id": "a8dc0718e47b830b67ce7627d5499bb4", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}, {"repository": "git://git.code.sf.net/p/fitlibrary/fitlibrary", "methodNumberBeforeChange": 7, "signatureBeforeChange": "\r \r   public void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeAndDeltaValueDoNotMatch()\r     throws ParseException", "fileName": "src/fit/decorator/IncrementColumnsValueTest.java", "methodNumberAfterChange": 7, "commitBeforeChange": "ab046d65905e417d3e94904fed3739580da01753", "diff": ["-  public void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeAndDeltaValueDoNotMatch()\r", "-    throws ParseException {\r", "-    assertInvalidInputException(new String[]\r", "-      {\"Column1\", \"double\", \"xyz\"}, \"value 'xyz' is not a valid DataType = 'double'\");\r", "-    assertInvalidInputException(new String[]\r", "-      {\"Column1\", \"int\", \"1.2\"}, \"value '1.2' is not a valid DataType = 'int'\");\r", "-    assertInvalidInputException(new String[]\r", "-      {\"Column1\", \"date\", \"12-5-2006\"}, \"value '12-5-2006' is not a valid DataType = 'date'\");\r", "-  }\r", "+\tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeAndDeltaValueDoNotMatch() {\r", "+\t\tassertInvalidInputException(\r", "+\t\t\t\tnew String[] { \"Column1\", \"double\", \"xyz\" },\r", "+\t\t\t\t\"value 'xyz' is not a valid DataType = 'double'\");\r", "+\t\tassertInvalidInputException(new String[] { \"Column1\", \"int\", \"1.2\" },\r", "+\t\t\t\t\"value '1.2' is not a valid DataType = 'int'\");\r", "+\t\tassertInvalidInputException(new String[] { \"Column1\", \"date\",\r", "+\t\t\t\t\"12-5-2006\" },\r", "+\t\t\t\t\"value '12-5-2006' is not a valid DataType = 'date'\");\r", "+\t}\r"], "commitAfterChange": "ccec4a1da96e4230996fd3f45653be59c64dac88", "signatureAfterChange": "\r \r \tpublic void testSetupDecoratorShouldThrowInvalidInputExceptionIfDataTypeAndDeltaValueDoNotMatch()", "id": "b80ce945436bee08f3e193b16097084b", "@class": "de.fau.cs.inf2.cthree.data.CodeChange"}], "id": "c595ad1daff08d29a01a2a72984463f6", "@class": "de.fau.cs.inf2.cthree.data.Cluster", "detectedBy": ["DIFF_DBSCAN"]}
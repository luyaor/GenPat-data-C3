{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9984e2a0304cc411778fb054d395bc35", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4756de78e1110e2ca3e35e1a6480b3aa", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/methods/TimeoutTest.java", "commitBeforeChange": "60f3a3f3ba53ca3e44f13acb2d200a7c92a84551", "commitAfterChange": "480b98e7f1bce46382e47fc30db2ef1a98a58b66", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t@Ignore(\"We would like this behavior to work but it may not be possible\") \t@Test public void stalledThreadAppearsInStackTrace() throws Exception", "signatureAfterChange": "  \t@Test public void stalledThreadAppearsInStackTrace() throws Exception", "diff": ["-\t@Ignore(\"We would like this behavior to work but it may not be possible\")", "-\t\tassertTrue(writer.toString().contains(\"infiniteLoop\")); // Make sure we have the stalled frame on the stack somewhere", "+\t\tassertThat(buffer.toString(), containsString(\"infiniteLoop\")); // Make sure we have the stalled frame on the stack somewhere"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d6d8c918ff8509a9cf6a17dac7aad56", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/methods/TimeoutTest.java", "commitBeforeChange": "c1642724c8525c3cd158df2054dd89283e77149c", "commitAfterChange": "912e94cafbc1f7074c39dbbd286a487c7ebe7ace", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \t@Ignore(\"We would like this behavior to work but it may not be possible\") \t@Test public void stalledThreadAppearsInStackTrace() throws Exception", "signatureAfterChange": "  \t@Test public void stalledThreadAppearsInStackTrace() throws Exception", "diff": ["-\t@Ignore(\"We would like this behavior to work but it may not be possible\")", "-\t\tassertTrue(writer.toString().contains(\"infiniteLoop\")); // Make sure we have the stalled frame on the stack somewhere", "+\t\tassertThat(buffer.toString(), containsString(\"infiniteLoop\")); // Make sure we have the stalled frame on the stack somewhere"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "661e7ed8e2cbcf4c03d9f7e95811971e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e82634963ab5dbab1526e7410d691df", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/TimeoutRuleTest.java", "commitBeforeChange": "94aa692b0489d1fabd31c779c1a700a3b0890a24", "commitAfterChange": "544e5ba3a3034932879604b72fb6f8526d27eb50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Ignore(\"For gump, for now\")     @Test(timeout = 100)     public void globalTimeoutAvoidsInfiniteLoop()", "signatureAfterChange": "      @Test     public void longTimeout() throws InterruptedException", "diff": ["-    @Ignore(\"For gump, for now\")", "-    @Test(timeout = 100)", "-    public void globalTimeoutAvoidsInfiniteLoop() {", "-        HasGlobalTimeout.log = \"\";", "-        Result result = JUnitCore.runClasses(HasGlobalTimeout.class);", "-        assertEquals(2, result.getFailureCount());", "-        assertThat(HasGlobalTimeout.log, containsString(\"ran1\"));", "-        assertThat(HasGlobalTimeout.log, containsString(\"ran2\"));", "+", "+    @Test", "+    public void longTimeout() throws InterruptedException {", "+        HasGlobalLongTimeout.logger.setLength(0);", "+        Result result = JUnitCore.runClasses(HasGlobalLongTimeout.class);", "+        assertEquals(3, result.getFailureCount());", "+        assertThat(HasGlobalLongTimeout.logger.toString(), containsString(\"run1\"));", "+        assertThat(HasGlobalLongTimeout.logger.toString(), containsString(\"run2\"));", "+        assertThat(HasGlobalLongTimeout.logger.toString(), containsString(\"run3\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f15e489efe482ed129a5bbc6c94efbd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "5408162765635af9b42a47ea865b06865284a2ab", "commitAfterChange": "07cf3c7fa446da330776502fb7cdc7329bfa2265", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private Thread[] getThreadArray(ThreadGroup group)", "signatureAfterChange": "     private List<Thread> getThreadsInGroup(ThreadGroup group)", "diff": ["-    private Thread[] getThreadArray(ThreadGroup group) {", "-        final int count = group.activeCount(); // this is just an estimate", "-        int enumSize = Math.max(count * 2, 100);", "-        int enumCount;", "-        Thread[] threads;", "-        int loopCount = 0;", "-        while (true) {", "-            threads = new Thread[enumSize];", "-            enumCount = group.enumerate(threads);", "-            if (enumCount < enumSize) {", "-                break;", "+    private List<Thread> getThreadsInGroup(ThreadGroup group) {", "+        final int activeThreadCount = group.activeCount(); // this is just an estimate", "+        int threadArraySize = Math.max(activeThreadCount * 2, 100);", "+        for (int loopCount = 0; loopCount < 5; loopCount++) {", "+            Thread[] threads = new Thread[threadArraySize];", "+            int enumCount = group.enumerate(threads);", "+            if (enumCount < threadArraySize) {", "+                return Arrays.asList(threads).subList(0, enumCount);", "-            enumSize += 100;", "-            if (++loopCount >= 5) {", "-                return null;", "-            }", "-            // threads are proliferating too fast for us.  Bail before we get into ", "-            // trouble.", "+            threadArraySize += 100;", "-        return copyThreads(threads, enumCount);", "-    }", "+        // threads are proliferating too fast for us.  Bail before we get into ", "+        // trouble.", "+        return Collections.emptyList();"]}]}
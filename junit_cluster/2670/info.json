{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "177b79c1ee5930f8861a0a58394f9e26", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3626bba60e1419cbfa7e2a0982930253", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 19, "signatureBeforeChange": "      public Categories(Class<?> klass, RunnerBuilder builder)             throws InitializationError", "signatureAfterChange": "      public Categories(Class<?> klass, RunnerBuilder builder) throws InitializationError", "diff": ["-    public Categories(Class<?> klass, RunnerBuilder builder)", "-            throws InitializationError {", "+    public Categories(Class<?> klass, RunnerBuilder builder) throws InitializationError {", "-            filter(new CategoryFilter(getIncludedCategory(klass),", "-                    getExcludedCategory(klass)));", "+            Set<Class<?>> included= getIncludedCategory(klass);", "+            Set<Class<?>> excluded= getExcludedCategory(klass);", "+            boolean isAnyIncluded= isAnyIncluded(klass);", "+            boolean isAnyExcluded= isAnyExcluded(klass);", "+", "+            filter(CategoryFilter.categoryFilter(isAnyIncluded, included, isAnyExcluded, excluded));", "+            throw new InitializationError(e);", "+        } catch (ClassNotFoundException e) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38c90a20f248b190af0aa185ef85a1de", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 7, "signatureBeforeChange": "          public CategoryFilter(Class<?> includedCategory,                 Class<?> excludedCategory)", "signatureAfterChange": "          private CategoryFilter(boolean matchAnyIncludes, Set<Class<?>> includes,                                boolean matchAnyExcludes, Set<Class<?>> excludes)", "diff": ["-", "-        public CategoryFilter(Class<?> includedCategory,", "-                Class<?> excludedCategory) {", "-            fIncluded = includedCategory;", "-            fExcluded = excludedCategory;", "+", "+        private CategoryFilter(boolean matchAnyIncludes, Set<Class<?>> includes,", "+                               boolean matchAnyExcludes, Set<Class<?>> excludes) {", "+            fIncludedAny= matchAnyIncludes;", "+            fExcludedAny= matchAnyExcludes;", "+            fIncluded= copyAndRefine(includes);", "+            fExcluded= copyAndRefine(excludes);", "+        }"]}]}
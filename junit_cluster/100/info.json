{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "026a94939b87589029556a67827d4ed9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c3d663da48973da35f27ebbef430000", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      private Assignments(List<PotentialAssignment> assigned,             List<ParameterSignature> unassigned, TestClass testClass)", "signatureAfterChange": "      private Assignments(List<PotentialAssignment> assigned,             List<ParameterSignature> unassigned, TestClass clazz)", "diff": ["-            List<ParameterSignature> unassigned, TestClass testClass) {", "-        fUnassigned = unassigned;", "-        fAssigned = assigned;", "-        fClass = testClass;", "+            List<ParameterSignature> unassigned, TestClass clazz) {", "+        this.unassigned = unassigned;", "+        this.assigned = assigned;", "+        this.clazz = clazz;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23dab8786b02544b16d377f517a2efa4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations)", "signatureAfterChange": "      private Description(Class<?> testClass, String displayName, Serializable uniqueId, Annotation... annotations)", "diff": ["-    private Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations) {", "+    private Description(Class<?> testClass, String displayName, Serializable uniqueId, Annotation... annotations) {", "-        fTestClass = clazz;", "-        fDisplayName = displayName;", "-        fUniqueId = uniqueId;", "-        fAnnotations = annotations;", "+        this.testClass = testClass;", "+        this.displayName = displayName;", "+        this.uniqueId = uniqueId;", "+        this.annotations = annotations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3ac533ca61763a9afe6bc39d7b659dd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public TestClass(Class<?> klass)", "signatureAfterChange": "     public TestClass(Class<?> clazz)", "diff": ["-    public TestClass(Class<?> klass) {", "-        fClass = klass;", "-        if (klass != null && klass.getConstructors().length > 1) {", "+    public TestClass(Class<?> clazz) {", "+        this.clazz = clazz;", "+        if (clazz != null && clazz.getConstructors().length > 1) {", "-        fMethodsForAnnotations = makeDeeplyUnmodifiable(methodsForAnnotations);", "-        fFieldsForAnnotations = makeDeeplyUnmodifiable(fieldsForAnnotations);", "+        this.methodsForAnnotations = makeDeeplyUnmodifiable(methodsForAnnotations);", "+        this.fieldsForAnnotations = makeDeeplyUnmodifiable(fieldsForAnnotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbc7f6fab1ab563809888cd3533ef134", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/AssumptionViolatedException.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      public AssumptionViolatedException(String assumption, boolean valueMatcher, Object value, Matcher<?> matcher)", "signatureAfterChange": "      public AssumptionViolatedException(String assumption, boolean valueMatcher, Object value, Matcher<?> matcher)", "diff": ["-        fAssumption = assumption;", "-        fValue = value;", "-        fMatcher = matcher;", "-        fValueMatcher = valueMatcher;", "+        this.assumption = assumption;", "+        this.value = value;", "+        this.matcher = matcher;", "+        this.valueMatcher = valueMatcher;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0219c4c0fe6c74d8fc5dfa32e790469", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b360cd52b92ecc2ebfb6e842c96e6d1a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/tests/runner/ResultTest.java", "commitBeforeChange": "597977ed1e15acfce0c7c67284d8cd1501911a53", "commitAfterChange": "f6149a9236d9a2778bf2fd6db927fd9f498a79c8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void assertResultSerializable(Result result) throws IOException, ClassNotFoundException", "signatureAfterChange": "      private void assertResultSerializable(Result result) throws IOException, ClassNotFoundException", "diff": ["+        assertSerializedCorrectly(result, fromStream);", "+", "+        InputStream resource = getClass().getResourceAsStream(getName());", "+        assertNotNull(\"Could not read resource \" + getName(), resource);", "+        objectInputStream = new ObjectInputStream(resource);", "+        fromStream = (Result) objectInputStream.readObject();", "+        ", "+        assertSerializedCorrectly(new ResultWithFixedRunTime(result), fromStream);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b659dd5a96d1b0424b2ff450d8c8241b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParentRunnerTest.java", "commitBeforeChange": "5e71994e865d0e2ac23885a11444cda91b3bba76", "commitAfterChange": "1273a35689bdcb3304f6634cdc3889c61f9b1b1f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "      private void assertClassHasFailureMessage(Class<?> klass, int failureCount, String message)", "signatureAfterChange": "      private void assertClassHasFailureMessage(Class<?> klass, String message)", "diff": ["-    private void assertClassHasFailureMessage(Class<?> klass, int failureCount, String message) {", "+    private void assertClassHasFailureMessage(Class<?> klass, String message) {", "-        assertThat(result.getFailureCount(), is(failureCount));", "-        assertThat(result.getFailures().get(0).getMessage(),", "-                is(equalTo(message)));", "+        List<String> messages = new ArrayList<String>();", "+        for (Failure failure : result.getFailures()) {", "+            messages.add(failure.getMessage());", "+        }", "+        assertThat(messages, hasItem(message));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "396a7680513ad7eaa7ea35036b93afe2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c493965147cc6a55857caa4117876d3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "34e66740b9117ce85cfd416f9e931b2e533ab16e", "commitAfterChange": "85b7c26e63f851004ce20d4a00fbf1b46607ab0c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private void throwTimeoutException(StatementThread thread) throws Exception", "signatureAfterChange": "      private Exception createTimeoutException(Thread thread)", "diff": ["-    private void throwTimeoutException(StatementThread thread) throws Exception {", "+", "+    private Exception createTimeoutException(Thread thread) {", "+        StackTraceElement[] stackTrace = thread.getStackTrace();", "-        exception.setStackTrace(thread.getRecordedStackTrace());", "-        throw exception;", "+        if (stackTrace != null) {", "+            exception.setStackTrace(stackTrace);", "+            thread.interrupt();", "+        }", "+        return exception;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8a187f5d6b0bf36ae8bc934d5c8cd7c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/Stopwatch.java", "commitBeforeChange": "7ae75535efbb7a95ac62cfa1d0ccb626cc23e8c7", "commitAfterChange": "0ffc637a33164dd219a6fbbb7210db84779c700a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private long getNanos()", "signatureAfterChange": "      private long getNanos()", "diff": ["-        return endNanos - startNanos;", "+        if (startNanos == 0) {", "+            throw new IllegalStateException(\"Test has not started\");", "+        }", "+        long currentEndNanos = endNanos; // volatile read happens here", "+        if (currentEndNanos == 0) {", "+          currentEndNanos = clock.nanoTime();", "+        }", "+", "+        return currentEndNanos - startNanos;"]}]}
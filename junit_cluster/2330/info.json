{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c441c8f5b768be8189ff5f6c46319086", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c6622285b47686e6588fb0a8dee6d13", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate Request constructLeafRequest(List<Description> leaves)", "signatureAfterChange": "      private Request constructLeafRequest(List<Description> leaves)", "diff": ["-\tprivate Request constructLeafRequest(List<Description> leaves) {", "-\t\tfinal List<Runner> runners = new ArrayList<Runner>();", "-\t\tfor (Description each : leaves)", "-\t\t\trunners.add(buildRunner(each));", "-\t\treturn new Request() {", "-\t\t\t@Override", "-\t\t\tpublic Runner getRunner() {", "-\t\t\t\ttry {", "-\t\t\t\t\treturn new Suite((Class<?>)null, runners) {};", "-\t\t\t\t} catch (InitializationError e) {", "-\t\t\t\t\treturn new ErrorReportingRunner(null, e);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t}", "+    private Request constructLeafRequest(List<Description> leaves) {", "+        final List<Runner> runners = new ArrayList<Runner>();", "+        for (Description each : leaves) {", "+            runners.add(buildRunner(each));", "+        }", "+        return new Request() {", "+            @Override", "+            public Runner getRunner() {", "+                try {", "+                    return new Suite((Class<?>) null, runners) {", "+                    };", "+                } catch (InitializationError e) {", "+                    return new ErrorReportingRunner(null, e);", "+                }", "+            }", "+        };", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7175b42db65734a185dc89bf84ec5a77", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/RunAfters.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-\t@Override", "-\tpublic void evaluate() throws Throwable {", "-\t\tList<Throwable> errors = new ArrayList<Throwable>();", "-\t\ttry {", "-\t\t\tfNext.evaluate();", "-\t\t} catch (Throwable e) {", "-\t\t\terrors.add(e);", "-\t\t} finally {", "-\t\t\tfor (FrameworkMethod each : fAfters)", "-\t\t\t\ttry {", "-\t\t\t\t\teach.invokeExplosively(fTarget);", "-\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\terrors.add(e);", "-\t\t\t\t}", "-\t\t}", "-\t\tMultipleFailureException.assertEmpty(errors);", "-\t}", "+", "+    @Override", "+    public void evaluate() throws Throwable {", "+        List<Throwable> errors = new ArrayList<Throwable>();", "+        try {", "+            fNext.evaluate();", "+        } catch (Throwable e) {", "+            errors.add(e);", "+        } finally {", "+            for (FrameworkMethod each : fAfters) {", "+                try {", "+                    each.invokeExplosively(fTarget);", "+                } catch (Throwable e) {", "+                    errors.add(e);", "+                }", "+            }", "+        }", "+        MultipleFailureException.assertEmpty(errors);", "+    }"]}]}
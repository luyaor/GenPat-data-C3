{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a2176b041e17c9fe358dc695af1ab85", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47674dda3d60d81769262b8f8d33d56f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "2ade5fd3aad123d6507b59ed5d48c8f030314f00", "commitAfterChange": "cc8497f28e1d5a46d7940a0b36556154c83d6f7a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public boolean canAcceptArrayType(Class<?> type)", "signatureAfterChange": "      private boolean canAcceptUnboxed(Class<?> candidate)", "diff": ["+", "+    private boolean canAcceptUnboxed(Class<?> candidate) {", "+        Field primitiveClassField = null;", "+        try {", "+            primitiveClassField = candidate.getDeclaredField(\"TYPE\");", "+        } catch (NoSuchFieldException e) {", "+            return false;", "+        }", "+        ", "+        try {", "+            if (Modifier.isStatic(primitiveClassField.getModifiers())) {", "+                Class<?> primitiveClass = (Class<?>) primitiveClassField.get(null);", "+                return type.isAssignableFrom(primitiveClass);", "+            } else {", "+                return false;", "+            }", "+        } catch (Exception e) {", "+            throw new RuntimeException(e);", "+        }", "+    }", "-", "-    public boolean canAcceptArrayType(Class<?> type) {", "-        return type.isArray() && canAcceptType(type.getComponentType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a51945fa39b0e8699f4647b9162bc28", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "1768d08d029dc3bf1ab88e26df0a9b40ae61227f", "commitAfterChange": "5ca9da987a7d4dc00e082aaf552cbd8ee8c7bd33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private Exception createTimeoutException(Thread thread)", "signatureAfterChange": "      private Exception createTimeoutException(Thread thread)", "diff": ["-        String message = String.format(", "-                \"test timed out after %d %s\", fTimeout, fTimeUnit.name().toLowerCase());", "-        Exception exception = (stuckThread == null) ", "-        \t? new Exception(message) ", "-            : new ExceptionWithThread (message, stuckThread,", "-            \t\t\"Appears to be stuck in thread {0}\");", "+        Exception exception = new Exception(String.format(", "+                \"test timed out after %d %s\", fTimeout, fTimeUnit.name().toLowerCase()));", "+        if (stuckThread != null) {", "+            Exception stuckThreadException = ", "+                new Exception (\"Appears to be stuck in thread \" +", "+                               stuckThread.getName());", "+            StackTraceElement[] threadStack;", "+            try {", "+                threadStack = stuckThread.getStackTrace();", "+            } catch (SecurityException e) {", "+                threadStack = new StackTraceElement[0];", "+            }", "+            stuckThreadException.setStackTrace (threadStack);", "+            exception = new MultipleFailureException    ", "+                (Arrays.<Throwable>asList (exception, stuckThreadException));", "+        }"]}]}
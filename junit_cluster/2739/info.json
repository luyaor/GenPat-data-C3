{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cc47f1d67d081bab93c2b1a0232e4a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35d978852ffb8cda88bf1f525544678d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "3dd6b9fca5ccbd02a4d1cb5c5b3c921e369662a0", "commitAfterChange": "a36466e1aed381e2973e5550969474a043879611", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "signatureAfterChange": " \tpublic void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "diff": ["-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() \"", "-\t\t\t\t\t+ state + \" be static\"));", "+\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() \" + state + \" be static\"));", "-\t\t\terrors.add(new Exception(\"Class \"", "-\t\t\t\t\t+ fMethod.getDeclaringClass().getName()", "-\t\t\t\t\t+ \" should be public\"));", "+\t\t\terrors.add(new Exception(\"Class \" + fMethod.getDeclaringClass().getName() + \" should be public\"));", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName()", "-\t\t\t\t\t+ \" should be public\"));", "+\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be public\"));", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName()", "-\t\t\t\t\t+ \" should be void\"));", "+\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be void\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1614cf70f8919333521013c3f06f674", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "signatureAfterChange": "     public void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "diff": ["-            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() \" + state + \" be static\"));", "+            errors.add(new Exception(\"Method \" + method.getName() + \"() \" + state + \" be static\"));", "-            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be public\"));", "+            errors.add(new Exception(\"Method \" + method.getName() + \"() should be public\"));", "-        if (fMethod.getReturnType() != Void.TYPE) {", "-            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be void\"));", "+        if (method.getReturnType() != Void.TYPE) {", "+            errors.add(new Exception(\"Method \" + method.getName() + \"() should be void\"));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71f393074706b55ba783c55f294d9826", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32bf6f7c3b2e8bcacbd6eacee84027fe", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/validation/BadlyFormedClassesTest.java", "commitBeforeChange": "c5ece65fe537092b9552f0efcca8a1e144ca4182", "commitAfterChange": "3dd6b9fca5ccbd02a4d1cb5c5b3c921e369662a0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \t@Test public void noRunnableMethods()", "signatureAfterChange": "  \t@Test \tpublic void noRunnableMethods()", "diff": ["-\t", "-\t@Test public void noRunnableMethods() {", "-\t\tJUnitCore core = new JUnitCore();", "-\t\tResult result = core.run(new Class[] {NoTests.class});", "-\t\tFailure failure = result.getFailures().get(0);", "-\t\tassertEquals(\"No runnable methods\", failure.getException().getMessage());", "+", "+\t@Test", "+\tpublic void noRunnableMethods() {", "+\t\tassertEquals(\"No runnable methods\", exceptionMessageFrom(NoTests.class));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c495118969d4b0bc6cf9badf2c424b4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/internal/MethodSorterTest.java", "commitBeforeChange": "99ffe0144444c0727248dad94f153b1fc91bf847", "commitAfterChange": "5976b1d40ef41cecafd9769dd8776a6e6610d0c5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "             private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofInterest)", "signatureAfterChange": "             private List<String> getDeclaredFilteredMethods(Class<?> clazz, List<String> ofInterest)", "diff": ["-    \t// the method under test.", "+    \tList<String> names= getDeclaredMethodNames(clazz);", "+    \tnames.retainAll(ofInterest);   \t", "+    \treturn names;", "+    }", "-", "-    \t// reduce to the methods of interest.", "-    \tnames.retainAll(ofInterest);", "-    \t", "-    \treturn names;", "-    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cbf31419cfa4b19abc52d76373ce0c7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/validation/BadlyFormedClassesTest.java", "commitBeforeChange": "c5ece65fe537092b9552f0efcca8a1e144ca4182", "commitAfterChange": "3dd6b9fca5ccbd02a4d1cb5c5b3c921e369662a0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t@Test public void constructorException()", "signatureAfterChange": "  \t@Test \tpublic void constructorException()", "diff": ["-\t", "-\t@Test public void constructorException() {", "-\t\tJUnitCore core = new JUnitCore();", "-\t\tResult result = core.run(new Class[] {FaultyConstructor.class});", "-\t\tFailure failure = result.getFailures().get(0);", "-\t\tassertEquals(\"Thrown during construction\", failure.getException().getMessage());", "+", "+\t@Test", "+\tpublic void constructorException() {", "+\t\tString message= exceptionMessageFrom(FaultyConstructor.class);", "+\t\tassertEquals(\"Thrown during construction\", message);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97a3e83952dea9df4be9d2707c4476db", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestRunner.java", "commitBeforeChange": "f268f458843fc84e83c244a5c271cc71386eb1cf", "commitAfterChange": "4b1869ebb8002e5d0b82ab55460f6126043c9ec4", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tprotected JMenu createJUnitMenu()", "signatureAfterChange": " \tprotected JMenu createJUnitMenu()", "diff": ["-\t\tJMenuItem mi2= new JMenuItem(\"Show Test Browser\");", "-\t\tmi2.addActionListener(", "-\t\t    new ActionListener() {", "-\t\t        public void actionPerformed(ActionEvent event) {", "-\t\t            showTestBrowser();", "-\t\t        }", "-\t\t    }", "-\t\t);", "-\t\tmi2.setMnemonic('S');", "-\t\tmenu.add(mi2);", "-", "-\t\tJMenuItem mi3= new JMenuItem(\"Exit\");", "-\t\tmi3.addActionListener(", "+\t\tJMenuItem mi2= new JMenuItem(\"Exit\");", "+\t\tmi2.addActionListener(", "-\t\tmi3.setMnemonic('x');", "-\t\tmenu.add(mi3);", "+\t\tmi2.setMnemonic('x');", "+\t\tmenu.add(mi2);"]}]}
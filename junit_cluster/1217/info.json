{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1c9b2eee7636ab50bbdaf348688b8df", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a22c329d24b8552ba2901a2b27a1f2e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "0f0152a8cd6dcbdb9f9cbb6ec5ca1cf2629dc12a", "commitAfterChange": "a90b496a6595856066504baf4f737fb853a6e45d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     protected void runChild(final FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": "      @Override     protected void runChild(final FrameworkMethod method, RunNotifier notifier)", "diff": ["-            runLeaf(methodBlock(method), description, notifier);", "+            Statement statement;", "+            try {", "+                statement = methodBlock(method);", "+            }", "+            catch (Throwable ex) {", "+                statement = new Fail(ex);", "+            }", "+            runLeaf(statement, description, notifier);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87717b10d49d8e4dcb729c43d4c26544", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "e012e06dc326394a3a834d974e9af3fea0e6df91", "commitAfterChange": "2ade5fd3aad123d6507b59ed5d48c8f030314f00", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void addSinglePointMethods(ParameterSignature sig,             List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig,             List<PotentialAssignment> list)", "diff": ["-                list.add(new MethodParameterValue(dataPointMethod));", "+                try {", "+                    list.add(PotentialAssignment.forValue(dataPointMethod.getName(), dataPointMethod.invokeExplosively(null)));", "+                } catch (Throwable e) {", "+                    // ignore and move on", "+                }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df8bbb9c9eb370aff16b07802d47d251", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86993eb9d5e2f6aa69e60500c4886999", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "c391c25b230e880289484202f3dc3aa81c373a1c", "commitAfterChange": "495a9a93e4a1157e707a01467e7cc3f600c88d19", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private TestWithParameters createTestWithNotNormalizedParameters(             String pattern, int index, Object parametersOrSingleParameter)", "signatureAfterChange": "          private TestWithParameters createTestWithNotNormalizedParameters(                 String pattern, int index, Object parametersOrSingleParameter)", "diff": ["-", "-    private TestWithParameters createTestWithNotNormalizedParameters(", "-            String pattern, int index, Object parametersOrSingleParameter) {", "-        Object[] parameters= (parametersOrSingleParameter instanceof Object[]) ? (Object[]) parametersOrSingleParameter", "-            : new Object[] { parametersOrSingleParameter };", "-        return createTestWithParameters(getTestClass(), pattern, index,", "-                parameters);", "-    }", "+        private TestWithParameters createTestWithNotNormalizedParameters(", "+                String pattern, int index, Object parametersOrSingleParameter) {", "+            Object[] parameters = (parametersOrSingleParameter instanceof Object[]) ? (Object[]) parametersOrSingleParameter", "+                    : new Object[] { parametersOrSingleParameter };", "+            return createTestWithParameters(testClass, pattern, index,", "+                    parameters);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7573bb2dca169b83e710cac4586b4e6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "010f7461c5e9bb4304b68b8c0eb3027b677d7f31", "commitAfterChange": "61badf2f7f147d6e782e1700b24da4ac06ce070c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private void createRunnersForParameters(Iterable<Object[]> allParameters,             String namePattern) throws InitializationError, Exception", "signatureAfterChange": "\r \r     private void createRunnersForParameters(Iterable<Object[]> allParameters, String namePattern) throws Exception", "diff": ["-", "-    private void createRunnersForParameters(Iterable<Object[]> allParameters,", "-            String namePattern) throws InitializationError, Exception {", "-        try {", "-            int i = 0;", "-            for (Object[] parametersOfSingleTest : allParameters) {", "-                String name = nameFor(namePattern, i, parametersOfSingleTest);", "-                TestClassRunnerForParameters runner = new TestClassRunnerForParameters(", "-                        getTestClass().getJavaClass(), parametersOfSingleTest,", "-                        name);", "-                runners.add(runner);", "-                ++i;", "-            }", "-        } catch (ClassCastException e) {", "-            throw parametersMethodReturnedWrongType();", "-        }", "-    }", "+\r", "+    private void createRunnersForParameters(Iterable<Object[]> allParameters, String namePattern) throws Exception {\r", "+        try {\r", "+            int i = 0;\r", "+            for (Object[] parametersOfSingleTest : allParameters) {\r", "+                runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\r", "+            }\r", "+        } catch (ClassCastException e) {\r", "+            throw parametersMethodReturnedWrongType();\r", "+        }\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc30e153bfc02cd1d453aef91fd12c83", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "dca4a949f93bb85cc8ee0eb8789979a18aa3ffc7", "commitAfterChange": "cb6abf6fc729f07c5d60b0756e91af444400b4b5", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private List<Runner> createRunnersForParameters(Iterable<Object> allParameters, String namePattern) throws Exception", "signatureAfterChange": "      private List<TestWithParameters> createTestsForParameters(             Iterable<Object> allParameters, String namePattern)             throws Exception", "diff": ["-    private List<Runner> createRunnersForParameters(Iterable<Object> allParameters, String namePattern) throws Exception {", "-            int i = 0;", "-            List<Runner> children = new ArrayList<Runner>();", "-            for (Object parametersOfSingleTest : allParameters) {", "-                children.add(createRunnerWithNotNormalizedParameters(", "-                    namePattern, i++, parametersOfSingleTest));", "-            return children;", "+    private List<TestWithParameters> createTestsForParameters(", "+            Iterable<Object> allParameters, String namePattern)", "+            throws Exception {", "+        int i = 0;", "+        List<TestWithParameters> children = new ArrayList<TestWithParameters>();", "+        for (Object parametersOfSingleTest : allParameters) {", "+            children.add(createTestWithNotNormalizedParameters(namePattern,", "+                    i++, parametersOfSingleTest));", "+        }", "+        return children;", "+    }"]}]}
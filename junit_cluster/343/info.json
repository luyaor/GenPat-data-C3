{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0301611dd564d877644d4476e88a5458", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b334bd4507ac56c4ab33759fb142e052", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/results/ResultMatchers.java", "commitBeforeChange": "4d1d0bb9ee6926b5a85ebc2ad077eb31f94e1181", "commitAfterChange": "70fcf98c69eace2e6cc6dc37b54e70fe57c490f1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static Matcher<PrintableResult> failureCountIs(final int count)", "signatureAfterChange": "  \tpublic static Matcher<PrintableResult> failureCountIs(final int count)", "diff": ["-\t\treturn new BaseMatcher<PrintableResult>() {", "-\t\t\tpublic boolean matches(Object item) {", "-\t\t\t\treturn ((PrintableResult) item).getFailures().size() == count;", "-\t\t\t}", "-", "+\t\treturn new TypeSafeMatcher<PrintableResult>() {", "+\t\t\t}", "+", "+\t\t\t@Override", "+\t\t\tpublic boolean matchesSafely(PrintableResult item) {", "+\t\t\t\treturn item.getFailures().size() == count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf9da4ce1febb51c0a9ea705a4dcc898", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/EventCollector.java", "commitBeforeChange": "a538d25ae50887dc9395f2f59ad5040752c0ec4f", "commitAfterChange": "f3ae021fb078fc3b1576febbce1b02e249329516", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate static Matcher<EventCollector> hasNumberOfFailures( \t\t\tfinal int numberOfFailures)", "signatureAfterChange": "  \tprivate static Matcher<EventCollector> hasNumberOfFailures( \t\t\tfinal int numberOfFailures)", "diff": ["-\t\treturn new BaseMatcher<EventCollector>() {", "-\t\t\tpublic boolean matches(Object item) {", "-\t\t\t\treturn ((EventCollector) item).fFailures.size() == numberOfFailures;", "+\t\treturn new TypeSafeMatcher<EventCollector>() {", "+\t\t\t@Override", "+\t\t\tpublic boolean matchesSafely(EventCollector item) {", "+\t\t\t\treturn item.fFailures.size() == numberOfFailures;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb843c12ffe36de63462deaba92e9344", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/EventCollector.java", "commitBeforeChange": "df70c1087de9d3827656ede187371bbe29d2a974", "commitAfterChange": "a538d25ae50887dc9395f2f59ad5040752c0ec4f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate static Matcher<EventCollector> hasNumberOfAssumptionFailures( \t\t\tfinal int numberOfFailures)", "signatureAfterChange": "  \tprivate static Matcher<EventCollector> hasNumberOfAssumptionFailures( \t\t\tfinal int numberOfFailures)", "diff": ["-\t\treturn new BaseMatcher<EventCollector>() {", "-\t\t\tpublic boolean matches(Object item) {", "-\t\t\t\treturn ((EventCollector) item).assumptionFailures.size() == numberOfFailures;", "+\t\treturn new TypeSafeMatcher<EventCollector>() {", "+\t\t\t@Override", "+\t\t\tpublic boolean matchesSafely(EventCollector item) {", "+\t\t\t\treturn item.fAssumptionFailures.size() == numberOfFailures;"]}]}
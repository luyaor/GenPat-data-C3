{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec26fb294c3e7efaae19ee6f2b17142e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f7595ab36a24fd8b3011e527b0e59bc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate <T extends Annotation> T findDeepAnnotation( \t\t\tAnnotation[] annotations, Class<T> annotationType, int depth)", "signatureAfterChange": "      private <T extends Annotation> T findDeepAnnotation(             Annotation[] annotations, Class<T> annotationType, int depth)", "diff": ["-\tprivate <T extends Annotation> T findDeepAnnotation(", "-\t\t\tAnnotation[] annotations, Class<T> annotationType, int depth) {", "-\t\tif (depth == 0)", "-\t\t\treturn null;", "-\t\tfor (Annotation each : annotations) {", "-\t\t\tif (annotationType.isInstance(each))", "-\t\t\t\treturn annotationType.cast(each);", "-\t\t\tAnnotation candidate= findDeepAnnotation(each.annotationType()", "-\t\t\t\t\t.getAnnotations(), annotationType, depth - 1);", "-\t\t\tif (candidate != null)", "-\t\t\t\treturn annotationType.cast(candidate);", "-\t\t}", "+    private <T extends Annotation> T findDeepAnnotation(", "+            Annotation[] annotations, Class<T> annotationType, int depth) {", "+        if (depth == 0) {", "+            return null;", "+        }", "+        for (Annotation each : annotations) {", "+            if (annotationType.isInstance(each)) {", "+                return annotationType.cast(each);", "+            }", "+            Annotation candidate = findDeepAnnotation(each.annotationType()", "+                    .getAnnotations(), annotationType, depth - 1);", "+            if (candidate != null) {", "+                return annotationType.cast(candidate);", "+            }", "+        }", "-\t\treturn null;", "-\t}", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a6d47402db6e4ba7f7e9d70d9b4480", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t\tprivate boolean hasCorrectCategoryAnnotation(Description description)", "signatureAfterChange": "          private boolean hasCorrectCategoryAnnotation(Description description)", "diff": ["-\t\tprivate boolean hasCorrectCategoryAnnotation(Description description) {", "-\t\t\tList<Class<?>> categories= categories(description);", "-\t\t\tif (categories.isEmpty())", "-\t\t\t\treturn fIncluded == null;", "-\t\t\tfor (Class<?> each : categories)", "-\t\t\t\tif (fExcluded != null && fExcluded.isAssignableFrom(each))", "-\t\t\t\t\treturn false;", "-\t\t\tfor (Class<?> each : categories)", "-\t\t\t\tif (fIncluded == null || fIncluded.isAssignableFrom(each))", "-\t\t\t\t\treturn true;", "-\t\t\treturn false;", "-\t\t}", "+        private boolean hasCorrectCategoryAnnotation(Description description) {", "+            List<Class<?>> categories = categories(description);", "+            if (categories.isEmpty()) {", "+                return fIncluded == null;", "+            }", "+            for (Class<?> each : categories) {", "+                if (fExcluded != null && fExcluded.isAssignableFrom(each)) {", "+                    return false;", "+                }", "+            }", "+            for (Class<?> each : categories) {", "+                if (fIncluded == null || fIncluded.isAssignableFrom(each)) {", "+                    return true;", "+                }", "+            }", "+            return false;", "+        }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a121f5a597fa600b40d6bad5b0559518", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e09bcef2bb2ec1a137b3dfc228d0d20", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "commitBeforeChange": "15566c4b6633db5cc84cae78088b36346b7d42f4", "commitAfterChange": "9d3821f6411ad85a683b8d38e4d42411229f2eec", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void annotationToFieldsReturnsKeysInADeterministicOrder()", "signatureAfterChange": "         @Ignore         @Test         public int methodC()", "diff": ["+        @Ignore", "+        @Test", "+        public int methodC() {", "+            return 0;", "+        }", "-", "-    @Test", "-    public void annotationToFieldsReturnsKeysInADeterministicOrder() {", "-        TestClass tc = new TestClass(MultipleFieldsAnnotated.class);", "-        Map<Class<? extends Annotation>, List<FrameworkField>> annotationToFields = tc.getAnnotationToFields();", "-        List<Class<? extends Annotation>> keys = new ArrayList<Class<? extends Annotation>>();", "-        for (Class<? extends Annotation> annotation : annotationToFields.keySet()) {", "-            keys.add(annotation);", "-        }", "-        assertThat(keys.get(0), CoreMatchers.<Class<? extends Annotation>>is(DataPoint.class));", "-        assertThat(keys.get(1), CoreMatchers.<Class<? extends Annotation>>is(Rule.class));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69b1e74e4c7bee0a43de00af5b0c2473", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "commitBeforeChange": "8e3f361443ddf8bca21c3db661c75d374fe78dba", "commitAfterChange": "c96215c5d025336d8ab1d7d2ab57daee20869cea", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t@Test(timeout=100) public void snappyRetrievalOfAnnotatedMethods()", "signatureAfterChange": " \t@Test \tpublic void annotationsAreCached()", "diff": ["-\t@Test(timeout=100) public void snappyRetrievalOfAnnotatedMethods() {", "-\t\t//TODO it would be better to make this relative", "-\t\tTestClass testClass= new TestClass(ManyMethods.class);", "-\t\tfor (int i= 0; i < 100; i++) {", "-\t\t\ttestClass.getAnnotatedMethods(Test.class);", "-\t\t\ttestClass.getAnnotatedMethods(Before.class);", "-\t\t\ttestClass.getAnnotatedMethods(After.class);", "-\t\t\ttestClass.getAnnotatedMethods(BeforeClass.class);", "-\t\t\ttestClass.getAnnotatedMethods(AfterClass.class);", "-\t\t}", "+\t@Test", "+\tpublic void annotationsAreCached() {", "+\t\tTestClass testClass= new TestClass(ManyMethods.class) {\t\t\t", "+\t\t\t@Override", "+\t\t\tprotected Annotation[] computeAnnotations(FrameworkMethod testMethod) {", "+\t\t\t\tfComputations++;", "+\t\t\t\treturn super.computeAnnotations(testMethod);", "+\t\t\t}", "+\t\t};", "+\t\ttestClass.getAnnotatedMethods(Test.class);", "+\t\tfComputations= 0;", "+\t\ttestClass.getAnnotatedMethods(Test.class);", "+\t\tassertEquals(0, fComputations);"]}]}
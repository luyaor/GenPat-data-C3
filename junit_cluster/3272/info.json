{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2978271889ae948dff69df93376879d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08ce8bedbd9b8604117f77017f2e7485", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "308768863b78f3a6345e25d7f9d35892c2de5a01", "commitAfterChange": "81b50e9f3bdb66543d07e7349026bd3b447f433e", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \t@SuppressWarnings(\"deprecation\") \tprivate Statement withMethodRules(FrameworkMethod method, Object target, \t\t\tStatement result)", "signatureAfterChange": "  \t@SuppressWarnings(\"deprecation\") \tprivate Statement withMethodRules(FrameworkMethod method, Object target, \t\t\tStatement result)", "diff": ["-\t\tfor (org.junit.rules.MethodRule each : getTestClass().getAnnotatedFieldValues(target,", "-\t\t\t\tRule.class, org.junit.rules.MethodRule.class))", "-\t\t\tresult= each.apply(result, method, target);", "+\t\tList<TestRule> testRules= getTestRules(target);", "+\t\tfor (org.junit.rules.MethodRule each : getMethodRules(target))", "+\t\t\tif (! testRules.contains(each))", "+\t\t\t\tresult= each.apply(result, method, target);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fda759800ce10a731f91a00984faa63", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "49d62f902ba7dba44b0b2b3b71e45004c667b2d5", "commitAfterChange": "faba199e389e3c977fc5573315790a5cde5f7611", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 29, "signatureBeforeChange": " \tprotected List<TestRule> getTestRules(Object target)", "signatureAfterChange": " \tprotected List<TestRule> getTestRules(Object target)", "diff": ["-\t\treturn getTestClass().getAnnotatedFieldValues(target,", "+\t\tList<TestRule> result = getTestClass().getAnnotatedMethodValues(target,", "-\t}", "+\t\t\t", "+\t\tresult.addAll(getTestClass().getAnnotatedFieldValues(target,", "+\t\t\t\tRule.class, TestRule.class));", "+\t\treturn result;", "+\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8357201bfcde8e7ebf8222fdf2a4c783", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02fc23021dc9d59c76ee4ae6acb2c2fe", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/results/ResultMatchersTest.java", "commitBeforeChange": "052fc095d5b4a8af643d0e4402a504716ad8eb03", "commitAfterChange": "231241782c199d39943f742d0abe57057b0b785c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate Result createResult() throws Exception", "signatureAfterChange": " \t \tprivate PrintableResult createPrintableResult() throws Exception", "diff": ["-\tprivate Result createResult() throws Exception {", "-\t\tResult result= new Result();", "-\t\tresult.createListener().testFailure(new Failure(null, new IllegalArgumentException()));", "-\t\treturn result;", "+\tprivate PrintableResult createPrintableResult() throws Exception {", "+\t\treturn new PrintableResult(Arrays.asList(new Failure(Description.TEST_MECHANISM, new IllegalArgumentException())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d2a37b31564cab0fecacef6f3570357", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest.java", "commitBeforeChange": "e012e06dc326394a3a834d974e9af3fea0e6df91", "commitAfterChange": "2ade5fd3aad123d6507b59ed5d48c8f030314f00", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Test \tpublic void theoryMeansOnlyAssumeShouldFail() throws InitializationError", "signatureAfterChange": "      @Test     public void theoryMeansOnlyAssumeShouldFail() throws InitializationError", "diff": ["-\t@Test", "-\tpublic void theoryMeansOnlyAssumeShouldFail() throws InitializationError {", "-\t\tJUnitCore junitRunner = new JUnitCore();", "-\t\tRunner theoryRunner = new Theories(TheoryWithNoUnassumedParameters.class);", "-\t\tRequest request = Request.runner(theoryRunner);", "-\t\tResult result = junitRunner.run(request);", "-\t\tAssert.assertEquals(1, result.getFailureCount());", "-\t}", "+    @Test", "+    public void theoryMeansOnlyAssumeShouldFail() throws InitializationError {", "+        Result result = runTheoryClass(TheoryWithNoUnassumedParameters.class);", "+        Assert.assertEquals(1, result.getFailureCount());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dba9c3c70fd375817353cd80c5a35a3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "41cbbf7e228b8f7908e672a79863ff970316b120", "commitAfterChange": "421ab330509a53302f56b209595f55b23bfdfc0e", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t \t@Ignore \t@Test public void junit3TestsAreRunOnce() throws Exception", "signatureAfterChange": "  \t@Test \tpublic void junit3TestsAreRunOnce() throws Exception", "diff": ["-\t", "-\t@Ignore", "-\t@Test public void junit3TestsAreRunOnce() throws Exception {", "-\t\tResult result= fMax.run(Request.aClass(TwoOldTests.class), new JUnitCore());", "-\t\tassertEquals(2, result.getRunCount());\t\t", "+", "+\t@Test", "+\tpublic void junit3TestsAreRunOnce() throws Exception {", "+\t\tResult result= fMax.run(Request.aClass(TwoOldTests.class),", "+\t\t\t\tnew JUnitCore());", "+\t\tassertEquals(2, result.getRunCount());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81b3be986a2545c03733e12b0613fdfc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/manipulation/SingleMethodTest.java", "commitBeforeChange": "a6368e40e787e7a23c9f1e58d6a47bf9fa2d0a2c", "commitAfterChange": "94ebd93396420bcd03ab99a352e38df822d59f67", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t@Test public void parameterizedFilterToSingleMethod() throws Exception", "signatureAfterChange": "  \t@Test public void parameterizedFilterToSingleMethod() throws Exception", "diff": ["+", "+\t@Test public void parameterizedFilterToSingleMethod() throws Exception {", "+\t\tcount = 0;", "+\t\tRunner runner = Request.method(ParameterizedOneTimeSetup.class,", "+\t\t\t\t\"one[0]\").getRunner();", "+\t\tResult result = new JUnitCore().run(runner);", "+", "+\t\tassertEquals(1, result.getRunCount());", "+\t}", "-", "-\t@Test public void parameterizedFilterToSingleMethod() throws Exception {", "-\t\tRunner runner = Request.method(ParameterizedOneTimeSetup.class,", "-\t\t\t\t\"one[0]\").getRunner();", "-\t\tResult result = new JUnitCore().run(runner);", "-", "-\t\tassertEquals(1, result.getRunCount());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5b6a5c843841ae6d791bdb05349f68b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest.java", "commitBeforeChange": "e012e06dc326394a3a834d974e9af3fea0e6df91", "commitAfterChange": "5c2070d7cf981e2e103aef6fd0ef64c473331325", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Test \tpublic void theoryMeansOnlyAssumeShouldFail() throws InitializationError", "signatureAfterChange": "  \t@Test \tpublic void theoryMeansOnlyAssumeShouldFail() throws InitializationError", "diff": ["-\t\tJUnitCore junitRunner = new JUnitCore();", "-\t\tRunner theoryRunner = new Theories(TheoryWithNoUnassumedParameters.class);", "-\t\tRequest request = Request.runner(theoryRunner);", "-\t\tResult result = junitRunner.run(request);", "+\t\tResult result = runTheoryClass(TheoryWithNoUnassumedParameters.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7284aa0464143f89ed1ec643e396b14", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "b294a12beffb7952de6aef3198d47f7cd08486d7", "commitAfterChange": "fa6483264ce2530585b374c276c2266d0d0c4ef0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \t@Ignore \t@Test public void junit3TestsAreOnlyIncludedOnceWhenExpandingForSorting() throws Exception", "signatureAfterChange": " \t \t@Test public void saffSqueezeExample() throws Exception", "diff": ["-\t@Test public void junit3TestsAreOnlyIncludedOnceWhenExpandingForSorting() throws Exception {", "+\t@Test public void saffSqueezeExample() throws Exception {", "+\t\tfinal Description method= Description.createTestDescription(TwoOldTests.class, \"testOne\");", "+\t\tFilter filter= Filter.matchDescription(method);", "+\t\tJUnit38ClassRunner child= new JUnit38ClassRunner(TwoOldTests.class);", "+\t\tchild.filter(filter);", "+\t\tassertEquals(1, child.testCount());", "+\t}"]}]}
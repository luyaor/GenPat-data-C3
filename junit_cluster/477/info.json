{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5cd3a39547dd3668e400ae6e3430782", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18d1642fe23ddc7ae71a9b1a858ee3e3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ParentRunner.java", "commitBeforeChange": "d8b6eb74e0e3466d66c9ff75e55f087c09a959b1", "commitAfterChange": "e2033a1894451c2b90ab4c43ff1eed0aad3f14ce", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprivate List<T> getFilteredChildren()", "signatureAfterChange": "  \tprivate List<T> getFilteredChildren()", "diff": ["-\t\tif (fChildren == null)", "-\t\t\tfChildren = computeFilteredChildren();", "-\t\treturn fChildren;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49bcde116138278c315836ca7a2b9eff", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestClassMethodsRunner.java", "commitBeforeChange": "890b7b977e42360aa8975c8535fc66bfd8d8cb3e", "commitAfterChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "diff": ["-\t\t\ttestAborted(notifier, methodDescription(method), e.getCause());", "-\t\t\treturn;\t\t\t", "-\t\t} catch (Exception e) {", "-\t\t\ttestAborted(notifier, methodDescription(method), e);", "+\t\t\ttestAborted(notifier, method, e.getCause());", "+\t\t\treturn;", "+\t\t} catch (Throwable e) {", "+\t\t\ttestAborted(notifier, method, e);", "-\t\tcreateMethodRunner(test, method, notifier).run();", "+", "+\t\tTestMethod testMethod= new TestMethod(test, method,", "+\t\t\t\tmethodDescription(method));", "+\t\ttry {", "+\t\t\tMethodRunner runner= testMethod.findCustomRunner(this);", "+\t\t\tif (runner == null)", "+\t\t\t\tcreateMethodRunner(test, method, notifier).run();", "+\t\t\telse {", "+\t\t\t\trunner.run(testMethod, notifier);", "+\t\t\t}", "+\t\t} catch (Exception e) {", "+\t\t\tThrowable exception= new RuntimeException(", "+\t\t\t\t\t\"Exception creating custom method runner\", e);", "+\t\t\ttestAborted(notifier, method, exception);", "+\t\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "470fd3df84561750320f0b123d180f38", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27a35d524d73ee3aa2f80fd2b2222538", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tTest createTest(Description description)", "signatureAfterChange": "      Test createTest(Description description)", "diff": ["-\tTest createTest(Description description) {", "-\t\tif (description.isTest())", "-\t\t\treturn new JUnit4TestCaseFacade(description);", "-\t\telse {", "-\t\t\tTestSuite suite = new TestSuite(description.getDisplayName());", "-\t\t\tfor (Description child : description.getChildren())", "-\t\t\t\tsuite.addTest(asTest(child));", "-\t\t\treturn suite;", "-\t\t}", "-\t}", "+    Test createTest(Description description) {", "+        if (description.isTest()) {", "+            return new JUnit4TestCaseFacade(description);", "+        } else {", "+            TestSuite suite = new TestSuite(description.getDisplayName());", "+            for (Description child : description.getChildren()) {", "+                suite.addTest(asTest(child));", "+            }", "+            return suite;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f580d761a03dd4b9c92188d08b23f4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapter.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate Description removeIgnored(Description description)", "signatureAfterChange": "      private Description removeIgnored(Description description)", "diff": ["-\tprivate Description removeIgnored(Description description) {", "-\t\tif (isIgnored(description))", "-\t\t\treturn Description.EMPTY;", "-\t\tDescription result = description.childlessCopy();", "-\t\tfor (Description each : description.getChildren()) {", "-\t\t\tDescription child= removeIgnored(each);", "-\t\t\tif (! child.isEmpty())", "-\t\t\t\tresult.addChild(child);", "-\t\t}", "-\t\treturn result;", "-\t}", "+    private Description removeIgnored(Description description) {", "+        if (isIgnored(description)) {", "+            return Description.EMPTY;", "+        }", "+        Description result = description.childlessCopy();", "+        for (Description each : description.getChildren()) {", "+            Description child = removeIgnored(each);", "+            if (!child.isEmpty()) {", "+                result.addChild(child);", "+            }", "+        }", "+        return result;", "+    }"]}]}
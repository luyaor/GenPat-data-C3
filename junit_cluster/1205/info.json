{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cf8b0e2521e8c20f1c013b9c2249604", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "076769cc301ebf576e708858745fd122", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "412519b20d4cb96466c03466fa003068e9fb5eca", "commitAfterChange": "8e3f361443ddf8bca21c3db661c75d374fe78dba", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": " \t \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "diff": ["-\t\tDescription description= describeChild(method);", "-\t\tEachTestNotifier eachNotifier= new EachTestNotifier(notifier,", "-\t\t\t\tdescription);", "-\t\tnotifying(method, childBlock(method)).run(eachNotifier);", "+\t\tEachTestNotifier eachNotifier= makeNotifier(method, notifier);", "+\t\tif (method.isIgnored()) {", "+\t\t\teachNotifier.fireTestIgnored();", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\teachNotifier.fireTestStarted();", "+\t\ttry {", "+\t\t\tchildBlock(method).evaluate();", "+\t\t} catch (AssumptionViolatedException e) {", "+\t\t\teachNotifier.fireTestIgnored();", "+\t\t} catch (Throwable e) {", "+\t\t\teachNotifier.addFailure(e);", "+\t\t} finally {", "+\t\t\teachNotifier.fireTestFinished();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "585265317ca80c668e780f000eb24637", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": " \t@Override \tpublic void runChild(FrameworkMethod method, RunNotifier notifier)", "diff": ["+\t// TODO: public?", "-\tprotected void runChild(FrameworkMethod method, RunNotifier notifier) {", "+\tpublic void runChild(FrameworkMethod method, RunNotifier notifier) {", "-\t\t\teachNotifier.fireTestIgnored();", "-\t\t\treturn;", "+\t\t\trunIgnored(eachNotifier);", "+\t\t} else {", "+\t\t\trunNotIgnored(method, eachNotifier);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d6da2870e37f8587ba0c09749431e14", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void runChild(TestMethod method, RunNotifier notifier)", "diff": ["-", "-\tprotected void runMethod(TestMethod method, RunNotifier notifier) {", "-\t\tDescription description= methodDescription(method);", "-\t\tEachTestNotifier eachNotifier= new EachTestNotifier(notifier, description);", "-\t\tnotifying(method, chain(method)).run(eachNotifier);", "+\tprotected void runChild(TestMethod method, RunNotifier notifier) {", "+\t\tDescription description= describeChild(method);", "+\t\tEachTestNotifier eachNotifier= new EachTestNotifier(notifier,", "+\t\t\t\tdescription);", "+\t\tnotifying(method, childBlock(method)).run(eachNotifier);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a09b3ed382c7bb941819dae4f9f82cd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "diff": ["+\tprotected void invokeTestMethod(Method method, RunNotifier notifier) {", "+\t\tDescription description= methodDescription(method);", "+\t\t\ttest= createTest();", "+\t\t} catch (InvocationTargetException e) {", "+\t\t\ttestAborted(notifier, description, e.getCause());", "+\t\t\treturn;\t\t\t", "+\t\t} catch (Exception e) {", "+\t\t\ttestAborted(notifier, description, e);", "+\t\t\treturn;", "-\t", "-\t@Override", "-\tprotected void runChild(FrameworkMethod method, RunNotifier notifier) {", "-\t\tDescription description= describeChild(method);", "-\t\tEachTestNotifier eachNotifier= new EachTestNotifier(notifier,", "-\t\t\t\tdescription);", "-\t\tnotifying(method, childBlock(method)).run(eachNotifier);", "+\t\tTestMethod testMethod= wrapMethod(method);", "+\t\tnew MethodRoadie(test, testMethod, notifier, description).run();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cbb3c09441af187e81abf3cf2b2f3a6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "8ff0b44e3fb0c1c56a1dc6290c3b6828a5a8f9bf", "commitAfterChange": "bed58a573c373d57d64fa369f58b2a8f0dbee3d7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": "  \t@Override \tprotected void runChild(final FrameworkMethod method, RunNotifier notifier)", "diff": ["-\tprotected void runChild(FrameworkMethod method, RunNotifier notifier) {", "-\t\tEachTestNotifier eachNotifier= makeNotifier(method, notifier);", "+\tprotected void runChild(final FrameworkMethod method, RunNotifier notifier) {", "+\t\tDescription description= describeChild(method);", "-\t\t\trunIgnored(eachNotifier);", "+\t\t\tnotifier.fireTestIgnored(description);", "-\t\t\trunNotIgnored(method, eachNotifier);", "+\t\t\trunLeaf(methodBlock(method), description, notifier);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5692527fea128ce6e0c7fa0040e05f3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "1fcd990f60518c941a44bae2596392021614a20b", "commitAfterChange": "e07e59eb9d24f6e4fa85dd99f311c1feca6ea983", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t@Override \tprotected void runChild(Throwable child, RunNotifier notifier)", "signatureAfterChange": "  \tprivate void runCause(Throwable child, RunNotifier notifier)", "diff": ["-\t@Override", "-\tprotected void runChild(Throwable child, RunNotifier notifier) {", "-\t\tDescription description= describeChild(child);", "-\t\tnotifier.fireTestStarted(description);", "-\t\tnotifier.fireTestFailure(new Failure(description, child));", "-\t\tnotifier.fireTestFinished(description);", "-\t}", "+", "+\tprivate void runCause(Throwable child, RunNotifier notifier) {", "+\t\tDescription description= describeCause(child);", "+\t\tnotifier.fireTestStarted(description);", "+\t\tnotifier.fireTestFailure(new Failure(description, child));", "+\t\tnotifier.fireTestFinished(description);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd2a655f82dc66b78a2de38046006812", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "57302f0df76fba83ba72a676bd660efeb5881af6", "commitAfterChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(TestMethod method, RunNotifier notifier)", "diff": ["-\tprotected void invokeTestMethod(Method method, RunNotifier notifier) {", "+\tprotected void invokeTestMethod(TestMethod method, RunNotifier notifier) {", "-\t\t\ttest= createTest();", "-\t\t} catch (InvocationTargetException e) { //TODO looks like this could use ExplosiveMethod", "-\t\t\tnotifier.testAborted(description, e.getCause());", "-\t\t\treturn;\t\t\t", "-\t\t} catch (Exception e) {", "+\t\t\ttest= new ReflectiveCallable() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "+\t\t\t\t\treturn createTest();", "+\t\t\t\t}", "+\t\t\t}.run();", "+\t\t} catch (Throwable e) {", "-\t\tJUnit4MethodRunner testMethod= wrapMethod(method);", "-\t\ttestMethod.run(new Roadie(notifier, description, test));", "+\t\trun(new Roadie(notifier, description, test), method);"]}]}
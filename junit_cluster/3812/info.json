{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eafca362c10a50750508a7428b6c41e9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ba10fd194b891a48a16d63da0a2a06a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/AssumptionTest.java", "commitBeforeChange": "22a6c6857eaef07a5d54fecfaea8db7c66f65de7", "commitAfterChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t@Test \tpublic void assumeNotNullIncludesParameterList()", "signatureAfterChange": "  \t@Test \tpublic void assumeNotNullIncludesParameterList()", "diff": ["-\t\t\tassertThat(e.getMessage(), Matchers.containsString(\"1, 2, null\"));", "+\t\t\tassertThat(e.getMessage(), containsString(\"1, 2, null\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "343d7eae773227f897864f466273c26f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/matchers/EachTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Test \tpublic void eachDescription()", "signatureAfterChange": " \t@Test \tpublic void eachDescription()", "diff": ["-\t\tassertThat(Each.each(Matchers.is(\"a\")).toString(), is(\"each is \\\"a\\\"\"));", "+\t\tassertThat(Each.each(is(\"a\")).toString(), is(\"each is \\\"a\\\"\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4590baa76e9da7adddd1011cda1a81ce", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/imposterization/ThrownMatcher.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic static ThrownMatcher assertReturnsNormally()", "signatureAfterChange": "  \tpublic static ThrownMatcher assertReturnsNormally()", "diff": ["-\t\treturn assertThrownException(Matchers.is(((Object) null)));", "+\t\treturn assertThrownException(is(((Object) null)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45bd8ed7d8db716652e9b8b8c68f659d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/results/PrintableResultTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Theory \tpublic void includeMultipleFailures(String secondExceptionName)", "signatureAfterChange": "  \t@Theory \tpublic void includeMultipleFailures(String secondExceptionName)", "diff": ["-\t\tassertThat(backtrace.toString(), Matchers", "-\t\t\t\t.containsString(secondExceptionName));", "+\t\tassertThat(backtrace.toString(), containsString(secondExceptionName));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c43f9501494b474a968a6c90ec788c5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/imposterization/PopperImposterizerTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Test \tpublic void canWrapImposterizedObjects()", "signatureAfterChange": " \t@Test \tpublic void canWrapImposterizedObjects()", "diff": ["-\t\t\t\tMatchers.notNullValue());", "+\t\t\t\tnotNullValue());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2af6972f334a042591cea79120b0b73", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "bd7bff7c4ca18e1d0eab5260e585d3914e5fa53d", "commitAfterChange": "6acc164b4125da775cccd4035c1b99e9d404bacd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic JUnit4ClassRunner(Class<?> klass) throws InitializationError", "signatureAfterChange": "  \tpublic JUnit4ClassRunner(Class<?> klass) throws InitializationError", "diff": ["-\t\tfTestMethods= fTestClass.getTestMethods();", "+\t\tfTestMethods= getTestMethods();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7da68b8195ab568443d5e31a6a26825", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/imposterization/AssumePassingTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@SuppressWarnings(\"unchecked\") \t@Test \tpublic void removedParameterizedFailureWhenZeroParams()", "signatureAfterChange": "  \t@SuppressWarnings(\"unchecked\") \t@Test \tpublic void removedParameterizedFailureWhenZeroParams()", "diff": ["-\t\tassertThat(onlyIfPassingFailures().get(0).getException(), Matchers", "-\t\t\t\t.is(AssertionError.class));", "+\t\tassertThat(onlyIfPassingFailures().get(0).getException(), is(AssertionError.class));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd63f47e523bd5bf649866676d51e644", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/test/runner/ParameterizedAssertionErrorTest.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@SuppressWarnings(\"unchecked\") \t@Theory(nullsAccepted= false) \tpublic void buildParameterizedAssertionError(String methodName, String param)", "signatureAfterChange": "  \t@SuppressWarnings(\"unchecked\") \t@Theory(nullsAccepted= false) \tpublic void buildParameterizedAssertionError(String methodName, String param)", "diff": ["-\t\t\t\tmethodName, param).toString(), Matchers", "-\t\t\t\t.containsString(methodName));", "+\t\t\t\tmethodName, param).toString(), containsString(methodName));"]}]}
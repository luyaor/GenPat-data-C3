{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2aa926af4aef249ea69a60e946c5f67d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11e58c57dbd91702157d54a37950ffaa", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": "          private boolean hasCorrectCategoryAnnotation(Description description)", "signatureAfterChange": "          private boolean hasCorrectCategoryAnnotation(Description description)", "diff": ["-            List<Class<?>> categories = categories(description);", "-            if (categories.isEmpty()) {", "-                return fIncluded == null;", "+            final Set<Class<?>> childCategories= categories(description);", "+", "+            // If a child has no categories, immediately return.", "+            if (childCategories.isEmpty()) {", "+                return fIncluded.isEmpty();", "-            for (Class<?> each : categories) {", "-                if (fExcluded != null && fExcluded.isAssignableFrom(each)) {", "-                    return false;", "+", "+            if (!fExcluded.isEmpty()) {", "+                if (fExcludedAny) {", "+                    if (matchesAnyParentCategories(childCategories, fExcluded)) {", "+                        return false;", "+                    }", "+                } else {", "+                    if (matchesAllParentCategories(childCategories, fExcluded)) {", "+                        return false;", "+                    }", "-            for (Class<?> each : categories) {", "-                if (fIncluded == null || fIncluded.isAssignableFrom(each)) {", "+", "+            // Couldn't be excluded, and with no suite's included categories treated as should run.", "+            if (fIncluded.isEmpty()) {", "+                return true;", "+            }", "+", "+            if (!fIncluded.isEmpty()) {", "+                if (fIncludedAny) {", "+                    return matchesAnyParentCategories(childCategories, fIncluded);", "+                } else {", "+                    return matchesAllParentCategories(childCategories, fIncluded);", "+                }", "+            }", "+", "+            return false;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ef8ce1fb424612c03bf72c5d873b5b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprotected Statement withPotentialTimeout(TestAnnotation annotation, \t\t\tStatement next)", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tprotected Statement withPotentialTimeout(TestAnnotation annotation,", "-\t\t\tStatement next) {", "-\t\tlong timeout= annotation.getTimeout();", "-\t\treturn timeout > 0 ? new FailOnTimeout(next, timeout) : next;", "+\tpublic void filter(Filter filter) throws NoTestsRemainException {", "+\t\tfor (Iterator<Method> iter= fTestMethods.iterator(); iter.hasNext();) {", "+\t\t\tMethod method= iter.next();", "+\t\t\tif (!filter.shouldRun(methodDescription(method)))", "+\t\t\t\titer.remove();", "+\t\t}", "+\t\tif (fTestMethods.isEmpty())", "+\t\t\tthrow new NoTestsRemainException();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "288169c0d81b52ec727299f218a2eaca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18aa9380aef6829c64dcbd3162d0ebc4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/FilterFactoryParams.java", "commitBeforeChange": "0a9a389570a171b67c3155d312f2e90bdab5aaaf", "commitAfterChange": "318adee43493447e22bbea89e0f17260e0186a14", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Filter apply(String filterFactoryFqcn)             throws FilterFactory.FilterNotCreatedException, FilterFactoryFactory.FilterFactoryNotFoundException", "signatureAfterChange": "     public Filter apply(String filterFactoryFqcn)             throws FilterFactory.FilterNotCreatedException, FilterFactoryNotCreatedException", "diff": ["+     */", "-            throws FilterFactory.FilterNotCreatedException, FilterFactoryFactory.FilterFactoryNotFoundException {", "+            throws FilterFactory.FilterNotCreatedException, FilterFactoryNotCreatedException {", "-            return apply(Class.forName(filterFactoryFqcn, true, Thread.currentThread().getContextClassLoader())", "+            FilterFactory filterFactory = ClassUtil.getClass(filterFactoryFqcn)", "-                    .newInstance());", "+                    .newInstance();", "+", "+            return apply(filterFactory);", "+        } catch (FilterFactory.FilterNotCreatedException e) {", "+            throw e;", "-            throw new FilterFactoryFactory.FilterFactoryNotFoundException(e.getMessage());", "+            throw new FilterFactoryNotCreatedException(e.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "564c224ce6b34e7600e6307c737717b4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/links/ExpectingException.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void run(final FailureListener listener)", "signatureAfterChange": " \t \t@Override \tpublic void run() throws Exception", "diff": ["-", "+\t", "-\tpublic void run(final FailureListener listener) {", "-\t\tFailureListener expectingListener= new FailureListener() {", "-\t\t\t@Override", "-\t\t\tpublic void handleFailure(Throwable error) {", "-\t\t\t\tif (!fExpected.isAssignableFrom(error.getClass())) {", "-\t\t\t\t\tString message= \"Unexpected exception, expected<\"", "+\tpublic void run() throws Exception {", "+\t\tboolean complete = false;", "+\t\ttry {", "+\t\t\tfNext.run();", "+\t\t\tcomplete = true;", "+\t\t} catch (Throwable e) {", "+\t\t\tif (!fExpected.isAssignableFrom(e.getClass())) {", "+\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t\t+ error.getClass().getName() + \">\";", "-\t\t\t\t\tlistener.addFailure(new Exception(message, error));", "-\t\t\t\t}", "+\t\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "+\t\t\t\tthrow new Exception(message, e);", "-\t\t};", "-\t\t", "-\t\tfNext.run(expectingListener);", "-\t\t", "-\t\tif (!expectingListener.failureSeen())", "-\t\t\tlistener.addFailure(new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t+ fExpected.getName()));", "+\t\t}", "+\t\tif (complete)", "+\t\t\tthrow new AssertionError(\"Expected exception: \"", "+\t\t\t\t\t+ fExpected.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "634651054e577bf805cd3616a3429bde", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/links/WithTimeout.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void run(final FailureListener listener)", "signatureAfterChange": "  \t@Override \tpublic void run() throws Throwable", "diff": ["-\tpublic void run(final FailureListener listener) {", "+\tpublic void run() throws Throwable {", "-\t\t\t\tfNext.run(listener);", "+\t\t\t\t// TODO: (Oct 12, 2007 10:15:08 AM) Use MultipleFailureException", "+\t\t\t\t// TODO: (Oct 12, 2007 10:15:19 AM) Use MultipleFailureException in construction", "+\t\t\t\t// TODO: (Oct 12, 2007 10:15:29 AM) Convert to Statement?", "+", "+", "+", "+\t\t\t\ttry {", "+\t\t\t\t\tfNext.run();", "+\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\tthrow e;", "+\t\t\t\t} catch (Error e) {", "+\t\t\t\t\tthrow e;", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t// TODO: (Oct 5, 2007 11:27:11 AM) Now what?  Is there a useful thing to do with this?", "+\t\t\t\t}", "-\t\t\tlistener.addFailure(new Exception(String.format(", "-\t\t\t\t\t\"test timed out after %d milliseconds\", fTimeout)));", "+\t\t\tthrow new Exception(String.format(", "+\t\t\t\t\t\"test timed out after %d milliseconds\", fTimeout));", "-\t\t\tlistener.addFailure(e.getCause());", "-\t\t} catch (InterruptedException e) {", "-\t\t\tlistener.addFailure(e);", "+\t\t\tthrow e.getCause();"]}]}
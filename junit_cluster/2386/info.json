{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "254127d736cbb6484b71ba8fcb58b4eb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "403eedc1b6c8c92377f9c677f3759a9a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapter.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate Description removeIgnored(Description description)", "signatureAfterChange": "  \tprivate Filter removeIgnored()", "diff": ["-\tprivate Description removeIgnored(Description description) {", "-\t\tif (isIgnored(description))", "-\t\t\treturn Description.EMPTY;", "-\t\tDescription result = description.childlessCopy();", "-\t\tfor (Description each : description.getChildren()) {", "-\t\t\tDescription child= removeIgnored(each);", "-\t\t\tif (! child.isEmpty())", "-\t\t\t\tresult.addChild(child);", "-\t\t}", "-\t\treturn result;", "+\tprivate Filter removeIgnored() {", "+\t\treturn new Filter() {\t\t\t", "+\t\t\t@Override", "+\t\t\tpublic boolean shouldRun(Description description) {", "+\t\t\t\treturn !isIgnored(description);", "+\t\t\t}", "+\t\t\t", "+\t\t\t@Override", "+\t\t\tpublic String describe() {", "+\t\t\t\treturn \"not ignored\";", "+\t\t\t}", "+\t\t};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aabc3cb2bcca56a037be3aff8dc1c16c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapter.java", "commitBeforeChange": "2f9b53dbecad010dbb7e7cfff3a11476b7d2208a", "commitAfterChange": "870289f3272917f312de6902b8b6bdc43552d4b7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate Description removeIgnored(Description description)", "signatureAfterChange": "  \tprivate Filter removeIgnored()", "diff": ["-\tprivate Description removeIgnored(Description description) {", "-\t\tif (isIgnored(description))", "-\t\t\treturn Description.EMPTY;", "-\t\tDescription result = description.childlessCopy();", "-\t\tfor (Description each : description.getChildren()) {", "-\t\t\tDescription child= removeIgnored(each);", "-\t\t\tif (! child.isEmpty())", "-\t\t\t\tresult.addChild(child);", "-\t\t}", "-\t\treturn result;", "+\tprivate Filter removeIgnored() {", "+\t\treturn new Filter() {\t\t\t", "+\t\t\t@Override", "+\t\t\tpublic boolean shouldRun(Description description) {", "+\t\t\t\treturn !isIgnored(description);", "+\t\t\t}", "+\t\t\t", "+\t\t\t@Override", "+\t\t\tpublic String describe() {", "+\t\t\t\treturn \"not ignored\";", "+\t\t\t}", "+\t\t};"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e74bc8ff2a5f7ba2c652d37150cf9756", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3ac533ca61763a9afe6bc39d7b659dd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public TestClass(Class<?> klass)", "signatureAfterChange": "     public TestClass(Class<?> clazz)", "diff": ["-    public TestClass(Class<?> klass) {", "-        fClass = klass;", "-        if (klass != null && klass.getConstructors().length > 1) {", "+    public TestClass(Class<?> clazz) {", "+        this.clazz = clazz;", "+        if (clazz != null && clazz.getConstructors().length > 1) {", "-        fMethodsForAnnotations = makeDeeplyUnmodifiable(methodsForAnnotations);", "-        fFieldsForAnnotations = makeDeeplyUnmodifiable(fieldsForAnnotations);", "+        this.methodsForAnnotations = makeDeeplyUnmodifiable(methodsForAnnotations);", "+        this.fieldsForAnnotations = makeDeeplyUnmodifiable(fieldsForAnnotations);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f48d0136f81d700a47cf5ca10ea9f40c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/CategoryValidator.java", "commitBeforeChange": "f5e7e1ff180bb17e4f9df702a038e06a974f78f6", "commitAfterChange": "fe5d86eba71a1f59dbbed09de4add01cc20420c0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Override     public List<Throwable> validateAnnotatedMethod(Method method)", "signatureAfterChange": "     @Override     public List<Exception> validateAnnotatedMethod(Method method)", "diff": ["-    public List<Throwable> validateAnnotatedMethod(Method method) {", "-        List<Throwable> errors = new ArrayList<Throwable>();", "+    public List<Exception> validateAnnotatedMethod(Method method) {", "+        List<Exception> errors = new ArrayList<Exception>();", "-            for (Class clazz : fIncompatibleAnnotations) {", "+            for (Class clazz : INCOMPATIBLE_ANNOTATIONS) {", "-        return Collections.unmodifiableList(errors);", "+        return unmodifiableList(errors);"]}]}
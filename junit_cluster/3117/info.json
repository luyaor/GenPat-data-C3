{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cff418b9db128d439c26b4c14982fa8d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67d5d3bfbe887836b84f3f335a9589bc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "5c2070d7cf981e2e103aef6fd0ef64c473331325", "commitAfterChange": "50e3d1bc87b4b16f0617b6212252363f499397ab", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) throws Throwable", "signatureAfterChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) throws Throwable", "diff": ["-            addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "+            try {", "+                addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "+            } catch (Throwable t) {", "+                DataPoints annotation = dataPointsMethod.getAnnotation(DataPoints.class);", "+                if (annotation != null) {", "+                    for (Class<? extends Throwable> ignored : annotation.ignoredExceptions()) {", "+                        if (ignored.isAssignableFrom(t.getClass())) {", "+                            return;", "+                        }", "+                    }", "+                }", "+                throw t;", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc3c04c8bdd6a40a9ad6f6d70040789b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "5c2070d7cf981e2e103aef6fd0ef64c473331325", "commitAfterChange": "50e3d1bc87b4b16f0617b6212252363f499397ab", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          @Override         public Object getValue() throws CouldNotGenerateValueException", "signatureAfterChange": "          @Override         public Object getValue() throws CouldNotGenerateValueException", "diff": ["+                DataPoint annotation = fMethod.getAnnotation(DataPoint.class); ", "+                if (annotation != null) {", "+                    for (Class<? extends Throwable> ignorable : annotation.ignoredExceptions()) {", "+                        Assume.assumeThat(e, not(instanceOf(ignorable)));", "+                    }", "+                }", "+                ", "-                // do nothing, just look for more values"]}]}
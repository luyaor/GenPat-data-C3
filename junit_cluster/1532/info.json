{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "102db2c5b50b5be8330aaef611301caf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d01ad67f142eb83e048b4d0239ad4f4", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestRunner.java", "commitBeforeChange": "f268f458843fc84e83c244a5c271cc71386eb1cf", "commitAfterChange": "4b1869ebb8002e5d0b82ab55460f6126043c9ec4", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 49, "signatureBeforeChange": " \t \tprivate boolean isErrorSelected()", "signatureAfterChange": " \t\t \tpublic void browseTestClasses()", "diff": ["-\t", "-\tprivate boolean isErrorSelected() {", "-\t\treturn fFailureList.getSelectedIndex() != -1;", "+\t\t", "+\tpublic void browseTestClasses() {", "+\t\tTestCollector collector= createTestCollector();\t\t", "+\t\tTestSelector selector= new TestSelector(fFrame, collector);", "+\t\tif (selector.isEmpty()) {", "+\t\t\tJOptionPane.showMessageDialog(fFrame, \"No Test Cases found.\\nCheck that the configured \\'TestCollector\\' is supported on this platform.\");", "+\t\t\treturn;", "+\t\t}", "+\t\tselector.show();", "+\t\tString className= selector.getSelectedItem();", "+\t\tif (className != null)", "+\t\t\tsetSuite(className);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "709783e5612d232d0b5cdc40e5363e92", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestRunner.java", "commitBeforeChange": "f268f458843fc84e83c244a5c271cc71386eb1cf", "commitAfterChange": "4b1869ebb8002e5d0b82ab55460f6126043c9ec4", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t\t\t \t\tpublic Component getListCellRendererComponent( \t\t\tJList list, Object value, int modelIndex,  \t\t\tboolean isSelected, boolean cellHasFocus)", "signatureAfterChange": " \t\t\t \tprotected FailureDetailView createFailureDetailView()", "diff": ["-\t\t\t", "-\t\tpublic Component getListCellRendererComponent(", "-\t\t\tJList list, Object value, int modelIndex, ", "-\t\t\tboolean isSelected, boolean cellHasFocus) {", "-", "-\t\t\tTestFailure failure= (TestFailure)value;", "-\t\t\tString text= failure.failedTest().toString();", "-\t\t\tString msg= failure.thrownException().getMessage();", "-\t\t\tif (msg != null) ", "-\t\t\t\ttext+= \":\" + BaseTestRunner.truncate(msg); ", "- ", "-\t\t\tif (failure.thrownException() instanceof AssertionFailedError) { ", "-\t\t\t\tif (fFailureIcon != null)", "-\t    \t\t\t\tsetIcon(fFailureIcon);", "-\t\t\t}", "-\t    \telse {", "-\t    \t\tif (fErrorIcon != null)", "-\t    \t\t\tsetIcon(fErrorIcon);", "-\t    \t}", "-\t    \treturn super.getListCellRendererComponent(list, text, modelIndex, isSelected, cellHasFocus);", "-\t\t}", "+\t\t\t", "+\tprotected FailureDetailView createFailureDetailView() {", "+\t\tString className= BaseTestRunner.getPreference(FAILUREDETAILVIEW_KEY);", "+\t\tif (className != null) {\t\t\t", "+\t\t\tClass viewClass= null;", "+\t\t\ttry {", "+\t\t\t\tviewClass= Class.forName(className);", "+\t\t\t\treturn (FailureDetailView)viewClass.newInstance();", "+\t\t\t} catch(Exception e) {", "+\t\t\t\tJOptionPane.showMessageDialog(fFrame, \"Could not create Failure DetailView - using default view\");", "+\t\t}", "+\t\treturn new DefaultFailureDetailView();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca2e7f5fa3139c4a651c04fd316bc7a4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f04f027dde35ef84c16dc268c6e215a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Suite.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \t@Override \tpublic void run(final RunNotifier notifier)", "signatureAfterChange": "  \tpublic void sort(final Sorter sorter)", "diff": ["-\t", "-\tpublic void run(final RunNotifier notifier) {", "-\t\tfTestClass.runProtected(notifier, getDescription(), new Statement() {", "-\t\t\t@Override", "-\t\t\tpublic void evaluate() {", "-\t\t\t\trunChildren(notifier);", "+", "+\tpublic void sort(final Sorter sorter) {", "+\t\tCollections.sort(fRunners, new Comparator<Runner>() {", "+\t\t\tpublic int compare(Runner o1, Runner o2) {", "+\t\t\t\treturn sorter.compare(describeChild(o1), describeChild(o2));", "+\t\tfor (Runner each : fRunners)", "+\t\t\tsorter.apply(each);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73a113ef66bb907204d9b7e34e8b185f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprotected Statement withBefores(FrameworkMethod method, Object target, \t\t\tStatement link)", "signatureAfterChange": "  \tpublic void sort(final Sorter sorter)", "diff": ["-\tprotected Statement withBefores(FrameworkMethod method, Object target,", "-\t\t\tStatement link) {", "-\t\treturn new RunBefores(link, new TestMethod(getTestClass()), target);", "+\tpublic void sort(final Sorter sorter) {", "+\t\tCollections.sort(fTestMethods, new Comparator<Method>() {", "+\t\t\tpublic int compare(Method o1, Method o2) {", "+\t\t\t\treturn sorter.compare(methodDescription(o1), methodDescription(o2));", "+\t\t\t}", "+\t\t});"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47336626e36d698d62a54bd1fc25bea5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01ce58998cfa8cf398b4f973c76e971e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/model/TestClass.java", "commitBeforeChange": "897fa2227e26f221e5efa4f95a805f7ff1ccac5f", "commitAfterChange": "2754ea861da92e0d0f25fe9e5678dcb0d6fa3483", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic Constructor<?> getConstructor() throws SecurityException, \t\t\tNoSuchMethodException", "signatureAfterChange": "  \tpublic Constructor<?> getConstructor() throws SecurityException", "diff": ["-\tpublic Constructor<?> getConstructor() throws SecurityException,", "-\t\t\tNoSuchMethodException {", "-\t\treturn fClass.getConstructor();", "+\tpublic Constructor<?> getConstructor() throws SecurityException {", "+\t\t// TODO: (Dec 1, 2007 11:01:06 PM) complain if wrong number of constructors", "+", "+\t\treturn fClass.getConstructors()[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b0bc58f8410ce022e7d6958a483eeb4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "0956a4e6a236e9414c0d19a349206f3350501c60", "commitAfterChange": "f925a047a6e8e6c6f6996dc19a4ab9b3fc35a3ba", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 9, "signatureBeforeChange": "     protected Statement classBlock(final RunNotifier notifier)", "signatureAfterChange": "     protected Statement classBlock(final RunNotifier notifier)", "diff": ["-        Statement statement= childrenInvoker(notifier);", "-        if (statementHasTestsToRun(statement)) {", "-            statement= withBeforeClasses(statement);", "-            statement= withAfterClasses(statement);", "-            statement= withClassRules(statement);", "+        Statement statement = childrenInvoker(notifier);", "+        if (areAllChildrenIgnored() == false) {", "+            statement = withBeforeClasses(statement);", "+            statement = withAfterClasses(statement);", "+            statement = withClassRules(statement);"]}]}
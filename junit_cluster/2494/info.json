{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7af879dbe85392b8b94218610c81783d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38e376e0f7a00a2e4ebb0c4f4ffd4d14", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 20, "signatureBeforeChange": "      private Class<?> getIncludedCategory(Class<?> klass)", "signatureAfterChange": "      private static Set<Class<?>> getIncludedCategory(Class<?> klass) throws ClassNotFoundException", "diff": ["-    private Class<?> getIncludedCategory(Class<?> klass) {", "-        IncludeCategory annotation = klass.getAnnotation(IncludeCategory.class);", "-        return annotation == null ? null : annotation.value();", "+    private static Set<Class<?>> getIncludedCategory(Class<?> klass) throws ClassNotFoundException {", "+        IncludeCategory annotation= klass.getAnnotation(IncludeCategory.class);", "+        return createSet(annotation == null ? null : annotation.value());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f08b21e4812c0b63bf274d157f07df3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 22, "signatureBeforeChange": "      private Class<?> getExcludedCategory(Class<?> klass)", "signatureAfterChange": "      private static Set<Class<?>> getExcludedCategory(Class<?> klass) throws ClassNotFoundException", "diff": ["-    private Class<?> getExcludedCategory(Class<?> klass) {", "-        ExcludeCategory annotation = klass.getAnnotation(ExcludeCategory.class);", "-        return annotation == null ? null : annotation.value();", "+    private static Set<Class<?>> getExcludedCategory(Class<?> klass) throws ClassNotFoundException {", "+        ExcludeCategory annotation= klass.getAnnotation(ExcludeCategory.class);", "+        return createSet(annotation == null ? null : annotation.value());", "+    }"]}]}
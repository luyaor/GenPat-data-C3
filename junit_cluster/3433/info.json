{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd9da9e2eedc25d258513cc49b58ccb9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d9fb27dddc14ae82ce1ebdec4e58e8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "544e5ba3a3034932879604b72fb6f8526d27eb50", "commitAfterChange": "5da2d76bcf619ac0bd8c6ff5f6fc6b807978da8a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void throwTimeoutException(StatementThread thread) throws Exception", "signatureAfterChange": "      private void throwTimeoutException(StatementThread thread) throws Exception", "diff": ["-                \"test timed out after %d milliseconds\", TimeUnit.MILLISECONDS.convert(fTimeout, fTimeUnit)));", "+                \"test timed out after %d %s\", fTimeout, fTimeUnit.name().toLowerCase()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcd8655754b3d5bf7d0c53911eb781be", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethod.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic void invoke(Roadie context) \t\t\tthrows IllegalArgumentException, IllegalAccessException, \t\t\tInvocationTargetException", "signatureAfterChange": "  \t@Override \tpublic void invoke(Roadie context) throws IllegalArgumentException, \t\t\tIllegalAccessException, InvocationTargetException", "diff": ["-\tpublic void invoke(Roadie context)", "-\t\t\tthrows IllegalArgumentException, IllegalAccessException,", "-\t\t\tInvocationTargetException {", "+\tpublic void invoke(Roadie context) throws IllegalArgumentException,", "+\t\t\tIllegalAccessException, InvocationTargetException {", "-\t\t\trunWithDiscoveredParameterValues(context, new PotentialMethodValues(),", "-\t\t\t\t\tParameterSignature.signatures(fMethod));", "+\t\t\trunWithAssignment(Assignments.allUnassigned(context,", "+\t\t\t\t\tgetMethod()));", "+"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9d05ff846c955bc55595019d2e77b8b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57969e7f49d443b5e858277756b14847", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/FilterFactoryFactory.java", "commitBeforeChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "commitAfterChange": "9d9899bce3506e7d87ebc6352a3cf3d25ea20f54", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r     FilterFactory createFilterFactory(Class<? extends FilterFactory> filterFactoryClass)\r             throws FilterFactoryNotCreatedException", "signatureAfterChange": "\r \r     FilterFactory createFilterFactory(Class<? extends FilterFactory> filterFactoryClass)\r             throws FilterFactoryNotCreatedException", "diff": ["-            return filterFactoryClass\r", "-                    .getConstructor()\r", "-                    .newInstance();\r", "+            return filterFactoryClass.getConstructor().newInstance();\r", "-            throw new FilterFactoryNotCreatedException(e.getMessage());\r", "+            throw new FilterFactoryNotCreatedException(e);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9115d2d5a170136b05f51f510ac04fd2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "50e3d1bc87b4b16f0617b6212252363f499397ab", "commitAfterChange": "38d91308c302eb4f0b5ed24e064ee56395f9fc01", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          @Override         public Object getValue() throws CouldNotGenerateValueException", "signatureAfterChange": "          @Override         public Object getValue() throws CouldNotGenerateValueException", "diff": ["-            } catch (Throwable e) {", "+            } catch (Throwable t) {", "-                        Assume.assumeThat(e, not(instanceOf(ignorable)));", "+                        Assume.assumeThat(t, not(instanceOf(ignorable)));", "-                throw new CouldNotGenerateValueException();", "+                throw new CouldNotGenerateValueException(t);"]}]}
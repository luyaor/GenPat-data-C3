{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a845f02f260af99ffa11fed598233883", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c971aa53a05c0f57ee76aa8664ecc0e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/validation/InaccessibleBaseClassTest.java", "commitBeforeChange": "b333208ccfbef77c556a270bd4385586523dcafc", "commitAfterChange": "4d9c88e37dfed614a1bd1ae2ca2ecc86122aa9f1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \t@Test(expected=InitializationError.class) \tpublic void inaccessibleBaseClassIsCaughtAtValidation() throws InitializationError", "signatureAfterChange": "\t \t@Test \tpublic void inaccessibleBaseClassIsCaughtAtValidation()", "diff": ["-\t@Test(expected=InitializationError.class)", "-\tpublic void inaccessibleBaseClassIsCaughtAtValidation() throws InitializationError {", "-\t\tMethodValidator methodValidator= new MethodValidator(new TestClass(Sub.class));", "-\t\tmethodValidator.fTestClass.validateMethodsForDefaultRunner(methodValidator.fErrors);", "-\t\tmethodValidator.assertValid();", "+\t@Test", "+\tpublic void inaccessibleBaseClassIsCaughtAtValidation() {", "+\t\tTestClass testClass= new TestClass(Sub.class);", "+\t\tErrorList errors= new ErrorList();", "+\t\ttestClass.validateMethodsForDefaultRunner(errors);", "+\t\tassertFalse(errors.isEmpty());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfbf8b44b2742b2a06240c67525f5efd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/running/methods/TestMethodTest.java", "commitBeforeChange": "b333208ccfbef77c556a270bd4385586523dcafc", "commitAfterChange": "4d9c88e37dfed614a1bd1ae2ca2ecc86122aa9f1", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " \t \t@Test public void overloaded()", "signatureAfterChange": " \t \t@Test public void overloaded()", "diff": ["-\t\tMethodValidator validator= new MethodValidator(new TestClass(Confused.class));", "-\t\tvalidator.fTestClass.validateMethodsForDefaultRunner(validator.fErrors);", "-\t\tList<Throwable> errors= validator.fErrors;", "-\t\tassertEquals(1, errors.size());", "+\t\tTestClass testClass= new TestClass(Confused.class);", "+\t\tErrorList errors= new ErrorList();", "+\t\ttestClass.validateMethodsForDefaultRunner(errors);", "+\t\tassertFalse(errors.isEmpty());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc25e20be607fc1483b539826ccf13c1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "677277c891039d0ed4334c0dc3f9a744", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tprivate void findCommonPrefix()", "signatureAfterChange": "          private void findCommonPrefix()", "diff": ["-\t\tprivate void findCommonPrefix() {", "-\t\t\tfPrefix= 0;", "-\t\t\tint end= Math.min(fExpected.length(), fActual.length());", "-\t\t\tfor (; fPrefix < end; fPrefix++) {", "-\t\t\t\tif (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix))", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+", "+        private void findCommonPrefix() {", "+            fPrefix = 0;", "+            int end = Math.min(fExpected.length(), fActual.length());", "+            for (; fPrefix < end; fPrefix++) {", "+                if (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix)) {", "+                    break;", "+                }", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f024f28f084b2ea6182534cbfdfa122c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/ComparisonCompactor.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void findCommonPrefix()", "signatureAfterChange": "      private void findCommonPrefix()", "diff": ["-\tprivate void findCommonPrefix() {", "-\t\tfPrefix= 0;", "-\t\tint end= Math.min(fExpected.length(), fActual.length());", "-\t\tfor (; fPrefix < end; fPrefix++) {", "-\t\t\tif (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix))", "-\t\t\t\tbreak;", "-\t\t}", "-\t}", "+    private void findCommonPrefix() {", "+        fPrefix = 0;", "+        int end = Math.min(fExpected.length(), fActual.length());", "+        for (; fPrefix < end; fPrefix++) {", "+            if (fExpected.charAt(fPrefix) != fActual.charAt(fPrefix)) {", "+                break;", "+            }", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9f83f304353526be490e9d1f06054e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ddc806d5c0fa27f9a324b8bdc25022", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/SuiteMethodBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t@Override \tpublic Runner runnerForClass(Class<?> each) throws Throwable", "signatureAfterChange": "     @Override     public Runner runnerForClass(Class<?> each) throws Throwable", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> each) throws Throwable {", "-\t\tif (hasSuiteMethod(each))", "-\t\t\treturn new SuiteMethod(each);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> each) throws Throwable {", "+        if (hasSuiteMethod(each)) {", "+            return new SuiteMethod(each);", "+        }", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cd94ab11b5c31e8fd0e0864cf72b4a1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/RunBefores.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-\t@Override", "-\tpublic void evaluate() throws Throwable {", "-\t\tfor (FrameworkMethod before : fBefores)", "-\t\t\tbefore.invokeExplosively(fTarget);", "-\t\tfNext.evaluate();", "-\t}", "+    @Override", "+    public void evaluate() throws Throwable {", "+        for (FrameworkMethod before : fBefores) {", "+            before.invokeExplosively(fTarget);", "+        }", "+        fNext.evaluate();", "+    }"]}]}
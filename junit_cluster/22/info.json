{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "159de6eb49308411ea707ca8539c24b8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e82634963ab5dbab1526e7410d691df", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/TimeoutRuleTest.java", "commitBeforeChange": "94aa692b0489d1fabd31c779c1a700a3b0890a24", "commitAfterChange": "544e5ba3a3034932879604b72fb6f8526d27eb50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Ignore(\"For gump, for now\")     @Test(timeout = 100)     public void globalTimeoutAvoidsInfiniteLoop()", "signatureAfterChange": "      @Test     public void longTimeout() throws InterruptedException", "diff": ["-    @Ignore(\"For gump, for now\")", "-    @Test(timeout = 100)", "-    public void globalTimeoutAvoidsInfiniteLoop() {", "-        HasGlobalTimeout.log = \"\";", "-        Result result = JUnitCore.runClasses(HasGlobalTimeout.class);", "-        assertEquals(2, result.getFailureCount());", "-        assertThat(HasGlobalTimeout.log, containsString(\"ran1\"));", "-        assertThat(HasGlobalTimeout.log, containsString(\"ran2\"));", "+", "+    @Test", "+    public void longTimeout() throws InterruptedException {", "+        HasGlobalLongTimeout.logger.setLength(0);", "+        Result result = JUnitCore.runClasses(HasGlobalLongTimeout.class);", "+        assertEquals(3, result.getFailureCount());", "+        assertThat(HasGlobalLongTimeout.logger.toString(), containsString(\"run1\"));", "+        assertThat(HasGlobalLongTimeout.logger.toString(), containsString(\"run2\"));", "+        assertThat(HasGlobalLongTimeout.logger.toString(), containsString(\"run3\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3029755f87df849765e0a5657f2e2f0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/MethodValidator.java", "commitBeforeChange": "6a83bc0f1e5f9839a36910c3a21108bc38367afb", "commitAfterChange": "890b7b977e42360aa8975c8535fc66bfd8d8cb3e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void validateTestMethods(Class<? extends Annotation> annotation, \t\t\tboolean isStatic)", "signatureAfterChange": "  \tprivate void validateTestMethods(Class<? extends Annotation> annotation, \t\t\tboolean shouldBeStatic)", "diff": ["-\t\t\tboolean isStatic) {", "+\t\t\tboolean shouldBeStatic) {", "-\t\t\tif (Modifier.isStatic(each.getModifiers()) != isStatic) {", "-\t\t\t\tString state= isStatic ? \"should\" : \"should not\";", "+\t\t\tif (shouldBeStatic && !isStatic(each))", "-\t\t\t\t\t\t+ state + \" be static\"));", "-\t\t\t}", "+\t\t\t\t\t\t+ \"should be static\"));", "+\t\t\tif (!shouldBeStatic && runsAsStatic(each))", "+\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName() + \"() \"", "+\t\t\t\t\t\t+ \"should not be static\"));", "-\t\t\tif (each.getParameterTypes().length != 0)", "+\t\t\tif (effectiveParameterCount(each, shouldBeStatic) != 0)"]}]}
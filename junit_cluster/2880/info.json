{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ff466cf888d879cf034b8ad9ff1e0fa", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a0b124f10e4cd68d836dfe30a20c40c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "f98130957df08de9cae93169298e04bf84388cae", "commitAfterChange": "43b0fe352d5bced0c341640d0c630d23f2022a7e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprotected void runTestUnprotected(final Roadie context)", "signatureAfterChange": "  \tvoid assertExceptionExpected(final Roadie context, Throwable e)", "diff": ["-\tprotected void runTestUnprotected(final Roadie context) {", "-\t\ttry {", "-\t\t\tinvoke(context);", "-", "-\t\t\tif (expectsException())", "-\t\t\t\tcontext.addFailure(new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t\t+ getExpectedException().getName()));", "-\t\t} catch (Throwable e) {", "-\t\t\tif (e instanceof AssumptionViolatedException) {", "-\t\t\t\t// do nothing", "-\t\t\t} else if (!expectsException())", "-\t\t\t\tcontext.addFailure(e);", "-\t\t\telse if (isUnexpected(e)) {", "-\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t+ getExpectedException().getName() + \"> but was<\"", "-\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "-\t\t\t\tcontext.addFailure(new Exception(message, e));", "-\t\t\t}", "+\tvoid assertExceptionExpected(final Roadie context, Throwable e) {", "+\t\tif (!expectsException())", "+\t\t\tcontext.addFailure(e);", "+\t\telse if (isUnexpected(e)) {", "+\t\t\tString message= \"Unexpected exception, expected<\"", "+\t\t\t\t\t+ getExpectedException().getName() + \"> but was<\"", "+\t\t\t\t\t+ e.getClass().getName() + \">\";", "+\t\t\tcontext.addFailure(new Exception(message, e));", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "564c224ce6b34e7600e6307c737717b4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/links/ExpectingException.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void run(final FailureListener listener)", "signatureAfterChange": " \t \t@Override \tpublic void run() throws Exception", "diff": ["-", "+\t", "-\tpublic void run(final FailureListener listener) {", "-\t\tFailureListener expectingListener= new FailureListener() {", "-\t\t\t@Override", "-\t\t\tpublic void handleFailure(Throwable error) {", "-\t\t\t\tif (!fExpected.isAssignableFrom(error.getClass())) {", "-\t\t\t\t\tString message= \"Unexpected exception, expected<\"", "+\tpublic void run() throws Exception {", "+\t\tboolean complete = false;", "+\t\ttry {", "+\t\t\tfNext.run();", "+\t\t\tcomplete = true;", "+\t\t} catch (Throwable e) {", "+\t\t\tif (!fExpected.isAssignableFrom(e.getClass())) {", "+\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t\t+ error.getClass().getName() + \">\";", "-\t\t\t\t\tlistener.addFailure(new Exception(message, error));", "-\t\t\t\t}", "+\t\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "+\t\t\t\tthrow new Exception(message, e);", "-\t\t};", "-\t\t", "-\t\tfNext.run(expectingListener);", "-\t\t", "-\t\tif (!expectingListener.failureSeen())", "-\t\t\tlistener.addFailure(new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t+ fExpected.getName()));", "+\t\t}", "+\t\tif (complete)", "+\t\t\tthrow new AssertionError(\"Expected exception: \"", "+\t\t\t\t\t+ fExpected.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7ff48206febe42f0cc124be17b7d3d5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/links/ExpectingException.java", "commitBeforeChange": "a4c68872a91681139d404825c2bb04bd5ba804dd", "commitAfterChange": "f0ef837a40922ac08c608661385abf71732975d3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@Override \tpublic void run(EachTestNotifier context)", "signatureAfterChange": "  \t@Override \tpublic void run(final FailureListener listener)", "diff": ["-\t", "+", "-\tpublic void run(EachTestNotifier context) {", "-\t\ttry {", "-\t\t\tfNext.run(context);", "-\t\t\tcontext.addFailure(new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t+ fExpected.getName()));", "-\t\t} catch (Throwable e) {", "-\t\t\tif (!fExpected.isAssignableFrom(e.getClass())) {", "-\t\t\t\tString message= \"Unexpected exception, expected<\"", "+\tpublic void run(final FailureListener listener) {", "+\t\tFailureListener expectingListener= new FailureListener() {", "+\t\t\t@Override", "+\t\t\tpublic void handleFailure(Throwable error) {", "+\t\t\t\tif (!fExpected.isAssignableFrom(error.getClass())) {", "+\t\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "-\t\t\t\tcontext.addFailure(new Exception(message, e));", "+\t\t\t\t\t\t\t+ error.getClass().getName() + \">\";", "+\t\t\t\t\tlistener.addFailure(new Exception(message, error));", "+\t\t\t\t}", "-\t\t}", "+\t\t};", "+\t\t", "+\t\tfNext.run(expectingListener);", "+\t\t", "+\t\tif (!expectingListener.failureSeen())", "+\t\t\tlistener.addFailure(new AssertionError(\"Expected exception: \"", "+\t\t\t\t\t+ fExpected.getName()));"]}]}
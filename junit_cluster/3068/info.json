{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d05d7959a29463d2d8665133d64763e4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d96b40bc255c698f8cb9277edfeb29d", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/framework/ComparisonFailure.java", "commitBeforeChange": "ece77fa477a6d322bb5b37c7e2367f4c4dfbf9f3", "commitAfterChange": "ba28bf0f0384ba8b2fc377ef612545f411a56ec4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic String getMessage()", "signatureAfterChange": " \tpublic String getMessage()", "diff": ["-\t\tif (fExpected == null || fActual == null)", "-\t\t\treturn Assert.format(super.getMessage(), fExpected, fActual);", "-\t\t\t", "-\t\tint end= Math.min(fExpected.length(), fActual.length());", "-\t\t", "-\t\tint i= 0;", "-\t\tfor(; i < end; i++) {", "-\t\t\tif (fExpected.charAt(i) != fActual.charAt(i))", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tint j= fExpected.length()-1;", "-\t\tint k= fActual.length()-1;", "-\t\tfor (; k >= i && j >= i; k--,j--) {", "-\t\t\tif (fExpected.charAt(j) != fActual.charAt(k))", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tString actual, expected;", "-\t\t", "-\t\t// equal strings", "-\t\tif (j < i && k < i) {", "-\t\t\texpected= fExpected;", "-\t\t\tactual= fActual;", "-\t\t} else {", "-\t\t\texpected= fExpected.substring(i, j+1);", "-\t\t\tactual= fActual.substring(i, k+1);", "-\t\t\tif (i <= end && i > 0) {", "-\t\t\t\texpected= \"...\"+expected;", "-\t\t\t\tactual= \"...\"+actual;", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (j < fExpected.length()-1)", "-\t\t\t\texpected= expected+\"...\";", "-\t\t\tif (k < fActual.length()-1)", "-\t\t\t\tactual= actual+\"...\";", "-\t\t}\t", "-\t\treturn Assert.format(super.getMessage(), expected, actual);", "+\t\treturn new ComparisonCompactor(MAX_CONTEXT_LENGTH, fExpected, fActual).compact(super.getMessage());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea96748b8ea942ed7177f4df5bf390a8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "0a9a389570a171b67c3155d312f2e90bdab5aaaf", "commitAfterChange": "318adee43493447e22bbea89e0f17260e0186a14", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     Result runMain(JUnitSystem system, String... args)", "signatureAfterChange": "     Result runMain(JUnitSystem system, String... args)", "diff": ["-        List<Class<?>> classes = new ArrayList<Class<?>>();", "-        List<Failure> failures = new ArrayList<Failure>();", "-        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-        for (String each : args) {", "-            try {", "-                if (each.startsWith(\"--\")) {", "-                    if (each.startsWith(\"--filter\")) {", "-                        String filterSpec = each.substring(each.indexOf('=') + 1);", "-                        Filter filter = filterFactoryFactory.createFilterFromFilterSpec(filterSpec);", "+        JUnitCommandLineParser jUnitCommandLineParser = new JUnitCommandLineParser(system);", "+        jUnitCommandLineParser.parseArgs(args);", "-                        addFilter(filter);", "-                    } else {", "-                        system.out().println(\"JUnit knows nothing about the \" + each + \" option\");", "+        filter = filter.intersect(jUnitCommandLineParser.getFilter());", "+        List<Class<?>> classes = jUnitCommandLineParser.getClasses();", "+        List<Failure> failures = jUnitCommandLineParser.getFailures();", "-                        return new Result() {", "-                            @Override", "-                            public boolean wasSuccessful() {", "-                                return false;", "-                            }", "-                        };", "-                    }", "-                } else {", "-                    classes.add(Class.forName(each));", "-                }", "-            } catch (FilterFactory.FilterNotCreatedException e) {", "-                system.out().println(\"Could not find filter: \" + e.getMessage());", "-                Description description = Description.createSuiteDescription(each);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            } catch (FilterFactoryFactory.FilterFactoryNotFoundException e) {", "-                system.out().println(\"Could not find filter factory: \" + e.getMessage());", "-                Description description = Description.createSuiteDescription(each);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            } catch (ClassNotFoundException e) {", "-                system.out().println(\"Could not find class: \" + each);", "-                Description description = Description.createSuiteDescription(each);", "-                Failure failure = new Failure(description, e);", "-                failures.add(failure);", "-            }", "-        }", "+", "+"]}]}
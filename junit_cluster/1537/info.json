{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f186e0ef58188509b8f30188f309eb2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ada379390a5eaacb1ff0db7dfc3ae86", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/SuiteMethodTest.java", "commitBeforeChange": "2f9b53dbecad010dbb7e7cfff3a11476b7d2208a", "commitAfterChange": "870289f3272917f312de6902b8b6bdc43552d4b7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \t@Test public void descriptionAndRunNotificationsAreConsistent()", "signatureAfterChange": " \t@Test \tpublic void descriptionAndRunNotificationsAreConsistent()", "diff": ["-\t", "-\t@Test public void descriptionAndRunNotificationsAreConsistent() {", "+\t// when executing as JUnit 3, ignored tests are stripped out before execution", "+\t@Test", "+\tpublic void descriptionAndRunNotificationsAreConsistent() {", "-\t\t", "-\t\tDescription description= Request.aClass(CompatibilityTest.class).getRunner().getDescription();", "-\t\tassertEquals(0, description.getChildren().size());", "+", "+\t\tRunner runner= Request.aClass(CompatibilityTest.class).getRunner();", "+\t\tDescription description= runner.getDescription();", "+\t\tassertEquals(1, description.getChildren().size());", "+\t\tassertEquals(\"initializationError\", description.getChildren().get(0)", "+\t\t\t\t.getMethodName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ecc6ba6ecd060df24294665fe7dcc6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "8ff0b44e3fb0c1c56a1dc6290c3b6828a5a8f9bf", "commitAfterChange": "0128bff582b2d10bffff9ff497c3e6f697958b83", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  \tprivate Statement withTestRules(FrameworkMethod method, Object target, \t\t\tStatement result)", "signatureAfterChange": " \tprivate Statement withTestRules(FrameworkMethod method, Object target, \t\t\tStatement statement)", "diff": ["+\t */", "-\t\t\tStatement result) {", "-\t\treturn TestRule.applyAll(getTestRules(target), result, describeChild(method));", "+\t\t\tStatement statement) {", "+\t\tList<TestRule> testRules= getTestRules(target);", "+\t\treturn testRules.isEmpty() ? statement :", "+\t\t\tnew RunRules(statement, testRules, describeChild(method));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0659d374b40f6c51cf9fadee873f9d8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "e9d4de8e15255b03b60e935390e517d4de90a73b", "commitAfterChange": "278d76f285c4729700276e875ff8d69ea2ecfbc2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-            try {", "-                addArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "-            } catch (Throwable e) {", "-                // ignore and move on", "+            Class<?> returnType = dataPointsMethod.getReturnType();", "+            ", "+            if (returnType.isArray() && sig.canPotentiallyAcceptType(returnType.getComponentType())) {", "+                try {", "+                    addArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "+                } catch (Throwable e) {", "+                    // ignore and move on", "+                }"]}]}
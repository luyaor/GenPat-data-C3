{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e23fc2a9069aaeb68ad6c2ce0c32d971", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5035af515d2624b92f5468c7bea4ed97", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "dca4a949f93bb85cc8ee0eb8789979a18aa3ffc7", "commitAfterChange": "cb6abf6fc729f07c5d60b0756e91af444400b4b5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "      protected Runner createRunnerForTest(TestWithParameters test)             throws InitializationError", "signatureAfterChange": "      private List<Runner> createRunnersForParameters(             Iterable<Object> allParameters, String namePattern,             ParametersRunnerFactory runnerFactory)             throws InitializationError,             Exception", "diff": ["-", "-    protected Runner createRunnerForTest(TestWithParameters test)", "-            throws InitializationError {", "-        return new BlockJUnit4ClassRunnerWithParameters(test);", "+    private List<Runner> createRunnersForParameters(", "+            Iterable<Object> allParameters, String namePattern,", "+            ParametersRunnerFactory runnerFactory)", "+            throws InitializationError,", "+            Exception {", "+            List<TestWithParameters> tests = createTestsForParameters(", "+                    allParameters, namePattern);", "+            List<Runner> runners = new ArrayList<Runner>();", "+            for (TestWithParameters test : tests) {", "+                runners.add(runnerFactory", "+                        .createRunnerForTestWithParameters(test));", "+            return runners;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7573bb2dca169b83e710cac4586b4e6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "010f7461c5e9bb4304b68b8c0eb3027b677d7f31", "commitAfterChange": "61badf2f7f147d6e782e1700b24da4ac06ce070c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "      private void createRunnersForParameters(Iterable<Object[]> allParameters,             String namePattern) throws InitializationError, Exception", "signatureAfterChange": "\r \r     private void createRunnersForParameters(Iterable<Object[]> allParameters, String namePattern) throws Exception", "diff": ["-", "-    private void createRunnersForParameters(Iterable<Object[]> allParameters,", "-            String namePattern) throws InitializationError, Exception {", "-        try {", "-            int i = 0;", "-            for (Object[] parametersOfSingleTest : allParameters) {", "-                String name = nameFor(namePattern, i, parametersOfSingleTest);", "-                TestClassRunnerForParameters runner = new TestClassRunnerForParameters(", "-                        getTestClass().getJavaClass(), parametersOfSingleTest,", "-                        name);", "-                runners.add(runner);", "-                ++i;", "-            }", "-        } catch (ClassCastException e) {", "-            throw parametersMethodReturnedWrongType();", "-        }", "-    }", "+\r", "+    private void createRunnersForParameters(Iterable<Object[]> allParameters, String namePattern) throws Exception {\r", "+        try {\r", "+            int i = 0;\r", "+            for (Object[] parametersOfSingleTest : allParameters) {\r", "+                runners.add(createRunner(namePattern, i++, parametersOfSingleTest));\r", "+            }\r", "+        } catch (ClassCastException e) {\r", "+            throw parametersMethodReturnedWrongType();\r", "+        }\r", "+    }\r"]}]}
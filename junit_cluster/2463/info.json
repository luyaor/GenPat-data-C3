{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "203e4197fb0c8bb777771c351b15ef17", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "310a6f4696876539a6b705b1e3125170", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/Guesser.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\tprotected Object generateGuess(Class<?> returnType)", "signatureAfterChange": "          protected Object generateGuess(Class<?> returnType)", "diff": ["-\t\tprotected Object generateGuess(Class<?> returnType) {", "-\t\t\tif (returnType.equals(String.class))", "-\t\t\t\treturn \"GUESS\" + new Random().nextInt();", "-\t\t\tif (returnType.equals(Integer.class)", "-\t\t\t\t\t|| returnType.equals(int.class))", "-\t\t\t\treturn new Random().nextInt();", "-\t\t\treturn null;", "-\t\t}", "+        protected Object generateGuess(Class<?> returnType) {", "+            if (returnType.equals(String.class)) {", "+                return \"GUESS\" + new Random().nextInt();", "+            }", "+            if (returnType.equals(Integer.class)", "+                    || returnType.equals(int.class)) {", "+                return new Random().nextInt();", "+            }", "+            return null;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82ce478d11179445862e952a50c905f0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/Guesser.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t\tGuessMap replaceGuess(Object oldValue, Object newValue)", "signatureAfterChange": "          GuessMap replaceGuess(Object oldValue, Object newValue)", "diff": ["-\t\tGuessMap replaceGuess(Object oldValue, Object newValue) {", "-\t\t\tGuessMap newGuesses= new GuessMap(this);", "-\t\t\tfor (Entry<MethodCall, Object> entry : newGuesses.entrySet()) {", "-\t\t\t\tif (entry.getValue().equals(oldValue))", "-\t\t\t\t\tentry.setValue(newValue);", "-\t\t\t}", "-\t\t\treturn newGuesses;", "-\t\t}", "+        GuessMap replaceGuess(Object oldValue, Object newValue) {", "+            GuessMap newGuesses = new GuessMap(this);", "+            for (Entry<MethodCall, Object> entry : newGuesses.entrySet()) {", "+                if (entry.getValue().equals(oldValue)) {", "+                    entry.setValue(newValue);", "+                }", "+            }", "+            return newGuesses;", "+        }"]}]}
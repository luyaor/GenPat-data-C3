{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1f4a72fee8636108c48a5dfc61a0e8a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "503ba0cba35a340822ba4b3055b3dff9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "1cec456a2c5638818959856eb3cef98743cbe08b", "commitAfterChange": "e0cddcdfa8ec823da136af500cce0910a1dd2264", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic Parameterized(Class<?> klass) throws Throwable", "signatureAfterChange": " \tpublic Parameterized(Class<?> klass) throws Throwable", "diff": ["-\t\tsuper(klass, Collections.<Runner> emptyList());", "-\t\tIterable<Object[]> allParameters= getAllParameters();", "-\t\tcreateRunnersForParameters(allParameters);", "+\t\tsuper(klass, NO_RUNNERS);", "+\t\tParameters parameters= getParametersMethod().getAnnotation(", "+\t\t\t\tParameters.class);", "+\t\tcreateRunnersForParameters(allParameters(), parameters.name());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "722cfc93800663f105a04417245c546e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/experimental/categories/CategoryFilterFactoryTest.java", "commitBeforeChange": "5edfb4447b609c178d63a3d991172861076d143b", "commitAfterChange": "34336085d5aba69c997f8e6b244531561afebcd4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Test     public void shouldCreateFilter() throws Exception", "signatureAfterChange": "      @Test     public void shouldCreateFilter() throws Exception", "diff": ["-        Filter filter = categoryFilterFactory.createFilter(CategoryFilterFactoryStub.class.getName());", "+        FilterFactoryParams params = categoryFilterFactory.parseArgs(CategoryFilterFactoryStub.class.getName());", "+        Filter filter = categoryFilterFactory.createFilter(params);", "-        assertThat(filter, is((Filter) null));", "+        assertThat(filter, instanceOf(DummyFilter.class));"]}]}
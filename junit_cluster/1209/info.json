{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "318fa049c60e05e9c13e1d6e8629432e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015e03b205f0f60b75d2086cd1e98bf5", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestSelector.java", "commitBeforeChange": "395e144b73b2cad89fdab8f7cc9ce12b24f9ec3b", "commitAfterChange": "d3b3a19c78435ef6b0d1c8832bcdb1a8d5ed6a4e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic TestSelector(Frame parent, TestCollector testCollector)", "signatureAfterChange": "  \tpublic TestSelector(Frame parent, TestCollector testCollector)", "diff": ["-\t\tsetLocationRelativeTo(parent);", "+\t\t// setLocationRelativeTo only exists in 1.4", "+\t\ttry {", "+\t\t\tsetLocationRelativeTo(parent);", "+\t\t} catch (NoSuchMethodError e) {", "+\t\t\tcenterWindow(this);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "938ed53b6a7e38873331fc789a7c7f5a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "6acc164b4125da775cccd4035c1b99e9d404bacd", "commitAfterChange": "22a6c6857eaef07a5d54fecfaea8db7c66f65de7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate void runWithTimeout(long timeout)", "signatureAfterChange": "  \tprivate void runWithTimeout(long timeout)", "diff": ["-\t\tExecutorService service= Executors.newSingleThreadExecutor();", "-\t\tCallable<Object> callable= new Callable<Object>() {", "-\t\t\tpublic Object call() throws Exception {", "-\t\t\t\trunTest();", "-\t\t\t\treturn null;", "-\t\t\t}", "-\t\t};", "-\t\tFuture<Object> result= service.submit(callable);", "-\t\tservice.shutdown();", "-\t\t\tboolean terminated= service.awaitTermination(timeout,", "-\t\t\t\t\tTimeUnit.MILLISECONDS);", "-\t\t\tif (!terminated)", "-\t\t\t\tservice.shutdownNow();", "-\t\t\tresult.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation", "-\t\t} catch (TimeoutException e) {", "-\t\t\taddFailure(new Exception(String.format(\"test timed out after %d milliseconds\", timeout)));", "-\t\t} catch (Exception e) {", "-\t\t\taddFailure(e);", "-\t\t}\t\t", "+\t\t\trunBefores();", "+\t\t\tExecutorService service= Executors.newSingleThreadExecutor();", "+\t\t\tCallable<Object> callable= new Callable<Object>() {", "+\t\t\t\tpublic Object call() throws Exception {", "+\t\t\t\t\trunTestMethod();", "+\t\t\t\t\treturn null;", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tFuture<Object> result= service.submit(callable);", "+\t\t\tservice.shutdown();", "+\t\t\ttry {", "+\t\t\t\tboolean terminated= service.awaitTermination(timeout,", "+\t\t\t\t\t\tTimeUnit.MILLISECONDS);", "+\t\t\t\tif (!terminated)", "+\t\t\t\t\tservice.shutdownNow();", "+\t\t\t\tresult.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation", "+\t\t\t} catch (TimeoutException e) {", "+\t\t\t\taddFailure(new Exception(String.format(\"test timed out after %d milliseconds\", timeout)));", "+\t\t\t} catch (Exception e) {", "+\t\t\t\taddFailure(e);", "+\t\t\t}\t\t", "+\t\t} catch (FailedBefore e) {", "+\t\t} finally {", "+\t\t\trunAfters();", "+\t\t}"]}]}
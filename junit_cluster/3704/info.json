{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89f11b09039d7272240701ff33dbf936", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ada379390a5eaacb1ff0db7dfc3ae86", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/SuiteMethodTest.java", "commitBeforeChange": "2f9b53dbecad010dbb7e7cfff3a11476b7d2208a", "commitAfterChange": "870289f3272917f312de6902b8b6bdc43552d4b7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \t@Test public void descriptionAndRunNotificationsAreConsistent()", "signatureAfterChange": " \t@Test \tpublic void descriptionAndRunNotificationsAreConsistent()", "diff": ["-\t", "-\t@Test public void descriptionAndRunNotificationsAreConsistent() {", "+\t// when executing as JUnit 3, ignored tests are stripped out before execution", "+\t@Test", "+\tpublic void descriptionAndRunNotificationsAreConsistent() {", "-\t\t", "-\t\tDescription description= Request.aClass(CompatibilityTest.class).getRunner().getDescription();", "-\t\tassertEquals(0, description.getChildren().size());", "+", "+\t\tRunner runner= Request.aClass(CompatibilityTest.class).getRunner();", "+\t\tDescription description= runner.getDescription();", "+\t\tassertEquals(1, description.getChildren().size());", "+\t\tassertEquals(\"initializationError\", description.getChildren().get(0)", "+\t\t\t\t.getMethodName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86544a2936590ea0de08ec622cf5b544", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java", "commitBeforeChange": "b9e14f64327e052e161c451bc2eaa854c9adcea4", "commitAfterChange": "865e00b45a166466b614a1dbcb8440e19453c58e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t@Test(timeout=1500) public void testsRunInParallel()", "signatureAfterChange": " \t \t@Test public void testsRunInParallel()", "diff": ["-\t", "-\t@Test(timeout=1500) public void testsRunInParallel() {", "-\t\tlong start= System.currentTimeMillis();", "+\t@Test public void testsRunInParallel() {", "-\t\tlong end= System.currentTimeMillis();", "-\t\tassertThat(end - start, greaterThan(999)); // Overhead could be less than half a millisecond", "-\t}", "+\t\tassertNotNull(fExample1One);", "+\t\tassertNotNull(fExample1Two);", "+\t\tassertNotNull(fExample2One);", "+\t\tassertNotNull(fExample2Two);", "+\t\tassertThat(fExample1One, is(fExample1Two));", "+\t\tassertThat(fExample2One, is(fExample2Two));", "+\t\tassertThat(fExample1One, is(not(fExample2One)));", "+\t\tfExample1One= null;", "+\t\tfExample1Two= null;", "+\t\tfExample2One= null;", "+\t\tfExample2Two= null;"]}]}
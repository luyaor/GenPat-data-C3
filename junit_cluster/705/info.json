{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d6897e65eee56530efbf1797ec44c151", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f4e2cf7b3a1e90511825553e90c78f7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/model/TestClass.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tpublic void runProtected(RunNotifier notifier, Description description, Runnable runnable)", "signatureAfterChange": "  \tpublic void runProtected(RunNotifier notifier, Description description, Runnable runnable)", "diff": ["-\t\trunProtected(new EachTestNotifier(notifier, description), runnable, null);", "+\t\tEachTestNotifier testNotifier= new EachTestNotifier(notifier, description);", "+\t\ttry {", "+\t\t\trunProtected(testNotifier, runnable, null);", "+\t\t} catch (AssumptionViolatedException e) {", "+\t\t\t// TODO: (Oct 12, 2007 10:21:33 AM) DUP with other ignorings", "+\t\t} catch (StoppedByUserException e) {", "+\t\t\t// TODO: (Oct 12, 2007 10:26:35 AM) DUP", "+", "+\t\t\tthrow e;", "+\t\t} catch (Throwable e) {", "+\t\t\ttestNotifier.addFailure(e);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14e78bcc2ef1d00e22ba3b7af2f5d0d8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/TempFolderRuleTest.java", "commitBeforeChange": "d0d4772f56e598b55c12f336e17cc18d6302f26f", "commitAfterChange": "b00a3cdcaaf0bb554ed0955f98d9f1d759710c27", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t\t@Test \t\tpublic void testUsingTempFolder() throws IOException", "signatureAfterChange": "  \t\t@Test \t\tpublic void testUsingTempFolder() throws IOException", "diff": ["-\t\t\tcreatedFile= folder.newFolder(\"subfolder\");", "-\t\t\tnew File(createdFile, \"a.txt\").createNewFile();", "-\t\t\tassertTrue(createdFile.exists());", "+\t\t\tString subfolder = \"subfolder\";", "+\t\t\tString filename = \"a.txt\";", "+\t\t\tcreatedFile= folder.newFolder(subfolder);", "+\t\t\tnew File(createdFile, filename).createNewFile();", "+\t\t\t", "+\t\t\tFile expectedFile = new File(folder.getRoot(), join(subfolder, filename));", "+\t\t\t", "+\t\t\tassertTrue(expectedFile.exists());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2ac48507667084d814e465b49553e6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "2d13004b3fbba2fe6ed919bbc98f2e3f69bb4809", "commitAfterChange": "128553fc50758932f02fc6e13a3e25ef6a711152", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "signatureAfterChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "diff": ["+\t\t\t} catch (AssumptionViolatedException e) {", "+\t\t\t\toptionallyHandleException(e, handleAssumptionViolatedExceptions);", "+\t\t\t\treturn;", "+\t\t\t} catch (AssertionError e) {", "+\t\t\t\toptionallyHandleException(e, handleAssertionErrors);", "+\t\t\t\treturn;", "-\t\t\t\tif (fMatcher == null)", "-\t\t\t\t\tthrow e;", "-\t\t\t\tAssert.assertThat(e, fMatcher);", "+\t\t\t\thandleException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c074550617df1058e52ddff528a7eee6", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/framework/TestCase.java", "commitBeforeChange": "3b5085dec3f1fd578c5109114bd02370bea48fda", "commitAfterChange": "ffd5f087e9b0ffaf146c91323adcf0ffdf469b0f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void runBare() throws Throwable", "signatureAfterChange": " \tpublic void runBare() throws Throwable", "diff": ["+\t\tThrowable running= null;", "+\t\t} catch (Throwable e) {", "+\t\t\trunning= e;", "-\t\t\ttearDown();", "+\t\t\ttry {", "+\t\t\t\ttearDown();", "+\t\t\t} catch (Exception e) {", "+\t\t\t\tthrow (running != null) ? running : e;", "+\t\t\t}"]}]}
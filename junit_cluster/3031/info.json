{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b9a8705d89b08a6cf47987403c8ffbe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b3008aa2a088dcec723c1e96e2af172", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "beb1f4a80f7fa20523d40535fb81c1b8a7a9e638", "commitAfterChange": "83a25d440d118b7d10779a884d35f31045949e27", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      private void runChildren(final RunNotifier notifier)", "signatureAfterChange": "      private void runChildren(final RunNotifier notifier)", "diff": ["-        for (final T each : getFilteredChildren()) {", "-            fScheduler.schedule(new Runnable() {", "-                public void run() {", "-                    ParentRunner.this.runChild(each, notifier);", "-                }", "-            });", "+        final RunnerScheduler scheduler = fScheduler;", "+        try {", "+            for (final T each : getFilteredChildren()) {", "+                scheduler.schedule(new Runnable() {", "+                    public void run() {", "+                        ParentRunner.this.runChild(each, notifier);", "+                    }", "+                });", "+            }", "+        } finally {", "+            scheduler.finished();", "-        fScheduler.finished();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfeb200f869ad9787590feae2c3153e6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate void runChildren(final RunNotifier notifier)", "signatureAfterChange": "      private void runChildren(final RunNotifier notifier)", "diff": ["-\tprivate void runChildren(final RunNotifier notifier) {", "-\t\tfor (final T each : getFilteredChildren())", "- \t\t\tfScheduler.schedule(new Runnable() {\t\t\t", "-\t\t\t\tpublic void run() {", "-\t\t\t\t\tParentRunner.this.runChild(each, notifier);", "-\t\t\t\t}", "-\t\t\t});", "-\t\tfScheduler.finished();", "-\t}", "+    private void runChildren(final RunNotifier notifier) {", "+        for (final T each : getFilteredChildren()) {", "+            fScheduler.schedule(new Runnable() {", "+                public void run() {", "+                    ParentRunner.this.runChild(each, notifier);", "+                }", "+            });", "+        }", "+        fScheduler.finished();", "+    }"]}]}
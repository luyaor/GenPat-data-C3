{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b30a32274907af83afab4af58a4b56e4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5ccf2708c7f27e01c50ad0e921cff02", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void throwExceptionForUnfinishedThread(StatementThread thread) \t\t\tthrows Throwable", "signatureAfterChange": "      private void throwExceptionForUnfinishedThread(StatementThread thread)             throws Throwable", "diff": ["-\tprivate void throwExceptionForUnfinishedThread(StatementThread thread)", "-\t\t\tthrows Throwable {", "-\t\tif (thread.fExceptionThrownByOriginalStatement != null)", "-\t\t\tthrow thread.fExceptionThrownByOriginalStatement;", "-\t\telse", "-\t\t\tthrowTimeoutException(thread);", "-\t}", "+    private void throwExceptionForUnfinishedThread(StatementThread thread)", "+            throws Throwable {", "+        if (thread.fExceptionThrownByOriginalStatement != null) {", "+            throw thread.fExceptionThrownByOriginalStatement;", "+        } else {", "+            throwTimeoutException(thread);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7905ef53b35436bc7f960a8ffaccf8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "34e66740b9117ce85cfd416f9e931b2e533ab16e", "commitAfterChange": "85b7c26e63f851004ce20d4a00fbf1b46607ab0c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void throwExceptionForUnfinishedThread(StatementThread thread)             throws Throwable", "signatureAfterChange": "     private Throwable getResult(FutureTask<Throwable> task, Thread thread)", "diff": ["-", "-    private void throwExceptionForUnfinishedThread(StatementThread thread)", "-            throws Throwable {", "-        if (thread.fExceptionThrownByOriginalStatement != null) {", "-            throw thread.fExceptionThrownByOriginalStatement;", "-        } else {", "-            throwTimeoutException(thread);", "+     */", "+    private Throwable getResult(FutureTask<Throwable> task, Thread thread) {", "+        try {", "+            return task.get(fTimeout, fTimeUnit);", "+        } catch (InterruptedException e) {", "+            return e; // caller will re-throw; no need to call Thread.interrupt()", "+        } catch (ExecutionException e) {", "+            // test failed; have caller re-throw the exception thrown by the test", "+            return e.getCause();", "+        } catch (TimeoutException e) {", "+            return createTimeoutException(thread);", "+        }", "+    }"]}]}
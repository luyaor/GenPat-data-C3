{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ca40359e9bc0afa0310db3bb7e1900a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21b67595f638b9a6f188d1b70898835a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Parameterized.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t@Override \tpublic void run(final RunNotifier notifier)", "signatureAfterChange": "  \tprotected void runChild(Integer i, RunNotifier notifier)", "diff": ["-\tpublic void run(final RunNotifier notifier) {", "-\t\tfTestClass.runProtected(notifier, getDescription(), new Statement() {", "-\t\t\tpublic void evaluate() {", "-\t\t\t\trunChildren(notifier);", "-\t\t});", "+", "+\tprotected void runChild(Integer i, RunNotifier notifier) {", "+\t\ttry {", "+\t\tnew TestClassRunnerForParameters(fTestClass", "+\t\t\t\t.getJavaClass(), fParameters.get(i), i++).run(notifier);", "+\t\t} catch (Exception e) {", "+\t\t\t// TODO: do something better here.", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f04f027dde35ef84c16dc268c6e215a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Suite.java", "commitBeforeChange": "1d982e5310d57fe0ea4b63e05f20215ee3add1fe", "commitAfterChange": "24a5aad1f49b4decf946f1df701e354a18544132", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \t@Override \tpublic void run(final RunNotifier notifier)", "signatureAfterChange": "  \tpublic void sort(final Sorter sorter)", "diff": ["-\t", "-\tpublic void run(final RunNotifier notifier) {", "-\t\tfTestClass.runProtected(notifier, getDescription(), new Statement() {", "-\t\t\t@Override", "-\t\t\tpublic void evaluate() {", "-\t\t\t\trunChildren(notifier);", "+", "+\tpublic void sort(final Sorter sorter) {", "+\t\tCollections.sort(fRunners, new Comparator<Runner>() {", "+\t\t\tpublic int compare(Runner o1, Runner o2) {", "+\t\t\t\treturn sorter.compare(describeChild(o1), describeChild(o2));", "+\t\tfor (Runner each : fRunners)", "+\t\t\tsorter.apply(each);"]}]}
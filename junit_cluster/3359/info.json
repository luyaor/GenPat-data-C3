{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "459e57a99caacd088a76578eb2c4eb93", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41ae86107f160fdc5f3d00c4b3b982fb", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/runner/ClassPathTestCollector.java", "commitBeforeChange": "1e752dcb0a967bcb47fae4b12fb8765e79571e69", "commitAfterChange": "bfc94ee739d62127c7477300b26127bd560765a1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tvoid gatherFiles(File classRoot, String classFileName, Vector result)", "signatureAfterChange": "  \tvoid gatherFiles(File classRoot, String classFileName, Hashtable result)", "diff": ["-\tvoid gatherFiles(File classRoot, String classFileName, Vector result) {", "+\tvoid gatherFiles(File classRoot, String classFileName, Hashtable result) {", "-\t\t\tif (isTestClass(classFileName)) ", "-\t\t\t\tresult.addElement(classNameFromFile(classFileName));", "+\t\t\tif (isTestClass(classFileName)) {", "+\t\t\t\tString className= classNameFromFile(classFileName);", "+\t\t\t\tresult.put(className, className);", "+\t\t\t}", "-\t\tString[] contents= thisRoot.list(); ", "-\t\tfor (int i= 0; i < contents.length; i++) ", "-\t\t\tgatherFiles(classRoot, classFileName+File.separatorChar+contents[i], result);\t\t", "+\t\tString[] contents= thisRoot.list();", "+\t\tif (contents != null) { ", "+\t\t\tfor (int i= 0; i < contents.length; i++) ", "+\t\t\t\tgatherFiles(classRoot, classFileName+File.separatorChar+contents[i], result);\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "577569071ec12e20a727be82a5db2e95", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "41cbbf7e228b8f7908e672a79863ff970316b120", "commitAfterChange": "421ab330509a53302f56b209595f55b23bfdfc0e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["+", "-\t\tif (fTest instanceof Filterable) {", "-\t\t\tFilterable adapter= (Filterable) fTest;", "+\t\tif (getTest() instanceof Filterable) {", "+\t\t\tFilterable adapter= (Filterable) getTest();", "-\t\t} else if (fTest instanceof TestSuite) {", "-\t\t\tTestSuite suite= (TestSuite) fTest;", "-\t\t\tTestSuite filtered= new FilteredTestSuite(suite, filter);", "-\t\t\tfTest= filtered;", "+\t\t} else if (getTest() instanceof TestSuite) {", "+\t\t\tTestSuite suite= (TestSuite) getTest();", "+\t\t\tTestSuite filtered= new TestSuite(suite.getName());", "+\t\t\tint n= suite.testCount();", "+\t\t\tfor (int i= 0; i < n; i++) {", "+\t\t\t\tTest test= suite.testAt(i);", "+\t\t\t\tif (filter.shouldRun(makeDescription(test)))", "+\t\t\t\t\tfiltered.addTest(test);", "+\t\t\t}", "+\t\t\tsetTest(filtered);"]}]}
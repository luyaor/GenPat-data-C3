{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1fff01fbde83b5648a558c0fc625af2a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f4db09a6c3d00c3dff77e85c6646ec8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "979e8abbe974e8847668f5887403da78a6165ebc", "commitAfterChange": "1fcd990f60518c941a44bae2596392021614a20b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected Statement classBlock(final RunNotifier notifier)", "signatureAfterChange": " \tprotected Statement classBlock(final RunNotifier notifier)", "diff": ["+\t */", "+\t\tStatement statement= childrenInvoker(notifier);", "+\t\tstatement= withBeforeClasses(statement);", "+\t\tstatement= withAfterClasses(statement);", "+\t\treturn statement;", "+\t}", "-\t\t\t\t.getAnnotatedMethods(BeforeClass.class);", "-\t\tList<FrameworkMethod> afters= fTestClass", "-\t\t\t\t.getAnnotatedMethods(AfterClass.class);", "-\t\tStatement statement= runChildren(notifier);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c19b11cc7003d7e271f3f5777f4fdb0e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "5edfb4447b609c178d63a3d991172861076d143b", "commitAfterChange": "34336085d5aba69c997f8e6b244531561afebcd4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     Result runMain(JUnitSystem system, String... args)", "signatureAfterChange": "     Result runMain(JUnitSystem system, String... args)", "diff": ["-        filter = filter.intersect(jUnitCommandLineParser.getFilter());", "-        List<Class<?>> classes = jUnitCommandLineParser.getClasses();", "-        List<Failure> failures = jUnitCommandLineParser.getFailures();", "-", "-        Result result = run(classes.toArray(new Class<?>[0]));", "-        for (Failure each : failures) {", "+        Result result = run(jUnitCommandLineParser.createRequest(defaultComputer()));", "+        for (Failure each : jUnitCommandLineParser.getFailures()) {"]}]}
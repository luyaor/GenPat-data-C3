{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "befacd5924d5edc7acace4e0355dd4a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cda79b1961fe3bb0f7c97804fb2e16a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68e59d6de3c48be43bfe2d6104fdb6e8280b1232", "commitAfterChange": "334bd9ce923cf0293cbca49be4ae5947abf51897", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      public void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-        synchronized (fLock) {", "+        synchronized (fChildrenLock) {", "-            try {", "-                for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "-                    T each = iter.next();", "-                    if (shouldRun(filter, each)) {", "-                        try {", "-                            filter.apply(each);", "-                        } catch (NoTestsRemainException e) {", "-                            iter.remove();", "-                        }", "-                    } else {", "+            for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "+                T each = iter.next();", "+                if (shouldRun(filter, each)) {", "+                    try {", "+                        filter.apply(each);", "+                    } catch (NoTestsRemainException e) {", "+                } else {", "+                    iter.remove();", "-            } finally {", "-                fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);", "-        }", "-", "-        if (getFilteredChildren().isEmpty()) {", "-            throw new NoTestsRemainException();", "+            fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);", "+            if (fFilteredChildren.isEmpty()) {", "+                throw new NoTestsRemainException();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0def3e4ff0641b0f1a50259a2f690d1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "b8adef37033aa4177453362d24b3f2ecb7031c59", "commitAfterChange": "043e82844ef2c3c0961d98a34771c84f7a950d1a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private void addFields(ParameterSignature sig,             List<PotentialAssignment> list)", "signatureAfterChange": "      private void addFields(ParameterSignature sig,             List<PotentialAssignment> list)", "diff": ["-        for (final Field field : fClass.getJavaClass().getFields()) {", "-            if (Modifier.isStatic(field.getModifiers())) {", "-                Class<?> type = field.getType();", "-                if (sig.canAcceptArrayType(type)", "-                        && field.getAnnotation(DataPoints.class) != null) {", "-                    try {", "-                        addArrayValues(field.getName(), list, getStaticFieldValue(field));", "-                    } catch (Throwable e) {", "-                        // ignore and move on", "-                    }", "-                } else if (sig.canAcceptType(type)", "-                        && field.getAnnotation(DataPoint.class) != null) {", "-                    list.add(PotentialAssignment", "-                            .forValue(field.getName(), getStaticFieldValue(field)));", "+        for (final Field field : getDataPointsFields(sig)) {", "+            Class<?> type = field.getType();", "+            if (sig.canAcceptArrayType(type)) {", "+                try {", "+                    addArrayValues(field.getName(), list, getStaticFieldValue(field));", "+                } catch (Throwable e) {", "+                    // ignore and move on", "+            }", "+        }", "+        for (final Field field : getSingleDataPointFields(sig)) {", "+            Class<?> type = field.getType();", "+            if (sig.canAcceptType(type)) {", "+                list.add(PotentialAssignment.forValue(field.getName(), getStaticFieldValue(field)));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fe1e835d0a18ff256f5650eab3e4b66", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32bf6f7c3b2e8bcacbd6eacee84027fe", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/validation/BadlyFormedClassesTest.java", "commitBeforeChange": "c5ece65fe537092b9552f0efcca8a1e144ca4182", "commitAfterChange": "3dd6b9fca5ccbd02a4d1cb5c5b3c921e369662a0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t \t@Test public void noRunnableMethods()", "signatureAfterChange": "  \t@Test \tpublic void noRunnableMethods()", "diff": ["-\t", "-\t@Test public void noRunnableMethods() {", "-\t\tJUnitCore core = new JUnitCore();", "-\t\tResult result = core.run(new Class[] {NoTests.class});", "-\t\tFailure failure = result.getFailures().get(0);", "-\t\tassertEquals(\"No runnable methods\", failure.getException().getMessage());", "+", "+\t@Test", "+\tpublic void noRunnableMethods() {", "+\t\tassertEquals(\"No runnable methods\", exceptionMessageFrom(NoTests.class));", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cbf31419cfa4b19abc52d76373ce0c7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/validation/BadlyFormedClassesTest.java", "commitBeforeChange": "c5ece65fe537092b9552f0efcca8a1e144ca4182", "commitAfterChange": "3dd6b9fca5ccbd02a4d1cb5c5b3c921e369662a0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t@Test public void constructorException()", "signatureAfterChange": "  \t@Test \tpublic void constructorException()", "diff": ["-\t", "-\t@Test public void constructorException() {", "-\t\tJUnitCore core = new JUnitCore();", "-\t\tResult result = core.run(new Class[] {FaultyConstructor.class});", "-\t\tFailure failure = result.getFailures().get(0);", "-\t\tassertEquals(\"Thrown during construction\", failure.getException().getMessage());", "+", "+\t@Test", "+\tpublic void constructorException() {", "+\t\tString message= exceptionMessageFrom(FaultyConstructor.class);", "+\t\tassertEquals(\"Thrown during construction\", message);"]}]}
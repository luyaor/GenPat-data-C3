{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a3765bcff5249445bba0c69daf7fa71", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37f781762e40c6c98e610fe76ac242e7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Suite.java", "commitBeforeChange": "09fcafc04e07b3481ef60159de2d6ae3464b98ac", "commitAfterChange": "b8008562db24f9189b90dd0e3864a381681d527f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\tprivate List<Runner> runners(Class<?> klass, Class<?>[] annotatedClasses) \t\t\t\tthrows InitializationError", "signatureAfterChange": "  \t\tprivate List<Runner> runners(Class<?>[] children)", "diff": ["-\t\tprivate List<Runner> runners(Class<?> klass, Class<?>[] annotatedClasses)", "-\t\t\tArrayList<Runner> runners= new ArrayList<Runner>();", "-\t\t\taddParent(klass);", "-\t\t\t\tfor (Class<?> each : annotatedClasses) {", "-\t\t\t\t\tRunner childRunner= Request.aClass(each).getRunner();", "-\t\t\t\t\tif (childRunner != null)", "-\t\t\t\t\t\trunners.add(childRunner);", "-\t\t\t\t}", "-\t\t\t\tremoveParent(klass);", "+", "+\t\tprivate List<Runner> runners(Class<?>[] children) {", "+\t\t\tArrayList<Runner> runners= new ArrayList<Runner>();", "+\t\t\tfor (Class<?> each : children) {", "+\t\t\t\tRunner childRunner= Request.aClass(each).getRunner();", "+\t\t\t\tif (childRunner != null)", "+\t\t\t\t\trunners.add(childRunner);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3682bb75bc6fe23dce044bff0650012", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/RunnerBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate List<Runner> runners(Class<?>[] children)", "signatureAfterChange": "      private List<Runner> runners(Class<?>[] children)", "diff": ["-\t", "-\tprivate List<Runner> runners(Class<?>[] children) {", "-\t\tArrayList<Runner> runners= new ArrayList<Runner>();", "-\t\tfor (Class<?> each : children) {", "-\t\t\tRunner childRunner= safeRunnerForClass(each);", "-\t\t\tif (childRunner != null)", "-\t\t\t\trunners.add(childRunner);", "-\t\t}", "-\t\treturn runners;", "-\t}", "+", "+    private List<Runner> runners(Class<?>[] children) {", "+        ArrayList<Runner> runners = new ArrayList<Runner>();", "+        for (Class<?> each : children) {", "+            Runner childRunner = safeRunnerForClass(each);", "+            if (childRunner != null) {", "+                runners.add(childRunner);", "+            }", "+        }", "+        return runners;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32ae32a940f7edaff1840a36df0b12a6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf7d319fd85353383cccccc06e0a8435", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\tprivate Description parentDescription(Description description)", "signatureAfterChange": "          private Description parentDescription(Description description)", "diff": ["-\t\tprivate Description parentDescription(Description description) {", "-\t\t\tClass<?> testClass= description.getTestClass();", "-\t\t\tif (testClass == null)", "-\t\t\t\treturn null;", "-\t\t\treturn Description.createSuiteDescription(testClass);", "-\t\t}", "+        private Description parentDescription(Description description) {", "+            Class<?> testClass = description.getTestClass();", "+            if (testClass == null) {", "+                return null;", "+            }", "+            return Description.createSuiteDescription(testClass);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d291c1dd1a917a963c6af6f0f307e025", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate Test testCaseForClass(Class<?> each)", "signatureAfterChange": "      private Test testCaseForClass(Class<?> each)", "diff": ["-\tprivate Test testCaseForClass(Class<?> each) {", "-\t\tif (TestCase.class.isAssignableFrom(each))", "-\t\t\treturn new TestSuite(each.asSubclass(TestCase.class));", "-\t\telse", "-\t\t\treturn warning(each.getCanonicalName() + \" does not extend TestCase\");", "-\t}", "+", "+    private Test testCaseForClass(Class<?> each) {", "+        if (TestCase.class.isAssignableFrom(each)) {", "+            return new TestSuite(each.asSubclass(TestCase.class));", "+        } else {", "+            return warning(each.getCanonicalName() + \" does not extend TestCase\");", "+        }", "+    }"]}]}
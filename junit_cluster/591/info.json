{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45a251015a70f8aaff86abd3d1905a9f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b42acd496e26c5116e7c2a6b41be41e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "c12af8eb53b2464efff959b633f4c189caf2f1e7", "commitAfterChange": "90bf3119a6326671cc467386036302cc6040f752", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tpublic Class<?> parseClass()", "signatureAfterChange": " \tpublic Class<?> parseClass()", "diff": ["+\t// This seems like reasonable API once we \"Composite-ize\" Description", "-\t\tMatcher matcher= Pattern.compile(\"(.*)\\\\((.*)\\\\)\").matcher(toString());", "-\t\tif (matcher.matches())", "-\t\t\ttry {", "-\t\t\t\treturn Class.forName(matcher.group(2));", "-\t\t\t} catch (ClassNotFoundException e) {", "+\t\tString name= getClassName();", "+\t\tif (name == null)", "+\t\t\treturn null;", "+\t\ttry {", "+\t\t\treturn Class.forName(name);", "+\t\t} catch (ClassNotFoundException e) {", "-\t\t\t\te.printStackTrace();", "-\t\t\t}", "-\t\treturn null;", "+\t\t\te.printStackTrace();", "+\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f00872426c467f191bc9507fc17ce34", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "95a8c63cb0a7867d58ee4a0777fec65bab39a1ec", "commitAfterChange": "c7895eb8695d79b14ff2f903fbb2fab3e52e4c43", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate static boolean canHaveCategorizedChildren(Description description)", "signatureAfterChange": " \tprivate static boolean canHaveCategorizedChildren(Description description)", "diff": ["+\t// parentage.", "-\t\tRunWith annotation= description.getAnnotation(RunWith.class);", "-\t\tif (annotation == null)", "-\t\t\treturn true;", "-\t\t// TODO: something more general", "-\t\treturn !annotation.value().equals(Parameterized.class);", "+\t\tfor (Description each : description.getChildren())", "+\t\t\tif (each.getTestClass() == null)", "+\t\t\t\treturn false;", "+\t\treturn true;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfc08c5b1ef811d1b6d6d3458967c85a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12f2523cf81769f336c089ea0072c82f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "93d773835c0c6f70bc89bbf5e4d273c289423a64", "commitAfterChange": "dbe771125873b707dfbc95f066649b4be8f247b2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          @Override         public Object getValue() throws CouldNotGenerateValueException", "signatureAfterChange": "          @Override         public Object getValue() throws CouldNotGenerateValueException", "diff": ["-            } catch (Throwable t) {", "-                DataPoint annotation = fMethod.getAnnotation(DataPoint.class); ", "-                if (annotation != null) {", "-                    for (Class<? extends Throwable> ignorable : annotation.ignoredExceptions()) {", "-                        Assume.assumeThat(t, not(instanceOf(ignorable)));", "-                    }", "-                }", "+            } catch (Throwable throwable) {", "+                DataPoint annotation = fMethod.getAnnotation(DataPoint.class);", "+                Assume.assumeTrue(annotation == null || !isAssignableToAnyOf(annotation.ignoredExceptions(), throwable));", "-                throw new CouldNotGenerateValueException(t);", "+                throw new CouldNotGenerateValueException(throwable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afa475bec50368ce07c6f14c873ecc57", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "93d773835c0c6f70bc89bbf5e4d273c289423a64", "commitAfterChange": "dbe771125873b707dfbc95f066649b4be8f247b2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) throws Throwable", "signatureAfterChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) throws Throwable", "diff": ["-                } catch (Throwable t) {", "+                } catch (Throwable throwable) {", "-                    if (annotation != null) {", "-                        for (Class<? extends Throwable> ignored : annotation.ignoredExceptions()) {", "-                            if (ignored.isAssignableFrom(t.getClass())) {", "-                                return;", "-                            }", "-                        }", "+                    if (annotation != null && isAssignableToAnyOf(annotation.ignoredExceptions(), throwable)) {", "+                        return;", "+                    } else {", "+                        throw throwable;", "-                    throw t;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f26a065f427ea4844bc1b020c5e2191", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c823927b556aee229135dbb4c5c6180d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/CategoryFilterFactory.java", "commitBeforeChange": "5edfb4447b609c178d63a3d991172861076d143b", "commitAfterChange": "34336085d5aba69c997f8e6b244531561afebcd4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "     @Override     public Filter createFilter(String categories) throws FilterNotCreatedException", "signatureAfterChange": "      @Override     public Filter createFilter(FilterFactoryParams params)", "diff": ["-    public Filter createFilter(String categories) throws FilterNotCreatedException {", "-            return createFilter(parseCategories(categories));", "-        } catch (Exception e) {", "-            throw new FilterNotCreatedException(\"Could not create filter.\", e);", "+", "+    @Override", "+    public Filter createFilter(FilterFactoryParams params) {", "+        return createFilter(((CategoryFilterFactoryParams) params).getCategories());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc37df930a2e0dbaf34c076a5d6a7e4b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/experimental/theories/runner/WithDataPointFields.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\t@Test(timeout= 5) \t\tpublic void shouldStop()", "signatureAfterChange": "  \t\t@Theory \t\tpublic void haveAPostiveSquare()", "diff": ["-\tpublic static class HonorTimeout {", "-\t\t@Test(timeout= 5)", "-\t\tpublic void shouldStop() {", "-\t\t\twhile (true) {", "-\t\t\t\ttry {", "-\t\t\t\t\tThread.sleep(1000);", "-\t\t\t\t} catch (InterruptedException e) {", "-", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+", "+\t\t@Theory", "+\t\tpublic void haveAPostiveSquare() {", "+\t\t\tassertTrue(x * x > 0);", "+\t\t}"]}]}
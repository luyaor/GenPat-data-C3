{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ffdaeef0f9ad84aa0adc6540d9e6d6d9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06b398a92555e9b40308ce4c4232971b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate void runAfters()", "signatureAfterChange": "      private void runAfters()", "diff": ["-\tprivate void runAfters() {", "-\t\tList<Method> afters= fTestMethod.getAfters();", "-\t\tfor (Method after : afters)", "-\t\t\ttry {", "-\t\t\t\tafter.invoke(fTest);", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\taddFailure(e.getTargetException());", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\taddFailure(e); // Untested, but seems impossible", "-\t\t\t}", "-\t}", "+", "+    private void runAfters() {", "+        List<Method> afters = fTestMethod.getAfters();", "+        for (Method after : afters) {", "+            try {", "+                after.invoke(fTest);", "+            } catch (InvocationTargetException e) {", "+                addFailure(e.getTargetException());", "+            } catch (Throwable e) {", "+                addFailure(e); // Untested, but seems impossible", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c6622285b47686e6588fb0a8dee6d13", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate Request constructLeafRequest(List<Description> leaves)", "signatureAfterChange": "      private Request constructLeafRequest(List<Description> leaves)", "diff": ["-\tprivate Request constructLeafRequest(List<Description> leaves) {", "-\t\tfinal List<Runner> runners = new ArrayList<Runner>();", "-\t\tfor (Description each : leaves)", "-\t\t\trunners.add(buildRunner(each));", "-\t\treturn new Request() {", "-\t\t\t@Override", "-\t\t\tpublic Runner getRunner() {", "-\t\t\t\ttry {", "-\t\t\t\t\treturn new Suite((Class<?>)null, runners) {};", "-\t\t\t\t} catch (InitializationError e) {", "-\t\t\t\t\treturn new ErrorReportingRunner(null, e);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t}", "+    private Request constructLeafRequest(List<Description> leaves) {", "+        final List<Runner> runners = new ArrayList<Runner>();", "+        for (Description each : leaves) {", "+            runners.add(buildRunner(each));", "+        }", "+        return new Request() {", "+            @Override", "+            public Runner getRunner() {", "+                try {", "+                    return new Suite((Class<?>) null, runners) {", "+                    };", "+                } catch (InitializationError e) {", "+                    return new ErrorReportingRunner(null, e);", "+                }", "+            }", "+        };", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad3e031d71af31736704cf08aad020c0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/tests/extensions/ActiveTestTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tActiveTestSuite createActiveTestSuite()", "signatureAfterChange": "      ActiveTestSuite createActiveTestSuite()", "diff": ["-\tActiveTestSuite createActiveTestSuite() {", "-\t\tActiveTestSuite suite= new ActiveTestSuite();", "-\t\tfor (int i= 0; i < 100; i++) ", "-\t\t\tsuite.addTest(new SuccessTest());", "-\t\treturn suite;", "-\t}", "+", "+    ActiveTestSuite createActiveTestSuite() {", "+        ActiveTestSuite suite = new ActiveTestSuite();", "+        for (int i = 0; i < 100; i++) {", "+            suite.addTest(new SuccessTest());", "+        }", "+        return suite;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b95372da577acc03e75a6315412fbb4f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-\tprivate void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) {", "-\t\tfor (FrameworkMethod dataPointsMethod : fClass", "-\t\t\t\t.getAnnotatedMethods(DataPoints.class))", "-\t\t\ttry {", "-\t\t\t\taddMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\t// ignore and move on", "-\t\t\t}", "-\t}", "+    private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) {", "+        for (FrameworkMethod dataPointsMethod : fClass", "+                .getAnnotatedMethods(DataPoints.class)) {", "+            try {", "+                addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "+            } catch (Throwable e) {", "+                // ignore and move on", "+            }", "+        }", "+    }"]}]}
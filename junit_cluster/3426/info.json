{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71b2fb647401bf76e688f028edc6f153", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a5bc9edb0eef6dc2c97e3e55c2644d3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/interceptor/Interceptors.java", "commitBeforeChange": "38f920506399298a945ed38e08e18e1dafb62520", "commitAfterChange": "1e54b68d2fe7c4238993b360c7be6fbb05d30528", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Statement intercept(Statement statement, Object target, \t\t\tFrameworkMethod method)", "signatureAfterChange": "  \tprivate Statement intercept(Statement statement, Object target, \t\t\tFrameworkMethod method)", "diff": ["-\t\tClass<?> javaClass= getTestClass().getJavaClass();", "-\t\tField[] fields= javaClass.getFields();", "-\t\tfor (Field each : fields) {", "-\t\t\t// TODO (May 18, 2009 10:30:03 PM): validate, validate!", "-\t\t\tif (each.getAnnotation(Interceptor.class) != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tStatementInterceptor interceptor= (StatementInterceptor) each", "-\t\t\t\t\t\t\t.get(target);", "-\t\t\t\t\tresult= interceptor.intercept(result, method);", "-\t\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\t\t\"How did getFields return a field we couldn't access?\");", "-\t\t\t\t}", "+\t\tfor (FrameworkField each : interceptorFields())", "+\t\t\ttry {", "+\t\t\t\tStatementInterceptor interceptor= (StatementInterceptor) each", "+\t\t\t\t\t.get(target);", "+\t\t\t\tresult= interceptor.intercept(result, method);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\tthrow new RuntimeException(", "+\t\t\t\t\t\t\"How did getFields return a field we couldn't access?\");", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0426fc0ab7f7109554fa0e46ee46a58", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/interceptor/Interceptors.java", "commitBeforeChange": "5ccb8e7c1189ac4a248dc2aa2852d1a760937466", "commitAfterChange": "5261a76c3014edc93f568ac76e8012d59dc2c831", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Statement intercept(Statement statement, Object target, \t\t\tFrameworkMethod method)", "signatureAfterChange": "  \tprivate Statement intercept(Statement statement, Object target, \t\t\tFrameworkMethod method)", "diff": ["-\t\tClass<?> javaClass= getTestClass().getJavaClass();", "-\t\tField[] fields= javaClass.getFields();", "-\t\tfor (Field each : fields) {", "-\t\t\t// TODO (May 18, 2009 10:30:03 PM): validate, validate!", "-\t\t\tif (each.getAnnotation(Interceptor.class) != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tStatementInterceptor interceptor= (StatementInterceptor) each", "-\t\t\t\t\t\t\t.get(target);", "-\t\t\t\t\tresult= interceptor.intercept(result, method);", "-\t\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\t\t\"How did getFields return a field we couldn't access?\");", "-\t\t\t\t}", "+\t\tfor (FrameworkField each : interceptorFields())", "+\t\t\ttry {", "+\t\t\t\tStatementInterceptor interceptor= (StatementInterceptor) each", "+\t\t\t\t\t.get(target);", "+\t\t\t\tresult= interceptor.intercept(result, method);", "+\t\t\t} catch (IllegalAccessException e) {", "+\t\t\t\tthrow new RuntimeException(", "+\t\t\t\t\t\t\"How did getFields return a field we couldn't access?\");", "-\t\t}"]}]}
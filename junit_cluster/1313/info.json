{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "280715f66c0f240147ddcf4fa6682af4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1829175dd3e8f88158287600e3853504", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "d48bf9735b916e7f2c06575970f90dff6f512822", "commitAfterChange": "41e5c7ed5f82b5a588828584c3ac765b40a76cea", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate static <T> Runner parallelize(Runner runner)", "signatureAfterChange": "  \tprivate static Runner parallelize(Runner runner)", "diff": ["-\tprivate static <T> Runner parallelize(Runner runner) {", "-\t\tif (runner instanceof ParentRunner<?>) {", "+\tprivate static Runner parallelize(Runner runner) {", "+\t\tif (runner instanceof ParentRunner) {", "-\t\t\t\tprivate final List<Future<Object>> fResults= new ArrayList<Future<Object>>();", "+\t\t\t\tprivate final ExecutorService fService= Executors.newCachedThreadPool();", "-\t\t\t\tprivate final ExecutorService fService= Executors", "-\t\t\t\t\t\t.newCachedThreadPool();", "-", "-\t\t\t\tpublic void schedule(final Runnable childStatement) {", "-\t\t\t\t\tfResults.add(fService.submit(new Callable<Object>() {", "-\t\t\t\t\t\tpublic Object call() throws Exception {", "-\t\t\t\t\t\t\tchildStatement.run();", "-\t\t\t\t\t\t\treturn null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}));", "+\t\t\t\tpublic void schedule(Runnable childStatement) {", "+\t\t\t\t\tfService.submit(childStatement);", "-\t\t\t\t\tfor (Future<Object> each : fResults)", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\teach.get();", "-\t\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\t\te.printStackTrace();", "-\t\t\t\t\t\t}", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfService.shutdown();", "+\t\t\t\t\t\tfService.awaitTermination(Long.MAX_VALUE, TimeUnit.DAYS);", "+\t\t\t\t\t} catch (InterruptedException e) {", "+\t\t\t\t\t\te.printStackTrace(System.err);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d530490bc587d25ede03ab3c5603bbc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/ParallelComputer.java", "commitBeforeChange": "4d6f0702dae590809b808230f027a60aa0a4a345", "commitAfterChange": "b737131b847c53bb4f1cf6dbf86f586008550eba", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate static <T> Runner parallelize(ParentRunner<T> runner) \t\t\tthrows InitializationError", "signatureAfterChange": "  \tprivate static <T> Runner parallelize(ParentRunner<T> runner)", "diff": ["-\tprivate static <T> Runner parallelize(ParentRunner<T> runner)", "-\t\t\tthrows InitializationError {", "-\t\treturn new ParallelParentRunner<T>(runner);", "-\t}", "+\tprivate static <T> Runner parallelize(ParentRunner<T> runner) {", "+\t\trunner.setRunnerInterceptor(new RunnerInterceptor() {", "+\t\t\tprivate final List<Future<Object>> fResults= new ArrayList<Future<Object>>();", "+\t\t\tprivate final ExecutorService fService= Executors", "+\t\t\t\t\t.newCachedThreadPool();", "+\t\t\tpublic void runChild(final Runnable childStatement) {", "+\t\t\t\tfResults.add(fService.submit(new Callable<Object>() {", "+\t\t\t\t\tpublic Object call() throws Exception {", "+\t\t\t\t\t\tchildStatement.run();", "+\t\t\t\t\t\treturn null;", "+\t\t\t\t\t}", "+\t\t\t\t}));", "+\t\t\t}", "+\t\t\tpublic void finished() {", "+\t\t\t\tfor (Future<Object> each : fResults)", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\teach.get();", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\te.printStackTrace();", "+\t\t\t\t\t}", "+\t\t\t}", "+\t\t});", "+\t\treturn runner;"]}]}
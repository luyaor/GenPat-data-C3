{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e17f0c7f365051a16554b6f0d0e0706e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb292841401494fed46bddddb36a660", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "         public static CategoryFilter include(Class<?> categoryType)", "signatureAfterChange": "          public static CategoryFilter include(boolean matchAny, Class<?>... categories)", "diff": ["-        public static CategoryFilter include(Class<?> categoryType) {", "-            return new CategoryFilter(categoryType, null);", "+", "+        public static CategoryFilter include(boolean matchAny, Class<?>... categories) {", "+            if (hasNull(categories)) {", "+                throw new NullPointerException(\"has null category\");", "+            }", "+            return categoryFilter(matchAny, createSet(categories), true, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74d1b51109acee44431df44010cd84c6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "196c4ed79cbaca37709643b54913b361b677ae04", "commitAfterChange": "0a9a389570a171b67c3155d312f2e90bdab5aaaf", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 20, "signatureBeforeChange": "             @Override             public Filter createFilter(Class<?>[] categories) throws ClassNotFoundException", "signatureAfterChange": "              public IncludesAny(Set<Class<?>> categories)", "diff": ["+            public IncludesAny(Set<Class<?>> categories) {", "+                super(true, categories, true, null);", "-        public static class ExcludesAnyFilterFactory extends CategoriesFilterFactory {", "-            @Override", "-            public Filter createFilter(Class<?>[] categories) throws ClassNotFoundException {", "-                return new CategoryFilterWrapper(CategoryFilter.exclude(categories));"]}]}
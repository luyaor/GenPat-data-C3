{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61a44c0b7f4fb5d5feb8cafdcad8fe4a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a7bbcab70f12d7a43d28858b83842ca", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t@Override \tprotected void validateTestMethods(List<Throwable> errors)", "signatureAfterChange": "      @Override     protected void validateTestMethods(List<Throwable> errors)", "diff": ["-\t", "-\t@Override", "-\tprotected void validateTestMethods(List<Throwable> errors) {", "-\t\tfor (FrameworkMethod each : computeTestMethods())", "-\t\t\tif(each.getAnnotation(Theory.class) != null)", "-\t\t\t\teach.validatePublicVoid(false, errors);", "-\t\t\telse", "-\t\t\t\teach.validatePublicVoidNoArg(false, errors);", "-\t}", "+", "+    @Override", "+    protected void validateTestMethods(List<Throwable> errors) {", "+        for (FrameworkMethod each : computeTestMethods()) {", "+            if (each.getAnnotation(Theory.class) != null) {", "+                each.validatePublicVoid(false, errors);", "+            } else {", "+                each.validatePublicVoidNoArg(false, errors);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cfccbb8bbc971cc64f8fda192a11231", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/ComparisonCriteria.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate int assertArraysAreSameLength(Object expecteds, \t\t\tObject actuals, String header)", "signatureAfterChange": "      private int assertArraysAreSameLength(Object expecteds,             Object actuals, String header)", "diff": ["-\tprivate int assertArraysAreSameLength(Object expecteds,", "-\t\t\tObject actuals, String header) {", "-\t\tif (expecteds == null)", "-\t\t\tAssert.fail(header + \"expected array was null\");", "-\t\tif (actuals == null)", "-\t\t\tAssert.fail(header + \"actual array was null\");", "-\t\tint actualsLength= Array.getLength(actuals);", "-\t\tint expectedsLength= Array.getLength(expecteds);", "-\t\tif (actualsLength != expectedsLength)", "-\t\t\tAssert.fail(header + \"array lengths differed, expected.length=\"", "-\t\t\t\t\t+ expectedsLength + \" actual.length=\" + actualsLength);", "-\t\treturn expectedsLength;", "-\t}", "+    private int assertArraysAreSameLength(Object expecteds,", "+            Object actuals, String header) {", "+        if (expecteds == null) {", "+            Assert.fail(header + \"expected array was null\");", "+        }", "+        if (actuals == null) {", "+            Assert.fail(header + \"actual array was null\");", "+        }", "+        int actualsLength = Array.getLength(actuals);", "+        int expectedsLength = Array.getLength(expecteds);", "+        if (actualsLength != expectedsLength) {", "+            Assert.fail(header + \"array lengths differed, expected.length=\"", "+                    + expectedsLength + \" actual.length=\" + actualsLength);", "+        }", "+        return expectedsLength;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3883f6c2fe870280f2b453cfb6c5b523", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic TestClass(Class<?> klass)", "signatureAfterChange": "     public TestClass(Class<?> klass)", "diff": ["-\t */", "-\tpublic TestClass(Class<?> klass) {", "-\t\tfClass= klass;", "-\t\tif (klass != null && klass.getConstructors().length > 1)", "-\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\"Test class can only have one constructor\");", "+     */", "+    public TestClass(Class<?> klass) {", "+        fClass = klass;", "+        if (klass != null && klass.getConstructors().length > 1) {", "+            throw new IllegalArgumentException(", "+                    \"Test class can only have one constructor\");", "+        }", "-\t\tfor (Class<?> eachClass : getSuperClasses(fClass)) {", "-\t\t\tfor (Method eachMethod : MethodSorter.getDeclaredMethods(eachClass))", "-\t\t\t\taddToAnnotationLists(new FrameworkMethod(eachMethod),", "-\t\t\t\t\t\tfMethodsForAnnotations);", "-\t\t\tfor (Field eachField : eachClass.getDeclaredFields())", "-\t\t\t\taddToAnnotationLists(new FrameworkField(eachField),", "-\t\t\t\t\t\tfFieldsForAnnotations);", "-\t\t}", "-\t}", "+        for (Class<?> eachClass : getSuperClasses(fClass)) {", "+            for (Method eachMethod : MethodSorter.getDeclaredMethods(eachClass)) {", "+                addToAnnotationLists(new FrameworkMethod(eachMethod),", "+                        fMethodsForAnnotations);", "+            }", "+            for (Field eachField : eachClass.getDeclaredFields()) {", "+                addToAnnotationLists(new FrameworkField(eachField),", "+                        fFieldsForAnnotations);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bf332ccccd91b0ff122c690b7069a62", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "signatureAfterChange": "     public void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "diff": ["-\t */", "-\tpublic void validatePublicVoid(boolean isStatic, List<Throwable> errors) {", "-\t\tif (Modifier.isStatic(fMethod.getModifiers()) != isStatic) {", "-\t\t\tString state= isStatic ? \"should\" : \"should not\";", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() \" + state + \" be static\"));", "-\t\t}", "-\t\tif (!Modifier.isPublic(fMethod.getDeclaringClass().getModifiers()))", "-\t\t\terrors.add(new Exception(\"Class \" + fMethod.getDeclaringClass().getName() + \" should be public\"));", "-\t\tif (!Modifier.isPublic(fMethod.getModifiers()))", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be public\"));", "-\t\tif (fMethod.getReturnType() != Void.TYPE)", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be void\"));", "-\t}", "+     */", "+    public void validatePublicVoid(boolean isStatic, List<Throwable> errors) {", "+        if (Modifier.isStatic(fMethod.getModifiers()) != isStatic) {", "+            String state = isStatic ? \"should\" : \"should not\";", "+            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() \" + state + \" be static\"));", "+        }", "+        if (!Modifier.isPublic(fMethod.getDeclaringClass().getModifiers())) {", "+            errors.add(new Exception(\"Class \" + fMethod.getDeclaringClass().getName() + \" should be public\"));", "+        }", "+        if (!Modifier.isPublic(fMethod.getModifiers())) {", "+            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be public\"));", "+        }", "+        if (fMethod.getReturnType() != Void.TYPE) {", "+            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be void\"));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f7595ab36a24fd8b3011e527b0e59bc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate <T extends Annotation> T findDeepAnnotation( \t\t\tAnnotation[] annotations, Class<T> annotationType, int depth)", "signatureAfterChange": "      private <T extends Annotation> T findDeepAnnotation(             Annotation[] annotations, Class<T> annotationType, int depth)", "diff": ["-\tprivate <T extends Annotation> T findDeepAnnotation(", "-\t\t\tAnnotation[] annotations, Class<T> annotationType, int depth) {", "-\t\tif (depth == 0)", "-\t\t\treturn null;", "-\t\tfor (Annotation each : annotations) {", "-\t\t\tif (annotationType.isInstance(each))", "-\t\t\t\treturn annotationType.cast(each);", "-\t\t\tAnnotation candidate= findDeepAnnotation(each.annotationType()", "-\t\t\t\t\t.getAnnotations(), annotationType, depth - 1);", "-\t\t\tif (candidate != null)", "-\t\t\t\treturn annotationType.cast(candidate);", "-\t\t}", "+    private <T extends Annotation> T findDeepAnnotation(", "+            Annotation[] annotations, Class<T> annotationType, int depth) {", "+        if (depth == 0) {", "+            return null;", "+        }", "+        for (Annotation each : annotations) {", "+            if (annotationType.isInstance(each)) {", "+                return annotationType.cast(each);", "+            }", "+            Annotation candidate = findDeepAnnotation(each.annotationType()", "+                    .getAnnotations(), annotationType, depth - 1);", "+            if (candidate != null) {", "+                return annotationType.cast(candidate);", "+            }", "+        }", "-\t\treturn null;", "-\t}", "+        return null;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5923a0297ce96b83cdd9ec0127079c3d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@SuppressWarnings(\"deprecation\") \tprivate List<Throwable> getCauses(Throwable cause)", "signatureAfterChange": "      @SuppressWarnings(\"deprecation\")     private List<Throwable> getCauses(Throwable cause)", "diff": ["-\t@SuppressWarnings(\"deprecation\")", "-\tprivate List<Throwable> getCauses(Throwable cause) {", "-\t\tif (cause instanceof InvocationTargetException)", "-\t\t\treturn getCauses(cause.getCause());", "-\t\tif (cause instanceof InitializationError)", "-\t\t\treturn ((InitializationError) cause).getCauses();", "-\t\tif (cause instanceof org.junit.internal.runners.InitializationError)", "-\t\t\treturn ((org.junit.internal.runners.InitializationError) cause)", "-\t\t\t\t\t.getCauses();", "-\t\treturn Arrays.asList(cause);", "-\t}", "+    @SuppressWarnings(\"deprecation\")", "+    private List<Throwable> getCauses(Throwable cause) {", "+        if (cause instanceof InvocationTargetException) {", "+            return getCauses(cause.getCause());", "+        }", "+        if (cause instanceof InitializationError) {", "+            return ((InitializationError) cause).getCauses();", "+        }", "+        if (cause instanceof org.junit.internal.runners.InitializationError) {", "+            return ((org.junit.internal.runners.InitializationError) cause)", "+                    .getCauses();", "+        }", "+        return Arrays.asList(cause);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f1cf7461d36d4c85d5d2d96391b1e32", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate boolean isShadowed(Method current, Method previous)", "signatureAfterChange": "      private boolean isShadowed(Method current, Method previous)", "diff": ["-\tprivate boolean isShadowed(Method current, Method previous) {", "-\t\tif (! previous.getName().equals(current.getName()))", "-\t\t\treturn false;", "-\t\tif (previous.getParameterTypes().length != current.getParameterTypes().length)", "-\t\t\treturn false;", "-\t\tfor (int i= 0; i < previous.getParameterTypes().length; i++) {", "-\t\t\tif (! previous.getParameterTypes()[i].equals(current.getParameterTypes()[i]))", "-\t\t\t\treturn false;", "-\t\t}", "-\t\treturn true;", "-\t}", "+    private boolean isShadowed(Method current, Method previous) {", "+        if (!previous.getName().equals(current.getName())) {", "+            return false;", "+        }", "+        if (previous.getParameterTypes().length != current.getParameterTypes().length) {", "+            return false;", "+        }", "+        for (int i = 0; i < previous.getParameterTypes().length; i++) {", "+            if (!previous.getParameterTypes()[i].equals(current.getParameterTypes()[i])) {", "+                return false;", "+            }", "+        }", "+        return true;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fe9a63fc2230a7025d331bb792997a3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tprivate <T extends FrameworkMember<T>> void addToAnnotationLists(T member, \t\t\tMap<Class<?>, List<T>> map)", "signatureAfterChange": "      private <T extends FrameworkMember<T>> void addToAnnotationLists(T member,             Map<Class<?>, List<T>> map)", "diff": ["-\tprivate <T extends FrameworkMember<T>> void addToAnnotationLists(T member,", "-\t\t\tMap<Class<?>, List<T>> map) {", "-\t\tfor (Annotation each : member.getAnnotations()) {", "-\t\t\tClass<? extends Annotation> type= each.annotationType();", "-\t\t\tList<T> members= getAnnotatedMembers(map, type);", "-\t\t\tif (member.isShadowedBy(members))", "-\t\t\t\treturn;", "-\t\t\tif (runsTopToBottom(type))", "-\t\t\t\tmembers.add(0, member);", "-\t\t\telse", "-\t\t\t\tmembers.add(member);", "-\t\t}", "-\t}", "+    private <T extends FrameworkMember<T>> void addToAnnotationLists(T member,", "+            Map<Class<?>, List<T>> map) {", "+        for (Annotation each : member.getAnnotations()) {", "+            Class<? extends Annotation> type = each.annotationType();", "+            List<T> members = getAnnotatedMembers(map, type);", "+            if (member.isShadowedBy(members)) {", "+                return;", "+            }", "+            if (runsTopToBottom(type)) {", "+                members.add(0, member);", "+            } else {", "+                members.add(member);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c92271ae44afb4f37d3a604e8ae367", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\t@Override \t\tpublic boolean shouldRun(Description description)", "signatureAfterChange": "          @Override         public boolean shouldRun(Description description)", "diff": ["-\t\t@Override", "-\t\tpublic boolean shouldRun(Description description) {", "-\t\t\tif (hasCorrectCategoryAnnotation(description))", "-\t\t\t\treturn true;", "-\t\t\tfor (Description each : description.getChildren())", "-\t\t\t\tif (shouldRun(each))", "-\t\t\t\t\treturn true;", "-\t\t\treturn false;", "-\t\t}", "+        @Override", "+        public boolean shouldRun(Description description) {", "+            if (hasCorrectCategoryAnnotation(description)) {", "+                return true;", "+            }", "+            for (Description each : description.getChildren()) {", "+                if (shouldRun(each)) {", "+                    return true;", "+                }", "+            }", "+            return false;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c15afd5051b3a8c4c48509076fcd96ac", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprotected void runTestMethod()", "signatureAfterChange": "      protected void runTestMethod()", "diff": ["-\t", "-\tprotected void runTestMethod() {", "-\t\ttry {", "-\t\t\tfTestMethod.invoke(fTest);", "-\t\t\tif (fTestMethod.expectsException())", "-\t\t\t\taddFailure(new AssertionError(\"Expected exception: \" + fTestMethod.getExpectedException().getName()));", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\tThrowable actual= e.getTargetException();", "-\t\t\tif (actual instanceof AssumptionViolatedException)", "-\t\t\t\treturn;", "-\t\t\telse if (!fTestMethod.expectsException())", "-\t\t\t\taddFailure(actual);", "-\t\t\telse if (fTestMethod.isUnexpected(actual)) {", "-\t\t\t\tString message= \"Unexpected exception, expected<\" + fTestMethod.getExpectedException().getName() + \"> but was<\"", "-\t\t\t\t\t+ actual.getClass().getName() + \">\";", "-\t\t\t\taddFailure(new Exception(message, actual));", "-\t\t\t}", "-\t\t} catch (Throwable e) {", "-\t\t\taddFailure(e);", "-\t\t}", "-\t}", "+", "+    protected void runTestMethod() {", "+        try {", "+            fTestMethod.invoke(fTest);", "+            if (fTestMethod.expectsException()) {", "+                addFailure(new AssertionError(\"Expected exception: \" + fTestMethod.getExpectedException().getName()));", "+            }", "+        } catch (InvocationTargetException e) {", "+            Throwable actual = e.getTargetException();", "+            if (actual instanceof AssumptionViolatedException) {", "+                return;", "+            } else if (!fTestMethod.expectsException()) {", "+                addFailure(actual);", "+            } else if (fTestMethod.isUnexpected(actual)) {", "+                String message = \"Unexpected exception, expected<\" + fTestMethod.getExpectedException().getName() + \"> but was<\"", "+                        + actual.getClass().getName() + \">\";", "+                addFailure(new Exception(message, actual));", "+            }", "+        } catch (Throwable e) {", "+            addFailure(e);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c30a4d8949119a874355b8809d262a86", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  \tstatic String format(String message, Object expected, Object actual)", "signatureAfterChange": "      static String format(String message, Object expected, Object actual)", "diff": ["-\tstatic String format(String message, Object expected, Object actual) {", "-\t\tString formatted= \"\";", "-\t\tif (message != null && !message.equals(\"\"))", "-\t\t\tformatted= message + \" \";", "-\t\tString expectedString= String.valueOf(expected);", "-\t\tString actualString= String.valueOf(actual);", "-\t\tif (expectedString.equals(actualString))", "-\t\t\treturn formatted + \"expected: \"", "-\t\t\t\t\t+ formatClassAndValue(expected, expectedString)", "-\t\t\t\t\t+ \" but was: \" + formatClassAndValue(actual, actualString);", "-\t\telse", "-\t\t\treturn formatted + \"expected:<\" + expectedString + \"> but was:<\"", "-\t\t\t\t\t+ actualString + \">\";", "-\t}", "+", "+    static String format(String message, Object expected, Object actual) {", "+        String formatted = \"\";", "+        if (message != null && !message.equals(\"\")) {", "+            formatted = message + \" \";", "+        }", "+        String expectedString = String.valueOf(expected);", "+        String actualString = String.valueOf(actual);", "+        if (expectedString.equals(actualString)) {", "+            return formatted + \"expected: \"", "+                    + formatClassAndValue(expected, expectedString)", "+                    + \" but was: \" + formatClassAndValue(actual, actualString);", "+        } else {", "+            return formatted + \"expected:<\" + expectedString + \"> but was:<\"", "+                    + actualString + \">\";", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4eb3ee40d7d5e78ac33a8402e70cb58", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void validateDataPointFields(List<Throwable> errors)", "signatureAfterChange": "      private void validateDataPointFields(List<Throwable> errors)", "diff": ["-\t", "-\tprivate void validateDataPointFields(List<Throwable> errors) {", "-\t\tField[] fields= getTestClass().getJavaClass().getDeclaredFields();", "-\t\t", "-\t\tfor (Field field : fields) {", "-\t\t\tif (field.getAnnotation(DataPoint.class) == null)", "-\t\t\t\tcontinue;", "-\t\t\tif (!Modifier.isStatic(field.getModifiers()))", "-\t\t\t\terrors.add(new Error(\"DataPoint field \" + field.getName() + \" must be static\"));", "-\t\t\tif (!Modifier.isPublic(field.getModifiers()))", "-\t\t\t\terrors.add(new Error(\"DataPoint field \" + field.getName() + \" must be public\"));", "-\t\t}", "-\t}", "+    private void validateDataPointFields(List<Throwable> errors) {", "+        Field[] fields = getTestClass().getJavaClass().getDeclaredFields();", "+        for (Field field : fields) {", "+            if (field.getAnnotation(DataPoint.class) == null) {", "+                continue;", "+            }", "+            if (!Modifier.isStatic(field.getModifiers())) {", "+                errors.add(new Error(\"DataPoint field \" + field.getName() + \" must be static\"));", "+            }", "+            if (!Modifier.isPublic(field.getModifiers())) {", "+                errors.add(new Error(\"DataPoint field \" + field.getName() + \" must be public\"));", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb9cbe5699189f9cfee052a6867c848f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/NoGenericTypeParametersValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate void validateNoTypeParameterOnType(Type type, List<Throwable> errors)", "signatureAfterChange": "      private void validateNoTypeParameterOnType(Type type, List<Throwable> errors)", "diff": ["-\tprivate void validateNoTypeParameterOnType(Type type, List<Throwable> errors) {", "-\t\tif (type instanceof TypeVariable<?>) {", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName()", "-\t\t\t\t\t+ \"() contains unresolved type variable \" + type));", "-\t\t} else if (type instanceof ParameterizedType)", "-\t\t\tvalidateNoTypeParameterOnParameterizedType((ParameterizedType) type, errors);", "-\t\telse if (type instanceof WildcardType)", "-\t\t\tvalidateNoTypeParameterOnWildcardType((WildcardType) type, errors);", "-\t\telse if (type instanceof GenericArrayType)", "-\t\t\tvalidateNoTypeParameterOnGenericArrayType((GenericArrayType) type, errors);", "-\t}", "+    private void validateNoTypeParameterOnType(Type type, List<Throwable> errors) {", "+        if (type instanceof TypeVariable<?>) {", "+            errors.add(new Exception(\"Method \" + fMethod.getName()", "+                    + \"() contains unresolved type variable \" + type));", "+        } else if (type instanceof ParameterizedType) {", "+            validateNoTypeParameterOnParameterizedType((ParameterizedType) type, errors);", "+        } else if (type instanceof WildcardType) {", "+            validateNoTypeParameterOnWildcardType((WildcardType) type, errors);", "+        } else if (type instanceof GenericArrayType) {", "+            validateNoTypeParameterOnGenericArrayType((GenericArrayType) type, errors);", "+        }", "+    }"]}]}
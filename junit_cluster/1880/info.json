{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e4ee164bb56d0a6f27ffd54dffbd6c2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b45f68b360b90b1c25eb8abbf0b1fdd2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tstatic public void assertEquals(String message, Object expected, \t\t\tObject actual)", "signatureAfterChange": "     static public void assertEquals(String message, Object expected,             Object actual)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, Object expected,", "-\t\t\tObject actual) {", "-\t\tif (equalsRegardingNull(expected, actual))", "-\t\t\treturn;", "-\t\telse if (expected instanceof String && actual instanceof String) {", "-\t\t\tString cleanMessage= message == null ? \"\" : message;", "-\t\t\tthrow new ComparisonFailure(cleanMessage, (String) expected,", "-\t\t\t\t\t(String) actual);", "-\t\t} else", "-\t\t\tfailNotEquals(message, expected, actual);", "-\t}", "+     */", "+    static public void assertEquals(String message, Object expected,", "+            Object actual) {", "+        if (equalsRegardingNull(expected, actual)) {", "+            return;", "+        } else if (expected instanceof String && actual instanceof String) {", "+            String cleanMessage = message == null ? \"\" : message;", "+            throw new ComparisonFailure(cleanMessage, (String) expected,", "+                    (String) actual);", "+        } else {", "+            failNotEquals(message, expected, actual);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3eefc238c1c1fd3a0d2cd3e7106e15f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tprivate void addTestMethod(Method m, List<String> names, Class<?> theClass)", "signatureAfterChange": "      private void addTestMethod(Method m, List<String> names, Class<?> theClass)", "diff": ["-\tprivate void addTestMethod(Method m, List<String> names, Class<?> theClass) {", "-\t\tString name= m.getName();", "-\t\tif (names.contains(name))", "-\t\t\treturn;", "-\t\tif (! isPublicTestMethod(m)) {", "-\t\t\tif (isTestMethod(m))", "-\t\t\t\taddTest(warning(\"Test method isn't public: \"+ m.getName() + \"(\" + theClass.getCanonicalName() + \")\"));", "-\t\t\treturn;", "-\t\t}", "-\t\tnames.add(name);", "-\t\taddTest(createTest(theClass, name));", "-\t}", "+", "+    private void addTestMethod(Method m, List<String> names, Class<?> theClass) {", "+        String name = m.getName();", "+        if (names.contains(name)) {", "+            return;", "+        }", "+        if (!isPublicTestMethod(m)) {", "+            if (isTestMethod(m)) {", "+                addTest(warning(\"Test method isn't public: \" + m.getName() + \"(\" + theClass.getCanonicalName() + \")\"));", "+            }", "+            return;", "+        }", "+        names.add(name);", "+        addTest(createTest(theClass, name));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea72dd8ce4b3c413901e5f26790d5c13", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprotected Class<? extends Throwable> getExpectedException()", "signatureAfterChange": "      protected Class<? extends Throwable> getExpectedException()", "diff": ["-\tprotected Class<? extends Throwable> getExpectedException() {", "-\t\tTest annotation= fMethod.getAnnotation(Test.class);", "-\t\tif (annotation == null || annotation.expected() == None.class)", "-\t\t\treturn null;", "-\t\telse", "-\t\t\treturn annotation.expected();", "-\t}", "+    protected Class<? extends Throwable> getExpectedException() {", "+        Test annotation = fMethod.getAnnotation(Test.class);", "+        if (annotation == null || annotation.expected() == None.class) {", "+            return null;", "+        } else {", "+            return annotation.expected();", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "13b3c1e7a2b1c48049c11bc321a7620c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "585265317ca80c668e780f000eb24637", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": " \t@Override \tpublic void runChild(FrameworkMethod method, RunNotifier notifier)", "diff": ["+\t// TODO: public?", "-\tprotected void runChild(FrameworkMethod method, RunNotifier notifier) {", "+\tpublic void runChild(FrameworkMethod method, RunNotifier notifier) {", "-\t\t\teachNotifier.fireTestIgnored();", "-\t\t\treturn;", "+\t\t\trunIgnored(eachNotifier);", "+\t\t} else {", "+\t\t\trunNotIgnored(method, eachNotifier);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84a9cab6039caeee2b64001cb395981f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "af5722e040626f7c3aa14ccbfb4cb2375f43a561", "commitAfterChange": "568e29c871ea144e12f273dc7e12c949a5a507da", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void validateRuleField(Field field, List<Throwable> errors)", "signatureAfterChange": "  \tprivate void validateRuleField(Field field, List<Throwable> errors)", "diff": ["+\t\tif (!MethodRule.class.isAssignableFrom(field.getType()))", "+\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "+\t\t\t\t\t+ \" must implement MethodRule\"));", "-\t\tif (!MethodRule.class.isAssignableFrom(field.getType())) {", "-\t\t\tif (ClassRule.class.isAssignableFrom(field.getType())) {", "-\t\t\t\tif (!Modifier.isStatic(field.getModifiers())) {", "-\t\t\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "-\t\t\t\t\t\t\t+ \" must be static\"));", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "-\t\t\t\t\t\t+ \" must implement MethodRule or ClassRule\"));", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81d212402e7ffaeafb9eeab5a8e227d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "3209ce6e2d1b84ae2493a7906eecd76dfff1a8af", "commitAfterChange": "ccf0c0af551df541e40edb07d19a57072a8b14b1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-            if (sig.canPotentiallyAcceptType(dataPointMethod.getReturnType())) {", "-                Object value;", "-                ", "-                try {", "-                    value = dataPointMethod.invokeExplosively(null);", "-                } catch (Throwable e) {", "-                    // ignore and move on", "-                    continue;", "-                }", "-                    ", "-                if (sig.canAcceptValue(value)) {", "-                    list.add(PotentialAssignment.forValue(dataPointMethod.getName(), value));", "-                }", "+            if (sig.canAcceptType(dataPointMethod.getType())) {", "+                list.add(new MethodParameterValue(dataPointMethod));"]}]}
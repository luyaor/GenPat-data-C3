{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff009827228fa72cd925d88a590401e6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8687f33c95e39aa1928bc22710f915a7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/ExpectException.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public void evaluate() throws Exception", "signatureAfterChange": "      @Override     public void evaluate() throws Exception", "diff": ["-            fNext.evaluate();", "+            next.evaluate();", "-            if (!fExpected.isAssignableFrom(e.getClass())) {", "+            if (!expected.isAssignableFrom(e.getClass())) {", "-                        + fExpected.getName() + \"> but was<\"", "+                        + expected.getName() + \"> but was<\"", "-                    + fExpected.getName());", "+                    + expected.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8bad32134404632cc3512c26da433cb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParser.java", "commitBeforeChange": "b1cf4b5bc6ead8c3dfcbbb9ebe69be85f5e53cb8", "commitAfterChange": "56193048f411846a58c0e0377a5f1ccfecd3d2f9", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r     public List<Failure> getFailures()", "signatureAfterChange": "\r                 @Override\r                 public Runner getRunner()", "diff": ["-     */\r", "-    public List<Failure> getFailures() {\r", "-        return failures;\r", "+            return new Request() {\r", "+                @Override\r", "+                public Runner getRunner() {\r", "+                    return new ErrorReportingRunner(\r", "+                            JUnitCommandLineParser.class,\r", "+                            new InitializationError(parserErrors));\r", "+                }\r"]}]}
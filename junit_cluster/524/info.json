{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "882f59367eb9ec1a2ed81ed78d0ee5b5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "670b9db47e707d0abb89b46c396631b5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/NoGenericTypeParametersValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void validateNoTypeParameterOnWildcardType(WildcardType wildcard, \t\t\tList<Throwable> errors)", "signatureAfterChange": "      private void validateNoTypeParameterOnWildcardType(WildcardType wildcard,             List<Throwable> errors)", "diff": ["-\tprivate void validateNoTypeParameterOnWildcardType(WildcardType wildcard,", "-\t\t\tList<Throwable> errors) {", "-\t\tfor (Type each : wildcard.getUpperBounds())", "-\t\t    validateNoTypeParameterOnType(each, errors);", "-\t\tfor (Type each : wildcard.getLowerBounds())", "-\t\t    validateNoTypeParameterOnType(each, errors);", "-\t}", "+    private void validateNoTypeParameterOnWildcardType(WildcardType wildcard,", "+            List<Throwable> errors) {", "+        for (Type each : wildcard.getUpperBounds()) {", "+            validateNoTypeParameterOnType(each, errors);", "+        }", "+        for (Type each : wildcard.getLowerBounds()) {", "+            validateNoTypeParameterOnType(each, errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e79e4f77225158874d673bb6e2f5c2af", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tprivate Result runMain(JUnitSystem system, String... args)", "signatureAfterChange": "     private Result runMain(JUnitSystem system, String... args)", "diff": ["-\t */", "-\tprivate Result runMain(JUnitSystem system, String... args) {", "-\t\tsystem.out().println(\"JUnit version \" + Version.id());", "-\t\tList<Class<?>> classes= new ArrayList<Class<?>>();", "-\t\tList<Failure> missingClasses= new ArrayList<Failure>();", "-\t\tfor (String each : args)", "-\t\t\ttry {", "-\t\t\t\tclasses.add(Class.forName(each));", "-\t\t\t} catch (ClassNotFoundException e) {", "-\t\t\t\tsystem.out().println(\"Could not find class: \" + each);", "-\t\t\t\tDescription description= Description.createSuiteDescription(each);", "-\t\t\t\tFailure failure= new Failure(description, e);", "-\t\t\t\tmissingClasses.add(failure);", "-\t\t\t}", "-\t\tRunListener listener= new TextListener(system);", "-\t\taddListener(listener);", "-\t\tResult result= run(classes.toArray(new Class[0]));", "-\t\tfor (Failure each : missingClasses)", "-\t\t\tresult.getFailures().add(each);", "-\t\treturn result;", "-\t}", "+     */", "+    private Result runMain(JUnitSystem system, String... args) {", "+        system.out().println(\"JUnit version \" + Version.id());", "+        List<Class<?>> classes = new ArrayList<Class<?>>();", "+        List<Failure> missingClasses = new ArrayList<Failure>();", "+        for (String each : args) {", "+            try {", "+                classes.add(Class.forName(each));", "+            } catch (ClassNotFoundException e) {", "+                system.out().println(\"Could not find class: \" + each);", "+                Description description = Description.createSuiteDescription(each);", "+                Failure failure = new Failure(description, e);", "+                missingClasses.add(failure);", "+            }", "+        }", "+        RunListener listener = new TextListener(system);", "+        addListener(listener);", "+        Result result = run(classes.toArray(new Class[0]));", "+        for (Failure each : missingClasses) {", "+            result.getFailures().add(each);", "+        }", "+        return result;", "+    }"]}]}
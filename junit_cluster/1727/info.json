{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec28e8a41db5e53b10fb08ccbe7b80cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a643b7136db13415073e855a4bb12416", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParser.java", "commitBeforeChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "commitAfterChange": "9d9899bce3506e7d87ebc6352a3cf3d25ea20f54", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r     String[] parseOptions(String[] args)", "signatureAfterChange": "\r \r     String[] parseOptions(String[] args)", "diff": ["-                    return Arrays.copyOfRange(args, i + 1, args.length);\r", "+                    return copyArray(args, i + 1, args.length);\r", "-                            filterSpec = args[i];\r", "+\r", "+                            if (i < args.length) {\r", "+                                filterSpec = args[i];\r", "+                            } else {\r", "+                                Description description = createSuiteDescription(arg);\r", "+                                Failure failure = new Failure(\r", "+                                        description,\r", "+                                        new CommandLineParserError(arg + \" value not specified\"));\r", "+                                failures.add(failure);\r", "+\r", "+                                break;\r", "+                            }\r", "-                    return Arrays.copyOfRange(args, i, args.length);\r", "+                    return copyArray(args, i, args.length);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abf87de67af91dad461d05c3f3522458", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "34e66740b9117ce85cfd416f9e931b2e533ab16e", "commitAfterChange": "85b7c26e63f851004ce20d4a00fbf1b46607ab0c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Override     public void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-        StatementThread thread = evaluateStatement();", "-        if (!thread.fFinished) {", "-            throwExceptionForUnfinishedThread(thread);", "-        }", "-    }", "+        FutureTask<Throwable> task = new FutureTask<Throwable>(new CallableStatement());", "+        Thread thread = new Thread(task, \"Time-limited test\");", "+        Throwable throwable = getResult(task, thread);", "+        if (throwable != null) {", "+        \tthrow throwable;"]}]}
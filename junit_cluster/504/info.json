{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c96f311b6c2f4f5ea676b22ae08b5b5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3b7bb04cb4130bb5d0099270d686791", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/runner/JUnitCommandLineParseResultTest.java", "commitBeforeChange": "4eecfb1eff9aa5304f6b30874a26734124ac902d", "commitAfterChange": "a75370887a71a09b3e5a12dec252513e80228e6b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r     @Test\r     public void shouldParseFilterArgWithEqualsSyntax() throws Exception", "signatureAfterChange": "\r \r     @Test\r     public void shouldParseFilterArgWithEqualsSyntax() throws Exception", "diff": ["-        jUnitCommandLineParseResult.parseOptions(new String[]{\r", "-                \"--filter=\" + IncludeCategories.class.getName() + \"=\" + DummyCategory0.class.getName()\r", "-        });\r", "+        String value= IncludeCategories.class.getName() + \"=\" + DummyCategory0.class.getName();\r", "+        jUnitCommandLineParseResult.parseOptions(\"--filter=\" + value);\r", "-        Filter filter = jUnitCommandLineParseResult.getFilter();\r", "+        List<String> specs= jUnitCommandLineParseResult.getFilterSpecs();\r", "-        assertThat(filter.describe(), startsWith(\"includes \"));\r", "+        assertThat(specs, hasItems(value));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7de38cf4e6737833ac48fa2de4a6141", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/runner/JUnitCommandLineParseResultTest.java", "commitBeforeChange": "4eecfb1eff9aa5304f6b30874a26734124ac902d", "commitAfterChange": "a75370887a71a09b3e5a12dec252513e80228e6b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r     @Test\r     public void shouldParseFilterArgInWhichValueIsASeparateArg() throws Exception", "signatureAfterChange": "\r \r     @Test\r     public void shouldParseFilterArgInWhichValueIsASeparateArg() throws Exception", "diff": ["-        jUnitCommandLineParseResult.parseOptions(new String[]{\r", "-                \"--filter\",\r", "-                IncludeCategories.class.getName() + \"=\" + DummyCategory0.class.getName()\r", "-        });\r", "+        String value= IncludeCategories.class.getName() + \"=\" + DummyCategory0.class.getName();\r", "+        jUnitCommandLineParseResult.parseOptions(\"--filter\", value);\r", "-        Filter filter = jUnitCommandLineParseResult.getFilter();\r", "+        List<String> specs= jUnitCommandLineParseResult.getFilterSpecs();\r", "-        assertThat(filter.describe(), startsWith(\"includes \"));\r", "+        assertThat(specs, hasItems(value));\r"]}]}
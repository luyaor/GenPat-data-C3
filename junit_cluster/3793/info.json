{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c87f66bcc7f4882e6f116ba7a9ea0a41", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c43e0eafd78b8fc9db4f95daf8c3815", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "f98130957df08de9cae93169298e04bf84388cae", "commitAfterChange": "43b0fe352d5bced0c341640d0c630d23f2022a7e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprotected void invoke(Roadie context) throws Throwable", "signatureAfterChange": "  \tvoid assertNoExceptionExpected(final Roadie context)", "diff": ["-\tprotected void invoke(Roadie context) throws Throwable {", "-\t\tinvoke(context.getTarget());", "-\t}", "+\tvoid assertNoExceptionExpected(final Roadie context) {", "+\t\tif (expectsException())", "+\t\t\tcontext.addFailure(new AssertionError(\"Expected exception: \"", "+\t\t\t\t\t+ getExpectedException().getName()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "985c0dcd0d7f189c1d01ab78da46749c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/validator/AnnotationValidatorFactory.java", "commitBeforeChange": "1273a35689bdcb3304f6634cdc3889c61f9b1b1f", "commitAfterChange": "d3ee5d06c0b797ce812cbfe35addc6146d5f07cb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAnnotation)", "signatureAfterChange": "     public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAnnotation)", "diff": ["-        if (validateWithAnnotation == null) {", "-            return new AnnotationValidator() {", "-            };", "-        }", "-", "+        if (clazz == null) {", "+            throw new IllegalArgumentException(\"Can't create validator, value is null in annotation \" + validateWithAnnotation.getClass().getName());", "+        }", "-            return annotationValidator;", "+            return fAnnotationTypeToValidatorMap.get(validateWithAnnotation);", "-            throw new RuntimeException(\"Error when creating AnnotationValidator class \" + clazz.getName(), e);", "+            throw new RuntimeException(\"Exception received when creating AnnotationValidator class \" + clazz.getName(), e);"]}]}
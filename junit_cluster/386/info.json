{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c6f847066034e525a9574d7af8582de", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aaed6e77e34eca0ebe893bbc3f10989", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/tests/runner/TextFeedbackTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate String expected(String[] lines)", "signatureAfterChange": "      private String expected(String[] lines)", "diff": ["-\t", "-\tprivate String expected(String[] lines) {", "-\t\tOutputStream expected= new ByteArrayOutputStream();", "-\t\tPrintStream expectedWriter= new PrintStream(expected);", "-\t\tfor (int i= 0; i < lines.length; i++)", "-\t\t\texpectedWriter.println(lines[i]);", "-\t\treturn expected.toString(); ", "-\t}", "+", "+    private String expected(String[] lines) {", "+        OutputStream expected = new ByteArrayOutputStream();", "+        PrintStream expectedWriter = new PrintStream(expected);", "+        for (int i = 0; i < lines.length; i++) {", "+            expectedWriter.println(lines[i]);", "+        }", "+        return expected.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f84234d61e87e313079953216cc597c2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/ForwardCompatibilityPrintingTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate String expected(String[] lines)", "signatureAfterChange": "      private String expected(String[] lines)", "diff": ["-\tprivate String expected(String[] lines) {", "-\t\tOutputStream expected= new ByteArrayOutputStream();", "-\t\tPrintStream expectedWriter= new PrintStream(expected);", "-\t\tfor (int i= 0; i < lines.length; i++)", "-\t\t\texpectedWriter.println(lines[i]);", "-\t\treturn expected.toString();", "-\t}", "+", "+    private String expected(String[] lines) {", "+        OutputStream expected = new ByteArrayOutputStream();", "+        PrintStream expectedWriter = new PrintStream(expected);", "+        for (int i = 0; i < lines.length; i++) {", "+            expectedWriter.println(lines[i]);", "+        }", "+        return expected.toString();", "+    }"]}]}
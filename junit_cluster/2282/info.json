{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6367200d46d9a30132a3fefc9dc98527", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b598a640649045e2ba329a27174ba7bd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/AnnotatedBuilder.java", "commitBeforeChange": "f4d4a0a9f11656625aabbb2a4b3b1164a8722f1c", "commitAfterChange": "3cd86b7018f2c57f10d671d007d08caa74463c09", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      public Runner buildRunner(Class<? extends Runner> runnerClass,             Class<?> testClass) throws Exception", "signatureAfterChange": "      public Runner buildRunner(Class<? extends Runner> runnerClass,             Class<?> testClass) throws Exception", "diff": ["-            return runnerClass.getConstructor(Class.class).newInstance(", "-                    new Object[]{testClass});", "+            return runnerClass.getConstructor(Class.class).newInstance(testClass);", "-                        RunnerBuilder.class).newInstance(", "-                        new Object[]{testClass, fSuiteBuilder});", "+                        RunnerBuilder.class).newInstance(testClass, fSuiteBuilder);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc3c04c8bdd6a40a9ad6f6d70040789b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "5c2070d7cf981e2e103aef6fd0ef64c473331325", "commitAfterChange": "50e3d1bc87b4b16f0617b6212252363f499397ab", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          @Override         public Object getValue() throws CouldNotGenerateValueException", "signatureAfterChange": "          @Override         public Object getValue() throws CouldNotGenerateValueException", "diff": ["+                DataPoint annotation = fMethod.getAnnotation(DataPoint.class); ", "+                if (annotation != null) {", "+                    for (Class<? extends Throwable> ignorable : annotation.ignoredExceptions()) {", "+                        Assume.assumeThat(e, not(instanceOf(ignorable)));", "+                    }", "+                }", "+                ", "-                // do nothing, just look for more values"]}]}
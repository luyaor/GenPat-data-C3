{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30f56b439fb74b63e698f597b9b59eee", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a281c0159119de19915dcd283d9d5e2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethod.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tvoid runWithDiscoveredParameterValues(final Roadie context, \t\t\tPotentialMethodValues valueSources, List<ParameterSignature> sigs) throws Throwable", "signatureAfterChange": "  \tprotected void reportParameterizedError(Throwable e, Object... params) \t\t\tthrows Throwable", "diff": ["-\tvoid runWithDiscoveredParameterValues(final Roadie context,", "-\t\t\tPotentialMethodValues valueSources, List<ParameterSignature> sigs) throws Throwable {", "-\t\tif (sigs.size() == 0) {", "-\t\t\ttry {", "-\t\t\t\tfinal Object[] values= valueSources.getValues(nullsOk());", "-\t\t\t\tcontext.runProtected(this, new Runnable() {", "-\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tinvokeWithActualParameters(context.getTarget(), values);", "-\t\t\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\t\t\tthrown = e;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t});", "-\t\t\t\tif (thrown != null)", "-\t\t\t\t\tthrow thrown;", "-\t\t\t} catch (CouldNotGenerateValueException e) {", "-\t\t\t}", "-\t\t} else {", "-\t\t\tfor (PotentialParameterValue source : sigs.get(0)", "-\t\t\t\t\t.getPotentialValues(context.getTarget())) {", "-\t\t\t\trunWithDiscoveredParameterValues(context, valueSources", "-\t\t\t\t\t\t.concat(source), sigs.subList(1, sigs.size()));", "-\t\t\t}", "+", "+\tprotected void reportParameterizedError(Throwable e, Object... params)", "+\t\t\tthrows Throwable {", "+\t\tif (params.length == 0)", "+\t\t\tthrow e;", "+\t\tthrow new ParameterizedAssertionError(e, getMethod().getName(), params);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40c3c87df8092e763067e2d5093128a2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethod.java", "commitBeforeChange": "85c570ea92f0ee7d17573966dd7f94f4c3b0b61a", "commitAfterChange": "79d696c81cb996e6a199b062c0ae1f53408d5ebd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tint runWithDiscoveredParameterValues(Object target, \t\t\tPotentialMethodValues valueSources, List<ParameterSignature> sigs) \t\t\tthrows Throwable", "signatureAfterChange": "  \tvoid runWithDiscoveredParameterValues(final Roadie context, \t\t\tPotentialMethodValues valueSources, List<ParameterSignature> sigs) throws Throwable", "diff": ["-\tint runWithDiscoveredParameterValues(Object target,", "-\t\t\tPotentialMethodValues valueSources, List<ParameterSignature> sigs)", "-\t\t\tthrows Throwable {", "+\tvoid runWithDiscoveredParameterValues(final Roadie context,", "+\t\t\tPotentialMethodValues valueSources, List<ParameterSignature> sigs) throws Throwable {", "-\t\t\t\treturn invokeWithActualParameters(target, valueSources", "-\t\t\t\t\t\t.getValues(nullsOk()));", "+\t\t\t\tfinal Object[] values= valueSources.getValues(nullsOk());", "+\t\t\t\tcontext.runProtected(this, new Runnable() {", "+\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tinvokeWithActualParameters(context.getTarget(), values);", "+\t\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\t\tthrown = e;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\tif (thrown != null)", "+\t\t\t\t\tthrow thrown;", "-\t\t\t\treturn 0;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfor (PotentialParameterValue source : sigs.get(0)", "+\t\t\t\t\t.getPotentialValues(context.getTarget())) {", "+\t\t\t\trunWithDiscoveredParameterValues(context, valueSources", "+\t\t\t\t\t\t.concat(source), sigs.subList(1, sigs.size()));", "-", "-\t\tint count= 0;", "-", "-\t\tfor (PotentialParameterValue source : sigs.get(0).getPotentialValues(", "-\t\t\t\ttarget)) {", "-\t\t\tcount+= runWithDiscoveredParameterValues(target, valueSources", "-\t\t\t\t\t.concat(source), sigs.subList(1, sigs.size()));", "-\t\t}", "-", "-\t\treturn count;"]}]}
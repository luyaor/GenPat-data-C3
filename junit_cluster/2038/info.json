{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1f3efe1dac8bc86b8dc856bf5d26622", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89808156ce3034c511cc93b68278e88c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "dc44abf520611a8722e75ba1d32df6a28183e4e3", "commitAfterChange": "bb91daf8e0939d787ffb5a3eda05c2d626cd9851", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tprivate Class<? extends Throwable> getExpectedException(Test annotation)", "signatureAfterChange": "      private Class<? extends Throwable> getExpectedException(Test annotation)", "diff": ["-\t", "-\tprivate Class<? extends Throwable> getExpectedException(Test annotation) {", "-\t\tif (annotation == null || annotation.expected() == None.class)", "-\t\t\treturn null;", "-\t\telse", "-\t\t\treturn annotation.expected();", "-\t}", "+", "+    private Class<? extends Throwable> getExpectedException(Test annotation) {", "+        if (annotation == null || annotation.expected() == None.class) {", "+            return null;", "+        } else {", "+            return annotation.expected();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e6b359fd31af90e6357bc086d6521a3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tprivate Class<? extends Throwable> getExpectedException(Test annotation)", "signatureAfterChange": "      private Class<? extends Throwable> getExpectedException(Test annotation)", "diff": ["-\t", "-\tprivate Class<? extends Throwable> getExpectedException(Test annotation) {", "-\t\tif (annotation == null || annotation.expected() == None.class)", "-\t\t\treturn null;", "-\t\telse", "-\t\t\treturn annotation.expected();", "-\t}", "+", "+    private Class<? extends Throwable> getExpectedException(Test annotation) {", "+        if (annotation == null || annotation.expected() == None.class) {", "+            return null;", "+        } else {", "+            return annotation.expected();", "+        }", "+    }"]}]}
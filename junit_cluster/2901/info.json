{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "211b86e8228046fb92ccc9e3375c35f6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131afdbed2e431b26b0cd6a0f4bc2ee9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Result.java", "commitBeforeChange": "e727dd6b1cb2caa1699da3b2df7625c9554adc36", "commitAfterChange": "95bd62b2ffd80394d1a17e9078a4d79478423030", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t\t \t\t@Override \t\tpublic void testIgnoredReason(Description description, \t\t\t\tAssumptionViolatedException e)", "signatureAfterChange": " \t\t \t\t@Override \t\tpublic void testAssumptionFailed(Description description, \t\t\t\tAssumptionViolatedException e)", "diff": ["-\t\tpublic void testIgnoredReason(Description description,", "+\t\tpublic void testAssumptionFailed(Description description,", "-\t\t\tfIgnorances.add(new Ignorance(description, e));", "+\t\t\t// TODO: (Dec 12, 2007 2:39:00 PM) text should be unrunnable, not IGNORED TEST", "+", "+\t\t\tfUnrunnables.add(new FailedAssumption(description, e));", "+\t\t\tfAssumptionFailed = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1f3053aca5dd4071b5c5daeb1e883a1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Result.java", "commitBeforeChange": "c732aa178a822671d3de88e5ece05f9bf464172b", "commitAfterChange": "af9634a3656bcd9c3988692c32381d0772077584", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t\t \t\t@Override \t\tpublic void testAssumptionInvalid(Description description, \t\t\t\tAssumptionViolatedException e)", "signatureAfterChange": " \t\t \t\t@Override \t\tpublic void testAssumptionInvalid(Description description, \t\t\t\tAssumptionViolatedException e)", "diff": ["-\t\t\t// TODO: (Dec 12, 2007 2:39:00 PM) text should be unrunnable, not IGNORED TEST", "-", "-\t\t\tfUnrunnables.add(new FailedAssumption(description, e));", "+\t\t\tfInvalidAssumptions.add(new InvalidAssumption(description, e));"]}]}
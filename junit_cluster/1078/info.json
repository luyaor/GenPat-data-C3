{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5be15045190596843c032213bd1bbc5c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "211923a54eb8959978195ef45788a279", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "950702c6adbbcbbee0ce2061d674bf05e0c997b1", "commitAfterChange": "a5d194fcb57b1b320ae808bc5a8d153f98f18a84", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": "          private String computeCommonSuffix()", "signatureAfterChange": "          private String sharedSuffix(String prefix)", "diff": ["+", "+        private String sharedSuffix(String prefix) {", "+            int suffixLength = 0;", "+            int maxSuffixLength = Math.min(expected.length() - prefix.length(),", "+                    actual.length() - prefix.length()) - 1;", "+            for (; suffixLength <= maxSuffixLength; suffixLength++) {", "+                if (expected.charAt(expected.length() - 1 - suffixLength)", "+                        != actual.charAt(actual.length() - 1 - suffixLength)) {", "+            return expected.substring(expected.length() - suffixLength);", "-        private String computeCommonSuffix() {", "-            int end = Math.min(expected.length() - suffix + contextLength, expected.length());", "-            return expected.substring(expected.length() - suffix, end) + (expected.length() - suffix < expected.length() - contextLength ? ELLIPSIS : \"\");", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "577569071ec12e20a727be82a5db2e95", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "41cbbf7e228b8f7908e672a79863ff970316b120", "commitAfterChange": "421ab330509a53302f56b209595f55b23bfdfc0e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["+", "-\t\tif (fTest instanceof Filterable) {", "-\t\t\tFilterable adapter= (Filterable) fTest;", "+\t\tif (getTest() instanceof Filterable) {", "+\t\t\tFilterable adapter= (Filterable) getTest();", "-\t\t} else if (fTest instanceof TestSuite) {", "-\t\t\tTestSuite suite= (TestSuite) fTest;", "-\t\t\tTestSuite filtered= new FilteredTestSuite(suite, filter);", "-\t\t\tfTest= filtered;", "+\t\t} else if (getTest() instanceof TestSuite) {", "+\t\t\tTestSuite suite= (TestSuite) getTest();", "+\t\t\tTestSuite filtered= new TestSuite(suite.getName());", "+\t\t\tint n= suite.testCount();", "+\t\t\tfor (int i= 0; i < n; i++) {", "+\t\t\t\tTest test= suite.testAt(i);", "+\t\t\t\tif (filter.shouldRun(makeDescription(test)))", "+\t\t\t\t\tfiltered.addTest(test);", "+\t\t\t}", "+\t\t\tsetTest(filtered);"]}]}
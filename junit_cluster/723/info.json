{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0bee8f82cb9313ba8eacf846a78a564", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "656bc003b8bb192f9483fd3def8b8682", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \t@Override \tpublic boolean isShadowedBy(FrameworkMethod other)", "signatureAfterChange": "      @Override     public boolean isShadowedBy(FrameworkMethod other)", "diff": ["-\t@Override", "-\tpublic boolean isShadowedBy(FrameworkMethod other) {", "-\t\tif (!other.getName().equals(getName()))", "-\t\t\treturn false;", "-\t\tif (other.getParameterTypes().length != getParameterTypes().length)", "-\t\t\treturn false;", "-\t\tfor (int i= 0; i < other.getParameterTypes().length; i++)", "-\t\t\tif (!other.getParameterTypes()[i].equals(getParameterTypes()[i]))", "-\t\t\t\treturn false;", "-\t\treturn true;", "-\t}", "+    @Override", "+    public boolean isShadowedBy(FrameworkMethod other) {", "+        if (!other.getName().equals(getName())) {", "+            return false;", "+        }", "+        if (other.getParameterTypes().length != getParameterTypes().length) {", "+            return false;", "+        }", "+        for (int i = 0; i < other.getParameterTypes().length; i++) {", "+            if (!other.getParameterTypes()[i].equals(getParameterTypes()[i])) {", "+                return false;", "+            }", "+        }", "+        return true;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f91723433f06dfad94a5ee62967c701", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void validateTestMethods(Class<? extends Annotation> annotation, \t\t\tboolean isStatic)", "signatureAfterChange": "      private void validateTestMethods(Class<? extends Annotation> annotation,             boolean isStatic)", "diff": ["-\tprivate void validateTestMethods(Class<? extends Annotation> annotation,", "-\t\t\tboolean isStatic) {", "-\t\tList<Method> methods= fTestClass.getAnnotatedMethods(annotation);", "-\t\t", "-\t\tfor (Method each : methods) {", "-\t\t\tif (Modifier.isStatic(each.getModifiers()) != isStatic) {", "-\t\t\t\tString state= isStatic ? \"should\" : \"should not\";", "-\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName() + \"() \"", "-\t\t\t\t\t\t+ state + \" be static\"));", "-\t\t\t}", "-\t\t\tif (!Modifier.isPublic(each.getDeclaringClass().getModifiers()))", "-\t\t\t\tfErrors.add(new Exception(\"Class \" + each.getDeclaringClass().getName()", "-\t\t\t\t\t\t+ \" should be public\"));", "-\t\t\tif (!Modifier.isPublic(each.getModifiers()))", "-\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName()", "-\t\t\t\t\t\t+ \" should be public\"));", "-\t\t\tif (each.getReturnType() != Void.TYPE)", "-\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName()", "-\t\t\t\t\t\t+ \" should be void\"));", "-\t\t\tif (each.getParameterTypes().length != 0)", "-\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName()", "-\t\t\t\t\t\t+ \" should have no parameters\"));", "-\t\t}", "-\t}", "+", "+    private void validateTestMethods(Class<? extends Annotation> annotation,", "+            boolean isStatic) {", "+        List<Method> methods = fTestClass.getAnnotatedMethods(annotation);", "+", "+        for (Method each : methods) {", "+            if (Modifier.isStatic(each.getModifiers()) != isStatic) {", "+                String state = isStatic ? \"should\" : \"should not\";", "+                fErrors.add(new Exception(\"Method \" + each.getName() + \"() \"", "+                        + state + \" be static\"));", "+            }", "+            if (!Modifier.isPublic(each.getDeclaringClass().getModifiers())) {", "+                fErrors.add(new Exception(\"Class \" + each.getDeclaringClass().getName()", "+                        + \" should be public\"));", "+            }", "+            if (!Modifier.isPublic(each.getModifiers())) {", "+                fErrors.add(new Exception(\"Method \" + each.getName()", "+                        + \" should be public\"));", "+            }", "+            if (each.getReturnType() != Void.TYPE) {", "+                fErrors.add(new Exception(\"Method \" + each.getName()", "+                        + \" should be void\"));", "+            }", "+            if (each.getParameterTypes().length != 0) {", "+                fErrors.add(new Exception(\"Method \" + each.getName()", "+                        + \" should have no parameters\"));", "+            }", "+        }", "+    }"]}]}
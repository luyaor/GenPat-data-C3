{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1f1dc8ad51a2b129555e7559532da6d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0527b577ad1aaf5cf518d7983175183c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic ParameterSupplier getSupplier(Class<?> targetClass) \t\t\tthrows InstantiationException, IllegalAccessException", "signatureAfterChange": "  \tpublic <T extends Annotation> T findDeepAnnotation( \t\t\tClass<T> annotationType)", "diff": ["-", "-\tpublic ParameterSupplier getSupplier(Class<?> targetClass)", "-\t\t\tthrows InstantiationException, IllegalAccessException {", "-\t\tParameterSupplier supplier= getAnnotatedSupplier();", "-\t\tif (supplier != null)", "-\t\t\treturn supplier;", "-\t", "-\t\treturn ParameterSignature.fieldParameterSupplier(targetClass);", "-\t}", "+", "+\tpublic <T extends Annotation> T findDeepAnnotation(", "+\t\t\tClass<T> annotationType) {", "+\t\tAnnotation[] annotations2= annotations;", "+\t\treturn findDeepAnnotation(annotations2, annotationType);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "335e4311f73d9e5d0abd69c56eaf1e0a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/model/TestMethod.java", "commitBeforeChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "commitAfterChange": "44e7458b19d5cd1900a765a440c96e85b81d25fc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tboolean isUnexpected(Throwable exception)", "signatureAfterChange": "  \tboolean isShadowedBy(List<TestMethod> results)", "diff": ["-", "-\tboolean isUnexpected(Throwable exception) {", "-\t\treturn !getExpectedException().isAssignableFrom(exception.getClass());", "+", "+\tboolean isShadowedBy(List<TestMethod> results) {", "+\t\tfor (TestMethod each : results) {", "+\t\t\tif (isShadowedBy(each))", "+\t\t\t\treturn true;", "+\t\t}", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5265741c60be9513c73ab9e0af5fa83d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "57302f0df76fba83ba72a676bd660efeb5881af6", "commitAfterChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprotected void validate() throws InitializationError", "signatureAfterChange": "  \tprivate void validate() throws InitializationError", "diff": ["-\t", "-\tprotected void validate() throws InitializationError {", "-\t\tMethodValidator methodValidator= new MethodValidator(fTestClass);", "-\t\tmethodValidator.validateMethodsForDefaultRunner();", "-\t\tmethodValidator.assertValid();", "+", "+\tprivate void validate() throws InitializationError {", "+\t\tList<Throwable> errors= new ArrayList<Throwable>();", "+\t\tcollectInitializationErrors(errors);", "+\t\tif (!errors.isEmpty())", "+\t\t\tthrow new InitializationError(errors);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fdf63c0bcae6eb91865cf564bdf9da8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "d0c70cac5b28861803d97d59ab93dfcb10d2c4d3", "commitAfterChange": "7d8f2b7f6e190e8e59efacc10bc617b6646d131b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t\tprivate boolean hasCorrectCategoryAnnotation(Description description)", "signatureAfterChange": "  \t\tprivate boolean hasCorrectCategoryAnnotation(Description description)", "diff": ["-\t\t\tCategory annotation= description.getAnnotation(Category.class);", "-\t\t\tif (annotation == null)", "+\t\t\tList<Class<?>> categories= categories(description);", "+\t\t\tif (categories.isEmpty())", "-\t\t\tfor (Class<?> each : annotation.value()) {", "+\t\t\tfor (Class<?> each : categories)", "+\t\t\tfor (Class<?> each : categories)", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e919b6ca104dd5f21ecab0a9a6a8eea", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "161229441b7365fa06f0d82e272e15f1f378b315", "commitAfterChange": "30a039854fd7f8cda135222054b247c158b91fa7", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tpublic boolean isIgnored()", "signatureAfterChange": " \tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType)", "diff": ["-\tpublic boolean isIgnored() {", "-\t\treturn fMethod.getAnnotation(Ignore.class) != null;", "-\t}", "+\t */", "+\tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "+\t\treturn fMethod.getAnnotation(annotationType);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1f56061da300c0f43f81ec27f33fd3f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "3b8708636ffc1a9fc970b66db73c09095dabc2e2", "commitAfterChange": "6b943e564adcc9a7106e54c24eb5d022bed1462f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private Matcher<Throwable> causeEquals(final Throwable expectedCause)", "signatureAfterChange": "      private Matcher<Throwable> hasCause(final Matcher<? extends Throwable> causeMatcher)", "diff": ["-    private Matcher<Throwable> causeEquals(final Throwable expectedCause) {", "+    private Matcher<Throwable> hasCause(final Matcher<? extends Throwable> causeMatcher) {", "-            @Override", "-            public boolean matchesSafely(Throwable item) {", "-                return expectedCause == null ? item.getCause() == null : expectedCause.equals(item.getCause());", "-            }", "-", "-                description.appendText(expectedCause.toString());", "+                description.appendDescriptionOf(causeMatcher);", "+            }", "+", "+            @Override", "+            public boolean matchesSafely(Throwable item) {", "+                return causeMatcher.matches(item.getCause());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b98ca5d6b159e7b170db8e7d72eb3bd3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic Annotation getSupplierAnnotation()", "signatureAfterChange": "  \tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType)", "diff": ["-\tpublic Annotation getSupplierAnnotation() {", "-\t\tfor (Annotation annotation : annotations) {", "-\t\t\tif (getSupplier(annotation) != null)", "-\t\t\t\treturn annotation;", "-\t\t}", "-", "-\t\treturn null;", "-\t}", "+", "+\tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "+\t\tfor (Annotation each : getAnnotations())", "+\t\t\tif (annotationType.isInstance(each))", "+\t\t\t\treturn annotationType.cast(each);", "+\t\treturn null;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c99a8bbdb37c46d78f6e97af96b174be", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/Stopwatch.java", "commitBeforeChange": "e1315c75a81d8131dd88dadbf5184892f0d9ce63", "commitAfterChange": "7ae75535efbb7a95ac62cfa1d0ccb626cc23e8c7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 10, "signatureBeforeChange": "     public static long toSeconds(long nanos)", "signatureAfterChange": "      public final Statement apply(Statement base, Description description)", "diff": ["-     */", "-    public static long toSeconds(long nanos) {", "-        return TimeUnit.NANOSECONDS.toSeconds(nanos);", "-    }", "+    public final Statement apply(Statement base, Description description) {", "+        return new InternalWatcher().apply(base, description);"]}]}
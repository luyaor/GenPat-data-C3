{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cc6d0ace6c3c249fb84886cee4fbe87", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "310a6f4696876539a6b705b1e3125170", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/Guesser.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\tprotected Object generateGuess(Class<?> returnType)", "signatureAfterChange": "          protected Object generateGuess(Class<?> returnType)", "diff": ["-\t\tprotected Object generateGuess(Class<?> returnType) {", "-\t\t\tif (returnType.equals(String.class))", "-\t\t\t\treturn \"GUESS\" + new Random().nextInt();", "-\t\t\tif (returnType.equals(Integer.class)", "-\t\t\t\t\t|| returnType.equals(int.class))", "-\t\t\t\treturn new Random().nextInt();", "-\t\t\treturn null;", "-\t\t}", "+        protected Object generateGuess(Class<?> returnType) {", "+            if (returnType.equals(String.class)) {", "+                return \"GUESS\" + new Random().nextInt();", "+            }", "+            if (returnType.equals(Integer.class)", "+                    || returnType.equals(int.class)) {", "+                return new Random().nextInt();", "+            }", "+            return null;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ae609c718064901dbf783df2523167e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 16, "signatureBeforeChange": "          private Class<?>[] directCategories(Description description)", "signatureAfterChange": "          private static Class<?>[] directCategories(Description description)", "diff": ["-        private Class<?>[] directCategories(Description description) {", "+        private static Class<?>[] directCategories(Description description) {", "-            Category annotation = description.getAnnotation(Category.class);", "-            if (annotation == null) {", "-                return new Class<?>[0];", "+", "+            Category annotation= description.getAnnotation(Category.class);", "+            return annotation == null ? new Class<?>[0] : annotation.value();", "+        }", "-            return annotation.value();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e9a9a80dedb2953bf8092a53d324685", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tprivate Class<?>[] directCategories(Description description)", "signatureAfterChange": "          private Class<?>[] directCategories(Description description)", "diff": ["-\t\tprivate Class<?>[] directCategories(Description description) {", "-\t\t\tif (description == null)", "-\t\t\t\treturn new Class<?>[0];", "-\t\t\tCategory annotation= description.getAnnotation(Category.class);", "-\t\t\tif (annotation == null)", "-\t\t\t\treturn new Class<?>[0];", "-\t\t\treturn annotation.value();", "-\t\t}", "+        private Class<?>[] directCategories(Description description) {", "+            if (description == null) {", "+                return new Class<?>[0];", "+            }", "+            Category annotation = description.getAnnotation(Category.class);", "+            if (annotation == null) {", "+                return new Class<?>[0];", "+            }", "+            return annotation.value();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82ce478d11179445862e952a50c905f0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/Guesser.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t\tGuessMap replaceGuess(Object oldValue, Object newValue)", "signatureAfterChange": "          GuessMap replaceGuess(Object oldValue, Object newValue)", "diff": ["-\t\tGuessMap replaceGuess(Object oldValue, Object newValue) {", "-\t\t\tGuessMap newGuesses= new GuessMap(this);", "-\t\t\tfor (Entry<MethodCall, Object> entry : newGuesses.entrySet()) {", "-\t\t\t\tif (entry.getValue().equals(oldValue))", "-\t\t\t\t\tentry.setValue(newValue);", "-\t\t\t}", "-\t\t\treturn newGuesses;", "-\t\t}", "+        GuessMap replaceGuess(Object oldValue, Object newValue) {", "+            GuessMap newGuesses = new GuessMap(this);", "+            for (Entry<MethodCall, Object> entry : newGuesses.entrySet()) {", "+                if (entry.getValue().equals(oldValue)) {", "+                    entry.setValue(newValue);", "+                }", "+            }", "+            return newGuesses;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c92271ae44afb4f37d3a604e8ae367", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\t@Override \t\tpublic boolean shouldRun(Description description)", "signatureAfterChange": "          @Override         public boolean shouldRun(Description description)", "diff": ["-\t\t@Override", "-\t\tpublic boolean shouldRun(Description description) {", "-\t\t\tif (hasCorrectCategoryAnnotation(description))", "-\t\t\t\treturn true;", "-\t\t\tfor (Description each : description.getChildren())", "-\t\t\t\tif (shouldRun(each))", "-\t\t\t\t\treturn true;", "-\t\t\treturn false;", "-\t\t}", "+        @Override", "+        public boolean shouldRun(Description description) {", "+            if (hasCorrectCategoryAnnotation(description)) {", "+                return true;", "+            }", "+            for (Description each : description.getChildren()) {", "+                if (shouldRun(each)) {", "+                    return true;", "+                }", "+            }", "+            return false;", "+        }"]}]}
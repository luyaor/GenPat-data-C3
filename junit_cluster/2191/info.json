{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72bcaa057cc71acb05b1802ddead4016", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119ed8cec3051f9f204f71622e3d1eef", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "c228881359e2a4ccd0d5972c646f043ec42d62e0", "commitAfterChange": "0deeda931d45a23413e1c84a1966469deadfdb83", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void validateDataPointFields(List<Throwable> errors)", "signatureAfterChange": " \t \tprivate void validateDataPointFields(List<Throwable> errors)", "diff": ["-\t\tfor (Field each : fields)", "-\t\t\tif (each.getAnnotation(DataPoint.class) != null && !Modifier.isStatic(each.getModifiers()))", "-\t\t\t\terrors.add(new Error(\"DataPoint field \" + each.getName() + \" must be static\"));", "+\t\tfor (Field field : fields)", "+\t\t{", "+\t\t\tif (field.getAnnotation(DataPoint.class) == null)", "+\t\t\t\tcontinue;", "+\t\t\tif (!Modifier.isStatic(field.getModifiers()))", "+\t\t\t\terrors.add(new Error(\"DataPoint field \" + field.getName() + \" must be static\"));", "+\t\t\tif (!Modifier.isPublic(field.getModifiers()))", "+\t\t\t\terrors.add(new Error(\"DataPoint field \" + field.getName() + \" must be public\"));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff7ee44a468aa76efd26292ff2553781", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "36beacd221a4837af2a6d684b3a4fb79775a5231", "commitAfterChange": "b9ce87013e5389857956d785d14fc4f3fc2490c3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t\t\t\t@Override \t\t\t\tprotected void collectInitializationErrors( \t\t\t\t\t\tList<Throwable> errors)", "signatureAfterChange": "  \t@Override \tprotected void collectInitializationErrors(List<Throwable> errors)", "diff": ["+\t\tField[] fields= getTestClass().getJavaClass().getDeclaredFields();", "+\t\t", "+\t\t// TODO: (Nov 26, 2007 9:37:26 PM) cheating", "+\t\tfor (Field each : fields)", "+\t\t\tif (each.getAnnotation(DataPoint.class) != null && !Modifier.isStatic(each.getModifiers()))", "+\t\t\t\terrors.add(new Error(\"DataPoint field THREE must be static\"));", "-\t\t\t\t\t// TODO: (Oct 12, 2007 12:08:03 PM) DUP"]}]}
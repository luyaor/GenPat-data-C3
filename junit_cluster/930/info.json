{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e0a0e945c19c2bc236ebc5e04668f60", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0527b577ad1aaf5cf518d7983175183c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tpublic ParameterSupplier getSupplier(Class<?> targetClass) \t\t\tthrows InstantiationException, IllegalAccessException", "signatureAfterChange": "  \tpublic <T extends Annotation> T findDeepAnnotation( \t\t\tClass<T> annotationType)", "diff": ["-", "-\tpublic ParameterSupplier getSupplier(Class<?> targetClass)", "-\t\t\tthrows InstantiationException, IllegalAccessException {", "-\t\tParameterSupplier supplier= getAnnotatedSupplier();", "-\t\tif (supplier != null)", "-\t\t\treturn supplier;", "-\t", "-\t\treturn ParameterSignature.fieldParameterSupplier(targetClass);", "-\t}", "+", "+\tpublic <T extends Annotation> T findDeepAnnotation(", "+\t\t\tClass<T> annotationType) {", "+\t\tAnnotation[] annotations2= annotations;", "+\t\treturn findDeepAnnotation(annotations2, annotationType);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b98ca5d6b159e7b170db8e7d72eb3bd3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tpublic Annotation getSupplierAnnotation()", "signatureAfterChange": "  \tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType)", "diff": ["-\tpublic Annotation getSupplierAnnotation() {", "-\t\tfor (Annotation annotation : annotations) {", "-\t\t\tif (getSupplier(annotation) != null)", "-\t\t\t\treturn annotation;", "-\t\t}", "-", "-\t\treturn null;", "-\t}", "+", "+\tpublic <T extends Annotation> T getAnnotation(Class<T> annotationType) {", "+\t\tfor (Annotation each : getAnnotations())", "+\t\t\tif (annotationType.isInstance(each))", "+\t\t\t\treturn annotationType.cast(each);", "+\t\treturn null;", "+\t}"]}]}
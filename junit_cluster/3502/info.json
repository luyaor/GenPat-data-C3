{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b5424537219b36837f73e71b551b0fa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c18004d33b2723123347e0980e86385", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "e02beea07c6d3798e2db532d6c7cebe6cc21f30d", "commitAfterChange": "df88873d5013e400489550cf15e9b51dc438eb4b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void invokeValidatorsOnMethods(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnMethods(List<Throwable> errors)", "diff": ["-            for (FrameworkMethod frameworkMethod : annotationMap.get(annotationType)) {", "-                AnnotationValidator annotationValidator = createAnnotationValidator(validateWithAnnotation);", "-                errors.addAll(annotationValidator.validateAnnotatedMethod(frameworkMethod.getMethod()));", "+            if (validateWithAnnotation != null) {", "+                for (FrameworkMethod frameworkMethod : annotationMap.get(annotationType)) {", "+                    AnnotationValidator annotationValidator =", "+                            fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+                    errors.addAll(annotationValidator.validateAnnotatedMethod(frameworkMethod.getMethod()));", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f8b31fa4f121ea009ad6633985424a0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestIntrospector.java", "commitBeforeChange": "890b7b977e42360aa8975c8535fc66bfd8d8cb3e", "commitAfterChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tlong getTimeout(Method method)", "signatureAfterChange": "  \tlong getTimeout(Method method)", "diff": ["-\t\tlong timeout= annotation.timeout();", "-\t\treturn timeout;", "+\t\tif (annotation == null)", "+\t\t\treturn 0;", "+\t\treturn annotation.timeout();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6ce5712ad789d1c32bbbb50b4934e54", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "e02beea07c6d3798e2db532d6c7cebe6cc21f30d", "commitAfterChange": "df88873d5013e400489550cf15e9b51dc438eb4b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "diff": ["-            AnnotationValidator annotationValidator = createAnnotationValidator(validateWithAnnotation);", "-            errors.addAll(annotationValidator.validateAnnotatedClass(getTestClass().getJavaClass()));", "+            if (validateWithAnnotation != null) {", "+                AnnotationValidator annotationValidator =", "+                        fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+                errors.addAll(annotationValidator.validateAnnotatedClass(getTestClass().getJavaClass()));", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df56274c9409330d00e0a49c6ef48149", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "e02beea07c6d3798e2db532d6c7cebe6cc21f30d", "commitAfterChange": "df88873d5013e400489550cf15e9b51dc438eb4b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void invokeValidatorsOnFields(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnFields(List<Throwable> errors)", "diff": ["-            for (FrameworkField frameworkField : annotationMap.get(annotationType)) {", "-                AnnotationValidator annotationValidator = createAnnotationValidator(validateWithAnnotation);", "-                errors.addAll(annotationValidator.validateAnnotatedField(frameworkField.getField()));", "+            if (validateWithAnnotation != null) {", "+                for (FrameworkField frameworkField : annotationMap.get(annotationType)) {", "+                    AnnotationValidator annotationValidator =", "+                            fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+                    errors.addAll(annotationValidator.validateAnnotatedField(frameworkField.getField()));", "+                }", "-    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9fcb2ebb162b106c5fa08bb6fca12c73", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7427e453571e397e0cf12df528a59b76", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/TextListener.java", "commitBeforeChange": "4dcf3a499652b3c089d91e209c6f01313115ff76", "commitAfterChange": "a916d4133c7e394130d7953da427aae9917ab92c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \tprivate void printIgnorances(Result result)", "signatureAfterChange": " \t \tprivate void printIgnorances(Result result)", "diff": ["-\t\t// TODO: (Dec 13, 2007 12:57:04 AM) DUP", "-", "-\t\tif (result.getIgnorances().size() == 0)", "-\t\t\treturn;", "-\t\tif (result.getIgnorances().size() == 1)", "-\t\t\t// TODO: (Dec 13, 2007 12:55:01 AM) test this back in", "-", "-\t\t\tgetWriter().println(\"There was \" + result.getIgnorances().size() + \" \" + \"ignored test\" + \":\");", "-\t\telse", "-\t\t\tgetWriter().println(\"There were \" + result.getIgnorances().size() + \" \" + \"ignored test\" + \"s:\");", "-\t\tfor (Ignorance each : result.getIgnorances()) {", "-\t\t\t// TODO: (Dec 13, 2007 12:57:12 AM) Cheating", "-", "-\t\t\tgetWriter().println(\"IGNORED TEST 1) \" + each.getReason());", "-\t\t}", "+\t\tprintEvents(\"ignored test\", \"IGNORED TEST \", result.getIgnorances());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d37e11e57a5c07c2efabdd4ce8383966", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/textui/ResultPrinter.java", "commitBeforeChange": "395b46b73966551369e58ae65ee75783df132fa9", "commitAfterChange": "3944908ba2c55a76382f51f46d0693803a8dd3f4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \tpublic void printHeader(TestResult result)", "signatureAfterChange": "  \tprotected void printHeader(long runTime)", "diff": ["+", "+\tprotected void printHeader(long runTime) {", "+\t\tgetWriter().println();", "+\t\tgetWriter().println(\"Time: \"+elapsedTimeAsString(runTime));", "+\t}", "-\t */", "-\tpublic void printHeader(TestResult result) {", "-\t}"]}]}
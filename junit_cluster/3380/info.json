{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a0dc4e8478b9e121b22e5ad2def66bf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3532d284e577a0c969c6f43b18c23a86", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/EventCollector.java", "commitBeforeChange": "e01ccf14711bfcb6b0c2fb5ec4bf541e8e78b721", "commitAfterChange": "fa80b68e34e82129367f6075ddfef4392cdc4d86", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tstatic Matcher<EventCollector> everyTestRunSuccessful()", "signatureAfterChange": " \tstatic Matcher<EventCollector> everyTestRunSuccessful()", "diff": ["-\t\treturn both(hasNoFailure()).and(hasNoAssumptionFailure());", "+\t\treturn allOf(hasNoFailure(), hasNoAssumptionFailure());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4590baa76e9da7adddd1011cda1a81ce", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/imposterization/ThrownMatcher.java", "commitBeforeChange": "fcf95d1d6bfdd046f1328af108ad5376c62d50d4", "commitAfterChange": "b7bb33dd040e87bb08831ee950fd788f206bb59a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic static ThrownMatcher assertReturnsNormally()", "signatureAfterChange": "  \tpublic static ThrownMatcher assertReturnsNormally()", "diff": ["-\t\treturn assertThrownException(Matchers.is(((Object) null)));", "+\t\treturn assertThrownException(is(((Object) null)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd7a0eb19e3814f6678891cd261144fb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/model/EachTestNotifier.java", "commitBeforeChange": "ea47086066445ba537d1573fd7458de8875d6c45", "commitAfterChange": "2a6d6365c593149da094d7512028a2d008ea6cff", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate AssumptionViolatedException makeIgnoredException( \t\t\tDescription description)", "signatureAfterChange": "  \tprivate AssumptionViolatedException makeIgnoredException( \t\t\tDescription description)", "diff": ["-\t\treturn new AssumptionViolatedException(reason, nullValue());", "+\t\treturn new AssumptionViolatedException(reason);"]}]}
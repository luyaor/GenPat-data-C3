{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "810e0161f54e41594907f871142d6d70", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3d0e31c9405583a05175042b96d5eb9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxHistory.java", "commitBeforeChange": "c1fb11d4e5280cda98c84a910545703b15b1cf67", "commitAfterChange": "24466485d2dfb58818ac3abf222558a230cbf4cb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate static MaxHistory readHistory(File storedResults) throws CouldNotReadCoreException", "signatureAfterChange": "  \tprivate static MaxHistory readHistory(File storedResults) \t\t\tthrows CouldNotReadCoreException", "diff": ["-\t", "-\tprivate static MaxHistory readHistory(File storedResults) throws CouldNotReadCoreException {", "-\t\t// TODO: rule of three", "-\t\t// TODO: Really?", "-\t\tObjectInputStream stream;", "-\t\tFileInputStream file= null;", "+", "+\tprivate static MaxHistory readHistory(File storedResults)", "+\t\t\tthrows CouldNotReadCoreException {", "-\t\t\tfile= new FileInputStream(storedResults);", "-\t\t} catch (FileNotFoundException e) {", "+\t\t\tFileInputStream file= new FileInputStream(storedResults);", "+\t\t\ttry {", "+\t\t\t\tObjectInputStream stream= new ObjectInputStream(file);", "+\t\t\t\ttry {", "+\t\t\t\t\treturn (MaxHistory) stream.readObject();", "+\t\t\t\t} finally {", "+\t\t\t\t\tstream.close();", "+\t\t\t\t}", "+\t\t\t} finally {", "+\t\t\t\tfile.close();", "+\t\t\t}", "+\t\t} catch (Exception e) {", "-\t\ttry {", "-\t\t\ttry {", "-\t\t\t\tstream= new ObjectInputStream(file);", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tthrow new CouldNotReadCoreException(e);", "-\t\t\t}", "-\t\t\ttry {", "-\t\t\t\treturn (MaxHistory) stream.readObject();", "-\t\t\t} catch (Exception e) {", "-\t\t\t\tthrow new CouldNotReadCoreException(e); //TODO think about what we can do better here", "-\t\t\t} finally {", "-\t\t\t\ttry {", "-\t\t\t\t\tstream.close();", "-\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\tthrow new CouldNotReadCoreException(e);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} finally {", "-\t\t\ttry {", "-\t\t\t\tfile.close();", "-\t\t\t} catch (IOException e) {", "-\t\t\t\t// TODO can't imagine what's gone wrong here, but who cares?", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e419acfdf596b24c57bcda8948d566d7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxHistory.java", "commitBeforeChange": "be06ab8bfe4991ce64d4dae0655833b060362cda", "commitAfterChange": "fea583afc60dfdd67dec3349f0e0203d6cb3a69f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tprivate static MaxHistory readHistory(File storedResults) throws CouldNotReadCoreException", "signatureAfterChange": "  \tprivate static MaxHistory readHistory(File storedResults) \t\t\tthrows CouldNotReadCoreException", "diff": ["-\t", "-\tprivate static MaxHistory readHistory(File storedResults) throws CouldNotReadCoreException {", "-\t\t// TODO: rule of three", "-\t\t// TODO: Really?", "-\t\tObjectInputStream stream;", "-\t\tFileInputStream file= null;", "+", "+\tprivate static MaxHistory readHistory(File storedResults)", "+\t\t\tthrows CouldNotReadCoreException {", "-\t\t\tfile= new FileInputStream(storedResults);", "-\t\t} catch (FileNotFoundException e) {", "+\t\t\tFileInputStream file= new FileInputStream(storedResults);", "+\t\t\ttry {", "+\t\t\t\tObjectInputStream stream= new ObjectInputStream(file);", "+\t\t\t\ttry {", "+\t\t\t\t\treturn (MaxHistory) stream.readObject();", "+\t\t\t\t} finally {", "+\t\t\t\t\tstream.close();", "+\t\t\t\t}", "+\t\t\t} finally {", "+\t\t\t\tfile.close();", "+\t\t\t}", "+\t\t} catch (Exception e) {", "-\t\ttry {", "-\t\t\ttry {", "-\t\t\t\tstream= new ObjectInputStream(file);", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tthrow new CouldNotReadCoreException(e);", "-\t\t\t}", "-\t\t\ttry {", "-\t\t\t\treturn (MaxHistory) stream.readObject();", "-\t\t\t} catch (Exception e) {", "-\t\t\t\tthrow new CouldNotReadCoreException(e); //TODO think about what we can do better here", "-\t\t\t} finally {", "-\t\t\t\ttry {", "-\t\t\t\t\tstream.close();", "-\t\t\t\t} catch (IOException e) {", "-\t\t\t\t\tthrow new CouldNotReadCoreException(e);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} finally {", "-\t\t\ttry {", "-\t\t\t\tfile.close();", "-\t\t\t} catch (IOException e) {", "-\t\t\t\t// TODO can't imagine what's gone wrong here, but who cares?", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5ab561720a0aec5179d3cb6ee0c1d8e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestClassMethodsRunner.java", "commitBeforeChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "commitAfterChange": "3d7fee93ddc21a6e849c36d5ae58b37b3d189665", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "diff": ["-\t\t\ttestAborted(notifier, method, e.getCause());", "-\t\t\treturn;", "-\t\t} catch (Throwable e) {", "-\t\t\ttestAborted(notifier, method, e);", "-\t\t\treturn;", "-\t\t}", "-", "-\t\tTestMethod testMethod= new TestMethod(test, method,", "-\t\t\t\tmethodDescription(method));", "-\t\ttry {", "-\t\t\tMethodRunner runner= testMethod.findCustomRunner(this);", "-\t\t\tif (runner == null)", "-\t\t\t\tcreateMethodRunner(test, method, notifier).run();", "-\t\t\telse {", "-\t\t\t\trunner.run(testMethod, notifier);", "-\t\t\t}", "+\t\t\ttestAborted(notifier, methodDescription(method), e.getCause());", "+\t\t\treturn;\t\t\t", "-\t\t\tThrowable exception= new RuntimeException(", "-\t\t\t\t\t\"Exception creating custom method runner\", e);", "-\t\t\ttestAborted(notifier, method, exception);", "+\t\t\ttestAborted(notifier, methodDescription(method), e);", "+\t\t\treturn;", "+\t\tcreateMethodRunner(test, method, notifier).run();"]}]}
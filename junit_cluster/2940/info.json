{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52571e4bbc80d36a49c240ef3712b795", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a7bbcab70f12d7a43d28858b83842ca", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t@Override \tprotected void validateTestMethods(List<Throwable> errors)", "signatureAfterChange": "      @Override     protected void validateTestMethods(List<Throwable> errors)", "diff": ["-\t", "-\t@Override", "-\tprotected void validateTestMethods(List<Throwable> errors) {", "-\t\tfor (FrameworkMethod each : computeTestMethods())", "-\t\t\tif(each.getAnnotation(Theory.class) != null)", "-\t\t\t\teach.validatePublicVoid(false, errors);", "-\t\t\telse", "-\t\t\t\teach.validatePublicVoidNoArg(false, errors);", "-\t}", "+", "+    @Override", "+    protected void validateTestMethods(List<Throwable> errors) {", "+        for (FrameworkMethod each : computeTestMethods()) {", "+            if (each.getAnnotation(Theory.class) != null) {", "+                each.validatePublicVoid(false, errors);", "+            } else {", "+                each.validatePublicVoidNoArg(false, errors);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d12975c8c83bff12945086bd83510190", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "103f204ada7363675fcd4a1e2e0a41030a15a9ae", "commitAfterChange": "6384edfffe7f8a2850d2bcde9a16a8e780734ebe", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "          @Override         public void evaluate() throws Throwable", "signatureAfterChange": "          @Override         public void evaluate() throws Throwable", "diff": ["-                if (fMatcherBuilder.expectsThrowable()) {", "-                    failDueToMissingException();", "-                }", "+                return;", "+                return;", "+                return;", "+            }", "+            if (fMatcherBuilder.expectsThrowable()) {", "+                failDueToMissingException();"]}]}
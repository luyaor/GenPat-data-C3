{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "160e76162bee03dee8313ff31566de5f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52c5c5e129ee2c8a66523ac49ff9614e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Suite.java", "commitBeforeChange": "7e74bfd60ca879d78db96915ce1d8db341db2279", "commitAfterChange": "a268686d96bfbb328e02b363c3f0f72da54f9fc6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected Suite(Class<?> klass, List<Runner> runners) throws InitializationError", "signatureAfterChange": " \tprotected Suite(Class<?> klass, List<Runner> runners) throws InitializationError", "diff": ["+\t\ttry {", "+\t\t\trules(getTestClass().getOnlyConstructor().newInstance());", "+\t\t\t", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\t// TODO Auto-generated catch block", "+\t\t\te.printStackTrace();", "+\t\t} catch (InstantiationException e) {", "+\t\t\t// TODO Auto-generated catch block", "+\t\t\te.printStackTrace();", "+\t\t} catch (IllegalAccessException e) {", "+\t\t\t// TODO Auto-generated catch block", "+\t\t\te.printStackTrace();", "+\t\t} catch (InvocationTargetException e) {", "+\t\t\t// TODO Auto-generated catch block", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7905ef53b35436bc7f960a8ffaccf8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "34e66740b9117ce85cfd416f9e931b2e533ab16e", "commitAfterChange": "85b7c26e63f851004ce20d4a00fbf1b46607ab0c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void throwExceptionForUnfinishedThread(StatementThread thread)             throws Throwable", "signatureAfterChange": "     private Throwable getResult(FutureTask<Throwable> task, Thread thread)", "diff": ["-", "-    private void throwExceptionForUnfinishedThread(StatementThread thread)", "-            throws Throwable {", "-        if (thread.fExceptionThrownByOriginalStatement != null) {", "-            throw thread.fExceptionThrownByOriginalStatement;", "-        } else {", "-            throwTimeoutException(thread);", "+     */", "+    private Throwable getResult(FutureTask<Throwable> task, Thread thread) {", "+        try {", "+            return task.get(fTimeout, fTimeUnit);", "+        } catch (InterruptedException e) {", "+            return e; // caller will re-throw; no need to call Thread.interrupt()", "+        } catch (ExecutionException e) {", "+            // test failed; have caller re-throw the exception thrown by the test", "+            return e.getCause();", "+        } catch (TimeoutException e) {", "+            return createTimeoutException(thread);", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6bde24fada5ecee5c21b663cf828d7b0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf31fe9ea217b181d2ea9aebe2646b5a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/experimental/validator/AnnotationValidatorFactoryTest.java", "commitBeforeChange": "1273a35689bdcb3304f6634cdc3889c61f9b1b1f", "commitAfterChange": "d3ee5d06c0b797ce812cbfe35addc6146d5f07cb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void exceptionWhenValidatorIsNotAnAnnotationValidator()", "signatureAfterChange": "      @Test     public void exceptionWhenAnnotationValidatorCantBeCreated()", "diff": ["-", "-    @Test", "-    public void exceptionWhenValidatorIsNotAnAnnotationValidator() {", "-        exception.expect(RuntimeException.class);", "-        exception.expectMessage(\"Error when creating AnnotationValidator class \" +", "-                \"org.junit.experimental.validator.AnnotationValidatorFactoryTest$ValidatorThatThrowsException\");", "-", "-        ValidateWith validateWith = SampleTestWithValidatorThatThrowsException.class.getAnnotation(ValidateWith.class);", "-        new AnnotationValidatorFactory().createAnnotationValidator(validateWith);", "-    }", "+", "+    @Test", "+    public void exceptionWhenAnnotationValidatorCantBeCreated() {", "+        exception.expect(RuntimeException.class);", "+        exception.expectMessage(\"Exception received when creating AnnotationValidator class \" +", "+                \"org.junit.experimental.validator.AnnotationValidatorFactoryTest$ValidatorThatThrowsException\");", "+", "+        ValidateWith validateWith = SampleTestWithValidatorThatThrowsException.class.getAnnotation(ValidateWith.class);", "+        new AnnotationValidatorFactory().createAnnotationValidator(validateWith);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd158265ff221d5b66189cd44cd17f9d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/validator/AnnotationValidatorFactory.java", "commitBeforeChange": "5e71994e865d0e2ac23885a11444cda91b3bba76", "commitAfterChange": "1273a35689bdcb3304f6634cdc3889c61f9b1b1f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAnnotation)", "signatureAfterChange": "     public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAnnotation)", "diff": ["-            return new AnnotationValidator();", "+            return new AnnotationValidator() {", "+            };", "-        if (fAnnotationTypeToValidatorMap.containsKey(validateWithAnnotation)) {", "-            return fAnnotationTypeToValidatorMap.get(validateWithAnnotation);", "+        AnnotationValidator validator = fAnnotationTypeToValidatorMap.get(validateWithAnnotation);", "+        if (validator != null) {", "+            return validator;", "-        Class<?> clazz = validateWithAnnotation.value();", "+        Class<? extends AnnotationValidator> clazz = validateWithAnnotation.value();", "-            AnnotationValidator annotationValidator = (AnnotationValidator) clazz.newInstance();", "-            fAnnotationTypeToValidatorMap.put(validateWithAnnotation, annotationValidator);", "+            AnnotationValidator annotationValidator = clazz.newInstance();", "+            fAnnotationTypeToValidatorMap.putIfAbsent(validateWithAnnotation, annotationValidator);"]}]}
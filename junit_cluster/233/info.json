{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90173fe1ab6a656996ae748f39fac80d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08556c3e2a78a22508e9ade6fdc72ebf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/ComparisonCompactor.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate String compactString(String source)", "signatureAfterChange": "      private String compactString(String source)", "diff": ["-\tprivate String compactString(String source) {", "-\t\tString result= DELTA_START + source.substring(fPrefix, source.length() - fSuffix + 1) + DELTA_END;", "-\t\tif (fPrefix > 0)", "-\t\t\tresult= computeCommonPrefix() + result;", "-\t\tif (fSuffix > 0)", "-\t\t\tresult= result + computeCommonSuffix();", "-\t\treturn result;", "-\t}", "+    private String compactString(String source) {", "+        String result = DELTA_START + source.substring(fPrefix, source.length() - fSuffix + 1) + DELTA_END;", "+        if (fPrefix > 0) {", "+            result = computeCommonPrefix() + result;", "+        }", "+        if (fSuffix > 0) {", "+            result = result + computeCommonSuffix();", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d258d5c93161d09ddc84eb27307abc1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/MultipleFailureException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@SuppressWarnings(\"deprecation\") \tpublic static void assertEmpty(List<Throwable> errors) throws Throwable", "signatureAfterChange": "     @SuppressWarnings(\"deprecation\")     public static void assertEmpty(List<Throwable> errors) throws Throwable", "diff": ["-\t */", "-\t@SuppressWarnings(\"deprecation\")", "-\tpublic static void assertEmpty(List<Throwable> errors) throws Throwable {", "-\t\tif (errors.isEmpty())", "-\t\t\treturn;", "-\t\tif (errors.size() == 1)", "-\t\t\tthrow errors.get(0);", "-\t\t/*", "-\t\t * Many places in the code are documented to throw", "-\t\t * org.junit.internal.runners.model.MultipleFailureException.", "-\t\t * That class now extends this one, so we throw the internal", "-\t\t * exception in case developers have tests that catch", "-\t\t * MultipleFailureException.", "-\t\t */", "-\t\tthrow new org.junit.internal.runners.model.MultipleFailureException(errors);", "-\t}", "+     */", "+    @SuppressWarnings(\"deprecation\")", "+    public static void assertEmpty(List<Throwable> errors) throws Throwable {", "+        if (errors.isEmpty()) {", "+            return;", "+        }", "+        if (errors.size() == 1) {", "+            throw errors.get(0);", "+        }", "+", "+        /*", "+           * Many places in the code are documented to throw", "+           * org.junit.internal.runners.model.MultipleFailureException.", "+           * That class now extends this one, so we throw the internal", "+           * exception in case developers have tests that catch", "+           * MultipleFailureException.", "+           */", "+        throw new org.junit.internal.runners.model.MultipleFailureException(errors);", "+    }"]}]}
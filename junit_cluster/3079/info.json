{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d72e6b39364888b666319874c6ed4802", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0dd62eeda90fab2b5c1e53f5aab54a2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic Request sortRequest(Request request)", "signatureAfterChange": "     public Request sortRequest(Request request)", "diff": ["-\t */", "-\tpublic Request sortRequest(Request request) {", "-\t\tif (request instanceof SortingRequest) // We'll pay big karma points for this", "-\t\t\treturn request;", "-\t\tList<Description> leaves= findLeaves(request);", "-\t\tCollections.sort(leaves, fHistory.testComparator());", "-\t\treturn constructLeafRequest(leaves);", "-\t}", "+     */", "+    public Request sortRequest(Request request) {", "+        if (request instanceof SortingRequest) {", "+            // We'll pay big karma points for this", "+            return request;", "+        }", "+        List<Description> leaves = findLeaves(request);", "+        Collections.sort(leaves, fHistory.testComparator());", "+        return constructLeafRequest(leaves);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2c92271ae44afb4f37d3a604e8ae367", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\t@Override \t\tpublic boolean shouldRun(Description description)", "signatureAfterChange": "          @Override         public boolean shouldRun(Description description)", "diff": ["-\t\t@Override", "-\t\tpublic boolean shouldRun(Description description) {", "-\t\t\tif (hasCorrectCategoryAnnotation(description))", "-\t\t\t\treturn true;", "-\t\t\tfor (Description each : description.getChildren())", "-\t\t\t\tif (shouldRun(each))", "-\t\t\t\t\treturn true;", "-\t\t\treturn false;", "-\t\t}", "+        @Override", "+        public boolean shouldRun(Description description) {", "+            if (hasCorrectCategoryAnnotation(description)) {", "+                return true;", "+            }", "+            for (Description each : description.getChildren()) {", "+                if (shouldRun(each)) {", "+                    return true;", "+                }", "+            }", "+            return false;", "+        }"]}]}
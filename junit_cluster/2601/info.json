{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c655af655703436df07b4f0eecbb660", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b80480782737a0673061c73766416f7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic Class<?> getTestClass()", "signatureAfterChange": "     public Class<?> getTestClass()", "diff": ["-\t */", "-\tpublic Class<?> getTestClass() {", "-\t\tif (fTestClass != null)", "-\t\t\treturn fTestClass;", "-\t\tString name= getClassName();", "-\t\tif (name == null)", "-\t\t\treturn null;", "-\t\ttry {", "-\t\t\tfTestClass= Class.forName(name, false, getClass().getClassLoader());", "-\t\t\treturn fTestClass;", "-\t\t} catch (ClassNotFoundException e) {", "-\t\t\treturn null;", "-\t\t}", "-\t}", "+     */", "+    public Class<?> getTestClass() {", "+        if (fTestClass != null) {", "+            return fTestClass;", "+        }", "+        String name = getClassName();", "+        if (name == null) {", "+            return null;", "+        }", "+        try {", "+            fTestClass = Class.forName(name, false, getClass().getClassLoader());", "+            return fTestClass;", "+        } catch (ClassNotFoundException e) {", "+            return null;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e274543b1da5b0b44302dca95ef4db", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "   \tpublic static int getPreference(String key, int dflt)", "signatureAfterChange": "      public static int getPreference(String key, int dflt)", "diff": ["- \tpublic static int getPreference(String key, int dflt) {", "- \t\tString value= getPreference(key);", "- \t\tint intValue= dflt;", "- \t\tif (value == null)", "- \t\t\treturn intValue;", "- \t\ttry {", "- \t\t\tintValue= Integer.parseInt(value);", "- \t \t} catch (NumberFormatException ne) {", "- \t\t}", "- \t\treturn intValue;", "- \t}", "+    public static int getPreference(String key, int dflt) {", "+        String value = getPreference(key);", "+        int intValue = dflt;", "+        if (value == null) {", "+            return intValue;", "+        }", "+        try {", "+            intValue = Integer.parseInt(value);", "+        } catch (NumberFormatException ne) {", "+        }", "+        return intValue;", "+    }"]}]}
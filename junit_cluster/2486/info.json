{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c313bbc3bbc119a587ea68a4e4292870", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2881681487286e438496999ab394577b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tpublic String getName()", "signatureAfterChange": "     public String getName()", "diff": ["-\t */", "-\tpublic String getName() {", "-\t\tif (fClass == null)", "-\t\t\treturn \"null\";", "-\t\treturn fClass.getName();", "-\t}", "+     */", "+    public String getName() {", "+        if (fClass == null) {", "+            return \"null\";", "+        }", "+        return fClass.getName();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6bb3b47a6bea656799dc981be14a31", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tpublic <T> List<T> getAnnotatedMethodValues(Object test, \t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass)", "signatureAfterChange": "      public <T> List<T> getAnnotatedMethodValues(Object test,             Class<? extends Annotation> annotationClass, Class<T> valueClass)", "diff": ["-\tpublic <T> List<T> getAnnotatedMethodValues(Object test,", "-\t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass) {", "-\t\tList<T> results= new ArrayList<T>();", "-\t\tfor (FrameworkMethod each : getAnnotatedMethods(annotationClass)) {", "-\t\t\ttry {", "-\t\t\t\tObject fieldValue= each.invokeExplosively(test, new Object[]{});", "-\t\t\t\tif (valueClass.isInstance(fieldValue))", "-\t\t\t\t\tresults.add(valueClass.cast(fieldValue));", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\t\"Exception in \" + each.getName(), e);", "-\t\t\t}", "-\t\t}", "-\t\treturn results;", "-\t}", "+    public <T> List<T> getAnnotatedMethodValues(Object test,", "+            Class<? extends Annotation> annotationClass, Class<T> valueClass) {", "+        List<T> results = new ArrayList<T>();", "+        for (FrameworkMethod each : getAnnotatedMethods(annotationClass)) {", "+            try {", "+                Object fieldValue = each.invokeExplosively(test, new Object[]{});", "+                if (valueClass.isInstance(fieldValue)) {", "+                    results.add(valueClass.cast(fieldValue));", "+                }", "+            } catch (Throwable e) {", "+                throw new RuntimeException(", "+                        \"Exception in \" + each.getName(), e);", "+            }", "+        }", "+        return results;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c92f2bd8433c87b516bb704d1e5aeab", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/Money.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t@Override \tpublic int hashCode()", "signatureAfterChange": "      @Override     public int hashCode()", "diff": ["-\t}", "-\t@Override", "-\tpublic int hashCode() {", "-\t\tif (fAmount == 0)", "-\t\t\treturn 0;", "-\t\treturn fCurrency.hashCode()+fAmount;", "-\t}", "+", "+    @Override", "+    public int hashCode() {", "+        if (fAmount == 0) {", "+            return 0;", "+        }", "+        return fCurrency.hashCode() + fAmount;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "835ff7d5df9e5488cb45136f8388ff13", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/Money.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic IMoney addMoney(Money m)", "signatureAfterChange": "      public IMoney addMoney(Money m)", "diff": ["-\t}", "-\tpublic IMoney addMoney(Money m) {", "-\t\tif (m.currency().equals(currency()) )", "-\t\t\treturn new Money(amount()+m.amount(), currency());", "-\t\treturn MoneyBag.create(this, m);", "-\t}", "+", "+    public IMoney addMoney(Money m) {", "+        if (m.currency().equals(currency())) {", "+            return new Money(amount() + m.amount(), currency());", "+        }", "+        return MoneyBag.create(this, m);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae05acce6067af5433e427319fbdaf31", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tpublic <T> List<T> getAnnotatedFieldValues(Object test, \t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass)", "signatureAfterChange": "      public <T> List<T> getAnnotatedFieldValues(Object test,             Class<? extends Annotation> annotationClass, Class<T> valueClass)", "diff": ["-\tpublic <T> List<T> getAnnotatedFieldValues(Object test,", "-\t\t\tClass<? extends Annotation> annotationClass, Class<T> valueClass) {", "-\t\tList<T> results= new ArrayList<T>();", "-\t\tfor (FrameworkField each : getAnnotatedFields(annotationClass)) {", "-\t\t\ttry {", "-\t\t\t\tObject fieldValue= each.get(test);", "-\t\t\t\tif (valueClass.isInstance(fieldValue))", "-\t\t\t\t\tresults.add(valueClass.cast(fieldValue));", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\t\"How did getFields return a field we couldn't access?\", e);", "-\t\t\t}", "-\t\t}", "-\t\treturn results;", "-\t}", "+    public <T> List<T> getAnnotatedFieldValues(Object test,", "+            Class<? extends Annotation> annotationClass, Class<T> valueClass) {", "+        List<T> results = new ArrayList<T>();", "+        for (FrameworkField each : getAnnotatedFields(annotationClass)) {", "+            try {", "+                Object fieldValue = each.get(test);", "+                if (valueClass.isInstance(fieldValue)) {", "+                    results.add(valueClass.cast(fieldValue));", "+                }", "+            } catch (IllegalAccessException e) {", "+                throw new RuntimeException(", "+                        \"How did getFields return a field we couldn't access?\", e);", "+            }", "+        }", "+        return results;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3682bb75bc6fe23dce044bff0650012", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/RunnerBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate List<Runner> runners(Class<?>[] children)", "signatureAfterChange": "      private List<Runner> runners(Class<?>[] children)", "diff": ["-\t", "-\tprivate List<Runner> runners(Class<?>[] children) {", "-\t\tArrayList<Runner> runners= new ArrayList<Runner>();", "-\t\tfor (Class<?> each : children) {", "-\t\t\tRunner childRunner= safeRunnerForClass(each);", "-\t\t\tif (childRunner != null)", "-\t\t\t\trunners.add(childRunner);", "-\t\t}", "-\t\treturn runners;", "-\t}", "+", "+    private List<Runner> runners(Class<?>[] children) {", "+        ArrayList<Runner> runners = new ArrayList<Runner>();", "+        for (Class<?> each : children) {", "+            Runner childRunner = safeRunnerForClass(each);", "+            if (childRunner != null) {", "+                runners.add(childRunner);", "+            }", "+        }", "+        return runners;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9306a4dd6df972f869308f74a78e628", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic Annotation[] getAnnotations()", "signatureAfterChange": "     public Annotation[] getAnnotations()", "diff": ["-\t */", "-\tpublic Annotation[] getAnnotations() {", "-\t\tif (fClass == null)", "-\t\t\treturn new Annotation[0];", "-\t\treturn fClass.getAnnotations();", "-\t}", "+     */", "+    public Annotation[] getAnnotations() {", "+        if (fClass == null) {", "+            return new Annotation[0];", "+        }", "+        return fClass.getAnnotations();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df738c79ee120cc75693c703ba71f30a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map, \t\t\tClass<? extends Annotation> type)", "signatureAfterChange": "      private <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,             Class<? extends Annotation> type)", "diff": ["-\tprivate <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,", "-\t\t\tClass<? extends Annotation> type) {", "-\t\tif (!map.containsKey(type))", "-\t\t\tmap.put(type, new ArrayList<T>());", "-\t\treturn map.get(type);", "-\t}", "+    private <T> List<T> getAnnotatedMembers(Map<Class<?>, List<T>> map,", "+            Class<? extends Annotation> type) {", "+        if (!map.containsKey(type)) {", "+            map.put(type, new ArrayList<T>());", "+        }", "+        return map.get(type);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e532015d490eca885daaa28342337a6c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/RunnerBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tClass<?> addParent(Class<?> parent) throws InitializationError", "signatureAfterChange": "      Class<?> addParent(Class<?> parent) throws InitializationError", "diff": ["-\tClass<?> addParent(Class<?> parent) throws InitializationError {", "-\t\tif (!parents.add(parent))", "-\t\t\tthrow new InitializationError(String.format(\"class '%s' (possibly indirectly) contains itself as a SuiteClass\", parent.getName()));", "-\t\treturn parent;", "-\t}", "+    Class<?> addParent(Class<?> parent) throws InitializationError {", "+        if (!parents.add(parent)) {", "+            throw new InitializationError(String.format(\"class '%s' (possibly indirectly) contains itself as a SuiteClass\", parent.getName()));", "+        }", "+        return parent;", "+    }"]}]}
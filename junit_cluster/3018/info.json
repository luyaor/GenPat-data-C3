{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22ef2ff9067bc89471e3f13519e0189e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d827edb18cf005328835c3ecb76e401", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/requests/ClassRequest.java", "commitBeforeChange": "a916d4133c7e394130d7953da427aae9917ab92c", "commitAfterChange": "d148bce8682505082a3cc634acbd36ac13a10c9a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tpublic Runner buildRunner(Class<? extends Runner> runnerClass)", "signatureAfterChange": "  \tpublic Runner buildRunner(Class<? extends Runner> runnerClass)", "diff": ["-\t\t\treturn runnerClass.getConstructor(Class.class).newInstance(new Object[] { fTestClass });", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\tString simpleName= runnerClass.getSimpleName();", "-\t\t\tInitializationError error= new InitializationError(String.format(", "-\t\t\t\t\tCONSTRUCTOR_ERROR_FORMAT, simpleName, simpleName));", "-\t\t\treturn new ErrorReportingRunner(fTestClass, error);", "+\t\t\ttry {", "+\t\t\t\treturn runnerClass.getConstructor(Class.class).newInstance(", "+\t\t\t\t\t\tnew Object[] { fTestClass });", "+\t\t\t} catch (NoSuchMethodException e) {", "+\t\t\t\ttry {", "+\t\t\t\t\treturn runnerClass.getConstructor(Class.class,", "+\t\t\t\t\t\t\tSuiteBuilder.class).newInstance(", "+\t\t\t\t\t\t\tnew Object[] { fTestClass, fSuiteBuilder });", "+\t\t\t\t} catch (NoSuchMethodException e2) {", "+\t\t\t\t\tString simpleName= runnerClass.getSimpleName();", "+\t\t\t\t\tInitializationError error= new InitializationError(String", "+\t\t\t\t\t\t\t.format(CONSTRUCTOR_ERROR_FORMAT, simpleName,", "+\t\t\t\t\t\t\t\t\tsimpleName));", "+\t\t\t\t\treturn new ErrorReportingRunner(fTestClass, error);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e8c0c6a76db144ca94bd9ff72c4d0f8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/requests/ErrorReportingRequest.java", "commitBeforeChange": "95bd62b2ffd80394d1a17e9078a4d79478423030", "commitAfterChange": "9c8d59d9869280a698c3f3a119eb69f0e897c94b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic Runner getRunner()", "signatureAfterChange": "  \t@Override \tpublic Runner getRunner()", "diff": ["-\t\tList<Throwable> goofs= getCauses(fCause);", "-\t\tList<Runner> runners= new ArrayList<Runner>();", "-\t\tfor (int i= 0; i < goofs.size(); i++) {", "-\t\t\tfinal Description description= Description.createTestDescription(fClass, \"initializationError\" + i);", "-\t\t\tfinal Throwable throwable= goofs.get(i);", "-\t\t\trunners.add(new ErrorReportingRunner(description, throwable));", "-\t\t}", "-\t\tCompositeRunner runner= new CompositeRunner(fClass.getName(), runners);", "-\t\treturn runner;", "+\t\t// TODO: (Dec 10, 2007 9:41:13 PM) Should this class exist?", "+", "+\t\treturn new ErrorReportingRunner(fClass, fCause);", "+//\t\tList<Throwable> goofs= getCauses(fCause);", "+//\t\tCompositeRunner runner= new CompositeRunner(fClass.getName());", "+//\t\tfor (int i= 0; i < goofs.size(); i++) {", "+//\t\t\tfinal Description description= Description.createTestDescription(fClass, \"initializationError\" + i);", "+//\t\t\tfinal Throwable throwable= goofs.get(i);", "+//\t\t\trunner.add(new ErrorReportingRunner(fClass, throwable));", "+//\t\t}", "+//\t\treturn runner;"]}]}
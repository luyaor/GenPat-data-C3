{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16bfd6c4130726f7b9653302e672f104", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58e2b5590296b1c66d46801871e407db", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tstatic public Test createTest(Class<?> theClass, String name)", "signatureAfterChange": "     static public Test createTest(Class<?> theClass, String name)", "diff": ["-\t */", "-\tstatic public Test createTest(Class<?> theClass, String name) {", "-\t\tConstructor<?> constructor;", "-\t\ttry {", "-\t\t\tconstructor= getTestConstructor(theClass);", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\treturn warning(\"Class \"+theClass.getName()+\" has no public constructor TestCase(String name) or TestCase()\");", "-\t\t}", "-\t\tObject test;", "-\t\ttry {", "-\t\t\tif (constructor.getParameterTypes().length == 0) {", "-\t\t\t\ttest= constructor.newInstance(new Object[0]);", "-\t\t\t\tif (test instanceof TestCase)", "-\t\t\t\t\t((TestCase) test).setName(name);", "-\t\t\t} else {", "-\t\t\t\ttest= constructor.newInstance(new Object[]{name});", "-\t\t\t}", "-\t\t} catch (InstantiationException e) {", "-\t\t\treturn(warning(\"Cannot instantiate test case: \"+name+\" (\"+exceptionToString(e)+\")\"));", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\treturn(warning(\"Exception in constructor: \"+name+\" (\"+exceptionToString(e.getTargetException())+\")\"));", "-\t\t} catch (IllegalAccessException e) {", "-\t\t\treturn(warning(\"Cannot access test case: \"+name+\" (\"+exceptionToString(e)+\")\"));", "-\t\t}", "-\t\treturn (Test) test;", "-\t}", "+     */", "+    static public Test createTest(Class<?> theClass, String name) {", "+        Constructor<?> constructor;", "+        try {", "+            constructor = getTestConstructor(theClass);", "+        } catch (NoSuchMethodException e) {", "+            return warning(\"Class \" + theClass.getName() + \" has no public constructor TestCase(String name) or TestCase()\");", "+        }", "+        Object test;", "+        try {", "+            if (constructor.getParameterTypes().length == 0) {", "+                test = constructor.newInstance(new Object[0]);", "+                if (test instanceof TestCase) {", "+                    ((TestCase) test).setName(name);", "+                }", "+            } else {", "+                test = constructor.newInstance(new Object[]{name});", "+            }", "+        } catch (InstantiationException e) {", "+            return (warning(\"Cannot instantiate test case: \" + name + \" (\" + exceptionToString(e) + \")\"));", "+        } catch (InvocationTargetException e) {", "+            return (warning(\"Exception in constructor: \" + name + \" (\" + exceptionToString(e.getTargetException()) + \")\"));", "+        } catch (IllegalAccessException e) {", "+            return (warning(\"Cannot access test case: \" + name + \" (\" + exceptionToString(e) + \")\"));", "+        }", "+        return (Test) test;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "711af5ad903f582a952cfca4de23384e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic Test getTest(String suiteClassName)", "signatureAfterChange": "     public Test getTest(String suiteClassName)", "diff": ["-\t */", "-\tpublic Test getTest(String suiteClassName) {", "-\t\tif (suiteClassName.length() <= 0) {", "-\t\t\tclearStatus();", "-\t\t\treturn null;", "-\t\t}", "-\t\tClass<?> testClass= null;", "-\t\ttry {", "-\t\t\ttestClass= loadSuiteClass(suiteClassName);", "-\t\t} catch (ClassNotFoundException e) {", "-\t\t\tString clazz= e.getMessage();", "-\t\t\tif (clazz == null)", "-\t\t\t\tclazz= suiteClassName;", "-\t\t\trunFailed(\"Class not found \\\"\"+clazz+\"\\\"\");", "-\t\t\treturn null;", "-\t\t} catch(Exception e) {", "-\t\t\trunFailed(\"Error: \"+e.toString());", "-\t\t\treturn null;", "-\t\t}", "-\t\tMethod suiteMethod= null;", "-\t\ttry {", "-\t\t\tsuiteMethod= testClass.getMethod(SUITE_METHODNAME, new Class[0]);", "-\t \t} catch(Exception e) {", "-\t \t\t// try to extract a test suite automatically", "-\t\t\tclearStatus();", "-\t\t\treturn new TestSuite(testClass);", "-\t\t}", "-\t\tif (! Modifier.isStatic(suiteMethod.getModifiers())) {", "-\t\t\trunFailed(\"Suite() method must be static\");", "-\t\t\treturn null;", "-\t\t}", "-\t\tTest test= null;", "-\t\ttry {", "-\t\t\ttest= (Test)suiteMethod.invoke(null, (Object[])new Class[0]); // static method", "-\t\t\tif (test == null)", "-\t\t\t\treturn test;", "-\t\t}", "-\t\tcatch (InvocationTargetException e) {", "-\t\t\trunFailed(\"Failed to invoke suite():\" + e.getTargetException().toString());", "-\t\t\treturn null;", "-\t\t}", "-\t\tcatch (IllegalAccessException e) {", "-\t\t\trunFailed(\"Failed to invoke suite():\" + e.toString());", "-\t\t\treturn null;", "-\t\t}", "+     */", "+    public Test getTest(String suiteClassName) {", "+        if (suiteClassName.length() <= 0) {", "+            clearStatus();", "+            return null;", "+        }", "+        Class<?> testClass = null;", "+        try {", "+            testClass = loadSuiteClass(suiteClassName);", "+        } catch (ClassNotFoundException e) {", "+            String clazz = e.getMessage();", "+            if (clazz == null) {", "+                clazz = suiteClassName;", "+            }", "+            runFailed(\"Class not found \\\"\" + clazz + \"\\\"\");", "+            return null;", "+        } catch (Exception e) {", "+            runFailed(\"Error: \" + e.toString());", "+            return null;", "+        }", "+        Method suiteMethod = null;", "+        try {", "+            suiteMethod = testClass.getMethod(SUITE_METHODNAME, new Class[0]);", "+        } catch (Exception e) {", "+            // try to extract a test suite automatically", "+            clearStatus();", "+            return new TestSuite(testClass);", "+        }", "+        if (!Modifier.isStatic(suiteMethod.getModifiers())) {", "+            runFailed(\"Suite() method must be static\");", "+            return null;", "+        }", "+        Test test = null;", "+        try {", "+            test = (Test) suiteMethod.invoke(null, (Object[]) new Class[0]); // static method", "+            if (test == null) {", "+                return test;", "+            }", "+        } catch (InvocationTargetException e) {", "+            runFailed(\"Failed to invoke suite():\" + e.getTargetException().toString());", "+            return null;", "+        } catch (IllegalAccessException e) {", "+            runFailed(\"Failed to invoke suite():\" + e.toString());", "+            return null;", "+        }", "-\t\tclearStatus();", "-\t\treturn test;", "-\t}", "+        clearStatus();", "+        return test;", "+    }"]}]}
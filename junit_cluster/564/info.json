{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb6bb211c242a73a5fdef14cc49c8cb8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3785c48320c71a75c024403b04285da", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f0ef837a40922ac08c608661385abf71732975d3", "commitAfterChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tprotected Link chain(TestMethod method, Object test, EachTestNotifier notifier)", "signatureAfterChange": " \t \tprotected Link chain(TestMethod method)", "diff": ["-\tprotected Link chain(TestMethod method, Object test, EachTestNotifier notifier) {", "+\tprotected Link chain(TestMethod method) {", "-", "-\t\t// TODO: (Oct 9, 2007 2:12:24 PM) method + test is parameter object?", "-", "+\t\tObject test;", "+\t\ttry {", "+\t\t\ttest= new ReflectiveCallable() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "+\t\t\t\t\treturn createTest();", "+\t\t\t\t}", "+\t\t\t}.run();", "+\t\t} catch (Throwable e) {", "+\t\t\treturn throwException(e);", "+\t\t}", "+\t\t", "-\t\treturn notifying(method, link, notifier);", "+\t\treturn link;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd2a655f82dc66b78a2de38046006812", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "57302f0df76fba83ba72a676bd660efeb5881af6", "commitAfterChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(TestMethod method, RunNotifier notifier)", "diff": ["-\tprotected void invokeTestMethod(Method method, RunNotifier notifier) {", "+\tprotected void invokeTestMethod(TestMethod method, RunNotifier notifier) {", "-\t\t\ttest= createTest();", "-\t\t} catch (InvocationTargetException e) { //TODO looks like this could use ExplosiveMethod", "-\t\t\tnotifier.testAborted(description, e.getCause());", "-\t\t\treturn;\t\t\t", "-\t\t} catch (Exception e) {", "+\t\t\ttest= new ReflectiveCallable() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "+\t\t\t\t\treturn createTest();", "+\t\t\t\t}", "+\t\t\t}.run();", "+\t\t} catch (Throwable e) {", "-\t\tJUnit4MethodRunner testMethod= wrapMethod(method);", "-\t\ttestMethod.run(new Roadie(notifier, description, test));", "+\t\trun(new Roadie(notifier, description, test), method);"]}]}
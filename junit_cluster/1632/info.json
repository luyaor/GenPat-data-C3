{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b1cabfba739a1c0ab61c9da128a8fd5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06b398a92555e9b40308ce4c4232971b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprivate void runAfters()", "signatureAfterChange": "      private void runAfters()", "diff": ["-\tprivate void runAfters() {", "-\t\tList<Method> afters= fTestMethod.getAfters();", "-\t\tfor (Method after : afters)", "-\t\t\ttry {", "-\t\t\t\tafter.invoke(fTest);", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\taddFailure(e.getTargetException());", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\taddFailure(e); // Untested, but seems impossible", "-\t\t\t}", "-\t}", "+", "+    private void runAfters() {", "+        List<Method> afters = fTestMethod.getAfters();", "+        for (Method after : afters) {", "+            try {", "+                after.invoke(fTest);", "+            } catch (InvocationTargetException e) {", "+                addFailure(e.getTargetException());", "+            } catch (Throwable e) {", "+                addFailure(e); // Untested, but seems impossible", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f5ef7fefae509c61691ee8745eb452d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t\tvoid run()", "signatureAfterChange": "          void run()", "diff": ["-\t\tvoid run() {", "-\t\t\tsynchronized (fListeners) {", "-\t\t\t\tList<RunListener> safeListeners= new ArrayList<RunListener>();", "-\t\t\t\tList<Failure> failures= new ArrayList<Failure>();", "-\t\t\t\tfor (Iterator<RunListener> all= fCurrentListeners.iterator(); all", "-\t\t\t\t\t\t.hasNext();)", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tRunListener listener= all.next();", "-\t\t\t\t\t\tnotifyListener(listener);", "-\t\t\t\t\t\tsafeListeners.add(listener);", "-\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\tfailures.add(new Failure(Description.TEST_MECHANISM, e));", "-\t\t\t\t\t}", "-\t\t\t\tfireTestFailures(safeListeners, failures);", "-\t\t\t}", "-\t\t}", "+        void run() {", "+            synchronized (fListeners) {", "+                List<RunListener> safeListeners = new ArrayList<RunListener>();", "+                List<Failure> failures = new ArrayList<Failure>();", "+                for (Iterator<RunListener> all = fCurrentListeners.iterator(); all", "+                        .hasNext(); ) {", "+                    try {", "+                        RunListener listener = all.next();", "+                        notifyListener(listener);", "+                        safeListeners.add(listener);", "+                    } catch (Exception e) {", "+                        failures.add(new Failure(Description.TEST_MECHANISM, e));", "+                    }", "+                }", "+                fireTestFailures(safeListeners, failures);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c6622285b47686e6588fb0a8dee6d13", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate Request constructLeafRequest(List<Description> leaves)", "signatureAfterChange": "      private Request constructLeafRequest(List<Description> leaves)", "diff": ["-\tprivate Request constructLeafRequest(List<Description> leaves) {", "-\t\tfinal List<Runner> runners = new ArrayList<Runner>();", "-\t\tfor (Description each : leaves)", "-\t\t\trunners.add(buildRunner(each));", "-\t\treturn new Request() {", "-\t\t\t@Override", "-\t\t\tpublic Runner getRunner() {", "-\t\t\t\ttry {", "-\t\t\t\t\treturn new Suite((Class<?>)null, runners) {};", "-\t\t\t\t} catch (InitializationError e) {", "-\t\t\t\t\treturn new ErrorReportingRunner(null, e);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "-\t}", "+    private Request constructLeafRequest(List<Description> leaves) {", "+        final List<Runner> runners = new ArrayList<Runner>();", "+        for (Description each : leaves) {", "+            runners.add(buildRunner(each));", "+        }", "+        return new Request() {", "+            @Override", "+            public Runner getRunner() {", "+                try {", "+                    return new Suite((Class<?>) null, runners) {", "+                    };", "+                } catch (InitializationError e) {", "+                    return new ErrorReportingRunner(null, e);", "+                }", "+            }", "+        };", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31e408c2317300ae390e943c24ce98d3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tpublic TestSuite (Class<?>... classes)", "signatureAfterChange": "     public TestSuite(Class<?>... classes)", "diff": ["-\t */", "-\tpublic TestSuite (Class<?>... classes) {", "-\t\tfor (Class<?> each : classes)", "-\t\t\taddTest(testCaseForClass(each));", "-\t}", "+     */", "+    public TestSuite(Class<?>... classes) {", "+        for (Class<?> each : classes) {", "+            addTest(testCaseForClass(each));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "394168b7154519c3c755680b393bf65c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/ListTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void testCapacity()", "signatureAfterChange": "      public void testCapacity()", "diff": ["-\t}", "-\tpublic void testCapacity() {", "-\t\tint size= fFull.size(); ", "-\t\tfor (int i= 0; i < 100; i++)", "-\t\t\tfFull.add(new Integer(i));", "-\t\tassertTrue(fFull.size() == 100+size);", "-\t}", "+", "+    public void testCapacity() {", "+        int size = fFull.size();", "+        for (int i = 0; i < 100; i++) {", "+            fFull.add(new Integer(i));", "+        }", "+        assertTrue(fFull.size() == 100 + size);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bcd1fa45727a4fb5059760ee4938aa5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void validate(TestClass target, List<Throwable> errors)", "signatureAfterChange": "     public void validate(TestClass target, List<Throwable> errors)", "diff": ["-\t */", "-\tpublic void validate(TestClass target, List<Throwable> errors) {", "-\t\tList<? extends FrameworkMember<?>> members= fMethods ? target.getAnnotatedMethods(fAnnotation)", "-\t\t\t\t\t\t\t\t\t\t: target.getAnnotatedFields(fAnnotation);", "-\t\t", "-\t\tfor (FrameworkMember<?> each : members)", "-\t\t\tvalidateMember(each, errors);", "-\t}", "+     */", "+    public void validate(TestClass target, List<Throwable> errors) {", "+        List<? extends FrameworkMember<?>> members = fMethods ? target.getAnnotatedMethods(fAnnotation)", "+                : target.getAnnotatedFields(fAnnotation);", "+        for (FrameworkMember<?> each : members) {", "+            validateMember(each, errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c0c0c6cbbc3f095cf176802f611c5e2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Override \tpublic Description getDescription()", "signatureAfterChange": "      @Override     public Description getDescription()", "diff": ["-\t@Override", "-\tpublic Description getDescription() {", "-\t\tDescription spec= Description.createSuiteDescription(getName(), classAnnotations());", "-\t\tList<Method> testMethods= fTestMethods;", "-\t\tfor (Method method : testMethods)", "-\t\t\tspec.addChild(methodDescription(method));", "-\t\treturn spec;", "-\t}", "+    @Override", "+    public Description getDescription() {", "+        Description spec = Description.createSuiteDescription(getName(), classAnnotations());", "+        List<Method> testMethods = fTestMethods;", "+        for (Method method : testMethods) {", "+            spec.addChild(methodDescription(method));", "+        }", "+        return spec;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c7549d912daa1a9a7a15512e00f7582", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/NoGenericTypeParametersValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tvoid validate(List<Throwable> errors)", "signatureAfterChange": "      void validate(List<Throwable> errors)", "diff": ["-\tvoid validate(List<Throwable> errors) {", "-\t\tfor (Type each : fMethod.getGenericParameterTypes())", "-\t\t\tvalidateNoTypeParameterOnType(each, errors);", "-\t}", "+    void validate(List<Throwable> errors) {", "+        for (Type each : fMethod.getGenericParameterTypes()) {", "+            validateNoTypeParameterOnType(each, errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b18f0ad249b2f0ced7797c6baf4e276", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/MoneyBag.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tvoid appendBag(MoneyBag aBag)", "signatureAfterChange": "      void appendBag(MoneyBag aBag)", "diff": ["-\t}", "-\tvoid appendBag(MoneyBag aBag) {", "-\t\tfor (Money each : aBag.fMonies)", "-\t\t\tappendMoney(each);", "-\t}", "+", "+    void appendBag(MoneyBag aBag) {", "+        for (Money each : aBag.fMonies) {", "+            appendMoney(each);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cd94ab11b5c31e8fd0e0864cf72b4a1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/RunBefores.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-\t@Override", "-\tpublic void evaluate() throws Throwable {", "-\t\tfor (FrameworkMethod before : fBefores)", "-\t\t\tbefore.invokeExplosively(fTarget);", "-\t\tfNext.evaluate();", "-\t}", "+    @Override", "+    public void evaluate() throws Throwable {", "+        for (FrameworkMethod before : fBefores) {", "+            before.invokeExplosively(fTarget);", "+        }", "+        fNext.evaluate();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d519012abb801663252643d4fe5b957", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestResult.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic synchronized void addError(Test test, Throwable t)", "signatureAfterChange": "     public synchronized void addError(Test test, Throwable t)", "diff": ["-\t */", "-\tpublic synchronized void addError(Test test, Throwable t) {", "-\t\tfErrors.add(new TestFailure(test, t));", "-\t\tfor (TestListener each : cloneListeners())", "-\t\t\teach.addError(test, t);", "-\t}", "+     */", "+    public synchronized void addError(Test test, Throwable t) {", "+        fErrors.add(new TestFailure(test, t));", "+        for (TestListener each : cloneListeners()) {", "+            each.addError(test, t);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53c2b79d93201b2cf894b5558424c372", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/samples/ListTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@BeforeClass public static void setUpOnce()", "signatureAfterChange": "      @BeforeClass     public static void setUpOnce()", "diff": ["-\t", "-\t@BeforeClass public static void setUpOnce() {", "-\t\tfgHeavy= new ArrayList<Integer>();", "-\t\tfor(int i= 0; i < 1000; i++)", "-\t\t\tfgHeavy.add(i);", "-\t}", "+", "+    @BeforeClass", "+    public static void setUpOnce() {", "+        fgHeavy = new ArrayList<Integer>();", "+        for (int i = 0; i < 1000; i++) {", "+            fgHeavy.add(i);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6b58282f45c006df104234de357e59", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void runBefores() throws FailedBefore", "signatureAfterChange": "      private void runBefores() throws FailedBefore", "diff": ["-\t", "-\tprivate void runBefores() throws FailedBefore {", "-\t\ttry {", "-\t\t\ttry {", "-\t\t\t\tList<Method> befores= fTestMethod.getBefores();", "-\t\t\t\tfor (Method before : befores)", "-\t\t\t\t\tbefore.invoke(fTest);", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\tthrow e.getTargetException();", "-\t\t\t}", "-\t\t} catch (AssumptionViolatedException e) {", "-\t\t\tthrow new FailedBefore();", "-\t\t} catch (Throwable e) {", "-\t\t\taddFailure(e);", "-\t\t\tthrow new FailedBefore();", "-\t\t}", "-\t}", "+", "+    private void runBefores() throws FailedBefore {", "+        try {", "+            try {", "+                List<Method> befores = fTestMethod.getBefores();", "+                for (Method before : befores) {", "+                    before.invoke(fTest);", "+                }", "+            } catch (InvocationTargetException e) {", "+                throw e.getTargetException();", "+            }", "+        } catch (AssumptionViolatedException e) {", "+            throw new FailedBefore();", "+        } catch (Throwable e) {", "+            addFailure(e);", "+            throw new FailedBefore();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6d24d823d2f0a85d5016b8a3723c4c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/RunRules.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static Statement applyAll(Statement result, Iterable<TestRule> rules, \t\t\tDescription description)", "signatureAfterChange": "      private static Statement applyAll(Statement result, Iterable<TestRule> rules,             Description description)", "diff": ["-\tprivate static Statement applyAll(Statement result, Iterable<TestRule> rules,", "-\t\t\tDescription description) {", "-\t\tfor (TestRule each : rules)", "-\t\t\tresult= each.apply(result, description);", "-\t\treturn result;", "-\t}", "+", "+    private static Statement applyAll(Statement result, Iterable<TestRule> rules,", "+            Description description) {", "+        for (TestRule each : rules) {", "+            result = each.apply(result, description);", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7175b42db65734a185dc89bf84ec5a77", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/RunAfters.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "      @Override     public void evaluate() throws Throwable", "diff": ["-\t@Override", "-\tpublic void evaluate() throws Throwable {", "-\t\tList<Throwable> errors = new ArrayList<Throwable>();", "-\t\ttry {", "-\t\t\tfNext.evaluate();", "-\t\t} catch (Throwable e) {", "-\t\t\terrors.add(e);", "-\t\t} finally {", "-\t\t\tfor (FrameworkMethod each : fAfters)", "-\t\t\t\ttry {", "-\t\t\t\t\teach.invokeExplosively(fTarget);", "-\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\terrors.add(e);", "-\t\t\t\t}", "-\t\t}", "-\t\tMultipleFailureException.assertEmpty(errors);", "-\t}", "+", "+    @Override", "+    public void evaluate() throws Throwable {", "+        List<Throwable> errors = new ArrayList<Throwable>();", "+        try {", "+            fNext.evaluate();", "+        } catch (Throwable e) {", "+            errors.add(e);", "+        } finally {", "+            for (FrameworkMethod each : fAfters) {", "+                try {", "+                    each.invokeExplosively(fTarget);", "+                } catch (Throwable e) {", "+                    errors.add(e);", "+                }", "+            }", "+        }", "+        MultipleFailureException.assertEmpty(errors);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7394d61345fefa2cbb50c08dc4cc758f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestResult.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tpublic synchronized void addFailure(Test test, AssertionFailedError t)", "signatureAfterChange": "     public synchronized void addFailure(Test test, AssertionFailedError t)", "diff": ["-\t */", "-\tpublic synchronized void addFailure(Test test, AssertionFailedError t) {", "-\t\tfFailures.add(new TestFailure(test, t));", "-\t\tfor (TestListener each : cloneListeners())", "-\t\t\teach.addFailure(test, t);", "-\t}", "+     */", "+    public synchronized void addFailure(Test test, AssertionFailedError t) {", "+        fFailures.add(new TestFailure(test, t));", "+        for (TestListener each : cloneListeners()) {", "+            each.addFailure(test, t);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8122ea7975e72f1004ad77ce87cb2c32", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/model/EachTestNotifier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate void addMultipleFailureException(MultipleFailureException mfe)", "signatureAfterChange": "      private void addMultipleFailureException(MultipleFailureException mfe)", "diff": ["-\tprivate void addMultipleFailureException(MultipleFailureException mfe) {", "-\t\tfor (Throwable each : mfe.getFailures())", "-\t\t\taddFailure(each);", "-\t}", "+    private void addMultipleFailureException(MultipleFailureException mfe) {", "+        for (Throwable each : mfe.getFailures()) {", "+            addFailure(each);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "834fc95210d9a1bfc0fdc00cf7fdbe2e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/samples/ListTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Ignore(\"not today\") @Test public void capacity()", "signatureAfterChange": "      @Ignore(\"not today\")     @Test     public void capacity()", "diff": ["-\t}", "-\t@Ignore(\"not today\") @Test public void capacity() {", "-\t\tint size= fFull.size(); ", "-\t\tfor (int i= 0; i < 100; i++)", "-\t\t\tfFull.add(i);", "-\t\tassertTrue(fFull.size() == 100+size);", "-\t}", "+", "+    @Ignore(\"not today\")", "+    @Test", "+    public void capacity() {", "+        int size = fFull.size();", "+        for (int i = 0; i < 100; i++) {", "+            fFull.add(i);", "+        }", "+        assertTrue(fFull.size() == 100 + size);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "848668e565e07d9a571446f9f2eb6a47", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic Description getDescription()", "signatureAfterChange": "      @Override     public Description getDescription()", "diff": ["-\t@Override", "-\tpublic Description getDescription() {", "-\t\tDescription description= Description.createSuiteDescription(fTestClass);", "-\t\tfor (Throwable each : fCauses)", "-\t\t\tdescription.addChild(describeCause(each));", "-\t\treturn description;", "-\t}", "+    @Override", "+    public Description getDescription() {", "+        Description description = Description.createSuiteDescription(fTestClass);", "+        for (Throwable each : fCauses) {", "+            description.addChild(describeCause(each));", "+        }", "+        return description;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aaed6e77e34eca0ebe893bbc3f10989", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/tests/runner/TextFeedbackTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate String expected(String[] lines)", "signatureAfterChange": "      private String expected(String[] lines)", "diff": ["-\t", "-\tprivate String expected(String[] lines) {", "-\t\tOutputStream expected= new ByteArrayOutputStream();", "-\t\tPrintStream expectedWriter= new PrintStream(expected);", "-\t\tfor (int i= 0; i < lines.length; i++)", "-\t\t\texpectedWriter.println(lines[i]);", "-\t\treturn expected.toString(); ", "-\t}", "+", "+    private String expected(String[] lines) {", "+        OutputStream expected = new ByteArrayOutputStream();", "+        PrintStream expectedWriter = new PrintStream(expected);", "+        for (int i = 0; i < lines.length; i++) {", "+            expectedWriter.println(lines[i]);", "+        }", "+        return expected.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95451fdc91b63672799ecdc32355e282", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestResult.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tpublic void startTest(Test test)", "signatureAfterChange": "     public void startTest(Test test)", "diff": ["-\t */", "-\tpublic void startTest(Test test) {", "-\t\tfinal int count= test.countTestCases();", "-\t\tsynchronized(this) {", "-\t\t\tfRunTests+= count;", "-\t\t}", "-\t\tfor (TestListener each : cloneListeners())", "-\t\t\teach.startTest(test);", "-\t}", "+     */", "+    public void startTest(Test test) {", "+        final int count = test.countTestCases();", "+        synchronized (this) {", "+            fRunTests += count;", "+        }", "+        for (TestListener each : cloneListeners()) {", "+            each.startTest(test);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96a9adb5b6ea9092910a0a0647eeabe7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/NoGenericTypeParametersValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void validateNoTypeParameterOnParameterizedType(ParameterizedType parameterized, \t\t\tList<Throwable> errors)", "signatureAfterChange": "      private void validateNoTypeParameterOnParameterizedType(ParameterizedType parameterized,             List<Throwable> errors)", "diff": ["-\tprivate void validateNoTypeParameterOnParameterizedType(ParameterizedType parameterized,", "-\t\t\tList<Throwable> errors) {", "-\t\tfor (Type each : parameterized.getActualTypeArguments())", "-\t\t\tvalidateNoTypeParameterOnType(each, errors);", "-\t}", "+    private void validateNoTypeParameterOnParameterizedType(ParameterizedType parameterized,", "+            List<Throwable> errors) {", "+        for (Type each : parameterized.getActualTypeArguments()) {", "+            validateNoTypeParameterOnType(each, errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e159a7ca67fd358ae7963621fc6c901", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ClassRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void runBefores() throws FailedBefore", "signatureAfterChange": "      private void runBefores() throws FailedBefore", "diff": ["-\tprivate void runBefores() throws FailedBefore {", "-\t\ttry {", "-\t\t\ttry {", "-\t\t\t\tList<Method> befores= fTestClass.getBefores();", "-\t\t\t\tfor (Method before : befores)", "-\t\t\t\t\tbefore.invoke(null);", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\tthrow e.getTargetException();", "-\t\t\t}", "-\t\t} catch (org.junit.internal.AssumptionViolatedException e) {", "-\t\t\tthrow new FailedBefore();", "-\t\t} catch (Throwable e) {", "-\t\t\taddFailure(e);", "-\t\t\tthrow new FailedBefore();", "-\t\t}", "-\t}", "+", "+    private void runBefores() throws FailedBefore {", "+        try {", "+            try {", "+                List<Method> befores = fTestClass.getBefores();", "+                for (Method before : befores) {", "+                    before.invoke(null);", "+                }", "+            } catch (InvocationTargetException e) {", "+                throw e.getTargetException();", "+            }", "+        } catch (org.junit.internal.AssumptionViolatedException e) {", "+            throw new FailedBefore();", "+        } catch (Throwable e) {", "+            addFailure(e);", "+            throw new FailedBefore();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aad20a0a40c3ded8060116e419a6717a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ClassRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void runAfters()", "signatureAfterChange": "      private void runAfters()", "diff": ["-\tprivate void runAfters() {", "-\t\tList<Method> afters= fTestClass.getAfters();", "-\t\tfor (Method after : afters)", "-\t\t\ttry {", "-\t\t\t\tafter.invoke(null);", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\taddFailure(e.getTargetException());", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\taddFailure(e); // Untested, but seems impossible", "-\t\t\t}", "-\t}", "+", "+    private void runAfters() {", "+        List<Method> afters = fTestClass.getAfters();", "+        for (Method after : afters) {", "+            try {", "+                after.invoke(null);", "+            } catch (InvocationTargetException e) {", "+                addFailure(e.getTargetException());", "+            } catch (Throwable e) {", "+                addFailure(e); // Untested, but seems impossible", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad3e031d71af31736704cf08aad020c0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/tests/extensions/ActiveTestTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tActiveTestSuite createActiveTestSuite()", "signatureAfterChange": "      ActiveTestSuite createActiveTestSuite()", "diff": ["-\tActiveTestSuite createActiveTestSuite() {", "-\t\tActiveTestSuite suite= new ActiveTestSuite();", "-\t\tfor (int i= 0; i < 100; i++) ", "-\t\t\tsuite.addTest(new SuccessTest());", "-\t\treturn suite;", "-\t}", "+", "+    ActiveTestSuite createActiveTestSuite() {", "+        ActiveTestSuite suite = new ActiveTestSuite();", "+        for (int i = 0; i < 100; i++) {", "+            suite.addTest(new SuccessTest());", "+        }", "+        return suite;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b10e1379fc6950ff3e27a63518ea68d8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate void addArrayValues(String name, List<PotentialAssignment> list, Object array)", "signatureAfterChange": "      private void addArrayValues(String name, List<PotentialAssignment> list, Object array)", "diff": ["-\tprivate void addArrayValues(String name, List<PotentialAssignment> list, Object array) {", "-\t\tfor (int i= 0; i < Array.getLength(array); i++)", "-\t\t\tlist.add(PotentialAssignment.forValue(name + \"[\" + i + \"]\", Array.get(array, i)));", "-\t}", "+    private void addArrayValues(String name, List<PotentialAssignment> list, Object array) {", "+        for (int i = 0; i < Array.getLength(array); i++) {", "+            list.add(PotentialAssignment.forValue(name + \"[\" + i + \"]\", Array.get(array, i)));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b20a464de0f54da3e7a5e434983f16b3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprotected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, \t\t\tboolean isStatic, List<Throwable> errors)", "signatureAfterChange": "     protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation,             boolean isStatic, List<Throwable> errors)", "diff": ["-\t */", "-\tprotected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation,", "-\t\t\tboolean isStatic, List<Throwable> errors) {", "-\t\tList<FrameworkMethod> methods= getTestClass().getAnnotatedMethods(annotation);", "-\t\tfor (FrameworkMethod eachTestMethod : methods)", "-\t\t\teachTestMethod.validatePublicVoidNoArg(isStatic, errors);", "-\t}", "+     */", "+    protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation,", "+            boolean isStatic, List<Throwable> errors) {", "+        List<FrameworkMethod> methods = getTestClass().getAnnotatedMethods(annotation);", "+        for (FrameworkMethod eachTestMethod : methods) {", "+            eachTestMethod.validatePublicVoidNoArg(isStatic, errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b67a41a0c8cdc01fb43dec60f4ef9d6a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic void sort(Sorter sorter)", "signatureAfterChange": "      public void sort(Sorter sorter)", "diff": ["-\tpublic void sort(Sorter sorter) {", "-\t\tfSorter= sorter;", "-\t\tfor (T each : getFilteredChildren())", "-\t\t\tsortChild(each);", "-\t\tCollections.sort(getFilteredChildren(), comparator());", "-\t}", "+", "+    public void sort(Sorter sorter) {", "+        fSorter = sorter;", "+        for (T each : getFilteredChildren()) {", "+            sortChild(each);", "+        }", "+        Collections.sort(getFilteredChildren(), comparator());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b95372da577acc03e75a6315412fbb4f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-\tprivate void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) {", "-\t\tfor (FrameworkMethod dataPointsMethod : fClass", "-\t\t\t\t.getAnnotatedMethods(DataPoints.class))", "-\t\t\ttry {", "-\t\t\t\taddMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\t// ignore and move on", "-\t\t\t}", "-\t}", "+    private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) {", "+        for (FrameworkMethod dataPointsMethod : fClass", "+                .getAnnotatedMethods(DataPoints.class)) {", "+            try {", "+                addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "+            } catch (Throwable e) {", "+                // ignore and move on", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b99692826c6f0cc59341e8b21598252e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \t@Override \tpublic Description getDescription()", "signatureAfterChange": "      @Override     public Description getDescription()", "diff": ["-\t", "-\t@Override", "-\tpublic Description getDescription() {", "-\t\tDescription description= Description.createSuiteDescription(getName(),", "-\t\t\t\tgetRunnerAnnotations());", "-\t\tfor (T child : getFilteredChildren())", "-\t\t\tdescription.addChild(describeChild(child));", "-\t\treturn description;", "-\t}", "+    @Override", "+    public Description getDescription() {", "+        Description description = Description.createSuiteDescription(getName(),", "+                getRunnerAnnotations());", "+        for (T child : getFilteredChildren()) {", "+            description.addChild(describeChild(child));", "+        }", "+        return description;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf1a4c9170377fa72467700a9e59e992", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/MoneyBag.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic IMoney negate()", "signatureAfterChange": "      public IMoney negate()", "diff": ["-\t}", "-\tpublic IMoney negate() {", "-\t\tMoneyBag result= new MoneyBag();", "-\t    for (Money each : fMonies)", "-\t        result.appendMoney((Money) each.negate());", "-\t\treturn result;", "-\t}", "+", "+    public IMoney negate() {", "+        MoneyBag result = new MoneyBag();", "+        for (Money each : fMonies) {", "+            result.appendMoney((Money) each.negate());", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfeb200f869ad9787590feae2c3153e6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprivate void runChildren(final RunNotifier notifier)", "signatureAfterChange": "      private void runChildren(final RunNotifier notifier)", "diff": ["-\tprivate void runChildren(final RunNotifier notifier) {", "-\t\tfor (final T each : getFilteredChildren())", "- \t\t\tfScheduler.schedule(new Runnable() {\t\t\t", "-\t\t\t\tpublic void run() {", "-\t\t\t\t\tParentRunner.this.runChild(each, notifier);", "-\t\t\t\t}", "-\t\t\t});", "-\t\tfScheduler.finished();", "-\t}", "+    private void runChildren(final RunNotifier notifier) {", "+        for (final T each : getFilteredChildren()) {", "+            fScheduler.schedule(new Runnable() {", "+                public void run() {", "+                    ParentRunner.this.runChild(each, notifier);", "+                }", "+            });", "+        }", "+        fScheduler.finished();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc800ac48a3acb364d9d4b5a5b1d085e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprotected void runMethods(final RunNotifier notifier)", "signatureAfterChange": "      protected void runMethods(final RunNotifier notifier)", "diff": ["-\tprotected void runMethods(final RunNotifier notifier) {", "-\t\tfor (Method method : fTestMethods)", "-\t\t\tinvokeTestMethod(method, notifier);", "-\t}", "+    protected void runMethods(final RunNotifier notifier) {", "+        for (Method method : fTestMethods) {", "+            invokeTestMethod(method, notifier);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cebdd075f829651f24f2cdbff47e9656", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/MoneyBag.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t@Override \tpublic int hashCode()", "signatureAfterChange": "      @Override     public int hashCode()", "diff": ["-\t}", "-\t@Override", "-\tpublic int hashCode() {", "-\t\tint hash= 0;", "-\t    for (Money each : fMonies)", "-\t        hash^= each.hashCode();", "-\t    return hash;", "-\t}", "+", "+    @Override", "+    public int hashCode() {", "+        int hash = 0;", "+        for (Money each : fMonies) {", "+            hash ^= each.hashCode();", "+        }", "+        return hash;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf3219ec49b3843a90b8690b4eae0fb5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/RuleChain.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic Statement apply(Statement base, Description description)", "signatureAfterChange": "     public Statement apply(Statement base, Description description)", "diff": ["-\t */", "-\tpublic Statement apply(Statement base, Description description) {", "-\t\tfor (TestRule each : rulesStartingWithInnerMost)", "-\t\t\tbase= each.apply(base, description);", "-\t\treturn base;", "-\t}", "+     */", "+    public Statement apply(Statement base, Description description) {", "+        for (TestRule each : rulesStartingWithInnerMost) {", "+            base = each.apply(base, description);", "+        }", "+        return base;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e06ca06903ce0958d545a475a8f4a2f0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \tpublic int countTestCases()", "signatureAfterChange": "     public int countTestCases()", "diff": ["-\t */", "-\tpublic int countTestCases() {", "-\t\tint count= 0;", "-\t\tfor (Test each : fTests)", "-\t\t\tcount+=  each.countTestCases();", "-\t\treturn count;", "-\t}", "+     */", "+    public int countTestCases() {", "+        int count = 0;", "+        for (Test each : fTests) {", "+            count += each.countTestCases();", "+        }", "+        return count;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0d8832f7ecbbddd418b345485088d02", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "bbbb8571f1a3cdcb9af977867c7a16de3a1f5a76", "commitAfterChange": "d96a05f8d33ed781c701c58dd285bf6464112719", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private Thread[] copyThreads(Thread[] threads, int count)", "signatureAfterChange": "     private Thread[] copyThreads(Thread[] threads, int count)", "diff": ["-        for (int i = 0; i < length; i++)", "+        for (int i = 0; i < length; i++) {", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1e476ce7816adeeeac0be949dd84934", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestResult.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void endTest(Test test)", "signatureAfterChange": "     public void endTest(Test test)", "diff": ["-\t */", "-\tpublic void endTest(Test test) {", "-\t\tfor (TestListener each : cloneListeners())", "-\t\t\teach.endTest(test);", "-\t}", "+     */", "+    public void endTest(Test test) {", "+        for (TestListener each : cloneListeners()) {", "+            each.endTest(test);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5fa41399867dcb10bb73ee92d7240f7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\t@Override \t\tprotected void handleAssumptionViolation(AssumptionViolatedException e)", "signatureAfterChange": "          @Override         protected void handleAssumptionViolation(AssumptionViolatedException e)", "diff": ["-\t\t@Override", "-\t\tprotected void handleAssumptionViolation(AssumptionViolatedException e) {", "-\t\t\tsuper.handleAssumptionViolation(e);", "-\t\t\tfor (GuesserQueue queue : queues)", "-\t\t\t\tqueue.update(e);", "-\t\t}", "+        @Override", "+        protected void handleAssumptionViolation(AssumptionViolatedException e) {", "+            super.handleAssumptionViolation(e);", "+            for (GuesserQueue queue : queues) {", "+                queue.update(e);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f84234d61e87e313079953216cc597c2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/ForwardCompatibilityPrintingTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprivate String expected(String[] lines)", "signatureAfterChange": "      private String expected(String[] lines)", "diff": ["-\tprivate String expected(String[] lines) {", "-\t\tOutputStream expected= new ByteArrayOutputStream();", "-\t\tPrintStream expectedWriter= new PrintStream(expected);", "-\t\tfor (int i= 0; i < lines.length; i++)", "-\t\t\texpectedWriter.println(lines[i]);", "-\t\treturn expected.toString();", "-\t}", "+", "+    private String expected(String[] lines) {", "+        OutputStream expected = new ByteArrayOutputStream();", "+        PrintStream expectedWriter = new PrintStream(expected);", "+        for (int i = 0; i < lines.length; i++) {", "+            expectedWriter.println(lines[i]);", "+        }", "+        return expected.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fccc70d04f58588d12dceebacad5f977", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/MoneyBag.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t@Override \tpublic String toString()", "signatureAfterChange": "      @Override     public String toString()", "diff": ["-\t}", "-\t@Override", "-\tpublic String toString() {", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tbuffer.append(\"{\");", "-\t\tfor (Money each : fMonies)", "-\t\t    buffer.append(each);", "-\t\tbuffer.append(\"}\");", "-\t\treturn buffer.toString();", "-\t}", "+", "+    @Override", "+    public String toString() {", "+        StringBuffer buffer = new StringBuffer();", "+        buffer.append(\"{\");", "+        for (Money each : fMonies) {", "+            buffer.append(each);", "+        }", "+        buffer.append(\"}\");", "+        return buffer.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fea11ba20e847e65af1c44684c67cc01", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic void run(RunNotifier notifier)", "signatureAfterChange": "      @Override     public void run(RunNotifier notifier)", "diff": ["-\t@Override", "-\tpublic void run(RunNotifier notifier) {", "-\t\tfor (Throwable each : fCauses)", "-\t\t\trunCause(each, notifier);", "-\t}", "+    @Override", "+    public void run(RunNotifier notifier) {", "+        for (Throwable each : fCauses) {", "+            runCause(each, notifier);", "+        }", "+    }"]}]}
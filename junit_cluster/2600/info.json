{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa18a53ee3b6b76d5dff9fd3bf3c0c53", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f4db09a6c3d00c3dff77e85c6646ec8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "979e8abbe974e8847668f5887403da78a6165ebc", "commitAfterChange": "1fcd990f60518c941a44bae2596392021614a20b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected Statement classBlock(final RunNotifier notifier)", "signatureAfterChange": " \tprotected Statement classBlock(final RunNotifier notifier)", "diff": ["+\t */", "+\t\tStatement statement= childrenInvoker(notifier);", "+\t\tstatement= withBeforeClasses(statement);", "+\t\tstatement= withAfterClasses(statement);", "+\t\treturn statement;", "+\t}", "-\t\t\t\t.getAnnotatedMethods(BeforeClass.class);", "-\t\tList<FrameworkMethod> afters= fTestClass", "-\t\t\t\t.getAnnotatedMethods(AfterClass.class);", "-\t\tStatement statement= runChildren(notifier);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f708e94ff48cab694b87c723b38479d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "971c9a52281458375af79e303449fe22bf91feab", "commitAfterChange": "97402a3401c6cc2d45d395c0d9d636f483b5571c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected Statement withAfterClasses(Statement statement)", "signatureAfterChange": " \tprotected Statement withAfterClasses(Statement statement)", "diff": ["-\t\tList<FrameworkMethod> afters= getTestClass().getAnnotatedMethods(", "-\t\t\t\tAfterClass.class);", "-\t\treturn afters.isEmpty() ? statement : new RunAfters(statement, afters,", "-\t\t\t\tnull);", "+\t\tList<FrameworkMethod> afters= fTestClass", "+\t\t\t\t.getAnnotatedMethods(AfterClass.class);", "+\t\treturn afters.isEmpty() ? statement : ", "+\t\t\tnew RunAfters(statement, afters, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "528830b91265e953b5b18ada20eb8f17", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "496ee866a46f783d145b649a688df57cbf79490e", "commitAfterChange": "5f7fddf537e551109ffd6241a00c87a2b3521523", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected Statement withAfterClasses(Statement statement)", "signatureAfterChange": " \tprotected Statement withAfterClasses(Statement statement)", "diff": ["-\t\tList<FrameworkMethod> afters= getTestClass().getAnnotatedMethods(", "-\t\t\t\tAfterClass.class);", "-\t\treturn afters.isEmpty() ? statement : new RunAfters(statement, afters,", "-\t\t\t\tnull);", "+\t\tList<FrameworkMethod> afters= fTestClass", "+\t\t\t\t.getAnnotatedMethods(AfterClass.class);", "+\t\treturn afters.isEmpty() ? statement : ", "+\t\t\tnew RunAfters(statement, afters, null);"]}]}
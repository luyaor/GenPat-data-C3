{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1037a9dcf31a47faa58c8d2f5bd40589", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18aa9380aef6829c64dcbd3162d0ebc4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/FilterFactoryParams.java", "commitBeforeChange": "0a9a389570a171b67c3155d312f2e90bdab5aaaf", "commitAfterChange": "318adee43493447e22bbea89e0f17260e0186a14", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Filter apply(String filterFactoryFqcn)             throws FilterFactory.FilterNotCreatedException, FilterFactoryFactory.FilterFactoryNotFoundException", "signatureAfterChange": "     public Filter apply(String filterFactoryFqcn)             throws FilterFactory.FilterNotCreatedException, FilterFactoryNotCreatedException", "diff": ["+     */", "-            throws FilterFactory.FilterNotCreatedException, FilterFactoryFactory.FilterFactoryNotFoundException {", "+            throws FilterFactory.FilterNotCreatedException, FilterFactoryNotCreatedException {", "-            return apply(Class.forName(filterFactoryFqcn, true, Thread.currentThread().getContextClassLoader())", "+            FilterFactory filterFactory = ClassUtil.getClass(filterFactoryFqcn)", "-                    .newInstance());", "+                    .newInstance();", "+", "+            return apply(filterFactory);", "+        } catch (FilterFactory.FilterNotCreatedException e) {", "+            throw e;", "-            throw new FilterFactoryFactory.FilterFactoryNotFoundException(e.getMessage());", "+            throw new FilterFactoryNotCreatedException(e.getMessage());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40fea76674ec7d151040f195576d90aa", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/FilterFactoryFactory.java", "commitBeforeChange": "196c4ed79cbaca37709643b54913b361b677ae04", "commitAfterChange": "0a9a389570a171b67c3155d312f2e90bdab5aaaf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private FilterFactory create(final String filterFactoryFqcn) throws FilterFactoryNotFoundException", "signatureAfterChange": "      public Filter createFilter(Class<? extends FilterFactory> filterFactoryClass, FilterFactoryParams args)             throws FilterFactory.FilterNotCreatedException, FilterFactoryNotFoundException", "diff": ["-    private FilterFactory create(final String filterFactoryFqcn) throws FilterFactoryNotFoundException {", "-        try {", "-            final Class<? extends FilterFactory> filterFactoryClass =", "-                    (Class<? extends FilterFactory>) Class.forName(filterFactoryFqcn);", "+    public Filter createFilter(Class<? extends FilterFactory> filterFactoryClass, FilterFactoryParams args)", "+            throws FilterFactory.FilterNotCreatedException, FilterFactoryNotFoundException {", "+        return createFilter(filterFactoryClass.getName(), args);", "+    }", "-            return filterFactoryClass.getConstructor().newInstance();", "-        } catch (final Exception e) {", "-            throw new FilterFactoryNotFoundException(e.getMessage());", "-        }"]}]}
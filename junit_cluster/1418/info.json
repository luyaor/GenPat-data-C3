{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "118797600045c1e14d97f36b8f482c14", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae32fce2fe346f39a56cab9afa3b0990", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "cde32fb62ad8f5a05d700ce3189e131fa51739cb", "commitAfterChange": "4f405a49eba4822fbdda0c9415d2dc4fd82fb14b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \t@Override \tpublic List<PotentialAssignment> getValueSources(ParameterSignature sig)", "signatureAfterChange": "  \t@Override \tpublic List<PotentialAssignment> getValueSources(ParameterSignature sig)", "diff": ["-\t", "+", "-\t\tfor (final Method method : fClass.getMethods()) {", "-\t\t\tif ((method.getParameterTypes().length == 0 && sig.getType()", "-\t\t\t\t\t.isAssignableFrom(method.getReturnType()))", "-\t\t\t\t\t&& method.isAnnotationPresent(DataPoint.class)) {", "-\t\t\t\tlist.add(new MethodParameterValue(method));", "-\t\t\t} else if (method.isAnnotationPresent(DataPoints.class)) {", "-\t\t\t\ttry {", "-\t\t\t\t\taddArrayValues(list, method.invoke(null));", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t// ignore and move on", "-\t\t\t\t}", "+\t\t// TODO: (Jan 25, 2008 8:32:47 AM) extract these", "+", "+\t\tfor (FrameworkMethod dataPointMethod : fClass", "+\t\t\t\t.getAnnotatedMethods(DataPoint.class))", "+\t\t\tif ((dataPointMethod.getParameterTypes().length == 0 && sig", "+\t\t\t\t\t.getType()", "+\t\t\t\t\t.isAssignableFrom(dataPointMethod.getReturnType())))", "+\t\t\t\tlist.add(new MethodParameterValue(dataPointMethod.getMethod()));", "+", "+\t\tfor (FrameworkMethod dataPointsMethod : fClass", "+\t\t\t\t.getAnnotatedMethods(DataPoints.class))", "+\t\t\ttry {", "+\t\t\t\taddArrayValues(list, dataPointsMethod.invokeExplosively(null));", "+\t\t\t} catch (Throwable e) {", "+\t\t\t\t// ignore and move on", "-\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5e2465372f8ca207b600660a2ef43d3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "752727de89a6bab731f49597c7ec3858ebb3e0a3", "commitAfterChange": "5042f695491027730cca2918616399d869de3973", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@Override \tpublic List<PotentialAssignment> getValueSources(ParameterSignature sig)", "signatureAfterChange": "  \t@Override \tpublic List<PotentialAssignment> getValueSources(ParameterSignature sig)", "diff": ["-\t\tfor (final Field field : fClass.getFields()) {", "-\t\t\tif (Modifier.isStatic(field.getModifiers())) {", "-\t\t\t\tClass<?> type= field.getType();", "-\t\t\t\tif (sig.canAcceptArrayType(type) && field.getAnnotation(DataPoints.class) != null) {", "-\t\t\t\t\taddArrayValues(list, getStaticFieldValue(field));", "-\t\t\t\t} else if (sig.canAcceptType(type)) {", "-\t\t\t\t\tlist.add(PotentialAssignment", "-\t\t\t\t\t\t\t.forValue(getStaticFieldValue(field)));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t// TODO: (Jan 25, 2008 8:32:47 AM) extract these", "+\t\taddFields(sig, list);", "+\t\taddSinglePointMethods(sig, list);", "+\t\taddMultiPointMethods(list);", "-\t\tfor (FrameworkMethod dataPointMethod : fClass", "-\t\t\t\t.getAnnotatedMethods(DataPoint.class))", "-\t\t\tif ((dataPointMethod.getParameterTypes().length == 0 && sig", "-\t\t\t\t\t.getType()", "-\t\t\t\t\t.isAssignableFrom(dataPointMethod.getReturnType())))", "-\t\t\t\tlist.add(new MethodParameterValue(dataPointMethod.getMethod()));", "+\t\treturn list;", "+\t}", "-\t\treturn list;"]}]}
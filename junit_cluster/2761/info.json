{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f6736808caaf9994c3b94f5e7394ae8f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39ac93ed0efa483d68b9ac4854475bae", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "a4c68872a91681139d404825c2bb04bd5ba804dd", "commitAfterChange": "f0ef837a40922ac08c608661385abf71732975d3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete, EachTestNotifier notifier) \t\t\t\tthrows InstantiationException, IllegalAccessException, \t\t\t\tInvocationTargetException, NoSuchMethodException, Throwable", "signatureAfterChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete, final FailureListener listener) \t\t\t\tthrows Throwable", "diff": ["-\t\tprotected void runWithCompleteAssignment(final Assignments complete, EachTestNotifier notifier)", "-\t\t\t\tthrows InstantiationException, IllegalAccessException,", "-\t\t\t\tInvocationTargetException, NoSuchMethodException, Throwable {", "-\t\t\ttry {", "-\t\t\t\tfinal Object freshInstance= createTest();", "-\t\t\t\tnew WithBeforeAndAfter(new Link() {", "-\t\t\t\t\t@Override", "-\t\t\t\t\tpublic void run(EachTestNotifier context) throws Throwable {", "-\t\t\t\t\t\t\tinvokeWithActualParameters(freshInstance, complete);", "+\t\tprotected void runWithCompleteAssignment(final Assignments complete, final FailureListener listener)", "+\t\t\t\tthrows Throwable {", "+\t\t\tfinal Object freshInstance= createTest();", "+\t\t\tnew WithBeforeAndAfter(new Link() {", "+\t\t\t\t@Override", "+\t\t\t\tpublic void run(FailureListener listener) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tinvokeWithActualParameters(freshInstance, complete);", "+\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\tlistener.addFailure(e);", "-\t\t\t\t}, fTestMethod, freshInstance).run(notifier); ", "-\t\t\t} catch (CouldNotGenerateValueException e) {", "-\t\t\t\t// Do nothing", "-\t\t\t}", "+\t\t\t\t}", "+\t\t\t}, fTestMethod, freshInstance).run(new FailureListener() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected void handleFailure(Throwable error) {", "+\t\t\t\t\tif (!(error instanceof CouldNotGenerateValueException))", "+\t\t\t\t\t\tlistener.addFailure(error);", "+\t\t\t\t}", "+\t\t\t}); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7ff48206febe42f0cc124be17b7d3d5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/links/ExpectingException.java", "commitBeforeChange": "a4c68872a91681139d404825c2bb04bd5ba804dd", "commitAfterChange": "f0ef837a40922ac08c608661385abf71732975d3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@Override \tpublic void run(EachTestNotifier context)", "signatureAfterChange": "  \t@Override \tpublic void run(final FailureListener listener)", "diff": ["-\t", "+", "-\tpublic void run(EachTestNotifier context) {", "-\t\ttry {", "-\t\t\tfNext.run(context);", "-\t\t\tcontext.addFailure(new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t+ fExpected.getName()));", "-\t\t} catch (Throwable e) {", "-\t\t\tif (!fExpected.isAssignableFrom(e.getClass())) {", "-\t\t\t\tString message= \"Unexpected exception, expected<\"", "+\tpublic void run(final FailureListener listener) {", "+\t\tFailureListener expectingListener= new FailureListener() {", "+\t\t\t@Override", "+\t\t\tpublic void handleFailure(Throwable error) {", "+\t\t\t\tif (!fExpected.isAssignableFrom(error.getClass())) {", "+\t\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "-\t\t\t\tcontext.addFailure(new Exception(message, e));", "+\t\t\t\t\t\t\t+ error.getClass().getName() + \">\";", "+\t\t\t\t\tlistener.addFailure(new Exception(message, error));", "+\t\t\t\t}", "-\t\t}", "+\t\t};", "+\t\t", "+\t\tfNext.run(expectingListener);", "+\t\t", "+\t\tif (!expectingListener.failureSeen())", "+\t\t\tlistener.addFailure(new AssertionError(\"Expected exception: \"", "+\t\t\t\t\t+ fExpected.getName()));"]}]}
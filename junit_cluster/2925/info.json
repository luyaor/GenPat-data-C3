{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eeb456a2151f104fc958d0a6d4dabbd1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c6d6d8680487d3d9580ad29b0e60bc0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "8672a83f51b183c756649a423b908271c894b8df", "commitAfterChange": "0215c66179ed2c04da2e53f67aefc97b6db5782a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "signatureAfterChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "diff": ["-\t\t\tObject testClassInstance = null;", "-\t\t\tList<FrameworkField> fields = getTestClass().getAnnotatedFields(Parameter.class);", "-\t\t\tif (!fields.isEmpty()) {", "-\t\t\t\tif (fields.size() != fParameters.length)", "-\t\t\t\t\tthrow new Exception(\"Wrong number of parameters and @parameter fields.\"+", "-\t\t\t\t\t\" @Parameter fields counted: \"+fields.size()+\", available parameters: \"+fParameters.length+\".\");", "-\t\t\t\ttestClassInstance = getTestClass().getJavaClass().newInstance();", "-\t\t\t\tfor (FrameworkField f : fields) {", "-\t\t\t\t\tField field = f.getField();", "-\t\t\t\t\tParameter annot = field.getAnnotation(Parameter.class);", "-\t\t\t\t\tint index = annot.value();", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfield.set(testClassInstance,  fParameters[index]);", "-\t\t\t\t\t} catch(IllegalArgumentException iare) {", "-\t\t\t\t\t\tthrow new Exception(getTestClass().getName() + \": Trying to set \"+field.getName()+", "-\t\t\t\t\t\t\" with the value \"+fParameters[index]+", "-\t\t\t\t\t\t\" that is not the right type (\"+fParameters[index].getClass().getSimpleName()+\" instead of \"+", "-\t\t\t\t\t\tfield.getType().getSimpleName()+\").\", iare);", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\tif (fieldsAreAnnotated()) {", "+\t\t\t\treturn createTestUsingFieldInjection();", "-\t\t\t\ttestClassInstance = getTestClass().getOnlyConstructor().newInstance(fParameters);", "+\t\t\t\treturn createTestUsingConstructorInjection();", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfe15d97c641a43e94fc3d9404628985", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "6a8215ab69317916807f246daef80a9d4cf5dc8e", "commitAfterChange": "cbf46b88c2937aece7018fa50ba4dbb133e03d06", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "signatureAfterChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "diff": ["-\t\t\treturn getTestClass().getOnlyConstructor().newInstance(fParameters);", "+\t\t\tObject testClassInstance = null;", "+\t\t\tList<FrameworkField> fields = getTestClass().getAnnotatedFields(Parameter.class);", "+\t\t\tif (!fields.isEmpty()) {", "+\t\t\t\tif (fields.size() != fParameters.length)", "+\t\t\t\t\tthrow new Exception(\"Wrong number of parameters and @parameter fields. @parameter fields counted: \"+fields.size()+\", available parameters: \"+fParameters.length+\".\");", "+\t\t\t\ttestClassInstance = getTestClass().getJavaClass().newInstance();", "+\t\t\t\tfor (FrameworkField f : fields) {", "+\t\t\t\t\tField field = f.getField();", "+\t\t\t\t\tParameter annot = field.getAnnotation(Parameter.class);", "+\t\t\t\t\tint index = annot.value();", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfield.set(testClassInstance,  fParameters[index]);", "+\t\t\t\t\t} catch(IllegalArgumentException iare) {", "+\t\t\t\t\t\tthrow new Exception(getTestClass().getName() + \": Trying to set \"+field.getName()+\" with the value \"+fParameters[index]+\" that is not the right type (\"+fParameters[index].getClass().getSimpleName()+\" instead of \"+field.getType().getSimpleName()+\").\", iare);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\ttestClassInstance = getTestClass().getOnlyConstructor().newInstance(fParameters);", "+\t\t\t}", "+\t\t\treturn testClassInstance;"]}]}
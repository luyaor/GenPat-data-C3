{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54e8ebdc0839a6f960da8d9edf378621", "detectedBy": ["DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "015d4ddd2ebce65bc90bcc5a7aca1309", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/runner/FilterFactoryFactoryTest.java", "commitBeforeChange": "34336085d5aba69c997f8e6b244531561afebcd4", "commitAfterChange": "15c6048229bd16c4bfdd80b23f37357a58226d20", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      @Test     public void shouldCreateFilter() throws Exception", "signatureAfterChange": "\r \r     @Test\r     public void shouldCreateFilter() throws Exception", "diff": ["-", "-    @Test", "-    public void shouldCreateFilter() throws Exception {", "-        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-        Filter filter = filterFactoryFactory.createFilter(FilterFactoryStub.class, new NoFilterFactoryParams());", "-", "-        assertThat(filter, instanceOf(DummyFilter.class));", "-    }", "+\r", "+    @Test\r", "+    public void shouldCreateFilter() throws Exception {\r", "+        Filter filter = filterFactoryFactory.createFilter(FilterFactoryStub.class, new NoFilterFactoryParams());\r", "+\r", "+        assertThat(filter, instanceOf(DummyFilter.class));\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9147af2272b2a0cce17d6d2d9ea8a624", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/runner/FilterFactoryFactoryTest.java", "commitBeforeChange": "34336085d5aba69c997f8e6b244531561afebcd4", "commitAfterChange": "15c6048229bd16c4bfdd80b23f37357a58226d20", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Test     public void shouldCreateFilterWithNoArguments() throws Exception", "signatureAfterChange": "\r \r     @Test\r     public void shouldCreateFilterWithNoArguments() throws Exception", "diff": ["-", "-    @Test", "-    public void shouldCreateFilterWithNoArguments() throws Exception {", "-        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-        Filter filter = filterFactoryFactory.createFilterFromFilterSpec(FilterFactoryStub.class.getName());", "-", "-        assertThat(filter, instanceOf(DummyFilter.class));", "-    }", "+\r", "+    @Test\r", "+    public void shouldCreateFilterWithNoArguments() throws Exception {\r", "+        Filter filter = filterFactoryFactory.createFilterFromFilterSpec(FilterFactoryStub.class.getName());\r", "+\r", "+        assertThat(filter, instanceOf(DummyFilter.class));\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb29e184bafebe1520cdf4b4c3fb148c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/runner/FilterFactoryFactoryTest.java", "commitBeforeChange": "34336085d5aba69c997f8e6b244531561afebcd4", "commitAfterChange": "15c6048229bd16c4bfdd80b23f37357a58226d20", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     @Test     public void shouldCreateFilterWithArguments() throws Exception", "signatureAfterChange": "\r \r     @Test\r     public void shouldCreateFilterWithArguments() throws Exception", "diff": ["-public class FilterFactoryFactoryTest {", "-    @Test", "-    public void shouldCreateFilterWithArguments() throws Exception {", "-        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-        Filter filter = filterFactoryFactory.createFilterFromFilterSpec(", "-                ExcludeCategories.class.getName() + \"=\" + DummyCategory.class.getName());", "-", "-        assertThat(filter.describe(), startsWith(\"excludes \"));", "-    }", "+\r", "+    @Test\r", "+    public void shouldCreateFilterWithArguments() throws Exception {\r", "+        Filter filter = filterFactoryFactory.createFilterFromFilterSpec(\r", "+                ExcludeCategories.class.getName() + \"=\" + DummyCategory.class.getName());\r", "+\r", "+        assertThat(filter.describe(), startsWith(\"excludes \"));\r", "+    }\r"]}]}
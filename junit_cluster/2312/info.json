{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2de040783b0d6fd24cc785cf1f80c736", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09eddbc33fa909106dada6feac4d593c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/validator/AnnotationValidatorFactory.java", "commitBeforeChange": "15566c4b6633db5cc84cae78088b36346b7d42f4", "commitAfterChange": "9d3821f6411ad85a683b8d38e4d42411229f2eec", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAnnotation)", "signatureAfterChange": "     public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAnnotation)", "diff": ["-        AnnotationValidator validator = fAnnotationTypeToValidatorMap.get(validateWithAnnotation);", "+        AnnotationValidator validator = VALIDATORS_FOR_ANNOTATION_TYPES.get(validateWithAnnotation);", "-            fAnnotationTypeToValidatorMap.putIfAbsent(validateWithAnnotation, annotationValidator);", "-            return fAnnotationTypeToValidatorMap.get(validateWithAnnotation);", "+            VALIDATORS_FOR_ANNOTATION_TYPES.putIfAbsent(validateWithAnnotation, annotationValidator);", "+            return VALIDATORS_FOR_ANNOTATION_TYPES.get(validateWithAnnotation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6ce5712ad789d1c32bbbb50b4934e54", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "e02beea07c6d3798e2db532d6c7cebe6cc21f30d", "commitAfterChange": "df88873d5013e400489550cf15e9b51dc438eb4b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnClass(List<Throwable> errors)", "diff": ["-            AnnotationValidator annotationValidator = createAnnotationValidator(validateWithAnnotation);", "-            errors.addAll(annotationValidator.validateAnnotatedClass(getTestClass().getJavaClass()));", "+            if (validateWithAnnotation != null) {", "+                AnnotationValidator annotationValidator =", "+                        fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+                errors.addAll(annotationValidator.validateAnnotatedClass(getTestClass().getJavaClass()));", "+            }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb6cbee1b89b3cddad3384e6cfd35d4b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5629bd13aa5e02cbc2de39e5c8db1ba6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "74f32863f4ec20f015bd3b1a4300c93a69ce98ba", "commitAfterChange": "196c4ed79cbaca37709643b54913b361b677ae04", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     private Result runMain(JUnitSystem system, String... args)", "signatureAfterChange": "     public Result runMain(JUnitSystem system, String... args)", "diff": ["-    private Result runMain(JUnitSystem system, String... args) {", "+    public Result runMain(JUnitSystem system, String... args) {", "-        List<Failure> missingClasses = new ArrayList<Failure>();", "+        List<Failure> failures = new ArrayList<Failure>();", "+        FilterFactoryFactory filterFactoryFactory = new FilterFactoryFactory();", "-                classes.add(Class.forName(each));", "+                if (each.startsWith(\"--\")) {", "+                    if (each.startsWith(\"--filter\")) {", "+                        String filterSpec = each.substring(each.indexOf('=') + 1);", "+", "+                        Filter filter = filterFactoryFactory.apply(filterSpec);", "+", "+                        addFilter(filter);", "+                    } else {", "+                        system.out().println(\"JUnit knows nothing about the \" + each + \" option\");", "+", "+                        return new Result() {", "+                            @Override", "+                            public boolean wasSuccessful() {", "+                                return false;", "+                            }", "+                        };", "+                    }", "+                } else {", "+                    classes.add(Class.forName(each));", "+                }", "+            } catch (FilterFactory.FilterNotFoundException e) {", "+                system.out().println(\"Could not find filter: \" + e.getMessage());", "+                Description description = Description.createSuiteDescription(each);", "+                Failure failure = new Failure(description, e);", "+                failures.add(failure);", "+            } catch (FilterFactoryFactory.FilterFactoryNotFoundException e) {", "+                system.out().println(\"Could not find filter factory: \" + e.getMessage());", "+                Description description = Description.createSuiteDescription(each);", "+                Failure failure = new Failure(description, e);", "+                failures.add(failure);", "-                missingClasses.add(failure);", "+                failures.add(failure);", "-        for (Failure each : missingClasses) {", "+        for (Failure each : failures) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfe15d97c641a43e94fc3d9404628985", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "6a8215ab69317916807f246daef80a9d4cf5dc8e", "commitAfterChange": "cbf46b88c2937aece7018fa50ba4dbb133e03d06", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "signatureAfterChange": "  \t\t@Override \t\tpublic Object createTest() throws Exception", "diff": ["-\t\t\treturn getTestClass().getOnlyConstructor().newInstance(fParameters);", "+\t\t\tObject testClassInstance = null;", "+\t\t\tList<FrameworkField> fields = getTestClass().getAnnotatedFields(Parameter.class);", "+\t\t\tif (!fields.isEmpty()) {", "+\t\t\t\tif (fields.size() != fParameters.length)", "+\t\t\t\t\tthrow new Exception(\"Wrong number of parameters and @parameter fields. @parameter fields counted: \"+fields.size()+\", available parameters: \"+fParameters.length+\".\");", "+\t\t\t\ttestClassInstance = getTestClass().getJavaClass().newInstance();", "+\t\t\t\tfor (FrameworkField f : fields) {", "+\t\t\t\t\tField field = f.getField();", "+\t\t\t\t\tParameter annot = field.getAnnotation(Parameter.class);", "+\t\t\t\t\tint index = annot.value();", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfield.set(testClassInstance,  fParameters[index]);", "+\t\t\t\t\t} catch(IllegalArgumentException iare) {", "+\t\t\t\t\t\tthrow new Exception(getTestClass().getName() + \": Trying to set \"+field.getName()+\" with the value \"+fParameters[index]+\" that is not the right type (\"+fParameters[index].getClass().getSimpleName()+\" instead of \"+field.getType().getSimpleName()+\").\", iare);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\ttestClassInstance = getTestClass().getOnlyConstructor().newInstance(fParameters);", "+\t\t\t}", "+\t\t\treturn testClassInstance;"]}]}
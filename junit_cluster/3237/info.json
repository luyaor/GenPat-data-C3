{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ae7303ebc7a5d4856b94633bdafcd39", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ca2d94e33a70317311b00efd6f54812", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java", "commitBeforeChange": "57302f0df76fba83ba72a676bd660efeb5881af6", "commitAfterChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t@Override \tprotected JUnit4MethodRunner wrapMethod(Method method)", "signatureAfterChange": "  \t\t@SuppressWarnings(\"unchecked\") \t\tprivate GuesserQueue createGuesserQueue(Assignments incomplete) \t\t\t\tthrows InstantiationException, IllegalAccessException", "diff": ["-\tprotected JUnit4MethodRunner wrapMethod(Method method) {", "-\t\treturn new StubbedTheoryMethodRunner(method, getTestClass());", "+", "+\t\t@SuppressWarnings(\"unchecked\")", "+\t\tprivate GuesserQueue createGuesserQueue(Assignments incomplete)", "+\t\t\t\tthrows InstantiationException, IllegalAccessException {", "+\t\t\tParameterSignature nextUnassigned= incomplete.nextUnassigned();", "+", "+\t\t\tif (nextUnassigned.hasAnnotation(Stub.class)) {", "+\t\t\t\tGuesserQueue queue= new GuesserQueue();", "+\t\t\t\tqueue.add(new Guesser(nextUnassigned.getType()));", "+\t\t\t\treturn queue;", "+\t\t\t}", "+", "+\t\t\treturn GuesserQueue.forSingleValues(incomplete.potentialsForNextUnassigned());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ef8ce1fb424612c03bf72c5d873b5b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tprotected Statement withPotentialTimeout(TestAnnotation annotation, \t\t\tStatement next)", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tprotected Statement withPotentialTimeout(TestAnnotation annotation,", "-\t\t\tStatement next) {", "-\t\tlong timeout= annotation.getTimeout();", "-\t\treturn timeout > 0 ? new FailOnTimeout(next, timeout) : next;", "+\tpublic void filter(Filter filter) throws NoTestsRemainException {", "+\t\tfor (Iterator<Method> iter= fTestMethods.iterator(); iter.hasNext();) {", "+\t\t\tMethod method= iter.next();", "+\t\t\tif (!filter.shouldRun(methodDescription(method)))", "+\t\t\t\titer.remove();", "+\t\t}", "+\t\tif (fTestMethods.isEmpty())", "+\t\t\tthrow new NoTestsRemainException();"]}]}
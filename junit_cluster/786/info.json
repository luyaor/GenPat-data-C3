{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a417eb405cb1866ed3f86d2e6b3c18b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "557f1665d3f4ee86efc8aa3f195344e4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/links/WithTimeout.java", "commitBeforeChange": "a4c68872a91681139d404825c2bb04bd5ba804dd", "commitAfterChange": "f0ef837a40922ac08c608661385abf71732975d3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void run(final EachTestNotifier context) throws Throwable", "signatureAfterChange": "  \t@Override \tpublic void run(final FailureListener listener)", "diff": ["-\tpublic void run(final EachTestNotifier context) throws Throwable {", "+\tpublic void run(final FailureListener listener) {", "-\t\t\t\ttry {", "-\t\t\t\t\tfNext.run(context);", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\tthrow e;", "-\t\t\t\t} catch (Error e) {", "-\t\t\t\t\tthrow e;", "-\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\t// TODO: (Oct 5, 2007 11:27:11 AM) Now what?  Is there a useful thing to do with this?", "-\t\t\t\t}", "+\t\t\t\tfNext.run(listener);", "-\t\t\tthrow new Exception(String.format(", "-\t\t\t\t\t\"test timed out after %d milliseconds\", fTimeout));", "+\t\t\tlistener.addFailure(new Exception(String.format(", "+\t\t\t\t\t\"test timed out after %d milliseconds\", fTimeout)));", "-\t\t\tthrow e.getCause();", "+\t\t\tlistener.addFailure(e.getCause());", "+\t\t} catch (InterruptedException e) {", "+\t\t\tlistener.addFailure(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f504c4c4a8b380a5ca037fe517249ce", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethod.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tvoid invokeWithActualParameters(Object target, Object[] params) \t\t\tthrows Throwable", "signatureAfterChange": "  \tprivate void invokeWithActualParameters(Object target, Object... params) \t\t\tthrows Throwable", "diff": ["-\tvoid invokeWithActualParameters(Object target, Object[] params)", "+\tprivate void invokeWithActualParameters(Object target, Object... params)", "-\t\t\ttry {", "-\t\t\t\tfMethod.invoke(target, params);", "-\t\t\t\tsuccesses++;", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\tthrow e.getTargetException();", "-\t\t\t}", "+\t\t\tinvokeAndThrow(target, params);", "-\t\t\tfInvalidParameters.add(e);", "+\t\t\thandleAssumptionViolation(e);", "-\t\t\tif (params.length == 0)", "-\t\t\t\tthrow e;", "-\t\t\tthrow new ParameterizedAssertionError(e, fMethod.getName(), params);", "+\t\t\treportParameterizedError(e, params);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb13d20347bc713bec4530b161e6cef7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2412e848e565dcaa5cdbf7b5f58a277c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/Timeout.java", "commitBeforeChange": "bbbb8571f1a3cdcb9af977867c7a16de3a1f5a76", "commitAfterChange": "d96a05f8d33ed781c701c58dd285bf6464112719", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public Statement apply(Statement base, Description description)", "signatureAfterChange": "      public Statement apply(Statement base, Description description)", "diff": ["-        return new FailOnTimeout(base, timeout, timeUnit, lookForStuckThread);", "+        try {", "+            return FailOnTimeout.builder()", "+                .withTimeout(timeout, timeUnit)", "+                .withLookingForStuckThread(lookForStuckThread)", "+                .build(base);", "+        } catch (final Exception e) {", "+            return new Statement() {", "+                @Override public void evaluate() throws Throwable {", "+                    throw new RuntimeException(\"Invalid parameters for Timeout\", e);", "+                }", "+            };", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49d5fe866c19d7497b26d65cfc5afb90", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void runMethod(TestMethod method, RunNotifier notifier)", "diff": ["-", "-\t\t// TODO: (Oct 10, 2007 11:36:43 AM) EachTestNotifier has bad name throughout", "-", "+\t\tObject test;", "+\t\ttry {", "+\t\t\ttest= new ReflectiveCallable() {", "+\t\t\t\t@Override", "+\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "+\t\t\t\t\treturn createTest();", "+\t\t\t\t}", "+\t\t\t}.run();", "+\t\t} catch (Throwable e) {", "+\t\t\tnotifier.testAborted(description, e);", "+\t\t\treturn;", "+\t\t}", "-\t\tnotifying(method, chain(method), roadie).run(roadie);", "+\t\trun(roadie, method, test);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33e2ffe5438c010b40d49122d71e8b9e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a1dcaa49425f43de64407d28a69b71a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "540fa757f7a9d86eea9b38e9920eec9bcee3afca", "commitAfterChange": "b421d0ebd66701187c10c2b0c7f519dc435531ae", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) throws Throwable", "signatureAfterChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) throws Throwable", "diff": ["-            if (returnType.isArray() && sig.canPotentiallyAcceptType(returnType.getComponentType())) {", "+            if ((returnType.isArray() && sig.canPotentiallyAcceptType(returnType.getComponentType())) ||", "+                    Iterable.class.isAssignableFrom(returnType)) {", "-                    addArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "+                    addDataPointsValues(returnType, sig, dataPointsMethod.getName(), list, ", "+                            dataPointsMethod.invokeExplosively(null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0659d374b40f6c51cf9fadee873f9d8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "e9d4de8e15255b03b60e935390e517d4de90a73b", "commitAfterChange": "278d76f285c4729700276e875ff8d69ea2ecfbc2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-            try {", "-                addArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "-            } catch (Throwable e) {", "-                // ignore and move on", "+            Class<?> returnType = dataPointsMethod.getReturnType();", "+            ", "+            if (returnType.isArray() && sig.canPotentiallyAcceptType(returnType.getComponentType())) {", "+                try {", "+                    addArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "+                } catch (Throwable e) {", "+                    // ignore and move on", "+                }"]}]}
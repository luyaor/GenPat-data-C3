{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2538fa2c7c8e991ea193fd147af128b8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8122ea7975e72f1004ad77ce87cb2c32", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/model/EachTestNotifier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate void addMultipleFailureException(MultipleFailureException mfe)", "signatureAfterChange": "      private void addMultipleFailureException(MultipleFailureException mfe)", "diff": ["-\tprivate void addMultipleFailureException(MultipleFailureException mfe) {", "-\t\tfor (Throwable each : mfe.getFailures())", "-\t\t\taddFailure(each);", "-\t}", "+    private void addMultipleFailureException(MultipleFailureException mfe) {", "+        for (Throwable each : mfe.getFailures()) {", "+            addFailure(each);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aad20a0a40c3ded8060116e419a6717a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ClassRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void runAfters()", "signatureAfterChange": "      private void runAfters()", "diff": ["-\tprivate void runAfters() {", "-\t\tList<Method> afters= fTestClass.getAfters();", "-\t\tfor (Method after : afters)", "-\t\t\ttry {", "-\t\t\t\tafter.invoke(null);", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\taddFailure(e.getTargetException());", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\taddFailure(e); // Untested, but seems impossible", "-\t\t\t}", "-\t}", "+", "+    private void runAfters() {", "+        List<Method> afters = fTestClass.getAfters();", "+        for (Method after : afters) {", "+            try {", "+                after.invoke(null);", "+            } catch (InvocationTargetException e) {", "+                addFailure(e.getTargetException());", "+            } catch (Throwable e) {", "+                addFailure(e); // Untested, but seems impossible", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf3219ec49b3843a90b8690b4eae0fb5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/RuleChain.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic Statement apply(Statement base, Description description)", "signatureAfterChange": "     public Statement apply(Statement base, Description description)", "diff": ["-\t */", "-\tpublic Statement apply(Statement base, Description description) {", "-\t\tfor (TestRule each : rulesStartingWithInnerMost)", "-\t\t\tbase= each.apply(base, description);", "-\t\treturn base;", "-\t}", "+     */", "+    public Statement apply(Statement base, Description description) {", "+        for (TestRule each : rulesStartingWithInnerMost) {", "+            base = each.apply(base, description);", "+        }", "+        return base;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0d8832f7ecbbddd418b345485088d02", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "bbbb8571f1a3cdcb9af977867c7a16de3a1f5a76", "commitAfterChange": "d96a05f8d33ed781c701c58dd285bf6464112719", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": "     private Thread[] copyThreads(Thread[] threads, int count)", "signatureAfterChange": "     private Thread[] copyThreads(Thread[] threads, int count)", "diff": ["-        for (int i = 0; i < length; i++)", "+        for (int i = 0; i < length; i++) {", "+        }"]}]}
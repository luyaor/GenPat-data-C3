{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efba2ecf1e7d73d705b19b3d238a5eaf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3591e53fe4022ea4f46117cade8eb1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/textui/TestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tpublic TestResult start(String args[]) throws Exception", "signatureAfterChange": "     public TestResult start(String args[]) throws Exception", "diff": ["-\t */", "-\tpublic TestResult start(String args[]) throws Exception {", "-\t\tString testCase= \"\";", "-\t\tString method= \"\";", "-\t\tboolean wait= false;", "-\t\tfor (int i= 0; i < args.length; i++) {", "-\t\t\tif (args[i].equals(\"-wait\"))", "-\t\t\t\twait= true;", "-\t\t\telse if (args[i].equals(\"-c\"))", "-\t\t\t\ttestCase= extractClassName(args[++i]);", "-\t\t\telse if (args[i].equals(\"-m\")) {", "-\t\t\t\tString arg= args[++i];", "-\t\t\t\tint lastIndex= arg.lastIndexOf('.');", "-\t\t\t\ttestCase= arg.substring(0, lastIndex);", "-\t\t\t\tmethod= arg.substring(lastIndex + 1);", "-\t\t\t} else if (args[i].equals(\"-v\"))", "-\t\t\t\tSystem.err.println(\"JUnit \" + Version.id() + \" by Kent Beck and Erich Gamma\");", "-\t\t\telse", "-\t\t\t\ttestCase= args[i];", "-\t\t}", "-\t\tif (testCase.equals(\"\"))", "-\t\t\tthrow new Exception(\"Usage: TestRunner [-wait] testCaseName, where name is the name of the TestCase class\");", "-\t\ttry {", "-\t\t\tif (!method.equals(\"\")) ", "-\t\t\t\treturn runSingleMethod(testCase, method, wait);", "-\t\t\tTest suite= getTest(testCase);", "-\t\t\treturn doRun(suite, wait);", "-\t\t} catch (Exception e) {", "-\t\t\tthrow new Exception(\"Could not create and run test suite: \" + e);", "-\t\t}", "-\t}", "+     */", "+    public TestResult start(String args[]) throws Exception {", "+        String testCase = \"\";", "+        String method = \"\";", "+        boolean wait = false;", "+", "+        for (int i = 0; i < args.length; i++) {", "+            if (args[i].equals(\"-wait\")) {", "+                wait = true;", "+            } else if (args[i].equals(\"-c\")) {", "+                testCase = extractClassName(args[++i]);", "+            } else if (args[i].equals(\"-m\")) {", "+                String arg = args[++i];", "+                int lastIndex = arg.lastIndexOf('.');", "+                testCase = arg.substring(0, lastIndex);", "+                method = arg.substring(lastIndex + 1);", "+            } else if (args[i].equals(\"-v\")) {", "+                System.err.println(\"JUnit \" + Version.id() + \" by Kent Beck and Erich Gamma\");", "+            } else {", "+                testCase = args[i];", "+            }", "+        }", "+", "+        if (testCase.equals(\"\")) {", "+            throw new Exception(\"Usage: TestRunner [-wait] testCaseName, where name is the name of the TestCase class\");", "+        }", "+", "+        try {", "+            if (!method.equals(\"\")) {", "+                return runSingleMethod(testCase, method, wait);", "+            }", "+            Test suite = getTest(testCase);", "+            return doRun(suite, wait);", "+        } catch (Exception e) {", "+            throw new Exception(\"Could not create and run test suite: \" + e);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab73e0748687172c8dde19a5f1350ce5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate void findLeaves(Description parent, Description description, List<Description> results)", "signatureAfterChange": "      private void findLeaves(Description parent, Description description, List<Description> results)", "diff": ["-\t", "-\tprivate void findLeaves(Description parent, Description description, List<Description> results) {", "-\t\tif (description.getChildren().isEmpty())", "-\t\t\tif (description.toString().equals(\"warning(junit.framework.TestSuite$1)\"))", "-\t\t\t\tresults.add(Description.createSuiteDescription(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX + parent));", "-\t\t\telse", "-\t\t\t\tresults.add(description);", "-\t\telse", "-\t\t\tfor (Description each : description.getChildren())", "-\t\t\t\tfindLeaves(description, each, results);", "-\t}", "+", "+    private void findLeaves(Description parent, Description description, List<Description> results) {", "+        if (description.getChildren().isEmpty()) {", "+            if (description.toString().equals(\"warning(junit.framework.TestSuite$1)\")) {", "+                results.add(Description.createSuiteDescription(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX + parent));", "+            } else {", "+                results.add(description);", "+            }", "+        } else {", "+            for (Description each : description.getChildren()) {", "+                findLeaves(description, each, results);", "+            }", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bba46888acd97a38edcbe1b51084e1cf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "250d7a32a2eaa023f69bf0bfe2122a72", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/matchers/StacktracePrintingMatcher.java", "commitBeforeChange": "872faeab15115635b3260001979ae036e64e29bf", "commitAfterChange": "a37fd9ac8b2afc54384fd32f470b54aa69dc620a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Factory \tpublic static <T extends Throwable> Matcher<T> withStacktrace( \t\t\tMatcher<T> throwableMatcher)", "signatureAfterChange": "  \t@Factory \tpublic static <T extends Exception> Matcher<T> isException( \t\t\tMatcher<T> exceptionMatcher)", "diff": ["-\tpublic static <T extends Throwable> Matcher<T> withStacktrace(", "+", "+\t@Factory", "+\tpublic static <T extends Exception> Matcher<T> isException(", "+\t\t\tMatcher<T> exceptionMatcher) {", "+\t\treturn new StacktracePrintingMatcher<T>(exceptionMatcher);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f51bcc86f1055732fe55e81cbd38f7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedExceptionMatcher.java", "commitBeforeChange": "6bea82df32f687d636f1b843a1918a3a1ff22a6e", "commitAfterChange": "872faeab15115635b3260001979ae036e64e29bf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprivate Matcher<Throwable> hasCause(final Matcher<? extends Throwable> causeMatcher)", "signatureAfterChange": "  \tprivate Matcher<Throwable> hasCause(final Matcher<? extends Throwable> matcher)", "diff": ["-\tprivate Matcher<Throwable> hasCause(final Matcher<? extends Throwable> causeMatcher) {", "+\tprivate Matcher<Throwable> hasCause(final Matcher<? extends Throwable> matcher) {", "-\t\t\t\tdescription.appendDescriptionOf(causeMatcher);", "+\t\t\t\tdescription.appendDescriptionOf(matcher);", "-\t\t\t\treturn causeMatcher.matches(item.getCause());", "+\t\t\t\treturn matcher.matches(item.getCause());"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66674fd88b0ec049bb38be081e85161b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77549652e3b1e73106ea421a65c2b7d9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "9218455d51cd94b21b4536af793dd4c4c6820bf7", "commitAfterChange": "dee8a47af11dd88139f4d46a1ebee7fc613e367e", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprotected Statement withInterceptors(FrameworkMethod method, Object test, \t\t\tStatement statement)", "signatureAfterChange": " \t \tprivate Statement withInterceptors(FrameworkMethod method, Object test, \t\t\tStatement statement)", "diff": ["-\t", "-\tprotected Statement withInterceptors(FrameworkMethod method, Object test,", "-\t\t\tStatement statement) {", "-\t\t// TODO (May 26, 2009 11:16:13 PM): outsource to a class?", "-\t\tStatement result= statement;", "-\t\tfor (FrameworkField each : interceptorFields())", "-\t\t\ttry {", "-\t\t\t\tStatementInterceptor interceptor= (StatementInterceptor) each", "-\t\t\t\t\t\t.get(test);", "-\t\t\t\tresult= interceptor.intercept(result, method);", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\t\"How did getFields return a field we couldn't access?\");", "-\t\t\t}", "-\t\treturn result;", "-\t}", "+\t", "+\tprivate Statement withInterceptors(FrameworkMethod method, Object test,", "+\t\t\tStatement statement) {", "+\t\tStatement result= statement;", "+\t\tfor (StatementInterceptor each : interceptors(test))", "+\t\t\tresult= each.intercept(result, method);", "+\t\treturn result;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1b4f0ad16fc3143fc4555abf3e1eb56", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "cb1d4dfd390718002349f2cbb456ec9ea769ff2b", "commitAfterChange": "e4c7fac80cac937faf413e3ddd58e0fd091bd367", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprotected Statement withInterceptors(FrameworkMethod method, Object test, \t\t\tStatement statement)", "signatureAfterChange": " \t \tprivate Statement withInterceptors(FrameworkMethod method, Object test, \t\t\tStatement statement)", "diff": ["-\t", "-\tprotected Statement withInterceptors(FrameworkMethod method, Object test,", "-\t\t\tStatement statement) {", "-\t\t// TODO (May 26, 2009 11:16:13 PM): outsource to a class?", "-\t\tStatement result= statement;", "-\t\tfor (FrameworkField each : interceptorFields())", "-\t\t\ttry {", "-\t\t\t\tStatementInterceptor interceptor= (StatementInterceptor) each", "-\t\t\t\t\t\t.get(test);", "-\t\t\t\tresult= interceptor.intercept(result, method);", "-\t\t\t} catch (IllegalAccessException e) {", "-\t\t\t\tthrow new RuntimeException(", "-\t\t\t\t\t\t\"How did getFields return a field we couldn't access?\");", "-\t\t\t}", "-\t\treturn result;", "-\t}", "+\t", "+\tprivate Statement withInterceptors(FrameworkMethod method, Object test,", "+\t\t\tStatement statement) {", "+\t\tStatement result= statement;", "+\t\tfor (StatementInterceptor each : interceptors(test))", "+\t\t\tresult= each.intercept(result, method);", "+\t\treturn result;", "+\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "735891256de4ec7ad9fa630ebb0f57cd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c43f8b942c18ee7ba055a92f253cff71", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "beb1f4a80f7fa20523d40535fb81c1b8a7a9e638", "commitAfterChange": "83a25d440d118b7d10779a884d35f31045949e27", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public void sort(Sorter sorter)", "signatureAfterChange": "      public void sort(Sorter sorter)", "diff": ["-        fSorter = sorter;", "-            sortChild(each);", "+            sortChild(each, sorter);", "-        Collections.sort(getFilteredChildren(), comparator());", "+        List<T> sortedChildren = new ArrayList<T>(getFilteredChildren());", "+        Collections.sort(sortedChildren, comparator(sorter));", "+        getFilteredChildren().clear();", "+        getFilteredChildren().addAll(sortedChildren);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d42fd660f2f6e8477ab60b2d3320f2c5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "83a25d440d118b7d10779a884d35f31045949e27", "commitAfterChange": "84d8eddd970e46894d471cd2dd17ae8d86fb05db", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      public void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-        for (Iterator<T> iter = getFilteredChildren().iterator(); iter.hasNext(); ) {", "-            T each = iter.next();", "-            if (shouldRun(filter, each)) {", "-                try {", "-                    filter.apply(each);", "-                } catch (NoTestsRemainException e) {", "-                    iter.remove();", "+        synchronized (fLock) {", "+            List<T> sortedChildren = new ArrayList<T>(getFilteredChildren());", "+            try {", "+                for (Iterator<T> iter = sortedChildren.iterator(); iter.hasNext(); ) {", "+                    T each = iter.next();", "+                    if (shouldRun(filter, each)) {", "+                        try {", "+                            filter.apply(each);", "+                        } catch (NoTestsRemainException e) {", "+                            iter.remove();", "+                        }", "+                    } else {", "+                        iter.remove();", "+                    }", "-            } else {", "-                iter.remove();", "+            } finally {", "+                setFilteredChildren(sortedChildren);", "+"]}]}
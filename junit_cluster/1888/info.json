{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea80ddb9b53d7e814f62ec9ef6c7d58e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cfbb920b0286e7bcd6dae6a7146c209", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "7b5641996d486bbcb33f13a9130821303e1e7d89", "commitAfterChange": "1ad3a59952f3528914d1225d51bbb04adb62c22f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "  \t@Override \tpublic void evaluate() throws Throwable", "diff": ["-\t\tThread thread= new Thread() {", "-\t\t\t@Override", "-\t\t\tpublic void run() {", "-\t\t\t\ttry {", "-\t\t\t\t\tfNext.evaluate();", "-\t\t\t\t\tfFinished= true;", "-\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\tfThrown= e;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t};", "+\t\tStatementThread thread= evaluateStatement();", "+\t\tif (!thread.fFinished)", "+\t\t\tthrowExceptionForUnfinishedThread(thread);", "+\t}", "-\t\tif (fFinished)", "-\t\t\treturn;", "-\t\tif (fThrown != null)", "-\t\t\tthrow fThrown;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc0c8a60d6ba1c61230c1961690ef3cb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "0e1c92693e70e52ad9af23ee6180500c74fc9c95", "commitAfterChange": "0dbe9eefa369da78ca67bf5487797a8de5b2d631", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete, final FailureListener listener) \t\t\t\tthrows Throwable", "signatureAfterChange": "  \t\tprotected void runWithCompleteAssignment(final Assignments complete) throws InstantiationException, \t\t\t\tIllegalAccessException, InvocationTargetException, \t\t\t\tNoSuchMethodException, Throwable", "diff": ["-\t\tprotected void runWithCompleteAssignment(final Assignments complete, final FailureListener listener)", "-\t\t\t\tthrows Throwable {", "-\t\t\tfinal Object freshInstance= createTest();", "-\t\t\t// TODO: (Oct 10, 2007 12:30:46 PM) reuse chain method from above", "+\t\tprotected void runWithCompleteAssignment(final Assignments complete) throws InstantiationException,", "+\t\t\t\tIllegalAccessException, InvocationTargetException,", "+\t\t\t\tNoSuchMethodException, Throwable {", "+\t\t\ttry {", "+\t\t\t\tfinal Object freshInstance= createTest();", "+\t\t\t\twithAfters(fTestMethod, freshInstance, withBefores(fTestMethod, freshInstance, methodCompletesWithParameters(complete, freshInstance))).run();", "+\t\t\t} catch (CouldNotGenerateValueException e) {", "+\t\t\t\t// Do nothing", "+\t\t\t}", "+\t\t}", "-\t\t\tnew WithBeforeAndAfter(new Link() {", "-\t\t\t\tpublic void run(FailureListener listener) {", "-\t\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\t\tlistener.addFailure(e);", "-\t\t\t}, fTestMethod, freshInstance).run(new FailureListener() {", "-\t\t\t\t@Override", "-\t\t\t\tprotected void handleFailure(Throwable error) {", "-\t\t\t\t\tif (!(error instanceof CouldNotGenerateValueException))", "-\t\t\t\t\t\tlistener.addFailure(error);", "-\t\t\t\t}", "-\t\t\t}); "]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26706600d1426552f3b21b21e7d552d7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86544a2936590ea0de08ec622cf5b544", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java", "commitBeforeChange": "b9e14f64327e052e161c451bc2eaa854c9adcea4", "commitAfterChange": "865e00b45a166466b614a1dbcb8440e19453c58e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t@Test(timeout=1500) public void testsRunInParallel()", "signatureAfterChange": " \t \t@Test public void testsRunInParallel()", "diff": ["-\t", "-\t@Test(timeout=1500) public void testsRunInParallel() {", "-\t\tlong start= System.currentTimeMillis();", "+\t@Test public void testsRunInParallel() {", "-\t\tlong end= System.currentTimeMillis();", "-\t\tassertThat(end - start, greaterThan(999)); // Overhead could be less than half a millisecond", "-\t}", "+\t\tassertNotNull(fExample1One);", "+\t\tassertNotNull(fExample1Two);", "+\t\tassertNotNull(fExample2One);", "+\t\tassertNotNull(fExample2Two);", "+\t\tassertThat(fExample1One, is(fExample1Two));", "+\t\tassertThat(fExample2One, is(fExample2Two));", "+\t\tassertThat(fExample1One, is(not(fExample2One)));", "+\t\tfExample1One= null;", "+\t\tfExample1Two= null;", "+\t\tfExample2One= null;", "+\t\tfExample2Two= null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a09b3ed382c7bb941819dae4f9f82cd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "diff": ["+\tprotected void invokeTestMethod(Method method, RunNotifier notifier) {", "+\t\tDescription description= methodDescription(method);", "+\t\t\ttest= createTest();", "+\t\t} catch (InvocationTargetException e) {", "+\t\t\ttestAborted(notifier, description, e.getCause());", "+\t\t\treturn;\t\t\t", "+\t\t} catch (Exception e) {", "+\t\t\ttestAborted(notifier, description, e);", "+\t\t\treturn;", "-\t", "-\t@Override", "-\tprotected void runChild(FrameworkMethod method, RunNotifier notifier) {", "-\t\tDescription description= describeChild(method);", "-\t\tEachTestNotifier eachNotifier= new EachTestNotifier(notifier,", "-\t\t\t\tdescription);", "-\t\tnotifying(method, childBlock(method)).run(eachNotifier);", "+\t\tTestMethod testMethod= wrapMethod(method);", "+\t\tnew MethodRoadie(test, testMethod, notifier, description).run();"]}]}
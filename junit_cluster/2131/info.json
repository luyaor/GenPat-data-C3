{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab31b5ec22013263eea9eaab0b846a03", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c79099588f75f4ab3803db65b6d6e62", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/model/TestClass.java", "commitBeforeChange": "af9634a3656bcd9c3988692c32381d0772077584", "commitAfterChange": "74fe2493715dfe5b7d408411ce5d63a17398db48", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic List<FrameworkMethod> getAnnotatedMethods( \t\t\tClass<? extends Annotation> annotationClass)", "signatureAfterChange": "  \tpublic List<FrameworkMethod> getAnnotatedMethods( \t\t\tClass<? extends Annotation> annotationClass)", "diff": ["-\t\tList<FrameworkMethod> results= new ArrayList<FrameworkMethod>();", "-\t\tfor (Class<?> eachClass : getSuperClasses(fClass)) {", "-\t\t\tMethod[] methods= eachClass.getDeclaredMethods();", "-\t\t\tfor (Method eachMethod : methods) {", "-\t\t\t\tAnnotation annotation= eachMethod", "-\t\t\t\t\t\t.getAnnotation(annotationClass);", "-\t\t\t\tFrameworkMethod testMethod= new FrameworkMethod(eachMethod);", "-\t\t\t\tif (annotation != null && !testMethod.isShadowedBy(results))", "-\t\t\t\t\tresults.add(testMethod);", "-\t\t\t}", "-\t\t}", "-\t\tif (runsTopToBottom(annotationClass))", "-\t\t\tCollections.reverse(results);", "-\t\treturn results;", "+\t\tensureKey(annotationClass);", "+\t\treturn methodsForAnnotations.get(annotationClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58914becfd61e0257203153b7b315325", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestIntrospector.java", "commitBeforeChange": "6a83bc0f1e5f9839a36910c3a21108bc38367afb", "commitAfterChange": "890b7b977e42360aa8975c8535fc66bfd8d8cb3e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic List<Method> getTestMethods(Class<? extends Annotation> annotationClass)", "signatureAfterChange": "  \tpublic List<Method> getTestMethods( \t\t\tClass<? extends Annotation> annotationClass)", "diff": ["-\tpublic List<Method> getTestMethods(Class<? extends Annotation> annotationClass) {", "-\t\tList<Method> results= new ArrayList<Method>();", "-\t\tfor (Class<?> eachClass : getSuperClasses(fTestClass)) {", "-\t\t\tMethod[] methods= eachClass.getDeclaredMethods();", "-\t\t\tfor (Method eachMethod : methods) {", "-\t\t\t\tAnnotation annotation= eachMethod.getAnnotation(annotationClass);", "-\t\t\t\tif (annotation != null && ! isShadowed(eachMethod, results)) ", "-\t\t\t\t\tresults.add(eachMethod);", "-\t\t\t}", "-\t\t}", "+\tpublic List<Method> getTestMethods(", "+\t\t\tClass<? extends Annotation> annotationClass) {", "+\t\tList<Method> results= new MethodCollector(annotationClass).addMethods(", "+\t\t\t\tfTestClass).getMethods();"]}]}
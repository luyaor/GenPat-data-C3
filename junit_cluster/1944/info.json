{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c99e1c81d3c43bd42e100bccd31e451", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3631a978e417516047e54de1d1c9d928", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "cbf46b88c2937aece7018fa50ba4dbb133e03d06", "commitAfterChange": "1fa373f01d126d437f08a57a7b5e7a7ec0a01b85", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t\t@Override \t\tprotected void validateFields(List<Throwable> errors)", "signatureAfterChange": "  \t\t@Override \t\tprotected void validateFields(List<Throwable> errors)", "diff": ["-\t\t\t\t\t\terrors.add(new Exception(\"Invalid @parameter value: \"+index+\". @parameter fields counted: \"+annotatedFieldsByParameter.size()+\". Please use an index between 0 and \"+(annotatedFieldsByParameter.size()-1)+\".\"));", "+\t\t\t\t\t\terrors.add(", "+\t\t\t\t\t\t\tnew Exception(\"Invalid @Parameter value: \"+index+\". @Parameter fields counted: \"+", "+\t\t\t\t\t\t\t\tannotatedFieldsByParameter.size()+\". Please use an index between 0 and \"+", "+\t\t\t\t\t\t\t\t(annotatedFieldsByParameter.size()-1)+\".\")", "+\t\t\t\t\t\t);", "-\t\t\t\t\t\terrors.add(new Exception(\"The index \"+index+\" is never used.\"));", "+\t\t\t\t\t\terrors.add(new Exception(\"@Parameter(\"+index+\") is never used.\"));", "-\t\t\t\t\t\terrors.add(new Exception(\"The index \"+index+\" is used more than once (\"+numberOfUse+\").\"));", "+\t\t\t\t\t\terrors.add(new Exception(\"@Parameter(\"+index+\") is used more than once (\"+numberOfUse+\").\"));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75cc9bf73ef8ad8a6bcd6c82fce2cdbc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "a14fc5f174c08a9ff6e97b266ae3d84efcbd84e6", "commitAfterChange": "9fbafd6a2e90dc2cd04ae71597cd5a56b96cc403", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "     public void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "signatureAfterChange": "     public void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "diff": ["-        if (Modifier.isStatic(fMethod.getModifiers()) != isStatic) {", "+        if (isStatic() != isStatic) {", "-        if (!Modifier.isPublic(fMethod.getDeclaringClass().getModifiers())) {", "-            errors.add(new Exception(\"Class \" + fMethod.getDeclaringClass().getName() + \" should be public\"));", "+        if (!Modifier.isPublic(getDeclaringClass().getModifiers())) {", "+            errors.add(new Exception(\"Class \" + getDeclaringClass().getName() + \" should be public\"));", "-        if (!Modifier.isPublic(fMethod.getModifiers())) {", "+        if (!isPublic()) {"]}]}
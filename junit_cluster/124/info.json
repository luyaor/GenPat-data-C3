{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec7cbb66ace971e9b8721b85e814fa9b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ee7c7561400b2e8d62c4b2c9f4ad987", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxCore.java", "commitBeforeChange": "378e17964a4188bad9b3d966207a2f682072148e", "commitAfterChange": "451ca12156d5704809a1feff78a10a9451cd2023", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\t\tpublic int compare(Description o1, Description o2)", "signatureAfterChange": " \t\tpublic int compare(Description o1, Description o2)", "diff": ["-\t\tCollections.sort(tests, new Comparator<Description>() {", "-\t\t\tpublic int compare(Description o1, Description o2) {", "-\t\t\t\treturn getDuration(o1).compareTo(getDuration(o2));", "-\t\t\t}", "+\tprivate class TestComparator implements Comparator<Description> {", "+\t\tpublic int compare(Description o1, Description o2) {", "+\t\t\t// Always prefer new tests", "+\t\t\tif (isNew(o1))", "+\t\t\t\treturn -1;", "+\t\t\tif (isNew(o2))", "+\t\t\t\treturn 1;", "+\t\t\t// Then most recently failed first", "+\t\t\tint result= getFailure(o2).compareTo(getFailure(o1)); ", "+\t\t\treturn result != 0", "+\t\t\t\t? result", "+\t\t\t\t// Then shorter tests first", "+\t\t\t\t: fDurations.get(o1).compareTo(fDurations.get(o2));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b4128e4921827f345d44d4c34e6d26e", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestRunner.java", "commitBeforeChange": "29416b4ee89314119fb0f2d8011d63ac36531388", "commitAfterChange": "8817825612894d11856312a777281b6c7cf81672", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t\t\tpublic void run()", "signatureAfterChange": " \t \tpublic void testFailed(final int status, final Test test, final Throwable t)", "diff": ["+\tpublic void testFailed(final int status, final Test test, final Throwable t) {", "-\t\t\t\t\tfCounterPanel.setErrorValue(fTestResult.errorCount());", "-\t\t\t\t\tappendFailure(\"Error\", test, t);", "+\t\t\t\t\tswitch (status) {", "+\t\t\t\t\t\tcase TestRunListener.STATUS_ERROR:", "+\t\t\t\t\t\t\tfCounterPanel.setErrorValue(fTestResult.errorCount());", "+\t\t\t\t\t\t\tappendFailure(\"Error\", test, t);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase TestRunListener.STATUS_FAILURE:", "+\t\t\t\t\t\t\tfCounterPanel.setFailureValue(fTestResult.failureCount());", "+\t\t\t\t\t\t\tappendFailure(\"Failure\", test, t);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15c9f5a3fa7d3e97f9e3cd5f52598b93", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cda79b1961fe3bb0f7c97804fb2e16a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68e59d6de3c48be43bfe2d6104fdb6e8280b1232", "commitAfterChange": "334bd9ce923cf0293cbca49be4ae5947abf51897", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      public void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-        synchronized (fLock) {", "+        synchronized (fChildrenLock) {", "-            try {", "-                for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "-                    T each = iter.next();", "-                    if (shouldRun(filter, each)) {", "-                        try {", "-                            filter.apply(each);", "-                        } catch (NoTestsRemainException e) {", "-                            iter.remove();", "-                        }", "-                    } else {", "+            for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "+                T each = iter.next();", "+                if (shouldRun(filter, each)) {", "+                    try {", "+                        filter.apply(each);", "+                    } catch (NoTestsRemainException e) {", "+                } else {", "+                    iter.remove();", "-            } finally {", "-                fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);", "-        }", "-", "-        if (getFilteredChildren().isEmpty()) {", "-            throw new NoTestsRemainException();", "+            fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);", "+            if (fFilteredChildren.isEmpty()) {", "+                throw new NoTestsRemainException();", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62cbec59e6bd6889995ba1a9ccb30000", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tpublic void filter(Filter filter) throws NoTestsRemainException {", "-\t\tfor (Iterator<T> iter = getFilteredChildren().iterator(); iter.hasNext(); ) {", "-\t\t\tT each = iter.next();", "-\t\t\tif (shouldRun(filter, each))", "-\t\t\t\ttry {", "-\t\t\t\t\tfilter.apply(each);", "-\t\t\t\t} catch (NoTestsRemainException e) {", "-\t\t\t\t\titer.remove();", "-\t\t\t\t}", "-\t\t\telse", "-\t\t\t\titer.remove();", "-\t\t}", "-\t    if (getFilteredChildren().isEmpty()) {", "-\t        throw new NoTestsRemainException();", "-\t    }", "-\t}", "+    public void filter(Filter filter) throws NoTestsRemainException {", "+        for (Iterator<T> iter = getFilteredChildren().iterator(); iter.hasNext(); ) {", "+            T each = iter.next();", "+            if (shouldRun(filter, each)) {", "+                try {", "+                    filter.apply(each);", "+                } catch (NoTestsRemainException e) {", "+                    iter.remove();", "+                }", "+            } else {", "+                iter.remove();", "+            }", "+        }", "+        if (getFilteredChildren().isEmpty()) {", "+            throw new NoTestsRemainException();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8224a4acdfd710371bcbcb0de8f3145c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tpublic void filter(Filter filter) throws NoTestsRemainException {", "-\t\tfor (Iterator<Method> iter= fTestMethods.iterator(); iter.hasNext();) {", "-\t\t\tMethod method= iter.next();", "-\t\t\tif (!filter.shouldRun(methodDescription(method)))", "-\t\t\t\titer.remove();", "-\t\t}", "-\t\tif (fTestMethods.isEmpty())", "-\t\t\tthrow new NoTestsRemainException();", "-\t}", "+", "+    public void filter(Filter filter) throws NoTestsRemainException {", "+        for (Iterator<Method> iter = fTestMethods.iterator(); iter.hasNext(); ) {", "+            Method method = iter.next();", "+            if (!filter.shouldRun(methodDescription(method))) {", "+                iter.remove();", "+            }", "+        }", "+        if (fTestMethods.isEmpty()) {", "+            throw new NoTestsRemainException();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d42fd660f2f6e8477ab60b2d3320f2c5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "83a25d440d118b7d10779a884d35f31045949e27", "commitAfterChange": "84d8eddd970e46894d471cd2dd17ae8d86fb05db", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      public void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-        for (Iterator<T> iter = getFilteredChildren().iterator(); iter.hasNext(); ) {", "-            T each = iter.next();", "-            if (shouldRun(filter, each)) {", "-                try {", "-                    filter.apply(each);", "-                } catch (NoTestsRemainException e) {", "-                    iter.remove();", "+        synchronized (fLock) {", "+            List<T> sortedChildren = new ArrayList<T>(getFilteredChildren());", "+            try {", "+                for (Iterator<T> iter = sortedChildren.iterator(); iter.hasNext(); ) {", "+                    T each = iter.next();", "+                    if (shouldRun(filter, each)) {", "+                        try {", "+                            filter.apply(each);", "+                        } catch (NoTestsRemainException e) {", "+                            iter.remove();", "+                        }", "+                    } else {", "+                        iter.remove();", "+                    }", "-            } else {", "-                iter.remove();", "+            } finally {", "+                setFilteredChildren(sortedChildren);", "+"]}]}
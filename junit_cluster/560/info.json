{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e34c19f71e8488afc4d115140bf230a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08556c3e2a78a22508e9ade6fdc72ebf", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/ComparisonCompactor.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate String compactString(String source)", "signatureAfterChange": "      private String compactString(String source)", "diff": ["-\tprivate String compactString(String source) {", "-\t\tString result= DELTA_START + source.substring(fPrefix, source.length() - fSuffix + 1) + DELTA_END;", "-\t\tif (fPrefix > 0)", "-\t\t\tresult= computeCommonPrefix() + result;", "-\t\tif (fSuffix > 0)", "-\t\t\tresult= result + computeCommonSuffix();", "-\t\treturn result;", "-\t}", "+    private String compactString(String source) {", "+        String result = DELTA_START + source.substring(fPrefix, source.length() - fSuffix + 1) + DELTA_END;", "+        if (fPrefix > 0) {", "+            result = computeCommonPrefix() + result;", "+        }", "+        if (fSuffix > 0) {", "+            result = result + computeCommonSuffix();", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a6e6dc3bd7605e42d18bd1eb462597", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/Money.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t@Override \tpublic boolean equals(Object anObject)", "signatureAfterChange": "      @Override     public boolean equals(Object anObject)", "diff": ["-\t}", "-\t@Override", "-\tpublic boolean equals(Object anObject) {", "-\t\tif (isZero()) ", "-\t\t\tif (anObject instanceof IMoney)", "-\t\t\t\treturn ((IMoney)anObject).isZero();", "-\t\tif (anObject instanceof Money) {", "-\t\t\tMoney aMoney= (Money)anObject;", "-\t\t\treturn aMoney.currency().equals(currency())", "-\t\t\t\t\t\t\t && amount() == aMoney.amount();", "-\t\t}", "-\t\treturn false;", "-\t}", "+", "+    @Override", "+    public boolean equals(Object anObject) {", "+        if (isZero()) {", "+            if (anObject instanceof IMoney) {", "+                return ((IMoney) anObject).isZero();", "+            }", "+        }", "+        if (anObject instanceof Money) {", "+            Money aMoney = (Money) anObject;", "+            return aMoney.currency().equals(currency())", "+                    && amount() == aMoney.amount();", "+        }", "+        return false;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "129af4f2c2320b481e2887fde8b42efc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxHistory.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t\tpublic int compare(Description o1, Description o2)", "signatureAfterChange": "         public int compare(Description o1, Description o2)", "diff": ["-\tprivate class TestComparator implements Comparator<Description> {", "-\t\tpublic int compare(Description o1, Description o2) {", "-\t\t\t// Always prefer new tests", "-\t\t\tif (isNewTest(o1))", "-\t\t\t\treturn -1;", "-\t\t\tif (isNewTest(o2))", "-\t\t\t\treturn 1;", "-\t\t\t// Then most recently failed first", "-\t\t\tint result= getFailure(o2).compareTo(getFailure(o1));", "-\t\t\treturn result != 0 ? result", "-\t\t\t// Then shorter tests first", "-\t\t\t\t\t: getTestDuration(o1).compareTo(getTestDuration(o2));", "-\t\t}", "+    private class TestComparator implements Comparator<Description> {", "+        public int compare(Description o1, Description o2) {", "+            // Always prefer new tests", "+            if (isNewTest(o1)) {", "+                return -1;", "+            }", "+            if (isNewTest(o2)) {", "+                return 1;", "+            }", "+            // Then most recently failed first", "+            int result = getFailure(o2).compareTo(getFailure(o1));", "+            return result != 0 ? result", "+                    // Then shorter tests first", "+                    : getTestDuration(o1).compareTo(getTestDuration(o2));", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b80480782737a0673061c73766416f7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic Class<?> getTestClass()", "signatureAfterChange": "     public Class<?> getTestClass()", "diff": ["-\t */", "-\tpublic Class<?> getTestClass() {", "-\t\tif (fTestClass != null)", "-\t\t\treturn fTestClass;", "-\t\tString name= getClassName();", "-\t\tif (name == null)", "-\t\t\treturn null;", "-\t\ttry {", "-\t\t\tfTestClass= Class.forName(name, false, getClass().getClassLoader());", "-\t\t\treturn fTestClass;", "-\t\t} catch (ClassNotFoundException e) {", "-\t\t\treturn null;", "-\t\t}", "-\t}", "+     */", "+    public Class<?> getTestClass() {", "+        if (fTestClass != null) {", "+            return fTestClass;", "+        }", "+        String name = getClassName();", "+        if (name == null) {", "+            return null;", "+        }", "+        try {", "+            fTestClass = Class.forName(name, false, getClass().getClassLoader());", "+            return fTestClass;", "+        } catch (ClassNotFoundException e) {", "+            return null;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29deec125a7e0cff476b97f97dd503c6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/AssumptionViolatedException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void describeTo(Description description)", "signatureAfterChange": "      public void describeTo(Description description)", "diff": ["-\tpublic void describeTo(Description description) {", "-\t\tif (fAssumption != null)", "-\t\t\tdescription.appendText(fAssumption);", "-\t\tif (fValueMatcher) {", "-\t\t\tif (fAssumption != null)", "-\t\t\t\tdescription.appendText(\": \");", "-\t\t\tdescription.appendText(\"got: \");", "-\t\t\tdescription.appendValue(fValue);", "-\t\t\t", "-\t\t\tif (fMatcher != null) {", "-\t\t\t\tdescription.appendText(\", expected: \");", "-\t\t\t\tdescription.appendDescriptionOf(fMatcher);", "-\t\t\t}", "-\t\t}", "-\t}", "+", "+    public void describeTo(Description description) {", "+        if (fAssumption != null) {", "+            description.appendText(fAssumption);", "+        }", "+", "+        if (fValueMatcher) {", "+            if (fAssumption != null) {", "+                description.appendText(\": \");", "+            }", "+", "+            description.appendText(\"got: \");", "+            description.appendValue(fValue);", "+", "+            if (fMatcher != null) {", "+                description.appendText(\", expected: \");", "+                description.appendDescriptionOf(fMatcher);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "310a6f4696876539a6b705b1e3125170", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/Guesser.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\tprotected Object generateGuess(Class<?> returnType)", "signatureAfterChange": "          protected Object generateGuess(Class<?> returnType)", "diff": ["-\t\tprotected Object generateGuess(Class<?> returnType) {", "-\t\t\tif (returnType.equals(String.class))", "-\t\t\t\treturn \"GUESS\" + new Random().nextInt();", "-\t\t\tif (returnType.equals(Integer.class)", "-\t\t\t\t\t|| returnType.equals(int.class))", "-\t\t\t\treturn new Random().nextInt();", "-\t\t\treturn null;", "-\t\t}", "+        protected Object generateGuess(Class<?> returnType) {", "+            if (returnType.equals(String.class)) {", "+                return \"GUESS\" + new Random().nextInt();", "+            }", "+            if (returnType.equals(Integer.class)", "+                    || returnType.equals(int.class)) {", "+                return new Random().nextInt();", "+            }", "+            return null;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "331927b42857bd147ef0b4f521bc3391", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \t\t\tpublic void run()", "signatureAfterChange": "              public void run()", "diff": ["-\t\t", "-\t\t\tpublic void run() {", "-\t\t\t\tExecutorService service= Executors.newSingleThreadExecutor();", "-\t\t\t\tCallable<Object> callable= new Callable<Object>() {", "-\t\t\t\t\tpublic Object call() throws Exception {", "-\t\t\t\t\t\trunTestMethod();", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t};", "-\t\t\t\tFuture<Object> result= service.submit(callable);", "-\t\t\t\tservice.shutdown();", "-\t\t\t\ttry {", "-\t\t\t\t\tboolean terminated= service.awaitTermination(timeout,", "-\t\t\t\t\t\t\tTimeUnit.MILLISECONDS);", "-\t\t\t\t\tif (!terminated)", "-\t\t\t\t\t\tservice.shutdownNow();", "-\t\t\t\t\tresult.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation", "-\t\t\t\t} catch (TimeoutException e) {", "-\t\t\t\t\taddFailure(new Exception(String.format(\"test timed out after %d milliseconds\", timeout)));", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\taddFailure(e);", "-\t\t\t\t}\t\t\t\t", "-\t\t\t}", "+            public void run() {", "+                ExecutorService service = Executors.newSingleThreadExecutor();", "+                Callable<Object> callable = new Callable<Object>() {", "+                    public Object call() throws Exception {", "+                        runTestMethod();", "+                        return null;", "+                    }", "+                };", "+                Future<Object> result = service.submit(callable);", "+                service.shutdown();", "+                try {", "+                    boolean terminated = service.awaitTermination(timeout,", "+                            TimeUnit.MILLISECONDS);", "+                    if (!terminated) {", "+                        service.shutdownNow();", "+                    }", "+                    result.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation", "+                } catch (TimeoutException e) {", "+                    addFailure(new Exception(String.format(\"test timed out after %d milliseconds\", timeout)));", "+                } catch (Exception e) {", "+                    addFailure(e);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3570966052f556c4f90f17fc733e1d6b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/InexactComparisonCriteria.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tprotected void assertElementsEqual(Object expected, Object actual)", "signatureAfterChange": "      @Override     protected void assertElementsEqual(Object expected, Object actual)", "diff": ["-\t@Override", "-\tprotected void assertElementsEqual(Object expected, Object actual) {", "-\t\tif (expected instanceof Double)", "-\t\t\tAssert.assertEquals((Double)expected, (Double)actual, (Double)fDelta);", "-\t\telse", "-\t\t\tAssert.assertEquals((Float)expected, (Float)actual, (Float)fDelta);", "-\t}", "+", "+    @Override", "+    protected void assertElementsEqual(Object expected, Object actual) {", "+        if (expected instanceof Double) {", "+            Assert.assertEquals((Double) expected, (Double) actual, (Double) fDelta);", "+        } else {", "+            Assert.assertEquals((Float) expected, (Float) actual, (Float) fDelta);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3be6c33218b25c27133880f737d16f9d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tstatic public void assertEquals(String message, Object expected, Object actual)", "signatureAfterChange": "     static public void assertEquals(String message, Object expected, Object actual)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, Object expected, Object actual) {", "-\t\tif (expected == null && actual == null)", "-\t\t\treturn;", "-\t\tif (expected != null && expected.equals(actual))", "-\t\t\treturn;", "-\t\tfailNotEquals(message, expected, actual);", "-\t}", "+     */", "+    static public void assertEquals(String message, Object expected, Object actual) {", "+        if (expected == null && actual == null) {", "+            return;", "+        }", "+        if (expected != null && expected.equals(actual)) {", "+            return;", "+        }", "+        failNotEquals(message, expected, actual);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e9a9a80dedb2953bf8092a53d324685", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tprivate Class<?>[] directCategories(Description description)", "signatureAfterChange": "          private Class<?>[] directCategories(Description description)", "diff": ["-\t\tprivate Class<?>[] directCategories(Description description) {", "-\t\t\tif (description == null)", "-\t\t\t\treturn new Class<?>[0];", "-\t\t\tCategory annotation= description.getAnnotation(Category.class);", "-\t\t\tif (annotation == null)", "-\t\t\t\treturn new Class<?>[0];", "-\t\t\treturn annotation.value();", "-\t\t}", "+        private Class<?>[] directCategories(Description description) {", "+            if (description == null) {", "+                return new Class<?>[0];", "+            }", "+            Category annotation = description.getAnnotation(Category.class);", "+            if (annotation == null) {", "+                return new Class<?>[0];", "+            }", "+            return annotation.value();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "413475c0c5ff8074a5ba10cec9631151", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations)", "signatureAfterChange": "      private Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations)", "diff": ["-\tprivate Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations) {", "-\t\tif ((displayName == null) || (displayName.length() == 0))", "-\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\"The display name must not be empty.\");", "-\t\tif ((uniqueId == null))", "-\t\t\tthrow new IllegalArgumentException(", "-\t\t\t\t\t\"The unique id must not be null.\");", "-\t\tfTestClass= clazz;", "-\t\tfDisplayName= displayName;", "-\t\tfUniqueId= uniqueId;", "-\t\tfAnnotations= annotations;", "-\t}", "+    private Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations) {", "+        if ((displayName == null) || (displayName.length() == 0)) {", "+            throw new IllegalArgumentException(", "+                    \"The display name must not be empty.\");", "+        }", "+        if ((uniqueId == null)) {", "+            throw new IllegalArgumentException(", "+                    \"The unique id must not be null.\");", "+        }", "+        fTestClass = clazz;", "+        fDisplayName = displayName;", "+        fUniqueId = uniqueId;", "+        fAnnotations = annotations;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4859f3c47e119873fdbee8d549cfab51", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tstatic public void assertEquals(String message, float expected, float actual, float delta)", "signatureAfterChange": "     static public void assertEquals(String message, float expected, float actual, float delta)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, float expected, float actual, float delta) {", "-\t\tif (Float.compare(expected, actual) == 0)", "-\t\t\treturn;", "-\t\tif (!(Math.abs(expected - actual) <= delta))", "-\t\t\tfailNotEquals(message, new Float(expected), new Float(actual));", "-\t}", "+     */", "+    static public void assertEquals(String message, float expected, float actual, float delta) {", "+        if (Float.compare(expected, actual) == 0) {", "+            return;", "+        }", "+        if (!(Math.abs(expected - actual) <= delta)) {", "+            failNotEquals(message, new Float(expected), new Float(actual));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5018a6a6ce638653e152c67cc16666f2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StringableObject.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic Object stringableObject()", "signatureAfterChange": "      public Object stringableObject()", "diff": ["-\tpublic Object stringableObject() {", "-\t\tif (isListableArray())", "-\t\t\treturn Arrays.asList((Object[]) obj);", "-\t\telse", "-\t\t\treturn obj;", "-\t}", "+    public Object stringableObject() {", "+        if (isListableArray()) {", "+            return Arrays.asList((Object[]) obj);", "+        } else {", "+            return obj;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53068409c8623dbbdbe71e6263135d92", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/ComparisonCriteria.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic void arrayEquals(String message, Object expecteds, Object actuals) \t\t\tthrows ArrayComparisonFailure", "signatureAfterChange": "     public void arrayEquals(String message, Object expecteds, Object actuals)             throws ArrayComparisonFailure", "diff": ["-\t */", "-\tpublic void arrayEquals(String message, Object expecteds, Object actuals)", "-\t\t\tthrows ArrayComparisonFailure {", "-\t\tif (expecteds == actuals)", "-\t\t\treturn;", "-\t\tString header= message == null ? \"\" : message + \": \";", "+     */", "+    public void arrayEquals(String message, Object expecteds, Object actuals)", "+            throws ArrayComparisonFailure {", "+        if (expecteds == actuals) {", "+            return;", "+        }", "+        String header = message == null ? \"\" : message + \": \";", "-\t\tint expectedsLength= assertArraysAreSameLength(expecteds,", "-\t\t\t\tactuals, header);", "+        int expectedsLength = assertArraysAreSameLength(expecteds,", "+                actuals, header);", "-\t\tfor (int i= 0; i < expectedsLength; i++) {", "-\t\t\tObject expected= Array.get(expecteds, i);", "-\t\t\tObject actual= Array.get(actuals, i);", "+        for (int i = 0; i < expectedsLength; i++) {", "+            Object expected = Array.get(expecteds, i);", "+            Object actual = Array.get(actuals, i);", "-\t\t\tif (isArray(expected) && isArray(actual)) {", "-\t\t\t\ttry {", "-\t\t\t\t\tarrayEquals(message, expected, actual);", "-\t\t\t\t} catch (ArrayComparisonFailure e) {", "-\t\t\t\t\te.addDimension(i);", "-\t\t\t\t\tthrow e;", "-\t\t\t\t}", "-\t\t\t} else", "-\t\t\t\ttry {", "-\t\t\t\t\tassertElementsEqual(expected, actual);", "-\t\t\t\t} catch (AssertionError e) {", "-\t\t\t\t\tthrow new ArrayComparisonFailure(header, e, i);", "-\t\t\t\t}", "-\t\t}", "-\t}", "+            if (isArray(expected) && isArray(actual)) {", "+                try {", "+                    arrayEquals(message, expected, actual);", "+                } catch (ArrayComparisonFailure e) {", "+                    e.addDimension(i);", "+                    throw e;", "+                }", "+            } else {", "+                try {", "+                    assertElementsEqual(expected, actual);", "+                } catch (AssertionError e) {", "+                    throw new ArrayComparisonFailure(header, e, i);", "+                }", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62cbec59e6bd6889995ba1a9ccb30000", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tpublic void filter(Filter filter) throws NoTestsRemainException {", "-\t\tfor (Iterator<T> iter = getFilteredChildren().iterator(); iter.hasNext(); ) {", "-\t\t\tT each = iter.next();", "-\t\t\tif (shouldRun(filter, each))", "-\t\t\t\ttry {", "-\t\t\t\t\tfilter.apply(each);", "-\t\t\t\t} catch (NoTestsRemainException e) {", "-\t\t\t\t\titer.remove();", "-\t\t\t\t}", "-\t\t\telse", "-\t\t\t\titer.remove();", "-\t\t}", "-\t    if (getFilteredChildren().isEmpty()) {", "-\t        throw new NoTestsRemainException();", "-\t    }", "-\t}", "+    public void filter(Filter filter) throws NoTestsRemainException {", "+        for (Iterator<T> iter = getFilteredChildren().iterator(); iter.hasNext(); ) {", "+            T each = iter.next();", "+            if (shouldRun(filter, each)) {", "+                try {", "+                    filter.apply(each);", "+                } catch (NoTestsRemainException e) {", "+                    iter.remove();", "+                }", "+            } else {", "+                iter.remove();", "+            }", "+        }", "+        if (getFilteredChildren().isEmpty()) {", "+            throw new NoTestsRemainException();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64197d961dce0a584dacdc3e04cee4c6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \t@SuppressWarnings(\"unchecked\") \tprivate Iterable<Object[]> allParameters() throws Throwable", "signatureAfterChange": "      @SuppressWarnings(\"unchecked\")     private Iterable<Object[]> allParameters() throws Throwable", "diff": ["-\t@SuppressWarnings(\"unchecked\")", "-\tprivate Iterable<Object[]> allParameters() throws Throwable {", "-\t\tObject parameters= getParametersMethod().invokeExplosively(null);", "-\t\tif (parameters instanceof Iterable)", "-\t\t\treturn (Iterable<Object[]>) parameters;", "-\t\telse", "-\t\t\tthrow parametersMethodReturnedWrongType();", "-\t}", "+    @SuppressWarnings(\"unchecked\")", "+    private Iterable<Object[]> allParameters() throws Throwable {", "+        Object parameters = getParametersMethod().invokeExplosively(null);", "+        if (parameters instanceof Iterable) {", "+            return (Iterable<Object[]>) parameters;", "+        } else {", "+            throw parametersMethodReturnedWrongType();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d258d5c93161d09ddc84eb27307abc1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/MultipleFailureException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t@SuppressWarnings(\"deprecation\") \tpublic static void assertEmpty(List<Throwable> errors) throws Throwable", "signatureAfterChange": "     @SuppressWarnings(\"deprecation\")     public static void assertEmpty(List<Throwable> errors) throws Throwable", "diff": ["-\t */", "-\t@SuppressWarnings(\"deprecation\")", "-\tpublic static void assertEmpty(List<Throwable> errors) throws Throwable {", "-\t\tif (errors.isEmpty())", "-\t\t\treturn;", "-\t\tif (errors.size() == 1)", "-\t\t\tthrow errors.get(0);", "-\t\t/*", "-\t\t * Many places in the code are documented to throw", "-\t\t * org.junit.internal.runners.model.MultipleFailureException.", "-\t\t * That class now extends this one, so we throw the internal", "-\t\t * exception in case developers have tests that catch", "-\t\t * MultipleFailureException.", "-\t\t */", "-\t\tthrow new org.junit.internal.runners.model.MultipleFailureException(errors);", "-\t}", "+     */", "+    @SuppressWarnings(\"deprecation\")", "+    public static void assertEmpty(List<Throwable> errors) throws Throwable {", "+        if (errors.isEmpty()) {", "+            return;", "+        }", "+        if (errors.size() == 1) {", "+            throw errors.get(0);", "+        }", "+", "+        /*", "+           * Many places in the code are documented to throw", "+           * org.junit.internal.runners.model.MultipleFailureException.", "+           * That class now extends this one, so we throw the internal", "+           * exception in case developers have tests that catch", "+           * MultipleFailureException.", "+           */", "+        throw new org.junit.internal.runners.model.MultipleFailureException(errors);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "711af5ad903f582a952cfca4de23384e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tpublic Test getTest(String suiteClassName)", "signatureAfterChange": "     public Test getTest(String suiteClassName)", "diff": ["-\t */", "-\tpublic Test getTest(String suiteClassName) {", "-\t\tif (suiteClassName.length() <= 0) {", "-\t\t\tclearStatus();", "-\t\t\treturn null;", "-\t\t}", "-\t\tClass<?> testClass= null;", "-\t\ttry {", "-\t\t\ttestClass= loadSuiteClass(suiteClassName);", "-\t\t} catch (ClassNotFoundException e) {", "-\t\t\tString clazz= e.getMessage();", "-\t\t\tif (clazz == null)", "-\t\t\t\tclazz= suiteClassName;", "-\t\t\trunFailed(\"Class not found \\\"\"+clazz+\"\\\"\");", "-\t\t\treturn null;", "-\t\t} catch(Exception e) {", "-\t\t\trunFailed(\"Error: \"+e.toString());", "-\t\t\treturn null;", "-\t\t}", "-\t\tMethod suiteMethod= null;", "-\t\ttry {", "-\t\t\tsuiteMethod= testClass.getMethod(SUITE_METHODNAME, new Class[0]);", "-\t \t} catch(Exception e) {", "-\t \t\t// try to extract a test suite automatically", "-\t\t\tclearStatus();", "-\t\t\treturn new TestSuite(testClass);", "-\t\t}", "-\t\tif (! Modifier.isStatic(suiteMethod.getModifiers())) {", "-\t\t\trunFailed(\"Suite() method must be static\");", "-\t\t\treturn null;", "-\t\t}", "-\t\tTest test= null;", "-\t\ttry {", "-\t\t\ttest= (Test)suiteMethod.invoke(null, (Object[])new Class[0]); // static method", "-\t\t\tif (test == null)", "-\t\t\t\treturn test;", "-\t\t}", "-\t\tcatch (InvocationTargetException e) {", "-\t\t\trunFailed(\"Failed to invoke suite():\" + e.getTargetException().toString());", "-\t\t\treturn null;", "-\t\t}", "-\t\tcatch (IllegalAccessException e) {", "-\t\t\trunFailed(\"Failed to invoke suite():\" + e.toString());", "-\t\t\treturn null;", "-\t\t}", "+     */", "+    public Test getTest(String suiteClassName) {", "+        if (suiteClassName.length() <= 0) {", "+            clearStatus();", "+            return null;", "+        }", "+        Class<?> testClass = null;", "+        try {", "+            testClass = loadSuiteClass(suiteClassName);", "+        } catch (ClassNotFoundException e) {", "+            String clazz = e.getMessage();", "+            if (clazz == null) {", "+                clazz = suiteClassName;", "+            }", "+            runFailed(\"Class not found \\\"\" + clazz + \"\\\"\");", "+            return null;", "+        } catch (Exception e) {", "+            runFailed(\"Error: \" + e.toString());", "+            return null;", "+        }", "+        Method suiteMethod = null;", "+        try {", "+            suiteMethod = testClass.getMethod(SUITE_METHODNAME, new Class[0]);", "+        } catch (Exception e) {", "+            // try to extract a test suite automatically", "+            clearStatus();", "+            return new TestSuite(testClass);", "+        }", "+        if (!Modifier.isStatic(suiteMethod.getModifiers())) {", "+            runFailed(\"Suite() method must be static\");", "+            return null;", "+        }", "+        Test test = null;", "+        try {", "+            test = (Test) suiteMethod.invoke(null, (Object[]) new Class[0]); // static method", "+            if (test == null) {", "+                return test;", "+            }", "+        } catch (InvocationTargetException e) {", "+            runFailed(\"Failed to invoke suite():\" + e.getTargetException().toString());", "+            return null;", "+        } catch (IllegalAccessException e) {", "+            runFailed(\"Failed to invoke suite():\" + e.toString());", "+            return null;", "+        }", "-\t\tclearStatus();", "-\t\treturn test;", "-\t}", "+        clearStatus();", "+        return test;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7265e02d9ca0450bf3c66a8bd12638ec", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \tstatic public void assertEquals(String message, double expected, double actual, double delta)", "signatureAfterChange": "     static public void assertEquals(String message, double expected, double actual, double delta)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, double expected, double actual, double delta) {", "-\t\tif (Double.compare(expected, actual) == 0)", "-\t\t\treturn;", "-\t\tif (!(Math.abs(expected-actual) <= delta))", "-\t\t\tfailNotEquals(message, new Double(expected), new Double(actual));", "-\t}", "+     */", "+    static public void assertEquals(String message, double expected, double actual, double delta) {", "+        if (Double.compare(expected, actual) == 0) {", "+            return;", "+        }", "+        if (!(Math.abs(expected - actual) <= delta)) {", "+            failNotEquals(message, new Double(expected), new Double(actual));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "762cead3cda2512910379f5780ba2ac7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void validateStatic(FrameworkMember<?> member, \t\t\tList<Throwable> errors)", "signatureAfterChange": "      private void validateStatic(FrameworkMember<?> member,             List<Throwable> errors)", "diff": ["-\tprivate void validateStatic(FrameworkMember<?> member,", "-\t\t\tList<Throwable> errors) {", "-\t\tif (fStaticMembers && !member.isStatic())", "-\t\t\taddError(errors, member, \"must be static.\");", "-\t\tif (!fStaticMembers && member.isStatic())", "-\t\t\taddError(errors, member, \"must not be static.\");", "-\t}", "+    private void validateStatic(FrameworkMember<?> member,", "+            List<Throwable> errors) {", "+        if (fStaticMembers && !member.isStatic()) {", "+            addError(errors, member, \"must be static.\");", "+        }", "+        if (!fStaticMembers && member.isStatic()) {", "+            addError(errors, member, \"must not be static.\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "785f74824778e98ae3c2a65c4100a44b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic static String getFilteredTrace(String stack)", "signatureAfterChange": "     public static String getFilteredTrace(String stack)", "diff": ["-\t */", "-\tpublic static String getFilteredTrace(String stack) {", "-\t\tif (showStackRaw())", "-\t\t\treturn stack;", "-\t\tStringWriter sw= new StringWriter();", "-\t\tPrintWriter pw= new PrintWriter(sw);", "-\t\tStringReader sr= new StringReader(stack);", "-\t\tBufferedReader br= new BufferedReader(sr);", "+     */", "+    public static String getFilteredTrace(String stack) {", "+        if (showStackRaw()) {", "+            return stack;", "+        }", "-\t\tString line;", "-\t\ttry {", "-\t\t\twhile ((line= br.readLine()) != null) {", "-\t\t\t\tif (!filterLine(line))", "-\t\t\t\t\tpw.println(line);", "-\t\t\t}", "-\t\t} catch (Exception IOException) {", "-\t\t\treturn stack; // return the stack unfiltered", "-\t\t}", "-\t\treturn sw.toString();", "-\t}", "+        StringWriter sw = new StringWriter();", "+        PrintWriter pw = new PrintWriter(sw);", "+        StringReader sr = new StringReader(stack);", "+        BufferedReader br = new BufferedReader(sr);", "+        String line;", "+        try {", "+            while ((line = br.readLine()) != null) {", "+                if (!filterLine(line)) {", "+                    pw.println(line);", "+                }", "+            }", "+        } catch (Exception IOException) {", "+            return stack; // return the stack unfiltered", "+        }", "+        return sw.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ba32bd864142ffc43310551ea01452b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tprivate void optionallyHandleException(Throwable e, boolean handleException) \t\t\t\t\tthrows Throwable", "signatureAfterChange": "      private void optionallyHandleException(Throwable e, boolean handleException)             throws Throwable", "diff": ["-\tprivate void optionallyHandleException(Throwable e, boolean handleException)", "-\t\t\t\t\tthrows Throwable {", "-\t\tif (handleException)", "-\t\t\thandleException(e);", "-\t\telse", "-\t\t\tthrow e;", "-\t}", "+    private void optionallyHandleException(Throwable e, boolean handleException)", "+            throws Throwable {", "+        if (handleException) {", "+            handleException(e);", "+        } else {", "+            throw e;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "802394ac53368d3a4b7d2338e232ac54", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Test asTest(Description description)", "signatureAfterChange": "      public Test asTest(Description description)", "diff": ["-\t", "-\tpublic Test asTest(Description description) {", "-\t\tif (description.isSuite())", "-\t\t\treturn createTest(description);", "-\t\telse {", "-\t\t\tif (!containsKey(description))", "-\t\t\t\tput(description, createTest(description));", "-\t\t\treturn get(description);", "-\t\t}", "-\t}", "+    public Test asTest(Description description) {", "+        if (description.isSuite()) {", "+            return createTest(description);", "+        } else {", "+            if (!containsKey(description)) {", "+                put(description, createTest(description));", "+            }", "+            return get(description);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8030ee0a24d60acfb09c42ca3a07519c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tstatic public void assertEquals(String message, String expected, String actual)", "signatureAfterChange": "     static public void assertEquals(String message, String expected, String actual)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, String expected, String actual) {", "-\t\tif (expected == null && actual == null)", "-\t\t\treturn;", "-\t\tif (expected != null && expected.equals(actual))", "-\t\t\treturn;", "-\t\tString cleanMessage= message == null ? \"\" : message;", "-\t\tthrow new ComparisonFailure(cleanMessage, expected, actual);", "-\t}", "+     */", "+    static public void assertEquals(String message, String expected, String actual) {", "+        if (expected == null && actual == null) {", "+            return;", "+        }", "+        if (expected != null && expected.equals(actual)) {", "+            return;", "+        }", "+        String cleanMessage = message == null ? \"\" : message;", "+        throw new ComparisonFailure(cleanMessage, expected, actual);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8224a4acdfd710371bcbcb0de8f3145c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tpublic void filter(Filter filter) throws NoTestsRemainException {", "-\t\tfor (Iterator<Method> iter= fTestMethods.iterator(); iter.hasNext();) {", "-\t\t\tMethod method= iter.next();", "-\t\t\tif (!filter.shouldRun(methodDescription(method)))", "-\t\t\t\titer.remove();", "-\t\t}", "-\t\tif (fTestMethods.isEmpty())", "-\t\t\tthrow new NoTestsRemainException();", "-\t}", "+", "+    public void filter(Filter filter) throws NoTestsRemainException {", "+        for (Iterator<Method> iter = fTestMethods.iterator(); iter.hasNext(); ) {", "+            Method method = iter.next();", "+            if (!filter.shouldRun(methodDescription(method))) {", "+                iter.remove();", "+            }", "+        }", "+        if (fTestMethods.isEmpty()) {", "+            throw new NoTestsRemainException();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85220a5b4a7a1c0085845e74df10d94b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass)", "signatureAfterChange": "      public List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass)", "diff": ["-\t", "-\tpublic List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {", "-\t\tList<Method> results= new ArrayList<Method>();", "-\t\tfor (Class<?> eachClass : getSuperClasses(fClass)) {", "-\t\t\tMethod[] methods= MethodSorter.getDeclaredMethods(eachClass);", "-\t\t\tfor (Method eachMethod : methods) {", "-\t\t\t\tAnnotation annotation= eachMethod.getAnnotation(annotationClass);", "-\t\t\t\tif (annotation != null && ! isShadowed(eachMethod, results)) ", "-\t\t\t\t\tresults.add(eachMethod);", "-\t\t\t}", "-\t\t}", "-\t\tif (runsTopToBottom(annotationClass))", "-\t\t\tCollections.reverse(results);", "-\t\treturn results;", "-\t}", "+    public List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {", "+        List<Method> results = new ArrayList<Method>();", "+        for (Class<?> eachClass : getSuperClasses(fClass)) {", "+            Method[] methods = MethodSorter.getDeclaredMethods(eachClass);", "+            for (Method eachMethod : methods) {", "+                Annotation annotation = eachMethod.getAnnotation(annotationClass);", "+                if (annotation != null && !isShadowed(eachMethod, results)) {", "+                    results.add(eachMethod);", "+                }", "+            }", "+        }", "+        if (runsTopToBottom(annotationClass)) {", "+            Collections.reverse(results);", "+        }", "+        return results;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89808156ce3034c511cc93b68278e88c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "dc44abf520611a8722e75ba1d32df6a28183e4e3", "commitAfterChange": "bb91daf8e0939d787ffb5a3eda05c2d626cd9851", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tprivate Class<? extends Throwable> getExpectedException(Test annotation)", "signatureAfterChange": "      private Class<? extends Throwable> getExpectedException(Test annotation)", "diff": ["-\t", "-\tprivate Class<? extends Throwable> getExpectedException(Test annotation) {", "-\t\tif (annotation == null || annotation.expected() == None.class)", "-\t\t\treturn null;", "-\t\telse", "-\t\t\treturn annotation.expected();", "-\t}", "+", "+    private Class<? extends Throwable> getExpectedException(Test annotation) {", "+        if (annotation == null || annotation.expected() == None.class) {", "+            return null;", "+        } else {", "+            return annotation.expected();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8de1bd22f36226559041330313ffe958", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected String processArguments(String[] args)", "signatureAfterChange": "     protected String processArguments(String[] args)", "diff": ["-\t */", "-\tprotected String processArguments(String[] args) {", "-\t\tString suiteName= null;", "-\t\tfor (int i= 0; i < args.length; i++) {", "-\t\t\tif (args[i].equals(\"-noloading\")) {", "-\t\t\t\tsetLoading(false);", "-\t\t\t} else if (args[i].equals(\"-nofilterstack\")) {", "-\t\t\t\tfgFilterStack= false;", "-\t\t\t} else if (args[i].equals(\"-c\")) {", "-\t\t\t\tif (args.length > i+1)", "-\t\t\t\t\tsuiteName= extractClassName(args[i+1]);", "-\t\t\t\telse", "-\t\t\t\t\tSystem.out.println(\"Missing Test class name\");", "-\t\t\t\ti++;", "-\t\t\t} else {", "-\t\t\t\tsuiteName= args[i];", "-\t\t\t}", "-\t\t}", "-\t\treturn suiteName;", "-\t}", "+     */", "+    protected String processArguments(String[] args) {", "+        String suiteName = null;", "+        for (int i = 0; i < args.length; i++) {", "+            if (args[i].equals(\"-noloading\")) {", "+                setLoading(false);", "+            } else if (args[i].equals(\"-nofilterstack\")) {", "+                fgFilterStack = false;", "+            } else if (args[i].equals(\"-c\")) {", "+                if (args.length > i + 1) {", "+                    suiteName = extractClassName(args[i + 1]);", "+                } else {", "+                    System.out.println(\"Missing Test class name\");", "+                }", "+                i++;", "+            } else {", "+                suiteName = args[i];", "+            }", "+        }", "+        return suiteName;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a93ad70a0aa43ebb2e36fdc6b7d39d3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void handleException(Throwable e) throws Throwable", "signatureAfterChange": "      private void handleException(Throwable e) throws Throwable", "diff": ["-\tprivate void handleException(Throwable e) throws Throwable {", "-\t\tif (fMatcherBuilder.expectsThrowable())", "-\t\t\tassertThat(e, fMatcherBuilder.build());", "-\t\telse", "-\t\t\tthrow e;", "-\t}", "+    private void handleException(Throwable e) throws Throwable {", "+        if (fMatcherBuilder.expectsThrowable()) {", "+            assertThat(e, fMatcherBuilder.build());", "+        } else {", "+            throw e;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e6b359fd31af90e6357bc086d6521a3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tprivate Class<? extends Throwable> getExpectedException(Test annotation)", "signatureAfterChange": "      private Class<? extends Throwable> getExpectedException(Test annotation)", "diff": ["-\t", "-\tprivate Class<? extends Throwable> getExpectedException(Test annotation) {", "-\t\tif (annotation == null || annotation.expected() == None.class)", "-\t\t\treturn null;", "-\t\telse", "-\t\t\treturn annotation.expected();", "-\t}", "+", "+    private Class<? extends Throwable> getExpectedException(Test annotation) {", "+        if (annotation == null || annotation.expected() == None.class) {", "+            return null;", "+        } else {", "+            return annotation.expected();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5ccf2708c7f27e01c50ad0e921cff02", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprivate void throwExceptionForUnfinishedThread(StatementThread thread) \t\t\tthrows Throwable", "signatureAfterChange": "      private void throwExceptionForUnfinishedThread(StatementThread thread)             throws Throwable", "diff": ["-\tprivate void throwExceptionForUnfinishedThread(StatementThread thread)", "-\t\t\tthrows Throwable {", "-\t\tif (thread.fExceptionThrownByOriginalStatement != null)", "-\t\t\tthrow thread.fExceptionThrownByOriginalStatement;", "-\t\telse", "-\t\t\tthrowTimeoutException(thread);", "-\t}", "+    private void throwExceptionForUnfinishedThread(StatementThread thread)", "+            throws Throwable {", "+        if (thread.fExceptionThrownByOriginalStatement != null) {", "+            throw thread.fExceptionThrownByOriginalStatement;", "+        } else {", "+            throwTimeoutException(thread);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c4263ffdf112af723cfd45a4c2c260", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/textui/ResultPrinter.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprotected void printDefects(Enumeration<TestFailure> booBoos, int count, String type)", "signatureAfterChange": "      protected void printDefects(Enumeration<TestFailure> booBoos, int count, String type)", "diff": ["-\t", "-\tprotected void printDefects(Enumeration<TestFailure> booBoos, int count, String type) {", "-\t\tif (count == 0) return;", "-\t\tif (count == 1)", "-\t\t\tgetWriter().println(\"There was \" + count + \" \" + type + \":\");", "-\t\telse", "-\t\t\tgetWriter().println(\"There were \" + count + \" \" + type + \"s:\");", "-\t\tfor (int i= 1; booBoos.hasMoreElements(); i++) {", "-\t\t\tprintDefect(booBoos.nextElement(), i);", "-\t\t}", "-\t}", "+    protected void printDefects(Enumeration<TestFailure> booBoos, int count, String type) {", "+        if (count == 0) return;", "+        if (count == 1) {", "+            getWriter().println(\"There was \" + count + \" \" + type + \":\");", "+        } else {", "+            getWriter().println(\"There were \" + count + \" \" + type + \"s:\");", "+        }", "+        for (int i = 1; booBoos.hasMoreElements(); i++) {", "+            printDefect(booBoos.nextElement(), i);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b45f68b360b90b1c25eb8abbf0b1fdd2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tstatic public void assertEquals(String message, Object expected, \t\t\tObject actual)", "signatureAfterChange": "     static public void assertEquals(String message, Object expected,             Object actual)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, Object expected,", "-\t\t\tObject actual) {", "-\t\tif (equalsRegardingNull(expected, actual))", "-\t\t\treturn;", "-\t\telse if (expected instanceof String && actual instanceof String) {", "-\t\t\tString cleanMessage= message == null ? \"\" : message;", "-\t\t\tthrow new ComparisonFailure(cleanMessage, (String) expected,", "-\t\t\t\t\t(String) actual);", "-\t\t} else", "-\t\t\tfailNotEquals(message, expected, actual);", "-\t}", "+     */", "+    static public void assertEquals(String message, Object expected,", "+            Object actual) {", "+        if (equalsRegardingNull(expected, actual)) {", "+            return;", "+        } else if (expected instanceof String && actual instanceof String) {", "+            String cleanMessage = message == null ? \"\" : message;", "+            throw new ComparisonFailure(cleanMessage, (String) expected,", "+                    (String) actual);", "+        } else {", "+            failNotEquals(message, expected, actual);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c32bad385f1c0a220c3f4aa98405ec", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\tprivate String compactString(String source)", "signatureAfterChange": "          private String compactString(String source)", "diff": ["-\t\tprivate String compactString(String source) {", "-\t\t\tString result= DELTA_START + source.substring(fPrefix, source.length() - fSuffix + 1) + DELTA_END;", "-\t\t\tif (fPrefix > 0)", "-\t\t\t\tresult= computeCommonPrefix() + result;", "-\t\t\tif (fSuffix > 0)", "-\t\t\t\tresult= result + computeCommonSuffix();", "-\t\t\treturn result;", "-\t\t}", "+", "+        private String compactString(String source) {", "+            String result = DELTA_START + source.substring(fPrefix, source.length() - fSuffix + 1) + DELTA_END;", "+            if (fPrefix > 0) {", "+                result = computeCommonPrefix() + result;", "+            }", "+            if (fSuffix > 0) {", "+                result = result + computeCommonSuffix();", "+            }", "+            return result;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc27a427d5fcb381c99dbe65ad2a106f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "bbbb8571f1a3cdcb9af977867c7a16de3a1f5a76", "commitAfterChange": "d96a05f8d33ed781c701c58dd285bf6464112719", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private Thread[] getThreadArray(ThreadGroup group)", "signatureAfterChange": "     private Thread[] getThreadArray(ThreadGroup group)", "diff": ["-            if (enumCount < enumSize) break;", "+            if (enumCount < enumSize) {", "+                break;", "+            }", "-            if (++loopCount >= 5) ", "+            if (++loopCount >= 5) {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c39da80b6e4f8adc7b44294ab9009e13", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\tprivate String getName(Test test)", "signatureAfterChange": "          private String getName(Test test)", "diff": ["-\t\tprivate String getName(Test test) {", "-\t\t\tif (test instanceof TestCase)", "-\t\t\t\treturn ((TestCase) test).getName();", "-\t\t\telse", "-\t\t\t\treturn test.toString();", "-\t\t}", "+        private String getName(Test test) {", "+            if (test instanceof TestCase) {", "+                return ((TestCase) test).getName();", "+            } else {", "+                return test.toString();", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3eefc238c1c1fd3a0d2cd3e7106e15f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tprivate void addTestMethod(Method m, List<String> names, Class<?> theClass)", "signatureAfterChange": "      private void addTestMethod(Method m, List<String> names, Class<?> theClass)", "diff": ["-\tprivate void addTestMethod(Method m, List<String> names, Class<?> theClass) {", "-\t\tString name= m.getName();", "-\t\tif (names.contains(name))", "-\t\t\treturn;", "-\t\tif (! isPublicTestMethod(m)) {", "-\t\t\tif (isTestMethod(m))", "-\t\t\t\taddTest(warning(\"Test method isn't public: \"+ m.getName() + \"(\" + theClass.getCanonicalName() + \")\"));", "-\t\t\treturn;", "-\t\t}", "-\t\tnames.add(name);", "-\t\taddTest(createTest(theClass, name));", "-\t}", "+", "+    private void addTestMethod(Method m, List<String> names, Class<?> theClass) {", "+        String name = m.getName();", "+        if (names.contains(name)) {", "+            return;", "+        }", "+        if (!isPublicTestMethod(m)) {", "+            if (isTestMethod(m)) {", "+                addTest(warning(\"Test method isn't public: \" + m.getName() + \"(\" + theClass.getCanonicalName() + \")\"));", "+            }", "+            return;", "+        }", "+        names.add(name);", "+        addTest(createTest(theClass, name));", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5c603603a0fa329dfa6833ad171f501", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/tests/runner/TextRunnerTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tvoid execTest(String testClass, boolean success) throws Exception", "signatureAfterChange": "      void execTest(String testClass, boolean success) throws Exception", "diff": ["-\t", "-\tvoid execTest(String testClass, boolean success) throws Exception {", "-\t\tString java= System.getProperty(\"java.home\")+File.separator+\"bin\"+File.separator+\"java\";", "-\t\tString cp= System.getProperty(\"java.class.path\");", "-\t\t//use -classpath for JDK 1.1.7 compatibility", "-\t\tString [] cmd= { java, \"-classpath\", cp, \"junit.textui.TestRunner\", testClass}; ", "-\t\tProcess p= Runtime.getRuntime().exec(cmd);", "-\t\tInputStream i= p.getInputStream();", "-\t\twhile((i.read()) != -1) ", "-\t\t\t; //System.out.write(b); ", "-\t\tassertTrue((p.waitFor() == 0) == success);", "-\t\tif (success)", "-\t\t\tassertTrue(p.exitValue() == 0);", "-\t\telse", "-\t\t\tassertFalse(p.exitValue() == 0);", "-\t}", "+", "+    void execTest(String testClass, boolean success) throws Exception {", "+        String java = System.getProperty(\"java.home\") + File.separator + \"bin\" + File.separator + \"java\";", "+        String cp = System.getProperty(\"java.class.path\");", "+        //use -classpath for JDK 1.1.7 compatibility", "+        String[] cmd = {java, \"-classpath\", cp, \"junit.textui.TestRunner\", testClass};", "+        Process p = Runtime.getRuntime().exec(cmd);", "+        InputStream i = p.getInputStream();", "+        while ((i.read()) != -1)", "+            ; //System.out.write(b);", "+        assertTrue((p.waitFor() == 0) == success);", "+        if (success) {", "+            assertTrue(p.exitValue() == 0);", "+        } else {", "+            assertFalse(p.exitValue() == 0);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c877be10cddad2f74f9d3b8fb4f99a3a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tstatic private boolean doubleIsDifferent(double d1, double d2, double delta)", "signatureAfterChange": "      static private boolean doubleIsDifferent(double d1, double d2, double delta)", "diff": ["-\t\t}", "-\tstatic private boolean doubleIsDifferent(double d1, double d2, double delta) {", "-\t\tif (Double.compare(d1, d2) == 0)", "-\t\t\treturn false;", "-\t\tif ((Math.abs(d1 - d2) <= delta))", "-\t\t\treturn false;", "-\t\t", "-\t\treturn true;", "-\t}", "+    static private boolean doubleIsDifferent(double d1, double d2, double delta) {", "+        if (Double.compare(d1, d2) == 0) {", "+            return false;", "+        }", "+        if ((Math.abs(d1 - d2) <= delta)) {", "+            return false;", "+        }", "+        return true;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca5db3315a3b83707c604417f80720db", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void run()", "signatureAfterChange": "      public void run()", "diff": ["-\tpublic void run() {", "-\t\tif (fTestMethod.isIgnored()) {", "-\t\t\tfNotifier.fireTestIgnored(fDescription);", "-\t\t\treturn;", "-\t\t}", "-\t\tfNotifier.fireTestStarted(fDescription);", "-\t\ttry {", "-\t\t\tlong timeout= fTestMethod.getTimeout();", "-\t\t\tif (timeout > 0)", "-\t\t\t\trunWithTimeout(timeout);", "-\t\t\telse", "-\t\t\t\trunTest();", "-\t\t} finally {", "-\t\t\tfNotifier.fireTestFinished(fDescription);", "-\t\t}", "-\t}", "+    public void run() {", "+        if (fTestMethod.isIgnored()) {", "+            fNotifier.fireTestIgnored(fDescription);", "+            return;", "+        }", "+        fNotifier.fireTestStarted(fDescription);", "+        try {", "+            long timeout = fTestMethod.getTimeout();", "+            if (timeout > 0) {", "+                runWithTimeout(timeout);", "+            } else {", "+                runTest();", "+            }", "+        } finally {", "+            fNotifier.fireTestFinished(fDescription);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d291c1dd1a917a963c6af6f0f307e025", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprivate Test testCaseForClass(Class<?> each)", "signatureAfterChange": "      private Test testCaseForClass(Class<?> each)", "diff": ["-\tprivate Test testCaseForClass(Class<?> each) {", "-\t\tif (TestCase.class.isAssignableFrom(each))", "-\t\t\treturn new TestSuite(each.asSubclass(TestCase.class));", "-\t\telse", "-\t\t\treturn warning(each.getCanonicalName() + \" does not extend TestCase\");", "-\t}", "+", "+    private Test testCaseForClass(Class<?> each) {", "+        if (TestCase.class.isAssignableFrom(each)) {", "+            return new TestSuite(each.asSubclass(TestCase.class));", "+        } else {", "+            return warning(each.getCanonicalName() + \" does not extend TestCase\");", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e253964579e974883687188c918bc8d3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " \tstatic public void assertEquals(String message, float expected, \t\t\tfloat actual, float delta)", "signatureAfterChange": "     static public void assertEquals(String message, float expected,             float actual, float delta)", "diff": ["-\t */", "-\tstatic public void assertEquals(String message, float expected,", "-\t\t\tfloat actual, float delta) {", "-\t\tif (Float.compare(expected, actual) == 0)", "-\t\t\treturn;", "-\t\tif (!(Math.abs(expected - actual) <= delta))", "-\t\t\tfailNotEquals(message, new Float(expected), new Float(actual));", "-\t\t}", "+     */", "+    static public void assertEquals(String message, float expected,", "+            float actual, float delta) {", "+        if (Float.compare(expected, actual) == 0) {", "+            return;", "+        }", "+        if (!(Math.abs(expected - actual) <= delta)) {", "+            failNotEquals(message, new Float(expected), new Float(actual));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea72dd8ce4b3c413901e5f26790d5c13", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/TestMethod.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tprotected Class<? extends Throwable> getExpectedException()", "signatureAfterChange": "      protected Class<? extends Throwable> getExpectedException()", "diff": ["-\tprotected Class<? extends Throwable> getExpectedException() {", "-\t\tTest annotation= fMethod.getAnnotation(Test.class);", "-\t\tif (annotation == null || annotation.expected() == None.class)", "-\t\t\treturn null;", "-\t\telse", "-\t\t\treturn annotation.expected();", "-\t}", "+    protected Class<? extends Throwable> getExpectedException() {", "+        Test annotation = fMethod.getAnnotation(Test.class);", "+        if (annotation == null || annotation.expected() == None.class) {", "+            return null;", "+        } else {", "+            return annotation.expected();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f580d761a03dd4b9c92188d08b23f4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapter.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate Description removeIgnored(Description description)", "signatureAfterChange": "      private Description removeIgnored(Description description)", "diff": ["-\tprivate Description removeIgnored(Description description) {", "-\t\tif (isIgnored(description))", "-\t\t\treturn Description.EMPTY;", "-\t\tDescription result = description.childlessCopy();", "-\t\tfor (Description each : description.getChildren()) {", "-\t\t\tDescription child= removeIgnored(each);", "-\t\t\tif (! child.isEmpty())", "-\t\t\t\tresult.addChild(child);", "-\t\t}", "-\t\treturn result;", "-\t}", "+    private Description removeIgnored(Description description) {", "+        if (isIgnored(description)) {", "+            return Description.EMPTY;", "+        }", "+        Description result = description.childlessCopy();", "+        for (Description each : description.getChildren()) {", "+            Description child = removeIgnored(each);", "+            if (!child.isEmpty()) {", "+                result.addChild(child);", "+            }", "+        }", "+        return result;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fad6a3847aaafa249cce9264ea80a29b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "670b9db47e707d0abb89b46c396631b5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/NoGenericTypeParametersValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate void validateNoTypeParameterOnWildcardType(WildcardType wildcard, \t\t\tList<Throwable> errors)", "signatureAfterChange": "      private void validateNoTypeParameterOnWildcardType(WildcardType wildcard,             List<Throwable> errors)", "diff": ["-\tprivate void validateNoTypeParameterOnWildcardType(WildcardType wildcard,", "-\t\t\tList<Throwable> errors) {", "-\t\tfor (Type each : wildcard.getUpperBounds())", "-\t\t    validateNoTypeParameterOnType(each, errors);", "-\t\tfor (Type each : wildcard.getLowerBounds())", "-\t\t    validateNoTypeParameterOnType(each, errors);", "-\t}", "+    private void validateNoTypeParameterOnWildcardType(WildcardType wildcard,", "+            List<Throwable> errors) {", "+        for (Type each : wildcard.getUpperBounds()) {", "+            validateNoTypeParameterOnType(each, errors);", "+        }", "+        for (Type each : wildcard.getLowerBounds()) {", "+            validateNoTypeParameterOnType(each, errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84610143d605eb462322093ed7b7f629", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "commitAfterChange": "759061a31775afd29ff99fd2a55969bd6aaa8c2f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "      private void validateMember(FrameworkMember<?> member, List<Throwable> errors)", "signatureAfterChange": "      private void validateMember(FrameworkMember<?> member, List<Throwable> errors)", "diff": ["-        validatePublicClass(member, errors);", "-        validateStatic(member, errors);", "-        validatePublic(member, errors);", "-        validateTestRuleOrMethodRule(member, errors);", "-    }", "+        for (RuleValidator strategy : validatorStrategies) {", "+            strategy.validate(member, annotation, errors);"]}]}
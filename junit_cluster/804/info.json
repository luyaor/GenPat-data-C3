{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "14bebb08d46e55ee8355a113d93095c1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40fea76674ec7d151040f195576d90aa", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/FilterFactoryFactory.java", "commitBeforeChange": "196c4ed79cbaca37709643b54913b361b677ae04", "commitAfterChange": "0a9a389570a171b67c3155d312f2e90bdab5aaaf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      private FilterFactory create(final String filterFactoryFqcn) throws FilterFactoryNotFoundException", "signatureAfterChange": "      public Filter createFilter(Class<? extends FilterFactory> filterFactoryClass, FilterFactoryParams args)             throws FilterFactory.FilterNotCreatedException, FilterFactoryNotFoundException", "diff": ["-    private FilterFactory create(final String filterFactoryFqcn) throws FilterFactoryNotFoundException {", "-        try {", "-            final Class<? extends FilterFactory> filterFactoryClass =", "-                    (Class<? extends FilterFactory>) Class.forName(filterFactoryFqcn);", "+    public Filter createFilter(Class<? extends FilterFactory> filterFactoryClass, FilterFactoryParams args)", "+            throws FilterFactory.FilterNotCreatedException, FilterFactoryNotFoundException {", "+        return createFilter(filterFactoryClass.getName(), args);", "+    }", "-            return filterFactoryClass.getConstructor().newInstance();", "-        } catch (final Exception e) {", "-            throw new FilterFactoryNotFoundException(e.getMessage());", "-        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75ec176def1257046ade2ac15b791c4b", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestRunner.java", "commitBeforeChange": "f268f458843fc84e83c244a5c271cc71386eb1cf", "commitAfterChange": "4b1869ebb8002e5d0b82ab55460f6126043c9ec4", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " \t \tprivate Image loadFrameIcon()", "signatureAfterChange": " \t \tprivate Image loadFrameIcon()", "diff": ["-\t\tToolkit toolkit= Toolkit.getDefaultToolkit();", "-\t\ttry {", "-\t\t\tjava.net.URL url= BaseTestRunner.class.getResource(\"smalllogo.gif\");", "-\t\t\treturn toolkit.createImage((ImageProducer) url.getContent());", "-\t\t} catch (Exception ex) {", "-\t\t}", "+\t\tImageIcon icon= (ImageIcon)getIconResource(BaseTestRunner.class, \"smalllogo.gif\");", "+\t\tif (icon != null)", "+\t\t\treturn icon.getImage();"]}]}
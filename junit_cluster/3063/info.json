{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fbc9659e2c026e4969b2ab8d5387d5f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0841f0e2996f743536dbb6c63d8113c0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-        synchronized (fChildrenLock) {", "-            List<T> filteredChildren = new ArrayList<T>(getFilteredChildren());", "-            for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "+        synchronized (childrenLock) {", "+            List<T> children = new ArrayList<T>(getFilteredChildren());", "+            for (Iterator<T> iter = children.iterator(); iter.hasNext(); ) {", "-            fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);", "-            if (fFilteredChildren.isEmpty()) {", "+            filteredChildren = Collections.unmodifiableCollection(children);", "+            if (filteredChildren.isEmpty()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a3568c525a5e56cf34c75fb015d6073", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "83a25d440d118b7d10779a884d35f31045949e27", "commitAfterChange": "84d8eddd970e46894d471cd2dd17ae8d86fb05db", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public void sort(Sorter sorter)", "signatureAfterChange": "      public void sort(Sorter sorter)", "diff": ["-        for (T each : getFilteredChildren()) {", "-            sortChild(each, sorter);", "+        synchronized (fLock) {", "+            for (T each : getFilteredChildren()) {", "+                sortChild(each, sorter);", "+            }", "+            List<T> sortedChildren = new ArrayList<T>(getFilteredChildren());", "+            Collections.sort(sortedChildren, comparator(sorter));", "+            setFilteredChildren(sortedChildren);", "-        List<T> sortedChildren = new ArrayList<T>(getFilteredChildren());", "-        Collections.sort(sortedChildren, comparator(sorter));", "-        getFilteredChildren().clear();", "-        getFilteredChildren().addAll(sortedChildren);"]}]}
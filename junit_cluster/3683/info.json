{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ab30b9143b26eb84f3d4b4c0333c33b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b79ce0659f167e10b122e572000a5c3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  \tprivate void validate() throws InitializationError", "signatureAfterChange": "      private void validate() throws InitializationError", "diff": ["-\tprivate void validate() throws InitializationError {", "-\t\tList<Throwable> errors= new ArrayList<Throwable>();", "-\t\tcollectInitializationErrors(errors);", "-\t\tif (!errors.isEmpty())", "-\t\t\tthrow new InitializationError(errors);", "-\t}", "+", "+    private void validate() throws InitializationError {", "+        List<Throwable> errors = new ArrayList<Throwable>();", "+        collectInitializationErrors(errors);", "+        if (!errors.isEmpty()) {", "+            throw new InitializationError(errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5820882298d3c4d1cad23d24b696165", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Suite.java", "commitBeforeChange": "09fcafc04e07b3481ef60159de2d6ae3464b98ac", "commitAfterChange": "b8008562db24f9189b90dd0e3864a381681d527f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate void validate() throws InitializationError", "signatureAfterChange": "  \t@Override \tprotected void collectInitializationErrors(List<Throwable> errors)", "diff": ["-", "-\tprivate void validate() throws InitializationError {", "-\t\t// TODO: (Dec 10, 2007 9:17:45 PM) DUP with other ParentRunners?", "-\t\t// TODO: (Dec 10, 2007 9:18:24 PM) sort methods", "-", "-\t\t", "-\t\tList<Throwable> errors= new ArrayList<Throwable>();", "-\t\tgetTestClass().validateStaticMethods(errors);", "-\t\tassertValid(errors);", "-\t}", "+", "+\t@Override", "+\tprotected void collectInitializationErrors(List<Throwable> errors) {", "+\t\tgetTestClass().validateStaticMethods(errors);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32da9be2288b5aae5facdade67002962", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73a113ef66bb907204d9b7e34e8b185f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 17, "signatureBeforeChange": "  \tprotected Statement withBefores(FrameworkMethod method, Object target, \t\t\tStatement link)", "signatureAfterChange": "  \tpublic void sort(final Sorter sorter)", "diff": ["-\tprotected Statement withBefores(FrameworkMethod method, Object target,", "-\t\t\tStatement link) {", "-\t\treturn new RunBefores(link, new TestMethod(getTestClass()), target);", "+\tpublic void sort(final Sorter sorter) {", "+\t\tCollections.sort(fTestMethods, new Comparator<Method>() {", "+\t\t\tpublic int compare(Method o1, Method o2) {", "+\t\t\t\treturn sorter.compare(methodDescription(o1), methodDescription(o2));", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b784106d978999ef3885405508ffb517", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "57302f0df76fba83ba72a676bd660efeb5881af6", "commitAfterChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void sort(final Sorter sorter)", "signatureAfterChange": "  \tpublic void sort(final Sorter sorter)", "diff": ["-\t\tCollections.sort(fTestMethods, new Comparator<Method>() {", "-\t\t\tpublic int compare(Method o1, Method o2) {", "-\t\t\t\treturn sorter.compare(methodDescription(o1), methodDescription(o2));", "+\t\tCollections.sort(fTestMethods, new Comparator<TestMethod>() {", "+\t\t\tpublic int compare(TestMethod o1, TestMethod o2) {", "+\t\t\t\treturn sorter.compare(methodDescription(o1),", "+\t\t\t\t\t\tmethodDescription(o2));"]}]}
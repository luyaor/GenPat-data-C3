{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ad15f6ff920a7a6a99a3a19bcabb013", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c2ac48507667084d814e465b49553e6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "2d13004b3fbba2fe6ed919bbc98f2e3f69bb4809", "commitAfterChange": "128553fc50758932f02fc6e13a3e25ef6a711152", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "signatureAfterChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "diff": ["+\t\t\t} catch (AssumptionViolatedException e) {", "+\t\t\t\toptionallyHandleException(e, handleAssumptionViolatedExceptions);", "+\t\t\t\treturn;", "+\t\t\t} catch (AssertionError e) {", "+\t\t\t\toptionallyHandleException(e, handleAssertionErrors);", "+\t\t\t\treturn;", "-\t\t\t\tif (fMatcher == null)", "-\t\t\t\t\tthrow e;", "-\t\t\t\tAssert.assertThat(e, fMatcher);", "+\t\t\t\thandleException(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a88dd06b2f01b53d08b3b50b193d24f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "4e1018a940699a38673b1861977110e6b558afb1", "commitAfterChange": "4cb9a65f450efa5f2a42128856c7b56e6d283386", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 18, "signatureBeforeChange": "  \t\tprivate void invokeWithActualParameters(Object target, \t\t\t\tAssignments complete) throws Throwable", "signatureAfterChange": "  \t\tprivate void invokeWithActualParameters(Object target, \t\t\t\tAssignments complete) throws Throwable", "diff": ["-\t\t\ttry {", "+//\t\t\ttry {", "-\t\t\t\tsuccesses++;", "-\t\t\t} catch (AssumptionViolatedException e) {", "-\t\t\t\thandleAssumptionViolation(e);", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\treportParameterizedError(e, values);", "-\t\t\t}", "+//\t\t\t} catch (AssumptionViolatedException e) {", "+//\t\t\t\thandleAssumptionViolation(e);", "+//\t\t\t}"]}]}
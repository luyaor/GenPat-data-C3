{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e1eaf8c52b4aa80adf5616657ce2613", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5af028209a47777e04cfb70decb5b33f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "c391c25b230e880289484202f3dc3aa81c373a1c", "commitAfterChange": "495a9a93e4a1157e707a01467e7cc3f600c88d19", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "      private FrameworkMethod getParametersMethod() throws Exception", "signatureAfterChange": "          private FrameworkMethod getParametersMethod() throws Exception", "diff": ["-    private FrameworkMethod getParametersMethod() throws Exception {", "-        List<FrameworkMethod> methods = getTestClass().getAnnotatedMethods(", "-                Parameters.class);", "-        for (FrameworkMethod each : methods) {", "-            if (each.isStatic() && each.isPublic()) {", "-                return each;", "-        throw new Exception(\"No public static parameters method on class \"", "-                + getTestClass().getName());", "-    }", "+        private FrameworkMethod getParametersMethod() throws Exception {", "+            List<FrameworkMethod> methods = testClass", "+                    .getAnnotatedMethods(Parameters.class);", "+            for (FrameworkMethod each : methods) {", "+                if (each.isStatic() && each.isPublic()) {", "+                    return each;", "+                }", "+            }", "+", "+            throw new Exception(\"No public static parameters method on class \"", "+                    + testClass.getName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62b2e63734009f08d61891b075ec17db", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "c391c25b230e880289484202f3dc3aa81c373a1c", "commitAfterChange": "495a9a93e4a1157e707a01467e7cc3f600c88d19", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private ParametersRunnerFactory getParametersRunnerFactory(Class<?> klass)             throws InstantiationException, IllegalAccessException", "signatureAfterChange": "          private ParametersRunnerFactory getParametersRunnerFactory()                 throws InstantiationException, IllegalAccessException", "diff": ["-    private ParametersRunnerFactory getParametersRunnerFactory(Class<?> klass)", "-            throws InstantiationException, IllegalAccessException {", "-        UseParametersRunnerFactory annotation = klass", "-                .getAnnotation(UseParametersRunnerFactory.class);", "-        if (annotation == null) {", "-            return DEFAULT_FACTORY;", "-        } else {", "-            Class<? extends ParametersRunnerFactory> factoryClass = annotation", "-                    .value();", "-            return factoryClass.newInstance();", "-    }", "+", "+        private ParametersRunnerFactory getParametersRunnerFactory()", "+                throws InstantiationException, IllegalAccessException {", "+            UseParametersRunnerFactory annotation = testClass", "+                    .getAnnotation(UseParametersRunnerFactory.class);", "+            if (annotation == null) {", "+                return DEFAULT_FACTORY;", "+            } else {", "+                Class<? extends ParametersRunnerFactory> factoryClass = annotation", "+                        .value();", "+                return factoryClass.newInstance();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5f401e38069311ccda83e4fc39dae838", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42d676985ac76cfc76955f962374693d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "c1642724c8525c3cd158df2054dd89283e77149c", "commitAfterChange": "912e94cafbc1f7074c39dbbd286a487c7ebe7ace", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "  \t@Override \tpublic void evaluate() throws Throwable", "diff": ["-\t\tExecutorService service= Executors.newSingleThreadExecutor();", "-\t\tCallable<Object> callable= new Callable<Object>() {", "-\t\t\tpublic Object call() throws Exception {", "+\t\tThread thread= new Thread() {", "+\t\t\t@Override", "+\t\t\tpublic void run() {", "+\t\t\t\t\tfFinished= true;", "-\t\t\t\t\tthrow new ExecutionException(e);", "+\t\t\t\t\tfThrown= e;", "-\t\t\t\treturn null;", "-\t\tFuture<Object> result= service.submit(callable);", "-\t\tservice.shutdown();", "-\t\ttry {", "-\t\t\tboolean terminated= service.awaitTermination(fTimeout,", "-\t\t\t\t\tTimeUnit.MILLISECONDS);", "-\t\t\tif (!terminated)", "-\t\t\t\tservice.shutdownNow();", "-\t\t\tresult.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation", "-\t\t} catch (TimeoutException e) {", "-\t\t\tthrow new Exception(String.format(", "-\t\t\t\t\t\"test timed out after %d milliseconds\", fTimeout));", "-\t\t} catch (ExecutionException e) {", "-\t\t\tthrow unwrap(e);", "-\t\t}", "-\t}", "+\t\tthread.start();", "+\t\tthread.join(fTimeout);", "+\t\tif (fFinished)", "+\t\t\treturn;", "+\t\tif (fThrown != null)", "+\t\t\tthrow fThrown;", "+\t\tException exception= new Exception(String.format(", "+\t\t\t\t\"test timed out after %d milliseconds\", fTimeout));", "+\t\texception.setStackTrace(thread.getStackTrace());", "+\t\tthrow exception;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ec9e34d68cda051c67d2ca05cded43f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "60f3a3f3ba53ca3e44f13acb2d200a7c92a84551", "commitAfterChange": "480b98e7f1bce46382e47fc30db2ef1a98a58b66", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void evaluate() throws Throwable", "signatureAfterChange": "  \t@Override \tpublic void evaluate() throws Throwable", "diff": ["-\t\tExecutorService service= Executors.newSingleThreadExecutor();", "-\t\tCallable<Object> callable= new Callable<Object>() {", "-\t\t\tpublic Object call() throws Exception {", "+\t\tThread thread= new Thread() {", "+\t\t\t@Override", "+\t\t\tpublic void run() {", "+\t\t\t\t\tfFinished= true;", "-\t\t\t\t\tthrow new ExecutionException(e);", "+\t\t\t\t\tfThrown= e;", "-\t\t\t\treturn null;", "-\t\tFuture<Object> result= service.submit(callable);", "-\t\tservice.shutdown();", "-\t\ttry {", "-\t\t\tboolean terminated= service.awaitTermination(fTimeout,", "-\t\t\t\t\tTimeUnit.MILLISECONDS);", "-\t\t\tif (!terminated)", "-\t\t\t\tservice.shutdownNow();", "-\t\t\tresult.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation", "-\t\t} catch (TimeoutException e) {", "-\t\t\tthrow new Exception(String.format(", "-\t\t\t\t\t\"test timed out after %d milliseconds\", fTimeout));", "-\t\t} catch (ExecutionException e) {", "-\t\t\tthrow unwrap(e);", "-\t\t}", "-\t}", "+\t\tthread.start();", "+\t\tthread.join(fTimeout);", "+\t\tif (fFinished)", "+\t\t\treturn;", "+\t\tif (fThrown != null)", "+\t\t\tthrow fThrown;", "+\t\tException exception= new Exception(String.format(", "+\t\t\t\t\"test timed out after %d milliseconds\", fTimeout));", "+\t\texception.setStackTrace(thread.getStackTrace());", "+\t\tthrow exception;"]}]}
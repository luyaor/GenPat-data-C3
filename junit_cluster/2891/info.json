{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48197729c966d4ed19bf1a0c931648a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6860168e5a64f7fd1d20da33793764cc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "4e1018a940699a38673b1861977110e6b558afb1", "commitAfterChange": "4cb9a65f450efa5f2a42128856c7b56e6d283386", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tpublic Object[] getActualValues(boolean nullsOk, int start, int stop) throws CouldNotGenerateValueException", "signatureAfterChange": "  \tpublic Object[] getActualValues(boolean nullsOk, int start, int stop) throws CouldNotGenerateValueException", "diff": ["-\t\t\tvalues[i]= fAssigned.get(i).getValue();", "-\t\t\tif (values[i] == null && !nullsOk)", "+\t\t\tObject value= fAssigned.get(i).getValue();", "+\t\t\tif (value == null && !nullsOk)", "+\t\t\tvalues[i - start]= value;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6c4af7edd39ec794c146d5457ee23bc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/DescriptionTest.java", "commitBeforeChange": "8134371705a43fa2b2a8913678d4336d867f6647", "commitAfterChange": "785c7859cd87dc5cb3872fef476ce2f86c9259dd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void roundTripsClassObject() throws Exception", "signatureAfterChange": "  \t@Test \tpublic void usesPassedInClassObject() throws Exception", "diff": ["-    @Test", "-    public void roundTripsClassObject() throws Exception {", "-        class URLClassLoader2 extends URLClassLoader {", "-            URLClassLoader2(URL[] urls) {", "-                super(urls);", "-            }", "-            @Override // just making public", "-            public Class<?> findClass(String name) throws ClassNotFoundException {", "-                return super.findClass(name);", "-            }", "-        }", "-        URLClassLoader2 l = new URLClassLoader2(new URL[] {Sweet.class.getProtectionDomain().getCodeSource().getLocation()});", "-        Class<?> clazz = l.findClass(Sweet.class.getName());", "-        assertEquals(l, clazz.getClassLoader());", "-        Description d = Description.createSuiteDescription(clazz);", "-        assertEquals(clazz, d.getTestClass());", "-        assertNull(d.getMethodName());", "-        assertEquals(1, d.getAnnotations().size());", "-        assertEquals(Ignore.class, d.getAnnotations().iterator().next().annotationType());", "-        d = Description.createTestDescription(clazz, \"tessed\");", "-        assertEquals(clazz, d.getTestClass());", "-        assertEquals(\"tessed\", d.getMethodName());", "-        assertEquals(0, d.getAnnotations().size());", "-        d = Description.createTestDescription(clazz, \"tessed\", clazz.getMethod(\"tessed\").getAnnotations());", "-        assertEquals(clazz, d.getTestClass());", "-        assertEquals(\"tessed\", d.getMethodName());", "-        assertEquals(1, d.getAnnotations().size());", "-        assertEquals(Test.class, d.getAnnotations().iterator().next().annotationType());", "-        d = d.childlessCopy();", "-        assertEquals(clazz, d.getTestClass());", "-        assertEquals(\"tessed\", d.getMethodName());", "-        assertEquals(1, d.getAnnotations().size());", "-        assertEquals(Test.class, d.getAnnotations().iterator().next().annotationType());", "-    }", "+\t@Test", "+\tpublic void usesPassedInClassObject() throws Exception {", "+\t\tclass URLClassLoader2 extends URLClassLoader {", "+\t\t\tURLClassLoader2(URL[] urls) {", "+\t\t\t\tsuper(urls);", "+\t\t\t}", "+\t\t\t@Override // just making public", "+\t\t\tpublic Class<?> findClass(String name) throws ClassNotFoundException {", "+\t\t\t\treturn super.findClass(name);", "+\t\t\t}", "+\t\t}", "+\t\tURL classpath= Sweet.class.getProtectionDomain().getCodeSource().getLocation();", "+\t\tURLClassLoader2 loader= new URLClassLoader2(new URL[] {classpath});", "+\t\tClass<?> clazz= loader.findClass(Sweet.class.getName());", "+\t\tassertEquals(loader, clazz.getClassLoader());", "+", "+\t\tDescription d= Description.createSuiteDescription(clazz);", "+\t\tassertEquals(clazz, d.getTestClass());", "+\t\tassertNull(d.getMethodName());", "+\t\tassertEquals(1, d.getAnnotations().size());", "+\t\tassertEquals(Ignore.class, d.getAnnotations().iterator().next().annotationType());", "+", "+\t\td= Description.createTestDescription(clazz, \"tessed\");", "+\t\tassertEquals(clazz, d.getTestClass());", "+\t\tassertEquals(\"tessed\", d.getMethodName());", "+\t\tassertEquals(0, d.getAnnotations().size());", "+", "+\t\td= Description.createTestDescription(clazz, \"tessed\", clazz.getMethod(\"tessed\").getAnnotations());", "+\t\tassertEquals(clazz, d.getTestClass());", "+\t\tassertEquals(\"tessed\", d.getMethodName());", "+\t\tassertEquals(1, d.getAnnotations().size());", "+\t\tassertEquals(Test.class, d.getAnnotations().iterator().next().annotationType());", "+", "+\t\td= d.childlessCopy();", "+\t\tassertEquals(clazz, d.getTestClass());", "+\t\tassertEquals(\"tessed\", d.getMethodName());", "+\t\tassertEquals(1, d.getAnnotations().size());", "+\t\tassertEquals(Test.class, d.getAnnotations().iterator().next().annotationType());", "+\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe7c59a8286c7d4a02f33f7697dbb5c3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f85ce382e0ab3644a39b379e63b1640", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "e012e06dc326394a3a834d974e9af3fea0e6df91", "commitAfterChange": "5c2070d7cf981e2e103aef6fd0ef64c473331325", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) throws Throwable", "diff": ["-    private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) {", "+    private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) throws Throwable {", "-            try {", "-                addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "-            } catch (Throwable e) {", "-                // ignore and move on", "-            }", "+            addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c206337e6b835d4cb9bbdd128b0b28b1", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/tests/framework/DoublePrecisionAssertTest.java", "commitBeforeChange": "3b3ddfb534daa710926143ca820723a4ee6c7d3d", "commitAfterChange": "20cdb2e788ba21c9de949610d597f6cc0c86899c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tpublic void testAssertNaNEqualsNaNFails()", "signatureAfterChange": "  \tpublic void testAssertNaNEqualsNaN()", "diff": ["-\tpublic void testAssertNaNEqualsNaNFails() {", "-\t\ttry {", "-\t\t\tassertEquals(Double.NaN, Double.NaN, 0.0);", "-\t\t} catch (AssertionFailedError e) {", "-\t\t\treturn;", "-\t\t}", "-\t\tfail();", "+\tpublic void testAssertNaNEqualsNaN() {", "+\t\tassertEquals(Double.NaN, Double.NaN, 0.0);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65fed9d79229ac2865c2c16c5687dcd9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f5ef7fefae509c61691ee8745eb452d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t\tvoid run()", "signatureAfterChange": "          void run()", "diff": ["-\t\tvoid run() {", "-\t\t\tsynchronized (fListeners) {", "-\t\t\t\tList<RunListener> safeListeners= new ArrayList<RunListener>();", "-\t\t\t\tList<Failure> failures= new ArrayList<Failure>();", "-\t\t\t\tfor (Iterator<RunListener> all= fCurrentListeners.iterator(); all", "-\t\t\t\t\t\t.hasNext();)", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tRunListener listener= all.next();", "-\t\t\t\t\t\tnotifyListener(listener);", "-\t\t\t\t\t\tsafeListeners.add(listener);", "-\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\tfailures.add(new Failure(Description.TEST_MECHANISM, e));", "-\t\t\t\t\t}", "-\t\t\t\tfireTestFailures(safeListeners, failures);", "-\t\t\t}", "-\t\t}", "+        void run() {", "+            synchronized (fListeners) {", "+                List<RunListener> safeListeners = new ArrayList<RunListener>();", "+                List<Failure> failures = new ArrayList<Failure>();", "+                for (Iterator<RunListener> all = fCurrentListeners.iterator(); all", "+                        .hasNext(); ) {", "+                    try {", "+                        RunListener listener = all.next();", "+                        notifyListener(listener);", "+                        safeListeners.add(listener);", "+                    } catch (Exception e) {", "+                        failures.add(new Failure(Description.TEST_MECHANISM, e));", "+                    }", "+                }", "+                fireTestFailures(safeListeners, failures);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd871d330164dc632b4ef92a489d0192", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParser.java", "commitBeforeChange": "b1cf4b5bc6ead8c3dfcbbb9ebe69be85f5e53cb8", "commitAfterChange": "56193048f411846a58c0e0377a5f1ccfecd3d2f9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r     String[] parseOptions(String[] args)", "signatureAfterChange": "\r \r     String[] parseOptions(String[] args)", "diff": ["-                                Description description = createSuiteDescription(arg);\r", "-                                Failure failure = new Failure(\r", "-                                        description,\r", "-                                        new CommandLineParserError(arg + \" value not specified\"));\r", "-                                failures.add(failure);\r", "+                                parserErrors.add(new CommandLineParserError(arg + \" value not specified\"));\r", "-                        Description description = createSuiteDescription(arg);\r", "-                        Failure failure = new Failure(\r", "-                                description,\r", "-                                new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));\r", "-\r", "-                        failures.add(failure);\r", "+                        parserErrors.add(new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));\r", "-                Description description = createSuiteDescription(arg);\r", "-                Failure failure = new Failure(description, e);\r", "-                failures.add(failure);\r", "+                parserErrors.add(e);\r", "-                Description description = createSuiteDescription(arg);\r", "-                Failure failure = new Failure(description, e);\r", "-                failures.add(failure);\r", "+                parserErrors.add(e);\r"]}]}
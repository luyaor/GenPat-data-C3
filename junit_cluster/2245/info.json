{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f16c672d78b10552127d22f13d292fdb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "666bf3c4f78e56d205ad6e85a5478950", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void addSinglePointMethods(ParameterSignature sig, \t\t\t\t\t\t\t\t\t   List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig,             List<PotentialAssignment> list)", "diff": ["-\tprivate void addSinglePointMethods(ParameterSignature sig,", "-\t\t\t\t\t\t\t\t\t   List<PotentialAssignment> list) {", "-\t\tfor (FrameworkMethod dataPointMethod : fClass", "-\t\t\t\t.getAnnotatedMethods(DataPoint.class)) {", "-\t\t\tif (isCorrectlyTyped(sig, dataPointMethod.getType()))", "-\t\t\t\tlist.add(new MethodParameterValue(dataPointMethod));", "-\t\t}", "-\t}", "+    private void addSinglePointMethods(ParameterSignature sig,", "+            List<PotentialAssignment> list) {", "+        for (FrameworkMethod dataPointMethod : fClass", "+                .getAnnotatedMethods(DataPoint.class)) {", "+            if (isCorrectlyTyped(sig, dataPointMethod.getType())) {", "+                list.add(new MethodParameterValue(dataPointMethod));", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b95372da577acc03e75a6315412fbb4f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tprivate void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-\tprivate void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) {", "-\t\tfor (FrameworkMethod dataPointsMethod : fClass", "-\t\t\t\t.getAnnotatedMethods(DataPoints.class))", "-\t\t\ttry {", "-\t\t\t\taddMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "-\t\t\t} catch (Throwable e) {", "-\t\t\t\t// ignore and move on", "-\t\t\t}", "-\t}", "+    private void addMultiPointMethods(ParameterSignature sig, List<PotentialAssignment> list) {", "+        for (FrameworkMethod dataPointsMethod : fClass", "+                .getAnnotatedMethods(DataPoints.class)) {", "+            try {", "+                addMultiPointArrayValues(sig, dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));", "+            } catch (Throwable e) {", "+                // ignore and move on", "+            }", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "600cec2240236795862ff83ae3ee4e91", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47573bdab1c6b4649cf5c817a975914d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "d6662fcc06ec7b07c696eb703c47d3731e4e11c7", "commitAfterChange": "85578d48f6459a05665329faa9b52a861e9142cb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \t@Test public void remember() throws CouldNotReadCoreException", "signatureAfterChange": " \t \t@Test public void remember() throws CouldNotReadCoreException", "diff": ["-\t\tDescription thing= reincarnation.sort(request).get(1);", "-\t\tassertEquals(Description.createTestDescription(TwoUnEqualTests.class, \"slow\"), thing);\t\t", "-\t}", "+\t\tDescription thing= reincarnation.sortedLeavesForTest(request).get(1);", "+\t\tassertEquals(Description.createTestDescription(TwoUnEqualTests.class, \"slow\"), thing);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c9edcd1ca6dfa4ee9b2819b14cc2e7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "85578d48f6459a05665329faa9b52a861e9142cb", "commitAfterChange": "8d9ac8d65204fe8cd7e1d9146f123a461952bae9", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \t@Test public void remember() throws CouldNotReadCoreException", "signatureAfterChange": " \t \t@Test public void remember() throws CouldNotReadCoreException", "diff": ["-\t\tMaxCore original= MaxCore.forFolder(\"folder\");", "-\t\toriginal.run(request);", "-\t\tMaxCore reincarnation= MaxCore.forFolder(\"folder\");", "-\t\tDescription thing= reincarnation.sortedLeavesForTest(request).get(1);", "-\t\tassertEquals(Description.createTestDescription(TwoUnEqualTests.class, \"slow\"), thing);\t", "+\t\tfMax.run(request);", "+\t\tMaxCore reincarnation= MaxCore.forFolder(fMax.getFolder());", "+\t\ttry {", "+\t\t\tDescription thing= reincarnation.sortedLeavesForTest(request).get(1);", "+\t\t\tassertEquals(Description.createTestDescription(TwoUnEqualTests.class, \"slow\"), thing);", "+\t\t} finally {", "+\t\t\treincarnation.forget();", "+\t\t}"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b0255f07604c653810856e2162f3264", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878a9b29686b269c16066a1021452ba9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/FilterFactoryFactory.java", "commitBeforeChange": "5edfb4447b609c178d63a3d991172861076d143b", "commitAfterChange": "34336085d5aba69c997f8e6b244531561afebcd4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "     public Filter createFilter(Class<? extends FilterFactory> filterFactoryClass, FilterFactoryParams args)             throws FilterFactory.FilterNotCreatedException, FilterFactoryNotCreatedException", "signatureAfterChange": "     public Filter createFilter(Class<? extends FilterFactory> filterFactoryClass, FilterFactoryParams params)             throws FilterFactoryNotCreatedException", "diff": ["-    public Filter createFilter(Class<? extends FilterFactory> filterFactoryClass, FilterFactoryParams args)", "-            throws FilterFactory.FilterNotCreatedException, FilterFactoryNotCreatedException {", "-        return createFilter(filterFactoryClass.getName(), args);", "+    public Filter createFilter(Class<? extends FilterFactory> filterFactoryClass, FilterFactoryParams params)", "+            throws FilterFactoryNotCreatedException {", "+        FilterFactory filterFactory = createFilterFactory(filterFactoryClass);", "+", "+        return filterFactory.createFilter(params);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edec105b602212ac91b375c5ee496936", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "412519b20d4cb96466c03466fa003068e9fb5eca", "commitAfterChange": "8e3f361443ddf8bca21c3db661c75d374fe78dba", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tprotected Notifier notifying(FrameworkMethod method, Statement link)", "signatureAfterChange": "  \tprivate EachTestNotifier makeNotifier(FrameworkMethod method, \t\t\tRunNotifier notifier)", "diff": ["-\tprotected Notifier notifying(FrameworkMethod method, Statement link) {", "-\t\treturn method.isIgnored() ? new IgnoreTestNotifier()", "-\t\t\t\t: new RunTestNotifier(link);", "+\tprivate EachTestNotifier makeNotifier(FrameworkMethod method,", "+\t\t\tRunNotifier notifier) {", "+\t\tDescription description= describeChild(method);", "+\t\treturn new EachTestNotifier(notifier,", "+\t\t\t\tdescription);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd158265ff221d5b66189cd44cd17f9d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/validator/AnnotationValidatorFactory.java", "commitBeforeChange": "5e71994e865d0e2ac23885a11444cda91b3bba76", "commitAfterChange": "1273a35689bdcb3304f6634cdc3889c61f9b1b1f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAnnotation)", "signatureAfterChange": "     public AnnotationValidator createAnnotationValidator(ValidateWith validateWithAnnotation)", "diff": ["-            return new AnnotationValidator();", "+            return new AnnotationValidator() {", "+            };", "-        if (fAnnotationTypeToValidatorMap.containsKey(validateWithAnnotation)) {", "-            return fAnnotationTypeToValidatorMap.get(validateWithAnnotation);", "+        AnnotationValidator validator = fAnnotationTypeToValidatorMap.get(validateWithAnnotation);", "+        if (validator != null) {", "+            return validator;", "-        Class<?> clazz = validateWithAnnotation.value();", "+        Class<? extends AnnotationValidator> clazz = validateWithAnnotation.value();", "-            AnnotationValidator annotationValidator = (AnnotationValidator) clazz.newInstance();", "-            fAnnotationTypeToValidatorMap.put(validateWithAnnotation, annotationValidator);", "+            AnnotationValidator annotationValidator = clazz.newInstance();", "+            fAnnotationTypeToValidatorMap.putIfAbsent(validateWithAnnotation, annotationValidator);"]}]}
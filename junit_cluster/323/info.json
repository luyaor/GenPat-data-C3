{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b078e3e26f8e3b6053214c2d5b7ddf49", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d498f4781ef54d5be5534f4ccd166b5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "b03c6a529861e0e10edde534ae69d5507eed123c", "commitAfterChange": "7216e4bd9eceea0be4813da6520a6fa4ed2e3a2a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      private static void assertNoCategorizedDescendentsOfUncategorizeableParents(Description description) throws InitializationError", "signatureAfterChange": "      private static void assertNoCategorizedDescendentsOfUncategorizeableParents(Description description) throws InitializationError", "diff": ["-        if (!canHaveCategorizedChildren(description)) {", "+        if (canHaveCategorizedChildren(description)) {", "+            for (Description each : description.getChildren()) {", "+                assertNoCategorizedDescendentsOfUncategorizeableParents(each);", "+            }", "+        } else {", "-        }", "-        for (Description each : description.getChildren()) {", "-            assertNoCategorizedDescendentsOfUncategorizeableParents(each);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9412ab5ed858970d674cb1c38251e58d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/manipulation/Filter.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tpublic void apply(Object child) throws NoTestsRemainException", "signatureAfterChange": " \tpublic void apply(Object child) throws NoTestsRemainException", "diff": ["-\t\tif (!(child instanceof Filterable))", "-\t\t\treturn;", "-\t\tFilterable filterable= (Filterable) child;", "-\t\tfilterable.filter(this);", "+\t\tif (child instanceof Filterable) {", "+\t\t\tFilterable filterable= (Filterable) child;", "+\t\t\tfilterable.filter(this);", "+\t\t}"]}]}
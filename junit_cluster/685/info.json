{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d03e682f96a897e29082c134700705e0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b5aa6d450cbcae196f8bb44a2afaddb", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethod.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t\tObject[] getValues(boolean nullsOk) \t\t\t\tthrows CouldNotGenerateValueException", "signatureAfterChange": "  \tprotected void runWithCompleteAssignment(Assignments complete) \t\t\tthrows InstantiationException, IllegalAccessException, \t\t\tInvocationTargetException, NoSuchMethodException, Throwable", "diff": ["-", "-\t\tObject[] getValues(boolean nullsOk)", "-\t\t\t\tthrows CouldNotGenerateValueException {", "-\t\t\tObject[] values= new Object[fSources.size()];", "-\t\t\tfor (int i= 0; i < values.length; i++) {", "-\t\t\t\tvalues[i]= fSources.get(i).getValue();", "-\t\t\t\tif (values[i] == null && !nullsOk)", "-\t\t\t\t\tthrow new CouldNotGenerateValueException();", "-\t\t\t}", "-\t\t\treturn values;", "-\t\t}", "+", "+\tprotected void runWithCompleteAssignment(Assignments complete)", "+\t\t\tthrows InstantiationException, IllegalAccessException,", "+\t\t\tInvocationTargetException, NoSuchMethodException, Throwable {", "+\t\ttry {", "+\t\t\tfinal Object[] values= complete.getActualValues(nullsOk());", "+\t\t\tfinal Object freshInstance= complete.getTarget().getClass()", "+\t\t\t\t\t.getConstructor().newInstance();", "+\t\t\tfinal Roadie thisContext= complete.getContext().withNewInstance(", "+\t\t\t\t\tfreshInstance);", "+\t\t\tthisContext.runProtected(this, new Runnable() {", "+\t\t\t\tpublic void run() {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tinvokeWithActualParameters(freshInstance, values);", "+\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\tthrown= e;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\tif (thrown != null)", "+\t\t\t\tthrow thrown;", "+\t\t} catch (CouldNotGenerateValueException e) {", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7be09f3c37868412782b55b9fa53f859", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethodRunner.java", "commitBeforeChange": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf", "commitAfterChange": "4081076e513e84bb2376f889d4108e64e9a18653", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected void runWithCompleteAssignment(Assignments complete) \t\t\tthrows InstantiationException, IllegalAccessException, \t\t\tInvocationTargetException, NoSuchMethodException, Throwable", "signatureAfterChange": "  \t\tprotected void runWithCompleteAssignment(Assignments complete) \t\t\t\tthrows InstantiationException, IllegalAccessException, \t\t\t\tInvocationTargetException, NoSuchMethodException, Throwable", "diff": ["-\tprotected void runWithCompleteAssignment(Assignments complete)", "-\t\t\tthrows InstantiationException, IllegalAccessException,", "-\t\t\tInvocationTargetException, NoSuchMethodException, Throwable {", "-\t\ttry {", "-\t\t\tfinal Object[] values= complete.getActualValues(nullsOk());", "-\t\t\tfinal Object freshInstance= complete.getTarget().getClass()", "-\t\t\t\t\t.getConstructor().newInstance();", "-\t\t\tfinal Roadie thisContext= complete.getContext().withNewInstance(", "-\t\t\t\t\tfreshInstance);", "-\t\t\tthisContext.runProtected(this, new Runnable() {", "-\t\t\t\tpublic void run() {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tinvokeWithActualParameters(freshInstance, values);", "-\t\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\t\tthrown= e;", "+", "+\t\tprotected void runWithCompleteAssignment(Assignments complete)", "+\t\t\t\tthrows InstantiationException, IllegalAccessException,", "+\t\t\t\tInvocationTargetException, NoSuchMethodException, Throwable {", "+\t\t\ttry {", "+\t\t\t\tfinal Object[] values= complete.getActualValues(nullsOk());", "+\t\t\t\tfinal Object freshInstance= complete.getTarget().getClass()", "+\t\t\t\t\t\t.getConstructor().newInstance();", "+\t\t\t\tfinal Roadie thisContext= complete.getContext()", "+\t\t\t\t\t\t.withNewInstance(freshInstance);", "+\t\t\t\tthisContext.runProtected(TheoryMethodRunner.this, new Runnable() { // TODO Ugly...", "+\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tinvokeWithActualParameters(freshInstance, values);", "+\t\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\t\tthrown= e;", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t});", "-\t\t\tif (thrown != null)", "-\t\t\t\tthrow thrown;", "-\t\t} catch (CouldNotGenerateValueException e) {", "+\t\t\t\t});", "+\t\t\t\tif (thrown != null)", "+\t\t\t\t\tthrow thrown;", "+\t\t\t} catch (CouldNotGenerateValueException e) {", "+\t\t\t\t// Do nothing", "+\t\t\t}", "+\t\t}"]}]}
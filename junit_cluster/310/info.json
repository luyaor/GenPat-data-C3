{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01c224eb29867b7f58fa73f15670983c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2412e848e565dcaa5cdbf7b5f58a277c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/Timeout.java", "commitBeforeChange": "bbbb8571f1a3cdcb9af977867c7a16de3a1f5a76", "commitAfterChange": "d96a05f8d33ed781c701c58dd285bf6464112719", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public Statement apply(Statement base, Description description)", "signatureAfterChange": "      public Statement apply(Statement base, Description description)", "diff": ["-        return new FailOnTimeout(base, timeout, timeUnit, lookForStuckThread);", "+        try {", "+            return FailOnTimeout.builder()", "+                .withTimeout(timeout, timeUnit)", "+                .withLookingForStuckThread(lookForStuckThread)", "+                .build(base);", "+        } catch (final Exception e) {", "+            return new Statement() {", "+                @Override public void evaluate() throws Throwable {", "+                    throw new RuntimeException(\"Invalid parameters for Timeout\", e);", "+                }", "+            };", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bce9d3278f1e3d60b45cd8b94328373e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "bbbb8571f1a3cdcb9af977867c7a16de3a1f5a76", "commitAfterChange": "d96a05f8d33ed781c701c58dd285bf6464112719", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public FailOnTimeout(Statement originalStatement, long timeout, TimeUnit unit, boolean lookForStuckThread)", "signatureAfterChange": "         public FailOnTimeout build(Statement statement)", "diff": ["-    public FailOnTimeout(Statement originalStatement, long timeout, TimeUnit unit, boolean lookForStuckThread) {", "-        this.originalStatement = originalStatement;", "-        this.timeout = timeout;", "-        timeUnit = unit;", "-        this.lookForStuckThread = lookForStuckThread;", "+         */", "+        public FailOnTimeout build(Statement statement) {", "+            if (statement == null) {", "+                throw new NullPointerException(\"statement cannot be null\");", "+            }", "+            return new FailOnTimeout(this, statement);", "+        }"]}]}
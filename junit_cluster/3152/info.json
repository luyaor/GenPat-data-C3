{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df243cd2955e82479b3abadfab4eb01a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b838ce5ff3aa978dbfa6016fda89084", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic void assertValid() throws InitializationError", "signatureAfterChange": "      public void assertValid() throws InitializationError", "diff": ["-\t", "-\tpublic void assertValid() throws InitializationError {", "-\t\tif (!fErrors.isEmpty())", "-\t\t\tthrow new InitializationError(fErrors);", "-\t}", "+", "+    public void assertValid() throws InitializationError {", "+        if (!fErrors.isEmpty()) {", "+            throw new InitializationError(fErrors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b457461760ff7beca1b8895535bfe231", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/ParentRunner.java", "commitBeforeChange": "77ecd2119d3124b72935038effffadf7b98eccd9", "commitAfterChange": "3a791ec79fff66aebc332fe4e4cbf626e39bd3d3", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tprotected void assertValid(List<Throwable> errors) throws InitializationError", "signatureAfterChange": "  \tprotected final void assertValid(List<Throwable> errors) throws InitializationError", "diff": ["+", "+\tprotected final void assertValid(List<Throwable> errors) throws InitializationError {", "+\t\tif (!errors.isEmpty())", "+\t\t\tthrow new InitializationError(errors);", "+\t}", "-", "-\tprotected void assertValid(List<Throwable> errors) throws InitializationError {", "-\t\tif (!errors.isEmpty())", "-\t\t\tthrow new InitializationError(errors);", "-\t}"]}]}
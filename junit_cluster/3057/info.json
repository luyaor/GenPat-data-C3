{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc543c509fb0f4f1f3e44dad1c603290", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d8aebad8a9b90750d209540cc4ed6b0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "4b549360e08dac944ee34b7c7bf1a95b41f72f35", "commitAfterChange": "8e313a1e58a56694c0441b2fa60974fa8e1bfe31", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate Statement withInterceptors(FrameworkMethod method, Object test, \t\t\tStatement statement)", "signatureAfterChange": " \t \tprivate Statement withInterceptors(FrameworkMethod method, Object target, \t\t\tStatement statement)", "diff": ["-\tprivate Statement withInterceptors(FrameworkMethod method, Object test,", "+\tprivate Statement withInterceptors(FrameworkMethod method, Object target,", "-\t\tfor (StatementInterceptor each : interceptors(test))", "-\t\t\tresult= each.intercept(result, method);", "+\t\tfor (StatementInterceptor each : interceptors(target))", "+\t\t\tresult= each.intercept(result, method, target);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9256717348218a5d63ab756fb97730ed", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "7a0a6839fe3ae4076cc72a0586e2dbe4b1bc995f", "commitAfterChange": "734ab5187c068599352e5fdc7374c1334d484fef", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate Statement withInterceptors(FrameworkMethod method, Object test, \t\t\tStatement statement)", "signatureAfterChange": " \t \tprivate Statement withInterceptors(FrameworkMethod method, Object target, \t\t\tStatement statement)", "diff": ["-\tprivate Statement withInterceptors(FrameworkMethod method, Object test,", "+\tprivate Statement withInterceptors(FrameworkMethod method, Object target,", "-\t\tfor (StatementInterceptor each : interceptors(test))", "-\t\t\tresult= each.intercept(result, method);", "+\t\tfor (StatementInterceptor each : interceptors(target))", "+\t\t\tresult= each.intercept(result, method, target);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fad7c41b05daab9c120138d110ce30b9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49bcde116138278c315836ca7a2b9eff", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestClassMethodsRunner.java", "commitBeforeChange": "890b7b977e42360aa8975c8535fc66bfd8d8cb3e", "commitAfterChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "diff": ["-\t\t\ttestAborted(notifier, methodDescription(method), e.getCause());", "-\t\t\treturn;\t\t\t", "-\t\t} catch (Exception e) {", "-\t\t\ttestAborted(notifier, methodDescription(method), e);", "+\t\t\ttestAborted(notifier, method, e.getCause());", "+\t\t\treturn;", "+\t\t} catch (Throwable e) {", "+\t\t\ttestAborted(notifier, method, e);", "-\t\tcreateMethodRunner(test, method, notifier).run();", "+", "+\t\tTestMethod testMethod= new TestMethod(test, method,", "+\t\t\t\tmethodDescription(method));", "+\t\ttry {", "+\t\t\tMethodRunner runner= testMethod.findCustomRunner(this);", "+\t\t\tif (runner == null)", "+\t\t\t\tcreateMethodRunner(test, method, notifier).run();", "+\t\t\telse {", "+\t\t\t\trunner.run(testMethod, notifier);", "+\t\t\t}", "+\t\t} catch (Exception e) {", "+\t\t\tThrowable exception= new RuntimeException(", "+\t\t\t\t\t\"Exception creating custom method runner\", e);", "+\t\t\ttestAborted(notifier, method, exception);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5ab561720a0aec5179d3cb6ee0c1d8e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/TestClassMethodsRunner.java", "commitBeforeChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "commitAfterChange": "3d7fee93ddc21a6e849c36d5ae58b37b3d189665", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "diff": ["-\t\t\ttestAborted(notifier, method, e.getCause());", "-\t\t\treturn;", "-\t\t} catch (Throwable e) {", "-\t\t\ttestAborted(notifier, method, e);", "-\t\t\treturn;", "-\t\t}", "-", "-\t\tTestMethod testMethod= new TestMethod(test, method,", "-\t\t\t\tmethodDescription(method));", "-\t\ttry {", "-\t\t\tMethodRunner runner= testMethod.findCustomRunner(this);", "-\t\t\tif (runner == null)", "-\t\t\t\tcreateMethodRunner(test, method, notifier).run();", "-\t\t\telse {", "-\t\t\t\trunner.run(testMethod, notifier);", "-\t\t\t}", "+\t\t\ttestAborted(notifier, methodDescription(method), e.getCause());", "+\t\t\treturn;\t\t\t", "-\t\t\tThrowable exception= new RuntimeException(", "-\t\t\t\t\t\"Exception creating custom method runner\", e);", "-\t\t\ttestAborted(notifier, method, exception);", "+\t\t\ttestAborted(notifier, methodDescription(method), e);", "+\t\t\treturn;", "+\t\tcreateMethodRunner(test, method, notifier).run();"]}]}
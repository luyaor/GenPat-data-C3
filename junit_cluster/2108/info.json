{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f178f12081ef84a57155b3df032fe3a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19bcc67c91f195eb2c78df8f19296266", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/interceptor/ExpectedException.java", "commitBeforeChange": "3f05aac1da5851a1957c3c9ca46148464e5fd513", "commitAfterChange": "a423117429dc71bf3068eeae38c6443672beda7f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "signatureAfterChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "diff": ["-\t\t\tboolean complete = false;", "-\t\t\t\tcomplete = true;", "-\t\t\t\tif (noExpectedException())", "+\t\t\t\tif (fMatcher == null)", "-\t\t\t\t// TODO (May 26, 2009 11:46:31 PM): isInstance?", "-\t\t\t\tif (fType != null && !fType.isAssignableFrom(e.getClass())) {", "-\t\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t\t\t+ fType.getName() + \"> but was<\"", "-\t\t\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "-\t\t\t\t\tthrow new Exception(message, e);", "-\t\t\t\t}", "-\t\t\t\tif (fMessage != null && !getMessage(e).contains(fMessage)) {", "-\t\t\t\t\tString message= \"Unexpected exception message, expected<\"", "-\t\t\t\t\t\t\t\t+ fMessage + \"> but was<\"", "-\t\t\t\t\t\t\t\t+ getMessage(e) + \">\";", "-\t\t\t\t\tthrow new Exception(message, e);", "-\t\t\t\t}", "+\t\t\t\tAssert.assertThat(e, fMatcher);", "+\t\t\t\treturn;", "-\t\t\t// TODO (May 26, 2009 11:54:22 PM): do I need complete", "-\t\t\tif (complete && !noExpectedException()) {", "-\t\t\t\tif (fType != null)", "-\t\t\t\t\tthrow new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t\t\t+ fType.getName());", "-\t\t\t\telse if (fMessage != null)", "-\t\t\t\t\tthrow new AssertionError(\"Expected exception with message: \"", "-\t\t\t\t\t\t\t+ fMessage);", "-\t\t\t\telse", "-\t\t\t\t\tthrow new RuntimeException(\"How'd we get here?\");", "-\t\t\t}", "+\t\t\tif (fMatcher != null)", "+\t\t\t\tthrow new AssertionError(\"Expected test to throw \"", "+\t\t\t\t\t\t+ StringDescription.toString(fMatcher));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef31ca739dc5445f2e1cb1832419026a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/interceptor/ExpectedException.java", "commitBeforeChange": "275d17729f7e8ef81711bf3c6fcb150ae2109a21", "commitAfterChange": "d5af0e46c1cd912ef0932ce868517b1e8335531e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "signatureAfterChange": "  \t\t@Override \t\tpublic void evaluate() throws Throwable", "diff": ["-\t\t\tboolean complete = false;", "-\t\t\t\tcomplete = true;", "-\t\t\t\tif (noExpectedException())", "+\t\t\t\tif (fMatcher == null)", "-\t\t\t\t// TODO (May 26, 2009 11:46:31 PM): isInstance?", "-\t\t\t\tif (fType != null && !fType.isAssignableFrom(e.getClass())) {", "-\t\t\t\t\tString message= \"Unexpected exception, expected<\"", "-\t\t\t\t\t\t\t\t+ fType.getName() + \"> but was<\"", "-\t\t\t\t\t\t\t\t+ e.getClass().getName() + \">\";", "-\t\t\t\t\tthrow new Exception(message, e);", "-\t\t\t\t}", "-\t\t\t\tif (fMessage != null && !getMessage(e).contains(fMessage)) {", "-\t\t\t\t\tString message= \"Unexpected exception message, expected<\"", "-\t\t\t\t\t\t\t\t+ fMessage + \"> but was<\"", "-\t\t\t\t\t\t\t\t+ getMessage(e) + \">\";", "-\t\t\t\t\tthrow new Exception(message, e);", "-\t\t\t\t}", "+\t\t\t\tAssert.assertThat(e, fMatcher);", "+\t\t\t\treturn;", "-\t\t\t// TODO (May 26, 2009 11:54:22 PM): do I need complete", "-\t\t\tif (complete && !noExpectedException()) {", "-\t\t\t\tif (fType != null)", "-\t\t\t\t\tthrow new AssertionError(\"Expected exception: \"", "-\t\t\t\t\t\t\t+ fType.getName());", "-\t\t\t\telse if (fMessage != null)", "-\t\t\t\t\tthrow new AssertionError(\"Expected exception with message: \"", "-\t\t\t\t\t\t\t+ fMessage);", "-\t\t\t\telse", "-\t\t\t\t\tthrow new RuntimeException(\"How'd we get here?\");", "-\t\t\t}", "+\t\t\tif (fMatcher != null)", "+\t\t\t\tthrow new AssertionError(\"Expected test to throw \"", "+\t\t\t\t\t\t+ StringDescription.toString(fMatcher));"]}]}
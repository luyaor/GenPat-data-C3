{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a39742aedfd66f6a23dddaad8de409c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71020268abac3464d25da282036df74d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/FilterFactoryFactory.java", "commitBeforeChange": "74cab2dc9b8c32482d2c86a66a0dd9318930b4bc", "commitAfterChange": "5820172f30e56e9b0bc8feca6d7b3be58b7ee0ee", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public Filter createFilterFromFilterSpec(String filterSpec)             throws FilterFactoryNotCreatedException", "signatureAfterChange": "\r     public Filter createFilterFromFilterSpec(Description description, String filterSpec)\r             throws FilterFactoryNotCreatedException", "diff": ["-     */", "-    public Filter createFilterFromFilterSpec(String filterSpec)", "-            throws FilterFactoryNotCreatedException {", "-        FilterFactory filterFactory;", "-        FilterFactoryParams params;", "-", "-        if (filterSpec.contains(\"=\")) {", "-            String[] tuple = filterSpec.split(\"=\", 2);", "-", "-            String filterFactoryFqcn = tuple[0];", "-            String args = tuple[1];", "-", "-            filterFactory = createFilterFactory(filterFactoryFqcn);", "-            params = filterFactory.parseArgs(args);", "-", "-            return filterFactory.createFilter(params);", "-        } else {", "-            String filterFactoryFqcn = filterSpec;", "-", "-            return createFilter(filterFactoryFqcn, new NoFilterFactoryParams());", "-        }", "-    }", "+     */\r", "+    public Filter createFilterFromFilterSpec(Description description, String filterSpec)\r", "+            throws FilterFactoryNotCreatedException {\r", "+        String filterFactoryFqcn;\r", "+        FilterFactoryParams params;\r", "+\r", "+        if (filterSpec.contains(\"=\")) {\r", "+            String[] tuple = filterSpec.split(\"=\", 2);\r", "+\r", "+            filterFactoryFqcn = tuple[0];\r", "+            params = new FilterFactoryParams(description, tuple[1]);\r", "+        } else {\r", "+            filterFactoryFqcn = filterSpec;\r", "+            params = new FilterFactoryParams(description);\r", "+        }\r", "+\r", "+        return createFilter(filterFactoryFqcn, params);\r", "+    }\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bce9d3278f1e3d60b45cd8b94328373e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "bbbb8571f1a3cdcb9af977867c7a16de3a1f5a76", "commitAfterChange": "d96a05f8d33ed781c701c58dd285bf6464112719", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 6, "signatureBeforeChange": "      public FailOnTimeout(Statement originalStatement, long timeout, TimeUnit unit, boolean lookForStuckThread)", "signatureAfterChange": "         public FailOnTimeout build(Statement statement)", "diff": ["-    public FailOnTimeout(Statement originalStatement, long timeout, TimeUnit unit, boolean lookForStuckThread) {", "-        this.originalStatement = originalStatement;", "-        this.timeout = timeout;", "-        timeUnit = unit;", "-        this.lookForStuckThread = lookForStuckThread;", "+         */", "+        public FailOnTimeout build(Statement statement) {", "+            if (statement == null) {", "+                throw new NullPointerException(\"statement cannot be null\");", "+            }", "+            return new FailOnTimeout(this, statement);", "+        }"]}]}
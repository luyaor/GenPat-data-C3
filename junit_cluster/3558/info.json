{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddce406b235d30a32fe354be919f6e85", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c98af82303127cd1c5890a67d228d9f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapter.java", "commitBeforeChange": "496ee866a46f783d145b649a688df57cbf79490e", "commitAfterChange": "5f7fddf537e551109ffd6241a00c87a2b3521523", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate Filter removeIgnored()", "signatureAfterChange": "  \tprivate Description removeIgnored(Description description)", "diff": ["-\tprivate Filter removeIgnored() {", "-\t\treturn new Filter() {\t\t\t", "-\t\t\t@Override", "-\t\t\tpublic boolean shouldRun(Description description) {", "-\t\t\t\treturn !isIgnored(description);", "-\t\t\t}", "-\t\t\t", "-\t\t\t@Override", "-\t\t\tpublic String describe() {", "-\t\t\t\treturn \"not ignored\";", "-\t\t\t}", "-\t\t};", "+\tprivate Description removeIgnored(Description description) {", "+\t\tif (isIgnored(description))", "+\t\t\treturn Description.EMPTY;", "+\t\tDescription result = description.childlessCopy();", "+\t\tfor (Description each : description.getChildren()) {", "+\t\t\tDescription child= removeIgnored(each);", "+\t\t\tif (! child.isEmpty())", "+\t\t\t\tresult.addChild(child);", "+\t\t}", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3b5cbcb9fd1499306c2776d0abcdc07", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapter.java", "commitBeforeChange": "971c9a52281458375af79e303449fe22bf91feab", "commitAfterChange": "97402a3401c6cc2d45d395c0d9d636f483b5571c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate Filter removeIgnored()", "signatureAfterChange": "  \tprivate Description removeIgnored(Description description)", "diff": ["-\tprivate Filter removeIgnored() {", "-\t\treturn new Filter() {\t\t\t", "-\t\t\t@Override", "-\t\t\tpublic boolean shouldRun(Description description) {", "-\t\t\t\treturn !isIgnored(description);", "-\t\t\t}", "-\t\t\t", "-\t\t\t@Override", "-\t\t\tpublic String describe() {", "-\t\t\t\treturn \"not ignored\";", "-\t\t\t}", "-\t\t};", "+\tprivate Description removeIgnored(Description description) {", "+\t\tif (isIgnored(description))", "+\t\t\treturn Description.EMPTY;", "+\t\tDescription result = description.childlessCopy();", "+\t\tfor (Description each : description.getChildren()) {", "+\t\t\tDescription child= removeIgnored(each);", "+\t\t\tif (! child.isEmpty())", "+\t\t\t\tresult.addChild(child);", "+\t\t}", "+\t\treturn result;"]}]}
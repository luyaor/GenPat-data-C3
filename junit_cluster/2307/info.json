{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e43edaebd1400cf3c7f2de57289565a5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0841f0e2996f743536dbb6c63d8113c0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "63b1950468b19d91e368caa6ae804b2c4fefc6a8", "commitAfterChange": "df00d5eced3a7737b88de0f6f9e3673f0cf88f88", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "      public void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-        synchronized (fChildrenLock) {", "-            List<T> filteredChildren = new ArrayList<T>(getFilteredChildren());", "-            for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "+        synchronized (childrenLock) {", "+            List<T> children = new ArrayList<T>(getFilteredChildren());", "+            for (Iterator<T> iter = children.iterator(); iter.hasNext(); ) {", "-            fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);", "-            if (fFilteredChildren.isEmpty()) {", "+            filteredChildren = Collections.unmodifiableCollection(children);", "+            if (filteredChildren.isEmpty()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c514a03207533af9b9e5484bf98acca", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "96af9a2a520a40404971968ee14a183d0aed1c4b", "commitAfterChange": "0ce71108da6f487d76c0f4dc46cde41e11dd3daa", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "      public void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-            List<T> sortedChildren = new ArrayList<T>(getFilteredChildren());", "+            List<T> filteredChildren = new ArrayList<T>(getFilteredChildren());", "-                for (Iterator<T> iter = sortedChildren.iterator(); iter.hasNext(); ) {", "+                for (Iterator<T> iter = filteredChildren.iterator(); iter.hasNext(); ) {", "-                setFilteredChildren(sortedChildren);", "+                fFilteredChildren = Collections.unmodifiableCollection(filteredChildren);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a3568c525a5e56cf34c75fb015d6073", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "83a25d440d118b7d10779a884d35f31045949e27", "commitAfterChange": "84d8eddd970e46894d471cd2dd17ae8d86fb05db", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public void sort(Sorter sorter)", "signatureAfterChange": "      public void sort(Sorter sorter)", "diff": ["-        for (T each : getFilteredChildren()) {", "-            sortChild(each, sorter);", "+        synchronized (fLock) {", "+            for (T each : getFilteredChildren()) {", "+                sortChild(each, sorter);", "+            }", "+            List<T> sortedChildren = new ArrayList<T>(getFilteredChildren());", "+            Collections.sort(sortedChildren, comparator(sorter));", "+            setFilteredChildren(sortedChildren);", "-        List<T> sortedChildren = new ArrayList<T>(getFilteredChildren());", "-        Collections.sort(sortedChildren, comparator(sorter));", "-        getFilteredChildren().clear();", "-        getFilteredChildren().addAll(sortedChildren);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b67a41a0c8cdc01fb43dec60f4ef9d6a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tpublic void sort(Sorter sorter)", "signatureAfterChange": "      public void sort(Sorter sorter)", "diff": ["-\tpublic void sort(Sorter sorter) {", "-\t\tfSorter= sorter;", "-\t\tfor (T each : getFilteredChildren())", "-\t\t\tsortChild(each);", "-\t\tCollections.sort(getFilteredChildren(), comparator());", "-\t}", "+", "+    public void sort(Sorter sorter) {", "+        fSorter = sorter;", "+        for (T each : getFilteredChildren()) {", "+            sortChild(each);", "+        }", "+        Collections.sort(getFilteredChildren(), comparator());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c43f8b942c18ee7ba055a92f253cff71", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "beb1f4a80f7fa20523d40535fb81c1b8a7a9e638", "commitAfterChange": "83a25d440d118b7d10779a884d35f31045949e27", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "      public void sort(Sorter sorter)", "signatureAfterChange": "      public void sort(Sorter sorter)", "diff": ["-        fSorter = sorter;", "-            sortChild(each);", "+            sortChild(each, sorter);", "-        Collections.sort(getFilteredChildren(), comparator());", "+        List<T> sortedChildren = new ArrayList<T>(getFilteredChildren());", "+        Collections.sort(sortedChildren, comparator(sorter));", "+        getFilteredChildren().clear();", "+        getFilteredChildren().addAll(sortedChildren);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55af80ab918ba7f6015125ba386cae24", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bb128ccb67facb864aaa4575b7c50b3", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/awtui/TestRunner.java", "commitBeforeChange": "1e752dcb0a967bcb47fae4b12fb8765e79571e69", "commitAfterChange": "bfc94ee739d62127c7477300b26127bd560765a1", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 32, "signatureBeforeChange": " \t \tprivate String getTrace(Throwable t)", "signatureAfterChange": " \t \tprivate boolean setUseLoadingRunner()", "diff": ["+\tprivate boolean setUseLoadingRunner() {", "+\t\tsetLoading(fUseLoadingRunner.getState());", "+\t\tif (!fUseLoadingRunner.getState())", "+\t\t\tfNonLoadingRuns++;", "+\t\tif (fNonLoadingRuns > 1) {", "+\t\t\tString message1= \"Code modifications you made since the last run will be ignored.\";", "+\t\t\tString message2= \"It is recommended to restart the TestRunner. Do you still want to continue?\";", "+\t\t\tWarningDialog dialog= new WarningDialog(fFrame, message1, message2);", "+\t\t\tdialog.show();", "+\t\t\treturn dialog.getChoice();", "+\t\t}", "+\t\treturn true;", "+\t}", "-\tprivate String getTrace(Throwable t) { ", "-\t\tStringWriter stringWriter= new StringWriter();", "-\t\tPrintWriter writer= new PrintWriter(stringWriter);", "-\t\tt.printStackTrace(writer);", "-\t\tStringBuffer buffer= stringWriter.getBuffer();", "-\t\treturn buffer.toString();", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5c250fb358e4301b4b5dc33dbb70cf0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethodRunner.java", "commitBeforeChange": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf", "commitAfterChange": "4081076e513e84bb2376f889d4108e64e9a18653", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \t@Override \tprotected void run(Roadie context)", "signatureAfterChange": " \t\t@Override \t\tpublic void run(Roadie context) throws Throwable", "diff": ["-\t", "-\tprotected void run(Roadie context) {", "-\t\tnew Notifier(new Link() {", "-\t\t\t@Override", "-\t\t\tpublic void run(Roadie context) {", "-\t\t\t\trunWithExpectedExceptionCheck(context);", "-\t\t\t}\t\t\t", "-\t\t}).run(context);", "+\tpublic class TheoryAnchor extends Anchor {", "+\t\t@Override", "+\t\tpublic void run(Roadie context) throws Throwable {", "+\t\t\ttry {", "+\t\t\t\trunWithAssignment(Assignments.allUnassigned(context,", "+\t\t\t\t\t\tfTestMethod.getMethod()));", "+\t\t\t} catch (Throwable e) {", "+\t\t\t\tthrow new InvocationTargetException(e);", "+\t\t\t}", "+\t\t\tif (successes == 0)", "+\t\t\t\tAssert", "+\t\t\t\t\t\t.fail(\"Never found parameters that satisfied method.  Violated assumptions: \"", "+\t\t\t\t\t\t\t\t+ fInvalidParameters);"]}]}
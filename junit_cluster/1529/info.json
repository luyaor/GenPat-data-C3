{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49fb209bbc20194fb2c1d1ab3eb16a83", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e9a9a80dedb2953bf8092a53d324685", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tprivate Class<?>[] directCategories(Description description)", "signatureAfterChange": "          private Class<?>[] directCategories(Description description)", "diff": ["-\t\tprivate Class<?>[] directCategories(Description description) {", "-\t\t\tif (description == null)", "-\t\t\t\treturn new Class<?>[0];", "-\t\t\tCategory annotation= description.getAnnotation(Category.class);", "-\t\t\tif (annotation == null)", "-\t\t\t\treturn new Class<?>[0];", "-\t\t\treturn annotation.value();", "-\t\t}", "+        private Class<?>[] directCategories(Description description) {", "+            if (description == null) {", "+                return new Class<?>[0];", "+            }", "+            Category annotation = description.getAnnotation(Category.class);", "+            if (annotation == null) {", "+                return new Class<?>[0];", "+            }", "+            return annotation.value();", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2c4263ffdf112af723cfd45a4c2c260", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/textui/ResultPrinter.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprotected void printDefects(Enumeration<TestFailure> booBoos, int count, String type)", "signatureAfterChange": "      protected void printDefects(Enumeration<TestFailure> booBoos, int count, String type)", "diff": ["-\t", "-\tprotected void printDefects(Enumeration<TestFailure> booBoos, int count, String type) {", "-\t\tif (count == 0) return;", "-\t\tif (count == 1)", "-\t\t\tgetWriter().println(\"There was \" + count + \" \" + type + \":\");", "-\t\telse", "-\t\t\tgetWriter().println(\"There were \" + count + \" \" + type + \"s:\");", "-\t\tfor (int i= 1; booBoos.hasMoreElements(); i++) {", "-\t\t\tprintDefect(booBoos.nextElement(), i);", "-\t\t}", "-\t}", "+    protected void printDefects(Enumeration<TestFailure> booBoos, int count, String type) {", "+        if (count == 0) return;", "+        if (count == 1) {", "+            getWriter().println(\"There was \" + count + \" \" + type + \":\");", "+        } else {", "+            getWriter().println(\"There were \" + count + \" \" + type + \"s:\");", "+        }", "+        for (int i = 1; booBoos.hasMoreElements(); i++) {", "+            printDefect(booBoos.nextElement(), i);", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6afa89910f8e4461dc710bc66fcaa47", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc2cfa82cffd4e6489dae9ad383f4fa", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionTest.java", "commitBeforeChange": "41f96743522db61b14ef2c8ca7d719a226b9f153", "commitAfterChange": "bb13b318cd79a68470e93c79635090c7bb565475", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Parameters     public static Collection<Object[]> testsWithEventMatcher()", "signatureAfterChange": "      @Parameters     public static Collection<Object[]> testsWithEventMatcher()", "diff": ["-                {ThrowExpectedAssumptionViolatedException.class,", "-                        everyTestRunSuccessful()},", "-                {ThrowAssumptionViolatedExceptionButExpectOtherType.class,", "-                        hasSingleFailure()},", "-                {", "-                        ThrowAssumptionViolatedExceptionButExpectOtherType.class,", "-                        hasSingleFailureWithMessage(containsString(\"Stacktrace was: org.junit.internal.AssumptionViolatedException\"))},", "-                {ViolateAssumptionAndExpectException.class,", "+                {ExpectAssertionErrorWhichIsNotThrown.class, hasSingleFailure()},", "+                {FailedAssumptionAndExpectException.class,", "-                {ThrowExpectedAssertionError.class, everyTestRunSuccessful()},", "-                {", "-                        DontThrowAssertionErrorButExpectOne.class,", "-                        hasSingleFailureWithMessage(\"Expected test to throw an instance of java.lang.AssertionError\")},", "-                {", "-                        ThrowUnexpectedAssertionError.class,", "-                        hasSingleFailureWithMessage(startsWith(\"\\nExpected: an instance of java.lang.NullPointerException\"))},", "-                {FailAndDontHandleAssertinErrors.class,", "+                {FailBeforeExpectingException.class,"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ee4bc897581954ea7eefd5fd862e46", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/notification/RunNotifier.java", "commitBeforeChange": "6fd44daf9ecd93d78372c4a37c4d54bc3c3577d8", "commitAfterChange": "72af03c49fdad5f10e36c7eb4e7045feb971d253", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "          void run()", "signatureAfterChange": "          void run()", "diff": ["-            synchronized (fListeners) {", "-                List<RunListener> safeListeners = new ArrayList<RunListener>();", "-                List<Failure> failures = new ArrayList<Failure>();", "-                for (Iterator<RunListener> all = fCurrentListeners.iterator(); all", "-                        .hasNext(); ) {", "-                    try {", "-                        RunListener listener = all.next();", "-                        notifyListener(listener);", "-                        safeListeners.add(listener);", "-                    } catch (Exception e) {", "-                        failures.add(new Failure(Description.TEST_MECHANISM, e));", "-                    }", "+            int capacity = fCurrentListeners.size();", "+            ArrayList<RunListener> safeListeners = new ArrayList<RunListener>(capacity);", "+            ArrayList<Failure> failures = new ArrayList<Failure>(capacity);", "+            for (RunListener listener : fCurrentListeners) {", "+                try {", "+                    notifyListener(listener);", "+                    safeListeners.add(listener);", "+                } catch (Exception e) {", "+                    failures.add(new Failure(Description.TEST_MECHANISM, e));", "-                fireTestFailures(safeListeners, failures);", "+            fireTestFailures(safeListeners, failures);"]}]}
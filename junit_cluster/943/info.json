{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc285e85475fa4da10e343374c29a5aa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eeaf1154d50a59ca27f6ce61d1b16ae", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/TextListener.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tprotected void printFailures(Result result)", "signatureAfterChange": "      protected void printFailures(Result result)", "diff": ["-\tprotected void printFailures(Result result) {", "-\t\tList<Failure> failures= result.getFailures();", "-\t\tif (failures.size() == 0)", "-\t\t\treturn;", "-\t\tif (failures.size() == 1)", "-\t\t\tgetWriter().println(\"There was \" + failures.size() + \" failure:\");", "-\t\telse", "-\t\t\tgetWriter().println(\"There were \" + failures.size() + \" failures:\");", "-\t\tint i= 1;", "-\t\tfor (Failure each : failures)", "-\t\t\tprintFailure(each, \"\" + i++);", "-\t}", "+    protected void printFailures(Result result) {", "+        List<Failure> failures = result.getFailures();", "+        if (failures.size() == 0) {", "+            return;", "+        }", "+        if (failures.size() == 1) {", "+            getWriter().println(\"There was \" + failures.size() + \" failure:\");", "+        } else {", "+            getWriter().println(\"There were \" + failures.size() + \" failures:\");", "+        }", "+        int i = 1;", "+        for (Failure each : failures) {", "+            printFailure(each, \"\" + i++);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bb8eb9357c8887b48f8a9bbac199753", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate Runner buildRunner(Description each)", "signatureAfterChange": "      private Runner buildRunner(Description each)", "diff": ["-\tprivate Runner buildRunner(Description each) {", "-\t\tif (each.toString().equals(\"TestSuite with 0 tests\"))", "-\t\t\treturn Suite.emptySuite();", "-\t\tif (each.toString().startsWith(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX))", "-\t\t\t// This is cheating, because it runs the whole class ", "-\t\t\t// to get the warning for this method, but we can't do better, ", "-\t\t\t// because JUnit 3.8's", "-\t\t\t// thrown away which method the warning is for.", "-\t\t\treturn new JUnit38ClassRunner(new TestSuite(getMalformedTestClass(each)));", "-\t\tClass<?> type= each.getTestClass();", "-\t\tif (type == null)", "-\t\t\tthrow new RuntimeException(\"Can't build a runner from description [\" + each + \"]\");", "-\t\tString methodName= each.getMethodName();", "-\t\tif (methodName == null)", "-\t\t\treturn Request.aClass(type).getRunner();", "-\t\treturn Request.method(type, methodName).getRunner();", "-\t}", "+    private Runner buildRunner(Description each) {", "+        if (each.toString().equals(\"TestSuite with 0 tests\")) {", "+            return Suite.emptySuite();", "+        }", "+        if (each.toString().startsWith(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX)) {", "+            // This is cheating, because it runs the whole class", "+            // to get the warning for this method, but we can't do better,", "+            // because JUnit 3.8's", "+            // thrown away which method the warning is for.", "+            return new JUnit38ClassRunner(new TestSuite(getMalformedTestClass(each)));", "+        }", "+        Class<?> type = each.getTestClass();", "+        if (type == null) {", "+            throw new RuntimeException(\"Can't build a runner from description [\" + each + \"]\");", "+        }", "+        String methodName = each.getMethodName();", "+        if (methodName == null) {", "+            return Request.aClass(type).getRunner();", "+        }", "+        return Request.method(type, methodName).getRunner();", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc44911be683775d8d8945c8e94e9d07", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c18004d33b2723123347e0980e86385", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "e02beea07c6d3798e2db532d6c7cebe6cc21f30d", "commitAfterChange": "df88873d5013e400489550cf15e9b51dc438eb4b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void invokeValidatorsOnMethods(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnMethods(List<Throwable> errors)", "diff": ["-            for (FrameworkMethod frameworkMethod : annotationMap.get(annotationType)) {", "-                AnnotationValidator annotationValidator = createAnnotationValidator(validateWithAnnotation);", "-                errors.addAll(annotationValidator.validateAnnotatedMethod(frameworkMethod.getMethod()));", "+            if (validateWithAnnotation != null) {", "+                for (FrameworkMethod frameworkMethod : annotationMap.get(annotationType)) {", "+                    AnnotationValidator annotationValidator =", "+                            fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+                    errors.addAll(annotationValidator.validateAnnotatedMethod(frameworkMethod.getMethod()));", "+                }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df56274c9409330d00e0a49c6ef48149", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "e02beea07c6d3798e2db532d6c7cebe6cc21f30d", "commitAfterChange": "df88873d5013e400489550cf15e9b51dc438eb4b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private void invokeValidatorsOnFields(List<Throwable> errors)", "signatureAfterChange": "      private void invokeValidatorsOnFields(List<Throwable> errors)", "diff": ["-            for (FrameworkField frameworkField : annotationMap.get(annotationType)) {", "-                AnnotationValidator annotationValidator = createAnnotationValidator(validateWithAnnotation);", "-                errors.addAll(annotationValidator.validateAnnotatedField(frameworkField.getField()));", "+            if (validateWithAnnotation != null) {", "+                for (FrameworkField frameworkField : annotationMap.get(annotationType)) {", "+                    AnnotationValidator annotationValidator =", "+                            fAnnotationValidatorFactory.createAnnotationValidator(validateWithAnnotation);", "+                    errors.addAll(annotationValidator.validateAnnotatedField(frameworkField.getField()));", "+                }", "-    }"]}]}
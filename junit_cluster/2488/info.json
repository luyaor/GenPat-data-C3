{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "365ea1669005b91d916fb0ab7343b497", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bef83e8c620cbb1c9cf1acd4e3a2992", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "ce280f0afd532351d5783cf93d08526181eee4c8", "commitAfterChange": "cec8e3ed1246c289ae156c4418d2e224bd793f4b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \t\tprivate boolean hasCorrectCategoryAnnotation(Description description)", "signatureAfterChange": "  \t\tprivate boolean hasCorrectCategoryAnnotation(Description description)", "diff": ["-\t\t\t\treturn false;", "-\t\t\tfor (Class<? extends CategoryType> each : annotation.value())", "-\t\t\t\tif (fCategoryClass.isAssignableFrom(each))", "+\t\t\t\treturn fIncluded == null;", "+\t\t\tfor (Class<?> each : annotation.value()) {", "+\t\t\t\tif (fExcluded != null && fExcluded.isAssignableFrom(each))", "+\t\t\t\t\treturn false;", "+\t\t\t\tif (fIncluded == null || fIncluded.isAssignableFrom(each))", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd2455e107c1f91faf0f9326461eb91d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/AnnotatedBuilder.java", "commitBeforeChange": "6dd24ff4c2b18160ee770b5baa08f4de7056eef1", "commitAfterChange": "00711f69af5f74d1a5cce573290847b78ce34cec", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public Runner runnerForClass(Class<?> testClass) throws Exception", "signatureAfterChange": "      @Override     public Runner runnerForClass(Class<?> testClass) throws Exception", "diff": ["-        RunWith annotation = testClass.getAnnotation(RunWith.class);", "-        if (annotation != null) {", "-            return buildRunner(annotation.value(), testClass);", "+        for (Class<?> currentTestClass = testClass; currentTestClass != null;", "+             currentTestClass = getEnclosingClassForNonStaticMemberClass(currentTestClass)) {", "+            RunWith annotation = currentTestClass.getAnnotation(RunWith.class);", "+            if (annotation != null) {", "+                return buildRunner(annotation.value(), testClass);", "+            }", "+"]}]}
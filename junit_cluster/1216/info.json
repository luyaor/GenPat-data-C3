{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0a27b10d7171566b79f639198305c79", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c0320b4d76eceed72e9f29bebd74bff", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java", "commitBeforeChange": "e1bf14b4d5b7aecf4611fd400417359424121544", "commitAfterChange": "f6a3d7405b72966d3714355804e1b3c14b1425cb", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 53, "signatureBeforeChange": "      @Test     public void meaningfulFailureWhenParametersAreNotArrays()", "signatureAfterChange": "      @Test     public void runsEveryTestOfArray()", "diff": ["-", "-    @Test", "-    public void meaningfulFailureWhenParametersAreNotArrays() {", "-        assertThat(", "-                testResult(WrongElementType.class).toString(),", "-                containsString(\"WrongElementType.data() must return an Iterable of arrays.\"));", "-    }", "+", "+    @Test", "+    public void runsEveryTestOfArray() {", "+        Result result= JUnitCore.runClasses(FibonacciTestWithArray.class);", "+        assertEquals(7, result.getRunCount());", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48efba0970c59e43697d295ca86b78d1", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tprotected void collectInitializationErrors(List<Throwable> errors)", "signatureAfterChange": " \t \tprotected void validate() throws InitializationError", "diff": ["+\t", "+\tprotected void validate() throws InitializationError {", "+\t\tMethodValidator methodValidator= new MethodValidator(fTestClass);", "+\t\tmethodValidator.validateMethodsForDefaultRunner();", "+\t\tmethodValidator.assertValid();", "-\tprotected void collectInitializationErrors(List<Throwable> errors) {", "-\t\tgetTestClass().validateMethodsForDefaultRunner(errors);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66849c598621491b16ced393a8708705", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47c0587aaaa0f2f5d8e346833e6482de", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java", "commitBeforeChange": "61994e0c0aa768b43fad1ac6e35b1e43ffc8b142", "commitAfterChange": "97654ff38f976733fa4c6ae9b28e3fe10328183f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void failuresNamedCorrectly()", "signatureAfterChange": "      @Test     public void failuresNamedCorrectly()", "diff": ["-", "-    @Test", "-    public void failuresNamedCorrectly() {", "-        Result result = JUnitCore.runClasses(FibonacciTest.class);", "-        assertEquals(", "-                \"test[1: fib(1)=1](\" + FibonacciTest.class.getName() + \")\",", "-                result.getFailures().get(0).getTestHeader());", "+", "+    @Test", "+    public void failuresNamedCorrectly() {", "+        Result result = JUnitCore.runClasses(ThreeFailures.class);", "+        assertEquals(", "+                \"testSomething[0: x=1](\" + ThreeFailures.class.getName() + \")\",", "+                result.getFailures().get(0).getTestHeader());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6689f6e4d3ad70299d3916475ae8ed0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java", "commitBeforeChange": "982a75011a074ab25f2c96a1c2639c5b1ebb3b18", "commitAfterChange": "5475e12b57f5af0140deffa7f45c75dc47803167", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \t@Test \tpublic void meaningfulFailureWhenParameterListsAreNotArrays()", "signatureAfterChange": "  \t@Test \tpublic void meaningfulFailureWhenParametersAreNotArrays()", "diff": ["-\tpublic void meaningfulFailureWhenParameterListsAreNotArrays() {", "-\t\tString expected= String.format(", "-\t\t\t\t\"%s.data() must return a Collection of arrays.\",", "-\t\t\t\tWrongElementType.class.getName());", "-\t\tassertThat(testResult(WrongElementType.class).toString(),", "-\t\t\t\tcontainsString(expected));", "+\tpublic void meaningfulFailureWhenParametersAreNotArrays() {", "+\t\tassertThat(", "+\t\t\t\ttestResult(WrongElementType.class).toString(),", "+\t\t\t\tcontainsString(\"WrongElementType.data() must return an Iterable of arrays.\"));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aff1dfa7c18feff40a4fd56db3ccf1f8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119ed8cec3051f9f204f71622e3d1eef", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "c228881359e2a4ccd0d5972c646f043ec42d62e0", "commitAfterChange": "0deeda931d45a23413e1c84a1966469deadfdb83", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void validateDataPointFields(List<Throwable> errors)", "signatureAfterChange": " \t \tprivate void validateDataPointFields(List<Throwable> errors)", "diff": ["-\t\tfor (Field each : fields)", "-\t\t\tif (each.getAnnotation(DataPoint.class) != null && !Modifier.isStatic(each.getModifiers()))", "-\t\t\t\terrors.add(new Error(\"DataPoint field \" + each.getName() + \" must be static\"));", "+\t\tfor (Field field : fields)", "+\t\t{", "+\t\t\tif (field.getAnnotation(DataPoint.class) == null)", "+\t\t\t\tcontinue;", "+\t\t\tif (!Modifier.isStatic(field.getModifiers()))", "+\t\t\t\terrors.add(new Error(\"DataPoint field \" + field.getName() + \" must be static\"));", "+\t\t\tif (!Modifier.isPublic(field.getModifiers()))", "+\t\t\t\terrors.add(new Error(\"DataPoint field \" + field.getName() + \" must be public\"));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e9c5c1587385ed06408d2c5e4ea2b49", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/BeforeAndAfterRunner.java", "commitBeforeChange": "6a83bc0f1e5f9839a36910c3a21108bc38367afb", "commitAfterChange": "890b7b977e42360aa8975c8535fc66bfd8d8cb3e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tprivate void invokeMethod(Method method) throws Exception", "signatureAfterChange": " \t \tprivate void invokeMethod(Method method) throws Exception", "diff": ["-\t\tmethod.invoke(fTest);", "+\t\tif (Modifier.isStatic(method.getModifiers()))", "+\t\t\tif (method.getParameterTypes().length > 0)", "+\t\t\t\tmethod.invoke(null, fTest);", "+\t\t\telse", "+\t\t\t\tmethod.invoke(null);", "+\t\telse", "+\t\t\tmethod.invoke(fTest);"]}]}
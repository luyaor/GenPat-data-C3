{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc324988ac2ddb8711c168cf0b64c277", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146bfc68c44383c6fcbdce8351106c52", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/runners/Parameterized.java", "commitBeforeChange": "db89759c22060a89f6750e2e92ce93072eace561", "commitAfterChange": "521fdb5aae536bd5055f6d0e4f09c5a7bdb5799f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \t\tpublic RunAllParameterMethods(Class<?> klass) throws Exception", "signatureAfterChange": "  \tpublic Parameterized(Class<?> klass) throws Exception", "diff": ["-", "-\t\tpublic RunAllParameterMethods(Class<?> klass) throws Exception {", "-\t\t\tsuper(klass.getName());", "-\t\t\tfKlass= klass;", "-\t\t\tint i= 0;", "-\t\t\tfor (final Object each : getParametersList()) {", "-\t\t\t\tif (each instanceof Object[])", "-\t\t\t\t\tsuper.add(new TestClassRunnerForParameters(klass, (Object[])each, i++));", "-\t\t\t\telse", "-\t\t\t\t\tthrow new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fKlass.getName(), getParametersMethod().getName()));", "-\t\t\t}", "-\t\t}", "+", "+\tpublic Parameterized(Class<?> klass) throws Exception {", "+\t\tsuper(klass.getName());", "+\t\tfTestClass= new TestClass(klass);", "+\t\t", "+\t\tMethodValidator methodValidator= new MethodValidator(fTestClass);", "+\t\tmethodValidator.validateStaticMethods();", "+\t\tmethodValidator.validateInstanceMethods();", "+\t\tmethodValidator.assertValid();", "+\t\t", "+\t\tint i= 0;", "+\t\tfor (final Object each : getParametersList()) {", "+\t\t\tif (each instanceof Object[])", "+\t\t\t\tadd(new TestClassRunnerForParameters(fTestClass, (Object[])each, i++));", "+\t\t\telse", "+\t\t\t\tthrow new Exception(String.format(\"%s.%s() must return a Collection of arrays.\", fTestClass.getName(), getParametersMethod().getName()));", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fe7d60492c6bd946be9e40b298a9d51", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "26f9ebac45e0ff95c72d356b98b64eaf3de4f618", "commitAfterChange": "99b0ebc70e061d7620179f4e72e735e3944e54cd", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "     protected List<org.junit.rules.MethodRule> rules(Object target)", "signatureAfterChange": "     protected List<MethodRule> rules(Object target)", "diff": ["-    protected List<org.junit.rules.MethodRule> rules(Object target) {", "-        return getTestClass().getAnnotatedFieldValues(target, Rule.class,", "-                org.junit.rules.MethodRule.class);", "+    protected List<MethodRule> rules(Object target) {", "+        List<MethodRule> rules = getTestClass().getAnnotatedMethodValues(target, ", "+                Rule.class, MethodRule.class);", "+        ", "+        rules.addAll(getTestClass().getAnnotatedFieldValues(target,", "+                Rule.class, MethodRule.class));", "+        ", "+        return rules;"]}]}
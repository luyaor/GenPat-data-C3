{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "678ca461b7f0b45b1b5f5d0d7e33d7ab", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed76741bdd320f9a00c20fa1b6a67ba", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "1768d08d029dc3bf1ab88e26df0a9b40ae61227f", "commitAfterChange": "5ca9da987a7d4dc00e082aaf552cbd8ee8c7bd33", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private Thread getStuckThread (Thread mainThread)", "signatureAfterChange": "     private Thread getStuckThread (Thread mainThread)", "diff": ["-\t\tThreadMXBean mxBean = ManagementFactory.getThreadMXBean();", "-    \t\t// if there are too many threads to fit into the array, enumerate's result", "-    \t\t// is >= the array's length; therefore we can't trust that it returned all", "-    \t\t// the threads.  Try again.", "+            // if there are too many threads to fit into the array, enumerate's result", "+            // is >= the array's length; therefore we can't trust that it returned all", "+            // the threads.  Try again.", "-    \tThread firstRunnable = null;", "-    \tThread mostCpu = null;", "+    \tThread stuckThread = null;", "-    \tint runnableCount = 0;", "-    \t\t\trunnableCount++;", "-    \t\t\tif (firstRunnable == null) firstRunnable = threads[i];", "-    \t\t\tif (mxBean.isThreadCpuTimeSupported()) {", "-    \t\t\t\ttry {", "-    \t\t\t\t\tlong cpuTime = mxBean.getThreadCpuTime(threads[i].getId());", "-    \t\t\t\t\tif (mostCpu == null || cpuTime > maxCpuTime) {", "-    \t\t\t\t\t\tmostCpu = threads[i];", "-    \t\t\t\t\t\tmaxCpuTime = cpuTime;", "-    \t\t\t\t\t}", "-    \t\t\t\t} catch (UnsupportedOperationException e) {", "-    \t\t\t\t}", "-    \t\t\t}", "+                long threadCpuTime = cpuTime (threads [i]);", "+                if (stuckThread == null || threadCpuTime > maxCpuTime) {", "+                    stuckThread = threads[i];", "+                    maxCpuTime = threadCpuTime;", "+                }", "-    \tThread stuckThread =", "-    \t\t\t(runnableCount == 1) ? firstRunnable :", "-    \t\t\t\t((mostCpu != null) ? mostCpu : firstRunnable);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f15e489efe482ed129a5bbc6c94efbd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "5408162765635af9b42a47ea865b06865284a2ab", "commitAfterChange": "07cf3c7fa446da330776502fb7cdc7329bfa2265", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private Thread[] getThreadArray(ThreadGroup group)", "signatureAfterChange": "     private List<Thread> getThreadsInGroup(ThreadGroup group)", "diff": ["-    private Thread[] getThreadArray(ThreadGroup group) {", "-        final int count = group.activeCount(); // this is just an estimate", "-        int enumSize = Math.max(count * 2, 100);", "-        int enumCount;", "-        Thread[] threads;", "-        int loopCount = 0;", "-        while (true) {", "-            threads = new Thread[enumSize];", "-            enumCount = group.enumerate(threads);", "-            if (enumCount < enumSize) {", "-                break;", "+    private List<Thread> getThreadsInGroup(ThreadGroup group) {", "+        final int activeThreadCount = group.activeCount(); // this is just an estimate", "+        int threadArraySize = Math.max(activeThreadCount * 2, 100);", "+        for (int loopCount = 0; loopCount < 5; loopCount++) {", "+            Thread[] threads = new Thread[threadArraySize];", "+            int enumCount = group.enumerate(threads);", "+            if (enumCount < threadArraySize) {", "+                return Arrays.asList(threads).subList(0, enumCount);", "-            enumSize += 100;", "-            if (++loopCount >= 5) {", "-                return null;", "-            }", "-            // threads are proliferating too fast for us.  Bail before we get into ", "-            // trouble.", "+            threadArraySize += 100;", "-        return copyThreads(threads, enumCount);", "-    }", "+        // threads are proliferating too fast for us.  Bail before we get into ", "+        // trouble.", "+        return Collections.emptyList();"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "705f570d0da86ffdbccd6c1eed490103", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd2455e107c1f91faf0f9326461eb91d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/AnnotatedBuilder.java", "commitBeforeChange": "6dd24ff4c2b18160ee770b5baa08f4de7056eef1", "commitAfterChange": "00711f69af5f74d1a5cce573290847b78ce34cec", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "      @Override     public Runner runnerForClass(Class<?> testClass) throws Exception", "signatureAfterChange": "      @Override     public Runner runnerForClass(Class<?> testClass) throws Exception", "diff": ["-        RunWith annotation = testClass.getAnnotation(RunWith.class);", "-        if (annotation != null) {", "-            return buildRunner(annotation.value(), testClass);", "+        for (Class<?> currentTestClass = testClass; currentTestClass != null;", "+             currentTestClass = getEnclosingClassForNonStaticMemberClass(currentTestClass)) {", "+            RunWith annotation = currentTestClass.getAnnotation(RunWith.class);", "+            if (annotation != null) {", "+                return buildRunner(annotation.value(), testClass);", "+            }", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cca80cdbe2cace98f33340bf191a8554", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/builders/AnnotatedBuilder.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic Runner runnerForClass(Class<?> testClass) throws Exception", "signatureAfterChange": "      @Override     public Runner runnerForClass(Class<?> testClass) throws Exception", "diff": ["-\t@Override", "-\tpublic Runner runnerForClass(Class<?> testClass) throws Exception {", "-\t\tRunWith annotation= testClass.getAnnotation(RunWith.class);", "-\t\tif (annotation != null)", "-\t\t\treturn buildRunner(annotation.value(), testClass);", "-\t\treturn null;", "-\t}", "+    @Override", "+    public Runner runnerForClass(Class<?> testClass) throws Exception {", "+        RunWith annotation = testClass.getAnnotation(RunWith.class);", "+        if (annotation != null) {", "+            return buildRunner(annotation.value(), testClass);", "+        }", "+        return null;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69ba9779f5bb576390c55376c85f0621", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "250d7a32a2eaa023f69bf0bfe2122a72", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/matchers/StacktracePrintingMatcher.java", "commitBeforeChange": "872faeab15115635b3260001979ae036e64e29bf", "commitAfterChange": "a37fd9ac8b2afc54384fd32f470b54aa69dc620a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t@Factory \tpublic static <T extends Throwable> Matcher<T> withStacktrace( \t\t\tMatcher<T> throwableMatcher)", "signatureAfterChange": "  \t@Factory \tpublic static <T extends Exception> Matcher<T> isException( \t\t\tMatcher<T> exceptionMatcher)", "diff": ["-\tpublic static <T extends Throwable> Matcher<T> withStacktrace(", "+", "+\t@Factory", "+\tpublic static <T extends Exception> Matcher<T> isException(", "+\t\t\tMatcher<T> exceptionMatcher) {", "+\t\treturn new StacktracePrintingMatcher<T>(exceptionMatcher);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2813793b2a429724b1a601aa14255017", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/matchers/JUnitMatchers.java", "commitBeforeChange": "872faeab15115635b3260001979ae036e64e29bf", "commitAfterChange": "a37fd9ac8b2afc54384fd32f470b54aa69dc620a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic static <T extends Throwable> Matcher<T> withStacktrace(Matcher<T> throwableMatcher)", "signatureAfterChange": " \tpublic static <T extends Exception> Matcher<T> isException(Matcher<T> exceptionMatcher)", "diff": ["-\tpublic static <T extends Throwable> Matcher<T> withStacktrace(Matcher<T> throwableMatcher) {", "-\t\treturn StacktracePrintingMatcher.withStacktrace(throwableMatcher);", "+\t */", "+\tpublic static <T extends Exception> Matcher<T> isException(Matcher<T> exceptionMatcher) {", "+\t\treturn StacktracePrintingMatcher.isException(exceptionMatcher);"]}]}
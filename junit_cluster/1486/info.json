{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b875ac5c2d0388989d121c2a292ff89c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73351106be654b4818263fadabe9bf57", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "5cdd702717c5ca7dd3002e95847232681c445127", "commitAfterChange": "0956a4e6a236e9414c0d19a349206f3350501c60", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 13, "signatureBeforeChange": "          private Collection<T> getFilteredChildrenWithoutIgnored(             final RunNotifier notifier)", "signatureAfterChange": "      private boolean isAnyChildNotIgnored(Collection<T> children)", "diff": ["+", "+    private boolean isAnyChildNotIgnored(Collection<T> children) {", "+        for (T child : children) {", "+            if(isIgnored(child) == false) {", "+                return true;", "+            }", "+        }", "+        ", "+        return false;", "-    ", "-    private Collection<T> getFilteredChildrenWithoutIgnored(", "-            final RunNotifier notifier) {", "-        final Collection<T> filteredChildren = getFilteredChildren();", "-        Collection<T> filteredChildrenCopy = new ArrayList<T>(filteredChildren);", "-", "-        for (T child : filteredChildren) {", "-            if (isIgnored(child)) {", "-                Description childDescription = describeChild(child);", "-                notifier.fireTestIgnored(childDescription);", "-                filteredChildrenCopy.remove(child);", "-            }", "-        }", "-", "-        return Collections", "-                .unmodifiableCollection(filteredChildrenCopy);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4d0be3f1b12e4d276275260ffdd7ade", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "81bb4fe24756a6a21b57975cac9eda4ce2304308", "commitAfterChange": "d517352c4b06fee4d5dfddfc69c86514d09eddc3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected Statement childrenInvoker(final RunNotifier notifier)", "signatureAfterChange": "     protected Statement childrenInvoker(final RunNotifier notifier)", "diff": ["+        final Collection<T> filteredChildren= getFilteredChildren();", "+        Collection<T> filteredChildrenCopy= new ArrayList<T>(filteredChildren);", "+", "+        for (T child : filteredChildren) {", "+            if (isIgnoredMethod(child)) {", "+                Description childDescription= describeChild(child);", "+                notifier.fireTestIgnored(childDescription);", "+                filteredChildrenCopy.remove(child);", "+            }", "+", "+        }", "+", "+        final Collection<T> filteredChildrenWithoutIgnores= Collections", "+                .unmodifiableCollection(filteredChildrenCopy);", "+", "+        if (filteredChildrenWithoutIgnores.isEmpty()) {", "+            return new EmptyStatement();", "+        }", "+", "-                runChildren(notifier);", "+                runChildren(notifier, filteredChildrenWithoutIgnores);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb1defd7cd0f120fc442ce1c4a91045f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "734b6ba797026c223aa686496581f7124249be9a", "commitAfterChange": "224098471a55701c40ab5a49888d93d8ff304164", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     protected Statement childrenInvoker(final RunNotifier notifier)", "signatureAfterChange": "     protected Statement childrenInvoker(final RunNotifier notifier)", "diff": ["+        final Collection<T> filteredChildrenWithoutIgnores= getFilteredChildrenWithoutIgnores(notifier);", "+", "+        if (filteredChildrenWithoutIgnores.isEmpty()) {", "+            return new EmptyStatement();", "+        }", "+", "+        return new Statement() {", "+            @Override", "+            public void evaluate() {", "+                runChildren(notifier, filteredChildrenWithoutIgnores);", "+            }", "+        };", "+    }", "-        final Collection<T> filteredChildrenWithoutIgnores= Collections", "-", "-        if (filteredChildrenWithoutIgnores.isEmpty()) {", "-            return new EmptyStatement();", "-        }", "-", "-        return new Statement() {", "-            @Override", "-            public void evaluate() {", "-                runChildren(notifier, filteredChildrenWithoutIgnores);", "-            }", "-        };"]}]}
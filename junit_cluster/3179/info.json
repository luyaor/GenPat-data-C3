{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23837c6def4c999e02e04e2645afcc6e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b6930db5c01deaa8470883f773021ba", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/MethodValidator.java", "commitBeforeChange": "88f0fe3ced24506ddf9791f7a088163f4e7b1f20", "commitAfterChange": "3d7fee93ddc21a6e849c36d5ae58b37b3d189665", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tprivate void validateTestMethods(Class<? extends Annotation> annotation, \t\t\tboolean shouldBeStatic)", "signatureAfterChange": "  \tprivate void validateTestMethods(Class<? extends Annotation> annotation, \t\t\tboolean isStatic)", "diff": ["-\t\t\tboolean shouldBeStatic) {", "+\t\t\tboolean isStatic) {", "-\t\t\tif (shouldBeStatic && !isStatic(each))", "+\t\t\tif (Modifier.isStatic(each.getModifiers()) != isStatic) {", "+\t\t\t\tString state= isStatic ? \"should\" : \"should not\";", "-\t\t\t\t\t\t+ \"should be static\"));", "-\t\t\tif (!shouldBeStatic && runsAsStatic(each))", "-\t\t\t\tfErrors.add(new Exception(\"Method \" + each.getName() + \"() \"", "-\t\t\t\t\t\t+ \"should not be static\"));", "+\t\t\t\t\t\t+ state + \" be static\"));", "+\t\t\t}", "-\t\t\tif (effectiveParameterCount(each, shouldBeStatic) != 0)", "+\t\t\tif (each.getParameterTypes().length != 0)", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b423177de724210d1b2988506ffe696", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "48af7e797dbefa1fc47e80394c7f74ef87c3c7ab", "commitAfterChange": "85f9d8397bfd96261c3214284672180c522e2d38", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "      private List<AnnotationValidator> createAnnotationValidators(Annotation annotation)", "signatureAfterChange": "      private AnnotationValidator createAnnotationValidator(Class<? extends Annotation> annotationType)", "diff": ["-    private List<AnnotationValidator> createAnnotationValidators(Annotation annotation) {", "-        List<AnnotationValidator> validators = new ArrayList<AnnotationValidator>();", "-        Class<? extends Annotation> annotationType = annotation.annotationType();", "-        Validator validatorAnnotation = annotationType.getAnnotation(Validator.class);", "-        Class<?>[] classes = validatorAnnotation.value();", "-        for (Class clazz : classes) {", "-            try {", "-                AnnotationValidator annotationValidator = (AnnotationValidator) clazz.newInstance();", "-                validators.add(annotationValidator);", "-            } catch (Exception e) {", "-                throw new RuntimeException(\"Could not create AnnotationValidator class \" + clazz.getName(), e);", "-            }", "-        return validators;", "+", "+    private AnnotationValidator createAnnotationValidator(Class<? extends Annotation> annotationType) {", "+        ValidateWith validateWithAnnotation = annotationType.getAnnotation(ValidateWith.class);", "+        Class<?> clazz = validateWithAnnotation.value();", "+        try {", "+            AnnotationValidator annotationValidator = (AnnotationValidator) clazz.newInstance();", "+            fAnnotationTypeToValidatorMap.put(annotationType, annotationValidator);", "+            return annotationValidator;", "+        } catch (Exception e) {", "+            throw new RuntimeException(\"Could not create AnnotationValidator class \" + clazz.getName(), e);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88ee56cf252777f51815160efd91de67", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/MethodSorter.java", "commitBeforeChange": "785a33b478d358e79a3b6592754ad9ec051e4278", "commitAfterChange": "5d9e0022d3f6db1367d530579de6332b9c8802e3", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "     public static Method[] getDeclaredMethods(Class<?> clazz)", "signatureAfterChange": "     public static Method[] getDeclaredMethods(Class<?> clazz)", "diff": ["-        List<String> names = Collections.emptyList();", "-        try {", "-            names = methodNamesAndDescriptors(clazz);", "-        } catch (IOException x) {", "-            // TODO report somehow?", "-        }", "-        final List<String> _names = names;", "-                int i1 = _names.indexOf(nameAndDescriptor(m1));", "-                int i2 = _names.indexOf(nameAndDescriptor(m2));", "+                int i1 = m1.getName().hashCode();", "+                int i2 = m2.getName().hashCode();", "-    }"]}]}
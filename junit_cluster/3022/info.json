{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e64adc3d3392ef6328b4acd92257ac3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a726eebf8566b27ede8ef3f8df5bf00c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "a07f1be1bc7eb7f7d757da48d0a3110452cca4d4", "commitAfterChange": "095d3f8df0708f98d41f5894a892388b6985c44f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \t\t@Override \t\tprotected void validateConstructor(List<Throwable> errors)", "signatureAfterChange": "  \t\t@Override \t\tprotected void validateZeroArgConstructor(List<Throwable> errors)", "diff": ["-\t\tprotected void validateConstructor(List<Throwable> errors) {", "-\t\t\tConstructor<?>[] constructors= getTestClass().getJavaClass()", "-\t\t\t\t\t.getConstructors();", "-\t\t\tif (!(constructors.length == 1)) {", "-\t\t\t\tString gripe= \"Test class should have exactly one public constructor\";", "-\t\t\t\terrors.add(new Exception(gripe));", "-\t\t\t}", "+\t\tprotected void validateZeroArgConstructor(List<Throwable> errors) {", "+\t\t\t// constructor can, nay, should have args."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f238d83baf87b993f4470a22bee82fa9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "94d454a32857d85e08600e38728418863478501c", "commitAfterChange": "a07f1be1bc7eb7f7d757da48d0a3110452cca4d4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " \t\t \t\t@Override \t\tprotected void validateNoArgConstructor(List<Throwable> errors)", "signatureAfterChange": "  \t\t@Override \t\tprotected void validateConstructor(List<Throwable> errors)", "diff": ["-\t\t", "+", "-\t\tprotected void validateNoArgConstructor(List<Throwable> errors) {", "-\t\t\t// do nothing: constructor should have parameters", "-\t\t\t// TODO: but should still be public, and just one", "+\t\tprotected void validateConstructor(List<Throwable> errors) {", "+\t\t\tConstructor<?>[] constructors= getTestClass().getJavaClass()", "+\t\t\t\t\t.getConstructors();", "+\t\t\tif (!(constructors.length == 1)) {", "+\t\t\t\tString gripe= \"Test class should have exactly one public constructor\";", "+\t\t\t\terrors.add(new Exception(gripe));", "+\t\t\t}"]}]}
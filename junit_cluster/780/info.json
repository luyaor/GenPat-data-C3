{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a3f531f1556ddf17c604d5968d14b7d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bcd1fa45727a4fb5059760ee4938aa5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/rules/RuleFieldValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void validate(TestClass target, List<Throwable> errors)", "signatureAfterChange": "     public void validate(TestClass target, List<Throwable> errors)", "diff": ["-\t */", "-\tpublic void validate(TestClass target, List<Throwable> errors) {", "-\t\tList<? extends FrameworkMember<?>> members= fMethods ? target.getAnnotatedMethods(fAnnotation)", "-\t\t\t\t\t\t\t\t\t\t: target.getAnnotatedFields(fAnnotation);", "-\t\t", "-\t\tfor (FrameworkMember<?> each : members)", "-\t\t\tvalidateMember(each, errors);", "-\t}", "+     */", "+    public void validate(TestClass target, List<Throwable> errors) {", "+        List<? extends FrameworkMember<?>> members = fMethods ? target.getAnnotatedMethods(fAnnotation)", "+                : target.getAnnotatedFields(fAnnotation);", "+        for (FrameworkMember<?> each : members) {", "+            validateMember(each, errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b20a464de0f54da3e7a5e434983f16b3", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \tprotected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation, \t\t\tboolean isStatic, List<Throwable> errors)", "signatureAfterChange": "     protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation,             boolean isStatic, List<Throwable> errors)", "diff": ["-\t */", "-\tprotected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation,", "-\t\t\tboolean isStatic, List<Throwable> errors) {", "-\t\tList<FrameworkMethod> methods= getTestClass().getAnnotatedMethods(annotation);", "-\t\tfor (FrameworkMethod eachTestMethod : methods)", "-\t\t\teachTestMethod.validatePublicVoidNoArg(isStatic, errors);", "-\t}", "+     */", "+    protected void validatePublicVoidNoArgMethods(Class<? extends Annotation> annotation,", "+            boolean isStatic, List<Throwable> errors) {", "+        List<FrameworkMethod> methods = getTestClass().getAnnotatedMethods(annotation);", "+        for (FrameworkMethod eachTestMethod : methods) {", "+            eachTestMethod.validatePublicVoidNoArg(isStatic, errors);", "+        }", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30f0f9e2b38bacea556c8038fa5716bd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a57786d549c3c7ab627067f120429aa", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/TestSuite.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate void addTestsFromTestCase(final Class<?> theClass)", "signatureAfterChange": "      private void addTestsFromTestCase(final Class<?> theClass)", "diff": ["-\tprivate void addTestsFromTestCase(final Class<?> theClass) {", "-\t\tfName= theClass.getName();", "-\t\ttry {", "-\t\t\tgetTestConstructor(theClass); // Avoid generating multiple error messages", "-\t\t} catch (NoSuchMethodException e) {", "-\t\t\taddTest(warning(\"Class \"+theClass.getName()+\" has no public constructor TestCase(String name) or TestCase()\"));", "-\t\t\treturn;", "-\t\t}", "-\t\tif (!Modifier.isPublic(theClass.getModifiers())) {", "-\t\t\taddTest(warning(\"Class \"+theClass.getName()+\" is not public\"));", "-\t\t\treturn;", "-\t\t}", "-\t\tClass<?> superClass= theClass;", "-\t\tList<String> names= new ArrayList<String>();", "-\t\twhile (Test.class.isAssignableFrom(superClass)) {", "-\t\t\tfor (Method each : MethodSorter.getDeclaredMethods(superClass))", "-\t\t\t\taddTestMethod(each, names, theClass);", "-\t\t\tsuperClass= superClass.getSuperclass();", "-\t\t}", "-\t\tif (fTests.size() == 0)", "-\t\t\taddTest(warning(\"No tests found in \"+theClass.getName()));", "-\t}", "+    private void addTestsFromTestCase(final Class<?> theClass) {", "+        fName = theClass.getName();", "+        try {", "+            getTestConstructor(theClass); // Avoid generating multiple error messages", "+        } catch (NoSuchMethodException e) {", "+            addTest(warning(\"Class \" + theClass.getName() + \" has no public constructor TestCase(String name) or TestCase()\"));", "+            return;", "+        }", "+        if (!Modifier.isPublic(theClass.getModifiers())) {", "+            addTest(warning(\"Class \" + theClass.getName() + \" is not public\"));", "+            return;", "+        }", "+        Class<?> superClass = theClass;", "+        List<String> names = new ArrayList<String>();", "+        while (Test.class.isAssignableFrom(superClass)) {", "+            for (Method each : MethodSorter.getDeclaredMethods(superClass)) {", "+                addTestMethod(each, names, theClass);", "+            }", "+            superClass = superClass.getSuperclass();", "+        }", "+        if (fTests.size() == 0) {", "+            addTest(warning(\"No tests found in \" + theClass.getName()));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6c4af7edd39ec794c146d5457ee23bc", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/DescriptionTest.java", "commitBeforeChange": "8134371705a43fa2b2a8913678d4336d867f6647", "commitAfterChange": "785c7859cd87dc5cb3872fef476ce2f86c9259dd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "      @Test     public void roundTripsClassObject() throws Exception", "signatureAfterChange": "  \t@Test \tpublic void usesPassedInClassObject() throws Exception", "diff": ["-    @Test", "-    public void roundTripsClassObject() throws Exception {", "-        class URLClassLoader2 extends URLClassLoader {", "-            URLClassLoader2(URL[] urls) {", "-                super(urls);", "-            }", "-            @Override // just making public", "-            public Class<?> findClass(String name) throws ClassNotFoundException {", "-                return super.findClass(name);", "-            }", "-        }", "-        URLClassLoader2 l = new URLClassLoader2(new URL[] {Sweet.class.getProtectionDomain().getCodeSource().getLocation()});", "-        Class<?> clazz = l.findClass(Sweet.class.getName());", "-        assertEquals(l, clazz.getClassLoader());", "-        Description d = Description.createSuiteDescription(clazz);", "-        assertEquals(clazz, d.getTestClass());", "-        assertNull(d.getMethodName());", "-        assertEquals(1, d.getAnnotations().size());", "-        assertEquals(Ignore.class, d.getAnnotations().iterator().next().annotationType());", "-        d = Description.createTestDescription(clazz, \"tessed\");", "-        assertEquals(clazz, d.getTestClass());", "-        assertEquals(\"tessed\", d.getMethodName());", "-        assertEquals(0, d.getAnnotations().size());", "-        d = Description.createTestDescription(clazz, \"tessed\", clazz.getMethod(\"tessed\").getAnnotations());", "-        assertEquals(clazz, d.getTestClass());", "-        assertEquals(\"tessed\", d.getMethodName());", "-        assertEquals(1, d.getAnnotations().size());", "-        assertEquals(Test.class, d.getAnnotations().iterator().next().annotationType());", "-        d = d.childlessCopy();", "-        assertEquals(clazz, d.getTestClass());", "-        assertEquals(\"tessed\", d.getMethodName());", "-        assertEquals(1, d.getAnnotations().size());", "-        assertEquals(Test.class, d.getAnnotations().iterator().next().annotationType());", "-    }", "+\t@Test", "+\tpublic void usesPassedInClassObject() throws Exception {", "+\t\tclass URLClassLoader2 extends URLClassLoader {", "+\t\t\tURLClassLoader2(URL[] urls) {", "+\t\t\t\tsuper(urls);", "+\t\t\t}", "+\t\t\t@Override // just making public", "+\t\t\tpublic Class<?> findClass(String name) throws ClassNotFoundException {", "+\t\t\t\treturn super.findClass(name);", "+\t\t\t}", "+\t\t}", "+\t\tURL classpath= Sweet.class.getProtectionDomain().getCodeSource().getLocation();", "+\t\tURLClassLoader2 loader= new URLClassLoader2(new URL[] {classpath});", "+\t\tClass<?> clazz= loader.findClass(Sweet.class.getName());", "+\t\tassertEquals(loader, clazz.getClassLoader());", "+", "+\t\tDescription d= Description.createSuiteDescription(clazz);", "+\t\tassertEquals(clazz, d.getTestClass());", "+\t\tassertNull(d.getMethodName());", "+\t\tassertEquals(1, d.getAnnotations().size());", "+\t\tassertEquals(Ignore.class, d.getAnnotations().iterator().next().annotationType());", "+", "+\t\td= Description.createTestDescription(clazz, \"tessed\");", "+\t\tassertEquals(clazz, d.getTestClass());", "+\t\tassertEquals(\"tessed\", d.getMethodName());", "+\t\tassertEquals(0, d.getAnnotations().size());", "+", "+\t\td= Description.createTestDescription(clazz, \"tessed\", clazz.getMethod(\"tessed\").getAnnotations());", "+\t\tassertEquals(clazz, d.getTestClass());", "+\t\tassertEquals(\"tessed\", d.getMethodName());", "+\t\tassertEquals(1, d.getAnnotations().size());", "+\t\tassertEquals(Test.class, d.getAnnotations().iterator().next().annotationType());", "+", "+\t\td= d.childlessCopy();", "+\t\tassertEquals(clazz, d.getTestClass());", "+\t\tassertEquals(\"tessed\", d.getMethodName());", "+\t\tassertEquals(1, d.getAnnotations().size());", "+\t\tassertEquals(Test.class, d.getAnnotations().iterator().next().annotationType());", "+\t}"]}]}
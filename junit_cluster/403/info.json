{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52e86b5b4718be6fab23038c407db976", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "076769cc301ebf576e708858745fd122", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "412519b20d4cb96466c03466fa003068e9fb5eca", "commitAfterChange": "8e3f361443ddf8bca21c3db661c75d374fe78dba", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": " \t \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "diff": ["-\t\tDescription description= describeChild(method);", "-\t\tEachTestNotifier eachNotifier= new EachTestNotifier(notifier,", "-\t\t\t\tdescription);", "-\t\tnotifying(method, childBlock(method)).run(eachNotifier);", "+\t\tEachTestNotifier eachNotifier= makeNotifier(method, notifier);", "+\t\tif (method.isIgnored()) {", "+\t\t\teachNotifier.fireTestIgnored();", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\teachNotifier.fireTestStarted();", "+\t\ttry {", "+\t\t\tchildBlock(method).evaluate();", "+\t\t} catch (AssumptionViolatedException e) {", "+\t\t\teachNotifier.fireTestIgnored();", "+\t\t} catch (Throwable e) {", "+\t\t\teachNotifier.addFailure(e);", "+\t\t} finally {", "+\t\t\teachNotifier.fireTestFinished();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cdead10b961924eb6110fc4205a551c", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestRunner.java", "commitBeforeChange": "f268f458843fc84e83c244a5c271cc71386eb1cf", "commitAfterChange": "4b1869ebb8002e5d0b82ab55460f6126043c9ec4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 50, "signatureBeforeChange": " \t \tprotected JTextArea createTraceArea()", "signatureAfterChange": "  \tTestCollector createTestCollector()", "diff": ["-\t", "-\tprotected JTextArea createTraceArea() {", "-\t\tJTextArea area= new JTextArea();", "-\t\tarea.setRows(5);", "-\t\tarea.setTabSize(0);", "-\t\tarea.setEditable(false);", "-\t\treturn area;", "+", "+\tTestCollector createTestCollector() {", "+\t\tString className= BaseTestRunner.getPreference(TESTCOLLECTOR_KEY);", "+\t\tif (className != null) {\t\t\t", "+\t\t\tClass collectorClass= null;", "+\t\t\ttry {", "+\t\t\t\tcollectorClass= Class.forName(className);", "+\t\t\t\treturn (TestCollector)collectorClass.newInstance();", "+\t\t\t} catch(Exception e) {", "+\t\t\t\tJOptionPane.showMessageDialog(fFrame, \"Could not create TestCollector - using default collector\");", "+\t\t\t}", "+\t\t}", "+\t\treturn new LoadingClassPathTestCollector();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40c3c87df8092e763067e2d5093128a2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethod.java", "commitBeforeChange": "85c570ea92f0ee7d17573966dd7f94f4c3b0b61a", "commitAfterChange": "79d696c81cb996e6a199b062c0ae1f53408d5ebd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tint runWithDiscoveredParameterValues(Object target, \t\t\tPotentialMethodValues valueSources, List<ParameterSignature> sigs) \t\t\tthrows Throwable", "signatureAfterChange": "  \tvoid runWithDiscoveredParameterValues(final Roadie context, \t\t\tPotentialMethodValues valueSources, List<ParameterSignature> sigs) throws Throwable", "diff": ["-\tint runWithDiscoveredParameterValues(Object target,", "-\t\t\tPotentialMethodValues valueSources, List<ParameterSignature> sigs)", "-\t\t\tthrows Throwable {", "+\tvoid runWithDiscoveredParameterValues(final Roadie context,", "+\t\t\tPotentialMethodValues valueSources, List<ParameterSignature> sigs) throws Throwable {", "-\t\t\t\treturn invokeWithActualParameters(target, valueSources", "-\t\t\t\t\t\t.getValues(nullsOk()));", "+\t\t\t\tfinal Object[] values= valueSources.getValues(nullsOk());", "+\t\t\t\tcontext.runProtected(this, new Runnable() {", "+\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tinvokeWithActualParameters(context.getTarget(), values);", "+\t\t\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\t\t\tthrown = e;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\tif (thrown != null)", "+\t\t\t\t\tthrow thrown;", "-\t\t\t\treturn 0;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfor (PotentialParameterValue source : sigs.get(0)", "+\t\t\t\t\t.getPotentialValues(context.getTarget())) {", "+\t\t\t\trunWithDiscoveredParameterValues(context, valueSources", "+\t\t\t\t\t\t.concat(source), sigs.subList(1, sigs.size()));", "-", "-\t\tint count= 0;", "-", "-\t\tfor (PotentialParameterValue source : sigs.get(0).getPotentialValues(", "-\t\t\t\ttarget)) {", "-\t\t\tcount+= runWithDiscoveredParameterValues(target, valueSources", "-\t\t\t\t\t.concat(source), sigs.subList(1, sigs.size()));", "-\t\t}", "-", "-\t\treturn count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47674dda3d60d81769262b8f8d33d56f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/ParameterSignature.java", "commitBeforeChange": "2ade5fd3aad123d6507b59ed5d48c8f030314f00", "commitAfterChange": "cc8497f28e1d5a46d7940a0b36556154c83d6f7a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": "      public boolean canAcceptArrayType(Class<?> type)", "signatureAfterChange": "      private boolean canAcceptUnboxed(Class<?> candidate)", "diff": ["+", "+    private boolean canAcceptUnboxed(Class<?> candidate) {", "+        Field primitiveClassField = null;", "+        try {", "+            primitiveClassField = candidate.getDeclaredField(\"TYPE\");", "+        } catch (NoSuchFieldException e) {", "+            return false;", "+        }", "+        ", "+        try {", "+            if (Modifier.isStatic(primitiveClassField.getModifiers())) {", "+                Class<?> primitiveClass = (Class<?>) primitiveClassField.get(null);", "+                return type.isAssignableFrom(primitiveClass);", "+            } else {", "+                return false;", "+            }", "+        } catch (Exception e) {", "+            throw new RuntimeException(e);", "+        }", "+    }", "-", "-    public boolean canAcceptArrayType(Class<?> type) {", "-        return type.isArray() && canAcceptType(type.getComponentType());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52c5c5e129ee2c8a66523ac49ff9614e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Suite.java", "commitBeforeChange": "7e74bfd60ca879d78db96915ce1d8db341db2279", "commitAfterChange": "a268686d96bfbb328e02b363c3f0f72da54f9fc6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected Suite(Class<?> klass, List<Runner> runners) throws InitializationError", "signatureAfterChange": " \tprotected Suite(Class<?> klass, List<Runner> runners) throws InitializationError", "diff": ["+\t\ttry {", "+\t\t\trules(getTestClass().getOnlyConstructor().newInstance());", "+\t\t\t", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\t// TODO Auto-generated catch block", "+\t\t\te.printStackTrace();", "+\t\t} catch (InstantiationException e) {", "+\t\t\t// TODO Auto-generated catch block", "+\t\t\te.printStackTrace();", "+\t\t} catch (IllegalAccessException e) {", "+\t\t\t// TODO Auto-generated catch block", "+\t\t\te.printStackTrace();", "+\t\t} catch (InvocationTargetException e) {", "+\t\t\t// TODO Auto-generated catch block", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "557f1665d3f4ee86efc8aa3f195344e4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/links/WithTimeout.java", "commitBeforeChange": "a4c68872a91681139d404825c2bb04bd5ba804dd", "commitAfterChange": "f0ef837a40922ac08c608661385abf71732975d3", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tpublic void run(final EachTestNotifier context) throws Throwable", "signatureAfterChange": "  \t@Override \tpublic void run(final FailureListener listener)", "diff": ["-\tpublic void run(final EachTestNotifier context) throws Throwable {", "+\tpublic void run(final FailureListener listener) {", "-\t\t\t\ttry {", "-\t\t\t\t\tfNext.run(context);", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\tthrow e;", "-\t\t\t\t} catch (Error e) {", "-\t\t\t\t\tthrow e;", "-\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\t// TODO: (Oct 5, 2007 11:27:11 AM) Now what?  Is there a useful thing to do with this?", "-\t\t\t\t}", "+\t\t\t\tfNext.run(listener);", "-\t\t\tthrow new Exception(String.format(", "-\t\t\t\t\t\"test timed out after %d milliseconds\", fTimeout));", "+\t\t\tlistener.addFailure(new Exception(String.format(", "+\t\t\t\t\t\"test timed out after %d milliseconds\", fTimeout)));", "-\t\t\tthrow e.getCause();", "+\t\t\tlistener.addFailure(e.getCause());", "+\t\t} catch (InterruptedException e) {", "+\t\t\tlistener.addFailure(e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "585265317ca80c668e780f000eb24637", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": " \t@Override \tpublic void runChild(FrameworkMethod method, RunNotifier notifier)", "diff": ["+\t// TODO: public?", "-\tprotected void runChild(FrameworkMethod method, RunNotifier notifier) {", "+\tpublic void runChild(FrameworkMethod method, RunNotifier notifier) {", "-\t\t\teachNotifier.fireTestIgnored();", "-\t\t\treturn;", "+\t\t\trunIgnored(eachNotifier);", "+\t\t} else {", "+\t\t\trunNotIgnored(method, eachNotifier);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a51945fa39b0e8699f4647b9162bc28", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "1768d08d029dc3bf1ab88e26df0a9b40ae61227f", "commitAfterChange": "5ca9da987a7d4dc00e082aaf552cbd8ee8c7bd33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private Exception createTimeoutException(Thread thread)", "signatureAfterChange": "      private Exception createTimeoutException(Thread thread)", "diff": ["-        String message = String.format(", "-                \"test timed out after %d %s\", fTimeout, fTimeUnit.name().toLowerCase());", "-        Exception exception = (stuckThread == null) ", "-        \t? new Exception(message) ", "-            : new ExceptionWithThread (message, stuckThread,", "-            \t\t\"Appears to be stuck in thread {0}\");", "+        Exception exception = new Exception(String.format(", "+                \"test timed out after %d %s\", fTimeout, fTimeUnit.name().toLowerCase()));", "+        if (stuckThread != null) {", "+            Exception stuckThreadException = ", "+                new Exception (\"Appears to be stuck in thread \" +", "+                               stuckThread.getName());", "+            StackTraceElement[] threadStack;", "+            try {", "+                threadStack = stuckThread.getStackTrace();", "+            } catch (SecurityException e) {", "+                threadStack = new StackTraceElement[0];", "+            }", "+            stuckThreadException.setStackTrace (threadStack);", "+            exception = new MultipleFailureException    ", "+                (Arrays.<Throwable>asList (exception, stuckThreadException));", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5efa57e09804b35177b39e8af7507a62", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Suite.java", "commitBeforeChange": "e5782ce23b9aa60665cc6f6fc721cd9641bcc346", "commitAfterChange": "334bf585b5de1534d7c0ec519fa0df250d00f022", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tprotected Suite(Class<?> klass, List<Runner> runners) throws InitializationError", "signatureAfterChange": " \tprotected Suite(Class<?> klass, List<Runner> runners) throws InitializationError", "diff": ["-\t\ttry {", "-\t\t\trules(getTestClass().getOnlyConstructor().newInstance());", "-\t\t\t", "-\t\t} catch (IllegalArgumentException e) {", "-\t\t\t// TODO Auto-generated catch block", "-\t\t\te.printStackTrace();", "-\t\t} catch (InstantiationException e) {", "-\t\t\t// TODO Auto-generated catch block", "-\t\t\te.printStackTrace();", "-\t\t} catch (IllegalAccessException e) {", "-\t\t\t// TODO Auto-generated catch block", "-\t\t\te.printStackTrace();", "-\t\t} catch (InvocationTargetException e) {", "-\t\t\t// TODO Auto-generated catch block", "-\t\t\te.printStackTrace();", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f504c4c4a8b380a5ca037fe517249ce", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/TheoryMethod.java", "commitBeforeChange": "149ecd4dcd99697710aa350e9cd3b3bcac877125", "commitAfterChange": "787ed4e5bc2b68e8b5cdb6190ff1fc053f1a5b13", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tvoid invokeWithActualParameters(Object target, Object[] params) \t\t\tthrows Throwable", "signatureAfterChange": "  \tprivate void invokeWithActualParameters(Object target, Object... params) \t\t\tthrows Throwable", "diff": ["-\tvoid invokeWithActualParameters(Object target, Object[] params)", "+\tprivate void invokeWithActualParameters(Object target, Object... params)", "-\t\t\ttry {", "-\t\t\t\tfMethod.invoke(target, params);", "-\t\t\t\tsuccesses++;", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\tthrow e.getTargetException();", "-\t\t\t}", "+\t\t\tinvokeAndThrow(target, params);", "-\t\t\tfInvalidParameters.add(e);", "+\t\t\thandleAssumptionViolation(e);", "-\t\t\tif (params.length == 0)", "-\t\t\t\tthrow e;", "-\t\t\tthrow new ParameterizedAssertionError(e, fMethod.getName(), params);", "+\t\t\treportParameterizedError(e, params);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84a9cab6039caeee2b64001cb395981f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "af5722e040626f7c3aa14ccbfb4cb2375f43a561", "commitAfterChange": "568e29c871ea144e12f273dc7e12c949a5a507da", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tprivate void validateRuleField(Field field, List<Throwable> errors)", "signatureAfterChange": "  \tprivate void validateRuleField(Field field, List<Throwable> errors)", "diff": ["+\t\tif (!MethodRule.class.isAssignableFrom(field.getType()))", "+\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "+\t\t\t\t\t+ \" must implement MethodRule\"));", "-\t\tif (!MethodRule.class.isAssignableFrom(field.getType())) {", "-\t\t\tif (ClassRule.class.isAssignableFrom(field.getType())) {", "-\t\t\t\tif (!Modifier.isStatic(field.getModifiers())) {", "-\t\t\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "-\t\t\t\t\t\t\t+ \" must be static\"));", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\terrors.add(new Exception(\"Field \" + field.getName()", "-\t\t\t\t\t\t+ \" must implement MethodRule or ClassRule\"));", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86544a2936590ea0de08ec622cf5b544", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/parallel/ParallelClassTest.java", "commitBeforeChange": "b9e14f64327e052e161c451bc2eaa854c9adcea4", "commitAfterChange": "865e00b45a166466b614a1dbcb8440e19453c58e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t@Test(timeout=1500) public void testsRunInParallel()", "signatureAfterChange": " \t \t@Test public void testsRunInParallel()", "diff": ["-\t", "-\t@Test(timeout=1500) public void testsRunInParallel() {", "-\t\tlong start= System.currentTimeMillis();", "+\t@Test public void testsRunInParallel() {", "-\t\tlong end= System.currentTimeMillis();", "-\t\tassertThat(end - start, greaterThan(999)); // Overhead could be less than half a millisecond", "-\t}", "+\t\tassertNotNull(fExample1One);", "+\t\tassertNotNull(fExample1Two);", "+\t\tassertNotNull(fExample2One);", "+\t\tassertNotNull(fExample2Two);", "+\t\tassertThat(fExample1One, is(fExample1Two));", "+\t\tassertThat(fExample2One, is(fExample2Two));", "+\t\tassertThat(fExample1One, is(not(fExample2One)));", "+\t\tfExample1One= null;", "+\t\tfExample1Two= null;", "+\t\tfExample2One= null;", "+\t\tfExample2Two= null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a09b3ed382c7bb941819dae4f9f82cd", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": " \t \t@Override \tprotected void runChild(FrameworkMethod method, RunNotifier notifier)", "signatureAfterChange": "  \tprotected void invokeTestMethod(Method method, RunNotifier notifier)", "diff": ["+\tprotected void invokeTestMethod(Method method, RunNotifier notifier) {", "+\t\tDescription description= methodDescription(method);", "+\t\t\ttest= createTest();", "+\t\t} catch (InvocationTargetException e) {", "+\t\t\ttestAborted(notifier, description, e.getCause());", "+\t\t\treturn;\t\t\t", "+\t\t} catch (Exception e) {", "+\t\t\ttestAborted(notifier, description, e);", "+\t\t\treturn;", "-\t", "-\t@Override", "-\tprotected void runChild(FrameworkMethod method, RunNotifier notifier) {", "-\t\tDescription description= describeChild(method);", "-\t\tEachTestNotifier eachNotifier= new EachTestNotifier(notifier,", "-\t\t\t\tdescription);", "-\t\tnotifying(method, childBlock(method)).run(eachNotifier);", "+\t\tTestMethod testMethod= wrapMethod(method);", "+\t\tnew MethodRoadie(test, testMethod, notifier, description).run();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7905ef53b35436bc7f960a8ffaccf8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "34e66740b9117ce85cfd416f9e931b2e533ab16e", "commitAfterChange": "85b7c26e63f851004ce20d4a00fbf1b46607ab0c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void throwExceptionForUnfinishedThread(StatementThread thread)             throws Throwable", "signatureAfterChange": "     private Throwable getResult(FutureTask<Throwable> task, Thread thread)", "diff": ["-", "-    private void throwExceptionForUnfinishedThread(StatementThread thread)", "-            throws Throwable {", "-        if (thread.fExceptionThrownByOriginalStatement != null) {", "-            throw thread.fExceptionThrownByOriginalStatement;", "-        } else {", "-            throwTimeoutException(thread);", "+     */", "+    private Throwable getResult(FutureTask<Throwable> task, Thread thread) {", "+        try {", "+            return task.get(fTimeout, fTimeUnit);", "+        } catch (InterruptedException e) {", "+            return e; // caller will re-throw; no need to call Thread.interrupt()", "+        } catch (ExecutionException e) {", "+            // test failed; have caller re-throw the exception thrown by the test", "+            return e.getCause();", "+        } catch (TimeoutException e) {", "+            return createTimeoutException(thread);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e81d212402e7ffaeafb9eeab5a8e227d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "3209ce6e2d1b84ae2493a7906eecd76dfff1a8af", "commitAfterChange": "ccf0c0af551df541e40edb07d19a57072a8b14b1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig, List<PotentialAssignment> list)", "diff": ["-            if (sig.canPotentiallyAcceptType(dataPointMethod.getReturnType())) {", "-                Object value;", "-                ", "-                try {", "-                    value = dataPointMethod.invokeExplosively(null);", "-                } catch (Throwable e) {", "-                    // ignore and move on", "-                    continue;", "-                }", "-                    ", "-                if (sig.canAcceptValue(value)) {", "-                    list.add(PotentialAssignment.forValue(dataPointMethod.getName(), value));", "-                }", "+            if (sig.canAcceptType(dataPointMethod.getType())) {", "+                list.add(new MethodParameterValue(dataPointMethod));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f341f3cf3c46570db27bdf51d0b26085", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca8e74c2cb9910ed6e48c86f481aa7ef", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "496ee866a46f783d145b649a688df57cbf79490e", "commitAfterChange": "5f7fddf537e551109ffd6241a00c87a2b3521523", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate void findLeaves(Plan parent, Plan plan, List<Description> results)", "signatureAfterChange": " \t \tprivate void findLeaves(Description parent, Description description, List<Description> results)", "diff": ["-\tprivate void findLeaves(Plan parent, Plan plan, List<Description> results) {", "-\t\tif (plan.getChildren().isEmpty())", "-\t\t\tif (plan.getDescription().toString().equals(\"warning(junit.framework.TestSuite$1)\"))", "-\t\t\t\tresults.add(Description.createSuiteDescription(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX + parent.getDescription()));", "+\tprivate void findLeaves(Description parent, Description description, List<Description> results) {", "+\t\tif (description.getChildren().isEmpty())", "+\t\t\tif (description.toString().equals(\"warning(junit.framework.TestSuite$1)\"))", "+\t\t\t\tresults.add(Description.createSuiteDescription(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX + parent));", "-\t\t\t\tresults.add(plan.getDescription());", "+\t\t\t\tresults.add(description);", "-\t\t\tfor (Plan each : plan.getChildren())", "-\t\t\t\tfindLeaves(plan, each, results);", "+\t\t\tfor (Description each : description.getChildren())", "+\t\t\t\tfindLeaves(description, each, results);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d22857fd50da01b125702547450e5195", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/max/MaxCore.java", "commitBeforeChange": "971c9a52281458375af79e303449fe22bf91feab", "commitAfterChange": "97402a3401c6cc2d45d395c0d9d636f483b5571c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tprivate void findLeaves(Plan parent, Plan plan, List<Description> results)", "signatureAfterChange": " \t \tprivate void findLeaves(Description parent, Description description, List<Description> results)", "diff": ["-\tprivate void findLeaves(Plan parent, Plan plan, List<Description> results) {", "-\t\tif (plan.getChildren().isEmpty())", "-\t\t\tif (plan.getDescription().toString().equals(\"warning(junit.framework.TestSuite$1)\"))", "-\t\t\t\tresults.add(Description.createSuiteDescription(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX + parent.getDescription()));", "+\tprivate void findLeaves(Description parent, Description description, List<Description> results) {", "+\t\tif (description.getChildren().isEmpty())", "+\t\t\tif (description.toString().equals(\"warning(junit.framework.TestSuite$1)\"))", "+\t\t\t\tresults.add(Description.createSuiteDescription(MALFORMED_JUNIT_3_TEST_CLASS_PREFIX + parent));", "-\t\t\t\tresults.add(plan.getDescription());", "+\t\t\t\tresults.add(description);", "-\t\t\tfor (Plan each : plan.getChildren())", "-\t\t\t\tfindLeaves(plan, each, results);", "+\t\t\tfor (Description each : description.getChildren())", "+\t\t\t\tfindLeaves(description, each, results);"]}]}
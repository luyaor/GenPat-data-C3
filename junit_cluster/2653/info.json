{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "87189203354044b23e4b9b6cd873d90a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "577569071ec12e20a727be82a5db2e95", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit38ClassRunner.java", "commitBeforeChange": "41cbbf7e228b8f7908e672a79863ff970316b120", "commitAfterChange": "421ab330509a53302f56b209595f55b23bfdfc0e", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 14, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "diff": ["+", "-\t\tif (fTest instanceof Filterable) {", "-\t\t\tFilterable adapter= (Filterable) fTest;", "+\t\tif (getTest() instanceof Filterable) {", "+\t\t\tFilterable adapter= (Filterable) getTest();", "-\t\t} else if (fTest instanceof TestSuite) {", "-\t\t\tTestSuite suite= (TestSuite) fTest;", "-\t\t\tTestSuite filtered= new FilteredTestSuite(suite, filter);", "-\t\t\tfTest= filtered;", "+\t\t} else if (getTest() instanceof TestSuite) {", "+\t\t\tTestSuite suite= (TestSuite) getTest();", "+\t\t\tTestSuite filtered= new TestSuite(suite.getName());", "+\t\t\tint n= suite.testCount();", "+\t\t\tfor (int i= 0; i < n; i++) {", "+\t\t\t\tTest test= suite.testAt(i);", "+\t\t\t\tif (filter.shouldRun(makeDescription(test)))", "+\t\t\t\t\tfiltered.addTest(test);", "+\t\t\t}", "+\t\t\tsetTest(filtered);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c18c32adddc662ad069305af1a2d20b5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "a72b0dbef4b01e8ad0b832d9a579dd7fabd5a071", "commitAfterChange": "378e17964a4188bad9b3d966207a2f682072148e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t@Test public void itsMe()", "signatureAfterChange": " \t \t@Test public void twoTestsNotRun()", "diff": ["-\tpublic static class OneTest {", "-\t\t@Test public void itsMe() {}", "+\t", "+\t@Test public void twoTestsNotRun() {", "+\t\tRequest request= Request.aClass(TwoTests.class);", "+\t\tMaxCore max= new MaxCore();", "+\t\tList<Description> things= max.sort(request);", "+\t\tDescription succeed= Description.createTestDescription(TwoTests.class, \"succeed\");", "+\t\tDescription dontSucceed= Description.createTestDescription(TwoTests.class, \"dontSucceed\");", "+\t\tassertTrue(things.contains(succeed));", "+\t\tassertTrue(things.contains(dontSucceed));", "+\t\tassertEquals(2, things.size());", "+\t}"]}]}
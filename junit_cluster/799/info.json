{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc621237157c400f64a271827acbc057", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ada379390a5eaacb1ff0db7dfc3ae86", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/SuiteMethodTest.java", "commitBeforeChange": "2f9b53dbecad010dbb7e7cfff3a11476b7d2208a", "commitAfterChange": "870289f3272917f312de6902b8b6bdc43552d4b7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \t@Test public void descriptionAndRunNotificationsAreConsistent()", "signatureAfterChange": " \t@Test \tpublic void descriptionAndRunNotificationsAreConsistent()", "diff": ["-\t", "-\t@Test public void descriptionAndRunNotificationsAreConsistent() {", "+\t// when executing as JUnit 3, ignored tests are stripped out before execution", "+\t@Test", "+\tpublic void descriptionAndRunNotificationsAreConsistent() {", "-\t\t", "-\t\tDescription description= Request.aClass(CompatibilityTest.class).getRunner().getDescription();", "-\t\tassertEquals(0, description.getChildren().size());", "+", "+\t\tRunner runner= Request.aClass(CompatibilityTest.class).getRunner();", "+\t\tDescription description= runner.getDescription();", "+\t\tassertEquals(1, description.getChildren().size());", "+\t\tassertEquals(\"initializationError\", description.getChildren().get(0)", "+\t\t\t\t.getMethodName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e8266e5322cf436c4b1f31ea8d9b6be", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/tests/SuiteMethodTest.java", "commitBeforeChange": "7a2a3811a762d7988dc153d59c4222a6ab96bf82", "commitAfterChange": "1299fcddc57ce7956d87022c3e32c09b447690a3", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \t \t@Test public void makeSureSuiteNotUsedWithJUnit4Classes()", "signatureAfterChange": " \t \t@Test public void suiteIsUsedWithJUnit4Classes()", "diff": ["-\t@Test public void makeSureSuiteNotUsedWithJUnit4Classes() {", "+\t@Test public void suiteIsUsedWithJUnit4Classes() {", "-\t\tResult res= JUnitCore.runClasses(NewTestSuiteFails.class);", "-\t\tassertEquals(1, res.getFailureCount());", "+\t\tResult result= JUnitCore.runClasses(NewTestSuiteFails.class);", "+\t\tassertEquals(1, result.getFailureCount());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3ff684fa3e701b66fcbd783f82f1946", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest.java", "commitBeforeChange": "fbcebcae05bc4aee3f8dcf24ebfcf69e6b245a0f", "commitAfterChange": "178f854e4c7e31ece6d71f5aa4433f0432349f4f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t@Test \tpublic void theoryMeansOnlyAssumeShouldFail() throws InitializationError", "signatureAfterChange": "  \t@Test \tpublic void theoryMeansOnlyAssumeShouldFail() throws InitializationError", "diff": ["-\tpublic void theoryMeansOnlyAssumeShouldFail() throws InitializationError{", "-\t\t", "+\tpublic void theoryMeansOnlyAssumeShouldFail() throws InitializationError {", "-\t\tAssert.assertEquals(\"A theory with no valid parameters did not fail.\", 1, result.getFailureCount());", "-\t\t", "+\t\tAssert.assertEquals(1, result.getFailureCount());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7de1a636d3dcf8981e541fbfbaaca82", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/junit3compatibility/SuiteMethodTest.java", "commitBeforeChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "commitAfterChange": "7a2b0460c7abd7573faa9d7845a5b1169dcdcb7f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \t@Test public void descriptionAndRunNotificationsAreConsistent()", "signatureAfterChange": " \t \t@Test public void failIfEverythingIsIgnoredOut()", "diff": ["-\t@Test public void descriptionAndRunNotificationsAreConsistent() {", "+\t@Test public void failIfEverythingIsIgnoredOut() {", "-\t\t", "-\t\tDescription description= Request.aClass(CompatibilityTest.class).getRunner().getDescription();", "-\t\tassertEquals(0, description.getChildren().size());", "+\t\tassertEquals(1, result.getFailureCount());"]}]}
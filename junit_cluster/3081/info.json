{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e737b9b362d32873b4e068fc3d70aed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a804c5cb125843ea85b6a429b41261f7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/categories/CategoryValidatorTest.java", "commitBeforeChange": "fe5d86eba71a1f59dbbed09de4add01cc20420c0", "commitAfterChange": "d9054149988487750679e35a349df7e0e2df5870", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "      @Test     public void errorIsNotAddedWhenCategoryIsNotCombinedWithIllegalCombination() throws NoSuchMethodException", "signatureAfterChange": "      @Test     public void errorIsNotAddedWhenCategoryIsNotCombinedWithIllegalCombination() throws NoSuchMethodException", "diff": ["-        Method beforeClass = CategoryTest.class.getMethod(\"methodWithCategory\");", "-        List<Exception> errors = new CategoryValidator().validateAnnotatedMethod(beforeClass);", "+        FrameworkMethod method = new FrameworkMethod(CategoryTest.class.getMethod(\"methodWithCategory\"));", "+        List<Exception> errors = new CategoryValidator().validateAnnotatedMethod(method);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7fd124f1b2dd8127f0569ecf019d32d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/categories/CategoryValidatorTest.java", "commitBeforeChange": "f5e7e1ff180bb17e4f9df702a038e06a974f78f6", "commitAfterChange": "fe5d86eba71a1f59dbbed09de4add01cc20420c0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "      private void testAndAssertErrrorMessage(Method method, String expectedErrorMessage) throws NoSuchMethodException", "signatureAfterChange": "      private void testAndAssertErrrorMessage(Method method, String expectedErrorMessage) throws NoSuchMethodException", "diff": ["-        List<Throwable> errors = new CategoryValidator().validateAnnotatedMethod(method);", "+        List<Exception> errors = new CategoryValidator().validateAnnotatedMethod(method);", "-        Throwable throwable = errors.get(0);", "-        assertThat(throwable.getMessage(), is(expectedErrorMessage));", "+        Exception exception = errors.get(0);", "+        assertThat(exception.getMessage(), is(expectedErrorMessage));"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7122dcda9ecad8566d6671eb33be1ad0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d7e27888b8f9801aa697729cedf76be", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParseResult.java", "commitBeforeChange": "4eecfb1eff9aa5304f6b30874a26734124ac902d", "commitAfterChange": "a75370887a71a09b3e5a12dec252513e80228e6b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r     String[] parseOptions(String[] args)", "signatureAfterChange": "\r \r     String[] parseOptions(String... args)", "diff": ["-    String[] parseOptions(String[] args) {\r", "+    String[] parseOptions(String... args) {\r", "-            try {\r", "-                if (arg.equals(\"--\")) {\r", "-                    return copyArray(args, i + 1, args.length);\r", "-                } else if (arg.startsWith(\"--\")) {\r", "-                    if (arg.startsWith(\"--filter=\") || arg.equals(\"--filter\")) {\r", "-                        String filterSpec;\r", "-                        if (arg.equals(\"--filter\")) {\r", "-                            ++i;\r", "+            if (arg.equals(\"--\")) {\r", "+                return copyArray(args, i + 1, args.length);\r", "+            } else if (arg.startsWith(\"--\")) {\r", "+                if (arg.startsWith(\"--filter=\") || arg.equals(\"--filter\")) {\r", "+                    String filterSpec;\r", "+                    if (arg.equals(\"--filter\")) {\r", "+                        ++i;\r", "-                            if (i < args.length) {\r", "-                                filterSpec = args[i];\r", "-                            } else {\r", "-                                parserErrors.add(new CommandLineParserError(arg + \" value not specified\"));\r", "-\r", "-                                break;\r", "-                            }\r", "+                        if (i < args.length) {\r", "+                            filterSpec = args[i];\r", "-                            filterSpec = arg.substring(arg.indexOf('=') + 1);\r", "+                            parserErrors.add(new CommandLineParserError(arg + \" value not specified\"));\r", "+                            break;\r", "-\r", "-                        filter = filter.intersect(FilterFactories.createFilterFromFilterSpec(\r", "-                                createSuiteDescription(arg), filterSpec));\r", "-                        parserErrors.add(new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));\r", "+                        filterSpec = arg.substring(arg.indexOf('=') + 1);\r", "+\r", "+                    filterSpecs.add(filterSpec);\r", "-                    return copyArray(args, i, args.length);\r", "+                    parserErrors.add(new CommandLineParserError(\"JUnit knows nothing about the \" + arg + \" option\"));\r", "-            } catch (FilterFactory.FilterNotCreatedException e) {\r", "-                parserErrors.add(e);\r", "+            } else {\r", "+                return copyArray(args, i, args.length);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c19b11cc7003d7e271f3f5777f4fdb0e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCore.java", "commitBeforeChange": "5edfb4447b609c178d63a3d991172861076d143b", "commitAfterChange": "34336085d5aba69c997f8e6b244531561afebcd4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "     Result runMain(JUnitSystem system, String... args)", "signatureAfterChange": "     Result runMain(JUnitSystem system, String... args)", "diff": ["-        filter = filter.intersect(jUnitCommandLineParser.getFilter());", "-        List<Class<?>> classes = jUnitCommandLineParser.getClasses();", "-        List<Failure> failures = jUnitCommandLineParser.getFailures();", "-", "-        Result result = run(classes.toArray(new Class<?>[0]));", "-        for (Failure each : failures) {", "+        Result result = run(jUnitCommandLineParser.createRequest(defaultComputer()));", "+        for (Failure each : jUnitCommandLineParser.getFailures()) {"]}]}
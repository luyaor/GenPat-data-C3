{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2252836ea9cf6e0b8342a61ace398a26", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bf332ccccd91b0ff122c690b7069a62", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/FrameworkMethod.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "signatureAfterChange": "     public void validatePublicVoid(boolean isStatic, List<Throwable> errors)", "diff": ["-\t */", "-\tpublic void validatePublicVoid(boolean isStatic, List<Throwable> errors) {", "-\t\tif (Modifier.isStatic(fMethod.getModifiers()) != isStatic) {", "-\t\t\tString state= isStatic ? \"should\" : \"should not\";", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() \" + state + \" be static\"));", "-\t\t}", "-\t\tif (!Modifier.isPublic(fMethod.getDeclaringClass().getModifiers()))", "-\t\t\terrors.add(new Exception(\"Class \" + fMethod.getDeclaringClass().getName() + \" should be public\"));", "-\t\tif (!Modifier.isPublic(fMethod.getModifiers()))", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be public\"));", "-\t\tif (fMethod.getReturnType() != Void.TYPE)", "-\t\t\terrors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be void\"));", "-\t}", "+     */", "+    public void validatePublicVoid(boolean isStatic, List<Throwable> errors) {", "+        if (Modifier.isStatic(fMethod.getModifiers()) != isStatic) {", "+            String state = isStatic ? \"should\" : \"should not\";", "+            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() \" + state + \" be static\"));", "+        }", "+        if (!Modifier.isPublic(fMethod.getDeclaringClass().getModifiers())) {", "+            errors.add(new Exception(\"Class \" + fMethod.getDeclaringClass().getName() + \" should be public\"));", "+        }", "+        if (!Modifier.isPublic(fMethod.getModifiers())) {", "+            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be public\"));", "+        }", "+        if (fMethod.getReturnType() != Void.TYPE) {", "+            errors.add(new Exception(\"Method \" + fMethod.getName() + \"() should be void\"));", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4eb3ee40d7d5e78ac33a8402e70cb58", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tprivate void validateDataPointFields(List<Throwable> errors)", "signatureAfterChange": "      private void validateDataPointFields(List<Throwable> errors)", "diff": ["-\t", "-\tprivate void validateDataPointFields(List<Throwable> errors) {", "-\t\tField[] fields= getTestClass().getJavaClass().getDeclaredFields();", "-\t\t", "-\t\tfor (Field field : fields) {", "-\t\t\tif (field.getAnnotation(DataPoint.class) == null)", "-\t\t\t\tcontinue;", "-\t\t\tif (!Modifier.isStatic(field.getModifiers()))", "-\t\t\t\terrors.add(new Error(\"DataPoint field \" + field.getName() + \" must be static\"));", "-\t\t\tif (!Modifier.isPublic(field.getModifiers()))", "-\t\t\t\terrors.add(new Error(\"DataPoint field \" + field.getName() + \" must be public\"));", "-\t\t}", "-\t}", "+    private void validateDataPointFields(List<Throwable> errors) {", "+        Field[] fields = getTestClass().getJavaClass().getDeclaredFields();", "+        for (Field field : fields) {", "+            if (field.getAnnotation(DataPoint.class) == null) {", "+                continue;", "+            }", "+            if (!Modifier.isStatic(field.getModifiers())) {", "+                errors.add(new Error(\"DataPoint field \" + field.getName() + \" must be static\"));", "+            }", "+            if (!Modifier.isPublic(field.getModifiers())) {", "+                errors.add(new Error(\"DataPoint field \" + field.getName() + \" must be public\"));", "+            }", "+        }", "+    }"]}]}
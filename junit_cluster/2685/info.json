{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fb0d0fc4b10e4a0f246cdc2b32c9b18", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5239f8bbd837d817a6e7f36c8217ad46", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "971c9a52281458375af79e303449fe22bf91feab", "commitAfterChange": "97402a3401c6cc2d45d395c0d9d636f483b5571c", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate List<T> getCachedChildren()", "signatureAfterChange": "  \tprivate List<T> getFilteredChildren()", "diff": ["-\tprivate List<T> getCachedChildren() {", "-\t\tif (fCachedChildren == null)", "-\t\t\tfCachedChildren= getChildren();", "-\t\treturn fCachedChildren;", "+\tprivate List<T> getFilteredChildren() {", "+\t\tArrayList<T> filtered= new ArrayList<T>();", "+\t\tfor (T each : getChildren())", "+\t\t\tif (shouldRun(each))", "+\t\t\t\ttry {", "+\t\t\t\t\tfilterChild(each);", "+\t\t\t\t\tsortChild(each);", "+\t\t\t\t\tfiltered.add(each);", "+\t\t\t\t} catch (NoTestsRemainException e) {", "+\t\t\t\t\t// don't add it", "+\t\t\t\t}", "+\t\tCollections.sort(filtered, comparator());", "+\t\treturn filtered;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "964bb229e8f39ef3823588b69dedbd9d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "496ee866a46f783d145b649a688df57cbf79490e", "commitAfterChange": "5f7fddf537e551109ffd6241a00c87a2b3521523", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tprivate List<T> getCachedChildren()", "signatureAfterChange": "  \tprivate List<T> getFilteredChildren()", "diff": ["-\tprivate List<T> getCachedChildren() {", "-\t\tif (fCachedChildren == null)", "-\t\t\tfCachedChildren= getChildren();", "-\t\treturn fCachedChildren;", "+\tprivate List<T> getFilteredChildren() {", "+\t\tArrayList<T> filtered= new ArrayList<T>();", "+\t\tfor (T each : getChildren())", "+\t\t\tif (shouldRun(each))", "+\t\t\t\ttry {", "+\t\t\t\t\tfilterChild(each);", "+\t\t\t\t\tsortChild(each);", "+\t\t\t\t\tfiltered.add(each);", "+\t\t\t\t} catch (NoTestsRemainException e) {", "+\t\t\t\t\t// don't add it", "+\t\t\t\t}", "+\t\tCollections.sort(filtered, comparator());", "+\t\treturn filtered;"]}]}
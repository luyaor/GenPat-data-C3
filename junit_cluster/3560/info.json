{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49ef2b4234f201fc67e54102825be566", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63383caa1642aa1afe40d23e68627562", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "de43b277b8f2e63051368a36e27a35c5ed0f0e0b", "commitAfterChange": "59b1e2926cdebfd257c6c091ee2bd478d8aa04d2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \t \tpublic static Assignments allUnassigned(Method testMethod, \t\t\tClass<?> testClass)", "signatureAfterChange": "  \tpublic static Assignments allUnassigned(Method testMethod, \t\t\tClass<?> testClass)", "diff": ["-\t", "+\t\tArrayList<ParameterSignature> signatures= ParameterSignature.signatures(testMethod);", "+\t\tsignatures.addAll(ParameterSignature.signatures(testClass.getConstructors()[0]));", "-\t\t\t\tParameterSignature.signatures(testMethod), testClass);", "+\t\t\t\tsignatures, testClass);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87717b10d49d8e4dcb729c43d4c26544", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "commitBeforeChange": "e012e06dc326394a3a834d974e9af3fea0e6df91", "commitAfterChange": "2ade5fd3aad123d6507b59ed5d48c8f030314f00", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 3, "signatureBeforeChange": "      private void addSinglePointMethods(ParameterSignature sig,             List<PotentialAssignment> list)", "signatureAfterChange": "      private void addSinglePointMethods(ParameterSignature sig,             List<PotentialAssignment> list)", "diff": ["-                list.add(new MethodParameterValue(dataPointMethod));", "+                try {", "+                    list.add(PotentialAssignment.forValue(dataPointMethod.getName(), dataPointMethod.invokeExplosively(null)));", "+                } catch (Throwable e) {", "+                    // ignore and move on", "+                }"]}]}
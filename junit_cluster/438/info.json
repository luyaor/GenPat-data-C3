{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47dd36da4efe5c39127b547c123765e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c7549d912daa1a9a7a15512e00f7582", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/model/NoGenericTypeParametersValidator.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tvoid validate(List<Throwable> errors)", "signatureAfterChange": "      void validate(List<Throwable> errors)", "diff": ["-\tvoid validate(List<Throwable> errors) {", "-\t\tfor (Type each : fMethod.getGenericParameterTypes())", "-\t\t\tvalidateNoTypeParameterOnType(each, errors);", "-\t}", "+    void validate(List<Throwable> errors) {", "+        for (Type each : fMethod.getGenericParameterTypes()) {", "+            validateNoTypeParameterOnType(each, errors);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53c2b79d93201b2cf894b5558424c372", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/samples/ListTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \t@BeforeClass public static void setUpOnce()", "signatureAfterChange": "      @BeforeClass     public static void setUpOnce()", "diff": ["-\t", "-\t@BeforeClass public static void setUpOnce() {", "-\t\tfgHeavy= new ArrayList<Integer>();", "-\t\tfor(int i= 0; i < 1000; i++)", "-\t\t\tfgHeavy.add(i);", "-\t}", "+", "+    @BeforeClass", "+    public static void setUpOnce() {", "+        fgHeavy = new ArrayList<Integer>();", "+        for (int i = 0; i < 1000; i++) {", "+            fgHeavy.add(i);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6b58282f45c006df104234de357e59", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tprivate void runBefores() throws FailedBefore", "signatureAfterChange": "      private void runBefores() throws FailedBefore", "diff": ["-\t", "-\tprivate void runBefores() throws FailedBefore {", "-\t\ttry {", "-\t\t\ttry {", "-\t\t\t\tList<Method> befores= fTestMethod.getBefores();", "-\t\t\t\tfor (Method before : befores)", "-\t\t\t\t\tbefore.invoke(fTest);", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\tthrow e.getTargetException();", "-\t\t\t}", "-\t\t} catch (AssumptionViolatedException e) {", "-\t\t\tthrow new FailedBefore();", "-\t\t} catch (Throwable e) {", "-\t\t\taddFailure(e);", "-\t\t\tthrow new FailedBefore();", "-\t\t}", "-\t}", "+", "+    private void runBefores() throws FailedBefore {", "+        try {", "+            try {", "+                List<Method> befores = fTestMethod.getBefores();", "+                for (Method before : befores) {", "+                    before.invoke(fTest);", "+                }", "+            } catch (InvocationTargetException e) {", "+                throw e.getTargetException();", "+            }", "+        } catch (AssumptionViolatedException e) {", "+            throw new FailedBefore();", "+        } catch (Throwable e) {", "+            addFailure(e);", "+            throw new FailedBefore();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6d24d823d2f0a85d5016b8a3723c4c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/RunRules.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static Statement applyAll(Statement result, Iterable<TestRule> rules, \t\t\tDescription description)", "signatureAfterChange": "      private static Statement applyAll(Statement result, Iterable<TestRule> rules,             Description description)", "diff": ["-\tprivate static Statement applyAll(Statement result, Iterable<TestRule> rules,", "-\t\t\tDescription description) {", "-\t\tfor (TestRule each : rules)", "-\t\t\tresult= each.apply(result, description);", "-\t\treturn result;", "-\t}", "+", "+    private static Statement applyAll(Statement result, Iterable<TestRule> rules,", "+            Description description) {", "+        for (TestRule each : rules) {", "+            result = each.apply(result, description);", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "834fc95210d9a1bfc0fdc00cf7fdbe2e", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/samples/ListTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t@Ignore(\"not today\") @Test public void capacity()", "signatureAfterChange": "      @Ignore(\"not today\")     @Test     public void capacity()", "diff": ["-\t}", "-\t@Ignore(\"not today\") @Test public void capacity() {", "-\t\tint size= fFull.size(); ", "-\t\tfor (int i= 0; i < 100; i++)", "-\t\t\tfFull.add(i);", "-\t\tassertTrue(fFull.size() == 100+size);", "-\t}", "+", "+    @Ignore(\"not today\")", "+    @Test", "+    public void capacity() {", "+        int size = fFull.size();", "+        for (int i = 0; i < 100; i++) {", "+            fFull.add(i);", "+        }", "+        assertTrue(fFull.size() == 100 + size);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8aaed6e77e34eca0ebe893bbc3f10989", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/tests/runner/TextFeedbackTest.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tprivate String expected(String[] lines)", "signatureAfterChange": "      private String expected(String[] lines)", "diff": ["-\t", "-\tprivate String expected(String[] lines) {", "-\t\tOutputStream expected= new ByteArrayOutputStream();", "-\t\tPrintStream expectedWriter= new PrintStream(expected);", "-\t\tfor (int i= 0; i < lines.length; i++)", "-\t\t\texpectedWriter.println(lines[i]);", "-\t\treturn expected.toString(); ", "-\t}", "+", "+    private String expected(String[] lines) {", "+        OutputStream expected = new ByteArrayOutputStream();", "+        PrintStream expectedWriter = new PrintStream(expected);", "+        for (int i = 0; i < lines.length; i++) {", "+            expectedWriter.println(lines[i]);", "+        }", "+        return expected.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf1a4c9170377fa72467700a9e59e992", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/MoneyBag.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tpublic IMoney negate()", "signatureAfterChange": "      public IMoney negate()", "diff": ["-\t}", "-\tpublic IMoney negate() {", "-\t\tMoneyBag result= new MoneyBag();", "-\t    for (Money each : fMonies)", "-\t        result.appendMoney((Money) each.negate());", "-\t\treturn result;", "-\t}", "+", "+    public IMoney negate() {", "+        MoneyBag result = new MoneyBag();", "+        for (Money each : fMonies) {", "+            result.appendMoney((Money) each.negate());", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5fa41399867dcb10bb73ee92d7240f7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t\t@Override \t\tprotected void handleAssumptionViolation(AssumptionViolatedException e)", "signatureAfterChange": "          @Override         protected void handleAssumptionViolation(AssumptionViolatedException e)", "diff": ["-\t\t@Override", "-\t\tprotected void handleAssumptionViolation(AssumptionViolatedException e) {", "-\t\t\tsuper.handleAssumptionViolation(e);", "-\t\t\tfor (GuesserQueue queue : queues)", "-\t\t\t\tqueue.update(e);", "-\t\t}", "+        @Override", "+        protected void handleAssumptionViolation(AssumptionViolatedException e) {", "+            super.handleAssumptionViolation(e);", "+            for (GuesserQueue queue : queues) {", "+                queue.update(e);", "+            }", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fccc70d04f58588d12dceebacad5f977", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/junit/samples/money/MoneyBag.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " \t@Override \tpublic String toString()", "signatureAfterChange": "      @Override     public String toString()", "diff": ["-\t}", "-\t@Override", "-\tpublic String toString() {", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\tbuffer.append(\"{\");", "-\t\tfor (Money each : fMonies)", "-\t\t    buffer.append(each);", "-\t\tbuffer.append(\"}\");", "-\t\treturn buffer.toString();", "-\t}", "+", "+    @Override", "+    public String toString() {", "+        StringBuffer buffer = new StringBuffer();", "+        buffer.append(\"{\");", "+        for (Money each : fMonies) {", "+            buffer.append(each);", "+        }", "+        buffer.append(\"}\");", "+        return buffer.toString();", "+    }"]}]}
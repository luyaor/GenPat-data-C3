{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8e3a0706d449dbb09cec066ccaf330f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ed76741bdd320f9a00c20fa1b6a67ba", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "1768d08d029dc3bf1ab88e26df0a9b40ae61227f", "commitAfterChange": "5ca9da987a7d4dc00e082aaf552cbd8ee8c7bd33", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "     private Thread getStuckThread (Thread mainThread)", "signatureAfterChange": "     private Thread getStuckThread (Thread mainThread)", "diff": ["-\t\tThreadMXBean mxBean = ManagementFactory.getThreadMXBean();", "-    \t\t// if there are too many threads to fit into the array, enumerate's result", "-    \t\t// is >= the array's length; therefore we can't trust that it returned all", "-    \t\t// the threads.  Try again.", "+            // if there are too many threads to fit into the array, enumerate's result", "+            // is >= the array's length; therefore we can't trust that it returned all", "+            // the threads.  Try again.", "-    \tThread firstRunnable = null;", "-    \tThread mostCpu = null;", "+    \tThread stuckThread = null;", "-    \tint runnableCount = 0;", "-    \t\t\trunnableCount++;", "-    \t\t\tif (firstRunnable == null) firstRunnable = threads[i];", "-    \t\t\tif (mxBean.isThreadCpuTimeSupported()) {", "-    \t\t\t\ttry {", "-    \t\t\t\t\tlong cpuTime = mxBean.getThreadCpuTime(threads[i].getId());", "-    \t\t\t\t\tif (mostCpu == null || cpuTime > maxCpuTime) {", "-    \t\t\t\t\t\tmostCpu = threads[i];", "-    \t\t\t\t\t\tmaxCpuTime = cpuTime;", "-    \t\t\t\t\t}", "-    \t\t\t\t} catch (UnsupportedOperationException e) {", "-    \t\t\t\t}", "-    \t\t\t}", "+                long threadCpuTime = cpuTime (threads [i]);", "+                if (stuckThread == null || threadCpuTime > maxCpuTime) {", "+                    stuckThread = threads[i];", "+                    maxCpuTime = threadCpuTime;", "+                }", "-    \tThread stuckThread =", "-    \t\t\t(runnableCount == 1) ? firstRunnable :", "-    \t\t\t\t((mostCpu != null) ? mostCpu : firstRunnable);", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e09bcef2bb2ec1a137b3dfc228d0d20", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "commitBeforeChange": "15566c4b6633db5cc84cae78088b36346b7d42f4", "commitAfterChange": "9d3821f6411ad85a683b8d38e4d42411229f2eec", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 9, "signatureBeforeChange": "      @Test     public void annotationToFieldsReturnsKeysInADeterministicOrder()", "signatureAfterChange": "         @Ignore         @Test         public int methodC()", "diff": ["+        @Ignore", "+        @Test", "+        public int methodC() {", "+            return 0;", "+        }", "-", "-    @Test", "-    public void annotationToFieldsReturnsKeysInADeterministicOrder() {", "-        TestClass tc = new TestClass(MultipleFieldsAnnotated.class);", "-        Map<Class<? extends Annotation>, List<FrameworkField>> annotationToFields = tc.getAnnotationToFields();", "-        List<Class<? extends Annotation>> keys = new ArrayList<Class<? extends Annotation>>();", "-        for (Class<? extends Annotation> annotation : annotationToFields.keySet()) {", "-            keys.add(annotation);", "-        }", "-        assertThat(keys.get(0), CoreMatchers.<Class<? extends Annotation>>is(DataPoint.class));", "-        assertThat(keys.get(1), CoreMatchers.<Class<? extends Annotation>>is(Rule.class));"]}]}
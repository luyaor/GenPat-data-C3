{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f517452e4221fd5e347e97c80010d51", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f708e94ff48cab694b87c723b38479d", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "971c9a52281458375af79e303449fe22bf91feab", "commitAfterChange": "97402a3401c6cc2d45d395c0d9d636f483b5571c", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected Statement withAfterClasses(Statement statement)", "signatureAfterChange": " \tprotected Statement withAfterClasses(Statement statement)", "diff": ["-\t\tList<FrameworkMethod> afters= getTestClass().getAnnotatedMethods(", "-\t\t\t\tAfterClass.class);", "-\t\treturn afters.isEmpty() ? statement : new RunAfters(statement, afters,", "-\t\t\t\tnull);", "+\t\tList<FrameworkMethod> afters= fTestClass", "+\t\t\t\t.getAnnotatedMethods(AfterClass.class);", "+\t\treturn afters.isEmpty() ? statement : ", "+\t\t\tnew RunAfters(statement, afters, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "443c0813bf6e8bef6af545e770dc4d3b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "commitAfterChange": "44e7458b19d5cd1900a765a440c96e85b81d25fc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 10, "signatureBeforeChange": "  \tprotected Description methodDescription(TestMethod method)", "signatureAfterChange": "  \tprotected Description methodDescription(TestMethod method)", "diff": ["-\t\treturn Description.createTestDescription(getTestClass().getJavaClass(),", "+\t\treturn Description.createTestDescription(fTestClass.getJavaClass(),", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "528830b91265e953b5b18ada20eb8f17", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "496ee866a46f783d145b649a688df57cbf79490e", "commitAfterChange": "5f7fddf537e551109ffd6241a00c87a2b3521523", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " \tprotected Statement withAfterClasses(Statement statement)", "signatureAfterChange": " \tprotected Statement withAfterClasses(Statement statement)", "diff": ["-\t\tList<FrameworkMethod> afters= getTestClass().getAnnotatedMethods(", "-\t\t\t\tAfterClass.class);", "-\t\treturn afters.isEmpty() ? statement : new RunAfters(statement, afters,", "-\t\t\t\tnull);", "+\t\tList<FrameworkMethod> afters= fTestClass", "+\t\t\t\t.getAnnotatedMethods(AfterClass.class);", "+\t\treturn afters.isEmpty() ? statement : ", "+\t\t\tnew RunAfters(statement, afters, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68ce60be875ee44ab1953e03bf624f55", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "b1068dc55c95d1000e07b71d3a9d9a2fd26bfff9", "commitAfterChange": "24f9b5223c2801a5cba0611e447e66677069b837", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \t@Override \tpublic int hashCode()", "signatureAfterChange": "  \t@Override \tpublic int hashCode()", "diff": ["-\t\treturn getDisplayName().hashCode();", "+\t\treturn fUniqueId.hashCode();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f39674ebe210adef26cad03445f5297", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "commitAfterChange": "44e7458b19d5cd1900a765a440c96e85b81d25fc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 20, "signatureBeforeChange": "  \tprotected String getName()", "signatureAfterChange": "  \tprotected String getName()", "diff": ["-", "-\tprotected String getName() {", "-\t\treturn getTestClass().getName();", "-\t}", "+", "+\tprotected String getName() {", "+\t\treturn fTestClass.getName();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dab45e432baaffe85d7b5be9e6e2dea", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "c391c25b230e880289484202f3dc3aa81c373a1c", "commitAfterChange": "495a9a93e4a1157e707a01467e7cc3f600c88d19", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "      private Exception parametersMethodReturnedWrongType() throws Exception", "signatureAfterChange": "          private Exception parametersMethodReturnedWrongType() throws Exception", "diff": ["-    private Exception parametersMethodReturnedWrongType() throws Exception {", "-        String className = getTestClass().getName();", "-        String methodName = getParametersMethod().getName();", "-        String message = MessageFormat.format(", "-                \"{0}.{1}() must return an Iterable of arrays.\",", "-                className, methodName);", "-        return new Exception(message);", "-    }", "+", "+        private Exception parametersMethodReturnedWrongType() throws Exception {", "+            String className = testClass.getName();", "+            String methodName = getParametersMethod().getName();", "+            String message = MessageFormat.format(", "+                    \"{0}.{1}() must return an Iterable of arrays.\", className,", "+                    methodName);", "+            return new Exception(message);", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8d0ddc41316241293cf4afb62333238", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "beb1f4a80f7fa20523d40535fb81c1b8a7a9e638", "commitAfterChange": "83a25d440d118b7d10779a884d35f31045949e27", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "     public boolean isTest()", "signatureAfterChange": "     public boolean isTest()", "diff": ["-        return getChildren().isEmpty();", "+        return fChildren.isEmpty();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca46bc8c564de386984b35a3e8a33a74", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "496ee866a46f783d145b649a688df57cbf79490e", "commitAfterChange": "5f7fddf537e551109ffd6241a00c87a2b3521523", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected Statement withBeforeClasses(Statement statement)", "signatureAfterChange": " \tprotected Statement withBeforeClasses(Statement statement)", "diff": ["-\t\tList<FrameworkMethod> befores= getTestClass().getAnnotatedMethods(", "-\t\t\t\tBeforeClass.class);", "-\t\treturn befores.isEmpty() ? statement : new RunBefores(statement,", "-\t\t\t\tbefores, null);", "+\t\tList<FrameworkMethod> befores= fTestClass", "+\t\t\t\t.getAnnotatedMethods(BeforeClass.class);", "+\t\treturn befores.isEmpty() ? statement :", "+\t\t\tnew RunBefores(statement, befores, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4e81be45f4df877df1ca489778972e0", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "971c9a52281458375af79e303449fe22bf91feab", "commitAfterChange": "97402a3401c6cc2d45d395c0d9d636f483b5571c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tprotected Statement withBeforeClasses(Statement statement)", "signatureAfterChange": " \tprotected Statement withBeforeClasses(Statement statement)", "diff": ["-\t\tList<FrameworkMethod> befores= getTestClass().getAnnotatedMethods(", "-\t\t\t\tBeforeClass.class);", "-\t\treturn befores.isEmpty() ? statement : new RunBefores(statement,", "-\t\t\t\tbefores, null);", "+\t\tList<FrameworkMethod> befores= fTestClass", "+\t\t\t\t.getAnnotatedMethods(BeforeClass.class);", "+\t\treturn befores.isEmpty() ? statement :", "+\t\t\tnew RunBefores(statement, befores, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d91d7fb098b4a9221767de718550fcd9", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "beb1f4a80f7fa20523d40535fb81c1b8a7a9e638", "commitAfterChange": "83a25d440d118b7d10779a884d35f31045949e27", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "     public void addChild(Description description)", "signatureAfterChange": "     public void addChild(Description description)", "diff": ["-        getChildren().add(description);", "+        fChildren.add(description);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6f5de0a9ec8fc07204d4cdffff9d534", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "576377b9ad44028dc84c2f8487cfe8dbccb8c252", "commitAfterChange": "44e7458b19d5cd1900a765a440c96e85b81d25fc", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprotected Object createTest() throws Exception", "signatureAfterChange": "  \tprotected Object createTest() throws Exception", "diff": ["-", "-\tprotected Object createTest() throws Exception {", "-\t\treturn getTestClass().getConstructor().newInstance();", "-\t}", "+\tprotected Object createTest() throws Exception {", "+\t\treturn fTestClass.getConstructor().newInstance();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec9a6ee63a0ac4195c71f39adafd2cb8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "34a0ecb4ffb3cb8d33b60c222c29145d017f02c9", "commitAfterChange": "d3e86b059db787af5c0d58ddf3f69af5b42865b8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \tpublic void addChild(Description description)", "signatureAfterChange": " \tpublic void addChild(Description description)", "diff": ["-\t\tgetChildren().add(description);", "+\t\tfChildren.add(description);"]}]}
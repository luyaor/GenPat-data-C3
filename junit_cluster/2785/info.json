{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48015e39b3f02651b5ad170da122841c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11e58c57dbd91702157d54a37950ffaa", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/categories/Categories.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 11, "signatureBeforeChange": "          private boolean hasCorrectCategoryAnnotation(Description description)", "signatureAfterChange": "          private boolean hasCorrectCategoryAnnotation(Description description)", "diff": ["-            List<Class<?>> categories = categories(description);", "-            if (categories.isEmpty()) {", "-                return fIncluded == null;", "+            final Set<Class<?>> childCategories= categories(description);", "+", "+            // If a child has no categories, immediately return.", "+            if (childCategories.isEmpty()) {", "+                return fIncluded.isEmpty();", "-            for (Class<?> each : categories) {", "-                if (fExcluded != null && fExcluded.isAssignableFrom(each)) {", "-                    return false;", "+", "+            if (!fExcluded.isEmpty()) {", "+                if (fExcludedAny) {", "+                    if (matchesAnyParentCategories(childCategories, fExcluded)) {", "+                        return false;", "+                    }", "+                } else {", "+                    if (matchesAllParentCategories(childCategories, fExcluded)) {", "+                        return false;", "+                    }", "-            for (Class<?> each : categories) {", "-                if (fIncluded == null || fIncluded.isAssignableFrom(each)) {", "+", "+            // Couldn't be excluded, and with no suite's included categories treated as should run.", "+            if (fIncluded.isEmpty()) {", "+                return true;", "+            }", "+", "+            if (!fIncluded.isEmpty()) {", "+                if (fIncludedAny) {", "+                    return matchesAnyParentCategories(childCategories, fIncluded);", "+                } else {", "+                    return matchesAllParentCategories(childCategories, fIncluded);", "+                }", "+            }", "+", "+            return false;", "+        }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5035af515d2624b92f5468c7bea4ed97", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "dca4a949f93bb85cc8ee0eb8789979a18aa3ffc7", "commitAfterChange": "cb6abf6fc729f07c5d60b0756e91af444400b4b5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 6, "signatureBeforeChange": "      protected Runner createRunnerForTest(TestWithParameters test)             throws InitializationError", "signatureAfterChange": "      private List<Runner> createRunnersForParameters(             Iterable<Object> allParameters, String namePattern,             ParametersRunnerFactory runnerFactory)             throws InitializationError,             Exception", "diff": ["-", "-    protected Runner createRunnerForTest(TestWithParameters test)", "-            throws InitializationError {", "-        return new BlockJUnit4ClassRunnerWithParameters(test);", "+    private List<Runner> createRunnersForParameters(", "+            Iterable<Object> allParameters, String namePattern,", "+            ParametersRunnerFactory runnerFactory)", "+            throws InitializationError,", "+            Exception {", "+            List<TestWithParameters> tests = createTestsForParameters(", "+                    allParameters, namePattern);", "+            List<Runner> runners = new ArrayList<Runner>();", "+            for (TestWithParameters test : tests) {", "+                runners.add(runnerFactory", "+                        .createRunnerForTestWithParameters(test));", "+            return runners;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "514110f510a86d1a77929fd69ceb7b3e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "042a05db439ce52705ea70f0833e0761", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \t@SuppressWarnings(\"deprecation\") \tprivate Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules, \t\t\tObject target, Statement result)", "signatureAfterChange": "      @SuppressWarnings(\"deprecation\")     private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,             Object target, Statement result)", "diff": ["-\t@SuppressWarnings(\"deprecation\")", "-\tprivate Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,", "-\t\t\tObject target, Statement result) {", "-\t\tfor (org.junit.rules.MethodRule each : getMethodRules(target))", "-\t\t\tif (! testRules.contains(each))", "-\t\t\t\tresult= each.apply(result, method, target);", "-\t\treturn result;", "-\t}", "+    @SuppressWarnings(\"deprecation\")", "+    private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,", "+            Object target, Statement result) {", "+        for (org.junit.rules.MethodRule each : getMethodRules(target)) {", "+            if (!testRules.contains(each)) {", "+                result = each.apply(result, method, target);", "+            }", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f38a96e1b1837f72b4acedc8ae5ca485", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "dc44abf520611a8722e75ba1d32df6a28183e4e3", "commitAfterChange": "bb91daf8e0939d787ffb5a3eda05c2d626cd9851", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  \tprivate Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules, \t\t\tObject target, Statement result)", "signatureAfterChange": "      private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,             Object target, Statement result)", "diff": ["-\tprivate Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,", "-\t\t\tObject target, Statement result) {", "-\t\tfor (org.junit.rules.MethodRule each : getMethodRules(target))", "-\t\t\tif (! testRules.contains(each))", "-\t\t\t\tresult= each.apply(result, method, target);", "-\t\treturn result;", "-\t}", "+    private Statement withMethodRules(FrameworkMethod method, List<TestRule> testRules,", "+            Object target, Statement result) {", "+        for (org.junit.rules.MethodRule each : getMethodRules(target)) {", "+            if (!testRules.contains(each)) {", "+                result = each.apply(result, method, target);", "+            }", "+        }", "+        return result;", "+    }"]}]}
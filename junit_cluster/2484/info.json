{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56d5a68bd5c58fe4e891d003902a274b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa67212978449f58f07795181374f575", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionTest.java", "commitBeforeChange": "0f623cd1b1309e8b687aa5055d2b5c672be2a0d5", "commitAfterChange": "f40f106b3721c9b3f9a7d535df1027588d64dcaf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "      @Parameters     public static Collection<Object[]> testsWithEventMatcher()", "signatureAfterChange": "      @Parameters(name= \"{0}\")     public static Collection<Object[]> testsWithEventMatcher()", "diff": ["-    @Parameters", "+    @Parameters(name= \"{0}\")", "-                { CustomMessageWithoutExpectedException.class, hasSingleFailureWithMessage(ARBITRARY_MESSAGE) }", "+                {", "+                        UseNoCustomMessage.class,", "+                        hasSingleFailureWithMessage(\"Expected test to throw an instance of java.lang.IllegalArgumentException\") },", "+                {", "+                        UseCustomMessageWithoutPlaceHolder.class,", "+                        hasSingleFailureWithMessage(ARBITRARY_MESSAGE) },", "+                {", "+                        UseCustomMessageWithPlaceHolder.class,", "+                        hasSingleFailureWithMessage(ARBITRARY_MESSAGE", "+                                + \" - an instance of java.lang.IllegalArgumentException\") }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f341608f9a421ebcc63b039a124445a8", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/categories/CategoryTest.java", "commitBeforeChange": "fa9b88f335a338f65de8ded6f4b59d0123c3e6a2", "commitAfterChange": "de7f4fb2d4fedf3cfaba877b54d60ac3f3e5944a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "          @Category(SlowTests.class)         @Test         public void b()", "signatureAfterChange": "          @Category(SlowTests.class)         @Test         public void b()", "diff": ["+", "+        @Category(SlowTests.class)", "+        @Test", "+        public void b() {", "+        }"]}]}
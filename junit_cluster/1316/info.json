{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83936ef84577b05df604dc0f2e40b10f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12de4dab80b8d59ae9fcf1966d2238c2", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/Roadie.java", "commitBeforeChange": "1fe4f2534d39f819eae3ae1a6e6169c651b0a8a8", "commitAfterChange": "f98130957df08de9cae93169298e04bf84388cae", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tvoid runBefores(JavaElement javaElement) throws FailedBefore", "signatureAfterChange": "  \tboolean runBefores(JavaElement javaElement)", "diff": ["-\tvoid runBefores(JavaElement javaElement) throws FailedBefore {", "+\tboolean runBefores(JavaElement javaElement) {", "-\t\t\ttry {", "-\t\t\t\tList<Method> befores= javaElement.getBefores();", "-\t\t\t\tfor (Method before : befores)", "-\t\t\t\t\tbefore.invoke(getTarget());", "-\t\t\t} catch (InvocationTargetException e) {", "-\t\t\t\tthrow e.getTargetException();", "-\t\t\t}", "+\t\t\tList<Method> befores= javaElement.getBefores();", "+\t\t\tfor (Method before : befores)", "+\t\t\t\tExplosiveMethod.from(before).invoke(fTarget);", "+\t\t\treturn true;", "-\t\t\tthrow new FailedBefore();", "+\t\t\treturn false;", "-\t\t\tthrow new FailedBefore();", "+\t\t\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "909a0c111d2bd905429b13419c00d04b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "34e66740b9117ce85cfd416f9e931b2e533ab16e", "commitAfterChange": "85b7c26e63f851004ce20d4a00fbf1b46607ab0c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 5, "signatureBeforeChange": "          @Override         public void run()", "signatureAfterChange": "          public Throwable call() throws Exception", "diff": ["-", "-        @Override", "-        public void run() {", "+        public Throwable call() throws Exception {", "-                fStatement.evaluate();", "-                fFinished = true;", "-            } catch (InterruptedException e) {", "-                // don't log the InterruptedException", "-            } catch (InterruptedIOException e) {", "-                // don't log the InterruptedIOException", "-            } catch (ClosedByInterruptException e) {", "-                // don't log the ClosedByInterruptException", "+                fOriginalStatement.evaluate();", "+            } catch (Exception e) {", "+                throw e;", "-                fExceptionThrownByOriginalStatement = e;", "+                return e;", "+            return null;"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aba7d8c48caeb71a59a8256c414bed72", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29deec125a7e0cff476b97f97dd503c6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/AssumptionViolatedException.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tpublic void describeTo(Description description)", "signatureAfterChange": "      public void describeTo(Description description)", "diff": ["-\tpublic void describeTo(Description description) {", "-\t\tif (fAssumption != null)", "-\t\t\tdescription.appendText(fAssumption);", "-\t\tif (fValueMatcher) {", "-\t\t\tif (fAssumption != null)", "-\t\t\t\tdescription.appendText(\": \");", "-\t\t\tdescription.appendText(\"got: \");", "-\t\t\tdescription.appendValue(fValue);", "-\t\t\t", "-\t\t\tif (fMatcher != null) {", "-\t\t\t\tdescription.appendText(\", expected: \");", "-\t\t\t\tdescription.appendDescriptionOf(fMatcher);", "-\t\t\t}", "-\t\t}", "-\t}", "+", "+    public void describeTo(Description description) {", "+        if (fAssumption != null) {", "+            description.appendText(fAssumption);", "+        }", "+", "+        if (fValueMatcher) {", "+            if (fAssumption != null) {", "+                description.appendText(\": \");", "+            }", "+", "+            description.appendText(\"got: \");", "+            description.appendValue(fValue);", "+", "+            if (fMatcher != null) {", "+                description.appendText(\", expected: \");", "+                description.appendDescriptionOf(fMatcher);", "+            }", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8224a4acdfd710371bcbcb0de8f3145c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tpublic void filter(Filter filter) throws NoTestsRemainException {", "-\t\tfor (Iterator<Method> iter= fTestMethods.iterator(); iter.hasNext();) {", "-\t\t\tMethod method= iter.next();", "-\t\t\tif (!filter.shouldRun(methodDescription(method)))", "-\t\t\t\titer.remove();", "-\t\t}", "-\t\tif (fTestMethods.isEmpty())", "-\t\t\tthrow new NoTestsRemainException();", "-\t}", "+", "+    public void filter(Filter filter) throws NoTestsRemainException {", "+        for (Iterator<Method> iter = fTestMethods.iterator(); iter.hasNext(); ) {", "+            Method method = iter.next();", "+            if (!filter.shouldRun(methodDescription(method))) {", "+                iter.remove();", "+            }", "+        }", "+        if (fTestMethods.isEmpty()) {", "+            throw new NoTestsRemainException();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7c32bad385f1c0a220c3f4aa98405ec", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/ComparisonFailure.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \t\tprivate String compactString(String source)", "signatureAfterChange": "          private String compactString(String source)", "diff": ["-\t\tprivate String compactString(String source) {", "-\t\t\tString result= DELTA_START + source.substring(fPrefix, source.length() - fSuffix + 1) + DELTA_END;", "-\t\t\tif (fPrefix > 0)", "-\t\t\t\tresult= computeCommonPrefix() + result;", "-\t\t\tif (fSuffix > 0)", "-\t\t\t\tresult= result + computeCommonSuffix();", "-\t\t\treturn result;", "-\t\t}", "+", "+        private String compactString(String source) {", "+            String result = DELTA_START + source.substring(fPrefix, source.length() - fSuffix + 1) + DELTA_END;", "+            if (fPrefix > 0) {", "+                result = computeCommonPrefix() + result;", "+            }", "+            if (fSuffix > 0) {", "+                result = result + computeCommonSuffix();", "+            }", "+            return result;", "+        }"]}]}
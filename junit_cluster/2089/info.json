{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7702ec25923c014761f30195d7fa30cb", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "181480db5a5ab547752060202b76b3ce", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/JUnit4ClassRunner.java", "commitBeforeChange": "f49fb25b6fbffcc7a68b28824ed3856ffa9d6fdd", "commitAfterChange": "078e45bd31a9920e00633ad6ce658e22529304f2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tprotected Statement childBlock(FrameworkMethod method)", "signatureAfterChange": "  \tprotected String getName()", "diff": ["+", "+\tprotected String getName() {", "+\t\treturn getTestClass().getName();", "+\t}", "-\t", "-\tprotected Statement childBlock(FrameworkMethod method) {", "-\t\t\ttest= new ReflectiveCallable() {", "-\t\t\t\t@Override", "-\t\t\t\tprotected Object runReflectiveCall() throws Throwable {", "-\t\t\t\t\treturn createTest();", "-\t\t\t\t}", "-\t\t\t}.run();", "-\t\t} catch (Throwable e) {", "-\t\t\treturn new Fail(e);", "-", "-\t\tTestAnnotation annotation= new TestAnnotation(method);", "-\t\t", "-\t\tStatement link= invoke(method, test);", "-\t\tlink= possiblyExpectingExceptions(annotation, link);", "-\t\tlink= withPotentialTimeout(annotation, link);", "-\t\tlink= withBefores(method, test, link);", "-\t\tlink= withAfters(method, test, link);", "-\t\treturn link;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a62a7f108bafe057f6a40cd567211a10", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/runner/BaseTestRunner.java", "commitBeforeChange": "9af2e559040ea3bc3db5c5d39b2c4a27098d5a76", "commitAfterChange": "a1fef439624fe411d0bea8651324e28b134e8b4a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " \tpublic static String filterStack(String stack)", "signatureAfterChange": "  \tprotected static boolean showStackRaw()", "diff": ["-\tpublic static String filterStack(String stack) {", "-\t\tif (!getPreference(\"filterstack\").equals(\"true\") || fgFilterStack == false)", "+", "+\tprotected static boolean showStackRaw() {", "+\t\treturn !getPreference(\"filterstack\").equals(\"true\") || fgFilterStack == false;", "+\t}"]}]}
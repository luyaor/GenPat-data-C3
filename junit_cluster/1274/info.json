{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a73934e7e8da206c91d66a44789cd7f7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fbab5677c6184d649d38fa7257a087b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/interceptor/Interceptors.java", "commitBeforeChange": "a2bf97027581ae4da52a3905642cae3331623808", "commitAfterChange": "bbcb8f416628bc168a2ed8353a30b4e9647abf6f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Statement intercept(Statement statement, Object target, FrameworkMethod method)", "signatureAfterChange": "  \tprivate Statement intercept(Statement statement, Object target, \t\t\tFrameworkMethod method)", "diff": ["-\tprivate Statement intercept(Statement statement, Object target, FrameworkMethod method) {", "+", "+\tprivate Statement intercept(Statement statement, Object target,", "+\t\t\tFrameworkMethod method) {", "-\t\tField[] fields= javaClass.getFields();", "+\t\tField[] fields= javaClass.getFields();", "+\t\t\t// TODO (May 18, 2009 10:30:03 PM): validate, validate!"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7afb4928bccad627e563e347ea7e9d52", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "commitBeforeChange": "1b138aa257ea2439c7010776feac06f9dd5fde66", "commitAfterChange": "88e2a7611e0c9e93aefca75056ac52c46fb5799b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "      @Test     public void annotationToFieldsReturnsValuesInTheMapThatAreUnmodifiable()", "signatureAfterChange": "      @Test     public void annotationToFieldsReturnsValuesInTheMapThatAreUnmodifiable()", "diff": ["-        exception.expect(UnsupportedOperationException.class);", "-", "+        exception.expect(UnsupportedOperationException.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "801de1af86bf94f319242cdd93af1e15", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "2e63af604c9487b9e8acbe002cf9a27230d1d7a0", "commitAfterChange": "a68ae0886c1c6274943e6f99d70816d162273d9c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \tprotected Statement methodBlock(FrameworkMethod method)", "signatureAfterChange": " \tprotected Statement methodBlock(FrameworkMethod method)", "diff": ["-\t\tstatement= withRules(method, test, statement);", "+\t\tstatement= withRules(method, test, statement);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8122ebfafdf06e6e248e3ffa27274d59", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "785c7859cd87dc5cb3872fef476ce2f86c9259dd", "commitAfterChange": "23e6e92b774e1e3910acc6a903293972bc562500", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  \tprivate Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations)", "signatureAfterChange": "  \tprivate Description(Class<?> clazz, String displayName, Serializable uniqueId, Annotation... annotations)", "diff": ["-\t\tfDisplayName= displayName;", "+\t\tfDisplayName= displayName;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85b60e8e0febea1eca555c1ec298678a", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/swingui/TestRunner.java", "commitBeforeChange": "16a63015ab1aa619424ab74147f5f14d23669b0b", "commitAfterChange": "f381b14b797ee0b9116221ec317b09acdf4e3ff3", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " \t \tprivate void rerunTest(Test test)", "signatureAfterChange": "  \tprivate void rerunTest(Test test)", "diff": ["-\t", "+", "-\t\t\tObject[] args= new Object[]{((TestCase)test).getName()};", "-\t\t\treloadedTest=(Test)constructor.newInstance(args);", "+\t\t\tObject[] args= new Object[]{((TestCase)test).getName()};", "+\t\t\treloadedTest= (Test)constructor.newInstance(args);", "-\t\t", "+", "-\t\telse if (result.errorCount() == 1) ", "-\t\t\tshowStatus(message+\" had an error\"); ", "-\t\telse ", "+\t\telse if (result.errorCount() == 1)", "+\t\t\tshowStatus(message+\" had an error\");", "+\t\telse"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ddfaa87f6bea7808be61ff6d2671d91", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/experimental/validator/AnnotationValidatorFactoryTest.java", "commitBeforeChange": "1b138aa257ea2439c7010776feac06f9dd5fde66", "commitAfterChange": "88e2a7611e0c9e93aefca75056ac52c46fb5799b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      @Test     public void exceptionWhenAnnotationValidatorCantBeCreated()", "signatureAfterChange": "      @Test     public void exceptionWhenAnnotationValidatorCantBeCreated()", "diff": ["+        ValidateWith validateWith = SampleTestWithValidatorThatThrowsException.class.getAnnotation(ValidateWith.class);", "-", "-        ValidateWith validateWith = SampleTestWithValidatorThatThrowsException.class.getAnnotation(ValidateWith.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917f356fbb1e89be8430d80fd5a2f94e", "repository": "https://github.com/junit-team/junit.git", "fileName": "junit/textui/TestRunner.java", "commitBeforeChange": "de48375b1b601c32daf718c70c62f7f4b80b58aa", "commitAfterChange": "bc3741becf26f02b5af98dc0b3b151bbd2a2fc83", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tpublic synchronized void print(TestResult result)", "signatureAfterChange": " \tpublic synchronized void print(TestResult result)", "diff": ["-\t    printHeader(result);", "+\t    printHeader(result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a187c36b513389bb964585a951411012", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "commitBeforeChange": "1b138aa257ea2439c7010776feac06f9dd5fde66", "commitAfterChange": "88e2a7611e0c9e93aefca75056ac52c46fb5799b", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "      @Test     public void annotationToFieldsReturnsUnmodifiableMap()", "signatureAfterChange": "      @Test     public void annotationToFieldsReturnsUnmodifiableMap()", "diff": ["-        exception.expect(UnsupportedOperationException.class);", "-", "+        exception.expect(UnsupportedOperationException.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfa008580ba7ffa12d91e793778fd358", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "commitBeforeChange": "1b138aa257ea2439c7010776feac06f9dd5fde66", "commitAfterChange": "88e2a7611e0c9e93aefca75056ac52c46fb5799b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "      @Test     public void annotationToMethodsReturnsUnmodifiableMap()", "signatureAfterChange": "      @Test     public void annotationToMethodsReturnsUnmodifiableMap()", "diff": ["-        exception.expect(UnsupportedOperationException.class);", "-", "+        exception.expect(UnsupportedOperationException.class);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e28a4ea0a480f4118af20846ab24aaa6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/interceptor/Interceptors.java", "commitBeforeChange": "b5573b70809bed76a0397bb5bb196b6b2144d3d4", "commitAfterChange": "356a069f8cbbad2a368fdbc6ceee4e94200e7140", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tprivate Statement intercept(Statement statement, Object target, FrameworkMethod method)", "signatureAfterChange": "  \tprivate Statement intercept(Statement statement, Object target, \t\t\tFrameworkMethod method)", "diff": ["-\tprivate Statement intercept(Statement statement, Object target, FrameworkMethod method) {", "+", "+\tprivate Statement intercept(Statement statement, Object target,", "+\t\t\tFrameworkMethod method) {", "-\t\tField[] fields= javaClass.getFields();", "+\t\tField[] fields= javaClass.getFields();", "+\t\t\t// TODO (May 18, 2009 10:30:03 PM): validate, validate!"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf156af53fba94ba3b82ccb680aea212", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a427621ef646ed594c788c316f4315df", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "6589127231db19458b696785bab3b839f9bde90f", "commitAfterChange": "f1f4fe290a3a35a9083d2e76e922b57350e05f34", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tTest createTestSuite(Plan plan)", "signatureAfterChange": "  \tprivate Test createTestSuite(Plan plan)", "diff": ["+", "+\tprivate Test createTestSuite(Plan plan) {", "+\t\tTestSuite suite= new TestSuite(plan.getDescription().getDisplayName());", "+\t\tfor (Plan child : plan.getChildren())", "+\t\t\tsuite.addTest(asTest(child));", "+\t\treturn suite;", "+\t}", "-\tTest createTestSuite(Plan plan) {", "-\t\t// TODO: shouldn't have to test for suite", "-\t\tDescription description= plan.getDescription();", "-\t\tif (description.isTest())", "-\t\t\treturn new JUnit4TestCaseFacade(description);", "-\t\telse {", "-\t\t\tTestSuite suite = new TestSuite(description.getDisplayName());", "-\t\t\tfor (Plan child : plan.getChildren())", "-\t\t\t\tsuite.addTest(asTest(child));", "-\t\t\treturn suite;", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c853c9a44d20f462fb4bf7b5e8ab0052", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/JUnitCommandLineParser.java", "commitBeforeChange": "b1cf4b5bc6ead8c3dfcbbb9ebe69be85f5e53cb8", "commitAfterChange": "56193048f411846a58c0e0377a5f1ccfecd3d2f9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r     void parseParameters(String[] args)", "signatureAfterChange": "\r \r     void parseParameters(String[] args)", "diff": ["-                Description description = createSuiteDescription(arg);\r", "-                Failure failure = new Failure(description, e);\r", "-                failures.add(failure);\r", "+                parserErrors.add(e);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebae8cc40c85ee791739e65082aeb2d7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "commitBeforeChange": "e012e06dc326394a3a834d974e9af3fea0e6df91", "commitAfterChange": "5c2070d7cf981e2e103aef6fd0ef64c473331325", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "      public Object[] getActualValues(int start, int stop, boolean nullsOk)             throws CouldNotGenerateValueException", "signatureAfterChange": "      public Object[] getActualValues(int start, int stop)              throws CouldNotGenerateValueException", "diff": ["-    public Object[] getActualValues(int start, int stop, boolean nullsOk)", "+    public Object[] getActualValues(int start, int stop) ", "-            Object value = fAssigned.get(i).getValue();", "-            if (value == null && !nullsOk) {", "-                throw new CouldNotGenerateValueException();", "-            }", "-            values[i - start] = value;", "+            values[i - start] = fAssigned.get(i).getValue();"]}]}
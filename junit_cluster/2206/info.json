{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c588caa0e3a3ba803c397bac781c172d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d0e3686c4396422aeecee29aa4385d7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/requests/ClassRequest.java", "commitBeforeChange": "ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605", "commitAfterChange": "41540137ced4df4aaf0cee69ca43f5d95503c21d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \t@Override \tpublic Runner getRunner()", "signatureAfterChange": "  \t@Override \tpublic Runner getRunner()", "diff": ["-\t\treturn new AllDefaultPossibilitiesBuilder(fCanUseSuiteMethod).safeRunnerForClass(fTestClass);", "+\t\tsynchronized (fRunnerLock) {", "+\t\t\tif (fRunner == null) {", "+\t\t\t\tfRunner = new AllDefaultPossibilitiesBuilder(fCanUseSuiteMethod).safeRunnerForClass(fTestClass);", "+\t\t\t}", "+\t\t\treturn fRunner;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae66e8fd273201efb0ff93f6b452bb2b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/ExpectedException.java", "commitBeforeChange": "94aa692b0489d1fabd31c779c1a700a3b0890a24", "commitAfterChange": "8f0902e5503f4b2fd5a7317ae954a136aa8af94b", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "      private void failDueToMissingException() throws AssertionError", "signatureAfterChange": "      private void failDueToMissingException() throws AssertionError", "diff": ["-        String expectation = StringDescription.toString(fMatcherBuilder.build());", "-        fail(\"Expected test to throw \" + expectation);", "+    \tString failureMessage;", "+    \t", "+    \tif ( isMissingExceptionMessageEmpty() ) {", "+    \t\tString expectation = StringDescription.toString(fMatcherBuilder.build());", "+    \t\tfailureMessage = \"Expected test to throw \" + expectation;", "+    \t} else {", "+    \t\tfailureMessage = missingExceptionMessage;", "+    \t}", "+", "+        fail(failureMessage);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07879a079383680fa457c200765ba458", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "195e124f7b9eacd735742599f1cb7077", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "734ab5187c068599352e5fdc7374c1334d484fef", "commitAfterChange": "54917b88aab026dabb4541276ed875117c1e1faa", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate Statement withInterceptors(FrameworkMethod method, Object target, \t\t\tStatement statement)", "signatureAfterChange": " \t \tprivate Statement withRules(FrameworkMethod method, Object target, \t\t\tStatement statement)", "diff": ["-\tprivate Statement withInterceptors(FrameworkMethod method, Object target,", "+\tprivate Statement withRules(FrameworkMethod method, Object target,", "-\t\tfor (StatementInterceptor each : interceptors(target))", "-\t\t\tresult= each.intercept(result, method, target);", "+\t\tfor (MethodRule each : rules(target))", "+\t\t\tresult= each.apply(result, method, target);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58fffbd343650ff2cd4ba90b762bfea5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "commitBeforeChange": "8e313a1e58a56694c0441b2fa60974fa8e1bfe31", "commitAfterChange": "409a8e06c9f2ec5aa0d9db8a3d413f394c290f6d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \t \tprivate Statement withInterceptors(FrameworkMethod method, Object target, \t\t\tStatement statement)", "signatureAfterChange": " \t \tprivate Statement withRules(FrameworkMethod method, Object target, \t\t\tStatement statement)", "diff": ["-\tprivate Statement withInterceptors(FrameworkMethod method, Object target,", "+\tprivate Statement withRules(FrameworkMethod method, Object target,", "-\t\tfor (StatementInterceptor each : interceptors(target))", "-\t\t\tresult= each.intercept(result, method, target);", "+\t\tfor (MethodRule each : rules(target))", "+\t\t\tresult= each.apply(result, method, target);"]}]}
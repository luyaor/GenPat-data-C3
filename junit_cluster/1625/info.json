{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f583c02518bb35f923c75ae1a859133", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6d24d823d2f0a85d5016b8a3723c4c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/RunRules.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tprivate static Statement applyAll(Statement result, Iterable<TestRule> rules, \t\t\tDescription description)", "signatureAfterChange": "      private static Statement applyAll(Statement result, Iterable<TestRule> rules,             Description description)", "diff": ["-\tprivate static Statement applyAll(Statement result, Iterable<TestRule> rules,", "-\t\t\tDescription description) {", "-\t\tfor (TestRule each : rules)", "-\t\t\tresult= each.apply(result, description);", "-\t\treturn result;", "-\t}", "+", "+    private static Statement applyAll(Statement result, Iterable<TestRule> rules,", "+            Description description) {", "+        for (TestRule each : rules) {", "+            result = each.apply(result, description);", "+        }", "+        return result;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf3219ec49b3843a90b8690b4eae0fb5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/rules/RuleChain.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic Statement apply(Statement base, Description description)", "signatureAfterChange": "     public Statement apply(Statement base, Description description)", "diff": ["-\t */", "-\tpublic Statement apply(Statement base, Description description) {", "-\t\tfor (TestRule each : rulesStartingWithInnerMost)", "-\t\t\tbase= each.apply(base, description);", "-\t\treturn base;", "-\t}", "+     */", "+    public Statement apply(Statement base, Description description) {", "+        for (TestRule each : rulesStartingWithInnerMost) {", "+            base = each.apply(base, description);", "+        }", "+        return base;", "+    }"]}]}
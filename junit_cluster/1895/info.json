{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9548445d3a88956c3118ec32722d41f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "174bd431376e84e3a726168728a89945", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "378e17964a4188bad9b3d966207a2f682072148e", "commitAfterChange": "451ca12156d5704809a1feff78a10a9451cd2023", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \t@Test public void newTestsHavePriorityOverTestsThatFailed()", "signatureAfterChange": " \t@Test public void preferNewTestsOverTestsThatFailed()", "diff": ["-\t@Test public void newTestsHavePriorityOverTestsThatFailed() {", "-\t//TODO work this out later", "+\t// which order they run, you just want them both to be early in the sequence", "+\t@Test public void preferNewTestsOverTestsThatFailed() {", "-\t\tDescription dontSucceed= Description.createTestDescription(TwoTests.class, \"dontSucceed\");", "-\t\tassertEquals(dontSucceed, things.get(0));", "+\t\tassertEquals(succeed, things.get(0));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c18c32adddc662ad069305af1a2d20b5", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/test/java/org/junit/tests/experimental/max/MaxStarterTest.java", "commitBeforeChange": "a72b0dbef4b01e8ad0b832d9a579dd7fabd5a071", "commitAfterChange": "378e17964a4188bad9b3d966207a2f682072148e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t\t@Test public void itsMe()", "signatureAfterChange": " \t \t@Test public void twoTestsNotRun()", "diff": ["-\tpublic static class OneTest {", "-\t\t@Test public void itsMe() {}", "+\t", "+\t@Test public void twoTestsNotRun() {", "+\t\tRequest request= Request.aClass(TwoTests.class);", "+\t\tMaxCore max= new MaxCore();", "+\t\tList<Description> things= max.sort(request);", "+\t\tDescription succeed= Description.createTestDescription(TwoTests.class, \"succeed\");", "+\t\tDescription dontSucceed= Description.createTestDescription(TwoTests.class, \"dontSucceed\");", "+\t\tassertTrue(things.contains(succeed));", "+\t\tassertTrue(things.contains(dontSucceed));", "+\t\tassertEquals(2, things.size());", "+\t}"]}]}
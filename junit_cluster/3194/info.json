{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0cbfc2fac778a341ec36ecad0a204468", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b0f0d901c4d0803792fda46bdf84d6b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/experimental/theories/Theories.java", "commitBeforeChange": "2bb6d5de002052680d443065e1c26f59be212e4b", "commitAfterChange": "6887479f1b64c5a18f5708ea6905bb59804a9a0f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \t@Override \tprotected Link chain(final TestMethod method)", "signatureAfterChange": "  \t@Override \tprotected Link chain(final TestMethod method)", "diff": ["-\t\treturn notifying(method, new Link() {", "-\t\t\t@Override", "-\t\t\tpublic void run(Roadie context) throws Throwable {", "-\t\t\t\tpossiblyExpectingExceptions(method, invoke(method)).run(context);", "-\t\t\t}", "-\t\t});", "+\t\tLink next= invoke(method);", "+\t\tnext= ignoreViolatedAssumptions(next);", "+\t\tnext= possiblyExpectingExceptions(method, next);", "+\t\treturn notifying(method, next);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9c8ea9011921e11c2313264ae505870", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/org/junit/internal/runners/JUnit4MethodRunner.java", "commitBeforeChange": "679e5dd3e4af3115492fabed45ea8c48bfa9d9bf", "commitAfterChange": "4081076e513e84bb2376f889d4108e64e9a18653", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 19, "signatureBeforeChange": "  \tprivate Link chain()", "signatureAfterChange": "  \tprotected Link chain()", "diff": ["-\tprivate Link chain() {", "-\t\tLink expectedException= new Link() {", "-\t\t\t@Override", "-\t\t\tpublic void run(Roadie context) {", "-\t\t\t\trunWithExpectedExceptionCheck(context);", "-\t\t\t}\t\t", "-\t\t};", "-\t\t", "-\t\tTimeout timeout= new Timeout(expectedException);", "-\t\treturn new Notifier(new BeforeAndAfter(timeout));", "-\t}", "+\tprotected Link chain() {", "+\t\tAnchor anchor= anchor();", "+\t\tLink next= handleExceptions(anchor);", "+\t\tnext= timeout(next);", "+\t\tnext= new BeforeAndAfter(next);", "+\t\treturn new Notifier(next);"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00f9ed0f020e6572d4eed24adc7a6a1d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b80480782737a0673061c73766416f7", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runner/Description.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " \tpublic Class<?> getTestClass()", "signatureAfterChange": "     public Class<?> getTestClass()", "diff": ["-\t */", "-\tpublic Class<?> getTestClass() {", "-\t\tif (fTestClass != null)", "-\t\t\treturn fTestClass;", "-\t\tString name= getClassName();", "-\t\tif (name == null)", "-\t\t\treturn null;", "-\t\ttry {", "-\t\t\tfTestClass= Class.forName(name, false, getClass().getClassLoader());", "-\t\t\treturn fTestClass;", "-\t\t} catch (ClassNotFoundException e) {", "-\t\t\treturn null;", "-\t\t}", "-\t}", "+     */", "+    public Class<?> getTestClass() {", "+        if (fTestClass != null) {", "+            return fTestClass;", "+        }", "+        String name = getClassName();", "+        if (name == null) {", "+            return null;", "+        }", "+        try {", "+            fTestClass = Class.forName(name, false, getClass().getClassLoader());", "+            return fTestClass;", "+        } catch (ClassNotFoundException e) {", "+            return null;", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "331927b42857bd147ef0b4f521bc3391", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t\t \t\t\tpublic void run()", "signatureAfterChange": "              public void run()", "diff": ["-\t\t", "-\t\t\tpublic void run() {", "-\t\t\t\tExecutorService service= Executors.newSingleThreadExecutor();", "-\t\t\t\tCallable<Object> callable= new Callable<Object>() {", "-\t\t\t\t\tpublic Object call() throws Exception {", "-\t\t\t\t\t\trunTestMethod();", "-\t\t\t\t\t\treturn null;", "-\t\t\t\t\t}", "-\t\t\t\t};", "-\t\t\t\tFuture<Object> result= service.submit(callable);", "-\t\t\t\tservice.shutdown();", "-\t\t\t\ttry {", "-\t\t\t\t\tboolean terminated= service.awaitTermination(timeout,", "-\t\t\t\t\t\t\tTimeUnit.MILLISECONDS);", "-\t\t\t\t\tif (!terminated)", "-\t\t\t\t\t\tservice.shutdownNow();", "-\t\t\t\t\tresult.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation", "-\t\t\t\t} catch (TimeoutException e) {", "-\t\t\t\t\taddFailure(new Exception(String.format(\"test timed out after %d milliseconds\", timeout)));", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\taddFailure(e);", "-\t\t\t\t}\t\t\t\t", "-\t\t\t}", "+            public void run() {", "+                ExecutorService service = Executors.newSingleThreadExecutor();", "+                Callable<Object> callable = new Callable<Object>() {", "+                    public Object call() throws Exception {", "+                        runTestMethod();", "+                        return null;", "+                    }", "+                };", "+                Future<Object> result = service.submit(callable);", "+                service.shutdown();", "+                try {", "+                    boolean terminated = service.awaitTermination(timeout,", "+                            TimeUnit.MILLISECONDS);", "+                    if (!terminated) {", "+                        service.shutdownNow();", "+                    }", "+                    result.get(0, TimeUnit.MILLISECONDS); // throws the exception if one occurred during the invocation", "+                } catch (TimeoutException e) {", "+                    addFailure(new Exception(String.format(\"test timed out after %d milliseconds\", timeout)));", "+                } catch (Exception e) {", "+                    addFailure(e);", "+                }", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62cbec59e6bd6889995ba1a9ccb30000", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/ParentRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tpublic void filter(Filter filter) throws NoTestsRemainException", "signatureAfterChange": "      public void filter(Filter filter) throws NoTestsRemainException", "diff": ["-\tpublic void filter(Filter filter) throws NoTestsRemainException {", "-\t\tfor (Iterator<T> iter = getFilteredChildren().iterator(); iter.hasNext(); ) {", "-\t\t\tT each = iter.next();", "-\t\t\tif (shouldRun(filter, each))", "-\t\t\t\ttry {", "-\t\t\t\t\tfilter.apply(each);", "-\t\t\t\t} catch (NoTestsRemainException e) {", "-\t\t\t\t\titer.remove();", "-\t\t\t\t}", "-\t\t\telse", "-\t\t\t\titer.remove();", "-\t\t}", "-\t    if (getFilteredChildren().isEmpty()) {", "-\t        throw new NoTestsRemainException();", "-\t    }", "-\t}", "+    public void filter(Filter filter) throws NoTestsRemainException {", "+        for (Iterator<T> iter = getFilteredChildren().iterator(); iter.hasNext(); ) {", "+            T each = iter.next();", "+            if (shouldRun(filter, each)) {", "+                try {", "+                    filter.apply(each);", "+                } catch (NoTestsRemainException e) {", "+                    iter.remove();", "+                }", "+            } else {", "+                iter.remove();", "+            }", "+        }", "+        if (getFilteredChildren().isEmpty()) {", "+            throw new NoTestsRemainException();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64197d961dce0a584dacdc3e04cee4c6", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/runners/Parameterized.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \t@SuppressWarnings(\"unchecked\") \tprivate Iterable<Object[]> allParameters() throws Throwable", "signatureAfterChange": "      @SuppressWarnings(\"unchecked\")     private Iterable<Object[]> allParameters() throws Throwable", "diff": ["-\t@SuppressWarnings(\"unchecked\")", "-\tprivate Iterable<Object[]> allParameters() throws Throwable {", "-\t\tObject parameters= getParametersMethod().invokeExplosively(null);", "-\t\tif (parameters instanceof Iterable)", "-\t\t\treturn (Iterable<Object[]>) parameters;", "-\t\telse", "-\t\t\tthrow parametersMethodReturnedWrongType();", "-\t}", "+    @SuppressWarnings(\"unchecked\")", "+    private Iterable<Object[]> allParameters() throws Throwable {", "+        Object parameters = getParametersMethod().invokeExplosively(null);", "+        if (parameters instanceof Iterable) {", "+            return (Iterable<Object[]>) parameters;", "+        } else {", "+            throw parametersMethodReturnedWrongType();", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "785f74824778e98ae3c2a65c4100a44b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \tpublic static String getFilteredTrace(String stack)", "signatureAfterChange": "     public static String getFilteredTrace(String stack)", "diff": ["-\t */", "-\tpublic static String getFilteredTrace(String stack) {", "-\t\tif (showStackRaw())", "-\t\t\treturn stack;", "-\t\tStringWriter sw= new StringWriter();", "-\t\tPrintWriter pw= new PrintWriter(sw);", "-\t\tStringReader sr= new StringReader(stack);", "-\t\tBufferedReader br= new BufferedReader(sr);", "+     */", "+    public static String getFilteredTrace(String stack) {", "+        if (showStackRaw()) {", "+            return stack;", "+        }", "-\t\tString line;", "-\t\ttry {", "-\t\t\twhile ((line= br.readLine()) != null) {", "-\t\t\t\tif (!filterLine(line))", "-\t\t\t\t\tpw.println(line);", "-\t\t\t}", "-\t\t} catch (Exception IOException) {", "-\t\t\treturn stack; // return the stack unfiltered", "-\t\t}", "-\t\treturn sw.toString();", "-\t}", "+        StringWriter sw = new StringWriter();", "+        PrintWriter pw = new PrintWriter(sw);", "+        StringReader sr = new StringReader(stack);", "+        BufferedReader br = new BufferedReader(sr);", "+        String line;", "+        try {", "+            while ((line = br.readLine()) != null) {", "+                if (!filterLine(line)) {", "+                    pw.println(line);", "+                }", "+            }", "+        } catch (Exception IOException) {", "+            return stack; // return the stack unfiltered", "+        }", "+        return sw.toString();", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "802394ac53368d3a4b7d2338e232ac54", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapterCache.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic Test asTest(Description description)", "signatureAfterChange": "      public Test asTest(Description description)", "diff": ["-\t", "-\tpublic Test asTest(Description description) {", "-\t\tif (description.isSuite())", "-\t\t\treturn createTest(description);", "-\t\telse {", "-\t\t\tif (!containsKey(description))", "-\t\t\t\tput(description, createTest(description));", "-\t\t\treturn get(description);", "-\t\t}", "-\t}", "+    public Test asTest(Description description) {", "+        if (description.isSuite()) {", "+            return createTest(description);", "+        } else {", "+            if (!containsKey(description)) {", "+                put(description, createTest(description));", "+            }", "+            return get(description);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85220a5b4a7a1c0085845e74df10d94b", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/TestClass.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \t \tpublic List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass)", "signatureAfterChange": "      public List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass)", "diff": ["-\t", "-\tpublic List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {", "-\t\tList<Method> results= new ArrayList<Method>();", "-\t\tfor (Class<?> eachClass : getSuperClasses(fClass)) {", "-\t\t\tMethod[] methods= MethodSorter.getDeclaredMethods(eachClass);", "-\t\t\tfor (Method eachMethod : methods) {", "-\t\t\t\tAnnotation annotation= eachMethod.getAnnotation(annotationClass);", "-\t\t\t\tif (annotation != null && ! isShadowed(eachMethod, results)) ", "-\t\t\t\t\tresults.add(eachMethod);", "-\t\t\t}", "-\t\t}", "-\t\tif (runsTopToBottom(annotationClass))", "-\t\t\tCollections.reverse(results);", "-\t\treturn results;", "-\t}", "+    public List<Method> getAnnotatedMethods(Class<? extends Annotation> annotationClass) {", "+        List<Method> results = new ArrayList<Method>();", "+        for (Class<?> eachClass : getSuperClasses(fClass)) {", "+            Method[] methods = MethodSorter.getDeclaredMethods(eachClass);", "+            for (Method eachMethod : methods) {", "+                Annotation annotation = eachMethod.getAnnotation(annotationClass);", "+                if (annotation != null && !isShadowed(eachMethod, results)) {", "+                    results.add(eachMethod);", "+                }", "+            }", "+        }", "+        if (runsTopToBottom(annotationClass)) {", "+            Collections.reverse(results);", "+        }", "+        return results;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8de1bd22f36226559041330313ffe958", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/runner/BaseTestRunner.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \tprotected String processArguments(String[] args)", "signatureAfterChange": "     protected String processArguments(String[] args)", "diff": ["-\t */", "-\tprotected String processArguments(String[] args) {", "-\t\tString suiteName= null;", "-\t\tfor (int i= 0; i < args.length; i++) {", "-\t\t\tif (args[i].equals(\"-noloading\")) {", "-\t\t\t\tsetLoading(false);", "-\t\t\t} else if (args[i].equals(\"-nofilterstack\")) {", "-\t\t\t\tfgFilterStack= false;", "-\t\t\t} else if (args[i].equals(\"-c\")) {", "-\t\t\t\tif (args.length > i+1)", "-\t\t\t\t\tsuiteName= extractClassName(args[i+1]);", "-\t\t\t\telse", "-\t\t\t\t\tSystem.out.println(\"Missing Test class name\");", "-\t\t\t\ti++;", "-\t\t\t} else {", "-\t\t\t\tsuiteName= args[i];", "-\t\t\t}", "-\t\t}", "-\t\treturn suiteName;", "-\t}", "+     */", "+    protected String processArguments(String[] args) {", "+        String suiteName = null;", "+        for (int i = 0; i < args.length; i++) {", "+            if (args[i].equals(\"-noloading\")) {", "+                setLoading(false);", "+            } else if (args[i].equals(\"-nofilterstack\")) {", "+                fgFilterStack = false;", "+            } else if (args[i].equals(\"-c\")) {", "+                if (args.length > i + 1) {", "+                    suiteName = extractClassName(args[i + 1]);", "+                } else {", "+                    System.out.println(\"Missing Test class name\");", "+                }", "+                i++;", "+            } else {", "+                suiteName = args[i];", "+            }", "+        }", "+        return suiteName;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc27a427d5fcb381c99dbe65ad2a106f", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "bbbb8571f1a3cdcb9af977867c7a16de3a1f5a76", "commitAfterChange": "d96a05f8d33ed781c701c58dd285bf6464112719", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 12, "signatureBeforeChange": "     private Thread[] getThreadArray(ThreadGroup group)", "signatureAfterChange": "     private Thread[] getThreadArray(ThreadGroup group)", "diff": ["-            if (enumCount < enumSize) break;", "+            if (enumCount < enumSize) {", "+                break;", "+            }", "-            if (++loopCount >= 5) ", "+            if (++loopCount >= 5) {", "+            }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c877be10cddad2f74f9d3b8fb4f99a3a", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/Assert.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tstatic private boolean doubleIsDifferent(double d1, double d2, double delta)", "signatureAfterChange": "      static private boolean doubleIsDifferent(double d1, double d2, double delta)", "diff": ["-\t\t}", "-\tstatic private boolean doubleIsDifferent(double d1, double d2, double delta) {", "-\t\tif (Double.compare(d1, d2) == 0)", "-\t\t\treturn false;", "-\t\tif ((Math.abs(d1 - d2) <= delta))", "-\t\t\treturn false;", "-\t\t", "-\t\treturn true;", "-\t}", "+    static private boolean doubleIsDifferent(double d1, double d2, double delta) {", "+        if (Double.compare(d1, d2) == 0) {", "+            return false;", "+        }", "+        if ((Math.abs(d1 - d2) <= delta)) {", "+            return false;", "+        }", "+        return true;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca5db3315a3b83707c604417f80720db", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/MethodRoadie.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic void run()", "signatureAfterChange": "      public void run()", "diff": ["-\tpublic void run() {", "-\t\tif (fTestMethod.isIgnored()) {", "-\t\t\tfNotifier.fireTestIgnored(fDescription);", "-\t\t\treturn;", "-\t\t}", "-\t\tfNotifier.fireTestStarted(fDescription);", "-\t\ttry {", "-\t\t\tlong timeout= fTestMethod.getTimeout();", "-\t\t\tif (timeout > 0)", "-\t\t\t\trunWithTimeout(timeout);", "-\t\t\telse", "-\t\t\t\trunTest();", "-\t\t} finally {", "-\t\t\tfNotifier.fireTestFinished(fDescription);", "-\t\t}", "-\t}", "+    public void run() {", "+        if (fTestMethod.isIgnored()) {", "+            fNotifier.fireTestIgnored(fDescription);", "+            return;", "+        }", "+        fNotifier.fireTestStarted(fDescription);", "+        try {", "+            long timeout = fTestMethod.getTimeout();", "+            if (timeout > 0) {", "+                runWithTimeout(timeout);", "+            } else {", "+                runTest();", "+            }", "+        } finally {", "+            fNotifier.fireTestFinished(fDescription);", "+        }", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0f580d761a03dd4b9c92188d08b23f4", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/junit/framework/JUnit4TestAdapter.java", "commitBeforeChange": "68cc61e2b6ae43f3ab6ef9a54e16b9318d3d038f", "commitAfterChange": "30f2b16525dabb477373be9ed3e76bb98b200806", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  \tprivate Description removeIgnored(Description description)", "signatureAfterChange": "      private Description removeIgnored(Description description)", "diff": ["-\tprivate Description removeIgnored(Description description) {", "-\t\tif (isIgnored(description))", "-\t\t\treturn Description.EMPTY;", "-\t\tDescription result = description.childlessCopy();", "-\t\tfor (Description each : description.getChildren()) {", "-\t\t\tDescription child= removeIgnored(each);", "-\t\t\tif (! child.isEmpty())", "-\t\t\t\tresult.addChild(child);", "-\t\t}", "-\t\treturn result;", "-\t}", "+    private Description removeIgnored(Description description) {", "+        if (isIgnored(description)) {", "+            return Description.EMPTY;", "+        }", "+        Description result = description.childlessCopy();", "+        for (Description each : description.getChildren()) {", "+            Description child = removeIgnored(each);", "+            if (!child.isEmpty()) {", "+                result.addChild(child);", "+            }", "+        }", "+        return result;", "+    }"]}]}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1052c30a62491df9e44dfcbae02c769a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39ea9b1a8ec85ca0883f60a4dc6a224c", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "5ca9da987a7d4dc00e082aaf552cbd8ee8c7bd33", "commitAfterChange": "fba19ba73a93dcc2d18942b3cf4992ce010afdb2", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private Exception createTimeoutException(Thread thread)", "signatureAfterChange": "      private Exception createTimeoutException(Thread thread)", "diff": ["+        Exception resultException;", "-        final Thread stuckThread = getStuckThread (thread);", "-        Exception exception = new Exception(String.format(", "+        final Thread stuckThread = getStuckThread(thread);", "+        Exception currThreadException = new Exception(String.format(", "-            StackTraceElement[] threadStack;", "-            try {", "-                threadStack = stuckThread.getStackTrace();", "-            } catch (SecurityException e) {", "-                threadStack = new StackTraceElement[0];", "-            }", "-            stuckThreadException.setStackTrace (threadStack);", "-            exception = new MultipleFailureException    ", "-                (Arrays.<Throwable>asList (exception, stuckThreadException));", "+            stuckThreadException.setStackTrace(getStackTrace(stuckThread));", "+            resultException = new MultipleFailureException    ", "+                (Arrays.<Throwable>asList(currThreadException, stuckThreadException));", "+        } else {", "+            resultException = currThreadException;", "-            exception.setStackTrace(stackTrace);", "+            currThreadException.setStackTrace(stackTrace);", "-        return exception;", "+        return resultException;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a51945fa39b0e8699f4647b9162bc28", "repository": "https://github.com/junit-team/junit.git", "fileName": "src/main/java/org/junit/internal/runners/statements/FailOnTimeout.java", "commitBeforeChange": "1768d08d029dc3bf1ab88e26df0a9b40ae61227f", "commitAfterChange": "5ca9da987a7d4dc00e082aaf552cbd8ee8c7bd33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "      private Exception createTimeoutException(Thread thread)", "signatureAfterChange": "      private Exception createTimeoutException(Thread thread)", "diff": ["-        String message = String.format(", "-                \"test timed out after %d %s\", fTimeout, fTimeUnit.name().toLowerCase());", "-        Exception exception = (stuckThread == null) ", "-        \t? new Exception(message) ", "-            : new ExceptionWithThread (message, stuckThread,", "-            \t\t\"Appears to be stuck in thread {0}\");", "+        Exception exception = new Exception(String.format(", "+                \"test timed out after %d %s\", fTimeout, fTimeUnit.name().toLowerCase()));", "+        if (stuckThread != null) {", "+            Exception stuckThreadException = ", "+                new Exception (\"Appears to be stuck in thread \" +", "+                               stuckThread.getName());", "+            StackTraceElement[] threadStack;", "+            try {", "+                threadStack = stuckThread.getStackTrace();", "+            } catch (SecurityException e) {", "+                threadStack = new StackTraceElement[0];", "+            }", "+            stuckThreadException.setStackTrace (threadStack);", "+            exception = new MultipleFailureException    ", "+                (Arrays.<Throwable>asList (exception, stuckThreadException));", "+        }"]}]}